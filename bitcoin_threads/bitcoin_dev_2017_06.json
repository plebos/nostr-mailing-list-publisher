[
    {
        "title": "[bitcoin-dev] [RFC] Lightning invoice/payment format draft",
        "thread_messages": [
            {
                "author": "Rusty Russell",
                "date": "2017-06-01T01:28:20",
                "message_text_only": "Hi all,\n\n        There's a pull request for a lightning payment format which I'd\nlove wider review on.  It's bech32 encoded, with optional parts tagged:\n\n        https://github.com/lightningnetwork/lightning-rfc/pull/183\n\nThere's an implementation with a less formal description here, too:\n\n        https://github.com/rustyrussell/lightning-payencode\n\nExample:\n        Send 2500 microbitcoin using payment hash 00010203040506...0102 to me\n        @03e7156ae33b0a208d0744199163177e909e80176e55d97a2f221ede0f934dd9ad\n        within 1 minute from now (Tue 30 May 12:17:36 UTC 2017):\n\n        lnbc2500u1qpvj6chqqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqdq5xysxxatsyp3k7enxv4jsxqz8slk6hqew9z5kzxyk33ast248j3ykmu3wncvgtgk0ewf5c6qnhen45vr43fmtzsh02j6ns096tcpfga0yfykc79e5uw3gh5ltr96q00zqppy6lfy\n\nThanks!\nRusty."
            },
            {
                "author": "Andreas Schildbach",
                "date": "2017-06-01T05:54:37",
                "message_text_only": "In order for such messages to be dispatchable between apps, I suggest\nprepending with an URI scheme, similar to the already existing\n\"bitcoin:\" scheme.\n\nAlso I suggest defining a MIME type, e.g. for usage in NFC NDEF messages\nor emails.\n\nWhat is the relation of this BIP to BIP21 and BIP70-72? Is there a\nreason for not extending BIP70?\n\n\nOn 06/01/2017 03:28 AM, Rusty Russell via bitcoin-dev wrote:\n> Hi all,\n> \n>         There's a pull request for a lightning payment format which I'd\n> love wider review on.  It's bech32 encoded, with optional parts tagged:\n> \n>         https://github.com/lightningnetwork/lightning-rfc/pull/183\n> \n> There's an implementation with a less formal description here, too:\n> \n>         https://github.com/rustyrussell/lightning-payencode\n> \n> Example:\n>         Send 2500 microbitcoin using payment hash 00010203040506...0102 to me\n>         @03e7156ae33b0a208d0744199163177e909e80176e55d97a2f221ede0f934dd9ad\n>         within 1 minute from now (Tue 30 May 12:17:36 UTC 2017):\n> \n>         lnbc2500u1qpvj6chqqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqdq5xysxxatsyp3k7enxv4jsxqz8slk6hqew9z5kzxyk33ast248j3ykmu3wncvgtgk0ewf5c6qnhen45vr43fmtzsh02j6ns096tcpfga0yfykc79e5uw3gh5ltr96q00zqppy6lfy\n> \n> Thanks!\n> Rusty.\n>"
            }
        ],
        "thread_summary": {
            "title": "Lightning invoice/payment format draft",
            "categories": [
                "bitcoin-dev",
                "RFC"
            ],
            "authors": [
                "Rusty Russell",
                "Andreas Schildbach"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2068
        }
    },
    {
        "title": "[bitcoin-dev] [Lightning-dev] [RFC] Lightning invoice/payment format draft",
        "thread_messages": [
            {
                "author": "ZmnSCPxj",
                "date": "2017-06-01T03:42:21",
                "message_text_only": "Good morning Rusty,\n\nThe fact that amount is optional, and the separator character between human-readable and data is the character \"1\", may mean some trouble with parsing of the optional amount.\n\nCurrently, the version is 0, which translates to the character \"q\" appearing after \"1\". So 1q is obviously not an amount and is known to start the data part.\n\nHowever, what happens when we decide to upgrade, and version is now 1, translating to character \"p\"?\n\nIf version 1 of invoice is avalialble, does a payment starting with lnbc1p .... indicate a 1 pico-bitcoin payment, or an arbitrary payment to a version-1 data part?\n\nOr is amount not allowed to have character \"1\"? It seems a strange limitation if we impose this...\n\nOr do I mistake my understanding of bech32?\n\nAlternatively we can just fix the first 5 bits to be 0 (so \"1q\" is an unambiguous separator between human-readable and data parts) and provide the version by other means, such as changing lnbc to ln2bc or so on...\n\n> simply reused here even though its 6-character checksum is optimized\n> for human errors, which are unlikely given the length of lightning\n> invoices.\n\nAt first read, this seems wrong. My understanding is that lightning invoices are longer than segwit addresses in bech32, so human error is more likely.\n\nOf course, it seems that the intended meaning is really \"lightning invoices are so long that it is unlikely humans will enter it by hand, so human errors are unlikely compared to QR reader errors etc.\" so perhaps better reworded as such.\n\nRegards,\nZmnSCPxj\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170531/80a1f0d2/attachment.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2017-06-01T03:48:46",
                "message_text_only": "Good morning,\n\n>Or do I mistake my understanding of bech32?\n\nLooking again at bech32 spec, yes, my understanding is wrong: the character \"1\" is not allowed in the data part, so the last \"1\" digit in the bech32 string is unambiguously the separator between the human-readable and data parts, please ignore me.\n\nRegards,\nZmnSCPxj\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170531/2f45c053/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Lightning invoice/payment format draft",
            "categories": [
                "bitcoin-dev",
                "Lightning-dev",
                "RFC"
            ],
            "authors": [
                "ZmnSCPxj"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2239
        }
    },
    {
        "title": "[bitcoin-dev] Block Filter Digest profiling",
        "thread_messages": [
            {
                "author": "Karl Johan Alm",
                "date": "2017-06-01T02:11:48",
                "message_text_only": "Hello,\n\nI have spent a fair bit of time trying to nail how exactly block\nfilter digests[1] should be done to optimize bandwidth, space,\nresource usage.\n\nThe report can be found here: http://bc-2.jp/bfd-profile.pdf\n\nThis graph shows bandwidth use of 200 wallets simulated over 5000\nblocks: http://bc-2.jp/bandwidth_bfd.png (black line is \"sync once per\nblock\" wallet, yellow is \"sync once per 144 blocks\" wallet, red is\naverage across all wallets).\n\nAn interesting insight made during the experiments: when allowing\ndigests to contain multiple blocks, the false positive rate of high\nblock count digests can be higher than normal, because the probability\nof a false positive hit for a given entry in multiple digests,\nassuming their sizes differ, is almost completely independent.\n\nThe results look rather promising to me, but I would like to hear\ncomments, in particular on the approach taken, if I made any faulty\nassumptions, bad math mistakes, etc.\n\nI am also curious what people consider to be acceptable costs in terms\nof bandwidth use and memory (I couldn't find any stats on bandwidth\nuse of bloom filters). In the profiling, I restricted the field sizes\nto 2^27 = 128 MB. I assumed this was appropriate as these fields are\nvery short lived, and in worst case, a client *could* do the scan and\ndecode simultaneously, without allocating up the space for the field\nat all. For high block count digests (e.g. 1024 blocks), this is\nsometimes overfilled. I wonder if 2^28 (256 MB) fields would be at all\nacceptable or if an over-filled (high false positive rate) field is\nbetter.\n\nFor that matter, I am not entirely sure 1024-block digests are\nnecessary, but they do come with an average 15 kb/block which is\npretty good.\n\nI also wonder if the serialization approach taken is overkill or not.\nIt does save some space instead of simply storing \"BBBAAAAA\" but adds\nsome complexity that may not be warranted.\n\n[1] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-May/012636.html"
            }
        ],
        "thread_summary": {
            "title": "Block Filter Digest profiling",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Karl Johan Alm"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1989
        }
    },
    {
        "title": "[bitcoin-dev] A Method for Computing Merkle Roots of Annotated Binary Trees",
        "thread_messages": [
            {
                "author": "Russell O'Connor",
                "date": "2017-06-01T15:10:56",
                "message_text_only": "On Mon, May 29, 2017 at 12:10 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> On Mon, May 29, 2017 at 10:55:37AM -0400, Russell O'Connor wrote:\n> > Some of this proposal can be salvaged, I think, by putting the hash of\n> the\n> > tags into Sha256Compress's first argument:\n> >\n> >     merkleRoot : Tree BitString -> Word256\n> >     merkleRoot (Leaf (t))                := sha256Compress(sha256(t),\n> > 0b0^512)\n> >     merkleRoot (Unary (t, child))        := sha256Compress(sha256(t),\n> > merkleRoot(child) \u22c5 0b0^256)\n> >     merkleRoot (Binary (t, left, right)) := sha256Compress(sha256(t),\n> > merkleRoot(left) \u22c5 merkleRoot(right))\n> >\n> > The Merkle--Damg\u00e5rd property will still hold under the same conditions\n> > about tags determining the type of node (Leaf, Unary, or Binary) while\n> > avoiding the need for SHA256's padding.  If you have a small number of\n> > tags, then you can pre-compute their hashes so that you only end up with\n> > one call to SHA256 compress per node. If you have tags with a large\n> amount\n> > of data, you were going to be hashing them anyways.\n>\n> Notice how what you're proposing here is almost the same thing as using\n> SHA256\n> directly, modulo the fact that you skip the final block containing the\n> message\n> length.\n>\n> Similarly, you don't need to compute sha256(t) - you can just as easily\n> compute\n> the midstate sha256Compress(IV, t), and cache that midstate if you can\n> reuse\n> tags. Again, the only difference is the last block.\n>\n\nYes, either way would be fine.\n\n\n> > Unfortunately we lose the ability to cleverly avoid collisions between\n> the\n> > Sha256 and MerkleRoot functions by using safe tags.\n>\n> I think a better question to ask is why you want that property in the first\n> place?\n>\n> My earlier python-proofmarshal(1) library had a scheme of per-use-case\n> tags,\n> but I eventually realised that depending on tags being unique is a\n> footgun. For\n> example, it's easy to see how two different systems could end up using the\n> same\n> tag due to designers forgetting to create new tags while copying and\n> pasting\n> old code. Similarly, if two such systems have to be integrated, you'll end\n> up\n> with tags getting reused for two different purposes.\n>\n> Now, if you design a system where that doesn't matter, then by extension\n> it'll\n> also be true that collisions between the sha256 and merkleroot functions\n> don't\n> matter either. And that system will be more robust to design mistakes, as\n> tags\n> only need to be unique \"locally\" to distinguish between different\n> sub-types in\n> a sum type (enum).\n>\n\nI was looking to add the property mostly because it was free to do with my\noriginal design when the set of tags was small and could make some\napplications more robust and/or easier to debug.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170601/80c03c9c/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2017-06-27T04:13:08",
                "message_text_only": "On Mon, May 29, 2017 at 10:55:37AM -0400, Russell O'Connor wrote:\n> > This doesn't hold true in the case of pruned trees, as for the pruning to\n> > be\n> > useful, you don't know what produced the left merkleRoot, and thus you\n> > can't\n> > guarantee it is in fact a midstate of a genuine SHA256 hash.\n> >\n> \n> Thanks for the review Peter.  This does seem like a serious issue that I\n> hadn't considered yet.  As far as I understand, we have no reason to think\n> that the SHA-256 compression function will be secure with chosen initial\n> values.\n\nRelevant: fixed points can be found for the SHA256 compression function, if the\nattacker can control the IV:\n\nhttps://crypto.stackexchange.com/questions/48580/fixed-point-of-the-sha-256-compression-function\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170627/79b22ad1/attachment-0001.sig>"
            }
        ],
        "thread_summary": {
            "title": "A Method for Computing Merkle Roots of Annotated Binary Trees",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Russell O'Connor",
                "Peter Todd"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 4026
        }
    },
    {
        "title": "[bitcoin-dev] BIP Proposal: Compact Client Side Filtering for Light Clients",
        "thread_messages": [
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2017-06-01T19:01:14",
                "message_text_only": "Hi y'all,\n\nAlex Akselrod and I would like to propose a new light client BIP for\nconsideration:\n   * https://github.com/Roasbeef/bips/blob/master/gcs_light_client.mediawiki\n\nThis BIP proposal describes a concrete specification (along with a\nreference implementations[1][2][3]) for the much discussed client-side\nfiltering reversal of BIP-37. The precise details are described in the\nBIP, but as a summary: we've implemented a new light-client mode that uses\nclient-side filtering based off of Golomb-Rice coded sets. Full-nodes\nmaintain an additional index of the chain, and serve this compact filter\n(the index) to light clients which request them. Light clients then fetch\nthese filters, query the locally and _maybe_ fetch the block if a relevant\nitem matches. The cool part is that blocks can be fetched from _any_\nsource, once the light client deems it necessary. Our primary motivation\nfor this work was enabling a light client mode for lnd[4] in order to\nsupport a more light-weight back end paving the way for the usage of\nLightning on mobile phones and other devices. We've integrated neutrino\nas a back end for lnd, and will be making the updated code public very\nsoon.\n\nOne specific area we'd like feedback on is the parameter selection. Unlike\nBIP-37 which allows clients to dynamically tune their false positive rate,\nour proposal uses a _fixed_ false-positive. Within the document, it's\ncurrently specified as P = 1/2^20. We've done a bit of analysis and\noptimization attempting to optimize the following sum:\nfilter_download_bandwidth + expected_block_false_positive_bandwidth. Alex\nhas made a JS calculator that allows y'all to explore the affect of\ntweaking the false positive rate in addition to the following variables:\nthe number of items the wallet is scanning for, the size of the blocks,\nnumber of blocks fetched, and the size of the filters themselves. The\ncalculator calculates the expected bandwidth utilization using the CDF of\nthe Geometric Distribution. The calculator can be found here:\nhttps://aakselrod.github.io/gcs_calc.html. Alex also has an empirical\nscript he's been running on actual data, and the results seem to match up\nrather nicely.\n\nWe we're excited to see that Karl Johan Alm (kallewoof) has done some\n(rather extensive!) analysis of his own, focusing on a distinct encoding\ntype [5]. I haven't had the time yet to dig into his report yet, but I\nthink I've read enough to extract the key difference in our encodings: his\nfilters use a binomial encoding _directly_ on the filter contents, will we\ninstead create a Golomb-Coded set with the contents being _hashes_ (we use\nsiphash) of the filter items.\n\nUsing a fixed fp=20, I have some stats detailing the total index size, as\nwell as averages for both mainnet and testnet. For mainnet, using the\nfilter contents as currently described in the BIP (basic + extended), the\ntotal size of the index comes out to 6.9GB. The break down is as follows:\n\n    * total size:  6976047156\n    * total avg:  14997.220622758816\n    * total median:  3801\n    * total max:  79155\n    * regular size:  3117183743\n    * regular avg:  6701.372750217131\n    * regular median:  1734\n    * regular max:  67533\n    * extended size:  3858863413\n    * extended avg:  8295.847872541684\n    * extended median:  2041\n    * extended max:  52508\n\nIn order to consider the average+median filter sizes in a world worth\nlarger blocks, I also ran the index for testnet:\n\n    * total size:  2753238530\n    * total avg:  5918.95736054141\n    * total median:  60202\n    * total max:  74983\n    * regular size:  1165148878\n    * regular avg:  2504.856172982827\n    * regular median:  24812\n    * regular max:  64554\n    * extended size:  1588089652\n    * extended avg:  3414.1011875585823\n    * extended median:  35260\n    * extended max:  41731\n\nFinally, here are the testnet stats which take into account the increase\nin the maximum filter size due to segwit's block-size increase. The max\nfilter sizes are a bit larger due to some of the habitual blocks I\ncreated last year when testing segwit (transactions with 30k inputs, 30k\noutputs, etc).\n\n     * total size:  585087597\n     * total avg:  520.8839608674402\n     * total median:  20\n     * total max:  164598\n     * regular size:  299325029\n     * regular avg:  266.4790836307566\n     * regular median:  13\n     * regular max:  164583\n     * extended size:  285762568\n     * extended avg:  254.4048772366836\n     * extended median:  7\n     * extended max:  127631\n\nFor those that are interested in the raw data, I've uploaded a CSV file\nof raw data for each block (mainnet + testnet), which can be found here:\n     * mainnet: (14MB):\nhttps://www.dropbox.com/s/4yk2u8dj06njbuv/mainnet-gcs-stats.csv?dl=0\n     * testnet: (25MB):\nhttps://www.dropbox.com/s/w7dmmcbocnmjfbo/gcs-stats-testnet.csv?dl=0\n\n\nWe look forward to getting feedback from all of y'all!\n\n-- Laolu\n\n\n[1]: https://github.com/lightninglabs/neutrino\n[2]: https://github.com/Roasbeef/btcd/tree/segwit-cbf\n[3]: https://github.com/Roasbeef/btcutil/tree/gcs/gcs\n[4]: https://github.com/lightningnetwork/lnd/\n\n-- Laolu\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170601/dc7d95ae/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2017-06-01T21:00:02",
                "message_text_only": "Thanks for sending this proposal! I look forward to having a great\ndiscussion around this.\n\n- Eric\n\nOn Thursday, June 1, 2017, Olaoluwa Osuntokun via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi y'all,\n>\n> Alex Akselrod and I would like to propose a new light client BIP for\n> consideration:\n>    * https://github.com/Roasbeef/bips/blob/master/gcs_light_\n> client.mediawiki\n>\n> This BIP proposal describes a concrete specification (along with a\n> reference implementations[1][2][3]) for the much discussed client-side\n> filtering reversal of BIP-37. The precise details are described in the\n> BIP, but as a summary: we've implemented a new light-client mode that uses\n> client-side filtering based off of Golomb-Rice coded sets. Full-nodes\n> maintain an additional index of the chain, and serve this compact filter\n> (the index) to light clients which request them. Light clients then fetch\n> these filters, query the locally and _maybe_ fetch the block if a relevant\n> item matches. The cool part is that blocks can be fetched from _any_\n> source, once the light client deems it necessary. Our primary motivation\n> for this work was enabling a light client mode for lnd[4] in order to\n> support a more light-weight back end paving the way for the usage of\n> Lightning on mobile phones and other devices. We've integrated neutrino\n> as a back end for lnd, and will be making the updated code public very\n> soon.\n>\n> One specific area we'd like feedback on is the parameter selection. Unlike\n> BIP-37 which allows clients to dynamically tune their false positive rate,\n> our proposal uses a _fixed_ false-positive. Within the document, it's\n> currently specified as P = 1/2^20. We've done a bit of analysis and\n> optimization attempting to optimize the following sum:\n> filter_download_bandwidth + expected_block_false_positive_bandwidth. Alex\n> has made a JS calculator that allows y'all to explore the affect of\n> tweaking the false positive rate in addition to the following variables:\n> the number of items the wallet is scanning for, the size of the blocks,\n> number of blocks fetched, and the size of the filters themselves. The\n> calculator calculates the expected bandwidth utilization using the CDF of\n> the Geometric Distribution. The calculator can be found here:\n> https://aakselrod.github.io/gcs_calc.html. Alex also has an empirical\n> script he's been running on actual data, and the results seem to match up\n> rather nicely.\n>\n> We we're excited to see that Karl Johan Alm (kallewoof) has done some\n> (rather extensive!) analysis of his own, focusing on a distinct encoding\n> type [5]. I haven't had the time yet to dig into his report yet, but I\n> think I've read enough to extract the key difference in our encodings: his\n> filters use a binomial encoding _directly_ on the filter contents, will we\n> instead create a Golomb-Coded set with the contents being _hashes_ (we use\n> siphash) of the filter items.\n>\n> Using a fixed fp=20, I have some stats detailing the total index size, as\n> well as averages for both mainnet and testnet. For mainnet, using the\n> filter contents as currently described in the BIP (basic + extended), the\n> total size of the index comes out to 6.9GB. The break down is as follows:\n>\n>     * total size:  6976047156\n>     * total avg:  14997.220622758816\n>     * total median:  3801\n>     * total max:  79155\n>     * regular size:  3117183743\n>     * regular avg:  6701.372750217131\n>     * regular median:  1734\n>     * regular max:  67533\n>     * extended size:  3858863413\n>     * extended avg:  8295.847872541684\n>     * extended median:  2041\n>     * extended max:  52508\n>\n> In order to consider the average+median filter sizes in a world worth\n> larger blocks, I also ran the index for testnet:\n>\n>     * total size:  2753238530\n>     * total avg:  5918.95736054141\n>     * total median:  60202\n>     * total max:  74983\n>     * regular size:  1165148878\n>     * regular avg:  2504.856172982827\n>     * regular median:  24812\n>     * regular max:  64554\n>     * extended size:  1588089652\n>     * extended avg:  3414.1011875585823\n>     * extended median:  35260\n>     * extended max:  41731\n>\n> Finally, here are the testnet stats which take into account the increase\n> in the maximum filter size due to segwit's block-size increase. The max\n> filter sizes are a bit larger due to some of the habitual blocks I\n> created last year when testing segwit (transactions with 30k inputs, 30k\n> outputs, etc).\n>\n>      * total size:  585087597\n>      * total avg:  520.8839608674402\n>      * total median:  20\n>      * total max:  164598\n>      * regular size:  299325029\n>      * regular avg:  266.4790836307566\n>      * regular median:  13\n>      * regular max:  164583\n>      * extended size:  285762568\n>      * extended avg:  254.4048772366836\n>      * extended median:  7\n>      * extended max:  127631\n>\n> For those that are interested in the raw data, I've uploaded a CSV file\n> of raw data for each block (mainnet + testnet), which can be found here:\n>      * mainnet: (14MB): https://www.dropbox.com/s/\n> 4yk2u8dj06njbuv/mainnet-gcs-stats.csv?dl=0\n>      * testnet: (25MB): https://www.dropbox.com/s/\n> w7dmmcbocnmjfbo/gcs-stats-testnet.csv?dl=0\n>\n>\n> We look forward to getting feedback from all of y'all!\n>\n> -- Laolu\n>\n>\n> [1]: https://github.com/lightninglabs/neutrino\n> [2]: https://github.com/Roasbeef/btcd/tree/segwit-cbf\n> [3]: https://github.com/Roasbeef/btcutil/tree/gcs/gcs\n> [4]: https://github.com/lightningnetwork/lnd/\n>\n> -- Laolu\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170601/e4d43fdf/attachment-0001.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2017-06-01T21:33:43",
                "message_text_only": "Quick comment before I finish reading it completely, looks like you have no way to match the input prevouts being spent, which is rather nice from a \"watch for this output being spent\" pov.\n\nOn June 1, 2017 3:01:14 PM EDT, Olaoluwa Osuntokun via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>Hi y'all,\n>\n>Alex Akselrod and I would like to propose a new light client BIP for\n>consideration:\n>*\n>https://github.com/Roasbeef/bips/blob/master/gcs_light_client.mediawiki\n>\n>This BIP proposal describes a concrete specification (along with a\n>reference implementations[1][2][3]) for the much discussed client-side\n>filtering reversal of BIP-37. The precise details are described in the\n>BIP, but as a summary: we've implemented a new light-client mode that\n>uses\n>client-side filtering based off of Golomb-Rice coded sets. Full-nodes\n>maintain an additional index of the chain, and serve this compact\n>filter\n>(the index) to light clients which request them. Light clients then\n>fetch\n>these filters, query the locally and _maybe_ fetch the block if a\n>relevant\n>item matches. The cool part is that blocks can be fetched from _any_\n>source, once the light client deems it necessary. Our primary\n>motivation\n>for this work was enabling a light client mode for lnd[4] in order to\n>support a more light-weight back end paving the way for the usage of\n>Lightning on mobile phones and other devices. We've integrated neutrino\n>as a back end for lnd, and will be making the updated code public very\n>soon.\n>\n>One specific area we'd like feedback on is the parameter selection.\n>Unlike\n>BIP-37 which allows clients to dynamically tune their false positive\n>rate,\n>our proposal uses a _fixed_ false-positive. Within the document, it's\n>currently specified as P = 1/2^20. We've done a bit of analysis and\n>optimization attempting to optimize the following sum:\n>filter_download_bandwidth + expected_block_false_positive_bandwidth.\n>Alex\n>has made a JS calculator that allows y'all to explore the affect of\n>tweaking the false positive rate in addition to the following\n>variables:\n>the number of items the wallet is scanning for, the size of the blocks,\n>number of blocks fetched, and the size of the filters themselves. The\n>calculator calculates the expected bandwidth utilization using the CDF\n>of\n>the Geometric Distribution. The calculator can be found here:\n>https://aakselrod.github.io/gcs_calc.html. Alex also has an empirical\n>script he's been running on actual data, and the results seem to match\n>up\n>rather nicely.\n>\n>We we're excited to see that Karl Johan Alm (kallewoof) has done some\n>(rather extensive!) analysis of his own, focusing on a distinct\n>encoding\n>type [5]. I haven't had the time yet to dig into his report yet, but I\n>think I've read enough to extract the key difference in our encodings:\n>his\n>filters use a binomial encoding _directly_ on the filter contents, will\n>we\n>instead create a Golomb-Coded set with the contents being _hashes_ (we\n>use\n>siphash) of the filter items.\n>\n>Using a fixed fp=20, I have some stats detailing the total index size,\n>as\n>well as averages for both mainnet and testnet. For mainnet, using the\n>filter contents as currently described in the BIP (basic + extended),\n>the\n>total size of the index comes out to 6.9GB. The break down is as\n>follows:\n>\n>    * total size:  6976047156\n>    * total avg:  14997.220622758816\n>    * total median:  3801\n>    * total max:  79155\n>    * regular size:  3117183743\n>    * regular avg:  6701.372750217131\n>    * regular median:  1734\n>    * regular max:  67533\n>    * extended size:  3858863413\n>    * extended avg:  8295.847872541684\n>    * extended median:  2041\n>    * extended max:  52508\n>\n>In order to consider the average+median filter sizes in a world worth\n>larger blocks, I also ran the index for testnet:\n>\n>    * total size:  2753238530\n>    * total avg:  5918.95736054141\n>    * total median:  60202\n>    * total max:  74983\n>    * regular size:  1165148878\n>    * regular avg:  2504.856172982827\n>    * regular median:  24812\n>    * regular max:  64554\n>    * extended size:  1588089652\n>    * extended avg:  3414.1011875585823\n>    * extended median:  35260\n>    * extended max:  41731\n>\n>Finally, here are the testnet stats which take into account the\n>increase\n>in the maximum filter size due to segwit's block-size increase. The max\n>filter sizes are a bit larger due to some of the habitual blocks I\n>created last year when testing segwit (transactions with 30k inputs,\n>30k\n>outputs, etc).\n>\n>     * total size:  585087597\n>     * total avg:  520.8839608674402\n>     * total median:  20\n>     * total max:  164598\n>     * regular size:  299325029\n>     * regular avg:  266.4790836307566\n>     * regular median:  13\n>     * regular max:  164583\n>     * extended size:  285762568\n>     * extended avg:  254.4048772366836\n>     * extended median:  7\n>     * extended max:  127631\n>\n>For those that are interested in the raw data, I've uploaded a CSV file\n>of raw data for each block (mainnet + testnet), which can be found\n>here:\n>     * mainnet: (14MB):\n>https://www.dropbox.com/s/4yk2u8dj06njbuv/mainnet-gcs-stats.csv?dl=0\n>     * testnet: (25MB):\n>https://www.dropbox.com/s/w7dmmcbocnmjfbo/gcs-stats-testnet.csv?dl=0\n>\n>\n>We look forward to getting feedback from all of y'all!\n>\n>-- Laolu\n>\n>\n>[1]: https://github.com/lightninglabs/neutrino\n>[2]: https://github.com/Roasbeef/btcd/tree/segwit-cbf\n>[3]: https://github.com/Roasbeef/btcutil/tree/gcs/gcs\n>[4]: https://github.com/lightningnetwork/lnd/\n>\n>-- Laolu"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2017-06-01T22:10:34",
                "message_text_only": "Eric wrote:\n> Thanks for sending this proposal! I look forward to having a great\n> discussion around this.\n\nThanks Eric! We really appreciated the early feedback you gave on the\ninitial design.\n\nOne aspect which isn't in this BIP draft is direct support for unconfirmed\ntransactions. I consider such a feature an important UX feature for mobile\nphones, and something which I've personally seen as an important\nUX-experience when on-boarding new users to Bitcoin. This was brought up\nin the original \"bfd\" mailing list chain [1]. Possible solutions are: a\nnew beefier INV message which contains enough information to be able to\nidentify relevant outputs created in a transaction, or a \"streaming\" p2p\nextension that allows light clients to receive notifications of mempool\ninclusion based on only (pkScript, amount) pairs.\n\nMatt wrote:\n> looks like you have no way to match the input prevouts being spent, which\n> is rather nice from a \"watch for this output being spent\" pov.\n\nPerhaps we didn't make this clear enough, but it _is_ indeed possible to\nwatch an output for spentness. Or maybe you mean matching on the\n_script_ being spent?\n\n>From the BIP draft:\n> for each transaction, normal filters contain:\n>  * The outpoints of each input within a transaction.\n>  ...\n\nWithin the integration for lnd, we specifically use this feature to be\nable to watch for when channels have been closed within the network graph,\nor channels _directly_ under our control have been spent (either\nunilateral channel closure, or a revocation beach).\n\n-- Laolu\n\n[1]:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-January/013397.html\n\n\nOn Thu, Jun 1, 2017 at 2:33 PM Matt Corallo <lf-lists at mattcorallo.com>\nwrote:\n\n> Quick comment before I finish reading it completely, looks like you have\n> no way to match the input prevouts being spent, which is rather nice from a\n> \"watch for this output being spent\" pov.\n>\n> On June 1, 2017 3:01:14 PM EDT, Olaoluwa Osuntokun via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >Hi y'all,\n> >\n> >Alex Akselrod and I would like to propose a new light client BIP for\n> >consideration:\n> >*\n> >https://github.com/Roasbeef/bips/blob/master/gcs_light_client.mediawiki\n> >\n> >This BIP proposal describes a concrete specification (along with a\n> >reference implementations[1][2][3]) for the much discussed client-side\n> >filtering reversal of BIP-37. The precise details are described in the\n> >BIP, but as a summary: we've implemented a new light-client mode that\n> >uses\n> >client-side filtering based off of Golomb-Rice coded sets. Full-nodes\n> >maintain an additional index of the chain, and serve this compact\n> >filter\n> >(the index) to light clients which request them. Light clients then\n> >fetch\n> >these filters, query the locally and _maybe_ fetch the block if a\n> >relevant\n> >item matches. The cool part is that blocks can be fetched from _any_\n> >source, once the light client deems it necessary. Our primary\n> >motivation\n> >for this work was enabling a light client mode for lnd[4] in order to\n> >support a more light-weight back end paving the way for the usage of\n> >Lightning on mobile phones and other devices. We've integrated neutrino\n> >as a back end for lnd, and will be making the updated code public very\n> >soon.\n> >\n> >One specific area we'd like feedback on is the parameter selection.\n> >Unlike\n> >BIP-37 which allows clients to dynamically tune their false positive\n> >rate,\n> >our proposal uses a _fixed_ false-positive. Within the document, it's\n> >currently specified as P = 1/2^20. We've done a bit of analysis and\n> >optimization attempting to optimize the following sum:\n> >filter_download_bandwidth + expected_block_false_positive_bandwidth.\n> >Alex\n> >has made a JS calculator that allows y'all to explore the affect of\n> >tweaking the false positive rate in addition to the following\n> >variables:\n> >the number of items the wallet is scanning for, the size of the blocks,\n> >number of blocks fetched, and the size of the filters themselves. The\n> >calculator calculates the expected bandwidth utilization using the CDF\n> >of\n> >the Geometric Distribution. The calculator can be found here:\n> >https://aakselrod.github.io/gcs_calc.html. Alex also has an empirical\n> >script he's been running on actual data, and the results seem to match\n> >up\n> >rather nicely.\n> >\n> >We we're excited to see that Karl Johan Alm (kallewoof) has done some\n> >(rather extensive!) analysis of his own, focusing on a distinct\n> >encoding\n> >type [5]. I haven't had the time yet to dig into his report yet, but I\n> >think I've read enough to extract the key difference in our encodings:\n> >his\n> >filters use a binomial encoding _directly_ on the filter contents, will\n> >we\n> >instead create a Golomb-Coded set with the contents being _hashes_ (we\n> >use\n> >siphash) of the filter items.\n> >\n> >Using a fixed fp=20, I have some stats detailing the total index size,\n> >as\n> >well as averages for both mainnet and testnet. For mainnet, using the\n> >filter contents as currently described in the BIP (basic + extended),\n> >the\n> >total size of the index comes out to 6.9GB. The break down is as\n> >follows:\n> >\n> >    * total size:  6976047156\n> >    * total avg:  14997.220622758816\n> >    * total median:  3801\n> >    * total max:  79155\n> >    * regular size:  3117183743\n> >    * regular avg:  6701.372750217131\n> >    * regular median:  1734\n> >    * regular max:  67533\n> >    * extended size:  3858863413 <(385)%20886-3413>\n> >    * extended avg:  8295.847872541684\n> >    * extended median:  2041\n> >    * extended max:  52508\n> >\n> >In order to consider the average+median filter sizes in a world worth\n> >larger blocks, I also ran the index for testnet:\n> >\n> >    * total size:  2753238530\n> >    * total avg:  5918.95736054141\n> >    * total median:  60202\n> >    * total max:  74983\n> >    * regular size:  1165148878\n> >    * regular avg:  2504.856172982827\n> >    * regular median:  24812\n> >    * regular max:  64554\n> >    * extended size:  1588089652\n> >    * extended avg:  3414.1011875585823\n> >    * extended median:  35260\n> >    * extended max:  41731\n> >\n> >Finally, here are the testnet stats which take into account the\n> >increase\n> >in the maximum filter size due to segwit's block-size increase. The max\n> >filter sizes are a bit larger due to some of the habitual blocks I\n> >created last year when testing segwit (transactions with 30k inputs,\n> >30k\n> >outputs, etc).\n> >\n> >     * total size:  585087597\n> >     * total avg:  520.8839608674402\n> >     * total median:  20\n> >     * total max:  164598\n> >     * regular size:  299325029\n> >     * regular avg:  266.4790836307566\n> >     * regular median:  13\n> >     * regular max:  164583\n> >     * extended size:  285762568\n> >     * extended avg:  254.4048772366836\n> >     * extended median:  7\n> >     * extended max:  127631\n> >\n> >For those that are interested in the raw data, I've uploaded a CSV file\n> >of raw data for each block (mainnet + testnet), which can be found\n> >here:\n> >     * mainnet: (14MB):\n> >https://www.dropbox.com/s/4yk2u8dj06njbuv/mainnet-gcs-stats.csv?dl=0\n> >     * testnet: (25MB):\n> >https://www.dropbox.com/s/w7dmmcbocnmjfbo/gcs-stats-testnet.csv?dl=0\n> >\n> >\n> >We look forward to getting feedback from all of y'all!\n> >\n> >-- Laolu\n> >\n> >\n> >[1]: https://github.com/lightninglabs/neutrino\n> >[2]: https://github.com/Roasbeef/btcd/tree/segwit-cbf\n> >[3]: https://github.com/Roasbeef/btcutil/tree/gcs/gcs\n> >[4]: https://github.com/lightningnetwork/lnd/\n> >\n> >-- Laolu\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170601/25616960/attachment-0001.html>"
            },
            {
                "author": "Chris",
                "date": "2017-06-02T02:15:16",
                "message_text_only": "On 06/01/2017 06:10 PM, Olaoluwa Osuntokun via bitcoin-dev wrote:\n\n> One aspect which isn't in this BIP draft is direct support for unconfirmed\n> transactions. I consider such a feature an important UX feature for mobile\n> phones, and something which I've personally seen as an important\n> UX-experience when on-boarding new users to Bitcoin.\n\nTotally agree. My first thought is maybe you could keep bip37 filtering\nas optional for unconfirmed transactions. Since you're only interested\nin incoming transactions in this case you can create one big filter with\nall your wallet's addresses and reuse that filter. The bip37 privacy\nissues mainly come up when trying to get the filter to match both\nincoming and outgoing transactions, which is not needed in this case.\n\nOtoh, if you download the block from the same peer that you gave a bip37\nfilter then they could probably test the txs in the block against both\nfilters. :/"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-06-02T02:28:54",
                "message_text_only": "On Fri, Jun 2, 2017 at 2:15 AM, Chris via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On 06/01/2017 06:10 PM, Olaoluwa Osuntokun via bitcoin-dev wrote:\n>\n>> One aspect which isn't in this BIP draft is direct support for unconfirmed\n>> transactions. I consider such a feature an important UX feature for mobile\n>> phones, and something which I've personally seen as an important\n>> UX-experience when on-boarding new users to Bitcoin.\n>\n> Totally agree. My first thought is maybe you could keep bip37 filtering\n> as optional for unconfirmed transactions. Since you're only interested\n\nReally bad for privacy. Data for transactions at the tip is only\n14kb/s-- potentially less if segwit is in use and you're not getting\nwitnesses. Is that really that burdensome?\n\nFWIW, leaving a mobile browser just running while pointed at some\nwebsites seems to use more traffic than that just loading advertising.\n:)"
            },
            {
                "author": "Alex Akselrod",
                "date": "2017-06-02T03:35:29",
                "message_text_only": "I agree with Greg and Laolu; BIP-37 filtering for transactions is no better\nthan for blocks and completely destroys privacy.\n\nA constant stream of transactions is OK, but even cheaper for light clients\nwould be Laolu's proposal of streaming more tx data than existing inv\nmessages but less than existing tx messages.\n\nWe could make a bit field of things to include in every inv-with-metadata\nmessage, such as:\n- witness data\n- scriptSig data pushes\n- scriptPubKey\n- hash of scriptPubKey (unnecessary if full scriptPubKey is sent)\n- scriptPubKey data pushes\n- etc.\n\nThis way a full node might be able to tell what application (or type of\napplication) a light client is running, but not the client's addresses or\noutputs, except maybe when the client originates transactions.\n\nOn Thu, Jun 1, 2017 at 10:28 PM, Gregory Maxwell via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Fri, Jun 2, 2017 at 2:15 AM, Chris via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > On 06/01/2017 06:10 PM, Olaoluwa Osuntokun via bitcoin-dev wrote:\n> >\n> >> One aspect which isn't in this BIP draft is direct support for\n> unconfirmed\n> >> transactions. I consider such a feature an important UX feature for\n> mobile\n> >> phones, and something which I've personally seen as an important\n> >> UX-experience when on-boarding new users to Bitcoin.\n> >\n> > Totally agree. My first thought is maybe you could keep bip37 filtering\n> > as optional for unconfirmed transactions. Since you're only interested\n>\n> Really bad for privacy. Data for transactions at the tip is only\n> 14kb/s-- potentially less if segwit is in use and you're not getting\n> witnesses. Is that really that burdensome?\n>\n> FWIW, leaving a mobile browser just running while pointed at some\n> websites seems to use more traffic than that just loading advertising.\n> :)\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170601/cd98c32d/attachment.html>"
            },
            {
                "author": "Chris Pacia",
                "date": "2017-06-02T16:07:17",
                "message_text_only": "On Jun 1, 2017 10:28 PM, \"Gregory Maxwell\" <greg at xiph.org> wrote:\n\n\nReally bad for privacy.\n\n\nAs I mentioned the issue is the potential collision with the block filter,\nbut bloom filters by themselves aren't inherently bad for privacy. They\njust reduce the anonymity set. The reason bip37 doesn't work for privacy is\nhow the filters have to be used/abused to make it work. That's not what I\nmentioned above.\n\nData for transactions at the tip is only\n\n14kb/s-- potentially less if segwit is in use and you're not getting\nwitnesses. Is that really that burdensome?\n\n\nYour not running that on mobile.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170602/bace51b4/attachment.html>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2017-06-02T04:49:16",
                "message_text_only": "> In order to consider the average+median filter sizes in a world worth\nlarger\n> blocks, I also ran the index for testnet:\n>\n>     * total size:  2753238530\n>     * total avg:  5918.95736054141\n>     * total median:  60202\n>     * total max:  74983\n>     * regular size:  1165148878\n>     * regular avg:  2504.856172982827\n>     * regular median:  24812\n>     * regular max:  64554\n>     * extended size:  1588089652\n>     * extended avg:  3414.1011875585823\n>     * extended median:  35260\n>     * extended max:  41731\n>\n\nOops, realized I made a mistake. These are the stats for Feb 2016 until\nabout a\nmonth ago (since height 400k iirc).\n\n-- Laolu\n\n\nOn Thu, Jun 1, 2017 at 12:01 PM Olaoluwa Osuntokun <laolu32 at gmail.com>\nwrote:\n\n> Hi y'all,\n>\n> Alex Akselrod and I would like to propose a new light client BIP for\n> consideration:\n>    *\n> https://github.com/Roasbeef/bips/blob/master/gcs_light_client.mediawiki\n>\n> This BIP proposal describes a concrete specification (along with a\n> reference implementations[1][2][3]) for the much discussed client-side\n> filtering reversal of BIP-37. The precise details are described in the\n> BIP, but as a summary: we've implemented a new light-client mode that uses\n> client-side filtering based off of Golomb-Rice coded sets. Full-nodes\n> maintain an additional index of the chain, and serve this compact filter\n> (the index) to light clients which request them. Light clients then fetch\n> these filters, query the locally and _maybe_ fetch the block if a relevant\n> item matches. The cool part is that blocks can be fetched from _any_\n> source, once the light client deems it necessary. Our primary motivation\n> for this work was enabling a light client mode for lnd[4] in order to\n> support a more light-weight back end paving the way for the usage of\n> Lightning on mobile phones and other devices. We've integrated neutrino\n> as a back end for lnd, and will be making the updated code public very\n> soon.\n>\n> One specific area we'd like feedback on is the parameter selection. Unlike\n> BIP-37 which allows clients to dynamically tune their false positive rate,\n> our proposal uses a _fixed_ false-positive. Within the document, it's\n> currently specified as P = 1/2^20. We've done a bit of analysis and\n> optimization attempting to optimize the following sum:\n> filter_download_bandwidth + expected_block_false_positive_bandwidth. Alex\n> has made a JS calculator that allows y'all to explore the affect of\n> tweaking the false positive rate in addition to the following variables:\n> the number of items the wallet is scanning for, the size of the blocks,\n> number of blocks fetched, and the size of the filters themselves. The\n> calculator calculates the expected bandwidth utilization using the CDF of\n> the Geometric Distribution. The calculator can be found here:\n> https://aakselrod.github.io/gcs_calc.html. Alex also has an empirical\n> script he's been running on actual data, and the results seem to match up\n> rather nicely.\n>\n> We we're excited to see that Karl Johan Alm (kallewoof) has done some\n> (rather extensive!) analysis of his own, focusing on a distinct encoding\n> type [5]. I haven't had the time yet to dig into his report yet, but I\n> think I've read enough to extract the key difference in our encodings: his\n> filters use a binomial encoding _directly_ on the filter contents, will we\n> instead create a Golomb-Coded set with the contents being _hashes_ (we use\n> siphash) of the filter items.\n>\n> Using a fixed fp=20, I have some stats detailing the total index size, as\n> well as averages for both mainnet and testnet. For mainnet, using the\n> filter contents as currently described in the BIP (basic + extended), the\n> total size of the index comes out to 6.9GB. The break down is as follows:\n>\n>     * total size:  6976047156\n>     * total avg:  14997.220622758816\n>     * total median:  3801\n>     * total max:  79155\n>     * regular size:  3117183743\n>     * regular avg:  6701.372750217131\n>     * regular median:  1734\n>     * regular max:  67533\n>     * extended size:  3858863413 <(385)%20886-3413>\n>     * extended avg:  8295.847872541684\n>     * extended median:  2041\n>     * extended max:  52508\n>\n> In order to consider the average+median filter sizes in a world worth\n> larger blocks, I also ran the index for testnet:\n>\n>     * total size:  2753238530\n>     * total avg:  5918.95736054141\n>     * total median:  60202\n>     * total max:  74983\n>     * regular size:  1165148878\n>     * regular avg:  2504.856172982827\n>     * regular median:  24812\n>     * regular max:  64554\n>     * extended size:  1588089652\n>     * extended avg:  3414.1011875585823\n>     * extended median:  35260\n>     * extended max:  41731\n>\n> Finally, here are the testnet stats which take into account the increase\n> in the maximum filter size due to segwit's block-size increase. The max\n> filter sizes are a bit larger due to some of the habitual blocks I\n> created last year when testing segwit (transactions with 30k inputs, 30k\n> outputs, etc).\n>\n>      * total size:  585087597\n>      * total avg:  520.8839608674402\n>      * total median:  20\n>      * total max:  164598\n>      * regular size:  299325029\n>      * regular avg:  266.4790836307566\n>      * regular median:  13\n>      * regular max:  164583\n>      * extended size:  285762568\n>      * extended avg:  254.4048772366836\n>      * extended median:  7\n>      * extended max:  127631\n>\n> For those that are interested in the raw data, I've uploaded a CSV file\n> of raw data for each block (mainnet + testnet), which can be found here:\n>      * mainnet: (14MB):\n> https://www.dropbox.com/s/4yk2u8dj06njbuv/mainnet-gcs-stats.csv?dl=0\n>      * testnet: (25MB):\n> https://www.dropbox.com/s/w7dmmcbocnmjfbo/gcs-stats-testnet.csv?dl=0\n>\n>\n> We look forward to getting feedback from all of y'all!\n>\n> -- Laolu\n>\n>\n> [1]: https://github.com/lightninglabs/neutrino\n> [2]: https://github.com/Roasbeef/btcd/tree/segwit-cbf\n> [3]: https://github.com/Roasbeef/btcutil/tree/gcs/gcs\n> [4]: https://github.com/lightningnetwork/lnd/\n>\n> -- Laolu\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170602/9382743e/attachment-0001.html>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2017-06-09T03:59:17",
                "message_text_only": "Hi y'all,\n\nThanks for all the comments so far!\n\nI've pushed a series of updates to the text of the BIP repo linked in the\nOP.\nThe fixes include: typos, components of the specification which were\nincorrect\n(N is the total number of items, NOT the number of txns in the block), and a\nfew sections have been clarified.\n\nThe latest version also includes a set of test vectors (as CSV files), which\nfor a series of fp rates (1/2 to 1/2^32) includes (for 6 testnet blocks,\none of\nwhich generates a \"null\" filter):\n\n   * The block height\n   * The block hash\n   * The raw block itself\n   * The previous basic+extended filter header\n   * The basic+extended filter header for the block\n   * The basic+extended filter for the block\n\nThe size of the test vectors was too large to include in-line within the\ndocument, so we put them temporarily in a distinct folder [1]. The code\nused to\ngenerate the test vectors has also been included.\n\n-- Laolu\n\n[1]: https://github.com/Roasbeef/bips/tree/master/gcs_light_client\n\n\nOn Thu, Jun 1, 2017 at 9:49 PM Olaoluwa Osuntokun <laolu32 at gmail.com> wrote:\n\n> > In order to consider the average+median filter sizes in a world worth\n> larger\n> > blocks, I also ran the index for testnet:\n> >\n> >     * total size:  2753238530\n> >     * total avg:  5918.95736054141\n> >     * total median:  60202\n> >     * total max:  74983\n> >     * regular size:  1165148878\n> >     * regular avg:  2504.856172982827\n> >     * regular median:  24812\n> >     * regular max:  64554\n> >     * extended size:  1588089652\n> >     * extended avg:  3414.1011875585823\n> >     * extended median:  35260\n> >     * extended max:  41731\n> >\n>\n> Oops, realized I made a mistake. These are the stats for Feb 2016 until\n> about a\n> month ago (since height 400k iirc).\n>\n> -- Laolu\n>\n>\n> On Thu, Jun 1, 2017 at 12:01 PM Olaoluwa Osuntokun <laolu32 at gmail.com>\n> wrote:\n>\n>> Hi y'all,\n>>\n>> Alex Akselrod and I would like to propose a new light client BIP for\n>> consideration:\n>>    *\n>> https://github.com/Roasbeef/bips/blob/master/gcs_light_client.mediawiki\n>>\n>> This BIP proposal describes a concrete specification (along with a\n>> reference implementations[1][2][3]) for the much discussed client-side\n>> filtering reversal of BIP-37. The precise details are described in the\n>> BIP, but as a summary: we've implemented a new light-client mode that uses\n>> client-side filtering based off of Golomb-Rice coded sets. Full-nodes\n>> maintain an additional index of the chain, and serve this compact filter\n>> (the index) to light clients which request them. Light clients then fetch\n>> these filters, query the locally and _maybe_ fetch the block if a relevant\n>> item matches. The cool part is that blocks can be fetched from _any_\n>> source, once the light client deems it necessary. Our primary motivation\n>> for this work was enabling a light client mode for lnd[4] in order to\n>> support a more light-weight back end paving the way for the usage of\n>> Lightning on mobile phones and other devices. We've integrated neutrino\n>> as a back end for lnd, and will be making the updated code public very\n>> soon.\n>>\n>> One specific area we'd like feedback on is the parameter selection. Unlike\n>> BIP-37 which allows clients to dynamically tune their false positive rate,\n>> our proposal uses a _fixed_ false-positive. Within the document, it's\n>> currently specified as P = 1/2^20. We've done a bit of analysis and\n>> optimization attempting to optimize the following sum:\n>> filter_download_bandwidth + expected_block_false_positive_bandwidth. Alex\n>> has made a JS calculator that allows y'all to explore the affect of\n>> tweaking the false positive rate in addition to the following variables:\n>> the number of items the wallet is scanning for, the size of the blocks,\n>> number of blocks fetched, and the size of the filters themselves. The\n>> calculator calculates the expected bandwidth utilization using the CDF of\n>> the Geometric Distribution. The calculator can be found here:\n>> https://aakselrod.github.io/gcs_calc.html. Alex also has an empirical\n>> script he's been running on actual data, and the results seem to match up\n>> rather nicely.\n>>\n>> We we're excited to see that Karl Johan Alm (kallewoof) has done some\n>> (rather extensive!) analysis of his own, focusing on a distinct encoding\n>> type [5]. I haven't had the time yet to dig into his report yet, but I\n>> think I've read enough to extract the key difference in our encodings: his\n>> filters use a binomial encoding _directly_ on the filter contents, will we\n>> instead create a Golomb-Coded set with the contents being _hashes_ (we use\n>> siphash) of the filter items.\n>>\n>> Using a fixed fp=20, I have some stats detailing the total index size, as\n>> well as averages for both mainnet and testnet. For mainnet, using the\n>> filter contents as currently described in the BIP (basic + extended), the\n>> total size of the index comes out to 6.9GB. The break down is as follows:\n>>\n>>     * total size:  6976047156\n>>     * total avg:  14997.220622758816\n>>     * total median:  3801\n>>     * total max:  79155\n>>     * regular size:  3117183743\n>>     * regular avg:  6701.372750217131\n>>     * regular median:  1734\n>>     * regular max:  67533\n>>     * extended size:  3858863413 <(385)%20886-3413>\n>>     * extended avg:  8295.847872541684\n>>     * extended median:  2041\n>>     * extended max:  52508\n>>\n>> In order to consider the average+median filter sizes in a world worth\n>> larger blocks, I also ran the index for testnet:\n>>\n>>     * total size:  2753238530\n>>     * total avg:  5918.95736054141\n>>     * total median:  60202\n>>     * total max:  74983\n>>     * regular size:  1165148878\n>>     * regular avg:  2504.856172982827\n>>     * regular median:  24812\n>>     * regular max:  64554\n>>     * extended size:  1588089652\n>>     * extended avg:  3414.1011875585823\n>>     * extended median:  35260\n>>     * extended max:  41731\n>>\n>> Finally, here are the testnet stats which take into account the increase\n>> in the maximum filter size due to segwit's block-size increase. The max\n>> filter sizes are a bit larger due to some of the habitual blocks I\n>> created last year when testing segwit (transactions with 30k inputs, 30k\n>> outputs, etc).\n>>\n>>      * total size:  585087597\n>>      * total avg:  520.8839608674402\n>>      * total median:  20\n>>      * total max:  164598\n>>      * regular size:  299325029\n>>      * regular avg:  266.4790836307566\n>>      * regular median:  13\n>>      * regular max:  164583\n>>      * extended size:  285762568\n>>      * extended avg:  254.4048772366836\n>>      * extended median:  7\n>>      * extended max:  127631\n>>\n>> For those that are interested in the raw data, I've uploaded a CSV file\n>> of raw data for each block (mainnet + testnet), which can be found here:\n>>      * mainnet: (14MB):\n>> https://www.dropbox.com/s/4yk2u8dj06njbuv/mainnet-gcs-stats.csv?dl=0\n>>      * testnet: (25MB):\n>> https://www.dropbox.com/s/w7dmmcbocnmjfbo/gcs-stats-testnet.csv?dl=0\n>>\n>>\n>> We look forward to getting feedback from all of y'all!\n>>\n>> -- Laolu\n>>\n>>\n>> [1]: https://github.com/lightninglabs/neutrino\n>> [2]: https://github.com/Roasbeef/btcd/tree/segwit-cbf\n>> [3]: https://github.com/Roasbeef/btcutil/tree/gcs/gcs\n>> [4]: https://github.com/lightningnetwork/lnd/\n>>\n>> -- Laolu\n>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170609/cbb5a93f/attachment-0001.html>"
            },
            {
                "author": "Karl Johan Alm",
                "date": "2017-06-02T06:00:30",
                "message_text_only": "Hello,\n\nReally wish I'd known you were working on this a few weeks ago, but\nsuch is life. Hopefully I can provide some useful feedback.\n\nOn Fri, Jun 2, 2017 at 4:01 AM, Olaoluwa Osuntokun via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Full-nodes\n> maintain an additional index of the chain, and serve this compact filter\n> (the index) to light clients which request them. Light clients then fetch\n> these filters, query the locally and _maybe_ fetch the block if a relevant\n> item matches.\n\nIs it necessary to maintain the index all the way to the beginning of\nthe chain? When would clients request \"really old digests\" and why?\n\n> One specific area we'd like feedback on is the parameter selection. Unlike\n> BIP-37 which allows clients to dynamically tune their false positive rate,\n> our proposal uses a _fixed_ false-positive. Within the document, it's\n> currently specified as P = 1/2^20. We've done a bit of analysis and\n> optimization attempting to optimize the following sum:\n> filter_download_bandwidth + expected_block_false_positive_bandwidth. Alex\n> has made a JS calculator that allows y'all to explore the affect of\n> tweaking the false positive rate in addition to the following variables:\n> the number of items the wallet is scanning for, the size of the blocks,\n> number of blocks fetched, and the size of the filters themselves. The\n> calculator calculates the expected bandwidth utilization using the CDF of\n> the Geometric Distribution. The calculator can be found here:\n> https://aakselrod.github.io/gcs_calc.html. Alex also has an empirical\n> script he's been running on actual data, and the results seem to match up\n> rather nicely.\n\nI haven't tried the tool yet, and maybe it will answer some of my questions.\n\nOn what data were the simulated wallets on actual data based? How did\nfalse positive rates for wallets with lots of items (pubkeys etc) play\nout? Is there a maximum number of items for a wallet before it becomes\ntoo bandwidth costly to use digests?\n\n> We we're excited to see that Karl Johan Alm (kallewoof) has done some\n> (rather extensive!) analysis of his own, focusing on a distinct encoding\n> type [5]. I haven't had the time yet to dig into his report yet, but I\n> think I've read enough to extract the key difference in our encodings: his\n> filters use a binomial encoding _directly_ on the filter contents, will we\n> instead create a Golomb-Coded set with the contents being _hashes_ (we use\n> siphash) of the filter items.\n\nI will definitely try to reproduce my experiments with Golomb-Coded\nsets and see what I come up with. It seems like you've got a little\nless than half the size of my digests for 1-block digests but I\nhaven't tried making digests for all blocks (and lots of early blocks\nare empty).\n\nOn the BIP proposal itself:\n\nIn Compact Filter Header Chain, you mention that clients should\ndownload filters from nodes if filter_headers is not identical, and\nban offending nodes. What about temporary forks in the chain? What\nabout longer forks? In general, I am curious how you will deal with\nreorgs and temporary non-consensus related chain splits.\n\nI am also curious if you have considered digests containing multiple\nblocks. Retaining a permanent binsearchable record of the entire chain\nis obviously too space costly, but keeping the last X blocks as\nbinsearchable could speed up syncing for clients tremendously, I feel.\n\nIt may also be space efficient to ONLY store older digests in chunks\nof e.g. 8 blocks. A client syncing up finding a match in an 8-block\nchunk would have to grab those 8 blocks, but if it's not recent, that\nmay be acceptable. It may even be possible to make 4-, 2-, 1-block\ndigests on demand.\n\nHow fast are these to create? Would it make sense to provide digests\non demand in some cases, rather than keeping them around indefinitely?"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-06-07T21:41:36",
                "message_text_only": "On Thu, Jun 1, 2017 at 7:01 PM, Olaoluwa Osuntokun via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Hi y'all,\n>\n> Alex Akselrod and I would like to propose a new light client BIP for\n> consideration:\n>    * https://github.com/Roasbeef/bips/blob/master/gcs_light_client.mediawiki\n\nI see the inner loop of construction and lookup are free of\nnon-constant divmod. This will result in implementations being\nneedlessly slow (especially on arm, but even on modern x86_64 a\ndivision is a 90 cycle-ish affair.)\n\nI believe this can be fixed by using this approach\nhttp://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/\n   which has the same non-uniformity as mod but needs only a multiply\nand shift.\n\nOtherwise fast implementations will have to implement the code to\ncompute bit twiddling hack exact division code, which is kind of\ncomplicated. (e.g. via the technique in \"{N}-bit Unsigned Division via\n{N}-bit Multiply-Add\" by Arch D. Robison).\n\nShouldn't all cases in your spec where you have N=transactions be\nn=indexed-outputs? Otherwise, I think your golomb parameter and false\npositive rate are wrong."
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2017-06-09T03:42:58",
                "message_text_only": "Gregory wrote:\n> I see the inner loop of construction and lookup are free of\n> non-constant divmod. This will result in implementations being\n> needlessly slow\n\nAhh, sipa brought this up other day, but I thought he was referring to the\ncoding loop (which uses a power of 2 divisor/modulus), not the\nsiphash-then-reduce loop.\n\n> I believe this can be fixed by using this approach\n>\nhttp://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/\n> which has the same non-uniformity as mod but needs only a multiply and\n> shift.\n\nVery cool, I wasn't aware of the existence of such a mapping.\n\nCorrect me if I'm wrong, but from my interpretation we can't use that\nmethod as described as we need to output 64-bit integers rather than\n32-bit integers. A range of 32-bits would be constrain the number of items\nwe could encode to be ~4096 to ensure that we don't overflow with fp\nvalues such as 20 (which we currently use in our code).\n\nIf filter commitment are to be considered for a soft-fork in the future,\nthen we should definitely optimize the construction of the filters as much\nas possible! I'll look into that paper you referenced to get a feel for\njust how complex the optimization would be.\n\n> Shouldn't all cases in your spec where you have N=transactions be\n> n=indexed-outputs? Otherwise, I think your golomb parameter and false\n> positive rate are wrong.\n\nYep! Nice catch. Our code is correct, but mistake in the spec was an\noversight on my part. I've pushed a commit[1] to the bip repo referenced\nin the OP to fix this error.\n\nI've also pushed another commit to explicitly take advantage of the fact\nthat P is a power-of-two within the coding loop [2].\n\n-- Laolu\n\n[1]:\nhttps://github.com/Roasbeef/bips/commit/bc5c6d6797f3df1c4a44213963ba12e72122163d\n[2]:\nhttps://github.com/Roasbeef/bips/commit/578a4e3aa8ec04524c83bfc5d14be1b2660e7f7a\n\n\nOn Wed, Jun 7, 2017 at 2:41 PM Gregory Maxwell <greg at xiph.org> wrote:\n\n> On Thu, Jun 1, 2017 at 7:01 PM, Olaoluwa Osuntokun via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Hi y'all,\n> >\n> > Alex Akselrod and I would like to propose a new light client BIP for\n> > consideration:\n> >    *\n> https://github.com/Roasbeef/bips/blob/master/gcs_light_client.mediawiki\n>\n> I see the inner loop of construction and lookup are free of\n> non-constant divmod. This will result in implementations being\n> needlessly slow (especially on arm, but even on modern x86_64 a\n> division is a 90 cycle-ish affair.)\n>\n> I believe this can be fixed by using this approach\n>\n> http://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/\n>    which has the same non-uniformity as mod but needs only a multiply\n> and shift.\n>\n> Otherwise fast implementations will have to implement the code to\n> compute bit twiddling hack exact division code, which is kind of\n> complicated. (e.g. via the technique in \"{N}-bit Unsigned Division via\n> {N}-bit Multiply-Add\" by Arch D. Robison).\n>\n> Shouldn't all cases in your spec where you have N=transactions be\n> n=indexed-outputs? Otherwise, I think your golomb parameter and false\n> positive rate are wrong.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170609/d244d45b/attachment-0001.html>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2017-06-09T04:47:19",
                "message_text_only": "> Correct me if I'm wrong, but from my interpretation we can't use that\n> method as described as we need to output 64-bit integers rather than\n> 32-bit integers.\n\nHad a chat with gmax off-list and came to the realization that the method\n_should_ indeed generalize to our case of outputting 64-bit integers.\nWe'll need to do a bit of bit twiddling to make it work properly. I'll\nmodify our implementation and report back with some basic benchmarks.\n\n-- Laolu\n\n\nOn Thu, Jun 8, 2017 at 8:42 PM Olaoluwa Osuntokun <laolu32 at gmail.com> wrote:\n\n> Gregory wrote:\n> > I see the inner loop of construction and lookup are free of\n> > non-constant divmod. This will result in implementations being\n> > needlessly slow\n>\n> Ahh, sipa brought this up other day, but I thought he was referring to the\n> coding loop (which uses a power of 2 divisor/modulus), not the\n> siphash-then-reduce loop.\n>\n> > I believe this can be fixed by using this approach\n> >\n> http://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/\n> > which has the same non-uniformity as mod but needs only a multiply and\n> > shift.\n>\n> Very cool, I wasn't aware of the existence of such a mapping.\n>\n> Correct me if I'm wrong, but from my interpretation we can't use that\n> method as described as we need to output 64-bit integers rather than\n> 32-bit integers. A range of 32-bits would be constrain the number of items\n> we could encode to be ~4096 to ensure that we don't overflow with fp\n> values such as 20 (which we currently use in our code).\n>\n> If filter commitment are to be considered for a soft-fork in the future,\n> then we should definitely optimize the construction of the filters as much\n> as possible! I'll look into that paper you referenced to get a feel for\n> just how complex the optimization would be.\n>\n> > Shouldn't all cases in your spec where you have N=transactions be\n> > n=indexed-outputs? Otherwise, I think your golomb parameter and false\n> > positive rate are wrong.\n>\n> Yep! Nice catch. Our code is correct, but mistake in the spec was an\n> oversight on my part. I've pushed a commit[1] to the bip repo referenced\n> in the OP to fix this error.\n>\n> I've also pushed another commit to explicitly take advantage of the fact\n> that P is a power-of-two within the coding loop [2].\n>\n> -- Laolu\n>\n> [1]:\n> https://github.com/Roasbeef/bips/commit/bc5c6d6797f3df1c4a44213963ba12e72122163d\n> [2]:\n> https://github.com/Roasbeef/bips/commit/578a4e3aa8ec04524c83bfc5d14be1b2660e7f7a\n>\n>\n> On Wed, Jun 7, 2017 at 2:41 PM Gregory Maxwell <greg at xiph.org> wrote:\n>\n>> On Thu, Jun 1, 2017 at 7:01 PM, Olaoluwa Osuntokun via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > Hi y'all,\n>> >\n>> > Alex Akselrod and I would like to propose a new light client BIP for\n>> > consideration:\n>> >    *\n>> https://github.com/Roasbeef/bips/blob/master/gcs_light_client.mediawiki\n>>\n>> I see the inner loop of construction and lookup are free of\n>> non-constant divmod. This will result in implementations being\n>> needlessly slow (especially on arm, but even on modern x86_64 a\n>> division is a 90 cycle-ish affair.)\n>>\n>> I believe this can be fixed by using this approach\n>>\n>> http://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/\n>>    which has the same non-uniformity as mod but needs only a multiply\n>> and shift.\n>>\n>> Otherwise fast implementations will have to implement the code to\n>> compute bit twiddling hack exact division code, which is kind of\n>> complicated. (e.g. via the technique in \"{N}-bit Unsigned Division via\n>> {N}-bit Multiply-Add\" by Arch D. Robison).\n>>\n>> Shouldn't all cases in your spec where you have N=transactions be\n>> n=indexed-outputs? Otherwise, I think your golomb parameter and false\n>> positive rate are wrong.\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170609/68033931/attachment.html>"
            },
            {
                "author": "Tomas",
                "date": "2017-06-08T09:50:08",
                "message_text_only": "On Thu, Jun 1, 2017, at 21:01, Olaoluwa Osuntokun via bitcoin-dev wrote:> Hi y'all, \n> \n> Alex Akselrod and I would like to propose a new light client BIP for\n> consideration: \n>    * https://github.com/Roasbeef/bips/blob/master/gcs_light_client.mediawiki> \n> \n\nVery interesting. \n\nI would like to consider how this compares to another light client type\nwith rather different security characteristics where each client would\nreceive for each transaction in each block,\n* The TXID (uncompressed)\n* The spent outpoints (with TXIDs compressed)\n* The pubkey hash (compressed to reasonable amount of false positives)\n\nA rough estimate would indicate this to be about 2-2.5x as big per block\nas your proposal, but comes with rather different security\ncharacteristics, and would not require download since genesis.\nThe client could verify the TXIDs against the merkle root with a much\nstronger (PoW) guarantee compared to the guarantee based on the\nassumption of peers being distinct, which your proposal seems to make.\nLike your proposal this removes the privacy and processing  issues from\nserver-side filtering, but unlike your proposal retrieval of all txids\nin each block can also serve for a basis of  fraud proofs and\n(disprovable) fraud hints, without resorting to full block downloads.\nI don't completely understand the benefit of making the outpoints and\npubkey hashes (weakly) verifiable. These only serve as notifications and\ntherefore do not seem to introduce an attack vector. Omitting data is\nalways possible, so receiving data is a prerequisite for verification,\nnot an assumption that can be made.  How could an attacker benefit from\n\"hiding notifications\"?\nI think client-side filtering is definitely an important route to\ntake, but is it worth compressing away the information to verify the\nmerkle root?\nRegards,\nTomas van der Wansem\nbitcrust\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170608/132eadaa/attachment.html>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2017-06-09T03:50:37",
                "message_text_only": "Tomas wrote:\n> A rough estimate would indicate this to be about 2-2.5x as big per block\n> as your proposal, but comes with rather different security\n> characteristics, and would not require download since genesis.\n\nOur proposal _doesnt_ require downloading from genesis, if by\n\"downloading\" you mean downloading all the blocks. Clients only need to\nsync the block+filter headers, then (if they don't care about historical\nblocks), will download filters from their \"birthday\" onwards.\n\n> The client could verify the TXIDs against the merkle root with a much\n> stronger (PoW) guarantee compared to the guarantee based on the assumption\n> of peers being distinct, which your proposal seems to make\n\nOur proposal only makes a \"one honest peer\" assumption, which is the same\nas any other operating mode. Also as client still download all the\nheaders, they're able to verify PoW conformance/work as normal.\n\n> I don't completely understand the benefit of making the outpoints and\n> pubkey hashes (weakly) verifiable. These only serve as notifications and\n> therefore do not seem to introduce an attack vector.\n\nNot sure what you mean by this. Care to elaborate?\n\n> I think client-side filtering is definitely an important route to take,\n> but is it worth compressing away the information to verify the merkle\n> root?\n\nThat's not the case with our proposal. Clients get the _entire_ block (if\nthey need it), so they can verify the merkle root as normal. Unless one of\nus is misinterpreting the other here.\n\n-- Laolu\n\n\nOn Thu, Jun 8, 2017 at 6:34 AM Tomas via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Thu, Jun 1, 2017, at 21:01, Olaoluwa Osuntokun via bitcoin-dev wrote:\n>\n> Hi y'all,\n>\n> Alex Akselrod and I would like to propose a new light client BIP for\n> consideration:\n>    *\n> https://github.com/Roasbeef/bips/blob/master/gcs_light_client.mediawiki\n>\n>\n>\n> Very interesting.\n>\n> I would like to consider how this compares to another light client type\n> with rather different security characteristics where each client would\n> receive for each transaction in each block,\n>\n> * The TXID (uncompressed)\n> * The spent outpoints (with TXIDs compressed)\n> * The pubkey hash (compressed to reasonable amount of false positives)\n>\n> A rough estimate would indicate this to be about 2-2.5x as big per block\n> as your proposal, but comes with rather different security characteristics,\n> and would not require download since genesis.\n>\n> The client could verify the TXIDs against the merkle root with a much\n> stronger (PoW) guarantee compared to the guarantee based on the assumption\n> of peers being distinct, which your proposal seems to make. Like your\n> proposal this removes the privacy and processing  issues from server-side\n> filtering, but unlike your proposal retrieval of all txids in each block\n> can also serve for a basis of fraud proofs and (disprovable) fraud hints,\n> without resorting to full block downloads.\n>\n> I don't completely understand the benefit of making the outpoints and\n> pubkey hashes (weakly) verifiable. These only serve as notifications and\n> therefore do not seem to introduce an attack vector. Omitting data is\n> always possible, so receiving data is a prerequisite for verification, not\n> an assumption that can be made.  How could an attacker benefit from \"hiding\n> notifications\"?\n>\n> I think client-side filtering is definitely an important route to take,\n> but is it worth compressing away the information to verify the merkle root?\n>\n> Regards,\n> Tomas van der Wansem\n> bitcrust\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170609/f95845c2/attachment.html>"
            },
            {
                "author": "Tomas",
                "date": "2017-06-09T08:26:52",
                "message_text_only": "On Fri, Jun 9, 2017, at 05:50, Olaoluwa Osuntokun wrote:\n> Tomas wrote:\n> > I don't completely understand the benefit of making the outpoints and\n> > pubkey hashes (weakly) verifiable. These only serve as notifications and\n> > therefore do not seem to introduce an attack vector.\n> \n> Not sure what you mean by this. Care to elaborate?\u00a0\n> \n\nI will rephrase. The BIP reads:\n\n> Additionally, Full nodes can nearly undetectably lie by omission causing a denial of service which can \nlead to undesirable failure modes in applications whose safety\ncritically relies on responding to certain\non-chain events.\n\nI understand that the compact  header chain is used to mitigate against\nthis, but I am unsure about the use \ncases and trade-offs.\n\nFor a normal wallet, the only thing I can imagine an attacker could do\nis pretending a transaction did not confirm \nyet, causing nuisance.  \n\nAn application critically depending on knowing what happens on-chain \nsurely is better off  downloading \nthe TXIDs, providing PoW security? Gaining knowledge of incoming TXIDs\nis nicely solved the payment protocol.\n\nAre there enough use cases that critically depend on pub key hashes\nbeing used on-chain, to make the compact header chain worth its costs? \n\nRegards,\nTomas"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2017-06-19T11:58:18",
                "message_text_only": "I'm not sure if this has been brought up elsewhere in this thread.\n\nThis proposal doesn't seem to be a complete replacement of BIP37: It\ndoesn't provide a filter for unconfirmed transactions like BIP37 does.\n\nThat means that most light clients will continue to use BIP37 even if\nthey may use this BIP as a supplement. Otherwise users would not get\ntimely notification of incoming payments any more.\n\n\nOn 06/01/2017 09:01 PM, Olaoluwa Osuntokun via bitcoin-dev wrote:\n> Hi y'all, \n> \n> Alex Akselrod and I would like to propose a new light client BIP for\n> consideration: \n>    * https://github.com/Roasbeef/bips/blob/master/gcs_light_client.mediawiki\n> [...]"
            },
            {
                "author": "bfd at cock.lu",
                "date": "2017-06-19T12:26:46",
                "message_text_only": "Several times. It's been debated if unconfirmed transactions are \nnecessary, methods of doing more private filtering have been suggested, \nalong with simply not filtering unconfirmed transactions at all. My \ncollected data suggests that there is very little use of BIP37 at \npresent, based on incoming connections to nodes I know end up in the DNS \nseed responses (no \"SPV\" clients do their own peer management).\n\n\nOn 2017-06-19 12:58, Andreas Schildbach via bitcoin-dev wrote:\n> I'm not sure if this has been brought up elsewhere in this thread.\n> \n> This proposal doesn't seem to be a complete replacement of BIP37: It\n> doesn't provide a filter for unconfirmed transactions like BIP37 does.\n> \n> That means that most light clients will continue to use BIP37 even if\n> they may use this BIP as a supplement. Otherwise users would not get\n> timely notification of incoming payments any more.\n> \n> \n> On 06/01/2017 09:01 PM, Olaoluwa Osuntokun via bitcoin-dev wrote:\n>> Hi y'all,\n>> \n>> Alex Akselrod and I would like to propose a new light client BIP for\n>> consideration:\n>>    * \n>> https://github.com/Roasbeef/bips/blob/master/gcs_light_client.mediawiki\n>> [...]\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Tom Zander",
                "date": "2017-06-19T15:15:10",
                "message_text_only": "On Monday, 19 June 2017 14:26:46 CEST bfd--- via bitcoin-dev wrote:\n>  It's been debated if [filtering of] unconfirmed transactions are\n> necessary,\n\nWhy would it not be needed? Any SPV client (when used as a payment-receiver) \nrequires this from a simple usability point of view.\n\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Jonas Schnelli",
                "date": "2017-06-19T15:49:59",
                "message_text_only": "Hi\n\n> On Monday, 19 June 2017 14:26:46 CEST bfd--- via bitcoin-dev wrote:\n>> It's been debated if [filtering of] unconfirmed transactions are\n>> necessary,\n> \n> Why would it not be needed? Any SPV client (when used as a payment-receiver)\n> requires this from a simple usability point of view.\n\n\nI think many users would be willing ...\na) \u2026 to trade higher privacy (using client side filtering) for not having the \u201eincoming transaction\u201c feature\nb) \u2013 if they want 0-conf \u2013 to fetch all inved transactions\n/jonas\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170619/d413208e/attachment.sig>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2017-06-19T15:59:57",
                "message_text_only": "On 06/19/2017 05:49 PM, Jonas Schnelli via bitcoin-dev wrote:\n\n>>> It's been debated if [filtering of] unconfirmed transactions are\n>>> necessary,\n>>\n>> Why would it not be needed? Any SPV client (when used as a payment-receiver)\n>> requires this from a simple usability point of view.\n> \n> \n> I think many users would be willing ...\n> a) \u2026 to trade higher privacy (using client side filtering) for not having the \u201eincoming transaction\u201c feature\n> b) \u2013 if they want 0-conf \u2013 to fetch all inved transactions\n\nAnother number: I'm answering dozens of support inquiries about\ndelayed/missing transactions per day. Over the 7 years of Bitcoin\nWallet's existence, I estimate about 50000 inquiries.\n\nOn the other hand, I remember only 1 (one) inquiry about the privacy\nproblems of BIP37 (or privacy at all).\n\n>From a regular user's point of view, privacy is non-issue. Sure,\neveryone would take it for free, but certainly not if it a) delays\nincoming payments or b) quickly eats up your traffic quota."
            },
            {
                "author": "Jonas Schnelli",
                "date": "2017-06-19T16:22:03",
                "message_text_only": "> \n> On the other hand, I remember only 1 (one) inquiry about the privacy\n> problems of BIP37 (or privacy at all).\n\nIMO privacy its something developers should make sure users have it.\nAlso, I think, todays SPV wallets should make users more aware of the possible privacy implications.\n\nDo users know, if they pay for a good in a shop while consuming the shops WIFI, that the shop-owner as well as the ISP can use that data to combine it with the user profile (and ~ALL FUTURE purchases you do with the same wallet IN ANY LOCATION online or in-person)?\n\nDo users know, that ISPs (cellular; including Google) can completely link the used Bitcoin wallet (again: all purchase including future ones) with the to the ISP well known user profile including credit-card data and may sell the Bitcoin data to any other data mining company?\n\nIf you use BIP37, you basically give your transaction history (_ALL TRANSACTIONS_ including transactions in future) to everyone.\n\n\n> \n> From a regular user's point of view, privacy is non-issue. Sure,\n> everyone would take it for free, but certainly not if it a) delays\n> incoming payments or b) quickly eats up your traffic quota.\n\nThis may be true because they are not aware of the ramification and I don\u2019t think client side filtering is a drop-in replacement for todays, smartphone SPV-model.\n\n\n/jonas\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170619/fda0aec0/attachment-0001.sig>"
            },
            {
                "author": "adiabat",
                "date": "2017-06-19T16:36:41",
                "message_text_only": "This has been brought up several times in the past, and I agree with\nJonas' comments about users being unaware of the privacy losses due to\nBIP37.  One thing also mentioned before but not int he current thread\nis that the entire concept of SPV is not applicable to unconfirmed\ntransactions.  SPV uses the fact that miners have committed to a\ntransaction with work to give the user an assurance that the\ntransaction is valid; if the transaction were invalid, it would be\ncostly for the miner to include it in a block with valid work.\n\nTransactions in the mempool have no such assurance, and are costlessly\nforgeable by anyone, including your ISP.  I wasn't involved in any\ndebate over BIP37 when it was being written up, so I don't know how\nmempool filtering got in, but it never made any sense to me.  The fact\nthat lots of lite clients are using this is a problem as it gives\nfalse assurance to users that there is a valid but yet-to-be-confirmed\ntransaction sending them money.\n\n-Tadge"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2017-06-19T20:49:17",
                "message_text_only": "Most SPV wallets make it quite clear that unconfirmed transactions are\njust that.\n\n\nOn 06/19/2017 06:36 PM, adiabat via bitcoin-dev wrote:\n> This has been brought up several times in the past, and I agree with\n> Jonas' comments about users being unaware of the privacy losses due to\n> BIP37.  One thing also mentioned before but not int he current thread\n> is that the entire concept of SPV is not applicable to unconfirmed\n> transactions.  SPV uses the fact that miners have committed to a\n> transaction with work to give the user an assurance that the\n> transaction is valid; if the transaction were invalid, it would be\n> costly for the miner to include it in a block with valid work.\n> \n> Transactions in the mempool have no such assurance, and are costlessly\n> forgeable by anyone, including your ISP.  I wasn't involved in any\n> debate over BIP37 when it was being written up, so I don't know how\n> mempool filtering got in, but it never made any sense to me.  The fact\n> that lots of lite clients are using this is a problem as it gives\n> false assurance to users that there is a valid but yet-to-be-confirmed\n> transaction sending them money.\n> \n> -Tadge\n>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2017-06-20T07:03:43",
                "message_text_only": "The reason that BIP37 presents a long list of problems is that it is a client-server scenario wedged into a peer-to-peer network. The only possible excuse for this design was implementation shortcut.\n\nAs this thread and others demonstrate, reproducing this design flaw will not eliminate the problems. The fact that there are many wallets dependent upon it is an unfortunate consequence of the original sin, but is not likely to last. There is no rationale for node operators to support wallets apart from their own. As a node implementer interested in privacy, security and scalability, I would never waste the time to code BIP37, or and client-server feature into the P2P protocol, especially one that delegates some aspect of validation.\n\nOther nodes (servers) provide independent, securable, client-server interfaces. Many of these are made available as community servers for use at no charge. They could also provide mechanisms for operator payment without polluting the P2P network.\n\nHowever as a community we should be working toward full node wallets. A secured personal node/server can support remote mobile wallets with security, privacy and no wasted bandwidth. And if we avoid counterproductive increases in blockchain growth rate, full nodes will eventually be able to run on mobile platforms with no difficulty whatsoever. A wallet that delegates full validation to node operators is just another centralization pressure that we do not need.\n\ne\n\nOn Jun 19, 2017, at 6:22 PM, Jonas Schnelli via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>> \n>> On the other hand, I remember only 1 (one) inquiry about the privacy\n>> problems of BIP37 (or privacy at all).\n> \n> IMO privacy its something developers should make sure users have it.\n> Also, I think, todays SPV wallets should make users more aware of the possible privacy implications.\n> \n> Do users know, if they pay for a good in a shop while consuming the shops WIFI, that the shop-owner as well as the ISP can use that data to combine it with the user profile (and ~ALL FUTURE purchases you do with the same wallet IN ANY LOCATION online or in-person)?\n> \n> Do users know, that ISPs (cellular; including Google) can completely link the used Bitcoin wallet (again: all purchase including future ones) with the to the ISP well known user profile including credit-card data and may sell the Bitcoin data to any other data mining company?\n> \n> If you use BIP37, you basically give your transaction history (_ALL TRANSACTIONS_ including transactions in future) to everyone.\n> \n> \n>> \n>> From a regular user's point of view, privacy is non-issue. Sure,\n>> everyone would take it for free, but certainly not if it a) delays\n>> incoming payments or b) quickly eats up your traffic quota.\n> \n> This may be true because they are not aware of the ramification and I don\u2019t think client side filtering is a drop-in replacement for todays, smartphone SPV-model.\n> \n> \n> /jonas\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Tom Zander",
                "date": "2017-06-19T16:07:45",
                "message_text_only": "On Monday, 19 June 2017 17:49:59 CEST Jonas Schnelli wrote:\n> Hi\n> \n> > On Monday, 19 June 2017 14:26:46 CEST bfd--- via bitcoin-dev wrote:\n> >> It's been debated if [filtering of] unconfirmed transactions are\n> >> necessary,\n> > \n> > Why would it not be needed? Any SPV client (when used as a\n> > payment-receiver) requires this from a simple usability point of view.\n> \n> I think many users would be willing ...\n> a) \u2026 to trade higher privacy (using client side filtering) for not having\n> the \u201eincoming transaction\u201c feature b) \u2013 if they want 0-conf \u2013 to fetch\n> all inved transactions\n\nYou seem to misunderstand the usecase.\nIf you send me a transaction, both of use are using our phones, then I need \nto be able to have immediate feedback on the transaction being broadcast on \nthe network.\nThis is not about zero-conf, this is simple seeing what is happening while \nit is happening.\n\nAdditionally, when the transaction that is meant for my wallet is broadcast, \nI want my SPV wallet to parse and check the actual transaction.\nIt is not just to see that *something* was actually send, but also to be \nable to see how much is being paid to me. Maybe If the transaction is marked \nas RBF-able, etc.\n\nReally basic usability: provide information to your users when you can, \nshould they want to, and by default on.\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Jonas Schnelli",
                "date": "2017-06-19T16:30:18",
                "message_text_only": ">> \n>> I think many users would be willing ...\n>> a) \u2026 to trade higher privacy (using client side filtering) for not having\n>> the \u201eincoming transaction\u201c feature b) \u2013 if they want 0-conf \u2013 to fetch\n>> all inved transactions\n> \n> You seem to misunderstand the usecase.\n> If you send me a transaction, both of use are using our phones, then I need\n> to be able to have immediate feedback on the transaction being broadcast on\n> the network.\n> This is not about zero-conf, this is simple seeing what is happening while\n> it is happening.\n> \n> Additionally, when the transaction that is meant for my wallet is broadcast,\n> I want my SPV wallet to parse and check the actual transaction.\n> It is not just to see that *something* was actually send, but also to be\n> able to see how much is being paid to me. Maybe If the transaction is marked\n> as RBF-able, etc.\n> \n> Really basic usability: provide information to your users when you can,\n> should they want to, and by default on.\n\nI see this use case.\nBut I did receive bank wire transfers for the last decades without _immediately_ knowing that someone sent funds to me.\nI personally would ALWAYS trade the higher bandwidth consumption (300MB mempool filtering) or slower notification time (maybe ~1h) for preserving privacy.\nI agree, there are use cases where you want immediate notification, those use cases could probably be solved by not trowing away privacy (\u201eparsing\u201c all transactions and running in the background).\n\n/jonas\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170619/beccad65/attachment.sig>"
            },
            {
                "author": "Tom Zander",
                "date": "2017-06-19T16:38:55",
                "message_text_only": "On Monday, 19 June 2017 18:30:18 CEST Jonas Schnelli wrote:\n> I personally would ALWAYS [snip]\n\nI mentioned that it was a usability point for a reason, and your personal \nbehavior makes me want to quote one of the main UX guidelines; \n  \u201cYou are not your user\u201d\n\nhttp://uxmyths.com/post/715988395/myth-you-are-like-your-users\nolder;\nhttp://52weeksofux.com/post/385981879/you-are-not-your-user\n\nI think we should defer to actual real numbers and user reseach, as has been \nquoted by Andreas. You disagreeing based on your own experience and behavior \nis worse than useless. As the above links show.\n\nDon\u2019t fall in that trap :)\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2017-06-19T15:43:14",
                "message_text_only": "Just to give you a number: based on the statistics of the Bitcoin Wallet\napp there are at least 2 million wallets depending on BIP37. Not all\nwould need instant notification but based on the daily support enquiries\ninstant notificaton is the most asked property of Bitcoin.\n\n\nOn 06/19/2017 02:26 PM, bfd--- via bitcoin-dev wrote:\n> Several times. It's been debated if unconfirmed transactions are\n> necessary, methods of doing more private filtering have been suggested,\n> along with simply not filtering unconfirmed transactions at all. My\n> collected data suggests that there is very little use of BIP37 at\n> present, based on incoming connections to nodes I know end up in the DNS\n> seed responses (no \"SPV\" clients do their own peer management).\n> \n> \n> On 2017-06-19 12:58, Andreas Schildbach via bitcoin-dev wrote:\n>> I'm not sure if this has been brought up elsewhere in this thread.\n>>\n>> This proposal doesn't seem to be a complete replacement of BIP37: It\n>> doesn't provide a filter for unconfirmed transactions like BIP37 does.\n>>\n>> That means that most light clients will continue to use BIP37 even if\n>> they may use this BIP as a supplement. Otherwise users would not get\n>> timely notification of incoming payments any more.\n>>\n>>\n>> On 06/01/2017 09:01 PM, Olaoluwa Osuntokun via bitcoin-dev wrote:\n>>> Hi y'all,\n>>>\n>>> Alex Akselrod and I would like to propose a new light client BIP for\n>>> consideration:\n>>>    *\n>>> https://github.com/Roasbeef/bips/blob/master/gcs_light_client.mediawiki\n>>> [...]\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Jonas Schnelli",
                "date": "2017-06-19T16:10:13",
                "message_text_only": "> Just to give you a number: based on the statistics of the Bitcoin Wallet\n> app there are at least 2 million wallets depending on BIP37. Not all\n> would need instant notification but based on the daily support enquiries\n> instant notificaton is the most asked property of Bitcoin.\n\nYes. Users probably like this feature and client side filtering is not a drop-in replacement for BIP37.\n\nWe should also consider:\nBIP37 works, because node-operators are willing to offer that service for free (which maybe change over time).\nBIP37 consumes plenty of horsepower (disk/cpu) from nodes. Filtering a couple of days of blocks (assume 1000+) eats lots of resources for something, that has no direct long-term value for Bitcoin (the filters data is unique and will be \"thrown away\u201c [can\u2019t be used by other peers]). Same applies for mempool (filtering mempool of a couple of hundred of mb each time the HD gap limit has been exceeded or the app gets sent to the foreground again).\n\nPurely relying on the availability of BIP37 seems fragile to me and start to explore other ways is very reasonable.\n\n/jonas\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170619/a2dd2bbf/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-06-19T22:41:49",
                "message_text_only": "On Mon, Jun 19, 2017 at 12:26 PM, bfd--- via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Several times. It's been debated if unconfirmed transactions are necessary,\n> methods of doing more private filtering have been suggested, along with\n> simply not filtering unconfirmed transactions at all. My collected data\n> suggests that there is very little use of BIP37 at present, based on\n> incoming connections to nodes I know end up in the DNS seed responses (no\n> \"SPV\" clients do their own peer management).\n\nSending just the output addresses of each transaction would use about\n1 kilobit/s of data. Sending the entire transactions would use\n~14kbit/sec data.  These don't seem to be a unsustainable tremendous\namount of data to use while an application is running.\n\nDoubly so for SPV wallets which are highly vulnerable to unconfirmed\ntransactions, and many which last I heard testing reports on became\npretty severely corrupted once given a fake transaction.\n\nCan someone make a case why saving no more than those figures would\njustify the near total loss of privacy that filtering gives?\n\n\"Because they already do it\" isn't a good argument when talking about\na new protocol feature; things which already do BIP37 will presumably\ncontinue to already do BIP37."
            },
            {
                "author": "Tom Zander",
                "date": "2017-06-20T09:52:00",
                "message_text_only": "On Tuesday, 20 June 2017 00:41:49 CEST Gregory Maxwell via bitcoin-dev \nwrote:\n> Can someone make a case why saving no more than those figures would\n> justify the near total loss of privacy that filtering gives?\n\nFirst, your figures are wrong and also fall out of the sky with no \njustification. Can\u2019t debunk something that is pure garbage.\n\nSecond, stating that a bloom filter is a \"total loss of privacy\" is equally \nbaseless and doesn\u2019t need debunking.\n\n> \"Because they already do it\" isn't a good argument when talking about\n> a new protocol feature; things which already do BIP37 will presumably\n> continue to already do BIP37.\n\nI think you just made the case for completely rejecting this proposal based \non the fact that nobody will use it, BIP37 already exists.\n\nNot sure if I agree with that, improvements are always useful and we should \nbe able to come up with replacements.\nBut arguing against a feature you don\u2019t like, especiallyh one used by \nmillions every day, is a sad way to stiffle innovation, Greg.\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "bfd at cock.lu",
                "date": "2017-06-20T13:08:03",
                "message_text_only": "On 2017-06-20 12:52, Tom Zander via bitcoin-dev wrote:\n> Second, stating that a bloom filter is a \"total loss of privacy\" is \n> equally\n> baseless and doesn\u2019t need debunking.\n> \n\n\"On the Privacy Provisions of Bloom Filters in Lightweight Bitcoin \nClients\"\n\n> We show analytically and empirically that the reliance on Bloom filters \n> within existing SPV clients leaks considerable information about the \n> addresses of Bitcoin users. Our results show that an SPV client who \n> uses a modest number of Bitcoin addresses (e.g., < 20) risks revealing \n> almost all of his addresses.\n\nhttps://eprint.iacr.org/2014/763.pdf"
            },
            {
                "author": "Adam Back",
                "date": "2017-06-20T17:20:53",
                "message_text_only": "Also Jonas Nick gave a fairly comprehensive presentation on privacy\nleaks in bitcoin protocol including SPV and bloom query problem\nspecifics:\n\nhttps://www.youtube.com/watch?v=HScK4pkDNds\n\nAdam\n\n\nOn 20 June 2017 at 14:08, bfd--- via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On 2017-06-20 12:52, Tom Zander via bitcoin-dev wrote:\n>>\n>> Second, stating that a bloom filter is a \"total loss of privacy\" is\n>> equally\n>> baseless and doesn\u2019t need debunking.\n>>\n>\n> \"On the Privacy Provisions of Bloom Filters in Lightweight Bitcoin Clients\"\n>\n>> We show analytically and empirically that the reliance on Bloom filters\n>> within existing SPV clients leaks considerable information about the\n>> addresses of Bitcoin users. Our results show that an SPV client who uses a\n>> modest number of Bitcoin addresses (e.g., < 20) risks revealing almost all\n>> of his addresses.\n>\n>\n> https://eprint.iacr.org/2014/763.pdf\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Alex Akselrod",
                "date": "2017-06-02T17:55:31",
                "message_text_only": "On Jun 2, 2017 8:09 AM, \"Karl Johan Alm via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\nHello,\n\nReally wish I'd known you were working on this a few weeks ago, but\nsuch is life. Hopefully I can provide some useful feedback.\n\n\nYour feedback is greatly appreciated!\n\n\nOn Fri, Jun 2, 2017 at 4:01 AM, Olaoluwa Osuntokun via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Full-nodes\n> maintain an additional index of the chain, and serve this compact filter\n> (the index) to light clients which request them. Light clients then fetch\n> these filters, query the locally and _maybe_ fetch the block if a relevant\n> item matches.\n\nIs it necessary to maintain the index all the way to the beginning of\nthe chain? When would clients request \"really old digests\" and why?\n\n\nWithout a soft fork, this is the only way for light clients to verify that\npeers aren't lying to them. Clients can request headers (just hashes of the\nfilters and the previous headers, creating a chain) and look for conflicts\nbetween peers. If a conflict is found at a certain block, the client can\ndownload the block, generate a filter, calculate the header by hashing\ntogether the previous header and the generated filter, and banning any\npeers that don't match. A full node could prune old filters if you wanted\nand recalculate them as necessary if you just keep the filter header chain\ninfo as really old filters are unlikely to be requested by correctly\nwritten software but you can't guarantee every client will follow best\npractices either.\n\n\n> The calculator can be found here:\n> https://aakselrod.github.io/gcs_calc.html. Alex also has an empirical\n> script he's been running on actual data, and the results seem to match up\n> rather nicely.\n\nI haven't tried the tool yet, and maybe it will answer some of my questions.\n\nOn what data were the simulated wallets on actual data based? How did\nfalse positive rates for wallets with lots of items (pubkeys etc) play\nout? Is there a maximum number of items for a wallet before it becomes\ntoo bandwidth costly to use digests?\n\n\nThe simulations are based on completely random data within given\nparameters. For example, it will generate a wallet of a specified size and\ngenerate blocks of specified size with specified number of transactions of\nspecified format, all guaranteed to not match the wallet. It then tries to\nmatch the wallet and tracks the filter size and the bandwidth used by block\ndownloads which are all due to false positives. The maximum wallet size can\nbe millions or more of addresses and outpoints before the filter isn't\nworth it.\n\nI published the simulation code at\nhttps://gist.github.com/aakselrod/0ee665205f7c9538c2339876b0424b26 but the\ncalculation code gives you the same results (on average but very close with\na big enough sample size) much faster.\n\nI will definitely try to reproduce my experiments with Golomb-Coded\nsets and see what I come up with. It seems like you've got a little\nless than half the size of my digests for 1-block digests but I\nhaven't tried making digests for all blocks (and lots of early blocks\nare empty).\n\n\nFilters for empty blocks only take a few bytes and sometimes zero when the\ncoinbase output is a burn that doesn't push any data (example will be in\nthe test vectors that I'll have ready shortly).\n\nOn the BIP proposal itself:\n\nIn Compact Filter Header Chain, you mention that clients should\ndownload filters from nodes if filter_headers is not identical, and\nban offending nodes. What about temporary forks in the chain? What\nabout longer forks? In general, I am curious how you will deal with\nreorgs and temporary non-consensus related chain splits.\n\n\nThe cfheaders messages give you the hash of the final block for which\nthere's a header in the message. This means you can ignore the message as\nnecessary rather than ban the peer, or track cfheaders for multiple forks\nif desired.\n\n\nI am also curious if you have considered digests containing multiple\nblocks. Retaining a permanent binsearchable record of the entire chain\nis obviously too space costly, but keeping the last X blocks as\nbinsearchable could speed up syncing for clients tremendously, I feel.\n\n\nWe hadn't (or I hadn't) until we read your recent post/paper and are\nconsidering it now.\n\n\nIt may also be space efficient to ONLY store older digests in chunks\nof e.g. 8 blocks. A client syncing up finding a match in an 8-block\nchunk would have to grab those 8 blocks, but if it's not recent, that\nmay be acceptable. It may even be possible to make 4-, 2-, 1-block\ndigests on demand.\n\n\nThis is also something we (or at least I) hadn't considered before your\nrecent post. We have been working on this for a few months now so didn't\nhave time to work on trying out and possibly incorporating the idea before\nrelease.\n\nHow fast are these to create? Would it make sense to provide digests\non demand in some cases, rather than keeping them around indefinitely?\n\n\nThey're pretty fast and can be pruned if desired, as mentioned above, as\nlong as the header chain is kept.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170602/9cfa5e6e/attachment-0001.html>"
            },
            {
                "author": "Karl Johan Alm",
                "date": "2017-06-05T02:06:32",
                "message_text_only": "On Sat, Jun 3, 2017 at 2:55 AM, Alex Akselrod via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Without a soft fork, this is the only way for light clients to verify that\n> peers aren't lying to them. Clients can request headers (just hashes of the\n> filters and the previous headers, creating a chain) and look for conflicts\n> between peers. If a conflict is found at a certain block, the client can\n> download the block, generate a filter, calculate the header by hashing\n> together the previous header and the generated filter, and banning any peers\n> that don't match. A full node could prune old filters if you wanted and\n> recalculate them as necessary if you just keep the filter header chain info\n> as really old filters are unlikely to be requested by correctly written\n> software but you can't guarantee every client will follow best practices\n> either.\n\nAhh, so you actually make a separate digest chain with prev hashes and\neverything. Once/if committed digests are soft forked in, it seems a\nbit overkill but maybe it's worth it. (I was always assuming committed\ndigests in coinbase would come after people started using this, and\nthat people could just ask a couple of random peers for the digest\nhash and ensure everyone gave the same answer as the hash of the\ndownloaded digest..).\n\n> The simulations are based on completely random data within given parameters.\n\nI noticed an increase in FP hits when using real data sampled from\nreal scriptPubKeys and such. Address reuse and other weird stuff. See\n\"lies.h\" in github repo for experiments and chainsim.c initial part of\nmain where wallets get random stuff from the chain.\n\n> I will definitely try to reproduce my experiments with Golomb-Coded\n> sets and see what I come up with. It seems like you've got a little\n> less than half the size of my digests for 1-block digests but I\n> haven't tried making digests for all blocks (and lots of early blocks\n> are empty).\n>\n>\n> Filters for empty blocks only take a few bytes and sometimes zero when the\n> coinbase output is a burn that doesn't push any data (example will be in the\n> test vectors that I'll have ready shortly).\n\nI created digests for all blocks up until block #469805 and actually\nended up with 5.8 GB, which is 1.1 GB lower than what you have, but\nmay be worse perf-wise on false positive rates and such.\n\n> How fast are these to create? Would it make sense to provide digests\n> on demand in some cases, rather than keeping them around indefinitely?\n>\n>\n> They're pretty fast and can be pruned if desired, as mentioned above, as\n> long as the header chain is kept.\n\nFor comparison, creating the digests above (469805 of them) took\nroughly 30 mins on my end, but using the kstats format so probably\nhigher on an actual node (should get around to profiling that...)."
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2017-06-09T03:03:51",
                "message_text_only": "Karl wrote:\n\n> I am also curious if you have considered digests containing multiple\n> blocks. Retaining a permanent binsearchable record of the entire chain is\n> obviously too space costly, but keeping the last X blocks as binsearchable\n> could speed up syncing for clients tremendously, I feel.\n\nOriginally we hadn't considered such an idea. Grasping the concept a bit\nbetter, I can see how that may result in considerable bandwidth savings\n(for purely negative queries) for clients doing a historical sync, or\ncatching up to the chain after being inactive for months/weeks.\n\nIf we were to purse tacking this approach onto the current BIP proposal,\nwe could do it in the following way:\n\n   * The `getcfilter` message gains an additional \"Level\" field. Using\n     this field, the range of blocks to be included in the returned filter\n     would be Level^2. So a level of 0 is just the single filter, 3 is 8\n     blocks past the block hash etc.\n\n   * Similarly, the `getcfheaders` message would also gain a similar field\n     with identical semantics. In this case each \"level\" would have a\n     distinct header chain for clients to verify.\n\n> How fast are these to create? Would it make sense to provide digests on\n> demand in some cases, rather than keeping them around indefinitely?\n\nFor larger blocks (like the one referenced at the end of this mail) full\nconstruction of the regular filter takes ~10-20ms (most of this spent\nextracting the data pushes). With smaller blocks, it quickly dips down to\nthe nano to micro second range.\n\nWhether to keep _all_ the filters on disk, or to dynamically re-generate a\nparticular range (possibly most of the historical data) is an\nimplementation detail. Nodes that already do block pruning could discard\nvery old filters once the header chain is constructed allowing them to\nsave additional space, as it's unlikely most clients would care about the\nfirst 300k or so blocks.\n\n> Ahh, so you actually make a separate digest chain with prev hashes and\n> everything. Once/if committed digests are soft forked in, it seems a bit\n> overkill but maybe it's worth it.\n\nYep, this is only a hold-over until when/if a commitment to the filter is\nsoft-forked in. In that case, there could be some extension message to\nfetch the filter hash for a particular block, along with a merkle proof of\nthe coinbase transaction to the merkle root in the header.\n\n> I created digests for all blocks up until block #469805 and actually ended\n> up with 5.8 GB, which is 1.1 GB lower than what you have, but may be worse\n> perf-wise on false positive rates and such.\n\nInteresting, are you creating the equivalent of both our \"regular\" and\n\"extended\" filters? Each of the filter types consume about ~3.5GB in\nisolation, with the extended filter type on average consuming more bytes\ndue to the fact that it includes sigScript/witness data as well.\n\nIt's worth noting that those numbers includes the fixed 4-byte value for\n\"N\" that's prepended to each filter once it's serialized (though that\ndoesn't add a considerable amount of overhead).  Alex and I were\nconsidering instead using Bitcoin's var-int encoding for that number\ninstead. This would result in using a single byte for empty filters, 1\nbyte for most filters (< 2^16 items), and 3 bytes for the remainder of the\ncases.\n\n> For comparison, creating the digests above (469805 of them) took\n> roughly 30 mins on my end, but using the kstats format so probably\n> higher on an actual node (should get around to profiling that...).\n\nDoes that include the time required to read the blocks from disk? Or just\nthe CPU computation of constructing the filters? I haven't yet kicked off\na full re-index of the filters, but for reference this block[1] on testnet\ntakes ~18ms for the _full_ indexing routine with our current code+spec.\n\n[1]: 000000000000052184fbe86eff349e31703e4f109b52c7e6fa105cd1588ab6aa\n\n-- Laolu\n\n\nOn Sun, Jun 4, 2017 at 7:18 PM Karl Johan Alm via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Sat, Jun 3, 2017 at 2:55 AM, Alex Akselrod via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Without a soft fork, this is the only way for light clients to verify\n> that\n> > peers aren't lying to them. Clients can request headers (just hashes of\n> the\n> > filters and the previous headers, creating a chain) and look for\n> conflicts\n> > between peers. If a conflict is found at a certain block, the client can\n> > download the block, generate a filter, calculate the header by hashing\n> > together the previous header and the generated filter, and banning any\n> peers\n> > that don't match. A full node could prune old filters if you wanted and\n> > recalculate them as necessary if you just keep the filter header chain\n> info\n> > as really old filters are unlikely to be requested by correctly written\n> > software but you can't guarantee every client will follow best practices\n> > either.\n>\n> Ahh, so you actually make a separate digest chain with prev hashes and\n> everything. Once/if committed digests are soft forked in, it seems a\n> bit overkill but maybe it's worth it. (I was always assuming committed\n> digests in coinbase would come after people started using this, and\n> that people could just ask a couple of random peers for the digest\n> hash and ensure everyone gave the same answer as the hash of the\n> downloaded digest..).\n>\n> > The simulations are based on completely random data within given\n> parameters.\n>\n> I noticed an increase in FP hits when using real data sampled from\n> real scriptPubKeys and such. Address reuse and other weird stuff. See\n> \"lies.h\" in github repo for experiments and chainsim.c initial part of\n> main where wallets get random stuff from the chain.\n>\n> > I will definitely try to reproduce my experiments with Golomb-Coded\n> > sets and see what I come up with. It seems like you've got a little\n> > less than half the size of my digests for 1-block digests but I\n> > haven't tried making digests for all blocks (and lots of early blocks\n> > are empty).\n> >\n> >\n> > Filters for empty blocks only take a few bytes and sometimes zero when\n> the\n> > coinbase output is a burn that doesn't push any data (example will be in\n> the\n> > test vectors that I'll have ready shortly).\n>\n> I created digests for all blocks up until block #469805 and actually\n> ended up with 5.8 GB, which is 1.1 GB lower than what you have, but\n> may be worse perf-wise on false positive rates and such.\n>\n> > How fast are these to create? Would it make sense to provide digests\n> > on demand in some cases, rather than keeping them around indefinitely?\n> >\n> >\n> > They're pretty fast and can be pruned if desired, as mentioned above, as\n> > long as the header chain is kept.\n>\n> For comparison, creating the digests above (469805 of them) took\n> roughly 30 mins on my end, but using the kstats format so probably\n> higher on an actual node (should get around to profiling that...).\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170609/86813bd3/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP Proposal: Compact Client Side Filtering for Light Clients",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Lombrozo",
                "Tomas",
                "adiabat",
                "Eric Voskuil",
                "Andreas Schildbach",
                "Jonas Schnelli",
                "Adam Back",
                "bfd at cock.lu",
                "Tom Zander",
                "Olaoluwa Osuntokun",
                "Gregory Maxwell",
                "Matt Corallo",
                "Alex Akselrod",
                "Karl Johan Alm",
                "Chris Pacia",
                "Chris"
            ],
            "messages_count": 38,
            "total_messages_chars_count": 99861
        }
    },
    {
        "title": "[bitcoin-dev] Segwit2Mb - combined soft/hard fork - Request For Comments",
        "thread_messages": [
            {
                "author": "R E Broadley",
                "date": "2017-06-02T12:29:19",
                "message_text_only": "Miner signalling is not enough to avoid two forks - as has been proven in\nthe past (e.g. when miners signaled they were fully validating blocks when\nthere we in fact only validating headers). To really protect against two\nforks happening, the code needs to detect this happening (i.e. monitor the\nother fork) and if it's clear that the signalling was dishonest, then it\nneeds to abort, IMHO.\n\nOn Thu, Apr 6, 2017 at 10:42 PM, Sergio Demian Lerner via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> The 95% miner signaling is important to prevent two Bitcoin forks, such as\n> what happened with Ethereum HF and Ethereum Classic.\n>\n> Bitcoin has a very slow difficulty re-targeting algorithm. A fork that has\n> just 95% miner support will initially (for 2016 blocks) be 5% slower (an\n> average block every 10 minutes and 30 seconds). The transaction capacity of\n> the new Bitcoin protocol is reduced only 5%.\n> However the chain with 5% if the hashing power not only has a 20x capacity\n> reduction, but confirms transactions in 20x more time. So the mempool will\n> grow 400 times. It must be noted that fees increased 10x from the moment\n> blocks were half full, to the moment blocks became saturated. I'm sure no\n> Bitcoin (pre-fork) user will be willing to pay 100x times the transaction\n> fees to use such a slow and insecure network.\n>\n> So a 6-block confirmation will take 20 hours in the original chain and the\n> original chain will be in this almost useless slow state for an average of\n> 2016 blocks, or 280 days.\n> If the original blockchain hard-forks to re-adjust the difficulty, then it\n> will just represent an alt-coin having 5% of Bitcoin community, and it\n> can't affect Bitcoin (the segwit2mb fork).\n>\n>\n> On Mon, Apr 3, 2017 at 11:40 AM, Btc Drak <btcdrak at gmail.com> wrote:\n>\n>> On Fri, Mar 31, 2017 at 10:09 PM, Sergio Demian Lerner via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> The hard-fork is conditional to 95% of the hashing power has approved\n>>> the segwit2mb soft-fork and the segwit soft-fork has been activated (which\n>>> should occur 2016 blocks after its lock-in time)\n>>>\n>>\n>> Miners signalling they have upgraded by flipping a bit in the nVersion\n>> field has little relevance in a hard fork. If 100% of the hash power\n>> indicates they are running this proposal, but the nodes don't upgrade, what\n>> will happen?\n>>\n>> For the record, I actually talk a lot about hard forks with various\n>> developers and am very interested in the research that Johnson in\n>> particular is pioneering. However, I have failed to understand your point\n>> about 95% miner signalling in relation to a hard fork, so I am eagerly\n>> awaiting your explanation.\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170602/ee6c0677/attachment.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2017-06-02T20:04:16",
                "message_text_only": ">From me to you ...this proposal doesn't lock in anything.   We could just\nmerge it with some small pushback - allow segwit to activate in Aug, then\n\"upgrade\" the hard fork to be \"spoonet in 18 months\" instead.\n\nOn Fri, Mar 31, 2017 at 11:03 PM, Samson Mow via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> A compromise for the sake of compromise doesn't merit technical\n> discussions. There are no benefits to be gained from a 2MB hard-fork at\n> this time and it would impose an unnecessary cost to the ecosystem for\n> testing and implementation.\n>\n> On Fri, Mar 31, 2017 at 3:13 PM, Sergio Demian Lerner via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>>\n>>\n>> On Fri, Mar 31, 2017 at 6:22 PM, Matt Corallo <lf-lists at mattcorallo.com>\n>> wrote:\n>>\n>>> Hey Sergio,\n>>>\n>>> You appear to have ignored the last two years of Bitcoin hardfork\n>>> research and understanding, recycling instead BIP 102 from 2015. There\n>>> are many proposals which have pushed the state of hard fork research\n>>> much further since then, and you may wish to read some of the posts on\n>>> this mailing list listed at https://bitcoinhardforkresearch.github.io/\n>>> and make further edits based on what you learn.\n>>\n>>\n>> I've read every proposal that was published in the last two years and the\n>> choice for NOT implementing any of the super cool research you cite is\n>> intentional.\n>>\n>> We're in a deadlock and it seems we can't go forward adding more\n>> functionality to segwit without the community approval (which include\n>> miners). This is obvious to me.Then we have to go back.\n>>\n>> If this last resort solution is merged, we could go back to discuss\n>> improvements with the\n>>\n>> Your goal of \"avoid\n>>> technical changes\" appears to not have any basis outside of perceived\n>>> compromise for compromise sake, only making such a hardfork riskier\n>>> instead.\n>>>\n>>> You're are totally correct. It's a compromise for the compromise sake. I\n>> couldn't have expressed it more clearly. However the only \"riskier\" element\n>> is the hard forking date. We can move the date forward.\n>>\n>>\n>>> At a minimum, in terms of pure technical changes, you should probably\n>>> consider (probably among others):\n>>>\n>> a) Utilizing the \"hard fork signaling bit\" in the nVersion of the block.\n>>>\n>>\n>> This I could consider, as it requires probably a single line of code.\n>> Which BIP specifies this?\n>>\n>>\n>>> b) Either limiting non-SegWit transactions in some way to fix the n**2\n>>> sighash and FindAndDelete runtime and memory usage issues or fix them by\n>>> utilizing the new sighash type which many wallets and projects have\n>>> already implemented for SegWit in the spending of non-SegWit outputs.\n>>>\n>>\n>> The Seghash problem has already been addressed by limiting the maximum\n>> size of a transaction to 1 Mb.\n>> The FindAndDelete problem has already been solved by the Core Developers,\n>> so we don't have to worry about it anymore.\n>>\n>>\n>>> c) Your really should have replay protection in any HF.\n>>\n>>\n>> We could add a simple protection, although if we reach community\n>> consensus and 95% of hashing power, does we really need to? Can the old\n>> chain still be alive?\n>> If more people ask for replay protection, I will merge Spoonet scheme or\n>> develop the minimum possible replay protection (a simple signaling bit in\n>> transaction version)\n>>\n>>\n>>> d) You may wish to consider the possibility of tweaking the witness\n>>> discount and possibly discounting other parts of the input - SegWit went\n>>> a long ways towards making removal of elements from the UTXO set cheaper\n>>> than adding them, but didn't quite get there, you should probably finish\n>>> that job. This also provides additional tuneable parameters to allow you\n>>> to increase the block size while not having a blowup in the worst-case\n>>> block size.\n>>>\n>>\n>> That is an interesting economic change and would be out of the scope of\n>> segwit2mb.\n>>\n>>\n>>> e) Additional commitments at the top of the merkle root - both for\n>>> SegWit transactions and as additional space for merged mining and other\n>>> commitments which we may wish to add in the future, this should likely\n>>> be implemented an \"additional header\" ala Johnson Lau's Spoonnet\n>>> proposal.\n>>>\n>>> That is an interesting technical improvement that is out of the scope of\n>> segwit2mb.\n>> We can keep discussing spoonet while we merge segwit2mb, as spoonnet\n>> includes most of technical innovations.\n>>\n>>\n>>> Additionally, I think your parameters here pose very significant risk to\n>>> the Bitcoin ecosystem broadly.\n>>>\n>>> a) Activating a hard fork with less than 18/24 months (and even then...)\n>>> from a fully-audited and supported release of full node software to\n>>> activation date poses significant risks to many large software projects\n>>> and users. I've repeatedly received feedback from various folks that a\n>>> year or more is likely required in any hard fork to limit this risk, and\n>>> limited pushback on that given the large increase which SegWit provides\n>>> itself buying a ton of time.\n>>>\n>>> The feedback I received is slightly different from your feedback. Many\n>> company CTOs have expressed that one year for a Bitcoin hard-fork was\n>> period they could schedule a secure upgrade.\n>>\n>>\n>>\n>>> b) Having a significant discontinuity in block size increase only serves\n>>> to confuse and mislead users and businesses, forcing them to rapidly\n>>> adapt to a Bitcoin which changed overnight both by hardforking, and by\n>>> fees changing suddenly. Instead, having the hard fork activate technical\n>>> changes, and then slowly increasing the block size over the following\n>>> several years keeps things nice and continuous and also keeps us from\n>>> having to revisit ye old blocksize debate again six months after\n>>> activation.\n>>>\n>>> This is something worth considering. There is the old Pieter BIP103\n>> proposal has good parameters (17.7% per year).\n>>\n>> c) You should likely consider the effect of the many technological\n>>> innovations coming down the pipe in the coming months. Technologies like\n>>> Lightning, TumbleBit, and even your own RootStock could significantly\n>>> reduce fee pressure as transactions move to much faster and more\n>>> featureful systems.\n>>>\n>>> RSK sidechain team would have to take very tough decisions if Bitcoin\n>> splits, as RSK platform cannot be pegged to two different cryptocurrencies.\n>> We could launch two platforms, but RSK value proposition is \"supporting the\n>> advance of Bitcoin, the cryptocurrecy with highest network effect\". You\n>> understand that if Bitcoin splits Bitcoin BTC/BTU separately may cease to\n>> be the cryptocurrencies with higher volume/market cap/network effect.\n>>\n>> Therefore all RSK people that I talked too would prefer to avoid a split\n>> at all cost, reather that to be the winners of the scaling war.\n>>\n>>\n>>\n>>> On March 31, 2017 5:09:18 PM EDT, Sergio Demian Lerner via bitcoin-dev <\n>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> >Hi everyone,\n>>> >\n>>> >Segwit2Mb is the project to merge into Bitcoin a minimal patch that\n>>> >aims to\n>>> >untangle the current conflict between different political positions\n>>> >regarding segwit activation vs. an increase of the on-chain blockchain\n>>> >space through a standard block size increase. It is not a new solution,\n>>> >but\n>>> >it should be seen more as a least common denominator.\n>>> >\n>>> >Segwit2Mb combines segwit as it is today in Bitcoin 0.14+ with a 2MB\n>>> >block\n>>> >size hard-fork activated ONLY if segwit activates (95% of miners\n>>> >signaling), but at a fixed future date.\n>>> >\n>>> >The sole objective of this proposal is to re-unite the Bitcoin\n>>> >community\n>>> >and avoid a cryptocurrency split. Segwit2Mb does not aim to be best\n>>> >possible technical solution to solve Bitcoin technical limitations.\n>>> >However, this proposal does not imply a compromise to the future\n>>> >scalability or decentralization of Bitcoin, as a small increase in\n>>> >block\n>>> >size has been proven by several core and non-core developers not to\n>>> >affect\n>>> >Bitcoin value propositions.\n>>> >\n>>> >In the worst case, a 2X block size increase has much lower economic\n>>> >impact\n>>> >than the last bitcoin halving (<10%), which succeeded without problem.\n>>> >\n>>> >On the other side, Segwit2Mb primary goal is to be minimalistic: in\n>>> >this\n>>> >patch some choices have been made to reduce the number of lines\n>>> >modified in\n>>> >the current Bitcoin Core state (master branch), instead of implementing\n>>> >the\n>>> >most elegant solution. This is because I want to reduce the time it\n>>> >takes\n>>> >for core programmers and reviewers to check the correctness of the\n>>> >code,\n>>> >and to report and correct bugs.\n>>> >\n>>> >The patch was built by forking the master branch of Bitcoin Core,\n>>> >mixing a\n>>> >few lines of code from Jeff Garzik's BIP102,  and defining a second\n>>> >versionbits activation bit (bit 2) for the combined activation.\n>>> >\n>>> >The combined activation of segwit and 2Mb hard-fork nVersion bit is 2\n>>> >(DEPLOYMENT_SEGWIT_AND_2MB_BLOCKS).\n>>> >\n>>> >This means that segwit can still be activated without the 2MB hard-fork\n>>> >by\n>>> >signaling bit 1 in nVersion  (DEPLOYMENT_SEGWIT).\n>>> >\n>>> >The tentative lock-in and hard-fork dates are the following:\n>>> >\n>>> >Bit 2 signaling StartTime = 1493424000; // April 29th, 2017\n>>> >\n>>> >Bit 2 signaling Timeout = 1503964800; // August 29th, 2017\n>>> >\n>>> >HardForkTime = 1513209600; // Thu, 14 Dec 2017 00:00:00 GMT\n>>> >\n>>> >\n>>> >The hard-fork is conditional to 95% of the hashing power has approved\n>>> >the\n>>> >segwit2mb soft-fork and the segwit soft-fork has been activated (which\n>>> >should occur 2016 blocks after its lock-in time)\n>>> >\n>>> >For more information on how soft-forks are signaled and activated, see\n>>> >https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki\n>>> >\n>>> >This means that segwit would be activated before 2Mb: this is\n>>> >inevitable,\n>>> >as versionbits have been designed to have fixed activation periods and\n>>> >thresholds for all bits. Making segwit and 2Mb fork activate together\n>>> >at a\n>>> >delayed date would have required a major re-write of this code, which\n>>> >would\n>>> >contradict the premise of creating a minimalistic patch. However, once\n>>> >segwit is activated, the hard-fork is unavoidable.\n>>> >\n>>> >Although I have coded a first version of the segwit2mb patch (which\n>>> >modifies 120 lines of code, and adds 220 lines of testing code), I\n>>> >would\n>>> >prefer to wait to publish the source code until more comments have been\n>>> >received from the community.\n>>> >\n>>> >To prevent worsening block verification time because of the O(N^2)\n>>> >hashing\n>>> >problem, the simple restriction that transactions cannot be larger than\n>>> >1Mb\n>>> >has been kept. Therefore the worse-case of block verification time has\n>>> >only\n>>> >doubled.\n>>> >\n>>> >Regarding the hard-fork activation date, I want to give enough time to\n>>> >all\n>>> >active economic nodes to upgrade. As of Fri Mar 31 2017,\n>>> >https://bitnodes.21.co/nodes/ reports that 6332 out of 6955 nodes (91%)\n>>> >have upgraded to post 0.12 versions. Upgrade to post 0.12 versions can\n>>> >be\n>>> >used to identify economic active nodes, because in the 0.12 release\n>>> >dynamic\n>>> >fees were introduced, and currently no Bitcoin automatic payment system\n>>> >can\n>>> >operate without automatic discovery of the current fee rate. A pre-0.12\n>>> >would require constant manual intervention.\n>>> >Therefore I conclude that no more than 91% of the network nodes\n>>> >reported by\n>>> >bitnodes are active economic nodes.\n>>> >\n>>> >As Bitcoin Core 0.12 was released on February 2016, the time for this\n>>> >91%\n>>> >to upgrade has been around one year (under a moderate pressure of\n>>> >operational problems with unconfirmed transactions).\n>>> >Therefore we can expect a similar or lower time to upgrade for a\n>>> >hard-fork,\n>>> >after developers have discussed and approved the patch, and it has been\n>>> >reviewed and merged and 95% of the hashing power has signaled for it\n>>> >(the\n>>> >pressure not to upgrade being a complete halt of the operations).\n>>> >However I\n>>> >suggest that we discuss the hard-fork date and delay it if there is a\n>>> >real\n>>> >need to.\n>>> >\n>>> >Currently time works against the Bitcoin community, and so is delaying\n>>> >a\n>>> >compromise solution. Most of the community agree that halting the\n>>> >innovation for several years is a very bad option.\n>>> >\n>>> >After the comments collected by the community, a BIP will be written\n>>> >describing the resulting proposal details.\n>>> >\n>>> >If segwit2mb locks-in, before hard-fork occurs all bitcoin nodes should\n>>> >be\n>>> >updated to a Segwit2Mb enabled node to prevent them to be forked-away\n>>> >in a\n>>> >chain with almost no hashing-power.\n>>> >\n>>> >The proof of concept patch was made for Bitcoin Core but should be\n>>> >easily\n>>> >ported to other Bitcoin protocol implementations that already support\n>>> >versionbits. Lightweight (SPV) wallets should not be affected as they\n>>> >generally do not check the block size.\n>>> >\n>>> >I personally want to see the Lightning Network in action this year, use\n>>> >the\n>>> >non-malleability features in segwit, see the community discussing other\n>>> >exciting soft-forks in the scaling roadmap, Schnorr sigs, drivechains\n>>> >and\n>>> >MAST.\n>>> >\n>>> >I want to see miners, developers and industry side-by-side pushing\n>>> >Bitcoin\n>>> >forward, to increase the value of Bitcoin and prevent high transaction\n>>> >fees\n>>> >to put out of business use-cases that could have high positive social\n>>> >impact.\n>>> >\n>>> >I believe in the strength of a unified Bitcoin community. If you're a\n>>> >developer, please give your opinion, suggest changes, audit it, and\n>>> >take a\n>>> >stand with me to unlock the current Bitcoin deadlock.\n>>> >\n>>> >Contributions to the segwit2mb project are welcomed and awaited. The\n>>> >only\n>>> >limitation is to stick to the principle that the patch should be as\n>>> >simple\n>>> >to audit as possible. As an example, I wouldn't feel confident if the\n>>> >patch\n>>> >modified more than ~150 lines of code.\n>>> >\n>>> >Improvements unrelated to a 2 Mb increase or segwit, as beneficial as\n>>> >it\n>>> >may be to Bitcoin, should not be part of segwit2Mb.\n>>> >\n>>> >This proposal should not prevent other consensus proposals to be\n>>> >simultaneously merged: segwit2mb is a last resort solution in case we\n>>> >can\n>>> >not reach consensus on anything better.\n>>> >\n>>> >Again, the proposal is only a starting point: community feedback is\n>>> >expected and welcomed.\n>>> >\n>>> >Regards,\n>>> >Sergio Demian Lerner\n>>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170602/cb4bda03/attachment-0001.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2017-06-02T20:04:25",
                "message_text_only": ">From me to you ...this proposal doesn't lock in anything.   We could just\nmerge it with some small pushback - allow segwit to activate in Aug, then\n\"upgrade\" the hard fork to be \"spoonet in 18 months\" instead.\n\nOn Sat, Apr 1, 2017 at 8:33 AM, Jorge Tim\u00f3n via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Segwit replaces the 1 mb size limit with a weight limit of 4 mb. After\n> segwit there's no need for MAX_BLOCK_BASE_SIZE anymore, let alone\n> MAX_BLOCK2_BASE_SIZE.\n> Thus, by \"hf to 2 mb\" it seems you just really mean hardforking from 4\n> mb weight to 8 mb weight.\n>\n> I would also use the hardfork bit (sign bit in block.nNersion) as matt\n> comments.\n>\n> > We're in a deadlock and it seems we can't go forward adding more\n> functionality to segwit without the community approval (which include\n> miners). This is obvious to me.Then we have to go back.\n>\n> If segwit is controversial the way it is (I still don't understand why\n> despite having insistently asking to users and miners who claim to\n> oppose it), adding more consensus rule changes won't make it any less\n> controversial. If anything, it would be removing consensus rule\n> changes, not adding them that could make it less controversial.\n>\n> By no means I want to dissuade you from working on this bip proposal,\n> but I really don't see how it helps getting out of the deadlock at\n> all.\n>\n>\n> On Sat, Apr 1, 2017 at 1:44 PM, Sergio Demian Lerner via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Some people have asked me for the current implementation of this patch to\n> > review. I remind you that the current patch does not implement the\n> hard-fork\n> > signaling, as requested by Matt.\n> >\n> > The Segwit2Mb patch can be found here:\n> > https://github.com/SergioDemianLerner/bitcoin/commits/master\n> >\n> > For now, the segwit2mb repo has a single test file using the old internal\n> > blockchain building method (test/block_size_tests.cpp). This must be\n> > replaced soon with a better external test using the bitcoin/qa/rpc-tests\n> > tests, which I will begin to work on now after I collect all comments\n> from\n> > the community.\n> >\n> >\n> > regards\n> >\n> >\n> >\n> > On Sat, Apr 1, 2017 at 3:55 AM, Jared Lee Richardson <jaredr26 at gmail.com\n> >\n> > wrote:\n> >>\n> >> > Remember that the \"hashpower required to secure bitcoin\" is determined\n> >> > as a percentage of total Bitcoins transacted on-chain in each block\n> >>\n> >> Can you explain this statement a little better?  What do you mean by\n> >> that?  What does the total bitcoins transacted have to do with\n> >> hashpower required?\n> >>\n> >>\n> >> On Fri, Mar 31, 2017 at 2:22 PM, Matt Corallo via bitcoin-dev\n> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> > Hey Sergio,\n> >> >\n> >> > You appear to have ignored the last two years of Bitcoin hardfork\n> >> > research and understanding, recycling instead BIP 102 from 2015. There\n> >> > are many proposals which have pushed the state of hard fork research\n> >> > much further since then, and you may wish to read some of the posts on\n> >> > this mailing list listed at https://bitcoinhardforkresearch.\n> github.io/\n> >> > and make further edits based on what you learn. Your goal of \"avoid\n> >> > technical changes\" appears to not have any basis outside of perceived\n> >> > compromise for compromise sake, only making such a hardfork riskier\n> >> > instead.\n> >> >\n> >> > At a minimum, in terms of pure technical changes, you should probably\n> >> > consider (probably among others):\n> >> >\n> >> > a) Utilizing the \"hard fork signaling bit\" in the nVersion of the\n> block.\n> >> > b) Either limiting non-SegWit transactions in some way to fix the n**2\n> >> > sighash and FindAndDelete runtime and memory usage issues or fix them\n> by\n> >> > utilizing the new sighash type which many wallets and projects have\n> >> > already implemented for SegWit in the spending of non-SegWit outputs.\n> >> > c) Your really should have replay protection in any HF. The clever fix\n> >> > from\n> >> > Spoonnet for poor scaling of optionally allowing non-SegWit outputs to\n> >> > be spent with SegWit's sighash provides this all in one go.\n> >> > d) You may wish to consider the possibility of tweaking the witness\n> >> > discount and possibly discounting other parts of the input - SegWit\n> went\n> >> > a long ways towards making removal of elements from the UTXO set\n> cheaper\n> >> > than adding them, but didn't quite get there, you should probably\n> finish\n> >> > that job. This also provides additional tuneable parameters to allow\n> you\n> >> > to increase the block size while not having a blowup in the worst-case\n> >> > block size.\n> >> > e) Additional commitments at the top of the merkle root - both for\n> >> > SegWit transactions and as additional space for merged mining and\n> other\n> >> > commitments which we may wish to add in the future, this should likely\n> >> > be implemented an \"additional header\" ala Johnson Lau's Spoonnet\n> >> > proposal.\n> >> >\n> >> > Additionally, I think your parameters here pose very significant risk\n> to\n> >> > the Bitcoin ecosystem broadly.\n> >> >\n> >> > a) Activating a hard fork with less than 18/24 months (and even\n> then...)\n> >> > from a fully-audited and supported release of full node software to\n> >> > activation date poses significant risks to many large software\n> projects\n> >> > and users. I've repeatedly received feedback from various folks that a\n> >> > year or more is likely required in any hard fork to limit this risk,\n> and\n> >> > limited pushback on that given the large increase which SegWit\n> provides\n> >> > itself buying a ton of time.\n> >> >\n> >> > b) Having a significant discontinuity in block size increase only\n> serves\n> >> > to confuse and mislead users and businesses, forcing them to rapidly\n> >> > adapt to a Bitcoin which changed overnight both by hardforking, and by\n> >> > fees changing suddenly. Instead, having the hard fork activate\n> technical\n> >> > changes, and then slowly increasing the block size over the following\n> >> > several years keeps things nice and continuous and also keeps us from\n> >> > having to revisit ye old blocksize debate again six months after\n> >> > activation.\n> >> >\n> >> > c) You should likely consider the effect of the many technological\n> >> > innovations coming down the pipe in the coming months. Technologies\n> like\n> >> > Lightning, TumbleBit, and even your own RootStock could significantly\n> >> > reduce fee pressure as transactions move to much faster and more\n> >> > featureful systems.\n> >> >\n> >> > Commitments to aggressive hard fork parameters now may leave miners\n> >> > without much revenue as far out as the next halving (which current\n> >> > transaction growth trends are indicating we'd just only barely reach\n> 2MB\n> >> > of transaction volume, let alone if you consider the effects of users\n> >> > moving to systems which provide more features for Bitcoin\n> transactions).\n> >> > This could lead to a precipitous drop in hashrate as miners are no\n> >> > longer sufficiently compensated.\n> >> >\n> >> > Remember that the \"hashpower required to secure bitcoin\" is determined\n> >> > as a percentage of total Bitcoins transacted on-chain in each block,\n> so\n> >> > as subsidy goes down, miners need to be paid with fees, not just price\n> >> > increases. Even if we were OK with hashpower going down compared to\n> the\n> >> > value it is securing, betting the security of Bitcoin on its price\n> >> > rising exponentially to match decreasing subsidy does not strike me\n> as a\n> >> > particularly inspiring tradeoff.\n> >> >\n> >> > There aren't many great technical solutions to some of these issues,\n> as\n> >> > far as I'm aware, but it's something that needs to be incredibly\n> >> > carefully considered before betting the continued security of Bitcoin\n> on\n> >> > exponential on-chain growth, something which we have historically\n> never\n> >> > seen.\n> >> >\n> >> > Matt\n> >> >\n> >> >\n> >> > On March 31, 2017 5:09:18 PM EDT, Sergio Demian Lerner via bitcoin-dev\n> >> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> >>Hi everyone,\n> >> >>\n> >> >>Segwit2Mb is the project to merge into Bitcoin a minimal patch that\n> >> >>aims to\n> >> >>untangle the current conflict between different political positions\n> >> >>regarding segwit activation vs. an increase of the on-chain blockchain\n> >> >>space through a standard block size increase. It is not a new\n> solution,\n> >> >>but\n> >> >>it should be seen more as a least common denominator.\n> >> >>\n> >> >>Segwit2Mb combines segwit as it is today in Bitcoin 0.14+ with a 2MB\n> >> >>block\n> >> >>size hard-fork activated ONLY if segwit activates (95% of miners\n> >> >>signaling), but at a fixed future date.\n> >> >>\n> >> >>The sole objective of this proposal is to re-unite the Bitcoin\n> >> >>community\n> >> >>and avoid a cryptocurrency split. Segwit2Mb does not aim to be best\n> >> >>possible technical solution to solve Bitcoin technical limitations.\n> >> >>However, this proposal does not imply a compromise to the future\n> >> >>scalability or decentralization of Bitcoin, as a small increase in\n> >> >>block\n> >> >>size has been proven by several core and non-core developers not to\n> >> >>affect\n> >> >>Bitcoin value propositions.\n> >> >>\n> >> >>In the worst case, a 2X block size increase has much lower economic\n> >> >>impact\n> >> >>than the last bitcoin halving (<10%), which succeeded without problem.\n> >> >>\n> >> >>On the other side, Segwit2Mb primary goal is to be minimalistic: in\n> >> >>this\n> >> >>patch some choices have been made to reduce the number of lines\n> >> >>modified in\n> >> >>the current Bitcoin Core state (master branch), instead of\n> implementing\n> >> >>the\n> >> >>most elegant solution. This is because I want to reduce the time it\n> >> >>takes\n> >> >>for core programmers and reviewers to check the correctness of the\n> >> >>code,\n> >> >>and to report and correct bugs.\n> >> >>\n> >> >>The patch was built by forking the master branch of Bitcoin Core,\n> >> >>mixing a\n> >> >>few lines of code from Jeff Garzik's BIP102,  and defining a second\n> >> >>versionbits activation bit (bit 2) for the combined activation.\n> >> >>\n> >> >>The combined activation of segwit and 2Mb hard-fork nVersion bit is 2\n> >> >>(DEPLOYMENT_SEGWIT_AND_2MB_BLOCKS).\n> >> >>\n> >> >>This means that segwit can still be activated without the 2MB\n> hard-fork\n> >> >>by\n> >> >>signaling bit 1 in nVersion  (DEPLOYMENT_SEGWIT).\n> >> >>\n> >> >>The tentative lock-in and hard-fork dates are the following:\n> >> >>\n> >> >>Bit 2 signaling StartTime = 1493424000; // April 29th, 2017\n> >> >>\n> >> >>Bit 2 signaling Timeout = 1503964800; // August 29th, 2017\n> >> >>\n> >> >>HardForkTime = 1513209600; // Thu, 14 Dec 2017 00:00:00 GMT\n> >> >>\n> >> >>\n> >> >>The hard-fork is conditional to 95% of the hashing power has approved\n> >> >>the\n> >> >>segwit2mb soft-fork and the segwit soft-fork has been activated (which\n> >> >>should occur 2016 blocks after its lock-in time)\n> >> >>\n> >> >>For more information on how soft-forks are signaled and activated, see\n> >> >>https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki\n> >> >>\n> >> >>This means that segwit would be activated before 2Mb: this is\n> >> >>inevitable,\n> >> >>as versionbits have been designed to have fixed activation periods and\n> >> >>thresholds for all bits. Making segwit and 2Mb fork activate together\n> >> >>at a\n> >> >>delayed date would have required a major re-write of this code, which\n> >> >>would\n> >> >>contradict the premise of creating a minimalistic patch. However, once\n> >> >>segwit is activated, the hard-fork is unavoidable.\n> >> >>\n> >> >>Although I have coded a first version of the segwit2mb patch (which\n> >> >>modifies 120 lines of code, and adds 220 lines of testing code), I\n> >> >>would\n> >> >>prefer to wait to publish the source code until more comments have\n> been\n> >> >>received from the community.\n> >> >>\n> >> >>To prevent worsening block verification time because of the O(N^2)\n> >> >>hashing\n> >> >>problem, the simple restriction that transactions cannot be larger\n> than\n> >> >>1Mb\n> >> >>has been kept. Therefore the worse-case of block verification time has\n> >> >>only\n> >> >>doubled.\n> >> >>\n> >> >>Regarding the hard-fork activation date, I want to give enough time to\n> >> >>all\n> >> >>active economic nodes to upgrade. As of Fri Mar 31 2017,\n> >> >>https://bitnodes.21.co/nodes/ reports that 6332 out of 6955 nodes\n> (91%)\n> >> >>have upgraded to post 0.12 versions. Upgrade to post 0.12 versions can\n> >> >>be\n> >> >>used to identify economic active nodes, because in the 0.12 release\n> >> >>dynamic\n> >> >>fees were introduced, and currently no Bitcoin automatic payment\n> system\n> >> >>can\n> >> >>operate without automatic discovery of the current fee rate. A\n> pre-0.12\n> >> >>would require constant manual intervention.\n> >> >>Therefore I conclude that no more than 91% of the network nodes\n> >> >>reported by\n> >> >>bitnodes are active economic nodes.\n> >> >>\n> >> >>As Bitcoin Core 0.12 was released on February 2016, the time for this\n> >> >>91%\n> >> >>to upgrade has been around one year (under a moderate pressure of\n> >> >>operational problems with unconfirmed transactions).\n> >> >>Therefore we can expect a similar or lower time to upgrade for a\n> >> >>hard-fork,\n> >> >>after developers have discussed and approved the patch, and it has\n> been\n> >> >>reviewed and merged and 95% of the hashing power has signaled for it\n> >> >>(the\n> >> >>pressure not to upgrade being a complete halt of the operations).\n> >> >>However I\n> >> >>suggest that we discuss the hard-fork date and delay it if there is a\n> >> >>real\n> >> >>need to.\n> >> >>\n> >> >>Currently time works against the Bitcoin community, and so is delaying\n> >> >>a\n> >> >>compromise solution. Most of the community agree that halting the\n> >> >>innovation for several years is a very bad option.\n> >> >>\n> >> >>After the comments collected by the community, a BIP will be written\n> >> >>describing the resulting proposal details.\n> >> >>\n> >> >>If segwit2mb locks-in, before hard-fork occurs all bitcoin nodes\n> should\n> >> >>be\n> >> >>updated to a Segwit2Mb enabled node to prevent them to be forked-away\n> >> >>in a\n> >> >>chain with almost no hashing-power.\n> >> >>\n> >> >>The proof of concept patch was made for Bitcoin Core but should be\n> >> >>easily\n> >> >>ported to other Bitcoin protocol implementations that already support\n> >> >>versionbits. Lightweight (SPV) wallets should not be affected as they\n> >> >>generally do not check the block size.\n> >> >>\n> >> >>I personally want to see the Lightning Network in action this year,\n> use\n> >> >>the\n> >> >>non-malleability features in segwit, see the community discussing\n> other\n> >> >>exciting soft-forks in the scaling roadmap, Schnorr sigs, drivechains\n> >> >>and\n> >> >>MAST.\n> >> >>\n> >> >>I want to see miners, developers and industry side-by-side pushing\n> >> >>Bitcoin\n> >> >>forward, to increase the value of Bitcoin and prevent high transaction\n> >> >>fees\n> >> >>to put out of business use-cases that could have high positive social\n> >> >>impact.\n> >> >>\n> >> >>I believe in the strength of a unified Bitcoin community. If you're a\n> >> >>developer, please give your opinion, suggest changes, audit it, and\n> >> >>take a\n> >> >>stand with me to unlock the current Bitcoin deadlock.\n> >> >>\n> >> >>Contributions to the segwit2mb project are welcomed and awaited. The\n> >> >>only\n> >> >>limitation is to stick to the principle that the patch should be as\n> >> >>simple\n> >> >>to audit as possible. As an example, I wouldn't feel confident if the\n> >> >>patch\n> >> >>modified more than ~150 lines of code.\n> >> >>\n> >> >>Improvements unrelated to a 2 Mb increase or segwit, as beneficial as\n> >> >>it\n> >> >>may be to Bitcoin, should not be part of segwit2Mb.\n> >> >>\n> >> >>This proposal should not prevent other consensus proposals to be\n> >> >>simultaneously merged: segwit2mb is a last resort solution in case we\n> >> >>can\n> >> >>not reach consensus on anything better.\n> >> >>\n> >> >>Again, the proposal is only a starting point: community feedback is\n> >> >>expected and welcomed.\n> >> >>\n> >> >>Regards,\n> >> >>Sergio Demian Lerner\n> >> > _______________________________________________\n> >> > bitcoin-dev mailing list\n> >> > bitcoin-dev at lists.linuxfoundation.org\n> >> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170602/da24971d/attachment-0001.html>"
            },
            {
                "author": "Sergio Demian Lerner",
                "date": "2017-06-02T21:51:45",
                "message_text_only": "By \"upgrade\"  the HF you mean activate 2X and then spoonet 18 months later\nor do not activate the 2x HF at all?\n\n\n\n\n\nOn Fri, Jun 2, 2017 at 4:04 PM, Erik Aronesty via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> From me to you ...this proposal doesn't lock in anything.   We could just\n> merge it with some small pushback - allow segwit to activate in Aug, then\n> \"upgrade\" the hard fork to be \"spoonet in 18 months\" instead.\n>\n> On Sat, Apr 1, 2017 at 8:33 AM, Jorge Tim\u00f3n via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Segwit replaces the 1 mb size limit with a weight limit of 4 mb. After\n>> segwit there's no need for MAX_BLOCK_BASE_SIZE anymore, let alone\n>> MAX_BLOCK2_BASE_SIZE.\n>> Thus, by \"hf to 2 mb\" it seems you just really mean hardforking from 4\n>> mb weight to 8 mb weight.\n>>\n>> I would also use the hardfork bit (sign bit in block.nNersion) as matt\n>> comments.\n>>\n>> > We're in a deadlock and it seems we can't go forward adding more\n>> functionality to segwit without the community approval (which include\n>> miners). This is obvious to me.Then we have to go back.\n>>\n>> If segwit is controversial the way it is (I still don't understand why\n>> despite having insistently asking to users and miners who claim to\n>> oppose it), adding more consensus rule changes won't make it any less\n>> controversial. If anything, it would be removing consensus rule\n>> changes, not adding them that could make it less controversial.\n>>\n>> By no means I want to dissuade you from working on this bip proposal,\n>> but I really don't see how it helps getting out of the deadlock at\n>> all.\n>>\n>>\n>> On Sat, Apr 1, 2017 at 1:44 PM, Sergio Demian Lerner via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > Some people have asked me for the current implementation of this patch\n>> to\n>> > review. I remind you that the current patch does not implement the\n>> hard-fork\n>> > signaling, as requested by Matt.\n>> >\n>> > The Segwit2Mb patch can be found here:\n>> > https://github.com/SergioDemianLerner/bitcoin/commits/master\n>> >\n>> > For now, the segwit2mb repo has a single test file using the old\n>> internal\n>> > blockchain building method (test/block_size_tests.cpp). This must be\n>> > replaced soon with a better external test using the bitcoin/qa/rpc-tests\n>> > tests, which I will begin to work on now after I collect all comments\n>> from\n>> > the community.\n>> >\n>> >\n>> > regards\n>> >\n>> >\n>> >\n>> > On Sat, Apr 1, 2017 at 3:55 AM, Jared Lee Richardson <\n>> jaredr26 at gmail.com>\n>> > wrote:\n>> >>\n>> >> > Remember that the \"hashpower required to secure bitcoin\" is\n>> determined\n>> >> > as a percentage of total Bitcoins transacted on-chain in each block\n>> >>\n>> >> Can you explain this statement a little better?  What do you mean by\n>> >> that?  What does the total bitcoins transacted have to do with\n>> >> hashpower required?\n>> >>\n>> >>\n>> >> On Fri, Mar 31, 2017 at 2:22 PM, Matt Corallo via bitcoin-dev\n>> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >> > Hey Sergio,\n>> >> >\n>> >> > You appear to have ignored the last two years of Bitcoin hardfork\n>> >> > research and understanding, recycling instead BIP 102 from 2015.\n>> There\n>> >> > are many proposals which have pushed the state of hard fork research\n>> >> > much further since then, and you may wish to read some of the posts\n>> on\n>> >> > this mailing list listed at https://bitcoinhardforkresearc\n>> h.github.io/\n>> >> > and make further edits based on what you learn. Your goal of \"avoid\n>> >> > technical changes\" appears to not have any basis outside of perceived\n>> >> > compromise for compromise sake, only making such a hardfork riskier\n>> >> > instead.\n>> >> >\n>> >> > At a minimum, in terms of pure technical changes, you should probably\n>> >> > consider (probably among others):\n>> >> >\n>> >> > a) Utilizing the \"hard fork signaling bit\" in the nVersion of the\n>> block.\n>> >> > b) Either limiting non-SegWit transactions in some way to fix the\n>> n**2\n>> >> > sighash and FindAndDelete runtime and memory usage issues or fix\n>> them by\n>> >> > utilizing the new sighash type which many wallets and projects have\n>> >> > already implemented for SegWit in the spending of non-SegWit outputs.\n>> >> > c) Your really should have replay protection in any HF. The clever\n>> fix\n>> >> > from\n>> >> > Spoonnet for poor scaling of optionally allowing non-SegWit outputs\n>> to\n>> >> > be spent with SegWit's sighash provides this all in one go.\n>> >> > d) You may wish to consider the possibility of tweaking the witness\n>> >> > discount and possibly discounting other parts of the input - SegWit\n>> went\n>> >> > a long ways towards making removal of elements from the UTXO set\n>> cheaper\n>> >> > than adding them, but didn't quite get there, you should probably\n>> finish\n>> >> > that job. This also provides additional tuneable parameters to allow\n>> you\n>> >> > to increase the block size while not having a blowup in the\n>> worst-case\n>> >> > block size.\n>> >> > e) Additional commitments at the top of the merkle root - both for\n>> >> > SegWit transactions and as additional space for merged mining and\n>> other\n>> >> > commitments which we may wish to add in the future, this should\n>> likely\n>> >> > be implemented an \"additional header\" ala Johnson Lau's Spoonnet\n>> >> > proposal.\n>> >> >\n>> >> > Additionally, I think your parameters here pose very significant\n>> risk to\n>> >> > the Bitcoin ecosystem broadly.\n>> >> >\n>> >> > a) Activating a hard fork with less than 18/24 months (and even\n>> then...)\n>> >> > from a fully-audited and supported release of full node software to\n>> >> > activation date poses significant risks to many large software\n>> projects\n>> >> > and users. I've repeatedly received feedback from various folks that\n>> a\n>> >> > year or more is likely required in any hard fork to limit this risk,\n>> and\n>> >> > limited pushback on that given the large increase which SegWit\n>> provides\n>> >> > itself buying a ton of time.\n>> >> >\n>> >> > b) Having a significant discontinuity in block size increase only\n>> serves\n>> >> > to confuse and mislead users and businesses, forcing them to rapidly\n>> >> > adapt to a Bitcoin which changed overnight both by hardforking, and\n>> by\n>> >> > fees changing suddenly. Instead, having the hard fork activate\n>> technical\n>> >> > changes, and then slowly increasing the block size over the following\n>> >> > several years keeps things nice and continuous and also keeps us from\n>> >> > having to revisit ye old blocksize debate again six months after\n>> >> > activation.\n>> >> >\n>> >> > c) You should likely consider the effect of the many technological\n>> >> > innovations coming down the pipe in the coming months. Technologies\n>> like\n>> >> > Lightning, TumbleBit, and even your own RootStock could significantly\n>> >> > reduce fee pressure as transactions move to much faster and more\n>> >> > featureful systems.\n>> >> >\n>> >> > Commitments to aggressive hard fork parameters now may leave miners\n>> >> > without much revenue as far out as the next halving (which current\n>> >> > transaction growth trends are indicating we'd just only barely reach\n>> 2MB\n>> >> > of transaction volume, let alone if you consider the effects of users\n>> >> > moving to systems which provide more features for Bitcoin\n>> transactions).\n>> >> > This could lead to a precipitous drop in hashrate as miners are no\n>> >> > longer sufficiently compensated.\n>> >> >\n>> >> > Remember that the \"hashpower required to secure bitcoin\" is\n>> determined\n>> >> > as a percentage of total Bitcoins transacted on-chain in each block,\n>> so\n>> >> > as subsidy goes down, miners need to be paid with fees, not just\n>> price\n>> >> > increases. Even if we were OK with hashpower going down compared to\n>> the\n>> >> > value it is securing, betting the security of Bitcoin on its price\n>> >> > rising exponentially to match decreasing subsidy does not strike me\n>> as a\n>> >> > particularly inspiring tradeoff.\n>> >> >\n>> >> > There aren't many great technical solutions to some of these issues,\n>> as\n>> >> > far as I'm aware, but it's something that needs to be incredibly\n>> >> > carefully considered before betting the continued security of\n>> Bitcoin on\n>> >> > exponential on-chain growth, something which we have historically\n>> never\n>> >> > seen.\n>> >> >\n>> >> > Matt\n>> >> >\n>> >> >\n>> >> > On March 31, 2017 5:09:18 PM EDT, Sergio Demian Lerner via\n>> bitcoin-dev\n>> >> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >> >>Hi everyone,\n>> >> >>\n>> >> >>Segwit2Mb is the project to merge into Bitcoin a minimal patch that\n>> >> >>aims to\n>> >> >>untangle the current conflict between different political positions\n>> >> >>regarding segwit activation vs. an increase of the on-chain\n>> blockchain\n>> >> >>space through a standard block size increase. It is not a new\n>> solution,\n>> >> >>but\n>> >> >>it should be seen more as a least common denominator.\n>> >> >>\n>> >> >>Segwit2Mb combines segwit as it is today in Bitcoin 0.14+ with a 2MB\n>> >> >>block\n>> >> >>size hard-fork activated ONLY if segwit activates (95% of miners\n>> >> >>signaling), but at a fixed future date.\n>> >> >>\n>> >> >>The sole objective of this proposal is to re-unite the Bitcoin\n>> >> >>community\n>> >> >>and avoid a cryptocurrency split. Segwit2Mb does not aim to be best\n>> >> >>possible technical solution to solve Bitcoin technical limitations.\n>> >> >>However, this proposal does not imply a compromise to the future\n>> >> >>scalability or decentralization of Bitcoin, as a small increase in\n>> >> >>block\n>> >> >>size has been proven by several core and non-core developers not to\n>> >> >>affect\n>> >> >>Bitcoin value propositions.\n>> >> >>\n>> >> >>In the worst case, a 2X block size increase has much lower economic\n>> >> >>impact\n>> >> >>than the last bitcoin halving (<10%), which succeeded without\n>> problem.\n>> >> >>\n>> >> >>On the other side, Segwit2Mb primary goal is to be minimalistic: in\n>> >> >>this\n>> >> >>patch some choices have been made to reduce the number of lines\n>> >> >>modified in\n>> >> >>the current Bitcoin Core state (master branch), instead of\n>> implementing\n>> >> >>the\n>> >> >>most elegant solution. This is because I want to reduce the time it\n>> >> >>takes\n>> >> >>for core programmers and reviewers to check the correctness of the\n>> >> >>code,\n>> >> >>and to report and correct bugs.\n>> >> >>\n>> >> >>The patch was built by forking the master branch of Bitcoin Core,\n>> >> >>mixing a\n>> >> >>few lines of code from Jeff Garzik's BIP102,  and defining a second\n>> >> >>versionbits activation bit (bit 2) for the combined activation.\n>> >> >>\n>> >> >>The combined activation of segwit and 2Mb hard-fork nVersion bit is 2\n>> >> >>(DEPLOYMENT_SEGWIT_AND_2MB_BLOCKS).\n>> >> >>\n>> >> >>This means that segwit can still be activated without the 2MB\n>> hard-fork\n>> >> >>by\n>> >> >>signaling bit 1 in nVersion  (DEPLOYMENT_SEGWIT).\n>> >> >>\n>> >> >>The tentative lock-in and hard-fork dates are the following:\n>> >> >>\n>> >> >>Bit 2 signaling StartTime = 1493424000; // April 29th, 2017\n>> >> >>\n>> >> >>Bit 2 signaling Timeout = 1503964800; // August 29th, 2017\n>> >> >>\n>> >> >>HardForkTime = 1513209600; // Thu, 14 Dec 2017 00:00:00 GMT\n>> >> >>\n>> >> >>\n>> >> >>The hard-fork is conditional to 95% of the hashing power has approved\n>> >> >>the\n>> >> >>segwit2mb soft-fork and the segwit soft-fork has been activated\n>> (which\n>> >> >>should occur 2016 blocks after its lock-in time)\n>> >> >>\n>> >> >>For more information on how soft-forks are signaled and activated,\n>> see\n>> >> >>https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki\n>> >> >>\n>> >> >>This means that segwit would be activated before 2Mb: this is\n>> >> >>inevitable,\n>> >> >>as versionbits have been designed to have fixed activation periods\n>> and\n>> >> >>thresholds for all bits. Making segwit and 2Mb fork activate together\n>> >> >>at a\n>> >> >>delayed date would have required a major re-write of this code, which\n>> >> >>would\n>> >> >>contradict the premise of creating a minimalistic patch. However,\n>> once\n>> >> >>segwit is activated, the hard-fork is unavoidable.\n>> >> >>\n>> >> >>Although I have coded a first version of the segwit2mb patch (which\n>> >> >>modifies 120 lines of code, and adds 220 lines of testing code), I\n>> >> >>would\n>> >> >>prefer to wait to publish the source code until more comments have\n>> been\n>> >> >>received from the community.\n>> >> >>\n>> >> >>To prevent worsening block verification time because of the O(N^2)\n>> >> >>hashing\n>> >> >>problem, the simple restriction that transactions cannot be larger\n>> than\n>> >> >>1Mb\n>> >> >>has been kept. Therefore the worse-case of block verification time\n>> has\n>> >> >>only\n>> >> >>doubled.\n>> >> >>\n>> >> >>Regarding the hard-fork activation date, I want to give enough time\n>> to\n>> >> >>all\n>> >> >>active economic nodes to upgrade. As of Fri Mar 31 2017,\n>> >> >>https://bitnodes.21.co/nodes/ reports that 6332 out of 6955 nodes\n>> (91%)\n>> >> >>have upgraded to post 0.12 versions. Upgrade to post 0.12 versions\n>> can\n>> >> >>be\n>> >> >>used to identify economic active nodes, because in the 0.12 release\n>> >> >>dynamic\n>> >> >>fees were introduced, and currently no Bitcoin automatic payment\n>> system\n>> >> >>can\n>> >> >>operate without automatic discovery of the current fee rate. A\n>> pre-0.12\n>> >> >>would require constant manual intervention.\n>> >> >>Therefore I conclude that no more than 91% of the network nodes\n>> >> >>reported by\n>> >> >>bitnodes are active economic nodes.\n>> >> >>\n>> >> >>As Bitcoin Core 0.12 was released on February 2016, the time for this\n>> >> >>91%\n>> >> >>to upgrade has been around one year (under a moderate pressure of\n>> >> >>operational problems with unconfirmed transactions).\n>> >> >>Therefore we can expect a similar or lower time to upgrade for a\n>> >> >>hard-fork,\n>> >> >>after developers have discussed and approved the patch, and it has\n>> been\n>> >> >>reviewed and merged and 95% of the hashing power has signaled for it\n>> >> >>(the\n>> >> >>pressure not to upgrade being a complete halt of the operations).\n>> >> >>However I\n>> >> >>suggest that we discuss the hard-fork date and delay it if there is a\n>> >> >>real\n>> >> >>need to.\n>> >> >>\n>> >> >>Currently time works against the Bitcoin community, and so is\n>> delaying\n>> >> >>a\n>> >> >>compromise solution. Most of the community agree that halting the\n>> >> >>innovation for several years is a very bad option.\n>> >> >>\n>> >> >>After the comments collected by the community, a BIP will be written\n>> >> >>describing the resulting proposal details.\n>> >> >>\n>> >> >>If segwit2mb locks-in, before hard-fork occurs all bitcoin nodes\n>> should\n>> >> >>be\n>> >> >>updated to a Segwit2Mb enabled node to prevent them to be forked-away\n>> >> >>in a\n>> >> >>chain with almost no hashing-power.\n>> >> >>\n>> >> >>The proof of concept patch was made for Bitcoin Core but should be\n>> >> >>easily\n>> >> >>ported to other Bitcoin protocol implementations that already support\n>> >> >>versionbits. Lightweight (SPV) wallets should not be affected as they\n>> >> >>generally do not check the block size.\n>> >> >>\n>> >> >>I personally want to see the Lightning Network in action this year,\n>> use\n>> >> >>the\n>> >> >>non-malleability features in segwit, see the community discussing\n>> other\n>> >> >>exciting soft-forks in the scaling roadmap, Schnorr sigs, drivechains\n>> >> >>and\n>> >> >>MAST.\n>> >> >>\n>> >> >>I want to see miners, developers and industry side-by-side pushing\n>> >> >>Bitcoin\n>> >> >>forward, to increase the value of Bitcoin and prevent high\n>> transaction\n>> >> >>fees\n>> >> >>to put out of business use-cases that could have high positive social\n>> >> >>impact.\n>> >> >>\n>> >> >>I believe in the strength of a unified Bitcoin community. If you're a\n>> >> >>developer, please give your opinion, suggest changes, audit it, and\n>> >> >>take a\n>> >> >>stand with me to unlock the current Bitcoin deadlock.\n>> >> >>\n>> >> >>Contributions to the segwit2mb project are welcomed and awaited. The\n>> >> >>only\n>> >> >>limitation is to stick to the principle that the patch should be as\n>> >> >>simple\n>> >> >>to audit as possible. As an example, I wouldn't feel confident if the\n>> >> >>patch\n>> >> >>modified more than ~150 lines of code.\n>> >> >>\n>> >> >>Improvements unrelated to a 2 Mb increase or segwit, as beneficial as\n>> >> >>it\n>> >> >>may be to Bitcoin, should not be part of segwit2Mb.\n>> >> >>\n>> >> >>This proposal should not prevent other consensus proposals to be\n>> >> >>simultaneously merged: segwit2mb is a last resort solution in case we\n>> >> >>can\n>> >> >>not reach consensus on anything better.\n>> >> >>\n>> >> >>Again, the proposal is only a starting point: community feedback is\n>> >> >>expected and welcomed.\n>> >> >>\n>> >> >>Regards,\n>> >> >>Sergio Demian Lerner\n>> >> > _______________________________________________\n>> >> > bitcoin-dev mailing list\n>> >> > bitcoin-dev at lists.linuxfoundation.org\n>> >> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >\n>> >\n>> >\n>> > _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170602/40964871/attachment-0001.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2017-06-03T00:53:55",
                "message_text_only": "What I mean is that spoonet and other HF improvements, and a slower\ntimeline needs to be folded in ...before the HF activation date - to make\nit far more likely that the community adopts the whole proposal and the\nchain doesn't fragment.\n\nIf you try to push a 2mb with no safety checks and nothing else improved -\nnothing will happen.\n\nTake a quick look at the COOP proposal...it gets us to 4mb blocks in 4\nyears....gradually, no massive fee swings.\n\n\nOn Fri, Jun 2, 2017 at 5:51 PM, Sergio Demian Lerner <\nsergio.d.lerner at gmail.com> wrote:\n\n> By \"upgrade\"  the HF you mean activate 2X and then spoonet 18 months later\n> or do not activate the 2x HF at all?\n>\n>\n>\n>\n>\n> On Fri, Jun 2, 2017 at 4:04 PM, Erik Aronesty via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> From me to you ...this proposal doesn't lock in anything.   We could just\n>> merge it with some small pushback - allow segwit to activate in Aug, then\n>> \"upgrade\" the hard fork to be \"spoonet in 18 months\" instead.\n>>\n>> On Sat, Apr 1, 2017 at 8:33 AM, Jorge Tim\u00f3n via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> Segwit replaces the 1 mb size limit with a weight limit of 4 mb. After\n>>> segwit there's no need for MAX_BLOCK_BASE_SIZE anymore, let alone\n>>> MAX_BLOCK2_BASE_SIZE.\n>>> Thus, by \"hf to 2 mb\" it seems you just really mean hardforking from 4\n>>> mb weight to 8 mb weight.\n>>>\n>>> I would also use the hardfork bit (sign bit in block.nNersion) as matt\n>>> comments.\n>>>\n>>> > We're in a deadlock and it seems we can't go forward adding more\n>>> functionality to segwit without the community approval (which include\n>>> miners). This is obvious to me.Then we have to go back.\n>>>\n>>> If segwit is controversial the way it is (I still don't understand why\n>>> despite having insistently asking to users and miners who claim to\n>>> oppose it), adding more consensus rule changes won't make it any less\n>>> controversial. If anything, it would be removing consensus rule\n>>> changes, not adding them that could make it less controversial.\n>>>\n>>> By no means I want to dissuade you from working on this bip proposal,\n>>> but I really don't see how it helps getting out of the deadlock at\n>>> all.\n>>>\n>>>\n>>> On Sat, Apr 1, 2017 at 1:44 PM, Sergio Demian Lerner via bitcoin-dev\n>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> > Some people have asked me for the current implementation of this patch\n>>> to\n>>> > review. I remind you that the current patch does not implement the\n>>> hard-fork\n>>> > signaling, as requested by Matt.\n>>> >\n>>> > The Segwit2Mb patch can be found here:\n>>> > https://github.com/SergioDemianLerner/bitcoin/commits/master\n>>> >\n>>> > For now, the segwit2mb repo has a single test file using the old\n>>> internal\n>>> > blockchain building method (test/block_size_tests.cpp). This must be\n>>> > replaced soon with a better external test using the\n>>> bitcoin/qa/rpc-tests\n>>> > tests, which I will begin to work on now after I collect all comments\n>>> from\n>>> > the community.\n>>> >\n>>> >\n>>> > regards\n>>> >\n>>> >\n>>> >\n>>> > On Sat, Apr 1, 2017 at 3:55 AM, Jared Lee Richardson <\n>>> jaredr26 at gmail.com>\n>>> > wrote:\n>>> >>\n>>> >> > Remember that the \"hashpower required to secure bitcoin\" is\n>>> determined\n>>> >> > as a percentage of total Bitcoins transacted on-chain in each block\n>>> >>\n>>> >> Can you explain this statement a little better?  What do you mean by\n>>> >> that?  What does the total bitcoins transacted have to do with\n>>> >> hashpower required?\n>>> >>\n>>> >>\n>>> >> On Fri, Mar 31, 2017 at 2:22 PM, Matt Corallo via bitcoin-dev\n>>> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> >> > Hey Sergio,\n>>> >> >\n>>> >> > You appear to have ignored the last two years of Bitcoin hardfork\n>>> >> > research and understanding, recycling instead BIP 102 from 2015.\n>>> There\n>>> >> > are many proposals which have pushed the state of hard fork research\n>>> >> > much further since then, and you may wish to read some of the posts\n>>> on\n>>> >> > this mailing list listed at https://bitcoinhardforkresearc\n>>> h.github.io/\n>>> >> > and make further edits based on what you learn. Your goal of \"avoid\n>>> >> > technical changes\" appears to not have any basis outside of\n>>> perceived\n>>> >> > compromise for compromise sake, only making such a hardfork riskier\n>>> >> > instead.\n>>> >> >\n>>> >> > At a minimum, in terms of pure technical changes, you should\n>>> probably\n>>> >> > consider (probably among others):\n>>> >> >\n>>> >> > a) Utilizing the \"hard fork signaling bit\" in the nVersion of the\n>>> block.\n>>> >> > b) Either limiting non-SegWit transactions in some way to fix the\n>>> n**2\n>>> >> > sighash and FindAndDelete runtime and memory usage issues or fix\n>>> them by\n>>> >> > utilizing the new sighash type which many wallets and projects have\n>>> >> > already implemented for SegWit in the spending of non-SegWit\n>>> outputs.\n>>> >> > c) Your really should have replay protection in any HF. The clever\n>>> fix\n>>> >> > from\n>>> >> > Spoonnet for poor scaling of optionally allowing non-SegWit outputs\n>>> to\n>>> >> > be spent with SegWit's sighash provides this all in one go.\n>>> >> > d) You may wish to consider the possibility of tweaking the witness\n>>> >> > discount and possibly discounting other parts of the input - SegWit\n>>> went\n>>> >> > a long ways towards making removal of elements from the UTXO set\n>>> cheaper\n>>> >> > than adding them, but didn't quite get there, you should probably\n>>> finish\n>>> >> > that job. This also provides additional tuneable parameters to\n>>> allow you\n>>> >> > to increase the block size while not having a blowup in the\n>>> worst-case\n>>> >> > block size.\n>>> >> > e) Additional commitments at the top of the merkle root - both for\n>>> >> > SegWit transactions and as additional space for merged mining and\n>>> other\n>>> >> > commitments which we may wish to add in the future, this should\n>>> likely\n>>> >> > be implemented an \"additional header\" ala Johnson Lau's Spoonnet\n>>> >> > proposal.\n>>> >> >\n>>> >> > Additionally, I think your parameters here pose very significant\n>>> risk to\n>>> >> > the Bitcoin ecosystem broadly.\n>>> >> >\n>>> >> > a) Activating a hard fork with less than 18/24 months (and even\n>>> then...)\n>>> >> > from a fully-audited and supported release of full node software to\n>>> >> > activation date poses significant risks to many large software\n>>> projects\n>>> >> > and users. I've repeatedly received feedback from various folks\n>>> that a\n>>> >> > year or more is likely required in any hard fork to limit this\n>>> risk, and\n>>> >> > limited pushback on that given the large increase which SegWit\n>>> provides\n>>> >> > itself buying a ton of time.\n>>> >> >\n>>> >> > b) Having a significant discontinuity in block size increase only\n>>> serves\n>>> >> > to confuse and mislead users and businesses, forcing them to rapidly\n>>> >> > adapt to a Bitcoin which changed overnight both by hardforking, and\n>>> by\n>>> >> > fees changing suddenly. Instead, having the hard fork activate\n>>> technical\n>>> >> > changes, and then slowly increasing the block size over the\n>>> following\n>>> >> > several years keeps things nice and continuous and also keeps us\n>>> from\n>>> >> > having to revisit ye old blocksize debate again six months after\n>>> >> > activation.\n>>> >> >\n>>> >> > c) You should likely consider the effect of the many technological\n>>> >> > innovations coming down the pipe in the coming months. Technologies\n>>> like\n>>> >> > Lightning, TumbleBit, and even your own RootStock could\n>>> significantly\n>>> >> > reduce fee pressure as transactions move to much faster and more\n>>> >> > featureful systems.\n>>> >> >\n>>> >> > Commitments to aggressive hard fork parameters now may leave miners\n>>> >> > without much revenue as far out as the next halving (which current\n>>> >> > transaction growth trends are indicating we'd just only barely\n>>> reach 2MB\n>>> >> > of transaction volume, let alone if you consider the effects of\n>>> users\n>>> >> > moving to systems which provide more features for Bitcoin\n>>> transactions).\n>>> >> > This could lead to a precipitous drop in hashrate as miners are no\n>>> >> > longer sufficiently compensated.\n>>> >> >\n>>> >> > Remember that the \"hashpower required to secure bitcoin\" is\n>>> determined\n>>> >> > as a percentage of total Bitcoins transacted on-chain in each\n>>> block, so\n>>> >> > as subsidy goes down, miners need to be paid with fees, not just\n>>> price\n>>> >> > increases. Even if we were OK with hashpower going down compared to\n>>> the\n>>> >> > value it is securing, betting the security of Bitcoin on its price\n>>> >> > rising exponentially to match decreasing subsidy does not strike me\n>>> as a\n>>> >> > particularly inspiring tradeoff.\n>>> >> >\n>>> >> > There aren't many great technical solutions to some of these\n>>> issues, as\n>>> >> > far as I'm aware, but it's something that needs to be incredibly\n>>> >> > carefully considered before betting the continued security of\n>>> Bitcoin on\n>>> >> > exponential on-chain growth, something which we have historically\n>>> never\n>>> >> > seen.\n>>> >> >\n>>> >> > Matt\n>>> >> >\n>>> >> >\n>>> >> > On March 31, 2017 5:09:18 PM EDT, Sergio Demian Lerner via\n>>> bitcoin-dev\n>>> >> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> >> >>Hi everyone,\n>>> >> >>\n>>> >> >>Segwit2Mb is the project to merge into Bitcoin a minimal patch that\n>>> >> >>aims to\n>>> >> >>untangle the current conflict between different political positions\n>>> >> >>regarding segwit activation vs. an increase of the on-chain\n>>> blockchain\n>>> >> >>space through a standard block size increase. It is not a new\n>>> solution,\n>>> >> >>but\n>>> >> >>it should be seen more as a least common denominator.\n>>> >> >>\n>>> >> >>Segwit2Mb combines segwit as it is today in Bitcoin 0.14+ with a 2MB\n>>> >> >>block\n>>> >> >>size hard-fork activated ONLY if segwit activates (95% of miners\n>>> >> >>signaling), but at a fixed future date.\n>>> >> >>\n>>> >> >>The sole objective of this proposal is to re-unite the Bitcoin\n>>> >> >>community\n>>> >> >>and avoid a cryptocurrency split. Segwit2Mb does not aim to be best\n>>> >> >>possible technical solution to solve Bitcoin technical limitations.\n>>> >> >>However, this proposal does not imply a compromise to the future\n>>> >> >>scalability or decentralization of Bitcoin, as a small increase in\n>>> >> >>block\n>>> >> >>size has been proven by several core and non-core developers not to\n>>> >> >>affect\n>>> >> >>Bitcoin value propositions.\n>>> >> >>\n>>> >> >>In the worst case, a 2X block size increase has much lower economic\n>>> >> >>impact\n>>> >> >>than the last bitcoin halving (<10%), which succeeded without\n>>> problem.\n>>> >> >>\n>>> >> >>On the other side, Segwit2Mb primary goal is to be minimalistic: in\n>>> >> >>this\n>>> >> >>patch some choices have been made to reduce the number of lines\n>>> >> >>modified in\n>>> >> >>the current Bitcoin Core state (master branch), instead of\n>>> implementing\n>>> >> >>the\n>>> >> >>most elegant solution. This is because I want to reduce the time it\n>>> >> >>takes\n>>> >> >>for core programmers and reviewers to check the correctness of the\n>>> >> >>code,\n>>> >> >>and to report and correct bugs.\n>>> >> >>\n>>> >> >>The patch was built by forking the master branch of Bitcoin Core,\n>>> >> >>mixing a\n>>> >> >>few lines of code from Jeff Garzik's BIP102,  and defining a second\n>>> >> >>versionbits activation bit (bit 2) for the combined activation.\n>>> >> >>\n>>> >> >>The combined activation of segwit and 2Mb hard-fork nVersion bit is\n>>> 2\n>>> >> >>(DEPLOYMENT_SEGWIT_AND_2MB_BLOCKS).\n>>> >> >>\n>>> >> >>This means that segwit can still be activated without the 2MB\n>>> hard-fork\n>>> >> >>by\n>>> >> >>signaling bit 1 in nVersion  (DEPLOYMENT_SEGWIT).\n>>> >> >>\n>>> >> >>The tentative lock-in and hard-fork dates are the following:\n>>> >> >>\n>>> >> >>Bit 2 signaling StartTime = 1493424000; // April 29th, 2017\n>>> >> >>\n>>> >> >>Bit 2 signaling Timeout = 1503964800; // August 29th, 2017\n>>> >> >>\n>>> >> >>HardForkTime = 1513209600; // Thu, 14 Dec 2017 00:00:00 GMT\n>>> >> >>\n>>> >> >>\n>>> >> >>The hard-fork is conditional to 95% of the hashing power has\n>>> approved\n>>> >> >>the\n>>> >> >>segwit2mb soft-fork and the segwit soft-fork has been activated\n>>> (which\n>>> >> >>should occur 2016 blocks after its lock-in time)\n>>> >> >>\n>>> >> >>For more information on how soft-forks are signaled and activated,\n>>> see\n>>> >> >>https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki\n>>> >> >>\n>>> >> >>This means that segwit would be activated before 2Mb: this is\n>>> >> >>inevitable,\n>>> >> >>as versionbits have been designed to have fixed activation periods\n>>> and\n>>> >> >>thresholds for all bits. Making segwit and 2Mb fork activate\n>>> together\n>>> >> >>at a\n>>> >> >>delayed date would have required a major re-write of this code,\n>>> which\n>>> >> >>would\n>>> >> >>contradict the premise of creating a minimalistic patch. However,\n>>> once\n>>> >> >>segwit is activated, the hard-fork is unavoidable.\n>>> >> >>\n>>> >> >>Although I have coded a first version of the segwit2mb patch (which\n>>> >> >>modifies 120 lines of code, and adds 220 lines of testing code), I\n>>> >> >>would\n>>> >> >>prefer to wait to publish the source code until more comments have\n>>> been\n>>> >> >>received from the community.\n>>> >> >>\n>>> >> >>To prevent worsening block verification time because of the O(N^2)\n>>> >> >>hashing\n>>> >> >>problem, the simple restriction that transactions cannot be larger\n>>> than\n>>> >> >>1Mb\n>>> >> >>has been kept. Therefore the worse-case of block verification time\n>>> has\n>>> >> >>only\n>>> >> >>doubled.\n>>> >> >>\n>>> >> >>Regarding the hard-fork activation date, I want to give enough time\n>>> to\n>>> >> >>all\n>>> >> >>active economic nodes to upgrade. As of Fri Mar 31 2017,\n>>> >> >>https://bitnodes.21.co/nodes/ reports that 6332 out of 6955 nodes\n>>> (91%)\n>>> >> >>have upgraded to post 0.12 versions. Upgrade to post 0.12 versions\n>>> can\n>>> >> >>be\n>>> >> >>used to identify economic active nodes, because in the 0.12 release\n>>> >> >>dynamic\n>>> >> >>fees were introduced, and currently no Bitcoin automatic payment\n>>> system\n>>> >> >>can\n>>> >> >>operate without automatic discovery of the current fee rate. A\n>>> pre-0.12\n>>> >> >>would require constant manual intervention.\n>>> >> >>Therefore I conclude that no more than 91% of the network nodes\n>>> >> >>reported by\n>>> >> >>bitnodes are active economic nodes.\n>>> >> >>\n>>> >> >>As Bitcoin Core 0.12 was released on February 2016, the time for\n>>> this\n>>> >> >>91%\n>>> >> >>to upgrade has been around one year (under a moderate pressure of\n>>> >> >>operational problems with unconfirmed transactions).\n>>> >> >>Therefore we can expect a similar or lower time to upgrade for a\n>>> >> >>hard-fork,\n>>> >> >>after developers have discussed and approved the patch, and it has\n>>> been\n>>> >> >>reviewed and merged and 95% of the hashing power has signaled for it\n>>> >> >>(the\n>>> >> >>pressure not to upgrade being a complete halt of the operations).\n>>> >> >>However I\n>>> >> >>suggest that we discuss the hard-fork date and delay it if there is\n>>> a\n>>> >> >>real\n>>> >> >>need to.\n>>> >> >>\n>>> >> >>Currently time works against the Bitcoin community, and so is\n>>> delaying\n>>> >> >>a\n>>> >> >>compromise solution. Most of the community agree that halting the\n>>> >> >>innovation for several years is a very bad option.\n>>> >> >>\n>>> >> >>After the comments collected by the community, a BIP will be written\n>>> >> >>describing the resulting proposal details.\n>>> >> >>\n>>> >> >>If segwit2mb locks-in, before hard-fork occurs all bitcoin nodes\n>>> should\n>>> >> >>be\n>>> >> >>updated to a Segwit2Mb enabled node to prevent them to be\n>>> forked-away\n>>> >> >>in a\n>>> >> >>chain with almost no hashing-power.\n>>> >> >>\n>>> >> >>The proof of concept patch was made for Bitcoin Core but should be\n>>> >> >>easily\n>>> >> >>ported to other Bitcoin protocol implementations that already\n>>> support\n>>> >> >>versionbits. Lightweight (SPV) wallets should not be affected as\n>>> they\n>>> >> >>generally do not check the block size.\n>>> >> >>\n>>> >> >>I personally want to see the Lightning Network in action this year,\n>>> use\n>>> >> >>the\n>>> >> >>non-malleability features in segwit, see the community discussing\n>>> other\n>>> >> >>exciting soft-forks in the scaling roadmap, Schnorr sigs,\n>>> drivechains\n>>> >> >>and\n>>> >> >>MAST.\n>>> >> >>\n>>> >> >>I want to see miners, developers and industry side-by-side pushing\n>>> >> >>Bitcoin\n>>> >> >>forward, to increase the value of Bitcoin and prevent high\n>>> transaction\n>>> >> >>fees\n>>> >> >>to put out of business use-cases that could have high positive\n>>> social\n>>> >> >>impact.\n>>> >> >>\n>>> >> >>I believe in the strength of a unified Bitcoin community. If you're\n>>> a\n>>> >> >>developer, please give your opinion, suggest changes, audit it, and\n>>> >> >>take a\n>>> >> >>stand with me to unlock the current Bitcoin deadlock.\n>>> >> >>\n>>> >> >>Contributions to the segwit2mb project are welcomed and awaited. The\n>>> >> >>only\n>>> >> >>limitation is to stick to the principle that the patch should be as\n>>> >> >>simple\n>>> >> >>to audit as possible. As an example, I wouldn't feel confident if\n>>> the\n>>> >> >>patch\n>>> >> >>modified more than ~150 lines of code.\n>>> >> >>\n>>> >> >>Improvements unrelated to a 2 Mb increase or segwit, as beneficial\n>>> as\n>>> >> >>it\n>>> >> >>may be to Bitcoin, should not be part of segwit2Mb.\n>>> >> >>\n>>> >> >>This proposal should not prevent other consensus proposals to be\n>>> >> >>simultaneously merged: segwit2mb is a last resort solution in case\n>>> we\n>>> >> >>can\n>>> >> >>not reach consensus on anything better.\n>>> >> >>\n>>> >> >>Again, the proposal is only a starting point: community feedback is\n>>> >> >>expected and welcomed.\n>>> >> >>\n>>> >> >>Regards,\n>>> >> >>Sergio Demian Lerner\n>>> >> > _______________________________________________\n>>> >> > bitcoin-dev mailing list\n>>> >> > bitcoin-dev at lists.linuxfoundation.org\n>>> >> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>> >\n>>> >\n>>> >\n>>> > _______________________________________________\n>>> > bitcoin-dev mailing list\n>>> > bitcoin-dev at lists.linuxfoundation.org\n>>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>> >\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170602/4ae7e0c6/attachment-0001.html>"
            },
            {
                "author": "Oliver Petruzel",
                "date": "2017-06-03T02:03:47",
                "message_text_only": ">>>Take a quick look at the COOP proposal...it gets us to 4mb blocks in 4\nyears....gradually, no massive fee swings.<<<\n\nHow is that captured in the COOP BIP? I can see Luke's 2MB cap referenced\nin the BIP, but I don't see anything in the text that would indicate a\ngradual increase of any sort.\n\nAs someone who has previously written a BIP draft to accomplish a gradual\nincrease with SegWit, I'd be very interested in seeing what approach\nthey've chosen.\n\nOllie\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170602/6b040040/attachment.html>"
            },
            {
                "author": "Oliver Petruzel",
                "date": "2017-06-03T21:05:23",
                "message_text_only": ">>2.1MB capacity in August via segwit, with 4MB weight, and 4.2MB capacity\nin December with 8MB<<\n\nI'm not sure how many people to not of the draft BIP I submitted to the\nlist in early April. It was essentially a combination of Gavin's BIP 109,\nAdam's 2-4-8 idea, and something I added to SegWit that I call \"Discount\nGoverning.\"\n\nIt basically takes the idea of gradual increases one step farther: a\ngradual increase of both the Total weight and SegWit discount rate over a\nperiod of X years (a schedule of Flag Day + X blocks increases).\n\nWould this be something that some in the dev community might consider\nif/when SegWit is combined with a block increase?\n\nOriginal draft here:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/\n2017-April/013984.html\n\nOllie\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170603/e570a003/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Segwit2Mb - combined soft/hard fork - Request For Comments",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Sergio Demian Lerner",
                "R E Broadley",
                "Erik Aronesty",
                "Oliver Petruzel"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 73846
        }
    },
    {
        "title": "[bitcoin-dev] Hypothetical 2 MB hardfork to follow BIP148",
        "thread_messages": [
            {
                "author": "Jared Lee Richardson",
                "date": "2017-06-02T19:40:36",
                "message_text_only": "> Maybe there's some hole in Jorge's logic and scrapping blockmaxsize has quadratic hashing risks, and maybe James' 10KB is too ambitious; but even if so, a simple 1MB tx size limit would clearly do the trick.  The broader point is that quadratic hashing is not a compelling reason to keep blockmaxsize post-HF: does someone have a better one?\n\nI think this is exactly the right direction to head.  There are\narguments to be made for various maximum sizes... Maybe the limit\ncould be set to 1mb initially, and at a distant future block\nheight(years?) automatically drop to 500kb or 100kb?  That would give\nanyone with existing systems or pre-signed transactions several years\nto adjust to the change.  Notification could (?possibly?) be done with\na non-default parameter that must be changed to continue to use 100kb\n- <1mb transactions, so no one running modern software could claim\nthey were not informed when that future date hits.\n\nI don't see any real advantages to continuing to support transactions\nlarger than 100kb excepting the need to update legacy use cases /\nalready signed transactions.\n\nOn Tue, May 30, 2017 at 8:07 PM, Jacob Eliosoff via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Maybe there's some hole in Jorge's logic and scrapping blockmaxsize has\n> quadratic hashing risks, and maybe James' 10KB is too ambitious; but even if\n> so, a simple 1MB tx size limit would clearly do the trick.  The broader\n> point is that quadratic hashing is not a compelling reason to keep\n> blockmaxsize post-HF: does someone have a better one?\n>\n>\n>\n> On May 30, 2017 9:46 PM, \"Jean-Paul Kogelman via bitcoin-dev\"\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> That would invalidate any pre-signed transactions that are currently out\n>> there. You can't just change the rules out from under people.\n>>\n>>\n>> On May 30, 2017, at 4:50 PM, James MacWhyte via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>\n>>>\n>>>  The 1MB classic block size prevents quadratic hashing\n>>> problems from being any worse than they are today.\n>>>\n>>\n>> Add a transaction-size limit of, say, 10kb and the quadratic hashing\n>> problem is a non-issue. Donezo.\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Nathan Cook",
                "date": "2017-06-12T16:27:14",
                "message_text_only": "The problem with >100kb transactions isn't that there are a lot of\nalready-signed transactions out there, or even that there are good use\ncases for them, but that such transactions and use cases could exist, and\nthere is no way of disallowing them without possibly costing someone a lot\nof money. Slowly reducing the limit doesn't really solve this problem.\n\nI propose to make them hard enough to confirm that no-one will use them\nwithout a very good reason. Just require that any block containing an\noutsized transaction be mined at a greater difficulty \u2013 quadratically\ngreater. Such a block is more expensive *for the block's miner*, not just\nfor the other miners, or for other nodes. Anyone who really, really needs\nto use a 400kb transaction can pay a miner to mine it.\n\nQuadratic hashing isn't risky when it is inherently limited by a\ncorresponding reduction in the rate at which the \"bad\" blocks can be\ngenerated. That said, there's nothing I can see which is actually good\nabout large, expensive to validate transactions, and so >1MB transactions\nshould remain invalid, as they are today.\n\n\nNathan Cook\n\nOn 2 June 2017 at 22:40, Jared Lee Richardson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> > Maybe there's some hole in Jorge's logic and scrapping blockmaxsize has\n> quadratic hashing risks, and maybe James' 10KB is too ambitious; but even\n> if so, a simple 1MB tx size limit would clearly do the trick.  The broader\n> point is that quadratic hashing is not a compelling reason to keep\n> blockmaxsize post-HF: does someone have a better one?\n>\n> I think this is exactly the right direction to head.  There are\n> arguments to be made for various maximum sizes... Maybe the limit\n> could be set to 1mb initially, and at a distant future block\n> height(years?) automatically drop to 500kb or 100kb?  That would give\n> anyone with existing systems or pre-signed transactions several years\n> to adjust to the change.  Notification could (?possibly?) be done with\n> a non-default parameter that must be changed to continue to use 100kb\n> - <1mb transactions, so no one running modern software could claim\n> they were not informed when that future date hits.\n>\n> I don't see any real advantages to continuing to support transactions\n> larger than 100kb excepting the need to update legacy use cases /\n> already signed transactions.\n>\n> On Tue, May 30, 2017 at 8:07 PM, Jacob Eliosoff via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Maybe there's some hole in Jorge's logic and scrapping blockmaxsize has\n> > quadratic hashing risks, and maybe James' 10KB is too ambitious; but\n> even if\n> > so, a simple 1MB tx size limit would clearly do the trick.  The broader\n> > point is that quadratic hashing is not a compelling reason to keep\n> > blockmaxsize post-HF: does someone have a better one?\n> >\n> >\n> >\n> > On May 30, 2017 9:46 PM, \"Jean-Paul Kogelman via bitcoin-dev\"\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >> That would invalidate any pre-signed transactions that are currently out\n> >> there. You can't just change the rules out from under people.\n> >>\n> >>\n> >> On May 30, 2017, at 4:50 PM, James MacWhyte via bitcoin-dev\n> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >>\n> >>>\n> >>>  The 1MB classic block size prevents quadratic hashing\n> >>> problems from being any worse than they are today.\n> >>>\n> >>\n> >> Add a transaction-size limit of, say, 10kb and the quadratic hashing\n> >> problem is a non-issue. Donezo.\n> >>\n> >> _______________________________________________\n> >> bitcoin-dev mailing list\n> >> bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >>\n> >>\n> >> _______________________________________________\n> >> bitcoin-dev mailing list\n> >> bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >>\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170612/4a6e1479/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Hypothetical 2 MB hardfork to follow BIP148",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Nathan Cook",
                "Jared Lee Richardson"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 7270
        }
    },
    {
        "title": "[bitcoin-dev] Compatibility-Oriented Omnibus Proposal",
        "thread_messages": [
            {
                "author": "Jared Lee Richardson",
                "date": "2017-06-02T20:13:58",
                "message_text_only": "> The above decision may quickly become very controversial. I don't think\nit's what most users had/have in mind when they discuss a \"2MB+SegWit\"\nsolution.\n> With the current 1MB+SegWit, testing has shown us that normal usage\nresults in ~2 or 2.1MB blocks.\n> I think most users will expect a linear increase when Base Size is\nincreased to 2000000 bytes and Total Weight is increased to 8000000 bytes.\nWith normal usage, the expected results would then be ~4 or 4.2MB blocks.\n\nI think Calvin is correct here, the secondary limit is not what people\nanticipated with the segwit + 2mb agreement.  It would not kill the\nagreement for me, but it might for others.\n\nWhat is the justification for the secondary limitation?  Is there hard data\nto back this?  The quadratic hashing problem is frequently brought up, but\nthat is trivially handled with a hard 1mb transaction limit and on the\nother thread there's talk/suggestions of an even lower limit.  Are there\nany other reasons for this limitation, and is there data to justify those\nconcerns?  If not, this should be left out in favor of a transaction size\nlimit.  If so, hard data would go a long way to dealing with the conversy\nthis will create.\n\n\n> Shaolin Fry\u2019s \u201cMandatory activation of segwit deployment\u201d[3] is included\nto:\n> > cause the existing \"segwit\" deployment to activate without needing to\nrelease a new deployment.\n> Both of the aforementioned activation options (\u201cfast-activation\u201d and\n\u201cflag-day activation\u201d) serve to prevent unnecessary delays in the network\nupgrade process, addressing a common criticism of the Scaling Agreement and\nproviding an opportunity for cooperation and unity instead.\n\nThis is likely to cause more controversy and unfortunately has the tightest\ntimelines.  Unlike the SW2mb working group's timelines, a hard-coded\ntimeline couldn't be changed with mutual agreement from the signers.\n\nGiven the chance of bit1 accidental activation without clear signaling for\nthe required bit4 2mb hard fork, I don't think the fair or acceptable\ntradeoff is for flag day to require bit1 signaling only.  *Flag day should\nbe modified to accept either bit1 signaling, OR to accept bit4 signaling IF\nthe 80% threshold hasn't been met.*  In this way the anti-segwit working\ngroup members are not in danger of an activated bit1 segwit without also\ngetting their portion of the compromise, the bit4 signaled HF.  If flag day\naccepts bit4 OR bit1, AND bit4 requires both bit1 and bit4 once 80% is\nreached, flag day is nearly guaranteed to get its stated desire within 1750\nblocks (bit4 accepted until block 800; bit4+bit1 signaled afterwards until\n95%), but without the chance that the WG signers won't get what they agreed\nto.\n\n*That seems like a minor compromise for BIP148.  Thoughts on this change to\nflag day / BIP148?*\n\nIn addition, the aggressiveness of the timelines and the complexity of the\nmerged COOP proposal may require the BIP148 flag day to be pushed back.  I\nwould think some day in September is achievable, but I'm not sure if August\n1st will be.\n\nJared\n\n\nOn Tue, May 30, 2017 at 3:20 PM, CalvinRechner via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> In principle, there is complete flexibility when it comes to the specific\n> consensus details of the hard fork. One common suggestion has been to phase\n> in a gradual blocksize increase beyond the initial 2MB cap included in\n> Luke-Jr's proposal (a la BIP103); this would certainly be a welcome\n> inclusion in the Omnibus Proposal, provided that is what we want. The\n> reasoning behind incorporating Luke-Jr's 2MB limit and discount-rebalancing\n> was to satisfy the conditions of the Scaling Agreement while ensuring\n> maximum safety, minimum code discrepancies, and minimum controversy among\n> the community; these priorities seem imperative, considering the extreme\n> timeline constraints we are working under and the goals of the proposal. To\n> put it more simply, the intent of the proposal was to serve as a template\n> for the minimum viable fork that can achieve true consensus. A gradual\n> increase to a larger size cap, especially if it were reasonably\n> conservative, would be wholly in accordance with the Omnibus Proposal if\n> that is what it takes to achieve the cooperation between community,\n> industry, and developers in this critical moment of Bitcoin's history.\n>\n>\n> The purpose of the Omnibus Proposal is singlefold: to achieve the goals of\n> the Consensus 2017 Scaling Agreement in the most maximally-compatible way.\n> We can minimize disruption and loss potential all around by solving these\n> problems in a compatibility-oriented manner. It is possible to fulfill both\n> the letter and the spirit of the Scaling Agreement, to the complete\n> satisfaction of all involved, while preventing chain-split risks in the\n> meantime.\n>\n>\n> There is no justification for incompatibility with existing deployment\n> approaches, when there is the possibility to work together towards our\n> mutual goals instead. The most rational option is to join forces and avoid\n> any chain-split potential for as long as possible. Under the Omnibus\n> Proposal, once SegWit is activated, the terms of the hard fork are locked\n> in automatically, set to activate 6 months later. The proposal guarantees\n> that a successful SegWit activation is followed by a hard fork. Beyond\n> enforcing the hard fork rules beginning at block height HardForkHeight, the\n> Omnibus Proposal simply represents compatibility with the existing\n> SegWit-activation deployment approaches.\n>\n>\n> By committing to this proposal, we can ensure unity, at least for now.\n> There do not appear to be any arguments to the contrary. Why squander this\n> opportunity for consensus and harmony? We can leverage the momentum of\n> several disparate movements, and perhaps enjoy some much-needed social\n> solidarity. In a way, everyone can get what they want, and through\n> cooperation, we avoid the risk of a costly fracture.\n>\n>\n> The Segwit2x Team has begun work on an implementation of the Consensus\n> Scaling Agreement, their operational timeline including the publication of\n> a BIP on June 16, 2017.[1] I call upon the developers and maintainers of\n> this initiative to consider and honor the Omnibus Proposal, extended or\n> modified as needed, as the guiding approach to your development effort.\n> Almost every component of the code exists, in some form or fashion, in the\n> various constituent proposals' reference implementations, most of which\n> have already undergone a significant degree of peer review.\n>\n>\n> We cannot afford to delay, nor to reimplement; the launch timeline is\n> aggressively optimistic as it is. The quickest and safest approach to\n> achieving the goals set forth at Consensus 2017 is to leverage the existing\n> tools and proposals for the job. We can solve our problems properly,\n> cooperatively.\n>\n>\n> I humbly ask that Jeff Garzik, Barry Silbert, Mike Belshe, and all of the\n> other wonderful, intelligent collaborators on this project step forward and\n> support the cooperative, compatibility-oriented approach of the Omnibus\n> Proposal.\n>\n>\n> This is the best way to maximize value for everyone. We have a real\n> opportunity to collaborate and work together on the same team. The Omnibus\n> Proposal, designed in exact accordance with a powerful industry agreement\n> and incorporating the feedback and suggestions provided from within both\n> the developer community and the community-at-large, stands the best chance\n> of uniting everyone under a common front.\n>\n>\n> Please, for the love of Bitcoin, let us do our best to cooperate.\n>\n>\n>\n> [1] https://imgur.com/a/a2oPs\n>\n>\n> Sent with ProtonMail <https://protonmail.com> Secure Email.\n>\n> -------- Original Message --------\n> Subject: Re: [bitcoin-dev] Compatibility-Oriented Omnibus Proposal\n> Local Time: May 29, 2017 6:49 PM\n> UTC Time: May 29, 2017 11:49 PM\n> From: opetruzel at gmail.com\n> To: CalvinRechner <calvinrechner at protonmail.com>\n> Bitcoin Dev <bitcoin-dev at lists.linuxfoundation.org>\n>\n> >>if the community wishes to adopt (by unanimous consensus) a 2 MB block\n> size hardfork, this is probably the best way to do it right now... Legacy\n> Bitcoin transactions are given the witness discount, and a block size limit\n> of 2 MB is imposed.<<\n>\n>\n> The above decision may quickly become very controversial. I don't think it's\n> what most users had/have in mind when they discuss a \"2MB+SegWit\" solution.\n>\n> With the current 1MB+SegWit, testing has shown us that normal usage\n> results in ~2 or 2.1MB blocks.\n>\n> I think most users will expect a linear increase when Base Size is\n> increased to 2000000 bytes and Total Weight is increased to 8000000 bytes.\n> With normal usage, the expected results would then be ~4 or 4.2MB blocks.\n>\n> Am I missing something here, or does Luke's suggested 2MB cap completely\n> nullify that expected linear increase? If so, why? What's the logic behind\n> this decision?\n>\n> I'd love to be armed with a good answer should my colleagues ask me the\n> same obvious question, so thank you ahead of time!\n>\n> Respectfully,\n> Oliver Petruzel\n>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170602/abfac0e2/attachment-0001.html>"
            },
            {
                "author": "Sergio Demian Lerner",
                "date": "2017-06-02T21:57:12",
                "message_text_only": "I don't see LukeJr 2MB limit to be compatible with the NY agreement. For\nthe rest, seems fine for me.\n\n\n\nOn Fri, Jun 2, 2017 at 4:13 PM, Jared Lee Richardson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> > The above decision may quickly become very controversial. I don't think\n> it's what most users had/have in mind when they discuss a \"2MB+SegWit\"\n> solution.\n> > With the current 1MB+SegWit, testing has shown us that normal usage\n> results in ~2 or 2.1MB blocks.\n> > I think most users will expect a linear increase when Base Size is\n> increased to 2000000 bytes and Total Weight is increased to 8000000 bytes.\n> With normal usage, the expected results would then be ~4 or 4.2MB blocks.\n>\n> I think Calvin is correct here, the secondary limit is not what people\n> anticipated with the segwit + 2mb agreement.  It would not kill the\n> agreement for me, but it might for others.\n>\n> What is the justification for the secondary limitation?  Is there hard\n> data to back this?  The quadratic hashing problem is frequently brought up,\n> but that is trivially handled with a hard 1mb transaction limit and on the\n> other thread there's talk/suggestions of an even lower limit.  Are there\n> any other reasons for this limitation, and is there data to justify those\n> concerns?  If not, this should be left out in favor of a transaction size\n> limit.  If so, hard data would go a long way to dealing with the conversy\n> this will create.\n>\n>\n> > Shaolin Fry\u2019s \u201cMandatory activation of segwit deployment\u201d[3] is included\n> to:\n> > > cause the existing \"segwit\" deployment to activate without needing to\n> release a new deployment.\n> > Both of the aforementioned activation options (\u201cfast-activation\u201d and\n> \u201cflag-day activation\u201d) serve to prevent unnecessary delays in the network\n> upgrade process, addressing a common criticism of the Scaling Agreement and\n> providing an opportunity for cooperation and unity instead.\n>\n> This is likely to cause more controversy and unfortunately has the\n> tightest timelines.  Unlike the SW2mb working group's timelines, a\n> hard-coded timeline couldn't be changed with mutual agreement from the\n> signers.\n>\n> Given the chance of bit1 accidental activation without clear signaling for\n> the required bit4 2mb hard fork, I don't think the fair or acceptable\n> tradeoff is for flag day to require bit1 signaling only.  *Flag day\n> should be modified to accept either bit1 signaling, OR to accept bit4\n> signaling IF the 80% threshold hasn't been met.*  In this way the\n> anti-segwit working group members are not in danger of an activated bit1\n> segwit without also getting their portion of the compromise, the bit4\n> signaled HF.  If flag day accepts bit4 OR bit1, AND bit4 requires both bit1\n> and bit4 once 80% is reached, flag day is nearly guaranteed to get its\n> stated desire within 1750 blocks (bit4 accepted until block 800; bit4+bit1\n> signaled afterwards until 95%), but without the chance that the WG signers\n> won't get what they agreed to.\n>\n> *That seems like a minor compromise for BIP148.  Thoughts on this change\n> to flag day / BIP148?*\n>\n> In addition, the aggressiveness of the timelines and the complexity of the\n> merged COOP proposal may require the BIP148 flag day to be pushed back.  I\n> would think some day in September is achievable, but I'm not sure if August\n> 1st will be.\n>\n> Jared\n>\n>\n> On Tue, May 30, 2017 at 3:20 PM, CalvinRechner via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> In principle, there is complete flexibility when it comes to the specific\n>> consensus details of the hard fork. One common suggestion has been to phase\n>> in a gradual blocksize increase beyond the initial 2MB cap included in\n>> Luke-Jr's proposal (a la BIP103); this would certainly be a welcome\n>> inclusion in the Omnibus Proposal, provided that is what we want. The\n>> reasoning behind incorporating Luke-Jr's 2MB limit and discount-rebalancing\n>> was to satisfy the conditions of the Scaling Agreement while ensuring\n>> maximum safety, minimum code discrepancies, and minimum controversy among\n>> the community; these priorities seem imperative, considering the extreme\n>> timeline constraints we are working under and the goals of the proposal. To\n>> put it more simply, the intent of the proposal was to serve as a template\n>> for the minimum viable fork that can achieve true consensus. A gradual\n>> increase to a larger size cap, especially if it were reasonably\n>> conservative, would be wholly in accordance with the Omnibus Proposal if\n>> that is what it takes to achieve the cooperation between community,\n>> industry, and developers in this critical moment of Bitcoin's history.\n>>\n>>\n>> The purpose of the Omnibus Proposal is singlefold: to achieve the goals\n>> of the Consensus 2017 Scaling Agreement in the most maximally-compatible\n>> way. We can minimize disruption and loss potential all around by solving\n>> these problems in a compatibility-oriented manner. It is possible to\n>> fulfill both the letter and the spirit of the Scaling Agreement, to the\n>> complete satisfaction of all involved, while preventing chain-split risks\n>> in the meantime.\n>>\n>>\n>> There is no justification for incompatibility with existing deployment\n>> approaches, when there is the possibility to work together towards our\n>> mutual goals instead. The most rational option is to join forces and avoid\n>> any chain-split potential for as long as possible. Under the Omnibus\n>> Proposal, once SegWit is activated, the terms of the hard fork are locked\n>> in automatically, set to activate 6 months later. The proposal guarantees\n>> that a successful SegWit activation is followed by a hard fork. Beyond\n>> enforcing the hard fork rules beginning at block height HardForkHeight, the\n>> Omnibus Proposal simply represents compatibility with the existing\n>> SegWit-activation deployment approaches.\n>>\n>>\n>> By committing to this proposal, we can ensure unity, at least for now.\n>> There do not appear to be any arguments to the contrary. Why squander this\n>> opportunity for consensus and harmony? We can leverage the momentum of\n>> several disparate movements, and perhaps enjoy some much-needed social\n>> solidarity. In a way, everyone can get what they want, and through\n>> cooperation, we avoid the risk of a costly fracture.\n>>\n>>\n>> The Segwit2x Team has begun work on an implementation of the Consensus\n>> Scaling Agreement, their operational timeline including the publication of\n>> a BIP on June 16, 2017.[1] I call upon the developers and maintainers of\n>> this initiative to consider and honor the Omnibus Proposal, extended or\n>> modified as needed, as the guiding approach to your development effort.\n>> Almost every component of the code exists, in some form or fashion, in the\n>> various constituent proposals' reference implementations, most of which\n>> have already undergone a significant degree of peer review.\n>>\n>>\n>> We cannot afford to delay, nor to reimplement; the launch timeline is\n>> aggressively optimistic as it is. The quickest and safest approach to\n>> achieving the goals set forth at Consensus 2017 is to leverage the existing\n>> tools and proposals for the job. We can solve our problems properly,\n>> cooperatively.\n>>\n>>\n>> I humbly ask that Jeff Garzik, Barry Silbert, Mike Belshe, and all of the\n>> other wonderful, intelligent collaborators on this project step forward and\n>> support the cooperative, compatibility-oriented approach of the Omnibus\n>> Proposal.\n>>\n>>\n>> This is the best way to maximize value for everyone. We have a real\n>> opportunity to collaborate and work together on the same team. The Omnibus\n>> Proposal, designed in exact accordance with a powerful industry agreement\n>> and incorporating the feedback and suggestions provided from within both\n>> the developer community and the community-at-large, stands the best chance\n>> of uniting everyone under a common front.\n>>\n>>\n>> Please, for the love of Bitcoin, let us do our best to cooperate.\n>>\n>>\n>>\n>> [1] https://imgur.com/a/a2oPs\n>>\n>>\n>> Sent with ProtonMail <https://protonmail.com> Secure Email.\n>>\n>> -------- Original Message --------\n>> Subject: Re: [bitcoin-dev] Compatibility-Oriented Omnibus Proposal\n>> Local Time: May 29, 2017 6:49 PM\n>> UTC Time: May 29, 2017 11:49 PM\n>> From: opetruzel at gmail.com\n>> To: CalvinRechner <calvinrechner at protonmail.com>\n>> Bitcoin Dev <bitcoin-dev at lists.linuxfoundation.org>\n>>\n>> >>if the community wishes to adopt (by unanimous consensus) a 2 MB block\n>> size hardfork, this is probably the best way to do it right now... Legacy\n>> Bitcoin transactions are given the witness discount, and a block size limit\n>> of 2 MB is imposed.<<\n>>\n>>\n>> The above decision may quickly become very controversial. I don't think it's\n>> what most users had/have in mind when they discuss a \"2MB+SegWit\" solution.\n>>\n>> With the current 1MB+SegWit, testing has shown us that normal usage\n>> results in ~2 or 2.1MB blocks.\n>>\n>> I think most users will expect a linear increase when Base Size is\n>> increased to 2000000 bytes and Total Weight is increased to 8000000 bytes.\n>> With normal usage, the expected results would then be ~4 or 4.2MB blocks.\n>>\n>> Am I missing something here, or does Luke's suggested 2MB cap completely\n>> nullify that expected linear increase? If so, why? What's the logic behind\n>> this decision?\n>>\n>> I'd love to be armed with a good answer should my colleagues ask me the\n>> same obvious question, so thank you ahead of time!\n>>\n>> Respectfully,\n>> Oliver Petruzel\n>>\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170602/6c0a891b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Compatibility-Oriented Omnibus Proposal",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Sergio Demian Lerner",
                "Jared Lee Richardson"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 19596
        }
    },
    {
        "title": "[bitcoin-dev] SegWit activation proposal with 2MB Hard Fork by next Block Halving on 2020",
        "thread_messages": [
            {
                "author": "Upal Chakraborty",
                "date": "2017-06-05T20:30:23",
                "message_text_only": "*Proposal*: Verify whether 50% Tx mined from SegWit activation block to\nblock 630000 are SegWit Tx. If yes, increase legacy max block size to 2MB\nand SegWit max block size to 8MB.\n\n*Implementation*: This proposal either needs to be implemented in next\nrelease of Bitcoin Core or require SegWit activation period restart while\nit is implemented & released.\n\n*Rationale*: This proposal minimizes the chance of a chain split, while\nsticking to the original bitcoin scaling roadmap, i.e.\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/011865.html\n\n\nThanks & Regards,\nUpal Chakraborty\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/545af76b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "SegWit activation proposal with 2MB Hard Fork by next Block Halving on 2020",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Upal Chakraborty"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 785
        }
    },
    {
        "title": "[bitcoin-dev] Replay attacks make BIP148 and BIP149 untennable",
        "thread_messages": [
            {
                "author": "Tao Effect",
                "date": "2017-06-06T20:43:25",
                "message_text_only": "This is just me putting in my formal objection to BIP148 and BIP149 based on my experience with the ETH/ETC hard fork and involvement in that drama.\n\nFirst, it's important to note that ETC/ETH HF is a very different situation from BIP148 and all other soft-forks. To those on this mailing list, the reasons should be self-evident (one results in two incompatible chains, the other doesn't).\n\nHowever, replay attacks are common to both possibilities (i.e. when BIP148 has <51% hash power).\n\nI believe the severity of replay attacks is going unvoiced and is not understood within the bitcoin community because of their lack of experience with them.\n\nI further believe that replay attacks are the #1 issue with BIP148, BIP149, etc., superseding wipeout attacks in severity.\n\nThese are not baseless beliefs, they're born out of experience and I think anyone will reach the same conclusion upon study.\n\nIn a nutshell, replay attacks mean that all talk of there being potentially \"two coins\" as a result of BIP148 is basically nonsense.\n\nReplay attacks effectively eliminate that possibility.\n\nWhen users go to \"sell their legacy coins\", they've just sold their 148 coins, and vice versa.\n\nBoth of the coin-splitting techniques given so far by the proponents BIP148 are also untenable:\n\n- Double-spending to self with nLockTime txns is insanely complicated, risky, not guaranteed to work, extremely time consuming, and would likely result in a massive increase in backlogged transactions and increased fees.\n\n- Mixing with 148 coinbase txns destroys fungibility.\n\nWithout a coin, there is no real threat from BIP148. Without that threat, there is no point to BIP148, and the miners know this.\n\nThese and other concerns are outlined and explained in more detail in this conversation I had yesterday with John Light:\n\nhttps://www.youtube.com/watch?v=33rL3-p8cPw <https://www.youtube.com/watch?v=33rL3-p8cPw>\n\nCheers,\nGreg Slepak\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/862fdff6/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/862fdff6/attachment.sig>"
            },
            {
                "author": "Tao Effect",
                "date": "2017-06-06T22:39:28",
                "message_text_only": "This is just me putting in my formal objection to BIP148 and BIP149 based on my experience with the ETH/ETC hard fork and involvement in that drama.\n\nFirst, it's important to note that ETC/ETH HF is a very different situation from BIP148 and all other soft-forks. To those on this mailing list, the reasons should be self-evident (one results in two incompatible chains, the other doesn't).\n\nHowever, replay attacks are common to both possibilities (i.e. when BIP148 has <51% hash power).\n\nI believe the severity of replay attacks is going unvoiced and is not understood within the bitcoin community because of their lack of experience with them.\n\nI further believe that replay attacks are the #1 issue with BIP148, BIP149, etc., superseding wipeout attacks in severity.\n\nThese are not baseless beliefs, they're born out of experience and I think anyone will reach the same conclusion upon study.\n\nIn a nutshell, replay attacks mean that all talk of there being potentially \"two coins\" as a result of BIP148 is basically nonsense.\n\nReplay attacks effectively eliminate that possibility.\n\nWhen users go to \"sell their legacy coins\", they've just sold their 148 coins, and vice versa.\n\nBoth of the coin-splitting techniques given so far by the proponents BIP148 are also untenable:\n\n- Double-spending to self with nLockTime txns is insanely complicated, risky, not guaranteed to work, extremely time consuming, and would likely result in a massive increase in backlogged transactions and increased fees.\n\n- Mixing with 148 coinbase txns destroys fungibility.\n\nWithout a coin, there is no real threat from BIP148. Without that threat, there is no point to BIP148, and the miners know this.\n\nThese and other concerns are outlined and explained in more detail in this conversation I had yesterday with John Light:\n\nhttps://www.youtube.com/watch?v=33rL3-p8cPw <https://www.youtube.com/watch?v=33rL3-p8cPw>\n\nCheers,\nGreg Slepak\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/7b754c78/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/7b754c78/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-06-06T23:02:06",
                "message_text_only": "On Tue, Jun 6, 2017 at 10:39 PM, Tao Effect via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I believe the severity of replay attacks is going unvoiced and is not\n> understood within the bitcoin community because of their lack of experience\n> with them.\n\nPlease don't insult our community-- the issues with replay were\npointed out by us to Ethereum in advance and were cited specifically\nin prior hardfork discussions long before Ethereum started editing\ntheir ledger for the economic benefit of its centralized\nadministrators.\n\nThe lack of extensive discussion on these issues you're seeing is\nrather symptomatic of engineers that take stability seriously not\ntaking BIP148 seriously; not symptomatic of people not knowing about\nthem. The same concerns also applies to all these HF proposals (which\nfor some reason you don't mention), arguably even stronger.  The same\nbasic pattern exists: There are people that just don't care about the\ntechnical issues who have made up their minds, and so you don't see\ntechnical discussion.  Those people who do see the issues already\ncalled out the proposals as being ill-advised.   Replay isn't even the\nlargest of the technical issues (network partitioning, for example, is\na much larger one).\n\nBIP149 is arguably something of another matter in particular because\nit has a time-frame that allows dealing with replay and other issues--\nand particularly because it has a time-frame that can allow for the\navoidance of a meaningful fork at all."
            },
            {
                "author": "Tao Effect",
                "date": "2017-06-06T23:12:26",
                "message_text_only": "Hey Greg,\n\nIt wasn't my intention to insult anyone (a bit defensive?).\n\nMaybe this is yet another example of a recurring criticism of Core: that core doesn't community these issues very well to journalists / reports / media / community outside of this list.\n\nBecause outside of this list it's been all about those 148 coins, and almost zero mention of replay attacks.\n\n> BIP149 is arguably something of another matter in particular because\n> it has a time-frame that allows dealing with replay and other issues--\n> and particularly because it has a time-frame that can allow for the\n> avoidance of a meaningful fork at all.\n\nAre there other, more reasonable / feasible ways of addressing replay attacks in Bitcoin / BIP149 scenario?\n\nCheers,\nGreg\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n> On Jun 6, 2017, at 4:02 PM, Gregory Maxwell <greg at xiph.org <mailto:greg at xiph.org>> wrote:\n> \n> On Tue, Jun 6, 2017 at 10:39 PM, Tao Effect via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>> I believe the severity of replay attacks is going unvoiced and is not\n>> understood within the bitcoin community because of their lack of experience\n>> with them.\n> \n> Please don't insult our community-- the issues with replay were\n> pointed out by us to Ethereum in advance and were cited specifically\n> in prior hardfork discussions long before Ethereum started editing\n> their ledger for the economic benefit of its centralized\n> administrators.\n> \n> The lack of extensive discussion on these issues you're seeing is\n> rather symptomatic of engineers that take stability seriously not\n> taking BIP148 seriously; not symptomatic of people not knowing about\n> them. The same concerns also applies to all these HF proposals (which\n> for some reason you don't mention), arguably even stronger.  The same\n> basic pattern exists: There are people that just don't care about the\n> technical issues who have made up their minds, and so you don't see\n> technical discussion.  Those people who do see the issues already\n> called out the proposals as being ill-advised.   Replay isn't even the\n> largest of the technical issues (network partitioning, for example, is\n> a much larger one).\n> \n> BIP149 is arguably something of another matter in particular because\n> it has a time-frame that allows dealing with replay and other issues--\n> and particularly because it has a time-frame that can allow for the\n> avoidance of a meaningful fork at all.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/6748ec9e/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/6748ec9e/attachment-0001.sig>"
            },
            {
                "author": "Nick Johnson",
                "date": "2017-06-07T13:25:35",
                "message_text_only": "On Wed, Jun 7, 2017 at 12:02 AM Gregory Maxwell via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Tue, Jun 6, 2017 at 10:39 PM, Tao Effect via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > I believe the severity of replay attacks is going unvoiced and is not\n> > understood within the bitcoin community because of their lack of\n> experience\n> > with them.\n>\n> Please don't insult our community-- the issues with replay were\n> pointed out by us to Ethereum in advance and were cited specifically\n> in prior hardfork discussions long before Ethereum started editing\n> their ledger for the economic benefit of its centralized\n> administrators.\n\n\nPlease don't spread misinformation. Whatever you think of the DAO hard\nfork, it's a simple fact that the Ethereum ledger was not edited.\n\n-Nick Johnson\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170607/2c04c534/attachment.html>"
            },
            {
                "author": "Tao Effect",
                "date": "2017-06-07T16:27:03",
                "message_text_only": "Nick,\n\n> Please don't spread misinformation. Whatever you think of the DAO hard fork, it's a simple fact that the Ethereum ledger was not edited.\n\nThis sort of email is unhelpful to this conversation, and it certainly doesn't help with the perception that Ethereum is nothing but a bunch of hypocritical Bankers 2.0.\n\nEveryone knows you didn't edit Ethereum Classic, but the the hard fork, which was re-branded as Ethereum, was edited.\n\n- Greg\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n> On Jun 7, 2017, at 6:25 AM, Nick Johnson <nick at ethereum.org <mailto:nick at ethereum.org>> wrote:\n> \n> On Wed, Jun 7, 2017 at 12:02 AM Gregory Maxwell via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> On Tue, Jun 6, 2017 at 10:39 PM, Tao Effect via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> > I believe the severity of replay attacks is going unvoiced and is not\n> > understood within the bitcoin community because of their lack of experience\n> > with them.\n> \n> Please don't insult our community-- the issues with replay were\n> pointed out by us to Ethereum in advance and were cited specifically\n> in prior hardfork discussions long before Ethereum started editing\n> their ledger for the economic benefit of its centralized\n> administrators.\n> \n> Please don't spread misinformation. Whatever you think of the DAO hard fork, it's a simple fact that the Ethereum ledger was not edited.\n> \n> -Nick Johnson\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170607/d0012334/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170607/d0012334/attachment.sig>"
            },
            {
                "author": "Nick Johnson",
                "date": "2017-06-07T17:35:17",
                "message_text_only": "On Wed, Jun 7, 2017 at 5:27 PM Tao Effect <contact at taoeffect.com> wrote:\n\n> Nick,\n>\n> Please don't spread misinformation. Whatever you think of the DAO hard\n> fork, it's a simple fact that the Ethereum ledger was not edited.\n>\n>\n> This sort of email is unhelpful to this conversation, and it certainly\n> doesn't help with the perception that Ethereum is nothing but a bunch of\n> hypocritical Bankers 2.0.\n>\n\n\n>\n> Everyone knows you didn't edit Ethereum Classic, but the the hard fork,\n> which was re-branded as Ethereum, was edited.\n>\n\nThat's not what I was suggesting. My point is that the ledger was never\nedited. An 'irregular state change' was added at a specific block height,\nbut the ledger remains inviolate.\n\nI'm sure I don't have to explain the difference between the ledger and the\nstate to you, or why it's significant that the ledger wasn't (and can't be,\npractically) modified.\n\n-Nick\n\n\n> - Greg\n>\n> --\n> Please do not email me anything that you are not comfortable also sharing with\n> the NSA.\n>\n> On Jun 7, 2017, at 6:25 AM, Nick Johnson <nick at ethereum.org> wrote:\n>\n> On Wed, Jun 7, 2017 at 12:02 AM Gregory Maxwell via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> On Tue, Jun 6, 2017 at 10:39 PM, Tao Effect via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > I believe the severity of replay attacks is going unvoiced and is not\n>> > understood within the bitcoin community because of their lack of\n>> experience\n>> > with them.\n>>\n>> Please don't insult our community-- the issues with replay were\n>> pointed out by us to Ethereum in advance and were cited specifically\n>> in prior hardfork discussions long before Ethereum started editing\n>> their ledger for the economic benefit of its centralized\n>> administrators.\n>\n>\n> Please don't spread misinformation. Whatever you think of the DAO hard\n> fork, it's a simple fact that the Ethereum ledger was not edited.\n>\n> -Nick Johnson\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170607/480f3051/attachment.html>"
            },
            {
                "author": "Conner Fromknecht",
                "date": "2017-06-08T05:44:40",
                "message_text_only": "I don't normally post here, but I'm sorry, if you don't see those two as\nequal, then I think you have misunderstood the *entire* value proposition\nof cryptocurrencies.\n\nThe state of any cryptocurrency should entirely (and only) be defined by\nits ledger. If the state of the system can be altered outside of the rules\ngoverning its ledger, then the system isn't secure. It doesn't matter\nwhether the people making those changes are the ones that are leading the\nproject or not. An \"irregular state change\" is a fancy term for a bailout.\n\nI'm sure I speak for more than myself in saying that an \"irregular state\nchange\" is equivalent to modifying the underlying ledger. Let's not let\nsemantics keep us from recognizing what actually took place.\n\n-Conner\n\nOn Wed, Jun 7, 2017 at 14:14 Nick Johnson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Wed, Jun 7, 2017 at 5:27 PM Tao Effect <contact at taoeffect.com> wrote:\n>\n>> Nick,\n>>\n>> Please don't spread misinformation. Whatever you think of the DAO hard\n>> fork, it's a simple fact that the Ethereum ledger was not edited.\n>>\n>>\n>> This sort of email is unhelpful to this conversation, and it certainly\n>> doesn't help with the perception that Ethereum is nothing but a bunch of\n>> hypocritical Bankers 2.0.\n>>\n>\n>\n>>\n>> Everyone knows you didn't edit Ethereum Classic, but the the hard fork,\n>> which was re-branded as Ethereum, was edited.\n>>\n>\n> That's not what I was suggesting. My point is that the ledger was never\n> edited. An 'irregular state change' was added at a specific block height,\n> but the ledger remains inviolate.\n>\n> I'm sure I don't have to explain the difference between the ledger and the\n> state to you, or why it's significant that the ledger wasn't (and can't be,\n> practically) modified.\n>\n> -Nick\n>\n>\n>> - Greg\n>>\n>> --\n>> Please do not email me anything that you are not comfortable also sharing with\n>> the NSA.\n>>\n>> On Jun 7, 2017, at 6:25 AM, Nick Johnson <nick at ethereum.org> wrote:\n>>\n>> On Wed, Jun 7, 2017 at 12:02 AM Gregory Maxwell via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> On Tue, Jun 6, 2017 at 10:39 PM, Tao Effect via bitcoin-dev\n>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> > I believe the severity of replay attacks is going unvoiced and is not\n>>> > understood within the bitcoin community because of their lack of\n>>> experience\n>>> > with them.\n>>>\n>>> Please don't insult our community-- the issues with replay were\n>>> pointed out by us to Ethereum in advance and were cited specifically\n>>> in prior hardfork discussions long before Ethereum started editing\n>>> their ledger for the economic benefit of its centralized\n>>> administrators.\n>>\n>>\n>> Please don't spread misinformation. Whatever you think of the DAO hard\n>> fork, it's a simple fact that the Ethereum ledger was not edited.\n>>\n>> -Nick Johnson\n>>\n>>\n>> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170608/4a1844b0/attachment-0001.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2017-06-06T23:08:11",
                "message_text_only": "On Tuesday 06 June 2017 10:39:28 PM Tao Effect via bitcoin-dev wrote:\n> I believe the severity of replay attacks is going unvoiced and is not\n> understood within the bitcoin community because of their lack of\n> experience with them.\n\nReplay is a solved problem. It can be improved on and made simpler, but at \nthis point, replay only occurs when the sender is either negligent or \nintending it.\n\n> Both of the coin-splitting techniques given so far by the proponents BIP148\n> are also untenable:\n> \n> - Double-spending to self with nLockTime txns is insanely complicated,\n> risky, not guaranteed to work, extremely time consuming, and would likely\n> result in a massive increase in backlogged transactions and increased\n> fees.\n\nThis is nothing but unfounded FUD. It is very simple to implement and \nguaranteed to work eventually. It may be time consuming, but that is the only \ntruth here. The only risk is that of a long reorg, the same as double spend \nattacks.\n\n> - Mixing with 148 coinbase txns destroys fungibility.\n\nWhat kind of \"fungibility\" does this FUD claim it destroys? Destroying cross-\nchain fungibility is the very *intent* of replay protection. And it does not \ndestroy same-chain fungibility any more than any other miner spending.\n\n> Without a coin, there is no real threat from BIP148.\n\nLack of replay protection does not mean there is no coin. Replay protection is \nequally a concern for the main (BIP148) chain and any legacy chains malicious \nminers might choose to split off. And none of this changes the fact that such \nminers will be unable to sell their legacycoins at Bitcoin market prices, \nbecause whether other transactions are replayed or not, *their* coins won't be \nvalid on the main chain.\n\nLuke"
            },
            {
                "author": "Tao Effect",
                "date": "2017-06-06T23:19:39",
                "message_text_only": "> Replay is a solved problem.\n\nPoint to this solved problem?\n\nYour \"solution\" here is not a solution:\n\nhttps://www.reddit.com/r/Bitcoin/comments/6f1urd/i_think_its_time_we_have_an_educated_discussion/diey21t/?context=3 <https://www.reddit.com/r/Bitcoin/comments/6f1urd/i_think_its_time_we_have_an_educated_discussion/diey21t/?context=3>\n\n> This is nothing but unfounded FUD. It is very simple to implement and\n> guaranteed to work eventually. It may be time consuming, but that is the only\n> truth here. The only risk is that of a long reorg, the same as double spend\n> attacks.\n\nLet's assume you invented a simple way to double-spend txns to self (which you haven't, fyi), then that is an issue in of itself as the point of bitcoin is to *prevent* double-spending to self.\n\nThere would need to be much more time for the community to discuss the implications of wallets have a \"double-spend to self\" button in them.\n\n> What kind of \"fungibility\" does this FUD claim it destroys? Destroying cross-\n> chain fungibility is the very *intent* of replay protection. And it does not\n> destroy same-chain fungibility any more than any other miner spending.\n\nYes it does destroy same-chain fungibility, as discussed on twitter [1], you're making miner coins special on both chains.\n\n> Lack of replay protection does not mean there is no coin.\n\nIt effectively does. If people want to proceed blindly, ignoring replay, they're welcome to read about the consequences [2].\n\n[1] https://twitter.com/taoeffect/status/872226556571131905 <https://twitter.com/taoeffect/status/872226556571131905>\n[2] http://gist.github.com/taoeffect/c910ebb16d9f6d248e9f1f3c6e10b1b8 <http://gist.github.com/taoeffect/c910ebb16d9f6d248e9f1f3c6e10b1b8>\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n> On Jun 6, 2017, at 4:08 PM, Luke Dashjr <luke at dashjr.org <mailto:luke at dashjr.org>> wrote:\n> \n> On Tuesday 06 June 2017 10:39:28 PM Tao Effect via bitcoin-dev wrote:\n>> I believe the severity of replay attacks is going unvoiced and is not\n>> understood within the bitcoin community because of their lack of\n>> experience with them.\n> \n> Replay is a solved problem. It can be improved on and made simpler, but at\n> this point, replay only occurs when the sender is either negligent or\n> intending it.\n> \n>> Both of the coin-splitting techniques given so far by the proponents BIP148\n>> are also untenable:\n>> \n>> - Double-spending to self with nLockTime txns is insanely complicated,\n>> risky, not guaranteed to work, extremely time consuming, and would likely\n>> result in a massive increase in backlogged transactions and increased\n>> fees.\n> \n> This is nothing but unfounded FUD. It is very simple to implement and\n> guaranteed to work eventually. It may be time consuming, but that is the only\n> truth here. The only risk is that of a long reorg, the same as double spend\n> attacks.\n> \n>> - Mixing with 148 coinbase txns destroys fungibility.\n> \n> What kind of \"fungibility\" does this FUD claim it destroys? Destroying cross-\n> chain fungibility is the very *intent* of replay protection. And it does not\n> destroy same-chain fungibility any more than any other miner spending.\n> \n>> Without a coin, there is no real threat from BIP148.\n> \n> Lack of replay protection does not mean there is no coin. Replay protection is\n> equally a concern for the main (BIP148) chain and any legacy chains malicious\n> miners might choose to split off. And none of this changes the fact that such\n> miners will be unable to sell their legacycoins at Bitcoin market prices,\n> because whether other transactions are replayed or not, *their* coins won't be\n> valid on the main chain.\n> \n> Luke\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/1e3823f1/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/1e3823f1/attachment.sig>"
            },
            {
                "author": "Anthony Towns",
                "date": "2017-06-06T23:20:15",
                "message_text_only": "On Tue, Jun 06, 2017 at 03:39:28PM -0700, Tao Effect via bitcoin-dev wrote:\n> - Mixing with 148 coinbase txns destroys fungibility.\n\nCoinJoin works as a method of both improving fungibility and mixing with\ncoinbase transactions.\n\nYou probably don't need to do anything clever to split a coin though:\nif you send a transaction with a standard fee it will get confirmed\nin a normal time on the higher hashrate chain, but won't confirm as\nquickly on the lower hashrate chain (precisely because transactions are\nvalid on both chains, but blocks are found more slowly with the lower\nhashrate). When it's confirmed on one chain, but not on the other, you\ncan then \"double-spend\" on the lower hashrate chain with a higher fee,\nto end up with different coins on both chains.\n\n(also, no double-n in untenable)\n\nCheers,\naj"
            },
            {
                "author": "Tao Effect",
                "date": "2017-06-06T23:27:33",
                "message_text_only": "> CoinJoin works as a method of both improving fungibility and mixing with\n> coinbase transactions.\n\nMy understanding is that the two situations are quite different.\n\nUnlike mixing to coin-split, CoinJoin doesn't create a high demand exclusively for coinbase transactions.\n\nHowever, of the proposed methods, coin-mixing seems the better option, because it might be reasonably easy (I don't know) for exchanges to obtain 148 coinbase coins, and mix their coins with them, extending the coin-splitting capability beyond just miner coins and then using that to split incoming coins.\n\nThat seems like the most reasonable approach I've heard so far. Whether exchanges would be willing to do that is a separate question.\n\n> When it's confirmed on one chain, but not on the other, you\n> can then \"double-spend\" on the lower hashrate chain with a higher fee,\n> to end up with different coins on both chains.\n\nThis method is time consuming and not guaranteed to work. CPFP can be used by an attacker to get your original txn into the 148 chain.\n\n> (also, no double-n in untenable)\n\nWhy thank you aj, you're so good at spelling. :-)\n\nCheers,\nGreg\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n> On Jun 6, 2017, at 4:20 PM, Anthony Towns via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n> On Tue, Jun 06, 2017 at 03:39:28PM -0700, Tao Effect via bitcoin-dev wrote:\n>> - Mixing with 148 coinbase txns destroys fungibility.\n> \n> CoinJoin works as a method of both improving fungibility and mixing with\n> coinbase transactions.\n> \n> You probably don't need to do anything clever to split a coin though:\n> if you send a transaction with a standard fee it will get confirmed\n> in a normal time on the higher hashrate chain, but won't confirm as\n> quickly on the lower hashrate chain (precisely because transactions are\n> valid on both chains, but blocks are found more slowly with the lower\n> hashrate). When it's confirmed on one chain, but not on the other, you\n> can then \"double-spend\" on the lower hashrate chain with a higher fee,\n> to end up with different coins on both chains.\n> \n> (also, no double-n in untenable)\n> \n> Cheers,\n> aj\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/ddaf726e/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/ddaf726e/attachment-0001.sig>"
            },
            {
                "author": "Tao Effect",
                "date": "2017-06-06T23:31:17",
                "message_text_only": "> CPFP can be used by an attacker to get your original txn into the 148 chain.\n\n*err, my bad that's unlikely to happen, if I remember correctly CPFP can only be done by the person you're sending the coins to. Coin-mixing seems the better option of the two, but shouldn't the BIP148 folks wait until it's clear that will be supported by exchanges?\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n> On Jun 6, 2017, at 4:27 PM, Tao Effect <contact at taoeffect.com <mailto:contact at taoeffect.com>> wrote:\n> \n>> CoinJoin works as a method of both improving fungibility and mixing with\n>> coinbase transactions.\n> \n> My understanding is that the two situations are quite different.\n> \n> Unlike mixing to coin-split, CoinJoin doesn't create a high demand exclusively for coinbase transactions.\n> \n> However, of the proposed methods, coin-mixing seems the better option, because it might be reasonably easy (I don't know) for exchanges to obtain 148 coinbase coins, and mix their coins with them, extending the coin-splitting capability beyond just miner coins and then using that to split incoming coins.\n> \n> That seems like the most reasonable approach I've heard so far. Whether exchanges would be willing to do that is a separate question.\n> \n>> When it's confirmed on one chain, but not on the other, you\n>> can then \"double-spend\" on the lower hashrate chain with a higher fee,\n>> to end up with different coins on both chains.\n> \n> This method is time consuming and not guaranteed to work. CPFP can be used by an attacker to get your original txn into the 148 chain.\n> \n>> (also, no double-n in untenable)\n> \n> Why thank you aj, you're so good at spelling. :-)\n> \n> Cheers,\n> Greg\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/35a6f6dc/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/35a6f6dc/attachment.sig>"
            },
            {
                "author": "Kekcoin",
                "date": "2017-06-06T23:59:19",
                "message_text_only": "You keep referring to 148 coinbase coins, what is the rationale behind this? Why would you prefer using 148 coinbases over legacy coinbases for this purpose?\n\nSent with [ProtonMail](https://protonmail.com) Secure Email.\n\n-------- Original Message --------\nSubject: Re: [bitcoin-dev] Replay attacks make BIP148 and BIP149 untennable\nLocal Time: June 7, 2017 2:27 AM\nUTC Time: June 6, 2017 11:27 PM\nFrom: bitcoin-dev at lists.linuxfoundation.org\nTo: Anthony Towns <aj at erisian.com.au>\nbitcoin-dev at lists.linuxfoundation.org\n\nCoinJoin works as a method of both improving fungibility and mixing with\ncoinbase transactions.\n\nMy understanding is that the two situations are quite different.\n\nUnlike mixing to coin-split, CoinJoin doesn't create a high demand exclusively for coinbase transactions.\n\nHowever, of the proposed methods, coin-mixing seems the better option, because it might be reasonably easy (I don't know) for exchanges to obtain 148 coinbase coins, and mix their coins with them, extending the coin-splitting capability beyond just miner coins and then using that to split incoming coins.\n\nThat seems like the most reasonable approach I've heard so far. Whether exchanges would be willing to do that is a separate question.\n\nWhen it's confirmed on one chain, but not on the other, you\ncan then \"double-spend\" on the lower hashrate chain with a higher fee,\nto end up with different coins on both chains.\n\nThis method is time consuming and not guaranteed to work. CPFP can be used by an attacker to get your original txn into the 148 chain.\n\n(also, no double-n in untenable)\n\nWhy thank you aj, you're so good at spelling. :-)\n\nCheers,\nGreg\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\nOn Jun 6, 2017, at 4:20 PM, Anthony Towns via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\nOn Tue, Jun 06, 2017 at 03:39:28PM -0700, Tao Effect via bitcoin-dev wrote:- Mixing with 148 coinbase txns destroys fungibility.\n\nCoinJoin works as a method of both improving fungibility and mixing with\ncoinbase transactions.\n\nYou probably don't need to do anything clever to split a coin though:\nif you send a transaction with a standard fee it will get confirmed\nin a normal time on the higher hashrate chain, but won't confirm as\nquickly on the lower hashrate chain (precisely because transactions are\nvalid on both chains, but blocks are found more slowly with the lower\nhashrate). When it's confirmed on one chain, but not on the other, you\ncan then \"double-spend\" on the lower hashrate chain with a higher fee,\nto end up with different coins on both chains.\n\n(also, no double-n in untenable)\n\nCheers,\naj\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/6b251954/attachment-0001.html>"
            },
            {
                "author": "Tao Effect",
                "date": "2017-06-07T00:04:29",
                "message_text_only": "> You keep referring to 148 coinbase coins, what is the rationale behind this? Why would you prefer using 148 coinbases over legacy coinbases for this purpose?\n\nOK, maybe \"post-UASF coinbase coins\" is a better term? I just wanted to make it clear that this refers to coins that come from blocks generated after the UASF is activated.\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n> On Jun 6, 2017, at 4:59 PM, Kekcoin <kekcoin at protonmail.com <mailto:kekcoin at protonmail.com>> wrote:\n> \n> You keep referring to 148 coinbase coins, what is the rationale behind this? Why would you prefer using 148 coinbases over legacy coinbases for this purpose?\n> \n> \n> Sent with ProtonMail <https://protonmail.com/> Secure Email.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/e69fcaa4/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/e69fcaa4/attachment-0001.sig>"
            },
            {
                "author": "Kekcoin",
                "date": "2017-06-07T00:19:18",
                "message_text_only": "Hmm, that's not the difference I was talking about. I was referring to the fact that using \"post-chainsplit coinbases from the non-148 chain\" to unilaterally (ie. can be done without action on the 148-chain) taint coins is more secure in extreme-adverserial cases such as secret-mining reorg attacks (as unfeasibly expensive they may be); the only large-scale (>100 block) reorganization the non-148 chain faces should be a resolution of the chainsplit and therefore render the replay threat moot.\n\nSent with [ProtonMail](https://protonmail.com) Secure Email.\n\n-------- Original Message --------\nSubject: Re: [bitcoin-dev] Replay attacks make BIP148 and BIP149 untennable\nLocal Time: June 7, 2017 3:04 AM\nUTC Time: June 7, 2017 12:04 AM\nFrom: contact at taoeffect.com\nTo: Kekcoin <kekcoin at protonmail.com>\nAnthony Towns <aj at erisian.com.au>, bitcoin-dev at lists.linuxfoundation.org <bitcoin-dev at lists.linuxfoundation.org>\n\nYou keep referring to 148 coinbase coins, what is the rationale behind this? Why would you prefer using 148 coinbases over legacy coinbases for this purpose?\n\nOK, maybe \"post-UASF coinbase coins\" is a better term? I just wanted to make it clear that this refers to coins that come from blocks generated after the UASF is activated.\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\nOn Jun 6, 2017, at 4:59 PM, Kekcoin <kekcoin at protonmail.com> wrote:\n\nYou keep referring to 148 coinbase coins, what is the rationale behind this? Why would you prefer using 148 coinbases over legacy coinbases for this purpose?\n\nSent with [ProtonMail](https://protonmail.com/) Secure Email.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/2a247527/attachment.html>"
            },
            {
                "author": "Tao Effect",
                "date": "2017-06-07T00:26:50",
                "message_text_only": "I don't know what you mean by \"render the replay threat moot.\"\n\nIf you don't have replay protection, replay is always a threat. A very serious one.\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n> On Jun 6, 2017, at 5:19 PM, Kekcoin <kekcoin at protonmail.com <mailto:kekcoin at protonmail.com>> wrote:\n> \n> Hmm, that's not the difference I was talking about. I was referring to the fact that using \"post-chainsplit coinbases from the non-148 chain\" to unilaterally (ie. can be done without action on the 148-chain) taint coins is more secure in extreme-adverserial cases such as secret-mining reorg attacks (as unfeasibly expensive they may be); the only large-scale (>100 block) reorganization the non-148 chain faces should be a resolution of the chainsplit and therefore render the replay threat moot.\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/b2d1e1e6/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/b2d1e1e6/attachment-0001.sig>"
            },
            {
                "author": "Kekcoin",
                "date": "2017-06-07T00:29:08",
                "message_text_only": "Please read my email more carefully; the replay threat would be moot because there would be no alternative chain to replay the TX on, as the non-148 chain would have been reorganized into oblivion.\n\nSent with [ProtonMail](https://protonmail.com) Secure Email.\n\n-------- Original Message --------\nSubject: Re: [bitcoin-dev] Replay attacks make BIP148 and BIP149 untennable\nLocal Time: June 7, 2017 3:26 AM\nUTC Time: June 7, 2017 12:26 AM\nFrom: contact at taoeffect.com\nTo: Kekcoin <kekcoin at protonmail.com>\nAnthony Towns <aj at erisian.com.au>, bitcoin-dev at lists.linuxfoundation.org <bitcoin-dev at lists.linuxfoundation.org>\n\nI don't know what you mean by \"render the replay threat moot.\"\n\nIf you don't have replay protection, replay is always a threat. A very serious one.\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\nOn Jun 6, 2017, at 5:19 PM, Kekcoin <kekcoin at protonmail.com> wrote:\n\nHmm, that's not the difference I was talking about. I was referring to the fact that using \"post-chainsplit coinbases from the non-148 chain\" to unilaterally (ie. can be done without action on the 148-chain) taint coins is more secure in extreme-adverserial cases such as secret-mining reorg attacks (as unfeasibly expensive they may be); the only large-scale (>100 block) reorganization the non-148 chain faces should be a resolution of the chainsplit and therefore render the replay threat moot.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/c710f263/attachment-0001.html>"
            },
            {
                "author": "Tao Effect",
                "date": "2017-06-07T00:38:02",
                "message_text_only": "> Please read my email more carefully; the replay threat would be moot because there would be no alternative chain to replay the TX on,\n\nIn order to *get to that point*, you need >51%.\n\nNot only that, but, if you started out with <51%, then you need >>51% in order to *catch up* and replace the large number of blocks added to the legacy chain in the mean time.\n\nSo, since >51% is _required_ for BIP148 to succeed (and likely >>51%)... you might as well do as SegWit did originally, or lower the threshold to 80% or something (as BIP91 does).\n\nWithout replay protection at the outset, BIP148, as far as I can tell, isn't a threat to miners.\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n> On Jun 6, 2017, at 5:29 PM, Kekcoin <kekcoin at protonmail.com <mailto:kekcoin at protonmail.com>> wrote:\n> \n> Please read my email more carefully; the replay threat would be moot because there would be no alternative chain to replay the TX on, as the non-148 chain would have been reorganized into oblivion.\n> \n> \n> Sent with ProtonMail <https://protonmail.com/> Secure Email.\n> \n>> -------- Original Message --------\n>> Subject: Re: [bitcoin-dev] Replay attacks make BIP148 and BIP149 untennable\n>> Local Time: June 7, 2017 3:26 AM\n>> UTC Time: June 7, 2017 12:26 AM\n>> From: contact at taoeffect.com <mailto:contact at taoeffect.com>\n>> To: Kekcoin <kekcoin at protonmail.com <mailto:kekcoin at protonmail.com>>\n>> Anthony Towns <aj at erisian.com.au <mailto:aj at erisian.com.au>>, bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org> <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>\n>> \n>> I don't know what you mean by \"render the replay threat moot.\"\n>> \n>> If you don't have replay protection, replay is always a threat. A very serious one.\n>> \n>> --\n>> Please do not email me anything that you are not comfortable also sharing with the NSA.\n>> \n>>> On Jun 6, 2017, at 5:19 PM, Kekcoin <kekcoin at protonmail.com <mailto:kekcoin at protonmail.com>> wrote:\n>>> \n>>> Hmm, that's not the difference I was talking about. I was referring to the fact that using \"post-chainsplit coinbases from the non-148 chain\" to unilaterally (ie. can be done without action on the 148-chain) taint coins is more secure in extreme-adverserial cases such as secret-mining reorg attacks (as unfeasibly expensive they may be); the only large-scale (>100 block) reorganization the non-148 chain faces should be a resolution of the chainsplit and therefore render the replay threat moot.\n>>> \n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/99784c2b/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/99784c2b/attachment-0001.sig>"
            },
            {
                "author": "Kekcoin",
                "date": "2017-06-07T00:46:23",
                "message_text_only": "I was merely describing that the only failure mode of using \"post-split coinbases from the legacy chain\" as seedcoins for cointainting purposes would be a resolution of the coinsplit, thereby rendering the cointainting redundant, therefore this would be an entirely safe approach to cointainting, as the only way coins could become untainted (and therefore subject to the threat of replay attacks) would coincide with a disappearance of the situation that gave rise to such replay attacks in the first place. This should sufficiently answer your concerns regarding lack of replay protection in case of medium-to-long-term chainsplits in general. If you fail to grok, please read again until you don't.\n\nSent with [ProtonMail](https://protonmail.com) Secure Email.\n\n-------- Original Message --------\nSubject: Re: [bitcoin-dev] Replay attacks make BIP148 and BIP149 untennable\nLocal Time: June 7, 2017 3:38 AM\nUTC Time: June 7, 2017 12:38 AM\nFrom: contact at taoeffect.com\nTo: Kekcoin <kekcoin at protonmail.com>\nAnthony Towns <aj at erisian.com.au>, bitcoin-dev at lists.linuxfoundation.org <bitcoin-dev at lists.linuxfoundation.org>\n\nPlease read my email more carefully; the replay threat would be moot because there would be no alternative chain to replay the TX on,\n\nIn order to *get to that point*, you need >51%.\n\nNot only that, but, if you started out with <51%, then you need >>51% in order to *catch up* and replace the large number of blocks added to the legacy chain in the mean time.\n\nSo, since >51% is _required_ for BIP148 to succeed (and likely >>51%)... you might as well do as SegWit did originally, or lower the threshold to 80% or something (as BIP91 does).\n\nWithout replay protection at the outset, BIP148, as far as I can tell, isn't a threat to miners.\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\nOn Jun 6, 2017, at 5:29 PM, Kekcoin <kekcoin at protonmail.com> wrote:\n\nPlease read my email more carefully; the replay threat would be moot because there would be no alternative chain to replay the TX on, as the non-148 chain would have been reorganized into oblivion.\n\nSent with [ProtonMail](https://protonmail.com/) Secure Email.\n\n-------- Original Message --------\nSubject: Re: [bitcoin-dev] Replay attacks make BIP148 and BIP149 untennable\nLocal Time: June 7, 2017 3:26 AM\nUTC Time: June 7, 2017 12:26 AM\nFrom: contact at taoeffect.com\nTo: Kekcoin <kekcoin at protonmail.com>\nAnthony Towns <aj at erisian.com.au>, bitcoin-dev at lists.linuxfoundation.org <bitcoin-dev at lists.linuxfoundation.org>\n\nI don't know what you mean by \"render the replay threat moot.\"\n\nIf you don't have replay protection, replay is always a threat. A very serious one.\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\nOn Jun 6, 2017, at 5:19 PM, Kekcoin <kekcoin at protonmail.com> wrote:\n\nHmm, that's not the difference I was talking about. I was referring to the fact that using \"post-chainsplit coinbases from the non-148 chain\" to unilaterally (ie. can be done without action on the 148-chain) taint coins is more secure in extreme-adverserial cases such as secret-mining reorg attacks (as unfeasibly expensive they may be); the only large-scale (>100 block) reorganization the non-148 chain faces should be a resolution of the chainsplit and therefore render the replay threat moot.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/c5ac4a0c/attachment-0001.html>"
            },
            {
                "author": "Nick Johnson",
                "date": "2017-06-08T06:38:48",
                "message_text_only": "On Thu, Jun 8, 2017 at 6:44 AM Conner Fromknecht <conner at enigma.co> wrote:\n\n> I don't normally post here, but I'm sorry, if you don't see those two as\n> equal, then I think you have misunderstood the *entire* value proposition\n> of cryptocurrencies.\n>\n> The state of any cryptocurrency should entirely (and only) be defined by\n> its ledger. If the state of the system can be altered outside of the rules\n> governing its ledger, then the system isn't secure.\n\n\nThis is true of any blockchain: you can always change the rules with the\nconsent of the participants.\n\n\n> It doesn't matter whether the people making those changes are the ones\n> that are leading the project or not. An \"irregular state change\" is a fancy\n> term for a bailout.\n>\n> I'm sure I speak for more than myself in saying that an \"irregular state\n> change\" is equivalent to modifying the underlying ledger. Let's not let\n> semantics keep us from recognizing what actually took place.\n>\n\nIt's not; modifying the ledger would rewrite history, erasing the record of\nthe original transactions. That's a fundamentally different operation, both\ntechnically and semantically.\n\n\n> -Conner\n>\n> On Wed, Jun 7, 2017 at 14:14 Nick Johnson via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> On Wed, Jun 7, 2017 at 5:27 PM Tao Effect <contact at taoeffect.com> wrote:\n>>\n>>> Nick,\n>>>\n>>> Please don't spread misinformation. Whatever you think of the DAO hard\n>>> fork, it's a simple fact that the Ethereum ledger was not edited.\n>>>\n>>>\n>>> This sort of email is unhelpful to this conversation, and it certainly\n>>> doesn't help with the perception that Ethereum is nothing but a bunch of\n>>> hypocritical Bankers 2.0.\n>>>\n>>\n>>\n>>>\n>>> Everyone knows you didn't edit Ethereum Classic, but the the hard fork,\n>>> which was re-branded as Ethereum, was edited.\n>>>\n>>\n>> That's not what I was suggesting. My point is that the ledger was never\n>> edited. An 'irregular state change' was added at a specific block height,\n>> but the ledger remains inviolate.\n>>\n>> I'm sure I don't have to explain the difference between the ledger and\n>> the state to you, or why it's significant that the ledger wasn't (and can't\n>> be, practically) modified.\n>>\n>> -Nick\n>>\n>>\n>>> - Greg\n>>>\n>>> --\n>>> Please do not email me anything that you are not comfortable also sharing with\n>>> the NSA.\n>>>\n>>> On Jun 7, 2017, at 6:25 AM, Nick Johnson <nick at ethereum.org> wrote:\n>>>\n>>> On Wed, Jun 7, 2017 at 12:02 AM Gregory Maxwell via bitcoin-dev <\n>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>>> On Tue, Jun 6, 2017 at 10:39 PM, Tao Effect via bitcoin-dev\n>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>> > I believe the severity of replay attacks is going unvoiced and is not\n>>>> > understood within the bitcoin community because of their lack of\n>>>> experience\n>>>> > with them.\n>>>>\n>>>> Please don't insult our community-- the issues with replay were\n>>>> pointed out by us to Ethereum in advance and were cited specifically\n>>>> in prior hardfork discussions long before Ethereum started editing\n>>>> their ledger for the economic benefit of its centralized\n>>>> administrators.\n>>>\n>>>\n>>> Please don't spread misinformation. Whatever you think of the DAO hard\n>>> fork, it's a simple fact that the Ethereum ledger was not edited.\n>>>\n>>> -Nick Johnson\n>>>\n>>>\n>>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170608/dae21829/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Replay attacks make BIP148 and BIP149 untennable",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Conner Fromknecht",
                "Anthony Towns",
                "Nick Johnson",
                "Luke Dashjr",
                "Gregory Maxwell",
                "Kekcoin",
                "Tao Effect"
            ],
            "messages_count": 21,
            "total_messages_chars_count": 49303
        }
    },
    {
        "title": "[bitcoin-dev] User Activated Soft Fork Split Protection",
        "thread_messages": [
            {
                "author": "James Hilliard",
                "date": "2017-06-07T00:56:10",
                "message_text_only": "Due to the proposed calendar(https://segwit2x.github.io/) for the\nSegWit2x agreement being too slow to activate SegWit mandatory\nsignalling ahead of BIP148 using BIP91 I would like to propose another\noption that miners can use to prevent a chain split ahead of the Aug\n1st BIP148 activation date.\n\nThe splitprotection soft fork is essentially BIP91 but using BIP8\ninstead of BIP9 with a lower activation threshold and immediate\nmandatory signalling lock-in. This allows for a majority of miners to\nactivate mandatory SegWit signalling and prevent a potential chain\nsplit ahead of BIP148 activation.\n\nThis BIP allows for miners to respond to market forces quickly ahead\nof BIP148 activation by signalling for splitprotection. Any miners\nalready running BIP148 should be encouraged to use splitprotection.\n\n<pre>\n  BIP: splitprotection\n  Layer: Consensus (soft fork)\n  Title: User Activated Soft Fork Split Protection\n  Author: James Hilliard <james.hilliard1 at gmail.com>\n  Comments-Summary: No comments yet.\n  Comments-URI:\n  Status: Draft\n  Type: Standards Track\n  Created: 2017-05-22\n  License: BSD-3-Clause\n           CC0-1.0\n</pre>\n\n==Abstract==\n\nThis document specifies a coordination mechanism for a simple majority\nof miners to prevent a chain split ahead of BIP148 activation.\n\n==Definitions==\n\n\"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\nusing bit 1, between November 15th 2016 and November 15th 2017 to\nactivate BIP141, BIP143 and BIP147.\n\n==Motivation==\n\nThe biggest risk of BIP148 is an extended chain split, this BIP\nprovides a way for a simple majority of miners to eliminate that risk.\n\nThis BIP provides a way for a simple majority of miners to coordinate\nactivation of the existing segwit deployment with less than 95%\nhashpower before BIP148 activation. Due to time constraints unless\nimmediately deployed BIP91 will likely not be able to enforce\nmandatory signalling of segwit before the Aug 1st activation of\nBIP148. This BIP provides a method for rapid miner activation of\nSegWit mandatory signalling ahead of the BIP148 activation date. Since\nthe primary goal of this BIP is to reduce the chance of an extended\nchain split as much as possible we activate using a simple miner\nmajority of 65% over a 504 block interval rather than a higher\npercentage. This BIP also allows miners to signal their intention to\nrun BIP148 in order to prevent a chain split.\n\n==Specification==\n\nWhile this BIP is active, all blocks must set the nVersion header top\n3 bits to 001 together with bit field (1<<1) (according to the\nexisting segwit deployment). Blocks that do not signal as required\nwill be rejected.\n\n==Deployment==\n\nThis BIP will be deployed by \"version bits\" with a 65%(this can be\nadjusted if desired) activation threshold BIP9 with the name\n\"splitprotecion\" and using bit 2.\n\nThis BIP starts immediately and is a BIP8 style soft fork since\nmandatory signalling will start on midnight August 1st 2017 (epoch\ntime 1501545600) regardless of whether or not this BIP has reached its\nown signalling threshold. This BIP will cease to be active when segwit\nis locked-in.\n\n=== Reference implementation ===\n\n<pre>\n// Check if Segregated Witness is Locked In\nbool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\nConsensus::Params& params)\n{\n    LOCK(cs_main);\n    return (VersionBitsState(pindexPrev, params,\nConsensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\nTHRESHOLD_LOCKED_IN);\n}\n\n// SPLITPROTECTION mandatory segwit signalling.\nif ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\nConsensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\nTHRESHOLD_LOCKED_IN &&\n     !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n// Segwit is not locked in\n     !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\nand is not active.\n{\n    bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\nVERSIONBITS_TOP_BITS;\n    bool fSegbit = (pindex->nVersion &\nVersionBitsMask(chainparams.GetConsensus(),\nConsensus::DEPLOYMENT_SEGWIT)) != 0;\n    if (!(fVersionBits && fSegbit)) {\n        return state.DoS(0, error(\"ConnectBlock(): relayed block must\nsignal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n    }\n}\n\n// BIP148 mandatory segwit signalling.\nint64_t nMedianTimePast = pindex->GetMedianTimePast();\nif ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n     (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n     (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n // Segwit is not locked in\n      !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n // and is not active.\n{\n    bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\nVERSIONBITS_TOP_BITS;\n    bool fSegbit = (pindex->nVersion &\nVersionBitsMask(chainparams.GetConsensus(),\nConsensus::DEPLOYMENT_SEGWIT)) != 0;\n    if (!(fVersionBits && fSegbit)) {\n        return state.DoS(0, error(\"ConnectBlock(): relayed block must\nsignal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n    }\n}\n</pre>\n\nhttps://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1\n\n==Backwards Compatibility==\n\nThis deployment is compatible with the existing \"segwit\" bit 1\ndeployment scheduled between midnight November 15th, 2016 and midnight\nNovember 15th, 2017. This deployment is also compatible with the\nexisting BIP148 deployment. This BIP is compatible with BIP91 only if\nBIP91 activates before it and before BIP148. Miners will need to\nupgrade their nodes to support splitprotection otherwise they may\nbuild on top of an invalid block. While this bip is active users\nshould either upgrade to splitprotection or wait for additional\nconfirmations when accepting payments.\n\n==Rationale==\n\nHistorically we have used IsSuperMajority() to activate soft forks\nsuch as BIP66 which has a mandatory signalling requirement for miners\nonce activated, this ensures that miners are aware of new rules being\nenforced. This technique can be leveraged to lower the signalling\nthreshold of a soft fork while it is in the process of being deployed\nin a backwards compatible way. We also use a BIP8 style timeout to\nensure that this BIP is compatible with BIP148 and that BIP148\ncompatible mandatory signalling activates regardless of miner\nsignalling levels.\n\nBy orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\ndeployment, this BIP can cause the existing \"segwit\" deployment to\nactivate without needing to release a new deployment. As we approach\nBIP148 activation it may be desirable for a majority of miners to have\na method that will ensure that there is no chain split.\n\n==References==\n\n*[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html\nMailing list discussion]\n*[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\nP2SH flag day activation]\n*[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n*[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n*[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n*[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n*[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\nVersion 0 Witness Program]]\n*[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element malleability]]\n*[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit deployment]]\n*[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n*[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit benefits]\n\n==Copyright==\n\nThis document is dual licensed as BSD 3-clause, and Creative Commons\nCC0 1.0 Universal."
            },
            {
                "author": "Karl Johan Alm",
                "date": "2017-06-07T01:11:25",
                "message_text_only": "One thing about BIP148 activation that may be affected by this is the\nfact that segwit signalling non-BIP148 miners + BIP148 miners may hold\nmajority hash power and prevent a chain split. With this SF, that will\nno longer be the case, right? Or am I completely confused on the\nsubject?\n\nOn Wed, Jun 7, 2017 at 9:56 AM, James Hilliard via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Due to the proposed calendar(https://segwit2x.github.io/) for the\n> SegWit2x agreement being too slow to activate SegWit mandatory\n> signalling ahead of BIP148 using BIP91 I would like to propose another\n> option that miners can use to prevent a chain split ahead of the Aug\n> 1st BIP148 activation date.\n>\n> The splitprotection soft fork is essentially BIP91 but using BIP8\n> instead of BIP9 with a lower activation threshold and immediate\n> mandatory signalling lock-in. This allows for a majority of miners to\n> activate mandatory SegWit signalling and prevent a potential chain\n> split ahead of BIP148 activation.\n>\n> This BIP allows for miners to respond to market forces quickly ahead\n> of BIP148 activation by signalling for splitprotection. Any miners\n> already running BIP148 should be encouraged to use splitprotection.\n>\n> <pre>\n>   BIP: splitprotection\n>   Layer: Consensus (soft fork)\n>   Title: User Activated Soft Fork Split Protection\n>   Author: James Hilliard <james.hilliard1 at gmail.com>\n>   Comments-Summary: No comments yet.\n>   Comments-URI:\n>   Status: Draft\n>   Type: Standards Track\n>   Created: 2017-05-22\n>   License: BSD-3-Clause\n>            CC0-1.0\n> </pre>\n>\n> ==Abstract==\n>\n> This document specifies a coordination mechanism for a simple majority\n> of miners to prevent a chain split ahead of BIP148 activation.\n>\n> ==Definitions==\n>\n> \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n> using bit 1, between November 15th 2016 and November 15th 2017 to\n> activate BIP141, BIP143 and BIP147.\n>\n> ==Motivation==\n>\n> The biggest risk of BIP148 is an extended chain split, this BIP\n> provides a way for a simple majority of miners to eliminate that risk.\n>\n> This BIP provides a way for a simple majority of miners to coordinate\n> activation of the existing segwit deployment with less than 95%\n> hashpower before BIP148 activation. Due to time constraints unless\n> immediately deployed BIP91 will likely not be able to enforce\n> mandatory signalling of segwit before the Aug 1st activation of\n> BIP148. This BIP provides a method for rapid miner activation of\n> SegWit mandatory signalling ahead of the BIP148 activation date. Since\n> the primary goal of this BIP is to reduce the chance of an extended\n> chain split as much as possible we activate using a simple miner\n> majority of 65% over a 504 block interval rather than a higher\n> percentage. This BIP also allows miners to signal their intention to\n> run BIP148 in order to prevent a chain split.\n>\n> ==Specification==\n>\n> While this BIP is active, all blocks must set the nVersion header top\n> 3 bits to 001 together with bit field (1<<1) (according to the\n> existing segwit deployment). Blocks that do not signal as required\n> will be rejected.\n>\n> ==Deployment==\n>\n> This BIP will be deployed by \"version bits\" with a 65%(this can be\n> adjusted if desired) activation threshold BIP9 with the name\n> \"splitprotecion\" and using bit 2.\n>\n> This BIP starts immediately and is a BIP8 style soft fork since\n> mandatory signalling will start on midnight August 1st 2017 (epoch\n> time 1501545600) regardless of whether or not this BIP has reached its\n> own signalling threshold. This BIP will cease to be active when segwit\n> is locked-in.\n>\n> === Reference implementation ===\n>\n> <pre>\n> // Check if Segregated Witness is Locked In\n> bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n> Consensus::Params& params)\n> {\n>     LOCK(cs_main);\n>     return (VersionBitsState(pindexPrev, params,\n> Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n> THRESHOLD_LOCKED_IN);\n> }\n>\n> // SPLITPROTECTION mandatory segwit signalling.\n> if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n> Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n> THRESHOLD_LOCKED_IN &&\n>      !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n> // Segwit is not locked in\n>      !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n> and is not active.\n> {\n>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n> VERSIONBITS_TOP_BITS;\n>     bool fSegbit = (pindex->nVersion &\n> VersionBitsMask(chainparams.GetConsensus(),\n> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>     if (!(fVersionBits && fSegbit)) {\n>         return state.DoS(0, error(\"ConnectBlock(): relayed block must\n> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>     }\n> }\n>\n> // BIP148 mandatory segwit signalling.\n> int64_t nMedianTimePast = pindex->GetMedianTimePast();\n> if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n>      (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n>      (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>  // Segwit is not locked in\n>       !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n>  // and is not active.\n> {\n>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n> VERSIONBITS_TOP_BITS;\n>     bool fSegbit = (pindex->nVersion &\n> VersionBitsMask(chainparams.GetConsensus(),\n> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>     if (!(fVersionBits && fSegbit)) {\n>         return state.DoS(0, error(\"ConnectBlock(): relayed block must\n> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>     }\n> }\n> </pre>\n>\n> https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1\n>\n> ==Backwards Compatibility==\n>\n> This deployment is compatible with the existing \"segwit\" bit 1\n> deployment scheduled between midnight November 15th, 2016 and midnight\n> November 15th, 2017. This deployment is also compatible with the\n> existing BIP148 deployment. This BIP is compatible with BIP91 only if\n> BIP91 activates before it and before BIP148. Miners will need to\n> upgrade their nodes to support splitprotection otherwise they may\n> build on top of an invalid block. While this bip is active users\n> should either upgrade to splitprotection or wait for additional\n> confirmations when accepting payments.\n>\n> ==Rationale==\n>\n> Historically we have used IsSuperMajority() to activate soft forks\n> such as BIP66 which has a mandatory signalling requirement for miners\n> once activated, this ensures that miners are aware of new rules being\n> enforced. This technique can be leveraged to lower the signalling\n> threshold of a soft fork while it is in the process of being deployed\n> in a backwards compatible way. We also use a BIP8 style timeout to\n> ensure that this BIP is compatible with BIP148 and that BIP148\n> compatible mandatory signalling activates regardless of miner\n> signalling levels.\n>\n> By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n> deployment, this BIP can cause the existing \"segwit\" deployment to\n> activate without needing to release a new deployment. As we approach\n> BIP148 activation it may be desirable for a majority of miners to have\n> a method that will ensure that there is no chain split.\n>\n> ==References==\n>\n> *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html\n> Mailing list discussion]\n> *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\n> P2SH flag day activation]\n> *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n> *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n> *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n> *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n> *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n> Version 0 Witness Program]]\n> *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element malleability]]\n> *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit deployment]]\n> *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n> *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit benefits]\n>\n> ==Copyright==\n>\n> This document is dual licensed as BSD 3-clause, and Creative Commons\n> CC0 1.0 Universal.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "James Hilliard",
                "date": "2017-06-07T01:29:18",
                "message_text_only": "You need a majority of miners enforcing BIP148 upon BIP148 activation\nto prevent a split, not just a majority signalling segwit. This\nprovides a miner coordination mechanism for BIP148 mandatory\nsignalling enforcement.\n\nOn Tue, Jun 6, 2017 at 8:11 PM, Karl Johan Alm\n<karljohan-alm at garage.co.jp> wrote:\n> One thing about BIP148 activation that may be affected by this is the\n> fact that segwit signalling non-BIP148 miners + BIP148 miners may hold\n> majority hash power and prevent a chain split. With this SF, that will\n> no longer be the case, right? Or am I completely confused on the\n> subject?\n>\n> On Wed, Jun 7, 2017 at 9:56 AM, James Hilliard via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Due to the proposed calendar(https://segwit2x.github.io/) for the\n>> SegWit2x agreement being too slow to activate SegWit mandatory\n>> signalling ahead of BIP148 using BIP91 I would like to propose another\n>> option that miners can use to prevent a chain split ahead of the Aug\n>> 1st BIP148 activation date.\n>>\n>> The splitprotection soft fork is essentially BIP91 but using BIP8\n>> instead of BIP9 with a lower activation threshold and immediate\n>> mandatory signalling lock-in. This allows for a majority of miners to\n>> activate mandatory SegWit signalling and prevent a potential chain\n>> split ahead of BIP148 activation.\n>>\n>> This BIP allows for miners to respond to market forces quickly ahead\n>> of BIP148 activation by signalling for splitprotection. Any miners\n>> already running BIP148 should be encouraged to use splitprotection.\n>>\n>> <pre>\n>>   BIP: splitprotection\n>>   Layer: Consensus (soft fork)\n>>   Title: User Activated Soft Fork Split Protection\n>>   Author: James Hilliard <james.hilliard1 at gmail.com>\n>>   Comments-Summary: No comments yet.\n>>   Comments-URI:\n>>   Status: Draft\n>>   Type: Standards Track\n>>   Created: 2017-05-22\n>>   License: BSD-3-Clause\n>>            CC0-1.0\n>> </pre>\n>>\n>> ==Abstract==\n>>\n>> This document specifies a coordination mechanism for a simple majority\n>> of miners to prevent a chain split ahead of BIP148 activation.\n>>\n>> ==Definitions==\n>>\n>> \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n>> using bit 1, between November 15th 2016 and November 15th 2017 to\n>> activate BIP141, BIP143 and BIP147.\n>>\n>> ==Motivation==\n>>\n>> The biggest risk of BIP148 is an extended chain split, this BIP\n>> provides a way for a simple majority of miners to eliminate that risk.\n>>\n>> This BIP provides a way for a simple majority of miners to coordinate\n>> activation of the existing segwit deployment with less than 95%\n>> hashpower before BIP148 activation. Due to time constraints unless\n>> immediately deployed BIP91 will likely not be able to enforce\n>> mandatory signalling of segwit before the Aug 1st activation of\n>> BIP148. This BIP provides a method for rapid miner activation of\n>> SegWit mandatory signalling ahead of the BIP148 activation date. Since\n>> the primary goal of this BIP is to reduce the chance of an extended\n>> chain split as much as possible we activate using a simple miner\n>> majority of 65% over a 504 block interval rather than a higher\n>> percentage. This BIP also allows miners to signal their intention to\n>> run BIP148 in order to prevent a chain split.\n>>\n>> ==Specification==\n>>\n>> While this BIP is active, all blocks must set the nVersion header top\n>> 3 bits to 001 together with bit field (1<<1) (according to the\n>> existing segwit deployment). Blocks that do not signal as required\n>> will be rejected.\n>>\n>> ==Deployment==\n>>\n>> This BIP will be deployed by \"version bits\" with a 65%(this can be\n>> adjusted if desired) activation threshold BIP9 with the name\n>> \"splitprotecion\" and using bit 2.\n>>\n>> This BIP starts immediately and is a BIP8 style soft fork since\n>> mandatory signalling will start on midnight August 1st 2017 (epoch\n>> time 1501545600) regardless of whether or not this BIP has reached its\n>> own signalling threshold. This BIP will cease to be active when segwit\n>> is locked-in.\n>>\n>> === Reference implementation ===\n>>\n>> <pre>\n>> // Check if Segregated Witness is Locked In\n>> bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n>> Consensus::Params& params)\n>> {\n>>     LOCK(cs_main);\n>>     return (VersionBitsState(pindexPrev, params,\n>> Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n>> THRESHOLD_LOCKED_IN);\n>> }\n>>\n>> // SPLITPROTECTION mandatory segwit signalling.\n>> if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n>> Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n>> THRESHOLD_LOCKED_IN &&\n>>      !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>> // Segwit is not locked in\n>>      !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n>> and is not active.\n>> {\n>>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>> VERSIONBITS_TOP_BITS;\n>>     bool fSegbit = (pindex->nVersion &\n>> VersionBitsMask(chainparams.GetConsensus(),\n>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>     if (!(fVersionBits && fSegbit)) {\n>>         return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>     }\n>> }\n>>\n>> // BIP148 mandatory segwit signalling.\n>> int64_t nMedianTimePast = pindex->GetMedianTimePast();\n>> if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n>>      (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n>>      (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>>  // Segwit is not locked in\n>>       !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n>>  // and is not active.\n>> {\n>>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>> VERSIONBITS_TOP_BITS;\n>>     bool fSegbit = (pindex->nVersion &\n>> VersionBitsMask(chainparams.GetConsensus(),\n>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>     if (!(fVersionBits && fSegbit)) {\n>>         return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>     }\n>> }\n>> </pre>\n>>\n>> https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1\n>>\n>> ==Backwards Compatibility==\n>>\n>> This deployment is compatible with the existing \"segwit\" bit 1\n>> deployment scheduled between midnight November 15th, 2016 and midnight\n>> November 15th, 2017. This deployment is also compatible with the\n>> existing BIP148 deployment. This BIP is compatible with BIP91 only if\n>> BIP91 activates before it and before BIP148. Miners will need to\n>> upgrade their nodes to support splitprotection otherwise they may\n>> build on top of an invalid block. While this bip is active users\n>> should either upgrade to splitprotection or wait for additional\n>> confirmations when accepting payments.\n>>\n>> ==Rationale==\n>>\n>> Historically we have used IsSuperMajority() to activate soft forks\n>> such as BIP66 which has a mandatory signalling requirement for miners\n>> once activated, this ensures that miners are aware of new rules being\n>> enforced. This technique can be leveraged to lower the signalling\n>> threshold of a soft fork while it is in the process of being deployed\n>> in a backwards compatible way. We also use a BIP8 style timeout to\n>> ensure that this BIP is compatible with BIP148 and that BIP148\n>> compatible mandatory signalling activates regardless of miner\n>> signalling levels.\n>>\n>> By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n>> deployment, this BIP can cause the existing \"segwit\" deployment to\n>> activate without needing to release a new deployment. As we approach\n>> BIP148 activation it may be desirable for a majority of miners to have\n>> a method that will ensure that there is no chain split.\n>>\n>> ==References==\n>>\n>> *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html\n>> Mailing list discussion]\n>> *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\n>> P2SH flag day activation]\n>> *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n>> *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n>> *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n>> *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n>> *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n>> Version 0 Witness Program]]\n>> *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element malleability]]\n>> *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit deployment]]\n>> *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n>> *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit benefits]\n>>\n>> ==Copyright==\n>>\n>> This document is dual licensed as BSD 3-clause, and Creative Commons\n>> CC0 1.0 Universal.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Tao Effect",
                "date": "2017-06-07T01:51:39",
                "message_text_only": "What is the probability that a 65% threshold is too low and can allow a \"surprise miner attack\", whereby miners are kept offline before the deadline, and brought online immediately after, creating potential havoc?\n\n(Nit: \"simple majority\" usually refers to >50%, I think, might cause confusion.)\n\n-Greg Slepak\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n> On Jun 6, 2017, at 5:56 PM, James Hilliard via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n> Due to the proposed calendar(https://segwit2x.github.io/ <https://segwit2x.github.io/>) for the\n> SegWit2x agreement being too slow to activate SegWit mandatory\n> signalling ahead of BIP148 using BIP91 I would like to propose another\n> option that miners can use to prevent a chain split ahead of the Aug\n> 1st BIP148 activation date.\n> \n> The splitprotection soft fork is essentially BIP91 but using BIP8\n> instead of BIP9 with a lower activation threshold and immediate\n> mandatory signalling lock-in. This allows for a majority of miners to\n> activate mandatory SegWit signalling and prevent a potential chain\n> split ahead of BIP148 activation.\n> \n> This BIP allows for miners to respond to market forces quickly ahead\n> of BIP148 activation by signalling for splitprotection. Any miners\n> already running BIP148 should be encouraged to use splitprotection.\n> \n> <pre>\n>  BIP: splitprotection\n>  Layer: Consensus (soft fork)\n>  Title: User Activated Soft Fork Split Protection\n>  Author: James Hilliard <james.hilliard1 at gmail.com <mailto:james.hilliard1 at gmail.com>>\n>  Comments-Summary: No comments yet.\n>  Comments-URI:\n>  Status: Draft\n>  Type: Standards Track\n>  Created: 2017-05-22\n>  License: BSD-3-Clause\n>           CC0-1.0\n> </pre>\n> \n> ==Abstract==\n> \n> This document specifies a coordination mechanism for a simple majority\n> of miners to prevent a chain split ahead of BIP148 activation.\n> \n> ==Definitions==\n> \n> \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n> using bit 1, between November 15th 2016 and November 15th 2017 to\n> activate BIP141, BIP143 and BIP147.\n> \n> ==Motivation==\n> \n> The biggest risk of BIP148 is an extended chain split, this BIP\n> provides a way for a simple majority of miners to eliminate that risk.\n> \n> This BIP provides a way for a simple majority of miners to coordinate\n> activation of the existing segwit deployment with less than 95%\n> hashpower before BIP148 activation. Due to time constraints unless\n> immediately deployed BIP91 will likely not be able to enforce\n> mandatory signalling of segwit before the Aug 1st activation of\n> BIP148. This BIP provides a method for rapid miner activation of\n> SegWit mandatory signalling ahead of the BIP148 activation date. Since\n> the primary goal of this BIP is to reduce the chance of an extended\n> chain split as much as possible we activate using a simple miner\n> majority of 65% over a 504 block interval rather than a higher\n> percentage. This BIP also allows miners to signal their intention to\n> run BIP148 in order to prevent a chain split.\n> \n> ==Specification==\n> \n> While this BIP is active, all blocks must set the nVersion header top\n> 3 bits to 001 together with bit field (1<<1) (according to the\n> existing segwit deployment). Blocks that do not signal as required\n> will be rejected.\n> \n> ==Deployment==\n> \n> This BIP will be deployed by \"version bits\" with a 65%(this can be\n> adjusted if desired) activation threshold BIP9 with the name\n> \"splitprotecion\" and using bit 2.\n> \n> This BIP starts immediately and is a BIP8 style soft fork since\n> mandatory signalling will start on midnight August 1st 2017 (epoch\n> time 1501545600) regardless of whether or not this BIP has reached its\n> own signalling threshold. This BIP will cease to be active when segwit\n> is locked-in.\n> \n> === Reference implementation ===\n> \n> <pre>\n> // Check if Segregated Witness is Locked In\n> bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n> Consensus::Params& params)\n> {\n>    LOCK(cs_main);\n>    return (VersionBitsState(pindexPrev, params,\n> Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n> THRESHOLD_LOCKED_IN);\n> }\n> \n> // SPLITPROTECTION mandatory segwit signalling.\n> if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n> Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n> THRESHOLD_LOCKED_IN &&\n>     !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n> // Segwit is not locked in\n>     !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n> and is not active.\n> {\n>    bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n> VERSIONBITS_TOP_BITS;\n>    bool fSegbit = (pindex->nVersion &\n> VersionBitsMask(chainparams.GetConsensus(),\n> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>    if (!(fVersionBits && fSegbit)) {\n>        return state.DoS(0, error(\"ConnectBlock(): relayed block must\n> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>    }\n> }\n> \n> // BIP148 mandatory segwit signalling.\n> int64_t nMedianTimePast = pindex->GetMedianTimePast();\n> if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n>     (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n>     (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n> // Segwit is not locked in\n>      !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n> // and is not active.\n> {\n>    bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n> VERSIONBITS_TOP_BITS;\n>    bool fSegbit = (pindex->nVersion &\n> VersionBitsMask(chainparams.GetConsensus(),\n> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>    if (!(fVersionBits && fSegbit)) {\n>        return state.DoS(0, error(\"ConnectBlock(): relayed block must\n> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>    }\n> }\n> </pre>\n> \n> https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1 <https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1>\n> \n> ==Backwards Compatibility==\n> \n> This deployment is compatible with the existing \"segwit\" bit 1\n> deployment scheduled between midnight November 15th, 2016 and midnight\n> November 15th, 2017. This deployment is also compatible with the\n> existing BIP148 deployment. This BIP is compatible with BIP91 only if\n> BIP91 activates before it and before BIP148. Miners will need to\n> upgrade their nodes to support splitprotection otherwise they may\n> build on top of an invalid block. While this bip is active users\n> should either upgrade to splitprotection or wait for additional\n> confirmations when accepting payments.\n> \n> ==Rationale==\n> \n> Historically we have used IsSuperMajority() to activate soft forks\n> such as BIP66 which has a mandatory signalling requirement for miners\n> once activated, this ensures that miners are aware of new rules being\n> enforced. This technique can be leveraged to lower the signalling\n> threshold of a soft fork while it is in the process of being deployed\n> in a backwards compatible way. We also use a BIP8 style timeout to\n> ensure that this BIP is compatible with BIP148 and that BIP148\n> compatible mandatory signalling activates regardless of miner\n> signalling levels.\n> \n> By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n> deployment, this BIP can cause the existing \"segwit\" deployment to\n> activate without needing to release a new deployment. As we approach\n> BIP148 activation it may be desirable for a majority of miners to have\n> a method that will ensure that there is no chain split.\n> \n> ==References==\n> \n> *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html>\n> Mailing list discussion]\n> *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283 <https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283>\n> P2SH flag day activation]\n> *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n> *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n> *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n> *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n> *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n> Version 0 Witness Program]]\n> *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element malleability]]\n> *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit deployment]]\n> *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n> *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit benefits <https://bitcoincore.org/en/2016/01/26/segwit-benefits/%20Segwit%20benefits>]\n> \n> ==Copyright==\n> \n> This document is dual licensed as BSD 3-clause, and Creative Commons\n> CC0 1.0 Universal.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/9d3cbc4a/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/9d3cbc4a/attachment-0001.sig>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-06-07T21:29:55",
                "message_text_only": "I think this BIP represents a gamble, and the gamble may not be a good\none.  The gamble here is that if the segwit2x changes are rolled out\non time, and if the signatories accept the bit4 + bit1 signaling\nproposals within BIP91, the launch will go smoother, as intended.  But\nconversely, if either the segwit2x signatories balk about the Bit1\nsignaling OR if the timelines for segwit2mb are missed even by a bit,\nit may cause the BIP148 chainsplit to be worse than it would be\nwithout.  Given the frequent concerns raised in multiple places about\nthe aggressiveness of the segwit2x timelines, including the\nnon-hardfork timelines, this does not seem like a great gamble to be\nmaking.\n\nThe reason I say it may make the chainsplit be worse than it would\notherwise be is that it may provide a false sense of safety for BIP148\nthat currently does not currently exist(and should not, as it is a\nchainsplit).  That sense of safety would only be legitimate if the\nsegwit2x signatories were on board, and the segwit2x code effectively\nenforced BIP148 simultaneously, neither of which are guaranteed.  If\nusers and more miners had a false sense that BIP148 was *not* going to\nchainsplit from default / segwit2x, they might not follow the news if\nsuddenly the segwit2x plan were delayed for a few days.  While any\nadditional support would definitely be cheered on by BIP148\nsupporters, the practical reality might be that this proposal would\ntake BIP148 from the \"unlikely to have any viable chain after flag day\nwithout segwit2x\" category into the \"small but viable minority chain\"\ncategory, and even worse, it might strengthen the chainsplit just days\nbefore segwit is activated on BOTH chains, putting the BIP148\nsupporters on the wrong pro-segwit, but still-viable chain.\n\nIf Core had taken a strong stance to include BIP148 into the client,\nand if BIP148 support were much much broader, I would feel differently\nas the gamble would be more likely to discourage a chainsplit (By\nforcing the acceleration of segwit2x) rather than encourage it (by\nstrengthening an extreme minority chainsplit that may wind up on the\nwrong side of two segwit-activated chains).  As it stands now, this\nseems like a very dangerous attempt to compromise with a small but\nvocal group that are the ones creating the threat to begin with.\n\nJared\n\nOn Tue, Jun 6, 2017 at 5:56 PM, James Hilliard via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Due to the proposed calendar(https://segwit2x.github.io/) for the\n> SegWit2x agreement being too slow to activate SegWit mandatory\n> signalling ahead of BIP148 using BIP91 I would like to propose another\n> option that miners can use to prevent a chain split ahead of the Aug\n> 1st BIP148 activation date.\n>\n> The splitprotection soft fork is essentially BIP91 but using BIP8\n> instead of BIP9 with a lower activation threshold and immediate\n> mandatory signalling lock-in. This allows for a majority of miners to\n> activate mandatory SegWit signalling and prevent a potential chain\n> split ahead of BIP148 activation.\n>\n> This BIP allows for miners to respond to market forces quickly ahead\n> of BIP148 activation by signalling for splitprotection. Any miners\n> already running BIP148 should be encouraged to use splitprotection.\n>\n> <pre>\n>   BIP: splitprotection\n>   Layer: Consensus (soft fork)\n>   Title: User Activated Soft Fork Split Protection\n>   Author: James Hilliard <james.hilliard1 at gmail.com>\n>   Comments-Summary: No comments yet.\n>   Comments-URI:\n>   Status: Draft\n>   Type: Standards Track\n>   Created: 2017-05-22\n>   License: BSD-3-Clause\n>            CC0-1.0\n> </pre>\n>\n> ==Abstract==\n>\n> This document specifies a coordination mechanism for a simple majority\n> of miners to prevent a chain split ahead of BIP148 activation.\n>\n> ==Definitions==\n>\n> \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n> using bit 1, between November 15th 2016 and November 15th 2017 to\n> activate BIP141, BIP143 and BIP147.\n>\n> ==Motivation==\n>\n> The biggest risk of BIP148 is an extended chain split, this BIP\n> provides a way for a simple majority of miners to eliminate that risk.\n>\n> This BIP provides a way for a simple majority of miners to coordinate\n> activation of the existing segwit deployment with less than 95%\n> hashpower before BIP148 activation. Due to time constraints unless\n> immediately deployed BIP91 will likely not be able to enforce\n> mandatory signalling of segwit before the Aug 1st activation of\n> BIP148. This BIP provides a method for rapid miner activation of\n> SegWit mandatory signalling ahead of the BIP148 activation date. Since\n> the primary goal of this BIP is to reduce the chance of an extended\n> chain split as much as possible we activate using a simple miner\n> majority of 65% over a 504 block interval rather than a higher\n> percentage. This BIP also allows miners to signal their intention to\n> run BIP148 in order to prevent a chain split.\n>\n> ==Specification==\n>\n> While this BIP is active, all blocks must set the nVersion header top\n> 3 bits to 001 together with bit field (1<<1) (according to the\n> existing segwit deployment). Blocks that do not signal as required\n> will be rejected.\n>\n> ==Deployment==\n>\n> This BIP will be deployed by \"version bits\" with a 65%(this can be\n> adjusted if desired) activation threshold BIP9 with the name\n> \"splitprotecion\" and using bit 2.\n>\n> This BIP starts immediately and is a BIP8 style soft fork since\n> mandatory signalling will start on midnight August 1st 2017 (epoch\n> time 1501545600) regardless of whether or not this BIP has reached its\n> own signalling threshold. This BIP will cease to be active when segwit\n> is locked-in.\n>\n> === Reference implementation ===\n>\n> <pre>\n> // Check if Segregated Witness is Locked In\n> bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n> Consensus::Params& params)\n> {\n>     LOCK(cs_main);\n>     return (VersionBitsState(pindexPrev, params,\n> Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n> THRESHOLD_LOCKED_IN);\n> }\n>\n> // SPLITPROTECTION mandatory segwit signalling.\n> if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n> Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n> THRESHOLD_LOCKED_IN &&\n>      !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n> // Segwit is not locked in\n>      !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n> and is not active.\n> {\n>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n> VERSIONBITS_TOP_BITS;\n>     bool fSegbit = (pindex->nVersion &\n> VersionBitsMask(chainparams.GetConsensus(),\n> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>     if (!(fVersionBits && fSegbit)) {\n>         return state.DoS(0, error(\"ConnectBlock(): relayed block must\n> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>     }\n> }\n>\n> // BIP148 mandatory segwit signalling.\n> int64_t nMedianTimePast = pindex->GetMedianTimePast();\n> if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n>      (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n>      (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>  // Segwit is not locked in\n>       !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n>  // and is not active.\n> {\n>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n> VERSIONBITS_TOP_BITS;\n>     bool fSegbit = (pindex->nVersion &\n> VersionBitsMask(chainparams.GetConsensus(),\n> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>     if (!(fVersionBits && fSegbit)) {\n>         return state.DoS(0, error(\"ConnectBlock(): relayed block must\n> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>     }\n> }\n> </pre>\n>\n> https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1\n>\n> ==Backwards Compatibility==\n>\n> This deployment is compatible with the existing \"segwit\" bit 1\n> deployment scheduled between midnight November 15th, 2016 and midnight\n> November 15th, 2017. This deployment is also compatible with the\n> existing BIP148 deployment. This BIP is compatible with BIP91 only if\n> BIP91 activates before it and before BIP148. Miners will need to\n> upgrade their nodes to support splitprotection otherwise they may\n> build on top of an invalid block. While this bip is active users\n> should either upgrade to splitprotection or wait for additional\n> confirmations when accepting payments.\n>\n> ==Rationale==\n>\n> Historically we have used IsSuperMajority() to activate soft forks\n> such as BIP66 which has a mandatory signalling requirement for miners\n> once activated, this ensures that miners are aware of new rules being\n> enforced. This technique can be leveraged to lower the signalling\n> threshold of a soft fork while it is in the process of being deployed\n> in a backwards compatible way. We also use a BIP8 style timeout to\n> ensure that this BIP is compatible with BIP148 and that BIP148\n> compatible mandatory signalling activates regardless of miner\n> signalling levels.\n>\n> By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n> deployment, this BIP can cause the existing \"segwit\" deployment to\n> activate without needing to release a new deployment. As we approach\n> BIP148 activation it may be desirable for a majority of miners to have\n> a method that will ensure that there is no chain split.\n>\n> ==References==\n>\n> *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html\n> Mailing list discussion]\n> *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\n> P2SH flag day activation]\n> *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n> *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n> *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n> *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n> *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n> Version 0 Witness Program]]\n> *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element malleability]]\n> *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit deployment]]\n> *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n> *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit benefits]\n>\n> ==Copyright==\n>\n> This document is dual licensed as BSD 3-clause, and Creative Commons\n> CC0 1.0 Universal.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "James Hilliard",
                "date": "2017-06-07T01:54:37",
                "message_text_only": "This is a BIP8 style soft fork so mandatory signalling will be active\nafter Aug 1st regardless.\n\nOn Tue, Jun 6, 2017 at 8:51 PM, Tao Effect <contact at taoeffect.com> wrote:\n> What is the probability that a 65% threshold is too low and can allow a\n> \"surprise miner attack\", whereby miners are kept offline before the\n> deadline, and brought online immediately after, creating potential havoc?\n>\n> (Nit: \"simple majority\" usually refers to >50%, I think, might cause\n> confusion.)\n>\n> -Greg Slepak\n>\n> --\n> Please do not email me anything that you are not comfortable also sharing\n> with the NSA.\n>\n> On Jun 6, 2017, at 5:56 PM, James Hilliard via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Due to the proposed calendar(https://segwit2x.github.io/) for the\n> SegWit2x agreement being too slow to activate SegWit mandatory\n> signalling ahead of BIP148 using BIP91 I would like to propose another\n> option that miners can use to prevent a chain split ahead of the Aug\n> 1st BIP148 activation date.\n>\n> The splitprotection soft fork is essentially BIP91 but using BIP8\n> instead of BIP9 with a lower activation threshold and immediate\n> mandatory signalling lock-in. This allows for a majority of miners to\n> activate mandatory SegWit signalling and prevent a potential chain\n> split ahead of BIP148 activation.\n>\n> This BIP allows for miners to respond to market forces quickly ahead\n> of BIP148 activation by signalling for splitprotection. Any miners\n> already running BIP148 should be encouraged to use splitprotection.\n>\n> <pre>\n>  BIP: splitprotection\n>  Layer: Consensus (soft fork)\n>  Title: User Activated Soft Fork Split Protection\n>  Author: James Hilliard <james.hilliard1 at gmail.com>\n>  Comments-Summary: No comments yet.\n>  Comments-URI:\n>  Status: Draft\n>  Type: Standards Track\n>  Created: 2017-05-22\n>  License: BSD-3-Clause\n>           CC0-1.0\n> </pre>\n>\n> ==Abstract==\n>\n> This document specifies a coordination mechanism for a simple majority\n> of miners to prevent a chain split ahead of BIP148 activation.\n>\n> ==Definitions==\n>\n> \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n> using bit 1, between November 15th 2016 and November 15th 2017 to\n> activate BIP141, BIP143 and BIP147.\n>\n> ==Motivation==\n>\n> The biggest risk of BIP148 is an extended chain split, this BIP\n> provides a way for a simple majority of miners to eliminate that risk.\n>\n> This BIP provides a way for a simple majority of miners to coordinate\n> activation of the existing segwit deployment with less than 95%\n> hashpower before BIP148 activation. Due to time constraints unless\n> immediately deployed BIP91 will likely not be able to enforce\n> mandatory signalling of segwit before the Aug 1st activation of\n> BIP148. This BIP provides a method for rapid miner activation of\n> SegWit mandatory signalling ahead of the BIP148 activation date. Since\n> the primary goal of this BIP is to reduce the chance of an extended\n> chain split as much as possible we activate using a simple miner\n> majority of 65% over a 504 block interval rather than a higher\n> percentage. This BIP also allows miners to signal their intention to\n> run BIP148 in order to prevent a chain split.\n>\n> ==Specification==\n>\n> While this BIP is active, all blocks must set the nVersion header top\n> 3 bits to 001 together with bit field (1<<1) (according to the\n> existing segwit deployment). Blocks that do not signal as required\n> will be rejected.\n>\n> ==Deployment==\n>\n> This BIP will be deployed by \"version bits\" with a 65%(this can be\n> adjusted if desired) activation threshold BIP9 with the name\n> \"splitprotecion\" and using bit 2.\n>\n> This BIP starts immediately and is a BIP8 style soft fork since\n> mandatory signalling will start on midnight August 1st 2017 (epoch\n> time 1501545600) regardless of whether or not this BIP has reached its\n> own signalling threshold. This BIP will cease to be active when segwit\n> is locked-in.\n>\n> === Reference implementation ===\n>\n> <pre>\n> // Check if Segregated Witness is Locked In\n> bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n> Consensus::Params& params)\n> {\n>    LOCK(cs_main);\n>    return (VersionBitsState(pindexPrev, params,\n> Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n> THRESHOLD_LOCKED_IN);\n> }\n>\n> // SPLITPROTECTION mandatory segwit signalling.\n> if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n> Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n> THRESHOLD_LOCKED_IN &&\n>     !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n> // Segwit is not locked in\n>     !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n> and is not active.\n> {\n>    bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n> VERSIONBITS_TOP_BITS;\n>    bool fSegbit = (pindex->nVersion &\n> VersionBitsMask(chainparams.GetConsensus(),\n> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>    if (!(fVersionBits && fSegbit)) {\n>        return state.DoS(0, error(\"ConnectBlock(): relayed block must\n> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>    }\n> }\n>\n> // BIP148 mandatory segwit signalling.\n> int64_t nMedianTimePast = pindex->GetMedianTimePast();\n> if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n>     (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n>     (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n> // Segwit is not locked in\n>      !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n> // and is not active.\n> {\n>    bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n> VERSIONBITS_TOP_BITS;\n>    bool fSegbit = (pindex->nVersion &\n> VersionBitsMask(chainparams.GetConsensus(),\n> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>    if (!(fVersionBits && fSegbit)) {\n>        return state.DoS(0, error(\"ConnectBlock(): relayed block must\n> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>    }\n> }\n> </pre>\n>\n> https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1\n>\n> ==Backwards Compatibility==\n>\n> This deployment is compatible with the existing \"segwit\" bit 1\n> deployment scheduled between midnight November 15th, 2016 and midnight\n> November 15th, 2017. This deployment is also compatible with the\n> existing BIP148 deployment. This BIP is compatible with BIP91 only if\n> BIP91 activates before it and before BIP148. Miners will need to\n> upgrade their nodes to support splitprotection otherwise they may\n> build on top of an invalid block. While this bip is active users\n> should either upgrade to splitprotection or wait for additional\n> confirmations when accepting payments.\n>\n> ==Rationale==\n>\n> Historically we have used IsSuperMajority() to activate soft forks\n> such as BIP66 which has a mandatory signalling requirement for miners\n> once activated, this ensures that miners are aware of new rules being\n> enforced. This technique can be leveraged to lower the signalling\n> threshold of a soft fork while it is in the process of being deployed\n> in a backwards compatible way. We also use a BIP8 style timeout to\n> ensure that this BIP is compatible with BIP148 and that BIP148\n> compatible mandatory signalling activates regardless of miner\n> signalling levels.\n>\n> By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n> deployment, this BIP can cause the existing \"segwit\" deployment to\n> activate without needing to release a new deployment. As we approach\n> BIP148 activation it may be desirable for a majority of miners to have\n> a method that will ensure that there is no chain split.\n>\n> ==References==\n>\n> *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html\n> Mailing list discussion]\n> *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\n> P2SH flag day activation]\n> *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n> *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n> *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n> *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n> *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n> Version 0 Witness Program]]\n> *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element malleability]]\n> *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit deployment]]\n> *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n> *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit benefits]\n>\n> ==Copyright==\n>\n> This document is dual licensed as BSD 3-clause, and Creative Commons\n> CC0 1.0 Universal.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>"
            },
            {
                "author": "Jacob Eliosoff",
                "date": "2017-06-07T04:17:37",
                "message_text_only": "While this isn't an unreasonable proposal, it will orphan blocks from any\nminer who isn't running it (or BIP148) by Aug 1, right?  That seems rather\nrushed for a non-backwards-compatible SF, especially since in practice,\nminers are unlikely to deploy it until it comes bundled with some version\nof the Segwit2x HF code.\n\nI realize this is a touchy topic but - how much hard evidence is there that\nthere *will* be significant disruption if miners simply ignore both this\nand BIP148?  Correct me but afaict, BIP148 has ~0% hashrate support.\n\nUnless the HF code is ready and agree on soon (say by Jul 1), my vote is to\nkeep the main chain backwards-compatible, especially if evidence of miner\nsupport for BIP148 doesn't materialize soon.  It seems less disruptive for\nrecently-deployed BIP148 nodes to revert than to ask every miner in the\nsystem to quickly upgrade or get orphaned.\n\nJust my view, I respect that others will differ.\n\n\nOn Tue, Jun 6, 2017 at 9:54 PM, James Hilliard via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> This is a BIP8 style soft fork so mandatory signalling will be active\n> after Aug 1st regardless.\n>\n> On Tue, Jun 6, 2017 at 8:51 PM, Tao Effect <contact at taoeffect.com> wrote:\n> > What is the probability that a 65% threshold is too low and can allow a\n> > \"surprise miner attack\", whereby miners are kept offline before the\n> > deadline, and brought online immediately after, creating potential havoc?\n> >\n> > (Nit: \"simple majority\" usually refers to >50%, I think, might cause\n> > confusion.)\n> >\n> > -Greg Slepak\n> >\n> > --\n> > Please do not email me anything that you are not comfortable also sharing\n> > with the NSA.\n> >\n> > On Jun 6, 2017, at 5:56 PM, James Hilliard via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> > Due to the proposed calendar(https://segwit2x.github.io/) for the\n> > SegWit2x agreement being too slow to activate SegWit mandatory\n> > signalling ahead of BIP148 using BIP91 I would like to propose another\n> > option that miners can use to prevent a chain split ahead of the Aug\n> > 1st BIP148 activation date.\n> >\n> > The splitprotection soft fork is essentially BIP91 but using BIP8\n> > instead of BIP9 with a lower activation threshold and immediate\n> > mandatory signalling lock-in. This allows for a majority of miners to\n> > activate mandatory SegWit signalling and prevent a potential chain\n> > split ahead of BIP148 activation.\n> >\n> > This BIP allows for miners to respond to market forces quickly ahead\n> > of BIP148 activation by signalling for splitprotection. Any miners\n> > already running BIP148 should be encouraged to use splitprotection.\n> >\n> > <pre>\n> >  BIP: splitprotection\n> >  Layer: Consensus (soft fork)\n> >  Title: User Activated Soft Fork Split Protection\n> >  Author: James Hilliard <james.hilliard1 at gmail.com>\n> >  Comments-Summary: No comments yet.\n> >  Comments-URI:\n> >  Status: Draft\n> >  Type: Standards Track\n> >  Created: 2017-05-22\n> >  License: BSD-3-Clause\n> >           CC0-1.0\n> > </pre>\n> >\n> > ==Abstract==\n> >\n> > This document specifies a coordination mechanism for a simple majority\n> > of miners to prevent a chain split ahead of BIP148 activation.\n> >\n> > ==Definitions==\n> >\n> > \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n> > using bit 1, between November 15th 2016 and November 15th 2017 to\n> > activate BIP141, BIP143 and BIP147.\n> >\n> > ==Motivation==\n> >\n> > The biggest risk of BIP148 is an extended chain split, this BIP\n> > provides a way for a simple majority of miners to eliminate that risk.\n> >\n> > This BIP provides a way for a simple majority of miners to coordinate\n> > activation of the existing segwit deployment with less than 95%\n> > hashpower before BIP148 activation. Due to time constraints unless\n> > immediately deployed BIP91 will likely not be able to enforce\n> > mandatory signalling of segwit before the Aug 1st activation of\n> > BIP148. This BIP provides a method for rapid miner activation of\n> > SegWit mandatory signalling ahead of the BIP148 activation date. Since\n> > the primary goal of this BIP is to reduce the chance of an extended\n> > chain split as much as possible we activate using a simple miner\n> > majority of 65% over a 504 block interval rather than a higher\n> > percentage. This BIP also allows miners to signal their intention to\n> > run BIP148 in order to prevent a chain split.\n> >\n> > ==Specification==\n> >\n> > While this BIP is active, all blocks must set the nVersion header top\n> > 3 bits to 001 together with bit field (1<<1) (according to the\n> > existing segwit deployment). Blocks that do not signal as required\n> > will be rejected.\n> >\n> > ==Deployment==\n> >\n> > This BIP will be deployed by \"version bits\" with a 65%(this can be\n> > adjusted if desired) activation threshold BIP9 with the name\n> > \"splitprotecion\" and using bit 2.\n> >\n> > This BIP starts immediately and is a BIP8 style soft fork since\n> > mandatory signalling will start on midnight August 1st 2017 (epoch\n> > time 1501545600) regardless of whether or not this BIP has reached its\n> > own signalling threshold. This BIP will cease to be active when segwit\n> > is locked-in.\n> >\n> > === Reference implementation ===\n> >\n> > <pre>\n> > // Check if Segregated Witness is Locked In\n> > bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n> > Consensus::Params& params)\n> > {\n> >    LOCK(cs_main);\n> >    return (VersionBitsState(pindexPrev, params,\n> > Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n> > THRESHOLD_LOCKED_IN);\n> > }\n> >\n> > // SPLITPROTECTION mandatory segwit signalling.\n> > if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n> > Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n> > THRESHOLD_LOCKED_IN &&\n> >     !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n> > // Segwit is not locked in\n> >     !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n> > and is not active.\n> > {\n> >    bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n> > VERSIONBITS_TOP_BITS;\n> >    bool fSegbit = (pindex->nVersion &\n> > VersionBitsMask(chainparams.GetConsensus(),\n> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n> >    if (!(fVersionBits && fSegbit)) {\n> >        return state.DoS(0, error(\"ConnectBlock(): relayed block must\n> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n> >    }\n> > }\n> >\n> > // BIP148 mandatory segwit signalling.\n> > int64_t nMedianTimePast = pindex->GetMedianTimePast();\n> > if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n> >     (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n> >     (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n> > // Segwit is not locked in\n> >      !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n> > // and is not active.\n> > {\n> >    bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n> > VERSIONBITS_TOP_BITS;\n> >    bool fSegbit = (pindex->nVersion &\n> > VersionBitsMask(chainparams.GetConsensus(),\n> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n> >    if (!(fVersionBits && fSegbit)) {\n> >        return state.DoS(0, error(\"ConnectBlock(): relayed block must\n> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n> >    }\n> > }\n> > </pre>\n> >\n> > https://github.com/bitcoin/bitcoin/compare/0.14...\n> jameshilliard:splitprotection-v0.14.1\n> >\n> > ==Backwards Compatibility==\n> >\n> > This deployment is compatible with the existing \"segwit\" bit 1\n> > deployment scheduled between midnight November 15th, 2016 and midnight\n> > November 15th, 2017. This deployment is also compatible with the\n> > existing BIP148 deployment. This BIP is compatible with BIP91 only if\n> > BIP91 activates before it and before BIP148. Miners will need to\n> > upgrade their nodes to support splitprotection otherwise they may\n> > build on top of an invalid block. While this bip is active users\n> > should either upgrade to splitprotection or wait for additional\n> > confirmations when accepting payments.\n> >\n> > ==Rationale==\n> >\n> > Historically we have used IsSuperMajority() to activate soft forks\n> > such as BIP66 which has a mandatory signalling requirement for miners\n> > once activated, this ensures that miners are aware of new rules being\n> > enforced. This technique can be leveraged to lower the signalling\n> > threshold of a soft fork while it is in the process of being deployed\n> > in a backwards compatible way. We also use a BIP8 style timeout to\n> > ensure that this BIP is compatible with BIP148 and that BIP148\n> > compatible mandatory signalling activates regardless of miner\n> > signalling levels.\n> >\n> > By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n> > deployment, this BIP can cause the existing \"segwit\" deployment to\n> > activate without needing to release a new deployment. As we approach\n> > BIP148 activation it may be desirable for a majority of miners to have\n> > a method that will ensure that there is no chain split.\n> >\n> > ==References==\n> >\n> > *[https://lists.linuxfoundation.org/pipermail/\n> bitcoin-dev/2017-March/013714.html\n> > Mailing list discussion]\n> > *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.\n> cpp#L1281-L1283\n> > P2SH flag day activation]\n> > *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n> > *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n> > *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n> > *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n> > *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n> > Version 0 Witness Program]]\n> > *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element\n> malleability]]\n> > *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit deployment]]\n> > *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n> > *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit\n> benefits]\n> >\n> > ==Copyright==\n> >\n> > This document is dual licensed as BSD 3-clause, and Creative Commons\n> > CC0 1.0 Universal.\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170607/27553471/attachment-0001.html>"
            },
            {
                "author": "Tao Effect",
                "date": "2017-06-07T05:20:52",
                "message_text_only": "See thread on replay attacks for why activating regardless of threshold is a bad idea [1].\n\nBIP91 OTOH seems perfectly reasonable. 80% instead of 95% makes it more difficult for miners to hold together in opposition to Core. It gives Core more leverage in negotiations.\n\nIf they don't activate with 80%, Core can release another BIP to reduce it to 75%.\n\nEach threshold reduction makes it both more likely to succeed, but also increases the likelihood of harm to the ecosystem.\n\nCheers,\nGreg\n\n[1] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014497.html <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014497.html>\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n> On Jun 6, 2017, at 6:54 PM, James Hilliard <james.hilliard1 at gmail.com <mailto:james.hilliard1 at gmail.com>> wrote:\n> \n> This is a BIP8 style soft fork so mandatory signalling will be active\n> after Aug 1st regardless.\n> \n> On Tue, Jun 6, 2017 at 8:51 PM, Tao Effect <contact at taoeffect.com <mailto:contact at taoeffect.com>> wrote:\n>> What is the probability that a 65% threshold is too low and can allow a\n>> \"surprise miner attack\", whereby miners are kept offline before the\n>> deadline, and brought online immediately after, creating potential havoc?\n>> \n>> (Nit: \"simple majority\" usually refers to >50%, I think, might cause\n>> confusion.)\n>> \n>> -Greg Slepak\n>> \n>> --\n>> Please do not email me anything that you are not comfortable also sharing\n>> with the NSA.\n>> \n>> On Jun 6, 2017, at 5:56 PM, James Hilliard via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>> \n>> Due to the proposed calendar(https://segwit2x.github.io/ <https://segwit2x.github.io/>) for the\n>> SegWit2x agreement being too slow to activate SegWit mandatory\n>> signalling ahead of BIP148 using BIP91 I would like to propose another\n>> option that miners can use to prevent a chain split ahead of the Aug\n>> 1st BIP148 activation date.\n>> \n>> The splitprotection soft fork is essentially BIP91 but using BIP8\n>> instead of BIP9 with a lower activation threshold and immediate\n>> mandatory signalling lock-in. This allows for a majority of miners to\n>> activate mandatory SegWit signalling and prevent a potential chain\n>> split ahead of BIP148 activation.\n>> \n>> This BIP allows for miners to respond to market forces quickly ahead\n>> of BIP148 activation by signalling for splitprotection. Any miners\n>> already running BIP148 should be encouraged to use splitprotection.\n>> \n>> <pre>\n>> BIP: splitprotection\n>> Layer: Consensus (soft fork)\n>> Title: User Activated Soft Fork Split Protection\n>> Author: James Hilliard <james.hilliard1 at gmail.com <mailto:james.hilliard1 at gmail.com>>\n>> Comments-Summary: No comments yet.\n>> Comments-URI:\n>> Status: Draft\n>> Type: Standards Track\n>> Created: 2017-05-22\n>> License: BSD-3-Clause\n>>          CC0-1.0\n>> </pre>\n>> \n>> ==Abstract==\n>> \n>> This document specifies a coordination mechanism for a simple majority\n>> of miners to prevent a chain split ahead of BIP148 activation.\n>> \n>> ==Definitions==\n>> \n>> \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n>> using bit 1, between November 15th 2016 and November 15th 2017 to\n>> activate BIP141, BIP143 and BIP147.\n>> \n>> ==Motivation==\n>> \n>> The biggest risk of BIP148 is an extended chain split, this BIP\n>> provides a way for a simple majority of miners to eliminate that risk.\n>> \n>> This BIP provides a way for a simple majority of miners to coordinate\n>> activation of the existing segwit deployment with less than 95%\n>> hashpower before BIP148 activation. Due to time constraints unless\n>> immediately deployed BIP91 will likely not be able to enforce\n>> mandatory signalling of segwit before the Aug 1st activation of\n>> BIP148. This BIP provides a method for rapid miner activation of\n>> SegWit mandatory signalling ahead of the BIP148 activation date. Since\n>> the primary goal of this BIP is to reduce the chance of an extended\n>> chain split as much as possible we activate using a simple miner\n>> majority of 65% over a 504 block interval rather than a higher\n>> percentage. This BIP also allows miners to signal their intention to\n>> run BIP148 in order to prevent a chain split.\n>> \n>> ==Specification==\n>> \n>> While this BIP is active, all blocks must set the nVersion header top\n>> 3 bits to 001 together with bit field (1<<1) (according to the\n>> existing segwit deployment). Blocks that do not signal as required\n>> will be rejected.\n>> \n>> ==Deployment==\n>> \n>> This BIP will be deployed by \"version bits\" with a 65%(this can be\n>> adjusted if desired) activation threshold BIP9 with the name\n>> \"splitprotecion\" and using bit 2.\n>> \n>> This BIP starts immediately and is a BIP8 style soft fork since\n>> mandatory signalling will start on midnight August 1st 2017 (epoch\n>> time 1501545600) regardless of whether or not this BIP has reached its\n>> own signalling threshold. This BIP will cease to be active when segwit\n>> is locked-in.\n>> \n>> === Reference implementation ===\n>> \n>> <pre>\n>> // Check if Segregated Witness is Locked In\n>> bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n>> Consensus::Params& params)\n>> {\n>>   LOCK(cs_main);\n>>   return (VersionBitsState(pindexPrev, params,\n>> Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n>> THRESHOLD_LOCKED_IN);\n>> }\n>> \n>> // SPLITPROTECTION mandatory segwit signalling.\n>> if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n>> Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n>> THRESHOLD_LOCKED_IN &&\n>>    !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>> // Segwit is not locked in\n>>    !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n>> and is not active.\n>> {\n>>   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>> VERSIONBITS_TOP_BITS;\n>>   bool fSegbit = (pindex->nVersion &\n>> VersionBitsMask(chainparams.GetConsensus(),\n>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>   if (!(fVersionBits && fSegbit)) {\n>>       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>   }\n>> }\n>> \n>> // BIP148 mandatory segwit signalling.\n>> int64_t nMedianTimePast = pindex->GetMedianTimePast();\n>> if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n>>    (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n>>    (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>> // Segwit is not locked in\n>>     !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n>> // and is not active.\n>> {\n>>   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>> VERSIONBITS_TOP_BITS;\n>>   bool fSegbit = (pindex->nVersion &\n>> VersionBitsMask(chainparams.GetConsensus(),\n>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>   if (!(fVersionBits && fSegbit)) {\n>>       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>   }\n>> }\n>> </pre>\n>> \n>> https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1 <https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1>\n>> \n>> ==Backwards Compatibility==\n>> \n>> This deployment is compatible with the existing \"segwit\" bit 1\n>> deployment scheduled between midnight November 15th, 2016 and midnight\n>> November 15th, 2017. This deployment is also compatible with the\n>> existing BIP148 deployment. This BIP is compatible with BIP91 only if\n>> BIP91 activates before it and before BIP148. Miners will need to\n>> upgrade their nodes to support splitprotection otherwise they may\n>> build on top of an invalid block. While this bip is active users\n>> should either upgrade to splitprotection or wait for additional\n>> confirmations when accepting payments.\n>> \n>> ==Rationale==\n>> \n>> Historically we have used IsSuperMajority() to activate soft forks\n>> such as BIP66 which has a mandatory signalling requirement for miners\n>> once activated, this ensures that miners are aware of new rules being\n>> enforced. This technique can be leveraged to lower the signalling\n>> threshold of a soft fork while it is in the process of being deployed\n>> in a backwards compatible way. We also use a BIP8 style timeout to\n>> ensure that this BIP is compatible with BIP148 and that BIP148\n>> compatible mandatory signalling activates regardless of miner\n>> signalling levels.\n>> \n>> By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n>> deployment, this BIP can cause the existing \"segwit\" deployment to\n>> activate without needing to release a new deployment. As we approach\n>> BIP148 activation it may be desirable for a majority of miners to have\n>> a method that will ensure that there is no chain split.\n>> \n>> ==References==\n>> \n>> *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html\n>> Mailing list discussion]\n>> *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\n>> P2SH flag day activation]\n>> *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n>> *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n>> *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n>> *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n>> *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n>> Version 0 Witness Program]]\n>> *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element malleability]]\n>> *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit deployment]]\n>> *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n>> *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit benefits]\n>> \n>> ==Copyright==\n>> \n>> This document is dual licensed as BSD 3-clause, and Creative Commons\n>> CC0 1.0 Universal.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n>> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/1871ce5a/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170606/1871ce5a/attachment-0001.sig>"
            },
            {
                "author": "James Hilliard",
                "date": "2017-06-07T10:13:43",
                "message_text_only": "I think even 55% would probably work out fine simply due to incentive\nstructures, once signalling is over 51% it's then clear to miners that\nnon-signalling blocks will be orphaned and the rest will rapidly\nupdate to splitprotection/BIP148. The purpose of this BIP is to reduce\nchain split risk for BIP148 since it's looking like BIP148 is going to\nbe run by a non-insignificant percentage of the economy at a minimum.\n\nOn Wed, Jun 7, 2017 at 12:20 AM, Tao Effect <contact at taoeffect.com> wrote:\n> See thread on replay attacks for why activating regardless of threshold is a\n> bad idea [1].\n>\n> BIP91 OTOH seems perfectly reasonable. 80% instead of 95% makes it more\n> difficult for miners to hold together in opposition to Core. It gives Core\n> more leverage in negotiations.\n>\n> If they don't activate with 80%, Core can release another BIP to reduce it\n> to 75%.\n>\n> Each threshold reduction makes it both more likely to succeed, but also\n> increases the likelihood of harm to the ecosystem.\n>\n> Cheers,\n> Greg\n>\n> [1]\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014497.html\n>\n> --\n> Please do not email me anything that you are not comfortable also sharing\n> with the NSA.\n>\n> On Jun 6, 2017, at 6:54 PM, James Hilliard <james.hilliard1 at gmail.com>\n> wrote:\n>\n> This is a BIP8 style soft fork so mandatory signalling will be active\n> after Aug 1st regardless.\n>\n> On Tue, Jun 6, 2017 at 8:51 PM, Tao Effect <contact at taoeffect.com> wrote:\n>\n> What is the probability that a 65% threshold is too low and can allow a\n> \"surprise miner attack\", whereby miners are kept offline before the\n> deadline, and brought online immediately after, creating potential havoc?\n>\n> (Nit: \"simple majority\" usually refers to >50%, I think, might cause\n> confusion.)\n>\n> -Greg Slepak\n>\n> --\n> Please do not email me anything that you are not comfortable also sharing\n> with the NSA.\n>\n> On Jun 6, 2017, at 5:56 PM, James Hilliard via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Due to the proposed calendar(https://segwit2x.github.io/) for the\n> SegWit2x agreement being too slow to activate SegWit mandatory\n> signalling ahead of BIP148 using BIP91 I would like to propose another\n> option that miners can use to prevent a chain split ahead of the Aug\n> 1st BIP148 activation date.\n>\n> The splitprotection soft fork is essentially BIP91 but using BIP8\n> instead of BIP9 with a lower activation threshold and immediate\n> mandatory signalling lock-in. This allows for a majority of miners to\n> activate mandatory SegWit signalling and prevent a potential chain\n> split ahead of BIP148 activation.\n>\n> This BIP allows for miners to respond to market forces quickly ahead\n> of BIP148 activation by signalling for splitprotection. Any miners\n> already running BIP148 should be encouraged to use splitprotection.\n>\n> <pre>\n> BIP: splitprotection\n> Layer: Consensus (soft fork)\n> Title: User Activated Soft Fork Split Protection\n> Author: James Hilliard <james.hilliard1 at gmail.com>\n> Comments-Summary: No comments yet.\n> Comments-URI:\n> Status: Draft\n> Type: Standards Track\n> Created: 2017-05-22\n> License: BSD-3-Clause\n>          CC0-1.0\n> </pre>\n>\n> ==Abstract==\n>\n> This document specifies a coordination mechanism for a simple majority\n> of miners to prevent a chain split ahead of BIP148 activation.\n>\n> ==Definitions==\n>\n> \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n> using bit 1, between November 15th 2016 and November 15th 2017 to\n> activate BIP141, BIP143 and BIP147.\n>\n> ==Motivation==\n>\n> The biggest risk of BIP148 is an extended chain split, this BIP\n> provides a way for a simple majority of miners to eliminate that risk.\n>\n> This BIP provides a way for a simple majority of miners to coordinate\n> activation of the existing segwit deployment with less than 95%\n> hashpower before BIP148 activation. Due to time constraints unless\n> immediately deployed BIP91 will likely not be able to enforce\n> mandatory signalling of segwit before the Aug 1st activation of\n> BIP148. This BIP provides a method for rapid miner activation of\n> SegWit mandatory signalling ahead of the BIP148 activation date. Since\n> the primary goal of this BIP is to reduce the chance of an extended\n> chain split as much as possible we activate using a simple miner\n> majority of 65% over a 504 block interval rather than a higher\n> percentage. This BIP also allows miners to signal their intention to\n> run BIP148 in order to prevent a chain split.\n>\n> ==Specification==\n>\n> While this BIP is active, all blocks must set the nVersion header top\n> 3 bits to 001 together with bit field (1<<1) (according to the\n> existing segwit deployment). Blocks that do not signal as required\n> will be rejected.\n>\n> ==Deployment==\n>\n> This BIP will be deployed by \"version bits\" with a 65%(this can be\n> adjusted if desired) activation threshold BIP9 with the name\n> \"splitprotecion\" and using bit 2.\n>\n> This BIP starts immediately and is a BIP8 style soft fork since\n> mandatory signalling will start on midnight August 1st 2017 (epoch\n> time 1501545600) regardless of whether or not this BIP has reached its\n> own signalling threshold. This BIP will cease to be active when segwit\n> is locked-in.\n>\n> === Reference implementation ===\n>\n> <pre>\n> // Check if Segregated Witness is Locked In\n> bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n> Consensus::Params& params)\n> {\n>   LOCK(cs_main);\n>   return (VersionBitsState(pindexPrev, params,\n> Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n> THRESHOLD_LOCKED_IN);\n> }\n>\n> // SPLITPROTECTION mandatory segwit signalling.\n> if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n> Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n> THRESHOLD_LOCKED_IN &&\n>    !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n> // Segwit is not locked in\n>    !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n> and is not active.\n> {\n>   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n> VERSIONBITS_TOP_BITS;\n>   bool fSegbit = (pindex->nVersion &\n> VersionBitsMask(chainparams.GetConsensus(),\n> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>   if (!(fVersionBits && fSegbit)) {\n>       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>   }\n> }\n>\n> // BIP148 mandatory segwit signalling.\n> int64_t nMedianTimePast = pindex->GetMedianTimePast();\n> if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n>    (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n>    (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n> // Segwit is not locked in\n>     !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n> // and is not active.\n> {\n>   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n> VERSIONBITS_TOP_BITS;\n>   bool fSegbit = (pindex->nVersion &\n> VersionBitsMask(chainparams.GetConsensus(),\n> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>   if (!(fVersionBits && fSegbit)) {\n>       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>   }\n> }\n> </pre>\n>\n> https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1\n>\n> ==Backwards Compatibility==\n>\n> This deployment is compatible with the existing \"segwit\" bit 1\n> deployment scheduled between midnight November 15th, 2016 and midnight\n> November 15th, 2017. This deployment is also compatible with the\n> existing BIP148 deployment. This BIP is compatible with BIP91 only if\n> BIP91 activates before it and before BIP148. Miners will need to\n> upgrade their nodes to support splitprotection otherwise they may\n> build on top of an invalid block. While this bip is active users\n> should either upgrade to splitprotection or wait for additional\n> confirmations when accepting payments.\n>\n> ==Rationale==\n>\n> Historically we have used IsSuperMajority() to activate soft forks\n> such as BIP66 which has a mandatory signalling requirement for miners\n> once activated, this ensures that miners are aware of new rules being\n> enforced. This technique can be leveraged to lower the signalling\n> threshold of a soft fork while it is in the process of being deployed\n> in a backwards compatible way. We also use a BIP8 style timeout to\n> ensure that this BIP is compatible with BIP148 and that BIP148\n> compatible mandatory signalling activates regardless of miner\n> signalling levels.\n>\n> By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n> deployment, this BIP can cause the existing \"segwit\" deployment to\n> activate without needing to release a new deployment. As we approach\n> BIP148 activation it may be desirable for a majority of miners to have\n> a method that will ensure that there is no chain split.\n>\n> ==References==\n>\n> *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html\n> Mailing list discussion]\n> *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\n> P2SH flag day activation]\n> *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n> *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n> *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n> *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n> *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n> Version 0 Witness Program]]\n> *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element malleability]]\n> *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit deployment]]\n> *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n> *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit benefits]\n>\n> ==Copyright==\n>\n> This document is dual licensed as BSD 3-clause, and Creative Commons\n> CC0 1.0 Universal.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2017-06-07T14:10:48",
                "message_text_only": "This is, by far, the safest way for miners to quickly defend against a\nchain split, much better than a -bip148 option.   This allows miners to\ndefend themselves, with very little risk, since the defense is only\nactivated if the majority of miners do so. I would move for a very rapid\ndeployment.   Only miners would need to upgrade.   Regular users would not\nhave to concern themselves with this release.\n\nOn Wed, Jun 7, 2017 at 6:13 AM, James Hilliard via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I think even 55% would probably work out fine simply due to incentive\n> structures, once signalling is over 51% it's then clear to miners that\n> non-signalling blocks will be orphaned and the rest will rapidly\n> update to splitprotection/BIP148. The purpose of this BIP is to reduce\n> chain split risk for BIP148 since it's looking like BIP148 is going to\n> be run by a non-insignificant percentage of the economy at a minimum.\n>\n> On Wed, Jun 7, 2017 at 12:20 AM, Tao Effect <contact at taoeffect.com> wrote:\n> > See thread on replay attacks for why activating regardless of threshold\n> is a\n> > bad idea [1].\n> >\n> > BIP91 OTOH seems perfectly reasonable. 80% instead of 95% makes it more\n> > difficult for miners to hold together in opposition to Core. It gives\n> Core\n> > more leverage in negotiations.\n> >\n> > If they don't activate with 80%, Core can release another BIP to reduce\n> it\n> > to 75%.\n> >\n> > Each threshold reduction makes it both more likely to succeed, but also\n> > increases the likelihood of harm to the ecosystem.\n> >\n> > Cheers,\n> > Greg\n> >\n> > [1]\n> > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/\n> 2017-June/014497.html\n> >\n> > --\n> > Please do not email me anything that you are not comfortable also sharing\n> > with the NSA.\n> >\n> > On Jun 6, 2017, at 6:54 PM, James Hilliard <james.hilliard1 at gmail.com>\n> > wrote:\n> >\n> > This is a BIP8 style soft fork so mandatory signalling will be active\n> > after Aug 1st regardless.\n> >\n> > On Tue, Jun 6, 2017 at 8:51 PM, Tao Effect <contact at taoeffect.com>\n> wrote:\n> >\n> > What is the probability that a 65% threshold is too low and can allow a\n> > \"surprise miner attack\", whereby miners are kept offline before the\n> > deadline, and brought online immediately after, creating potential havoc?\n> >\n> > (Nit: \"simple majority\" usually refers to >50%, I think, might cause\n> > confusion.)\n> >\n> > -Greg Slepak\n> >\n> > --\n> > Please do not email me anything that you are not comfortable also sharing\n> > with the NSA.\n> >\n> > On Jun 6, 2017, at 5:56 PM, James Hilliard via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> > Due to the proposed calendar(https://segwit2x.github.io/) for the\n> > SegWit2x agreement being too slow to activate SegWit mandatory\n> > signalling ahead of BIP148 using BIP91 I would like to propose another\n> > option that miners can use to prevent a chain split ahead of the Aug\n> > 1st BIP148 activation date.\n> >\n> > The splitprotection soft fork is essentially BIP91 but using BIP8\n> > instead of BIP9 with a lower activation threshold and immediate\n> > mandatory signalling lock-in. This allows for a majority of miners to\n> > activate mandatory SegWit signalling and prevent a potential chain\n> > split ahead of BIP148 activation.\n> >\n> > This BIP allows for miners to respond to market forces quickly ahead\n> > of BIP148 activation by signalling for splitprotection. Any miners\n> > already running BIP148 should be encouraged to use splitprotection.\n> >\n> > <pre>\n> > BIP: splitprotection\n> > Layer: Consensus (soft fork)\n> > Title: User Activated Soft Fork Split Protection\n> > Author: James Hilliard <james.hilliard1 at gmail.com>\n> > Comments-Summary: No comments yet.\n> > Comments-URI:\n> > Status: Draft\n> > Type: Standards Track\n> > Created: 2017-05-22\n> > License: BSD-3-Clause\n> >          CC0-1.0\n> > </pre>\n> >\n> > ==Abstract==\n> >\n> > This document specifies a coordination mechanism for a simple majority\n> > of miners to prevent a chain split ahead of BIP148 activation.\n> >\n> > ==Definitions==\n> >\n> > \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n> > using bit 1, between November 15th 2016 and November 15th 2017 to\n> > activate BIP141, BIP143 and BIP147.\n> >\n> > ==Motivation==\n> >\n> > The biggest risk of BIP148 is an extended chain split, this BIP\n> > provides a way for a simple majority of miners to eliminate that risk.\n> >\n> > This BIP provides a way for a simple majority of miners to coordinate\n> > activation of the existing segwit deployment with less than 95%\n> > hashpower before BIP148 activation. Due to time constraints unless\n> > immediately deployed BIP91 will likely not be able to enforce\n> > mandatory signalling of segwit before the Aug 1st activation of\n> > BIP148. This BIP provides a method for rapid miner activation of\n> > SegWit mandatory signalling ahead of the BIP148 activation date. Since\n> > the primary goal of this BIP is to reduce the chance of an extended\n> > chain split as much as possible we activate using a simple miner\n> > majority of 65% over a 504 block interval rather than a higher\n> > percentage. This BIP also allows miners to signal their intention to\n> > run BIP148 in order to prevent a chain split.\n> >\n> > ==Specification==\n> >\n> > While this BIP is active, all blocks must set the nVersion header top\n> > 3 bits to 001 together with bit field (1<<1) (according to the\n> > existing segwit deployment). Blocks that do not signal as required\n> > will be rejected.\n> >\n> > ==Deployment==\n> >\n> > This BIP will be deployed by \"version bits\" with a 65%(this can be\n> > adjusted if desired) activation threshold BIP9 with the name\n> > \"splitprotecion\" and using bit 2.\n> >\n> > This BIP starts immediately and is a BIP8 style soft fork since\n> > mandatory signalling will start on midnight August 1st 2017 (epoch\n> > time 1501545600) regardless of whether or not this BIP has reached its\n> > own signalling threshold. This BIP will cease to be active when segwit\n> > is locked-in.\n> >\n> > === Reference implementation ===\n> >\n> > <pre>\n> > // Check if Segregated Witness is Locked In\n> > bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n> > Consensus::Params& params)\n> > {\n> >   LOCK(cs_main);\n> >   return (VersionBitsState(pindexPrev, params,\n> > Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n> > THRESHOLD_LOCKED_IN);\n> > }\n> >\n> > // SPLITPROTECTION mandatory segwit signalling.\n> > if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n> > Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n> > THRESHOLD_LOCKED_IN &&\n> >    !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n> > // Segwit is not locked in\n> >    !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n> > and is not active.\n> > {\n> >   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n> > VERSIONBITS_TOP_BITS;\n> >   bool fSegbit = (pindex->nVersion &\n> > VersionBitsMask(chainparams.GetConsensus(),\n> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n> >   if (!(fVersionBits && fSegbit)) {\n> >       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n> >   }\n> > }\n> >\n> > // BIP148 mandatory segwit signalling.\n> > int64_t nMedianTimePast = pindex->GetMedianTimePast();\n> > if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n> >    (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n> >    (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n> > // Segwit is not locked in\n> >     !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n> > // and is not active.\n> > {\n> >   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n> > VERSIONBITS_TOP_BITS;\n> >   bool fSegbit = (pindex->nVersion &\n> > VersionBitsMask(chainparams.GetConsensus(),\n> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n> >   if (!(fVersionBits && fSegbit)) {\n> >       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n> >   }\n> > }\n> > </pre>\n> >\n> > https://github.com/bitcoin/bitcoin/compare/0.14...\n> jameshilliard:splitprotection-v0.14.1\n> >\n> > ==Backwards Compatibility==\n> >\n> > This deployment is compatible with the existing \"segwit\" bit 1\n> > deployment scheduled between midnight November 15th, 2016 and midnight\n> > November 15th, 2017. This deployment is also compatible with the\n> > existing BIP148 deployment. This BIP is compatible with BIP91 only if\n> > BIP91 activates before it and before BIP148. Miners will need to\n> > upgrade their nodes to support splitprotection otherwise they may\n> > build on top of an invalid block. While this bip is active users\n> > should either upgrade to splitprotection or wait for additional\n> > confirmations when accepting payments.\n> >\n> > ==Rationale==\n> >\n> > Historically we have used IsSuperMajority() to activate soft forks\n> > such as BIP66 which has a mandatory signalling requirement for miners\n> > once activated, this ensures that miners are aware of new rules being\n> > enforced. This technique can be leveraged to lower the signalling\n> > threshold of a soft fork while it is in the process of being deployed\n> > in a backwards compatible way. We also use a BIP8 style timeout to\n> > ensure that this BIP is compatible with BIP148 and that BIP148\n> > compatible mandatory signalling activates regardless of miner\n> > signalling levels.\n> >\n> > By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n> > deployment, this BIP can cause the existing \"segwit\" deployment to\n> > activate without needing to release a new deployment. As we approach\n> > BIP148 activation it may be desirable for a majority of miners to have\n> > a method that will ensure that there is no chain split.\n> >\n> > ==References==\n> >\n> > *[https://lists.linuxfoundation.org/pipermail/\n> bitcoin-dev/2017-March/013714.html\n> > Mailing list discussion]\n> > *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.\n> cpp#L1281-L1283\n> > P2SH flag day activation]\n> > *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n> > *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n> > *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n> > *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n> > *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n> > Version 0 Witness Program]]\n> > *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element\n> malleability]]\n> > *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit deployment]]\n> > *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n> > *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit\n> benefits]\n> >\n> > ==Copyright==\n> >\n> > This document is dual licensed as BSD 3-clause, and Creative Commons\n> > CC0 1.0 Universal.\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> >\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170607/881a9a7d/attachment-0001.html>"
            },
            {
                "author": "Jacob Eliosoff",
                "date": "2017-06-07T16:44:32",
                "message_text_only": "This is not the safest defense against a split.  If 70% of miners run\n\"splitprotection\", and 0.1% run BIP148, there's no \"safety\"/\"defense\"\nreason for splitprotection to activate segwit.  It should only do so if\n*BIP148* support (NB: not just segwit support!) >50%.\n\nThe truly defensive logic is \"If the majority supports orphaning non-segwit\nblocks starting Aug 1, I'll join them.\"\n\nIf the real goal of this BIP is to induce miners to run segwit, then fair\nenough.  But passing it off as the safest defense is bad faith.\n\n\nOn Wed, Jun 7, 2017 at 10:10 AM, Erik Aronesty via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> This is, by far, the safest way for miners to quickly defend against a\n> chain split, much better than a -bip148 option.   This allows miners to\n> defend themselves, with very little risk, since the defense is only\n> activated if the majority of miners do so. I would move for a very rapid\n> deployment.   Only miners would need to upgrade.   Regular users would not\n> have to concern themselves with this release.\n>\n> On Wed, Jun 7, 2017 at 6:13 AM, James Hilliard via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> I think even 55% would probably work out fine simply due to incentive\n>> structures, once signalling is over 51% it's then clear to miners that\n>> non-signalling blocks will be orphaned and the rest will rapidly\n>> update to splitprotection/BIP148. The purpose of this BIP is to reduce\n>> chain split risk for BIP148 since it's looking like BIP148 is going to\n>> be run by a non-insignificant percentage of the economy at a minimum.\n>>\n>> On Wed, Jun 7, 2017 at 12:20 AM, Tao Effect <contact at taoeffect.com>\n>> wrote:\n>> > See thread on replay attacks for why activating regardless of threshold\n>> is a\n>> > bad idea [1].\n>> >\n>> > BIP91 OTOH seems perfectly reasonable. 80% instead of 95% makes it more\n>> > difficult for miners to hold together in opposition to Core. It gives\n>> Core\n>> > more leverage in negotiations.\n>> >\n>> > If they don't activate with 80%, Core can release another BIP to reduce\n>> it\n>> > to 75%.\n>> >\n>> > Each threshold reduction makes it both more likely to succeed, but also\n>> > increases the likelihood of harm to the ecosystem.\n>> >\n>> > Cheers,\n>> > Greg\n>> >\n>> > [1]\n>> > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017\n>> -June/014497.html\n>> >\n>> > --\n>> > Please do not email me anything that you are not comfortable also\n>> sharing\n>> > with the NSA.\n>> >\n>> > On Jun 6, 2017, at 6:54 PM, James Hilliard <james.hilliard1 at gmail.com>\n>> > wrote:\n>> >\n>> > This is a BIP8 style soft fork so mandatory signalling will be active\n>> > after Aug 1st regardless.\n>> >\n>> > On Tue, Jun 6, 2017 at 8:51 PM, Tao Effect <contact at taoeffect.com>\n>> wrote:\n>> >\n>> > What is the probability that a 65% threshold is too low and can allow a\n>> > \"surprise miner attack\", whereby miners are kept offline before the\n>> > deadline, and brought online immediately after, creating potential\n>> havoc?\n>> >\n>> > (Nit: \"simple majority\" usually refers to >50%, I think, might cause\n>> > confusion.)\n>> >\n>> > -Greg Slepak\n>> >\n>> > --\n>> > Please do not email me anything that you are not comfortable also\n>> sharing\n>> > with the NSA.\n>> >\n>> > On Jun 6, 2017, at 5:56 PM, James Hilliard via bitcoin-dev\n>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >\n>> > Due to the proposed calendar(https://segwit2x.github.io/) for the\n>> > SegWit2x agreement being too slow to activate SegWit mandatory\n>> > signalling ahead of BIP148 using BIP91 I would like to propose another\n>> > option that miners can use to prevent a chain split ahead of the Aug\n>> > 1st BIP148 activation date.\n>> >\n>> > The splitprotection soft fork is essentially BIP91 but using BIP8\n>> > instead of BIP9 with a lower activation threshold and immediate\n>> > mandatory signalling lock-in. This allows for a majority of miners to\n>> > activate mandatory SegWit signalling and prevent a potential chain\n>> > split ahead of BIP148 activation.\n>> >\n>> > This BIP allows for miners to respond to market forces quickly ahead\n>> > of BIP148 activation by signalling for splitprotection. Any miners\n>> > already running BIP148 should be encouraged to use splitprotection.\n>> >\n>> > <pre>\n>> > BIP: splitprotection\n>> > Layer: Consensus (soft fork)\n>> > Title: User Activated Soft Fork Split Protection\n>> > Author: James Hilliard <james.hilliard1 at gmail.com>\n>> > Comments-Summary: No comments yet.\n>> > Comments-URI:\n>> > Status: Draft\n>> > Type: Standards Track\n>> > Created: 2017-05-22\n>> > License: BSD-3-Clause\n>> >          CC0-1.0\n>> > </pre>\n>> >\n>> > ==Abstract==\n>> >\n>> > This document specifies a coordination mechanism for a simple majority\n>> > of miners to prevent a chain split ahead of BIP148 activation.\n>> >\n>> > ==Definitions==\n>> >\n>> > \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n>> > using bit 1, between November 15th 2016 and November 15th 2017 to\n>> > activate BIP141, BIP143 and BIP147.\n>> >\n>> > ==Motivation==\n>> >\n>> > The biggest risk of BIP148 is an extended chain split, this BIP\n>> > provides a way for a simple majority of miners to eliminate that risk.\n>> >\n>> > This BIP provides a way for a simple majority of miners to coordinate\n>> > activation of the existing segwit deployment with less than 95%\n>> > hashpower before BIP148 activation. Due to time constraints unless\n>> > immediately deployed BIP91 will likely not be able to enforce\n>> > mandatory signalling of segwit before the Aug 1st activation of\n>> > BIP148. This BIP provides a method for rapid miner activation of\n>> > SegWit mandatory signalling ahead of the BIP148 activation date. Since\n>> > the primary goal of this BIP is to reduce the chance of an extended\n>> > chain split as much as possible we activate using a simple miner\n>> > majority of 65% over a 504 block interval rather than a higher\n>> > percentage. This BIP also allows miners to signal their intention to\n>> > run BIP148 in order to prevent a chain split.\n>> >\n>> > ==Specification==\n>> >\n>> > While this BIP is active, all blocks must set the nVersion header top\n>> > 3 bits to 001 together with bit field (1<<1) (according to the\n>> > existing segwit deployment). Blocks that do not signal as required\n>> > will be rejected.\n>> >\n>> > ==Deployment==\n>> >\n>> > This BIP will be deployed by \"version bits\" with a 65%(this can be\n>> > adjusted if desired) activation threshold BIP9 with the name\n>> > \"splitprotecion\" and using bit 2.\n>> >\n>> > This BIP starts immediately and is a BIP8 style soft fork since\n>> > mandatory signalling will start on midnight August 1st 2017 (epoch\n>> > time 1501545600) regardless of whether or not this BIP has reached its\n>> > own signalling threshold. This BIP will cease to be active when segwit\n>> > is locked-in.\n>> >\n>> > === Reference implementation ===\n>> >\n>> > <pre>\n>> > // Check if Segregated Witness is Locked In\n>> > bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n>> > Consensus::Params& params)\n>> > {\n>> >   LOCK(cs_main);\n>> >   return (VersionBitsState(pindexPrev, params,\n>> > Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n>> > THRESHOLD_LOCKED_IN);\n>> > }\n>> >\n>> > // SPLITPROTECTION mandatory segwit signalling.\n>> > if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n>> > Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n>> > THRESHOLD_LOCKED_IN &&\n>> >    !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>> > // Segwit is not locked in\n>> >    !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n>> > and is not active.\n>> > {\n>> >   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>> > VERSIONBITS_TOP_BITS;\n>> >   bool fSegbit = (pindex->nVersion &\n>> > VersionBitsMask(chainparams.GetConsensus(),\n>> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>> >   if (!(fVersionBits && fSegbit)) {\n>> >       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>> >   }\n>> > }\n>> >\n>> > // BIP148 mandatory segwit signalling.\n>> > int64_t nMedianTimePast = pindex->GetMedianTimePast();\n>> > if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n>> >    (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n>> >    (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>> > // Segwit is not locked in\n>> >     !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n>> > // and is not active.\n>> > {\n>> >   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>> > VERSIONBITS_TOP_BITS;\n>> >   bool fSegbit = (pindex->nVersion &\n>> > VersionBitsMask(chainparams.GetConsensus(),\n>> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>> >   if (!(fVersionBits && fSegbit)) {\n>> >       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>> >   }\n>> > }\n>> > </pre>\n>> >\n>> > https://github.com/bitcoin/bitcoin/compare/0.14...jameshilli\n>> ard:splitprotection-v0.14.1\n>> >\n>> > ==Backwards Compatibility==\n>> >\n>> > This deployment is compatible with the existing \"segwit\" bit 1\n>> > deployment scheduled between midnight November 15th, 2016 and midnight\n>> > November 15th, 2017. This deployment is also compatible with the\n>> > existing BIP148 deployment. This BIP is compatible with BIP91 only if\n>> > BIP91 activates before it and before BIP148. Miners will need to\n>> > upgrade their nodes to support splitprotection otherwise they may\n>> > build on top of an invalid block. While this bip is active users\n>> > should either upgrade to splitprotection or wait for additional\n>> > confirmations when accepting payments.\n>> >\n>> > ==Rationale==\n>> >\n>> > Historically we have used IsSuperMajority() to activate soft forks\n>> > such as BIP66 which has a mandatory signalling requirement for miners\n>> > once activated, this ensures that miners are aware of new rules being\n>> > enforced. This technique can be leveraged to lower the signalling\n>> > threshold of a soft fork while it is in the process of being deployed\n>> > in a backwards compatible way. We also use a BIP8 style timeout to\n>> > ensure that this BIP is compatible with BIP148 and that BIP148\n>> > compatible mandatory signalling activates regardless of miner\n>> > signalling levels.\n>> >\n>> > By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n>> > deployment, this BIP can cause the existing \"segwit\" deployment to\n>> > activate without needing to release a new deployment. As we approach\n>> > BIP148 activation it may be desirable for a majority of miners to have\n>> > a method that will ensure that there is no chain split.\n>> >\n>> > ==References==\n>> >\n>> > *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/\n>> 2017-March/013714.html\n>> > Mailing list discussion]\n>> > *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cp\n>> p#L1281-L1283\n>> > P2SH flag day activation]\n>> > *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n>> > *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n>> > *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n>> > *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n>> > *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n>> > Version 0 Witness Program]]\n>> > *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element\n>> malleability]]\n>> > *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit deployment]]\n>> > *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n>> > *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit\n>> benefits]\n>> >\n>> > ==Copyright==\n>> >\n>> > This document is dual licensed as BSD 3-clause, and Creative Commons\n>> > CC0 1.0 Universal.\n>> > _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >\n>> >\n>> >\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170607/308e84ea/attachment-0001.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2017-06-07T18:05:52",
                "message_text_only": "> But passing it off as the safest defense is bad faith.\n\nWithout this option, a miner has to guess whether a split will be\neconomically impacting.   With this option, his miner will automatically\nswitch to the chain least likely to get wiped out... as soon as a simple\nmajority of miners supports it.\n\n\nOn Wed, Jun 7, 2017 at 12:44 PM, Jacob Eliosoff <jacob.eliosoff at gmail.com>\nwrote:\n\n> This is not the safest defense against a split.  If 70% of miners run\n> \"splitprotection\", and 0.1% run BIP148, there's no \"safety\"/\"defense\"\n> reason for splitprotection to activate segwit.  It should only do so if\n> *BIP148* support (NB: not just segwit support!) >50%.\n>\n> The truly defensive logic is \"If the majority supports orphaning\n> non-segwit blocks starting Aug 1, I'll join them.\"\n>\n> If the real goal of this BIP is to induce miners to run segwit, then fair\n> enough.  But passing it off as the safest defense is bad faith.\n>\n>\n> On Wed, Jun 7, 2017 at 10:10 AM, Erik Aronesty via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> This is, by far, the safest way for miners to quickly defend against a\n>> chain split, much better than a -bip148 option.   This allows miners to\n>> defend themselves, with very little risk, since the defense is only\n>> activated if the majority of miners do so. I would move for a very rapid\n>> deployment.   Only miners would need to upgrade.   Regular users would not\n>> have to concern themselves with this release.\n>>\n>> On Wed, Jun 7, 2017 at 6:13 AM, James Hilliard via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> I think even 55% would probably work out fine simply due to incentive\n>>> structures, once signalling is over 51% it's then clear to miners that\n>>> non-signalling blocks will be orphaned and the rest will rapidly\n>>> update to splitprotection/BIP148. The purpose of this BIP is to reduce\n>>> chain split risk for BIP148 since it's looking like BIP148 is going to\n>>> be run by a non-insignificant percentage of the economy at a minimum.\n>>>\n>>> On Wed, Jun 7, 2017 at 12:20 AM, Tao Effect <contact at taoeffect.com>\n>>> wrote:\n>>> > See thread on replay attacks for why activating regardless of\n>>> threshold is a\n>>> > bad idea [1].\n>>> >\n>>> > BIP91 OTOH seems perfectly reasonable. 80% instead of 95% makes it more\n>>> > difficult for miners to hold together in opposition to Core. It gives\n>>> Core\n>>> > more leverage in negotiations.\n>>> >\n>>> > If they don't activate with 80%, Core can release another BIP to\n>>> reduce it\n>>> > to 75%.\n>>> >\n>>> > Each threshold reduction makes it both more likely to succeed, but also\n>>> > increases the likelihood of harm to the ecosystem.\n>>> >\n>>> > Cheers,\n>>> > Greg\n>>> >\n>>> > [1]\n>>> > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017\n>>> -June/014497.html\n>>> >\n>>> > --\n>>> > Please do not email me anything that you are not comfortable also\n>>> sharing\n>>> > with the NSA.\n>>> >\n>>> > On Jun 6, 2017, at 6:54 PM, James Hilliard <james.hilliard1 at gmail.com>\n>>> > wrote:\n>>> >\n>>> > This is a BIP8 style soft fork so mandatory signalling will be active\n>>> > after Aug 1st regardless.\n>>> >\n>>> > On Tue, Jun 6, 2017 at 8:51 PM, Tao Effect <contact at taoeffect.com>\n>>> wrote:\n>>> >\n>>> > What is the probability that a 65% threshold is too low and can allow a\n>>> > \"surprise miner attack\", whereby miners are kept offline before the\n>>> > deadline, and brought online immediately after, creating potential\n>>> havoc?\n>>> >\n>>> > (Nit: \"simple majority\" usually refers to >50%, I think, might cause\n>>> > confusion.)\n>>> >\n>>> > -Greg Slepak\n>>> >\n>>> > --\n>>> > Please do not email me anything that you are not comfortable also\n>>> sharing\n>>> > with the NSA.\n>>> >\n>>> > On Jun 6, 2017, at 5:56 PM, James Hilliard via bitcoin-dev\n>>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> >\n>>> > Due to the proposed calendar(https://segwit2x.github.io/) for the\n>>> > SegWit2x agreement being too slow to activate SegWit mandatory\n>>> > signalling ahead of BIP148 using BIP91 I would like to propose another\n>>> > option that miners can use to prevent a chain split ahead of the Aug\n>>> > 1st BIP148 activation date.\n>>> >\n>>> > The splitprotection soft fork is essentially BIP91 but using BIP8\n>>> > instead of BIP9 with a lower activation threshold and immediate\n>>> > mandatory signalling lock-in. This allows for a majority of miners to\n>>> > activate mandatory SegWit signalling and prevent a potential chain\n>>> > split ahead of BIP148 activation.\n>>> >\n>>> > This BIP allows for miners to respond to market forces quickly ahead\n>>> > of BIP148 activation by signalling for splitprotection. Any miners\n>>> > already running BIP148 should be encouraged to use splitprotection.\n>>> >\n>>> > <pre>\n>>> > BIP: splitprotection\n>>> > Layer: Consensus (soft fork)\n>>> > Title: User Activated Soft Fork Split Protection\n>>> > Author: James Hilliard <james.hilliard1 at gmail.com>\n>>> > Comments-Summary: No comments yet.\n>>> > Comments-URI:\n>>> > Status: Draft\n>>> > Type: Standards Track\n>>> > Created: 2017-05-22\n>>> > License: BSD-3-Clause\n>>> >          CC0-1.0\n>>> > </pre>\n>>> >\n>>> > ==Abstract==\n>>> >\n>>> > This document specifies a coordination mechanism for a simple majority\n>>> > of miners to prevent a chain split ahead of BIP148 activation.\n>>> >\n>>> > ==Definitions==\n>>> >\n>>> > \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n>>> > using bit 1, between November 15th 2016 and November 15th 2017 to\n>>> > activate BIP141, BIP143 and BIP147.\n>>> >\n>>> > ==Motivation==\n>>> >\n>>> > The biggest risk of BIP148 is an extended chain split, this BIP\n>>> > provides a way for a simple majority of miners to eliminate that risk.\n>>> >\n>>> > This BIP provides a way for a simple majority of miners to coordinate\n>>> > activation of the existing segwit deployment with less than 95%\n>>> > hashpower before BIP148 activation. Due to time constraints unless\n>>> > immediately deployed BIP91 will likely not be able to enforce\n>>> > mandatory signalling of segwit before the Aug 1st activation of\n>>> > BIP148. This BIP provides a method for rapid miner activation of\n>>> > SegWit mandatory signalling ahead of the BIP148 activation date. Since\n>>> > the primary goal of this BIP is to reduce the chance of an extended\n>>> > chain split as much as possible we activate using a simple miner\n>>> > majority of 65% over a 504 block interval rather than a higher\n>>> > percentage. This BIP also allows miners to signal their intention to\n>>> > run BIP148 in order to prevent a chain split.\n>>> >\n>>> > ==Specification==\n>>> >\n>>> > While this BIP is active, all blocks must set the nVersion header top\n>>> > 3 bits to 001 together with bit field (1<<1) (according to the\n>>> > existing segwit deployment). Blocks that do not signal as required\n>>> > will be rejected.\n>>> >\n>>> > ==Deployment==\n>>> >\n>>> > This BIP will be deployed by \"version bits\" with a 65%(this can be\n>>> > adjusted if desired) activation threshold BIP9 with the name\n>>> > \"splitprotecion\" and using bit 2.\n>>> >\n>>> > This BIP starts immediately and is a BIP8 style soft fork since\n>>> > mandatory signalling will start on midnight August 1st 2017 (epoch\n>>> > time 1501545600) regardless of whether or not this BIP has reached its\n>>> > own signalling threshold. This BIP will cease to be active when segwit\n>>> > is locked-in.\n>>> >\n>>> > === Reference implementation ===\n>>> >\n>>> > <pre>\n>>> > // Check if Segregated Witness is Locked In\n>>> > bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n>>> > Consensus::Params& params)\n>>> > {\n>>> >   LOCK(cs_main);\n>>> >   return (VersionBitsState(pindexPrev, params,\n>>> > Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n>>> > THRESHOLD_LOCKED_IN);\n>>> > }\n>>> >\n>>> > // SPLITPROTECTION mandatory segwit signalling.\n>>> > if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n>>> > Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n>>> > THRESHOLD_LOCKED_IN &&\n>>> >    !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>>> > // Segwit is not locked in\n>>> >    !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n>>> > and is not active.\n>>> > {\n>>> >   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>>> > VERSIONBITS_TOP_BITS;\n>>> >   bool fSegbit = (pindex->nVersion &\n>>> > VersionBitsMask(chainparams.GetConsensus(),\n>>> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>> >   if (!(fVersionBits && fSegbit)) {\n>>> >       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>>> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>> >   }\n>>> > }\n>>> >\n>>> > // BIP148 mandatory segwit signalling.\n>>> > int64_t nMedianTimePast = pindex->GetMedianTimePast();\n>>> > if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00\n>>> UTC\n>>> >    (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n>>> >    (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>>> > // Segwit is not locked in\n>>> >     !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n>>> > // and is not active.\n>>> > {\n>>> >   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>>> > VERSIONBITS_TOP_BITS;\n>>> >   bool fSegbit = (pindex->nVersion &\n>>> > VersionBitsMask(chainparams.GetConsensus(),\n>>> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>> >   if (!(fVersionBits && fSegbit)) {\n>>> >       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>>> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>> >   }\n>>> > }\n>>> > </pre>\n>>> >\n>>> > https://github.com/bitcoin/bitcoin/compare/0.14...jameshilli\n>>> ard:splitprotection-v0.14.1\n>>> >\n>>> > ==Backwards Compatibility==\n>>> >\n>>> > This deployment is compatible with the existing \"segwit\" bit 1\n>>> > deployment scheduled between midnight November 15th, 2016 and midnight\n>>> > November 15th, 2017. This deployment is also compatible with the\n>>> > existing BIP148 deployment. This BIP is compatible with BIP91 only if\n>>> > BIP91 activates before it and before BIP148. Miners will need to\n>>> > upgrade their nodes to support splitprotection otherwise they may\n>>> > build on top of an invalid block. While this bip is active users\n>>> > should either upgrade to splitprotection or wait for additional\n>>> > confirmations when accepting payments.\n>>> >\n>>> > ==Rationale==\n>>> >\n>>> > Historically we have used IsSuperMajority() to activate soft forks\n>>> > such as BIP66 which has a mandatory signalling requirement for miners\n>>> > once activated, this ensures that miners are aware of new rules being\n>>> > enforced. This technique can be leveraged to lower the signalling\n>>> > threshold of a soft fork while it is in the process of being deployed\n>>> > in a backwards compatible way. We also use a BIP8 style timeout to\n>>> > ensure that this BIP is compatible with BIP148 and that BIP148\n>>> > compatible mandatory signalling activates regardless of miner\n>>> > signalling levels.\n>>> >\n>>> > By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n>>> > deployment, this BIP can cause the existing \"segwit\" deployment to\n>>> > activate without needing to release a new deployment. As we approach\n>>> > BIP148 activation it may be desirable for a majority of miners to have\n>>> > a method that will ensure that there is no chain split.\n>>> >\n>>> > ==References==\n>>> >\n>>> > *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/20\n>>> 17-March/013714.html\n>>> > Mailing list discussion]\n>>> > *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cp\n>>> p#L1281-L1283\n>>> > P2SH flag day activation]\n>>> > *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n>>> > *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n>>> > *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n>>> > *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n>>> > *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n>>> > Version 0 Witness Program]]\n>>> > *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element\n>>> malleability]]\n>>> > *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit\n>>> deployment]]\n>>> > *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n>>> > *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit\n>>> benefits]\n>>> >\n>>> > ==Copyright==\n>>> >\n>>> > This document is dual licensed as BSD 3-clause, and Creative Commons\n>>> > CC0 1.0 Universal.\n>>> > _______________________________________________\n>>> > bitcoin-dev mailing list\n>>> > bitcoin-dev at lists.linuxfoundation.org\n>>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>> >\n>>> >\n>>> >\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170607/69b8b33e/attachment-0001.html>"
            },
            {
                "author": "Jacob Eliosoff",
                "date": "2017-06-07T19:39:48",
                "message_text_only": "You're missing my point.  \"As soon as a simple majority supports it\" - what\nis \"it\"?  BIP148?  Or \"deferring to the miner consensus on BIP148\"?  It's\nthe difference between supporting one side of a vote, vs supporting\ndeferral to the outcome of the vote.\n\nOr if you mean, the safe thing for miners is to orphan non-segwit blocks\nAug 1 *regardless* of the miner consensus (since the economic consensus\nmight differ), then there's zero need for this BIP: they should just run\nBIP148.\n\nAs I said: this BIP should be corrected to only orphan if >50% signal for\nBIP148.  Or, define two bits, one meaning \"I support BIP148,\" the other \"I\nwill go w/ the miner majority on BIP148.\"  Fudging them this way is\ndeceptive.\n\n\nOn Jun 7, 2017 2:05 PM, \"Erik Aronesty\" <erik at q32.com> wrote:\n\n> But passing it off as the safest defense is bad faith.\n\nWithout this option, a miner has to guess whether a split will be\neconomically impacting.   With this option, his miner will automatically\nswitch to the chain least likely to get wiped out... as soon as a simple\nmajority of miners supports it.\n\n\nOn Wed, Jun 7, 2017 at 12:44 PM, Jacob Eliosoff <jacob.eliosoff at gmail.com>\nwrote:\n\n> This is not the safest defense against a split.  If 70% of miners run\n> \"splitprotection\", and 0.1% run BIP148, there's no \"safety\"/\"defense\"\n> reason for splitprotection to activate segwit.  It should only do so if\n> *BIP148* support (NB: not just segwit support!) >50%.\n>\n> The truly defensive logic is \"If the majority supports orphaning\n> non-segwit blocks starting Aug 1, I'll join them.\"\n>\n> If the real goal of this BIP is to induce miners to run segwit, then fair\n> enough.  But passing it off as the safest defense is bad faith.\n>\n>\n> On Wed, Jun 7, 2017 at 10:10 AM, Erik Aronesty via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> This is, by far, the safest way for miners to quickly defend against a\n>> chain split, much better than a -bip148 option.   This allows miners to\n>> defend themselves, with very little risk, since the defense is only\n>> activated if the majority of miners do so. I would move for a very rapid\n>> deployment.   Only miners would need to upgrade.   Regular users would not\n>> have to concern themselves with this release.\n>>\n>> On Wed, Jun 7, 2017 at 6:13 AM, James Hilliard via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> I think even 55% would probably work out fine simply due to incentive\n>>> structures, once signalling is over 51% it's then clear to miners that\n>>> non-signalling blocks will be orphaned and the rest will rapidly\n>>> update to splitprotection/BIP148. The purpose of this BIP is to reduce\n>>> chain split risk for BIP148 since it's looking like BIP148 is going to\n>>> be run by a non-insignificant percentage of the economy at a minimum.\n>>>\n>>> On Wed, Jun 7, 2017 at 12:20 AM, Tao Effect <contact at taoeffect.com>\n>>> wrote:\n>>> > See thread on replay attacks for why activating regardless of\n>>> threshold is a\n>>> > bad idea [1].\n>>> >\n>>> > BIP91 OTOH seems perfectly reasonable. 80% instead of 95% makes it more\n>>> > difficult for miners to hold together in opposition to Core. It gives\n>>> Core\n>>> > more leverage in negotiations.\n>>> >\n>>> > If they don't activate with 80%, Core can release another BIP to\n>>> reduce it\n>>> > to 75%.\n>>> >\n>>> > Each threshold reduction makes it both more likely to succeed, but also\n>>> > increases the likelihood of harm to the ecosystem.\n>>> >\n>>> > Cheers,\n>>> > Greg\n>>> >\n>>> > [1]\n>>> > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017\n>>> -June/014497.html\n>>> >\n>>> > --\n>>> > Please do not email me anything that you are not comfortable also\n>>> sharing\n>>> > with the NSA.\n>>> >\n>>> > On Jun 6, 2017, at 6:54 PM, James Hilliard <james.hilliard1 at gmail.com>\n>>> > wrote:\n>>> >\n>>> > This is a BIP8 style soft fork so mandatory signalling will be active\n>>> > after Aug 1st regardless.\n>>> >\n>>> > On Tue, Jun 6, 2017 at 8:51 PM, Tao Effect <contact at taoeffect.com>\n>>> wrote:\n>>> >\n>>> > What is the probability that a 65% threshold is too low and can allow a\n>>> > \"surprise miner attack\", whereby miners are kept offline before the\n>>> > deadline, and brought online immediately after, creating potential\n>>> havoc?\n>>> >\n>>> > (Nit: \"simple majority\" usually refers to >50%, I think, might cause\n>>> > confusion.)\n>>> >\n>>> > -Greg Slepak\n>>> >\n>>> > --\n>>> > Please do not email me anything that you are not comfortable also\n>>> sharing\n>>> > with the NSA.\n>>> >\n>>> > On Jun 6, 2017, at 5:56 PM, James Hilliard via bitcoin-dev\n>>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> >\n>>> > Due to the proposed calendar(https://segwit2x.github.io/) for the\n>>> > SegWit2x agreement being too slow to activate SegWit mandatory\n>>> > signalling ahead of BIP148 using BIP91 I would like to propose another\n>>> > option that miners can use to prevent a chain split ahead of the Aug\n>>> > 1st BIP148 activation date.\n>>> >\n>>> > The splitprotection soft fork is essentially BIP91 but using BIP8\n>>> > instead of BIP9 with a lower activation threshold and immediate\n>>> > mandatory signalling lock-in. This allows for a majority of miners to\n>>> > activate mandatory SegWit signalling and prevent a potential chain\n>>> > split ahead of BIP148 activation.\n>>> >\n>>> > This BIP allows for miners to respond to market forces quickly ahead\n>>> > of BIP148 activation by signalling for splitprotection. Any miners\n>>> > already running BIP148 should be encouraged to use splitprotection.\n>>> >\n>>> > <pre>\n>>> > BIP: splitprotection\n>>> > Layer: Consensus (soft fork)\n>>> > Title: User Activated Soft Fork Split Protection\n>>> > Author: James Hilliard <james.hilliard1 at gmail.com>\n>>> > Comments-Summary: No comments yet.\n>>> > Comments-URI:\n>>> > Status: Draft\n>>> > Type: Standards Track\n>>> > Created: 2017-05-22\n>>> > License: BSD-3-Clause\n>>> >          CC0-1.0\n>>> > </pre>\n>>> >\n>>> > ==Abstract==\n>>> >\n>>> > This document specifies a coordination mechanism for a simple majority\n>>> > of miners to prevent a chain split ahead of BIP148 activation.\n>>> >\n>>> > ==Definitions==\n>>> >\n>>> > \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n>>> > using bit 1, between November 15th 2016 and November 15th 2017 to\n>>> > activate BIP141, BIP143 and BIP147.\n>>> >\n>>> > ==Motivation==\n>>> >\n>>> > The biggest risk of BIP148 is an extended chain split, this BIP\n>>> > provides a way for a simple majority of miners to eliminate that risk.\n>>> >\n>>> > This BIP provides a way for a simple majority of miners to coordinate\n>>> > activation of the existing segwit deployment with less than 95%\n>>> > hashpower before BIP148 activation. Due to time constraints unless\n>>> > immediately deployed BIP91 will likely not be able to enforce\n>>> > mandatory signalling of segwit before the Aug 1st activation of\n>>> > BIP148. This BIP provides a method for rapid miner activation of\n>>> > SegWit mandatory signalling ahead of the BIP148 activation date. Since\n>>> > the primary goal of this BIP is to reduce the chance of an extended\n>>> > chain split as much as possible we activate using a simple miner\n>>> > majority of 65% over a 504 block interval rather than a higher\n>>> > percentage. This BIP also allows miners to signal their intention to\n>>> > run BIP148 in order to prevent a chain split.\n>>> >\n>>> > ==Specification==\n>>> >\n>>> > While this BIP is active, all blocks must set the nVersion header top\n>>> > 3 bits to 001 together with bit field (1<<1) (according to the\n>>> > existing segwit deployment). Blocks that do not signal as required\n>>> > will be rejected.\n>>> >\n>>> > ==Deployment==\n>>> >\n>>> > This BIP will be deployed by \"version bits\" with a 65%(this can be\n>>> > adjusted if desired) activation threshold BIP9 with the name\n>>> > \"splitprotecion\" and using bit 2.\n>>> >\n>>> > This BIP starts immediately and is a BIP8 style soft fork since\n>>> > mandatory signalling will start on midnight August 1st 2017 (epoch\n>>> > time 1501545600) regardless of whether or not this BIP has reached its\n>>> > own signalling threshold. This BIP will cease to be active when segwit\n>>> > is locked-in.\n>>> >\n>>> > === Reference implementation ===\n>>> >\n>>> > <pre>\n>>> > // Check if Segregated Witness is Locked In\n>>> > bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n>>> > Consensus::Params& params)\n>>> > {\n>>> >   LOCK(cs_main);\n>>> >   return (VersionBitsState(pindexPrev, params,\n>>> > Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n>>> > THRESHOLD_LOCKED_IN);\n>>> > }\n>>> >\n>>> > // SPLITPROTECTION mandatory segwit signalling.\n>>> > if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n>>> > Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n>>> > THRESHOLD_LOCKED_IN &&\n>>> >    !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>>> > // Segwit is not locked in\n>>> >    !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n>>> > and is not active.\n>>> > {\n>>> >   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>>> > VERSIONBITS_TOP_BITS;\n>>> >   bool fSegbit = (pindex->nVersion &\n>>> > VersionBitsMask(chainparams.GetConsensus(),\n>>> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>> >   if (!(fVersionBits && fSegbit)) {\n>>> >       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>>> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>> >   }\n>>> > }\n>>> >\n>>> > // BIP148 mandatory segwit signalling.\n>>> > int64_t nMedianTimePast = pindex->GetMedianTimePast();\n>>> > if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00\n>>> UTC\n>>> >    (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n>>> >    (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>>> > // Segwit is not locked in\n>>> >     !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n>>> > // and is not active.\n>>> > {\n>>> >   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>>> > VERSIONBITS_TOP_BITS;\n>>> >   bool fSegbit = (pindex->nVersion &\n>>> > VersionBitsMask(chainparams.GetConsensus(),\n>>> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>> >   if (!(fVersionBits && fSegbit)) {\n>>> >       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>>> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>> >   }\n>>> > }\n>>> > </pre>\n>>> >\n>>> > https://github.com/bitcoin/bitcoin/compare/0.14...jameshilli\n>>> ard:splitprotection-v0.14.1\n>>> >\n>>> > ==Backwards Compatibility==\n>>> >\n>>> > This deployment is compatible with the existing \"segwit\" bit 1\n>>> > deployment scheduled between midnight November 15th, 2016 and midnight\n>>> > November 15th, 2017. This deployment is also compatible with the\n>>> > existing BIP148 deployment. This BIP is compatible with BIP91 only if\n>>> > BIP91 activates before it and before BIP148. Miners will need to\n>>> > upgrade their nodes to support splitprotection otherwise they may\n>>> > build on top of an invalid block. While this bip is active users\n>>> > should either upgrade to splitprotection or wait for additional\n>>> > confirmations when accepting payments.\n>>> >\n>>> > ==Rationale==\n>>> >\n>>> > Historically we have used IsSuperMajority() to activate soft forks\n>>> > such as BIP66 which has a mandatory signalling requirement for miners\n>>> > once activated, this ensures that miners are aware of new rules being\n>>> > enforced. This technique can be leveraged to lower the signalling\n>>> > threshold of a soft fork while it is in the process of being deployed\n>>> > in a backwards compatible way. We also use a BIP8 style timeout to\n>>> > ensure that this BIP is compatible with BIP148 and that BIP148\n>>> > compatible mandatory signalling activates regardless of miner\n>>> > signalling levels.\n>>> >\n>>> > By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n>>> > deployment, this BIP can cause the existing \"segwit\" deployment to\n>>> > activate without needing to release a new deployment. As we approach\n>>> > BIP148 activation it may be desirable for a majority of miners to have\n>>> > a method that will ensure that there is no chain split.\n>>> >\n>>> > ==References==\n>>> >\n>>> > *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/20\n>>> 17-March/013714.html\n>>> > Mailing list discussion]\n>>> > *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cp\n>>> p#L1281-L1283\n>>> > P2SH flag day activation]\n>>> > *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n>>> > *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n>>> > *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n>>> > *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n>>> > *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n>>> > Version 0 Witness Program]]\n>>> > *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element\n>>> malleability]]\n>>> > *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit\n>>> deployment]]\n>>> > *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n>>> > *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit\n>>> benefits]\n>>> >\n>>> > ==Copyright==\n>>> >\n>>> > This document is dual licensed as BSD 3-clause, and Creative Commons\n>>> > CC0 1.0 Universal.\n>>> > _______________________________________________\n>>> > bitcoin-dev mailing list\n>>> > bitcoin-dev at lists.linuxfoundation.org\n>>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>> >\n>>> >\n>>> >\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170607/e1a7345e/attachment-0001.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2017-06-07T19:59:23",
                "message_text_only": "I get it, a threshold could be put in place, but something like 33% would\nmore accurately reflect the risks miners run.\n\nI'm not aware of a good signal to indicates someone is planning to run\nBIP148 and orphan a miner's blocks.\n\n\n\nOn Wed, Jun 7, 2017 at 3:39 PM, Jacob Eliosoff <jacob.eliosoff at gmail.com>\nwrote:\n\n> You're missing my point.  \"As soon as a simple majority supports it\" -\n> what is \"it\"?  BIP148?  Or \"deferring to the miner consensus on BIP148\"?\n> It's the difference between supporting one side of a vote, vs supporting\n> deferral to the outcome of the vote.\n>\n> Or if you mean, the safe thing for miners is to orphan non-segwit blocks\n> Aug 1 *regardless* of the miner consensus (since the economic consensus\n> might differ), then there's zero need for this BIP: they should just run\n> BIP148.\n>\n> As I said: this BIP should be corrected to only orphan if >50% signal for\n> BIP148.  Or, define two bits, one meaning \"I support BIP148,\" the other \"I\n> will go w/ the miner majority on BIP148.\"  Fudging them this way is\n> deceptive.\n>\n>\n> On Jun 7, 2017 2:05 PM, \"Erik Aronesty\" <erik at q32.com> wrote:\n>\n> > But passing it off as the safest defense is bad faith.\n>\n> Without this option, a miner has to guess whether a split will be\n> economically impacting.   With this option, his miner will automatically\n> switch to the chain least likely to get wiped out... as soon as a simple\n> majority of miners supports it.\n>\n>\n> On Wed, Jun 7, 2017 at 12:44 PM, Jacob Eliosoff <jacob.eliosoff at gmail.com>\n> wrote:\n>\n>> This is not the safest defense against a split.  If 70% of miners run\n>> \"splitprotection\", and 0.1% run BIP148, there's no \"safety\"/\"defense\"\n>> reason for splitprotection to activate segwit.  It should only do so if\n>> *BIP148* support (NB: not just segwit support!) >50%.\n>>\n>> The truly defensive logic is \"If the majority supports orphaning\n>> non-segwit blocks starting Aug 1, I'll join them.\"\n>>\n>> If the real goal of this BIP is to induce miners to run segwit, then fair\n>> enough.  But passing it off as the safest defense is bad faith.\n>>\n>>\n>> On Wed, Jun 7, 2017 at 10:10 AM, Erik Aronesty via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> This is, by far, the safest way for miners to quickly defend against a\n>>> chain split, much better than a -bip148 option.   This allows miners to\n>>> defend themselves, with very little risk, since the defense is only\n>>> activated if the majority of miners do so. I would move for a very rapid\n>>> deployment.   Only miners would need to upgrade.   Regular users would not\n>>> have to concern themselves with this release.\n>>>\n>>> On Wed, Jun 7, 2017 at 6:13 AM, James Hilliard via bitcoin-dev <\n>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>>> I think even 55% would probably work out fine simply due to incentive\n>>>> structures, once signalling is over 51% it's then clear to miners that\n>>>> non-signalling blocks will be orphaned and the rest will rapidly\n>>>> update to splitprotection/BIP148. The purpose of this BIP is to reduce\n>>>> chain split risk for BIP148 since it's looking like BIP148 is going to\n>>>> be run by a non-insignificant percentage of the economy at a minimum.\n>>>>\n>>>> On Wed, Jun 7, 2017 at 12:20 AM, Tao Effect <contact at taoeffect.com>\n>>>> wrote:\n>>>> > See thread on replay attacks for why activating regardless of\n>>>> threshold is a\n>>>> > bad idea [1].\n>>>> >\n>>>> > BIP91 OTOH seems perfectly reasonable. 80% instead of 95% makes it\n>>>> more\n>>>> > difficult for miners to hold together in opposition to Core. It gives\n>>>> Core\n>>>> > more leverage in negotiations.\n>>>> >\n>>>> > If they don't activate with 80%, Core can release another BIP to\n>>>> reduce it\n>>>> > to 75%.\n>>>> >\n>>>> > Each threshold reduction makes it both more likely to succeed, but\n>>>> also\n>>>> > increases the likelihood of harm to the ecosystem.\n>>>> >\n>>>> > Cheers,\n>>>> > Greg\n>>>> >\n>>>> > [1]\n>>>> > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017\n>>>> -June/014497.html\n>>>> >\n>>>> > --\n>>>> > Please do not email me anything that you are not comfortable also\n>>>> sharing\n>>>> > with the NSA.\n>>>> >\n>>>> > On Jun 6, 2017, at 6:54 PM, James Hilliard <james.hilliard1 at gmail.com\n>>>> >\n>>>> > wrote:\n>>>> >\n>>>> > This is a BIP8 style soft fork so mandatory signalling will be active\n>>>> > after Aug 1st regardless.\n>>>> >\n>>>> > On Tue, Jun 6, 2017 at 8:51 PM, Tao Effect <contact at taoeffect.com>\n>>>> wrote:\n>>>> >\n>>>> > What is the probability that a 65% threshold is too low and can allow\n>>>> a\n>>>> > \"surprise miner attack\", whereby miners are kept offline before the\n>>>> > deadline, and brought online immediately after, creating potential\n>>>> havoc?\n>>>> >\n>>>> > (Nit: \"simple majority\" usually refers to >50%, I think, might cause\n>>>> > confusion.)\n>>>> >\n>>>> > -Greg Slepak\n>>>> >\n>>>> > --\n>>>> > Please do not email me anything that you are not comfortable also\n>>>> sharing\n>>>> > with the NSA.\n>>>> >\n>>>> > On Jun 6, 2017, at 5:56 PM, James Hilliard via bitcoin-dev\n>>>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>> >\n>>>> > Due to the proposed calendar(https://segwit2x.github.io/) for the\n>>>> > SegWit2x agreement being too slow to activate SegWit mandatory\n>>>> > signalling ahead of BIP148 using BIP91 I would like to propose another\n>>>> > option that miners can use to prevent a chain split ahead of the Aug\n>>>> > 1st BIP148 activation date.\n>>>> >\n>>>> > The splitprotection soft fork is essentially BIP91 but using BIP8\n>>>> > instead of BIP9 with a lower activation threshold and immediate\n>>>> > mandatory signalling lock-in. This allows for a majority of miners to\n>>>> > activate mandatory SegWit signalling and prevent a potential chain\n>>>> > split ahead of BIP148 activation.\n>>>> >\n>>>> > This BIP allows for miners to respond to market forces quickly ahead\n>>>> > of BIP148 activation by signalling for splitprotection. Any miners\n>>>> > already running BIP148 should be encouraged to use splitprotection.\n>>>> >\n>>>> > <pre>\n>>>> > BIP: splitprotection\n>>>> > Layer: Consensus (soft fork)\n>>>> > Title: User Activated Soft Fork Split Protection\n>>>> > Author: James Hilliard <james.hilliard1 at gmail.com>\n>>>> > Comments-Summary: No comments yet.\n>>>> > Comments-URI:\n>>>> > Status: Draft\n>>>> > Type: Standards Track\n>>>> > Created: 2017-05-22\n>>>> > License: BSD-3-Clause\n>>>> >          CC0-1.0\n>>>> > </pre>\n>>>> >\n>>>> > ==Abstract==\n>>>> >\n>>>> > This document specifies a coordination mechanism for a simple majority\n>>>> > of miners to prevent a chain split ahead of BIP148 activation.\n>>>> >\n>>>> > ==Definitions==\n>>>> >\n>>>> > \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n>>>> > using bit 1, between November 15th 2016 and November 15th 2017 to\n>>>> > activate BIP141, BIP143 and BIP147.\n>>>> >\n>>>> > ==Motivation==\n>>>> >\n>>>> > The biggest risk of BIP148 is an extended chain split, this BIP\n>>>> > provides a way for a simple majority of miners to eliminate that risk.\n>>>> >\n>>>> > This BIP provides a way for a simple majority of miners to coordinate\n>>>> > activation of the existing segwit deployment with less than 95%\n>>>> > hashpower before BIP148 activation. Due to time constraints unless\n>>>> > immediately deployed BIP91 will likely not be able to enforce\n>>>> > mandatory signalling of segwit before the Aug 1st activation of\n>>>> > BIP148. This BIP provides a method for rapid miner activation of\n>>>> > SegWit mandatory signalling ahead of the BIP148 activation date. Since\n>>>> > the primary goal of this BIP is to reduce the chance of an extended\n>>>> > chain split as much as possible we activate using a simple miner\n>>>> > majority of 65% over a 504 block interval rather than a higher\n>>>> > percentage. This BIP also allows miners to signal their intention to\n>>>> > run BIP148 in order to prevent a chain split.\n>>>> >\n>>>> > ==Specification==\n>>>> >\n>>>> > While this BIP is active, all blocks must set the nVersion header top\n>>>> > 3 bits to 001 together with bit field (1<<1) (according to the\n>>>> > existing segwit deployment). Blocks that do not signal as required\n>>>> > will be rejected.\n>>>> >\n>>>> > ==Deployment==\n>>>> >\n>>>> > This BIP will be deployed by \"version bits\" with a 65%(this can be\n>>>> > adjusted if desired) activation threshold BIP9 with the name\n>>>> > \"splitprotecion\" and using bit 2.\n>>>> >\n>>>> > This BIP starts immediately and is a BIP8 style soft fork since\n>>>> > mandatory signalling will start on midnight August 1st 2017 (epoch\n>>>> > time 1501545600) regardless of whether or not this BIP has reached its\n>>>> > own signalling threshold. This BIP will cease to be active when segwit\n>>>> > is locked-in.\n>>>> >\n>>>> > === Reference implementation ===\n>>>> >\n>>>> > <pre>\n>>>> > // Check if Segregated Witness is Locked In\n>>>> > bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n>>>> > Consensus::Params& params)\n>>>> > {\n>>>> >   LOCK(cs_main);\n>>>> >   return (VersionBitsState(pindexPrev, params,\n>>>> > Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n>>>> > THRESHOLD_LOCKED_IN);\n>>>> > }\n>>>> >\n>>>> > // SPLITPROTECTION mandatory segwit signalling.\n>>>> > if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n>>>> > Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n>>>> > THRESHOLD_LOCKED_IN &&\n>>>> >    !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>>>> > // Segwit is not locked in\n>>>> >    !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n>>>> > and is not active.\n>>>> > {\n>>>> >   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>>>> > VERSIONBITS_TOP_BITS;\n>>>> >   bool fSegbit = (pindex->nVersion &\n>>>> > VersionBitsMask(chainparams.GetConsensus(),\n>>>> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>>> >   if (!(fVersionBits && fSegbit)) {\n>>>> >       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>>>> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>>> >   }\n>>>> > }\n>>>> >\n>>>> > // BIP148 mandatory segwit signalling.\n>>>> > int64_t nMedianTimePast = pindex->GetMedianTimePast();\n>>>> > if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00\n>>>> UTC\n>>>> >    (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n>>>> >    (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>>>> > // Segwit is not locked in\n>>>> >     !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n>>>> > // and is not active.\n>>>> > {\n>>>> >   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>>>> > VERSIONBITS_TOP_BITS;\n>>>> >   bool fSegbit = (pindex->nVersion &\n>>>> > VersionBitsMask(chainparams.GetConsensus(),\n>>>> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>>> >   if (!(fVersionBits && fSegbit)) {\n>>>> >       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>>>> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>>> >   }\n>>>> > }\n>>>> > </pre>\n>>>> >\n>>>> > https://github.com/bitcoin/bitcoin/compare/0.14...jameshilli\n>>>> ard:splitprotection-v0.14.1\n>>>> >\n>>>> > ==Backwards Compatibility==\n>>>> >\n>>>> > This deployment is compatible with the existing \"segwit\" bit 1\n>>>> > deployment scheduled between midnight November 15th, 2016 and midnight\n>>>> > November 15th, 2017. This deployment is also compatible with the\n>>>> > existing BIP148 deployment. This BIP is compatible with BIP91 only if\n>>>> > BIP91 activates before it and before BIP148. Miners will need to\n>>>> > upgrade their nodes to support splitprotection otherwise they may\n>>>> > build on top of an invalid block. While this bip is active users\n>>>> > should either upgrade to splitprotection or wait for additional\n>>>> > confirmations when accepting payments.\n>>>> >\n>>>> > ==Rationale==\n>>>> >\n>>>> > Historically we have used IsSuperMajority() to activate soft forks\n>>>> > such as BIP66 which has a mandatory signalling requirement for miners\n>>>> > once activated, this ensures that miners are aware of new rules being\n>>>> > enforced. This technique can be leveraged to lower the signalling\n>>>> > threshold of a soft fork while it is in the process of being deployed\n>>>> > in a backwards compatible way. We also use a BIP8 style timeout to\n>>>> > ensure that this BIP is compatible with BIP148 and that BIP148\n>>>> > compatible mandatory signalling activates regardless of miner\n>>>> > signalling levels.\n>>>> >\n>>>> > By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n>>>> > deployment, this BIP can cause the existing \"segwit\" deployment to\n>>>> > activate without needing to release a new deployment. As we approach\n>>>> > BIP148 activation it may be desirable for a majority of miners to have\n>>>> > a method that will ensure that there is no chain split.\n>>>> >\n>>>> > ==References==\n>>>> >\n>>>> > *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/20\n>>>> 17-March/013714.html\n>>>> > Mailing list discussion]\n>>>> > *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cp\n>>>> p#L1281-L1283\n>>>> > P2SH flag day activation]\n>>>> > *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n>>>> > *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n>>>> > *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n>>>> > *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n>>>> > *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n>>>> > Version 0 Witness Program]]\n>>>> > *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element\n>>>> malleability]]\n>>>> > *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit\n>>>> deployment]]\n>>>> > *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n>>>> > *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit\n>>>> benefits]\n>>>> >\n>>>> > ==Copyright==\n>>>> >\n>>>> > This document is dual licensed as BSD 3-clause, and Creative Commons\n>>>> > CC0 1.0 Universal.\n>>>> > _______________________________________________\n>>>> > bitcoin-dev mailing list\n>>>> > bitcoin-dev at lists.linuxfoundation.org\n>>>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>> >\n>>>> >\n>>>> >\n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>\n>>>\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>>\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170607/6c509d1f/attachment-0001.html>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-06-07T21:09:04",
                "message_text_only": "> This is, by far, the safest way for miners to quickly defend against a chain split, much better than a -bip148 option.   This allows miners to defend themselves, with very little risk, since the defense is only activated if the majority of miners do so. I would move for a very rapid deployment.   Only miners would need to upgrade.   Regular users would not have to concern themselves with this release.\n\nFYI, even if very successful, this deployment and change may have a\nsevere negative impact on a small group of miners.  Any miners/pools\nwho are not actively following the forums, news, or these discussions\nmay be difficult to reach and communicate with in time, particularly\nwith language barriers.  Of those, any who are also either not\nsignaling segwit currently or are running an older software version\nwill have their blocks continuously and constantly orphaned, but may\nnot have any alarms or notifications set up for such an unexpected\nfailure.  That may or may not be a worthy consideration, but it is\ndefinitely brusque and a harsh price to pay.  Considering the\nopposition mentioned against transaction limits for the rare cases\nwhere a very large transaction has already been signed, it seems that\nthis would be worthy of consideration.  For the few miners in that\nsituation, it does turn segwit from an optional softfork into a\npunishing hardfork.\n\nI don't think that's a sufficient reason alone to kill the idea, but\nit should be a concern.\n\nJared\n\nOn Wed, Jun 7, 2017 at 7:10 AM, Erik Aronesty via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> This is, by far, the safest way for miners to quickly defend against a chain\n> split, much better than a -bip148 option.   This allows miners to defend\n> themselves, with very little risk, since the defense is only activated if\n> the majority of miners do so. I would move for a very rapid deployment.\n> Only miners would need to upgrade.   Regular users would not have to concern\n> themselves with this release.\n>\n> On Wed, Jun 7, 2017 at 6:13 AM, James Hilliard via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> I think even 55% would probably work out fine simply due to incentive\n>> structures, once signalling is over 51% it's then clear to miners that\n>> non-signalling blocks will be orphaned and the rest will rapidly\n>> update to splitprotection/BIP148. The purpose of this BIP is to reduce\n>> chain split risk for BIP148 since it's looking like BIP148 is going to\n>> be run by a non-insignificant percentage of the economy at a minimum.\n>>\n>> On Wed, Jun 7, 2017 at 12:20 AM, Tao Effect <contact at taoeffect.com> wrote:\n>> > See thread on replay attacks for why activating regardless of threshold\n>> > is a\n>> > bad idea [1].\n>> >\n>> > BIP91 OTOH seems perfectly reasonable. 80% instead of 95% makes it more\n>> > difficult for miners to hold together in opposition to Core. It gives\n>> > Core\n>> > more leverage in negotiations.\n>> >\n>> > If they don't activate with 80%, Core can release another BIP to reduce\n>> > it\n>> > to 75%.\n>> >\n>> > Each threshold reduction makes it both more likely to succeed, but also\n>> > increases the likelihood of harm to the ecosystem.\n>> >\n>> > Cheers,\n>> > Greg\n>> >\n>> > [1]\n>> >\n>> > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014497.html\n>> >\n>> > --\n>> > Please do not email me anything that you are not comfortable also\n>> > sharing\n>> > with the NSA.\n>> >\n>> > On Jun 6, 2017, at 6:54 PM, James Hilliard <james.hilliard1 at gmail.com>\n>> > wrote:\n>> >\n>> > This is a BIP8 style soft fork so mandatory signalling will be active\n>> > after Aug 1st regardless.\n>> >\n>> > On Tue, Jun 6, 2017 at 8:51 PM, Tao Effect <contact at taoeffect.com>\n>> > wrote:\n>> >\n>> > What is the probability that a 65% threshold is too low and can allow a\n>> > \"surprise miner attack\", whereby miners are kept offline before the\n>> > deadline, and brought online immediately after, creating potential\n>> > havoc?\n>> >\n>> > (Nit: \"simple majority\" usually refers to >50%, I think, might cause\n>> > confusion.)\n>> >\n>> > -Greg Slepak\n>> >\n>> > --\n>> > Please do not email me anything that you are not comfortable also\n>> > sharing\n>> > with the NSA.\n>> >\n>> > On Jun 6, 2017, at 5:56 PM, James Hilliard via bitcoin-dev\n>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >\n>> > Due to the proposed calendar(https://segwit2x.github.io/) for the\n>> > SegWit2x agreement being too slow to activate SegWit mandatory\n>> > signalling ahead of BIP148 using BIP91 I would like to propose another\n>> > option that miners can use to prevent a chain split ahead of the Aug\n>> > 1st BIP148 activation date.\n>> >\n>> > The splitprotection soft fork is essentially BIP91 but using BIP8\n>> > instead of BIP9 with a lower activation threshold and immediate\n>> > mandatory signalling lock-in. This allows for a majority of miners to\n>> > activate mandatory SegWit signalling and prevent a potential chain\n>> > split ahead of BIP148 activation.\n>> >\n>> > This BIP allows for miners to respond to market forces quickly ahead\n>> > of BIP148 activation by signalling for splitprotection. Any miners\n>> > already running BIP148 should be encouraged to use splitprotection.\n>> >\n>> > <pre>\n>> > BIP: splitprotection\n>> > Layer: Consensus (soft fork)\n>> > Title: User Activated Soft Fork Split Protection\n>> > Author: James Hilliard <james.hilliard1 at gmail.com>\n>> > Comments-Summary: No comments yet.\n>> > Comments-URI:\n>> > Status: Draft\n>> > Type: Standards Track\n>> > Created: 2017-05-22\n>> > License: BSD-3-Clause\n>> >          CC0-1.0\n>> > </pre>\n>> >\n>> > ==Abstract==\n>> >\n>> > This document specifies a coordination mechanism for a simple majority\n>> > of miners to prevent a chain split ahead of BIP148 activation.\n>> >\n>> > ==Definitions==\n>> >\n>> > \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n>> > using bit 1, between November 15th 2016 and November 15th 2017 to\n>> > activate BIP141, BIP143 and BIP147.\n>> >\n>> > ==Motivation==\n>> >\n>> > The biggest risk of BIP148 is an extended chain split, this BIP\n>> > provides a way for a simple majority of miners to eliminate that risk.\n>> >\n>> > This BIP provides a way for a simple majority of miners to coordinate\n>> > activation of the existing segwit deployment with less than 95%\n>> > hashpower before BIP148 activation. Due to time constraints unless\n>> > immediately deployed BIP91 will likely not be able to enforce\n>> > mandatory signalling of segwit before the Aug 1st activation of\n>> > BIP148. This BIP provides a method for rapid miner activation of\n>> > SegWit mandatory signalling ahead of the BIP148 activation date. Since\n>> > the primary goal of this BIP is to reduce the chance of an extended\n>> > chain split as much as possible we activate using a simple miner\n>> > majority of 65% over a 504 block interval rather than a higher\n>> > percentage. This BIP also allows miners to signal their intention to\n>> > run BIP148 in order to prevent a chain split.\n>> >\n>> > ==Specification==\n>> >\n>> > While this BIP is active, all blocks must set the nVersion header top\n>> > 3 bits to 001 together with bit field (1<<1) (according to the\n>> > existing segwit deployment). Blocks that do not signal as required\n>> > will be rejected.\n>> >\n>> > ==Deployment==\n>> >\n>> > This BIP will be deployed by \"version bits\" with a 65%(this can be\n>> > adjusted if desired) activation threshold BIP9 with the name\n>> > \"splitprotecion\" and using bit 2.\n>> >\n>> > This BIP starts immediately and is a BIP8 style soft fork since\n>> > mandatory signalling will start on midnight August 1st 2017 (epoch\n>> > time 1501545600) regardless of whether or not this BIP has reached its\n>> > own signalling threshold. This BIP will cease to be active when segwit\n>> > is locked-in.\n>> >\n>> > === Reference implementation ===\n>> >\n>> > <pre>\n>> > // Check if Segregated Witness is Locked In\n>> > bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n>> > Consensus::Params& params)\n>> > {\n>> >   LOCK(cs_main);\n>> >   return (VersionBitsState(pindexPrev, params,\n>> > Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n>> > THRESHOLD_LOCKED_IN);\n>> > }\n>> >\n>> > // SPLITPROTECTION mandatory segwit signalling.\n>> > if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n>> > Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n>> > THRESHOLD_LOCKED_IN &&\n>> >    !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>> > // Segwit is not locked in\n>> >    !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n>> > and is not active.\n>> > {\n>> >   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>> > VERSIONBITS_TOP_BITS;\n>> >   bool fSegbit = (pindex->nVersion &\n>> > VersionBitsMask(chainparams.GetConsensus(),\n>> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>> >   if (!(fVersionBits && fSegbit)) {\n>> >       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>> >   }\n>> > }\n>> >\n>> > // BIP148 mandatory segwit signalling.\n>> > int64_t nMedianTimePast = pindex->GetMedianTimePast();\n>> > if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n>> >    (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n>> >    (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>> > // Segwit is not locked in\n>> >     !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n>> > // and is not active.\n>> > {\n>> >   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>> > VERSIONBITS_TOP_BITS;\n>> >   bool fSegbit = (pindex->nVersion &\n>> > VersionBitsMask(chainparams.GetConsensus(),\n>> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>> >   if (!(fVersionBits && fSegbit)) {\n>> >       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>> >   }\n>> > }\n>> > </pre>\n>> >\n>> >\n>> > https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1\n>> >\n>> > ==Backwards Compatibility==\n>> >\n>> > This deployment is compatible with the existing \"segwit\" bit 1\n>> > deployment scheduled between midnight November 15th, 2016 and midnight\n>> > November 15th, 2017. This deployment is also compatible with the\n>> > existing BIP148 deployment. This BIP is compatible with BIP91 only if\n>> > BIP91 activates before it and before BIP148. Miners will need to\n>> > upgrade their nodes to support splitprotection otherwise they may\n>> > build on top of an invalid block. While this bip is active users\n>> > should either upgrade to splitprotection or wait for additional\n>> > confirmations when accepting payments.\n>> >\n>> > ==Rationale==\n>> >\n>> > Historically we have used IsSuperMajority() to activate soft forks\n>> > such as BIP66 which has a mandatory signalling requirement for miners\n>> > once activated, this ensures that miners are aware of new rules being\n>> > enforced. This technique can be leveraged to lower the signalling\n>> > threshold of a soft fork while it is in the process of being deployed\n>> > in a backwards compatible way. We also use a BIP8 style timeout to\n>> > ensure that this BIP is compatible with BIP148 and that BIP148\n>> > compatible mandatory signalling activates regardless of miner\n>> > signalling levels.\n>> >\n>> > By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n>> > deployment, this BIP can cause the existing \"segwit\" deployment to\n>> > activate without needing to release a new deployment. As we approach\n>> > BIP148 activation it may be desirable for a majority of miners to have\n>> > a method that will ensure that there is no chain split.\n>> >\n>> > ==References==\n>> >\n>> >\n>> > *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html\n>> > Mailing list discussion]\n>> >\n>> > *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\n>> > P2SH flag day activation]\n>> > *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n>> > *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n>> > *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n>> > *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n>> > *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n>> > Version 0 Witness Program]]\n>> > *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element\n>> > malleability]]\n>> > *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit deployment]]\n>> > *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n>> > *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit\n>> > benefits]\n>> >\n>> > ==Copyright==\n>> >\n>> > This document is dual licensed as BSD 3-clause, and Creative Commons\n>> > CC0 1.0 Universal.\n>> > _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >\n>> >\n>> >\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "James Hilliard",
                "date": "2017-06-07T21:21:29",
                "message_text_only": "Keep in mind that this is only temporary until segwit has locked in,\nafter that happens it becomes optional for miners again.\n\nOn Wed, Jun 7, 2017 at 4:09 PM, Jared Lee Richardson <jaredr26 at gmail.com> wrote:\n>> This is, by far, the safest way for miners to quickly defend against a chain split, much better than a -bip148 option.   This allows miners to defend themselves, with very little risk, since the defense is only activated if the majority of miners do so. I would move for a very rapid deployment.   Only miners would need to upgrade.   Regular users would not have to concern themselves with this release.\n>\n> FYI, even if very successful, this deployment and change may have a\n> severe negative impact on a small group of miners.  Any miners/pools\n> who are not actively following the forums, news, or these discussions\n> may be difficult to reach and communicate with in time, particularly\n> with language barriers.  Of those, any who are also either not\n> signaling segwit currently or are running an older software version\n> will have their blocks continuously and constantly orphaned, but may\n> not have any alarms or notifications set up for such an unexpected\n> failure.  That may or may not be a worthy consideration, but it is\n> definitely brusque and a harsh price to pay.  Considering the\n> opposition mentioned against transaction limits for the rare cases\n> where a very large transaction has already been signed, it seems that\n> this would be worthy of consideration.  For the few miners in that\n> situation, it does turn segwit from an optional softfork into a\n> punishing hardfork.\n>\n> I don't think that's a sufficient reason alone to kill the idea, but\n> it should be a concern.\n>\n> Jared\n>\n> On Wed, Jun 7, 2017 at 7:10 AM, Erik Aronesty via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> This is, by far, the safest way for miners to quickly defend against a chain\n>> split, much better than a -bip148 option.   This allows miners to defend\n>> themselves, with very little risk, since the defense is only activated if\n>> the majority of miners do so. I would move for a very rapid deployment.\n>> Only miners would need to upgrade.   Regular users would not have to concern\n>> themselves with this release.\n>>\n>> On Wed, Jun 7, 2017 at 6:13 AM, James Hilliard via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>> I think even 55% would probably work out fine simply due to incentive\n>>> structures, once signalling is over 51% it's then clear to miners that\n>>> non-signalling blocks will be orphaned and the rest will rapidly\n>>> update to splitprotection/BIP148. The purpose of this BIP is to reduce\n>>> chain split risk for BIP148 since it's looking like BIP148 is going to\n>>> be run by a non-insignificant percentage of the economy at a minimum.\n>>>\n>>> On Wed, Jun 7, 2017 at 12:20 AM, Tao Effect <contact at taoeffect.com> wrote:\n>>> > See thread on replay attacks for why activating regardless of threshold\n>>> > is a\n>>> > bad idea [1].\n>>> >\n>>> > BIP91 OTOH seems perfectly reasonable. 80% instead of 95% makes it more\n>>> > difficult for miners to hold together in opposition to Core. It gives\n>>> > Core\n>>> > more leverage in negotiations.\n>>> >\n>>> > If they don't activate with 80%, Core can release another BIP to reduce\n>>> > it\n>>> > to 75%.\n>>> >\n>>> > Each threshold reduction makes it both more likely to succeed, but also\n>>> > increases the likelihood of harm to the ecosystem.\n>>> >\n>>> > Cheers,\n>>> > Greg\n>>> >\n>>> > [1]\n>>> >\n>>> > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014497.html\n>>> >\n>>> > --\n>>> > Please do not email me anything that you are not comfortable also\n>>> > sharing\n>>> > with the NSA.\n>>> >\n>>> > On Jun 6, 2017, at 6:54 PM, James Hilliard <james.hilliard1 at gmail.com>\n>>> > wrote:\n>>> >\n>>> > This is a BIP8 style soft fork so mandatory signalling will be active\n>>> > after Aug 1st regardless.\n>>> >\n>>> > On Tue, Jun 6, 2017 at 8:51 PM, Tao Effect <contact at taoeffect.com>\n>>> > wrote:\n>>> >\n>>> > What is the probability that a 65% threshold is too low and can allow a\n>>> > \"surprise miner attack\", whereby miners are kept offline before the\n>>> > deadline, and brought online immediately after, creating potential\n>>> > havoc?\n>>> >\n>>> > (Nit: \"simple majority\" usually refers to >50%, I think, might cause\n>>> > confusion.)\n>>> >\n>>> > -Greg Slepak\n>>> >\n>>> > --\n>>> > Please do not email me anything that you are not comfortable also\n>>> > sharing\n>>> > with the NSA.\n>>> >\n>>> > On Jun 6, 2017, at 5:56 PM, James Hilliard via bitcoin-dev\n>>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> >\n>>> > Due to the proposed calendar(https://segwit2x.github.io/) for the\n>>> > SegWit2x agreement being too slow to activate SegWit mandatory\n>>> > signalling ahead of BIP148 using BIP91 I would like to propose another\n>>> > option that miners can use to prevent a chain split ahead of the Aug\n>>> > 1st BIP148 activation date.\n>>> >\n>>> > The splitprotection soft fork is essentially BIP91 but using BIP8\n>>> > instead of BIP9 with a lower activation threshold and immediate\n>>> > mandatory signalling lock-in. This allows for a majority of miners to\n>>> > activate mandatory SegWit signalling and prevent a potential chain\n>>> > split ahead of BIP148 activation.\n>>> >\n>>> > This BIP allows for miners to respond to market forces quickly ahead\n>>> > of BIP148 activation by signalling for splitprotection. Any miners\n>>> > already running BIP148 should be encouraged to use splitprotection.\n>>> >\n>>> > <pre>\n>>> > BIP: splitprotection\n>>> > Layer: Consensus (soft fork)\n>>> > Title: User Activated Soft Fork Split Protection\n>>> > Author: James Hilliard <james.hilliard1 at gmail.com>\n>>> > Comments-Summary: No comments yet.\n>>> > Comments-URI:\n>>> > Status: Draft\n>>> > Type: Standards Track\n>>> > Created: 2017-05-22\n>>> > License: BSD-3-Clause\n>>> >          CC0-1.0\n>>> > </pre>\n>>> >\n>>> > ==Abstract==\n>>> >\n>>> > This document specifies a coordination mechanism for a simple majority\n>>> > of miners to prevent a chain split ahead of BIP148 activation.\n>>> >\n>>> > ==Definitions==\n>>> >\n>>> > \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n>>> > using bit 1, between November 15th 2016 and November 15th 2017 to\n>>> > activate BIP141, BIP143 and BIP147.\n>>> >\n>>> > ==Motivation==\n>>> >\n>>> > The biggest risk of BIP148 is an extended chain split, this BIP\n>>> > provides a way for a simple majority of miners to eliminate that risk.\n>>> >\n>>> > This BIP provides a way for a simple majority of miners to coordinate\n>>> > activation of the existing segwit deployment with less than 95%\n>>> > hashpower before BIP148 activation. Due to time constraints unless\n>>> > immediately deployed BIP91 will likely not be able to enforce\n>>> > mandatory signalling of segwit before the Aug 1st activation of\n>>> > BIP148. This BIP provides a method for rapid miner activation of\n>>> > SegWit mandatory signalling ahead of the BIP148 activation date. Since\n>>> > the primary goal of this BIP is to reduce the chance of an extended\n>>> > chain split as much as possible we activate using a simple miner\n>>> > majority of 65% over a 504 block interval rather than a higher\n>>> > percentage. This BIP also allows miners to signal their intention to\n>>> > run BIP148 in order to prevent a chain split.\n>>> >\n>>> > ==Specification==\n>>> >\n>>> > While this BIP is active, all blocks must set the nVersion header top\n>>> > 3 bits to 001 together with bit field (1<<1) (according to the\n>>> > existing segwit deployment). Blocks that do not signal as required\n>>> > will be rejected.\n>>> >\n>>> > ==Deployment==\n>>> >\n>>> > This BIP will be deployed by \"version bits\" with a 65%(this can be\n>>> > adjusted if desired) activation threshold BIP9 with the name\n>>> > \"splitprotecion\" and using bit 2.\n>>> >\n>>> > This BIP starts immediately and is a BIP8 style soft fork since\n>>> > mandatory signalling will start on midnight August 1st 2017 (epoch\n>>> > time 1501545600) regardless of whether or not this BIP has reached its\n>>> > own signalling threshold. This BIP will cease to be active when segwit\n>>> > is locked-in.\n>>> >\n>>> > === Reference implementation ===\n>>> >\n>>> > <pre>\n>>> > // Check if Segregated Witness is Locked In\n>>> > bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n>>> > Consensus::Params& params)\n>>> > {\n>>> >   LOCK(cs_main);\n>>> >   return (VersionBitsState(pindexPrev, params,\n>>> > Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n>>> > THRESHOLD_LOCKED_IN);\n>>> > }\n>>> >\n>>> > // SPLITPROTECTION mandatory segwit signalling.\n>>> > if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n>>> > Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n>>> > THRESHOLD_LOCKED_IN &&\n>>> >    !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>>> > // Segwit is not locked in\n>>> >    !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n>>> > and is not active.\n>>> > {\n>>> >   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>>> > VERSIONBITS_TOP_BITS;\n>>> >   bool fSegbit = (pindex->nVersion &\n>>> > VersionBitsMask(chainparams.GetConsensus(),\n>>> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>> >   if (!(fVersionBits && fSegbit)) {\n>>> >       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>>> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>> >   }\n>>> > }\n>>> >\n>>> > // BIP148 mandatory segwit signalling.\n>>> > int64_t nMedianTimePast = pindex->GetMedianTimePast();\n>>> > if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n>>> >    (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n>>> >    (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>>> > // Segwit is not locked in\n>>> >     !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n>>> > // and is not active.\n>>> > {\n>>> >   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>>> > VERSIONBITS_TOP_BITS;\n>>> >   bool fSegbit = (pindex->nVersion &\n>>> > VersionBitsMask(chainparams.GetConsensus(),\n>>> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>> >   if (!(fVersionBits && fSegbit)) {\n>>> >       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>>> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>> >   }\n>>> > }\n>>> > </pre>\n>>> >\n>>> >\n>>> > https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1\n>>> >\n>>> > ==Backwards Compatibility==\n>>> >\n>>> > This deployment is compatible with the existing \"segwit\" bit 1\n>>> > deployment scheduled between midnight November 15th, 2016 and midnight\n>>> > November 15th, 2017. This deployment is also compatible with the\n>>> > existing BIP148 deployment. This BIP is compatible with BIP91 only if\n>>> > BIP91 activates before it and before BIP148. Miners will need to\n>>> > upgrade their nodes to support splitprotection otherwise they may\n>>> > build on top of an invalid block. While this bip is active users\n>>> > should either upgrade to splitprotection or wait for additional\n>>> > confirmations when accepting payments.\n>>> >\n>>> > ==Rationale==\n>>> >\n>>> > Historically we have used IsSuperMajority() to activate soft forks\n>>> > such as BIP66 which has a mandatory signalling requirement for miners\n>>> > once activated, this ensures that miners are aware of new rules being\n>>> > enforced. This technique can be leveraged to lower the signalling\n>>> > threshold of a soft fork while it is in the process of being deployed\n>>> > in a backwards compatible way. We also use a BIP8 style timeout to\n>>> > ensure that this BIP is compatible with BIP148 and that BIP148\n>>> > compatible mandatory signalling activates regardless of miner\n>>> > signalling levels.\n>>> >\n>>> > By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n>>> > deployment, this BIP can cause the existing \"segwit\" deployment to\n>>> > activate without needing to release a new deployment. As we approach\n>>> > BIP148 activation it may be desirable for a majority of miners to have\n>>> > a method that will ensure that there is no chain split.\n>>> >\n>>> > ==References==\n>>> >\n>>> >\n>>> > *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html\n>>> > Mailing list discussion]\n>>> >\n>>> > *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\n>>> > P2SH flag day activation]\n>>> > *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n>>> > *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n>>> > *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n>>> > *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n>>> > *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n>>> > Version 0 Witness Program]]\n>>> > *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element\n>>> > malleability]]\n>>> > *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit deployment]]\n>>> > *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n>>> > *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit\n>>> > benefits]\n>>> >\n>>> > ==Copyright==\n>>> >\n>>> > This document is dual licensed as BSD 3-clause, and Creative Commons\n>>> > CC0 1.0 Universal.\n>>> > _______________________________________________\n>>> > bitcoin-dev mailing list\n>>> > bitcoin-dev at lists.linuxfoundation.org\n>>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>> >\n>>> >\n>>> >\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-06-07T21:43:14",
                "message_text_only": "> Keep in mind that this is only temporary until segwit has locked in,\nafter that happens it becomes optional for miners again.\n\nI missed that, that does effectively address that concern.  It appears\nthat BIP148 implements the same rule as would be required to prevent a\nlater chainsplit as well, no?\n\nThis comment did bring to mind another concern about BIP148/91 though,\nwhich I'll raise in the pull request discussion.  Feel free to respond\nto it there.\n\nJared\n\nOn Wed, Jun 7, 2017 at 2:21 PM, James Hilliard\n<james.hilliard1 at gmail.com> wrote:\n> Keep in mind that this is only temporary until segwit has locked in,\n> after that happens it becomes optional for miners again.\n>\n> On Wed, Jun 7, 2017 at 4:09 PM, Jared Lee Richardson <jaredr26 at gmail.com> wrote:\n>>> This is, by far, the safest way for miners to quickly defend against a chain split, much better than a -bip148 option.   This allows miners to defend themselves, with very little risk, since the defense is only activated if the majority of miners do so. I would move for a very rapid deployment.   Only miners would need to upgrade.   Regular users would not have to concern themselves with this release.\n>>\n>> FYI, even if very successful, this deployment and change may have a\n>> severe negative impact on a small group of miners.  Any miners/pools\n>> who are not actively following the forums, news, or these discussions\n>> may be difficult to reach and communicate with in time, particularly\n>> with language barriers.  Of those, any who are also either not\n>> signaling segwit currently or are running an older software version\n>> will have their blocks continuously and constantly orphaned, but may\n>> not have any alarms or notifications set up for such an unexpected\n>> failure.  That may or may not be a worthy consideration, but it is\n>> definitely brusque and a harsh price to pay.  Considering the\n>> opposition mentioned against transaction limits for the rare cases\n>> where a very large transaction has already been signed, it seems that\n>> this would be worthy of consideration.  For the few miners in that\n>> situation, it does turn segwit from an optional softfork into a\n>> punishing hardfork.\n>>\n>> I don't think that's a sufficient reason alone to kill the idea, but\n>> it should be a concern.\n>>\n>> Jared\n>>\n>> On Wed, Jun 7, 2017 at 7:10 AM, Erik Aronesty via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> This is, by far, the safest way for miners to quickly defend against a chain\n>>> split, much better than a -bip148 option.   This allows miners to defend\n>>> themselves, with very little risk, since the defense is only activated if\n>>> the majority of miners do so. I would move for a very rapid deployment.\n>>> Only miners would need to upgrade.   Regular users would not have to concern\n>>> themselves with this release.\n>>>\n>>> On Wed, Jun 7, 2017 at 6:13 AM, James Hilliard via bitcoin-dev\n>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>\n>>>> I think even 55% would probably work out fine simply due to incentive\n>>>> structures, once signalling is over 51% it's then clear to miners that\n>>>> non-signalling blocks will be orphaned and the rest will rapidly\n>>>> update to splitprotection/BIP148. The purpose of this BIP is to reduce\n>>>> chain split risk for BIP148 since it's looking like BIP148 is going to\n>>>> be run by a non-insignificant percentage of the economy at a minimum.\n>>>>\n>>>> On Wed, Jun 7, 2017 at 12:20 AM, Tao Effect <contact at taoeffect.com> wrote:\n>>>> > See thread on replay attacks for why activating regardless of threshold\n>>>> > is a\n>>>> > bad idea [1].\n>>>> >\n>>>> > BIP91 OTOH seems perfectly reasonable. 80% instead of 95% makes it more\n>>>> > difficult for miners to hold together in opposition to Core. It gives\n>>>> > Core\n>>>> > more leverage in negotiations.\n>>>> >\n>>>> > If they don't activate with 80%, Core can release another BIP to reduce\n>>>> > it\n>>>> > to 75%.\n>>>> >\n>>>> > Each threshold reduction makes it both more likely to succeed, but also\n>>>> > increases the likelihood of harm to the ecosystem.\n>>>> >\n>>>> > Cheers,\n>>>> > Greg\n>>>> >\n>>>> > [1]\n>>>> >\n>>>> > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014497.html\n>>>> >\n>>>> > --\n>>>> > Please do not email me anything that you are not comfortable also\n>>>> > sharing\n>>>> > with the NSA.\n>>>> >\n>>>> > On Jun 6, 2017, at 6:54 PM, James Hilliard <james.hilliard1 at gmail.com>\n>>>> > wrote:\n>>>> >\n>>>> > This is a BIP8 style soft fork so mandatory signalling will be active\n>>>> > after Aug 1st regardless.\n>>>> >\n>>>> > On Tue, Jun 6, 2017 at 8:51 PM, Tao Effect <contact at taoeffect.com>\n>>>> > wrote:\n>>>> >\n>>>> > What is the probability that a 65% threshold is too low and can allow a\n>>>> > \"surprise miner attack\", whereby miners are kept offline before the\n>>>> > deadline, and brought online immediately after, creating potential\n>>>> > havoc?\n>>>> >\n>>>> > (Nit: \"simple majority\" usually refers to >50%, I think, might cause\n>>>> > confusion.)\n>>>> >\n>>>> > -Greg Slepak\n>>>> >\n>>>> > --\n>>>> > Please do not email me anything that you are not comfortable also\n>>>> > sharing\n>>>> > with the NSA.\n>>>> >\n>>>> > On Jun 6, 2017, at 5:56 PM, James Hilliard via bitcoin-dev\n>>>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>> >\n>>>> > Due to the proposed calendar(https://segwit2x.github.io/) for the\n>>>> > SegWit2x agreement being too slow to activate SegWit mandatory\n>>>> > signalling ahead of BIP148 using BIP91 I would like to propose another\n>>>> > option that miners can use to prevent a chain split ahead of the Aug\n>>>> > 1st BIP148 activation date.\n>>>> >\n>>>> > The splitprotection soft fork is essentially BIP91 but using BIP8\n>>>> > instead of BIP9 with a lower activation threshold and immediate\n>>>> > mandatory signalling lock-in. This allows for a majority of miners to\n>>>> > activate mandatory SegWit signalling and prevent a potential chain\n>>>> > split ahead of BIP148 activation.\n>>>> >\n>>>> > This BIP allows for miners to respond to market forces quickly ahead\n>>>> > of BIP148 activation by signalling for splitprotection. Any miners\n>>>> > already running BIP148 should be encouraged to use splitprotection.\n>>>> >\n>>>> > <pre>\n>>>> > BIP: splitprotection\n>>>> > Layer: Consensus (soft fork)\n>>>> > Title: User Activated Soft Fork Split Protection\n>>>> > Author: James Hilliard <james.hilliard1 at gmail.com>\n>>>> > Comments-Summary: No comments yet.\n>>>> > Comments-URI:\n>>>> > Status: Draft\n>>>> > Type: Standards Track\n>>>> > Created: 2017-05-22\n>>>> > License: BSD-3-Clause\n>>>> >          CC0-1.0\n>>>> > </pre>\n>>>> >\n>>>> > ==Abstract==\n>>>> >\n>>>> > This document specifies a coordination mechanism for a simple majority\n>>>> > of miners to prevent a chain split ahead of BIP148 activation.\n>>>> >\n>>>> > ==Definitions==\n>>>> >\n>>>> > \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n>>>> > using bit 1, between November 15th 2016 and November 15th 2017 to\n>>>> > activate BIP141, BIP143 and BIP147.\n>>>> >\n>>>> > ==Motivation==\n>>>> >\n>>>> > The biggest risk of BIP148 is an extended chain split, this BIP\n>>>> > provides a way for a simple majority of miners to eliminate that risk.\n>>>> >\n>>>> > This BIP provides a way for a simple majority of miners to coordinate\n>>>> > activation of the existing segwit deployment with less than 95%\n>>>> > hashpower before BIP148 activation. Due to time constraints unless\n>>>> > immediately deployed BIP91 will likely not be able to enforce\n>>>> > mandatory signalling of segwit before the Aug 1st activation of\n>>>> > BIP148. This BIP provides a method for rapid miner activation of\n>>>> > SegWit mandatory signalling ahead of the BIP148 activation date. Since\n>>>> > the primary goal of this BIP is to reduce the chance of an extended\n>>>> > chain split as much as possible we activate using a simple miner\n>>>> > majority of 65% over a 504 block interval rather than a higher\n>>>> > percentage. This BIP also allows miners to signal their intention to\n>>>> > run BIP148 in order to prevent a chain split.\n>>>> >\n>>>> > ==Specification==\n>>>> >\n>>>> > While this BIP is active, all blocks must set the nVersion header top\n>>>> > 3 bits to 001 together with bit field (1<<1) (according to the\n>>>> > existing segwit deployment). Blocks that do not signal as required\n>>>> > will be rejected.\n>>>> >\n>>>> > ==Deployment==\n>>>> >\n>>>> > This BIP will be deployed by \"version bits\" with a 65%(this can be\n>>>> > adjusted if desired) activation threshold BIP9 with the name\n>>>> > \"splitprotecion\" and using bit 2.\n>>>> >\n>>>> > This BIP starts immediately and is a BIP8 style soft fork since\n>>>> > mandatory signalling will start on midnight August 1st 2017 (epoch\n>>>> > time 1501545600) regardless of whether or not this BIP has reached its\n>>>> > own signalling threshold. This BIP will cease to be active when segwit\n>>>> > is locked-in.\n>>>> >\n>>>> > === Reference implementation ===\n>>>> >\n>>>> > <pre>\n>>>> > // Check if Segregated Witness is Locked In\n>>>> > bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n>>>> > Consensus::Params& params)\n>>>> > {\n>>>> >   LOCK(cs_main);\n>>>> >   return (VersionBitsState(pindexPrev, params,\n>>>> > Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n>>>> > THRESHOLD_LOCKED_IN);\n>>>> > }\n>>>> >\n>>>> > // SPLITPROTECTION mandatory segwit signalling.\n>>>> > if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n>>>> > Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n>>>> > THRESHOLD_LOCKED_IN &&\n>>>> >    !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>>>> > // Segwit is not locked in\n>>>> >    !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n>>>> > and is not active.\n>>>> > {\n>>>> >   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>>>> > VERSIONBITS_TOP_BITS;\n>>>> >   bool fSegbit = (pindex->nVersion &\n>>>> > VersionBitsMask(chainparams.GetConsensus(),\n>>>> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>>> >   if (!(fVersionBits && fSegbit)) {\n>>>> >       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>>>> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>>> >   }\n>>>> > }\n>>>> >\n>>>> > // BIP148 mandatory segwit signalling.\n>>>> > int64_t nMedianTimePast = pindex->GetMedianTimePast();\n>>>> > if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n>>>> >    (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n>>>> >    (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>>>> > // Segwit is not locked in\n>>>> >     !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n>>>> > // and is not active.\n>>>> > {\n>>>> >   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>>>> > VERSIONBITS_TOP_BITS;\n>>>> >   bool fSegbit = (pindex->nVersion &\n>>>> > VersionBitsMask(chainparams.GetConsensus(),\n>>>> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>>> >   if (!(fVersionBits && fSegbit)) {\n>>>> >       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>>>> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>>> >   }\n>>>> > }\n>>>> > </pre>\n>>>> >\n>>>> >\n>>>> > https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1\n>>>> >\n>>>> > ==Backwards Compatibility==\n>>>> >\n>>>> > This deployment is compatible with the existing \"segwit\" bit 1\n>>>> > deployment scheduled between midnight November 15th, 2016 and midnight\n>>>> > November 15th, 2017. This deployment is also compatible with the\n>>>> > existing BIP148 deployment. This BIP is compatible with BIP91 only if\n>>>> > BIP91 activates before it and before BIP148. Miners will need to\n>>>> > upgrade their nodes to support splitprotection otherwise they may\n>>>> > build on top of an invalid block. While this bip is active users\n>>>> > should either upgrade to splitprotection or wait for additional\n>>>> > confirmations when accepting payments.\n>>>> >\n>>>> > ==Rationale==\n>>>> >\n>>>> > Historically we have used IsSuperMajority() to activate soft forks\n>>>> > such as BIP66 which has a mandatory signalling requirement for miners\n>>>> > once activated, this ensures that miners are aware of new rules being\n>>>> > enforced. This technique can be leveraged to lower the signalling\n>>>> > threshold of a soft fork while it is in the process of being deployed\n>>>> > in a backwards compatible way. We also use a BIP8 style timeout to\n>>>> > ensure that this BIP is compatible with BIP148 and that BIP148\n>>>> > compatible mandatory signalling activates regardless of miner\n>>>> > signalling levels.\n>>>> >\n>>>> > By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n>>>> > deployment, this BIP can cause the existing \"segwit\" deployment to\n>>>> > activate without needing to release a new deployment. As we approach\n>>>> > BIP148 activation it may be desirable for a majority of miners to have\n>>>> > a method that will ensure that there is no chain split.\n>>>> >\n>>>> > ==References==\n>>>> >\n>>>> >\n>>>> > *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html\n>>>> > Mailing list discussion]\n>>>> >\n>>>> > *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\n>>>> > P2SH flag day activation]\n>>>> > *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n>>>> > *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n>>>> > *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n>>>> > *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n>>>> > *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n>>>> > Version 0 Witness Program]]\n>>>> > *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element\n>>>> > malleability]]\n>>>> > *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit deployment]]\n>>>> > *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n>>>> > *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit\n>>>> > benefits]\n>>>> >\n>>>> > ==Copyright==\n>>>> >\n>>>> > This document is dual licensed as BSD 3-clause, and Creative Commons\n>>>> > CC0 1.0 Universal.\n>>>> > _______________________________________________\n>>>> > bitcoin-dev mailing list\n>>>> > bitcoin-dev at lists.linuxfoundation.org\n>>>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>> >\n>>>> >\n>>>> >\n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>>\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>"
            },
            {
                "author": "James Hilliard",
                "date": "2017-06-07T21:42:52",
                "message_text_only": "I don't really see how this would increase the likelihood of an\nextended chain split assuming BIP148 is going to have\nnon-insignificant economic backing. This BIP is designed to provide a\nrisk mitigation measure that miners can safely deploy. Since this BIP\nonly activates with a clear miner majority it should not increase the\nrisk of an extended chain split. At this point it is not completely\nclear how much economic support there is for BIP148 but support\ncertainly seems to be growing and we have nearly 2 months until BIP148\nactivation. I intentionally used a shorter activation period here so\nthat decisions by miners can be made close to the BIP148 activation\ndate.\n\nOn Wed, Jun 7, 2017 at 4:29 PM, Jared Lee Richardson <jaredr26 at gmail.com> wrote:\n> I think this BIP represents a gamble, and the gamble may not be a good\n> one.  The gamble here is that if the segwit2x changes are rolled out\n> on time, and if the signatories accept the bit4 + bit1 signaling\n> proposals within BIP91, the launch will go smoother, as intended.  But\n> conversely, if either the segwit2x signatories balk about the Bit1\n> signaling OR if the timelines for segwit2mb are missed even by a bit,\n> it may cause the BIP148 chainsplit to be worse than it would be\n> without.  Given the frequent concerns raised in multiple places about\n> the aggressiveness of the segwit2x timelines, including the\n> non-hardfork timelines, this does not seem like a great gamble to be\n> making.\n>\n> The reason I say it may make the chainsplit be worse than it would\n> otherwise be is that it may provide a false sense of safety for BIP148\n> that currently does not currently exist(and should not, as it is a\n> chainsplit).  That sense of safety would only be legitimate if the\n> segwit2x signatories were on board, and the segwit2x code effectively\n> enforced BIP148 simultaneously, neither of which are guaranteed.  If\n> users and more miners had a false sense that BIP148 was *not* going to\n> chainsplit from default / segwit2x, they might not follow the news if\n> suddenly the segwit2x plan were delayed for a few days.  While any\n> additional support would definitely be cheered on by BIP148\n> supporters, the practical reality might be that this proposal would\n> take BIP148 from the \"unlikely to have any viable chain after flag day\n> without segwit2x\" category into the \"small but viable minority chain\"\n> category, and even worse, it might strengthen the chainsplit just days\n> before segwit is activated on BOTH chains, putting the BIP148\n> supporters on the wrong pro-segwit, but still-viable chain.\n>\n> If Core had taken a strong stance to include BIP148 into the client,\n> and if BIP148 support were much much broader, I would feel differently\n> as the gamble would be more likely to discourage a chainsplit (By\n> forcing the acceleration of segwit2x) rather than encourage it (by\n> strengthening an extreme minority chainsplit that may wind up on the\n> wrong side of two segwit-activated chains).  As it stands now, this\n> seems like a very dangerous attempt to compromise with a small but\n> vocal group that are the ones creating the threat to begin with.\n>\n> Jared\n>\n> On Tue, Jun 6, 2017 at 5:56 PM, James Hilliard via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Due to the proposed calendar(https://segwit2x.github.io/) for the\n>> SegWit2x agreement being too slow to activate SegWit mandatory\n>> signalling ahead of BIP148 using BIP91 I would like to propose another\n>> option that miners can use to prevent a chain split ahead of the Aug\n>> 1st BIP148 activation date.\n>>\n>> The splitprotection soft fork is essentially BIP91 but using BIP8\n>> instead of BIP9 with a lower activation threshold and immediate\n>> mandatory signalling lock-in. This allows for a majority of miners to\n>> activate mandatory SegWit signalling and prevent a potential chain\n>> split ahead of BIP148 activation.\n>>\n>> This BIP allows for miners to respond to market forces quickly ahead\n>> of BIP148 activation by signalling for splitprotection. Any miners\n>> already running BIP148 should be encouraged to use splitprotection.\n>>\n>> <pre>\n>>   BIP: splitprotection\n>>   Layer: Consensus (soft fork)\n>>   Title: User Activated Soft Fork Split Protection\n>>   Author: James Hilliard <james.hilliard1 at gmail.com>\n>>   Comments-Summary: No comments yet.\n>>   Comments-URI:\n>>   Status: Draft\n>>   Type: Standards Track\n>>   Created: 2017-05-22\n>>   License: BSD-3-Clause\n>>            CC0-1.0\n>> </pre>\n>>\n>> ==Abstract==\n>>\n>> This document specifies a coordination mechanism for a simple majority\n>> of miners to prevent a chain split ahead of BIP148 activation.\n>>\n>> ==Definitions==\n>>\n>> \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n>> using bit 1, between November 15th 2016 and November 15th 2017 to\n>> activate BIP141, BIP143 and BIP147.\n>>\n>> ==Motivation==\n>>\n>> The biggest risk of BIP148 is an extended chain split, this BIP\n>> provides a way for a simple majority of miners to eliminate that risk.\n>>\n>> This BIP provides a way for a simple majority of miners to coordinate\n>> activation of the existing segwit deployment with less than 95%\n>> hashpower before BIP148 activation. Due to time constraints unless\n>> immediately deployed BIP91 will likely not be able to enforce\n>> mandatory signalling of segwit before the Aug 1st activation of\n>> BIP148. This BIP provides a method for rapid miner activation of\n>> SegWit mandatory signalling ahead of the BIP148 activation date. Since\n>> the primary goal of this BIP is to reduce the chance of an extended\n>> chain split as much as possible we activate using a simple miner\n>> majority of 65% over a 504 block interval rather than a higher\n>> percentage. This BIP also allows miners to signal their intention to\n>> run BIP148 in order to prevent a chain split.\n>>\n>> ==Specification==\n>>\n>> While this BIP is active, all blocks must set the nVersion header top\n>> 3 bits to 001 together with bit field (1<<1) (according to the\n>> existing segwit deployment). Blocks that do not signal as required\n>> will be rejected.\n>>\n>> ==Deployment==\n>>\n>> This BIP will be deployed by \"version bits\" with a 65%(this can be\n>> adjusted if desired) activation threshold BIP9 with the name\n>> \"splitprotecion\" and using bit 2.\n>>\n>> This BIP starts immediately and is a BIP8 style soft fork since\n>> mandatory signalling will start on midnight August 1st 2017 (epoch\n>> time 1501545600) regardless of whether or not this BIP has reached its\n>> own signalling threshold. This BIP will cease to be active when segwit\n>> is locked-in.\n>>\n>> === Reference implementation ===\n>>\n>> <pre>\n>> // Check if Segregated Witness is Locked In\n>> bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n>> Consensus::Params& params)\n>> {\n>>     LOCK(cs_main);\n>>     return (VersionBitsState(pindexPrev, params,\n>> Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n>> THRESHOLD_LOCKED_IN);\n>> }\n>>\n>> // SPLITPROTECTION mandatory segwit signalling.\n>> if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n>> Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n>> THRESHOLD_LOCKED_IN &&\n>>      !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>> // Segwit is not locked in\n>>      !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n>> and is not active.\n>> {\n>>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>> VERSIONBITS_TOP_BITS;\n>>     bool fSegbit = (pindex->nVersion &\n>> VersionBitsMask(chainparams.GetConsensus(),\n>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>     if (!(fVersionBits && fSegbit)) {\n>>         return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>     }\n>> }\n>>\n>> // BIP148 mandatory segwit signalling.\n>> int64_t nMedianTimePast = pindex->GetMedianTimePast();\n>> if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n>>      (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n>>      (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>>  // Segwit is not locked in\n>>       !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n>>  // and is not active.\n>> {\n>>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>> VERSIONBITS_TOP_BITS;\n>>     bool fSegbit = (pindex->nVersion &\n>> VersionBitsMask(chainparams.GetConsensus(),\n>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>     if (!(fVersionBits && fSegbit)) {\n>>         return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>     }\n>> }\n>> </pre>\n>>\n>> https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1\n>>\n>> ==Backwards Compatibility==\n>>\n>> This deployment is compatible with the existing \"segwit\" bit 1\n>> deployment scheduled between midnight November 15th, 2016 and midnight\n>> November 15th, 2017. This deployment is also compatible with the\n>> existing BIP148 deployment. This BIP is compatible with BIP91 only if\n>> BIP91 activates before it and before BIP148. Miners will need to\n>> upgrade their nodes to support splitprotection otherwise they may\n>> build on top of an invalid block. While this bip is active users\n>> should either upgrade to splitprotection or wait for additional\n>> confirmations when accepting payments.\n>>\n>> ==Rationale==\n>>\n>> Historically we have used IsSuperMajority() to activate soft forks\n>> such as BIP66 which has a mandatory signalling requirement for miners\n>> once activated, this ensures that miners are aware of new rules being\n>> enforced. This technique can be leveraged to lower the signalling\n>> threshold of a soft fork while it is in the process of being deployed\n>> in a backwards compatible way. We also use a BIP8 style timeout to\n>> ensure that this BIP is compatible with BIP148 and that BIP148\n>> compatible mandatory signalling activates regardless of miner\n>> signalling levels.\n>>\n>> By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n>> deployment, this BIP can cause the existing \"segwit\" deployment to\n>> activate without needing to release a new deployment. As we approach\n>> BIP148 activation it may be desirable for a majority of miners to have\n>> a method that will ensure that there is no chain split.\n>>\n>> ==References==\n>>\n>> *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html\n>> Mailing list discussion]\n>> *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\n>> P2SH flag day activation]\n>> *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n>> *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n>> *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n>> *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n>> *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n>> Version 0 Witness Program]]\n>> *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element malleability]]\n>> *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit deployment]]\n>> *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n>> *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit benefits]\n>>\n>> ==Copyright==\n>>\n>> This document is dual licensed as BSD 3-clause, and Creative Commons\n>> CC0 1.0 Universal.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-06-07T21:50:18",
                "message_text_only": "Could this risk mitigation measure be an optional flag?  And if so,\ncould it+BIP91 signal on a different bit than bit4?\n\nThe reason being, if for some reason the segwit2x activation cannot\ntake place in time, it would be preferable for miners to have a more\nstandard approach to activation that requires stronger consensus and\nmay be more forgiving than BIP148.  If the segwit2x activation is on\ntime to cooperate with BIP148, it could be signaled through the\nnon-bit4 approach and everything could go smoothly.  Thoughts on that\nidea?  It may add more complexity and more developer time, but may\nalso address your concerns among others.\n\n> Since this BIP\n> only activates with a clear miner majority it should not increase the\n> risk of an extended chain split.\n\nThe concern I'm raising is more about the psychology of giving BIP148\na sense of safety that may not be valid.  Without several more steps,\nBIP148 is definitely on track to be a risky chainsplit, and without\nsegwit2x it will almost certainly be a small minority chain. (Unless\nthe segwit2x compromise falls apart before then, and even in that case\nit is likely to be a minority chain)\n\nJared\n\n\nOn Wed, Jun 7, 2017 at 2:42 PM, James Hilliard\n<james.hilliard1 at gmail.com> wrote:\n> I don't really see how this would increase the likelihood of an\n> extended chain split assuming BIP148 is going to have\n> non-insignificant economic backing. This BIP is designed to provide a\n> risk mitigation measure that miners can safely deploy. Since this BIP\n> only activates with a clear miner majority it should not increase the\n> risk of an extended chain split. At this point it is not completely\n> clear how much economic support there is for BIP148 but support\n> certainly seems to be growing and we have nearly 2 months until BIP148\n> activation. I intentionally used a shorter activation period here so\n> that decisions by miners can be made close to the BIP148 activation\n> date.\n>\n> On Wed, Jun 7, 2017 at 4:29 PM, Jared Lee Richardson <jaredr26 at gmail.com> wrote:\n>> I think this BIP represents a gamble, and the gamble may not be a good\n>> one.  The gamble here is that if the segwit2x changes are rolled out\n>> on time, and if the signatories accept the bit4 + bit1 signaling\n>> proposals within BIP91, the launch will go smoother, as intended.  But\n>> conversely, if either the segwit2x signatories balk about the Bit1\n>> signaling OR if the timelines for segwit2mb are missed even by a bit,\n>> it may cause the BIP148 chainsplit to be worse than it would be\n>> without.  Given the frequent concerns raised in multiple places about\n>> the aggressiveness of the segwit2x timelines, including the\n>> non-hardfork timelines, this does not seem like a great gamble to be\n>> making.\n>>\n>> The reason I say it may make the chainsplit be worse than it would\n>> otherwise be is that it may provide a false sense of safety for BIP148\n>> that currently does not currently exist(and should not, as it is a\n>> chainsplit).  That sense of safety would only be legitimate if the\n>> segwit2x signatories were on board, and the segwit2x code effectively\n>> enforced BIP148 simultaneously, neither of which are guaranteed.  If\n>> users and more miners had a false sense that BIP148 was *not* going to\n>> chainsplit from default / segwit2x, they might not follow the news if\n>> suddenly the segwit2x plan were delayed for a few days.  While any\n>> additional support would definitely be cheered on by BIP148\n>> supporters, the practical reality might be that this proposal would\n>> take BIP148 from the \"unlikely to have any viable chain after flag day\n>> without segwit2x\" category into the \"small but viable minority chain\"\n>> category, and even worse, it might strengthen the chainsplit just days\n>> before segwit is activated on BOTH chains, putting the BIP148\n>> supporters on the wrong pro-segwit, but still-viable chain.\n>>\n>> If Core had taken a strong stance to include BIP148 into the client,\n>> and if BIP148 support were much much broader, I would feel differently\n>> as the gamble would be more likely to discourage a chainsplit (By\n>> forcing the acceleration of segwit2x) rather than encourage it (by\n>> strengthening an extreme minority chainsplit that may wind up on the\n>> wrong side of two segwit-activated chains).  As it stands now, this\n>> seems like a very dangerous attempt to compromise with a small but\n>> vocal group that are the ones creating the threat to begin with.\n>>\n>> Jared\n>>\n>> On Tue, Jun 6, 2017 at 5:56 PM, James Hilliard via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> Due to the proposed calendar(https://segwit2x.github.io/) for the\n>>> SegWit2x agreement being too slow to activate SegWit mandatory\n>>> signalling ahead of BIP148 using BIP91 I would like to propose another\n>>> option that miners can use to prevent a chain split ahead of the Aug\n>>> 1st BIP148 activation date.\n>>>\n>>> The splitprotection soft fork is essentially BIP91 but using BIP8\n>>> instead of BIP9 with a lower activation threshold and immediate\n>>> mandatory signalling lock-in. This allows for a majority of miners to\n>>> activate mandatory SegWit signalling and prevent a potential chain\n>>> split ahead of BIP148 activation.\n>>>\n>>> This BIP allows for miners to respond to market forces quickly ahead\n>>> of BIP148 activation by signalling for splitprotection. Any miners\n>>> already running BIP148 should be encouraged to use splitprotection.\n>>>\n>>> <pre>\n>>>   BIP: splitprotection\n>>>   Layer: Consensus (soft fork)\n>>>   Title: User Activated Soft Fork Split Protection\n>>>   Author: James Hilliard <james.hilliard1 at gmail.com>\n>>>   Comments-Summary: No comments yet.\n>>>   Comments-URI:\n>>>   Status: Draft\n>>>   Type: Standards Track\n>>>   Created: 2017-05-22\n>>>   License: BSD-3-Clause\n>>>            CC0-1.0\n>>> </pre>\n>>>\n>>> ==Abstract==\n>>>\n>>> This document specifies a coordination mechanism for a simple majority\n>>> of miners to prevent a chain split ahead of BIP148 activation.\n>>>\n>>> ==Definitions==\n>>>\n>>> \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n>>> using bit 1, between November 15th 2016 and November 15th 2017 to\n>>> activate BIP141, BIP143 and BIP147.\n>>>\n>>> ==Motivation==\n>>>\n>>> The biggest risk of BIP148 is an extended chain split, this BIP\n>>> provides a way for a simple majority of miners to eliminate that risk.\n>>>\n>>> This BIP provides a way for a simple majority of miners to coordinate\n>>> activation of the existing segwit deployment with less than 95%\n>>> hashpower before BIP148 activation. Due to time constraints unless\n>>> immediately deployed BIP91 will likely not be able to enforce\n>>> mandatory signalling of segwit before the Aug 1st activation of\n>>> BIP148. This BIP provides a method for rapid miner activation of\n>>> SegWit mandatory signalling ahead of the BIP148 activation date. Since\n>>> the primary goal of this BIP is to reduce the chance of an extended\n>>> chain split as much as possible we activate using a simple miner\n>>> majority of 65% over a 504 block interval rather than a higher\n>>> percentage. This BIP also allows miners to signal their intention to\n>>> run BIP148 in order to prevent a chain split.\n>>>\n>>> ==Specification==\n>>>\n>>> While this BIP is active, all blocks must set the nVersion header top\n>>> 3 bits to 001 together with bit field (1<<1) (according to the\n>>> existing segwit deployment). Blocks that do not signal as required\n>>> will be rejected.\n>>>\n>>> ==Deployment==\n>>>\n>>> This BIP will be deployed by \"version bits\" with a 65%(this can be\n>>> adjusted if desired) activation threshold BIP9 with the name\n>>> \"splitprotecion\" and using bit 2.\n>>>\n>>> This BIP starts immediately and is a BIP8 style soft fork since\n>>> mandatory signalling will start on midnight August 1st 2017 (epoch\n>>> time 1501545600) regardless of whether or not this BIP has reached its\n>>> own signalling threshold. This BIP will cease to be active when segwit\n>>> is locked-in.\n>>>\n>>> === Reference implementation ===\n>>>\n>>> <pre>\n>>> // Check if Segregated Witness is Locked In\n>>> bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n>>> Consensus::Params& params)\n>>> {\n>>>     LOCK(cs_main);\n>>>     return (VersionBitsState(pindexPrev, params,\n>>> Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n>>> THRESHOLD_LOCKED_IN);\n>>> }\n>>>\n>>> // SPLITPROTECTION mandatory segwit signalling.\n>>> if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n>>> Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n>>> THRESHOLD_LOCKED_IN &&\n>>>      !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>>> // Segwit is not locked in\n>>>      !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n>>> and is not active.\n>>> {\n>>>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>>> VERSIONBITS_TOP_BITS;\n>>>     bool fSegbit = (pindex->nVersion &\n>>> VersionBitsMask(chainparams.GetConsensus(),\n>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>>     if (!(fVersionBits && fSegbit)) {\n>>>         return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>>> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>>     }\n>>> }\n>>>\n>>> // BIP148 mandatory segwit signalling.\n>>> int64_t nMedianTimePast = pindex->GetMedianTimePast();\n>>> if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n>>>      (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n>>>      (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>>>  // Segwit is not locked in\n>>>       !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n>>>  // and is not active.\n>>> {\n>>>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>>> VERSIONBITS_TOP_BITS;\n>>>     bool fSegbit = (pindex->nVersion &\n>>> VersionBitsMask(chainparams.GetConsensus(),\n>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>>     if (!(fVersionBits && fSegbit)) {\n>>>         return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>>> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>>     }\n>>> }\n>>> </pre>\n>>>\n>>> https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1\n>>>\n>>> ==Backwards Compatibility==\n>>>\n>>> This deployment is compatible with the existing \"segwit\" bit 1\n>>> deployment scheduled between midnight November 15th, 2016 and midnight\n>>> November 15th, 2017. This deployment is also compatible with the\n>>> existing BIP148 deployment. This BIP is compatible with BIP91 only if\n>>> BIP91 activates before it and before BIP148. Miners will need to\n>>> upgrade their nodes to support splitprotection otherwise they may\n>>> build on top of an invalid block. While this bip is active users\n>>> should either upgrade to splitprotection or wait for additional\n>>> confirmations when accepting payments.\n>>>\n>>> ==Rationale==\n>>>\n>>> Historically we have used IsSuperMajority() to activate soft forks\n>>> such as BIP66 which has a mandatory signalling requirement for miners\n>>> once activated, this ensures that miners are aware of new rules being\n>>> enforced. This technique can be leveraged to lower the signalling\n>>> threshold of a soft fork while it is in the process of being deployed\n>>> in a backwards compatible way. We also use a BIP8 style timeout to\n>>> ensure that this BIP is compatible with BIP148 and that BIP148\n>>> compatible mandatory signalling activates regardless of miner\n>>> signalling levels.\n>>>\n>>> By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n>>> deployment, this BIP can cause the existing \"segwit\" deployment to\n>>> activate without needing to release a new deployment. As we approach\n>>> BIP148 activation it may be desirable for a majority of miners to have\n>>> a method that will ensure that there is no chain split.\n>>>\n>>> ==References==\n>>>\n>>> *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html\n>>> Mailing list discussion]\n>>> *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\n>>> P2SH flag day activation]\n>>> *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n>>> *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n>>> *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n>>> *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n>>> *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n>>> Version 0 Witness Program]]\n>>> *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element malleability]]\n>>> *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit deployment]]\n>>> *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n>>> *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit benefits]\n>>>\n>>> ==Copyright==\n>>>\n>>> This document is dual licensed as BSD 3-clause, and Creative Commons\n>>> CC0 1.0 Universal.\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "James Hilliard",
                "date": "2017-06-07T22:23:31",
                "message_text_only": "On Wed, Jun 7, 2017 at 4:50 PM, Jared Lee Richardson <jaredr26 at gmail.com> wrote:\n> Could this risk mitigation measure be an optional flag?  And if so,\n> could it+BIP91 signal on a different bit than bit4?\nIt's fairly trivial for miners to signal for BIP91 on bit4 or a\ndifferent bit at the same time as the code is trivial enough to\ncombine\n>\n> The reason being, if for some reason the segwit2x activation cannot\n> take place in time, it would be preferable for miners to have a more\n> standard approach to activation that requires stronger consensus and\n> may be more forgiving than BIP148.  If the segwit2x activation is on\n> time to cooperate with BIP148, it could be signaled through the\n> non-bit4 approach and everything could go smoothly.  Thoughts on that\n> idea?  It may add more complexity and more developer time, but may\n> also address your concerns among others.\nThis does give miners another approach to activate segwit ahead of\nBIP148, if segwit2x activation is rolled out and activated immediately\nthen this would not be needed however based on the timeline here\nhttps://segwit2x.github.io/ it would not be possible for BIP91 to\nenforce mandatory signalling ahead of BIP148. Maybe that can be\nchanged though, I've suggested an immediate rollout with a placeholder\nclient timeout instead of the HF code initially in order to accelerate\nthat.\n>\n>> Since this BIP\n>> only activates with a clear miner majority it should not increase the\n>> risk of an extended chain split.\n>\n> The concern I'm raising is more about the psychology of giving BIP148\n> a sense of safety that may not be valid.  Without several more steps,\n> BIP148 is definitely on track to be a risky chainsplit, and without\n> segwit2x it will almost certainly be a small minority chain. (Unless\n> the segwit2x compromise falls apart before then, and even in that case\n> it is likely to be a minority chain)\nThere are 2 primary factors involved here, economic support and\nhashpower either of which is enough to make a permanent chain split\nunlikely, miners will mine whichever chain is most profitable(see\nETH/ETC hashpower profitability equilibrium for an example of how this\nworks in practice) however there may be lag time immediately after the\nsplit if there is an economic majority but not a hashpower majority\ninitially. This is risk mitigation that only requires miners support\nhowever. The main issue is just one of activation timelines, BIP91 as\nis takes too long to activate unless started ahead of the existing\nsegwit2x schedule and it's unlikely that BIP148 will get pushed back\nany further.\n>\n> Jared\n>\n>\n> On Wed, Jun 7, 2017 at 2:42 PM, James Hilliard\n> <james.hilliard1 at gmail.com> wrote:\n>> I don't really see how this would increase the likelihood of an\n>> extended chain split assuming BIP148 is going to have\n>> non-insignificant economic backing. This BIP is designed to provide a\n>> risk mitigation measure that miners can safely deploy. Since this BIP\n>> only activates with a clear miner majority it should not increase the\n>> risk of an extended chain split. At this point it is not completely\n>> clear how much economic support there is for BIP148 but support\n>> certainly seems to be growing and we have nearly 2 months until BIP148\n>> activation. I intentionally used a shorter activation period here so\n>> that decisions by miners can be made close to the BIP148 activation\n>> date.\n>>\n>> On Wed, Jun 7, 2017 at 4:29 PM, Jared Lee Richardson <jaredr26 at gmail.com> wrote:\n>>> I think this BIP represents a gamble, and the gamble may not be a good\n>>> one.  The gamble here is that if the segwit2x changes are rolled out\n>>> on time, and if the signatories accept the bit4 + bit1 signaling\n>>> proposals within BIP91, the launch will go smoother, as intended.  But\n>>> conversely, if either the segwit2x signatories balk about the Bit1\n>>> signaling OR if the timelines for segwit2mb are missed even by a bit,\n>>> it may cause the BIP148 chainsplit to be worse than it would be\n>>> without.  Given the frequent concerns raised in multiple places about\n>>> the aggressiveness of the segwit2x timelines, including the\n>>> non-hardfork timelines, this does not seem like a great gamble to be\n>>> making.\n>>>\n>>> The reason I say it may make the chainsplit be worse than it would\n>>> otherwise be is that it may provide a false sense of safety for BIP148\n>>> that currently does not currently exist(and should not, as it is a\n>>> chainsplit).  That sense of safety would only be legitimate if the\n>>> segwit2x signatories were on board, and the segwit2x code effectively\n>>> enforced BIP148 simultaneously, neither of which are guaranteed.  If\n>>> users and more miners had a false sense that BIP148 was *not* going to\n>>> chainsplit from default / segwit2x, they might not follow the news if\n>>> suddenly the segwit2x plan were delayed for a few days.  While any\n>>> additional support would definitely be cheered on by BIP148\n>>> supporters, the practical reality might be that this proposal would\n>>> take BIP148 from the \"unlikely to have any viable chain after flag day\n>>> without segwit2x\" category into the \"small but viable minority chain\"\n>>> category, and even worse, it might strengthen the chainsplit just days\n>>> before segwit is activated on BOTH chains, putting the BIP148\n>>> supporters on the wrong pro-segwit, but still-viable chain.\n>>>\n>>> If Core had taken a strong stance to include BIP148 into the client,\n>>> and if BIP148 support were much much broader, I would feel differently\n>>> as the gamble would be more likely to discourage a chainsplit (By\n>>> forcing the acceleration of segwit2x) rather than encourage it (by\n>>> strengthening an extreme minority chainsplit that may wind up on the\n>>> wrong side of two segwit-activated chains).  As it stands now, this\n>>> seems like a very dangerous attempt to compromise with a small but\n>>> vocal group that are the ones creating the threat to begin with.\n>>>\n>>> Jared\n>>>\n>>> On Tue, Jun 6, 2017 at 5:56 PM, James Hilliard via bitcoin-dev\n>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>> Due to the proposed calendar(https://segwit2x.github.io/) for the\n>>>> SegWit2x agreement being too slow to activate SegWit mandatory\n>>>> signalling ahead of BIP148 using BIP91 I would like to propose another\n>>>> option that miners can use to prevent a chain split ahead of the Aug\n>>>> 1st BIP148 activation date.\n>>>>\n>>>> The splitprotection soft fork is essentially BIP91 but using BIP8\n>>>> instead of BIP9 with a lower activation threshold and immediate\n>>>> mandatory signalling lock-in. This allows for a majority of miners to\n>>>> activate mandatory SegWit signalling and prevent a potential chain\n>>>> split ahead of BIP148 activation.\n>>>>\n>>>> This BIP allows for miners to respond to market forces quickly ahead\n>>>> of BIP148 activation by signalling for splitprotection. Any miners\n>>>> already running BIP148 should be encouraged to use splitprotection.\n>>>>\n>>>> <pre>\n>>>>   BIP: splitprotection\n>>>>   Layer: Consensus (soft fork)\n>>>>   Title: User Activated Soft Fork Split Protection\n>>>>   Author: James Hilliard <james.hilliard1 at gmail.com>\n>>>>   Comments-Summary: No comments yet.\n>>>>   Comments-URI:\n>>>>   Status: Draft\n>>>>   Type: Standards Track\n>>>>   Created: 2017-05-22\n>>>>   License: BSD-3-Clause\n>>>>            CC0-1.0\n>>>> </pre>\n>>>>\n>>>> ==Abstract==\n>>>>\n>>>> This document specifies a coordination mechanism for a simple majority\n>>>> of miners to prevent a chain split ahead of BIP148 activation.\n>>>>\n>>>> ==Definitions==\n>>>>\n>>>> \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n>>>> using bit 1, between November 15th 2016 and November 15th 2017 to\n>>>> activate BIP141, BIP143 and BIP147.\n>>>>\n>>>> ==Motivation==\n>>>>\n>>>> The biggest risk of BIP148 is an extended chain split, this BIP\n>>>> provides a way for a simple majority of miners to eliminate that risk.\n>>>>\n>>>> This BIP provides a way for a simple majority of miners to coordinate\n>>>> activation of the existing segwit deployment with less than 95%\n>>>> hashpower before BIP148 activation. Due to time constraints unless\n>>>> immediately deployed BIP91 will likely not be able to enforce\n>>>> mandatory signalling of segwit before the Aug 1st activation of\n>>>> BIP148. This BIP provides a method for rapid miner activation of\n>>>> SegWit mandatory signalling ahead of the BIP148 activation date. Since\n>>>> the primary goal of this BIP is to reduce the chance of an extended\n>>>> chain split as much as possible we activate using a simple miner\n>>>> majority of 65% over a 504 block interval rather than a higher\n>>>> percentage. This BIP also allows miners to signal their intention to\n>>>> run BIP148 in order to prevent a chain split.\n>>>>\n>>>> ==Specification==\n>>>>\n>>>> While this BIP is active, all blocks must set the nVersion header top\n>>>> 3 bits to 001 together with bit field (1<<1) (according to the\n>>>> existing segwit deployment). Blocks that do not signal as required\n>>>> will be rejected.\n>>>>\n>>>> ==Deployment==\n>>>>\n>>>> This BIP will be deployed by \"version bits\" with a 65%(this can be\n>>>> adjusted if desired) activation threshold BIP9 with the name\n>>>> \"splitprotecion\" and using bit 2.\n>>>>\n>>>> This BIP starts immediately and is a BIP8 style soft fork since\n>>>> mandatory signalling will start on midnight August 1st 2017 (epoch\n>>>> time 1501545600) regardless of whether or not this BIP has reached its\n>>>> own signalling threshold. This BIP will cease to be active when segwit\n>>>> is locked-in.\n>>>>\n>>>> === Reference implementation ===\n>>>>\n>>>> <pre>\n>>>> // Check if Segregated Witness is Locked In\n>>>> bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n>>>> Consensus::Params& params)\n>>>> {\n>>>>     LOCK(cs_main);\n>>>>     return (VersionBitsState(pindexPrev, params,\n>>>> Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n>>>> THRESHOLD_LOCKED_IN);\n>>>> }\n>>>>\n>>>> // SPLITPROTECTION mandatory segwit signalling.\n>>>> if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n>>>> Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n>>>> THRESHOLD_LOCKED_IN &&\n>>>>      !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>>>> // Segwit is not locked in\n>>>>      !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n>>>> and is not active.\n>>>> {\n>>>>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>>>> VERSIONBITS_TOP_BITS;\n>>>>     bool fSegbit = (pindex->nVersion &\n>>>> VersionBitsMask(chainparams.GetConsensus(),\n>>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>>>     if (!(fVersionBits && fSegbit)) {\n>>>>         return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>>>> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>>>     }\n>>>> }\n>>>>\n>>>> // BIP148 mandatory segwit signalling.\n>>>> int64_t nMedianTimePast = pindex->GetMedianTimePast();\n>>>> if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n>>>>      (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n>>>>      (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>>>>  // Segwit is not locked in\n>>>>       !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n>>>>  // and is not active.\n>>>> {\n>>>>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>>>> VERSIONBITS_TOP_BITS;\n>>>>     bool fSegbit = (pindex->nVersion &\n>>>> VersionBitsMask(chainparams.GetConsensus(),\n>>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>>>     if (!(fVersionBits && fSegbit)) {\n>>>>         return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>>>> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>>>     }\n>>>> }\n>>>> </pre>\n>>>>\n>>>> https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1\n>>>>\n>>>> ==Backwards Compatibility==\n>>>>\n>>>> This deployment is compatible with the existing \"segwit\" bit 1\n>>>> deployment scheduled between midnight November 15th, 2016 and midnight\n>>>> November 15th, 2017. This deployment is also compatible with the\n>>>> existing BIP148 deployment. This BIP is compatible with BIP91 only if\n>>>> BIP91 activates before it and before BIP148. Miners will need to\n>>>> upgrade their nodes to support splitprotection otherwise they may\n>>>> build on top of an invalid block. While this bip is active users\n>>>> should either upgrade to splitprotection or wait for additional\n>>>> confirmations when accepting payments.\n>>>>\n>>>> ==Rationale==\n>>>>\n>>>> Historically we have used IsSuperMajority() to activate soft forks\n>>>> such as BIP66 which has a mandatory signalling requirement for miners\n>>>> once activated, this ensures that miners are aware of new rules being\n>>>> enforced. This technique can be leveraged to lower the signalling\n>>>> threshold of a soft fork while it is in the process of being deployed\n>>>> in a backwards compatible way. We also use a BIP8 style timeout to\n>>>> ensure that this BIP is compatible with BIP148 and that BIP148\n>>>> compatible mandatory signalling activates regardless of miner\n>>>> signalling levels.\n>>>>\n>>>> By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n>>>> deployment, this BIP can cause the existing \"segwit\" deployment to\n>>>> activate without needing to release a new deployment. As we approach\n>>>> BIP148 activation it may be desirable for a majority of miners to have\n>>>> a method that will ensure that there is no chain split.\n>>>>\n>>>> ==References==\n>>>>\n>>>> *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html\n>>>> Mailing list discussion]\n>>>> *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\n>>>> P2SH flag day activation]\n>>>> *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n>>>> *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n>>>> *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n>>>> *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n>>>> *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n>>>> Version 0 Witness Program]]\n>>>> *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element malleability]]\n>>>> *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit deployment]]\n>>>> *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n>>>> *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit benefits]\n>>>>\n>>>> ==Copyright==\n>>>>\n>>>> This document is dual licensed as BSD 3-clause, and Creative Commons\n>>>> CC0 1.0 Universal.\n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-06-07T22:53:14",
                "message_text_only": "> There are 2 primary factors involved here, economic support and\nhashpower either of which is enough to make a permanent chain split\nunlikely, miners will mine whichever chain is most profitable(see\nETH/ETC hashpower profitability equilibrium for an example of how this\nworks in practice)\n\nThat's not a comparable example.  ETC did not face potentially years of\nslow blocktimes before it normalized, whereas BIP148 is on track to do\nexactly that.  Moreover, ETC represented a fundamental break from the\nmajority consensus that could not be rectified, whereas BIP148 represents\nonly a minority attempt to accelerate something that an overwhelming\nmajority of miners have already agreed to activate under segwit2x.  Lastly\nETC was required to add replay protection, just like any minority fork\nproposed by any crypto-currency has been, something that BIP148 both lacks\nand refuses to add or even acknowledge the necessity of.  Without replay\nprotection, ETC could not have become profitable enough to be a viable\nminority chain.  If BIP148's chain is not the majority chain and it does\nnot have replay protection, it will face the same problems, but that\nrequired replay protection will turn it into a hardfork.  This will be a\nvery bad position for UASF supporters to find themselves in - Either\nhardfork and hope the price is higher and the majority converts, or die as\nthe minority chain with no reliable methods of economic conversion.\n\nI believe, but don't have data to back this, that most of the BIP148\ninsistence comes not from a legitimate attempt to gain consensus (or else\nthey would either outright oppose segwit2mb for its hardfork, or they would\noutright support it), but rather from an attempt for BIP148 supporters to\nsave face for BIP148 being a failure.  If I'm correct, that's a terrible\nand highly non-technical reason for segwit2mb to bend over backwards\nattempting to support BIP148's attempt to save face.\n\n> The main issue is just one of activation timelines, BIP91 as\nis takes too long to activate unless started ahead of the existing\nsegwit2x schedule and it's unlikely that BIP148 will get pushed back\nany further.\n\nEven if I'm not correct on the above, I and others find it hard to accept\nthat this timeline conflict is segwit2x's fault.  Segwit2x has both some\nflexibility and broad support that crosses contentious pro-segwit and\npro-blocksize-increase divisions that have existed for two years.  BIP148\nis attempting to hold segwit2x's timelines and code hostage by claiming\ninflexibility and claiming broad support, and not only are neither of those\nassertions are backed by real data, BIP148 (by being so inflexible) is\npushing a position that deepens the divides between those groups.  For\nthere to be technical reasons for compatibility (so long as there are\ntradeoffs, which there are), there needs to be hard data showing that\nBIP148 is a viable minority fork that won't simply die off on its own.\n\nJared\n\n\nOn Wed, Jun 7, 2017 at 3:23 PM, James Hilliard <james.hilliard1 at gmail.com>\nwrote:\n\n> On Wed, Jun 7, 2017 at 4:50 PM, Jared Lee Richardson <jaredr26 at gmail.com>\n> wrote:\n> > Could this risk mitigation measure be an optional flag?  And if so,\n> > could it+BIP91 signal on a different bit than bit4?\n> It's fairly trivial for miners to signal for BIP91 on bit4 or a\n> different bit at the same time as the code is trivial enough to\n> combine\n> >\n> > The reason being, if for some reason the segwit2x activation cannot\n> > take place in time, it would be preferable for miners to have a more\n> > standard approach to activation that requires stronger consensus and\n> > may be more forgiving than BIP148.  If the segwit2x activation is on\n> > time to cooperate with BIP148, it could be signaled through the\n> > non-bit4 approach and everything could go smoothly.  Thoughts on that\n> > idea?  It may add more complexity and more developer time, but may\n> > also address your concerns among others.\n> This does give miners another approach to activate segwit ahead of\n> BIP148, if segwit2x activation is rolled out and activated immediately\n> then this would not be needed however based on the timeline here\n> https://segwit2x.github.io/ it would not be possible for BIP91 to\n> enforce mandatory signalling ahead of BIP148. Maybe that can be\n> changed though, I've suggested an immediate rollout with a placeholder\n> client timeout instead of the HF code initially in order to accelerate\n> that.\n> >\n> >> Since this BIP\n> >> only activates with a clear miner majority it should not increase the\n> >> risk of an extended chain split.\n> >\n> > The concern I'm raising is more about the psychology of giving BIP148\n> > a sense of safety that may not be valid.  Without several more steps,\n> > BIP148 is definitely on track to be a risky chainsplit, and without\n> > segwit2x it will almost certainly be a small minority chain. (Unless\n> > the segwit2x compromise falls apart before then, and even in that case\n> > it is likely to be a minority chain)\n> There are 2 primary factors involved here, economic support and\n> hashpower either of which is enough to make a permanent chain split\n> unlikely, miners will mine whichever chain is most profitable(see\n> ETH/ETC hashpower profitability equilibrium for an example of how this\n> works in practice) however there may be lag time immediately after the\n> split if there is an economic majority but not a hashpower majority\n> initially. This is risk mitigation that only requires miners support\n> however. The main issue is just one of activation timelines, BIP91 as\n> is takes too long to activate unless started ahead of the existing\n> segwit2x schedule and it's unlikely that BIP148 will get pushed back\n> any further.\n> >\n> > Jared\n> >\n> >\n> > On Wed, Jun 7, 2017 at 2:42 PM, James Hilliard\n> > <james.hilliard1 at gmail.com> wrote:\n> >> I don't really see how this would increase the likelihood of an\n> >> extended chain split assuming BIP148 is going to have\n> >> non-insignificant economic backing. This BIP is designed to provide a\n> >> risk mitigation measure that miners can safely deploy. Since this BIP\n> >> only activates with a clear miner majority it should not increase the\n> >> risk of an extended chain split. At this point it is not completely\n> >> clear how much economic support there is for BIP148 but support\n> >> certainly seems to be growing and we have nearly 2 months until BIP148\n> >> activation. I intentionally used a shorter activation period here so\n> >> that decisions by miners can be made close to the BIP148 activation\n> >> date.\n> >>\n> >> On Wed, Jun 7, 2017 at 4:29 PM, Jared Lee Richardson <\n> jaredr26 at gmail.com> wrote:\n> >>> I think this BIP represents a gamble, and the gamble may not be a good\n> >>> one.  The gamble here is that if the segwit2x changes are rolled out\n> >>> on time, and if the signatories accept the bit4 + bit1 signaling\n> >>> proposals within BIP91, the launch will go smoother, as intended.  But\n> >>> conversely, if either the segwit2x signatories balk about the Bit1\n> >>> signaling OR if the timelines for segwit2mb are missed even by a bit,\n> >>> it may cause the BIP148 chainsplit to be worse than it would be\n> >>> without.  Given the frequent concerns raised in multiple places about\n> >>> the aggressiveness of the segwit2x timelines, including the\n> >>> non-hardfork timelines, this does not seem like a great gamble to be\n> >>> making.\n> >>>\n> >>> The reason I say it may make the chainsplit be worse than it would\n> >>> otherwise be is that it may provide a false sense of safety for BIP148\n> >>> that currently does not currently exist(and should not, as it is a\n> >>> chainsplit).  That sense of safety would only be legitimate if the\n> >>> segwit2x signatories were on board, and the segwit2x code effectively\n> >>> enforced BIP148 simultaneously, neither of which are guaranteed.  If\n> >>> users and more miners had a false sense that BIP148 was *not* going to\n> >>> chainsplit from default / segwit2x, they might not follow the news if\n> >>> suddenly the segwit2x plan were delayed for a few days.  While any\n> >>> additional support would definitely be cheered on by BIP148\n> >>> supporters, the practical reality might be that this proposal would\n> >>> take BIP148 from the \"unlikely to have any viable chain after flag day\n> >>> without segwit2x\" category into the \"small but viable minority chain\"\n> >>> category, and even worse, it might strengthen the chainsplit just days\n> >>> before segwit is activated on BOTH chains, putting the BIP148\n> >>> supporters on the wrong pro-segwit, but still-viable chain.\n> >>>\n> >>> If Core had taken a strong stance to include BIP148 into the client,\n> >>> and if BIP148 support were much much broader, I would feel differently\n> >>> as the gamble would be more likely to discourage a chainsplit (By\n> >>> forcing the acceleration of segwit2x) rather than encourage it (by\n> >>> strengthening an extreme minority chainsplit that may wind up on the\n> >>> wrong side of two segwit-activated chains).  As it stands now, this\n> >>> seems like a very dangerous attempt to compromise with a small but\n> >>> vocal group that are the ones creating the threat to begin with.\n> >>>\n> >>> Jared\n> >>>\n> >>> On Tue, Jun 6, 2017 at 5:56 PM, James Hilliard via bitcoin-dev\n> >>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>>> Due to the proposed calendar(https://segwit2x.github.io/) for the\n> >>>> SegWit2x agreement being too slow to activate SegWit mandatory\n> >>>> signalling ahead of BIP148 using BIP91 I would like to propose another\n> >>>> option that miners can use to prevent a chain split ahead of the Aug\n> >>>> 1st BIP148 activation date.\n> >>>>\n> >>>> The splitprotection soft fork is essentially BIP91 but using BIP8\n> >>>> instead of BIP9 with a lower activation threshold and immediate\n> >>>> mandatory signalling lock-in. This allows for a majority of miners to\n> >>>> activate mandatory SegWit signalling and prevent a potential chain\n> >>>> split ahead of BIP148 activation.\n> >>>>\n> >>>> This BIP allows for miners to respond to market forces quickly ahead\n> >>>> of BIP148 activation by signalling for splitprotection. Any miners\n> >>>> already running BIP148 should be encouraged to use splitprotection.\n> >>>>\n> >>>> <pre>\n> >>>>   BIP: splitprotection\n> >>>>   Layer: Consensus (soft fork)\n> >>>>   Title: User Activated Soft Fork Split Protection\n> >>>>   Author: James Hilliard <james.hilliard1 at gmail.com>\n> >>>>   Comments-Summary: No comments yet.\n> >>>>   Comments-URI:\n> >>>>   Status: Draft\n> >>>>   Type: Standards Track\n> >>>>   Created: 2017-05-22\n> >>>>   License: BSD-3-Clause\n> >>>>            CC0-1.0\n> >>>> </pre>\n> >>>>\n> >>>> ==Abstract==\n> >>>>\n> >>>> This document specifies a coordination mechanism for a simple majority\n> >>>> of miners to prevent a chain split ahead of BIP148 activation.\n> >>>>\n> >>>> ==Definitions==\n> >>>>\n> >>>> \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n> >>>> using bit 1, between November 15th 2016 and November 15th 2017 to\n> >>>> activate BIP141, BIP143 and BIP147.\n> >>>>\n> >>>> ==Motivation==\n> >>>>\n> >>>> The biggest risk of BIP148 is an extended chain split, this BIP\n> >>>> provides a way for a simple majority of miners to eliminate that risk.\n> >>>>\n> >>>> This BIP provides a way for a simple majority of miners to coordinate\n> >>>> activation of the existing segwit deployment with less than 95%\n> >>>> hashpower before BIP148 activation. Due to time constraints unless\n> >>>> immediately deployed BIP91 will likely not be able to enforce\n> >>>> mandatory signalling of segwit before the Aug 1st activation of\n> >>>> BIP148. This BIP provides a method for rapid miner activation of\n> >>>> SegWit mandatory signalling ahead of the BIP148 activation date. Since\n> >>>> the primary goal of this BIP is to reduce the chance of an extended\n> >>>> chain split as much as possible we activate using a simple miner\n> >>>> majority of 65% over a 504 block interval rather than a higher\n> >>>> percentage. This BIP also allows miners to signal their intention to\n> >>>> run BIP148 in order to prevent a chain split.\n> >>>>\n> >>>> ==Specification==\n> >>>>\n> >>>> While this BIP is active, all blocks must set the nVersion header top\n> >>>> 3 bits to 001 together with bit field (1<<1) (according to the\n> >>>> existing segwit deployment). Blocks that do not signal as required\n> >>>> will be rejected.\n> >>>>\n> >>>> ==Deployment==\n> >>>>\n> >>>> This BIP will be deployed by \"version bits\" with a 65%(this can be\n> >>>> adjusted if desired) activation threshold BIP9 with the name\n> >>>> \"splitprotecion\" and using bit 2.\n> >>>>\n> >>>> This BIP starts immediately and is a BIP8 style soft fork since\n> >>>> mandatory signalling will start on midnight August 1st 2017 (epoch\n> >>>> time 1501545600) regardless of whether or not this BIP has reached its\n> >>>> own signalling threshold. This BIP will cease to be active when segwit\n> >>>> is locked-in.\n> >>>>\n> >>>> === Reference implementation ===\n> >>>>\n> >>>> <pre>\n> >>>> // Check if Segregated Witness is Locked In\n> >>>> bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n> >>>> Consensus::Params& params)\n> >>>> {\n> >>>>     LOCK(cs_main);\n> >>>>     return (VersionBitsState(pindexPrev, params,\n> >>>> Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n> >>>> THRESHOLD_LOCKED_IN);\n> >>>> }\n> >>>>\n> >>>> // SPLITPROTECTION mandatory segwit signalling.\n> >>>> if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n> >>>> Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n> >>>> THRESHOLD_LOCKED_IN &&\n> >>>>      !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n> >>>> // Segwit is not locked in\n> >>>>      !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) )\n> //\n> >>>> and is not active.\n> >>>> {\n> >>>>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n> >>>> VERSIONBITS_TOP_BITS;\n> >>>>     bool fSegbit = (pindex->nVersion &\n> >>>> VersionBitsMask(chainparams.GetConsensus(),\n> >>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n> >>>>     if (!(fVersionBits && fSegbit)) {\n> >>>>         return state.DoS(0, error(\"ConnectBlock(): relayed block must\n> >>>> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n> >>>>     }\n> >>>> }\n> >>>>\n> >>>> // BIP148 mandatory segwit signalling.\n> >>>> int64_t nMedianTimePast = pindex->GetMedianTimePast();\n> >>>> if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00\n> UTC\n> >>>>      (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00\n> UTC\n> >>>>      (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus())\n> &&\n> >>>>  // Segwit is not locked in\n> >>>>       !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n> >>>>  // and is not active.\n> >>>> {\n> >>>>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n> >>>> VERSIONBITS_TOP_BITS;\n> >>>>     bool fSegbit = (pindex->nVersion &\n> >>>> VersionBitsMask(chainparams.GetConsensus(),\n> >>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n> >>>>     if (!(fVersionBits && fSegbit)) {\n> >>>>         return state.DoS(0, error(\"ConnectBlock(): relayed block must\n> >>>> signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n> >>>>     }\n> >>>> }\n> >>>> </pre>\n> >>>>\n> >>>> https://github.com/bitcoin/bitcoin/compare/0.14...\n> jameshilliard:splitprotection-v0.14.1\n> >>>>\n> >>>> ==Backwards Compatibility==\n> >>>>\n> >>>> This deployment is compatible with the existing \"segwit\" bit 1\n> >>>> deployment scheduled between midnight November 15th, 2016 and midnight\n> >>>> November 15th, 2017. This deployment is also compatible with the\n> >>>> existing BIP148 deployment. This BIP is compatible with BIP91 only if\n> >>>> BIP91 activates before it and before BIP148. Miners will need to\n> >>>> upgrade their nodes to support splitprotection otherwise they may\n> >>>> build on top of an invalid block. While this bip is active users\n> >>>> should either upgrade to splitprotection or wait for additional\n> >>>> confirmations when accepting payments.\n> >>>>\n> >>>> ==Rationale==\n> >>>>\n> >>>> Historically we have used IsSuperMajority() to activate soft forks\n> >>>> such as BIP66 which has a mandatory signalling requirement for miners\n> >>>> once activated, this ensures that miners are aware of new rules being\n> >>>> enforced. This technique can be leveraged to lower the signalling\n> >>>> threshold of a soft fork while it is in the process of being deployed\n> >>>> in a backwards compatible way. We also use a BIP8 style timeout to\n> >>>> ensure that this BIP is compatible with BIP148 and that BIP148\n> >>>> compatible mandatory signalling activates regardless of miner\n> >>>> signalling levels.\n> >>>>\n> >>>> By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n> >>>> deployment, this BIP can cause the existing \"segwit\" deployment to\n> >>>> activate without needing to release a new deployment. As we approach\n> >>>> BIP148 activation it may be desirable for a majority of miners to have\n> >>>> a method that will ensure that there is no chain split.\n> >>>>\n> >>>> ==References==\n> >>>>\n> >>>> *[https://lists.linuxfoundation.org/pipermail/\n> bitcoin-dev/2017-March/013714.html\n> >>>> Mailing list discussion]\n> >>>> *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.\n> cpp#L1281-L1283\n> >>>> P2SH flag day activation]\n> >>>> *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n> >>>> *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n> >>>> *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n> >>>> *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n> >>>> *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n> >>>> Version 0 Witness Program]]\n> >>>> *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element\n> malleability]]\n> >>>> *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit\n> deployment]]\n> >>>> *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n> >>>> *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit\n> benefits]\n> >>>>\n> >>>> ==Copyright==\n> >>>>\n> >>>> This document is dual licensed as BSD 3-clause, and Creative Commons\n> >>>> CC0 1.0 Universal.\n> >>>> _______________________________________________\n> >>>> bitcoin-dev mailing list\n> >>>> bitcoin-dev at lists.linuxfoundation.org\n> >>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170607/304cb174/attachment-0001.html>"
            },
            {
                "author": "James Hilliard",
                "date": "2017-06-07T23:11:00",
                "message_text_only": "On Wed, Jun 7, 2017 at 5:53 PM, Jared Lee Richardson <jaredr26 at gmail.com> wrote:\n>> There are 2 primary factors involved here, economic support and\n> hashpower either of which is enough to make a permanent chain split\n> unlikely, miners will mine whichever chain is most profitable(see\n> ETH/ETC hashpower profitability equilibrium for an example of how this\n> works in practice)\n>\n> That's not a comparable example.  ETC did not face potentially years of slow\n> blocktimes before it normalized, whereas BIP148 is on track to do exactly\n> that.  Moreover, ETC represented a fundamental break from the majority\n> consensus that could not be rectified, whereas BIP148 represents only a\n> minority attempt to accelerate something that an overwhelming majority of\n> miners have already agreed to activate under segwit2x.  Lastly ETC was\n> required to add replay protection, just like any minority fork proposed by\n> any crypto-currency has been, something that BIP148 both lacks and refuses\n> to add or even acknowledge the necessity of.  Without replay protection, ETC\n> could not have become profitable enough to be a viable minority chain.  If\n> BIP148's chain is not the majority chain and it does not have replay\n> protection, it will face the same problems, but that required replay\n> protection will turn it into a hardfork.  This will be a very bad position\n> for UASF supporters to find themselves in - Either hardfork and hope the\n> price is higher and the majority converts, or die as the minority chain with\n> no reliable methods of economic conversion.\nHigher transaction fees on a minority chain can compensate miners for\na lower price which would likely be enough to get the BIP148 chain to\na difficulty reduction. BIP148 however is a consensus change that can\nbe rectified if it gets more work, this would act as an additional\nincentive for mine the BIP148 side since there would be no wipeout\nrisk there. ETC replay protection was done after the fork on an as\nneeded basis(there are multiple reliable techniques that can be used\nto split UTXO's), the same can happen with BIP148 and it is easier to\ndo with Bitcoin than with the ETH/ETC split IMO.\n>\n> I believe, but don't have data to back this, that most of the BIP148\n> insistence comes not from a legitimate attempt to gain consensus (or else\n> they would either outright oppose segwit2mb for its hardfork, or they would\n> outright support it), but rather from an attempt for BIP148 supporters to\n> save face for BIP148 being a failure.  If I'm correct, that's a terrible and\n> highly non-technical reason for segwit2mb to bend over backwards attempting\n> to support BIP148's attempt to save face.\nA big reason BIP148 still has support is because up until SegWit\nactually activates there's no guarantee segwit2mb will actually have\nthe necessary support to activate SegWit.\n>\n>> The main issue is just one of activation timelines, BIP91 as\n> is takes too long to activate unless started ahead of the existing\n> segwit2x schedule and it's unlikely that BIP148 will get pushed back\n> any further.\n>\n> Even if I'm not correct on the above, I and others find it hard to accept\n> that this timeline conflict is segwit2x's fault.  Segwit2x has both some\n> flexibility and broad support that crosses contentious pro-segwit and\n> pro-blocksize-increase divisions that have existed for two years.  BIP148 is\n> attempting to hold segwit2x's timelines and code hostage by claiming\n> inflexibility and claiming broad support, and not only are neither of those\n> assertions are backed by real data, BIP148 (by being so inflexible) is\n> pushing a position that deepens the divides between those groups.  For there\n> to be technical reasons for compatibility (so long as there are tradeoffs,\n> which there are), there needs to be hard data showing that BIP148 is a\n> viable minority fork that won't simply die off on its own.\nThis is largely an issue due to segwit2x's bundling, if the SW and HF\npart of segwit2x were unbundled then there would be no reason to delay\nBIP91 activation, this is especially a problem since it takes a good\ndeal of time to properly code and test a HF. Unfortunately segwit2x\nhas been quite inflexible in regards to the bundling aspect even\nthough there are clearly no technical reasons for it to be there.\n>\n> Jared\n>\n>\n> On Wed, Jun 7, 2017 at 3:23 PM, James Hilliard <james.hilliard1 at gmail.com>\n> wrote:\n>>\n>> On Wed, Jun 7, 2017 at 4:50 PM, Jared Lee Richardson <jaredr26 at gmail.com>\n>> wrote:\n>> > Could this risk mitigation measure be an optional flag?  And if so,\n>> > could it+BIP91 signal on a different bit than bit4?\n>> It's fairly trivial for miners to signal for BIP91 on bit4 or a\n>> different bit at the same time as the code is trivial enough to\n>> combine\n>> >\n>> > The reason being, if for some reason the segwit2x activation cannot\n>> > take place in time, it would be preferable for miners to have a more\n>> > standard approach to activation that requires stronger consensus and\n>> > may be more forgiving than BIP148.  If the segwit2x activation is on\n>> > time to cooperate with BIP148, it could be signaled through the\n>> > non-bit4 approach and everything could go smoothly.  Thoughts on that\n>> > idea?  It may add more complexity and more developer time, but may\n>> > also address your concerns among others.\n>> This does give miners another approach to activate segwit ahead of\n>> BIP148, if segwit2x activation is rolled out and activated immediately\n>> then this would not be needed however based on the timeline here\n>> https://segwit2x.github.io/ it would not be possible for BIP91 to\n>> enforce mandatory signalling ahead of BIP148. Maybe that can be\n>> changed though, I've suggested an immediate rollout with a placeholder\n>> client timeout instead of the HF code initially in order to accelerate\n>> that.\n>> >\n>> >> Since this BIP\n>> >> only activates with a clear miner majority it should not increase the\n>> >> risk of an extended chain split.\n>> >\n>> > The concern I'm raising is more about the psychology of giving BIP148\n>> > a sense of safety that may not be valid.  Without several more steps,\n>> > BIP148 is definitely on track to be a risky chainsplit, and without\n>> > segwit2x it will almost certainly be a small minority chain. (Unless\n>> > the segwit2x compromise falls apart before then, and even in that case\n>> > it is likely to be a minority chain)\n>> There are 2 primary factors involved here, economic support and\n>> hashpower either of which is enough to make a permanent chain split\n>> unlikely, miners will mine whichever chain is most profitable(see\n>> ETH/ETC hashpower profitability equilibrium for an example of how this\n>> works in practice) however there may be lag time immediately after the\n>> split if there is an economic majority but not a hashpower majority\n>> initially. This is risk mitigation that only requires miners support\n>> however. The main issue is just one of activation timelines, BIP91 as\n>> is takes too long to activate unless started ahead of the existing\n>> segwit2x schedule and it's unlikely that BIP148 will get pushed back\n>> any further.\n>> >\n>> > Jared\n>> >\n>> >\n>> > On Wed, Jun 7, 2017 at 2:42 PM, James Hilliard\n>> > <james.hilliard1 at gmail.com> wrote:\n>> >> I don't really see how this would increase the likelihood of an\n>> >> extended chain split assuming BIP148 is going to have\n>> >> non-insignificant economic backing. This BIP is designed to provide a\n>> >> risk mitigation measure that miners can safely deploy. Since this BIP\n>> >> only activates with a clear miner majority it should not increase the\n>> >> risk of an extended chain split. At this point it is not completely\n>> >> clear how much economic support there is for BIP148 but support\n>> >> certainly seems to be growing and we have nearly 2 months until BIP148\n>> >> activation. I intentionally used a shorter activation period here so\n>> >> that decisions by miners can be made close to the BIP148 activation\n>> >> date.\n>> >>\n>> >> On Wed, Jun 7, 2017 at 4:29 PM, Jared Lee Richardson\n>> >> <jaredr26 at gmail.com> wrote:\n>> >>> I think this BIP represents a gamble, and the gamble may not be a good\n>> >>> one.  The gamble here is that if the segwit2x changes are rolled out\n>> >>> on time, and if the signatories accept the bit4 + bit1 signaling\n>> >>> proposals within BIP91, the launch will go smoother, as intended.  But\n>> >>> conversely, if either the segwit2x signatories balk about the Bit1\n>> >>> signaling OR if the timelines for segwit2mb are missed even by a bit,\n>> >>> it may cause the BIP148 chainsplit to be worse than it would be\n>> >>> without.  Given the frequent concerns raised in multiple places about\n>> >>> the aggressiveness of the segwit2x timelines, including the\n>> >>> non-hardfork timelines, this does not seem like a great gamble to be\n>> >>> making.\n>> >>>\n>> >>> The reason I say it may make the chainsplit be worse than it would\n>> >>> otherwise be is that it may provide a false sense of safety for BIP148\n>> >>> that currently does not currently exist(and should not, as it is a\n>> >>> chainsplit).  That sense of safety would only be legitimate if the\n>> >>> segwit2x signatories were on board, and the segwit2x code effectively\n>> >>> enforced BIP148 simultaneously, neither of which are guaranteed.  If\n>> >>> users and more miners had a false sense that BIP148 was *not* going to\n>> >>> chainsplit from default / segwit2x, they might not follow the news if\n>> >>> suddenly the segwit2x plan were delayed for a few days.  While any\n>> >>> additional support would definitely be cheered on by BIP148\n>> >>> supporters, the practical reality might be that this proposal would\n>> >>> take BIP148 from the \"unlikely to have any viable chain after flag day\n>> >>> without segwit2x\" category into the \"small but viable minority chain\"\n>> >>> category, and even worse, it might strengthen the chainsplit just days\n>> >>> before segwit is activated on BOTH chains, putting the BIP148\n>> >>> supporters on the wrong pro-segwit, but still-viable chain.\n>> >>>\n>> >>> If Core had taken a strong stance to include BIP148 into the client,\n>> >>> and if BIP148 support were much much broader, I would feel differently\n>> >>> as the gamble would be more likely to discourage a chainsplit (By\n>> >>> forcing the acceleration of segwit2x) rather than encourage it (by\n>> >>> strengthening an extreme minority chainsplit that may wind up on the\n>> >>> wrong side of two segwit-activated chains).  As it stands now, this\n>> >>> seems like a very dangerous attempt to compromise with a small but\n>> >>> vocal group that are the ones creating the threat to begin with.\n>> >>>\n>> >>> Jared\n>> >>>\n>> >>> On Tue, Jun 6, 2017 at 5:56 PM, James Hilliard via bitcoin-dev\n>> >>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>>> Due to the proposed calendar(https://segwit2x.github.io/) for the\n>> >>>> SegWit2x agreement being too slow to activate SegWit mandatory\n>> >>>> signalling ahead of BIP148 using BIP91 I would like to propose\n>> >>>> another\n>> >>>> option that miners can use to prevent a chain split ahead of the Aug\n>> >>>> 1st BIP148 activation date.\n>> >>>>\n>> >>>> The splitprotection soft fork is essentially BIP91 but using BIP8\n>> >>>> instead of BIP9 with a lower activation threshold and immediate\n>> >>>> mandatory signalling lock-in. This allows for a majority of miners to\n>> >>>> activate mandatory SegWit signalling and prevent a potential chain\n>> >>>> split ahead of BIP148 activation.\n>> >>>>\n>> >>>> This BIP allows for miners to respond to market forces quickly ahead\n>> >>>> of BIP148 activation by signalling for splitprotection. Any miners\n>> >>>> already running BIP148 should be encouraged to use splitprotection.\n>> >>>>\n>> >>>> <pre>\n>> >>>>   BIP: splitprotection\n>> >>>>   Layer: Consensus (soft fork)\n>> >>>>   Title: User Activated Soft Fork Split Protection\n>> >>>>   Author: James Hilliard <james.hilliard1 at gmail.com>\n>> >>>>   Comments-Summary: No comments yet.\n>> >>>>   Comments-URI:\n>> >>>>   Status: Draft\n>> >>>>   Type: Standards Track\n>> >>>>   Created: 2017-05-22\n>> >>>>   License: BSD-3-Clause\n>> >>>>            CC0-1.0\n>> >>>> </pre>\n>> >>>>\n>> >>>> ==Abstract==\n>> >>>>\n>> >>>> This document specifies a coordination mechanism for a simple\n>> >>>> majority\n>> >>>> of miners to prevent a chain split ahead of BIP148 activation.\n>> >>>>\n>> >>>> ==Definitions==\n>> >>>>\n>> >>>> \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n>> >>>> using bit 1, between November 15th 2016 and November 15th 2017 to\n>> >>>> activate BIP141, BIP143 and BIP147.\n>> >>>>\n>> >>>> ==Motivation==\n>> >>>>\n>> >>>> The biggest risk of BIP148 is an extended chain split, this BIP\n>> >>>> provides a way for a simple majority of miners to eliminate that\n>> >>>> risk.\n>> >>>>\n>> >>>> This BIP provides a way for a simple majority of miners to coordinate\n>> >>>> activation of the existing segwit deployment with less than 95%\n>> >>>> hashpower before BIP148 activation. Due to time constraints unless\n>> >>>> immediately deployed BIP91 will likely not be able to enforce\n>> >>>> mandatory signalling of segwit before the Aug 1st activation of\n>> >>>> BIP148. This BIP provides a method for rapid miner activation of\n>> >>>> SegWit mandatory signalling ahead of the BIP148 activation date.\n>> >>>> Since\n>> >>>> the primary goal of this BIP is to reduce the chance of an extended\n>> >>>> chain split as much as possible we activate using a simple miner\n>> >>>> majority of 65% over a 504 block interval rather than a higher\n>> >>>> percentage. This BIP also allows miners to signal their intention to\n>> >>>> run BIP148 in order to prevent a chain split.\n>> >>>>\n>> >>>> ==Specification==\n>> >>>>\n>> >>>> While this BIP is active, all blocks must set the nVersion header top\n>> >>>> 3 bits to 001 together with bit field (1<<1) (according to the\n>> >>>> existing segwit deployment). Blocks that do not signal as required\n>> >>>> will be rejected.\n>> >>>>\n>> >>>> ==Deployment==\n>> >>>>\n>> >>>> This BIP will be deployed by \"version bits\" with a 65%(this can be\n>> >>>> adjusted if desired) activation threshold BIP9 with the name\n>> >>>> \"splitprotecion\" and using bit 2.\n>> >>>>\n>> >>>> This BIP starts immediately and is a BIP8 style soft fork since\n>> >>>> mandatory signalling will start on midnight August 1st 2017 (epoch\n>> >>>> time 1501545600) regardless of whether or not this BIP has reached\n>> >>>> its\n>> >>>> own signalling threshold. This BIP will cease to be active when\n>> >>>> segwit\n>> >>>> is locked-in.\n>> >>>>\n>> >>>> === Reference implementation ===\n>> >>>>\n>> >>>> <pre>\n>> >>>> // Check if Segregated Witness is Locked In\n>> >>>> bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n>> >>>> Consensus::Params& params)\n>> >>>> {\n>> >>>>     LOCK(cs_main);\n>> >>>>     return (VersionBitsState(pindexPrev, params,\n>> >>>> Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n>> >>>> THRESHOLD_LOCKED_IN);\n>> >>>> }\n>> >>>>\n>> >>>> // SPLITPROTECTION mandatory segwit signalling.\n>> >>>> if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n>> >>>> Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n>> >>>> THRESHOLD_LOCKED_IN &&\n>> >>>>      !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>> >>>> // Segwit is not locked in\n>> >>>>      !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) )\n>> >>>> //\n>> >>>> and is not active.\n>> >>>> {\n>> >>>>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>> >>>> VERSIONBITS_TOP_BITS;\n>> >>>>     bool fSegbit = (pindex->nVersion &\n>> >>>> VersionBitsMask(chainparams.GetConsensus(),\n>> >>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>> >>>>     if (!(fVersionBits && fSegbit)) {\n>> >>>>         return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>> >>>> signal for segwit, please upgrade\"), REJECT_INVALID,\n>> >>>> \"bad-no-segwit\");\n>> >>>>     }\n>> >>>> }\n>> >>>>\n>> >>>> // BIP148 mandatory segwit signalling.\n>> >>>> int64_t nMedianTimePast = pindex->GetMedianTimePast();\n>> >>>> if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00\n>> >>>> UTC\n>> >>>>      (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00\n>> >>>> UTC\n>> >>>>      (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus())\n>> >>>> &&\n>> >>>>  // Segwit is not locked in\n>> >>>>       !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n>> >>>>  // and is not active.\n>> >>>> {\n>> >>>>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>> >>>> VERSIONBITS_TOP_BITS;\n>> >>>>     bool fSegbit = (pindex->nVersion &\n>> >>>> VersionBitsMask(chainparams.GetConsensus(),\n>> >>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>> >>>>     if (!(fVersionBits && fSegbit)) {\n>> >>>>         return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>> >>>> signal for segwit, please upgrade\"), REJECT_INVALID,\n>> >>>> \"bad-no-segwit\");\n>> >>>>     }\n>> >>>> }\n>> >>>> </pre>\n>> >>>>\n>> >>>>\n>> >>>> https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1\n>> >>>>\n>> >>>> ==Backwards Compatibility==\n>> >>>>\n>> >>>> This deployment is compatible with the existing \"segwit\" bit 1\n>> >>>> deployment scheduled between midnight November 15th, 2016 and\n>> >>>> midnight\n>> >>>> November 15th, 2017. This deployment is also compatible with the\n>> >>>> existing BIP148 deployment. This BIP is compatible with BIP91 only if\n>> >>>> BIP91 activates before it and before BIP148. Miners will need to\n>> >>>> upgrade their nodes to support splitprotection otherwise they may\n>> >>>> build on top of an invalid block. While this bip is active users\n>> >>>> should either upgrade to splitprotection or wait for additional\n>> >>>> confirmations when accepting payments.\n>> >>>>\n>> >>>> ==Rationale==\n>> >>>>\n>> >>>> Historically we have used IsSuperMajority() to activate soft forks\n>> >>>> such as BIP66 which has a mandatory signalling requirement for miners\n>> >>>> once activated, this ensures that miners are aware of new rules being\n>> >>>> enforced. This technique can be leveraged to lower the signalling\n>> >>>> threshold of a soft fork while it is in the process of being deployed\n>> >>>> in a backwards compatible way. We also use a BIP8 style timeout to\n>> >>>> ensure that this BIP is compatible with BIP148 and that BIP148\n>> >>>> compatible mandatory signalling activates regardless of miner\n>> >>>> signalling levels.\n>> >>>>\n>> >>>> By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n>> >>>> deployment, this BIP can cause the existing \"segwit\" deployment to\n>> >>>> activate without needing to release a new deployment. As we approach\n>> >>>> BIP148 activation it may be desirable for a majority of miners to\n>> >>>> have\n>> >>>> a method that will ensure that there is no chain split.\n>> >>>>\n>> >>>> ==References==\n>> >>>>\n>> >>>>\n>> >>>> *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html\n>> >>>> Mailing list discussion]\n>> >>>>\n>> >>>> *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\n>> >>>> P2SH flag day activation]\n>> >>>> *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n>> >>>> *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n>> >>>> *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n>> >>>> *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n>> >>>> *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n>> >>>> Version 0 Witness Program]]\n>> >>>> *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element\n>> >>>> malleability]]\n>> >>>> *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit\n>> >>>> deployment]]\n>> >>>> *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n>> >>>> *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit\n>> >>>> benefits]\n>> >>>>\n>> >>>> ==Copyright==\n>> >>>>\n>> >>>> This document is dual licensed as BSD 3-clause, and Creative Commons\n>> >>>> CC0 1.0 Universal.\n>> >>>> _______________________________________________\n>> >>>> bitcoin-dev mailing list\n>> >>>> bitcoin-dev at lists.linuxfoundation.org\n>> >>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-06-07T23:43:57",
                "message_text_only": "> BIP148 however is a consensus change that can\n> be rectified if it gets more work, this would act as an additional\n> incentive for mine the BIP148 side since there would be no wipeout\n> risk there.\n\nThis statement is misleading.  Wipeout risks don't apply to any consensus\nchanges; It is a consensus change, it can only be abandoned.  The BIP148\nchain carries just as many risks of being abandoned or even more with\nsegwit2x on the table.  No miner would consider \"wipeout risk\" an advantage\nwhen the real threat is chain abandonment.\n\n> Higher transaction fees on a minority chain can compensate miners for\n> a lower price which would likely be enough to get the BIP148 chain to\n> a difficulty reduction.\n\nHigher transaction fees suffers the same problem as exchange support does.\nWithout replay protection, it is very difficult for any average user to\nforce transactions onto one chain or the other.  Thus, without replay\nprotection, the UASF chain is unlikely to develop any viable fee market;\nIts few miners 99% of the time will simply choose from the highest fees\nthat were already available to the other chain, which is basically no\nadvantage at all.\n\n>  ETC replay protection was done after the fork on an as\n> needed basis(there are multiple reliable techniques that can be used\n> to split UTXO's), the same can happen with BIP148 and it is easier to\n> do with Bitcoin than with the ETH/ETC split IMO.\n\nETC replay protection was added because they were already a hardfork and\nwithout it they would not have had a viable chain.  BIP148 is not supposed\nto be a hardfork, and if it added replay protection to remain viable it\nwould lose the frequently touted \"wipeout advantage\" as well as the ability\nto call itself a softfork.  And are you seriously suggesting that what\nhappened with ETC and ETH is a desirable and good situation for Bitcoin,\nand that UASF is ETC?\n\n> A big reason BIP148 still has support is because up until SegWit\n> actually activates there's no guarantee segwit2mb will actually have\n> the necessary support to activate SegWit.\n\nFor a miners blowing through six million dollars a day in mining\noperational costs, that's a pretty crappy reason.  Serious miners can't\nafford to prop up a non-viable chain based on philosophy or maybes.  BIP148\nis based entirely upon people who aren't putting anything on the line\ntrying to convince others to take the huge risks for them.  With\ndeceptively fallacious logic, in my opinion.\n\nEven segwit2x is based on the assumption that all miners can reach\nconsensus.  Break that assumption and segwit2x will have the same problems\nas UASF.\n\n> This is largely an issue due to segwit2x's bundling, if the SW and HF\n> part of segwit2x were unbundled then there would be no reason to delay\n> BIP91 activation\n\nThey are bundled.  Segwit alone doesn't have the desired overwhelming\nconsensus, unless core wishes to fork 71% to 29%, and maybe not even that\nhigh.  That's the technical reason, and they can't be unbundled without\nbreaking that consensus.\n\nJared\n\n\nOn Wed, Jun 7, 2017 at 4:11 PM, James Hilliard <james.hilliard1 at gmail.com>\nwrote:\n\n> On Wed, Jun 7, 2017 at 5:53 PM, Jared Lee Richardson <jaredr26 at gmail.com>\n> wrote:\n> >> There are 2 primary factors involved here, economic support and\n> > hashpower either of which is enough to make a permanent chain split\n> > unlikely, miners will mine whichever chain is most profitable(see\n> > ETH/ETC hashpower profitability equilibrium for an example of how this\n> > works in practice)\n> >\n> > That's not a comparable example.  ETC did not face potentially years of\n> slow\n> > blocktimes before it normalized, whereas BIP148 is on track to do exactly\n> > that.  Moreover, ETC represented a fundamental break from the majority\n> > consensus that could not be rectified, whereas BIP148 represents only a\n> > minority attempt to accelerate something that an overwhelming majority of\n> > miners have already agreed to activate under segwit2x.  Lastly ETC was\n> > required to add replay protection, just like any minority fork proposed\n> by\n> > any crypto-currency has been, something that BIP148 both lacks and\n> refuses\n> > to add or even acknowledge the necessity of.  Without replay protection,\n> ETC\n> > could not have become profitable enough to be a viable minority chain.\n> If\n> > BIP148's chain is not the majority chain and it does not have replay\n> > protection, it will face the same problems, but that required replay\n> > protection will turn it into a hardfork.  This will be a very bad\n> position\n> > for UASF supporters to find themselves in - Either hardfork and hope the\n> > price is higher and the majority converts, or die as the minority chain\n> with\n> > no reliable methods of economic conversion.\n> Higher transaction fees on a minority chain can compensate miners for\n> a lower price which would likely be enough to get the BIP148 chain to\n> a difficulty reduction. BIP148 however is a consensus change that can\n> be rectified if it gets more work, this would act as an additional\n> incentive for mine the BIP148 side since there would be no wipeout\n> risk there. ETC replay protection was done after the fork on an as\n> needed basis(there are multiple reliable techniques that can be used\n> to split UTXO's), the same can happen with BIP148 and it is easier to\n> do with Bitcoin than with the ETH/ETC split IMO.\n> >\n> > I believe, but don't have data to back this, that most of the BIP148\n> > insistence comes not from a legitimate attempt to gain consensus (or else\n> > they would either outright oppose segwit2mb for its hardfork, or they\n> would\n> > outright support it), but rather from an attempt for BIP148 supporters to\n> > save face for BIP148 being a failure.  If I'm correct, that's a terrible\n> and\n> > highly non-technical reason for segwit2mb to bend over backwards\n> attempting\n> > to support BIP148's attempt to save face.\n> A big reason BIP148 still has support is because up until SegWit\n> actually activates there's no guarantee segwit2mb will actually have\n> the necessary support to activate SegWit.\n> >\n> >> The main issue is just one of activation timelines, BIP91 as\n> > is takes too long to activate unless started ahead of the existing\n> > segwit2x schedule and it's unlikely that BIP148 will get pushed back\n> > any further.\n> >\n> > Even if I'm not correct on the above, I and others find it hard to accept\n> > that this timeline conflict is segwit2x's fault.  Segwit2x has both some\n> > flexibility and broad support that crosses contentious pro-segwit and\n> > pro-blocksize-increase divisions that have existed for two years.\n> BIP148 is\n> > attempting to hold segwit2x's timelines and code hostage by claiming\n> > inflexibility and claiming broad support, and not only are neither of\n> those\n> > assertions are backed by real data, BIP148 (by being so inflexible) is\n> > pushing a position that deepens the divides between those groups.  For\n> there\n> > to be technical reasons for compatibility (so long as there are\n> tradeoffs,\n> > which there are), there needs to be hard data showing that BIP148 is a\n> > viable minority fork that won't simply die off on its own.\n> This is largely an issue due to segwit2x's bundling, if the SW and HF\n> part of segwit2x were unbundled then there would be no reason to delay\n> BIP91 activation, this is especially a problem since it takes a good\n> deal of time to properly code and test a HF. Unfortunately segwit2x\n> has been quite inflexible in regards to the bundling aspect even\n> though there are clearly no technical reasons for it to be there.\n> >\n> > Jared\n> >\n> >\n> > On Wed, Jun 7, 2017 at 3:23 PM, James Hilliard <\n> james.hilliard1 at gmail.com>\n> > wrote:\n> >>\n> >> On Wed, Jun 7, 2017 at 4:50 PM, Jared Lee Richardson <\n> jaredr26 at gmail.com>\n> >> wrote:\n> >> > Could this risk mitigation measure be an optional flag?  And if so,\n> >> > could it+BIP91 signal on a different bit than bit4?\n> >> It's fairly trivial for miners to signal for BIP91 on bit4 or a\n> >> different bit at the same time as the code is trivial enough to\n> >> combine\n> >> >\n> >> > The reason being, if for some reason the segwit2x activation cannot\n> >> > take place in time, it would be preferable for miners to have a more\n> >> > standard approach to activation that requires stronger consensus and\n> >> > may be more forgiving than BIP148.  If the segwit2x activation is on\n> >> > time to cooperate with BIP148, it could be signaled through the\n> >> > non-bit4 approach and everything could go smoothly.  Thoughts on that\n> >> > idea?  It may add more complexity and more developer time, but may\n> >> > also address your concerns among others.\n> >> This does give miners another approach to activate segwit ahead of\n> >> BIP148, if segwit2x activation is rolled out and activated immediately\n> >> then this would not be needed however based on the timeline here\n> >> https://segwit2x.github.io/ it would not be possible for BIP91 to\n> >> enforce mandatory signalling ahead of BIP148. Maybe that can be\n> >> changed though, I've suggested an immediate rollout with a placeholder\n> >> client timeout instead of the HF code initially in order to accelerate\n> >> that.\n> >> >\n> >> >> Since this BIP\n> >> >> only activates with a clear miner majority it should not increase the\n> >> >> risk of an extended chain split.\n> >> >\n> >> > The concern I'm raising is more about the psychology of giving BIP148\n> >> > a sense of safety that may not be valid.  Without several more steps,\n> >> > BIP148 is definitely on track to be a risky chainsplit, and without\n> >> > segwit2x it will almost certainly be a small minority chain. (Unless\n> >> > the segwit2x compromise falls apart before then, and even in that case\n> >> > it is likely to be a minority chain)\n> >> There are 2 primary factors involved here, economic support and\n> >> hashpower either of which is enough to make a permanent chain split\n> >> unlikely, miners will mine whichever chain is most profitable(see\n> >> ETH/ETC hashpower profitability equilibrium for an example of how this\n> >> works in practice) however there may be lag time immediately after the\n> >> split if there is an economic majority but not a hashpower majority\n> >> initially. This is risk mitigation that only requires miners support\n> >> however. The main issue is just one of activation timelines, BIP91 as\n> >> is takes too long to activate unless started ahead of the existing\n> >> segwit2x schedule and it's unlikely that BIP148 will get pushed back\n> >> any further.\n> >> >\n> >> > Jared\n> >> >\n> >> >\n> >> > On Wed, Jun 7, 2017 at 2:42 PM, James Hilliard\n> >> > <james.hilliard1 at gmail.com> wrote:\n> >> >> I don't really see how this would increase the likelihood of an\n> >> >> extended chain split assuming BIP148 is going to have\n> >> >> non-insignificant economic backing. This BIP is designed to provide a\n> >> >> risk mitigation measure that miners can safely deploy. Since this BIP\n> >> >> only activates with a clear miner majority it should not increase the\n> >> >> risk of an extended chain split. At this point it is not completely\n> >> >> clear how much economic support there is for BIP148 but support\n> >> >> certainly seems to be growing and we have nearly 2 months until\n> BIP148\n> >> >> activation. I intentionally used a shorter activation period here so\n> >> >> that decisions by miners can be made close to the BIP148 activation\n> >> >> date.\n> >> >>\n> >> >> On Wed, Jun 7, 2017 at 4:29 PM, Jared Lee Richardson\n> >> >> <jaredr26 at gmail.com> wrote:\n> >> >>> I think this BIP represents a gamble, and the gamble may not be a\n> good\n> >> >>> one.  The gamble here is that if the segwit2x changes are rolled out\n> >> >>> on time, and if the signatories accept the bit4 + bit1 signaling\n> >> >>> proposals within BIP91, the launch will go smoother, as intended.\n> But\n> >> >>> conversely, if either the segwit2x signatories balk about the Bit1\n> >> >>> signaling OR if the timelines for segwit2mb are missed even by a\n> bit,\n> >> >>> it may cause the BIP148 chainsplit to be worse than it would be\n> >> >>> without.  Given the frequent concerns raised in multiple places\n> about\n> >> >>> the aggressiveness of the segwit2x timelines, including the\n> >> >>> non-hardfork timelines, this does not seem like a great gamble to be\n> >> >>> making.\n> >> >>>\n> >> >>> The reason I say it may make the chainsplit be worse than it would\n> >> >>> otherwise be is that it may provide a false sense of safety for\n> BIP148\n> >> >>> that currently does not currently exist(and should not, as it is a\n> >> >>> chainsplit).  That sense of safety would only be legitimate if the\n> >> >>> segwit2x signatories were on board, and the segwit2x code\n> effectively\n> >> >>> enforced BIP148 simultaneously, neither of which are guaranteed.  If\n> >> >>> users and more miners had a false sense that BIP148 was *not* going\n> to\n> >> >>> chainsplit from default / segwit2x, they might not follow the news\n> if\n> >> >>> suddenly the segwit2x plan were delayed for a few days.  While any\n> >> >>> additional support would definitely be cheered on by BIP148\n> >> >>> supporters, the practical reality might be that this proposal would\n> >> >>> take BIP148 from the \"unlikely to have any viable chain after flag\n> day\n> >> >>> without segwit2x\" category into the \"small but viable minority\n> chain\"\n> >> >>> category, and even worse, it might strengthen the chainsplit just\n> days\n> >> >>> before segwit is activated on BOTH chains, putting the BIP148\n> >> >>> supporters on the wrong pro-segwit, but still-viable chain.\n> >> >>>\n> >> >>> If Core had taken a strong stance to include BIP148 into the client,\n> >> >>> and if BIP148 support were much much broader, I would feel\n> differently\n> >> >>> as the gamble would be more likely to discourage a chainsplit (By\n> >> >>> forcing the acceleration of segwit2x) rather than encourage it (by\n> >> >>> strengthening an extreme minority chainsplit that may wind up on the\n> >> >>> wrong side of two segwit-activated chains).  As it stands now, this\n> >> >>> seems like a very dangerous attempt to compromise with a small but\n> >> >>> vocal group that are the ones creating the threat to begin with.\n> >> >>>\n> >> >>> Jared\n> >> >>>\n> >> >>> On Tue, Jun 6, 2017 at 5:56 PM, James Hilliard via bitcoin-dev\n> >> >>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> >>>> Due to the proposed calendar(https://segwit2x.github.io/) for the\n> >> >>>> SegWit2x agreement being too slow to activate SegWit mandatory\n> >> >>>> signalling ahead of BIP148 using BIP91 I would like to propose\n> >> >>>> another\n> >> >>>> option that miners can use to prevent a chain split ahead of the\n> Aug\n> >> >>>> 1st BIP148 activation date.\n> >> >>>>\n> >> >>>> The splitprotection soft fork is essentially BIP91 but using BIP8\n> >> >>>> instead of BIP9 with a lower activation threshold and immediate\n> >> >>>> mandatory signalling lock-in. This allows for a majority of miners\n> to\n> >> >>>> activate mandatory SegWit signalling and prevent a potential chain\n> >> >>>> split ahead of BIP148 activation.\n> >> >>>>\n> >> >>>> This BIP allows for miners to respond to market forces quickly\n> ahead\n> >> >>>> of BIP148 activation by signalling for splitprotection. Any miners\n> >> >>>> already running BIP148 should be encouraged to use splitprotection.\n> >> >>>>\n> >> >>>> <pre>\n> >> >>>>   BIP: splitprotection\n> >> >>>>   Layer: Consensus (soft fork)\n> >> >>>>   Title: User Activated Soft Fork Split Protection\n> >> >>>>   Author: James Hilliard <james.hilliard1 at gmail.com>\n> >> >>>>   Comments-Summary: No comments yet.\n> >> >>>>   Comments-URI:\n> >> >>>>   Status: Draft\n> >> >>>>   Type: Standards Track\n> >> >>>>   Created: 2017-05-22\n> >> >>>>   License: BSD-3-Clause\n> >> >>>>            CC0-1.0\n> >> >>>> </pre>\n> >> >>>>\n> >> >>>> ==Abstract==\n> >> >>>>\n> >> >>>> This document specifies a coordination mechanism for a simple\n> >> >>>> majority\n> >> >>>> of miners to prevent a chain split ahead of BIP148 activation.\n> >> >>>>\n> >> >>>> ==Definitions==\n> >> >>>>\n> >> >>>> \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n> >> >>>> using bit 1, between November 15th 2016 and November 15th 2017 to\n> >> >>>> activate BIP141, BIP143 and BIP147.\n> >> >>>>\n> >> >>>> ==Motivation==\n> >> >>>>\n> >> >>>> The biggest risk of BIP148 is an extended chain split, this BIP\n> >> >>>> provides a way for a simple majority of miners to eliminate that\n> >> >>>> risk.\n> >> >>>>\n> >> >>>> This BIP provides a way for a simple majority of miners to\n> coordinate\n> >> >>>> activation of the existing segwit deployment with less than 95%\n> >> >>>> hashpower before BIP148 activation. Due to time constraints unless\n> >> >>>> immediately deployed BIP91 will likely not be able to enforce\n> >> >>>> mandatory signalling of segwit before the Aug 1st activation of\n> >> >>>> BIP148. This BIP provides a method for rapid miner activation of\n> >> >>>> SegWit mandatory signalling ahead of the BIP148 activation date.\n> >> >>>> Since\n> >> >>>> the primary goal of this BIP is to reduce the chance of an extended\n> >> >>>> chain split as much as possible we activate using a simple miner\n> >> >>>> majority of 65% over a 504 block interval rather than a higher\n> >> >>>> percentage. This BIP also allows miners to signal their intention\n> to\n> >> >>>> run BIP148 in order to prevent a chain split.\n> >> >>>>\n> >> >>>> ==Specification==\n> >> >>>>\n> >> >>>> While this BIP is active, all blocks must set the nVersion header\n> top\n> >> >>>> 3 bits to 001 together with bit field (1<<1) (according to the\n> >> >>>> existing segwit deployment). Blocks that do not signal as required\n> >> >>>> will be rejected.\n> >> >>>>\n> >> >>>> ==Deployment==\n> >> >>>>\n> >> >>>> This BIP will be deployed by \"version bits\" with a 65%(this can be\n> >> >>>> adjusted if desired) activation threshold BIP9 with the name\n> >> >>>> \"splitprotecion\" and using bit 2.\n> >> >>>>\n> >> >>>> This BIP starts immediately and is a BIP8 style soft fork since\n> >> >>>> mandatory signalling will start on midnight August 1st 2017 (epoch\n> >> >>>> time 1501545600) regardless of whether or not this BIP has reached\n> >> >>>> its\n> >> >>>> own signalling threshold. This BIP will cease to be active when\n> >> >>>> segwit\n> >> >>>> is locked-in.\n> >> >>>>\n> >> >>>> === Reference implementation ===\n> >> >>>>\n> >> >>>> <pre>\n> >> >>>> // Check if Segregated Witness is Locked In\n> >> >>>> bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n> >> >>>> Consensus::Params& params)\n> >> >>>> {\n> >> >>>>     LOCK(cs_main);\n> >> >>>>     return (VersionBitsState(pindexPrev, params,\n> >> >>>> Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n> >> >>>> THRESHOLD_LOCKED_IN);\n> >> >>>> }\n> >> >>>>\n> >> >>>> // SPLITPROTECTION mandatory segwit signalling.\n> >> >>>> if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n> >> >>>> Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n> >> >>>> THRESHOLD_LOCKED_IN &&\n> >> >>>>      !IsWitnessLockedIn(pindex->pprev,\n> chainparams.GetConsensus()) &&\n> >> >>>> // Segwit is not locked in\n> >> >>>>      !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())\n> )\n> >> >>>> //\n> >> >>>> and is not active.\n> >> >>>> {\n> >> >>>>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK)\n> ==\n> >> >>>> VERSIONBITS_TOP_BITS;\n> >> >>>>     bool fSegbit = (pindex->nVersion &\n> >> >>>> VersionBitsMask(chainparams.GetConsensus(),\n> >> >>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n> >> >>>>     if (!(fVersionBits && fSegbit)) {\n> >> >>>>         return state.DoS(0, error(\"ConnectBlock(): relayed block\n> must\n> >> >>>> signal for segwit, please upgrade\"), REJECT_INVALID,\n> >> >>>> \"bad-no-segwit\");\n> >> >>>>     }\n> >> >>>> }\n> >> >>>>\n> >> >>>> // BIP148 mandatory segwit signalling.\n> >> >>>> int64_t nMedianTimePast = pindex->GetMedianTimePast();\n> >> >>>> if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017\n> 00:00:00\n> >> >>>> UTC\n> >> >>>>      (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017\n> 00:00:00\n> >> >>>> UTC\n> >> >>>>      (!IsWitnessLockedIn(pindex->pprev,\n> chainparams.GetConsensus())\n> >> >>>> &&\n> >> >>>>  // Segwit is not locked in\n> >> >>>>       !IsWitnessEnabled(pindex->pprev,\n> chainparams.GetConsensus())) )\n> >> >>>>  // and is not active.\n> >> >>>> {\n> >> >>>>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK)\n> ==\n> >> >>>> VERSIONBITS_TOP_BITS;\n> >> >>>>     bool fSegbit = (pindex->nVersion &\n> >> >>>> VersionBitsMask(chainparams.GetConsensus(),\n> >> >>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n> >> >>>>     if (!(fVersionBits && fSegbit)) {\n> >> >>>>         return state.DoS(0, error(\"ConnectBlock(): relayed block\n> must\n> >> >>>> signal for segwit, please upgrade\"), REJECT_INVALID,\n> >> >>>> \"bad-no-segwit\");\n> >> >>>>     }\n> >> >>>> }\n> >> >>>> </pre>\n> >> >>>>\n> >> >>>>\n> >> >>>> https://github.com/bitcoin/bitcoin/compare/0.14...\n> jameshilliard:splitprotection-v0.14.1\n> >> >>>>\n> >> >>>> ==Backwards Compatibility==\n> >> >>>>\n> >> >>>> This deployment is compatible with the existing \"segwit\" bit 1\n> >> >>>> deployment scheduled between midnight November 15th, 2016 and\n> >> >>>> midnight\n> >> >>>> November 15th, 2017. This deployment is also compatible with the\n> >> >>>> existing BIP148 deployment. This BIP is compatible with BIP91 only\n> if\n> >> >>>> BIP91 activates before it and before BIP148. Miners will need to\n> >> >>>> upgrade their nodes to support splitprotection otherwise they may\n> >> >>>> build on top of an invalid block. While this bip is active users\n> >> >>>> should either upgrade to splitprotection or wait for additional\n> >> >>>> confirmations when accepting payments.\n> >> >>>>\n> >> >>>> ==Rationale==\n> >> >>>>\n> >> >>>> Historically we have used IsSuperMajority() to activate soft forks\n> >> >>>> such as BIP66 which has a mandatory signalling requirement for\n> miners\n> >> >>>> once activated, this ensures that miners are aware of new rules\n> being\n> >> >>>> enforced. This technique can be leveraged to lower the signalling\n> >> >>>> threshold of a soft fork while it is in the process of being\n> deployed\n> >> >>>> in a backwards compatible way. We also use a BIP8 style timeout to\n> >> >>>> ensure that this BIP is compatible with BIP148 and that BIP148\n> >> >>>> compatible mandatory signalling activates regardless of miner\n> >> >>>> signalling levels.\n> >> >>>>\n> >> >>>> By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n> >> >>>> deployment, this BIP can cause the existing \"segwit\" deployment to\n> >> >>>> activate without needing to release a new deployment. As we\n> approach\n> >> >>>> BIP148 activation it may be desirable for a majority of miners to\n> >> >>>> have\n> >> >>>> a method that will ensure that there is no chain split.\n> >> >>>>\n> >> >>>> ==References==\n> >> >>>>\n> >> >>>>\n> >> >>>> *[https://lists.linuxfoundation.org/pipermail/\n> bitcoin-dev/2017-March/013714.html\n> >> >>>> Mailing list discussion]\n> >> >>>>\n> >> >>>> *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.\n> cpp#L1281-L1283\n> >> >>>> P2SH flag day activation]\n> >> >>>> *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n> >> >>>> *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n> >> >>>> *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n> >> >>>> *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n> >> >>>> *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n> >> >>>> Version 0 Witness Program]]\n> >> >>>> *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element\n> >> >>>> malleability]]\n> >> >>>> *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit\n> >> >>>> deployment]]\n> >> >>>> *[[bip-0149.mediawiki|BIP149 Segregated Witness (second\n> deployment)]]\n> >> >>>> *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit\n> >> >>>> benefits]\n> >> >>>>\n> >> >>>> ==Copyright==\n> >> >>>>\n> >> >>>> This document is dual licensed as BSD 3-clause, and Creative\n> Commons\n> >> >>>> CC0 1.0 Universal.\n> >> >>>> _______________________________________________\n> >> >>>> bitcoin-dev mailing list\n> >> >>>> bitcoin-dev at lists.linuxfoundation.org\n> >> >>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170607/875ec296/attachment-0001.html>"
            },
            {
                "author": "James Hilliard",
                "date": "2017-06-08T00:01:19",
                "message_text_only": "On Wed, Jun 7, 2017 at 6:43 PM, Jared Lee Richardson <jaredr26 at gmail.com> wrote:\n>> BIP148 however is a consensus change that can\n>> be rectified if it gets more work, this would act as an additional\n>> incentive for mine the BIP148 side since there would be no wipeout\n>> risk there.\n>\n> This statement is misleading.  Wipeout risks don't apply to any consensus\n> changes; It is a consensus change, it can only be abandoned.  The BIP148\n> chain carries just as many risks of being abandoned or even more with\n> segwit2x on the table.  No miner would consider \"wipeout risk\" an advantage\n> when the real threat is chain abandonment.\nBoth are issues, but wipeout risk is different, the ETH/ETC split for\nexample didn't have any wipeout risk for either side the same is not\ntrue for BIP148(and it is the non-BIP148 side that carries the risk of\nchain wipeout).\n>\n>> Higher transaction fees on a minority chain can compensate miners for\n>> a lower price which would likely be enough to get the BIP148 chain to\n>> a difficulty reduction.\n>\n> Higher transaction fees suffers the same problem as exchange support does.\n> Without replay protection, it is very difficult for any average user to\n> force transactions onto one chain or the other.  Thus, without replay\n> protection, the UASF chain is unlikely to develop any viable fee market; Its\n> few miners 99% of the time will simply choose from the highest fees that\n> were already available to the other chain, which is basically no advantage\n> at all.\nNot really, there are a few relatively simple techniques such as RBF\nwhich can be leveraged to get confirmations on on-side before double\nspending on another. Once a transaction is confirmed on the non-BIP148\nchain then the high fee transactions can be made on only the BIP148\nside of the split using RBF. Exchanges will likely do this splitting\nautomatically for uses as well.\n>\n>>  ETC replay protection was done after the fork on an as\n>> needed basis(there are multiple reliable techniques that can be used\n>> to split UTXO's), the same can happen with BIP148 and it is easier to\n>> do with Bitcoin than with the ETH/ETC split IMO.\n>\n> ETC replay protection was added because they were already a hardfork and\n> without it they would not have had a viable chain.  BIP148 is not supposed\n> to be a hardfork, and if it added replay protection to remain viable it\n> would lose the frequently touted \"wipeout advantage\" as well as the ability\n> to call itself a softfork.  And are you seriously suggesting that what\n> happened with ETC and ETH is a desirable and good situation for Bitcoin, and\n> that UASF is ETC?\nThere wasn't proper replay protection at split time for ETH/ETC since\nnormal transactions would get executed on both sides originally,\nhowever replay protection was added by wallets(mainly using splitting\ncontracts). I don't think a split is desirable however, which is why\nI've proposed this BIP.\n>\n>> A big reason BIP148 still has support is because up until SegWit\n>> actually activates there's no guarantee segwit2mb will actually have\n>> the necessary support to activate SegWit.\n>\n> For a miners blowing through six million dollars a day in mining operational\n> costs, that's a pretty crappy reason.  Serious miners can't afford to prop\n> up a non-viable chain based on philosophy or maybes.  BIP148 is based\n> entirely upon people who aren't putting anything on the line trying to\n> convince others to take the huge risks for them.  With deceptively\n> fallacious logic, in my opinion.\nYes, miners aren't likely to waste operational mining costs, that's\nultimately why miners would follow the BIP148 side of the chain\nassuming it has sufficient economic support or if it's more profitable\nto mine.\n>\n> Even segwit2x is based on the assumption that all miners can reach\n> consensus.  Break that assumption and segwit2x will have the same problems\n> as UASF.\nsegwit2x has more issues since the HF part requires users to reach consensus\n>\n>> This is largely an issue due to segwit2x's bundling, if the SW and HF\n>> part of segwit2x were unbundled then there would be no reason to delay\n>> BIP91 activation\n>\n> They are bundled.  Segwit alone doesn't have the desired overwhelming\n> consensus, unless core wishes to fork 71% to 29%, and maybe not even that\n> high.  That's the technical reason, and they can't be unbundled without\n> breaking that consensus.\nThat's a political reason not a technical reason.\n>\n> Jared\n>\n>\n> On Wed, Jun 7, 2017 at 4:11 PM, James Hilliard <james.hilliard1 at gmail.com>\n> wrote:\n>>\n>> On Wed, Jun 7, 2017 at 5:53 PM, Jared Lee Richardson <jaredr26 at gmail.com>\n>> wrote:\n>> >> There are 2 primary factors involved here, economic support and\n>> > hashpower either of which is enough to make a permanent chain split\n>> > unlikely, miners will mine whichever chain is most profitable(see\n>> > ETH/ETC hashpower profitability equilibrium for an example of how this\n>> > works in practice)\n>> >\n>> > That's not a comparable example.  ETC did not face potentially years of\n>> > slow\n>> > blocktimes before it normalized, whereas BIP148 is on track to do\n>> > exactly\n>> > that.  Moreover, ETC represented a fundamental break from the majority\n>> > consensus that could not be rectified, whereas BIP148 represents only a\n>> > minority attempt to accelerate something that an overwhelming majority\n>> > of\n>> > miners have already agreed to activate under segwit2x.  Lastly ETC was\n>> > required to add replay protection, just like any minority fork proposed\n>> > by\n>> > any crypto-currency has been, something that BIP148 both lacks and\n>> > refuses\n>> > to add or even acknowledge the necessity of.  Without replay protection,\n>> > ETC\n>> > could not have become profitable enough to be a viable minority chain.\n>> > If\n>> > BIP148's chain is not the majority chain and it does not have replay\n>> > protection, it will face the same problems, but that required replay\n>> > protection will turn it into a hardfork.  This will be a very bad\n>> > position\n>> > for UASF supporters to find themselves in - Either hardfork and hope the\n>> > price is higher and the majority converts, or die as the minority chain\n>> > with\n>> > no reliable methods of economic conversion.\n>> Higher transaction fees on a minority chain can compensate miners for\n>> a lower price which would likely be enough to get the BIP148 chain to\n>> a difficulty reduction. BIP148 however is a consensus change that can\n>> be rectified if it gets more work, this would act as an additional\n>> incentive for mine the BIP148 side since there would be no wipeout\n>> risk there. ETC replay protection was done after the fork on an as\n>> needed basis(there are multiple reliable techniques that can be used\n>> to split UTXO's), the same can happen with BIP148 and it is easier to\n>> do with Bitcoin than with the ETH/ETC split IMO.\n>> >\n>> > I believe, but don't have data to back this, that most of the BIP148\n>> > insistence comes not from a legitimate attempt to gain consensus (or\n>> > else\n>> > they would either outright oppose segwit2mb for its hardfork, or they\n>> > would\n>> > outright support it), but rather from an attempt for BIP148 supporters\n>> > to\n>> > save face for BIP148 being a failure.  If I'm correct, that's a terrible\n>> > and\n>> > highly non-technical reason for segwit2mb to bend over backwards\n>> > attempting\n>> > to support BIP148's attempt to save face.\n>> A big reason BIP148 still has support is because up until SegWit\n>> actually activates there's no guarantee segwit2mb will actually have\n>> the necessary support to activate SegWit.\n>> >\n>> >> The main issue is just one of activation timelines, BIP91 as\n>> > is takes too long to activate unless started ahead of the existing\n>> > segwit2x schedule and it's unlikely that BIP148 will get pushed back\n>> > any further.\n>> >\n>> > Even if I'm not correct on the above, I and others find it hard to\n>> > accept\n>> > that this timeline conflict is segwit2x's fault.  Segwit2x has both some\n>> > flexibility and broad support that crosses contentious pro-segwit and\n>> > pro-blocksize-increase divisions that have existed for two years.\n>> > BIP148 is\n>> > attempting to hold segwit2x's timelines and code hostage by claiming\n>> > inflexibility and claiming broad support, and not only are neither of\n>> > those\n>> > assertions are backed by real data, BIP148 (by being so inflexible) is\n>> > pushing a position that deepens the divides between those groups.  For\n>> > there\n>> > to be technical reasons for compatibility (so long as there are\n>> > tradeoffs,\n>> > which there are), there needs to be hard data showing that BIP148 is a\n>> > viable minority fork that won't simply die off on its own.\n>> This is largely an issue due to segwit2x's bundling, if the SW and HF\n>> part of segwit2x were unbundled then there would be no reason to delay\n>> BIP91 activation, this is especially a problem since it takes a good\n>> deal of time to properly code and test a HF. Unfortunately segwit2x\n>> has been quite inflexible in regards to the bundling aspect even\n>> though there are clearly no technical reasons for it to be there.\n>> >\n>> > Jared\n>> >\n>> >\n>> > On Wed, Jun 7, 2017 at 3:23 PM, James Hilliard\n>> > <james.hilliard1 at gmail.com>\n>> > wrote:\n>> >>\n>> >> On Wed, Jun 7, 2017 at 4:50 PM, Jared Lee Richardson\n>> >> <jaredr26 at gmail.com>\n>> >> wrote:\n>> >> > Could this risk mitigation measure be an optional flag?  And if so,\n>> >> > could it+BIP91 signal on a different bit than bit4?\n>> >> It's fairly trivial for miners to signal for BIP91 on bit4 or a\n>> >> different bit at the same time as the code is trivial enough to\n>> >> combine\n>> >> >\n>> >> > The reason being, if for some reason the segwit2x activation cannot\n>> >> > take place in time, it would be preferable for miners to have a more\n>> >> > standard approach to activation that requires stronger consensus and\n>> >> > may be more forgiving than BIP148.  If the segwit2x activation is on\n>> >> > time to cooperate with BIP148, it could be signaled through the\n>> >> > non-bit4 approach and everything could go smoothly.  Thoughts on that\n>> >> > idea?  It may add more complexity and more developer time, but may\n>> >> > also address your concerns among others.\n>> >> This does give miners another approach to activate segwit ahead of\n>> >> BIP148, if segwit2x activation is rolled out and activated immediately\n>> >> then this would not be needed however based on the timeline here\n>> >> https://segwit2x.github.io/ it would not be possible for BIP91 to\n>> >> enforce mandatory signalling ahead of BIP148. Maybe that can be\n>> >> changed though, I've suggested an immediate rollout with a placeholder\n>> >> client timeout instead of the HF code initially in order to accelerate\n>> >> that.\n>> >> >\n>> >> >> Since this BIP\n>> >> >> only activates with a clear miner majority it should not increase\n>> >> >> the\n>> >> >> risk of an extended chain split.\n>> >> >\n>> >> > The concern I'm raising is more about the psychology of giving BIP148\n>> >> > a sense of safety that may not be valid.  Without several more steps,\n>> >> > BIP148 is definitely on track to be a risky chainsplit, and without\n>> >> > segwit2x it will almost certainly be a small minority chain. (Unless\n>> >> > the segwit2x compromise falls apart before then, and even in that\n>> >> > case\n>> >> > it is likely to be a minority chain)\n>> >> There are 2 primary factors involved here, economic support and\n>> >> hashpower either of which is enough to make a permanent chain split\n>> >> unlikely, miners will mine whichever chain is most profitable(see\n>> >> ETH/ETC hashpower profitability equilibrium for an example of how this\n>> >> works in practice) however there may be lag time immediately after the\n>> >> split if there is an economic majority but not a hashpower majority\n>> >> initially. This is risk mitigation that only requires miners support\n>> >> however. The main issue is just one of activation timelines, BIP91 as\n>> >> is takes too long to activate unless started ahead of the existing\n>> >> segwit2x schedule and it's unlikely that BIP148 will get pushed back\n>> >> any further.\n>> >> >\n>> >> > Jared\n>> >> >\n>> >> >\n>> >> > On Wed, Jun 7, 2017 at 2:42 PM, James Hilliard\n>> >> > <james.hilliard1 at gmail.com> wrote:\n>> >> >> I don't really see how this would increase the likelihood of an\n>> >> >> extended chain split assuming BIP148 is going to have\n>> >> >> non-insignificant economic backing. This BIP is designed to provide\n>> >> >> a\n>> >> >> risk mitigation measure that miners can safely deploy. Since this\n>> >> >> BIP\n>> >> >> only activates with a clear miner majority it should not increase\n>> >> >> the\n>> >> >> risk of an extended chain split. At this point it is not completely\n>> >> >> clear how much economic support there is for BIP148 but support\n>> >> >> certainly seems to be growing and we have nearly 2 months until\n>> >> >> BIP148\n>> >> >> activation. I intentionally used a shorter activation period here so\n>> >> >> that decisions by miners can be made close to the BIP148 activation\n>> >> >> date.\n>> >> >>\n>> >> >> On Wed, Jun 7, 2017 at 4:29 PM, Jared Lee Richardson\n>> >> >> <jaredr26 at gmail.com> wrote:\n>> >> >>> I think this BIP represents a gamble, and the gamble may not be a\n>> >> >>> good\n>> >> >>> one.  The gamble here is that if the segwit2x changes are rolled\n>> >> >>> out\n>> >> >>> on time, and if the signatories accept the bit4 + bit1 signaling\n>> >> >>> proposals within BIP91, the launch will go smoother, as intended.\n>> >> >>> But\n>> >> >>> conversely, if either the segwit2x signatories balk about the Bit1\n>> >> >>> signaling OR if the timelines for segwit2mb are missed even by a\n>> >> >>> bit,\n>> >> >>> it may cause the BIP148 chainsplit to be worse than it would be\n>> >> >>> without.  Given the frequent concerns raised in multiple places\n>> >> >>> about\n>> >> >>> the aggressiveness of the segwit2x timelines, including the\n>> >> >>> non-hardfork timelines, this does not seem like a great gamble to\n>> >> >>> be\n>> >> >>> making.\n>> >> >>>\n>> >> >>> The reason I say it may make the chainsplit be worse than it would\n>> >> >>> otherwise be is that it may provide a false sense of safety for\n>> >> >>> BIP148\n>> >> >>> that currently does not currently exist(and should not, as it is a\n>> >> >>> chainsplit).  That sense of safety would only be legitimate if the\n>> >> >>> segwit2x signatories were on board, and the segwit2x code\n>> >> >>> effectively\n>> >> >>> enforced BIP148 simultaneously, neither of which are guaranteed.\n>> >> >>> If\n>> >> >>> users and more miners had a false sense that BIP148 was *not* going\n>> >> >>> to\n>> >> >>> chainsplit from default / segwit2x, they might not follow the news\n>> >> >>> if\n>> >> >>> suddenly the segwit2x plan were delayed for a few days.  While any\n>> >> >>> additional support would definitely be cheered on by BIP148\n>> >> >>> supporters, the practical reality might be that this proposal would\n>> >> >>> take BIP148 from the \"unlikely to have any viable chain after flag\n>> >> >>> day\n>> >> >>> without segwit2x\" category into the \"small but viable minority\n>> >> >>> chain\"\n>> >> >>> category, and even worse, it might strengthen the chainsplit just\n>> >> >>> days\n>> >> >>> before segwit is activated on BOTH chains, putting the BIP148\n>> >> >>> supporters on the wrong pro-segwit, but still-viable chain.\n>> >> >>>\n>> >> >>> If Core had taken a strong stance to include BIP148 into the\n>> >> >>> client,\n>> >> >>> and if BIP148 support were much much broader, I would feel\n>> >> >>> differently\n>> >> >>> as the gamble would be more likely to discourage a chainsplit (By\n>> >> >>> forcing the acceleration of segwit2x) rather than encourage it (by\n>> >> >>> strengthening an extreme minority chainsplit that may wind up on\n>> >> >>> the\n>> >> >>> wrong side of two segwit-activated chains).  As it stands now, this\n>> >> >>> seems like a very dangerous attempt to compromise with a small but\n>> >> >>> vocal group that are the ones creating the threat to begin with.\n>> >> >>>\n>> >> >>> Jared\n>> >> >>>\n>> >> >>> On Tue, Jun 6, 2017 at 5:56 PM, James Hilliard via bitcoin-dev\n>> >> >>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >> >>>> Due to the proposed calendar(https://segwit2x.github.io/) for the\n>> >> >>>> SegWit2x agreement being too slow to activate SegWit mandatory\n>> >> >>>> signalling ahead of BIP148 using BIP91 I would like to propose\n>> >> >>>> another\n>> >> >>>> option that miners can use to prevent a chain split ahead of the\n>> >> >>>> Aug\n>> >> >>>> 1st BIP148 activation date.\n>> >> >>>>\n>> >> >>>> The splitprotection soft fork is essentially BIP91 but using BIP8\n>> >> >>>> instead of BIP9 with a lower activation threshold and immediate\n>> >> >>>> mandatory signalling lock-in. This allows for a majority of miners\n>> >> >>>> to\n>> >> >>>> activate mandatory SegWit signalling and prevent a potential chain\n>> >> >>>> split ahead of BIP148 activation.\n>> >> >>>>\n>> >> >>>> This BIP allows for miners to respond to market forces quickly\n>> >> >>>> ahead\n>> >> >>>> of BIP148 activation by signalling for splitprotection. Any miners\n>> >> >>>> already running BIP148 should be encouraged to use\n>> >> >>>> splitprotection.\n>> >> >>>>\n>> >> >>>> <pre>\n>> >> >>>>   BIP: splitprotection\n>> >> >>>>   Layer: Consensus (soft fork)\n>> >> >>>>   Title: User Activated Soft Fork Split Protection\n>> >> >>>>   Author: James Hilliard <james.hilliard1 at gmail.com>\n>> >> >>>>   Comments-Summary: No comments yet.\n>> >> >>>>   Comments-URI:\n>> >> >>>>   Status: Draft\n>> >> >>>>   Type: Standards Track\n>> >> >>>>   Created: 2017-05-22\n>> >> >>>>   License: BSD-3-Clause\n>> >> >>>>            CC0-1.0\n>> >> >>>> </pre>\n>> >> >>>>\n>> >> >>>> ==Abstract==\n>> >> >>>>\n>> >> >>>> This document specifies a coordination mechanism for a simple\n>> >> >>>> majority\n>> >> >>>> of miners to prevent a chain split ahead of BIP148 activation.\n>> >> >>>>\n>> >> >>>> ==Definitions==\n>> >> >>>>\n>> >> >>>> \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n>> >> >>>> using bit 1, between November 15th 2016 and November 15th 2017 to\n>> >> >>>> activate BIP141, BIP143 and BIP147.\n>> >> >>>>\n>> >> >>>> ==Motivation==\n>> >> >>>>\n>> >> >>>> The biggest risk of BIP148 is an extended chain split, this BIP\n>> >> >>>> provides a way for a simple majority of miners to eliminate that\n>> >> >>>> risk.\n>> >> >>>>\n>> >> >>>> This BIP provides a way for a simple majority of miners to\n>> >> >>>> coordinate\n>> >> >>>> activation of the existing segwit deployment with less than 95%\n>> >> >>>> hashpower before BIP148 activation. Due to time constraints unless\n>> >> >>>> immediately deployed BIP91 will likely not be able to enforce\n>> >> >>>> mandatory signalling of segwit before the Aug 1st activation of\n>> >> >>>> BIP148. This BIP provides a method for rapid miner activation of\n>> >> >>>> SegWit mandatory signalling ahead of the BIP148 activation date.\n>> >> >>>> Since\n>> >> >>>> the primary goal of this BIP is to reduce the chance of an\n>> >> >>>> extended\n>> >> >>>> chain split as much as possible we activate using a simple miner\n>> >> >>>> majority of 65% over a 504 block interval rather than a higher\n>> >> >>>> percentage. This BIP also allows miners to signal their intention\n>> >> >>>> to\n>> >> >>>> run BIP148 in order to prevent a chain split.\n>> >> >>>>\n>> >> >>>> ==Specification==\n>> >> >>>>\n>> >> >>>> While this BIP is active, all blocks must set the nVersion header\n>> >> >>>> top\n>> >> >>>> 3 bits to 001 together with bit field (1<<1) (according to the\n>> >> >>>> existing segwit deployment). Blocks that do not signal as required\n>> >> >>>> will be rejected.\n>> >> >>>>\n>> >> >>>> ==Deployment==\n>> >> >>>>\n>> >> >>>> This BIP will be deployed by \"version bits\" with a 65%(this can be\n>> >> >>>> adjusted if desired) activation threshold BIP9 with the name\n>> >> >>>> \"splitprotecion\" and using bit 2.\n>> >> >>>>\n>> >> >>>> This BIP starts immediately and is a BIP8 style soft fork since\n>> >> >>>> mandatory signalling will start on midnight August 1st 2017 (epoch\n>> >> >>>> time 1501545600) regardless of whether or not this BIP has reached\n>> >> >>>> its\n>> >> >>>> own signalling threshold. This BIP will cease to be active when\n>> >> >>>> segwit\n>> >> >>>> is locked-in.\n>> >> >>>>\n>> >> >>>> === Reference implementation ===\n>> >> >>>>\n>> >> >>>> <pre>\n>> >> >>>> // Check if Segregated Witness is Locked In\n>> >> >>>> bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n>> >> >>>> Consensus::Params& params)\n>> >> >>>> {\n>> >> >>>>     LOCK(cs_main);\n>> >> >>>>     return (VersionBitsState(pindexPrev, params,\n>> >> >>>> Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n>> >> >>>> THRESHOLD_LOCKED_IN);\n>> >> >>>> }\n>> >> >>>>\n>> >> >>>> // SPLITPROTECTION mandatory segwit signalling.\n>> >> >>>> if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n>> >> >>>> Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n>> >> >>>> THRESHOLD_LOCKED_IN &&\n>> >> >>>>      !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus())\n>> >> >>>> &&\n>> >> >>>> // Segwit is not locked in\n>> >> >>>>      !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())\n>> >> >>>> )\n>> >> >>>> //\n>> >> >>>> and is not active.\n>> >> >>>> {\n>> >> >>>>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK)\n>> >> >>>> ==\n>> >> >>>> VERSIONBITS_TOP_BITS;\n>> >> >>>>     bool fSegbit = (pindex->nVersion &\n>> >> >>>> VersionBitsMask(chainparams.GetConsensus(),\n>> >> >>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>> >> >>>>     if (!(fVersionBits && fSegbit)) {\n>> >> >>>>         return state.DoS(0, error(\"ConnectBlock(): relayed block\n>> >> >>>> must\n>> >> >>>> signal for segwit, please upgrade\"), REJECT_INVALID,\n>> >> >>>> \"bad-no-segwit\");\n>> >> >>>>     }\n>> >> >>>> }\n>> >> >>>>\n>> >> >>>> // BIP148 mandatory segwit signalling.\n>> >> >>>> int64_t nMedianTimePast = pindex->GetMedianTimePast();\n>> >> >>>> if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017\n>> >> >>>> 00:00:00\n>> >> >>>> UTC\n>> >> >>>>      (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017\n>> >> >>>> 00:00:00\n>> >> >>>> UTC\n>> >> >>>>      (!IsWitnessLockedIn(pindex->pprev,\n>> >> >>>> chainparams.GetConsensus())\n>> >> >>>> &&\n>> >> >>>>  // Segwit is not locked in\n>> >> >>>>       !IsWitnessEnabled(pindex->pprev,\n>> >> >>>> chainparams.GetConsensus())) )\n>> >> >>>>  // and is not active.\n>> >> >>>> {\n>> >> >>>>     bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK)\n>> >> >>>> ==\n>> >> >>>> VERSIONBITS_TOP_BITS;\n>> >> >>>>     bool fSegbit = (pindex->nVersion &\n>> >> >>>> VersionBitsMask(chainparams.GetConsensus(),\n>> >> >>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>> >> >>>>     if (!(fVersionBits && fSegbit)) {\n>> >> >>>>         return state.DoS(0, error(\"ConnectBlock(): relayed block\n>> >> >>>> must\n>> >> >>>> signal for segwit, please upgrade\"), REJECT_INVALID,\n>> >> >>>> \"bad-no-segwit\");\n>> >> >>>>     }\n>> >> >>>> }\n>> >> >>>> </pre>\n>> >> >>>>\n>> >> >>>>\n>> >> >>>>\n>> >> >>>> https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1\n>> >> >>>>\n>> >> >>>> ==Backwards Compatibility==\n>> >> >>>>\n>> >> >>>> This deployment is compatible with the existing \"segwit\" bit 1\n>> >> >>>> deployment scheduled between midnight November 15th, 2016 and\n>> >> >>>> midnight\n>> >> >>>> November 15th, 2017. This deployment is also compatible with the\n>> >> >>>> existing BIP148 deployment. This BIP is compatible with BIP91 only\n>> >> >>>> if\n>> >> >>>> BIP91 activates before it and before BIP148. Miners will need to\n>> >> >>>> upgrade their nodes to support splitprotection otherwise they may\n>> >> >>>> build on top of an invalid block. While this bip is active users\n>> >> >>>> should either upgrade to splitprotection or wait for additional\n>> >> >>>> confirmations when accepting payments.\n>> >> >>>>\n>> >> >>>> ==Rationale==\n>> >> >>>>\n>> >> >>>> Historically we have used IsSuperMajority() to activate soft forks\n>> >> >>>> such as BIP66 which has a mandatory signalling requirement for\n>> >> >>>> miners\n>> >> >>>> once activated, this ensures that miners are aware of new rules\n>> >> >>>> being\n>> >> >>>> enforced. This technique can be leveraged to lower the signalling\n>> >> >>>> threshold of a soft fork while it is in the process of being\n>> >> >>>> deployed\n>> >> >>>> in a backwards compatible way. We also use a BIP8 style timeout to\n>> >> >>>> ensure that this BIP is compatible with BIP148 and that BIP148\n>> >> >>>> compatible mandatory signalling activates regardless of miner\n>> >> >>>> signalling levels.\n>> >> >>>>\n>> >> >>>> By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n>> >> >>>> deployment, this BIP can cause the existing \"segwit\" deployment to\n>> >> >>>> activate without needing to release a new deployment. As we\n>> >> >>>> approach\n>> >> >>>> BIP148 activation it may be desirable for a majority of miners to\n>> >> >>>> have\n>> >> >>>> a method that will ensure that there is no chain split.\n>> >> >>>>\n>> >> >>>> ==References==\n>> >> >>>>\n>> >> >>>>\n>> >> >>>>\n>> >> >>>> *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html\n>> >> >>>> Mailing list discussion]\n>> >> >>>>\n>> >> >>>>\n>> >> >>>> *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\n>> >> >>>> P2SH flag day activation]\n>> >> >>>> *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n>> >> >>>> *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n>> >> >>>> *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n>> >> >>>> *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus\n>> >> >>>> layer)]]\n>> >> >>>> *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification\n>> >> >>>> for\n>> >> >>>> Version 0 Witness Program]]\n>> >> >>>> *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element\n>> >> >>>> malleability]]\n>> >> >>>> *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit\n>> >> >>>> deployment]]\n>> >> >>>> *[[bip-0149.mediawiki|BIP149 Segregated Witness (second\n>> >> >>>> deployment)]]\n>> >> >>>> *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit\n>> >> >>>> benefits]\n>> >> >>>>\n>> >> >>>> ==Copyright==\n>> >> >>>>\n>> >> >>>> This document is dual licensed as BSD 3-clause, and Creative\n>> >> >>>> Commons\n>> >> >>>> CC0 1.0 Universal.\n>> >> >>>> _______________________________________________\n>> >> >>>> bitcoin-dev mailing list\n>> >> >>>> bitcoin-dev at lists.linuxfoundation.org\n>> >> >>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >\n>> >\n>\n>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-06-08T00:20:23",
                "message_text_only": "> Not really, there are a few relatively simple techniques such as RBF\n> which can be leveraged to get confirmations on on-side before double\n> spending on another. Once a transaction is confirmed on the non-BIP148\n> chain then the high fee transactions can be made on only the BIP148\n> side of the split using RBF.\n\nAh, so the BIP148 client handles this on behalf of its less technical users\non their behalf then, yes?\n\n>  Exchanges will likely do this splitting\n> automatically for uses as well.\n\nSure, Exchanges are going to dedicate hundreds of developer hours and\nthousands of support hours to support something that they've repeatedly\ntold everyone must have replay protection to be supported.  They're going\nto do this because 8% of nodes and <0.5% of miners say they'll be rewarded\nrichly.  Somehow I find that hard to believe.\n\nBesides, if the BIP148 client does it for them, they wouldn't have to\ndedicate those hundreds of developer hours.  Right?\n\nI can't imagine how this logic is getting you from where the real data is\nto the assumption that an economic majority will push BIP148 into being\nsuch a more valuable chain that switching chains will be attractive to\nenough miners.  There's got to be some real data that convinces you of this\nsomewhere?\n\n> Both are issues, but wipeout risk is different, the ETH/ETC split for\n> example didn't have any wipeout risk for either side the same is not\n> true for BIP148(and it is the non-BIP148 side that carries the risk of\n> chain wipeout).\n\nWipeout risk is a serious issue when 45% of the miners support one chain\nand 55% support the other chain.  Segwit doesn't even have 35% of the\nminers; There's no data or statements anywhere that indicate that UASF is\ngoing to reach the point where wipeout risk is even comparable to\nabandonment risk.\n\n> Yes, miners aren't likely to waste operational mining costs, that's\n> ultimately why miners would follow the BIP148 side of the chain\n> assuming it has sufficient economic support or if it's more profitable\n> to mine.\n\nTo convince miners you would have to have some data SOMEWHERE supporting\nthe economic majority argument.  Is there any such data?\n\n> segwit2x has more issues since the HF part requires users to reach\nconsensus\n\nIt doesn't have those issues during the segwit activation, ergo there is no\nreason for segwit-activation problems to take priority over the very real\nhardfork activation problems.\n\n> That's a political reason not a technical reason.\n\nIn a consensus system they are frequently the same, unfortunately.\nTechnical awesomeness without people agreeing = zero consensus.  So the\nchoice is either to \"technically\" break the consensus without a\nsuper-majority and see what happens, or to go with the choice that has real\ndata showing the most consensus and hope the tiny minority chain actually\ndies off.\n\nJared\n\nOn Wed, Jun 7, 2017 at 5:01 PM, James Hilliard <james.hilliard1 at gmail.com>\nwrote:\n\n> On Wed, Jun 7, 2017 at 6:43 PM, Jared Lee Richardson <jaredr26 at gmail.com>\n> wrote:\n> >> BIP148 however is a consensus change that can\n> >> be rectified if it gets more work, this would act as an additional\n> >> incentive for mine the BIP148 side since there would be no wipeout\n> >> risk there.\n> >\n> > This statement is misleading.  Wipeout risks don't apply to any consensus\n> > changes; It is a consensus change, it can only be abandoned.  The BIP148\n> > chain carries just as many risks of being abandoned or even more with\n> > segwit2x on the table.  No miner would consider \"wipeout risk\" an\n> advantage\n> > when the real threat is chain abandonment.\n> Both are issues, but wipeout risk is different, the ETH/ETC split for\n> example didn't have any wipeout risk for either side the same is not\n> true for BIP148(and it is the non-BIP148 side that carries the risk of\n> chain wipeout).\n> >\n> >> Higher transaction fees on a minority chain can compensate miners for\n> >> a lower price which would likely be enough to get the BIP148 chain to\n> >> a difficulty reduction.\n> >\n> > Higher transaction fees suffers the same problem as exchange support\n> does.\n> > Without replay protection, it is very difficult for any average user to\n> > force transactions onto one chain or the other.  Thus, without replay\n> > protection, the UASF chain is unlikely to develop any viable fee market;\n> Its\n> > few miners 99% of the time will simply choose from the highest fees that\n> > were already available to the other chain, which is basically no\n> advantage\n> > at all.\n> Not really, there are a few relatively simple techniques such as RBF\n> which can be leveraged to get confirmations on on-side before double\n> spending on another. Once a transaction is confirmed on the non-BIP148\n> chain then the high fee transactions can be made on only the BIP148\n> side of the split using RBF. Exchanges will likely do this splitting\n> automatically for uses as well.\n> >\n> >>  ETC replay protection was done after the fork on an as\n> >> needed basis(there are multiple reliable techniques that can be used\n> >> to split UTXO's), the same can happen with BIP148 and it is easier to\n> >> do with Bitcoin than with the ETH/ETC split IMO.\n> >\n> > ETC replay protection was added because they were already a hardfork and\n> > without it they would not have had a viable chain.  BIP148 is not\n> supposed\n> > to be a hardfork, and if it added replay protection to remain viable it\n> > would lose the frequently touted \"wipeout advantage\" as well as the\n> ability\n> > to call itself a softfork.  And are you seriously suggesting that what\n> > happened with ETC and ETH is a desirable and good situation for Bitcoin,\n> and\n> > that UASF is ETC?\n> There wasn't proper replay protection at split time for ETH/ETC since\n> normal transactions would get executed on both sides originally,\n> however replay protection was added by wallets(mainly using splitting\n> contracts). I don't think a split is desirable however, which is why\n> I've proposed this BIP.\n> >\n> >> A big reason BIP148 still has support is because up until SegWit\n> >> actually activates there's no guarantee segwit2mb will actually have\n> >> the necessary support to activate SegWit.\n> >\n> > For a miners blowing through six million dollars a day in mining\n> operational\n> > costs, that's a pretty crappy reason.  Serious miners can't afford to\n> prop\n> > up a non-viable chain based on philosophy or maybes.  BIP148 is based\n> > entirely upon people who aren't putting anything on the line trying to\n> > convince others to take the huge risks for them.  With deceptively\n> > fallacious logic, in my opinion.\n> Yes, miners aren't likely to waste operational mining costs, that's\n> ultimately why miners would follow the BIP148 side of the chain\n> assuming it has sufficient economic support or if it's more profitable\n> to mine.\n> >\n> > Even segwit2x is based on the assumption that all miners can reach\n> > consensus.  Break that assumption and segwit2x will have the same\n> problems\n> > as UASF.\n> segwit2x has more issues since the HF part requires users to reach\n> consensus\n> >\n> >> This is largely an issue due to segwit2x's bundling, if the SW and HF\n> >> part of segwit2x were unbundled then there would be no reason to delay\n> >> BIP91 activation\n> >\n> > They are bundled.  Segwit alone doesn't have the desired overwhelming\n> > consensus, unless core wishes to fork 71% to 29%, and maybe not even that\n> > high.  That's the technical reason, and they can't be unbundled without\n> > breaking that consensus.\n> That's a political reason not a technical reason.\n> >\n> > Jared\n> >\n> >\n> > On Wed, Jun 7, 2017 at 4:11 PM, James Hilliard <\n> james.hilliard1 at gmail.com>\n> > wrote:\n> >>\n> >> On Wed, Jun 7, 2017 at 5:53 PM, Jared Lee Richardson <\n> jaredr26 at gmail.com>\n> >> wrote:\n> >> >> There are 2 primary factors involved here, economic support and\n> >> > hashpower either of which is enough to make a permanent chain split\n> >> > unlikely, miners will mine whichever chain is most profitable(see\n> >> > ETH/ETC hashpower profitability equilibrium for an example of how this\n> >> > works in practice)\n> >> >\n> >> > That's not a comparable example.  ETC did not face potentially years\n> of\n> >> > slow\n> >> > blocktimes before it normalized, whereas BIP148 is on track to do\n> >> > exactly\n> >> > that.  Moreover, ETC represented a fundamental break from the majority\n> >> > consensus that could not be rectified, whereas BIP148 represents only\n> a\n> >> > minority attempt to accelerate something that an overwhelming majority\n> >> > of\n> >> > miners have already agreed to activate under segwit2x.  Lastly ETC was\n> >> > required to add replay protection, just like any minority fork\n> proposed\n> >> > by\n> >> > any crypto-currency has been, something that BIP148 both lacks and\n> >> > refuses\n> >> > to add or even acknowledge the necessity of.  Without replay\n> protection,\n> >> > ETC\n> >> > could not have become profitable enough to be a viable minority chain.\n> >> > If\n> >> > BIP148's chain is not the majority chain and it does not have replay\n> >> > protection, it will face the same problems, but that required replay\n> >> > protection will turn it into a hardfork.  This will be a very bad\n> >> > position\n> >> > for UASF supporters to find themselves in - Either hardfork and hope\n> the\n> >> > price is higher and the majority converts, or die as the minority\n> chain\n> >> > with\n> >> > no reliable methods of economic conversion.\n> >> Higher transaction fees on a minority chain can compensate miners for\n> >> a lower price which would likely be enough to get the BIP148 chain to\n> >> a difficulty reduction. BIP148 however is a consensus change that can\n> >> be rectified if it gets more work, this would act as an additional\n> >> incentive for mine the BIP148 side since there would be no wipeout\n> >> risk there. ETC replay protection was done after the fork on an as\n> >> needed basis(there are multiple reliable techniques that can be used\n> >> to split UTXO's), the same can happen with BIP148 and it is easier to\n> >> do with Bitcoin than with the ETH/ETC split IMO.\n> >> >\n> >> > I believe, but don't have data to back this, that most of the BIP148\n> >> > insistence comes not from a legitimate attempt to gain consensus (or\n> >> > else\n> >> > they would either outright oppose segwit2mb for its hardfork, or they\n> >> > would\n> >> > outright support it), but rather from an attempt for BIP148 supporters\n> >> > to\n> >> > save face for BIP148 being a failure.  If I'm correct, that's a\n> terrible\n> >> > and\n> >> > highly non-technical reason for segwit2mb to bend over backwards\n> >> > attempting\n> >> > to support BIP148's attempt to save face.\n> >> A big reason BIP148 still has support is because up until SegWit\n> >> actually activates there's no guarantee segwit2mb will actually have\n> >> the necessary support to activate SegWit.\n> >> >\n> >> >> The main issue is just one of activation timelines, BIP91 as\n> >> > is takes too long to activate unless started ahead of the existing\n> >> > segwit2x schedule and it's unlikely that BIP148 will get pushed back\n> >> > any further.\n> >> >\n> >> > Even if I'm not correct on the above, I and others find it hard to\n> >> > accept\n> >> > that this timeline conflict is segwit2x's fault.  Segwit2x has both\n> some\n> >> > flexibility and broad support that crosses contentious pro-segwit and\n> >> > pro-blocksize-increase divisions that have existed for two years.\n> >> > BIP148 is\n> >> > attempting to hold segwit2x's timelines and code hostage by claiming\n> >> > inflexibility and claiming broad support, and not only are neither of\n> >> > those\n> >> > assertions are backed by real data, BIP148 (by being so inflexible) is\n> >> > pushing a position that deepens the divides between those groups.  For\n> >> > there\n> >> > to be technical reasons for compatibility (so long as there are\n> >> > tradeoffs,\n> >> > which there are), there needs to be hard data showing that BIP148 is a\n> >> > viable minority fork that won't simply die off on its own.\n> >> This is largely an issue due to segwit2x's bundling, if the SW and HF\n> >> part of segwit2x were unbundled then there would be no reason to delay\n> >> BIP91 activation, this is especially a problem since it takes a good\n> >> deal of time to properly code and test a HF. Unfortunately segwit2x\n> >> has been quite inflexible in regards to the bundling aspect even\n> >> though there are clearly no technical reasons for it to be there.\n> >> >\n> >> > Jared\n> >> >\n> >> >\n> >> > On Wed, Jun 7, 2017 at 3:23 PM, James Hilliard\n> >> > <james.hilliard1 at gmail.com>\n> >> > wrote:\n> >> >>\n> >> >> On Wed, Jun 7, 2017 at 4:50 PM, Jared Lee Richardson\n> >> >> <jaredr26 at gmail.com>\n> >> >> wrote:\n> >> >> > Could this risk mitigation measure be an optional flag?  And if so,\n> >> >> > could it+BIP91 signal on a different bit than bit4?\n> >> >> It's fairly trivial for miners to signal for BIP91 on bit4 or a\n> >> >> different bit at the same time as the code is trivial enough to\n> >> >> combine\n> >> >> >\n> >> >> > The reason being, if for some reason the segwit2x activation cannot\n> >> >> > take place in time, it would be preferable for miners to have a\n> more\n> >> >> > standard approach to activation that requires stronger consensus\n> and\n> >> >> > may be more forgiving than BIP148.  If the segwit2x activation is\n> on\n> >> >> > time to cooperate with BIP148, it could be signaled through the\n> >> >> > non-bit4 approach and everything could go smoothly.  Thoughts on\n> that\n> >> >> > idea?  It may add more complexity and more developer time, but may\n> >> >> > also address your concerns among others.\n> >> >> This does give miners another approach to activate segwit ahead of\n> >> >> BIP148, if segwit2x activation is rolled out and activated\n> immediately\n> >> >> then this would not be needed however based on the timeline here\n> >> >> https://segwit2x.github.io/ it would not be possible for BIP91 to\n> >> >> enforce mandatory signalling ahead of BIP148. Maybe that can be\n> >> >> changed though, I've suggested an immediate rollout with a\n> placeholder\n> >> >> client timeout instead of the HF code initially in order to\n> accelerate\n> >> >> that.\n> >> >> >\n> >> >> >> Since this BIP\n> >> >> >> only activates with a clear miner majority it should not increase\n> >> >> >> the\n> >> >> >> risk of an extended chain split.\n> >> >> >\n> >> >> > The concern I'm raising is more about the psychology of giving\n> BIP148\n> >> >> > a sense of safety that may not be valid.  Without several more\n> steps,\n> >> >> > BIP148 is definitely on track to be a risky chainsplit, and without\n> >> >> > segwit2x it will almost certainly be a small minority chain.\n> (Unless\n> >> >> > the segwit2x compromise falls apart before then, and even in that\n> >> >> > case\n> >> >> > it is likely to be a minority chain)\n> >> >> There are 2 primary factors involved here, economic support and\n> >> >> hashpower either of which is enough to make a permanent chain split\n> >> >> unlikely, miners will mine whichever chain is most profitable(see\n> >> >> ETH/ETC hashpower profitability equilibrium for an example of how\n> this\n> >> >> works in practice) however there may be lag time immediately after\n> the\n> >> >> split if there is an economic majority but not a hashpower majority\n> >> >> initially. This is risk mitigation that only requires miners support\n> >> >> however. The main issue is just one of activation timelines, BIP91 as\n> >> >> is takes too long to activate unless started ahead of the existing\n> >> >> segwit2x schedule and it's unlikely that BIP148 will get pushed back\n> >> >> any further.\n> >> >> >\n> >> >> > Jared\n> >> >> >\n> >> >> >\n> >> >> > On Wed, Jun 7, 2017 at 2:42 PM, James Hilliard\n> >> >> > <james.hilliard1 at gmail.com> wrote:\n> >> >> >> I don't really see how this would increase the likelihood of an\n> >> >> >> extended chain split assuming BIP148 is going to have\n> >> >> >> non-insignificant economic backing. This BIP is designed to\n> provide\n> >> >> >> a\n> >> >> >> risk mitigation measure that miners can safely deploy. Since this\n> >> >> >> BIP\n> >> >> >> only activates with a clear miner majority it should not increase\n> >> >> >> the\n> >> >> >> risk of an extended chain split. At this point it is not\n> completely\n> >> >> >> clear how much economic support there is for BIP148 but support\n> >> >> >> certainly seems to be growing and we have nearly 2 months until\n> >> >> >> BIP148\n> >> >> >> activation. I intentionally used a shorter activation period here\n> so\n> >> >> >> that decisions by miners can be made close to the BIP148\n> activation\n> >> >> >> date.\n> >> >> >>\n> >> >> >> On Wed, Jun 7, 2017 at 4:29 PM, Jared Lee Richardson\n> >> >> >> <jaredr26 at gmail.com> wrote:\n> >> >> >>> I think this BIP represents a gamble, and the gamble may not be a\n> >> >> >>> good\n> >> >> >>> one.  The gamble here is that if the segwit2x changes are rolled\n> >> >> >>> out\n> >> >> >>> on time, and if the signatories accept the bit4 + bit1 signaling\n> >> >> >>> proposals within BIP91, the launch will go smoother, as intended.\n> >> >> >>> But\n> >> >> >>> conversely, if either the segwit2x signatories balk about the\n> Bit1\n> >> >> >>> signaling OR if the timelines for segwit2mb are missed even by a\n> >> >> >>> bit,\n> >> >> >>> it may cause the BIP148 chainsplit to be worse than it would be\n> >> >> >>> without.  Given the frequent concerns raised in multiple places\n> >> >> >>> about\n> >> >> >>> the aggressiveness of the segwit2x timelines, including the\n> >> >> >>> non-hardfork timelines, this does not seem like a great gamble to\n> >> >> >>> be\n> >> >> >>> making.\n> >> >> >>>\n> >> >> >>> The reason I say it may make the chainsplit be worse than it\n> would\n> >> >> >>> otherwise be is that it may provide a false sense of safety for\n> >> >> >>> BIP148\n> >> >> >>> that currently does not currently exist(and should not, as it is\n> a\n> >> >> >>> chainsplit).  That sense of safety would only be legitimate if\n> the\n> >> >> >>> segwit2x signatories were on board, and the segwit2x code\n> >> >> >>> effectively\n> >> >> >>> enforced BIP148 simultaneously, neither of which are guaranteed.\n> >> >> >>> If\n> >> >> >>> users and more miners had a false sense that BIP148 was *not*\n> going\n> >> >> >>> to\n> >> >> >>> chainsplit from default / segwit2x, they might not follow the\n> news\n> >> >> >>> if\n> >> >> >>> suddenly the segwit2x plan were delayed for a few days.  While\n> any\n> >> >> >>> additional support would definitely be cheered on by BIP148\n> >> >> >>> supporters, the practical reality might be that this proposal\n> would\n> >> >> >>> take BIP148 from the \"unlikely to have any viable chain after\n> flag\n> >> >> >>> day\n> >> >> >>> without segwit2x\" category into the \"small but viable minority\n> >> >> >>> chain\"\n> >> >> >>> category, and even worse, it might strengthen the chainsplit just\n> >> >> >>> days\n> >> >> >>> before segwit is activated on BOTH chains, putting the BIP148\n> >> >> >>> supporters on the wrong pro-segwit, but still-viable chain.\n> >> >> >>>\n> >> >> >>> If Core had taken a strong stance to include BIP148 into the\n> >> >> >>> client,\n> >> >> >>> and if BIP148 support were much much broader, I would feel\n> >> >> >>> differently\n> >> >> >>> as the gamble would be more likely to discourage a chainsplit (By\n> >> >> >>> forcing the acceleration of segwit2x) rather than encourage it\n> (by\n> >> >> >>> strengthening an extreme minority chainsplit that may wind up on\n> >> >> >>> the\n> >> >> >>> wrong side of two segwit-activated chains).  As it stands now,\n> this\n> >> >> >>> seems like a very dangerous attempt to compromise with a small\n> but\n> >> >> >>> vocal group that are the ones creating the threat to begin with.\n> >> >> >>>\n> >> >> >>> Jared\n> >> >> >>>\n> >> >> >>> On Tue, Jun 6, 2017 at 5:56 PM, James Hilliard via bitcoin-dev\n> >> >> >>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> >> >>>> Due to the proposed calendar(https://segwit2x.github.io/) for\n> the\n> >> >> >>>> SegWit2x agreement being too slow to activate SegWit mandatory\n> >> >> >>>> signalling ahead of BIP148 using BIP91 I would like to propose\n> >> >> >>>> another\n> >> >> >>>> option that miners can use to prevent a chain split ahead of the\n> >> >> >>>> Aug\n> >> >> >>>> 1st BIP148 activation date.\n> >> >> >>>>\n> >> >> >>>> The splitprotection soft fork is essentially BIP91 but using\n> BIP8\n> >> >> >>>> instead of BIP9 with a lower activation threshold and immediate\n> >> >> >>>> mandatory signalling lock-in. This allows for a majority of\n> miners\n> >> >> >>>> to\n> >> >> >>>> activate mandatory SegWit signalling and prevent a potential\n> chain\n> >> >> >>>> split ahead of BIP148 activation.\n> >> >> >>>>\n> >> >> >>>> This BIP allows for miners to respond to market forces quickly\n> >> >> >>>> ahead\n> >> >> >>>> of BIP148 activation by signalling for splitprotection. Any\n> miners\n> >> >> >>>> already running BIP148 should be encouraged to use\n> >> >> >>>> splitprotection.\n> >> >> >>>>\n> >> >> >>>> <pre>\n> >> >> >>>>   BIP: splitprotection\n> >> >> >>>>   Layer: Consensus (soft fork)\n> >> >> >>>>   Title: User Activated Soft Fork Split Protection\n> >> >> >>>>   Author: James Hilliard <james.hilliard1 at gmail.com>\n> >> >> >>>>   Comments-Summary: No comments yet.\n> >> >> >>>>   Comments-URI:\n> >> >> >>>>   Status: Draft\n> >> >> >>>>   Type: Standards Track\n> >> >> >>>>   Created: 2017-05-22\n> >> >> >>>>   License: BSD-3-Clause\n> >> >> >>>>            CC0-1.0\n> >> >> >>>> </pre>\n> >> >> >>>>\n> >> >> >>>> ==Abstract==\n> >> >> >>>>\n> >> >> >>>> This document specifies a coordination mechanism for a simple\n> >> >> >>>> majority\n> >> >> >>>> of miners to prevent a chain split ahead of BIP148 activation.\n> >> >> >>>>\n> >> >> >>>> ==Definitions==\n> >> >> >>>>\n> >> >> >>>> \"existing segwit deployment\" refer to the BIP9 \"segwit\"\n> deployment\n> >> >> >>>> using bit 1, between November 15th 2016 and November 15th 2017\n> to\n> >> >> >>>> activate BIP141, BIP143 and BIP147.\n> >> >> >>>>\n> >> >> >>>> ==Motivation==\n> >> >> >>>>\n> >> >> >>>> The biggest risk of BIP148 is an extended chain split, this BIP\n> >> >> >>>> provides a way for a simple majority of miners to eliminate that\n> >> >> >>>> risk.\n> >> >> >>>>\n> >> >> >>>> This BIP provides a way for a simple majority of miners to\n> >> >> >>>> coordinate\n> >> >> >>>> activation of the existing segwit deployment with less than 95%\n> >> >> >>>> hashpower before BIP148 activation. Due to time constraints\n> unless\n> >> >> >>>> immediately deployed BIP91 will likely not be able to enforce\n> >> >> >>>> mandatory signalling of segwit before the Aug 1st activation of\n> >> >> >>>> BIP148. This BIP provides a method for rapid miner activation of\n> >> >> >>>> SegWit mandatory signalling ahead of the BIP148 activation date.\n> >> >> >>>> Since\n> >> >> >>>> the primary goal of this BIP is to reduce the chance of an\n> >> >> >>>> extended\n> >> >> >>>> chain split as much as possible we activate using a simple miner\n> >> >> >>>> majority of 65% over a 504 block interval rather than a higher\n> >> >> >>>> percentage. This BIP also allows miners to signal their\n> intention\n> >> >> >>>> to\n> >> >> >>>> run BIP148 in order to prevent a chain split.\n> >> >> >>>>\n> >> >> >>>> ==Specification==\n> >> >> >>>>\n> >> >> >>>> While this BIP is active, all blocks must set the nVersion\n> header\n> >> >> >>>> top\n> >> >> >>>> 3 bits to 001 together with bit field (1<<1) (according to the\n> >> >> >>>> existing segwit deployment). Blocks that do not signal as\n> required\n> >> >> >>>> will be rejected.\n> >> >> >>>>\n> >> >> >>>> ==Deployment==\n> >> >> >>>>\n> >> >> >>>> This BIP will be deployed by \"version bits\" with a 65%(this can\n> be\n> >> >> >>>> adjusted if desired) activation threshold BIP9 with the name\n> >> >> >>>> \"splitprotecion\" and using bit 2.\n> >> >> >>>>\n> >> >> >>>> This BIP starts immediately and is a BIP8 style soft fork since\n> >> >> >>>> mandatory signalling will start on midnight August 1st 2017\n> (epoch\n> >> >> >>>> time 1501545600) regardless of whether or not this BIP has\n> reached\n> >> >> >>>> its\n> >> >> >>>> own signalling threshold. This BIP will cease to be active when\n> >> >> >>>> segwit\n> >> >> >>>> is locked-in.\n> >> >> >>>>\n> >> >> >>>> === Reference implementation ===\n> >> >> >>>>\n> >> >> >>>> <pre>\n> >> >> >>>> // Check if Segregated Witness is Locked In\n> >> >> >>>> bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n> >> >> >>>> Consensus::Params& params)\n> >> >> >>>> {\n> >> >> >>>>     LOCK(cs_main);\n> >> >> >>>>     return (VersionBitsState(pindexPrev, params,\n> >> >> >>>> Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n> >> >> >>>> THRESHOLD_LOCKED_IN);\n> >> >> >>>> }\n> >> >> >>>>\n> >> >> >>>> // SPLITPROTECTION mandatory segwit signalling.\n> >> >> >>>> if ( VersionBitsState(pindex->pprev,\n> chainparams.GetConsensus(),\n> >> >> >>>> Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n> >> >> >>>> THRESHOLD_LOCKED_IN &&\n> >> >> >>>>      !IsWitnessLockedIn(pindex->pprev,\n> chainparams.GetConsensus())\n> >> >> >>>> &&\n> >> >> >>>> // Segwit is not locked in\n> >> >> >>>>      !IsWitnessEnabled(pindex->pprev,\n> chainparams.GetConsensus())\n> >> >> >>>> )\n> >> >> >>>> //\n> >> >> >>>> and is not active.\n> >> >> >>>> {\n> >> >> >>>>     bool fVersionBits = (pindex->nVersion &\n> VERSIONBITS_TOP_MASK)\n> >> >> >>>> ==\n> >> >> >>>> VERSIONBITS_TOP_BITS;\n> >> >> >>>>     bool fSegbit = (pindex->nVersion &\n> >> >> >>>> VersionBitsMask(chainparams.GetConsensus(),\n> >> >> >>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n> >> >> >>>>     if (!(fVersionBits && fSegbit)) {\n> >> >> >>>>         return state.DoS(0, error(\"ConnectBlock(): relayed block\n> >> >> >>>> must\n> >> >> >>>> signal for segwit, please upgrade\"), REJECT_INVALID,\n> >> >> >>>> \"bad-no-segwit\");\n> >> >> >>>>     }\n> >> >> >>>> }\n> >> >> >>>>\n> >> >> >>>> // BIP148 mandatory segwit signalling.\n> >> >> >>>> int64_t nMedianTimePast = pindex->GetMedianTimePast();\n> >> >> >>>> if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017\n> >> >> >>>> 00:00:00\n> >> >> >>>> UTC\n> >> >> >>>>      (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017\n> >> >> >>>> 00:00:00\n> >> >> >>>> UTC\n> >> >> >>>>      (!IsWitnessLockedIn(pindex->pprev,\n> >> >> >>>> chainparams.GetConsensus())\n> >> >> >>>> &&\n> >> >> >>>>  // Segwit is not locked in\n> >> >> >>>>       !IsWitnessEnabled(pindex->pprev,\n> >> >> >>>> chainparams.GetConsensus())) )\n> >> >> >>>>  // and is not active.\n> >> >> >>>> {\n> >> >> >>>>     bool fVersionBits = (pindex->nVersion &\n> VERSIONBITS_TOP_MASK)\n> >> >> >>>> ==\n> >> >> >>>> VERSIONBITS_TOP_BITS;\n> >> >> >>>>     bool fSegbit = (pindex->nVersion &\n> >> >> >>>> VersionBitsMask(chainparams.GetConsensus(),\n> >> >> >>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n> >> >> >>>>     if (!(fVersionBits && fSegbit)) {\n> >> >> >>>>         return state.DoS(0, error(\"ConnectBlock(): relayed block\n> >> >> >>>> must\n> >> >> >>>> signal for segwit, please upgrade\"), REJECT_INVALID,\n> >> >> >>>> \"bad-no-segwit\");\n> >> >> >>>>     }\n> >> >> >>>> }\n> >> >> >>>> </pre>\n> >> >> >>>>\n> >> >> >>>>\n> >> >> >>>>\n> >> >> >>>> https://github.com/bitcoin/bitcoin/compare/0.14...\n> jameshilliard:splitprotection-v0.14.1\n> >> >> >>>>\n> >> >> >>>> ==Backwards Compatibility==\n> >> >> >>>>\n> >> >> >>>> This deployment is compatible with the existing \"segwit\" bit 1\n> >> >> >>>> deployment scheduled between midnight November 15th, 2016 and\n> >> >> >>>> midnight\n> >> >> >>>> November 15th, 2017. This deployment is also compatible with the\n> >> >> >>>> existing BIP148 deployment. This BIP is compatible with BIP91\n> only\n> >> >> >>>> if\n> >> >> >>>> BIP91 activates before it and before BIP148. Miners will need to\n> >> >> >>>> upgrade their nodes to support splitprotection otherwise they\n> may\n> >> >> >>>> build on top of an invalid block. While this bip is active users\n> >> >> >>>> should either upgrade to splitprotection or wait for additional\n> >> >> >>>> confirmations when accepting payments.\n> >> >> >>>>\n> >> >> >>>> ==Rationale==\n> >> >> >>>>\n> >> >> >>>> Historically we have used IsSuperMajority() to activate soft\n> forks\n> >> >> >>>> such as BIP66 which has a mandatory signalling requirement for\n> >> >> >>>> miners\n> >> >> >>>> once activated, this ensures that miners are aware of new rules\n> >> >> >>>> being\n> >> >> >>>> enforced. This technique can be leveraged to lower the\n> signalling\n> >> >> >>>> threshold of a soft fork while it is in the process of being\n> >> >> >>>> deployed\n> >> >> >>>> in a backwards compatible way. We also use a BIP8 style timeout\n> to\n> >> >> >>>> ensure that this BIP is compatible with BIP148 and that BIP148\n> >> >> >>>> compatible mandatory signalling activates regardless of miner\n> >> >> >>>> signalling levels.\n> >> >> >>>>\n> >> >> >>>> By orphaning non-signalling blocks during the BIP9 bit 1\n> \"segwit\"\n> >> >> >>>> deployment, this BIP can cause the existing \"segwit\" deployment\n> to\n> >> >> >>>> activate without needing to release a new deployment. As we\n> >> >> >>>> approach\n> >> >> >>>> BIP148 activation it may be desirable for a majority of miners\n> to\n> >> >> >>>> have\n> >> >> >>>> a method that will ensure that there is no chain split.\n> >> >> >>>>\n> >> >> >>>> ==References==\n> >> >> >>>>\n> >> >> >>>>\n> >> >> >>>>\n> >> >> >>>> *[https://lists.linuxfoundation.org/pipermail/\n> bitcoin-dev/2017-March/013714.html\n> >> >> >>>> Mailing list discussion]\n> >> >> >>>>\n> >> >> >>>>\n> >> >> >>>> *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.\n> cpp#L1281-L1283\n> >> >> >>>> P2SH flag day activation]\n> >> >> >>>> *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n> >> >> >>>> *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n> >> >> >>>> *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n> >> >> >>>> *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus\n> >> >> >>>> layer)]]\n> >> >> >>>> *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification\n> >> >> >>>> for\n> >> >> >>>> Version 0 Witness Program]]\n> >> >> >>>> *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element\n> >> >> >>>> malleability]]\n> >> >> >>>> *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit\n> >> >> >>>> deployment]]\n> >> >> >>>> *[[bip-0149.mediawiki|BIP149 Segregated Witness (second\n> >> >> >>>> deployment)]]\n> >> >> >>>> *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit\n> >> >> >>>> benefits]\n> >> >> >>>>\n> >> >> >>>> ==Copyright==\n> >> >> >>>>\n> >> >> >>>> This document is dual licensed as BSD 3-clause, and Creative\n> >> >> >>>> Commons\n> >> >> >>>> CC0 1.0 Universal.\n> >> >> >>>> _______________________________________________\n> >> >> >>>> bitcoin-dev mailing list\n> >> >> >>>> bitcoin-dev at lists.linuxfoundation.org\n> >> >> >>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >> >\n> >> >\n> >\n> >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170607/23cd8979/attachment-0001.html>"
            },
            {
                "author": "James Hilliard",
                "date": "2017-06-08T00:44:38",
                "message_text_only": "On Wed, Jun 7, 2017 at 7:20 PM, Jared Lee Richardson <jaredr26 at gmail.com> wrote:\n>> Not really, there are a few relatively simple techniques such as RBF\n>> which can be leveraged to get confirmations on on-side before double\n>> spending on another. Once a transaction is confirmed on the non-BIP148\n>> chain then the high fee transactions can be made on only the BIP148\n>> side of the split using RBF.\n>\n> Ah, so the BIP148 client handles this on behalf of its less technical users\n> on their behalf then, yes?\nIt's not automatic but exchanges will likely handle it on behalf of\nthe less technical users. BIP148 is not intended to cause a permanent\nchain split however which is why this was not built in.\n>\n>>  Exchanges will likely do this splitting\n>> automatically for uses as well.\n>\n> Sure, Exchanges are going to dedicate hundreds of developer hours and\n> thousands of support hours to support something that they've repeatedly told\n> everyone must have replay protection to be supported.  They're going to do\n> this because 8% of nodes and <0.5% of miners say they'll be rewarded richly.\n> Somehow I find that hard to believe.\nThey are very likely to, most have contingency plans for this sort of\nthing ready to go due to their experience with the ETH/ETC fork.\n>\n> Besides, if the BIP148 client does it for them, they wouldn't have to\n> dedicate those hundreds of developer hours.  Right?\n>\n> I can't imagine how this logic is getting you from where the real data is to\n> the assumption that an economic majority will push BIP148 into being such a\n> more valuable chain that switching chains will be attractive to enough\n> miners.  There's got to be some real data that convinces you of this\n> somewhere?\nIf you're looking for hard numbers at this point you aren't likely to\nfind them because not everything is easy to measure directly.\n>\n>> Both are issues, but wipeout risk is different, the ETH/ETC split for\n>> example didn't have any wipeout risk for either side the same is not\n>> true for BIP148(and it is the non-BIP148 side that carries the risk of\n>> chain wipeout).\n>\n> Wipeout risk is a serious issue when 45% of the miners support one chain and\n> 55% support the other chain.  Segwit doesn't even have 35% of the miners;\n> There's no data or statements anywhere that indicate that UASF is going to\n> reach the point where wipeout risk is even comparable to abandonment risk.\nIt's mostly economic support that will dictate this, not hashpower\nsupport since the hashpower follows the economy.\n>\n>> Yes, miners aren't likely to waste operational mining costs, that's\n>> ultimately why miners would follow the BIP148 side of the chain\n>> assuming it has sufficient economic support or if it's more profitable\n>> to mine.\n>\n> To convince miners you would have to have some data SOMEWHERE supporting the\n> economic majority argument.  Is there any such data?\nWe'll know more as we get closer to BIP148 activation by looking at the markets.\n>\n>> segwit2x has more issues since the HF part requires users to reach\n>> consensus\n>\n> It doesn't have those issues during the segwit activation, ergo there is no\n> reason for segwit-activation problems to take priority over the very real\n> hardfork activation problems.\nAnd yet segwit2x is insisting on activation bundling which needlessly\ncomplicates and delays SegWit activation.\n>\n>> That's a political reason not a technical reason.\n>\n> In a consensus system they are frequently the same, unfortunately.\n> Technical awesomeness without people agreeing = zero consensus.  So the\n> choice is either to \"technically\" break the consensus without a\n> super-majority and see what happens, or to go with the choice that has real\n> data showing the most consensus and hope the tiny minority chain actually\n> dies off.\nSure, technical changes can be made for political reasons, we should\nat least be clear in regards to why particular decisions are being\nmade. I'm supportive of a hard fork for technical reasons but not\npolitical ones as are many others.\n>\n> Jared\n>\n> On Wed, Jun 7, 2017 at 5:01 PM, James Hilliard <james.hilliard1 at gmail.com>\n> wrote:\n>>\n>> On Wed, Jun 7, 2017 at 6:43 PM, Jared Lee Richardson <jaredr26 at gmail.com>\n>> wrote:\n>> >> BIP148 however is a consensus change that can\n>> >> be rectified if it gets more work, this would act as an additional\n>> >> incentive for mine the BIP148 side since there would be no wipeout\n>> >> risk there.\n>> >\n>> > This statement is misleading.  Wipeout risks don't apply to any\n>> > consensus\n>> > changes; It is a consensus change, it can only be abandoned.  The BIP148\n>> > chain carries just as many risks of being abandoned or even more with\n>> > segwit2x on the table.  No miner would consider \"wipeout risk\" an\n>> > advantage\n>> > when the real threat is chain abandonment.\n>> Both are issues, but wipeout risk is different, the ETH/ETC split for\n>> example didn't have any wipeout risk for either side the same is not\n>> true for BIP148(and it is the non-BIP148 side that carries the risk of\n>> chain wipeout).\n>> >\n>> >> Higher transaction fees on a minority chain can compensate miners for\n>> >> a lower price which would likely be enough to get the BIP148 chain to\n>> >> a difficulty reduction.\n>> >\n>> > Higher transaction fees suffers the same problem as exchange support\n>> > does.\n>> > Without replay protection, it is very difficult for any average user to\n>> > force transactions onto one chain or the other.  Thus, without replay\n>> > protection, the UASF chain is unlikely to develop any viable fee market;\n>> > Its\n>> > few miners 99% of the time will simply choose from the highest fees that\n>> > were already available to the other chain, which is basically no\n>> > advantage\n>> > at all.\n>> Not really, there are a few relatively simple techniques such as RBF\n>> which can be leveraged to get confirmations on on-side before double\n>> spending on another. Once a transaction is confirmed on the non-BIP148\n>> chain then the high fee transactions can be made on only the BIP148\n>> side of the split using RBF. Exchanges will likely do this splitting\n>> automatically for uses as well.\n>> >\n>> >>  ETC replay protection was done after the fork on an as\n>> >> needed basis(there are multiple reliable techniques that can be used\n>> >> to split UTXO's), the same can happen with BIP148 and it is easier to\n>> >> do with Bitcoin than with the ETH/ETC split IMO.\n>> >\n>> > ETC replay protection was added because they were already a hardfork and\n>> > without it they would not have had a viable chain.  BIP148 is not\n>> > supposed\n>> > to be a hardfork, and if it added replay protection to remain viable it\n>> > would lose the frequently touted \"wipeout advantage\" as well as the\n>> > ability\n>> > to call itself a softfork.  And are you seriously suggesting that what\n>> > happened with ETC and ETH is a desirable and good situation for Bitcoin,\n>> > and\n>> > that UASF is ETC?\n>> There wasn't proper replay protection at split time for ETH/ETC since\n>> normal transactions would get executed on both sides originally,\n>> however replay protection was added by wallets(mainly using splitting\n>> contracts). I don't think a split is desirable however, which is why\n>> I've proposed this BIP.\n>> >\n>> >> A big reason BIP148 still has support is because up until SegWit\n>> >> actually activates there's no guarantee segwit2mb will actually have\n>> >> the necessary support to activate SegWit.\n>> >\n>> > For a miners blowing through six million dollars a day in mining\n>> > operational\n>> > costs, that's a pretty crappy reason.  Serious miners can't afford to\n>> > prop\n>> > up a non-viable chain based on philosophy or maybes.  BIP148 is based\n>> > entirely upon people who aren't putting anything on the line trying to\n>> > convince others to take the huge risks for them.  With deceptively\n>> > fallacious logic, in my opinion.\n>> Yes, miners aren't likely to waste operational mining costs, that's\n>> ultimately why miners would follow the BIP148 side of the chain\n>> assuming it has sufficient economic support or if it's more profitable\n>> to mine.\n>> >\n>> > Even segwit2x is based on the assumption that all miners can reach\n>> > consensus.  Break that assumption and segwit2x will have the same\n>> > problems\n>> > as UASF.\n>> segwit2x has more issues since the HF part requires users to reach\n>> consensus\n>> >\n>> >> This is largely an issue due to segwit2x's bundling, if the SW and HF\n>> >> part of segwit2x were unbundled then there would be no reason to delay\n>> >> BIP91 activation\n>> >\n>> > They are bundled.  Segwit alone doesn't have the desired overwhelming\n>> > consensus, unless core wishes to fork 71% to 29%, and maybe not even\n>> > that\n>> > high.  That's the technical reason, and they can't be unbundled without\n>> > breaking that consensus.\n>> That's a political reason not a technical reason.\n>> >\n>> > Jared\n>> >\n>> >\n>> > On Wed, Jun 7, 2017 at 4:11 PM, James Hilliard\n>> > <james.hilliard1 at gmail.com>\n>> > wrote:\n>> >>\n>> >> On Wed, Jun 7, 2017 at 5:53 PM, Jared Lee Richardson\n>> >> <jaredr26 at gmail.com>\n>> >> wrote:\n>> >> >> There are 2 primary factors involved here, economic support and\n>> >> > hashpower either of which is enough to make a permanent chain split\n>> >> > unlikely, miners will mine whichever chain is most profitable(see\n>> >> > ETH/ETC hashpower profitability equilibrium for an example of how\n>> >> > this\n>> >> > works in practice)\n>> >> >\n>> >> > That's not a comparable example.  ETC did not face potentially years\n>> >> > of\n>> >> > slow\n>> >> > blocktimes before it normalized, whereas BIP148 is on track to do\n>> >> > exactly\n>> >> > that.  Moreover, ETC represented a fundamental break from the\n>> >> > majority\n>> >> > consensus that could not be rectified, whereas BIP148 represents only\n>> >> > a\n>> >> > minority attempt to accelerate something that an overwhelming\n>> >> > majority\n>> >> > of\n>> >> > miners have already agreed to activate under segwit2x.  Lastly ETC\n>> >> > was\n>> >> > required to add replay protection, just like any minority fork\n>> >> > proposed\n>> >> > by\n>> >> > any crypto-currency has been, something that BIP148 both lacks and\n>> >> > refuses\n>> >> > to add or even acknowledge the necessity of.  Without replay\n>> >> > protection,\n>> >> > ETC\n>> >> > could not have become profitable enough to be a viable minority\n>> >> > chain.\n>> >> > If\n>> >> > BIP148's chain is not the majority chain and it does not have replay\n>> >> > protection, it will face the same problems, but that required replay\n>> >> > protection will turn it into a hardfork.  This will be a very bad\n>> >> > position\n>> >> > for UASF supporters to find themselves in - Either hardfork and hope\n>> >> > the\n>> >> > price is higher and the majority converts, or die as the minority\n>> >> > chain\n>> >> > with\n>> >> > no reliable methods of economic conversion.\n>> >> Higher transaction fees on a minority chain can compensate miners for\n>> >> a lower price which would likely be enough to get the BIP148 chain to\n>> >> a difficulty reduction. BIP148 however is a consensus change that can\n>> >> be rectified if it gets more work, this would act as an additional\n>> >> incentive for mine the BIP148 side since there would be no wipeout\n>> >> risk there. ETC replay protection was done after the fork on an as\n>> >> needed basis(there are multiple reliable techniques that can be used\n>> >> to split UTXO's), the same can happen with BIP148 and it is easier to\n>> >> do with Bitcoin than with the ETH/ETC split IMO.\n>> >> >\n>> >> > I believe, but don't have data to back this, that most of the BIP148\n>> >> > insistence comes not from a legitimate attempt to gain consensus (or\n>> >> > else\n>> >> > they would either outright oppose segwit2mb for its hardfork, or they\n>> >> > would\n>> >> > outright support it), but rather from an attempt for BIP148\n>> >> > supporters\n>> >> > to\n>> >> > save face for BIP148 being a failure.  If I'm correct, that's a\n>> >> > terrible\n>> >> > and\n>> >> > highly non-technical reason for segwit2mb to bend over backwards\n>> >> > attempting\n>> >> > to support BIP148's attempt to save face.\n>> >> A big reason BIP148 still has support is because up until SegWit\n>> >> actually activates there's no guarantee segwit2mb will actually have\n>> >> the necessary support to activate SegWit.\n>> >> >\n>> >> >> The main issue is just one of activation timelines, BIP91 as\n>> >> > is takes too long to activate unless started ahead of the existing\n>> >> > segwit2x schedule and it's unlikely that BIP148 will get pushed back\n>> >> > any further.\n>> >> >\n>> >> > Even if I'm not correct on the above, I and others find it hard to\n>> >> > accept\n>> >> > that this timeline conflict is segwit2x's fault.  Segwit2x has both\n>> >> > some\n>> >> > flexibility and broad support that crosses contentious pro-segwit and\n>> >> > pro-blocksize-increase divisions that have existed for two years.\n>> >> > BIP148 is\n>> >> > attempting to hold segwit2x's timelines and code hostage by claiming\n>> >> > inflexibility and claiming broad support, and not only are neither of\n>> >> > those\n>> >> > assertions are backed by real data, BIP148 (by being so inflexible)\n>> >> > is\n>> >> > pushing a position that deepens the divides between those groups.\n>> >> > For\n>> >> > there\n>> >> > to be technical reasons for compatibility (so long as there are\n>> >> > tradeoffs,\n>> >> > which there are), there needs to be hard data showing that BIP148 is\n>> >> > a\n>> >> > viable minority fork that won't simply die off on its own.\n>> >> This is largely an issue due to segwit2x's bundling, if the SW and HF\n>> >> part of segwit2x were unbundled then there would be no reason to delay\n>> >> BIP91 activation, this is especially a problem since it takes a good\n>> >> deal of time to properly code and test a HF. Unfortunately segwit2x\n>> >> has been quite inflexible in regards to the bundling aspect even\n>> >> though there are clearly no technical reasons for it to be there.\n>> >> >\n>> >> > Jared\n>> >> >\n>> >> >\n>> >> > On Wed, Jun 7, 2017 at 3:23 PM, James Hilliard\n>> >> > <james.hilliard1 at gmail.com>\n>> >> > wrote:\n>> >> >>\n>> >> >> On Wed, Jun 7, 2017 at 4:50 PM, Jared Lee Richardson\n>> >> >> <jaredr26 at gmail.com>\n>> >> >> wrote:\n>> >> >> > Could this risk mitigation measure be an optional flag?  And if\n>> >> >> > so,\n>> >> >> > could it+BIP91 signal on a different bit than bit4?\n>> >> >> It's fairly trivial for miners to signal for BIP91 on bit4 or a\n>> >> >> different bit at the same time as the code is trivial enough to\n>> >> >> combine\n>> >> >> >\n>> >> >> > The reason being, if for some reason the segwit2x activation\n>> >> >> > cannot\n>> >> >> > take place in time, it would be preferable for miners to have a\n>> >> >> > more\n>> >> >> > standard approach to activation that requires stronger consensus\n>> >> >> > and\n>> >> >> > may be more forgiving than BIP148.  If the segwit2x activation is\n>> >> >> > on\n>> >> >> > time to cooperate with BIP148, it could be signaled through the\n>> >> >> > non-bit4 approach and everything could go smoothly.  Thoughts on\n>> >> >> > that\n>> >> >> > idea?  It may add more complexity and more developer time, but may\n>> >> >> > also address your concerns among others.\n>> >> >> This does give miners another approach to activate segwit ahead of\n>> >> >> BIP148, if segwit2x activation is rolled out and activated\n>> >> >> immediately\n>> >> >> then this would not be needed however based on the timeline here\n>> >> >> https://segwit2x.github.io/ it would not be possible for BIP91 to\n>> >> >> enforce mandatory signalling ahead of BIP148. Maybe that can be\n>> >> >> changed though, I've suggested an immediate rollout with a\n>> >> >> placeholder\n>> >> >> client timeout instead of the HF code initially in order to\n>> >> >> accelerate\n>> >> >> that.\n>> >> >> >\n>> >> >> >> Since this BIP\n>> >> >> >> only activates with a clear miner majority it should not increase\n>> >> >> >> the\n>> >> >> >> risk of an extended chain split.\n>> >> >> >\n>> >> >> > The concern I'm raising is more about the psychology of giving\n>> >> >> > BIP148\n>> >> >> > a sense of safety that may not be valid.  Without several more\n>> >> >> > steps,\n>> >> >> > BIP148 is definitely on track to be a risky chainsplit, and\n>> >> >> > without\n>> >> >> > segwit2x it will almost certainly be a small minority chain.\n>> >> >> > (Unless\n>> >> >> > the segwit2x compromise falls apart before then, and even in that\n>> >> >> > case\n>> >> >> > it is likely to be a minority chain)\n>> >> >> There are 2 primary factors involved here, economic support and\n>> >> >> hashpower either of which is enough to make a permanent chain split\n>> >> >> unlikely, miners will mine whichever chain is most profitable(see\n>> >> >> ETH/ETC hashpower profitability equilibrium for an example of how\n>> >> >> this\n>> >> >> works in practice) however there may be lag time immediately after\n>> >> >> the\n>> >> >> split if there is an economic majority but not a hashpower majority\n>> >> >> initially. This is risk mitigation that only requires miners support\n>> >> >> however. The main issue is just one of activation timelines, BIP91\n>> >> >> as\n>> >> >> is takes too long to activate unless started ahead of the existing\n>> >> >> segwit2x schedule and it's unlikely that BIP148 will get pushed back\n>> >> >> any further.\n>> >> >> >\n>> >> >> > Jared\n>> >> >> >\n>> >> >> >\n>> >> >> > On Wed, Jun 7, 2017 at 2:42 PM, James Hilliard\n>> >> >> > <james.hilliard1 at gmail.com> wrote:\n>> >> >> >> I don't really see how this would increase the likelihood of an\n>> >> >> >> extended chain split assuming BIP148 is going to have\n>> >> >> >> non-insignificant economic backing. This BIP is designed to\n>> >> >> >> provide\n>> >> >> >> a\n>> >> >> >> risk mitigation measure that miners can safely deploy. Since this\n>> >> >> >> BIP\n>> >> >> >> only activates with a clear miner majority it should not increase\n>> >> >> >> the\n>> >> >> >> risk of an extended chain split. At this point it is not\n>> >> >> >> completely\n>> >> >> >> clear how much economic support there is for BIP148 but support\n>> >> >> >> certainly seems to be growing and we have nearly 2 months until\n>> >> >> >> BIP148\n>> >> >> >> activation. I intentionally used a shorter activation period here\n>> >> >> >> so\n>> >> >> >> that decisions by miners can be made close to the BIP148\n>> >> >> >> activation\n>> >> >> >> date.\n>> >> >> >>\n>> >> >> >> On Wed, Jun 7, 2017 at 4:29 PM, Jared Lee Richardson\n>> >> >> >> <jaredr26 at gmail.com> wrote:\n>> >> >> >>> I think this BIP represents a gamble, and the gamble may not be\n>> >> >> >>> a\n>> >> >> >>> good\n>> >> >> >>> one.  The gamble here is that if the segwit2x changes are rolled\n>> >> >> >>> out\n>> >> >> >>> on time, and if the signatories accept the bit4 + bit1 signaling\n>> >> >> >>> proposals within BIP91, the launch will go smoother, as\n>> >> >> >>> intended.\n>> >> >> >>> But\n>> >> >> >>> conversely, if either the segwit2x signatories balk about the\n>> >> >> >>> Bit1\n>> >> >> >>> signaling OR if the timelines for segwit2mb are missed even by a\n>> >> >> >>> bit,\n>> >> >> >>> it may cause the BIP148 chainsplit to be worse than it would be\n>> >> >> >>> without.  Given the frequent concerns raised in multiple places\n>> >> >> >>> about\n>> >> >> >>> the aggressiveness of the segwit2x timelines, including the\n>> >> >> >>> non-hardfork timelines, this does not seem like a great gamble\n>> >> >> >>> to\n>> >> >> >>> be\n>> >> >> >>> making.\n>> >> >> >>>\n>> >> >> >>> The reason I say it may make the chainsplit be worse than it\n>> >> >> >>> would\n>> >> >> >>> otherwise be is that it may provide a false sense of safety for\n>> >> >> >>> BIP148\n>> >> >> >>> that currently does not currently exist(and should not, as it is\n>> >> >> >>> a\n>> >> >> >>> chainsplit).  That sense of safety would only be legitimate if\n>> >> >> >>> the\n>> >> >> >>> segwit2x signatories were on board, and the segwit2x code\n>> >> >> >>> effectively\n>> >> >> >>> enforced BIP148 simultaneously, neither of which are guaranteed.\n>> >> >> >>> If\n>> >> >> >>> users and more miners had a false sense that BIP148 was *not*\n>> >> >> >>> going\n>> >> >> >>> to\n>> >> >> >>> chainsplit from default / segwit2x, they might not follow the\n>> >> >> >>> news\n>> >> >> >>> if\n>> >> >> >>> suddenly the segwit2x plan were delayed for a few days.  While\n>> >> >> >>> any\n>> >> >> >>> additional support would definitely be cheered on by BIP148\n>> >> >> >>> supporters, the practical reality might be that this proposal\n>> >> >> >>> would\n>> >> >> >>> take BIP148 from the \"unlikely to have any viable chain after\n>> >> >> >>> flag\n>> >> >> >>> day\n>> >> >> >>> without segwit2x\" category into the \"small but viable minority\n>> >> >> >>> chain\"\n>> >> >> >>> category, and even worse, it might strengthen the chainsplit\n>> >> >> >>> just\n>> >> >> >>> days\n>> >> >> >>> before segwit is activated on BOTH chains, putting the BIP148\n>> >> >> >>> supporters on the wrong pro-segwit, but still-viable chain.\n>> >> >> >>>\n>> >> >> >>> If Core had taken a strong stance to include BIP148 into the\n>> >> >> >>> client,\n>> >> >> >>> and if BIP148 support were much much broader, I would feel\n>> >> >> >>> differently\n>> >> >> >>> as the gamble would be more likely to discourage a chainsplit\n>> >> >> >>> (By\n>> >> >> >>> forcing the acceleration of segwit2x) rather than encourage it\n>> >> >> >>> (by\n>> >> >> >>> strengthening an extreme minority chainsplit that may wind up on\n>> >> >> >>> the\n>> >> >> >>> wrong side of two segwit-activated chains).  As it stands now,\n>> >> >> >>> this\n>> >> >> >>> seems like a very dangerous attempt to compromise with a small\n>> >> >> >>> but\n>> >> >> >>> vocal group that are the ones creating the threat to begin with.\n>> >> >> >>>\n>> >> >> >>> Jared\n>> >> >> >>>\n>> >> >> >>> On Tue, Jun 6, 2017 at 5:56 PM, James Hilliard via bitcoin-dev\n>> >> >> >>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >> >> >>>> Due to the proposed calendar(https://segwit2x.github.io/) for\n>> >> >> >>>> the\n>> >> >> >>>> SegWit2x agreement being too slow to activate SegWit mandatory\n>> >> >> >>>> signalling ahead of BIP148 using BIP91 I would like to propose\n>> >> >> >>>> another\n>> >> >> >>>> option that miners can use to prevent a chain split ahead of\n>> >> >> >>>> the\n>> >> >> >>>> Aug\n>> >> >> >>>> 1st BIP148 activation date.\n>> >> >> >>>>\n>> >> >> >>>> The splitprotection soft fork is essentially BIP91 but using\n>> >> >> >>>> BIP8\n>> >> >> >>>> instead of BIP9 with a lower activation threshold and immediate\n>> >> >> >>>> mandatory signalling lock-in. This allows for a majority of\n>> >> >> >>>> miners\n>> >> >> >>>> to\n>> >> >> >>>> activate mandatory SegWit signalling and prevent a potential\n>> >> >> >>>> chain\n>> >> >> >>>> split ahead of BIP148 activation.\n>> >> >> >>>>\n>> >> >> >>>> This BIP allows for miners to respond to market forces quickly\n>> >> >> >>>> ahead\n>> >> >> >>>> of BIP148 activation by signalling for splitprotection. Any\n>> >> >> >>>> miners\n>> >> >> >>>> already running BIP148 should be encouraged to use\n>> >> >> >>>> splitprotection.\n>> >> >> >>>>\n>> >> >> >>>> <pre>\n>> >> >> >>>>   BIP: splitprotection\n>> >> >> >>>>   Layer: Consensus (soft fork)\n>> >> >> >>>>   Title: User Activated Soft Fork Split Protection\n>> >> >> >>>>   Author: James Hilliard <james.hilliard1 at gmail.com>\n>> >> >> >>>>   Comments-Summary: No comments yet.\n>> >> >> >>>>   Comments-URI:\n>> >> >> >>>>   Status: Draft\n>> >> >> >>>>   Type: Standards Track\n>> >> >> >>>>   Created: 2017-05-22\n>> >> >> >>>>   License: BSD-3-Clause\n>> >> >> >>>>            CC0-1.0\n>> >> >> >>>> </pre>\n>> >> >> >>>>\n>> >> >> >>>> ==Abstract==\n>> >> >> >>>>\n>> >> >> >>>> This document specifies a coordination mechanism for a simple\n>> >> >> >>>> majority\n>> >> >> >>>> of miners to prevent a chain split ahead of BIP148 activation.\n>> >> >> >>>>\n>> >> >> >>>> ==Definitions==\n>> >> >> >>>>\n>> >> >> >>>> \"existing segwit deployment\" refer to the BIP9 \"segwit\"\n>> >> >> >>>> deployment\n>> >> >> >>>> using bit 1, between November 15th 2016 and November 15th 2017\n>> >> >> >>>> to\n>> >> >> >>>> activate BIP141, BIP143 and BIP147.\n>> >> >> >>>>\n>> >> >> >>>> ==Motivation==\n>> >> >> >>>>\n>> >> >> >>>> The biggest risk of BIP148 is an extended chain split, this BIP\n>> >> >> >>>> provides a way for a simple majority of miners to eliminate\n>> >> >> >>>> that\n>> >> >> >>>> risk.\n>> >> >> >>>>\n>> >> >> >>>> This BIP provides a way for a simple majority of miners to\n>> >> >> >>>> coordinate\n>> >> >> >>>> activation of the existing segwit deployment with less than 95%\n>> >> >> >>>> hashpower before BIP148 activation. Due to time constraints\n>> >> >> >>>> unless\n>> >> >> >>>> immediately deployed BIP91 will likely not be able to enforce\n>> >> >> >>>> mandatory signalling of segwit before the Aug 1st activation of\n>> >> >> >>>> BIP148. This BIP provides a method for rapid miner activation\n>> >> >> >>>> of\n>> >> >> >>>> SegWit mandatory signalling ahead of the BIP148 activation\n>> >> >> >>>> date.\n>> >> >> >>>> Since\n>> >> >> >>>> the primary goal of this BIP is to reduce the chance of an\n>> >> >> >>>> extended\n>> >> >> >>>> chain split as much as possible we activate using a simple\n>> >> >> >>>> miner\n>> >> >> >>>> majority of 65% over a 504 block interval rather than a higher\n>> >> >> >>>> percentage. This BIP also allows miners to signal their\n>> >> >> >>>> intention\n>> >> >> >>>> to\n>> >> >> >>>> run BIP148 in order to prevent a chain split.\n>> >> >> >>>>\n>> >> >> >>>> ==Specification==\n>> >> >> >>>>\n>> >> >> >>>> While this BIP is active, all blocks must set the nVersion\n>> >> >> >>>> header\n>> >> >> >>>> top\n>> >> >> >>>> 3 bits to 001 together with bit field (1<<1) (according to the\n>> >> >> >>>> existing segwit deployment). Blocks that do not signal as\n>> >> >> >>>> required\n>> >> >> >>>> will be rejected.\n>> >> >> >>>>\n>> >> >> >>>> ==Deployment==\n>> >> >> >>>>\n>> >> >> >>>> This BIP will be deployed by \"version bits\" with a 65%(this can\n>> >> >> >>>> be\n>> >> >> >>>> adjusted if desired) activation threshold BIP9 with the name\n>> >> >> >>>> \"splitprotecion\" and using bit 2.\n>> >> >> >>>>\n>> >> >> >>>> This BIP starts immediately and is a BIP8 style soft fork since\n>> >> >> >>>> mandatory signalling will start on midnight August 1st 2017\n>> >> >> >>>> (epoch\n>> >> >> >>>> time 1501545600) regardless of whether or not this BIP has\n>> >> >> >>>> reached\n>> >> >> >>>> its\n>> >> >> >>>> own signalling threshold. This BIP will cease to be active when\n>> >> >> >>>> segwit\n>> >> >> >>>> is locked-in.\n>> >> >> >>>>\n>> >> >> >>>> === Reference implementation ===\n>> >> >> >>>>\n>> >> >> >>>> <pre>\n>> >> >> >>>> // Check if Segregated Witness is Locked In\n>> >> >> >>>> bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n>> >> >> >>>> Consensus::Params& params)\n>> >> >> >>>> {\n>> >> >> >>>>     LOCK(cs_main);\n>> >> >> >>>>     return (VersionBitsState(pindexPrev, params,\n>> >> >> >>>> Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n>> >> >> >>>> THRESHOLD_LOCKED_IN);\n>> >> >> >>>> }\n>> >> >> >>>>\n>> >> >> >>>> // SPLITPROTECTION mandatory segwit signalling.\n>> >> >> >>>> if ( VersionBitsState(pindex->pprev,\n>> >> >> >>>> chainparams.GetConsensus(),\n>> >> >> >>>> Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n>> >> >> >>>> THRESHOLD_LOCKED_IN &&\n>> >> >> >>>>      !IsWitnessLockedIn(pindex->pprev,\n>> >> >> >>>> chainparams.GetConsensus())\n>> >> >> >>>> &&\n>> >> >> >>>> // Segwit is not locked in\n>> >> >> >>>>      !IsWitnessEnabled(pindex->pprev,\n>> >> >> >>>> chainparams.GetConsensus())\n>> >> >> >>>> )\n>> >> >> >>>> //\n>> >> >> >>>> and is not active.\n>> >> >> >>>> {\n>> >> >> >>>>     bool fVersionBits = (pindex->nVersion &\n>> >> >> >>>> VERSIONBITS_TOP_MASK)\n>> >> >> >>>> ==\n>> >> >> >>>> VERSIONBITS_TOP_BITS;\n>> >> >> >>>>     bool fSegbit = (pindex->nVersion &\n>> >> >> >>>> VersionBitsMask(chainparams.GetConsensus(),\n>> >> >> >>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>> >> >> >>>>     if (!(fVersionBits && fSegbit)) {\n>> >> >> >>>>         return state.DoS(0, error(\"ConnectBlock(): relayed\n>> >> >> >>>> block\n>> >> >> >>>> must\n>> >> >> >>>> signal for segwit, please upgrade\"), REJECT_INVALID,\n>> >> >> >>>> \"bad-no-segwit\");\n>> >> >> >>>>     }\n>> >> >> >>>> }\n>> >> >> >>>>\n>> >> >> >>>> // BIP148 mandatory segwit signalling.\n>> >> >> >>>> int64_t nMedianTimePast = pindex->GetMedianTimePast();\n>> >> >> >>>> if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017\n>> >> >> >>>> 00:00:00\n>> >> >> >>>> UTC\n>> >> >> >>>>      (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017\n>> >> >> >>>> 00:00:00\n>> >> >> >>>> UTC\n>> >> >> >>>>      (!IsWitnessLockedIn(pindex->pprev,\n>> >> >> >>>> chainparams.GetConsensus())\n>> >> >> >>>> &&\n>> >> >> >>>>  // Segwit is not locked in\n>> >> >> >>>>       !IsWitnessEnabled(pindex->pprev,\n>> >> >> >>>> chainparams.GetConsensus())) )\n>> >> >> >>>>  // and is not active.\n>> >> >> >>>> {\n>> >> >> >>>>     bool fVersionBits = (pindex->nVersion &\n>> >> >> >>>> VERSIONBITS_TOP_MASK)\n>> >> >> >>>> ==\n>> >> >> >>>> VERSIONBITS_TOP_BITS;\n>> >> >> >>>>     bool fSegbit = (pindex->nVersion &\n>> >> >> >>>> VersionBitsMask(chainparams.GetConsensus(),\n>> >> >> >>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>> >> >> >>>>     if (!(fVersionBits && fSegbit)) {\n>> >> >> >>>>         return state.DoS(0, error(\"ConnectBlock(): relayed\n>> >> >> >>>> block\n>> >> >> >>>> must\n>> >> >> >>>> signal for segwit, please upgrade\"), REJECT_INVALID,\n>> >> >> >>>> \"bad-no-segwit\");\n>> >> >> >>>>     }\n>> >> >> >>>> }\n>> >> >> >>>> </pre>\n>> >> >> >>>>\n>> >> >> >>>>\n>> >> >> >>>>\n>> >> >> >>>>\n>> >> >> >>>> https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1\n>> >> >> >>>>\n>> >> >> >>>> ==Backwards Compatibility==\n>> >> >> >>>>\n>> >> >> >>>> This deployment is compatible with the existing \"segwit\" bit 1\n>> >> >> >>>> deployment scheduled between midnight November 15th, 2016 and\n>> >> >> >>>> midnight\n>> >> >> >>>> November 15th, 2017. This deployment is also compatible with\n>> >> >> >>>> the\n>> >> >> >>>> existing BIP148 deployment. This BIP is compatible with BIP91\n>> >> >> >>>> only\n>> >> >> >>>> if\n>> >> >> >>>> BIP91 activates before it and before BIP148. Miners will need\n>> >> >> >>>> to\n>> >> >> >>>> upgrade their nodes to support splitprotection otherwise they\n>> >> >> >>>> may\n>> >> >> >>>> build on top of an invalid block. While this bip is active\n>> >> >> >>>> users\n>> >> >> >>>> should either upgrade to splitprotection or wait for additional\n>> >> >> >>>> confirmations when accepting payments.\n>> >> >> >>>>\n>> >> >> >>>> ==Rationale==\n>> >> >> >>>>\n>> >> >> >>>> Historically we have used IsSuperMajority() to activate soft\n>> >> >> >>>> forks\n>> >> >> >>>> such as BIP66 which has a mandatory signalling requirement for\n>> >> >> >>>> miners\n>> >> >> >>>> once activated, this ensures that miners are aware of new rules\n>> >> >> >>>> being\n>> >> >> >>>> enforced. This technique can be leveraged to lower the\n>> >> >> >>>> signalling\n>> >> >> >>>> threshold of a soft fork while it is in the process of being\n>> >> >> >>>> deployed\n>> >> >> >>>> in a backwards compatible way. We also use a BIP8 style timeout\n>> >> >> >>>> to\n>> >> >> >>>> ensure that this BIP is compatible with BIP148 and that BIP148\n>> >> >> >>>> compatible mandatory signalling activates regardless of miner\n>> >> >> >>>> signalling levels.\n>> >> >> >>>>\n>> >> >> >>>> By orphaning non-signalling blocks during the BIP9 bit 1\n>> >> >> >>>> \"segwit\"\n>> >> >> >>>> deployment, this BIP can cause the existing \"segwit\" deployment\n>> >> >> >>>> to\n>> >> >> >>>> activate without needing to release a new deployment. As we\n>> >> >> >>>> approach\n>> >> >> >>>> BIP148 activation it may be desirable for a majority of miners\n>> >> >> >>>> to\n>> >> >> >>>> have\n>> >> >> >>>> a method that will ensure that there is no chain split.\n>> >> >> >>>>\n>> >> >> >>>> ==References==\n>> >> >> >>>>\n>> >> >> >>>>\n>> >> >> >>>>\n>> >> >> >>>>\n>> >> >> >>>> *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html\n>> >> >> >>>> Mailing list discussion]\n>> >> >> >>>>\n>> >> >> >>>>\n>> >> >> >>>>\n>> >> >> >>>> *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\n>> >> >> >>>> P2SH flag day activation]\n>> >> >> >>>> *[[bip-0009.mediawiki|BIP9 Version bits with timeout and\n>> >> >> >>>> delay]]\n>> >> >> >>>> *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n>> >> >> >>>> *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n>> >> >> >>>> *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus\n>> >> >> >>>> layer)]]\n>> >> >> >>>> *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification\n>> >> >> >>>> for\n>> >> >> >>>> Version 0 Witness Program]]\n>> >> >> >>>> *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element\n>> >> >> >>>> malleability]]\n>> >> >> >>>> *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit\n>> >> >> >>>> deployment]]\n>> >> >> >>>> *[[bip-0149.mediawiki|BIP149 Segregated Witness (second\n>> >> >> >>>> deployment)]]\n>> >> >> >>>> *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit\n>> >> >> >>>> benefits]\n>> >> >> >>>>\n>> >> >> >>>> ==Copyright==\n>> >> >> >>>>\n>> >> >> >>>> This document is dual licensed as BSD 3-clause, and Creative\n>> >> >> >>>> Commons\n>> >> >> >>>> CC0 1.0 Universal.\n>> >> >> >>>> _______________________________________________\n>> >> >> >>>> bitcoin-dev mailing list\n>> >> >> >>>> bitcoin-dev at lists.linuxfoundation.org\n>> >> >> >>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >> >\n>> >> >\n>> >\n>> >\n>\n>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-06-08T01:01:38",
                "message_text_only": "> If you're looking for hard numbers at this point you aren't likely to\n> find them because not everything is easy to measure directly.\n\nThere's quite a few hard numbers that are available that are of varying\nuse.  Mining commitments are a major one because of the stalled chain\nproblem.  Node signaling represents some data because while it can be\nsybiled, they are cheap but not free to run.  Upvotes and comments on\nreddit and other forums might be of some use, but there's not a clear\nsupermajority driving every pro-uasf comment up and every anti-uasf comment\ndown, and Reddit obscures the upvote/downvotes pretty well.  It could be a\ngleaned datapoint if someone pulled the comments, manually evaluated their\nlikely position on the matter(neutrally), and then reported on it, but that\nis a lot of work and I think it is unlikely to show anything except how\ndeep the rifts in the community are.  Of the two main statistics available,\nthey do not support the idea that UASF has any chance of success.  Of the\nthird, it at least shows that there is deep opposition that is nearly equal\nto the support amongst the forums most likely to support UASF.\n\nSo I'll take anything, any statistic that actually indicates UASF has a\nchance in hell of succeeding, at least that would be worth something.\nOtherwise it's all much ado about nothing.\n\n> We'll know more as we get closer to BIP148 activation by looking at the\nmarkets.\n\nWhat markets?  Where?  How would we know?\n\n> > It doesn't have those issues during the segwit activation, ergo there\nis no\n> > reason for segwit-activation problems to take priority over the very\nreal\n> > hardfork activation problems.\n\n> And yet segwit2x is insisting on activation bundling which needlessly\n> complicates and delays SegWit activation.\n\nBecause it is not segwit that has appears to have the supermajority\nconsensus.\n\n> Sure, technical changes can be made for political reasons, we should\n> at least be clear in regards to why particular decisions are being\n> made. I'm supportive of a hard fork for technical reasons but not\n> political ones as are many others.\n\nWell, then we have a point of agreement at least. :)\n\n\nOn Wed, Jun 7, 2017 at 5:44 PM, James Hilliard <james.hilliard1 at gmail.com>\nwrote:\n\n> On Wed, Jun 7, 2017 at 7:20 PM, Jared Lee Richardson <jaredr26 at gmail.com>\n> wrote:\n> >> Not really, there are a few relatively simple techniques such as RBF\n> >> which can be leveraged to get confirmations on on-side before double\n> >> spending on another. Once a transaction is confirmed on the non-BIP148\n> >> chain then the high fee transactions can be made on only the BIP148\n> >> side of the split using RBF.\n> >\n> > Ah, so the BIP148 client handles this on behalf of its less technical\n> users\n> > on their behalf then, yes?\n> It's not automatic but exchanges will likely handle it on behalf of\n> the less technical users. BIP148 is not intended to cause a permanent\n> chain split however which is why this was not built in.\n> >\n> >>  Exchanges will likely do this splitting\n> >> automatically for uses as well.\n> >\n> > Sure, Exchanges are going to dedicate hundreds of developer hours and\n> > thousands of support hours to support something that they've repeatedly\n> told\n> > everyone must have replay protection to be supported.  They're going to\n> do\n> > this because 8% of nodes and <0.5% of miners say they'll be rewarded\n> richly.\n> > Somehow I find that hard to believe.\n> They are very likely to, most have contingency plans for this sort of\n> thing ready to go due to their experience with the ETH/ETC fork.\n> >\n> > Besides, if the BIP148 client does it for them, they wouldn't have to\n> > dedicate those hundreds of developer hours.  Right?\n> >\n> > I can't imagine how this logic is getting you from where the real data\n> is to\n> > the assumption that an economic majority will push BIP148 into being\n> such a\n> > more valuable chain that switching chains will be attractive to enough\n> > miners.  There's got to be some real data that convinces you of this\n> > somewhere?\n> If you're looking for hard numbers at this point you aren't likely to\n> find them because not everything is easy to measure directly.\n> >\n> >> Both are issues, but wipeout risk is different, the ETH/ETC split for\n> >> example didn't have any wipeout risk for either side the same is not\n> >> true for BIP148(and it is the non-BIP148 side that carries the risk of\n> >> chain wipeout).\n> >\n> > Wipeout risk is a serious issue when 45% of the miners support one chain\n> and\n> > 55% support the other chain.  Segwit doesn't even have 35% of the miners;\n> > There's no data or statements anywhere that indicate that UASF is going\n> to\n> > reach the point where wipeout risk is even comparable to abandonment\n> risk.\n> It's mostly economic support that will dictate this, not hashpower\n> support since the hashpower follows the economy.\n> >\n> >> Yes, miners aren't likely to waste operational mining costs, that's\n> >> ultimately why miners would follow the BIP148 side of the chain\n> >> assuming it has sufficient economic support or if it's more profitable\n> >> to mine.\n> >\n> > To convince miners you would have to have some data SOMEWHERE supporting\n> the\n> > economic majority argument.  Is there any such data?\n> We'll know more as we get closer to BIP148 activation by looking at the\n> markets.\n> >\n> >> segwit2x has more issues since the HF part requires users to reach\n> >> consensus\n> >\n> > It doesn't have those issues during the segwit activation, ergo there is\n> no\n> > reason for segwit-activation problems to take priority over the very real\n> > hardfork activation problems.\n> And yet segwit2x is insisting on activation bundling which needlessly\n> complicates and delays SegWit activation.\n> >\n> >> That's a political reason not a technical reason.\n> >\n> > In a consensus system they are frequently the same, unfortunately.\n> > Technical awesomeness without people agreeing = zero consensus.  So the\n> > choice is either to \"technically\" break the consensus without a\n> > super-majority and see what happens, or to go with the choice that has\n> real\n> > data showing the most consensus and hope the tiny minority chain actually\n> > dies off.\n> Sure, technical changes can be made for political reasons, we should\n> at least be clear in regards to why particular decisions are being\n> made. I'm supportive of a hard fork for technical reasons but not\n> political ones as are many others.\n> >\n> > Jared\n> >\n> > On Wed, Jun 7, 2017 at 5:01 PM, James Hilliard <\n> james.hilliard1 at gmail.com>\n> > wrote:\n> >>\n> >> On Wed, Jun 7, 2017 at 6:43 PM, Jared Lee Richardson <\n> jaredr26 at gmail.com>\n> >> wrote:\n> >> >> BIP148 however is a consensus change that can\n> >> >> be rectified if it gets more work, this would act as an additional\n> >> >> incentive for mine the BIP148 side since there would be no wipeout\n> >> >> risk there.\n> >> >\n> >> > This statement is misleading.  Wipeout risks don't apply to any\n> >> > consensus\n> >> > changes; It is a consensus change, it can only be abandoned.  The\n> BIP148\n> >> > chain carries just as many risks of being abandoned or even more with\n> >> > segwit2x on the table.  No miner would consider \"wipeout risk\" an\n> >> > advantage\n> >> > when the real threat is chain abandonment.\n> >> Both are issues, but wipeout risk is different, the ETH/ETC split for\n> >> example didn't have any wipeout risk for either side the same is not\n> >> true for BIP148(and it is the non-BIP148 side that carries the risk of\n> >> chain wipeout).\n> >> >\n> >> >> Higher transaction fees on a minority chain can compensate miners for\n> >> >> a lower price which would likely be enough to get the BIP148 chain to\n> >> >> a difficulty reduction.\n> >> >\n> >> > Higher transaction fees suffers the same problem as exchange support\n> >> > does.\n> >> > Without replay protection, it is very difficult for any average user\n> to\n> >> > force transactions onto one chain or the other.  Thus, without replay\n> >> > protection, the UASF chain is unlikely to develop any viable fee\n> market;\n> >> > Its\n> >> > few miners 99% of the time will simply choose from the highest fees\n> that\n> >> > were already available to the other chain, which is basically no\n> >> > advantage\n> >> > at all.\n> >> Not really, there are a few relatively simple techniques such as RBF\n> >> which can be leveraged to get confirmations on on-side before double\n> >> spending on another. Once a transaction is confirmed on the non-BIP148\n> >> chain then the high fee transactions can be made on only the BIP148\n> >> side of the split using RBF. Exchanges will likely do this splitting\n> >> automatically for uses as well.\n> >> >\n> >> >>  ETC replay protection was done after the fork on an as\n> >> >> needed basis(there are multiple reliable techniques that can be used\n> >> >> to split UTXO's), the same can happen with BIP148 and it is easier to\n> >> >> do with Bitcoin than with the ETH/ETC split IMO.\n> >> >\n> >> > ETC replay protection was added because they were already a hardfork\n> and\n> >> > without it they would not have had a viable chain.  BIP148 is not\n> >> > supposed\n> >> > to be a hardfork, and if it added replay protection to remain viable\n> it\n> >> > would lose the frequently touted \"wipeout advantage\" as well as the\n> >> > ability\n> >> > to call itself a softfork.  And are you seriously suggesting that what\n> >> > happened with ETC and ETH is a desirable and good situation for\n> Bitcoin,\n> >> > and\n> >> > that UASF is ETC?\n> >> There wasn't proper replay protection at split time for ETH/ETC since\n> >> normal transactions would get executed on both sides originally,\n> >> however replay protection was added by wallets(mainly using splitting\n> >> contracts). I don't think a split is desirable however, which is why\n> >> I've proposed this BIP.\n> >> >\n> >> >> A big reason BIP148 still has support is because up until SegWit\n> >> >> actually activates there's no guarantee segwit2mb will actually have\n> >> >> the necessary support to activate SegWit.\n> >> >\n> >> > For a miners blowing through six million dollars a day in mining\n> >> > operational\n> >> > costs, that's a pretty crappy reason.  Serious miners can't afford to\n> >> > prop\n> >> > up a non-viable chain based on philosophy or maybes.  BIP148 is based\n> >> > entirely upon people who aren't putting anything on the line trying to\n> >> > convince others to take the huge risks for them.  With deceptively\n> >> > fallacious logic, in my opinion.\n> >> Yes, miners aren't likely to waste operational mining costs, that's\n> >> ultimately why miners would follow the BIP148 side of the chain\n> >> assuming it has sufficient economic support or if it's more profitable\n> >> to mine.\n> >> >\n> >> > Even segwit2x is based on the assumption that all miners can reach\n> >> > consensus.  Break that assumption and segwit2x will have the same\n> >> > problems\n> >> > as UASF.\n> >> segwit2x has more issues since the HF part requires users to reach\n> >> consensus\n> >> >\n> >> >> This is largely an issue due to segwit2x's bundling, if the SW and HF\n> >> >> part of segwit2x were unbundled then there would be no reason to\n> delay\n> >> >> BIP91 activation\n> >> >\n> >> > They are bundled.  Segwit alone doesn't have the desired overwhelming\n> >> > consensus, unless core wishes to fork 71% to 29%, and maybe not even\n> >> > that\n> >> > high.  That's the technical reason, and they can't be unbundled\n> without\n> >> > breaking that consensus.\n> >> That's a political reason not a technical reason.\n> >> >\n> >> > Jared\n> >> >\n> >> >\n> >> > On Wed, Jun 7, 2017 at 4:11 PM, James Hilliard\n> >> > <james.hilliard1 at gmail.com>\n> >> > wrote:\n> >> >>\n> >> >> On Wed, Jun 7, 2017 at 5:53 PM, Jared Lee Richardson\n> >> >> <jaredr26 at gmail.com>\n> >> >> wrote:\n> >> >> >> There are 2 primary factors involved here, economic support and\n> >> >> > hashpower either of which is enough to make a permanent chain split\n> >> >> > unlikely, miners will mine whichever chain is most profitable(see\n> >> >> > ETH/ETC hashpower profitability equilibrium for an example of how\n> >> >> > this\n> >> >> > works in practice)\n> >> >> >\n> >> >> > That's not a comparable example.  ETC did not face potentially\n> years\n> >> >> > of\n> >> >> > slow\n> >> >> > blocktimes before it normalized, whereas BIP148 is on track to do\n> >> >> > exactly\n> >> >> > that.  Moreover, ETC represented a fundamental break from the\n> >> >> > majority\n> >> >> > consensus that could not be rectified, whereas BIP148 represents\n> only\n> >> >> > a\n> >> >> > minority attempt to accelerate something that an overwhelming\n> >> >> > majority\n> >> >> > of\n> >> >> > miners have already agreed to activate under segwit2x.  Lastly ETC\n> >> >> > was\n> >> >> > required to add replay protection, just like any minority fork\n> >> >> > proposed\n> >> >> > by\n> >> >> > any crypto-currency has been, something that BIP148 both lacks and\n> >> >> > refuses\n> >> >> > to add or even acknowledge the necessity of.  Without replay\n> >> >> > protection,\n> >> >> > ETC\n> >> >> > could not have become profitable enough to be a viable minority\n> >> >> > chain.\n> >> >> > If\n> >> >> > BIP148's chain is not the majority chain and it does not have\n> replay\n> >> >> > protection, it will face the same problems, but that required\n> replay\n> >> >> > protection will turn it into a hardfork.  This will be a very bad\n> >> >> > position\n> >> >> > for UASF supporters to find themselves in - Either hardfork and\n> hope\n> >> >> > the\n> >> >> > price is higher and the majority converts, or die as the minority\n> >> >> > chain\n> >> >> > with\n> >> >> > no reliable methods of economic conversion.\n> >> >> Higher transaction fees on a minority chain can compensate miners for\n> >> >> a lower price which would likely be enough to get the BIP148 chain to\n> >> >> a difficulty reduction. BIP148 however is a consensus change that can\n> >> >> be rectified if it gets more work, this would act as an additional\n> >> >> incentive for mine the BIP148 side since there would be no wipeout\n> >> >> risk there. ETC replay protection was done after the fork on an as\n> >> >> needed basis(there are multiple reliable techniques that can be used\n> >> >> to split UTXO's), the same can happen with BIP148 and it is easier to\n> >> >> do with Bitcoin than with the ETH/ETC split IMO.\n> >> >> >\n> >> >> > I believe, but don't have data to back this, that most of the\n> BIP148\n> >> >> > insistence comes not from a legitimate attempt to gain consensus\n> (or\n> >> >> > else\n> >> >> > they would either outright oppose segwit2mb for its hardfork, or\n> they\n> >> >> > would\n> >> >> > outright support it), but rather from an attempt for BIP148\n> >> >> > supporters\n> >> >> > to\n> >> >> > save face for BIP148 being a failure.  If I'm correct, that's a\n> >> >> > terrible\n> >> >> > and\n> >> >> > highly non-technical reason for segwit2mb to bend over backwards\n> >> >> > attempting\n> >> >> > to support BIP148's attempt to save face.\n> >> >> A big reason BIP148 still has support is because up until SegWit\n> >> >> actually activates there's no guarantee segwit2mb will actually have\n> >> >> the necessary support to activate SegWit.\n> >> >> >\n> >> >> >> The main issue is just one of activation timelines, BIP91 as\n> >> >> > is takes too long to activate unless started ahead of the existing\n> >> >> > segwit2x schedule and it's unlikely that BIP148 will get pushed\n> back\n> >> >> > any further.\n> >> >> >\n> >> >> > Even if I'm not correct on the above, I and others find it hard to\n> >> >> > accept\n> >> >> > that this timeline conflict is segwit2x's fault.  Segwit2x has both\n> >> >> > some\n> >> >> > flexibility and broad support that crosses contentious pro-segwit\n> and\n> >> >> > pro-blocksize-increase divisions that have existed for two years.\n> >> >> > BIP148 is\n> >> >> > attempting to hold segwit2x's timelines and code hostage by\n> claiming\n> >> >> > inflexibility and claiming broad support, and not only are neither\n> of\n> >> >> > those\n> >> >> > assertions are backed by real data, BIP148 (by being so inflexible)\n> >> >> > is\n> >> >> > pushing a position that deepens the divides between those groups.\n> >> >> > For\n> >> >> > there\n> >> >> > to be technical reasons for compatibility (so long as there are\n> >> >> > tradeoffs,\n> >> >> > which there are), there needs to be hard data showing that BIP148\n> is\n> >> >> > a\n> >> >> > viable minority fork that won't simply die off on its own.\n> >> >> This is largely an issue due to segwit2x's bundling, if the SW and HF\n> >> >> part of segwit2x were unbundled then there would be no reason to\n> delay\n> >> >> BIP91 activation, this is especially a problem since it takes a good\n> >> >> deal of time to properly code and test a HF. Unfortunately segwit2x\n> >> >> has been quite inflexible in regards to the bundling aspect even\n> >> >> though there are clearly no technical reasons for it to be there.\n> >> >> >\n> >> >> > Jared\n> >> >> >\n> >> >> >\n> >> >> > On Wed, Jun 7, 2017 at 3:23 PM, James Hilliard\n> >> >> > <james.hilliard1 at gmail.com>\n> >> >> > wrote:\n> >> >> >>\n> >> >> >> On Wed, Jun 7, 2017 at 4:50 PM, Jared Lee Richardson\n> >> >> >> <jaredr26 at gmail.com>\n> >> >> >> wrote:\n> >> >> >> > Could this risk mitigation measure be an optional flag?  And if\n> >> >> >> > so,\n> >> >> >> > could it+BIP91 signal on a different bit than bit4?\n> >> >> >> It's fairly trivial for miners to signal for BIP91 on bit4 or a\n> >> >> >> different bit at the same time as the code is trivial enough to\n> >> >> >> combine\n> >> >> >> >\n> >> >> >> > The reason being, if for some reason the segwit2x activation\n> >> >> >> > cannot\n> >> >> >> > take place in time, it would be preferable for miners to have a\n> >> >> >> > more\n> >> >> >> > standard approach to activation that requires stronger consensus\n> >> >> >> > and\n> >> >> >> > may be more forgiving than BIP148.  If the segwit2x activation\n> is\n> >> >> >> > on\n> >> >> >> > time to cooperate with BIP148, it could be signaled through the\n> >> >> >> > non-bit4 approach and everything could go smoothly.  Thoughts on\n> >> >> >> > that\n> >> >> >> > idea?  It may add more complexity and more developer time, but\n> may\n> >> >> >> > also address your concerns among others.\n> >> >> >> This does give miners another approach to activate segwit ahead of\n> >> >> >> BIP148, if segwit2x activation is rolled out and activated\n> >> >> >> immediately\n> >> >> >> then this would not be needed however based on the timeline here\n> >> >> >> https://segwit2x.github.io/ it would not be possible for BIP91 to\n> >> >> >> enforce mandatory signalling ahead of BIP148. Maybe that can be\n> >> >> >> changed though, I've suggested an immediate rollout with a\n> >> >> >> placeholder\n> >> >> >> client timeout instead of the HF code initially in order to\n> >> >> >> accelerate\n> >> >> >> that.\n> >> >> >> >\n> >> >> >> >> Since this BIP\n> >> >> >> >> only activates with a clear miner majority it should not\n> increase\n> >> >> >> >> the\n> >> >> >> >> risk of an extended chain split.\n> >> >> >> >\n> >> >> >> > The concern I'm raising is more about the psychology of giving\n> >> >> >> > BIP148\n> >> >> >> > a sense of safety that may not be valid.  Without several more\n> >> >> >> > steps,\n> >> >> >> > BIP148 is definitely on track to be a risky chainsplit, and\n> >> >> >> > without\n> >> >> >> > segwit2x it will almost certainly be a small minority chain.\n> >> >> >> > (Unless\n> >> >> >> > the segwit2x compromise falls apart before then, and even in\n> that\n> >> >> >> > case\n> >> >> >> > it is likely to be a minority chain)\n> >> >> >> There are 2 primary factors involved here, economic support and\n> >> >> >> hashpower either of which is enough to make a permanent chain\n> split\n> >> >> >> unlikely, miners will mine whichever chain is most profitable(see\n> >> >> >> ETH/ETC hashpower profitability equilibrium for an example of how\n> >> >> >> this\n> >> >> >> works in practice) however there may be lag time immediately after\n> >> >> >> the\n> >> >> >> split if there is an economic majority but not a hashpower\n> majority\n> >> >> >> initially. This is risk mitigation that only requires miners\n> support\n> >> >> >> however. The main issue is just one of activation timelines, BIP91\n> >> >> >> as\n> >> >> >> is takes too long to activate unless started ahead of the existing\n> >> >> >> segwit2x schedule and it's unlikely that BIP148 will get pushed\n> back\n> >> >> >> any further.\n> >> >> >> >\n> >> >> >> > Jared\n> >> >> >> >\n> >> >> >> >\n> >> >> >> > On Wed, Jun 7, 2017 at 2:42 PM, James Hilliard\n> >> >> >> > <james.hilliard1 at gmail.com> wrote:\n> >> >> >> >> I don't really see how this would increase the likelihood of an\n> >> >> >> >> extended chain split assuming BIP148 is going to have\n> >> >> >> >> non-insignificant economic backing. This BIP is designed to\n> >> >> >> >> provide\n> >> >> >> >> a\n> >> >> >> >> risk mitigation measure that miners can safely deploy. Since\n> this\n> >> >> >> >> BIP\n> >> >> >> >> only activates with a clear miner majority it should not\n> increase\n> >> >> >> >> the\n> >> >> >> >> risk of an extended chain split. At this point it is not\n> >> >> >> >> completely\n> >> >> >> >> clear how much economic support there is for BIP148 but support\n> >> >> >> >> certainly seems to be growing and we have nearly 2 months until\n> >> >> >> >> BIP148\n> >> >> >> >> activation. I intentionally used a shorter activation period\n> here\n> >> >> >> >> so\n> >> >> >> >> that decisions by miners can be made close to the BIP148\n> >> >> >> >> activation\n> >> >> >> >> date.\n> >> >> >> >>\n> >> >> >> >> On Wed, Jun 7, 2017 at 4:29 PM, Jared Lee Richardson\n> >> >> >> >> <jaredr26 at gmail.com> wrote:\n> >> >> >> >>> I think this BIP represents a gamble, and the gamble may not\n> be\n> >> >> >> >>> a\n> >> >> >> >>> good\n> >> >> >> >>> one.  The gamble here is that if the segwit2x changes are\n> rolled\n> >> >> >> >>> out\n> >> >> >> >>> on time, and if the signatories accept the bit4 + bit1\n> signaling\n> >> >> >> >>> proposals within BIP91, the launch will go smoother, as\n> >> >> >> >>> intended.\n> >> >> >> >>> But\n> >> >> >> >>> conversely, if either the segwit2x signatories balk about the\n> >> >> >> >>> Bit1\n> >> >> >> >>> signaling OR if the timelines for segwit2mb are missed even\n> by a\n> >> >> >> >>> bit,\n> >> >> >> >>> it may cause the BIP148 chainsplit to be worse than it would\n> be\n> >> >> >> >>> without.  Given the frequent concerns raised in multiple\n> places\n> >> >> >> >>> about\n> >> >> >> >>> the aggressiveness of the segwit2x timelines, including the\n> >> >> >> >>> non-hardfork timelines, this does not seem like a great gamble\n> >> >> >> >>> to\n> >> >> >> >>> be\n> >> >> >> >>> making.\n> >> >> >> >>>\n> >> >> >> >>> The reason I say it may make the chainsplit be worse than it\n> >> >> >> >>> would\n> >> >> >> >>> otherwise be is that it may provide a false sense of safety\n> for\n> >> >> >> >>> BIP148\n> >> >> >> >>> that currently does not currently exist(and should not, as it\n> is\n> >> >> >> >>> a\n> >> >> >> >>> chainsplit).  That sense of safety would only be legitimate if\n> >> >> >> >>> the\n> >> >> >> >>> segwit2x signatories were on board, and the segwit2x code\n> >> >> >> >>> effectively\n> >> >> >> >>> enforced BIP148 simultaneously, neither of which are\n> guaranteed.\n> >> >> >> >>> If\n> >> >> >> >>> users and more miners had a false sense that BIP148 was *not*\n> >> >> >> >>> going\n> >> >> >> >>> to\n> >> >> >> >>> chainsplit from default / segwit2x, they might not follow the\n> >> >> >> >>> news\n> >> >> >> >>> if\n> >> >> >> >>> suddenly the segwit2x plan were delayed for a few days.  While\n> >> >> >> >>> any\n> >> >> >> >>> additional support would definitely be cheered on by BIP148\n> >> >> >> >>> supporters, the practical reality might be that this proposal\n> >> >> >> >>> would\n> >> >> >> >>> take BIP148 from the \"unlikely to have any viable chain after\n> >> >> >> >>> flag\n> >> >> >> >>> day\n> >> >> >> >>> without segwit2x\" category into the \"small but viable minority\n> >> >> >> >>> chain\"\n> >> >> >> >>> category, and even worse, it might strengthen the chainsplit\n> >> >> >> >>> just\n> >> >> >> >>> days\n> >> >> >> >>> before segwit is activated on BOTH chains, putting the BIP148\n> >> >> >> >>> supporters on the wrong pro-segwit, but still-viable chain.\n> >> >> >> >>>\n> >> >> >> >>> If Core had taken a strong stance to include BIP148 into the\n> >> >> >> >>> client,\n> >> >> >> >>> and if BIP148 support were much much broader, I would feel\n> >> >> >> >>> differently\n> >> >> >> >>> as the gamble would be more likely to discourage a chainsplit\n> >> >> >> >>> (By\n> >> >> >> >>> forcing the acceleration of segwit2x) rather than encourage it\n> >> >> >> >>> (by\n> >> >> >> >>> strengthening an extreme minority chainsplit that may wind up\n> on\n> >> >> >> >>> the\n> >> >> >> >>> wrong side of two segwit-activated chains).  As it stands now,\n> >> >> >> >>> this\n> >> >> >> >>> seems like a very dangerous attempt to compromise with a small\n> >> >> >> >>> but\n> >> >> >> >>> vocal group that are the ones creating the threat to begin\n> with.\n> >> >> >> >>>\n> >> >> >> >>> Jared\n> >> >> >> >>>\n> >> >> >> >>> On Tue, Jun 6, 2017 at 5:56 PM, James Hilliard via bitcoin-dev\n> >> >> >> >>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> >> >> >>>> Due to the proposed calendar(https://segwit2x.github.io/)\n> for\n> >> >> >> >>>> the\n> >> >> >> >>>> SegWit2x agreement being too slow to activate SegWit\n> mandatory\n> >> >> >> >>>> signalling ahead of BIP148 using BIP91 I would like to\n> propose\n> >> >> >> >>>> another\n> >> >> >> >>>> option that miners can use to prevent a chain split ahead of\n> >> >> >> >>>> the\n> >> >> >> >>>> Aug\n> >> >> >> >>>> 1st BIP148 activation date.\n> >> >> >> >>>>\n> >> >> >> >>>> The splitprotection soft fork is essentially BIP91 but using\n> >> >> >> >>>> BIP8\n> >> >> >> >>>> instead of BIP9 with a lower activation threshold and\n> immediate\n> >> >> >> >>>> mandatory signalling lock-in. This allows for a majority of\n> >> >> >> >>>> miners\n> >> >> >> >>>> to\n> >> >> >> >>>> activate mandatory SegWit signalling and prevent a potential\n> >> >> >> >>>> chain\n> >> >> >> >>>> split ahead of BIP148 activation.\n> >> >> >> >>>>\n> >> >> >> >>>> This BIP allows for miners to respond to market forces\n> quickly\n> >> >> >> >>>> ahead\n> >> >> >> >>>> of BIP148 activation by signalling for splitprotection. Any\n> >> >> >> >>>> miners\n> >> >> >> >>>> already running BIP148 should be encouraged to use\n> >> >> >> >>>> splitprotection.\n> >> >> >> >>>>\n> >> >> >> >>>> <pre>\n> >> >> >> >>>>   BIP: splitprotection\n> >> >> >> >>>>   Layer: Consensus (soft fork)\n> >> >> >> >>>>   Title: User Activated Soft Fork Split Protection\n> >> >> >> >>>>   Author: James Hilliard <james.hilliard1 at gmail.com>\n> >> >> >> >>>>   Comments-Summary: No comments yet.\n> >> >> >> >>>>   Comments-URI:\n> >> >> >> >>>>   Status: Draft\n> >> >> >> >>>>   Type: Standards Track\n> >> >> >> >>>>   Created: 2017-05-22\n> >> >> >> >>>>   License: BSD-3-Clause\n> >> >> >> >>>>            CC0-1.0\n> >> >> >> >>>> </pre>\n> >> >> >> >>>>\n> >> >> >> >>>> ==Abstract==\n> >> >> >> >>>>\n> >> >> >> >>>> This document specifies a coordination mechanism for a simple\n> >> >> >> >>>> majority\n> >> >> >> >>>> of miners to prevent a chain split ahead of BIP148\n> activation.\n> >> >> >> >>>>\n> >> >> >> >>>> ==Definitions==\n> >> >> >> >>>>\n> >> >> >> >>>> \"existing segwit deployment\" refer to the BIP9 \"segwit\"\n> >> >> >> >>>> deployment\n> >> >> >> >>>> using bit 1, between November 15th 2016 and November 15th\n> 2017\n> >> >> >> >>>> to\n> >> >> >> >>>> activate BIP141, BIP143 and BIP147.\n> >> >> >> >>>>\n> >> >> >> >>>> ==Motivation==\n> >> >> >> >>>>\n> >> >> >> >>>> The biggest risk of BIP148 is an extended chain split, this\n> BIP\n> >> >> >> >>>> provides a way for a simple majority of miners to eliminate\n> >> >> >> >>>> that\n> >> >> >> >>>> risk.\n> >> >> >> >>>>\n> >> >> >> >>>> This BIP provides a way for a simple majority of miners to\n> >> >> >> >>>> coordinate\n> >> >> >> >>>> activation of the existing segwit deployment with less than\n> 95%\n> >> >> >> >>>> hashpower before BIP148 activation. Due to time constraints\n> >> >> >> >>>> unless\n> >> >> >> >>>> immediately deployed BIP91 will likely not be able to enforce\n> >> >> >> >>>> mandatory signalling of segwit before the Aug 1st activation\n> of\n> >> >> >> >>>> BIP148. This BIP provides a method for rapid miner activation\n> >> >> >> >>>> of\n> >> >> >> >>>> SegWit mandatory signalling ahead of the BIP148 activation\n> >> >> >> >>>> date.\n> >> >> >> >>>> Since\n> >> >> >> >>>> the primary goal of this BIP is to reduce the chance of an\n> >> >> >> >>>> extended\n> >> >> >> >>>> chain split as much as possible we activate using a simple\n> >> >> >> >>>> miner\n> >> >> >> >>>> majority of 65% over a 504 block interval rather than a\n> higher\n> >> >> >> >>>> percentage. This BIP also allows miners to signal their\n> >> >> >> >>>> intention\n> >> >> >> >>>> to\n> >> >> >> >>>> run BIP148 in order to prevent a chain split.\n> >> >> >> >>>>\n> >> >> >> >>>> ==Specification==\n> >> >> >> >>>>\n> >> >> >> >>>> While this BIP is active, all blocks must set the nVersion\n> >> >> >> >>>> header\n> >> >> >> >>>> top\n> >> >> >> >>>> 3 bits to 001 together with bit field (1<<1) (according to\n> the\n> >> >> >> >>>> existing segwit deployment). Blocks that do not signal as\n> >> >> >> >>>> required\n> >> >> >> >>>> will be rejected.\n> >> >> >> >>>>\n> >> >> >> >>>> ==Deployment==\n> >> >> >> >>>>\n> >> >> >> >>>> This BIP will be deployed by \"version bits\" with a 65%(this\n> can\n> >> >> >> >>>> be\n> >> >> >> >>>> adjusted if desired) activation threshold BIP9 with the name\n> >> >> >> >>>> \"splitprotecion\" and using bit 2.\n> >> >> >> >>>>\n> >> >> >> >>>> This BIP starts immediately and is a BIP8 style soft fork\n> since\n> >> >> >> >>>> mandatory signalling will start on midnight August 1st 2017\n> >> >> >> >>>> (epoch\n> >> >> >> >>>> time 1501545600) regardless of whether or not this BIP has\n> >> >> >> >>>> reached\n> >> >> >> >>>> its\n> >> >> >> >>>> own signalling threshold. This BIP will cease to be active\n> when\n> >> >> >> >>>> segwit\n> >> >> >> >>>> is locked-in.\n> >> >> >> >>>>\n> >> >> >> >>>> === Reference implementation ===\n> >> >> >> >>>>\n> >> >> >> >>>> <pre>\n> >> >> >> >>>> // Check if Segregated Witness is Locked In\n> >> >> >> >>>> bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n> >> >> >> >>>> Consensus::Params& params)\n> >> >> >> >>>> {\n> >> >> >> >>>>     LOCK(cs_main);\n> >> >> >> >>>>     return (VersionBitsState(pindexPrev, params,\n> >> >> >> >>>> Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n> >> >> >> >>>> THRESHOLD_LOCKED_IN);\n> >> >> >> >>>> }\n> >> >> >> >>>>\n> >> >> >> >>>> // SPLITPROTECTION mandatory segwit signalling.\n> >> >> >> >>>> if ( VersionBitsState(pindex->pprev,\n> >> >> >> >>>> chainparams.GetConsensus(),\n> >> >> >> >>>> Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n> >> >> >> >>>> THRESHOLD_LOCKED_IN &&\n> >> >> >> >>>>      !IsWitnessLockedIn(pindex->pprev,\n> >> >> >> >>>> chainparams.GetConsensus())\n> >> >> >> >>>> &&\n> >> >> >> >>>> // Segwit is not locked in\n> >> >> >> >>>>      !IsWitnessEnabled(pindex->pprev,\n> >> >> >> >>>> chainparams.GetConsensus())\n> >> >> >> >>>> )\n> >> >> >> >>>> //\n> >> >> >> >>>> and is not active.\n> >> >> >> >>>> {\n> >> >> >> >>>>     bool fVersionBits = (pindex->nVersion &\n> >> >> >> >>>> VERSIONBITS_TOP_MASK)\n> >> >> >> >>>> ==\n> >> >> >> >>>> VERSIONBITS_TOP_BITS;\n> >> >> >> >>>>     bool fSegbit = (pindex->nVersion &\n> >> >> >> >>>> VersionBitsMask(chainparams.GetConsensus(),\n> >> >> >> >>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n> >> >> >> >>>>     if (!(fVersionBits && fSegbit)) {\n> >> >> >> >>>>         return state.DoS(0, error(\"ConnectBlock(): relayed\n> >> >> >> >>>> block\n> >> >> >> >>>> must\n> >> >> >> >>>> signal for segwit, please upgrade\"), REJECT_INVALID,\n> >> >> >> >>>> \"bad-no-segwit\");\n> >> >> >> >>>>     }\n> >> >> >> >>>> }\n> >> >> >> >>>>\n> >> >> >> >>>> // BIP148 mandatory segwit signalling.\n> >> >> >> >>>> int64_t nMedianTimePast = pindex->GetMedianTimePast();\n> >> >> >> >>>> if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017\n> >> >> >> >>>> 00:00:00\n> >> >> >> >>>> UTC\n> >> >> >> >>>>      (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017\n> >> >> >> >>>> 00:00:00\n> >> >> >> >>>> UTC\n> >> >> >> >>>>      (!IsWitnessLockedIn(pindex->pprev,\n> >> >> >> >>>> chainparams.GetConsensus())\n> >> >> >> >>>> &&\n> >> >> >> >>>>  // Segwit is not locked in\n> >> >> >> >>>>       !IsWitnessEnabled(pindex->pprev,\n> >> >> >> >>>> chainparams.GetConsensus())) )\n> >> >> >> >>>>  // and is not active.\n> >> >> >> >>>> {\n> >> >> >> >>>>     bool fVersionBits = (pindex->nVersion &\n> >> >> >> >>>> VERSIONBITS_TOP_MASK)\n> >> >> >> >>>> ==\n> >> >> >> >>>> VERSIONBITS_TOP_BITS;\n> >> >> >> >>>>     bool fSegbit = (pindex->nVersion &\n> >> >> >> >>>> VersionBitsMask(chainparams.GetConsensus(),\n> >> >> >> >>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n> >> >> >> >>>>     if (!(fVersionBits && fSegbit)) {\n> >> >> >> >>>>         return state.DoS(0, error(\"ConnectBlock(): relayed\n> >> >> >> >>>> block\n> >> >> >> >>>> must\n> >> >> >> >>>> signal for segwit, please upgrade\"), REJECT_INVALID,\n> >> >> >> >>>> \"bad-no-segwit\");\n> >> >> >> >>>>     }\n> >> >> >> >>>> }\n> >> >> >> >>>> </pre>\n> >> >> >> >>>>\n> >> >> >> >>>>\n> >> >> >> >>>>\n> >> >> >> >>>>\n> >> >> >> >>>> https://github.com/bitcoin/bitcoin/compare/0.14...\n> jameshilliard:splitprotection-v0.14.1\n> >> >> >> >>>>\n> >> >> >> >>>> ==Backwards Compatibility==\n> >> >> >> >>>>\n> >> >> >> >>>> This deployment is compatible with the existing \"segwit\" bit\n> 1\n> >> >> >> >>>> deployment scheduled between midnight November 15th, 2016 and\n> >> >> >> >>>> midnight\n> >> >> >> >>>> November 15th, 2017. This deployment is also compatible with\n> >> >> >> >>>> the\n> >> >> >> >>>> existing BIP148 deployment. This BIP is compatible with BIP91\n> >> >> >> >>>> only\n> >> >> >> >>>> if\n> >> >> >> >>>> BIP91 activates before it and before BIP148. Miners will need\n> >> >> >> >>>> to\n> >> >> >> >>>> upgrade their nodes to support splitprotection otherwise they\n> >> >> >> >>>> may\n> >> >> >> >>>> build on top of an invalid block. While this bip is active\n> >> >> >> >>>> users\n> >> >> >> >>>> should either upgrade to splitprotection or wait for\n> additional\n> >> >> >> >>>> confirmations when accepting payments.\n> >> >> >> >>>>\n> >> >> >> >>>> ==Rationale==\n> >> >> >> >>>>\n> >> >> >> >>>> Historically we have used IsSuperMajority() to activate soft\n> >> >> >> >>>> forks\n> >> >> >> >>>> such as BIP66 which has a mandatory signalling requirement\n> for\n> >> >> >> >>>> miners\n> >> >> >> >>>> once activated, this ensures that miners are aware of new\n> rules\n> >> >> >> >>>> being\n> >> >> >> >>>> enforced. This technique can be leveraged to lower the\n> >> >> >> >>>> signalling\n> >> >> >> >>>> threshold of a soft fork while it is in the process of being\n> >> >> >> >>>> deployed\n> >> >> >> >>>> in a backwards compatible way. We also use a BIP8 style\n> timeout\n> >> >> >> >>>> to\n> >> >> >> >>>> ensure that this BIP is compatible with BIP148 and that\n> BIP148\n> >> >> >> >>>> compatible mandatory signalling activates regardless of miner\n> >> >> >> >>>> signalling levels.\n> >> >> >> >>>>\n> >> >> >> >>>> By orphaning non-signalling blocks during the BIP9 bit 1\n> >> >> >> >>>> \"segwit\"\n> >> >> >> >>>> deployment, this BIP can cause the existing \"segwit\"\n> deployment\n> >> >> >> >>>> to\n> >> >> >> >>>> activate without needing to release a new deployment. As we\n> >> >> >> >>>> approach\n> >> >> >> >>>> BIP148 activation it may be desirable for a majority of\n> miners\n> >> >> >> >>>> to\n> >> >> >> >>>> have\n> >> >> >> >>>> a method that will ensure that there is no chain split.\n> >> >> >> >>>>\n> >> >> >> >>>> ==References==\n> >> >> >> >>>>\n> >> >> >> >>>>\n> >> >> >> >>>>\n> >> >> >> >>>>\n> >> >> >> >>>> *[https://lists.linuxfoundation.org/pipermail/\n> bitcoin-dev/2017-March/013714.html\n> >> >> >> >>>> Mailing list discussion]\n> >> >> >> >>>>\n> >> >> >> >>>>\n> >> >> >> >>>>\n> >> >> >> >>>> *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.\n> cpp#L1281-L1283\n> >> >> >> >>>> P2SH flag day activation]\n> >> >> >> >>>> *[[bip-0009.mediawiki|BIP9 Version bits with timeout and\n> >> >> >> >>>> delay]]\n> >> >> >> >>>> *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n> >> >> >> >>>> *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n> >> >> >> >>>> *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus\n> >> >> >> >>>> layer)]]\n> >> >> >> >>>> *[[bip-0143.mediawiki|BIP143 Transaction Signature\n> Verification\n> >> >> >> >>>> for\n> >> >> >> >>>> Version 0 Witness Program]]\n> >> >> >> >>>> *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element\n> >> >> >> >>>> malleability]]\n> >> >> >> >>>> *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit\n> >> >> >> >>>> deployment]]\n> >> >> >> >>>> *[[bip-0149.mediawiki|BIP149 Segregated Witness (second\n> >> >> >> >>>> deployment)]]\n> >> >> >> >>>> *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/\n> Segwit\n> >> >> >> >>>> benefits]\n> >> >> >> >>>>\n> >> >> >> >>>> ==Copyright==\n> >> >> >> >>>>\n> >> >> >> >>>> This document is dual licensed as BSD 3-clause, and Creative\n> >> >> >> >>>> Commons\n> >> >> >> >>>> CC0 1.0 Universal.\n> >> >> >> >>>> _______________________________________________\n> >> >> >> >>>> bitcoin-dev mailing list\n> >> >> >> >>>> bitcoin-dev at lists.linuxfoundation.org\n> >> >> >> >>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-\n> dev\n> >> >> >\n> >> >> >\n> >> >\n> >> >\n> >\n> >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170607/0f69b0fc/attachment-0001.html>"
            },
            {
                "author": "James Hilliard",
                "date": "2017-06-08T09:20:28",
                "message_text_only": "On Wed, Jun 7, 2017 at 8:01 PM, Jared Lee Richardson <jaredr26 at gmail.com> wrote:\n>> If you're looking for hard numbers at this point you aren't likely to\n>> find them because not everything is easy to measure directly.\n>\n> There's quite a few hard numbers that are available that are of varying use.\n> Mining commitments are a major one because of the stalled chain problem.\n> Node signaling represents some data because while it can be sybiled, they\n> are cheap but not free to run.  Upvotes and comments on reddit and other\n> forums might be of some use, but there's not a clear supermajority driving\n> every pro-uasf comment up and every anti-uasf comment down, and Reddit\n> obscures the upvote/downvotes pretty well.  It could be a gleaned datapoint\n> if someone pulled the comments, manually evaluated their likely position on\n> the matter(neutrally), and then reported on it, but that is a lot of work\n> and I think it is unlikely to show anything except how deep the rifts in the\n> community are.  Of the two main statistics available, they do not support\n> the idea that UASF has any chance of success.  Of the third, it at least\n> shows that there is deep opposition that is nearly equal to the support\n> amongst the forums most likely to support UASF.\nRight, it's not straight forward to measure because the hard numbers\nthat we do have tell an incomplete story. In addition the metric that\nBIP148 primarily depends on(economic support) is much harder to\nmeasure than other metrics such as hashpower support.\n>\n> So I'll take anything, any statistic that actually indicates UASF has a\n> chance in hell of succeeding, at least that would be worth something.\n> Otherwise it's all much ado about nothing.\n>\n>> We'll know more as we get closer to BIP148 activation by looking at the\n>> markets.\n>\n> What markets?  Where?  How would we know?\nThere will likely be some exchanges offering markets for each side of\na potential split separately ahead of BIP148 activation.\n>\n>> > It doesn't have those issues during the segwit activation, ergo there is\n>> > no\n>> > reason for segwit-activation problems to take priority over the very\n>> > real\n>> > hardfork activation problems.\n>\n>> And yet segwit2x is insisting on activation bundling which needlessly\n>> complicates and delays SegWit activation.\n>\n> Because it is not segwit that has appears to have the supermajority\n> consensus.\nI think you've misunderstood the situation, SegWit has widespread\nsupport but has been turned into a political bargaining chip for other\nless desirable changes that do not have widespread support.\n>\n>> Sure, technical changes can be made for political reasons, we should\n>> at least be clear in regards to why particular decisions are being\n>> made. I'm supportive of a hard fork for technical reasons but not\n>> political ones as are many others.\n>\n> Well, then we have a point of agreement at least. :)\n>\n>\n> On Wed, Jun 7, 2017 at 5:44 PM, James Hilliard <james.hilliard1 at gmail.com>\n> wrote:\n>>\n>> On Wed, Jun 7, 2017 at 7:20 PM, Jared Lee Richardson <jaredr26 at gmail.com>\n>> wrote:\n>> >> Not really, there are a few relatively simple techniques such as RBF\n>> >> which can be leveraged to get confirmations on on-side before double\n>> >> spending on another. Once a transaction is confirmed on the non-BIP148\n>> >> chain then the high fee transactions can be made on only the BIP148\n>> >> side of the split using RBF.\n>> >\n>> > Ah, so the BIP148 client handles this on behalf of its less technical\n>> > users\n>> > on their behalf then, yes?\n>> It's not automatic but exchanges will likely handle it on behalf of\n>> the less technical users. BIP148 is not intended to cause a permanent\n>> chain split however which is why this was not built in.\n>> >\n>> >>  Exchanges will likely do this splitting\n>> >> automatically for uses as well.\n>> >\n>> > Sure, Exchanges are going to dedicate hundreds of developer hours and\n>> > thousands of support hours to support something that they've repeatedly\n>> > told\n>> > everyone must have replay protection to be supported.  They're going to\n>> > do\n>> > this because 8% of nodes and <0.5% of miners say they'll be rewarded\n>> > richly.\n>> > Somehow I find that hard to believe.\n>> They are very likely to, most have contingency plans for this sort of\n>> thing ready to go due to their experience with the ETH/ETC fork.\n>> >\n>> > Besides, if the BIP148 client does it for them, they wouldn't have to\n>> > dedicate those hundreds of developer hours.  Right?\n>> >\n>> > I can't imagine how this logic is getting you from where the real data\n>> > is to\n>> > the assumption that an economic majority will push BIP148 into being\n>> > such a\n>> > more valuable chain that switching chains will be attractive to enough\n>> > miners.  There's got to be some real data that convinces you of this\n>> > somewhere?\n>> If you're looking for hard numbers at this point you aren't likely to\n>> find them because not everything is easy to measure directly.\n>> >\n>> >> Both are issues, but wipeout risk is different, the ETH/ETC split for\n>> >> example didn't have any wipeout risk for either side the same is not\n>> >> true for BIP148(and it is the non-BIP148 side that carries the risk of\n>> >> chain wipeout).\n>> >\n>> > Wipeout risk is a serious issue when 45% of the miners support one chain\n>> > and\n>> > 55% support the other chain.  Segwit doesn't even have 35% of the\n>> > miners;\n>> > There's no data or statements anywhere that indicate that UASF is going\n>> > to\n>> > reach the point where wipeout risk is even comparable to abandonment\n>> > risk.\n>> It's mostly economic support that will dictate this, not hashpower\n>> support since the hashpower follows the economy.\n>> >\n>> >> Yes, miners aren't likely to waste operational mining costs, that's\n>> >> ultimately why miners would follow the BIP148 side of the chain\n>> >> assuming it has sufficient economic support or if it's more profitable\n>> >> to mine.\n>> >\n>> > To convince miners you would have to have some data SOMEWHERE supporting\n>> > the\n>> > economic majority argument.  Is there any such data?\n>> We'll know more as we get closer to BIP148 activation by looking at the\n>> markets.\n>> >\n>> >> segwit2x has more issues since the HF part requires users to reach\n>> >> consensus\n>> >\n>> > It doesn't have those issues during the segwit activation, ergo there is\n>> > no\n>> > reason for segwit-activation problems to take priority over the very\n>> > real\n>> > hardfork activation problems.\n>> And yet segwit2x is insisting on activation bundling which needlessly\n>> complicates and delays SegWit activation.\n>> >\n>> >> That's a political reason not a technical reason.\n>> >\n>> > In a consensus system they are frequently the same, unfortunately.\n>> > Technical awesomeness without people agreeing = zero consensus.  So the\n>> > choice is either to \"technically\" break the consensus without a\n>> > super-majority and see what happens, or to go with the choice that has\n>> > real\n>> > data showing the most consensus and hope the tiny minority chain\n>> > actually\n>> > dies off.\n>> Sure, technical changes can be made for political reasons, we should\n>> at least be clear in regards to why particular decisions are being\n>> made. I'm supportive of a hard fork for technical reasons but not\n>> political ones as are many others.\n>> >\n>> > Jared\n>> >\n>> > On Wed, Jun 7, 2017 at 5:01 PM, James Hilliard\n>> > <james.hilliard1 at gmail.com>\n>> > wrote:\n>> >>\n>> >> On Wed, Jun 7, 2017 at 6:43 PM, Jared Lee Richardson\n>> >> <jaredr26 at gmail.com>\n>> >> wrote:\n>> >> >> BIP148 however is a consensus change that can\n>> >> >> be rectified if it gets more work, this would act as an additional\n>> >> >> incentive for mine the BIP148 side since there would be no wipeout\n>> >> >> risk there.\n>> >> >\n>> >> > This statement is misleading.  Wipeout risks don't apply to any\n>> >> > consensus\n>> >> > changes; It is a consensus change, it can only be abandoned.  The\n>> >> > BIP148\n>> >> > chain carries just as many risks of being abandoned or even more with\n>> >> > segwit2x on the table.  No miner would consider \"wipeout risk\" an\n>> >> > advantage\n>> >> > when the real threat is chain abandonment.\n>> >> Both are issues, but wipeout risk is different, the ETH/ETC split for\n>> >> example didn't have any wipeout risk for either side the same is not\n>> >> true for BIP148(and it is the non-BIP148 side that carries the risk of\n>> >> chain wipeout).\n>> >> >\n>> >> >> Higher transaction fees on a minority chain can compensate miners\n>> >> >> for\n>> >> >> a lower price which would likely be enough to get the BIP148 chain\n>> >> >> to\n>> >> >> a difficulty reduction.\n>> >> >\n>> >> > Higher transaction fees suffers the same problem as exchange support\n>> >> > does.\n>> >> > Without replay protection, it is very difficult for any average user\n>> >> > to\n>> >> > force transactions onto one chain or the other.  Thus, without replay\n>> >> > protection, the UASF chain is unlikely to develop any viable fee\n>> >> > market;\n>> >> > Its\n>> >> > few miners 99% of the time will simply choose from the highest fees\n>> >> > that\n>> >> > were already available to the other chain, which is basically no\n>> >> > advantage\n>> >> > at all.\n>> >> Not really, there are a few relatively simple techniques such as RBF\n>> >> which can be leveraged to get confirmations on on-side before double\n>> >> spending on another. Once a transaction is confirmed on the non-BIP148\n>> >> chain then the high fee transactions can be made on only the BIP148\n>> >> side of the split using RBF. Exchanges will likely do this splitting\n>> >> automatically for uses as well.\n>> >> >\n>> >> >>  ETC replay protection was done after the fork on an as\n>> >> >> needed basis(there are multiple reliable techniques that can be used\n>> >> >> to split UTXO's), the same can happen with BIP148 and it is easier\n>> >> >> to\n>> >> >> do with Bitcoin than with the ETH/ETC split IMO.\n>> >> >\n>> >> > ETC replay protection was added because they were already a hardfork\n>> >> > and\n>> >> > without it they would not have had a viable chain.  BIP148 is not\n>> >> > supposed\n>> >> > to be a hardfork, and if it added replay protection to remain viable\n>> >> > it\n>> >> > would lose the frequently touted \"wipeout advantage\" as well as the\n>> >> > ability\n>> >> > to call itself a softfork.  And are you seriously suggesting that\n>> >> > what\n>> >> > happened with ETC and ETH is a desirable and good situation for\n>> >> > Bitcoin,\n>> >> > and\n>> >> > that UASF is ETC?\n>> >> There wasn't proper replay protection at split time for ETH/ETC since\n>> >> normal transactions would get executed on both sides originally,\n>> >> however replay protection was added by wallets(mainly using splitting\n>> >> contracts). I don't think a split is desirable however, which is why\n>> >> I've proposed this BIP.\n>> >> >\n>> >> >> A big reason BIP148 still has support is because up until SegWit\n>> >> >> actually activates there's no guarantee segwit2mb will actually have\n>> >> >> the necessary support to activate SegWit.\n>> >> >\n>> >> > For a miners blowing through six million dollars a day in mining\n>> >> > operational\n>> >> > costs, that's a pretty crappy reason.  Serious miners can't afford to\n>> >> > prop\n>> >> > up a non-viable chain based on philosophy or maybes.  BIP148 is based\n>> >> > entirely upon people who aren't putting anything on the line trying\n>> >> > to\n>> >> > convince others to take the huge risks for them.  With deceptively\n>> >> > fallacious logic, in my opinion.\n>> >> Yes, miners aren't likely to waste operational mining costs, that's\n>> >> ultimately why miners would follow the BIP148 side of the chain\n>> >> assuming it has sufficient economic support or if it's more profitable\n>> >> to mine.\n>> >> >\n>> >> > Even segwit2x is based on the assumption that all miners can reach\n>> >> > consensus.  Break that assumption and segwit2x will have the same\n>> >> > problems\n>> >> > as UASF.\n>> >> segwit2x has more issues since the HF part requires users to reach\n>> >> consensus\n>> >> >\n>> >> >> This is largely an issue due to segwit2x's bundling, if the SW and\n>> >> >> HF\n>> >> >> part of segwit2x were unbundled then there would be no reason to\n>> >> >> delay\n>> >> >> BIP91 activation\n>> >> >\n>> >> > They are bundled.  Segwit alone doesn't have the desired overwhelming\n>> >> > consensus, unless core wishes to fork 71% to 29%, and maybe not even\n>> >> > that\n>> >> > high.  That's the technical reason, and they can't be unbundled\n>> >> > without\n>> >> > breaking that consensus.\n>> >> That's a political reason not a technical reason.\n>> >> >\n>> >> > Jared\n>> >> >\n>> >> >\n>> >> > On Wed, Jun 7, 2017 at 4:11 PM, James Hilliard\n>> >> > <james.hilliard1 at gmail.com>\n>> >> > wrote:\n>> >> >>\n>> >> >> On Wed, Jun 7, 2017 at 5:53 PM, Jared Lee Richardson\n>> >> >> <jaredr26 at gmail.com>\n>> >> >> wrote:\n>> >> >> >> There are 2 primary factors involved here, economic support and\n>> >> >> > hashpower either of which is enough to make a permanent chain\n>> >> >> > split\n>> >> >> > unlikely, miners will mine whichever chain is most profitable(see\n>> >> >> > ETH/ETC hashpower profitability equilibrium for an example of how\n>> >> >> > this\n>> >> >> > works in practice)\n>> >> >> >\n>> >> >> > That's not a comparable example.  ETC did not face potentially\n>> >> >> > years\n>> >> >> > of\n>> >> >> > slow\n>> >> >> > blocktimes before it normalized, whereas BIP148 is on track to do\n>> >> >> > exactly\n>> >> >> > that.  Moreover, ETC represented a fundamental break from the\n>> >> >> > majority\n>> >> >> > consensus that could not be rectified, whereas BIP148 represents\n>> >> >> > only\n>> >> >> > a\n>> >> >> > minority attempt to accelerate something that an overwhelming\n>> >> >> > majority\n>> >> >> > of\n>> >> >> > miners have already agreed to activate under segwit2x.  Lastly ETC\n>> >> >> > was\n>> >> >> > required to add replay protection, just like any minority fork\n>> >> >> > proposed\n>> >> >> > by\n>> >> >> > any crypto-currency has been, something that BIP148 both lacks and\n>> >> >> > refuses\n>> >> >> > to add or even acknowledge the necessity of.  Without replay\n>> >> >> > protection,\n>> >> >> > ETC\n>> >> >> > could not have become profitable enough to be a viable minority\n>> >> >> > chain.\n>> >> >> > If\n>> >> >> > BIP148's chain is not the majority chain and it does not have\n>> >> >> > replay\n>> >> >> > protection, it will face the same problems, but that required\n>> >> >> > replay\n>> >> >> > protection will turn it into a hardfork.  This will be a very bad\n>> >> >> > position\n>> >> >> > for UASF supporters to find themselves in - Either hardfork and\n>> >> >> > hope\n>> >> >> > the\n>> >> >> > price is higher and the majority converts, or die as the minority\n>> >> >> > chain\n>> >> >> > with\n>> >> >> > no reliable methods of economic conversion.\n>> >> >> Higher transaction fees on a minority chain can compensate miners\n>> >> >> for\n>> >> >> a lower price which would likely be enough to get the BIP148 chain\n>> >> >> to\n>> >> >> a difficulty reduction. BIP148 however is a consensus change that\n>> >> >> can\n>> >> >> be rectified if it gets more work, this would act as an additional\n>> >> >> incentive for mine the BIP148 side since there would be no wipeout\n>> >> >> risk there. ETC replay protection was done after the fork on an as\n>> >> >> needed basis(there are multiple reliable techniques that can be used\n>> >> >> to split UTXO's), the same can happen with BIP148 and it is easier\n>> >> >> to\n>> >> >> do with Bitcoin than with the ETH/ETC split IMO.\n>> >> >> >\n>> >> >> > I believe, but don't have data to back this, that most of the\n>> >> >> > BIP148\n>> >> >> > insistence comes not from a legitimate attempt to gain consensus\n>> >> >> > (or\n>> >> >> > else\n>> >> >> > they would either outright oppose segwit2mb for its hardfork, or\n>> >> >> > they\n>> >> >> > would\n>> >> >> > outright support it), but rather from an attempt for BIP148\n>> >> >> > supporters\n>> >> >> > to\n>> >> >> > save face for BIP148 being a failure.  If I'm correct, that's a\n>> >> >> > terrible\n>> >> >> > and\n>> >> >> > highly non-technical reason for segwit2mb to bend over backwards\n>> >> >> > attempting\n>> >> >> > to support BIP148's attempt to save face.\n>> >> >> A big reason BIP148 still has support is because up until SegWit\n>> >> >> actually activates there's no guarantee segwit2mb will actually have\n>> >> >> the necessary support to activate SegWit.\n>> >> >> >\n>> >> >> >> The main issue is just one of activation timelines, BIP91 as\n>> >> >> > is takes too long to activate unless started ahead of the existing\n>> >> >> > segwit2x schedule and it's unlikely that BIP148 will get pushed\n>> >> >> > back\n>> >> >> > any further.\n>> >> >> >\n>> >> >> > Even if I'm not correct on the above, I and others find it hard to\n>> >> >> > accept\n>> >> >> > that this timeline conflict is segwit2x's fault.  Segwit2x has\n>> >> >> > both\n>> >> >> > some\n>> >> >> > flexibility and broad support that crosses contentious pro-segwit\n>> >> >> > and\n>> >> >> > pro-blocksize-increase divisions that have existed for two years.\n>> >> >> > BIP148 is\n>> >> >> > attempting to hold segwit2x's timelines and code hostage by\n>> >> >> > claiming\n>> >> >> > inflexibility and claiming broad support, and not only are neither\n>> >> >> > of\n>> >> >> > those\n>> >> >> > assertions are backed by real data, BIP148 (by being so\n>> >> >> > inflexible)\n>> >> >> > is\n>> >> >> > pushing a position that deepens the divides between those groups.\n>> >> >> > For\n>> >> >> > there\n>> >> >> > to be technical reasons for compatibility (so long as there are\n>> >> >> > tradeoffs,\n>> >> >> > which there are), there needs to be hard data showing that BIP148\n>> >> >> > is\n>> >> >> > a\n>> >> >> > viable minority fork that won't simply die off on its own.\n>> >> >> This is largely an issue due to segwit2x's bundling, if the SW and\n>> >> >> HF\n>> >> >> part of segwit2x were unbundled then there would be no reason to\n>> >> >> delay\n>> >> >> BIP91 activation, this is especially a problem since it takes a good\n>> >> >> deal of time to properly code and test a HF. Unfortunately segwit2x\n>> >> >> has been quite inflexible in regards to the bundling aspect even\n>> >> >> though there are clearly no technical reasons for it to be there.\n>> >> >> >\n>> >> >> > Jared\n>> >> >> >\n>> >> >> >\n>> >> >> > On Wed, Jun 7, 2017 at 3:23 PM, James Hilliard\n>> >> >> > <james.hilliard1 at gmail.com>\n>> >> >> > wrote:\n>> >> >> >>\n>> >> >> >> On Wed, Jun 7, 2017 at 4:50 PM, Jared Lee Richardson\n>> >> >> >> <jaredr26 at gmail.com>\n>> >> >> >> wrote:\n>> >> >> >> > Could this risk mitigation measure be an optional flag?  And if\n>> >> >> >> > so,\n>> >> >> >> > could it+BIP91 signal on a different bit than bit4?\n>> >> >> >> It's fairly trivial for miners to signal for BIP91 on bit4 or a\n>> >> >> >> different bit at the same time as the code is trivial enough to\n>> >> >> >> combine\n>> >> >> >> >\n>> >> >> >> > The reason being, if for some reason the segwit2x activation\n>> >> >> >> > cannot\n>> >> >> >> > take place in time, it would be preferable for miners to have a\n>> >> >> >> > more\n>> >> >> >> > standard approach to activation that requires stronger\n>> >> >> >> > consensus\n>> >> >> >> > and\n>> >> >> >> > may be more forgiving than BIP148.  If the segwit2x activation\n>> >> >> >> > is\n>> >> >> >> > on\n>> >> >> >> > time to cooperate with BIP148, it could be signaled through the\n>> >> >> >> > non-bit4 approach and everything could go smoothly.  Thoughts\n>> >> >> >> > on\n>> >> >> >> > that\n>> >> >> >> > idea?  It may add more complexity and more developer time, but\n>> >> >> >> > may\n>> >> >> >> > also address your concerns among others.\n>> >> >> >> This does give miners another approach to activate segwit ahead\n>> >> >> >> of\n>> >> >> >> BIP148, if segwit2x activation is rolled out and activated\n>> >> >> >> immediately\n>> >> >> >> then this would not be needed however based on the timeline here\n>> >> >> >> https://segwit2x.github.io/ it would not be possible for BIP91 to\n>> >> >> >> enforce mandatory signalling ahead of BIP148. Maybe that can be\n>> >> >> >> changed though, I've suggested an immediate rollout with a\n>> >> >> >> placeholder\n>> >> >> >> client timeout instead of the HF code initially in order to\n>> >> >> >> accelerate\n>> >> >> >> that.\n>> >> >> >> >\n>> >> >> >> >> Since this BIP\n>> >> >> >> >> only activates with a clear miner majority it should not\n>> >> >> >> >> increase\n>> >> >> >> >> the\n>> >> >> >> >> risk of an extended chain split.\n>> >> >> >> >\n>> >> >> >> > The concern I'm raising is more about the psychology of giving\n>> >> >> >> > BIP148\n>> >> >> >> > a sense of safety that may not be valid.  Without several more\n>> >> >> >> > steps,\n>> >> >> >> > BIP148 is definitely on track to be a risky chainsplit, and\n>> >> >> >> > without\n>> >> >> >> > segwit2x it will almost certainly be a small minority chain.\n>> >> >> >> > (Unless\n>> >> >> >> > the segwit2x compromise falls apart before then, and even in\n>> >> >> >> > that\n>> >> >> >> > case\n>> >> >> >> > it is likely to be a minority chain)\n>> >> >> >> There are 2 primary factors involved here, economic support and\n>> >> >> >> hashpower either of which is enough to make a permanent chain\n>> >> >> >> split\n>> >> >> >> unlikely, miners will mine whichever chain is most profitable(see\n>> >> >> >> ETH/ETC hashpower profitability equilibrium for an example of how\n>> >> >> >> this\n>> >> >> >> works in practice) however there may be lag time immediately\n>> >> >> >> after\n>> >> >> >> the\n>> >> >> >> split if there is an economic majority but not a hashpower\n>> >> >> >> majority\n>> >> >> >> initially. This is risk mitigation that only requires miners\n>> >> >> >> support\n>> >> >> >> however. The main issue is just one of activation timelines,\n>> >> >> >> BIP91\n>> >> >> >> as\n>> >> >> >> is takes too long to activate unless started ahead of the\n>> >> >> >> existing\n>> >> >> >> segwit2x schedule and it's unlikely that BIP148 will get pushed\n>> >> >> >> back\n>> >> >> >> any further.\n>> >> >> >> >\n>> >> >> >> > Jared\n>> >> >> >> >\n>> >> >> >> >\n>> >> >> >> > On Wed, Jun 7, 2017 at 2:42 PM, James Hilliard\n>> >> >> >> > <james.hilliard1 at gmail.com> wrote:\n>> >> >> >> >> I don't really see how this would increase the likelihood of\n>> >> >> >> >> an\n>> >> >> >> >> extended chain split assuming BIP148 is going to have\n>> >> >> >> >> non-insignificant economic backing. This BIP is designed to\n>> >> >> >> >> provide\n>> >> >> >> >> a\n>> >> >> >> >> risk mitigation measure that miners can safely deploy. Since\n>> >> >> >> >> this\n>> >> >> >> >> BIP\n>> >> >> >> >> only activates with a clear miner majority it should not\n>> >> >> >> >> increase\n>> >> >> >> >> the\n>> >> >> >> >> risk of an extended chain split. At this point it is not\n>> >> >> >> >> completely\n>> >> >> >> >> clear how much economic support there is for BIP148 but\n>> >> >> >> >> support\n>> >> >> >> >> certainly seems to be growing and we have nearly 2 months\n>> >> >> >> >> until\n>> >> >> >> >> BIP148\n>> >> >> >> >> activation. I intentionally used a shorter activation period\n>> >> >> >> >> here\n>> >> >> >> >> so\n>> >> >> >> >> that decisions by miners can be made close to the BIP148\n>> >> >> >> >> activation\n>> >> >> >> >> date.\n>> >> >> >> >>\n>> >> >> >> >> On Wed, Jun 7, 2017 at 4:29 PM, Jared Lee Richardson\n>> >> >> >> >> <jaredr26 at gmail.com> wrote:\n>> >> >> >> >>> I think this BIP represents a gamble, and the gamble may not\n>> >> >> >> >>> be\n>> >> >> >> >>> a\n>> >> >> >> >>> good\n>> >> >> >> >>> one.  The gamble here is that if the segwit2x changes are\n>> >> >> >> >>> rolled\n>> >> >> >> >>> out\n>> >> >> >> >>> on time, and if the signatories accept the bit4 + bit1\n>> >> >> >> >>> signaling\n>> >> >> >> >>> proposals within BIP91, the launch will go smoother, as\n>> >> >> >> >>> intended.\n>> >> >> >> >>> But\n>> >> >> >> >>> conversely, if either the segwit2x signatories balk about the\n>> >> >> >> >>> Bit1\n>> >> >> >> >>> signaling OR if the timelines for segwit2mb are missed even\n>> >> >> >> >>> by a\n>> >> >> >> >>> bit,\n>> >> >> >> >>> it may cause the BIP148 chainsplit to be worse than it would\n>> >> >> >> >>> be\n>> >> >> >> >>> without.  Given the frequent concerns raised in multiple\n>> >> >> >> >>> places\n>> >> >> >> >>> about\n>> >> >> >> >>> the aggressiveness of the segwit2x timelines, including the\n>> >> >> >> >>> non-hardfork timelines, this does not seem like a great\n>> >> >> >> >>> gamble\n>> >> >> >> >>> to\n>> >> >> >> >>> be\n>> >> >> >> >>> making.\n>> >> >> >> >>>\n>> >> >> >> >>> The reason I say it may make the chainsplit be worse than it\n>> >> >> >> >>> would\n>> >> >> >> >>> otherwise be is that it may provide a false sense of safety\n>> >> >> >> >>> for\n>> >> >> >> >>> BIP148\n>> >> >> >> >>> that currently does not currently exist(and should not, as it\n>> >> >> >> >>> is\n>> >> >> >> >>> a\n>> >> >> >> >>> chainsplit).  That sense of safety would only be legitimate\n>> >> >> >> >>> if\n>> >> >> >> >>> the\n>> >> >> >> >>> segwit2x signatories were on board, and the segwit2x code\n>> >> >> >> >>> effectively\n>> >> >> >> >>> enforced BIP148 simultaneously, neither of which are\n>> >> >> >> >>> guaranteed.\n>> >> >> >> >>> If\n>> >> >> >> >>> users and more miners had a false sense that BIP148 was *not*\n>> >> >> >> >>> going\n>> >> >> >> >>> to\n>> >> >> >> >>> chainsplit from default / segwit2x, they might not follow the\n>> >> >> >> >>> news\n>> >> >> >> >>> if\n>> >> >> >> >>> suddenly the segwit2x plan were delayed for a few days.\n>> >> >> >> >>> While\n>> >> >> >> >>> any\n>> >> >> >> >>> additional support would definitely be cheered on by BIP148\n>> >> >> >> >>> supporters, the practical reality might be that this proposal\n>> >> >> >> >>> would\n>> >> >> >> >>> take BIP148 from the \"unlikely to have any viable chain after\n>> >> >> >> >>> flag\n>> >> >> >> >>> day\n>> >> >> >> >>> without segwit2x\" category into the \"small but viable\n>> >> >> >> >>> minority\n>> >> >> >> >>> chain\"\n>> >> >> >> >>> category, and even worse, it might strengthen the chainsplit\n>> >> >> >> >>> just\n>> >> >> >> >>> days\n>> >> >> >> >>> before segwit is activated on BOTH chains, putting the BIP148\n>> >> >> >> >>> supporters on the wrong pro-segwit, but still-viable chain.\n>> >> >> >> >>>\n>> >> >> >> >>> If Core had taken a strong stance to include BIP148 into the\n>> >> >> >> >>> client,\n>> >> >> >> >>> and if BIP148 support were much much broader, I would feel\n>> >> >> >> >>> differently\n>> >> >> >> >>> as the gamble would be more likely to discourage a chainsplit\n>> >> >> >> >>> (By\n>> >> >> >> >>> forcing the acceleration of segwit2x) rather than encourage\n>> >> >> >> >>> it\n>> >> >> >> >>> (by\n>> >> >> >> >>> strengthening an extreme minority chainsplit that may wind up\n>> >> >> >> >>> on\n>> >> >> >> >>> the\n>> >> >> >> >>> wrong side of two segwit-activated chains).  As it stands\n>> >> >> >> >>> now,\n>> >> >> >> >>> this\n>> >> >> >> >>> seems like a very dangerous attempt to compromise with a\n>> >> >> >> >>> small\n>> >> >> >> >>> but\n>> >> >> >> >>> vocal group that are the ones creating the threat to begin\n>> >> >> >> >>> with.\n>> >> >> >> >>>\n>> >> >> >> >>> Jared\n>> >> >> >> >>>\n>> >> >> >> >>> On Tue, Jun 6, 2017 at 5:56 PM, James Hilliard via\n>> >> >> >> >>> bitcoin-dev\n>> >> >> >> >>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >> >> >> >>>> Due to the proposed calendar(https://segwit2x.github.io/)\n>> >> >> >> >>>> for\n>> >> >> >> >>>> the\n>> >> >> >> >>>> SegWit2x agreement being too slow to activate SegWit\n>> >> >> >> >>>> mandatory\n>> >> >> >> >>>> signalling ahead of BIP148 using BIP91 I would like to\n>> >> >> >> >>>> propose\n>> >> >> >> >>>> another\n>> >> >> >> >>>> option that miners can use to prevent a chain split ahead of\n>> >> >> >> >>>> the\n>> >> >> >> >>>> Aug\n>> >> >> >> >>>> 1st BIP148 activation date.\n>> >> >> >> >>>>\n>> >> >> >> >>>> The splitprotection soft fork is essentially BIP91 but using\n>> >> >> >> >>>> BIP8\n>> >> >> >> >>>> instead of BIP9 with a lower activation threshold and\n>> >> >> >> >>>> immediate\n>> >> >> >> >>>> mandatory signalling lock-in. This allows for a majority of\n>> >> >> >> >>>> miners\n>> >> >> >> >>>> to\n>> >> >> >> >>>> activate mandatory SegWit signalling and prevent a potential\n>> >> >> >> >>>> chain\n>> >> >> >> >>>> split ahead of BIP148 activation.\n>> >> >> >> >>>>\n>> >> >> >> >>>> This BIP allows for miners to respond to market forces\n>> >> >> >> >>>> quickly\n>> >> >> >> >>>> ahead\n>> >> >> >> >>>> of BIP148 activation by signalling for splitprotection. Any\n>> >> >> >> >>>> miners\n>> >> >> >> >>>> already running BIP148 should be encouraged to use\n>> >> >> >> >>>> splitprotection.\n>> >> >> >> >>>>\n>> >> >> >> >>>> <pre>\n>> >> >> >> >>>>   BIP: splitprotection\n>> >> >> >> >>>>   Layer: Consensus (soft fork)\n>> >> >> >> >>>>   Title: User Activated Soft Fork Split Protection\n>> >> >> >> >>>>   Author: James Hilliard <james.hilliard1 at gmail.com>\n>> >> >> >> >>>>   Comments-Summary: No comments yet.\n>> >> >> >> >>>>   Comments-URI:\n>> >> >> >> >>>>   Status: Draft\n>> >> >> >> >>>>   Type: Standards Track\n>> >> >> >> >>>>   Created: 2017-05-22\n>> >> >> >> >>>>   License: BSD-3-Clause\n>> >> >> >> >>>>            CC0-1.0\n>> >> >> >> >>>> </pre>\n>> >> >> >> >>>>\n>> >> >> >> >>>> ==Abstract==\n>> >> >> >> >>>>\n>> >> >> >> >>>> This document specifies a coordination mechanism for a\n>> >> >> >> >>>> simple\n>> >> >> >> >>>> majority\n>> >> >> >> >>>> of miners to prevent a chain split ahead of BIP148\n>> >> >> >> >>>> activation.\n>> >> >> >> >>>>\n>> >> >> >> >>>> ==Definitions==\n>> >> >> >> >>>>\n>> >> >> >> >>>> \"existing segwit deployment\" refer to the BIP9 \"segwit\"\n>> >> >> >> >>>> deployment\n>> >> >> >> >>>> using bit 1, between November 15th 2016 and November 15th\n>> >> >> >> >>>> 2017\n>> >> >> >> >>>> to\n>> >> >> >> >>>> activate BIP141, BIP143 and BIP147.\n>> >> >> >> >>>>\n>> >> >> >> >>>> ==Motivation==\n>> >> >> >> >>>>\n>> >> >> >> >>>> The biggest risk of BIP148 is an extended chain split, this\n>> >> >> >> >>>> BIP\n>> >> >> >> >>>> provides a way for a simple majority of miners to eliminate\n>> >> >> >> >>>> that\n>> >> >> >> >>>> risk.\n>> >> >> >> >>>>\n>> >> >> >> >>>> This BIP provides a way for a simple majority of miners to\n>> >> >> >> >>>> coordinate\n>> >> >> >> >>>> activation of the existing segwit deployment with less than\n>> >> >> >> >>>> 95%\n>> >> >> >> >>>> hashpower before BIP148 activation. Due to time constraints\n>> >> >> >> >>>> unless\n>> >> >> >> >>>> immediately deployed BIP91 will likely not be able to\n>> >> >> >> >>>> enforce\n>> >> >> >> >>>> mandatory signalling of segwit before the Aug 1st activation\n>> >> >> >> >>>> of\n>> >> >> >> >>>> BIP148. This BIP provides a method for rapid miner\n>> >> >> >> >>>> activation\n>> >> >> >> >>>> of\n>> >> >> >> >>>> SegWit mandatory signalling ahead of the BIP148 activation\n>> >> >> >> >>>> date.\n>> >> >> >> >>>> Since\n>> >> >> >> >>>> the primary goal of this BIP is to reduce the chance of an\n>> >> >> >> >>>> extended\n>> >> >> >> >>>> chain split as much as possible we activate using a simple\n>> >> >> >> >>>> miner\n>> >> >> >> >>>> majority of 65% over a 504 block interval rather than a\n>> >> >> >> >>>> higher\n>> >> >> >> >>>> percentage. This BIP also allows miners to signal their\n>> >> >> >> >>>> intention\n>> >> >> >> >>>> to\n>> >> >> >> >>>> run BIP148 in order to prevent a chain split.\n>> >> >> >> >>>>\n>> >> >> >> >>>> ==Specification==\n>> >> >> >> >>>>\n>> >> >> >> >>>> While this BIP is active, all blocks must set the nVersion\n>> >> >> >> >>>> header\n>> >> >> >> >>>> top\n>> >> >> >> >>>> 3 bits to 001 together with bit field (1<<1) (according to\n>> >> >> >> >>>> the\n>> >> >> >> >>>> existing segwit deployment). Blocks that do not signal as\n>> >> >> >> >>>> required\n>> >> >> >> >>>> will be rejected.\n>> >> >> >> >>>>\n>> >> >> >> >>>> ==Deployment==\n>> >> >> >> >>>>\n>> >> >> >> >>>> This BIP will be deployed by \"version bits\" with a 65%(this\n>> >> >> >> >>>> can\n>> >> >> >> >>>> be\n>> >> >> >> >>>> adjusted if desired) activation threshold BIP9 with the name\n>> >> >> >> >>>> \"splitprotecion\" and using bit 2.\n>> >> >> >> >>>>\n>> >> >> >> >>>> This BIP starts immediately and is a BIP8 style soft fork\n>> >> >> >> >>>> since\n>> >> >> >> >>>> mandatory signalling will start on midnight August 1st 2017\n>> >> >> >> >>>> (epoch\n>> >> >> >> >>>> time 1501545600) regardless of whether or not this BIP has\n>> >> >> >> >>>> reached\n>> >> >> >> >>>> its\n>> >> >> >> >>>> own signalling threshold. This BIP will cease to be active\n>> >> >> >> >>>> when\n>> >> >> >> >>>> segwit\n>> >> >> >> >>>> is locked-in.\n>> >> >> >> >>>>\n>> >> >> >> >>>> === Reference implementation ===\n>> >> >> >> >>>>\n>> >> >> >> >>>> <pre>\n>> >> >> >> >>>> // Check if Segregated Witness is Locked In\n>> >> >> >> >>>> bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n>> >> >> >> >>>> Consensus::Params& params)\n>> >> >> >> >>>> {\n>> >> >> >> >>>>     LOCK(cs_main);\n>> >> >> >> >>>>     return (VersionBitsState(pindexPrev, params,\n>> >> >> >> >>>> Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n>> >> >> >> >>>> THRESHOLD_LOCKED_IN);\n>> >> >> >> >>>> }\n>> >> >> >> >>>>\n>> >> >> >> >>>> // SPLITPROTECTION mandatory segwit signalling.\n>> >> >> >> >>>> if ( VersionBitsState(pindex->pprev,\n>> >> >> >> >>>> chainparams.GetConsensus(),\n>> >> >> >> >>>> Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n>> >> >> >> >>>> THRESHOLD_LOCKED_IN &&\n>> >> >> >> >>>>      !IsWitnessLockedIn(pindex->pprev,\n>> >> >> >> >>>> chainparams.GetConsensus())\n>> >> >> >> >>>> &&\n>> >> >> >> >>>> // Segwit is not locked in\n>> >> >> >> >>>>      !IsWitnessEnabled(pindex->pprev,\n>> >> >> >> >>>> chainparams.GetConsensus())\n>> >> >> >> >>>> )\n>> >> >> >> >>>> //\n>> >> >> >> >>>> and is not active.\n>> >> >> >> >>>> {\n>> >> >> >> >>>>     bool fVersionBits = (pindex->nVersion &\n>> >> >> >> >>>> VERSIONBITS_TOP_MASK)\n>> >> >> >> >>>> ==\n>> >> >> >> >>>> VERSIONBITS_TOP_BITS;\n>> >> >> >> >>>>     bool fSegbit = (pindex->nVersion &\n>> >> >> >> >>>> VersionBitsMask(chainparams.GetConsensus(),\n>> >> >> >> >>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>> >> >> >> >>>>     if (!(fVersionBits && fSegbit)) {\n>> >> >> >> >>>>         return state.DoS(0, error(\"ConnectBlock(): relayed\n>> >> >> >> >>>> block\n>> >> >> >> >>>> must\n>> >> >> >> >>>> signal for segwit, please upgrade\"), REJECT_INVALID,\n>> >> >> >> >>>> \"bad-no-segwit\");\n>> >> >> >> >>>>     }\n>> >> >> >> >>>> }\n>> >> >> >> >>>>\n>> >> >> >> >>>> // BIP148 mandatory segwit signalling.\n>> >> >> >> >>>> int64_t nMedianTimePast = pindex->GetMedianTimePast();\n>> >> >> >> >>>> if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017\n>> >> >> >> >>>> 00:00:00\n>> >> >> >> >>>> UTC\n>> >> >> >> >>>>      (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017\n>> >> >> >> >>>> 00:00:00\n>> >> >> >> >>>> UTC\n>> >> >> >> >>>>      (!IsWitnessLockedIn(pindex->pprev,\n>> >> >> >> >>>> chainparams.GetConsensus())\n>> >> >> >> >>>> &&\n>> >> >> >> >>>>  // Segwit is not locked in\n>> >> >> >> >>>>       !IsWitnessEnabled(pindex->pprev,\n>> >> >> >> >>>> chainparams.GetConsensus())) )\n>> >> >> >> >>>>  // and is not active.\n>> >> >> >> >>>> {\n>> >> >> >> >>>>     bool fVersionBits = (pindex->nVersion &\n>> >> >> >> >>>> VERSIONBITS_TOP_MASK)\n>> >> >> >> >>>> ==\n>> >> >> >> >>>> VERSIONBITS_TOP_BITS;\n>> >> >> >> >>>>     bool fSegbit = (pindex->nVersion &\n>> >> >> >> >>>> VersionBitsMask(chainparams.GetConsensus(),\n>> >> >> >> >>>> Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>> >> >> >> >>>>     if (!(fVersionBits && fSegbit)) {\n>> >> >> >> >>>>         return state.DoS(0, error(\"ConnectBlock(): relayed\n>> >> >> >> >>>> block\n>> >> >> >> >>>> must\n>> >> >> >> >>>> signal for segwit, please upgrade\"), REJECT_INVALID,\n>> >> >> >> >>>> \"bad-no-segwit\");\n>> >> >> >> >>>>     }\n>> >> >> >> >>>> }\n>> >> >> >> >>>> </pre>\n>> >> >> >> >>>>\n>> >> >> >> >>>>\n>> >> >> >> >>>>\n>> >> >> >> >>>>\n>> >> >> >> >>>>\n>> >> >> >> >>>> https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1\n>> >> >> >> >>>>\n>> >> >> >> >>>> ==Backwards Compatibility==\n>> >> >> >> >>>>\n>> >> >> >> >>>> This deployment is compatible with the existing \"segwit\" bit\n>> >> >> >> >>>> 1\n>> >> >> >> >>>> deployment scheduled between midnight November 15th, 2016\n>> >> >> >> >>>> and\n>> >> >> >> >>>> midnight\n>> >> >> >> >>>> November 15th, 2017. This deployment is also compatible with\n>> >> >> >> >>>> the\n>> >> >> >> >>>> existing BIP148 deployment. This BIP is compatible with\n>> >> >> >> >>>> BIP91\n>> >> >> >> >>>> only\n>> >> >> >> >>>> if\n>> >> >> >> >>>> BIP91 activates before it and before BIP148. Miners will\n>> >> >> >> >>>> need\n>> >> >> >> >>>> to\n>> >> >> >> >>>> upgrade their nodes to support splitprotection otherwise\n>> >> >> >> >>>> they\n>> >> >> >> >>>> may\n>> >> >> >> >>>> build on top of an invalid block. While this bip is active\n>> >> >> >> >>>> users\n>> >> >> >> >>>> should either upgrade to splitprotection or wait for\n>> >> >> >> >>>> additional\n>> >> >> >> >>>> confirmations when accepting payments.\n>> >> >> >> >>>>\n>> >> >> >> >>>> ==Rationale==\n>> >> >> >> >>>>\n>> >> >> >> >>>> Historically we have used IsSuperMajority() to activate soft\n>> >> >> >> >>>> forks\n>> >> >> >> >>>> such as BIP66 which has a mandatory signalling requirement\n>> >> >> >> >>>> for\n>> >> >> >> >>>> miners\n>> >> >> >> >>>> once activated, this ensures that miners are aware of new\n>> >> >> >> >>>> rules\n>> >> >> >> >>>> being\n>> >> >> >> >>>> enforced. This technique can be leveraged to lower the\n>> >> >> >> >>>> signalling\n>> >> >> >> >>>> threshold of a soft fork while it is in the process of being\n>> >> >> >> >>>> deployed\n>> >> >> >> >>>> in a backwards compatible way. We also use a BIP8 style\n>> >> >> >> >>>> timeout\n>> >> >> >> >>>> to\n>> >> >> >> >>>> ensure that this BIP is compatible with BIP148 and that\n>> >> >> >> >>>> BIP148\n>> >> >> >> >>>> compatible mandatory signalling activates regardless of\n>> >> >> >> >>>> miner\n>> >> >> >> >>>> signalling levels.\n>> >> >> >> >>>>\n>> >> >> >> >>>> By orphaning non-signalling blocks during the BIP9 bit 1\n>> >> >> >> >>>> \"segwit\"\n>> >> >> >> >>>> deployment, this BIP can cause the existing \"segwit\"\n>> >> >> >> >>>> deployment\n>> >> >> >> >>>> to\n>> >> >> >> >>>> activate without needing to release a new deployment. As we\n>> >> >> >> >>>> approach\n>> >> >> >> >>>> BIP148 activation it may be desirable for a majority of\n>> >> >> >> >>>> miners\n>> >> >> >> >>>> to\n>> >> >> >> >>>> have\n>> >> >> >> >>>> a method that will ensure that there is no chain split.\n>> >> >> >> >>>>\n>> >> >> >> >>>> ==References==\n>> >> >> >> >>>>\n>> >> >> >> >>>>\n>> >> >> >> >>>>\n>> >> >> >> >>>>\n>> >> >> >> >>>>\n>> >> >> >> >>>> *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html\n>> >> >> >> >>>> Mailing list discussion]\n>> >> >> >> >>>>\n>> >> >> >> >>>>\n>> >> >> >> >>>>\n>> >> >> >> >>>>\n>> >> >> >> >>>> *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\n>> >> >> >> >>>> P2SH flag day activation]\n>> >> >> >> >>>> *[[bip-0009.mediawiki|BIP9 Version bits with timeout and\n>> >> >> >> >>>> delay]]\n>> >> >> >> >>>> *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n>> >> >> >> >>>> *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n>> >> >> >> >>>> *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus\n>> >> >> >> >>>> layer)]]\n>> >> >> >> >>>> *[[bip-0143.mediawiki|BIP143 Transaction Signature\n>> >> >> >> >>>> Verification\n>> >> >> >> >>>> for\n>> >> >> >> >>>> Version 0 Witness Program]]\n>> >> >> >> >>>> *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack\n>> >> >> >> >>>> element\n>> >> >> >> >>>> malleability]]\n>> >> >> >> >>>> *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit\n>> >> >> >> >>>> deployment]]\n>> >> >> >> >>>> *[[bip-0149.mediawiki|BIP149 Segregated Witness (second\n>> >> >> >> >>>> deployment)]]\n>> >> >> >> >>>> *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/\n>> >> >> >> >>>> Segwit\n>> >> >> >> >>>> benefits]\n>> >> >> >> >>>>\n>> >> >> >> >>>> ==Copyright==\n>> >> >> >> >>>>\n>> >> >> >> >>>> This document is dual licensed as BSD 3-clause, and Creative\n>> >> >> >> >>>> Commons\n>> >> >> >> >>>> CC0 1.0 Universal.\n>> >> >> >> >>>> _______________________________________________\n>> >> >> >> >>>> bitcoin-dev mailing list\n>> >> >> >> >>>> bitcoin-dev at lists.linuxfoundation.org\n>> >> >> >> >>>>\n>> >> >> >> >>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >> >> >\n>> >> >> >\n>> >> >\n>> >> >\n>> >\n>> >\n>\n>"
            },
            {
                "author": "James Hilliard",
                "date": "2017-06-07T21:44:52",
                "message_text_only": "Yes, this is the same as BIP148, there is no mandatory signalling\nafter segwit is locked in.\n\nOn Wed, Jun 7, 2017 at 4:43 PM, Jared Lee Richardson <jaredr26 at gmail.com> wrote:\n>> Keep in mind that this is only temporary until segwit has locked in,\n> after that happens it becomes optional for miners again.\n>\n> I missed that, that does effectively address that concern.  It appears\n> that BIP148 implements the same rule as would be required to prevent a\n> later chainsplit as well, no?\n>\n> This comment did bring to mind another concern about BIP148/91 though,\n> which I'll raise in the pull request discussion.  Feel free to respond\n> to it there.\n>\n> Jared\n>\n> On Wed, Jun 7, 2017 at 2:21 PM, James Hilliard\n> <james.hilliard1 at gmail.com> wrote:\n>> Keep in mind that this is only temporary until segwit has locked in,\n>> after that happens it becomes optional for miners again.\n>>\n>> On Wed, Jun 7, 2017 at 4:09 PM, Jared Lee Richardson <jaredr26 at gmail.com> wrote:\n>>>> This is, by far, the safest way for miners to quickly defend against a chain split, much better than a -bip148 option.   This allows miners to defend themselves, with very little risk, since the defense is only activated if the majority of miners do so. I would move for a very rapid deployment.   Only miners would need to upgrade.   Regular users would not have to concern themselves with this release.\n>>>\n>>> FYI, even if very successful, this deployment and change may have a\n>>> severe negative impact on a small group of miners.  Any miners/pools\n>>> who are not actively following the forums, news, or these discussions\n>>> may be difficult to reach and communicate with in time, particularly\n>>> with language barriers.  Of those, any who are also either not\n>>> signaling segwit currently or are running an older software version\n>>> will have their blocks continuously and constantly orphaned, but may\n>>> not have any alarms or notifications set up for such an unexpected\n>>> failure.  That may or may not be a worthy consideration, but it is\n>>> definitely brusque and a harsh price to pay.  Considering the\n>>> opposition mentioned against transaction limits for the rare cases\n>>> where a very large transaction has already been signed, it seems that\n>>> this would be worthy of consideration.  For the few miners in that\n>>> situation, it does turn segwit from an optional softfork into a\n>>> punishing hardfork.\n>>>\n>>> I don't think that's a sufficient reason alone to kill the idea, but\n>>> it should be a concern.\n>>>\n>>> Jared\n>>>\n>>> On Wed, Jun 7, 2017 at 7:10 AM, Erik Aronesty via bitcoin-dev\n>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>> This is, by far, the safest way for miners to quickly defend against a chain\n>>>> split, much better than a -bip148 option.   This allows miners to defend\n>>>> themselves, with very little risk, since the defense is only activated if\n>>>> the majority of miners do so. I would move for a very rapid deployment.\n>>>> Only miners would need to upgrade.   Regular users would not have to concern\n>>>> themselves with this release.\n>>>>\n>>>> On Wed, Jun 7, 2017 at 6:13 AM, James Hilliard via bitcoin-dev\n>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>>\n>>>>> I think even 55% would probably work out fine simply due to incentive\n>>>>> structures, once signalling is over 51% it's then clear to miners that\n>>>>> non-signalling blocks will be orphaned and the rest will rapidly\n>>>>> update to splitprotection/BIP148. The purpose of this BIP is to reduce\n>>>>> chain split risk for BIP148 since it's looking like BIP148 is going to\n>>>>> be run by a non-insignificant percentage of the economy at a minimum.\n>>>>>\n>>>>> On Wed, Jun 7, 2017 at 12:20 AM, Tao Effect <contact at taoeffect.com> wrote:\n>>>>> > See thread on replay attacks for why activating regardless of threshold\n>>>>> > is a\n>>>>> > bad idea [1].\n>>>>> >\n>>>>> > BIP91 OTOH seems perfectly reasonable. 80% instead of 95% makes it more\n>>>>> > difficult for miners to hold together in opposition to Core. It gives\n>>>>> > Core\n>>>>> > more leverage in negotiations.\n>>>>> >\n>>>>> > If they don't activate with 80%, Core can release another BIP to reduce\n>>>>> > it\n>>>>> > to 75%.\n>>>>> >\n>>>>> > Each threshold reduction makes it both more likely to succeed, but also\n>>>>> > increases the likelihood of harm to the ecosystem.\n>>>>> >\n>>>>> > Cheers,\n>>>>> > Greg\n>>>>> >\n>>>>> > [1]\n>>>>> >\n>>>>> > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014497.html\n>>>>> >\n>>>>> > --\n>>>>> > Please do not email me anything that you are not comfortable also\n>>>>> > sharing\n>>>>> > with the NSA.\n>>>>> >\n>>>>> > On Jun 6, 2017, at 6:54 PM, James Hilliard <james.hilliard1 at gmail.com>\n>>>>> > wrote:\n>>>>> >\n>>>>> > This is a BIP8 style soft fork so mandatory signalling will be active\n>>>>> > after Aug 1st regardless.\n>>>>> >\n>>>>> > On Tue, Jun 6, 2017 at 8:51 PM, Tao Effect <contact at taoeffect.com>\n>>>>> > wrote:\n>>>>> >\n>>>>> > What is the probability that a 65% threshold is too low and can allow a\n>>>>> > \"surprise miner attack\", whereby miners are kept offline before the\n>>>>> > deadline, and brought online immediately after, creating potential\n>>>>> > havoc?\n>>>>> >\n>>>>> > (Nit: \"simple majority\" usually refers to >50%, I think, might cause\n>>>>> > confusion.)\n>>>>> >\n>>>>> > -Greg Slepak\n>>>>> >\n>>>>> > --\n>>>>> > Please do not email me anything that you are not comfortable also\n>>>>> > sharing\n>>>>> > with the NSA.\n>>>>> >\n>>>>> > On Jun 6, 2017, at 5:56 PM, James Hilliard via bitcoin-dev\n>>>>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>> >\n>>>>> > Due to the proposed calendar(https://segwit2x.github.io/) for the\n>>>>> > SegWit2x agreement being too slow to activate SegWit mandatory\n>>>>> > signalling ahead of BIP148 using BIP91 I would like to propose another\n>>>>> > option that miners can use to prevent a chain split ahead of the Aug\n>>>>> > 1st BIP148 activation date.\n>>>>> >\n>>>>> > The splitprotection soft fork is essentially BIP91 but using BIP8\n>>>>> > instead of BIP9 with a lower activation threshold and immediate\n>>>>> > mandatory signalling lock-in. This allows for a majority of miners to\n>>>>> > activate mandatory SegWit signalling and prevent a potential chain\n>>>>> > split ahead of BIP148 activation.\n>>>>> >\n>>>>> > This BIP allows for miners to respond to market forces quickly ahead\n>>>>> > of BIP148 activation by signalling for splitprotection. Any miners\n>>>>> > already running BIP148 should be encouraged to use splitprotection.\n>>>>> >\n>>>>> > <pre>\n>>>>> > BIP: splitprotection\n>>>>> > Layer: Consensus (soft fork)\n>>>>> > Title: User Activated Soft Fork Split Protection\n>>>>> > Author: James Hilliard <james.hilliard1 at gmail.com>\n>>>>> > Comments-Summary: No comments yet.\n>>>>> > Comments-URI:\n>>>>> > Status: Draft\n>>>>> > Type: Standards Track\n>>>>> > Created: 2017-05-22\n>>>>> > License: BSD-3-Clause\n>>>>> >          CC0-1.0\n>>>>> > </pre>\n>>>>> >\n>>>>> > ==Abstract==\n>>>>> >\n>>>>> > This document specifies a coordination mechanism for a simple majority\n>>>>> > of miners to prevent a chain split ahead of BIP148 activation.\n>>>>> >\n>>>>> > ==Definitions==\n>>>>> >\n>>>>> > \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment\n>>>>> > using bit 1, between November 15th 2016 and November 15th 2017 to\n>>>>> > activate BIP141, BIP143 and BIP147.\n>>>>> >\n>>>>> > ==Motivation==\n>>>>> >\n>>>>> > The biggest risk of BIP148 is an extended chain split, this BIP\n>>>>> > provides a way for a simple majority of miners to eliminate that risk.\n>>>>> >\n>>>>> > This BIP provides a way for a simple majority of miners to coordinate\n>>>>> > activation of the existing segwit deployment with less than 95%\n>>>>> > hashpower before BIP148 activation. Due to time constraints unless\n>>>>> > immediately deployed BIP91 will likely not be able to enforce\n>>>>> > mandatory signalling of segwit before the Aug 1st activation of\n>>>>> > BIP148. This BIP provides a method for rapid miner activation of\n>>>>> > SegWit mandatory signalling ahead of the BIP148 activation date. Since\n>>>>> > the primary goal of this BIP is to reduce the chance of an extended\n>>>>> > chain split as much as possible we activate using a simple miner\n>>>>> > majority of 65% over a 504 block interval rather than a higher\n>>>>> > percentage. This BIP also allows miners to signal their intention to\n>>>>> > run BIP148 in order to prevent a chain split.\n>>>>> >\n>>>>> > ==Specification==\n>>>>> >\n>>>>> > While this BIP is active, all blocks must set the nVersion header top\n>>>>> > 3 bits to 001 together with bit field (1<<1) (according to the\n>>>>> > existing segwit deployment). Blocks that do not signal as required\n>>>>> > will be rejected.\n>>>>> >\n>>>>> > ==Deployment==\n>>>>> >\n>>>>> > This BIP will be deployed by \"version bits\" with a 65%(this can be\n>>>>> > adjusted if desired) activation threshold BIP9 with the name\n>>>>> > \"splitprotecion\" and using bit 2.\n>>>>> >\n>>>>> > This BIP starts immediately and is a BIP8 style soft fork since\n>>>>> > mandatory signalling will start on midnight August 1st 2017 (epoch\n>>>>> > time 1501545600) regardless of whether or not this BIP has reached its\n>>>>> > own signalling threshold. This BIP will cease to be active when segwit\n>>>>> > is locked-in.\n>>>>> >\n>>>>> > === Reference implementation ===\n>>>>> >\n>>>>> > <pre>\n>>>>> > // Check if Segregated Witness is Locked In\n>>>>> > bool IsWitnessLockedIn(const CBlockIndex* pindexPrev, const\n>>>>> > Consensus::Params& params)\n>>>>> > {\n>>>>> >   LOCK(cs_main);\n>>>>> >   return (VersionBitsState(pindexPrev, params,\n>>>>> > Consensus::DEPLOYMENT_SEGWIT, versionbitscache) ==\n>>>>> > THRESHOLD_LOCKED_IN);\n>>>>> > }\n>>>>> >\n>>>>> > // SPLITPROTECTION mandatory segwit signalling.\n>>>>> > if ( VersionBitsState(pindex->pprev, chainparams.GetConsensus(),\n>>>>> > Consensus::DEPLOYMENT_SPLITPROTECTION, versionbitscache) ==\n>>>>> > THRESHOLD_LOCKED_IN &&\n>>>>> >    !IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>>>>> > // Segwit is not locked in\n>>>>> >    !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) ) //\n>>>>> > and is not active.\n>>>>> > {\n>>>>> >   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>>>>> > VERSIONBITS_TOP_BITS;\n>>>>> >   bool fSegbit = (pindex->nVersion &\n>>>>> > VersionBitsMask(chainparams.GetConsensus(),\n>>>>> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>>>> >   if (!(fVersionBits && fSegbit)) {\n>>>>> >       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>>>>> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>>>> >   }\n>>>>> > }\n>>>>> >\n>>>>> > // BIP148 mandatory segwit signalling.\n>>>>> > int64_t nMedianTimePast = pindex->GetMedianTimePast();\n>>>>> > if ( (nMedianTimePast >= 1501545600) &&  // Tue 01 Aug 2017 00:00:00 UTC\n>>>>> >    (nMedianTimePast <= 1510704000) &&  // Wed 15 Nov 2017 00:00:00 UTC\n>>>>> >    (!IsWitnessLockedIn(pindex->pprev, chainparams.GetConsensus()) &&\n>>>>> > // Segwit is not locked in\n>>>>> >     !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) )\n>>>>> > // and is not active.\n>>>>> > {\n>>>>> >   bool fVersionBits = (pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>>>>> > VERSIONBITS_TOP_BITS;\n>>>>> >   bool fSegbit = (pindex->nVersion &\n>>>>> > VersionBitsMask(chainparams.GetConsensus(),\n>>>>> > Consensus::DEPLOYMENT_SEGWIT)) != 0;\n>>>>> >   if (!(fVersionBits && fSegbit)) {\n>>>>> >       return state.DoS(0, error(\"ConnectBlock(): relayed block must\n>>>>> > signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>>>> >   }\n>>>>> > }\n>>>>> > </pre>\n>>>>> >\n>>>>> >\n>>>>> > https://github.com/bitcoin/bitcoin/compare/0.14...jameshilliard:splitprotection-v0.14.1\n>>>>> >\n>>>>> > ==Backwards Compatibility==\n>>>>> >\n>>>>> > This deployment is compatible with the existing \"segwit\" bit 1\n>>>>> > deployment scheduled between midnight November 15th, 2016 and midnight\n>>>>> > November 15th, 2017. This deployment is also compatible with the\n>>>>> > existing BIP148 deployment. This BIP is compatible with BIP91 only if\n>>>>> > BIP91 activates before it and before BIP148. Miners will need to\n>>>>> > upgrade their nodes to support splitprotection otherwise they may\n>>>>> > build on top of an invalid block. While this bip is active users\n>>>>> > should either upgrade to splitprotection or wait for additional\n>>>>> > confirmations when accepting payments.\n>>>>> >\n>>>>> > ==Rationale==\n>>>>> >\n>>>>> > Historically we have used IsSuperMajority() to activate soft forks\n>>>>> > such as BIP66 which has a mandatory signalling requirement for miners\n>>>>> > once activated, this ensures that miners are aware of new rules being\n>>>>> > enforced. This technique can be leveraged to lower the signalling\n>>>>> > threshold of a soft fork while it is in the process of being deployed\n>>>>> > in a backwards compatible way. We also use a BIP8 style timeout to\n>>>>> > ensure that this BIP is compatible with BIP148 and that BIP148\n>>>>> > compatible mandatory signalling activates regardless of miner\n>>>>> > signalling levels.\n>>>>> >\n>>>>> > By orphaning non-signalling blocks during the BIP9 bit 1 \"segwit\"\n>>>>> > deployment, this BIP can cause the existing \"segwit\" deployment to\n>>>>> > activate without needing to release a new deployment. As we approach\n>>>>> > BIP148 activation it may be desirable for a majority of miners to have\n>>>>> > a method that will ensure that there is no chain split.\n>>>>> >\n>>>>> > ==References==\n>>>>> >\n>>>>> >\n>>>>> > *[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013714.html\n>>>>> > Mailing list discussion]\n>>>>> >\n>>>>> > *[https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\n>>>>> > P2SH flag day activation]\n>>>>> > *[[bip-0009.mediawiki|BIP9 Version bits with timeout and delay]]\n>>>>> > *[[bip-0016.mediawiki|BIP16 Pay to Script Hash]]\n>>>>> > *[[bip-0091.mediawiki|BIP91 Reduced threshold Segwit MASF]]\n>>>>> > *[[bip-0141.mediawiki|BIP141 Segregated Witness (Consensus layer)]]\n>>>>> > *[[bip-0143.mediawiki|BIP143 Transaction Signature Verification for\n>>>>> > Version 0 Witness Program]]\n>>>>> > *[[bip-0147.mediawiki|BIP147 Dealing with dummy stack element\n>>>>> > malleability]]\n>>>>> > *[[bip-0148.mediawiki|BIP148 Mandatory activation of segwit deployment]]\n>>>>> > *[[bip-0149.mediawiki|BIP149 Segregated Witness (second deployment)]]\n>>>>> > *[https://bitcoincore.org/en/2016/01/26/segwit-benefits/ Segwit\n>>>>> > benefits]\n>>>>> >\n>>>>> > ==Copyright==\n>>>>> >\n>>>>> > This document is dual licensed as BSD 3-clause, and Creative Commons\n>>>>> > CC0 1.0 Universal.\n>>>>> > _______________________________________________\n>>>>> > bitcoin-dev mailing list\n>>>>> > bitcoin-dev at lists.linuxfoundation.org\n>>>>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>> >\n>>>>> >\n>>>>> >\n>>>>> _______________________________________________\n>>>>> bitcoin-dev mailing list\n>>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>\n>>>>\n>>>>\n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>"
            }
        ],
        "thread_summary": {
            "title": "User Activated Soft Fork Split Protection",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "James Hilliard",
                "Erik Aronesty",
                "Jared Lee Richardson",
                "Karl Johan Alm",
                "Jacob Eliosoff",
                "Tao Effect"
            ],
            "messages_count": 29,
            "total_messages_chars_count": 481287
        }
    },
    {
        "title": "[bitcoin-dev] The BIP148 chain split may be inevitable",
        "thread_messages": [
            {
                "author": "Jacob Eliosoff",
                "date": "2017-06-09T04:40:57",
                "message_text_only": "I've been trying to work out the expected interaction between James\nHilliard's BIP91 [1] (or splitprotection [2], or Segwit2x [3], which both\nuse variants of BIP91 activation) and the BIP148 UASF [4].  Some of this is\nsubtle so CORRECTIONS WELCOME, but my conclusions are:\n1. It's extremely unlikely BIP91-type logic can activate segwit in time to\navoid a BIP148 chain split.\n2. So, in practice all we can do is ensure the BIP148 split is as painless\nas possible.\n\nREASONING:  First, some dates.  BIP148, whose deadline is already deployed\nand thus unlikely to be postponed, starts orphaning non-segwit blocks on\nmidnight (GMT) the morning of August 1.  Meanwhile, here are Bitcoin's\nrough expected next four difficulty adjustment dates (they could vary by\n~1-3 days depending on block times, but it's unlikely to matter here):\n1. June 17\n2. June 30\n3. July 13\n4. July 27\n\nIf Segwit activates on adj date #5 or later (August), it will be too late\nto avoid BIP148's split, which will have occurred the moment August began.\nSo, working backwards, and assuming we want compatibility with old BIP141\nnodes:\n\n- Segwit MUST activate by adj #4 (~July 27)\n- Therefore segwit MUST be locked in by adj #3 (~July 13: this is\ninflexible, since this logic is in already-deployed BIP141 nodes)\n- Therefore, I *think* >50% of hashpower needs to be BIP91 miners,\nsignaling bit 1 and orphaning non-BIP91 (ie, BIP91's bit 4 must activate),\nby adj #2 (June 30)?\n- Therefore, as currently designed, BIP91 bit 4 must be locked in by adj #1\n(June 17)\n- Therefore, >=80% of hashrate must start signaling BIP91's bit 4 by a few\ndays ago...\n\nThere are ways parts of this could be sped up, eg, James' \"rolling\n100-block lock-in periods\" [5], to get BIP91 signaling bit 1 sooner.  But\nto be compatible with old BIP141 nodes, >50% of hashrate must be activated\nBIP91 miners by ~June 30: there's no fudging that.\n\nSo, it seems to me that to avoid the BIP148 split, one of two things would\nhave to happen:\na) 95% of hashrate start signaling bit 1 by ~June 30.  Given current stat\nis 32%, this would basically require magic.\nb) BIP91 is deployed and >50% (80% or whatever) of hashrate is *activated*\nBIP91 miners by ~June 30, ~3 weeks from now.  Again, much too soon.\n\nSo, I think the BIP148 split is inevitable.  I actually expect that few\nparts of the ecosystem will join the fork, so disruption will be bearable.\nBut anyway let me know any flaws in the reasoning above.\n\n[1] https://github.com/bitcoin/bips/blob/master/bip-0091.mediawiki\n[2]\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014508.html\n[3] https://github.com/btc1/bitcoin/pull/11\n[4] https://github.com/bitcoin/bips/blob/master/bip-0148.mediawiki\n[5] https://github.com/btc1/bitcoin/pull/6#issuecomment-305917729\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170609/e606bbb0/attachment-0001.html>"
            },
            {
                "author": "Jacob Eliosoff",
                "date": "2017-06-09T05:23:17",
                "message_text_only": "Ah, two corrections:\n1. I meant to include an option c): of course >50% of hashpower running\nBIP148 by Aug 1 avoids a split.\n2. More seriously, I misrepresented BIP148's logic: it doesn't require\nsegwit *activation*, just orphans non-segwit-*signaling* (bit 1) blocks\nfrom Aug 1.\n\nI believe that means 80% of hashrate would need to be running BIP91\n(signaling bit 4) by ~June 30 (so BIP91 locks in ~July 13, activates ~July\n27), not \"a few days ago\" as I claimed.  So, tight timing, but not\nimpossible.\n\nSorry about the errors.\n\n\nOn Fri, Jun 9, 2017 at 12:40 AM, Jacob Eliosoff <jacob.eliosoff at gmail.com>\nwrote:\n\n> I've been trying to work out the expected interaction between James\n> Hilliard's BIP91 [1] (or splitprotection [2], or Segwit2x [3], which both\n> use variants of BIP91 activation) and the BIP148 UASF [4].  Some of this is\n> subtle so CORRECTIONS WELCOME, but my conclusions are:\n> 1. It's extremely unlikely BIP91-type logic can activate segwit in time to\n> avoid a BIP148 chain split.\n> 2. So, in practice all we can do is ensure the BIP148 split is as painless\n> as possible.\n>\n> REASONING:  First, some dates.  BIP148, whose deadline is already deployed\n> and thus unlikely to be postponed, starts orphaning non-segwit blocks on\n> midnight (GMT) the morning of August 1.  Meanwhile, here are Bitcoin's\n> rough expected next four difficulty adjustment dates (they could vary by\n> ~1-3 days depending on block times, but it's unlikely to matter here):\n> 1. June 17\n> 2. June 30\n> 3. July 13\n> 4. July 27\n>\n> If Segwit activates on adj date #5 or later (August), it will be too late\n> to avoid BIP148's split, which will have occurred the moment August began.\n> So, working backwards, and assuming we want compatibility with old BIP141\n> nodes:\n>\n> - Segwit MUST activate by adj #4 (~July 27)\n> - Therefore segwit MUST be locked in by adj #3 (~July 13: this is\n> inflexible, since this logic is in already-deployed BIP141 nodes)\n> - Therefore, I *think* >50% of hashpower needs to be BIP91 miners,\n> signaling bit 1 and orphaning non-BIP91 (ie, BIP91's bit 4 must activate),\n> by adj #2 (June 30)?\n> - Therefore, as currently designed, BIP91 bit 4 must be locked in by adj\n> #1 (June 17)\n> - Therefore, >=80% of hashrate must start signaling BIP91's bit 4 by a few\n> days ago...\n>\n> There are ways parts of this could be sped up, eg, James' \"rolling\n> 100-block lock-in periods\" [5], to get BIP91 signaling bit 1 sooner.  But\n> to be compatible with old BIP141 nodes, >50% of hashrate must be activated\n> BIP91 miners by ~June 30: there's no fudging that.\n>\n> So, it seems to me that to avoid the BIP148 split, one of two things would\n> have to happen:\n> a) 95% of hashrate start signaling bit 1 by ~June 30.  Given current stat\n> is 32%, this would basically require magic.\n> b) BIP91 is deployed and >50% (80% or whatever) of hashrate is *activated*\n> BIP91 miners by ~June 30, ~3 weeks from now.  Again, much too soon.\n>\n> So, I think the BIP148 split is inevitable.  I actually expect that few\n> parts of the ecosystem will join the fork, so disruption will be bearable.\n> But anyway let me know any flaws in the reasoning above.\n>\n> [1] https://github.com/bitcoin/bips/blob/master/bip-0091.mediawiki\n> [2] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/\n> 2017-June/014508.html\n> [3] https://github.com/btc1/bitcoin/pull/11\n> [4] https://github.com/bitcoin/bips/blob/master/bip-0148.mediawiki\n> [5] https://github.com/btc1/bitcoin/pull/6#issuecomment-305917729\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170609/e004899e/attachment-0001.html>"
            },
            {
                "author": "Jacob Eliosoff",
                "date": "2017-06-10T18:04:32",
                "message_text_only": "Just a quick follow-up on BIP91's prospects of avoiding a BIP148 chain\nsplit, because I may have left an overly pessimistic impression -\n\nIn short: the timing isn't as dire as I suggested, BUT unless concrete\nprogress on a plan starts taking shape, esp miner support, *the split is\nindeed coming.*\n\nTHE GOOD NEWS: several refinements have been noted which could get BIP91\n(or splitprotection, Segwit2x, etc) deployed faster:\n- The lock-in window could be shortened, eg to splitprotection's 504 blocks\n(3.5 days)\n- Of course the 80% threshold could just be reduced, eg to\nsplitprotection's 65%\n- BIP91 nodes could start signaling on bit 1 the moment bit 4 reaches\nlock-in, rather than waiting another period until it  \"activates\".\n (Orphaning of non-bit-1-signaling blocks would probably also have to start\nat or shortly after the same time [1].)\n\nCombining these approaches, *July 26* is an approximate hard deadline for\n>50% of miners to be running BIP91 in order to prevent the split.  So,\nsignificantly less tight than my previous June 30 (or my original,\nerroneous \"a few days ago\").\n\nTHE BAD NEWS: no one should underestimate the steps that would need to be\ncompleted by that deadline:\n1. Coordinate on a solution (BIP91, splitprotection, Segwit2x, BIP148\nitself, ...)\n2. Implement and test it\n3. Convince >50% of miners to run it [2]\n4. Miners upgrade to the new software and begin signaling\n\nIn particular, #3: afaict a lot of convincing is still needed before miner\nsupport for any of these reaches anything like 50%.  (With the exception of\nSegwit2x, but it has the additional handicap that it probably needs to\ninclude deployable hard fork code, obviously ambitious in 1.5 months.)\n\n\n[1] See Saicere's comment:\nhttps://github.com/btc1/bitcoin/pull/11#discussion_r121086886, and related\ndiscussion at https://github.com/btc1/bitcoin/pull/11#issuecomment-307330011\n.\n\n[2] Note that >50% need to run the *solution*, eg BIP91; old BIP141 nodes\nsignaling segwit support do *not* count, since they won't orphan non-bit-1\nblocks.  The impending split isn't between nodes that support segwit vs\ndon't, but between those that reject non-segwit-supporting blocks vs don't.\n\n\nOn Fri, Jun 9, 2017 at 1:23 AM, Jacob Eliosoff <jacob.eliosoff at gmail.com>\nwrote:\n\n> Ah, two corrections:\n> 1. I meant to include an option c): of course >50% of hashpower running\n> BIP148 by Aug 1 avoids a split.\n> 2. More seriously, I misrepresented BIP148's logic: it doesn't require\n> segwit *activation*, just orphans non-segwit-*signaling* (bit 1) blocks\n> from Aug 1.\n>\n> I believe that means 80% of hashrate would need to be running BIP91\n> (signaling bit 4) by ~June 30 (so BIP91 locks in ~July 13, activates ~July\n> 27), not \"a few days ago\" as I claimed.  So, tight timing, but not\n> impossible.\n>\n> Sorry about the errors.\n>\n>\n> On Fri, Jun 9, 2017 at 12:40 AM, Jacob Eliosoff <jacob.eliosoff at gmail.com>\n> wrote:\n>\n>> I've been trying to work out the expected interaction between James\n>> Hilliard's BIP91 [1] (or splitprotection [2], or Segwit2x [3], which both\n>> use variants of BIP91 activation) and the BIP148 UASF [4].  Some of this is\n>> subtle so CORRECTIONS WELCOME, but my conclusions are:\n>> 1. It's extremely unlikely BIP91-type logic can activate segwit in time\n>> to avoid a BIP148 chain split.\n>> 2. So, in practice all we can do is ensure the BIP148 split is as\n>> painless as possible.\n>>\n>> REASONING:  First, some dates.  BIP148, whose deadline is already\n>> deployed and thus unlikely to be postponed, starts orphaning non-segwit\n>> blocks on midnight (GMT) the morning of August 1.  Meanwhile, here are\n>> Bitcoin's rough expected next four difficulty adjustment dates (they could\n>> vary by ~1-3 days depending on block times, but it's unlikely to matter\n>> here):\n>> 1. June 17\n>> 2. June 30\n>> 3. July 13\n>> 4. July 27\n>>\n>> If Segwit activates on adj date #5 or later (August), it will be too late\n>> to avoid BIP148's split, which will have occurred the moment August began.\n>> So, working backwards, and assuming we want compatibility with old BIP141\n>> nodes:\n>>\n>> - Segwit MUST activate by adj #4 (~July 27)\n>> - Therefore segwit MUST be locked in by adj #3 (~July 13: this is\n>> inflexible, since this logic is in already-deployed BIP141 nodes)\n>> - Therefore, I *think* >50% of hashpower needs to be BIP91 miners,\n>> signaling bit 1 and orphaning non-BIP91 (ie, BIP91's bit 4 must activate),\n>> by adj #2 (June 30)?\n>> - Therefore, as currently designed, BIP91 bit 4 must be locked in by adj\n>> #1 (June 17)\n>> - Therefore, >=80% of hashrate must start signaling BIP91's bit 4 by a\n>> few days ago...\n>>\n>> There are ways parts of this could be sped up, eg, James' \"rolling\n>> 100-block lock-in periods\" [5], to get BIP91 signaling bit 1 sooner.  But\n>> to be compatible with old BIP141 nodes, >50% of hashrate must be activated\n>> BIP91 miners by ~June 30: there's no fudging that.\n>>\n>> So, it seems to me that to avoid the BIP148 split, one of two things\n>> would have to happen:\n>> a) 95% of hashrate start signaling bit 1 by ~June 30.  Given current stat\n>> is 32%, this would basically require magic.\n>> b) BIP91 is deployed and >50% (80% or whatever) of hashrate is\n>> *activated* BIP91 miners by ~June 30, ~3 weeks from now.  Again, much too\n>> soon.\n>>\n>> So, I think the BIP148 split is inevitable.  I actually expect that few\n>> parts of the ecosystem will join the fork, so disruption will be bearable.\n>> But anyway let me know any flaws in the reasoning above.\n>>\n>> [1] https://github.com/bitcoin/bips/blob/master/bip-0091.mediawiki\n>> [2] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017\n>> -June/014508.html\n>> [3] https://github.com/btc1/bitcoin/pull/11\n>> [4] https://github.com/bitcoin/bips/blob/master/bip-0148.mediawiki\n>> [5] https://github.com/btc1/bitcoin/pull/6#issuecomment-305917729\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170610/8122eddf/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2017-06-11T15:06:01",
                "message_text_only": "> I believe that means 80% of hashrate would need to be running BIP91 (signaling bit 4) by ~June 30 (so BIP91 locks in ~July 13, activates ~July 27), not \"a few days ago\" as I claimed.  So, tight timing, but not impossible.\n\nThis is not needed, if segwit is locked in by aug 1 (with or without\nbip91), no split will happen even if segwit is not active yet.\nSo the hashrate majority could avoid the split that way (or adopting bip148).\n\nBut it doesn't seem like they are planning to do this (with or without\nbip91), the last thing I've heard, it's they will wait until\n\"immediately\" before they signal sw (but there must be some language\nbarrier here, perhaps \"immediately\" and \"inmediatamente\" are false\nfriends). The reason why they will wait until \"immediately\" instead of\njust starting to signal sw today, it's still unclear to me.\n\nThe other way to prevent the split is if bip148 users abort bip148\ndeployment, but unfortunately that seems increasingly unlikely."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2017-06-11T17:11:53",
                "message_text_only": "On Sat, Jun 10, 2017 at 8:04 PM, Jacob Eliosoff via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Just a quick follow-up on BIP91's prospects of avoiding a BIP148 chain\n> split, because I may have left an overly pessimistic impression -\n>\n> In short: the timing isn't as dire as I suggested, BUT unless concrete\n> progress on a plan starts taking shape, esp miner support, *the split is\n> indeed coming.*\n>\n> THE GOOD NEWS: several refinements have been noted which could get BIP91 (or\n> splitprotection, Segwit2x, etc) deployed faster:\n> - Of course the 80% threshold could just be reduced, eg to splitprotection's\n> 65%\n\nThis still doesn't prevent the split if 45% or more of the hashrate\nkeeps blocking segwit, so I don't see how this help.\n\n> - BIP91 nodes could start signaling on bit 1 the moment bit 4 reaches\n> lock-in, rather than waiting another period until it  \"activates\".\n\nMiners could start signaling bit 1 today, before they use bip91 too\nand signal bit 4 in addition.\nBut they aren't doing it, it seems they prefer to block segwit. I\ndon't see why changing using bit 4 or reducing the threshold would\nchange their mind.\n\n> THE BAD NEWS: no one should underestimate the steps that would need to be\n> completed by that deadline:\n> 1. Coordinate on a solution (BIP91, splitprotection, Segwit2x, BIP148\n> itself, ...)\n> 2. Implement and test it\n> 3. Convince >50% of miners to run it [2]\n> 4. Miners upgrade to the new software and begin signaling\n>\n> In particular, #3: afaict a lot of convincing is still needed before miner\n> support for any of these reaches anything like 50%.  (With the exception of\n> Segwit2x, but it has the additional handicap that it probably needs to\n> include deployable hard fork code, obviously ambitious in 1.5 months.)\n>\n\nOr you can replace this whole plan with the step 3, convincing miners\nto stop blocking segwit, upgrade to segwit capable code if they\nhaven't already and signal bit 1 to activate it.\nIf you don't get that, there's going to be a split. Unless bip148 is\naborted in favor of bip149, which seems unlikely.\n\nIf we had 51%+ of the hashrate currently signaling segwit, I believe\nthere would be no problem convincing people to move from bip148 to\nbip91, but we don't have that.\n\nTo me the lesson is not rushed deployments but bip8 and never commit\nthe mistake of giving miners the ability to block changes again, like\nwe did with csv and segwit, but using bip8 instead of bip9 from now\non.\n\n> [1] See Saicere's comment:\n> https://github.com/btc1/bitcoin/pull/11#discussion_r121086886, and related\n> discussion at\n> https://github.com/btc1/bitcoin/pull/11#issuecomment-307330011.\n>\n> [2] Note that >50% need to run the *solution*, eg BIP91; old BIP141 nodes\n> signaling segwit support do *not* count, since they won't orphan non-bit-1\n> blocks.  The impending split isn't between nodes that support segwit vs\n> don't, but between those that reject non-segwit-supporting blocks vs don't.\n>\n>\n> On Fri, Jun 9, 2017 at 1:23 AM, Jacob Eliosoff <jacob.eliosoff at gmail.com>\n> wrote:\n>>\n>> Ah, two corrections:\n>> 1. I meant to include an option c): of course >50% of hashpower running\n>> BIP148 by Aug 1 avoids a split.\n>> 2. More seriously, I misrepresented BIP148's logic: it doesn't require\n>> segwit *activation*, just orphans non-segwit-*signaling* (bit 1) blocks from\n>> Aug 1.\n>>\n>> I believe that means 80% of hashrate would need to be running BIP91\n>> (signaling bit 4) by ~June 30 (so BIP91 locks in ~July 13, activates ~July\n>> 27), not \"a few days ago\" as I claimed.  So, tight timing, but not\n>> impossible.\n>>\n>> Sorry about the errors.\n>>\n>>\n>> On Fri, Jun 9, 2017 at 12:40 AM, Jacob Eliosoff <jacob.eliosoff at gmail.com>\n>> wrote:\n>>>\n>>> I've been trying to work out the expected interaction between James\n>>> Hilliard's BIP91 [1] (or splitprotection [2], or Segwit2x [3], which both\n>>> use variants of BIP91 activation) and the BIP148 UASF [4].  Some of this is\n>>> subtle so CORRECTIONS WELCOME, but my conclusions are:\n>>> 1. It's extremely unlikely BIP91-type logic can activate segwit in time\n>>> to avoid a BIP148 chain split.\n>>> 2. So, in practice all we can do is ensure the BIP148 split is as\n>>> painless as possible.\n>>>\n>>> REASONING:  First, some dates.  BIP148, whose deadline is already\n>>> deployed and thus unlikely to be postponed, starts orphaning non-segwit\n>>> blocks on midnight (GMT) the morning of August 1.  Meanwhile, here are\n>>> Bitcoin's rough expected next four difficulty adjustment dates (they could\n>>> vary by ~1-3 days depending on block times, but it's unlikely to matter\n>>> here):\n>>> 1. June 17\n>>> 2. June 30\n>>> 3. July 13\n>>> 4. July 27\n>>>\n>>> If Segwit activates on adj date #5 or later (August), it will be too late\n>>> to avoid BIP148's split, which will have occurred the moment August began.\n>>> So, working backwards, and assuming we want compatibility with old BIP141\n>>> nodes:\n>>>\n>>> - Segwit MUST activate by adj #4 (~July 27)\n>>> - Therefore segwit MUST be locked in by adj #3 (~July 13: this is\n>>> inflexible, since this logic is in already-deployed BIP141 nodes)\n>>> - Therefore, I *think* >50% of hashpower needs to be BIP91 miners,\n>>> signaling bit 1 and orphaning non-BIP91 (ie, BIP91's bit 4 must activate),\n>>> by adj #2 (June 30)?\n>>> - Therefore, as currently designed, BIP91 bit 4 must be locked in by adj\n>>> #1 (June 17)\n>>> - Therefore, >=80% of hashrate must start signaling BIP91's bit 4 by a\n>>> few days ago...\n>>>\n>>> There are ways parts of this could be sped up, eg, James' \"rolling\n>>> 100-block lock-in periods\" [5], to get BIP91 signaling bit 1 sooner.  But to\n>>> be compatible with old BIP141 nodes, >50% of hashrate must be activated\n>>> BIP91 miners by ~June 30: there's no fudging that.\n>>>\n>>> So, it seems to me that to avoid the BIP148 split, one of two things\n>>> would have to happen:\n>>> a) 95% of hashrate start signaling bit 1 by ~June 30.  Given current stat\n>>> is 32%, this would basically require magic.\n>>> b) BIP91 is deployed and >50% (80% or whatever) of hashrate is\n>>> *activated* BIP91 miners by ~June 30, ~3 weeks from now.  Again, much too\n>>> soon.\n>>>\n>>> So, I think the BIP148 split is inevitable.  I actually expect that few\n>>> parts of the ecosystem will join the fork, so disruption will be bearable.\n>>> But anyway let me know any flaws in the reasoning above.\n>>>\n>>> [1] https://github.com/bitcoin/bips/blob/master/bip-0091.mediawiki\n>>> [2]\n>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014508.html\n>>> [3] https://github.com/btc1/bitcoin/pull/11\n>>> [4] https://github.com/bitcoin/bips/blob/master/bip-0148.mediawiki\n>>> [5] https://github.com/btc1/bitcoin/pull/6#issuecomment-305917729\n>>\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2017-06-11T17:12:35",
                "message_text_only": "oops s/45%/35%/\n\nOn Sun, Jun 11, 2017 at 7:11 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> On Sat, Jun 10, 2017 at 8:04 PM, Jacob Eliosoff via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Just a quick follow-up on BIP91's prospects of avoiding a BIP148 chain\n>> split, because I may have left an overly pessimistic impression -\n>>\n>> In short: the timing isn't as dire as I suggested, BUT unless concrete\n>> progress on a plan starts taking shape, esp miner support, *the split is\n>> indeed coming.*\n>>\n>> THE GOOD NEWS: several refinements have been noted which could get BIP91 (or\n>> splitprotection, Segwit2x, etc) deployed faster:\n>> - Of course the 80% threshold could just be reduced, eg to splitprotection's\n>> 65%\n>\n> This still doesn't prevent the split if 45% or more of the hashrate\n> keeps blocking segwit, so I don't see how this help.\n>\n>> - BIP91 nodes could start signaling on bit 1 the moment bit 4 reaches\n>> lock-in, rather than waiting another period until it  \"activates\".\n>\n> Miners could start signaling bit 1 today, before they use bip91 too\n> and signal bit 4 in addition.\n> But they aren't doing it, it seems they prefer to block segwit. I\n> don't see why changing using bit 4 or reducing the threshold would\n> change their mind.\n>\n>> THE BAD NEWS: no one should underestimate the steps that would need to be\n>> completed by that deadline:\n>> 1. Coordinate on a solution (BIP91, splitprotection, Segwit2x, BIP148\n>> itself, ...)\n>> 2. Implement and test it\n>> 3. Convince >50% of miners to run it [2]\n>> 4. Miners upgrade to the new software and begin signaling\n>>\n>> In particular, #3: afaict a lot of convincing is still needed before miner\n>> support for any of these reaches anything like 50%.  (With the exception of\n>> Segwit2x, but it has the additional handicap that it probably needs to\n>> include deployable hard fork code, obviously ambitious in 1.5 months.)\n>>\n>\n> Or you can replace this whole plan with the step 3, convincing miners\n> to stop blocking segwit, upgrade to segwit capable code if they\n> haven't already and signal bit 1 to activate it.\n> If you don't get that, there's going to be a split. Unless bip148 is\n> aborted in favor of bip149, which seems unlikely.\n>\n> If we had 51%+ of the hashrate currently signaling segwit, I believe\n> there would be no problem convincing people to move from bip148 to\n> bip91, but we don't have that.\n>\n> To me the lesson is not rushed deployments but bip8 and never commit\n> the mistake of giving miners the ability to block changes again, like\n> we did with csv and segwit, but using bip8 instead of bip9 from now\n> on.\n>\n>> [1] See Saicere's comment:\n>> https://github.com/btc1/bitcoin/pull/11#discussion_r121086886, and related\n>> discussion at\n>> https://github.com/btc1/bitcoin/pull/11#issuecomment-307330011.\n>>\n>> [2] Note that >50% need to run the *solution*, eg BIP91; old BIP141 nodes\n>> signaling segwit support do *not* count, since they won't orphan non-bit-1\n>> blocks.  The impending split isn't between nodes that support segwit vs\n>> don't, but between those that reject non-segwit-supporting blocks vs don't.\n>>\n>>\n>> On Fri, Jun 9, 2017 at 1:23 AM, Jacob Eliosoff <jacob.eliosoff at gmail.com>\n>> wrote:\n>>>\n>>> Ah, two corrections:\n>>> 1. I meant to include an option c): of course >50% of hashpower running\n>>> BIP148 by Aug 1 avoids a split.\n>>> 2. More seriously, I misrepresented BIP148's logic: it doesn't require\n>>> segwit *activation*, just orphans non-segwit-*signaling* (bit 1) blocks from\n>>> Aug 1.\n>>>\n>>> I believe that means 80% of hashrate would need to be running BIP91\n>>> (signaling bit 4) by ~June 30 (so BIP91 locks in ~July 13, activates ~July\n>>> 27), not \"a few days ago\" as I claimed.  So, tight timing, but not\n>>> impossible.\n>>>\n>>> Sorry about the errors.\n>>>\n>>>\n>>> On Fri, Jun 9, 2017 at 12:40 AM, Jacob Eliosoff <jacob.eliosoff at gmail.com>\n>>> wrote:\n>>>>\n>>>> I've been trying to work out the expected interaction between James\n>>>> Hilliard's BIP91 [1] (or splitprotection [2], or Segwit2x [3], which both\n>>>> use variants of BIP91 activation) and the BIP148 UASF [4].  Some of this is\n>>>> subtle so CORRECTIONS WELCOME, but my conclusions are:\n>>>> 1. It's extremely unlikely BIP91-type logic can activate segwit in time\n>>>> to avoid a BIP148 chain split.\n>>>> 2. So, in practice all we can do is ensure the BIP148 split is as\n>>>> painless as possible.\n>>>>\n>>>> REASONING:  First, some dates.  BIP148, whose deadline is already\n>>>> deployed and thus unlikely to be postponed, starts orphaning non-segwit\n>>>> blocks on midnight (GMT) the morning of August 1.  Meanwhile, here are\n>>>> Bitcoin's rough expected next four difficulty adjustment dates (they could\n>>>> vary by ~1-3 days depending on block times, but it's unlikely to matter\n>>>> here):\n>>>> 1. June 17\n>>>> 2. June 30\n>>>> 3. July 13\n>>>> 4. July 27\n>>>>\n>>>> If Segwit activates on adj date #5 or later (August), it will be too late\n>>>> to avoid BIP148's split, which will have occurred the moment August began.\n>>>> So, working backwards, and assuming we want compatibility with old BIP141\n>>>> nodes:\n>>>>\n>>>> - Segwit MUST activate by adj #4 (~July 27)\n>>>> - Therefore segwit MUST be locked in by adj #3 (~July 13: this is\n>>>> inflexible, since this logic is in already-deployed BIP141 nodes)\n>>>> - Therefore, I *think* >50% of hashpower needs to be BIP91 miners,\n>>>> signaling bit 1 and orphaning non-BIP91 (ie, BIP91's bit 4 must activate),\n>>>> by adj #2 (June 30)?\n>>>> - Therefore, as currently designed, BIP91 bit 4 must be locked in by adj\n>>>> #1 (June 17)\n>>>> - Therefore, >=80% of hashrate must start signaling BIP91's bit 4 by a\n>>>> few days ago...\n>>>>\n>>>> There are ways parts of this could be sped up, eg, James' \"rolling\n>>>> 100-block lock-in periods\" [5], to get BIP91 signaling bit 1 sooner.  But to\n>>>> be compatible with old BIP141 nodes, >50% of hashrate must be activated\n>>>> BIP91 miners by ~June 30: there's no fudging that.\n>>>>\n>>>> So, it seems to me that to avoid the BIP148 split, one of two things\n>>>> would have to happen:\n>>>> a) 95% of hashrate start signaling bit 1 by ~June 30.  Given current stat\n>>>> is 32%, this would basically require magic.\n>>>> b) BIP91 is deployed and >50% (80% or whatever) of hashrate is\n>>>> *activated* BIP91 miners by ~June 30, ~3 weeks from now.  Again, much too\n>>>> soon.\n>>>>\n>>>> So, I think the BIP148 split is inevitable.  I actually expect that few\n>>>> parts of the ecosystem will join the fork, so disruption will be bearable.\n>>>> But anyway let me know any flaws in the reasoning above.\n>>>>\n>>>> [1] https://github.com/bitcoin/bips/blob/master/bip-0091.mediawiki\n>>>> [2]\n>>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014508.html\n>>>> [3] https://github.com/btc1/bitcoin/pull/11\n>>>> [4] https://github.com/bitcoin/bips/blob/master/bip-0148.mediawiki\n>>>> [5] https://github.com/btc1/bitcoin/pull/6#issuecomment-305917729\n>>>\n>>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>"
            }
        ],
        "thread_summary": {
            "title": "The BIP148 chain split may be inevitable",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jacob Eliosoff",
                "Jorge Tim\u00f3n"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 27743
        }
    },
    {
        "title": "[bitcoin-dev] Drivechain -- Request for Discussion",
        "thread_messages": [
            {
                "author": "Sergio Demian Lerner",
                "date": "2017-06-09T21:54:00",
                "message_text_only": "I'm a bit late to this party. I just want to add that there exists an\nhybrid model where both a federation and the miners provide acknowledges\n(sometimes known as \"votes\" in drivechain terms and \"multi-signatures\" in a\nfederation) of the sidechain state.\n\nMy Drivechain proposal (Feb 2016) was tailored to enable this particular\nuse-case, which I'm not sure Paul's proposal enable.\n\n\nThe proposal is on this list under the following subject: Drivechain\nproposal using OP_COUNT_ACKS\n\nBIP (draft):\nhttps://github.com/rootstock/bips/blob/master/BIP-R10.md\n\nCode & Test cases:\nhttps://github.com/rootstock/bitcoin/tree/op-count-acks_devel\n\nIn this proposal, the \"poll\" time is sidechain-configurable, and I proposed\na few days delay was enough.\nSome have said that a longer times are needed, such as 2 months.\nSo if you want to have a 2 month dalay for sidechain->mainchain transfers\nin this code, you still can. However a better dynamic cache of acks/nacks\nwould be needed. However, for the hybrid use-case, one day is more than\nenough.\n\nRegards\n\n\n\n\nOn Tue, May 30, 2017 at 2:11 AM, Paul Sztorc via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi Peter,\n>\n> Responses below.\n>\n> On 5/28/2017 5:07 PM, Peter Todd wrote:\n> > On Mon, May 22, 2017 at 05:30:46PM +0200, Paul Sztorc wrote:\n> >> Surprisingly, this requirement (or, more precisely, this incentive) does\n> >> not effect miners relative to each other. The incentive to upgrade is\n> only\n> >> for the purpose of preventing a \"theft\" -- defined as: an improper\n> >> withdrawal from a sidechain. It is not about miner revenues or the\n> ability\n> >> to mine generally (or conduct BMM specifically). The costs of such a\n> theft\n> >> (decrease in market price, decrease in future transaction fee levels)\n> would\n> >> be shared collectively by all future miners. Therefore, it would have no\n> >> effect on miners relative to each other.\n> >\n> > That's not at all true. If I'm a miner with a better capability than\n> another\n> > miner to prevent that theft, I have reasons to induce it to happen to\n> give me\n> > political cover to pushing that other miner off the network.\n>\n> Miners can abstain from 'voting', which is politically neutral. Or, if\n> they wish, smaller miners could acquiesce to the coercion and just copy\n> the votes of the attacking 51% group. For users who are only running\n> Bitcoin Core, there is nothing bad about that.\n>\n> As you say, a 51% group can arbitrarily start orphaning the blocks that\n> are mined by non-member rivals. This _may_ be a problem, or it may not,\n> but it is not exacerbated by drivechain.\n>\n> So, what exactly is \"not at all true\"?\n>\n>\n> >\n> > This is a very similar problem to what we had with zeroconf\n> double-spending,\n> > where entities such as Coinbase tried to pay off miners to guarantee\n> something\n> > that wasn't possible in a geninely decrentralized system: safe zeroconf\n> > transactions.\n>\n> I don't see what you mean here. You can't stop Coinbase from donating\n> BTC to a subset of miners. That will always be possible, and it has\n> nothing to do with drivechain (as I see it).\n>\n>\n> >\n> >> Moreover, miners have other recourse if they are unable to run the node.\n> >> They can adopt a policy of simply rejecting (\"downvoting\") any\n> withdrawals\n> >> that they don't understand. This would pause the withdraw process until\n> >> enough miners understand enough of what is going on to proceed with it.\n> >\n> > Why are you forcing miners to run this code at all?\n>\n> Could we not say the same thing about the code behind CLTV?\n>\n> The nature of a contract, is that people are happier to be bound by some\n> rules that they themselves construct (for example, a nuclear\n> non-proliferation treaty).\n>\n> In this case, miners prefer sidechains to exist (as existence makes the\n> BTC they mine more valuable, and provides additional tx fee revenues),\n> and so they would like to run code which makes them possible.\n>\n>\n> >\n> > Equally, you're opening up miners to huge political risks, as rejecting\n> all\n> > withdrawals is preventing users' from getting their money, which gives\n> other\n> > miners a rational for kicking those miners off of Bitcoin entirely.\n>\n> As I explained above, miners can abstain from voting, which is\n> politically neutral, or else they can delegate their vote to an\n> aggressive miner. The \"51% can orphan\" concern could be raised, even in\n> a world without drivechain. All that is required, is for the miners to\n> be anonymous, or in private 'dark' pools (and to thereby escape censure).\n>\n> But there is a much bigger issue here, which is that our threat models\n> are different.\n>\n> As you may know, my threat model [1] does not include miners \"pushing\n> each other off\". It only cares about the miner-experience, to the extent\n> that it impacts the user-experience.\n>\n> Moreover, I reject [2] the premise that we can even measure \"miner\n> centralization\", or even that such a concept exists. If someone has a\n> definition of this concept, which is both measurable and useful, I would\n> be interested to read it.\n>\n> ( For what it's worth, Satoshi did not care about this, either. For\n> example: \"If a greedy attacker is able to assemble more CPU power than\n> all the honest nodes, he...ought to find it more profitable to play by\n> the rules.\" which implies robustness to 51% owned by one entity. )\n>\n> [1] http://www.truthcoin.info/blog/mining-threat-equilibrium/\n> [2] http://www.truthcoin.info/blog/mirage-miner-centralization/\n>\n>\n> >\n> >> Finally, the point in dispute is a single, infrequent, true/false\n> question.\n> >> So miners may resort to semi-trusted methods to supplement their\n> decision.\n> >> In other words, they can just ask people they trust, if the withdrawal\n> is\n> >> correct or not. It is up to users to decide if they are comfortable with\n> >> these risks, if/when they decide to deposit to a sidechain.\n> >\n> > Why do you think this will be infrequent? Miners with a better ability to\n> > validate the drivechain have every reason to make these events more\n> frequent.\n>\n> It is part of the spec. These timing parameters must be agreed upon when\n> the sidechain is added, ie _before_ users deposit to the sidechain. Once\n> the sidechain is created, the timing is enforced by nodes, the same as\n> with any other protocol rules. Miner-validation-ability has no effect on\n> the frequency.\n>\n>\n> >\n> >> It is a matter of comparing the costs and benefits. Ignoring theft, the\n> >> costs are near-zero, and the benefits are >0. Specifically, they are: a\n> >> higher BTC price and greater transaction fees. Theft is discouraged by\n> >> attempting to tie a theft to a loss of confidence in the miners, as\n> >> described in the spec/website.\n> >> In general the incentives are very similar to those of Bitcoin itself.\n> >\n> > This is also a very dubious security model - I would argue that Bitcoin\n> is much\n> > *more* valuable if miners do everything they can to ensure that\n> drivechains\n> > fail, given the huge risks involved.\n>\n> I don't see how. Users are free to ignore the sidechain, so it can only\n> benefit them.\n>\n> Fortunately for you, if that is actually what miners believe, then there\n> will be no problem, as miners will just filter out drivechains (so that\n> Bitcoin will be \"much *more* valuable\"), which they can easily do.\n>\n>\n> >                                      I would also argue that users\n> should do\n> > user-activated-soft-forks to ensure they fail.\n>\n> Again, I don't think that kind of UASF can succeed, because one option\n> strictly dominates the other. But the users get the final say, of course.\n>\n> Empirically, I have observed overwhelming support for sidechains among\n> users, business, and other developers. The btc-investors I spoke to were\n> all very excited about the prospect of sidechains, even more so than\n> they were excited about SegWit.\n>\n>\n> >\n> > By comparison, note Adam Back and my own efforts to ensure miners have a\n> > smaller part in the ecosystem, with things like committed (encrypted)\n> > transactions and my closed-seal-set/truth-list approach(1). We want to\n> involve\n> > miners as little as possible in the consensus, not more.\n>\n> I agree that miners should have as little influence as possible (and\n> they probably agree, as well). But a 51% group can filter any message\n> they like from the blockchain. For sidechains, there will need to be two\n> public networks, so concealment is not an option.\n>\n> And, I repeat, for regular users of Bitcoin Core, drivechain does not\n> make a 51% group more dangerous than they already are.\n>\n> Moreover, there are cases [1] where miner-involvement can make a big\n> _positive_ impact. Just as it can be beneficial (essential, in fact) for\n> Bitcoin to filter out harmful interactions among txns (in other words,\n> good for miners to filter out double spends), I have discovered\n> situations where it is beneficial and essential for miners to filter out\n> harmful interactions among multiple chains.\n>\n> So I think I am actually hitting the \"as little as possible\" target.\n>\n> [1] http://www.truthcoin.info/blog/wise-contracts/#wise-contracts\n>\n>\n> >\n> > I have to ask: What use-cases do you actually see for drivechains? Why\n> can't\n>\n> Here is a tentative project list:\n> http://www.drivechain.info/projects/index.html\n>\n> And, as I say on the FAQ, \"If each individual user is free to sell\n> his/her BTC in exchange for an Altcoin (or for fiat), we can hardly deny\n> users the opportunity to move their money between two sidechains.\"\n>\n> So, in a strong way, the entire altcoin market makes the case for a\n> usefulness of sidechains. Bitcoin is a form of money, and only one form\n> of money can exist per currency area. So, if Bitcoin is not the winner,\n> it will eventually cease to exist altogether. Altcoin-competition is an\n> existential threat to Bitcoin, one which is far more relevant than\n> anything you've presented so far.\n>\n> Secondly, one important value of permissionless innovation is that one\n> doesn't really know, today, what cool ideas other people are going to\n> come up with tomorrow. If you did, they'd be today's ideas.\n>\n> Third, Core's review process has two opposite problems: on one hand it\n> is slow and grueling, and on the other it is fraught with the\n> possibility of catastrophic error. It would be better, for everyone, to\n> allow people to try their own (non-aggressive) experiments, and to make\n> their own mistakes. Already, I have seen the review process abused to\n> create/maintain fiefdoms of expertise, so that the abusers can extract\n> money from clients/employers/VCs.\n>\n> Just think of all of the free time you would have, Peter, if you didn't\n> have to spend it all reviewing these projects!\n>\n>\n> > those use-cases be done in the much safer client-side validation fashion?\n>\n> ? How is drivechain _not_ within the category of client-side validation?\n> With BMM, validation is only performed by those users (\"clients\") who\n> opt-in to the new features. The economic model of BMM is directly\n> comparable to that of Bitcoin's PoW -- the highest-bid chain should be\n> the healthiest one.\n>\n> Can you post the Github link for your most up-to-date client-side\n> validation work so that we can compare the safety and other features?\n>\n> Thanks,\n> Paul\n>\n> >\n> > 1) https://petertodd.org/2016/closed-seal-sets-and-truth-\n> lists-for-privacy\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170609/a377994a/attachment-0001.html>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-06-10T16:28:09",
                "message_text_only": "Hi Sergio / everyone,\n\nAs some of you may know, Sergio and I each did an implementation of\ndrivechain. I started working on mine, and he started working on his,\nand then I didn't hear from him for awhile about what he was doing.\n\nAnyways, with two versions, we each have an opportunity to double-check\nour work. For example, this already happened wrt the \"ACK size\". Let me\nshare from his linked BIP:\n\n    \"By allowing miners to refer to transaction candidates by\ntransaction id prefixes, the space consumption for a single ack can be\nas low as 2 bytes.\"\n\nSergio shared this with me last October at Scaling Milan. After\nlistening to him, we saw an opportunity to improve our design: now, our\nminers can conjecture that miners will grant ACKs in a few simple ways\n[always honest, honest+ignore some, ignore all], and it will precompute\nthese possibilities (guessing what rival miners will do, even before\nthey find and broadcast a new block). Therefore, in all honest cases,\nour ACK-counting now requires zero (0) bytes to be sent over the\nnetwork. In dishonest cases it requires only a few bits per sidechain,\nbecause we also maintain a deterministically ordered list, both of\nsidechains and withdrawal attempts -- therefore it can just be a string\nof binary information. This is not part of consensus, and so can be\nfurther improved over time.\n\nI'm sure there are still a few opportunities for mutual improvements\ngoing forward.\n\nIn general, Sergio and I disagree over the withdrawal-frequency. a major\ndifference of opinion is over the withdrawal-frequency. I view\ninfrequent withdrawal as essential to the security model, but Sergio\ndoes not. In both our designs, the withdrawal-time is configurable, but\nSergio's design seems to be optimized for cases with frequent withdrawal\nattempts, whereas mine is optimized for cases with very infrequent\nwithdrawal attempts.\n\nAnother difference is that, as a direct result of earlier peer review, I\nhave been integrating 'blind merged mining' into my version. It may be\neasy for Sergio to add BMM to his version, or it may not.\n\nIt is true that I am not interested in the hybrid model. I would not\nmake use of the multisig / centralized part, and so for me it\ncomplicates the security properties for no benefit. I see why some\npeople are interested in it, though.\n\nPaul\n\n\n\nOn 6/9/2017 5:54 PM, Sergio Demian Lerner wrote:\n> I'm a bit late to this party. I just want to add that there exists an\n> hybrid model where both a federation and the miners provide acknowledges\n> (sometimes known as \"votes\" in drivechain terms and \"multi-signatures\"\n> in a federation) of the sidechain state.\n> \n> My Drivechain proposal (Feb 2016) was tailored to enable this particular\n> use-case, which I'm not sure Paul's proposal enable.\n> \n> \n> The proposal is on this list under the following subject: Drivechain\n> proposal using OP_COUNT_ACKS\n> \n> BIP (draft):\n> https://github.com/rootstock/bips/blob/master/BIP-R10.md\n> <https://github.com/rootstock/bips/blob/master/BIP-R10.md>\n> \n> Code & Test cases:\n> https://github.com/rootstock/bitcoin/tree/op-count-acks_devel\n> <https://github.com/rootstock/bitcoin/tree/op-count-acks_devel>\n> \n> In this proposal, the \"poll\" time is sidechain-configurable, and I\n> proposed a few days delay was enough. \n> Some have said that a longer times are needed, such as 2 months.  \n> So if you want to have a 2 month dalay for sidechain->mainchain\n> transfers in this code, you still can. However a better dynamic cache of\n> acks/nacks would be needed. However, for the hybrid use-case, one day is\n> more than enough.\n> \n> Regards\n> \n> \n> \n> \n> On Tue, May 30, 2017 at 2:11 AM, Paul Sztorc via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n>     Hi Peter,\n> \n>     Responses below.\n> \n>     On 5/28/2017 5:07 PM, Peter Todd wrote:\n>     > On Mon, May 22, 2017 at 05:30:46PM +0200, Paul Sztorc wrote:\n>     >> Surprisingly, this requirement (or, more precisely, this incentive) does\n>     >> not effect miners relative to each other. The incentive to upgrade is only\n>     >> for the purpose of preventing a \"theft\" -- defined as: an improper\n>     >> withdrawal from a sidechain. It is not about miner revenues or the ability\n>     >> to mine generally (or conduct BMM specifically). The costs of such a theft\n>     >> (decrease in market price, decrease in future transaction fee levels) would\n>     >> be shared collectively by all future miners. Therefore, it would have no\n>     >> effect on miners relative to each other.\n>     >\n>     > That's not at all true. If I'm a miner with a better capability than another\n>     > miner to prevent that theft, I have reasons to induce it to happen to give me\n>     > political cover to pushing that other miner off the network.\n> \n>     Miners can abstain from 'voting', which is politically neutral. Or, if\n>     they wish, smaller miners could acquiesce to the coercion and just copy\n>     the votes of the attacking 51% group. For users who are only running\n>     Bitcoin Core, there is nothing bad about that.\n> \n>     As you say, a 51% group can arbitrarily start orphaning the blocks that\n>     are mined by non-member rivals. This _may_ be a problem, or it may not,\n>     but it is not exacerbated by drivechain.\n> \n>     So, what exactly is \"not at all true\"?\n> \n> \n>     >\n>     > This is a very similar problem to what we had with zeroconf double-spending,\n>     > where entities such as Coinbase tried to pay off miners to guarantee something\n>     > that wasn't possible in a geninely decrentralized system: safe zeroconf\n>     > transactions.\n> \n>     I don't see what you mean here. You can't stop Coinbase from donating\n>     BTC to a subset of miners. That will always be possible, and it has\n>     nothing to do with drivechain (as I see it).\n> \n> \n>     >\n>     >> Moreover, miners have other recourse if they are unable to run the node.\n>     >> They can adopt a policy of simply rejecting (\"downvoting\") any withdrawals\n>     >> that they don't understand. This would pause the withdraw process until\n>     >> enough miners understand enough of what is going on to proceed with it.\n>     >\n>     > Why are you forcing miners to run this code at all?\n> \n>     Could we not say the same thing about the code behind CLTV?\n> \n>     The nature of a contract, is that people are happier to be bound by some\n>     rules that they themselves construct (for example, a nuclear\n>     non-proliferation treaty).\n> \n>     In this case, miners prefer sidechains to exist (as existence makes the\n>     BTC they mine more valuable, and provides additional tx fee revenues),\n>     and so they would like to run code which makes them possible.\n> \n> \n>     >\n>     > Equally, you're opening up miners to huge political risks, as rejecting all\n>     > withdrawals is preventing users' from getting their money, which gives other\n>     > miners a rational for kicking those miners off of Bitcoin entirely.\n> \n>     As I explained above, miners can abstain from voting, which is\n>     politically neutral, or else they can delegate their vote to an\n>     aggressive miner. The \"51% can orphan\" concern could be raised, even in\n>     a world without drivechain. All that is required, is for the miners to\n>     be anonymous, or in private 'dark' pools (and to thereby escape\n>     censure).\n> \n>     But there is a much bigger issue here, which is that our threat models\n>     are different.\n> \n>     As you may know, my threat model [1] does not include miners \"pushing\n>     each other off\". It only cares about the miner-experience, to the extent\n>     that it impacts the user-experience.\n> \n>     Moreover, I reject [2] the premise that we can even measure \"miner\n>     centralization\", or even that such a concept exists. If someone has a\n>     definition of this concept, which is both measurable and useful, I would\n>     be interested to read it.\n> \n>     ( For what it's worth, Satoshi did not care about this, either. For\n>     example: \"If a greedy attacker is able to assemble more CPU power than\n>     all the honest nodes, he...ought to find it more profitable to play by\n>     the rules.\" which implies robustness to 51% owned by one entity. )\n> \n>     [1] http://www.truthcoin.info/blog/mining-threat-equilibrium/\n>     <http://www.truthcoin.info/blog/mining-threat-equilibrium/>\n>     [2] http://www.truthcoin.info/blog/mirage-miner-centralization/\n>     <http://www.truthcoin.info/blog/mirage-miner-centralization/>\n> \n> \n>     >\n>     >> Finally, the point in dispute is a single, infrequent, true/false question.\n>     >> So miners may resort to semi-trusted methods to supplement their decision.\n>     >> In other words, they can just ask people they trust, if the withdrawal is\n>     >> correct or not. It is up to users to decide if they are comfortable with\n>     >> these risks, if/when they decide to deposit to a sidechain.\n>     >\n>     > Why do you think this will be infrequent? Miners with a better ability to\n>     > validate the drivechain have every reason to make these events more frequent.\n> \n>     It is part of the spec. These timing parameters must be agreed upon when\n>     the sidechain is added, ie _before_ users deposit to the sidechain. Once\n>     the sidechain is created, the timing is enforced by nodes, the same as\n>     with any other protocol rules. Miner-validation-ability has no effect on\n>     the frequency.\n> \n> \n>     >\n>     >> It is a matter of comparing the costs and benefits. Ignoring theft, the\n>     >> costs are near-zero, and the benefits are >0. Specifically, they are: a\n>     >> higher BTC price and greater transaction fees. Theft is discouraged by\n>     >> attempting to tie a theft to a loss of confidence in the miners, as\n>     >> described in the spec/website.\n>     >> In general the incentives are very similar to those of Bitcoin itself.\n>     >\n>     > This is also a very dubious security model - I would argue that Bitcoin is much\n>     > *more* valuable if miners do everything they can to ensure that drivechains\n>     > fail, given the huge risks involved.\n> \n>     I don't see how. Users are free to ignore the sidechain, so it can only\n>     benefit them.\n> \n>     Fortunately for you, if that is actually what miners believe, then there\n>     will be no problem, as miners will just filter out drivechains (so that\n>     Bitcoin will be \"much *more* valuable\"), which they can easily do.\n> \n> \n>     >                                      I would also argue that users should do\n>     > user-activated-soft-forks to ensure they fail.\n> \n>     Again, I don't think that kind of UASF can succeed, because one option\n>     strictly dominates the other. But the users get the final say, of\n>     course.\n> \n>     Empirically, I have observed overwhelming support for sidechains among\n>     users, business, and other developers. The btc-investors I spoke to were\n>     all very excited about the prospect of sidechains, even more so than\n>     they were excited about SegWit.\n> \n> \n>     >\n>     > By comparison, note Adam Back and my own efforts to ensure miners have a\n>     > smaller part in the ecosystem, with things like committed (encrypted)\n>     > transactions and my closed-seal-set/truth-list approach(1). We want to involve\n>     > miners as little as possible in the consensus, not more.\n> \n>     I agree that miners should have as little influence as possible (and\n>     they probably agree, as well). But a 51% group can filter any message\n>     they like from the blockchain. For sidechains, there will need to be two\n>     public networks, so concealment is not an option.\n> \n>     And, I repeat, for regular users of Bitcoin Core, drivechain does not\n>     make a 51% group more dangerous than they already are.\n> \n>     Moreover, there are cases [1] where miner-involvement can make a big\n>     _positive_ impact. Just as it can be beneficial (essential, in fact) for\n>     Bitcoin to filter out harmful interactions among txns (in other words,\n>     good for miners to filter out double spends), I have discovered\n>     situations where it is beneficial and essential for miners to filter out\n>     harmful interactions among multiple chains.\n> \n>     So I think I am actually hitting the \"as little as possible\" target.\n> \n>     [1] http://www.truthcoin.info/blog/wise-contracts/#wise-contracts\n>     <http://www.truthcoin.info/blog/wise-contracts/#wise-contracts>\n> \n> \n>     >\n>     > I have to ask: What use-cases do you actually see for drivechains? Why can't\n> \n>     Here is a tentative project list:\n>     http://www.drivechain.info/projects/index.html\n>     <http://www.drivechain.info/projects/index.html>\n> \n>     And, as I say on the FAQ, \"If each individual user is free to sell\n>     his/her BTC in exchange for an Altcoin (or for fiat), we can hardly deny\n>     users the opportunity to move their money between two sidechains.\"\n> \n>     So, in a strong way, the entire altcoin market makes the case for a\n>     usefulness of sidechains. Bitcoin is a form of money, and only one form\n>     of money can exist per currency area. So, if Bitcoin is not the winner,\n>     it will eventually cease to exist altogether. Altcoin-competition is an\n>     existential threat to Bitcoin, one which is far more relevant than\n>     anything you've presented so far.\n> \n>     Secondly, one important value of permissionless innovation is that one\n>     doesn't really know, today, what cool ideas other people are going to\n>     come up with tomorrow. If you did, they'd be today's ideas.\n> \n>     Third, Core's review process has two opposite problems: on one hand it\n>     is slow and grueling, and on the other it is fraught with the\n>     possibility of catastrophic error. It would be better, for everyone, to\n>     allow people to try their own (non-aggressive) experiments, and to make\n>     their own mistakes. Already, I have seen the review process abused to\n>     create/maintain fiefdoms of expertise, so that the abusers can extract\n>     money from clients/employers/VCs.\n> \n>     Just think of all of the free time you would have, Peter, if you didn't\n>     have to spend it all reviewing these projects!\n> \n> \n>     > those use-cases be done in the much safer client-side validation fashion?\n> \n>     ? How is drivechain _not_ within the category of client-side validation?\n>     With BMM, validation is only performed by those users (\"clients\") who\n>     opt-in to the new features. The economic model of BMM is directly\n>     comparable to that of Bitcoin's PoW -- the highest-bid chain should be\n>     the healthiest one.\n> \n>     Can you post the Github link for your most up-to-date client-side\n>     validation work so that we can compare the safety and other features?\n> \n>     Thanks,\n>     Paul\n> \n>     >\n>     > 1)\n>     https://petertodd.org/2016/closed-seal-sets-and-truth-lists-for-privacy\n>     <https://petertodd.org/2016/closed-seal-sets-and-truth-lists-for-privacy>\n>     >\n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> \n>"
            },
            {
                "author": "Chris Stewart",
                "date": "2017-06-18T14:36:24",
                "message_text_only": ">OP_RETURN <sidechain_id> <critical hash>\n\nI think it is redundant here to have the <sidechain id>, we can implicitly\nassume what the sidechain_id is since we have a fixed set of drivechains.\nI.e. mining reward is index 0, mimblewimble sidechain is index 1, etc.\nCryptAxe has specific indexes defined already in his implementation:\nhttps://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/sidechain.h#L26-L30\n.\n\nI think it would be wise to include a version byte to allow us to upgrade\nthis commitment structure in the future. Similar to how witness program's\nare now versioned.\n\n><block height> <sidechain_id> <critical hash> OP_BRIBE_VERIFY\n\nIf <block height> is an argument that OP_BRIBE_VERIFY takes, doesn't that\nmean the mainchain miner has to validate this *is* the actual block height\non the sidechain? Does that take the 'blindness' away from BMM?\n\nOverall, I think we need to work on the commitment structure to the\ncoinbase tx. If I understand the current implementation correctly we can\nhave up to 256 OP_RETURNs embedded in the coinbase tx signifying new blocks\nmined on drivechains.. this seems less than ideal. It might be prudent to\nmake these outputs ANYONECANSPEND, and then have miners spending these\noutputs to themselves for every block mined.. maybe this doesn't have a\nbenefit over using OP_RETURNs though?\n\nThe structure could be something like:\n<version> <critical hash>\n\nand then in a subsequent block the miner spends that output to themselves.\nI will admit I'm not super familiar with how OP_RETURNs work with the UTXO\nset -- maybe this scheme doesn't have any benefit.\n\n-Chris\n\nOn Wed, May 24, 2017 at 3:50 AM, Tier Nolan via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Tue, May 23, 2017 at 3:22 PM, Paul Sztorc <truthcoin at gmail.com> wrote:\n>\n>>\n>> If you haven't seen http://www.truthcoin.info/blog/drivechain/ , that is\n>> probably the most human-readable description.\n>>\n>\n> I guess I was looking for the detail you get in the code, but without\n> having to read the code.\n>\n> My quick reading gives that the sidechain codes (critical hashes) are\n> added when a coinbase is processed.\n>\n> Any coinbase output that has the form \"OP_RETURN <32 byte push>\" counts as\n> a potential critical hash.\n>\n> When the block is processed, the key value pair (hash, block_height) is\n> added to a hash map.\n>\n> The OP_BRIBE opcode checks that the given hash is in the hash map and\n> replaces the top element on the stack with the pass/fail result.\n>\n> It doesn't even check that the height matches the current block, though\n> there is a comment that that is a TODO.\n>\n> I agree with ZmnSCPxj, when updating a nop, you can't change the stack.\n> It has to fail the script or do nothing.\n>\n> OP_BRIBE_VERIFY would cause the script to fail if the hash wasn't in the\n> coinbase, or cause a script failure otherwise.\n>\n> Another concern is that you could have multiple bribes for the same chain\n> in a single coinbase.  That isn't fair and arguably what the sidechain\n> miner is paying for is to get his hash exclusively into the block.\n>\n> I would suggest that the output is\n>\n> OP_RETURN <sidechain_id> <critical hash>\n>\n> Then add the rule that only the first hash with a particular sidechain id\n> actually counts.\n>\n> This forces the miner to only accept the bribe from 1 miner for each\n> sidechain for each block.  If he tries to accept 2, then only the first one\n> counts.\n>\n> OP_BRIBE_VERIFY could then operate as follows\n>\n> <block height> <sidechain_id> <critical hash> OP_BRIBE_VERIFY\n>\n> This causes the script to fail if\n>   <block height> does not match the block height, or\n>   <critical hash> is not the hash for the sidechain with <sidechain_id>, or\n>   there is no hash for that sidechain in the block's coinbase\n>\n> If you want reduce the number of drops, you could serialize the info into\n> a single push.\n>\n> This has the advantage that a sidechain miner only has to pay if his block\n> is accepted in the next bitcoin block.  Since he is the only miner for that\n> sidechain that gets into the main bitcoin block, he is pretty much\n> guaranteed to form the longest chain.\n>\n> Without that rule, sidechain miners could end up having to pay even though\n> it doesn't make their chain the longest.\n>\n> How are these transactions propagated over the network?  For relaying, you\n> could have the rule that the opcode passes as long as <block height> is\n> near the current block height.  Maybe require that they are in the future.\n> They should be removed from the memory pool once the block height has\n> arrived, so losing miners can re-spend those outputs.\n>\n> This opcode can be validated without needing to look at other blocks,\n> which is good for validating historical blocks.\n>\n> I am still looking at the deposit/withdrawal code.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170618/03f7a3c8/attachment.html>"
            },
            {
                "author": "CryptAxe",
                "date": "2017-06-18T21:27:52",
                "message_text_only": "> >OP_RETURN <sidechain_id> <critical hash>\n>\n> I think it is redundant here to have the <sidechain id>, we can\n> implicitly assume what the sidechain_id is since we have a fixed set\n> of drivechains. I.e. mining reward is index 0, mimblewimble sidechain\n> is index 1, etc. CryptAxe has specific indexes defined already in his\n> implementation: \n> https://github.com/drivechain-project/bitcoin/blob/mainchainBMM/src/sidechain.h#L26-L30.\n>\n\nSince the sidechain has the sidechain BMM headers that they want the LD\n(bribe) data for, I think that they could specifically request LD data\nrelevant only to that sidechain by providing a list of hashes to the\nmainchain, and the mainchain can return a list of boolean values telling\nthe sidechain if the LD data exists. That way the data never even has to\ngo over the network, just a verification that it exists on the mainchain\nand we can drop the sidechain_id from the script.\n\n\n> I think it would be wise to include a version byte to allow us to\n> upgrade this commitment structure in the future. Similar to how\n> witness program's are now versioned.\n\nAgreed, we need that.\n\n\n>\n> ><block height> <sidechain_id> <critical hash> OP_BRIBE_VERIFY\n>\n> If <block height> is an argument that OP_BRIBE_VERIFY takes, doesn't\n> that mean the mainchain miner has to validate this *is* the actual\n> block height on the sidechain? Does that take the 'blindness' away\n> from BMM?\n\nNo, OP_BRIBE (the old version) didn't care about the block height. Where\nthe blockheight was relevant is when bribe data is added to LD. In order\nto be added to LD, the bribe needed to either be a fork (block height\nless than the sidechain tip height) or extending the current side-chain\n(block height = sidechain tip height + 1). The goal of this was to allow\nfor reorgs, and also make it so that people cannot skip forward (which\nwould never be valid so it's a waste of time and space) so that the\nsidechain makes progress. With the new design that we have been talking\nabout, I think that we will need to drop this requirement from the\nmainchain, and have the sidechain handle filtering out invalid LD data /\nonly requesting the verification of LD data that they know to be valid\nas far as chain order goes.\n\n\n>\n> Overall, I think we need to work on the commitment structure to the\n> coinbase tx.\n\nAgreed. It might be helpful if you outlined the idea you had on IRC to\nthe mailing list.\n\n\n> If I understand the current implementation correctly we can have up to\n> 256 OP_RETURNs embedded in the coinbase tx signifying new blocks mined\n> on drivechains.. this seems less than ideal. It might be prudent to\n> make these outputs ANYONECANSPEND, and then have miners spending these\n> outputs to themselves for every block mined.. maybe this doesn't have\n> a benefit over using OP_RETURNs though?\n>\n> The structure could be something like:\n> <version> <critical hash>\n>\n> and then in a subsequent block the miner spends that output to\n> themselves. I will admit I'm not super familiar with how OP_RETURNs\n> work with the UTXO set -- maybe this scheme doesn't have any benefit.\n>\n> -Chris\n\nI might be wrong but I thought that OP_RETURN outputs do not go into the\nUTXO set. Anyone else want to chime in?"
            },
            {
                "author": "Chris Stewart",
                "date": "2017-06-19T15:41:01",
                "message_text_only": ">\n> Since the sidechain has the sidechain BMM headers that they want the LD\n> (bribe) data for, I think that they could specifically request LD data\n> relevant only to that sidechain by providing a list of hashes to the\n> mainchain, and the mainchain can return a list of boolean values telling\n> the sidechain if the LD data exists. That way the data never even has to\n> go over the network, just a verification that it exists on the mainchain\n> and\n>\n\nSince you seem to be talking about the initial block download process for\nthe drivechain. It seems that we might as well request the set of *valid*\nblocks from a bitcoin peer first, since at the end of the day they are in\ncontrol of the mining process on the sidechain. Here is what I envision:\n\n   1. Request all hashes for sidechain from a bitcoin peer\n   2. Request all sidechain block header's for the hashes the bitcoin peer\n   gave us\n   3. Order the set of sidechain block headers by looking at hashPrevBlock.\n   4. Request full sidechain blocks and start validating against the\n   consensus rule set of the sidechain\n\n\nwe can drop the sidechain_id from the script.\n\nI agree the 'sidechain_id' is unneeded in the coinbase tx output. We should\njust fix these based on index. This should be reflected in my latest commit\nif we are talking about the same thing:\nhttps://github.com/Christewart/bitcoin/blob/c355e39fbe2ea48856ea86b25cb8a97710feb032/src/script/script.cpp#L254\n\n\nand have the sidechain handle filtering out invalid LD data /\n> only requesting the verification of LD data that they know to be valid\n> as far as chain order goes.\n>\n\n I agree, the whole point of BMM is to have bitcoin miners indifferent to\nwhat happens in the sidechain (although Paul argues in a wonky way they do\ncare sort of). If there is an invalid (in the sense the block it represents\ndoes *not* follow the sidechain's consensus rule set) OP_BRIBEVERIFY that\npays *more* money than a valid OP_BRIBEVERIFY output, we need to assume\nthat a 'blind' bitcoin miner will choose the one that pays them the most\nmoney.\n\n>I might be wrong but I thought that OP_RETURN outputs do not go into the\nUTXO set. Anyone else want to chime in?\n\nI'm fairly certain you are right. It just feels like we should be able to\nexploit the fact that *only* miners can claim these OP_BRIBEVERIFY outputs.\nI'll have to think about this more, maybe some one else can come up with\nsomething clever that exploits that fact.\n\nOn Mon, Jun 19, 2017 at 10:24 AM, Chris Stewart <stewart.chris1234 at gmail.com\n> wrote:\n\n> Since the sidechain has the sidechain BMM headers that they want the LD\n>> (bribe) data for, I think that they could specifically request LD data\n>> relevant only to that sidechain by providing a list of hashes to the\n>> mainchain, and the mainchain can return a list of boolean values telling\n>> the sidechain if the LD data exists. That way the data never even has to\n>> go over the network, just a verification that it exists on the mainchain\n>> and\n>>\n>\n> Since you seem to be talking about the initial block download process for\n> the drivechain. It seems that we might as well request the set of *valid*\n> blocks from a bitcoin peer first, since at the end of the day they are in\n> control of the mining process on the sidechain. Here is what I envision:\n>\n>    1. Request all hashes for sidechain from a bitcoin peer\n>    2. Request all sidechain block header's for the hashes the bitcoin\n>    peer gave us\n>    3. Order the set of sidechain block headers by looking at\n>    hashPrevBlock.\n>    4. Request full sidechain blocks and start validating against the\n>    consensus rule set of the sidechain\n>\n>\n> we can drop the sidechain_id from the script.\n>\n> I agree the 'sidechain_id' is unneeded in the coinbase tx output. We\n> should just fix these based on index. This should be reflected in my latest\n> commit if we are talking about the same thing: https://github.com/\n> Christewart/bitcoin/blob/c355e39fbe2ea48856ea86b25cb8a9\n> 7710feb032/src/script/script.cpp#L254\n>\n>\n> and have the sidechain handle filtering out invalid LD data /\n>> only requesting the verification of LD data that they know to be valid\n>> as far as chain order goes.\n>>\n>\n>  I agree, the whole point of BMM is to have bitcoin miners indifferent to\n> what happens in the sidechain (although Paul argues in a wonky way they do\n> care sort of). If there is an invalid (in the sense the block it represents\n> does *not* follow the sidechain's consensus rule set) OP_BRIBEVERIFY that\n> pays *more* money than a valid OP_BRIBEVERIFY output, we need to assume\n> that a 'blind' bitcoin miner will choose the one that pays them the most\n> money.\n>\n> >I might be wrong but I thought that OP_RETURN outputs do not go into the\n> UTXO set. Anyone else want to chime in?\n>\n> I'm fairly certain you are right. It just feels like we should be able to\n> exploit the fact that *only* miners can claim these OP_BRIBEVERIFY outputs.\n> I'll have to think about this more, maybe some one else can come up with\n> something clever that exploits that fact.\n>\n> On Sun, Jun 18, 2017 at 4:27 PM, CryptAxe via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> > >OP_RETURN <sidechain_id> <critical hash>\n>> >\n>> > I think it is redundant here to have the <sidechain id>, we can\n>> > implicitly assume what the sidechain_id is since we have a fixed set\n>> > of drivechains. I.e. mining reward is index 0, mimblewimble sidechain\n>> > is index 1, etc. CryptAxe has specific indexes defined already in his\n>> > implementation:\n>> > https://github.com/drivechain-project/bitcoin/blob/mainchain\n>> BMM/src/sidechain.h#L26-L30.\n>> >\n>>\n>> Since the sidechain has the sidechain BMM headers that they want the LD\n>> (bribe) data for, I think that they could specifically request LD data\n>> relevant only to that sidechain by providing a list of hashes to the\n>> mainchain, and the mainchain can return a list of boolean values telling\n>> the sidechain if the LD data exists. That way the data never even has to\n>> go over the network, just a verification that it exists on the mainchain\n>> and we can drop the sidechain_id from the script.\n>>\n>>\n>> > I think it would be wise to include a version byte to allow us to\n>> > upgrade this commitment structure in the future. Similar to how\n>> > witness program's are now versioned.\n>>\n>> Agreed, we need that.\n>>\n>>\n>> >\n>> > ><block height> <sidechain_id> <critical hash> OP_BRIBE_VERIFY\n>> >\n>> > If <block height> is an argument that OP_BRIBE_VERIFY takes, doesn't\n>> > that mean the mainchain miner has to validate this *is* the actual\n>> > block height on the sidechain? Does that take the 'blindness' away\n>> > from BMM?\n>>\n>> No, OP_BRIBE (the old version) didn't care about the block height. Where\n>> the blockheight was relevant is when bribe data is added to LD. In order\n>> to be added to LD, the bribe needed to either be a fork (block height\n>> less than the sidechain tip height) or extending the current side-chain\n>> (block height = sidechain tip height + 1). The goal of this was to allow\n>> for reorgs, and also make it so that people cannot skip forward (which\n>> would never be valid so it's a waste of time and space) so that the\n>> sidechain makes progress. With the new design that we have been talking\n>> about, I think that we will need to drop this requirement from the\n>> mainchain, and have the sidechain handle filtering out invalid LD data /\n>> only requesting the verification of LD data that they know to be valid\n>> as far as chain order goes.\n>>\n>>\n>> >\n>> > Overall, I think we need to work on the commitment structure to the\n>> > coinbase tx.\n>>\n>> Agreed. It might be helpful if you outlined the idea you had on IRC to\n>> the mailing list.\n>>\n>>\n>> > If I understand the current implementation correctly we can have up to\n>> > 256 OP_RETURNs embedded in the coinbase tx signifying new blocks mined\n>> > on drivechains.. this seems less than ideal. It might be prudent to\n>> > make these outputs ANYONECANSPEND, and then have miners spending these\n>> > outputs to themselves for every block mined.. maybe this doesn't have\n>> > a benefit over using OP_RETURNs though?\n>> >\n>> > The structure could be something like:\n>> > <version> <critical hash>\n>> >\n>> > and then in a subsequent block the miner spends that output to\n>> > themselves. I will admit I'm not super familiar with how OP_RETURNs\n>> > work with the UTXO set -- maybe this scheme doesn't have any benefit.\n>> >\n>> > -Chris\n>>\n>> I might be wrong but I thought that OP_RETURN outputs do not go into the\n>> UTXO set. Anyone else want to chime in?\n>>\n>>\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170619/c36b46e7/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Drivechain -- Request for Discussion",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Sergio Demian Lerner",
                "Chris Stewart",
                "CryptAxe",
                "Paul Sztorc"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 44420
        }
    },
    {
        "title": "[bitcoin-dev] Drivechain RfD -- Follow Up",
        "thread_messages": [
            {
                "author": "Paul Sztorc",
                "date": "2017-06-10T17:04:10",
                "message_text_only": "Hi everyone,\n\nIt has been 3 weeks -- responses so far have been really helpful. People\njumped right in, and identified unfinished or missing parts much faster\nthan I thought they would (ie, ~two days). Very impressive.\n\nCurrently, we are working on the sidechain side of blind merged mining.\nAs you know, most of the Bitcoin cryptosystem is about finding the\nlongest chain, and displaying information about this chain. CryptAxe is\nediting the sidechain code to handle reorganizations in a new way (an\neven bigger departure than Namecoin's, imho).\n\nI believe that I have responded to all the on-list objections that were\nraised. I will 1st summarize the on-list objections, and 2nd summarize\nthe off-list discussion (focusing on three key themes).\n\n\nOn-List Objection Summary\n---------------------------\n\nIn general, they were:\n\n* Peter complained about the resources required for the BMM 'crisis\naudit', I pointed out that it is actually optional (and, therefore,\nfree), and that it doesn't affect miners relative to each other, and\nthat it can be done in an ultra-cheap semi-trusted way with high\nreliability.\n* Peter also asked about miner incentives, I replied that it is profit\nmaximizing to BMM sidechains, because the equation (Tx Fees - Zero Cost)\nis always positive.\n* ZmnSCPxj asked a long series of clarifying questions, and I responded.\n* Tier Nolan complained about my equivocation of the \"Bitcoin: no block\nsubsidy\" case and the \"sidechain\" case. He cites the asymmetry I point\nout below (in #2). I replied, and I give an answer below.\n* ZmnSCPxj pointed out an error in our OP Code (that we will fix).\n* ZmnSCPxj also asked a number of new questions, I responded. Then he\nresponded again, in general he seemed to raise many of the points\naddressed in #1 (below).\n* ZmnSCPxj wanted reorg proofs, to punish reorgers, but I pointed out\nthat if 51% can reorg, they can also filter out the reorg proof. We are\nat their mercy in all cases (for better or worse).\n* ZmnSCPxj also brought up the fact that a block size limit is necessary\nfor a fee market, I pointed out that this limit does not need to be\nimposed on miners by nodes...miners would be willing-and-able to\nself-impose such a limit, as it maximizes their revenues.\n* ZmnSCPxj also protested the need to soft fork in each individual\nsidechain, I pointed out my strong disagreement (\"Unrestrained smart\ncontract execution will be the death of most of the interesting\napplications...[could] destabilize Bitcoin itself\") and introduced my\nprion metaphor.\n* ZmnSCPxj and Tier Nolan both identified the problem solved by our\n'ratchet' concept. I explained it to ZmnSCPxj in my reply. We had not\ncoded it at the time, but there is code for it now [1]. Tier proposed a\nrachet design, but I think ours is better (Tier did not find ours at\nall, because it is buried in obscure notes, because I didn't think\nanyone would make it this far so quickly).\n* Tier also advised us on how to fix the problem that ZmnSCPxj had\nidentified with our NOP earlier.\n* Tier also had a number of suggestions about the real-time negotiation\nof the OP Bribe amount between nodes and miners. I'm afraid I mostly\nignored these for now, as we aren't there yet.\n* Peter complained that ACKing the sidechain could be exploited for\npolitical reasons, and I responded that in such a case, miners are free\nto simply avoid ACKing, or to acquiesce to political pressure. Neither\naffect the mainchain.\n* Peter complained that sidechains might provide some miners with the\nopportunity to create a pretext to kick other miners off the network. I\nreplied that it would not, and I also brought up the fact that my\nBitcoin security model was indifferent to which people happened to be\nmining at any given time. I continue to believe that \"mining\ncentralization\" does not have a useful definition.\n* Peter questioned whether or not sidechains would be useful. I stated\nmy belief that they would be useful, and linked to my site\n(drivechain.info/projects) which contains a number of sidechain\nuse-cases, and cited my personal anecdotal experiences.\n* Peter wanted to involve miners \"as little as possible\", I pointed out\nthat I felt that I had indeed done this minimization. My view is that\nPeter felt erroneously that it was possible to involve miners less,\nbecause he neglected [1] that a 51% miner group is already involved\nmaximally, as they can create most messages and filter any message, and\n[2] that there are cases where we need miners to filter out harmful\ninteractions among multiple chains (just as they filter out harmful\ninteractions among multiple txns [ie, \"double spends\"]). Peter has not\nyet responded to this rebuttal.\n* Peter also suggested client-side validation as \"safer\", and I pointed\nout that sidechains+BMM _is_ client-side validation. I asked Peter for\nCS-V code, so that we can compare the safety and other features.\n* Sergio reminded us of his version of drivechain. Sergio and I disagree\nover the emphasis on frequency/speed of withdrawals. Also Sergio\nemphasizes a hybrid model, which does not interest me.\n\nIf I missed any objections, I hope someone will point them out.\n\n\nOff-List / Three Points of Ongoing Confusion\n---------------------------------------------\n\nOff list, I have repeated the a similar conversation perhaps 6-10 times\nover the past week. There is a cluster of remaining objections which\ncenters around three topics -- speed, theft, and antifragility. I will\nreply here, and add the answers to my FAQ (drivechain.info/faq).\n\n1. Speed\n\nThis objection is voiced after I point out that side-to-main transfers\n(\"withdrawals\") will probably take a long time, for example 5 months\neach ( these are customizable parameters, and open for debate -- but if\nwithdrawals are every x=3 months, and only x=1 withdrawal can make\nforward progress [on the mainchain] at a time, and only x=1 prospective\nwithdrawal can be assembled [by the sidechain] at a time, then we can\nexpect total withdrawal time to average 4.5 months [(.5)*3+3] ). The\nresponse is something like \"won't such a system be too slow, and\ntherefore unusable?\".\n\nImho, replies of this kind disregard the effect of atomic cross-chain\nswaps, which are instant.\n\n( In addition, while side-to-main transfers are slow, main-to-side\ntransfers are quite fast, x~=10 confirmations. I would go as far as to\nsay that, just as the Lightning Network is enabled by SegWit and CSV,\nDrivechain is enabled by the atomic swaps and of Counterparty-like\nembedded consensus. )\n\nThanks to atomic swaps, someone can act as an investment banker or\ncustodian, and purchase side:BTC at a (tiny, competitive discount) and\nthen transfer those side-to-main at a minimal inconvenience (comparable\nto that of someone who buys a bank CD). Through market activities, the\n_entire system_ becomes exactly as patient as its most-patient members.\nAs icing on the cake, people who aren't planning on using their BTC\nanytime soon (ie \"the patient\") can even get a tiny investment yield, in\nreturn for providing this service.\n\n\n2. Security\n\nThis objection usually says something like \"Aren't you worried that 51%\n[hashrate] will steal the coins, given that mining is so centralized\nthese days?\"\n\nThe logic of drivechain is to take a known fact -- that miners do not\nsteal from exchanges (by coordinating to doublespend deposits to those\nexchanges) -- and generalize it to a new situation -- that [hopefully]\nminers will not steal from sidechains (by coordinating to make 'invalid'\nwithdrawals from them).\n\nMy generalization is slightly problematic, because \"a large mainchain\nreorg today\" would hit the entire Bitcoin system and de-confirm *all* of\nthe network's transactions, whereas a sidechain-theft would hit only a\nsmall portion of the system. This asymmetry is a problem because of the\n1:1 peg, which is explicitly symmetrical -- the thief makes off coins\nthat are worth _just as much_ as those coins that he did _not_ attack.\nThe side:BTC are therefore relatively more vulnerable to theft, which\nharms the generalization.\n\nAs I've just explained, to correct this relative deficiency, we add\nextra inconvenience for any sidechain thievery, which is in this case\nthe long long withdrawal time of several months. (Which is also the main\ndistinction between DC and extension blocks).\n\nI cannot realistically imagine an erroneous withdrawal persisting for\nseveral weeks, let alone several months. First, over a timeframe of this\nduration, there can be no pretense of 'we made an innocent mistake', nor\none that 'it is too inconvenient for us to fix this problem'. This\nrequires the attacker to be part of an explicitly malicious conspiracy.\nEven in the conspiring case, I do not understand how miners would\ncoordinate the distribution of the eventual \"theft\" payout, ~3 months\nfrom now -- if new hashrate comes online between now and then, does it\nget a portion? -- if today's hashrate closes down, does it get a reduced\nportion? -- who decides? I don't think that an algorithm can decide\n(without creating a new mechanism, which -I believe- would have to be\npowered by ongoing sustainable theft [which is impossible]), because the\nwithdrawal (ie the \"theft\") has to be initiated, with a known\ndestination, *before* it accumulates 3 months worth of acknowledgement.\n\nEven if hashrate were controlled exclusively by one person, such a theft\nwould obliterate the sidechain-tx-fee revenue from all sidechains, for a\nstart. It would also greatly reduce the market price of [mainchain] BTC,\nI feel, as it ends the sidechain experiment more-or-less permanently.\n\nAnd even _that_ dire situation can be defeated by UASF-style maneuvers,\nsuch as checkpointing. Even the threat of such maneuvers can be\npersuasive enough for them never to be needed (especially over long\ntimeframes, which make these maneuvers convenient).\n\nA slightly more realistic worst-case scenario is that a monopolist\nimposes large fees on side-to-main transfers (which he contrives so that\nonly he can provide). Unless the monopoly is permanent, market forces\n(atomic swaps) will still lower the fee to ultra-competitive levels,\nmaking this mostly pointless.\n\n\n3. Antifragility\n\nThere is an absolutely crucial distinction of \"layers\", which is often\noverlooked. Which is a shame, because its importance really cannot be\nunderstated.\n\nTaleb's concept of antifragility is explicitly fractal -- it has layers,\nand an upper layer can only be antifragile if it is composed of\nindividual members of a lower layer who are each *fragile*. In one of my\nvideos I give the example of NYC food providers -- it is _because_ the\ncompetition is so brutal, and because each individual NYC\nrestaurant/supermarket/food-truck is so likely to fail, (and because\nthere is no safety net to catch them if they do fail), that the\nconsumer's experience is so positive (in NYC, you can find almost any\nkind of food, at any hour of the day, at any price, despite the fact\nthat a staggering ~15 million people will be eating there each day).\n\nBy this, I mean there is an absolutely crucial distinction between:\n\n1. A problem with a sidechain that negatively impacts its parent chain.\n2. A problem with a sidechain that only impacts the sidechain users.\n\nThe first type of problem is unacceptable, but the second type of\nproblem is actually _desirable_.\n\nIf we wanted to have the best BTC currency unit possible, we would want\neveryone to try all kinds of things out, _especially_ the things that we\nthink are terrible. We'd want lots of things to be tried, and for the\nlosers to \"fail fast\".\n\nIn practice I highly doubt the sidechain ecosystem would be anywhere\nnear as dynamic as NYC or Silicon Valley. But certain questions, such as\n\"What if a sidechain breaks / has DAO-like problems?\"; \"What if the\nsidechain has only a few nodes? Who will run them?\"; \"Who will maintain\nthese projects?\"; -- really just miss the point, I think.\n\nUltimately, users can vote with their feet -- if the benefits of a\nsidechain outweigh its risks, some users will send some BTC there. It is\na strict improvement over the current situation, where users would need\nto use an Altcoin to achieve as much. Users who aren't comfortable with\nthe risks of new chains / new features, can simply decline to use them.\n\n\nAnother Objection\n------------------\n\nFinally, two people raised an objection which I will call the \"too\npopular\" objection or \"too big to fail (tbtf)\". Something like \"what if\na *majority* of BTC is moved to one sidechain, and then that sidechain\nhas some kind of problem?\".\n\nOne simple step would be to cap the quantity of BTC that can be moved to\neach sidechain, (at x=10% ? aka 210,000).\n\nOther than that, I would point out that Bitcoin has always been the\n\"money of principle\", and that we survived the MtGox announcement (in\nwhich ~850,000/12,400,000 = 6.85% of the total BTC were assumed to be\nstolen).\n\nI look forward to the continued feedback! Thank you all very much!\n\nPaul\n\n[1]\nhttps://github.com/drivechain-project/bitcoin/commit/c4beef5c2aa8e52d2c1e11de7c044528bbde6c60\n\n\nOn 5/22/2017 2:17 AM, Paul Sztorc wrote:\n> Dear list,\n> \n> I've been working on \"drivechain\", a sidechain enabling technology, for\n> some time.\n> \n> * The technical info site is here: www.drivechain.info\n> * The changes to Bitcoin are here:\n> https://github.com/drivechain-project/bitcoin/tree/mainchainBMM\n> * A Blank sidechain template is here:\n> https://github.com/drivechain-project/bitcoin/tree/sidechainBMM\n> \n> As many of you know, I've been seeking feedback in person, at various\n> conferences and meetups over the past year, most prominently Scaling\n> Milan. And I intend to continue to seek feedback at Consensus2017 this\n> week, so if you are in NYC please just walk up and start talking to me!\n> \n> But I also wanted to ask the list for feedback. Initially, I was\n> hesitant because I try not to consume reviewers' scarce time until the\n> author has put in a serious effort. However, I may have waiting too\n> long, as today it is actually quite close to a working release.\n> \n> \n> Scaling Implications\n> ---------------------\n> \n> This upgrade would have significant scaling implications. Since it is\n> the case that sidechains can be added by soft fork, and since each of\n> these chains will have its own blockspace, this theoretically removes\n> the blocksize limit from \"the Bitcoin system\" (if one includes\n> sidechains as part of such a system). People who want a LargeBlock\n> bitcoin can just move their BTC over to such a network [1], and their\n> txns will have no longer have an impact on \"Bitcoin Core\". Thus, even\n> though this upgrade does not actually increase \"scalability\" per se, it\n> may in fact put an end to the scalability debate...forever.\n> \n> This work includes the relatively new concept of \"Blind Merged Mining\"\n> [2] which I developed in January to allow SHA256^2 miners to merge-mine\n> these \"drivechains\", even if these miners aren't running the actual\n> sidechain software. The goal is to prevent sidechains from affecting the\n> levelness of the mining \"playing field\". BMM is conceptually similar to\n> ZooKeeV [3] which Peter Todd sketched out in mid-2013. BMM is not\n> required for drivechain, but it would address some of the last remaining\n> concerns.\n> \n> \n> Total Transaction Fees in the Far Future\n> -----------------------------------------\n> \n> Some people feel that a maximum blocksize limit is needed to ensure that\n> future total equilibrium transaction fees are non-negligible. I\n> presented [4] on why I don't agree, 8 months ago. The reviewers I spoke\n> to over the last year have stopped bringing this complaint up, but I am\n> not sure everyone feels that way.\n> \n> \n> Juxtaposition with a recent \"Scaling Compromise\"\n> -------------------------------------------------\n> \n> Recently, a scalability proposal began to circulate on social media. As\n> far as I could tell, it goes something like \"immediately activate\n> SegWit, and then HF to double the nonwitness blockspace to 2MB within 12\n> months\". But such a proposal is quite meager, compared to a \"LargeBlock\n> Drivechain\". The drivechain is better on both fronts, as it would not\n> require a hardfork, and could *almost immediately* add _any_ amount of\n> extra blockspace (specifically, I might expect a BIP101-like LargeBlock\n> chain that has an 8 MB maxblocksize, which doubles every two years).\n> \n> In other words, I don't know why anyone would support that proposal over\n> mine. The only reasons would be either ignorance (ie, unfamiliarity with\n> drivechain) or because there are still nagging unspoken complaints about\n> drivechain which I apparently need to hear and address.\n> \n> \n> Other Thoughts\n> ---------------\n> \n> Unfortunately, anyone who worked on the \"first generation\" of sidechain\n> technology (the skiplist) or the \"second generation\" (federated /\n> Liquid), will find that this is very different.\n> \n> I will admit that I am very pessimistic about any conversation that\n> involves scalability. It is often said that \"talking politics lowers\n> your IQ by 25 points\". Bitcoin scalability conversations seem to drain\n> 50 points. (Instead of conversing, I think people should quietly work on\n> whatever they are passionate about until their problem either is solved,\n> or it goes away for some other reason, or until we all agree to just\n> stop talking about it.)\n> \n> Cheers,\n> Paul\n> \n> [1] http://www.drivechain.info/faq/#can-sidechains-really-help-with-scaling\n> [2] http://www.truthcoin.info/blog/blind-merged-mining/\n> [3] https://s3.amazonaws.com/peter.todd/bitcoin-wizards-13-10-17.log\n> [4]\n> https://www.youtube.com/watch?v=YErLEuOi3xU&list=PLw8-6ARlyVciNjgS_NFhAu-qt7HPf_dtg&index=4\n>"
            },
            {
                "author": "Tao Effect",
                "date": "2017-06-18T21:30:51",
                "message_text_only": "In Drivechain, 51% of miners have total control and ownership over all of the sidechain coins. The vision of Drivechain is to have many blockchains \"plugged in\" to the main chain.\n\nToday, well over 51% of miners are under the jurisdiction of a single government.\n\nThus the effect of Drivechain appears to be the creation of a new kind of digital border imposed onto the network where everyone hands over ownership of their Bitcoins to a /single/ mining cartel when they wish to interact with /any/ sidechain.\n\nDrivechain would be a reasonable idea if that weren't the case, but since it is, Drivechain now introduces a very real possible future where Bitcoins can be confiscated by the Chinese government in exactly the same manner that the Chinese government today confiscates financial assets in other financial networks within China.\n\nOne argument is that the psuedo-anonymity granted by Bitcoin addresses could theoretically make this less likely to happen, and while that is true, it is also true that every day Bitcoin becomes less and less psuedo-anonymous as governments invest in blockchain analysis tech [1].\n\nHow many high-profile confiscations \u2014 now via the Bitcoin-blockchain itself (no longer being able to blame a 3rd-party exchange) \u2014 is Bitcoin willing to tolerate and open itself up to?\n\nIn a world before Drivechain: the worst that a 51% coalition can do is prevent you from spending your coins (censorship).\n\nIn a world with Drivechain three things become true:\n\n1. The Bitcoin network centralizes more, because more power (both financial power and power in terms of capability/control) is granted to miners. This is likely to have secondary consequences on the main-chain network as well (in terms of its price and ability to evolve).\n\n2. A 51% coalition \u2014 and/or the government behind it \u2014 is now able to financially profit by confiscating coins. No longer is it just censorship, \"asset forfeiture\" \u2014 theft \u2014 becomes a real possibility for day-to-day Bitcoin users.\n\n3. Drivechain limits user's existing choice when it comes to who is acting as custodian of their Bitcoins, from any trustworthy exchange, down to a single mining cartel under the control of a single set of laws.\n\nThe argument given to this is that a UASF could be initiated to wrest control away from this cartel. I do not believe this addresses the concern at all.\n\nA UASF is a very big deal and extremely difficult to pull off correctly. Even when you have users behind you, it *requires* significant support from the miners themselves [2]. Therefore, I do not believe a UASF is a realistic possibility for recovery.\n\nI would only support Drivechain if all of these issue were addressed.\n\nKind regards,\nGreg Slepak\n\n[1] EU Commits \u20ac5 Million to Fund Blockchain Surveillance Research \u2014 http://www.coindesk.com/eu-commits-e5-million-fund-blockchain-surveillance-research/ <http://www.coindesk.com/eu-commits-e5-million-fund-blockchain-surveillance-research/>\n\n[2] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014497.html <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014497.html>\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n> On Jun 10, 2017, at 10:04 AM, Paul Sztorc via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n> Hi everyone,\n> \n> It has been 3 weeks -- responses so far have been really helpful. People\n> jumped right in, and identified unfinished or missing parts much faster\n> than I thought they would (ie, ~two days). Very impressive.\n> \n> Currently, we are working on the sidechain side of blind merged mining.\n> As you know, most of the Bitcoin cryptosystem is about finding the\n> longest chain, and displaying information about this chain. CryptAxe is\n> editing the sidechain code to handle reorganizations in a new way (an\n> even bigger departure than Namecoin's, imho).\n> \n> I believe that I have responded to all the on-list objections that were\n> raised. I will 1st summarize the on-list objections, and 2nd summarize\n> the off-list discussion (focusing on three key themes).\n> \n> \n> On-List Objection Summary\n> ---------------------------\n> \n> In general, they were:\n> \n> * Peter complained about the resources required for the BMM 'crisis\n> audit', I pointed out that it is actually optional (and, therefore,\n> free), and that it doesn't affect miners relative to each other, and\n> that it can be done in an ultra-cheap semi-trusted way with high\n> reliability.\n> * Peter also asked about miner incentives, I replied that it is profit\n> maximizing to BMM sidechains, because the equation (Tx Fees - Zero Cost)\n> is always positive.\n> * ZmnSCPxj asked a long series of clarifying questions, and I responded.\n> * Tier Nolan complained about my equivocation of the \"Bitcoin: no block\n> subsidy\" case and the \"sidechain\" case. He cites the asymmetry I point\n> out below (in #2). I replied, and I give an answer below.\n> * ZmnSCPxj pointed out an error in our OP Code (that we will fix).\n> * ZmnSCPxj also asked a number of new questions, I responded. Then he\n> responded again, in general he seemed to raise many of the points\n> addressed in #1 (below).\n> * ZmnSCPxj wanted reorg proofs, to punish reorgers, but I pointed out\n> that if 51% can reorg, they can also filter out the reorg proof. We are\n> at their mercy in all cases (for better or worse).\n> * ZmnSCPxj also brought up the fact that a block size limit is necessary\n> for a fee market, I pointed out that this limit does not need to be\n> imposed on miners by nodes...miners would be willing-and-able to\n> self-impose such a limit, as it maximizes their revenues.\n> * ZmnSCPxj also protested the need to soft fork in each individual\n> sidechain, I pointed out my strong disagreement (\"Unrestrained smart\n> contract execution will be the death of most of the interesting\n> applications...[could] destabilize Bitcoin itself\") and introduced my\n> prion metaphor.\n> * ZmnSCPxj and Tier Nolan both identified the problem solved by our\n> 'ratchet' concept. I explained it to ZmnSCPxj in my reply. We had not\n> coded it at the time, but there is code for it now [1]. Tier proposed a\n> rachet design, but I think ours is better (Tier did not find ours at\n> all, because it is buried in obscure notes, because I didn't think\n> anyone would make it this far so quickly).\n> * Tier also advised us on how to fix the problem that ZmnSCPxj had\n> identified with our NOP earlier.\n> * Tier also had a number of suggestions about the real-time negotiation\n> of the OP Bribe amount between nodes and miners. I'm afraid I mostly\n> ignored these for now, as we aren't there yet.\n> * Peter complained that ACKing the sidechain could be exploited for\n> political reasons, and I responded that in such a case, miners are free\n> to simply avoid ACKing, or to acquiesce to political pressure. Neither\n> affect the mainchain.\n> * Peter complained that sidechains might provide some miners with the\n> opportunity to create a pretext to kick other miners off the network. I\n> replied that it would not, and I also brought up the fact that my\n> Bitcoin security model was indifferent to which people happened to be\n> mining at any given time. I continue to believe that \"mining\n> centralization\" does not have a useful definition.\n> * Peter questioned whether or not sidechains would be useful. I stated\n> my belief that they would be useful, and linked to my site\n> (drivechain.info/projects <http://drivechain.info/projects>) which contains a number of sidechain\n> use-cases, and cited my personal anecdotal experiences.\n> * Peter wanted to involve miners \"as little as possible\", I pointed out\n> that I felt that I had indeed done this minimization. My view is that\n> Peter felt erroneously that it was possible to involve miners less,\n> because he neglected [1] that a 51% miner group is already involved\n> maximally, as they can create most messages and filter any message, and\n> [2] that there are cases where we need miners to filter out harmful\n> interactions among multiple chains (just as they filter out harmful\n> interactions among multiple txns [ie, \"double spends\"]). Peter has not\n> yet responded to this rebuttal.\n> * Peter also suggested client-side validation as \"safer\", and I pointed\n> out that sidechains+BMM _is_ client-side validation. I asked Peter for\n> CS-V code, so that we can compare the safety and other features.\n> * Sergio reminded us of his version of drivechain. Sergio and I disagree\n> over the emphasis on frequency/speed of withdrawals. Also Sergio\n> emphasizes a hybrid model, which does not interest me.\n> \n> If I missed any objections, I hope someone will point them out.\n> \n> \n> Off-List / Three Points of Ongoing Confusion\n> ---------------------------------------------\n> \n> Off list, I have repeated the a similar conversation perhaps 6-10 times\n> over the past week. There is a cluster of remaining objections which\n> centers around three topics -- speed, theft, and antifragility. I will\n> reply here, and add the answers to my FAQ (drivechain.info/faq <http://drivechain.info/faq>).\n> \n> 1. Speed\n> \n> This objection is voiced after I point out that side-to-main transfers\n> (\"withdrawals\") will probably take a long time, for example 5 months\n> each ( these are customizable parameters, and open for debate -- but if\n> withdrawals are every x=3 months, and only x=1 withdrawal can make\n> forward progress [on the mainchain] at a time, and only x=1 prospective\n> withdrawal can be assembled [by the sidechain] at a time, then we can\n> expect total withdrawal time to average 4.5 months [(.5)*3+3] ). The\n> response is something like \"won't such a system be too slow, and\n> therefore unusable?\".\n> \n> Imho, replies of this kind disregard the effect of atomic cross-chain\n> swaps, which are instant.\n> \n> ( In addition, while side-to-main transfers are slow, main-to-side\n> transfers are quite fast, x~=10 confirmations. I would go as far as to\n> say that, just as the Lightning Network is enabled by SegWit and CSV,\n> Drivechain is enabled by the atomic swaps and of Counterparty-like\n> embedded consensus. )\n> \n> Thanks to atomic swaps, someone can act as an investment banker or\n> custodian, and purchase side:BTC at a (tiny, competitive discount) and\n> then transfer those side-to-main at a minimal inconvenience (comparable\n> to that of someone who buys a bank CD). Through market activities, the\n> _entire system_ becomes exactly as patient as its most-patient members.\n> As icing on the cake, people who aren't planning on using their BTC\n> anytime soon (ie \"the patient\") can even get a tiny investment yield, in\n> return for providing this service.\n> \n> \n> 2. Security\n> \n> This objection usually says something like \"Aren't you worried that 51%\n> [hashrate] will steal the coins, given that mining is so centralized\n> these days?\"\n> \n> The logic of drivechain is to take a known fact -- that miners do not\n> steal from exchanges (by coordinating to doublespend deposits to those\n> exchanges) -- and generalize it to a new situation -- that [hopefully]\n> miners will not steal from sidechains (by coordinating to make 'invalid'\n> withdrawals from them).\n> \n> My generalization is slightly problematic, because \"a large mainchain\n> reorg today\" would hit the entire Bitcoin system and de-confirm *all* of\n> the network's transactions, whereas a sidechain-theft would hit only a\n> small portion of the system. This asymmetry is a problem because of the\n> 1:1 peg, which is explicitly symmetrical -- the thief makes off coins\n> that are worth _just as much_ as those coins that he did _not_ attack.\n> The side:BTC are therefore relatively more vulnerable to theft, which\n> harms the generalization.\n> \n> As I've just explained, to correct this relative deficiency, we add\n> extra inconvenience for any sidechain thievery, which is in this case\n> the long long withdrawal time of several months. (Which is also the main\n> distinction between DC and extension blocks).\n> \n> I cannot realistically imagine an erroneous withdrawal persisting for\n> several weeks, let alone several months. First, over a timeframe of this\n> duration, there can be no pretense of 'we made an innocent mistake', nor\n> one that 'it is too inconvenient for us to fix this problem'. This\n> requires the attacker to be part of an explicitly malicious conspiracy.\n> Even in the conspiring case, I do not understand how miners would\n> coordinate the distribution of the eventual \"theft\" payout, ~3 months\n> from now -- if new hashrate comes online between now and then, does it\n> get a portion? -- if today's hashrate closes down, does it get a reduced\n> portion? -- who decides? I don't think that an algorithm can decide\n> (without creating a new mechanism, which -I believe- would have to be\n> powered by ongoing sustainable theft [which is impossible]), because the\n> withdrawal (ie the \"theft\") has to be initiated, with a known\n> destination, *before* it accumulates 3 months worth of acknowledgement.\n> \n> Even if hashrate were controlled exclusively by one person, such a theft\n> would obliterate the sidechain-tx-fee revenue from all sidechains, for a\n> start. It would also greatly reduce the market price of [mainchain] BTC,\n> I feel, as it ends the sidechain experiment more-or-less permanently.\n> \n> And even _that_ dire situation can be defeated by UASF-style maneuvers,\n> such as checkpointing. Even the threat of such maneuvers can be\n> persuasive enough for them never to be needed (especially over long\n> timeframes, which make these maneuvers convenient).\n> \n> A slightly more realistic worst-case scenario is that a monopolist\n> imposes large fees on side-to-main transfers (which he contrives so that\n> only he can provide). Unless the monopoly is permanent, market forces\n> (atomic swaps) will still lower the fee to ultra-competitive levels,\n> making this mostly pointless.\n> \n> \n> 3. Antifragility\n> \n> There is an absolutely crucial distinction of \"layers\", which is often\n> overlooked. Which is a shame, because its importance really cannot be\n> understated.\n> \n> Taleb's concept of antifragility is explicitly fractal -- it has layers,\n> and an upper layer can only be antifragile if it is composed of\n> individual members of a lower layer who are each *fragile*. In one of my\n> videos I give the example of NYC food providers -- it is _because_ the\n> competition is so brutal, and because each individual NYC\n> restaurant/supermarket/food-truck is so likely to fail, (and because\n> there is no safety net to catch them if they do fail), that the\n> consumer's experience is so positive (in NYC, you can find almost any\n> kind of food, at any hour of the day, at any price, despite the fact\n> that a staggering ~15 million people will be eating there each day).\n> \n> By this, I mean there is an absolutely crucial distinction between:\n> \n> 1. A problem with a sidechain that negatively impacts its parent chain.\n> 2. A problem with a sidechain that only impacts the sidechain users.\n> \n> The first type of problem is unacceptable, but the second type of\n> problem is actually _desirable_.\n> \n> If we wanted to have the best BTC currency unit possible, we would want\n> everyone to try all kinds of things out, _especially_ the things that we\n> think are terrible. We'd want lots of things to be tried, and for the\n> losers to \"fail fast\".\n> \n> In practice I highly doubt the sidechain ecosystem would be anywhere\n> near as dynamic as NYC or Silicon Valley. But certain questions, such as\n> \"What if a sidechain breaks / has DAO-like problems?\"; \"What if the\n> sidechain has only a few nodes? Who will run them?\"; \"Who will maintain\n> these projects?\"; -- really just miss the point, I think.\n> \n> Ultimately, users can vote with their feet -- if the benefits of a\n> sidechain outweigh its risks, some users will send some BTC there. It is\n> a strict improvement over the current situation, where users would need\n> to use an Altcoin to achieve as much. Users who aren't comfortable with\n> the risks of new chains / new features, can simply decline to use them.\n> \n> \n> Another Objection\n> ------------------\n> \n> Finally, two people raised an objection which I will call the \"too\n> popular\" objection or \"too big to fail (tbtf)\". Something like \"what if\n> a *majority* of BTC is moved to one sidechain, and then that sidechain\n> has some kind of problem?\".\n> \n> One simple step would be to cap the quantity of BTC that can be moved to\n> each sidechain, (at x=10% ? aka 210,000).\n> \n> Other than that, I would point out that Bitcoin has always been the\n> \"money of principle\", and that we survived the MtGox announcement (in\n> which ~850,000/12,400,000 = 6.85% of the total BTC were assumed to be\n> stolen).\n> \n> I look forward to the continued feedback! Thank you all very much!\n> \n> Paul\n> \n> [1]\n> https://github.com/drivechain-project/bitcoin/commit/c4beef5c2aa8e52d2c1e11de7c044528bbde6c60 <https://github.com/drivechain-project/bitcoin/commit/c4beef5c2aa8e52d2c1e11de7c044528bbde6c60>\n> \n> \n> On 5/22/2017 2:17 AM, Paul Sztorc wrote:\n>> Dear list,\n>> \n>> I've been working on \"drivechain\", a sidechain enabling technology, for\n>> some time.\n>> \n>> * The technical info site is here: www.drivechain.info\n>> * The changes to Bitcoin are here:\n>> https://github.com/drivechain-project/bitcoin/tree/mainchainBMM\n>> * A Blank sidechain template is here:\n>> https://github.com/drivechain-project/bitcoin/tree/sidechainBMM\n>> \n>> As many of you know, I've been seeking feedback in person, at various\n>> conferences and meetups over the past year, most prominently Scaling\n>> Milan. And I intend to continue to seek feedback at Consensus2017 this\n>> week, so if you are in NYC please just walk up and start talking to me!\n>> \n>> But I also wanted to ask the list for feedback. Initially, I was\n>> hesitant because I try not to consume reviewers' scarce time until the\n>> author has put in a serious effort. However, I may have waiting too\n>> long, as today it is actually quite close to a working release.\n>> \n>> \n>> Scaling Implications\n>> ---------------------\n>> \n>> This upgrade would have significant scaling implications. Since it is\n>> the case that sidechains can be added by soft fork, and since each of\n>> these chains will have its own blockspace, this theoretically removes\n>> the blocksize limit from \"the Bitcoin system\" (if one includes\n>> sidechains as part of such a system). People who want a LargeBlock\n>> bitcoin can just move their BTC over to such a network [1], and their\n>> txns will have no longer have an impact on \"Bitcoin Core\". Thus, even\n>> though this upgrade does not actually increase \"scalability\" per se, it\n>> may in fact put an end to the scalability debate...forever.\n>> \n>> This work includes the relatively new concept of \"Blind Merged Mining\"\n>> [2] which I developed in January to allow SHA256^2 miners to merge-mine\n>> these \"drivechains\", even if these miners aren't running the actual\n>> sidechain software. The goal is to prevent sidechains from affecting the\n>> levelness of the mining \"playing field\". BMM is conceptually similar to\n>> ZooKeeV [3] which Peter Todd sketched out in mid-2013. BMM is not\n>> required for drivechain, but it would address some of the last remaining\n>> concerns.\n>> \n>> \n>> Total Transaction Fees in the Far Future\n>> -----------------------------------------\n>> \n>> Some people feel that a maximum blocksize limit is needed to ensure that\n>> future total equilibrium transaction fees are non-negligible. I\n>> presented [4] on why I don't agree, 8 months ago. The reviewers I spoke\n>> to over the last year have stopped bringing this complaint up, but I am\n>> not sure everyone feels that way.\n>> \n>> \n>> Juxtaposition with a recent \"Scaling Compromise\"\n>> -------------------------------------------------\n>> \n>> Recently, a scalability proposal began to circulate on social media. As\n>> far as I could tell, it goes something like \"immediately activate\n>> SegWit, and then HF to double the nonwitness blockspace to 2MB within 12\n>> months\". But such a proposal is quite meager, compared to a \"LargeBlock\n>> Drivechain\". The drivechain is better on both fronts, as it would not\n>> require a hardfork, and could *almost immediately* add _any_ amount of\n>> extra blockspace (specifically, I might expect a BIP101-like LargeBlock\n>> chain that has an 8 MB maxblocksize, which doubles every two years).\n>> \n>> In other words, I don't know why anyone would support that proposal over\n>> mine. The only reasons would be either ignorance (ie, unfamiliarity with\n>> drivechain) or because there are still nagging unspoken complaints about\n>> drivechain which I apparently need to hear and address.\n>> \n>> \n>> Other Thoughts\n>> ---------------\n>> \n>> Unfortunately, anyone who worked on the \"first generation\" of sidechain\n>> technology (the skiplist) or the \"second generation\" (federated /\n>> Liquid), will find that this is very different.\n>> \n>> I will admit that I am very pessimistic about any conversation that\n>> involves scalability. It is often said that \"talking politics lowers\n>> your IQ by 25 points\". Bitcoin scalability conversations seem to drain\n>> 50 points. (Instead of conversing, I think people should quietly work on\n>> whatever they are passionate about until their problem either is solved,\n>> or it goes away for some other reason, or until we all agree to just\n>> stop talking about it.)\n>> \n>> Cheers,\n>> Paul\n>> \n>> [1] http://www.drivechain.info/faq/#can-sidechains-really-help-with-scaling\n>> [2] http://www.truthcoin.info/blog/blind-merged-mining/\n>> [3] https://s3.amazonaws.com/peter.todd/bitcoin-wizards-13-10-17.log\n>> [4]\n>> https://www.youtube.com/watch?v=YErLEuOi3xU&list=PLw8-6ARlyVciNjgS_NFhAu-qt7HPf_dtg&index=4\n>> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170618/afbca0d1/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170618/afbca0d1/attachment-0001.sig>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-06-19T16:04:33",
                "message_text_only": "Hi Greg,\n\nResponses below:\n\nOn 6/18/2017 5:30 PM, Tao Effect wrote:\n> In Drivechain, 51% of miners have total control and ownership over all\n> of the sidechain coins.\n\nIt would not be accurate to say that miners have \"total\" control. Miners\ndo control the destination of withdrawals, but they do not control the\nwithdrawal-duration nor the withdrawal-frequency.\n\nSo, if miners wish to 'steal' from a sidechain, they _can_ initiate a\ntheft, but they can not change the fact that their malfeasance will be\n[a] obvious, and [b] on display for a long period of time.\n\nWe might draw a comparison between:\n\n1. Classic Theft   -- A majority hashrate reorganizes the main Bitcoin\nchain to double-spend funds (or coordinate with someone who is\ndouble-spending). This is prevented/discouraged by waiting for many\nconfirmations.\n2. Channel Theft -- A majority hashrate assists a Lightning-Network\nthief, by censoring the punitive audit txn (possibly by exploiting some\nexcuse regarding fullness of blocks, or possibly induced to do so by the\nthief provably splitting the proceeds with miners). This is\nprevented/discouraged by using lengthy custodial periods, paying high\nfees with your attacker's money, and using fungibility/non-communication\nto interact with miners as little as possible (so as to frame LN-theft\nas undermining the entire LN system, and not merely a single tragedy).\n3. Drivechain Theft -- A majority hashrate initiates an unrepresentative\nwithdrawal from some sidechain. This is prevented/discouraged by only\nusing 'popular' sidechains (those that [a] increase the usefulness\n(\"market price\") of bitcoin, and [b] generate tx fees for miners). It is\nalso discouraged by the fact that egregious theft would probably end the\nsidechain experiment, meaning that all present and future sidechains\nwould be forever unavailable (and unable to buoy the price or the tx\nrevenues).\n\nI do not think that any of the three stands out as being categorically\nworse than the others, especially when we consider the heterogeneity of\nuse-cases and preferences. As Luke-Jr has been pointing out on social\nmedia recently, the very group which is more associated with miners (and\nexplicitly more willing to trust them, ie Bitcoin Unlimited et al),\nhappens to be the same group that would be expected to make use of a\nLargeBlock drivechain. Some can argue that one type of security is more\n\"cryptographic\" than others, but I think this is misguided (how many\n'bits' of security does each have?) -- imho, all three security models\nare 'game theoretic' (neither computer scientific, nor cryptographic).\n\nMore importantly, before a miner has any \"control\" over the sidechain\ncoins, users must voluntarily agree to subject themselves to these new\nrules. This is similar to how an arbitrary piece of (open source)\nsoftware can have \"total\" control over your computer...if you choose to\ninstall it.\n\n> Thus the effect of Drivechain appears to be the creation of a new kind\n> of digital border imposed onto the network ...\n\nI'm not sure it would \"create a border\", given that sidechains are\ncurrently not accessible at all. If anything drivechain cuts a door into\nan existing impassible border.\n\n>  ... where everyone hands over ownership of their Bitcoins to a\n> /single/ mining cartel when they wish to interact with /any/ sidechain.\n\nThe qualifier \"/any/ sidechain\" would seem to imply that there is a way\nto do sidechains that does not involve handing over some control to 51%\nhashrate...I think this is false (even in the fabled case of ZK-SNARKS).\nThe first thing I do in the drivechain spec (\ntruthcoin.info/blog/drivechain ) is explain why.\n\n> Drivechain would be a reasonable idea if that weren't the case, but\n> since it is, Drivechain now introduces a very real possible future\n> where Bitcoins can be confiscated by the Chinese government in exactly\n> the same manner that the Chinese government today confiscates\n> financial assets in other financial networks within China.\n\nYes, but money could also be confiscated from _any_ Bitcoin users\n(Chinese or otherwise) using any of the three methods I mentioned above.\nAnd confiscation could strike Chinese Bitcoin users if they decided to\nsell their Bitcoin for Chinese Yuan, which they then deposited in a\nChinese bank. Or if they sold their Bitcoin for an Altcoin controlled by\nthe Chinese govt in some other way.\n\nIt is not up to the members of this list to decide, USSR style, what\nother people are allowed to do with their own money.\n\nThe exceptions to this rule would be (ie, \"bitcoin-dev should care about\nwhat users are doing when...\"):\n\n1. [Unreasonable use of Reviewer Time]  The user's use-case is either\nnonexistent (ie \"no one wants that\"), or totally unachievable (\"we can't\ndo that\") thus rendering the conversation a complete waste of time /\nreviewer attention.\n2. [Harmful Interference] The user's use-case would impose harm on some\nexisting use-case(s).\n\nNo reasonable person will claim the first, given today's scaling debate\n(not to mention today's 'bitcoin dominance index'). Therefore, critics\nmust claim the second (as, for example, Peter Todd has been doing on\nthis list).\n\nWhich is why I narrowly focus on inter-chain harms [1], leading\nultimately to a focus on the mining ecosystem [2,3] and the development\nof Blind Merged Mining [4].\n\n[1]\nhttps://www.youtube.com/watch?v=0goYH2sDw0w&list=PLw8-6ARlyVciNjgS_NFhAu-qt7HPf_dtg&index=1\n[2] http://www.truthcoin.info/blog/mirage-miner-centralization/\n[3] http://www.truthcoin.info/blog/mining-threat-equilibrium/\n[4] http://www.truthcoin.info/blog/blind-merged-mining/\n[5] http://www.truthcoin.info/blog/measuring-decentralization/\n\n> 1. The Bitcoin network centralizes more, because more power (both\n> financial power and power in terms of capability/control) is granted\n> to miners.\n\nI think that one has some duty to very clearly define something (like\n\"mining centralization\" [2] or \"centralization\" [5]) before complaining\nabout it. I feel that people will occasionally use selfless complaints\nto accomplish a selfish goal...especially when the artificial selfless\npart is hard to discuss by virtue of its being poorly defined\n(especially vague or abstract items like \"the company\", \"our country\",\netc). For example, those who take it upon themselves to \"defend\" \"the\nBitcoin community\" may have exactly that in mind as their primary\ngoal...but they may also end up with more visibility (and with it: more\ninfluence, more job offers, more conference invites, more friends, etc)\nand they may also end up with a megaphone for which to broadcast their\nother views, or just a defend-able excuse for bragging loudly about how\ngreat cypherpunks are and/or how devoted they-in-particular are to the\ncypherpunk tribe, et cetera. To avoid this problem in my own technical\ndiscourse, I try to avoid abstractions like \"centralization\" until I\nhave defined them [2,5].\n\nYou have defined centralization above, but the definition is itself\nvague to the point where I do not think even you actually endorse it.\nFor example, you would need to say that Bitcoin centralizes whenever the\nexchange rate increases (as this grants additional financial power to\nminers) or when any new user joins Bitcoin, or when tx fee revenues\nincrease for any reason. You might also be forced to say that LN\ncentralizes Bitcoin (as LN grants new capability/control to miners), and\nprobably even that Bitcoin becomes more centralized when developers\nrelease new software (as this grants new capability to miners,\nspecifically the ability to deny upgrades). This probably isn't what you\nmeant, but since you did not clearly explain what you meant we have no\nway of knowing for sure.\n\nIt seems to me that you reject the premise that BMM [4] addresses these\nissues. This is probably because BMM only addresses miner's interactions\nwith each other, and it does not address miner abilities as a group in\nrelation to other groups (for example, vs. users, developers,\ninvestors). But, as I consistently emphasize, these groups of people are\nfree to ignore any sidechains that they do not like. In law there is a\nsaying 'volenti non fit injuria' which I would translate as \"he who\nvolunteers cannot claim later to have been injured\". This is a legal\ntheory, because otherwise everyone would be arbitrarily liable for\nchoices beyond their control (ie, responsible for decisions of other\nunrelated people), which would be nonsense.\n\n> 3. Drivechain limits user's existing choice when it comes to who is\n> acting as custodian of their Bitcoins, from any trustworthy exchange,\n> down to a single mining cartel under the control of a single set of laws.\n\nCurrently no (P2P) sidechains exist, and therefore the set of choices\ntoday would seem to be more \"limited\" than in a post-sidechain future.\n(The set of options may decrease later, for ecological reasons, if and\nonly if 'exchanges' are a strictly inferior option to 'sidechains' for\nsome reason...I don't see why this would be the case. I also don't\nunderstand the emphasis on \"exchanges\" [SCs are much more like Altcoins,\nthan exchanges] in the first place, nor the dubious qualifier\n\"trustworthy\".)\n\n--Paul"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-06-20T11:54:52",
                "message_text_only": "Hi Erik,\n\nAs you know:\n\n1. If a sidechain is merged mined it basically grows out of the existing\nBitcoin mining network. If it has a different PoW algorithm it is a new\nmining network.\n2. The security (ie, hashrate) of any mining network would be determined\nby the total economic value of the block. In Bitcoin this is\n(subsidy+tx_fees)*price, but since a sidechain cannot issue new tokens\nit would only be (tx_fees)*price.\n\nUnfortunately the two have a nasty correlation which can lead to a\ndisastrous self-fulfilling prophecy: users will avoid a network that is\ntoo insecure; and if users avoid using a network, they will stop paying\ntxn fees and so the quantity (tx_fees)*price falls toward zero, erasing\nthe network's security. So it is quite problematic and I recommend just\nbiting the bullet and going with merged mining instead.\n\nAnd, the point may be moot. Bitcoin miners may decide that, given their\nexpertise in seeking out cheap sources of power/cooling, they might as\nwell mine both/all chains. So your suggestion may not achieve your\ndesired result (and would, meanwhile, consume more of the economy's\nresources -- some of these would not contribute even to a higher hashrate).\n\nPaul\n\n\n\nOn 6/19/2017 1:11 PM, Erik Aronesty wrote:\n> It would be nice to be able to enforce that a drivechain *not* have\n> the same POW as bitcoin.\n>\n> I suspect this is the only way to be sure that a drivechain doesn't\n> destabilize the main chain and push more power to miners that already\n> have too much power.\n>\n>\n> On Mon, Jun 19, 2017 at 12:04 PM, Paul Sztorc via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>\n>     Hi Greg,\n>\n>     Responses below:\n>\n>     On 6/18/2017 5:30 PM, Tao Effect wrote:\n>     > In Drivechain, 51% of miners have total control and ownership\n>     over all\n>     > of the sidechain coins.\n>\n>     It would not be accurate to say that miners have \"total\" control.\n>     Miners\n>     do control the destination of withdrawals, but they do not control the\n>     withdrawal-duration nor the withdrawal-frequency.\n>\n>     So, if miners wish to 'steal' from a sidechain, they _can_ initiate a\n>     theft, but they can not change the fact that their malfeasance will be\n>     [a] obvious, and [b] on display for a long period of time.\n>\n>     We might draw a comparison between:\n>\n>     1. Classic Theft   -- A majority hashrate reorganizes the main Bitcoin\n>     chain to double-spend funds (or coordinate with someone who is\n>     double-spending). This is prevented/discouraged by waiting for many\n>     confirmations.\n>     2. Channel Theft -- A majority hashrate assists a Lightning-Network\n>     thief, by censoring the punitive audit txn (possibly by exploiting\n>     some\n>     excuse regarding fullness of blocks, or possibly induced to do so\n>     by the\n>     thief provably splitting the proceeds with miners). This is\n>     prevented/discouraged by using lengthy custodial periods, paying high\n>     fees with your attacker's money, and using\n>     fungibility/non-communication\n>     to interact with miners as little as possible (so as to frame LN-theft\n>     as undermining the entire LN system, and not merely a single tragedy).\n>     3. Drivechain Theft -- A majority hashrate initiates an\n>     unrepresentative\n>     withdrawal from some sidechain. This is prevented/discouraged by only\n>     using 'popular' sidechains (those that [a] increase the usefulness\n>     (\"market price\") of bitcoin, and [b] generate tx fees for miners).\n>     It is\n>     also discouraged by the fact that egregious theft would probably\n>     end the\n>     sidechain experiment, meaning that all present and future sidechains\n>     would be forever unavailable (and unable to buoy the price or the tx\n>     revenues).\n>\n>     I do not think that any of the three stands out as being categorically\n>     worse than the others, especially when we consider the\n>     heterogeneity of\n>     use-cases and preferences. As Luke-Jr has been pointing out on social\n>     media recently, the very group which is more associated with\n>     miners (and\n>     explicitly more willing to trust them, ie Bitcoin Unlimited et al),\n>     happens to be the same group that would be expected to make use of a\n>     LargeBlock drivechain. Some can argue that one type of security is\n>     more\n>     \"cryptographic\" than others, but I think this is misguided (how many\n>     'bits' of security does each have?) -- imho, all three security models\n>     are 'game theoretic' (neither computer scientific, nor cryptographic).\n>\n>     More importantly, before a miner has any \"control\" over the sidechain\n>     coins, users must voluntarily agree to subject themselves to these new\n>     rules. This is similar to how an arbitrary piece of (open source)\n>     software can have \"total\" control over your computer...if you\n>     choose to\n>     install it.\n>\n>     > Thus the effect of Drivechain appears to be the creation of a\n>     new kind\n>     > of digital border imposed onto the network ...\n>\n>     I'm not sure it would \"create a border\", given that sidechains are\n>     currently not accessible at all. If anything drivechain cuts a\n>     door into\n>     an existing impassible border.\n>\n>     >  ... where everyone hands over ownership of their Bitcoins to a\n>     > /single/ mining cartel when they wish to interact with /any/ sidechain.\n>\n>     The qualifier \"/any/ sidechain\" would seem to imply that there is\n>     a way\n>     to do sidechains that does not involve handing over some control\n>     to 51%\n>     hashrate...I think this is false (even in the fabled case of\n>     ZK-SNARKS).\n>     The first thing I do in the drivechain spec (\n>     truthcoin.info/blog/drivechain\n>     <http://truthcoin.info/blog/drivechain> ) is explain why.\n>\n>     > Drivechain would be a reasonable idea if that weren't the case, but\n>     > since it is, Drivechain now introduces a very real possible future\n>     > where Bitcoins can be confiscated by the Chinese government in\n>     exactly\n>     > the same manner that the Chinese government today confiscates\n>     > financial assets in other financial networks within China.\n>\n>     Yes, but money could also be confiscated from _any_ Bitcoin users\n>     (Chinese or otherwise) using any of the three methods I mentioned\n>     above.\n>     And confiscation could strike Chinese Bitcoin users if they decided to\n>     sell their Bitcoin for Chinese Yuan, which they then deposited in a\n>     Chinese bank. Or if they sold their Bitcoin for an Altcoin\n>     controlled by\n>     the Chinese govt in some other way.\n>\n>     It is not up to the members of this list to decide, USSR style, what\n>     other people are allowed to do with their own money.\n>\n>     The exceptions to this rule would be (ie, \"bitcoin-dev should care\n>     about\n>     what users are doing when...\"):\n>\n>     1. [Unreasonable use of Reviewer Time]  The user's use-case is either\n>     nonexistent (ie \"no one wants that\"), or totally unachievable (\"we\n>     can't\n>     do that\") thus rendering the conversation a complete waste of time /\n>     reviewer attention.\n>     2. [Harmful Interference] The user's use-case would impose harm on\n>     some\n>     existing use-case(s).\n>\n>     No reasonable person will claim the first, given today's scaling\n>     debate\n>     (not to mention today's 'bitcoin dominance index'). Therefore, critics\n>     must claim the second (as, for example, Peter Todd has been doing on\n>     this list).\n>\n>     Which is why I narrowly focus on inter-chain harms [1], leading\n>     ultimately to a focus on the mining ecosystem [2,3] and the\n>     development\n>     of Blind Merged Mining [4].\n>\n>     [1]\n>     https://www.youtube.com/watch?v=0goYH2sDw0w&list=PLw8-6ARlyVciNjgS_NFhAu-qt7HPf_dtg&index=1\n>     <https://www.youtube.com/watch?v=0goYH2sDw0w&list=PLw8-6ARlyVciNjgS_NFhAu-qt7HPf_dtg&index=1>\n>     [2] http://www.truthcoin.info/blog/mirage-miner-centralization/\n>     <http://www.truthcoin.info/blog/mirage-miner-centralization/>\n>     [3] http://www.truthcoin.info/blog/mining-threat-equilibrium/\n>     <http://www.truthcoin.info/blog/mining-threat-equilibrium/>\n>     [4] http://www.truthcoin.info/blog/blind-merged-mining/\n>     <http://www.truthcoin.info/blog/blind-merged-mining/>\n>     [5] http://www.truthcoin.info/blog/measuring-decentralization/\n>     <http://www.truthcoin.info/blog/measuring-decentralization/>\n>\n>     > 1. The Bitcoin network centralizes more, because more power (both\n>     > financial power and power in terms of capability/control) is granted\n>     > to miners.\n>\n>     I think that one has some duty to very clearly define something (like\n>     \"mining centralization\" [2] or \"centralization\" [5]) before\n>     complaining\n>     about it. I feel that people will occasionally use selfless complaints\n>     to accomplish a selfish goal...especially when the artificial selfless\n>     part is hard to discuss by virtue of its being poorly defined\n>     (especially vague or abstract items like \"the company\", \"our country\",\n>     etc). For example, those who take it upon themselves to \"defend\" \"the\n>     Bitcoin community\" may have exactly that in mind as their primary\n>     goal...but they may also end up with more visibility (and with it:\n>     more\n>     influence, more job offers, more conference invites, more friends,\n>     etc)\n>     and they may also end up with a megaphone for which to broadcast their\n>     other views, or just a defend-able excuse for bragging loudly\n>     about how\n>     great cypherpunks are and/or how devoted they-in-particular are to the\n>     cypherpunk tribe, et cetera. To avoid this problem in my own technical\n>     discourse, I try to avoid abstractions like \"centralization\" until I\n>     have defined them [2,5].\n>\n>     You have defined centralization above, but the definition is itself\n>     vague to the point where I do not think even you actually endorse it.\n>     For example, you would need to say that Bitcoin centralizes\n>     whenever the\n>     exchange rate increases (as this grants additional financial power to\n>     miners) or when any new user joins Bitcoin, or when tx fee revenues\n>     increase for any reason. You might also be forced to say that LN\n>     centralizes Bitcoin (as LN grants new capability/control to\n>     miners), and\n>     probably even that Bitcoin becomes more centralized when developers\n>     release new software (as this grants new capability to miners,\n>     specifically the ability to deny upgrades). This probably isn't\n>     what you\n>     meant, but since you did not clearly explain what you meant we have no\n>     way of knowing for sure.\n>\n>     It seems to me that you reject the premise that BMM [4] addresses\n>     these\n>     issues. This is probably because BMM only addresses miner's\n>     interactions\n>     with each other, and it does not address miner abilities as a group in\n>     relation to other groups (for example, vs. users, developers,\n>     investors). But, as I consistently emphasize, these groups of\n>     people are\n>     free to ignore any sidechains that they do not like. In law there is a\n>     saying 'volenti non fit injuria' which I would translate as \"he who\n>     volunteers cannot claim later to have been injured\". This is a legal\n>     theory, because otherwise everyone would be arbitrarily liable for\n>     choices beyond their control (ie, responsible for decisions of other\n>     unrelated people), which would be nonsense.\n>\n>     > 3. Drivechain limits user's existing choice when it comes to who is\n>     > acting as custodian of their Bitcoins, from any trustworthy\n>     exchange,\n>     > down to a single mining cartel under the control of a single set\n>     of laws.\n>\n>     Currently no (P2P) sidechains exist, and therefore the set of choices\n>     today would seem to be more \"limited\" than in a post-sidechain future.\n>     (The set of options may decrease later, for ecological reasons, if and\n>     only if 'exchanges' are a strictly inferior option to 'sidechains' for\n>     some reason...I don't see why this would be the case. I also don't\n>     understand the emphasis on \"exchanges\" [SCs are much more like\n>     Altcoins,\n>     than exchanges] in the first place, nor the dubious qualifier\n>     \"trustworthy\".)\n>\n>     --Paul\n>\n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170620/36c542b5/attachment-0001.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2017-06-20T13:38:59",
                "message_text_only": "- a proof-of-burn sidechain is the ultimate two-way peg.   you have to burn\nbitcoin *or* side-chain tokens to mine the side chain.   the size of the\nburn is the degree of security.    i actually wrote code to do randomized\nblind burns where you have a poisson distribution (non-deterministic\nselected burn).    there is no way to game it... it's very similar to\nalgorand - but it uses burns instead of staking\n\n- you can then have a secure sidechain that issues a mining reward in\nsidechain tokens, which can be aggrregated and redeemed for bitcoins.   the\nresult of this is that any bitcoins held in the sidechain depreciate in\nvalue at a rate of X% per year.   this deflation rate pays for increased\nsecurity\n\n- logically this functions like an alt coin, with high inflation and cheap\ntransactions.   but the altcoin is pegged to bitcoin's price because of the\npool of unredeemed bitcoins held within the side chain.\n\n\n\nOn Tue, Jun 20, 2017 at 7:54 AM, Paul Sztorc <truthcoin at gmail.com> wrote:\n\n> Hi Erik,\n>\n> As you know:\n>\n> 1. If a sidechain is merged mined it basically grows out of the existing\n> Bitcoin mining network. If it has a different PoW algorithm it is a new\n> mining network.\n> 2. The security (ie, hashrate) of any mining network would be determined\n> by the total economic value of the block. In Bitcoin this is\n> (subsidy+tx_fees)*price, but since a sidechain cannot issue new tokens it\n> would only be (tx_fees)*price.\n>\n> Unfortunately the two have a nasty correlation which can lead to a\n> disastrous self-fulfilling prophecy: users will avoid a network that is too\n> insecure; and if users avoid using a network, they will stop paying txn\n> fees and so the quantity (tx_fees)*price falls toward zero, erasing the\n> network's security. So it is quite problematic and I recommend just biting\n> the bullet and going with merged mining instead.\n>\n> And, the point may be moot. Bitcoin miners may decide that, given their\n> expertise in seeking out cheap sources of power/cooling, they might as well\n> mine both/all chains. So your suggestion may not achieve your desired\n> result (and would, meanwhile, consume more of the economy's resources --\n> some of these would not contribute even to a higher hashrate).\n>\n> Paul\n>\n>\n>\n>\n> On 6/19/2017 1:11 PM, Erik Aronesty wrote:\n>\n> It would be nice to be able to enforce that a drivechain *not* have the\n> same POW as bitcoin.\n>\n> I suspect this is the only way to be sure that a drivechain doesn't\n> destabilize the main chain and push more power to miners that already have\n> too much power.\n>\n>\n> On Mon, Jun 19, 2017 at 12:04 PM, Paul Sztorc via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi Greg,\n>>\n>> Responses below:\n>>\n>> On 6/18/2017 5:30 PM, Tao Effect wrote:\n>> > In Drivechain, 51% of miners have total control and ownership over all\n>> > of the sidechain coins.\n>>\n>> It would not be accurate to say that miners have \"total\" control. Miners\n>> do control the destination of withdrawals, but they do not control the\n>> withdrawal-duration nor the withdrawal-frequency.\n>>\n>> So, if miners wish to 'steal' from a sidechain, they _can_ initiate a\n>> theft, but they can not change the fact that their malfeasance will be\n>> [a] obvious, and [b] on display for a long period of time.\n>>\n>> We might draw a comparison between:\n>>\n>> 1. Classic Theft   -- A majority hashrate reorganizes the main Bitcoin\n>> chain to double-spend funds (or coordinate with someone who is\n>> double-spending). This is prevented/discouraged by waiting for many\n>> confirmations.\n>> 2. Channel Theft -- A majority hashrate assists a Lightning-Network\n>> thief, by censoring the punitive audit txn (possibly by exploiting some\n>> excuse regarding fullness of blocks, or possibly induced to do so by the\n>> thief provably splitting the proceeds with miners). This is\n>> prevented/discouraged by using lengthy custodial periods, paying high\n>> fees with your attacker's money, and using fungibility/non-communication\n>> to interact with miners as little as possible (so as to frame LN-theft\n>> as undermining the entire LN system, and not merely a single tragedy).\n>> 3. Drivechain Theft -- A majority hashrate initiates an unrepresentative\n>> withdrawal from some sidechain. This is prevented/discouraged by only\n>> using 'popular' sidechains (those that [a] increase the usefulness\n>> (\"market price\") of bitcoin, and [b] generate tx fees for miners). It is\n>> also discouraged by the fact that egregious theft would probably end the\n>> sidechain experiment, meaning that all present and future sidechains\n>> would be forever unavailable (and unable to buoy the price or the tx\n>> revenues).\n>>\n>> I do not think that any of the three stands out as being categorically\n>> worse than the others, especially when we consider the heterogeneity of\n>> use-cases and preferences. As Luke-Jr has been pointing out on social\n>> media recently, the very group which is more associated with miners (and\n>> explicitly more willing to trust them, ie Bitcoin Unlimited et al),\n>> happens to be the same group that would be expected to make use of a\n>> LargeBlock drivechain. Some can argue that one type of security is more\n>> \"cryptographic\" than others, but I think this is misguided (how many\n>> 'bits' of security does each have?) -- imho, all three security models\n>> are 'game theoretic' (neither computer scientific, nor cryptographic).\n>>\n>> More importantly, before a miner has any \"control\" over the sidechain\n>> coins, users must voluntarily agree to subject themselves to these new\n>> rules. This is similar to how an arbitrary piece of (open source)\n>> software can have \"total\" control over your computer...if you choose to\n>> install it.\n>>\n>> > Thus the effect of Drivechain appears to be the creation of a new kind\n>> > of digital border imposed onto the network ...\n>>\n>> I'm not sure it would \"create a border\", given that sidechains are\n>> currently not accessible at all. If anything drivechain cuts a door into\n>> an existing impassible border.\n>>\n>> >  ... where everyone hands over ownership of their Bitcoins to a\n>> > /single/ mining cartel when they wish to interact with /any/ sidechain.\n>>\n>> The qualifier \"/any/ sidechain\" would seem to imply that there is a way\n>> to do sidechains that does not involve handing over some control to 51%\n>> hashrate...I think this is false (even in the fabled case of ZK-SNARKS).\n>> The first thing I do in the drivechain spec (\n>> truthcoin.info/blog/drivechain ) is explain why.\n>>\n>> > Drivechain would be a reasonable idea if that weren't the case, but\n>> > since it is, Drivechain now introduces a very real possible future\n>> > where Bitcoins can be confiscated by the Chinese government in exactly\n>> > the same manner that the Chinese government today confiscates\n>> > financial assets in other financial networks within China.\n>>\n>> Yes, but money could also be confiscated from _any_ Bitcoin users\n>> (Chinese or otherwise) using any of the three methods I mentioned above.\n>> And confiscation could strike Chinese Bitcoin users if they decided to\n>> sell their Bitcoin for Chinese Yuan, which they then deposited in a\n>> Chinese bank. Or if they sold their Bitcoin for an Altcoin controlled by\n>> the Chinese govt in some other way.\n>>\n>> It is not up to the members of this list to decide, USSR style, what\n>> other people are allowed to do with their own money.\n>>\n>> The exceptions to this rule would be (ie, \"bitcoin-dev should care about\n>> what users are doing when...\"):\n>>\n>> 1. [Unreasonable use of Reviewer Time]  The user's use-case is either\n>> nonexistent (ie \"no one wants that\"), or totally unachievable (\"we can't\n>> do that\") thus rendering the conversation a complete waste of time /\n>> reviewer attention.\n>> 2. [Harmful Interference] The user's use-case would impose harm on some\n>> existing use-case(s).\n>>\n>> No reasonable person will claim the first, given today's scaling debate\n>> (not to mention today's 'bitcoin dominance index'). Therefore, critics\n>> must claim the second (as, for example, Peter Todd has been doing on\n>> this list).\n>>\n>> Which is why I narrowly focus on inter-chain harms [1], leading\n>> ultimately to a focus on the mining ecosystem [2,3] and the development\n>> of Blind Merged Mining [4].\n>>\n>> [1]\n>> https://www.youtube.com/watch?v=0goYH2sDw0w&list=PLw8-6ARlyV\n>> ciNjgS_NFhAu-qt7HPf_dtg&index=1\n>> [2] http://www.truthcoin.info/blog/mirage-miner-centralization/\n>> [3] http://www.truthcoin.info/blog/mining-threat-equilibrium/\n>> [4] http://www.truthcoin.info/blog/blind-merged-mining/\n>> [5] http://www.truthcoin.info/blog/measuring-decentralization/\n>>\n>> > 1. The Bitcoin network centralizes more, because more power (both\n>> > financial power and power in terms of capability/control) is granted\n>> > to miners.\n>>\n>> I think that one has some duty to very clearly define something (like\n>> \"mining centralization\" [2] or \"centralization\" [5]) before complaining\n>> about it. I feel that people will occasionally use selfless complaints\n>> to accomplish a selfish goal...especially when the artificial selfless\n>> part is hard to discuss by virtue of its being poorly defined\n>> (especially vague or abstract items like \"the company\", \"our country\",\n>> etc). For example, those who take it upon themselves to \"defend\" \"the\n>> Bitcoin community\" may have exactly that in mind as their primary\n>> goal...but they may also end up with more visibility (and with it: more\n>> influence, more job offers, more conference invites, more friends, etc)\n>> and they may also end up with a megaphone for which to broadcast their\n>> other views, or just a defend-able excuse for bragging loudly about how\n>> great cypherpunks are and/or how devoted they-in-particular are to the\n>> cypherpunk tribe, et cetera. To avoid this problem in my own technical\n>> discourse, I try to avoid abstractions like \"centralization\" until I\n>> have defined them [2,5].\n>>\n>> You have defined centralization above, but the definition is itself\n>> vague to the point where I do not think even you actually endorse it.\n>> For example, you would need to say that Bitcoin centralizes whenever the\n>> exchange rate increases (as this grants additional financial power to\n>> miners) or when any new user joins Bitcoin, or when tx fee revenues\n>> increase for any reason. You might also be forced to say that LN\n>> centralizes Bitcoin (as LN grants new capability/control to miners), and\n>> probably even that Bitcoin becomes more centralized when developers\n>> release new software (as this grants new capability to miners,\n>> specifically the ability to deny upgrades). This probably isn't what you\n>> meant, but since you did not clearly explain what you meant we have no\n>> way of knowing for sure.\n>>\n>> It seems to me that you reject the premise that BMM [4] addresses these\n>> issues. This is probably because BMM only addresses miner's interactions\n>> with each other, and it does not address miner abilities as a group in\n>> relation to other groups (for example, vs. users, developers,\n>> investors). But, as I consistently emphasize, these groups of people are\n>> free to ignore any sidechains that they do not like. In law there is a\n>> saying 'volenti non fit injuria' which I would translate as \"he who\n>> volunteers cannot claim later to have been injured\". This is a legal\n>> theory, because otherwise everyone would be arbitrarily liable for\n>> choices beyond their control (ie, responsible for decisions of other\n>> unrelated people), which would be nonsense.\n>>\n>> > 3. Drivechain limits user's existing choice when it comes to who is\n>> > acting as custodian of their Bitcoins, from any trustworthy exchange,\n>> > down to a single mining cartel under the control of a single set of\n>> laws.\n>>\n>> Currently no (P2P) sidechains exist, and therefore the set of choices\n>> today would seem to be more \"limited\" than in a post-sidechain future.\n>> (The set of options may decrease later, for ecological reasons, if and\n>> only if 'exchanges' are a strictly inferior option to 'sidechains' for\n>> some reason...I don't see why this would be the case. I also don't\n>> understand the emphasis on \"exchanges\" [SCs are much more like Altcoins,\n>> than exchanges] in the first place, nor the dubious qualifier\n>> \"trustworthy\".)\n>>\n>> --Paul\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170620/84bfa3ee/attachment-0001.html>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-06-22T13:27:25",
                "message_text_only": "Hi Erik,\n\nI don't think that your design is competitive. Why would users tolerate\na depreciation of X% per year, when there are alternatives which do not\nrequire such depreciation? It seems to me that none would.\n\nPaul\n\nOn 6/20/2017 9:38 AM, Erik Aronesty wrote:\n> - a proof-of-burn sidechain is the ultimate two-way peg.   you have to\n> burn bitcoin *or* side-chain tokens to mine the side chain.   the size\n> of the burn is the degree of security.    i actually wrote code to do\n> randomized blind burns where you have a poisson distribution\n> (non-deterministic selected burn).    there is no way to game it...\n> it's very similar to algorand - but it uses burns instead of staking\n>\n> - you can then have a secure sidechain that issues a mining reward in\n> sidechain tokens, which can be aggrregated and redeemed for bitcoins.\n>   the result of this is that any bitcoins held in the sidechain\n> depreciate in value at a rate of X% per year.   this deflation rate\n> pays for increased security\n>\n> - logically this functions like an alt coin, with high inflation and\n> cheap transactions.   but the altcoin is pegged to bitcoin's price\n> because of the pool of unredeemed bitcoins held within the side chain.\n>\n>\n>\n> On Tue, Jun 20, 2017 at 7:54 AM, Paul Sztorc <truthcoin at gmail.com\n> <mailto:truthcoin at gmail.com>> wrote:\n>\n>     Hi Erik,\n>\n>     As you know:\n>\n>     1. If a sidechain is merged mined it basically grows out of the\n>     existing Bitcoin mining network. If it has a different PoW\n>     algorithm it is a new mining network.\n>     2. The security (ie, hashrate) of any mining network would be\n>     determined by the total economic value of the block. In Bitcoin\n>     this is (subsidy+tx_fees)*price, but since a sidechain cannot\n>     issue new tokens it would only be (tx_fees)*price.\n>\n>     Unfortunately the two have a nasty correlation which can lead to a\n>     disastrous self-fulfilling prophecy: users will avoid a network\n>     that is too insecure; and if users avoid using a network, they\n>     will stop paying txn fees and so the quantity (tx_fees)*price\n>     falls toward zero, erasing the network's security. So it is quite\n>     problematic and I recommend just biting the bullet and going with\n>     merged mining instead.\n>\n>     And, the point may be moot. Bitcoin miners may decide that, given\n>     their expertise in seeking out cheap sources of power/cooling,\n>     they might as well mine both/all chains. So your suggestion may\n>     not achieve your desired result (and would, meanwhile, consume\n>     more of the economy's resources -- some of these would not\n>     contribute even to a higher hashrate).\n>\n>     Paul\n>\n>\n>\n>\n>     On 6/19/2017 1:11 PM, Erik Aronesty wrote:\n>>     It would be nice to be able to enforce that a drivechain *not*\n>>     have the same POW as bitcoin.\n>>\n>>     I suspect this is the only way to be sure that a drivechain\n>>     doesn't destabilize the main chain and push more power to miners\n>>     that already have too much power.\n>>\n>>\n>\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170622/3ba60e24/attachment.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2017-06-22T13:45:33",
                "message_text_only": "Users would tolerate depreciation because the intention is to have a cheap\nway of transacting using a two-way pegged chain that isn't controlled by\nminers.   Who cares about some minor depreciation when the purpose of the\nchain is to do cheap secure transactions forever?\n\nAdd in UTXO commitments and you've got a system that is cheap and\nsecure-enough for transfer. storage and accumulation of a ledger... before\nmoving in to the main chain.\n\nSeems better to me than messing with the main chain's incentive structure\nvia merged mining.\n\n\nOn Thu, Jun 22, 2017 at 9:27 AM, Paul Sztorc <truthcoin at gmail.com> wrote:\n\n> Hi Erik,\n>\n> I don't think that your design is competitive. Why would users tolerate a\n> depreciation of X% per year, when there are alternatives which do not\n> require such depreciation? It seems to me that none would.\n>\n> Paul\n>\n> On 6/20/2017 9:38 AM, Erik Aronesty wrote:\n>\n> - a proof-of-burn sidechain is the ultimate two-way peg.   you have to\n> burn bitcoin *or* side-chain tokens to mine the side chain.   the size of\n> the burn is the degree of security.    i actually wrote code to do\n> randomized blind burns where you have a poisson distribution\n> (non-deterministic selected burn).    there is no way to game it... it's\n> very similar to algorand - but it uses burns instead of staking\n>\n> - you can then have a secure sidechain that issues a mining reward in\n> sidechain tokens, which can be aggrregated and redeemed for bitcoins.   the\n> result of this is that any bitcoins held in the sidechain depreciate in\n> value at a rate of X% per year.   this deflation rate pays for increased\n> security\n>\n> - logically this functions like an alt coin, with high inflation and cheap\n> transactions.   but the altcoin is pegged to bitcoin's price because of the\n> pool of unredeemed bitcoins held within the side chain.\n>\n>\n>\n> On Tue, Jun 20, 2017 at 7:54 AM, Paul Sztorc <truthcoin at gmail.com> wrote:\n>\n>> Hi Erik,\n>>\n>> As you know:\n>>\n>> 1. If a sidechain is merged mined it basically grows out of the existing\n>> Bitcoin mining network. If it has a different PoW algorithm it is a new\n>> mining network.\n>> 2. The security (ie, hashrate) of any mining network would be determined\n>> by the total economic value of the block. In Bitcoin this is\n>> (subsidy+tx_fees)*price, but since a sidechain cannot issue new tokens it\n>> would only be (tx_fees)*price.\n>>\n>> Unfortunately the two have a nasty correlation which can lead to a\n>> disastrous self-fulfilling prophecy: users will avoid a network that is too\n>> insecure; and if users avoid using a network, they will stop paying txn\n>> fees and so the quantity (tx_fees)*price falls toward zero, erasing the\n>> network's security. So it is quite problematic and I recommend just biting\n>> the bullet and going with merged mining instead.\n>>\n>> And, the point may be moot. Bitcoin miners may decide that, given their\n>> expertise in seeking out cheap sources of power/cooling, they might as well\n>> mine both/all chains. So your suggestion may not achieve your desired\n>> result (and would, meanwhile, consume more of the economy's resources --\n>> some of these would not contribute even to a higher hashrate).\n>>\n>> Paul\n>>\n>>\n>>\n>>\n>> On 6/19/2017 1:11 PM, Erik Aronesty wrote:\n>>\n>> It would be nice to be able to enforce that a drivechain *not* have the\n>> same POW as bitcoin.\n>>\n>> I suspect this is the only way to be sure that a drivechain doesn't\n>> destabilize the main chain and push more power to miners that already have\n>> too much power.\n>>\n>>\n>>\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170622/bc42c113/attachment.html>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-06-22T20:30:39",
                "message_text_only": "Responses inline.\n\nOn 6/22/2017 9:45 AM, Erik Aronesty wrote:\n> Users would tolerate depreciation because the intention is to have a\n> cheap way of transacting using a two-way pegged chain that isn't\n> controlled by miners.  Who cares about some minor depreciation when\n> the purpose of the chain is to do cheap secure transactions forever?\n\nThus far you've claimed that these transactions would be \"cheap\", \"[not]\ncontrolled by miners\", and \"secure\".\n\nThey would certainly not be cheap, because they are relatively more\nexpensive due to the extra depreciation cost.\n\nI also doubt that they would be free of control by miners. 51% hashrate\ncan always filter out any message they want from anywhere.\n\nFor the same reason, I don't understand why they would be any more or\nless secure.\n\nSo I think your way is just a more expensive way of accomplishing\nbasically the same result.\n\n>\n> Add in UTXO commitments and you've got a system that is cheap and\n> secure-enough for transfer. storage and accumulation of a ledger...\n> before moving in to the main chain.\n\nAs I posted to bitcoin-discuss last week, I support UTXO commitments for\nsidechains.\n\n> Seems better to me than messing with the main chain's incentive\n> structure via merged mining.\n\nI don't think that blind merged mining messes with the main chain's\nincentive structure. Miners are free to ignore the sidechain (and yet\nstill get paid the same as other miners), as are all mainchain users.\n\nPaul\n>\n> On Thu, Jun 22, 2017 at 9:27 AM, Paul Sztorc <truthcoin at gmail.com\n> <mailto:truthcoin at gmail.com>> wrote:\n>\n>     Hi Erik,\n>\n>     I don't think that your design is competitive. Why would users\n>     tolerate a depreciation of X% per year, when there are\n>     alternatives which do not require such depreciation? It seems to\n>     me that none would.\n>\n>     Paul\n>\n>     On 6/20/2017 9:38 AM, Erik Aronesty wrote:\n>>     - a proof-of-burn sidechain is the ultimate two-way peg.   you\n>>     have to burn bitcoin *or* side-chain tokens to mine the side\n>>     chain.   the size of the burn is the degree of security.    i\n>>     actually wrote code to do randomized blind burns where you have a\n>>     poisson distribution (non-deterministic selected burn).    there\n>>     is no way to game it... it's very similar to algorand - but it\n>>     uses burns instead of staking\n>>\n>>     - you can then have a secure sidechain that issues a mining\n>>     reward in sidechain tokens, which can be aggrregated and redeemed\n>>     for bitcoins.   the result of this is that any bitcoins held in\n>>     the sidechain depreciate in value at a rate of X% per year.  \n>>     this deflation rate pays for increased security\n>>\n>>     - logically this functions like an alt coin, with high inflation\n>>     and cheap transactions.   but the altcoin is pegged to bitcoin's\n>>     price because of the pool of unredeemed bitcoins held within the\n>>     side chain.\n>>\n>>\n>>\n>>     On Tue, Jun 20, 2017 at 7:54 AM, Paul Sztorc <truthcoin at gmail.com\n>>     <mailto:truthcoin at gmail.com>> wrote:\n>>\n>>         Hi Erik,\n>>\n>>         As you know:\n>>\n>>         1. If a sidechain is merged mined it basically grows out of\n>>         the existing Bitcoin mining network. If it has a different\n>>         PoW algorithm it is a new mining network.\n>>         2. The security (ie, hashrate) of any mining network would be\n>>         determined by the total economic value of the block. In\n>>         Bitcoin this is (subsidy+tx_fees)*price, but since a\n>>         sidechain cannot issue new tokens it would only be\n>>         (tx_fees)*price.\n>>\n>>         Unfortunately the two have a nasty correlation which can lead\n>>         to a disastrous self-fulfilling prophecy: users will avoid a\n>>         network that is too insecure; and if users avoid using a\n>>         network, they will stop paying txn fees and so the quantity\n>>         (tx_fees)*price falls toward zero, erasing the network's\n>>         security. So it is quite problematic and I recommend just\n>>         biting the bullet and going with merged mining instead.\n>>\n>>         And, the point may be moot. Bitcoin miners may decide that,\n>>         given their expertise in seeking out cheap sources of\n>>         power/cooling, they might as well mine both/all chains. So\n>>         your suggestion may not achieve your desired result (and\n>>         would, meanwhile, consume more of the economy's resources --\n>>         some of these would not contribute even to a higher hashrate).\n>>\n>>         Paul\n>>\n>>\n>>\n>>\n>>         On 6/19/2017 1:11 PM, Erik Aronesty wrote:\n>>>         It would be nice to be able to enforce that a drivechain\n>>>         *not* have the same POW as bitcoin.\n>>>\n>>>         I suspect this is the only way to be sure that a drivechain\n>>>         doesn't destabilize the main chain and push more power to\n>>>         miners that already have too much power.\n>>>\n>>>\n>>\n>>\n>\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170622/cb6a08cf/attachment-0001.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2017-06-23T14:19:18",
                "message_text_only": "> They would certainly not be cheap, because they are relatively more\nexpensive due to the extra depreciation cost.\n\nThis depends on how long you expect to keep money on a side chain and how\nmany transactions you plan on doing.   Inflation is a great way of paying\nPoS / PoB  miners - that cannot introduce issues with consolidation.   If\nyou design the inflation schedule correctly, it should be balance\ntransaction costs *precisely*.   Indeed, you can calculate the exact amount\nof inflation needed to guarantee that a side chain is always exactly 10\ntimes cheaper than bitcoin.\n\n>As I posted to bitcoin-discuss last week, I support UTXO commitments for\nsidechains.\n\nIndeed, I think side chain nodes should always be fast-synced from 6 month\nold commitments and thus be ephemeral, cheap, and *never *appropriate for\nlong term storage.  This would provide the best possible incentive\nstructure to keep the main chain secure, paid for with high clearing fees,\netc.\n\n> I don't think that blind merged mining messes with the main chain's\nincentive structure\n\nThe critical issue is that we cannot introduce protocol changes that\n*further *incentivize geographical and institutional consolidation.  Miners\nwho are able to deal with the bandwidth caused by drivechain coffee\ntransactions will profit from these transactions, whereas smaller and more\ngeographically distributed miners will not.   Those miners will, in turn,\nbuild faster ASICs and buy more electricity and drive out smaller players.\n  I think this is *abundantly *clear, and is the primary motivation behind\npreserving block size limits.\n\nIf this premise is false (which it may be), or is skewed so as to damage\nbitcoin as a whole (could be as well), then that needs to be demonstrated\n*first*.\n\nThe lightning model does the opposite of this.   Miners watch fees increase\nand coming from an *orthoganal* protocol that cannot cause further\ncentralization.\n\nOne problem is that the main chain also *must* grow in response to\nbandwidth, or the disadvantages of using the main chain will weaken\nfinancial support and hashrate securing it.   I believe this is also true,\nand that a \"balancing act\" will be Bitcoin's norm until we adopt something\nlike BIP103 - which provides a steady and appropriate growth.\n\n\n\n\n\nOn Thu, Jun 22, 2017 at 4:30 PM, Paul Sztorc <truthcoin at gmail.com> wrote:\n\n> Responses inline.\n>\n> On 6/22/2017 9:45 AM, Erik Aronesty wrote:\n>\n> Users would tolerate depreciation because the intention is to have a cheap\n> way of transacting using a two-way pegged chain that isn't controlled by\n> miners.  Who cares about some minor depreciation when the purpose of the\n> chain is to do cheap secure transactions forever?\n>\n>\n> Thus far you've claimed that these transactions would be \"cheap\", \"[not]\n> controlled by miners\", and \"secure\".\n>\n> They would certainly not be cheap, because they are relatively more\n> expensive due to the extra depreciation cost.\n>\n> I also doubt that they would be free of control by miners. 51% hashrate\n> can always filter out any message they want from anywhere.\n>\n> For the same reason, I don't understand why they would be any more or less\n> secure.\n>\n> So I think your way is just a more expensive way of accomplishing\n> basically the same result.\n>\n>\n> Add in UTXO commitments and you've got a system that is cheap and\n> secure-enough for transfer. storage and accumulation of a ledger... before\n> moving in to the main chain.\n>\n>\n> As I posted to bitcoin-discuss last week, I support UTXO commitments for\n> sidechains.\n>\n> Seems better to me than messing with the main chain's incentive structure\n> via merged mining.\n>\n>\n> I don't think that blind merged mining messes with the main chain's\n> incentive structure. Miners are free to ignore the sidechain (and yet still\n> get paid the same as other miners), as are all mainchain users.\n>\n> Paul\n>\n>\n> On Thu, Jun 22, 2017 at 9:27 AM, Paul Sztorc <truthcoin at gmail.com> wrote:\n>\n>> Hi Erik,\n>>\n>> I don't think that your design is competitive. Why would users tolerate a\n>> depreciation of X% per year, when there are alternatives which do not\n>> require such depreciation? It seems to me that none would.\n>>\n>> Paul\n>>\n>> On 6/20/2017 9:38 AM, Erik Aronesty wrote:\n>>\n>> - a proof-of-burn sidechain is the ultimate two-way peg.   you have to\n>> burn bitcoin *or* side-chain tokens to mine the side chain.   the size of\n>> the burn is the degree of security.    i actually wrote code to do\n>> randomized blind burns where you have a poisson distribution\n>> (non-deterministic selected burn).    there is no way to game it... it's\n>> very similar to algorand - but it uses burns instead of staking\n>>\n>> - you can then have a secure sidechain that issues a mining reward in\n>> sidechain tokens, which can be aggrregated and redeemed for bitcoins.   the\n>> result of this is that any bitcoins held in the sidechain depreciate in\n>> value at a rate of X% per year.   this deflation rate pays for increased\n>> security\n>>\n>> - logically this functions like an alt coin, with high inflation and\n>> cheap transactions.   but the altcoin is pegged to bitcoin's price because\n>> of the pool of unredeemed bitcoins held within the side chain.\n>>\n>>\n>>\n>> On Tue, Jun 20, 2017 at 7:54 AM, Paul Sztorc <truthcoin at gmail.com> wrote:\n>>\n>>> Hi Erik,\n>>>\n>>> As you know:\n>>>\n>>> 1. If a sidechain is merged mined it basically grows out of the existing\n>>> Bitcoin mining network. If it has a different PoW algorithm it is a new\n>>> mining network.\n>>> 2. The security (ie, hashrate) of any mining network would be determined\n>>> by the total economic value of the block. In Bitcoin this is\n>>> (subsidy+tx_fees)*price, but since a sidechain cannot issue new tokens it\n>>> would only be (tx_fees)*price.\n>>>\n>>> Unfortunately the two have a nasty correlation which can lead to a\n>>> disastrous self-fulfilling prophecy: users will avoid a network that is too\n>>> insecure; and if users avoid using a network, they will stop paying txn\n>>> fees and so the quantity (tx_fees)*price falls toward zero, erasing the\n>>> network's security. So it is quite problematic and I recommend just biting\n>>> the bullet and going with merged mining instead.\n>>>\n>>> And, the point may be moot. Bitcoin miners may decide that, given their\n>>> expertise in seeking out cheap sources of power/cooling, they might as well\n>>> mine both/all chains. So your suggestion may not achieve your desired\n>>> result (and would, meanwhile, consume more of the economy's resources --\n>>> some of these would not contribute even to a higher hashrate).\n>>>\n>>> Paul\n>>>\n>>>\n>>>\n>>>\n>>> On 6/19/2017 1:11 PM, Erik Aronesty wrote:\n>>>\n>>> It would be nice to be able to enforce that a drivechain *not* have the\n>>> same POW as bitcoin.\n>>>\n>>> I suspect this is the only way to be sure that a drivechain doesn't\n>>> destabilize the main chain and push more power to miners that already have\n>>> too much power.\n>>>\n>>>\n>>>\n>>>\n>>\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170623/7f19dcfe/attachment.html>"
            },
            {
                "author": "Moral Agent",
                "date": "2017-06-23T14:51:20",
                "message_text_only": ">Miners who are able to deal with the bandwidth caused by drivechain coffee\ntransactions will profit from these transactions, whereas smaller and more\ngeographically distributed miners will not.   Those miners will, in turn,\nbuild faster ASICs and buy more electricity and drive out smaller players.\n\nI think you are conflating 3 different (though overlapping) groups:\n\n1. Block header generators. These need 'good internet' meaning very low\nlatency, reasonable bandwidth, good place in network (e.g. FIBRE or mining\nbackbone). They need reliable computers with enough RAM and CPU to validate\nprior blocks promptly and immediately assemble new blocks.\n\n2. Hashers. These need cheap electricity, access to economical uses of\nwaste heat, cheap mining hardware. e.g. IOT electric water heater.\n\n3. ASIC manufacturers. These need lots of capital, etc.\n\nIt might be helpful to keep these three groups distinct in your mind and\nconversation, and to use the protocol as a crowbar to pry them into\nseparate people, or at a minimum make it economically possible to\nparticipate in one role without needing to participate in the other two. If\ndifferent, geographically and politically dispersed groups are helping\nperform these functions, it aids decentralization.\n\nOn Fri, Jun 23, 2017 at 10:19 AM, Erik Aronesty via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> > They would certainly not be cheap, because they are relatively more\n> expensive due to the extra depreciation cost.\n>\n> This depends on how long you expect to keep money on a side chain and how\n> many transactions you plan on doing.   Inflation is a great way of paying\n> PoS / PoB  miners - that cannot introduce issues with consolidation.   If\n> you design the inflation schedule correctly, it should be balance\n> transaction costs *precisely*.   Indeed, you can calculate the exact amount\n> of inflation needed to guarantee that a side chain is always exactly 10\n> times cheaper than bitcoin.\n>\n> >As I posted to bitcoin-discuss last week, I support UTXO commitments for\n> sidechains.\n>\n> Indeed, I think side chain nodes should always be fast-synced from 6 month\n> old commitments and thus be ephemeral, cheap, and *never *appropriate for\n> long term storage.  This would provide the best possible incentive\n> structure to keep the main chain secure, paid for with high clearing fees,\n> etc.\n>\n> > I don't think that blind merged mining messes with the main chain's\n> incentive structure\n>\n> The critical issue is that we cannot introduce protocol changes that\n> *further *incentivize geographical and institutional consolidation.\n> Miners who are able to deal with the bandwidth caused by drivechain coffee\n> transactions will profit from these transactions, whereas smaller and more\n> geographically distributed miners will not.   Those miners will, in turn,\n> build faster ASICs and buy more electricity and drive out smaller players.\n>   I think this is *abundantly *clear, and is the primary motivation\n> behind preserving block size limits.\n>\n> If this premise is false (which it may be), or is skewed so as to damage\n> bitcoin as a whole (could be as well), then that needs to be demonstrated\n> *first*.\n>\n> The lightning model does the opposite of this.   Miners watch fees\n> increase and coming from an *orthoganal* protocol that cannot cause further\n> centralization.\n>\n> One problem is that the main chain also *must* grow in response to\n> bandwidth, or the disadvantages of using the main chain will weaken\n> financial support and hashrate securing it.   I believe this is also true,\n> and that a \"balancing act\" will be Bitcoin's norm until we adopt something\n> like BIP103 - which provides a steady and appropriate growth.\n>\n>\n>\n>\n>\n> On Thu, Jun 22, 2017 at 4:30 PM, Paul Sztorc <truthcoin at gmail.com> wrote:\n>\n>> Responses inline.\n>>\n>> On 6/22/2017 9:45 AM, Erik Aronesty wrote:\n>>\n>> Users would tolerate depreciation because the intention is to have a\n>> cheap way of transacting using a two-way pegged chain that isn't controlled\n>> by miners.  Who cares about some minor depreciation when the purpose of the\n>> chain is to do cheap secure transactions forever?\n>>\n>>\n>> Thus far you've claimed that these transactions would be \"cheap\", \"[not]\n>> controlled by miners\", and \"secure\".\n>>\n>> They would certainly not be cheap, because they are relatively more\n>> expensive due to the extra depreciation cost.\n>>\n>> I also doubt that they would be free of control by miners. 51% hashrate\n>> can always filter out any message they want from anywhere.\n>>\n>> For the same reason, I don't understand why they would be any more or\n>> less secure.\n>>\n>> So I think your way is just a more expensive way of accomplishing\n>> basically the same result.\n>>\n>>\n>> Add in UTXO commitments and you've got a system that is cheap and\n>> secure-enough for transfer. storage and accumulation of a ledger... before\n>> moving in to the main chain.\n>>\n>>\n>> As I posted to bitcoin-discuss last week, I support UTXO commitments for\n>> sidechains.\n>>\n>> Seems better to me than messing with the main chain's incentive structure\n>> via merged mining.\n>>\n>>\n>> I don't think that blind merged mining messes with the main chain's\n>> incentive structure. Miners are free to ignore the sidechain (and yet still\n>> get paid the same as other miners), as are all mainchain users.\n>>\n>> Paul\n>>\n>>\n>> On Thu, Jun 22, 2017 at 9:27 AM, Paul Sztorc <truthcoin at gmail.com> wrote:\n>>\n>>> Hi Erik,\n>>>\n>>> I don't think that your design is competitive. Why would users tolerate\n>>> a depreciation of X% per year, when there are alternatives which do not\n>>> require such depreciation? It seems to me that none would.\n>>>\n>>> Paul\n>>>\n>>> On 6/20/2017 9:38 AM, Erik Aronesty wrote:\n>>>\n>>> - a proof-of-burn sidechain is the ultimate two-way peg.   you have to\n>>> burn bitcoin *or* side-chain tokens to mine the side chain.   the size of\n>>> the burn is the degree of security.    i actually wrote code to do\n>>> randomized blind burns where you have a poisson distribution\n>>> (non-deterministic selected burn).    there is no way to game it... it's\n>>> very similar to algorand - but it uses burns instead of staking\n>>>\n>>> - you can then have a secure sidechain that issues a mining reward in\n>>> sidechain tokens, which can be aggrregated and redeemed for bitcoins.   the\n>>> result of this is that any bitcoins held in the sidechain depreciate in\n>>> value at a rate of X% per year.   this deflation rate pays for increased\n>>> security\n>>>\n>>> - logically this functions like an alt coin, with high inflation and\n>>> cheap transactions.   but the altcoin is pegged to bitcoin's price because\n>>> of the pool of unredeemed bitcoins held within the side chain.\n>>>\n>>>\n>>>\n>>> On Tue, Jun 20, 2017 at 7:54 AM, Paul Sztorc <truthcoin at gmail.com>\n>>> wrote:\n>>>\n>>>> Hi Erik,\n>>>>\n>>>> As you know:\n>>>>\n>>>> 1. If a sidechain is merged mined it basically grows out of the\n>>>> existing Bitcoin mining network. If it has a different PoW algorithm it is\n>>>> a new mining network.\n>>>> 2. The security (ie, hashrate) of any mining network would be\n>>>> determined by the total economic value of the block. In Bitcoin this is\n>>>> (subsidy+tx_fees)*price, but since a sidechain cannot issue new tokens it\n>>>> would only be (tx_fees)*price.\n>>>>\n>>>> Unfortunately the two have a nasty correlation which can lead to a\n>>>> disastrous self-fulfilling prophecy: users will avoid a network that is too\n>>>> insecure; and if users avoid using a network, they will stop paying txn\n>>>> fees and so the quantity (tx_fees)*price falls toward zero, erasing the\n>>>> network's security. So it is quite problematic and I recommend just biting\n>>>> the bullet and going with merged mining instead.\n>>>>\n>>>> And, the point may be moot. Bitcoin miners may decide that, given their\n>>>> expertise in seeking out cheap sources of power/cooling, they might as well\n>>>> mine both/all chains. So your suggestion may not achieve your desired\n>>>> result (and would, meanwhile, consume more of the economy's resources --\n>>>> some of these would not contribute even to a higher hashrate).\n>>>>\n>>>> Paul\n>>>>\n>>>>\n>>>>\n>>>>\n>>>> On 6/19/2017 1:11 PM, Erik Aronesty wrote:\n>>>>\n>>>> It would be nice to be able to enforce that a drivechain *not* have the\n>>>> same POW as bitcoin.\n>>>>\n>>>> I suspect this is the only way to be sure that a drivechain doesn't\n>>>> destabilize the main chain and push more power to miners that already have\n>>>> too much power.\n>>>>\n>>>>\n>>>>\n>>>>\n>>>\n>>>\n>>\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170623/1d48aca3/attachment-0001.html>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-06-23T18:11:26",
                "message_text_only": "On 6/23/2017 10:19 AM, Erik Aronesty wrote:\n> > They would certainly not be cheap, because they are relatively more expensive due to the\n> extra depreciation cost.\n>\n> If you design the inflation schedule correctly, it should be balance\n> transaction costs *precisely*.\n\nYou have not explained how your scheme would cause a relative decrease\nin transaction costs. The way I see it, tx costs would be exactly the\nsame, so it would in fact be impossible to design an inflation schedule\nto \"balance\" these costs (other than inflation of zero as I suggest).\n\n>\n> > I don't think that blind merged mining messes with the main chain's\n> incentive structure \n>\n> Miners who are able to deal with the bandwidth caused by drivechain\n> coffee transactions\nThere is no additional bandwidth requirement. That is the point of BMM.\nThey do not even need to run a sidechain node (to be paid just as much\nas if they had).\n\n--Paul\n\n\n\n>\n> On Thu, Jun 22, 2017 at 4:30 PM, Paul Sztorc <truthcoin at gmail.com\n> <mailto:truthcoin at gmail.com>> wrote:\n>\n>     Responses inline.\n>\n>     On 6/22/2017 9:45 AM, Erik Aronesty wrote:\n>>     Users would tolerate depreciation because the intention is to\n>>     have a cheap way of transacting using a two-way pegged chain that\n>>     isn't controlled by miners.  Who cares about some minor\n>>     depreciation when the purpose of the chain is to do cheap secure\n>>     transactions forever?\n>\n>     Thus far you've claimed that these transactions would be \"cheap\",\n>     \"[not] controlled by miners\", and \"secure\".\n>\n>     They would certainly not be cheap, because they are relatively\n>     more expensive due to the extra depreciation cost.\n>\n>     I also doubt that they would be free of control by miners. 51%\n>     hashrate can always filter out any message they want from anywhere.\n>\n>     For the same reason, I don't understand why they would be any more\n>     or less secure.\n>\n>     So I think your way is just a more expensive way of accomplishing\n>     basically the same result.\n>\n>>\n>>     Add in UTXO commitments and you've got a system that is cheap and\n>>     secure-enough for transfer. storage and accumulation of a\n>>     ledger... before moving in to the main chain.\n>\n>     As I posted to bitcoin-discuss last week, I support UTXO\n>     commitments for sidechains.\n>\n>>     Seems better to me than messing with the main chain's incentive\n>>     structure via merged mining.\n>\n>     I don't think that blind merged mining messes with the main\n>     chain's incentive structure. Miners are free to ignore the\n>     sidechain (and yet still get paid the same as other miners), as\n>     are all mainchain users.\n>\n>     Paul\n>>\n>>     On Thu, Jun 22, 2017 at 9:27 AM, Paul Sztorc <truthcoin at gmail.com\n>>     <mailto:truthcoin at gmail.com>> wrote:\n>>\n>>         Hi Erik,\n>>\n>>         I don't think that your design is competitive. Why would\n>>         users tolerate a depreciation of X% per year, when there are\n>>         alternatives which do not require such depreciation? It seems\n>>         to me that none would.\n>>\n>>         Paul\n>>\n>>         On 6/20/2017 9:38 AM, Erik Aronesty wrote:\n>>>         - a proof-of-burn sidechain is the ultimate two-way peg.  \n>>>         you have to burn bitcoin *or* side-chain tokens to mine the\n>>>         side chain.   the size of the burn is the degree of\n>>>         security.    i actually wrote code to do randomized blind\n>>>         burns where you have a poisson distribution\n>>>         (non-deterministic selected burn).    there is no way to\n>>>         game it... it's very similar to algorand - but it uses burns\n>>>         instead of staking\n>>>\n>>>         - you can then have a secure sidechain that issues a mining\n>>>         reward in sidechain tokens, which can be aggrregated and\n>>>         redeemed for bitcoins.   the result of this is that any\n>>>         bitcoins held in the sidechain depreciate in value at a rate\n>>>         of X% per year.   this deflation rate pays for increased\n>>>         security\n>>>\n>>>         - logically this functions like an alt coin, with high\n>>>         inflation and cheap transactions.   but the altcoin is\n>>>         pegged to bitcoin's price because of the pool of unredeemed\n>>>         bitcoins held within the side chain.\n>>>\n>>>\n>>>\n>>>         On Tue, Jun 20, 2017 at 7:54 AM, Paul Sztorc\n>>>         <truthcoin at gmail.com <mailto:truthcoin at gmail.com>> wrote:\n>>>\n>>>             Hi Erik,\n>>>\n>>>             As you know:\n>>>\n>>>             1. If a sidechain is merged mined it basically grows out\n>>>             of the existing Bitcoin mining network. If it has a\n>>>             different PoW algorithm it is a new mining network.\n>>>             2. The security (ie, hashrate) of any mining network\n>>>             would be determined by the total economic value of the\n>>>             block. In Bitcoin this is (subsidy+tx_fees)*price, but\n>>>             since a sidechain cannot issue new tokens it would only\n>>>             be (tx_fees)*price.\n>>>\n>>>             Unfortunately the two have a nasty correlation which can\n>>>             lead to a disastrous self-fulfilling prophecy: users\n>>>             will avoid a network that is too insecure; and if users\n>>>             avoid using a network, they will stop paying txn fees\n>>>             and so the quantity (tx_fees)*price falls toward zero,\n>>>             erasing the network's security. So it is quite\n>>>             problematic and I recommend just biting the bullet and\n>>>             going with merged mining instead.\n>>>\n>>>             And, the point may be moot. Bitcoin miners may decide\n>>>             that, given their expertise in seeking out cheap sources\n>>>             of power/cooling, they might as well mine both/all\n>>>             chains. So your suggestion may not achieve your desired\n>>>             result (and would, meanwhile, consume more of the\n>>>             economy's resources -- some of these would not\n>>>             contribute even to a higher hashrate).\n>>>\n>>>             Paul\n>>>\n>>>\n>>>\n>>>\n>>>             On 6/19/2017 1:11 PM, Erik Aronesty wrote:\n>>>>             It would be nice to be able to enforce that a\n>>>>             drivechain *not* have the same POW as bitcoin.\n>>>>\n>>>>             I suspect this is the only way to be sure that a\n>>>>             drivechain doesn't destabilize the main chain and push\n>>>>             more power to miners that already have too much power.\n>>>>\n>>>>\n>>>\n>>>\n>>\n>>\n>\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170623/f6a7f0fc/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Drivechain RfD -- Follow Up",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Tao Effect",
                "Paul Sztorc",
                "Erik Aronesty",
                "Moral Agent"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 109566
        }
    },
    {
        "title": "[bitcoin-dev] BIP149 timeout-- why so far in the future?",
        "thread_messages": [
            {
                "author": "Ryan Grant",
                "date": "2017-06-11T05:48:39",
                "message_text_only": "Is there any reason that BIP149 activation on November 16th would\ncause a problem?"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2017-06-11T13:17:43",
                "message_text_only": "The current proposal assumes that bip149 would only be merged and\nreleased after nov15, so there's not time in one day.\n\nMy preference would be a bip149 proposal that could be merged and\nreleased now, but some people complain that would require more\ntesting, because if you deploy bip149 and then sw gets activated pre\nnov15, then you want bip149 nodes to use the old service bit for\nsegwit, not the new one (you would use that one if it activates post\nnov15, so that pre-bip149 nodes don't get confused).\n\nI was slowly modifying shaolinfry's code to try to code that, but I'm\ncurrently not working on it because there doesn't seem there's a lot\nof interest in releasing bip149 before nov15...\n\nhttps://github.com/jtimon/bitcoin/commits/b15-shaolinfry-bip149\n\n\nOn Sun, Jun 11, 2017 at 7:48 AM, Ryan Grant via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Is there any reason that BIP149 activation on November 16th would\n> cause a problem?\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2017-06-11T14:29:08",
                "message_text_only": "On Sun, Jun 11, 2017 at 3:44 PM, Martijn Meijering via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Jorge Tim\u00f3n wrote:\n> Why not just make sure BIP 149 will never activate unless BIP 141 has\n> expired unsuccessfully?\n\nRight, that would be part of it, as well as not removing the BIP141\ndeployment with bip9.\nSee https://github.com/jtimon/bitcoin/commit/62efd741740f5c75c43d78358d6318941e6d3c04\n\n> If BIP 141 should unexpectly activate, then\n> BIP 149 nodes would notice and act as pre-SegWit nodes indefinitely,\n> but remain in consensus with BIP 141 nodes.\n>\n> It might be slightly less convenient for BIP 149 users to upgrade\n> again, but then at least we could start deploying BIP 149 sooner.\n\nNo, if segwit activates pre nov15, bip149 nodse can detect and\ninterpret that just fine.\nThe problem if it activates post nov15, then you need a separate\nservice bit in the p2p network, for pre-BIP149 will think sw hasn't\nactivated while post-BIP149 would know it has activated.\n\nIf you release it only after nov15, you don't need to test\ncompatibility between the two for neither of this two cases.\nOr do you? Actually you only save testing the easier case of pre-nov15\nactivation.\n\n\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "BIP149 timeout-- why so far in the future?",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Ryan Grant",
                "Jorge Tim\u00f3n"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 2609
        }
    },
    {
        "title": "[bitcoin-dev]  BIP149 timeout-- why so far in the future?",
        "thread_messages": [
            {
                "author": "Martijn Meijering",
                "date": "2017-06-11T13:44:17",
                "message_text_only": "Jorge Tim\u00f3n wrote:\n\n\"My preference would be a bip149 proposal that could be merged and\nreleased now, but some people complain that would require more\ntesting, because *if you deploy bip149 and then sw gets activated pre\nnov15, then you want bip149 nodes to use the old service bit for\nsegwit*, not the new one (you would use that one if it activates post\nnov15, so that pre-bip149 nodes don't get confused).\"\n(emphasis added)\n\nWhy not just make sure BIP 149 will never activate unless BIP 141 has\nexpired unsuccessfully? If BIP 141 should unexpectly activate, then\nBIP 149 nodes would notice and act as pre-SegWit nodes indefinitely,\nbut remain in consensus with BIP 141 nodes.\n\nIt might be slightly less convenient for BIP 149 users to upgrade\nagain, but then at least we could start deploying BIP 149 sooner."
            }
        ],
        "thread_summary": {
            "title": "BIP149 timeout-- why so far in the future?",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Martijn Meijering"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 810
        }
    },
    {
        "title": "[bitcoin-dev] extended BIP9 activation of segwit, for legacy nodes",
        "thread_messages": [
            {
                "author": "Ryan Grant",
                "date": "2017-06-11T19:31:00",
                "message_text_only": "This[1] idea from April would assist in a BIP149-like segwit\nactivation on November 16th.\n\nIts goal is to be incredibly easy to test and deploy, right now, even\nbefore a decision on revisions to BIP149 is made, and well before such\n\"BIP149ish\" testing is itself complete.\n\nUASFs don't need time for most legacy nodes to upgrade - that's the\npoint of a soft fork.  UASFs simply need to have inevitability,\nwhich is provided by some nodes more than others.  But for the node\nless instrumental in that inevitability, and more relaxed about\nscheduling upgrade work, being moved to a miner-protected consensus\nruleset is not as desirable a position as the opportunity to\nparticipate fully.  As a courtesy, the plan for soft forks has\nalways been to allow legacy nodes time to upgrade to full\nparticipation.  How much time should rollouts allow for this\ncourtesy?\n\nExtended BIP9 activation of segwit (for legacy nodes) separates\nconcerns between intending to activate segwit and its method of\ndeployment, allowing \"semi-legacy\" nodes that have upgraded to\ninclude this proposal to participate immediately in a successful\nsegwit activation, without needing any courtesy time to upgrade to\nthe particular deployment logic.\n\nCode for deployment is included in the original email[1].  There's\nnothing missing from the logic shown.  The whole intent of the\nproposal is that other deployment specifics are left to be defined\nby future proposals.  In the same block that THRESHOLD_ACTIVE is\nreached for segwit, require Consensus::DEPLOYMENT_SEGWIT_ALT1 to\nalso reach THRESHOLD_ACTIVE, and the burden of the future proposal\nis fulfilled.\n\nIf the idea proves broken or of no benefit, when actually\nimplementing and testing future deployments, then we can avoid using\nDEPLOYMENT_SEGWIT_ALT1 until it expires, and zero nodes get hurt.\n\nLet's look at how this affects options for how to deploy segwit...\n\n/ BIP149ish UASF, without this proposal /\n\nroadmap:\n  - BIP149ish debated (handles BIP141 success, unlike BIP149)\n  - BIP149ish tested\n  - BIP149ish courtesy timeout debated\n  - BIP148    fails\n  - BIP149ish released\n  - BIP141    fails\n  - BIP149ish courtesy timeout expires\n  - BIP149ish activates\n  - segwit activates\n  - legacy nodes must upgrade before recognizing BIP149 activation\n\nIf we try to restrict ourselves to only the original service bit, we\nsee a tension between activating soon and leaving legacy nodes on a\nminer-protected consensus.  We also see a tension between *planning*\nhow long it will take to debate and test UASF logic, and setting\nexpectations for when a reasonable activation date is.\n\nThese seemingly small tensions complicate the solution, and push it\nout of developer's visions of what is feasible.  It's not clear how\nsoon it can happen, so it doesn't get started in an urgent manner.\nIt doesn't get started in an urgent manner, so it's not clear how\nsoon it can happen.\n\n/ BIP149ish UASF, with this proposal /\n\nroadmap:\n  - this proposal debated\n  - this proposal tested\n  - this proposal released (courtesy begins)\n  - BIP149ish     debated  (handles BIP141 success, unlike BIP149)\n  - BIP149ish     tested\n  - BIP148        fails\n  - BIP149ish     released\n  - BIP141        fails\n  - BIP149ish     activates\n  - segwit activates\n  - semi-legacy nodes *immediately* use segwit, via this proposal\n\nWe can remove the courtesy timeout problem, because the courtesy\nbegins as soon as this proposal goes live.  This simplifies debate on\nhow BIP149ish should deploy, and helps make reasonable a much quicker\nsegwit activation should BIP141 fail.\n\nWith a clear route to quick activation for semi-legacy nodes, the\nUASF can be planned for activation in as short a window as the key\nnodes can upgrade.  Not even all the key nodes need to upgrade: it's\nstill a soft fork, and UASFs simply need to have inevitability.\n\nThese differences can help us aim for activating segwit on November\n16th, if BIP141 and BIP148 do not succeed earlier.  Since BIP149 as\noriginally conceived is slow as molasses, BIP149ish still needs\ndebate, BIP141 has steadfast enemies, and the community is slow to\nadapt to BIP148's complicated commitment requirements, it is prudent\nto take this intermediate step allowing quicker BIP149ish activation.\n\n[1] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014160.html"
            }
        ],
        "thread_summary": {
            "title": "extended BIP9 activation of segwit, for legacy nodes",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Ryan Grant"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 4321
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin pointers",
        "thread_messages": [
            {
                "author": "JOSE FEMENIAS CA\u00d1UELO",
                "date": "2017-06-11T20:05:24",
                "message_text_only": "Hi,\n\nI\u2019ve been doing some work lately to create a specification for bitcoin pointers. \n\nThey can be used to point to transactions, inputs, outputs or some internal items within them.\nThe proposals strive for simplicity and user friendliness over compactness or other attributes.\n\nThere are three proposals, each of which builds upon the previous one, namely:\n\na) Canonical Pointers\nThe basic proposal.They look like this example: btc at 170.1/179-631-520\nHere is a link to the Google Docs document ->  https://docs.google.com/document/d/1PBN4wKFYtgvDxV4DrWUdNe9Xqmb8GVxoIGDKRkY9Xr4/edit?usp=sharing <https://docs.google.com/document/d/1PBN4wKFYtgvDxV4DrWUdNe9Xqmb8GVxoIGDKRkY9Xr4/edit?usp=sharing>\n\nb) Mnemonic Pointers \nThey build on Canonical Pointers and the dictionary provided in bip39 to use words instead of numbers. \nThe previous Canonical pointer can thus be expressed as btc at best.ability <mailto:btc at best.ability>/biology-exclude-donate\nHere is a link to the Google Docs document ->  https://docs.google.com/document/d/1wLK2_UrRzK0eshkDntUIbVlIdswzuHmYNELOePDjtPY/edit?usp=sharing <https://docs.google.com/document/d/1wLK2_UrRzK0eshkDntUIbVlIdswzuHmYNELOePDjtPY/edit?usp=sharing>\n\nc) Domain Pointers \nThey build on the Domain Name Registration system to encode a pointer to a Canonical Pointer as in btc at example.com <mailto:btc at example.com>\nHere is a link to the Google Docs document -> https://docs.google.com/document/d/1KY7rM090oKzGn8NAz4XFxQnfkyD5gs4V6vpbfdw92RM/edit?usp=sharing <https://docs.google.com/document/d/1KY7rM090oKzGn8NAz4XFxQnfkyD5gs4V6vpbfdw92RM/edit?usp=sharing>\n\nI haven\u2019t had any peer review yet, so it is very likely that some small or big problems can be found. \n\nI\u2019d welcome any feedback from the community.\n\nBest regards,\n\n\nJos\u00e9 Femen\u00edas Ca\u00f1uelo\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170611/6b38b49e/attachment.html>"
            },
            {
                "author": "Jonas Schnelli",
                "date": "2017-06-11T20:19:20",
                "message_text_only": "Hi Jos\u00e9\n\n> a) Canonical Pointers\n> The basic proposal.They look like this example: btc at 170.1/179-631-520\n> Here is a link to the Google Docs document ->  https://docs.google.com/document/d/1PBN4wKFYtgvDxV4DrWUdNe9Xqmb8GVxoIGDKRkY9Xr4/edit?usp=sharing <https://docs.google.com/document/d/1PBN4wKFYtgvDxV4DrWUdNe9Xqmb8GVxoIGDKRkY9Xr4/edit?usp=sharing>\nA similar/related proposal got posted last month : https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014396.html <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014396.html>\nThe Bech32 encoded transaction position reference allows to solve similar use cases (tx pointers) with a strong error-detection/correction using just 14 chars (encoded state, including error correction / unencoded 40bits).\n\n/jonas\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170611/80f97aa2/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170611/80f97aa2/attachment-0001.sig>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin pointers",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jonas Schnelli",
                "JOSE FEMENIAS CA\u00d1UELO"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3246
        }
    },
    {
        "title": "[bitcoin-dev] BIP proposal - Dandelion: Privacy Preserving Transaction Propagation",
        "thread_messages": [
            {
                "author": "Andrew Miller",
                "date": "2017-06-12T14:46:23",
                "message_text_only": "Dear bitcoin-dev,\n   We've put together a preliminary implementation and BIP for\nDandelion, and would love to get your feedback on it. Dandelion is a\nprivacy-enhancing modification to Bitcoin's transaction propagation\nmechanism. Its goal is to obscure the original source IP of each\ntransaction.\n\n  https://github.com/gfanti/bips/blob/master/bip-dandelion.mediawiki\n  https://github.com/gfanti/bitcoin/tree/dandelion\n\n   The main idea is that transaction propagation proceeds in two\nphases: first the \u201cstem\u201d phase, and then \u201cfluff\u201d phase. During the\nstem phase, each node relays the transaction to a *single* peer. After\na random number of hops along the stem, the transaction enters the\nfluff phase, which behaves just like ordinary transaction\nflooding/diffusion. Even when an attacker can identify the location of\nthe fluff phase, it is much more difficult to identify the source of\nthe stem. Our approach and some preliminary evaluation are explained\nin more detail in the BIP. The research paper originally introducing\nthis idea was recently presented at SIGMETRICS'17.\nhttps://arxiv.org/pdf/1701.04439.pdf\n\n  Compared to the original paper, our current proposal includes\nseveral new design ideas, especially:\n - Stronger attacker model: we defend against an attacker that\nactively tries to learn which nodes were involved in the stem phase.\nOur approach is called \"Mempool Embargo\", meaning a node that receives\na \"stem phase\" transaction behaves as though it never heard of it,\nuntil it receives it again from someone else (or until a random timer\nelapses).\n - Robustness. We think the privacy benefit shouldn't come at the\nexpense of propagation quality. Our implementation is designed so that\nif some node drops the transaction (or when Dandelion is adopted only\npartially), then the fallback behavior is ordinary Bitcoin\npropagation.\n\n  We'd especially like feedback on the implementation details related\nto the two points above. The mempool embargo mechanism is tricky,\nsince it hard to rule out indirect behavior that reveals if a\ntransaction is in mempool. In the BIP we explain one counterexample,\nbut at least it requires the attacker to get its connections banned.\nAre there other ways we haven't thought of? We think the alternative\napproach (bypassing mempool entirely) seems even harder to get right,\nand foregoes existing DoS protection.\n\n  We're currently running in-situ benchmark experiments with this code\non testnet and will report on those in this thread if there's\ninterest.\n\n  Some prior discussion can be found here:\n  - https://botbot.me/freenode/bitcoin-wizards/2017-03-29/?msg=83181866&page=2\n  - https://botbot.me/freenode/bitcoin-wizards/2017-01-18/?msg=79578754&page=2\n  - https://github.com/sbaks0820/bitcoin-dandelion/issues/1 (notes\nfrom gmaxwell that we've mostly incorporated in the current proposal)\n\nThanks!\n-----\nGiulia Fanti <gfanti at andrew.cmu.edu>\nAndrew Miller <soc1024 at illinois.edu>\nSurya Bakshi <sbakshi3 at illinois.edu>\nShaileshh Bojja Venkatakrishnan <bjjvnkt2 at illinois.edu>\nPramod Viswanath <pramodv at illinois.edu>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-06-13T01:00:50",
                "message_text_only": "On Mon, Jun 12, 2017 at 2:46 PM, Andrew Miller via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Dear bitcoin-dev,\n>    We've put together a preliminary implementation and BIP for\n> Dandelion, and would love to get your feedback on it. Dandelion is a\n> privacy-enhancing modification to Bitcoin's transaction propagation\n> mechanism. Its goal is to obscure the original source IP of each\n> transaction.\n\nI'm glad to see this out now, so I'm not longer invading the git repo\nuninvited. :)\n\n>  - Stronger attacker model: we defend against an attacker that\n> actively tries to learn which nodes were involved in the stem phase.\n> Our approach is called \"Mempool Embargo\", meaning a node that receives\n> a \"stem phase\" transaction behaves as though it never heard of it,\n> until it receives it again from someone else (or until a random timer\n> elapsess).\n\n\nThe description in the BIP appears inadequate:\n\n\n> That is, Alice will not include the embargoed transaction when responding to MEMPOOL requests, and will not respond to GETDATA requests from another node (Bob) unless Alice previously sent an INV to Bob. The embargo period ends as soon as Alice receives an INV advertising the transaction as being in fluff mode.\n\nFor example, it's not clear if I can query for the existence of a\ntransaction by sending a conflict.  If this doesn't seem problematic,\nconsider the case where I, communicating with you over some private\nchannel, send you a payment inside a payment protocol message. You\nannounce it to the network and I concurrently send a double spend.\nOnly nodes that were part of the stem will reject my double spend, so\nI just learned a lot about your network location.\n\nIt's also appears clear that I can query by sending an inv and\nnoticing that no getdata arrives.  An example attack in the latter is\nthat when I get a stem transaction I rapidly INV interrogate the\nentire network and by observing who does and doesn't getdata I will\nlikely learn the entire stem path upto permutation.\n\nThe extra network capacity used by getdata-ing a transaction you\nalready saw via dandelion would be pretty insignificant.\n\nI believe the text should be simplified and clarified so just say:\n\n\"With the exception of her behavior towards the peer sending in the\nstem transaction and the peer sending out the transaction Alice's\nbehavior should be indistinguishable from a node which has not seen\nthe transaction at all until she receives it via ordinary forwarding\nor until after the timeout.\" -- then its up to the implementation to\nachieve indistinguishably regardless of what other protocol features\nit uses.\n\n> Are there other ways we haven't thought of? We think the alternative\n> approach (bypassing mempool entirely) seems even harder to get right,\n> and foregoes existing DoS protection.\n\nI think avoiding the is the most sensible way; and from a software\nmaintenance perspective I expect that anything less will end up\ncontinually suffering from serious information leaks which are hard to\navoid accidentally introducing via other changes.\n\nThe primary functionality should be straightforward to implement,\nneeding just a flag to determine if a transaction would be accepted to\nthe mempool but for the flag, but which skips actually adding it.\n\nHandling chains of unconfirmed stem transactions is made more\ncomplicated by this and this deserves careful consideration. I'm not\nsure if its possible to forward stem children of stem transactions\nexcept via the same stem path as the parent without leaking\ninformation, it seems unlikely.\n\nThis approach would mostly take additional complexity from the need to\nlimit the amplification of double spends. I believe this can be\nresolved by maintaining a per-peer map of the not yet expired vin's\nconsumed by stem fowards sent out via that peer. E.g. vin->{timeout,\nfeerate}.  Then any new forward via that stem-peer is tested against\nthat map and suppressed if it it spends a non-timed-out input and\ndoesn't meet the feerate epsilon for replacement.\n\nUse of the orphan map is not indistinguishable as it is used for block\npropagation, and itself also a maintenance burden to make sure\nunrelated code is not inadvertently leaking the stem transactions.\n\n> After a random number of hops along the stem, the transaction enters the fluff phase,\n\nThe BIP is a bit under-specified on this transition, I think-- but I\nknow how it works from reading the prior implementation (I have not\nyet read the new implementation).\n\nThe way it works (assuming I'm not confused and it hasn't changed) is\nthat when a new stem transaction comes in there is a chance that it is\ntreated as coming in as a normal transaction.\n\nAn alternative construction would be that when a stem transaction goes\nout there is a random chance that the stem flag is not set (with\nsuitable adjustment to keep the same expected path length)\n\nFor some reason I believe this would be a superior construction, but I\nam only able to articulate one clear benefit:  It allows non-dandelion\ncapable nodes to take on the role of the last stem hop, which I\nbelieve would improve the anonymity set during the transition phase.\n\nUnrelated:\n\nHas any work been given to the fact that dandelion propagation\npotentially making to measure properties of the inter-node connection\ngraph?  e.g.  Say I wish to partition node X by disconnecting all of\nits outbound connections, to do that it would be useful to learn whom\nis connected to X.  I forward a transaction to X, observe the first\nnode to fluff it,  then DOS attack that node to take it offline.  Will\nI need to DOS attack fewer or more nodes  to get all of X's outbounds\nif X supports rapid stem forwarding?"
            }
        ],
        "thread_summary": {
            "title": "BIP proposal - Dandelion: Privacy Preserving Transaction Propagation",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Andrew Miller",
                "Gregory Maxwell"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 8744
        }
    },
    {
        "title": "[bitcoin-dev] Proposal: Demonstration of Phase in Full Network Upgrade Activated by Miners",
        "thread_messages": [
            {
                "author": "Zheming Lin",
                "date": "2017-06-13T02:23:41",
                "message_text_only": "The BIP is described using Chinese and English. If any part is missing or need more specific, please reply. Forgive for my poor English.\n\nThis method will incorporate any upgrade that affects non-mining nodes. They should beware that the rule has been changed.\n\nTLDR: Major miners activate and orphan the minor. That ensures all miners upgrades. Then invalid the tx from not upgrading nodes. Nodes must upgrade (with other protocol upgrade codes) in order to work. Then the final miner vote over protocol upgrade, with all nodes has the same upgraded codes.\n\n<pre>\nBIP: ???\nTitle: Demonstration of Phase in Full Network Upgrade Activated by Miners\nAuthor: LIN Zheming\nStatus: Draft\nType: Standards Track\nCreated: 2017-06-12\n</pre>\n\n==Summary==\n\n\u672c\u65b9\u6cd5\u5e76\u4e0d\u662f\u6765\u6e90\u4e8e\u4e2a\u4eba\uff0c\u800c\u662f\u4e2d\u6587\u6bd4\u7279\u5e01\u793e\u533a\u4e2d\u96c6\u4f53\u667a\u6167\u7684\u7ed3\u679c\u3002<br/>\nThis idea was not created by an individual but is a product of collaboration in the Chinese bitcoin community between different interest groups.<br/>\n\n\u8fd9\u662f\u4e00\u79cd\u5728\u534f\u8bae\u5347\u7ea7\u65f6\uff0c\u5bf9\u5168\u7f51\u6316\u77ff\u548c\u975e\u6316\u77ff\u8282\u70b9\u8fdb\u884c\u4fdd\u62a4\u548c\u6fc0\u52b1\u7684\u65b9\u6cd5\uff0c\u907f\u514d\u4e0d\u53c2\u4e0e\u6316\u77ff\u7684\u8282\u70b9\u6ca1\u6709\u5347\u7ea7\u7684\u52a8\u529b\u800c\u53d7\u5230\u635f\u5931\u3002<br/>\nThis method is put forth to incentivize and to protect mining nodes and non-mining nodes during protocol upgrading. With this incentive mechanism, the non-mining nodes will not suffer monetary loss from chain splitting.<br/>\n\n\u53d1\u4fe1\u53f7\u7684\u591a\u6570\u77ff\u5de5\u5728\u8fbe\u5230\u6fc0\u6d3b\u6761\u4ef6\u540e\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\uff08\u4e00\u4e2a\u96be\u5ea6\u5468\u671f\uff09\u540e\u8bbe\u7f6e\u65b0\u533a\u5757\u7248\u672c\u53f7\uff0c\u5b64\u7acb\u672a\u5347\u7ea7\u77ff\u5de5\u7684\u4f4e\u7248\u672c\u53f7\u7684\u5757\u3002\u901a\u8fc7\u6700\u521d\u7684\u4e2d\u672c\u806a\u5171\u8bc6\uff0c\u5728\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\u7ed3\u675f\u540e\uff0c\u6240\u6709\u77ff\u5de5\u5c06\u5347\u7ea7\u81f3\u6700\u65b0\u7248\u672c\u6216\u4f7f\u7528\u6700\u65b0\u7248\u672c\u3002\u5728\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f\uff08\u4e00\u4e2a\u96be\u5ea6\u5468\u671f\uff09\u540e\uff0c\u77ff\u5de5\u5c06\u4ec5\u63a5\u53d7\u65b0\u7248\u672c\u7684\u4ea4\u6613\uff0c\u672a\u5347\u7ea7\u7684\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u65e7\u7248\u672c\u4ea4\u6613\u5c06\u65e0\u6cd5\u5f97\u5230\u65b0\u8282\u70b9\u7684\u8f6c\u64ad\u4e5f\u65e0\u6cd5\u8fdb\u5165\u65b0\u7248\u672c\u533a\u5757\u3002\u8fd9\u5c06\u5728\u4fdd\u62a4\u7528\u6237\u8d44\u4ea7\u7684\u540c\u65f6\uff0c\u63d0\u9192\u4e0d\u6316\u77ff\u7684\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u3002\u5e76\u5728\u5347\u7ea7\u4ee3\u7801\u4e2d\u52a0\u5165\u5bf9\u534f\u8bae\u8fdb\u884c\u6539\u52a8\u7684\u90e8\u5206\u3002\u94b1\u5305\u5347\u7ea7\u540e\u5c06\u7531\u6316\u77ff\u8282\u70b9\u6295\u7968\u5b9e\u65bd\u8be5\u9879\u6539\u52a8\uff0c\u4ee5\u8fbe\u6210\u534f\u8bae\u6539\u52a8\u7684\u5e7f\u6cdb\u90e8\u7f72\u3002<br/>\n\nAfter the activation condition is met, majority miners will set a new block versionbits after the first grace period(a difficulty change of 2016 blocks). The blocks with lower versionbits will be orphaned. In terms of the Nakamoto Consensus, the end of the first grace period will force all mining nodes upgraded to signal a new version of consensus. After the second grace period ( a difficulty change of 2016 blocks), mining nodes will only accept transactions with new versionbits. Transactions from nodes not upgrading will not be relayed nor included in blocks with new versionbits. This will protect funds of non-mining nodes from utilizing replay attack and will function as a notification for them to upgrade. Codes dealing with protocol upgrade could be included in the upgrade. After the non-mining node upgrades, mining nodes will vote to activate the protocol upgrade and this will achieve the broad/widespread deployment of the protocol upgrade.<br/>\n\n\u5728\u8be5\u9879\u6539\u52a8\u5e7f\u6cdb\u90e8\u7f72\u81f3\u5ba2\u6237\u7aef\u4e4b\u540e\uff0c\u4f9d\u7136\u7531\u5176\u6fc0\u6d3b\u6761\u4ef6\u63a7\u5236\u3002<br/>\nThe protocol upgrade depends on its activate condition independently even after the change deployed among nodes.<br/>\n\n==Motivation==\n\n\u9274\u4e8e\u6700\u521d\u7684\u6bd4\u7279\u5e01\u534f\u8bae\u5e76\u672a\u8003\u8651\u4e0d\u53c2\u4e0e\u6316\u77ff\u7684\u94b1\u5305\u8282\u70b9\uff0c\u5bfc\u81f4\u8fd9\u4e9b\u94b1\u5305\u8282\u70b9\u7684\u534f\u8bae\u5347\u7ea7\u662f\u88ab\u52a8\u7684\uff0c\u61d2\u60f0\u7684\u3002\u5f53\u5728\u5347\u7ea7\u65b9\u5411\u4e0a\u51fa\u73b0\u5206\u6b67\u65f6\uff0c\u77ff\u5de5\u4e5f\u4e0d\u613f\u610f\u5728\u9519\u8bef\u7684\u94fe\u4e0a\u6316\u77ff\uff0c\u4f46\u77ff\u5de5\u53c8\u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u6b63\u5728\u5ef6\u957f\u7684\u94fe\u662f\u88ab\u94b1\u5305\u8282\u70b9\u5e7f\u6cdb\u63a5\u53d7\u7684\u94fe\u3002\u8fd9\u5c06\u5f71\u54cd\u94b1\u5305\u8282\u70b9\u7684\u5b89\u5168\u3002<br/>\nIn view of the fact that the original Bitcoin consensus did not consider the non-mining wallet nodes(as mentioned above), the result is that upgrading the consensus of these wallet nodes is passive and lazy. When there is disagreement in the direction of the upgrade, the miners have no mechanism to ensure that the chain being extended is the chain widely accepted by the wallet nodes. This also adversely affects the security of the wallet nodes.<br/>\n\n\u4f7f\u7528\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5728\u4fdd\u8bc1\u94b1\u5305\u8282\u70b9\u8d44\u4ea7\u5b89\u5168\u7684\u60c5\u51b5\u4e0b\uff0c\u4e14\u901a\u8fc7\u589e\u52a0\u6fc0\u52b1\u8ba9\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u534f\u8bae\u3002\u4e00\u65e6\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u534f\u8bae\uff0c\u4fdd\u8bc1\u77ff\u5de5\u8282\u70b9\u4e0d\u4ec5\u5de5\u4f5c\u5728\u7b97\u529b\u6700\u957f\u94fe\u4e0a\uff0c\u8fd8\u5de5\u4f5c\u5728\u6bd4\u7279\u5e01\u751f\u6001\u73af\u5883\u4e2d\u5176\u4ed6\u94b1\u5305\u8282\u70b9\u6240\u4f7f\u7528\u7684\u6700\u957f\u94fe\u4e0a\u3002\u5728\u4e2d\u672c\u806a\u5171\u8bc6\u4e0b\u4e0d\u4f1a\u51fa\u73b0\u5206\u53c9\uff0c\u4ee5\u5b9e\u73b0\u6e10\u8fdb\u5f0f\u7684\u534f\u8bae\u5347\u7ea7\u3002<br/>\n\nApart from ensuring the asset security of wallet nodes, this method can be used to provide additional incentives to upgrade the protocol for the wallet nodes. Once the wallet nodes upgrade their protocol, the miners' nodes can be guaranteed to work - not only on the longest chain, but also on the longest chain used by other wallet nodes in the broader bitcoin sphere. Under the Nakamoto Consensus, there will be no persistent forks as protocol upgrades can be phased in.<br/>\n\n==Specification==\n\n1. \u6316\u77ff\u8282\u70b9\u5c06\u4f7f\u7528 versionbits \u7248\u672c\u4f4d\u6765\u5b9a\u4e49\u652f\u6301\u4fe1\u53f7\u3002BIP \u751f\u6548\u65f6\uff0c\u6240\u6709\u533a\u5757\u9700\u8981\u4f7f\u7528\u5236\u5b9a\u7684 nVersion \u6765\u53d1\u9001\u4fe1\u53f7<br/>\n2. \u6316\u77ff\u8282\u70b9\u5c06\u4f7f\u7528 tx version \u6765\u5b9a\u4e49\u5f53\u524d\u7684\u4ea4\u6613\u7248\u672c\u3002\u5f53\u524d\u7684 tx version \u662f 1\uff0c\u5c06\u5141\u8bb8 tx version \u4e3a 2 \u7684\u4ea4\u6613\uff0c\u5e76\u5728\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f\u4e4b\u540e\uff0c\u4f7f tx version \u4e3a 1 \u7684\u4ea4\u6613\u975e\u6cd5\u3002<br/>\n\n1. Mining nodes signal by setting a version bit. While this BIP is active, all blocks must set the chosen nVersion.<br/>\n2. Mining nodes will use tx version to define current version transactions. Current tx version is 1, and tx version 2 will be allowed. After the second grace period, tx version 1 will be regarded as invalid.<br/>\n\n\n==Deployment==\n\u534f\u8bae\u5347\u7ea7\uff0c\u5c06\u5206\u6210\u4e09\u6b65\u9010\u6b65\u5b9e\u65bd\u3002\u5e76\u6709\u4e00\u4e2a\u53ef\u9009\u7684\u7b2c\u56db\u6b65\u6765\u96c6\u6210\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\u3002<br/>\n\nProtocol upgrading will phase in over three stages. We can have an optional fourth stage to integrate codes of protocol upgrade.<br/>\n\n1. \u4fe1\u53f7\u9636\u6bb5\u3002\u6316\u77ff\u8282\u70b9\u4f7f\u7528 versionbits \u53d1\u9001\u652f\u6301\u4fe1\u53f7\u3002\u6316\u77ff\u8282\u70b9\u5728\u76d1\u6d4b\u5230 55% \u7684\u533a\u5757\u5373\u524d 1109/2016 \u4e2a\u533a\u5757\u5747\u53d1\u9001\u4e86\u76f8\u540c\u7684\u652f\u6301\u4fe1\u53f7\uff0c\u8fdb\u5165\u4e0b\u4e00\u9636\u6bb5\u3002<br/>\n2. \u77ff\u5de5\u8282\u70b9\u5347\u7ea7\u3002\u7ecf\u8fc7\u4e86\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f 2016 \u7684\u533a\u5757\u540e\uff0c\u4e14\u603b\u4fe1\u53f7\u533a\u5757\u8d85\u8fc7\u4e86 2218/4032\uff0c\u5c31\u5f00\u59cb\u4f7f\u7528\u65b0\u7684\u533a\u5757\u7248\u672c\u6253\u5305\u533a\u5757\uff0c\u5e76\u540c\u65f6\u5f00\u59cb\u5b64\u7acb\u65e7\u7248\u672c\u3002\u6b64\u65f6\u6240\u6709\u8282\u70b9\u548c\u94b1\u5305\uff0c\u5c06\u53ef\u4ee5\u4f7f\u7528\u65b0\u7248\u672c\u53f7\u53d1\u9001\u4ea4\u6613\uff0c\u540c\u65f6\u517c\u5bb9\u65e7\u7248\u672c\u53f7\u4ea4\u6613\u3002<br/>\n3. \u94b1\u5305\u8282\u70b9\u5347\u7ea7\u3002\u5728\u6316\u77ff\u8282\u70b9\u76d1\u6d4b\u5230\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f 4032 \u4e2a\u8fde\u7eed\u7684\u65b0\u7248\u672c\u7684\u533a\u5757\u540e\uff0c\u5f00\u59cb\u62d2\u7edd\u65e7\u7248\u672c\u53f7\u7684\u4ea4\u6613\uff0c\u53ea\u6253\u5305\uff0f\u8f6c\u64ad\u65b0\u7248\u672c\u53f7\u7684\u4ea4\u6613\u3002\u540c\u65f6\u5c06\u4ece\u5185\u5b58\u6c60\u4e2d\u5220\u9664\u65e7\u7248\u672c\u53f7\u7684\u4ea4\u6613\u3002<br/>\n4. \uff08\u53ef\u9009\u7684\uff09\u534f\u8bae\u5347\u7ea7\u3002\u5728\u7b2c\u4e09\u9636\u6bb5\u4e2d\u5305\u542b\u6709\u7b2c\u56db\u9636\u6bb5\u7684\u5347\u7ea7\u4ee3\u7801\u3002\u5f53\u6211\u4eec\u786e\u4fdd\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u5230\u652f\u6301\u65b0\u7248\u672c\u4ea4\u6613\u540e\uff0c\u5fc5\u7136\u5305\u542b\u4e86\u7b2c\u56db\u9636\u6bb5\u7684\u5347\u7ea7\u4ee3\u7801\u3002\u5219\u6b64\u65f6\u53ef\u4ee5\u901a\u8fc7\u77ff\u5de5\u8282\u70b9\u6295\u7968\u7684\u65b9\u5f0f\u5b8c\u6210\u5168\u7f51\u7edc\u7684\u534f\u8bae\u5347\u7ea7\u3002\n\n1. Signal stage: Mining nodes signal using BIP9. The next stage will be activated after 55% (1109) of 2016 blocks has the signal.<br/>\n\n2. Mining nodes upgrade stage: After a first grace period of 2016 blocks and total signalling blocks passed 2218 of 4032 blocks, miners broadcasting blocks with new versionbits in block headers will orphan blocks with old versionbits. At this stage all nodes can send transactions with new versionbits, and transactions with old versionbits will be compatible.<br/>\n\n3. Non-mining nodes upgrade stage: after 4032 continuous blocks with new versionbits, mining nodes will start to refuse transactions with old versionbits. Only transactions with new versionbits can be relayed and included in blocks. Transactions with old versionbits can be safely purged from memory pools.<br/>\n\n4. (Optional)Protocol Upgrade stage: The codes dealing with protocol upgrade can be integrated in the third stage. After the non-mining nodes upgrades to support newer version of transactions, the codes with protocol upgrade must be included and now we can use miner vote to activate and finish this upgrade.<br/>\n\n\u81f3\u6b64\uff0c\u534f\u8bae\u5347\u7ea7\u5b8c\u6210\u3002<br/>\n\nAt this point, the protocol upgrade have phased in.<br/>\n\n==Benefits==\n\n1. \u4ec5\u9700\u8981\u591a\u6570\u7684\u77ff\u5de5\u53d1\u4fe1\u53f7\u540e\u5373\u53ef\u6fc0\u6d3b\u3002\u5728\u4e2d\u672c\u806a\u7684\u6bd4\u7279\u5e01\u8bba\u6587\u4e2d\uff0c99.9% \u7684\u53ef\u80fd\u6027\u4e0b\uff0c55% \u7684\u77ff\u5de5\u5c06\u5728 340 \u4e2a\u533a\u5757\u540e\u786e\u4fdd\u6210\u4e3a\u6700\u957f\u94fe\u3002\u8fd9\u5c06\u6700\u5927\u53ef\u80fd\u51cf\u5c0f\u901a\u8fc7\u63a7\u5236\u5c11\u6570\u7b97\u529b\u800c\u62d6\u5ef6\u7f51\u7edc\u5347\u7ea7\u7684\u53ef\u80fd\u6027\u3002\u6211\u4eec\u53ef\u4ee5\u9884\u89c1\u5230\u5728\u7b97\u529b\u4fe1\u53f7\u8d85\u8fc7 51% \u540e\uff0c\u6316\u77ff\u8282\u70b9\u5c06\u8fc5\u901f\u7684\u5728\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\u5185\u8fdb\u884c\u5347\u7ea7\u3002<br/>\n2. \u5728\u4e24\u4e2a\u5bbd\u9650\u671f\u5185\uff0c\u94b1\u5305\u8282\u70b9\u4ea4\u6613\u4e0d\u53d7\u5f71\u54cd\uff0c\u6709\u8db3\u591f\u7684\u65f6\u95f4\u5347\u7ea7\u94b1\u5305\u8f6f\u4ef6\u3002<br/>\n3. \u7248\u672c\u4fe1\u606f\u5305\u542b\u5728 block header \u4e2d\uff0c\u5e76\u4e0d\u5f71\u54cd SPV \u6316\u77ff\u8fc7\u7a0b\u3002\uff08\u770b\u8d77\u6765\u662f\uff1f\uff09<br/>\n4. \u5728\u4e24\u4e2a\u5bbd\u9650\u671f\u540e\uff0c\u94b1\u5305\u8282\u70b9\u5c06\u5fc5\u987b\u5347\u7ea7\u94b1\u5305\uff0c\u5426\u5219\u56e0\u6ca1\u6709\u7b97\u529b\u652f\u6301\u5c06\u65e0\u6cd5\u53d1\u9001\u4ea4\u6613\uff0c\u4e5f\u65e0\u6cd5\u786e\u8ba4\u3002\u76f8\u5bf9\u4e8e\u5728\u8282\u70b9\u95f4\u91cd\u65b0\u8fbe\u6210\u65b0\u7684\u5171\u8bc6\uff0c\u8fd9\u79cd\u72b6\u51b5\u5e76\u6ca1\u6709\u66f4\u7cdf\u7cd5\u3002<br/>\n5. \u94b1\u5305\u8282\u70b9\u7684\u8d26\u672c\u5c06\u5f97\u5230\u5c0a\u91cd\u548c\u4fdd\u62a4\u3002\u4f7f\u7528\u94fe\u4e0b\u94b1\u5305\u7684\u7528\u6237\u5c06\u9700\u8981\u5728\u94b1\u5305\u670d\u52a1\u63d0\u4f9b\u5546\u7684\u58f0\u660e\u4e4b\u540e\u51b3\u5b9a\u63d0\u81f3\u94fe\u4e0a\u94b1\u5305\u6216\u8ddf\u968f\u3002<br/>\n6. \u5c06\u6765\u7684\u534f\u8bae\u5347\u7ea7\uff0c\u53ef\u4ee5\u5728\u5347\u7ea7\u5ba2\u6237\u7aef\u7248\u672c\u540c\u65f6\u7ed1\u5b9a\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\u5e76\u8fdb\u884c\u72ec\u7acb\u7684\u6fc0\u6d3b\u6295\u7968\u3002\u8fd9\u5c06\u9884\u7559\u8db3\u591f\u7684\u65f6\u95f4\u8ba9\u8282\u70b9\u5347\u7ea7\u8f6f\u4ef6\u4ee5\u652f\u6301\u65b0\u7684\u534f\u8bae\u3002\u5373\u4f7f\u77ff\u5de5\u6295\u7968\u6fc0\u6d3b\u5931\u8d25\u4e5f\u4e0d\u5f71\u54cd\u73b0\u72b6\u3002<br/>\n\n1. The activation only requires majority miners signal. As described in the paper by Satoshi Nakamoto, 55% miners will be in the longest chain after 340 blocks, with 99.9% certainty. This will minimize the possibility of delaying network upgrades by controlling a small number of hashing power. We can foresee that after 51% signalling, all miners will upgrade within the first grace period. <br/>\n2. During the first two grace periods, non-mining nodes will not be affected. They have enough time to upgrade their software. <br/>\n3. Versionbits included in block header, not influencing the SPY mining. <br/>\n4. After two grace periods, all nodes must be upgraded. Otherwise they cannot send transactions or get any confirmations. Compared with forming new consensus among nodes, the situation is not worse than before. <br/>\n5. The ledger in non-mining wallet nodes is honored and reserved. Users of off-chain wallet services can decide whether or not to follow the service providers after they got the public notification from the service providers. <br/>\n6. Protocol upgrades in the future can be bonded with the upgrades of nodes, and the upgrades activate through miners vote independently. There would be enough time for nodes to be upgraded in order to support new protocols. Even in case of failing in miner activation, the situation will not worsen and the status quo will remain. <br/>\n\n\n==Risks==\n\n1. \u7b97\u529b\u7684\u6ce2\u52a8\u4f1a\u5f71\u54cd\u6700\u957f\u94fe\u7684\u7ed3\u679c\u3002\u56e0\u6b64\u8d8a\u9ad8\u7684\u6fc0\u6d3b\u6bd4\u4f8b\u8981\u6c42\u5c06\u51cf\u5c11\u77ed\u65f6\u95f4\u5206\u53c9\u7684\u5371\u9669\u3002<br/>\n2. \u77ff\u5de5\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u907f\u514d\u88ab\u5b64\u7acb\uff0c\u4f46\u5728\u94b1\u5305\u8282\u70b9\u770b\u6765\u65e0\u6cd5\u533a\u5206\u662f\u5426\u662f\u5047\u4fe1\u53f7\uff0c\u53ea\u80fd\u5347\u7ea7\u3002\u800c\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u4e4b\u540e\uff0c\u77ff\u5de5\u4e5f\u5c06\u8ddf\u968f\u3002<br/>\n3. \u94b1\u5305\u8282\u70b9\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u4ec5\u5347\u7ea7\u7248\u672c\u53f7\u800c\u4e0d\u652f\u6301\u7ed1\u5b9a\u7684\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\uff0c\u4f46\u94b1\u5305\u8282\u70b9\u6570\u91cf\u65e0\u6cd5\u5224\u522b\uff0c\u4e25\u8083\u7684\u771f\u5b9e\u8282\u70b9\u5e94\u5f53\u8ddf\u968f\u53ef\u8bc1\u5b9e\u7684\u77ff\u5de5\u6295\u7968\u7ed3\u679c\u3002<br/>\n4. \u5b58\u5728\u5c11\u90e8\u5206\u77ff\u5de5\u548c\u94b1\u5305\u8282\u70b9\u5171\u8c0b\uff0c\u5728\u65b0\u534f\u8bae\u5347\u7ea7\u6fc0\u6d3b\u540e\u4f9d\u7136\u4f7f\u7528\u8001\u534f\u8bae\u6316\u77ff\u7684\u53ef\u80fd\u3002\u8fd9\u79cd\u53ef\u80fd\u968f\u65f6\u53d1\u751f\u65e0\u6cd5\u675c\u7edd\uff0c\u4f46\u901a\u8fc7\u8ba9\u6c89\u9ed8\u7684\u5927\u591a\u6570\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u7684\u65b9\u5f0f\u53ef\u4ee5\u964d\u4f4e\u8fd9\u79cd\u884c\u4e3a\u5e26\u6765\u7684\u5229\u76ca\u3002<br/>\n\n1. The fluctuation of the hashing power will affect the result of the longest chain. Higher activating requirement means a lower risk of temporary fork. <br/>\n2. Miners could simply signal to avoid being orphaned, but from the perspective of non-mining wallet nodes, they can't distinguish the false signal from the true signal. They must upgrade with the assumption that the signals are all true. After all the non-mining nodes have upgraded, the miners signalling false signal should follow. <br/>\n3. Non-mining wallet nodes could false signal without supporting the new protocol but since the total number of nodes cannot be distinguished, genuine nodes should follow the proven result provided by miners vote. <br/>\n4. Miners and non-mining nodes could conspire to fork using old protocol consensus. It can't be eliminated, just like in the past but through most passive non-mining nodes being upgraded, their benefit is reduced. <br/>\n\n\n==Implementation==\n___TBD___"
            },
            {
                "author": "James Hilliard",
                "date": "2017-06-13T05:44:23",
                "message_text_only": "On Mon, Jun 12, 2017 at 9:23 PM, Zheming Lin via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> The BIP is described using Chinese and English. If any part is missing or need more specific, please reply. Forgive for my poor English.\n>\n> This method will incorporate any upgrade that affects non-mining nodes. They should beware that the rule has been changed.\n>\n> TLDR: Major miners activate and orphan the minor. That ensures all miners upgrades. Then invalid the tx from not upgrading nodes. Nodes must upgrade (with other protocol upgrade codes) in order to work. Then the final miner vote over protocol upgrade, with all nodes has the same upgraded codes.\n>\n> <pre>\n> BIP: ???\n> Title: Demonstration of Phase in Full Network Upgrade Activated by Miners\n> Author: LIN Zheming\n> Status: Draft\n> Type: Standards Track\n> Created: 2017-06-12\n> </pre>\n>\n> ==Summary==\n>\n> \u672c\u65b9\u6cd5\u5e76\u4e0d\u662f\u6765\u6e90\u4e8e\u4e2a\u4eba\uff0c\u800c\u662f\u4e2d\u6587\u6bd4\u7279\u5e01\u793e\u533a\u4e2d\u96c6\u4f53\u667a\u6167\u7684\u7ed3\u679c\u3002<br/>\n> This idea was not created by an individual but is a product of collaboration in the Chinese bitcoin community between different interest groups.<br/>\n>\n> \u8fd9\u662f\u4e00\u79cd\u5728\u534f\u8bae\u5347\u7ea7\u65f6\uff0c\u5bf9\u5168\u7f51\u6316\u77ff\u548c\u975e\u6316\u77ff\u8282\u70b9\u8fdb\u884c\u4fdd\u62a4\u548c\u6fc0\u52b1\u7684\u65b9\u6cd5\uff0c\u907f\u514d\u4e0d\u53c2\u4e0e\u6316\u77ff\u7684\u8282\u70b9\u6ca1\u6709\u5347\u7ea7\u7684\u52a8\u529b\u800c\u53d7\u5230\u635f\u5931\u3002<br/>\n> This method is put forth to incentivize and to protect mining nodes and non-mining nodes during protocol upgrading. With this incentive mechanism, the non-mining nodes will not suffer monetary loss from chain splitting.<br/>\n>\n> \u53d1\u4fe1\u53f7\u7684\u591a\u6570\u77ff\u5de5\u5728\u8fbe\u5230\u6fc0\u6d3b\u6761\u4ef6\u540e\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\uff08\u4e00\u4e2a\u96be\u5ea6\u5468\u671f\uff09\u540e\u8bbe\u7f6e\u65b0\u533a\u5757\u7248\u672c\u53f7\uff0c\u5b64\u7acb\u672a\u5347\u7ea7\u77ff\u5de5\u7684\u4f4e\u7248\u672c\u53f7\u7684\u5757\u3002\u901a\u8fc7\u6700\u521d\u7684\u4e2d\u672c\u806a\u5171\u8bc6\uff0c\u5728\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\u7ed3\u675f\u540e\uff0c\u6240\u6709\u77ff\u5de5\u5c06\u5347\u7ea7\u81f3\u6700\u65b0\u7248\u672c\u6216\u4f7f\u7528\u6700\u65b0\u7248\u672c\u3002\u5728\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f\uff08\u4e00\u4e2a\u96be\u5ea6\u5468\u671f\uff09\u540e\uff0c\u77ff\u5de5\u5c06\u4ec5\u63a5\u53d7\u65b0\u7248\u672c\u7684\u4ea4\u6613\uff0c\u672a\u5347\u7ea7\u7684\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u65e7\u7248\u672c\u4ea4\u6613\u5c06\u65e0\u6cd5\u5f97\u5230\u65b0\u8282\u70b9\u7684\u8f6c\u64ad\u4e5f\u65e0\u6cd5\u8fdb\u5165\u65b0\u7248\u672c\u533a\u5757\u3002\u8fd9\u5c06\u5728\u4fdd\u62a4\u7528\u6237\u8d44\u4ea7\u7684\u540c\u65f6\uff0c\u63d0\u9192\u4e0d\u6316\u77ff\u7684\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u3002\u5e76\u5728\u5347\u7ea7\u4ee3\u7801\u4e2d\u52a0\u5165\u5bf9\u534f\u8bae\u8fdb\u884c\u6539\u52a8\u7684\u90e8\u5206\u3002\u94b1\u5305\u5347\u7ea7\u540e\u5c06\u7531\u6316\u77ff\u8282\u70b9\u6295\u7968\u5b9e\u65bd\u8be5\u9879\u6539\u52a8\uff0c\u4ee5\u8fbe\u6210\u534f\u8bae\u6539\u52a8\u7684\u5e7f\u6cdb\u90e8\u7f72\u3002<br/>\n>\n> After the activation condition is met, majority miners will set a new block versionbits after the first grace period(a difficulty change of 2016 blocks). The blocks with lower versionbits will be orphaned. In terms of the Nakamoto Consensus, the end of the first grace period will force all mining nodes upgraded to signal a new version of consensus. After the second grace period ( a difficulty change of 2016 blocks), mining nodes will only accept transactions with new versionbits. Transactions from nodes not upgrading will not be relayed nor included in blocks with new versionbits. This will protect funds of non-mining nodes from utilizing replay attack and will function as a notification for them to upgrade. Codes dealing with protocol upgrade could be included in the upgrade. After the non-mining node upgrades, mining nodes will vote to activate the protocol upgrade and this will achieve the broad/widespread deployment of the protocol upgrade.<br/>\n>\n> \u5728\u8be5\u9879\u6539\u52a8\u5e7f\u6cdb\u90e8\u7f72\u81f3\u5ba2\u6237\u7aef\u4e4b\u540e\uff0c\u4f9d\u7136\u7531\u5176\u6fc0\u6d3b\u6761\u4ef6\u63a7\u5236\u3002<br/>\n> The protocol upgrade depends on its activate condition independently even after the change deployed among nodes.<br/>\n>\n> ==Motivation==\n>\n> \u9274\u4e8e\u6700\u521d\u7684\u6bd4\u7279\u5e01\u534f\u8bae\u5e76\u672a\u8003\u8651\u4e0d\u53c2\u4e0e\u6316\u77ff\u7684\u94b1\u5305\u8282\u70b9\uff0c\u5bfc\u81f4\u8fd9\u4e9b\u94b1\u5305\u8282\u70b9\u7684\u534f\u8bae\u5347\u7ea7\u662f\u88ab\u52a8\u7684\uff0c\u61d2\u60f0\u7684\u3002\u5f53\u5728\u5347\u7ea7\u65b9\u5411\u4e0a\u51fa\u73b0\u5206\u6b67\u65f6\uff0c\u77ff\u5de5\u4e5f\u4e0d\u613f\u610f\u5728\u9519\u8bef\u7684\u94fe\u4e0a\u6316\u77ff\uff0c\u4f46\u77ff\u5de5\u53c8\u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u6b63\u5728\u5ef6\u957f\u7684\u94fe\u662f\u88ab\u94b1\u5305\u8282\u70b9\u5e7f\u6cdb\u63a5\u53d7\u7684\u94fe\u3002\u8fd9\u5c06\u5f71\u54cd\u94b1\u5305\u8282\u70b9\u7684\u5b89\u5168\u3002<br/>\n> In view of the fact that the original Bitcoin consensus did not consider the non-mining wallet nodes(as mentioned above), the result is that upgrading the consensus of these wallet nodes is passive and lazy. When there is disagreement in the direction of the upgrade, the miners have no mechanism to ensure that the chain being extended is the chain widely accepted by the wallet nodes. This also adversely affects the security of the wallet nodes.<br/>\nWallet nodes being able to fully validate and choose whether or not to\naccept a particular chain is an important part of bitcoins security\nmodel.\n>\n> \u4f7f\u7528\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5728\u4fdd\u8bc1\u94b1\u5305\u8282\u70b9\u8d44\u4ea7\u5b89\u5168\u7684\u60c5\u51b5\u4e0b\uff0c\u4e14\u901a\u8fc7\u589e\u52a0\u6fc0\u52b1\u8ba9\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u534f\u8bae\u3002\u4e00\u65e6\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u534f\u8bae\uff0c\u4fdd\u8bc1\u77ff\u5de5\u8282\u70b9\u4e0d\u4ec5\u5de5\u4f5c\u5728\u7b97\u529b\u6700\u957f\u94fe\u4e0a\uff0c\u8fd8\u5de5\u4f5c\u5728\u6bd4\u7279\u5e01\u751f\u6001\u73af\u5883\u4e2d\u5176\u4ed6\u94b1\u5305\u8282\u70b9\u6240\u4f7f\u7528\u7684\u6700\u957f\u94fe\u4e0a\u3002\u5728\u4e2d\u672c\u806a\u5171\u8bc6\u4e0b\u4e0d\u4f1a\u51fa\u73b0\u5206\u53c9\uff0c\u4ee5\u5b9e\u73b0\u6e10\u8fdb\u5f0f\u7684\u534f\u8bae\u5347\u7ea7\u3002<br/>\n>\n> Apart from ensuring the asset security of wallet nodes, this method can be used to provide additional incentives to upgrade the protocol for the wallet nodes. Once the wallet nodes upgrade their protocol, the miners' nodes can be guaranteed to work - not only on the longest chain, but also on the longest chain used by other wallet nodes in the broader bitcoin sphere. Under the Nakamoto Consensus, there will be no persistent forks as protocol upgrades can be phased in.<br/>\nThere is no way to guarantee a wallet node will accept a particular\nblock since that is always up to the user.\n>\n> ==Specification==\n>\n> 1. \u6316\u77ff\u8282\u70b9\u5c06\u4f7f\u7528 versionbits \u7248\u672c\u4f4d\u6765\u5b9a\u4e49\u652f\u6301\u4fe1\u53f7\u3002BIP \u751f\u6548\u65f6\uff0c\u6240\u6709\u533a\u5757\u9700\u8981\u4f7f\u7528\u5236\u5b9a\u7684 nVersion \u6765\u53d1\u9001\u4fe1\u53f7<br/>\n> 2. \u6316\u77ff\u8282\u70b9\u5c06\u4f7f\u7528 tx version \u6765\u5b9a\u4e49\u5f53\u524d\u7684\u4ea4\u6613\u7248\u672c\u3002\u5f53\u524d\u7684 tx version \u662f 1\uff0c\u5c06\u5141\u8bb8 tx version \u4e3a 2 \u7684\u4ea4\u6613\uff0c\u5e76\u5728\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f\u4e4b\u540e\uff0c\u4f7f tx version \u4e3a 1 \u7684\u4ea4\u6613\u975e\u6cd5\u3002<br/>\n>\n> 1. Mining nodes signal by setting a version bit. While this BIP is active, all blocks must set the chosen nVersion.<br/>\n> 2. Mining nodes will use tx version to define current version transactions. Current tx version is 1, and tx version 2 will be allowed. After the second grace period, tx version 1 will be regarded as invalid.<br/>\nSounds like this would cause issues with pre-signed time locked transactions.\n>\n>\n> ==Deployment==\n> \u534f\u8bae\u5347\u7ea7\uff0c\u5c06\u5206\u6210\u4e09\u6b65\u9010\u6b65\u5b9e\u65bd\u3002\u5e76\u6709\u4e00\u4e2a\u53ef\u9009\u7684\u7b2c\u56db\u6b65\u6765\u96c6\u6210\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\u3002<br/>\n>\n> Protocol upgrading will phase in over three stages. We can have an optional fourth stage to integrate codes of protocol upgrade.<br/>\n>\n> 1. \u4fe1\u53f7\u9636\u6bb5\u3002\u6316\u77ff\u8282\u70b9\u4f7f\u7528 versionbits \u53d1\u9001\u652f\u6301\u4fe1\u53f7\u3002\u6316\u77ff\u8282\u70b9\u5728\u76d1\u6d4b\u5230 55% \u7684\u533a\u5757\u5373\u524d 1109/2016 \u4e2a\u533a\u5757\u5747\u53d1\u9001\u4e86\u76f8\u540c\u7684\u652f\u6301\u4fe1\u53f7\uff0c\u8fdb\u5165\u4e0b\u4e00\u9636\u6bb5\u3002<br/>\n> 2. \u77ff\u5de5\u8282\u70b9\u5347\u7ea7\u3002\u7ecf\u8fc7\u4e86\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f 2016 \u7684\u533a\u5757\u540e\uff0c\u4e14\u603b\u4fe1\u53f7\u533a\u5757\u8d85\u8fc7\u4e86 2218/4032\uff0c\u5c31\u5f00\u59cb\u4f7f\u7528\u65b0\u7684\u533a\u5757\u7248\u672c\u6253\u5305\u533a\u5757\uff0c\u5e76\u540c\u65f6\u5f00\u59cb\u5b64\u7acb\u65e7\u7248\u672c\u3002\u6b64\u65f6\u6240\u6709\u8282\u70b9\u548c\u94b1\u5305\uff0c\u5c06\u53ef\u4ee5\u4f7f\u7528\u65b0\u7248\u672c\u53f7\u53d1\u9001\u4ea4\u6613\uff0c\u540c\u65f6\u517c\u5bb9\u65e7\u7248\u672c\u53f7\u4ea4\u6613\u3002<br/>\n> 3. \u94b1\u5305\u8282\u70b9\u5347\u7ea7\u3002\u5728\u6316\u77ff\u8282\u70b9\u76d1\u6d4b\u5230\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f 4032 \u4e2a\u8fde\u7eed\u7684\u65b0\u7248\u672c\u7684\u533a\u5757\u540e\uff0c\u5f00\u59cb\u62d2\u7edd\u65e7\u7248\u672c\u53f7\u7684\u4ea4\u6613\uff0c\u53ea\u6253\u5305\uff0f\u8f6c\u64ad\u65b0\u7248\u672c\u53f7\u7684\u4ea4\u6613\u3002\u540c\u65f6\u5c06\u4ece\u5185\u5b58\u6c60\u4e2d\u5220\u9664\u65e7\u7248\u672c\u53f7\u7684\u4ea4\u6613\u3002<br/>\n> 4. \uff08\u53ef\u9009\u7684\uff09\u534f\u8bae\u5347\u7ea7\u3002\u5728\u7b2c\u4e09\u9636\u6bb5\u4e2d\u5305\u542b\u6709\u7b2c\u56db\u9636\u6bb5\u7684\u5347\u7ea7\u4ee3\u7801\u3002\u5f53\u6211\u4eec\u786e\u4fdd\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u5230\u652f\u6301\u65b0\u7248\u672c\u4ea4\u6613\u540e\uff0c\u5fc5\u7136\u5305\u542b\u4e86\u7b2c\u56db\u9636\u6bb5\u7684\u5347\u7ea7\u4ee3\u7801\u3002\u5219\u6b64\u65f6\u53ef\u4ee5\u901a\u8fc7\u77ff\u5de5\u8282\u70b9\u6295\u7968\u7684\u65b9\u5f0f\u5b8c\u6210\u5168\u7f51\u7edc\u7684\u534f\u8bae\u5347\u7ea7\u3002\n>\n> 1. Signal stage: Mining nodes signal using BIP9. The next stage will be activated after 55% (1109) of 2016 blocks has the signal.<br/>\n>\n> 2. Mining nodes upgrade stage: After a first grace period of 2016 blocks and total signalling blocks passed 2218 of 4032 blocks, miners broadcasting blocks with new versionbits in block headers will orphan blocks with old versionbits. At this stage all nodes can send transactions with new versionbits, and transactions with old versionbits will be compatible.<br/>\n>\n> 3. Non-mining nodes upgrade stage: after 4032 continuous blocks with new versionbits, mining nodes will start to refuse transactions with old versionbits. Only transactions with new versionbits can be relayed and included in blocks. Transactions with old versionbits can be safely purged from memory pools.<br/>\n>\n> 4. (Optional)Protocol Upgrade stage: The codes dealing with protocol upgrade can be integrated in the third stage. After the non-mining nodes upgrades to support newer version of transactions, the codes with protocol upgrade must be included and now we can use miner vote to activate and finish this upgrade.<br/>\n>\n> \u81f3\u6b64\uff0c\u534f\u8bae\u5347\u7ea7\u5b8c\u6210\u3002<br/>\n>\n> At this point, the protocol upgrade have phased in.<br/>\n>\n> ==Benefits==\n>\n> 1. \u4ec5\u9700\u8981\u591a\u6570\u7684\u77ff\u5de5\u53d1\u4fe1\u53f7\u540e\u5373\u53ef\u6fc0\u6d3b\u3002\u5728\u4e2d\u672c\u806a\u7684\u6bd4\u7279\u5e01\u8bba\u6587\u4e2d\uff0c99.9% \u7684\u53ef\u80fd\u6027\u4e0b\uff0c55% \u7684\u77ff\u5de5\u5c06\u5728 340 \u4e2a\u533a\u5757\u540e\u786e\u4fdd\u6210\u4e3a\u6700\u957f\u94fe\u3002\u8fd9\u5c06\u6700\u5927\u53ef\u80fd\u51cf\u5c0f\u901a\u8fc7\u63a7\u5236\u5c11\u6570\u7b97\u529b\u800c\u62d6\u5ef6\u7f51\u7edc\u5347\u7ea7\u7684\u53ef\u80fd\u6027\u3002\u6211\u4eec\u53ef\u4ee5\u9884\u89c1\u5230\u5728\u7b97\u529b\u4fe1\u53f7\u8d85\u8fc7 51% \u540e\uff0c\u6316\u77ff\u8282\u70b9\u5c06\u8fc5\u901f\u7684\u5728\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\u5185\u8fdb\u884c\u5347\u7ea7\u3002<br/>\n> 2. \u5728\u4e24\u4e2a\u5bbd\u9650\u671f\u5185\uff0c\u94b1\u5305\u8282\u70b9\u4ea4\u6613\u4e0d\u53d7\u5f71\u54cd\uff0c\u6709\u8db3\u591f\u7684\u65f6\u95f4\u5347\u7ea7\u94b1\u5305\u8f6f\u4ef6\u3002<br/>\n> 3. \u7248\u672c\u4fe1\u606f\u5305\u542b\u5728 block header \u4e2d\uff0c\u5e76\u4e0d\u5f71\u54cd SPV \u6316\u77ff\u8fc7\u7a0b\u3002\uff08\u770b\u8d77\u6765\u662f\uff1f\uff09<br/>\n> 4. \u5728\u4e24\u4e2a\u5bbd\u9650\u671f\u540e\uff0c\u94b1\u5305\u8282\u70b9\u5c06\u5fc5\u987b\u5347\u7ea7\u94b1\u5305\uff0c\u5426\u5219\u56e0\u6ca1\u6709\u7b97\u529b\u652f\u6301\u5c06\u65e0\u6cd5\u53d1\u9001\u4ea4\u6613\uff0c\u4e5f\u65e0\u6cd5\u786e\u8ba4\u3002\u76f8\u5bf9\u4e8e\u5728\u8282\u70b9\u95f4\u91cd\u65b0\u8fbe\u6210\u65b0\u7684\u5171\u8bc6\uff0c\u8fd9\u79cd\u72b6\u51b5\u5e76\u6ca1\u6709\u66f4\u7cdf\u7cd5\u3002<br/>\n> 5. \u94b1\u5305\u8282\u70b9\u7684\u8d26\u672c\u5c06\u5f97\u5230\u5c0a\u91cd\u548c\u4fdd\u62a4\u3002\u4f7f\u7528\u94fe\u4e0b\u94b1\u5305\u7684\u7528\u6237\u5c06\u9700\u8981\u5728\u94b1\u5305\u670d\u52a1\u63d0\u4f9b\u5546\u7684\u58f0\u660e\u4e4b\u540e\u51b3\u5b9a\u63d0\u81f3\u94fe\u4e0a\u94b1\u5305\u6216\u8ddf\u968f\u3002<br/>\n> 6. \u5c06\u6765\u7684\u534f\u8bae\u5347\u7ea7\uff0c\u53ef\u4ee5\u5728\u5347\u7ea7\u5ba2\u6237\u7aef\u7248\u672c\u540c\u65f6\u7ed1\u5b9a\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\u5e76\u8fdb\u884c\u72ec\u7acb\u7684\u6fc0\u6d3b\u6295\u7968\u3002\u8fd9\u5c06\u9884\u7559\u8db3\u591f\u7684\u65f6\u95f4\u8ba9\u8282\u70b9\u5347\u7ea7\u8f6f\u4ef6\u4ee5\u652f\u6301\u65b0\u7684\u534f\u8bae\u3002\u5373\u4f7f\u77ff\u5de5\u6295\u7968\u6fc0\u6d3b\u5931\u8d25\u4e5f\u4e0d\u5f71\u54cd\u73b0\u72b6\u3002<br/>\n>\n> 1. The activation only requires majority miners signal. As described in the paper by Satoshi Nakamoto, 55% miners will be in the longest chain after 340 blocks, with 99.9% certainty. This will minimize the possibility of delaying network upgrades by controlling a small number of hashing power. We can foresee that after 51% signalling, all miners will upgrade within the first grace period. <br/>\nTechnically soft forks can be implemented at 55% hashpower already\nwithout an orphaning period(like BIP16). Those that don't upgrade\nwould just be at risk of mining invalid blocks. One would not want to\nuse this method to try and activate a controversial hard fork since\nit's trivial for miners to false signal. The orphaning period\neffectively forces miners to make a decision but does not necessarily\nforce them to make a particular decision since they can simply choose\nto reject the fork and false signal.\n> 2. During the first two grace periods, non-mining nodes will not be affected. They have enough time to upgrade their software. <br/>\n> 3. Versionbits included in block header, not influencing the SPY mining. <br/>\nThe widely deployed stratum based SPV mining does not really provide a\nproper way to validate nversion of the previous block, it only lets\nyou see the nversion of the current stratum job since you don't get a\nfull bock header. There's always a risk here that miners build on top\nof invalid blocks when SPV mining.\n> 4. After two grace periods, all nodes must be upgraded. Otherwise they cannot send transactions or get any confirmations. Compared with forming new consensus among nodes, the situation is not worse than before. <br/>\nPrevious consensus changes have largely been done in backwards\ncompatible ways which lets users opt-in to new features. In general\nbackwards compatibility is considered a good thing, this seems to make\nthat worse.\n> 5. The ledger in non-mining wallet nodes is honored and reserved. Users of off-chain wallet services can decide whether or not to follow the service providers after they got the public notification from the service providers. <br/>\n> 6. Protocol upgrades in the future can be bonded with the upgrades of nodes, and the upgrades activate through miners vote independently. There would be enough time for nodes to be upgraded in order to support new protocols. Even in case of failing in miner activation, the situation will not worsen and the status quo will remain. <br/>\n>\n>\n> ==Risks==\n>\n> 1. \u7b97\u529b\u7684\u6ce2\u52a8\u4f1a\u5f71\u54cd\u6700\u957f\u94fe\u7684\u7ed3\u679c\u3002\u56e0\u6b64\u8d8a\u9ad8\u7684\u6fc0\u6d3b\u6bd4\u4f8b\u8981\u6c42\u5c06\u51cf\u5c11\u77ed\u65f6\u95f4\u5206\u53c9\u7684\u5371\u9669\u3002<br/>\n> 2. \u77ff\u5de5\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u907f\u514d\u88ab\u5b64\u7acb\uff0c\u4f46\u5728\u94b1\u5305\u8282\u70b9\u770b\u6765\u65e0\u6cd5\u533a\u5206\u662f\u5426\u662f\u5047\u4fe1\u53f7\uff0c\u53ea\u80fd\u5347\u7ea7\u3002\u800c\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u4e4b\u540e\uff0c\u77ff\u5de5\u4e5f\u5c06\u8ddf\u968f\u3002<br/>\n> 3. \u94b1\u5305\u8282\u70b9\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u4ec5\u5347\u7ea7\u7248\u672c\u53f7\u800c\u4e0d\u652f\u6301\u7ed1\u5b9a\u7684\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\uff0c\u4f46\u94b1\u5305\u8282\u70b9\u6570\u91cf\u65e0\u6cd5\u5224\u522b\uff0c\u4e25\u8083\u7684\u771f\u5b9e\u8282\u70b9\u5e94\u5f53\u8ddf\u968f\u53ef\u8bc1\u5b9e\u7684\u77ff\u5de5\u6295\u7968\u7ed3\u679c\u3002<br/>\n> 4. \u5b58\u5728\u5c11\u90e8\u5206\u77ff\u5de5\u548c\u94b1\u5305\u8282\u70b9\u5171\u8c0b\uff0c\u5728\u65b0\u534f\u8bae\u5347\u7ea7\u6fc0\u6d3b\u540e\u4f9d\u7136\u4f7f\u7528\u8001\u534f\u8bae\u6316\u77ff\u7684\u53ef\u80fd\u3002\u8fd9\u79cd\u53ef\u80fd\u968f\u65f6\u53d1\u751f\u65e0\u6cd5\u675c\u7edd\uff0c\u4f46\u901a\u8fc7\u8ba9\u6c89\u9ed8\u7684\u5927\u591a\u6570\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u7684\u65b9\u5f0f\u53ef\u4ee5\u964d\u4f4e\u8fd9\u79cd\u884c\u4e3a\u5e26\u6765\u7684\u5229\u76ca\u3002<br/>\n>\n> 1. The fluctuation of the hashing power will affect the result of the longest chain. Higher activating requirement means a lower risk of temporary fork. <br/>\n> 2. Miners could simply signal to avoid being orphaned, but from the perspective of non-mining wallet nodes, they can't distinguish the false signal from the true signal. They must upgrade with the assumption that the signals are all true. After all the non-mining nodes have upgraded, the miners signalling false signal should follow. <br/>\nMiners can simply announce they are false signalling with coinbase\ntags and other methods. This activation method would likely not be\nviable for controversial changes.\n> 3. Non-mining wallet nodes could false signal without supporting the new protocol but since the total number of nodes cannot be distinguished, genuine nodes should follow the proven result provided by miners vote. <br/>\nUsers would likely take into account markets and other factors when\ndeciding what to do, the total number of nodes doesn't really matter\nmuch. Miner signalling is not necessarily indicative of economic and\nuser support.\n> 4. Miners and non-mining nodes could conspire to fork using old protocol consensus. It can't be eliminated, just like in the past but through most passive non-mining nodes being upgraded, their benefit is reduced. <br/>\n>\n>\n> ==Implementation==\n> ___TBD___\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Zheming Lin",
                "date": "2017-06-13T06:50:26",
                "message_text_only": "Hi James:\n\nThank you very much for detailed feedback. Sorry for my understanding of English being poor. I\u2019ll try to answer that.\n\n\n> \u5728 2017\u5e746\u670813\u65e5\uff0c13:44\uff0cJames Hilliard <james.hilliard1 at gmail.com> \u5199\u9053\uff1a\n> \n> On Mon, Jun 12, 2017 at 9:23 PM, Zheming Lin via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>> The BIP is described using Chinese and English. If any part is missing or need more specific, please reply. Forgive for my poor English.\n>> \n>> This method will incorporate any upgrade that affects non-mining nodes. They should beware that the rule has been changed.\n>> \n>> TLDR: Major miners activate and orphan the minor. That ensures all miners upgrades. Then invalid the tx from not upgrading nodes. Nodes must upgrade (with other protocol upgrade codes) in order to work. Then the final miner vote over protocol upgrade, with all nodes has the same upgraded codes.\n>> \n>> ==Motivation==\n>> \n>> \u9274\u4e8e\u6700\u521d\u7684\u6bd4\u7279\u5e01\u534f\u8bae\u5e76\u672a\u8003\u8651\u4e0d\u53c2\u4e0e\u6316\u77ff\u7684\u94b1\u5305\u8282\u70b9\uff0c\u5bfc\u81f4\u8fd9\u4e9b\u94b1\u5305\u8282\u70b9\u7684\u534f\u8bae\u5347\u7ea7\u662f\u88ab\u52a8\u7684\uff0c\u61d2\u60f0\u7684\u3002\u5f53\u5728\u5347\u7ea7\u65b9\u5411\u4e0a\u51fa\u73b0\u5206\u6b67\u65f6\uff0c\u77ff\u5de5\u4e5f\u4e0d\u613f\u610f\u5728\u9519\u8bef\u7684\u94fe\u4e0a\u6316\u77ff\uff0c\u4f46\u77ff\u5de5\u53c8\u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u6b63\u5728\u5ef6\u957f\u7684\u94fe\u662f\u88ab\u94b1\u5305\u8282\u70b9\u5e7f\u6cdb\u63a5\u53d7\u7684\u94fe\u3002\u8fd9\u5c06\u5f71\u54cd\u94b1\u5305\u8282\u70b9\u7684\u5b89\u5168\u3002<br/>\n>> In view of the fact that the original Bitcoin consensus did not consider the non-mining wallet nodes(as mentioned above), the result is that upgrading the consensus of these wallet nodes is passive and lazy. When there is disagreement in the direction of the upgrade, the miners have no mechanism to ensure that the chain being extended is the chain widely accepted by the wallet nodes. This also adversely affects the security of the wallet nodes.<br/>\n> Wallet nodes being able to fully validate and choose whether or not to\n> accept a particular chain is an important part of bitcoins security\n> model.\n\n\u662f\u7684\u6211\u8ba4\u4e3a\u8fd9\u4e9b\u8282\u70b9\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u6b64\u4e0d\u613f\u610f\u770b\u5230\u8fd9\u4e9b\u8282\u70b9\u56e0\u4e3a\u65e0\u6cd5\u9884\u89c1\u5230\u7f51\u7edc\u4e0a\u53ef\u80fd\u53d1\u751f\u7684\u6539\u53d8\u800c\u8499\u53d7\u635f\u5931\u3002\u8fd9\u4e9b\u8282\u70b9\u4f9d\u7136\u62e5\u6709\u9009\u62e9\u7684\u6743\u5229\uff0c\u6bd4\u5982\u901a\u8fc7\u7c7b\u4f3c\u4e8e BIP148 \u7684\u65b9\u6cd5\u3002\n\nI admitted that these nodes a very important. so we don\u2019t want these nodes suffer financial loss by undetectable network change. These nodes always have choice like BIP148.\n\n>> \n>> \u4f7f\u7528\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5728\u4fdd\u8bc1\u94b1\u5305\u8282\u70b9\u8d44\u4ea7\u5b89\u5168\u7684\u60c5\u51b5\u4e0b\uff0c\u4e14\u901a\u8fc7\u589e\u52a0\u6fc0\u52b1\u8ba9\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u534f\u8bae\u3002\u4e00\u65e6\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u534f\u8bae\uff0c\u4fdd\u8bc1\u77ff\u5de5\u8282\u70b9\u4e0d\u4ec5\u5de5\u4f5c\u5728\u7b97\u529b\u6700\u957f\u94fe\u4e0a\uff0c\u8fd8\u5de5\u4f5c\u5728\u6bd4\u7279\u5e01\u751f\u6001\u73af\u5883\u4e2d\u5176\u4ed6\u94b1\u5305\u8282\u70b9\u6240\u4f7f\u7528\u7684\u6700\u957f\u94fe\u4e0a\u3002\u5728\u4e2d\u672c\u806a\u5171\u8bc6\u4e0b\u4e0d\u4f1a\u51fa\u73b0\u5206\u53c9\uff0c\u4ee5\u5b9e\u73b0\u6e10\u8fdb\u5f0f\u7684\u534f\u8bae\u5347\u7ea7\u3002<br/>\n>> \n>> Apart from ensuring the asset security of wallet nodes, this method can be used to provide additional incentives to upgrade the protocol for the wallet nodes. Once the wallet nodes upgrade their protocol, the miners' nodes can be guaranteed to work - not only on the longest chain, but also on the longest chain used by other wallet nodes in the broader bitcoin sphere. Under the Nakamoto Consensus, there will be no persistent forks as protocol upgrades can be phased in.<br/>\n> There is no way to guarantee a wallet node will accept a particular\n> block since that is always up to the user.\n\n\u6211\u4eec\u65e0\u6cd5\u5bf9\u6b64\u8fdb\u884c\u4fdd\u8bc1\u3002\u4f46\u662f\u6211\u4eec\u80fd\u591f\u63d0\u4f9b\u4e00\u79cd\u8ba9\u8fd9\u4e9b\u8282\u70b9\u4e86\u89e3\u5e76\u53c2\u4e0e\u90e8\u7f72\u6539\u53d8\u7684\u6fc0\u52b1\u3002\nWe can not have any guarantee. but we can have incentives that they participate and be aware about the change happening.\n\u7528\u6237\u603b\u662f\u53ef\u4ee5\u8fdb\u884c\u9009\u62e9\u3002\nUsers always have choice.\n\n>> \n>> ==Specification==\n>> \n>> 1. \u6316\u77ff\u8282\u70b9\u5c06\u4f7f\u7528 versionbits \u7248\u672c\u4f4d\u6765\u5b9a\u4e49\u652f\u6301\u4fe1\u53f7\u3002BIP \u751f\u6548\u65f6\uff0c\u6240\u6709\u533a\u5757\u9700\u8981\u4f7f\u7528\u5236\u5b9a\u7684 nVersion \u6765\u53d1\u9001\u4fe1\u53f7<br/>\n>> 2. \u6316\u77ff\u8282\u70b9\u5c06\u4f7f\u7528 tx version \u6765\u5b9a\u4e49\u5f53\u524d\u7684\u4ea4\u6613\u7248\u672c\u3002\u5f53\u524d\u7684 tx version \u662f 1\uff0c\u5c06\u5141\u8bb8 tx version \u4e3a 2 \u7684\u4ea4\u6613\uff0c\u5e76\u5728\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f\u4e4b\u540e\uff0c\u4f7f tx version \u4e3a 1 \u7684\u4ea4\u6613\u975e\u6cd5\u3002<br/>\n>> \n>> 1. Mining nodes signal by setting a version bit. While this BIP is active, all blocks must set the chosen nVersion.<br/>\n>> 2. Mining nodes will use tx version to define current version transactions. Current tx version is 1, and tx version 2 will be allowed. After the second grace period, tx version 1 will be regarded as invalid.<br/>\n> Sounds like this would cause issues with pre-signed time locked transactions.\n\n\u6211\u4eec\u53ef\u4ee5\u5728\u7b2c\u56db\u9636\u6bb5\u4e2d\u91cd\u65b0\u5141\u8bb8\u8fd9\u4e9b\u4ea4\u6613\u3002\u65e0\u8bba\u5347\u7ea7\u662f\u5426\u6210\u529f\u6fc0\u6d3b\uff0c\u4ed6\u4eec\u90fd\u9700\u8981\u4e3a\u6b64\u505a\u597d\u51c6\u5907\u3002\u4ed6\u4eec\u5e76\u4e0d\u80fd\u88ab\u4e22\u4e0b\u751a\u81f3\u88ab\u6b3a\u9a97\u4e3a\u4ec0\u4e48\u90fd\u6ca1\u6709\u53d1\u751f\u3002\nThey can be re-enable in the successful or unsuccessful activation of the fourth stage. Whether or not, what they need is to be prepared for the future coming. But they can\u2019t be left behind or be cheated like nothing happened.\n\n>> \n>> \n>> ==Deployment==\n>> \u534f\u8bae\u5347\u7ea7\uff0c\u5c06\u5206\u6210\u4e09\u6b65\u9010\u6b65\u5b9e\u65bd\u3002\u5e76\u6709\u4e00\u4e2a\u53ef\u9009\u7684\u7b2c\u56db\u6b65\u6765\u96c6\u6210\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\u3002<br/>\n>> \n>> Protocol upgrading will phase in over three stages. We can have an optional fourth stage to integrate codes of protocol upgrade.<br/>\n>> \n>> 1. \u4fe1\u53f7\u9636\u6bb5\u3002\u6316\u77ff\u8282\u70b9\u4f7f\u7528 versionbits \u53d1\u9001\u652f\u6301\u4fe1\u53f7\u3002\u6316\u77ff\u8282\u70b9\u5728\u76d1\u6d4b\u5230 55% \u7684\u533a\u5757\u5373\u524d 1109/2016 \u4e2a\u533a\u5757\u5747\u53d1\u9001\u4e86\u76f8\u540c\u7684\u652f\u6301\u4fe1\u53f7\uff0c\u8fdb\u5165\u4e0b\u4e00\u9636\u6bb5\u3002<br/>\n>> 2. \u77ff\u5de5\u8282\u70b9\u5347\u7ea7\u3002\u7ecf\u8fc7\u4e86\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f 2016 \u7684\u533a\u5757\u540e\uff0c\u4e14\u603b\u4fe1\u53f7\u533a\u5757\u8d85\u8fc7\u4e86 2218/4032\uff0c\u5c31\u5f00\u59cb\u4f7f\u7528\u65b0\u7684\u533a\u5757\u7248\u672c\u6253\u5305\u533a\u5757\uff0c\u5e76\u540c\u65f6\u5f00\u59cb\u5b64\u7acb\u65e7\u7248\u672c\u3002\u6b64\u65f6\u6240\u6709\u8282\u70b9\u548c\u94b1\u5305\uff0c\u5c06\u53ef\u4ee5\u4f7f\u7528\u65b0\u7248\u672c\u53f7\u53d1\u9001\u4ea4\u6613\uff0c\u540c\u65f6\u517c\u5bb9\u65e7\u7248\u672c\u53f7\u4ea4\u6613\u3002<br/>\n>> 3. \u94b1\u5305\u8282\u70b9\u5347\u7ea7\u3002\u5728\u6316\u77ff\u8282\u70b9\u76d1\u6d4b\u5230\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f 4032 \u4e2a\u8fde\u7eed\u7684\u65b0\u7248\u672c\u7684\u533a\u5757\u540e\uff0c\u5f00\u59cb\u62d2\u7edd\u65e7\u7248\u672c\u53f7\u7684\u4ea4\u6613\uff0c\u53ea\u6253\u5305\uff0f\u8f6c\u64ad\u65b0\u7248\u672c\u53f7\u7684\u4ea4\u6613\u3002\u540c\u65f6\u5c06\u4ece\u5185\u5b58\u6c60\u4e2d\u5220\u9664\u65e7\u7248\u672c\u53f7\u7684\u4ea4\u6613\u3002<br/>\n>> 4. \uff08\u53ef\u9009\u7684\uff09\u534f\u8bae\u5347\u7ea7\u3002\u5728\u7b2c\u4e09\u9636\u6bb5\u4e2d\u5305\u542b\u6709\u7b2c\u56db\u9636\u6bb5\u7684\u5347\u7ea7\u4ee3\u7801\u3002\u5f53\u6211\u4eec\u786e\u4fdd\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u5230\u652f\u6301\u65b0\u7248\u672c\u4ea4\u6613\u540e\uff0c\u5fc5\u7136\u5305\u542b\u4e86\u7b2c\u56db\u9636\u6bb5\u7684\u5347\u7ea7\u4ee3\u7801\u3002\u5219\u6b64\u65f6\u53ef\u4ee5\u901a\u8fc7\u77ff\u5de5\u8282\u70b9\u6295\u7968\u7684\u65b9\u5f0f\u5b8c\u6210\u5168\u7f51\u7edc\u7684\u534f\u8bae\u5347\u7ea7\u3002\n>> \n>> 1. Signal stage: Mining nodes signal using BIP9. The next stage will be activated after 55% (1109) of 2016 blocks has the signal.<br/>\n>> \n>> 2. Mining nodes upgrade stage: After a first grace period of 2016 blocks and total signalling blocks passed 2218 of 4032 blocks, miners broadcasting blocks with new versionbits in block headers will orphan blocks with old versionbits. At this stage all nodes can send transactions with new versionbits, and transactions with old versionbits will be compatible.<br/>\n>> \n>> 3. Non-mining nodes upgrade stage: after 4032 continuous blocks with new versionbits, mining nodes will start to refuse transactions with old versionbits. Only transactions with new versionbits can be relayed and included in blocks. Transactions with old versionbits can be safely purged from memory pools.<br/>\n>> \n>> 4. (Optional)Protocol Upgrade stage: The codes dealing with protocol upgrade can be integrated in the third stage. After the non-mining nodes upgrades to support newer version of transactions, the codes with protocol upgrade must be included and now we can use miner vote to activate and finish this upgrade.<br/>\n>> \n>> \u81f3\u6b64\uff0c\u534f\u8bae\u5347\u7ea7\u5b8c\u6210\u3002<br/>\n>> \n>> At this point, the protocol upgrade have phased in.<br/>\n>> \n>> ==Benefits==\n>> \n>> 1. \u4ec5\u9700\u8981\u591a\u6570\u7684\u77ff\u5de5\u53d1\u4fe1\u53f7\u540e\u5373\u53ef\u6fc0\u6d3b\u3002\u5728\u4e2d\u672c\u806a\u7684\u6bd4\u7279\u5e01\u8bba\u6587\u4e2d\uff0c99.9% \u7684\u53ef\u80fd\u6027\u4e0b\uff0c55% \u7684\u77ff\u5de5\u5c06\u5728 340 \u4e2a\u533a\u5757\u540e\u786e\u4fdd\u6210\u4e3a\u6700\u957f\u94fe\u3002\u8fd9\u5c06\u6700\u5927\u53ef\u80fd\u51cf\u5c0f\u901a\u8fc7\u63a7\u5236\u5c11\u6570\u7b97\u529b\u800c\u62d6\u5ef6\u7f51\u7edc\u5347\u7ea7\u7684\u53ef\u80fd\u6027\u3002\u6211\u4eec\u53ef\u4ee5\u9884\u89c1\u5230\u5728\u7b97\u529b\u4fe1\u53f7\u8d85\u8fc7 51% \u540e\uff0c\u6316\u77ff\u8282\u70b9\u5c06\u8fc5\u901f\u7684\u5728\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\u5185\u8fdb\u884c\u5347\u7ea7\u3002<br/>\n>> 2. \u5728\u4e24\u4e2a\u5bbd\u9650\u671f\u5185\uff0c\u94b1\u5305\u8282\u70b9\u4ea4\u6613\u4e0d\u53d7\u5f71\u54cd\uff0c\u6709\u8db3\u591f\u7684\u65f6\u95f4\u5347\u7ea7\u94b1\u5305\u8f6f\u4ef6\u3002<br/>\n>> 3. \u7248\u672c\u4fe1\u606f\u5305\u542b\u5728 block header \u4e2d\uff0c\u5e76\u4e0d\u5f71\u54cd SPV \u6316\u77ff\u8fc7\u7a0b\u3002\uff08\u770b\u8d77\u6765\u662f\uff1f\uff09<br/>\n>> 4. \u5728\u4e24\u4e2a\u5bbd\u9650\u671f\u540e\uff0c\u94b1\u5305\u8282\u70b9\u5c06\u5fc5\u987b\u5347\u7ea7\u94b1\u5305\uff0c\u5426\u5219\u56e0\u6ca1\u6709\u7b97\u529b\u652f\u6301\u5c06\u65e0\u6cd5\u53d1\u9001\u4ea4\u6613\uff0c\u4e5f\u65e0\u6cd5\u786e\u8ba4\u3002\u76f8\u5bf9\u4e8e\u5728\u8282\u70b9\u95f4\u91cd\u65b0\u8fbe\u6210\u65b0\u7684\u5171\u8bc6\uff0c\u8fd9\u79cd\u72b6\u51b5\u5e76\u6ca1\u6709\u66f4\u7cdf\u7cd5\u3002<br/>\n>> 5. \u94b1\u5305\u8282\u70b9\u7684\u8d26\u672c\u5c06\u5f97\u5230\u5c0a\u91cd\u548c\u4fdd\u62a4\u3002\u4f7f\u7528\u94fe\u4e0b\u94b1\u5305\u7684\u7528\u6237\u5c06\u9700\u8981\u5728\u94b1\u5305\u670d\u52a1\u63d0\u4f9b\u5546\u7684\u58f0\u660e\u4e4b\u540e\u51b3\u5b9a\u63d0\u81f3\u94fe\u4e0a\u94b1\u5305\u6216\u8ddf\u968f\u3002<br/>\n>> 6. \u5c06\u6765\u7684\u534f\u8bae\u5347\u7ea7\uff0c\u53ef\u4ee5\u5728\u5347\u7ea7\u5ba2\u6237\u7aef\u7248\u672c\u540c\u65f6\u7ed1\u5b9a\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\u5e76\u8fdb\u884c\u72ec\u7acb\u7684\u6fc0\u6d3b\u6295\u7968\u3002\u8fd9\u5c06\u9884\u7559\u8db3\u591f\u7684\u65f6\u95f4\u8ba9\u8282\u70b9\u5347\u7ea7\u8f6f\u4ef6\u4ee5\u652f\u6301\u65b0\u7684\u534f\u8bae\u3002\u5373\u4f7f\u77ff\u5de5\u6295\u7968\u6fc0\u6d3b\u5931\u8d25\u4e5f\u4e0d\u5f71\u54cd\u73b0\u72b6\u3002<br/>\n>> \n>> 1. The activation only requires majority miners signal. As described in the paper by Satoshi Nakamoto, 55% miners will be in the longest chain after 340 blocks, with 99.9% certainty. This will minimize the possibility of delaying network upgrades by controlling a small number of hashing power. We can foresee that after 51% signalling, all miners will upgrade within the first grace period. <br/>\n> Technically soft forks can be implemented at 55% hashpower already\n> without an orphaning period(like BIP16). Those that don't upgrade\n> would just be at risk of mining invalid blocks. One would not want to\n> use this method to try and activate a controversial hard fork since\n> it's trivial for miners to false signal. The orphaning period\n> effectively forces miners to make a decision but does not necessarily\n> force them to make a particular decision since they can simply choose\n> to reject the fork and false signal.\n\n\u5047\u4fe1\u53f7\u7684\u95ee\u9898\u5728\u6211\u770b\u6765\u65e0\u6cd5\u89e3\u51b3\u3002\u4f46\u5982\u679c\u591a\u6570\u4e0d\u540c\u610f\u8fd9\u4e2a\u6539\u53d8\uff0c\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u8fd8\u8981\u6b3a\u9a97\uff1f\u5982\u679c\u591a\u6570\u5982\u4e2d\u672c\u806a\u5171\u8bc6\u4e2d\u63cf\u8ff0\u7684\u90a3\u6837\u662f\u8bda\u5b9e\u53ef\u4fe1\u7684\uff0c\u90a3\u5c31\u4e0d\u4f1a\u6709\u4efb\u4f55\u95ee\u9898\u3002\u901a\u8fc7\u7b97\u529b\u603b\u80fd\u5206\u51fa\u80dc\u8d1f\u3002\nFalse signal can\u2019t be solved in my opinion. If the majority part just don\u2019t agree with the change, why they cheat? If the majority part is honest as described in nakamoto consensus, I think that won\u2019t be a problem. CPU power always decides.\n\n\n>> 2. During the first two grace periods, non-mining nodes will not be affected. They have enough time to upgrade their software. <br/>\n>> 3. Versionbits included in block header, not influencing the SPY mining. <br/>\n> The widely deployed stratum based SPV mining does not really provide a\n> proper way to validate nversion of the previous block, it only lets\n> you see the nversion of the current stratum job since you don't get a\n> full bock header. There's always a risk here that miners build on top\n> of invalid blocks when SPV mining.\n\n\u4e5f\u8bb8\u6211\u662f\u9519\u7684\u6211\u5e76\u4e0d\u80af\u5b9a\u3002\u8bf7\u5bf9\u5982\u4f55\u8ba9\u8fd9\u4e2a\u65b9\u6cd5\u517c\u5bb9 SPY \u6316\u77ff\u63d0\u51fa\u5efa\u8bbe\u6027\u610f\u89c1\u3002\nMaybe I\u2019m wrong. Please give some advice that how to make it compatible with SPY mining.\n\n>> 4. After two grace periods, all nodes must be upgraded. Otherwise they cannot send transactions or get any confirmations. Compared with forming new consensus among nodes, the situation is not worse than before. <br/>\n> Previous consensus changes have largely been done in backwards\n> compatible ways which lets users opt-in to new features. In general\n> backwards compatibility is considered a good thing, this seems to make\n> that worse.\n\n\u8fd9\u5e76\u6ca1\u6709\u5f3a\u5236\u6211\u4eec\u7684\u8282\u70b9\u4f5c\u51fa\u4efb\u4f55\u6539\u53d8\u5171\u8bc6\u7684\u8868\u793a\u3002\u4ec5\u4ec5\u8ba9\u8fd9\u4e9b\u8282\u70b9\u4e3a\u63a5\u4e0b\u6765\u53ef\u80fd\u7684\u6539\u53d8\u505a\u597d\u51c6\u5907\u3002\nIt would not force our nodes to do anything that changes the consensus. But they should be prepared for the **maybe** upcoming changes.\n\u534f\u8bae\u7684\u6539\u53d8\u5c06\u901a\u8fc7\u77ff\u5de5\u6295\u7968\u4ea7\u751f\uff0c\u4f46\u662f\u8fd9\u4e2a\u8fc7\u7a0b\u5e94\u8be5\u88ab\u6240\u6709\u8282\u70b9\u6240\u77e5\u6653\u5e76\u627f\u8ba4\u3002\nProtocol upgrades could be done using miners vote. but the progress of voting should be acknowledged by all nodes.\n\n\n>> 5. The ledger in non-mining wallet nodes is honored and reserved. Users of off-chain wallet services can decide whether or not to follow the service providers after they got the public notification from the service providers. <br/>\n>> 6. Protocol upgrades in the future can be bonded with the upgrades of nodes, and the upgrades activate through miners vote independently. There would be enough time for nodes to be upgraded in order to support new protocols. Even in case of failing in miner activation, the situation will not worsen and the status quo will remain. <br/>\n>> \n>> \n>> ==Risks==\n>> \n>> 1. \u7b97\u529b\u7684\u6ce2\u52a8\u4f1a\u5f71\u54cd\u6700\u957f\u94fe\u7684\u7ed3\u679c\u3002\u56e0\u6b64\u8d8a\u9ad8\u7684\u6fc0\u6d3b\u6bd4\u4f8b\u8981\u6c42\u5c06\u51cf\u5c11\u77ed\u65f6\u95f4\u5206\u53c9\u7684\u5371\u9669\u3002<br/>\n>> 2. \u77ff\u5de5\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u907f\u514d\u88ab\u5b64\u7acb\uff0c\u4f46\u5728\u94b1\u5305\u8282\u70b9\u770b\u6765\u65e0\u6cd5\u533a\u5206\u662f\u5426\u662f\u5047\u4fe1\u53f7\uff0c\u53ea\u80fd\u5347\u7ea7\u3002\u800c\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u4e4b\u540e\uff0c\u77ff\u5de5\u4e5f\u5c06\u8ddf\u968f\u3002<br/>\n>> 3. \u94b1\u5305\u8282\u70b9\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u4ec5\u5347\u7ea7\u7248\u672c\u53f7\u800c\u4e0d\u652f\u6301\u7ed1\u5b9a\u7684\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\uff0c\u4f46\u94b1\u5305\u8282\u70b9\u6570\u91cf\u65e0\u6cd5\u5224\u522b\uff0c\u4e25\u8083\u7684\u771f\u5b9e\u8282\u70b9\u5e94\u5f53\u8ddf\u968f\u53ef\u8bc1\u5b9e\u7684\u77ff\u5de5\u6295\u7968\u7ed3\u679c\u3002<br/>\n>> 4. \u5b58\u5728\u5c11\u90e8\u5206\u77ff\u5de5\u548c\u94b1\u5305\u8282\u70b9\u5171\u8c0b\uff0c\u5728\u65b0\u534f\u8bae\u5347\u7ea7\u6fc0\u6d3b\u540e\u4f9d\u7136\u4f7f\u7528\u8001\u534f\u8bae\u6316\u77ff\u7684\u53ef\u80fd\u3002\u8fd9\u79cd\u53ef\u80fd\u968f\u65f6\u53d1\u751f\u65e0\u6cd5\u675c\u7edd\uff0c\u4f46\u901a\u8fc7\u8ba9\u6c89\u9ed8\u7684\u5927\u591a\u6570\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u7684\u65b9\u5f0f\u53ef\u4ee5\u964d\u4f4e\u8fd9\u79cd\u884c\u4e3a\u5e26\u6765\u7684\u5229\u76ca\u3002<br/>\n>> \n>> 1. The fluctuation of the hashing power will affect the result of the longest chain. Higher activating requirement means a lower risk of temporary fork. <br/>\n>> 2. Miners could simply signal to avoid being orphaned, but from the perspective of non-mining wallet nodes, they can't distinguish the false signal from the true signal. They must upgrade with the assumption that the signals are all true. After all the non-mining nodes have upgraded, the miners signalling false signal should follow. <br/>\n> Miners can simply announce they are false signalling with coinbase\n> tags and other methods. This activation method would likely not be\n> viable for controversial changes.\n\n\u5982\u679c\u5927\u591a\u6570\u77ff\u5de5\u662f\u8bda\u5b9e\u7684\uff0c\u5047\u4fe1\u53f7\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\nFalse signal won\u2019t be a problem if majority miners are honest.\n\n>> 3. Non-mining wallet nodes could false signal without supporting the new protocol but since the total number of nodes cannot be distinguished, genuine nodes should follow the proven result provided by miners vote. <br/>\n> Users would likely take into account markets and other factors when\n> deciding what to do, the total number of nodes doesn't really matter\n> much. Miner signalling is not necessarily indicative of economic and\n> user support.\n\n\u77ff\u5de5\u9700\u8981\u5728\u53ef\u4ee5\u786e\u4fdd\u5927\u591a\u6570\u7528\u6237\u4e0d\u88ab\u5347\u7ea7\u5f71\u54cd\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u516c\u6b63\u6295\u7968\u3002\nMiners should vote unbiasedly under the condition that most users are not affected by protocol upgrading.\n\n\n>> 4. Miners and non-mining nodes could conspire to fork using old protocol consensus. It can't be eliminated, just like in the past but through most passive non-mining nodes being upgraded, their benefit is reduced. <br/>\n>> \n>> \n>> ==Implementation==\n>> ___TBD___\n>> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170613/edd5d2d6/attachment-0001.html>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-06-13T19:35:13",
                "message_text_only": "> Wallet nodes being able to fully validate and choose whether or not to\naccept a particular chain is an important part of bitcoins security\nmodel.\n\nWhat you're describing is effectively the same as BU.\n\nNodes follow chains, they do not decide the victor.  The average user\nfollows the default of the software, which is to follow the longest valid\nchain.  Forcing the average user to decide which software to run is far\nmore valuable than allowing \"the software\" to decide things, when in fact\nall it will do is decide the previous default.\n\n> One would not want to\n> use this method to try and activate a controversial hard fork since\n> it's trivial for miners to false signal. The orphaning period\n> effectively forces miners to make a decision but does not necessarily\n> force them to make a particular decision\n\nThis is true and a good point.  A false signal from miners could trick the\nhonest miners into forking off prematurely with a minority.\n\n>  it only lets\n> you see the nversion of the current stratum job since you don't get a\n> full bock header. There's always a risk here that miners build on top\n> of invalid blocks when SPV mining.\n\nThis is the job of the stratum server and the pool operator.  These are\ndistinct responsibilities; Miners should choose a pool operator in line\nwith their desires.  Solo mining is basically dead, as it will never again\nbe practical(and has not been for at least 2 years) for the same hardware\nthat does the mining to also do full node operation.\n\nIf the pool operator/stratum server also does not do validation, then any\nnumber of problems could occur.\n\n\n\n\nOn Mon, Jun 12, 2017 at 10:44 PM, James Hilliard via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Mon, Jun 12, 2017 at 9:23 PM, Zheming Lin via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > The BIP is described using Chinese and English. If any part is missing\n> or need more specific, please reply. Forgive for my poor English.\n> >\n> > This method will incorporate any upgrade that affects non-mining nodes.\n> They should beware that the rule has been changed.\n> >\n> > TLDR: Major miners activate and orphan the minor. That ensures all\n> miners upgrades. Then invalid the tx from not upgrading nodes. Nodes must\n> upgrade (with other protocol upgrade codes) in order to work. Then the\n> final miner vote over protocol upgrade, with all nodes has the same\n> upgraded codes.\n> >\n> > <pre>\n> > BIP: ???\n> > Title: Demonstration of Phase in Full Network Upgrade Activated by Miners\n> > Author: LIN Zheming\n> > Status: Draft\n> > Type: Standards Track\n> > Created: 2017-06-12\n> > </pre>\n> >\n> > ==Summary==\n> >\n> > \u672c\u65b9\u6cd5\u5e76\u4e0d\u662f\u6765\u6e90\u4e8e\u4e2a\u4eba\uff0c\u800c\u662f\u4e2d\u6587\u6bd4\u7279\u5e01\u793e\u533a\u4e2d\u96c6\u4f53\u667a\u6167\u7684\u7ed3\u679c\u3002<br/>\n> > This idea was not created by an individual but is a product of\n> collaboration in the Chinese bitcoin community between different interest\n> groups.<br/>\n> >\n> > \u8fd9\u662f\u4e00\u79cd\u5728\u534f\u8bae\u5347\u7ea7\u65f6\uff0c\u5bf9\u5168\u7f51\u6316\u77ff\u548c\u975e\u6316\u77ff\u8282\u70b9\u8fdb\u884c\u4fdd\u62a4\u548c\u6fc0\u52b1\u7684\u65b9\u6cd5\uff0c\u907f\u514d\u4e0d\u53c2\u4e0e\u6316\u77ff\u7684\u8282\u70b9\u6ca1\u6709\u5347\u7ea7\u7684\u52a8\u529b\u800c\u53d7\u5230\u635f\u5931\u3002<br/>\n> > This method is put forth to incentivize and to protect mining nodes and\n> non-mining nodes during protocol upgrading. With this incentive mechanism,\n> the non-mining nodes will not suffer monetary loss from chain\n> splitting.<br/>\n> >\n> > \u53d1\u4fe1\u53f7\u7684\u591a\u6570\u77ff\u5de5\u5728\u8fbe\u5230\u6fc0\u6d3b\u6761\u4ef6\u540e\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\uff08\u4e00\u4e2a\u96be\u5ea6\u5468\u671f\uff09\u540e\u8bbe\u7f6e\u65b0\u533a\u5757\u7248\u672c\u53f7\uff0c\u5b64\u7acb\u672a\u5347\u7ea7\u77ff\u5de5\u7684\u4f4e\u7248\u672c\u53f7\u7684\u5757\u3002\n> \u901a\u8fc7\u6700\u521d\u7684\u4e2d\u672c\u806a\u5171\u8bc6\uff0c\u5728\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\u7ed3\u675f\u540e\uff0c\u6240\u6709\u77ff\u5de5\u5c06\u5347\u7ea7\u81f3\u6700\u65b0\u7248\u672c\u6216\u4f7f\u7528\u6700\u65b0\u7248\u672c\u3002\u5728\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f\uff08\u4e00\u4e2a\u96be\u5ea6\u5468\u671f\uff09\u540e\uff0c\u77ff\u5de5\u5c06\u4ec5\u63a5\u53d7\u65b0\u7248\u672c\u7684\u4ea4\u6613\uff0c\n> \u672a\u5347\u7ea7\u7684\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u65e7\u7248\u672c\u4ea4\u6613\u5c06\u65e0\u6cd5\u5f97\u5230\u65b0\u8282\u70b9\u7684\u8f6c\u64ad\u4e5f\u65e0\u6cd5\u8fdb\u5165\u65b0\u7248\u672c\u533a\u5757\u3002\u8fd9\u5c06\u5728\u4fdd\u62a4\u7528\u6237\u8d44\u4ea7\u7684\u540c\u65f6\uff0c\u63d0\u9192\u4e0d\u6316\u77ff\u7684\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u3002\n> \u5e76\u5728\u5347\u7ea7\u4ee3\u7801\u4e2d\u52a0\u5165\u5bf9\u534f\u8bae\u8fdb\u884c\u6539\u52a8\u7684\u90e8\u5206\u3002\u94b1\u5305\u5347\u7ea7\u540e\u5c06\u7531\u6316\u77ff\u8282\u70b9\u6295\u7968\u5b9e\u65bd\u8be5\u9879\u6539\u52a8\uff0c\u4ee5\u8fbe\u6210\u534f\u8bae\u6539\u52a8\u7684\u5e7f\u6cdb\u90e8\u7f72\u3002<br/>\n> >\n> > After the activation condition is met, majority miners will set a new\n> block versionbits after the first grace period(a difficulty change of 2016\n> blocks). The blocks with lower versionbits will be orphaned. In terms of\n> the Nakamoto Consensus, the end of the first grace period will force all\n> mining nodes upgraded to signal a new version of consensus. After the\n> second grace period ( a difficulty change of 2016 blocks), mining nodes\n> will only accept transactions with new versionbits. Transactions from nodes\n> not upgrading will not be relayed nor included in blocks with new\n> versionbits. This will protect funds of non-mining nodes from utilizing\n> replay attack and will function as a notification for them to upgrade.\n> Codes dealing with protocol upgrade could be included in the upgrade. After\n> the non-mining node upgrades, mining nodes will vote to activate the\n> protocol upgrade and this will achieve the broad/widespread deployment of\n> the protocol upgrade.<br/>\n> >\n> > \u5728\u8be5\u9879\u6539\u52a8\u5e7f\u6cdb\u90e8\u7f72\u81f3\u5ba2\u6237\u7aef\u4e4b\u540e\uff0c\u4f9d\u7136\u7531\u5176\u6fc0\u6d3b\u6761\u4ef6\u63a7\u5236\u3002<br/>\n> > The protocol upgrade depends on its activate condition independently\n> even after the change deployed among nodes.<br/>\n> >\n> > ==Motivation==\n> >\n> > \u9274\u4e8e\u6700\u521d\u7684\u6bd4\u7279\u5e01\u534f\u8bae\u5e76\u672a\u8003\u8651\u4e0d\u53c2\u4e0e\u6316\u77ff\u7684\u94b1\u5305\u8282\u70b9\uff0c\u5bfc\u81f4\u8fd9\u4e9b\u94b1\u5305\u8282\u70b9\u7684\u534f\u8bae\u5347\u7ea7\u662f\u88ab\u52a8\u7684\uff0c\u61d2\u60f0\u7684\u3002\n> \u5f53\u5728\u5347\u7ea7\u65b9\u5411\u4e0a\u51fa\u73b0\u5206\u6b67\u65f6\uff0c\u77ff\u5de5\u4e5f\u4e0d\u613f\u610f\u5728\u9519\u8bef\u7684\u94fe\u4e0a\u6316\u77ff\uff0c\u4f46\u77ff\u5de5\u53c8\u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u6b63\u5728\u5ef6\u957f\u7684\u94fe\u662f\u88ab\u94b1\u5305\u8282\u70b9\u5e7f\u6cdb\u63a5\u53d7\n> \u7684\u94fe\u3002\u8fd9\u5c06\u5f71\u54cd\u94b1\u5305\u8282\u70b9\u7684\u5b89\u5168\u3002<br/>\n> > In view of the fact that the original Bitcoin consensus did not consider\n> the non-mining wallet nodes(as mentioned above), the result is that\n> upgrading the consensus of these wallet nodes is passive and lazy. When\n> there is disagreement in the direction of the upgrade, the miners have no\n> mechanism to ensure that the chain being extended is the chain widely\n> accepted by the wallet nodes. This also adversely affects the security of\n> the wallet nodes.<br/>\n> Wallet nodes being able to fully validate and choose whether or not to\n> accept a particular chain is an important part of bitcoins security\n> model.\n> >\n> > \u4f7f\u7528\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5728\u4fdd\u8bc1\u94b1\u5305\u8282\u70b9\u8d44\u4ea7\u5b89\u5168\u7684\u60c5\u51b5\u4e0b\uff0c\u4e14\u901a\u8fc7\u589e\u52a0\u6fc0\u52b1\u8ba9\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u534f\u8bae\u3002\u4e00\u65e6\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u534f\u8bae\uff0c\u4fdd\u8bc1\u77ff\u5de5\u8282\u70b9\u4e0d\u4ec5\u5de5\u4f5c\u5728\u7b97\u529b\u6700\u957f\u94fe\u4e0a\uff0c\n> \u8fd8\u5de5\u4f5c\u5728\u6bd4\u7279\u5e01\u751f\u6001\u73af\u5883\u4e2d\u5176\u4ed6\u94b1\u5305\u8282\u70b9\u6240\u4f7f\u7528\u7684\u6700\u957f\u94fe\u4e0a\u3002\u5728\u4e2d\u672c\u806a\u5171\u8bc6\u4e0b\u4e0d\u4f1a\u51fa\u73b0\u5206\u53c9\uff0c\u4ee5\u5b9e\u73b0\u6e10\u8fdb\u5f0f\u7684\u534f\u8bae\u5347\u7ea7\u3002<br/>\n> >\n> > Apart from ensuring the asset security of wallet nodes, this method can\n> be used to provide additional incentives to upgrade the protocol for the\n> wallet nodes. Once the wallet nodes upgrade their protocol, the miners'\n> nodes can be guaranteed to work - not only on the longest chain, but also\n> on the longest chain used by other wallet nodes in the broader bitcoin\n> sphere. Under the Nakamoto Consensus, there will be no persistent forks as\n> protocol upgrades can be phased in.<br/>\n> There is no way to guarantee a wallet node will accept a particular\n> block since that is always up to the user.\n> >\n> > ==Specification==\n> >\n> > 1. \u6316\u77ff\u8282\u70b9\u5c06\u4f7f\u7528 versionbits \u7248\u672c\u4f4d\u6765\u5b9a\u4e49\u652f\u6301\u4fe1\u53f7\u3002BIP \u751f\u6548\u65f6\uff0c\u6240\u6709\u533a\u5757\u9700\u8981\u4f7f\u7528\u5236\u5b9a\u7684 nVersion \u6765\u53d1\u9001\u4fe1\u53f7<br/>\n> > 2. \u6316\u77ff\u8282\u70b9\u5c06\u4f7f\u7528 tx version \u6765\u5b9a\u4e49\u5f53\u524d\u7684\u4ea4\u6613\u7248\u672c\u3002\u5f53\u524d\u7684 tx version \u662f 1\uff0c\u5c06\u5141\u8bb8 tx version \u4e3a 2\n> \u7684\u4ea4\u6613\uff0c\u5e76\u5728\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f\u4e4b\u540e\uff0c\u4f7f tx version \u4e3a 1 \u7684\u4ea4\u6613\u975e\u6cd5\u3002<br/>\n> >\n> > 1. Mining nodes signal by setting a version bit. While this BIP is\n> active, all blocks must set the chosen nVersion.<br/>\n> > 2. Mining nodes will use tx version to define current version\n> transactions. Current tx version is 1, and tx version 2 will be allowed.\n> After the second grace period, tx version 1 will be regarded as\n> invalid.<br/>\n> Sounds like this would cause issues with pre-signed time locked\n> transactions.\n> >\n> >\n> > ==Deployment==\n> > \u534f\u8bae\u5347\u7ea7\uff0c\u5c06\u5206\u6210\u4e09\u6b65\u9010\u6b65\u5b9e\u65bd\u3002\u5e76\u6709\u4e00\u4e2a\u53ef\u9009\u7684\u7b2c\u56db\u6b65\u6765\u96c6\u6210\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\u3002<br/>\n> >\n> > Protocol upgrading will phase in over three stages. We can have an\n> optional fourth stage to integrate codes of protocol upgrade.<br/>\n> >\n> > 1. \u4fe1\u53f7\u9636\u6bb5\u3002\u6316\u77ff\u8282\u70b9\u4f7f\u7528 versionbits \u53d1\u9001\u652f\u6301\u4fe1\u53f7\u3002\u6316\u77ff\u8282\u70b9\u5728\u76d1\u6d4b\u5230 55% \u7684\u533a\u5757\u5373\u524d 1109/2016\n> \u4e2a\u533a\u5757\u5747\u53d1\u9001\u4e86\u76f8\u540c\u7684\u652f\u6301\u4fe1\u53f7\uff0c\u8fdb\u5165\u4e0b\u4e00\u9636\u6bb5\u3002<br/>\n> > 2. \u77ff\u5de5\u8282\u70b9\u5347\u7ea7\u3002\u7ecf\u8fc7\u4e86\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f 2016 \u7684\u533a\u5757\u540e\uff0c\u4e14\u603b\u4fe1\u53f7\u533a\u5757\u8d85\u8fc7\u4e86 2218/4032\uff0c\u5c31\u5f00\u59cb\u4f7f\u7528\u65b0\u7684\u533a\u5757\u7248\u672c\u6253\u5305\u533a\u5757\uff0c\n> \u5e76\u540c\u65f6\u5f00\u59cb\u5b64\u7acb\u65e7\u7248\u672c\u3002\u6b64\u65f6\u6240\u6709\u8282\u70b9\u548c\u94b1\u5305\uff0c\u5c06\u53ef\u4ee5\u4f7f\u7528\u65b0\u7248\u672c\u53f7\u53d1\u9001\u4ea4\u6613\uff0c\u540c\u65f6\u517c\u5bb9\u65e7\u7248\u672c\u53f7\u4ea4\u6613\u3002<br/>\n> > 3. \u94b1\u5305\u8282\u70b9\u5347\u7ea7\u3002\u5728\u6316\u77ff\u8282\u70b9\u76d1\u6d4b\u5230\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f 4032 \u4e2a\u8fde\u7eed\u7684\u65b0\u7248\u672c\u7684\u533a\u5757\u540e\uff0c\u5f00\u59cb\u62d2\u7edd\u65e7\u7248\u672c\u53f7\u7684\u4ea4\u6613\uff0c\u53ea\u6253\u5305\uff0f\n> \u8f6c\u64ad\u65b0\u7248\u672c\u53f7\u7684\u4ea4\u6613\u3002\u540c\u65f6\u5c06\u4ece\u5185\u5b58\u6c60\u4e2d\u5220\u9664\u65e7\u7248\u672c\u53f7\u7684\u4ea4\u6613\u3002<br/>\n> > 4. \uff08\u53ef\u9009\u7684\uff09\u534f\u8bae\u5347\u7ea7\u3002\u5728\u7b2c\u4e09\u9636\u6bb5\u4e2d\u5305\u542b\u6709\u7b2c\u56db\u9636\u6bb5\u7684\u5347\u7ea7\u4ee3\u7801\u3002\u5f53\u6211\u4eec\u786e\u4fdd\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u5230\u652f\u6301\u65b0\u7248\u672c\u4ea4\u6613\u540e\uff0c\u5fc5\u7136\u5305\u542b\u4e86\u7b2c\u56db\u9636\u6bb5\u7684\u5347\u7ea7\u4ee3\u7801\u3002\n> \u5219\u6b64\u65f6\u53ef\u4ee5\u901a\u8fc7\u77ff\u5de5\u8282\u70b9\u6295\u7968\u7684\u65b9\u5f0f\u5b8c\u6210\u5168\u7f51\u7edc\u7684\u534f\u8bae\u5347\u7ea7\u3002\n> >\n> > 1. Signal stage: Mining nodes signal using BIP9. The next stage will be\n> activated after 55% (1109) of 2016 blocks has the signal.<br/>\n> >\n> > 2. Mining nodes upgrade stage: After a first grace period of 2016 blocks\n> and total signalling blocks passed 2218 of 4032 blocks, miners broadcasting\n> blocks with new versionbits in block headers will orphan blocks with old\n> versionbits. At this stage all nodes can send transactions with new\n> versionbits, and transactions with old versionbits will be compatible.<br/>\n> >\n> > 3. Non-mining nodes upgrade stage: after 4032 continuous blocks with new\n> versionbits, mining nodes will start to refuse transactions with old\n> versionbits. Only transactions with new versionbits can be relayed and\n> included in blocks. Transactions with old versionbits can be safely purged\n> from memory pools.<br/>\n> >\n> > 4. (Optional)Protocol Upgrade stage: The codes dealing with protocol\n> upgrade can be integrated in the third stage. After the non-mining nodes\n> upgrades to support newer version of transactions, the codes with protocol\n> upgrade must be included and now we can use miner vote to activate and\n> finish this upgrade.<br/>\n> >\n> > \u81f3\u6b64\uff0c\u534f\u8bae\u5347\u7ea7\u5b8c\u6210\u3002<br/>\n> >\n> > At this point, the protocol upgrade have phased in.<br/>\n> >\n> > ==Benefits==\n> >\n> > 1. \u4ec5\u9700\u8981\u591a\u6570\u7684\u77ff\u5de5\u53d1\u4fe1\u53f7\u540e\u5373\u53ef\u6fc0\u6d3b\u3002\u5728\u4e2d\u672c\u806a\u7684\u6bd4\u7279\u5e01\u8bba\u6587\u4e2d\uff0c99.9% \u7684\u53ef\u80fd\u6027\u4e0b\uff0c55% \u7684\u77ff\u5de5\u5c06\u5728 340 \u4e2a\u533a\u5757\u540e\u786e\u4fdd\u6210\u4e3a\u6700\u957f\u94fe\u3002\n> \u8fd9\u5c06\u6700\u5927\u53ef\u80fd\u51cf\u5c0f\u901a\u8fc7\u63a7\u5236\u5c11\u6570\u7b97\u529b\u800c\u62d6\u5ef6\u7f51\u7edc\u5347\u7ea7\u7684\u53ef\u80fd\u6027\u3002\u6211\u4eec\u53ef\u4ee5\u9884\u89c1\u5230\u5728\u7b97\u529b\u4fe1\u53f7\u8d85\u8fc7 51%\n> \u540e\uff0c\u6316\u77ff\u8282\u70b9\u5c06\u8fc5\u901f\u7684\u5728\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\u5185\u8fdb\u884c\u5347\u7ea7\u3002<br/>\n> > 2. \u5728\u4e24\u4e2a\u5bbd\u9650\u671f\u5185\uff0c\u94b1\u5305\u8282\u70b9\u4ea4\u6613\u4e0d\u53d7\u5f71\u54cd\uff0c\u6709\u8db3\u591f\u7684\u65f6\u95f4\u5347\u7ea7\u94b1\u5305\u8f6f\u4ef6\u3002<br/>\n> > 3. \u7248\u672c\u4fe1\u606f\u5305\u542b\u5728 block header \u4e2d\uff0c\u5e76\u4e0d\u5f71\u54cd SPV \u6316\u77ff\u8fc7\u7a0b\u3002\uff08\u770b\u8d77\u6765\u662f\uff1f\uff09<br/>\n> > 4. \u5728\u4e24\u4e2a\u5bbd\u9650\u671f\u540e\uff0c\u94b1\u5305\u8282\u70b9\u5c06\u5fc5\u987b\u5347\u7ea7\u94b1\u5305\uff0c\u5426\u5219\u56e0\u6ca1\u6709\u7b97\u529b\u652f\u6301\u5c06\u65e0\u6cd5\u53d1\u9001\u4ea4\u6613\uff0c\u4e5f\u65e0\u6cd5\u786e\u8ba4\u3002\n> \u76f8\u5bf9\u4e8e\u5728\u8282\u70b9\u95f4\u91cd\u65b0\u8fbe\u6210\u65b0\u7684\u5171\u8bc6\uff0c\u8fd9\u79cd\u72b6\u51b5\u5e76\u6ca1\u6709\u66f4\u7cdf\u7cd5\u3002<br/>\n> > 5. \u94b1\u5305\u8282\u70b9\u7684\u8d26\u672c\u5c06\u5f97\u5230\u5c0a\u91cd\u548c\u4fdd\u62a4\u3002\u4f7f\u7528\u94fe\u4e0b\u94b1\u5305\u7684\u7528\u6237\u5c06\u9700\u8981\u5728\u94b1\u5305\u670d\u52a1\u63d0\u4f9b\u5546\u7684\u58f0\u660e\u4e4b\u540e\u51b3\u5b9a\u63d0\u81f3\u94fe\u4e0a\u94b1\u5305\u6216\u8ddf\u968f\u3002<br/>\n> > 6. \u5c06\u6765\u7684\u534f\u8bae\u5347\u7ea7\uff0c\u53ef\u4ee5\u5728\u5347\u7ea7\u5ba2\u6237\u7aef\u7248\u672c\u540c\u65f6\u7ed1\u5b9a\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\u5e76\u8fdb\u884c\u72ec\u7acb\u7684\u6fc0\u6d3b\u6295\u7968\u3002\u8fd9\u5c06\u9884\u7559\u8db3\u591f\u7684\u65f6\u95f4\u8ba9\u8282\u70b9\u5347\u7ea7\u8f6f\u4ef6\u4ee5\u652f\u6301\u65b0\u7684\u534f\u8bae\u3002\n> \u5373\u4f7f\u77ff\u5de5\u6295\u7968\u6fc0\u6d3b\u5931\u8d25\u4e5f\u4e0d\u5f71\u54cd\u73b0\u72b6\u3002<br/>\n> >\n> > 1. The activation only requires majority miners signal. As described in\n> the paper by Satoshi Nakamoto, 55% miners will be in the longest chain\n> after 340 blocks, with 99.9% certainty. This will minimize the possibility\n> of delaying network upgrades by controlling a small number of hashing\n> power. We can foresee that after 51% signalling, all miners will upgrade\n> within the first grace period. <br/>\n> Technically soft forks can be implemented at 55% hashpower already\n> without an orphaning period(like BIP16). Those that don't upgrade\n> would just be at risk of mining invalid blocks. One would not want to\n> use this method to try and activate a controversial hard fork since\n> it's trivial for miners to false signal. The orphaning period\n> effectively forces miners to make a decision but does not necessarily\n> force them to make a particular decision since they can simply choose\n> to reject the fork and false signal.\n> > 2. During the first two grace periods, non-mining nodes will not be\n> affected. They have enough time to upgrade their software. <br/>\n> > 3. Versionbits included in block header, not influencing the SPY mining.\n> <br/>\n> The widely deployed stratum based SPV mining does not really provide a\n> proper way to validate nversion of the previous block, it only lets\n> you see the nversion of the current stratum job since you don't get a\n> full bock header. There's always a risk here that miners build on top\n> of invalid blocks when SPV mining.\n> > 4. After two grace periods, all nodes must be upgraded. Otherwise they\n> cannot send transactions or get any confirmations. Compared with forming\n> new consensus among nodes, the situation is not worse than before. <br/>\n> Previous consensus changes have largely been done in backwards\n> compatible ways which lets users opt-in to new features. In general\n> backwards compatibility is considered a good thing, this seems to make\n> that worse.\n> > 5. The ledger in non-mining wallet nodes is honored and reserved. Users\n> of off-chain wallet services can decide whether or not to follow the\n> service providers after they got the public notification from the service\n> providers. <br/>\n> > 6. Protocol upgrades in the future can be bonded with the upgrades of\n> nodes, and the upgrades activate through miners vote independently. There\n> would be enough time for nodes to be upgraded in order to support new\n> protocols. Even in case of failing in miner activation, the situation will\n> not worsen and the status quo will remain. <br/>\n> >\n> >\n> > ==Risks==\n> >\n> > 1. \u7b97\u529b\u7684\u6ce2\u52a8\u4f1a\u5f71\u54cd\u6700\u957f\u94fe\u7684\u7ed3\u679c\u3002\u56e0\u6b64\u8d8a\u9ad8\u7684\u6fc0\u6d3b\u6bd4\u4f8b\u8981\u6c42\u5c06\u51cf\u5c11\u77ed\u65f6\u95f4\u5206\u53c9\u7684\u5371\u9669\u3002<br/>\n> > 2. \u77ff\u5de5\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u907f\u514d\u88ab\u5b64\u7acb\uff0c\u4f46\u5728\u94b1\u5305\u8282\u70b9\u770b\u6765\u65e0\u6cd5\u533a\u5206\u662f\u5426\u662f\u5047\u4fe1\u53f7\uff0c\u53ea\u80fd\u5347\u7ea7\u3002\u800c\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u4e4b\u540e\uff0c\u77ff\u5de5\u4e5f\u5c06\u8ddf\u968f\u3002<br/>\n> > 3. \u94b1\u5305\u8282\u70b9\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u4ec5\u5347\u7ea7\u7248\u672c\u53f7\u800c\u4e0d\u652f\u6301\u7ed1\u5b9a\u7684\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\uff0c\u4f46\u94b1\u5305\u8282\u70b9\u6570\u91cf\u65e0\u6cd5\u5224\u522b\uff0c\n> \u4e25\u8083\u7684\u771f\u5b9e\u8282\u70b9\u5e94\u5f53\u8ddf\u968f\u53ef\u8bc1\u5b9e\u7684\u77ff\u5de5\u6295\u7968\u7ed3\u679c\u3002<br/>\n> > 4. \u5b58\u5728\u5c11\u90e8\u5206\u77ff\u5de5\u548c\u94b1\u5305\u8282\u70b9\u5171\u8c0b\uff0c\u5728\u65b0\u534f\u8bae\u5347\u7ea7\u6fc0\u6d3b\u540e\u4f9d\u7136\u4f7f\u7528\u8001\u534f\u8bae\u6316\u77ff\u7684\u53ef\u80fd\u3002\u8fd9\u79cd\u53ef\u80fd\u968f\u65f6\u53d1\u751f\u65e0\u6cd5\u675c\u7edd\uff0c\n> \u4f46\u901a\u8fc7\u8ba9\u6c89\u9ed8\u7684\u5927\u591a\u6570\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u7684\u65b9\u5f0f\u53ef\u4ee5\u964d\u4f4e\u8fd9\u79cd\u884c\u4e3a\u5e26\u6765\u7684\u5229\u76ca\u3002<br/>\n> >\n> > 1. The fluctuation of the hashing power will affect the result of the\n> longest chain. Higher activating requirement means a lower risk of\n> temporary fork. <br/>\n> > 2. Miners could simply signal to avoid being orphaned, but from the\n> perspective of non-mining wallet nodes, they can't distinguish the false\n> signal from the true signal. They must upgrade with the assumption that the\n> signals are all true. After all the non-mining nodes have upgraded, the\n> miners signalling false signal should follow. <br/>\n> Miners can simply announce they are false signalling with coinbase\n> tags and other methods. This activation method would likely not be\n> viable for controversial changes.\n> > 3. Non-mining wallet nodes could false signal without supporting the new\n> protocol but since the total number of nodes cannot be distinguished,\n> genuine nodes should follow the proven result provided by miners vote. <br/>\n> Users would likely take into account markets and other factors when\n> deciding what to do, the total number of nodes doesn't really matter\n> much. Miner signalling is not necessarily indicative of economic and\n> user support.\n> > 4. Miners and non-mining nodes could conspire to fork using old protocol\n> consensus. It can't be eliminated, just like in the past but through most\n> passive non-mining nodes being upgraded, their benefit is reduced. <br/>\n> >\n> >\n> > ==Implementation==\n> > ___TBD___\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170613/1f587ffa/attachment-0001.html>"
            },
            {
                "author": "James Hilliard",
                "date": "2017-06-14T00:23:06",
                "message_text_only": "On Tue, Jun 13, 2017 at 2:35 PM, Jared Lee Richardson\n<jaredr26 at gmail.com> wrote:\n>> Wallet nodes being able to fully validate and choose whether or not to\n> accept a particular chain is an important part of bitcoins security\n> model.\n>\n> What you're describing is effectively the same as BU.\n\nBU by default uses an \"Accept Depth\" parameter which effectively lets\nminers decide block size rules and allows for resource requirements\nthat are too high for many users to validate. The block size settings\nthere are effectively placebo controls.\n\n>\n> Nodes follow chains, they do not decide the victor.  The average user\n> follows the default of the software, which is to follow the longest valid\n> chain.  Forcing the average user to decide which software to run is far more\n> valuable than allowing \"the software\" to decide things, when in fact all it\n> will do is decide the previous default.\n\nThat's largely true that they typically don't decide the victor in\nsoft forks unless they are the ones to activate the rules\nchanges(satoshi did this a few times in the early days), however they\nmake it very difficult for a hard fork to be activated without\nconsent. Yes, I'm not advocating for having runtime consensus settings\nfor nodes either, I'm advocating that resource requirements be low\nenough that full validation remains possible for a large percentage of\nthe economy.\n\n>\n>> One would not want to\n>> use this method to try and activate a controversial hard fork since\n>> it's trivial for miners to false signal. The orphaning period\n>> effectively forces miners to make a decision but does not necessarily\n>> force them to make a particular decision\n>\n> This is true and a good point.  A false signal from miners could trick the\n> honest miners into forking off prematurely with a minority.\n\nMore likely the false signal would be used during the orphaning period\nto prevent blocks from being orphaned for miners that don't want to\nfollow the fork.\n\n>\n>>  it only lets\n>> you see the nversion of the current stratum job since you don't get a\n>> full bock header. There's always a risk here that miners build on top\n>> of invalid blocks when SPV mining.\n>\n> This is the job of the stratum server and the pool operator.  These are\n> distinct responsibilities; Miners should choose a pool operator in line with\n> their desires.  Solo mining is basically dead, as it will never again be\n> practical(and has not been for at least 2 years) for the same hardware that\n> does the mining to also do full node operation.\n>\n> If the pool operator/stratum server also does not do validation, then any\n> number of problems could occur.\n\nYes, there is a good amount of risk with validationless mining right\nnow here since it's well known that over half of mining pools use\nvalidationless mining to some degree. This may not be too bad though\ndue to fallbacks but the risk is probably fairly implementation\nspecific.\n\n>\n>\n>\n>\n> On Mon, Jun 12, 2017 at 10:44 PM, James Hilliard via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> On Mon, Jun 12, 2017 at 9:23 PM, Zheming Lin via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > The BIP is described using Chinese and English. If any part is missing\n>> > or need more specific, please reply. Forgive for my poor English.\n>> >\n>> > This method will incorporate any upgrade that affects non-mining nodes.\n>> > They should beware that the rule has been changed.\n>> >\n>> > TLDR: Major miners activate and orphan the minor. That ensures all\n>> > miners upgrades. Then invalid the tx from not upgrading nodes. Nodes must\n>> > upgrade (with other protocol upgrade codes) in order to work. Then the final\n>> > miner vote over protocol upgrade, with all nodes has the same upgraded\n>> > codes.\n>> >\n>> > <pre>\n>> > BIP: ???\n>> > Title: Demonstration of Phase in Full Network Upgrade Activated by\n>> > Miners\n>> > Author: LIN Zheming\n>> > Status: Draft\n>> > Type: Standards Track\n>> > Created: 2017-06-12\n>> > </pre>\n>> >\n>> > ==Summary==\n>> >\n>> > \u672c\u65b9\u6cd5\u5e76\u4e0d\u662f\u6765\u6e90\u4e8e\u4e2a\u4eba\uff0c\u800c\u662f\u4e2d\u6587\u6bd4\u7279\u5e01\u793e\u533a\u4e2d\u96c6\u4f53\u667a\u6167\u7684\u7ed3\u679c\u3002<br/>\n>> > This idea was not created by an individual but is a product of\n>> > collaboration in the Chinese bitcoin community between different interest\n>> > groups.<br/>\n>> >\n>> > \u8fd9\u662f\u4e00\u79cd\u5728\u534f\u8bae\u5347\u7ea7\u65f6\uff0c\u5bf9\u5168\u7f51\u6316\u77ff\u548c\u975e\u6316\u77ff\u8282\u70b9\u8fdb\u884c\u4fdd\u62a4\u548c\u6fc0\u52b1\u7684\u65b9\u6cd5\uff0c\u907f\u514d\u4e0d\u53c2\u4e0e\u6316\u77ff\u7684\u8282\u70b9\u6ca1\u6709\u5347\u7ea7\u7684\u52a8\u529b\u800c\u53d7\u5230\u635f\u5931\u3002<br/>\n>> > This method is put forth to incentivize and to protect mining nodes and\n>> > non-mining nodes during protocol upgrading. With this incentive mechanism,\n>> > the non-mining nodes will not suffer monetary loss from chain\n>> > splitting.<br/>\n>> >\n>> >\n>> > \u53d1\u4fe1\u53f7\u7684\u591a\u6570\u77ff\u5de5\u5728\u8fbe\u5230\u6fc0\u6d3b\u6761\u4ef6\u540e\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\uff08\u4e00\u4e2a\u96be\u5ea6\u5468\u671f\uff09\u540e\u8bbe\u7f6e\u65b0\u533a\u5757\u7248\u672c\u53f7\uff0c\u5b64\u7acb\u672a\u5347\u7ea7\u77ff\u5de5\u7684\u4f4e\u7248\u672c\u53f7\u7684\u5757\u3002\u901a\u8fc7\u6700\u521d\u7684\u4e2d\u672c\u806a\u5171\u8bc6\uff0c\u5728\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\u7ed3\u675f\u540e\uff0c\u6240\u6709\u77ff\u5de5\u5c06\u5347\u7ea7\u81f3\u6700\u65b0\u7248\u672c\u6216\u4f7f\u7528\u6700\u65b0\u7248\u672c\u3002\u5728\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f\uff08\u4e00\u4e2a\u96be\u5ea6\u5468\u671f\uff09\u540e\uff0c\u77ff\u5de5\u5c06\u4ec5\u63a5\u53d7\u65b0\u7248\u672c\u7684\u4ea4\u6613\uff0c\u672a\u5347\u7ea7\u7684\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u65e7\u7248\u672c\u4ea4\u6613\u5c06\u65e0\u6cd5\u5f97\u5230\u65b0\u8282\u70b9\u7684\u8f6c\u64ad\u4e5f\u65e0\u6cd5\u8fdb\u5165\u65b0\u7248\u672c\u533a\u5757\u3002\u8fd9\u5c06\u5728\u4fdd\u62a4\u7528\u6237\u8d44\u4ea7\u7684\u540c\u65f6\uff0c\u63d0\u9192\u4e0d\u6316\u77ff\u7684\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u3002\u5e76\u5728\u5347\u7ea7\u4ee3\u7801\u4e2d\u52a0\u5165\u5bf9\u534f\u8bae\u8fdb\u884c\u6539\u52a8\u7684\u90e8\u5206\u3002\u94b1\u5305\u5347\u7ea7\u540e\u5c06\u7531\u6316\u77ff\u8282\u70b9\u6295\u7968\u5b9e\u65bd\u8be5\u9879\u6539\u52a8\uff0c\u4ee5\u8fbe\u6210\u534f\u8bae\u6539\u52a8\u7684\u5e7f\u6cdb\u90e8\u7f72\u3002<br/>\n>> >\n>> > After the activation condition is met, majority miners will set a new\n>> > block versionbits after the first grace period(a difficulty change of 2016\n>> > blocks). The blocks with lower versionbits will be orphaned. In terms of the\n>> > Nakamoto Consensus, the end of the first grace period will force all mining\n>> > nodes upgraded to signal a new version of consensus. After the second grace\n>> > period ( a difficulty change of 2016 blocks), mining nodes will only accept\n>> > transactions with new versionbits. Transactions from nodes not upgrading\n>> > will not be relayed nor included in blocks with new versionbits. This will\n>> > protect funds of non-mining nodes from utilizing replay attack and will\n>> > function as a notification for them to upgrade. Codes dealing with protocol\n>> > upgrade could be included in the upgrade. After the non-mining node\n>> > upgrades, mining nodes will vote to activate the protocol upgrade and this\n>> > will achieve the broad/widespread deployment of the protocol upgrade.<br/>\n>> >\n>> > \u5728\u8be5\u9879\u6539\u52a8\u5e7f\u6cdb\u90e8\u7f72\u81f3\u5ba2\u6237\u7aef\u4e4b\u540e\uff0c\u4f9d\u7136\u7531\u5176\u6fc0\u6d3b\u6761\u4ef6\u63a7\u5236\u3002<br/>\n>> > The protocol upgrade depends on its activate condition independently\n>> > even after the change deployed among nodes.<br/>\n>> >\n>> > ==Motivation==\n>> >\n>> >\n>> > \u9274\u4e8e\u6700\u521d\u7684\u6bd4\u7279\u5e01\u534f\u8bae\u5e76\u672a\u8003\u8651\u4e0d\u53c2\u4e0e\u6316\u77ff\u7684\u94b1\u5305\u8282\u70b9\uff0c\u5bfc\u81f4\u8fd9\u4e9b\u94b1\u5305\u8282\u70b9\u7684\u534f\u8bae\u5347\u7ea7\u662f\u88ab\u52a8\u7684\uff0c\u61d2\u60f0\u7684\u3002\u5f53\u5728\u5347\u7ea7\u65b9\u5411\u4e0a\u51fa\u73b0\u5206\u6b67\u65f6\uff0c\u77ff\u5de5\u4e5f\u4e0d\u613f\u610f\u5728\u9519\u8bef\u7684\u94fe\u4e0a\u6316\u77ff\uff0c\u4f46\u77ff\u5de5\u53c8\u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u6b63\u5728\u5ef6\u957f\u7684\u94fe\u662f\u88ab\u94b1\u5305\u8282\u70b9\u5e7f\u6cdb\u63a5\u53d7\u7684\u94fe\u3002\u8fd9\u5c06\u5f71\u54cd\u94b1\u5305\u8282\u70b9\u7684\u5b89\u5168\u3002<br/>\n>> > In view of the fact that the original Bitcoin consensus did not consider\n>> > the non-mining wallet nodes(as mentioned above), the result is that\n>> > upgrading the consensus of these wallet nodes is passive and lazy. When\n>> > there is disagreement in the direction of the upgrade, the miners have no\n>> > mechanism to ensure that the chain being extended is the chain widely\n>> > accepted by the wallet nodes. This also adversely affects the security of\n>> > the wallet nodes.<br/>\n>> Wallet nodes being able to fully validate and choose whether or not to\n>> accept a particular chain is an important part of bitcoins security\n>> model.\n>> >\n>> >\n>> > \u4f7f\u7528\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5728\u4fdd\u8bc1\u94b1\u5305\u8282\u70b9\u8d44\u4ea7\u5b89\u5168\u7684\u60c5\u51b5\u4e0b\uff0c\u4e14\u901a\u8fc7\u589e\u52a0\u6fc0\u52b1\u8ba9\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u534f\u8bae\u3002\u4e00\u65e6\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u534f\u8bae\uff0c\u4fdd\u8bc1\u77ff\u5de5\u8282\u70b9\u4e0d\u4ec5\u5de5\u4f5c\u5728\u7b97\u529b\u6700\u957f\u94fe\u4e0a\uff0c\u8fd8\u5de5\u4f5c\u5728\u6bd4\u7279\u5e01\u751f\u6001\u73af\u5883\u4e2d\u5176\u4ed6\u94b1\u5305\u8282\u70b9\u6240\u4f7f\u7528\u7684\u6700\u957f\u94fe\u4e0a\u3002\u5728\u4e2d\u672c\u806a\u5171\u8bc6\u4e0b\u4e0d\u4f1a\u51fa\u73b0\u5206\u53c9\uff0c\u4ee5\u5b9e\u73b0\u6e10\u8fdb\u5f0f\u7684\u534f\u8bae\u5347\u7ea7\u3002<br/>\n>> >\n>> > Apart from ensuring the asset security of wallet nodes, this method can\n>> > be used to provide additional incentives to upgrade the protocol for the\n>> > wallet nodes. Once the wallet nodes upgrade their protocol, the miners'\n>> > nodes can be guaranteed to work - not only on the longest chain, but also on\n>> > the longest chain used by other wallet nodes in the broader bitcoin sphere.\n>> > Under the Nakamoto Consensus, there will be no persistent forks as protocol\n>> > upgrades can be phased in.<br/>\n>> There is no way to guarantee a wallet node will accept a particular\n>> block since that is always up to the user.\n>> >\n>> > ==Specification==\n>> >\n>> > 1. \u6316\u77ff\u8282\u70b9\u5c06\u4f7f\u7528 versionbits \u7248\u672c\u4f4d\u6765\u5b9a\u4e49\u652f\u6301\u4fe1\u53f7\u3002BIP \u751f\u6548\u65f6\uff0c\u6240\u6709\u533a\u5757\u9700\u8981\u4f7f\u7528\u5236\u5b9a\u7684 nVersion\n>> > \u6765\u53d1\u9001\u4fe1\u53f7<br/>\n>> > 2. \u6316\u77ff\u8282\u70b9\u5c06\u4f7f\u7528 tx version \u6765\u5b9a\u4e49\u5f53\u524d\u7684\u4ea4\u6613\u7248\u672c\u3002\u5f53\u524d\u7684 tx version \u662f 1\uff0c\u5c06\u5141\u8bb8 tx version \u4e3a 2\n>> > \u7684\u4ea4\u6613\uff0c\u5e76\u5728\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f\u4e4b\u540e\uff0c\u4f7f tx version \u4e3a 1 \u7684\u4ea4\u6613\u975e\u6cd5\u3002<br/>\n>> >\n>> > 1. Mining nodes signal by setting a version bit. While this BIP is\n>> > active, all blocks must set the chosen nVersion.<br/>\n>> > 2. Mining nodes will use tx version to define current version\n>> > transactions. Current tx version is 1, and tx version 2 will be allowed.\n>> > After the second grace period, tx version 1 will be regarded as\n>> > invalid.<br/>\n>> Sounds like this would cause issues with pre-signed time locked\n>> transactions.\n>> >\n>> >\n>> > ==Deployment==\n>> > \u534f\u8bae\u5347\u7ea7\uff0c\u5c06\u5206\u6210\u4e09\u6b65\u9010\u6b65\u5b9e\u65bd\u3002\u5e76\u6709\u4e00\u4e2a\u53ef\u9009\u7684\u7b2c\u56db\u6b65\u6765\u96c6\u6210\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\u3002<br/>\n>> >\n>> > Protocol upgrading will phase in over three stages. We can have an\n>> > optional fourth stage to integrate codes of protocol upgrade.<br/>\n>> >\n>> > 1. \u4fe1\u53f7\u9636\u6bb5\u3002\u6316\u77ff\u8282\u70b9\u4f7f\u7528 versionbits \u53d1\u9001\u652f\u6301\u4fe1\u53f7\u3002\u6316\u77ff\u8282\u70b9\u5728\u76d1\u6d4b\u5230 55% \u7684\u533a\u5757\u5373\u524d 1109/2016\n>> > \u4e2a\u533a\u5757\u5747\u53d1\u9001\u4e86\u76f8\u540c\u7684\u652f\u6301\u4fe1\u53f7\uff0c\u8fdb\u5165\u4e0b\u4e00\u9636\u6bb5\u3002<br/>\n>> > 2. \u77ff\u5de5\u8282\u70b9\u5347\u7ea7\u3002\u7ecf\u8fc7\u4e86\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f 2016 \u7684\u533a\u5757\u540e\uff0c\u4e14\u603b\u4fe1\u53f7\u533a\u5757\u8d85\u8fc7\u4e86\n>> > 2218/4032\uff0c\u5c31\u5f00\u59cb\u4f7f\u7528\u65b0\u7684\u533a\u5757\u7248\u672c\u6253\u5305\u533a\u5757\uff0c\u5e76\u540c\u65f6\u5f00\u59cb\u5b64\u7acb\u65e7\u7248\u672c\u3002\u6b64\u65f6\u6240\u6709\u8282\u70b9\u548c\u94b1\u5305\uff0c\u5c06\u53ef\u4ee5\u4f7f\u7528\u65b0\u7248\u672c\u53f7\u53d1\u9001\u4ea4\u6613\uff0c\u540c\u65f6\u517c\u5bb9\u65e7\u7248\u672c\u53f7\u4ea4\u6613\u3002<br/>\n>> > 3. \u94b1\u5305\u8282\u70b9\u5347\u7ea7\u3002\u5728\u6316\u77ff\u8282\u70b9\u76d1\u6d4b\u5230\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f 4032\n>> > \u4e2a\u8fde\u7eed\u7684\u65b0\u7248\u672c\u7684\u533a\u5757\u540e\uff0c\u5f00\u59cb\u62d2\u7edd\u65e7\u7248\u672c\u53f7\u7684\u4ea4\u6613\uff0c\u53ea\u6253\u5305\uff0f\u8f6c\u64ad\u65b0\u7248\u672c\u53f7\u7684\u4ea4\u6613\u3002\u540c\u65f6\u5c06\u4ece\u5185\u5b58\u6c60\u4e2d\u5220\u9664\u65e7\u7248\u672c\u53f7\u7684\u4ea4\u6613\u3002<br/>\n>> > 4.\n>> > \uff08\u53ef\u9009\u7684\uff09\u534f\u8bae\u5347\u7ea7\u3002\u5728\u7b2c\u4e09\u9636\u6bb5\u4e2d\u5305\u542b\u6709\u7b2c\u56db\u9636\u6bb5\u7684\u5347\u7ea7\u4ee3\u7801\u3002\u5f53\u6211\u4eec\u786e\u4fdd\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u5230\u652f\u6301\u65b0\u7248\u672c\u4ea4\u6613\u540e\uff0c\u5fc5\u7136\u5305\u542b\u4e86\u7b2c\u56db\u9636\u6bb5\u7684\u5347\u7ea7\u4ee3\u7801\u3002\u5219\u6b64\u65f6\u53ef\u4ee5\u901a\u8fc7\u77ff\u5de5\u8282\u70b9\u6295\u7968\u7684\u65b9\u5f0f\u5b8c\u6210\u5168\u7f51\u7edc\u7684\u534f\u8bae\u5347\u7ea7\u3002\n>> >\n>> > 1. Signal stage: Mining nodes signal using BIP9. The next stage will be\n>> > activated after 55% (1109) of 2016 blocks has the signal.<br/>\n>> >\n>> > 2. Mining nodes upgrade stage: After a first grace period of 2016 blocks\n>> > and total signalling blocks passed 2218 of 4032 blocks, miners broadcasting\n>> > blocks with new versionbits in block headers will orphan blocks with old\n>> > versionbits. At this stage all nodes can send transactions with new\n>> > versionbits, and transactions with old versionbits will be compatible.<br/>\n>> >\n>> > 3. Non-mining nodes upgrade stage: after 4032 continuous blocks with new\n>> > versionbits, mining nodes will start to refuse transactions with old\n>> > versionbits. Only transactions with new versionbits can be relayed and\n>> > included in blocks. Transactions with old versionbits can be safely purged\n>> > from memory pools.<br/>\n>> >\n>> > 4. (Optional)Protocol Upgrade stage: The codes dealing with protocol\n>> > upgrade can be integrated in the third stage. After the non-mining nodes\n>> > upgrades to support newer version of transactions, the codes with protocol\n>> > upgrade must be included and now we can use miner vote to activate and\n>> > finish this upgrade.<br/>\n>> >\n>> > \u81f3\u6b64\uff0c\u534f\u8bae\u5347\u7ea7\u5b8c\u6210\u3002<br/>\n>> >\n>> > At this point, the protocol upgrade have phased in.<br/>\n>> >\n>> > ==Benefits==\n>> >\n>> > 1. \u4ec5\u9700\u8981\u591a\u6570\u7684\u77ff\u5de5\u53d1\u4fe1\u53f7\u540e\u5373\u53ef\u6fc0\u6d3b\u3002\u5728\u4e2d\u672c\u806a\u7684\u6bd4\u7279\u5e01\u8bba\u6587\u4e2d\uff0c99.9% \u7684\u53ef\u80fd\u6027\u4e0b\uff0c55% \u7684\u77ff\u5de5\u5c06\u5728 340\n>> > \u4e2a\u533a\u5757\u540e\u786e\u4fdd\u6210\u4e3a\u6700\u957f\u94fe\u3002\u8fd9\u5c06\u6700\u5927\u53ef\u80fd\u51cf\u5c0f\u901a\u8fc7\u63a7\u5236\u5c11\u6570\u7b97\u529b\u800c\u62d6\u5ef6\u7f51\u7edc\u5347\u7ea7\u7684\u53ef\u80fd\u6027\u3002\u6211\u4eec\u53ef\u4ee5\u9884\u89c1\u5230\u5728\u7b97\u529b\u4fe1\u53f7\u8d85\u8fc7 51%\n>> > \u540e\uff0c\u6316\u77ff\u8282\u70b9\u5c06\u8fc5\u901f\u7684\u5728\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\u5185\u8fdb\u884c\u5347\u7ea7\u3002<br/>\n>> > 2. \u5728\u4e24\u4e2a\u5bbd\u9650\u671f\u5185\uff0c\u94b1\u5305\u8282\u70b9\u4ea4\u6613\u4e0d\u53d7\u5f71\u54cd\uff0c\u6709\u8db3\u591f\u7684\u65f6\u95f4\u5347\u7ea7\u94b1\u5305\u8f6f\u4ef6\u3002<br/>\n>> > 3. \u7248\u672c\u4fe1\u606f\u5305\u542b\u5728 block header \u4e2d\uff0c\u5e76\u4e0d\u5f71\u54cd SPV \u6316\u77ff\u8fc7\u7a0b\u3002\uff08\u770b\u8d77\u6765\u662f\uff1f\uff09<br/>\n>> > 4.\n>> > \u5728\u4e24\u4e2a\u5bbd\u9650\u671f\u540e\uff0c\u94b1\u5305\u8282\u70b9\u5c06\u5fc5\u987b\u5347\u7ea7\u94b1\u5305\uff0c\u5426\u5219\u56e0\u6ca1\u6709\u7b97\u529b\u652f\u6301\u5c06\u65e0\u6cd5\u53d1\u9001\u4ea4\u6613\uff0c\u4e5f\u65e0\u6cd5\u786e\u8ba4\u3002\u76f8\u5bf9\u4e8e\u5728\u8282\u70b9\u95f4\u91cd\u65b0\u8fbe\u6210\u65b0\u7684\u5171\u8bc6\uff0c\u8fd9\u79cd\u72b6\u51b5\u5e76\u6ca1\u6709\u66f4\u7cdf\u7cd5\u3002<br/>\n>> > 5. \u94b1\u5305\u8282\u70b9\u7684\u8d26\u672c\u5c06\u5f97\u5230\u5c0a\u91cd\u548c\u4fdd\u62a4\u3002\u4f7f\u7528\u94fe\u4e0b\u94b1\u5305\u7684\u7528\u6237\u5c06\u9700\u8981\u5728\u94b1\u5305\u670d\u52a1\u63d0\u4f9b\u5546\u7684\u58f0\u660e\u4e4b\u540e\u51b3\u5b9a\u63d0\u81f3\u94fe\u4e0a\u94b1\u5305\u6216\u8ddf\u968f\u3002<br/>\n>> > 6.\n>> > \u5c06\u6765\u7684\u534f\u8bae\u5347\u7ea7\uff0c\u53ef\u4ee5\u5728\u5347\u7ea7\u5ba2\u6237\u7aef\u7248\u672c\u540c\u65f6\u7ed1\u5b9a\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\u5e76\u8fdb\u884c\u72ec\u7acb\u7684\u6fc0\u6d3b\u6295\u7968\u3002\u8fd9\u5c06\u9884\u7559\u8db3\u591f\u7684\u65f6\u95f4\u8ba9\u8282\u70b9\u5347\u7ea7\u8f6f\u4ef6\u4ee5\u652f\u6301\u65b0\u7684\u534f\u8bae\u3002\u5373\u4f7f\u77ff\u5de5\u6295\u7968\u6fc0\u6d3b\u5931\u8d25\u4e5f\u4e0d\u5f71\u54cd\u73b0\u72b6\u3002<br/>\n>> >\n>> > 1. The activation only requires majority miners signal. As described in\n>> > the paper by Satoshi Nakamoto, 55% miners will be in the longest chain after\n>> > 340 blocks, with 99.9% certainty. This will minimize the possibility of\n>> > delaying network upgrades by controlling a small number of hashing power. We\n>> > can foresee that after 51% signalling, all miners will upgrade within the\n>> > first grace period. <br/>\n>> Technically soft forks can be implemented at 55% hashpower already\n>> without an orphaning period(like BIP16). Those that don't upgrade\n>> would just be at risk of mining invalid blocks. One would not want to\n>> use this method to try and activate a controversial hard fork since\n>> it's trivial for miners to false signal. The orphaning period\n>> effectively forces miners to make a decision but does not necessarily\n>> force them to make a particular decision since they can simply choose\n>> to reject the fork and false signal.\n>> > 2. During the first two grace periods, non-mining nodes will not be\n>> > affected. They have enough time to upgrade their software. <br/>\n>> > 3. Versionbits included in block header, not influencing the SPY mining.\n>> > <br/>\n>> The widely deployed stratum based SPV mining does not really provide a\n>> proper way to validate nversion of the previous block, it only lets\n>> you see the nversion of the current stratum job since you don't get a\n>> full bock header. There's always a risk here that miners build on top\n>> of invalid blocks when SPV mining.\n>> > 4. After two grace periods, all nodes must be upgraded. Otherwise they\n>> > cannot send transactions or get any confirmations. Compared with forming new\n>> > consensus among nodes, the situation is not worse than before. <br/>\n>> Previous consensus changes have largely been done in backwards\n>> compatible ways which lets users opt-in to new features. In general\n>> backwards compatibility is considered a good thing, this seems to make\n>> that worse.\n>> > 5. The ledger in non-mining wallet nodes is honored and reserved. Users\n>> > of off-chain wallet services can decide whether or not to follow the service\n>> > providers after they got the public notification from the service providers.\n>> > <br/>\n>> > 6. Protocol upgrades in the future can be bonded with the upgrades of\n>> > nodes, and the upgrades activate through miners vote independently. There\n>> > would be enough time for nodes to be upgraded in order to support new\n>> > protocols. Even in case of failing in miner activation, the situation will\n>> > not worsen and the status quo will remain. <br/>\n>> >\n>> >\n>> > ==Risks==\n>> >\n>> > 1. \u7b97\u529b\u7684\u6ce2\u52a8\u4f1a\u5f71\u54cd\u6700\u957f\u94fe\u7684\u7ed3\u679c\u3002\u56e0\u6b64\u8d8a\u9ad8\u7684\u6fc0\u6d3b\u6bd4\u4f8b\u8981\u6c42\u5c06\u51cf\u5c11\u77ed\u65f6\u95f4\u5206\u53c9\u7684\u5371\u9669\u3002<br/>\n>> > 2. \u77ff\u5de5\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u907f\u514d\u88ab\u5b64\u7acb\uff0c\u4f46\u5728\u94b1\u5305\u8282\u70b9\u770b\u6765\u65e0\u6cd5\u533a\u5206\u662f\u5426\u662f\u5047\u4fe1\u53f7\uff0c\u53ea\u80fd\u5347\u7ea7\u3002\u800c\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u4e4b\u540e\uff0c\u77ff\u5de5\u4e5f\u5c06\u8ddf\u968f\u3002<br/>\n>> > 3.\n>> > \u94b1\u5305\u8282\u70b9\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u4ec5\u5347\u7ea7\u7248\u672c\u53f7\u800c\u4e0d\u652f\u6301\u7ed1\u5b9a\u7684\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\uff0c\u4f46\u94b1\u5305\u8282\u70b9\u6570\u91cf\u65e0\u6cd5\u5224\u522b\uff0c\u4e25\u8083\u7684\u771f\u5b9e\u8282\u70b9\u5e94\u5f53\u8ddf\u968f\u53ef\u8bc1\u5b9e\u7684\u77ff\u5de5\u6295\u7968\u7ed3\u679c\u3002<br/>\n>> > 4.\n>> > \u5b58\u5728\u5c11\u90e8\u5206\u77ff\u5de5\u548c\u94b1\u5305\u8282\u70b9\u5171\u8c0b\uff0c\u5728\u65b0\u534f\u8bae\u5347\u7ea7\u6fc0\u6d3b\u540e\u4f9d\u7136\u4f7f\u7528\u8001\u534f\u8bae\u6316\u77ff\u7684\u53ef\u80fd\u3002\u8fd9\u79cd\u53ef\u80fd\u968f\u65f6\u53d1\u751f\u65e0\u6cd5\u675c\u7edd\uff0c\u4f46\u901a\u8fc7\u8ba9\u6c89\u9ed8\u7684\u5927\u591a\u6570\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u7684\u65b9\u5f0f\u53ef\u4ee5\u964d\u4f4e\u8fd9\u79cd\u884c\u4e3a\u5e26\u6765\u7684\u5229\u76ca\u3002<br/>\n>> >\n>> > 1. The fluctuation of the hashing power will affect the result of the\n>> > longest chain. Higher activating requirement means a lower risk of temporary\n>> > fork. <br/>\n>> > 2. Miners could simply signal to avoid being orphaned, but from the\n>> > perspective of non-mining wallet nodes, they can't distinguish the false\n>> > signal from the true signal. They must upgrade with the assumption that the\n>> > signals are all true. After all the non-mining nodes have upgraded, the\n>> > miners signalling false signal should follow. <br/>\n>> Miners can simply announce they are false signalling with coinbase\n>> tags and other methods. This activation method would likely not be\n>> viable for controversial changes.\n>> > 3. Non-mining wallet nodes could false signal without supporting the new\n>> > protocol but since the total number of nodes cannot be distinguished,\n>> > genuine nodes should follow the proven result provided by miners vote. <br/>\n>> Users would likely take into account markets and other factors when\n>> deciding what to do, the total number of nodes doesn't really matter\n>> much. Miner signalling is not necessarily indicative of economic and\n>> user support.\n>> > 4. Miners and non-mining nodes could conspire to fork using old protocol\n>> > consensus. It can't be eliminated, just like in the past but through most\n>> > passive non-mining nodes being upgraded, their benefit is reduced. <br/>\n>> >\n>> >\n>> > ==Implementation==\n>> > ___TBD___\n>> >\n>> > _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-06-14T01:08:49",
                "message_text_only": "> and allows for resource requirements\n> that are too high for many users to validate. The block size settings\n> there are effectively placebo controls.\n\nRight, but that's my point.  Any level of control the fullnodes believe\nthey have is effectively a placebo, unless the opposition to the miners is\nessentially unanimous (and maybe not even then, if the chainsplit doesn't\nhave any miners to get to the next difficulty change or gets attacked\nrepeatedly).\n\n> I'm advocating that resource requirements be low\n> enough that full validation remains possible for a large percentage of\n> the economy.\n\nWe're derailed from the main thread at this point, but just wanted to state\nthat I agree in part.  The part I don't agree with is when a single\ntransaction begins to cost more than a month's worth of full validation,\nwhich has already happened at least once last week, the full validation is\non its way to becoming worthless.  The two costs have to be balanced for\nthe coin to have utility for its users.\n\nI agree with the rest.\n\nJared\n\nOn Tue, Jun 13, 2017 at 5:23 PM, James Hilliard <james.hilliard1 at gmail.com>\nwrote:\n\n> On Tue, Jun 13, 2017 at 2:35 PM, Jared Lee Richardson\n> <jaredr26 at gmail.com> wrote:\n> >> Wallet nodes being able to fully validate and choose whether or not to\n> > accept a particular chain is an important part of bitcoins security\n> > model.\n> >\n> > What you're describing is effectively the same as BU.\n>\n> BU by default uses an \"Accept Depth\" parameter which effectively lets\n> miners decide block size rules and allows for resource requirements\n> that are too high for many users to validate. The block size settings\n> there are effectively placebo controls.\n>\n> >\n> > Nodes follow chains, they do not decide the victor.  The average user\n> > follows the default of the software, which is to follow the longest valid\n> > chain.  Forcing the average user to decide which software to run is far\n> more\n> > valuable than allowing \"the software\" to decide things, when in fact all\n> it\n> > will do is decide the previous default.\n>\n> That's largely true that they typically don't decide the victor in\n> soft forks unless they are the ones to activate the rules\n> changes(satoshi did this a few times in the early days), however they\n> make it very difficult for a hard fork to be activated without\n> consent. Yes, I'm not advocating for having runtime consensus settings\n> for nodes either, I'm advocating that resource requirements be low\n> enough that full validation remains possible for a large percentage of\n> the economy.\n>\n> >\n> >> One would not want to\n> >> use this method to try and activate a controversial hard fork since\n> >> it's trivial for miners to false signal. The orphaning period\n> >> effectively forces miners to make a decision but does not necessarily\n> >> force them to make a particular decision\n> >\n> > This is true and a good point.  A false signal from miners could trick\n> the\n> > honest miners into forking off prematurely with a minority.\n>\n> More likely the false signal would be used during the orphaning period\n> to prevent blocks from being orphaned for miners that don't want to\n> follow the fork.\n>\n> >\n> >>  it only lets\n> >> you see the nversion of the current stratum job since you don't get a\n> >> full bock header. There's always a risk here that miners build on top\n> >> of invalid blocks when SPV mining.\n> >\n> > This is the job of the stratum server and the pool operator.  These are\n> > distinct responsibilities; Miners should choose a pool operator in line\n> with\n> > their desires.  Solo mining is basically dead, as it will never again be\n> > practical(and has not been for at least 2 years) for the same hardware\n> that\n> > does the mining to also do full node operation.\n> >\n> > If the pool operator/stratum server also does not do validation, then any\n> > number of problems could occur.\n>\n> Yes, there is a good amount of risk with validationless mining right\n> now here since it's well known that over half of mining pools use\n> validationless mining to some degree. This may not be too bad though\n> due to fallbacks but the risk is probably fairly implementation\n> specific.\n>\n> >\n> >\n> >\n> >\n> > On Mon, Jun 12, 2017 at 10:44 PM, James Hilliard via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >> On Mon, Jun 12, 2017 at 9:23 PM, Zheming Lin via bitcoin-dev\n> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> > The BIP is described using Chinese and English. If any part is missing\n> >> > or need more specific, please reply. Forgive for my poor English.\n> >> >\n> >> > This method will incorporate any upgrade that affects non-mining\n> nodes.\n> >> > They should beware that the rule has been changed.\n> >> >\n> >> > TLDR: Major miners activate and orphan the minor. That ensures all\n> >> > miners upgrades. Then invalid the tx from not upgrading nodes. Nodes\n> must\n> >> > upgrade (with other protocol upgrade codes) in order to work. Then\n> the final\n> >> > miner vote over protocol upgrade, with all nodes has the same upgraded\n> >> > codes.\n> >> >\n> >> > <pre>\n> >> > BIP: ???\n> >> > Title: Demonstration of Phase in Full Network Upgrade Activated by\n> >> > Miners\n> >> > Author: LIN Zheming\n> >> > Status: Draft\n> >> > Type: Standards Track\n> >> > Created: 2017-06-12\n> >> > </pre>\n> >> >\n> >> > ==Summary==\n> >> >\n> >> > \u672c\u65b9\u6cd5\u5e76\u4e0d\u662f\u6765\u6e90\u4e8e\u4e2a\u4eba\uff0c\u800c\u662f\u4e2d\u6587\u6bd4\u7279\u5e01\u793e\u533a\u4e2d\u96c6\u4f53\u667a\u6167\u7684\u7ed3\u679c\u3002<br/>\n> >> > This idea was not created by an individual but is a product of\n> >> > collaboration in the Chinese bitcoin community between different\n> interest\n> >> > groups.<br/>\n> >> >\n> >> > \u8fd9\u662f\u4e00\u79cd\u5728\u534f\u8bae\u5347\u7ea7\u65f6\uff0c\u5bf9\u5168\u7f51\u6316\u77ff\u548c\u975e\u6316\u77ff\u8282\u70b9\u8fdb\u884c\u4fdd\u62a4\u548c\u6fc0\u52b1\u7684\u65b9\u6cd5\uff0c\u907f\u514d\u4e0d\u53c2\u4e0e\u6316\u77ff\u7684\u8282\u70b9\u6ca1\u6709\u5347\u7ea7\u7684\u52a8\u529b\u800c\u53d7\u5230\u635f\u5931\u3002<br/>\n> >> > This method is put forth to incentivize and to protect mining nodes\n> and\n> >> > non-mining nodes during protocol upgrading. With this incentive\n> mechanism,\n> >> > the non-mining nodes will not suffer monetary loss from chain\n> >> > splitting.<br/>\n> >> >\n> >> >\n> >> > \u53d1\u4fe1\u53f7\u7684\u591a\u6570\u77ff\u5de5\u5728\u8fbe\u5230\u6fc0\u6d3b\u6761\u4ef6\u540e\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\uff08\u4e00\u4e2a\u96be\u5ea6\u5468\u671f\uff09\u540e\u8bbe\u7f6e\u65b0\u533a\u5757\u7248\u672c\u53f7\uff0c\u5b64\u7acb\u672a\u5347\u7ea7\u77ff\u5de5\u7684\u4f4e\u7248\u672c\u53f7\u7684\u5757\u3002\n> \u901a\u8fc7\u6700\u521d\u7684\u4e2d\u672c\u806a\u5171\u8bc6\uff0c\u5728\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\u7ed3\u675f\u540e\uff0c\u6240\u6709\u77ff\u5de5\u5c06\u5347\u7ea7\u81f3\u6700\u65b0\u7248\u672c\u6216\u4f7f\u7528\u6700\u65b0\u7248\u672c\u3002\u5728\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f\uff08\u4e00\u4e2a\u96be\u5ea6\u5468\u671f\uff09\u540e\uff0c\u77ff\u5de5\u5c06\u4ec5\u63a5\u53d7\u65b0\u7248\u672c\u7684\u4ea4\u6613\uff0c\n> \u672a\u5347\u7ea7\u7684\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u65e7\u7248\u672c\u4ea4\u6613\u5c06\u65e0\u6cd5\u5f97\u5230\u65b0\u8282\u70b9\u7684\u8f6c\u64ad\u4e5f\u65e0\u6cd5\u8fdb\u5165\u65b0\u7248\u672c\u533a\u5757\u3002\u8fd9\u5c06\u5728\u4fdd\u62a4\u7528\u6237\u8d44\u4ea7\u7684\u540c\u65f6\uff0c\u63d0\u9192\u4e0d\u6316\u77ff\u7684\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u3002\n> \u5e76\u5728\u5347\u7ea7\u4ee3\u7801\u4e2d\u52a0\u5165\u5bf9\u534f\u8bae\u8fdb\u884c\u6539\u52a8\u7684\u90e8\u5206\u3002\u94b1\u5305\u5347\u7ea7\u540e\u5c06\u7531\u6316\u77ff\u8282\u70b9\u6295\u7968\u5b9e\u65bd\u8be5\u9879\u6539\u52a8\uff0c\u4ee5\u8fbe\u6210\u534f\u8bae\u6539\u52a8\u7684\u5e7f\u6cdb\u90e8\u7f72\u3002<br/>\n> >> >\n> >> > After the activation condition is met, majority miners will set a new\n> >> > block versionbits after the first grace period(a difficulty change of\n> 2016\n> >> > blocks). The blocks with lower versionbits will be orphaned. In terms\n> of the\n> >> > Nakamoto Consensus, the end of the first grace period will force all\n> mining\n> >> > nodes upgraded to signal a new version of consensus. After the second\n> grace\n> >> > period ( a difficulty change of 2016 blocks), mining nodes will only\n> accept\n> >> > transactions with new versionbits. Transactions from nodes not\n> upgrading\n> >> > will not be relayed nor included in blocks with new versionbits. This\n> will\n> >> > protect funds of non-mining nodes from utilizing replay attack and\n> will\n> >> > function as a notification for them to upgrade. Codes dealing with\n> protocol\n> >> > upgrade could be included in the upgrade. After the non-mining node\n> >> > upgrades, mining nodes will vote to activate the protocol upgrade and\n> this\n> >> > will achieve the broad/widespread deployment of the protocol\n> upgrade.<br/>\n> >> >\n> >> > \u5728\u8be5\u9879\u6539\u52a8\u5e7f\u6cdb\u90e8\u7f72\u81f3\u5ba2\u6237\u7aef\u4e4b\u540e\uff0c\u4f9d\u7136\u7531\u5176\u6fc0\u6d3b\u6761\u4ef6\u63a7\u5236\u3002<br/>\n> >> > The protocol upgrade depends on its activate condition independently\n> >> > even after the change deployed among nodes.<br/>\n> >> >\n> >> > ==Motivation==\n> >> >\n> >> >\n> >> > \u9274\u4e8e\u6700\u521d\u7684\u6bd4\u7279\u5e01\u534f\u8bae\u5e76\u672a\u8003\u8651\u4e0d\u53c2\u4e0e\u6316\u77ff\u7684\u94b1\u5305\u8282\u70b9\uff0c\u5bfc\u81f4\u8fd9\u4e9b\u94b1\u5305\u8282\u70b9\u7684\u534f\u8bae\u5347\u7ea7\u662f\u88ab\u52a8\u7684\uff0c\u61d2\u60f0\u7684\u3002\n> \u5f53\u5728\u5347\u7ea7\u65b9\u5411\u4e0a\u51fa\u73b0\u5206\u6b67\u65f6\uff0c\u77ff\u5de5\u4e5f\u4e0d\u613f\u610f\u5728\u9519\u8bef\u7684\u94fe\u4e0a\u6316\u77ff\uff0c\u4f46\u77ff\u5de5\u53c8\u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u6b63\u5728\u5ef6\u957f\u7684\u94fe\u662f\u88ab\u94b1\u5305\u8282\u70b9\u5e7f\u6cdb\u63a5\u53d7\n> \u7684\u94fe\u3002\u8fd9\u5c06\u5f71\u54cd\u94b1\u5305\u8282\u70b9\u7684\u5b89\u5168\u3002<br/>\n> >> > In view of the fact that the original Bitcoin consensus did not\n> consider\n> >> > the non-mining wallet nodes(as mentioned above), the result is that\n> >> > upgrading the consensus of these wallet nodes is passive and lazy.\n> When\n> >> > there is disagreement in the direction of the upgrade, the miners\n> have no\n> >> > mechanism to ensure that the chain being extended is the chain widely\n> >> > accepted by the wallet nodes. This also adversely affects the\n> security of\n> >> > the wallet nodes.<br/>\n> >> Wallet nodes being able to fully validate and choose whether or not to\n> >> accept a particular chain is an important part of bitcoins security\n> >> model.\n> >> >\n> >> >\n> >> > \u4f7f\u7528\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5728\u4fdd\u8bc1\u94b1\u5305\u8282\u70b9\u8d44\u4ea7\u5b89\u5168\u7684\u60c5\u51b5\u4e0b\uff0c\u4e14\u901a\u8fc7\u589e\u52a0\u6fc0\u52b1\u8ba9\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u534f\u8bae\u3002\u4e00\u65e6\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u534f\u8bae\uff0c\u4fdd\u8bc1\u77ff\u5de5\u8282\u70b9\u4e0d\u4ec5\u5de5\u4f5c\u5728\u7b97\u529b\u6700\u957f\u94fe\u4e0a\uff0c\n> \u8fd8\u5de5\u4f5c\u5728\u6bd4\u7279\u5e01\u751f\u6001\u73af\u5883\u4e2d\u5176\u4ed6\u94b1\u5305\u8282\u70b9\u6240\u4f7f\u7528\u7684\u6700\u957f\u94fe\u4e0a\u3002\u5728\u4e2d\u672c\u806a\u5171\u8bc6\u4e0b\u4e0d\u4f1a\u51fa\u73b0\u5206\u53c9\uff0c\u4ee5\u5b9e\u73b0\u6e10\u8fdb\u5f0f\u7684\u534f\u8bae\u5347\u7ea7\u3002<br/>\n> >> >\n> >> > Apart from ensuring the asset security of wallet nodes, this method\n> can\n> >> > be used to provide additional incentives to upgrade the protocol for\n> the\n> >> > wallet nodes. Once the wallet nodes upgrade their protocol, the\n> miners'\n> >> > nodes can be guaranteed to work - not only on the longest chain, but\n> also on\n> >> > the longest chain used by other wallet nodes in the broader bitcoin\n> sphere.\n> >> > Under the Nakamoto Consensus, there will be no persistent forks as\n> protocol\n> >> > upgrades can be phased in.<br/>\n> >> There is no way to guarantee a wallet node will accept a particular\n> >> block since that is always up to the user.\n> >> >\n> >> > ==Specification==\n> >> >\n> >> > 1. \u6316\u77ff\u8282\u70b9\u5c06\u4f7f\u7528 versionbits \u7248\u672c\u4f4d\u6765\u5b9a\u4e49\u652f\u6301\u4fe1\u53f7\u3002BIP \u751f\u6548\u65f6\uff0c\u6240\u6709\u533a\u5757\u9700\u8981\u4f7f\u7528\u5236\u5b9a\u7684 nVersion\n> >> > \u6765\u53d1\u9001\u4fe1\u53f7<br/>\n> >> > 2. \u6316\u77ff\u8282\u70b9\u5c06\u4f7f\u7528 tx version \u6765\u5b9a\u4e49\u5f53\u524d\u7684\u4ea4\u6613\u7248\u672c\u3002\u5f53\u524d\u7684 tx version \u662f 1\uff0c\u5c06\u5141\u8bb8 tx version \u4e3a 2\n> >> > \u7684\u4ea4\u6613\uff0c\u5e76\u5728\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f\u4e4b\u540e\uff0c\u4f7f tx version \u4e3a 1 \u7684\u4ea4\u6613\u975e\u6cd5\u3002<br/>\n> >> >\n> >> > 1. Mining nodes signal by setting a version bit. While this BIP is\n> >> > active, all blocks must set the chosen nVersion.<br/>\n> >> > 2. Mining nodes will use tx version to define current version\n> >> > transactions. Current tx version is 1, and tx version 2 will be\n> allowed.\n> >> > After the second grace period, tx version 1 will be regarded as\n> >> > invalid.<br/>\n> >> Sounds like this would cause issues with pre-signed time locked\n> >> transactions.\n> >> >\n> >> >\n> >> > ==Deployment==\n> >> > \u534f\u8bae\u5347\u7ea7\uff0c\u5c06\u5206\u6210\u4e09\u6b65\u9010\u6b65\u5b9e\u65bd\u3002\u5e76\u6709\u4e00\u4e2a\u53ef\u9009\u7684\u7b2c\u56db\u6b65\u6765\u96c6\u6210\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\u3002<br/>\n> >> >\n> >> > Protocol upgrading will phase in over three stages. We can have an\n> >> > optional fourth stage to integrate codes of protocol upgrade.<br/>\n> >> >\n> >> > 1. \u4fe1\u53f7\u9636\u6bb5\u3002\u6316\u77ff\u8282\u70b9\u4f7f\u7528 versionbits \u53d1\u9001\u652f\u6301\u4fe1\u53f7\u3002\u6316\u77ff\u8282\u70b9\u5728\u76d1\u6d4b\u5230 55% \u7684\u533a\u5757\u5373\u524d 1109/2016\n> >> > \u4e2a\u533a\u5757\u5747\u53d1\u9001\u4e86\u76f8\u540c\u7684\u652f\u6301\u4fe1\u53f7\uff0c\u8fdb\u5165\u4e0b\u4e00\u9636\u6bb5\u3002<br/>\n> >> > 2. \u77ff\u5de5\u8282\u70b9\u5347\u7ea7\u3002\u7ecf\u8fc7\u4e86\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f 2016 \u7684\u533a\u5757\u540e\uff0c\u4e14\u603b\u4fe1\u53f7\u533a\u5757\u8d85\u8fc7\u4e86\n> >> > 2218/4032\uff0c\u5c31\u5f00\u59cb\u4f7f\u7528\u65b0\u7684\u533a\u5757\u7248\u672c\u6253\u5305\u533a\u5757\uff0c\u5e76\u540c\u65f6\u5f00\u59cb\u5b64\u7acb\u65e7\u7248\u672c\u3002\u6b64\u65f6\u6240\u6709\u8282\u70b9\u548c\u94b1\u5305\uff0c\n> \u5c06\u53ef\u4ee5\u4f7f\u7528\u65b0\u7248\u672c\u53f7\u53d1\u9001\u4ea4\u6613\uff0c\u540c\u65f6\u517c\u5bb9\u65e7\u7248\u672c\u53f7\u4ea4\u6613\u3002<br/>\n> >> > 3. \u94b1\u5305\u8282\u70b9\u5347\u7ea7\u3002\u5728\u6316\u77ff\u8282\u70b9\u76d1\u6d4b\u5230\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f 4032\n> >> > \u4e2a\u8fde\u7eed\u7684\u65b0\u7248\u672c\u7684\u533a\u5757\u540e\uff0c\u5f00\u59cb\u62d2\u7edd\u65e7\u7248\u672c\u53f7\u7684\u4ea4\u6613\uff0c\u53ea\u6253\u5305\uff0f\u8f6c\u64ad\u65b0\u7248\u672c\u53f7\u7684\u4ea4\u6613\u3002\u540c\u65f6\u5c06\u4ece\u5185\u5b58\u6c60\u4e2d\u5220\u9664\u65e7\u7248\u672c\u53f7\u7684\u4ea4\u6613\u3002<br/>\n> >> > 4.\n> >> > \uff08\u53ef\u9009\u7684\uff09\u534f\u8bae\u5347\u7ea7\u3002\u5728\u7b2c\u4e09\u9636\u6bb5\u4e2d\u5305\u542b\u6709\u7b2c\u56db\u9636\u6bb5\u7684\u5347\u7ea7\u4ee3\u7801\u3002\u5f53\u6211\u4eec\u786e\u4fdd\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u5230\u652f\u6301\u65b0\u7248\u672c\u4ea4\u6613\u540e\uff0c\u5fc5\u7136\u5305\u542b\u4e86\u7b2c\u56db\u9636\u6bb5\u7684\u5347\u7ea7\u4ee3\u7801\u3002\n> \u5219\u6b64\u65f6\u53ef\u4ee5\u901a\u8fc7\u77ff\u5de5\u8282\u70b9\u6295\u7968\u7684\u65b9\u5f0f\u5b8c\u6210\u5168\u7f51\u7edc\u7684\u534f\u8bae\u5347\u7ea7\u3002\n> >> >\n> >> > 1. Signal stage: Mining nodes signal using BIP9. The next stage will\n> be\n> >> > activated after 55% (1109) of 2016 blocks has the signal.<br/>\n> >> >\n> >> > 2. Mining nodes upgrade stage: After a first grace period of 2016\n> blocks\n> >> > and total signalling blocks passed 2218 of 4032 blocks, miners\n> broadcasting\n> >> > blocks with new versionbits in block headers will orphan blocks with\n> old\n> >> > versionbits. At this stage all nodes can send transactions with new\n> >> > versionbits, and transactions with old versionbits will be\n> compatible.<br/>\n> >> >\n> >> > 3. Non-mining nodes upgrade stage: after 4032 continuous blocks with\n> new\n> >> > versionbits, mining nodes will start to refuse transactions with old\n> >> > versionbits. Only transactions with new versionbits can be relayed and\n> >> > included in blocks. Transactions with old versionbits can be safely\n> purged\n> >> > from memory pools.<br/>\n> >> >\n> >> > 4. (Optional)Protocol Upgrade stage: The codes dealing with protocol\n> >> > upgrade can be integrated in the third stage. After the non-mining\n> nodes\n> >> > upgrades to support newer version of transactions, the codes with\n> protocol\n> >> > upgrade must be included and now we can use miner vote to activate and\n> >> > finish this upgrade.<br/>\n> >> >\n> >> > \u81f3\u6b64\uff0c\u534f\u8bae\u5347\u7ea7\u5b8c\u6210\u3002<br/>\n> >> >\n> >> > At this point, the protocol upgrade have phased in.<br/>\n> >> >\n> >> > ==Benefits==\n> >> >\n> >> > 1. \u4ec5\u9700\u8981\u591a\u6570\u7684\u77ff\u5de5\u53d1\u4fe1\u53f7\u540e\u5373\u53ef\u6fc0\u6d3b\u3002\u5728\u4e2d\u672c\u806a\u7684\u6bd4\u7279\u5e01\u8bba\u6587\u4e2d\uff0c99.9% \u7684\u53ef\u80fd\u6027\u4e0b\uff0c55% \u7684\u77ff\u5de5\u5c06\u5728 340\n> >> > \u4e2a\u533a\u5757\u540e\u786e\u4fdd\u6210\u4e3a\u6700\u957f\u94fe\u3002\u8fd9\u5c06\u6700\u5927\u53ef\u80fd\u51cf\u5c0f\u901a\u8fc7\u63a7\u5236\u5c11\u6570\u7b97\u529b\u800c\u62d6\u5ef6\u7f51\u7edc\u5347\u7ea7\u7684\u53ef\u80fd\u6027\u3002\u6211\u4eec\u53ef\u4ee5\u9884\u89c1\u5230\u5728\u7b97\u529b\u4fe1\u53f7\u8d85\u8fc7 51%\n> >> > \u540e\uff0c\u6316\u77ff\u8282\u70b9\u5c06\u8fc5\u901f\u7684\u5728\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\u5185\u8fdb\u884c\u5347\u7ea7\u3002<br/>\n> >> > 2. \u5728\u4e24\u4e2a\u5bbd\u9650\u671f\u5185\uff0c\u94b1\u5305\u8282\u70b9\u4ea4\u6613\u4e0d\u53d7\u5f71\u54cd\uff0c\u6709\u8db3\u591f\u7684\u65f6\u95f4\u5347\u7ea7\u94b1\u5305\u8f6f\u4ef6\u3002<br/>\n> >> > 3. \u7248\u672c\u4fe1\u606f\u5305\u542b\u5728 block header \u4e2d\uff0c\u5e76\u4e0d\u5f71\u54cd SPV \u6316\u77ff\u8fc7\u7a0b\u3002\uff08\u770b\u8d77\u6765\u662f\uff1f\uff09<br/>\n> >> > 4.\n> >> > \u5728\u4e24\u4e2a\u5bbd\u9650\u671f\u540e\uff0c\u94b1\u5305\u8282\u70b9\u5c06\u5fc5\u987b\u5347\u7ea7\u94b1\u5305\uff0c\u5426\u5219\u56e0\u6ca1\u6709\u7b97\u529b\u652f\u6301\u5c06\u65e0\u6cd5\u53d1\u9001\u4ea4\u6613\uff0c\u4e5f\u65e0\u6cd5\u786e\u8ba4\u3002\n> \u76f8\u5bf9\u4e8e\u5728\u8282\u70b9\u95f4\u91cd\u65b0\u8fbe\u6210\u65b0\u7684\u5171\u8bc6\uff0c\u8fd9\u79cd\u72b6\u51b5\u5e76\u6ca1\u6709\u66f4\u7cdf\u7cd5\u3002<br/>\n> >> > 5. \u94b1\u5305\u8282\u70b9\u7684\u8d26\u672c\u5c06\u5f97\u5230\u5c0a\u91cd\u548c\u4fdd\u62a4\u3002\u4f7f\u7528\u94fe\u4e0b\u94b1\u5305\u7684\u7528\u6237\u5c06\u9700\u8981\u5728\u94b1\u5305\u670d\u52a1\u63d0\u4f9b\u5546\u7684\u58f0\u660e\u4e4b\u540e\u51b3\u5b9a\u63d0\u81f3\u94fe\u4e0a\u94b1\u5305\u6216\u8ddf\u968f\u3002<br/>\n> >> > 6.\n> >> > \u5c06\u6765\u7684\u534f\u8bae\u5347\u7ea7\uff0c\u53ef\u4ee5\u5728\u5347\u7ea7\u5ba2\u6237\u7aef\u7248\u672c\u540c\u65f6\u7ed1\u5b9a\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\u5e76\u8fdb\u884c\u72ec\u7acb\u7684\u6fc0\u6d3b\u6295\u7968\u3002\u8fd9\u5c06\u9884\u7559\u8db3\u591f\u7684\u65f6\u95f4\u8ba9\u8282\u70b9\u5347\u7ea7\u8f6f\u4ef6\u4ee5\u652f\u6301\u65b0\u7684\u534f\u8bae\u3002\n> \u5373\u4f7f\u77ff\u5de5\u6295\u7968\u6fc0\u6d3b\u5931\u8d25\u4e5f\u4e0d\u5f71\u54cd\u73b0\u72b6\u3002<br/>\n> >> >\n> >> > 1. The activation only requires majority miners signal. As described\n> in\n> >> > the paper by Satoshi Nakamoto, 55% miners will be in the longest\n> chain after\n> >> > 340 blocks, with 99.9% certainty. This will minimize the possibility\n> of\n> >> > delaying network upgrades by controlling a small number of hashing\n> power. We\n> >> > can foresee that after 51% signalling, all miners will upgrade within\n> the\n> >> > first grace period. <br/>\n> >> Technically soft forks can be implemented at 55% hashpower already\n> >> without an orphaning period(like BIP16). Those that don't upgrade\n> >> would just be at risk of mining invalid blocks. One would not want to\n> >> use this method to try and activate a controversial hard fork since\n> >> it's trivial for miners to false signal. The orphaning period\n> >> effectively forces miners to make a decision but does not necessarily\n> >> force them to make a particular decision since they can simply choose\n> >> to reject the fork and false signal.\n> >> > 2. During the first two grace periods, non-mining nodes will not be\n> >> > affected. They have enough time to upgrade their software. <br/>\n> >> > 3. Versionbits included in block header, not influencing the SPY\n> mining.\n> >> > <br/>\n> >> The widely deployed stratum based SPV mining does not really provide a\n> >> proper way to validate nversion of the previous block, it only lets\n> >> you see the nversion of the current stratum job since you don't get a\n> >> full bock header. There's always a risk here that miners build on top\n> >> of invalid blocks when SPV mining.\n> >> > 4. After two grace periods, all nodes must be upgraded. Otherwise they\n> >> > cannot send transactions or get any confirmations. Compared with\n> forming new\n> >> > consensus among nodes, the situation is not worse than before. <br/>\n> >> Previous consensus changes have largely been done in backwards\n> >> compatible ways which lets users opt-in to new features. In general\n> >> backwards compatibility is considered a good thing, this seems to make\n> >> that worse.\n> >> > 5. The ledger in non-mining wallet nodes is honored and reserved.\n> Users\n> >> > of off-chain wallet services can decide whether or not to follow the\n> service\n> >> > providers after they got the public notification from the service\n> providers.\n> >> > <br/>\n> >> > 6. Protocol upgrades in the future can be bonded with the upgrades of\n> >> > nodes, and the upgrades activate through miners vote independently.\n> There\n> >> > would be enough time for nodes to be upgraded in order to support new\n> >> > protocols. Even in case of failing in miner activation, the situation\n> will\n> >> > not worsen and the status quo will remain. <br/>\n> >> >\n> >> >\n> >> > ==Risks==\n> >> >\n> >> > 1. \u7b97\u529b\u7684\u6ce2\u52a8\u4f1a\u5f71\u54cd\u6700\u957f\u94fe\u7684\u7ed3\u679c\u3002\u56e0\u6b64\u8d8a\u9ad8\u7684\u6fc0\u6d3b\u6bd4\u4f8b\u8981\u6c42\u5c06\u51cf\u5c11\u77ed\u65f6\u95f4\u5206\u53c9\u7684\u5371\u9669\u3002<br/>\n> >> > 2. \u77ff\u5de5\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u907f\u514d\u88ab\u5b64\u7acb\uff0c\u4f46\u5728\u94b1\u5305\u8282\u70b9\u770b\u6765\u65e0\u6cd5\u533a\u5206\u662f\u5426\u662f\u5047\u4fe1\u53f7\uff0c\u53ea\u80fd\u5347\u7ea7\u3002\u800c\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u4e4b\u540e\uff0c\u77ff\u5de5\u4e5f\u5c06\u8ddf\u968f\u3002<br/>\n> >> > 3.\n> >> > \u94b1\u5305\u8282\u70b9\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u4ec5\u5347\u7ea7\u7248\u672c\u53f7\u800c\u4e0d\u652f\u6301\u7ed1\u5b9a\u7684\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\uff0c\u4f46\u94b1\u5305\u8282\u70b9\u6570\u91cf\u65e0\u6cd5\u5224\u522b\uff0c\n> \u4e25\u8083\u7684\u771f\u5b9e\u8282\u70b9\u5e94\u5f53\u8ddf\u968f\u53ef\u8bc1\u5b9e\u7684\u77ff\u5de5\u6295\u7968\u7ed3\u679c\u3002<br/>\n> >> > 4.\n> >> > \u5b58\u5728\u5c11\u90e8\u5206\u77ff\u5de5\u548c\u94b1\u5305\u8282\u70b9\u5171\u8c0b\uff0c\u5728\u65b0\u534f\u8bae\u5347\u7ea7\u6fc0\u6d3b\u540e\u4f9d\u7136\u4f7f\u7528\u8001\u534f\u8bae\u6316\u77ff\u7684\u53ef\u80fd\u3002\u8fd9\u79cd\u53ef\u80fd\u968f\u65f6\u53d1\u751f\u65e0\u6cd5\u675c\u7edd\uff0c\n> \u4f46\u901a\u8fc7\u8ba9\u6c89\u9ed8\u7684\u5927\u591a\u6570\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u7684\u65b9\u5f0f\u53ef\u4ee5\u964d\u4f4e\u8fd9\u79cd\u884c\u4e3a\u5e26\u6765\u7684\u5229\u76ca\u3002<br/>\n> >> >\n> >> > 1. The fluctuation of the hashing power will affect the result of the\n> >> > longest chain. Higher activating requirement means a lower risk of\n> temporary\n> >> > fork. <br/>\n> >> > 2. Miners could simply signal to avoid being orphaned, but from the\n> >> > perspective of non-mining wallet nodes, they can't distinguish the\n> false\n> >> > signal from the true signal. They must upgrade with the assumption\n> that the\n> >> > signals are all true. After all the non-mining nodes have upgraded,\n> the\n> >> > miners signalling false signal should follow. <br/>\n> >> Miners can simply announce they are false signalling with coinbase\n> >> tags and other methods. This activation method would likely not be\n> >> viable for controversial changes.\n> >> > 3. Non-mining wallet nodes could false signal without supporting the\n> new\n> >> > protocol but since the total number of nodes cannot be distinguished,\n> >> > genuine nodes should follow the proven result provided by miners\n> vote. <br/>\n> >> Users would likely take into account markets and other factors when\n> >> deciding what to do, the total number of nodes doesn't really matter\n> >> much. Miner signalling is not necessarily indicative of economic and\n> >> user support.\n> >> > 4. Miners and non-mining nodes could conspire to fork using old\n> protocol\n> >> > consensus. It can't be eliminated, just like in the past but through\n> most\n> >> > passive non-mining nodes being upgraded, their benefit is reduced.\n> <br/>\n> >> >\n> >> >\n> >> > ==Implementation==\n> >> > ___TBD___\n> >> >\n> >> > _______________________________________________\n> >> > bitcoin-dev mailing list\n> >> > bitcoin-dev at lists.linuxfoundation.org\n> >> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >> _______________________________________________\n> >> bitcoin-dev mailing list\n> >> bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170613/825eb1cb/attachment-0001.html>"
            },
            {
                "author": "Zheming Lin",
                "date": "2017-06-13T08:24:41",
                "message_text_only": "Hi all the developers:\n\nI must clarify that despite the general ideas comes from discussions with others. The opinion in replies are only limited to my self.\n\nThe old TXs can be re-enable after the fourth stage and just like **nothing happened** with the grace periods. The code can be provided with the protocol upgrade voting. At the end of the vote, either success or failed, we can have old TXs work again. It\u2019s like after a long time that the block jammed. I think nobody get harmed (Is there? I\u2019m not so sure about that), that\u2019s the purpose.\n\nThank you for your time and kindly replies. Your opinions are more than welcome.\n\nLIN Zheming\n\n> \u5728 2017\u5e746\u670813\u65e5\uff0c10:23\uff0cZheming Lin <heater at gmail.com> \u5199\u9053\uff1a\n> \n> The BIP is described using Chinese and English. If any part is missing or need more specific, please reply. Forgive for my poor English.\n> \n> This method will incorporate any upgrade that affects non-mining nodes. They should beware that the rule has been changed.\n> \n> TLDR: Major miners activate and orphan the minor. That ensures all miners upgrades. Then invalid the tx from not upgrading nodes. Nodes must upgrade (with other protocol upgrade codes) in order to work. Then the final miner vote over protocol upgrade, with all nodes has the same upgraded codes.\n> \n> <pre>\n> BIP: ???\n> Title: Demonstration of Phase in Full Network Upgrade Activated by Miners\n> Author: LIN Zheming\n> Status: Draft\n> Type: Standards Track\n> Created: 2017-06-12\n> </pre>\n> \n> ==Summary==\n> \n> \u672c\u65b9\u6cd5\u5e76\u4e0d\u662f\u6765\u6e90\u4e8e\u4e2a\u4eba\uff0c\u800c\u662f\u4e2d\u6587\u6bd4\u7279\u5e01\u793e\u533a\u4e2d\u96c6\u4f53\u667a\u6167\u7684\u7ed3\u679c\u3002<br/>\n> This idea was not created by an individual but is a product of collaboration in the Chinese bitcoin community between different interest groups.<br/>\n> \n> \u8fd9\u662f\u4e00\u79cd\u5728\u534f\u8bae\u5347\u7ea7\u65f6\uff0c\u5bf9\u5168\u7f51\u6316\u77ff\u548c\u975e\u6316\u77ff\u8282\u70b9\u8fdb\u884c\u4fdd\u62a4\u548c\u6fc0\u52b1\u7684\u65b9\u6cd5\uff0c\u907f\u514d\u4e0d\u53c2\u4e0e\u6316\u77ff\u7684\u8282\u70b9\u6ca1\u6709\u5347\u7ea7\u7684\u52a8\u529b\u800c\u53d7\u5230\u635f\u5931\u3002<br/>\n> This method is put forth to incentivize and to protect mining nodes and non-mining nodes during protocol upgrading. With this incentive mechanism, the non-mining nodes will not suffer monetary loss from chain splitting.<br/>\n> \n> \u53d1\u4fe1\u53f7\u7684\u591a\u6570\u77ff\u5de5\u5728\u8fbe\u5230\u6fc0\u6d3b\u6761\u4ef6\u540e\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\uff08\u4e00\u4e2a\u96be\u5ea6\u5468\u671f\uff09\u540e\u8bbe\u7f6e\u65b0\u533a\u5757\u7248\u672c\u53f7\uff0c\u5b64\u7acb\u672a\u5347\u7ea7\u77ff\u5de5\u7684\u4f4e\u7248\u672c\u53f7\u7684\u5757\u3002\u901a\u8fc7\u6700\u521d\u7684\u4e2d\u672c\u806a\u5171\u8bc6\uff0c\u5728\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\u7ed3\u675f\u540e\uff0c\u6240\u6709\u77ff\u5de5\u5c06\u5347\u7ea7\u81f3\u6700\u65b0\u7248\u672c\u6216\u4f7f\u7528\u6700\u65b0\u7248\u672c\u3002\u5728\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f\uff08\u4e00\u4e2a\u96be\u5ea6\u5468\u671f\uff09\u540e\uff0c\u77ff\u5de5\u5c06\u4ec5\u63a5\u53d7\u65b0\u7248\u672c\u7684\u4ea4\u6613\uff0c\u672a\u5347\u7ea7\u7684\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u65e7\u7248\u672c\u4ea4\u6613\u5c06\u65e0\u6cd5\u5f97\u5230\u65b0\u8282\u70b9\u7684\u8f6c\u64ad\u4e5f\u65e0\u6cd5\u8fdb\u5165\u65b0\u7248\u672c\u533a\u5757\u3002\u8fd9\u5c06\u5728\u4fdd\u62a4\u7528\u6237\u8d44\u4ea7\u7684\u540c\u65f6\uff0c\u63d0\u9192\u4e0d\u6316\u77ff\u7684\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u3002\u5e76\u5728\u5347\u7ea7\u4ee3\u7801\u4e2d\u52a0\u5165\u5bf9\u534f\u8bae\u8fdb\u884c\u6539\u52a8\u7684\u90e8\u5206\u3002\u94b1\u5305\u5347\u7ea7\u540e\u5c06\u7531\u6316\u77ff\u8282\u70b9\u6295\u7968\u5b9e\u65bd\u8be5\u9879\u6539\u52a8\uff0c\u4ee5\u8fbe\u6210\u534f\u8bae\u6539\u52a8\u7684\u5e7f\u6cdb\u90e8\u7f72\u3002<br/>\n> \n> After the activation condition is met, majority miners will set a new block versionbits after the first grace period(a difficulty change of 2016 blocks). The blocks with lower versionbits will be orphaned. In terms of the Nakamoto Consensus, the end of the first grace period will force all mining nodes upgraded to signal a new version of consensus. After the second grace period ( a difficulty change of 2016 blocks), mining nodes will only accept transactions with new versionbits. Transactions from nodes not upgrading will not be relayed nor included in blocks with new versionbits. This will protect funds of non-mining nodes from utilizing replay attack and will function as a notification for them to upgrade. Codes dealing with protocol upgrade could be included in the upgrade. After the non-mining node upgrades, mining nodes will vote to activate the protocol upgrade and this will achieve the broad/widespread deployment of the protocol upgrade.<br/>\n> \n> \u5728\u8be5\u9879\u6539\u52a8\u5e7f\u6cdb\u90e8\u7f72\u81f3\u5ba2\u6237\u7aef\u4e4b\u540e\uff0c\u4f9d\u7136\u7531\u5176\u6fc0\u6d3b\u6761\u4ef6\u63a7\u5236\u3002<br/>\n> The protocol upgrade depends on its activate condition independently even after the change deployed among nodes.<br/>\n> \n> ==Motivation==\n> \n> \u9274\u4e8e\u6700\u521d\u7684\u6bd4\u7279\u5e01\u534f\u8bae\u5e76\u672a\u8003\u8651\u4e0d\u53c2\u4e0e\u6316\u77ff\u7684\u94b1\u5305\u8282\u70b9\uff0c\u5bfc\u81f4\u8fd9\u4e9b\u94b1\u5305\u8282\u70b9\u7684\u534f\u8bae\u5347\u7ea7\u662f\u88ab\u52a8\u7684\uff0c\u61d2\u60f0\u7684\u3002\u5f53\u5728\u5347\u7ea7\u65b9\u5411\u4e0a\u51fa\u73b0\u5206\u6b67\u65f6\uff0c\u77ff\u5de5\u4e5f\u4e0d\u613f\u610f\u5728\u9519\u8bef\u7684\u94fe\u4e0a\u6316\u77ff\uff0c\u4f46\u77ff\u5de5\u53c8\u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u6b63\u5728\u5ef6\u957f\u7684\u94fe\u662f\u88ab\u94b1\u5305\u8282\u70b9\u5e7f\u6cdb\u63a5\u53d7\u7684\u94fe\u3002\u8fd9\u5c06\u5f71\u54cd\u94b1\u5305\u8282\u70b9\u7684\u5b89\u5168\u3002<br/>\n> In view of the fact that the original Bitcoin consensus did not consider the non-mining wallet nodes(as mentioned above), the result is that upgrading the consensus of these wallet nodes is passive and lazy. When there is disagreement in the direction of the upgrade, the miners have no mechanism to ensure that the chain being extended is the chain widely accepted by the wallet nodes. This also adversely affects the security of the wallet nodes.<br/>\n> \n> \u4f7f\u7528\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5728\u4fdd\u8bc1\u94b1\u5305\u8282\u70b9\u8d44\u4ea7\u5b89\u5168\u7684\u60c5\u51b5\u4e0b\uff0c\u4e14\u901a\u8fc7\u589e\u52a0\u6fc0\u52b1\u8ba9\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u534f\u8bae\u3002\u4e00\u65e6\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u534f\u8bae\uff0c\u4fdd\u8bc1\u77ff\u5de5\u8282\u70b9\u4e0d\u4ec5\u5de5\u4f5c\u5728\u7b97\u529b\u6700\u957f\u94fe\u4e0a\uff0c\u8fd8\u5de5\u4f5c\u5728\u6bd4\u7279\u5e01\u751f\u6001\u73af\u5883\u4e2d\u5176\u4ed6\u94b1\u5305\u8282\u70b9\u6240\u4f7f\u7528\u7684\u6700\u957f\u94fe\u4e0a\u3002\u5728\u4e2d\u672c\u806a\u5171\u8bc6\u4e0b\u4e0d\u4f1a\u51fa\u73b0\u5206\u53c9\uff0c\u4ee5\u5b9e\u73b0\u6e10\u8fdb\u5f0f\u7684\u534f\u8bae\u5347\u7ea7\u3002<br/>\n> \n> Apart from ensuring the asset security of wallet nodes, this method can be used to provide additional incentives to upgrade the protocol for the wallet nodes. Once the wallet nodes upgrade their protocol, the miners' nodes can be guaranteed to work - not only on the longest chain, but also on the longest chain used by other wallet nodes in the broader bitcoin sphere. Under the Nakamoto Consensus, there will be no persistent forks as protocol upgrades can be phased in.<br/>\n> \n> ==Specification==\n> \n> 1. \u6316\u77ff\u8282\u70b9\u5c06\u4f7f\u7528 versionbits \u7248\u672c\u4f4d\u6765\u5b9a\u4e49\u652f\u6301\u4fe1\u53f7\u3002BIP \u751f\u6548\u65f6\uff0c\u6240\u6709\u533a\u5757\u9700\u8981\u4f7f\u7528\u5236\u5b9a\u7684 nVersion \u6765\u53d1\u9001\u4fe1\u53f7<br/>\n> 2. \u6316\u77ff\u8282\u70b9\u5c06\u4f7f\u7528 tx version \u6765\u5b9a\u4e49\u5f53\u524d\u7684\u4ea4\u6613\u7248\u672c\u3002\u5f53\u524d\u7684 tx version \u662f 1\uff0c\u5c06\u5141\u8bb8 tx version \u4e3a 2 \u7684\u4ea4\u6613\uff0c\u5e76\u5728\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f\u4e4b\u540e\uff0c\u4f7f tx version \u4e3a 1 \u7684\u4ea4\u6613\u975e\u6cd5\u3002<br/>\n> \n> 1. Mining nodes signal by setting a version bit. While this BIP is active, all blocks must set the chosen nVersion.<br/>\n> 2. Mining nodes will use tx version to define current version transactions. Current tx version is 1, and tx version 2 will be allowed. After the second grace period, tx version 1 will be regarded as invalid.<br/>\n> \n> \n> ==Deployment==\n> \u534f\u8bae\u5347\u7ea7\uff0c\u5c06\u5206\u6210\u4e09\u6b65\u9010\u6b65\u5b9e\u65bd\u3002\u5e76\u6709\u4e00\u4e2a\u53ef\u9009\u7684\u7b2c\u56db\u6b65\u6765\u96c6\u6210\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\u3002<br/>\n> \n> Protocol upgrading will phase in over three stages. We can have an optional fourth stage to integrate codes of protocol upgrade.<br/>\n> \n> 1. \u4fe1\u53f7\u9636\u6bb5\u3002\u6316\u77ff\u8282\u70b9\u4f7f\u7528 versionbits \u53d1\u9001\u652f\u6301\u4fe1\u53f7\u3002\u6316\u77ff\u8282\u70b9\u5728\u76d1\u6d4b\u5230 55% \u7684\u533a\u5757\u5373\u524d 1109/2016 \u4e2a\u533a\u5757\u5747\u53d1\u9001\u4e86\u76f8\u540c\u7684\u652f\u6301\u4fe1\u53f7\uff0c\u8fdb\u5165\u4e0b\u4e00\u9636\u6bb5\u3002<br/>\n> 2. \u77ff\u5de5\u8282\u70b9\u5347\u7ea7\u3002\u7ecf\u8fc7\u4e86\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f 2016 \u7684\u533a\u5757\u540e\uff0c\u4e14\u603b\u4fe1\u53f7\u533a\u5757\u8d85\u8fc7\u4e86 2218/4032\uff0c\u5c31\u5f00\u59cb\u4f7f\u7528\u65b0\u7684\u533a\u5757\u7248\u672c\u6253\u5305\u533a\u5757\uff0c\u5e76\u540c\u65f6\u5f00\u59cb\u5b64\u7acb\u65e7\u7248\u672c\u3002\u6b64\u65f6\u6240\u6709\u8282\u70b9\u548c\u94b1\u5305\uff0c\u5c06\u53ef\u4ee5\u4f7f\u7528\u65b0\u7248\u672c\u53f7\u53d1\u9001\u4ea4\u6613\uff0c\u540c\u65f6\u517c\u5bb9\u65e7\u7248\u672c\u53f7\u4ea4\u6613\u3002<br/>\n> 3. \u94b1\u5305\u8282\u70b9\u5347\u7ea7\u3002\u5728\u6316\u77ff\u8282\u70b9\u76d1\u6d4b\u5230\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f 4032 \u4e2a\u8fde\u7eed\u7684\u65b0\u7248\u672c\u7684\u533a\u5757\u540e\uff0c\u5f00\u59cb\u62d2\u7edd\u65e7\u7248\u672c\u53f7\u7684\u4ea4\u6613\uff0c\u53ea\u6253\u5305\uff0f\u8f6c\u64ad\u65b0\u7248\u672c\u53f7\u7684\u4ea4\u6613\u3002\u540c\u65f6\u5c06\u4ece\u5185\u5b58\u6c60\u4e2d\u5220\u9664\u65e7\u7248\u672c\u53f7\u7684\u4ea4\u6613\u3002<br/>\n> 4. \uff08\u53ef\u9009\u7684\uff09\u534f\u8bae\u5347\u7ea7\u3002\u5728\u7b2c\u4e09\u9636\u6bb5\u4e2d\u5305\u542b\u6709\u7b2c\u56db\u9636\u6bb5\u7684\u5347\u7ea7\u4ee3\u7801\u3002\u5f53\u6211\u4eec\u786e\u4fdd\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u5230\u652f\u6301\u65b0\u7248\u672c\u4ea4\u6613\u540e\uff0c\u5fc5\u7136\u5305\u542b\u4e86\u7b2c\u56db\u9636\u6bb5\u7684\u5347\u7ea7\u4ee3\u7801\u3002\u5219\u6b64\u65f6\u53ef\u4ee5\u901a\u8fc7\u77ff\u5de5\u8282\u70b9\u6295\u7968\u7684\u65b9\u5f0f\u5b8c\u6210\u5168\u7f51\u7edc\u7684\u534f\u8bae\u5347\u7ea7\u3002\n> \n> 1. Signal stage: Mining nodes signal using BIP9. The next stage will be activated after 55% (1109) of 2016 blocks has the signal.<br/>\n> \n> 2. Mining nodes upgrade stage: After a first grace period of 2016 blocks and total signalling blocks passed 2218 of 4032 blocks, miners broadcasting blocks with new versionbits in block headers will orphan blocks with old versionbits. At this stage all nodes can send transactions with new versionbits, and transactions with old versionbits will be compatible.<br/>\n> \n> 3. Non-mining nodes upgrade stage: after 4032 continuous blocks with new versionbits, mining nodes will start to refuse transactions with old versionbits. Only transactions with new versionbits can be relayed and included in blocks. Transactions with old versionbits can be safely purged from memory pools.<br/>\n> \n> 4. (Optional)Protocol Upgrade stage: The codes dealing with protocol upgrade can be integrated in the third stage. After the non-mining nodes upgrades to support newer version of transactions, the codes with protocol upgrade must be included and now we can use miner vote to activate and finish this upgrade.<br/>\n> \n> \u81f3\u6b64\uff0c\u534f\u8bae\u5347\u7ea7\u5b8c\u6210\u3002<br/>\n> \n> At this point, the protocol upgrade have phased in.<br/>\n> \n> ==Benefits==\n> \n> 1. \u4ec5\u9700\u8981\u591a\u6570\u7684\u77ff\u5de5\u53d1\u4fe1\u53f7\u540e\u5373\u53ef\u6fc0\u6d3b\u3002\u5728\u4e2d\u672c\u806a\u7684\u6bd4\u7279\u5e01\u8bba\u6587\u4e2d\uff0c99.9% \u7684\u53ef\u80fd\u6027\u4e0b\uff0c55% \u7684\u77ff\u5de5\u5c06\u5728 340 \u4e2a\u533a\u5757\u540e\u786e\u4fdd\u6210\u4e3a\u6700\u957f\u94fe\u3002\u8fd9\u5c06\u6700\u5927\u53ef\u80fd\u51cf\u5c0f\u901a\u8fc7\u63a7\u5236\u5c11\u6570\u7b97\u529b\u800c\u62d6\u5ef6\u7f51\u7edc\u5347\u7ea7\u7684\u53ef\u80fd\u6027\u3002\u6211\u4eec\u53ef\u4ee5\u9884\u89c1\u5230\u5728\u7b97\u529b\u4fe1\u53f7\u8d85\u8fc7 51% \u540e\uff0c\u6316\u77ff\u8282\u70b9\u5c06\u8fc5\u901f\u7684\u5728\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\u5185\u8fdb\u884c\u5347\u7ea7\u3002<br/>\n> 2. \u5728\u4e24\u4e2a\u5bbd\u9650\u671f\u5185\uff0c\u94b1\u5305\u8282\u70b9\u4ea4\u6613\u4e0d\u53d7\u5f71\u54cd\uff0c\u6709\u8db3\u591f\u7684\u65f6\u95f4\u5347\u7ea7\u94b1\u5305\u8f6f\u4ef6\u3002<br/>\n> 3. \u7248\u672c\u4fe1\u606f\u5305\u542b\u5728 block header \u4e2d\uff0c\u5e76\u4e0d\u5f71\u54cd SPV \u6316\u77ff\u8fc7\u7a0b\u3002\uff08\u770b\u8d77\u6765\u662f\uff1f\uff09<br/>\n> 4. \u5728\u4e24\u4e2a\u5bbd\u9650\u671f\u540e\uff0c\u94b1\u5305\u8282\u70b9\u5c06\u5fc5\u987b\u5347\u7ea7\u94b1\u5305\uff0c\u5426\u5219\u56e0\u6ca1\u6709\u7b97\u529b\u652f\u6301\u5c06\u65e0\u6cd5\u53d1\u9001\u4ea4\u6613\uff0c\u4e5f\u65e0\u6cd5\u786e\u8ba4\u3002\u76f8\u5bf9\u4e8e\u5728\u8282\u70b9\u95f4\u91cd\u65b0\u8fbe\u6210\u65b0\u7684\u5171\u8bc6\uff0c\u8fd9\u79cd\u72b6\u51b5\u5e76\u6ca1\u6709\u66f4\u7cdf\u7cd5\u3002<br/>\n> 5. \u94b1\u5305\u8282\u70b9\u7684\u8d26\u672c\u5c06\u5f97\u5230\u5c0a\u91cd\u548c\u4fdd\u62a4\u3002\u4f7f\u7528\u94fe\u4e0b\u94b1\u5305\u7684\u7528\u6237\u5c06\u9700\u8981\u5728\u94b1\u5305\u670d\u52a1\u63d0\u4f9b\u5546\u7684\u58f0\u660e\u4e4b\u540e\u51b3\u5b9a\u63d0\u81f3\u94fe\u4e0a\u94b1\u5305\u6216\u8ddf\u968f\u3002<br/>\n> 6. \u5c06\u6765\u7684\u534f\u8bae\u5347\u7ea7\uff0c\u53ef\u4ee5\u5728\u5347\u7ea7\u5ba2\u6237\u7aef\u7248\u672c\u540c\u65f6\u7ed1\u5b9a\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\u5e76\u8fdb\u884c\u72ec\u7acb\u7684\u6fc0\u6d3b\u6295\u7968\u3002\u8fd9\u5c06\u9884\u7559\u8db3\u591f\u7684\u65f6\u95f4\u8ba9\u8282\u70b9\u5347\u7ea7\u8f6f\u4ef6\u4ee5\u652f\u6301\u65b0\u7684\u534f\u8bae\u3002\u5373\u4f7f\u77ff\u5de5\u6295\u7968\u6fc0\u6d3b\u5931\u8d25\u4e5f\u4e0d\u5f71\u54cd\u73b0\u72b6\u3002<br/>\n> \n> 1. The activation only requires majority miners signal. As described in the paper by Satoshi Nakamoto, 55% miners will be in the longest chain after 340 blocks, with 99.9% certainty. This will minimize the possibility of delaying network upgrades by controlling a small number of hashing power. We can foresee that after 51% signalling, all miners will upgrade within the first grace period. <br/>\n> 2. During the first two grace periods, non-mining nodes will not be affected. They have enough time to upgrade their software. <br/>\n> 3. Versionbits included in block header, not influencing the SPY mining. <br/>\n> 4. After two grace periods, all nodes must be upgraded. Otherwise they cannot send transactions or get any confirmations. Compared with forming new consensus among nodes, the situation is not worse than before. <br/>\n> 5. The ledger in non-mining wallet nodes is honored and reserved. Users of off-chain wallet services can decide whether or not to follow the service providers after they got the public notification from the service providers. <br/>\n> 6. Protocol upgrades in the future can be bonded with the upgrades of nodes, and the upgrades activate through miners vote independently. There would be enough time for nodes to be upgraded in order to support new protocols. Even in case of failing in miner activation, the situation will not worsen and the status quo will remain. <br/>\n> \n> \n> ==Risks==\n> \n> 1. \u7b97\u529b\u7684\u6ce2\u52a8\u4f1a\u5f71\u54cd\u6700\u957f\u94fe\u7684\u7ed3\u679c\u3002\u56e0\u6b64\u8d8a\u9ad8\u7684\u6fc0\u6d3b\u6bd4\u4f8b\u8981\u6c42\u5c06\u51cf\u5c11\u77ed\u65f6\u95f4\u5206\u53c9\u7684\u5371\u9669\u3002<br/>\n> 2. \u77ff\u5de5\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u907f\u514d\u88ab\u5b64\u7acb\uff0c\u4f46\u5728\u94b1\u5305\u8282\u70b9\u770b\u6765\u65e0\u6cd5\u533a\u5206\u662f\u5426\u662f\u5047\u4fe1\u53f7\uff0c\u53ea\u80fd\u5347\u7ea7\u3002\u800c\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u4e4b\u540e\uff0c\u77ff\u5de5\u4e5f\u5c06\u8ddf\u968f\u3002<br/>\n> 3. \u94b1\u5305\u8282\u70b9\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u4ec5\u5347\u7ea7\u7248\u672c\u53f7\u800c\u4e0d\u652f\u6301\u7ed1\u5b9a\u7684\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\uff0c\u4f46\u94b1\u5305\u8282\u70b9\u6570\u91cf\u65e0\u6cd5\u5224\u522b\uff0c\u4e25\u8083\u7684\u771f\u5b9e\u8282\u70b9\u5e94\u5f53\u8ddf\u968f\u53ef\u8bc1\u5b9e\u7684\u77ff\u5de5\u6295\u7968\u7ed3\u679c\u3002<br/>\n> 4. \u5b58\u5728\u5c11\u90e8\u5206\u77ff\u5de5\u548c\u94b1\u5305\u8282\u70b9\u5171\u8c0b\uff0c\u5728\u65b0\u534f\u8bae\u5347\u7ea7\u6fc0\u6d3b\u540e\u4f9d\u7136\u4f7f\u7528\u8001\u534f\u8bae\u6316\u77ff\u7684\u53ef\u80fd\u3002\u8fd9\u79cd\u53ef\u80fd\u968f\u65f6\u53d1\u751f\u65e0\u6cd5\u675c\u7edd\uff0c\u4f46\u901a\u8fc7\u8ba9\u6c89\u9ed8\u7684\u5927\u591a\u6570\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u7684\u65b9\u5f0f\u53ef\u4ee5\u964d\u4f4e\u8fd9\u79cd\u884c\u4e3a\u5e26\u6765\u7684\u5229\u76ca\u3002<br/>\n> \n> 1. The fluctuation of the hashing power will affect the result of the longest chain. Higher activating requirement means a lower risk of temporary fork. <br/>\n> 2. Miners could simply signal to avoid being orphaned, but from the perspective of non-mining wallet nodes, they can't distinguish the false signal from the true signal. They must upgrade with the assumption that the signals are all true. After all the non-mining nodes have upgraded, the miners signalling false signal should follow. <br/>\n> 3. Non-mining wallet nodes could false signal without supporting the new protocol but since the total number of nodes cannot be distinguished, genuine nodes should follow the proven result provided by miners vote. <br/>\n> 4. Miners and non-mining nodes could conspire to fork using old protocol consensus. It can't be eliminated, just like in the past but through most passive non-mining nodes being upgraded, their benefit is reduced. <br/>\n> \n> \n> ==Implementation==\n> ___TBD___\n>"
            },
            {
                "author": "James Hilliard",
                "date": "2017-06-13T10:20:11",
                "message_text_only": "On Tue, Jun 13, 2017 at 3:24 AM, Zheming Lin via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Hi all the developers:\n>\n> I must clarify that despite the general ideas comes from discussions with others. The opinion in replies are only limited to my self.\n>\n> The old TXs can be re-enable after the fourth stage and just like **nothing happened** with the grace periods. The code can be provided with the protocol upgrade voting. At the end of the vote, either success or failed, we can have old TXs work again. It\u2019s like after a long time that the block jammed. I think nobody get harmed (Is there? I\u2019m not so sure about that), that\u2019s the purpose.\n\nI think that would cause problems with systems like lightning network\nthat rely on reliable confirmations of transactions as part of their\nsecurity models.\n\n>\n> Thank you for your time and kindly replies. Your opinions are more than welcome.\n>\n> LIN Zheming\n>\n>> \u5728 2017\u5e746\u670813\u65e5\uff0c10:23\uff0cZheming Lin <heater at gmail.com> \u5199\u9053\uff1a\n>>\n>> The BIP is described using Chinese and English. If any part is missing or need more specific, please reply. Forgive for my poor English.\n>>\n>> This method will incorporate any upgrade that affects non-mining nodes. They should beware that the rule has been changed.\n>>\n>> TLDR: Major miners activate and orphan the minor. That ensures all miners upgrades. Then invalid the tx from not upgrading nodes. Nodes must upgrade (with other protocol upgrade codes) in order to work. Then the final miner vote over protocol upgrade, with all nodes has the same upgraded codes.\n>>\n>> <pre>\n>> BIP: ???\n>> Title: Demonstration of Phase in Full Network Upgrade Activated by Miners\n>> Author: LIN Zheming\n>> Status: Draft\n>> Type: Standards Track\n>> Created: 2017-06-12\n>> </pre>\n>>\n>> ==Summary==\n>>\n>> \u672c\u65b9\u6cd5\u5e76\u4e0d\u662f\u6765\u6e90\u4e8e\u4e2a\u4eba\uff0c\u800c\u662f\u4e2d\u6587\u6bd4\u7279\u5e01\u793e\u533a\u4e2d\u96c6\u4f53\u667a\u6167\u7684\u7ed3\u679c\u3002<br/>\n>> This idea was not created by an individual but is a product of collaboration in the Chinese bitcoin community between different interest groups.<br/>\n>>\n>> \u8fd9\u662f\u4e00\u79cd\u5728\u534f\u8bae\u5347\u7ea7\u65f6\uff0c\u5bf9\u5168\u7f51\u6316\u77ff\u548c\u975e\u6316\u77ff\u8282\u70b9\u8fdb\u884c\u4fdd\u62a4\u548c\u6fc0\u52b1\u7684\u65b9\u6cd5\uff0c\u907f\u514d\u4e0d\u53c2\u4e0e\u6316\u77ff\u7684\u8282\u70b9\u6ca1\u6709\u5347\u7ea7\u7684\u52a8\u529b\u800c\u53d7\u5230\u635f\u5931\u3002<br/>\n>> This method is put forth to incentivize and to protect mining nodes and non-mining nodes during protocol upgrading. With this incentive mechanism, the non-mining nodes will not suffer monetary loss from chain splitting.<br/>\n>>\n>> \u53d1\u4fe1\u53f7\u7684\u591a\u6570\u77ff\u5de5\u5728\u8fbe\u5230\u6fc0\u6d3b\u6761\u4ef6\u540e\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\uff08\u4e00\u4e2a\u96be\u5ea6\u5468\u671f\uff09\u540e\u8bbe\u7f6e\u65b0\u533a\u5757\u7248\u672c\u53f7\uff0c\u5b64\u7acb\u672a\u5347\u7ea7\u77ff\u5de5\u7684\u4f4e\u7248\u672c\u53f7\u7684\u5757\u3002\u901a\u8fc7\u6700\u521d\u7684\u4e2d\u672c\u806a\u5171\u8bc6\uff0c\u5728\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\u7ed3\u675f\u540e\uff0c\u6240\u6709\u77ff\u5de5\u5c06\u5347\u7ea7\u81f3\u6700\u65b0\u7248\u672c\u6216\u4f7f\u7528\u6700\u65b0\u7248\u672c\u3002\u5728\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f\uff08\u4e00\u4e2a\u96be\u5ea6\u5468\u671f\uff09\u540e\uff0c\u77ff\u5de5\u5c06\u4ec5\u63a5\u53d7\u65b0\u7248\u672c\u7684\u4ea4\u6613\uff0c\u672a\u5347\u7ea7\u7684\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u65e7\u7248\u672c\u4ea4\u6613\u5c06\u65e0\u6cd5\u5f97\u5230\u65b0\u8282\u70b9\u7684\u8f6c\u64ad\u4e5f\u65e0\u6cd5\u8fdb\u5165\u65b0\u7248\u672c\u533a\u5757\u3002\u8fd9\u5c06\u5728\u4fdd\u62a4\u7528\u6237\u8d44\u4ea7\u7684\u540c\u65f6\uff0c\u63d0\u9192\u4e0d\u6316\u77ff\u7684\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u3002\u5e76\u5728\u5347\u7ea7\u4ee3\u7801\u4e2d\u52a0\u5165\u5bf9\u534f\u8bae\u8fdb\u884c\u6539\u52a8\u7684\u90e8\u5206\u3002\u94b1\u5305\u5347\u7ea7\u540e\u5c06\u7531\u6316\u77ff\u8282\u70b9\u6295\u7968\u5b9e\u65bd\u8be5\u9879\u6539\u52a8\uff0c\u4ee5\u8fbe\u6210\u534f\u8bae\u6539\u52a8\u7684\u5e7f\u6cdb\u90e8\u7f72\u3002<br/>\n>>\n>> After the activation condition is met, majority miners will set a new block versionbits after the first grace period(a difficulty change of 2016 blocks). The blocks with lower versionbits will be orphaned. In terms of the Nakamoto Consensus, the end of the first grace period will force all mining nodes upgraded to signal a new version of consensus. After the second grace period ( a difficulty change of 2016 blocks), mining nodes will only accept transactions with new versionbits. Transactions from nodes not upgrading will not be relayed nor included in blocks with new versionbits. This will protect funds of non-mining nodes from utilizing replay attack and will function as a notification for them to upgrade. Codes dealing with protocol upgrade could be included in the upgrade. After the non-mining node upgrades, mining nodes will vote to activate the protocol upgrade and this will achieve the broad/widespread deployment of the protocol upgrade.<br/>\n>>\n>> \u5728\u8be5\u9879\u6539\u52a8\u5e7f\u6cdb\u90e8\u7f72\u81f3\u5ba2\u6237\u7aef\u4e4b\u540e\uff0c\u4f9d\u7136\u7531\u5176\u6fc0\u6d3b\u6761\u4ef6\u63a7\u5236\u3002<br/>\n>> The protocol upgrade depends on its activate condition independently even after the change deployed among nodes.<br/>\n>>\n>> ==Motivation==\n>>\n>> \u9274\u4e8e\u6700\u521d\u7684\u6bd4\u7279\u5e01\u534f\u8bae\u5e76\u672a\u8003\u8651\u4e0d\u53c2\u4e0e\u6316\u77ff\u7684\u94b1\u5305\u8282\u70b9\uff0c\u5bfc\u81f4\u8fd9\u4e9b\u94b1\u5305\u8282\u70b9\u7684\u534f\u8bae\u5347\u7ea7\u662f\u88ab\u52a8\u7684\uff0c\u61d2\u60f0\u7684\u3002\u5f53\u5728\u5347\u7ea7\u65b9\u5411\u4e0a\u51fa\u73b0\u5206\u6b67\u65f6\uff0c\u77ff\u5de5\u4e5f\u4e0d\u613f\u610f\u5728\u9519\u8bef\u7684\u94fe\u4e0a\u6316\u77ff\uff0c\u4f46\u77ff\u5de5\u53c8\u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u6b63\u5728\u5ef6\u957f\u7684\u94fe\u662f\u88ab\u94b1\u5305\u8282\u70b9\u5e7f\u6cdb\u63a5\u53d7\u7684\u94fe\u3002\u8fd9\u5c06\u5f71\u54cd\u94b1\u5305\u8282\u70b9\u7684\u5b89\u5168\u3002<br/>\n>> In view of the fact that the original Bitcoin consensus did not consider the non-mining wallet nodes(as mentioned above), the result is that upgrading the consensus of these wallet nodes is passive and lazy. When there is disagreement in the direction of the upgrade, the miners have no mechanism to ensure that the chain being extended is the chain widely accepted by the wallet nodes. This also adversely affects the security of the wallet nodes.<br/>\n>>\n>> \u4f7f\u7528\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5728\u4fdd\u8bc1\u94b1\u5305\u8282\u70b9\u8d44\u4ea7\u5b89\u5168\u7684\u60c5\u51b5\u4e0b\uff0c\u4e14\u901a\u8fc7\u589e\u52a0\u6fc0\u52b1\u8ba9\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u534f\u8bae\u3002\u4e00\u65e6\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u534f\u8bae\uff0c\u4fdd\u8bc1\u77ff\u5de5\u8282\u70b9\u4e0d\u4ec5\u5de5\u4f5c\u5728\u7b97\u529b\u6700\u957f\u94fe\u4e0a\uff0c\u8fd8\u5de5\u4f5c\u5728\u6bd4\u7279\u5e01\u751f\u6001\u73af\u5883\u4e2d\u5176\u4ed6\u94b1\u5305\u8282\u70b9\u6240\u4f7f\u7528\u7684\u6700\u957f\u94fe\u4e0a\u3002\u5728\u4e2d\u672c\u806a\u5171\u8bc6\u4e0b\u4e0d\u4f1a\u51fa\u73b0\u5206\u53c9\uff0c\u4ee5\u5b9e\u73b0\u6e10\u8fdb\u5f0f\u7684\u534f\u8bae\u5347\u7ea7\u3002<br/>\n>>\n>> Apart from ensuring the asset security of wallet nodes, this method can be used to provide additional incentives to upgrade the protocol for the wallet nodes. Once the wallet nodes upgrade their protocol, the miners' nodes can be guaranteed to work - not only on the longest chain, but also on the longest chain used by other wallet nodes in the broader bitcoin sphere. Under the Nakamoto Consensus, there will be no persistent forks as protocol upgrades can be phased in.<br/>\n>>\n>> ==Specification==\n>>\n>> 1. \u6316\u77ff\u8282\u70b9\u5c06\u4f7f\u7528 versionbits \u7248\u672c\u4f4d\u6765\u5b9a\u4e49\u652f\u6301\u4fe1\u53f7\u3002BIP \u751f\u6548\u65f6\uff0c\u6240\u6709\u533a\u5757\u9700\u8981\u4f7f\u7528\u5236\u5b9a\u7684 nVersion \u6765\u53d1\u9001\u4fe1\u53f7<br/>\n>> 2. \u6316\u77ff\u8282\u70b9\u5c06\u4f7f\u7528 tx version \u6765\u5b9a\u4e49\u5f53\u524d\u7684\u4ea4\u6613\u7248\u672c\u3002\u5f53\u524d\u7684 tx version \u662f 1\uff0c\u5c06\u5141\u8bb8 tx version \u4e3a 2 \u7684\u4ea4\u6613\uff0c\u5e76\u5728\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f\u4e4b\u540e\uff0c\u4f7f tx version \u4e3a 1 \u7684\u4ea4\u6613\u975e\u6cd5\u3002<br/>\n>>\n>> 1. Mining nodes signal by setting a version bit. While this BIP is active, all blocks must set the chosen nVersion.<br/>\n>> 2. Mining nodes will use tx version to define current version transactions. Current tx version is 1, and tx version 2 will be allowed. After the second grace period, tx version 1 will be regarded as invalid.<br/>\n>>\n>>\n>> ==Deployment==\n>> \u534f\u8bae\u5347\u7ea7\uff0c\u5c06\u5206\u6210\u4e09\u6b65\u9010\u6b65\u5b9e\u65bd\u3002\u5e76\u6709\u4e00\u4e2a\u53ef\u9009\u7684\u7b2c\u56db\u6b65\u6765\u96c6\u6210\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\u3002<br/>\n>>\n>> Protocol upgrading will phase in over three stages. We can have an optional fourth stage to integrate codes of protocol upgrade.<br/>\n>>\n>> 1. \u4fe1\u53f7\u9636\u6bb5\u3002\u6316\u77ff\u8282\u70b9\u4f7f\u7528 versionbits \u53d1\u9001\u652f\u6301\u4fe1\u53f7\u3002\u6316\u77ff\u8282\u70b9\u5728\u76d1\u6d4b\u5230 55% \u7684\u533a\u5757\u5373\u524d 1109/2016 \u4e2a\u533a\u5757\u5747\u53d1\u9001\u4e86\u76f8\u540c\u7684\u652f\u6301\u4fe1\u53f7\uff0c\u8fdb\u5165\u4e0b\u4e00\u9636\u6bb5\u3002<br/>\n>> 2. \u77ff\u5de5\u8282\u70b9\u5347\u7ea7\u3002\u7ecf\u8fc7\u4e86\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f 2016 \u7684\u533a\u5757\u540e\uff0c\u4e14\u603b\u4fe1\u53f7\u533a\u5757\u8d85\u8fc7\u4e86 2218/4032\uff0c\u5c31\u5f00\u59cb\u4f7f\u7528\u65b0\u7684\u533a\u5757\u7248\u672c\u6253\u5305\u533a\u5757\uff0c\u5e76\u540c\u65f6\u5f00\u59cb\u5b64\u7acb\u65e7\u7248\u672c\u3002\u6b64\u65f6\u6240\u6709\u8282\u70b9\u548c\u94b1\u5305\uff0c\u5c06\u53ef\u4ee5\u4f7f\u7528\u65b0\u7248\u672c\u53f7\u53d1\u9001\u4ea4\u6613\uff0c\u540c\u65f6\u517c\u5bb9\u65e7\u7248\u672c\u53f7\u4ea4\u6613\u3002<br/>\n>> 3. \u94b1\u5305\u8282\u70b9\u5347\u7ea7\u3002\u5728\u6316\u77ff\u8282\u70b9\u76d1\u6d4b\u5230\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f 4032 \u4e2a\u8fde\u7eed\u7684\u65b0\u7248\u672c\u7684\u533a\u5757\u540e\uff0c\u5f00\u59cb\u62d2\u7edd\u65e7\u7248\u672c\u53f7\u7684\u4ea4\u6613\uff0c\u53ea\u6253\u5305\uff0f\u8f6c\u64ad\u65b0\u7248\u672c\u53f7\u7684\u4ea4\u6613\u3002\u540c\u65f6\u5c06\u4ece\u5185\u5b58\u6c60\u4e2d\u5220\u9664\u65e7\u7248\u672c\u53f7\u7684\u4ea4\u6613\u3002<br/>\n>> 4. \uff08\u53ef\u9009\u7684\uff09\u534f\u8bae\u5347\u7ea7\u3002\u5728\u7b2c\u4e09\u9636\u6bb5\u4e2d\u5305\u542b\u6709\u7b2c\u56db\u9636\u6bb5\u7684\u5347\u7ea7\u4ee3\u7801\u3002\u5f53\u6211\u4eec\u786e\u4fdd\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u5230\u652f\u6301\u65b0\u7248\u672c\u4ea4\u6613\u540e\uff0c\u5fc5\u7136\u5305\u542b\u4e86\u7b2c\u56db\u9636\u6bb5\u7684\u5347\u7ea7\u4ee3\u7801\u3002\u5219\u6b64\u65f6\u53ef\u4ee5\u901a\u8fc7\u77ff\u5de5\u8282\u70b9\u6295\u7968\u7684\u65b9\u5f0f\u5b8c\u6210\u5168\u7f51\u7edc\u7684\u534f\u8bae\u5347\u7ea7\u3002\n>>\n>> 1. Signal stage: Mining nodes signal using BIP9. The next stage will be activated after 55% (1109) of 2016 blocks has the signal.<br/>\n>>\n>> 2. Mining nodes upgrade stage: After a first grace period of 2016 blocks and total signalling blocks passed 2218 of 4032 blocks, miners broadcasting blocks with new versionbits in block headers will orphan blocks with old versionbits. At this stage all nodes can send transactions with new versionbits, and transactions with old versionbits will be compatible.<br/>\n>>\n>> 3. Non-mining nodes upgrade stage: after 4032 continuous blocks with new versionbits, mining nodes will start to refuse transactions with old versionbits. Only transactions with new versionbits can be relayed and included in blocks. Transactions with old versionbits can be safely purged from memory pools.<br/>\n>>\n>> 4. (Optional)Protocol Upgrade stage: The codes dealing with protocol upgrade can be integrated in the third stage. After the non-mining nodes upgrades to support newer version of transactions, the codes with protocol upgrade must be included and now we can use miner vote to activate and finish this upgrade.<br/>\n>>\n>> \u81f3\u6b64\uff0c\u534f\u8bae\u5347\u7ea7\u5b8c\u6210\u3002<br/>\n>>\n>> At this point, the protocol upgrade have phased in.<br/>\n>>\n>> ==Benefits==\n>>\n>> 1. \u4ec5\u9700\u8981\u591a\u6570\u7684\u77ff\u5de5\u53d1\u4fe1\u53f7\u540e\u5373\u53ef\u6fc0\u6d3b\u3002\u5728\u4e2d\u672c\u806a\u7684\u6bd4\u7279\u5e01\u8bba\u6587\u4e2d\uff0c99.9% \u7684\u53ef\u80fd\u6027\u4e0b\uff0c55% \u7684\u77ff\u5de5\u5c06\u5728 340 \u4e2a\u533a\u5757\u540e\u786e\u4fdd\u6210\u4e3a\u6700\u957f\u94fe\u3002\u8fd9\u5c06\u6700\u5927\u53ef\u80fd\u51cf\u5c0f\u901a\u8fc7\u63a7\u5236\u5c11\u6570\u7b97\u529b\u800c\u62d6\u5ef6\u7f51\u7edc\u5347\u7ea7\u7684\u53ef\u80fd\u6027\u3002\u6211\u4eec\u53ef\u4ee5\u9884\u89c1\u5230\u5728\u7b97\u529b\u4fe1\u53f7\u8d85\u8fc7 51% \u540e\uff0c\u6316\u77ff\u8282\u70b9\u5c06\u8fc5\u901f\u7684\u5728\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\u5185\u8fdb\u884c\u5347\u7ea7\u3002<br/>\n>> 2. \u5728\u4e24\u4e2a\u5bbd\u9650\u671f\u5185\uff0c\u94b1\u5305\u8282\u70b9\u4ea4\u6613\u4e0d\u53d7\u5f71\u54cd\uff0c\u6709\u8db3\u591f\u7684\u65f6\u95f4\u5347\u7ea7\u94b1\u5305\u8f6f\u4ef6\u3002<br/>\n>> 3. \u7248\u672c\u4fe1\u606f\u5305\u542b\u5728 block header \u4e2d\uff0c\u5e76\u4e0d\u5f71\u54cd SPV \u6316\u77ff\u8fc7\u7a0b\u3002\uff08\u770b\u8d77\u6765\u662f\uff1f\uff09<br/>\n>> 4. \u5728\u4e24\u4e2a\u5bbd\u9650\u671f\u540e\uff0c\u94b1\u5305\u8282\u70b9\u5c06\u5fc5\u987b\u5347\u7ea7\u94b1\u5305\uff0c\u5426\u5219\u56e0\u6ca1\u6709\u7b97\u529b\u652f\u6301\u5c06\u65e0\u6cd5\u53d1\u9001\u4ea4\u6613\uff0c\u4e5f\u65e0\u6cd5\u786e\u8ba4\u3002\u76f8\u5bf9\u4e8e\u5728\u8282\u70b9\u95f4\u91cd\u65b0\u8fbe\u6210\u65b0\u7684\u5171\u8bc6\uff0c\u8fd9\u79cd\u72b6\u51b5\u5e76\u6ca1\u6709\u66f4\u7cdf\u7cd5\u3002<br/>\n>> 5. \u94b1\u5305\u8282\u70b9\u7684\u8d26\u672c\u5c06\u5f97\u5230\u5c0a\u91cd\u548c\u4fdd\u62a4\u3002\u4f7f\u7528\u94fe\u4e0b\u94b1\u5305\u7684\u7528\u6237\u5c06\u9700\u8981\u5728\u94b1\u5305\u670d\u52a1\u63d0\u4f9b\u5546\u7684\u58f0\u660e\u4e4b\u540e\u51b3\u5b9a\u63d0\u81f3\u94fe\u4e0a\u94b1\u5305\u6216\u8ddf\u968f\u3002<br/>\n>> 6. \u5c06\u6765\u7684\u534f\u8bae\u5347\u7ea7\uff0c\u53ef\u4ee5\u5728\u5347\u7ea7\u5ba2\u6237\u7aef\u7248\u672c\u540c\u65f6\u7ed1\u5b9a\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\u5e76\u8fdb\u884c\u72ec\u7acb\u7684\u6fc0\u6d3b\u6295\u7968\u3002\u8fd9\u5c06\u9884\u7559\u8db3\u591f\u7684\u65f6\u95f4\u8ba9\u8282\u70b9\u5347\u7ea7\u8f6f\u4ef6\u4ee5\u652f\u6301\u65b0\u7684\u534f\u8bae\u3002\u5373\u4f7f\u77ff\u5de5\u6295\u7968\u6fc0\u6d3b\u5931\u8d25\u4e5f\u4e0d\u5f71\u54cd\u73b0\u72b6\u3002<br/>\n>>\n>> 1. The activation only requires majority miners signal. As described in the paper by Satoshi Nakamoto, 55% miners will be in the longest chain after 340 blocks, with 99.9% certainty. This will minimize the possibility of delaying network upgrades by controlling a small number of hashing power. We can foresee that after 51% signalling, all miners will upgrade within the first grace period. <br/>\n>> 2. During the first two grace periods, non-mining nodes will not be affected. They have enough time to upgrade their software. <br/>\n>> 3. Versionbits included in block header, not influencing the SPY mining. <br/>\n>> 4. After two grace periods, all nodes must be upgraded. Otherwise they cannot send transactions or get any confirmations. Compared with forming new consensus among nodes, the situation is not worse than before. <br/>\n>> 5. The ledger in non-mining wallet nodes is honored and reserved. Users of off-chain wallet services can decide whether or not to follow the service providers after they got the public notification from the service providers. <br/>\n>> 6. Protocol upgrades in the future can be bonded with the upgrades of nodes, and the upgrades activate through miners vote independently. There would be enough time for nodes to be upgraded in order to support new protocols. Even in case of failing in miner activation, the situation will not worsen and the status quo will remain. <br/>\n>>\n>>\n>> ==Risks==\n>>\n>> 1. \u7b97\u529b\u7684\u6ce2\u52a8\u4f1a\u5f71\u54cd\u6700\u957f\u94fe\u7684\u7ed3\u679c\u3002\u56e0\u6b64\u8d8a\u9ad8\u7684\u6fc0\u6d3b\u6bd4\u4f8b\u8981\u6c42\u5c06\u51cf\u5c11\u77ed\u65f6\u95f4\u5206\u53c9\u7684\u5371\u9669\u3002<br/>\n>> 2. \u77ff\u5de5\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u907f\u514d\u88ab\u5b64\u7acb\uff0c\u4f46\u5728\u94b1\u5305\u8282\u70b9\u770b\u6765\u65e0\u6cd5\u533a\u5206\u662f\u5426\u662f\u5047\u4fe1\u53f7\uff0c\u53ea\u80fd\u5347\u7ea7\u3002\u800c\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u4e4b\u540e\uff0c\u77ff\u5de5\u4e5f\u5c06\u8ddf\u968f\u3002<br/>\n>> 3. \u94b1\u5305\u8282\u70b9\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u4ec5\u5347\u7ea7\u7248\u672c\u53f7\u800c\u4e0d\u652f\u6301\u7ed1\u5b9a\u7684\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\uff0c\u4f46\u94b1\u5305\u8282\u70b9\u6570\u91cf\u65e0\u6cd5\u5224\u522b\uff0c\u4e25\u8083\u7684\u771f\u5b9e\u8282\u70b9\u5e94\u5f53\u8ddf\u968f\u53ef\u8bc1\u5b9e\u7684\u77ff\u5de5\u6295\u7968\u7ed3\u679c\u3002<br/>\n>> 4. \u5b58\u5728\u5c11\u90e8\u5206\u77ff\u5de5\u548c\u94b1\u5305\u8282\u70b9\u5171\u8c0b\uff0c\u5728\u65b0\u534f\u8bae\u5347\u7ea7\u6fc0\u6d3b\u540e\u4f9d\u7136\u4f7f\u7528\u8001\u534f\u8bae\u6316\u77ff\u7684\u53ef\u80fd\u3002\u8fd9\u79cd\u53ef\u80fd\u968f\u65f6\u53d1\u751f\u65e0\u6cd5\u675c\u7edd\uff0c\u4f46\u901a\u8fc7\u8ba9\u6c89\u9ed8\u7684\u5927\u591a\u6570\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u7684\u65b9\u5f0f\u53ef\u4ee5\u964d\u4f4e\u8fd9\u79cd\u884c\u4e3a\u5e26\u6765\u7684\u5229\u76ca\u3002<br/>\n>>\n>> 1. The fluctuation of the hashing power will affect the result of the longest chain. Higher activating requirement means a lower risk of temporary fork. <br/>\n>> 2. Miners could simply signal to avoid being orphaned, but from the perspective of non-mining wallet nodes, they can't distinguish the false signal from the true signal. They must upgrade with the assumption that the signals are all true. After all the non-mining nodes have upgraded, the miners signalling false signal should follow. <br/>\n>> 3. Non-mining wallet nodes could false signal without supporting the new protocol but since the total number of nodes cannot be distinguished, genuine nodes should follow the proven result provided by miners vote. <br/>\n>> 4. Miners and non-mining nodes could conspire to fork using old protocol consensus. It can't be eliminated, just like in the past but through most passive non-mining nodes being upgraded, their benefit is reduced. <br/>\n>>\n>>\n>> ==Implementation==\n>> ___TBD___\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-06-13T18:11:39",
                "message_text_only": "On Tue, Jun 13, 2017 at 2:23 AM, Zheming Lin via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> The BIP is described using Chinese and English. If any part is missing or need more specific, please reply. Forgive for my poor English.\n\nYour English is much better than my Chinese.  Thank you for taking the\ntime to write this.\n\nI am still reading and trying to completely understand your proposal\nbut I wanted to make one observation:\n\n> \u9274\u4e8e\u6700\u521d\u7684\u6bd4\u7279\u5e01\u534f\u8bae\u5e76\u672a\u8003\u8651\u4e0d\u53c2\u4e0e\u6316\u77ff\u7684\u94b1\u5305\u8282\u70b9\uff0c\u5bfc\u81f4\u8fd9\u4e9b\u94b1\u5305\u8282\u70b9\u7684\u534f\u8bae\u5347\u7ea7\u662f\u88ab\u52a8\u7684\uff0c\u61d2\u60f0\u7684\u3002\u5f53\u5728\u5347\u7ea7\u65b9\u5411\u4e0a\u51fa\u73b0\u5206\u6b67\u65f6\uff0c\u77ff\u5de5\u4e5f\u4e0d\u613f\u610f\u5728\u9519\u8bef\u7684\u94fe\u4e0a\u6316\u77ff\uff0c\u4f46\u77ff\u5de5\u53c8\u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u6b63\u5728\u5ef6\u957f\u7684\u94fe\u662f\u88ab\u94b1\u5305\u8282\u70b9\u5e7f\u6cdb\u63a5\u53d7\u7684\u94fe\u3002\u8fd9\u5c06\u5f71\u54cd\u94b1\u5305\u8282\u70b9\u7684\u5b89\u5168\u3002<br/>\n> In view of the fact that the original Bitcoin consensus did not consider the non-mining wallet nodes(as mentioned above), the result is that upgrading the consensus of these wallet nodes is passive and lazy.\n\nThis is not true. Non-mining wallet nodes were considered, and their\nupgrade practices are not usually slower than miners.\n\nEven in the very first version of the software it did not mine unless\nthe user went into the settings and explicitly turned it on or used a\ncommand-line option.  By default, every installation of Bitcoin was a\nnon-mining wallet node.\n\nThe enforcement of the system's rules by users broadly, and not just\nminers, is specifically described in the white paper (section 8,\nparagraph 2, it especially clear in the last sentence).  This is\ncritical for the security of Bitcoin especially with the current\ndegree of centralization in pools.  Without it, Bitcoin's security\nwould look a lot more like the Ripple system.\n\nFrequently it is the miners that are \"passive and lazy\" in upgrading.\nIn some cases when new versions have had major improvements specific\nto mining (such as for 0.8) miners upgraded much faster than other\nnodes. But often, it is the other way around and miners adopt new\nversions much slower than other nodes. If you look at block\nconstruction today you will see that many miners are running highly\noutdated node software which is more than one or even two years old.\n(and as a result, they lose out on a considerable amount of\ntransaction fees.)\n\nIn fact, many miners have the most severe form of passive behavior:\nthey do not run a node at all but simply sell their hash power to\npools (which themselves are often slow to upgrade).  By comparison,\nhttp://luke.dashjr.org/programs/bitcoin/files/charts/branches.html 95%\nof reachable nodes are running software now from the last year and a\nhalf.\n\nI do not, however, believe that it is a problem that anyone is slow to upgrade.\n\nReliability cannot be maintained in infrastructure if it is rapidly\nchanging.  A normal deployment process for major systems\ninfrastructure outside of Bitcoin usually takes months because time\nmust be given to test and find bugs.\n\nMiners depend on their income from mining and interruptions can be\nvery costly.  Many pools are also involved with altcoins which are\nconstantly breaking and they have their attention directed elsewhere\nand cannot quickly spare the time required to upgrade their software.\nThese delays are the natural consequence of a decentralized system\nwhere no one has the power to force other people to adopt their\npriorities.\n\nIf you look at the deployment processes of major internet protocols,\nHTTP2, new versions of SSH, BGP,  or IP itself you will find that\nupgrades often happen slower than the entire life of Bitcoin so far--\nand none of these protocols have the difficult consistency challenges\nof Bitcoin or as much risk of irreparable financial loss if things go\nwrong.\n\nBecause many people in the Bitcoin community appears to expect\nupgrades much faster than even centralized ISP backbones upgrade their\nrouter software I think they have unrealistic expectations with how\nfast upgrading can occur while preserving stability, security, and\ndecentralization and unrealistic expectations of how fast upgrading\nwill occur so long as no one has the ability to force other people to\nrun their upgrades.\n\nI look forward to competing my understanding of your proposal.\n\nCheers,"
            },
            {
                "author": "Zheming Lin",
                "date": "2017-06-14T16:39:42",
                "message_text_only": "> \u5728 2017\u5e746\u670814\u65e5\uff0c02:11\uff0cGregory Maxwell <greg at xiph.org> \u5199\u9053\uff1a\n> \n> On Tue, Jun 13, 2017 at 2:23 AM, Zheming Lin via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> The BIP is described using Chinese and English. If any part is missing or need more specific, please reply. Forgive for my poor English.\n> \n> Your English is much better than my Chinese.  Thank you for taking the\n> time to write this.\n> \n> I am still reading and trying to completely understand your proposal\n> but I wanted to make one observation:\n> \n>> \u9274\u4e8e\u6700\u521d\u7684\u6bd4\u7279\u5e01\u534f\u8bae\u5e76\u672a\u8003\u8651\u4e0d\u53c2\u4e0e\u6316\u77ff\u7684\u94b1\u5305\u8282\u70b9\uff0c\u5bfc\u81f4\u8fd9\u4e9b\u94b1\u5305\u8282\u70b9\u7684\u534f\u8bae\u5347\u7ea7\u662f\u88ab\u52a8\u7684\uff0c\u61d2\u60f0\u7684\u3002\u5f53\u5728\u5347\u7ea7\u65b9\u5411\u4e0a\u51fa\u73b0\u5206\u6b67\u65f6\uff0c\u77ff\u5de5\u4e5f\u4e0d\u613f\u610f\u5728\u9519\u8bef\u7684\u94fe\u4e0a\u6316\u77ff\uff0c\u4f46\u77ff\u5de5\u53c8\u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u6b63\u5728\u5ef6\u957f\u7684\u94fe\u662f\u88ab\u94b1\u5305\u8282\u70b9\u5e7f\u6cdb\u63a5\u53d7\u7684\u94fe\u3002\u8fd9\u5c06\u5f71\u54cd\u94b1\u5305\u8282\u70b9\u7684\u5b89\u5168\u3002<br/>\n>> In view of the fact that the original Bitcoin consensus did not consider the non-mining wallet nodes(as mentioned above), the result is that upgrading the consensus of these wallet nodes is passive and lazy.\n> \n> This is not true. Non-mining wallet nodes were considered, and their\n> upgrade practices are not usually slower than miners.\n> \n\n\u6211\u9488\u5bf9\u7684\u662f\u61d2\u60f0\u548c\u88ab\u52a8\u7684\u8282\u70b9\uff0c\u800c\u975e\u6d3b\u8dc3\u505a\u51fa\u9009\u62e9\u7684\u8282\u70b9\u3002\u7528\u6237\u613f\u610f\u7684\u8bdd\u603b\u662f\u53ef\u4ee5\u505a\u51fa\u81ea\u5df1\u7684\u9009\u62e9\u3002\u5e76\u6ca1\u6709\u529e\u6cd5\u6765\u5f3a\u8feb\u5e76\u4e0d\u8ba4\u540c\u7684\u4eba\u5f62\u6210\u5171\u8bc6\u3002\nI mean lazy and passive ones I addressed. Not the one actively chose whichever solution they like. Users always have their solution. There\u2019s no way to force a union if they are not together.\n\n> Even in the very first version of the software it did not mine unless\n> the user went into the settings and explicitly turned it on or used a\n> command-line option.  By default, every installation of Bitcoin was a\n> non-mining wallet node.\n> \n\n\u5728\u4e2d\u672c\u806a\u767d\u76ae\u4e66\u4e2d\u7b2c\u4e94\u7ae0\u7684\u5b9a\u4e49\u4e0b\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u9700\u8981\u6316\u77ff\u3002\u5982\u679c\u54b1\u4fe9\u5bf9\u6b64\u5b58\u5728\u5206\u6b67\uff0c\u6211\u5e76\u65e0\u6cd5\u8bf4\u670d\u4f60\u3002\nFrom the definition of Satishi Nakamoto, Section 5, each node mines. If that\u2019s the disagreement between us, there\u2019s no more I can convince you. \n\n> The enforcement of the system's rules by users broadly, and not just\n> miners, is specifically described in the white paper (section 8,\n> paragraph 2, it especially clear in the last sentence).  This is\n> critical for the security of Bitcoin especially with the current\n> degree of centralization in pools.  Without it, Bitcoin's security\n> would look a lot more like the Ripple system.\n> \n\n\u662f\u7684\uff0c\u7528\u6237\u6c38\u8fdc\u90fd\u6709\u9009\u62e9\uff0c\u5e76\u53ef\u4ee5\u629b\u5f03\u90a3\u4e9b\u8282\u70b9\u3002\u8fd9\u4e2a BIP \u5e76\u6ca1\u6709\u53cd\u5bf9\u8fd9\u4e9b\u7528\u6237\u8fd9\u4e48\u505a\u3002\u53ea\u6709\u90a3\u4e9b\u88ab\u52a8\u7684\u94b1\u5305\u7528\u6237\uff0c\u4ed6\u4eec\u9700\u8981\u77e5\u9053\u5fc5\u987b\u505a\u51fa\u4e00\u4e2a\u9009\u62e9\u3002\uff08\u800c\u4e0d\u662f\u88ab\u52a8\u7684\u8ddf\u968f\u9ed8\u8ba4\u7684\u7b56\u7565\uff09\nYes, users always have choice that they can abandon the nodes. This BIP does\u2019t go against them. I mean only the one(especially wallets) that\u2019s passive, they need to know there\u2019s a choice and pick one.\n\n\u8fd9\u4e2a BIP \u53ef\u4ee5\u88ab\u5e94\u7528\u4e8e\u51e0\u4e4e\u4efb\u4f55\u7684\u5347\u7ea7\u4e0a\uff0c\u5305\u62ec\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u7684\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u6269\u5bb9\uff0c\u6d8c\u73b0\u5171\u8bc6\uff0c\u516b\u5146\u6269\u5bb9\u7b49\u3002\u4f46\u8fd9\u4e9b\u5347\u7ea7\u5e76\u4e0d\u662f\u91cd\u70b9\u3002\nThis BIP can be applied to almost any upgrade, including Segwit, Segwit2x, 2m, ec, 8m\u2026 but the upgrade is not the key point.\n\n\u5230\u5e95\u6211\u4eec\u7684\u7528\u6237\u662f\u5426\u771f\u7684\u62e5\u6709\u9009\u62e9\uff1f\nDid the users have any real choice?\n\n\u6211\u5e76\u4e0d\u80fd\u7406\u89e3\u4ed6\u4eec\u76f8\u4fe1\u5927\u90e8\u5206\u77ff\u5de5\uff08\u5c31\u50cf\u5f53\u524d\u4e00\u6837\uff09\uff0c\u4f46\u62d2\u7edd\u8fd9\u4e9b\u591a\u6570\u77ff\u5de5\u5bf9\u534f\u8bae\u6539\u53d8\u7684\u6295\u7968\u7ed3\u679c\u3002\nI don\u2019t see the reason they trust the majority miners(as they do today) but refuse the vote for upcoming protocol upgrade.\n\n\u5bf9\u94b1\u5305\u7528\u6237\u7684\u9009\u62e9\uff0c\u662f\u4ed6\u4eec\u662f\u5426\u76f8\u4fe1\u591a\u6570\u77ff\u5de5\u3002\u5982\u679c\u4ed6\u4eec\u4e0d\u76f8\u4fe1\uff0c\u53ef\u4ee5\u901a\u8fc7\u5206\u53c9\u6765\u6d88\u9664\u6389\u77ff\u5de5\u3002\nThis choice for wallet users right now, is wether to follow the 51% majority miners. If they don\u2019t, they can have their fork that get rid of miners.\n\n\u5982\u679c\u4ed6\u4eec\u4ecd\u65e7\u76f8\u4fe1\u77ff\u5de5\uff0c\u90a3\u4e48\u53ef\u4ee5\u7559\u4e0b\u6765\u5e76\u8ddf\u968f\u77ff\u5de5\u5c06\u6765\u7684\u534f\u8bae\u6539\u53d8\u3002\nIf they do trust the majority miners, they stay and follow the vote for upcoming protocol upgrade.\n\n\u6240\u4ee5\u95ee\u9898\u5728\u4e8e\uff1a\u6bd4\u7279\u5e01\u7684\u5f00\u53d1\u8005\u3001\u7528\u6237\u3001\u62e5\u6709\u8005\u3001\u670d\u52a1\u63d0\u4f9b\u8005\u3001\u751a\u81f3\u77ff\u5de5\uff0c\u662f\u5426\uff08\u4ecd\u7136\uff09\u5982\u767d\u76ae\u4e66\u4e2d\u63cf\u8ff0\u7684\u5bf9\u5927\u591a\u6570\u77ff\u5de5\u62e5\u6709\u4fe1\u4efb\u3002\nSo the questions is: Do the bitcoin developers, users, holders, service provides, even miners, (still) have faith in the majority of miners as designed in the white paper?\n\n\n> Frequently it is the miners that are \"passive and lazy\" in upgrading.\n> In some cases when new versions have had major improvements specific\n> to mining (such as for 0.8) miners upgraded much faster than other\n> nodes. But often, it is the other way around and miners adopt new\n> versions much slower than other nodes. If you look at block\n> construction today you will see that many miners are running highly\n> outdated node software which is more than one or even two years old.\n> (and as a result, they lose out on a considerable amount of\n> transaction fees.)\n> \n\n\u6211\u4e2a\u4eba\u5c06\u8fd9\u79cd\u884c\u4e3a\u89c6\u4f5c\u5bf9\u5f53\u524d\u7248\u672c\u7684\u53cd\u5bf9\u7968\u3002\u8fd9\u4e2aBIP\u4e5f\u8003\u8651\u4e86\u8fd9\u79cd\u60c5\u51b5\uff0c\u60a8\u662f\u5426\u6ce8\u610f\u5230\u77ff\u5de5\u5e94\u8be5\u5148\u5347\u7ea7\uff08\u907f\u514d\u88ab\u5b64\u7acb\uff09\uff0c\u8fd9\u662f\u5426\u89e3\u51b3\u4e86\u4f60\u63d0\u51fa\u7684\u95ee\u9898\u5462\uff1f\nI personally take that as VETO to current version. This BIP also address this situation. Did you notice that miners should be upgraded first? Did that solve the problem you mentioned above?\n\n\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u65b9\u6cd5\u8ba9\u6240\u6709\u77ff\u5de5\u81f3\u5c11\u90fd\u8981\u5347\u7ea7\u5230\u76f8\u540c\u7684\u5171\u8bc6\u7248\u672c\u5e76\u5f00\u59cb\u5bf9\u5c06\u6765\u7684\u5347\u7ea7\u6295\u7968\uff0c\u90a3\u5e94\u8be5\u4e0d\u4f1a\u6709\u4efb\u4f55\u95ee\u9898\u3002\u9664\u975e\u77ff\u5de5\u5e0c\u671b\u8fdb\u884c\u7684\u6295\u7968\uff0c\u4e0d\u662f\u67d0\u4e9b\u4eba\u5e0c\u671b\u770b\u5230\u7684\u6295\u7968\u3002\nIf we can use this method to at least make miners upgraded to the same consensus version and start to vote for the upcoming changes, that would solve the problem for the passive behavior. Unless the vote miners wish to hold, is not in the wishlist of someone.\n\n> In fact, many miners have the most severe form of passive behavior:\n> they do not run a node at all but simply sell their hash power to\n> pools (which themselves are often slow to upgrade).  By comparison,\n> http://luke.dashjr.org/programs/bitcoin/files/charts/branches.html 95%\n> of reachable nodes are running software now from the last year and a\n> half.\n> \n> I do not, however, believe that it is a problem that anyone is slow to upgrade.\n> \n> Reliability cannot be maintained in infrastructure if it is rapidly\n> changing.  A normal deployment process for major systems\n> infrastructure outside of Bitcoin usually takes months because time\n> must be given to test and find bugs.\n> \n> Miners depend on their income from mining and interruptions can be\n> very costly.  Many pools are also involved with altcoins which are\n> constantly breaking and they have their attention directed elsewhere\n> and cannot quickly spare the time required to upgrade their software.\n> These delays are the natural consequence of a decentralized system\n> where no one has the power to force other people to adopt their\n> priorities.\n> \n> If you look at the deployment processes of major internet protocols,\n> HTTP2, new versions of SSH, BGP,  or IP itself you will find that\n> upgrades often happen slower than the entire life of Bitcoin so far--\n> and none of these protocols have the difficult consistency challenges\n> of Bitcoin or as much risk of irreparable financial loss if things go\n> wrong.\n> \n> Because many people in the Bitcoin community appears to expect\n> upgrades much faster than even centralized ISP backbones upgrade their\n> router software I think they have unrealistic expectations with how\n> fast upgrading can occur while preserving stability, security, and\n> decentralization and unrealistic expectations of how fast upgrading\n> will occur so long as no one has the ability to force other people to\n> run their upgrades.\n> \n> I look forward to competing my understanding of your proposal.\n> \n> Cheers,\n\nI think the divergency is from the different definition of bitcoin. If no common understanding, let\u2019s get one from the white paper, together.\n\nRegards\n\nLIN Zheming"
            },
            {
                "author": "Jameson Lopp",
                "date": "2017-06-14T17:20:32",
                "message_text_only": "On Wed, Jun 14, 2017 at 9:39 AM, Zheming Lin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n>\n> > \u5728 2017\u5e746\u670814\u65e5\uff0c02:11\uff0cGregory Maxwell <greg at xiph.org> \u5199\u9053\uff1a\n> >\n> > On Tue, Jun 13, 2017 at 2:23 AM, Zheming Lin via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> The BIP is described using Chinese and English. If any part is missing\n> or need more specific, please reply. Forgive for my poor English.\n> >\n> > Your English is much better than my Chinese.  Thank you for taking the\n> > time to write this.\n> >\n> > I am still reading and trying to completely understand your proposal\n> > but I wanted to make one observation:\n> >\n> >> \u9274\u4e8e\u6700\u521d\u7684\u6bd4\u7279\u5e01\u534f\u8bae\u5e76\u672a\u8003\u8651\u4e0d\u53c2\u4e0e\u6316\u77ff\u7684\u94b1\u5305\u8282\u70b9\uff0c\u5bfc\u81f4\u8fd9\u4e9b\u94b1\u5305\u8282\u70b9\u7684\u534f\u8bae\u5347\u7ea7\u662f\u88ab\u52a8\u7684\uff0c\u61d2\u60f0\u7684\u3002\n> \u5f53\u5728\u5347\u7ea7\u65b9\u5411\u4e0a\u51fa\u73b0\u5206\u6b67\u65f6\uff0c\u77ff\u5de5\u4e5f\u4e0d\u613f\u610f\u5728\u9519\u8bef\u7684\u94fe\u4e0a\u6316\u77ff\uff0c\u4f46\u77ff\u5de5\u53c8\u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u6b63\u5728\u5ef6\u957f\u7684\u94fe\u662f\u88ab\u94b1\u5305\u8282\u70b9\u5e7f\u6cdb\u63a5\u53d7\n> \u7684\u94fe\u3002\u8fd9\u5c06\u5f71\u54cd\u94b1\u5305\u8282\u70b9\u7684\u5b89\u5168\u3002<br/>\n> >> In view of the fact that the original Bitcoin consensus did not\n> consider the non-mining wallet nodes(as mentioned above), the result is\n> that upgrading the consensus of these wallet nodes is passive and lazy.\n> >\n> > This is not true. Non-mining wallet nodes were considered, and their\n> > upgrade practices are not usually slower than miners.\n> >\n>\n> \u6211\u9488\u5bf9\u7684\u662f\u61d2\u60f0\u548c\u88ab\u52a8\u7684\u8282\u70b9\uff0c\u800c\u975e\u6d3b\u8dc3\u505a\u51fa\u9009\u62e9\u7684\u8282\u70b9\u3002\u7528\u6237\u613f\u610f\u7684\u8bdd\u603b\u662f\u53ef\u4ee5\u505a\u51fa\u81ea\u5df1\u7684\u9009\u62e9\u3002\u5e76\u6ca1\u6709\u529e\u6cd5\u6765\u5f3a\u8feb\u5e76\u4e0d\u8ba4\u540c\u7684\u4eba\u5f62\u6210\u5171\u8bc6\u3002\n> I mean lazy and passive ones I addressed. Not the one actively chose\n> whichever solution they like. Users always have their solution. There\u2019s no\n> way to force a union if they are not together.\n>\n> > Even in the very first version of the software it did not mine unless\n> > the user went into the settings and explicitly turned it on or used a\n> > command-line option.  By default, every installation of Bitcoin was a\n> > non-mining wallet node.\n> >\n>\n> \u5728\u4e2d\u672c\u806a\u767d\u76ae\u4e66\u4e2d\u7b2c\u4e94\u7ae0\u7684\u5b9a\u4e49\u4e0b\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u9700\u8981\u6316\u77ff\u3002\u5982\u679c\u54b1\u4fe9\u5bf9\u6b64\u5b58\u5728\u5206\u6b67\uff0c\u6211\u5e76\u65e0\u6cd5\u8bf4\u670d\u4f60\u3002\n> From the definition of Satishi Nakamoto, Section 5, each node mines. If\n> that\u2019s the disagreement between us, there\u2019s no more I can convince you.\n>\n> > The enforcement of the system's rules by users broadly, and not just\n> > miners, is specifically described in the white paper (section 8,\n> > paragraph 2, it especially clear in the last sentence).  This is\n> > critical for the security of Bitcoin especially with the current\n> > degree of centralization in pools.  Without it, Bitcoin's security\n> > would look a lot more like the Ripple system.\n> >\n>\n> \u662f\u7684\uff0c\u7528\u6237\u6c38\u8fdc\u90fd\u6709\u9009\u62e9\uff0c\u5e76\u53ef\u4ee5\u629b\u5f03\u90a3\u4e9b\u8282\u70b9\u3002\u8fd9\u4e2a BIP \u5e76\u6ca1\u6709\u53cd\u5bf9\u8fd9\u4e9b\u7528\u6237\u8fd9\u4e48\u505a\u3002\u53ea\u6709\u90a3\u4e9b\u88ab\u52a8\u7684\u94b1\u5305\u7528\u6237\uff0c\n> \u4ed6\u4eec\u9700\u8981\u77e5\u9053\u5fc5\u987b\u505a\u51fa\u4e00\u4e2a\u9009\u62e9\u3002\uff08\u800c\u4e0d\u662f\u88ab\u52a8\u7684\u8ddf\u968f\u9ed8\u8ba4\u7684\u7b56\u7565\uff09\n> Yes, users always have choice that they can abandon the nodes. This BIP\n> does\u2019t go against them. I mean only the one(especially wallets) that\u2019s\n> passive, they need to know there\u2019s a choice and pick one.\n>\n> \u8fd9\u4e2a BIP \u53ef\u4ee5\u88ab\u5e94\u7528\u4e8e\u51e0\u4e4e\u4efb\u4f55\u7684\u5347\u7ea7\u4e0a\uff0c\u5305\u62ec\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u7684\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u6269\u5bb9\uff0c\u6d8c\u73b0\u5171\u8bc6\uff0c\u516b\u5146\u6269\u5bb9\u7b49\u3002\u4f46\u8fd9\u4e9b\u5347\u7ea7\u5e76\u4e0d\u662f\u91cd\u70b9\u3002\n> This BIP can be applied to almost any upgrade, including Segwit, Segwit2x,\n> 2m, ec, 8m\u2026 but the upgrade is not the key point.\n>\n> \u5230\u5e95\u6211\u4eec\u7684\u7528\u6237\u662f\u5426\u771f\u7684\u62e5\u6709\u9009\u62e9\uff1f\n> Did the users have any real choice?\n>\n> \u6211\u5e76\u4e0d\u80fd\u7406\u89e3\u4ed6\u4eec\u76f8\u4fe1\u5927\u90e8\u5206\u77ff\u5de5\uff08\u5c31\u50cf\u5f53\u524d\u4e00\u6837\uff09\uff0c\u4f46\u62d2\u7edd\u8fd9\u4e9b\u591a\u6570\u77ff\u5de5\u5bf9\u534f\u8bae\u6539\u53d8\u7684\u6295\u7968\u7ed3\u679c\u3002\n> I don\u2019t see the reason they trust the majority miners(as they do today)\n> but refuse the vote for upcoming protocol upgrade.\n>\n\nTo be clear, Bitcoin is not a democracy - if you find yourself using the\nterm \"voting\" then you may be misunderstanding how consensus forms. Once a\nfeature has been vetted and the code is deployed, miners may signal that\nthey are ready to enforce new rules. If for some reason miners are too\n\"passive or lazy\" or wish to \"veto\" the activation of the new rules, users\nmay choose to circumvent said veto by refusing to accept blocks that do not\nshow readiness for enforcing the new rules.\n\n\n>\n> \u5bf9\u94b1\u5305\u7528\u6237\u7684\u9009\u62e9\uff0c\u662f\u4ed6\u4eec\u662f\u5426\u76f8\u4fe1\u591a\u6570\u77ff\u5de5\u3002\u5982\u679c\u4ed6\u4eec\u4e0d\u76f8\u4fe1\uff0c\u53ef\u4ee5\u901a\u8fc7\u5206\u53c9\u6765\u6d88\u9664\u6389\u77ff\u5de5\u3002\n> This choice for wallet users right now, is wether to follow the 51%\n> majority miners. If they don\u2019t, they can have their fork that get rid of\n> miners.\n>\n> \u5982\u679c\u4ed6\u4eec\u4ecd\u65e7\u76f8\u4fe1\u77ff\u5de5\uff0c\u90a3\u4e48\u53ef\u4ee5\u7559\u4e0b\u6765\u5e76\u8ddf\u968f\u77ff\u5de5\u5c06\u6765\u7684\u534f\u8bae\u6539\u53d8\u3002\n> If they do trust the majority miners, they stay and follow the vote for\n> upcoming protocol upgrade.\n>\n> \u6240\u4ee5\u95ee\u9898\u5728\u4e8e\uff1a\u6bd4\u7279\u5e01\u7684\u5f00\u53d1\u8005\u3001\u7528\u6237\u3001\u62e5\u6709\u8005\u3001\u670d\u52a1\u63d0\u4f9b\u8005\u3001\u751a\u81f3\u77ff\u5de5\uff0c\u662f\u5426\uff08\u4ecd\u7136\uff09\u5982\u767d\u76ae\u4e66\u4e2d\u63cf\u8ff0\u7684\u5bf9\u5927\u591a\u6570\u77ff\u5de5\u62e5\u6709\u4fe1\u4efb\u3002\n> So the questions is: Do the bitcoin developers, users, holders, service\n> provides, even miners, (still) have faith in the majority of miners as\n> designed in the white paper?\n>\n>\nThere is a fundamental misconception regarding this point - the white paper\nrefers to majority hashpower needing to be honest with regard to\ndetermining the correct chain within the context of many possible /valid/\nchain forks. It is not referring to using hashpower to determine the\ncorrect chain amongst an infinitely variable number of currently invalid\nchain forks. Bitcoin ecosystem participants should not have faith in miners\n(or any other entity) when it comes to choosing the consensus rules they\nwish to enforce.\n\n\n> > Frequently it is the miners that are \"passive and lazy\" in upgrading.\n> > In some cases when new versions have had major improvements specific\n> > to mining (such as for 0.8) miners upgraded much faster than other\n> > nodes. But often, it is the other way around and miners adopt new\n> > versions much slower than other nodes. If you look at block\n> > construction today you will see that many miners are running highly\n> > outdated node software which is more than one or even two years old.\n> > (and as a result, they lose out on a considerable amount of\n> > transaction fees.)\n> >\n>\n> \u6211\u4e2a\u4eba\u5c06\u8fd9\u79cd\u884c\u4e3a\u89c6\u4f5c\u5bf9\u5f53\u524d\u7248\u672c\u7684\u53cd\u5bf9\u7968\u3002\u8fd9\u4e2aBIP\u4e5f\u8003\u8651\u4e86\u8fd9\u79cd\u60c5\u51b5\uff0c\u60a8\u662f\u5426\u6ce8\u610f\u5230\u77ff\u5de5\u5e94\u8be5\u5148\u5347\u7ea7\uff08\u907f\u514d\u88ab\u5b64\u7acb\uff09\uff0c\u8fd9\u662f\u5426\u89e3\u51b3\u4e86\u4f60\u63d0\u51fa\u7684\u95ee\u9898\u5462\uff1f\n> I personally take that as VETO to current version. This BIP also address\n> this situation. Did you notice that miners should be upgraded first? Did\n> that solve the problem you mentioned above?\n>\n> \u5982\u679c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u65b9\u6cd5\u8ba9\u6240\u6709\u77ff\u5de5\u81f3\u5c11\u90fd\u8981\u5347\u7ea7\u5230\u76f8\u540c\u7684\u5171\u8bc6\u7248\u672c\u5e76\u5f00\u59cb\u5bf9\u5c06\u6765\u7684\u5347\u7ea7\u6295\u7968\uff0c\u90a3\u5e94\u8be5\u4e0d\u4f1a\u6709\u4efb\u4f55\u95ee\u9898\u3002\n> \u9664\u975e\u77ff\u5de5\u5e0c\u671b\u8fdb\u884c\u7684\u6295\u7968\uff0c\u4e0d\u662f\u67d0\u4e9b\u4eba\u5e0c\u671b\u770b\u5230\u7684\u6295\u7968\u3002\n> If we can use this method to at least make miners upgraded to the same\n> consensus version and start to vote for the upcoming changes, that would\n> solve the problem for the passive behavior. Unless the vote miners wish to\n> hold, is not in the wishlist of someone.\n>\n> > In fact, many miners have the most severe form of passive behavior:\n> > they do not run a node at all but simply sell their hash power to\n> > pools (which themselves are often slow to upgrade).  By comparison,\n> > http://luke.dashjr.org/programs/bitcoin/files/charts/branches.html 95%\n> > of reachable nodes are running software now from the last year and a\n> > half.\n> >\n> > I do not, however, believe that it is a problem that anyone is slow to\n> upgrade.\n> >\n> > Reliability cannot be maintained in infrastructure if it is rapidly\n> > changing.  A normal deployment process for major systems\n> > infrastructure outside of Bitcoin usually takes months because time\n> > must be given to test and find bugs.\n> >\n> > Miners depend on their income from mining and interruptions can be\n> > very costly.  Many pools are also involved with altcoins which are\n> > constantly breaking and they have their attention directed elsewhere\n> > and cannot quickly spare the time required to upgrade their software.\n> > These delays are the natural consequence of a decentralized system\n> > where no one has the power to force other people to adopt their\n> > priorities.\n> >\n> > If you look at the deployment processes of major internet protocols,\n> > HTTP2, new versions of SSH, BGP,  or IP itself you will find that\n> > upgrades often happen slower than the entire life of Bitcoin so far--\n> > and none of these protocols have the difficult consistency challenges\n> > of Bitcoin or as much risk of irreparable financial loss if things go\n> > wrong.\n> >\n> > Because many people in the Bitcoin community appears to expect\n> > upgrades much faster than even centralized ISP backbones upgrade their\n> > router software I think they have unrealistic expectations with how\n> > fast upgrading can occur while preserving stability, security, and\n> > decentralization and unrealistic expectations of how fast upgrading\n> > will occur so long as no one has the ability to force other people to\n> > run their upgrades.\n> >\n> > I look forward to competing my understanding of your proposal.\n> >\n> > Cheers,\n>\n> I think the divergency is from the different definition of bitcoin. If no\n> common understanding, let\u2019s get one from the white paper, together.\n>\n> Regards\n>\n> LIN Zheming\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170614/d3d09d0c/attachment-0001.html>"
            },
            {
                "author": "Zheming Lin",
                "date": "2017-06-14T18:29:35",
                "message_text_only": "Hi Jameson:\n\n> \u5728 2017\u5e746\u670815\u65e5\uff0c01:20\uff0cJameson Lopp <jameson.lopp at gmail.com <mailto:jameson.lopp at gmail.com>> \u5199\u9053\uff1a\n> \n> \n> \n> On Wed, Jun 14, 2017 at 9:39 AM, Zheming Lin via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n> \n> > \u5728 2017\u5e746\u670814\u65e5\uff0c02:11\uff0cGregory Maxwell <greg at xiph.org <mailto:greg at xiph.org>> \u5199\u9053\uff1a\n> >\n> > On Tue, Jun 13, 2017 at 2:23 AM, Zheming Lin via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n> > The enforcement of the system's rules by users broadly, and not just\n> > miners, is specifically described in the white paper (section 8,\n> > paragraph 2, it especially clear in the last sentence).  This is\n> > critical for the security of Bitcoin especially with the current\n> > degree of centralization in pools.  Without it, Bitcoin's security\n> > would look a lot more like the Ripple system.\n> >\n> \n> \u662f\u7684\uff0c\u7528\u6237\u6c38\u8fdc\u90fd\u6709\u9009\u62e9\uff0c\u5e76\u53ef\u4ee5\u629b\u5f03\u90a3\u4e9b\u8282\u70b9\u3002\u8fd9\u4e2a BIP \u5e76\u6ca1\u6709\u53cd\u5bf9\u8fd9\u4e9b\u7528\u6237\u8fd9\u4e48\u505a\u3002\u53ea\u6709\u90a3\u4e9b\u88ab\u52a8\u7684\u94b1\u5305\u7528\u6237\uff0c\u4ed6\u4eec\u9700\u8981\u77e5\u9053\u5fc5\u987b\u505a\u51fa\u4e00\u4e2a\u9009\u62e9\u3002\uff08\u800c\u4e0d\u662f\u88ab\u52a8\u7684\u8ddf\u968f\u9ed8\u8ba4\u7684\u7b56\u7565\uff09\n> Yes, users always have choice that they can abandon the nodes. This BIP does\u2019t go against them. I mean only the one(especially wallets) that\u2019s passive, they need to know there\u2019s a choice and pick one.\n> \n> \u8fd9\u4e2a BIP \u53ef\u4ee5\u88ab\u5e94\u7528\u4e8e\u51e0\u4e4e\u4efb\u4f55\u7684\u5347\u7ea7\u4e0a\uff0c\u5305\u62ec\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u7684\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u6269\u5bb9\uff0c\u6d8c\u73b0\u5171\u8bc6\uff0c\u516b\u5146\u6269\u5bb9\u7b49\u3002\u4f46\u8fd9\u4e9b\u5347\u7ea7\u5e76\u4e0d\u662f\u91cd\u70b9\u3002\n> This BIP can be applied to almost any upgrade, including Segwit, Segwit2x, 2m, ec, 8m\u2026 but the upgrade is not the key point.\n> \n> \u5230\u5e95\u6211\u4eec\u7684\u7528\u6237\u662f\u5426\u771f\u7684\u62e5\u6709\u9009\u62e9\uff1f\n> Did the users have any real choice?\n> \n> \u6211\u5e76\u4e0d\u80fd\u7406\u89e3\u4ed6\u4eec\u76f8\u4fe1\u5927\u90e8\u5206\u77ff\u5de5\uff08\u5c31\u50cf\u5f53\u524d\u4e00\u6837\uff09\uff0c\u4f46\u62d2\u7edd\u8fd9\u4e9b\u591a\u6570\u77ff\u5de5\u5bf9\u534f\u8bae\u6539\u53d8\u7684\u6295\u7968\u7ed3\u679c\u3002\n> I don\u2019t see the reason they trust the majority miners(as they do today) but refuse the vote for upcoming protocol upgrade.\n> \n> To be clear, Bitcoin is not a democracy - if you find yourself using the term \"voting\" then you may be misunderstanding how consensus forms. Once a feature has been vetted and the code is deployed, miners may signal that they are ready to enforce new rules. If for some reason miners are too \"passive or lazy\" or wish to \"veto\" the activation of the new rules, users may choose to circumvent said veto by refusing to accept blocks that do not show readiness for enforcing the new rules.\n\nHow does the users show their opinion? They can fork away and leave. But what remains will be united. Are you afraid of the united users or the fork?\n\nI agree with you that the \u201cvote\u201d is not accurate. Could you kindly suggest an other word for that?\n\nI think users should have choice to follow the miners or not. Do you agree with this or not?\n\n>  \n> \n> \u5bf9\u94b1\u5305\u7528\u6237\u7684\u9009\u62e9\uff0c\u662f\u4ed6\u4eec\u662f\u5426\u76f8\u4fe1\u591a\u6570\u77ff\u5de5\u3002\u5982\u679c\u4ed6\u4eec\u4e0d\u76f8\u4fe1\uff0c\u53ef\u4ee5\u901a\u8fc7\u5206\u53c9\u6765\u6d88\u9664\u6389\u77ff\u5de5\u3002\n> This choice for wallet users right now, is wether to follow the 51% majority miners. If they don\u2019t, they can have their fork that get rid of miners.\n> \n> \u5982\u679c\u4ed6\u4eec\u4ecd\u65e7\u76f8\u4fe1\u77ff\u5de5\uff0c\u90a3\u4e48\u53ef\u4ee5\u7559\u4e0b\u6765\u5e76\u8ddf\u968f\u77ff\u5de5\u5c06\u6765\u7684\u534f\u8bae\u6539\u53d8\u3002\n> If they do trust the majority miners, they stay and follow the vote for upcoming protocol upgrade.\n> \n> \u6240\u4ee5\u95ee\u9898\u5728\u4e8e\uff1a\u6bd4\u7279\u5e01\u7684\u5f00\u53d1\u8005\u3001\u7528\u6237\u3001\u62e5\u6709\u8005\u3001\u670d\u52a1\u63d0\u4f9b\u8005\u3001\u751a\u81f3\u77ff\u5de5\uff0c\u662f\u5426\uff08\u4ecd\u7136\uff09\u5982\u767d\u76ae\u4e66\u4e2d\u63cf\u8ff0\u7684\u5bf9\u5927\u591a\u6570\u77ff\u5de5\u62e5\u6709\u4fe1\u4efb\u3002\n> So the questions is: Do the bitcoin developers, users, holders, service provides, even miners, (still) have faith in the majority of miners as designed in the white paper?\n> \n>  \n> There is a fundamental misconception regarding this point - the white paper refers to majority hashpower needing to be honest with regard to determining the correct chain within the context of many possible /valid/ chain forks. It is not referring to using hashpower to determine the correct chain amongst an infinitely variable number of currently invalid chain forks. Bitcoin ecosystem participants should not have faith in miners (or any other entity) when it comes to choosing the consensus rules they wish to enforce.\n> \n\nArrrgh. I think in the BIP, the miners just invalids tx version 1 temporarily. That\u2019s a \u201csoft fork\u201d right? If they dislike the idea, they can leave as always.\n\n\nRegards\n\nLIN Zheming\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170615/eb46818c/attachment-0001.html>"
            },
            {
                "author": "Zheming Lin",
                "date": "2017-06-14T18:30:32",
                "message_text_only": "Hi Jameson:\n\n> \u5728 2017\u5e746\u670815\u65e5\uff0c01:20\uff0cJameson Lopp <jameson.lopp at gmail.com <mailto:jameson.lopp at gmail.com>> \u5199\u9053\uff1a\n> \n> \n> \n> On Wed, Jun 14, 2017 at 9:39 AM, Zheming Lin via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n> \n> > \u5728 2017\u5e746\u670814\u65e5\uff0c02:11\uff0cGregory Maxwell <greg at xiph.org <mailto:greg at xiph.org>> \u5199\u9053\uff1a\n> >\n> > On Tue, Jun 13, 2017 at 2:23 AM, Zheming Lin via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n> > The enforcement of the system's rules by users broadly, and not just\n> > miners, is specifically described in the white paper (section 8,\n> > paragraph 2, it especially clear in the last sentence).  This is\n> > critical for the security of Bitcoin especially with the current\n> > degree of centralization in pools.  Without it, Bitcoin's security\n> > would look a lot more like the Ripple system.\n> >\n> \n> \u662f\u7684\uff0c\u7528\u6237\u6c38\u8fdc\u90fd\u6709\u9009\u62e9\uff0c\u5e76\u53ef\u4ee5\u629b\u5f03\u90a3\u4e9b\u8282\u70b9\u3002\u8fd9\u4e2a BIP \u5e76\u6ca1\u6709\u53cd\u5bf9\u8fd9\u4e9b\u7528\u6237\u8fd9\u4e48\u505a\u3002\u53ea\u6709\u90a3\u4e9b\u88ab\u52a8\u7684\u94b1\u5305\u7528\u6237\uff0c\u4ed6\u4eec\u9700\u8981\u77e5\u9053\u5fc5\u987b\u505a\u51fa\u4e00\u4e2a\u9009\u62e9\u3002\uff08\u800c\u4e0d\u662f\u88ab\u52a8\u7684\u8ddf\u968f\u9ed8\u8ba4\u7684\u7b56\u7565\uff09\n> Yes, users always have choice that they can abandon the nodes. This BIP does\u2019t go against them. I mean only the one(especially wallets) that\u2019s passive, they need to know there\u2019s a choice and pick one.\n> \n> \u8fd9\u4e2a BIP \u53ef\u4ee5\u88ab\u5e94\u7528\u4e8e\u51e0\u4e4e\u4efb\u4f55\u7684\u5347\u7ea7\u4e0a\uff0c\u5305\u62ec\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u7684\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u6269\u5bb9\uff0c\u6d8c\u73b0\u5171\u8bc6\uff0c\u516b\u5146\u6269\u5bb9\u7b49\u3002\u4f46\u8fd9\u4e9b\u5347\u7ea7\u5e76\u4e0d\u662f\u91cd\u70b9\u3002\n> This BIP can be applied to almost any upgrade, including Segwit, Segwit2x, 2m, ec, 8m\u2026 but the upgrade is not the key point.\n> \n> \u5230\u5e95\u6211\u4eec\u7684\u7528\u6237\u662f\u5426\u771f\u7684\u62e5\u6709\u9009\u62e9\uff1f\n> Did the users have any real choice?\n> \n> \u6211\u5e76\u4e0d\u80fd\u7406\u89e3\u4ed6\u4eec\u76f8\u4fe1\u5927\u90e8\u5206\u77ff\u5de5\uff08\u5c31\u50cf\u5f53\u524d\u4e00\u6837\uff09\uff0c\u4f46\u62d2\u7edd\u8fd9\u4e9b\u591a\u6570\u77ff\u5de5\u5bf9\u534f\u8bae\u6539\u53d8\u7684\u6295\u7968\u7ed3\u679c\u3002\n> I don\u2019t see the reason they trust the majority miners(as they do today) but refuse the vote for upcoming protocol upgrade.\n> \n> To be clear, Bitcoin is not a democracy - if you find yourself using the term \"voting\" then you may be misunderstanding how consensus forms. Once a feature has been vetted and the code is deployed, miners may signal that they are ready to enforce new rules. If for some reason miners are too \"passive or lazy\" or wish to \"veto\" the activation of the new rules, users may choose to circumvent said veto by refusing to accept blocks that do not show readiness for enforcing the new rules.\n\nHow does the users show their opinion? They can fork away and leave. But what remains will be united. Are you afraid of the united users or the fork?\n\nI agree with you that the \u201cvote\u201d is not accurate. Could you kindly suggest an other word for that?\n\nI think users should have choice to follow the miners or not. Do you agree with this or not?\n\n>  \n> \n> \u5bf9\u94b1\u5305\u7528\u6237\u7684\u9009\u62e9\uff0c\u662f\u4ed6\u4eec\u662f\u5426\u76f8\u4fe1\u591a\u6570\u77ff\u5de5\u3002\u5982\u679c\u4ed6\u4eec\u4e0d\u76f8\u4fe1\uff0c\u53ef\u4ee5\u901a\u8fc7\u5206\u53c9\u6765\u6d88\u9664\u6389\u77ff\u5de5\u3002\n> This choice for wallet users right now, is wether to follow the 51% majority miners. If they don\u2019t, they can have their fork that get rid of miners.\n> \n> \u5982\u679c\u4ed6\u4eec\u4ecd\u65e7\u76f8\u4fe1\u77ff\u5de5\uff0c\u90a3\u4e48\u53ef\u4ee5\u7559\u4e0b\u6765\u5e76\u8ddf\u968f\u77ff\u5de5\u5c06\u6765\u7684\u534f\u8bae\u6539\u53d8\u3002\n> If they do trust the majority miners, they stay and follow the vote for upcoming protocol upgrade.\n> \n> \u6240\u4ee5\u95ee\u9898\u5728\u4e8e\uff1a\u6bd4\u7279\u5e01\u7684\u5f00\u53d1\u8005\u3001\u7528\u6237\u3001\u62e5\u6709\u8005\u3001\u670d\u52a1\u63d0\u4f9b\u8005\u3001\u751a\u81f3\u77ff\u5de5\uff0c\u662f\u5426\uff08\u4ecd\u7136\uff09\u5982\u767d\u76ae\u4e66\u4e2d\u63cf\u8ff0\u7684\u5bf9\u5927\u591a\u6570\u77ff\u5de5\u62e5\u6709\u4fe1\u4efb\u3002\n> So the questions is: Do the bitcoin developers, users, holders, service provides, even miners, (still) have faith in the majority of miners as designed in the white paper?\n> \n>  \n> There is a fundamental misconception regarding this point - the white paper refers to majority hashpower needing to be honest with regard to determining the correct chain within the context of many possible /valid/ chain forks. It is not referring to using hashpower to determine the correct chain amongst an infinitely variable number of currently invalid chain forks. Bitcoin ecosystem participants should not have faith in miners (or any other entity) when it comes to choosing the consensus rules they wish to enforce.\n> \n\nArrrgh. I think in the BIP, the miners just invalids tx version 1 temporarily. That\u2019s a \u201csoft fork\u201d right? If they dislike the idea, they can leave as always.\n\n\nRegards\n\nLIN Zheming\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170615/68cc0bfb/attachment.html>"
            },
            {
                "author": "James Hilliard",
                "date": "2017-06-13T07:19:24",
                "message_text_only": "On Tue, Jun 13, 2017 at 1:50 AM, Zheming Lin <heater at gmail.com> wrote:\n> Hi James:\n>\n> Thank you very much for detailed feedback. Sorry for my understanding of\n> English being poor. I\u2019ll try to answer that.\n>\n>\n> \u5728 2017\u5e746\u670813\u65e5\uff0c13:44\uff0cJames Hilliard <james.hilliard1 at gmail.com> \u5199\u9053\uff1a\n>\n> On Mon, Jun 12, 2017 at 9:23 PM, Zheming Lin via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> The BIP is described using Chinese and English. If any part is missing or\n> need more specific, please reply. Forgive for my poor English.\n>\n> This method will incorporate any upgrade that affects non-mining nodes. They\n> should beware that the rule has been changed.\n>\n> TLDR: Major miners activate and orphan the minor. That ensures all miners\n> upgrades. Then invalid the tx from not upgrading nodes. Nodes must upgrade\n> (with other protocol upgrade codes) in order to work. Then the final miner\n> vote over protocol upgrade, with all nodes has the same upgraded codes.\n>\n> ==Motivation==\n>\n> \u9274\u4e8e\u6700\u521d\u7684\u6bd4\u7279\u5e01\u534f\u8bae\u5e76\u672a\u8003\u8651\u4e0d\u53c2\u4e0e\u6316\u77ff\u7684\u94b1\u5305\u8282\u70b9\uff0c\u5bfc\u81f4\u8fd9\u4e9b\u94b1\u5305\u8282\u70b9\u7684\u534f\u8bae\u5347\u7ea7\u662f\u88ab\u52a8\u7684\uff0c\u61d2\u60f0\u7684\u3002\u5f53\u5728\u5347\u7ea7\u65b9\u5411\u4e0a\u51fa\u73b0\u5206\u6b67\u65f6\uff0c\u77ff\u5de5\u4e5f\u4e0d\u613f\u610f\u5728\u9519\u8bef\u7684\u94fe\u4e0a\u6316\u77ff\uff0c\u4f46\u77ff\u5de5\u53c8\u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u6b63\u5728\u5ef6\u957f\u7684\u94fe\u662f\u88ab\u94b1\u5305\u8282\u70b9\u5e7f\u6cdb\u63a5\u53d7\u7684\u94fe\u3002\u8fd9\u5c06\u5f71\u54cd\u94b1\u5305\u8282\u70b9\u7684\u5b89\u5168\u3002<br/>\n> In view of the fact that the original Bitcoin consensus did not consider the\n> non-mining wallet nodes(as mentioned above), the result is that upgrading\n> the consensus of these wallet nodes is passive and lazy. When there is\n> disagreement in the direction of the upgrade, the miners have no mechanism\n> to ensure that the chain being extended is the chain widely accepted by the\n> wallet nodes. This also adversely affects the security of the wallet\n> nodes.<br/>\n>\n> Wallet nodes being able to fully validate and choose whether or not to\n> accept a particular chain is an important part of bitcoins security\n> model.\n>\n>\n> \u662f\u7684\u6211\u8ba4\u4e3a\u8fd9\u4e9b\u8282\u70b9\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u6b64\u4e0d\u613f\u610f\u770b\u5230\u8fd9\u4e9b\u8282\u70b9\u56e0\u4e3a\u65e0\u6cd5\u9884\u89c1\u5230\u7f51\u7edc\u4e0a\u53ef\u80fd\u53d1\u751f\u7684\u6539\u53d8\u800c\u8499\u53d7\u635f\u5931\u3002\u8fd9\u4e9b\u8282\u70b9\u4f9d\u7136\u62e5\u6709\u9009\u62e9\u7684\u6743\u5229\uff0c\u6bd4\u5982\u901a\u8fc7\u7c7b\u4f3c\u4e8e BIP148\n> \u7684\u65b9\u6cd5\u3002\n>\n> I admitted that these nodes a very important. so we don\u2019t want these nodes\n> suffer financial loss by undetectable network change. These nodes always\n> have choice like BIP148.\n>\n>\n> \u4f7f\u7528\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5728\u4fdd\u8bc1\u94b1\u5305\u8282\u70b9\u8d44\u4ea7\u5b89\u5168\u7684\u60c5\u51b5\u4e0b\uff0c\u4e14\u901a\u8fc7\u589e\u52a0\u6fc0\u52b1\u8ba9\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u534f\u8bae\u3002\u4e00\u65e6\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u534f\u8bae\uff0c\u4fdd\u8bc1\u77ff\u5de5\u8282\u70b9\u4e0d\u4ec5\u5de5\u4f5c\u5728\u7b97\u529b\u6700\u957f\u94fe\u4e0a\uff0c\u8fd8\u5de5\u4f5c\u5728\u6bd4\u7279\u5e01\u751f\u6001\u73af\u5883\u4e2d\u5176\u4ed6\u94b1\u5305\u8282\u70b9\u6240\u4f7f\u7528\u7684\u6700\u957f\u94fe\u4e0a\u3002\u5728\u4e2d\u672c\u806a\u5171\u8bc6\u4e0b\u4e0d\u4f1a\u51fa\u73b0\u5206\u53c9\uff0c\u4ee5\u5b9e\u73b0\u6e10\u8fdb\u5f0f\u7684\u534f\u8bae\u5347\u7ea7\u3002<br/>\n>\n> Apart from ensuring the asset security of wallet nodes, this method can be\n> used to provide additional incentives to upgrade the protocol for the wallet\n> nodes. Once the wallet nodes upgrade their protocol, the miners' nodes can\n> be guaranteed to work - not only on the longest chain, but also on the\n> longest chain used by other wallet nodes in the broader bitcoin sphere.\n> Under the Nakamoto Consensus, there will be no persistent forks as protocol\n> upgrades can be phased in.<br/>\n>\n> There is no way to guarantee a wallet node will accept a particular\n> block since that is always up to the user.\n>\n>\n> \u6211\u4eec\u65e0\u6cd5\u5bf9\u6b64\u8fdb\u884c\u4fdd\u8bc1\u3002\u4f46\u662f\u6211\u4eec\u80fd\u591f\u63d0\u4f9b\u4e00\u79cd\u8ba9\u8fd9\u4e9b\u8282\u70b9\u4e86\u89e3\u5e76\u53c2\u4e0e\u90e8\u7f72\u6539\u53d8\u7684\u6fc0\u52b1\u3002\n> We can not have any guarantee. but we can have incentives that they\n> participate and be aware about the change happening.\n> \u7528\u6237\u603b\u662f\u53ef\u4ee5\u8fdb\u884c\u9009\u62e9\u3002\n> Users always have choice.\n>\n>\n> ==Specification==\n>\n> 1. \u6316\u77ff\u8282\u70b9\u5c06\u4f7f\u7528 versionbits \u7248\u672c\u4f4d\u6765\u5b9a\u4e49\u652f\u6301\u4fe1\u53f7\u3002BIP \u751f\u6548\u65f6\uff0c\u6240\u6709\u533a\u5757\u9700\u8981\u4f7f\u7528\u5236\u5b9a\u7684 nVersion \u6765\u53d1\u9001\u4fe1\u53f7<br/>\n> 2. \u6316\u77ff\u8282\u70b9\u5c06\u4f7f\u7528 tx version \u6765\u5b9a\u4e49\u5f53\u524d\u7684\u4ea4\u6613\u7248\u672c\u3002\u5f53\u524d\u7684 tx version \u662f 1\uff0c\u5c06\u5141\u8bb8 tx version \u4e3a 2\n> \u7684\u4ea4\u6613\uff0c\u5e76\u5728\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f\u4e4b\u540e\uff0c\u4f7f tx version \u4e3a 1 \u7684\u4ea4\u6613\u975e\u6cd5\u3002<br/>\n>\n> 1. Mining nodes signal by setting a version bit. While this BIP is active,\n> all blocks must set the chosen nVersion.<br/>\n> 2. Mining nodes will use tx version to define current version transactions.\n> Current tx version is 1, and tx version 2 will be allowed. After the second\n> grace period, tx version 1 will be regarded as invalid.<br/>\n>\n> Sounds like this would cause issues with pre-signed time locked\n> transactions.\n>\n>\n> \u6211\u4eec\u53ef\u4ee5\u5728\u7b2c\u56db\u9636\u6bb5\u4e2d\u91cd\u65b0\u5141\u8bb8\u8fd9\u4e9b\u4ea4\u6613\u3002\u65e0\u8bba\u5347\u7ea7\u662f\u5426\u6210\u529f\u6fc0\u6d3b\uff0c\u4ed6\u4eec\u90fd\u9700\u8981\u4e3a\u6b64\u505a\u597d\u51c6\u5907\u3002\u4ed6\u4eec\u5e76\u4e0d\u80fd\u88ab\u4e22\u4e0b\u751a\u81f3\u88ab\u6b3a\u9a97\u4e3a\u4ec0\u4e48\u90fd\u6ca1\u6709\u53d1\u751f\u3002\n> They can be re-enable in the successful or unsuccessful activation of the\n> fourth stage. Whether or not, what they need is to be prepared for the\n> future coming. But they can\u2019t be left behind or be cheated like nothing\n> happened.\n>\n>\n>\n> ==Deployment==\n> \u534f\u8bae\u5347\u7ea7\uff0c\u5c06\u5206\u6210\u4e09\u6b65\u9010\u6b65\u5b9e\u65bd\u3002\u5e76\u6709\u4e00\u4e2a\u53ef\u9009\u7684\u7b2c\u56db\u6b65\u6765\u96c6\u6210\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\u3002<br/>\n>\n> Protocol upgrading will phase in over three stages. We can have an optional\n> fourth stage to integrate codes of protocol upgrade.<br/>\n>\n> 1. \u4fe1\u53f7\u9636\u6bb5\u3002\u6316\u77ff\u8282\u70b9\u4f7f\u7528 versionbits \u53d1\u9001\u652f\u6301\u4fe1\u53f7\u3002\u6316\u77ff\u8282\u70b9\u5728\u76d1\u6d4b\u5230 55% \u7684\u533a\u5757\u5373\u524d 1109/2016\n> \u4e2a\u533a\u5757\u5747\u53d1\u9001\u4e86\u76f8\u540c\u7684\u652f\u6301\u4fe1\u53f7\uff0c\u8fdb\u5165\u4e0b\u4e00\u9636\u6bb5\u3002<br/>\n> 2. \u77ff\u5de5\u8282\u70b9\u5347\u7ea7\u3002\u7ecf\u8fc7\u4e86\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f 2016 \u7684\u533a\u5757\u540e\uff0c\u4e14\u603b\u4fe1\u53f7\u533a\u5757\u8d85\u8fc7\u4e86\n> 2218/4032\uff0c\u5c31\u5f00\u59cb\u4f7f\u7528\u65b0\u7684\u533a\u5757\u7248\u672c\u6253\u5305\u533a\u5757\uff0c\u5e76\u540c\u65f6\u5f00\u59cb\u5b64\u7acb\u65e7\u7248\u672c\u3002\u6b64\u65f6\u6240\u6709\u8282\u70b9\u548c\u94b1\u5305\uff0c\u5c06\u53ef\u4ee5\u4f7f\u7528\u65b0\u7248\u672c\u53f7\u53d1\u9001\u4ea4\u6613\uff0c\u540c\u65f6\u517c\u5bb9\u65e7\u7248\u672c\u53f7\u4ea4\u6613\u3002<br/>\n> 3. \u94b1\u5305\u8282\u70b9\u5347\u7ea7\u3002\u5728\u6316\u77ff\u8282\u70b9\u76d1\u6d4b\u5230\u7b2c\u4e8c\u4e2a\u5bbd\u9650\u671f 4032\n> \u4e2a\u8fde\u7eed\u7684\u65b0\u7248\u672c\u7684\u533a\u5757\u540e\uff0c\u5f00\u59cb\u62d2\u7edd\u65e7\u7248\u672c\u53f7\u7684\u4ea4\u6613\uff0c\u53ea\u6253\u5305\uff0f\u8f6c\u64ad\u65b0\u7248\u672c\u53f7\u7684\u4ea4\u6613\u3002\u540c\u65f6\u5c06\u4ece\u5185\u5b58\u6c60\u4e2d\u5220\u9664\u65e7\u7248\u672c\u53f7\u7684\u4ea4\u6613\u3002<br/>\n> 4.\n> \uff08\u53ef\u9009\u7684\uff09\u534f\u8bae\u5347\u7ea7\u3002\u5728\u7b2c\u4e09\u9636\u6bb5\u4e2d\u5305\u542b\u6709\u7b2c\u56db\u9636\u6bb5\u7684\u5347\u7ea7\u4ee3\u7801\u3002\u5f53\u6211\u4eec\u786e\u4fdd\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u5230\u652f\u6301\u65b0\u7248\u672c\u4ea4\u6613\u540e\uff0c\u5fc5\u7136\u5305\u542b\u4e86\u7b2c\u56db\u9636\u6bb5\u7684\u5347\u7ea7\u4ee3\u7801\u3002\u5219\u6b64\u65f6\u53ef\u4ee5\u901a\u8fc7\u77ff\u5de5\u8282\u70b9\u6295\u7968\u7684\u65b9\u5f0f\u5b8c\u6210\u5168\u7f51\u7edc\u7684\u534f\u8bae\u5347\u7ea7\u3002\n>\n> 1. Signal stage: Mining nodes signal using BIP9. The next stage will be\n> activated after 55% (1109) of 2016 blocks has the signal.<br/>\n>\n> 2. Mining nodes upgrade stage: After a first grace period of 2016 blocks and\n> total signalling blocks passed 2218 of 4032 blocks, miners broadcasting\n> blocks with new versionbits in block headers will orphan blocks with old\n> versionbits. At this stage all nodes can send transactions with new\n> versionbits, and transactions with old versionbits will be compatible.<br/>\n>\n> 3. Non-mining nodes upgrade stage: after 4032 continuous blocks with new\n> versionbits, mining nodes will start to refuse transactions with old\n> versionbits. Only transactions with new versionbits can be relayed and\n> included in blocks. Transactions with old versionbits can be safely purged\n> from memory pools.<br/>\n>\n> 4. (Optional)Protocol Upgrade stage: The codes dealing with protocol upgrade\n> can be integrated in the third stage. After the non-mining nodes upgrades to\n> support newer version of transactions, the codes with protocol upgrade must\n> be included and now we can use miner vote to activate and finish this\n> upgrade.<br/>\n>\n> \u81f3\u6b64\uff0c\u534f\u8bae\u5347\u7ea7\u5b8c\u6210\u3002<br/>\n>\n> At this point, the protocol upgrade have phased in.<br/>\n>\n> ==Benefits==\n>\n> 1. \u4ec5\u9700\u8981\u591a\u6570\u7684\u77ff\u5de5\u53d1\u4fe1\u53f7\u540e\u5373\u53ef\u6fc0\u6d3b\u3002\u5728\u4e2d\u672c\u806a\u7684\u6bd4\u7279\u5e01\u8bba\u6587\u4e2d\uff0c99.9% \u7684\u53ef\u80fd\u6027\u4e0b\uff0c55% \u7684\u77ff\u5de5\u5c06\u5728 340\n> \u4e2a\u533a\u5757\u540e\u786e\u4fdd\u6210\u4e3a\u6700\u957f\u94fe\u3002\u8fd9\u5c06\u6700\u5927\u53ef\u80fd\u51cf\u5c0f\u901a\u8fc7\u63a7\u5236\u5c11\u6570\u7b97\u529b\u800c\u62d6\u5ef6\u7f51\u7edc\u5347\u7ea7\u7684\u53ef\u80fd\u6027\u3002\u6211\u4eec\u53ef\u4ee5\u9884\u89c1\u5230\u5728\u7b97\u529b\u4fe1\u53f7\u8d85\u8fc7 51%\n> \u540e\uff0c\u6316\u77ff\u8282\u70b9\u5c06\u8fc5\u901f\u7684\u5728\u7b2c\u4e00\u4e2a\u5bbd\u9650\u671f\u5185\u8fdb\u884c\u5347\u7ea7\u3002<br/>\n> 2. \u5728\u4e24\u4e2a\u5bbd\u9650\u671f\u5185\uff0c\u94b1\u5305\u8282\u70b9\u4ea4\u6613\u4e0d\u53d7\u5f71\u54cd\uff0c\u6709\u8db3\u591f\u7684\u65f6\u95f4\u5347\u7ea7\u94b1\u5305\u8f6f\u4ef6\u3002<br/>\n> 3. \u7248\u672c\u4fe1\u606f\u5305\u542b\u5728 block header \u4e2d\uff0c\u5e76\u4e0d\u5f71\u54cd SPV \u6316\u77ff\u8fc7\u7a0b\u3002\uff08\u770b\u8d77\u6765\u662f\uff1f\uff09<br/>\n> 4.\n> \u5728\u4e24\u4e2a\u5bbd\u9650\u671f\u540e\uff0c\u94b1\u5305\u8282\u70b9\u5c06\u5fc5\u987b\u5347\u7ea7\u94b1\u5305\uff0c\u5426\u5219\u56e0\u6ca1\u6709\u7b97\u529b\u652f\u6301\u5c06\u65e0\u6cd5\u53d1\u9001\u4ea4\u6613\uff0c\u4e5f\u65e0\u6cd5\u786e\u8ba4\u3002\u76f8\u5bf9\u4e8e\u5728\u8282\u70b9\u95f4\u91cd\u65b0\u8fbe\u6210\u65b0\u7684\u5171\u8bc6\uff0c\u8fd9\u79cd\u72b6\u51b5\u5e76\u6ca1\u6709\u66f4\u7cdf\u7cd5\u3002<br/>\n> 5. \u94b1\u5305\u8282\u70b9\u7684\u8d26\u672c\u5c06\u5f97\u5230\u5c0a\u91cd\u548c\u4fdd\u62a4\u3002\u4f7f\u7528\u94fe\u4e0b\u94b1\u5305\u7684\u7528\u6237\u5c06\u9700\u8981\u5728\u94b1\u5305\u670d\u52a1\u63d0\u4f9b\u5546\u7684\u58f0\u660e\u4e4b\u540e\u51b3\u5b9a\u63d0\u81f3\u94fe\u4e0a\u94b1\u5305\u6216\u8ddf\u968f\u3002<br/>\n> 6.\n> \u5c06\u6765\u7684\u534f\u8bae\u5347\u7ea7\uff0c\u53ef\u4ee5\u5728\u5347\u7ea7\u5ba2\u6237\u7aef\u7248\u672c\u540c\u65f6\u7ed1\u5b9a\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\u5e76\u8fdb\u884c\u72ec\u7acb\u7684\u6fc0\u6d3b\u6295\u7968\u3002\u8fd9\u5c06\u9884\u7559\u8db3\u591f\u7684\u65f6\u95f4\u8ba9\u8282\u70b9\u5347\u7ea7\u8f6f\u4ef6\u4ee5\u652f\u6301\u65b0\u7684\u534f\u8bae\u3002\u5373\u4f7f\u77ff\u5de5\u6295\u7968\u6fc0\u6d3b\u5931\u8d25\u4e5f\u4e0d\u5f71\u54cd\u73b0\u72b6\u3002<br/>\n>\n> 1. The activation only requires majority miners signal. As described in the\n> paper by Satoshi Nakamoto, 55% miners will be in the longest chain after 340\n> blocks, with 99.9% certainty. This will minimize the possibility of delaying\n> network upgrades by controlling a small number of hashing power. We can\n> foresee that after 51% signalling, all miners will upgrade within the first\n> grace period. <br/>\n>\n> Technically soft forks can be implemented at 55% hashpower already\n> without an orphaning period(like BIP16). Those that don't upgrade\n> would just be at risk of mining invalid blocks. One would not want to\n> use this method to try and activate a controversial hard fork since\n> it's trivial for miners to false signal. The orphaning period\n> effectively forces miners to make a decision but does not necessarily\n> force them to make a particular decision since they can simply choose\n> to reject the fork and false signal.\n>\n>\n> \u5047\u4fe1\u53f7\u7684\u95ee\u9898\u5728\u6211\u770b\u6765\u65e0\u6cd5\u89e3\u51b3\u3002\u4f46\u5982\u679c\u591a\u6570\u4e0d\u540c\u610f\u8fd9\u4e2a\u6539\u53d8\uff0c\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u8fd8\u8981\u6b3a\u9a97\uff1f\u5982\u679c\u591a\u6570\u5982\u4e2d\u672c\u806a\u5171\u8bc6\u4e2d\u63cf\u8ff0\u7684\u90a3\u6837\u662f\u8bda\u5b9e\u53ef\u4fe1\u7684\uff0c\u90a3\u5c31\u4e0d\u4f1a\u6709\u4efb\u4f55\u95ee\u9898\u3002\u901a\u8fc7\u7b97\u529b\u603b\u80fd\u5206\u51fa\u80dc\u8d1f\u3002\n> False signal can\u2019t be solved in my opinion. If the majority part just don\u2019t\n> agree with the change, why they cheat? If the majority part is honest as\n> described in nakamoto consensus, I think that won\u2019t be a problem. CPU power\n> always decides.\n\nNakamoto consensus is used to determine the longest chain among\nmultiple valid chains, it's not enough to determine validity by\nitself. For example in a hard fork if a minority of hashpower decided\nnot to fork then they would simply consider the forked chain invalid\nand ignore it, even if that majority chain had significantly more\nwork.\n\n>\n>\n> 2. During the first two grace periods, non-mining nodes will not be\n> affected. They have enough time to upgrade their software. <br/>\n> 3. Versionbits included in block header, not influencing the SPY mining.\n> <br/>\n>\n> The widely deployed stratum based SPV mining does not really provide a\n> proper way to validate nversion of the previous block, it only lets\n> you see the nversion of the current stratum job since you don't get a\n> full bock header. There's always a risk here that miners build on top\n> of invalid blocks when SPV mining.\n>\n>\n> \u4e5f\u8bb8\u6211\u662f\u9519\u7684\u6211\u5e76\u4e0d\u80af\u5b9a\u3002\u8bf7\u5bf9\u5982\u4f55\u8ba9\u8fd9\u4e2a\u65b9\u6cd5\u517c\u5bb9 SPY \u6316\u77ff\u63d0\u51fa\u5efa\u8bbe\u6027\u610f\u89c1\u3002\n> Maybe I\u2019m wrong. Please give some advice that how to make it compatible with\n> SPY mining.\n\nIt's just problematic in general and I'm not sure there's a good way\naround it other than putting as many safety nets as possible in place\nto limit the amount of time miners mine on invalid work. For example\nwhen an invalid BU blocks was mined on the network more than 50% of\nhashpower mined on top of it for a short period of time.\n\n>\n> 4. After two grace periods, all nodes must be upgraded. Otherwise they\n> cannot send transactions or get any confirmations. Compared with forming new\n> consensus among nodes, the situation is not worse than before. <br/>\n>\n> Previous consensus changes have largely been done in backwards\n> compatible ways which lets users opt-in to new features. In general\n> backwards compatibility is considered a good thing, this seems to make\n> that worse.\n>\n>\n> \u8fd9\u5e76\u6ca1\u6709\u5f3a\u5236\u6211\u4eec\u7684\u8282\u70b9\u4f5c\u51fa\u4efb\u4f55\u6539\u53d8\u5171\u8bc6\u7684\u8868\u793a\u3002\u4ec5\u4ec5\u8ba9\u8fd9\u4e9b\u8282\u70b9\u4e3a\u63a5\u4e0b\u6765\u53ef\u80fd\u7684\u6539\u53d8\u505a\u597d\u51c6\u5907\u3002\n> It would not force our nodes to do anything that changes the consensus. But\n> they should be prepared for the **maybe** upcoming changes.\n> \u534f\u8bae\u7684\u6539\u53d8\u5c06\u901a\u8fc7\u77ff\u5de5\u6295\u7968\u4ea7\u751f\uff0c\u4f46\u662f\u8fd9\u4e2a\u8fc7\u7a0b\u5e94\u8be5\u88ab\u6240\u6709\u8282\u70b9\u6240\u77e5\u6653\u5e76\u627f\u8ba4\u3002\n> Protocol upgrades could be done using miners vote. but the progress of\n> voting should be acknowledged by all nodes.\n\nI'm not seeing how it could be considered backwards compatible if\n\"they cannot send transactions or get any confirmations\".\n\n>\n>\n> 5. The ledger in non-mining wallet nodes is honored and reserved. Users of\n> off-chain wallet services can decide whether or not to follow the service\n> providers after they got the public notification from the service providers.\n> <br/>\n> 6. Protocol upgrades in the future can be bonded with the upgrades of nodes,\n> and the upgrades activate through miners vote independently. There would be\n> enough time for nodes to be upgraded in order to support new protocols. Even\n> in case of failing in miner activation, the situation will not worsen and\n> the status quo will remain. <br/>\n>\n>\n> ==Risks==\n>\n> 1. \u7b97\u529b\u7684\u6ce2\u52a8\u4f1a\u5f71\u54cd\u6700\u957f\u94fe\u7684\u7ed3\u679c\u3002\u56e0\u6b64\u8d8a\u9ad8\u7684\u6fc0\u6d3b\u6bd4\u4f8b\u8981\u6c42\u5c06\u51cf\u5c11\u77ed\u65f6\u95f4\u5206\u53c9\u7684\u5371\u9669\u3002<br/>\n> 2. \u77ff\u5de5\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u907f\u514d\u88ab\u5b64\u7acb\uff0c\u4f46\u5728\u94b1\u5305\u8282\u70b9\u770b\u6765\u65e0\u6cd5\u533a\u5206\u662f\u5426\u662f\u5047\u4fe1\u53f7\uff0c\u53ea\u80fd\u5347\u7ea7\u3002\u800c\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u4e4b\u540e\uff0c\u77ff\u5de5\u4e5f\u5c06\u8ddf\u968f\u3002<br/>\n> 3. \u94b1\u5305\u8282\u70b9\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u4ec5\u5347\u7ea7\u7248\u672c\u53f7\u800c\u4e0d\u652f\u6301\u7ed1\u5b9a\u7684\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\uff0c\u4f46\u94b1\u5305\u8282\u70b9\u6570\u91cf\u65e0\u6cd5\u5224\u522b\uff0c\u4e25\u8083\u7684\u771f\u5b9e\u8282\u70b9\u5e94\u5f53\u8ddf\u968f\u53ef\u8bc1\u5b9e\u7684\u77ff\u5de5\u6295\u7968\u7ed3\u679c\u3002<br/>\n> 4.\n> \u5b58\u5728\u5c11\u90e8\u5206\u77ff\u5de5\u548c\u94b1\u5305\u8282\u70b9\u5171\u8c0b\uff0c\u5728\u65b0\u534f\u8bae\u5347\u7ea7\u6fc0\u6d3b\u540e\u4f9d\u7136\u4f7f\u7528\u8001\u534f\u8bae\u6316\u77ff\u7684\u53ef\u80fd\u3002\u8fd9\u79cd\u53ef\u80fd\u968f\u65f6\u53d1\u751f\u65e0\u6cd5\u675c\u7edd\uff0c\u4f46\u901a\u8fc7\u8ba9\u6c89\u9ed8\u7684\u5927\u591a\u6570\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u7684\u65b9\u5f0f\u53ef\u4ee5\u964d\u4f4e\u8fd9\u79cd\u884c\u4e3a\u5e26\u6765\u7684\u5229\u76ca\u3002<br/>\n>\n> 1. The fluctuation of the hashing power will affect the result of the\n> longest chain. Higher activating requirement means a lower risk of temporary\n> fork. <br/>\n> 2. Miners could simply signal to avoid being orphaned, but from the\n> perspective of non-mining wallet nodes, they can't distinguish the false\n> signal from the true signal. They must upgrade with the assumption that the\n> signals are all true. After all the non-mining nodes have upgraded, the\n> miners signalling false signal should follow. <br/>\n>\n> Miners can simply announce they are false signalling with coinbase\n> tags and other methods. This activation method would likely not be\n> viable for controversial changes.\n>\n>\n> \u5982\u679c\u5927\u591a\u6570\u77ff\u5de5\u662f\u8bda\u5b9e\u7684\uff0c\u5047\u4fe1\u53f7\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\n> False signal won\u2019t be a problem if majority miners are honest.\n\nI'm referring to a potential situation where 55% of miners want a\nchange and 45% don't, the 45% could false signal.\n\n>\n> 3. Non-mining wallet nodes could false signal without supporting the new\n> protocol but since the total number of nodes cannot be distinguished,\n> genuine nodes should follow the proven result provided by miners vote. <br/>\n>\n> Users would likely take into account markets and other factors when\n> deciding what to do, the total number of nodes doesn't really matter\n> much. Miner signalling is not necessarily indicative of economic and\n> user support.\n>\n>\n> \u77ff\u5de5\u9700\u8981\u5728\u53ef\u4ee5\u786e\u4fdd\u5927\u591a\u6570\u7528\u6237\u4e0d\u88ab\u5347\u7ea7\u5f71\u54cd\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u516c\u6b63\u6295\u7968\u3002\n> Miners should vote unbiasedly under the condition that most users are not\n> affected by protocol upgrading.\n>\n>\n> 4. Miners and non-mining nodes could conspire to fork using old protocol\n> consensus. It can't be eliminated, just like in the past but through most\n> passive non-mining nodes being upgraded, their benefit is reduced. <br/>\n>\n>\n> ==Implementation==\n> ___TBD___\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>"
            },
            {
                "author": "Zheming Lin",
                "date": "2017-06-13T08:13:58",
                "message_text_only": "Hi James:\n\n> \u5728 2017\u5e746\u670813\u65e5\uff0c15:19\uff0cJames Hilliard <james.hilliard1 at gmail.com> \u5199\u9053\uff1a\n> \n> On Tue, Jun 13, 2017 at 1:50 AM, Zheming Lin <heater at gmail.com <mailto:heater at gmail.com>> wrote:\n>> Hi James:\n>> \n>> Thank you very much for detailed feedback. Sorry for my understanding of\n>> English being poor. I\u2019ll try to answer that.\n>> \n>> \n>> \u5728 2017\u5e746\u670813\u65e5\uff0c13:44\uff0cJames Hilliard <james.hilliard1 at gmail.com> \u5199\u9053\uff1a\n>> \n>> \n>> 1. The activation only requires majority miners signal. As described in the\n>> paper by Satoshi Nakamoto, 55% miners will be in the longest chain after 340\n>> blocks, with 99.9% certainty. This will minimize the possibility of delaying\n>> network upgrades by controlling a small number of hashing power. We can\n>> foresee that after 51% signalling, all miners will upgrade within the first\n>> grace period. <br/>\n>> \n>> Technically soft forks can be implemented at 55% hashpower already\n>> without an orphaning period(like BIP16). Those that don't upgrade\n>> would just be at risk of mining invalid blocks. One would not want to\n>> use this method to try and activate a controversial hard fork since\n>> it's trivial for miners to false signal. The orphaning period\n>> effectively forces miners to make a decision but does not necessarily\n>> force them to make a particular decision since they can simply choose\n>> to reject the fork and false signal.\n>> \n>> \n>> \u5047\u4fe1\u53f7\u7684\u95ee\u9898\u5728\u6211\u770b\u6765\u65e0\u6cd5\u89e3\u51b3\u3002\u4f46\u5982\u679c\u591a\u6570\u4e0d\u540c\u610f\u8fd9\u4e2a\u6539\u53d8\uff0c\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u8fd8\u8981\u6b3a\u9a97\uff1f\u5982\u679c\u591a\u6570\u5982\u4e2d\u672c\u806a\u5171\u8bc6\u4e2d\u63cf\u8ff0\u7684\u90a3\u6837\u662f\u8bda\u5b9e\u53ef\u4fe1\u7684\uff0c\u90a3\u5c31\u4e0d\u4f1a\u6709\u4efb\u4f55\u95ee\u9898\u3002\u901a\u8fc7\u7b97\u529b\u603b\u80fd\u5206\u51fa\u80dc\u8d1f\u3002\n>> False signal can\u2019t be solved in my opinion. If the majority part just don\u2019t\n>> agree with the change, why they cheat? If the majority part is honest as\n>> described in nakamoto consensus, I think that won\u2019t be a problem. CPU power\n>> always decides.\n> \n> Nakamoto consensus is used to determine the longest chain among\n> multiple valid chains, it's not enough to determine validity by\n> itself. For example in a hard fork if a minority of hashpower decided\n> not to fork then they would simply consider the forked chain invalid\n> and ignore it, even if that majority chain had significantly more\n> work.\n> \n\n\u8282\u70b9\u9700\u8981\u81ea\u4e3b\u51b3\u5b9a\u662f\u5426\u8ddf\u968f\u534f\u8bae\u5347\u7ea7\u3002\u4f46\u662f\u4ed6\u4eec\u4e0d\u80fd\u88ab\u52a8\u7684\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002\u4ed6\u4eec\u603b\u662f\u5b58\u5728\u6709\u591a\u79cd\u7684\u9009\u62e9\u3002\nThe node should decide to follow the protocol upgrade or not. But they can\u2019t just be passive and do nothing. The choice is always provided.\n\n\u5982\u679c\u4ed6\u4eec\u5e76\u4e0d\u76f8\u4fe1\u5927\u591a\u6570\u7684\u77ff\u5de5\uff0c\u4ed6\u4eec\u53ef\u4ee5\u9009\u62e9\u4e00\u4e9b\u6ca1\u6709\u77ff\u5de5\u89d2\u8272\u7684\u66ff\u4ee3\u5e01\u3002\nIf they don\u2019t trust the choice of majority miners, they can use some alt coin that don\u2019t including miners\u2019 part.\n\n>> \n>> \n>> 2. During the first two grace periods, non-mining nodes will not be\n>> affected. They have enough time to upgrade their software. <br/>\n>> 3. Versionbits included in block header, not influencing the SPY mining.\n>> <br/>\n>> \n>> The widely deployed stratum based SPV mining does not really provide a\n>> proper way to validate nversion of the previous block, it only lets\n>> you see the nversion of the current stratum job since you don't get a\n>> full bock header. There's always a risk here that miners build on top\n>> of invalid blocks when SPV mining.\n>> \n>> \n>> \u4e5f\u8bb8\u6211\u662f\u9519\u7684\u6211\u5e76\u4e0d\u80af\u5b9a\u3002\u8bf7\u5bf9\u5982\u4f55\u8ba9\u8fd9\u4e2a\u65b9\u6cd5\u517c\u5bb9 SPY \u6316\u77ff\u63d0\u51fa\u5efa\u8bbe\u6027\u610f\u89c1\u3002\n>> Maybe I\u2019m wrong. Please give some advice that how to make it compatible with\n>> SPY mining.\n> \n> It's just problematic in general and I'm not sure there's a good way\n> around it other than putting as many safety nets as possible in place\n> to limit the amount of time miners mine on invalid work. For example\n> when an invalid BU blocks was mined on the network more than 50% of\n> hashpower mined on top of it for a short period of time.\n> \n\n\u6211\u4eec\u5e94\u5f53\u5f15\u5165\u533a\u5757\u6821\u9a8c\uff0c\u4f46\u5982\u4f55\u4e3a\u4e0d\u9a8c\u8bc1\u8fdb\u884c SPY \u6316\u77ff\u7684\u77ff\u5de5\u63d0\u4f9b\u6fc0\u52b1\u662f\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u4e86\u3002\nWe should introduce block validation in the code, but how to provide incentive to no-validating SPY miner is another problem.\n\n\n>> \n>> 4. After two grace periods, all nodes must be upgraded. Otherwise they\n>> cannot send transactions or get any confirmations. Compared with forming new\n>> consensus among nodes, the situation is not worse than before. <br/>\n>> \n>> Previous consensus changes have largely been done in backwards\n>> compatible ways which lets users opt-in to new features. In general\n>> backwards compatibility is considered a good thing, this seems to make\n>> that worse.\n>> \n>> \n>> \u8fd9\u5e76\u6ca1\u6709\u5f3a\u5236\u6211\u4eec\u7684\u8282\u70b9\u4f5c\u51fa\u4efb\u4f55\u6539\u53d8\u5171\u8bc6\u7684\u8868\u793a\u3002\u4ec5\u4ec5\u8ba9\u8fd9\u4e9b\u8282\u70b9\u4e3a\u63a5\u4e0b\u6765\u53ef\u80fd\u7684\u6539\u53d8\u505a\u597d\u51c6\u5907\u3002\n>> It would not force our nodes to do anything that changes the consensus. But\n>> they should be prepared for the **maybe** upcoming changes.\n>> \u534f\u8bae\u7684\u6539\u53d8\u5c06\u901a\u8fc7\u77ff\u5de5\u6295\u7968\u4ea7\u751f\uff0c\u4f46\u662f\u8fd9\u4e2a\u8fc7\u7a0b\u5e94\u8be5\u88ab\u6240\u6709\u8282\u70b9\u6240\u77e5\u6653\u5e76\u627f\u8ba4\u3002\n>> Protocol upgrades could be done using miners vote. but the progress of\n>> voting should be acknowledged by all nodes.\n> \n> I'm not seeing how it could be considered backwards compatible if\n> \"they cannot send transactions or get any confirmations\u201d.\n\n\u6211\u5e76\u4e0d\u628a\u8fd9\u4e2a\u65b9\u6cd5\u770b\u4f5c\u662f\u5b8c\u5168\u7684\u5411\u540e\u517c\u5bb9\u3002\u5728\u5927\u5bb6\u90fd\u8ba4\u53ef\u201c\u533a\u5757\u9ad8\u5ea6xxx\u540e\uff0c\u6267\u884cxxx\u201d\u7684\u65f6\u5019\uff0c\u6211\u5e76\u4e0d\u8ba4\u4e3a\u8fd9\u5f88\u91cd\u8981\u3002\nI don\u2019t see them as completely backwards compatible. since I don\u2019t see that is important if we all agree with \u201cafter block height xxx, then xxx\u201d.\n\u6211\u4eec\u4f9d\u7136\u53ef\u4ee5\u4ece\u521b\u4e16\u533a\u5757\u5f00\u59cb\u4e00\u76f4\u9a8c\u8bc1\u5230\u4eca\u5929\u3002\nAnd we can validate from the genesis block till today.\n\n\n>> \n>> \n>> 5. The ledger in non-mining wallet nodes is honored and reserved. Users of\n>> off-chain wallet services can decide whether or not to follow the service\n>> providers after they got the public notification from the service providers.\n>> <br/>\n>> 6. Protocol upgrades in the future can be bonded with the upgrades of nodes,\n>> and the upgrades activate through miners vote independently. There would be\n>> enough time for nodes to be upgraded in order to support new protocols. Even\n>> in case of failing in miner activation, the situation will not worsen and\n>> the status quo will remain. <br/>\n>> \n>> \n>> ==Risks==\n>> \n>> 1. \u7b97\u529b\u7684\u6ce2\u52a8\u4f1a\u5f71\u54cd\u6700\u957f\u94fe\u7684\u7ed3\u679c\u3002\u56e0\u6b64\u8d8a\u9ad8\u7684\u6fc0\u6d3b\u6bd4\u4f8b\u8981\u6c42\u5c06\u51cf\u5c11\u77ed\u65f6\u95f4\u5206\u53c9\u7684\u5371\u9669\u3002<br/>\n>> 2. \u77ff\u5de5\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u907f\u514d\u88ab\u5b64\u7acb\uff0c\u4f46\u5728\u94b1\u5305\u8282\u70b9\u770b\u6765\u65e0\u6cd5\u533a\u5206\u662f\u5426\u662f\u5047\u4fe1\u53f7\uff0c\u53ea\u80fd\u5347\u7ea7\u3002\u800c\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u4e4b\u540e\uff0c\u77ff\u5de5\u4e5f\u5c06\u8ddf\u968f\u3002<br/>\n>> 3. \u94b1\u5305\u8282\u70b9\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u4ec5\u5347\u7ea7\u7248\u672c\u53f7\u800c\u4e0d\u652f\u6301\u7ed1\u5b9a\u7684\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\uff0c\u4f46\u94b1\u5305\u8282\u70b9\u6570\u91cf\u65e0\u6cd5\u5224\u522b\uff0c\u4e25\u8083\u7684\u771f\u5b9e\u8282\u70b9\u5e94\u5f53\u8ddf\u968f\u53ef\u8bc1\u5b9e\u7684\u77ff\u5de5\u6295\u7968\u7ed3\u679c\u3002<br/>\n>> 4.\n>> \u5b58\u5728\u5c11\u90e8\u5206\u77ff\u5de5\u548c\u94b1\u5305\u8282\u70b9\u5171\u8c0b\uff0c\u5728\u65b0\u534f\u8bae\u5347\u7ea7\u6fc0\u6d3b\u540e\u4f9d\u7136\u4f7f\u7528\u8001\u534f\u8bae\u6316\u77ff\u7684\u53ef\u80fd\u3002\u8fd9\u79cd\u53ef\u80fd\u968f\u65f6\u53d1\u751f\u65e0\u6cd5\u675c\u7edd\uff0c\u4f46\u901a\u8fc7\u8ba9\u6c89\u9ed8\u7684\u5927\u591a\u6570\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u7684\u65b9\u5f0f\u53ef\u4ee5\u964d\u4f4e\u8fd9\u79cd\u884c\u4e3a\u5e26\u6765\u7684\u5229\u76ca\u3002<br/>\n>> \n>> 1. The fluctuation of the hashing power will affect the result of the\n>> longest chain. Higher activating requirement means a lower risk of temporary\n>> fork. <br/>\n>> 2. Miners could simply signal to avoid being orphaned, but from the\n>> perspective of non-mining wallet nodes, they can't distinguish the false\n>> signal from the true signal. They must upgrade with the assumption that the\n>> signals are all true. After all the non-mining nodes have upgraded, the\n>> miners signalling false signal should follow. <br/>\n>> \n>> Miners can simply announce they are false signalling with coinbase\n>> tags and other methods. This activation method would likely not be\n>> viable for controversial changes.\n>> \n>> \n>> \u5982\u679c\u5927\u591a\u6570\u77ff\u5de5\u662f\u8bda\u5b9e\u7684\uff0c\u5047\u4fe1\u53f7\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\n>> False signal won\u2019t be a problem if majority miners are honest.\n> \n> I'm referring to a potential situation where 55% of miners want a\n> change and 45% don't, the 45% could false signal.\n> \n\n\u5f53\u7136\uff0c45% \u53ef\u4ee5\u53d1\u9001\u5047\u4fe1\u53f7\uff0c\u53ef\u4ee5\u548c\u90e8\u5206\u8282\u70b9\u5171\u8c0b\u3002\u4f46\u8fd9\u662f\u5f53\u524d\u5df2\u7ecf\u5b58\u5728\u7684\u95ee\u9898\uff0c\u5e76\u6ca1\u6709\u56e0\u6b64\u66f4\u7cdf\u7cd5\u3002\nOf cause, there could be false signal from 45% and have conspiracy with some nodes. But that\u2019s the problem we have today, and it don\u2019t get any worse (nor any better).\n\n\n>> \n>> 3. Non-mining wallet nodes could false signal without supporting the new\n>> protocol but since the total number of nodes cannot be distinguished,\n>> genuine nodes should follow the proven result provided by miners vote. <br/>\n>> \n>> Users would likely take into account markets and other factors when\n>> deciding what to do, the total number of nodes doesn't really matter\n>> much. Miner signalling is not necessarily indicative of economic and\n>> user support.\n>> \n>> \n>> \u77ff\u5de5\u9700\u8981\u5728\u53ef\u4ee5\u786e\u4fdd\u5927\u591a\u6570\u7528\u6237\u4e0d\u88ab\u5347\u7ea7\u5f71\u54cd\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u516c\u6b63\u6295\u7968\u3002\n>> Miners should vote unbiasedly under the condition that most users are not\n>> affected by protocol upgrading.\n>> \n>> \n>> 4. Miners and non-mining nodes could conspire to fork using old protocol\n>> consensus. It can't be eliminated, just like in the past but through most\n>> passive non-mining nodes being upgraded, their benefit is reduced. <br/>\n>> \n>> \n>> ==Implementation==\n>> ___TBD___\n>> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170613/5b7117d4/attachment-0001.html>"
            },
            {
                "author": "James Hilliard",
                "date": "2017-06-13T08:37:43",
                "message_text_only": "On Tue, Jun 13, 2017 at 3:13 AM, Zheming Lin <heater at gmail.com> wrote:\n> Hi James:\n>\n> \u5728 2017\u5e746\u670813\u65e5\uff0c15:19\uff0cJames Hilliard <james.hilliard1 at gmail.com> \u5199\u9053\uff1a\n>\n> On Tue, Jun 13, 2017 at 1:50 AM, Zheming Lin <heater at gmail.com> wrote:\n>\n> Hi James:\n>\n> Thank you very much for detailed feedback. Sorry for my understanding of\n> English being poor. I\u2019ll try to answer that.\n>\n>\n> \u5728 2017\u5e746\u670813\u65e5\uff0c13:44\uff0cJames Hilliard <james.hilliard1 at gmail.com> \u5199\u9053\uff1a\n>\n>\n> 1. The activation only requires majority miners signal. As described in the\n> paper by Satoshi Nakamoto, 55% miners will be in the longest chain after 340\n> blocks, with 99.9% certainty. This will minimize the possibility of delaying\n> network upgrades by controlling a small number of hashing power. We can\n> foresee that after 51% signalling, all miners will upgrade within the first\n> grace period. <br/>\n>\n> Technically soft forks can be implemented at 55% hashpower already\n> without an orphaning period(like BIP16). Those that don't upgrade\n> would just be at risk of mining invalid blocks. One would not want to\n> use this method to try and activate a controversial hard fork since\n> it's trivial for miners to false signal. The orphaning period\n> effectively forces miners to make a decision but does not necessarily\n> force them to make a particular decision since they can simply choose\n> to reject the fork and false signal.\n>\n>\n> \u5047\u4fe1\u53f7\u7684\u95ee\u9898\u5728\u6211\u770b\u6765\u65e0\u6cd5\u89e3\u51b3\u3002\u4f46\u5982\u679c\u591a\u6570\u4e0d\u540c\u610f\u8fd9\u4e2a\u6539\u53d8\uff0c\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u8fd8\u8981\u6b3a\u9a97\uff1f\u5982\u679c\u591a\u6570\u5982\u4e2d\u672c\u806a\u5171\u8bc6\u4e2d\u63cf\u8ff0\u7684\u90a3\u6837\u662f\u8bda\u5b9e\u53ef\u4fe1\u7684\uff0c\u90a3\u5c31\u4e0d\u4f1a\u6709\u4efb\u4f55\u95ee\u9898\u3002\u901a\u8fc7\u7b97\u529b\u603b\u80fd\u5206\u51fa\u80dc\u8d1f\u3002\n> False signal can\u2019t be solved in my opinion. If the majority part just don\u2019t\n> agree with the change, why they cheat? If the majority part is honest as\n> described in nakamoto consensus, I think that won\u2019t be a problem. CPU power\n> always decides.\n>\n>\n> Nakamoto consensus is used to determine the longest chain among\n> multiple valid chains, it's not enough to determine validity by\n> itself. For example in a hard fork if a minority of hashpower decided\n> not to fork then they would simply consider the forked chain invalid\n> and ignore it, even if that majority chain had significantly more\n> work.\n>\n>\n> \u8282\u70b9\u9700\u8981\u81ea\u4e3b\u51b3\u5b9a\u662f\u5426\u8ddf\u968f\u534f\u8bae\u5347\u7ea7\u3002\u4f46\u662f\u4ed6\u4eec\u4e0d\u80fd\u88ab\u52a8\u7684\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002\u4ed6\u4eec\u603b\u662f\u5b58\u5728\u6709\u591a\u79cd\u7684\u9009\u62e9\u3002\n> The node should decide to follow the protocol upgrade or not. But they can\u2019t\n> just be passive and do nothing. The choice is always provided.\n>\n> \u5982\u679c\u4ed6\u4eec\u5e76\u4e0d\u76f8\u4fe1\u5927\u591a\u6570\u7684\u77ff\u5de5\uff0c\u4ed6\u4eec\u53ef\u4ee5\u9009\u62e9\u4e00\u4e9b\u6ca1\u6709\u77ff\u5de5\u89d2\u8272\u7684\u66ff\u4ee3\u5e01\u3002\n> If they don\u2019t trust the choice of majority miners, they can use some alt\n> coin that don\u2019t including miners\u2019 part.\n\nThey generally don't have to switch to an altcoin when they get to\nchoose which blocks they accept ultimately. This is a key component of\nBitcoin's incentive model since it makes it so miners are unlikely to\ndo a hard fork if their blocks would not be accepted by nodes/users.\nFor example if 55% of miners wanted to hard fork and change the block\nreward back to 50 BTC the minority side would not need to switch to an\naltcoin, they would just need to ignore those 50 BTC block reward\nblocks.\n\n>\n>\n>\n> 2. During the first two grace periods, non-mining nodes will not be\n> affected. They have enough time to upgrade their software. <br/>\n> 3. Versionbits included in block header, not influencing the SPY mining.\n> <br/>\n>\n> The widely deployed stratum based SPV mining does not really provide a\n> proper way to validate nversion of the previous block, it only lets\n> you see the nversion of the current stratum job since you don't get a\n> full bock header. There's always a risk here that miners build on top\n> of invalid blocks when SPV mining.\n>\n>\n> \u4e5f\u8bb8\u6211\u662f\u9519\u7684\u6211\u5e76\u4e0d\u80af\u5b9a\u3002\u8bf7\u5bf9\u5982\u4f55\u8ba9\u8fd9\u4e2a\u65b9\u6cd5\u517c\u5bb9 SPY \u6316\u77ff\u63d0\u51fa\u5efa\u8bbe\u6027\u610f\u89c1\u3002\n> Maybe I\u2019m wrong. Please give some advice that how to make it compatible with\n> SPY mining.\n>\n>\n> It's just problematic in general and I'm not sure there's a good way\n> around it other than putting as many safety nets as possible in place\n> to limit the amount of time miners mine on invalid work. For example\n> when an invalid BU blocks was mined on the network more than 50% of\n> hashpower mined on top of it for a short period of time.\n>\n>\n> \u6211\u4eec\u5e94\u5f53\u5f15\u5165\u533a\u5757\u6821\u9a8c\uff0c\u4f46\u5982\u4f55\u4e3a\u4e0d\u9a8c\u8bc1\u8fdb\u884c SPY \u6316\u77ff\u7684\u77ff\u5de5\u63d0\u4f9b\u6fc0\u52b1\u662f\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u4e86\u3002\n> We should introduce block validation in the code, but how to provide\n> incentive to no-validating SPY miner is another problem.\n>\n>\n>\n> 4. After two grace periods, all nodes must be upgraded. Otherwise they\n> cannot send transactions or get any confirmations. Compared with forming new\n> consensus among nodes, the situation is not worse than before. <br/>\n>\n> Previous consensus changes have largely been done in backwards\n> compatible ways which lets users opt-in to new features. In general\n> backwards compatibility is considered a good thing, this seems to make\n> that worse.\n>\n>\n> \u8fd9\u5e76\u6ca1\u6709\u5f3a\u5236\u6211\u4eec\u7684\u8282\u70b9\u4f5c\u51fa\u4efb\u4f55\u6539\u53d8\u5171\u8bc6\u7684\u8868\u793a\u3002\u4ec5\u4ec5\u8ba9\u8fd9\u4e9b\u8282\u70b9\u4e3a\u63a5\u4e0b\u6765\u53ef\u80fd\u7684\u6539\u53d8\u505a\u597d\u51c6\u5907\u3002\n> It would not force our nodes to do anything that changes the consensus. But\n> they should be prepared for the **maybe** upcoming changes.\n> \u534f\u8bae\u7684\u6539\u53d8\u5c06\u901a\u8fc7\u77ff\u5de5\u6295\u7968\u4ea7\u751f\uff0c\u4f46\u662f\u8fd9\u4e2a\u8fc7\u7a0b\u5e94\u8be5\u88ab\u6240\u6709\u8282\u70b9\u6240\u77e5\u6653\u5e76\u627f\u8ba4\u3002\n> Protocol upgrades could be done using miners vote. but the progress of\n> voting should be acknowledged by all nodes.\n>\n>\n> I'm not seeing how it could be considered backwards compatible if\n> \"they cannot send transactions or get any confirmations\u201d.\n>\n>\n> \u6211\u5e76\u4e0d\u628a\u8fd9\u4e2a\u65b9\u6cd5\u770b\u4f5c\u662f\u5b8c\u5168\u7684\u5411\u540e\u517c\u5bb9\u3002\u5728\u5927\u5bb6\u90fd\u8ba4\u53ef\u201c\u533a\u5757\u9ad8\u5ea6xxx\u540e\uff0c\u6267\u884cxxx\u201d\u7684\u65f6\u5019\uff0c\u6211\u5e76\u4e0d\u8ba4\u4e3a\u8fd9\u5f88\u91cd\u8981\u3002\n> I don\u2019t see them as completely backwards compatible. since I don\u2019t see that\n> is important if we all agree with \u201cafter block height xxx, then xxx\u201d.\n> \u6211\u4eec\u4f9d\u7136\u53ef\u4ee5\u4ece\u521b\u4e16\u533a\u5757\u5f00\u59cb\u4e00\u76f4\u9a8c\u8bc1\u5230\u4eca\u5929\u3002\n> And we can validate from the genesis block till today.\n\nBy backwards compatible I mean being able to continue functioning\nwithout updating the node, soft forks are generally backwards\ncompatible because you can still transact even if you don't upgrade\nyour node to support the soft fork, you just won't be able to use the\nnew soft fork features.\n\n>\n>\n>\n>\n> 5. The ledger in non-mining wallet nodes is honored and reserved. Users of\n> off-chain wallet services can decide whether or not to follow the service\n> providers after they got the public notification from the service providers.\n> <br/>\n> 6. Protocol upgrades in the future can be bonded with the upgrades of nodes,\n> and the upgrades activate through miners vote independently. There would be\n> enough time for nodes to be upgraded in order to support new protocols. Even\n> in case of failing in miner activation, the situation will not worsen and\n> the status quo will remain. <br/>\n>\n>\n> ==Risks==\n>\n> 1. \u7b97\u529b\u7684\u6ce2\u52a8\u4f1a\u5f71\u54cd\u6700\u957f\u94fe\u7684\u7ed3\u679c\u3002\u56e0\u6b64\u8d8a\u9ad8\u7684\u6fc0\u6d3b\u6bd4\u4f8b\u8981\u6c42\u5c06\u51cf\u5c11\u77ed\u65f6\u95f4\u5206\u53c9\u7684\u5371\u9669\u3002<br/>\n> 2. \u77ff\u5de5\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u907f\u514d\u88ab\u5b64\u7acb\uff0c\u4f46\u5728\u94b1\u5305\u8282\u70b9\u770b\u6765\u65e0\u6cd5\u533a\u5206\u662f\u5426\u662f\u5047\u4fe1\u53f7\uff0c\u53ea\u80fd\u5347\u7ea7\u3002\u800c\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u4e4b\u540e\uff0c\u77ff\u5de5\u4e5f\u5c06\u8ddf\u968f\u3002<br/>\n> 3. \u94b1\u5305\u8282\u70b9\u53ef\u80fd\u53d1\u5047\u4fe1\u53f7\u6765\u4ec5\u5347\u7ea7\u7248\u672c\u53f7\u800c\u4e0d\u652f\u6301\u7ed1\u5b9a\u7684\u534f\u8bae\u5347\u7ea7\u4ee3\u7801\uff0c\u4f46\u94b1\u5305\u8282\u70b9\u6570\u91cf\u65e0\u6cd5\u5224\u522b\uff0c\u4e25\u8083\u7684\u771f\u5b9e\u8282\u70b9\u5e94\u5f53\u8ddf\u968f\u53ef\u8bc1\u5b9e\u7684\u77ff\u5de5\u6295\u7968\u7ed3\u679c\u3002<br/>\n> 4.\n> \u5b58\u5728\u5c11\u90e8\u5206\u77ff\u5de5\u548c\u94b1\u5305\u8282\u70b9\u5171\u8c0b\uff0c\u5728\u65b0\u534f\u8bae\u5347\u7ea7\u6fc0\u6d3b\u540e\u4f9d\u7136\u4f7f\u7528\u8001\u534f\u8bae\u6316\u77ff\u7684\u53ef\u80fd\u3002\u8fd9\u79cd\u53ef\u80fd\u968f\u65f6\u53d1\u751f\u65e0\u6cd5\u675c\u7edd\uff0c\u4f46\u901a\u8fc7\u8ba9\u6c89\u9ed8\u7684\u5927\u591a\u6570\u94b1\u5305\u8282\u70b9\u5347\u7ea7\u7684\u65b9\u5f0f\u53ef\u4ee5\u964d\u4f4e\u8fd9\u79cd\u884c\u4e3a\u5e26\u6765\u7684\u5229\u76ca\u3002<br/>\n>\n> 1. The fluctuation of the hashing power will affect the result of the\n> longest chain. Higher activating requirement means a lower risk of temporary\n> fork. <br/>\n> 2. Miners could simply signal to avoid being orphaned, but from the\n> perspective of non-mining wallet nodes, they can't distinguish the false\n> signal from the true signal. They must upgrade with the assumption that the\n> signals are all true. After all the non-mining nodes have upgraded, the\n> miners signalling false signal should follow. <br/>\n>\n> Miners can simply announce they are false signalling with coinbase\n> tags and other methods. This activation method would likely not be\n> viable for controversial changes.\n>\n>\n> \u5982\u679c\u5927\u591a\u6570\u77ff\u5de5\u662f\u8bda\u5b9e\u7684\uff0c\u5047\u4fe1\u53f7\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\n> False signal won\u2019t be a problem if majority miners are honest.\n>\n>\n> I'm referring to a potential situation where 55% of miners want a\n> change and 45% don't, the 45% could false signal.\n>\n>\n> \u5f53\u7136\uff0c45% \u53ef\u4ee5\u53d1\u9001\u5047\u4fe1\u53f7\uff0c\u53ef\u4ee5\u548c\u90e8\u5206\u8282\u70b9\u5171\u8c0b\u3002\u4f46\u8fd9\u662f\u5f53\u524d\u5df2\u7ecf\u5b58\u5728\u7684\u95ee\u9898\uff0c\u5e76\u6ca1\u6709\u56e0\u6b64\u66f4\u7cdf\u7cd5\u3002\n> Of cause, there could be false signal from 45% and have conspiracy with some\n> nodes. But that\u2019s the problem we have today, and it don\u2019t get any worse (nor\n> any better).\n>\n>\n>\n> 3. Non-mining wallet nodes could false signal without supporting the new\n> protocol but since the total number of nodes cannot be distinguished,\n> genuine nodes should follow the proven result provided by miners vote. <br/>\n>\n> Users would likely take into account markets and other factors when\n> deciding what to do, the total number of nodes doesn't really matter\n> much. Miner signalling is not necessarily indicative of economic and\n> user support.\n>\n>\n> \u77ff\u5de5\u9700\u8981\u5728\u53ef\u4ee5\u786e\u4fdd\u5927\u591a\u6570\u7528\u6237\u4e0d\u88ab\u5347\u7ea7\u5f71\u54cd\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u516c\u6b63\u6295\u7968\u3002\n> Miners should vote unbiasedly under the condition that most users are not\n> affected by protocol upgrading.\n>\n>\n> 4. Miners and non-mining nodes could conspire to fork using old protocol\n> consensus. It can't be eliminated, just like in the past but through most\n> passive non-mining nodes being upgraded, their benefit is reduced. <br/>\n>\n>\n> ==Implementation==\n> ___TBD___\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>"
            },
            {
                "author": "Jameson Lopp",
                "date": "2017-06-14T18:55:04",
                "message_text_only": "On Wed, Jun 14, 2017 at 11:29 AM, Zheming Lin <heater at gmail.com> wrote:\n\n> Hi Jameson:\n>\n> \u5728 2017\u5e746\u670815\u65e5\uff0c01:20\uff0cJameson Lopp <jameson.lopp at gmail.com> \u5199\u9053\uff1a\n>\n>\n>\n> On Wed, Jun 14, 2017 at 9:39 AM, Zheming Lin via bitcoin-dev <bitcoin-dev@\n> lists.linuxfoundation.org> wrote:\n>\n>>\n>>\n>> > \u5728 2017\u5e746\u670814\u65e5\uff0c02:11\uff0cGregory Maxwell <greg at xiph.org> \u5199\u9053\uff1a\n>> >\n>> > On Tue, Jun 13, 2017 at 2:23 AM, Zheming Lin via bitcoin-dev\n>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> > The enforcement of the system's rules by users broadly, and not just\n>> > miners, is specifically described in the white paper (section 8,\n>> > paragraph 2, it especially clear in the last sentence).  This is\n>> > critical for the security of Bitcoin especially with the current\n>> > degree of centralization in pools.  Without it, Bitcoin's security\n>> > would look a lot more like the Ripple system.\n>> >\n>>\n>> \u662f\u7684\uff0c\u7528\u6237\u6c38\u8fdc\u90fd\u6709\u9009\u62e9\uff0c\u5e76\u53ef\u4ee5\u629b\u5f03\u90a3\u4e9b\u8282\u70b9\u3002\u8fd9\u4e2a BIP \u5e76\u6ca1\u6709\u53cd\u5bf9\u8fd9\u4e9b\u7528\u6237\u8fd9\u4e48\u505a\u3002\u53ea\u6709\u90a3\u4e9b\u88ab\u52a8\u7684\u94b1\u5305\u7528\u6237\uff0c\u4ed6\u4eec\u9700\u8981\u77e5\n>> \u9053\u5fc5\u987b\u505a\u51fa\u4e00\u4e2a\u9009\u62e9\u3002\uff08\u800c\u4e0d\u662f\u88ab\u52a8\u7684\u8ddf\u968f\u9ed8\u8ba4\u7684\u7b56\u7565\uff09\n>> Yes, users always have choice that they can abandon the nodes. This BIP\n>> does\u2019t go against them. I mean only the one(especially wallets) that\u2019s\n>> passive, they need to know there\u2019s a choice and pick one.\n>>\n>> \u8fd9\u4e2a BIP \u53ef\u4ee5\u88ab\u5e94\u7528\u4e8e\u51e0\u4e4e\u4efb\u4f55\u7684\u5347\u7ea7\u4e0a\uff0c\u5305\u62ec\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u7684\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u6269\u5bb9\uff0c\u6d8c\u73b0\u5171\u8bc6\uff0c\u516b\u5146\u6269\u5bb9\u7b49\u3002\u4f46\u8fd9\u4e9b\u5347\u7ea7\u5e76\u4e0d\u662f\u91cd\u70b9\u3002\n>> This BIP can be applied to almost any upgrade, including Segwit,\n>> Segwit2x, 2m, ec, 8m\u2026 but the upgrade is not the key point.\n>>\n>> \u5230\u5e95\u6211\u4eec\u7684\u7528\u6237\u662f\u5426\u771f\u7684\u62e5\u6709\u9009\u62e9\uff1f\n>> Did the users have any real choice?\n>>\n>> \u6211\u5e76\u4e0d\u80fd\u7406\u89e3\u4ed6\u4eec\u76f8\u4fe1\u5927\u90e8\u5206\u77ff\u5de5\uff08\u5c31\u50cf\u5f53\u524d\u4e00\u6837\uff09\uff0c\u4f46\u62d2\u7edd\u8fd9\u4e9b\u591a\u6570\u77ff\u5de5\u5bf9\u534f\u8bae\u6539\u53d8\u7684\u6295\u7968\u7ed3\u679c\u3002\n>> I don\u2019t see the reason they trust the majority miners(as they do today)\n>> but refuse the vote for upcoming protocol upgrade.\n>>\n>\n> To be clear, Bitcoin is not a democracy - if you find yourself using the\n> term \"voting\" then you may be misunderstanding how consensus forms. Once a\n> feature has been vetted and the code is deployed, miners may signal that\n> they are ready to enforce new rules. If for some reason miners are too\n> \"passive or lazy\" or wish to \"veto\" the activation of the new rules, users\n> may choose to circumvent said veto by refusing to accept blocks that do not\n> show readiness for enforcing the new rules.\n>\n>\n> How does the users show their opinion? They can fork away and leave. But\n> what remains will be united. Are you afraid of the united users or the fork?\n>\n> I agree with you that the \u201cvote\u201d is not accurate. Could you kindly suggest\n> an other word for that?\n>\n> I think users should have choice to follow the miners or not. Do you agree\n> with this or not?\n>\n> Regarding consensus changes, users can voice their opinion on any number\nof communication platforms. Though if you're looking for a way for users to\nsignal their intentions at the protocol level, every proposal for doing\nthat to date has been arguably flawed. Measuring meatspace consensus is\npretty tricky if not completely impossible, especially given the fact that\nthe vast majority of Bitcoin users do not voice any opinions on the matter\nof consensus rules.\n\nMost attempts at measuring user consensus would probably be best described\nas signaling rather than voting given that the act of doing so has no\nactual power to affect consensus. Every user who runs a fully validating\nnode is free to enforce the rules with which the agree regardless of what\nrules other entities are enforcing.\n\n>\n>\n>>\n>> \u5bf9\u94b1\u5305\u7528\u6237\u7684\u9009\u62e9\uff0c\u662f\u4ed6\u4eec\u662f\u5426\u76f8\u4fe1\u591a\u6570\u77ff\u5de5\u3002\u5982\u679c\u4ed6\u4eec\u4e0d\u76f8\u4fe1\uff0c\u53ef\u4ee5\u901a\u8fc7\u5206\u53c9\u6765\u6d88\u9664\u6389\u77ff\u5de5\u3002\n>> This choice for wallet users right now, is wether to follow the 51%\n>> majority miners. If they don\u2019t, they can have their fork that get rid of\n>> miners.\n>>\n>> \u5982\u679c\u4ed6\u4eec\u4ecd\u65e7\u76f8\u4fe1\u77ff\u5de5\uff0c\u90a3\u4e48\u53ef\u4ee5\u7559\u4e0b\u6765\u5e76\u8ddf\u968f\u77ff\u5de5\u5c06\u6765\u7684\u534f\u8bae\u6539\u53d8\u3002\n>> If they do trust the majority miners, they stay and follow the vote for\n>> upcoming protocol upgrade.\n>>\n>> \u6240\u4ee5\u95ee\u9898\u5728\u4e8e\uff1a\u6bd4\u7279\u5e01\u7684\u5f00\u53d1\u8005\u3001\u7528\u6237\u3001\u62e5\u6709\u8005\u3001\u670d\u52a1\u63d0\u4f9b\u8005\u3001\u751a\u81f3\u77ff\u5de5\uff0c\u662f\u5426\uff08\u4ecd\u7136\uff09\u5982\u767d\u76ae\u4e66\u4e2d\u63cf\u8ff0\u7684\u5bf9\u5927\u591a\u6570\u77ff\u5de5\u62e5\u6709\u4fe1\u4efb\u3002\n>> So the questions is: Do the bitcoin developers, users, holders, service\n>> provides, even miners, (still) have faith in the majority of miners as\n>> designed in the white paper?\n>>\n>>\n> There is a fundamental misconception regarding this point - the white\n> paper refers to majority hashpower needing to be honest with regard to\n> determining the correct chain within the context of many possible /valid/\n> chain forks. It is not referring to using hashpower to determine the\n> correct chain amongst an infinitely variable number of currently invalid\n> chain forks. Bitcoin ecosystem participants should not have faith in miners\n> (or any other entity) when it comes to choosing the consensus rules they\n> wish to enforce.\n>\n>\n> Arrrgh. I think in the BIP, the miners just invalids tx version 1\n> temporarily. That\u2019s a \u201csoft fork\u201d right? If they dislike the idea, they can\n> leave as always.\n>\n> From my understanding, if the only change miners make is to stop\nconfirming transactions that have a version less than X then it should be a\nsoft fork, yes.\n\n>\n> Regards\n>\n> LIN Zheming\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170614/5ce81220/attachment.html>"
            },
            {
                "author": "Zheming Lin",
                "date": "2017-06-14T19:04:21",
                "message_text_only": "Hi Jameson:\n\n> \u5728 2017\u5e746\u670815\u65e5\uff0c02:55\uff0cJameson Lopp <jameson.lopp at gmail.com> \u5199\u9053\uff1a\n> \n> \n> \n> On Wed, Jun 14, 2017 at 11:29 AM, Zheming Lin <heater at gmail.com <mailto:heater at gmail.com>> wrote:\n> Hi Jameson:\n> \n>> \u5728 2017\u5e746\u670815\u65e5\uff0c01:20\uff0cJameson Lopp <jameson.lopp at gmail.com <mailto:jameson.lopp at gmail.com>> \u5199\u9053\uff1a\n>> \n>> \n>> \n>> On Wed, Jun 14, 2017 at 9:39 AM, Zheming Lin via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>> \n>> \n>> > \u5728 2017\u5e746\u670814\u65e5\uff0c02:11\uff0cGregory Maxwell <greg at xiph.org <mailto:greg at xiph.org>> \u5199\u9053\uff1a\n>> >\n>> > On Tue, Jun 13, 2017 at 2:23 AM, Zheming Lin via bitcoin-dev\n>> > <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>> \n>> > The enforcement of the system's rules by users broadly, and not just\n>> > miners, is specifically described in the white paper (section 8,\n>> > paragraph 2, it especially clear in the last sentence).  This is\n>> > critical for the security of Bitcoin especially with the current\n>> > degree of centralization in pools.  Without it, Bitcoin's security\n>> > would look a lot more like the Ripple system.\n>> >\n>> \n>> \u662f\u7684\uff0c\u7528\u6237\u6c38\u8fdc\u90fd\u6709\u9009\u62e9\uff0c\u5e76\u53ef\u4ee5\u629b\u5f03\u90a3\u4e9b\u8282\u70b9\u3002\u8fd9\u4e2a BIP \u5e76\u6ca1\u6709\u53cd\u5bf9\u8fd9\u4e9b\u7528\u6237\u8fd9\u4e48\u505a\u3002\u53ea\u6709\u90a3\u4e9b\u88ab\u52a8\u7684\u94b1\u5305\u7528\u6237\uff0c\u4ed6\u4eec\u9700\u8981\u77e5\u9053\u5fc5\u987b\u505a\u51fa\u4e00\u4e2a\u9009\u62e9\u3002\uff08\u800c\u4e0d\u662f\u88ab\u52a8\u7684\u8ddf\u968f\u9ed8\u8ba4\u7684\u7b56\u7565\uff09\n>> Yes, users always have choice that they can abandon the nodes. This BIP does\u2019t go against them. I mean only the one(especially wallets) that\u2019s passive, they need to know there\u2019s a choice and pick one.\n>> \n>> \u8fd9\u4e2a BIP \u53ef\u4ee5\u88ab\u5e94\u7528\u4e8e\u51e0\u4e4e\u4efb\u4f55\u7684\u5347\u7ea7\u4e0a\uff0c\u5305\u62ec\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u7684\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u6269\u5bb9\uff0c\u6d8c\u73b0\u5171\u8bc6\uff0c\u516b\u5146\u6269\u5bb9\u7b49\u3002\u4f46\u8fd9\u4e9b\u5347\u7ea7\u5e76\u4e0d\u662f\u91cd\u70b9\u3002\n>> This BIP can be applied to almost any upgrade, including Segwit, Segwit2x, 2m, ec, 8m\u2026 but the upgrade is not the key point.\n>> \n>> \u5230\u5e95\u6211\u4eec\u7684\u7528\u6237\u662f\u5426\u771f\u7684\u62e5\u6709\u9009\u62e9\uff1f\n>> Did the users have any real choice?\n>> \n>> \u6211\u5e76\u4e0d\u80fd\u7406\u89e3\u4ed6\u4eec\u76f8\u4fe1\u5927\u90e8\u5206\u77ff\u5de5\uff08\u5c31\u50cf\u5f53\u524d\u4e00\u6837\uff09\uff0c\u4f46\u62d2\u7edd\u8fd9\u4e9b\u591a\u6570\u77ff\u5de5\u5bf9\u534f\u8bae\u6539\u53d8\u7684\u6295\u7968\u7ed3\u679c\u3002\n>> I don\u2019t see the reason they trust the majority miners(as they do today) but refuse the vote for upcoming protocol upgrade.\n>> \n>> To be clear, Bitcoin is not a democracy - if you find yourself using the term \"voting\" then you may be misunderstanding how consensus forms. Once a feature has been vetted and the code is deployed, miners may signal that they are ready to enforce new rules. If for some reason miners are too \"passive or lazy\" or wish to \"veto\" the activation of the new rules, users may choose to circumvent said veto by refusing to accept blocks that do not show readiness for enforcing the new rules.\n> \n> How does the users show their opinion? They can fork away and leave. But what remains will be united. Are you afraid of the united users or the fork?\n> \n> I agree with you that the \u201cvote\u201d is not accurate. Could you kindly suggest an other word for that?\n> \n> I think users should have choice to follow the miners or not. Do you agree with this or not?\n> \n> Regarding consensus changes, users can voice their opinion on any number of communication platforms. Though if you're looking for a way for users to signal their intentions at the protocol level, every proposal for doing that to date has been arguably flawed. Measuring meatspace consensus is pretty tricky if not completely impossible, especially given the fact that the vast majority of Bitcoin users do not voice any opinions on the matter of consensus rules.\n> \n\n\u201cSybil attack\u201d. The genuine node will leave the chain if it doesn\u2019t like the change. That\u2019s what restrain the majority miners acting foolishly.\n\nIf the users like the idea, they follow. If they don\u2019t the fork away(and not afraid of replay attack). I think it\u2019s a way to move forward together. \n\nWould you support the idea that we put the choice to the users to decide?\n\n> Most attempts at measuring user consensus would probably be best described as signaling rather than voting given that the act of doing so has no actual power to affect consensus. Every user who runs a fully validating node is free to enforce the rules with which the agree regardless of what rules other entities are enforcing. \n>>  \n>> \n>> \u5bf9\u94b1\u5305\u7528\u6237\u7684\u9009\u62e9\uff0c\u662f\u4ed6\u4eec\u662f\u5426\u76f8\u4fe1\u591a\u6570\u77ff\u5de5\u3002\u5982\u679c\u4ed6\u4eec\u4e0d\u76f8\u4fe1\uff0c\u53ef\u4ee5\u901a\u8fc7\u5206\u53c9\u6765\u6d88\u9664\u6389\u77ff\u5de5\u3002\n>> This choice for wallet users right now, is wether to follow the 51% majority miners. If they don\u2019t, they can have their fork that get rid of miners.\n>> \n>> \u5982\u679c\u4ed6\u4eec\u4ecd\u65e7\u76f8\u4fe1\u77ff\u5de5\uff0c\u90a3\u4e48\u53ef\u4ee5\u7559\u4e0b\u6765\u5e76\u8ddf\u968f\u77ff\u5de5\u5c06\u6765\u7684\u534f\u8bae\u6539\u53d8\u3002\n>> If they do trust the majority miners, they stay and follow the vote for upcoming protocol upgrade.\n>> \n>> \u6240\u4ee5\u95ee\u9898\u5728\u4e8e\uff1a\u6bd4\u7279\u5e01\u7684\u5f00\u53d1\u8005\u3001\u7528\u6237\u3001\u62e5\u6709\u8005\u3001\u670d\u52a1\u63d0\u4f9b\u8005\u3001\u751a\u81f3\u77ff\u5de5\uff0c\u662f\u5426\uff08\u4ecd\u7136\uff09\u5982\u767d\u76ae\u4e66\u4e2d\u63cf\u8ff0\u7684\u5bf9\u5927\u591a\u6570\u77ff\u5de5\u62e5\u6709\u4fe1\u4efb\u3002\n>> So the questions is: Do the bitcoin developers, users, holders, service provides, even miners, (still) have faith in the majority of miners as designed in the white paper?\n>> \n>>  \n>> There is a fundamental misconception regarding this point - the white paper refers to majority hashpower needing to be honest with regard to determining the correct chain within the context of many possible /valid/ chain forks. It is not referring to using hashpower to determine the correct chain amongst an infinitely variable number of currently invalid chain forks. Bitcoin ecosystem participants should not have faith in miners (or any other entity) when it comes to choosing the consensus rules they wish to enforce.\n>> \n> \n> Arrrgh. I think in the BIP, the miners just invalids tx version 1 temporarily. That\u2019s a \u201csoft fork\u201d right? If they dislike the idea, they can leave as always.\n> \n> From my understanding, if the only change miners make is to stop confirming transactions that have a version less than X then it should be a soft fork, yes. \n\nAnd if we add a version 2 valid, does that still be a \u201csoft fork\u201d?\n\n\nRegards,\n\nLIN Zheming\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170615/6653504e/attachment-0001.html>"
            },
            {
                "author": "Jameson Lopp",
                "date": "2017-06-14T20:11:07",
                "message_text_only": "On Wed, Jun 14, 2017 at 12:04 PM, Zheming Lin <heater at gmail.com> wrote:\n\n> Hi Jameson:\n>\n> \u5728 2017\u5e746\u670815\u65e5\uff0c02:55\uff0cJameson Lopp <jameson.lopp at gmail.com> \u5199\u9053\uff1a\n>\n>\n>\n> On Wed, Jun 14, 2017 at 11:29 AM, Zheming Lin <heater at gmail.com> wrote:\n>\n>> Hi Jameson:\n>>\n>> \u5728 2017\u5e746\u670815\u65e5\uff0c01:20\uff0cJameson Lopp <jameson.lopp at gmail.com> \u5199\u9053\uff1a\n>>\n>>\n>>\n>> On Wed, Jun 14, 2017 at 9:39 AM, Zheming Lin via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>>\n>>>\n>>> > \u5728 2017\u5e746\u670814\u65e5\uff0c02:11\uff0cGregory Maxwell <greg at xiph.org> \u5199\u9053\uff1a\n>>> >\n>>> > On Tue, Jun 13, 2017 at 2:23 AM, Zheming Lin via bitcoin-dev\n>>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>> > The enforcement of the system's rules by users broadly, and not just\n>>> > miners, is specifically described in the white paper (section 8,\n>>> > paragraph 2, it especially clear in the last sentence).  This is\n>>> > critical for the security of Bitcoin especially with the current\n>>> > degree of centralization in pools.  Without it, Bitcoin's security\n>>> > would look a lot more like the Ripple system.\n>>> >\n>>>\n>>> \u662f\u7684\uff0c\u7528\u6237\u6c38\u8fdc\u90fd\u6709\u9009\u62e9\uff0c\u5e76\u53ef\u4ee5\u629b\u5f03\u90a3\u4e9b\u8282\u70b9\u3002\u8fd9\u4e2a BIP \u5e76\u6ca1\u6709\u53cd\u5bf9\u8fd9\u4e9b\u7528\u6237\u8fd9\u4e48\u505a\u3002\u53ea\u6709\u90a3\u4e9b\u88ab\u52a8\u7684\u94b1\u5305\u7528\u6237\uff0c\u4ed6\u4eec\u9700\u8981\u77e5\n>>> \u9053\u5fc5\u987b\u505a\u51fa\u4e00\u4e2a\u9009\u62e9\u3002\uff08\u800c\u4e0d\u662f\u88ab\u52a8\u7684\u8ddf\u968f\u9ed8\u8ba4\u7684\u7b56\u7565\uff09\n>>> Yes, users always have choice that they can abandon the nodes. This BIP\n>>> does\u2019t go against them. I mean only the one(especially wallets) that\u2019s\n>>> passive, they need to know there\u2019s a choice and pick one.\n>>>\n>>> \u8fd9\u4e2a BIP \u53ef\u4ee5\u88ab\u5e94\u7528\u4e8e\u51e0\u4e4e\u4efb\u4f55\u7684\u5347\u7ea7\u4e0a\uff0c\u5305\u62ec\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u7684\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u6269\u5bb9\uff0c\u6d8c\u73b0\u5171\u8bc6\uff0c\u516b\u5146\u6269\u5bb9\u7b49\u3002\u4f46\u8fd9\u4e9b\u5347\u7ea7\u5e76\u4e0d\u662f\u91cd\u70b9\u3002\n>>> This BIP can be applied to almost any upgrade, including Segwit,\n>>> Segwit2x, 2m, ec, 8m\u2026 but the upgrade is not the key point.\n>>>\n>>> \u5230\u5e95\u6211\u4eec\u7684\u7528\u6237\u662f\u5426\u771f\u7684\u62e5\u6709\u9009\u62e9\uff1f\n>>> Did the users have any real choice?\n>>>\n>>> \u6211\u5e76\u4e0d\u80fd\u7406\u89e3\u4ed6\u4eec\u76f8\u4fe1\u5927\u90e8\u5206\u77ff\u5de5\uff08\u5c31\u50cf\u5f53\u524d\u4e00\u6837\uff09\uff0c\u4f46\u62d2\u7edd\u8fd9\u4e9b\u591a\u6570\u77ff\u5de5\u5bf9\u534f\u8bae\u6539\u53d8\u7684\u6295\u7968\u7ed3\u679c\u3002\n>>> I don\u2019t see the reason they trust the majority miners(as they do today)\n>>> but refuse the vote for upcoming protocol upgrade.\n>>>\n>>\n>> To be clear, Bitcoin is not a democracy - if you find yourself using the\n>> term \"voting\" then you may be misunderstanding how consensus forms. Once a\n>> feature has been vetted and the code is deployed, miners may signal that\n>> they are ready to enforce new rules. If for some reason miners are too\n>> \"passive or lazy\" or wish to \"veto\" the activation of the new rules, users\n>> may choose to circumvent said veto by refusing to accept blocks that do not\n>> show readiness for enforcing the new rules.\n>>\n>>\n>> How does the users show their opinion? They can fork away and leave. But\n>> what remains will be united. Are you afraid of the united users or the fork?\n>>\n>> I agree with you that the \u201cvote\u201d is not accurate. Could you kindly\n>> suggest an other word for that?\n>>\n>> I think users should have choice to follow the miners or not. Do you\n>> agree with this or not?\n>>\n>> Regarding consensus changes, users can voice their opinion on any number\n> of communication platforms. Though if you're looking for a way for users to\n> signal their intentions at the protocol level, every proposal for doing\n> that to date has been arguably flawed. Measuring meatspace consensus is\n> pretty tricky if not completely impossible, especially given the fact that\n> the vast majority of Bitcoin users do not voice any opinions on the matter\n> of consensus rules.\n>\n>\n> \u201cSybil attack\u201d. The genuine node will leave the chain if it doesn\u2019t like\n> the change. That\u2019s what restrain the majority miners acting foolishly.\n>\n> If the users like the idea, they follow. If they don\u2019t the fork away(and\n> not afraid of replay attack). I think it\u2019s a way to move forward together.\n>\n> Would you support the idea that we put the choice to the users to decide?\n>\n> The concept of \"sybil attacks\" doesn't really apply to enforcing\nnetwork-wide consensus changes. Even if someone spooled up 100 times more\nnodes than currently exist and they all \"signal\" for some consensus rule\nchange, that doesn't compel the rest of the \"genuine\" nodes to change the\nrules they enforce.\n\nThe users always have a choice with regard to what consensus rules to\nenforce and what software to run. Everyone is welcome to propose changes\nand write software that they make available to users.\n\n> Most attempts at measuring user consensus would probably be best described\n> as signaling rather than voting given that the act of doing so has no\n> actual power to affect consensus. Every user who runs a fully validating\n> node is free to enforce the rules with which the agree regardless of what\n> rules other entities are enforcing.\n>\n>>\n>>\n>>>\n>>> \u5bf9\u94b1\u5305\u7528\u6237\u7684\u9009\u62e9\uff0c\u662f\u4ed6\u4eec\u662f\u5426\u76f8\u4fe1\u591a\u6570\u77ff\u5de5\u3002\u5982\u679c\u4ed6\u4eec\u4e0d\u76f8\u4fe1\uff0c\u53ef\u4ee5\u901a\u8fc7\u5206\u53c9\u6765\u6d88\u9664\u6389\u77ff\u5de5\u3002\n>>> This choice for wallet users right now, is wether to follow the 51%\n>>> majority miners. If they don\u2019t, they can have their fork that get rid of\n>>> miners.\n>>>\n>>> \u5982\u679c\u4ed6\u4eec\u4ecd\u65e7\u76f8\u4fe1\u77ff\u5de5\uff0c\u90a3\u4e48\u53ef\u4ee5\u7559\u4e0b\u6765\u5e76\u8ddf\u968f\u77ff\u5de5\u5c06\u6765\u7684\u534f\u8bae\u6539\u53d8\u3002\n>>> If they do trust the majority miners, they stay and follow the vote for\n>>> upcoming protocol upgrade.\n>>>\n>>> \u6240\u4ee5\u95ee\u9898\u5728\u4e8e\uff1a\u6bd4\u7279\u5e01\u7684\u5f00\u53d1\u8005\u3001\u7528\u6237\u3001\u62e5\u6709\u8005\u3001\u670d\u52a1\u63d0\u4f9b\u8005\u3001\u751a\u81f3\u77ff\u5de5\uff0c\u662f\u5426\uff08\u4ecd\u7136\uff09\u5982\u767d\u76ae\u4e66\u4e2d\u63cf\u8ff0\u7684\u5bf9\u5927\u591a\u6570\u77ff\u5de5\u62e5\u6709\u4fe1\u4efb\u3002\n>>> So the questions is: Do the bitcoin developers, users, holders, service\n>>> provides, even miners, (still) have faith in the majority of miners as\n>>> designed in the white paper?\n>>>\n>>>\n>> There is a fundamental misconception regarding this point - the white\n>> paper refers to majority hashpower needing to be honest with regard to\n>> determining the correct chain within the context of many possible /valid/\n>> chain forks. It is not referring to using hashpower to determine the\n>> correct chain amongst an infinitely variable number of currently invalid\n>> chain forks. Bitcoin ecosystem participants should not have faith in miners\n>> (or any other entity) when it comes to choosing the consensus rules they\n>> wish to enforce.\n>>\n>>\n>> Arrrgh. I think in the BIP, the miners just invalids tx version 1\n>> temporarily. That\u2019s a \u201csoft fork\u201d right? If they dislike the idea, they can\n>> leave as always.\n>>\n>> From my understanding, if the only change miners make is to stop\n> confirming transactions that have a version less than X then it should be a\n> soft fork, yes.\n>\n>\n> And if we add a version 2 valid, does that still be a \u201csoft fork\u201d?\n>\n> As far as I know - if you're only restricting the validation rules then it\nshould be a non-breaking change.\n\n>\n> Regards,\n>\n> LIN Zheming\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170614/69baca3b/attachment.html>"
            },
            {
                "author": "Zheming Lin",
                "date": "2017-06-16T14:39:26",
                "message_text_only": "Will there be a  \u201cDo nothing\u201d soft fork, showing that the community can still moving forward?\n\nSo all the nodes get to upgrade to use tx version 2, and that avoid a chain split.\n\nAre you support that or against that, why?\n\nRegards,\nLIN Zheming\n\n> \u5728 2017\u5e746\u670815\u65e5\uff0c\u4e0a\u53484:11\uff0cJameson Lopp <jameson.lopp at gmail.com> \u5199\u9053\uff1a\n> \n> \n> \n> On Wed, Jun 14, 2017 at 12:04 PM, Zheming Lin <heater at gmail.com <mailto:heater at gmail.com>> wrote:\n> Hi Jameson:\n> \n>> \u5728 2017\u5e746\u670815\u65e5\uff0c02:55\uff0cJameson Lopp <jameson.lopp at gmail.com <mailto:jameson.lopp at gmail.com>> \u5199\u9053\uff1a\n>> \n>> \n>> \n>> On Wed, Jun 14, 2017 at 11:29 AM, Zheming Lin <heater at gmail.com <mailto:heater at gmail.com>> wrote:\n>> Hi Jameson:\n>> \n>>> \u5728 2017\u5e746\u670815\u65e5\uff0c01:20\uff0cJameson Lopp <jameson.lopp at gmail.com <mailto:jameson.lopp at gmail.com>> \u5199\u9053\uff1a\n>>> \n>>> \n>>> \n>>> On Wed, Jun 14, 2017 at 9:39 AM, Zheming Lin via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>>> \n>>> \n>>> > \u5728 2017\u5e746\u670814\u65e5\uff0c02:11\uff0cGregory Maxwell <greg at xiph.org <mailto:greg at xiph.org>> \u5199\u9053\uff1a\n>>> >\n>>> > On Tue, Jun 13, 2017 at 2:23 AM, Zheming Lin via bitcoin-dev\n>>> > <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>>> \n>>> > The enforcement of the system's rules by users broadly, and not just\n>>> > miners, is specifically described in the white paper (section 8,\n>>> > paragraph 2, it especially clear in the last sentence).  This is\n>>> > critical for the security of Bitcoin especially with the current\n>>> > degree of centralization in pools.  Without it, Bitcoin's security\n>>> > would look a lot more like the Ripple system.\n>>> >\n>>> \n>>> \u662f\u7684\uff0c\u7528\u6237\u6c38\u8fdc\u90fd\u6709\u9009\u62e9\uff0c\u5e76\u53ef\u4ee5\u629b\u5f03\u90a3\u4e9b\u8282\u70b9\u3002\u8fd9\u4e2a BIP \u5e76\u6ca1\u6709\u53cd\u5bf9\u8fd9\u4e9b\u7528\u6237\u8fd9\u4e48\u505a\u3002\u53ea\u6709\u90a3\u4e9b\u88ab\u52a8\u7684\u94b1\u5305\u7528\u6237\uff0c\u4ed6\u4eec\u9700\u8981\u77e5\u9053\u5fc5\u987b\u505a\u51fa\u4e00\u4e2a\u9009\u62e9\u3002\uff08\u800c\u4e0d\u662f\u88ab\u52a8\u7684\u8ddf\u968f\u9ed8\u8ba4\u7684\u7b56\u7565\uff09\n>>> Yes, users always have choice that they can abandon the nodes. This BIP does\u2019t go against them. I mean only the one(especially wallets) that\u2019s passive, they need to know there\u2019s a choice and pick one.\n>>> \n>>> \u8fd9\u4e2a BIP \u53ef\u4ee5\u88ab\u5e94\u7528\u4e8e\u51e0\u4e4e\u4efb\u4f55\u7684\u5347\u7ea7\u4e0a\uff0c\u5305\u62ec\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u7684\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u6269\u5bb9\uff0c\u6d8c\u73b0\u5171\u8bc6\uff0c\u516b\u5146\u6269\u5bb9\u7b49\u3002\u4f46\u8fd9\u4e9b\u5347\u7ea7\u5e76\u4e0d\u662f\u91cd\u70b9\u3002\n>>> This BIP can be applied to almost any upgrade, including Segwit, Segwit2x, 2m, ec, 8m\u2026 but the upgrade is not the key point.\n>>> \n>>> \u5230\u5e95\u6211\u4eec\u7684\u7528\u6237\u662f\u5426\u771f\u7684\u62e5\u6709\u9009\u62e9\uff1f\n>>> Did the users have any real choice?\n>>> \n>>> \u6211\u5e76\u4e0d\u80fd\u7406\u89e3\u4ed6\u4eec\u76f8\u4fe1\u5927\u90e8\u5206\u77ff\u5de5\uff08\u5c31\u50cf\u5f53\u524d\u4e00\u6837\uff09\uff0c\u4f46\u62d2\u7edd\u8fd9\u4e9b\u591a\u6570\u77ff\u5de5\u5bf9\u534f\u8bae\u6539\u53d8\u7684\u6295\u7968\u7ed3\u679c\u3002\n>>> I don\u2019t see the reason they trust the majority miners(as they do today) but refuse the vote for upcoming protocol upgrade.\n>>> \n>>> To be clear, Bitcoin is not a democracy - if you find yourself using the term \"voting\" then you may be misunderstanding how consensus forms. Once a feature has been vetted and the code is deployed, miners may signal that they are ready to enforce new rules. If for some reason miners are too \"passive or lazy\" or wish to \"veto\" the activation of the new rules, users may choose to circumvent said veto by refusing to accept blocks that do not show readiness for enforcing the new rules.\n>> \n>> How does the users show their opinion? They can fork away and leave. But what remains will be united. Are you afraid of the united users or the fork?\n>> \n>> I agree with you that the \u201cvote\u201d is not accurate. Could you kindly suggest an other word for that?\n>> \n>> I think users should have choice to follow the miners or not. Do you agree with this or not?\n>> \n>> Regarding consensus changes, users can voice their opinion on any number of communication platforms. Though if you're looking for a way for users to signal their intentions at the protocol level, every proposal for doing that to date has been arguably flawed. Measuring meatspace consensus is pretty tricky if not completely impossible, especially given the fact that the vast majority of Bitcoin users do not voice any opinions on the matter of consensus rules.\n>> \n> \n> \u201cSybil attack\u201d. The genuine node will leave the chain if it doesn\u2019t like the change. That\u2019s what restrain the majority miners acting foolishly.\n> \n> If the users like the idea, they follow. If they don\u2019t the fork away(and not afraid of replay attack). I think it\u2019s a way to move forward together. \n> \n> Would you support the idea that we put the choice to the users to decide?\n> \n> The concept of \"sybil attacks\" doesn't really apply to enforcing network-wide consensus changes. Even if someone spooled up 100 times more nodes than currently exist and they all \"signal\" for some consensus rule change, that doesn't compel the rest of the \"genuine\" nodes to change the rules they enforce. \n> \n> The users always have a choice with regard to what consensus rules to enforce and what software to run. Everyone is welcome to propose changes and write software that they make available to users.\n>> Most attempts at measuring user consensus would probably be best described as signaling rather than voting given that the act of doing so has no actual power to affect consensus. Every user who runs a fully validating node is free to enforce the rules with which the agree regardless of what rules other entities are enforcing. \n>>>  \n>>> \n>>> \u5bf9\u94b1\u5305\u7528\u6237\u7684\u9009\u62e9\uff0c\u662f\u4ed6\u4eec\u662f\u5426\u76f8\u4fe1\u591a\u6570\u77ff\u5de5\u3002\u5982\u679c\u4ed6\u4eec\u4e0d\u76f8\u4fe1\uff0c\u53ef\u4ee5\u901a\u8fc7\u5206\u53c9\u6765\u6d88\u9664\u6389\u77ff\u5de5\u3002\n>>> This choice for wallet users right now, is wether to follow the 51% majority miners. If they don\u2019t, they can have their fork that get rid of miners.\n>>> \n>>> \u5982\u679c\u4ed6\u4eec\u4ecd\u65e7\u76f8\u4fe1\u77ff\u5de5\uff0c\u90a3\u4e48\u53ef\u4ee5\u7559\u4e0b\u6765\u5e76\u8ddf\u968f\u77ff\u5de5\u5c06\u6765\u7684\u534f\u8bae\u6539\u53d8\u3002\n>>> If they do trust the majority miners, they stay and follow the vote for upcoming protocol upgrade.\n>>> \n>>> \u6240\u4ee5\u95ee\u9898\u5728\u4e8e\uff1a\u6bd4\u7279\u5e01\u7684\u5f00\u53d1\u8005\u3001\u7528\u6237\u3001\u62e5\u6709\u8005\u3001\u670d\u52a1\u63d0\u4f9b\u8005\u3001\u751a\u81f3\u77ff\u5de5\uff0c\u662f\u5426\uff08\u4ecd\u7136\uff09\u5982\u767d\u76ae\u4e66\u4e2d\u63cf\u8ff0\u7684\u5bf9\u5927\u591a\u6570\u77ff\u5de5\u62e5\u6709\u4fe1\u4efb\u3002\n>>> So the questions is: Do the bitcoin developers, users, holders, service provides, even miners, (still) have faith in the majority of miners as designed in the white paper?\n>>> \n>>>  \n>>> There is a fundamental misconception regarding this point - the white paper refers to majority hashpower needing to be honest with regard to determining the correct chain within the context of many possible /valid/ chain forks. It is not referring to using hashpower to determine the correct chain amongst an infinitely variable number of currently invalid chain forks. Bitcoin ecosystem participants should not have faith in miners (or any other entity) when it comes to choosing the consensus rules they wish to enforce.\n>>> \n>> \n>> Arrrgh. I think in the BIP, the miners just invalids tx version 1 temporarily. That\u2019s a \u201csoft fork\u201d right? If they dislike the idea, they can leave as always.\n>> \n>> From my understanding, if the only change miners make is to stop confirming transactions that have a version less than X then it should be a soft fork, yes. \n> \n> And if we add a version 2 valid, does that still be a \u201csoft fork\u201d?\n> \n> As far as I know - if you're only restricting the validation rules then it should be a non-breaking change. \n> \n> Regards,\n> \n> LIN Zheming\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170616/d80e014f/attachment-0001.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2017-06-15T05:04:30",
                "message_text_only": "> On Jun 14, 2017, at 9:55 PM, Jameson Lopp via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> \n> \n>> On Wed, Jun 14, 2017 at 11:29 AM, Zheming Lin <heater at gmail.com> wrote:\n>> Hi Jameson:\n>> \n>>> \u5728 2017\u5e746\u670815\u65e5\uff0c01:20\uff0cJameson Lopp <jameson.lopp at gmail.com> \u5199\u9053\uff1a\n>>> \n>>> \n>>> \n>>> On Wed, Jun 14, 2017 at 9:39 AM, Zheming Lin via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>> \n>>>> \n>>>> > \u5728 2017\u5e746\u670814\u65e5\uff0c02:11\uff0cGregory Maxwell <greg at xiph.org> \u5199\u9053\uff1a\n>>>> >\n>>>> > On Tue, Jun 13, 2017 at 2:23 AM, Zheming Lin via bitcoin-dev\n>>>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>> \n>>>> > The enforcement of the system's rules by users broadly, and not just\n>>>> > miners, is specifically described in the white paper (section 8,\n>>>> > paragraph 2, it especially clear in the last sentence).  This is\n>>>> > critical for the security of Bitcoin especially with the current\n>>>> > degree of centralization in pools.  Without it, Bitcoin's security\n>>>> > would look a lot more like the Ripple system.\n>>>> >\n>>>> \n>>>> \u662f\u7684\uff0c\u7528\u6237\u6c38\u8fdc\u90fd\u6709\u9009\u62e9\uff0c\u5e76\u53ef\u4ee5\u629b\u5f03\u90a3\u4e9b\u8282\u70b9\u3002\u8fd9\u4e2a BIP \u5e76\u6ca1\u6709\u53cd\u5bf9\u8fd9\u4e9b\u7528\u6237\u8fd9\u4e48\u505a\u3002\u53ea\u6709\u90a3\u4e9b\u88ab\u52a8\u7684\u94b1\u5305\u7528\u6237\uff0c\u4ed6\u4eec\u9700\u8981\u77e5\u9053\u5fc5\u987b\u505a\u51fa\u4e00\u4e2a\u9009\u62e9\u3002\uff08\u800c\u4e0d\u662f\u88ab\u52a8\u7684\u8ddf\u968f\u9ed8\u8ba4\u7684\u7b56\u7565\uff09\n>>>> Yes, users always have choice that they can abandon the nodes. This BIP does\u2019t go against them. I mean only the one(especially wallets) that\u2019s passive, they need to know there\u2019s a choice and pick one.\n>>>> \n>>>> \u8fd9\u4e2a BIP \u53ef\u4ee5\u88ab\u5e94\u7528\u4e8e\u51e0\u4e4e\u4efb\u4f55\u7684\u5347\u7ea7\u4e0a\uff0c\u5305\u62ec\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u7684\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u6269\u5bb9\uff0c\u6d8c\u73b0\u5171\u8bc6\uff0c\u516b\u5146\u6269\u5bb9\u7b49\u3002\u4f46\u8fd9\u4e9b\u5347\u7ea7\u5e76\u4e0d\u662f\u91cd\u70b9\u3002\n>>>> This BIP can be applied to almost any upgrade, including Segwit, Segwit2x, 2m, ec, 8m\u2026 but the upgrade is not the key point.\n>>>> \n>>>> \u5230\u5e95\u6211\u4eec\u7684\u7528\u6237\u662f\u5426\u771f\u7684\u62e5\u6709\u9009\u62e9\uff1f\n>>>> Did the users have any real choice?\n>>>> \n>>>> \u6211\u5e76\u4e0d\u80fd\u7406\u89e3\u4ed6\u4eec\u76f8\u4fe1\u5927\u90e8\u5206\u77ff\u5de5\uff08\u5c31\u50cf\u5f53\u524d\u4e00\u6837\uff09\uff0c\u4f46\u62d2\u7edd\u8fd9\u4e9b\u591a\u6570\u77ff\u5de5\u5bf9\u534f\u8bae\u6539\u53d8\u7684\u6295\u7968\u7ed3\u679c\u3002\n>>>> I don\u2019t see the reason they trust the majority miners(as they do today) but refuse the vote for upcoming protocol upgrade.\n>>> \n>>> To be clear, Bitcoin is not a democracy - if you find yourself using the term \"voting\" then you may be misunderstanding how consensus forms. Once a feature has been vetted and the code is deployed, miners may signal that they are ready to enforce new rules. If for some reason miners are too \"passive or lazy\" or wish to \"veto\" the activation of the new rules, users may choose to circumvent said veto by refusing to accept blocks that do not show readiness for enforcing the new rules.\n>> \n>> How does the users show their opinion? They can fork away and leave. But what remains will be united. Are you afraid of the united users or the fork?\n>> \n>> I agree with you that the \u201cvote\u201d is not accurate. Could you kindly suggest an other word for that?\n>> \n>> I think users should have choice to follow the miners or not. Do you agree with this or not?\n>> \n> Regarding consensus changes, users can voice their opinion on any number of communication platforms. Though if you're looking for a way for users to signal their intentions at the protocol level, every proposal for doing that to date has been arguably flawed.\n\nThere is exactly one way to express one's opinion on consensus at the protocol level - participation. The method is neither flawed nor inequitable in the context of Bitcoin.\n\nThe only \"problem\" with it is that people are not satisfied with having a voice limited to their participation. People are used to political systems in which they vote using their existence as power, not their participation, and they expect some subset of existing human bodies to control all others. This is the concept of some ruling over others, which gives the rulers a more powerful voice than either their proportional existence or individual participation would allow.\n\nBitcoin exists in defiance of political models. It is a market, not a state. The only choice you have is to participate or leave. If you are satisfied with others participating in your stead, you have left the consensus - you have no say.\n\nMost people who think they are participating in Bitcoin have either never participated or long ago left the consensus. Having surrendered it, these people now grope for a way to have their say. You can always reclaim your say on consensus, but you cannot take it away from others.\n\nTo have your say regarding hard forks, you must validate Bitcoin received in exchange for something else of economic value. To have your say regarding soft forks you must mine. Everyone has these options. Hard forks cannot control miners' selection of transactions and miners cannot control the economy's determination of what is valid. If one wants a say in either one must participate in the respective operation.\n\ne\n\n> Measuring meatspace consensus is pretty tricky if not completely impossible, especially given the fact that the vast majority of Bitcoin users do not voice any opinions on the matter of consensus rules.\n> \n> Most attempts at measuring user consensus would probably be best described as signaling rather than voting given that the act of doing so has no actual power to affect consensus. Every user who runs a fully validating node is free to enforce the rules with which the agree regardless of what rules other entities are enforcing. \n>>>  \n>>>> \n>>>> \u5bf9\u94b1\u5305\u7528\u6237\u7684\u9009\u62e9\uff0c\u662f\u4ed6\u4eec\u662f\u5426\u76f8\u4fe1\u591a\u6570\u77ff\u5de5\u3002\u5982\u679c\u4ed6\u4eec\u4e0d\u76f8\u4fe1\uff0c\u53ef\u4ee5\u901a\u8fc7\u5206\u53c9\u6765\u6d88\u9664\u6389\u77ff\u5de5\u3002\n>>>> This choice for wallet users right now, is wether to follow the 51% majority miners. If they don\u2019t, they can have their fork that get rid of miners.\n>>>> \n>>>> \u5982\u679c\u4ed6\u4eec\u4ecd\u65e7\u76f8\u4fe1\u77ff\u5de5\uff0c\u90a3\u4e48\u53ef\u4ee5\u7559\u4e0b\u6765\u5e76\u8ddf\u968f\u77ff\u5de5\u5c06\u6765\u7684\u534f\u8bae\u6539\u53d8\u3002\n>>>> If they do trust the majority miners, they stay and follow the vote for upcoming protocol upgrade.\n>>>> \n>>>> \u6240\u4ee5\u95ee\u9898\u5728\u4e8e\uff1a\u6bd4\u7279\u5e01\u7684\u5f00\u53d1\u8005\u3001\u7528\u6237\u3001\u62e5\u6709\u8005\u3001\u670d\u52a1\u63d0\u4f9b\u8005\u3001\u751a\u81f3\u77ff\u5de5\uff0c\u662f\u5426\uff08\u4ecd\u7136\uff09\u5982\u767d\u76ae\u4e66\u4e2d\u63cf\u8ff0\u7684\u5bf9\u5927\u591a\u6570\u77ff\u5de5\u62e5\u6709\u4fe1\u4efb\u3002\n>>>> So the questions is: Do the bitcoin developers, users, holders, service provides, even miners, (still) have faith in the majority of miners as designed in the white paper?\n>>>> \n>>>  \n>>> There is a fundamental misconception regarding this point - the white paper refers to majority hashpower needing to be honest with regard to determining the correct chain within the context of many possible /valid/ chain forks. It is not referring to using hashpower to determine the correct chain amongst an infinitely variable number of currently invalid chain forks. Bitcoin ecosystem participants should not have faith in miners (or any other entity) when it comes to choosing the consensus rules they wish to enforce.\n>>> \n>> \n>> Arrrgh. I think in the BIP, the miners just invalids tx version 1 temporarily. That\u2019s a \u201csoft fork\u201d right? If they dislike the idea, they can leave as always.\n>> \n> From my understanding, if the only change miners make is to stop confirming transactions that have a version less than X then it should be a soft fork, yes. \n>> \n>> Regards\n>> \n>> LIN Zheming\n>> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170615/17cff7df/attachment-0001.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2017-06-15T18:38:57",
                "message_text_only": "> How does the users show their opinion? They can fork away and leave. But\nwhat remains will be united. Are you afraid of the united users or the fork?\n\nI had proposed earlier and maintain that \"UTXO bits\" can be used to allow\ncoordinated user participation activation thresholds akin to other\nhashpower thresholds.\n\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014251.html\n\nWhile I'm not certain that my implementation was correct (or was just too\ncomplicated and concerned with compression at the expense of readability),\nI am fairly certain that this mechanism - or a similar one - would be a\nreasonable way for users to coordinate changes independently of miners and\nwith very high consensus levels.\n\n\nOn Thu, Jun 15, 2017 at 1:04 AM, Eric Voskuil via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n>\n> On Jun 14, 2017, at 9:55 PM, Jameson Lopp via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>\n>\n> On Wed, Jun 14, 2017 at 11:29 AM, Zheming Lin <heater at gmail.com> wrote:\n>\n>> Hi Jameson:\n>>\n>> \u5728 2017\u5e746\u670815\u65e5\uff0c01:20\uff0cJameson Lopp <jameson.lopp at gmail.com> \u5199\u9053\uff1a\n>>\n>>\n>>\n>> On Wed, Jun 14, 2017 at 9:39 AM, Zheming Lin via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>>\n>>>\n>>> > \u5728 2017\u5e746\u670814\u65e5\uff0c02:11\uff0cGregory Maxwell <greg at xiph.org> \u5199\u9053\uff1a\n>>> >\n>>> > On Tue, Jun 13, 2017 at 2:23 AM, Zheming Lin via bitcoin-dev\n>>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>> > The enforcement of the system's rules by users broadly, and not just\n>>> > miners, is specifically described in the white paper (section 8,\n>>> > paragraph 2, it especially clear in the last sentence).  This is\n>>> > critical for the security of Bitcoin especially with the current\n>>> > degree of centralization in pools.  Without it, Bitcoin's security\n>>> > would look a lot more like the Ripple system.\n>>> >\n>>>\n>>> \u662f\u7684\uff0c\u7528\u6237\u6c38\u8fdc\u90fd\u6709\u9009\u62e9\uff0c\u5e76\u53ef\u4ee5\u629b\u5f03\u90a3\u4e9b\u8282\u70b9\u3002\u8fd9\u4e2a BIP \u5e76\u6ca1\u6709\u53cd\u5bf9\u8fd9\u4e9b\u7528\u6237\u8fd9\u4e48\u505a\u3002\u53ea\u6709\u90a3\u4e9b\u88ab\u52a8\u7684\u94b1\u5305\u7528\u6237\uff0c\u4ed6\u4eec\u9700\u8981\u77e5\n>>> \u9053\u5fc5\u987b\u505a\u51fa\u4e00\u4e2a\u9009\u62e9\u3002\uff08\u800c\u4e0d\u662f\u88ab\u52a8\u7684\u8ddf\u968f\u9ed8\u8ba4\u7684\u7b56\u7565\uff09\n>>> Yes, users always have choice that they can abandon the nodes. This BIP\n>>> does\u2019t go against them. I mean only the one(especially wallets) that\u2019s\n>>> passive, they need to know there\u2019s a choice and pick one.\n>>>\n>>> \u8fd9\u4e2a BIP \u53ef\u4ee5\u88ab\u5e94\u7528\u4e8e\u51e0\u4e4e\u4efb\u4f55\u7684\u5347\u7ea7\u4e0a\uff0c\u5305\u62ec\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u7684\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u6269\u5bb9\uff0c\u6d8c\u73b0\u5171\u8bc6\uff0c\u516b\u5146\u6269\u5bb9\u7b49\u3002\u4f46\u8fd9\u4e9b\u5347\u7ea7\u5e76\u4e0d\u662f\u91cd\u70b9\u3002\n>>> This BIP can be applied to almost any upgrade, including Segwit,\n>>> Segwit2x, 2m, ec, 8m\u2026 but the upgrade is not the key point.\n>>>\n>>> \u5230\u5e95\u6211\u4eec\u7684\u7528\u6237\u662f\u5426\u771f\u7684\u62e5\u6709\u9009\u62e9\uff1f\n>>> Did the users have any real choice?\n>>>\n>>> \u6211\u5e76\u4e0d\u80fd\u7406\u89e3\u4ed6\u4eec\u76f8\u4fe1\u5927\u90e8\u5206\u77ff\u5de5\uff08\u5c31\u50cf\u5f53\u524d\u4e00\u6837\uff09\uff0c\u4f46\u62d2\u7edd\u8fd9\u4e9b\u591a\u6570\u77ff\u5de5\u5bf9\u534f\u8bae\u6539\u53d8\u7684\u6295\u7968\u7ed3\u679c\u3002\n>>> I don\u2019t see the reason they trust the majority miners(as they do today)\n>>> but refuse the vote for upcoming protocol upgrade.\n>>>\n>>\n>> To be clear, Bitcoin is not a democracy - if you find yourself using the\n>> term \"voting\" then you may be misunderstanding how consensus forms. Once a\n>> feature has been vetted and the code is deployed, miners may signal that\n>> they are ready to enforce new rules. If for some reason miners are too\n>> \"passive or lazy\" or wish to \"veto\" the activation of the new rules, users\n>> may choose to circumvent said veto by refusing to accept blocks that do not\n>> show readiness for enforcing the new rules.\n>>\n>>\n>> How does the users show their opinion? They can fork away and leave. But\n>> what remains will be united. Are you afraid of the united users or the fork?\n>>\n>> I agree with you that the \u201cvote\u201d is not accurate. Could you kindly\n>> suggest an other word for that?\n>>\n>> I think users should have choice to follow the miners or not. Do you\n>> agree with this or not?\n>>\n>> Regarding consensus changes, users can voice their opinion on any number\n> of communication platforms. Though if you're looking for a way for users to\n> signal their intentions at the protocol level, every proposal for doing\n> that to date has been arguably flawed.\n>\n>\n> There is exactly one way to express one's opinion on consensus at the\n> protocol level - participation. The method is neither flawed nor\n> inequitable in the context of Bitcoin.\n>\n> The only \"problem\" with it is that people are not satisfied with having a\n> voice limited to their participation. People are used to political systems\n> in which they vote using their existence as power, not their participation,\n> and they expect some subset of existing human bodies to control all others.\n> This is the concept of some ruling over others, which gives the rulers a\n> more powerful voice than either their proportional existence or individual\n> participation would allow.\n>\n> Bitcoin exists in defiance of political models. It is a market, not a\n> state. The only choice you have is to participate or leave. If you are\n> satisfied with others participating in your stead, you have left the\n> consensus - you have no say.\n>\n> Most people who think they are participating in Bitcoin have either never\n> participated or long ago left the consensus. Having surrendered it, these\n> people now grope for a way to have their say. You can always reclaim your\n> say on consensus, but you cannot take it away from others.\n>\n> To have your say regarding hard forks, you must validate Bitcoin received\n> in exchange for something else of economic value. To have your say\n> regarding soft forks you must mine. Everyone has these options. Hard forks\n> cannot control miners' selection of transactions and miners cannot control\n> the economy's determination of what is valid. If one wants a say in either\n> one must participate in the respective operation.\n>\n> e\n>\n> Measuring meatspace consensus is pretty tricky if not completely\n> impossible, especially given the fact that the vast majority of Bitcoin\n> users do not voice any opinions on the matter of consensus rules.\n>\n> Most attempts at measuring user consensus would probably be best described\n> as signaling rather than voting given that the act of doing so has no\n> actual power to affect consensus. Every user who runs a fully validating\n> node is free to enforce the rules with which the agree regardless of what\n> rules other entities are enforcing.\n>\n>>\n>>\n>>>\n>>> \u5bf9\u94b1\u5305\u7528\u6237\u7684\u9009\u62e9\uff0c\u662f\u4ed6\u4eec\u662f\u5426\u76f8\u4fe1\u591a\u6570\u77ff\u5de5\u3002\u5982\u679c\u4ed6\u4eec\u4e0d\u76f8\u4fe1\uff0c\u53ef\u4ee5\u901a\u8fc7\u5206\u53c9\u6765\u6d88\u9664\u6389\u77ff\u5de5\u3002\n>>> This choice for wallet users right now, is wether to follow the 51%\n>>> majority miners. If they don\u2019t, they can have their fork that get rid of\n>>> miners.\n>>>\n>>> \u5982\u679c\u4ed6\u4eec\u4ecd\u65e7\u76f8\u4fe1\u77ff\u5de5\uff0c\u90a3\u4e48\u53ef\u4ee5\u7559\u4e0b\u6765\u5e76\u8ddf\u968f\u77ff\u5de5\u5c06\u6765\u7684\u534f\u8bae\u6539\u53d8\u3002\n>>> If they do trust the majority miners, they stay and follow the vote for\n>>> upcoming protocol upgrade.\n>>>\n>>> \u6240\u4ee5\u95ee\u9898\u5728\u4e8e\uff1a\u6bd4\u7279\u5e01\u7684\u5f00\u53d1\u8005\u3001\u7528\u6237\u3001\u62e5\u6709\u8005\u3001\u670d\u52a1\u63d0\u4f9b\u8005\u3001\u751a\u81f3\u77ff\u5de5\uff0c\u662f\u5426\uff08\u4ecd\u7136\uff09\u5982\u767d\u76ae\u4e66\u4e2d\u63cf\u8ff0\u7684\u5bf9\u5927\u591a\u6570\u77ff\u5de5\u62e5\u6709\u4fe1\u4efb\u3002\n>>> So the questions is: Do the bitcoin developers, users, holders, service\n>>> provides, even miners, (still) have faith in the majority of miners as\n>>> designed in the white paper?\n>>>\n>>>\n>> There is a fundamental misconception regarding this point - the white\n>> paper refers to majority hashpower needing to be honest with regard to\n>> determining the correct chain within the context of many possible /valid/\n>> chain forks. It is not referring to using hashpower to determine the\n>> correct chain amongst an infinitely variable number of currently invalid\n>> chain forks. Bitcoin ecosystem participants should not have faith in miners\n>> (or any other entity) when it comes to choosing the consensus rules they\n>> wish to enforce.\n>>\n>>\n>> Arrrgh. I think in the BIP, the miners just invalids tx version 1\n>> temporarily. That\u2019s a \u201csoft fork\u201d right? If they dislike the idea, they can\n>> leave as always.\n>>\n>> From my understanding, if the only change miners make is to stop\n> confirming transactions that have a version less than X then it should be a\n> soft fork, yes.\n>\n>>\n>> Regards\n>>\n>> LIN Zheming\n>>\n>>\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170615/33b83dd0/attachment-0001.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2017-06-16T03:09:33",
                "message_text_only": "Seems functional as a way for the economy to signal, but signaling is only an expression of intent to participate, not actual participation. One can signal and then not participate, as we see with hash rate signaling.\n\nToday we see people complaining about miner control, because hash rate is centralized. Tomorrow we are likely to see people complaining about economic control, as its centralization continues.\n\nSo imagine a few web wallets/APIs signaling based on their ownership of the major fraction of value. Can potential splitters safely rely on these signals? The wallets have a voice because they participate.\n\nConsider also that user activated soft forks are not followed by unmodified nodes (on the presumption of minority hash rate support that necessitated the economic activation). In other words, they exhibit the categorical behavior of hard forks (incompatibility). So to the extent that the economy has control, it is only over the ability to hard fork (split the chain).\n\ne\n\n> On Jun 15, 2017, at 9:38 PM, Erik Aronesty <erik at q32.com> wrote:\n> \n> > How does the users show their opinion? They can fork away and leave. But what remains will be united. Are you afraid of the united users or the fork?\n> \n> I had proposed earlier and maintain that \"UTXO bits\" can be used to allow coordinated user participation activation thresholds akin to other hashpower thresholds.   \n> \n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014251.html\n> \n> While I'm not certain that my implementation was correct (or was just too complicated and concerned with compression at the expense of readability), I am fairly certain that this mechanism - or a similar one - would be a reasonable way for users to coordinate changes independently of miners and with very high consensus levels.\n> \n> \n>> On Thu, Jun 15, 2017 at 1:04 AM, Eric Voskuil via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>> \n>>> On Jun 14, 2017, at 9:55 PM, Jameson Lopp via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> \n>>> \n>>> \n>>>> On Wed, Jun 14, 2017 at 11:29 AM, Zheming Lin <heater at gmail.com> wrote:\n>>>> Hi Jameson:\n>>>> \n>>>>> \u5728 2017\u5e746\u670815\u65e5\uff0c01:20\uff0cJameson Lopp <jameson.lopp at gmail.com> \u5199\u9053\uff1a\n>>>>> \n>>>>> \n>>>>> \n>>>>> On Wed, Jun 14, 2017 at 9:39 AM, Zheming Lin via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>>> \n>>>>>> \n>>>>>> > \u5728 2017\u5e746\u670814\u65e5\uff0c02:11\uff0cGregory Maxwell <greg at xiph.org> \u5199\u9053\uff1a\n>>>>>> >\n>>>>>> > On Tue, Jun 13, 2017 at 2:23 AM, Zheming Lin via bitcoin-dev\n>>>>>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>>> \n>>>>>> > The enforcement of the system's rules by users broadly, and not just\n>>>>>> > miners, is specifically described in the white paper (section 8,\n>>>>>> > paragraph 2, it especially clear in the last sentence).  This is\n>>>>>> > critical for the security of Bitcoin especially with the current\n>>>>>> > degree of centralization in pools.  Without it, Bitcoin's security\n>>>>>> > would look a lot more like the Ripple system.\n>>>>>> >\n>>>>>> \n>>>>>> \u662f\u7684\uff0c\u7528\u6237\u6c38\u8fdc\u90fd\u6709\u9009\u62e9\uff0c\u5e76\u53ef\u4ee5\u629b\u5f03\u90a3\u4e9b\u8282\u70b9\u3002\u8fd9\u4e2a BIP \u5e76\u6ca1\u6709\u53cd\u5bf9\u8fd9\u4e9b\u7528\u6237\u8fd9\u4e48\u505a\u3002\u53ea\u6709\u90a3\u4e9b\u88ab\u52a8\u7684\u94b1\u5305\u7528\u6237\uff0c\u4ed6\u4eec\u9700\u8981\u77e5\u9053\u5fc5\u987b\u505a\u51fa\u4e00\u4e2a\u9009\u62e9\u3002\uff08\u800c\u4e0d\u662f\u88ab\u52a8\u7684\u8ddf\u968f\u9ed8\u8ba4\u7684\u7b56\u7565\uff09\n>>>>>> Yes, users always have choice that they can abandon the nodes. This BIP does\u2019t go against them. I mean only the one(especially wallets) that\u2019s passive, they need to know there\u2019s a choice and pick one.\n>>>>>> \n>>>>>> \u8fd9\u4e2a BIP \u53ef\u4ee5\u88ab\u5e94\u7528\u4e8e\u51e0\u4e4e\u4efb\u4f55\u7684\u5347\u7ea7\u4e0a\uff0c\u5305\u62ec\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u7684\u9694\u79bb\u89c1\u8bc1\uff0c\u4e24\u5146\u6269\u5bb9\uff0c\u6d8c\u73b0\u5171\u8bc6\uff0c\u516b\u5146\u6269\u5bb9\u7b49\u3002\u4f46\u8fd9\u4e9b\u5347\u7ea7\u5e76\u4e0d\u662f\u91cd\u70b9\u3002\n>>>>>> This BIP can be applied to almost any upgrade, including Segwit, Segwit2x, 2m, ec, 8m\u2026 but the upgrade is not the key point.\n>>>>>> \n>>>>>> \u5230\u5e95\u6211\u4eec\u7684\u7528\u6237\u662f\u5426\u771f\u7684\u62e5\u6709\u9009\u62e9\uff1f\n>>>>>> Did the users have any real choice?\n>>>>>> \n>>>>>> \u6211\u5e76\u4e0d\u80fd\u7406\u89e3\u4ed6\u4eec\u76f8\u4fe1\u5927\u90e8\u5206\u77ff\u5de5\uff08\u5c31\u50cf\u5f53\u524d\u4e00\u6837\uff09\uff0c\u4f46\u62d2\u7edd\u8fd9\u4e9b\u591a\u6570\u77ff\u5de5\u5bf9\u534f\u8bae\u6539\u53d8\u7684\u6295\u7968\u7ed3\u679c\u3002\n>>>>>> I don\u2019t see the reason they trust the majority miners(as they do today) but refuse the vote for upcoming protocol upgrade.\n>>>>> \n>>>>> To be clear, Bitcoin is not a democracy - if you find yourself using the term \"voting\" then you may be misunderstanding how consensus forms. Once a feature has been vetted and the code is deployed, miners may signal that they are ready to enforce new rules. If for some reason miners are too \"passive or lazy\" or wish to \"veto\" the activation of the new rules, users may choose to circumvent said veto by refusing to accept blocks that do not show readiness for enforcing the new rules.\n>>>> \n>>>> How does the users show their opinion? They can fork away and leave. But what remains will be united. Are you afraid of the united users or the fork?\n>>>> \n>>>> I agree with you that the \u201cvote\u201d is not accurate. Could you kindly suggest an other word for that?\n>>>> \n>>>> I think users should have choice to follow the miners or not. Do you agree with this or not?\n>>>> \n>>> Regarding consensus changes, users can voice their opinion on any number of communication platforms. Though if you're looking for a way for users to signal their intentions at the protocol level, every proposal for doing that to date has been arguably flawed.\n>> \n>> There is exactly one way to express one's opinion on consensus at the protocol level - participation. The method is neither flawed nor inequitable in the context of Bitcoin.\n>> \n>> The only \"problem\" with it is that people are not satisfied with having a voice limited to their participation. People are used to political systems in which they vote using their existence as power, not their participation, and they expect some subset of existing human bodies to control all others. This is the concept of some ruling over others, which gives the rulers a more powerful voice than either their proportional existence or individual participation would allow.\n>> \n>> Bitcoin exists in defiance of political models. It is a market, not a state. The only choice you have is to participate or leave. If you are satisfied with others participating in your stead, you have left the consensus - you have no say.\n>> \n>> Most people who think they are participating in Bitcoin have either never participated or long ago left the consensus. Having surrendered it, these people now grope for a way to have their say. You can always reclaim your say on consensus, but you cannot take it away from others.\n>> \n>> To have your say regarding hard forks, you must validate Bitcoin received in exchange for something else of economic value. To have your say regarding soft forks you must mine. Everyone has these options. Hard forks cannot control miners' selection of transactions and miners cannot control the economy's determination of what is valid. If one wants a say in either one must participate in the respective operation.\n>> \n>> e\n>> \n>>> Measuring meatspace consensus is pretty tricky if not completely impossible, especially given the fact that the vast majority of Bitcoin users do not voice any opinions on the matter of consensus rules.\n>>> \n>>> Most attempts at measuring user consensus would probably be best described as signaling rather than voting given that the act of doing so has no actual power to affect consensus. Every user who runs a fully validating node is free to enforce the rules with which the agree regardless of what rules other entities are enforcing. \n>>>>>  \n>>>>>> \n>>>>>> \u5bf9\u94b1\u5305\u7528\u6237\u7684\u9009\u62e9\uff0c\u662f\u4ed6\u4eec\u662f\u5426\u76f8\u4fe1\u591a\u6570\u77ff\u5de5\u3002\u5982\u679c\u4ed6\u4eec\u4e0d\u76f8\u4fe1\uff0c\u53ef\u4ee5\u901a\u8fc7\u5206\u53c9\u6765\u6d88\u9664\u6389\u77ff\u5de5\u3002\n>>>>>> This choice for wallet users right now, is wether to follow the 51% majority miners. If they don\u2019t, they can have their fork that get rid of miners.\n>>>>>> \n>>>>>> \u5982\u679c\u4ed6\u4eec\u4ecd\u65e7\u76f8\u4fe1\u77ff\u5de5\uff0c\u90a3\u4e48\u53ef\u4ee5\u7559\u4e0b\u6765\u5e76\u8ddf\u968f\u77ff\u5de5\u5c06\u6765\u7684\u534f\u8bae\u6539\u53d8\u3002\n>>>>>> If they do trust the majority miners, they stay and follow the vote for upcoming protocol upgrade.\n>>>>>> \n>>>>>> \u6240\u4ee5\u95ee\u9898\u5728\u4e8e\uff1a\u6bd4\u7279\u5e01\u7684\u5f00\u53d1\u8005\u3001\u7528\u6237\u3001\u62e5\u6709\u8005\u3001\u670d\u52a1\u63d0\u4f9b\u8005\u3001\u751a\u81f3\u77ff\u5de5\uff0c\u662f\u5426\uff08\u4ecd\u7136\uff09\u5982\u767d\u76ae\u4e66\u4e2d\u63cf\u8ff0\u7684\u5bf9\u5927\u591a\u6570\u77ff\u5de5\u62e5\u6709\u4fe1\u4efb\u3002\n>>>>>> So the questions is: Do the bitcoin developers, users, holders, service provides, even miners, (still) have faith in the majority of miners as designed in the white paper?\n>>>>>> \n>>>>>  \n>>>>> There is a fundamental misconception regarding this point - the white paper refers to majority hashpower needing to be honest with regard to determining the correct chain within the context of many possible /valid/ chain forks. It is not referring to using hashpower to determine the correct chain amongst an infinitely variable number of currently invalid chain forks. Bitcoin ecosystem participants should not have faith in miners (or any other entity) when it comes to choosing the consensus rules they wish to enforce.\n>>>>> \n>>>> \n>>>> Arrrgh. I think in the BIP, the miners just invalids tx version 1 temporarily. That\u2019s a \u201csoft fork\u201d right? If they dislike the idea, they can leave as always.\n>>>> \n>>> From my understanding, if the only change miners make is to stop confirming transactions that have a version less than X then it should be a soft fork, yes. \n>>>> \n>>>> Regards\n>>>> \n>>>> LIN Zheming\n>>>> \n>>> \n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n> \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170616/32363171/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposal: Demonstration of Phase in Full Network Upgrade Activated by Miners",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Voskuil",
                "Zheming Lin",
                "James Hilliard",
                "Gregory Maxwell",
                "Erik Aronesty",
                "Jared Lee Richardson",
                "Jameson Lopp"
            ],
            "messages_count": 23,
            "total_messages_chars_count": 206349
        }
    },
    {
        "title": "[bitcoin-dev] User coordination of soft fork activation",
        "thread_messages": [
            {
                "author": "Martin Habov\u0161tiak",
                "date": "2017-06-17T05:37:46",
                "message_text_only": "Hello!\n\nI'd appreciate if anyone would like to review my proposal on improving\nUASFs, here's the link:\nhttps://gist.github.com/Kixunil/a99c45e79d74bf73328d4192100aa6c6\n\nAbstract:\n\nThis document proposes a novel way to improve coordination of users who\nwish to activate a new soft fork in Bitcoin. The main idea is to use smart\ncontracts to incentivize users to actually enforce the soft fork with lower\nrisk of support being too low. At the same time the contract is in effect\nonly if significant part of economy agrees to it. The contract also signals\nthe intent to miners and other users in a way that would be otherwise\nexpensive for sybil attackers. This proposal also suggests an interesting\nway to pay developers for the development of the soft fork code.\n\nFYI the document is timestamped in\ntransaction 05d5eabcf77964a1e5a704175ef2e54f1fe243ed7aad0a80ede47845173bd2e5\nin block 0000000000000000002f4b63ee720958da187405bb807466177be8da2c6ad3b6.\n\nHave a nice day!\n\nMartin\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170617/672ec878/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "User coordination of soft fork activation",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Martin Habov\u0161tiak"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1158
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Core 0.14.2 released",
        "thread_messages": [
            {
                "author": "Wladimir J. van der Laan",
                "date": "2017-06-17T11:40:22",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nBitcoin Core version 0.14.2 is now available from:\n\n  <https://bitcoin.org/bin/bitcoin-core-0.14.2/>\n\nOr by torrent:\n\n  magnet:?xt=urn:btih:b4fc7820df95b8b39603ad246c241272ec403619&dn=bitcoin-core-0.14.2&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.ccc.de%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce\n\nThis is a new minor version release, including various bugfixes and\nperformance improvements, as well as updated translations.\n\nPlease report bugs using the issue tracker at github:\n\n  <https://github.com/bitcoin/bitcoin/issues>\n\nTo receive security and update notifications, please subscribe to:\n\n  <https://bitcoincore.org/en/list/announcements/join/>\n\nCompatibility\n==============\n\nBitcoin Core is extensively tested on multiple operating systems using\nthe Linux kernel, macOS 10.8+, and Windows Vista and later.\n\nMicrosoft ended support for Windows XP on [April 8th, 2014](https://www.microsoft.com/en-us/WindowsForBusiness/end-of-xp-support),\nNo attempt is made to prevent installing or running the software on Windows XP, you\ncan still do so at your own risk but be aware that there are known instabilities and issues.\nPlease do not report issues about Windows XP to the issue tracker.\n\nBitcoin Core should also work on most other Unix-like systems but is not\nfrequently tested on them.\n\nNotable changes\n===============\n\nminiupnp CVE-2017-8798\n- ----------------------------\n\nBundled miniupnpc was updated to 2.0.20170509. This fixes an integer signedness error\n(present in MiniUPnPc v1.4.20101221 through v2.0) that allows remote attackers\n(within the LAN) to cause a denial of service or possibly have unspecified\nother impact.\n\nThis only affects users that have explicitly enabled UPnP through the GUI\nsetting or through the `-upnp` option, as since the last UPnP vulnerability\n(in Bitcoin Core 0.10.3) it has been disabled by default.\n\nIf you use this option, it is recommended to upgrade to this version as soon as\npossible.\n\nKnown Bugs\n==========\n\nSince 0.14.0 the approximate transaction fee shown in Bitcoin-Qt when using coin\ncontrol and smart fee estimation does not reflect any change in target from the\nsmart fee slider. It will only present an approximate fee calculated using the\ndefault target. The fee calculated using the correct target is still applied to\nthe transaction and shown in the final send confirmation dialog.\n\n0.14.2 Change log\n=================\n\nDetailed release notes follow. This overview includes changes that affect\nbehavior, not code moves, refactors and string updates. For convenience in locating\nthe code changes and accompanying discussion, both the pull request and\ngit merge commit are mentioned.\n\n### RPC and other APIs\n- - #10410 `321419b` Fix importwallet edge case rescan bug (ryanofsky)\n\n### P2P protocol and network code\n- - #10424 `37a8fc5` Populate services in GetLocalAddress (morcos)\n- - #10441 `9e3ad50` Only enforce expected services for half of outgoing connections (theuni)\n\n### Build system\n- - #10414 `ffb0c4b` miniupnpc 2.0.20170509 (fanquake)\n- - #10228 `ae479bc` Regenerate bitcoin-config.h as necessary (theuni)\n\n### Miscellaneous\n- - #10245 `44a17f2` Minor fix in build documentation for FreeBSD 11 (shigeya)\n- - #10215 `0aee4a1` Check interruptNet during dnsseed lookups (TheBlueMatt)\n\n### GUI\n- - #10231 `1e936d7` Reduce a significant cs_main lock freeze (jonasschnelli)\n\n### Wallet\n- - #10294 `1847642` Unset change position when there is no change (instagibbs)\n\nCredits\n=======\n\nThanks to everyone who directly contributed to this release:\n\n- - Alex Morcos\n- - Cory Fields\n- - fanquake\n- - Gregory Sanders\n- - Jonas Schnelli\n- - Matt Corallo\n- - Russell Yanofsky\n- - Shigeya Suzuki\n- - Wladimir J. van der Laan\n\nAs well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAEBCgAGBQJZRRTMAAoJEB5K7WKYbNJdqk0IANF5Q49ID3B77b0CwSKzjTxk\nKtp0qgvtig0ZMnzVlgjULUsRW8EbecWCQwmgRo8uUoCGmNS2u7u+s28kIIkicELE\nBpWcW4eC6NdCCjB1CSnmX/tno4gFwOZutVj/XUXJCBEuBbo6fIK0cVDas5vw8UVa\ngXL5ytwXeCws3z9f3iiD1Nl0k+J+dRb0sJ2u0A1+XqoMFfInMUFiP/fa9XWaimKo\n62jD07IJDKtH4PEKG8v+FLZounRP7t1lhU0AiQ0Uj67mBmllwWD0KeZi0f4SokMX\naezEH+2UIW3Ph/QbG+ktZYUzbDALnRIHEBP4GQUuWiUPZKo3vAS3yhvh1nvYUW4=\n=VBdE\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.14.2 released",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Wladimir J. van der Laan"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 4532
        }
    },
    {
        "title": "[bitcoin-dev] An alternative way to protect the network from 51% attacks threat",
        "thread_messages": [
            {
                "author": "Wang Chun",
                "date": "2017-06-19T18:01:45",
                "message_text_only": "There has been proposal to change the PoW in case of potential 51% attacks\nfrom malicious miners during a fork. But such a change in PoW renders\nmulti-billion-dollar of ASIC into worthless. which hurts economy so much\nand the average innocent mining users. I would propose, instead of PoW\nchange, we could change the system to the same double sha256 PoW but mix it\nwith PoS features. Such a PoW+PoS system has several advantages:\n* It protects existing multi-billion dollar investments from innocent\nmining users,\n* A malicious miner cannot launch attacks and rewrite the blockchain with\n51% or even more hashrate,\n* If we insert 4 PoS blocks between 2 PoW blocks, we'll have 2-minute block\ntime span, that solves the long confirmation time problem,\n* We'll suddenly have 5 times of block space, that solves the scaling\nproblem,\n* The PoS blocks only mine transaction fees, so the 21M cap remains,\n* With careful design, the PoW+PoS transition _might_ be able to deploy\nwith a soft fork.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170620/8b2e692c/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2017-06-19T18:31:54",
                "message_text_only": "On Tue, Jun 20, 2017 at 02:01:45AM +0800, Wang Chun via bitcoin-dev wrote:\n> There has been proposal to change the PoW in case of potential 51% attacks\n> from malicious miners during a fork. But such a change in PoW renders\n> multi-billion-dollar of ASIC into worthless. which hurts economy so much\n> and the average innocent mining users. I would propose, instead of PoW\n> change, we could change the system to the same double sha256 PoW but mix it\n> with PoS features. Such a PoW+PoS system has several advantages:\n\n\nYou have to specify what you mean by \"PoS\" - there's dozens of variations.\nEqually, existing pure PoS schemes probably don't make sense as a \"bolt-on\"\nadd-on, as once you introduce PoW to it you should design something that uses\nthe capabilities of both systems.\n\nFWIW, I've heard that the Ethereum guys are leaning towards abandoning pure PoS\nand are now trying to design a PoW + staking system instead.\n\n> * It protects existing multi-billion dollar investments from innocent\n> mining users,\n\nTo be clear, you mean such a scheme would protect the multi-billion dollar\ninvestments non-malicious miners have made in SHA256^2 hardware by ensuring it\nremains useful, right?\n\n> * A malicious miner cannot launch attacks and rewrite the blockchain with\n> 51% or even more hashrate,\n> * If we insert 4 PoS blocks between 2 PoW blocks, we'll have 2-minute block\n> time span, that solves the long confirmation time problem,\n\nNote that if those PoS blocks are *pure* PoS, you'll create a significant risk\nof double-spend attacks, as there's zero inherent cost to creating a pure-PoS\nblock. Such blocks can't be relied on for confirmations; even \"slasher\" schemes\nhave significant problems with sybil attacks.\n\n> * We'll suddenly have 5 times of block space, that solves the scaling\n> problem,\n\nThe scaling problem is one of scalability; PoS does nothing to improve\nscalability (though many in the ETH community have been making dishonest\nstatements to the contrary).\n\n> * The PoS blocks only mine transaction fees, so the 21M cap remains,\n> * With careful design, the PoW+PoS transition _might_ be able to deploy\n> with a soft fork.\n\nAs a sidechain yes, but in what you propose above the extra blocks wouldn't\ncontain transactions that non-PoS-aware nodes could understand in a\nbackwards-compatible way.\n\n\nAll the above aside, I don't think it's inherently wrong to look at adding PoS\nblock *approval* mechanisms, where a block isn't considered valid without some\nkind of coin owner approval. While pure-PoS is fundamentally broken in a\ndecentralized setting, it may be possible to mitigate the reasons it's broken\nwith PoW and get a system that has a stronger security model than PoW alone.\n\nFWIW there's some early discussions by myself and others about this type of\napproach on the #bitcoin-wizards IRC channels, IIRC from around 2014 or so.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170619/9c314d95/attachment.sig>"
            },
            {
                "author": "Moral Agent",
                "date": "2017-06-19T20:32:23",
                "message_text_only": "Here is the text of a post to reddit from Feb 2017, discussing a similar\nidea, and wondering if it could reduce the incentive to delay broadcast of\nsolved blocks:\n\n# How an anchored Proof of Stake Sidechain can help the Bitcoin main chain\n\n# Steps:\n\n1. Soft fork Bitcoin to enable side chains\n\n2. Create a side chain that is secured with Proof of Stake. Call blocks on\nthis chain \"POS-blocks.\" The original chain is made of \"POW-blocks.\"\n\n3. Side chain mints one POS-block after each POW-block on the main chain,\nand contains the hash of the POW-block, and the hash of the previous\nPOS-block. See diagram [here.](https://s32.postimg.org/916n9zxlx/Pos_Sf1.png\n)\n\n4. Side chain Minters must make a deposit in order to mint. If they mint an\ninvalid POS-block, they lose the deposit.\n\n5. Side chain blocks are small enough to broadcast and validate quickly\n(e.g. 100 - 300 KB).\n\n6. Soft fork a new rule into Bitcoin that encourages POW-blocks to include\nthe hash of the prior POS-block. Specifically, penalize POW-blocks which do\nnot point to the prior POS-block by doubling the difficulty necessary for\nthem to be valid. Call POW-blocks which do not point to the prior POS-block\nbut are valid because of their very high POW \"hard blocks.\"\n\nIn the following diagram POW2 and POW4 are valid because they point to the\nprior POS-block and also satisfy the difficulty requirement. POW3 does not\npoint to the prior POS-bock, but is valid anyway because it contains proof\nof work at twice the normal difficulty.\n\nhttps://s27.postimg.org/6hc0b8ejn/Pos_Sf2.png\n\n# Advantages:\n\n1. Allow people who do not control ASICs to influence which transactions\nhappen.\n\n2. Allow people who do not control ASICs to influence which chain gets\nextended.\n\n3. Reduce the incentive to selfish mine. Once a miner discovers a block,\nthey should broadcast it immediately in the hopes that a Minter will build\non it, because that is the most likely way their block will not go stale.\nMiners will also immediately start trying to build a hard block. (Maybe\nstatistics could tell us what is the proper range for the Hardness\nMultiplier. I guessed 2 would be good.)\n\n4. Reduces the effective block interval while reducing the incidence of\nstale blocks, empty blocks and SPV mining. After a POW-block is mined, it\nis immediately broadcast to the network, seeking a qualified Minter to\nextend it. Minters have a deposit, which they will lose if they mint an\ninvalid block. Pointing to the hash of an invalid POW-block would produce\nan invalid minted block, so Minters have a strong incentive to completely\nvalidate the POW-block before they mint on top of it. After validating,\nthey mint a block and broadcast it. While the Minter is validating the\nprevious POW-block, competing miners also have time to fully validate the\nprevious POW-block. By the time the Miners receive the POS-block, they know\nwhat transactions they can and cannot include in their own block, because\nthe Minter only processes transactions on the side chain. There is less\nreason to mine empty blocks, because there is adequate time to update the\nmempool before mining the next soft block begins, and because hard blocks\ntake a long time to produce. The risks involved with mining on an\nun-validated POS-block can be made small by the fact that there is a\ndeposit that will be destroyed if the POS-block is invalid. POS-blocks can\nbe validated quickly because they are small.\n\nHere is a gantt chart of the schedule described above:\n\nhttps://s22.postimg.org/hvnkyac5d/Pos_Sf3.png\n\n5. Unlike a pure POS system, a cabal of early Stake holders cannot cheaply\nhatch an alternate history. Much less imperative for nodes to go to a\ntrusted peer and ask whether the chain they are being fed is legitimate.\n\n6. After step 6 above, the side chain would have essentially the same\nsecurity characteristics as the main chain, and could be used\ninterchangeably.\n\n7. No hard fork required, and this soft fork could be deployed even if the\nminers do not consent to it. Some hybrid POS system would be my\nrecommendation as preferable to simply changing POW algorithms in the face\nof miners abusing their power.\n\n8. Users can opt into the POS sidechain, and it can fully prove itself in\nproduction before there is any attempt to anchor the main chain back to it.\nEven if consensus cannot be obtained to execute step 6, the mere existence\nof such a chain could deter tomfoolery on the part of POW miners, lest they\ngalvanize the community into throwing the switch.\n\nOriginal reddit post here:\n\nhttps://www.reddit.com/r/Bitcoin/comments/5vy4qc/how_an_anchored_proof_of_stake_sidechain_can_help/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170619/a77f0079/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "An alternative way to protect the network from 51% attacks threat",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Peter Todd",
                "Wang Chun",
                "Moral Agent"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 9147
        }
    },
    {
        "title": "[bitcoin-dev] BIP148 temporary service bit (1 << 27)",
        "thread_messages": [
            {
                "author": "Luke Dashjr",
                "date": "2017-06-19T19:26:22",
                "message_text_only": "To ease the transition to BIP148 and to minimise risks in the event miners \nchoose to perform a chain split attack, at least Bitcoin Knots will be using \nthe temporary service bit (1 << 27) to indicate BIP148 support.\n\nOnce the transition is complete, this will no longer be necessary, and the bit \nwill be (manually) returned for reuse.\n\nI encourage other software implementing BIP148 (both full and light nodes) to \nset and use this service bit to avoid network partitioning risks.\n\nLuke"
            },
            {
                "author": "Tom Zander",
                "date": "2017-06-19T19:46:57",
                "message_text_only": "On Monday, 19 June 2017 21:26:22 CEST Luke Dashjr via bitcoin-dev wrote:\n> To ease the transition to BIP148 and to minimise risks in the event miners\n> choose to perform a chain split attack, at least Bitcoin Knots will be\n> using the temporary service bit (1 << 27) to indicate BIP148 support.\n> \n> Once the transition is complete, this will no longer be necessary, and the\n> bit will be (manually) returned for reuse.\n> \n> I encourage other software implementing BIP148 (both full and light nodes)\n> to set and use this service bit to avoid network partitioning risks.\n\nI'm curious what you action on the finding (or not) of a peer with this bit \nset (or not).\nCan you link to the github commit where you implemented this?\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2017-06-19T20:24:25",
                "message_text_only": "It is essential that BIP-148 nodes connect to at least two other BIP-148 nodes to prevent a network partition in August 1st. The temporary service but is how such nodes are able to detect each other.\n\n> On Jun 19, 2017, at 12:46 PM, Tom Zander via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n>> On Monday, 19 June 2017 21:26:22 CEST Luke Dashjr via bitcoin-dev wrote:\n>> To ease the transition to BIP148 and to minimise risks in the event miners\n>> choose to perform a chain split attack, at least Bitcoin Knots will be\n>> using the temporary service bit (1 << 27) to indicate BIP148 support.\n>> \n>> Once the transition is complete, this will no longer be necessary, and the\n>> bit will be (manually) returned for reuse.\n>> \n>> I encourage other software implementing BIP148 (both full and light nodes)\n>> to set and use this service bit to avoid network partitioning risks.\n> \n> I'm curious what you action on the finding (or not) of a peer with this bit \n> set (or not).\n> Can you link to the github commit where you implemented this?\n> -- \n> Tom Zander\n> Blog: https://zander.github.io\n> Vlog: https://vimeo.com/channels/tomscryptochannel\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "BIP148 temporary service bit (1 << 27)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Tom Zander",
                "Luke Dashjr",
                "Mark Friedenbach"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 2657
        }
    },
    {
        "title": "[bitcoin-dev] Miners forced to run non-core code in order to get segwit activated",
        "thread_messages": [
            {
                "author": "Erik Aronesty",
                "date": "2017-06-20T15:44:36",
                "message_text_only": "Are we going to merge BIP91 or a -BIP148 option to core for inclusion in\nthe next release or so?\n\nBecause a large percentage of miners are indifferent, right now miners have\nto choose between BIP148 and Segwit2x if they want to activate Segwit.\n\nShould we be forcing miners to choose to run non-core code in order to\nactivate a popular feature?\n\n- Erik\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170620/330d7f48/attachment.html>"
            },
            {
                "author": "Hampus Sj\u00f6berg",
                "date": "2017-06-20T16:49:38",
                "message_text_only": "I don't think it's a huge deal if the miners need to run a non-Core node\nonce the BIP91 deployment of Segwit2x happens. The shift will most likely\nbe temporary.\n\nI agree that the \"-bip148\"-option should be merged, though.\n\n2017-06-20 17:44 GMT+02:00 Erik Aronesty via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> Are we going to merge BIP91 or a -BIP148 option to core for inclusion in\n> the next release or so?\n>\n> Because a large percentage of miners are indifferent, right now miners\n> have to choose between BIP148 and Segwit2x if they want to activate Segwit.\n>\n>\n> Should we be forcing miners to choose to run non-core code in order to\n> activate a popular feature?\n>\n> - Erik\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170620/dcdeace9/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2017-06-20T17:22:18",
                "message_text_only": "I think it is very na\u00efve to assume that any shift would be temporary.\nWe have a hard enough time getting miners to proactively upgrade to\nrecent versions of the reference bitcoin daemon. If miners interpret\nthe situation as being forced to run non-reference software in order\nto prevent a chain split because a lack of support from Bitcoin Core,\nthat could be a one-way street.\n\nOn Tue, Jun 20, 2017 at 9:49 AM, Hampus Sj\u00f6berg via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I don't think it's a huge deal if the miners need to run a non-Core node\n> once the BIP91 deployment of Segwit2x happens. The shift will most likely be\n> temporary.\n>\n> I agree that the \"-bip148\"-option should be merged, though.\n>\n> 2017-06-20 17:44 GMT+02:00 Erik Aronesty via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org>:\n>>\n>> Are we going to merge BIP91 or a -BIP148 option to core for inclusion in\n>> the next release or so?\n>>\n>> Because a large percentage of miners are indifferent, right now miners\n>> have to choose between BIP148 and Segwit2x if they want to activate Segwit.\n>>\n>> Should we be forcing miners to choose to run non-core code in order to\n>> activate a popular feature?\n>>\n>> - Erik\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-06-20T21:49:50",
                "message_text_only": "On Tue, Jun 20, 2017 at 3:44 PM, Erik Aronesty via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Because a large percentage of miners are indifferent, right now miners have\n> to choose between BIP148 and Segwit2x if they want to activate Segwit.\n\nMiners can simply continuing signaling segwit, which will leave them\nat least soft-fork compatible with BIP148 and BIP91 (and god knows\nwhat \"segwit2x\" is since they keep changing the actual definition and\ndo not have a specification; but last I saw the near-term behavior the\nsame as BIP91 but with a radically reduced activation window, so the\nstory would be the same there in the near term).\n\nIronically, it looks like most of the segwit2x signaling miners are\nfaking it (because they're not signaling segwit which it requires).\nIt'll be unfortunate if some aren't faking it and start orphaning\ntheir own blocks because they are failing to signal segwit.\n\nI don't think the rejection of segwit2x from Bitcoin's developers\ncould be any more resolute than what we've already seen:\nhttps://en.bitcoin.it/wiki/Segwit_support\n\nOn Tue, Jun 20, 2017 at 5:22 PM, Mark Friedenbach via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I think it is very na\u00efve to assume that any shift would be temporary.\n> We have a hard enough time getting miners to proactively upgrade to\n> recent versions of the reference bitcoin daemon. If miners interpret\n> the situation as being forced to run non-reference software in order\n> to prevent a chain split because a lack of support from Bitcoin Core,\n> that could be a one-way street.\n\nI think this is somewhat naive and sounds a lot like the repeat of the\npreviously debunked \"XT\" and \"Classic\" hysteria.\n\nThere is a reason that segwit2x is pretty much unanimously rejected by\nthe technical community.  And just like with XT/Classic/Unlimited\nyou'll continue to see a strong correlation with people who are\nunwilling and unable to keep updating the software at an acceptable\nlevel of quality-- esp. because the very founding on their fork is\npredicated on discarding those properties.\n\nIf miners want to go off and create an altcoin-- welp, thats something\nthey can always do,  and nothing about that will force anyone to go\nalong with it.\n\nAs far as prevent a chain split goes, all those things\n(148/91/segwit2x(per today)) effectively guarantee a chainsplit-- so I\ndon't think that holds."
            },
            {
                "author": "Hampus Sj\u00f6berg",
                "date": "2017-06-20T22:15:59",
                "message_text_only": "> Ironically, it looks like most of the segwit2x signaling miners are\n> faking it (because they're not signaling segwit which it requires).\n> It'll be unfortunate if some aren't faking it and start orphaning\n> their own blocks because they are failing to signal segwit.\n\nWell, they're doing some kind of \"pre-signaling\" in the coinbase at the\nmoment, because the segwit2x project is still in alpha-phase according to\nthe timeline. They're just showing commitment.\nI'm sure they will begin signaling on version bit 4/BIP91 as well as\nactually running a segwit2x node when the time comes.\n\n> As far as prevent a chain split goes, all those things\n> (148/91/segwit2x(per today)) effectively guarantee a chainsplit-- so I\n> don't think that holds.\n\nSegwit2x/BIP91/BIP148 will orphan miners that do not run a Segwit2x (or\nBIP148) node, because they wouldn't have the new consensus rule of\nrequiring all blocks to signal for segwit.\nI don't believe there would be any long lasting chainsplit though (because\nof the ~80% hashrate support on segwit2x), perhaps 2-3 blocks if we get\nunlucky.\n\nHampus\n\n2017-06-20 23:49 GMT+02:00 Gregory Maxwell via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> On Tue, Jun 20, 2017 at 3:44 PM, Erik Aronesty via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Because a large percentage of miners are indifferent, right now miners\n> have\n> > to choose between BIP148 and Segwit2x if they want to activate Segwit.\n>\n> Miners can simply continuing signaling segwit, which will leave them\n> at least soft-fork compatible with BIP148 and BIP91 (and god knows\n> what \"segwit2x\" is since they keep changing the actual definition and\n> do not have a specification; but last I saw the near-term behavior the\n> same as BIP91 but with a radically reduced activation window, so the\n> story would be the same there in the near term).\n>\n> Ironically, it looks like most of the segwit2x signaling miners are\n> faking it (because they're not signaling segwit which it requires).\n> It'll be unfortunate if some aren't faking it and start orphaning\n> their own blocks because they are failing to signal segwit.\n>\n> I don't think the rejection of segwit2x from Bitcoin's developers\n> could be any more resolute than what we've already seen:\n> https://en.bitcoin.it/wiki/Segwit_support\n>\n> On Tue, Jun 20, 2017 at 5:22 PM, Mark Friedenbach via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > I think it is very na\u00efve to assume that any shift would be temporary.\n> > We have a hard enough time getting miners to proactively upgrade to\n> > recent versions of the reference bitcoin daemon. If miners interpret\n> > the situation as being forced to run non-reference software in order\n> > to prevent a chain split because a lack of support from Bitcoin Core,\n> > that could be a one-way street.\n>\n> I think this is somewhat naive and sounds a lot like the repeat of the\n> previously debunked \"XT\" and \"Classic\" hysteria.\n>\n> There is a reason that segwit2x is pretty much unanimously rejected by\n> the technical community.  And just like with XT/Classic/Unlimited\n> you'll continue to see a strong correlation with people who are\n> unwilling and unable to keep updating the software at an acceptable\n> level of quality-- esp. because the very founding on their fork is\n> predicated on discarding those properties.\n>\n> If miners want to go off and create an altcoin-- welp, thats something\n> they can always do,  and nothing about that will force anyone to go\n> along with it.\n>\n> As far as prevent a chain split goes, all those things\n> (148/91/segwit2x(per today)) effectively guarantee a chainsplit-- so I\n> don't think that holds.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170621/0d0761cf/attachment.html>"
            },
            {
                "author": "Jacob Eliosoff",
                "date": "2017-06-20T22:29:27",
                "message_text_only": "If segwit is activated before Aug 1, as now seems likely, there will be no\nsplit that day.  But if activation is via Segwit2x (also likely), and at\nleast some nodes do & some don't follow through with the HF 3mo later\n(again, likely), agreed w/ Greg that *then* we'll see a split - probably in\nSep/Oct.  How those two chains will match up and how the split will play\nout is anyone's guess...\n\n\n\nOn Jun 20, 2017 6:16 PM, \"Hampus Sj\u00f6berg via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Ironically, it looks like most of the segwit2x signaling miners are\n> faking it (because they're not signaling segwit which it requires).\n> It'll be unfortunate if some aren't faking it and start orphaning\n> their own blocks because they are failing to signal segwit.\n\nWell, they're doing some kind of \"pre-signaling\" in the coinbase at the\nmoment, because the segwit2x project is still in alpha-phase according to\nthe timeline. They're just showing commitment.\nI'm sure they will begin signaling on version bit 4/BIP91 as well as\nactually running a segwit2x node when the time comes.\n\n\n> As far as prevent a chain split goes, all those things\n> (148/91/segwit2x(per today)) effectively guarantee a chainsplit-- so I\n> don't think that holds.\n\nSegwit2x/BIP91/BIP148 will orphan miners that do not run a Segwit2x (or\nBIP148) node, because they wouldn't have the new consensus rule of\nrequiring all blocks to signal for segwit.\nI don't believe there would be any long lasting chainsplit though (because\nof the ~80% hashrate support on segwit2x), perhaps 2-3 blocks if we get\nunlucky.\n\nHampus\n\n2017-06-20 23:49 GMT+02:00 Gregory Maxwell via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> On Tue, Jun 20, 2017 at 3:44 PM, Erik Aronesty via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Because a large percentage of miners are indifferent, right now miners\n> have\n> > to choose between BIP148 and Segwit2x if they want to activate Segwit.\n>\n> Miners can simply continuing signaling segwit, which will leave them\n> at least soft-fork compatible with BIP148 and BIP91 (and god knows\n> what \"segwit2x\" is since they keep changing the actual definition and\n> do not have a specification; but last I saw the near-term behavior the\n> same as BIP91 but with a radically reduced activation window, so the\n> story would be the same there in the near term).\n>\n> Ironically, it looks like most of the segwit2x signaling miners are\n> faking it (because they're not signaling segwit which it requires).\n> It'll be unfortunate if some aren't faking it and start orphaning\n> their own blocks because they are failing to signal segwit.\n>\n> I don't think the rejection of segwit2x from Bitcoin's developers\n> could be any more resolute than what we've already seen:\n> https://en.bitcoin.it/wiki/Segwit_support\n>\n> On Tue, Jun 20, 2017 at 5:22 PM, Mark Friedenbach via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > I think it is very na\u00efve to assume that any shift would be temporary.\n> > We have a hard enough time getting miners to proactively upgrade to\n> > recent versions of the reference bitcoin daemon. If miners interpret\n> > the situation as being forced to run non-reference software in order\n> > to prevent a chain split because a lack of support from Bitcoin Core,\n> > that could be a one-way street.\n>\n> I think this is somewhat naive and sounds a lot like the repeat of the\n> previously debunked \"XT\" and \"Classic\" hysteria.\n>\n> There is a reason that segwit2x is pretty much unanimously rejected by\n> the technical community.  And just like with XT/Classic/Unlimited\n> you'll continue to see a strong correlation with people who are\n> unwilling and unable to keep updating the software at an acceptable\n> level of quality-- esp. because the very founding on their fork is\n> predicated on discarding those properties.\n>\n> If miners want to go off and create an altcoin-- welp, thats something\n> they can always do,  and nothing about that will force anyone to go\n> along with it.\n>\n> As far as prevent a chain split goes, all those things\n> (148/91/segwit2x(per today)) effectively guarantee a chainsplit-- so I\n> don't think that holds.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170620/dfa5b469/attachment-0001.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2017-06-20T22:48:23",
                "message_text_only": "Why do you say activation by August 1st is likely? That would require an entire difficulty adjustment period with >=95% bit1 signaling. That seems a tall order to organize in the scant few weeks remaining. \n\n> On Jun 20, 2017, at 3:29 PM, Jacob Eliosoff via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> If segwit is activated before Aug 1, as now seems likely, there will be no split that day.  But if activation is via Segwit2x (also likely), and at least some nodes do & some don't follow through with the HF 3mo later (again, likely), agreed w/ Greg that *then* we'll see a split - probably in Sep/Oct.  How those two chains will match up and how the split will play out is anyone's guess...\n> \n> \n> \n> On Jun 20, 2017 6:16 PM, \"Hampus Sj\u00f6berg via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Ironically, it looks like most of the segwit2x signaling miners are\n> > faking it (because they're not signaling segwit which it requires).\n> > It'll be unfortunate if some aren't faking it and start orphaning\n> > their own blocks because they are failing to signal segwit.\n> \n> Well, they're doing some kind of \"pre-signaling\" in the coinbase at the moment, because the segwit2x project is still in alpha-phase according to the timeline. They're just showing commitment.\n> I'm sure they will begin signaling on version bit 4/BIP91 as well as actually running a segwit2x node when the time comes.\n> \n> \n> > As far as prevent a chain split goes, all those things\n> > (148/91/segwit2x(per today)) effectively guarantee a chainsplit-- so I\n> > don't think that holds.\n> \n> Segwit2x/BIP91/BIP148 will orphan miners that do not run a Segwit2x (or BIP148) node, because they wouldn't have the new consensus rule of requiring all blocks to signal for segwit.\n> I don't believe there would be any long lasting chainsplit though (because of the ~80% hashrate support on segwit2x), perhaps 2-3 blocks if we get unlucky.\n> \n> Hampus\n> \n> 2017-06-20 23:49 GMT+02:00 Gregory Maxwell via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>:\n>> On Tue, Jun 20, 2017 at 3:44 PM, Erik Aronesty via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > Because a large percentage of miners are indifferent, right now miners have\n>> > to choose between BIP148 and Segwit2x if they want to activate Segwit.\n>> \n>> Miners can simply continuing signaling segwit, which will leave them\n>> at least soft-fork compatible with BIP148 and BIP91 (and god knows\n>> what \"segwit2x\" is since they keep changing the actual definition and\n>> do not have a specification; but last I saw the near-term behavior the\n>> same as BIP91 but with a radically reduced activation window, so the\n>> story would be the same there in the near term).\n>> \n>> Ironically, it looks like most of the segwit2x signaling miners are\n>> faking it (because they're not signaling segwit which it requires).\n>> It'll be unfortunate if some aren't faking it and start orphaning\n>> their own blocks because they are failing to signal segwit.\n>> \n>> I don't think the rejection of segwit2x from Bitcoin's developers\n>> could be any more resolute than what we've already seen:\n>> https://en.bitcoin.it/wiki/Segwit_support\n>> \n>> On Tue, Jun 20, 2017 at 5:22 PM, Mark Friedenbach via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > I think it is very na\u00efve to assume that any shift would be temporary.\n>> > We have a hard enough time getting miners to proactively upgrade to\n>> > recent versions of the reference bitcoin daemon. If miners interpret\n>> > the situation as being forced to run non-reference software in order\n>> > to prevent a chain split because a lack of support from Bitcoin Core,\n>> > that could be a one-way street.\n>> \n>> I think this is somewhat naive and sounds a lot like the repeat of the\n>> previously debunked \"XT\" and \"Classic\" hysteria.\n>> \n>> There is a reason that segwit2x is pretty much unanimously rejected by\n>> the technical community.  And just like with XT/Classic/Unlimited\n>> you'll continue to see a strong correlation with people who are\n>> unwilling and unable to keep updating the software at an acceptable\n>> level of quality-- esp. because the very founding on their fork is\n>> predicated on discarding those properties.\n>> \n>> If miners want to go off and create an altcoin-- welp, thats something\n>> they can always do,  and nothing about that will force anyone to go\n>> along with it.\n>> \n>> As far as prevent a chain split goes, all those things\n>> (148/91/segwit2x(per today)) effectively guarantee a chainsplit-- so I\n>> don't think that holds.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170620/607ef338/attachment-0001.html>"
            },
            {
                "author": "Jacob Eliosoff",
                "date": "2017-06-20T22:57:34",
                "message_text_only": "I could be wrong, but the latest BIP91 implementation (also included in\nSegwit2x) cuts the activation period to 336 blocks (2.33 days).  (This has\nbeen updated at\nhttps://github.com/bitcoin/bips/blob/master/bip-0091.mediawiki.)  So if 80%\nof hashpower is actually running that code and signaling on bit 4 by July\n25 or so, then those 80+% will start orphaning non-bit-1 blocks before Aug\n1, and we avoid a split.\n\nThere may still be a few non-bit-1 blocks that get orphaned after Aug 1,\nbecause they're mined by old BIP141 nodes.  But it seems like very few\nminers won't be signaling either Segwit2x *or* BIP141 by then...\n\nMake sense?\n\n\nOn Tue, Jun 20, 2017 at 6:48 PM, Mark Friedenbach <mark at friedenbach.org>\nwrote:\n\n> Why do you say activation by August 1st is likely? That would require an\n> entire difficulty adjustment period with >=95% bit1 signaling. That seems a\n> tall order to organize in the scant few weeks remaining.\n>\n> On Jun 20, 2017, at 3:29 PM, Jacob Eliosoff via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> If segwit is activated before Aug 1, as now seems likely, there will be no\n> split that day.  But if activation is via Segwit2x (also likely), and at\n> least some nodes do & some don't follow through with the HF 3mo later\n> (again, likely), agreed w/ Greg that *then* we'll see a split - probably in\n> Sep/Oct.  How those two chains will match up and how the split will play\n> out is anyone's guess...\n>\n>\n>\n> On Jun 20, 2017 6:16 PM, \"Hampus Sj\u00f6berg via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> > Ironically, it looks like most of the segwit2x signaling miners are\n> > faking it (because they're not signaling segwit which it requires).\n> > It'll be unfortunate if some aren't faking it and start orphaning\n> > their own blocks because they are failing to signal segwit.\n>\n> Well, they're doing some kind of \"pre-signaling\" in the coinbase at the\n> moment, because the segwit2x project is still in alpha-phase according to\n> the timeline. They're just showing commitment.\n> I'm sure they will begin signaling on version bit 4/BIP91 as well as\n> actually running a segwit2x node when the time comes.\n>\n>\n> > As far as prevent a chain split goes, all those things\n> > (148/91/segwit2x(per today)) effectively guarantee a chainsplit-- so I\n> > don't think that holds.\n>\n> Segwit2x/BIP91/BIP148 will orphan miners that do not run a Segwit2x (or\n> BIP148) node, because they wouldn't have the new consensus rule of\n> requiring all blocks to signal for segwit.\n> I don't believe there would be any long lasting chainsplit though (because\n> of the ~80% hashrate support on segwit2x), perhaps 2-3 blocks if we get\n> unlucky.\n>\n> Hampus\n>\n> 2017-06-20 23:49 GMT+02:00 Gregory Maxwell via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org>:\n>\n>> On Tue, Jun 20, 2017 at 3:44 PM, Erik Aronesty via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > Because a large percentage of miners are indifferent, right now miners\n>> have\n>> > to choose between BIP148 and Segwit2x if they want to activate Segwit.\n>>\n>> Miners can simply continuing signaling segwit, which will leave them\n>> at least soft-fork compatible with BIP148 and BIP91 (and god knows\n>> what \"segwit2x\" is since they keep changing the actual definition and\n>> do not have a specification; but last I saw the near-term behavior the\n>> same as BIP91 but with a radically reduced activation window, so the\n>> story would be the same there in the near term).\n>>\n>> Ironically, it looks like most of the segwit2x signaling miners are\n>> faking it (because they're not signaling segwit which it requires).\n>> It'll be unfortunate if some aren't faking it and start orphaning\n>> their own blocks because they are failing to signal segwit.\n>>\n>> I don't think the rejection of segwit2x from Bitcoin's developers\n>> could be any more resolute than what we've already seen:\n>> https://en.bitcoin.it/wiki/Segwit_support\n>>\n>> On Tue, Jun 20, 2017 at 5:22 PM, Mark Friedenbach via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > I think it is very na\u00efve to assume that any shift would be temporary.\n>> > We have a hard enough time getting miners to proactively upgrade to\n>> > recent versions of the reference bitcoin daemon. If miners interpret\n>> > the situation as being forced to run non-reference software in order\n>> > to prevent a chain split because a lack of support from Bitcoin Core,\n>> > that could be a one-way street.\n>>\n>> I think this is somewhat naive and sounds a lot like the repeat of the\n>> previously debunked \"XT\" and \"Classic\" hysteria.\n>>\n>> There is a reason that segwit2x is pretty much unanimously rejected by\n>> the technical community.  And just like with XT/Classic/Unlimited\n>> you'll continue to see a strong correlation with people who are\n>> unwilling and unable to keep updating the software at an acceptable\n>> level of quality-- esp. because the very founding on their fork is\n>> predicated on discarding those properties.\n>>\n>> If miners want to go off and create an altcoin-- welp, thats something\n>> they can always do,  and nothing about that will force anyone to go\n>> along with it.\n>>\n>> As far as prevent a chain split goes, all those things\n>> (148/91/segwit2x(per today)) effectively guarantee a chainsplit-- so I\n>> don't think that holds.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170620/a7a99037/attachment-0001.html>"
            },
            {
                "author": "Jacob Eliosoff",
                "date": "2017-06-20T23:01:14",
                "message_text_only": "(That is: \"...because they're mined by old non-Segwit2x nodes that *aren't\nsignaling bit 1 support*\", ie, that support neither Segwit2x nor old segwit)\n\n\nOn Tue, Jun 20, 2017 at 6:57 PM, Jacob Eliosoff <jacob.eliosoff at gmail.com>\nwrote:\n\n> I could be wrong, but the latest BIP91 implementation (also included in\n> Segwit2x) cuts the activation period to 336 blocks (2.33 days).  (This has\n> been updated at https://github.com/bitcoin/bips/blob/master/bip-0091.\n> mediawiki.)  So if 80% of hashpower is actually running that code and\n> signaling on bit 4 by July 25 or so, then those 80+% will start orphaning\n> non-bit-1 blocks before Aug 1, and we avoid a split.\n>\n> There may still be a few non-bit-1 blocks that get orphaned after Aug 1,\n> because they're mined by old BIP141 nodes.  But it seems like very few\n> miners won't be signaling either Segwit2x *or* BIP141 by then...\n>\n> Make sense?\n>\n>\n> On Tue, Jun 20, 2017 at 6:48 PM, Mark Friedenbach <mark at friedenbach.org>\n> wrote:\n>\n>> Why do you say activation by August 1st is likely? That would require an\n>> entire difficulty adjustment period with >=95% bit1 signaling. That seems a\n>> tall order to organize in the scant few weeks remaining.\n>>\n>> On Jun 20, 2017, at 3:29 PM, Jacob Eliosoff via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> If segwit is activated before Aug 1, as now seems likely, there will be\n>> no split that day.  But if activation is via Segwit2x (also likely), and at\n>> least some nodes do & some don't follow through with the HF 3mo later\n>> (again, likely), agreed w/ Greg that *then* we'll see a split - probably in\n>> Sep/Oct.  How those two chains will match up and how the split will play\n>> out is anyone's guess...\n>>\n>>\n>>\n>> On Jun 20, 2017 6:16 PM, \"Hampus Sj\u00f6berg via bitcoin-dev\" <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> > Ironically, it looks like most of the segwit2x signaling miners are\n>> > faking it (because they're not signaling segwit which it requires).\n>> > It'll be unfortunate if some aren't faking it and start orphaning\n>> > their own blocks because they are failing to signal segwit.\n>>\n>> Well, they're doing some kind of \"pre-signaling\" in the coinbase at the\n>> moment, because the segwit2x project is still in alpha-phase according to\n>> the timeline. They're just showing commitment.\n>> I'm sure they will begin signaling on version bit 4/BIP91 as well as\n>> actually running a segwit2x node when the time comes.\n>>\n>>\n>> > As far as prevent a chain split goes, all those things\n>> > (148/91/segwit2x(per today)) effectively guarantee a chainsplit-- so I\n>> > don't think that holds.\n>>\n>> Segwit2x/BIP91/BIP148 will orphan miners that do not run a Segwit2x (or\n>> BIP148) node, because they wouldn't have the new consensus rule of\n>> requiring all blocks to signal for segwit.\n>> I don't believe there would be any long lasting chainsplit though\n>> (because of the ~80% hashrate support on segwit2x), perhaps 2-3 blocks if\n>> we get unlucky.\n>>\n>> Hampus\n>>\n>> 2017-06-20 23:49 GMT+02:00 Gregory Maxwell via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org>:\n>>\n>>> On Tue, Jun 20, 2017 at 3:44 PM, Erik Aronesty via bitcoin-dev\n>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> > Because a large percentage of miners are indifferent, right now miners\n>>> have\n>>> > to choose between BIP148 and Segwit2x if they want to activate Segwit.\n>>>\n>>> Miners can simply continuing signaling segwit, which will leave them\n>>> at least soft-fork compatible with BIP148 and BIP91 (and god knows\n>>> what \"segwit2x\" is since they keep changing the actual definition and\n>>> do not have a specification; but last I saw the near-term behavior the\n>>> same as BIP91 but with a radically reduced activation window, so the\n>>> story would be the same there in the near term).\n>>>\n>>> Ironically, it looks like most of the segwit2x signaling miners are\n>>> faking it (because they're not signaling segwit which it requires).\n>>> It'll be unfortunate if some aren't faking it and start orphaning\n>>> their own blocks because they are failing to signal segwit.\n>>>\n>>> I don't think the rejection of segwit2x from Bitcoin's developers\n>>> could be any more resolute than what we've already seen:\n>>> https://en.bitcoin.it/wiki/Segwit_support\n>>>\n>>> On Tue, Jun 20, 2017 at 5:22 PM, Mark Friedenbach via bitcoin-dev\n>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> > I think it is very na\u00efve to assume that any shift would be temporary.\n>>> > We have a hard enough time getting miners to proactively upgrade to\n>>> > recent versions of the reference bitcoin daemon. If miners interpret\n>>> > the situation as being forced to run non-reference software in order\n>>> > to prevent a chain split because a lack of support from Bitcoin Core,\n>>> > that could be a one-way street.\n>>>\n>>> I think this is somewhat naive and sounds a lot like the repeat of the\n>>> previously debunked \"XT\" and \"Classic\" hysteria.\n>>>\n>>> There is a reason that segwit2x is pretty much unanimously rejected by\n>>> the technical community.  And just like with XT/Classic/Unlimited\n>>> you'll continue to see a strong correlation with people who are\n>>> unwilling and unable to keep updating the software at an acceptable\n>>> level of quality-- esp. because the very founding on their fork is\n>>> predicated on discarding those properties.\n>>>\n>>> If miners want to go off and create an altcoin-- welp, thats something\n>>> they can always do,  and nothing about that will force anyone to go\n>>> along with it.\n>>>\n>>> As far as prevent a chain split goes, all those things\n>>> (148/91/segwit2x(per today)) effectively guarantee a chainsplit-- so I\n>>> don't think that holds.\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170620/ee28dc3b/attachment.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2017-06-21T01:36:49",
                "message_text_only": "# Jacob Eliosoff:\n\n>  will start orphaning non-bit-1 blocks before Aug 1, and we avoid a\nsplit.\n\nCorrect.  There are 2 short activation periods in BIP91 either of which\nwould avoid a split.\n\n# Gregory Maxwell:\n\n> unclear to me _exactly_ what it would need to implement to be consistent.\n\nThis is the relevant pull req to core:\n\nhttps://github.com/bitcoin/bitcoin/pull/10444\n\nSeems OK.  It's technically running now on testnet5.   I think it (or a\n-bip148 option) should be merged as soon as feasible.\n\n> previously debunked \"XT\" and \"Classic\" hysteria.\n\napples vs oranges, imo.   segwit is not a contentious feature.   the\n\"bundling\" in segwit2x is, but that's not the issue here.   the issue is we\nare indirectly requiring miners that strongly support segwit to install\nconsensus protocol changes outside of bitcoin's standard reference.   80%\nof them have signaled they will do so.   these are uncharted waters.\n\n\nOn Tue, Jun 20, 2017 at 6:57 PM, Jacob Eliosoff via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I could be wrong, but the latest BIP91 implementation (also included in\n> Segwit2x) cuts the activation period to 336 blocks (2.33 days).  (This has\n> been updated at https://github.com/bitcoin/bips/blob/master/bip-0091.\n> mediawiki.)  So if 80% of hashpower is actually running that code and\n> signaling on bit 4 by July 25 or so, then those 80+% will start orphaning\n> non-bit-1 blocks before Aug 1, and we avoid a split.\n>\n> There may still be a few non-bit-1 blocks that get orphaned after Aug 1,\n> because they're mined by old BIP141 nodes.  But it seems like very few\n> miners won't be signaling either Segwit2x *or* BIP141 by then...\n>\n> Make sense?\n>\n>\n> On Tue, Jun 20, 2017 at 6:48 PM, Mark Friedenbach <mark at friedenbach.org>\n> wrote:\n>\n>> Why do you say activation by August 1st is likely? That would require an\n>> entire difficulty adjustment period with >=95% bit1 signaling. That seems a\n>> tall order to organize in the scant few weeks remaining.\n>>\n>> On Jun 20, 2017, at 3:29 PM, Jacob Eliosoff via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> If segwit is activated before Aug 1, as now seems likely, there will be\n>> no split that day.  But if activation is via Segwit2x (also likely), and at\n>> least some nodes do & some don't follow through with the HF 3mo later\n>> (again, likely), agreed w/ Greg that *then* we'll see a split - probably in\n>> Sep/Oct.  How those two chains will match up and how the split will play\n>> out is anyone's guess...\n>>\n>>\n>>\n>> On Jun 20, 2017 6:16 PM, \"Hampus Sj\u00f6berg via bitcoin-dev\" <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> > Ironically, it looks like most of the segwit2x signaling miners are\n>> > faking it (because they're not signaling segwit which it requires).\n>> > It'll be unfortunate if some aren't faking it and start orphaning\n>> > their own blocks because they are failing to signal segwit.\n>>\n>> Well, they're doing some kind of \"pre-signaling\" in the coinbase at the\n>> moment, because the segwit2x project is still in alpha-phase according to\n>> the timeline. They're just showing commitment.\n>> I'm sure they will begin signaling on version bit 4/BIP91 as well as\n>> actually running a segwit2x node when the time comes.\n>>\n>>\n>> > As far as prevent a chain split goes, all those things\n>> > (148/91/segwit2x(per today)) effectively guarantee a chainsplit-- so I\n>> > don't think that holds.\n>>\n>> Segwit2x/BIP91/BIP148 will orphan miners that do not run a Segwit2x (or\n>> BIP148) node, because they wouldn't have the new consensus rule of\n>> requiring all blocks to signal for segwit.\n>> I don't believe there would be any long lasting chainsplit though\n>> (because of the ~80% hashrate support on segwit2x), perhaps 2-3 blocks if\n>> we get unlucky.\n>>\n>> Hampus\n>>\n>> 2017-06-20 23:49 GMT+02:00 Gregory Maxwell via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org>:\n>>\n>>> On Tue, Jun 20, 2017 at 3:44 PM, Erik Aronesty via bitcoin-dev\n>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> > Because a large percentage of miners are indifferent, right now miners\n>>> have\n>>> > to choose between BIP148 and Segwit2x if they want to activate Segwit.\n>>>\n>>> Miners can simply continuing signaling segwit, which will leave them\n>>> at least soft-fork compatible with BIP148 and BIP91 (and god knows\n>>> what \"segwit2x\" is since they keep changing the actual definition and\n>>> do not have a specification; but last I saw the near-term behavior the\n>>> same as BIP91 but with a radically reduced activation window, so the\n>>> story would be the same there in the near term).\n>>>\n>>> Ironically, it looks like most of the segwit2x signaling miners are\n>>> faking it (because they're not signaling segwit which it requires).\n>>> It'll be unfortunate if some aren't faking it and start orphaning\n>>> their own blocks because they are failing to signal segwit.\n>>>\n>>> I don't think the rejection of segwit2x from Bitcoin's developers\n>>> could be any more resolute than what we've already seen:\n>>> https://en.bitcoin.it/wiki/Segwit_support\n>>>\n>>> On Tue, Jun 20, 2017 at 5:22 PM, Mark Friedenbach via bitcoin-dev\n>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> > I think it is very na\u00efve to assume that any shift would be temporary.\n>>> > We have a hard enough time getting miners to proactively upgrade to\n>>> > recent versions of the reference bitcoin daemon. If miners interpret\n>>> > the situation as being forced to run non-reference software in order\n>>> > to prevent a chain split because a lack of support from Bitcoin Core,\n>>> > that could be a one-way street.\n>>>\n>>> I think this is somewhat naive and sounds a lot like the repeat of the\n>>> previously debunked \"XT\" and \"Classic\" hysteria.\n>>>\n>>> There is a reason that segwit2x is pretty much unanimously rejected by\n>>> the technical community.  And just like with XT/Classic/Unlimited\n>>> you'll continue to see a strong correlation with people who are\n>>> unwilling and unable to keep updating the software at an acceptable\n>>> level of quality-- esp. because the very founding on their fork is\n>>> predicated on discarding those properties.\n>>>\n>>> If miners want to go off and create an altcoin-- welp, thats something\n>>> they can always do,  and nothing about that will force anyone to go\n>>> along with it.\n>>>\n>>> As far as prevent a chain split goes, all those things\n>>> (148/91/segwit2x(per today)) effectively guarantee a chainsplit-- so I\n>>> don't think that holds.\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170620/b23c5cf2/attachment-0001.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2017-06-21T02:11:15",
                "message_text_only": "80% have set \"NYA\" in their coinbase string. We have no idea what that\nmeans. People are equating it to BIP 91 -- but BIP 91 did not exist at\nthe time of the New York agreement, and differs from the actual text\nof the NYA in substantive ways. The \"Segwit2MB\" that existed at the\ntime of the NYA, and which was explicitly referenced by the text is\nthe proposal by Sergio Demian Lerner that was made to this mailing\nlist on 31 March. The text of the NYA grants no authority for\nupgrading this proposal while remaining compliant with the agreement.\nThis is without even considering the fact that in the days after the\nNYA there was disagreement among those who signed it as to what it\nmeant.\n\nI feel it is a very dangerous and unwarranted assumption people are\nmaking that what we are seeing now is either 80% support for BIP-91 or\nfor the code in the btc1 repo.\n\nOn Tue, Jun 20, 2017 at 6:36 PM, Erik Aronesty <erik at q32.com> wrote:\n> # Jacob Eliosoff:\n>\n>>  will start orphaning non-bit-1 blocks before Aug 1, and we avoid a split.\n>\n> Correct.  There are 2 short activation periods in BIP91 either of which\n> would avoid a split.\n>\n> # Gregory Maxwell:\n>\n>> unclear to me _exactly_ what it would need to implement to be consistent.\n>\n> This is the relevant pull req to core:\n>\n> https://github.com/bitcoin/bitcoin/pull/10444\n>\n> Seems OK.  It's technically running now on testnet5.   I think it (or a\n> -bip148 option) should be merged as soon as feasible.\n>\n>> previously debunked \"XT\" and \"Classic\" hysteria.\n>\n> apples vs oranges, imo.   segwit is not a contentious feature.   the\n> \"bundling\" in segwit2x is, but that's not the issue here.   the issue is we\n> are indirectly requiring miners that strongly support segwit to install\n> consensus protocol changes outside of bitcoin's standard reference.   80% of\n> them have signaled they will do so.   these are uncharted waters.\n>\n>\n> On Tue, Jun 20, 2017 at 6:57 PM, Jacob Eliosoff via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> I could be wrong, but the latest BIP91 implementation (also included in\n>> Segwit2x) cuts the activation period to 336 blocks (2.33 days).  (This has\n>> been updated at\n>> https://github.com/bitcoin/bips/blob/master/bip-0091.mediawiki.)  So if 80%\n>> of hashpower is actually running that code and signaling on bit 4 by July 25\n>> or so, then those 80+% will start orphaning non-bit-1 blocks before Aug 1,\n>> and we avoid a split.\n>>\n>> There may still be a few non-bit-1 blocks that get orphaned after Aug 1,\n>> because they're mined by old BIP141 nodes.  But it seems like very few\n>> miners won't be signaling either Segwit2x *or* BIP141 by then...\n>>\n>> Make sense?\n>>\n>>\n>> On Tue, Jun 20, 2017 at 6:48 PM, Mark Friedenbach <mark at friedenbach.org>\n>> wrote:\n>>>\n>>> Why do you say activation by August 1st is likely? That would require an\n>>> entire difficulty adjustment period with >=95% bit1 signaling. That seems a\n>>> tall order to organize in the scant few weeks remaining.\n>>>\n>>> On Jun 20, 2017, at 3:29 PM, Jacob Eliosoff via bitcoin-dev\n>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>> If segwit is activated before Aug 1, as now seems likely, there will be\n>>> no split that day.  But if activation is via Segwit2x (also likely), and at\n>>> least some nodes do & some don't follow through with the HF 3mo later\n>>> (again, likely), agreed w/ Greg that *then* we'll see a split - probably in\n>>> Sep/Oct.  How those two chains will match up and how the split will play out\n>>> is anyone's guess...\n>>>\n>>>\n>>>\n>>> On Jun 20, 2017 6:16 PM, \"Hampus Sj\u00f6berg via bitcoin-dev\"\n>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>> > Ironically, it looks like most of the segwit2x signaling miners are\n>>> > faking it (because they're not signaling segwit which it requires).\n>>> > It'll be unfortunate if some aren't faking it and start orphaning\n>>> > their own blocks because they are failing to signal segwit.\n>>>\n>>> Well, they're doing some kind of \"pre-signaling\" in the coinbase at the\n>>> moment, because the segwit2x project is still in alpha-phase according to\n>>> the timeline. They're just showing commitment.\n>>> I'm sure they will begin signaling on version bit 4/BIP91 as well as\n>>> actually running a segwit2x node when the time comes.\n>>>\n>>>\n>>> > As far as prevent a chain split goes, all those things\n>>> > (148/91/segwit2x(per today)) effectively guarantee a chainsplit-- so I\n>>> > don't think that holds.\n>>>\n>>> Segwit2x/BIP91/BIP148 will orphan miners that do not run a Segwit2x (or\n>>> BIP148) node, because they wouldn't have the new consensus rule of requiring\n>>> all blocks to signal for segwit.\n>>> I don't believe there would be any long lasting chainsplit though\n>>> (because of the ~80% hashrate support on segwit2x), perhaps 2-3 blocks if we\n>>> get unlucky.\n>>>\n>>> Hampus\n>>>\n>>> 2017-06-20 23:49 GMT+02:00 Gregory Maxwell via bitcoin-dev\n>>> <bitcoin-dev at lists.linuxfoundation.org>:\n>>>>\n>>>> On Tue, Jun 20, 2017 at 3:44 PM, Erik Aronesty via bitcoin-dev\n>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>> > Because a large percentage of miners are indifferent, right now miners\n>>>> > have\n>>>> > to choose between BIP148 and Segwit2x if they want to activate Segwit.\n>>>>\n>>>> Miners can simply continuing signaling segwit, which will leave them\n>>>> at least soft-fork compatible with BIP148 and BIP91 (and god knows\n>>>> what \"segwit2x\" is since they keep changing the actual definition and\n>>>> do not have a specification; but last I saw the near-term behavior the\n>>>> same as BIP91 but with a radically reduced activation window, so the\n>>>> story would be the same there in the near term).\n>>>>\n>>>> Ironically, it looks like most of the segwit2x signaling miners are\n>>>> faking it (because they're not signaling segwit which it requires).\n>>>> It'll be unfortunate if some aren't faking it and start orphaning\n>>>> their own blocks because they are failing to signal segwit.\n>>>>\n>>>> I don't think the rejection of segwit2x from Bitcoin's developers\n>>>> could be any more resolute than what we've already seen:\n>>>> https://en.bitcoin.it/wiki/Segwit_support\n>>>>\n>>>> On Tue, Jun 20, 2017 at 5:22 PM, Mark Friedenbach via bitcoin-dev\n>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>> > I think it is very na\u00efve to assume that any shift would be temporary.\n>>>> > We have a hard enough time getting miners to proactively upgrade to\n>>>> > recent versions of the reference bitcoin daemon. If miners interpret\n>>>> > the situation as being forced to run non-reference software in order\n>>>> > to prevent a chain split because a lack of support from Bitcoin Core,\n>>>> > that could be a one-way street.\n>>>>\n>>>> I think this is somewhat naive and sounds a lot like the repeat of the\n>>>> previously debunked \"XT\" and \"Classic\" hysteria.\n>>>>\n>>>> There is a reason that segwit2x is pretty much unanimously rejected by\n>>>> the technical community.  And just like with XT/Classic/Unlimited\n>>>> you'll continue to see a strong correlation with people who are\n>>>> unwilling and unable to keep updating the software at an acceptable\n>>>> level of quality-- esp. because the very founding on their fork is\n>>>> predicated on discarding those properties.\n>>>>\n>>>> If miners want to go off and create an altcoin-- welp, thats something\n>>>> they can always do,  and nothing about that will force anyone to go\n>>>> along with it.\n>>>>\n>>>> As far as prevent a chain split goes, all those things\n>>>> (148/91/segwit2x(per today)) effectively guarantee a chainsplit-- so I\n>>>> don't think that holds.\n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>>\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>"
            },
            {
                "author": "Jacob Eliosoff",
                "date": "2017-06-21T04:05:53",
                "message_text_only": "Well, this Saturday's \"Chinese roundtable\" statement from a bunch of\nminers (https://pastebin.com/b3St9VCF) says they intend \"NYA\" in the\ncoinbase as support for \"the New York consensus SegWit2x program btc1 (\nhttps://github.com/btc1)\", whose code includes the (accelerated 336-block)\nBIP 91 change.  So, other facts or interpretations could come to light, but\nuntil they do we should probably assume that's what the \"NYA\" (which just\nbroke 80% over the last 24h) means.\n\n\nOn Tue, Jun 20, 2017 at 10:11 PM, Mark Friedenbach <mark at friedenbach.org>\nwrote:\n\n> 80% have set \"NYA\" in their coinbase string. We have no idea what that\n> means. People are equating it to BIP 91 -- but BIP 91 did not exist at\n> the time of the New York agreement, and differs from the actual text\n> of the NYA in substantive ways. The \"Segwit2MB\" that existed at the\n> time of the NYA, and which was explicitly referenced by the text is\n> the proposal by Sergio Demian Lerner that was made to this mailing\n> list on 31 March. The text of the NYA grants no authority for\n> upgrading this proposal while remaining compliant with the agreement.\n> This is without even considering the fact that in the days after the\n> NYA there was disagreement among those who signed it as to what it\n> meant.\n>\n> I feel it is a very dangerous and unwarranted assumption people are\n> making that what we are seeing now is either 80% support for BIP-91 or\n> for the code in the btc1 repo.\n>\n> On Tue, Jun 20, 2017 at 6:36 PM, Erik Aronesty <erik at q32.com> wrote:\n> > # Jacob Eliosoff:\n> >\n> >>  will start orphaning non-bit-1 blocks before Aug 1, and we avoid a\n> split.\n> >\n> > Correct.  There are 2 short activation periods in BIP91 either of which\n> > would avoid a split.\n> >\n> > # Gregory Maxwell:\n> >\n> >> unclear to me _exactly_ what it would need to implement to be\n> consistent.\n> >\n> > This is the relevant pull req to core:\n> >\n> > https://github.com/bitcoin/bitcoin/pull/10444\n> >\n> > Seems OK.  It's technically running now on testnet5.   I think it (or a\n> > -bip148 option) should be merged as soon as feasible.\n> >\n> >> previously debunked \"XT\" and \"Classic\" hysteria.\n> >\n> > apples vs oranges, imo.   segwit is not a contentious feature.   the\n> > \"bundling\" in segwit2x is, but that's not the issue here.   the issue is\n> we\n> > are indirectly requiring miners that strongly support segwit to install\n> > consensus protocol changes outside of bitcoin's standard reference.\n>  80% of\n> > them have signaled they will do so.   these are uncharted waters.\n> >\n> >\n> > On Tue, Jun 20, 2017 at 6:57 PM, Jacob Eliosoff via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >> I could be wrong, but the latest BIP91 implementation (also included in\n> >> Segwit2x) cuts the activation period to 336 blocks (2.33 days).  (This\n> has\n> >> been updated at\n> >> https://github.com/bitcoin/bips/blob/master/bip-0091.mediawiki.)  So\n> if 80%\n> >> of hashpower is actually running that code and signaling on bit 4 by\n> July 25\n> >> or so, then those 80+% will start orphaning non-bit-1 blocks before Aug\n> 1,\n> >> and we avoid a split.\n> >>\n> >> There may still be a few non-bit-1 blocks that get orphaned after Aug 1,\n> >> because they're mined by old BIP141 nodes.  But it seems like very few\n> >> miners won't be signaling either Segwit2x *or* BIP141 by then...\n> >>\n> >> Make sense?\n> >>\n> >>\n> >> On Tue, Jun 20, 2017 at 6:48 PM, Mark Friedenbach <mark at friedenbach.org\n> >\n> >> wrote:\n> >>>\n> >>> Why do you say activation by August 1st is likely? That would require\n> an\n> >>> entire difficulty adjustment period with >=95% bit1 signaling. That\n> seems a\n> >>> tall order to organize in the scant few weeks remaining.\n> >>>\n> >>> On Jun 20, 2017, at 3:29 PM, Jacob Eliosoff via bitcoin-dev\n> >>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>>\n> >>> If segwit is activated before Aug 1, as now seems likely, there will be\n> >>> no split that day.  But if activation is via Segwit2x (also likely),\n> and at\n> >>> least some nodes do & some don't follow through with the HF 3mo later\n> >>> (again, likely), agreed w/ Greg that *then* we'll see a split -\n> probably in\n> >>> Sep/Oct.  How those two chains will match up and how the split will\n> play out\n> >>> is anyone's guess...\n> >>>\n> >>>\n> >>>\n> >>> On Jun 20, 2017 6:16 PM, \"Hampus Sj\u00f6berg via bitcoin-dev\"\n> >>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>>\n> >>> > Ironically, it looks like most of the segwit2x signaling miners are\n> >>> > faking it (because they're not signaling segwit which it requires).\n> >>> > It'll be unfortunate if some aren't faking it and start orphaning\n> >>> > their own blocks because they are failing to signal segwit.\n> >>>\n> >>> Well, they're doing some kind of \"pre-signaling\" in the coinbase at the\n> >>> moment, because the segwit2x project is still in alpha-phase according\n> to\n> >>> the timeline. They're just showing commitment.\n> >>> I'm sure they will begin signaling on version bit 4/BIP91 as well as\n> >>> actually running a segwit2x node when the time comes.\n> >>>\n> >>>\n> >>> > As far as prevent a chain split goes, all those things\n> >>> > (148/91/segwit2x(per today)) effectively guarantee a chainsplit-- so\n> I\n> >>> > don't think that holds.\n> >>>\n> >>> Segwit2x/BIP91/BIP148 will orphan miners that do not run a Segwit2x (or\n> >>> BIP148) node, because they wouldn't have the new consensus rule of\n> requiring\n> >>> all blocks to signal for segwit.\n> >>> I don't believe there would be any long lasting chainsplit though\n> >>> (because of the ~80% hashrate support on segwit2x), perhaps 2-3 blocks\n> if we\n> >>> get unlucky.\n> >>>\n> >>> Hampus\n> >>>\n> >>> 2017-06-20 23:49 GMT+02:00 Gregory Maxwell via bitcoin-dev\n> >>> <bitcoin-dev at lists.linuxfoundation.org>:\n> >>>>\n> >>>> On Tue, Jun 20, 2017 at 3:44 PM, Erik Aronesty via bitcoin-dev\n> >>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>>> > Because a large percentage of miners are indifferent, right now\n> miners\n> >>>> > have\n> >>>> > to choose between BIP148 and Segwit2x if they want to activate\n> Segwit.\n> >>>>\n> >>>> Miners can simply continuing signaling segwit, which will leave them\n> >>>> at least soft-fork compatible with BIP148 and BIP91 (and god knows\n> >>>> what \"segwit2x\" is since they keep changing the actual definition and\n> >>>> do not have a specification; but last I saw the near-term behavior the\n> >>>> same as BIP91 but with a radically reduced activation window, so the\n> >>>> story would be the same there in the near term).\n> >>>>\n> >>>> Ironically, it looks like most of the segwit2x signaling miners are\n> >>>> faking it (because they're not signaling segwit which it requires).\n> >>>> It'll be unfortunate if some aren't faking it and start orphaning\n> >>>> their own blocks because they are failing to signal segwit.\n> >>>>\n> >>>> I don't think the rejection of segwit2x from Bitcoin's developers\n> >>>> could be any more resolute than what we've already seen:\n> >>>> https://en.bitcoin.it/wiki/Segwit_support\n> >>>>\n> >>>> On Tue, Jun 20, 2017 at 5:22 PM, Mark Friedenbach via bitcoin-dev\n> >>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>>> > I think it is very na\u00efve to assume that any shift would be\n> temporary.\n> >>>> > We have a hard enough time getting miners to proactively upgrade to\n> >>>> > recent versions of the reference bitcoin daemon. If miners interpret\n> >>>> > the situation as being forced to run non-reference software in order\n> >>>> > to prevent a chain split because a lack of support from Bitcoin\n> Core,\n> >>>> > that could be a one-way street.\n> >>>>\n> >>>> I think this is somewhat naive and sounds a lot like the repeat of the\n> >>>> previously debunked \"XT\" and \"Classic\" hysteria.\n> >>>>\n> >>>> There is a reason that segwit2x is pretty much unanimously rejected by\n> >>>> the technical community.  And just like with XT/Classic/Unlimited\n> >>>> you'll continue to see a strong correlation with people who are\n> >>>> unwilling and unable to keep updating the software at an acceptable\n> >>>> level of quality-- esp. because the very founding on their fork is\n> >>>> predicated on discarding those properties.\n> >>>>\n> >>>> If miners want to go off and create an altcoin-- welp, thats something\n> >>>> they can always do,  and nothing about that will force anyone to go\n> >>>> along with it.\n> >>>>\n> >>>> As far as prevent a chain split goes, all those things\n> >>>> (148/91/segwit2x(per today)) effectively guarantee a chainsplit-- so I\n> >>>> don't think that holds.\n> >>>> _______________________________________________\n> >>>> bitcoin-dev mailing list\n> >>>> bitcoin-dev at lists.linuxfoundation.org\n> >>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >>>\n> >>>\n> >>>\n> >>> _______________________________________________\n> >>> bitcoin-dev mailing list\n> >>> bitcoin-dev at lists.linuxfoundation.org\n> >>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >>>\n> >>>\n> >>> _______________________________________________\n> >>> bitcoin-dev mailing list\n> >>> bitcoin-dev at lists.linuxfoundation.org\n> >>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >>\n> >>\n> >>\n> >> _______________________________________________\n> >> bitcoin-dev mailing list\n> >> bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >>\n> >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170621/9b66620b/attachment-0001.html>"
            },
            {
                "author": "Sergio Demian Lerner",
                "date": "2017-06-27T15:42:53",
                "message_text_only": "Currently the only implementation that fulfills the requirements of the NYA\nagreement is the segwit2x/btc1 implementation, which is being finalized\nthis week.\n\nSegwit2mb does not fulfill the NYA agreement.\n\nI'm asking now the segwit2x development team when a BIP will be ready so\nthat Core has the opportunity to evaluate the technical proposal.\n\n\n\n\nOn Wed, Jun 21, 2017 at 1:05 AM, Jacob Eliosoff via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Well, this Saturday's \"Chinese roundtable\" statement from a bunch of\n> miners (https://pastebin.com/b3St9VCF) says they intend \"NYA\" in the\n> coinbase as support for \"the New York consensus SegWit2x program btc1 (\n> https://github.com/btc1)\", whose code includes the (accelerated\n> 336-block) BIP 91 change.  So, other facts or interpretations could come to\n> light, but until they do we should probably assume that's what the \"NYA\"\n> (which just broke 80% over the last 24h) means.\n>\n>\n> On Tue, Jun 20, 2017 at 10:11 PM, Mark Friedenbach <mark at friedenbach.org>\n> wrote:\n>\n>> 80% have set \"NYA\" in their coinbase string. We have no idea what that\n>> means. People are equating it to BIP 91 -- but BIP 91 did not exist at\n>> the time of the New York agreement, and differs from the actual text\n>> of the NYA in substantive ways. The \"Segwit2MB\" that existed at the\n>> time of the NYA, and which was explicitly referenced by the text is\n>> the proposal by Sergio Demian Lerner that was made to this mailing\n>> list on 31 March. The text of the NYA grants no authority for\n>> upgrading this proposal while remaining compliant with the agreement.\n>> This is without even considering the fact that in the days after the\n>> NYA there was disagreement among those who signed it as to what it\n>> meant.\n>>\n>> I feel it is a very dangerous and unwarranted assumption people are\n>> making that what we are seeing now is either 80% support for BIP-91 or\n>> for the code in the btc1 repo.\n>>\n>> On Tue, Jun 20, 2017 at 6:36 PM, Erik Aronesty <erik at q32.com> wrote:\n>> > # Jacob Eliosoff:\n>> >\n>> >>  will start orphaning non-bit-1 blocks before Aug 1, and we avoid a\n>> split.\n>> >\n>> > Correct.  There are 2 short activation periods in BIP91 either of which\n>> > would avoid a split.\n>> >\n>> > # Gregory Maxwell:\n>> >\n>> >> unclear to me _exactly_ what it would need to implement to be\n>> consistent.\n>> >\n>> > This is the relevant pull req to core:\n>> >\n>> > https://github.com/bitcoin/bitcoin/pull/10444\n>> >\n>> > Seems OK.  It's technically running now on testnet5.   I think it (or a\n>> > -bip148 option) should be merged as soon as feasible.\n>> >\n>> >> previously debunked \"XT\" and \"Classic\" hysteria.\n>> >\n>> > apples vs oranges, imo.   segwit is not a contentious feature.   the\n>> > \"bundling\" in segwit2x is, but that's not the issue here.   the issue\n>> is we\n>> > are indirectly requiring miners that strongly support segwit to install\n>> > consensus protocol changes outside of bitcoin's standard reference.\n>>  80% of\n>> > them have signaled they will do so.   these are uncharted waters.\n>> >\n>> >\n>> > On Tue, Jun 20, 2017 at 6:57 PM, Jacob Eliosoff via bitcoin-dev\n>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>\n>> >> I could be wrong, but the latest BIP91 implementation (also included in\n>> >> Segwit2x) cuts the activation period to 336 blocks (2.33 days).  (This\n>> has\n>> >> been updated at\n>> >> https://github.com/bitcoin/bips/blob/master/bip-0091.mediawiki.)  So\n>> if 80%\n>> >> of hashpower is actually running that code and signaling on bit 4 by\n>> July 25\n>> >> or so, then those 80+% will start orphaning non-bit-1 blocks before\n>> Aug 1,\n>> >> and we avoid a split.\n>> >>\n>> >> There may still be a few non-bit-1 blocks that get orphaned after Aug\n>> 1,\n>> >> because they're mined by old BIP141 nodes.  But it seems like very few\n>> >> miners won't be signaling either Segwit2x *or* BIP141 by then...\n>> >>\n>> >> Make sense?\n>> >>\n>> >>\n>> >> On Tue, Jun 20, 2017 at 6:48 PM, Mark Friedenbach <\n>> mark at friedenbach.org>\n>> >> wrote:\n>> >>>\n>> >>> Why do you say activation by August 1st is likely? That would require\n>> an\n>> >>> entire difficulty adjustment period with >=95% bit1 signaling. That\n>> seems a\n>> >>> tall order to organize in the scant few weeks remaining.\n>> >>>\n>> >>> On Jun 20, 2017, at 3:29 PM, Jacob Eliosoff via bitcoin-dev\n>> >>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>>\n>> >>> If segwit is activated before Aug 1, as now seems likely, there will\n>> be\n>> >>> no split that day.  But if activation is via Segwit2x (also likely),\n>> and at\n>> >>> least some nodes do & some don't follow through with the HF 3mo later\n>> >>> (again, likely), agreed w/ Greg that *then* we'll see a split -\n>> probably in\n>> >>> Sep/Oct.  How those two chains will match up and how the split will\n>> play out\n>> >>> is anyone's guess...\n>> >>>\n>> >>>\n>> >>>\n>> >>> On Jun 20, 2017 6:16 PM, \"Hampus Sj\u00f6berg via bitcoin-dev\"\n>> >>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>>\n>> >>> > Ironically, it looks like most of the segwit2x signaling miners are\n>> >>> > faking it (because they're not signaling segwit which it requires).\n>> >>> > It'll be unfortunate if some aren't faking it and start orphaning\n>> >>> > their own blocks because they are failing to signal segwit.\n>> >>>\n>> >>> Well, they're doing some kind of \"pre-signaling\" in the coinbase at\n>> the\n>> >>> moment, because the segwit2x project is still in alpha-phase\n>> according to\n>> >>> the timeline. They're just showing commitment.\n>> >>> I'm sure they will begin signaling on version bit 4/BIP91 as well as\n>> >>> actually running a segwit2x node when the time comes.\n>> >>>\n>> >>>\n>> >>> > As far as prevent a chain split goes, all those things\n>> >>> > (148/91/segwit2x(per today)) effectively guarantee a chainsplit--\n>> so I\n>> >>> > don't think that holds.\n>> >>>\n>> >>> Segwit2x/BIP91/BIP148 will orphan miners that do not run a Segwit2x\n>> (or\n>> >>> BIP148) node, because they wouldn't have the new consensus rule of\n>> requiring\n>> >>> all blocks to signal for segwit.\n>> >>> I don't believe there would be any long lasting chainsplit though\n>> >>> (because of the ~80% hashrate support on segwit2x), perhaps 2-3\n>> blocks if we\n>> >>> get unlucky.\n>> >>>\n>> >>> Hampus\n>> >>>\n>> >>> 2017-06-20 23:49 GMT+02:00 Gregory Maxwell via bitcoin-dev\n>> >>> <bitcoin-dev at lists.linuxfoundation.org>:\n>> >>>>\n>> >>>> On Tue, Jun 20, 2017 at 3:44 PM, Erik Aronesty via bitcoin-dev\n>> >>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>>> > Because a large percentage of miners are indifferent, right now\n>> miners\n>> >>>> > have\n>> >>>> > to choose between BIP148 and Segwit2x if they want to activate\n>> Segwit.\n>> >>>>\n>> >>>> Miners can simply continuing signaling segwit, which will leave them\n>> >>>> at least soft-fork compatible with BIP148 and BIP91 (and god knows\n>> >>>> what \"segwit2x\" is since they keep changing the actual definition and\n>> >>>> do not have a specification; but last I saw the near-term behavior\n>> the\n>> >>>> same as BIP91 but with a radically reduced activation window, so the\n>> >>>> story would be the same there in the near term).\n>> >>>>\n>> >>>> Ironically, it looks like most of the segwit2x signaling miners are\n>> >>>> faking it (because they're not signaling segwit which it requires).\n>> >>>> It'll be unfortunate if some aren't faking it and start orphaning\n>> >>>> their own blocks because they are failing to signal segwit.\n>> >>>>\n>> >>>> I don't think the rejection of segwit2x from Bitcoin's developers\n>> >>>> could be any more resolute than what we've already seen:\n>> >>>> https://en.bitcoin.it/wiki/Segwit_support\n>> >>>>\n>> >>>> On Tue, Jun 20, 2017 at 5:22 PM, Mark Friedenbach via bitcoin-dev\n>> >>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>>> > I think it is very na\u00efve to assume that any shift would be\n>> temporary.\n>> >>>> > We have a hard enough time getting miners to proactively upgrade to\n>> >>>> > recent versions of the reference bitcoin daemon. If miners\n>> interpret\n>> >>>> > the situation as being forced to run non-reference software in\n>> order\n>> >>>> > to prevent a chain split because a lack of support from Bitcoin\n>> Core,\n>> >>>> > that could be a one-way street.\n>> >>>>\n>> >>>> I think this is somewhat naive and sounds a lot like the repeat of\n>> the\n>> >>>> previously debunked \"XT\" and \"Classic\" hysteria.\n>> >>>>\n>> >>>> There is a reason that segwit2x is pretty much unanimously rejected\n>> by\n>> >>>> the technical community.  And just like with XT/Classic/Unlimited\n>> >>>> you'll continue to see a strong correlation with people who are\n>> >>>> unwilling and unable to keep updating the software at an acceptable\n>> >>>> level of quality-- esp. because the very founding on their fork is\n>> >>>> predicated on discarding those properties.\n>> >>>>\n>> >>>> If miners want to go off and create an altcoin-- welp, thats\n>> something\n>> >>>> they can always do,  and nothing about that will force anyone to go\n>> >>>> along with it.\n>> >>>>\n>> >>>> As far as prevent a chain split goes, all those things\n>> >>>> (148/91/segwit2x(per today)) effectively guarantee a chainsplit-- so\n>> I\n>> >>>> don't think that holds.\n>> >>>> _______________________________________________\n>> >>>> bitcoin-dev mailing list\n>> >>>> bitcoin-dev at lists.linuxfoundation.org\n>> >>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >>>\n>> >>>\n>> >>>\n>> >>> _______________________________________________\n>> >>> bitcoin-dev mailing list\n>> >>> bitcoin-dev at lists.linuxfoundation.org\n>> >>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >>>\n>> >>>\n>> >>> _______________________________________________\n>> >>> bitcoin-dev mailing list\n>> >>> bitcoin-dev at lists.linuxfoundation.org\n>> >>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >>\n>> >>\n>> >>\n>> >> _______________________________________________\n>> >> bitcoin-dev mailing list\n>> >> bitcoin-dev at lists.linuxfoundation.org\n>> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >>\n>> >\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170627/3642debc/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2017-06-27T16:31:26",
                "message_text_only": "First the implementation, then the technical design (BIP)... will the\nanalysis come after that?\nWill there be any kind of simulations of tje proposed size or will thag\ncome only after activation on mainnet?\nI assume the very last step will be activation on testnet 3 ?\n\nOn 27 Jun 2017 8:44 am, \"Sergio Demian Lerner via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\nCurrently the only implementation that fulfills the requirements of the NYA\nagreement is the segwit2x/btc1 implementation, which is being finalized\nthis week.\n\nSegwit2mb does not fulfill the NYA agreement.\n\nI'm asking now the segwit2x development team when a BIP will be ready so\nthat Core has the opportunity to evaluate the technical proposal.\n\n\n\n\nOn Wed, Jun 21, 2017 at 1:05 AM, Jacob Eliosoff via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Well, this Saturday's \"Chinese roundtable\" statement from a bunch of\n> miners (https://pastebin.com/b3St9VCF) says they intend \"NYA\" in the\n> coinbase as support for \"the New York consensus SegWit2x program btc1 (\n> https://github.com/btc1)\", whose code includes the (accelerated\n> 336-block) BIP 91 change.  So, other facts or interpretations could come to\n> light, but until they do we should probably assume that's what the \"NYA\"\n> (which just broke 80% over the last 24h) means.\n>\n>\n> On Tue, Jun 20, 2017 at 10:11 PM, Mark Friedenbach <mark at friedenbach.org>\n> wrote:\n>\n>> 80% have set \"NYA\" in their coinbase string. We have no idea what that\n>> means. People are equating it to BIP 91 -- but BIP 91 did not exist at\n>> the time of the New York agreement, and differs from the actual text\n>> of the NYA in substantive ways. The \"Segwit2MB\" that existed at the\n>> time of the NYA, and which was explicitly referenced by the text is\n>> the proposal by Sergio Demian Lerner that was made to this mailing\n>> list on 31 March. The text of the NYA grants no authority for\n>> upgrading this proposal while remaining compliant with the agreement.\n>> This is without even considering the fact that in the days after the\n>> NYA there was disagreement among those who signed it as to what it\n>> meant.\n>>\n>> I feel it is a very dangerous and unwarranted assumption people are\n>> making that what we are seeing now is either 80% support for BIP-91 or\n>> for the code in the btc1 repo.\n>>\n>> On Tue, Jun 20, 2017 at 6:36 PM, Erik Aronesty <erik at q32.com> wrote:\n>> > # Jacob Eliosoff:\n>> >\n>> >>  will start orphaning non-bit-1 blocks before Aug 1, and we avoid a\n>> split.\n>> >\n>> > Correct.  There are 2 short activation periods in BIP91 either of which\n>> > would avoid a split.\n>> >\n>> > # Gregory Maxwell:\n>> >\n>> >> unclear to me _exactly_ what it would need to implement to be\n>> consistent.\n>> >\n>> > This is the relevant pull req to core:\n>> >\n>> > https://github.com/bitcoin/bitcoin/pull/10444\n>> >\n>> > Seems OK.  It's technically running now on testnet5.   I think it (or a\n>> > -bip148 option) should be merged as soon as feasible.\n>> >\n>> >> previously debunked \"XT\" and \"Classic\" hysteria.\n>> >\n>> > apples vs oranges, imo.   segwit is not a contentious feature.   the\n>> > \"bundling\" in segwit2x is, but that's not the issue here.   the issue\n>> is we\n>> > are indirectly requiring miners that strongly support segwit to install\n>> > consensus protocol changes outside of bitcoin's standard reference.\n>>  80% of\n>> > them have signaled they will do so.   these are uncharted waters.\n>> >\n>> >\n>> > On Tue, Jun 20, 2017 at 6:57 PM, Jacob Eliosoff via bitcoin-dev\n>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>\n>> >> I could be wrong, but the latest BIP91 implementation (also included in\n>> >> Segwit2x) cuts the activation period to 336 blocks (2.33 days).  (This\n>> has\n>> >> been updated at\n>> >> https://github.com/bitcoin/bips/blob/master/bip-0091.mediawiki.)  So\n>> if 80%\n>> >> of hashpower is actually running that code and signaling on bit 4 by\n>> July 25\n>> >> or so, then those 80+% will start orphaning non-bit-1 blocks before\n>> Aug 1,\n>> >> and we avoid a split.\n>> >>\n>> >> There may still be a few non-bit-1 blocks that get orphaned after Aug\n>> 1,\n>> >> because they're mined by old BIP141 nodes.  But it seems like very few\n>> >> miners won't be signaling either Segwit2x *or* BIP141 by then...\n>> >>\n>> >> Make sense?\n>> >>\n>> >>\n>> >> On Tue, Jun 20, 2017 at 6:48 PM, Mark Friedenbach <\n>> mark at friedenbach.org>\n>> >> wrote:\n>> >>>\n>> >>> Why do you say activation by August 1st is likely? That would require\n>> an\n>> >>> entire difficulty adjustment period with >=95% bit1 signaling. That\n>> seems a\n>> >>> tall order to organize in the scant few weeks remaining.\n>> >>>\n>> >>> On Jun 20, 2017, at 3:29 PM, Jacob Eliosoff via bitcoin-dev\n>> >>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>>\n>> >>> If segwit is activated before Aug 1, as now seems likely, there will\n>> be\n>> >>> no split that day.  But if activation is via Segwit2x (also likely),\n>> and at\n>> >>> least some nodes do & some don't follow through with the HF 3mo later\n>> >>> (again, likely), agreed w/ Greg that *then* we'll see a split -\n>> probably in\n>> >>> Sep/Oct.  How those two chains will match up and how the split will\n>> play out\n>> >>> is anyone's guess...\n>> >>>\n>> >>>\n>> >>>\n>> >>> On Jun 20, 2017 6:16 PM, \"Hampus Sj\u00f6berg via bitcoin-dev\"\n>> >>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>>\n>> >>> > Ironically, it looks like most of the segwit2x signaling miners are\n>> >>> > faking it (because they're not signaling segwit which it requires).\n>> >>> > It'll be unfortunate if some aren't faking it and start orphaning\n>> >>> > their own blocks because they are failing to signal segwit.\n>> >>>\n>> >>> Well, they're doing some kind of \"pre-signaling\" in the coinbase at\n>> the\n>> >>> moment, because the segwit2x project is still in alpha-phase\n>> according to\n>> >>> the timeline. They're just showing commitment.\n>> >>> I'm sure they will begin signaling on version bit 4/BIP91 as well as\n>> >>> actually running a segwit2x node when the time comes.\n>> >>>\n>> >>>\n>> >>> > As far as prevent a chain split goes, all those things\n>> >>> > (148/91/segwit2x(per today)) effectively guarantee a chainsplit--\n>> so I\n>> >>> > don't think that holds.\n>> >>>\n>> >>> Segwit2x/BIP91/BIP148 will orphan miners that do not run a Segwit2x\n>> (or\n>> >>> BIP148) node, because they wouldn't have the new consensus rule of\n>> requiring\n>> >>> all blocks to signal for segwit.\n>> >>> I don't believe there would be any long lasting chainsplit though\n>> >>> (because of the ~80% hashrate support on segwit2x), perhaps 2-3\n>> blocks if we\n>> >>> get unlucky.\n>> >>>\n>> >>> Hampus\n>> >>>\n>> >>> 2017-06-20 23:49 GMT+02:00 Gregory Maxwell via bitcoin-dev\n>> >>> <bitcoin-dev at lists.linuxfoundation.org>:\n>> >>>>\n>> >>>> On Tue, Jun 20, 2017 at 3:44 PM, Erik Aronesty via bitcoin-dev\n>> >>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>>> > Because a large percentage of miners are indifferent, right now\n>> miners\n>> >>>> > have\n>> >>>> > to choose between BIP148 and Segwit2x if they want to activate\n>> Segwit.\n>> >>>>\n>> >>>> Miners can simply continuing signaling segwit, which will leave them\n>> >>>> at least soft-fork compatible with BIP148 and BIP91 (and god knows\n>> >>>> what \"segwit2x\" is since they keep changing the actual definition and\n>> >>>> do not have a specification; but last I saw the near-term behavior\n>> the\n>> >>>> same as BIP91 but with a radically reduced activation window, so the\n>> >>>> story would be the same there in the near term).\n>> >>>>\n>> >>>> Ironically, it looks like most of the segwit2x signaling miners are\n>> >>>> faking it (because they're not signaling segwit which it requires).\n>> >>>> It'll be unfortunate if some aren't faking it and start orphaning\n>> >>>> their own blocks because they are failing to signal segwit.\n>> >>>>\n>> >>>> I don't think the rejection of segwit2x from Bitcoin's developers\n>> >>>> could be any more resolute than what we've already seen:\n>> >>>> https://en.bitcoin.it/wiki/Segwit_support\n>> >>>>\n>> >>>> On Tue, Jun 20, 2017 at 5:22 PM, Mark Friedenbach via bitcoin-dev\n>> >>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>>> > I think it is very na\u00efve to assume that any shift would be\n>> temporary.\n>> >>>> > We have a hard enough time getting miners to proactively upgrade to\n>> >>>> > recent versions of the reference bitcoin daemon. If miners\n>> interpret\n>> >>>> > the situation as being forced to run non-reference software in\n>> order\n>> >>>> > to prevent a chain split because a lack of support from Bitcoin\n>> Core,\n>> >>>> > that could be a one-way street.\n>> >>>>\n>> >>>> I think this is somewhat naive and sounds a lot like the repeat of\n>> the\n>> >>>> previously debunked \"XT\" and \"Classic\" hysteria.\n>> >>>>\n>> >>>> There is a reason that segwit2x is pretty much unanimously rejected\n>> by\n>> >>>> the technical community.  And just like with XT/Classic/Unlimited\n>> >>>> you'll continue to see a strong correlation with people who are\n>> >>>> unwilling and unable to keep updating the software at an acceptable\n>> >>>> level of quality-- esp. because the very founding on their fork is\n>> >>>> predicated on discarding those properties.\n>> >>>>\n>> >>>> If miners want to go off and create an altcoin-- welp, thats\n>> something\n>> >>>> they can always do,  and nothing about that will force anyone to go\n>> >>>> along with it.\n>> >>>>\n>> >>>> As far as prevent a chain split goes, all those things\n>> >>>> (148/91/segwit2x(per today)) effectively guarantee a chainsplit-- so\n>> I\n>> >>>> don't think that holds.\n>> >>>> _______________________________________________\n>> >>>> bitcoin-dev mailing list\n>> >>>> bitcoin-dev at lists.linuxfoundation.org\n>> >>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >>>\n>> >>>\n>> >>>\n>> >>> _______________________________________________\n>> >>> bitcoin-dev mailing list\n>> >>> bitcoin-dev at lists.linuxfoundation.org\n>> >>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >>>\n>> >>>\n>> >>> _______________________________________________\n>> >>> bitcoin-dev mailing list\n>> >>> bitcoin-dev at lists.linuxfoundation.org\n>> >>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >>\n>> >>\n>> >>\n>> >> _______________________________________________\n>> >> bitcoin-dev mailing list\n>> >> bitcoin-dev at lists.linuxfoundation.org\n>> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >>\n>> >\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170627/6fe6606e/attachment-0001.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2017-06-27T19:26:35",
                "message_text_only": "There's a pull req to core already for part of it:\n\nhttps://github.com/bitcoin/bitcoin/pull/10444\n\n\n\n\nOn Tue, Jun 27, 2017 at 12:31 PM, Jorge Tim\u00f3n via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> First the implementation, then the technical design (BIP)... will the\n> analysis come after that?\n> Will there be any kind of simulations of tje proposed size or will thag\n> come only after activation on mainnet?\n> I assume the very last step will be activation on testnet 3 ?\n>\n>\n> On 27 Jun 2017 8:44 am, \"Sergio Demian Lerner via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Currently the only implementation that fulfills the requirements of the\n> NYA agreement is the segwit2x/btc1 implementation, which is being finalized\n> this week.\n>\n> Segwit2mb does not fulfill the NYA agreement.\n>\n> I'm asking now the segwit2x development team when a BIP will be ready so\n> that Core has the opportunity to evaluate the technical proposal.\n>\n>\n>\n>\n> On Wed, Jun 21, 2017 at 1:05 AM, Jacob Eliosoff via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Well, this Saturday's \"Chinese roundtable\" statement from a bunch of\n>> miners (https://pastebin.com/b3St9VCF) says they intend \"NYA\" in the\n>> coinbase as support for \"the New York consensus SegWit2x program btc1 (\n>> https://github.com/btc1)\", whose code includes the (accelerated\n>> 336-block) BIP 91 change.  So, other facts or interpretations could come to\n>> light, but until they do we should probably assume that's what the \"NYA\"\n>> (which just broke 80% over the last 24h) means.\n>>\n>>\n>> On Tue, Jun 20, 2017 at 10:11 PM, Mark Friedenbach <mark at friedenbach.org>\n>> wrote:\n>>\n>>> 80% have set \"NYA\" in their coinbase string. We have no idea what that\n>>> means. People are equating it to BIP 91 -- but BIP 91 did not exist at\n>>> the time of the New York agreement, and differs from the actual text\n>>> of the NYA in substantive ways. The \"Segwit2MB\" that existed at the\n>>> time of the NYA, and which was explicitly referenced by the text is\n>>> the proposal by Sergio Demian Lerner that was made to this mailing\n>>> list on 31 March. The text of the NYA grants no authority for\n>>> upgrading this proposal while remaining compliant with the agreement.\n>>> This is without even considering the fact that in the days after the\n>>> NYA there was disagreement among those who signed it as to what it\n>>> meant.\n>>>\n>>> I feel it is a very dangerous and unwarranted assumption people are\n>>> making that what we are seeing now is either 80% support for BIP-91 or\n>>> for the code in the btc1 repo.\n>>>\n>>> On Tue, Jun 20, 2017 at 6:36 PM, Erik Aronesty <erik at q32.com> wrote:\n>>> > # Jacob Eliosoff:\n>>> >\n>>> >>  will start orphaning non-bit-1 blocks before Aug 1, and we avoid a\n>>> split.\n>>> >\n>>> > Correct.  There are 2 short activation periods in BIP91 either of which\n>>> > would avoid a split.\n>>> >\n>>> > # Gregory Maxwell:\n>>> >\n>>> >> unclear to me _exactly_ what it would need to implement to be\n>>> consistent.\n>>> >\n>>> > This is the relevant pull req to core:\n>>> >\n>>> > https://github.com/bitcoin/bitcoin/pull/10444\n>>> >\n>>> > Seems OK.  It's technically running now on testnet5.   I think it (or a\n>>> > -bip148 option) should be merged as soon as feasible.\n>>> >\n>>> >> previously debunked \"XT\" and \"Classic\" hysteria.\n>>> >\n>>> > apples vs oranges, imo.   segwit is not a contentious feature.   the\n>>> > \"bundling\" in segwit2x is, but that's not the issue here.   the issue\n>>> is we\n>>> > are indirectly requiring miners that strongly support segwit to install\n>>> > consensus protocol changes outside of bitcoin's standard reference.\n>>>  80% of\n>>> > them have signaled they will do so.   these are uncharted waters.\n>>> >\n>>> >\n>>> > On Tue, Jun 20, 2017 at 6:57 PM, Jacob Eliosoff via bitcoin-dev\n>>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> >>\n>>> >> I could be wrong, but the latest BIP91 implementation (also included\n>>> in\n>>> >> Segwit2x) cuts the activation period to 336 blocks (2.33 days).\n>>> (This has\n>>> >> been updated at\n>>> >> https://github.com/bitcoin/bips/blob/master/bip-0091.mediawiki.)  So\n>>> if 80%\n>>> >> of hashpower is actually running that code and signaling on bit 4 by\n>>> July 25\n>>> >> or so, then those 80+% will start orphaning non-bit-1 blocks before\n>>> Aug 1,\n>>> >> and we avoid a split.\n>>> >>\n>>> >> There may still be a few non-bit-1 blocks that get orphaned after Aug\n>>> 1,\n>>> >> because they're mined by old BIP141 nodes.  But it seems like very few\n>>> >> miners won't be signaling either Segwit2x *or* BIP141 by then...\n>>> >>\n>>> >> Make sense?\n>>> >>\n>>> >>\n>>> >> On Tue, Jun 20, 2017 at 6:48 PM, Mark Friedenbach <\n>>> mark at friedenbach.org>\n>>> >> wrote:\n>>> >>>\n>>> >>> Why do you say activation by August 1st is likely? That would\n>>> require an\n>>> >>> entire difficulty adjustment period with >=95% bit1 signaling. That\n>>> seems a\n>>> >>> tall order to organize in the scant few weeks remaining.\n>>> >>>\n>>> >>> On Jun 20, 2017, at 3:29 PM, Jacob Eliosoff via bitcoin-dev\n>>> >>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> >>>\n>>> >>> If segwit is activated before Aug 1, as now seems likely, there will\n>>> be\n>>> >>> no split that day.  But if activation is via Segwit2x (also likely),\n>>> and at\n>>> >>> least some nodes do & some don't follow through with the HF 3mo later\n>>> >>> (again, likely), agreed w/ Greg that *then* we'll see a split -\n>>> probably in\n>>> >>> Sep/Oct.  How those two chains will match up and how the split will\n>>> play out\n>>> >>> is anyone's guess...\n>>> >>>\n>>> >>>\n>>> >>>\n>>> >>> On Jun 20, 2017 6:16 PM, \"Hampus Sj\u00f6berg via bitcoin-dev\"\n>>> >>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> >>>\n>>> >>> > Ironically, it looks like most of the segwit2x signaling miners are\n>>> >>> > faking it (because they're not signaling segwit which it requires).\n>>> >>> > It'll be unfortunate if some aren't faking it and start orphaning\n>>> >>> > their own blocks because they are failing to signal segwit.\n>>> >>>\n>>> >>> Well, they're doing some kind of \"pre-signaling\" in the coinbase at\n>>> the\n>>> >>> moment, because the segwit2x project is still in alpha-phase\n>>> according to\n>>> >>> the timeline. They're just showing commitment.\n>>> >>> I'm sure they will begin signaling on version bit 4/BIP91 as well as\n>>> >>> actually running a segwit2x node when the time comes.\n>>> >>>\n>>> >>>\n>>> >>> > As far as prevent a chain split goes, all those things\n>>> >>> > (148/91/segwit2x(per today)) effectively guarantee a chainsplit--\n>>> so I\n>>> >>> > don't think that holds.\n>>> >>>\n>>> >>> Segwit2x/BIP91/BIP148 will orphan miners that do not run a Segwit2x\n>>> (or\n>>> >>> BIP148) node, because they wouldn't have the new consensus rule of\n>>> requiring\n>>> >>> all blocks to signal for segwit.\n>>> >>> I don't believe there would be any long lasting chainsplit though\n>>> >>> (because of the ~80% hashrate support on segwit2x), perhaps 2-3\n>>> blocks if we\n>>> >>> get unlucky.\n>>> >>>\n>>> >>> Hampus\n>>> >>>\n>>> >>> 2017-06-20 23:49 GMT+02:00 Gregory Maxwell via bitcoin-dev\n>>> >>> <bitcoin-dev at lists.linuxfoundation.org>:\n>>> >>>>\n>>> >>>> On Tue, Jun 20, 2017 at 3:44 PM, Erik Aronesty via bitcoin-dev\n>>> >>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> >>>> > Because a large percentage of miners are indifferent, right now\n>>> miners\n>>> >>>> > have\n>>> >>>> > to choose between BIP148 and Segwit2x if they want to activate\n>>> Segwit.\n>>> >>>>\n>>> >>>> Miners can simply continuing signaling segwit, which will leave them\n>>> >>>> at least soft-fork compatible with BIP148 and BIP91 (and god knows\n>>> >>>> what \"segwit2x\" is since they keep changing the actual definition\n>>> and\n>>> >>>> do not have a specification; but last I saw the near-term behavior\n>>> the\n>>> >>>> same as BIP91 but with a radically reduced activation window, so the\n>>> >>>> story would be the same there in the near term).\n>>> >>>>\n>>> >>>> Ironically, it looks like most of the segwit2x signaling miners are\n>>> >>>> faking it (because they're not signaling segwit which it requires).\n>>> >>>> It'll be unfortunate if some aren't faking it and start orphaning\n>>> >>>> their own blocks because they are failing to signal segwit.\n>>> >>>>\n>>> >>>> I don't think the rejection of segwit2x from Bitcoin's developers\n>>> >>>> could be any more resolute than what we've already seen:\n>>> >>>> https://en.bitcoin.it/wiki/Segwit_support\n>>> >>>>\n>>> >>>> On Tue, Jun 20, 2017 at 5:22 PM, Mark Friedenbach via bitcoin-dev\n>>> >>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> >>>> > I think it is very na\u00efve to assume that any shift would be\n>>> temporary.\n>>> >>>> > We have a hard enough time getting miners to proactively upgrade\n>>> to\n>>> >>>> > recent versions of the reference bitcoin daemon. If miners\n>>> interpret\n>>> >>>> > the situation as being forced to run non-reference software in\n>>> order\n>>> >>>> > to prevent a chain split because a lack of support from Bitcoin\n>>> Core,\n>>> >>>> > that could be a one-way street.\n>>> >>>>\n>>> >>>> I think this is somewhat naive and sounds a lot like the repeat of\n>>> the\n>>> >>>> previously debunked \"XT\" and \"Classic\" hysteria.\n>>> >>>>\n>>> >>>> There is a reason that segwit2x is pretty much unanimously rejected\n>>> by\n>>> >>>> the technical community.  And just like with XT/Classic/Unlimited\n>>> >>>> you'll continue to see a strong correlation with people who are\n>>> >>>> unwilling and unable to keep updating the software at an acceptable\n>>> >>>> level of quality-- esp. because the very founding on their fork is\n>>> >>>> predicated on discarding those properties.\n>>> >>>>\n>>> >>>> If miners want to go off and create an altcoin-- welp, thats\n>>> something\n>>> >>>> they can always do,  and nothing about that will force anyone to go\n>>> >>>> along with it.\n>>> >>>>\n>>> >>>> As far as prevent a chain split goes, all those things\n>>> >>>> (148/91/segwit2x(per today)) effectively guarantee a chainsplit--\n>>> so I\n>>> >>>> don't think that holds.\n>>> >>>> _______________________________________________\n>>> >>>> bitcoin-dev mailing list\n>>> >>>> bitcoin-dev at lists.linuxfoundation.org\n>>> >>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>> >>>\n>>> >>>\n>>> >>>\n>>> >>> _______________________________________________\n>>> >>> bitcoin-dev mailing list\n>>> >>> bitcoin-dev at lists.linuxfoundation.org\n>>> >>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>> >>>\n>>> >>>\n>>> >>> _______________________________________________\n>>> >>> bitcoin-dev mailing list\n>>> >>> bitcoin-dev at lists.linuxfoundation.org\n>>> >>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>> >>\n>>> >>\n>>> >>\n>>> >> _______________________________________________\n>>> >> bitcoin-dev mailing list\n>>> >> bitcoin-dev at lists.linuxfoundation.org\n>>> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>> >>\n>>> >\n>>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170627/472604e0/attachment-0001.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-06-20T22:34:29",
                "message_text_only": "On Tue, Jun 20, 2017 at 10:15 PM, Hampus Sj\u00f6berg\n<hampus.sjoberg at gmail.com> wrote:\n> Segwit2x/BIP91/BIP148 will orphan miners that do not run a Segwit2x (or\n> BIP148) node, because they wouldn't have the new consensus rule of requiring\n> all blocks to signal for segwit.\n\nAll versions of Bitcoin Core since 0.13.1 signal segwit, 0.14.1+ even\nwhen downstream mining software doesn't support it.\n\nI think it would be useful for there to exist a useful and trivial\npatch against current (0.14.2) software to engage in the BIP91-like\norphaning, like people have provided for BIP148-- but right now I\ndon't see any specification of the behavior so it's unclear to me\n_exactly_ what it would need to implement to be consistent."
            },
            {
                "author": "Hampus Sj\u00f6berg",
                "date": "2017-06-20T22:53:29",
                "message_text_only": "> I think it would be useful for there to exist a useful and trivial\n> patch against current (0.14.2) software to engage in the BIP91-like\n> orphaning, like people have provided for BIP148-- but right now I\n> don't see any specification of the behavior so it's unclear to me\n> _exactly_ what it would need to implement to be consistent.\n\nI agree.\nThis is the latest code regarding BIP91 that got merged,\nhttps://github.com/btc1/bitcoin/pull/21/files so that should be the spec we\nneed to follow (also the old BIP91 PR:\nhttps://github.com/btc1/bitcoin/pull/17/files).\nPerhaps James Hilliard could give input here though.\n\n\n2017-06-21 0:34 GMT+02:00 Gregory Maxwell <greg at xiph.org>:\n\n> On Tue, Jun 20, 2017 at 10:15 PM, Hampus Sj\u00f6berg\n> <hampus.sjoberg at gmail.com> wrote:\n> > Segwit2x/BIP91/BIP148 will orphan miners that do not run a Segwit2x (or\n> > BIP148) node, because they wouldn't have the new consensus rule of\n> requiring\n> > all blocks to signal for segwit.\n>\n> All versions of Bitcoin Core since 0.13.1 signal segwit, 0.14.1+ even\n> when downstream mining software doesn't support it.\n>\n> I think it would be useful for there to exist a useful and trivial\n> patch against current (0.14.2) software to engage in the BIP91-like\n> orphaning, like people have provided for BIP148-- but right now I\n> don't see any specification of the behavior so it's unclear to me\n> _exactly_ what it would need to implement to be consistent.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170621/d51a368b/attachment.html>"
            },
            {
                "author": "Ryan J Martin",
                "date": "2017-06-20T19:49:57",
                "message_text_only": "I concur with Mark's reply. Just to underscore this: Miners arent going to bother to signaling or changing a setting unless they have to. Anything that requires time--especially if requiring a restart/any time not mining or risks a crash---reduces income. So why would they change any settings unless they have to?\n\n-Ryan J. Martin\n\n\nOn Jun 20, 2017 1:26 PM, Mark Friedenbach via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\nI think it is very na\u00efve to assume that any shift would be temporary.\nWe have a hard enough time getting miners to proactively upgrade to\nrecent versions of the reference bitcoin daemon. If miners interpret\nthe situation as being forced to run non-reference software in order\nto prevent a chain split because a lack of support from Bitcoin Core,\nthat could be a one-way street.\n\nOn Tue, Jun 20, 2017 at 9:49 AM, Hampus Sj\u00f6berg via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I don't think it's a huge deal if the miners need to run a non-Core node\n> once the BIP91 deployment of Segwit2x happens. The shift will most likely be\n> temporary.\n>\n> I agree that the \"-bip148\"-option should be merged, though.\n>\n> 2017-06-20 17:44 GMT+02:00 Erik Aronesty via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org>:\n>>\n>> Are we going to merge BIP91 or a -BIP148 option to core for inclusion in\n>> the next release or so?\n>>\n>> Because a large percentage of miners are indifferent, right now miners\n>> have to choose between BIP148 and Segwit2x if they want to activate Segwit.\n>>\n>> Should we be forcing miners to choose to run non-core code in order to\n>> activate a popular feature?\n>>\n>> - Erik\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170620/daf389f6/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Miners forced to run non-core code in order to get segwit activated",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Hampus Sj\u00f6berg",
                "Sergio Demian Lerner",
                "Jorge Tim\u00f3n",
                "Erik Aronesty",
                "Gregory Maxwell",
                "Mark Friedenbach",
                "Jacob Eliosoff",
                "Ryan J Martin"
            ],
            "messages_count": 18,
            "total_messages_chars_count": 96001
        }
    },
    {
        "title": "[bitcoin-dev] Fwd:  Proposal to add the bitcoin symbol to Unicode",
        "thread_messages": [
            {
                "author": "Theo Chino",
                "date": "2017-06-20T22:13:06",
                "message_text_only": "Ken and team,\n\nTook some time but here it is ! *Bravo !*\n\nAnd as usual reporter make up the shit they want ... Feel free to remind\nthem that we had a working group and we worked on it.\nhttps://www.theverge.com/2017/6/20/15840008/new-emoji-\nunicode-consortium-version-10-bitcoin-symbol\n\nThe \"Could be\" is a bit too much. It's time we keep reporter in check so\nfeel free to remind her in your own way.\nMy way is \"pissed off tweet\", https://twitter.com/TheoBitcoin/status/\n877277497796198400 but used your own way.\n\nA page is officially turned.\n\nRegards,\nTheo\n\nOn Tue, Sep 8, 2015 at 5:05 PM, Ken Shirriff via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n>\n> On Tue, Sep 8, 2015 at 1:28 PM, Danny Thorpe <danny.thorpe at gmail.com>\n> wrote:\n>\n>> What of this prior effort, proposing B-with-horizontal-bar (\u0243)?\n>> http://bitcoinsymbol.org/\n>>\n>> They argue that B-with-2-vertical-bars is easily confused with the Thai\n>> Bhat currency symbol, which is a B with a single vertical bar.\n>>\n>\n> Actually that page argues that using the Thai Bhat currency symbol *for*\n> Bitcoin causes confusion. From the page you linked to:\n>\n> The Thai Baht (\u0e3f <https://en.wikipedia.org/wiki/Thai_baht>) is sometimes\n> used to represent Bitcoin, but this certainly raises a problem of\n> differenciation between the Thai Baht and Bitcoin.\n>\n> Their main motivation for using the horizontal-bar \u0243 (which they admit is\n> a hack) is they consider adding a character to Unicode to be a \"really long\n> and complicated process\". My view is that adding the bitcoin sign to\n> Unicode avoids confusion with the Thai Baht, avoids hacks such as \u0243, and\n> lets everyone use the standard symbol. Hopefully it won't be a really long\n> and complicated process...\n>\n> Ken\n>\n>\n>> I'm not terribly fond of the B-with-horizontal-bar as a symbol, but it\n>> does have the advantage that it is already in the Unicode glyph set,\n>> already available on most Unicode enabled devices.\n>>\n>> -Danny\n>>\n>> On Sat, Sep 5, 2015 at 7:11 AM, Ken Shirriff via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> Use of the bitcoin symbol in text is inconvenient, because the bitcoin\n>>> symbol isn't in the Unicode standard. To fix this, I've written a proposal\n>>> to have the common B-with-vertical-bars bitcoin symbol added to Unicode.\n>>> I've successfully proposed a new character for Unicode before, so I'm\n>>> familiar with the process and think this has a good chance of succeeding.\n>>> The proposal is at http://righto.com/bitcoin-unicode.pdf\n>>>\n>>> I received a suggestion to run this proposal by the bitcoin-dev group,\n>>> so I hope this email is appropriate here. Endorsement by Bitcoin developers\n>>> will help the Unicode Committee realize the importance of adding this\n>>> symbol, so please let me know if you support this proposal.\n>>>\n>>> Thanks,\n>>> Ken\n>>>\n>>>\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>>\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170620/00ca3db9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Fwd:  Proposal to add the bitcoin symbol to Unicode",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Theo Chino"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3447
        }
    },
    {
        "title": "[bitcoin-dev] Freeze Bitcoin protocol and call it Bitcoin 1",
        "thread_messages": [
            {
                "author": "Lucas Clemente Vella",
                "date": "2017-06-21T04:46:15",
                "message_text_only": "Is it too late to propose to freeze Bitcoin protocol as it is today (no\nSegWit, no bigger block)?\n\nHear me out: assume Bitcoin is frozen as it is now: no more forks, no more\nchange in consensus rules. Call it Bitcoin 1 (BC1). So, how to evolve and\nscale Bitcoin?\n\nUse a very conservative sidechain, call it Bitcoin 2 (BC2), tightly\ncoupled, block per block, with Bitcoin 1 chain. No fancy experimental\nchanges there: fix the bare minimum to support more general two-way\nsidechains, linear scalability transaction verification time and\ntransaction malleability. Can be one way only if that makes it simple\nenough: coins sent to BC2 can never come back to BC1.\n\nMiners choose to mine a BC2 block alongside a BC1 block, and it can be done\nfor free once a BC1 block is found. There may be BC1 blocks in the chain\nwhose corresponding BC2 blocks are missing (and that is not a big deal),\nbut there will be an economic incentive to mine a BC2 block, since\ntransaction fees on that chain will be collected.\n\nThe economic adoption is completely voluntary and independent of anyone\nelse, doesn't require the strong consensus of SegWit. If it is feasible to\ncreate a simple enough two way sidechain over BC1, good. If not, economic\nvalue of BC1 will always be at least that of BC2, but never lower. BC2 may\nhave a lower price than BC1 at first, but since it will have every feature\nof BC1, plus the possibility of massive scalability and instantaneous\ntransactions with a lightning network built over BC2 (a practical\neconomical advantage), it will most likely value over what BC1 could ever\nbe alone, raising BC1 price with it.\n\nIf these predictions are correct, fewer and fewer people will transact BC1,\neventually with blocks mined empty except for the coinbase, which the miner\nmay choose to send directly to BC2. If I turn out to be wrong, and people\nprefer to stick to the old BC1 for some reason, BC2 becomes just another\nspeculative altcoin. Thus, everyone migrating should be fully conscious\nabout the risk of immediate devaluation.\n\nThe 2 major risks I see that could hamper the adoption are:\n - Just plain fear: I find the whole economical incentive scenario of BC2\nsound and plausible, just as I found Bitcoin sound and plausible when I\nheard about it for the first time. I also fear to put my money in BC2, just\nas I did when I heard about Bitcoin. BC2 case is even worse, because I can\nsafely hold my coins in BC1 until I am sure BC2 is solid, so at first we\nmay experience only enthusiast adoption;\n- Technological inertia: everyone wishing to accept BC2 will have to\nimplement this payment system as for any other altcoin. Every exchange\nsupporting both will have to create separated markets for BC1 and BC2.\nRemember: both chains must be obviously distinguishable. It is even\ndesirable that the address format in BC2 to be incompatible with BC1 (maybe\nstaring with \"2\" ?).\n\nFinally, due to the present state of affairs, with impending activation of\nsegwit with a promise to hardfork in 3 months, I believe this proposal is\ntoo late, not to mention the stress, emotions and hard feelings of the\nsituation will make it go largely ill received or ignored. But since I\ngenuinely believe this to be the best and most conservative way to go with\nBitcoin, I wrote this anyway.\n\nPlease forgive me if something like this was discussed a thousand times\nbefore and you wasted your time reading this.\n\n-- \nLucas Clemente Vella\nlvella at gmail.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170621/d52291ac/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Freeze Bitcoin protocol and call it Bitcoin 1",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Lucas Clemente Vella"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3623
        }
    },
    {
        "title": "[bitcoin-dev] BIP Idea : DDoS resistance via decentrilized proof-of-work",
        "thread_messages": [
            {
                "author": "Ilya Eriklintsev",
                "date": "2017-06-21T09:55:22",
                "message_text_only": "Hello everyone,\n\nrecently I have got an idea that in my opinion will improve bitcoin\nnetwork, making it better store-of-value for growing cyberspace and\ncryptoeconomy. Sorry for longread below and thank you for your time.\n\n*Decentralized proof-of-work and DDoS resistance for Bitcoin*\n\n*Abstract*\n\nBy introducing some new block validation rules it is possible to make\nBitcoin network more secure, decentralized and DDoS resistant. The idea is\nto modify simple proof-of-work puzzle in such a way that user transactions\ncould be hardened with the same proof-of-work algorithm thus incentivising\nall the miners to include that particular transaction. Such mechanism will\neffectively give a handicap to every miner who includes \"mined\" transaction\ninto next block, increasing probability of him getting block reward.\n\n*Problems and motivation*\n\nThis document will address the issue of a continuous DDoS attack targeting\nthe Bitcoin network, e.g. full nodes mempools constantly being overflowed\nwith transactions carrying small value reduce system primary ability to\ntransfer value (and hence making it perfect store of value). Valid\ntransactions are cheap to create (in the sense of computational effort\nrequired) and no adequate mechanism exist to make transaction total value\nincrease probably of its confirmation by the network.\n\nCurrently, miners decide which transactions to include in blocks because\nit's them who are securing Bitcoin network providing proof-of-work\ncertificates stored inside every block header. Miners have to store the\nwhole blockchain at all times, so one of the costs is storage which grows\nlinearly with the transaction size (blockchain size as well). Another cost\nis network bandwidth which depends directly on the size of data to be\ncommunicated over.\n\nThe only incentive a person who wants to transfer his bitcoins is allowed\nto use is setting of transaction fee, that is going directly to the miner.\nThis solution probably was intended to utilize free market (as implied by\nSatoshi introducing sequence numbers) to determine appropriate fees, but\nthat is obviously not the case, in the current bitcoin network operating in\nfull block capacity mode. This fee market deviates significantly from a\nfree market premise (also attempts being made to make it closer, e.g. in\nBIP125 where Replace-By-Fee signaling is supposed to help in replacing\n\"stuck\" transactions with noncompetitive fee).\n\nCurrently, bitcoin network is susceptible to the DDoS attack of a kind.\nAdversary creating and translating into the network a lot of transactions\ncarrying small value (e.g. only miners fee), will be able to impair the\nability to transfer value for everyone in the world, should he has enough\nmoney to pay the fees. Miners would continue to work providing security for\nthe network and new blocks will consist of transaction transferring\nnegligible value. It's a major drawback because the cost of such attack\ndoesn't grow asymmetrically with the cost of BTC asset.\n\n*Proposed solution*\n\nSo how do we incentivize all miners to include our transaction carrying a\nlot of value in the next block? The only thing a miner supposed to do to\nget a reward is to produce Hashcash proof-of-work, thus providing\ncryptographic security guarantees for the whole Bitcoin blockchain. What if\nincluding our transaction in a block would reduce effort requirements for\nthe miner produce valid block?\n\nWe could do so by extending the concept of proof-of-work, in such a way\nthat we do not sacrifice security at all. Here are both descriptions\nproof-of-work as-is and to-be:\n\nStandart proof-of-work: hash(previous block hash + current block target +\ncurrent block metadata + current block transactions) < target\n\nDecentralized proof-of-work: hash(previous block hash + current block\ntarget + current block metadata + current block transactions) - sum( FFFF -\nhash( previous block hash + raw_tx ) ) < target\n\nIt is possible to imagine completely mining agnostic proof-of-work, for\nexample, the following PoW would do:\n\nDistributed (mining-agnostic) proof-of-work: sum( FFFF - hash( previous\nblock hash + current block target + current block metadata + signed_tx ) )\n< target\n\nDescribed protocol change could be implemented as user activated soft-fork\n(described in BIP148), introducing new blocks with the modified\nproof-of-work concept.\n\n*Economic reasoning*\n\nAn adversary whose goal is to prevent the network from transferring value\nwill have to compete with good users hash rate using same equipment good\nminers will use. And it's far more complicated than competing with others\nusing the money to pay transaction fees.\n\nIn order to investigate probable consequences of protocol upgrade and\nstability of implied economical equilibrium, we need an adequate game\ntheoretical model. Such model and numerical simulation results should be\nobtained and studied before any protocol change could be considered by the\ncommunity.\n\nTo me it seems like a win-win solution for everyone owning BTC:\n\nMiners benefit: as the result DDoS attack will be stopped, Bitcoin becomes\nperfect store-of-value finally. Political decentralization of hash rate\nwill be incentivized as mining equipment becomes relevant to every user.\nUsers benefit: miners will have direct incentives to include transactions\ndeemed important by their sender and supported by some amount of\nproof-of-work.\n\nSincerely yours, Ilya Eriklintsev.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170621/9e0880f5/attachment.html>"
            },
            {
                "author": "Conrad Burchert",
                "date": "2017-06-22T12:02:45",
                "message_text_only": "As soon as there is competition for block space, people will likely\noutsource creating the proof of work on the transaction to \"transaction\nminers\". This would likely result in giving a fee to those transaction\nminers. If those are the same miners as those mining the block, we are back\nat the current system.\n\nPut in other words: We are already doing this, you are paying the miner for\na piece of the proof of work of the block. If you want to mine instead of\npaying, just mine a block and use a part of the block reward to pay the fee\nfor another transaction.\n\nThis also does not work to prevent spam. Instead of paying the transaction\nfee you can just pay someone to mine proof-of-work on your spam\ntransactions, resulting in roughly the same cost. There is no reason a\nnormal user would be better in doing this than a spammer, likely it is the\nother way around as the spammer is a more reliable customer for a miner.\n\n2017-06-21 11:55 GMT+02:00 Ilya Eriklintsev via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> Hello everyone,\n>\n> recently I have got an idea that in my opinion will improve bitcoin\n> network, making it better store-of-value for growing cyberspace and\n> cryptoeconomy. Sorry for longread below and thank you for your time.\n>\n> *Decentralized proof-of-work and DDoS resistance for Bitcoin*\n>\n> *Abstract*\n>\n> By introducing some new block validation rules it is possible to make\n> Bitcoin network more secure, decentralized and DDoS resistant. The idea is\n> to modify simple proof-of-work puzzle in such a way that user transactions\n> could be hardened with the same proof-of-work algorithm thus incentivising\n> all the miners to include that particular transaction. Such mechanism will\n> effectively give a handicap to every miner who includes \"mined\" transaction\n> into next block, increasing probability of him getting block reward.\n>\n> *Problems and motivation*\n>\n> This document will address the issue of a continuous DDoS attack targeting\n> the Bitcoin network, e.g. full nodes mempools constantly being overflowed\n> with transactions carrying small value reduce system primary ability to\n> transfer value (and hence making it perfect store of value). Valid\n> transactions are cheap to create (in the sense of computational effort\n> required) and no adequate mechanism exist to make transaction total value\n> increase probably of its confirmation by the network.\n>\n> Currently, miners decide which transactions to include in blocks because\n> it's them who are securing Bitcoin network providing proof-of-work\n> certificates stored inside every block header. Miners have to store the\n> whole blockchain at all times, so one of the costs is storage which grows\n> linearly with the transaction size (blockchain size as well). Another cost\n> is network bandwidth which depends directly on the size of data to be\n> communicated over.\n>\n> The only incentive a person who wants to transfer his bitcoins is allowed\n> to use is setting of transaction fee, that is going directly to the miner.\n> This solution probably was intended to utilize free market (as implied by\n> Satoshi introducing sequence numbers) to determine appropriate fees, but\n> that is obviously not the case, in the current bitcoin network operating in\n> full block capacity mode. This fee market deviates significantly from a\n> free market premise (also attempts being made to make it closer, e.g. in\n> BIP125 where Replace-By-Fee signaling is supposed to help in replacing\n> \"stuck\" transactions with noncompetitive fee).\n>\n> Currently, bitcoin network is susceptible to the DDoS attack of a kind.\n> Adversary creating and translating into the network a lot of transactions\n> carrying small value (e.g. only miners fee), will be able to impair the\n> ability to transfer value for everyone in the world, should he has enough\n> money to pay the fees. Miners would continue to work providing security for\n> the network and new blocks will consist of transaction transferring\n> negligible value. It's a major drawback because the cost of such attack\n> doesn't grow asymmetrically with the cost of BTC asset.\n>\n> *Proposed solution*\n>\n> So how do we incentivize all miners to include our transaction carrying a\n> lot of value in the next block? The only thing a miner supposed to do to\n> get a reward is to produce Hashcash proof-of-work, thus providing\n> cryptographic security guarantees for the whole Bitcoin blockchain. What if\n> including our transaction in a block would reduce effort requirements for\n> the miner produce valid block?\n>\n> We could do so by extending the concept of proof-of-work, in such a way\n> that we do not sacrifice security at all. Here are both descriptions\n> proof-of-work as-is and to-be:\n>\n> Standart proof-of-work: hash(previous block hash + current block target +\n> current block metadata + current block transactions) < target\n>\n> Decentralized proof-of-work: hash(previous block hash + current block\n> target + current block metadata + current block transactions) - sum( FFFF -\n> hash( previous block hash + raw_tx ) ) < target\n>\n> It is possible to imagine completely mining agnostic proof-of-work, for\n> example, the following PoW would do:\n>\n> Distributed (mining-agnostic) proof-of-work: sum( FFFF - hash( previous\n> block hash + current block target + current block metadata + signed_tx ) )\n> < target\n>\n> Described protocol change could be implemented as user activated soft-fork\n> (described in BIP148), introducing new blocks with the modified\n> proof-of-work concept.\n>\n> *Economic reasoning*\n>\n> An adversary whose goal is to prevent the network from transferring value\n> will have to compete with good users hash rate using same equipment good\n> miners will use. And it's far more complicated than competing with others\n> using the money to pay transaction fees.\n>\n> In order to investigate probable consequences of protocol upgrade and\n> stability of implied economical equilibrium, we need an adequate game\n> theoretical model. Such model and numerical simulation results should be\n> obtained and studied before any protocol change could be considered by the\n> community.\n>\n> To me it seems like a win-win solution for everyone owning BTC:\n>\n> Miners benefit: as the result DDoS attack will be stopped, Bitcoin becomes\n> perfect store-of-value finally. Political decentralization of hash rate\n> will be incentivized as mining equipment becomes relevant to every user.\n> Users benefit: miners will have direct incentives to include transactions\n> deemed important by their sender and supported by some amount of\n> proof-of-work.\n>\n> Sincerely yours, Ilya Eriklintsev.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170622/234987bf/attachment-0001.html>"
            },
            {
                "author": "Ilya Eriklintsev",
                "date": "2017-06-22T13:41:55",
                "message_text_only": "Thank you, Conrad, for the feedback and I think I can see your points\nclearly, but I would disagree that decentralised proof-of-work doesn't\nchange game rules drastically.\nYou are correct about proof-of-work market splitting into\n\"transaction-miners\" and \"blockchain-miners\", but this is not just another\nway to pay the fees, it's actually completely different mechanism. Here are\nsome arguments that might be able to convince you or at least to question\nyour premises:\n\n1. Since bitcoin mining is a game in which winner takes it all, modified\nproof-of-work will introduce a new tradeoff for the miners: either you\ncollect more fees (increasing risk of losing reward) or you collect more\nproof-of-work (increasing reward win probability). This will create the\nmissing economic link between transaction fees (BTC) and proof-of-work\nsecurity costs (Hashcash PoW), creating the secondary market of\ntransaction-mining-capable hash power / BTC. It feels like some new game\ndynamics arise in this setting, but I haven't run any numerical simulations\nyet, though I'm going to do so.\n\n2. Why is it possible to stop spam and DDoS of the network? The reason is\nthat to generate transaction proof-of-work user have to spend some physical\ntime (not money). After the user found out previous block hash he has two\nchoices: either to start doing some work (probably with the help of\ntransaction miners AND money) or instantly adjust fee at every moment (only\nmoney). This adds a new signalling mechanism alongside standard fee market,\nwhich will make it possible for miners to filter and do not propagate\ntransactions with PoW less than some handicap value (of course they can\nalways agree on some whitelist of non-spammers), thus preventing abuse of\nspammer transactions with competitive fees to delay valuable and important\ntransfers of BTC.\n\nHope I addressed all the issues you mentioned.\n\n\nOn 22 June 2017 at 15:02, Conrad Burchert <conrad.burchert at googlemail.com>\nwrote:\n\n> As soon as there is competition for block space, people will likely\n> outsource creating the proof of work on the transaction to \"transaction\n> miners\". This would likely result in giving a fee to those transaction\n> miners. If those are the same miners as those mining the block, we are back\n> at the current system.\n>\n> Put in other words: We are already doing this, you are paying the miner\n> for a piece of the proof of work of the block. If you want to mine instead\n> of paying, just mine a block and use a part of the block reward to pay the\n> fee for another transaction.\n>\n> This also does not work to prevent spam. Instead of paying the transaction\n> fee you can just pay someone to mine proof-of-work on your spam\n> transactions, resulting in roughly the same cost. There is no reason a\n> normal user would be better in doing this than a spammer, likely it is the\n> other way around as the spammer is a more reliable customer for a miner.\n>\n> 2017-06-21 11:55 GMT+02:00 Ilya Eriklintsev via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org>:\n>\n>> Hello everyone,\n>>\n>> recently I have got an idea that in my opinion will improve bitcoin\n>> network, making it better store-of-value for growing cyberspace and\n>> cryptoeconomy. Sorry for longread below and thank you for your time.\n>>\n>> *Decentralized proof-of-work and DDoS resistance for Bitcoin*\n>>\n>> *Abstract*\n>>\n>> By introducing some new block validation rules it is possible to make\n>> Bitcoin network more secure, decentralized and DDoS resistant. The idea is\n>> to modify simple proof-of-work puzzle in such a way that user transactions\n>> could be hardened with the same proof-of-work algorithm thus incentivising\n>> all the miners to include that particular transaction. Such mechanism will\n>> effectively give a handicap to every miner who includes \"mined\" transaction\n>> into next block, increasing probability of him getting block reward.\n>>\n>> *Problems and motivation*\n>>\n>> This document will address the issue of a continuous DDoS attack\n>> targeting the Bitcoin network, e.g. full nodes mempools constantly being\n>> overflowed with transactions carrying small value reduce system primary\n>> ability to transfer value (and hence making it perfect store of value).\n>> Valid transactions are cheap to create (in the sense of computational\n>> effort required) and no adequate mechanism exist to make transaction total\n>> value increase probably of its confirmation by the network.\n>>\n>> Currently, miners decide which transactions to include in blocks because\n>> it's them who are securing Bitcoin network providing proof-of-work\n>> certificates stored inside every block header. Miners have to store the\n>> whole blockchain at all times, so one of the costs is storage which grows\n>> linearly with the transaction size (blockchain size as well). Another cost\n>> is network bandwidth which depends directly on the size of data to be\n>> communicated over.\n>>\n>> The only incentive a person who wants to transfer his bitcoins is allowed\n>> to use is setting of transaction fee, that is going directly to the miner.\n>> This solution probably was intended to utilize free market (as implied by\n>> Satoshi introducing sequence numbers) to determine appropriate fees, but\n>> that is obviously not the case, in the current bitcoin network operating in\n>> full block capacity mode. This fee market deviates significantly from a\n>> free market premise (also attempts being made to make it closer, e.g. in\n>> BIP125 where Replace-By-Fee signaling is supposed to help in replacing\n>> \"stuck\" transactions with noncompetitive fee).\n>>\n>> Currently, bitcoin network is susceptible to the DDoS attack of a kind.\n>> Adversary creating and translating into the network a lot of transactions\n>> carrying small value (e.g. only miners fee), will be able to impair the\n>> ability to transfer value for everyone in the world, should he has enough\n>> money to pay the fees. Miners would continue to work providing security for\n>> the network and new blocks will consist of transaction transferring\n>> negligible value. It's a major drawback because the cost of such attack\n>> doesn't grow asymmetrically with the cost of BTC asset.\n>>\n>> *Proposed solution*\n>>\n>> So how do we incentivize all miners to include our transaction carrying a\n>> lot of value in the next block? The only thing a miner supposed to do to\n>> get a reward is to produce Hashcash proof-of-work, thus providing\n>> cryptographic security guarantees for the whole Bitcoin blockchain. What if\n>> including our transaction in a block would reduce effort requirements for\n>> the miner produce valid block?\n>>\n>> We could do so by extending the concept of proof-of-work, in such a way\n>> that we do not sacrifice security at all. Here are both descriptions\n>> proof-of-work as-is and to-be:\n>>\n>> Standart proof-of-work: hash(previous block hash + current block target +\n>> current block metadata + current block transactions) < target\n>>\n>> Decentralized proof-of-work: hash(previous block hash + current block\n>> target + current block metadata + current block transactions) - sum( FFFF -\n>> hash( previous block hash + raw_tx ) ) < target\n>>\n>> It is possible to imagine completely mining agnostic proof-of-work, for\n>> example, the following PoW would do:\n>>\n>> Distributed (mining-agnostic) proof-of-work: sum( FFFF - hash( previous\n>> block hash + current block target + current block metadata + signed_tx ) )\n>> < target\n>>\n>> Described protocol change could be implemented as user activated\n>> soft-fork (described in BIP148), introducing new blocks with the modified\n>> proof-of-work concept.\n>>\n>> *Economic reasoning*\n>>\n>> An adversary whose goal is to prevent the network from transferring value\n>> will have to compete with good users hash rate using same equipment good\n>> miners will use. And it's far more complicated than competing with others\n>> using the money to pay transaction fees.\n>>\n>> In order to investigate probable consequences of protocol upgrade and\n>> stability of implied economical equilibrium, we need an adequate game\n>> theoretical model. Such model and numerical simulation results should be\n>> obtained and studied before any protocol change could be considered by the\n>> community.\n>>\n>> To me it seems like a win-win solution for everyone owning BTC:\n>>\n>> Miners benefit: as the result DDoS attack will be stopped, Bitcoin\n>> becomes perfect store-of-value finally. Political decentralization of hash\n>> rate will be incentivized as mining equipment becomes relevant to every\n>> user.\n>> Users benefit: miners will have direct incentives to include transactions\n>> deemed important by their sender and supported by some amount of\n>> proof-of-work.\n>>\n>> Sincerely yours, Ilya Eriklintsev.\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170622/43b6ace6/attachment-0001.html>"
            },
            {
                "author": "John Hardy",
                "date": "2017-06-22T13:47:14",
                "message_text_only": "Hi Ilya,\n\n\nThis proposal wouldn't work because bad actors can perform PoW just as cheaply as any other participant.\n\n\nThe transaction fee already acts as a mechanism to prevent spam. It is not a problem to have a lot of low value transactions in the mempool as thresholds can easily be set for them to be disregarded/expire - a 300MB  maxmempool size by default eliminates any real 'DDOS' risk. Spam only really becomes an issue when it enters the blockchain. If a spammer is willing to pay the tx fee to spam, they'd be willing to pay the PoW.\n\n\nThe only actors who can spam the blockchain at zero cost are the miners themselves (beyond the opportunity cost of including genuine fee paying transactions). They can even do it without their transactions ever hitting the mempool or including a fee, though this behaviour would be easy to spot.\n\n\nIf miners are colluding to spam the mempool or blocks in order to increase the average transaction cost overall there is little that can be done as the network relies on 51% of hashpower being honest. A miner creating spam transactions that enter the mempool has the risk that another miner would include it in a block and they would incur an economic cost if this happened.\n\n\nI had an idea for a dynamic blocksize that required miners to pay a percentage of the transaction fees to the next mined block. Here is a link: https://lists.linuxfoundation.org/pipermail/bitcoin-discuss/2017-January/000123.html\n\n\nIf it was established that miners spamming blocks with transactions was an issue, this could be used as a disincentive as it means the cost for doing so becomes non-zero.\n\n\nRegards,\n\nJohn Hardy\njohn at seebitcoin.com\n\n________________________________\nFrom: bitcoin-dev-bounces at lists.linuxfoundation.org <bitcoin-dev-bounces at lists.linuxfoundation.org> on behalf of Ilya Eriklintsev via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nSent: Wednesday, June 21, 2017 9:55 AM\nTo: bitcoin-dev at lists.linuxfoundation.org\nSubject: [bitcoin-dev] BIP Idea : DDoS resistance via decentrilized proof-of-work\n\nHello everyone,\n\nrecently I have got an idea that in my opinion will improve bitcoin network, making it better store-of-value for growing cyberspace and cryptoeconomy. Sorry for longread below and thank you for your time.\n\nDecentralized proof-of-work and DDoS resistance for Bitcoin\n\nAbstract\n\nBy introducing some new block validation rules it is possible to make Bitcoin network more secure, decentralized and DDoS resistant. The idea is to modify simple proof-of-work puzzle in such a way that user transactions could be hardened with the same proof-of-work algorithm thus incentivising all the miners to include that particular transaction. Such mechanism will effectively give a handicap to every miner who includes \"mined\" transaction into next block, increasing probability of him getting block reward.\n\nProblems and motivation\n\nThis document will address the issue of a continuous DDoS attack targeting the Bitcoin network, e.g. full nodes mempools constantly being overflowed with transactions carrying small value reduce system primary ability to transfer value (and hence making it perfect store of value). Valid transactions are cheap to create (in the sense of computational effort required) and no adequate mechanism exist to make transaction total value increase probably of its confirmation by the network.\n\nCurrently, miners decide which transactions to include in blocks because it's them who are securing Bitcoin network providing proof-of-work certificates stored inside every block header. Miners have to store the whole blockchain at all times, so one of the costs is storage which grows linearly with the transaction size (blockchain size as well). Another cost is network bandwidth which depends directly on the size of data to be communicated over.\n\nThe only incentive a person who wants to transfer his bitcoins is allowed to use is setting of transaction fee, that is going directly to the miner. This solution probably was intended to utilize free market (as implied by Satoshi introducing sequence numbers) to determine appropriate fees, but that is obviously not the case, in the current bitcoin network operating in full block capacity mode. This fee market deviates significantly from a free market premise (also attempts being made to make it closer, e.g. in BIP125 where Replace-By-Fee signaling is supposed to help in replacing \"stuck\" transactions with noncompetitive fee).\n\nCurrently, bitcoin network is susceptible to the DDoS attack of a kind. Adversary creating and translating into the network a lot of transactions carrying small value (e.g. only miners fee), will be able to impair the ability to transfer value for everyone in the world, should he has enough money to pay the fees. Miners would continue to work providing security for the network and new blocks will consist of transaction transferring negligible value. It's a major drawback because the cost of such attack doesn't grow asymmetrically with the cost of BTC asset.\n\nProposed solution\n\nSo how do we incentivize all miners to include our transaction carrying a lot of value in the next block? The only thing a miner supposed to do to get a reward is to produce Hashcash proof-of-work, thus providing cryptographic security guarantees for the whole Bitcoin blockchain. What if including our transaction in a block would reduce effort requirements for the miner produce valid block?\n\nWe could do so by extending the concept of proof-of-work, in such a way that we do not sacrifice security at all. Here are both descriptions proof-of-work as-is and to-be:\n\nStandart proof-of-work: hash(previous block hash + current block target + current block metadata + current block transactions) < target\n\nDecentralized proof-of-work: hash(previous block hash + current block target + current block metadata + current block transactions) - sum( FFFF - hash( previous block hash + raw_tx ) ) < target\n\nIt is possible to imagine completely mining agnostic proof-of-work, for example, the following PoW would do:\n\nDistributed (mining-agnostic) proof-of-work: sum( FFFF - hash( previous block hash + current block target + current block metadata + signed_tx ) ) < target\n\nDescribed protocol change could be implemented as user activated soft-fork (described in BIP148), introducing new blocks with the modified proof-of-work concept.\n\nEconomic reasoning\n\nAn adversary whose goal is to prevent the network from transferring value will have to compete with good users hash rate using same equipment good miners will use. And it's far more complicated than competing with others using the money to pay transaction fees.\n\nIn order to investigate probable consequences of protocol upgrade and stability of implied economical equilibrium, we need an adequate game theoretical model. Such model and numerical simulation results should be obtained and studied before any protocol change could be considered by the community.\n\nTo me it seems like a win-win solution for everyone owning BTC:\n\nMiners benefit: as the result DDoS attack will be stopped, Bitcoin becomes perfect store-of-value finally. Political decentralization of hash rate will be incentivized as mining equipment becomes relevant to every user.\nUsers benefit: miners will have direct incentives to include transactions deemed important by their sender and supported by some amount of proof-of-work.\n\nSincerely yours, Ilya Eriklintsev.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170622/6825dd9b/attachment-0001.html>"
            },
            {
                "author": "Ilya Eriklintsev",
                "date": "2017-06-22T14:18:40",
                "message_text_only": "Thanks a lot for the reply, let me think it over and come up with a proper\nresponse. You and Conrad may be right about the proposal being irrelevant\nto DDoS, so I'll try to come up with the more solid argument supporting my\npoint of view, otherwise, I will refute the proposal myself). At the moment\nI feel like I need to specify game theoretical model and consider all costs\nand incentives in more details. Sincerely yours, Ilya Eriklintsev.\n\nOn 22 June 2017 at 16:47, John Hardy <john at seebitcoin.com> wrote:\n\n> Hi Ilya,\n>\n>\n> This proposal wouldn't work because bad actors can perform PoW just as\n> cheaply as any other participant.\n>\n>\n> The transaction fee already acts as a mechanism to prevent spam. It is not\n> a problem to have a lot of low value transactions in the mempool as\n> thresholds can easily be set for them to be disregarded/expire - a 300MB\n>  maxmempool size by default eliminates any real 'DDOS' risk. Spam only\n> really becomes an issue when it enters the blockchain. If a spammer is\n> willing to pay the tx fee to spam, they'd be willing to pay the PoW.\n>\n>\n> The only actors who can spam the blockchain at zero cost are the miners\n> themselves (beyond the opportunity cost of including genuine fee paying\n> transactions). They can even do it without their transactions ever hitting\n> the mempool or including a fee, though this behaviour would be easy to spot.\n>\n>\n> If miners are colluding to spam the mempool or blocks in order to increase\n> the average transaction cost overall there is little that can be done as\n> the network relies on 51% of hashpower being honest. A miner creating spam\n> transactions that enter the mempool has the risk that another miner would\n> include it in a block and they would incur an economic cost if this\n> happened.\n>\n>\n> I had an idea for a dynamic blocksize that required miners to pay a\n> percentage of the transaction fees to the next mined block. Here is a\n> link: https://lists.linuxfoundation.org/pipermail/\n> bitcoin-discuss/2017-January/000123.html\n>\n>\n> If it was established that miners spamming blocks with transactions was an\n> issue, this could be used as a disincentive as it means the cost for doing\n> so becomes non-zero.\n>\n>\n> Regards,\n>\n> John Hardy\n> john at seebitcoin.com\n>\n> ------------------------------\n> *From:* bitcoin-dev-bounces at lists.linuxfoundation.org <\n> bitcoin-dev-bounces at lists.linuxfoundation.org> on behalf of Ilya\n> Eriklintsev via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n> *Sent:* Wednesday, June 21, 2017 9:55 AM\n> *To:* bitcoin-dev at lists.linuxfoundation.org\n> *Subject:* [bitcoin-dev] BIP Idea : DDoS resistance via decentrilized\n> proof-of-work\n>\n> Hello everyone,\n>\n> recently I have got an idea that in my opinion will improve bitcoin\n> network, making it better store-of-value for growing cyberspace and\n> cryptoeconomy. Sorry for longread below and thank you for your time.\n>\n> *Decentralized proof-of-work and DDoS resistance for Bitcoin*\n>\n> *Abstract*\n>\n> By introducing some new block validation rules it is possible to make\n> Bitcoin network more secure, decentralized and DDoS resistant. The idea is\n> to modify simple proof-of-work puzzle in such a way that user transactions\n> could be hardened with the same proof-of-work algorithm thus incentivising\n> all the miners to include that particular transaction. Such mechanism will\n> effectively give a handicap to every miner who includes \"mined\" transaction\n> into next block, increasing probability of him getting block reward.\n>\n> *Problems and motivation*\n>\n> This document will address the issue of a continuous DDoS attack targeting\n> the Bitcoin network, e.g. full nodes mempools constantly being overflowed\n> with transactions carrying small value reduce system primary ability to\n> transfer value (and hence making it perfect store of value). Valid\n> transactions are cheap to create (in the sense of computational effort\n> required) and no adequate mechanism exist to make transaction total value\n> increase probably of its confirmation by the network.\n>\n> Currently, miners decide which transactions to include in blocks because\n> it's them who are securing Bitcoin network providing proof-of-work\n> certificates stored inside every block header. Miners have to store the\n> whole blockchain at all times, so one of the costs is storage which grows\n> linearly with the transaction size (blockchain size as well). Another cost\n> is network bandwidth which depends directly on the size of data to be\n> communicated over.\n>\n> The only incentive a person who wants to transfer his bitcoins is allowed\n> to use is setting of transaction fee, that is going directly to the miner.\n> This solution probably was intended to utilize free market (as implied by\n> Satoshi introducing sequence numbers) to determine appropriate fees, but\n> that is obviously not the case, in the current bitcoin network operating in\n> full block capacity mode. This fee market deviates significantly from a\n> free market premise (also attempts being made to make it closer, e.g. in\n> BIP125 where Replace-By-Fee signaling is supposed to help in replacing\n> \"stuck\" transactions with noncompetitive fee).\n>\n> Currently, bitcoin network is susceptible to the DDoS attack of a kind.\n> Adversary creating and translating into the network a lot of transactions\n> carrying small value (e.g. only miners fee), will be able to impair the\n> ability to transfer value for everyone in the world, should he has enough\n> money to pay the fees. Miners would continue to work providing security for\n> the network and new blocks will consist of transaction transferring\n> negligible value. It's a major drawback because the cost of such attack\n> doesn't grow asymmetrically with the cost of BTC asset.\n>\n> *Proposed solution*\n>\n> So how do we incentivize all miners to include our transaction carrying a\n> lot of value in the next block? The only thing a miner supposed to do to\n> get a reward is to produce Hashcash proof-of-work, thus providing\n> cryptographic security guarantees for the whole Bitcoin blockchain. What if\n> including our transaction in a block would reduce effort requirements for\n> the miner produce valid block?\n>\n> We could do so by extending the concept of proof-of-work, in such a way\n> that we do not sacrifice security at all. Here are both descriptions\n> proof-of-work as-is and to-be:\n>\n> Standart proof-of-work: hash(previous block hash + current block target +\n> current block metadata + current block transactions) < target\n>\n> Decentralized proof-of-work: hash(previous block hash + current block\n> target + current block metadata + current block transactions) - sum( FFFF -\n> hash( previous block hash + raw_tx ) ) < target\n>\n> It is possible to imagine completely mining agnostic proof-of-work, for\n> example, the following PoW would do:\n>\n> Distributed (mining-agnostic) proof-of-work: sum( FFFF - hash( previous\n> block hash + current block target + current block metadata + signed_tx ) )\n> < target\n>\n> Described protocol change could be implemented as user activated soft-fork\n> (described in BIP148), introducing new blocks with the modified\n> proof-of-work concept.\n>\n> * Economic reasoning*\n>\n> An adversary whose goal is to prevent the network from transferring value\n> will have to compete with good users hash rate using same equipment good\n> miners will use. And it's far more complicated than competing with others\n> using the money to pay transaction fees.\n>\n> In order to investigate probable consequences of protocol upgrade and\n> stability of implied economical equilibrium, we need an adequate game\n> theoretical model. Such model and numerical simulation results should be\n> obtained and studied before any protocol change could be considered by the\n> community.\n>\n> To me it seems like a win-win solution for everyone owning BTC:\n>\n> Miners benefit: as the result DDoS attack will be stopped, Bitcoin becomes\n> perfect store-of-value finally. Political decentralization of hash rate\n> will be incentivized as mining equipment becomes relevant to every user.\n> Users benefit: miners will have direct incentives to include transactions\n> deemed important by their sender and supported by some amount of\n> proof-of-work.\n>\n> Sincerely yours, Ilya Eriklintsev.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170622/381f77b8/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP Idea : DDoS resistance via decentrilized proof-of-work",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Ilya Eriklintsev",
                "Conrad Burchert",
                "John Hardy"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 37774
        }
    },
    {
        "title": "[bitcoin-dev] RFC: Sandboxed Bitcoin network ?",
        "thread_messages": [
            {
                "author": "Gabriel L. Somlo",
                "date": "2017-06-21T13:24:09",
                "message_text_only": "I've been looking for a way to set up a self-contained, sandboxed\nnetwork of Bitcoin peer nodes, for testing and experimentation. Think\na bunch of networked VMs, or containers inside a network simulator\nlike GNS3 (http://gns3.com) or CORE (http://github.com/coreemu/core).\n\nNeither 'main' nor 'test' are feasible, due to hard-coded assumptions\nthey both make about their respective publicly shared blockchain state.\n\nRight now, that leaves 'regtest' -- however, connecting peers together\nover the sandboxed network in regtest mode is a manual process.\n\nAfter some tinkering, the following changes make 'regtest' behave\nsimilarly to \"the real thing\", but inside an isolated sandbox network:\n\ndiff --git a/src/chainparams.cpp b/src/chainparams.cpp\nindex 3b42c5f..4345667 100644\n--- a/src/chainparams.cpp\n+++ b/src/chainparams.cpp\n@@ -275,7 +275,7 @@ public:\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n-        consensus.fPowNoRetargeting = true;\n+        consensus.fPowNoRetargeting = false;\n         consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n@@ -307,11 +307,13 @@ public:\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n \n         vFixedSeeds.clear(); //!< Regtest mode doesn't have any fixed seeds.\n+        vFixedSeeds = std::vector<SeedSpec6>(pnSeed6_regtest, pnSeed6_regtest + ARRAYLEN(pnSeed6_regtest));\n         vSeeds.clear();      //!< Regtest mode doesn't have any DNS seeds.\n+        vSeeds.push_back(CDNSSeedData(\"btc-sandbox.local\", \"seed.btc-sandbox.local\"));\n \n-        fDefaultConsistencyChecks = true;\n+        fDefaultConsistencyChecks = false;\n         fRequireStandard = false;\n-        fMineBlocksOnDemand = true;\n+        fMineBlocksOnDemand = false;\n \n         checkpointData = (CCheckpointData) {\n             {\n\n(not showing the pnSeed6_regtest[] table added to src/chainparamsseeds.h)\n\nAdditionally, for this network to behave realistically, I need peers to\nactually mine blocks on their own once connected together, so I reverted \ncommit 8d1de43 and re-added the 'setgenerate' triggered internal miner.\n\nAt this point, I have a few questions for the Bitcoin dev community:\n\n  1. would a realistic sandbox test mode be interesting enough to make\n     it worth supporting upstream? (happy to submit patches and do\n     revisions if there's interest, and a chance for success)\n\n  2. if yes, support modifying 'regtest' mode accordingly via some sort of\n     command line flags, or rather implement a dedicated 'sandbox' mode\n     with its own CChainParams defaults?\n\n  3. finally, would re-inserting the internal 'setgenerate' miner be a\n     deal breaker?\n\nAny other thoughts and comments also much appreciated!\n\nThanks much,\n--Gabriel"
            }
        ],
        "thread_summary": {
            "title": "RFC: Sandboxed Bitcoin network ?",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Gabriel L. Somlo"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3076
        }
    },
    {
        "title": "[bitcoin-dev] BIP: OP_BRIBVERIFY - the op code needed for Blind Merge Mined drivechains",
        "thread_messages": [
            {
                "author": "Chris Stewart",
                "date": "2017-06-28T00:37:13",
                "message_text_only": "<pre>\n  BIP: <BIP number>\n  Layer: Consensus (Soft fork)\n  Title: OP_BRIBEVERIFY\n  Author: Chris Stewart <chris at suredbits.com>\n  Status: Draft\n  Type: Standards Track\n  Created: 2017-06-27\n</pre>\n\n\n==Abstract==\n\nThis BIP describes a new opcode, OP_BRIBEVERIFY, for the Bitcoin\nscripting system that allows for a user to bribe a miner to include a hash\nin the coinbase transaction's output.\n\n\n==Summary==\n\nBRIBEVERIFY redefines the existing NOP4 opcode. When executed, if the given\ncritical hash is included at the given vout index in the coinbase\ntransaction\nthe script evaluates to true. Otherwise, the script will fail.\n\nThis allows sidechains to be merged mined against\nbitcoin without burdening bitcoin miners with extra resource requirements.\n\n==Motivation==\n\nThe current political climate of bitcoin is extremely contentious. Many\ncommunity members\nhave different visions of what bitcoin is. This op code is meant to\nenable [http://www.truthcoin.info/blog/blind-merged-mining/ Blind Merge\nMining].\nThis enables sidechains in Bitcoin. With OP_BRIBEVERIFY, sidechains miners\ncan\nbribe bitcoin miners to to include their block hash in the bitcoin\nblockchain. If their block\nis included in the coinbase transaction's vout, it is assumed that block is\na mined block on the sidechain.\n\nThis will allow various factions of the community to realize their vision\non their own separate\nblockchain that is interoperable with the bitcoin blockchain. This allows\nthose factions to use\nbitcoin as a 'reserve currency' for their own network.\n\n\n===Commitment Structure===\n\nA new block rule is added which requires that the miner's coinbase reward\nbe at index 0 in the coinbase transaction's output vector.\n\nIt also fixes the witness commitment output to be at index 1 of the\ncoinbase transaction's output vector.\n\nThis is needed so we can reliably tell what vout corresponds to what\ndrivechain. For instance, the mimblewimble sidechain\ncould correspond to index 2 of the vector outputs on the coinbase\ntransaction.\n\nThe commitment is recorded in a <code>scriptPubKey</code> of the coinbase\ntransaction. It must be at least 34 bytes in size\n   1-byte - OP_RETURN (0x6a)\n   1-byte - Push the following 32 bytes (0x20)\n  32-byte - block hash\n\nthe 35th byte and onward have no consensus meaning.\n\n===OP_BRIBEVERIFY op code===\n\nThis op code reads two arguments from the stack. The stack top is expected\nto be a sidechain id for which this user attempting to blind merge mine for.\nThe next element on the stack is expected to be a block hash. This op code\nlooks into the coinbase transaction's output vector at the given index\n(which is derived from the sidechain id) and checks\nto see if the hash in the block matches the hash inside of the BRIBEVERIFY\nprogram. If the hashes match, the OP_BRIBEVERIFY acts as an OP_NOP. If the\ncomparison between the two hashes fail, the script fails.\n\n===BRIBEVERIFY program===\n\nA standard BRIBEVERIFY program has the format:\n  1-byte - Push the following 32 bytes (0x20)\n 32-byte - block hash\n  1 byte - Push operation? (needed if number can't be encoded as OP_0 -\nOP_16)\n  1 byte - sidechain id\n  1 byte - OP_BRIBEVERIFY op code\n\n==Detailed Specification==\n\nRefer to the reference implementation, reproduced below, for the precise\nsemantics and detailed rationale for those semantics.\n\n\n case OP_NOP4:\n {\n    //format: block_hash sidechain_id OP_BRIBEVERIFY\n    if (!(flags & SCRIPT_VERIFY_BRIBEVERIFY)) {\n        // not enabled; treat as a NOP4\n        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n        }\n        break;\n    }\n\n    if (stack.size() < 2)\n        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n\n    const CScriptNum scriptNumSidechainId(stacktop(-1),fRequireMinimal);\n    uint8_t nSidechainId;\n    if (!checker.CheckSidechainId(scriptNumSidechainId,nSidechainId)) {\n        return set_error(serror, SCRIPT_ERR_UNKNOWN_SIDECHAIN);\n    }\n\n    // Check block hash\n    bool fHashCritical =\nchecker.CheckCriticalHash(stacktop(-2),nSidechainId);\n    if (!fHashCritical) {\n        return set_error(serror, SCRIPT_ERR_UNSATISFIED_BRIBE);\n    }\n    break;\n }\n\n\n\nhttps://github.com/Christewart/bitcoin/blob/94b6f33f2278c42d4d8758a3c8ffe2078e4ec933/src/script/interpreter.cpp#L427\n\nhttps://github.com/drivechain-project/bitcoin/pull/13\n\n==Deployment==\n\nTODO\n\n==Credits==\n\nCredit to Paul Sztorc for the original idea of Blind Merge Mined sidechains.\n\nCredit to CryptAxe for writing the foundational layer of software for\ndrivechains so I could implement OP_BRIBEVERIFY.\n\n\n==References==\n\nBlind Merge Mined Sidechains -\nhttp://www.truthcoin.info/blog/blind-merged-mining/\n\nMailing list discussion -\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014408.html\n\n==Copyright==\n\nThis document is placed in the public domain.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170627/bd5730bf/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-06-28T04:07:43",
                "message_text_only": "On Wed, Jun 28, 2017 at 12:37 AM, Chris Stewart via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> A new block rule is added which requires that the miner's coinbase reward be\n> at index 0 in the coinbase transaction's output vector.\n\nThis is an absurd restriction-- I hope it was not your intent to\ndirectly ban P2Pool and probably any other form of decentralized or\nless centralized mining pooling... but thats what doing that does.\n\n> It also fixes the witness commitment output to be at index 1 of the coinbase transaction's output vector.\n\nThis removes important flexibility that was intentionally preserved.\nWhat happens when an additional commitment is needed for bitcoin?\nmust some sidechain be irreparably destroyed? looks like it in  your\nproposal.\n\n> For instance, the mimblewimble sidechain could correspond to index 2 of the vector outputs on the coinbase transaction.\n\nAnd what happens if index 1 isn't present? if index 35 is used must\nthere be 34 dummy outputs?\n\n> This op code looks into the coinbase transaction's output vector at the given index (which is derived from the sidechain id) and checks to see if the hash in the block matches the hash inside of the BRIBEVERIFY progra\n\nThis is not monotone/reorg safe. It means that the output coins (if\nany) are not equivalently fungible with other bitcoins (for, e.g. 100\nblocks) because if there is a reorg this transaction cannot be\nrestored to the chain.  It's also impure and not compatible with\ncaching, which would be unfortunate and slow block propagation."
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-06-28T16:35:32",
                "message_text_only": "Chris/Greg,\n\nFor pending withdrawals (side-to-main transfers), all of the data is\nstored in a teeny tiny extension block which contains all the drivechain\ndata (which we called \"MinerDB\"). And miners were supposed to commit to\nthis and put it in the coinbase in some locate-able place (for example,\nindex 1).\n\nI had assumed that this would go the same for BMM, since it is all\ndrivechain-themed. Thus, all drivechains, and all drivechain-stuff (BMM\nincluded), would claim one output index.\n\nMoreover, while DC claims an output \"slot\", the claim doesn't need to be\npermanent...if the BTC-value of the relevant output is not equal to\nzero, the BMM code could just ignore it. The sidechains would each\nassume that no sidechain block was merged-mined in this period. And DC\nwould assume that no forward progress was made on any side-to-main\ntransfers (ie, that everyone \"abstained\").\n\nPerhaps that addresses Greg's third, first, and second concerns.\n\nI am having some trouble understanding concern #4. I think you mean to\nsay that the output coins of a transaction which is encumbered by OP\nBribeVerify are different from other coins. Indeed they are, and coins\nlocked by OP BribeVerify cannot be moved until their associated\nsidechain header (\"h*\") is ~100 blocks deep in the sidechain (hence the\nearlier conversation about the \"ratchet\", which attempts to measure this).\n\nThe timeline that CryptAxe and I discussed, as I last remember it, is that:\n0. (setup) The sidechain node is run by a briber, and this briber\nconstructs a sidechain block paying himself all the fees. These fees\ntotal q=4 BTC.\n1. Negotiations happen out of bound, between Briber and all miners.\n(still setting up) Each new transaction the Briber makes, he chooses a\ncompletely new h* (which is trivial for him to do by incrementing a\nnonce/anything), and he may as well also fund each of these txns with\nthe same unspent output (owned by him). This prevents a miner from\nannoying the Briber by including many ultimately-invalid transactions.\n2. Miner1 includes h* in the coinbase of today's block thus BMMing a\nsidechain block today, he also includes the transaction he just\nnegotiated with the Briber (call it, \"tx1\"). This tx1 is one where\nBriber pays z=(q-0.001) to an op_bribe script that will eventually pay z\nBTC to Bitcoin address M owned by \"miner1\".\n3. After ~123 blocks, the ratchet (on mainchain) indicates that the\nsidechain headers have advanced sequentially by x=100 places. This\nallows miner1 to spend from tx1 to address M.\n3. OR, after ~250 blocks, the second timing threshold is reached*, and\nthe Briber can spend from his script back to an address he controls\n(also predefined in steps 1 and 2).\n\n\n*This is the dual-threshold time-locking technique that the LN uses to\nprove a negative.\n\nThe second timelock setup is required because it is possible that miner\nwill earnestly BMM a sidechain block, but then reorg such that this\nblock is orphaned out of the longest (side)chain. In this case, the\nBriber doesn't get paid his tx-fees, so he is entitled to a refund.\n\n\nSo, maybe this BIP will need to be edited a little. : ) Nonetheless, I'm\nglad Chris is taking the initiative and doing this work. And I'm sorry\nif the documentation has shifted too much. At the bottom of the spec\nblog post there are some notes, but they probably aren't very helpful.\n\n\n\nOn 6/28/2017 12:07 AM, Gregory Maxwell via bitcoin-dev wrote:\n> On Wed, Jun 28, 2017 at 12:37 AM, Chris Stewart via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> A new block rule is added which requires that the miner's coinbase reward be\n>> at index 0 in the coinbase transaction's output vector.\n> \n> This is an absurd restriction-- I hope it was not your intent to\n> directly ban P2Pool and probably any other form of decentralized or\n> less centralized mining pooling... but thats what doing that does.\n> \n>> It also fixes the witness commitment output to be at index 1 of the coinbase transaction's output vector.\n> \n> This removes important flexibility that was intentionally preserved.\n> What happens when an additional commitment is needed for bitcoin?\n> must some sidechain be irreparably destroyed? looks like it in  your\n> proposal.\n> \n>> For instance, the mimblewimble sidechain could correspond to index 2 of the vector outputs on the coinbase transaction.\n> \n> And what happens if index 1 isn't present? if index 35 is used must\n> there be 34 dummy outputs?\n> \n>> This op code looks into the coinbase transaction's output vector at the given index (which is derived from the sidechain id) and checks to see if the hash in the block matches the hash inside of the BRIBEVERIFY progra\n> \n> This is not monotone/reorg safe. It means that the output coins (if\n> any) are not equivalently fungible with other bitcoins (for, e.g. 100\n> blocks) because if there is a reorg this transaction cannot be\n> restored to the chain.  It's also impure and not compatible with\n> caching, which would be unfortunate and slow block propagation.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2017-06-28T05:20:27",
                "message_text_only": "On Wednesday 28 June 2017 12:37:13 AM Chris Stewart via bitcoin-dev wrote:\n> BRIBEVERIFY redefines the existing NOP4 opcode. When executed, if the given\n> critical hash is included at the given vout index in the coinbase\n> transaction\n> the script evaluates to true. Otherwise, the script will fail.\n> \n> This allows sidechains to be merged mined against\n> bitcoin without burdening bitcoin miners with extra resource requirements.\n\nI don't see how. It seems like the logical outcome from this is \"whoever pays \nthe most gets the next sidechain block\"... That's not particularly useful for \nmerge mining.\n\n> This enables sidechains in Bitcoin.\n\nThere are different kinds of sidechains...\n\nFederated peg: this already works on Bitcoin.\nSPV/SNARK peg: this isn't enabled by your BIP.\nDrivechains: this isn't enabled by your BIP.\n\nHow do you say this enables any kind of sidechain?\n\n> A new block rule is added which requires that the miner's coinbase reward\n> be at index 0 in the coinbase transaction's output vector.\n> \n> It also fixes the witness commitment output to be at index 1 of the\n> coinbase transaction's output vector.\n\nThis is unacceptable, for reasons Greg already pointed out.\n\n> This document is placed in the public domain.\n\nNote that this is not acceptable for BIPs anymore.\n\nhttps://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki#BIP_licensing"
            },
            {
                "author": "Adam Back",
                "date": "2017-06-28T05:28:31",
                "message_text_only": "On 27 June 2017 at 22:20, Luke Dashjr via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Wednesday 28 June 2017 12:37:13 AM Chris Stewart via bitcoin-dev wrote:\n>> BRIBEVERIFY redefines the existing NOP4 opcode. When executed, if the given\n>> critical hash is included at the given vout index in the coinbase\n>> transaction the script evaluates to true. Otherwise, the script will fail.\n>>\n>> This allows sidechains to be merged mined against\n>> bitcoin without burdening bitcoin miners with extra resource requirements.\n>\n> I don't see how. It seems like the logical outcome from this is \"whoever pays\n> the most gets the next sidechain block\"... That's not particularly useful for\n> merge mining.\n\nMaybe that's phrased badly but the point of the \"blind merge mining\"\nis just that the sidechain fees are paid in main chain bitcoin (rather\nthan in sidechain bitcoin).\n\nThat means that a miner who solo mines the main chain could still mine\nthe sidechain by requesting a block-proposal from a trusted sidechain\nfullnode.  The sidechain fullnode would actually pay the mainchain\nfee, and pay itself the sidechain fees as part of the side-chain\nblock-proposal.\n\nThis was viewed as less centralising than forcing miners to directly\nprocess sidechain blocks, which could in principle be bandwidth and\nCPU expensive to process, construct and validate.\n\nAdam"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-06-28T16:43:22",
                "message_text_only": "Hi Luke,\n\nOn 6/28/2017 1:20 AM, Luke Dashjr via bitcoin-dev wrote:\n> On Wednesday 28 June 2017 12:37:13 AM Chris Stewart via bitcoin-dev wrote:\n>> BRIBEVERIFY redefines the existing NOP4 opcode. When executed, if the given\n>> critical hash is included at the given vout index in the coinbase\n>> transaction\n>> the script evaluates to true. Otherwise, the script will fail.\n>>\n>> This allows sidechains to be merged mined against\n>> bitcoin without burdening bitcoin miners with extra resource requirements.\n> \n> I don't see how. It seems like the logical outcome from this is \"whoever pays \n> the most gets the next sidechain block\"... That's not particularly useful for \n> merge mining.\n\nThis is one of the assumptions which BMM exploits, see #4 of:\nhttp://www.truthcoin.info/blog/blind-merged-mining/#focus\n\nThe idea is that this is a safe assumption, because it is already the\ncase today. If we assume that miners revenue-maximize, and further that\nthe \"bidder\" frames his payments in tx-fees, then a willing buyer can\ncontrol the next block by simply filling it with high tx-fee spam.\nAnyone who is willing to pay the most can already 'get' the next\nmainchain block (only, indirectly).\n\n> \n>> This enables sidechains in Bitcoin.\n> \n> There are different kinds of sidechains...\n> \n> Federated peg: this already works on Bitcoin.\n> SPV/SNARK peg: this isn't enabled by your BIP.\n> Drivechains: this isn't enabled by your BIP.\n> \n> How do you say this enables any kind of sidechain?\n\nYes, it is unclear, but Chris' email is specific to blind merged mining\n(BMM), which is kind of a \"sidechains +\". So this does not directly\nenable any sidechains. Instead, it enables the \"+\" part.\n\n--Paul"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2017-06-28T08:26:37",
                "message_text_only": "Good morning.\nI still do not see what this does that cannot be done by:\nOP_RETURN <sidechain-id> <sidechain-block-id>\nA transaction with such an output would allow sidechain-miners to bribe mainchain-miners by paying a transaction fee if the transaction containing this OP_RETURN is included in a block and committed to by a mainchain-miner in the Merkle tree root.\nIt would not require a softfork.\n--\nI have an alternate proposal that sidechains and altcoins that want to do \"blinded\" merge mining can use without a softfork:\n1. Encode a block header as a simple cons-pair, with the head as the block and the tail as the parent cons-pair.\n1.1. This can be encoded as a 32-byte hash of the block including its header, and the 32-byte hash of the parent cons-pair.\n1.2. This is now the actual \"chain\" in the sidecoin/altcoin blockchain.\n2. When a sidechain-node wants to know the consensus, it downloads mainchain-blocks and looks for OP_RETURN's.\n2.1. Starting with its genesis cons-pair hash (equivalent to the empty list) as the current cons-pair, it scans each OP_RETURN transaction.\n2.1.1. If an OP_RETURN is 64-byte and has the parent cons-pair equal to the current cons-pair, look for the side block indicated and confirm its correctness. If correct, update the current cons-pair for the hash of the OP_RETURN data.\n2.2. When reaching the latest mainchain block, the current cons-pair is now the sidecoin/altcoin latest block.\n2.3. Note that if multiple OP_RETURN in a block match the current cons-pair, the first one is considered the correct chain. This property means that the sidechain/altchain can only have a chainsplit if the mainchain has a chainsplit.\n3. When a sidechain-miner wants to create a side-block, it generates a new cons-pair and creates an OP_RETURN transaction for it, paying a mainchain-miner to include it in the next mainchain-block.\n3.1. The sidechain-miner risks that its competitors will outbid it and get its OP_RETURN earlier in a mainchain-block (or earlier in the order of transactions). It can mitigate this risk by updating itself to become a mainchain-miner, it can then keep its OP_RETURN transaction private and put it earlier in the block, ensuring it will \"win\" the sidechain-consensus if it wins the mainchain-consensus.\nRegards,\nZmnSCPxj\n-------- Original Message --------\nSubject: [bitcoin-dev] BIP: OP_BRIBVERIFY - the op code needed for Blind Merge Mined drivechains\nLocal Time: June 28, 2017 8:37 AM\nUTC Time: June 28, 2017 12:37 AM\nFrom: bitcoin-dev at lists.linuxfoundation.org\nTo: Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\n<pre>\nBIP: <BIP number>\nLayer: Consensus (Soft fork)\nTitle: OP_BRIBEVERIFY\nAuthor: Chris Stewart <chris at suredbits.com>\nStatus: Draft\nType: Standards Track\nCreated: 2017-06-27\n</pre>\n==Abstract==\nThis BIP describes a new opcode, OP_BRIBEVERIFY, for the Bitcoin\nscripting system that allows for a user to bribe a miner to include a hash\nin the coinbase transaction's output.\n==Summary==\nBRIBEVERIFY redefines the existing NOP4 opcode. When executed, if the given\ncritical hash is included at the given vout index in the coinbase transaction\nthe script evaluates to true. Otherwise, the script will fail.\nThis allows sidechains to be merged mined against\nbitcoin without burdening bitcoin miners with extra resource requirements.\n==Motivation==\nThe current political climate of bitcoin is extremely contentious. Many community members\nhave different visions of what bitcoin is. This op code is meant to\nenable [http://www.truthcoin.info/blog/blind-merged-mining/ Blind Merge Mining].\nThis enables sidechains in Bitcoin. With OP_BRIBEVERIFY, sidechains miners can\nbribe bitcoin miners to to include their block hash in the bitcoin blockchain. If their block\nis included in the coinbase transaction's vout, it is assumed that block is a mined block on the sidechain.\nThis will allow various factions of the community to realize their vision on their own separate\nblockchain that is interoperable with the bitcoin blockchain. This allows those factions to use\nbitcoin as a 'reserve currency' for their own network.\n===Commitment Structure===\nA new block rule is added which requires that the miner's coinbase reward be at index 0 in the coinbase transaction's output vector.\nIt also fixes the witness commitment output to be at index 1 of the coinbase transaction's output vector.\nThis is needed so we can reliably tell what vout corresponds to what drivechain. For instance, the mimblewimble sidechain\ncould correspond to index 2 of the vector outputs on the coinbase transaction.\nThe commitment is recorded in a <code>scriptPubKey</code> of the coinbase transaction. It must be at least 34 bytes in size\n1-byte - OP_RETURN (0x6a)\n1-byte - Push the following 32 bytes (0x20)\n32-byte - block hash\nthe 35th byte and onward have no consensus meaning.\n===OP_BRIBEVERIFY op code===\nThis op code reads two arguments from the stack. The stack top is expected to be a sidechain id for which this user attempting to blind merge mine for.\nThe next element on the stack is expected to be a block hash. This op code looks into the coinbase transaction's output vector at the given index (which is derived from the sidechain id) and checks\nto see if the hash in the block matches the hash inside of the BRIBEVERIFY program. If the hashes match, the OP_BRIBEVERIFY acts as an OP_NOP. If the\ncomparison between the two hashes fail, the script fails.\n===BRIBEVERIFY program===\nA standard BRIBEVERIFY program has the format:\n1-byte - Push the following 32 bytes (0x20)\n32-byte - block hash\n1 byte - Push operation? (needed if number can't be encoded as OP_0 - OP_16)\n1 byte - sidechain id\n1 byte - OP_BRIBEVERIFY op code\n==Detailed Specification==\nRefer to the reference implementation, reproduced below, for the precise\nsemantics and detailed rationale for those semantics.\ncase OP_NOP4:\n{\n//format: block_hash sidechain_id OP_BRIBEVERIFY\nif (!(flags & SCRIPT_VERIFY_BRIBEVERIFY)) {\n// not enabled; treat as a NOP4\nif (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\nreturn set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n}\nbreak;\n}\nif (stack.size() < 2)\nreturn set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\nconst CScriptNum scriptNumSidechainId(stacktop(-1),fRequireMinimal);\nuint8_t nSidechainId;\nif (!checker.CheckSidechainId(scriptNumSidechainId,nSidechainId)) {\nreturn set_error(serror, SCRIPT_ERR_UNKNOWN_SIDECHAIN);\n}\n// Check block hash\nbool fHashCritical = checker.CheckCriticalHash(stacktop(-2),nSidechainId);\nif (!fHashCritical) {\nreturn set_error(serror, SCRIPT_ERR_UNSATISFIED_BRIBE);\n}\nbreak;\n}\nhttps://github.com/Christewart/bitcoin/blob/94b6f33f2278c42d4d8758a3c8ffe2078e4ec933/src/script/interpreter.cpp#L427\nhttps://github.com/drivechain-project/bitcoin/pull/13\n==Deployment==\nTODO\n==Credits==\nCredit to Paul Sztorc for the original idea of Blind Merge Mined sidechains.\nCredit to CryptAxe for writing the foundational layer of software for drivechains so I could implement OP_BRIBEVERIFY.\n==References==\nBlind Merge Mined Sidechains - http://www.truthcoin.info/blog/blind-merged-mining/\nMailing list discussion - https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014408.html\n==Copyright==\nThis document is placed in the public domain.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170628/ed97475f/attachment.html>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-06-28T22:20:35",
                "message_text_only": "Hi ZmnSCPxj,\n\nIt seems that, in your version, the \"bribers\" would react to the scheme\nin inefficient ways, particularly when the mainchain's tx-fee-rate (ie\nfee per Kb) is low.\n\nIn short, there would be many bribe-attempts (each of which would take\nup space in mainchain blocks), almost all of which would be unsuccessful.\n\nIn turn, miners would likely react to this, and try to improve the state\nof affairs by offering users the privilege of occupying transaction slot\n#2 (ie, the one right after the coinbase). Users would need to trust\nminers for this, which introduces a cost friction which is pure\ndeadweight loss. And, it might be easier for larger/older miners to be\ntrustworthy than smaller/newer ones.\n\nYour way is actually very similar to mine. Mine _forces_ the bribe to be\nin the earliest txn (the coinbase) and to only occur once. Yours doesn't\ndo anything to refund the briber, if the sidechain (but not the\nmainchain) reorganizes (as it can easily do, if an older sidechain\nparent is extended while the mainchain proceeds normally). This creates\nadditional risk.\n\nI think mine is also much more space-efficient. Even if ours each had\nexactly one h* per sidechain per block, it seems that I only require one\nhash to be communicated (plus an indicator byte, and a ~2 byte counter\nfor the ratchet), whereas you require two. Since its overhead per\nsidechain per block, it actually might really add up.\n\nThanks,\nPaul\n\n\n\nOn 6/28/2017 4:26 AM, ZmnSCPxj via bitcoin-dev wrote:\n> Good morning.\n> \n> I still do not see what this does that cannot be done by:\n> \n> OP_RETURN <sidechain-id> <sidechain-block-id>\n> \n> A transaction with such an output would allow sidechain-miners to bribe\n> mainchain-miners by paying a transaction fee if the transaction\n> containing this OP_RETURN is included in a block and committed to by a\n> mainchain-miner in the Merkle tree root.\n> \n> It would not require a softfork.\n> \n> --\n> \n> I have an alternate proposal that sidechains and altcoins that want to\n> do \"blinded\" merge mining can use without a softfork:\n> \n> 1.  Encode a block header as a simple cons-pair, with the head as the\n> block and the tail as the parent cons-pair.\n> 1.1.  This can be encoded as a 32-byte hash of the block including its\n> header, and the 32-byte hash of the parent cons-pair.\n> 1.2.  This is now the actual \"chain\" in the sidecoin/altcoin blockchain.\n> 2.  When a sidechain-node wants to know the consensus, it downloads\n> mainchain-blocks and looks for OP_RETURN's.\n> 2.1.  Starting with its genesis cons-pair hash (equivalent to the empty\n> list) as the current cons-pair, it scans each OP_RETURN transaction.\n> 2.1.1.  If an OP_RETURN is 64-byte and has the parent cons-pair equal to\n> the current cons-pair, look for the side block indicated and confirm its\n> correctness.  If correct, update the current cons-pair for the hash of\n> the OP_RETURN data.\n> 2.2.  When reaching the latest mainchain block, the current cons-pair is\n> now the sidecoin/altcoin latest block.\n> 2.3.  Note that if multiple OP_RETURN in a block match the current\n> cons-pair, the first one is considered the correct chain.  This property\n> means that the sidechain/altchain can only have a chainsplit if the\n> mainchain has a chainsplit.\n> 3.  When a sidechain-miner wants to create a side-block, it generates a\n> new cons-pair and creates an OP_RETURN transaction for it, paying a\n> mainchain-miner to include it in the next mainchain-block.\n> 3.1.  The sidechain-miner risks that its competitors will outbid it and\n> get its OP_RETURN earlier in a mainchain-block (or earlier in the order\n> of transactions).  It can mitigate this risk by updating itself to\n> become a mainchain-miner, it can then keep its OP_RETURN transaction\n> private and put it earlier in the block, ensuring it will \"win\" the\n> sidechain-consensus if it wins the mainchain-consensus.\n> \n> Regards,\n> ZmnSCPxj\n> \n> -------- Original Message --------\n> Subject: [bitcoin-dev] BIP: OP_BRIBVERIFY - the op code needed for Blind\n> Merge Mined drivechains\n> Local Time: June 28, 2017 8:37 AM\n> UTC Time: June 28, 2017 12:37 AM\n> From: bitcoin-dev at lists.linuxfoundation.org\n> To: Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\n> \n> <pre> \n>   BIP: <BIP number>\n>   Layer: Consensus (Soft fork)\n>   Title: OP_BRIBEVERIFY\n>   Author: Chris Stewart <chris at suredbits.com>\n>   Status: Draft\n>   Type: Standards Track\n>   Created: 2017-06-27\n> </pre>\n> \n> \n> ==Abstract==\n> \n> This BIP describes a new opcode, OP_BRIBEVERIFY, for the Bitcoin\n> scripting system that allows for a user to bribe a miner to include a hash\n> in the coinbase transaction's output.\n> \n> \n> ==Summary==\n> \n> BRIBEVERIFY redefines the existing NOP4 opcode. When executed, if the given\n> critical hash is included at the given vout index in the coinbase\n> transaction\n> the script evaluates to true. Otherwise, the script will fail.\n> \n> This allows sidechains to be merged mined against\n> bitcoin without burdening bitcoin miners with extra resource requirements.\n> \n> ==Motivation==\n> \n> The current political climate of bitcoin is extremely contentious. Many\n> community members\n> have different visions of what bitcoin is. This op code is meant to\n> enable [http://www.truthcoin.info/blog/blind-merged-mining/ Blind Merge\n> Mining].\n> This enables sidechains in Bitcoin. With OP_BRIBEVERIFY, sidechains\n> miners can\n> bribe bitcoin miners to to include their block hash in the bitcoin\n> blockchain. If their block\n> is included in the coinbase transaction's vout, it is assumed that block\n> is a mined block on the sidechain.\n> \n> This will allow various factions of the community to realize their\n> vision on their own separate\n> blockchain that is interoperable with the bitcoin blockchain. This\n> allows those factions to use\n> bitcoin as a 'reserve currency' for their own network.\n> \n> \n> ===Commitment Structure===\n> \n> A new block rule is added which requires that the miner's coinbase\n> reward be at index 0 in the coinbase transaction's output vector.\n> \n> It also fixes the witness commitment output to be at index 1 of the\n> coinbase transaction's output vector.\n> \n> This is needed so we can reliably tell what vout corresponds to what\n> drivechain. For instance, the mimblewimble sidechain\n> could correspond to index 2 of the vector outputs on the coinbase\n> transaction.\n> \n> The commitment is recorded in a <code>scriptPubKey</code> of the\n> coinbase transaction. It must be at least 34 bytes in size\n>    1-byte - OP_RETURN (0x6a)\n>    1-byte - Push the following 32 bytes (0x20)\n>   32-byte - block hash\n> \n> the 35th byte and onward have no consensus meaning.\n> \n> ===OP_BRIBEVERIFY op code===\n> \n> This op code reads two arguments from the stack. The stack top is\n> expected to be a sidechain id for which this user attempting to blind\n> merge mine for.\n> The next element on the stack is expected to be a block hash. This op\n> code looks into the coinbase transaction's output vector at the given\n> index (which is derived from the sidechain id) and checks\n> to see if the hash in the block matches the hash inside of the\n> BRIBEVERIFY program. If the hashes match, the OP_BRIBEVERIFY acts as an\n> OP_NOP. If the\n> comparison between the two hashes fail, the script fails.\n> \n> ===BRIBEVERIFY program===\n> \n> A standard BRIBEVERIFY program has the format:\n>   1-byte - Push the following 32 bytes (0x20)\n>  32-byte - block hash\n>   1 byte - Push operation? (needed if number can't be encoded as OP_0 -\n> OP_16)\n>   1 byte - sidechain id\n>   1 byte - OP_BRIBEVERIFY op code\n> \n> ==Detailed Specification==\n> \n> Refer to the reference implementation, reproduced below, for the precise\n> semantics and detailed rationale for those semantics.\n> \n>  \n>  case OP_NOP4:\n>  {\n>     //format: block_hash sidechain_id OP_BRIBEVERIFY\n>     if (!(flags & SCRIPT_VERIFY_BRIBEVERIFY)) {\n>         // not enabled; treat as a NOP4\n>         if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n>             return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n>         }\n>         break;\n>     }\n>    \n>     if (stack.size() < 2)\n>         return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n>  \n>     const CScriptNum scriptNumSidechainId(stacktop(-1),fRequireMinimal);\n>     uint8_t nSidechainId; \n>     if (!checker.CheckSidechainId(scriptNumSidechainId,nSidechainId)) {\n>         return set_error(serror, SCRIPT_ERR_UNKNOWN_SIDECHAIN);\n>     }\n>  \n>     // Check block hash\n>     bool fHashCritical =\n> checker.CheckCriticalHash(stacktop(-2),nSidechainId);\n>     if (!fHashCritical) {\n>         return set_error(serror, SCRIPT_ERR_UNSATISFIED_BRIBE);\n>     }\n>     break;\n>  }\n> \n> \n> \n> https://github.com/Christewart/bitcoin/blob/94b6f33f2278c42d4d8758a3c8ffe2078e4ec933/src/script/interpreter.cpp#L427\n> \n> https://github.com/drivechain-project/bitcoin/pull/13\n> \n> ==Deployment==\n> \n> TODO\n> \n> ==Credits==\n> \n> Credit to Paul Sztorc for the original idea of Blind Merge Mined sidechains.\n> \n> Credit to CryptAxe for writing the foundational layer of software for\n> drivechains so I could implement OP_BRIBEVERIFY.\n> \n> \n> ==References==\n> \n> Blind Merge Mined Sidechains -\n> http://www.truthcoin.info/blog/blind-merged-mining/\n> Mailing list discussion -\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014408.html\n> \n> ==Copyright==\n> \n> This document is placed in the public domain.\n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Russell O'Connor",
                "date": "2017-06-28T22:49:54",
                "message_text_only": "I haven't really been following the drivechain discussion; I have found the\ndocumentation about how drivechains are supposed to work scattered and\ndifficult to follow. So, without advocating for or against this proposal,\nI'd also suggest that adding an opcode is not the best way to implement\nthis bribe.\n\nThe problem I see is that to send a bribe one must first post a transaction\nto a script that uses the OP_BRIBE code that fixes the critical hash (and\nthe sidechain id), and then a second transaction is needed to pay the bribe\nto the miner.\n\nI suggest instead to use a 0 output value with some currently non-standard\nOP_RETURN output script that specifies the critical hash (and the sidechain\nid), similar to ZmnSCPxj's idea.  The difference is that I we would\nsoft-fork a rule that says that such an output is only legal when a miner\nplaces the same critical hash suitably in their coinbase output.\n\nOP_RETURN outputs are prunable from the UTXO set.  The special bribe output\ncan be fixed to 0 value because the bribe will be paid using the\ntransaction's fees.  To perform a bribe, a user creates and signs a\ntransaction containing one (or more) of these special bribe outputs.  The\nfee of this transaction constitutes the bribe, and any change the user has\ncan be sent back to themselves.  This way only a single transaction is\nrequired to make a bribe.  I didn't really understand the bribe refund\nmechanism, but I think the fact that the bribe can be done in a single\ntransaction this way alleviates any need for bribe refunds.\n\nHopefully I have understood the goal of this proposal.\n\n\nOn Wed, Jun 28, 2017 at 6:20 PM, Paul Sztorc via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi ZmnSCPxj,\n>\n> It seems that, in your version, the \"bribers\" would react to the scheme\n> in inefficient ways, particularly when the mainchain's tx-fee-rate (ie\n> fee per Kb) is low.\n>\n> In short, there would be many bribe-attempts (each of which would take\n> up space in mainchain blocks), almost all of which would be unsuccessful.\n>\n> In turn, miners would likely react to this, and try to improve the state\n> of affairs by offering users the privilege of occupying transaction slot\n> #2 (ie, the one right after the coinbase). Users would need to trust\n> miners for this, which introduces a cost friction which is pure\n> deadweight loss. And, it might be easier for larger/older miners to be\n> trustworthy than smaller/newer ones.\n>\n> Your way is actually very similar to mine. Mine _forces_ the bribe to be\n> in the earliest txn (the coinbase) and to only occur once. Yours doesn't\n> do anything to refund the briber, if the sidechain (but not the\n> mainchain) reorganizes (as it can easily do, if an older sidechain\n> parent is extended while the mainchain proceeds normally). This creates\n> additional risk.\n>\n> I think mine is also much more space-efficient. Even if ours each had\n> exactly one h* per sidechain per block, it seems that I only require one\n> hash to be communicated (plus an indicator byte, and a ~2 byte counter\n> for the ratchet), whereas you require two. Since its overhead per\n> sidechain per block, it actually might really add up.\n>\n> Thanks,\n> Paul\n>\n>\n>\n> On 6/28/2017 4:26 AM, ZmnSCPxj via bitcoin-dev wrote:\n> > Good morning.\n> >\n> > I still do not see what this does that cannot be done by:\n> >\n> > OP_RETURN <sidechain-id> <sidechain-block-id>\n> >\n> > A transaction with such an output would allow sidechain-miners to bribe\n> > mainchain-miners by paying a transaction fee if the transaction\n> > containing this OP_RETURN is included in a block and committed to by a\n> > mainchain-miner in the Merkle tree root.\n> >\n> > It would not require a softfork.\n> >\n> > --\n> >\n> > I have an alternate proposal that sidechains and altcoins that want to\n> > do \"blinded\" merge mining can use without a softfork:\n> >\n> > 1.  Encode a block header as a simple cons-pair, with the head as the\n> > block and the tail as the parent cons-pair.\n> > 1.1.  This can be encoded as a 32-byte hash of the block including its\n> > header, and the 32-byte hash of the parent cons-pair.\n> > 1.2.  This is now the actual \"chain\" in the sidecoin/altcoin blockchain.\n> > 2.  When a sidechain-node wants to know the consensus, it downloads\n> > mainchain-blocks and looks for OP_RETURN's.\n> > 2.1.  Starting with its genesis cons-pair hash (equivalent to the empty\n> > list) as the current cons-pair, it scans each OP_RETURN transaction.\n> > 2.1.1.  If an OP_RETURN is 64-byte and has the parent cons-pair equal to\n> > the current cons-pair, look for the side block indicated and confirm its\n> > correctness.  If correct, update the current cons-pair for the hash of\n> > the OP_RETURN data.\n> > 2.2.  When reaching the latest mainchain block, the current cons-pair is\n> > now the sidecoin/altcoin latest block.\n> > 2.3.  Note that if multiple OP_RETURN in a block match the current\n> > cons-pair, the first one is considered the correct chain.  This property\n> > means that the sidechain/altchain can only have a chainsplit if the\n> > mainchain has a chainsplit.\n> > 3.  When a sidechain-miner wants to create a side-block, it generates a\n> > new cons-pair and creates an OP_RETURN transaction for it, paying a\n> > mainchain-miner to include it in the next mainchain-block.\n> > 3.1.  The sidechain-miner risks that its competitors will outbid it and\n> > get its OP_RETURN earlier in a mainchain-block (or earlier in the order\n> > of transactions).  It can mitigate this risk by updating itself to\n> > become a mainchain-miner, it can then keep its OP_RETURN transaction\n> > private and put it earlier in the block, ensuring it will \"win\" the\n> > sidechain-consensus if it wins the mainchain-consensus.\n> >\n> > Regards,\n> > ZmnSCPxj\n> >\n> > -------- Original Message --------\n> > Subject: [bitcoin-dev] BIP: OP_BRIBVERIFY - the op code needed for Blind\n> > Merge Mined drivechains\n> > Local Time: June 28, 2017 8:37 AM\n> > UTC Time: June 28, 2017 12:37 AM\n> > From: bitcoin-dev at lists.linuxfoundation.org\n> > To: Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\n> >\n> > <pre>\n> >   BIP: <BIP number>\n> >   Layer: Consensus (Soft fork)\n> >   Title: OP_BRIBEVERIFY\n> >   Author: Chris Stewart <chris at suredbits.com>\n> >   Status: Draft\n> >   Type: Standards Track\n> >   Created: 2017-06-27\n> > </pre>\n> >\n> >\n> > ==Abstract==\n> >\n> > This BIP describes a new opcode, OP_BRIBEVERIFY, for the Bitcoin\n> > scripting system that allows for a user to bribe a miner to include a\n> hash\n> > in the coinbase transaction's output.\n> >\n> >\n> > ==Summary==\n> >\n> > BRIBEVERIFY redefines the existing NOP4 opcode. When executed, if the\n> given\n> > critical hash is included at the given vout index in the coinbase\n> > transaction\n> > the script evaluates to true. Otherwise, the script will fail.\n> >\n> > This allows sidechains to be merged mined against\n> > bitcoin without burdening bitcoin miners with extra resource\n> requirements.\n> >\n> > ==Motivation==\n> >\n> > The current political climate of bitcoin is extremely contentious. Many\n> > community members\n> > have different visions of what bitcoin is. This op code is meant to\n> > enable [http://www.truthcoin.info/blog/blind-merged-mining/ Blind Merge\n> > Mining].\n> > This enables sidechains in Bitcoin. With OP_BRIBEVERIFY, sidechains\n> > miners can\n> > bribe bitcoin miners to to include their block hash in the bitcoin\n> > blockchain. If their block\n> > is included in the coinbase transaction's vout, it is assumed that block\n> > is a mined block on the sidechain.\n> >\n> > This will allow various factions of the community to realize their\n> > vision on their own separate\n> > blockchain that is interoperable with the bitcoin blockchain. This\n> > allows those factions to use\n> > bitcoin as a 'reserve currency' for their own network.\n> >\n> >\n> > ===Commitment Structure===\n> >\n> > A new block rule is added which requires that the miner's coinbase\n> > reward be at index 0 in the coinbase transaction's output vector.\n> >\n> > It also fixes the witness commitment output to be at index 1 of the\n> > coinbase transaction's output vector.\n> >\n> > This is needed so we can reliably tell what vout corresponds to what\n> > drivechain. For instance, the mimblewimble sidechain\n> > could correspond to index 2 of the vector outputs on the coinbase\n> > transaction.\n> >\n> > The commitment is recorded in a <code>scriptPubKey</code> of the\n> > coinbase transaction. It must be at least 34 bytes in size\n> >    1-byte - OP_RETURN (0x6a)\n> >    1-byte - Push the following 32 bytes (0x20)\n> >   32-byte - block hash\n> >\n> > the 35th byte and onward have no consensus meaning.\n> >\n> > ===OP_BRIBEVERIFY op code===\n> >\n> > This op code reads two arguments from the stack. The stack top is\n> > expected to be a sidechain id for which this user attempting to blind\n> > merge mine for.\n> > The next element on the stack is expected to be a block hash. This op\n> > code looks into the coinbase transaction's output vector at the given\n> > index (which is derived from the sidechain id) and checks\n> > to see if the hash in the block matches the hash inside of the\n> > BRIBEVERIFY program. If the hashes match, the OP_BRIBEVERIFY acts as an\n> > OP_NOP. If the\n> > comparison between the two hashes fail, the script fails.\n> >\n> > ===BRIBEVERIFY program===\n> >\n> > A standard BRIBEVERIFY program has the format:\n> >   1-byte - Push the following 32 bytes (0x20)\n> >  32-byte - block hash\n> >   1 byte - Push operation? (needed if number can't be encoded as OP_0 -\n> > OP_16)\n> >   1 byte - sidechain id\n> >   1 byte - OP_BRIBEVERIFY op code\n> >\n> > ==Detailed Specification==\n> >\n> > Refer to the reference implementation, reproduced below, for the precise\n> > semantics and detailed rationale for those semantics.\n> >\n> >\n> >  case OP_NOP4:\n> >  {\n> >     //format: block_hash sidechain_id OP_BRIBEVERIFY\n> >     if (!(flags & SCRIPT_VERIFY_BRIBEVERIFY)) {\n> >         // not enabled; treat as a NOP4\n> >         if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n> >             return set_error(serror, SCRIPT_ERR_DISCOURAGE_\n> UPGRADABLE_NOPS);\n> >         }\n> >         break;\n> >     }\n> >\n> >     if (stack.size() < 2)\n> >         return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n> >\n> >     const CScriptNum scriptNumSidechainId(stacktop(-1),fRequireMinimal);\n> >     uint8_t nSidechainId;\n> >     if (!checker.CheckSidechainId(scriptNumSidechainId,nSidechainId)) {\n> >         return set_error(serror, SCRIPT_ERR_UNKNOWN_SIDECHAIN);\n> >     }\n> >\n> >     // Check block hash\n> >     bool fHashCritical =\n> > checker.CheckCriticalHash(stacktop(-2),nSidechainId);\n> >     if (!fHashCritical) {\n> >         return set_error(serror, SCRIPT_ERR_UNSATISFIED_BRIBE);\n> >     }\n> >     break;\n> >  }\n> >\n> >\n> >\n> > https://github.com/Christewart/bitcoin/blob/\n> 94b6f33f2278c42d4d8758a3c8ffe2078e4ec933/src/script/interpreter.cpp#L427\n> >\n> > https://github.com/drivechain-project/bitcoin/pull/13\n> >\n> > ==Deployment==\n> >\n> > TODO\n> >\n> > ==Credits==\n> >\n> > Credit to Paul Sztorc for the original idea of Blind Merge Mined\n> sidechains.\n> >\n> > Credit to CryptAxe for writing the foundational layer of software for\n> > drivechains so I could implement OP_BRIBEVERIFY.\n> >\n> >\n> > ==References==\n> >\n> > Blind Merge Mined Sidechains -\n> > http://www.truthcoin.info/blog/blind-merged-mining/\n> > Mailing list discussion -\n> > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/\n> 2017-May/014408.html\n> >\n> > ==Copyright==\n> >\n> > This document is placed in the public domain.\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170628/3ea18112/attachment-0001.html>"
            },
            {
                "author": "Chris Stewart",
                "date": "2017-06-28T23:47:57",
                "message_text_only": "Hi Russell,\n\n>I haven't really been following the drivechain discussion; I have found\nthe documentation about how drivechains are supposed to work scattered and\ndifficult to follow. So, without advocating for or against this proposal,\nI'd also suggest that adding an opcode is not the best way to implement\nthis bribe.\n\nDespite the flaws in this draft BIP, the goal is to start consolidating\nthis information into a more compact format. This BIP is *only*\nmeant to address the Blind Merging Mining Process of drivechains. It does\n*not* address the withdrawal process from drivechain -> bitcoin.\n\n>The problem I see is that to send a bribe one must first post a\ntransaction to a script that uses the OP_BRIBE code that fixes the critical\nhash (and the sidechain id), and then a second transaction is needed to pay\nthe bribe to the miner.\n\nThat is intentional, this allows for a competitive process (like bitcoin\nmining) for a block to be 'found' on the sidechain. The OP_BV output that\nrewards\nthe bitcoin miner the most amount of money should be the one that is\nincluded in the bitcoin blockchain. If I understand your scheme correctly,\nyou are\nassuming the the bitcoin miner is *also* following the sidechain --\nSztorc's scheme does not make this assumption. The *number one goal* of BMM\nis to *minimize* the resource burden on bitcoin miners for mining on a\ndrivechain.\n\nTo gmaxwell/luke-jr,\n\nI agree my commitment scheme is flawed. Thanks for pointing it out. Is\nthere any way we could manipulate a coinbase transaction\ninto spending these OP_BV outputs? According to instagibbs, and AFIACT he\nis right, we cannot have coinbase transactions\nspend any outputs in previous blocks without a hard fork. This is\nunfortunate because it might make more sense for the coinbase transaction\nto spend these OP_BV outputs. We could design the coinbase transaction's\nscriptSig to push the critical hash onto the stack and\nplace an OP_EQUAL on the OP_BV output to verify they were equal.\nIf I understand gmaxwell's concern about 'monotone' (or stateless) blocks\ncorrectly, I *think*\nthis solution might fix that as well.\n\nAnother way we could fix this is by *fixing* the drivechain indices.\nTherefore the mining rewards and witness commitments must\n*not* occupy one of those indices -- but can occupy any other indice in the\ncoinbase output.\nThis would give us future flexibility for committing to new soft forks. For\ninstance, we would say\nthe mining reward must *not* be index 0 of the coinbase transaction, but\ncan occupy index 1 - 256. The same would apply for witness commitments.\n\n-Chris\n\nOn Wed, Jun 28, 2017 at 5:49 PM, Russell O'Connor <roconnor at blockstream.io>\nwrote:\n\n> I haven't really been following the drivechain discussion; I have found\n> the documentation about how drivechains are supposed to work scattered and\n> difficult to follow. So, without advocating for or against this proposal,\n> I'd also suggest that adding an opcode is not the best way to implement\n> this bribe.\n>\n> The problem I see is that to send a bribe one must first post a\n> transaction to a script that uses the OP_BRIBE code that fixes the critical\n> hash (and the sidechain id), and then a second transaction is needed to pay\n> the bribe to the miner.\n>\n> I suggest instead to use a 0 output value with some currently non-standard\n> OP_RETURN output script that specifies the critical hash (and the sidechain\n> id), similar to ZmnSCPxj's idea.  The difference is that I we would\n> soft-fork a rule that says that such an output is only legal when a miner\n> places the same critical hash suitably in their coinbase output.\n>\n> OP_RETURN outputs are prunable from the UTXO set.  The special bribe\n> output can be fixed to 0 value because the bribe will be paid using the\n> transaction's fees.  To perform a bribe, a user creates and signs a\n> transaction containing one (or more) of these special bribe outputs.  The\n> fee of this transaction constitutes the bribe, and any change the user has\n> can be sent back to themselves.  This way only a single transaction is\n> required to make a bribe.  I didn't really understand the bribe refund\n> mechanism, but I think the fact that the bribe can be done in a single\n> transaction this way alleviates any need for bribe refunds.\n>\n> Hopefully I have understood the goal of this proposal.\n>\n>\n> On Wed, Jun 28, 2017 at 6:20 PM, Paul Sztorc via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi ZmnSCPxj,\n>>\n>> It seems that, in your version, the \"bribers\" would react to the scheme\n>> in inefficient ways, particularly when the mainchain's tx-fee-rate (ie\n>> fee per Kb) is low.\n>>\n>> In short, there would be many bribe-attempts (each of which would take\n>> up space in mainchain blocks), almost all of which would be unsuccessful.\n>>\n>> In turn, miners would likely react to this, and try to improve the state\n>> of affairs by offering users the privilege of occupying transaction slot\n>> #2 (ie, the one right after the coinbase). Users would need to trust\n>> miners for this, which introduces a cost friction which is pure\n>> deadweight loss. And, it might be easier for larger/older miners to be\n>> trustworthy than smaller/newer ones.\n>>\n>> Your way is actually very similar to mine. Mine _forces_ the bribe to be\n>> in the earliest txn (the coinbase) and to only occur once. Yours doesn't\n>> do anything to refund the briber, if the sidechain (but not the\n>> mainchain) reorganizes (as it can easily do, if an older sidechain\n>> parent is extended while the mainchain proceeds normally). This creates\n>> additional risk.\n>>\n>> I think mine is also much more space-efficient. Even if ours each had\n>> exactly one h* per sidechain per block, it seems that I only require one\n>> hash to be communicated (plus an indicator byte, and a ~2 byte counter\n>> for the ratchet), whereas you require two. Since its overhead per\n>> sidechain per block, it actually might really add up.\n>>\n>> Thanks,\n>> Paul\n>>\n>>\n>>\n>> On 6/28/2017 4:26 AM, ZmnSCPxj via bitcoin-dev wrote:\n>> > Good morning.\n>> >\n>> > I still do not see what this does that cannot be done by:\n>> >\n>> > OP_RETURN <sidechain-id> <sidechain-block-id>\n>> >\n>> > A transaction with such an output would allow sidechain-miners to bribe\n>> > mainchain-miners by paying a transaction fee if the transaction\n>> > containing this OP_RETURN is included in a block and committed to by a\n>> > mainchain-miner in the Merkle tree root.\n>> >\n>> > It would not require a softfork.\n>> >\n>> > --\n>> >\n>> > I have an alternate proposal that sidechains and altcoins that want to\n>> > do \"blinded\" merge mining can use without a softfork:\n>> >\n>> > 1.  Encode a block header as a simple cons-pair, with the head as the\n>> > block and the tail as the parent cons-pair.\n>> > 1.1.  This can be encoded as a 32-byte hash of the block including its\n>> > header, and the 32-byte hash of the parent cons-pair.\n>> > 1.2.  This is now the actual \"chain\" in the sidecoin/altcoin blockchain.\n>> > 2.  When a sidechain-node wants to know the consensus, it downloads\n>> > mainchain-blocks and looks for OP_RETURN's.\n>> > 2.1.  Starting with its genesis cons-pair hash (equivalent to the empty\n>> > list) as the current cons-pair, it scans each OP_RETURN transaction.\n>> > 2.1.1.  If an OP_RETURN is 64-byte and has the parent cons-pair equal to\n>> > the current cons-pair, look for the side block indicated and confirm its\n>> > correctness.  If correct, update the current cons-pair for the hash of\n>> > the OP_RETURN data.\n>> > 2.2.  When reaching the latest mainchain block, the current cons-pair is\n>> > now the sidecoin/altcoin latest block.\n>> > 2.3.  Note that if multiple OP_RETURN in a block match the current\n>> > cons-pair, the first one is considered the correct chain.  This property\n>> > means that the sidechain/altchain can only have a chainsplit if the\n>> > mainchain has a chainsplit.\n>> > 3.  When a sidechain-miner wants to create a side-block, it generates a\n>> > new cons-pair and creates an OP_RETURN transaction for it, paying a\n>> > mainchain-miner to include it in the next mainchain-block.\n>> > 3.1.  The sidechain-miner risks that its competitors will outbid it and\n>> > get its OP_RETURN earlier in a mainchain-block (or earlier in the order\n>> > of transactions).  It can mitigate this risk by updating itself to\n>> > become a mainchain-miner, it can then keep its OP_RETURN transaction\n>> > private and put it earlier in the block, ensuring it will \"win\" the\n>> > sidechain-consensus if it wins the mainchain-consensus.\n>> >\n>> > Regards,\n>> > ZmnSCPxj\n>> >\n>> > -------- Original Message --------\n>> > Subject: [bitcoin-dev] BIP: OP_BRIBVERIFY - the op code needed for Blind\n>> > Merge Mined drivechains\n>> > Local Time: June 28, 2017 8:37 AM\n>> > UTC Time: June 28, 2017 12:37 AM\n>> > From: bitcoin-dev at lists.linuxfoundation.org\n>> > To: Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\n>> >\n>> > <pre>\n>> >   BIP: <BIP number>\n>> >   Layer: Consensus (Soft fork)\n>> >   Title: OP_BRIBEVERIFY\n>> >   Author: Chris Stewart <chris at suredbits.com>\n>> >   Status: Draft\n>> >   Type: Standards Track\n>> >   Created: 2017-06-27\n>> > </pre>\n>> >\n>> >\n>> > ==Abstract==\n>> >\n>> > This BIP describes a new opcode, OP_BRIBEVERIFY, for the Bitcoin\n>> > scripting system that allows for a user to bribe a miner to include a\n>> hash\n>> > in the coinbase transaction's output.\n>> >\n>> >\n>> > ==Summary==\n>> >\n>> > BRIBEVERIFY redefines the existing NOP4 opcode. When executed, if the\n>> given\n>> > critical hash is included at the given vout index in the coinbase\n>> > transaction\n>> > the script evaluates to true. Otherwise, the script will fail.\n>> >\n>> > This allows sidechains to be merged mined against\n>> > bitcoin without burdening bitcoin miners with extra resource\n>> requirements.\n>> >\n>> > ==Motivation==\n>> >\n>> > The current political climate of bitcoin is extremely contentious. Many\n>> > community members\n>> > have different visions of what bitcoin is. This op code is meant to\n>> > enable [http://www.truthcoin.info/blog/blind-merged-mining/ Blind Merge\n>> > Mining].\n>> > This enables sidechains in Bitcoin. With OP_BRIBEVERIFY, sidechains\n>> > miners can\n>> > bribe bitcoin miners to to include their block hash in the bitcoin\n>> > blockchain. If their block\n>> > is included in the coinbase transaction's vout, it is assumed that block\n>> > is a mined block on the sidechain.\n>> >\n>> > This will allow various factions of the community to realize their\n>> > vision on their own separate\n>> > blockchain that is interoperable with the bitcoin blockchain. This\n>> > allows those factions to use\n>> > bitcoin as a 'reserve currency' for their own network.\n>> >\n>> >\n>> > ===Commitment Structure===\n>> >\n>> > A new block rule is added which requires that the miner's coinbase\n>> > reward be at index 0 in the coinbase transaction's output vector.\n>> >\n>> > It also fixes the witness commitment output to be at index 1 of the\n>> > coinbase transaction's output vector.\n>> >\n>> > This is needed so we can reliably tell what vout corresponds to what\n>> > drivechain. For instance, the mimblewimble sidechain\n>> > could correspond to index 2 of the vector outputs on the coinbase\n>> > transaction.\n>> >\n>> > The commitment is recorded in a <code>scriptPubKey</code> of the\n>> > coinbase transaction. It must be at least 34 bytes in size\n>> >    1-byte - OP_RETURN (0x6a)\n>> >    1-byte - Push the following 32 bytes (0x20)\n>> >   32-byte - block hash\n>> >\n>> > the 35th byte and onward have no consensus meaning.\n>> >\n>> > ===OP_BRIBEVERIFY op code===\n>> >\n>> > This op code reads two arguments from the stack. The stack top is\n>> > expected to be a sidechain id for which this user attempting to blind\n>> > merge mine for.\n>> > The next element on the stack is expected to be a block hash. This op\n>> > code looks into the coinbase transaction's output vector at the given\n>> > index (which is derived from the sidechain id) and checks\n>> > to see if the hash in the block matches the hash inside of the\n>> > BRIBEVERIFY program. If the hashes match, the OP_BRIBEVERIFY acts as an\n>> > OP_NOP. If the\n>> > comparison between the two hashes fail, the script fails.\n>> >\n>> > ===BRIBEVERIFY program===\n>> >\n>> > A standard BRIBEVERIFY program has the format:\n>> >   1-byte - Push the following 32 bytes (0x20)\n>> >  32-byte - block hash\n>> >   1 byte - Push operation? (needed if number can't be encoded as OP_0 -\n>> > OP_16)\n>> >   1 byte - sidechain id\n>> >   1 byte - OP_BRIBEVERIFY op code\n>> >\n>> > ==Detailed Specification==\n>> >\n>> > Refer to the reference implementation, reproduced below, for the precise\n>> > semantics and detailed rationale for those semantics.\n>> >\n>> >\n>> >  case OP_NOP4:\n>> >  {\n>> >     //format: block_hash sidechain_id OP_BRIBEVERIFY\n>> >     if (!(flags & SCRIPT_VERIFY_BRIBEVERIFY)) {\n>> >         // not enabled; treat as a NOP4\n>> >         if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n>> >             return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADAB\n>> LE_NOPS);\n>> >         }\n>> >         break;\n>> >     }\n>> >\n>> >     if (stack.size() < 2)\n>> >         return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n>> >\n>> >     const CScriptNum scriptNumSidechainId(stacktop(\n>> -1),fRequireMinimal);\n>> >     uint8_t nSidechainId;\n>> >     if (!checker.CheckSidechainId(scriptNumSidechainId,nSidechainId)) {\n>> >         return set_error(serror, SCRIPT_ERR_UNKNOWN_SIDECHAIN);\n>> >     }\n>> >\n>> >     // Check block hash\n>> >     bool fHashCritical =\n>> > checker.CheckCriticalHash(stacktop(-2),nSidechainId);\n>> >     if (!fHashCritical) {\n>> >         return set_error(serror, SCRIPT_ERR_UNSATISFIED_BRIBE);\n>> >     }\n>> >     break;\n>> >  }\n>> >\n>> >\n>> >\n>> > https://github.com/Christewart/bitcoin/blob/94b6f33f2278c42d\n>> 4d8758a3c8ffe2078e4ec933/src/script/interpreter.cpp#L427\n>> >\n>> > https://github.com/drivechain-project/bitcoin/pull/13\n>> >\n>> > ==Deployment==\n>> >\n>> > TODO\n>> >\n>> > ==Credits==\n>> >\n>> > Credit to Paul Sztorc for the original idea of Blind Merge Mined\n>> sidechains.\n>> >\n>> > Credit to CryptAxe for writing the foundational layer of software for\n>> > drivechains so I could implement OP_BRIBEVERIFY.\n>> >\n>> >\n>> > ==References==\n>> >\n>> > Blind Merge Mined Sidechains -\n>> > http://www.truthcoin.info/blog/blind-merged-mining/\n>> > Mailing list discussion -\n>> > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017\n>> -May/014408.html\n>> >\n>> > ==Copyright==\n>> >\n>> > This document is placed in the public domain.\n>> >\n>> >\n>> > _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170628/be436e01/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2017-06-30T04:00:27",
                "message_text_only": "Good Morning Paul,\n>It seems that, in your version, the \"bribers\" would react to the scheme\n>in inefficient ways, particularly when the mainchain\"s tx-fee-rate (ie\n>fee per Kb) is low.\n>\n>In short, there would be many bribe-attempts (each of which would take\n>up space in mainchain blocks), almost all of which would be unsuccessful.\n>\n>In turn, miners would likely react to this, and try to improve the state\n>of affairs by offering users the privilege of occupying transaction slot\n>#2 (ie, the one right after the coinbase). Users would need to trust\n>miners for this, which introduces a cost friction which is pure\n>deadweight loss. And, it might be easier for larger/older miners to be\n>trustworthy than smaller/newer ones.\nI understand.\n>Your way is actually very similar to mine. Mine _forces_ the bribe to be\n>in the earliest txn (the coinbase) and to only occur once. Yours doesn\"t\n>do anything to refund the briber, if the sidechain (but not the\n>mainchain) reorganizes (as it can easily do, if an older sidechain\n>parent is extended while the mainchain proceeds normally). This creates\n>additional risk.\nI don't understand this part. In my scheme, a sidechain cannot reorganize unless the mainchain reorganizes, since the consensus loop only cares about matching the current block; it ignores splits and does not consider them valid.\nBut I suppose you are considering something like the Ethereum mutability feature, which I do not think is something you would want in a sidechain.\n>I think mine is also much more space-efficient. Even if ours each had\n>exactly one h* per sidechain per block, it seems that I only require one\n>hash to be communicated (plus an indicator byte, and a ~2 byte counter\n>for the ratchet), whereas you require two. Since its overhead per\n>sidechain per block, it actually might really add up.\nDo you not provide a single sidechain's h* twice in the block? Once in the coinbase and once in the briber's separate transaction?\nIn my scheme at least there is no indicator byte -- the \"previous block\" hash is the indicator of which sidechain it is extending. From your other emails on this list, it seems the ratchet is for withdrawals from sidechain to mainchain? If so, should it not only appear in only some of the sidechains (the ones which are currently doing some withdrawal?)?\nRegards,\nZmnSCPxj\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170630/48b1263c/attachment.html>"
            },
            {
                "author": "Chris Stewart",
                "date": "2017-06-30T14:12:30",
                "message_text_only": ">I don't understand this part.  In my scheme, a sidechain cannot reorganize\nunless the mainchain reorganizes, since the consensus loop only cares about\nmatching the current block; it ignores splits and does not consider them\nvalid.\n\nMaybe I am misunderstanding you, but isn't this a flaw not a feature? What\nif a attacker pays a large fee to have his *invalid* block hash included in\nthe bitcoin mainchain? Would this block *have* to be included in the\nsidechain's blockchain forever since *it was* included in bitcoin\nblockchain?\n\n>Do you not provide a single sidechain's h* twice in the block?  Once in\nthe coinbase and once in the briber's separate transaction?\n\nYes, my BIP proposal does this.\n\n>In my scheme at least there is no indicator byte -- the \"previous block\"\nhash is the indicator of which sidechain it is extending.  From your other\nemails on this list, it seems the ratchet is for withdrawals from sidechain\nto mainchain?  If so, should it not only appear in only some of the\nsidechains (the ones which are currently doing some withdrawal?)?\n\nMaybe I am missing something here, but why we do *explicitly* commit to the\nprevious block hash? Isn't it implicitly committed to via SHA256(SHA256())?\nIf a drivechain node tries to sync the drivechain from bitcoin's commitment\nheaders, it will invalidate that block since\nthe block hash does not correctly reference the previous block hash. AFAICT\nthere is no need to explicitly specify the previous block hash in the OP_BV\noutput. In general, I don't think we should assume these commitment headers\ndictate the strict ordering of blocks on the sidechain -- only potential\nblocks that\n*might* be valid. To guarantee full validity drivechain nodes will have to\ndownload the full block and figure out if they follow all of the consensus\nrules.\n\nThis is sort of like headers first sync in bitcoin core:\n\nhttps://bitcoin.org/en/developer-guide#headers-first\n\n-Chris\n\nOn Thu, Jun 29, 2017 at 11:00 PM, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n\n> Good Morning Paul,\n>\n> >It seems that, in your version, the \"bribers\" would react to the scheme\n> >in inefficient ways, particularly when the mainchain\"s tx-fee-rate (ie\n> >fee per Kb) is low.\n> >\n> >In short, there would be many bribe-attempts (each of which would take\n> >up space in mainchain blocks), almost all of which would be unsuccessful.\n> >\n> >In turn, miners would likely react to this, and try to improve the state\n> >of affairs by offering users the privilege of occupying transaction slot\n> >#2 (ie, the one right after the coinbase). Users would need to trust\n> >miners for this, which introduces a cost friction which is pure\n> >deadweight loss. And, it might be easier for larger/older miners to be\n> >trustworthy than smaller/newer ones.\n>\n> I understand.\n>\n> >Your way is actually very similar to mine. Mine _forces_ the bribe to be\n> >in the earliest txn (the coinbase) and to only occur once. Yours doesn\"t\n> >do anything to refund the briber, if the sidechain (but not the\n> >mainchain) reorganizes (as it can easily do, if an older sidechain\n> >parent is extended while the mainchain proceeds normally). This creates\n> >additional risk.\n>\n> I don't understand this part.  In my scheme, a sidechain cannot reorganize\n> unless the mainchain reorganizes, since the consensus loop only cares about\n> matching the current block; it ignores splits and does not consider them\n> valid.\n>\n> But I suppose you are considering something like the Ethereum mutability\n> feature, which I do not think is something you would want in a sidechain.\n>\n> >I think mine is also much more space-efficient. Even if ours each had\n> >exactly one h* per sidechain per block, it seems that I only require one\n> >hash to be communicated (plus an indicator byte, and a ~2 byte counter\n> >for the ratchet), whereas you require two. Since its overhead per\n> >sidechain per block, it actually might really add up.\n>\n> Do you not provide a single sidechain's h* twice in the block?  Once in\n> the coinbase and once in the briber's separate transaction?\n>\n> In my scheme at least there is no indicator byte -- the \"previous block\"\n> hash is the indicator of which sidechain it is extending.  From your other\n> emails on this list, it seems the ratchet is for withdrawals from sidechain\n> to mainchain?  If so, should it not only appear in only some of the\n> sidechains (the ones which are currently doing some withdrawal?)?\n>\n>\n> Regards,\n> ZmnSCPxj\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170630/fdacfffe/attachment-0001.html>"
            },
            {
                "author": "CryptAxe",
                "date": "2017-06-30T16:51:34",
                "message_text_only": "To ZmnSCPxj:\n\nI don't understand this part.  In my scheme, a sidechain cannot reorganize\nunless the mainchain reorganizes, since the consensus loop only cares about\nmatching the current block; it ignores splits and does not consider them\nvalid.\n\nBut I suppose you are considering something like the Ethereum mutability\nfeature, which I do not think is something you would want in a sidechain.\n\n\nThe goal was to allow for sidechain reorgs without effecting the mainchain\nat all. With the ratchet system (WIP) the sidechain miners can either move\nthe side chain forward or start a split at some previous sidechain block\nheight. This happens as the main chain moves forward normally.\n\n>From your other emails on this list, it seems the ratchet is for\nwithdrawals from sidechain to mainchain?  ...\n\n\nThe ratchet system is actually what links the h* data from bribes to\nsidechain blocks. h*'s (which are sidechain block hashes) are added to the\nratchet system if they move the sidechain forward or start a split like I\nmentioned before. Then a sidechain can request of their local mainchain\nnode to verify the headers they have downloaded from sidechain peers and\nform the side chain.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170630/9a6557d5/attachment-0001.html>"
            },
            {
                "author": "Russell O'Connor",
                "date": "2017-06-29T01:09:27",
                "message_text_only": "HI Chris,\n\nMy proposal isn't intended to assume that the bitcoin miner is also\nfollowing the sidechain.  In line with my understanding of your proposal,\nI'm only proposing to bribe miners to put particular data into the coinbase\noutput regardless of any semantics that doing so may entail. By my proposed\nsoft-fork rules, only one of these Bribe TXOs can be included per coinbase\nslot (except unless there are identical Bribe TXOs), so there is a\ncompetition of which one of a set of conflicting Bribe TXOs will be\nincluded in the next block.  (That said, the losing set Bribe TXOs can be\nincluded in the later blocks; I don't know what this means semantically for\nsidechains; however, the same thing occurs with your proposal as well.)\n\nOn Wed, Jun 28, 2017 at 7:47 PM, Chris Stewart <chris at suredbits.com> wrote:\n\n> Hi Russell,\n>\n> >I haven't really been following the drivechain discussion; I have found\n> the documentation about how drivechains are supposed to work scattered and\n> difficult to follow. So, without advocating for or against this proposal,\n> I'd also suggest that adding an opcode is not the best way to implement\n> this bribe.\n>\n> Despite the flaws in this draft BIP, the goal is to start consolidating\n> this information into a more compact format. This BIP is *only*\n> meant to address the Blind Merging Mining Process of drivechains. It does\n> *not* address the withdrawal process from drivechain -> bitcoin.\n>\n> >The problem I see is that to send a bribe one must first post a\n> transaction to a script that uses the OP_BRIBE code that fixes the critical\n> hash (and the sidechain id), and then a second transaction is needed to pay\n> the bribe to the miner.\n>\n> That is intentional, this allows for a competitive process (like bitcoin\n> mining) for a block to be 'found' on the sidechain. The OP_BV output that\n> rewards\n> the bitcoin miner the most amount of money should be the one that is\n> included in the bitcoin blockchain. If I understand your scheme correctly,\n> you are\n> assuming the the bitcoin miner is *also* following the sidechain --\n> Sztorc's scheme does not make this assumption. The *number one goal* of BMM\n> is to *minimize* the resource burden on bitcoin miners for mining on a\n> drivechain.\n>\n> To gmaxwell/luke-jr,\n>\n> I agree my commitment scheme is flawed. Thanks for pointing it out. Is\n> there any way we could manipulate a coinbase transaction\n> into spending these OP_BV outputs? According to instagibbs, and AFIACT he\n> is right, we cannot have coinbase transactions\n> spend any outputs in previous blocks without a hard fork. This is\n> unfortunate because it might make more sense for the coinbase transaction\n> to spend these OP_BV outputs. We could design the coinbase transaction's\n> scriptSig to push the critical hash onto the stack and\n> place an OP_EQUAL on the OP_BV output to verify they were equal.\n> If I understand gmaxwell's concern about 'monotone' (or stateless) blocks\n> correctly, I *think*\n> this solution might fix that as well.\n>\n> Another way we could fix this is by *fixing* the drivechain indices.\n> Therefore the mining rewards and witness commitments must\n> *not* occupy one of those indices -- but can occupy any other indice in\n> the coinbase output.\n> This would give us future flexibility for committing to new soft forks.\n> For instance, we would say\n> the mining reward must *not* be index 0 of the coinbase transaction, but\n> can occupy index 1 - 256. The same would apply for witness commitments.\n>\n> -Chris\n>\n> On Wed, Jun 28, 2017 at 5:49 PM, Russell O'Connor <roconnor at blockstream.io\n> > wrote:\n>\n>> I haven't really been following the drivechain discussion; I have found\n>> the documentation about how drivechains are supposed to work scattered and\n>> difficult to follow. So, without advocating for or against this proposal,\n>> I'd also suggest that adding an opcode is not the best way to implement\n>> this bribe.\n>>\n>> The problem I see is that to send a bribe one must first post a\n>> transaction to a script that uses the OP_BRIBE code that fixes the critical\n>> hash (and the sidechain id), and then a second transaction is needed to pay\n>> the bribe to the miner.\n>>\n>> I suggest instead to use a 0 output value with some currently\n>> non-standard OP_RETURN output script that specifies the critical hash (and\n>> the sidechain id), similar to ZmnSCPxj's idea.  The difference is that I we\n>> would soft-fork a rule that says that such an output is only legal when a\n>> miner places the same critical hash suitably in their coinbase output.\n>>\n>> OP_RETURN outputs are prunable from the UTXO set.  The special bribe\n>> output can be fixed to 0 value because the bribe will be paid using the\n>> transaction's fees.  To perform a bribe, a user creates and signs a\n>> transaction containing one (or more) of these special bribe outputs.  The\n>> fee of this transaction constitutes the bribe, and any change the user has\n>> can be sent back to themselves.  This way only a single transaction is\n>> required to make a bribe.  I didn't really understand the bribe refund\n>> mechanism, but I think the fact that the bribe can be done in a single\n>> transaction this way alleviates any need for bribe refunds.\n>>\n>> Hopefully I have understood the goal of this proposal.\n>>\n>>\n>> On Wed, Jun 28, 2017 at 6:20 PM, Paul Sztorc via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> Hi ZmnSCPxj,\n>>>\n>>> It seems that, in your version, the \"bribers\" would react to the scheme\n>>> in inefficient ways, particularly when the mainchain's tx-fee-rate (ie\n>>> fee per Kb) is low.\n>>>\n>>> In short, there would be many bribe-attempts (each of which would take\n>>> up space in mainchain blocks), almost all of which would be unsuccessful.\n>>>\n>>> In turn, miners would likely react to this, and try to improve the state\n>>> of affairs by offering users the privilege of occupying transaction slot\n>>> #2 (ie, the one right after the coinbase). Users would need to trust\n>>> miners for this, which introduces a cost friction which is pure\n>>> deadweight loss. And, it might be easier for larger/older miners to be\n>>> trustworthy than smaller/newer ones.\n>>>\n>>> Your way is actually very similar to mine. Mine _forces_ the bribe to be\n>>> in the earliest txn (the coinbase) and to only occur once. Yours doesn't\n>>> do anything to refund the briber, if the sidechain (but not the\n>>> mainchain) reorganizes (as it can easily do, if an older sidechain\n>>> parent is extended while the mainchain proceeds normally). This creates\n>>> additional risk.\n>>>\n>>> I think mine is also much more space-efficient. Even if ours each had\n>>> exactly one h* per sidechain per block, it seems that I only require one\n>>> hash to be communicated (plus an indicator byte, and a ~2 byte counter\n>>> for the ratchet), whereas you require two. Since its overhead per\n>>> sidechain per block, it actually might really add up.\n>>>\n>>> Thanks,\n>>> Paul\n>>>\n>>>\n>>>\n>>> On 6/28/2017 4:26 AM, ZmnSCPxj via bitcoin-dev wrote:\n>>> > Good morning.\n>>> >\n>>> > I still do not see what this does that cannot be done by:\n>>> >\n>>> > OP_RETURN <sidechain-id> <sidechain-block-id>\n>>> >\n>>> > A transaction with such an output would allow sidechain-miners to bribe\n>>> > mainchain-miners by paying a transaction fee if the transaction\n>>> > containing this OP_RETURN is included in a block and committed to by a\n>>> > mainchain-miner in the Merkle tree root.\n>>> >\n>>> > It would not require a softfork.\n>>> >\n>>> > --\n>>> >\n>>> > I have an alternate proposal that sidechains and altcoins that want to\n>>> > do \"blinded\" merge mining can use without a softfork:\n>>> >\n>>> > 1.  Encode a block header as a simple cons-pair, with the head as the\n>>> > block and the tail as the parent cons-pair.\n>>> > 1.1.  This can be encoded as a 32-byte hash of the block including its\n>>> > header, and the 32-byte hash of the parent cons-pair.\n>>> > 1.2.  This is now the actual \"chain\" in the sidecoin/altcoin\n>>> blockchain.\n>>> > 2.  When a sidechain-node wants to know the consensus, it downloads\n>>> > mainchain-blocks and looks for OP_RETURN's.\n>>> > 2.1.  Starting with its genesis cons-pair hash (equivalent to the empty\n>>> > list) as the current cons-pair, it scans each OP_RETURN transaction.\n>>> > 2.1.1.  If an OP_RETURN is 64-byte and has the parent cons-pair equal\n>>> to\n>>> > the current cons-pair, look for the side block indicated and confirm\n>>> its\n>>> > correctness.  If correct, update the current cons-pair for the hash of\n>>> > the OP_RETURN data.\n>>> > 2.2.  When reaching the latest mainchain block, the current cons-pair\n>>> is\n>>> > now the sidecoin/altcoin latest block.\n>>> > 2.3.  Note that if multiple OP_RETURN in a block match the current\n>>> > cons-pair, the first one is considered the correct chain.  This\n>>> property\n>>> > means that the sidechain/altchain can only have a chainsplit if the\n>>> > mainchain has a chainsplit.\n>>> > 3.  When a sidechain-miner wants to create a side-block, it generates a\n>>> > new cons-pair and creates an OP_RETURN transaction for it, paying a\n>>> > mainchain-miner to include it in the next mainchain-block.\n>>> > 3.1.  The sidechain-miner risks that its competitors will outbid it and\n>>> > get its OP_RETURN earlier in a mainchain-block (or earlier in the order\n>>> > of transactions).  It can mitigate this risk by updating itself to\n>>> > become a mainchain-miner, it can then keep its OP_RETURN transaction\n>>> > private and put it earlier in the block, ensuring it will \"win\" the\n>>> > sidechain-consensus if it wins the mainchain-consensus.\n>>> >\n>>> > Regards,\n>>> > ZmnSCPxj\n>>> >\n>>> > -------- Original Message --------\n>>> > Subject: [bitcoin-dev] BIP: OP_BRIBVERIFY - the op code needed for\n>>> Blind\n>>> > Merge Mined drivechains\n>>> > Local Time: June 28, 2017 8:37 AM\n>>> > UTC Time: June 28, 2017 12:37 AM\n>>> > From: bitcoin-dev at lists.linuxfoundation.org\n>>> > To: Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org\n>>> >\n>>> >\n>>> > <pre>\n>>> >   BIP: <BIP number>\n>>> >   Layer: Consensus (Soft fork)\n>>> >   Title: OP_BRIBEVERIFY\n>>> >   Author: Chris Stewart <chris at suredbits.com>\n>>> >   Status: Draft\n>>> >   Type: Standards Track\n>>> >   Created: 2017-06-27\n>>> > </pre>\n>>> >\n>>> >\n>>> > ==Abstract==\n>>> >\n>>> > This BIP describes a new opcode, OP_BRIBEVERIFY, for the Bitcoin\n>>> > scripting system that allows for a user to bribe a miner to include a\n>>> hash\n>>> > in the coinbase transaction's output.\n>>> >\n>>> >\n>>> > ==Summary==\n>>> >\n>>> > BRIBEVERIFY redefines the existing NOP4 opcode. When executed, if the\n>>> given\n>>> > critical hash is included at the given vout index in the coinbase\n>>> > transaction\n>>> > the script evaluates to true. Otherwise, the script will fail.\n>>> >\n>>> > This allows sidechains to be merged mined against\n>>> > bitcoin without burdening bitcoin miners with extra resource\n>>> requirements.\n>>> >\n>>> > ==Motivation==\n>>> >\n>>> > The current political climate of bitcoin is extremely contentious. Many\n>>> > community members\n>>> > have different visions of what bitcoin is. This op code is meant to\n>>> > enable [http://www.truthcoin.info/blog/blind-merged-mining/ Blind\n>>> Merge\n>>> > Mining].\n>>> > This enables sidechains in Bitcoin. With OP_BRIBEVERIFY, sidechains\n>>> > miners can\n>>> > bribe bitcoin miners to to include their block hash in the bitcoin\n>>> > blockchain. If their block\n>>> > is included in the coinbase transaction's vout, it is assumed that\n>>> block\n>>> > is a mined block on the sidechain.\n>>> >\n>>> > This will allow various factions of the community to realize their\n>>> > vision on their own separate\n>>> > blockchain that is interoperable with the bitcoin blockchain. This\n>>> > allows those factions to use\n>>> > bitcoin as a 'reserve currency' for their own network.\n>>> >\n>>> >\n>>> > ===Commitment Structure===\n>>> >\n>>> > A new block rule is added which requires that the miner's coinbase\n>>> > reward be at index 0 in the coinbase transaction's output vector.\n>>> >\n>>> > It also fixes the witness commitment output to be at index 1 of the\n>>> > coinbase transaction's output vector.\n>>> >\n>>> > This is needed so we can reliably tell what vout corresponds to what\n>>> > drivechain. For instance, the mimblewimble sidechain\n>>> > could correspond to index 2 of the vector outputs on the coinbase\n>>> > transaction.\n>>> >\n>>> > The commitment is recorded in a <code>scriptPubKey</code> of the\n>>> > coinbase transaction. It must be at least 34 bytes in size\n>>> >    1-byte - OP_RETURN (0x6a)\n>>> >    1-byte - Push the following 32 bytes (0x20)\n>>> >   32-byte - block hash\n>>> >\n>>> > the 35th byte and onward have no consensus meaning.\n>>> >\n>>> > ===OP_BRIBEVERIFY op code===\n>>> >\n>>> > This op code reads two arguments from the stack. The stack top is\n>>> > expected to be a sidechain id for which this user attempting to blind\n>>> > merge mine for.\n>>> > The next element on the stack is expected to be a block hash. This op\n>>> > code looks into the coinbase transaction's output vector at the given\n>>> > index (which is derived from the sidechain id) and checks\n>>> > to see if the hash in the block matches the hash inside of the\n>>> > BRIBEVERIFY program. If the hashes match, the OP_BRIBEVERIFY acts as an\n>>> > OP_NOP. If the\n>>> > comparison between the two hashes fail, the script fails.\n>>> >\n>>> > ===BRIBEVERIFY program===\n>>> >\n>>> > A standard BRIBEVERIFY program has the format:\n>>> >   1-byte - Push the following 32 bytes (0x20)\n>>> >  32-byte - block hash\n>>> >   1 byte - Push operation? (needed if number can't be encoded as OP_0 -\n>>> > OP_16)\n>>> >   1 byte - sidechain id\n>>> >   1 byte - OP_BRIBEVERIFY op code\n>>> >\n>>> > ==Detailed Specification==\n>>> >\n>>> > Refer to the reference implementation, reproduced below, for the\n>>> precise\n>>> > semantics and detailed rationale for those semantics.\n>>> >\n>>> >\n>>> >  case OP_NOP4:\n>>> >  {\n>>> >     //format: block_hash sidechain_id OP_BRIBEVERIFY\n>>> >     if (!(flags & SCRIPT_VERIFY_BRIBEVERIFY)) {\n>>> >         // not enabled; treat as a NOP4\n>>> >         if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n>>> >             return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADAB\n>>> LE_NOPS);\n>>> >         }\n>>> >         break;\n>>> >     }\n>>> >\n>>> >     if (stack.size() < 2)\n>>> >         return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n>>> >\n>>> >     const CScriptNum scriptNumSidechainId(stacktop(\n>>> -1),fRequireMinimal);\n>>> >     uint8_t nSidechainId;\n>>> >     if (!checker.CheckSidechainId(scriptNumSidechainId,nSidechainId))\n>>> {\n>>> >         return set_error(serror, SCRIPT_ERR_UNKNOWN_SIDECHAIN);\n>>> >     }\n>>> >\n>>> >     // Check block hash\n>>> >     bool fHashCritical =\n>>> > checker.CheckCriticalHash(stacktop(-2),nSidechainId);\n>>> >     if (!fHashCritical) {\n>>> >         return set_error(serror, SCRIPT_ERR_UNSATISFIED_BRIBE);\n>>> >     }\n>>> >     break;\n>>> >  }\n>>> >\n>>> >\n>>> >\n>>> > https://github.com/Christewart/bitcoin/blob/94b6f33f2278c42d\n>>> 4d8758a3c8ffe2078e4ec933/src/script/interpreter.cpp#L427\n>>> >\n>>> > https://github.com/drivechain-project/bitcoin/pull/13\n>>> >\n>>> > ==Deployment==\n>>> >\n>>> > TODO\n>>> >\n>>> > ==Credits==\n>>> >\n>>> > Credit to Paul Sztorc for the original idea of Blind Merge Mined\n>>> sidechains.\n>>> >\n>>> > Credit to CryptAxe for writing the foundational layer of software for\n>>> > drivechains so I could implement OP_BRIBEVERIFY.\n>>> >\n>>> >\n>>> > ==References==\n>>> >\n>>> > Blind Merge Mined Sidechains -\n>>> > http://www.truthcoin.info/blog/blind-merged-mining/\n>>> > Mailing list discussion -\n>>> > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017\n>>> -May/014408.html\n>>> >\n>>> > ==Copyright==\n>>> >\n>>> > This document is placed in the public domain.\n>>> >\n>>> >\n>>> > _______________________________________________\n>>> > bitcoin-dev mailing list\n>>> > bitcoin-dev at lists.linuxfoundation.org\n>>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>> >\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170628/0f8f4641/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP: OP_BRIBVERIFY - the op code needed for Blind Merge Mined drivechains",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Chris Stewart",
                "CryptAxe",
                "Adam Back",
                "ZmnSCPxj",
                "Russell O'Connor",
                "Gregory Maxwell",
                "Paul Sztorc",
                "Luke Dashjr"
            ],
            "messages_count": 14,
            "total_messages_chars_count": 85551
        }
    },
    {
        "title": "[bitcoin-dev] Replay protection via CHECKSIG",
        "thread_messages": [
            {
                "author": "Anthony Towns",
                "date": "2017-06-28T07:01:33",
                "message_text_only": "Hi,\n\nI thought of a possibly interesting way to prevent transaction replay in\nthe event of a chain split, that seems better to the other approaches\nI've seen. Basically, update OP_CHECKSIG (and MULTISIG and the VERIFY\nvariants, presumably via segwit versioning or using a NOP opcode) so that\nsignatures can optionally specify an additional integer block-height. If\nthis is provided, the message hash is combined with the block hash at\nthe given height, before the signature is created/verified, and therefore\nthe signature becomes invalid if used on a chain that does not have that\nparticular block in its history [0].\n\nIt adds four bytes to a signature that uses the feature [1], along with\na block hash lookup, and some extra sha ops when verifying the signature,\nbut it otherwise seems pretty lightweight, and scales to an arbitrary\nnumber of forks including a pretty fair range of hard forks, as far\nas I can see, without requiring any coordination between any of the\nchains. So I think it's superior to what Johnson Lau proposed in January\n[2] or BIP 115 from last year [3].\n\nThoughts? Has this been proposed before and found wanting already?\n\nCheers,\naj\n\n[0] For consistency, you could use the genesis block hash if the signature\n    doesn't specify a block height, which would lock a given signature to\n    \"bitcoin\" or \"testnet\" or \"litecoin\", which might be beneficial.\n\n[1] Conceivably a little less if you allow \"-5\" to mean \"5 blocks ago\"\n    and miners replace a four byte absolute reference (\"473000\") with a\n    one or two byte relative reference (\"-206\") when grabbing transactions\n    from the mempool to put in the block template.\n\n[2] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-January/013473.html\n\n[3] https://github.com/bitcoin/bips/blob/master/bip-0115.mediawiki"
            }
        ],
        "thread_summary": {
            "title": "Replay protection via CHECKSIG",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Anthony Towns"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1802
        }
    }
]