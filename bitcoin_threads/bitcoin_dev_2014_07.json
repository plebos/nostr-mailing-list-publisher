[
    {
        "title": "[Bitcoin-development] Payment Protocol for Face-to-face Payments",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2014-07-01T08:18:48",
                "message_text_only": ">\n> \u200bHowever it's not ideal at the moment. Basically the main problem is that\n> in the BIP72 there is no way to provide a fallback alternative URI for\n> payment request fetch if client wallet supports BIP70 but doesn't not\n> support fetching over bluetooth or bluetooth connection fails for any\n> reason.\n>\n\nSo the idea here is that the recipient wallet both uploads to the internet\nand exposes the payment request over Bluetooth simultaneously, then let's\nthe sending wallet pick whatever radio layer works best in its current\nconditions?\n\nI think having multiple r= params is reasonable, but the Bluetooth support\nis not specced in any BIP anyway. And if it were to be, people would point\nout the lack of link-layer encryption.\n\nSo this is a bit tricky, overall. Right now I'd say things are kinda half\nbaked: not only is bluetooth not standardised nor encrypted (my fault, I\nprototyped this code during a hackathon), but Bitcoin Wallet doesn't\nproperly implement BIP 72 either. To push this work forward I think we need\nto sit down and do some more spec and implementation work :/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140701/1df7dba9/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-07-01T09:48:44",
                "message_text_only": "On 07/01/2014 10:18 AM, Mike Hearn wrote:\n>     \u200bHowever it's not ideal at the moment. Basically the main problem is\n>     that in the BIP72 there is no way to provide a fallback alternative\n>     URI for payment request fetch if client wallet supports BIP70 but\n>     doesn't not support fetching over bluetooth or bluetooth connection\n>     fails for any reason. \n\nI think the way to go here is using multiple r= parameters.\n\n> So the idea here is that the recipient wallet both uploads to the\n> internet and exposes the payment request over Bluetooth simultaneously,\n> then let's the sending wallet pick whatever radio layer works best in\n> its current conditions?\n\nEither that, or just use the other ones as a fallback. Currently,\nBitcoin Wallet just falls back to BIP21 if fetching the PR via the r=\nURL fails.\n\n> I think having multiple r= params is reasonable, but the Bluetooth\n> support is not specced in any BIP anyway. And if it were to be, people\n> would point out the lack of link-layer encryption.\n\nIts \"specced\" in code and implemented by several parties. I think its\nclear that link-layer encryption has to be an add-on to the current\nunencrypted connection, just like HTTPS is on top of HTTP. Anyway,\nthat's unrelated to the question of how to provide fallback URLs.\n\nOne more thought: We have a similar problem with the BIP70 payment URL.\nIt doesn't allow for fallbacks either. I brought this issue up in the\ndiscussion phase of BIP70, but it was dismissed I think because of\n\"let's not get too complex for the first version\". The fallback here is\nto send the transaction via the P2P network.\n\n(I think BIP70 via P2P radio will get used more often in future. I plan\nto look into Bluetooth 4 LE as soon as I have devices and wanted to try\nWIFI Direct again also. I hope we can skip BIP72 for both of those, but\nlets see.)"
            },
            {
                "author": "Michael Wozniak",
                "date": "2014-07-01T10:42:33",
                "message_text_only": "I think it makes more sense to not add a duplicate parameter.  Current implementations will break if multiple r parameters are used (either reject the URI completely, or do something undefined).  If a new parameter is used, then the current implementations will just ignore it if they don\u2019t support it.\n\n-\nMichael Wozniak\n\nOn Jul 1, 2014, at 5:48 AM, Andreas Schildbach <andreas at schildbach.de> wrote:\n\n> On 07/01/2014 10:18 AM, Mike Hearn wrote:\n>>    \u200bHowever it's not ideal at the moment. Basically the main problem is\n>>    that in the BIP72 there is no way to provide a fallback alternative\n>>    URI for payment request fetch if client wallet supports BIP70 but\n>>    doesn't not support fetching over bluetooth or bluetooth connection\n>>    fails for any reason. \n> \n> I think the way to go here is using multiple r= parameters.\n> \n>> So the idea here is that the recipient wallet both uploads to the\n>> internet and exposes the payment request over Bluetooth simultaneously,\n>> then let's the sending wallet pick whatever radio layer works best in\n>> its current conditions?\n> \n> Either that, or just use the other ones as a fallback. Currently,\n> Bitcoin Wallet just falls back to BIP21 if fetching the PR via the r=\n> URL fails.\n> \n>> I think having multiple r= params is reasonable, but the Bluetooth\n>> support is not specced in any BIP anyway. And if it were to be, people\n>> would point out the lack of link-layer encryption.\n> \n> Its \"specced\" in code and implemented by several parties. I think its\n> clear that link-layer encryption has to be an add-on to the current\n> unencrypted connection, just like HTTPS is on top of HTTP. Anyway,\n> that's unrelated to the question of how to provide fallback URLs.\n> \n> One more thought: We have a similar problem with the BIP70 payment URL.\n> It doesn't allow for fallbacks either. I brought this issue up in the\n> discussion phase of BIP70, but it was dismissed I think because of\n> \"let's not get too complex for the first version\". The fallback here is\n> to send the transaction via the P2P network.\n> \n> (I think BIP70 via P2P radio will get used more often in future. I plan\n> to look into Bluetooth 4 LE as soon as I have devices and wanted to try\n> WIFI Direct again also. I hope we can skip BIP72 for both of those, but\n> lets see.)\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Open source business process management suite built on Java and Eclipse\n> Turn processes into business applications with Bonita BPM Community Edition\n> Quickly connect people, data, and systems into organized workflows\n> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n> http://p.sf.net/sfu/Bonitasoft\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Alex Kotenko",
                "date": "2014-07-01T13:03:52",
                "message_text_only": "In my mind it's not like the client's phone is going all directions at the\nsame time. There should be a priority method and fallback method(s). \u200bAnd I\n\u200bsee p2p radio as priority, and web as fallback, and BIP21 in the end as\nalways-working-default.\n\n\u200bSo I'm keeping support for it all while want to be able to provide best\nuser experience.\nMike, a while ago in \u200bthis thread you've described contactless cards user\nexperience. I'm also using contactless cards often, and what I'm aiming at\nis creating same level of user experience for Bitcoin users.\n\nEncryption over bluetooth is a matter to worry about, and we will introduce\nthat, but we need to sort out more low level problems first before coming\ninto that stage.\n\n\nSo, the backwards compatibility is a good issue Michael pointed out.\nWhile processing of multiple \"r\" parameters is indeed uncertain (since\nthere is no RFC for that various implementations may behave differently),\nthe array solution is somewhat better. The array parameter name is \"\nr%5B1%5D=\", i.e. it's not \"r=\", and we can add plain \"r=\" alongside. And if\nparticular implementation understands the array construct - it will use it,\notherwise it will ignore the \"r%5B1%5D=\" and use only usual \"r=\".\n\nThis doens't work though for cases where particular implementation\nunderstands array construct but doesn't work well with repeating\nparameters, since it will see two repeating \"r\" - an array and a string. I\ndon't have a solution for that atm.\n\n\nIf add completely new parameter to solve this we will need to make it an\narray straight away to address upcoming issues with accommodating other\nprotocols.\nAnd then I would also modify existing BIP72 to strictly define \"r=\" as\n\"http(s)\" \u200bonly \u200bparameter, while all other protocols (bluetooth, WiFi\nDirect, ultrasound, chirp etc) should go to the new array parameter.\n\n\n\u200b\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140701/3d587442/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-07-01T14:59:07",
                "message_text_only": "Does r[]= really need to be encoded as r%5B1%5D= ? In this case, I'd\nadvocate for a simple array parameter name, like rs= (\"plural\" of r).\nLength really does matter for QR codes.\n\nI'm fine with either multiple r= params or exactly one r= plus zero to\nmany r[]= params. Although I think it is a violation of the (current)\nspec to choke on more than one r= parameters, I admit that bitcoinj is\ncurrently implemented that way. (We could however fix this in a\nmaintenance release.)\n\nHowever, r= should also allow all other protocols, exactly like any of\nthe r[]= params. I don't think we should do a distinction here. Also\nbecause of backwards compatibility to the status quo.\n\n\nOn 07/01/2014 03:03 PM, Alex Kotenko wrote:\n> In my mind it's not like the client's phone is going all directions at\n> the same time. There should be a priority method and fallback method(s).\n> \u200bAnd I \u200bsee p2p radio as priority, and web as fallback, and BIP21 in the\n> end as always-working-default.\n> \n> \u200bSo I'm keeping support for it all while want to be able to provide best\n> user experience. \n> Mike, a while ago in \u200bthis thread you've described contactless cards\n> user experience. I'm also using contactless cards often, and what I'm\n> aiming at is creating same level of user experience for Bitcoin users. \n> \n> Encryption over bluetooth is a matter to worry about, and we will\n> introduce that, but we need to sort out more low level problems first\n> before coming into that stage. \n> \n> \n> So, the backwards compatibility is a good issue Michael pointed out. \n> While processing of multiple \"r\" parameters is indeed uncertain (since\n> there is no RFC for that various implementations may behave\n> differently), the array solution is somewhat better. The array parameter\n> name is \"r%5B1%5D=\", i.e. it's not \"r=\", and we can add plain \"r=\"\n> alongside. And if particular implementation understands the array\n> construct - it will use it, otherwise it will ignore the \"r%5B1%5D=\" and\n> use only usual \"r=\". \n> \n> This doens't work though for cases where particular implementation\n> understands array construct but doesn't work well with repeating\n> parameters, since it will see two repeating \"r\" - an array and a string.\n> I don't have a solution for that atm. \n> \n> \n> If add completely new parameter to solve this we will need to make it an\n> array straight away to address upcoming issues with accommodating other\n> protocols. \n> And then I would also modify existing BIP72 to strictly define \"r=\" as\n> \"http(s)\" \u200bonly \u200bparameter, while all other protocols (bluetooth, WiFi\n> Direct, ultrasound, chirp etc) should go to the new array parameter.\n> \n> \n> \u200b\n> \n> \n> ------------------------------------------------------------------------------\n> Open source business process management suite built on Java and Eclipse\n> Turn processes into business applications with Bonita BPM Community Edition\n> Quickly connect people, data, and systems into organized workflows\n> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n> http://p.sf.net/sfu/Bonitasoft\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Michael Wozniak",
                "date": "2014-07-01T15:07:23",
                "message_text_only": "Multiple parameters is currently undefined as far as I can tell.  Should the client take the first, last, or ignore it completely if there are multiple of any parameter?  I think that\u2019s the point of the parameter pollution discussion, which will define it one way or the other.\n\nI\u2019m only familiar with the Electrum implementation, which is currently checking for any duplicate parameters and treating the entire URI as invalid if duplicate parameters exist (following the parameter pollution suggestions).\n\n-\nMichael Wozniak\n\nOn Jul 1, 2014, at 10:59 AM, Andreas Schildbach <andreas at schildbach.de> wrote:\n\n> Does r[]= really need to be encoded as r%5B1%5D= ? In this case, I'd\n> advocate for a simple array parameter name, like rs= (\"plural\" of r).\n> Length really does matter for QR codes.\n> \n> I'm fine with either multiple r= params or exactly one r= plus zero to\n> many r[]= params. Although I think it is a violation of the (current)\n> spec to choke on more than one r= parameters, I admit that bitcoinj is\n> currently implemented that way. (We could however fix this in a\n> maintenance release.)\n> \n> However, r= should also allow all other protocols, exactly like any of\n> the r[]= params. I don't think we should do a distinction here. Also\n> because of backwards compatibility to the status quo.\n> \n> \n> On 07/01/2014 03:03 PM, Alex Kotenko wrote:\n>> In my mind it's not like the client's phone is going all directions at\n>> the same time. There should be a priority method and fallback method(s).\n>> \u200bAnd I \u200bsee p2p radio as priority, and web as fallback, and BIP21 in the\n>> end as always-working-default.\n>> \n>> \u200bSo I'm keeping support for it all while want to be able to provide best\n>> user experience. \n>> Mike, a while ago in \u200bthis thread you've described contactless cards\n>> user experience. I'm also using contactless cards often, and what I'm\n>> aiming at is creating same level of user experience for Bitcoin users. \n>> \n>> Encryption over bluetooth is a matter to worry about, and we will\n>> introduce that, but we need to sort out more low level problems first\n>> before coming into that stage. \n>> \n>> \n>> So, the backwards compatibility is a good issue Michael pointed out. \n>> While processing of multiple \"r\" parameters is indeed uncertain (since\n>> there is no RFC for that various implementations may behave\n>> differently), the array solution is somewhat better. The array parameter\n>> name is \"r%5B1%5D=\", i.e. it's not \"r=\", and we can add plain \"r=\"\n>> alongside. And if particular implementation understands the array\n>> construct - it will use it, otherwise it will ignore the \"r%5B1%5D=\" and\n>> use only usual \"r=\". \n>> \n>> This doens't work though for cases where particular implementation\n>> understands array construct but doesn't work well with repeating\n>> parameters, since it will see two repeating \"r\" - an array and a string.\n>> I don't have a solution for that atm. \n>> \n>> \n>> If add completely new parameter to solve this we will need to make it an\n>> array straight away to address upcoming issues with accommodating other\n>> protocols. \n>> And then I would also modify existing BIP72 to strictly define \"r=\" as\n>> \"http(s)\" \u200bonly \u200bparameter, while all other protocols (bluetooth, WiFi\n>> Direct, ultrasound, chirp etc) should go to the new array parameter.\n>> \n>> \n>> \u200b\n>> \n>> \n>> ------------------------------------------------------------------------------\n>> Open source business process management suite built on Java and Eclipse\n>> Turn processes into business applications with Bonita BPM Community Edition\n>> Quickly connect people, data, and systems into organized workflows\n>> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n>> http://p.sf.net/sfu/Bonitasoft\n>> \n>> \n>> \n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Open source business process management suite built on Java and Eclipse\n> Turn processes into business applications with Bonita BPM Community Edition\n> Quickly connect people, data, and systems into organized workflows\n> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n> http://p.sf.net/sfu/Bonitasoft\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-07-01T15:39:42",
                "message_text_only": "Ok, one more idea:\nr= is used for the first URL, and we *think* of it as r0=\nadditional URLs are appended as\nr1=\nr2=\nand so on. This would also define an ordering in case we need it.\n\n\nOn 07/01/2014 05:07 PM, Michael Wozniak wrote:\n> Multiple parameters is currently undefined as far as I can tell.  Should the client take the first, last, or ignore it completely if there are multiple of any parameter?  I think that\u2019s the point of the parameter pollution discussion, which will define it one way or the other.\n> \n> I\u2019m only familiar with the Electrum implementation, which is currently checking for any duplicate parameters and treating the entire URI as invalid if duplicate parameters exist (following the parameter pollution suggestions).\n> \n> -\n> Michael Wozniak\n> \n> On Jul 1, 2014, at 10:59 AM, Andreas Schildbach <andreas at schildbach.de> wrote:\n> \n>> Does r[]= really need to be encoded as r%5B1%5D= ? In this case, I'd\n>> advocate for a simple array parameter name, like rs= (\"plural\" of r).\n>> Length really does matter for QR codes.\n>>\n>> I'm fine with either multiple r= params or exactly one r= plus zero to\n>> many r[]= params. Although I think it is a violation of the (current)\n>> spec to choke on more than one r= parameters, I admit that bitcoinj is\n>> currently implemented that way. (We could however fix this in a\n>> maintenance release.)\n>>\n>> However, r= should also allow all other protocols, exactly like any of\n>> the r[]= params. I don't think we should do a distinction here. Also\n>> because of backwards compatibility to the status quo.\n>>\n>>\n>> On 07/01/2014 03:03 PM, Alex Kotenko wrote:\n>>> In my mind it's not like the client's phone is going all directions at\n>>> the same time. There should be a priority method and fallback method(s).\n>>> \u200bAnd I \u200bsee p2p radio as priority, and web as fallback, and BIP21 in the\n>>> end as always-working-default.\n>>>\n>>> \u200bSo I'm keeping support for it all while want to be able to provide best\n>>> user experience. \n>>> Mike, a while ago in \u200bthis thread you've described contactless cards\n>>> user experience. I'm also using contactless cards often, and what I'm\n>>> aiming at is creating same level of user experience for Bitcoin users. \n>>>\n>>> Encryption over bluetooth is a matter to worry about, and we will\n>>> introduce that, but we need to sort out more low level problems first\n>>> before coming into that stage. \n>>>\n>>>\n>>> So, the backwards compatibility is a good issue Michael pointed out. \n>>> While processing of multiple \"r\" parameters is indeed uncertain (since\n>>> there is no RFC for that various implementations may behave\n>>> differently), the array solution is somewhat better. The array parameter\n>>> name is \"r%5B1%5D=\", i.e. it's not \"r=\", and we can add plain \"r=\"\n>>> alongside. And if particular implementation understands the array\n>>> construct - it will use it, otherwise it will ignore the \"r%5B1%5D=\" and\n>>> use only usual \"r=\". \n>>>\n>>> This doens't work though for cases where particular implementation\n>>> understands array construct but doesn't work well with repeating\n>>> parameters, since it will see two repeating \"r\" - an array and a string.\n>>> I don't have a solution for that atm. \n>>>\n>>>\n>>> If add completely new parameter to solve this we will need to make it an\n>>> array straight away to address upcoming issues with accommodating other\n>>> protocols. \n>>> And then I would also modify existing BIP72 to strictly define \"r=\" as\n>>> \"http(s)\" \u200bonly \u200bparameter, while all other protocols (bluetooth, WiFi\n>>> Direct, ultrasound, chirp etc) should go to the new array parameter.\n>>>\n>>>\n>>> \u200b\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Open source business process management suite built on Java and Eclipse\n>>> Turn processes into business applications with Bonita BPM Community Edition\n>>> Quickly connect people, data, and systems into organized workflows\n>>> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n>>> http://p.sf.net/sfu/Bonitasoft\n>>>\n>>>\n>>>\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Open source business process management suite built on Java and Eclipse\n>> Turn processes into business applications with Bonita BPM Community Edition\n>> Quickly connect people, data, and systems into organized workflows\n>> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n>> http://p.sf.net/sfu/Bonitasoft\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> ------------------------------------------------------------------------------\n> Open source business process management suite built on Java and Eclipse\n> Turn processes into business applications with Bonita BPM Community Edition\n> Quickly connect people, data, and systems into organized workflows\n> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n> http://p.sf.net/sfu/Bonitasoft\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Alex Kotenko",
                "date": "2014-07-01T17:18:23",
                "message_text_only": "Hmm, r1, r2 etc is actually interesting. It takes less chars then array\n(yes, array brackets have to be escaped) and provides unlimited number of\noptions, uniformed approach and priority definition. I'd say that is the\nway to go. Any objections?\nOn 1 Jul 2014 16:39, \"Andreas Schildbach\" <andreas at schildbach.de> wrote:\n\n> Ok, one more idea:\n> r= is used for the first URL, and we *think* of it as r0=\n> additional URLs are appended as\n> r1=\n> r2=\n> and so on. This would also define an ordering in case we need it.\n>\n>\n> On 07/01/2014 05:07 PM, Michael Wozniak wrote:\n> > Multiple parameters is currently undefined as far as I can tell.  Should\n> the client take the first, last, or ignore it completely if there are\n> multiple of any parameter?  I think that\u2019s the point of the parameter\n> pollution discussion, which will define it one way or the other.\n> >\n> > I\u2019m only familiar with the Electrum implementation, which is currently\n> checking for any duplicate parameters and treating the entire URI as\n> invalid if duplicate parameters exist (following the parameter pollution\n> suggestions).\n> >\n> > -\n> > Michael Wozniak\n> >\n> > On Jul 1, 2014, at 10:59 AM, Andreas Schildbach <andreas at schildbach.de>\n> wrote:\n> >\n> >> Does r[]= really need to be encoded as r%5B1%5D= ? In this case, I'd\n> >> advocate for a simple array parameter name, like rs= (\"plural\" of r).\n> >> Length really does matter for QR codes.\n> >>\n> >> I'm fine with either multiple r= params or exactly one r= plus zero to\n> >> many r[]= params. Although I think it is a violation of the (current)\n> >> spec to choke on more than one r= parameters, I admit that bitcoinj is\n> >> currently implemented that way. (We could however fix this in a\n> >> maintenance release.)\n> >>\n> >> However, r= should also allow all other protocols, exactly like any of\n> >> the r[]= params. I don't think we should do a distinction here. Also\n> >> because of backwards compatibility to the status quo.\n> >>\n> >>\n> >> On 07/01/2014 03:03 PM, Alex Kotenko wrote:\n> >>> In my mind it's not like the client's phone is going all directions at\n> >>> the same time. There should be a priority method and fallback\n> method(s).\n> >>> \u200bAnd I \u200bsee p2p radio as priority, and web as fallback, and BIP21 in\n> the\n> >>> end as always-working-default.\n> >>>\n> >>> \u200bSo I'm keeping support for it all while want to be able to provide\n> best\n> >>> user experience.\n> >>> Mike, a while ago in \u200bthis thread you've described contactless cards\n> >>> user experience. I'm also using contactless cards often, and what I'm\n> >>> aiming at is creating same level of user experience for Bitcoin users.\n> >>>\n> >>> Encryption over bluetooth is a matter to worry about, and we will\n> >>> introduce that, but we need to sort out more low level problems first\n> >>> before coming into that stage.\n> >>>\n> >>>\n> >>> So, the backwards compatibility is a good issue Michael pointed out.\n> >>> While processing of multiple \"r\" parameters is indeed uncertain (since\n> >>> there is no RFC for that various implementations may behave\n> >>> differently), the array solution is somewhat better. The array\n> parameter\n> >>> name is \"r%5B1%5D=\", i.e. it's not \"r=\", and we can add plain \"r=\"\n> >>> alongside. And if particular implementation understands the array\n> >>> construct - it will use it, otherwise it will ignore the \"r%5B1%5D=\"\n> and\n> >>> use only usual \"r=\".\n> >>>\n> >>> This doens't work though for cases where particular implementation\n> >>> understands array construct but doesn't work well with repeating\n> >>> parameters, since it will see two repeating \"r\" - an array and a\n> string.\n> >>> I don't have a solution for that atm.\n> >>>\n> >>>\n> >>> If add completely new parameter to solve this we will need to make it\n> an\n> >>> array straight away to address upcoming issues with accommodating other\n> >>> protocols.\n> >>> And then I would also modify existing BIP72 to strictly define \"r=\" as\n> >>> \"http(s)\" \u200bonly \u200bparameter, while all other protocols (bluetooth, WiFi\n> >>> Direct, ultrasound, chirp etc) should go to the new array parameter.\n> >>>\n> >>>\n> >>> \u200b\n> >>>\n> >>>\n> >>>\n> ------------------------------------------------------------------------------\n> >>> Open source business process management suite built on Java and Eclipse\n> >>> Turn processes into business applications with Bonita BPM Community\n> Edition\n> >>> Quickly connect people, data, and systems into organized workflows\n> >>> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n> >>> http://p.sf.net/sfu/Bonitasoft\n> >>>\n> >>>\n> >>>\n> >>> _______________________________________________\n> >>> Bitcoin-development mailing list\n> >>> Bitcoin-development at lists.sourceforge.net\n> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>>\n> >>\n> >>\n> >>\n> >>\n> ------------------------------------------------------------------------------\n> >> Open source business process management suite built on Java and Eclipse\n> >> Turn processes into business applications with Bonita BPM Community\n> Edition\n> >> Quickly connect people, data, and systems into organized workflows\n> >> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n> >> http://p.sf.net/sfu/Bonitasoft\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Open source business process management suite built on Java and Eclipse\n> > Turn processes into business applications with Bonita BPM Community\n> Edition\n> > Quickly connect people, data, and systems into organized workflows\n> > Winner of BOSSIE, CODIE, OW2 and Gartner awards\n> > http://p.sf.net/sfu/Bonitasoft\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Open source business process management suite built on Java and Eclipse\n> Turn processes into business applications with Bonita BPM Community Edition\n> Quickly connect people, data, and systems into organized workflows\n> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n> http://p.sf.net/sfu/Bonitasoft\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140701/f3b7f78d/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-01T17:59:45",
                "message_text_only": "Nope, r1/r2 sounds good to me. BTW we should update the spec to reflect\nthat escaping is largely unnecessary in many cases.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140701/6f10e06c/attachment.html>"
            },
            {
                "author": "Alex Kotenko",
                "date": "2014-07-02T08:49:10",
                "message_text_only": "Ok, agreed. I will submit a pull request to BIP72 then.\nNot sure about escaping though. It is indeed not critical for bitcoin URIs,\nbut still it is a part of RFC, don't think we should go against it.\n\nAndreas, we will implement this on our side, with bluetooth on r= and web\naddress on r1=.\n\n\n2014-07-01 18:59 GMT+01:00 Mike Hearn <mike at plan99.net>:\n\n> Nope, r1/r2 sounds good to me. BTW we should update the spec to reflect\n> that escaping is largely unnecessary in many cases.\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140702/8da22f48/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Payment Protocol for Face-to-face Payments",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Alex Kotenko",
                "Michael Wozniak",
                "Andreas Schildbach"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 29000
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin Protocol Specification",
        "thread_messages": [
            {
                "author": "Isidor Zeuner",
                "date": "2014-07-03T01:21:31",
                "message_text_only": "Hello Krzysztof,\n\n[...]\n> As before, it can be found under:\n>\n> http://enetium.com/resources/Bitcoin.pdf\n>\n> I hope it will prove useful to the community and thank in advance\n> for any further improvement proposals.\n>\n\nI think it's great work and provides a good reference for those\nwho want to get some insight into Bitcoin's design.\n\nHave you considered putting the document source under version control,\nwhich may facilitate tracking future protocol improvements in the\ndocument easily?\n\nBest regards,\n\nIsidor"
            },
            {
                "author": "JMOlmos GMail",
                "date": "2014-07-07T17:57:46",
                "message_text_only": "And for translation's facility :P\n\n\n2014-07-07 14:57 GMT-03:00 JMOlmos GMail <colonizare at gmail.com>:\n\n> And for translation's facility :P\n>\n>\n> 2014-07-02 22:21 GMT-03:00 Isidor Zeuner <cryptocurrencies at quidecco.de>:\n>\n> Hello Krzysztof,\n>>\n>> [...]\n>> > As before, it can be found under:\n>> >\n>> > http://enetium.com/resources/Bitcoin.pdf\n>> >\n>> > I hope it will prove useful to the community and thank in advance\n>> > for any further improvement proposals.\n>> >\n>>\n>> I think it's great work and provides a good reference for those\n>> who want to get some insight into Bitcoin's design.\n>>\n>> Have you considered putting the document source under version control,\n>> which may facilitate tracking future protocol improvements in the\n>> document easily?\n>>\n>> Best regards,\n>>\n>> Isidor\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Open source business process management suite built on Java and Eclipse\n>> Turn processes into business applications with Bonita BPM Community\n>> Edition\n>> Quickly connect people, data, and systems into organized workflows\n>> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n>> http://p.sf.net/sfu/Bonitasoft\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140707/71be7580/attachment.html>"
            },
            {
                "author": "Chris D'Costa",
                "date": "2014-07-08T15:29:09",
                "message_text_only": "This is probably the best, most complete resource available for those who\ndon't want to (or don't know how to) wade through the code. Well done.\n\n\nOn 7 July 2014 19:57, JMOlmos GMail <colonizare at gmail.com> wrote:\n\n> And for translation's facility :P\n>\n>\n> 2014-07-07 14:57 GMT-03:00 JMOlmos GMail <colonizare at gmail.com>:\n>\n>> And for translation's facility :P\n>>\n>>\n>> 2014-07-02 22:21 GMT-03:00 Isidor Zeuner <cryptocurrencies at quidecco.de>:\n>>\n>> Hello Krzysztof,\n>>>\n>>> [...]\n>>> > As before, it can be found under:\n>>> >\n>>> > http://enetium.com/resources/Bitcoin.pdf\n>>> >\n>>> > I hope it will prove useful to the community and thank in advance\n>>> > for any further improvement proposals.\n>>> >\n>>>\n>>> I think it's great work and provides a good reference for those\n>>> who want to get some insight into Bitcoin's design.\n>>>\n>>> Have you considered putting the document source under version control,\n>>> which may facilitate tracking future protocol improvements in the\n>>> document easily?\n>>>\n>>> Best regards,\n>>>\n>>> Isidor\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Open source business process management suite built on Java and Eclipse\n>>> Turn processes into business applications with Bonita BPM Community\n>>> Edition\n>>> Quickly connect people, data, and systems into organized workflows\n>>> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n>>> http://p.sf.net/sfu/Bonitasoft\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Open source business process management suite built on Java and Eclipse\n> Turn processes into business applications with Bonita BPM Community Edition\n> Quickly connect people, data, and systems into organized workflows\n> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n> http://p.sf.net/sfu/Bonitasoft\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140708/7230fa17/attachment.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-07-08T20:04:19",
                "message_text_only": "Is anyone working on a similar specification document for Satoshi's P2P protocol?  I know how blocks and transactions are structured and verified, but I'm interested in knowing how they're communicated over the network."
            },
            {
                "author": "Aaron Voisine",
                "date": "2014-07-08T21:08:52",
                "message_text_only": "I wrote down a really short description in code comments for\nbreadwallet, based on what I figured out:\n\nhttps://github.com/voisine/breadwallet/blob/master/BreadWallet/BRPeer.m#L318\n\n\nAaron Voisine\nbreadwallet.com\n\n\nOn Tue, Jul 8, 2014 at 1:04 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> Is anyone working on a similar specification document for Satoshi's P2P protocol?  I know how blocks and transactions are structured and verified, but I'm interested in knowing how they're communicated over the network.\n>\n> ------------------------------------------------------------------------------\n> Open source business process management suite built on Java and Eclipse\n> Turn processes into business applications with Bonita BPM Community Edition\n> Quickly connect people, data, and systems into organized workflows\n> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n> http://p.sf.net/sfu/Bonitasoft\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-07-08T22:40:00",
                "message_text_only": "There's this (not sure how complete it is):\nhttps://en.bitcoin.it/wiki/Protocol_specification\n\nAlso there's a good introduction to technical details here:\n\nhttps://bitcointalk.org/index.php?topic=375524.0\n\nI hope that is useful.\n\n\nOn 7/8/14, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> Is anyone working on a similar specification document for Satoshi's P2P\n> protocol?  I know how blocks and transactions are structured and verified,\n> but I'm interested in knowing how they're communicated over the network.\n>\n> ------------------------------------------------------------------------------\n> Open source business process management suite built on Java and Eclipse\n> Turn processes into business applications with Bonita BPM Community Edition\n> Quickly connect people, data, and systems into organized workflows\n> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n> http://p.sf.net/sfu/Bonitasoft\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n-- \nJorge Tim\u00f3n"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-09T11:57:58",
                "message_text_only": "On Tue, Jul 8, 2014 at 10:04 PM, Matt Whitlock <bip at mattwhitlock.name>\nwrote:\n\n> Is anyone working on a similar specification document for Satoshi's P2P\n> protocol?  I know how blocks and transactions are structured and verified,\n> but I'm interested in knowing how they're communicated over the network.\n\n\nThere's a high level guide here:\n\nhttps://bitcoin.org/en/developer-guide#p2p-network\n\nIt's not a protocol specification however, more a lay-of-the-land type\ndescription. The protocol is not very complicated however. The wiki page\ndescribes it adequately. It's basically just a framing mechanism with\nexcessively aggressive checksumming, a version handshake, an inventory\nmechanism to cut down on bandwidth usage, the alerts, and that's about it.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140709/b2fb0530/attachment.html>"
            },
            {
                "author": "Krzysztof Okupski",
                "date": "2014-07-09T09:34:42",
                "message_text_only": "Dear all,\n\nthank you for your words of encouragement. I'll upload\nthe raw .tex files on github shortly. If you have any other\nproposals, please let me know. Especially if there are any\nsuggestions on how the signature section can be revised.\n\nMore information on network functionality can be found on:\nhttps://en.bitcoin.it/wiki/Network\n\nDetails can be found here:\nhttps://en.bitcoin.it/wiki/Satoshi_Client_Block_Exchange\nhttps://en.bitcoin.it/wiki/Satoshi_Client_Transaction_Exchange\nhttps://en.bitcoin.it/wiki/Satoshi_Client_Initialization_and_Startup\nhttps://en.bitcoin.it/wiki/Satoshi_Client_Node_Discovery\nhttps://en.bitcoin.it/wiki/Satoshi_Client_Node_Connectivity\nhttps://en.bitcoin.it/wiki/Satoshi_Client_Sockets_and_Messages\n\n\nWarm greetings,\nKrzysztof"
            },
            {
                "author": "Krzysztof Okupski",
                "date": "2014-07-14T09:54:08",
                "message_text_only": "Dear all,\n\nthank you for your invaluable feedback. As requested, the spec\nwill from now on be under version control. It can be found under:\n\nhttps://github.com/minium/Bitcoin-Spec\n\nThe old link to the PDF will be, just in case, kept updated as well.\n\n\nWarm greetings,\nKrzysztof Okupski\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140714/fe48b82f/attachment.html>"
            },
            {
                "author": "sickpig at gmail.com",
                "date": "2014-07-14T10:41:26",
                "message_text_only": "On Mon, Jul 14, 2014 at 11:54 AM, Krzysztof Okupski\n<k.okupski at googlemail.com> wrote:\n> Dear all,\n>\n> thank you for your invaluable feedback. As requested, the spec\n> will from now on be under version control. It can be found under:\n>\n> https://github.com/minium/Bitcoin-Spec\n>\n> The old link to the PDF will be, just in case, kept updated as well.\n>\n>\n> Warm greetings,\n> Krzysztof Okupski\n\nmany many thanks Krzysztof.\n\nThis was badly needed.\n\nThis is a way to get more people to understand\nthe whole system, hence increasing the number\nof bitcoin devs on the long term."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-14T11:26:19",
                "message_text_only": "Nice work, but please don't call it the \"Bitcoin protocol spec\". Your\ndocument is not a spec. It is an attempt to describe in English the Bitcoin\nprotocol, but anyone who implemented it based on your description would get\nit wrong. For example you didn't mention the SIGHASH_SINGLE bug and many\nother important areas like the difficulty transitions are also left\nunspecified.\n\nAs a loose description of the protocol for newbies it's an invaluable\nresource and perhaps we should link to it from the developer guide. As\nsomething that claims to be a specification it is quite possibly dangerous\n- the only spec that matters is the C++ original.\n\n\nOn Mon, Jul 14, 2014 at 11:54 AM, Krzysztof Okupski <\nk.okupski at googlemail.com> wrote:\n\n>  Dear all,\n>\n> thank you for your invaluable feedback. As requested, the spec\n> will from now on be under version control. It can be found under:\n>\n> https://github.com/minium/Bitcoin-Spec\n>\n> The old link to the PDF will be, just in case, kept updated as well.\n>\n>\n> Warm greetings,\n> Krzysztof Okupski\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck&#174;\n> Code Sight&#153; - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140714/a01c5941/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-07-14T11:41:07",
                "message_text_only": "> As a loose description of the protocol for newbies it's an invaluable\n> resource and perhaps we should link to it from the developer guide.\n\nIt has already been linked from the developer guide for quite a while,\nunder Additional Resources.\n\nWladimir"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-14T11:49:16",
                "message_text_only": "Ah, that's great. Still, it would be good to be careful with the word\n\"specification\".\n\n\nOn Mon, Jul 14, 2014 at 1:41 PM, Wladimir <laanwj at gmail.com> wrote:\n\n> > As a loose description of the protocol for newbies it's an invaluable\n> > resource and perhaps we should link to it from the developer guide.\n>\n> It has already been linked from the developer guide for quite a while,\n> under Additional Resources.\n>\n> Wladimir\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140714/e4d1fd3b/attachment.html>"
            },
            {
                "author": "sickpig at gmail.com",
                "date": "2014-07-14T12:25:54",
                "message_text_only": "On Mon, Jul 14, 2014 at 1:26 PM, Mike Hearn <mike at plan99.net> wrote:\n> Nice work, but please don't call it the \"Bitcoin protocol spec\". Your\n> document is not a spec.\n\nfair objection, fwiw.\n\n> It is an attempt to describe in English the Bitcoin\n> protocol, but anyone who implemented it based on your description would get\n> it wrong. For example you didn't mention the SIGHASH_SINGLE bug and many\n> other important areas like the difficulty transitions are also left\n> unspecified.\n\nat the end of the day it's opensource so it could always be improved via pull\nrequest on github.\n\nKrzysztof, in that regard I would add a licence file to make\nintegration of changes\nmade by others smoother.\n\n> As a loose description of the protocol for newbies it's an invaluable\n> resource and perhaps we should link to it from the developer guide. As\n> something that claims to be a specification it is quite possibly dangerous -\n> the only spec that matters is the C++ original.\n\njust out of curiosity, do you think it will be possible to create any\nother proper\nprotocol specifications rather than the C++  original?\n\n> On Mon, Jul 14, 2014 at 11:54 AM, Krzysztof Okupski\n> <k.okupski at googlemail.com> wrote:\n>>\n>> Dear all,\n>>\n>> thank you for your invaluable feedback. As requested, the spec\n>> will from now on be under version control. It can be found under:\n>>\n>> https://github.com/minium/Bitcoin-Spec\n>>\n>> The old link to the PDF will be, just in case, kept updated as well.\n>>\n>>\n>> Warm greetings,\n>> Krzysztof Okupski"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-14T12:37:13",
                "message_text_only": ">\n> just out of curiosity, do you think it will be possible to create any\n> other proper protocol specifications rather than the C++  original?\n\n\nWell it's a finite code base so yes, it should be possible.\n\nThe only problem is .... so far everyone who tried it, didn't succeed :)\nHeck even people who tried to reimplement it by reading the code keep\ngetting subtle details wrong.\n\nSo it should definitely be possible one day, assuming Bitcoin doesn't\nbecome radically more complex, but it's a minefield.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140714/26b4c960/attachment.html>"
            },
            {
                "author": "sickpig at gmail.com",
                "date": "2014-07-14T20:51:35",
                "message_text_only": "On Mon, Jul 14, 2014 at 2:37 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> just out of curiosity, do you think it will be possible to create any\n>>  other proper protocol specifications rather than the C++  original?\n>\n>\n> Well it's a finite code base so yes, it should be possible.\n>\n> The only problem is .... so far everyone who tried it, didn't succeed :)\n> Heck even people who tried to reimplement it by reading the code keep\n> getting subtle details wrong.\n>\n> So it should definitely be possible one day, assuming Bitcoin doesn't\n> become radically more complex, but it's a minefield.\n>\n\nthank for the frank reply\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140714/2f891d6a/attachment.html>"
            },
            {
                "author": "Krzysztof Okupski",
                "date": "2014-07-14T14:44:32",
                "message_text_only": "I've renamed it to \"Bitcoin Developer Specification\" a little while ago.\nMaybe it should rather be named \"Bitcoin Developer Reference\"? Either\nway, creating a good description of Bitcoin is an incremental process\nand there are certainly many quirks I'm not aware of. I hope that\ntogether we will soon be able to fill in the missing gaps.\n\nWarm greetings,\nKrzysztof Okupski\n\nOn 07/14/2014 01:26 PM, Mike Hearn wrote:\n\n> Nice work, but please don't call it the \"Bitcoin protocol spec\". Your\n> document is not a spec. It is an attempt to describe in English the Bitcoin\n> protocol, but anyone who implemented it based on your description would get\n> it wrong. For example you didn't mention the SIGHASH_SINGLE bug and many\n> other important areas like the difficulty transitions are also left\n> unspecified.\n>\n> As a loose description of the protocol for newbies it's an invaluable\n> resource and perhaps we should link to it from the developer guide. As\n> something that claims to be a specification it is quite possibly dangerous\n> - the only spec that matters is the C++ original.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140714/1e6b0dce/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-14T17:16:12",
                "message_text_only": "On Mon, Jul 14, 2014 at 10:44 AM, Krzysztof Okupski\n<k.okupski at googlemail.com> wrote:\n> I've renamed it to \"Bitcoin Developer Specification\" a little while ago.\n> Maybe it should rather be named \"Bitcoin Developer Reference\"? Either\n> way, creating a good description of Bitcoin is an incremental process\n> and there are certainly many quirks I'm not aware of. I hope that\n> together we will soon be able to fill in the missing gaps.\n\nFirstly, it is an excellent document, and it should be useful in\neducating others.\n\nI do agree that \"specification\" is not a good word to use.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Protocol Specification",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Chris D'Costa",
                "Isidor Zeuner",
                "Wladimir",
                "Mike Hearn",
                "sickpig at gmail.com",
                "Matt Whitlock",
                "Jorge Tim\u00f3n",
                "JMOlmos GMail",
                "Aaron Voisine",
                "Krzysztof Okupski"
            ],
            "messages_count": 18,
            "total_messages_chars_count": 17364
        }
    },
    {
        "title": "[Bitcoin-development] Building from git on OSX",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2014-07-03T15:56:11",
                "message_text_only": "Just FYI for anybody else building on OSX:\n\nlibtool is a new dependency, so if you update to git HEAD and have trouble\nbuilding:\n\nbrew install libtool\n  (or port install libtool -- see doc/build-osx.md for all the dependencies)\n./autogen.sh\n./configure  .... etc, whatever configure options you use. I develop with:\n./configure --disable-hardening --disable-silent-rules CXXFLAGS='-g3 -O0\n-DDEBUG_LOCKORDER'\n\n\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140703/31d5d271/attachment.html>"
            },
            {
                "author": "Angel Leon",
                "date": "2014-07-03T16:21:50",
                "message_text_only": "a million thanks for this FYI\n\nhttp://twitter.com/gubatron\n\n\nOn Thu, Jul 3, 2014 at 11:56 AM, Gavin Andresen <gavinandresen at gmail.com>\nwrote:\n\n> Just FYI for anybody else building on OSX:\n>\n> libtool is a new dependency, so if you update to git HEAD and have trouble\n> building:\n>\n> brew install libtool\n>   (or port install libtool -- see doc/build-osx.md for all the\n> dependencies)\n> ./autogen.sh\n> ./configure  .... etc, whatever configure options you use. I develop with:\n> ./configure --disable-hardening --disable-silent-rules CXXFLAGS='-g3 -O0\n> -DDEBUG_LOCKORDER'\n>\n>\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> Open source business process management suite built on Java and Eclipse\n> Turn processes into business applications with Bonita BPM Community Edition\n> Quickly connect people, data, and systems into organized workflows\n> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n> http://p.sf.net/sfu/Bonitasoft\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140703/38500348/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Building from git on OSX",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen",
                "Angel Leon"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1998
        }
    },
    {
        "title": "[Bitcoin-development] Anyone still using SOCKS4?",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2014-07-04T07:15:31",
                "message_text_only": "On Wed, Jun 11, 2014 at 5:39 PM, Wladimir <laanwj at gmail.com> wrote:\n\n> If no one screams fire, we plan on removing support for it in the next\n> major release, for two reasons:\n>\n> - It would remove some crufty, hardly tested code paths\n>\n> - SOCKS5 offers better privacy as it allows DNS redirection\n\nAnother one:\n\n- SOCKS5 supports IPv6\n\nLast call...\n\nWladimir"
            },
            {
                "author": "Drak",
                "date": "2014-07-04T07:28:26",
                "message_text_only": "*watches the tumble weed blow by*\n\nI think it's pretty safe to remove it...\n\n\nOn 4 July 2014 08:15, Wladimir <laanwj at gmail.com> wrote:\n\n> On Wed, Jun 11, 2014 at 5:39 PM, Wladimir <laanwj at gmail.com> wrote:\n>\n> > If no one screams fire, we plan on removing support for it in the next\n> > major release, for two reasons:\n> >\n> > - It would remove some crufty, hardly tested code paths\n> >\n> > - SOCKS5 offers better privacy as it allows DNS redirection\n>\n> Another one:\n>\n> - SOCKS5 supports IPv6\n>\n> Last call...\n>\n> Wladimir\n>\n>\n> ------------------------------------------------------------------------------\n> Open source business process management suite built on Java and Eclipse\n> Turn processes into business applications with Bonita BPM Community Edition\n> Quickly connect people, data, and systems into organized workflows\n> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n> http://p.sf.net/sfu/Bonitasoft\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140704/3c7d956e/attachment.html>"
            },
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2014-07-07T06:34:53",
                "message_text_only": "Wait, I thought SOCKS4 was supposed to help somehow in terms of prevention\nof leaking of information?\n\nOr maybe I am misremembering.  Here's what I'm thinking of...\n1) https://trac.torproject.org/projects/tor/wiki/doc/Preventing_Tor_DNS_Leaks\n\n2) More regarding TOR,\n\"\n\nI keep seeing these warnings about SOCKS and DNS information leaks. Should\nI worry?\n\nThe warning is:\n\nYour application (using socks5 on port %d) is giving Tor only an IP\naddress. Applications that do DNS resolves themselves may leak\ninformation. Consider using Socks4A (e.g. via Polipo or socat) instead.\n\nhttps://www.torproject.org/docs/faq#WarningsAboutSOCKSandDNSInformationLeaks\n\nI'm not sure that means I'm screaming fire or anything, but isn't there\nsome good reason for SOCKS4 and SOCKS4A?\nOr maybe another way to ask this is:  Looking at an example in which\nsomeone is running Tor, Privoxy, I2P, and FoxyProxy together while running\nBitcoin Core, would there be a problem with having a setting for SOCKS4A\nfor traffic in such a setup given the changes proposed to remove SOCKS4 as\nsuggested in bitcoin-development?\n\nProbably there is just a simple answer to that last question, like \"no.\"\nBut I thought I'd ask.\n\n> On Wed, Jun 11, 2014 at 5:39 PM, Wladimir <laanwj at gmail.com> wrote:\n>\n>> If no one screams fire, we plan on removing support for it in the next\n>> major release, for two reasons:\n>>\n>> - It would remove some crufty, hardly tested code paths\n>>\n>> - SOCKS5 offers better privacy as it allows DNS redirection\n>\n> Another one:\n>\n> - SOCKS5 supports IPv6\n>\n> Last call...\n>\n> Wladimir\n>\n> ------------------------------------------------------------------------------\n> Open source business process management suite built on Java and Eclipse\n> Turn processes into business applications with Bonita BPM Community\n> Edition\n> Quickly connect people, data, and systems into organized workflows\n> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n> http://p.sf.net/sfu/Bonitasoft\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Wladimir",
                "date": "2014-07-07T06:47:22",
                "message_text_only": "On Mon, Jul 7, 2014 at 8:34 AM, Odinn Cyberguerrilla\n<odinn.cyberguerrilla at riseup.net> wrote:\n> Wait, I thought SOCKS4 was supposed to help somehow in terms of prevention\n> of leaking of information?\n\nSOCKS4a (unlike SOCKS4) supports doing DNS lookups on the server, but\nit is not supported by bitcoin core. So it is not part of this\ndiscussion.\n\nAnd SOCKS5 can do all of that just as well. But if you feel like\ncontributing SOCKS4a support that's fine with me.\n\nWladimir"
            },
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2014-07-07T06:54:23",
                "message_text_only": "> On Mon, Jul 7, 2014 at 8:34 AM, Odinn Cyberguerrilla\n> <odinn.cyberguerrilla at riseup.net> wrote:\n>> Wait, I thought SOCKS4 was supposed to help somehow in terms of\n>> prevention\n>> of leaking of information?\n>\n> SOCKS4a (unlike SOCKS4) supports doing DNS lookups on the server, but\n> it is not supported by bitcoin core. So it is not part of this\n> discussion.\n>\n> And SOCKS5 can do all of that just as well. But if you feel like\n> contributing SOCKS4a support that's fine with me.\n>\n> Wladimir\n>\n\nOK, thanks Wladimir."
            }
        ],
        "thread_summary": {
            "title": "Anyone still using SOCKS4?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Drak",
                "Wladimir",
                "Odinn Cyberguerrilla"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 4829
        }
    },
    {
        "title": "[Bitcoin-development] ASIC-proof mining",
        "thread_messages": [
            {
                "author": "Andy Parkins",
                "date": "2014-07-04T10:27:51",
                "message_text_only": "Hello,\n\nI had a thought after reading Mike Hearn's blog about it being impossible to \nhave an ASIC-proof proof of work algorithm.\n\nPerhaps I'm being dim, but I thought I'd mention my thought anyway.\n\nIt strikes me that he's right that it's impossible for any algorithm to exist \nthat can't be implemented in an ASIC.  However, that's only because it's \ntrying to pick an algorithm that is CPU bound.  You could protect against ASCI \nmining (or rather, make it irrelevant that it was being used) by making the \nalgorithm IO-bound rather than CPU-bound.\n\nFor example, what if the proof-of-work hash for a block were no longer just \n\"hash of block\", which contains the hash of the parent block, but instead were \nhash of \n\n   [NEW_BLOCK] [ALL_PREVIOUS_BLOCKS] [NEW_BLOCK]\n\n[ALL_PREVIOUS_BLOCKS] is now 20GB (from memory) and growing.  By prefixing and \nsuffixing the new block, you have to feed every byte of the blockchain through \nthe hashing engine (the prefix prevents you caching the intermediate result).  \nWhatever bus you're using to feed your high speed hashing engine, it will \nalways be faster than the bus -- hence you're now IO-bound, not CPU-bound, and \nany hashing engine will, effectively, be the same.\n\nI'm making the assumption that SHA-256 is not cacheable from the middle \noutwards, so the whole block-chain _has_ to be transferred for every hash.\n\nApologies in advance if this is a stupid idea.\n\n\n\nAndy\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-07-04T10:53:47",
                "message_text_only": "Just a thought on this -- I'm not saying this is a good idea or a bad\nidea, because I have spent about zero time thinking about it, but\nsomething did come to mind as I read this.  Reading 20 GB of data for\nevery hash might be a bit excessive.  And as the blockchain grows, it\nwill become infeasible to continue.  However, what comes to mind is the\nROMix algorithm defined by Colin Percival, which was the pre-cursor to\nscrypt.  Which is actually what Armory uses for key stretching because\nit's far simpler than scrypt itself while maintaining the memory-hard\nproperties (the downside is that it's much less flexible in allowing the\nuser to trade-off compute time vs memory usage).\n\nROMix works by taking N sequential hashes and storing the results into a\nsingle N*32 byte lookup table.   So if N is 1,000,000, you are going to\ncompute 1,000,000 and store the results into 32,000,000 sequential bytes\nof RAM.  Then you are going to do 1,000,000 lookup operations on that\ntable, using the hash of the previous lookup result, to determine the\nlocation of next lookup (within that 32,000,000 bytes).  Assuming a\nstrong hash function, this means its impossible to know in advance what\nneeds to be available in RAM to lookup, and it's easiest if you simply\nhold all 32,000,000 bytes in RAM.\n\nSomething similar could be applied to your idea.  We use the hash of a\nprevBlockHash||nonce as the starting point for 1,000,000 lookup\noperations.  The output of the previous lookup is used to determine\nwhich block and tx (perhaps which chunk of 32 bytes within that tx) is\nused for the next lookup operation.   This means that in order to do the\nhashing, you need the entire blockchain available to you, even though\nyou'll only be using a small fraction of it for each \"hash\".  This might\nachieve what you're describing without actually requiring the full 20 GB\nof reading on ever hash.\n\n-Alan\n\n\n\nOn 07/04/2014 06:27 AM, Andy Parkins wrote:\n> Hello,\n>\n> I had a thought after reading Mike Hearn's blog about it being impossible to \n> have an ASIC-proof proof of work algorithm.\n>\n> Perhaps I'm being dim, but I thought I'd mention my thought anyway.\n>\n> It strikes me that he's right that it's impossible for any algorithm to exist \n> that can't be implemented in an ASIC.  However, that's only because it's \n> trying to pick an algorithm that is CPU bound.  You could protect against ASCI \n> mining (or rather, make it irrelevant that it was being used) by making the \n> algorithm IO-bound rather than CPU-bound.\n>\n> For example, what if the proof-of-work hash for a block were no longer just \n> \"hash of block\", which contains the hash of the parent block, but instead were \n> hash of \n>\n>    [NEW_BLOCK] [ALL_PREVIOUS_BLOCKS] [NEW_BLOCK]\n>\n> [ALL_PREVIOUS_BLOCKS] is now 20GB (from memory) and growing.  By prefixing and \n> suffixing the new block, you have to feed every byte of the blockchain through \n> the hashing engine (the prefix prevents you caching the intermediate result).  \n> Whatever bus you're using to feed your high speed hashing engine, it will \n> always be faster than the bus -- hence you're now IO-bound, not CPU-bound, and \n> any hashing engine will, effectively, be the same.\n>\n> I'm making the assumption that SHA-256 is not cacheable from the middle \n> outwards, so the whole block-chain _has_ to be transferred for every hash.\n>\n> Apologies in advance if this is a stupid idea.\n>\n>\n>\n> Andy"
            },
            {
                "author": "Eugen Leitl",
                "date": "2014-07-04T11:08:34",
                "message_text_only": "On Fri, Jul 04, 2014 at 06:53:47AM -0400, Alan Reiner wrote:\n\n> Something similar could be applied to your idea.  We use the hash of a\n> prevBlockHash||nonce as the starting point for 1,000,000 lookup\n> operations.  The output of the previous lookup is used to determine\n> which block and tx (perhaps which chunk of 32 bytes within that tx) is\n> used for the next lookup operation.   This means that in order to do the\n> hashing, you need the entire blockchain available to you, even though\n> you'll only be using a small fraction of it for each \"hash\".  This might\n> achieve what you're describing without actually requiring the full 20 GB\n> of reading on ever hash.\n\nAnything involving lots of unpredictable memory accesses to a large\nchunk of fast memory is unASICable. That data vector could be derived\nby the same means as an one time pad, and loaded and locked into\nmemory after boot. If you make it large enough it won't profit from\nembedded RAM bandwidth/speedup. The only way to speed up would be clustering,\nwhich doesn't offer economies of scale."
            },
            {
                "author": "Andy Parkins",
                "date": "2014-07-04T11:15:35",
                "message_text_only": "On Friday 04 July 2014 06:53:47 Alan Reiner wrote:\n\n> ROMix works by taking N sequential hashes and storing the results into a\n> single N*32 byte lookup table.   So if N is 1,000,000, you are going to\n> compute 1,000,000 and store the results into 32,000,000 sequential bytes\n> of RAM.  Then you are going to do 1,000,000 lookup operations on that\n> table, using the hash of the previous lookup result, to determine the\n> location of next lookup (within that 32,000,000 bytes).  Assuming a\n> strong hash function, this means its impossible to know in advance what\n> needs to be available in RAM to lookup, and it's easiest if you simply\n> hold all 32,000,000 bytes in RAM.\n\nMy idea wasn't to make hashing memory hungry; it was to make it IO-hungry.  It \nwouldn't be too hard to make an ASIC with 32MB of RAM.  Especially if it \ngained you a 1000x advantage over the other miners.  It seems that sort of \nsolution is exactly the one that Mike Hearn was warning against in his blog.\n\n> you'll only be using a small fraction of it for each \"hash\".  This might\n> achieve what you're describing without actually requiring the full 20 GB\n> of reading on ever hash.\n\nBut we want that read.  Remember the actual hash rate isn't important, what \nmatters is how hard it is to reproduce.  If we make it 1000x harder to do one \nhash for everybody, we're still just as secure.  The difficulty adjustment \nalgorithm ensures blocks come at 10 minutes, regardless of hash rate.  So we \ncan make it harder by picking a harder algorithm -- SCRYPT or BLOWFISH, or \njust by upping the size of the data that needs hashing.  The advantage of \nupping the size of the input is that, unlike an algorithm change, you can't \nbuild a better ASIC to reduce the size.\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-07-04T11:22:19",
                "message_text_only": "On 07/04/2014 07:15 AM, Andy Parkins wrote:\n> On Friday 04 July 2014 06:53:47 Alan Reiner wrote:\n>\n>> ROMix works by taking N sequential hashes and storing the results into a\n>> single N*32 byte lookup table.   So if N is 1,000,000, you are going to\n>> compute 1,000,000 and store the results into 32,000,000 sequential bytes\n>> of RAM.  Then you are going to do 1,000,000 lookup operations on that\n>> table, using the hash of the previous lookup result, to determine the\n>> location of next lookup (within that 32,000,000 bytes).  Assuming a\n>> strong hash function, this means its impossible to know in advance what\n>> needs to be available in RAM to lookup, and it's easiest if you simply\n>> hold all 32,000,000 bytes in RAM.\n> My idea wasn't to make hashing memory hungry; it was to make it IO-hungry.  It \n> wouldn't be too hard to make an ASIC with 32MB of RAM.  Especially if it \n> gained you a 1000x advantage over the other miners.  It seems that sort of \n> solution is exactly the one that Mike Hearn was warning against in his blog.\n\nI think you misundersood....  using ROMix-like algorithm, each hash\nrequires a different 32 MB of the blockchain.  Uniformly distributed\nthroughout the blockchain, and no way to predict which 32 MB until you\nhave actually executed it.   If the difficulty is high enough, your\nminer is likely to end up going through the entire X GB blockchain while\nsearching for a good hash, but other nodes will only need to do 32 MB\nworth of disk accesses to verify your answer (and it will be unknown\nwhich 32 MB until they do the 1,000,000 hash+lookup operations on their\nX GB blockchain).\n\nI think that strikes a good compromise of needing access to 100% of the\nblockchain, without requiring reading 20 GB to verify a block.\n\n(Replace N=1,000,000, 32 MB and 20 GB with the appropriately calibrated\nnumbers in the future)"
            },
            {
                "author": "Andy Parkins",
                "date": "2014-07-04T11:28:08",
                "message_text_only": "On Friday 04 July 2014 07:22:19 Alan Reiner wrote:\n\n> I think you misundersood....  using ROMix-like algorithm, each hash\n\nI did.  Sorry.\n\n> requires a different 32 MB of the blockchain.  Uniformly distributed\n> throughout the blockchain, and no way to predict which 32 MB until you\n> have actually executed it.   If the difficulty is high enough, your\n> miner is likely to end up going through the entire X GB blockchain while\n> searching for a good hash, but other nodes will only need to do 32 MB\n> worth of disk accesses to verify your answer (and it will be unknown\n> which 32 MB until they do the 1,000,000 hash+lookup operations on their\n> X GB blockchain).\n\nExcellent.\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-07-04T11:37:26",
                "message_text_only": "On Fri, Jul 4, 2014 at 3:27 AM, Andy Parkins <andyparkins at gmail.com> wrote:\n> Hello,\n>\n> I had a thought after reading Mike Hearn's blog about it being impossible to\n> have an ASIC-proof proof of work algorithm.\n>\n> Perhaps I'm being dim, but I thought I'd mention my thought anyway.\n\nThanks for sharing. Ideas similar to what you're describing have come\nup a number of times before.\n\nI believe the particular formulation you're suggesting is not workable\nfor a number of reasons.\n\nIf I understand what you're proposing correctly, it that it has very\nhigh (nearly symmetrical) verification costs, all the verifiers have\nto also hash all of that information to check the result. It is\nimperative for the system that the proof of work be cheap to verify,\nsince every system needs to verify it and have no incentive to skip\nverifying it, needs to use it to block DOS attacks, etc.\n\nI believe this design would also completely preclude lite nodes (SPV\nnodes, section 8 of https://bitcoin.org/bitcoin.pdf), which are the\nmost popular Bitcoin wallets. SPV wallets do not need to store the\nblockchain, in fact they technically need no storage at all\u2014 and are\nsecure, given some assumptions about the decentralization and honesty\nof mining. It would make Bitcoin more or less infeasible to use on\nmobile devices and force many people using wallets onto centralized\nservices providers which they'd have to trust to process their\ntransactions.\n\nAnother longer term side effect of making verification costly is that\nit makes it much less reasonable to provide zero knoweldge proofs for\ndata in Bitcoin\u2014 closing off a whole set of useful tools like strongly\nprivate proofs of solvency, and strongly private bitcoin-backed\npseudonymous identities.\n\nI also believe this would also break pruning (section 7 of\nbitcoin.pdf): Right now a fully validating node can be created that\nuses only on the order of 1GB of disk space, without pruning the\nnumber is 25 GB and the gap is just going to grow over time. The\nelimiating of pruning would be a major scalability hit.\n\nA smaller, but potentially still important issue is that the proposed\nproof of work function would be expensive to run even once. This may\nresult in it not being effectively progress free\u2014 if a miner would\ntypically only make a small number of tries before success then it\nwould make mining like a race where faster miners would have a\nsuper-linear advantage over others instead of statistically rewarding\nminers fairly.\n\nThere are ways to make what I think you're trying to accomplish work\nwith fewer tradeoffs that have been suggested before (see\nhttps://en.bitcoin.it/wiki/User:Gmaxwell/alt_ideas \"POW which involves\nqueries against the UTXO set\")... the general idea there is that the\ncandidate block header is used to randomly select one or a few random\nentries in the set of spendable coins (UTXO set), which are then\nincluded in the hashing. If the UTXO set is also committed in every\nblock via a hash tree when the miner finds a solution he can also\nextract a compact membership proof that shows the UTXO he included in\nhis hashing were the right ones.  This way the work can still be\nverified by systems that don't have the blockchain (though they may\nuse 10x more bandwidth\u2014 unfortunate on its own and perhaps enough to\nstill make zero knoweldge proofs less practical), and because the\nqueries are against the UTXO set instead of the whole blockchain it's\nnot incompatible with pruning.\n\nThough even with those fixes, I am far from sure that this would be\nhelpful: It would not preclude specialized high efficiency hardware\nfor mining (see https://download.wpsoftware.net/bitcoin/asic-faq.pdf\nfor set of general arguments in this space), and the hardware that\nexisted may not be actually useful for validation in much the same way\nthat you cannot use existing mining hardware as a general sha256\naccelerator.\n\nThis specialized hardware might look more like an massively parallel\nflash or dram array with integrated computation (e.g.\nhttp://www.eecg.toronto.edu/~dunc/cram/ )\u2014 and these differences may\nnot all be good: by shifting costs from operating energy to gate-count\nit moves the total costs into hardware which is one-time and amortized\nover use (generally for modern process, compute bound equipment costs\nmore in energy than the marginal costs in fabrication after a month or\ntwo of operation), potentially creating an advantage for\nearlier/larger participants. Plus a CRAM like design might also have\nmassive throughput advantages compared to commodity hardware operating\nin a bus limited mode its hard to say until millions have been sunk in\ntrying to optimize it, but even if it does not\u2014 one of the arguments\nmade in asic-faq.pdf is because mining should be, in theory, nearly\nperfect competition even the small advantage in costs from eliminating\nunneeded peripherals can basically drive everyone without that\nadvantage out.\n\nAs an aside, there is an altcoin \"boolberry\" that implements something\nwhere 2MB of data is extracted from the blockchain and then mined one.\nBut because the extraction is not in the inner-loop mining pools just\nsend it out to miners... and of course it could be uploaded to a\ndedicated mining coprocessor (or FPGA, or GPU) if anyone ever got\naround to doing the optimizations... it also has most of the other\nissues I raised above relative to your proposal. It's still too new to\nsee what failure modes it suffers the most from first, and the\naltcoins that it is mostly competing with suffer from their own ill\nadvised (_very slow_) POW.\n\n> Apologies in advance if this is a stupid idea.\n\nNo need to be sorry\u2014 talking about these things is how people learn.\nWhile I don't think this idea is good, and I'm even skeptical about\nfixed versions\u2014 I promise you many other people were thinking similar\nor even less useful things and will find the discussion interesting."
            },
            {
                "author": "Andy Parkins",
                "date": "2014-07-04T12:01:33",
                "message_text_only": "On Friday 04 July 2014 04:37:26 Gregory Maxwell wrote:\n\n[excellent explanation removed for brevity]\n\n> > Apologies in advance if this is a stupid idea.\n> \n> No need to be sorry\u2014 talking about these things is how people learn.\n> While I don't think this idea is good, and I'm even skeptical about\n> fixed versions\u2014 I promise you many other people were thinking similar\n> or even less useful things and will find the discussion interesting.\n\nThank you for the very thorough and courteous response.  I'm sorry that I \nsuggested something that had been thought of before (seems to be the case on \nevery great idea I have for Bitcoin) and was not practical; but I'm glad to \nhave had your response which was certainly educational for me.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-04T15:20:23",
                "message_text_only": "Yup, no need to apologise. If nothing else the conversations get archived\nwhere other people can use them to get up to speed faster. A lot of these\ndiscussions get spread across forums, lists and IRC so it can be hard to\nknow what the current state of the art thinking is.\n\nRecall the second prong of my opening argument - if you could beat ASICs,\nyou'd end up with botnets. I prefer having the chain be dominated by a\nsingle pool for a while than having one with a major botnet presence, given\ntheir history of doing things like mining empty blocks and giving random\npeople enormous electricity bills.\n\nI think we can make good head way if we just optimise a lot and finish\nthings off, to be honest. I'm not sure we need an algorithmic silver\nbullet. Remember you can always outsource mining by just not having any\nhardware at all, CEX style, so trying to prevent outsourcing using clever\nhacks seems ultimately doomed.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140704/1f440eab/attachment.html>"
            },
            {
                "author": "kjj",
                "date": "2014-07-04T16:50:00",
                "message_text_only": "Just some general comments on this topic/discussion.\n\nI suspect that there exist no algorithms which cannot be done better in \nan application-specific device than in a general purpose computer.  And \nif there is such a thing, then it must necessarily perform best on one \nspecific platform, making that platform the de facto application \nspecific device.\n\nI'm not sure how one would go about proving or disproving that, but it \nseems very likely to be true.\n\nIO-bound is exactly the same as memory bound, for devices that have \nenough memory.  20 GB is already trivial today, and you don't really get \ninto ask-the-wife-for-permission money until you cross 128 GB. The \nexception would be if the IO was to an oracle outside of the device's \ncontrol, and artificially limited in throughput.  Such a centralized \noracle would be contrary to the goals usually stated by people thinking \nabout anti-ASIC designs, so there isn't much point.\n\nKeeping the algorithm simple, and ASIC-easy, has one other advantage.  \nJust about anyone can sit down and design an ASIC for SHA, for example, \nleading to diversity in the marketplace.  A harder algorithm can still \nbe made into an ASIC (or more generally into an ASD), but will require \nmore skilled designers, more expensive fabrication, etc.  This actually \nconcentrates the ASIC advantage into the hands of fewer people, which \nagain, is contrary to the stated goals."
            },
            {
                "author": "Ron Elliott",
                "date": "2014-07-04T18:39:07",
                "message_text_only": "I feel everyone should re-read that last paragraph as it carries the most\nweight IMO.\n\n\nOn Fri, Jul 4, 2014 at 9:50 AM, kjj <bitcoin-devel at jerviss.org> wrote:\n\n> Just some general comments on this topic/discussion.\n>\n> I suspect that there exist no algorithms which cannot be done better in\n> an application-specific device than in a general purpose computer.  And\n> if there is such a thing, then it must necessarily perform best on one\n> specific platform, making that platform the de facto application\n> specific device.\n>\n> I'm not sure how one would go about proving or disproving that, but it\n> seems very likely to be true.\n>\n> IO-bound is exactly the same as memory bound, for devices that have\n> enough memory.  20 GB is already trivial today, and you don't really get\n> into ask-the-wife-for-permission money until you cross 128 GB. The\n> exception would be if the IO was to an oracle outside of the device's\n> control, and artificially limited in throughput.  Such a centralized\n> oracle would be contrary to the goals usually stated by people thinking\n> about anti-ASIC designs, so there isn't much point.\n>\n> Keeping the algorithm simple, and ASIC-easy, has one other advantage.\n> Just about anyone can sit down and design an ASIC for SHA, for example,\n> leading to diversity in the marketplace.  A harder algorithm can still\n> be made into an ASIC (or more generally into an ASD), but will require\n> more skilled designers, more expensive fabrication, etc.  This actually\n> concentrates the ASIC advantage into the hands of fewer people, which\n> again, is contrary to the stated goals.\n>\n>\n> ------------------------------------------------------------------------------\n> Open source business process management suite built on Java and Eclipse\n> Turn processes into business applications with Bonita BPM Community Edition\n> Quickly connect people, data, and systems into organized workflows\n> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n> http://p.sf.net/sfu/Bonitasoft\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \n- Ron\nend of line.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140704/99018773/attachment.html>"
            },
            {
                "author": "Aaron Voisine",
                "date": "2014-07-04T19:54:37",
                "message_text_only": "Agreed. If the POW is most efficient on general purpose CPUs, that\nmeans Intel, AMD and maybe IBM would be the only entities capable of\nproducing competitive mining equipment.\n\nAaron\n\n\nAaron Voisine\nbreadwallet.com\n\n\nOn Fri, Jul 4, 2014 at 11:39 AM, Ron Elliott <ronaldbelliott at gmail.com> wrote:\n> I feel everyone should re-read that last paragraph as it carries the most\n> weight IMO.\n>\n>\n> On Fri, Jul 4, 2014 at 9:50 AM, kjj <bitcoin-devel at jerviss.org> wrote:\n>>\n>> Just some general comments on this topic/discussion.\n>>\n>> I suspect that there exist no algorithms which cannot be done better in\n>> an application-specific device than in a general purpose computer.  And\n>> if there is such a thing, then it must necessarily perform best on one\n>> specific platform, making that platform the de facto application\n>> specific device.\n>>\n>> I'm not sure how one would go about proving or disproving that, but it\n>> seems very likely to be true.\n>>\n>> IO-bound is exactly the same as memory bound, for devices that have\n>> enough memory.  20 GB is already trivial today, and you don't really get\n>> into ask-the-wife-for-permission money until you cross 128 GB. The\n>> exception would be if the IO was to an oracle outside of the device's\n>> control, and artificially limited in throughput.  Such a centralized\n>> oracle would be contrary to the goals usually stated by people thinking\n>> about anti-ASIC designs, so there isn't much point.\n>>\n>> Keeping the algorithm simple, and ASIC-easy, has one other advantage.\n>> Just about anyone can sit down and design an ASIC for SHA, for example,\n>> leading to diversity in the marketplace.  A harder algorithm can still\n>> be made into an ASIC (or more generally into an ASD), but will require\n>> more skilled designers, more expensive fabrication, etc.  This actually\n>> concentrates the ASIC advantage into the hands of fewer people, which\n>> again, is contrary to the stated goals.\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Open source business process management suite built on Java and Eclipse\n>> Turn processes into business applications with Bonita BPM Community\n>> Edition\n>> Quickly connect people, data, and systems into organized workflows\n>> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n>> http://p.sf.net/sfu/Bonitasoft\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> --\n> - Ron\n> end of line.\n>\n> ------------------------------------------------------------------------------\n> Open source business process management suite built on Java and Eclipse\n> Turn processes into business applications with Bonita BPM Community Edition\n> Quickly connect people, data, and systems into organized workflows\n> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n> http://p.sf.net/sfu/Bonitasoft\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-07-04T20:21:42",
                "message_text_only": "On 7/4/14, kjj <bitcoin-devel at jerviss.org> wrote:\n> I suspect that there exist no algorithms which cannot be done better in\n> an application-specific device than in a general purpose computer.  And\n> if there is such a thing, then it must necessarily perform best on one\n> specific platform, making that platform the de facto application\n> specific device.\n>\n> I'm not sure how one would go about proving or disproving that, but it\n> seems very likely to be true.\n\nI assumed this was obvious and self-evident for anyone who knows what\na Turing machine is, but judging from the number of smart people\nwasting their time on the pursue of the \"anti-ASIC\" myth (also known\nas pow wankery) it seems I was wrong.\nAnything you can do with software you can do with hardware and\nviceversa (you can even do it with ropes and fire in Minecraft!!)\nDoes this really need any proof?\nI think it's the hard-pow cultists who have to provide a counterexample.\n\nVery often you just need to query-replace \"ASIC\" with \"specialized\nhardware\" to prove that what they're saying makes no sense.\n\n> Keeping the algorithm simple, and ASIC-easy, has one other advantage.\n> Just about anyone can sit down and design an ASIC for SHA, for example,\n> leading to diversity in the marketplace.  A harder algorithm can still\n> be made into an ASIC (or more generally into an ASD), but will require\n> more skilled designers, more expensive fabrication, etc.  This actually\n> concentrates the ASIC advantage into the hands of fewer people, which\n> again, is contrary to the stated goals.\n\nYep, I think this is the strongest argument against \"hard-pow\".\nBut unfortunately you even find people that want \"anti-ASIC without\nbeing anti-GPU\", which is funny because GPU just has Nvidia and AMD\nand because unlike \"anti-ASIC\", anti-GPU is actually possible (despite\nLitecoin's Scrypt having miserably failed on both accounts).\n\nInterestingly enough, Greg Maxwell told me that the energetc advantage\nof memory-hard pow ASICs is even greater than the advantage for SHA\nASICs.\n\nAnyway, I'm working on a branch to encapsulate the proof of work that\nshould serve people to more easily experiment with alternate proofs on\ntop of bitcoind's code. I plan to use it for private chains (\"proof of\nsignature\" or \"proof of script\" if you prefer), and although it's not\nready yet, some people may be interested or may want to give some\nfeedback:\n\nhttps://github.com/jtimon/bitcoin/tree/proof\n\nI don't know if it will make it into master, but by specializing\nProofOfWork with TestnetProofOfWork we could remove\nParams().AllowMinDifficultyBlocks() and its checks.\n\n-- \nJorge Tim\u00f3n"
            },
            {
                "author": "Luke Dashjr",
                "date": "2014-07-04T20:38:30",
                "message_text_only": "On Friday, July 04, 2014 8:21:42 PM Jorge Tim\u00f3n wrote:\n> On 7/4/14, kjj <bitcoin-devel at jerviss.org> wrote:\n> > I suspect that there exist no algorithms which cannot be done better in\n> > an application-specific device than in a general purpose computer.  And\n> > if there is such a thing, then it must necessarily perform best on one\n> > specific platform, making that platform the de facto application\n> > specific device.\n> > \n> > I'm not sure how one would go about proving or disproving that, but it\n> > seems very likely to be true.\n> \n> I assumed this was obvious and self-evident for anyone who knows what\n> a Turing machine is, but judging from the number of smart people\n> wasting their time on the pursue of the \"anti-ASIC\" myth (also known\n> as pow wankery) it seems I was wrong.\n> Anything you can do with software you can do with hardware and\n> viceversa (you can even do it with ropes and fire in Minecraft!!)\n> Does this really need any proof?\n> I think it's the hard-pow cultists who have to provide a counterexample.\n\nReally, if people want to pursue a goal anything like this, they should be \nlooking for \"ASIC already widely owned\" as the property rather than \"anti-\nASIC\". Thus, a sufficiently memory-hard PoW would really be \"RAM is the ASIC\". \nWhether it's possible to make this or not, is another question. And then we \nget back to \"is is really a desirable property to have people capable of \nmining who have not given any indication of interest?\""
            },
            {
                "author": "Randi Joseph",
                "date": "2014-07-04T20:55:04",
                "message_text_only": "Hi All,\n\nThis is a bit tangential to the conversation, but since the genesis of \nthis conversation is Mike's decentralization blog post, I decided to \npost here.\n\nPerhaps the solution to the mining problem lies in the reward structure \nrather than in the proof of work/asics.\n\nIs it possible instead to allocate a portion of the reward to \" a # of \nrunner up(s)\" even though the runner-up(s) block will be orphaned? For \nexample, X% of the block reward goes to Y number of runner-ups based on \nsome type of criteria?\n\nThis will appear to be a bit like a tax on the winner, but it could \npotentially solve the problem, since a large pool would not want to \nsplit the pool up to solve multiple blocks.\n\nThere are some possible downsides, like probably having to keep those \norphaned blocks around in the future, etc.\n\nIf this is possible, the question that remains then, what would be the \ncriteria for the X% payout/allocation?\n\n-Randi"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-05T08:43:05",
                "message_text_only": ">\n> Is it possible instead to allocate a portion of the reward to \" a # of\n> runner up(s)\" even though the runner-up(s) block will be orphaned?\n>\n\nThere's really no concept of a \"runner up\" because hashing is progress\nfree. It's unintuitive and often trips people up. There's no concept that\neveryone is 95% of the way to finding a solution and then someone pips you\nto the post. It's more like playing the lottery over and over again.\nDoesn't matter how many times you did it before, the next time your chances\nare the same.\n\nA better concept is of rewarding \"near miss\" solutions which is what we\nalready do of course, via pools, which pay you for shares which don't quite\nmeet the difficulty target but almost do. So the question is how can we\nimplement pools which have this reward structure (which obviously works\nwell) without miners simultaneously giving up their right to block creation\neither due to technical problems or sheer lazyness.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140705/1d09c441/attachment.html>"
            },
            {
                "author": "Randi Joseph",
                "date": "2014-07-07T00:20:38",
                "message_text_only": "Thanks Mike.\n\nIndeed, I am aware of current approach, which is why I was suggesting \nthis as an alternative.\nI haven't thought about it enough, and perhaps it was too radical a \nrethinking - just wanted to see what the smarter minds thought.\n\nThanks again.\n\n-Randi\n\nOn 7/5/14, 4:43 AM, Mike Hearn wrote:\n>\n>     Is it possible instead to allocate a portion of the reward to \" a # of\n>     runner up(s)\" even though the runner-up(s) block will be orphaned?\n>\n>\n> There's really no concept of a \"runner up\" because hashing is progress \n> free. It's unintuitive and often trips people up. There's no concept \n> that everyone is 95% of the way to finding a solution and then someone \n> pips you to the post. It's more like playing the lottery over and over \n> again. Doesn't matter how many times you did it before, the next time \n> your chances are the same.\n>\n> A better concept is of rewarding \"near miss\" solutions which is what \n> we already do of course, via pools, which pay you for shares which \n> don't quite meet the difficulty target but almost do. So the question \n> is how can we implement pools which have this reward structure (which \n> obviously works well) without miners simultaneously giving up their \n> right to block creation either due to technical problems or sheer \n> lazyness.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140706/1936adfc/attachment.html>"
            },
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2014-07-07T06:12:42",
                "message_text_only": "Just as an aside to this lengthy convo, the Cryptonote-based BCN recently\nhad some interesting updates which made it easier for ordinary computers\n(nothing special) to handle it.\n\nI realize that's not Bitcoin, but I thought I'd throw it out there.\n\n> Thanks Mike.\n>\n> Indeed, I am aware of current approach, which is why I was suggesting\n> this as an alternative.\n> I haven't thought about it enough, and perhaps it was too radical a\n> rethinking - just wanted to see what the smarter minds thought.\n>\n> Thanks again.\n>\n> -Randi\n>\n> On 7/5/14, 4:43 AM, Mike Hearn wrote:\n>>\n>>     Is it possible instead to allocate a portion of the reward to \" a #\n>> of\n>>     runner up(s)\" even though the runner-up(s) block will be orphaned?\n>>\n>>\n>> There's really no concept of a \"runner up\" because hashing is progress\n>> free. It's unintuitive and often trips people up. There's no concept\n>> that everyone is 95% of the way to finding a solution and then someone\n>> pips you to the post. It's more like playing the lottery over and over\n>> again. Doesn't matter how many times you did it before, the next time\n>> your chances are the same.\n>>\n>> A better concept is of rewarding \"near miss\" solutions which is what\n>> we already do of course, via pools, which pay you for shares which\n>> don't quite meet the difficulty target but almost do. So the question\n>> is how can we implement pools which have this reward structure (which\n>> obviously works well) without miners simultaneously giving up their\n>> right to block creation either due to technical problems or sheer\n>> lazyness.\n>\n> ------------------------------------------------------------------------------\n> Open source business process management suite built on Java and Eclipse\n> Turn processes into business applications with Bonita BPM Community\n> Edition\n> Quickly connect people, data, and systems into organized workflows\n> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n> http://p.sf.net/sfu/Bonitasoft_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            }
        ],
        "thread_summary": {
            "title": "ASIC-proof mining",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Randi Joseph",
                "kjj",
                "Odinn Cyberguerrilla",
                "Mike Hearn",
                "Eugen Leitl",
                "Ron Elliott",
                "Alan Reiner",
                "Andy Parkins",
                "Gregory Maxwell",
                "Jorge Tim\u00f3n",
                "Luke Dashjr",
                "Aaron Voisine"
            ],
            "messages_count": 18,
            "total_messages_chars_count": 34837
        }
    },
    {
        "title": "[Bitcoin-development] Draft BIP for geutxos message",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2014-07-10T14:29:12",
                "message_text_only": "I opened up a pull req for a draft BIP for getutxo.\n\n   https://github.com/bitcoin/bips/pull/88\n\nI include a rendering below for your reading convenience. If you'd like to\ncomment on design/security/etc then please first familiarise yourself with\nthe long discussions that were already had here:\n\n   https://github.com/bitcoin/bitcoin/pull/4351\n\n\n  BIP: 45\n  Title: getutxo message\n  Author: Mike Hearn <hearn at vinumeris.com>\n  Status: Draft\n  Type: Standards Track\n  Created: 2014-06-10\n\nTable of Contents\n\n   - Abstract\n      <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Abstract>\n      - Motivation\n      <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Motivation>\n      - Specification\n      <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Specification>\n      - Backward compatibility\n      <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Backward_compatibility>\n      - Authentication\n      <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Authentication>\n      - Implementation\n      <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Implementation>\n\n<https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#abstract>\nAbstract\n\nThis document describes a small P2P protocol extension that performs UTXO\nlookups given a set of outpoints.\n<https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#motivation>\nMotivation\n\nAll full Bitcoin nodes maintain a database called the unspent transaction\noutput set. This set is how double spending is checked for: to be valid a\ntransaction must identify unspent outputs in this set using an identifier\ncalled an \"outpoint\", which is merely the hash of the output's containing\ntransaction plus an index.\n\nThe ability to query this can sometimes be useful for a lightweight/SPV\nclient which does not have the full UTXO set at hand. For example, it can\nbe useful in applications implementing assurance contracts to do a quick\ncheck when a new pledge becomes visible to test whether that pledge was\nalready revoked via a double spend. Although this message is not strictly\nnecessary because e.g. such an app could be implemented by fully\ndownloading and storing the block chain, it is useful for obtaining\nacceptable performance and resolving various UI cases.\n\nAnother example of when this data can be useful is for performing floating\nfee calculations in an SPV wallet. This use case requires some other\nchanges to the Bitcoin protocol however, so we will not dwell on it here.\n<https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#specification>\nSpecification\n\nTwo new messages are defined. The \"getutxos\" message has the following\nstructure:\n\nField SizeDescriptionData typeComments1check mempoolboolWhether to apply\nmempool transactions during the calculation, thus exposing their UTXOs and\nremoving outputs that they spend.?outpointsvectorThe list of outpoints to\nbe queried. Each outpoint is serialized in the same way it is in a tx\nmessage.\n\nThe response message \"utxos\" has the following structure:\n\nField SizeDescriptionData typeComments4chain heightuint32The height of the\nchain at the moment the result was calculated.32chain tip hashuint256Block\nhash of the top of the chain at the moment the result was calculated.?hit\nbitmapbyte[]An array of bytes encoding one bit for each outpoint queried.\nEach bit indicates whether the queried outpoint was found in the UTXO set\nor not.?result utxosresult[]A list of result objects (defined below), one\nfor each outpoint that is unspent (i.e. has a bit set in the bitmap).\n\nThe result object is defined as:\n\nField SizeDescriptionData typeComments4tx versionuint32The version number\nof the transaction the UTXO was found in.4heightuint256The height of the\nblock containing the defining transaction, or 0x7FFFFFFF if the tx is in\nthe mempool.?outputCTxOutThe output itself, serialized in the same way as\nin a tx message.\n<https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#backward-compatibility>Backward\ncompatibility\n\nNodes indicate support by advertising a protocol version above 70003 and by\nsetting a new NODE_GETUTXO flag in their nServices field, which has a value\nof 2 (1\n<https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#authentication>\nAuthentication\n\nThe UTXO set is not currently authenticated by anything. There are\nproposals to resolve this by introducing a new consensus rule that commits\nto a root hash of the UTXO set in blocks, however this feature is not\npresently available in the Bitcoin protocol. Once it is, the utxos message\ncould be upgraded to include Merkle branches showing inclusion of the UTXOs\nin the committed sets.\n\nIf the requesting client is looking up outputs for a signed transaction\nthat they have locally, the client can partly verify the returned output by\nrunning the input scripts with it. Currently this verifies only that the\nscript is correct. A future version of the Bitcoin protocol is likely to\nalso allow the value to be checked in this way. It does not show that the\noutput is really unspent or was ever actually created in the block chain\nhowever.\n\nIf the requesting client has a mapping of chain heights to block hashes in\nthe best chain e.g. obtained via getheaders, then they can obtain a proof\nthat the output did at one point exist by requesting the block and\nsearching for the output within it. When combined with Bloom filtering this\ncan be reasonably efficient.\n\nNote that even when the outputs are being checked against something this\nprotocol has the same security model as Bloom filtering: a remote node can\nlie through omission by claiming the requested UTXO does not exist / was\nalready spent (they are the same, from the perspective of a full node).\nQuerying multiple nodes and combining their answers can be a partial\nsolution to this, although as nothing authenticates the Bitcoin P2P network\na man in the middle could still yield incorrect results.\n<https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#implementation>\nImplementation\n\nhttps://github.com/bitcoin/bitcoin/pull/4351/files\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140710/d173eed7/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-10T14:44:11",
                "message_text_only": "I took the number out, it is now just \"the getutxo bip\" until a number is\nassigned.\n\n\nOn Thu, Jul 10, 2014 at 4:29 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> I opened up a pull req for a draft BIP for getutxo.\n>\n>    https://github.com/bitcoin/bips/pull/88\n>\n> I include a rendering below for your reading convenience. If you'd like to\n> comment on design/security/etc then please first familiarise yourself with\n> the long discussions that were already had here:\n>\n>    https://github.com/bitcoin/bitcoin/pull/4351\n>\n>\n>   BIP: 45\n>   Title: getutxo message\n>   Author: Mike Hearn <hearn at vinumeris.com>\n>   Status: Draft\n>   Type: Standards Track\n>   Created: 2014-06-10\n>\n>  Table of Contents\n>\n>    - Abstract\n>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Abstract>\n>       - Motivation\n>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Motivation>\n>       - Specification\n>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Specification>\n>       - Backward compatibility\n>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Backward_compatibility>\n>       - Authentication\n>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Authentication>\n>       - Implementation\n>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Implementation>\n>\n>\n> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#abstract>\n> Abstract\n>\n> This document describes a small P2P protocol extension that performs UTXO\n> lookups given a set of outpoints.\n>\n> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#motivation>\n> Motivation\n>\n> All full Bitcoin nodes maintain a database called the unspent transaction\n> output set. This set is how double spending is checked for: to be valid a\n> transaction must identify unspent outputs in this set using an identifier\n> called an \"outpoint\", which is merely the hash of the output's containing\n> transaction plus an index.\n>\n> The ability to query this can sometimes be useful for a lightweight/SPV\n> client which does not have the full UTXO set at hand. For example, it can\n> be useful in applications implementing assurance contracts to do a quick\n> check when a new pledge becomes visible to test whether that pledge was\n> already revoked via a double spend. Although this message is not strictly\n> necessary because e.g. such an app could be implemented by fully\n> downloading and storing the block chain, it is useful for obtaining\n> acceptable performance and resolving various UI cases.\n>\n> Another example of when this data can be useful is for performing floating\n> fee calculations in an SPV wallet. This use case requires some other\n> changes to the Bitcoin protocol however, so we will not dwell on it here.\n>\n> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#specification>\n> Specification\n>\n> Two new messages are defined. The \"getutxos\" message has the following\n> structure:\n>\n>  Field Size DescriptionData typeComments 1check mempoolbool Whether to\n> apply mempool transactions during the calculation, thus exposing their\n> UTXOs and removing outputs that they spend. ?outpointsvector The list of\n> outpoints to be queried. Each outpoint is serialized in the same way it is\n> in a tx message.\n>\n> The response message \"utxos\" has the following structure:\n>\n>  Field Size DescriptionData typeComments 4chain heightuint32 The height\n> of the chain at the moment the result was calculated. 32chain tip hash\n> uint256 Block hash of the top of the chain at the moment the result was\n> calculated. ?hit bitmapbyte[] An array of bytes encoding one bit for each\n> outpoint queried. Each bit indicates whether the queried outpoint was found\n> in the UTXO set or not. ?result utxosresult[] A list of result objects\n> (defined below), one for each outpoint that is unspent (i.e. has a bit set\n> in the bitmap).\n>\n> The result object is defined as:\n>\n>  Field Size DescriptionData typeComments 4tx versionuint32 The version\n> number of the transaction the UTXO was found in. 4heightuint256 The\n> height of the block containing the defining transaction, or 0x7FFFFFFF if\n> the tx is in the mempool. ?outputCTxOut The output itself, serialized in\n> the same way as in a tx message.\n> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#backward-compatibility>Backward\n> compatibility\n>\n> Nodes indicate support by advertising a protocol version above 70003 and\n> by setting a new NODE_GETUTXO flag in their nServices field, which has a\n> value of 2 (1\n>\n> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#authentication>\n> Authentication\n>\n> The UTXO set is not currently authenticated by anything. There are\n> proposals to resolve this by introducing a new consensus rule that commits\n> to a root hash of the UTXO set in blocks, however this feature is not\n> presently available in the Bitcoin protocol. Once it is, the utxos message\n> could be upgraded to include Merkle branches showing inclusion of the UTXOs\n> in the committed sets.\n>\n> If the requesting client is looking up outputs for a signed transaction\n> that they have locally, the client can partly verify the returned output by\n> running the input scripts with it. Currently this verifies only that the\n> script is correct. A future version of the Bitcoin protocol is likely to\n> also allow the value to be checked in this way. It does not show that the\n> output is really unspent or was ever actually created in the block chain\n> however.\n>\n> If the requesting client has a mapping of chain heights to block hashes in\n> the best chain e.g. obtained via getheaders, then they can obtain a proof\n> that the output did at one point exist by requesting the block and\n> searching for the output within it. When combined with Bloom filtering this\n> can be reasonably efficient.\n>\n> Note that even when the outputs are being checked against something this\n> protocol has the same security model as Bloom filtering: a remote node can\n> lie through omission by claiming the requested UTXO does not exist / was\n> already spent (they are the same, from the perspective of a full node).\n> Querying multiple nodes and combining their answers can be a partial\n> solution to this, although as nothing authenticates the Bitcoin P2P network\n> a man in the middle could still yield incorrect results.\n>\n> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#implementation>\n> Implementation\n>\n> https://github.com/bitcoin/bitcoin/pull/4351/files\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140710/35e305eb/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-16T12:11:39",
                "message_text_only": "Thanks Mike.  The BIPS process is ideally an implementation & draft BIP,\nlike IETF RFCs.  Thanks for being a model citizen.  :)  Having an idea is\ngood; having an implementation is better.\n\nReviewing the code at the pull request, it appears OK, and I did give it a\nquick test.  I have a few minor nits that I'll put in the PR, that are not\nworth mentioning here.\n\nBeing able to query UTXOs is obviously useful.  Many existing applications\nhave been built on top of bitcoind (gettxout RPC), insight and other\nexisting tools that make this query available.  This is not a new feature.\nThat effectively reduces our evaluation to\n\n     1. Why implement in P2P protocol, versus RPC or external API?\n\nNeither your pull request nor email addresses this much.  I do understand\nyour app uses \"getutxos\"  But it is entirely fair and reasonable to ask why\nall bitcoind users should carry this feature.\n\nTurning to the protocol itself, \"getutxos\" does what is expected:  Return\nthat node's view of the UTXO set.  This bring us to the main issue I and\nothers raised in the pull request,\n\n     2. This view of UTXO is entirely untrusted, may be malicious or\nwrong.  Why export potentially dangerous information to victims?  What are\nthe consequences to the victims of receiving targeted, maliciously wrong\nreturned data?\n\nLet us assume for the sake of progress that #2 is answered to\nsatisfaction.  In my view, the BIP (and implementation? haven't looked at\nlighthouse) is missing\n\n     3. An explicit solution to #2.\n\nIf one implements your BIP in a naive manner -- simply find a node, and\nissue a single query -- they are dangerously exposed to malicious\ninformation.  The BIP should describe this major security issue, and\ndescribe at least one method of solving it (ditto implementation, if\nlighthouse has not already solved this).\n\nComparison between this and BIP 35 (mempool command) are not apt, as miners\nand full nodes treat \"mempool\" returned data just like any other randomly\nsolicited \"tx\" command on the network.  Unlike \"mempool\" cmd, this\n\"getutxos\" cmd proffers post-verification trusted data.\n\nI fear that this addition will lead to people building insecure apps, when\nthey could have just as easily queried a\nslightly-more-trusted-than-just-a-random-P2P-peer network of N bitcoind's\nor N Insight servers running somewhere (akin to Electrum servers).\n\n\n\n\n\n\n\n\nOn Thu, Jul 10, 2014 at 10:29 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> I opened up a pull req for a draft BIP for getutxo.\n>\n>    https://github.com/bitcoin/bips/pull/88\n>\n> I include a rendering below for your reading convenience. If you'd like to\n> comment on design/security/etc then please first familiarise yourself with\n> the long discussions that were already had here:\n>\n>    https://github.com/bitcoin/bitcoin/pull/4351\n>\n>\n>\n>   BIP: 45\n>   Title: getutxo message\n>   Author: Mike Hearn <hearn at vinumeris.com>\n>   Status: Draft\n>   Type: Standards Track\n>   Created: 2014-06-10\n>\n>  Table of Contents\n>\n>    - Abstract\n>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Abstract>\n>       - Motivation\n>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Motivation>\n>       - Specification\n>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Specification>\n>       - Backward compatibility\n>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Backward_compatibility>\n>       - Authentication\n>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Authentication>\n>       - Implementation\n>       <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#Implementation>\n>\n>\n> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#abstract>\n> Abstract\n>\n> This document describes a small P2P protocol extension that performs UTXO\n> lookups given a set of outpoints.\n>\n> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#motivation>\n> Motivation\n>\n> All full Bitcoin nodes maintain a database called the unspent transaction\n> output set. This set is how double spending is checked for: to be valid a\n> transaction must identify unspent outputs in this set using an identifier\n> called an \"outpoint\", which is merely the hash of the output's containing\n> transaction plus an index.\n>\n> The ability to query this can sometimes be useful for a lightweight/SPV\n> client which does not have the full UTXO set at hand. For example, it can\n> be useful in applications implementing assurance contracts to do a quick\n> check when a new pledge becomes visible to test whether that pledge was\n> already revoked via a double spend. Although this message is not strictly\n> necessary because e.g. such an app could be implemented by fully\n> downloading and storing the block chain, it is useful for obtaining\n> acceptable performance and resolving various UI cases.\n>\n> Another example of when this data can be useful is for performing floating\n> fee calculations in an SPV wallet. This use case requires some other\n> changes to the Bitcoin protocol however, so we will not dwell on it here.\n>\n> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#specification>\n> Specification\n>\n> Two new messages are defined. The \"getutxos\" message has the following\n> structure:\n>\n>  Field Size DescriptionData typeComments 1check mempoolbool Whether to\n> apply mempool transactions during the calculation, thus exposing their\n> UTXOs and removing outputs that they spend. ?outpointsvector The list of\n> outpoints to be queried. Each outpoint is serialized in the same way it is\n> in a tx message.\n>\n> The response message \"utxos\" has the following structure:\n>\n>  Field Size DescriptionData typeComments 4chain heightuint32 The height\n> of the chain at the moment the result was calculated. 32chain tip hash\n> uint256 Block hash of the top of the chain at the moment the result was\n> calculated. ?hit bitmapbyte[] An array of bytes encoding one bit for each\n> outpoint queried. Each bit indicates whether the queried outpoint was found\n> in the UTXO set or not. ?result utxosresult[] A list of result objects\n> (defined below), one for each outpoint that is unspent (i.e. has a bit set\n> in the bitmap).\n>\n> The result object is defined as:\n>\n>  Field Size DescriptionData typeComments 4tx versionuint32 The version\n> number of the transaction the UTXO was found in. 4heightuint256 The\n> height of the block containing the defining transaction, or 0x7FFFFFFF if\n> the tx is in the mempool. ?outputCTxOut The output itself, serialized in\n> the same way as in a tx message.\n> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#backward-compatibility>Backward\n> compatibility\n>\n> Nodes indicate support by advertising a protocol version above 70003 and\n> by setting a new NODE_GETUTXO flag in their nServices field, which has a\n> value of 2 (1\n>\n> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#authentication>\n> Authentication\n>\n> The UTXO set is not currently authenticated by anything. There are\n> proposals to resolve this by introducing a new consensus rule that commits\n> to a root hash of the UTXO set in blocks, however this feature is not\n> presently available in the Bitcoin protocol. Once it is, the utxos message\n> could be upgraded to include Merkle branches showing inclusion of the UTXOs\n> in the committed sets.\n>\n> If the requesting client is looking up outputs for a signed transaction\n> that they have locally, the client can partly verify the returned output by\n> running the input scripts with it. Currently this verifies only that the\n> script is correct. A future version of the Bitcoin protocol is likely to\n> also allow the value to be checked in this way. It does not show that the\n> output is really unspent or was ever actually created in the block chain\n> however.\n>\n> If the requesting client has a mapping of chain heights to block hashes in\n> the best chain e.g. obtained via getheaders, then they can obtain a proof\n> that the output did at one point exist by requesting the block and\n> searching for the output within it. When combined with Bloom filtering this\n> can be reasonably efficient.\n>\n> Note that even when the outputs are being checked against something this\n> protocol has the same security model as Bloom filtering: a remote node can\n> lie through omission by claiming the requested UTXO does not exist / was\n> already spent (they are the same, from the perspective of a full node).\n> Querying multiple nodes and combining their answers can be a partial\n> solution to this, although as nothing authenticates the Bitcoin P2P network\n> a man in the middle could still yield incorrect results.\n>\n> <https://github.com/mikehearn/bips/commit/6058b92f5d9804ee4104649f53afc2fa53248c81?short_path=35c7795#implementation>\n> Implementation\n>\n> https://github.com/bitcoin/bitcoin/pull/4351/files\n>\n>\n> ------------------------------------------------------------------------------\n> Open source business process management suite built on Java and Eclipse\n> Turn processes into business applications with Bonita BPM Community Edition\n> Quickly connect people, data, and systems into organized workflows\n> Winner of BOSSIE, CODIE, OW2 and Gartner awards\n> http://p.sf.net/sfu/Bonitasoft\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140716/3bfd6f03/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-16T12:37:35",
                "message_text_only": "Thanks Jeff.\n\nI do feel like a lot of this is covered in the writeup I attached to the\nimplementation pull request, and I went over it again in the ensuing\ndiscussion, and also in the BIP.\n\nThe discussion of how to make it secure is covered in the \"Upgrade\" section\nof the writeup and in the \"Authentication\" section of the BIP. Please do\nlet me know if these sections are missing something. The ideas discussed\nthere are not implemented in this pull request because outside of some\nspecial cases, it is a very large project that involves a chain fork. You\ncan see the start of a solution here:\n\nhttps://github.com/bitcoin/bitcoin/pull/3977\n\n\n> If one implements your BIP in a naive manner -- simply find a node, and\n> issue a single query -- they are dangerously exposed to malicious\n> information.  The BIP should describe this major security issue, and\n> describe at least one method of solving it (ditto implementation, if\n> lighthouse has not already solved this).\n>\n\nThe BIP already does discuss this, in the authentication section.\nSuggestions for how to make it better are welcome.\n\n\n> Comparison between this and BIP 35 (mempool command) are not apt, as\n> miners and full nodes treat \"mempool\" returned data just like any other\n> randomly solicited \"tx\" command on the network.  Unlike \"mempool\" cmd, this\n> \"getutxos\" cmd proffers post-verification trusted data.\n>\n\nI don't think it does proffer that, but if a part of the BIP could be read\nas doing so, let me know which part and I'll fix it.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140716/21762d74/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-16T14:25:17",
                "message_text_only": "On the specific issue I raised, the BIP only says \"Querying multiple\nnodes and combining their answers can be a partial solution to this\"\nwhich is not very helpful advice.  That's a partial answer to my\nquestion #2 with zero response for question #3.\n\nThis sort of thing really needs a warning label like \"use only if you\ndon't have a trusted solution\" and discussion of that choice is\ncompletely absent (question #1).\n\n\nOn Wed, Jul 16, 2014 at 8:37 AM, Mike Hearn <mike at plan99.net> wrote:\n> Thanks Jeff.\n>\n> I do feel like a lot of this is covered in the writeup I attached to the\n> implementation pull request, and I went over it again in the ensuing\n> discussion, and also in the BIP.\n>\n> The discussion of how to make it secure is covered in the \"Upgrade\" section\n> of the writeup and in the \"Authentication\" section of the BIP. Please do let\n> me know if these sections are missing something. The ideas discussed there\n> are not implemented in this pull request because outside of some special\n> cases, it is a very large project that involves a chain fork. You can see\n> the start of a solution here:\n>\n> https://github.com/bitcoin/bitcoin/pull/3977\n>\n>>\n>> If one implements your BIP in a naive manner -- simply find a node, and\n>> issue a single query -- they are dangerously exposed to malicious\n>> information.  The BIP should describe this major security issue, and\n>> describe at least one method of solving it (ditto implementation, if\n>> lighthouse has not already solved this).\n>\n>\n> The BIP already does discuss this, in the authentication section.\n> Suggestions for how to make it better are welcome.\n>\n>>\n>> Comparison between this and BIP 35 (mempool command) are not apt, as\n>> miners and full nodes treat \"mempool\" returned data just like any other\n>> randomly solicited \"tx\" command on the network.  Unlike \"mempool\" cmd, this\n>> \"getutxos\" cmd proffers post-verification trusted data.\n>\n>\n> I don't think it does proffer that, but if a part of the BIP could be read\n> as doing so, let me know which part and I'll fix it.\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-16T14:39:53",
                "message_text_only": ">\n> On the specific issue I raised, the BIP only says \"Querying multiple\n> nodes and combining their answers can be a partial solution to this\"\n> which is not very helpful advice.  That's a partial answer to my\n> question #2 with zero response for question #3.\n>\n\nI'm sorry you think it's unhelpful. It is nonetheless the best that can be\ndone within the constraints of the current Bitcoin protocol.\n\n\n> This sort of thing really needs a warning label like \"use only if you\n> don't have a trusted solution\" and discussion of that choice is\n> completely absent (question #1).\n>\n\nIt's absent for the same reason it's absent for all the other protocol\nBIPs: the ability to use a trusted third party is always present and a\npossible answer for any problem in Bitcoin. So I figured it didn't need\nstating.\n\nHow about adding the following sentence:\n\n\"If the above constraints are insufficient for your use case, you can\nalternatively query a block explorer or other trusted third party to obtain\nthe same information\".\n\nWould that make the BIP clearer?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140716/24562488/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-07-16T14:57:06",
                "message_text_only": "On Wed, Jul 16, 2014 at 7:25 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> On the specific issue I raised, the BIP only says \"Querying multiple\n> nodes and combining their answers can be a partial solution to this\"\n> which is not very helpful advice.  That's a partial answer to my\n> question #2 with zero response for question #3.\n>\n> This sort of thing really needs a warning label like \"use only if you\n> don't have a trusted solution\" and discussion of that choice is\n> completely absent (question #1).\n\nIn IETF documents there is a required security considerations section,\nsee http://tools.ietf.org/html/bcp72\n\nIn many of our documents the whole thing is a security consideration\nbut for ones like these we should probably always document the\nweaknesses as set out from the rest of the document.  See how BIP32\nenumerates the one-private-key-breaks the chain.\n\nOn this point the getutxos document is doing well.  Perhaps breaking\nsome things out of the auth section into a security /\nsecurity-limitations section.  In particular, can this document\nspecifically call out that a local network attacker can MITM all the\npeers.\n\n(If Mike would prefer, I can send a diff with proposed changes)"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-16T15:01:20",
                "message_text_only": ">\n> In particular, can this document\n> specifically call out that a local network attacker can MITM all the\n> peers.\n\n\nIt already does, last sentence of the authentication section is:\n\nQuerying multiple nodes and combining their answers can be a partial\nsolution to this, although as nothing authenticates the Bitcoin P2P network\na man in the middle could still yield incorrect results\n\n\n\n> (If Mike would prefer, I can send a diff with proposed changes)\n>\n\nYes please.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140716/36c2bbd0/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Draft BIP for geutxos message",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Mike Hearn",
                "Gregory Maxwell"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 30975
        }
    },
    {
        "title": "[Bitcoin-development] floating fees statistics",
        "thread_messages": [
            {
                "author": "Harald Schilly",
                "date": "2014-07-12T21:05:36",
                "message_text_only": "Hi\n\nI've looked into this new floating fees algorithm. What I've started\nis an ipython notebook to gather data and look into some statistics.\nRight now it's probably not so exciting because the rules aren't\nactive, but maybe someone is interested in this or wants to extend it\na bit.\n\nnotebook:\nhttp://nbviewer.ipython.org/github/haraldschilly/bitcoin-floating-fee-statistics/blob/master/estimatefee.ipynb\n\nsource:\nhttps://github.com/haraldschilly/bitcoin-floating-fee-statistics/\n\nThe probably most interesting graph is the one attached. It's the time\nseries of the estimated fees per confirmation level over the course of\n4 hours. The vertical green lines indicate where new blocks have been\nfound.\n\nHarald\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: index.png\nType: image/png\nSize: 18631 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140712/e839d797/attachment.png>"
            }
        ],
        "thread_summary": {
            "title": "floating fees statistics",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Harald Schilly"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 963
        }
    },
    {
        "title": "[Bitcoin-development] Self-dependency transaction question...",
        "thread_messages": [
            {
                "author": "Richard Moore",
                "date": "2014-07-13T23:32:51",
                "message_text_only": "Hey all,\n\nI'm working on the UTXO database for my Python implementation of bitcoind and have found a situation I did not realize was valid, but since it seems to be, had a quick question.\n\nIf you look at block #546 the 4th transaction's first input uses its own block's 3rd transaction as an input.\nhttps://blockchain.info/block/000000005a4ded781e667e06ceefafb71410b511fe0d5adc3e5a27ecbec34ae6\n\nMy question is, would the other way be valid, that is, could the 3rd transaction of a block, use the 4th transaction from the same block as an input? Or are transactions processed strictly top to bottom?\n\nThanks,\nRicMoo\n\nP.S. If it is valid, another question; what would happen if a transaction was self-referencing? I realize it would be very difficult to find one, but if I could find a transaction X whose input was X and had an output Y, would Y be a new valid utxo, without being a generation transaction input?\n\n.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8><(((\u00ba>\n\nRichard Moore ~ Founder\nGenetic Mistakes Software inc.\nphone: (778) 882-6125\nemail: ricmoo at geneticmistakes.com\nwww: http://GeneticMistakes.com\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140713/8ed59da4/attachment.html>"
            },
            {
                "author": "Aaron Voisine",
                "date": "2014-07-14T02:25:51",
                "message_text_only": "I believe tx have to be ordered sequentially within a block. Also\nsince a tx is referenced by it's hash, it's practically impossible to\nmake a self referential tx.\n\nAaron Voisine\nbreadwallet.com\n\n\nOn Sun, Jul 13, 2014 at 4:32 PM, Richard Moore <me at ricmoo.com> wrote:\n> Hey all,\n>\n> I'm working on the UTXO database for my Python implementation of bitcoind\n> and have found a situation I did not realize was valid, but since it seems\n> to be, had a quick question.\n>\n> If you look at block #546 the 4th transaction's first input uses its own\n> block's 3rd transaction as an input.\n> https://blockchain.info/block/000000005a4ded781e667e06ceefafb71410b511fe0d5adc3e5a27ecbec34ae6\n>\n> My question is, would the other way be valid, that is, could the 3rd\n> transaction of a block, use the 4th transaction from the same block as an\n> input? Or are transactions processed strictly top to bottom?\n>\n> Thanks,\n> RicMoo\n>\n> P.S. If it is valid, another question; what would happen if a transaction\n> was self-referencing? I realize it would be very difficult to find one, but\n> if I could find a transaction X whose input was X and had an output Y, would\n> Y be a new valid utxo, without being a generation transaction input?\n>\n> .\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8><(((\u00ba>\n>\n> Richard Moore ~ Founder\n> Genetic Mistakes Software inc.\n> phone: (778) 882-6125\n> email: ricmoo at geneticmistakes.com\n> www: http://GeneticMistakes.com\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck&#174;\n> Code Sight&#153; - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-14T02:51:50",
                "message_text_only": "On Sun, Jul 13, 2014 at 10:25 PM, Aaron Voisine <voisine at gmail.com> wrote:\n> I believe tx have to be ordered sequentially within a block. Also\n> since a tx is referenced by it's hash, it's practically impossible to\n> make a self referential tx.\n\nCorrect.  A TX will not reference a later TX in the same block (or itself).\n\nThis would be a good invalid-block test to add to the test suite.  Any\nvolunteers?\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-14T11:18:22",
                "message_text_only": "Conceptually all transactions in the block chain lie on a single timeline.\nThe fact that we quantise that timeline into blocks is in many ways neither\nhere nor there - it's still a strict line.\n\nWhat *can* happen and you must be aware of is duplicated transactions.\nSatoshi sort of assumed this could never happen because everything is hash\nbased, but forgot that duplicating coinbases is possible and at one point\nthis did happen. It was banned by a rule change afterwards but you still\nmust be able to process the older parts of the chain that have this. There\nis a BIP that covers the new rule.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140714/fabf40f4/attachment.html>"
            },
            {
                "author": "Paul Lyon",
                "date": "2014-07-15T13:56:20",
                "message_text_only": "Thankfully those two duplicated transactions were never spent when they first appeared. Because of that, I chose to not not add them to the UTXO at all when they first appear. When the duplicates appear they get added to the UTXO successfully because the earlier, conflicting versions are not present. That way you can carry on assuming that all transaction hashes are unique, and enforce that rule over the entire blockchain.\n\nDate: Mon, 14 Jul 2014 13:18:22 +0200\nFrom: mike at plan99.net\nTo: me at ricmoo.com\nCC: bitcoin-development at lists.sourceforge.net\nSubject: Re: [Bitcoin-development] Self-dependency transaction question...\n\nConceptually all transactions in the block chain lie on a single timeline. The fact that we quantise that timeline into blocks is in many ways neither here nor there - it's still a strict line. \n\nWhat can happen and you must be aware of is duplicated transactions. Satoshi sort of assumed this could never happen because everything is hash based, but forgot that duplicating coinbases is possible and at one point this did happen. It was banned by a rule change afterwards but you still must be able to process the older parts of the chain that have this. There is a BIP that covers the new rule.\n\n\n\n------------------------------------------------------------------------------\nWant fast and easy access to all the code in your enterprise? Index and\nsearch up to 200,000 lines of code with a free copy of Black Duck\u00ae\nCode Sight\u2122 - the same software that powers the world's largest code\nsearch on Ohloh, the Black Duck Open Hub! Try it now.\nhttp://p.sf.net/sfu/bds\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development \t\t \t   \t\t  \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/c82730dd/attachment.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-07-14T20:51:43",
                "message_text_only": "On Sunday, 13 July 2014, at 7:32 pm, Richard Moore wrote:\n> P.S. If it is valid, another question; what would happen if a transaction was self-referencing? I realize it would be very difficult to find one, but if I could find a transaction X whose input was X and had an output Y, would Y be a new valid utxo, without being a generation transaction input?\n\nEven if you could find such a transaction that contained its own digest, and even if such a transaction were valid, it still couldn't conjure new coins into existence. The sum of the outputs must be less than or equal to the sum of the inputs (except in the case of a coinbase transaction). If a transaction were to spend its own output, then the input would be completely used up by the output, leaving no balance for a second output."
            }
        ],
        "thread_summary": {
            "title": "Self-dependency transaction question...",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Mike Hearn",
                "Paul Lyon",
                "Matt Whitlock",
                "Richard Moore",
                "Aaron Voisine"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 7391
        }
    },
    {
        "title": "[Bitcoin-development] Building BDB on MingW",
        "thread_messages": [
            {
                "author": "neil",
                "date": "2014-07-14T11:27:15",
                "message_text_only": "got same error, did you manage to fix this?"
            }
        ],
        "thread_summary": {
            "title": "Building BDB on MingW",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "neil"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 43
        }
    },
    {
        "title": "[Bitcoin-development] \"Bitcoin Protocol Guide\"",
        "thread_messages": [
            {
                "author": "Ron",
                "date": "2014-07-15T03:34:42",
                "message_text_only": "________________________________\nMessage: 6\nDate: Mon, 14 Jul 2014 13:26:19 +0200\nFrom: Mike Hearn <mike at plan99.net>\nSubject: Re: [Bitcoin-development] Bitcoin Protocol Specification\nTo: Krzysztof Okupski <k.okupski at googlemail.com>\nCc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>\nMessage-ID:\n\u00a0\u00a0\u00a0 <CANEZrP21sc9smev5tg07HnLpw-8WWS7EvzzTyEvD6qYEfHvpoA at mail.gmail.com>\nContent-Type: text/plain; charset=\"utf-8\"\n\nNice work, but please don't call it the \"Bitcoin protocol spec\". Your\ndocument is not a spec. It is an attempt to describe in English the Bitcoin\nprotocol, but anyone who implemented it based on your description would get\nit wrong. For example you didn't mention the SIGHASH_SINGLE bug and many\nother important areas like the difficulty transitions are also left\nunspecified.\n\nAs a loose description of the protocol for newbies it's an invaluable\nresource and perhaps we should link to it from the developer guide. As\nsomething that claims to be a specification it is quite possibly dangerous\n- the only spec that matters is the C++ original.\n...\n\nHello Mike,\n\nWhat C++ original might that be?\u00a0 Version 0.1.0? 0.9.x? 0.8.6?\u00a0 And what parts of which version?\n\nRon\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140714/e6af2665/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "\"Bitcoin Protocol Guide\"",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Ron"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1377
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin address TTL & key expiration?",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2014-07-15T08:00:41",
                "message_text_only": "Proxying another's idea, from CoinSummit.\n\nThe request:   It would be useful to limit the lifetime of a bitcoin\naddress.  Intentionally prevent (somehow) bitcoins being sent to a\npubkey/pkh after the key expires.\n\nYou could append \"don't [\"permit\"|confirm] after X [time|block]\"  to\nthe address I suppose.  The metadata would not be digitally signed,\nbut it would be hash-sealed.  As \"address\" is a client-side notion,\nwallet clients would be the ones enforcing such a rule.\n\nBitcoin protocol of course knows about keys, and key expiration is a\nwell known and useful concept in public key cryptography.  The best\ninsertion point in the protocol for key expiration is an open\nquestion, if it's even a good idea at that level at all.  Some flag\n\"no more TxOuts exactly like this [after X block?]\"?\n\nI readily admit I don't have good answers, but it does seem valuable IMO to\n* Prevent users from accidentally sending to an \"expired\" TxOut/pkh.\nThis happens in the field.\n* Discourage address reuse\n* Enable sites that generate lots of keys to rotate ancient keys off\ntheir core systems.  (HD wallets mitigate this)\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Wladimir",
                "date": "2014-07-15T08:19:13",
                "message_text_only": "On Tue, Jul 15, 2014 at 10:00 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> Proxying another's idea, from CoinSummit.\n>\n> The request:   It would be useful to limit the lifetime of a bitcoin\n> address.  Intentionally prevent (somehow) bitcoins being sent to a\n> pubkey/pkh after the key expires.\n\nPayment request expiration was meant to address this.\n\nAdding an optional expiration timestamp to addresses would be\npossible, however, it would be a non-backward-compatible change and\nlots of software would have to be changed at this point.\n\nIn my opinion encouraging the use of the payment protocol and\ndeprecating the use of addresses is the best way forward, and not just\nfor this reason.\n\nWladimir"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-15T08:23:40",
                "message_text_only": "On Tue, Jul 15, 2014 at 4:19 AM, Wladimir <laanwj at gmail.com> wrote:\n> In my opinion encouraging the use of the payment protocol and\n> deprecating the use of addresses is the best way forward, and not just\n> for this reason.\n\nThere are major gaps that the payment protocol doesn't cover.\n\nThere are several deployed use cases where you are provided/request an\naddress, an API provides one, and one or more incoming payments arrive\nas the user sends them over minutes/hours/days/weeks.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-07-15T08:31:29",
                "message_text_only": "Payment Protocol would probably be the communication format for any new  \nmeta-data.\n\nWhat's the likelihood of something like this every making it on the  \nblockchain?"
            },
            {
                "author": "Wladimir",
                "date": "2014-07-15T08:48:12",
                "message_text_only": "On Tue, Jul 15, 2014 at 10:23 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> On Tue, Jul 15, 2014 at 4:19 AM, Wladimir <laanwj at gmail.com> wrote:\n> There are major gaps that the payment protocol doesn't cover.\n>\n> There are several deployed use cases where you are provided/request an\n> address, an API provides one, and one or more incoming payments arrive\n> as the user sends them over minutes/hours/days/weeks.\n\nCouldn't these services return a payment message instead of an address?\n\nI agree that there is currently an UI issue here: there is no way in\ncurrent wallets to store a payment message and pay to it later. We\nwill need something like that for recurring payments as well.\n\nBitcoin addresses were never designed with extensibility in mind.\nBefore the payment protocol there have been lots of ideas to add\nfunctionality to them, but the underlying idea that they have to be\nhandled by users manually means that they have to be as short as\npossible, which is a conflicting aim with extensibility...\n\nWladimir"
            },
            {
                "author": "Peter Todd",
                "date": "2014-07-15T08:20:20",
                "message_text_only": "On Tue, Jul 15, 2014 at 04:00:41AM -0400, Jeff Garzik wrote:\n> Proxying another's idea, from CoinSummit.\n> \n> The request:   It would be useful to limit the lifetime of a bitcoin\n> address.  Intentionally prevent (somehow) bitcoins being sent to a\n> pubkey/pkh after the key expires.\n> \n> You could append \"don't [\"permit\"|confirm] after X [time|block]\"  to\n> the address I suppose.  The metadata would not be digitally signed,\n> but it would be hash-sealed.  As \"address\" is a client-side notion,\n> wallet clients would be the ones enforcing such a rule.\n\nNote that \"digitally signed\" has no value here without some kind of\nPKI/WoT/something else to know what key is doing the signing. I believe\nJeff is really referring to the checksum by \"hash-sealed\" here, which is\nas good as is worth getting.\n\n> Bitcoin protocol of course knows about keys, and key expiration is a\n> well known and useful concept in public key cryptography.  The best\n> insertion point in the protocol for key expiration is an open\n> question, if it's even a good idea at that level at all.  Some flag\n> \"no more TxOuts exactly like this [after X block?]\"?\n> \n> I readily admit I don't have good answers, but it does seem valuable IMO to\n> * Prevent users from accidentally sending to an \"expired\" TxOut/pkh.\n> This happens in the field.\n> * Discourage address reuse\n> * Enable sites that generate lots of keys to rotate ancient keys off\n> their core systems.  (HD wallets mitigate this)\n\nA few months ago I looked into what low-level details it'd take to add\nBitcoin addresses to OpenPGP keys a few months ago; one of the\nrequirements we came up with was to make sure the standard OpenPGP\nexpiration machinery would still work. Basically in that model the\nBitcoin address - most likely a stealth address for privacy - is added\nto the key as signed data. All signatures in OpenPGP have optional\nexpiration times, and additionally they can be revoked after the fact if\nneeded as well.\n\nOf course, such ideas aren't limited to OpenPGP - all payment protocols\nshould consider adopting them.\n\n\nAs for protocol level hacks, keep in mind that anything that makes a\ntransaction invalid because of the presence of a specific scriptPubKey\nin a txout has the potential to make a whole chain of transactions\nbecome invalid during a reorg. Adding such protection in the form of\nIsStandard() policy would be ok, but as a protocol rule it'd be pretty\ndangerous. IMO much better to just solve the problem at the UI level.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000032d9d8942fe9461cce9db22a6cd86eacb5c18b415ebb649d\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/801ea8d0/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-15T10:25:02",
                "message_text_only": ">\n> The request:   It would be useful to limit the lifetime of a bitcoin\n> address.\n\n\nNot only useful but essential! Otherwise mobile clients can run out of RAM\nand have to cycle around and reuse addresses.\n\nWhich is indeed why BIP70 has this feature. It was thought about quite some\ntime ago. Addresses are an evolutionary dead end, they will never do\neverything we need them to do. If there's somewhere that's using addresses,\nthat's somewhere we will eventually need to upgrade to use BIP70 instead.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/81e23d3e/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-15T14:02:40",
                "message_text_only": "BIP70 does not work well for unknown number of future payments of\nunknown, unpredictable value.\n\n\nOn Tue, Jul 15, 2014 at 6:25 AM, Mike Hearn <mike at plan99.net> wrote:\n>> The request:   It would be useful to limit the lifetime of a bitcoin\n>> address.\n>\n>\n> Not only useful but essential! Otherwise mobile clients can run out of RAM\n> and have to cycle around and reuse addresses.\n>\n> Which is indeed why BIP70 has this feature. It was thought about quite some\n> time ago. Addresses are an evolutionary dead end, they will never do\n> everything we need them to do. If there's somewhere that's using addresses,\n> that's somewhere we will eventually need to upgrade to use BIP70 instead.\n>\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-15T14:27:26",
                "message_text_only": "On Tue, Jul 15, 2014 at 4:02 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> BIP70 does not work well for unknown number of future payments of\n> unknown, unpredictable value.\n\n\nYou can specify zero as an output value, in which case it's the same as \"no\nvalue specified\". You can then just reuse the PaymentRequest until it\nexpires. So I think it provides the same functionality already.\n\nNow sure, you'll get address reuse in this scenario, but that's no worse\nthan with an extended textual address.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/04f1df81/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2014-07-15T14:48:55",
                "message_text_only": "On Tuesday, July 15, 2014 8:00:41 AM Jeff Garzik wrote:\n> Proxying another's idea, from CoinSummit.\n> \n> The request:   It would be useful to limit the lifetime of a bitcoin\n> address.  Intentionally prevent (somehow) bitcoins being sent to a\n> pubkey/pkh after the key expires.\n> \n> You could append \"don't [\"permit\"|confirm] after X [time|block]\"  to\n> the address I suppose.  The metadata would not be digitally signed,\n> but it would be hash-sealed.  As \"address\" is a client-side notion,\n> wallet clients would be the ones enforcing such a rule.\n\nI agree this would be useful for the \"permit\" case, but not the \"confirm\" case \n- it's important that transactions valid in block X also be equally valid in \nblock X+1 to avoid reorg issues.\n\n> Bitcoin protocol of course knows about keys, and key expiration is a\n> well known and useful concept in public key cryptography.  The best\n> insertion point in the protocol for key expiration is an open\n> question, if it's even a good idea at that level at all.  Some flag\n> \"no more TxOuts exactly like this [after X block?]\"?\n\nThis would force every wallet to keep an index of all TXOs ever.\n\n> I readily admit I don't have good answers, but it does seem valuable IMO to\n> * Prevent users from accidentally sending to an \"expired\" TxOut/pkh.\n> This happens in the field.\n> * Discourage address reuse\n\nActually, I think this may make address reuse easier, as with base58 adding \ndata will make it impossible to tell at a glance when someone is reusing a key \nwith just a different expiration... I suppose something other than base58 \n*could* be used to resolve this, however.\n\n> * Enable sites that generate lots of keys to rotate ancient keys off\n> their core systems.  (HD wallets mitigate this)\n\nThey can already do this. It's perfectly valid for wallets/services to ignore \n(and not consider as payment) transactions using an address more than once. \nThere might be race attacks if this is implemented in an immediate fashon \n(attacker transaction gets mined first to kill a payment), but should be \npretty safe after a few blocks.\n\nLuke"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-15T15:11:25",
                "message_text_only": "On Tue, Jul 15, 2014 at 10:48 AM, Luke Dashjr <luke at dashjr.org> wrote:\n> They can already do this. It's perfectly valid for wallets/services to ignore\n> (and not consider as payment) transactions using an address more than once.\n> There might be race attacks if this is implemented in an immediate fashon\n> (attacker transaction gets mined first to kill a payment), but should be\n> pretty safe after a few blocks.\n\nSure it's valid.  However, few users will appreciate \"you ignored my\ndeposit\" as a feature.\n\nPayment protocol just doesn't well the use cases of,\n* an on-going payment stream from, e.g. Eligius to coinbase\n* deposit addresses and deposit situations\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-15T15:18:26",
                "message_text_only": ">\n> Payment protocol just doesn't well the use cases of,\n> * an on-going payment stream from, e.g. Eligius to coinbase\n> * deposit addresses and deposit situations\n\n\nThis seems to be the key point of disagreement here. Wladimir and I think\nit satisfies your requirement just fine. You disagree. Let's get to the\nbottom of that.\n\nA PaymentRequest with a zero valued pay-to-address output and an expiration\ntime, base58 encoded, would look very much like your extended address form.\nI don't suggest anyone actually represents PaymentRequest's using base58\nbut it helps to see the conceptual analogue. There'd be a bit more stuff in\nthere like some varint and wiretype codes but we're talking a handful of\nbytes. Functionally, it'd be identical.\n\nPlaces like protocols or APIs that require a piece of text and cannot\nhandle a piece of binary data could be retrofitted into the new world by\naccepting base58 encoded PaymentRequest's. This would be kind of silly\nbecause it's fundamentally binary data, but we already do this so it's at\nleast consistently silly :)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/f3bb77d8/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-15T15:35:03",
                "message_text_only": "This is a well known problem of BIP 70 from day one, because BIP 70\nfunctions at too-low a level.\n\nWhat needs to be negotiated between parties is a _payment\nrelationship_ that exchanges HD wallet data. This is what is necessary\nto establish and maintain an ongoing payment relationship.\n\nBIP 70 is focused on singular payments with specific outputs and\nvalues.  BIP 70 wants to transmit an actual transaction.  That does\nnot fit the use cases described.\n\nAdding in a hack that makes zero-valued outputs behave different does\nnot change the granularity at which BIP 70 operates.\n\nThis is a key reason why I have not just ACK'd the BIP 70 subscription\nstuff.  Subscriptions are another example of a longer term payment\nrelationship.  For such case, you want to exchange HD wallet payment\ndetails.  You do not send or receive outputs.  You might not send\ntransactions directly to the party (coming instead asynchronously &\nunpredictably via blockchain).\n\nBIP 70 marries the _relationship_ with payment transmittal, and the\nsubscription extension does not change that.\n\nOur \"contract\" language must get a bit smarter, and include HD wallet\npayment details, not necessarily focus on outputs.\n\n\nOn Tue, Jul 15, 2014 at 11:18 AM, Mike Hearn <mike at plan99.net> wrote:\n>> Payment protocol just doesn't well the use cases of,\n>> * an on-going payment stream from, e.g. Eligius to coinbase\n>> * deposit addresses and deposit situations\n>\n>\n> This seems to be the key point of disagreement here. Wladimir and I think it\n> satisfies your requirement just fine. You disagree. Let's get to the bottom\n> of that.\n>\n> A PaymentRequest with a zero valued pay-to-address output and an expiration\n> time, base58 encoded, would look very much like your extended address form.\n> I don't suggest anyone actually represents PaymentRequest's using base58 but\n> it helps to see the conceptual analogue. There'd be a bit more stuff in\n> there like some varint and wiretype codes but we're talking a handful of\n> bytes. Functionally, it'd be identical.\n>\n> Places like protocols or APIs that require a piece of text and cannot handle\n> a piece of binary data could be retrofitted into the new world by accepting\n> base58 encoded PaymentRequest's. This would be kind of silly because it's\n> fundamentally binary data, but we already do this so it's at least\n> consistently silly :)\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Luke Dashjr",
                "date": "2014-07-15T15:41:52",
                "message_text_only": "On Tuesday, July 15, 2014 3:11:25 PM Jeff Garzik wrote:\n> On Tue, Jul 15, 2014 at 10:48 AM, Luke Dashjr <luke at dashjr.org> wrote:\n> > They can already do this. It's perfectly valid for wallets/services to\n> > ignore (and not consider as payment) transactions using an address more\n> > than once. There might be race attacks if this is implemented in an\n> > immediate fashon (attacker transaction gets mined first to kill a\n> > payment), but should be pretty safe after a few blocks.\n> \n> Sure it's valid.  However, few users will appreciate \"you ignored my\n> deposit\" as a feature.\n> \n> Payment protocol just doesn't well the use cases of,\n> * an on-going payment stream from, e.g. Eligius to coinbase\n\nhttps://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#Serialization_format\n\n> * deposit addresses and deposit situations\n\nThere's no reason deposits cannot use a unique payment request or address \nevery time..."
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-15T15:55:43",
                "message_text_only": "On Tue, Jul 15, 2014 at 11:41 AM, Luke Dashjr <luke at dashjr.org> wrote:\n> There's no reason deposits cannot use a unique payment request or address\n> every time...\n\nActually, and this is key, there _are_ reasons why deposits might not\nbe able to use PaymentRequests.  Payments happen even when\nwallets/computers are offline.\n\nIf you have negotiated HD wallet details, you can use a new address\nevery time, as mentioned.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-15T16:26:15",
                "message_text_only": ">\n> Actually, and this is key, there _are_ reasons why deposits might not\n> be able to use PaymentRequests.  Payments happen even when\n> wallets/computers are offline.\n>\n\nI don't understand this point. It's the *sender* that is parsing the\nPaymentRequest and following the instructions. By definition the sender\nmust be online. A computer that is switched off cannot sign a transaction\nat all.\n\n\n> If you have negotiated HD wallet details, you can use a new address\n> every time, as mentioned.\n\n\nYes, and an extension to BIP 70 to allow for this (or stealth addresses or\nwhatever) has been discussed several times.\n\nThis thread started by proposing (I think) an expiry time for addresses.\nBIP70 satisfies this use case, I think we all agree on that. Now for cases\nwhere someone can't use BIP70 for whatever reason, or it's suboptimal,\nabsolutely we should design extensions to fix that.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/3528ace8/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin address TTL & key expiration?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Wladimir",
                "Mike Hearn",
                "Peter Todd",
                "Jeremy Spilman",
                "Luke Dashjr"
            ],
            "messages_count": 16,
            "total_messages_chars_count": 17801
        }
    },
    {
        "title": "[Bitcoin-development] BIP 38 NFC normalisation issue",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2014-07-15T12:03:36",
                "message_text_only": "[+cc aaron]\n\nWe recently added an implementation of BIP 38 (password protected private\nkeys) to bitcoinj. It came to my attention that the third test vector may\nbe broken. It gives a hex version of what the NFC normalised version of the\ninput string should be, but this does not match the results of the Java\nunicode normaliser, and in fact I can't even get Python to print the names\nof the characters past the embedded null. I'm curious where this normalised\nversion came from.\n\nGiven that \"pile of poo\" is not a character I think any sane user would put\ninto a passphrase, I question the value of this test vector. NFC form is\nintended to collapse things like umlaut control characters onto their prior\ncode point, but here we're feeding the algorithm what is basically garbage\nso I'm not totally surprised that different implementations appear to\ndisagree on the outcome.\n\nProposed action: we remove this test vector as it does not represent any\nreal world usage of the spec, or if we desperately need to verify NFC\nnormalisation I suggest using a different, more realistic test string, like\nZ\u00fcrich, or something written in Thai.\n\n\n\nTest 3:\n\n   - Passphrase \u03d2\u0301\u2400\ud801\udc00\ud83d\udca9 (\\u03D2\\u0301\\u0000\\U00010400\\U0001F4A9; GREEK\n   UPSILON WITH HOOK <http://codepoints.net/U+03D2>, COMBINING ACUTE ACCENT\n   <http://codepoints.net/U+0301>, NULL <http://codepoints.net/U+0000>, DESERET\n   CAPITAL LETTER LONG I <http://codepoints.net/U+10400>, PILE OF POO\n   <http://codepoints.net/U+1F4A9>)\n   - Encrypted key:\n   6PRW5o9FLp4gJDDVqJQKJFTpMvdsSGJxMYHtHaQBF3ooa8mwD69bapcDQn\n   - Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF\n   - Unencrypted private key (WIF):\n   5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4\n   - *Note:* The non-standard UTF-8 characters in this passphrase should be\n   NFC normalized to result in a passphrase of0xcf9300f0909080f09f92a9 before\n   further processing\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/e3dc3ed9/attachment.html>"
            },
            {
                "author": "Eric Winer",
                "date": "2014-07-15T13:07:47",
                "message_text_only": "I don't know for sure if the test vector is correct NFC form.  But for what\nit's worth, the Pile of Poo character is pretty easily accessible on the\niPhone and Android keyboards, and in this string it's already in NFC form\n(f09f92a9 in the test result).  I've certainly seen it in usernames around\nthe internet, and wouldn't be surprised to see it in passphrases entered on\nsmartphones, especially if the author of a BIP38-compatible app includes a\n(possibly ill-advised) suggestion to have your passphrase \"include special\ncharacters\".\n\nI haven't seen the NULL character on any smartphone keyboards, though - I\nassume the iOS and Android developers had the foresight to know how much\nhavoc that would wreak on systems assuming null-terminated strings.  It\nseems unlikely that NULL would be in a real-world passphrase entered by a\nsane user.\n\n\nOn Tue, Jul 15, 2014 at 8:03 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> [+cc aaron]\n>\n> We recently added an implementation of BIP 38 (password protected private\n> keys) to bitcoinj. It came to my attention that the third test vector may\n> be broken. It gives a hex version of what the NFC normalised version of the\n> input string should be, but this does not match the results of the Java\n> unicode normaliser, and in fact I can't even get Python to print the names\n> of the characters past the embedded null. I'm curious where this normalised\n> version came from.\n>\n> Given that \"pile of poo\" is not a character I think any sane user would\n> put into a passphrase, I question the value of this test vector. NFC form\n> is intended to collapse things like umlaut control characters onto their\n> prior code point, but here we're feeding the algorithm what is basically\n> garbage so I'm not totally surprised that different implementations appear\n> to disagree on the outcome.\n>\n> Proposed action: we remove this test vector as it does not represent any\n> real world usage of the spec, or if we desperately need to verify NFC\n> normalisation I suggest using a different, more realistic test string, like\n> Z\u00fcrich, or something written in Thai.\n>\n>\n>\n> Test 3:\n>\n>    - Passphrase \u03d2\u0301\u2400\ud801\udc00\ud83d\udca9 (\\u03D2\\u0301\\u0000\\U00010400\\U0001F4A9; GREEK\n>    UPSILON WITH HOOK <http://codepoints.net/U+03D2>, COMBINING ACUTE\n>    ACCENT <http://codepoints.net/U+0301>, NULL\n>    <http://codepoints.net/U+0000>, DESERET CAPITAL LETTER LONG I\n>    <http://codepoints.net/U+10400>, PILE OF POO\n>    <http://codepoints.net/U+1F4A9>)\n>    - Encrypted key:\n>    6PRW5o9FLp4gJDDVqJQKJFTpMvdsSGJxMYHtHaQBF3ooa8mwD69bapcDQn\n>    - Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF\n>    - Unencrypted private key (WIF):\n>    5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4\n>    - *Note:* The non-standard UTF-8 characters in this passphrase should\n>    be NFC normalized to result in a passphrase of0xcf9300f0909080f09f92a9 before\n>    further processing\n>\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/6bed40c7/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-07-15T13:19:29",
                "message_text_only": "I think generally control-characters (such as \\u0000) should be\ndisallowed in passphrases. (Even the use of whitespaces is very\nquestionable.)\n\nI'm ok with allowing pile-of-poo's. On mobile phones there is keyboards\njust containing emoticons -- why not allow those? Assuming NFC works of\ncourse.\n\n\nOn 07/15/2014 03:07 PM, Eric Winer wrote:\n> I don't know for sure if the test vector is correct NFC form.  But for\n> what it's worth, the Pile of Poo character is pretty easily accessible\n> on the iPhone and Android keyboards, and in this string it's already in\n> NFC form (f09f92a9 in the test result).  I've certainly seen it in\n> usernames around the internet, and wouldn't be surprised to see it in\n> passphrases entered on smartphones, especially if the author of a\n> BIP38-compatible app includes a (possibly ill-advised) suggestion to\n> have your passphrase \"include special characters\".\n> \n> I haven't seen the NULL character on any smartphone keyboards, though -\n> I assume the iOS and Android developers had the foresight to know how\n> much havoc that would wreak on systems assuming null-terminated strings.\n>  It seems unlikely that NULL would be in a real-world passphrase entered\n> by a sane user.\n> \n> \n> On Tue, Jul 15, 2014 at 8:03 AM, Mike Hearn <mike at plan99.net\n> <mailto:mike at plan99.net>> wrote:\n> \n>     [+cc aaron]\n> \n>     We recently added an implementation of BIP 38 (password protected\n>     private keys) to bitcoinj. It came to my attention that the third\n>     test vector may be broken. It gives a hex version of what the NFC\n>     normalised version of the input string should be, but this does not\n>     match the results of the Java unicode normaliser, and in fact I\n>     can't even get Python to print the names of the characters past the\n>     embedded null. I'm curious where this normalised version came from.\n> \n>     Given that \"pile of poo\" is not a character I think any sane user\n>     would put into a passphrase, I question the value of this test\n>     vector. NFC form is intended to collapse things like umlaut control\n>     characters onto their prior code point, but here we're feeding the\n>     algorithm what is basically garbage so I'm not totally surprised\n>     that different implementations appear to disagree on the outcome.\n> \n>     Proposed action: we remove this test vector as it does not represent\n>     any real world usage of the spec, or if we desperately need to\n>     verify NFC normalisation I suggest using a different, more realistic\n>     test string, like Z\u00fcrich, or something written in Thai.\n> \n> \n> \n>     Test 3:\n> \n>       * Passphrase \u03d2\u0301\u2400\ud801\udc00\ud83d\udca9 (\\u03D2\\u0301\\u0000\\U00010400\\U0001F4A9; GREEK\n>         UPSILON WITH HOOK <http://codepoints.net/U+03D2>, COMBINING\n>         ACUTE ACCENT <http://codepoints.net/U+0301>, NULL\n>         <http://codepoints.net/U+0000>, DESERET CAPITAL LETTER LONG I\n>         <http://codepoints.net/U+10400>, PILE OF POO\n>         <http://codepoints.net/U+1F4A9>)\n>       * Encrypted key:\n>         6PRW5o9FLp4gJDDVqJQKJFTpMvdsSGJxMYHtHaQBF3ooa8mwD69bapcDQn\n>       * Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF\n>       * Unencrypted private key (WIF):\n>         5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4\n>       * /Note:/ The non-standard UTF-8 characters in this passphrase\n>         should be NFC normalized to result in a passphrase\n>         of0xcf9300f0909080f09f92a9 before further processing\n> \n> \n> \n> \n>     ------------------------------------------------------------------------------\n>     Want fast and easy access to all the code in your enterprise? Index and\n>     search up to 200,000 lines of code with a free copy of Black Duck\n>     Code Sight - the same software that powers the world's largest code\n>     search on Ohloh, the Black Duck Open Hub! Try it now.\n>     http://p.sf.net/sfu/bds\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Michael Wozniak",
                "date": "2014-07-15T13:32:01",
                "message_text_only": "I have a python implementation that seems to pass this test vector:\n\nhttps://github.com/wozz/electrum/blob/bip38_import/lib/bip38.py#L299\n\n\n\nOn Jul 15, 2014, at 9:19 AM, Andreas Schildbach <andreas at schildbach.de> wrote:\n\n> I think generally control-characters (such as \\u0000) should be\n> disallowed in passphrases. (Even the use of whitespaces is very\n> questionable.)\n> \n> I'm ok with allowing pile-of-poo's. On mobile phones there is keyboards\n> just containing emoticons -- why not allow those? Assuming NFC works of\n> course.\n> \n> \n> On 07/15/2014 03:07 PM, Eric Winer wrote:\n>> I don't know for sure if the test vector is correct NFC form.  But for\n>> what it's worth, the Pile of Poo character is pretty easily accessible\n>> on the iPhone and Android keyboards, and in this string it's already in\n>> NFC form (f09f92a9 in the test result).  I've certainly seen it in\n>> usernames around the internet, and wouldn't be surprised to see it in\n>> passphrases entered on smartphones, especially if the author of a\n>> BIP38-compatible app includes a (possibly ill-advised) suggestion to\n>> have your passphrase \"include special characters\".\n>> \n>> I haven't seen the NULL character on any smartphone keyboards, though -\n>> I assume the iOS and Android developers had the foresight to know how\n>> much havoc that would wreak on systems assuming null-terminated strings.\n>> It seems unlikely that NULL would be in a real-world passphrase entered\n>> by a sane user.\n>> \n>> \n>> On Tue, Jul 15, 2014 at 8:03 AM, Mike Hearn <mike at plan99.net\n>> <mailto:mike at plan99.net>> wrote:\n>> \n>>    [+cc aaron]\n>> \n>>    We recently added an implementation of BIP 38 (password protected\n>>    private keys) to bitcoinj. It came to my attention that the third\n>>    test vector may be broken. It gives a hex version of what the NFC\n>>    normalised version of the input string should be, but this does not\n>>    match the results of the Java unicode normaliser, and in fact I\n>>    can't even get Python to print the names of the characters past the\n>>    embedded null. I'm curious where this normalised version came from.\n>> \n>>    Given that \"pile of poo\" is not a character I think any sane user\n>>    would put into a passphrase, I question the value of this test\n>>    vector. NFC form is intended to collapse things like umlaut control\n>>    characters onto their prior code point, but here we're feeding the\n>>    algorithm what is basically garbage so I'm not totally surprised\n>>    that different implementations appear to disagree on the outcome.\n>> \n>>    Proposed action: we remove this test vector as it does not represent\n>>    any real world usage of the spec, or if we desperately need to\n>>    verify NFC normalisation I suggest using a different, more realistic\n>>    test string, like Z\u00fcrich, or something written in Thai.\n>> \n>> \n>> \n>>    Test 3:\n>> \n>>      * Passphrase \u03d2\u0301\u2400\ud801\udc00\ud83d\udca9 (\\u03D2\\u0301\\u0000\\U00010400\\U0001F4A9; GREEK\n>>        UPSILON WITH HOOK <http://codepoints.net/U+03D2>, COMBINING\n>>        ACUTE ACCENT <http://codepoints.net/U+0301>, NULL\n>>        <http://codepoints.net/U+0000>, DESERET CAPITAL LETTER LONG I\n>>        <http://codepoints.net/U+10400>, PILE OF POO\n>>        <http://codepoints.net/U+1F4A9>)\n>>      * Encrypted key:\n>>        6PRW5o9FLp4gJDDVqJQKJFTpMvdsSGJxMYHtHaQBF3ooa8mwD69bapcDQn\n>>      * Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF\n>>      * Unencrypted private key (WIF):\n>>        5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4\n>>      * /Note:/ The non-standard UTF-8 characters in this passphrase\n>>        should be NFC normalized to result in a passphrase\n>>        of0xcf9300f0909080f09f92a9 before further processing\n>> \n>> \n>> \n>> \n>>    ------------------------------------------------------------------------------\n>>    Want fast and easy access to all the code in your enterprise? Index and\n>>    search up to 200,000 lines of code with a free copy of Black Duck\n>>    Code Sight - the same software that powers the world's largest code\n>>    search on Ohloh, the Black Duck Open Hub! Try it now.\n>>    http://p.sf.net/sfu/bds\n>>    _______________________________________________\n>>    Bitcoin-development mailing list\n>>    Bitcoin-development at lists.sourceforge.net\n>>    <mailto:Bitcoin-development at lists.sourceforge.net>\n>>    https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>> \n>> \n>> \n>> ------------------------------------------------------------------------------\n>> Want fast and easy access to all the code in your enterprise? Index and\n>> search up to 200,000 lines of code with a free copy of Black Duck\n>> Code Sight - the same software that powers the world's largest code\n>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>> http://p.sf.net/sfu/bds\n>> \n>> \n>> \n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Brooks Boyd",
                "date": "2014-07-15T15:13:44",
                "message_text_only": "I was part of adding in that test vector, and I think it's a good test\nvector since it is an extreme edge-case of the current definition: If the\nBIP38 proposal allows any password that can be in UTF-8, NFC normalized\nform, those characters cover the various edge cases (combining characters,\nnull character, astral range) that if your implementation doesn't handle,\nthen it can't really be said to be \"BIP38-compatible/compliant\", right?\n\nThe \"passphrase\" in the test vector is NOT in NFC form; that's the point.\nWhatever implementation gets designed has to assume the input is not\nalready NFC-normalized and needs to handle/sanitize that input before\nfurther processing. To test your implementation for compliance, you should\nnot be inputting the NFC-normalized bytestring as the password input, you\nshould be entering the original passphrase as the test. My original pull\nrequest for this change (https://github.com/bitcoin/bips/pull/29) shows a\nPython and a NodeJS way to input that test vector password as intended.\n\nSome input devices may already handle the input as NFC, which is great, but\nper the BIP38 proposal, that shouldn't be assumed, so various\nimplementations are cross-compatible. If one implementation assumes the\ninput is already NFC, they may encode/decode the password incorrectly, and\nlock a user out of their wallet. Android allows different user keyboards to\nbe used, so I'm guessing there's one somewhere that allows manual entry of\nunicode codepoints that could be used to enter a null character, and with\nthe next version of iOS, Apple devices will also get custom keyboard\noptions, too, so even if the default Apple keyboard does NFC-form properly,\nother developers' keyboards may not. So while it is an extreme edge case,\nthat is not very likely to be used as a \"real password\" by any user, that's\nwhat test vectors are for: to test for the edge case that you might not\nhave expected and handled in your implementation.\n\nBrooks\n\n\nOn Tue, Jul 15, 2014 at 8:07 AM, Eric Winer <enwiner at gmail.com> wrote:\n\n> I don't know for sure if the test vector is correct NFC form.  But for\n> what it's worth, the Pile of Poo character is pretty easily accessible on\n> the iPhone and Android keyboards, and in this string it's already in NFC\n> form (f09f92a9 in the test result).  I've certainly seen it in usernames\n> around the internet, and wouldn't be surprised to see it in passphrases\n> entered on smartphones, especially if the author of a BIP38-compatible app\n> includes a (possibly ill-advised) suggestion to have your passphrase\n> \"include special characters\".\n>\n> I haven't seen the NULL character on any smartphone keyboards, though - I\n> assume the iOS and Android developers had the foresight to know how much\n> havoc that would wreak on systems assuming null-terminated strings.  It\n> seems unlikely that NULL would be in a real-world passphrase entered by a\n> sane user.\n>\n>\n> On Tue, Jul 15, 2014 at 8:03 AM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> [+cc aaron]\n>>\n>> We recently added an implementation of BIP 38 (password protected private\n>> keys) to bitcoinj. It came to my attention that the third test vector may\n>> be broken. It gives a hex version of what the NFC normalised version of the\n>> input string should be, but this does not match the results of the Java\n>> unicode normaliser, and in fact I can't even get Python to print the names\n>> of the characters past the embedded null. I'm curious where this normalised\n>> version came from.\n>>\n>> Given that \"pile of poo\" is not a character I think any sane user would\n>> put into a passphrase, I question the value of this test vector. NFC form\n>> is intended to collapse things like umlaut control characters onto their\n>> prior code point, but here we're feeding the algorithm what is basically\n>> garbage so I'm not totally surprised that different implementations appear\n>> to disagree on the outcome.\n>>\n>> Proposed action: we remove this test vector as it does not represent any\n>> real world usage of the spec, or if we desperately need to verify NFC\n>> normalisation I suggest using a different, more realistic test string, like\n>> Z\u00fcrich, or something written in Thai.\n>>\n>>\n>>\n>> Test 3:\n>>\n>>    - Passphrase \u03d2\u0301\u2400\ud801\udc00\ud83d\udca9 (\\u03D2\\u0301\\u0000\\U00010400\\U0001F4A9; GREEK\n>>    UPSILON WITH HOOK <http://codepoints.net/U+03D2>, COMBINING ACUTE\n>>    ACCENT <http://codepoints.net/U+0301>, NULL\n>>    <http://codepoints.net/U+0000>, DESERET CAPITAL LETTER LONG I\n>>    <http://codepoints.net/U+10400>, PILE OF POO\n>>    <http://codepoints.net/U+1F4A9>)\n>>    - Encrypted key:\n>>    6PRW5o9FLp4gJDDVqJQKJFTpMvdsSGJxMYHtHaQBF3ooa8mwD69bapcDQn\n>>    - Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF\n>>    - Unencrypted private key (WIF):\n>>    5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4\n>>    - *Note:* The non-standard UTF-8 characters in this passphrase should\n>>    be NFC normalized to result in a passphrase of0xcf9300f0909080f09f92a9 before\n>>    further processing\n>>\n>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Want fast and easy access to all the code in your enterprise? Index and\n>> search up to 200,000 lines of code with a free copy of Black Duck\n>> Code Sight - the same software that powers the world's largest code\n>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>> http://p.sf.net/sfu/bds\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/298353e5/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-15T18:20:13",
                "message_text_only": "Yes, we know, Andreas' code is indeed doing normalisation.\n\nHowever it appears the output bytes end up being different. What I get back\nis:\n\ncf9300*01*303430300166346139\n\nvs\n\ncf9300*f0*909080f09f92a9\n\nfrom the spec.\n\nI'm not sure why. It appears this is due to the character from the astral\nplanes. Java is old and uses 16 bit characters internally - it wouldn't\nsurprise me if there's some weirdness that means it doesn't/won't support\nthis kind of thing.\n\nI recommend instead that any implementation that wishes to be compatible\nwith JVM based wallets (I suspect Android is the same) just refuse any\npassphrase that includes characters outside the BMP. At least unless\nsomeone can find a fix. I somehow doubt this will really hurt anyone.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/fe65167b/attachment.html>"
            },
            {
                "author": "Aaron Voisine",
                "date": "2014-07-15T22:23:13",
                "message_text_only": "If the user creates a password on an iOS device with an astral\ncharacter and then can't enter that password on a JVM wallet, that\nsucks. If JVMs really can't support unicode NFC then that's a strong\ncase to limit the spec to the subset of unicode that all popular\nplatforms can support, but it sounds like it might just be a JVM\nstring library bug that could hopefully be reported and fixed. I get\nthe same result as in the test case using apple's\nCFStringNormalize(passphrase, kCFStringNormalizationFormC);\n\nAaron Voisine\nbreadwallet.com\n\n\nOn Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net> wrote:\n> Yes, we know, Andreas' code is indeed doing normalisation.\n>\n> However it appears the output bytes end up being different. What I get back\n> is:\n>\n> cf930001303430300166346139\n>\n> vs\n>\n> cf9300f0909080f09f92a9\n>\n> from the spec.\n>\n> I'm not sure why. It appears this is due to the character from the astral\n> planes. Java is old and uses 16 bit characters internally - it wouldn't\n> surprise me if there's some weirdness that means it doesn't/won't support\n> this kind of thing.\n>\n> I recommend instead that any implementation that wishes to be compatible\n> with JVM based wallets (I suspect Android is the same) just refuse any\n> passphrase that includes characters outside the BMP. At least unless someone\n> can find a fix. I somehow doubt this will really hurt anyone.\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-16T09:12:26",
                "message_text_only": "I'm all for fixing bugs, but I know from bitter experience that outside the\nBMP dragons lurk. Browsers don't even expose Unicode APIs at all. You end\nup needing to ship an entire pure-js implementation, which can be too large\nfor some use cases (too much time sunk on that issue in my last job).\n\nI'm hoping BIP 38 doesn't get widely used anyway, to be frank. People\nmoving private keys around by hand has caused quite a few problems in the\npast, sometimes people lost money. It's better to work at the level of a\nwallet and ideally ask people to move money using regular transactions. Way\nless potential for errors.\n\nRegardless, I'll file a JVM bug and see what the outcome is.\n\n\nOn Wed, Jul 16, 2014 at 12:23 AM, Aaron Voisine <voisine at gmail.com> wrote:\n\n> If the user creates a password on an iOS device with an astral\n> character and then can't enter that password on a JVM wallet, that\n> sucks. If JVMs really can't support unicode NFC then that's a strong\n> case to limit the spec to the subset of unicode that all popular\n> platforms can support, but it sounds like it might just be a JVM\n> string library bug that could hopefully be reported and fixed. I get\n> the same result as in the test case using apple's\n> CFStringNormalize(passphrase, kCFStringNormalizationFormC);\n>\n> Aaron Voisine\n> breadwallet.com\n>\n>\n> On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net> wrote:\n> > Yes, we know, Andreas' code is indeed doing normalisation.\n> >\n> > However it appears the output bytes end up being different. What I get\n> back\n> > is:\n> >\n> > cf930001303430300166346139\n> >\n> > vs\n> >\n> > cf9300f0909080f09f92a9\n> >\n> > from the spec.\n> >\n> > I'm not sure why. It appears this is due to the character from the astral\n> > planes. Java is old and uses 16 bit characters internally - it wouldn't\n> > surprise me if there's some weirdness that means it doesn't/won't support\n> > this kind of thing.\n> >\n> > I recommend instead that any implementation that wishes to be compatible\n> > with JVM based wallets (I suspect Android is the same) just refuse any\n> > passphrase that includes characters outside the BMP. At least unless\n> someone\n> > can find a fix. I somehow doubt this will really hurt anyone.\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Want fast and easy access to all the code in your enterprise? Index and\n> > search up to 200,000 lines of code with a free copy of Black Duck\n> > Code Sight - the same software that powers the world's largest code\n> > search on Ohloh, the Black Duck Open Hub! Try it now.\n> > http://p.sf.net/sfu/bds\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140716/c9ab11cb/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-07-16T09:17:44",
                "message_text_only": "Guys, you are always talking about the Unicode astral plane, but in fact\nits a plain old (ASCII) control character where this problem starts and\nlikely ends: \\u0000.\n\nLet's ban/filter ISO control characters and be done with it. Most\ncontrol characters will never be enterable by any keyboard into a\npassword field. Of course I assume that Character.isISOControl() works\nconsistently across platforms.\n\nhttp://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isISOControl%28char%29\n\n\nOn 07/16/2014 12:23 AM, Aaron Voisine wrote:\n> If the user creates a password on an iOS device with an astral\n> character and then can't enter that password on a JVM wallet, that\n> sucks. If JVMs really can't support unicode NFC then that's a strong\n> case to limit the spec to the subset of unicode that all popular\n> platforms can support, but it sounds like it might just be a JVM\n> string library bug that could hopefully be reported and fixed. I get\n> the same result as in the test case using apple's\n> CFStringNormalize(passphrase, kCFStringNormalizationFormC);\n> \n> Aaron Voisine\n> breadwallet.com\n> \n> \n> On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net> wrote:\n>> Yes, we know, Andreas' code is indeed doing normalisation.\n>>\n>> However it appears the output bytes end up being different. What I get back\n>> is:\n>>\n>> cf930001303430300166346139\n>>\n>> vs\n>>\n>> cf9300f0909080f09f92a9\n>>\n>> from the spec.\n>>\n>> I'm not sure why. It appears this is due to the character from the astral\n>> planes. Java is old and uses 16 bit characters internally - it wouldn't\n>> surprise me if there's some weirdness that means it doesn't/won't support\n>> this kind of thing.\n>>\n>> I recommend instead that any implementation that wishes to be compatible\n>> with JVM based wallets (I suspect Android is the same) just refuse any\n>> passphrase that includes characters outside the BMP. At least unless someone\n>> can find a fix. I somehow doubt this will really hurt anyone.\n>>\n>> ------------------------------------------------------------------------------\n>> Want fast and easy access to all the code in your enterprise? Index and\n>> search up to 200,000 lines of code with a free copy of Black Duck\n>> Code Sight - the same software that powers the world's largest code\n>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>> http://p.sf.net/sfu/bds\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n> \n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-16T09:29:16",
                "message_text_only": "Yes sorry, you're right, the issue starts with the null code point. Python\nseems to have problems starting there too. It might work if we took that\nout.\n\n\nOn Wed, Jul 16, 2014 at 11:17 AM, Andreas Schildbach <andreas at schildbach.de>\nwrote:\n\n> Guys, you are always talking about the Unicode astral plane, but in fact\n> its a plain old (ASCII) control character where this problem starts and\n> likely ends: \\u0000.\n>\n> Let's ban/filter ISO control characters and be done with it. Most\n> control characters will never be enterable by any keyboard into a\n> password field. Of course I assume that Character.isISOControl() works\n> consistently across platforms.\n>\n>\n> http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isISOControl%28char%29\n>\n>\n> On 07/16/2014 12:23 AM, Aaron Voisine wrote:\n> > If the user creates a password on an iOS device with an astral\n> > character and then can't enter that password on a JVM wallet, that\n> > sucks. If JVMs really can't support unicode NFC then that's a strong\n> > case to limit the spec to the subset of unicode that all popular\n> > platforms can support, but it sounds like it might just be a JVM\n> > string library bug that could hopefully be reported and fixed. I get\n> > the same result as in the test case using apple's\n> > CFStringNormalize(passphrase, kCFStringNormalizationFormC);\n> >\n> > Aaron Voisine\n> > breadwallet.com\n> >\n> >\n> > On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net> wrote:\n> >> Yes, we know, Andreas' code is indeed doing normalisation.\n> >>\n> >> However it appears the output bytes end up being different. What I get\n> back\n> >> is:\n> >>\n> >> cf930001303430300166346139\n> >>\n> >> vs\n> >>\n> >> cf9300f0909080f09f92a9\n> >>\n> >> from the spec.\n> >>\n> >> I'm not sure why. It appears this is due to the character from the\n> astral\n> >> planes. Java is old and uses 16 bit characters internally - it wouldn't\n> >> surprise me if there's some weirdness that means it doesn't/won't\n> support\n> >> this kind of thing.\n> >>\n> >> I recommend instead that any implementation that wishes to be compatible\n> >> with JVM based wallets (I suspect Android is the same) just refuse any\n> >> passphrase that includes characters outside the BMP. At least unless\n> someone\n> >> can find a fix. I somehow doubt this will really hurt anyone.\n> >>\n> >>\n> ------------------------------------------------------------------------------\n> >> Want fast and easy access to all the code in your enterprise? Index and\n> >> search up to 200,000 lines of code with a free copy of Black Duck\n> >> Code Sight - the same software that powers the world's largest code\n> >> search on Ohloh, the Black Duck Open Hub! Try it now.\n> >> http://p.sf.net/sfu/bds\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Want fast and easy access to all the code in your enterprise? Index and\n> > search up to 200,000 lines of code with a free copy of Black Duck\n> > Code Sight - the same software that powers the world's largest code\n> > search on Ohloh, the Black Duck Open Hub! Try it now.\n> > http://p.sf.net/sfu/bds\n> >\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140716/3019d571/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-07-16T10:46:02",
                "message_text_only": "I will change the bitcoinj implementation and propose a new test vector.\n\n\n\nOn 07/16/2014 11:29 AM, Mike Hearn wrote:\n> Yes sorry, you're right, the issue starts with the null code point.\n> Python seems to have problems starting there too. It might work if we\n> took that out.\n> \n> \n> On Wed, Jul 16, 2014 at 11:17 AM, Andreas Schildbach\n> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:\n> \n>     Guys, you are always talking about the Unicode astral plane, but in fact\n>     its a plain old (ASCII) control character where this problem starts and\n>     likely ends: \\u0000.\n> \n>     Let's ban/filter ISO control characters and be done with it. Most\n>     control characters will never be enterable by any keyboard into a\n>     password field. Of course I assume that Character.isISOControl() works\n>     consistently across platforms.\n> \n>     http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isISOControl%28char%29\n> \n> \n>     On 07/16/2014 12:23 AM, Aaron Voisine wrote:\n>     > If the user creates a password on an iOS device with an astral\n>     > character and then can't enter that password on a JVM wallet, that\n>     > sucks. If JVMs really can't support unicode NFC then that's a strong\n>     > case to limit the spec to the subset of unicode that all popular\n>     > platforms can support, but it sounds like it might just be a JVM\n>     > string library bug that could hopefully be reported and fixed. I get\n>     > the same result as in the test case using apple's\n>     > CFStringNormalize(passphrase, kCFStringNormalizationFormC);\n>     >\n>     > Aaron Voisine\n>     > breadwallet.com <http://breadwallet.com>\n>     >\n>     >\n>     > On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net\n>     <mailto:mike at plan99.net>> wrote:\n>     >> Yes, we know, Andreas' code is indeed doing normalisation.\n>     >>\n>     >> However it appears the output bytes end up being different. What\n>     I get back\n>     >> is:\n>     >>\n>     >> cf930001303430300166346139\n>     >>\n>     >> vs\n>     >>\n>     >> cf9300f0909080f09f92a9\n>     >>\n>     >> from the spec.\n>     >>\n>     >> I'm not sure why. It appears this is due to the character from\n>     the astral\n>     >> planes. Java is old and uses 16 bit characters internally - it\n>     wouldn't\n>     >> surprise me if there's some weirdness that means it doesn't/won't\n>     support\n>     >> this kind of thing.\n>     >>\n>     >> I recommend instead that any implementation that wishes to be\n>     compatible\n>     >> with JVM based wallets (I suspect Android is the same) just\n>     refuse any\n>     >> passphrase that includes characters outside the BMP. At least\n>     unless someone\n>     >> can find a fix. I somehow doubt this will really hurt anyone.\n>     >>\n>     >>\n>     ------------------------------------------------------------------------------\n>     >> Want fast and easy access to all the code in your enterprise?\n>     Index and\n>     >> search up to 200,000 lines of code with a free copy of Black Duck\n>     >> Code Sight - the same software that powers the world's largest code\n>     >> search on Ohloh, the Black Duck Open Hub! Try it now.\n>     >> http://p.sf.net/sfu/bds\n>     >> _______________________________________________\n>     >> Bitcoin-development mailing list\n>     >> Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>     >>\n>     >\n>     >\n>     ------------------------------------------------------------------------------\n>     > Want fast and easy access to all the code in your enterprise?\n>     Index and\n>     > search up to 200,000 lines of code with a free copy of Black Duck\n>     > Code Sight - the same software that powers the world's largest code\n>     > search on Ohloh, the Black Duck Open Hub! Try it now.\n>     > http://p.sf.net/sfu/bds\n>     >\n> \n> \n> \n>     ------------------------------------------------------------------------------\n>     Want fast and easy access to all the code in your enterprise? Index and\n>     search up to 200,000 lines of code with a free copy of Black Duck\n>     Code Sight - the same software that powers the world's largest code\n>     search on Ohloh, the Black Duck Open Hub! Try it now.\n>     http://p.sf.net/sfu/bds\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-07-16T11:04:08",
                "message_text_only": "Damn, I just realized that I implement only the decoding side of BIP38.\nSo I cannot propose a complete test vector. Here is what I have:\n\n\nPassphrase: \u03d2\u0301\u2400\ud801\udc00\ud83d\udca9 (\\u03D2\\u0301\\u0000\\U00010400\\U0001F4A9; GREEK\nUPSILON WITH HOOK, COMBINING ACUTE ACCENT, NULL, DESERET CAPITAL LETTER\nLONG I, PILE OF POO)\n\nPassphrase bytes after removing ISO control characters and NFC\nnormalization: 0xcf933034303066346139\n\nBitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF\n\nUnencrypted private key (WIF):\n5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4\n\n\nCan someone calculate the encrypted key from it (using whatever\nimplementation) and I will verify it decodes properly in bitcoinj?\n\n\n\nOn 07/16/2014 12:46 PM, Andreas Schildbach wrote:\n> I will change the bitcoinj implementation and propose a new test vector.\n> \n> \n> \n> On 07/16/2014 11:29 AM, Mike Hearn wrote:\n>> Yes sorry, you're right, the issue starts with the null code point.\n>> Python seems to have problems starting there too. It might work if we\n>> took that out.\n>>\n>>\n>> On Wed, Jul 16, 2014 at 11:17 AM, Andreas Schildbach\n>> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:\n>>\n>>     Guys, you are always talking about the Unicode astral plane, but in fact\n>>     its a plain old (ASCII) control character where this problem starts and\n>>     likely ends: \\u0000.\n>>\n>>     Let's ban/filter ISO control characters and be done with it. Most\n>>     control characters will never be enterable by any keyboard into a\n>>     password field. Of course I assume that Character.isISOControl() works\n>>     consistently across platforms.\n>>\n>>     http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isISOControl%28char%29\n>>\n>>\n>>     On 07/16/2014 12:23 AM, Aaron Voisine wrote:\n>>     > If the user creates a password on an iOS device with an astral\n>>     > character and then can't enter that password on a JVM wallet, that\n>>     > sucks. If JVMs really can't support unicode NFC then that's a strong\n>>     > case to limit the spec to the subset of unicode that all popular\n>>     > platforms can support, but it sounds like it might just be a JVM\n>>     > string library bug that could hopefully be reported and fixed. I get\n>>     > the same result as in the test case using apple's\n>>     > CFStringNormalize(passphrase, kCFStringNormalizationFormC);\n>>     >\n>>     > Aaron Voisine\n>>     > breadwallet.com <http://breadwallet.com>\n>>     >\n>>     >\n>>     > On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net\n>>     <mailto:mike at plan99.net>> wrote:\n>>     >> Yes, we know, Andreas' code is indeed doing normalisation.\n>>     >>\n>>     >> However it appears the output bytes end up being different. What\n>>     I get back\n>>     >> is:\n>>     >>\n>>     >> cf930001303430300166346139\n>>     >>\n>>     >> vs\n>>     >>\n>>     >> cf9300f0909080f09f92a9\n>>     >>\n>>     >> from the spec.\n>>     >>\n>>     >> I'm not sure why. It appears this is due to the character from\n>>     the astral\n>>     >> planes. Java is old and uses 16 bit characters internally - it\n>>     wouldn't\n>>     >> surprise me if there's some weirdness that means it doesn't/won't\n>>     support\n>>     >> this kind of thing.\n>>     >>\n>>     >> I recommend instead that any implementation that wishes to be\n>>     compatible\n>>     >> with JVM based wallets (I suspect Android is the same) just\n>>     refuse any\n>>     >> passphrase that includes characters outside the BMP. At least\n>>     unless someone\n>>     >> can find a fix. I somehow doubt this will really hurt anyone.\n>>     >>\n>>     >>\n>>     ------------------------------------------------------------------------------\n>>     >> Want fast and easy access to all the code in your enterprise?\n>>     Index and\n>>     >> search up to 200,000 lines of code with a free copy of Black Duck\n>>     >> Code Sight - the same software that powers the world's largest code\n>>     >> search on Ohloh, the Black Duck Open Hub! Try it now.\n>>     >> http://p.sf.net/sfu/bds\n>>     >> _______________________________________________\n>>     >> Bitcoin-development mailing list\n>>     >> Bitcoin-development at lists.sourceforge.net\n>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>>     >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>     >>\n>>     >\n>>     >\n>>     ------------------------------------------------------------------------------\n>>     > Want fast and easy access to all the code in your enterprise?\n>>     Index and\n>>     > search up to 200,000 lines of code with a free copy of Black Duck\n>>     > Code Sight - the same software that powers the world's largest code\n>>     > search on Ohloh, the Black Duck Open Hub! Try it now.\n>>     > http://p.sf.net/sfu/bds\n>>     >\n>>\n>>\n>>\n>>     ------------------------------------------------------------------------------\n>>     Want fast and easy access to all the code in your enterprise? Index and\n>>     search up to 200,000 lines of code with a free copy of Black Duck\n>>     Code Sight - the same software that powers the world's largest code\n>>     search on Ohloh, the Black Duck Open Hub! Try it now.\n>>     http://p.sf.net/sfu/bds\n>>     _______________________________________________\n>>     Bitcoin-development mailing list\n>>     Bitcoin-development at lists.sourceforge.net\n>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Want fast and easy access to all the code in your enterprise? Index and\n>> search up to 200,000 lines of code with a free copy of Black Duck\n>> Code Sight - the same software that powers the world's largest code\n>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>> http://p.sf.net/sfu/bds\n>>\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n>"
            },
            {
                "author": "Aaron Voisine",
                "date": "2014-07-16T21:06:41",
                "message_text_only": "If I first remove \\u0000, so the non-normalized passphrase is\n\"\\u03D2\\u0301\\U00010400\\U0001F4A9\", and then NFC normalize it, it\nbecomes \"\\u03D3\\U00010400\\U0001F4A9\"\n\nUTF-8 encoded this is: 0xcf93f0909080f09f92a9 (not the same as what\nyou got, Andreas!)\n\nEncoding private key: 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4\nwith this passphrase, I get a BIP38 key of:\n6PRW5o9FMb4hAYRQPmgcvVDTyDtr6R17VMXGLmvKjKVpGkYhBJ4uYuR9wZ\n\nI recommend rather than simply removing control characters from the\npassword that instead the spec require that passwords containing\ncontrol characters are invalid. We don't want people trying to be\nclever and putting them in thinking they are adding to the password\nentropy.\n\nAlso for UI compatibility across many platforms, I'm also in favor\ndisallowing any character below U+0020 (space)\n\nI can submit a PR once we figure out why Andreas's passphrase was\ndifferent than what I got.\n\nAaron Voisine\nbreadwallet.com\n\n\nOn Wed, Jul 16, 2014 at 4:04 AM, Andreas Schildbach\n<andreas at schildbach.de> wrote:\n> Damn, I just realized that I implement only the decoding side of BIP38.\n> So I cannot propose a complete test vector. Here is what I have:\n>\n>\n> Passphrase: \u03d2\u0301\u2400\ud801\udc00\ud83d\udca9 (\\u03D2\\u0301\\u0000\\U00010400\\U0001F4A9; GREEK\n> UPSILON WITH HOOK, COMBINING ACUTE ACCENT, NULL, DESERET CAPITAL LETTER\n> LONG I, PILE OF POO)\n>\n> Passphrase bytes after removing ISO control characters and NFC\n> normalization: 0xcf933034303066346139\n>\n> Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF\n>\n> Unencrypted private key (WIF):\n> 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4\n>\n>\n> Can someone calculate the encrypted key from it (using whatever\n> implementation) and I will verify it decodes properly in bitcoinj?\n>\n>\n>\n> On 07/16/2014 12:46 PM, Andreas Schildbach wrote:\n>> I will change the bitcoinj implementation and propose a new test vector.\n>>\n>>\n>>\n>> On 07/16/2014 11:29 AM, Mike Hearn wrote:\n>>> Yes sorry, you're right, the issue starts with the null code point.\n>>> Python seems to have problems starting there too. It might work if we\n>>> took that out.\n>>>\n>>>\n>>> On Wed, Jul 16, 2014 at 11:17 AM, Andreas Schildbach\n>>> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:\n>>>\n>>>     Guys, you are always talking about the Unicode astral plane, but in fact\n>>>     its a plain old (ASCII) control character where this problem starts and\n>>>     likely ends: \\u0000.\n>>>\n>>>     Let's ban/filter ISO control characters and be done with it. Most\n>>>     control characters will never be enterable by any keyboard into a\n>>>     password field. Of course I assume that Character.isISOControl() works\n>>>     consistently across platforms.\n>>>\n>>>     http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isISOControl%28char%29\n>>>\n>>>\n>>>     On 07/16/2014 12:23 AM, Aaron Voisine wrote:\n>>>     > If the user creates a password on an iOS device with an astral\n>>>     > character and then can't enter that password on a JVM wallet, that\n>>>     > sucks. If JVMs really can't support unicode NFC then that's a strong\n>>>     > case to limit the spec to the subset of unicode that all popular\n>>>     > platforms can support, but it sounds like it might just be a JVM\n>>>     > string library bug that could hopefully be reported and fixed. I get\n>>>     > the same result as in the test case using apple's\n>>>     > CFStringNormalize(passphrase, kCFStringNormalizationFormC);\n>>>     >\n>>>     > Aaron Voisine\n>>>     > breadwallet.com <http://breadwallet.com>\n>>>     >\n>>>     >\n>>>     > On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net\n>>>     <mailto:mike at plan99.net>> wrote:\n>>>     >> Yes, we know, Andreas' code is indeed doing normalisation.\n>>>     >>\n>>>     >> However it appears the output bytes end up being different. What\n>>>     I get back\n>>>     >> is:\n>>>     >>\n>>>     >> cf930001303430300166346139\n>>>     >>\n>>>     >> vs\n>>>     >>\n>>>     >> cf9300f0909080f09f92a9\n>>>     >>\n>>>     >> from the spec.\n>>>     >>\n>>>     >> I'm not sure why. It appears this is due to the character from\n>>>     the astral\n>>>     >> planes. Java is old and uses 16 bit characters internally - it\n>>>     wouldn't\n>>>     >> surprise me if there's some weirdness that means it doesn't/won't\n>>>     support\n>>>     >> this kind of thing.\n>>>     >>\n>>>     >> I recommend instead that any implementation that wishes to be\n>>>     compatible\n>>>     >> with JVM based wallets (I suspect Android is the same) just\n>>>     refuse any\n>>>     >> passphrase that includes characters outside the BMP. At least\n>>>     unless someone\n>>>     >> can find a fix. I somehow doubt this will really hurt anyone.\n>>>     >>\n>>>     >>\n>>>     ------------------------------------------------------------------------------\n>>>     >> Want fast and easy access to all the code in your enterprise?\n>>>     Index and\n>>>     >> search up to 200,000 lines of code with a free copy of Black Duck\n>>>     >> Code Sight - the same software that powers the world's largest code\n>>>     >> search on Ohloh, the Black Duck Open Hub! Try it now.\n>>>     >> http://p.sf.net/sfu/bds\n>>>     >> _______________________________________________\n>>>     >> Bitcoin-development mailing list\n>>>     >> Bitcoin-development at lists.sourceforge.net\n>>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>>>     >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>     >>\n>>>     >\n>>>     >\n>>>     ------------------------------------------------------------------------------\n>>>     > Want fast and easy access to all the code in your enterprise?\n>>>     Index and\n>>>     > search up to 200,000 lines of code with a free copy of Black Duck\n>>>     > Code Sight - the same software that powers the world's largest code\n>>>     > search on Ohloh, the Black Duck Open Hub! Try it now.\n>>>     > http://p.sf.net/sfu/bds\n>>>     >\n>>>\n>>>\n>>>\n>>>     ------------------------------------------------------------------------------\n>>>     Want fast and easy access to all the code in your enterprise? Index and\n>>>     search up to 200,000 lines of code with a free copy of Black Duck\n>>>     Code Sight - the same software that powers the world's largest code\n>>>     search on Ohloh, the Black Duck Open Hub! Try it now.\n>>>     http://p.sf.net/sfu/bds\n>>>     _______________________________________________\n>>>     Bitcoin-development mailing list\n>>>     Bitcoin-development at lists.sourceforge.net\n>>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Want fast and easy access to all the code in your enterprise? Index and\n>>> search up to 200,000 lines of code with a free copy of Black Duck\n>>> Code Sight - the same software that powers the world's largest code\n>>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>>> http://p.sf.net/sfu/bds\n>>>\n>>>\n>>>\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Want fast and easy access to all the code in your enterprise? Index and\n>> search up to 200,000 lines of code with a free copy of Black Duck\n>> Code Sight - the same software that powers the world's largest code\n>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>> http://p.sf.net/sfu/bds\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-07-16T22:02:45",
                "message_text_only": "Please excuse me. I had a more thorough look at the original problem and\nfound that the only problem with the original test case was that you\ncannot specify codepoints from the SMP using \\u in Java. I always tried\n\\u010400 but that doesn't work.\n\nHere is a fix for bitcoinj. The test now passes.\n\nhttps://github.com/bitcoinj/bitcoinj/pull/143\n\nWe can (and probably should) still need to filter control chars, I'll\nhave a look at that now again.\n\n\nOn 07/16/2014 11:06 PM, Aaron Voisine wrote:\n> If I first remove \\u0000, so the non-normalized passphrase is\n> \"\\u03D2\\u0301\\U00010400\\U0001F4A9\", and then NFC normalize it, it\n> becomes \"\\u03D3\\U00010400\\U0001F4A9\"\n> \n> UTF-8 encoded this is: 0xcf93f0909080f09f92a9 (not the same as what\n> you got, Andreas!)\n> \n> Encoding private key: 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4\n> with this passphrase, I get a BIP38 key of:\n> 6PRW5o9FMb4hAYRQPmgcvVDTyDtr6R17VMXGLmvKjKVpGkYhBJ4uYuR9wZ\n> \n> I recommend rather than simply removing control characters from the\n> password that instead the spec require that passwords containing\n> control characters are invalid. We don't want people trying to be\n> clever and putting them in thinking they are adding to the password\n> entropy.\n> \n> Also for UI compatibility across many platforms, I'm also in favor\n> disallowing any character below U+0020 (space)\n> \n> I can submit a PR once we figure out why Andreas's passphrase was\n> different than what I got.\n> \n> Aaron Voisine\n> breadwallet.com\n> \n> \n> On Wed, Jul 16, 2014 at 4:04 AM, Andreas Schildbach\n> <andreas at schildbach.de> wrote:\n>> Damn, I just realized that I implement only the decoding side of BIP38.\n>> So I cannot propose a complete test vector. Here is what I have:\n>>\n>>\n>> Passphrase: \u03d2\u0301\u2400\ud801\udc00\ud83d\udca9 (\\u03D2\\u0301\\u0000\\U00010400\\U0001F4A9; GREEK\n>> UPSILON WITH HOOK, COMBINING ACUTE ACCENT, NULL, DESERET CAPITAL LETTER\n>> LONG I, PILE OF POO)\n>>\n>> Passphrase bytes after removing ISO control characters and NFC\n>> normalization: 0xcf933034303066346139\n>>\n>> Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF\n>>\n>> Unencrypted private key (WIF):\n>> 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4\n>>\n>>\n>> Can someone calculate the encrypted key from it (using whatever\n>> implementation) and I will verify it decodes properly in bitcoinj?\n>>\n>>\n>>\n>> On 07/16/2014 12:46 PM, Andreas Schildbach wrote:\n>>> I will change the bitcoinj implementation and propose a new test vector.\n>>>\n>>>\n>>>\n>>> On 07/16/2014 11:29 AM, Mike Hearn wrote:\n>>>> Yes sorry, you're right, the issue starts with the null code point.\n>>>> Python seems to have problems starting there too. It might work if we\n>>>> took that out.\n>>>>\n>>>>\n>>>> On Wed, Jul 16, 2014 at 11:17 AM, Andreas Schildbach\n>>>> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:\n>>>>\n>>>>     Guys, you are always talking about the Unicode astral plane, but in fact\n>>>>     its a plain old (ASCII) control character where this problem starts and\n>>>>     likely ends: \\u0000.\n>>>>\n>>>>     Let's ban/filter ISO control characters and be done with it. Most\n>>>>     control characters will never be enterable by any keyboard into a\n>>>>     password field. Of course I assume that Character.isISOControl() works\n>>>>     consistently across platforms.\n>>>>\n>>>>     http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isISOControl%28char%29\n>>>>\n>>>>\n>>>>     On 07/16/2014 12:23 AM, Aaron Voisine wrote:\n>>>>     > If the user creates a password on an iOS device with an astral\n>>>>     > character and then can't enter that password on a JVM wallet, that\n>>>>     > sucks. If JVMs really can't support unicode NFC then that's a strong\n>>>>     > case to limit the spec to the subset of unicode that all popular\n>>>>     > platforms can support, but it sounds like it might just be a JVM\n>>>>     > string library bug that could hopefully be reported and fixed. I get\n>>>>     > the same result as in the test case using apple's\n>>>>     > CFStringNormalize(passphrase, kCFStringNormalizationFormC);\n>>>>     >\n>>>>     > Aaron Voisine\n>>>>     > breadwallet.com <http://breadwallet.com>\n>>>>     >\n>>>>     >\n>>>>     > On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net\n>>>>     <mailto:mike at plan99.net>> wrote:\n>>>>     >> Yes, we know, Andreas' code is indeed doing normalisation.\n>>>>     >>\n>>>>     >> However it appears the output bytes end up being different. What\n>>>>     I get back\n>>>>     >> is:\n>>>>     >>\n>>>>     >> cf930001303430300166346139\n>>>>     >>\n>>>>     >> vs\n>>>>     >>\n>>>>     >> cf9300f0909080f09f92a9\n>>>>     >>\n>>>>     >> from the spec.\n>>>>     >>\n>>>>     >> I'm not sure why. It appears this is due to the character from\n>>>>     the astral\n>>>>     >> planes. Java is old and uses 16 bit characters internally - it\n>>>>     wouldn't\n>>>>     >> surprise me if there's some weirdness that means it doesn't/won't\n>>>>     support\n>>>>     >> this kind of thing.\n>>>>     >>\n>>>>     >> I recommend instead that any implementation that wishes to be\n>>>>     compatible\n>>>>     >> with JVM based wallets (I suspect Android is the same) just\n>>>>     refuse any\n>>>>     >> passphrase that includes characters outside the BMP. At least\n>>>>     unless someone\n>>>>     >> can find a fix. I somehow doubt this will really hurt anyone.\n>>>>     >>\n>>>>     >>\n>>>>     ------------------------------------------------------------------------------\n>>>>     >> Want fast and easy access to all the code in your enterprise?\n>>>>     Index and\n>>>>     >> search up to 200,000 lines of code with a free copy of Black Duck\n>>>>     >> Code Sight - the same software that powers the world's largest code\n>>>>     >> search on Ohloh, the Black Duck Open Hub! Try it now.\n>>>>     >> http://p.sf.net/sfu/bds\n>>>>     >> _______________________________________________\n>>>>     >> Bitcoin-development mailing list\n>>>>     >> Bitcoin-development at lists.sourceforge.net\n>>>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>>>>     >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>     >>\n>>>>     >\n>>>>     >\n>>>>     ------------------------------------------------------------------------------\n>>>>     > Want fast and easy access to all the code in your enterprise?\n>>>>     Index and\n>>>>     > search up to 200,000 lines of code with a free copy of Black Duck\n>>>>     > Code Sight - the same software that powers the world's largest code\n>>>>     > search on Ohloh, the Black Duck Open Hub! Try it now.\n>>>>     > http://p.sf.net/sfu/bds\n>>>>     >\n>>>>\n>>>>\n>>>>\n>>>>     ------------------------------------------------------------------------------\n>>>>     Want fast and easy access to all the code in your enterprise? Index and\n>>>>     search up to 200,000 lines of code with a free copy of Black Duck\n>>>>     Code Sight - the same software that powers the world's largest code\n>>>>     search on Ohloh, the Black Duck Open Hub! Try it now.\n>>>>     http://p.sf.net/sfu/bds\n>>>>     _______________________________________________\n>>>>     Bitcoin-development mailing list\n>>>>     Bitcoin-development at lists.sourceforge.net\n>>>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>>>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>>\n>>>>\n>>>>\n>>>> ------------------------------------------------------------------------------\n>>>> Want fast and easy access to all the code in your enterprise? Index and\n>>>> search up to 200,000 lines of code with a free copy of Black Duck\n>>>> Code Sight - the same software that powers the world's largest code\n>>>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>>>> http://p.sf.net/sfu/bds\n>>>>\n>>>>\n>>>>\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Want fast and easy access to all the code in your enterprise? Index and\n>>> search up to 200,000 lines of code with a free copy of Black Duck\n>>> Code Sight - the same software that powers the world's largest code\n>>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>>> http://p.sf.net/sfu/bds\n>>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Want fast and easy access to all the code in your enterprise? Index and\n>> search up to 200,000 lines of code with a free copy of Black Duck\n>> Code Sight - the same software that powers the world's largest code\n>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>> http://p.sf.net/sfu/bds\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-07-16T22:22:57",
                "message_text_only": "Ok, I just fixed the String filtering so that it can handle SMP chars\nand my implementation behaves exactly like in your modified testcase\nquoted below.\n\nBitcoinj code available on this branch, in case we decide to change the\nspec:\n\nhttps://github.com/schildbach/bitcoinj/commits/bip38-normalize-control-characters\n\n\n\nOn 07/17/2014 12:02 AM, Andreas Schildbach wrote:\n> Please excuse me. I had a more thorough look at the original problem and\n> found that the only problem with the original test case was that you\n> cannot specify codepoints from the SMP using \\u in Java. I always tried\n> \\u010400 but that doesn't work.\n> \n> Here is a fix for bitcoinj. The test now passes.\n> \n> https://github.com/bitcoinj/bitcoinj/pull/143\n> \n> We can (and probably should) still need to filter control chars, I'll\n> have a look at that now again.\n> \n> \n> On 07/16/2014 11:06 PM, Aaron Voisine wrote:\n>> If I first remove \\u0000, so the non-normalized passphrase is\n>> \"\\u03D2\\u0301\\U00010400\\U0001F4A9\", and then NFC normalize it, it\n>> becomes \"\\u03D3\\U00010400\\U0001F4A9\"\n>>\n>> UTF-8 encoded this is: 0xcf93f0909080f09f92a9 (not the same as what\n>> you got, Andreas!)\n>>\n>> Encoding private key: 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4\n>> with this passphrase, I get a BIP38 key of:\n>> 6PRW5o9FMb4hAYRQPmgcvVDTyDtr6R17VMXGLmvKjKVpGkYhBJ4uYuR9wZ\n>>\n>> I recommend rather than simply removing control characters from the\n>> password that instead the spec require that passwords containing\n>> control characters are invalid. We don't want people trying to be\n>> clever and putting them in thinking they are adding to the password\n>> entropy.\n>>\n>> Also for UI compatibility across many platforms, I'm also in favor\n>> disallowing any character below U+0020 (space)\n>>\n>> I can submit a PR once we figure out why Andreas's passphrase was\n>> different than what I got.\n>>\n>> Aaron Voisine\n>> breadwallet.com\n>>\n>>\n>> On Wed, Jul 16, 2014 at 4:04 AM, Andreas Schildbach\n>> <andreas at schildbach.de> wrote:\n>>> Damn, I just realized that I implement only the decoding side of BIP38.\n>>> So I cannot propose a complete test vector. Here is what I have:\n>>>\n>>>\n>>> Passphrase: \u03d2\u0301\u2400\ud801\udc00\ud83d\udca9 (\\u03D2\\u0301\\u0000\\U00010400\\U0001F4A9; GREEK\n>>> UPSILON WITH HOOK, COMBINING ACUTE ACCENT, NULL, DESERET CAPITAL LETTER\n>>> LONG I, PILE OF POO)\n>>>\n>>> Passphrase bytes after removing ISO control characters and NFC\n>>> normalization: 0xcf933034303066346139\n>>>\n>>> Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF\n>>>\n>>> Unencrypted private key (WIF):\n>>> 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4\n>>>\n>>>\n>>> Can someone calculate the encrypted key from it (using whatever\n>>> implementation) and I will verify it decodes properly in bitcoinj?\n>>>\n>>>\n>>>\n>>> On 07/16/2014 12:46 PM, Andreas Schildbach wrote:\n>>>> I will change the bitcoinj implementation and propose a new test vector.\n>>>>\n>>>>\n>>>>\n>>>> On 07/16/2014 11:29 AM, Mike Hearn wrote:\n>>>>> Yes sorry, you're right, the issue starts with the null code point.\n>>>>> Python seems to have problems starting there too. It might work if we\n>>>>> took that out.\n>>>>>\n>>>>>\n>>>>> On Wed, Jul 16, 2014 at 11:17 AM, Andreas Schildbach\n>>>>> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:\n>>>>>\n>>>>>     Guys, you are always talking about the Unicode astral plane, but in fact\n>>>>>     its a plain old (ASCII) control character where this problem starts and\n>>>>>     likely ends: \\u0000.\n>>>>>\n>>>>>     Let's ban/filter ISO control characters and be done with it. Most\n>>>>>     control characters will never be enterable by any keyboard into a\n>>>>>     password field. Of course I assume that Character.isISOControl() works\n>>>>>     consistently across platforms.\n>>>>>\n>>>>>     http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isISOControl%28char%29\n>>>>>\n>>>>>\n>>>>>     On 07/16/2014 12:23 AM, Aaron Voisine wrote:\n>>>>>     > If the user creates a password on an iOS device with an astral\n>>>>>     > character and then can't enter that password on a JVM wallet, that\n>>>>>     > sucks. If JVMs really can't support unicode NFC then that's a strong\n>>>>>     > case to limit the spec to the subset of unicode that all popular\n>>>>>     > platforms can support, but it sounds like it might just be a JVM\n>>>>>     > string library bug that could hopefully be reported and fixed. I get\n>>>>>     > the same result as in the test case using apple's\n>>>>>     > CFStringNormalize(passphrase, kCFStringNormalizationFormC);\n>>>>>     >\n>>>>>     > Aaron Voisine\n>>>>>     > breadwallet.com <http://breadwallet.com>\n>>>>>     >\n>>>>>     >\n>>>>>     > On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net\n>>>>>     <mailto:mike at plan99.net>> wrote:\n>>>>>     >> Yes, we know, Andreas' code is indeed doing normalisation.\n>>>>>     >>\n>>>>>     >> However it appears the output bytes end up being different. What\n>>>>>     I get back\n>>>>>     >> is:\n>>>>>     >>\n>>>>>     >> cf930001303430300166346139\n>>>>>     >>\n>>>>>     >> vs\n>>>>>     >>\n>>>>>     >> cf9300f0909080f09f92a9\n>>>>>     >>\n>>>>>     >> from the spec.\n>>>>>     >>\n>>>>>     >> I'm not sure why. It appears this is due to the character from\n>>>>>     the astral\n>>>>>     >> planes. Java is old and uses 16 bit characters internally - it\n>>>>>     wouldn't\n>>>>>     >> surprise me if there's some weirdness that means it doesn't/won't\n>>>>>     support\n>>>>>     >> this kind of thing.\n>>>>>     >>\n>>>>>     >> I recommend instead that any implementation that wishes to be\n>>>>>     compatible\n>>>>>     >> with JVM based wallets (I suspect Android is the same) just\n>>>>>     refuse any\n>>>>>     >> passphrase that includes characters outside the BMP. At least\n>>>>>     unless someone\n>>>>>     >> can find a fix. I somehow doubt this will really hurt anyone.\n>>>>>     >>\n>>>>>     >>\n>>>>>     ------------------------------------------------------------------------------\n>>>>>     >> Want fast and easy access to all the code in your enterprise?\n>>>>>     Index and\n>>>>>     >> search up to 200,000 lines of code with a free copy of Black Duck\n>>>>>     >> Code Sight - the same software that powers the world's largest code\n>>>>>     >> search on Ohloh, the Black Duck Open Hub! Try it now.\n>>>>>     >> http://p.sf.net/sfu/bds\n>>>>>     >> _______________________________________________\n>>>>>     >> Bitcoin-development mailing list\n>>>>>     >> Bitcoin-development at lists.sourceforge.net\n>>>>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>>>>>     >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>>     >>\n>>>>>     >\n>>>>>     >\n>>>>>     ------------------------------------------------------------------------------\n>>>>>     > Want fast and easy access to all the code in your enterprise?\n>>>>>     Index and\n>>>>>     > search up to 200,000 lines of code with a free copy of Black Duck\n>>>>>     > Code Sight - the same software that powers the world's largest code\n>>>>>     > search on Ohloh, the Black Duck Open Hub! Try it now.\n>>>>>     > http://p.sf.net/sfu/bds\n>>>>>     >\n>>>>>\n>>>>>\n>>>>>\n>>>>>     ------------------------------------------------------------------------------\n>>>>>     Want fast and easy access to all the code in your enterprise? Index and\n>>>>>     search up to 200,000 lines of code with a free copy of Black Duck\n>>>>>     Code Sight - the same software that powers the world's largest code\n>>>>>     search on Ohloh, the Black Duck Open Hub! Try it now.\n>>>>>     http://p.sf.net/sfu/bds\n>>>>>     _______________________________________________\n>>>>>     Bitcoin-development mailing list\n>>>>>     Bitcoin-development at lists.sourceforge.net\n>>>>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>>>>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>>\n>>>>>\n>>>>>\n>>>>>\n>>>>> ------------------------------------------------------------------------------\n>>>>> Want fast and easy access to all the code in your enterprise? Index and\n>>>>> search up to 200,000 lines of code with a free copy of Black Duck\n>>>>> Code Sight - the same software that powers the world's largest code\n>>>>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>>>>> http://p.sf.net/sfu/bds\n>>>>>\n>>>>>\n>>>>>\n>>>>> _______________________________________________\n>>>>> Bitcoin-development mailing list\n>>>>> Bitcoin-development at lists.sourceforge.net\n>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>>\n>>>>\n>>>>\n>>>>\n>>>> ------------------------------------------------------------------------------\n>>>> Want fast and easy access to all the code in your enterprise? Index and\n>>>> search up to 200,000 lines of code with a free copy of Black Duck\n>>>> Code Sight - the same software that powers the world's largest code\n>>>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>>>> http://p.sf.net/sfu/bds\n>>>>\n>>>\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Want fast and easy access to all the code in your enterprise? Index and\n>>> search up to 200,000 lines of code with a free copy of Black Duck\n>>> Code Sight - the same software that powers the world's largest code\n>>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>>> http://p.sf.net/sfu/bds\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>> ------------------------------------------------------------------------------\n>> Want fast and easy access to all the code in your enterprise? Index and\n>> search up to 200,000 lines of code with a free copy of Black Duck\n>> Code Sight - the same software that powers the world's largest code\n>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>> http://p.sf.net/sfu/bds\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-17T10:59:26",
                "message_text_only": "Glad we got to the bottom of that. That's quite a nasty compiler/language\nbug I must say. Not even a warning. Still, python crashes when trying to\nprint the name of a null character. It wouldn't surprise me if there are\nother weird issues lurking. Would definitely sleep better with a more\nrestricted character set.\nOn 17 Jul 2014 00:04, \"Andreas Schildbach\" <andreas at schildbach.de> wrote:\n\n> Please excuse me. I had a more thorough look at the original problem and\n> found that the only problem with the original test case was that you\n> cannot specify codepoints from the SMP using \\u in Java. I always tried\n> \\u010400 but that doesn't work.\n>\n> Here is a fix for bitcoinj. The test now passes.\n>\n> https://github.com/bitcoinj/bitcoinj/pull/143\n>\n> We can (and probably should) still need to filter control chars, I'll\n> have a look at that now again.\n>\n>\n> On 07/16/2014 11:06 PM, Aaron Voisine wrote:\n> > If I first remove \\u0000, so the non-normalized passphrase is\n> > \"\\u03D2\\u0301\\U00010400\\U0001F4A9\", and then NFC normalize it, it\n> > becomes \"\\u03D3\\U00010400\\U0001F4A9\"\n> >\n> > UTF-8 encoded this is: 0xcf93f0909080f09f92a9 (not the same as what\n> > you got, Andreas!)\n> >\n> > Encoding private key: 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4\n> > with this passphrase, I get a BIP38 key of:\n> > 6PRW5o9FMb4hAYRQPmgcvVDTyDtr6R17VMXGLmvKjKVpGkYhBJ4uYuR9wZ\n> >\n> > I recommend rather than simply removing control characters from the\n> > password that instead the spec require that passwords containing\n> > control characters are invalid. We don't want people trying to be\n> > clever and putting them in thinking they are adding to the password\n> > entropy.\n> >\n> > Also for UI compatibility across many platforms, I'm also in favor\n> > disallowing any character below U+0020 (space)\n> >\n> > I can submit a PR once we figure out why Andreas's passphrase was\n> > different than what I got.\n> >\n> > Aaron Voisine\n> > breadwallet.com\n> >\n> >\n> > On Wed, Jul 16, 2014 at 4:04 AM, Andreas Schildbach\n> > <andreas at schildbach.de> wrote:\n> >> Damn, I just realized that I implement only the decoding side of BIP38.\n> >> So I cannot propose a complete test vector. Here is what I have:\n> >>\n> >>\n> >> Passphrase: \u03d2\u0301\u2400\ud801\udc00\ud83d\udca9 (\\u03D2\\u0301\\u0000\\U00010400\\U0001F4A9; GREEK\n> >> UPSILON WITH HOOK, COMBINING ACUTE ACCENT, NULL, DESERET CAPITAL LETTER\n> >> LONG I, PILE OF POO)\n> >>\n> >> Passphrase bytes after removing ISO control characters and NFC\n> >> normalization: 0xcf933034303066346139\n> >>\n> >> Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF\n> >>\n> >> Unencrypted private key (WIF):\n> >> 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4\n> >>\n> >>\n> >> Can someone calculate the encrypted key from it (using whatever\n> >> implementation) and I will verify it decodes properly in bitcoinj?\n> >>\n> >>\n> >>\n> >> On 07/16/2014 12:46 PM, Andreas Schildbach wrote:\n> >>> I will change the bitcoinj implementation and propose a new test\n> vector.\n> >>>\n> >>>\n> >>>\n> >>> On 07/16/2014 11:29 AM, Mike Hearn wrote:\n> >>>> Yes sorry, you're right, the issue starts with the null code point.\n> >>>> Python seems to have problems starting there too. It might work if we\n> >>>> took that out.\n> >>>>\n> >>>>\n> >>>> On Wed, Jul 16, 2014 at 11:17 AM, Andreas Schildbach\n> >>>> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:\n> >>>>\n> >>>>     Guys, you are always talking about the Unicode astral plane, but\n> in fact\n> >>>>     its a plain old (ASCII) control character where this problem\n> starts and\n> >>>>     likely ends: \\u0000.\n> >>>>\n> >>>>     Let's ban/filter ISO control characters and be done with it. Most\n> >>>>     control characters will never be enterable by any keyboard into a\n> >>>>     password field. Of course I assume that Character.isISOControl()\n> works\n> >>>>     consistently across platforms.\n> >>>>\n> >>>>\n> http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isISOControl%28char%29\n> >>>>\n> >>>>\n> >>>>     On 07/16/2014 12:23 AM, Aaron Voisine wrote:\n> >>>>     > If the user creates a password on an iOS device with an astral\n> >>>>     > character and then can't enter that password on a JVM wallet,\n> that\n> >>>>     > sucks. If JVMs really can't support unicode NFC then that's a\n> strong\n> >>>>     > case to limit the spec to the subset of unicode that all popular\n> >>>>     > platforms can support, but it sounds like it might just be a JVM\n> >>>>     > string library bug that could hopefully be reported and fixed.\n> I get\n> >>>>     > the same result as in the test case using apple's\n> >>>>     > CFStringNormalize(passphrase, kCFStringNormalizationFormC);\n> >>>>     >\n> >>>>     > Aaron Voisine\n> >>>>     > breadwallet.com <http://breadwallet.com>\n> >>>>     >\n> >>>>     >\n> >>>>     > On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn <mike at plan99.net\n> >>>>     <mailto:mike at plan99.net>> wrote:\n> >>>>     >> Yes, we know, Andreas' code is indeed doing normalisation.\n> >>>>     >>\n> >>>>     >> However it appears the output bytes end up being different.\n> What\n> >>>>     I get back\n> >>>>     >> is:\n> >>>>     >>\n> >>>>     >> cf930001303430300166346139\n> >>>>     >>\n> >>>>     >> vs\n> >>>>     >>\n> >>>>     >> cf9300f0909080f09f92a9\n> >>>>     >>\n> >>>>     >> from the spec.\n> >>>>     >>\n> >>>>     >> I'm not sure why. It appears this is due to the character from\n> >>>>     the astral\n> >>>>     >> planes. Java is old and uses 16 bit characters internally - it\n> >>>>     wouldn't\n> >>>>     >> surprise me if there's some weirdness that means it\n> doesn't/won't\n> >>>>     support\n> >>>>     >> this kind of thing.\n> >>>>     >>\n> >>>>     >> I recommend instead that any implementation that wishes to be\n> >>>>     compatible\n> >>>>     >> with JVM based wallets (I suspect Android is the same) just\n> >>>>     refuse any\n> >>>>     >> passphrase that includes characters outside the BMP. At least\n> >>>>     unless someone\n> >>>>     >> can find a fix. I somehow doubt this will really hurt anyone.\n> >>>>     >>\n> >>>>     >>\n> >>>>\n> ------------------------------------------------------------------------------\n> >>>>     >> Want fast and easy access to all the code in your enterprise?\n> >>>>     Index and\n> >>>>     >> search up to 200,000 lines of code with a free copy of Black\n> Duck\n> >>>>     >> Code Sight - the same software that powers the world's largest\n> code\n> >>>>     >> search on Ohloh, the Black Duck Open Hub! Try it now.\n> >>>>     >> http://p.sf.net/sfu/bds\n> >>>>     >> _______________________________________________\n> >>>>     >> Bitcoin-development mailing list\n> >>>>     >> Bitcoin-development at lists.sourceforge.net\n> >>>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n> >>>>     >>\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>>>     >>\n> >>>>     >\n> >>>>     >\n> >>>>\n> ------------------------------------------------------------------------------\n> >>>>     > Want fast and easy access to all the code in your enterprise?\n> >>>>     Index and\n> >>>>     > search up to 200,000 lines of code with a free copy of Black\n> Duck\n> >>>>     > Code Sight - the same software that powers the world's largest\n> code\n> >>>>     > search on Ohloh, the Black Duck Open Hub! Try it now.\n> >>>>     > http://p.sf.net/sfu/bds\n> >>>>     >\n> >>>>\n> >>>>\n> >>>>\n> >>>>\n> ------------------------------------------------------------------------------\n> >>>>     Want fast and easy access to all the code in your enterprise?\n> Index and\n> >>>>     search up to 200,000 lines of code with a free copy of Black Duck\n> >>>>     Code Sight - the same software that powers the world's largest\n> code\n> >>>>     search on Ohloh, the Black Duck Open Hub! Try it now.\n> >>>>     http://p.sf.net/sfu/bds\n> >>>>     _______________________________________________\n> >>>>     Bitcoin-development mailing list\n> >>>>     Bitcoin-development at lists.sourceforge.net\n> >>>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n> >>>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>>>\n> >>>>\n> >>>>\n> >>>>\n> >>>>\n> ------------------------------------------------------------------------------\n> >>>> Want fast and easy access to all the code in your enterprise? Index\n> and\n> >>>> search up to 200,000 lines of code with a free copy of Black Duck\n> >>>> Code Sight - the same software that powers the world's largest code\n> >>>> search on Ohloh, the Black Duck Open Hub! Try it now.\n> >>>> http://p.sf.net/sfu/bds\n> >>>>\n> >>>>\n> >>>>\n> >>>> _______________________________________________\n> >>>> Bitcoin-development mailing list\n> >>>> Bitcoin-development at lists.sourceforge.net\n> >>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>>>\n> >>>\n> >>>\n> >>>\n> >>>\n> ------------------------------------------------------------------------------\n> >>> Want fast and easy access to all the code in your enterprise? Index and\n> >>> search up to 200,000 lines of code with a free copy of Black Duck\n> >>> Code Sight - the same software that powers the world's largest code\n> >>> search on Ohloh, the Black Duck Open Hub! Try it now.\n> >>> http://p.sf.net/sfu/bds\n> >>>\n> >>\n> >>\n> >>\n> >>\n> ------------------------------------------------------------------------------\n> >> Want fast and easy access to all the code in your enterprise? Index and\n> >> search up to 200,000 lines of code with a free copy of Black Duck\n> >> Code Sight - the same software that powers the world's largest code\n> >> search on Ohloh, the Black Duck Open Hub! Try it now.\n> >> http://p.sf.net/sfu/bds\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Want fast and easy access to all the code in your enterprise? Index and\n> > search up to 200,000 lines of code with a free copy of Black Duck\n> > Code Sight - the same software that powers the world's largest code\n> > search on Ohloh, the Black Duck Open Hub! Try it now.\n> > http://p.sf.net/sfu/bds\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140717/3c2437eb/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-07-17T11:27:57",
                "message_text_only": "Here is a good article that helped me with what's going wrong:\n\nhttp://www.oracle.com/technetwork/articles/javase/supplementary-142654.html\n\nBasically, Java is stuck at 16 bits per char due to legacy reasons. They\nadmit that for a new language, they would probably use 32 (or 24?) bits\nper char.\n\n\\u literals express UTF-16 encoding, so you have to use 16 bits. I\nlearned that for codepoint 0x010400, I could write \"\\uD801\\uDC00\", which\nis the UTF-16 encoding of that codepoint.\n\nOther languages have literals for codepoints. E.g. Python can use\nu\"\\U00010400\" or HTML has &#x10400;  Unfortunately, Java is missing such\na construct (at least in Java6).\n\n\nOn 07/17/2014 12:59 PM, Mike Hearn wrote:\n> Glad we got to the bottom of that. That's quite a nasty\n> compiler/language bug I must say. Not even a warning. Still, python\n> crashes when trying to print the name of a null character. It wouldn't\n> surprise me if there are other weird issues lurking. Would definitely\n> sleep better with a more restricted character set.\n> \n> On 17 Jul 2014 00:04, \"Andreas Schildbach\" <andreas at schildbach.de\n> <mailto:andreas at schildbach.de>> wrote:\n> \n>     Please excuse me. I had a more thorough look at the original problem and\n>     found that the only problem with the original test case was that you\n>     cannot specify codepoints from the SMP using \\u in Java. I always tried\n>     \\u010400 but that doesn't work.\n> \n>     Here is a fix for bitcoinj. The test now passes.\n> \n>     https://github.com/bitcoinj/bitcoinj/pull/143\n> \n>     We can (and probably should) still need to filter control chars, I'll\n>     have a look at that now again.\n> \n> \n>     On 07/16/2014 11:06 PM, Aaron Voisine wrote:\n>     > If I first remove \\u0000, so the non-normalized passphrase is\n>     > \"\\u03D2\\u0301\\U00010400\\U0001F4A9\", and then NFC normalize it, it\n>     > becomes \"\\u03D3\\U00010400\\U0001F4A9\"\n>     >\n>     > UTF-8 encoded this is: 0xcf93f0909080f09f92a9 (not the same as what\n>     > you got, Andreas!)\n>     >\n>     > Encoding private key:\n>     5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4\n>     > with this passphrase, I get a BIP38 key of:\n>     > 6PRW5o9FMb4hAYRQPmgcvVDTyDtr6R17VMXGLmvKjKVpGkYhBJ4uYuR9wZ\n>     >\n>     > I recommend rather than simply removing control characters from the\n>     > password that instead the spec require that passwords containing\n>     > control characters are invalid. We don't want people trying to be\n>     > clever and putting them in thinking they are adding to the password\n>     > entropy.\n>     >\n>     > Also for UI compatibility across many platforms, I'm also in favor\n>     > disallowing any character below U+0020 (space)\n>     >\n>     > I can submit a PR once we figure out why Andreas's passphrase was\n>     > different than what I got.\n>     >\n>     > Aaron Voisine\n>     > breadwallet.com <http://breadwallet.com>\n>     >\n>     >\n>     > On Wed, Jul 16, 2014 at 4:04 AM, Andreas Schildbach\n>     > <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:\n>     >> Damn, I just realized that I implement only the decoding side of\n>     BIP38.\n>     >> So I cannot propose a complete test vector. Here is what I have:\n>     >>\n>     >>\n>     >> Passphrase: \u03d2\u0301\u2400\ud801\udc00\ud83d\udca9 (\\u03D2\\u0301\\u0000\\U00010400\\U0001F4A9; GREEK\n>     >> UPSILON WITH HOOK, COMBINING ACUTE ACCENT, NULL, DESERET CAPITAL\n>     LETTER\n>     >> LONG I, PILE OF POO)\n>     >>\n>     >> Passphrase bytes after removing ISO control characters and NFC\n>     >> normalization: 0xcf933034303066346139\n>     >>\n>     >> Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF\n>     >>\n>     >> Unencrypted private key (WIF):\n>     >> 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4\n>     >>\n>     >>\n>     >> Can someone calculate the encrypted key from it (using whatever\n>     >> implementation) and I will verify it decodes properly in bitcoinj?\n>     >>\n>     >>\n>     >>\n>     >> On 07/16/2014 12:46 PM, Andreas Schildbach wrote:\n>     >>> I will change the bitcoinj implementation and propose a new test\n>     vector.\n>     >>>\n>     >>>\n>     >>>\n>     >>> On 07/16/2014 11:29 AM, Mike Hearn wrote:\n>     >>>> Yes sorry, you're right, the issue starts with the null code point.\n>     >>>> Python seems to have problems starting there too. It might work\n>     if we\n>     >>>> took that out.\n>     >>>>\n>     >>>>\n>     >>>> On Wed, Jul 16, 2014 at 11:17 AM, Andreas Schildbach\n>     >>>> <andreas at schildbach.de <mailto:andreas at schildbach.de>\n>     <mailto:andreas at schildbach.de <mailto:andreas at schildbach.de>>> wrote:\n>     >>>>\n>     >>>>     Guys, you are always talking about the Unicode astral\n>     plane, but in fact\n>     >>>>     its a plain old (ASCII) control character where this\n>     problem starts and\n>     >>>>     likely ends: \\u0000.\n>     >>>>\n>     >>>>     Let's ban/filter ISO control characters and be done with\n>     it. Most\n>     >>>>     control characters will never be enterable by any keyboard\n>     into a\n>     >>>>     password field. Of course I assume that\n>     Character.isISOControl() works\n>     >>>>     consistently across platforms.\n>     >>>>\n>     >>>>    \n>     http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isISOControl%28char%29\n>     >>>>\n>     >>>>\n>     >>>>     On 07/16/2014 12:23 AM, Aaron Voisine wrote:\n>     >>>>     > If the user creates a password on an iOS device with an\n>     astral\n>     >>>>     > character and then can't enter that password on a JVM\n>     wallet, that\n>     >>>>     > sucks. If JVMs really can't support unicode NFC then\n>     that's a strong\n>     >>>>     > case to limit the spec to the subset of unicode that all\n>     popular\n>     >>>>     > platforms can support, but it sounds like it might just\n>     be a JVM\n>     >>>>     > string library bug that could hopefully be reported and\n>     fixed. I get\n>     >>>>     > the same result as in the test case using apple's\n>     >>>>     > CFStringNormalize(passphrase, kCFStringNormalizationFormC);\n>     >>>>     >\n>     >>>>     > Aaron Voisine\n>     >>>>     > breadwallet.com <http://breadwallet.com>\n>     <http://breadwallet.com>\n>     >>>>     >\n>     >>>>     >\n>     >>>>     > On Tue, Jul 15, 2014 at 11:20 AM, Mike Hearn\n>     <mike at plan99.net <mailto:mike at plan99.net>\n>     >>>>     <mailto:mike at plan99.net <mailto:mike at plan99.net>>> wrote:\n>     >>>>     >> Yes, we know, Andreas' code is indeed doing normalisation.\n>     >>>>     >>\n>     >>>>     >> However it appears the output bytes end up being\n>     different. What\n>     >>>>     I get back\n>     >>>>     >> is:\n>     >>>>     >>\n>     >>>>     >> cf930001303430300166346139\n>     >>>>     >>\n>     >>>>     >> vs\n>     >>>>     >>\n>     >>>>     >> cf9300f0909080f09f92a9\n>     >>>>     >>\n>     >>>>     >> from the spec.\n>     >>>>     >>\n>     >>>>     >> I'm not sure why. It appears this is due to the\n>     character from\n>     >>>>     the astral\n>     >>>>     >> planes. Java is old and uses 16 bit characters\n>     internally - it\n>     >>>>     wouldn't\n>     >>>>     >> surprise me if there's some weirdness that means it\n>     doesn't/won't\n>     >>>>     support\n>     >>>>     >> this kind of thing.\n>     >>>>     >>\n>     >>>>     >> I recommend instead that any implementation that wishes\n>     to be\n>     >>>>     compatible\n>     >>>>     >> with JVM based wallets (I suspect Android is the same) just\n>     >>>>     refuse any\n>     >>>>     >> passphrase that includes characters outside the BMP. At\n>     least\n>     >>>>     unless someone\n>     >>>>     >> can find a fix. I somehow doubt this will really hurt\n>     anyone.\n>     >>>>     >>\n>     >>>>     >>\n>     >>>>    \n>     ------------------------------------------------------------------------------\n>     >>>>     >> Want fast and easy access to all the code in your\n>     enterprise?\n>     >>>>     Index and\n>     >>>>     >> search up to 200,000 lines of code with a free copy of\n>     Black Duck\n>     >>>>     >> Code Sight - the same software that powers the world's\n>     largest code\n>     >>>>     >> search on Ohloh, the Black Duck Open Hub! Try it now.\n>     >>>>     >> http://p.sf.net/sfu/bds\n>     >>>>     >> _______________________________________________\n>     >>>>     >> Bitcoin-development mailing list\n>     >>>>     >> Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     >>>>     <mailto:Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>>\n>     >>>>     >>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>     >>>>     >>\n>     >>>>     >\n>     >>>>     >\n>     >>>>    \n>     ------------------------------------------------------------------------------\n>     >>>>     > Want fast and easy access to all the code in your enterprise?\n>     >>>>     Index and\n>     >>>>     > search up to 200,000 lines of code with a free copy of\n>     Black Duck\n>     >>>>     > Code Sight - the same software that powers the world's\n>     largest code\n>     >>>>     > search on Ohloh, the Black Duck Open Hub! Try it now.\n>     >>>>     > http://p.sf.net/sfu/bds\n>     >>>>     >\n>     >>>>\n>     >>>>\n>     >>>>\n>     >>>>    \n>     ------------------------------------------------------------------------------\n>     >>>>     Want fast and easy access to all the code in your\n>     enterprise? Index and\n>     >>>>     search up to 200,000 lines of code with a free copy of\n>     Black Duck\n>     >>>>     Code Sight - the same software that powers the world's\n>     largest code\n>     >>>>     search on Ohloh, the Black Duck Open Hub! Try it now.\n>     >>>>     http://p.sf.net/sfu/bds\n>     >>>>     _______________________________________________\n>     >>>>     Bitcoin-development mailing list\n>     >>>>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     >>>>     <mailto:Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>>\n>     >>>>    \n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>     >>>>\n>     >>>>\n>     >>>>\n>     >>>>\n>     >>>>\n>     ------------------------------------------------------------------------------\n>     >>>> Want fast and easy access to all the code in your enterprise?\n>     Index and\n>     >>>> search up to 200,000 lines of code with a free copy of Black Duck\n>     >>>> Code Sight - the same software that powers the world's largest code\n>     >>>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>     >>>> http://p.sf.net/sfu/bds\n>     >>>>\n>     >>>>\n>     >>>>\n>     >>>> _______________________________________________\n>     >>>> Bitcoin-development mailing list\n>     >>>> Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     >>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>     >>>>\n>     >>>\n>     >>>\n>     >>>\n>     >>>\n>     ------------------------------------------------------------------------------\n>     >>> Want fast and easy access to all the code in your enterprise?\n>     Index and\n>     >>> search up to 200,000 lines of code with a free copy of Black Duck\n>     >>> Code Sight - the same software that powers the world's largest code\n>     >>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>     >>> http://p.sf.net/sfu/bds\n>     >>>\n>     >>\n>     >>\n>     >>\n>     >>\n>     ------------------------------------------------------------------------------\n>     >> Want fast and easy access to all the code in your enterprise?\n>     Index and\n>     >> search up to 200,000 lines of code with a free copy of Black Duck\n>     >> Code Sight - the same software that powers the world's largest code\n>     >> search on Ohloh, the Black Duck Open Hub! Try it now.\n>     >> http://p.sf.net/sfu/bds\n>     >> _______________________________________________\n>     >> Bitcoin-development mailing list\n>     >> Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>     >\n>     >\n>     ------------------------------------------------------------------------------\n>     > Want fast and easy access to all the code in your enterprise?\n>     Index and\n>     > search up to 200,000 lines of code with a free copy of Black Duck\n>     > Code Sight - the same software that powers the world's largest code\n>     > search on Ohloh, the Black Duck Open Hub! Try it now.\n>     > http://p.sf.net/sfu/bds\n>     > _______________________________________________\n>     > Bitcoin-development mailing list\n>     > Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>     >\n> \n> \n> \n>     ------------------------------------------------------------------------------\n>     Want fast and easy access to all the code in your enterprise? Index and\n>     search up to 200,000 lines of code with a free copy of Black Duck\n>     Code Sight - the same software that powers the world's largest code\n>     search on Ohloh, the Black Duck Open Hub! Try it now.\n>     http://p.sf.net/sfu/bds\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Wladimir",
                "date": "2014-07-16T12:38:05",
                "message_text_only": "On Wed, Jul 16, 2014 at 11:29 AM, Mike Hearn <mike at plan99.net> wrote:\n> Yes sorry, you're right, the issue starts with the null code point. Python\n> seems to have problems starting there too. It might work if we took that\n> out.\n\nForbidding control characters, at least anything < 32 makes a lot of\nsense to me. Carriage returns, linefeeds, formfeeds, null characters,\nI see no valid reason to allow them and lots of reasons they could\ncause havoc.\n\nPILE OF POO or GRINNING CAT FACE WITH SMILING EYES should be allowed\nin this day and age though.\n\nWladimir"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-15T15:17:04",
                "message_text_only": "Unicode guarantees that null-terminated strings still work.  U+0000\nterminates a unicode (or C) string.  strlen() gets the string byte\ncount.  mbstowcs() gets the character count.\n\nWhitespace can be problematic, but should be allowed.  Control\ncharacters should be filtered.  Emoticons probably cannot be filtered\nwithout substandard approaches such as character blacklists, a road\nyou do not want to travel.\n\n(all this is simply standard practice)\n\n\nOn Tue, Jul 15, 2014 at 9:07 AM, Eric Winer <enwiner at gmail.com> wrote:\n> I don't know for sure if the test vector is correct NFC form.  But for what\n> it's worth, the Pile of Poo character is pretty easily accessible on the\n> iPhone and Android keyboards, and in this string it's already in NFC form\n> (f09f92a9 in the test result).  I've certainly seen it in usernames around\n> the internet, and wouldn't be surprised to see it in passphrases entered on\n> smartphones, especially if the author of a BIP38-compatible app includes a\n> (possibly ill-advised) suggestion to have your passphrase \"include special\n> characters\".\n>\n> I haven't seen the NULL character on any smartphone keyboards, though - I\n> assume the iOS and Android developers had the foresight to know how much\n> havoc that would wreak on systems assuming null-terminated strings.  It\n> seems unlikely that NULL would be in a real-world passphrase entered by a\n> sane user.\n>\n>\n> On Tue, Jul 15, 2014 at 8:03 AM, Mike Hearn <mike at plan99.net> wrote:\n>>\n>> [+cc aaron]\n>>\n>> We recently added an implementation of BIP 38 (password protected private\n>> keys) to bitcoinj. It came to my attention that the third test vector may be\n>> broken. It gives a hex version of what the NFC normalised version of the\n>> input string should be, but this does not match the results of the Java\n>> unicode normaliser, and in fact I can't even get Python to print the names\n>> of the characters past the embedded null. I'm curious where this normalised\n>> version came from.\n>>\n>> Given that \"pile of poo\" is not a character I think any sane user would\n>> put into a passphrase, I question the value of this test vector. NFC form is\n>> intended to collapse things like umlaut control characters onto their prior\n>> code point, but here we're feeding the algorithm what is basically garbage\n>> so I'm not totally surprised that different implementations appear to\n>> disagree on the outcome.\n>>\n>> Proposed action: we remove this test vector as it does not represent any\n>> real world usage of the spec, or if we desperately need to verify NFC\n>> normalisation I suggest using a different, more realistic test string, like\n>> Z\u00fcrich, or something written in Thai.\n>>\n>>\n>>\n>> Test 3:\n>>\n>> Passphrase \u03d2\u0301\u2400\ud801\udc00\ud83d\udca9 (\\u03D2\\u0301\\u0000\\U00010400\\U0001F4A9; GREEK UPSILON\n>> WITH HOOK, COMBINING ACUTE ACCENT, NULL, DESERET CAPITAL LETTER LONG I, PILE\n>> OF POO)\n>> Encrypted key: 6PRW5o9FLp4gJDDVqJQKJFTpMvdsSGJxMYHtHaQBF3ooa8mwD69bapcDQn\n>> Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF\n>> Unencrypted private key (WIF):\n>> 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4\n>> Note: The non-standard UTF-8 characters in this passphrase should be NFC\n>> normalized to result in a passphrase of0xcf9300f0909080f09f92a9 before\n>> further processing\n>>\n>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Want fast and easy access to all the code in your enterprise? Index and\n>> search up to 200,000 lines of code with a free copy of Black Duck\n>> Code Sight - the same software that powers the world's largest code\n>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>> http://p.sf.net/sfu/bds\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-15T15:20:00",
                "message_text_only": ">\n> Unicode guarantees that null-terminated strings still work.\n\n\nUTF-8 guarantees that. Other encodings do not, you can have null bytes in\nUTF-16 strings for example. Indeed most languages that use pascal-style\nencodings internally allow null characters in strings, it's just not a good\nidea to exploit that fact ...\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140715/db5f1b26/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-07-15T15:32:59",
                "message_text_only": "Can you provide the rationale for standard practice? For example, why\nshould whitespace be allowed? I regularly use trim() on any passphrase\n(or other input ftm).\n\nSo what's the action point? Should we amend the spec to filter control\ncharacters? That would get rid of the \\u0000 problem.\n\n\nOn 07/15/2014 05:17 PM, Jeff Garzik wrote:\n> Unicode guarantees that null-terminated strings still work.  U+0000\n> terminates a unicode (or C) string.  strlen() gets the string byte\n> count.  mbstowcs() gets the character count.\n> \n> Whitespace can be problematic, but should be allowed.  Control\n> characters should be filtered.  Emoticons probably cannot be filtered\n> without substandard approaches such as character blacklists, a road\n> you do not want to travel.\n> \n> (all this is simply standard practice)\n> \n> \n> On Tue, Jul 15, 2014 at 9:07 AM, Eric Winer <enwiner at gmail.com> wrote:\n>> I don't know for sure if the test vector is correct NFC form.  But for what\n>> it's worth, the Pile of Poo character is pretty easily accessible on the\n>> iPhone and Android keyboards, and in this string it's already in NFC form\n>> (f09f92a9 in the test result).  I've certainly seen it in usernames around\n>> the internet, and wouldn't be surprised to see it in passphrases entered on\n>> smartphones, especially if the author of a BIP38-compatible app includes a\n>> (possibly ill-advised) suggestion to have your passphrase \"include special\n>> characters\".\n>>\n>> I haven't seen the NULL character on any smartphone keyboards, though - I\n>> assume the iOS and Android developers had the foresight to know how much\n>> havoc that would wreak on systems assuming null-terminated strings.  It\n>> seems unlikely that NULL would be in a real-world passphrase entered by a\n>> sane user.\n>>\n>>\n>> On Tue, Jul 15, 2014 at 8:03 AM, Mike Hearn <mike at plan99.net> wrote:\n>>>\n>>> [+cc aaron]\n>>>\n>>> We recently added an implementation of BIP 38 (password protected private\n>>> keys) to bitcoinj. It came to my attention that the third test vector may be\n>>> broken. It gives a hex version of what the NFC normalised version of the\n>>> input string should be, but this does not match the results of the Java\n>>> unicode normaliser, and in fact I can't even get Python to print the names\n>>> of the characters past the embedded null. I'm curious where this normalised\n>>> version came from.\n>>>\n>>> Given that \"pile of poo\" is not a character I think any sane user would\n>>> put into a passphrase, I question the value of this test vector. NFC form is\n>>> intended to collapse things like umlaut control characters onto their prior\n>>> code point, but here we're feeding the algorithm what is basically garbage\n>>> so I'm not totally surprised that different implementations appear to\n>>> disagree on the outcome.\n>>>\n>>> Proposed action: we remove this test vector as it does not represent any\n>>> real world usage of the spec, or if we desperately need to verify NFC\n>>> normalisation I suggest using a different, more realistic test string, like\n>>> Z\u00fcrich, or something written in Thai.\n>>>\n>>>\n>>>\n>>> Test 3:\n>>>\n>>> Passphrase \u03d2\u0301\u2400\ud801\udc00\ud83d\udca9 (\\u03D2\\u0301\\u0000\\U00010400\\U0001F4A9; GREEK UPSILON\n>>> WITH HOOK, COMBINING ACUTE ACCENT, NULL, DESERET CAPITAL LETTER LONG I, PILE\n>>> OF POO)\n>>> Encrypted key: 6PRW5o9FLp4gJDDVqJQKJFTpMvdsSGJxMYHtHaQBF3ooa8mwD69bapcDQn\n>>> Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF\n>>> Unencrypted private key (WIF):\n>>> 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4\n>>> Note: The non-standard UTF-8 characters in this passphrase should be NFC\n>>> normalized to result in a passphrase of0xcf9300f0909080f09f92a9 before\n>>> further processing\n>>>\n>>>\n>>>\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Want fast and easy access to all the code in your enterprise? Index and\n>>> search up to 200,000 lines of code with a free copy of Black Duck\n>>> Code Sight - the same software that powers the world's largest code\n>>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>>> http://p.sf.net/sfu/bds\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Want fast and easy access to all the code in your enterprise? Index and\n>> search up to 200,000 lines of code with a free copy of Black Duck\n>> Code Sight - the same software that powers the world's largest code\n>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>> http://p.sf.net/sfu/bds\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n> \n> \n>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-15T15:53:36",
                "message_text_only": "On whitespace:  Security UX testing I've seen shows it is mentally\neasier for some users to memorize and use longer passphrases, if they\nare permitted spaces.  I've not seen anything written on use of\ntabs/NLs/FFs in passphrases.\n\nI can see the logic of some systems, that convert \\s+ into ' ' for\npurposes of password hashing, even though that might frustrate a\nsecurity nerd or two.\nhttp://security.stackexchange.com/questions/32691/why-not-allow-spaces-in-a-password\n\nI do think control characters should be filtered.\n\nOn Tue, Jul 15, 2014 at 11:32 AM, Andreas Schildbach\n<andreas at schildbach.de> wrote:\n> Can you provide the rationale for standard practice? For example, why\n> should whitespace be allowed? I regularly use trim() on any passphrase\n> (or other input ftm).\n>\n> So what's the action point? Should we amend the spec to filter control\n> characters? That would get rid of the \\u0000 problem.\n>\n>\n> On 07/15/2014 05:17 PM, Jeff Garzik wrote:\n>> Unicode guarantees that null-terminated strings still work.  U+0000\n>> terminates a unicode (or C) string.  strlen() gets the string byte\n>> count.  mbstowcs() gets the character count.\n>>\n>> Whitespace can be problematic, but should be allowed.  Control\n>> characters should be filtered.  Emoticons probably cannot be filtered\n>> without substandard approaches such as character blacklists, a road\n>> you do not want to travel.\n>>\n>> (all this is simply standard practice)\n>>\n>>\n>> On Tue, Jul 15, 2014 at 9:07 AM, Eric Winer <enwiner at gmail.com> wrote:\n>>> I don't know for sure if the test vector is correct NFC form.  But for what\n>>> it's worth, the Pile of Poo character is pretty easily accessible on the\n>>> iPhone and Android keyboards, and in this string it's already in NFC form\n>>> (f09f92a9 in the test result).  I've certainly seen it in usernames around\n>>> the internet, and wouldn't be surprised to see it in passphrases entered on\n>>> smartphones, especially if the author of a BIP38-compatible app includes a\n>>> (possibly ill-advised) suggestion to have your passphrase \"include special\n>>> characters\".\n>>>\n>>> I haven't seen the NULL character on any smartphone keyboards, though - I\n>>> assume the iOS and Android developers had the foresight to know how much\n>>> havoc that would wreak on systems assuming null-terminated strings.  It\n>>> seems unlikely that NULL would be in a real-world passphrase entered by a\n>>> sane user.\n>>>\n>>>\n>>> On Tue, Jul 15, 2014 at 8:03 AM, Mike Hearn <mike at plan99.net> wrote:\n>>>>\n>>>> [+cc aaron]\n>>>>\n>>>> We recently added an implementation of BIP 38 (password protected private\n>>>> keys) to bitcoinj. It came to my attention that the third test vector may be\n>>>> broken. It gives a hex version of what the NFC normalised version of the\n>>>> input string should be, but this does not match the results of the Java\n>>>> unicode normaliser, and in fact I can't even get Python to print the names\n>>>> of the characters past the embedded null. I'm curious where this normalised\n>>>> version came from.\n>>>>\n>>>> Given that \"pile of poo\" is not a character I think any sane user would\n>>>> put into a passphrase, I question the value of this test vector. NFC form is\n>>>> intended to collapse things like umlaut control characters onto their prior\n>>>> code point, but here we're feeding the algorithm what is basically garbage\n>>>> so I'm not totally surprised that different implementations appear to\n>>>> disagree on the outcome.\n>>>>\n>>>> Proposed action: we remove this test vector as it does not represent any\n>>>> real world usage of the spec, or if we desperately need to verify NFC\n>>>> normalisation I suggest using a different, more realistic test string, like\n>>>> Z\u00fcrich, or something written in Thai.\n>>>>\n>>>>\n>>>>\n>>>> Test 3:\n>>>>\n>>>> Passphrase \u03d2\u0301\u2400\ud801\udc00\ud83d\udca9 (\\u03D2\\u0301\\u0000\\U00010400\\U0001F4A9; GREEK UPSILON\n>>>> WITH HOOK, COMBINING ACUTE ACCENT, NULL, DESERET CAPITAL LETTER LONG I, PILE\n>>>> OF POO)\n>>>> Encrypted key: 6PRW5o9FLp4gJDDVqJQKJFTpMvdsSGJxMYHtHaQBF3ooa8mwD69bapcDQn\n>>>> Bitcoin Address: 16ktGzmfrurhbhi6JGqsMWf7TyqK9HNAeF\n>>>> Unencrypted private key (WIF):\n>>>> 5Jajm8eQ22H3pGWLEVCXyvND8dQZhiQhoLJNKjYXk9roUFTMSZ4\n>>>> Note: The non-standard UTF-8 characters in this passphrase should be NFC\n>>>> normalized to result in a passphrase of0xcf9300f0909080f09f92a9 before\n>>>> further processing\n>>>>\n>>>>\n>>>>\n>>>>\n>>>>\n>>>> ------------------------------------------------------------------------------\n>>>> Want fast and easy access to all the code in your enterprise? Index and\n>>>> search up to 200,000 lines of code with a free copy of Black Duck\n>>>> Code Sight - the same software that powers the world's largest code\n>>>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>>>> http://p.sf.net/sfu/bds\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Want fast and easy access to all the code in your enterprise? Index and\n>>> search up to 200,000 lines of code with a free copy of Black Duck\n>>> Code Sight - the same software that powers the world's largest code\n>>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>>> http://p.sf.net/sfu/bds\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>\n>>\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            }
        ],
        "thread_summary": {
            "title": "BIP 38 NFC normalisation issue",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Wladimir",
                "Andreas Schildbach",
                "Mike Hearn",
                "Brooks Boyd",
                "Michael Wozniak",
                "Eric Winer",
                "Aaron Voisine"
            ],
            "messages_count": 22,
            "total_messages_chars_count": 117515
        }
    },
    {
        "title": "[Bitcoin-development] Pay to MultiScript hash:",
        "thread_messages": [
            {
                "author": "Jeremy",
                "date": "2014-07-16T17:56:54",
                "message_text_only": "Hey all,\n\nI had an idea for a new transaction type. The base idea is that it is\nmatching on script hashes much like pay to script hash, but checks for one\nof N scripts.\n\nA motivating case is for \"permission groups\". Let's say I want to have a\nsingle \"root user\" script, a 2 of 3 group, and a 2 of 2 group able to spend\na utxo. This would allow for any one of these permission groups to spend.\n\nRight now, this could be expressed multiple ways (ie, using an op_dup if\nthen else chain) , but all would incur additional costs in terms of\ncomplicated control flows. Instead, I would propose:\n\nOP_HASH160 [20-byte-hash-value 1]...[20-byte-hash-value N] OP_N\nOP_MULTISCRIPTHASHVERIFY\n\n\ncould be spent with\n\n...signatures... {serialized script}\n\n\n\u200bAnd the alternative formulation: (more complex!)\u200b\n\n\u200bOP_HASH160 OP_DUP [20-byte-hash-value 1]\u200b\n\u200b OP_IF OP_EQUAL\u200b\n\u200b OP_VERIFY OP_ELSE   <OP_DUP  [20-byte-hash-value 2]\u200b\u200b  OP_IF......>\nOP_ENDIF\u200b\n\n\n\nOf course, the permission group example is just one use case, there could\nbe other interesting combinations as well\n\u200b.\n\n\nThere is an implication in terms of increased utxo pool bloat, but also an\nimplication in terms of increased txn complexity (each 20 byte hash allows\nfor a 500 byte script, only one of the 500 byte scripts has to be\npermanently stored on blockchain).\n\n\nLooking forward to your feedback -- the idea is a bit preliminary, but I\nthink it could be exciting.\n\nBest,\n\nJeremy\n\n\n\n\n-- \nJeremy Rubin\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140716/a960cd3a/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-17T04:52:14",
                "message_text_only": "On Wed, Jul 16, 2014 at 1:56 PM, Jeremy <jlrubin at mit.edu> wrote:\n> Right now, this could be expressed multiple ways (ie, using an op_dup if\n> then else chain) , but all would incur additional costs in terms of\n> complicated control flows. Instead, I would propose:\n\nCan you quantify \"additional costs in terms of complicated control flows\"?\n\n\n> There is an implication in terms of increased utxo pool bloat, but also an\n> implication in terms of increased txn complexity (each 20 byte hash allows\n> for a 500 byte script, only one of the 500 byte scripts has to be\n> permanently stored on blockchain).\n\nWhen considering these costs, using a normal P2SH output + a script\nwith OP_IF and friends seems more straightforward?\n\nDoing boolean logic with multisig groups is quite possible, e.g.\n\"group AND group\", \"group OR (group AND group)\" etc.  Definitely a\nvalid use case.  I discussed how to do this on IRC with gmaxwell\nseveral months ago.  I call it \"multi-multisig\" for lack of a better\nname."
            },
            {
                "author": "Jeremy",
                "date": "2014-07-17T05:59:25",
                "message_text_only": "Additional costs would be in terms of A) chance of user error/application\nerror -- proposed method is much simpler, as well as extra bytes for\ncontrol flow ( 4 per script if I am counting right).\n\n\nThe costs on a normal script do seem slightly more friendly, except this\nmethod allows for hidden-till-spent permission groups, as well as as\nsmaller blockchain bloat overall (if scriptSig script has to store the\nlogic for all the potential permission group, it will be a larger script\nversus only needing one permission group's script). An added benefit could\nalso be in blockchain analysis -- you can actively monitor the utxo pool\nfor your known associated scripts, whereas you couldn't for specialty\nscripts assembled per group. Enables repeated spends with groups as a \"cost\nobject\" w/o having to recall all participants. ie, pay to the same perm\ngroups as the other employee did last time, but include me as a root this\ntime.\n\n\nDo you have a transcript of that chat by any chance? An interesting way to\ndo that would be to push the sigs onto the stack & have implicit orders,\nthen do expressions with their aliases, and then be able to assign\n\"spending groups\".\nex:\ncode_sep\npush script0\npush script1\npush script2\npush script3\ngroup_sep\nmkgroup_2, 0,1      ; the id will be 4\nmkgroup_3, 0,2,3   ; the id will be 5\nmkUnionGroup_2, 4,5 ; the id will be 6\n2_of_3_group 0, 1, 2\nmkIntersectionGroup_2 5, 6\ncomplement_last  ; complements last group, mutation\ndel_group 1          ; deletes the group #1, groups then reindex after\ndeletion (maybe the group was useful base class).\netc...\nmultisig check perm groups (checks if any groups on stack are valid from\nscript)\n\n\nor even something like adding a little SAT scripting language with an eval.\n\npush script0\npush script1\npush script2\npush script3\npush <a=(1 & 2 & 0), b=a-1, a | 3 | b >\neval\n\n\n\n\n\n\n\n\n\n\n\nOn Thu, Jul 17, 2014 at 12:52 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> On Wed, Jul 16, 2014 at 1:56 PM, Jeremy <jlrubin at mit.edu> wrote:\n> > Right now, this could be expressed multiple ways (ie, using an op_dup if\n> > then else chain) , but all would incur additional costs in terms of\n> > complicated control flows. Instead, I would propose:\n>\n> Can you quantify \"additional costs in terms of complicated control flows\"?\n>\n>\n> > There is an implication in terms of increased utxo pool bloat, but also\n> an\n> > implication in terms of increased txn complexity (each 20 byte hash\n> allows\n> > for a 500 byte script, only one of the 500 byte scripts has to be\n> > permanently stored on blockchain).\n>\n> When considering these costs, using a normal P2SH output + a script\n> with OP_IF and friends seems more straightforward?\n>\n> Doing boolean logic with multisig groups is quite possible, e.g.\n> \"group AND group\", \"group OR (group AND group)\" etc.  Definitely a\n> valid use case.  I discussed how to do this on IRC with gmaxwell\n> several months ago.  I call it \"multi-multisig\" for lack of a better\n> name.\n>\n\n\n\n-- \nJeremy Rubin\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140717/6d590441/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-17T06:21:42",
                "message_text_only": "In a system like bitcoin, where the system has to keep running, you\nhave to consider how to roll out upgrades, and the costs associated\nwith that.\n* the general cost of any network-wide change, versus P2SH which is\nalready analyzed by devs, rolled out and working\n* the cost of P2SH output is predictable, versus less predictable outputs\n* the cost of updating everybody to relay this new transaction type,\nwhereas P2SH Just Works already\n* cost of increasing rate of UTXO growth versus P2SH\n* \"default public\", versus P2SH's \"default private\"\n\nIt is true that publishing the script in the txout has the advantage\nof being easily audited by third parties scanning the blockchain, but\nin the interest of space efficiency you may accomplish the same thing\nby offering the script upon request out-of-band.  The script is\nhash-sealed by the P2SH address, enabling perfect proof.\n\nDon't have a transcript handy, but these things are usually logged and\ngoogle-searchable.\n\nIn any case, it would be nice to get together and start building a\n\"cookbook\" of useful scripts like the ones you've been describing.\nThe power of bitcoin scripts is only beginning to be explored.  Use\ncases and examples are very helpful.\n\n\n\nOn Thu, Jul 17, 2014 at 1:59 AM, Jeremy <jlrubin at mit.edu> wrote:\n> Additional costs would be in terms of A) chance of user error/application\n> error -- proposed method is much simpler, as well as extra bytes for control\n> flow ( 4 per script if I am counting right).\n>\n>\n> The costs on a normal script do seem slightly more friendly, except this\n> method allows for hidden-till-spent permission groups, as well as as smaller\n> blockchain bloat overall (if scriptSig script has to store the logic for all\n> the potential permission group, it will be a larger script  versus only\n> needing one permission group's script). An added benefit could also be in\n> blockchain analysis -- you can actively monitor the utxo pool for your known\n> associated scripts, whereas you couldn't for specialty scripts assembled per\n> group. Enables repeated spends with groups as a \"cost object\" w/o having to\n> recall all participants. ie, pay to the same perm groups as the other\n> employee did last time, but include me as a root this time.\n>\n>\n> Do you have a transcript of that chat by any chance? An interesting way to\n> do that would be to push the sigs onto the stack & have implicit orders,\n> then do expressions with their aliases, and then be able to assign \"spending\n> groups\".\n> ex:\n> code_sep\n> push script0\n> push script1\n> push script2\n> push script3\n> group_sep\n> mkgroup_2, 0,1      ; the id will be 4\n> mkgroup_3, 0,2,3   ; the id will be 5\n> mkUnionGroup_2, 4,5 ; the id will be 6\n> 2_of_3_group 0, 1, 2\n> mkIntersectionGroup_2 5, 6\n> complement_last  ; complements last group, mutation\n> del_group 1          ; deletes the group #1, groups then reindex after\n> deletion (maybe the group was useful base class).\n> etc...\n> multisig check perm groups (checks if any groups on stack are valid from\n> script)\n>\n>\n> or even something like adding a little SAT scripting language with an eval.\n>\n> push script0\n> push script1\n> push script2\n> push script3\n> push <a=(1 & 2 & 0), b=a-1, a | 3 | b >\n> eval\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n> On Thu, Jul 17, 2014 at 12:52 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>>\n>> On Wed, Jul 16, 2014 at 1:56 PM, Jeremy <jlrubin at mit.edu> wrote:\n>> > Right now, this could be expressed multiple ways (ie, using an op_dup if\n>> > then else chain) , but all would incur additional costs in terms of\n>> > complicated control flows. Instead, I would propose:\n>>\n>> Can you quantify \"additional costs in terms of complicated control flows\"?\n>>\n>>\n>> > There is an implication in terms of increased utxo pool bloat, but also\n>> > an\n>> > implication in terms of increased txn complexity (each 20 byte hash\n>> > allows\n>> > for a 500 byte script, only one of the 500 byte scripts has to be\n>> > permanently stored on blockchain).\n>>\n>> When considering these costs, using a normal P2SH output + a script\n>> with OP_IF and friends seems more straightforward?\n>>\n>> Doing boolean logic with multisig groups is quite possible, e.g.\n>> \"group AND group\", \"group OR (group AND group)\" etc.  Definitely a\n>> valid use case.  I discussed how to do this on IRC with gmaxwell\n>> several months ago.  I call it \"multi-multisig\" for lack of a better\n>> name.\n>\n>\n>\n>\n> --\n> Jeremy Rubin\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Jeremy",
                "date": "2014-07-17T19:55:10",
                "message_text_only": "* the general cost of any network-wide change, versus P2SH which is\nalready analyzed by devs, rolled out and working\n* the cost of updating everybody to relay this new transaction type,\nwhereas P2SH Just Works already\nfair -- I think that there may be a big benefit realizable with this kind\nof system.\n\n* cost of increasing rate of UTXO growth versus P2SH\nThis operation is similar in cost to multisig? Although I suppose there is\nthe proposal to make all multisigs p2sh\n\n* the cost of P2SH output is predictable, versus less predictable outputs\n * \"default public\", versus P2SH's \"default private\"\n-- Can you elaborate on these?\n\nI think part of the problem is that there is low incentive for\ndevelopment/cataloging  of these useful types of script because there isn't\na horizon on getting them broadcastable by nodes other than testnet? Even\nwith pay to script hash it is still currently relegated to a subset of\nscript types iirc (I think I'm wrong on this one maybe (hopefully) -- if\nso, let's get writing!)?\n\n\n\nHmm... another idea... what about doing a p2sh with a switch statement, ie:\n\nOP_HASH160 <script set hash> OP_EQUAL\n\npayable by:\n\n{signatures...} <scriptX> <<script1 hash>, <script2 hash>...<scriptN hash>\nin sorted order> OP_DUP\n\nAnd then executed like a normal p2sh transaction except before the\n<scriptX> is run, the set of hashes is checked for set membership (can't\nfind a concise way to express this, but it should be doable within the\ncurrent framework of p2sh processing).\n\nWhich lets you select one of n scripts each 520 bytes long without bloating\nthe utxo pool more than a p2sh, the cost being purely on disk.\n\nIn theory, this could represent a space savings on disk longterm for\nregular p2sh. ie, if I have two 2 of 3 groups I want to be able to spend,\nthis system would represent an overall space savings.\n\n\nAdding some kind of \"function-hash-pointer jump table / switch statement\"\ncould be pretty cool in terms of space savings as well as allowing for more\ncomplicated scripts to be built.\n\n\n\nOn Thu, Jul 17, 2014 at 2:21 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> In a system like bitcoin, where the system has to keep running, you\n> have to consider how to roll out upgrades, and the costs associated\n> with that.\n> * the general cost of any network-wide change, versus P2SH which is\n> already analyzed by devs, rolled out and working\n> * the cost of P2SH output is predictable, versus less predictable outputs\n> * the cost of updating everybody to relay this new transaction type,\n> whereas P2SH Just Works already\n> * cost of increasing rate of UTXO growth versus P2SH\n> * \"default public\", versus P2SH's \"default private\"\n>\n> It is true that publishing the script in the txout has the advantage\n> of being easily audited by third parties scanning the blockchain, but\n> in the interest of space efficiency you may accomplish the same thing\n> by offering the script upon request out-of-band.  The script is\n> hash-sealed by the P2SH address, enabling perfect proof.\n>\n> Don't have a transcript handy, but these things are usually logged and\n> google-searchable.\n>\n> In any case, it would be nice to get together and start building a\n> \"cookbook\" of useful scripts like the ones you've been describing.\n> The power of bitcoin scripts is only beginning to be explored.  Use\n> cases and examples are very helpful.\n>\n>\n>\n> On Thu, Jul 17, 2014 at 1:59 AM, Jeremy <jlrubin at mit.edu> wrote:\n> > Additional costs would be in terms of A) chance of user error/application\n> > error -- proposed method is much simpler, as well as extra bytes for\n> control\n> > flow ( 4 per script if I am counting right).\n> >\n> >\n> > The costs on a normal script do seem slightly more friendly, except this\n> > method allows for hidden-till-spent permission groups, as well as as\n> smaller\n> > blockchain bloat overall (if scriptSig script has to store the logic for\n> all\n> > the potential permission group, it will be a larger script  versus only\n> > needing one permission group's script). An added benefit could also be in\n> > blockchain analysis -- you can actively monitor the utxo pool for your\n> known\n> > associated scripts, whereas you couldn't for specialty scripts assembled\n> per\n> > group. Enables repeated spends with groups as a \"cost object\" w/o having\n> to\n> > recall all participants. ie, pay to the same perm groups as the other\n> > employee did last time, but include me as a root this time.\n> >\n> >\n> > Do you have a transcript of that chat by any chance? An interesting way\n> to\n> > do that would be to push the sigs onto the stack & have implicit orders,\n> > then do expressions with their aliases, and then be able to assign\n> \"spending\n> > groups\".\n> > ex:\n> > code_sep\n> > push script0\n> > push script1\n> > push script2\n> > push script3\n> > group_sep\n> > mkgroup_2, 0,1      ; the id will be 4\n> > mkgroup_3, 0,2,3   ; the id will be 5\n> > mkUnionGroup_2, 4,5 ; the id will be 6\n> > 2_of_3_group 0, 1, 2\n> > mkIntersectionGroup_2 5, 6\n> > complement_last  ; complements last group, mutation\n> > del_group 1          ; deletes the group #1, groups then reindex after\n> > deletion (maybe the group was useful base class).\n> > etc...\n> > multisig check perm groups (checks if any groups on stack are valid from\n> > script)\n> >\n> >\n> > or even something like adding a little SAT scripting language with an\n> eval.\n> >\n> > push script0\n> > push script1\n> > push script2\n> > push script3\n> > push <a=(1 & 2 & 0), b=a-1, a | 3 | b >\n> > eval\n> >\n> >\n> >\n> >\n> >\n> >\n> >\n> >\n> >\n> >\n> >\n> > On Thu, Jul 17, 2014 at 12:52 AM, Jeff Garzik <jgarzik at bitpay.com>\n> wrote:\n> >>\n> >> On Wed, Jul 16, 2014 at 1:56 PM, Jeremy <jlrubin at mit.edu> wrote:\n> >> > Right now, this could be expressed multiple ways (ie, using an op_dup\n> if\n> >> > then else chain) , but all would incur additional costs in terms of\n> >> > complicated control flows. Instead, I would propose:\n> >>\n> >> Can you quantify \"additional costs in terms of complicated control\n> flows\"?\n> >>\n> >>\n> >> > There is an implication in terms of increased utxo pool bloat, but\n> also\n> >> > an\n> >> > implication in terms of increased txn complexity (each 20 byte hash\n> >> > allows\n> >> > for a 500 byte script, only one of the 500 byte scripts has to be\n> >> > permanently stored on blockchain).\n> >>\n> >> When considering these costs, using a normal P2SH output + a script\n> >> with OP_IF and friends seems more straightforward?\n> >>\n> >> Doing boolean logic with multisig groups is quite possible, e.g.\n> >> \"group AND group\", \"group OR (group AND group)\" etc.  Definitely a\n> >> valid use case.  I discussed how to do this on IRC with gmaxwell\n> >> several months ago.  I call it \"multi-multisig\" for lack of a better\n> >> name.\n> >\n> >\n> >\n> >\n> > --\n> > Jeremy Rubin\n>\n>\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n\n\n\n-- \nJeremy Rubin\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140717/60948e15/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-07-17T20:08:24",
                "message_text_only": "On Wed, Jul 16, 2014 at 10:56 AM, Jeremy <jlrubin at mit.edu> wrote:\n> Hey all,\n> I had an idea for a new transaction type. The base idea is that it is\n> matching on script hashes much like pay to script hash, but checks for one\n> of N scripts.\n\nThis seems strictly less flexible and efficient than the Merkelized\nAbstract Syntax Tree construction, though perhaps slightly easier to\nimplement it wouldn't be any easier to deploy.\n\nSomething like this was very recently proposed on this list (by Tier\nNolan), you might want to see the \"Selector Script\" thread."
            }
        ],
        "thread_summary": {
            "title": "Pay to MultiScript hash:",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Jeremy",
                "Gregory Maxwell"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 17961
        }
    },
    {
        "title": "[Bitcoin-development] Mining Hashrate Caps",
        "thread_messages": [
            {
                "author": "Melvin Carvalho",
                "date": "2014-07-17T10:59:32",
                "message_text_only": "I noticed this article today.\n\nGHash Commits to 40% Hashrate Cap at Bitcoin Mining Summit\n\nhttp://www.coindesk.com/ghash-commits-40-hashrate-cap-bitcoin-mining-summit/\n\nHere's a quote from Satoshi when the mining arms race began:\n\n\"We should have a gentleman\u2019s agreement to postpone the GPU arms race as\nlong as we can for the good of the network. It\u2019s much easer to get new\nusers up to speed if they don\u2019t have to worry about GPU drivers and\ncompatibility. It\u2019s nice how anyone with just a CPU can compete fairly\nequally right now.\"\n\nMaybe outdated now, but I thought it was interesting.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140717/bee49012/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-07-17T13:35:20",
                "message_text_only": "Can someone explain to these guys and the public why promising to limit\nyourselves to *only* a 50% chance of successfully double-spending a 6\nconfirm transaction is still not acceptable?\n\nq=0.4\nz=0\tP=1\nz=1\tP=0.828861\nz=2\tP=0.736403\nz=3\tP=0.664168\nz=4\tP=0.603401\nz=5\tP=0.550625\nz=6\tP=0.50398\nz=7\tP=0.462301\nz=8\tP=0.424782\nz=9\tP=0.390828\nz=10\tP=0.359976\nz=11\tP=0.331858\nz=12\tP=0.306167\nz=13\tP=0.282649\nz=14\tP=0.261083\nz=15\tP=0.24128\nz=16\tP=0.223076\nz=17\tP=0.206324\nz=18\tP=0.190896\nz=19\tP=0.176676\n\n\nOn 07/17/2014 06:59 AM, Melvin Carvalho wrote:\n> I noticed this article today. \n> \n> GHash Commits to 40% Hashrate Cap at Bitcoin Mining Summit\n> \n> http://www.coindesk.com/ghash-commits-40-hashrate-cap-bitcoin-mining-summit/\n> \n> Here's a quote from Satoshi when the mining arms race began:\n> \n> \"We should have a gentleman\u2019s agreement to postpone the GPU arms race as\n> long as we can for the good of the network. It\u2019s much easer to get new\n> users up to speed if they don\u2019t have to worry about GPU drivers and\n> compatibility. It\u2019s nice how anyone with just a CPU can compete fairly\n> equally right now.\"\n> \n> Maybe outdated now, but I thought it was interesting.\n> \n> \n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "David A. Harding",
                "date": "2014-07-17T15:45:06",
                "message_text_only": "On Thu, Jul 17, 2014 at 09:35:20AM -0400, Mark Friedenbach wrote:\n> Can someone explain to these guys and the public why promising to limit\n> yourselves to *only* a 50% chance of successfully double-spending a 6\n> confirm transaction is still not acceptable?\n\nHi, Mark.\n\nWe were asked on the bitcoin-documentation mailing list about a month\nago to work on something like this and we're getting close to a pull\nrequest for the Bitcoin.org website.  There's a preview here:\n\n    http://dg0.dtrt.org/en/mining#lucky-attack\n\n(Remember, it's a preview and still being actively written/edited.)\n\nDiscussion about that doc belongs on the bitcoin-documentation mailing\nlist. Here's the particular thread:\n\n    https://groups.google.com/forum/#!topic/bitcoin-documentation/PKwBcroWGGg\n\nThanks,\n\n-Dave\n-- \nDavid A. Harding"
            }
        ],
        "thread_summary": {
            "title": "Mining Hashrate Caps",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Melvin Carvalho",
                "David A. Harding",
                "Mark Friedenbach"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 3337
        }
    },
    {
        "title": "[Bitcoin-development] Decentralizing ming",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2014-07-17T16:14:41",
                "message_text_only": "Define acceptable.  The 40% thing is marketing and a temporary\nsolution.  And people come down on both sides of whether or not\nmarketing \"40%\" is a good idea.\n\nI think it is a baby step that is moving in the right direction.  You\nwant the numbers and sentiment moving in that direction (down, versus\n\"own the market! </IPO>\").\n\nThe more critical piece is fleshing out the various proposals and\ntechnical solutions for decentralized transaction selection and other\naspects of SPOF-proofing mining.\n\nHistorical note:  On one hand, Satoshi seemed to dislike the early\nemergence of GPU mining pools quite a bit.  On the other hand, Satoshi\nnoted that the network would probably devolve down to a few big\nplayers if we ever reached VISA/MC transaction levels.  Satoshi\nclearly never figured this part out :)\n\nToday, there is consensus on the need for a \"keep bitcoin free and\nopen\" technical solution, but it remains to be seen how much we\nengineers can really do to make life fair.  Making transaction\nselection a bit more independent from hashpower seems one step.  There\nare several other proposals floating about.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "slush",
                "date": "2014-07-17T17:22:36",
                "message_text_only": "On Thu, Jul 17, 2014 at 6:14 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> Historical note:  On one hand, Satoshi seemed to dislike the early\n> emergence of GPU mining pools quite a bit.\n>\n\nTo my knowledge, Satoshi left the project before mining pools got a\ntraction.\n\nslush\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140717/de5a6fa8/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-18T10:41:08",
                "message_text_only": "Jeff, I think the message you're replying to got clipped.\n\nSatoshi's only comment AFAIK on the topic of GPU mining was to wish for a\ngentlemen's agreement to postpone it as long as possible, to help make sure\nthe distribution of coins was as even as possible. Indeed this predated\npooled mining.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140718/9a7418c1/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-18T10:43:19",
                "message_text_only": "Oops, sorry, I see the subject line changed. This is what I get for working\ndown the thread list top to bottom :)\n\nI think the best path forward now is to finish off getblocktemplate support\nin the various tools so it's possible to pool for payout purposes without\ngiving up control of block creation modulo the coinbase. Combined with the\nrecent sipa performance enhancing goodness, it would hopefully persuade\nsome non-trivial chunk of hashpower to go back to running their own node\nand start the process of turning pools merely into payout trackers rather\nthan block selectors.\n\n\nOn Fri, Jul 18, 2014 at 12:41 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> Jeff, I think the message you're replying to got clipped.\n>\n> Satoshi's only comment AFAIK on the topic of GPU mining was to wish for a\n> gentlemen's agreement to postpone it as long as possible, to help make sure\n> the distribution of coins was as even as possible. Indeed this predated\n> pooled mining.\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140718/06bb76fd/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-18T13:44:07",
                "message_text_only": "Yes.  That, and several other things.  If you can figure out how to\npropagate a block without re-propagating all the transactions everyone\nalready has, you address the large-blocks-slower-to-relay problem, and\nadditionally create an incentive for miners to mine blocks consisting\nof publicly broadcast transactions (versus a bunch of secret ones\nmined with secret agreements).\n\nDemocratizing transaction selection takes a bit of power away from the\nminers and gives it back to the network at large.  GBT is another\npiece of that puzzle.\n\n\nOn Fri, Jul 18, 2014 at 6:43 AM, Mike Hearn <mike at plan99.net> wrote:\n> Oops, sorry, I see the subject line changed. This is what I get for working\n> down the thread list top to bottom :)\n>\n> I think the best path forward now is to finish off getblocktemplate support\n> in the various tools so it's possible to pool for payout purposes without\n> giving up control of block creation modulo the coinbase. Combined with the\n> recent sipa performance enhancing goodness, it would hopefully persuade some\n> non-trivial chunk of hashpower to go back to running their own node and\n> start the process of turning pools merely into payout trackers rather than\n> block selectors.\n>\n>\n> On Fri, Jul 18, 2014 at 12:41 PM, Mike Hearn <mike at plan99.net> wrote:\n>>\n>> Jeff, I think the message you're replying to got clipped.\n>>\n>> Satoshi's only comment AFAIK on the topic of GPU mining was to wish for a\n>> gentlemen's agreement to postpone it as long as possible, to help make sure\n>> the distribution of coins was as even as possible. Indeed this predated\n>> pooled mining.\n>>\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Emin G\u00fcn Sirer",
                "date": "2014-07-19T00:51:06",
                "message_text_only": "I thought I'd chime in and point out some research results that might help.\nEven if they don't, there is a cool underlying technique that some of you\nmight find interesting.\n\nThe problem being tackled here is very similar to \"set reconciliation,\"\nwhere\npeer A thinks that the set of transactions that should be in the block is\nS_A,\nand peer B has actually included set S_B, and S_A and S_B are expected\nto not differ much. Ideally, one would like the communication complexity\nbetween A and B to be O(delta), not O(S_B) as it is right now. And ideally,\none would like B to send a single message to A, and for A to figure out the\ndifference between the two sets, without any lengthy back and forth\ncommunication. In essence, I would like to give you some magical packet\nthat is pretty small and communicates just the delta between what you and\nI know.\n\nThis paper from Cornell describes a scheme for achieving this:\n   Yaron Minsky, Ari Trachtenberg, Richard Zippel: Set reconciliation with\nnearly optimal communication complexity. IEEE Transactions on Information\nTheory 49(9): 2213-2218 (2003)\n   http://ipsit.bu.edu/documents/ieee-it3-web.pdf\n\nThose of you looking for a TL;DR should read the intro and then skip to\npage 8 for the example. The underlying trick is very cool, comes from the\npeer-to-peer/gossip literature, and it is underused. It'd be really cool if\nit\ncould be applied to this problem to reduce the size of the packets.\n\nThis approach has three benefits over the Bloom filter approach (if I\nunderstand the Bloom filter idea correctly):\n\n(1) Bloom filters require packets that are still O(S_A),\n\n(2) Bloom filters are probabilistic, so require extra complications\nwhen there is a hash collision. In the worst case, A might get confused\nabout which transaction B actually included, which would lead to a\nfork. (I am not sure if I followed the Bloom filter idea fully -- this may\nnot happen with the proposal, but it's a possibility with a naive Bloom\nfilter implementation)\n\n(3) Bloom filters are interactive, so when A detects that B has included\nsome transactions that A does not know about, it has to send a message\nto figure out what those transactions are.\n\nSet reconciliation is O(delta), non-probabilistic, and non-interactive. The\nnaive version requires that one have some idea of the size of the delta,\nbut I think the paper has some discussion of how to handle the delta\nestimate.\n\nI have not gone through the full exercise of actually applying this trick to\nthe Bitcoin p2p protocol yet, but wanted to draw your attention to it.\nIf someone is interested in applying this stuff to Bitcoin, I'd be happy\nto communicate further off list.\n\n- egs\n\n\n\nOn Fri, Jul 18, 2014 at 6:44 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> Yes.  That, and several other things.  If you can figure out how to\n> propagate a block without re-propagating all the transactions everyone\n> already has, you address the large-blocks-slower-to-relay problem, and\n> additionally create an incentive for miners to mine blocks consisting\n> of publicly broadcast transactions (versus a bunch of secret ones\n> mined with secret agreements).\n>\n> Democratizing transaction selection takes a bit of power away from the\n> miners and gives it back to the network at large.  GBT is another\n> piece of that puzzle.\n>\n>\n> On Fri, Jul 18, 2014 at 6:43 AM, Mike Hearn <mike at plan99.net> wrote:\n> > Oops, sorry, I see the subject line changed. This is what I get for\n> working\n> > down the thread list top to bottom :)\n> >\n> > I think the best path forward now is to finish off getblocktemplate\n> support\n> > in the various tools so it's possible to pool for payout purposes without\n> > giving up control of block creation modulo the coinbase. Combined with\n> the\n> > recent sipa performance enhancing goodness, it would hopefully persuade\n> some\n> > non-trivial chunk of hashpower to go back to running their own node and\n> > start the process of turning pools merely into payout trackers rather\n> than\n> > block selectors.\n> >\n> >\n> > On Fri, Jul 18, 2014 at 12:41 PM, Mike Hearn <mike at plan99.net> wrote:\n> >>\n> >> Jeff, I think the message you're replying to got clipped.\n> >>\n> >> Satoshi's only comment AFAIK on the topic of GPU mining was to wish for\n> a\n> >> gentlemen's agreement to postpone it as long as possible, to help make\n> sure\n> >> the distribution of coins was as even as possible. Indeed this predated\n> >> pooled mining.\n> >>\n> >\n>\n>\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140718/e0c8569d/attachment.html>"
            },
            {
                "author": "Emin G\u00fcn Sirer",
                "date": "2014-07-19T00:54:36",
                "message_text_only": "My apologies for posting to the wrong thread.\n\n\n\nOn Fri, Jul 18, 2014 at 5:51 PM, Emin G\u00fcn Sirer <el33th4x0r at gmail.com>\nwrote:\n\n> I thought I'd chime in and point out some research results that might help.\n> Even if they don't, there is a cool underlying technique that some of you\n> might find interesting.\n>\n> The problem being tackled here is very similar to \"set reconciliation,\"\n> where\n> peer A thinks that the set of transactions that should be in the block is\n> S_A,\n> and peer B has actually included set S_B, and S_A and S_B are expected\n> to not differ much. Ideally, one would like the communication complexity\n> between A and B to be O(delta), not O(S_B) as it is right now. And ideally,\n> one would like B to send a single message to A, and for A to figure out the\n> difference between the two sets, without any lengthy back and forth\n> communication. In essence, I would like to give you some magical packet\n> that is pretty small and communicates just the delta between what you and\n> I know.\n>\n> This paper from Cornell describes a scheme for achieving this:\n>    Yaron Minsky, Ari Trachtenberg, Richard Zippel: Set reconciliation with\n> nearly optimal communication complexity. IEEE Transactions on Information\n> Theory 49(9): 2213-2218 (2003)\n>    http://ipsit.bu.edu/documents/ieee-it3-web.pdf\n>\n> Those of you looking for a TL;DR should read the intro and then skip to\n> page 8 for the example. The underlying trick is very cool, comes from the\n> peer-to-peer/gossip literature, and it is underused. It'd be really cool\n> if it\n> could be applied to this problem to reduce the size of the packets.\n>\n> This approach has three benefits over the Bloom filter approach (if I\n> understand the Bloom filter idea correctly):\n>\n> (1) Bloom filters require packets that are still O(S_A),\n>\n> (2) Bloom filters are probabilistic, so require extra complications\n> when there is a hash collision. In the worst case, A might get confused\n> about which transaction B actually included, which would lead to a\n> fork. (I am not sure if I followed the Bloom filter idea fully -- this may\n> not happen with the proposal, but it's a possibility with a naive Bloom\n> filter implementation)\n>\n>  (3) Bloom filters are interactive, so when A detects that B has included\n> some transactions that A does not know about, it has to send a message\n> to figure out what those transactions are.\n>\n> Set reconciliation is O(delta), non-probabilistic, and non-interactive. The\n> naive version requires that one have some idea of the size of the delta,\n> but I think the paper has some discussion of how to handle the delta\n> estimate.\n>\n> I have not gone through the full exercise of actually applying this trick\n> to\n> the Bitcoin p2p protocol yet, but wanted to draw your attention to it.\n> If someone is interested in applying this stuff to Bitcoin, I'd be happy\n> to communicate further off list.\n>\n> - egs\n>\n>\n>\n> On Fri, Jul 18, 2014 at 6:44 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>\n>> Yes.  That, and several other things.  If you can figure out how to\n>> propagate a block without re-propagating all the transactions everyone\n>> already has, you address the large-blocks-slower-to-relay problem, and\n>> additionally create an incentive for miners to mine blocks consisting\n>> of publicly broadcast transactions (versus a bunch of secret ones\n>> mined with secret agreements).\n>>\n>> Democratizing transaction selection takes a bit of power away from the\n>> miners and gives it back to the network at large.  GBT is another\n>> piece of that puzzle.\n>>\n>>\n>> On Fri, Jul 18, 2014 at 6:43 AM, Mike Hearn <mike at plan99.net> wrote:\n>> > Oops, sorry, I see the subject line changed. This is what I get for\n>> working\n>> > down the thread list top to bottom :)\n>> >\n>> > I think the best path forward now is to finish off getblocktemplate\n>> support\n>> > in the various tools so it's possible to pool for payout purposes\n>> without\n>> > giving up control of block creation modulo the coinbase. Combined with\n>> the\n>> > recent sipa performance enhancing goodness, it would hopefully persuade\n>> some\n>> > non-trivial chunk of hashpower to go back to running their own node and\n>> > start the process of turning pools merely into payout trackers rather\n>> than\n>> > block selectors.\n>> >\n>> >\n>> > On Fri, Jul 18, 2014 at 12:41 PM, Mike Hearn <mike at plan99.net> wrote:\n>> >>\n>> >> Jeff, I think the message you're replying to got clipped.\n>> >>\n>> >> Satoshi's only comment AFAIK on the topic of GPU mining was to wish\n>> for a\n>> >> gentlemen's agreement to postpone it as long as possible, to help make\n>> sure\n>> >> the distribution of coins was as even as possible. Indeed this predated\n>> >> pooled mining.\n>> >>\n>> >\n>>\n>>\n>>\n>> --\n>> Jeff Garzik\n>> Bitcoin core developer and open source evangelist\n>> BitPay, Inc.      https://bitpay.com/\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Want fast and easy access to all the code in your enterprise? Index and\n>> search up to 200,000 lines of code with a free copy of Black Duck\n>> Code Sight - the same software that powers the world's largest code\n>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>> http://p.sf.net/sfu/bds\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140718/b1619afb/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-18T13:39:15",
                "message_text_only": "Before they got traction, yes.  But he projected a bit, as anyone\ncould, to see the trend.\n\nOn Thu, Jul 17, 2014 at 1:22 PM, slush <slush at centrum.cz> wrote:\n>\n> On Thu, Jul 17, 2014 at 6:14 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>>\n>> Historical note:  On one hand, Satoshi seemed to dislike the early\n>> emergence of GPU mining pools quite a bit.\n>\n>\n> To my knowledge, Satoshi left the project before mining pools got a\n> traction.\n>\n> slush\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            }
        ],
        "thread_summary": {
            "title": "Decentralizing ming",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Mike Hearn",
                "Emin G\u00fcn Sirer",
                "slush"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 16535
        }
    },
    {
        "title": "[Bitcoin-development] Squashing redundant tx data in blocks on the wire",
        "thread_messages": [
            {
                "author": "Kaz Wesley",
                "date": "2014-07-17T21:35:35",
                "message_text_only": "OVERVIEW\n\nTo improve block propagation, add a new block message that doesn't include\ntransactions the peer is known to have. The message must never require an\nadditional round trip due to any transactions the peer doesn't have, but\nshould\nbe compatible with peers sometimes forgetting transactions they have known.\n\nAPPROACH\n\nFor peers advertising support for squashed blocks: a node tracks what txes\nit\nknows each peer has seen (inv received, tx sent, tx appeared in competing\nblock\nknown to peer). Nodes push block contents as txes-not-already-known +\ntxids-known.\n\nA node should be able to forget invs it has seen without invalidating what\npeers\nknow about its known txes. To allow for this, a node assembles a bloom\nfilter of\na set of txes it is going to forget, and sends it to peers. The node can\nerase\nthe txes as soon as no blocks requested before the filter was pushed are in\nflight (relying on the assumption that messages can be expected to be\nprocessed\nin order).\n\nWhen a node receives a forgotten-filter, it ORs it into its\nforgotten-filter for\nthat peer. Any transactions matching the forgotten-filter are always\nincluded in\nfull with a block. If the filter is getting full, the node can just clear it\nalong with peer.setTxKnown.\n\nCOSTS\n\nBloom filtering:\nSince the bloom filter is likely to grow slowly and can be dropped when it\nis\nbecoming full, a cheap set of hash functions and element size can be used to\nkeep overhead more restricted than the bloom filtering done for spv. It's\nimportant for testing txes against the filter to be fast so that it doesn't\ndelay pushing the block more than the squashing helps.\nNodes currently forget txes rarely, so the bloom filters would only need to\nbe\nused at all under conditions that are not currently common -- but I think\nthey're important to include to allow for different node behavior in this\nregard\nin the future.\n\nTracking txes known to peers:\nA multimap of txid->peerId would obviate the current setCurrentlyKnown, and\nwould not take much more space since each additional peer adds about 1\npeerId\nper txid (setCurrentlyKnown keeps a uint256 per peer per txid, although it\ntracks somewhat fewer txid per node).\n\nPotential vulnerabilities:\n- Since the bloom filters will have lower maximum overhead than the current\nSPV\n  filters and can be dropped at will, this shouldn't enable any resource\n  exhaustion attacks that aren't already possible.\n- A squashed block with bogus or missing data would be easily detected not\nto\n  produce the correct merkle root for its BlockHeader.\n\nBENEFITS\n\nAssuming a fairly typical 500 tx block with transaction sizes averaging 300b\n(both on the low side), for a 150kb block:\n\n% pruned | block size reduction | relative size reduction\n-------- | -------------------- | -----------------------\n100      | 134 kB               | 89%\n50       | 67 kB                | 45%\n25       | 33.5 kB              | 17%\n\nI've been doing some logging, and when my node pushes a block to a peer it\nseems\nto typically know that a peer has seen most of the txes in the block. Even\nin\nthe case of a small block with only 25% known-known transactions, total\nnetwork\nbandwidth saved is greater than the bloom filters transmitted unless a node\nis\nforgetting transactions so rapidly that it pushes new maximum-size\nforget-filters every block.\n\nSo this is a net gain even in total bandwidth usage, but most importantly\nit's\nan improvement in block propagation rate and in how block propagation rate\nscales with additional transactions.\n\nIMPLEMENTATION QUESTIONS\n\nHow should block squashing capability be advertised -- new service bit?\n\nBloom filters:\n- How fast to test against could a suitable bloom filter be made?\n- How much memory would each filter need to take, at maximum?\n- Can the inputs all being 32 byte hashes be used to optimize filter hash\n  calculations?\n\nROADMAP\n\nIf there's support for this proposal, I can begin working on the specific\nimplementation details, such as the bloom filters, message format, and\ncapability advertisment, and draft a BIP once I have a concrete proposal for\nwhat those would look like and a corresponding precise cost/benefit\nanalysis.\n\n--kaz\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140717/810d2f69/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-07-17T22:46:52",
                "message_text_only": "A couple of half-baked thoughts:\n\nOn Thu, Jul 17, 2014 at 5:35 PM, Kaz Wesley <keziahw at gmail.com> wrote:\n\n> If there's support for this proposal, I can begin working on the specific\n> implementation details, such as the bloom filters, message format, and\n> capability advertisment, and draft a BIP once I have a concrete proposal\n> for\n> what those would look like and a corresponding precise cost/benefit\n> analysis.\n>\n\nI'd encourage you to code up a prototype first (or at the same time), in\nwhatever programming language / networking library you're most familiar\nwith.\n\nMaybe not even using the existing p2p protocol; there could be a\nmining-only very-fast-block-propagation network separate from the existing\np2p network.\n\nCombining your optimizations with \"broadcast as many near-miss blocks as\nbandwidth will allow\" on a mining backbone network should allow insanely\nfast propagation of most newly solved blocks.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140717/16478b5f/attachment.html>"
            },
            {
                "author": "Kaz Wesley",
                "date": "2014-07-17T23:26:31",
                "message_text_only": "I'm moving this design document to a gist so that I can integrate\nchanges as they come up:\nhttps://gist.github.com/kazcw/43c97d3924326beca87d\nOne thing that I think is an important improvement over my initial\nidea is that the bloom filters don't need to be kept around and built\nup, they can just be one-shot and clear any matching entries from the\nset of known-knowns upon arrival -- provided a node is careful to\nensure the txes it wants to forget are known-known-known (which isn't\nas bad as it sounds) to the peer it's telling it's forgetting them\nwhen the forget-filter arrives.\n\nOn Thu, Jul 17, 2014 at 3:46 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n>\n> A couple of half-baked thoughts:\n>\n> On Thu, Jul 17, 2014 at 5:35 PM, Kaz Wesley <keziahw at gmail.com> wrote:\n>>\n>> If there's support for this proposal, I can begin working on the specific\n>> implementation details, such as the bloom filters, message format, and\n>> capability advertisment, and draft a BIP once I have a concrete proposal for\n>> what those would look like and a corresponding precise cost/benefit analysis.\n>\n>\n> I'd encourage you to code up a prototype first (or at the same time), in whatever programming language / networking library you're most familiar with.\n>\n> Maybe not even using the existing p2p protocol; there could be a mining-only very-fast-block-propagation network separate from the existing p2p network.\n>\n> Combining your optimizations with \"broadcast as many near-miss blocks as bandwidth will allow\" on a mining backbone network should allow insanely fast propagation of most newly solved blocks.\n>\n> --\n> --\n> Gavin Andresen\n\nThanks Gavin, I am planning on working out the design details as I\nwork on a prototype. I have the beginnings of a previous shot at\nimplementing this in bitcoind to start from but my new design has some\nimportant improvements to add to that.\n\n-kaz"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-18T13:53:35",
                "message_text_only": "On Thu, Jul 17, 2014 at 6:46 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> I'd encourage you to code up a prototype first (or at the same time), in\n> whatever programming language / networking library you're most familiar\n> with.\n\n+1\n\n> Maybe not even using the existing p2p protocol; there could be a mining-only\n> very-fast-block-propagation network separate from the existing p2p network.\n>\n> Combining your optimizations with \"broadcast as many near-miss blocks as\n> bandwidth will allow\" on a mining backbone network should allow insanely\n> fast propagation of most newly solved blocks.\n\n\nYes, I would encourage thinking along these lines.  That was the\nmotivation of the UDP P2P protocol extension I wrote:\nhttps://bitcointalk.org/index.php?topic=156769.0\n\nThe intention was to experiment with sending block header + tx list +\ncoinbase, via UDP best effort broadcast.\n\nIncentives:\n\nIf your neighbors receiving this message already have the TXs in the\nTX list, then the block is complete, and may be relayed further.\n\nIf your neighbors do not have all TXs in the block, they must fetch\nthem at additional time/latency cost.\n\nThus, you have an incentive to relay blocks containing TXs already\ndistributed out into network mempools and cached in the signature\ncache.\n\nWe want to capture that incentive in whatever protocol is eventually\nused.  Miners have a TX fee incentive to include many transactions.\nIn theory, they want to include as many TX as possible.  It will help\nus scale quite a bit to solve this problem."
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-07-18T14:53:01",
                "message_text_only": "Two more half-baked thoughts:\n\nWe should be able to assume that the majority of transaction data (except\nfor coinbase) has already been propagated. As Jeff said, incentivizing\nnodes to propagate transactions is a very good thing (the signature cache\nalready gives a small incentive to miners to propagate and not 'hoard'\ntransactions).\n\nSo the only information that theoretically needs to be propagated is which\ntransactions a miner is including in their block, and in what order they\nare included.\n\nBut if there was some agreed-upon canonical ordering, then it should\ntheoretically be possible to take shortcuts in the \"what order\".\n\nYou'd start with setof(transactions I think everybody knows about)\nSelect some subset, based on miner's policy\nSort that subset with the canonical ordering algorithm\nVery efficiently broadcast, taking all sorts of shortcuts assuming most of\nyour peers already know the set you started with and expect the same\ncanonical ordering (see gmaxwell's thoughts on block encoding).\n\nSecond half-baked thought:\nI wonder if broadcasting your transaction selection policy (\"11KB of free\ntransactions, sorted by priority, then 111K of fee-paying transactions,\nsorted by fee\") might make it possible to save even more bandwidth by\nletting your peers create a very good approximation of your block with just\nthat information....\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140718/f2b10a38/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-18T15:06:23",
                "message_text_only": "On Fri, Jul 18, 2014 at 10:53 AM, Gavin Andresen\n<gavinandresen at gmail.com> wrote:\n> But if there was some agreed-upon canonical ordering, then it should\n> theoretically be possible to take shortcuts in the \"what order\".\n>\n> You'd start with setof(transactions I think everybody knows about)\n> Select some subset, based on miner's policy\n> Sort that subset with the canonical ordering algorithm\n> Very efficiently broadcast, taking all sorts of shortcuts assuming most of\n> your peers already know the set you started with and expect the same\n> canonical ordering (see gmaxwell's thoughts on block encoding).\n\nRelated implementation detail:  Having pursued this train of thought,\nI noted that you don't want to include too-young transactions that you\nreceived in the past few seconds, because those are likely still\npropagating around the network.\n\n> Second half-baked thought:\n> I wonder if broadcasting your transaction selection policy (\"11KB of free\n> transactions, sorted by priority, then 111K of fee-paying transactions,\n> sorted by fee\") might make it possible to save even more bandwidth by\n> letting your peers create a very good approximation of your block with just\n> that information....\n\nAbsolutely.  One path I would like to see pursued is multiple\np2pool-esque chains.  Each with their own policy, perhaps with their\nown administrative team.  ie. you could have a fully decentralized\np2pool-like chain, or multiple such chains, each with a stated\npolicy/reward pattern.  Or, GHash/BTCGuild/Eligius could run a\nsemi-centrally managed chain ultimately guaranteed not only by\nprotocol but by administrators' digital signatures.\n\nIn each case, advertising technical attributes about your pool [chain]\npolicy would give nodes the better ability to predict what is in an\nupcoming block.\n\nAnd the flip side of that, such predictions are never perfect.  Need\nto make sure the fallback case, while undoubtedly more costly than the\nFast Path, is not overly painful.\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Kaz Wesley",
                "date": "2014-07-18T17:39:38",
                "message_text_only": "Peers exchanging mempool priority policies is great; that accomplishes\nthe flexibility in what txes to remember that I was going for with the\nforget-filters, but much more neatly, with less overhead and some side\nbenefits.\n\nHere's what I'm picturing now:\n- exchange priority policies in peer introductions\n- assign unique sequential IDs in the order the transactions were\ninved (per peer)\n- receiving a getdata for a tx updates last-known-peer-received inv to\nall invs up to the one referenced\n- include ID-last-received, last-known-peer-received in sparse block\n- reference txes in sparse block by index in receiver's\nprioritiziation with peer's sent invs up to ID-last-received and\nsender's prior invs up to last-known-peer-received\n\nPossible new messages:\n- sparseblock\n- invack message a node can send at times when it's received a bunch\nof invs it already has, so it hasn't acked with a getdata in a while\n- gettx: getdata, but using new sequential ID to save 28 bytes per tx\n\nIt seems important for ordering policies to be able to be specified in\nas much detail as possible. Parameters that should be available:\n- total inputs\n- total outputs\n- bytes\n- coin days destroyed\n- net UTXO size change\n- sigops\n- is data carrier\n- is output raw multisig\n- age in mempool\n- what else?\nThis parameter set should be extensible to allow for unforeseen future factors.\n\nOrdering policies should allow arbitrary algebraic combinations of\ntheir parameters, as well as thresholds. Boolean combinations of\nsub-policies would also be desirable. This could be implemented with a\ntx-script-like stack-based language, in which each supported tx\nproperty is pushed onto the stack by a particular opcode, and\n+-*//min/max/boolean operators combine them to yield the sort key.\n\nDifficult parameters:\n* Coin-days-destroyed: changes, peers need agreement on when (if?)\nit's recalculated. Probably can just not recalculate, but peers still\nneed agreement on \"time seen\" to get CDD.\n* Age in mempool: seems intractable in terms of time, but could be\ndone easily in terms of \"how many txes old is this sequential ID\"\n\nOne potential pitfall: this allows for an environment of completely\nheterogeneous mempool policies. I think that's a good thing, but we\nneed to avoid a situation where only least-common-denominator\ntransactions make it farther than a hop or two, and we don't want\nnodes to have a strong preference for connecting to like-minded peers\nsince clustering reduces overall connectivity. It may be worthwhile to\nadd a parallel mechanism for relay policies, to differentiate between\nwhat a node would keep in its mempool vs. what it wouldn't even relay\nand doesn't want to see at all. Relay policies could be specified just\nlike prioritization policies, but with the final stack value evaluated\nin a boolean context.\n\nAn interesting additional use of policy-scripts would be a\nstandardized way for miners to include a policy script in a coinbase,\nallowing miners a mechanism to advertise things like their relative\nprice of sigops vs bytes. Nodes may then choose to take this\ninformation into account in order to optimize their mempool policies\nfor likelihood of consistency with future blocks. Since policy scripts\nprovide only relative information on prices of different transaction\nproperties rather than an absolute fee, this should not allow miners\nto \"vote fees up\", although care would need to be taken they wouldn't\nbe able to drive up prices by claiming common transaction types are at\nthe high end of the fee scale."
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-18T17:48:47",
                "message_text_only": "On a flood-fill network, you don't want to create a storm of \"I\nalready have this\" replies.\n\nOn Fri, Jul 18, 2014 at 1:39 PM, Kaz Wesley <keziahw at gmail.com> wrote:\n> Peers exchanging mempool priority policies is great; that accomplishes\n> the flexibility in what txes to remember that I was going for with the\n> forget-filters, but much more neatly, with less overhead and some side\n> benefits.\n>\n> Here's what I'm picturing now:\n> - exchange priority policies in peer introductions\n> - assign unique sequential IDs in the order the transactions were\n> inved (per peer)\n> - receiving a getdata for a tx updates last-known-peer-received inv to\n> all invs up to the one referenced\n> - include ID-last-received, last-known-peer-received in sparse block\n> - reference txes in sparse block by index in receiver's\n> prioritiziation with peer's sent invs up to ID-last-received and\n> sender's prior invs up to last-known-peer-received\n>\n> Possible new messages:\n> - sparseblock\n> - invack message a node can send at times when it's received a bunch\n> of invs it already has, so it hasn't acked with a getdata in a while\n> - gettx: getdata, but using new sequential ID to save 28 bytes per tx\n>\n> It seems important for ordering policies to be able to be specified in\n> as much detail as possible. Parameters that should be available:\n> - total inputs\n> - total outputs\n> - bytes\n> - coin days destroyed\n> - net UTXO size change\n> - sigops\n> - is data carrier\n> - is output raw multisig\n> - age in mempool\n> - what else?\n> This parameter set should be extensible to allow for unforeseen future factors.\n>\n> Ordering policies should allow arbitrary algebraic combinations of\n> their parameters, as well as thresholds. Boolean combinations of\n> sub-policies would also be desirable. This could be implemented with a\n> tx-script-like stack-based language, in which each supported tx\n> property is pushed onto the stack by a particular opcode, and\n> +-*//min/max/boolean operators combine them to yield the sort key.\n>\n> Difficult parameters:\n> * Coin-days-destroyed: changes, peers need agreement on when (if?)\n> it's recalculated. Probably can just not recalculate, but peers still\n> need agreement on \"time seen\" to get CDD.\n> * Age in mempool: seems intractable in terms of time, but could be\n> done easily in terms of \"how many txes old is this sequential ID\"\n>\n> One potential pitfall: this allows for an environment of completely\n> heterogeneous mempool policies. I think that's a good thing, but we\n> need to avoid a situation where only least-common-denominator\n> transactions make it farther than a hop or two, and we don't want\n> nodes to have a strong preference for connecting to like-minded peers\n> since clustering reduces overall connectivity. It may be worthwhile to\n> add a parallel mechanism for relay policies, to differentiate between\n> what a node would keep in its mempool vs. what it wouldn't even relay\n> and doesn't want to see at all. Relay policies could be specified just\n> like prioritization policies, but with the final stack value evaluated\n> in a boolean context.\n>\n> An interesting additional use of policy-scripts would be a\n> standardized way for miners to include a policy script in a coinbase,\n> allowing miners a mechanism to advertise things like their relative\n> price of sigops vs bytes. Nodes may then choose to take this\n> information into account in order to optimize their mempool policies\n> for likelihood of consistency with future blocks. Since policy scripts\n> provide only relative information on prices of different transaction\n> properties rather than an absolute fee, this should not allow miners\n> to \"vote fees up\", although care would need to be taken they wouldn't\n> be able to drive up prices by claiming common transaction types are at\n> the high end of the fee scale.\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Kaz Wesley",
                "date": "2014-07-18T17:53:12",
                "message_text_only": "That's true, but I think it can be balanced with the usefulness of\nknowing what messages a node has received. An invack would be sent if\nN invs have been received without any resulting getdata; since we're\nkeeping track of peer inv order, one message can cover an arbitrarily\nlarge series of invs.\n\nOn Fri, Jul 18, 2014 at 10:48 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> On a flood-fill network, you don't want to create a storm of \"I\n> already have this\" replies.\n>\n> On Fri, Jul 18, 2014 at 1:39 PM, Kaz Wesley <keziahw at gmail.com> wrote:\n>> Peers exchanging mempool priority policies is great; that accomplishes\n>> the flexibility in what txes to remember that I was going for with the\n>> forget-filters, but much more neatly, with less overhead and some side\n>> benefits.\n>>\n>> Here's what I'm picturing now:\n>> - exchange priority policies in peer introductions\n>> - assign unique sequential IDs in the order the transactions were\n>> inved (per peer)\n>> - receiving a getdata for a tx updates last-known-peer-received inv to\n>> all invs up to the one referenced\n>> - include ID-last-received, last-known-peer-received in sparse block\n>> - reference txes in sparse block by index in receiver's\n>> prioritiziation with peer's sent invs up to ID-last-received and\n>> sender's prior invs up to last-known-peer-received\n>>\n>> Possible new messages:\n>> - sparseblock\n>> - invack message a node can send at times when it's received a bunch\n>> of invs it already has, so it hasn't acked with a getdata in a while\n>> - gettx: getdata, but using new sequential ID to save 28 bytes per tx\n>>\n>> It seems important for ordering policies to be able to be specified in\n>> as much detail as possible. Parameters that should be available:\n>> - total inputs\n>> - total outputs\n>> - bytes\n>> - coin days destroyed\n>> - net UTXO size change\n>> - sigops\n>> - is data carrier\n>> - is output raw multisig\n>> - age in mempool\n>> - what else?\n>> This parameter set should be extensible to allow for unforeseen future factors.\n>>\n>> Ordering policies should allow arbitrary algebraic combinations of\n>> their parameters, as well as thresholds. Boolean combinations of\n>> sub-policies would also be desirable. This could be implemented with a\n>> tx-script-like stack-based language, in which each supported tx\n>> property is pushed onto the stack by a particular opcode, and\n>> +-*//min/max/boolean operators combine them to yield the sort key.\n>>\n>> Difficult parameters:\n>> * Coin-days-destroyed: changes, peers need agreement on when (if?)\n>> it's recalculated. Probably can just not recalculate, but peers still\n>> need agreement on \"time seen\" to get CDD.\n>> * Age in mempool: seems intractable in terms of time, but could be\n>> done easily in terms of \"how many txes old is this sequential ID\"\n>>\n>> One potential pitfall: this allows for an environment of completely\n>> heterogeneous mempool policies. I think that's a good thing, but we\n>> need to avoid a situation where only least-common-denominator\n>> transactions make it farther than a hop or two, and we don't want\n>> nodes to have a strong preference for connecting to like-minded peers\n>> since clustering reduces overall connectivity. It may be worthwhile to\n>> add a parallel mechanism for relay policies, to differentiate between\n>> what a node would keep in its mempool vs. what it wouldn't even relay\n>> and doesn't want to see at all. Relay policies could be specified just\n>> like prioritization policies, but with the final stack value evaluated\n>> in a boolean context.\n>>\n>> An interesting additional use of policy-scripts would be a\n>> standardized way for miners to include a policy script in a coinbase,\n>> allowing miners a mechanism to advertise things like their relative\n>> price of sigops vs bytes. Nodes may then choose to take this\n>> information into account in order to optimize their mempool policies\n>> for likelihood of consistency with future blocks. Since policy scripts\n>> provide only relative information on prices of different transaction\n>> properties rather than an absolute fee, this should not allow miners\n>> to \"vote fees up\", although care would need to be taken they wouldn't\n>> be able to drive up prices by claiming common transaction types are at\n>> the high end of the fee scale.\n>>\n>> ------------------------------------------------------------------------------\n>> Want fast and easy access to all the code in your enterprise? Index and\n>> search up to 200,000 lines of code with a free copy of Black Duck\n>> Code Sight - the same software that powers the world's largest code\n>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>> http://p.sf.net/sfu/bds\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Kaz Wesley",
                "date": "2014-07-18T19:51:59",
                "message_text_only": "I've updated the gist, and added an additional proposal that I think\nmeshes well:\nhttps://gist.github.com/kazcw/43c97d3924326beca87d#ultra-fast-block-validation\n\nsparseblocks + UFBV would tighten the new-block process to this (when\ntxes have been received in advance):\n- receive block (~2kB for 1000 tx)\n- check whether block contains txes known to belong to conflict-sets,\nand if so whether more than one tx from a single conflict-set has been\nincluded (a few operations on very small sets)\n- relay block (~2kB)\n\nThe benefits of these changes only occur when the transactions have\nbeen seen in advance, but incentivizing ahead-of-block transaction\npropogation is a plus, as Jeff mentioned; working on a block without\nfirst ensuring peers have its transactions would be very expensive\nfrom a miner's point of view."
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-18T19:55:52",
                "message_text_only": "Related:  We must handle some legitimate miner-privately-mined cases,\nsuch as miner payout TXs (outside coinbase) or side chain conditional\nTXs[1].\n\n[1] https://bitcointalk.org/index.php?topic=676703.msg7682680#msg7682680\n\nOn Fri, Jul 18, 2014 at 3:51 PM, Kaz Wesley <keziahw at gmail.com> wrote:\n> I've updated the gist, and added an additional proposal that I think\n> meshes well:\n> https://gist.github.com/kazcw/43c97d3924326beca87d#ultra-fast-block-validation\n>\n> sparseblocks + UFBV would tighten the new-block process to this (when\n> txes have been received in advance):\n> - receive block (~2kB for 1000 tx)\n> - check whether block contains txes known to belong to conflict-sets,\n> and if so whether more than one tx from a single conflict-set has been\n> included (a few operations on very small sets)\n> - relay block (~2kB)\n>\n> The benefits of these changes only occur when the transactions have\n> been seen in advance, but incentivizing ahead-of-block transaction\n> propogation is a plus, as Jeff mentioned; working on a block without\n> first ensuring peers have its transactions would be very expensive\n> from a miner's point of view.\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Emin G\u00fcn Sirer",
                "date": "2014-07-19T00:54:14",
                "message_text_only": "I thought I'd chime in and point out some research results that might help.\nEven if they don't, there is a cool underlying technique that some of you\nmight find interesting.\n\nThe problem being tackled here is very similar to \"set reconciliation,\"\nwhere\npeer A thinks that the set of transactions that should be in the block is\nS_A,\nand peer B has actually included set S_B, and S_A and S_B are expected\nto not differ much. Ideally, one would like the communication complexity\nbetween A and B to be O(delta), not O(S_B) as it is right now. And ideally,\none would like B to send a single message to A, and for A to figure out the\ndifference between the two sets, without any lengthy back and forth\ncommunication. In essence, I would like to give you some magical packet\nthat is pretty small and communicates just the delta between what you and\nI know.\n\nThis paper from Cornell describes a scheme for achieving this:\n   Yaron Minsky, Ari Trachtenberg, Richard Zippel: Set reconciliation with\nnearly optimal communication complexity. IEEE Transactions on Information\nTheory 49(9): 2213-2218 (2003)\n   http://ipsit.bu.edu/documents/ieee-it3-web.pdf\n\nThose of you looking for a TL;DR should read the intro and then skip to\npage 8 for the example. The underlying trick is very cool, comes from the\npeer-to-peer/gossip literature, and it is underused. It'd be really cool if\nit\ncould be applied to this problem to reduce the size of the packets.\n\nThis approach has three benefits over the Bloom filter approach (if I\nunderstand the Bloom filter idea correctly):\n\n(1) Bloom filters require packets that are still O(S_A),\n\n(2) Bloom filters are probabilistic, so require extra complications\nwhen there is a hash collision. In the worst case, A might get confused\nabout which transaction B actually included, which would lead to a\nfork. (I am not sure if I followed the Bloom filter idea fully -- this may\nnot happen with the proposal, but it's a possibility with a naive Bloom\nfilter implementation)\n\n(3) Bloom filters are interactive, so when A detects that B has included\nsome transactions that A does not know about, it has to send a message\nto figure out what those transactions are.\n\nSet reconciliation is O(delta), non-probabilistic, and non-interactive. The\nnaive version requires that one have some idea of the size of the delta,\nbut I think the paper has some discussion of how to handle the delta\nestimate.\n\nI have not gone through the full exercise of actually applying this trick to\nthe Bitcoin p2p protocol yet, but wanted to draw your attention to it.\nIf someone is interested in applying this stuff to Bitcoin, I'd be happy\nto communicate further off list.\n\n- egs\n\n\n\nOn Fri, Jul 18, 2014 at 12:55 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> Related:  We must handle some legitimate miner-privately-mined cases,\n> such as miner payout TXs (outside coinbase) or side chain conditional\n> TXs[1].\n>\n> [1] https://bitcointalk.org/index.php?topic=676703.msg7682680#msg7682680\n>\n> On Fri, Jul 18, 2014 at 3:51 PM, Kaz Wesley <keziahw at gmail.com> wrote:\n> > I've updated the gist, and added an additional proposal that I think\n> > meshes well:\n> >\n> https://gist.github.com/kazcw/43c97d3924326beca87d#ultra-fast-block-validation\n> >\n> > sparseblocks + UFBV would tighten the new-block process to this (when\n> > txes have been received in advance):\n> > - receive block (~2kB for 1000 tx)\n> > - check whether block contains txes known to belong to conflict-sets,\n> > and if so whether more than one tx from a single conflict-set has been\n> > included (a few operations on very small sets)\n> > - relay block (~2kB)\n> >\n> > The benefits of these changes only occur when the transactions have\n> > been seen in advance, but incentivizing ahead-of-block transaction\n> > propogation is a plus, as Jeff mentioned; working on a block without\n> > first ensuring peers have its transactions would be very expensive\n> > from a miner's point of view.\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Want fast and easy access to all the code in your enterprise? Index and\n> > search up to 200,000 lines of code with a free copy of Black Duck\n> > Code Sight - the same software that powers the world's largest code\n> > search on Ohloh, the Black Duck Open Hub! Try it now.\n> > http://p.sf.net/sfu/bds\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140718/2142ffc0/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-07-19T01:25:44",
                "message_text_only": "On Fri, Jul 18, 2014 at 5:54 PM, Emin G\u00fcn Sirer <el33th4x0r at gmail.com> wrote:\n> The problem being tackled here is very similar to \"set reconciliation,\"\n> where\n> peer A thinks that the set of transactions that should be in the block is\n> S_A,\n\nMost things I've seen working in this space are attempting to minimize\nthe data transfered. At least for the miner-interested case the round\ncomplexity is much more important because a single RTT is enough to\nbasically send the whole block on a lot of very relevant paths.\n\nI know much better is possible (see up-thread where I linked to an old\nproposal to use forward error correction to transfer with low data\ntransfer (but not optimal) and negligible probability of needing a\nround-trip, with a tradeoff for more overhead for lower roundtrip\nprobability)."
            },
            {
                "author": "Emin G\u00fcn Sirer",
                "date": "2014-07-19T03:06:21",
                "message_text_only": "> Most things I've seen working in this space are attempting to minimize\n> the data transfered. At least for the miner-interested case the round\n> complexity is much more important because a single RTT is enough to\n> basically send the whole block on a lot of very relevant paths.\n\nAgreed. Yaron's scheme is magical because it is non-interactive. I send you\na packet of O(expected-delta) and you immediately figure out the delta\nwithout further back and forth communication, each requiring an RTT.\n\n> I know much better is possible (see up-thread where I linked to an old\n> proposal to use forward error correction to transfer with low data\n> transfer (but not optimal) and negligible probability of needing a\n> round-trip, with a tradeoff for more overhead for lower roundtrip\n> probability).\n\nFEC schemes are both fairly complex, because the set is constantly\nchanging, and (if i understand your suggestion correctly) they add\nadditional metadata overhead (albeit mostly during tx propagation). Set\nreconciliation is near optimal.\n\nIn any case, I have no horse here (I think changing the client so it's\nmultithreaded is the best way to go), but Yaron's work is pretty cool and\nmay be applicable.\n\n- egs\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140718/d7cb8d29/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-07-19T06:48:18",
                "message_text_only": "On Fri, Jul 18, 2014 at 8:06 PM, Emin G\u00fcn Sirer <el33th4x0r at gmail.com> wrote:\n>\n>> Most things I've seen working in this space are attempting to minimize\n>> the data transfered. At least for the miner-interested case the round\n>> complexity is much more important because a single RTT is enough to\n>> basically send the whole block on a lot of very relevant paths.\n>\n> Agreed. Yaron's scheme is magical because it is non-interactive. I send you\n> a packet of O(expected-delta) and you immediately figure out the delta\n> without further back and forth communication, each requiring an RTT.\n\nOh that does sound interesting\u2014 its the property I was trying to\napproximate with the FEC..  It achieves the one-shot, but there is\noverhead. One plus we have is that we can do some tricks to make some\ncomputational soundness arguments that we'd actually get average\nperformance on average (e.g. that someone can't author transactions in\nsuch a way as to jam the process).\n\n> In any case, I have no horse here (I think changing the client so it's\n> multithreaded is the best way to go), but Yaron's work is pretty cool and\n> may be applicable.\n\n\nThank you, I've certantly queued the paper for reading."
            },
            {
                "author": "Wladimir",
                "date": "2014-07-19T08:06:43",
                "message_text_only": "On Fri, Jul 18, 2014 at 4:53 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> Two more half-baked thoughts:\n>\n> We should be able to assume that the majority of transaction data (except\n> for coinbase) has already been propagated. As Jeff said, incentivizing nodes\n> to propagate transactions is a very good thing (the signature cache already\n> gives a small incentive to miners to propagate and not 'hoard'\n> transactions).\n\nMaybe a stupid idea - but couldn't we make that assumption a surety by\nstarting the 'set synchronization process' as soon as the miner starts\ncrunching on a certain block, instead of when it broadcasts it? So the\npeers are prepared, and the actual block broadcast is just the header\n+ coinbase tx.\n\nWladimir"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-07-17T23:34:21",
                "message_text_only": "On Thu, Jul 17, 2014 at 2:35 PM, Kaz Wesley <keziahw at gmail.com> wrote:\n> A node should be able to forget invs it has seen without invalidating what\n> peers\n> know about its known txes. To allow for this, a node assembles a bloom\n> filter of\n\nAnother option would be to just guarantee to keep at least the last N\nsent in each direction to bound memory usage. N could be negotiated.\n\nGoing more complex than that may not have wins enough to justify it...\nwould be good to measure it.\n\n\n(If you're not aware of it, check out\u2014\nhttps://en.bitcoin.it/wiki/User:Gmaxwell/block_network_coding for a\nmore complex idea)"
            },
            {
                "author": "Kaz Wesley",
                "date": "2014-07-31T20:47:35",
                "message_text_only": "I don't see how set reconciliation alone would be practical for\ncondensed block exchange -- if the keys are txids it'd require a round\ntrip to request the missing tx; if we could somehow get the \"What's\nthe Difference\" approach to effectively operate on full transactions\ninstead, the log(keysize) factor overhead would make any transactions\nnot mutually-known very expensive to exchange (at keysize=32b, data\nwould need to be 80% mutually-known just to break even). There's also\nthe complication and/or overhead of establishing an \"expected block\"\nto reconcile with the actual block.\n\nThe approach of remembering what invs have been transmitted both\ndirections along each connection is less elegant; it requires\nremembering a lot of communication history, introducing a major point\nof statefulness to the protocol, and custom-compacting blocks for each\npeer. But it is also very effective at squeezing bytes, cheap in cpu\ncycles, and the implementation is fairly simple. The wealth of mutual\nknowledge already available in the current protocol allows\naccomplishing the goal of exchanging blocks efficiently by solving a\nmuch easier problem than its context-less cousin. I have my doubts\nthat it is possible for even an optimal contextless solution to do as\nwell as channel memory in terms of bytes exchanged or computational\ncomplexity -- you can't beat making use of the available information.\n\nI have an implementation of inv-history-tracking that uses a 2b/tx\nalternative to getdata for tx, and I've had that running between two\nnodes for ~2 weeks now. I've been working on a better implementation\nof that plus the sparseblock messages, and I'll have the sparseblock\nprototype (suitable for something like Gregory's remember-last-N\napproach) up and running in a couple of days or so. The prototype\nhandles assigning compact identifiers to transactions and using those\nin block messages; there's a lot of bit-packing sort of tweaks that\ncan be done that I'm not including in the initial prototype. The\nprototype will be able to log history-hit rates, so if we run a few\nsparseblocks nodes connected to each other for a while we should get a\ngood idea of how much efficiency gain this provides, and how it can be\nimproved. This approach even without the intensive bit packing has a\ntotal vtx transmission size of 2*nTxKnown + 1*nTxUnknown +\nnBytesTxUnknown, where only a small window of very recent transactions\nand any transactions that have fallen out of the history limit would\nbe mutually known but not known to be known.\n\nIt would be possible to nearly eliminate even that overhead for both\nknown and unknown transactions with compact descriptions of block tx\ninclusion and ordering policies as Gavin brought up, for which\nsomething like scripts defining priority formulas would be a possible\nimplementation (https://gist.github.com/kazcw/43c97d3924326beca87d#ordering-policy\n-- n.b. most of the rest of the gist is currently outdated). But since\npriority scripts are themselves more complicated than the rest of the\nsparseblock implementation, and basic sparseblocks achieve the vast\nmajority of bandwidth savings, I think it's worth implementing\nsparseblocks without priority scripts now and then using priority\nscripts for sparseblocks2 along with all the other things they can do\nlater.\n\nSet reconciliation does look like a great way to synchronize mempools.\nI've been thinking, contextless low-cost mempool exchange would enable\na node to have one or more \"roaming\" peer slots -- connect to a node,\nfill in each other's mempools, move on to another peer. It seems like\nthis would go a long way to mitigate potential pathological network\ntopologies -- it would make it very difficult to sybil attack a node\n(barring an attacker in a position to spoof IP addresses), and if a\nserious bug or DoS attack caused the network to start to partition\nitself due to DoS bans, it only takes occasional roamers crossing the\npartition to keep both sides generally in sync.\nEfficient mempool synchronization would also increase the efficacy of\nchannel-memory sparseblocks: it picks up transactions too old to have\nbeen exchanged via invs, and could also allow nodes to know exactly\nwhat transactions their peers have discarded.\n\n\n\nOn Thu, Jul 31, 2014 at 8:31 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> I've been reading up on set reconciliation algorithms, and thinking about\n> constant-bandwidth propagation of new block announcements.\n>\n> Emin:  the approach in this paper:\n> What's the Difference? Efficient Set Reconciliation without Prior Context\n>  http://conferences.sigcomm.org/sigcomm/2011/papers/sigcomm/p218.pdf\n>\n> ... looks like it would be much better suited for Bitcoin's use case,\n> because\n>\n> a) it looks much easier to implement (no polynomial math)\n> b) CPU/latency versus bandwidth tradeoff looks better (somewhat higher\n> bandwidth than Yaron's method, but much lower CPU/latency cost)\n>\n> Kaz: how much time do you have to work on this?  Perhaps we can get a\n> road-map for a prototype and split up work. I actually think the first step\n> might be to gather a couple days worth of tx / block message broadcasts from\n> a few network nodes and then create a test/benchmark harness that will tell\n> us how much overlap there is in what nodes know and how much faster our\n> newer algorithms are.\n>\n> --\n> --\n> Gavin Andresen\n\nOn Thu, Jul 31, 2014 at 12:10 PM, Emin G\u00fcn Sirer <el33th4x0r at gmail.com> wrote:\n> Hi Gavin,\n>\n> Great find. I read (and sadly forgot) this paper back in 2011 and indeed,\n> I'd also pick this approach over Yaron's. My reasons:\n>\n> a. this paper provides a more concrete implementation roadmap that has been\n> explored thoroughly. While I understand Yaron's technique, there are still\n> various design decisions (e.g. estimating the set difference involves a\n> doubling process; representing TX ids seems to take up a lot of space) that\n> are left unspec'ed for an implementation. (In general, Yaron is a\n> theoretician at heart and Varghese is a very practical guy, there will be\n> far fewer unforeseen issues with a Varghese tried and tested algorithm).\n>\n> b. on the surface, this paper seems to use a bit more bandwidth in that it\n> requires O(size of set diff * log of keyspace) vs. Yaron's claim of O(size\n> of set diff). But I believe that in practice Yaron's method would also have\n> an O(log of keyspace) multiplier in place because the roots of his\n> polynomial (the TX ids) have to be represented as numbers, and that requires\n> log-of-keyspace bits. I suspect that Yaron is cleverly folding that factor\n> into the constant factor of O notation, and Varghese et al are being polite\n> by not pointing it out too overtly. So I suspect that the two schemes are\n> actually identical in terms of space complexity.\n>\n> c. this technique is far more efficient in decoding than Yaron's, which\n> requires Gaussian elimination, which in turn is O(d^3).\n>\n> If Bitcoin adopts this technique, it'll be adopting one of the best known\n> techniques from the research community.\n>\n> BTW, don't hesitate to ping me with researchy issues in the future; I'll\n> gladly point the effort in the right direction if I can.\n>\n> - egs\n>\n>\n>\n> On Thu, Jul 31, 2014 at 6:31 PM, Gavin Andresen <gavinandresen at gmail.com>\n> wrote:\n>>\n>> I've been reading up on set reconciliation algorithms, and thinking about\n>> constant-bandwidth propagation of new block announcements.\n>>\n>> Emin:  the approach in this paper:\n>> What's the Difference? Efficient Set Reconciliation without Prior Context\n>>  http://conferences.sigcomm.org/sigcomm/2011/papers/sigcomm/p218.pdf\n>>\n>> ... looks like it would be much better suited for Bitcoin's use case,\n>> because\n>>\n>> a) it looks much easier to implement (no polynomial math)\n>> b) CPU/latency versus bandwidth tradeoff looks better (somewhat higher\n>> bandwidth than Yaron's method, but much lower CPU/latency cost)\n>>\n>> Kaz: how much time do you have to work on this?  Perhaps we can get a\n>> road-map for a prototype and split up work. I actually think the first step\n>> might be to gather a couple days worth of tx / block message broadcasts from\n>> a few network nodes and then create a test/benchmark harness that will tell\n>> us how much overlap there is in what nodes know and how much faster our\n>> newer algorithms are.\n>>\n>> --\n>> --\n>> Gavin Andresen\n>\n>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-07-31T21:29:40",
                "message_text_only": "On Thu, Jul 31, 2014 at 1:47 PM, Kaz Wesley <keziahw at gmail.com> wrote:\n> trip to request the missing tx; if we could somehow get the \"What's\n> the Difference\" approach to effectively operate on full transactions\n> instead\n\nI explain how to do this on the network block coding page.\n\nGiven that you know the sizes and orders of the transactions (e.g.\nfrom a reconciliation step first), the sender sends non-syndromic\nforward error correcting code data somewhat larger than their estimate\nof how much data the user is missing.  Then you drop the data you know\ninto place and then recover the missing blocks using the fec.\n\nThere is no overhead in this approach except for FEC blocks that are\nincompletely missing (and so must be completely discarded), and the\nneed to have the transmitted the transaction list and sizes first.\n(note, that just more bandwidth, not an additional round trip)."
            },
            {
                "author": "Kaz Wesley",
                "date": "2014-07-31T21:41:33",
                "message_text_only": "> the need to have transmitted the transaction list [..] first\n\n32 bits per transaction is at least double the communication overhead\nof the simple approach, and only offers a bound on the probability of\nneeding a round trip.\n\nOn Thu, Jul 31, 2014 at 2:29 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Thu, Jul 31, 2014 at 1:47 PM, Kaz Wesley <keziahw at gmail.com> wrote:\n>> trip to request the missing tx; if we could somehow get the \"What's\n>> the Difference\" approach to effectively operate on full transactions\n>> instead\n>\n> I explain how to do this on the network block coding page.\n>\n> Given that you know the sizes and orders of the transactions (e.g.\n> from a reconciliation step first), the sender sends non-syndromic\n> forward error correcting code data somewhat larger than their estimate\n> of how much data the user is missing.  Then you drop the data you know\n> into place and then recover the missing blocks using the fec.\n>\n> There is no overhead in this approach except for FEC blocks that are\n> incompletely missing (and so must be completely discarded), and the\n> need to have the transmitted the transaction list and sizes first.\n> (note, that just more bandwidth, not an additional round trip)."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-07-31T21:51:23",
                "message_text_only": "On Thu, Jul 31, 2014 at 2:41 PM, Kaz Wesley <keziahw at gmail.com> wrote:\n>> the need to have transmitted the transaction list [..] first\n>\n> 32 bits per transaction is at least double the communication overhead\n> of the simple approach, and only offers a bound on the probability of\n> needing a round trip.\n\n\"(e.g. from a reconciliation step first)\" the list can be communicated\nin the space roughly equal to the size of the difference in sets plus\ncoding the permutation from the permissible orderings.   If you did\nhave some \"simple approach\" that guaranteed that some transactions\nwould be present, then you could code those with indexes... the FEC\nstill lets you fill in the missing transactions without knowing in\nadvance all that will be missing.   (Also, the suggestion on the\nnetwork block coding page of using part of a cryptographic permutation\nas the key means that for unknown transactions the transmission of the\nnew unknown keys is always goodput\u2014 doesn't add overhead)\n\nIt's \"only a bound\" but you can pick whatever bound you want,\nincluding\u2014 if you send data equal to the missing amount, then it'll be\nalways successful, but no bandwidth savings.   Though if the transport\nis unordered (e.g. UDP or non-blocking SCTP) even sending 100% of the\nmissing amount can save time by eliminating a round trip that might\notherwise be needed for a retransmission."
            },
            {
                "author": "Kaz Wesley",
                "date": "2014-07-31T22:27:59",
                "message_text_only": "> the FEC still lets you fill in the missing transactions without knowing in advance all that will be missing.\n\nI don't see why we need to solve that problem, since the protocol\nalready involves exchanging the information necessary to determine\n(with some false positives) what a peer is missing, and needs to\ncontinue doing so regardless of how blocks are transmitted.\n\nSet reconciliation does have the benefit of eliminating a subset of\nthose false positives and offering a finer-grained mechanism for\ndefining what a node can choose to forget from its mempool than\nremember-last-N, but if we implement it for block transmission I don't\nsee why we wouldn't also use it to synchronize mempool txes, and if\nmempools are synchronized we don't actually need to do it as part of\nblock-transmission to get those benefits.\n\nAs far as I can tell, channel memory sparseblocks achieve most of the\npossible bandwidth savings, and when FEC-based mempool synchronization\nis implemented its benefits can be applied to the sparseblocks by\nresetting the channel memory to the mutual mempool state each time\nmempool differences are exchanged. Am I missing a benefit to doing FEC\nat block forwarding time that can't be realized by FEC-based mempool\nsynchronization, implemented separately from channel-memory based\nindex-coding?\n\n\nOn Thu, Jul 31, 2014 at 2:51 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Thu, Jul 31, 2014 at 2:41 PM, Kaz Wesley <keziahw at gmail.com> wrote:\n>>> the need to have transmitted the transaction list [..] first\n>>\n>> 32 bits per transaction is at least double the communication overhead\n>> of the simple approach, and only offers a bound on the probability of\n>> needing a round trip.\n>\n> \"(e.g. from a reconciliation step first)\" the list can be communicated\n> in the space roughly equal to the size of the difference in sets plus\n> coding the permutation from the permissible orderings.   If you did\n> have some \"simple approach\" that guaranteed that some transactions\n> would be present, then you could code those with indexes... the FEC\n> still lets you fill in the missing transactions without knowing in\n> advance all that will be missing.   (Also, the suggestion on the\n> network block coding page of using part of a cryptographic permutation\n> as the key means that for unknown transactions the transmission of the\n> new unknown keys is always goodput\u2014 doesn't add overhead)\n>\n> It's \"only a bound\" but you can pick whatever bound you want,\n> including\u2014 if you send data equal to the missing amount, then it'll be\n> always successful, but no bandwidth savings.   Though if the transport\n> is unordered (e.g. UDP or non-blocking SCTP) even sending 100% of the\n> missing amount can save time by eliminating a round trip that might\n> otherwise be needed for a retransmission."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-07-31T23:18:38",
                "message_text_only": "On Thu, Jul 31, 2014 at 3:27 PM, Kaz Wesley <keziahw at gmail.com> wrote:\n>> the FEC still lets you fill in the missing transactions without knowing in advance all that will be missing.\n>\n> I don't see why we need to solve that problem, since the protocol\n> already involves exchanging the information necessary to determine\n> (with some false positives) what a peer is missing, and needs to\n> continue doing so regardless of how blocks are transmitted.\n\nFalse positives, and if you have more than one peer\u2014 false negatives.\n(or a rule for what you must keep which is conservative in order to\navoid creating huge storage requirements\u2014 but then also has false\nnegatives).\n\n\n> As far as I can tell, channel memory sparseblocks achieve most of the\n> possible bandwidth savings, and when FEC-based mempool synchronization\n> is implemented its benefits can be applied to the sparseblocks by\n> resetting the channel memory to the mutual mempool state each time\n> mempool differences are exchanged. Am I missing a benefit to doing FEC\n> at block forwarding time that can't be realized by FEC-based mempool\n> synchronization, implemented separately from channel-memory based\n> index-coding?\n\nYes, minimizing latency in the face of multiple peers.\n\nOtherwise no. And certantly no reason to to implement something simple first."
            }
        ],
        "thread_summary": {
            "title": "Squashing redundant tx data in blocks on the wire",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Emin G\u00fcn Sirer",
                "Wladimir",
                "Kaz Wesley",
                "Gregory Maxwell",
                "Gavin Andresen"
            ],
            "messages_count": 23,
            "total_messages_chars_count": 54270
        }
    },
    {
        "title": "[Bitcoin-development] Small update to BIP 62",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2014-07-18T15:14:53",
                "message_text_only": "Hi all,\n\nI've sent a pull request to make a small change to BIP 62 (my\nanti-malleability proposal) which is still a draft; see:\n* https://github.com/bitcoin/bips/pull/90 (the request)\n* https://github.com/sipa/bips/blob/bip62up/bip-0062.mediawiki (the result)\n\nIt makes two of the 7 new rules mandatory in new blocks, even for\nold-style transactions. Both are already non-standard since 0.8.0, and\nhave no use cases in my opinion.\n\nThe reason for this change is dropping the requirement for signature\nverification engines to be bug-for-bug compatible with OpenSSL (which\nsupports many non-standard encodings for signatures). Requiring strict\nDER compliance for signatures means any implementation just needs to\nsupport DER.\n\nComments?\n\n-- \nPieter"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-18T15:39:56",
                "message_text_only": "The rationale doesn't seem to apply to rule #4, what's so special about\nthat one?\n\nAlthough I agree not having to support all of DER is nice, in practice I\nthink all implementations do and libraries to parse DER are widespread.\nGiven that the last time we modified tx rules without bumping version\nnumbers we managed to break the only functioning iPhone client, I've become\na big fan of backwards compatibility: seems the default choice should be to\npreserve compatibility over technical niceness until the old versions have\nbeen fully phased out.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140718/bf4b4f23/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-07-18T15:45:05",
                "message_text_only": "On Fri, Jul 18, 2014 at 5:39 PM, Mike Hearn <mike at plan99.net> wrote:\n> The rationale doesn't seem to apply to rule #4, what's so special about that\n> one?\n\nNothing really. If it's controversial in any way, I'm fine with\nchanging that. It's just one those things that nobody needs, nobody\nuses, has never been standard, and shouldn't have been possible in the\nfirst place IMHO. Given that, it's easier to just make it a consensus\nrule.\n\n> Although I agree not having to support all of DER is nice, in practice I\n> think all implementations do and libraries to parse DER are widespread.\n> Given that the last time we modified tx rules without bumping version\n> numbers we managed to break the only functioning iPhone client, I've become\n> a big fan of backwards compatibility: seems the default choice should be to\n> preserve compatibility over technical niceness until the old versions have\n> been fully phased out.\n\nI'm not comfortable with dropping OpenSSL-based signature parsing\nuntil we have well-defined rules about which encodings are valid. At\nthis point I'm not even convinced we *know* about all possible ways to\nmodify signature encodings without invalidating them.\n\nBut perhaps we should investigate how many non-DER signatures still\nmake it into blocks first...\n\n-- \nPieter"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-07-18T17:25:50",
                "message_text_only": "On Fri, Jul 18, 2014 at 5:45 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> But perhaps we should investigate how many non-DER signatures still\n> make it into blocks first...\n\nIn the last 11 blocks (4148 transactions), apparently none.\n\n-- \nPieter"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-07-18T18:10:41",
                "message_text_only": "On Fri, Jul 18, 2014 at 7:25 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> On Fri, Jul 18, 2014 at 5:45 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n>> But perhaps we should investigate how many non-DER signatures still\n>> make it into blocks first...\n>\n> In the last 11 blocks (4148 transactions), apparently none.\n\nOr even in the last 389 blocks (159466 transactions).\n\n-- \nPieter"
            },
            {
                "author": "Wladimir",
                "date": "2014-07-18T20:56:32",
                "message_text_only": "On Fri, Jul 18, 2014 at 5:39 PM, Mike Hearn <mike at plan99.net> wrote:\n> The rationale doesn't seem to apply to rule #4, what's so special about that\n> one?\n\n> 4. Non-push operations in scriptSig Any non-push operation in a scriptSig invalidates it.\n\nHaving non-push operations in the scriptSig is a source of\nmalleability, as there can be multiple sequences of opcodes that\nevaluate to the same result.\n\nWladimir"
            },
            {
                "author": "Aaron Voisine",
                "date": "2014-07-18T22:03:44",
                "message_text_only": "> 9. New signatures by the sender\n\nI'm not suggesting it be required, but it would be possible to\nmitigate this one by requiring that all signatures deterministically\ngenerate k per RFC6979. I'm using this in breadwallet.\n\nAaron Voisine\nbreadwallet.com\n\n\nOn Fri, Jul 18, 2014 at 1:56 PM, Wladimir <laanwj at gmail.com> wrote:\n> On Fri, Jul 18, 2014 at 5:39 PM, Mike Hearn <mike at plan99.net> wrote:\n>> The rationale doesn't seem to apply to rule #4, what's so special about that\n>> one?\n>\n>> 4. Non-push operations in scriptSig Any non-push operation in a scriptSig invalidates it.\n>\n> Having non-push operations in the scriptSig is a source of\n> malleability, as there can be multiple sequences of opcodes that\n> evaluate to the same result.\n>\n> Wladimir\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-07-19T01:28:49",
                "message_text_only": "On Fri, Jul 18, 2014 at 3:03 PM, Aaron Voisine <voisine at gmail.com> wrote:\n>> 9. New signatures by the sender\n>\n> I'm not suggesting it be required, but it would be possible to\n> mitigate this one by requiring that all signatures deterministically\n> generate k per RFC6979. I'm using this in breadwallet.\n\nNope.\n\nYour homework assignment is to explain why. :)"
            },
            {
                "author": "Aaron Voisine",
                "date": "2014-07-19T04:38:16",
                "message_text_only": "Well, you could always create a transaction with a different signature\nhash, say, by changing something trivial like nLockTime, or changing\nthe order of inputs or outputs. Is that what you're talking about? Or\nis there some sophistry I'm ignorant of having to do with the elliptic\ncurve math in the signature itself?\n\nAaron Voisine\nbreadwallet.com\n\n\nOn Fri, Jul 18, 2014 at 6:28 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Fri, Jul 18, 2014 at 3:03 PM, Aaron Voisine <voisine at gmail.com> wrote:\n>>> 9. New signatures by the sender\n>>\n>> I'm not suggesting it be required, but it would be possible to\n>> mitigate this one by requiring that all signatures deterministically\n>> generate k per RFC6979. I'm using this in breadwallet.\n>\n> Nope.\n>\n> Your homework assignment is to explain why. :)"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-07-19T06:56:08",
                "message_text_only": "On Fri, Jul 18, 2014 at 9:38 PM, Aaron Voisine <voisine at gmail.com> wrote:\n> Well, you could always create a transaction with a different signature\n> hash, say, by changing something trivial like nLockTime, or changing\n> the order of inputs or outputs. Is that what you're talking about? Or\n> is there some sophistry I'm ignorant of having to do with the elliptic\n> curve math in the signature itself?\n\nNo, though thats true too. I was talking about the properties of the DSA nonce:\n\nAn attacker is not obligated to follow your protocol unless you can\nprevent him. You can _say_ use derandomized DSA all you like, but he\ncan just not do so, there is no (reasonable) way to prove you're using\na particular nonce generation scheme without revealing the private key\nin the process. The verifier cannot know the nonce or he can trivially\nrecover your private key thus he can't just repeat the computation\n(well, plus if you're using RFC6979 the computation includes the\nprivate key), so short of a very fancy ZKP (stuff at the forefront of\ncryptographic/computer science) or precommiting to a nonce per public\nkey (e.g. single use public keys), you cannot control how a DSA nonce\nwas generated in the verifier in a way that would prevent equivalent\nbut not identical signatures.\n\n(I believe there was some P.O.S. altcoin that was vulnerable because\nof precisely the above too\u2014 thinking specifying a deterministic signer\nwould prevent someone from grinding signatures to improve their mining\nodds... there are signature systems which are naturally\nrandomness-free: most hash based signatures and pairing short\nsignatures are two examples that come to mind... but not DSA, schnorr,\nor any of their derivatives)."
            },
            {
                "author": "Aaron Voisine",
                "date": "2014-07-19T08:34:13",
                "message_text_only": "Ah, good point. For some reason I was thinking the k value was\ngenerated only from the hash being signed, but it's derived from both\nthe private key and the hash, so as you say there's no way for the\nverifier to tell if the scheme is being followed.\n\n\n\nAaron Voisine\nbreadwallet.com\n\n\nOn Fri, Jul 18, 2014 at 11:56 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Fri, Jul 18, 2014 at 9:38 PM, Aaron Voisine <voisine at gmail.com> wrote:\n>> Well, you could always create a transaction with a different signature\n>> hash, say, by changing something trivial like nLockTime, or changing\n>> the order of inputs or outputs. Is that what you're talking about? Or\n>> is there some sophistry I'm ignorant of having to do with the elliptic\n>> curve math in the signature itself?\n>\n> No, though thats true too. I was talking about the properties of the DSA nonce:\n>\n> An attacker is not obligated to follow your protocol unless you can\n> prevent him. You can _say_ use derandomized DSA all you like, but he\n> can just not do so, there is no (reasonable) way to prove you're using\n> a particular nonce generation scheme without revealing the private key\n> in the process. The verifier cannot know the nonce or he can trivially\n> recover your private key thus he can't just repeat the computation\n> (well, plus if you're using RFC6979 the computation includes the\n> private key), so short of a very fancy ZKP (stuff at the forefront of\n> cryptographic/computer science) or precommiting to a nonce per public\n> key (e.g. single use public keys), you cannot control how a DSA nonce\n> was generated in the verifier in a way that would prevent equivalent\n> but not identical signatures.\n>\n> (I believe there was some P.O.S. altcoin that was vulnerable because\n> of precisely the above too\u2014 thinking specifying a deterministic signer\n> would prevent someone from grinding signatures to improve their mining\n> odds... there are signature systems which are naturally\n> randomness-free: most hash based signatures and pairing short\n> signatures are two examples that come to mind... but not DSA, schnorr,\n> or any of their derivatives)."
            },
            {
                "author": "Aaron Voisine",
                "date": "2014-07-19T19:08:13",
                "message_text_only": "Thanks g.maxwell, your explanation of *why* you can't just generate k\nin a way that the verifier can duplicate is really helpful. This also\nservers as a great illustration why engineers should never try to\ndesigning their own crypto protocols! I knew enough to know not try\nthat at least.\n\nAaron Voisine\nbreadwallet.com\n\n\nOn Fri, Jul 18, 2014 at 11:56 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Fri, Jul 18, 2014 at 9:38 PM, Aaron Voisine <voisine at gmail.com> wrote:\n>> Well, you could always create a transaction with a different signature\n>> hash, say, by changing something trivial like nLockTime, or changing\n>> the order of inputs or outputs. Is that what you're talking about? Or\n>> is there some sophistry I'm ignorant of having to do with the elliptic\n>> curve math in the signature itself?\n>\n> No, though thats true too. I was talking about the properties of the DSA nonce:\n>\n> An attacker is not obligated to follow your protocol unless you can\n> prevent him. You can _say_ use derandomized DSA all you like, but he\n> can just not do so, there is no (reasonable) way to prove you're using\n> a particular nonce generation scheme without revealing the private key\n> in the process. The verifier cannot know the nonce or he can trivially\n> recover your private key thus he can't just repeat the computation\n> (well, plus if you're using RFC6979 the computation includes the\n> private key), so short of a very fancy ZKP (stuff at the forefront of\n> cryptographic/computer science) or precommiting to a nonce per public\n> key (e.g. single use public keys), you cannot control how a DSA nonce\n> was generated in the verifier in a way that would prevent equivalent\n> but not identical signatures.\n>\n> (I believe there was some P.O.S. altcoin that was vulnerable because\n> of precisely the above too\u2014 thinking specifying a deterministic signer\n> would prevent someone from grinding signatures to improve their mining\n> odds... there are signature systems which are naturally\n> randomness-free: most hash based signatures and pairing short\n> signatures are two examples that come to mind... but not DSA, schnorr,\n> or any of their derivatives)."
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-07-19T14:46:07",
                "message_text_only": "On Jul 18, 2014 4:56 PM, \"Wladimir\" <laanwj at gmail.com> wrote:\n>\n> On Fri, Jul 18, 2014 at 5:39 PM, Mike Hearn <mike at plan99.net> wrote:\n> > The rationale doesn't seem to apply to rule #4, what's so special about\nthat\n> > one?\n>\n> > 4. Non-push operations in scriptSig Any non-push operation in a\nscriptSig invalidates it.\n>\n> Having non-push operations in the scriptSig is a source of\n> malleability, as there can be multiple sequences of opcodes that\n> evaluate to the same result.\n\nWell yes, but that is true for each of the rules and is already covered by\nthe previous specification in BIP62. Making it mandatory even for old\ntransaction does not really protect much against malleability as there are\nseveral other sources of malleability that cannot be made mandatory in old\ntransactions left.\n\nThe reason for including #4 is just \"allowing this does not benefit anyone\".\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140719/cc74f9a6/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-07-18T20:51:48",
                "message_text_only": "On Fri, Jul 18, 2014 at 5:14 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> Hi all,\n>\n> I've sent a pull request to make a small change to BIP 62 (my\n> anti-malleability proposal) which is still a draft; see:\n> * https://github.com/bitcoin/bips/pull/90 (the request)\n> * https://github.com/sipa/bips/blob/bip62up/bip-0062.mediawiki (the result)\n>\n> It makes two of the 7 new rules mandatory in new blocks, even for\n> old-style transactions. Both are already non-standard since 0.8.0, and\n> have no use cases in my opinion.\n\nLooks good to me.\n\n> The reason for this change is dropping the requirement for signature\n> verification engines to be bug-for-bug compatible with OpenSSL (which\n> supports many non-standard encodings for signatures). Requiring strict\n> DER compliance for signatures means any implementation just needs to\n> support DER.\n\nThis is certainly a good thing. Not even OpenSSL is guaranteed to be\nbug-for-bug compatible with its own prior versions forever, so better\nto strictly define what is allowed.\n\nWladimir"
            }
        ],
        "thread_summary": {
            "title": "Small update to BIP 62",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir",
                "Mike Hearn",
                "Gregory Maxwell",
                "Pieter Wuille",
                "Aaron Voisine"
            ],
            "messages_count": 14,
            "total_messages_chars_count": 14436
        }
    },
    {
        "title": "[Bitcoin-development] Signature with negative integer?",
        "thread_messages": [
            {
                "author": "Richard Moore",
                "date": "2014-07-19T04:33:13",
                "message_text_only": "Hey all,\n\nI'm wondering if anyone can help explain to me tx 70f7c15c6f62139cc41afa858894650344eda9975b46656d893ee59df8914a3d...\n\n(https://blockchain.info/tx/70f7c15c6f62139cc41afa858894650344eda9975b46656d893ee59df8914a3d)\n\n\nThe input signature script is:\n\n304402206b5c3b1c86748dcf328b9f3a65e10085afcf5d1af5b40970d8ce3a9355e06b5b0220cdbdc23e6d3618e47056fccc60c5f73d1a542186705197e5791e97f0e6582a3201 \n\n\nWhich decodes to:\n\nr= 48560432700441876832361368709121298776045893858160378595187765610521057848155\ns= -22732680560694206332190468058638664750027418114195068375538144640549433890254\n\n(http://lapo.it/asn1js/#304402206B5C3B1C86748DCF328B9F3A65E10085AFCF5D1AF5B40970D8CE3A9355E06B5B0220CDBDC23E6D3618E47056FCCC60C5F73D1A542186705197E5791E97F0E6582A32)\n\n\nThe ECC library I'm using is failing to verify this, which I think makes sense, since I the point needs to be positive, no? But it is obviously valid, as it has been verified and spent. I have tried simply modulo curve.order to positive-ify it, but that didn't seem to work either. Given a point P (with Py < 0) is there some fancy way to bring it into the elliptic curve space, such that Px >= 0 and Py >= 0?\n\nThanks!\n\nRicMoo\n\n\n.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8><(((\u00ba>\n\nRichard Moore ~ Founder\nGenetic Mistakes Software inc.\nphone: (778) 882-6125\nemail: ricmoo at geneticmistakes.com\nwww: http://GeneticMistakes.com"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-07-19T07:03:35",
                "message_text_only": "On Fri, Jul 18, 2014 at 9:33 PM, Richard Moore <me at ricmoo.com> wrote:\n> Hey all,\n> I'm wondering if anyone can help explain to me tx 70f7c15c6f62139cc41afa858894650344eda9975b46656d893ee59df8914a3d...\n\nA rather timely post.  See the other thread on BIP0062. What you're\nlooking at is an example of a well-known-to-implementers-here where\ninvisible and undocumented \"over permissiveness\" in interpreting\ninvalid encoding in a cryptographic library (OpenSSL in our case)\nwhich would have been probably-not-unwelcome in many other protocol\nuses results in an unexpected consensus critical normative rule in\nBitcoin.\n\nModern releases of Bitcoin core will no longer relay or mine them but\nthey're still valid in blocks should they show up.\n\nBIP62 proposes, among other things, soft-forking (backwards\ncompatible) changes that will strictly limit the DER encoding to avoid\nambiguity. If adopted by the network implementations would still need\nto grandfather in existing weird transactions but could do so on a\ntxid by txid basis since there would be no more broken encoding\npermitted in blocks, and use different DER decoding code without risk\nof consensus inconsistency (so long as it uses der decoding which is\nfunctionally identical to what BIP62 requires\u2014 of course)."
            }
        ],
        "thread_summary": {
            "title": "Signature with negative integer?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Richard Moore",
                "Gregory Maxwell"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2649
        }
    },
    {
        "title": "[Bitcoin-development] Trickle and transaction propogation",
        "thread_messages": [
            {
                "author": "Kaz Wesley",
                "date": "2014-07-20T21:01:22",
                "message_text_only": "The inv trickling mechanism currently serves two purposes:\n- protect casual users' privacy by slightly obscuring a tx's originating node\n- reduce invs unnecessarily sent both directions for a connection\nIt has some drawbacks:\n- it slows transaction propagation\n- it delays knowledge between two nodes of what txes are mutually known\nThese drawbacks will be especially costly once optimizations based on\nmutually-known transactions are available (in progress, see \"sparse\nblocks\" thread).\n\nBoth of the benefits of trickling can be achieved more efficiently and\nwithout the costs to transaction propagation and mutual transaction\nknowledge.\n\nPrivacy: trickling helps hide the origin of 3/4 of the transactions a\nnode is pushing by preventing most of the node's neighbors from seeing\nthe transactions from that node right away; by the time a peer becomes\nthe trickle node, it may have received the same inv from another of\nits peers.\nThis staggering of introduction of new invs to the network could be\nmade more effective by scheduling staggered pushes of wallet\ntransactions to each peer in a structure similar to mapAskFor.\nThis does have the drawback that someone who has established multiple\nconnections to a node can observe that some invs are pushed at\ndifferent times, suggesting they are in the stagger set. I don't see\nany straightforward way to remedy this, but trickling is also\nvulnerable to sybil attacks, and floods 1/4 of its transactions\nimmediately anyway -- so I think staggered push would be an overall\nprivacy improvement.\nLikelihood of a partial sybil obtaining inv origin information could\nbe reduced by a policy of ending staggering and pushing to all peers\nonce another peer has received the tx from elsewhere and inved the\ntransaction back to the original node; if the staggering is\nsufficiently slow, only one or two nodes would receive the initial\npush to the network and after that the inv would be treated\nindistinguishably from if it originated externally.\n\nRedundant invs: without trickling, when two nodes receive transactions\nat around the same time they may each send each other an inv before\nreceiving the other's. Trickling reduces this by giving all\nnon-trickleSend nodes a chance to send first. Thus just eliminating\ntrickling would at most double inv traffic. Although invs are small\nthey are numerous, being the only common message potentially sent from\nevery node to all its neighbors.\nA more efficient solution to the who-sends-first problem would be for\nconnections to have directional parity:\n- a node initiating a connection would announce its parity (even or odd)\n- an inv is sent right away to peers with matching parity, but only\nsent against parity if a certain timeout has elapsed without the inv\nbeing received\nIn order to allow for nodes with few peers (i.e. -connect) or nodes on\nlocal connections that might as well flood everything to each other,\nparity could be specified as a mask (fEven << 1 & fOdd). Peers from\npre-directional-parity versions can be treated as having the mask\nfully set.\n\nBoth push staggering and directional parity admit simple\nimplementations. The specific staggering delay distribution would need\nsome thought; it could be set slower than the typical trickle cycle\nperiod for better than current privacy, since general transaction\npropagation would not impeded by heavy staggering. What do you think\nof this approach? Any gotchas/improvements/alternatives?"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-20T22:02:39",
                "message_text_only": "No comment on the proposal itself, which sounds reasonable but I didn't\nthink about it much yet. Instead, just an observation that by now most\nusers are not using the Core wallet anymore, but rather use either SPV\nwallets or more centralised blockchain/coinbase style gateways to the\nnetwork.\n\nSPV wallets don't relay thus you know any tx sent from them must be\noriginated by that wallet. Centralised services accept tx submissions via\nSSL and can easily improve their users privacy by sending transactions out\nvia a node that isn't listening.\n\nSo IMHO we should be optimising the network for the common use case rather\nthan stuff that only helps Core wallet users, and actively slows down\neveryone else. If your proposed techniques let us have our cake and eat it,\nfantastic, otherwise I still think we should remove tx trickling.\n\n\n\nOn Sun, Jul 20, 2014 at 11:01 PM, Kaz Wesley <keziahw at gmail.com> wrote:\n\n> The inv trickling mechanism currently serves two purposes:\n> - protect casual users' privacy by slightly obscuring a tx's originating\n> node\n> - reduce invs unnecessarily sent both directions for a connection\n> It has some drawbacks:\n> - it slows transaction propagation\n> - it delays knowledge between two nodes of what txes are mutually known\n> These drawbacks will be especially costly once optimizations based on\n> mutually-known transactions are available (in progress, see \"sparse\n> blocks\" thread).\n>\n> Both of the benefits of trickling can be achieved more efficiently and\n> without the costs to transaction propagation and mutual transaction\n> knowledge.\n>\n> Privacy: trickling helps hide the origin of 3/4 of the transactions a\n> node is pushing by preventing most of the node's neighbors from seeing\n> the transactions from that node right away; by the time a peer becomes\n> the trickle node, it may have received the same inv from another of\n> its peers.\n> This staggering of introduction of new invs to the network could be\n> made more effective by scheduling staggered pushes of wallet\n> transactions to each peer in a structure similar to mapAskFor.\n> This does have the drawback that someone who has established multiple\n> connections to a node can observe that some invs are pushed at\n> different times, suggesting they are in the stagger set. I don't see\n> any straightforward way to remedy this, but trickling is also\n> vulnerable to sybil attacks, and floods 1/4 of its transactions\n> immediately anyway -- so I think staggered push would be an overall\n> privacy improvement.\n> Likelihood of a partial sybil obtaining inv origin information could\n> be reduced by a policy of ending staggering and pushing to all peers\n> once another peer has received the tx from elsewhere and inved the\n> transaction back to the original node; if the staggering is\n> sufficiently slow, only one or two nodes would receive the initial\n> push to the network and after that the inv would be treated\n> indistinguishably from if it originated externally.\n>\n> Redundant invs: without trickling, when two nodes receive transactions\n> at around the same time they may each send each other an inv before\n> receiving the other's. Trickling reduces this by giving all\n> non-trickleSend nodes a chance to send first. Thus just eliminating\n> trickling would at most double inv traffic. Although invs are small\n> they are numerous, being the only common message potentially sent from\n> every node to all its neighbors.\n> A more efficient solution to the who-sends-first problem would be for\n> connections to have directional parity:\n> - a node initiating a connection would announce its parity (even or odd)\n> - an inv is sent right away to peers with matching parity, but only\n> sent against parity if a certain timeout has elapsed without the inv\n> being received\n> In order to allow for nodes with few peers (i.e. -connect) or nodes on\n> local connections that might as well flood everything to each other,\n> parity could be specified as a mask (fEven << 1 & fOdd). Peers from\n> pre-directional-parity versions can be treated as having the mask\n> fully set.\n>\n> Both push staggering and directional parity admit simple\n> implementations. The specific staggering delay distribution would need\n> some thought; it could be set slower than the typical trickle cycle\n> period for better than current privacy, since general transaction\n> propagation would not impeded by heavy staggering. What do you think\n> of this approach? Any gotchas/improvements/alternatives?\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140721/840d37ff/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Trickle and transaction propogation",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Kaz Wesley"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 8660
        }
    },
    {
        "title": "[Bitcoin-development] Policy for DNS seeds",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2014-07-21T13:43:42",
                "message_text_only": "We've established a few basic rules for the DNS seeds as used in the\nBitcoin Core software. See below.\n\nIf you run one of the DNS seeds please reply to this and let us know\nwhether you agree to these terms. if you think some requirements are\nunreasonable let us know too. If we haven't heard from you by\n2014-08-04 we will remove your DNS seed from the list of defaults.\n\nExpectations for DNSSeed operators\n====================================\n\nBitcoin Core attempts to minimize the level of trust in DNS seeds,\nbut DNS seeds still pose a small amount of risk for the network.\nOther implementations of Bitcoin software may also use the same\nseeds and may be more exposed. In light of this exposure this\ndocument establishes some basic expectations for the expectations\nfor the operation of dnsseeds.\n\n0. A DNSseed operating organization or person is expected\nto follow good host security practices and maintain control of\ntheir serving infrastructure and not sell or transfer control of their\ninfrastructure. Any hosting services contracted by the operator are\nequally expected to uphold these expectations.\n\n1. The DNSseed results must consist exclusively of fairly selected and\nfunctioning Bitcoin nodes from the public network to the best of the\noperators understanding and capability.\n\n2. For the avoidance of doubt, the results may be randomized but must not\nsingle-out any group of hosts to receive different results unless due to an\nurgent technical necessity and disclosed.\n\n3. The results may not be served with a DNS TTL of less than one minute.\n\n4. Any logging of DNS queries should be only that which is necessary\nfor the operation of the service or urgent health of the Bitcoin\nnetwork and must not be retained longer than necessary or disclosed\nto any third party.\n\n5. Information gathered as a result of the operators node-spidering\n(not from DNS queries) may be freely published or retained, but only\nif this data was not made more complete by biasing node connectivity\n(a violation of expectation (1)).\n\n6. Operators are encouraged, but not required, to publicly document\nthe details of their operating practices.\n\n7. A reachable email contact address must be published for inquiries\nrelated to the DNSseed operation.\n\nIf these expectations cannot be satisfied the operator should\ndiscontinue providing services and contact the active Bitcoin\nCore development team as well as posting on bitcoin-development.\n\nBehavior outside of these expectations may be reasonable in some\nsituations but should be discussed in public in advance.\n\n========\n\nSee\nhttps://github.com/bitcoin/bitcoin/pull/4566\n\nWladimir"
            },
            {
                "author": "Christian Decker",
                "date": "2014-07-21T13:53:51",
                "message_text_only": "How about research projects into node distribution? Specifically I\nwonder whether the collection and analysis of DNS query origin is\nallowed when queries are anonymized and aggregated. This would prevent\nthe identification of a single user, which I assume is the rationale\nfor point 4.\n\nOther than that I'm perfectly fine with accepting the rules for\nseed.bitcoinstats.com\n\nRegards,\nChristian\n--\nChristian Decker\n\n\nOn Mon, Jul 21, 2014 at 2:43 PM, Wladimir <laanwj at gmail.com> wrote:\n> We've established a few basic rules for the DNS seeds as used in the\n> Bitcoin Core software. See below.\n>\n> If you run one of the DNS seeds please reply to this and let us know\n> whether you agree to these terms. if you think some requirements are\n> unreasonable let us know too. If we haven't heard from you by\n> 2014-08-04 we will remove your DNS seed from the list of defaults.\n>\n> Expectations for DNSSeed operators\n> ====================================\n>\n> Bitcoin Core attempts to minimize the level of trust in DNS seeds,\n> but DNS seeds still pose a small amount of risk for the network.\n> Other implementations of Bitcoin software may also use the same\n> seeds and may be more exposed. In light of this exposure this\n> document establishes some basic expectations for the expectations\n> for the operation of dnsseeds.\n>\n> 0. A DNSseed operating organization or person is expected\n> to follow good host security practices and maintain control of\n> their serving infrastructure and not sell or transfer control of their\n> infrastructure. Any hosting services contracted by the operator are\n> equally expected to uphold these expectations.\n>\n> 1. The DNSseed results must consist exclusively of fairly selected and\n> functioning Bitcoin nodes from the public network to the best of the\n> operators understanding and capability.\n>\n> 2. For the avoidance of doubt, the results may be randomized but must not\n> single-out any group of hosts to receive different results unless due to an\n> urgent technical necessity and disclosed.\n>\n> 3. The results may not be served with a DNS TTL of less than one minute.\n>\n> 4. Any logging of DNS queries should be only that which is necessary\n> for the operation of the service or urgent health of the Bitcoin\n> network and must not be retained longer than necessary or disclosed\n> to any third party.\n>\n> 5. Information gathered as a result of the operators node-spidering\n> (not from DNS queries) may be freely published or retained, but only\n> if this data was not made more complete by biasing node connectivity\n> (a violation of expectation (1)).\n>\n> 6. Operators are encouraged, but not required, to publicly document\n> the details of their operating practices.\n>\n> 7. A reachable email contact address must be published for inquiries\n> related to the DNSseed operation.\n>\n> If these expectations cannot be satisfied the operator should\n> discontinue providing services and contact the active Bitcoin\n> Core development team as well as posting on bitcoin-development.\n>\n> Behavior outside of these expectations may be reasonable in some\n> situations but should be discussed in public in advance.\n>\n> ========\n>\n> See\n> https://github.com/bitcoin/bitcoin/pull/4566\n>\n> Wladimir"
            },
            {
                "author": "Matt Corallo",
                "date": "2014-07-22T20:01:45",
                "message_text_only": "Absolutely not. Time and time again we've seen \"anonymized\" data sets\nthat dont work out so well. I'm sure its possible to do but there are\ntoo many factors and we dont want to succumb to this.\n\nAlso, these generally look good (and essentially the same as what had\nbeen a gentleman's agreement for those who read IRC actively, the\npurpose of codifying this is essentially that we ended up adding a lot\nof DNS Seeds run by people who dont follow development closely and/or\nare not aware of the issues involved).\n\nThanks for writing this up,\nMatt\n\nOn 07/21/14 13:53, Christian Decker wrote:\n> How about research projects into node distribution? Specifically I\n> wonder whether the collection and analysis of DNS query origin is\n> allowed when queries are anonymized and aggregated. This would prevent\n> the identification of a single user, which I assume is the rationale\n> for point 4.\n> \n> Other than that I'm perfectly fine with accepting the rules for\n> seed.bitcoinstats.com\n> \n> Regards,\n> Christian\n> --\n> Christian Decker\n> \n> \n> On Mon, Jul 21, 2014 at 2:43 PM, Wladimir <laanwj at gmail.com> wrote:\n>> We've established a few basic rules for the DNS seeds as used in the\n>> Bitcoin Core software. See below.\n>>\n>> If you run one of the DNS seeds please reply to this and let us know\n>> whether you agree to these terms. if you think some requirements are\n>> unreasonable let us know too. If we haven't heard from you by\n>> 2014-08-04 we will remove your DNS seed from the list of defaults.\n>>\n>> Expectations for DNSSeed operators\n>> ====================================\n>>\n>> Bitcoin Core attempts to minimize the level of trust in DNS seeds,\n>> but DNS seeds still pose a small amount of risk for the network.\n>> Other implementations of Bitcoin software may also use the same\n>> seeds and may be more exposed. In light of this exposure this\n>> document establishes some basic expectations for the expectations\n>> for the operation of dnsseeds.\n>>\n>> 0. A DNSseed operating organization or person is expected\n>> to follow good host security practices and maintain control of\n>> their serving infrastructure and not sell or transfer control of their\n>> infrastructure. Any hosting services contracted by the operator are\n>> equally expected to uphold these expectations.\n>>\n>> 1. The DNSseed results must consist exclusively of fairly selected and\n>> functioning Bitcoin nodes from the public network to the best of the\n>> operators understanding and capability.\n>>\n>> 2. For the avoidance of doubt, the results may be randomized but must not\n>> single-out any group of hosts to receive different results unless due to an\n>> urgent technical necessity and disclosed.\n>>\n>> 3. The results may not be served with a DNS TTL of less than one minute.\n>>\n>> 4. Any logging of DNS queries should be only that which is necessary\n>> for the operation of the service or urgent health of the Bitcoin\n>> network and must not be retained longer than necessary or disclosed\n>> to any third party.\n>>\n>> 5. Information gathered as a result of the operators node-spidering\n>> (not from DNS queries) may be freely published or retained, but only\n>> if this data was not made more complete by biasing node connectivity\n>> (a violation of expectation (1)).\n>>\n>> 6. Operators are encouraged, but not required, to publicly document\n>> the details of their operating practices.\n>>\n>> 7. A reachable email contact address must be published for inquiries\n>> related to the DNSseed operation.\n>>\n>> If these expectations cannot be satisfied the operator should\n>> discontinue providing services and contact the active Bitcoin\n>> Core development team as well as posting on bitcoin-development.\n>>\n>> Behavior outside of these expectations may be reasonable in some\n>> situations but should be discussed in public in advance.\n>>\n>> ========\n>>\n>> See\n>> https://github.com/bitcoin/bitcoin/pull/4566\n>>\n>> Wladimir\n> \n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-07-21T19:24:01",
                "message_text_only": "On Mon, Jul 21, 2014 at 03:43:42PM +0200, Wladimir wrote:\n> We've established a few basic rules for the DNS seeds as used in the\n> Bitcoin Core software. See below.\n> \n> If you run one of the DNS seeds please reply to this and let us know\n> whether you agree to these terms. if you think some requirements are\n> unreasonable let us know too. If we haven't heard from you by\n> 2014-08-04 we will remove your DNS seed from the list of defaults.\n> \n> Expectations for DNSSeed operators\n> ====================================\n> \n> Bitcoin Core attempts to minimize the level of trust in DNS seeds,\n> but DNS seeds still pose a small amount of risk for the network.\n> Other implementations of Bitcoin software may also use the same\n> seeds and may be more exposed. In light of this exposure this\n> document establishes some basic expectations for the expectations\n> for the operation of dnsseeds.\n\nMight be worthwhile to also write an \"Expectations for DNSSeed users\"\noutlining what security properties the seeds actually have, and what\nkind of attacks are possible. Many users would be better served with\nseeds that offer authenticated and encrypted connections to the seeds\nfor instance. (esp. if they're using authed/encrypted connections to\nnodes, e.g. Tor hidden services)\n\n\n> 1. The DNSseed results must consist exclusively of fairly selected and\n> functioning Bitcoin nodes from the public network to the best of the\n> operators understanding and capability.\n\nAlong the lines of my above point, for Bitcoin Core users of the\nDNSSeeds what constitutes a \"functioning\" Bitcoin node is much more\nbroad than what other users might need.\n\n\n> 2. For the avoidance of doubt, the results may be randomized but must not\n> single-out any group of hosts to receive different results unless due to an\n> urgent technical necessity and disclosed.\n\nNote that singling out a group of hosts to receive different results\nwith DNS is especially difficult as you'll be usually singling out\ndifferent ISP's rather than hosts themselves. That said if we ever start\noperating HTTPS or similar seeds this expectation will become even more\nrelevant for them.\n\n\n> If these expectations cannot be satisfied the operator should\n> discontinue providing services and contact the active Bitcoin\n> Core development team as well as posting on bitcoin-development.\n> \n> Behavior outside of these expectations may be reasonable in some\n> situations but should be discussed in public in advance.\n\nI'll let others refine the exact wording. but I broadly agree with these\nrules.\n\nFor the testnet DNS seeds - IE my one - my thoughts are the rules should\nbe identical. Most of the above is related to privacy rather than\nsecurity, which apply equally well on testnet. While there have been\nsuggestions to use the testnet seeds for testing vulnerabilities, the\npublic discussion clause should suffice to allow those exceptions. I\nalso suspect that vulnerabilities are likely to be dismissed by a large\npart of the community if demonstrated with DNSSeed operator\nco-operation.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000003dcfcd420fbf9e5b6bdab43ac772960351475dec125382ef\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140721/9c518241/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-07-21T20:19:19",
                "message_text_only": "On Mon, Jul 21, 2014 at 12:24 PM, Peter Todd <pete at petertodd.org> wrote:\n> Might be worthwhile to also write an \"Expectations for DNSSeed users\"\n> outlining what security properties the seeds actually have, and what\n> kind of attacks are possible.\n\nAgreed.  I've seen some amount of use of dnsseeds which I would\nconsider inadvisable considering their weakness.\n\n> Many users would be better served with\n> seeds that offer authenticated and encrypted connections to the seeds\n> for instance. (esp. if they're using authed/encrypted connections to\n> nodes, e.g. Tor hidden services)\n\nAlso agreed, we ought to have a separate onionseed process for hosts\nwhich can reach hidden services which would be inherently\nauthenticated and somewhat more anonymous. The existing introduction\nmethod already doesn't work well for onlynet=onion hosts, so that\nwould be a good place to start.\n\n>> 1. The DNSseed results must consist exclusively of fairly selected and\n>> functioning Bitcoin nodes from the public network to the best of the\n>> operators understanding and capability.\n>\n> Along the lines of my above point, for Bitcoin Core users of the\n> DNSSeeds what constitutes a \"functioning\" Bitcoin node is much more\n> broad than what other users might need.\n\nI was deliberately vague here in that I'm trying to avoid foreclosing\nreasonable activities like omitting nodes which are uselessly slow,\ndiverged from the network, or running very old software.  The test I'm\nsuggesting is that if \"why am I doing this\" is \"to connect users to\nfunctioning nodes\" then it's probably okay, but if its to achieve some\nother end\u2014 probably not.\n\n> Note that singling out a group of hosts to receive different results\n> with DNS is especially difficult as you'll be usually singling out\n> different ISP's rather than hosts themselves. That said if we ever start\n> operating HTTPS or similar seeds this expectation will become even more\n> relevant for them.\n\nYes, this is one of the reasons we use DNS (and also one of the\nreasons the document suggests a non-zero minimum ttl)... but belt and\nsuspenders, even though technical measures are protective here it's\ngood to make it clear that this isn't acceptable.\n\n> While there have been\n> suggestions to use the testnet seeds for testing vulnerabilities, the\n> public discussion clause should suffice to allow those exceptions.\n\nYep. That was the intent. (well not testnet, but the notion that if\nthere really were a good reason to do something else a discussion\nshould cover it)"
            }
        ],
        "thread_summary": {
            "title": "Policy for DNS seeds",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir",
                "Peter Todd",
                "Gregory Maxwell",
                "Matt Corallo",
                "Christian Decker"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 16222
        }
    },
    {
        "title": "[Bitcoin-development] Question on creating test cases for block.CheckBlock()",
        "thread_messages": [
            {
                "author": "Sergio Lerner",
                "date": "2014-07-21T17:30:34",
                "message_text_only": "I'm working on a BIP which needs to modify the block acceptance rules. I\nhave two ways of testing:\n\n- Mining blocks on the testnet\n- Creating test cases for Bitcoin Core.\n\nI want to create those test cases for block.CheckBlock(), which involves\nverifying 100 dynamically generated blocks.\nWhat is the state of the blockchain when a test case is executed ? Is is\nconfigured for the regtest, testnet3 or mainnet? What blocks are in the\nblockchain? Only the genesis block?\n\ncheckblock_tests.cpp seems to be the only test case for CheckBlock() and\nit assumes the mainnet is configured.\nI need to use the regtest so I can create blocks of difficulty 1.\n\nBest regards and thank you in advance,"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-22T11:13:50",
                "message_text_only": "There is no infrastructure for writing block chain unit tests\nunfortunately. Last time I tried to fix this I ended up going down a rabbit\nhole - Bitcoin wasn't written to be a testable codebase and as a result\nreinitialising it from scratch is rather difficult (there are lots of\nglobal variables that have to be reset to particular states and no real\nlist of where they are).\n\nInstead what I ended up doing is extending the pull tester. This is a\nbitcoinj based app (BitcoindComparisonTool in the codebase) which builds a\nregtest chain and submits it to a local regtest node. It tests things like\nreorgs and various rules. It speaks to the node only via P2P so how easy it\nis to verify your BIP works will depend on that. Also the code needs\ncleaning up, there's a lot of copy/paste coding going on in there.\n\n\n\n\nOn Mon, Jul 21, 2014 at 7:30 PM, Sergio Lerner <sergiolerner at certimix.com>\nwrote:\n\n> I'm working on a BIP which needs to modify the block acceptance rules. I\n> have two ways of testing:\n>\n> - Mining blocks on the testnet\n> - Creating test cases for Bitcoin Core.\n>\n> I want to create those test cases for block.CheckBlock(), which involves\n> verifying 100 dynamically generated blocks.\n> What is the state of the blockchain when a test case is executed ? Is is\n> configured for the regtest, testnet3 or mainnet? What blocks are in the\n> blockchain? Only the genesis block?\n>\n> checkblock_tests.cpp seems to be the only test case for CheckBlock() and\n> it assumes the mainnet is configured.\n> I need to use the regtest so I can create blocks of difficulty 1.\n>\n> Best regards and thank you in advance,\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140722/e9c41294/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Question on creating test cases for block.CheckBlock()",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Sergio Lerner"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3069
        }
    },
    {
        "title": "[Bitcoin-development] Time",
        "thread_messages": [
            {
                "author": "Ron OHara",
                "date": "2014-07-25T01:14:20",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nI thought I should shortcut my research by asking a direct question here.\n\nAs I understand it, the blockchain actually provides an extra piece of\nreliable data that is not being exploited by applications.\n\nWhich data?  The time.   In this case 'the time' as agreed by >50% of\nthe participants, where those participants have a strong financial\nincentive to keep that 'time' fairly accurate. (+/- about 10 minutes)\n\nIs this a reasonable understanding of 'time'? ... aka timestamps on the\nblock\n\nOk... 'time' on the blockchain could be 'gamed' ... but with great\ndifficulty. An application presented with a fake blockchain can use\nquite a few heuristics to test the 'validity' of the block chain.\nIt can review the usual cryptographic proofs, and check that difficulty\nis growing/declining only in a realistic manner up to the most recent\nblock. Even use some arbitrary test like difficulty > 10,000,000,000 \n... on the presumption that any less means that the Bitcoin system has\nfailed massively from where it currently is and has become an unreliable\ntime source.\n\nReliable 'time' has been impossible up until now - because you need to\ntrust the time source, and that can always be faked.  Using the\nblockchain as an approximate time source gives you a world wide\nconsensus without direct trust of any player.\n\nSo if this presumption is correct, then we can now build time capsule\napplications that can not be tricked into exposing their contents too\nearly by running them in a virtual environment with the wrong system time.\n\nIs this right? or did miss I something fundamental?\n\nRon\n\n- -- \npublic identify: https://www.onename.io/ron_ohara\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.20 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJT0a9sAAoJEAla1VT1+xc2ONQH/0R09guSNNCxP36KziAjfcBc\nJEhxMpIlqTTYEvNXaBmuPy4BN+IZQ9izgrW/cvlEJJNMmc5/VIBk83WZltmDwcKl\noo4MIdmp6vz984GWToyyLcLSEDT60UE9Hhe+U9RyF5J9kwbN8Uy4ozUHhFVP/0EL\nq4O1V6ggPbHWgH4q8m8E9qWOlIFXCDgCjxpL8Ptxsk+UlBq2NWMiwTz6Tbc9KOB4\nhOffzXCZV+DkwjFZD2Rc4rHaxw1yLuYr7DzmzwZbhRQclv9tZt9hoVaAT+RQpE1k\nX7pi+zVzeMMng0bzUv8t/G+gq0gaelyV41MJQRparEXhnuYkgU7rAPKIQEG8qpc=\n=T5fw\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-07-25T01:41:19",
                "message_text_only": "Miners are free to set the block's timestamp to whatever they please,\nwithin a certain +/- time window.  Time might even go backwards a tiny\nbit from the last block to the next block.\n\n\nOn Thu, Jul 24, 2014 at 9:14 PM, Ron OHara <ron.ohara54 at gmail.com> wrote:\n>\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> I thought I should shortcut my research by asking a direct question here.\n>\n> As I understand it, the blockchain actually provides an extra piece of\n> reliable data that is not being exploited by applications.\n>\n> Which data?  The time.   In this case 'the time' as agreed by >50% of\n> the participants, where those participants have a strong financial\n> incentive to keep that 'time' fairly accurate. (+/- about 10 minutes)\n>\n> Is this a reasonable understanding of 'time'? ... aka timestamps on the\n> block\n>\n> Ok... 'time' on the blockchain could be 'gamed' ... but with great\n> difficulty. An application presented with a fake blockchain can use\n> quite a few heuristics to test the 'validity' of the block chain.\n> It can review the usual cryptographic proofs, and check that difficulty\n> is growing/declining only in a realistic manner up to the most recent\n> block. Even use some arbitrary test like difficulty > 10,000,000,000\n> ... on the presumption that any less means that the Bitcoin system has\n> failed massively from where it currently is and has become an unreliable\n> time source.\n>\n> Reliable 'time' has been impossible up until now - because you need to\n> trust the time source, and that can always be faked.  Using the\n> blockchain as an approximate time source gives you a world wide\n> consensus without direct trust of any player.\n>\n> So if this presumption is correct, then we can now build time capsule\n> applications that can not be tricked into exposing their contents too\n> early by running them in a virtual environment with the wrong system time.\n>\n> Is this right? or did miss I something fundamental?\n>\n> Ron\n>\n> - --\n> public identify: https://www.onename.io/ron_ohara\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v2.0.20 (GNU/Linux)\n> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n>\n> iQEcBAEBAgAGBQJT0a9sAAoJEAla1VT1+xc2ONQH/0R09guSNNCxP36KziAjfcBc\n> JEhxMpIlqTTYEvNXaBmuPy4BN+IZQ9izgrW/cvlEJJNMmc5/VIBk83WZltmDwcKl\n> oo4MIdmp6vz984GWToyyLcLSEDT60UE9Hhe+U9RyF5J9kwbN8Uy4ozUHhFVP/0EL\n> q4O1V6ggPbHWgH4q8m8E9qWOlIFXCDgCjxpL8Ptxsk+UlBq2NWMiwTz6Tbc9KOB4\n> hOffzXCZV+DkwjFZD2Rc4rHaxw1yLuYr7DzmzwZbhRQclv9tZt9hoVaAT+RQpE1k\n> X7pi+zVzeMMng0bzUv8t/G+gq0gaelyV41MJQRparEXhnuYkgU7rAPKIQEG8qpc=\n> =T5fw\n> -----END PGP SIGNATURE-----\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Aaron Voisine",
                "date": "2014-07-25T02:35:46",
                "message_text_only": "The upcoming release of breadwallet uses the height of the blockchain to\nenforce timed pin code lockouts for preventing an attacker from\nquickly making multiple pin guesses. This prevents them changing the\ndevices system time to get around the lockout period.\n\nAaron\n\nOn Thursday, July 24, 2014, Ron OHara <ron.ohara54 at gmail.com> wrote:\n\n>\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> I thought I should shortcut my research by asking a direct question here.\n>\n> As I understand it, the blockchain actually provides an extra piece of\n> reliable data that is not being exploited by applications.\n>\n> Which data?  The time.   In this case 'the time' as agreed by >50% of\n> the participants, where those participants have a strong financial\n> incentive to keep that 'time' fairly accurate. (+/- about 10 minutes)\n>\n> Is this a reasonable understanding of 'time'? ... aka timestamps on the\n> block\n>\n> Ok... 'time' on the blockchain could be 'gamed' ... but with great\n> difficulty. An application presented with a fake blockchain can use\n> quite a few heuristics to test the 'validity' of the block chain.\n> It can review the usual cryptographic proofs, and check that difficulty\n> is growing/declining only in a realistic manner up to the most recent\n> block. Even use some arbitrary test like difficulty > 10,000,000,000\n> ... on the presumption that any less means that the Bitcoin system has\n> failed massively from where it currently is and has become an unreliable\n> time source.\n>\n> Reliable 'time' has been impossible up until now - because you need to\n> trust the time source, and that can always be faked.  Using the\n> blockchain as an approximate time source gives you a world wide\n> consensus without direct trust of any player.\n>\n> So if this presumption is correct, then we can now build time capsule\n> applications that can not be tricked into exposing their contents too\n> early by running them in a virtual environment with the wrong system time.\n>\n> Is this right? or did miss I something fundamental?\n>\n> Ron\n>\n> - --\n> public identify: https://www.onename.io/ron_ohara\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v2.0.20 (GNU/Linux)\n> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n>\n> iQEcBAEBAgAGBQJT0a9sAAoJEAla1VT1+xc2ONQH/0R09guSNNCxP36KziAjfcBc\n> JEhxMpIlqTTYEvNXaBmuPy4BN+IZQ9izgrW/cvlEJJNMmc5/VIBk83WZltmDwcKl\n> oo4MIdmp6vz984GWToyyLcLSEDT60UE9Hhe+U9RyF5J9kwbN8Uy4ozUHhFVP/0EL\n> q4O1V6ggPbHWgH4q8m8E9qWOlIFXCDgCjxpL8Ptxsk+UlBq2NWMiwTz6Tbc9KOB4\n> hOffzXCZV+DkwjFZD2Rc4rHaxw1yLuYr7DzmzwZbhRQclv9tZt9hoVaAT+RQpE1k\n> X7pi+zVzeMMng0bzUv8t/G+gq0gaelyV41MJQRparEXhnuYkgU7rAPKIQEG8qpc=\n> =T5fw\n> -----END PGP SIGNATURE-----\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net <javascript:;>\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n-- \n\nAaron Voisine\nbreadwallet.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140724/aa8aca93/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-07-25T02:39:41",
                "message_text_only": "On Thu, Jul 24, 2014 at 7:35 PM, Aaron Voisine <voisine at gmail.com> wrote:\n> The upcoming release of breadwallet uses the height of the blockchain to\n> enforce timed pin code lockouts for preventing an attacker from quickly\n> making multiple pin guesses. This prevents them changing the devices system\n> time to get around the lockout period.\n\nIs breadwallet tamper resistant & zero on tamper hardware? otherwise\nthis sounds like security theater.... I attach a debugger to the\nprocess (or modify the program) and ignore the block sourced time."
            },
            {
                "author": "William Yager",
                "date": "2014-07-25T03:21:08",
                "message_text_only": "On Thu, Jul 24, 2014 at 10:39 PM, Gregory Maxwell <gmaxwell at gmail.com>\nwrote:\n\n>\n> Is breadwallet tamper resistant & zero on tamper hardware? otherwise\n> this sounds like security theater.... I attach a debugger to the\n> process (or modify the program) and ignore the block sourced time.\n>\n>\nIt's an iOS application. I would imagine it is substantially more difficult\nto attach to a process (which, at the very least, requires root, and\nperhaps other things on iOS) than to convince the device to change its\nsystem time.\n\nThat said, the security benefits might not be too substantial.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140724/b24595d2/attachment.html>"
            },
            {
                "author": "Aaron Voisine",
                "date": "2014-07-25T05:56:26",
                "message_text_only": "It's based on the block height, not the block's timestamp. If you have\naccess to the device and the phone itself is not pin locked, then you\ncan jailbreak it and get access to the wallet seed that way. A pin\nlocked device however is reasonably secure as the filesystem is\nhardware aes encrypted to a combination of pin+uuid. This was just an\neasy way to prevent multiple pin guesses by changing system time in\nsettings, so that isn't the weakest part of the security model.\n\nAaron Voisine\nbreadwallet.com\n\n\nOn Thu, Jul 24, 2014 at 8:21 PM, William Yager <will.yager at gmail.com> wrote:\n> On Thu, Jul 24, 2014 at 10:39 PM, Gregory Maxwell <gmaxwell at gmail.com>\n> wrote:\n>>\n>>\n>> Is breadwallet tamper resistant & zero on tamper hardware? otherwise\n>> this sounds like security theater.... I attach a debugger to the\n>> process (or modify the program) and ignore the block sourced time.\n>>\n>\n> It's an iOS application. I would imagine it is substantially more difficult\n> to attach to a process (which, at the very least, requires root, and perhaps\n> other things on iOS) than to convince the device to change its system time.\n>\n> That said, the security benefits might not be too substantial.\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-25T10:26:11",
                "message_text_only": "Given that the speed at which the block chain advances is kind of\nunpredictable, I'd think it might be better to just record the time to disk\nwhen a PIN attempt is made and if you observe time going backwards, refuse\nto allow more attempts until it's advanced past the previous attempt.\n\n\nOn Fri, Jul 25, 2014 at 7:56 AM, Aaron Voisine <voisine at gmail.com> wrote:\n\n> It's based on the block height, not the block's timestamp. If you have\n> access to the device and the phone itself is not pin locked, then you\n> can jailbreak it and get access to the wallet seed that way. A pin\n> locked device however is reasonably secure as the filesystem is\n> hardware aes encrypted to a combination of pin+uuid. This was just an\n> easy way to prevent multiple pin guesses by changing system time in\n> settings, so that isn't the weakest part of the security model.\n>\n> Aaron Voisine\n> breadwallet.com\n>\n>\n> On Thu, Jul 24, 2014 at 8:21 PM, William Yager <will.yager at gmail.com>\n> wrote:\n> > On Thu, Jul 24, 2014 at 10:39 PM, Gregory Maxwell <gmaxwell at gmail.com>\n> > wrote:\n> >>\n> >>\n> >> Is breadwallet tamper resistant & zero on tamper hardware? otherwise\n> >> this sounds like security theater.... I attach a debugger to the\n> >> process (or modify the program) and ignore the block sourced time.\n> >>\n> >\n> > It's an iOS application. I would imagine it is substantially more\n> difficult\n> > to attach to a process (which, at the very least, requires root, and\n> perhaps\n> > other things on iOS) than to convince the device to change its system\n> time.\n> >\n> > That said, the security benefits might not be too substantial.\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Want fast and easy access to all the code in your enterprise? Index and\n> > search up to 200,000 lines of code with a free copy of Black Duck\n> > Code Sight - the same software that powers the world's largest code\n> > search on Ohloh, the Black Duck Open Hub! Try it now.\n> > http://p.sf.net/sfu/bds\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140725/006358cc/attachment.html>"
            },
            {
                "author": "Aaron Voisine",
                "date": "2014-07-25T14:45:40",
                "message_text_only": "The problem is if someone moves system time forward between app launches.\nThe lockout period doesn't have to be all that precise, it just makes you\nwait for the next block, then 5, then 25, and so on. Using a well\nknown time server over https would also be a good option, but the wallet\napp already has the chain height anyway.\n\nOn Friday, July 25, 2014, Mike Hearn <mike at plan99.net> wrote:\n\n> Given that the speed at which the block chain advances is kind of\n> unpredictable, I'd think it might be better to just record the time to disk\n> when a PIN attempt is made and if you observe time going backwards, refuse\n> to allow more attempts until it's advanced past the previous attempt.\n>\n>\n> On Fri, Jul 25, 2014 at 7:56 AM, Aaron Voisine <voisine at gmail.com\n> <javascript:_e(%7B%7D,'cvml','voisine at gmail.com');>> wrote:\n>\n>> It's based on the block height, not the block's timestamp. If you have\n>> access to the device and the phone itself is not pin locked, then you\n>> can jailbreak it and get access to the wallet seed that way. A pin\n>> locked device however is reasonably secure as the filesystem is\n>> hardware aes encrypted to a combination of pin+uuid. This was just an\n>> easy way to prevent multiple pin guesses by changing system time in\n>> settings, so that isn't the weakest part of the security model.\n>>\n>> Aaron Voisine\n>> breadwallet.com\n>>\n>>\n>> On Thu, Jul 24, 2014 at 8:21 PM, William Yager <will.yager at gmail.com\n>> <javascript:_e(%7B%7D,'cvml','will.yager at gmail.com');>> wrote:\n>> > On Thu, Jul 24, 2014 at 10:39 PM, Gregory Maxwell <gmaxwell at gmail.com\n>> <javascript:_e(%7B%7D,'cvml','gmaxwell at gmail.com');>>\n>> > wrote:\n>> >>\n>> >>\n>> >> Is breadwallet tamper resistant & zero on tamper hardware? otherwise\n>> >> this sounds like security theater.... I attach a debugger to the\n>> >> process (or modify the program) and ignore the block sourced time.\n>> >>\n>> >\n>> > It's an iOS application. I would imagine it is substantially more\n>> difficult\n>> > to attach to a process (which, at the very least, requires root, and\n>> perhaps\n>> > other things on iOS) than to convince the device to change its system\n>> time.\n>> >\n>> > That said, the security benefits might not be too substantial.\n>> >\n>> >\n>> ------------------------------------------------------------------------------\n>> > Want fast and easy access to all the code in your enterprise? Index and\n>> > search up to 200,000 lines of code with a free copy of Black Duck\n>> > Code Sight - the same software that powers the world's largest code\n>> > search on Ohloh, the Black Duck Open Hub! Try it now.\n>> > http://p.sf.net/sfu/bds\n>> > _______________________________________________\n>> > Bitcoin-development mailing list\n>> > Bitcoin-development at lists.sourceforge.net\n>> <javascript:_e(%7B%7D,'cvml','Bitcoin-development at lists.sourceforge.net');>\n>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Want fast and easy access to all the code in your enterprise? Index and\n>> search up to 200,000 lines of code with a free copy of Black Duck\n>> Code Sight - the same software that powers the world's largest code\n>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>> http://p.sf.net/sfu/bds\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> <javascript:_e(%7B%7D,'cvml','Bitcoin-development at lists.sourceforge.net');>\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n\n-- \n\nAaron Voisine\nbreadwallet.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140725/bab41a50/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-25T16:03:26",
                "message_text_only": "Sorry, you're right. I'd have hoped a delay that doubles on failure each\ntime up to some max would be good enough, relying on the p2p network to\nunlock a PIN feels weird, but I can't really quantify why or what's wrong\nwith it so I guess it's just me :-)\n\n\nOn Fri, Jul 25, 2014 at 4:45 PM, Aaron Voisine <voisine at gmail.com> wrote:\n\n> The problem is if someone moves system time forward between app launches.\n> The lockout period doesn't have to be all that precise, it just makes you\n> wait for the next block, then 5, then 25, and so on. Using a well\n> known time server over https would also be a good option, but the wallet\n> app already has the chain height anyway.\n>\n>\n> On Friday, July 25, 2014, Mike Hearn <mike at plan99.net> wrote:\n>\n>> Given that the speed at which the block chain advances is kind of\n>> unpredictable, I'd think it might be better to just record the time to disk\n>> when a PIN attempt is made and if you observe time going backwards, refuse\n>> to allow more attempts until it's advanced past the previous attempt.\n>>\n>>\n>> On Fri, Jul 25, 2014 at 7:56 AM, Aaron Voisine <voisine at gmail.com> wrote:\n>>\n>>> It's based on the block height, not the block's timestamp. If you have\n>>> access to the device and the phone itself is not pin locked, then you\n>>> can jailbreak it and get access to the wallet seed that way. A pin\n>>> locked device however is reasonably secure as the filesystem is\n>>> hardware aes encrypted to a combination of pin+uuid. This was just an\n>>> easy way to prevent multiple pin guesses by changing system time in\n>>> settings, so that isn't the weakest part of the security model.\n>>>\n>>> Aaron Voisine\n>>> breadwallet.com\n>>>\n>>>\n>>> On Thu, Jul 24, 2014 at 8:21 PM, William Yager <will.yager at gmail.com>\n>>> wrote:\n>>> > On Thu, Jul 24, 2014 at 10:39 PM, Gregory Maxwell <gmaxwell at gmail.com>\n>>> > wrote:\n>>> >>\n>>> >>\n>>> >> Is breadwallet tamper resistant & zero on tamper hardware? otherwise\n>>> >> this sounds like security theater.... I attach a debugger to the\n>>> >> process (or modify the program) and ignore the block sourced time.\n>>> >>\n>>> >\n>>> > It's an iOS application. I would imagine it is substantially more\n>>> difficult\n>>> > to attach to a process (which, at the very least, requires root, and\n>>> perhaps\n>>> > other things on iOS) than to convince the device to change its system\n>>> time.\n>>> >\n>>> > That said, the security benefits might not be too substantial.\n>>> >\n>>> >\n>>> ------------------------------------------------------------------------------\n>>> > Want fast and easy access to all the code in your enterprise? Index and\n>>> > search up to 200,000 lines of code with a free copy of Black Duck\n>>> > Code Sight - the same software that powers the world's largest code\n>>> > search on Ohloh, the Black Duck Open Hub! Try it now.\n>>> > http://p.sf.net/sfu/bds\n>>> > _______________________________________________\n>>> > Bitcoin-development mailing list\n>>> > Bitcoin-development at lists.sourceforge.net\n>>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>> >\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Want fast and easy access to all the code in your enterprise? Index and\n>>> search up to 200,000 lines of code with a free copy of Black Duck\n>>> Code Sight - the same software that powers the world's largest code\n>>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>>> http://p.sf.net/sfu/bds\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>\n>>\n>\n> --\n>\n> Aaron Voisine\n> breadwallet.com\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140725/ef54b1e1/attachment.html>"
            },
            {
                "author": "Natanael",
                "date": "2014-07-25T16:22:46",
                "message_text_only": "Probably because the network isn't designed for interactive proofs. Most\ninteractive algoritms AFAICT requires that some machine holds a secret\nstate (or at least continuous and untampered state, but you still need to\nverify you're falling to the right machine), otherwise the machine can be\nmimicked and \"rewound\" to earlier states. Without a challenge-response that\ncan't be faked, you've got problems.\n\nThere's no trusted machines here that you can rely on. The certainty of\nhaving the right blockchain is a statistical one over longer periods of\ntime, not enough for a PIN you want verified right now. So you can always\nbe shown an old copy, and if your node isn't up to date yet then it can\nalso be shown fake chains further into the future.\n\nMaybe you could throw in some kind of Secure Multiparty Computation among\nthe miners to enable challenge-response, with state saved in the blockchain\n(so it can't be rolled back), but that would be fragile. How do you select\nwhat nodes may participate? How do you prevent the secret state from\nleaking? And performance would be absolutely horrible, and reliability is a\nhuge problem.\nDen 25 jul 2014 18:03 skrev \"Mike Hearn\" <mike at plan99.net>:\n\n> Sorry, you're right. I'd have hoped a delay that doubles on failure each\n> time up to some max would be good enough, relying on the p2p network to\n> unlock a PIN feels weird, but I can't really quantify why or what's wrong\n> with it so I guess it's just me :-)\n>\n>\n> On Fri, Jul 25, 2014 at 4:45 PM, Aaron Voisine <voisine at gmail.com> wrote:\n>\n>> The problem is if someone moves system time forward between app launches.\n>> The lockout period doesn't have to be all that precise, it just makes you\n>> wait for the next block, then 5, then 25, and so on. Using a well\n>> known time server over https would also be a good option, but the wallet\n>> app already has the chain height anyway.\n>>\n>>\n>> On Friday, July 25, 2014, Mike Hearn <mike at plan99.net> wrote:\n>>\n>>>  Given that the speed at which the block chain advances is kind of\n>>> unpredictable, I'd think it might be better to just record the time to disk\n>>> when a PIN attempt is made and if you observe time going backwards, refuse\n>>> to allow more attempts until it's advanced past the previous attempt.\n>>>\n>>>\n>>> On Fri, Jul 25, 2014 at 7:56 AM, Aaron Voisine <voisine at gmail.com>\n>>> wrote:\n>>>\n>>>> It's based on the block height, not the block's timestamp. If you have\n>>>> access to the device and the phone itself is not pin locked, then you\n>>>> can jailbreak it and get access to the wallet seed that way. A pin\n>>>> locked device however is reasonably secure as the filesystem is\n>>>> hardware aes encrypted to a combination of pin+uuid. This was just an\n>>>> easy way to prevent multiple pin guesses by changing system time in\n>>>> settings, so that isn't the weakest part of the security model.\n>>>>\n>>>> Aaron Voisine\n>>>> breadwallet.com\n>>>>\n>>>>\n>>>> On Thu, Jul 24, 2014 at 8:21 PM, William Yager <will.yager at gmail.com>\n>>>> wrote:\n>>>> > On Thu, Jul 24, 2014 at 10:39 PM, Gregory Maxwell <gmaxwell at gmail.com\n>>>> >\n>>>> > wrote:\n>>>> >>\n>>>> >>\n>>>> >> Is breadwallet tamper resistant & zero on tamper hardware? otherwise\n>>>> >> this sounds like security theater.... I attach a debugger to the\n>>>> >> process (or modify the program) and ignore the block sourced time.\n>>>> >>\n>>>> >\n>>>> > It's an iOS application. I would imagine it is substantially more\n>>>> difficult\n>>>> > to attach to a process (which, at the very least, requires root, and\n>>>> perhaps\n>>>> > other things on iOS) than to convince the device to change its system\n>>>> time.\n>>>> >\n>>>> > That said, the security benefits might not be too substantial.\n>>>> >\n>>>> >\n>>>> ------------------------------------------------------------------------------\n>>>> > Want fast and easy access to all the code in your enterprise? Index\n>>>> and\n>>>> > search up to 200,000 lines of code with a free copy of Black Duck\n>>>> > Code Sight - the same software that powers the world's largest code\n>>>> > search on Ohloh, the Black Duck Open Hub! Try it now.\n>>>> > http://p.sf.net/sfu/bds\n>>>> > _______________________________________________\n>>>> > Bitcoin-development mailing list\n>>>> > Bitcoin-development at lists.sourceforge.net\n>>>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>> >\n>>>>\n>>>>\n>>>> ------------------------------------------------------------------------------\n>>>> Want fast and easy access to all the code in your enterprise? Index and\n>>>> search up to 200,000 lines of code with a free copy of Black Duck\n>>>> Code Sight - the same software that powers the world's largest code\n>>>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>>>> http://p.sf.net/sfu/bds\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>\n>>>\n>>\n>> --\n>>\n>> Aaron Voisine\n>> breadwallet.com\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140725/73dd20cb/attachment.html>"
            },
            {
                "author": "Aaron Voisine",
                "date": "2014-07-25T18:14:41",
                "message_text_only": "Yes, if the wallet isn't up to date yet, it uses the highest estimated\nblock height from connected peers, but that could be gamed by\ncontrolling the network. The app has blockchain checkpoints in it\nthough, so you couldn't truncate the chain starting point below that.\nThe worst case is that you get a 4-5 extra guesses, but as I\nmentioned, it'd be easier to just jailbreak the phone if the phone\nitself isn't using a system wide pin lock. I just though it was a fun\nand convenient way to prevent the system time hack. The system pin is\nwhat protects your wallet in the event of physical theft, and the app\npin is just for when you lend your phone to a friend for a few\nminutes.\n\nAaron Voisine\nbreadwallet.com\n\n\nOn Fri, Jul 25, 2014 at 9:22 AM, Natanael <natanael.l at gmail.com> wrote:\n> Probably because the network isn't designed for interactive proofs. Most\n> interactive algoritms AFAICT requires that some machine holds a secret state\n> (or at least continuous and untampered state, but you still need to verify\n> you're falling to the right machine), otherwise the machine can be mimicked\n> and \"rewound\" to earlier states. Without a challenge-response that can't be\n> faked, you've got problems.\n>\n> There's no trusted machines here that you can rely on. The certainty of\n> having the right blockchain is a statistical one over longer periods of\n> time, not enough for a PIN you want verified right now. So you can always be\n> shown an old copy, and if your node isn't up to date yet then it can also be\n> shown fake chains further into the future.\n>\n> Maybe you could throw in some kind of Secure Multiparty Computation among\n> the miners to enable challenge-response, with state saved in the blockchain\n> (so it can't be rolled back), but that would be fragile. How do you select\n> what nodes may participate? How do you prevent the secret state from\n> leaking? And performance would be absolutely horrible, and reliability is a\n> huge problem.\n>\n> Den 25 jul 2014 18:03 skrev \"Mike Hearn\" <mike at plan99.net>:\n>\n>> Sorry, you're right. I'd have hoped a delay that doubles on failure each\n>> time up to some max would be good enough, relying on the p2p network to\n>> unlock a PIN feels weird, but I can't really quantify why or what's wrong\n>> with it so I guess it's just me :-)\n>>\n>>\n>> On Fri, Jul 25, 2014 at 4:45 PM, Aaron Voisine <voisine at gmail.com> wrote:\n>>>\n>>> The problem is if someone moves system time forward between app launches.\n>>> The lockout period doesn't have to be all that precise, it just makes you\n>>> wait for the next block, then 5, then 25, and so on. Using a well known time\n>>> server over https would also be a good option, but the wallet app already\n>>> has the chain height anyway.\n>>>\n>>>\n>>> On Friday, July 25, 2014, Mike Hearn <mike at plan99.net> wrote:\n>>>>\n>>>> Given that the speed at which the block chain advances is kind of\n>>>> unpredictable, I'd think it might be better to just record the time to disk\n>>>> when a PIN attempt is made and if you observe time going backwards, refuse\n>>>> to allow more attempts until it's advanced past the previous attempt.\n>>>>\n>>>>\n>>>> On Fri, Jul 25, 2014 at 7:56 AM, Aaron Voisine <voisine at gmail.com>\n>>>> wrote:\n>>>>>\n>>>>> It's based on the block height, not the block's timestamp. If you have\n>>>>> access to the device and the phone itself is not pin locked, then you\n>>>>> can jailbreak it and get access to the wallet seed that way. A pin\n>>>>> locked device however is reasonably secure as the filesystem is\n>>>>> hardware aes encrypted to a combination of pin+uuid. This was just an\n>>>>> easy way to prevent multiple pin guesses by changing system time in\n>>>>> settings, so that isn't the weakest part of the security model.\n>>>>>\n>>>>> Aaron Voisine\n>>>>> breadwallet.com\n>>>>>\n>>>>>\n>>>>> On Thu, Jul 24, 2014 at 8:21 PM, William Yager <will.yager at gmail.com>\n>>>>> wrote:\n>>>>> > On Thu, Jul 24, 2014 at 10:39 PM, Gregory Maxwell\n>>>>> > <gmaxwell at gmail.com>\n>>>>> > wrote:\n>>>>> >>\n>>>>> >>\n>>>>> >> Is breadwallet tamper resistant & zero on tamper hardware? otherwise\n>>>>> >> this sounds like security theater.... I attach a debugger to the\n>>>>> >> process (or modify the program) and ignore the block sourced time.\n>>>>> >>\n>>>>> >\n>>>>> > It's an iOS application. I would imagine it is substantially more\n>>>>> > difficult\n>>>>> > to attach to a process (which, at the very least, requires root, and\n>>>>> > perhaps\n>>>>> > other things on iOS) than to convince the device to change its system\n>>>>> > time.\n>>>>> >\n>>>>> > That said, the security benefits might not be too substantial.\n>>>>> >\n>>>>> >\n>>>>> > ------------------------------------------------------------------------------\n>>>>> > Want fast and easy access to all the code in your enterprise? Index\n>>>>> > and\n>>>>> > search up to 200,000 lines of code with a free copy of Black Duck\n>>>>> > Code Sight - the same software that powers the world's largest code\n>>>>> > search on Ohloh, the Black Duck Open Hub! Try it now.\n>>>>> > http://p.sf.net/sfu/bds\n>>>>> > _______________________________________________\n>>>>> > Bitcoin-development mailing list\n>>>>> > Bitcoin-development at lists.sourceforge.net\n>>>>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>> >\n>>>>>\n>>>>>\n>>>>> ------------------------------------------------------------------------------\n>>>>> Want fast and easy access to all the code in your enterprise? Index and\n>>>>> search up to 200,000 lines of code with a free copy of Black Duck\n>>>>> Code Sight - the same software that powers the world's largest code\n>>>>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>>>>> http://p.sf.net/sfu/bds\n>>>>> _______________________________________________\n>>>>> Bitcoin-development mailing list\n>>>>> Bitcoin-development at lists.sourceforge.net\n>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>>\n>>>\n>>>\n>>> --\n>>>\n>>> Aaron Voisine\n>>> breadwallet.com\n>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Want fast and easy access to all the code in your enterprise? Index and\n>> search up to 200,000 lines of code with a free copy of Black Duck\n>> Code Sight - the same software that powers the world's largest code\n>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>> http://p.sf.net/sfu/bds\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-25T10:30:11",
                "message_text_only": ">\n> Ok... 'time' on the blockchain could be 'gamed' ... but with great\n> difficulty.\n\n\nUnfortunately not: miners have in the past routinely gamed the timestamp in\norder to use it as an extra nonce and squeeze some more gigahashes out of\ntheir hardware/pool.\n\nAlso remember that currently the chain could be dominated by a coalition of\njust two pools.\n\n\n> An application presented with a fake blockchain can use\n> quite a few heuristics to test the 'validity' of the block chain.\n>\n\nThe app cannot tell if it was given a truncated chain. You could keep such\nan app stuck in the past forever. This is often a problem.\n\n\n> Reliable 'time' has been impossible up until now - because you need to\n> trust the time source, and that can always be faked.  Using the\n> blockchain as an approximate time source gives you a world wide\n> consensus without direct trust of any player.\n>\n\nMuch though I hate to be a party pooper, you could currently get\nBitcoin-level trusted time by just polling at least two or three\nindependent servers e.g. google.com, baidu.cn, yandex.ru    (they all serve\ntime via HTTPS headers).\n\nIf we crack the mining decentralisation problem then this argument becomes\na lot stronger, but for now ......\n\n\n> So if this presumption is correct, then we can now build time capsule\n> applications that can not be tricked into exposing their contents too\n> early by running them in a virtual environment with the wrong system time.\n\n\nIf you have a tamper resistant execution environment (TXT, SGX, Flicker\netc) then yes. However trusted execution environments sometimes have tamper\nresistant clocks as well for exactly this reason. So whether this technique\nmakes sense depends a lot on the details of your configuration, I think.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140725/dc127929/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-07-27T22:22:52",
                "message_text_only": "On Fri, Jul 25, 2014 at 12:30:11PM +0200, Mike Hearn wrote:\n> >\n> > Ok... 'time' on the blockchain could be 'gamed' ... but with great\n> > difficulty.\n> \n> \n> Unfortunately not: miners have in the past routinely gamed the timestamp in\n> order to use it as an extra nonce and squeeze some more gigahashes out of\n> their hardware/pool.\n\nThat's correct, but irrelevant for this application. The \"gaming\"\npossible is only a few bits; gaming more bits than that either makes\nblocks invalid due to being >2hr in the future, or < the median time in\nthe past. In addition doing the latter causes difficulty to rise.\n\nAlso see: \"Re: [Bitcoin-development] 32 vs 64-bit timestamp fields\" -\n          Peter Todd - 08 May 2013\nhttp://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg02144.html\n\n> > An application presented with a fake blockchain can use\n> > quite a few heuristics to test the 'validity' of the block chain.\n> >\n> \n> The app cannot tell if it was given a truncated chain. You could keep such\n> an app stuck in the past forever. This is often a problem.\n\nOnly if the app is trying to use the blockchain non-interactively. The\nright way to use the blockchain for determining the current time is to\ncreate a nonce, timestamp it, wait for a confirmation, and get the\nmerkle path to the block header. This proves the attacker has spent at\nleast whatever resources it took to create a block considered valid by\nyour application. (you'll probably want to have a fairly high\nmin-difficulty)\n\n> > Reliable 'time' has been impossible up until now - because you need to\n> > trust the time source, and that can always be faked.  Using the\n> > blockchain as an approximate time source gives you a world wide\n> > consensus without direct trust of any player.\n> >\n> \n> Much though I hate to be a party pooper, you could currently get\n> Bitcoin-level trusted time by just polling at least two or three\n> independent servers e.g. google.com, baidu.cn, yandex.ru    (they all serve\n> time via HTTPS headers).\n>\n> If we crack the mining decentralisation problem then this argument becomes\n> a lot stronger, but for now ......\n\nSee https://github.com/ioerror/tlsdate\n\nReminds me: anyone know if tlsdate is able to produce timestamp proofs\nverifiable by third-parties? If it could in conjunction with the\nblockchain as a random beacon you could at least show dishonesty by\nshowing that google.com/etc. signed a HTTPS header with a time prior to\nwhen some block was created. Right now unlike the blockchain these\nindependent servers can easily get away with timestamp fraud,\nparticularly if they manage to target your specific application. (use\nTor!)\n\nEqually, the blockchain has the advantage that it's easy to show that\ninvalid blocks are being created for the purpose of creating fake\ntimestamps; it'd be reasonable for the P2P network to relay any block\nheader seen with a difficulty > some anti-DoS threshold. Gavin already\ndid something similar with relaying invalid blocks in pull-req #3580.\nIt had the flaw of making network splits worse, but in conjunction with\na separate \"invalid-block\" inv type I think the issue goes away.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000201d505432d708aa2edb656f6fe34d686b37d4747e5ff389\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140727/bec72e0b/attachment.sig>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-07-28T17:33:30",
                "message_text_only": "On Fri, Jul 25, 2014 at 12:30:11PM +0200, Mike Hearn wrote:\n> >\n> > Ok... 'time' on the blockchain could be 'gamed' ... but with great\n> > difficulty.\n> \n> \n> Unfortunately not: miners have in the past routinely gamed the timestamp in\n> order to use it as an extra nonce and squeeze some more gigahashes out of\n> their hardware/pool.\n>\n>\n> Also remember that currently the chain could be dominated by a coalition of\n> just two pools.\n\nThere's a solution to both of these problems..\n\nhttps://github.com/CatcoinOfficial/CatcoinRelease/commit/0d03a5b3d8bb7bc3c935e7196c5d807da997cf9c\n\nIf you want a really reliable time source, use at least three block chains and\nmake sure they all agree within an hour.\n \n> \n> > An application presented with a fake blockchain can use\n> > quite a few heuristics to test the 'validity' of the block chain.\n> >\n> \n> The app cannot tell if it was given a truncated chain. You could keep such\n> an app stuck in the past forever. This is often a problem.\n> \n> \n> > Reliable 'time' has been impossible up until now - because you need to\n> > trust the time source, and that can always be faked.  Using the\n> > blockchain as an approximate time source gives you a world wide\n> > consensus without direct trust of any player.\n> >\n> \n> Much though I hate to be a party pooper, you could currently get\n> Bitcoin-level trusted time by just polling at least two or three\n> independent servers e.g. google.com, baidu.cn, yandex.ru    (they all serve\n> time via HTTPS headers).\n\nWell, being as how I don't trust Bitcoin anyway because it includes SSL, yes,\nyou could get 'bitcoin-level' trust.\n\n> If we crack the mining decentralisation problem then this argument becomes\n> a lot stronger, but for now ......\n\nBut if you actually want something secure, you look at the altcoin space\nwhich solved the mining decentralization problem when Litecoin came out, \nand this also solves the having to trust a single source code base. There\nis lots of code diversity out there in altcoins, and what appears to me to\nbe a really strong cryptographically sound time source, but only if you use\nmultiple diverse sources.\n\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            }
        ],
        "thread_summary": {
            "title": "Time",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Ron OHara",
                "Troy Benjegerdes",
                "Natanael",
                "William Yager",
                "Mike Hearn",
                "Peter Todd",
                "Gregory Maxwell",
                "Aaron Voisine"
            ],
            "messages_count": 14,
            "total_messages_chars_count": 43144
        }
    },
    {
        "title": "[Bitcoin-development] \"On behalf of\" BIP 70 extension proposal",
        "thread_messages": [
            {
                "author": "Mark van Cuijk",
                "date": "2014-07-27T06:55:38",
                "message_text_only": "When I asked a non-tech friend to do a BIP 70 payment using our wallet as a first round of user experience testing, he made the remark the he wanted to do a payment to a merchant, but instead our software shows a payment to \u201cBitPay, Inc.\u201d\n\nThis can be problematic for a couple of reasons:\n- As a user you don\u2019t need to know and trust individual payment processors. As long as you can identify and authenticate the merchant, you should be able to rely on the merchant\u2019s choice for a payment processor.\n- An attacker can become a client of a payment processor, use it to create a PaymentRequest message and send this message to a victim as part of a MITM attack; the victim now thinks he is paying a merchant through the payment processor, but is actually paying the attacker through the payment processor.\n\nI have a proposal that can be transformed into a BIP or into an extension of BIP 70 and adds a way to include merchant identity in the PaymentRequest message and I\u2019d like to see a discussion on this topic.\n\nAt this moment, the PaymentRequest message contains a pki_data field with a certificate chain to authenticate the entity that generates the message, which in the above case is the payment processor.\n\nI\u2019m proposing to extends the PaymentRequest message with three more fields:\n- payee_pki_type\n- payee_pki_data\n- payee_mandate\n\nThe payee_pki_type and payee_pki_data fields can be of the same format as the pki_type and pki_data fields, except that they authenticate the identity of the merchant, instead of the identity of the payment processor. The payee_mandate fields contains a claim by the merchant, signed using his own private key, that he grants the payment processor the right to collect the payment on his behalf.\n\nThe solution is backwards compatible, since existing wallets can ignore these fields. They will not show the identity of the merchant, but keep showing the identity of the payment processor, they are still able to verify the signature in the PaymentRequest message and therefore can complete the payment process.\n\nA wallet that understands this extension, needs to check the validity of both certificate chains when present and also the validity of the mandate. If all is fine, it can now show the identity information from the merchant certificate instead of (or besides) the identity of the payment processor and allow an end user to correctly identify the merchant.\n\nA payment processor supporting this extension may offer it as an optional service to clients. A client that wishes to use this extension needs to obtain his own certificate from a CA and use it to sign a mandate. One potential obstacle is that this process probably needs to be repeated both when the certificate of the merchant or the certificate of the payment processor expires, but we may be able to address that when defining the format of the mandate.\n\n/Mark"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-27T19:31:13",
                "message_text_only": "Hi Mark,\n\nThis is very similar to a proposal I made some time ago:\n\n\nhttps://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04053.html\n\nI think the outlines of a design are clear - my proposal and yours don't I\nthink differ substantially. Someone needs to make it happen though.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140727/b20a31dc/attachment.html>"
            },
            {
                "author": "Mark van Cuijk",
                "date": "2014-07-28T09:01:06",
                "message_text_only": "Good to see that it has been discussed, but I see the idea has been postponed. I agree our proposals don\u2019t differ substantially. Besides naming, I think the differences are the algorithms that are used for signing the extended certificate / mandate by the merchant and the way backwards compatibility is handled.\n\nAlso taking into consideration the replies on your proposal, I think the following decisions are most important to be made when we make a step back:\n\nWhat party/system do we want to rely on to verify the identity of the merchant? Options I\u2019ve seen:\n- X.509  CAs\n- Payment Processors (PP)\n- PGP/Bitcoin-based\n\nWhich \u201cPKI\" do we want to use to identify the merchant (related to the previous question)?\n- X.509 certificate\n- Merchant identifier\n- Twitter handle\n\nWhich \u201cPKI\u201d do we want to use to authenticate the PP?\n- X.509 certificate\n- Extended certificate\n\nMy personal opinion:\n\nI\u2019d prefer to stick to the X.509 system for identification of the merchant, even though the system is not perfect. In the case of a webshop transaction, a customer probably already relies on the X.509 system to authenticate the identity of the merchant during the shopping session (HTTPS) in his browser when he transmits his personal data like his address. I\u2019d prefer not to add a competing identification system a customer also needs to rely on, unless that system brings objective improvements and can also be used in the HTTPS session.\n\nI do like the idea coined by Mike that a PP can issue non-SSL certificates for the purpose of merchant identification, as long as a customer is free to determine whether he trusts the PP for this purpose.\n\nRegarding the choice of how to authenticate the PP, I\u2019m a bit undetermined. Disregarding backward compatibility, I think the extended certificate system proposed by Mike is cleaner. However, I don\u2019t like the concept of requiring two separate signatures for old and new clients. Taking backward compatibility in mind, I tend to prefer my proposal.\n\n/Mark\n\nOn 27 Jul 2014, at 21:31 , Mike Hearn <mike at plan99.net> wrote:\n\n> Hi Mark,\n> \n> This is very similar to a proposal I made some time ago:\n> \n>    https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04053.html\n> \n> I think the outlines of a design are clear - my proposal and yours don't I think differ substantially. Someone needs to make it happen though.\n> \n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140728/d55f07f6/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-28T12:46:38",
                "message_text_only": "On Mon, Jul 28, 2014 at 11:01 AM, Mark van Cuijk <mark at coinqy.com> wrote:\n\n> Good to see that it has been discussed, but I see the idea has been\n> postponed.\n>\n\nI'm not sure postponed is the right word. It wasn't in v1, but many useful\nthings weren't. It's more like, a bunch of people have to do work to\nupgrade this and at the moment they're all busy with other things.\n\n\n> I do like the idea coined by Mike that a PP can issue non-SSL certificates\n> for the purpose of merchant identification, as long as a customer is free\n> to determine whether he trusts the PP for this purpose.\n>\n\nI don't think I proposed this exactly? It's the other way around - a\nmerchant issues an extension cert to allow the PP to act on their behalf.\n\n\n> Regarding the choice of how to authenticate the PP, I\u2019m a bit\n> undetermined. Disregarding backward compatibility, I think the extended\n> certificate system proposed by Mike is cleaner. However, I don\u2019t like the\n> concept of requiring two separate signatures for old and new clients.\n> Taking backward compatibility in mind, I tend to prefer my proposal.\n>\n\nI'm not sure I understand. Your proposal also has two signatures. Indeed it\nmust because delegation of authority requires a signature, but old clients\nwon't understand it.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140728/b00e8a15/attachment.html>"
            },
            {
                "author": "Mark van Cuijk",
                "date": "2014-07-28T13:06:26",
                "message_text_only": "On 28 Jul 2014, at 14:46 , Mike Hearn <mike at plan99.net> wrote:\n\n> I do like the idea coined by Mike that a PP can issue non-SSL certificates for the purpose of merchant identification, as long as a customer is free to determine whether he trusts the PP for this purpose.\n> \n> I don't think I proposed this exactly? It's the other way around - a merchant issues an extension cert to allow the PP to act on their behalf.\n\nI referred to your idea in https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04076.html which is indeed not the proposal itself.\n\n> Regarding the choice of how to authenticate the PP, I\u2019m a bit undetermined. Disregarding backward compatibility, I think the extended certificate system proposed by Mike is cleaner. However, I don\u2019t like the concept of requiring two separate signatures for old and new clients. Taking backward compatibility in mind, I tend to prefer my proposal.\n> \n> I'm not sure I understand. Your proposal also has two signatures. Indeed it must because delegation of authority requires a signature, but old clients won't understand it.\n\nI\u2019ll rephrase what I intended to say. In your proposal two signatures need to be computed over the payment request data, one with the key related to the X.509 certificate (for backwards compatibility) and one with the ECDSA public key. On my proposal only one signature needs to be computed over the payment request data using the former key, the same way it happens now.\n\nIndeed there is another signature, which is to authenticate the payment delegation. If you take it into account in the signature count, then your proposal has three signatures.\n\n/Mark\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140728/c9a8b502/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-28T13:32:54",
                "message_text_only": ">\n> I referred to your idea in\n> https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04076.html\n> <https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04076.html> which\n> is indeed not the proposal itself.\n>\n\nRight, gotcha. Had forgotten about that.\n\nIndeed there is another signature, which is to authenticate the payment\n> delegation. If you take it into account in the signature count, then your\n> proposal has three signatures.\n>\n\nYes, I see now, you are right. A mandate type system is probably simpler\nindeed.\n\nSo what now? To be honest my next priority with BIP70 was to formalise the\nextensions process, I've been dragging my feet over that because I'm\nworking on other things. And then after that to knock some heads together\nover at BitPay/Coinbase and get them to put useful text in the memo field\ninstead of random numbers. Baby steps ....\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140728/dbcdf1d6/attachment.html>"
            },
            {
                "author": "Mark van Cuijk",
                "date": "2014-07-30T07:54:40",
                "message_text_only": "On 28 Jul 2014, at 15:32 , Mike Hearn <mike at plan99.net> wrote:\n\n> So what now? To be honest my next priority with BIP70 was to formalise the extensions process, I've been dragging my feet over that because I'm working on other things. And then after that to knock some heads together over at BitPay/Coinbase and get them to put useful text in the memo field instead of random numbers. Baby steps ....\n\nI can probably pick up writing the proposal.\n\nHowever, I\u2019m not sure what process to follow. Should I format the proposal as a new BIP or should it become part of BIP.70? How does the extensions process you\u2019re working on going to describe the process?"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-30T11:34:59",
                "message_text_only": "That would definitely be a new BIP.\n\nBut firstly it'd make sense to implement it and make sure that the payment\nprocessors intend to use it. Like I said, I wasn't very successful so far\nin getting them to make useful memo fields. I'm hoping that once wallets\nstart actually recording and displaying the memo in their transactions list\nthat will change.\n\n\nOn Wed, Jul 30, 2014 at 9:54 AM, Mark van Cuijk <mark at coinqy.com> wrote:\n\n> On 28 Jul 2014, at 15:32 , Mike Hearn <mike at plan99.net> wrote:\n>\n> > So what now? To be honest my next priority with BIP70 was to formalise\n> the extensions process, I've been dragging my feet over that because I'm\n> working on other things. And then after that to knock some heads together\n> over at BitPay/Coinbase and get them to put useful text in the memo field\n> instead of random numbers. Baby steps ....\n>\n> I can probably pick up writing the proposal.\n>\n> However, I\u2019m not sure what process to follow. Should I format the proposal\n> as a new BIP or should it become part of BIP.70? How does the extensions\n> process you\u2019re working on going to describe the process?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140730/82417c8e/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "\"On behalf of\" BIP 70 extension proposal",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Mark van Cuijk"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 12244
        }
    },
    {
        "title": "[Bitcoin-development] Abnormally Large Tor node accepting only Bitcoin traffic",
        "thread_messages": [
            {
                "author": "Jeremy",
                "date": "2014-07-28T02:12:11",
                "message_text_only": "Hey,\n\nThere is a potential network exploit going on. In the last three days, a\nnode (unnamed) came online and is now processing the most traffic out of\nany tor node -- and it is mostly plaintext Bitcoin traffic.\n\nhttp://torstatus.blutmagie.de/router_detail.php?FP=0d6d2caafbb32ba85ee5162395f610ae42930124\n\nAlex Stamos (cc'ed) and I have been discussing on twitter what this could\nmean, wanted to raise it to the attention of this group for discussion.\n\nWhat we know so far:\n\n- Only port 8333 is open\n- The node has been up for 3 days, and is doing a lot of bandwidth, mostly\nplaintext Bitcoin traffic\n- This is probably pretty expensive to run? Alex suggests that the most\nexpensive server at the company hosting is 299\u20ac/mo with 50TB of traffic\n\n\n-- \nJeremy Rubin\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140727/c9e8dc48/attachment.html>"
            },
            {
                "author": "Jeremy",
                "date": "2014-07-28T02:17:19",
                "message_text_only": "Credit to Anatole Shaw for discovering.\n\n\nOn Sun, Jul 27, 2014 at 10:12 PM, Jeremy <jlrubin at mit.edu> wrote:\n\n> Hey,\n>\n> There is a potential network exploit going on. In the last three days, a\n> node (unnamed) came online and is now processing the most traffic out of\n> any tor node -- and it is mostly plaintext Bitcoin traffic.\n>\n>\n> http://torstatus.blutmagie.de/router_detail.php?FP=0d6d2caafbb32ba85ee5162395f610ae42930124\n>\n> Alex Stamos (cc'ed) and I have been discussing on twitter what this could\n> mean, wanted to raise it to the attention of this group for discussion.\n>\n> What we know so far:\n>\n> - Only port 8333 is open\n> - The node has been up for 3 days, and is doing a lot of bandwidth, mostly\n> plaintext Bitcoin traffic\n> - This is probably pretty expensive to run? Alex suggests that the most\n> expensive server at the company hosting is 299\u20ac/mo with 50TB of traffic\n>\n>\n> --\n> Jeremy Rubin\n>\n\n\n\n-- \nJeremy Rubin\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140727/165f6218/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-07-28T02:29:52",
                "message_text_only": "On Sun, Jul 27, 2014 at 7:12 PM, Jeremy <jlrubin at mit.edu> wrote:\n> Hey,\n>\n> There is a potential network exploit going on. In the last three days, a\n> node (unnamed) came online and is now processing the most traffic out of any\n> tor node -- and it is mostly plaintext Bitcoin traffic.\n>\n> http://torstatus.blutmagie.de/router_detail.php?FP=0d6d2caafbb32ba85ee5162395f610ae42930124\n>\n> Alex Stamos (cc'ed) and I have been discussing on twitter what this could\n> mean, wanted to raise it to the attention of this group for discussion.\n>\n> What we know so far:\n>\n> - Only port 8333 is open\n> - The node has been up for 3 days, and is doing a lot of bandwidth, mostly\n> plaintext Bitcoin traffic\n\nHow do you know what traffic it's actually doing.\n\n> - This is probably pretty expensive to run? Alex suggests that the most\n> expensive server at the company hosting is 299\u20ac/mo with 50TB of traffic\n\nI'm confused as to how its doing anything at all, as it doesn't have\nthe exit flag. (IIRC, Tor directories won't give you the exit flag\nunless you exit 80/443 to a pretty substantial chunk of IPv4 space).\nBecause of this no normal tor node should be selecting it as an exit.\n\nCould this just be lying about its traffic levels?"
            },
            {
                "author": "Peter Todd",
                "date": "2014-07-28T02:40:30",
                "message_text_only": "On Sun, Jul 27, 2014 at 10:12:11PM -0400, Jeremy wrote:\n> Hey,\n> \n> There is a potential network exploit going on. In the last three days, a\n> node (unnamed) came online and is now processing the most traffic out of\n> any tor node -- and it is mostly plaintext Bitcoin traffic.\n> \n> http://torstatus.blutmagie.de/router_detail.php?FP=0d6d2caafbb32ba85ee5162395f610ae42930124\n> \n> Alex Stamos (cc'ed) and I have been discussing on twitter what this could\n> mean, wanted to raise it to the attention of this group for discussion.\n> \n> What we know so far:\n> \n> - Only port 8333 is open\n> - The node has been up for 3 days, and is doing a lot of bandwidth, mostly\n> plaintext Bitcoin traffic\n> - This is probably pretty expensive to run? Alex suggests that the most\n> expensive server at the company hosting is 299\u20ac/mo with 50TB of traffic\n\nBoring explanation: some mining pool wants to get a lower orphan rate by\nconnecting to the whole network simultaneously and has cleverly setup\ntheir node as a Tor exit node to get some plausible deniability.\n\nOf course, reducing orphan rates is indistinguishable from a sybil\nattack; in general setting up such a node can be plausible deniability\ncover for any type of attack. One possibility would be to sybil attack\nthe network to do logging; another would be DoS attacks. For the latter\nwe're pretty vulnerable to the Bloom IO attack(1). The former attack is\npossible too, though I'd expect an attacker to want to do it in a less\nobvious way and run more than one node. Also running one big Tor node is\nless than ideal as it won't accept incoming connections, which lets you\nattack SPV clients. Finally note how you can plausibly conduct the\nattack directly from the node itself without bothering to actually use\nthe Tor network.\n\nAnyway, just goes to show that we need to implement better incoming\nconnection limiting. gmaxwell has a good scheme with interactive\nproof-of-memory - where's your latest writeup?\n\n1) https://github.com/petertodd/bloom-io-attack\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000201d505432d708aa2edb656f6fe34d686b37d4747e5ff389\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140727/95df7e88/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-07-28T02:45:59",
                "message_text_only": "On Sun, Jul 27, 2014 at 7:40 PM, Peter Todd <pete at petertodd.org> wrote:\n> Anyway, just goes to show that we need to implement better incoming\n> connection limiting. gmaxwell has a good scheme with interactive\n> proof-of-memory - where's your latest writeup?\n\nOr its a complete snipe hunt, I'm unable to find any nodes with it\nconnected to them. Does anyone here have any?\n\nLast discussion on the measures for anti-global-resource-consumption\nwas at https://bitcointalk.org/index.php?topic=310323.0  but it hasn't\nseemed to be a huge issue such that adding more protocol surface area\nwas justified."
            },
            {
                "author": "Michael Wozniak",
                "date": "2014-07-28T02:49:11",
                "message_text_only": "It\u2019s in my logs:\n\n2014-07-28 02:00:24 receive version message: /Satoshi:0.9.2/: version 70002, blocks=302684, us=******:8333, them=0.0.0.0:0, peer=5.9.93.101:33928\n\n\nOn Jul 27, 2014, at 10:45 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Sun, Jul 27, 2014 at 7:40 PM, Peter Todd <pete at petertodd.org> wrote:\n>> Anyway, just goes to show that we need to implement better incoming\n>> connection limiting. gmaxwell has a good scheme with interactive\n>> proof-of-memory - where's your latest writeup?\n> \n> Or its a complete snipe hunt, I'm unable to find any nodes with it\n> connected to them. Does anyone here have any?\n> \n> Last discussion on the measures for anti-global-resource-consumption\n> was at https://bitcointalk.org/index.php?topic=310323.0  but it hasn't\n> seemed to be a huge issue such that adding more protocol surface area\n> was justified.\n> \n> ------------------------------------------------------------------------------\n> Infragistics Professional\n> Build stunning WinForms apps today!\n> Reboot your WinForms applications with our WinForms controls. \n> Build a bridge from your legacy apps to the future.\n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "mbde at bitwatch.co",
                "date": "2014-07-28T02:54:23",
                "message_text_only": "These website list Tor nodes by bandwidth:\n\nhttp://torstatus.blutmagie.de/index.php\nhttps://torstatus.rueckgr.at/index.php?SR=Bandwidth&SO=Desc\n\nAnd the details reveal it's a port 8333 only exit node:\n\nhttp://torstatus.blutmagie.de/router_detail.php?FP=0d6d2caafbb32ba85ee5162395f610ae42930124\n\nblockchain.info has some records about the related IP going back to the\nend of this May:\n\nhttps://blockchain.info/ip-address/5.9.93.101?offset=300\n\n-------- Original Message  --------\nSubject: Re: [Bitcoin-development] Abnormally Large Tor node accepting\nonly Bitcoin traffic\nFrom: Michael Wozniak <mw at osfda.org>\nTo: Gregory Maxwell <gmaxwell at gmail.com>\nCc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>, alex at stamos.org\nDate: Sun, 27 Jul 2014 22:49:11 -0400\n\n> It\u2019s in my logs:\n> \n> 2014-07-28 02:00:24 receive version message: /Satoshi:0.9.2/: version 70002, blocks=302684, us=******:8333, them=0.0.0.0:0, peer=5.9.93.101:33928\n> \n> \n> On Jul 27, 2014, at 10:45 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> \n>> On Sun, Jul 27, 2014 at 7:40 PM, Peter Todd <pete at petertodd.org> wrote:\n>>> Anyway, just goes to show that we need to implement better incoming\n>>> connection limiting. gmaxwell has a good scheme with interactive\n>>> proof-of-memory - where's your latest writeup?\n>>\n>> Or its a complete snipe hunt, I'm unable to find any nodes with it\n>> connected to them. Does anyone here have any?\n>>\n>> Last discussion on the measures for anti-global-resource-consumption\n>> was at https://bitcointalk.org/index.php?topic=310323.0  but it hasn't\n>> seemed to be a huge issue such that adding more protocol surface area\n>> was justified.\n>>\n>> ------------------------------------------------------------------------------\n>> Infragistics Professional\n>> Build stunning WinForms apps today!\n>> Reboot your WinForms applications with our WinForms controls. \n>> Build a bridge from your legacy apps to the future.\n>> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> ------------------------------------------------------------------------------\n> Infragistics Professional\n> Build stunning WinForms apps today!\n> Reboot your WinForms applications with our WinForms controls. \n> Build a bridge from your legacy apps to the future.\n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-07-28T03:44:35",
                "message_text_only": "On Sun, Jul 27, 2014 at 7:54 PM, mbde at bitwatch.co <mbde at bitwatch.co> wrote:\n> These website list Tor nodes by bandwidth:\n>\n> http://torstatus.blutmagie.de/index.php\n> https://torstatus.rueckgr.at/index.php?SR=Bandwidth&SO=Desc\n>\n> And the details reveal it's a port 8333 only exit node:\n> http://torstatus.blutmagie.de/router_detail.php?FP=0d6d2caafbb32ba85ee5162395f610ae42930124\n\nAs I pointed out above, \u2014 it isn't really.  Without the exit flag, I\nbelieve no tor node will select it to exit 8333 unless manually\nconfigured. (someone following tor more closely than I could correct\nif I'm wrong here)\n\n\n> blockchain.info has some records about the related IP going back to the\n> end of this May:\n>\n> https://blockchain.info/ip-address/5.9.93.101?offset=300\n\ndsnrk and mr_burdell on freenode show that the bitnodes crawler showed\nit accepting _inbound_ bitcoin connections 2-3 weeks ago, though it\ndoesn't now.\n\nFits a pattern of someone running a bitcoin node widely connecting to\neveryone it can on IPv4 in order to try to deanonymize people, and\nalso running a tor exit (and locally intercepting 8333 there),  but I\nsuspect the tor exit part is not actually working\u2014 though they're\ntrying to get it working by accepting huge amounts of relay bandwidth.\n\nI'm trying to manually exit through it so I can see if its\nintercepting the connections, but I seem to not be able.\n\nSome other data from the hosts its connecting out to proves that its\nlying about what software its running (I'm hesitant to just say how I\ncan be sure of that, since doing so just tells someone how to do a\nmore faithful emulation; so that that for whatever its worth)."
            },
            {
                "author": "Drak",
                "date": "2014-07-28T07:41:28",
                "message_text_only": "Related to Russia's Tor bounty?\nhttp://www.theguardian.com/world/2014/jul/25/russia-research-identify-users-tor\nOn 28 Jul 2014 04:45, \"Gregory Maxwell\" <gmaxwell at gmail.com> wrote:\n\n> On Sun, Jul 27, 2014 at 7:54 PM, mbde at bitwatch.co <mbde at bitwatch.co>\n> wrote:\n> > These website list Tor nodes by bandwidth:\n> >\n> > http://torstatus.blutmagie.de/index.php\n> > https://torstatus.rueckgr.at/index.php?SR=Bandwidth&SO=Desc\n> >\n> > And the details reveal it's a port 8333 only exit node:\n> >\n> http://torstatus.blutmagie.de/router_detail.php?FP=0d6d2caafbb32ba85ee5162395f610ae42930124\n>\n> As I pointed out above, \u2014 it isn't really.  Without the exit flag, I\n> believe no tor node will select it to exit 8333 unless manually\n> configured. (someone following tor more closely than I could correct\n> if I'm wrong here)\n>\n>\n> > blockchain.info has some records about the related IP going back to the\n> > end of this May:\n> >\n> > https://blockchain.info/ip-address/5.9.93.101?offset=300\n>\n> dsnrk and mr_burdell on freenode show that the bitnodes crawler showed\n> it accepting _inbound_ bitcoin connections 2-3 weeks ago, though it\n> doesn't now.\n>\n> Fits a pattern of someone running a bitcoin node widely connecting to\n> everyone it can on IPv4 in order to try to deanonymize people, and\n> also running a tor exit (and locally intercepting 8333 there),  but I\n> suspect the tor exit part is not actually working\u2014 though they're\n> trying to get it working by accepting huge amounts of relay bandwidth.\n>\n> I'm trying to manually exit through it so I can see if its\n> intercepting the connections, but I seem to not be able.\n>\n> Some other data from the hosts its connecting out to proves that its\n> lying about what software its running (I'm hesitant to just say how I\n> can be sure of that, since doing so just tells someone how to do a\n> more faithful emulation; so that that for whatever its worth).\n>\n>\n> ------------------------------------------------------------------------------\n> Infragistics Professional\n> Build stunning WinForms apps today!\n> Reboot your WinForms applications with our WinForms controls.\n> Build a bridge from your legacy apps to the future.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140728/f1384363/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-28T10:16:16",
                "message_text_only": "> As I pointed out above, \u2014 it isn't really.  Without the exit flag, I\n> believe no tor node will select it to exit 8333 unless manually\n> configured. (someone following tor more closely than I could correct\n> if I'm wrong here)\n>\n\nThe \"exit\" flag doesn't mean what you would expect it to mean. The reason\nsuch a node won't get much traffic is that Tor speculatively builds\ncircuits at startup on the assumption they'll be used for web browsing.\nThus if you don't exit web traffic you won't get much in the way of traffic\nat least not until bitcoinj based wallets start shipping Tor mode.\n\nThere's a perfectly reasonable explanation for why someone would run such a\nnode. In fact I run a Tor exit that only allows port 8333 too: it's a way\nto contribute exit bandwidth without much risk of getting raided by the\ncops.\n\nOccam's razor and all ....\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140728/8a8019d7/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-07-28T11:28:15",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nI've got a bitcoin-only exit running myself and right now there is absolutely no traffic leaving it. If the traffic coming from that node was legit I'd expect some to be exiting my node too.\n\nMultiple people have confirmed the node is connected to an abnormally large % of the Bitcoin network. Looks like a Sybil attack to me, trying to hide behind a Tor exit node for plausible deniability.\n\n\nOn 28 July 2014 06:16:16 GMT-04:00, Mike Hearn <mike at plan99.net> wrote:\n>> As I pointed out above, \u2014 it isn't really.  Without the exit flag, I\n>> believe no tor node will select it to exit 8333 unless manually\n>> configured. (someone following tor more closely than I could correct\n>> if I'm wrong here)\n>>\n>\n>The \"exit\" flag doesn't mean what you would expect it to mean. The\n>reason\n>such a node won't get much traffic is that Tor speculatively builds\n>circuits at startup on the assumption they'll be used for web browsing.\n>Thus if you don't exit web traffic you won't get much in the way of\n>traffic\n>at least not until bitcoinj based wallets start shipping Tor mode.\n>\n>There's a perfectly reasonable explanation for why someone would run\n>such a\n>node. In fact I run a Tor exit that only allows port 8333 too: it's a\n>way\n>to contribute exit bandwidth without much risk of getting raided by the\n>cops.\n>\n>Occam's razor and all ....\n>\n>\n>------------------------------------------------------------------------\n>\n>------------------------------------------------------------------------------\n>Infragistics Professional\n>Build stunning WinForms apps today!\n>Reboot your WinForms applications with our WinForms controls.\n>Build a bridge from your legacy apps to the future.\n>http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJT1jPPMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhcFSB/9Sr+2an63QQe7TpGMA\nzH5AG1bjcl4Tf/VGVBYK8K2kXsdtfEWNS+nJ9eCglPE1A7/Cc2LL3pksoJwdnt82\nVyuH8FlWUXwnBeZvK/rYUvBz2FQupHYg5+ee+HZ6nYjKTDYrHuSUX+GlqMO2GPII\nD3FhQRIfluuTQTpYoN0ui0DXQ4QDqZgwxFXWiblctA2m986bKFrqrJ5ohZXTDCnE\nmTq//ZABykPPtEcou5G1kLjH9l5YMU4XeMyz6uzADXt0ZTHBDN3lOZ8sFPpJEi0z\nVGh4QlT6fRQIiYsq0AzMyUvopSwsCyQy6yeMt/bCOdanmAIcGm+l8og3mlX2Ml5g\nnQsg\n=/w5n\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Robert McKay",
                "date": "2014-07-28T12:31:09",
                "message_text_only": "On Mon, 28 Jul 2014 07:28:15 -0400, Peter Todd wrote:\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n> I've got a bitcoin-only exit running myself and right now there is\n> absolutely no traffic leaving it. If the traffic coming from that \n> node\n> was legit I'd expect some to be exiting my node too.\n>\n> Multiple people have confirmed the node is connected to an abnormally\n> large % of the Bitcoin network. Looks like a Sybil attack to me,\n> trying to hide behind a Tor exit node for plausible deniability.\n\nI don't think Sybil attack is the right term for this.. there is only \none IP address.. one \"identity\".\n\nI'm not even sure that this behaviour can be considered abuse.. it's \npretty much following the rules and maybe even improving the transaction \nand block propagation.\n\nAs far as monitoring transaction origins someone could do that using \nlots of different IPs instead of just one (more like an actual Sybil \nattack rather than this non-Sybil attack).. and noone would be making a \nfuss (and imo, probably someone does do that too as it would be useful \nto capture a larger number of inbound connections).\n\nRob"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-07-28T14:08:05",
                "message_text_only": "On Mon, Jul 28, 2014 at 5:31 AM, Robert McKay <robert at mckay.com> wrote:\n> I don't think Sybil attack is the right term for this.. there is only\n> one IP address.. one \"identity\".\n\nThe bitcoin protocol is more or less identityless. It's using up lots\nof network capacity, \"number of sockets\" is as pretty close as you\nget.\n\n> I'm not even sure that this behaviour can be considered abuse.. it's\n> pretty much following the rules and maybe even improving the transaction\n> and block propagation.\n\nIt isn't relaying transactions or blocks as far as anyone with a\nconnection to it can tell.\n\nand sure, probably not much to worry about\u2014 people have been running\nspy nodes for a long time, at least that much is not new."
            },
            {
                "author": "s7r",
                "date": "2014-07-28T16:13:19",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 7/28/2014 5:08 PM, Gregory Maxwell wrote:\n> On Mon, Jul 28, 2014 at 5:31 AM, Robert McKay <robert at mckay.com>\n> wrote:\n>> I don't think Sybil attack is the right term for this.. there is\n>> only one IP address.. one \"identity\".\n> \n> The bitcoin protocol is more or less identityless. It's using up\n> lots of network capacity, \"number of sockets\" is as pretty close as\n> you get.\n> \n>> I'm not even sure that this behaviour can be considered abuse..\n>> it's pretty much following the rules and maybe even improving the\n>> transaction and block propagation.\n> \n> It isn't relaying transactions or blocks as far as anyone with a \n> connection to it can tell.\n> \n> and sure, probably not much to worry about\u2014 people have been\n> running spy nodes for a long time, at least that much is not new.\n> \n> ------------------------------------------------------------------------------\n>\n> \nInfragistics Professional\n> Build stunning WinForms apps today! Reboot your WinForms\n> applications with our WinForms controls. Build a bridge from your\n> legacy apps to the future. \n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n>\n> \n_______________________________________________\n> Bitcoin-development mailing list \n> Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \ngmaxwell - I wanted to ask you a non-expert question. Let's say I use\nmy bitcoin-qt on my laptop with Tor, and send some BTC or receive\nsome, what can my Tor exit node see / do / harm? He can alter the\ncontent, by modifying and transmitting invalid transactions to the\nnetwork but this will have no effect on me, e.g. can't steal coins or\nsend them on my behalf or intercept my payments, right? It's not clear\nfor me what data would such a node see? Why would you spend money to\nsetup a spy node for this what relevant data can it give you?\n\n- -- \ns7r\nPGP Fingerprint: 7C36 9232 5ABD FB0B 3021 03F1 837F A52C 8126 5B11\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (MingW32)\n\niQEcBAEBAgAGBQJT1nafAAoJEIN/pSyBJlsR8GYIAL9LkZvPbKjJ6cUxlC4yRKay\nYUumAafCKYMvp8Ywvz3CWpC4Gncn+v29hhJu/Nc0wSItAnf4suwrAFtBAwAYlUx8\na1J6S1hgGXCBWDZcGHDc1Xt2lLzvijDcilSZfQWXnAdoEaZyln/7Kn+o/fFcXG6h\nDUkSCSe9M3tN/tZBcZrhBXTENhoJ6MZldcgey6Ky0qLkmI3GCd0MhM+D15xl1LkT\n6IS2r2y0RUOxkbg/SuSzFS8vnNTTWmZpbECo3Qq98W41X0M3ZtjOlaByPZXFX5K9\n+HUeiptV9zukSdIRcuGH1PUQvU9nk+G1rFKr0dXu4oPvAUxqyw9uCTFgHXczuQY=\n=gw3W\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "s7r",
                "date": "2014-07-28T11:37:07",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 7/28/2014 6:44 AM, Gregory Maxwell wrote:\n> On Sun, Jul 27, 2014 at 7:54 PM, mbde at bitwatch.co\n> <mbde at bitwatch.co> wrote:\n>> These website list Tor nodes by bandwidth:\n>> \n>> http://torstatus.blutmagie.de/index.php \n>> https://torstatus.rueckgr.at/index.php?SR=Bandwidth&SO=Desc\n>> \n>> And the details reveal it's a port 8333 only exit node: \n>> http://torstatus.blutmagie.de/router_detail.php?FP=0d6d2caafbb32ba85ee5162395f610ae42930124\n>\n>> \n> As I pointed out above, \u2014 it isn't really.  Without the exit flag,\n> I believe no tor node will select it to exit 8333 unless manually \n> configured. (someone following tor more closely than I could\n> correct if I'm wrong here)\n> \n> \n>> blockchain.info has some records about the related IP going back\n>> to the end of this May:\n>> \n>> https://blockchain.info/ip-address/5.9.93.101?offset=300\n> \n> dsnrk and mr_burdell on freenode show that the bitnodes crawler\n> showed it accepting _inbound_ bitcoin connections 2-3 weeks ago,\n> though it doesn't now.\n> \n> Fits a pattern of someone running a bitcoin node widely connecting\n> to everyone it can on IPv4 in order to try to deanonymize people,\n> and also running a tor exit (and locally intercepting 8333 there),\n> but I suspect the tor exit part is not actually working\u2014 though\n> they're trying to get it working by accepting huge amounts of relay\n> bandwidth.\n> \n> I'm trying to manually exit through it so I can see if its \n> intercepting the connections, but I seem to not be able.\n> \n> Some other data from the hosts its connecting out to proves that\n> its lying about what software its running (I'm hesitant to just say\n> how I can be sure of that, since doing so just tells someone how to\n> do a more faithful emulation; so that that for whatever its\n> worth).\n> \n> ------------------------------------------------------------------------------\n>\n> \nInfragistics Professional\n> Build stunning WinForms apps today! Reboot your WinForms\n> applications with our WinForms controls. Build a bridge from your\n> legacy apps to the future. \n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n>\n> \n_______________________________________________\n> Bitcoin-development mailing list \n> Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n\nThe thing is, if it doesn't have the exit flag it cannot generate lots\nof traffic from real good-intended clients, because it's quite hard\nfor clients to choose this Node as \u00cbXIT in their path if it doesn't\nhave the exit flag. So the traffic comes from clients who specifically\nadded \"ExitNode <fingerprint>\" in their torrc and only use that Tor\ninstance for Bitcoin. So, someone build this custom Tor node for\nthemselves only, for plausible den. A pool could be the cause as it\nwas earlier discussed here...\n\nThe thing is I cannot find this node on atlas, globe or blutmagie can\nyou please provide fingerprint and IP address again? So I may ignore\nit on my relays and talk to some people about it?\n- -- \ns7r\nPGP Fingerprint: 7C36 9232 5ABD FB0B 3021 03F1 837F A52C 8126 5B11\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (MingW32)\n\niQEcBAEBAgAGBQJT1jXjAAoJEIN/pSyBJlsRjqgIAIFxHcypU6KUaNdSvESADilM\nkFiitf00f4Uy9tBwSLVPQw+I2L1EmMiCNvqG4RRjV2+/PS696HCz0Jt0gVaGlMPl\nDHQSHsozx3BaXi5PpGeLl7uSNLHlEdytytZ8xb08I4IuqcNNHzvxnou7gXapeezC\nPuSABsxVLpDn+OP7QLRy/PlL948Yfgbxwb9dcn+lUdgDlByxxhMmOrk+o/VdGfnh\ncL/C+qgpuJiI/wrQridtBmxU8h7Z6TKKua7eWONyg6MrnjwWuZTumhAGO2H4X1Na\nIZiCmhEwtxb97TMG0EvgcZTeRzfzoddTnOe6ZEsiqOZ7qPNjFJ2i8RoSOI3gUCQ=\n=t3Mb\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Robert McKay",
                "date": "2014-07-28T03:13:53",
                "message_text_only": "Here's a packet dump of a connected client:\n\nhttp://wari.mckay.com/~rm/unknown.tcpdump\n\nDoesn't seem particularly abusive.. only one connection, not doing much \ntraffic. I don't have any easy way to deserialize this and see if it's \ndoing anything unusual but it's there if someone wants to have a go.\n\nRob\n\nOn Sun, 27 Jul 2014 22:49:11 -0400, Michael Wozniak wrote:\n> It\u2019s in my logs:\n>\n> 2014-07-28 02:00:24 receive version message: /Satoshi:0.9.2/: version\n> 70002, blocks=302684, us=******:8333, them=0.0.0.0:0,\n> peer=5.9.93.101:33928\n>\n>\n> On Jul 27, 2014, at 10:45 PM, Gregory Maxwell <gmaxwell at gmail.com> \n> wrote:\n>\n>> On Sun, Jul 27, 2014 at 7:40 PM, Peter Todd <pete at petertodd.org> \n>> wrote:\n>>> Anyway, just goes to show that we need to implement better incoming\n>>> connection limiting. gmaxwell has a good scheme with interactive\n>>> proof-of-memory - where's your latest writeup?\n>>\n>> Or its a complete snipe hunt, I'm unable to find any nodes with it\n>> connected to them. Does anyone here have any?\n>>\n>> Last discussion on the measures for anti-global-resource-consumption\n>> was at https://bitcointalk.org/index.php?topic=310323.0  but it \n>> hasn't\n>> seemed to be a huge issue such that adding more protocol surface \n>> area\n>> was justified.\n>>\n>> \n>> ------------------------------------------------------------------------------\n>> Infragistics Professional\n>> Build stunning WinForms apps today!\n>> Reboot your WinForms applications with our WinForms controls.\n>> Build a bridge from your legacy apps to the future.\n>> \n>> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> \n> ------------------------------------------------------------------------------\n> Infragistics Professional\n> Build stunning WinForms apps today!\n> Reboot your WinForms applications with our WinForms controls.\n> Build a bridge from your legacy apps to the future.\n> \n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-07-28T03:07:56",
                "message_text_only": "On Sun, Jul 27, 2014 at 7:45 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> Or its a complete snipe hunt, I'm unable to find any nodes with it\n> connected to them. Does anyone here have any?\n[unimportant update] Turns out that my IPv4 nodes already have\niptables blocking of that subnet, presumably due to other misconduct\nthere, which might be why I'm not seeing it.\n\nSeveral other people appear to be observing it, and all it seems to be\ndoing is listening without sending transactions\u2014 e.g. surveillance\nnode... not the first time thats happened, but the weird tor\nnon-exit-flagged-exit adds a fun level of intrigue to it."
            },
            {
                "author": "Anatole Shaw",
                "date": "2014-07-28T03:12:35",
                "message_text_only": "It's not quite accurate that the Tor node's throughput is 'mostly'\nplaintext Bitcoin traffic. The node will only exit bitcoin traffic (or\nanything else on port 8333) but most of the bandwidth is probably used\nin being a Tor relay where there can be no port number discrimination.\n\nHowever by providing so much bandwidth to the Tor network (maybe\nrecord-setting?) and providing exit service for 8333, the node puts\nitself in a strong position to do any or all of the following:\n\n(a) Observe a lot of Bitcoin traffic from users connecting with Tor.\n\n(b) Tamper with said traffic in some way.\n\n(c) Hide the administrator's self-generated Bitcoin traffic in a crowd\nof other Bitcoin traffic emitting from the same IP address.\n\nAny of those possibilties might be intriguing.\n\nAnatole\n\n\nOn Sun, Jul 27, 2014 at 10:17:19PM -0400, Jeremy wrote:\n> Credit to Anatole Shaw for discovering.\n> \n> \n> On Sun, Jul 27, 2014 at 10:12 PM, Jeremy <jlrubin at mit.edu> wrote:\n> \n> > Hey,\n> >\n> > There is a potential network exploit going on. In the last three days, a\n> > node (unnamed) came online and is now processing the most traffic out of\n> > any tor node -- and it is mostly plaintext Bitcoin traffic.\n> >\n> >\n> > http://torstatus.blutmagie.de/router_detail.php?FP=0d6d2caafbb32ba85ee5162395f610ae42930124\n> >\n> > Alex Stamos (cc'ed) and I have been discussing on twitter what this could\n> > mean, wanted to raise it to the attention of this group for discussion.\n> >\n> > What we know so far:\n> >\n> > - Only port 8333 is open\n> > - The node has been up for 3 days, and is doing a lot of bandwidth, mostly\n> > plaintext Bitcoin traffic\n> > - This is probably pretty expensive to run? Alex suggests that the most\n> > expensive server at the company hosting is 299\u20ac/mo with 50TB of traffic\n> >\n> >\n> > --\n> > Jeremy Rubin\n> >\n> \n> \n> \n> -- \n> Jeremy Rubin"
            }
        ],
        "thread_summary": {
            "title": "Abnormally Large Tor node accepting only Bitcoin traffic",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Anatole Shaw",
                "Jeremy",
                "Robert McKay",
                "Mike Hearn",
                "s7r",
                "Peter Todd",
                "mbde at bitwatch.co",
                "Gregory Maxwell",
                "Michael Wozniak",
                "Drak"
            ],
            "messages_count": 18,
            "total_messages_chars_count": 31240
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin development (testing & where to get Wallet code)",
        "thread_messages": [
            {
                "author": "Caleb Roger Davis",
                "date": "2014-07-29T22:32:19",
                "message_text_only": "I have several Bitcoin contributions I would like to make, mostly for\nlearning purposes to get started:\n\n\n   1. I would like to contribute to unit and/or other types of tests\n   (code), not production code.\n   2. I would like to understand the Bitcoin code (as much as possible from\n   top to bottom)\n   3. I would like to write a Bitcoin wallet in another language (so would\n   like to know where to get the \"Bitcoin - Core Wallet\" code, but not sure\n   where it resides.\n\nI am a seasoned software developer, but I do need direction on where to get\nstarted.  If there is a wiki doc for new developers that would reduce my\nsearching and experimentation that would be great.\n\nFor each of the three items above, I would like to know the tools and\nframeworks I would need to understand and initially work on tests ( how to\nrun the existing tests to get code coverage and find where coverage is\nneeded, what is the preferred IDE and full development stack etc ), and\nalso where to get started looking at the bitcoin core code and also the\nwallet code (where is the initial starting point and then I could trace\nfrom there ).\n\nIs there a separate area (github & mailing list) for core wallet\ndevelopment?\n\nSincerely,\n\n\n-- \nCaleb\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140729/7a17857c/attachment.html>"
            },
            {
                "author": "Felipe Micaroni Lalli",
                "date": "2014-07-29T23:12:55",
                "message_text_only": "May I ask you which language? I'd love to implement Bitcoin in Clojure or Scheme.\n\nRelated: http://bitcoin.stackexchange.com/questions/5344/has-anyone-ported-the-bitcoin-software-to-pure-clojure\n\n\n\n\nSincerely,\n\n\nFelipe Micaroni Lalli\n\nWalltime: https://walltime.info\nBitcoin Paranoid Android developer\nPGP ID: 0x4c0afccfed5cde14\nBTC: 1LipeR1AjHL6gwE7WQECW4a2H4tuqm768N\n\nOn 29/07/2014, at 19:32, Caleb Roger Davis <moabtek at gmail.com> wrote:\n\n> I have several Bitcoin contributions I would like to make, mostly for learning purposes to get started:\n> \n> \t\u2022 I would like to contribute to unit and/or other types of tests (code), not production code.\n> \t\u2022 I would like to understand the Bitcoin code (as much as possible from top to bottom)\n> \t\u2022 I would like to write a Bitcoin wallet in another language (so would like to know where to get the \"Bitcoin - Core Wallet\" code, but not sure where it resides.\n> I am a seasoned software developer, but I do need direction on where to get started.  If there is a wiki doc for new developers that would reduce my searching and experimentation that would be great.\n> \n> For each of the three items above, I would like to know the tools and frameworks I would need to understand and initially work on tests ( how to run the existing tests to get code coverage and find where coverage is needed, what is the preferred IDE and full development stack etc ), and also where to get started looking at the bitcoin core code and also the wallet code (where is the initial starting point and then I could trace from there ).\n> \n> Is there a separate area (github & mailing list) for core wallet development?\n> \n> Sincerely,\n> \n> \n> -- \n> Caleb\n> \n> ------------------------------------------------------------------------------\n> Infragistics Professional\n> Build stunning WinForms apps today!\n> Reboot your WinForms applications with our WinForms controls. \n> Build a bridge from your legacy apps to the future.\n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140729/57bfdbcb/attachment.sig>"
            },
            {
                "author": "Caleb Roger Davis",
                "date": "2014-07-30T07:38:39",
                "message_text_only": "Yes, I was thinking something on the JVM, I have a big interest in Clojure\nright now (am a long time Java dev, since 1996).\n\nI do not know if I want to tackle writing bitcoin in Clojure, but I want to\ncreate a tool kit first to learn more about how it works.\n\nCaleb\n\n\nOn Tue, Jul 29, 2014 at 5:12 PM, Felipe Micaroni Lalli <\nmicaroni at walltime.info> wrote:\n\n> May I ask you which language? I'd love to implement Bitcoin in Clojure or\n> Scheme.\n>\n> Related:\n> http://bitcoin.stackexchange.com/questions/5344/has-anyone-ported-the-bitcoin-software-to-pure-clojure\n>\n>\n>\n>\n> Sincerely,\n>\n>\n> Felipe Micaroni Lalli\n>\n> Walltime: https://walltime.info\n> Bitcoin Paranoid Android developer\n> PGP ID: 0x4c0afccfed5cde14\n> BTC: 1LipeR1AjHL6gwE7WQECW4a2H4tuqm768N\n>\n> On 29/07/2014, at 19:32, Caleb Roger Davis <moabtek at gmail.com> wrote:\n>\n> > I have several Bitcoin contributions I would like to make, mostly for\n> learning purposes to get started:\n> >\n> >       \u2022 I would like to contribute to unit and/or other types of tests\n> (code), not production code.\n> >       \u2022 I would like to understand the Bitcoin code (as much as possible\n> from top to bottom)\n> >       \u2022 I would like to write a Bitcoin wallet in another language (so\n> would like to know where to get the \"Bitcoin - Core Wallet\" code, but not\n> sure where it resides.\n> > I am a seasoned software developer, but I do need direction on where to\n> get started.  If there is a wiki doc for new developers that would reduce\n> my searching and experimentation that would be great.\n> >\n> > For each of the three items above, I would like to know the tools and\n> frameworks I would need to understand and initially work on tests ( how to\n> run the existing tests to get code coverage and find where coverage is\n> needed, what is the preferred IDE and full development stack etc ), and\n> also where to get started looking at the bitcoin core code and also the\n> wallet code (where is the initial starting point and then I could trace\n> from there ).\n> >\n> > Is there a separate area (github & mailing list) for core wallet\n> development?\n> >\n> > Sincerely,\n> >\n> >\n> > --\n> > Caleb\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Infragistics Professional\n> > Build stunning WinForms apps today!\n> > Reboot your WinForms applications with our WinForms controls.\n> > Build a bridge from your legacy apps to the future.\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk_______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n-- \nCaleb\nM: 801.896.3278\nhttps://plus.google.com/+CalebRogerDavis/about\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140730/4bc7387a/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-07-30T08:27:03",
                "message_text_only": "Are you aware of bitcoinj?\n\nhttp://bitcoinj.github.io/\n\nIt contains everything to plug together a basic SPV wallet and runs in\nthe JVM.\n\n\nOn 07/30/2014 09:38 AM, Caleb Roger Davis wrote:\n> Yes, I was thinking something on the JVM, I have a big interest in\n> Clojure right now (am a long time Java dev, since 1996).\n> \n> I do not know if I want to tackle writing bitcoin in Clojure, but I want\n> to create a tool kit first to learn more about how it works.\n> \n> Caleb\n> \n> \n> On Tue, Jul 29, 2014 at 5:12 PM, Felipe Micaroni Lalli\n> <micaroni at walltime.info <mailto:micaroni at walltime.info>> wrote:\n> \n>     May I ask you which language? I'd love to implement Bitcoin in\n>     Clojure or Scheme.\n> \n>     Related:\n>     http://bitcoin.stackexchange.com/questions/5344/has-anyone-ported-the-bitcoin-software-to-pure-clojure\n> \n> \n> \n> \n>     Sincerely,\n> \n> \n>     Felipe Micaroni Lalli\n> \n>     Walltime: https://walltime.info\n>     Bitcoin Paranoid Android developer\n>     PGP ID: 0x4c0afccfed5cde14\n>     BTC: 1LipeR1AjHL6gwE7WQECW4a2H4tuqm768N\n> \n>     On 29/07/2014, at 19:32, Caleb Roger Davis <moabtek at gmail.com\n>     <mailto:moabtek at gmail.com>> wrote:\n> \n>     > I have several Bitcoin contributions I would like to make, mostly\n>     for learning purposes to get started:\n>     >\n>     >       \u2022 I would like to contribute to unit and/or other types of\n>     tests (code), not production code.\n>     >       \u2022 I would like to understand the Bitcoin code (as much as\n>     possible from top to bottom)\n>     >       \u2022 I would like to write a Bitcoin wallet in another language\n>     (so would like to know where to get the \"Bitcoin - Core Wallet\"\n>     code, but not sure where it resides.\n>     > I am a seasoned software developer, but I do need direction on\n>     where to get started.  If there is a wiki doc for new developers\n>     that would reduce my searching and experimentation that would be great.\n>     >\n>     > For each of the three items above, I would like to know the tools\n>     and frameworks I would need to understand and initially work on\n>     tests ( how to run the existing tests to get code coverage and find\n>     where coverage is needed, what is the preferred IDE and full\n>     development stack etc ), and also where to get started looking at\n>     the bitcoin core code and also the wallet code (where is the initial\n>     starting point and then I could trace from there ).\n>     >\n>     > Is there a separate area (github & mailing list) for core wallet\n>     development?\n>     >\n>     > Sincerely,\n>     >\n>     >\n>     > --\n>     > Caleb\n>     >\n>     >\n>     ------------------------------------------------------------------------------\n>     > Infragistics Professional\n>     > Build stunning WinForms apps today!\n>     > Reboot your WinForms applications with our WinForms controls.\n>     > Build a bridge from your legacy apps to the future.\n>     >\n>     http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk_______________________________________________\n>     > Bitcoin-development mailing list\n>     > Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> \n> -- \n> Caleb\n> M: 801.896.3278\n> https://plus.google.com/+CalebRogerDavis/about\n> \n> \n> ------------------------------------------------------------------------------\n> Infragistics Professional\n> Build stunning WinForms apps today!\n> Reboot your WinForms applications with our WinForms controls. \n> Build a bridge from your legacy apps to the future.\n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Wladimir",
                "date": "2014-07-30T08:37:07",
                "message_text_only": "On Wed, Jul 30, 2014 at 12:32 AM, Caleb Roger Davis <moabtek at gmail.com> wrote:\n> I have several Bitcoin contributions I would like to make, mostly for\n> learning purposes to get started:\n>\n> I would like to contribute to unit and/or other types of tests (code), not\n> production code.\n\nLow-level unit tests are in `src/test`. These use the boost\nunit-testing framework. You can run them with 'make check' or\n`src/test/test_bitcoin`.\n\nHigh-level RPC tests are in `qa/rpc-tests`. These are Python scripts\nthat can be invoked manually, and are based on our own simple\nframework.\n\nThere is also a java-based 'comparison tool' that tests high-level\nbehavior with regard to the block chain. It is based on bitcoinj and\nacts as an external node. This is not part of the github bitcoin\nrepository itself, but of bitcoinj (AFAIK).\n\n> I would like to understand the Bitcoin code (as much as possible from top to\n> bottom)\n\nSee https://www.bitcoin.org/en/developer-guide\n\n> I would like to write a Bitcoin wallet in another language (so would like to\n> know where to get the \"Bitcoin - Core Wallet\" code, but not sure where it\n> resides.\n\nAll of the wallet code is in `src/wallet.cpp` and `src/walletdb.cpp`.\nIf the purpose is just studying, the bitcoin core wallet is not the\nmost readable wallet code around, and also hard to port as it relies\non a full node in the same process. It's better to look at SPV\nwallets, for example the bitcoinj-based ones.\n\n> I am a seasoned software developer, but I do need direction on where to get\n> started.  If there is a wiki doc for new developers that would reduce my\n> searching and experimentation that would be great.\n\nSomething like that would be useful, yes.\n\n> For each of the three items above, I would like to know the tools and\n> frameworks I would need to understand and initially work on tests ( how to\n> run the existing tests to get code coverage and find where coverage is\n> needed, what is the preferred IDE and full development stack etc ), and also\n> where to get started looking at the bitcoin core code and also the wallet\n> code (where is the initial starting point and then I could trace from there\n> ).\n\nIf you want to work on Bitcoin Core, a Linux box (or VM) is the best\ndevelopment environment. Getting started building on WIndows or Mac is\nharder (but possible). There is work in progress to make building the\ndependencies easier for those.\n\nWladimir"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin development (testing & where to get Wallet code)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Felipe Micaroni Lalli",
                "Caleb Roger Davis",
                "Wladimir",
                "Andreas Schildbach"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 13220
        }
    },
    {
        "title": "[Bitcoin-development] Abusive and broken bitcoin seeders",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2014-07-30T13:22:23",
                "message_text_only": "Seeing this on one of my public nodes:\n2014-07-30 13:13:26 receive version message:\n/getaddr.bitnodes.io:0.1/: version 70001, blocks=313169,\nus=162.219.2.72:8333, peer=11847\n2014-07-30 13:13:33 receive version message:\n/getaddr.bitnodes.io:0.1/: version 70001, blocks=290000,\nus=162.219.2.72:8333, peer=11848\n2014-07-30 13:14:21 receive version message:\n/getaddr.bitnodes.io:0.1/: version 70001, blocks=313169,\nus=162.219.2.72:8333, peer=11849\n\nThat is abusive, taking up public slots.  There is no reason to\nconnect so rapidly to the same node.\n\nOther seeders are also rapidly reconnect'ers, though the time window\nis slightly more wide:\n2014-07-30 13:09:35 receive version message: /bitcoinseeder:0.01/:\nversion 60000, blocks=230000, us=162.219.2.72:8333, peer=11843\n2014-07-30 13:12:42 receive version message: /bitcoinseeder:0.01/:\nversion 60000, blocks=230000, us=162.219.2.72:8333, peer=11846\n\nThe version message helpfully tells me my own IP address but not theirs ;p\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Wladimir",
                "date": "2014-07-30T13:50:30",
                "message_text_only": "> The version message helpfully tells me my own IP address but not theirs ;p\n\nTry -logips. Logging peer IPs was disabled by default after #3764.\n\nBTW I'm seeing the same abusive behavior. Who is running these? Why do\nthe requests need to be so frequent?\n\nWladimir"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-07-30T13:57:07",
                "message_text_only": "At least my crawler (bitcoin-seeder:0.01) software shouldn't reconnect\nmore frequently than once every 15 minutes. But maybe the two\nconnections you saw were instances?\n\nOn Wed, Jul 30, 2014 at 3:50 PM, Wladimir <laanwj at gmail.com> wrote:\n>> The version message helpfully tells me my own IP address but not theirs ;p\n>\n> Try -logips. Logging peer IPs was disabled by default after #3764.\n>\n> BTW I'm seeing the same abusive behavior. Who is running these? Why do\n> the requests need to be so frequent?\n>\n> Wladimir\n>\n> ------------------------------------------------------------------------------\n> Infragistics Professional\n> Build stunning WinForms apps today!\n> Reboot your WinForms applications with our WinForms controls.\n> Build a bridge from your legacy apps to the future.\n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Neil Fincham",
                "date": "2014-07-30T21:03:31",
                "message_text_only": "I am also seeing these quite bit on my p2pool box.\n\nRight now it is just a bit of (mostly) harmless spam but in the future I\ncan see this kind of thing being used in DDOS attacks and \"deep scans\" to\ngather information to be used to harm the bitcoin network.  We could easily\nblock them but then they would just start to spoof regular clients.\n\nWe cannot even authenticate them by asking something that only a full\nclient would know because that would catch out clients sync'ing the\nblockchain and SPV clients.\n\nI suspect it is something that is going to have to be dealt with in the\nfuture (I just don't know how yet).  We could start by dropping connections\nthat send incorrect information (IP addresses of 0.0.0.0 or our own IP).\n\nNeil\n\n\nOn 31 July 2014 01:57, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n\n> At least my crawler (bitcoin-seeder:0.01) software shouldn't reconnect\n> more frequently than once every 15 minutes. But maybe the two\n> connections you saw were instances?\n>\n> On Wed, Jul 30, 2014 at 3:50 PM, Wladimir <laanwj at gmail.com> wrote:\n> >> The version message helpfully tells me my own IP address but not theirs\n> ;p\n> >\n> > Try -logips. Logging peer IPs was disabled by default after #3764.\n> >\n> > BTW I'm seeing the same abusive behavior. Who is running these? Why do\n> > the requests need to be so frequent?\n> >\n> > Wladimir\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Infragistics Professional\n> > Build stunning WinForms apps today!\n> > Reboot your WinForms applications with our WinForms controls.\n> > Build a bridge from your legacy apps to the future.\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> ------------------------------------------------------------------------------\n> Infragistics Professional\n> Build stunning WinForms apps today!\n> Reboot your WinForms applications with our WinForms controls.\n> Build a bridge from your legacy apps to the future.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140731/ac2b48a5/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-07-31T10:37:04",
                "message_text_only": ">\n> I suspect it is something that is going to have to be dealt with in the\n> future (I just don't know how yet).\n>\n\nThe web has managed to survive despite constant fast crawls being the norm\nfor the past 10 years or so. I wouldn't worry too much about this unless\nyou can prove that a big chunk of your nodes resources are going to\nanswering ver queries.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140731/5ab0cd91/attachment.html>"
            },
            {
                "author": "Jameson Lopp",
                "date": "2014-07-31T12:59:17",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nI may be able to provide some insight regarding request volume / abuse via my public node at http://statoshi.info\n\nMy node receives a 'getaddr' request about every 50 seconds: http://i.imgur.com/XEpnWfG.png\n\nIn terms of the 'addr' messages that it sends out, the volume is also low. This graph has 'inv' and 'tx' sent messages for comparison. http://i.imgur.com/keyitsS.png\n\nNow, these are just message volume and not actual resource usage, but I have a feeling that 'getaddr' requests are not resource intensive since it shouldn't be reading from disk. I could look into adding timing metrics around these requests if you think it could be useful.\n\n- - Jameson\n\nOn 07/31/2014 06:37 AM, Mike Hearn wrote:\n>>\n>> I suspect it is something that is going to have to be dealt with in the\n>> future (I just don't know how yet).\n>>\n> \n> The web has managed to survive despite constant fast crawls being the norm\n> for the past 10 years or so. I wouldn't worry too much about this unless\n> you can prove that a big chunk of your nodes resources are going to\n> answering ver queries.\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Infragistics Professional\n> Build stunning WinForms apps today!\n> Reboot your WinForms applications with our WinForms controls. \n> Build a bridge from your legacy apps to the future.\n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJT2j2lAAoJEIch3FSFNiDcWqIH/i0W21cYFHyQZItSkyHezBER\nExjudrLuXvTuRc/9b1OG7lJpK7IEYpCn0xXHGP3gv8gihq6lVEdZCFMXGWxU+eDv\nECXppTTCUkofUjVInbU91eagXeRzK0UTbTrp2++hfLQIAv99B8mgSdoEcopP42Fd\nG197p/273lAPGVmNF31YPUcIbrhj0IzsiR1QaEEf1FEelaJ7MmU7YsUFUglajTqk\n6+Uzcr6RcwLKAWVFAOA6VOeVwAMOQMwsniUAx6bYbqvgSHzRTllDDWW5rTaKh9+O\nrIhA3LvHpLh37xqTs6EvJb2Kn823e4Ax4Eoz3wqVvAyjNqWHRPjlXdXentHFN4Q=\n=R+Z1\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Addy Yeow",
                "date": "2014-07-30T22:53:29",
                "message_text_only": "I believe the requests Jeff is seeing came from my crawler although anyone\ncould be running it (https://github.com/ayeowch/bitnodes) since there is no\nIP address in the log to confirm the source of the requests.\n\nThis is a sample log of an actual request from my crawler at 148.251.238.178\n:\n*2014-07-30 22:43:54 receive version message: /getaddr.bitnodes.io:0.1/:\nversion 70001, blocks=313244, us=X.X.X.X:8333, them=0.0.0.0:0\n<http://0.0.0.0:0>, peer=148.251.238.178:47635*\n\nCurrently, the crawler takes a full snapshot of the network of reachable\nnodes as soon as it is done with previous snapshot. I want to be able to\ndiff between the snapshots to get the join and leave nodes periodically.\nEach full snapshot is taken on average between 3 to 4 minutes hence the\nrequests that you see from the crawler every 3 to 4 minutes.\nI have a task in my schedule (\nhttps://github.com/ayeowch/bitnodes/wiki/Schedule#crawlpypingpy) to improve\nupon this method by skipping a new connection with currently reachable\nnodes while still being able to perform the diff.\n\n\nOn Wed, Jul 30, 2014 at 11:22 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> Seeing this on one of my public nodes:\n> 2014-07-30 13:13:26 receive version message:\n> /getaddr.bitnodes.io:0.1/: version 70001, blocks=313169,\n> us=162.219.2.72:8333, peer=11847\n> 2014-07-30 13:13:33 receive version message:\n> /getaddr.bitnodes.io:0.1/: version 70001, blocks=290000,\n> us=162.219.2.72:8333, peer=11848\n> 2014-07-30 13:14:21 receive version message:\n> /getaddr.bitnodes.io:0.1/: version 70001, blocks=313169,\n> us=162.219.2.72:8333, peer=11849\n>\n> That is abusive, taking up public slots.  There is no reason to\n> connect so rapidly to the same node.\n>\n> Other seeders are also rapidly reconnect'ers, though the time window\n> is slightly more wide:\n> 2014-07-30 13:09:35 receive version message: /bitcoinseeder:0.01/:\n> version 60000, blocks=230000, us=162.219.2.72:8333, peer=11843\n> 2014-07-30 13:12:42 receive version message: /bitcoinseeder:0.01/:\n> version 60000, blocks=230000, us=162.219.2.72:8333, peer=11846\n>\n> The version message helpfully tells me my own IP address but not theirs ;p\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140731/aed03683/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Abusive and broken bitcoin seeders",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Addy Yeow",
                "Wladimir",
                "Mike Hearn",
                "Neil Fincham",
                "Jameson Lopp",
                "Pieter Wuille"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 10276
        }
    },
    {
        "title": "[Bitcoin-development] [ANN] Armory 0.92 with Decentralized Multi-sig and Simulfunding",
        "thread_messages": [
            {
                "author": "Alan Reiner",
                "date": "2014-07-30T21:50:22",
                "message_text_only": "Hi Everyone,\n\nThe Armory team is pleased to announce the official release of our\ndecentralized multi-signature interface, called \"Lockboxes\".  It is a\n\"true\" multi-signature transaction interface:\n\n  * Decentralized multi-sig (no third-party servers or signers needed)\n  * Any multi-sig from 1-of-2 up to 7-of-7\n  * Any or all of the signing devices can be *offline*\n  * All private keys can be generated and managed independently\n  * Works with existing Armory wallets\n  * Simultaneous funding (\"simulfunding\") features for escrow and\n    contracts (basically CoinJoin)\n  * All wrapped up in a nice graphical user interface!\n\nArmory 0.92 includes a GUI for creating, funding and spending from\nmulti-signature lockboxes, anything from 1-of-2 up to 7-of-7.  All\nprivate keys can be generated independently and never have to be\nco-located.    Most importantly, any number of the signing keys can be\ncreated and managed on offline computers!  Also, all transaction and\nsignature data is communicated directly between parties/devices using\nASCII-armored blocks of text, so no third-party servers/services are\nneeded (though, in the future, we hope to provide an optional service to\nhelp synchronize the data between parties).\n\nThe release also includes the ability to do simultaneous funding\n(\"simulfunding\") which is basically CoinJoin through a GUI, but intended\nto be used for contracts and escrow.  Each party creates a \"promissory\nnote\" (which is basically just a list of UTXOs and a change address),\nand those can be merged into a single transaction to be signed by all\nfunders.  Either all contributions are made simutaneously, or none of\nthem are.   There is no other outcome.  This means that no trust is\nrequired between the simulfunders.  It is a basic contract enforced by\nthe bitcoin network itself.\n\nSimulfunding would normally be used in conjuction with multi-signature\nlockboxes -- two parties that don't trust each other together create a\nlockbox, and then simultaneously fund it (and subsequently spend it)\naccording to some agreement.  However, it can actually be used to\nsimulfund any address.  To promote this feature, Armory Technologies Inc\nis offering to match up to 20 BTC in donations to the EFF, FSF, College\nCrypto Network, Chamber of Digital Commerce, and the Bitcoin Foundation\n(and hopefully wikipedia, as a late addition to the list).    We posted\na list of ATI \"promissory notes\" for matching donations on our\nwebsite:   https://bitcoinarmory.com/donation-match-list/\n\nWe're very excited about this release, which has been in testing for\nover three months, and we've been using for management of company funds\nbetween officers for the last two months.  We have not seen anything\nelse that comes close to matching the flexibility and security afforded\nby it (and without being exceptionally inconvenient!).   See our\ntutorials, and especially the FAQ at the end: \n\nhttps://bitcoinarmory.com/about/using-lockboxes\nhttps://bitcoinarmory.com/about/using-lockboxes/#faq\n \nWe hope that people will try it out and provide feedback.  Maybe even\nmatch some donations!  We've already matched 3 BTC so far and it was\nannounced less than 24 hours ago. \n\nCheers,\n-Alan\n\n\n------\nPress Release: \nhttp://finance.yahoo.com/news/armory-releases-first-decentralized-multi-233500704.html\n------\nChangelog:\n\n*VERSION 0.92**\n**Released July 29, 2014**\n*\n\n    - *Multi-Signature Lockboxes!*\n          Full-featured interface for creating multi-signature addresses,\n          putting money into them, and collecting signatures to spend them.\n          See our tutorials at:\nhttps://bitcoinarmory.com/about/using-lockboxes/\n\n    - *Simulfunding for Addresses and Lockboxes*\n          Use the \"Multi-Sig\" menu to do prepare simulfunding to any\n          arbitrary address.  Or click on the \"Simul\" checkbox in the\n          lockbox manager if you are simulfunding a lockbox.  As a promotion\n          for this feature we are matching up to 20 BTC worth donations\n          to organizations that support Bitcoin, digital security, online\n          freedoms, and open-source software.  See our donation list (with\n          instructions): https://bitcoinarmory.com/about/donation-match-list\n\n    - *Improved Mac/OSX Stability*\n          We merged a couple Qt4 patches that dramatically improved\n          compatibility on OSX 10.7 and newer.  Should work with the\n          upcoming release of OSX 10.10.\n\n    - *Armory Daemon/API Upgrades (Beta)*\n          The Armory API has been upgraded substantially since version 0.91.\n          This version has tons of new functionality matching bitcoind,\n          as well as unique functionality including lockbox operations.\n          Plan to have complete functionality implemented and tested by\n          version 0.93.\n\n    - *Upgraded Transaction History Export to CSV*\n          Added running balance reporting for individual and all wallets.\n          Also fixed a bug where internal transfers within wallets were\n          not being reported properly.\n\n    - *Root PUBLIC Key Export*\n          You can now export just the root public key data that allows\n          you to reconstruct your watching-only wallet.  It is five lines\n          that are easily printed or copied by hand.  Could be used to\n          provide someone a chain of addresses for multiple payments.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140730/d0ee6702/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-07-31T18:33:05",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 07/30/2014 09:50 PM, Alan Reiner wrote:\n> (though, in the future, we hope to provide an optional service to \n> help synchronize the data between parties)\n\n\nBefore rolling your own service, it might be a good idea to add\nBitmessage integration to provide the P2P communication layer.\n\nEven if you resolved to create such a service without creating any\nnegative privacy or confidentially side effects, I'd be more inclined\nto trust Bitmessage to get that right in the long term, because the\nservice you'd create isn't your primary product or core competency.\n\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBAgAGBQJT2ovhAAoJEMP3uyY4RQ21zw4H/3vjcZXP6e0/5IG745PDy/AC\nBr1ChlyQjBpU7X9CQfrxDmUUGs7HDrwLjd/SZAV1/PUUXXfE3nDr24hsF8+PlGex\nAiZhO7k92xfwRMWxMmcVVt/kuaOldHZUqHDUenT3drJ/bPnV+R3FJ9O6Ougu/YVy\nH2BRjpdPGrZx9NP/hE/7evA7rPF8pcshpMBiwq6RiHFdu/+2jcThFZoMIaJsAcif\n1vZOzP6vTUKkr3E7tRt5ZQrdb4vvGxX+xMomm8fzPmV3GkpJ/Kyyypx+ovaH74V5\noXXg62XRz4lSziWV5Sp4p/18VjRyUkxwvfXXMt9sW6vNvRDxtJNP8/ZKpkMjO3s=\n=ClEd\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x38450DB5.asc\nType: application/pgp-keys\nSize: 14046 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140731/9bde8224/attachment.bin>"
            }
        ],
        "thread_summary": {
            "title": "Armory 0.92 with Decentralized Multi-sig and Simulfunding",
            "categories": [
                "Bitcoin-development",
                "ANN"
            ],
            "authors": [
                "Alan Reiner",
                "Justus Ranvier"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 6971
        }
    }
]