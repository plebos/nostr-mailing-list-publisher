[
    {
        "title": "[bitcoin-dev] BIP proposal: Pay-to-contract tweak fields for PSBT (bip-psbt-p2c)",
        "thread_messages": [
            {
                "author": "Dr Maxim Orlovsky",
                "date": "2022-04-01T08:32:36",
                "message_text_only": "Hi Jeremy,\n\nThank you for your reply. P2C tweaks are unrelated to BIP32 derivations and\ncan't be mixed with BIP32 derivation paths. Specifically, P2C commitments can't\nbe relying on extended key chain code, which should be not known to the\nverifyer. Thus, P2C is incompatible with BIP32 CDK.\n\nKind regards,\nMaxim Orlovsky\n\nOn Sun, 2022-01-16 at 17:41 +0000, Dr Maxim Orlovsky wrote:\n> Dear Bictoin dev community,\n>\n>\n> In Mar 2019 Andrew Poelstra sent to bitcoin dev mail list a proposal\n> for extending existing PSBT standard [6], which among other was suggesting\n> adding a field for P2C tweaks:\n>\n> > (c) a map from public keys to 32-byte \"tweaks\" that are used in the\n> >     pay-to-contract construction. Selfishly I'd like this to be a\n> >     variable-length bytestring with the semantics that (a) the first\n> >     33 bytes represent an untweaked pubkey; (b) the HMAC-SHA256 of\n> >     the whole thing, when multiplied by G and added to the untweaked\n> >     pubkey, result in the target key. This matches the algorithm in\n> >     [3] which is deployed in Blockstream's Liquid, but I'd be happy\n> >     with a more efficient scheme which e.g. used SHA256 rather than\n> >     HMAC-SHA256.\n>\n> This BIP proposal is an attempt to structure that idea into a more\n> universal and standard form, following a discussion happened in\n> https://github.com/bitcoin/bips/pull/1239. Specifically, it adds a PSBT input\n> field for inputs spending UTXOs with previously created pay-to-contract (P2C)\n> public key tweaks.\n>\n>\n> -----------------------------------------------------------------------\n>\n> <pre>\n>   BIP: ?\n>   Layer: Applications\n>   Title: Pay-to-contract tweak fields for PSBT\n>   Author: Maxim Orlovsky <orlovsky at lnp-bp.org>,\n>           Andrew Poelstra <apoelstra at wpsoftware.net>\n>   Discussions-To: <bitcoin-dev at lists.linuxfoundation.org>\n>   Comments-URI: <to be assigned>\n>   Status: Draft\n>   Type: Standards Track\n>   Created: 2022-01-16\n>   License: BSD-2-Clause\n>   Requires: BIP-174\n> </pre>\n>\n> ==Introduction==\n>\n> ===Abstract===\n>\n> This document proposes additional fields for BIP 174 PSBTv0 and BIP 370 PSBTv2\n> that allow for pay-to-contract key tweaking data data to be included in a PSBT\n> of any version. These will represent an extra-transaction information required\n> for the signer to produce valid signatures spending previous outputs.\n>\n> ===Copyright===\n>\n> This BIP is licensed under the 2-clause BSD license.\n>\n> ===Background===\n>\n> Key tweaking is a procedure for creating a cryptographic commitment to some\n> message using elliptic curve properties. The procedure uses the discrete log\n> problem (DLP) to commit to an extra-transaction message. This is done by\n> adding\n> to a public key (for which the output owner knows the corresponding private\n> key)\n> a hash of the message multiplied on the generator point G of the elliptic\n> curve.\n> This produces a tweaked public key, containing the commitment. Later, in order\n> to spend an output containing P2C commitment, the same commitment should be\n> added to the corresponding private key.\n>\n> This type of commitment was originally proposed as a part of the pay to\n> contract\n> concept by Ilja Gerhardt and Timo Hanke in [1] and later used by Eternity Wall\n> [2] for the same purpose. Since that time multiple different protocols for P2C\n> has been developed, including OpenTimeStamps [3], Elements sidechain P2C\n> tweaks\n> [4] and LNPBP-1 [5], used in for constructing Peter Todd's single-use-seals\n> [6]\n> in client-side-validation protocols like RGB.\n>\n> ===Motivation===\n>\n> P2C outputs can be detected onchain and spent only if the output owner\n> not just knowns the corresponding original private key, but also is aware\n> about\n> P2C tweak applied to the public key. In order to produce a valid signature,\n> the\n> same tweak value must be added (modulo group order) to the original private\n> key\n> by a signer device. This represents a channelge for external signers, which\n> may\n> not have any information about such commitment. This proposal addresses this\n> issue by adding relevant fields to the PSBT input information.\n>\n> The proposal abstracts details of specific P2C protocols and provides\n> universal\n> method for spending previous outpus containing P2C tweaks, applied to the\n> public\n> key contained within any standard form of the <tt>scriptPubkey</tt>, including\n> bare scripts and P2PK, P2PKH, P2SH, witness v0 P2WPKH, P2WSH, nested witness\n> v0\n> P2WPKH-P2SH, P2WSH-P2SH and witness v1 P2TR outputs.\n>\n>\n> ==Design==\n>\n> P2C-tweaked public keys are already exposed in the\n> <tt>PSBT_IN_REDEEM_SCRIPT</tt>, <tt>PSBT_IN_WITNESS_SCRIPT</tt>,\n> <tt>PSBT_IN_TAP_INTERNAL_KEY</tt> and <tt>PSBT_IN_TAP_LEAF_SCRIPT</tt> fields;\n> the only information signer is needed to recognize which keys it should sign\n> with is from which of the original keys they were generated. This is achieved\n> by\n> introducing new `PSBT_IN_P2C_TWEAK` field which has the original key as a\n> field\n> key and the tweak as a field value. The signer will recognize the keys which\n> are\n> available to it, apply the tweak to them and see in which scripts it was used\n> --\n> and use this information to apply tweaks for the corresponding private keys\n> and\n> produce valid signatures.\n>\n>\n> ==Specification==\n>\n> The new per-input type is defined as follows:\n>\n> {|\n> ! Name\n> ! <tt><keytype></tt>\n> ! <tt><keydata></tt>\n> ! <tt><keydata></tt> Description\n> ! <tt><valuedata></tt>\n> ! <tt><valuedata></tt> Description\n> ! Versions Requiring Inclusion\n> ! Versions Requiring Exclusion\n> ! Versions Allowing Inclusion\n> > -\n> > P2C Key Tweak\n> > <tt>PSBT_IN_P2C_TWEAK = 0x19</tt>\n> > <tt><pubkey></tt>\n> > 33 bytes of compact public key serialization specifying to which of keys the\n> P2C tweak may be applied (i.e. this MUST be a value of a public key before the\n> tweak is applied). BIP-340 keys are serialized by appending `02`\n> byte.<ref>'''Why compressed public keys are not distinguished from BIP-340\n> public keys'''We follow the logic of BIP32 key derivation which does not\n> performs that distinguishment. The type of the key is defined by the input\n> type,\n> and adding additional PSBT field type will just create the need for handling\n> errors when the input type does not match the provided key type.</ref>\n> > <tt><tweak></tt>\n> > The 32 byte value which MUST be added to a private key to produce correct\n> ECDSA and/or Schnorr signature (\"key tweak\"). Signers SHOULD remove this field\n> after <tt>PSBT_IN_PARTIAL_SIG</tt> is constructed.\n> >\n> > 0, 2\n> > BIP-P2C\n> > }\n>\n> ==Security considerations==\n>\n> The scope of this proposal is deliberately kept narrow; it addresses\n> only spending of transaction outputs containing P2C tweaks - and does not\n> addresses construction of a new P2C commitments or transactions containing\n> them in their outputs.<ref>'''Why only spending of P2C tweaked outputs is\n> covered'''P2C tweaks commit to external data, some of which may represent\n> certain value (like in some sidechains, single-use-seal applications like RGB\n> etc). Creation of such outputs much allow hardware devices to understand the\n> structure of such extra-transaction data, which may be in different formats\n> and constantly involve. Thus, this should be addresses with a separate\n> standards (or be a vendor-based). The current proposal only touches the\n> question of spending an output which contained previously created P2C\n> commitment, which does not creates a new commitment and does not provides that\n> kind of risk of extra-blockchain value loses.</ref>\n>\n>\n> ==Rationale==\n>\n> <references/>\n>\n>\n> ==Compatibility==\n>\n> The proposal is compatible with the existing consensus rules and does not\n> require any of their modifications.\n>\n> The proposed P2C PSBT fields provides sufficient information for creating a\n> valid signatures for spendings of the following output types containing\n> tweaked\n> public keys:\n> - bare scripts,\n> - P2PK,\n> - P2PKH,\n> - P2SH,\n> - witness v0 P2WPKH and P2WSH,\n> - nested witness v0 P2WPKH-P2SH and P2WSH-P2SH,\n> - witness v1 P2TR outputs.\n>\n> Possible future witness versions, including witness v1 non-taproot outputs may\n> not be supported or covered by this BIP and may require addition of new fields\n> to the PSBT inputs.\n>\n>\n> ==Reference implementation==\n>\n> WIP\n>\n>\n> ==Acknowledgements==\n>\n> TBD\n>\n>\n> ==Test vectors==\n>\n> TBD\n>\n>\n> ==References==\n>\n> [1] Ilja Gerhardt, Timo Hanke. Homomorphic Payment Addresses and the\n>     Pay-to-Contract Protocol. arXiv:1212.3257 \\[cs.CR\\]\n>     <https://arxiv.org/pdf/1212.3257.pdf>\n> [2] Eternity Wall's \"sign-to-contract\" article.\n>     <https://blog.eternitywall.com/2018/04/13/sign-to-contract/>\n> [3] Peter Todd. OpenTimestamps: Scalable, Trust-Minimized, Distributed\n>     Timestamping with Bitcoin.\n>     <https://petertodd.org/2016/opentimestamps-announcement>\n> [4] Adam Back, Matt Corallo, Luke Dashjr, et al. Enabling Blockchain\n>     Innovations with Pegged Sidechains (commit5620e43). Appenxix A.\n>     <https://blockstream.com/sidechains.pdf>;;.\n> [5] Maxim Orlovsky, Rene Pickhardt, Federico Tenga, et al. Key\n>     tweaking: collision- resistant elliptic curve-based commitments.\n>     LNPBP-1 Standard.\n>     <https://github.com/LNP-BP/LNPBPs/blob/master/lnpbp-0001.md>\n> [6] Peter Todd. Single-use-seals. LNPBP-8 Standard.\n>     <https://github.com/LNP-BP/LNPBPs/blob/master/lnpbp-0008.md>\n>\n> --\n> Maxim Orlovsky\n> orlovsky at protonmail.com\n> GitHub: @dr-orlovsky\n> Twitter: @dr_orlovsky\n>\n> LNP/BP Standards Association\n> orlovsky at lnp-bp.org\n> github.com/LNP-BP\n>\n>\n>\n>"
            }
        ],
        "thread_summary": {
            "title": "BIP proposal: Pay-to-contract tweak fields for PSBT (bip-psbt-p2c)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Dr Maxim Orlovsky"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 9588
        }
    },
    {
        "title": "[bitcoin-dev] Taro: A Taproot Asset Representation Overlay",
        "thread_messages": [
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2022-04-05T15:06:03",
                "message_text_only": "Hi y'all,\n\nI'm excited to publicly publish a new protocol I've been working on over the\npast few months: Taro. Taro is a Taproot Asset Representation Overlay which\nallows the issuance of normal and also collectible assets on the main\nBitcoin\nchain. Taro uses the Taproot script tree to commit extra asset structured\nmeta\ndata based on a hybrid merkle tree I call a Merkle Sum Sparse Merkle Tree or\nMS-SMT. An MS-SMT combined the properties of a merkle sum tree, with a\nsparse\nmerkle tree, enabling things like easily verifiable asset supply proofs and\nalso efficient proofs of non existence (eg: you prove to me you're no longer\ncommitting to the 1-of-1 holographic beefzard card during our swap). Taro\nasset\ntransfers are then embedded in a virtual/overlay transaction graph which\nuses a\nchain of asset witnesses to provably track the transfer of assets across\ntaproot outputs. Taro also has a scripting system, which allows for\nprogrammatic unlocking/transfer of assets. In the first version, the\nscripting\nsystem is actually a recursive instance of the Bitcoin Script Taproot VM,\nmeaning anything that can be expressed in the latest version of Script can\nbe\nexpressed in the Taro scripting system. Future versions of the scripting\nsystem\ncan introduce new functionality on the Taro layer, like covenants or other\nupdates.\n\nThe Taro design also supports integration with the Lightning Network\n(BOLTs) as\nthe scripting system can be used to emulate the existing HTLC structure,\nwhich\nallows for multi-hop transfers of Taro assets. Rather than modify the\ninternal\nnetwork, the protocol proposes to instead only recognize \"assets at the\nedges\",\nwhich means that only the sender+receiver actually need to know about and\nvalidate the assets. This deployment route means that we don't need to\nbuild up\nan entirely new network and liquidity for each asset. Instead, all asset\ntransfers will utilize the Bitcoin backbone of the Lightning Network, which\nmeans that the internal routers just see Bitcoin transfers as normal, and\ndon't\neven know about assets at the edges. As a result, increased demand for\ntransfers of these assets as the edges (say like a USD stablecoin), which in\nwill turn generate increased demand of LN capacity, result in more\ntransfers, and\nalso more routing revenue for the Bitcoin backbone nodes.\n\nThe set of BIPs are a multi-part suite, with the following breakdown:\n * The main Taro protocol:\nhttps://github.com/Roasbeef/bips/blob/bip-taro/bip-taro.mediawiki\n * The MS-SMT structure:\nhttps://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-ms-smt.mediawiki\n * The Taro VM:\nhttps://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-vm.mediawiki\n * The Taro address format:\nhttps://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-addr.mediawiki\n * The Taro Universe concept:\nhttps://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-universe.mediawiki\n * The Taro flat file proof format:\nhttps://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-proof-file.mediawiki\n\nRather than post them all in line (as the text wouldn't fit in the allowed\nsize\nlimit), all the BIPs can be found above.\n\n-- Laolu\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220405/930b239c/attachment.html>"
            },
            {
                "author": "vjudeu at gazeta.pl",
                "date": "2022-04-05T20:23:05",
                "message_text_only": "When I see more and more proposals like this, where things are commited to Taproot outputs, then I think we should start designing \"miner-based commitments\". If someone is going to make a Bitcoin transaction and add a commitment for zero cost, just by tweaking some Taproot public key, then it is a benefit for the network, because then it is possible to get more things with no additional bytes. Instead of doing \"transaction-only\", people can do \"transaction+commitment\" for the same cost, that use case is positive.\n\nBut if someone is going to make a Bitcoin transaction only to commit things, where in other case that person would make no transaction at all, then I think we should have some mechanism for \"miner-based commitments\" that would allow making commitments in a standardized way. We always have one coinbase transaction for each block, it is consensus rule. So, by tweaking single public key in the coinbase transaction, it is possible to fit all commitments in one tweaked key, and even make it logarithmic by forming a tree of commitments.\n\nI think we cannot control user-based commitments, but maybe we should standardize miner-based commitments, for example to have a sorted merkle tree of commitments. Then, it would be possible to check if some commitment is a part of that tree or not (if it is always sorted, then it is present at some specified position or not, so by forming SPV-proof we can quickly prove, if some commitment is or is not a part of some miner Taproot commitment).\n\nOn 2022-04-05 15:06:03 user Olaoluwa Osuntokun <laolu32 at gmail.com> wrote:\n\nHi y'all,\n\nI'm excited to publicly publish a new protocol I've been working on over the past few months: Taro. Taro is a Taproot Asset Representation Overlay which allows the issuance of normal and also collectible assets on the main Bitcoin chain. Taro uses the Taproot script tree to commit extra asset structured meta data based on a hybrid merkle tree I call a Merkle Sum Sparse Merkle Tree or MS-SMT. An MS-SMT combined the properties of a merkle sum tree, with a sparse merkle tree, enabling things like easily verifiable asset supply proofs and also efficient proofs of non existence (eg: you prove to me you're no longer committing to the 1-of-1 holographic beefzard card during our swap). Taro asset transfers are then embedded in a virtual/overlay transaction graph which uses a chain of asset witnesses to provably track the transfer of assets across taproot outputs. Taro also has a scripting system, which allows for programmatic unlocking/transfer of assets. In the first version, the scripting system is actually a recursive instance of the Bitcoin Script Taproot VM, meaning anything that can be expressed in the latest version of Script can be expressed in the Taro scripting system. Future versions of the scripting system can introduce new functionality on the Taro layer, like covenants or other updates.\n\nThe Taro design also supports integration with the Lightning Network (BOLTs) as the scripting system can be used to emulate the existing HTLC structure, which allows for multi-hop transfers of Taro assets. Rather than modify the internal network, the protocol proposes to instead only recognize \"assets at the edges\", which means that only the sender+receiver actually need to know about and validate the assets. This deployment route means that we don't need to build up an entirely new network and liquidity for each asset. Instead, all asset transfers will utilize the Bitcoin backbone of the Lightning Network, which means that the internal routers just see Bitcoin transfers as normal, and don't even know about assets at the edges. As a result, increased demand for transfers of these assets as the edges (say like a USD stablecoin), which in will turn generate increased demand of LN capacity, result in more transfers, and also more routing revenue for the Bitcoin backbone nodes.\n\nThe set of BIPs are a multi-part suite, with the following breakdown:\n * The main Taro protocol: https://github.com/Roasbeef/bips/blob/bip-taro/bip-taro.mediawiki\n * The MS-SMT structure: https://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-ms-smt.mediawiki\n * The Taro VM: https://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-vm.mediawiki\n * The Taro address format: https://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-addr.mediawiki\n * The Taro Universe concept: https://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-universe.mediawiki\n * The Taro flat file proof format: https://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-proof-file.mediawiki\n\nRather than post them all in line (as the text wouldn't fit in the allowed size limit), all the BIPs can be found above.\n\n-- Laolu"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2022-04-06T00:43:23",
                "message_text_only": "Good morning vjudeu,\n\n> When I see more and more proposals like this, where things are commited to Taproot outputs, then I think we should start designing \"miner-based commitments\". If someone is going to make a Bitcoin transaction and add a commitment for zero cost, just by tweaking some Taproot public key, then it is a benefit for the network, because then it is possible to get more things with no additional bytes. Instead of doing \"transaction-only\", people can do \"transaction+commitment\" for the same cost, that use case is positive.\n>\n> But if someone is going to make a Bitcoin transaction only to commit things, where in other case that person would make no transaction at all, then I think we should have some mechanism for \"miner-based commitments\" that would allow making commitments in a standardized way. We always have one coinbase transaction for each block, it is consensus rule. So, by tweaking single public key in the coinbase transaction, it is possible to fit all commitments in one tweaked key, and even make it logarithmic by forming a tree of commitments.\n>\n> I think we cannot control user-based commitments, but maybe we should standardize miner-based commitments, for example to have a sorted merkle tree of commitments. Then, it would be possible to check if some commitment is a part of that tree or not (if it is always sorted, then it is present at some specified position or not, so by forming SPV-proof we can quickly prove, if some commitment is or is not a part of some miner Taproot commitment).\n\nYou might consider implementing `OP_BRIBE` from Drivechains, then.\n\nNote that if you *want* to have some data committed on the blockchain, you *have to* pay for the privilege of doing so --- miners are not obligated to put a commitment to *your* data on the coinbase for free.\nThus, any miner-based commitment needs to have a mechanism to offer payments to miners to include your commitment.\n\nYou might as well just use a transaction, and not tell miners that you want to commit data using some tweak of the public key (because the miners might then be induced to censor such commitments).\n\nIn short: there is no such thing as \"other case that person would make no transcation at all\", because you have to somehow bribe miners to include the commitment to your data, and you might as well use existing mechanisms (transactions that implicitly pay fees) for your data commitment, and get better censorship-resistance and privacy.\n\nNothing really prevents any transaction-based scheme from having multiple users that aggregate their data (losing privacy but aggregating their fees) to make a sum commitment and just make a single transaction that pays for the privilege of committing to the sum commitment.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Ruben Somsen",
                "date": "2022-04-07T17:14:03",
                "message_text_only": "Hi Laolu,\n\nNice work. This is an interesting protocol, in my opinion.\n\nSeeing as there's a large amount of overlap with RGB, a protocol which I\nhave examined quite extensively, I believe some of the issues I uncovered\nin that project also apply here.\n\nThe biggest issue revolves around the scripting expectations for this\nprotocol. Taro is described as being able to have its own scripting\ncapabilities that will initially be similar to Bitcoin and eventually be\nmade to do more. I'm afraid this is fundamentally impossible. Conditional\nscripts (and thus most scripts that could potentially be of interest) won't\nbe possible if the satisfaction of the condition is not recorded publicly\non-chain.\n\nThe core problem here is that you have two levels of scripting. At the\nBitcoin level the UTXO is encumbered by the Bitcoin script, then at the\nTaro level you have yet another script. This may seem similar at first\nglance to how taproot has a key path and a script path, but there are a few\nkey differences. In taproot only one of the two needs to be satisfied,\nwhile here you need to satisfy both. Furthermore, the Taro script is not\nenforced by Bitcoin, meaning those who control the Bitcoin script can\nalways choose to ignore the Taro script and destroy the Taro assets as a\nresult.\n\nI'll describe an example. Imagine Alice wants to send Bob a payment inside\nTaro, but she wants to make it conditional. Bob gets the Taro tokens if he\nreveals a pre-image, while Alice can claim the tokens back after the\ntimelock expires (i.e. the minimum scripting requirements for HTLCs). Alice\nstarts by locking up coins in a 2-of-2 multisig on the mainchain with some\nTaro tokens inside. She then gives Bob a pre-signed transaction that only\nrequires him to reveal the pre-image in order to claim the tokens. The\nissue here is that from Bitcoin's perspective, you're giving Bob a valid\ntransaction, regardless of whether he reveals the pre-image. If Bob\nmaliciously broadcasts it without the pre-image, he will have destroyed\nyour tokens.\n\nOf course this was a contrived example, as these conditions could simply\ntake place entirely in Bitcoin script, but it demonstrates that Taro script\nfundamentally cannot handle conditional payments, which is the basis for\nany meaningful script other than self-encumbering covenants (i.e. if you\nsend your Taro tokens in any way other than specified, the tokens will be\ndestroyed). Luckily this has no effect on whether Taro can function over\nLightning, because solely relying on Bitcoin's scripting capabilities\nshould be sufficient for that use case.\n\nAs a side note, it may be worth pointing out that it *is* possible to\ncreate conditional payments if the satisfaction of the condition is\nrecorded publicly on the mainchain (e.g. in an op_return), making it sort\nof a hybrid on-chain/off-chain model, but it would increase complexity\nconsiderably. I can explain this model in more detail, if it happens to\ninterest you.\n\nNow there's a second issue I want to bring up, but unfortunately my\nunderstanding of how exactly you made assets divisible is not complete\nenough to know how this problem might have manifested in Taro. Nonetheless,\nI'll try to describe it.\n\nOne of the core concepts of Taro/RGB is that the sender of the token has to\nreveal the history to the recipient. In case of an NFT the history is\nsimply every prior owner and grows linearly, but in the case of fungible\ntokens things are more complicated. Let's say Carol receives 2 fungible\nTaro tokens from Alice and 3 fungible Taro tokens from Bob. Now Carol wants\nto send 4 of them to Dave and keep 1. There are two possible designs here:\n\na.) The token history remains separate \u2013 Dave receives Alice's 2 tokens,\nBob's tokens are split and he receives 2 (or 3 from Bob 1 from Alice).\n\nb.) The token history gets merged \u2013 Dave receives 4 tokens (linking the new\noutput with both Alice and Bob's history).\n\nThe issue with a.) is that you're only ever fragmenting tokens, so\neventually you end up with lots of tiny but separate amounts. This will\ncause making large payments to involve sending lots of tokens, each with\ntheir own history. Under this model, I suspect the fixed value token model\n(e.g. 1, 2, 4, 8) might be preferable, as this prevents the entire supply\nfrom getting split into tiny fragments.\n\nThe issue with b.) is that you end up with a linked transaction graph, just\nlike in Bitcoin. If you pick a random Bitcoin UTXO and try to trace it back\nto a coinbase, you'll quickly find that it could have come from many of\nthem. The graph that you'd traverse to get to all of these coinbases is\nequivalent to the amount of history that a recipient of a Taro token has to\nvalidate in order to accept it, which I suspect quickly becomes a\nbottleneck that is not unlike that of a regular blockchain.\n\nIt'd probably be wise to make a model of the potential transaction flow,\nand simulate how it affects the size of the history in order to determine\nwhat's the best approach and to generally get a better idea of how it\naffects scaling. Also, the repeated sharing of history makes me skeptical\nabout the privacy this protocol may provide. If large amounts of history\nmoved through the hands of a large number of people, it wouldn't be very\nprivate.\n\nThere's a third third smaller issue I want to point out, which is easily\nfixable and perhaps was just a typo. In your slides, you showed a\nscreenshot of a taproot tree containing the Taro tree as the third element\nof four. This implies the location of the Taro tree inside the taproot tree\nis not fixed. What needs to be prevented here is that a taproot tree\ncontains more than one Taro tree, as that would enable the owner of the\ncommitment to show different histories to different people.\n\nFinally, let me conclude with two questions. Could you clarify the purpose\nof the sparse merkle tree in your design? I suppose you want to be able to\nopen a commitment and show it contains a certain asset without having to\nreveal any of the other assets and simultaneously guarantee that you\nhaven't committed to the same asset twice (i.e. the SMT guarantees each\nasset gets a specific location in the tree)? Or is there another reason?\n\nAnd the second question \u2013 when transferring Taro token ownership from one\nBitcoin UTXO to another, do you generate a new UTXO for the recipient or do\nyou support the ability to \"teleport\" the tokens to an existing UTXO like\nhow RGB does it? If the latter, have you given consideration to timing\nissues that might occur when someone sends tokens to an existing UTXO that\nsimultaneously happens to get spent by the owner?\n\nIn any case, I hope this email was useful. Feel free to reach out if I can\nclarify anything.\n\nGood luck with the protocol.\n\nBest regards,\nRuben\n\nOn Tue, Apr 5, 2022 at 5:06 PM Olaoluwa Osuntokun via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi y'all,\n>\n> I'm excited to publicly publish a new protocol I've been working on over\n> the\n> past few months: Taro. Taro is a Taproot Asset Representation Overlay which\n> allows the issuance of normal and also collectible assets on the main\n> Bitcoin\n> chain. Taro uses the Taproot script tree to commit extra asset structured\n> meta\n> data based on a hybrid merkle tree I call a Merkle Sum Sparse Merkle Tree\n> or\n> MS-SMT. An MS-SMT combined the properties of a merkle sum tree, with a\n> sparse\n> merkle tree, enabling things like easily verifiable asset supply proofs and\n> also efficient proofs of non existence (eg: you prove to me you're no\n> longer\n> committing to the 1-of-1 holographic beefzard card during our swap). Taro\n> asset\n> transfers are then embedded in a virtual/overlay transaction graph which\n> uses a\n> chain of asset witnesses to provably track the transfer of assets across\n> taproot outputs. Taro also has a scripting system, which allows for\n> programmatic unlocking/transfer of assets. In the first version, the\n> scripting\n> system is actually a recursive instance of the Bitcoin Script Taproot VM,\n> meaning anything that can be expressed in the latest version of Script can\n> be\n> expressed in the Taro scripting system. Future versions of the scripting\n> system\n> can introduce new functionality on the Taro layer, like covenants or other\n> updates.\n>\n> The Taro design also supports integration with the Lightning Network\n> (BOLTs) as\n> the scripting system can be used to emulate the existing HTLC structure,\n> which\n> allows for multi-hop transfers of Taro assets. Rather than modify the\n> internal\n> network, the protocol proposes to instead only recognize \"assets at the\n> edges\",\n> which means that only the sender+receiver actually need to know about and\n> validate the assets. This deployment route means that we don't need to\n> build up\n> an entirely new network and liquidity for each asset. Instead, all asset\n> transfers will utilize the Bitcoin backbone of the Lightning Network, which\n> means that the internal routers just see Bitcoin transfers as normal, and\n> don't\n> even know about assets at the edges. As a result, increased demand for\n> transfers of these assets as the edges (say like a USD stablecoin), which\n> in\n> will turn generate increased demand of LN capacity, result in more\n> transfers, and\n> also more routing revenue for the Bitcoin backbone nodes.\n>\n> The set of BIPs are a multi-part suite, with the following breakdown:\n>  * The main Taro protocol:\n> https://github.com/Roasbeef/bips/blob/bip-taro/bip-taro.mediawiki\n>  * The MS-SMT structure:\n> https://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-ms-smt.mediawiki\n>  * The Taro VM:\n> https://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-vm.mediawiki\n>  * The Taro address format:\n> https://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-addr.mediawiki\n>  * The Taro Universe concept:\n> https://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-universe.mediawiki\n>  * The Taro flat file proof format:\n> https://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-proof-file.mediawiki\n>\n> Rather than post them all in line (as the text wouldn't fit in the allowed\n> size\n> limit), all the BIPs can be found above.\n>\n> -- Laolu\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220407/88044966/attachment.html>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2022-04-08T17:48:02",
                "message_text_only": "(this might be a double post as it ran into the size limit)\n\nHi Ruben,\n\nThanks! I don't really consider things final until we have a good set of\ntest\nvectors in the final set, after which we'd start to transition the set of\ndocuments beyond the draft state.\n\n> Seeing as there's a large amount of overlap with RGB, a protocol which I\nhave\n> examined quite extensively, I believe some of the issues I uncovered in\nthat\n> project also apply here.\n\nI'm happy to hear that someone was actually able to extract enough details\nfrom\nthe RGB devs/docs to be able to analyze it properly! In the past I tried to\nask\ntheir developers questions about how things like transfers worked[1][2],\nbut it\nseemed either people didn't know, or they hadn't finished the core design\n(large TBD sections) as they were working on adding other components to\ncreate\na \"new new Internet\".\n\n> Furthermore, the Taro script is not enforced by Bitcoin, meaning those who\n> control the Bitcoin script can always choose to ignore the Taro script and\n> destroy the Taro assets as a result.\n\nThis is correct, as a result in most contexts, an incentive exists for the\nholder of an asset to observe the Taro validation rules as otherwise, their\nassets are burnt in the process from the PoV of asset verifiers. In the\nsingle\nparty case things are pretty straight forward, but more care needs to be\ntaken\nin cases where one attempts to express partial application and permits\nanyone\nto spend a UTXO in question.\n\nBy strongly binding all assets to Bitcoin UTXOs, we resolve issues related\nto\ndouble spending or duplicate assets, but needs to mind the fact that assets\ncan\nbe burnt if a user doesn't supply a valid witness. There're likely ways to\nget\naround this by lessening the binding to Bitcoin UTXO's, but then the system\nwould need to be able to collect, retain and order all the set of possible\nspends, essentially requiring a parallel network. The core of the system as\nit\nstands today is pretty simple (which was an explicit design goal to avoid\ngetting forever distracted by the large design space), with a minimal\nimplementation being relatively compact given all the Bitcoin context/design\nre-use.\n\nAlso one cool trait of the way commitments are designed is that the Taro\ncommitment impact the final derived taproot output key. As a result,\npotential\nScript extensions like TAPLEAF_UPDATE_VERIFY can actually be used to further\n_bind_ Taro transitions at the Bitcoin level, without Bitcoin explicitly\nneeding to be aware of the Taro rules. In short, covenants can allow Bitcoin\nScript to bind Taro state transitions, without any of the logic bleeding\nover,\nas the covenant just checks for a certain output key, which is a function of\nthe Taro commitment being present.\n\n> There are two possible designs here: a.) The token history remains\nseparate \u2013\n> Dave receives Alice's 2 tokens, Bob's tokens are split and he receives 2\n(or\n> 3 from Bob 1 from Alice).  b.) The token history gets merged \u2013 Dave\nreceives\n> 4 tokens (linking the new output with both Alice and Bob's history).\n\nMechanically, with respect to the way the change/UTXOs work in the system,\nboth\nare expressible: Dave can chose to merge them into a single UTXO (with the\nappropriate witnesses included for each of them), or Dave can keep them\ndistinct in the asset tree. You're correct in that asset issuers may opt to\nissue assets in denominations vs allowing them to be fully divisible.\nUltimately, the compatibility with the LN layer will be the primary way to\nkeep\nasset histories compressed, without relying on another trust model, or\nrelying\non the incentive of an asset issuer to do a \"re-genesis\" which would\neffectively re-create assets in a supply-preserving manner (burn N units,\nthen\nproduce a new genesis outpoint for N units). Alternatively, implementations\ncan\nalso chose to utilize a checkpointing system similar to what some Bitcoin\nfull\nnode clients do today.\n\n>  is that you end up with a linked transaction graph, just like in Bitcoin\n\nThis is correct, the protocol doesn't claim to achieve better privacy\nguarantees than the base chain. However inheriting this transaction graph\nmodel\nimo makes it easier for existing Bitcoin developers to interact with the\nsystem, and all the data structures are very familiar tooling wise. However\nany\nprivacy enhancing protocol used for on-chain top-level Bitcoin UTXOs can\nalso\nbe applied to Taro, so people can use things like coinswap and coinjoin,\nalong\nwith LN to shed prior coin lineages.\n\n> This implies the location of the Taro tree inside the taproot tree is not\n> fixed. What needs to be prevented here is that a taproot tree contains\nmore\n> than one Taro tree, as that would enable the owner of the commitment to\nshow\n> different histories to different people.\n\nGreat observation, I patched a similar issue much earlier in the design\nprocess\nby strongly binding all signatures to a prevOut super-set (so the outpoint\nalong with the unique key apth down into the tree), which prevents\nduplicating\nthe asset across outputs, as signature verification would fail.\n\nIn terms of achieving this level of binding within the Taro tree itself, I\ncan\nthink of three options:\n\n  1. Require the Taro commitment to be in the first/last position within the\n  (fully sorted?) Tapscript tree, and also require its sibling to be the\nhash\n  of some set string (all zeroes or w/e). We'd require the sibling to the\nempty\n  as the tapscript hashes are sorted before hashing so you sort of lose that\n  final ordering information.\n\n  2. Include the position of the Taro commitment within the tapscript tree\n  within the sighash digest (basically the way the single input in the\nvirtual\n  transaction is created from the TLV structure).\n\n  3. Include the position of the Taro commitment within the tapscript tree\nas\n  part of the message that's hashed to derive asset IDs.\n\nAFAICT, #1 resolves the issue entirely, #2 renders transfers outside of the\ncanonical history invalid, and #2 minds hte asset ID to the initial position\nmeaning you can track a canonical lineage from the very start.\n\n> Finally, let me conclude with two questions. Could you clarify the\npurpose of\n> the sparse merkle tree in your design?\n\nSure, it does a few things:\n\n  * Non-inclusion proofs so I can do things like prove to your I'm no longer\n    committing to my 1-of-1 holographic beefzard card when we swap.\n\n  * The key/tree structure means that the tree is history independent,\nmeaning\n    that if you and I insert the same things into the tree in a different\n    order, we'll get the same root hash. This is useful for things like\n    tracking all the issuance events for a given asset, or allowing two\n    entities to sync their knowledge/history of a single asset, or a set of\n    assets.\n\n  * Each asset/script mapping to a unique location within the tree means\nit's\n    easy to ensure uniqueness of certain items/commitments (not possible to\n    commit to the same asset ID twice in the tree as an example).\n\n  * The merkle-sum trait means I that validation is made simpler, as you\njust\n    check that the input+output commitment sum to the same value, and I can\n    also verify that if we're swapping, then you aren't committing to more\n    units that exist (so I make sure I don't get an invalid split).\n\n> And the second question \u2013 when transferring Taro token ownership from one\n> Bitcoin UTXO to another, do you generate a new UTXO for the recipient or\ndo\n> you support the ability to \"teleport\" the tokens to an existing UTXO like\nhow\n> RGB does it? If the latter, have you given consideration to timing issues\n> that might occur when someone sends tokens to an existing UTXO that\n> simultaneously happens to get spent by the owner?\n\nSo for interactive transfers, the UTXOs generated as just the ones part of\nthe\nMIMO transaction. When sending via the address format, a new non-dust\noutput is\ncreated which holds the new commitment, and uses an internal key provided by\nthe receiver, so only they can move the UTXO. Admittedly, I'm not familiar\nwith\nhow the RGB \"teleport\" technique works, I checked out some slide decks a\nwhile\nback, but they were mostly about all the new components they were creating\nand\ntheir milestone of 1 million lines of code. Can you point me to a coherent\nexplanation of the technique? I'd love to compare/contrast so we can analyze\nthe diff tradeoffs being made here.\n\nThanks for an initial round of feedback/analysis, I'll be updating the draft\nover the next few days to better spell things out and particularly that\ncommitment/sighash uniqueness trait.\n\n-- Laolu\n\n[1]:\nhttps://twitter.com/roasbeef/status/1330654936074371073?s=20&t=feV0kWAjJ6MTQlFm06tSxA\n[2]:\nhttps://twitter.com/roasbeef/status/1330692571736117249?s=20&t=feV0kWAjJ6MTQlFm06tSxA\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220408/53fd998f/attachment.html>"
            },
            {
                "author": "Ruben Somsen",
                "date": "2022-04-10T16:51:52",
                "message_text_only": "Hi Laolu,\n\n>happy to hear that someone was actually able to extract enough details\nfrom the RGB devs/docs to be able to analyze it properly\n\nActually, even though I eventually puzzled everything together, this did\nnot go well for me either. There is a ton of documentation, but it's a maze\nof unhelpful details, and none of it clearly maps out the fundamental\ndesign. I was also disappointed by the poor response I received when asking\nquestions, and I ended up getting chastised for helping others understand\nit and pointing out potential flaws[1][2][3].Given my experience, I think\nthe project is not in great shape, so the decision to rebuild from scratch\nseems right to me.\n\nThat said, in my opinion the above should not factor into the decision of\nwhether RGB should be credited in the Taro documentation. The design\nclearly precedes (and seems to have inspired) Taro, so in my opinion this\nshould be acknowledged. Also, the people that are responsible for the\ncurrent shape of RGB aren't the people who originated the idea, so it would\nnot be fair to the originators either (Peter Todd, Alekos Filini, Giacomo\nZucco).\n\n>assets can be burnt if a user doesn't supply a valid witness\n\nI am in agreement with what you said, but it is not clear to me whether we\nare on the same page. What I tried to say was that it does not make sense\nto build scripting support into Taro, because you can't actually do\nanything interesting with it due to this limitation. The only type of smart\ncontract you can build is one where you limit what the owner (as defined by\nBitcoin's script) can do with their own Taro tokens, or else he will burn\nthem \u2013 not very useful. Anything involving a conditional transfer of\nownership to either A or B (i.e. any meaningful type of script) won't work.\nDo you see what I mean, or should I elaborate further?\n\n>TAPLEAF_UPDATE_VERIFY can actually be used to further _bind_ Taro transitions\nat the Bitcoin level, without Bitcoin explicitly needing to be aware\n\nThat is conceptually quite interesting. So theoretically you could get\nBitcoin covenants to enforce certain spending conditions on Taro assets.\nNot sure how practical that ends up being, but intriguing to consider.\n\n>asset issuer to do a \"re-genesis\"\n\nYes, RGB suggested the same thing, and this can work under some\ncircumstances, but note that this won't help for tokens that aim to have a\npublicly audited supply, as the proof that a token was legitimately\nre-issued is the history of the previous token (so you'd actually be making\nthings worse, as now everyone has to verify it). And of course the idea\nalso requires the issuer to be active, which may not always be the case.\n\n>I'm not familiar with how the RGB \"teleport\" technique works [...] Can you\npoint me to a coherent explanation of the technique\n\nTo my knowledge no good explanation exists. \"Teleporting\" is just what I\nthought was a good way of describing it. Basically, in your design when\nAlice wants to send a Taro token to Bob, Alice has to spend her own output,\nmake a new output for Bob, and make a change output for herself. Inside the\nTaro tree you'll then point to the index of Bob's output in order to assign\nthe tokens to his new output. Instead of pointing to the index, you could\npoint to the outpoint (txid, index) of an existing UTXO owned by Bob, thus\n\"teleporting\" the Taro tokens to this UTXO. This saves on-chain space, as\nnow you don't have to create a new output for Bob (but now you have to\nensure Bob doesn't spend from this output while you're simultaneously\nsending tokens to it, as I mentioned in my previous post, as this would\ndestroy the tokens).\n\nThe above also reminds me of another potential issue which you need to be\naware of, if you're not already. Similar to my comment about how the\nlocation of the Taro tree inside the taproot tree needs to be deterministic\nfor the verifier, the output in which you place the Taro tree also needs to\nbe. If it's not, then you can commit to a different Taro tree in each\noutput of the transaction, allowing you to secretly fork the history.\n\nHope this helps.\n\nCheers,\nRuben\n\n[1] https://twitter.com/SomsenRuben/status/1397267261619064836\n[2] https://twitter.com/SomsenRuben/status/1397559406565462017\n[3] https://twitter.com/afilini/status/1397484341236797441\n\nOn Fri, Apr 8, 2022 at 7:48 PM Olaoluwa Osuntokun <laolu32 at gmail.com> wrote:\n\n> (this might be a double post as it ran into the size limit)\n>\n> Hi Ruben,\n>\n> Thanks! I don't really consider things final until we have a good set of\n> test\n> vectors in the final set, after which we'd start to transition the set of\n> documents beyond the draft state.\n>\n> > Seeing as there's a large amount of overlap with RGB, a protocol which I\n> have\n> > examined quite extensively, I believe some of the issues I uncovered in\n> that\n> > project also apply here.\n>\n> I'm happy to hear that someone was actually able to extract enough details\n> from\n> the RGB devs/docs to be able to analyze it properly! In the past I tried\n> to ask\n> their developers questions about how things like transfers worked[1][2],\n> but it\n> seemed either people didn't know, or they hadn't finished the core design\n> (large TBD sections) as they were working on adding other components to\n> create\n> a \"new new Internet\".\n>\n> > Furthermore, the Taro script is not enforced by Bitcoin, meaning those\n> who\n> > control the Bitcoin script can always choose to ignore the Taro script\n> and\n> > destroy the Taro assets as a result.\n>\n> This is correct, as a result in most contexts, an incentive exists for the\n> holder of an asset to observe the Taro validation rules as otherwise, their\n> assets are burnt in the process from the PoV of asset verifiers. In the\n> single\n> party case things are pretty straight forward, but more care needs to be\n> taken\n> in cases where one attempts to express partial application and permits\n> anyone\n> to spend a UTXO in question.\n>\n> By strongly binding all assets to Bitcoin UTXOs, we resolve issues related\n> to\n> double spending or duplicate assets, but needs to mind the fact that\n> assets can\n> be burnt if a user doesn't supply a valid witness. There're likely ways to\n> get\n> around this by lessening the binding to Bitcoin UTXO's, but then the system\n> would need to be able to collect, retain and order all the set of possible\n> spends, essentially requiring a parallel network. The core of the system\n> as it\n> stands today is pretty simple (which was an explicit design goal to avoid\n> getting forever distracted by the large design space), with a minimal\n> implementation being relatively compact given all the Bitcoin\n> context/design\n> re-use.\n>\n> Also one cool trait of the way commitments are designed is that the Taro\n> commitment impact the final derived taproot output key. As a result,\n> potential\n> Script extensions like TAPLEAF_UPDATE_VERIFY can actually be used to\n> further\n> _bind_ Taro transitions at the Bitcoin level, without Bitcoin explicitly\n> needing to be aware of the Taro rules. In short, covenants can allow\n> Bitcoin\n> Script to bind Taro state transitions, without any of the logic bleeding\n> over,\n> as the covenant just checks for a certain output key, which is a function\n> of\n> the Taro commitment being present.\n>\n> > There are two possible designs here: a.) The token history remains\n> separate \u2013\n> > Dave receives Alice's 2 tokens, Bob's tokens are split and he receives 2\n> (or\n> > 3 from Bob 1 from Alice).  b.) The token history gets merged \u2013 Dave\n> receives\n> > 4 tokens (linking the new output with both Alice and Bob's history).\n>\n> Mechanically, with respect to the way the change/UTXOs work in the system,\n> both\n> are expressible: Dave can chose to merge them into a single UTXO (with the\n> appropriate witnesses included for each of them), or Dave can keep them\n> distinct in the asset tree. You're correct in that asset issuers may opt to\n> issue assets in denominations vs allowing them to be fully divisible.\n> Ultimately, the compatibility with the LN layer will be the primary way to\n> keep\n> asset histories compressed, without relying on another trust model, or\n> relying\n> on the incentive of an asset issuer to do a \"re-genesis\" which would\n> effectively re-create assets in a supply-preserving manner (burn N units,\n> then\n> produce a new genesis outpoint for N units). Alternatively,\n> implementations can\n> also chose to utilize a checkpointing system similar to what some Bitcoin\n> full\n> node clients do today.\n>\n> >  is that you end up with a linked transaction graph, just like in Bitcoin\n>\n> This is correct, the protocol doesn't claim to achieve better privacy\n> guarantees than the base chain. However inheriting this transaction graph\n> model\n> imo makes it easier for existing Bitcoin developers to interact with the\n> system, and all the data structures are very familiar tooling wise.\n> However any\n> privacy enhancing protocol used for on-chain top-level Bitcoin UTXOs can\n> also\n> be applied to Taro, so people can use things like coinswap and coinjoin,\n> along\n> with LN to shed prior coin lineages.\n>\n> > This implies the location of the Taro tree inside the taproot tree is not\n> > fixed. What needs to be prevented here is that a taproot tree contains\n> more\n> > than one Taro tree, as that would enable the owner of the commitment to\n> show\n> > different histories to different people.\n>\n> Great observation, I patched a similar issue much earlier in the design\n> process\n> by strongly binding all signatures to a prevOut super-set (so the outpoint\n> along with the unique key apth down into the tree), which prevents\n> duplicating\n> the asset across outputs, as signature verification would fail.\n>\n> In terms of achieving this level of binding within the Taro tree itself, I\n> can\n> think of three options:\n>\n>   1. Require the Taro commitment to be in the first/last position within\n> the\n>   (fully sorted?) Tapscript tree, and also require its sibling to be the\n> hash\n>   of some set string (all zeroes or w/e). We'd require the sibling to the\n> empty\n>   as the tapscript hashes are sorted before hashing so you sort of lose\n> that\n>   final ordering information.\n>\n>   2. Include the position of the Taro commitment within the tapscript tree\n>   within the sighash digest (basically the way the single input in the\n> virtual\n>   transaction is created from the TLV structure).\n>\n>   3. Include the position of the Taro commitment within the tapscript tree\n> as\n>   part of the message that's hashed to derive asset IDs.\n>\n> AFAICT, #1 resolves the issue entirely, #2 renders transfers outside of the\n> canonical history invalid, and #2 minds hte asset ID to the initial\n> position\n> meaning you can track a canonical lineage from the very start.\n>\n> > Finally, let me conclude with two questions. Could you clarify the\n> purpose of\n> > the sparse merkle tree in your design?\n>\n> Sure, it does a few things:\n>\n>   * Non-inclusion proofs so I can do things like prove to your I'm no\n> longer\n>     committing to my 1-of-1 holographic beefzard card when we swap.\n>\n>   * The key/tree structure means that the tree is history independent,\n> meaning\n>     that if you and I insert the same things into the tree in a different\n>     order, we'll get the same root hash. This is useful for things like\n>     tracking all the issuance events for a given asset, or allowing two\n>     entities to sync their knowledge/history of a single asset, or a set of\n>     assets.\n>\n>   * Each asset/script mapping to a unique location within the tree means\n> it's\n>     easy to ensure uniqueness of certain items/commitments (not possible to\n>     commit to the same asset ID twice in the tree as an example).\n>\n>   * The merkle-sum trait means I that validation is made simpler, as you\n> just\n>     check that the input+output commitment sum to the same value, and I can\n>     also verify that if we're swapping, then you aren't committing to more\n>     units that exist (so I make sure I don't get an invalid split).\n>\n> > And the second question \u2013 when transferring Taro token ownership from one\n> > Bitcoin UTXO to another, do you generate a new UTXO for the recipient or\n> do\n> > you support the ability to \"teleport\" the tokens to an existing UTXO\n> like how\n> > RGB does it? If the latter, have you given consideration to timing issues\n> > that might occur when someone sends tokens to an existing UTXO that\n> > simultaneously happens to get spent by the owner?\n>\n> So for interactive transfers, the UTXOs generated as just the ones part of\n> the\n> MIMO transaction. When sending via the address format, a new non-dust\n> output is\n> created which holds the new commitment, and uses an internal key provided\n> by\n> the receiver, so only they can move the UTXO. Admittedly, I'm not familiar\n> with\n> how the RGB \"teleport\" technique works, I checked out some slide decks a\n> while\n> back, but they were mostly about all the new components they were creating\n> and\n> their milestone of 1 million lines of code. Can you point me to a coherent\n> explanation of the technique? I'd love to compare/contrast so we can\n> analyze\n> the diff tradeoffs being made here.\n>\n> Thanks for an initial round of feedback/analysis, I'll be updating the\n> draft\n> over the next few days to better spell things out and particularly that\n> commitment/sighash uniqueness trait.\n>\n> -- Laolu\n>\n> [1]:\n> https://twitter.com/roasbeef/status/1330654936074371073?s=20&t=feV0kWAjJ6MTQlFm06tSxA\n> [2]:\n> https://twitter.com/roasbeef/status/1330692571736117249?s=20&t=feV0kWAjJ6MTQlFm06tSxA\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220410/99b8e403/attachment-0001.html>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2022-04-11T19:51:55",
                "message_text_only": "Hi Ruben,\n\n> Also, the people that are responsible for the current shape of RGB aren't\n> the people who originated the idea, so it would not be fair to the\n> originators either (Peter Todd, Alekos Filini, Giacomo Zucco).\n\nSure I have no problems acknowledging them in the current BIP draft. Both\nthe protocols build off of ideas re client-side-validation, but then end up\nexploring different parts of the large design space.  Peter Todd is already\nthere, but I can add the others you've listed. I might even just expand that\nsection into a longer \"Related Work\" section along the way.\n\n> What I tried to say was that it does not make sense to build scripting\n> support into Taro, because you can't actually do anything interesting with\n> it due to this limitation.  can do with their own Taro tokens, or else he\n> will burn them \u2013 not very useful\n\nI agree that the usage will be somewhat context specific, and dependent on\nthe security properties one is after. In the current purposefully simplified\nversion, it's correct that ignoring the rules leads to assets being burnt,\nbut in most cases imo that's a sufficient enough incentive to maintain and\nvalidate the relevant set of witnesses.\n\nI was thinking about the scripting layer a bit over the weekend, and came up\nwith a \"issuance covenant\" design sketch that may or may not be useful. At a\nhigh level, lets say we extend the system to allow a specified (so a new\nasset type) or generalized script to be validated when an asset issuance\ntransaction is being validated. If we add some new domain specific covenant\nop codes at the Taro level, then we'd be able to validate issuance events\nlike:\n\n  * \"Issuing N units of this assets can only be done if 1.5*N units of BTC\n    are present in the nth output of the minting transaction. In addition,\n    the output created must commit to a NUMs point for the internal key,\n    meaning that only a script path is possible. The script paths must be\n    revealed, with the only acceptable unlocking leaf being a time lock of 9\n    months\".\n\nI don't fully have a concrete protocol that would use something like that,\nbut that was an attempt to express certain collateralization requirements\nfor issuing certain assets. Verifiers would only recognize that asset if the\nissuance covenant script passes, and (perhaps) the absolute timelock on\nthose coins hasn't expired yet. This seems like a useful primitive for\ncreating assets that are somehow backed by on-chain BTC collateralization.\nHowever this is just a design sketch that needs to answer questions like:\n\n  * are the assets still valid after that timeout period, or are they\n    considered to be burnt?\n\n  * assuming that the \"asset key family\" (used to authorize issuance of\n    related assets) are jointly owned, and maintained in a canonical\n    Universe, then would it be possible for 3rd parties to verify the level\n    of collateralization on-chain, with the join parties maintaining the\n    pool of collateralized assets accordingly?\n\n  * continuing with the above, is it feasible to use a DLC script within one\n    of these fixed tapscript leaves to allow more collateral to be\n    added/removed from the pool backing those assets?\n\nI think it's too early to conclude that the scripting layer isn't useful.\nOver time I plan to add more concrete ideas like the above to the section\ntracking the types of applications that can be built on Taro.\n\n> So theoretically you could get Bitcoin covenants to enforce certain\n> spending conditions on Taro assets. Not sure how practical that ends up\n> being, but intriguing to consider.\n\nExactly! Exactly how practical it ends up being would depend on the types of\ncovenants deployed in the future. With something like a TLUV and OP_CAT (as\nthey're sufficiently generalized vs adding op codes to very the proofs) a\nScript would be able to re-create the set of commitments to restrict the set\nof outputs that can be created after spending. One would use OP_CAT to\nhandle re-creating the taro asset root, and TLUV (or something similar) to\nhandle the Bitcoin tapscript part (swap out leaf index 0 where the taro\ncommitment is, etc).\n\n> The above also reminds me of another potential issue which you need to be\n> aware of, if you're not already. Similar to my comment about how the\n> location of the Taro tree inside the taproot tree needs to be\n> deterministic for the verifier, the output in which you place the Taro\n> tree also needs to be\n\nYep, the location needs to be fully specified which includes factoring the\noutput index as well. A simple way to restrict this would just to say it's\nalways the first output. Otherwise, you could lift the output index into the\nasset ID calculation.\n\n-- Laolu\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220411/b1c5440a/attachment-0001.html>"
            },
            {
                "author": "Ruben Somsen",
                "date": "2022-04-15T13:14:40",
                "message_text_only": "Hi Laolu,\n\n> ignoring the rules leads to assets being burnt, but in most cases imo\nthat's a sufficient enough incentive to maintain and validate the relevant\nset of witnesses\n\nI agree it is sufficient, but only because using Bitcoin script without an\nadditional scripting language inside of Taro is already sufficient. Perhaps\nyou could show me a concrete example where you think replicating Bitcoin's\nscripting capabilities inside Taro can be useful, so I can show you where I\nthink it fails.\n\n> came up with a \"issuance covenant\" design sketch that may or may not be\nuseful\n\nTo summarize my view from my first post, I basically think there are two\nbroad exceptions to the \"can't do scripting\" rule:\n\n1. Self-encumbrance: you have to use the token according to the rules, else\nthe token becomes burned/invalid. The example you're giving here can be\nsaid to fall under this category. The usefulness of this is\nextremely narrow, and merely replicating Bitcoin's script inside of Taro is\ncertainly not sufficient to achieve it.\n\n2. On-chain validation: instead of keeping the satisfaction of the script\noff-chain, you publish it on-chain in the Bitcoin blockchain. This works,\nbut breaks a fundamental design goal of Taro/RGB (remaining off-chain), and\nadds significant complexity.\n\nThese two points lead me to my conclusion that off-chain validation\nprotocols (to rule out the exception in point 2) can't do any meaningful\n(to rule out the exception in point 1) scripting.\n\nThis doesn't mean you can't still add some scripting to facilitate certain\nuse cases that fall under the two exceptions, but a regular scripting\nlanguage for on-chain payments such as Bitcoin's is not going to cut it (at\nleast not without significant changes).\n\nPersonally I'd be inclined to leave out the scripting language altogether\n(as the encumbrance of Bitcoin UTXOs is sufficient in most cases), unless\nyou have a very specific and compelling use case in mind that justify the\ncomplexity.\n\nCheers,\nRuben\n\n\nOn Mon, Apr 11, 2022 at 9:52 PM Olaoluwa Osuntokun <laolu32 at gmail.com>\nwrote:\n\n> Hi Ruben,\n>\n> > Also, the people that are responsible for the current shape of RGB aren't\n> > the people who originated the idea, so it would not be fair to the\n> > originators either (Peter Todd, Alekos Filini, Giacomo Zucco).\n>\n> Sure I have no problems acknowledging them in the current BIP draft. Both\n> the protocols build off of ideas re client-side-validation, but then end up\n> exploring different parts of the large design space.  Peter Todd is already\n> there, but I can add the others you've listed. I might even just expand\n> that\n> section into a longer \"Related Work\" section along the way.\n>\n> > What I tried to say was that it does not make sense to build scripting\n> > support into Taro, because you can't actually do anything interesting\n> with\n> > it due to this limitation.  can do with their own Taro tokens, or else he\n> > will burn them \u2013 not very useful\n>\n> I agree that the usage will be somewhat context specific, and dependent on\n> the security properties one is after. In the current purposefully\n> simplified\n> version, it's correct that ignoring the rules leads to assets being burnt,\n> but in most cases imo that's a sufficient enough incentive to maintain and\n> validate the relevant set of witnesses.\n>\n> I was thinking about the scripting layer a bit over the weekend, and came\n> up\n> with a \"issuance covenant\" design sketch that may or may not be useful. At\n> a\n> high level, lets say we extend the system to allow a specified (so a new\n> asset type) or generalized script to be validated when an asset issuance\n> transaction is being validated. If we add some new domain specific covenant\n> op codes at the Taro level, then we'd be able to validate issuance events\n> like:\n>\n>   * \"Issuing N units of this assets can only be done if 1.5*N units of BTC\n>     are present in the nth output of the minting transaction. In addition,\n>     the output created must commit to a NUMs point for the internal key,\n>     meaning that only a script path is possible. The script paths must be\n>     revealed, with the only acceptable unlocking leaf being a time lock of\n> 9\n>     months\".\n>\n> I don't fully have a concrete protocol that would use something like that,\n> but that was an attempt to express certain collateralization requirements\n> for issuing certain assets. Verifiers would only recognize that asset if\n> the\n> issuance covenant script passes, and (perhaps) the absolute timelock on\n> those coins hasn't expired yet. This seems like a useful primitive for\n> creating assets that are somehow backed by on-chain BTC collateralization.\n> However this is just a design sketch that needs to answer questions like:\n>\n>   * are the assets still valid after that timeout period, or are they\n>     considered to be burnt?\n>\n>   * assuming that the \"asset key family\" (used to authorize issuance of\n>     related assets) are jointly owned, and maintained in a canonical\n>     Universe, then would it be possible for 3rd parties to verify the level\n>     of collateralization on-chain, with the join parties maintaining the\n>     pool of collateralized assets accordingly?\n>\n>   * continuing with the above, is it feasible to use a DLC script within\n> one\n>     of these fixed tapscript leaves to allow more collateral to be\n>     added/removed from the pool backing those assets?\n>\n> I think it's too early to conclude that the scripting layer isn't useful.\n> Over time I plan to add more concrete ideas like the above to the section\n> tracking the types of applications that can be built on Taro.\n>\n> > So theoretically you could get Bitcoin covenants to enforce certain\n> > spending conditions on Taro assets. Not sure how practical that ends up\n> > being, but intriguing to consider.\n>\n> Exactly! Exactly how practical it ends up being would depend on the types\n> of\n> covenants deployed in the future. With something like a TLUV and OP_CAT (as\n> they're sufficiently generalized vs adding op codes to very the proofs) a\n> Script would be able to re-create the set of commitments to restrict the\n> set\n> of outputs that can be created after spending. One would use OP_CAT to\n> handle re-creating the taro asset root, and TLUV (or something similar) to\n> handle the Bitcoin tapscript part (swap out leaf index 0 where the taro\n> commitment is, etc).\n>\n> > The above also reminds me of another potential issue which you need to be\n> > aware of, if you're not already. Similar to my comment about how the\n> > location of the Taro tree inside the taproot tree needs to be\n> > deterministic for the verifier, the output in which you place the Taro\n> > tree also needs to be\n>\n> Yep, the location needs to be fully specified which includes factoring the\n> output index as well. A simple way to restrict this would just to say it's\n> always the first output. Otherwise, you could lift the output index into\n> the\n> asset ID calculation.\n>\n> -- Laolu\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220415/17d2aa29/attachment.html>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2022-04-16T02:43:08",
                "message_text_only": "Hi y'all,\n\n> In terms of achieving this level of binding within the Taro tree itself, I\n> can think of three options:\n\nThe earlier BIP draft just sort of said \"the commitment should be unique\"\nand hand waved away the exact algorithm used to verify this key property. I\nthought about a few ways to do this, but most of them can't work, as the\ntaproot tree is always sorting the siblings before hashing them into a\nparent.\nThis sorting means that all ordering information is lost, and can't be\nobtained again afaict.\n\nTo get around this limitation, I've proposed a concrete scheme here to both\nverify that the commitment is in a unique place within the tree, and also\nthat it doesn't exist anywhere else in the transaction (assumes widespread\nusage of BIP 86): https://github.com/Roasbeef/bips/pull/21.\n\nA series of inclusion and non-inclusion proofs are used to construct+verify\nthis property. At a high level the scheme takes advantage of the tagged hash\nscheme used in taproot: leaves use \"TapLeaf\" as the tag, and branches use\n\"TapBranch\" as the tag. Building upon this, we then require the Taro\ncommitment to be in the leftmost/rightmost (remember ordering info is lost)\nof the tree. From here we can decompose things into a few different cases:\n\n  * The control block proof is 32 bytes, meaning there's only a single\n    element, so verify the taro commitment and the taproot commitment is\n    correct.\n\n  * The proof is instead 64 bytes, meaning there's a leaf at depth 1 with a\n    sibling:\n    * If the sibling is a leaf, then verify the pre-image is 32 bytes and\n      the tagged hash calc matches up.\n    * If the sibling is a branch, then verify that hashing the two opaque\n      siblings that make it up gives the same branch (tap hash branch).\n\n\n>From the PoV of wallets, this isn't too hard to manage as a Taro library can\njust take the existing root of the wallet's scripts, and merge that into a\nnew root with the Taro leaf hanging off to the side.\n\nAs an aside, one thing that's missing in the ecosystem today is a\nstandardized algorithm for constructing a taproot tree given a set of script\nleaves. The tree constructor has a lot of freedom to do things like put more\ncommon things higher up in the tree, or always try to make the tree uniform,\netc, etc. The btcsuite libraries use a simple algo [1] I came up with that\njust merges leaves into branches until there're no leaves left (even number)\nor there's one leaf, with that last leaf being merged with the final branch.\nAfter that you just keep on merging. It's not the most optimized/efficient\nroutine but it's simple which counts for a lot IMO.\n\nAdmittedly as is defined in my PR above, Taro is a bit demanding w.r.t\ncommitment space: it wants the highest position in the tree as that's easy\nto verify and makes a smaller proof. The impact for items in the script tree\nitself isn't too bad as it just means an extra 32 byte hash in the control\nblock proof when it comes to reveal time, and that's witness data which is\ndiscounted at the block size level.\n\nZooming out a bit, assuming that applications/protocols start making more\nstructured commitments in the tapscript tree, it may make sense to roll out\na distinct BIP that carves out an explicit structure/split. As an example, a\nnew standard could be created that pushes all the actual scripts to the\n\"left\" and everything else to the \"right\". In the \"right\" part of the tree,\nwe can use w/e tree structure we want, so we aren't bound by the sorting\nquirk. If each project picks some 32-byte value (a hash of the name or w/e),\nthen another SMT (or w/e other merklalized k-v map) can be used to place\neach root commitment in a unique location in the tree. Maybe something like\nthis also becomes the basis of future consensus-critical commitments (utxo\ncommitments, etc, etc)?\n\n-- Laolu\n\n[1]:\nhttps://github.com/btcsuite/btcd/blob/99e4e00345017a70eadc4e1d06353c56b23bb15c/txscript/taproot.go#L618\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220415/2f1e0459/attachment.html>"
            },
            {
                "author": "Bram Cohen",
                "date": "2022-04-11T00:30:29",
                "message_text_only": "From: Olaoluwa Osuntokun <laolu32 at gmail.com>\n\n>\n> > Furthermore, the Taro script is not enforced by Bitcoin, meaning those\n> who\n> > control the Bitcoin script can always choose to ignore the Taro script\n> and\n> > destroy the Taro assets as a result.\n>\n> This is correct, as a result in most contexts, an incentive exists for the\n> holder of an asset to observe the Taro validation rules as otherwise, their\n> assets are burnt in the process from the PoV of asset verifiers. In the\n> single\n> party case things are pretty straight forward, but more care needs to be\n> taken\n> in cases where one attempts to express partial application and permits\n> anyone\n> to spend a UTXO in question.\n>\n> By strongly binding all assets to Bitcoin UTXOs, we resolve issues related\n> to\n> double spending or duplicate assets, but needs to mind the fact that assets\n> can\n> be burnt if a user doesn't supply a valid witness. There're likely ways to\n> get\n> around this by lessening the binding to Bitcoin UTXO's, but then the system\n> would need to be able to collect, retain and order all the set of possible\n> spends, essentially requiring a parallel network. The core of the system as\n> it\n> stands today is pretty simple (which was an explicit design goal to avoid\n> getting forever distracted by the large design space), with a minimal\n> implementation being relatively compact given all the Bitcoin\n> context/design\n> re-use.\n>\n\nThe TARO set of tradeoffs is fairly coherent but is subject to certain\nlimitations (modulo my understanding of it being off):\n\nThe witnesses for transactions need to be put into Bitcoin transactions\neven though the Bitcoin layer doesn't understand them\n\nThere needs to be a constraint on Taro transactions which is understood by\nthe Bitcoin layer (which often/usually happens naturally because there's a\nuser signature but sometimes doesn't. It's a limitation)\n\nMultiple Taro coins can't consolidate their value into a single output\nbecause they only support a single linear history\n\nTaro issuance is limited to a single event rather than potentially multiple\nevents over time subject to special per-asset rules.\n\nThis seems like a fairly logical approach (although my understanding of the\nlimitations/tradeoffs could be wrong, especially with regards to\nconsolidation). There's nothing wrong with a system having well documented\nlimitations, but I am puzzled by the announcement saying Taro assets are\n'analogous with' colored coins. Taro assets are straightforwardly and\nunambiguously colored coins and that isn't something to be ashamed of.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220410/df14d323/attachment.html>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2022-04-11T18:21:14",
                "message_text_only": "Hi Bram,\n\n> The witnesses for transactions need to be put into Bitcoin transactions\n> even though the Bitcoin layer doesn't understand them\n\nIs this related to Ruben's comment about invalid state transitions\n(published in the base chain) leading to burned assets? In the past, I've\nconsidered using the existing annex field in taproot transactions to\nimplement partial reveal of certain data. However, today bitcoind treats\nannex usage as non-standard, so those transactions may be harder to relay.\nIMO this is a great place to add minimal extra data, as it doesn't bleed\nover into\nthe scripting layer (via OP_DROP usages) and since Bitcoin-level signatures\nalso include this field in the sighash, the sigs serve to further\nauthenticate this data.\n\nFuture op codes that allow Scripts to push annex data onto the stack could\nalso be used to further bind higher level protocols while still allowing the\nbase Bitcoin consensus rules to not have to be explicitly aware of them.\n\n> Taro issuance is limited to a single event rather than potentially\n> multiple events over time subject to special per-asset rules.\n\nThere's a provision in the protocol that lets a party issuing assets to\nspecify a special public key which is then tweaked with the genesis\noutpoint, similar to the way the asset IDs are generated. If this key is\nspecified, then future issuance, if signed off by that key, will serve to\nassociate assets of discrete IDs under a single identifier. This feature\nallows assets issued in multiple tranches to be fungible with one another.\n\n> but I am puzzled by the announcement saying Taro assets are 'analogous\n> with' colored coins. Taro assets are straightforwardly and unambiguously\n> colored coins and that isn't something to be ashamed of.\n\nWe've shied away from using the \"colored coins' terminology as at this point\nin the game it's pretty dated: new developers that joined in the last 3\nyears or so have likely never heard of that term. Explaining the term also\nrequires one to define \"coin coloring\", and what that actually means, etc,\netc. IMO it's simpler to just use the familiar and widely used asset\nissuance/minting terminology.\n\n-- Laolu\n\nOn Sun, Apr 10, 2022 at 9:10 PM Bram Cohen via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> From: Olaoluwa Osuntokun <laolu32 at gmail.com>\n>\n>>\n>> > Furthermore, the Taro script is not enforced by Bitcoin, meaning those\n>> who\n>> > control the Bitcoin script can always choose to ignore the Taro script\n>> and\n>> > destroy the Taro assets as a result.\n>>\n>> This is correct, as a result in most contexts, an incentive exists for the\n>> holder of an asset to observe the Taro validation rules as otherwise,\n>> their\n>> assets are burnt in the process from the PoV of asset verifiers. In the\n>> single\n>> party case things are pretty straight forward, but more care needs to be\n>> taken\n>> in cases where one attempts to express partial application and permits\n>> anyone\n>> to spend a UTXO in question.\n>>\n>> By strongly binding all assets to Bitcoin UTXOs, we resolve issues related\n>> to\n>> double spending or duplicate assets, but needs to mind the fact that\n>> assets\n>> can\n>> be burnt if a user doesn't supply a valid witness. There're likely ways to\n>> get\n>> around this by lessening the binding to Bitcoin UTXO's, but then the\n>> system\n>> would need to be able to collect, retain and order all the set of possible\n>> spends, essentially requiring a parallel network. The core of the system\n>> as\n>> it\n>> stands today is pretty simple (which was an explicit design goal to avoid\n>> getting forever distracted by the large design space), with a minimal\n>> implementation being relatively compact given all the Bitcoin\n>> context/design\n>> re-use.\n>>\n>\n> The TARO set of tradeoffs is fairly coherent but is subject to certain\n> limitations (modulo my understanding of it being off):\n>\n> The witnesses for transactions need to be put into Bitcoin transactions\n> even though the Bitcoin layer doesn't understand them\n>\n> There needs to be a constraint on Taro transactions which is understood by\n> the Bitcoin layer (which often/usually happens naturally because there's a\n> user signature but sometimes doesn't. It's a limitation)\n>\n> Multiple Taro coins can't consolidate their value into a single output\n> because they only support a single linear history\n>\n> Taro issuance is limited to a single event rather than potentially\n> multiple events over time subject to special per-asset rules.\n>\n> This seems like a fairly logical approach (although my understanding of\n> the limitations/tradeoffs could be wrong, especially with regards to\n> consolidation). There's nothing wrong with a system having well documented\n> limitations, but I am puzzled by the announcement saying Taro assets are\n> 'analogous with' colored coins. Taro assets are straightforwardly and\n> unambiguously colored coins and that isn't something to be ashamed of.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220411/d73ba863/attachment.html>"
            },
            {
                "author": "Bram Cohen",
                "date": "2022-04-11T21:29:31",
                "message_text_only": "On Mon, Apr 11, 2022 at 11:21 AM Olaoluwa Osuntokun <laolu32 at gmail.com>\nwrote:\n\n> Hi Bram,\n>\n> > The witnesses for transactions need to be put into Bitcoin transactions\n> > even though the Bitcoin layer doesn't understand them\n>\n> Is this related to Ruben's comment about invalid state transitions\n> (published in the base chain) leading to burned assets?\n>\n\nYes, or at least the concern that a valid transaction could have its\nrequired witness data not posted to the chain and be effectively bricked.\n\n\n> In the past, I've\n> considered using the existing annex field in taproot transactions to\n> implement partial reveal of certain data. However, today bitcoind treats\n> annex usage as non-standard, so those transactions may be harder to relay.\n> IMO this is a great place to add minimal extra data, as it doesn't bleed\n> over into\n> the scripting layer (via OP_DROP usages) and since Bitcoin-level signatures\n> also include this field in the sighash, the sigs serve to further\n> authenticate this data.\n>\n\nThat leads to a bit of a philosophical question: Is the annex reserved for\npossible future Bitcoin script soft forks, or is it free to use for\nwhatever with confidence there won't be a future collision? But that might\nnot matter, because if the purpose is to force the extra witness\ninformation to be published it has to be in something signed in the\ntransaction, and barring a check sig from stack that probably means it has\nto be shoved into the transaction somewhere.\n\n\n\n> > Taro issuance is limited to a single event rather than potentially\n> > multiple events over time subject to special per-asset rules.\n>\n> There's a provision in the protocol that lets a party issuing assets to\n> specify a special public key which is then tweaked with the genesis\n> outpoint, similar to the way the asset IDs are generated. If this key is\n> specified, then future issuance, if signed off by that key, will serve to\n> associate assets of discrete IDs under a single identifier. This feature\n> allows assets issued in multiple tranches to be fungible with one another.\n>\n\nAh I see. That's still a fairly bespoke set of functionality instead of\nallowing an arbitrary script to be used for the issuance (but that again\nruns into Bitcoin script being fairly limited in its functionality).\n\n\n>\n> > but I am puzzled by the announcement saying Taro assets are 'analogous\n> > with' colored coins. Taro assets are straightforwardly and unambiguously\n> > colored coins and that isn't something to be ashamed of.\n>\n> We've shied away from using the \"colored coins' terminology as at this\n> point\n> in the game it's pretty dated: new developers that joined in the last 3\n> years or so have likely never heard of that term. Explaining the term also\n> requires one to define \"coin coloring\", and what that actually means, etc,\n> etc. IMO it's simpler to just use the familiar and widely used asset\n> issuance/minting terminology.\n>\n\nPeople mostly haven't heard of colored coins in a while because everything\nhas been based on ERC-20 style tokens, which are truly horrid. Coloring is\na meaningful technical term which means something good, although\nunfortunately the term 'colored' is a bit loaded in different ways around\nthe world so it's best to keep it in the technical docs.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220411/6e575c43/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Taro: A Taproot Asset Representation Overlay",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "ZmnSCPxj",
                "Olaoluwa Osuntokun",
                "vjudeu at gazeta.pl",
                "Bram Cohen",
                "Ruben Somsen"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 71474
        }
    },
    {
        "title": "[bitcoin-dev] [Lightning-dev] Taro: A Taproot Asset Representation Overlay",
        "thread_messages": [
            {
                "author": "Alex Schoof",
                "date": "2022-04-07T19:11:39",
                "message_text_only": "Hey Laolu,\n\nReally interesting protocol. I'm not all the way through all of the docs\nyet, but had a few questions/comments:\n- The top-level doc (\nhttps://github.com/Roasbeef/bips/blob/bip-taro/bip-taro.mediawiki) talks\nabout embedding overlay metadata in the taproot script tree. From my\nreading, it seems like what gets committed is the root of the taro MS-SMT\ntree, while leaves of the tree itself are off-chain in a proof file. If\nthat's the case, did you look at other mechanisms to commit to a merkle\nroot? For example, I believe mainstay[1] uses a\npay-to-contract/bip175[2]-like scheme to commit sidechain merkle roots to\np2pkh/p2sh addresses with signature tweaks. Are there other interesting (to\ntaro) spend-paths that need to be allowed that led to the taproot script\ntree being particularly helpful?\n\n- It appears that the transfer proofs are kept off-chain in another file\nwhich is passed between users, where the receiver can validate the transfer\naccording to whatever semantics the taro-vm has at that moment and refuse\nto credit the sender if the transfer breaks some business logic or\nvalidation rules. This reminds me a lot of single-use-seals[3]. Is that the\nright way to think about what's going on here? If it is, then it looks like\na Universe/Multiverse is an offload/aggregation mechanism that can keep\ntrack of asset lineages on behalf of users, which would be useful for light\nclients of heavily-used asset types (so your mobile client doesnt have to\ntraverse the transfer lineage of some high-liquidity stablecoin or\nsomething).\n\n- Rubin made a good point above about how something like a conditional\ntransfer in a taro asset won't necessarily cause the conditional bitcoin\ntransfer to fail. My first thought was to have the \"carrier utxo\" for a\ntaro asset be really small, like dust + some buffer. The thought being that\nI'm basically just paying gas and if I lose `dust+buffer` amount of bitcoin\nbut not a lot of some token, then that's not great but not terrible. Where\nit gets bad is if the value of the taro asset that you're trying to\ntransfer is close to or less than the value of the bitcoin that's being\nused to do the transfer.\n\n- There's been a lot of talk lately on the bitcoin-dev list about\ncovenants, and I wonder if some of those designs (specifically TLUV or CTV)\nmight be useful with Taro, to \"lift\" some of the taro conditions into\ncovenants that encumber the underlying bitcoin. I don't have a design or\nanything, wondering if you've given this any thought.\n\n- was this originally named CMYK?\n\nThanks,\nAlex\n\n\n[1]\nhttps://cloudflare-ipfs.com/ipns/ipfs.commerceblock.com/commerceblock-whitepaper-mainstay.pdf\n[2] https://github.com/bitcoin/bips/blob/master/bip-0175.mediawiki\n[3] https://petertodd.org/2016/commitments-and-single-use-seals\n\nOn Thu, Apr 7, 2022 at 1:14 PM Ruben Somsen <rsomsen at gmail.com> wrote:\n\n> Hi Laolu,\n>\n> Nice work. This is an interesting protocol, in my opinion.\n>\n> Seeing as there's a large amount of overlap with RGB, a protocol which I\n> have examined quite extensively, I believe some of the issues I uncovered\n> in that project also apply here.\n>\n> The biggest issue revolves around the scripting expectations for this\n> protocol. Taro is described as being able to have its own scripting\n> capabilities that will initially be similar to Bitcoin and eventually be\n> made to do more. I'm afraid this is fundamentally impossible. Conditional\n> scripts (and thus most scripts that could potentially be of interest) won't\n> be possible if the satisfaction of the condition is not recorded publicly\n> on-chain.\n>\n> The core problem here is that you have two levels of scripting. At the\n> Bitcoin level the UTXO is encumbered by the Bitcoin script, then at the\n> Taro level you have yet another script. This may seem similar at first\n> glance to how taproot has a key path and a script path, but there are a few\n> key differences. In taproot only one of the two needs to be satisfied,\n> while here you need to satisfy both. Furthermore, the Taro script is not\n> enforced by Bitcoin, meaning those who control the Bitcoin script can\n> always choose to ignore the Taro script and destroy the Taro assets as a\n> result.\n>\n> I'll describe an example. Imagine Alice wants to send Bob a payment inside\n> Taro, but she wants to make it conditional. Bob gets the Taro tokens if he\n> reveals a pre-image, while Alice can claim the tokens back after the\n> timelock expires (i.e. the minimum scripting requirements for HTLCs). Alice\n> starts by locking up coins in a 2-of-2 multisig on the mainchain with some\n> Taro tokens inside. She then gives Bob a pre-signed transaction that only\n> requires him to reveal the pre-image in order to claim the tokens. The\n> issue here is that from Bitcoin's perspective, you're giving Bob a valid\n> transaction, regardless of whether he reveals the pre-image. If Bob\n> maliciously broadcasts it without the pre-image, he will have destroyed\n> your tokens.\n>\n> Of course this was a contrived example, as these conditions could simply\n> take place entirely in Bitcoin script, but it demonstrates that Taro script\n> fundamentally cannot handle conditional payments, which is the basis for\n> any meaningful script other than self-encumbering covenants (i.e. if you\n> send your Taro tokens in any way other than specified, the tokens will be\n> destroyed). Luckily this has no effect on whether Taro can function over\n> Lightning, because solely relying on Bitcoin's scripting capabilities\n> should be sufficient for that use case.\n>\n> As a side note, it may be worth pointing out that it *is* possible to\n> create conditional payments if the satisfaction of the condition is\n> recorded publicly on the mainchain (e.g. in an op_return), making it sort\n> of a hybrid on-chain/off-chain model, but it would increase complexity\n> considerably. I can explain this model in more detail, if it happens to\n> interest you.\n>\n> Now there's a second issue I want to bring up, but unfortunately my\n> understanding of how exactly you made assets divisible is not complete\n> enough to know how this problem might have manifested in Taro. Nonetheless,\n> I'll try to describe it.\n>\n> One of the core concepts of Taro/RGB is that the sender of the token has\n> to reveal the history to the recipient. In case of an NFT the history is\n> simply every prior owner and grows linearly, but in the case of fungible\n> tokens things are more complicated. Let's say Carol receives 2 fungible\n> Taro tokens from Alice and 3 fungible Taro tokens from Bob. Now Carol wants\n> to send 4 of them to Dave and keep 1. There are two possible designs here:\n>\n> a.) The token history remains separate \u2013 Dave receives Alice's 2 tokens,\n> Bob's tokens are split and he receives 2 (or 3 from Bob 1 from Alice).\n>\n> b.) The token history gets merged \u2013 Dave receives 4 tokens (linking the\n> new output with both Alice and Bob's history).\n>\n> The issue with a.) is that you're only ever fragmenting tokens, so\n> eventually you end up with lots of tiny but separate amounts. This will\n> cause making large payments to involve sending lots of tokens, each with\n> their own history. Under this model, I suspect the fixed value token model\n> (e.g. 1, 2, 4, 8) might be preferable, as this prevents the entire supply\n> from getting split into tiny fragments.\n>\n> The issue with b.) is that you end up with a linked transaction graph,\n> just like in Bitcoin. If you pick a random Bitcoin UTXO and try to trace it\n> back to a coinbase, you'll quickly find that it could have come from many\n> of them. The graph that you'd traverse to get to all of these coinbases is\n> equivalent to the amount of history that a recipient of a Taro token has to\n> validate in order to accept it, which I suspect quickly becomes a\n> bottleneck that is not unlike that of a regular blockchain.\n>\n> It'd probably be wise to make a model of the potential transaction flow,\n> and simulate how it affects the size of the history in order to determine\n> what's the best approach and to generally get a better idea of how it\n> affects scaling. Also, the repeated sharing of history makes me skeptical\n> about the privacy this protocol may provide. If large amounts of history\n> moved through the hands of a large number of people, it wouldn't be very\n> private.\n>\n> There's a third third smaller issue I want to point out, which is easily\n> fixable and perhaps was just a typo. In your slides, you showed a\n> screenshot of a taproot tree containing the Taro tree as the third element\n> of four. This implies the location of the Taro tree inside the taproot tree\n> is not fixed. What needs to be prevented here is that a taproot tree\n> contains more than one Taro tree, as that would enable the owner of the\n> commitment to show different histories to different people.\n>\n> Finally, let me conclude with two questions. Could you clarify the purpose\n> of the sparse merkle tree in your design? I suppose you want to be able to\n> open a commitment and show it contains a certain asset without having to\n> reveal any of the other assets and simultaneously guarantee that you\n> haven't committed to the same asset twice (i.e. the SMT guarantees each\n> asset gets a specific location in the tree)? Or is there another reason?\n>\n> And the second question \u2013 when transferring Taro token ownership from one\n> Bitcoin UTXO to another, do you generate a new UTXO for the recipient or do\n> you support the ability to \"teleport\" the tokens to an existing UTXO like\n> how RGB does it? If the latter, have you given consideration to timing\n> issues that might occur when someone sends tokens to an existing UTXO that\n> simultaneously happens to get spent by the owner?\n>\n> In any case, I hope this email was useful. Feel free to reach out if I can\n> clarify anything.\n>\n> Good luck with the protocol.\n>\n> Best regards,\n> Ruben\n>\n> On Tue, Apr 5, 2022 at 5:06 PM Olaoluwa Osuntokun via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi y'all,\n>>\n>> I'm excited to publicly publish a new protocol I've been working on over\n>> the\n>> past few months: Taro. Taro is a Taproot Asset Representation Overlay\n>> which\n>> allows the issuance of normal and also collectible assets on the main\n>> Bitcoin\n>> chain. Taro uses the Taproot script tree to commit extra asset structured\n>> meta\n>> data based on a hybrid merkle tree I call a Merkle Sum Sparse Merkle Tree\n>> or\n>> MS-SMT. An MS-SMT combined the properties of a merkle sum tree, with a\n>> sparse\n>> merkle tree, enabling things like easily verifiable asset supply proofs\n>> and\n>> also efficient proofs of non existence (eg: you prove to me you're no\n>> longer\n>> committing to the 1-of-1 holographic beefzard card during our swap). Taro\n>> asset\n>> transfers are then embedded in a virtual/overlay transaction graph which\n>> uses a\n>> chain of asset witnesses to provably track the transfer of assets across\n>> taproot outputs. Taro also has a scripting system, which allows for\n>> programmatic unlocking/transfer of assets. In the first version, the\n>> scripting\n>> system is actually a recursive instance of the Bitcoin Script Taproot VM,\n>> meaning anything that can be expressed in the latest version of Script\n>> can be\n>> expressed in the Taro scripting system. Future versions of the scripting\n>> system\n>> can introduce new functionality on the Taro layer, like covenants or other\n>> updates.\n>>\n>> The Taro design also supports integration with the Lightning Network\n>> (BOLTs) as\n>> the scripting system can be used to emulate the existing HTLC structure,\n>> which\n>> allows for multi-hop transfers of Taro assets. Rather than modify the\n>> internal\n>> network, the protocol proposes to instead only recognize \"assets at the\n>> edges\",\n>> which means that only the sender+receiver actually need to know about and\n>> validate the assets. This deployment route means that we don't need to\n>> build up\n>> an entirely new network and liquidity for each asset. Instead, all asset\n>> transfers will utilize the Bitcoin backbone of the Lightning Network,\n>> which\n>> means that the internal routers just see Bitcoin transfers as normal, and\n>> don't\n>> even know about assets at the edges. As a result, increased demand for\n>> transfers of these assets as the edges (say like a USD stablecoin), which\n>> in\n>> will turn generate increased demand of LN capacity, result in more\n>> transfers, and\n>> also more routing revenue for the Bitcoin backbone nodes.\n>>\n>> The set of BIPs are a multi-part suite, with the following breakdown:\n>>  * The main Taro protocol:\n>> https://github.com/Roasbeef/bips/blob/bip-taro/bip-taro.mediawiki\n>>  * The MS-SMT structure:\n>> https://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-ms-smt.mediawiki\n>>  * The Taro VM:\n>> https://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-vm.mediawiki\n>>  * The Taro address format:\n>> https://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-addr.mediawiki\n>>  * The Taro Universe concept:\n>> https://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-universe.mediawiki\n>>  * The Taro flat file proof format:\n>> https://github.com/Roasbeef/bips/blob/bip-taro/bip-taro-proof-file.mediawiki\n>>\n>> Rather than post them all in line (as the text wouldn't fit in the\n>> allowed size\n>> limit), all the BIPs can be found above.\n>>\n>> -- Laolu\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n\n\n-- \n\n\nAlex Schoof\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220407/9dd3bd33/attachment-0001.html>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2022-04-08T17:49:28",
                "message_text_only": "(this might be a double post as I ran into the size limit)\n\nHi Alex,\n\nThanks for taking a look at things!\n\n> If that's the case, did you look at other mechanisms to commit to a merkle\n> root? For example, I believe mainstay[1] uses a\n> pay-to-contract/bip175[2]-like scheme to commit sidechain merkle roots to\n> p2pkh/p2sh addresses with signature tweaks. Are there other interesting\n> (to taro) spend-paths that need to be allowed that led to the taproot\n> script tree being particularly helpful?\n\nI considered other approaches, but by relying on the existing taproot\ncommitment structure/derivation, Taro implementations are able to re-use\nsurrounding code/libraries, making a core implementation more compact.\nCommitting into the tapscript tree is also simpler than signature tweaks.\nOne nice trait about using the tapscript tree is that from a wallet's\nperceptive, Taro just wants a particular opaque hash to be included in the\nfinal tapscript tree. As a result, the wallet doesn't need to modify the way\nthey sign, or do key derivations or anything. In addition, using the\ntapscript tree lets us separate the Bitcoin layer from the Taro layer as far\nas scripts, and also enables easily verification of any sort of Script\nmirroring between the layers that may be required for certain applications.\n\n> This reminds me a lot of single-use-seals[3]. Is that the right way to\n> think about what's going on here?\n\nYes a similar construct is used. I personally don't really like the\nsingle-use-seals terminology, as I find it somewhat obtuse and trying to\nbind the mechanics to the analogy/metaphor just makes it harder for people\nto understand what's going on.\n\n> If it is, then it looks like a Universe/Multiverse is an\n> offload/aggregation mechanism that can keep track of asset lineages on\n> behalf of users, which would be useful for light clients of heavily-used\n> asset types (so your mobile client doesnt have to traverse the transfer\n> lineage of some high-liquidity stablecoin or something).\n\nSo the provide a few different types of functionality:\n\n * A way to bootstrap genesis output provenance by maintaining a Universe\n   which is just the set of asset issuance transactions (the Universe\nMS-SMT is\n   keyed by a prevOut at the lowest level). This can be done for several\n   assets.\n\n * A way to collect+index a more complete view of the set of transfers\n   related to assets. This can serve the basis for things like a block\n   explorer for a single or several assets. Since the data structure is\n   history independent, multiple explorers can publish their root hash which\n   makes it easy to check that they have the same data, and a bisection\n   protocol can be used to sync up distinct universe/multiverse instances.\n\n * A way to allow aggregation of transfers tied to a single to level UTXO\n   chain, which would likely be used in cases like games where the actual\n   game needs other servers or closed source functionality, but the game\n   publisher wants the users to be able to prove ownership and also trade in\n   game asset. This can be maintained by a single party, or a\n   threshold/federation. The parties can't include invalid state transitions\n   or proofs (can't forge the proper signature, etc).\n\n> - There's been a lot of talk lately on the bitcoin-dev list about\n> covenants, and I wonder if some of those designs (specifically TLUV or\n> CTV) might be useful with Taro, to \"lift\" some of the taro conditions into\n> covenants that encumber the underlying bitcoin. I don't have a design or\n> anything, wondering if you've given this any thought.\n\nYep! I described a sketch of something like that using TLVU in my prior\nreply to Rubin. At a high level, since Taro affect the tapscript root hash,\nwhich affects the output key, by requiring a certain output key, or swapping\nout the leaf elements, a covenant can further bind Taro rules without\nneeding to explicitly do validation/execution in Bitcoin script itself.\n\n> My first thought was to have the \"carrier utxo\" for a taro asset be really\n> small, like dust + some buffer.\n\nHmm, can you describe this in more detail? Do you mean an _extra_ UTXO, or\njust mapping the Taro conditions as much as possible to the top-level\nBitcoin scripts?\n\n> - was this originally named CMYK?\n\nMaybe ;), a few versions were floating around before I published the current\ndraft, so some prior artifacts may still be floating around. Will do another\nsweep to clean up anything else that was lingering.\n\n-- Laolu\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220408/d1c3e9f5/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Taro: A Taproot Asset Representation Overlay",
            "categories": [
                "bitcoin-dev",
                "Lightning-dev"
            ],
            "authors": [
                "Olaoluwa Osuntokun",
                "Alex Schoof"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 18540
        }
    },
    {
        "title": "[bitcoin-dev]  BIP174 PSBT test vector",
        "thread_messages": [
            {
                "author": "Tobin Harding",
                "date": "2022-04-05T22:55:18",
                "message_text_only": "Hi,\n\nDoes anyone have software that successfully parses the extended private key seed\nfound in the BIP174 test vector? I have been implementing the test vector PSBT\nworkflow in Rust and have everything working except I can only create the\nextended private key from the xpriv, I am unable to use the seed to create it?\n\nBIP174: https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki#test-vectors\n\nPSBT workflow in BIP174 starting at the line:\n\n  \"The private keys in the tests below are derived from the following master private key:\"\n\nxpriv:\n\n  tprv8ZgxMBicQKsPd9TeAdPADNnSyH9SSUUbTVeFszDE23Ki6TBB5nCefAdHkK8Fm3qMQR6sHwA56zqRmKmxnHk37JkiFzvncDqoKmPWubu7hDF\n\nseed:\n\n  cUkG8i1RFfWGWy5ziR11zJ5V4U4W3viSFCfyJmZnvQaUsd1xuF3T\n\nI've tried decoding it as base64 and as base58.\n\nThanks in advance,\nTobin."
            }
        ],
        "thread_summary": {
            "title": "BIP174 PSBT test vector",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Tobin Harding"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 803
        }
    },
    {
        "title": "[bitcoin-dev] BIP174 PSBT test vector",
        "thread_messages": [
            {
                "author": "Achow101",
                "date": "2022-04-05T23:21:17",
                "message_text_only": "The seed is encoded as a WIF private key. Decoding as WIF will result in the 32 byte seed that can be used as specified in BIP 32.\n\nAndrew\n\n-------- Original Message --------\nOn Apr 5, 2022, 6:55 PM, Tobin Harding via bitcoin-dev wrote:\n\n> Hi,\n>\n> Does anyone have software that successfully parses the extended private key seed\n> found in the BIP174 test vector? I have been implementing the test vector PSBT\n> workflow in Rust and have everything working except I can only create the\n> extended private key from the xpriv, I am unable to use the seed to create it?\n>\n> BIP174: https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki#test-vectors\n>\n> PSBT workflow in BIP174 starting at the line:\n>\n> \"The private keys in the tests below are derived from the following master private key:\"\n>\n> xpriv:\n>\n> tprv8ZgxMBicQKsPd9TeAdPADNnSyH9SSUUbTVeFszDE23Ki6TBB5nCefAdHkK8Fm3qMQR6sHwA56zqRmKmxnHk37JkiFzvncDqoKmPWubu7hDF\n>\n> seed:\n>\n> cUkG8i1RFfWGWy5ziR11zJ5V4U4W3viSFCfyJmZnvQaUsd1xuF3T\n>\n> I've tried decoding it as base64 and as base58.\n>\n> Thanks in advance,\n> Tobin.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220405/563af73e/attachment.html>"
            },
            {
                "author": "Tobin Harding",
                "date": "2022-04-06T22:15:07",
                "message_text_only": "On Tue, Apr 05, 2022 at 11:21:17PM +0000, Achow101 wrote:\n> The seed is encoded as a WIF private key. Decoding as WIF will result in the 32 byte seed that can be used as specified in BIP 32.\n\nThanks fro the response Andrew, works as you say!\n\nI am totally _not_ surprised that I was unable to work this out, for future\nreference is there anything about those 52 characters from which I should have\nbeen able to tell it is a WIF private key? Why is the seed not just the 32 bytes\nof seed data?\n\nThanks for you time,\nTobin."
            }
        ],
        "thread_summary": {
            "title": "BIP174 PSBT test vector",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Achow101",
                "Tobin Harding"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1964
        }
    },
    {
        "title": "[bitcoin-dev] MuSig2 BIP",
        "thread_messages": [
            {
                "author": "Jonas Nick",
                "date": "2022-04-05T22:57:13",
                "message_text_only": "Tim Ruffing, Elliott Jin, and I are working on a MuSig2 BIP that we would like\nto propose to the community for discussion. The BIP is compatible with BIP340\npublic keys and signatures. It supports tweaking, which allows deriving BIP32\nchild keys from aggregate keys and creating BIP341 Taproot outputs with key and\nscript paths. You can find the BIP draft at:\nhttps://github.com/jonasnick/bips/blob/musig2/bip-musig2.mediawiki\n\nThe draft is in a state where it should be possible to write an implementation\nbased on the BIP that passes the basic test vectors (as, e.g., demonstrated by\n[0]). The draft BIP also contains a reference implementation in python. Please\nbe aware that this is only a draft and that it may still be necessary to make\nsmall tweaks to the algorithms and test vectors.\n\n[0] https://github.com/btcsuite/btcd/pull/1820"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2022-04-28T01:47:33",
                "message_text_only": "Hi Jonas,\n\nGreat work on this BIP! Props to you and the other co-authors for putting\ntogether such an excellent technical specification. I'm sure I'm not the\nonly developer stoked to see the much anticipated musig2 BIP published!\n\nI made a PR earlier today to add some JSON test vectors [1], which'll make\nit easier for other implementations to integrate the existing vectors and\nmore easily update implementations to account for any updates to the\nvectors.\n\nI've been following the BIP for a few months now, and have been updating my\nimplementation for `btcsuite/btcd` (mostly) in lock step. Admittedly, I miss\nthe earlier iterations of the BIP that were a bit simpler, but also commend\ny'all's approach re specifying more performant (removal of that O(n^2)\nloop), safe (the added aux input to nonce generation), and generalized\n(support for both normal and x-only tweaks) algorithms.\n\nWe've also been integrating my implementation into lnd [2] as well in order\nto get more familiar with my proposed API, as well as hands-on experience\ncrafting real transactions that use musig2 in the wild. There may, or may\nnot be a few musig2 spends in the main chain today created using our PR ;).\nWe hope to cut a release next month (lnd v0.15.0) that includes an\nexperimental API intended to give developers safe access to musig2 signing\nand key aggregation. I've also concurrently started working on a proposal\nfor a new taproot native (taprooty level 1, so step 1 here [6]) LN channel\ntype that natively uses musig2 where applicable.\n\nWhile exercising all the different signing combinations on regtest, we\nrealized that in order to support signing for a key that uses BIP 86\nderivation (so commit to an empty root, and only the serialized internal) or\nan external key that commits to a tapscript root, an implementation must\nmake the _pre tweaked_ combined key available to the caller. Without this\nkey a valid control block proof (in the script path spend case) can't be\nconstructed. Similarly, for the BIP 86 case, the pre-tweak combined key\nneeds to be used to apply the top-level taproot tweak.\n\nAs is the BIP doesn't touch on this case, which is something any\nimplementation will need to account for if they wish to support the two\nsigning modes I mentioned above. In practice, what we do now is compute the\naggregated key, stash that away, _then_ compute the tweaked key, making both\navailable to the caller [3]. We also add a special case for BIP 86 [5],\nsince in that case no real tweak needs to be specified, instead an\nimplementation should compute the BIP 340 tagged hash (tap tweak) of the\npre-tweaked aggregated key and use that as the main tweak.\n\nIn both of these cases, we use a special taproot specific options to make\nthe operations explicit [4] from the caller's PoV. This _does_ mean that an\nimplementation needs to know how to compute the BIP 341 taproot tweak fwiw.\nSo ideally any changes to the BIP in this direction can just link out to BIP\n341 in place.\n\nFinally, can you elaborate a bit on this fragment of the BIP that describes\na \"short cut\" when a specific signers is meant to send their nonces last:\n\n> Second, if there is a unique signer who is supposed to send the pubnonce\n> last, it is possible to modify nonce generation for this single signer to\n> not require high-quality randomness\n\nMy reading here is that if there's a signer that will always send their\nnonce last (possibly the responder to an LN funding attempt or a server for\na non-custodial service like Loop), then they don't actually need to\ngenerate real randomness, and can just fully specify all the new optional\narguments? If so then this may end up really simplifying the implementation\nof certain protocols since that last party doesn't (?) need to worry about\ntheir nonces as long as all the other (?) parties are using strong\nrandomness?\n\n -- Laolu\n\n[1]: https://github.com/jonasnick/bips/pull/10\n[2]: https://github.com/lightningnetwork/lnd/pull/6361\n[3]:\nhttps://github.com/Roasbeef/btcd/blob/afbf14a3a061b961c7fe0d21dcbbc6c941a33027/btcec/schnorr/musig2/keys.go#L320-L331\n[4]:\nhttps://github.com/Roasbeef/btcd/blob/afbf14a3a061b961c7fe0d21dcbbc6c941a33027/btcec/schnorr/musig2/keys.go#L211-L248\n[5]:\nhttps://github.com/Roasbeef/btcd/blob/afbf14a3a061b961c7fe0d21dcbbc6c941a33027/btcec/schnorr/musig2/keys.go#L406-L414\n[6]:\nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2021-November/003336.html\n\nOn Tue, Apr 5, 2022 at 4:04 PM Jonas Nick via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Tim Ruffing, Elliott Jin, and I are working on a MuSig2 BIP that we would\n> like\n> to propose to the community for discussion. The BIP is compatible with\n> BIP340\n> public keys and signatures. It supports tweaking, which allows deriving\n> BIP32\n> child keys from aggregate keys and creating BIP341 Taproot outputs with\n> key and\n> script paths. You can find the BIP draft at:\n> https://github.com/jonasnick/bips/blob/musig2/bip-musig2.mediawiki\n>\n> The draft is in a state where it should be possible to write an\n> implementation\n> based on the BIP that passes the basic test vectors (as, e.g.,\n> demonstrated by\n> [0]). The draft BIP also contains a reference implementation in python.\n> Please\n> be aware that this is only a draft and that it may still be necessary to\n> make\n> small tweaks to the algorithms and test vectors.\n>\n> [0] https://github.com/btcsuite/btcd/pull/1820\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220427/d56d7660/attachment.html>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2022-04-28T03:53:59",
                "message_text_only": "Stating the taproot interaction more plainly: the taproot tweak is defined\nas a function of the internal key itself h_tapTeak(internalKey || rootHash),\nwhich means that the full tweak can't be known ahead of time. Instead, one\nmust aggregate the keys to obtain the internal key _then_ apply the tweaks\nas normal.\n\n-- Laolu\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220427/1e777215/attachment-0001.html>"
            },
            {
                "author": "Jonas Nick",
                "date": "2022-04-28T19:18:34",
                "message_text_only": "Happy to hear that the BIP draft is already useful and thank you, Laolu, for\nextracting the test vectors.\n\n > an implementation must make the _pre tweaked_ combined key available to the caller\n\nTo apply the Taproot tweak with the key aggregation algorithm as specified you\nwould have to do the following (slightly simplified):\n\nP := KeyAgg(pk_1, ..., pk_n, tweaks = [])\nt := hash_TapTweak(P, root)\nQ := KeyAgg(pk_1, ..., pk_n, tweaks = [t])\n\nThis unnecessarily recomputes the pre-tweaked key aggregate. In the BIP, there\nare more places where the specified algorithms unnecessarily recompute certain\nvalues. I believe this is justified if it makes the spec significantly easier to\nunderstand. In this case, however, it's clear that calling KeyAgg multiple times\nfor the same set of public keys is not intuitive at all. This is something I had\nnot fully considered before. Thanks for bringing it up.\n\nThe approach you're taking in btcd makes a lot of sense to me. But in the\nspecification, we want to avoid specifying how exactly the tweaks are derived.\nIn the libsecp256k1-zkp implementation, key aggregation and tweaking are\nseparated into different functions. But this requires keeping state between key\naggregation and tweaking, which is why we had not chosen this approach for the\nBIP. I will investigate how in the BIP, we can also split key aggregation and\ntweaking and minimize complexity.\n\n > My reading here is that [...] last party doesn't (?) need to worry about their\n > nonces\n\nYour reading is mostly right. Brandon describes correctly how and why to modify\nthe nonce generation algorithm. I opened a PR that replaces the description of\nthis signing mode with a precise specification. Indeed, the result is that the\nlast party doesn't need to worry about their nonce (even if the other parties\nuse bad randomness).\n\n[0] https://github.com/jonasnick/bips/pull/11"
            },
            {
                "author": "Brandon Black",
                "date": "2022-04-28T15:33:42",
                "message_text_only": "Hi Laolu,\n\n> Finally, can you elaborate a bit on this fragment of the BIP that\ndescribes\n> a \"short cut\" when a specific signers is meant to send their nonces last:\n>\n> > Second, if there is a unique signer who is supposed to send the pubnonce\n> > last, it is possible to modify nonce generation for this single signer\nto\n> > not require high-quality randomness\n>\n> My reading here is that if there's a signer that will always send their\n> nonce last (possibly the responder to an LN funding attempt or a server\nfor\n> a non-custodial service like Loop), then they don't actually need to\n> generate real randomness, and can just fully specify all the new optional\n> arguments? If so then this may end up really simplifying the\nimplementation\n> of certain protocols since that last party doesn't (?) need to worry about\n> their nonces as long as all the other (?) parties are using strong\n> randomness?\n\nI believe this was added in response to an email that a co-worker and I\nsent to Jonas. The idea originated because one of our signers would have a\ndifficult time tracking, restoring, and securely deleting secret nonces\nacross a signing session, so what was important was that the signer not\nhave to retain state, rather than that they not have to provide their own\nrandomness. The result is that the signer also doesn't need to provide\nrandomness though.\n\nThe important property of the last signer's nonce is that any variation in\nany other party's nonce, or other values that contribute to the challenge,\nmust uniformly randomize the last signer's nonce. The sentences following\nthe one you quote describe exactly how achieve this, particularly:\n\n* Optional arguments become required\n* extra_in argument must be composed of all other parties' nonces\n\nThese modifications ensure that if and only if the partial signature will\nbe exactly equal will the same nonce be used in a subsequent signing\nsession.\n\nBest,\n\n--Brandon\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220428/51638db7/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "MuSig2 BIP",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Olaoluwa Osuntokun",
                "Jonas Nick",
                "Brandon Black"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 11098
        }
    },
    {
        "title": "[bitcoin-dev] Client side coinjoin amount organization with WabiSabi",
        "thread_messages": [
            {
                "author": "Max Hillebrand",
                "date": "2022-04-06T16:05:08",
                "message_text_only": "Hello list,\n\ntl;dr: client side coinjoin amount organization is bloody difficult. Our \ncurrent approach: pick random number of inputs based on wallet utxo \ncount; pick that group of inputs which result in the lowest anonscore \nconsolidation penalty; generate deterministic frequency table as \nSchelling point; brute force decompose input sum into likely \ndenominations and pick randomly one of the good ones.\n\n\nIn previous coinjoin implementations, round parameters like the equal \ndenomination are dictated by the coordinator. This is in part because of \nthe design constraints of the Chaumian blind signature coordination \nprotocol. Given knowledge of the input sum of a user, an adversary can \nfind out which denominations the user received, even though it is more \ndifficult to find out exactly which equal amount output coin was \nreceived. Furthermore, this leads to a worse usability as well as more \nblockspace consumption. However, the coordinator can enforce for \nexample, that every user ends up in the same denomination, and thus a \nvery large anonymity set is achieved.\n\nThis can be improved by using a coinjoin coordination protocol like \nWabiSabi with less constraints, specifically no input-input linkage, and \narbitrary input/output amount registration. Now the coordinator does not \ndictates round parameters like minimum equal amount denomination nor the \ndecomposition algorithm used. The idea is to make more decisions client \nside, without substantially sacrificing the privacy guarantees and \nanonymity set size of outputs.\n\nThis turns out to be a quite difficult problem. I will try my best to \nexplain the approach that is currently implemented in Wasabi Wallet's \nthird release candidate. The code is linked below, sorry in advance for \nany discrepancy or confusion in my explanation. Even though the results \nseem to be alright, this is probably not the optimal approach, so I \nkindly ask you grey-bearded Bitcoin wizards to review, break and improve it.\n\n\n## Input Selection\n\nFirst, the client finds out how many coins to select in this round. This \nis a random choice between the numbers 1 and 10. However, if the wallet \ncurrently has less than 35 utxos, there is a preference of choosing 1. \nIf the wallet has more than 125 utxos, there is a preference of choosing \n10. With a gradient in between. This is to control the utxo count of the \nwallet. Noticeably this does not take into account the sats amount in \nthe utxo set, so a user with 0.1 btc will behave the same as one with \n1000 btc. Maybe the target utxo count should be adjusted based on value.\n\nNext, the question of which coins to register: Ideally, those coins \nwhich result in the least anonscore loss possible. Shuffle all suitable \nutxos [i.e. confirmed, below max anonscore target etc], and sort them \nascending by anonscore, then descending by amount. Now create groups \nwith the size of the previously established input count X. The first \ncoin until the X coin of the sorted list are the first group, then shift \none down, so the second group is the second coin until the X+1 coin. Do \nthese \"rolling groups\" all the way to the bottom of the list. This way, \ncoins which have a anonscore close to each other are selected.\n\nRemove those groups which have many coins coming from the same transaction.\n\nFor each group, calculate the anonscore cost of input consolidation \nweighted by amount. If the selected coins have anonscore 3, 5 and 10, \nthen the group has a anonscore of 3. The input with 10 anonscore thus \nhas a 7 anonscore cost. Now weight this to the input value of the \nrelevant coin in the group, so that a loss of anonscore in a high value \ncoin is more costly than if it were a low value coin.\n\nPick that input group with the lowest weighted anonscore cost.\n\nThere is randomness in the number of inputs chosen, but the selection of \nthe best coin group is deterministic. Maybe there can be some randomness \nin the final group selection, without suffering from too much anonscore \nconsolidation penalty.\n\nOne additional idea [which is not yet implemented] is that the \ncoordinator suggests [not dictates] a maximum input value, which changes \nacross different rounds. Large value inputs are not considered suitable, \nif the maximum suggested input value of the current round is smaller.\n\nIt is important to note that currently users choose their inputs without \nknowing the inputs that other users have already registered. It should \nbe possible to design the protocol in a way to share the inputs that \nwere already registered, even if input registration is not yet complete. \nThere are however some privacy concerns, like timing attacks, or \nde-registration of an input after it was announced to other users.\n\n\n## Output Selection\n\nThe coordinator collects all input registrations, and forwards them to \nall users. At this point, all clients knows all inputs of this \ntransaction. The goal now is to get a Schelling point among users of \nwhich output denominations to choose, so that the anonset size of each \ndenomination is sufficiently large.\n\nFirst of all, it's a good idea to limit the denominations that the \nclient will register. Some simulations confirmed that low Hemming weight \nnumbers are efficient, thus clients generate a list of standard \ndenominations which are: powers of two; powers of three; two times \npowers of three; powers of ten; two times powers of ten; and five times \npowers of ten. However, remove some of those denominations which are \nvery close to each other, more so for larger values. Notice that this \nlist of standard denominations is the same across all rounds, it does \nnot depend on specific inputs.\n\nWe can further decrease the list of potential denominations that the \nclient chooses, but specifically for every round. This is a further \nSchelling point of which denominations the client prefers to choose. \nThis is done with a deterministic frequency table, based on the inputs \nof the proposed transaction.\n\nTake each input and greedily decompose it into the standard \ndenominations, meaning every input has precisely one decomposition. [45 \ndecomposes greedily into 32+10+3] Count the occurrences of every \nstandard denomination into a frequency table. All those standard \ndenominations, which have a count of 2 or larger, are considered likely \ndenominations.\n\nNotice that currently we remove the largest input from this frequency \ntable calculation. This is so that the whale does not mix alone by \nhimself. Also notice that individual inputs, and not input sums are \ndecomposed. This is because we found that generating the frequency table \nbased on only one input leads to a more accurate Schelling point, which \nincreases anonset count of the finally chosen denominations. Finally, \nnotice that we only calculate one single decomposition for each input, \nthe greedy one, but we could also calculate multiple different [or all \npossible] decompositions for each input, thus generate a larger \nfrequency table and more likely denominations.\n\nWhereas the frequency table should be deterministic as a Schelling \npoint, the actual user's input sum must not be deterministically \ndecomposed, otherwise an adversary who knows the input sum would find \nout which denominations the client chose. [but not which of the equal \noutputs he got]\n\nThe client takes his input sum [minus fees] and brute-force decomposes \ninto all possible groups of the likely denominations [those with high \ncount in this rounds' frequency table]. We found that in most cases, \neven with this reduced list of likely denominations, any input sum can \nbe decomposed into up to eight outputs. [Sometimes the wealthiest user \ngets a non-standard change amount] However, each decomposition has some \nsmall amount of sats left over, which is is not put into an output \nvalue, but instead pays miner fees.\n\nSort this list of all possible output groups ascending by leftover \namount, and remove those groups which have a leftover amount 1.3x larger \nthan the best option. Further, remove a group if it has a similar \nlargest denomination as another one. [So far everything deterministic, \ngiven all coinjoin inputs and the users' input sum]\n\nOut of this shorter list of output amount groups, shuffle and pick \nrandomly one of them. These are non-deterministic denominations which \nwill be registered for the actual coinjoin outputs. If there were no \nshuffle, but a selection of the amount group with the lowest loss, users \nwould save sats. But arguably having this randomness here increases \nprivacy sufficiently to justify the slight increase in leftover amount cost.\n\nAgain, while choosing their own outputs, clients do not know which \noutputs other clients registered. If the client would have this \ninformation, it could possibly increase the quality of it's own output \nregistration substantially.\n\nNotice there is a different decomposition strategies for the frequency \ntable [greedy] and the input sum [brute-force all]. Maybe, having the \nsame decomposition strategy here would lead to better results.\n\nNotice further that there is no rank ordering of the possible \ndenominations based on some ambiguity score or entropy score. Rather, \nthe choice is random, and in some cases, this might result in not \noptimal outcomes.\n\n\nHere are some results of our simulation of the current algorithm:\n\n50 inputs 15 users\n\nMedian output count:\u00a0\u00a0\u00a0 98\nMedian change count:\u00a0\u00a0\u00a0 4\nMedian change percent:\u00a0 3.2\nMedian out anonsets:\u00a0\u00a0\u00a0 3.5\nMedian leftovers:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 481\n\n300 inputs 70 users\n\nMedian output count:\u00a0\u00a0\u00a0 442\nMedian change count:\u00a0\u00a0\u00a0 0.5\nMedian change percent:\u00a0 0.3\nMedian out anonsets:\u00a0\u00a0\u00a0 9.6\nMedian leftovers:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 394\n\n\nThank you for your consideration to review!\n\nSkol\nMax\n\n\nThird Wasabi 2.0 Release Candidate: \nhttps://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.98.2.0\n\nInput selection code: \nhttps://github.com/zkSNACKs/WalletWasabi/blob/master/WalletWasabi/WabiSabi/Client/CoinJoinClient.cs#L366-L492\n\nAmount decomposer code: \nhttps://github.com/zkSNACKs/WalletWasabi/blob/master/WalletWasabi/WabiSabi/Client/AmountDecomposer.cs\nhttps://github.com/zkSNACKs/WalletWasabi/blob/master/WalletWasabi/WabiSabi/Client/Decomposer.cs \n\n\nDecomposition simulation: https://github.com/nopara73/sake"
            }
        ],
        "thread_summary": {
            "title": "Client side coinjoin amount organization with WabiSabi",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Max Hillebrand"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 10218
        }
    },
    {
        "title": "[bitcoin-dev] ***UNCHECKED*** Client side coinjoin amount organization with WabiSabi",
        "thread_messages": [
            {
                "author": "Max Hillebrand",
                "date": "2022-04-09T06:21:06",
                "message_text_only": "As expected, I sent some wrong explanations regarding input selection. \nThe coin grouping and consolidation penalty seems to be correct, but I \nwas wrong about the final best group selection. Let me try to correct this.\n\nThere are often many groups which have the same consolidation penalty. \nIn one testnet example, a 1 btc wallet with a 20% privacy level had 64 \ncoins, and when tasked to find groups of 4 coins, it found 20 groups, \nwhich all had exactly 0 anonscore consolidation penalty, meaning all \ninputs had the same anonscore. All groups with the lowest consolidation \npenalty advance to the next step. Notice however, there could be only \none group with the lowest penalty, then the following would be \ndeterministic.\n\nFor all groups with the lowest consolidation penalty, we find out how \nmany of its coins come from the same previous transaction. The list of \ngroups gets shuffled, then sorted ascending by count of same transaction \ncoins, and we pick the top one. There will likely be many groups with no \nsame transaction inputs, and as the list is shuffled, we pick randomly \none of them.\n\nTo summarize, the input count is a biased random choice. In some cases, \nespecially for wallets with low utxo count, there is only one good \ngroup, so the input selection is deterministic. However, often there are \nmany possible input groups with low consolidation penalty and low same \ntransaction count, and in these cases there is another random choice of \nwhich inputs get registered. So even if the adversary knows the entire \nwallets utxo set and anonscore, in many cases he will not be able to \nfind out which inputs will be selected in the next round.\n\nThe big question is, if we should try to protect optimally against such \nan adversary, especially if the defense strategy comes at extra \nblockspace cost. If yes, we can add further ambiguity, by not only \ncreating these \"rolling groups\", but creating groups with random inputs, \nor even brute-forcing all possible groups [with some time-out].\n\n\nStatic link: \nhttps://github.com/zkSNACKs/WalletWasabi/blob/8016404503bdffa475d8b219a6fe019a1d5775aa/WalletWasabi/WabiSabi/Client/CoinJoinClient.cs#L366-L433\n\nWIP max suggested input value: \nhttps://github.com/zkSNACKs/WalletWasabi/pull/7748\n\n\nOn 4/6/22 18:05, Max Hillebrand via bitcoin-dev wrote:\n> Hello list,\n>\n> tl;dr: client side coinjoin amount organization is bloody difficult. \n> Our current approach: pick random number of inputs based on wallet \n> utxo count; pick that group of inputs which result in the lowest \n> anonscore consolidation penalty; generate deterministic frequency \n> table as Schelling point; brute force decompose input sum into likely \n> denominations and pick randomly one of the good ones.\n>\n>\n> In previous coinjoin implementations, round parameters like the equal \n> denomination are dictated by the coordinator. This is in part because \n> of the design constraints of the Chaumian blind signature coordination \n> protocol. Given knowledge of the input sum of a user, an adversary can \n> find out which denominations the user received, even though it is more \n> difficult to find out exactly which equal amount output coin was \n> received. Furthermore, this leads to a worse usability as well as more \n> blockspace consumption. However, the coordinator can enforce for \n> example, that every user ends up in the same denomination, and thus a \n> very large anonymity set is achieved.\n>\n> This can be improved by using a coinjoin coordination protocol like \n> WabiSabi with less constraints, specifically no input-input linkage, \n> and arbitrary input/output amount registration. Now the coordinator \n> does not dictates round parameters like minimum equal amount \n> denomination nor the decomposition algorithm used. The idea is to make \n> more decisions client side, without substantially sacrificing the \n> privacy guarantees and anonymity set size of outputs.\n>\n> This turns out to be a quite difficult problem. I will try my best to \n> explain the approach that is currently implemented in Wasabi Wallet's \n> third release candidate. The code is linked below, sorry in advance \n> for any discrepancy or confusion in my explanation. Even though the \n> results seem to be alright, this is probably not the optimal approach, \n> so I kindly ask you grey-bearded Bitcoin wizards to review, break and \n> improve it.\n>\n>\n> ## Input Selection\n>\n> First, the client finds out how many coins to select in this round. \n> This is a random choice between the numbers 1 and 10. However, if the \n> wallet currently has less than 35 utxos, there is a preference of \n> choosing 1. If the wallet has more than 125 utxos, there is a \n> preference of choosing 10. With a gradient in between. This is to \n> control the utxo count of the wallet. Noticeably this does not take \n> into account the sats amount in the utxo set, so a user with 0.1 btc \n> will behave the same as one with 1000 btc. Maybe the target utxo count \n> should be adjusted based on value.\n>\n> Next, the question of which coins to register: Ideally, those coins \n> which result in the least anonscore loss possible. Shuffle all \n> suitable utxos [i.e. confirmed, below max anonscore target etc], and \n> sort them ascending by anonscore, then descending by amount. Now \n> create groups with the size of the previously established input count \n> X. The first coin until the X coin of the sorted list are the first \n> group, then shift one down, so the second group is the second coin \n> until the X+1 coin. Do these \"rolling groups\" all the way to the \n> bottom of the list. This way, coins which have a anonscore close to \n> each other are selected.\n>\n> Remove those groups which have many coins coming from the same \n> transaction.\n>\n> For each group, calculate the anonscore cost of input consolidation \n> weighted by amount. If the selected coins have anonscore 3, 5 and 10, \n> then the group has a anonscore of 3. The input with 10 anonscore thus \n> has a 7 anonscore cost. Now weight this to the input value of the \n> relevant coin in the group, so that a loss of anonscore in a high \n> value coin is more costly than if it were a low value coin.\n>\n> Pick that input group with the lowest weighted anonscore cost.\n>\n> There is randomness in the number of inputs chosen, but the selection \n> of the best coin group is deterministic. Maybe there can be some \n> randomness in the final group selection, without suffering from too \n> much anonscore consolidation penalty.\n>\n> One additional idea [which is not yet implemented] is that the \n> coordinator suggests [not dictates] a maximum input value, which \n> changes across different rounds. Large value inputs are not considered \n> suitable, if the maximum suggested input value of the current round is \n> smaller.\n>\n> It is important to note that currently users choose their inputs \n> without knowing the inputs that other users have already registered. \n> It should be possible to design the protocol in a way to share the \n> inputs that were already registered, even if input registration is not \n> yet complete. There are however some privacy concerns, like timing \n> attacks, or de-registration of an input after it was announced to \n> other users.\n>\n>\n> ## Output Selection\n>\n> The coordinator collects all input registrations, and forwards them to \n> all users. At this point, all clients knows all inputs of this \n> transaction. The goal now is to get a Schelling point among users of \n> which output denominations to choose, so that the anonset size of each \n> denomination is sufficiently large.\n>\n> First of all, it's a good idea to limit the denominations that the \n> client will register. Some simulations confirmed that low Hemming \n> weight numbers are efficient, thus clients generate a list of standard \n> denominations which are: powers of two; powers of three; two times \n> powers of three; powers of ten; two times powers of ten; and five \n> times powers of ten. However, remove some of those denominations which \n> are very close to each other, more so for larger values. Notice that \n> this list of standard denominations is the same across all rounds, it \n> does not depend on specific inputs.\n>\n> We can further decrease the list of potential denominations that the \n> client chooses, but specifically for every round. This is a further \n> Schelling point of which denominations the client prefers to choose. \n> This is done with a deterministic frequency table, based on the inputs \n> of the proposed transaction.\n>\n> Take each input and greedily decompose it into the standard \n> denominations, meaning every input has precisely one decomposition. \n> [45 decomposes greedily into 32+10+3] Count the occurrences of every \n> standard denomination into a frequency table. All those standard \n> denominations, which have a count of 2 or larger, are considered \n> likely denominations.\n>\n> Notice that currently we remove the largest input from this frequency \n> table calculation. This is so that the whale does not mix alone by \n> himself. Also notice that individual inputs, and not input sums are \n> decomposed. This is because we found that generating the frequency \n> table based on only one input leads to a more accurate Schelling \n> point, which increases anonset count of the finally chosen \n> denominations. Finally, notice that we only calculate one single \n> decomposition for each input, the greedy one, but we could also \n> calculate multiple different [or all possible] decompositions for each \n> input, thus generate a larger frequency table and more likely \n> denominations.\n>\n> Whereas the frequency table should be deterministic as a Schelling \n> point, the actual user's input sum must not be deterministically \n> decomposed, otherwise an adversary who knows the input sum would find \n> out which denominations the client chose. [but not which of the equal \n> outputs he got]\n>\n> The client takes his input sum [minus fees] and brute-force decomposes \n> into all possible groups of the likely denominations [those with high \n> count in this rounds' frequency table]. We found that in most cases, \n> even with this reduced list of likely denominations, any input sum can \n> be decomposed into up to eight outputs. [Sometimes the wealthiest user \n> gets a non-standard change amount] However, each decomposition has \n> some small amount of sats left over, which is is not put into an \n> output value, but instead pays miner fees.\n>\n> Sort this list of all possible output groups ascending by leftover \n> amount, and remove those groups which have a leftover amount 1.3x \n> larger than the best option. Further, remove a group if it has a \n> similar largest denomination as another one. [So far everything \n> deterministic, given all coinjoin inputs and the users' input sum]\n>\n> Out of this shorter list of output amount groups, shuffle and pick \n> randomly one of them. These are non-deterministic denominations which \n> will be registered for the actual coinjoin outputs. If there were no \n> shuffle, but a selection of the amount group with the lowest loss, \n> users would save sats. But arguably having this randomness here \n> increases privacy sufficiently to justify the slight increase in \n> leftover amount cost.\n>\n> Again, while choosing their own outputs, clients do not know which \n> outputs other clients registered. If the client would have this \n> information, it could possibly increase the quality of it's own output \n> registration substantially.\n>\n> Notice there is a different decomposition strategies for the frequency \n> table [greedy] and the input sum [brute-force all]. Maybe, having the \n> same decomposition strategy here would lead to better results.\n>\n> Notice further that there is no rank ordering of the possible \n> denominations based on some ambiguity score or entropy score. Rather, \n> the choice is random, and in some cases, this might result in not \n> optimal outcomes.\n>\n>\n> Here are some results of our simulation of the current algorithm:\n>\n> 50 inputs 15 users\n>\n> Median output count:\u00a0\u00a0\u00a0 98\n> Median change count:\u00a0\u00a0\u00a0 4\n> Median change percent:\u00a0 3.2\n> Median out anonsets:\u00a0\u00a0\u00a0 3.5\n> Median leftovers:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 481\n>\n> 300 inputs 70 users\n>\n> Median output count:\u00a0\u00a0\u00a0 442\n> Median change count:\u00a0\u00a0\u00a0 0.5\n> Median change percent:\u00a0 0.3\n> Median out anonsets:\u00a0\u00a0\u00a0 9.6\n> Median leftovers:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 394\n>\n>\n> Thank you for your consideration to review!\n>\n> Skol\n> Max\n>\n>\n> Third Wasabi 2.0 Release Candidate: \n> https://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.98.2.0\n>\n> Input selection code: \n> https://github.com/zkSNACKs/WalletWasabi/blob/master/WalletWasabi/WabiSabi/Client/CoinJoinClient.cs#L366-L492\n>\n> Amount decomposer code: \n> https://github.com/zkSNACKs/WalletWasabi/blob/master/WalletWasabi/WabiSabi/Client/AmountDecomposer.cs\n> https://github.com/zkSNACKs/WalletWasabi/blob/master/WalletWasabi/WabiSabi/Client/Decomposer.cs \n>\n>\n> Decomposition simulation: https://github.com/nopara73/sake\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "***UNCHECKED*** Client side coinjoin amount organization with WabiSabi",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Max Hillebrand"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 13118
        }
    },
    {
        "title": "[bitcoin-dev] Speedy Trial",
        "thread_messages": [
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2022-04-08T09:58:48",
                "message_text_only": "On Wed, Mar 30, 2022 at 6:21 AM Anthony Towns <aj at erisian.com.au> wrote:\n\n> On Mon, Mar 28, 2022 at 09:31:18AM +0100, Jorge Tim\u00f3n via bitcoin-dev\n> wrote:\n> > > In particular, any approach that allows you to block an evil fork,\n> > > even when everyone else doesn't agree that it's evil, would also allow\n> > > an enemy of bitcoin to block a good fork, that everyone else correctly\n> > > recognises is good. A solution that works for an implausible\n> hypothetical\n> > > and breaks when a single attacker decides to take advantage of it is\n> > > not a good design.\n> > Let's discuss those too. Feel free to point out how bip8 fails at some\n> > hypothetical cases speedy trial doesn't.\n>\n> Any case where a flawed proposal makes it through getting activation\n> parameters set and released, but doesn't achieve supermajority hashpower\n> support is made worse by bip8/lot=true in comparison to speedy trial\n>\n\nI disagree. Also, again, not the hypothetical case I want to discuss.\n\n\n> That's true both because of the \"trial\" part, in that activation can fail\n> and you can go back to the drawing board without having to get everyone\n> upgrade a second time, and also the \"speedy\" part, in that you don't\n> have to wait a year or more before you even know what's going to happen.\n>\n> > >  0') someone has come up with a good idea (yay!)\n> > >  1') most of bitcoin is enthusiastically behind the idea\n> > >  2') an enemy of bitcoin is essentially alone in trying to stop it\n> > >  3') almost everyone remains enthusiastic, despite that guy's\n> incoherent\n> > >      raving\n> > >  4') nevertheless, the enemies of bitcoin should have the power to stop\n> > >      the good idea\n> > \"That guy's incoherent raving\"\n> > \"I'm just disagreeing\".\n>\n> Uh, you realise the above is an alternative hypothetical, and not talking\n> about you? I would have thought \"that guy\" being \"an enemy of bitcoin\"\n> made that obvious... I think you're mistaken; I don't think your emails\n> are incoherent ravings.\n>\n\nDo you realize IT IS NOT the hypothetical case I wanted to discuss. Seems\nlike that hypothetical case where a crazy person can be safely ignored\ncovered already.\n\n\n> It was intended to be the simplest possible case of where someone being\n> able to block a change is undesirable: they're motivated by trying to\n> harm bitcoin, they're as far as possible from being part of some economic\n> majority, and they don't even have a coherent rationale to provide for\n> blocking the idea.\n>\n> Cheers,\n> aj\n>\n\nEither I'm explaining my self very badly, you don't want to understand me,\nor you can't understand me for whatever reason.\nI don't feel listened or that \"my concerns have been addressed\", but at\nthis point  I feel we're wasting each others time.Perhaps my rational\nagainst speedy trial is not coherent, or perhaps you haven't understand it\nyet.\nI'm sorry, but I'm tired of trying to explain. and quite, honestly, you\ndon't seem interested in listening to me and understanding me at all, but\nonly in \"addressing my concerns\". Obviously we understand different things\nby \"addressing concerns\".\nPerhaps it's the language barrier or something.\n\nGood bye.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220408/6afa6f58/attachment.html>"
            },
            {
                "author": "Anthony Towns",
                "date": "2022-04-11T13:05:22",
                "message_text_only": "On Fri, Apr 08, 2022 at 11:58:48AM +0200, Jorge Tim\u00f3n via bitcoin-dev wrote:\n> On Wed, Mar 30, 2022 at 6:21 AM Anthony Towns <aj at erisian.com.au> wrote:\n> > > Let's discuss those too. Feel free to point out how bip8 fails at some\n> > > hypothetical cases speedy trial doesn't.\n> > Any case where a flawed proposal makes it through getting activation\n> > parameters set and released, but doesn't achieve supermajority hashpower\n> > support is made worse by bip8/lot=true in comparison to speedy trial\n> I disagree. Also, again, not the hypothetical case I want to discuss.\n\nYou just said \"Let's discuss those\" and \"Feel free to point out how bip8\nfails at some hypothetical cases speedy trial doesn't\", now you're\nsaying it's not what you want to discuss?\n\nBut the above does include your \"evil soft fork\" hypothetical (I mean,\nunless you think being evil isn't a flaw?). The evil soft fork gets\nproposed, and due to some failure in review, merged with activation\nparameters set (via either speedy trial or bip8), then:\n\n a) supermajority hashpower support is achieved quickly:\n     - both speedy trial and bip8+lot=true activate the evil fork\n\n b) supermajority hashpower support is achieved slowly:\n     - speedy trial does *not* activate the evil fork, as it times out\n       quickly\n     - bip8 *does* activate the fork\n\n c) supermajority hashpower support support is never achieved:\n     - speedy trial does *not* activate the evil fork\n     - bip8+lot=false does *not* activate the evil fork, but only after a\n       long timeout\n     - bip8+lot=true *does* activate the evil fork\n\nIn case (a), they both do the same thing; in case (b) speedy trial is\nsuperior to bip8 no matter whether lot=true/false since it blocks the\nevil fork, and in case (c) speedy trial is better than lot=false because\nit's quicker, and much better than lot=true because lot=true activates\nthe evil fork.\n\n> > > >  0') someone has come up with a good idea (yay!)\n> > > >  1') most of bitcoin is enthusiastically behind the idea\n> > > >  2') an enemy of bitcoin is essentially alone in trying to stop it\n> > > >  3') almost everyone remains enthusiastic, despite that guy's\n> > incoherent\n> > > >      raving\n> > > >  4') nevertheless, the enemies of bitcoin should have the power to stop\n> > > >      the good idea\n> > > \"That guy's incoherent raving\"\n> > > \"I'm just disagreeing\".\n> >\n> > Uh, you realise the above is an alternative hypothetical, and not talking\n> > about you? I would have thought \"that guy\" being \"an enemy of bitcoin\"\n> > made that obvious... I think you're mistaken; I don't think your emails\n> > are incoherent ravings.\n> Do you realize IT IS NOT the hypothetical case I wanted to discuss. \n\nYes, that's what \"alternative\" means: a different one.\n\n> I'm sorry, but I'm tired of trying to explain. and quite, honestly, you\n> don't seem interested in listening to me and understanding me at all, but\n> only in \"addressing my concerns\". Obviously we understand different things\n> by \"addressing concerns\".\n> Perhaps it's the language barrier or something.\n\nMy claim is that for *any* bad (evil, flawed, whatever) softfork, then\nattempting activation via bip8 is *never* superior to speedy trial,\nand in some cases is worse.\n\nIf I'm missing something, you only need to work through a single example\nto demonstrate I'm wrong, which seems like it ought to be easy... But\njust saying \"I disagree\" and \"I don't want to talk about that\" isn't\ngoing to convince anyone.\n\nI really don't think the claim above should be surprising; bip8 is meant\nfor activating good proposals, bad ones need to be stopped in review --\nas \"pushd\" has said in this thread: \"Flawed proposal making it through\nactivation is a failure of review process\", and Luke's said similar things\nas well. The point of bip8 isn't to make it easier to reject bad forks,\nit's to make it easier to ensure *good* forks don't get rejected. But\nthat's not your hypothetical, and you don't want to talk about all the\nways to stop an evil fork prior to an activation attempt...\n\nCheers,\naj"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2022-04-24T11:13:08",
                "message_text_only": "You're not even considering user resistance in your cases. You're purely\nrelying on miners and calling speedy trial superior. I don't know if you're\nbeing obtuse on purpose, I'm explaining myself very badly...\n\nI DON'T WANT TO RELY ON MINERS TO RESIST CHANGES I DON'T WANT TO.\nSorry for the tone, but, please, make sure you understand that before\nanswering further, or otherwise it is a waste of time.\n\nNote that it doesn't have to be in bitcoin core, speedy trial could be used\nfor attempting to activate a controversial softfork (it doesn't need to be\nan evil fork, even) outside of core. Like what jeremy is trying to do with\nhis proposal, for example.\nNow, go ahead and tell me that if miners reject it, then doesn't matter,\nbecause nobody ever has told me that before, I need to hear it one more\ntime.\nAnd I'll tell you I don't care about what miners will do, because you\nobviously need to hear it one more time as well.\nOr just tell the list that you resolved all my concerns, like jeremy does\nabout any criticism of his proposals, \"well, it has consensus because only\npeople seeking dissent don't like it\". Likd with speedy trial.\n\"Some people conplained, but we told them theur concerns were addressed and\neven though they disagreed and claimed we didn't understand their\nconcerns...it looked like they were seeking dissent, so we told them to f@$k\noff and now there's consensus\".\n\nSorry for the aggressive tone, but I when people ignore some of my points\nrepeteadly, I start to wonder if they do it on purpose. You're not ignoring\nmy points on purpose, are you?\nNah, of course not, it's just that communication is hard.\nSurely it wouldn't be fair if I accused you of being dishonest or\npretending to be dumb.\nMost probably, I'm not clear or direct enough.\nWhatever the real explanation is for you not understanding me, you're not\nunderstanding me and it feels luke a waste of time for both of us.\nSo, I'm sorry, it's over.\n\n\nOn Mon, Apr 11, 2022, 14:05 Anthony Towns <aj at erisian.com.au> wrote:\n\n> On Fri, Apr 08, 2022 at 11:58:48AM +0200, Jorge Tim\u00f3n via bitcoin-dev\n> wrote:\n> > On Wed, Mar 30, 2022 at 6:21 AM Anthony Towns <aj at erisian.com.au> wrote:\n> > > > Let's discuss those too. Feel free to point out how bip8 fails at\n> some\n> > > > hypothetical cases speedy trial doesn't.\n> > > Any case where a flawed proposal makes it through getting activation\n> > > parameters set and released, but doesn't achieve supermajority\n> hashpower\n> > > support is made worse by bip8/lot=true in comparison to speedy trial\n> > I disagree. Also, again, not the hypothetical case I want to discuss.\n>\n> You just said \"Let's discuss those\" and \"Feel free to point out how bip8\n> fails at some hypothetical cases speedy trial doesn't\", now you're\n> saying it's not what you want to discuss?\n>\n> But the above does include your \"evil soft fork\" hypothetical (I mean,\n> unless you think being evil isn't a flaw?). The evil soft fork gets\n> proposed, and due to some failure in review, merged with activation\n> parameters set (via either speedy trial or bip8), then:\n>\n>  a) supermajority hashpower support is achieved quickly:\n>      - both speedy trial and bip8+lot=true activate the evil fork\n>\n>  b) supermajority hashpower support is achieved slowly:\n>      - speedy trial does *not* activate the evil fork, as it times out\n>        quickly\n>      - bip8 *does* activate the fork\n>\n>  c) supermajority hashpower support support is never achieved:\n>      - speedy trial does *not* activate the evil fork\n>      - bip8+lot=false does *not* activate the evil fork, but only after a\n>        long timeout\n>      - bip8+lot=true *does* activate the evil fork\n>\n> In case (a), they both do the same thing; in case (b) speedy trial is\n> superior to bip8 no matter whether lot=true/false since it blocks the\n> evil fork, and in case (c) speedy trial is better than lot=false because\n> it's quicker, and much better than lot=true because lot=true activates\n> the evil fork.\n>\n> > > > >  0') someone has come up with a good idea (yay!)\n> > > > >  1') most of bitcoin is enthusiastically behind the idea\n> > > > >  2') an enemy of bitcoin is essentially alone in trying to stop it\n> > > > >  3') almost everyone remains enthusiastic, despite that guy's\n> > > incoherent\n> > > > >      raving\n> > > > >  4') nevertheless, the enemies of bitcoin should have the power to\n> stop\n> > > > >      the good idea\n> > > > \"That guy's incoherent raving\"\n> > > > \"I'm just disagreeing\".\n> > >\n> > > Uh, you realise the above is an alternative hypothetical, and not\n> talking\n> > > about you? I would have thought \"that guy\" being \"an enemy of bitcoin\"\n> > > made that obvious... I think you're mistaken; I don't think your emails\n> > > are incoherent ravings.\n> > Do you realize IT IS NOT the hypothetical case I wanted to discuss.\n>\n> Yes, that's what \"alternative\" means: a different one.\n>\n> > I'm sorry, but I'm tired of trying to explain. and quite, honestly, you\n> > don't seem interested in listening to me and understanding me at all, but\n> > only in \"addressing my concerns\". Obviously we understand different\n> things\n> > by \"addressing concerns\".\n> > Perhaps it's the language barrier or something.\n>\n> My claim is that for *any* bad (evil, flawed, whatever) softfork, then\n> attempting activation via bip8 is *never* superior to speedy trial,\n> and in some cases is worse.\n>\n> If I'm missing something, you only need to work through a single example\n> to demonstrate I'm wrong, which seems like it ought to be easy... But\n> just saying \"I disagree\" and \"I don't want to talk about that\" isn't\n> going to convince anyone.\n>\n> I really don't think the claim above should be surprising; bip8 is meant\n> for activating good proposals, bad ones need to be stopped in review --\n> as \"pushd\" has said in this thread: \"Flawed proposal making it through\n> activation is a failure of review process\", and Luke's said similar things\n> as well. The point of bip8 isn't to make it easier to reject bad forks,\n> it's to make it easier to ensure *good* forks don't get rejected. But\n> that's not your hypothetical, and you don't want to talk about all the\n> ways to stop an evil fork prior to an activation attempt...\n>\n> Cheers,\n> aj\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220424/d71c91c4/attachment-0001.html>"
            },
            {
                "author": "Anthony Towns",
                "date": "2022-04-24T12:14:29",
                "message_text_only": "On Sun, Apr 24, 2022 at 12:13:08PM +0100, Jorge Tim\u00f3n wrote:\n> You're not even considering user resistance in your cases. \n\nOf course I am. Again:\n\n> > My claim is that for *any* bad (evil, flawed, whatever) softfork, then\n> > attempting activation via bip8 is *never* superior to speedy trial,\n> > and in some cases is worse.\n> >\n> > If I'm missing something, you only need to work through a single example\n> > to demonstrate I'm wrong, which seems like it ought to be easy... But\n> > just saying \"I disagree\" and \"I don't want to talk about that\" isn't\n> > going to convince anyone.\n\nThe \"some cases\" where bip8 with lot=true is *worse* than speedy trial\nis when miners correctly see that a bad fork is bad.\n\nUnder *any* other circumstance, when they're used to activate a bad soft\nfork, speedy trial and bip8 are the same. If a resistance method works\nagainst bip8, it works against speedy trial; if it fails against speedy\ntrial, it fails against bip8.\n\n> Sorry for the aggressive tone, but I when people ignore some of my points\n> repeteadly, I start to wonder if they do it on purpose. \n\nPerhaps examine the beam in your own eye.\n\nCheers,\naj"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2022-04-24T12:44:16",
                "message_text_only": "On Sun, Apr 24, 2022 at 2:14 PM Anthony Towns <aj at erisian.com.au> wrote:\n\n> On Sun, Apr 24, 2022 at 12:13:08PM +0100, Jorge Tim\u00f3n wrote:\n> > You're not even considering user resistance in your cases.\n>\n> Of course I am. Again:\n>\n\nNo, you're relying on miners to stop bad proposals.\n\n\n> > > My claim is that for *any* bad (evil, flawed, whatever) softfork, then\n> > > attempting activation via bip8 is *never* superior to speedy trial,\n> > > and in some cases is worse.\n> > >\n> > > If I'm missing something, you only need to work through a single\n> example\n> > > to demonstrate I'm wrong, which seems like it ought to be easy... But\n> > > just saying \"I disagree\" and \"I don't want to talk about that\" isn't\n> > > going to convince anyone.\n>\n> The \"some cases\" where bip8 with lot=true is *worse* than speedy trial\n> is when miners correctly see that a bad fork is bad.\n>\n> Under *any* other circumstance, when they're used to activate a bad soft\n> fork, speedy trial and bip8 are the same. If a resistance method works\n> against bip8, it works against speedy trial; if it fails against speedy\n> trial, it fails against bip8.\n>\n\nYou're wrong.\n\n\n> > Sorry for the aggressive tone, but I when people ignore some of my points\n> > repeteadly, I start to wonder if they do it on purpose.\n>\n> Perhaps examine the beam in your own eye.\n>\n\nYeah, whether you do that yourself or not: sorry, it's over.\n\n\n> Cheers,\n> aj\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220424/7340f4aa/attachment-0001.html>"
            },
            {
                "author": "Keagan McClelland",
                "date": "2022-04-25T16:11:45",
                "message_text_only": "Hi AJ,\n\n> Under *any* other circumstance, when they're used to activate a bad soft\nfork, speedy trial and bip8 are the same. If a resistance method works\nagainst bip8, it works against speedy trial; if it fails against speedy\ntrial, it fails against bip8.\n\nIIRC one essential difference between ST (which is a variant of BIP9) and\nBIP8 is that since there is no mandatory signaling during the lockin\nperiod, you can't do a counter soft fork as easily. This is one of the\npoints that Luke mentioned to me that made clear the benefits of the\nmandatory signaling. A variant of ST that does require mandatory signaling\nmay actually be something that can improve the process and give users a\nmore effective means of forking away from SF changes that they reject.\n\nKeagan\n\nOn Sun, Apr 24, 2022 at 12:58 PM Jorge Tim\u00f3n via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n>\n> On Sun, Apr 24, 2022 at 2:14 PM Anthony Towns <aj at erisian.com.au> wrote:\n>\n>> On Sun, Apr 24, 2022 at 12:13:08PM +0100, Jorge Tim\u00f3n wrote:\n>> > You're not even considering user resistance in your cases.\n>>\n>> Of course I am. Again:\n>>\n>\n> No, you're relying on miners to stop bad proposals.\n>\n>\n>> > > My claim is that for *any* bad (evil, flawed, whatever) softfork, then\n>> > > attempting activation via bip8 is *never* superior to speedy trial,\n>> > > and in some cases is worse.\n>> > >\n>> > > If I'm missing something, you only need to work through a single\n>> example\n>> > > to demonstrate I'm wrong, which seems like it ought to be easy... But\n>> > > just saying \"I disagree\" and \"I don't want to talk about that\" isn't\n>> > > going to convince anyone.\n>>\n>> The \"some cases\" where bip8 with lot=true is *worse* than speedy trial\n>> is when miners correctly see that a bad fork is bad.\n>>\n>> Under *any* other circumstance, when they're used to activate a bad soft\n>> fork, speedy trial and bip8 are the same. If a resistance method works\n>> against bip8, it works against speedy trial; if it fails against speedy\n>> trial, it fails against bip8.\n>>\n>\n> You're wrong.\n>\n>\n>> > Sorry for the aggressive tone, but I when people ignore some of my\n>> points\n>> > repeteadly, I start to wonder if they do it on purpose.\n>>\n>> Perhaps examine the beam in your own eye.\n>>\n>\n> Yeah, whether you do that yourself or not: sorry, it's over.\n>\n>\n>> Cheers,\n>> aj\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220425/85ea01c2/attachment.html>"
            },
            {
                "author": "Anthony Towns",
                "date": "2022-04-25T17:00:12",
                "message_text_only": "On Mon, Apr 25, 2022 at 10:11:45AM -0600, Keagan McClelland via bitcoin-dev wrote:\n> > Under *any* other circumstance, when they're used to activate a bad soft\n> > fork, speedy trial and bip8 are the same. If a resistance method works\n> > against bip8, it works against speedy trial; if it fails against speedy\n> > trial, it fails against bip8.\n> IIRC one essential difference between ST (which is a variant of BIP9) and\n> BIP8 is that since there is no mandatory signaling during the lockin\n> period, \n\nBIP8 doesn't have mandatory signaling during the lockin period, it has\nsemi-mandatory [0] signalling during the must_signal period. \n\n> you can't do a counter soft fork as easily.\n\nThe \"counter\" for bip8 activation is to reject any block during either\nthe started or must_signal phases that would meet the threshold. In that\ncase someone running bip8 might see blocks:\n\n  [elapsed=2010, count=1813, signal=yes]\n  [elapsed=2011, count=1813, signal=no]\n  [elapsed=2012, count=1814, signal=yes]\n  [elapsed=2013, count=1815, signal=yes, will-lockin!]\n  [elapsed=2014, count=1816, signal=yes]\n  [elapsed=2015, count=1816, signal=no]\n  [elapsed=2016, count=1816, signal=no]\n  [locked in!]\n\nBut running software to reject the soft fork, you would reject the\nelapsed=2013 block, and any blocks that build on it. You would wait for\nsomeone else to mine a chain that looked like:\n\n  [elapsed=2013, count=1814, signal=no]\n  [elapsed=2014, count=1814, signal=no]\n  [elapsed=2015, count=1814, signal=no]\n  [elapsed=2016, count=1814, signal=no]\n  [failed!]\n\nThat approach works *exactly* the same with speedy trial.\n\nJeremy's written code that does exactly this using the getdeploymentinfo\nrpc to check the deployment status, and the invalidateblock rpc to\nreject a block. See: https://github.com/JeremyRubin/forkd\n\nThe difference to bip8 with lot=true is that nodes running speedy trial\nwill reorg to follow the resisting chain if it has the most work. bip8\nwith lot=true nodes will not reorg to a failing chain, potentially\ncreating an ongoing chain split, unless one group or the other gives up,\nand changes their software.\n\nCheers,\naj\n\n[0] Semi-mandatory in that only \"threshold\" blocks must signal, so if\n    only 4% or 9% of miners aren't signalling and the threshold is set\n    at 95% or 90%, no blocks will be orphaned."
            },
            {
                "author": "Keagan McClelland",
                "date": "2022-04-25T17:26:09",
                "message_text_only": "> BIP8 doesn't have mandatory signaling during the lockin period, it has\nsemi-mandatory [0] signalling during the must_signal period.\n\nThanks for the clarification.\n\n> Semi-mandatory in that only \"threshold\" blocks must signal, so if\n    only 4% or 9% of miners aren't signalling and the threshold is set\n    at 95% or 90%, no blocks will be orphaned.\n\nHow do nodes decide on which blocks are orphaned if only some of them have\nto signal, and others don't? Is it just any block that would cause the\nwhole threshold period to fail?\n\nKeagan\n\nOn Mon, Apr 25, 2022 at 11:00 AM Anthony Towns <aj at erisian.com.au> wrote:\n\n> On Mon, Apr 25, 2022 at 10:11:45AM -0600, Keagan McClelland via\n> bitcoin-dev wrote:\n> > > Under *any* other circumstance, when they're used to activate a bad\n> soft\n> > > fork, speedy trial and bip8 are the same. If a resistance method works\n> > > against bip8, it works against speedy trial; if it fails against speedy\n> > > trial, it fails against bip8.\n> > IIRC one essential difference between ST (which is a variant of BIP9) and\n> > BIP8 is that since there is no mandatory signaling during the lockin\n> > period,\n>\n> BIP8 doesn't have mandatory signaling during the lockin period, it has\n> semi-mandatory [0] signalling during the must_signal period.\n>\n> > you can't do a counter soft fork as easily.\n>\n> The \"counter\" for bip8 activation is to reject any block during either\n> the started or must_signal phases that would meet the threshold. In that\n> case someone running bip8 might see blocks:\n>\n>   [elapsed=2010, count=1813, signal=yes]\n>   [elapsed=2011, count=1813, signal=no]\n>   [elapsed=2012, count=1814, signal=yes]\n>   [elapsed=2013, count=1815, signal=yes, will-lockin!]\n>   [elapsed=2014, count=1816, signal=yes]\n>   [elapsed=2015, count=1816, signal=no]\n>   [elapsed=2016, count=1816, signal=no]\n>   [locked in!]\n>\n> But running software to reject the soft fork, you would reject the\n> elapsed=2013 block, and any blocks that build on it. You would wait for\n> someone else to mine a chain that looked like:\n>\n>   [elapsed=2013, count=1814, signal=no]\n>   [elapsed=2014, count=1814, signal=no]\n>   [elapsed=2015, count=1814, signal=no]\n>   [elapsed=2016, count=1814, signal=no]\n>   [failed!]\n>\n> That approach works *exactly* the same with speedy trial.\n>\n> Jeremy's written code that does exactly this using the getdeploymentinfo\n> rpc to check the deployment status, and the invalidateblock rpc to\n> reject a block. See: https://github.com/JeremyRubin/forkd\n>\n> The difference to bip8 with lot=true is that nodes running speedy trial\n> will reorg to follow the resisting chain if it has the most work. bip8\n> with lot=true nodes will not reorg to a failing chain, potentially\n> creating an ongoing chain split, unless one group or the other gives up,\n> and changes their software.\n>\n> Cheers,\n> aj\n>\n> [0] Semi-mandatory in that only \"threshold\" blocks must signal, so if\n>     only 4% or 9% of miners aren't signalling and the threshold is set\n>     at 95% or 90%, no blocks will be orphaned.\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220425/71c59cba/attachment.html>"
            },
            {
                "author": "Anthony Towns",
                "date": "2022-04-26T05:42:14",
                "message_text_only": "On Mon, Apr 25, 2022 at 11:26:09AM -0600, Keagan McClelland via bitcoin-dev wrote:\n> > Semi-mandatory in that only \"threshold\" blocks must signal, so if\n>     only 4% or 9% of miners aren't signalling and the threshold is set\n>     at 95% or 90%, no blocks will be orphaned.\n> How do nodes decide on which blocks are orphaned if only some of them have\n> to signal, and others don't? Is it just any block that would cause the\n> whole threshold period to fail?\n\nYes, exactly those. See [0] or [1].\n\n[0] https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#Mandatory_signalling\n\n[1] https://github.com/bitcoin/bips/pull/1021\n    (err, you apparently acked that PR)\n\nCheers,\naj"
            },
            {
                "author": "Erik Aronesty",
                "date": "2022-04-26T13:05:56",
                "message_text_only": "- it occurs to me that the real problem we have isn't whether miners lead\nor users lead.   we know that users lead, we just need miners to be \"ready\"\nand have time to upgrade their software\n\n - in the case of \"evil\" forks, i also don't need or want miners to\n\"defend\" bitcoin... (if bitcoin is so broken that a bad fork gets past all\nof the users, the miners have lost their purpose, so that is a fallacy of\nreification and should be ignored)\n\n - we cannot measure user consensus in any systematic way, or else we\nresort to gaming the system or centralization\n\n    - wallet votes (sign a message signalling... ), can cause\ncentralization pressures\n    - node signals (node published signal) will be sybil attacked\n    - eyeballs... (lol)\n\n - can we all agree that this verbal and social wrangling and chest\npounding seems, right now, to remain the best system of achieving\nconsensus?  or can we do better?\n\n\n\n\n\n\n\n\n\n\nOn Tue, Apr 26, 2022 at 1:42 AM Anthony Towns via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Mon, Apr 25, 2022 at 11:26:09AM -0600, Keagan McClelland via\n> bitcoin-dev wrote:\n> > > Semi-mandatory in that only \"threshold\" blocks must signal, so if\n> >     only 4% or 9% of miners aren't signalling and the threshold is set\n> >     at 95% or 90%, no blocks will be orphaned.\n> > How do nodes decide on which blocks are orphaned if only some of them\n> have\n> > to signal, and others don't? Is it just any block that would cause the\n> > whole threshold period to fail?\n>\n> Yes, exactly those. See [0] or [1].\n>\n> [0]\n> https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#Mandatory_signalling\n>\n> [1] https://github.com/bitcoin/bips/pull/1021\n>     (err, you apparently acked that PR)\n>\n> Cheers,\n> aj\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220426/6648cced/attachment-0001.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2022-04-27T02:35:49",
                "message_text_only": "@Erik\n>  can we all agree that this verbal and social wrangling and chest\npounding seems, right now, to remain the best system of achieving\nconsensus?  or can we do better?\n\nI would love to see more people interested in discussing this. Social\nwrangling is certainly the best we have, but is it the best we can do?\nCertainly a certain amount of discussion and back and forth is necessary to\ncome to consensus, but it would be nice to have a discussion and come to a\nconsensus on things like the minimum things required to decided consensus\nis for something (the absence of which makes it obvious that consensus is\ncurrently against), and the maximum amount of things required after which\nit would be clear and obvious that consensus for something has been\nachieved.\n\n> wallet votes (sign a message signalling... ), can cause centralization\npressures\n\nI'm curious to know why you think this is the case. If you mean that\ncentralization of custody is a problem for this, I very much agree.\nHowever, I don't see how having wallet votes would incentivize\ncentralization of custody. Rather the opposite actually - one more reason\nto self-custody.\n\nRegardless, I wouldn't suggest having wallet *votes* per se. I would doubt\nwe'd get a high enough response rate on that to really determine what\nbroader consensus of coin-owners is. However, if we had coin-weighted\npolling, it would I think be a very useful signal by which we could\ndetermine something (to some degree of uncertainty) about what consensus is\namong that group (of coin owners who take the poll).\n\nTheoretically, the economic majority of bitcoin holders can direct the\nmajority of mining power, and can control where the current chain goes (of\ncourse not discounting the ability of the economic minority to hard fork\naway if they want, taking a proportional minority amount of mining power\nwith them).\n\nOne could also think of it like Polybius's three part government, where the\nparts in bitcoin would be: developers, miners, and holders. Perhaps a\nconsensus among all of them should be ideally sought after for a smooth\nupgrade. Because of the blocksize wars, many think miners should simply act\nas a machine to implement the will of the bitcoiners. However, I think\npeople sometimes forget that miners are also bitcoiners and they have a\nunique and important perspective. If the opinions and interests of miners\nis already adequately considered as part of our chaotic discussions on what\nconsensus is, then great. If not, it would seem that the miner signaling\nprocess is a reasonable place for miners to decide to delay and force more\ndiscussion. While its unlikely the average user knows much about the\ntechnical aspects of consensus changes, the fact is that there are many\nnon-developer stakeholders, and it would I think be a very beneficial\nachievement to figure out a way to incorporate those stakeholders into the\nprocess of determining consensus on the most important changes to bitcoin:\nconsensus changes.\n\n\n\nOn Tue, Apr 26, 2022 at 11:32 AM Erik Aronesty via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> - it occurs to me that the real problem we have isn't whether miners lead\n> or users lead.   we know that users lead, we just need miners to be \"ready\"\n> and have time to upgrade their software\n>\n>  - in the case of \"evil\" forks, i also don't need or want miners to\n> \"defend\" bitcoin... (if bitcoin is so broken that a bad fork gets past all\n> of the users, the miners have lost their purpose, so that is a fallacy of\n> reification and should be ignored)\n>\n>  - we cannot measure user consensus in any systematic way, or else we\n> resort to gaming the system or centralization\n>\n>     - wallet votes (sign a message signalling... ), can cause\n> centralization pressures\n>     - node signals (node published signal) will be sybil attacked\n>     - eyeballs... (lol)\n>\n>  - can we all agree that this verbal and social wrangling and chest\n> pounding seems, right now, to remain the best system of achieving\n> consensus?  or can we do better?\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n> On Tue, Apr 26, 2022 at 1:42 AM Anthony Towns via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> On Mon, Apr 25, 2022 at 11:26:09AM -0600, Keagan McClelland via\n>> bitcoin-dev wrote:\n>> > > Semi-mandatory in that only \"threshold\" blocks must signal, so if\n>> >     only 4% or 9% of miners aren't signalling and the threshold is set\n>> >     at 95% or 90%, no blocks will be orphaned.\n>> > How do nodes decide on which blocks are orphaned if only some of them\n>> have\n>> > to signal, and others don't? Is it just any block that would cause the\n>> > whole threshold period to fail?\n>>\n>> Yes, exactly those. See [0] or [1].\n>>\n>> [0]\n>> https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#Mandatory_signalling\n>>\n>> [1] https://github.com/bitcoin/bips/pull/1021\n>>     (err, you apparently acked that PR)\n>>\n>> Cheers,\n>> aj\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220426/01bdfa65/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Speedy Trial",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Anthony Towns",
                "Keagan McClelland",
                "Jorge Tim\u00f3n",
                "Erik Aronesty",
                "Billy Tetrud"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 33064
        }
    },
    {
        "title": "[bitcoin-dev] Simple step one for quantum",
        "thread_messages": [
            {
                "author": "Erik Aronesty",
                "date": "2022-04-08T21:34:07",
                "message_text_only": "First step could be just implementing a similar address type\n(secp26k1+NTRU) and associated validation as a soft fork\n\nhttps://www.openssh.com/releasenotes.html#9.0\n\nThen people can opt-in to quantum safe addresses\n\nStill should work with schnorr and other things\n\nIt's a lot of work to fold this in and it's a some extra validation work\nfor nodes\n\nAdding a fee premium for using these addresses in order to address that\nconcern seems reasonable\n\nI'm not saying I endorse any action at all.  Personally I think this is\nputting the cart like six and a half miles in front of the horse.\n\nBut if there's a lot of people that are like yeah please do this, I'd be\nhappy to make an NTRU bip or something.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220408/083a525e/attachment.html>"
            },
            {
                "author": "Christopher Allen",
                "date": "2022-04-08T23:33:24",
                "message_text_only": "On Fri, Apr 8, 2022 at 2:36 PM Erik Aronesty via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I'm not saying I endorse any action at all.  Personally I think this is\n> putting the cart like six and a half miles in front of the horse.\n>\nI have to agree that practical quantum-attacks are like fusion, human-level\nAI, and nanotechnology \u2014 always 20 years away. In addition, several\nreported approaches to quantum-attack resistance have fallen, and more will\nfall in the next \u201c20 years\u201d.\n\nThat being said, it is interesting research. Here is the best link about\nthis particular approach:\n\nhttps://ntruprime.cr.yp.to/software.html\n\nBlockchain Commons can\u2019t offer to fully fund this research, but if others\ndo we\u2019d be glad to contribute a small grant.\n\n\u2014 Christopher Allen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220408/ed177bd3/attachment.html>"
            },
            {
                "author": "Christopher Allen",
                "date": "2022-04-08T23:35:57",
                "message_text_only": "On Fri, Apr 8, 2022 at 4:33 PM Christopher Allen <\nChristopherA at lifewithalacrity.com> wrote:\n\n> That being said, it is interesting research. Here is the best link about\n> this particular approach:\n>\n> https://ntruprime.cr.yp.to/software.html\n>\n\nAlso I think this is the original academic paper:\n\nhttps://eprint.iacr.org/2021/826.pdf\n\n<https://ntruprime.cr.yp.to/software.html>\n>\n\u2014 Christopher Allen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220408/d6013ace/attachment.html>"
            },
            {
                "author": "Lloyd Fournier",
                "date": "2022-04-09T21:40:38",
                "message_text_only": "Hey all,\n\nA good first step might be to express this as a research problem on\nbitcoinproblems.org! I've had in mind creating a problem page on how to\ndesign a PQ TR commitment in each key so that if QC were to become a\nreality we could softfork to enable that spend (and disable normal key path\nspends):\nhttps://github.com/bitcoin-problems/bitcoin-problems.github.io/issues/4\n\nBecoming the author/maintainer of this problem is as simple as making a PR\nto the repo. The problem doesn't have to be focused on a TR solution but\ncould be a general description of the problem with that and others as a\npotential solution direction.\n\nCheers,\n\nLL\n\nOn Sat, 9 Apr 2022 at 18:39, Christopher Allen via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n>\n> On Fri, Apr 8, 2022 at 4:33 PM Christopher Allen <\n> ChristopherA at lifewithalacrity.com> wrote:\n>\n>> That being said, it is interesting research. Here is the best link about\n>> this particular approach:\n>>\n>> https://ntruprime.cr.yp.to/software.html\n>>\n>\n> Also I think this is the original academic paper:\n>\n> https://eprint.iacr.org/2021/826.pdf\n>\n> <https://ntruprime.cr.yp.to/software.html>\n>>\n> \u2014 Christopher Allen _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220410/e3a818db/attachment.html>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2022-04-11T18:07:29",
                "message_text_only": "The NIST Post-Quantum Cryptography competition [1] results should be\npublished \"soon\":\nhttps://groups.google.com/a/list.nist.gov/g/pqc-forum/c/fvnhyQ25jUg/m/-pYN2nshBgAJ\n.\n\nThe last reply on that thread promised results by the end of March, but\nsince that has come and gone, I think it's safe to expect results by the end\nof this month (April). FWIW, NTRU and NTRU Prime both made it to round 3 for\nthe public key encryption/exchange and digital signature categories, but\nboth of them seem to be mired in some sort of patent controversy atm...\n\n-- Laolu\n\n[1]: https://csrc.nist.gov/Projects/post-quantum-cryptography\n\nOn Fri, Apr 8, 2022 at 5:36 PM Erik Aronesty via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> First step could be just implementing a similar address type\n> (secp26k1+NTRU) and associated validation as a soft fork\n>\n> https://www.openssh.com/releasenotes.html#9.0\n>\n> Then people can opt-in to quantum safe addresses\n>\n> Still should work with schnorr and other things\n>\n> It's a lot of work to fold this in and it's a some extra validation work\n> for nodes\n>\n> Adding a fee premium for using these addresses in order to address that\n> concern seems reasonable\n>\n> I'm not saying I endorse any action at all.  Personally I think this is\n> putting the cart like six and a half miles in front of the horse.\n>\n> But if there's a lot of people that are like yeah please do this, I'd be\n> happy to make an NTRU bip or something.\n>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220411/98c0ddc1/attachment-0001.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2022-04-11T18:17:22",
                "message_text_only": "FWICT: Streamlined NTRU Prime (sntrup) has no known patent issues.\n\nShould be fine.\n\nRegardless, a \"double-wrapped bitcoin address of some kind\" can be\nspecified, coded up and the relevant module replaced whenever the dust\nsettles.\n\nI know Bitcoin doesn't (yet) have fee \"weights\", but i still think these\naddresses should be called \"heavier\" if they are at al significantly slower\nto validate.\n\nOn Mon, Apr 11, 2022 at 2:07 PM Olaoluwa Osuntokun <laolu32 at gmail.com>\nwrote:\n\n> The NIST Post-Quantum Cryptography competition [1] results should be\n> published \"soon\":\n>\n> https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/fvnhyQ25jUg/m/-pYN2nshBgAJ\n> .\n>\n> The last reply on that thread promised results by the end of March, but\n> since that has come and gone, I think it's safe to expect results by the\n> end\n> of this month (April). FWIW, NTRU and NTRU Prime both made it to round 3\n> for\n> the public key encryption/exchange and digital signature categories, but\n> both of them seem to be mired in some sort of patent controversy atm...\n>\n> -- Laolu\n>\n> [1]: https://csrc.nist.gov/Projects/post-quantum-cryptography\n>\n> On Fri, Apr 8, 2022 at 5:36 PM Erik Aronesty via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> First step could be just implementing a similar address type\n>> (secp26k1+NTRU) and associated validation as a soft fork\n>>\n>> https://www.openssh.com/releasenotes.html#9.0\n>>\n>> Then people can opt-in to quantum safe addresses\n>>\n>> Still should work with schnorr and other things\n>>\n>> It's a lot of work to fold this in and it's a some extra validation work\n>> for nodes\n>>\n>> Adding a fee premium for using these addresses in order to address that\n>> concern seems reasonable\n>>\n>> I'm not saying I endorse any action at all.  Personally I think this is\n>> putting the cart like six and a half miles in front of the horse.\n>>\n>> But if there's a lot of people that are like yeah please do this, I'd be\n>> happy to make an NTRU bip or something.\n>>\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220411/35824830/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Simple step one for quantum",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Olaoluwa Osuntokun",
                "Erik Aronesty",
                "Christopher Allen",
                "Lloyd Fournier"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 8218
        }
    },
    {
        "title": "[bitcoin-dev] Reading moderated emails",
        "thread_messages": [
            {
                "author": "alicexbt",
                "date": "2022-04-09T00:29:14",
                "message_text_only": "Hi Bitcoin Developers,\n\nSince some emails get moderated, I wanted to share one python script that I found useful.\n\nDownload eml file from moderated archives: https://lists.ozlabs.org/pipermail/bitcoin-dev-moderation/\n\nInstall fast_mail_parser and use this python script: https://github.com/namecheap/fast_mail_parser\n\nThis prints body in base64 format and different parts. Email can be read in plain text by decoding the relevant line: https://i.imgur.com/nnd56Li.png\n\nPasting the highlighted content in https://www.base64decode.org/ will decode the email content or using b64decode() in python.\n\n/dev/fd0\n\nSent with [ProtonMail](https://protonmail.com/) secure email.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220409/5bcd9cf0/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Reading moderated emails",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "alicexbt"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 851
        }
    },
    {
        "title": "[bitcoin-dev] [Pre-BIP] Fee Accounts",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2022-04-10T19:32:52",
                "message_text_only": "On Sun, Feb 20, 2022 at 08:29:00AM -0800, Jeremy Rubin wrote:\n> > On Fri, Feb 18, 2022 at 04:38:27PM -0800, Jeremy Rubin wrote:\n> > > > As I said, it's a new kind of pinning attack, distinct from other types\n> > > of pinning attack.\n> > >\n> > > I think pinning is \"formally defined\" as sequences of transactions which\n> > > prevent or make it less likely for you to make any progress (in terms of\n> > > units of computation proceeding).\n> >\n> > Mentioning \"computation\" when talking about transactions is misleading:\n> > blockchain transactions have nothing to do with computation.\n> >\n> \n> It is in fact computation. Branding it as \"misleading\" is misleading... The\n> relevant literature is https://en.wikipedia.org/wiki/Non-blocking_algorithm,\n> sponsors helps get rid of deadlocking so that any thread can be guaranteed\n> to make progress. E.g., this is critical in Eltoo, which is effectively a\n> coordinated multi-party computation on-chain to compute the highest\n> sequence number known by any worker.\n> \n> That transactions are blobs of \"verification\" (which is also itself a\n> computation) less so than dynamic computations is irrelevant to the fact\n> that series of transactions do represent computations.\n\nIt's misleading in the blockchain environment where lots of people have been\ntrying to portray blockchain schemes as \"world computers\" and other nonsense\nmarketing. You would have been better off just saying \"make any progress\"\nwithout mentioning \"computation\" at all.\n\n> > > Something that only increases possibility to make progress cannot be\n> > > pinning.\n> >\n> > It is incorrect to say that all use-cases have the property that any\n> > version of\n> > a transaction being mined is progress.\n> >\n> \n> It is progress, tautologically. Progress is formally definable as a\n> transaction of any kind getting mined. Pinning prevents progress by an\n> adversarial worker. Sponsoring enables progress, but it may not be your\n> preferred interleaving. That's OK, but it's inaccurate to say it is not\n> progress.\n\nLet's try to use terminology with straight-forward meanings. I've yet to see\nany other protocol where \"progess\" can also mean useless work being done.\n\n> I didn't claim there to be a chain of unconfirmed, I claimed that there\n> could be single output chain that you're RBF'ing one step per block.\n> \n> E.g., it could be something like\n> \n> A_0 -> {A_1 w/ CSV 1 block, OP_RETURN {blah, foo}}\n> A_1 -> {A_2 w/ CSV 1 block, OP_RETURN {bar}}\n> \n> such that A_i provably can't have an unconfirmed descendant. The notion\n> would be that you're replacing one with another. E.g., if you're updating\n> the calendar like:\n> \n> \n> Version 0: A_0 -> {A_1 w/ CSV 1 block, OP_RETURN {blah, foo}}\n> Version 1: A_0 -> {A_1 w/ CSV 1 block, OP_RETURN {blah, foo, bar}}\n> Version 2: A_0 -> {A_1 w/ CSV 1 block, OP_RETURN {blah, foo, bar, delta}}\n> \n> and version 1 gets mined, then in A_1's spend you simply shift delta to\n> that (next) calendar.\n> \n> A_1 -> {A_2 w/ CSV 1 block, OP_RETURN {delta}}\n> \n> Thus my claim that someone sponsoring a old version only can delay by 1\n> block the calendar commit.\n\nYou seem to still be confused about OpenTimestamps. There is no output chain at\nall; OTS has no reason to use CheckSequenceVerify and does not. OTS\ntransactions are, from the point of view of the timestamp proofs, entirely\nindependent of one another.\n\nRemember that OTS simply proves data in the past. Nothing more.\n\n> > > Lastly, if you do get \"necromanced\" on an earlier RBF'd transaction by a\n> > > third party for OTS, you should be relatively happy because it cost you\n> > > less fees overall, since the undoing of your later RBF surely returned\n> > some\n> > > satoshis to your wallet.\n> >\n> > As I said above, no it doesn't.\n> >\n> >\n> It does save money since you had to pay to RBF, the N+1st txn will be\n> paying higher fee than the Nth. So if someone else sponsors an earlier\n> version, then you save whatever feerate/fee bumps you would have paid and\n> the funds are again in your change output (or something). You can apply\n> those change output savings to your next batch, which can include any\n> entries that have been dropped .\n\nAgain, that is not true. Because OTS doesn't have a chain of transactions, I'd\nrather do one transaction with all pending commitments at a particular time\nrather than waste money on mining two transactions for a given set of\ncommitments that need timestamping.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220410/e4530413/attachment.sig>"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2022-04-11T13:18:10",
                "message_text_only": "> nonsense marketing\n\nI'm sure the people who are confused about \"blockchain schemes as \\\"world\ncomputers\\\" and other nonsense\nmarketing\" are avid and regular readers of the bitcoin devs mailing list so\nI offer my sincerest apologies to all members of the intersection of those\nsets who were confused by the description given.\n\n> useless work\n\nprogress is not useless work, it *is* useful work in this context. you have\ncommitted to some subset of data that you requested -- if it was 'useless',\nwhy did you *ever* bother to commit it in the first place? However, it is\nnot 'maximally useful' in some sense. However, progress is progress --\nsuppose you only confirmed 50% of the commitments, is that not progress? If\nyou just happened to observe 50% of the commitments commit because of\nproximity to the time a block was mined and tx propagation naturally would\nyou call it useless?\n\n> Remember that OTS simply proves data in the past. Nothing more.\n> OTS doesn't have a chain of transactions\nGotcha -- I've not been able to find an actual spec of Open Time Stamps\nanywhere, so I suppose I just assumed based on how I think it *should*\nwork. Having a chain of transactions would serve to linearize history of\nOTS commitments which would let you prove, given reorgs, that knowledge of\ncommit A was before B a bit more robustly.\n\n>  I'd rather do one transaction with all pending commitments at a\nparticular time\nrather than waste money on mining two transactions for a given set of\ncommitments\n\nThis sounds like a personal preference v.s. a technical requirement.\n\nYou aren't doing any extra transactions in the model i showed, what you're\ndoing is selecting the window for the next based on the prior conf.\n\nSee the diagram below, you would have to (if OTS is correct) support this\nsort of 'attempt/confirm' head that tracks attempted commitments and\nconfirmed ones and 'rewinds' after a confirm to make the next commit\ncontain the prior attempts that didn't make it.\n\n[.........................................................................]\n ------^ confirm head tx 0 at height 34\n        ------------------------^ attempt head after tx 0\n         -----------^ confirm head tx 1 at height 35\n                      --------------------------^ attempt head after tx 1\n                      ------------^ confirm head tx 2 at height 36\n                                     -------------------------------^\nattempt head after tx 2\n                                      -------------------------------^\nconfirm head tx 3 at height 37\n\nyou can compare this to a \"spherical cow\" model where RBF is always perfect\nand guaranteed inclusion:\n\n\n[.........................................................................]\n ------^ confirm head tx 0 at height 34\n       -------------------------^ confirm head tx 1 at height 35\n                                       -----------^ confirm head at tx 1\nheight 36\n                                                       -----------------^\nconfirm head tx 3 at height 37\n\nThe same number of transactions gets used over the time period.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220411/2492791b/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2022-04-15T14:52:47",
                "message_text_only": "On Mon, Apr 11, 2022 at 09:18:10AM -0400, Jeremy Rubin wrote:\n> > nonsense marketing\n> \n> I'm sure the people who are confused about \"blockchain schemes as \\\"world\n> computers\\\" and other nonsense\n> marketing\" are avid and regular readers of the bitcoin devs mailing list so\n> I offer my sincerest apologies to all members of the intersection of those\n> sets who were confused by the description given.\n\nOf course, uninformed people _do_ read all kinds of technical materials. And\nmore importantly, those technical materials get quoted by journalists,\nscammers, etc.\n\n> > useless work\n> \n> progress is not useless work, it *is* useful work in this context. you have\n> committed to some subset of data that you requested -- if it was 'useless',\n> why did you *ever* bother to commit it in the first place? However, it is\n> not 'maximally useful' in some sense. However, progress is progress --\n> suppose you only confirmed 50% of the commitments, is that not progress? If\n> you just happened to observe 50% of the commitments commit because of\n> proximity to the time a block was mined and tx propagation naturally would\n> you call it useless?\n\nPlease don't trim quoted text to the point where all context is lost. Lots of\npeople read this mailing list and doing that isn't helpful to them.\n\n> > Remember that OTS simply proves data in the past. Nothing more.\n> > OTS doesn't have a chain of transactions\n> Gotcha -- I've not been able to find an actual spec of Open Time Stamps\n\nThe technical spec of OpenTimestamps is of course the normative validation\nsource code, currently python-opentimestamps, similar to how the technical spec\nof Bitcoin is the consensus parts of the Bitcoin Core codebase. The explanatory\ndocs are linked on https://opentimestamps.org under the \"How It Works\" section.\nIt'd be good to take the linked post in that section and turn it into better\nexplanatory materials with graphics (esp interactive/animated graphics).\n\n> anywhere, so I suppose I just assumed based on how I think it *should*\n> work. Having a chain of transactions would serve to linearize history of\n> OTS commitments which would let you prove, given reorgs, that knowledge of\n> commit A was before B a bit more robustly.\n\nI'll reply to this as a separate email as this discussion - while useful - is\ngetting quite off topic for this thread.\n\n> >  I'd rather do one transaction with all pending commitments at a\n> particular time\n> rather than waste money on mining two transactions for a given set of\n> commitments\n> \n> This sounds like a personal preference v.s. a technical requirement.\n> \n> You aren't doing any extra transactions in the model i showed, what you're\n> doing is selecting the window for the next based on the prior conf.\n\n...the model you showed is wrong, as there is no reason to have a linearized\ntransaction history. OpenTimestamps proofs don't even have the concept of\ntransactions: the proof format proves that data existed prior to a merkle root\nof a particular Bitcoin block. Not a Bitcoin transaction.\n\n> See the diagram below, you would have to (if OTS is correct) support this\n> sort of 'attempt/confirm' head that tracks attempted commitments and\n> confirmed ones and 'rewinds' after a confirm to make the next commit\n> contain the prior attempts that didn't make it.\n> \n> [.........................................................................]\n>  ------^ confirm head tx 0 at height 34\n>         ------------------------^ attempt head after tx 0\n>          -----------^ confirm head tx 1 at height 35\n>                       --------------------------^ attempt head after tx 1\n>                       ------------^ confirm head tx 2 at height 36\n>                                      -------------------------------^\n> attempt head after tx 2\n>                                       -------------------------------^\n> confirm head tx 3 at height 37\n> \n> you can compare this to a \"spherical cow\" model where RBF is always perfect\n> and guaranteed inclusion:\n> \n> \n> [.........................................................................]\n>  ------^ confirm head tx 0 at height 34\n>        -------------------------^ confirm head tx 1 at height 35\n>                                        -----------^ confirm head at tx 1\n> height 36\n>                                                        -----------------^\n> confirm head tx 3 at height 37\n> \n> The same number of transactions gets used over the time period.\n\nNone of the above has anything to do with how OpenTimestamps works.\n\nAnyway, getting back to the topic at hand, I remain of the opinion that in the\nunlikely event that fee accounts is ever implemented, it should be opt-in.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220415/3d390f28/attachment-0001.sig>"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2022-04-17T20:57:28",
                "message_text_only": "the 'lots of people' stuff (get confused, can't figure out what i'm\nquoting, actually are reading this conversation) is an appeal to an\nauthority that doesn't exist. If something is unclear to you, let me know.\nIf it's unclear to a supposed existential person or set of persons, they\ncan let me know.\n\n\nconcretely, I am confused by how OTS can both support RBF for updating to\nlarger commitments (the reason you're arguing with me) and not have an\nepoch based re-comittings scheme and still be correct. My assumption now,\nshort of a coherent spec that's not just 'read the code', is that OTS\nprobably is not formally correct and has some holes in what is\ncommitted to, or relies on clients re-requesting proofs if they fail to be\ncommitted. in any case, you would be greatly aided by having an actual spec\nfor OTS since i'm not interested in the specifics of OTS software, but I'm\nwilling to look at the protocol. So if you do that, maybe we can talk more\nabout the issue you see with how sponsors works.\n\nfurther, I think that if there is something that sponsors does that could\nmake a hypothetical OTS-like service work better, in a way that would be\nopaque (read: soft-fork like wrt compatibility) to clients, then we should\njust change what OTS is rather than committing ourselves to a worse design\nin service of some unstated design goals. In particular, it seems that\nOTS's servers can be linearized and because old clients aren't looking for\nlinearization, then the new linearization won't be a breaking change for\nold clients, just calendar servers. And new clients can benefit from\nlinearization.\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n\n\nOn Fri, Apr 15, 2022 at 7:52 AM Peter Todd <pete at petertodd.org> wrote:\n\n> On Mon, Apr 11, 2022 at 09:18:10AM -0400, Jeremy Rubin wrote:\n> > > nonsense marketing\n> >\n> > I'm sure the people who are confused about \"blockchain schemes as \\\"world\n> > computers\\\" and other nonsense\n> > marketing\" are avid and regular readers of the bitcoin devs mailing list\n> so\n> > I offer my sincerest apologies to all members of the intersection of\n> those\n> > sets who were confused by the description given.\n>\n> Of course, uninformed people _do_ read all kinds of technical materials.\n> And\n> more importantly, those technical materials get quoted by journalists,\n> scammers, etc.\n>\n> > > useless work\n> >\n> > progress is not useless work, it *is* useful work in this context. you\n> have\n> > committed to some subset of data that you requested -- if it was\n> 'useless',\n> > why did you *ever* bother to commit it in the first place? However, it is\n> > not 'maximally useful' in some sense. However, progress is progress --\n> > suppose you only confirmed 50% of the commitments, is that not progress?\n> If\n> > you just happened to observe 50% of the commitments commit because of\n> > proximity to the time a block was mined and tx propagation naturally\n> would\n> > you call it useless?\n>\n> Please don't trim quoted text to the point where all context is lost. Lots\n> of\n> people read this mailing list and doing that isn't helpful to them.\n>\n> > > Remember that OTS simply proves data in the past. Nothing more.\n> > > OTS doesn't have a chain of transactions\n> > Gotcha -- I've not been able to find an actual spec of Open Time Stamps\n>\n> The technical spec of OpenTimestamps is of course the normative validation\n> source code, currently python-opentimestamps, similar to how the technical\n> spec\n> of Bitcoin is the consensus parts of the Bitcoin Core codebase. The\n> explanatory\n> docs are linked on https://opentimestamps.org under the \"How It Works\"\n> section.\n> It'd be good to take the linked post in that section and turn it into\n> better\n> explanatory materials with graphics (esp interactive/animated graphics).\n>\n> > anywhere, so I suppose I just assumed based on how I think it *should*\n> > work. Having a chain of transactions would serve to linearize history of\n> > OTS commitments which would let you prove, given reorgs, that knowledge\n> of\n> > commit A was before B a bit more robustly.\n>\n> I'll reply to this as a separate email as this discussion - while useful -\n> is\n> getting quite off topic for this thread.\n>\n> > >  I'd rather do one transaction with all pending commitments at a\n> > particular time\n> > rather than waste money on mining two transactions for a given set of\n> > commitments\n> >\n> > This sounds like a personal preference v.s. a technical requirement.\n> >\n> > You aren't doing any extra transactions in the model i showed, what\n> you're\n> > doing is selecting the window for the next based on the prior conf.\n>\n> ...the model you showed is wrong, as there is no reason to have a\n> linearized\n> transaction history. OpenTimestamps proofs don't even have the concept of\n> transactions: the proof format proves that data existed prior to a merkle\n> root\n> of a particular Bitcoin block. Not a Bitcoin transaction.\n>\n> > See the diagram below, you would have to (if OTS is correct) support this\n> > sort of 'attempt/confirm' head that tracks attempted commitments and\n> > confirmed ones and 'rewinds' after a confirm to make the next commit\n> > contain the prior attempts that didn't make it.\n> >\n> >\n> [.........................................................................]\n> >  ------^ confirm head tx 0 at height 34\n> >         ------------------------^ attempt head after tx 0\n> >          -----------^ confirm head tx 1 at height 35\n> >                       --------------------------^ attempt head after tx 1\n> >                       ------------^ confirm head tx 2 at height 36\n> >                                      -------------------------------^\n> > attempt head after tx 2\n> >                                       -------------------------------^\n> > confirm head tx 3 at height 37\n> >\n> > you can compare this to a \"spherical cow\" model where RBF is always\n> perfect\n> > and guaranteed inclusion:\n> >\n> >\n> >\n> [.........................................................................]\n> >  ------^ confirm head tx 0 at height 34\n> >        -------------------------^ confirm head tx 1 at height 35\n> >                                        -----------^ confirm head at tx 1\n> > height 36\n> >                                                        -----------------^\n> > confirm head tx 3 at height 37\n> >\n> > The same number of transactions gets used over the time period.\n>\n> None of the above has anything to do with how OpenTimestamps works.\n>\n> Anyway, getting back to the topic at hand, I remain of the opinion that in\n> the\n> unlikely event that fee accounts is ever implemented, it should be opt-in.\n>\n> --\n> https://petertodd.org 'peter'[:-1]@petertodd.org\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220417/be59c0a8/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2022-04-28T12:15:02",
                "message_text_only": "On Sun, Apr 17, 2022 at 01:57:28PM -0700, Jeremy Rubin wrote:\n> the 'lots of people' stuff (get confused, can't figure out what i'm\n> quoting, actually are reading this conversation) is an appeal to an\n> authority that doesn't exist. If something is unclear to you, let me know.\n> If it's unclear to a supposed existential person or set of persons, they\n> can let me know.\n\nIt's pretty simple: bitcoin-dev is read by hundreds of people. This has nothing\nto do with authority. It's about not wasting the time of those people.\n\n> concretely, I am confused by how OTS can both support RBF for updating to\n> larger commitments (the reason you're arguing with me) and not have an\n> epoch based re-comittings scheme and still be correct. My assumption now,\n> short of a coherent spec that's not just 'read the code', is that OTS\n> probably is not formally correct and has some holes in what is\n> committed to, or relies on clients re-requesting proofs if they fail to be\n> committed. in any case, you would be greatly aided by having an actual spec\n> for OTS since i'm not interested in the specifics of OTS software, but I'm\n> willing to look at the protocol. So if you do that, maybe we can talk more\n> about the issue you see with how sponsors works.\n\nOpenTimestamps is, as the name suggests, for cryptographic timestamping. As is\nobvious to anyone with a good knowledge of cryptography, a cryptographic\ntimestamp proves that data existed prior to some point in time. That's it.\n\n> further, I think that if there is something that sponsors does that could\n> make a hypothetical OTS-like service work better, in a way that would be\n> opaque (read: soft-fork like wrt compatibility) to clients, then we should\n> just change what OTS is rather than committing ourselves to a worse design\n> in service of some unstated design goals. In particular, it seems that\n> OTS's servers can be linearized and because old clients aren't looking for\n> linearization, then the new linearization won't be a breaking change for\n> old clients, just calendar servers. And new clients can benefit from\n> linearization.\n\nThe fact you keep bringing up linearization for a timestmaping service makes me\nthink something is missing in your understanding of cryptography. Tell me, how\nexactly do you think linearization would help in an example use-case? More\nspecifically, what attack would be prevented?\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220428/3d16d41a/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Fee Accounts",
            "categories": [
                "bitcoin-dev",
                "Pre-BIP"
            ],
            "authors": [
                "Jeremy Rubin",
                "Peter Todd"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 22549
        }
    },
    {
        "title": "[bitcoin-dev] A Calculus of Covenants",
        "thread_messages": [
            {
                "author": "Jeremy Rubin",
                "date": "2022-04-12T14:33:14",
                "message_text_only": "Sharing below a framework for thinking about covenants. It is most useful\nfor modeling local covenants, that is, covenants where only one coin must\nbe examined, and not multi-coin covenants whereby you could have issues\nwith protocol forking requiring a more powerful stateful prover. It's the\nmodel I use in Sapio.\n\nI define a covenant primitive as follows:\n\n1) A set of sets of transaction intents (a *family)*, potentially recursive\nor co-recursive (e.g., the types of state transitions that can be\ngenerated). These intents can also be represented by a language that\ngenerates the transactions, rather than the literal transactions\nthemselves. We do the family rather than just sets at this level because to\ninstantiate a covenant we must pick a member of the family to use.\n2) A verifier generator function that generates a function that accepts an\nintent that is any element of one member of the family of intents and a\nproof for it and rejects others.\n3) A prover generator function that generates a function that takes an\nintent that is any element of one member of the family and some extra data\nand returns either a new prover function, a finished proof, or a rejection\n(if not a valid intent).\n4) A set of proofs that the Prover, Verifier, and a set of intents are\n\"impedance matched\", that is, all statements the prover can prove and all\nstatements the verifier can verify are one-to-one and onto (or something\nsimilar), and that this also is one-to-one and onto with one element of the\nintents (a set of transactions) and no other.\n5) A set of assumptions under which the covenant is verified (e.g., a\nmulti-sig covenant with at least 1-n honesty, a multisig covenant with any\n3-n honesty required, Sha256 collision resistance, DLog Hardness, a SGX\nmodule being correct).\n\nTo instantiate a covenant, the user would pick a particular element of the\nset of sets of transaction intents. For example, in TLUV payment pool, it\nwould be the set of all balance adjusting transactions and redemptions. *Note,\nwe can 'cleave' covenants into separate bits -- e.g. one TLUV + some extra\nCTV paths can be 'composed', but the composition is not guaranteed to be\nwell formed.*\n\nOnce the user has a particular intent, they then must generate a verifier\nwhich can receive any member of the set of intents and accept it, and\nreceive any transaction outside the intents and reject it.\n\nWith the verifier in hand (or at the same time), the user must then\ngenerate a prover function that can make a proof for any intent that the\nverifier will accept. This could be modeled as a continuation system (e.g.,\nmultisig requires multiple calls into the prover), or it could be\nconsidered to be wrapped as an all-at-once function. The prover could be\ndone via a multi-sig in which case the assumptions are stronger, but it\nstill should be well formed such that the signers can clearly and\nunambiguously sign all intents and reject all non intents, otherwise the\ncovenant is not well formed.\n\nThe proofs of validity of the first three parts and the assumptions for\nthem should be clear, but do not require generation for use. However,\ncovenants which do not easily permit proofs are less useful.\n\nWe now can analyze three covenants under this, plain CTV, 2-3 online\nmultisig, 3-3 presigned + deleted.\n\nCTV:\n1) Intent sets: the set of specific next transactions, with unbound inputs\ninto it that can be mutated (but once the parent is known, can be filled in\nfor all children).\n2) Verifier: The transaction has the hash of the intent\n3) Prover: The transaction itself and no other work\n4) Proofs of impedance: trivial.\n5) Assumptions: sha256\n6) Composition: Any two CTVs can be OR'd together as separate leafs\n\n2-3 Multisig:\n1) Intent: All possible sets of transactions, one set selected per instance\n2) Verifier: At least 2 signed the transition\n3) Prover: Receive some 'state' in the form of business logic to enforce,\nonly sign if that is satisfied. Produce a signature.\n4) Impedance: The business logic must cover the instance's Intent set and\nmust not be able to reach any other non-intent\n5) Assumptions: at least 2 parties are 'honest' for both liveness and for\ncorrectness, and the usual suspects (sha256, schnorr, etc)\n6) Composition: Any two groups can be OR'd together, if the groups have\ndifferent signers, then the assumptions expand\n\n3-3 Presigned:\nSame as CTV except:\n5) Assumptions: at least one party deletes their key after signing\n\n\n You can also think through other covenants like TLUV in this model.\n\nOne useful question is the 'cardinality' of an intent set. The useful\nnotion of this is both in magnitude but also contains. Obviously, many of\nthese are infinite sets, but if one set 'contains' another then it is\ndefinitionally more powerful. Also, if a set of transitions is 'bigger'\n(work to do on what that means?) than another it is potentially more\npowerful.\n\nAnother question is around composition of different covenants inside of an\nintent -- e.g., a TLUV that has a branch with a CTV or vice versa. We\nconsider this outside the model, analysis should be limited to \"with only\nthese covenants what could you build\". Obviously, one recursive primitive\nmakes all primitives recursive.\n\nAnother question is 'unrollability'. Can the intents, and the intents of\nthe outputs of the intents, be unrolled into a representation for a\nspecific instantiation? Or is that set of possible transactions infinite?\nHow infinite? CTV is, e.g., unrollable.\n\n\nLast note on statefulness: The above has baked into it a notion of\n'statelessness', but it's very possible and probably required that provers\nmaintain some external state in order to prove (whether multisig or not).\nE.g., a multisig managing an account model covenant may need to track who\nis owed what. This data can sometimes be put e.g. in an op return, an extra\ntapleaf branch, or just considered exogenous to the covenant. But the idea\nthat a prover isn't just deciding on what to do based on purely local\ninformation to an output descriptor is important.\n\n\nFor Sapio in particular, this framework is useful because if you can answer\nthe above questions on intents, and prover/verifier generators, then you\nwould be able to generate tooling that could integrate your covenant into\nSapio and have things work nicely. If you can't answer these questions (in\ncode?) then your covenant might not be 'well formed'. The efficiency of a\nprover or verifier is out of scope of this framework, which focuses on the\nengineering + design, but can also be analyzed.\n\n\nGrateful for any and all feedback on this model and if there are examples\nthat cannot be described within it,\n\nJeremy\n\n\n\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220412/992de2d2/attachment.html>"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2022-04-12T15:03:57",
                "message_text_only": "note of clarification:\n\nthis is from the perspective of a developer trying to build infrastructure\nfor covenants. from the perspective of bitcoin consensus, a covenant\nenforcing primitve would be something like OP_TLUV and less so it's use in\nconjunction with other opcodes, e.g. OP_AMOUNT.\n\nOne must also analyze all the covenants that one *could* author using a\nprimitive, in some sense, to demonstrate that our understanding is\nsufficient. As a trivial example, you could use\nOP_DELETE_BITCOIN_ENTIRELY_IF_KNOWS_PREIMAGE_TO_X_OR_TLUV and just because\nyou could use it safely for TLUV would not mean we should add that opcode\nif there's some way of using it negatively.\n\nCheers,\n\nJeremy\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n\n\nOn Tue, Apr 12, 2022 at 10:33 AM Jeremy Rubin <jeremy.l.rubin at gmail.com>\nwrote:\n\n> Sharing below a framework for thinking about covenants. It is most useful\n> for modeling local covenants, that is, covenants where only one coin must\n> be examined, and not multi-coin covenants whereby you could have issues\n> with protocol forking requiring a more powerful stateful prover. It's the\n> model I use in Sapio.\n>\n> I define a covenant primitive as follows:\n>\n> 1) A set of sets of transaction intents (a *family)*, potentially\n> recursive or co-recursive (e.g., the types of state transitions that can be\n> generated). These intents can also be represented by a language that\n> generates the transactions, rather than the literal transactions\n> themselves. We do the family rather than just sets at this level because to\n> instantiate a covenant we must pick a member of the family to use.\n> 2) A verifier generator function that generates a function that accepts an\n> intent that is any element of one member of the family of intents and a\n> proof for it and rejects others.\n> 3) A prover generator function that generates a function that takes an\n> intent that is any element of one member of the family and some extra data\n> and returns either a new prover function, a finished proof, or a rejection\n> (if not a valid intent).\n> 4) A set of proofs that the Prover, Verifier, and a set of intents are\n> \"impedance matched\", that is, all statements the prover can prove and all\n> statements the verifier can verify are one-to-one and onto (or something\n> similar), and that this also is one-to-one and onto with one element of the\n> intents (a set of transactions) and no other.\n> 5) A set of assumptions under which the covenant is verified (e.g., a\n> multi-sig covenant with at least 1-n honesty, a multisig covenant with any\n> 3-n honesty required, Sha256 collision resistance, DLog Hardness, a SGX\n> module being correct).\n>\n> To instantiate a covenant, the user would pick a particular element of the\n> set of sets of transaction intents. For example, in TLUV payment pool, it\n> would be the set of all balance adjusting transactions and redemptions. *Note,\n> we can 'cleave' covenants into separate bits -- e.g. one TLUV + some extra\n> CTV paths can be 'composed', but the composition is not guaranteed to be\n> well formed.*\n>\n> Once the user has a particular intent, they then must generate a verifier\n> which can receive any member of the set of intents and accept it, and\n> receive any transaction outside the intents and reject it.\n>\n> With the verifier in hand (or at the same time), the user must then\n> generate a prover function that can make a proof for any intent that the\n> verifier will accept. This could be modeled as a continuation system (e.g.,\n> multisig requires multiple calls into the prover), or it could be\n> considered to be wrapped as an all-at-once function. The prover could be\n> done via a multi-sig in which case the assumptions are stronger, but it\n> still should be well formed such that the signers can clearly and\n> unambiguously sign all intents and reject all non intents, otherwise the\n> covenant is not well formed.\n>\n> The proofs of validity of the first three parts and the assumptions for\n> them should be clear, but do not require generation for use. However,\n> covenants which do not easily permit proofs are less useful.\n>\n> We now can analyze three covenants under this, plain CTV, 2-3 online\n> multisig, 3-3 presigned + deleted.\n>\n> CTV:\n> 1) Intent sets: the set of specific next transactions, with unbound inputs\n> into it that can be mutated (but once the parent is known, can be filled in\n> for all children).\n> 2) Verifier: The transaction has the hash of the intent\n> 3) Prover: The transaction itself and no other work\n> 4) Proofs of impedance: trivial.\n> 5) Assumptions: sha256\n> 6) Composition: Any two CTVs can be OR'd together as separate leafs\n>\n> 2-3 Multisig:\n> 1) Intent: All possible sets of transactions, one set selected per instance\n> 2) Verifier: At least 2 signed the transition\n> 3) Prover: Receive some 'state' in the form of business logic to enforce,\n> only sign if that is satisfied. Produce a signature.\n> 4) Impedance: The business logic must cover the instance's Intent set and\n> must not be able to reach any other non-intent\n> 5) Assumptions: at least 2 parties are 'honest' for both liveness and for\n> correctness, and the usual suspects (sha256, schnorr, etc)\n> 6) Composition: Any two groups can be OR'd together, if the groups have\n> different signers, then the assumptions expand\n>\n> 3-3 Presigned:\n> Same as CTV except:\n> 5) Assumptions: at least one party deletes their key after signing\n>\n>\n>  You can also think through other covenants like TLUV in this model.\n>\n> One useful question is the 'cardinality' of an intent set. The useful\n> notion of this is both in magnitude but also contains. Obviously, many of\n> these are infinite sets, but if one set 'contains' another then it is\n> definitionally more powerful. Also, if a set of transitions is 'bigger'\n> (work to do on what that means?) than another it is potentially more\n> powerful.\n>\n> Another question is around composition of different covenants inside of an\n> intent -- e.g., a TLUV that has a branch with a CTV or vice versa. We\n> consider this outside the model, analysis should be limited to \"with only\n> these covenants what could you build\". Obviously, one recursive primitive\n> makes all primitives recursive.\n>\n> Another question is 'unrollability'. Can the intents, and the intents of\n> the outputs of the intents, be unrolled into a representation for a\n> specific instantiation? Or is that set of possible transactions infinite?\n> How infinite? CTV is, e.g., unrollable.\n>\n>\n> Last note on statefulness: The above has baked into it a notion of\n> 'statelessness', but it's very possible and probably required that provers\n> maintain some external state in order to prove (whether multisig or not).\n> E.g., a multisig managing an account model covenant may need to track who\n> is owed what. This data can sometimes be put e.g. in an op return, an extra\n> tapleaf branch, or just considered exogenous to the covenant. But the idea\n> that a prover isn't just deciding on what to do based on purely local\n> information to an output descriptor is important.\n>\n>\n> For Sapio in particular, this framework is useful because if you can\n> answer the above questions on intents, and prover/verifier generators, then\n> you would be able to generate tooling that could integrate your covenant\n> into Sapio and have things work nicely. If you can't answer these questions\n> (in code?) then your covenant might not be 'well formed'. The efficiency of\n> a prover or verifier is out of scope of this framework, which focuses on\n> the engineering + design, but can also be analyzed.\n>\n>\n> Grateful for any and all feedback on this model and if there are examples\n> that cannot be described within it,\n>\n> Jeremy\n>\n>\n>\n>\n> --\n> @JeremyRubin <https://twitter.com/JeremyRubin>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220412/01e41240/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "A Calculus of Covenants",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeremy Rubin"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 14816
        }
    },
    {
        "title": "[bitcoin-dev] CTV Meeting #7 Reminder + Agenda (Tuesday, April 19th, 12:00 PT / 7PM UTC)",
        "thread_messages": [
            {
                "author": "Jeremy Rubin",
                "date": "2022-04-19T04:13:09",
                "message_text_only": "Devs,\n\nApologies for the delay in posting the reminder. As noted on March 22nd,\nthe 7th meeting was postponed to the time of the 8th meeting given the\nMiami conference scheduling conflicts.\n\nWe'll hold the meeting tomorrow at noon Pacific time as usual.\n\nThe Agenda for the meeting will be an open discussion on the possibility of\nactivating CTV in 2022, why we may or may not wish to do that, if we did\nwant to do that what would need to be done, what the path might look like\nif we do not do that.\n\nI will try to publish some written thoughts ahead of the meeting for\nreference.\n\nIf you are unable to attend, you may leave a comment in response below and\nI will reference it in the minutes of the meeting.\n\nBest,\n\nJeremy\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220418/7b7bafd9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "CTV Meeting #7 Reminder + Agenda (Tuesday, April 19th, 12:00 PT / 7PM UTC)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeremy Rubin"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 956
        }
    },
    {
        "title": "[bitcoin-dev] Release of bitcoin-s 1.9.1",
        "thread_messages": [
            {
                "author": "Chris Stewart",
                "date": "2022-04-19T12:25:13",
                "message_text_only": "Today we are executed to release 1.9.1 of bitcoin-s. Bitcoin-s is a set of\nbitcoin libraries written in Scala. We adhere to the Discreet Log Contract\nspecification <https://github.com/discreetlogcontracts/dlcspecs>. For more\ninformation please see bitcoin-s.org or read the release notes for the\n1.9.1 release.\n\n- https://github.com/discreetlogcontracts/dlcspecs\n- bitcoin-s.org\n- https://github.com/bitcoin-s/bitcoin-s/releases/tag/1.9.1\n\n-Chris\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220419/cd137243/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Release of bitcoin-s 1.9.1",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Chris Stewart"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 629
        }
    },
    {
        "title": "[bitcoin-dev] 7 Theses on a next step for BIP-119",
        "thread_messages": [
            {
                "author": "Jeremy Rubin",
                "date": "2022-04-19T17:31:54",
                "message_text_only": "Devs,\n\nIn advance of the CTV meeting today, I wanted to share what my next step is\nin advocating for CTV, as well as 7 theses for why I believe it to be the\nright course of action to take at this time.\n\nPlease see the post at\nhttps://rubin.io/bitcoin/2022/04/17/next-steps-bip119/.\n\nAs always, open to hear any and all feedback,\n\nJeremy\n\n\narchived at:\nhttps://web.archive.org/web/20220419172825/https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220419/70812907/attachment.html>"
            },
            {
                "author": "Michael Folkson",
                "date": "2022-04-20T13:24:52",
                "message_text_only": "> The client has a Speedy trial release similar to Taproots with parameters proposed to be....\n\nAs I've said before I was hoping we'd avoid this exercise. Best case, it wastes the time of people who could be working on all sorts of valuable projects for the ecosystem. Worst case, we take a Russian roulette style gamble with a chain split.\n\nBut here's a summary of the basic facts:\n\nThe latest Bitcoin Core release candidate (23.0) does not contain any new soft fork code, either CTV code or any new activation code. Running Bitcoin Core 23.0 out the box will not signal for any new soft fork and will not enforce any new soft fork rules (CTV or otherwise). Of course it will continue to enforce Taproot rules as Taproot activated last year.\n\nThere are a number of individuals who have stated opposition to attempting to activate a CTV soft fork in the near term:\n\nhttps://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n\nMost of those individuals haven't logged their opposition on Jeremy's site:\nhttps://utxos.org/signals/\n\nHence their views haven't been included or discussed in Jeremy's latest blog post.\n\nChain split risk\n\nI can't predict how many full nodes and miners will run Jeremy's client attempting to activate CTV. One would expect that many will continue to run versions of Bitcoin Core that will not enforce CTV rules and will not activate it. But whether Jeremy's client will be a majority, significant minority, insignificant minority of full nodes and miners would be speculation on my part. (Personally I highly doubt those running Jeremy's client will be a majority which leaves a significant minority and insignificant minority as the most likely options).\n\nJeremy's client is intending to use Speedy Trial presumably with similar parameters to that used for Taproot. That would mean seeking 90 percent of miners to signal for this CTV soft fork activation attempt.\n\nAssuming 90 percent of miners don't signal for it in one of the Speedy Trial windows then the activation attempt will have failed and it will be back in Jeremy's court whether he tries again with a different activation attempt.\n\nAssuming 90 percent of miners do signal for it (unlikely in my opinion but presumably still a possibility) then the CTV soft fork could activate unless full nodes resist it. This resistance would most likely be in the form of a UASF style client which rejects blocks that apply the CTV rules and/or includes transactions that don't meet the CTV rules post activation. We would now be in chain split territory with two different assets and blockchains like we had with BTC and BCH.\n\nIf I oppose this activation attempt and the associated chain split risk what should I do?\n\nFirstly, you can register your opposition to this soft fork activation attempt on Jeremy's site: https://utxos.org/signals/\n\nIt seems Jeremy will continue this activation attempt regardless but it will be useful for others to see clearly that this a contentious soft fork activation attempt and act accordingly. So far only 3 individuals' opposition is registered on his site.\n\nSecondly, if it is looking like 90 percent (or whatever percentage Jeremy uses) of miners are going to signal for a CTV soft fork then you can consider joining a UASF style effort to resist the soft fork activation attempt. I will certainly seek to participate and will continue to inform this list of efforts in this direction.\n\nThe saddest thing is that if Jeremy's soft fork activation attempt causes the uncertainty, confusion and disruption I fear it could it will make future soft forks that do have community consensus orders of magnitude harder to pull off. There are a number of soft fork proposals that I'm personally excited about (enabling covenants, eltoo, Simplicity, CISA etc) that long term we might get with a sensible approach to only activating soft forks that have community consensus. But the more uncertainty, confusion and disruption we create over contentious soft forks the more dangerous any soft fork of any form will appear. The primary focus will need to be resisting soft forks that don't have community consensus and ensuring Bitcoin doesn't splinter into a large number of different assets/blockchains with different combinations of soft forks active.\n\nSo if you oppose this soft fork activation attempt please voice your opposition, run full node software that doesn't include CTV and CTV activation code such as Bitcoin Core and if/when necessary and available run full node software that proactively rejects application of the CTV rules.\n\n--\nMichael Folkson\nEmail: michaelfolkson at [protonmail.com](http://protonmail.com/)\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n\n------- Original Message -------\nOn Tuesday, April 19th, 2022 at 18:31, Jeremy Rubin via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Devs,\n>\n> In advance of the CTV meeting today, I wanted to share what my next step is in advocating for CTV, as well as 7 theses for why I believe it to be the right course of action to take at this time.\n>\n> Please see the post at https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/.\n>\n> As always, open to hear any and all feedback,\n>\n> Jeremy\n>\n> archived at: https://web.archive.org/web/20220419172825/https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220420/e4f13a10/attachment.html>"
            },
            {
                "author": "Robin Linus",
                "date": "2022-04-20T17:13:02",
                "message_text_only": "Dear Michael,\n\nFirstly, I think it is great that you do share enthusiasm for \"vaults, eltoo constructions, payment pools etc\". Many people see covenants (or covenant-like features) as one of the most important upgrades currently in the pipe line because it enables so many important use cases and interesting areas of research. In particular vaults and scalability solutions.\n\nHowever, I have tried to figure out why you invest so much time and effort to oppose CTV. Honestly, the reasons you mentioned here [1] do not make much sense to me and it feels like your attitude is not very constructive as you do not suggest a better way forward.\nYou wrote \"This research and experimentation should mature before considering activation\" even though you know that BIP-119 has been finalised more than two years ago. Also the implementation has been reviewed extensively and it has matured for years. So, your framing of \"experimentation\" and \"premature activation\" just doesn't reflect the truth here. Even your argument is already more than a year old...\n\nAdditionally, you do not address that CTV is intentionally designed to be the most simple and conservative upgrade towards full-featured covenants. CTV only enables a feature that is already possible today using a trusted party. Opposing this conservative approach means you are either in favour of activating a more powerful feature or you do not want covenants at all. It's not clear to me what you want because you just keep opposing CTV without trying to make better suggestions. What do you want?\nYour other arguments mostly discuss soft forks in general. This is a different topic though. I think it is not a good idea to mix that up. And claiming that CTV implies continuous soft forks is again dishonest framing. It suggests that covenants were just a random idea of Jeremy even though you know that many reputable bitcoin developers have been researching this topic for years. Truth is Jeremy does a great service to the community by facing this draining activation drama to make trustless covenants possible.\n\nNow, in your most recent email your main concern seems to be a potential chain split. This is again a weak argument against CTV because your concerns apply to any upgrade. Furthermore, you are increasing this risk by opposing CTV without trying to find a common way forward to activate covenants. This doesn't serve bitcoin. I think it would be better for everyone if you would invest your time in trying to formulate a better solution. Covenants are too important to just oppose them because of inaccurate framing or because of opposition to soft forks in general.\n\nRegards,\nRobin\n\n[1] https://github.com/JeremyRubin/utxos.org/issues/27\n\n------- Original Message -------\nOn Wednesday, April 20th, 2022 at 3:24 PM, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>> The client has a Speedy trial release similar to Taproots with parameters proposed to be....\n>\n> As I've said before I was hoping we'd avoid this exercise. Best case, it wastes the time of people who could be working on all sorts of valuable projects for the ecosystem. Worst case, we take a Russian roulette style gamble with a chain split.\n>\n> But here's a summary of the basic facts:\n>\n> The latest Bitcoin Core release candidate (23.0) does not contain any new soft fork code, either CTV code or any new activation code. Running Bitcoin Core 23.0 out the box will not signal for any new soft fork and will not enforce any new soft fork rules (CTV or otherwise). Of course it will continue to enforce Taproot rules as Taproot activated last year.\n>\n> There are a number of individuals who have stated opposition to attempting to activate a CTV soft fork in the near term:\n>\n> https://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n>\n> Most of those individuals haven't logged their opposition on Jeremy's site:\n> https://utxos.org/signals/\n>\n> Hence their views haven't been included or discussed in Jeremy's latest blog post.\n>\n> Chain split risk\n>\n> I can't predict how many full nodes and miners will run Jeremy's client attempting to activate CTV. One would expect that many will continue to run versions of Bitcoin Core that will not enforce CTV rules and will not activate it. But whether Jeremy's client will be a majority, significant minority, insignificant minority of full nodes and miners would be speculation on my part. (Personally I highly doubt those running Jeremy's client will be a majority which leaves a significant minority and insignificant minority as the most likely options).\n>\n> Jeremy's client is intending to use Speedy Trial presumably with similar parameters to that used for Taproot. That would mean seeking 90 percent of miners to signal for this CTV soft fork activation attempt.\n>\n> Assuming 90 percent of miners don't signal for it in one of the Speedy Trial windows then the activation attempt will have failed and it will be back in Jeremy's court whether he tries again with a different activation attempt.\n>\n> Assuming 90 percent of miners do signal for it (unlikely in my opinion but presumably still a possibility) then the CTV soft fork could activate unless full nodes resist it. This resistance would most likely be in the form of a UASF style client which rejects blocks that apply the CTV rules and/or includes transactions that don't meet the CTV rules post activation. We would now be in chain split territory with two different assets and blockchains like we had with BTC and BCH.\n>\n> If I oppose this activation attempt and the associated chain split risk what should I do?\n>\n> Firstly, you can register your opposition to this soft fork activation attempt on Jeremy's site: https://utxos.org/signals/\n>\n> It seems Jeremy will continue this activation attempt regardless but it will be useful for others to see clearly that this a contentious soft fork activation attempt and act accordingly. So far only 3 individuals' opposition is registered on his site.\n>\n> Secondly, if it is looking like 90 percent (or whatever percentage Jeremy uses) of miners are going to signal for a CTV soft fork then you can consider joining a UASF style effort to resist the soft fork activation attempt. I will certainly seek to participate and will continue to inform this list of efforts in this direction.\n>\n> The saddest thing is that if Jeremy's soft fork activation attempt causes the uncertainty, confusion and disruption I fear it could it will make future soft forks that do have community consensus orders of magnitude harder to pull off. There are a number of soft fork proposals that I'm personally excited about (enabling covenants, eltoo, Simplicity, CISA etc) that long term we might get with a sensible approach to only activating soft forks that have community consensus. But the more uncertainty, confusion and disruption we create over contentious soft forks the more dangerous any soft fork of any form will appear. The primary focus will need to be resisting soft forks that don't have community consensus and ensuring Bitcoin doesn't splinter into a large number of different assets/blockchains with different combinations of soft forks active.\n>\n> So if you oppose this soft fork activation attempt please voice your opposition, run full node software that doesn't include CTV and CTV activation code such as Bitcoin Core and if/when necessary and available run full node software that proactively rejects application of the CTV rules.\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at [protonmail.com](http://protonmail.com/)\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n> ------- Original Message -------\n> On Tuesday, April 19th, 2022 at 18:31, Jeremy Rubin via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Devs,\n>>\n>> In advance of the CTV meeting today, I wanted to share what my next step is in advocating for CTV, as well as 7 theses for why I believe it to be the right course of action to take at this time.\n>>\n>> Please see the post at https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/.\n>>\n>> As always, open to hear any and all feedback,\n>>\n>> Jeremy\n>>\n>> archived at: https://web.archive.org/web/20220419172825/https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220420/9bfab9c6/attachment-0001.html>"
            },
            {
                "author": "Michael Folkson",
                "date": "2022-04-20T18:19:49",
                "message_text_only": "Hi Robin\n\nI was in two minds to respond because I feel I am just repeating myself from previous emails to this list [1], [2], [3]. I'm not sure whether you have read those posts or are just blocking them out because you disagree with them. I also don't think much (anything?) has changed since I wrote those emails a few months ago.\n\n> Honestly, the reasons you mentioned here [1] do not make much sense to me and it feels like your attitude is not very constructive as you do not suggest a better way forward.\n\nI have a better (and safer) way forward which is to continue to build out use cases of CTV, convince the community it is the best tool for the job (whatever use case(s) that is), compare it to other existing covenant enabling proposals on those use cases and then get to a point where the community is confident that it is activating a proposal(s) that will stand the test of time.\n\nYou may not like that way forward because it requires a lot of work, a lot of time and a lot of patience. It is certainly easier to agitate for a soft fork on a mailing list. But that would be \"my\" and other people's way forward who think only the best proposals should get into Bitcoin consensus rules and those worthy of taking on the chain split risk.\n\n> It's not clear to me what you want because you just keep opposing CTV without trying to make better suggestions. What do you want?\n\nThere are a number of competing covenant enabling proposals out there. I don't know if they are better or not for specific use cases. I also don't think there is consensus on that yet. Mainnet should not be treated like testnet, signet or an altcoin. It isn't for experimenting with new consensus rules or proving that something is useful. That should be done elsewhere.\n\n> Your other arguments mostly discuss soft forks in general. This is a different topic though. I think it is not a good idea to mix that up.\n\nAny soft fork introduces chain split risk into the equation. Taproot had overwhelming community consensus so it had much less chain split risk. A contentious soft fork activation attempt contains a lot more chain split risk. When discussing whether to attempt to activate soft forks you have to appreciate that important fact. To ignore that seems bizarre to me.\n\nBut as I said I'm repeating myself. If we have to do this contentious soft fork activation attempt exercise we have to do it and get it over with. The kind of work and progress I was hoping to see on CTV use cases over many months (and/or years) doesn't seem to be happening. Instead we just have a flame war every couple of months on the mailing list over whether CTV should be activated or not and rehash all the same arguments in an environment in which nothing (anything?) has moved forward.\n\n[1]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-October/019535.html\n[2]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019728.html\n[3]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019731.html\n\n--\nMichael Folkson\nEmail: michaelfolkson at [protonmail.com](http://protonmail.com/)\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n\n------- Original Message -------\nOn Wednesday, April 20th, 2022 at 18:13, Robin Linus via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Dear Michael,\n>\n> Firstly, I think it is great that you do share enthusiasm for \"vaults, eltoo constructions, payment pools etc\". Many people see covenants (or covenant-like features) as one of the most important upgrades currently in the pipe line because it enables so many important use cases and interesting areas of research. In particular vaults and scalability solutions.\n>\n> However, I have tried to figure out why you invest so much time and effort to oppose CTV. Honestly, the reasons you mentioned here [1] do not make much sense to me and it feels like your attitude is not very constructive as you do not suggest a better way forward.\n> You wrote \"This research and experimentation should mature before considering activation\" even though you know that BIP-119 has been finalised more than two years ago. Also the implementation has been reviewed extensively and it has matured for years. So, your framing of \"experimentation\" and \"premature activation\" just doesn't reflect the truth here. Even your argument is already more than a year old...\n>\n> Additionally, you do not address that CTV is intentionally designed to be the most simple and conservative upgrade towards full-featured covenants. CTV only enables a feature that is already possible today using a trusted party. Opposing this conservative approach means you are either in favour of activating a more powerful feature or you do not want covenants at all. It's not clear to me what you want because you just keep opposing CTV without trying to make better suggestions. What do you want?\n> Your other arguments mostly discuss soft forks in general. This is a different topic though. I think it is not a good idea to mix that up. And claiming that CTV implies continuous soft forks is again dishonest framing. It suggests that covenants were just a random idea of Jeremy even though you know that many reputable bitcoin developers have been researching this topic for years. Truth is Jeremy does a great service to the community by facing this draining activation drama to make trustless covenants possible.\n>\n> Now, in your most recent email your main concern seems to be a potential chain split. This is again a weak argument against CTV because your concerns apply to any upgrade. Furthermore, you are increasing this risk by opposing CTV without trying to find a common way forward to activate covenants. This doesn't serve bitcoin. I think it would be better for everyone if you would invest your time in trying to formulate a better solution. Covenants are too important to just oppose them because of inaccurate framing or because of opposition to soft forks in general.\n>\n> Regards,\n> Robin\n>\n> [1] https://github.com/JeremyRubin/utxos.org/issues/27\n>\n> ------- Original Message -------\n> On Wednesday, April 20th, 2022 at 3:24 PM, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>>> The client has a Speedy trial release similar to Taproots with parameters proposed to be....\n>>\n>> As I've said before I was hoping we'd avoid this exercise. Best case, it wastes the time of people who could be working on all sorts of valuable projects for the ecosystem. Worst case, we take a Russian roulette style gamble with a chain split.\n>>\n>> But here's a summary of the basic facts:\n>>\n>> The latest Bitcoin Core release candidate (23.0) does not contain any new soft fork code, either CTV code or any new activation code. Running Bitcoin Core 23.0 out the box will not signal for any new soft fork and will not enforce any new soft fork rules (CTV or otherwise). Of course it will continue to enforce Taproot rules as Taproot activated last year.\n>>\n>> There are a number of individuals who have stated opposition to attempting to activate a CTV soft fork in the near term:\n>>\n>> https://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n>>\n>> Most of those individuals haven't logged their opposition on Jeremy's site:\n>> https://utxos.org/signals/\n>>\n>> Hence their views haven't been included or discussed in Jeremy's latest blog post.\n>>\n>> Chain split risk\n>>\n>> I can't predict how many full nodes and miners will run Jeremy's client attempting to activate CTV. One would expect that many will continue to run versions of Bitcoin Core that will not enforce CTV rules and will not activate it. But whether Jeremy's client will be a majority, significant minority, insignificant minority of full nodes and miners would be speculation on my part. (Personally I highly doubt those running Jeremy's client will be a majority which leaves a significant minority and insignificant minority as the most likely options).\n>>\n>> Jeremy's client is intending to use Speedy Trial presumably with similar parameters to that used for Taproot. That would mean seeking 90 percent of miners to signal for this CTV soft fork activation attempt.\n>>\n>> Assuming 90 percent of miners don't signal for it in one of the Speedy Trial windows then the activation attempt will have failed and it will be back in Jeremy's court whether he tries again with a different activation attempt.\n>>\n>> Assuming 90 percent of miners do signal for it (unlikely in my opinion but presumably still a possibility) then the CTV soft fork could activate unless full nodes resist it. This resistance would most likely be in the form of a UASF style client which rejects blocks that apply the CTV rules and/or includes transactions that don't meet the CTV rules post activation. We would now be in chain split territory with two different assets and blockchains like we had with BTC and BCH.\n>>\n>> If I oppose this activation attempt and the associated chain split risk what should I do?\n>>\n>> Firstly, you can register your opposition to this soft fork activation attempt on Jeremy's site: https://utxos.org/signals/\n>>\n>> It seems Jeremy will continue this activation attempt regardless but it will be useful for others to see clearly that this a contentious soft fork activation attempt and act accordingly. So far only 3 individuals' opposition is registered on his site.\n>>\n>> Secondly, if it is looking like 90 percent (or whatever percentage Jeremy uses) of miners are going to signal for a CTV soft fork then you can consider joining a UASF style effort to resist the soft fork activation attempt. I will certainly seek to participate and will continue to inform this list of efforts in this direction.\n>>\n>> The saddest thing is that if Jeremy's soft fork activation attempt causes the uncertainty, confusion and disruption I fear it could it will make future soft forks that do have community consensus orders of magnitude harder to pull off. There are a number of soft fork proposals that I'm personally excited about (enabling covenants, eltoo, Simplicity, CISA etc) that long term we might get with a sensible approach to only activating soft forks that have community consensus. But the more uncertainty, confusion and disruption we create over contentious soft forks the more dangerous any soft fork of any form will appear. The primary focus will need to be resisting soft forks that don't have community consensus and ensuring Bitcoin doesn't splinter into a large number of different assets/blockchains with different combinations of soft forks active.\n>>\n>> So if you oppose this soft fork activation attempt please voice your opposition, run full node software that doesn't include CTV and CTV activation code such as Bitcoin Core and if/when necessary and available run full node software that proactively rejects application of the CTV rules.\n>>\n>> --\n>> Michael Folkson\n>> Email: michaelfolkson at [protonmail.com](http://protonmail.com/)\n>> Keybase: michaelfolkson\n>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>\n>> ------- Original Message -------\n>> On Tuesday, April 19th, 2022 at 18:31, Jeremy Rubin via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> Devs,\n>>>\n>>> In advance of the CTV meeting today, I wanted to share what my next step is in advocating for CTV, as well as 7 theses for why I believe it to be the right course of action to take at this time.\n>>>\n>>> Please see the post at https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/.\n>>>\n>>> As always, open to hear any and all feedback,\n>>>\n>>> Jeremy\n>>>\n>>> archived at: https://web.archive.org/web/20220419172825/https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220420/87aa6c18/attachment-0001.html>"
            },
            {
                "author": "Robin Linus",
                "date": "2022-04-20T19:46:52",
                "message_text_only": "Hi Michael,\n\nThank you for your reply. You wrote:\n\n> I have a better (and safer) way forward which is to continue to build out use cases of CTV, convince the community it is the best tool for the job (whatever use case(s) that is), compare it to other existing covenant enabling proposals on those use cases and then get to a point where the community is confident that it is activating a proposal(s) that will stand the test of time.\n\nWhere can I see the use cases you have built out in recent years? Do you have a writeup in which you compare CTV to existing covenant enabling proposals? Do you have a strong reason to favour a different proposal? Have you written any code?\n\nI've seen pages of text of you complaining about details of CTV activation but nothing tangible that would prove that you are actually interested in real progress on covenants.\nIn contrast, Jeremy has been doing exactly what you are proposing. He wrote the BIP, implemented it, explained use cases in detail, spoke at conferences, organised workshops, and built the Sapio framework for the community to experiment with covenants. He even puts his money where his mouth is and offers a bug bounty for any security flaw in the code.\n\n> You may not like that way forward because it requires a lot of work, a lot of time and a lot of patience.\n\nA lot of work, a lot of time and a lot of patience is exactly what Jeremy has been investing for years. I think by framing his contributions as \"immature\" you are disrespecting all the work he put into BIP-119. If you could point me to essays of you thoughtfully comparing various covenant proposals then I could see your point, but you're only ranting on other people's work which requires no real effort and it doesn't contribute much. If you are not willing to do what you are suggesting for years why should anybody else do it? Should the entire community stall progress on covenants until somebody else works on what you think is ideal?\nBike shedding is just as big of an issue as \"contentious soft forks\". Pointless activation drama is a huge issue of bitcoin protocol development because it is so draining. Some of the most respected devs do not participate in activation politics anymore because it harms their health. That's nuts. If you really want to be of service to the Bitcoin community you should work on what you think is the right path forward and not just criticise Jeremy for progressing with his excellent work.\n\nLooking forward to check out your contributions!\n\nRegards,\nRobin\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220420/eb58de32/attachment.html>"
            },
            {
                "author": "Michael Folkson",
                "date": "2022-04-20T22:04:03",
                "message_text_only": "Ok last one. Whatever you say and whatever personal attacks you come up with I'm not responding after this one :)\n\n> Where can I see the use cases you have built out in recent years? Do you have a writeup in which you compare CTV to existing covenant enabling proposals? Do you have a strong reason to favour a different proposal? Have you written any code?\n\nYou don't seem to quite understand the asymmetry here. I (and the rest of the community excluding Jeremy) am not a full time CTV developer or full time CTV advocate. There are a number of soft fork proposals I am interested in and attempting to follow in addition to all the work that is going around Taproot etc. But if you/Jeremy want to make a change to the consensus rules the onus is on you to get community review and community consensus. I am not demanding the consensus rules be changed. I am quite happy to wait until there is community consensus over a particular soft fork like there was with Taproot.\n\nI have looked into CTV a considerable number of times now. I have asked 5 of the 6 CTV related questions on Bitcoin StackExchange at the time of writing [1], 2 of which I have attempted to answer. Does this mean I understand as much about Jeremy about CTV? Of course not. But if you believe that soft forks should have community consensus it is up to you/Jeremy to address concerns from curious, relatively informed, skeptical people like me. I am not convinced at the time of writing that CTV is the best tool for the job on any of its intended use cases. On this I don't think even Jeremy is convinced as when asked to compare CTV to alternatives he often just says it is ready and other proposals aren't.\n\n> In contrast, Jeremy has been doing exactly what you are proposing. He wrote the BIP, implemented it, explained use cases in detail, spoke at conferences, organised workshops, and built the Sapio framework for the community to experiment with covenants. He even puts his money where his mouth is and offers a bug bounty for any security flaw in the code.\n\nI'm not entirely sure where you are going with this. That because Jeremy has worked really hard on it for a long time we should activate it without community consensus? I'm sorry that's not how consensus changes work or how they should work. Personally I very much doubt I will ever attempt to change the consensus rules with one of my proposals. I struggle to follow all of the work and the proposals others work on and at least for now believe others are much more qualified than me to design and code up consensus code changes. So again there is an asymmetry if you are going down the comparing Jeremy's goals with my own.\n\n> I think by framing his contributions as \"immature\" you are disrespecting all the work he put into BIP-119.\n\nI think CTV is an immature proposal given what I've said already about it not being at all clear it is the best tool for any of its intended use cases.\n\n> If you are not willing to do what you are suggesting for years why should anybody else do it? Should the entire community stall progress on covenants until somebody else works on what you think is ideal?\n\nOthers are currently working on alternative proposals to CTV (CAT, CSFS, TLUV, Simplicity, arguably APO depending on the use case etc). I haven't asked them to, they already are. As far as I know (they can correct me if wrong) those working on alternative proposals don't support an upcoming activation of CTV. You can try to make this personal all you want and write snide comments if it makes you feel better. But I doubt it is the right approach to getting more review of a soft fork proposal.\n\n> Bike shedding is just as big of an issue as \"contentious soft forks\". Pointless activation drama is a huge issue of bitcoin protocol development because it is so draining. Some of the most respected devs do not participate in activation politics anymore because it harms their health. That's nuts. If you really want to be of service to the Bitcoin community you should work on what you think is the right path forward and not just criticise Jeremy for progressing with his excellent work.\n\nIf you have a magic wand to wave away activation drama and create an activation method that the entire community is happy with I'd love to see it. That magic wand would have got a few months of my life back in 2021 that I'll never get back.\n\nAs I said no more responses from me. I am going to go back to a transcript on FROST, one of the many exciting things people are working on that is Taproot related and what I believe the focus should be on at least until there is clear community consensus for a future soft fork.\n\n[1]: https://bitcoin.stackexchange.com/questions/tagged/bip119-checktemplateverify\n\n--\nMichael Folkson\nEmail: michaelfolkson at [protonmail.com](http://protonmail.com/)\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n\n------- Original Message -------\nOn Wednesday, April 20th, 2022 at 20:46, Robin Linus via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi Michael,\n>\n> Thank you for your reply. You wrote:\n>\n>> I have a better (and safer) way forward which is to continue to build out use cases of CTV, convince the community it is the best tool for the job (whatever use case(s) that is), compare it to other existing covenant enabling proposals on those use cases and then get to a point where the community is confident that it is activating a proposal(s) that will stand the test of time.\n>\n> Where can I see the use cases you have built out in recent years? Do you have a writeup in which you compare CTV to existing covenant enabling proposals? Do you have a strong reason to favour a different proposal? Have you written any code?\n>\n> I've seen pages of text of you complaining about details of CTV activation but nothing tangible that would prove that you are actually interested in real progress on covenants.\n> In contrast, Jeremy has been doing exactly what you are proposing. He wrote the BIP, implemented it, explained use cases in detail, spoke at conferences, organised workshops, and built the Sapio framework for the community to experiment with covenants. He even puts his money where his mouth is and offers a bug bounty for any security flaw in the code.\n>\n>> You may not like that way forward because it requires a lot of work, a lot of time and a lot of patience.\n>\n> A lot of work, a lot of time and a lot of patience is exactly what Jeremy has been investing for years. I think by framing his contributions as \"immature\" you are disrespecting all the work he put into BIP-119. If you could point me to essays of you thoughtfully comparing various covenant proposals then I could see your point, but you're only ranting on other people's work which requires no real effort and it doesn't contribute much. If you are not willing to do what you are suggesting for years why should anybody else do it? Should the entire community stall progress on covenants until somebody else works on what you think is ideal?\n> Bike shedding is just as big of an issue as \"contentious soft forks\". Pointless activation drama is a huge issue of bitcoin protocol development because it is so draining. Some of the most respected devs do not participate in activation politics anymore because it harms their health. That's nuts. If you really want to be of service to the Bitcoin community you should work on what you think is the right path forward and not just criticise Jeremy for progressing with his excellent work.\n>\n> Looking forward to check out your contributions!\n>\n> Regards,\n> Robin\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220420/697e178e/attachment-0001.html>"
            },
            {
                "author": "Robin Linus",
                "date": "2022-04-21T09:05:53",
                "message_text_only": "Hi Michael,\n\nSorry, if my critique of your opinions feels too personal to you. This is nothing personal. As you probably know, one of the most effective attack vectors on Bitcoin is to target the social layer by sabotaging the protocol development[1]. Bike shedding is an easy way to cause a lot of harm.\nThis is why it is hard to distinguish your radical opinions from an (unintended) attack. So, we cannot simply trust you. In particular because you contribute so much time criticising the activation of CTV, while you also refuse to spend any time working on activating covenants. You just want to stall the activation of covenants indefinitely. An attacker would act the same.\nAnother red flag is that you are trying to downplay how many reputable community members have already signalled their support for CTV https://utxos.org/signals/ . You keep framing it as if there was only that one crazy guy trying to push an immature and risky consensus change. In fact, it is well reviewed and many people support CTV because it is the most conservative step forwards and it is ready for activation now.\nYou are alarmed by what you call a \"contentious\" soft fork while actually you are yourself by far the most vocal opponent of this fork. You are even threatening to cause a chain split while you're also warning others that your chain split would become a big issue. Since we're talking about a soft fork here you're basically saying that you want to make your node reject valid blocks. I doubt that anyone opposes CTV as extremely as you do. In particular because your strongest argument is that CTV might not be ideal for all use cases, which is trivially true for every protocol upgrade. An attacker would act the same.\n\nAll in all, it is very hard to distinguish your strong desire to stall the development from an attack. This is why we have to question your motives thoroughly. Again, this is nothing personal. It's just that you are very critical of people who support activation of CTV and thus, you should expect others to be just as critical of your opinions. Isn't that fair?\n\nRegards,\nRobin\n\n[1] https://twitter.com/peterktodd/status/1495796670440919056\n\n------- Original Message -------\nOn Thursday, April 21st, 2022 at 12:04 AM, Michael Folkson <michaelfolkson at protonmail.com> wrote:\n\n> Ok last one. Whatever you say and whatever personal attacks you come up with I'm not responding after this one :)\n>\n>> Where can I see the use cases you have built out in recent years? Do you have a writeup in which you compare CTV to existing covenant enabling proposals? Do you have a strong reason to favour a different proposal? Have you written any code?\n>\n> You don't seem to quite understand the asymmetry here. I (and the rest of the community excluding Jeremy) am not a full time CTV developer or full time CTV advocate. There are a number of soft fork proposals I am interested in and attempting to follow in addition to all the work that is going around Taproot etc. But if you/Jeremy want to make a change to the consensus rules the onus is on you to get community review and community consensus. I am not demanding the consensus rules be changed. I am quite happy to wait until there is community consensus over a particular soft fork like there was with Taproot.\n>\n> I have looked into CTV a considerable number of times now. I have asked 5 of the 6 CTV related questions on Bitcoin StackExchange at the time of writing [1], 2 of which I have attempted to answer. Does this mean I understand as much about Jeremy about CTV? Of course not. But if you believe that soft forks should have community consensus it is up to you/Jeremy to address concerns from curious, relatively informed, skeptical people like me. I am not convinced at the time of writing that CTV is the best tool for the job on any of its intended use cases. On this I don't think even Jeremy is convinced as when asked to compare CTV to alternatives he often just says it is ready and other proposals aren't.\n>\n>> In contrast, Jeremy has been doing exactly what you are proposing. He wrote the BIP, implemented it, explained use cases in detail, spoke at conferences, organised workshops, and built the Sapio framework for the community to experiment with covenants. He even puts his money where his mouth is and offers a bug bounty for any security flaw in the code.\n>\n> I'm not entirely sure where you are going with this. That because Jeremy has worked really hard on it for a long time we should activate it without community consensus? I'm sorry that's not how consensus changes work or how they should work. Personally I very much doubt I will ever attempt to change the consensus rules with one of my proposals. I struggle to follow all of the work and the proposals others work on and at least for now believe others are much more qualified than me to design and code up consensus code changes. So again there is an asymmetry if you are going down the comparing Jeremy's goals with my own.\n>\n>> I think by framing his contributions as \"immature\" you are disrespecting all the work he put into BIP-119.\n>\n> I think CTV is an immature proposal given what I've said already about it not being at all clear it is the best tool for any of its intended use cases.\n>\n>> If you are not willing to do what you are suggesting for years why should anybody else do it? Should the entire community stall progress on covenants until somebody else works on what you think is ideal?\n>\n> Others are currently working on alternative proposals to CTV (CAT, CSFS, TLUV, Simplicity, arguably APO depending on the use case etc). I haven't asked them to, they already are. As far as I know (they can correct me if wrong) those working on alternative proposals don't support an upcoming activation of CTV. You can try to make this personal all you want and write snide comments if it makes you feel better. But I doubt it is the right approach to getting more review of a soft fork proposal.\n>\n>> Bike shedding is just as big of an issue as \"contentious soft forks\". Pointless activation drama is a huge issue of bitcoin protocol development because it is so draining. Some of the most respected devs do not participate in activation politics anymore because it harms their health. That's nuts. If you really want to be of service to the Bitcoin community you should work on what you think is the right path forward and not just criticise Jeremy for progressing with his excellent work.\n>\n> If you have a magic wand to wave away activation drama and create an activation method that the entire community is happy with I'd love to see it. That magic wand would have got a few months of my life back in 2021 that I'll never get back.\n>\n> As I said no more responses from me. I am going to go back to a transcript on FROST, one of the many exciting things people are working on that is Taproot related and what I believe the focus should be on at least until there is clear community consensus for a future soft fork.\n>\n> [1]: https://bitcoin.stackexchange.com/questions/tagged/bip119-checktemplateverify\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at [protonmail.com](http://protonmail.com/)\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n> ------- Original Message -------\n> On Wednesday, April 20th, 2022 at 20:46, Robin Linus via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi Michael,\n>>\n>> Thank you for your reply. You wrote:\n>>\n>>> I have a better (and safer) way forward which is to continue to build out use cases of CTV, convince the community it is the best tool for the job (whatever use case(s) that is), compare it to other existing covenant enabling proposals on those use cases and then get to a point where the community is confident that it is activating a proposal(s) that will stand the test of time.\n>>\n>> Where can I see the use cases you have built out in recent years? Do you have a writeup in which you compare CTV to existing covenant enabling proposals? Do you have a strong reason to favour a different proposal? Have you written any code?\n>>\n>> I've seen pages of text of you complaining about details of CTV activation but nothing tangible that would prove that you are actually interested in real progress on covenants.\n>> In contrast, Jeremy has been doing exactly what you are proposing. He wrote the BIP, implemented it, explained use cases in detail, spoke at conferences, organised workshops, and built the Sapio framework for the community to experiment with covenants. He even puts his money where his mouth is and offers a bug bounty for any security flaw in the code.\n>>\n>>> You may not like that way forward because it requires a lot of work, a lot of time and a lot of patience.\n>>\n>> A lot of work, a lot of time and a lot of patience is exactly what Jeremy has been investing for years. I think by framing his contributions as \"immature\" you are disrespecting all the work he put into BIP-119. If you could point me to essays of you thoughtfully comparing various covenant proposals then I could see your point, but you're only ranting on other people's work which requires no real effort and it doesn't contribute much. If you are not willing to do what you are suggesting for years why should anybody else do it? Should the entire community stall progress on covenants until somebody else works on what you think is ideal?\n>> Bike shedding is just as big of an issue as \"contentious soft forks\". Pointless activation drama is a huge issue of bitcoin protocol development because it is so draining. Some of the most respected devs do not participate in activation politics anymore because it harms their health. That's nuts. If you really want to be of service to the Bitcoin community you should work on what you think is the right path forward and not just criticise Jeremy for progressing with his excellent work.\n>>\n>> Looking forward to check out your contributions!\n>>\n>> Regards,\n>> Robin\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220421/3d61df58/attachment-0001.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2022-04-21T04:03:05",
                "message_text_only": "Hi Michael,\n\nI'm sympathetic to the idea of allowing time for the community to absorb,\nreview, analyze, discuss, etc any new substantial change to bitcoin,\nespecially consensus changes. I certainly think that over time the\nfrequency of soft forks should generally go down on average, with\nossification at some point being the ideal endpoint (perhaps in the next\n10-20 years).\n\nHowever, many of the messages of opposition/caution seem to imply that\nanalysis of a consensus change can't begin until the last change has been\ncompleted. This is quite clearly not the case. And as far as I can tell the\nCTV spec was functionally completed *before* the taproot spec was (sometime\nin early 2020).\n\nJeremy included a nice list of \"ticked boxes\" that are all indicators of\nmaturity of not only the spec but implementations and testing. I would\nexpect any considered opposition to CTV to at least address that checklist,\nbut you did not.\n\nI think it would be interesting to compare the state of CTV now with the\nstate of taproot when activation. One example is that Taproot had been on\nSignet for about 1 month\n<https://www.coindesk.com/tech/2021/01/14/bitcoin-cores-latest-release-is-out-heres-whats-in-it/>\nbefore\nconsensus developed <https://gnusha.org/taproot-activation/2021-02-16.log>\nin support of pulling the trigger on a softfork for taproot. CTV has had a\nsignet running for almost twice that long already if not longer. So\nMichael, what do you think is missing from Jeremy's checklist? Where do you\nthink the checklist fails to meet your ideal bar of acceptance?\n\nNot only that but CTV is a simpler change than taproot. I assume you'd\nagree that a simpler change should require correspondingly less\nreview/analysis/etc, right? If not, I'd appreciate it if you could comment\nas to why.\n\n> There are a number of individuals who have stated opposition to\nattempting to activate a CTV soft fork in the near term\n\nAs Jeremy has noted, none of these indicate or suspect any technical issues\nin CTV. Basically all of them are basically saying \"too soon\" without much\nconcrete reasons. I believe in consensus weighted by quality-of-logic, and\nmost of the ones in your list do not contain any supported logic at all.\nMany are borderline ad hominems at Jeremy. So to me, most hold little\nweight. The ones with some logic included seem to basically be \"I'm not\ninvolved enough to know or knowledgeable enough to review, and therefore\nI'm hesitant\". Now to be fair, many of the acks listed in Jeremy's also\nhold little weight to me for the same reasons, with a few exceptions like Bram\nCohen's discussion\n<https://twitter.com/bramcohen/status/1224823869933899776> and a Corenell\npaper <https://arxiv.org/abs/2005.11776>. But there's clearly been quite a\nbit of review on the PR <https://github.com/bitcoin/bitcoin/pull/21702> as\nwell. By contrast I've seen literally no opposition to CTV based on the\nproposal at all.\n\nWith regards to the idea that more time is needed to review/discuss. I\nwonder if any of those opposed to near term speedy trial of CTV plan on\ndoing a deeper review/exploration of it in the next year? If not, then what\nwill delaying do? Are these people simply waiting to see more people in\ntheir social bubble becomes familiar and comfortable with CTV?\n\n> I have a better (and safer) way forward which is to continue to build out\nuse cases of CTV, convince the community it is the best tool for the job\n(whatever use case(s) that is), compare it to other existing covenant\nenabling proposals\n\nWhile I think this is a more valid position to take than your other points,\nI disagree with it. I am also sympathetic to the idea that alternatives\nshould be evaluated and the best one at hand should be chosen. However, it\nis a simple fact that the \"best\" solution possible is almost never going to\nbe found or created, even after absurd amounts of time (eg millenia). We\nlive in a time bound world, with time bound human lives. I assume you've\nheard of the phrase \"don't let the perfect become the enemy of the good\". I\nassert that your argument is to do just that: to make the perfect become\nthe enemy of the good.\n\nThere is some trade off between time to usage (think time to market) and\nthe quality of the solution. We didn't choose taproot because it was the\nbest possible solution, we chose it because it was a pretty good solution\nand the solution we had. Yes alternatives have been discussed (at least\nsince 2013), but alternatives to CTV have also been discussed (eg OP_CAT)\nfor probably just as long. There have been a number of random\nback-of-the-napkin alternative proposals to CTV. None have gained anything\nresembling support. I proposed one of them\n<https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/cd/bip-constraindestination.md>\nmyself. And I certainly agree that CTV isn't perfect and doesn't do\neverything I want it to do. But despite this, I think having CTV is better\nthan not having it. Even if its eventually mostly replaced by some more\ncomplex covenant opcode, CTV can provide a LOT of value in a number of ways\nuntil that point (which will likely be at least 4 years). And its also\nlikely that a more full featured covenant opcode will take *longer* if CTV\ndoesn't get out there and show the uninformed why covenants are important.\n\nAs far as I can tell, its uncontroversial that CTV is the simplest and\nsafest of all the covenant proposals. Do you disagree?\n\n> Taproot had overwhelming community consensus so it had much less chain\nsplit risk\n\nIMO this is a completely invalid argument. If a speedy trial is done and\n90% miner activation happens, that is quite a high supermajority\npercentage. If such a thing happens, there is basically 0 chance of any\nchain split happening directly from activation. The only chain split risk,\nthen, would be from anyone who thinks it would be then worth it to hard\nfork away from that chain, which you have already said you wouldn't be one\nof. So I have to say, this additional chain split risk you speak of sounds\ncompletely imaginary to me.\n\n~BT\n\nOn Wed, Apr 20, 2022 at 8:49 AM Michael Folkson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> > The client has a Speedy trial release similar to Taproots with\n> parameters proposed to be....\n>\n> As I've said before I was hoping we'd avoid this exercise. Best case, it\n> wastes the time of people who could be working on all sorts of valuable\n> projects for the ecosystem. Worst case, we take a Russian roulette style\n> gamble with a chain split.\n>\n> But here's a summary of the basic facts:\n>\n> The latest Bitcoin Core release candidate (23.0) does not contain any new\n> soft fork code, either CTV code or any new activation code. Running Bitcoin\n> Core 23.0 out the box will not signal for any new soft fork and will not\n> enforce any new soft fork rules (CTV or otherwise). Of course it will\n> continue to enforce Taproot rules as Taproot activated last year.\n>\n> There are a number of individuals who have stated opposition to attempting\n> to activate a CTV soft fork in the near term:\n>\n> https://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n>\n> Most of those individuals haven't logged their opposition on Jeremy's site:\n> https://utxos.org/signals/\n>\n> Hence their views haven't been included or discussed in Jeremy's latest\n> blog post.\n>\n> Chain split risk\n>\n> I can't predict how many full nodes and miners will run Jeremy's client\n> attempting to activate CTV. One would expect that many will continue to run\n> versions of Bitcoin Core that will not enforce CTV rules and will not\n> activate it. But whether Jeremy's client will be a majority, significant\n> minority, insignificant minority of full nodes and miners would be\n> speculation on my part. (Personally I highly doubt those running Jeremy's\n> client will be a majority which leaves a significant minority and\n> insignificant minority as the most likely options).\n>\n> Jeremy's client is intending to use Speedy Trial presumably with similar\n> parameters to that used for Taproot. That would mean seeking 90 percent of\n> miners to signal for this CTV soft fork activation attempt.\n>\n> Assuming 90 percent of miners don't signal for it in one of the Speedy\n> Trial windows then the activation attempt will have failed and it will be\n> back in Jeremy's court whether he tries again with a different activation\n> attempt.\n>\n> Assuming 90 percent of miners do signal for it (unlikely in my opinion but\n> presumably still a possibility) then the CTV soft fork could activate\n> unless full nodes resist it. This resistance would most likely be in the\n> form of a UASF style client which rejects blocks that apply the CTV rules\n> and/or includes transactions that don't meet the CTV rules post activation.\n> We would now be in chain split territory with two different assets and\n> blockchains like we had with BTC and BCH.\n>\n> If I oppose this activation attempt and the associated chain split risk\n> what should I do?\n>\n> Firstly, you can register your opposition to this soft fork activation\n> attempt on Jeremy's site: https://utxos.org/signals/\n>\n> It seems Jeremy will continue this activation attempt regardless but it\n> will be useful for others to see clearly that this a contentious soft fork\n> activation attempt and act accordingly. So far only 3 individuals'\n> opposition is registered on his site.\n>\n> Secondly, if it is looking like 90 percent (or whatever percentage Jeremy\n> uses) of miners are going to signal for a CTV soft fork then you can\n> consider joining a UASF style effort to resist the soft fork activation\n> attempt. I will certainly seek to participate and will continue to inform\n> this list of efforts in this direction.\n>\n> The saddest thing is that if Jeremy's soft fork activation attempt causes\n> the uncertainty, confusion and disruption I fear it could it will make\n> future soft forks that do have community consensus orders of magnitude\n> harder to pull off. There are a number of soft fork proposals that I'm\n> personally excited about (enabling covenants, eltoo, Simplicity, CISA etc)\n> that long term we might get with a sensible approach to only activating\n> soft forks that have community consensus. But the more uncertainty,\n> confusion and disruption we create over contentious soft forks the more\n> dangerous any soft fork of any form will appear. The primary focus will\n> need to be resisting soft forks that don't have community consensus and\n> ensuring Bitcoin doesn't splinter into a large number of different\n> assets/blockchains with different combinations of soft forks active.\n>\n> So if you oppose this soft fork activation attempt please voice your\n> opposition, run full node software that doesn't include CTV and CTV\n> activation code such as Bitcoin Core and if/when necessary and available\n> run full node software that proactively rejects application of the CTV\n> rules.\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n> ------- Original Message -------\n> On Tuesday, April 19th, 2022 at 18:31, Jeremy Rubin via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Devs,\n>\n> In advance of the CTV meeting today, I wanted to share what my next step\n> is in advocating for CTV, as well as 7 theses for why I believe it to be\n> the right course of action to take at this time.\n>\n> Please see the post at\n> https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/.\n>\n> As always, open to hear any and all feedback,\n>\n> Jeremy\n>\n>\n> archived at:\n> https://web.archive.org/web/20220419172825/https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220420/ce6a05e9/attachment-0001.html>"
            },
            {
                "author": "Zac Greenwood",
                "date": "2022-04-21T12:49:19",
                "message_text_only": "On Wed, 20 Apr 2022 at 15:49, Michael Folkson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\nAssuming 90 percent of miners don't signal for it in one of the Speedy\n> Trial windows then the activation attempt will have failed and it will be\n> back in Jeremy's court whether he tries again with a different activation\n> attempt.\n>\n> Assuming 90 percent of miners do signal for it (unlikely in my opinion but\n> presumably still a possibility) then the CTV soft fork could activate\n> unless full nodes resist it.\n>\n\nThis is wrong. Miners do not have the mandate to decide the faith of\nsoftforks. The MO of softforks is that once a softfork has been merged, it\nalready has consensus and must be activated by miners eventually. The\nvarious activation methods exist to ensure miners cannot sabotage a\nsoftfork that has consensus.\n\nThe way you phrase it, makes it sound like miners have any say over\nsoftforks. This is not the case.\n\nZac\n\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220421/c3b767ba/attachment.html>"
            },
            {
                "author": "alicexbt",
                "date": "2022-04-21T13:40:19",
                "message_text_only": "> There are a number of individuals who have stated opposition to attempting to activate a CTV soft fork in the near term:\n>\n> https://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n\nsheshek found some issues with the list and some of them are not really an opposition for CTV. Others do not have any technical details to consider.\n\n> The saddest thing is that if Jeremy's soft fork activation attempt causes the uncertainty, confusion and disruption I fear it could it will make future soft forks that do have community consensus orders of magnitude harder to pull off.\n\nCalling CTV an attack on bitcoin or doing personal attacks on Jeremy and other developers on social media that support CTV won't help. Developers should be free to propose improvements and write code. Users can decide if they want to run this code. Just because someone is opposing a change and prefers status quo does not mean it is better for Bitcoin. Attackers have used such things in past for many open source projects.\n\nExample: Someone signed up on the Tor Project mailing list and then participated in discussions to advocate against the removal of malicious servers\n\nhttps://nitter.net/campuscodi/status/1466748897003544579\n\ndev/fd0\n\nSent with [ProtonMail](https://protonmail.com/) secure email.\n\n------- Original Message -------\nOn Wednesday, April 20th, 2022 at 6:54 PM, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>> The client has a Speedy trial release similar to Taproots with parameters proposed to be....\n>\n> As I've said before I was hoping we'd avoid this exercise. Best case, it wastes the time of people who could be working on all sorts of valuable projects for the ecosystem. Worst case, we take a Russian roulette style gamble with a chain split.\n>\n> But here's a summary of the basic facts:\n>\n> The latest Bitcoin Core release candidate (23.0) does not contain any new soft fork code, either CTV code or any new activation code. Running Bitcoin Core 23.0 out the box will not signal for any new soft fork and will not enforce any new soft fork rules (CTV or otherwise). Of course it will continue to enforce Taproot rules as Taproot activated last year.\n>\n> There are a number of individuals who have stated opposition to attempting to activate a CTV soft fork in the near term:\n>\n> https://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n>\n> Most of those individuals haven't logged their opposition on Jeremy's site:\n> https://utxos.org/signals/\n>\n> Hence their views haven't been included or discussed in Jeremy's latest blog post.\n>\n> Chain split risk\n>\n> I can't predict how many full nodes and miners will run Jeremy's client attempting to activate CTV. One would expect that many will continue to run versions of Bitcoin Core that will not enforce CTV rules and will not activate it. But whether Jeremy's client will be a majority, significant minority, insignificant minority of full nodes and miners would be speculation on my part. (Personally I highly doubt those running Jeremy's client will be a majority which leaves a significant minority and insignificant minority as the most likely options).\n>\n> Jeremy's client is intending to use Speedy Trial presumably with similar parameters to that used for Taproot. That would mean seeking 90 percent of miners to signal for this CTV soft fork activation attempt.\n>\n> Assuming 90 percent of miners don't signal for it in one of the Speedy Trial windows then the activation attempt will have failed and it will be back in Jeremy's court whether he tries again with a different activation attempt.\n>\n> Assuming 90 percent of miners do signal for it (unlikely in my opinion but presumably still a possibility) then the CTV soft fork could activate unless full nodes resist it. This resistance would most likely be in the form of a UASF style client which rejects blocks that apply the CTV rules and/or includes transactions that don't meet the CTV rules post activation. We would now be in chain split territory with two different assets and blockchains like we had with BTC and BCH.\n>\n> If I oppose this activation attempt and the associated chain split risk what should I do?\n>\n> Firstly, you can register your opposition to this soft fork activation attempt on Jeremy's site: https://utxos.org/signals/\n>\n> It seems Jeremy will continue this activation attempt regardless but it will be useful for others to see clearly that this a contentious soft fork activation attempt and act accordingly. So far only 3 individuals' opposition is registered on his site.\n>\n> Secondly, if it is looking like 90 percent (or whatever percentage Jeremy uses) of miners are going to signal for a CTV soft fork then you can consider joining a UASF style effort to resist the soft fork activation attempt. I will certainly seek to participate and will continue to inform this list of efforts in this direction.\n>\n> The saddest thing is that if Jeremy's soft fork activation attempt causes the uncertainty, confusion and disruption I fear it could it will make future soft forks that do have community consensus orders of magnitude harder to pull off. There are a number of soft fork proposals that I'm personally excited about (enabling covenants, eltoo, Simplicity, CISA etc) that long term we might get with a sensible approach to only activating soft forks that have community consensus. But the more uncertainty, confusion and disruption we create over contentious soft forks the more dangerous any soft fork of any form will appear. The primary focus will need to be resisting soft forks that don't have community consensus and ensuring Bitcoin doesn't splinter into a large number of different assets/blockchains with different combinations of soft forks active.\n>\n> So if you oppose this soft fork activation attempt please voice your opposition, run full node software that doesn't include CTV and CTV activation code such as Bitcoin Core and if/when necessary and available run full node software that proactively rejects application of the CTV rules.\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at [protonmail.com](http://protonmail.com/)\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n> ------- Original Message -------\n> On Tuesday, April 19th, 2022 at 18:31, Jeremy Rubin via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Devs,\n>>\n>> In advance of the CTV meeting today, I wanted to share what my next step is in advocating for CTV, as well as 7 theses for why I believe it to be the right course of action to take at this time.\n>>\n>> Please see the post at https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/.\n>>\n>> As always, open to hear any and all feedback,\n>>\n>> Jeremy\n>>\n>> archived at: https://web.archive.org/web/20220419172825/https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220421/1b23f5af/attachment-0001.html>"
            },
            {
                "author": "Greg Sanders",
                "date": "2022-04-21T14:16:24",
                "message_text_only": "Ironically assumptions of bad faith are going to kill any proposal,\nresulting in the status quo.\n\nLet's keep the assumption of good faith, unless you are actually accusing\npeople of being a NSA-adjacent asset.\n\nOn Thu, Apr 21, 2022 at 10:08 AM alicexbt via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> There are a number of individuals who have stated opposition to attempting\n> to activate a CTV soft fork in the near term:\n>\n> https://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n>\n>\n> sheshek found some issues with the list and some of them are not really an\n> opposition for CTV. Others do not have any technical details to consider.\n>\n> The saddest thing is that if Jeremy's soft fork activation attempt causes\n> the uncertainty, confusion and disruption I fear it could it will make\n> future soft forks that do have community consensus orders of magnitude\n> harder to pull off.\n>\n>\n>\n> Calling CTV an attack on bitcoin or doing personal attacks on Jeremy and\n> other developers on social media that support CTV won't help. Developers\n> should be free to propose improvements and write code. Users can decide if\n> they want to run this code. Just because someone is opposing a change and\n> prefers status quo does not mean it is better for Bitcoin. Attackers have\n> used such things in past for many open source projects.\n>\n> Example: Someone signed up on the Tor Project mailing list and then\n> participated in discussions to advocate against the removal of malicious\n> servers\n>\n> https://nitter.net/campuscodi/status/1466748897003544579\n>\n>\n> dev/fd0\n>\n> Sent with ProtonMail <https://protonmail.com/> secure email.\n>\n> ------- Original Message -------\n> On Wednesday, April 20th, 2022 at 6:54 PM, Michael Folkson via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> > The client has a Speedy trial release similar to Taproots with\n> parameters proposed to be....\n>\n> As I've said before I was hoping we'd avoid this exercise. Best case, it\n> wastes the time of people who could be working on all sorts of valuable\n> projects for the ecosystem. Worst case, we take a Russian roulette style\n> gamble with a chain split.\n>\n> But here's a summary of the basic facts:\n>\n> The latest Bitcoin Core release candidate (23.0) does not contain any new\n> soft fork code, either CTV code or any new activation code. Running Bitcoin\n> Core 23.0 out the box will not signal for any new soft fork and will not\n> enforce any new soft fork rules (CTV or otherwise). Of course it will\n> continue to enforce Taproot rules as Taproot activated last year.\n>\n> There are a number of individuals who have stated opposition to attempting\n> to activate a CTV soft fork in the near term:\n>\n> https://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n>\n> Most of those individuals haven't logged their opposition on Jeremy's site:\n> https://utxos.org/signals/\n>\n> Hence their views haven't been included or discussed in Jeremy's latest\n> blog post.\n>\n> Chain split risk\n>\n> I can't predict how many full nodes and miners will run Jeremy's client\n> attempting to activate CTV. One would expect that many will continue to run\n> versions of Bitcoin Core that will not enforce CTV rules and will not\n> activate it. But whether Jeremy's client will be a majority, significant\n> minority, insignificant minority of full nodes and miners would be\n> speculation on my part. (Personally I highly doubt those running Jeremy's\n> client will be a majority which leaves a significant minority and\n> insignificant minority as the most likely options).\n>\n> Jeremy's client is intending to use Speedy Trial presumably with similar\n> parameters to that used for Taproot. That would mean seeking 90 percent of\n> miners to signal for this CTV soft fork activation attempt.\n>\n> Assuming 90 percent of miners don't signal for it in one of the Speedy\n> Trial windows then the activation attempt will have failed and it will be\n> back in Jeremy's court whether he tries again with a different activation\n> attempt.\n>\n> Assuming 90 percent of miners do signal for it (unlikely in my opinion but\n> presumably still a possibility) then the CTV soft fork could activate\n> unless full nodes resist it. This resistance would most likely be in the\n> form of a UASF style client which rejects blocks that apply the CTV rules\n> and/or includes transactions that don't meet the CTV rules post activation.\n> We would now be in chain split territory with two different assets and\n> blockchains like we had with BTC and BCH.\n>\n> If I oppose this activation attempt and the associated chain split risk\n> what should I do?\n>\n> Firstly, you can register your opposition to this soft fork activation\n> attempt on Jeremy's site: https://utxos.org/signals/\n>\n> It seems Jeremy will continue this activation attempt regardless but it\n> will be useful for others to see clearly that this a contentious soft fork\n> activation attempt and act accordingly. So far only 3 individuals'\n> opposition is registered on his site.\n>\n> Secondly, if it is looking like 90 percent (or whatever percentage Jeremy\n> uses) of miners are going to signal for a CTV soft fork then you can\n> consider joining a UASF style effort to resist the soft fork activation\n> attempt. I will certainly seek to participate and will continue to inform\n> this list of efforts in this direction.\n>\n> The saddest thing is that if Jeremy's soft fork activation attempt causes\n> the uncertainty, confusion and disruption I fear it could it will make\n> future soft forks that do have community consensus orders of magnitude\n> harder to pull off. There are a number of soft fork proposals that I'm\n> personally excited about (enabling covenants, eltoo, Simplicity, CISA etc)\n> that long term we might get with a sensible approach to only activating\n> soft forks that have community consensus. But the more uncertainty,\n> confusion and disruption we create over contentious soft forks the more\n> dangerous any soft fork of any form will appear. The primary focus will\n> need to be resisting soft forks that don't have community consensus and\n> ensuring Bitcoin doesn't splinter into a large number of different\n> assets/blockchains with different combinations of soft forks active.\n>\n> So if you oppose this soft fork activation attempt please voice your\n> opposition, run full node software that doesn't include CTV and CTV\n> activation code such as Bitcoin Core and if/when necessary and available\n> run full node software that proactively rejects application of the CTV\n> rules.\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n> ------- Original Message -------\n> On Tuesday, April 19th, 2022 at 18:31, Jeremy Rubin via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Devs,\n>\n> In advance of the CTV meeting today, I wanted to share what my next step\n> is in advocating for CTV, as well as 7 theses for why I believe it to be\n> the right course of action to take at this time.\n>\n> Please see the post at\n> https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/.\n>\n> As always, open to hear any and all feedback,\n>\n> Jeremy\n>\n>\n> archived at:\n> https://web.archive.org/web/20220419172825/https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220421/c0339732/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "7 Theses on a next step for BIP-119",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Greg Sanders",
                "Michael Folkson",
                "Robin Linus",
                "alicexbt",
                "Zac Greenwood",
                "Billy Tetrud",
                "Jeremy Rubin"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 75151
        }
    },
    {
        "title": "[bitcoin-dev] CTV Signet Parameters",
        "thread_messages": [
            {
                "author": "Anthony Towns",
                "date": "2022-04-20T02:31:07",
                "message_text_only": "On Thu, Feb 17, 2022 at 01:58:38PM -0800, Jeremy Rubin via bitcoin-dev wrote:\n> AJ Wrote (in another thread):\n> >   I'd much rather see some real\n> >   third-party experimentation *somewhere* public first, and Jeremy's CTV\n> >   signet being completely empty seems like a bad sign to me. \n\nThere's now been some 2,200 txs on CTV signet, of which (if I haven't\nmissed anything) 317 have been CTV spends:\n\n - none have been bare CTV (ie, CTV in scriptPubKey directly, not via\n   p2sh/p2wsh/taproot)\n\n - none have been via p2sh\n\n - 3 have been via taproot:\n    https://explorer.ctvsignet.com/tx/f73f4671c6ee2bdc8da597f843b2291ca539722a168e8f6b68143b8c157bee20\n    https://explorer.ctvsignet.com/tx/7e4ade977db94117f2d7a71541d87724ccdad91fa710264206bb87ae1314c796\n    https://explorer.ctvsignet.com/tx/e05d828bf716effc65b00ae8b826213706c216b930aff194f1fb2fca045f7f11\n\n   The first two of these had alternative merkle paths, the last didn't.\n\n - 314 have been via p2wsh\n    https://explorer.ctvsignet.com/tx/62292138c2f55713c3c161bd7ab36c7212362b648cf3f054315853a081f5808e\n   (don't think there's any meaningfully different examples?)\n\nAs far as I can see, all the scripts take the form:\n\n  [PUSH 32 bytes] [OP_NOP4] [OP_DROP] [OP_1]\n\n(I didn't think DROP/1 is necessary here? Doesn't leaving the 32 byte\nhash on the stack evaluate as true? I guess that means everyone's using\nsapio to construct the txs?)\n\nI don't think there's any demos of jamesob's simple-ctv-vault [0], which\nI think uses a p2wsh of \"IF n CSV DROP hotkey CHECKSIG ELSE lockcoldtx CTV\nENDIF\", rather than taproot branches.\n\n[0] https://github.com/jamesob/simple-ctv-vault\n\nLikewise I don't think there's any examples of \"this CTV immediately;\nor if fees are too high, this other CTV that pays more fees after X\ndays\", though potentially they could be hidden in the untaken taproot\nmerkle branches.\n\nI don't think there's any examples of two CTV outputs being combined\nand spent in a single transaction.\n\nI don't see any txs with nSequence set meaningfully; though most (all?)\nof the CTV spends seem to set nSequence to 0x00400000 which I think\ndoesn't have a different effect from 0xfffffffe?\n\nThat looks to me like there's still not much practical (vs theoretical)\nexploration of CTV going on; but perhaps it's an indication that CTV\ncould be substantially simplified and still get all the benefits that\npeople are particularly eager for.\n\n> I am unsure that \"learning in public\" is required --\n\nFor a consensus system, part of the learning is \"this doesn't seem that\ninteresting to me; is it actually valuable enough to others that the\nchange is worth the risk it imposes on me?\" and that's not something\nyou can do purely in private.\n\nOne challenge with building a soft fork is that people don't want to\ncommit to spending time building something that relies on consensus\nfeatures and run the risk that they might never get deployed. But the\nreverse of that is also a concern: you don't want to deploy consensus\nchanges and run the risk that they won't actually turn out to be useful.\n\nOr, perhaps, to \"meme-ify\" it -- part of the \"proof of work\" for deploying\na consensus change is actually proving that it's going to be useful.\nLike sha256 hashing, that does require real work, and it might turn out\nto be wasteful.\n\nCheers,\naj"
            },
            {
                "author": "Nadav Ivgi",
                "date": "2022-04-20T17:05:36",
                "message_text_only": "> I didn't think DROP/1 is necessary here? Doesn't leaving the 32 byte hash\non the stack evaluate as true?\n\nNot with Taproot's CLEANSTACK rule. It can make sense to always use `DROP\nOP_1` even outside of Taproot, just to keep things consistent and to avoid\npotential errors when switching from non-Taproot to Taproot. FWIW that's\nwhat I found myself doing when playing with CTV in P2WSH\n\nOn Wed, Apr 20, 2022 at 5:31 AM Anthony Towns via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Thu, Feb 17, 2022 at 01:58:38PM -0800, Jeremy Rubin via bitcoin-dev\n> wrote:\n> > AJ Wrote (in another thread):\n> > >   I'd much rather see some real\n> > >   third-party experimentation *somewhere* public first, and Jeremy's\n> CTV\n> > >   signet being completely empty seems like a bad sign to me.\n>\n> There's now been some 2,200 txs on CTV signet, of which (if I haven't\n> missed anything) 317 have been CTV spends:\n>\n>  - none have been bare CTV (ie, CTV in scriptPubKey directly, not via\n>    p2sh/p2wsh/taproot)\n>\n>  - none have been via p2sh\n>\n>  - 3 have been via taproot:\n>\n> https://explorer.ctvsignet.com/tx/f73f4671c6ee2bdc8da597f843b2291ca539722a168e8f6b68143b8c157bee20\n>\n> https://explorer.ctvsignet.com/tx/7e4ade977db94117f2d7a71541d87724ccdad91fa710264206bb87ae1314c796\n>\n> https://explorer.ctvsignet.com/tx/e05d828bf716effc65b00ae8b826213706c216b930aff194f1fb2fca045f7f11\n>\n>    The first two of these had alternative merkle paths, the last didn't.\n>\n>  - 314 have been via p2wsh\n>\n> https://explorer.ctvsignet.com/tx/62292138c2f55713c3c161bd7ab36c7212362b648cf3f054315853a081f5808e\n>    (don't think there's any meaningfully different examples?)\n>\n> As far as I can see, all the scripts take the form:\n>\n>   [PUSH 32 bytes] [OP_NOP4] [OP_DROP] [OP_1]\n>\n> (I didn't think DROP/1 is necessary here? Doesn't leaving the 32 byte\n> hash on the stack evaluate as true? I guess that means everyone's using\n> sapio to construct the txs?)\n>\n> I don't think there's any demos of jamesob's simple-ctv-vault [0], which\n> I think uses a p2wsh of \"IF n CSV DROP hotkey CHECKSIG ELSE lockcoldtx CTV\n> ENDIF\", rather than taproot branches.\n>\n> [0] https://github.com/jamesob/simple-ctv-vault\n>\n> Likewise I don't think there's any examples of \"this CTV immediately;\n> or if fees are too high, this other CTV that pays more fees after X\n> days\", though potentially they could be hidden in the untaken taproot\n> merkle branches.\n>\n> I don't think there's any examples of two CTV outputs being combined\n> and spent in a single transaction.\n>\n> I don't see any txs with nSequence set meaningfully; though most (all?)\n> of the CTV spends seem to set nSequence to 0x00400000 which I think\n> doesn't have a different effect from 0xfffffffe?\n>\n> That looks to me like there's still not much practical (vs theoretical)\n> exploration of CTV going on; but perhaps it's an indication that CTV\n> could be substantially simplified and still get all the benefits that\n> people are particularly eager for.\n>\n> > I am unsure that \"learning in public\" is required --\n>\n> For a consensus system, part of the learning is \"this doesn't seem that\n> interesting to me; is it actually valuable enough to others that the\n> change is worth the risk it imposes on me?\" and that's not something\n> you can do purely in private.\n>\n> One challenge with building a soft fork is that people don't want to\n> commit to spending time building something that relies on consensus\n> features and run the risk that they might never get deployed. But the\n> reverse of that is also a concern: you don't want to deploy consensus\n> changes and run the risk that they won't actually turn out to be useful.\n>\n> Or, perhaps, to \"meme-ify\" it -- part of the \"proof of work\" for deploying\n> a consensus change is actually proving that it's going to be useful.\n> Like sha256 hashing, that does require real work, and it might turn out\n> to be wasteful.\n>\n> Cheers,\n> aj\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220420/5f867336/attachment-0001.html>"
            },
            {
                "author": "Anthony Towns",
                "date": "2022-04-21T02:36:00",
                "message_text_only": "On Wed, Apr 20, 2022 at 08:05:36PM +0300, Nadav Ivgi via bitcoin-dev wrote:\n> > I didn't think DROP/1 is necessary here? Doesn't leaving the 32 byte hash\n> on the stack evaluate as true?\n> Not with Taproot's CLEANSTACK rule. \n\nThe CLEANSTACK rule is the same for segwit and tapscript though? \n\nFor p2wsh/BIP 141 it's \"The script must not fail, and result in exactly\na single TRUE on the stack.\" and for tapscript/BIP 342, it's \"If the\nexecution results in anything but exactly one element on the stack which\nevaluates to true with CastToBool(), fail.\"\n\nCastToBool/TRUE is anything that's not false, false is zero (ie, any\nstring of 0x00 bytes) or negative zero (a string of 0x00 bytes but with\nthe high byte being 0x80).\n\nTaproot has the MINIMALIF rule that means you have to use exactly 1 or 0\nas the input to IF, but I don't think that's relevant for CTV.\n\nCheers,\naj"
            },
            {
                "author": "Buck O Perley",
                "date": "2022-04-20T17:13:19",
                "message_text_only": "Hi AJ,\nLong time listener first time caller here.\nAll merits (or lack thereof depending on your view) of CTV aside, I find this topic around decision making both interesting and important. While I think I sympathize with the high level concern about making sure there are use cases, interest, and sufficient testing of a particular proposal before soft forking it into consensus code, it does feel like the attempt to attribute hard numbers in this way is somewhat arbitrary.\nFor example, I think it could be reasonable to paint the list of examples you provided where CTV has been used on signet in a positive light. 317 CTV spends \u201cout in the wild\u201d before there\u2019s a known activation date is quite a lot (more than taproot had afaik). If we don\u2019t think it is enough, then what number of unique spends and use cases should we expect to see of a new proposal before it\u2019s been sufficiently tested?\nPerhaps this is simply a case of the Justice Stewart view on pornography where \u201cyou know it when you see it\u201d[1], but then if that\u2019s the case than it really doesn\u2019t seem productive to use these numbers to evaluate the readiness and eagerness to use CTV since they are effectively arbitrary and could be used to make the argument in either direction.\nSo perhaps it just *felt* like there was more need and ready-to-use applications of taproot, and perhaps this feeling is broadly shared and that\u2019s fine, and it doesn\u2019t *feel* that way for CTV, but by the measures you laid out were there as many uses in the wild of taproot spends before it was brought to Speedy Trial? As far as I\u2019m aware there seemed to be more broken [2], premature Taproot spends then actual practical uses of it on a test network before it was fully activated (I might be wrong about this though). Meanwhile the primary tooling necessary to really make it useful (PTLCs, Musig2, FROST) weren\u2019t even fully specced out yet let alone actively being used on a test network and the list of proposed applications on the bitcoin wiki [3] (last updated April 2021) is similarly sparse and not quite up to the standards you\u2019ve set for CTV to be the next soft fork (this is to say nothing of the fact that many prefer to develop, build, and test on regtest than signet at this stage).\nMaybe this is similarly an argument for Taproot being activated too early and that may be a fair argument (not one I share to be clear). If that\u2019s the case, I think it\u2019s reasonable to put all cards on the table and we should be explicit that Taproot activation was premature for [X] reasons, here\u2019s the new standard we want to have new proposals hit (a signet, expected level of activity, etc.). Then whether it\u2019s CTV or TLUV or ANYPREVOUT, that\u2019s what we as a community, the developers maintaining the proposals, and the developers/companies that plan to build on top of the new proposal should strive to achieve.\nIn absence of the above, the risk of a constantly moving bar means the possibility of either insufficiently reviewed proposals getting activated because we\u2019re complacent and just placing trust in a small cadre of experts (nothing malicious in this, just seems worth avoiding) or personal and subjective reasoning allowing for premature ossification and blocking of upgrades that could otherwise be considered safe, useful, and perhaps even necessary on a long enough time horizon.\nThere\u2019s also the other risk which you point out:\n\n> One challenge with building a soft fork is that people don't want tocommit to spending time building something that relies on consensusfeatures and run the risk that they might never get deployed. But thereverse of that is also a concern: you don't want to deploy consensuschanges and run the risk that they won't actually turn out to be useful.\n\n\nPerhaps if we had clear metrics of what would make the work worth it, if we knew what we were working towards, we\u2019d be more likely to get that proof of work. To use your meme, miners know precisely what they\u2019re mining for and what a metric of success looks like which makes the risk/costs of attempting the PoW worth it (or conversely sometimes resulting the decision for miners to be decommissioned). In addition to the examples listed above, even Taproot which most agree had relatively broad consensus didn\u2019t have much work happening on top of it until it was activated. Suredbits as far as I\u2019m aware didn\u2019t want to build DLCs on top of lightning until taproot AND PTLCs were in use (in contrast we already have a DLC implementation that uses CTV[4]). We also have new ideas that only started coming up after Taproot activation (TLUV and Taro for example), so there\u2019s also the unknown of what we could have once it becomes clear that it\u2019s worth devoting mental energy and financial resources towards research.\nOne last wrinkle with regards to using countable metrics to determine a feature\u2019s \u201cworth\u201d is that not all features are the same. Many of the use cases that people are excited to use CTV for ([5], [6]) are very long term in nature and targeted for long term store of value in contrast to medium of exchange. Metrics for measuring value of a store of value upgrade are fundamentally different than those measuring value of MoE. It\u2019s like people pointing to transaction volume on other cryptocurrency systems to show that their chain is more valuable. You can build a CTV vault in signet, but you\u2019ll only really see a lot of people using it when it\u2019s to store real value on a time scale measured in decades not minutes or days like you might find for lightning testing and experimentation. This doesn\u2019t make one more or less desirable or valuable imo, just that the evaluation metrics should be treated totally differently.\nAnyway, I guess that\u2019s a (very) long way of saying, are these constructive ways to evaluate an upgrade and if they are can we maybe have an idea of what a success vs. a failure metric looks like (and in the interest of retrospection and iterative improvement, it would be useful to know if in retrospect Taproot didn\u2019t reach these metrics and maybe was activated prematurely as a result). To put another way and leave CTV out of it completely, what should an outside, unbiased observer that doesn\u2019t spend much time on Twitter expect to be able to see to evaluate the readiness or acceptability of ANYPREVOUT, TLUV, or any other possible future soft forks? If nothing else, nailing this down would seem to help make the lives of key bitcoin core maintainers much easier by removing politics from decisions that should otherwise be as technical in nature as possible.\n[1](http://cbldf.org/about-us/case-files/obscenity-case-files/obscenity-case-files-jacobellis-v-ohio-i-know-it-when-i-see-it/)\n[2](https://suredbits.com/taproot-funds-burned-on-the-bitcoin-blockchain/)\n[3](https://en.bitcoin.it/wiki/Taproot_Uses)\n[4](https://github.com/sapio-lang/sapio/blob/master/sapio-contrib/src/contracts/derivatives/dlc.rs)\n[5](https://github.com/kanzure/python-vaults/blob/master/vaults/bip119_ctv.py)\n[6](https://github.com/jamesob/simple-ctv-vault)\n\n\n> On Thu, Feb 17, 2022 at 01:58:38PM -0800, Jeremy Rubin via bitcoin-dev wrote:AJ Wrote (in another thread):\u00a0I'd much rather see some real\u00a0third-party experimentation *somewhere* public first, and Jeremy's CTV\u00a0signet being completely empty seems like a bad sign to me.\n> There's now been some 2,200 txs on CTV signet, of which (if I haven'tmissed anything) 317 have been CTV spends:\n> - none have been bare CTV (ie, CTV in scriptPubKey directly, not via\u00a0 p2sh/p2wsh/taproot)\n> - none have been via p2sh\n> - 3 have been via taproot:\u00a0\u00a0https://explorer.ctvsignet.com/tx/f73f4671c6ee2bdc8da597f843b2291ca539722a168e8f6b68143b8c157bee20\u00a0\u00a0https://explorer.ctvsignet.com/tx/7e4ade977db94117f2d7a71541d87724ccdad91fa710264206bb87ae1314c796\u00a0\u00a0https://explorer.ctvsignet.com/tx/e05d828bf716effc65b00ae8b826213706c216b930aff194f1fb2fca045f7f11\n> \u00a0 The first two of these had alternative merkle paths, the last didn't.\n> - 314 have been via p2wsh\u00a0\u00a0https://explorer.ctvsignet.com/tx/62292138c2f55713c3c161bd7ab36c7212362b648cf3f054315853a081f5808e\u00a0 (don't think there's any meaningfully different examples?)\n> As far as I can see, all the scripts take the form:\n> \u00a0[PUSH 32 bytes] [OP_NOP4] [OP_DROP] [OP_1]\n> (I didn't think DROP/1 is necessary here? Doesn't leaving the 32 bytehash on the stack evaluate as true? I guess that means everyone's usingsapio to construct the txs?)\n> I don't think there's any demos of jamesob's simple-ctv-vault [0], whichI think uses a p2wsh of \"IF n CSV DROP hotkey CHECKSIG ELSE lockcoldtx CTVENDIF\", rather than taproot branches.\n> [0]\u00a0https://github.com/jamesob/simple-ctv-vault\n> Likewise I don't think there's any examples of \"this CTV immediately;or if fees are too high, this other CTV that pays more fees after Xdays\", though potentially they could be hidden in the untaken taprootmerkle branches.\n> I don't think there's any examples of two CTV outputs being combinedand spent in a single transaction.\n> I don't see any txs with nSequence set meaningfully; though most (all?)of the CTV spends seem to set nSequence to 0x00400000 which I thinkdoesn't have a different effect from 0xfffffffe?\n> That looks to me like there's still not much practical (vs theoretical)exploration of CTV going on; but perhaps it's an indication that CTVcould be substantially simplified and still get all the benefits thatpeople are particularly eager for.\n> I am unsure that \"learning in public\" is required --\n> For a consensus system, part of the learning is \"this doesn't seem thatinteresting to me; is it actually valuable enough to others that thechange is worth the risk it imposes on me?\" and that's not somethingyou can do purely in private.\n> One challenge with building a soft fork is that people don't want tocommit to spending time building something that relies on consensusfeatures and run the risk that they might never get deployed. But thereverse of that is also a concern: you don't want to deploy consensuschanges and run the risk that they won't actually turn out to be useful.\n> Or, perhaps, to \"meme-ify\" it -- part of the \"proof of work\" for deployinga consensus change is actually proving that it's going to be useful.Like sha256 hashing, that does require real work, and it might turn outto be wasteful.\n> Cheers,\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220420/2585027e/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 249 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220420/2585027e/attachment-0001.sig>"
            },
            {
                "author": "Anthony Towns",
                "date": "2022-04-21T05:03:51",
                "message_text_only": "On Wed, Apr 20, 2022 at 05:13:19PM +0000, Buck O Perley via bitcoin-dev wrote:\n> All merits (or lack thereof depending on your view) of CTV aside, I find this topic around decision making both interesting and important. While I think I sympathize with the high level concern about making sure there are use cases, interest, and sufficient testing of a particular proposal before soft forking it into consensus code, it does feel like the attempt to attribute hard numbers in this way is somewhat arbitrary.\n\nSure. I included the numbers for falsifiability mostly -- so people\ncould easily check if my analysis was way off the mark.\n\n> For example, I think it could be reasonable to paint the list of examples you provided where CTV has been used on signet in a positive light. 317 CTV spends \u201cout in the wild\u201d before there\u2019s a known activation date is quite a lot\n\nNot really? Once you can make one transaction, it's trivial to make\nhundreds. It's more interesting to see if there's multiple wallets or\nsimilar that support it; or if one wallet has a particularly compelling\nuse case.\n\n> (more than taproot had afaik).\n\nYes; as I've said a few times now, I think we should have had more\nreal life demos before locking taproot's activation in. I think that\nwould have helped avoid bugs like Neutrino's [0] and made it easier for\nhardware wallets etc to have support for taproot as soon as it was active,\nwithout having to rush around adding library support at the last minute.\n\n[0] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-November/019589.html \n\nLightning's \"two independent implementations\" rule might be worth aspiring\ntoo, eg.\n\n> If we don\u2019t think it is enough, then what number of unique spends and use cases should we expect to see of a new proposal before it\u2019s been sufficiently tested?\n\nI don't really think that's the metric. I'd go for something more like:\n\n 1a) can you make transactions using the new feature with bitcoin-cli,\n     eg createrawtransaction etc?\n 1b) can you make transactions using the new feature with some other\n     library?\n 1c) can you make transactions using the new feature with most common\n     libraries?\n\n 2) has anyone done a usable prototype of the major use cases of the new\n    feature?\n\nI think the answers for CTV are:\n\n 1a) no\n 1b) yes, core's python test suite, sapio\n 1c) no\n 2) no\n \nThough presumably jamesob's simple ctv vault is close to being an answer\nfor (2)?\n\nFor taproot, we had,\n\n 1a) yes, with difficulty [1]\n 1b) yes, core's python test suite; kalle's btcdeb sometimes worked too\n 1c) no\n 2) optech's python notebook [2] from it's taproot workshops had demos for\n    musig and degrading multisig via multiple merkle paths, though I\n    think they were out of date with the taproot spec for a while\n\n[1] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-October/019543.html\n[2] https://github.com/bitcoinops/taproot-workshop/\n\nTo some extent those things are really proxies for:\n\n 3) how well do people actually understand the feature?\n\n 4) are we sure the tradeoffs being made in this implementation of the\n    feature, vs other implementations or other features actually make\n    sense?\n\n 5) how useful is the feature?\n\nI think we were pretty confident in the answers for those questions\nfor taproot. At least personally, I'm still not super confident in\nthe answers for CTV. In particular:\n\n - is there really any benefit to doing it as a NOP vs a taproot-only\n   opcode like TXHASH? Theoretically, sure, that saves some bytes; but as\n   was pointed out on #bitcoin-wizards the other day, you can't express\n   those outputs as an address, which makes them not very interoperable,\n   and if they're not interoperable between, say, an exchange and its\n   users trying to do a withdraw, how useful is that really ever going\n   to be?\n\n - the scriptSig commitments seems very kludgy; combining multiple\n   inputs likewise seems kludgy\n\nThe continual push to rush activation of it certainly doesn't increase my\nconfidence either. Personally, I suspect it's counterproductive; better\nto spend the time answering questions and improving the proposal, rather\nthan spending time going around in circles about activating something\npeople aren't (essentially) unanimously confident about.\n\n> In absence of the above, the risk of a constantly moving bar \n\nI'd argue the bar *should* be constantly moving, in the sense that we\nshould keep raising it.\n\n> To use your meme, miners know precisely what they\u2019re mining for and what a metric of success looks like which makes the risk/costs of attempting the PoW worth it \n\nThe difference between mining and R&D is variance: if you're competing for\n50k blocks a year, you can get your actual returns to closely match your\nexpected return, especially if you pool with others so your probability\nof success isn't miniscule -- for consensus dev, you can reasonably only\nwork on a couple of projects a year, so your median return is likely $0,\nrather than a close match to your average/expected return.\n\n> We also have new ideas that only started coming up after Taproot activation (TLUV and Taro for example), so there\u2019s also the unknown of what we could have once it becomes clear that it\u2019s worth devoting mental energy and financial resources towards research.\n\nTLUV was an offshoot of SCRIPTREPLACE which was public (though not\nreally published) since 2019.\n\n> One last wrinkle with regards to using countable metrics to determine a feature\u2019s \u201cworth\u201d is that not all features are the same. Many of the use cases that people are excited to use CTV for ([5], [6]) are very long term in nature and targeted for long term store of value in contrast to medium of exchange.\n\nI mean, if those use cases are so exciting, it really doesn't seem much\nto ask to see them demoed live on the CTV signet that already exists?\n\n> You can build a CTV vault in signet, but you\u2019ll only really see a lot of people using it when it\u2019s to store real value on a time scale measured in decades not minutes or days \n\nOn the other hand, if the value is really \"very long term\" and there's no\nrush to implement these features and demo them ASAP, then it doesn't seem\nlike there should be a rush to adapt consensus to these use cases either.\nWhy not wait until someone does have time to finish sketching out the\nuse case so they can demo them in public?\n\n> To put another way and leave CTV out of it completely, what should an outside, unbiased observer that doesn\u2019t spend much time on Twitter expect to be able to see to evaluate the readiness or acceptability of ANYPREVOUT, TLUV, \n\nFor ANYPREVOUT, I would like to see a toy implementation of eltoo using\nit, that can handle fees and layered transactions (or has a good argument\nwhy layered transactions aren't necessary). It's going to take a while\neven to update LN to taproot and PTLCs though, so eltoo doesn't seem like\nit's on the immediate horizon. Besides eltoo, I don't think ANYPREVOUT\nis an optimal design for covenants, so if that was the motivation and\nnot eltoo, maybe some other approach would be better.\n\nTLUV's design parameters don't really seem optimal (the mess with x-only\npubkeys, alternatives like OP_EVICT), so I think it's still on the\nwhiteboard.\n\nCheers,\naj"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2022-04-21T06:16:09",
                "message_text_only": "Probably merits a more thorough response, but, I wanted to respond on the\nframework above:\n\n\n 1a) can you make transactions using the new feature with bitcoin-cli,\n     eg createrawtransaction etc? (*YES)*\n\nsince ~Feb 2020, this has existed:\nhttps://github.com/JeremyRubin/bitcoin/tree/checktemplateverify-feb1-workshop\n\nCTV hasn't changed so this code should work un-rebased. The transaction\noutputs may need to be manually submitted to the network, but the covenant\nis enforced. This covers congestion control and vaults.\n\n\n 1b) can you make transactions using the new feature with some other\n     library? *(YES)*\nSapio, Test Framework, also https://min.sc/nextc/ produced independently by\nShesek\n\n 1c) can you make transactions using the new feature with most common\n     libraries? *(YES, kinda)*\n\nYes, https://crates.io/crates/sapio-miniscript and\nhttps://crates.io/crates/sapio-bitcoin have been maintained for about 1\nyear, and are now taproot compatible.\n\nSapio's use of these libraries has even helped find bugs in the release\nprocess of Taproot for rust-bitcoin.\n\nkinda: It's not _most_ common libraries, it's _a_ common library. it's also\nnot upstreamed, because the patches would not be accepted were it to be.\n\n 2) has anyone done a usable prototype of the major use cases of the new\n    feature?* (YES)*\n\nIn addition to https://github.com/jamesob/simple-ctv-vault, there is also\nhttps://github.com/kanzure/python-vaults, although it has an interesting\nbug.\n\nThere's also a myriad of uses shown in\nhttps://github.com/sapio-lang/sapio/tree/master/sapio-contrib/src/contracts\nand in https://github.com/sapio-lang/sapio/tree/master/plugin-example.\nWhile these aren't quite \"usable\" as an end-to-end application, e.g.,\nsomething you'd want to put real money on, they are a part of a *massive*\ninfrastructure investment in general purpose smart contract tooling for\ncovenant design with CTV. That CTV can be targeted with a compiler to\ngenerate a wide variety of composable use cases *is* one of the use cases\nfor CTV, since it enables people to design many different types of thing\nrelatively easily. That is a feature of CTV! It's not just for one use case.\n\nThe suite of Sapio apps are less \"production ready\" than they could be for\na few reasons:\n\n1) I've been working hard at pushing the limits of what is possible & the\ntheory of it v.s. making it production ready\n2) I prioritized supporting Taproot v.s. legacy script, and much of the\ntaproot tooling isn't production ready\n3) Sapio is really ambitious undertaking, and it will take time to make it\nproduction\n\nThat said, https://rubin.io/bitcoin/2022/03/22/sapio-studio-btc-dev-mtg-6/\ntutorial was completed by people who weren't me, and at the\npleb.fi/miami2022 one of the projects was able to use sapio congestion\ncontrol transactions as well, so it does \"work\". As it matures, we'll get a\nnumber of implemented use cases people have been excited about like DLCs,\nwhich are implemented here\nhttps://github.com/sapio-lang/sapio/blob/master/sapio-contrib/src/contracts/derivatives/dlc.rs.\nYou can see the test case shows how to construct one.\n\nWhy did I not focus on production grade? Well, production grade can always\nhappen later, and I don't think it takes as much imagination. But the main\ncritique I'd heard of CTV was that no one could see it being used for\nanything but one or two use cases. So I built Sapio, in part, to show how\nCTV could be used for an incredibly wide and diverse set of applications,\nas opposed to the polish on them.\n\nIf I knew the bar to surpass was to be polish, I probably could have taken\na less ambitious approach with Sapio and shown like 1-2 applications\nworking end-to-end. But because the main feedback I got was that CTV wasn't\npowerful enough, I opted to build a very general framework for covenants\nand demonstrate how CTV fits that.\n\n\n\n\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n\nOn Thu, Apr 21, 2022 at 12:05 AM Anthony Towns via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Wed, Apr 20, 2022 at 05:13:19PM +0000, Buck O Perley via bitcoin-dev\n> wrote:\n> > All merits (or lack thereof depending on your view) of CTV aside, I find\n> this topic around decision making both interesting and important. While I\n> think I sympathize with the high level concern about making sure there are\n> use cases, interest, and sufficient testing of a particular proposal before\n> soft forking it into consensus code, it does feel like the attempt to\n> attribute hard numbers in this way is somewhat arbitrary.\n>\n> Sure. I included the numbers for falsifiability mostly -- so people\n> could easily check if my analysis was way off the mark.\n>\n> > For example, I think it could be reasonable to paint the list of\n> examples you provided where CTV has been used on signet in a positive\n> light. 317 CTV spends \u201cout in the wild\u201d before there\u2019s a known activation\n> date is quite a lot\n>\n> Not really? Once you can make one transaction, it's trivial to make\n> hundreds. It's more interesting to see if there's multiple wallets or\n> similar that support it; or if one wallet has a particularly compelling\n> use case.\n>\n> > (more than taproot had afaik).\n>\n> Yes; as I've said a few times now, I think we should have had more\n> real life demos before locking taproot's activation in. I think that\n> would have helped avoid bugs like Neutrino's [0] and made it easier for\n> hardware wallets etc to have support for taproot as soon as it was active,\n> without having to rush around adding library support at the last minute.\n>\n> [0]\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-November/019589.html\n>\n> Lightning's \"two independent implementations\" rule might be worth aspiring\n> too, eg.\n>\n> > If we don\u2019t think it is enough, then what number of unique spends and\n> use cases should we expect to see of a new proposal before it\u2019s been\n> sufficiently tested?\n>\n> I don't really think that's the metric. I'd go for something more like:\n>\n>  1a) can you make transactions using the new feature with bitcoin-cli,\n>      eg createrawtransaction etc?\n>  1b) can you make transactions using the new feature with some other\n>      library?\n>  1c) can you make transactions using the new feature with most common\n>      libraries?\n>\n>  2) has anyone done a usable prototype of the major use cases of the new\n>     feature?\n>\n> I think the answers for CTV are:\n>\n>  1a) no\n>  1b) yes, core's python test suite, sapio\n>  1c) no\n>  2) no\n>\n> Though presumably jamesob's simple ctv vault is close to being an answer\n> for (2)?\n>\n> For taproot, we had,\n>\n>  1a) yes, with difficulty [1]\n>  1b) yes, core's python test suite; kalle's btcdeb sometimes worked too\n>  1c) no\n>  2) optech's python notebook [2] from it's taproot workshops had demos for\n>     musig and degrading multisig via multiple merkle paths, though I\n>     think they were out of date with the taproot spec for a while\n>\n> [1]\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-October/019543.html\n> [2] https://github.com/bitcoinops/taproot-workshop/\n>\n> To some extent those things are really proxies for:\n>\n>  3) how well do people actually understand the feature?\n>\n>  4) are we sure the tradeoffs being made in this implementation of the\n>     feature, vs other implementations or other features actually make\n>     sense?\n>\n>  5) how useful is the feature?\n>\n> I think we were pretty confident in the answers for those questions\n> for taproot. At least personally, I'm still not super confident in\n> the answers for CTV. In particular:\n>\n>  - is there really any benefit to doing it as a NOP vs a taproot-only\n>    opcode like TXHASH? Theoretically, sure, that saves some bytes; but as\n>    was pointed out on #bitcoin-wizards the other day, you can't express\n>    those outputs as an address, which makes them not very interoperable,\n>    and if they're not interoperable between, say, an exchange and its\n>    users trying to do a withdraw, how useful is that really ever going\n>    to be?\n>\n>  - the scriptSig commitments seems very kludgy; combining multiple\n>    inputs likewise seems kludgy\n>\n> The continual push to rush activation of it certainly doesn't increase my\n> confidence either. Personally, I suspect it's counterproductive; better\n> to spend the time answering questions and improving the proposal, rather\n> than spending time going around in circles about activating something\n> people aren't (essentially) unanimously confident about.\n>\n> > In absence of the above, the risk of a constantly moving bar\n>\n> I'd argue the bar *should* be constantly moving, in the sense that we\n> should keep raising it.\n>\n> > To use your meme, miners know precisely what they\u2019re mining for and what\n> a metric of success looks like which makes the risk/costs of attempting the\n> PoW worth it\n>\n> The difference between mining and R&D is variance: if you're competing for\n> 50k blocks a year, you can get your actual returns to closely match your\n> expected return, especially if you pool with others so your probability\n> of success isn't miniscule -- for consensus dev, you can reasonably only\n> work on a couple of projects a year, so your median return is likely $0,\n> rather than a close match to your average/expected return.\n>\n> > We also have new ideas that only started coming up after Taproot\n> activation (TLUV and Taro for example), so there\u2019s also the unknown of what\n> we could have once it becomes clear that it\u2019s worth devoting mental energy\n> and financial resources towards research.\n>\n> TLUV was an offshoot of SCRIPTREPLACE which was public (though not\n> really published) since 2019.\n>\n> > One last wrinkle with regards to using countable metrics to determine a\n> feature\u2019s \u201cworth\u201d is that not all features are the same. Many of the use\n> cases that people are excited to use CTV for ([5], [6]) are very long term\n> in nature and targeted for long term store of value in contrast to medium\n> of exchange.\n>\n> I mean, if those use cases are so exciting, it really doesn't seem much\n> to ask to see them demoed live on the CTV signet that already exists?\n>\n> > You can build a CTV vault in signet, but you\u2019ll only really see a lot of\n> people using it when it\u2019s to store real value on a time scale measured in\n> decades not minutes or days\n>\n> On the other hand, if the value is really \"very long term\" and there's no\n> rush to implement these features and demo them ASAP, then it doesn't seem\n> like there should be a rush to adapt consensus to these use cases either.\n> Why not wait until someone does have time to finish sketching out the\n> use case so they can demo them in public?\n>\n> > To put another way and leave CTV out of it completely, what should an\n> outside, unbiased observer that doesn\u2019t spend much time on Twitter expect\n> to be able to see to evaluate the readiness or acceptability of ANYPREVOUT,\n> TLUV,\n>\n> For ANYPREVOUT, I would like to see a toy implementation of eltoo using\n> it, that can handle fees and layered transactions (or has a good argument\n> why layered transactions aren't necessary). It's going to take a while\n> even to update LN to taproot and PTLCs though, so eltoo doesn't seem like\n> it's on the immediate horizon. Besides eltoo, I don't think ANYPREVOUT\n> is an optimal design for covenants, so if that was the motivation and\n> not eltoo, maybe some other approach would be better.\n>\n> TLUV's design parameters don't really seem optimal (the mess with x-only\n> pubkeys, alternatives like OP_EVICT), so I think it's still on the\n> whiteboard.\n>\n> Cheers,\n> aj\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220421/4dc687ea/attachment-0001.html>"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2022-04-21T06:25:05",
                "message_text_only": "Missed one for part 2:\n\nShesek's social recovery wallet using CTV to enforce timelocks without\nexpiry, using his Minsc toolchain:\n\nhttps://twitter.com/shesek/status/1511619296367153153\nhttps://docs.google.com/presentation/d/1B59CdMIXW-wSW6CaLSgo7y4kvgrEwVgfY14IW2XV_MA/edit#slide=id.g1235f9ffb79_0_81\nhttps://github.com/shesek/plebfi2022-social-recovery\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n\n\nOn Thu, Apr 21, 2022 at 1:16 AM Jeremy Rubin <jeremy.l.rubin at gmail.com>\nwrote:\n\n> Probably merits a more thorough response, but, I wanted to respond on the\n> framework above:\n>\n>\n>  1a) can you make transactions using the new feature with bitcoin-cli,\n>      eg createrawtransaction etc? (*YES)*\n>\n> since ~Feb 2020, this has existed:\n> https://github.com/JeremyRubin/bitcoin/tree/checktemplateverify-feb1-workshop\n>\n> CTV hasn't changed so this code should work un-rebased. The transaction\n> outputs may need to be manually submitted to the network, but the covenant\n> is enforced. This covers congestion control and vaults.\n>\n>\n>  1b) can you make transactions using the new feature with some other\n>      library? *(YES)*\n> Sapio, Test Framework, also https://min.sc/nextc/ produced independently\n> by Shesek\n>\n>  1c) can you make transactions using the new feature with most common\n>      libraries? *(YES, kinda)*\n>\n> Yes, https://crates.io/crates/sapio-miniscript and\n> https://crates.io/crates/sapio-bitcoin have been maintained for about 1\n> year, and are now taproot compatible.\n>\n> Sapio's use of these libraries has even helped find bugs in the release\n> process of Taproot for rust-bitcoin.\n>\n> kinda: It's not _most_ common libraries, it's _a_ common library. it's\n> also not upstreamed, because the patches would not be accepted were it to\n> be.\n>\n>  2) has anyone done a usable prototype of the major use cases of the new\n>     feature?* (YES)*\n>\n> In addition to https://github.com/jamesob/simple-ctv-vault, there is also\n> https://github.com/kanzure/python-vaults, although it has an interesting\n> bug.\n>\n> There's also a myriad of uses shown in\n> https://github.com/sapio-lang/sapio/tree/master/sapio-contrib/src/contracts\n> and in https://github.com/sapio-lang/sapio/tree/master/plugin-example.\n> While these aren't quite \"usable\" as an end-to-end application, e.g.,\n> something you'd want to put real money on, they are a part of a *massive*\n> infrastructure investment in general purpose smart contract tooling for\n> covenant design with CTV. That CTV can be targeted with a compiler to\n> generate a wide variety of composable use cases *is* one of the use cases\n> for CTV, since it enables people to design many different types of thing\n> relatively easily. That is a feature of CTV! It's not just for one use case.\n>\n> The suite of Sapio apps are less \"production ready\" than they could be for\n> a few reasons:\n>\n> 1) I've been working hard at pushing the limits of what is possible & the\n> theory of it v.s. making it production ready\n> 2) I prioritized supporting Taproot v.s. legacy script, and much of the\n> taproot tooling isn't production ready\n> 3) Sapio is really ambitious undertaking, and it will take time to make it\n> production\n>\n> That said, https://rubin.io/bitcoin/2022/03/22/sapio-studio-btc-dev-mtg-6/\n> tutorial was completed by people who weren't me, and at the\n> pleb.fi/miami2022 one of the projects was able to use sapio congestion\n> control transactions as well, so it does \"work\". As it matures, we'll get a\n> number of implemented use cases people have been excited about like DLCs,\n> which are implemented here\n> https://github.com/sapio-lang/sapio/blob/master/sapio-contrib/src/contracts/derivatives/dlc.rs.\n> You can see the test case shows how to construct one.\n>\n> Why did I not focus on production grade? Well, production grade can always\n> happen later, and I don't think it takes as much imagination. But the main\n> critique I'd heard of CTV was that no one could see it being used for\n> anything but one or two use cases. So I built Sapio, in part, to show how\n> CTV could be used for an incredibly wide and diverse set of applications,\n> as opposed to the polish on them.\n>\n> If I knew the bar to surpass was to be polish, I probably could have taken\n> a less ambitious approach with Sapio and shown like 1-2 applications\n> working end-to-end. But because the main feedback I got was that CTV wasn't\n> powerful enough, I opted to build a very general framework for covenants\n> and demonstrate how CTV fits that.\n>\n>\n>\n>\n>\n> --\n> @JeremyRubin <https://twitter.com/JeremyRubin>\n>\n> On Thu, Apr 21, 2022 at 12:05 AM Anthony Towns via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> On Wed, Apr 20, 2022 at 05:13:19PM +0000, Buck O Perley via bitcoin-dev\n>> wrote:\n>> > All merits (or lack thereof depending on your view) of CTV aside, I\n>> find this topic around decision making both interesting and important.\n>> While I think I sympathize with the high level concern about making sure\n>> there are use cases, interest, and sufficient testing of a particular\n>> proposal before soft forking it into consensus code, it does feel like the\n>> attempt to attribute hard numbers in this way is somewhat arbitrary.\n>>\n>> Sure. I included the numbers for falsifiability mostly -- so people\n>> could easily check if my analysis was way off the mark.\n>>\n>> > For example, I think it could be reasonable to paint the list of\n>> examples you provided where CTV has been used on signet in a positive\n>> light. 317 CTV spends \u201cout in the wild\u201d before there\u2019s a known activation\n>> date is quite a lot\n>>\n>> Not really? Once you can make one transaction, it's trivial to make\n>> hundreds. It's more interesting to see if there's multiple wallets or\n>> similar that support it; or if one wallet has a particularly compelling\n>> use case.\n>>\n>> > (more than taproot had afaik).\n>>\n>> Yes; as I've said a few times now, I think we should have had more\n>> real life demos before locking taproot's activation in. I think that\n>> would have helped avoid bugs like Neutrino's [0] and made it easier for\n>> hardware wallets etc to have support for taproot as soon as it was active,\n>> without having to rush around adding library support at the last minute.\n>>\n>> [0]\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-November/019589.html\n>>\n>> Lightning's \"two independent implementations\" rule might be worth aspiring\n>> too, eg.\n>>\n>> > If we don\u2019t think it is enough, then what number of unique spends and\n>> use cases should we expect to see of a new proposal before it\u2019s been\n>> sufficiently tested?\n>>\n>> I don't really think that's the metric. I'd go for something more like:\n>>\n>>  1a) can you make transactions using the new feature with bitcoin-cli,\n>>      eg createrawtransaction etc?\n>>  1b) can you make transactions using the new feature with some other\n>>      library?\n>>  1c) can you make transactions using the new feature with most common\n>>      libraries?\n>>\n>>  2) has anyone done a usable prototype of the major use cases of the new\n>>     feature?\n>>\n>> I think the answers for CTV are:\n>>\n>>  1a) no\n>>  1b) yes, core's python test suite, sapio\n>>  1c) no\n>>  2) no\n>>\n>> Though presumably jamesob's simple ctv vault is close to being an answer\n>> for (2)?\n>>\n>> For taproot, we had,\n>>\n>>  1a) yes, with difficulty [1]\n>>  1b) yes, core's python test suite; kalle's btcdeb sometimes worked too\n>>  1c) no\n>>  2) optech's python notebook [2] from it's taproot workshops had demos for\n>>     musig and degrading multisig via multiple merkle paths, though I\n>>     think they were out of date with the taproot spec for a while\n>>\n>> [1]\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-October/019543.html\n>> [2] https://github.com/bitcoinops/taproot-workshop/\n>>\n>> To some extent those things are really proxies for:\n>>\n>>  3) how well do people actually understand the feature?\n>>\n>>  4) are we sure the tradeoffs being made in this implementation of the\n>>     feature, vs other implementations or other features actually make\n>>     sense?\n>>\n>>  5) how useful is the feature?\n>>\n>> I think we were pretty confident in the answers for those questions\n>> for taproot. At least personally, I'm still not super confident in\n>> the answers for CTV. In particular:\n>>\n>>  - is there really any benefit to doing it as a NOP vs a taproot-only\n>>    opcode like TXHASH? Theoretically, sure, that saves some bytes; but as\n>>    was pointed out on #bitcoin-wizards the other day, you can't express\n>>    those outputs as an address, which makes them not very interoperable,\n>>    and if they're not interoperable between, say, an exchange and its\n>>    users trying to do a withdraw, how useful is that really ever going\n>>    to be?\n>>\n>>  - the scriptSig commitments seems very kludgy; combining multiple\n>>    inputs likewise seems kludgy\n>>\n>> The continual push to rush activation of it certainly doesn't increase my\n>> confidence either. Personally, I suspect it's counterproductive; better\n>> to spend the time answering questions and improving the proposal, rather\n>> than spending time going around in circles about activating something\n>> people aren't (essentially) unanimously confident about.\n>>\n>> > In absence of the above, the risk of a constantly moving bar\n>>\n>> I'd argue the bar *should* be constantly moving, in the sense that we\n>> should keep raising it.\n>>\n>> > To use your meme, miners know precisely what they\u2019re mining for and\n>> what a metric of success looks like which makes the risk/costs of\n>> attempting the PoW worth it\n>>\n>> The difference between mining and R&D is variance: if you're competing for\n>> 50k blocks a year, you can get your actual returns to closely match your\n>> expected return, especially if you pool with others so your probability\n>> of success isn't miniscule -- for consensus dev, you can reasonably only\n>> work on a couple of projects a year, so your median return is likely $0,\n>> rather than a close match to your average/expected return.\n>>\n>> > We also have new ideas that only started coming up after Taproot\n>> activation (TLUV and Taro for example), so there\u2019s also the unknown of what\n>> we could have once it becomes clear that it\u2019s worth devoting mental energy\n>> and financial resources towards research.\n>>\n>> TLUV was an offshoot of SCRIPTREPLACE which was public (though not\n>> really published) since 2019.\n>>\n>> > One last wrinkle with regards to using countable metrics to determine a\n>> feature\u2019s \u201cworth\u201d is that not all features are the same. Many of the use\n>> cases that people are excited to use CTV for ([5], [6]) are very long term\n>> in nature and targeted for long term store of value in contrast to medium\n>> of exchange.\n>>\n>> I mean, if those use cases are so exciting, it really doesn't seem much\n>> to ask to see them demoed live on the CTV signet that already exists?\n>>\n>> > You can build a CTV vault in signet, but you\u2019ll only really see a lot\n>> of people using it when it\u2019s to store real value on a time scale measured\n>> in decades not minutes or days\n>>\n>> On the other hand, if the value is really \"very long term\" and there's no\n>> rush to implement these features and demo them ASAP, then it doesn't seem\n>> like there should be a rush to adapt consensus to these use cases either.\n>> Why not wait until someone does have time to finish sketching out the\n>> use case so they can demo them in public?\n>>\n>> > To put another way and leave CTV out of it completely, what should an\n>> outside, unbiased observer that doesn\u2019t spend much time on Twitter expect\n>> to be able to see to evaluate the readiness or acceptability of ANYPREVOUT,\n>> TLUV,\n>>\n>> For ANYPREVOUT, I would like to see a toy implementation of eltoo using\n>> it, that can handle fees and layered transactions (or has a good argument\n>> why layered transactions aren't necessary). It's going to take a while\n>> even to update LN to taproot and PTLCs though, so eltoo doesn't seem like\n>> it's on the immediate horizon. Besides eltoo, I don't think ANYPREVOUT\n>> is an optimal design for covenants, so if that was the motivation and\n>> not eltoo, maybe some other approach would be better.\n>>\n>> TLUV's design parameters don't really seem optimal (the mess with x-only\n>> pubkeys, alternatives like OP_EVICT), so I think it's still on the\n>> whiteboard.\n>>\n>> Cheers,\n>> aj\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220421/a4e08892/attachment-0001.html>"
            },
            {
                "author": "Russell O'Connor",
                "date": "2022-04-21T13:22:21",
                "message_text_only": "On Thu, Apr 21, 2022 at 1:04 AM Anthony Towns via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n>  - is there really any benefit to doing it as a NOP vs a taproot-only\n>    opcode like TXHASH? Theoretically, sure, that saves some bytes; but as\n>    was pointed out on #bitcoin-wizards the other day, you can't express\n>    those outputs as an address, which makes them not very interoperable,\n>    and if they're not interoperable between, say, an exchange and its\n>    users trying to do a withdraw, how useful is that really ever going\n>    to be?\n>\n\nFWIW, this is also approximately where my sticking point lies with BIP-119.\n\nOverall I've come around to the idea of something like CTV.  The ability to\nconstruct \"smart contracts\" that commit to *multiple* possible payout\nschemes based on some conditions seems like a very useful construct, and\nthere have been several examples of  schemes proposed that use this feature.\n\nHowever, I'm still skeptical of the bare-CTV part of BIP-119 (and I'm told\nthat bare-CTV hasn't even appeared on the CTV signet).  Unlike the general\nsmart-contracting case, bare-CTV does not have any branches.  All it can do\nis commit to a subsequent transaction's outputs.  At first glance this\nappears to be a waste because, for less bandwidth, that transaction could\njust realize those outputs immediately, so why would anyone want to delay\nthe inevitable?\n\nOne reason might be that you want to commit to the output early during a\nhigh-fee time, and then complete the transaction later during a low-fee\ntime.  While there are fee-rate situations where this could result in lower\nfees than committing to the outputs all at once, it would be even cheaper\nstill to just wait to do the payout at the low-fee time.  I'm struggling to\nunderstand the advantages of the advanced commitment, along with all the\noverhead that entails.  Doesn't it just cause more blockspace to be used\noverall?\n\nThere are some other proposed use cases for bare-CTV.  A bare-CTV can be\nused to delay a \"trigger\"-transaction.  Some contracts, such as vaults, use\na relative-locktime as part of their construction and it could make sense\nto make an output commitment but not realize those outputs yet until you\nare ready to start your relative-time lock clock.  But bare-CTV doesn't\nsupport any co-signing ability here, so you are relying entirely on keeping\nthe transaction data secret to prevent a third-party from triggering your\nrelative-lock clock.  More specifically for a vault scheme, since\nbare-CTV's are currently unaddressable, and AFAIK, there is no address\nformat proposal yet, it is impossible to receive funds directly into a\nvault.  You must shuffle received funds into your vault yourself, which\nseems very likely to negate the cost savings of using bare-CTV in the first\nplace (please correct me if I'm wrong).  Better to receive funds directly\ninto a taproot-CTV vault, which has an address, and while you are at it,\nyou could place the cold-key as the taproot key to save even more when\nusing the cold-key to move vault funds.\n\nThere might be even more exotic use cases of bare-CTV.  For example you\ncould commit to a transaction that has a second input that doesn't yet\nexist in the UTXO set in an attempt to coax it into existence. I don't know\nif there have been any proposals to take advantage of this.\n\nWith that said, everything that bare-CTV can do, can also be done by\ntapscript-CTV; so it is just a matter of cost.  I'm struggling to\nunderstand where this cost savings is and how much those savings are going\nto be given that bare-CTV is unaddressable and seems to ultimately occupy\nmore-blockspace than if the outputs were directly committed to.\n\nI also believe the bare-CTV question is material, because if bare-CTV were\nnot part of the spec, then I'd be advocating for using an OP_SUCCESS code\nfrom tapscript instead, and either use push-style semantics for CTV, which\nwould be composed with EQUAL_VERIFY to mimic the currently proposed\nverification style-semantics, or a hybrid push-or-verify semantics that\nwould either push or verify depending on the size of the input.  (And I\nstill think a more general TXHASH would be even better, though if I cannot\nconvince aj then perhaps I'm wrong.)\n\nI'm not saying bare-CTV is necessarily a bad idea.  I'm just struggling\nwith its justification.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220421/7dabd75a/attachment-0001.html>"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2022-04-21T15:05:20",
                "message_text_only": "Hi Russell,\n\nThank you for your feedback here.\n\n\n\n> However, I'm still skeptical of the bare-CTV part of BIP-119 (and I'm told\n> that bare-CTV hasn't even appeared on the CTV signet).  Unlike the general\n> smart-contracting case, bare-CTV does not have any branches.  All it can do\n> is commit to a subsequent transaction's outputs.  At first glance this\n> appears to be a waste because, for less bandwidth, that transaction could\n> just realize those outputs immediately, so why would anyone want to delay\n> the inevitable?\n>\n\nI can probably make some show up sometime soon. Note that James' vault uses\none at the top-level https://github.com/jamesob/simple-ctv-vault, but I\nthink the second use of it (since it's not segwit wrapped) wouldn't be\nbroadcastable since it's nonstandard.\n\n\n\n\n>\n> One reason might be that you want to commit to the output early during a\n> high-fee time, and then complete the transaction later during a low-fee\n> time.  While there are fee-rate situations where this could result in lower\n> fees than committing to the outputs all at once, it would be even cheaper\n> still to just wait to do the payout at the low-fee time.  I'm struggling to\n> understand the advantages of the advanced commitment, along with all the\n> overhead that entails.  Doesn't it just cause more blockspace to be used\n> overall?\n>\n\nOne case where you actually use less space is if you have a few different\nsets of customers at N different fee priority level. Then, you might need\nto have N independent batches, or risk overpaying against the customer's\npriority level. Imagine I have 100 tier 1 customers and 1000 tier 2\ncustomers. If I batcher tier 1 with tier 2, to provide tier 1 guarantees\nI'd need to pay tier 1 rate for 10x the customers. With CTV, I can combine\nmy batch into a root and N batch outputs. This eliminates the need for\ninputs, signatures, change outputs, etc per batch, and can be slightly\nsmaller. Since the marginal benefit on that is still pretty small, having\nbare CTV improves the margin of byte wise saving.\n\nI give this as an example where CTV uses less space, it is detailed more\nhere: https://utxos.org/analysis/batching_sim/. This benefit might be\nmarginal and absurd, given these are already big transactions, but it may\n_also_ be absurd that feerates only ever go up and congestion control is\nnot valuable.\n\nAnother example where this arises is where you have a transaction set you\nneed to pay top-of-mempool rate for the soonest confirmation you can get.\nCTV has a decongesting effect, because your top-of-mempool transaction is\nsmall, which doesn't trigger as much rivalrous behavior with other\ntransactors. Concretely, the current policy max txn size is 100kb, or 10%\nof a block. If you bump out of next block window 10% of the mempool, then\nif those transactors care to maintain their positioning, they will need to\nput themselves into a higher percentile with e.g. RBF or CPFP. Whereas if\nyou put in a transaction that is just 100 bytes, you only bump out 100\nbytes of rivals (0.01%), not 10%.\n\nLastly, perhaps a more realistic scenario, is where I am batching to 100\ncustomers who all wish to do something else after I pay them. E.g., open a\nlightning channel. Being able to use CTV noninteractive channels cuts\nthrough the extra hop transaction (unless dual funded channels, unless the\nchannels are opened between two customers, then they can be dual funded\nagain). So using CTV here also saves in net blockspace (although, note,\nthis is sort of orthogonal to using CTV over the batch itself, just a good\nexample for the related question of 'doesn't ctv generally use more\nblockspace').\n\n\n> There are some other proposed use cases for bare-CTV.  A bare-CTV can be\n> used to delay a \"trigger\"-transaction.  Some contracts, such as vaults, use\n> a relative-locktime as part of their construction and it could make sense\n> to make an output commitment but not realize those outputs yet until you\n> are ready to start your relative-time lock clock.  But bare-CTV doesn't\n> support any co-signing ability here, so you are relying entirely on keeping\n> the transaction data secret to prevent a third-party from triggering your\n> relative-lock clock.  More specifically for a vault scheme, since\n> bare-CTV's are currently unaddressable, and AFAIK, there is no address\n> format proposal yet, it is impossible to receive funds directly into a\n> vault.  You must shuffle received funds into your vault yourself, which\n> seems very likely to negate the cost savings of using bare-CTV in the first\n> place (please correct me if I'm wrong).  Better to receive funds directly\n> into a taproot-CTV vault, which has an address, and while you are at it,\n> you could place the cold-key as the taproot key to save even more when\n> using the cold-key to move vault funds.\n>\n>\nThis is not quite true, you can receive funds into a bare-CTV from your\nvault software, and you can send into one from your vault software. What\ndoesn't work is exporting or creating an address for that. As a reminder\nfor those following along at home, not all standard output types have\naddresses, even today. For example, OP_RETURN.\n\nHowever, this is a standarness question. If the market _wanted_ such an\naddress, one could be adopted without requiring consensus processes.\n\nGenerally, the vault designs I work on use Sapio and therefore also use\nTaproot since I have not added support for non-taproot scripts / removed\nsupport for witness v0. I will eventually add these back, but it's a\nmarginal fee savings optimization and I'm focused primarily on feature\ncompleteness.\n\n\n> There might be even more exotic use cases of bare-CTV.  For example you\n> could commit to a transaction that has a second input that doesn't yet\n> exist in the UTXO set in an attempt to coax it into existence. I don't know\n> if there have been any proposals to take advantage of this.\n>\n\nThere are, but it's not specific to how bare ctv works, it should work from\nany CTV context.\n\n>\n> With that said, everything that bare-CTV can do, can also be done by\n> tapscript-CTV; so it is just a matter of cost.  I'm struggling to\n> understand where this cost savings is and how much those savings are going\n> to be given that bare-CTV is unaddressable and seems to ultimately occupy\n> more-blockspace than if the outputs were directly committed to.\n>\n> I also believe the bare-CTV question is material, because if bare-CTV were\n> not part of the spec, then I'd be advocating for using an OP_SUCCESS code\n> from tapscript instead, and either use push-style semantics for CTV, which\n> would be composed with EQUAL_VERIFY to mimic the currently proposed\n> verification style-semantics, or a hybrid push-or-verify semantics that\n> would either push or verify depending on the size of the input.  (And I\n> still think a more general TXHASH would be even better, though if I cannot\n> convince aj then perhaps I'm wrong.)\n>\n\nEven if we got rid of bare ctv, segwit v0 CTV would still exist, so we\ncouldn't use OP_SUCCESSx there either. segwitv0 might be desired if someone\nhas e.g. hardware modules or MPC Threshold Crypto that only support ECDSA\nsignatures, but still want CTV.\n\n>\n> I'm not saying bare-CTV is necessarily a bad idea.  I'm just struggling\n> with its justification.\n>\n\n\nFair. I wouldn't have a big problem removing it, if it were clear that were\nit to become desired, we could add it back. I think the case for CTV in\nSegwitv0 is stronger, which has the same implication for a PUSH variant of\nCTV.\n\n\nThanks again,\n\nJeremy\n\n\n\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220421/c88f5d72/attachment.html>"
            },
            {
                "author": "Anthony Towns",
                "date": "2022-04-22T00:58:04",
                "message_text_only": "On Thu, Apr 21, 2022 at 10:05:20AM -0500, Jeremy Rubin via bitcoin-dev wrote:\n> I can probably make some show up sometime soon. Note that James' vault uses\n> one at the top-level https://github.com/jamesob/simple-ctv-vault, but I\n> think the second use of it (since it's not segwit wrapped) wouldn't be\n> broadcastable since it's nonstandard.\n\nThe whole point of testing is so that bugs like \"wouldn't be broadcastable\nsince it's nonstandard\" get fixed. If these things are still in the\n\"interesting thought experiment\" stage, but nobody but Jeremy is\ninterested enough to start making them consistent with the proposed\nconsensus and policy rules, it seems very premature to be changing\nconsensus or policy rules.\n\n> One case where you actually use less space is if you have a few different\n> sets of customers at N different fee priority level. Then, you might need\n> to have N independent batches, or risk overpaying against the customer's\n> priority level. Imagine I have 100 tier 1 customers and 1000 tier 2\n> customers. If I batcher tier 1 with tier 2, to provide tier 1 guarantees\n> I'd need to pay tier 1 rate for 10x the customers. With CTV, I can combine\n> my batch into a root and N batch outputs. This eliminates the need for\n> inputs, signatures, change outputs, etc per batch, and can be slightly\n> smaller. Since the marginal benefit on that is still pretty small, having\n> bare CTV improves the margin of byte wise saving.\n\nBare CTV only saves bytes when *spending* -- but this is when you're\ncreating the 1100 outputs, so an extra 34 or 67 bytes of witness data\nseems fairly immaterial (0.05% extra vbytes?). It doesn't make the small\ncommitment tx any smaller.\n\nie, scriptPubKey looks like:\n - bare ctv: [push][32 bytes][op_nop4]\n - p2wsh: [op_0][push][32 bytes]\n - p2tr: [op_1][push][32 bytes]\n\nwhile witness data looks like:\n - bare ctv: empty scriptSig, no witness\n - pw2sh: empty scriptSig, witness = \"[push][32 bytes][op_nop4]\"\n - p2tr: empty scriptSig, witness = 33B control block,\n         \"[push][32 bytes][op_nop4]\"\n\nYou might get more a benefit from bare ctv if you don't pay all 1100\noutputs in a single tx when fees go lower; but if so, you're also wasting\nquite a bit more block space in that case due to the intermediate\ntransactions you're introducing, which makes it seem unlikely that\nyou care about the extra 9 or 17 vbytes bare CTV would save you per\nintermediate tx...\n\nI admit that I am inclined towards micro-optimising things to save\nthose bytes if it's easy, which does incline me towards bare CTV; but\nthe closest thing we have to real user data suggests that nobody's going\nto benefit from that possibility anyway.\n\n> Even if we got rid of bare ctv, segwit v0 CTV would still exist, so we\n> couldn't use OP_SUCCESSx there either. segwitv0 might be desired if someone\n> has e.g. hardware modules or MPC Threshold Crypto that only support ECDSA\n> signatures, but still want CTV.\n\nIf you desire new features, then you might have to upgrade old hardware\nthat can't support them.\n\nOtherwise that would be an argument to never use OP_SUCCESSx: someone\nmight want to use whatever new feature we might imagine on hardware that\nonly supports ECDSA signatures.\n\nCheers,\naj"
            },
            {
                "author": "Nadav Ivgi",
                "date": "2022-04-22T01:10:25",
                "message_text_only": "> nobody's going to benefit from that possibility anyway.\n\n James O'Beirne's simple-ctv-vault appears to be using bare CTV outputs:\n\nhttps://github.com/jamesob/simple-ctv-vault/blob/7dd6c4ca25debb2140cdefb79b302c65d1b24937/main.py#L217-L218\nhttps://github.com/jamesob/simple-ctv-vault/blob/7dd6c4ca25debb2140cdefb79b302c65d1b24937/main.py#L324-L325\n\nI guess this suggests that it was not tested on signet?\n\nOn Fri, Apr 22, 2022 at 3:58 AM Anthony Towns via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Thu, Apr 21, 2022 at 10:05:20AM -0500, Jeremy Rubin via bitcoin-dev\n> wrote:\n> > I can probably make some show up sometime soon. Note that James' vault\n> uses\n> > one at the top-level https://github.com/jamesob/simple-ctv-vault, but I\n> > think the second use of it (since it's not segwit wrapped) wouldn't be\n> > broadcastable since it's nonstandard.\n>\n> The whole point of testing is so that bugs like \"wouldn't be broadcastable\n> since it's nonstandard\" get fixed. If these things are still in the\n> \"interesting thought experiment\" stage, but nobody but Jeremy is\n> interested enough to start making them consistent with the proposed\n> consensus and policy rules, it seems very premature to be changing\n> consensus or policy rules.\n>\n> > One case where you actually use less space is if you have a few different\n> > sets of customers at N different fee priority level. Then, you might need\n> > to have N independent batches, or risk overpaying against the customer's\n> > priority level. Imagine I have 100 tier 1 customers and 1000 tier 2\n> > customers. If I batcher tier 1 with tier 2, to provide tier 1 guarantees\n> > I'd need to pay tier 1 rate for 10x the customers. With CTV, I can\n> combine\n> > my batch into a root and N batch outputs. This eliminates the need for\n> > inputs, signatures, change outputs, etc per batch, and can be slightly\n> > smaller. Since the marginal benefit on that is still pretty small, having\n> > bare CTV improves the margin of byte wise saving.\n>\n> Bare CTV only saves bytes when *spending* -- but this is when you're\n> creating the 1100 outputs, so an extra 34 or 67 bytes of witness data\n> seems fairly immaterial (0.05% extra vbytes?). It doesn't make the small\n> commitment tx any smaller.\n>\n> ie, scriptPubKey looks like:\n>  - bare ctv: [push][32 bytes][op_nop4]\n>  - p2wsh: [op_0][push][32 bytes]\n>  - p2tr: [op_1][push][32 bytes]\n>\n> while witness data looks like:\n>  - bare ctv: empty scriptSig, no witness\n>  - pw2sh: empty scriptSig, witness = \"[push][32 bytes][op_nop4]\"\n>  - p2tr: empty scriptSig, witness = 33B control block,\n>          \"[push][32 bytes][op_nop4]\"\n>\n> You might get more a benefit from bare ctv if you don't pay all 1100\n> outputs in a single tx when fees go lower; but if so, you're also wasting\n> quite a bit more block space in that case due to the intermediate\n> transactions you're introducing, which makes it seem unlikely that\n> you care about the extra 9 or 17 vbytes bare CTV would save you per\n> intermediate tx...\n>\n> I admit that I am inclined towards micro-optimising things to save\n> those bytes if it's easy, which does incline me towards bare CTV; but\n> the closest thing we have to real user data suggests that nobody's going\n> to benefit from that possibility anyway.\n>\n> > Even if we got rid of bare ctv, segwit v0 CTV would still exist, so we\n> > couldn't use OP_SUCCESSx there either. segwitv0 might be desired if\n> someone\n> > has e.g. hardware modules or MPC Threshold Crypto that only support ECDSA\n> > signatures, but still want CTV.\n>\n> If you desire new features, then you might have to upgrade old hardware\n> that can't support them.\n>\n> Otherwise that would be an argument to never use OP_SUCCESSx: someone\n> might want to use whatever new feature we might imagine on hardware that\n> only supports ECDSA signatures.\n>\n> Cheers,\n> aj\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220422/8c2e8911/attachment-0001.html>"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2022-04-22T05:30:08",
                "message_text_only": "small note, it's a savings of 34 or 67 bytes *per histogram bucket* to have\nbare CTV v.s. v0/v1, so the interesting thing is that by making it cheaper\nbytes wise it might enable one to have, for the same byte budget, more\nbuckets, which would make the feerate savings for the user even greater.\nE.g., assume user priorities are exponential, like:\n\n[10, 12, 14, 17, 20, 24, 29, 35, 42, 51]\n\nsuppose binning into 4 groups yields:\n\n[10, 12, 14], [17, 20, 24], [29, 35, 42], [51]\nthen the feerate of each group summarized by the max times bin count is\n[14 x 3], [24 x 3], [42 x 3], [51 x 1] =\n\n291\n\nsuppose binning into 5 groups yields:\n\n[10, 12], [14, 17], [20, 24], [29, 35], [42, 51]\n[12 x 2] [17 x 2] [24 x 2] [35 x 2] [51x2] =\n\n278\n\nso it's clear that bins of 5 yields a discount, and the marginal cost\ndifference of 5 bins vs 4 can be more than \"paid for\" by switching to bare\ninstead of segwit v0.\n\nE.g., 4 segwits = 4*34 additional\n5 bares = 1 extra output (34 bytes) + 1 extra input (41 bytes) + extra tx\nbody (~10 bytes?) = ~2.5 x 34 additional weight\n\nso while in this particular case, the savings mean that 4 would likely be a\nbetter binning than 5 even if bare were available, if you imagine the\ngroups scaled to more elements under the same distribution would have\neventually the cost (291-278)*S > 2.5*34  make it worth switching the\nbinning to 5 bins earlier than with would if the bins were more expensive.\n\nKinda hard to perfectly characterize this type of knock-on effect, but it's\nalso cool to think about how cheapness of the nodes in the graph changes\nthe optimal graph, which means you can't just do a simple comparison of how\nmuch is a bigger than b.\n\n\n\n\n\nOn Thu, Apr 21, 2022 at 7:58 PM Anthony Towns via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Thu, Apr 21, 2022 at 10:05:20AM -0500, Jeremy Rubin via bitcoin-dev\n> wrote:\n> > I can probably make some show up sometime soon. Note that James' vault\n> uses\n> > one at the top-level https://github.com/jamesob/simple-ctv-vault, but I\n> > think the second use of it (since it's not segwit wrapped) wouldn't be\n> > broadcastable since it's nonstandard.\n>\n> The whole point of testing is so that bugs like \"wouldn't be broadcastable\n> since it's nonstandard\" get fixed. If these things are still in the\n> \"interesting thought experiment\" stage, but nobody but Jeremy is\n> interested enough to start making them consistent with the proposed\n> consensus and policy rules, it seems very premature to be changing\n> consensus or policy rules.\n>\n> > One case where you actually use less space is if you have a few different\n> > sets of customers at N different fee priority level. Then, you might need\n> > to have N independent batches, or risk overpaying against the customer's\n> > priority level. Imagine I have 100 tier 1 customers and 1000 tier 2\n> > customers. If I batcher tier 1 with tier 2, to provide tier 1 guarantees\n> > I'd need to pay tier 1 rate for 10x the customers. With CTV, I can\n> combine\n> > my batch into a root and N batch outputs. This eliminates the need for\n> > inputs, signatures, change outputs, etc per batch, and can be slightly\n> > smaller. Since the marginal benefit on that is still pretty small, having\n> > bare CTV improves the margin of byte wise saving.\n>\n> Bare CTV only saves bytes when *spending* -- but this is when you're\n> creating the 1100 outputs, so an extra 34 or 67 bytes of witness data\n> seems fairly immaterial (0.05% extra vbytes?). It doesn't make the small\n> commitment tx any smaller.\n>\n> ie, scriptPubKey looks like:\n>  - bare ctv: [push][32 bytes][op_nop4]\n>  - p2wsh: [op_0][push][32 bytes]\n>  - p2tr: [op_1][push][32 bytes]\n>\n> while witness data looks like:\n>  - bare ctv: empty scriptSig, no witness\n>  - pw2sh: empty scriptSig, witness = \"[push][32 bytes][op_nop4]\"\n>  - p2tr: empty scriptSig, witness = 33B control block,\n>          \"[push][32 bytes][op_nop4]\"\n>\n> You might get more a benefit from bare ctv if you don't pay all 1100\n> outputs in a single tx when fees go lower; but if so, you're also wasting\n> quite a bit more block space in that case due to the intermediate\n> transactions you're introducing, which makes it seem unlikely that\n> you care about the extra 9 or 17 vbytes bare CTV would save you per\n> intermediate tx...\n>\n> I admit that I am inclined towards micro-optimising things to save\n> those bytes if it's easy, which does incline me towards bare CTV; but\n> the closest thing we have to real user data suggests that nobody's going\n> to benefit from that possibility anyway.\n>\n> > Even if we got rid of bare ctv, segwit v0 CTV would still exist, so we\n> > couldn't use OP_SUCCESSx there either. segwitv0 might be desired if\n> someone\n> > has e.g. hardware modules or MPC Threshold Crypto that only support ECDSA\n> > signatures, but still want CTV.\n>\n> If you desire new features, then you might have to upgrade old hardware\n> that can't support them.\n>\n> Otherwise that would be an argument to never use OP_SUCCESSx: someone\n> might want to use whatever new feature we might imagine on hardware that\n> only supports ECDSA signatures.\n>\n> Cheers,\n> aj\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220422/7651ea7a/attachment-0001.html>"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2022-04-28T12:23:32",
                "message_text_only": "Sorry I didn't see this snippet fully earlier, but I caught it in Optech\n(cc harding)\n\n\n> *(I didn't think DROP/1 is necessary here? Doesn't leaving the 32 byte*\n> *hash on the stack evaluate as true? I guess that means everyone's using**sapio to\n> construct the txs?)*\n\n\nNot quite: it would mean that everyone is using *sapio-miniscript**, *which\nmay or may not be in Sapio, or they are using a different miniscript\nimplementation that is compatible with sapio-miniscript's CTV fragment\n(which is sort of the most obvious way to implement it), or they are hand\nwriting the script and are still using that fragment.\n\nE.g., you can see\nhttps://min.sc/nextc/#gist=001cf1fcb0e24ca9f3614c4db9bfe57d:2 or\nhttps://min.sc/nextc/#gist=001cf1fcb0e24ca9f3614c4db9bfe57d:0 both of these\nmight \"look\" like sapio, but are built using minsc.\n\nThe underlying point might still stand, but using miniscript seems\ndifferent than using Sapio.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220428/04d3e939/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "CTV Signet Parameters",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Buck O Perley",
                "Anthony Towns",
                "Nadav Ivgi",
                "Russell O'Connor",
                "Jeremy Rubin"
            ],
            "messages_count": 13,
            "total_messages_chars_count": 77524
        }
    },
    {
        "title": "[bitcoin-dev] Automatically reverting (\"transitory\") soft forks, e.g. for CTV",
        "thread_messages": [
            {
                "author": "David A. Harding",
                "date": "2022-04-21T01:04:53",
                "message_text_only": "Hi all,\n\nThe main criticisms I'm aware of against CTV seem to be along the \nfollowing lines:\n\n1. Usage, either:\n   a. It won't receive significant real-world usage, or\n   b. It will be used but we'll end up using something better later\n2. An unused CTV will need to be supported forever, creating extra \nmaintenance\n    burden, increasing security surface, and making it harder to evaluate \nlater\n    consensus change proposals due to their interactions with CTV\n\nCould those concerns be mitigated by making CTV an automatically \nreverting\nconsensus change with an option to renew?  E.g., redefining OP_NOP4 as \nOP_CTV\nfor five years from BIP119's activation date and then reverting to \nOP_NOP4.\nIf, prior to the end of those five years, a second soft fork was \nactivated, it\ncould continue enforcing the CTV rules either for another five years or\npermanently.\n\nThis would be similar in nature to the soft fork described in BIP50 \nwhere the\nmaximum block size was temporarily reduced to address the BDB locks \nissue and\nthen allowed to return to its original value.  In Script terms, any use \nof\nOP_CTV would effectively be:\n\n     OP_IF\n       <arguments> OP_CTV\n     OP_ELSE\n       <5 years after activation> OP_CLTV\n     OP_ENDIF\n\nAs long as we are absolutely convinced CTV will have no negative effects \non the\nholders or receivers of non-CTV coins, I think an automatically \nreverting soft\nfork gives us some ability to experiment with new features without \ncommitting\nourselves to live with them forever.\n\nThe main downsides I can see are:\n\n1. It creates a big footgun.  Anyone who uses CTV without adequately \npreparing for\n    the reversion could easily lose their money.\n\n2. Miners would be incentivized to censor spends of the reverting\n    opcode near its reversion date.  E.g., if Alice receives 100 bitcoins \nto a\n    script secured only by OP_CTV and attempts to spend them the day \nbefore it\n    becomes OP_NOP4, miners might prefer to skip confirming that \ntransaction even\n    if it pays a high feerate in favor of spending her 100 bitcoins to \nthemselves\n    the next day after reversion.\n\n    The degree to which this is an issue will depend on the diversity of\n    hashrate and the willingness of any large percentage of hashrate to\n    deliberately reorg the chain to remove confirmed transactions.  This \ncould be\n    mitigated by having OP_CTV change to OP_RETURN, destroying any \nunspent CTV-only\n    coins so that any censoring miners only benefited from the (hopefully \nslight)\n    decrease in bitcoin currency supply.\n\n3. A bias towards keeping the change.  Even if it turned out very few \npeople\n    really used CTV, I think there would be a bias at the end of five \nyears towards\n    \"why not just keep it\".\n\n4. The drama doesn't end.  Activating CTV now, or decisively not \nactivating it,\n    may bring to an end our frequent discussions about it (though I \nwouldn't\n    count on that).  An automatically reverting soft fork would probably\n    guarantee we'll have further consensus-level discussions about CTV in \nthe\n    future.\n\nThanks for reading.  I'm curious to hear y'alls thoughts,\n\n-Dave"
            },
            {
                "author": "Luke Dashjr",
                "date": "2022-04-21T02:05:47",
                "message_text_only": "1-2 can be mitigated to some extent by encoding an expiry height in the \naddress (and pubkey?), and honouring CTV for UTXOs during the active period. \nIt might take longer to remove CTV code post-deactivation, but that's simply \na tradeoff to consider.\n\nThe bigger issue with CTV is the miner-decision route. Either CTV has \ncommunity support, or it doesn't. If it does, miners shouldn't have the \nability to veto it. If it doesn't, miners shouldn't have the ability to \nactivate it (making it a 51% attack more than a softfork).\n\n\nOn Thursday 21 April 2022 01:04:53 David A. Harding via bitcoin-dev wrote:\n> Hi all,\n>\n> The main criticisms I'm aware of against CTV seem to be along the\n> following lines:\n>\n> 1. Usage, either:\n>    a. It won't receive significant real-world usage, or\n>    b. It will be used but we'll end up using something better later\n> 2. An unused CTV will need to be supported forever, creating extra\n> maintenance\n>     burden, increasing security surface, and making it harder to evaluate\n> later\n>     consensus change proposals due to their interactions with CTV\n>\n> Could those concerns be mitigated by making CTV an automatically\n> reverting\n> consensus change with an option to renew?  E.g., redefining OP_NOP4 as\n> OP_CTV\n> for five years from BIP119's activation date and then reverting to\n> OP_NOP4.\n> If, prior to the end of those five years, a second soft fork was\n> activated, it\n> could continue enforcing the CTV rules either for another five years or\n> permanently.\n>\n> This would be similar in nature to the soft fork described in BIP50\n> where the\n> maximum block size was temporarily reduced to address the BDB locks\n> issue and\n> then allowed to return to its original value.  In Script terms, any use\n> of\n> OP_CTV would effectively be:\n>\n>      OP_IF\n>        <arguments> OP_CTV\n>      OP_ELSE\n>        <5 years after activation> OP_CLTV\n>      OP_ENDIF\n>\n> As long as we are absolutely convinced CTV will have no negative effects\n> on the\n> holders or receivers of non-CTV coins, I think an automatically\n> reverting soft\n> fork gives us some ability to experiment with new features without\n> committing\n> ourselves to live with them forever.\n>\n> The main downsides I can see are:\n>\n> 1. It creates a big footgun.  Anyone who uses CTV without adequately\n> preparing for\n>     the reversion could easily lose their money.\n>\n> 2. Miners would be incentivized to censor spends of the reverting\n>     opcode near its reversion date.  E.g., if Alice receives 100 bitcoins\n> to a\n>     script secured only by OP_CTV and attempts to spend them the day\n> before it\n>     becomes OP_NOP4, miners might prefer to skip confirming that\n> transaction even\n>     if it pays a high feerate in favor of spending her 100 bitcoins to\n> themselves\n>     the next day after reversion.\n>\n>     The degree to which this is an issue will depend on the diversity of\n>     hashrate and the willingness of any large percentage of hashrate to\n>     deliberately reorg the chain to remove confirmed transactions.  This\n> could be\n>     mitigated by having OP_CTV change to OP_RETURN, destroying any\n> unspent CTV-only\n>     coins so that any censoring miners only benefited from the (hopefully\n> slight)\n>     decrease in bitcoin currency supply.\n>\n> 3. A bias towards keeping the change.  Even if it turned out very few\n> people\n>     really used CTV, I think there would be a bias at the end of five\n> years towards\n>     \"why not just keep it\".\n>\n> 4. The drama doesn't end.  Activating CTV now, or decisively not\n> activating it,\n>     may bring to an end our frequent discussions about it (though I\n> wouldn't\n>     count on that).  An automatically reverting soft fork would probably\n>     guarantee we'll have further consensus-level discussions about CTV in\n> the\n>     future.\n>\n> Thanks for reading.  I'm curious to hear y'alls thoughts,\n>\n> -Dave\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "alicexbt",
                "date": "2022-04-21T03:10:02",
                "message_text_only": "@DavidHarding\n\nInteresting proposal to revert consensus changes. Is it possible to do this for soft forks that are already activated?\n\nExample: Some users are not okay with witness discount in segwit transactions\n\nhttps://nitter.net/giacomozucco/status/1513614380121927682\n\n@LukeDashjr\n\n> The bigger issue with CTV is the miner-decision route. Either CTV has\n> community support, or it doesn't. If it does, miners shouldn't have the\n> ability to veto it. If it doesn't, miners shouldn't have the ability to\n> activate it (making it a 51% attack more than a softfork).\n\nAgree. UASF client compatible with this speedy trial release for BIP 119 could be a better way to activate CTV. Users can decide if they prefer mining pools to make the decision for them or they want to enforce it irrespective of how many mining pools signal for it. I haven't seen any arguments against CTV from mining pools yet.\n\nSent with [ProtonMail](https://protonmail.com/) secure email.\n------- Original Message -------\nOn Thursday, April 21st, 2022 at 7:35 AM, Luke Dashjr via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n\n> 1-2 can be mitigated to some extent by encoding an expiry height in the\n> address (and pubkey?), and honouring CTV for UTXOs during the active period.\n> It might take longer to remove CTV code post-deactivation, but that's simply\n> a tradeoff to consider.\n>\n> The bigger issue with CTV is the miner-decision route. Either CTV has\n> community support, or it doesn't. If it does, miners shouldn't have the\n> ability to veto it. If it doesn't, miners shouldn't have the ability to\n> activate it (making it a 51% attack more than a softfork).\n>\n> On Thursday 21 April 2022 01:04:53 David A. Harding via bitcoin-dev wrote:\n>\n>> Hi all,\n>>\n>> The main criticisms I'm aware of against CTV seem to be along the\n>> following lines:\n>>\n>> 1. Usage, either:\n>> a. It won't receive significant real-world usage, or\n>> b. It will be used but we'll end up using something better later\n>> 2. An unused CTV will need to be supported forever, creating extra\n>> maintenance\n>> burden, increasing security surface, and making it harder to evaluate\n>> later\n>> consensus change proposals due to their interactions with CTV\n>>\n>> Could those concerns be mitigated by making CTV an automatically\n>> reverting\n>> consensus change with an option to renew? E.g., redefining OP_NOP4 as\n>> OP_CTV\n>> for five years from BIP119's activation date and then reverting to\n>> OP_NOP4.\n>> If, prior to the end of those five years, a second soft fork was\n>> activated, it\n>> could continue enforcing the CTV rules either for another five years or\n>> permanently.\n>>\n>> This would be similar in nature to the soft fork described in BIP50\n>> where the\n>> maximum block size was temporarily reduced to address the BDB locks\n>> issue and\n>> then allowed to return to its original value. In Script terms, any use\n>> of\n>> OP_CTV would effectively be:\n>>\n>> OP_IF\n>> <arguments> OP_CTV\n>> OP_ELSE\n>> <5 years after activation> OP_CLTV\n>> OP_ENDIF\n>>\n>> As long as we are absolutely convinced CTV will have no negative effects\n>> on the\n>> holders or receivers of non-CTV coins, I think an automatically\n>> reverting soft\n>> fork gives us some ability to experiment with new features without\n>> committing\n>> ourselves to live with them forever.\n>>\n>> The main downsides I can see are:\n>>\n>> 1. It creates a big footgun. Anyone who uses CTV without adequately\n>> preparing for\n>> the reversion could easily lose their money.\n>>\n>> 2. Miners would be incentivized to censor spends of the reverting\n>> opcode near its reversion date. E.g., if Alice receives 100 bitcoins\n>> to a\n>> script secured only by OP_CTV and attempts to spend them the day\n>> before it\n>> becomes OP_NOP4, miners might prefer to skip confirming that\n>> transaction even\n>> if it pays a high feerate in favor of spending her 100 bitcoins to\n>> themselves\n>> the next day after reversion.\n>>\n>> The degree to which this is an issue will depend on the diversity of\n>> hashrate and the willingness of any large percentage of hashrate to\n>> deliberately reorg the chain to remove confirmed transactions. This\n>> could be\n>> mitigated by having OP_CTV change to OP_RETURN, destroying any\n>> unspent CTV-only\n>> coins so that any censoring miners only benefited from the (hopefully\n>> slight)\n>> decrease in bitcoin currency supply.\n>>\n>> 3. A bias towards keeping the change. Even if it turned out very few\n>> people\n>> really used CTV, I think there would be a bias at the end of five\n>> years towards\n>> \"why not just keep it\".\n>>\n>> 4. The drama doesn't end. Activating CTV now, or decisively not\n>> activating it,\n>> may bring to an end our frequent discussions about it (though I\n>> wouldn't\n>> count on that). An automatically reverting soft fork would probably\n>> guarantee we'll have further consensus-level discussions about CTV in\n>> the\n>> future.\n>>\n>> Thanks for reading. I'm curious to hear y'alls thoughts,\n>>\n>> -Dave\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220421/8c6288cf/attachment-0001.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2022-04-24T15:22:29",
                "message_text_only": "On April 21, 2022 5:10:02 AM GMT+02:00, alicexbt via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>@DavidHarding\n>\n>Interesting proposal to revert consensus changes. Is it possible to do this for soft forks that are already activated?\n>\n>Example: Some users are not okay with witness discount in segwit transactions\n>\n>https://nitter.net/giacomozucco/status/1513614380121927682\n\nThat specific case isn't a good example as reverting the discount would actually be a soft fork, as it is a tightening of existing rules. In fact, it'd be a block size decrease."
            },
            {
                "author": "Luke Dashjr",
                "date": "2022-04-21T05:56:54",
                "message_text_only": "On Thursday 21 April 2022 03:10:02 alicexbt wrote:\n> @DavidHarding\n>\n> Interesting proposal to revert consensus changes. Is it possible to do this\n> for soft forks that are already activated?\n\nGenerally, no. Reverting a softfork without a built-in expiry would be a \nhardfork.\n\n> Example: Some users are not okay with witness discount in segwit\n> transactions\n>\n> https://nitter.net/giacomozucco/status/1513614380121927682\n\nWhile reverting Segwit wouldn't be possible, it IS entirely possible to do an \nadditional softfork to either weigh witness data at the full 4 WU/Byte rate \n(same as other data), or to reduce the total weight limit so as to extend the \nwitness discount to non-segwit transactions (so scriptSig is similarly \ndiscounted).\n\n> @LukeDashjr\n>\n> > The bigger issue with CTV is the miner-decision route. Either CTV has\n> > community support, or it doesn't. If it does, miners shouldn't have the\n> > ability to veto it. If it doesn't, miners shouldn't have the ability to\n> > activate it (making it a 51% attack more than a softfork).\n>\n> Agree. UASF client compatible with this speedy trial release for BIP 119\n> could be a better way to activate CTV. Users can decide if they prefer\n> mining pools to make the decision for them or they want to enforce it\n> irrespective of how many mining pools signal for it. I haven't seen any\n> arguments against CTV from mining pools yet.\n\nWe had that for Taproot, and now certain people are trying to say Speedy Trial \nactivated Taproot rather than the BIP8 client, and otherwise creating \nconfusion and ambiguity.\n\nFurthermore, the variant of Speedy Trial being used (AFAIK) is the BIP9 \nvariant which has no purpose other than to try to sabotage parallel UASF \nefforts.\n\nAt this point, it is probably better for any Speedy Trial attempts to be \nrejected by the community and fail outright. Perhaps even preparing a real \ncounter-softfork to invalidate blocks signalling for it.\n\nLuke"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2022-04-21T06:20:15",
                "message_text_only": "> While reverting Segwit wouldn't be possible, it IS entirely possible to\ndo an\n> additional softfork to either weigh witness data at the full 4 WU/Byte\nrate\n> (same as other data), or to reduce the total weight limit so as to extend\nthe\n> witness discount to non-segwit transactions (so scriptSig is similarly\n> discounted).\n\nWhat if I pre signed a transaction which was valid under the discounted\nweighting, but the increase in weight would make it invalid? This would\nserve to confiscate funds. Let's not do that.\n\n\n\n> Furthermore, the variant of Speedy Trial being used (AFAIK) is the BIP9\n> variant which has no purpose other than to try to sabotage parallel UASF\n> efforts.\n\nWhy didn't you upstream the code that was used for the actual activation\ninto Bitcoin Core in the last year?\n\nIn preparing it I just used what was available in Core now, surely the last\nyear you could have gotten the appropriate patches done?\n\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n\nOn Thu, Apr 21, 2022 at 12:57 AM Luke Dashjr via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Thursday 21 April 2022 03:10:02 alicexbt wrote:\n> > @DavidHarding\n> >\n> > Interesting proposal to revert consensus changes. Is it possible to do\n> this\n> > for soft forks that are already activated?\n>\n> Generally, no. Reverting a softfork without a built-in expiry would be a\n> hardfork.\n>\n> > Example: Some users are not okay with witness discount in segwit\n> > transactions\n> >\n> > https://nitter.net/giacomozucco/status/1513614380121927682\n>\n> While reverting Segwit wouldn't be possible, it IS entirely possible to do\n> an\n> additional softfork to either weigh witness data at the full 4 WU/Byte\n> rate\n> (same as other data), or to reduce the total weight limit so as to extend\n> the\n> witness discount to non-segwit transactions (so scriptSig is similarly\n> discounted).\n>\n> > @LukeDashjr\n> >\n> > > The bigger issue with CTV is the miner-decision route. Either CTV has\n> > > community support, or it doesn't. If it does, miners shouldn't have the\n> > > ability to veto it. If it doesn't, miners shouldn't have the ability to\n> > > activate it (making it a 51% attack more than a softfork).\n> >\n> > Agree. UASF client compatible with this speedy trial release for BIP 119\n> > could be a better way to activate CTV. Users can decide if they prefer\n> > mining pools to make the decision for them or they want to enforce it\n> > irrespective of how many mining pools signal for it. I haven't seen any\n> > arguments against CTV from mining pools yet.\n>\n> We had that for Taproot, and now certain people are trying to say Speedy\n> Trial\n> activated Taproot rather than the BIP8 client, and otherwise creating\n> confusion and ambiguity.\n>\n> Furthermore, the variant of Speedy Trial being used (AFAIK) is the BIP9\n> variant which has no purpose other than to try to sabotage parallel UASF\n> efforts.\n>\n> At this point, it is probably better for any Speedy Trial attempts to be\n> rejected by the community and fail outright. Perhaps even preparing a real\n> counter-softfork to invalidate blocks signalling for it.\n>\n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220421/4ccadfe9/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2022-04-21T06:37:43",
                "message_text_only": "On Thursday 21 April 2022 06:20:15 Jeremy Rubin wrote:\n> > While reverting Segwit wouldn't be possible, it IS entirely possible to\n> > do an additional softfork to either weigh witness data at the full 4\n> > WU/Byte rate (same as other data), or to reduce the total weight limit so\n> > as to extend the witness discount to non-segwit transactions (so scriptSig\n> > is similarly discounted).\n>\n> What if I pre signed a transaction which was valid under the discounted\n> weighting, but the increase in weight would make it invalid? This would\n> serve to confiscate funds. Let's not do that.\n\nYou'd be confiscating your own funds by making an absurd spending condition.\nBy this argument, ALL softforks would have to be ruled out.\n\n> > Furthermore, the variant of Speedy Trial being used (AFAIK) is the BIP9\n> > variant which has no purpose other than to try to sabotage parallel UASF\n> > efforts.\n>\n> Why didn't you upstream the code that was used for the actual activation\n> into Bitcoin Core in the last year?\n>\n> In preparing it I just used what was available in Core now, surely the last\n> year you could have gotten the appropriate patches done?\n\nThey were done, reviewed, and deployed in time for Taproot. You personally \nplayed a part in sabotaging efforts to get it merged into Core, and violating \nthe community's trust in it by instead merging your BIP9 ST without \nconsensus. Don't play dumb. You have nobody to blame but yourself.\n\nLuke"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2022-04-21T13:10:45",
                "message_text_only": "> You'd be confiscating your own funds by making an absurd spending\ncondition.\n> By this argument, ALL softforks would have to be ruled out.\n\nThe argument is that transactions which can be relayed and in the mempool\nand then confirmed should not ever be restricted.\n\nThis is so that old node's mempools don't produce invalid blocks after an\nupgrade.\n\nThis is what a good chunk of policy is for, and we (being core) do bounce\nthese txns to make clear what might be upgraded.\n\nChanging the detail you mentioned represents a tweak that could make old\nnodes mine invalid blocks. That's all I'm ruling out.\n\n\n\n> > In preparing it I just used what was available in Core now, surely the\n> last\n> > year you could have gotten the appropriate patches done?\n>\n> They were done, reviewed, and deployed in time for Taproot. You personally\n>\n> played a part in sabotaging efforts to get it merged into Core, and\n> violating\n> the community's trust in it by instead merging your BIP9 ST without\n> consensus. Don't play dumb. You have nobody to blame but yourself.\n>\n\n\nEven if I accept full responsibility for BIP9 ST without consensus, you\nstill had the last year to convince the rest of the maintainers to review\nand merge your activation code, which you did not do.\n\nDon't confuse consensus-seeking with preference. My preference was to leave\nversionbits entirely.\n\nNor am I blame seeking. I'm simply asking why, if this is _the_ most\nimportant thing for Bitcoin (as I've heard some BIP8 LOT=true people\nremark), did you not spend the last year improving your advocacy. And I'm\nsuggesting that you redouble those efforts by, e.g., opening a new PR for\nCore with logic you find acceptable and continuing to drive the debate\nforward. None of these things happen without advocacy.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220421/a737dcb5/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2022-04-21T14:58:39",
                "message_text_only": "On 4/20/22 6:04 PM, David A. Harding via bitcoin-dev wrote:\n> Hi all,\n> \n> The main criticisms I'm aware of against CTV seem to be along the following lines:\n> \n> 1. Usage, either:\n>  \u00a0 a. It won't receive significant real-world usage, or\n>  \u00a0 b. It will be used but we'll end up using something better later\n> 2. An unused CTV will need to be supported forever, creating extra maintenance\n>  \u00a0\u00a0 burden, increasing security surface, and making it harder to evaluate later\n>  \u00a0\u00a0 consensus change proposals due to their interactions with CTV\n>\n\nAlso \"is this even the way we should be going about covenants?\" Given there are still various \nproposals for covenants floating around and we're still in the very early stages of the \nreconciliation of them and the Bitcoin technical community (or at least those interested in working \non covenants) doesn't even remotely show any signs of consensus around any concrete proposal,\n\ntalking about a \"way forward for CTV\" or activating CTV or coming up with some way of shoving it \ninto Bitcoin at this stage is insulting, myopic, short-sighted. Worse, it sets incredibly poor \nprecedent for how we think about changes to Bitcoin and maintaining Bitcoin's culture of security \nand careful design.\n\nI'm gobsmacked that the conversation has reached this point, and am even more surprised that the \nresponse from the Bitcoin (technical) community hasn't been a more resounding and complete rejection \nof this narrative.\n\nMatt"
            },
            {
                "author": "David A. Harding",
                "date": "2022-04-21T18:06:14",
                "message_text_only": "On 21.04.2022 04:58, Matt Corallo wrote:\n> On 4/20/22 6:04 PM, David A. Harding via bitcoin-dev wrote:\n>> The main criticisms I'm aware of against CTV seem to be along the \n>> following lines:\n>> \n>> 1. Usage, either:\n>>  \u00a0 a. It won't receive significant real-world usage, or\n>>  \u00a0 b. It will be used but we'll end up using something better later\n>> 2. An unused CTV will need to be supported forever, creating extra \n>> maintenance\n>>  \u00a0\u00a0 burden, increasing security surface, and making it harder to \n>> evaluate later\n>>  \u00a0\u00a0 consensus change proposals due to their interactions with CTV\n> \n> Also \"is this even the way we should be going about covenants?\"\n\nI consider this to be a version of point 1b above.  If we find a better \nway for going about covenants, then we'll activate that and let CTV \nautomatically be retired at the end of its five years.\n\nIf you still think your point is separate from point 1b, I would \nappreciate you helping me understand.\n\n> the Bitcoin technical community (or at least those interested in\n> working on covenants) doesn't even remotely show any signs of\n> consensus around any concrete proposal,\n\nThis is also my assessment: neither CTV nor any other proposal currently \nhas enough support to warrant a permanent change to the consensus rules. \n  My question to the list was whether we could use a transitory soft fork \nas a method for collecting real-world usage data about proposals.  E.g., \na consensus change proposal could proceed along the following idealized \npath:\n\n- Idea (individual or small group)\n- Publication (probably to this list)\n- Draft specification and implementation\n- Riskless testing (integration tests, signet(s), testnet, etc)\n- Money-at-stake testing (availability on a pegged sidechain, an altcoin \nsimilar to Bitcoin, or in Bitcoin via a transitory soft fork)\n- Permanent consensus change\n\n> talking about a \"way forward for CTV\" or activating CTV or coming up\n> with some way of shoving it into Bitcoin at this stage [...] sets \n> incredibly poor precedent for\n> how we think about changes to Bitcoin and maintaining Bitcoin's\n> culture of security and careful design.\n\nHow should we think about changes to Bitcoin and maintaining its culture \nof security and careful design?  My post suggested a generalized way we \ncould evaluate proposed consensus changes for real-world demand, \nallowing us to settle what I see as the most contended part of the CTV \nproposal.  That feels to me like legitimate engineering and social \nconsensus building.  What would be your preferred alternatives?\n\n(For the record, my preferred alternative for years has been to add the \ntechnically trivial opcodes OP_CAT and OP_CHECKSIGFROMSTACK, see what \ncovenant-y things people build with them, and then consider proposals to \noptimize the onchain usage of those covenant-y things.  Alas, this seems \nto fall afoul of the concerns held by some people about recursive \ncovenants.)\n\n> I'm gobsmacked that the conversation has reached this point, and am\n> even more surprised that the response from the Bitcoin (technical)\n> community hasn't been a more resounding and complete rejection of this\n> narrative.\n\nIf the only choices are to support activation of BIP119 CTV at this time \nor to reject it, I would currently side with rejection.  But I would \nprefer over both of those options to find a third way that doesn't \ncompromise safety or long-term maintainability and which gives us the \ndata about CTV (or other covenant-related constructions) to see whether \nthe concerns described above in 1a and 1b are actually non-issues.\n\nI see one of those third ways as the testing on the CTV signet described \nin a contemporaneous thread on this list.[1]  Other third ways would be \ntrying CTV on sidechains or altcoins, or perhaps allowing CTV to be \ntemporarily used on Bitcoin as proposed in this thread.  Is there \ninterest in working on those alternatives, or is the only path forward \nan argument over attempting activation of CTV?\n\nThanks,\n\n-Dave\n\n[1] \nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020234.html"
            },
            {
                "author": "Matt Corallo",
                "date": "2022-04-21T18:39:17",
                "message_text_only": "On 4/21/22 11:06 AM, David A. Harding wrote:\n> On 21.04.2022 04:58, Matt Corallo wrote:\n>> On 4/20/22 6:04 PM, David A. Harding via bitcoin-dev wrote:\n>>> The main criticisms I'm aware of against CTV seem to be along the following lines:\n>>>\n>>> 1. Usage, either:\n>>> \u00a0\u00a0 a. It won't receive significant real-world usage, or\n>>> \u00a0\u00a0 b. It will be used but we'll end up using something better later\n>>> 2. An unused CTV will need to be supported forever, creating extra maintenance\n>>> \u00a0\u00a0\u00a0 burden, increasing security surface, and making it harder to evaluate later\n>>> \u00a0\u00a0\u00a0 consensus change proposals due to their interactions with CTV\n>>\n>> Also \"is this even the way we should be going about covenants?\"\n> \n> I consider this to be a version of point 1b above.\u00a0 If we find a better way for going about \n> covenants, then we'll activate that and let CTV automatically be retired at the end of its five years.\n> \n> If you still think your point is separate from point 1b, I would appreciate you helping me understand.\n\nNo, its unrelated to whether CTV or any other system gets usage. If we were just concerned with \nwhether CTV would get usage over or under some other alternative proposal then I could see an \nargument for your proposal (though the nontrivial cost of any fork to Bitcoin would make me still \nstrongly disagree with such a way forward in principle).\n\nRather, I'm instead concerned with us designing something that is going to be the most flexible and \nuseful and hopefully private covenents design we can, because that doesn't just get users to use the \nchange to Bitcoin we paid some nontrivial change-cost to incorporate into the Bitcoin's consensus \nrules, but gets the most bang-for-our-buck. There are at least three or four separate covenants \ndesigns that have been posted to this list, and I don't see why we're even remotely talking about a \nspecific one as something to move forward with at this point.\n\nWe don't add things to Bitcoin just to find out whether we can. full stop.\n\nWe add things to Bitcoin because (a) there's some demonstrated use-cases and intent to use the \nchange (which I think we definitely have for covenants, but which only barely, if at all, suggests \nfavoring one covenant design over any other), (b) because its generally considered aligned with \nBitcoin's design and goals, based on developer and more broad community response and (c) because the \ntechnical folks who have/are wiling to spend time working on the specific design space think the \nconcrete proposal is the best design we have, and finally (d) because the implementation is \nwell-reviewed and complete.\n\nI do not see how we can make an argument for any specific covenant under (c) here. We could just as \nwell be talking about TLUV/CAT+CHECKSIGFROMSTACK/etc, and nearly anyone who is going to use CTV can \nprobably just as easily use those instead - ie this has nothing to do with \"will people use it\".\n\n>> the Bitcoin technical community (or at least those interested in\n>> working on covenants) doesn't even remotely show any signs of\n>> consensus around any concrete proposal,\n> \n> This is also my assessment: neither CTV nor any other proposal currently has enough support to \n> warrant a permanent change to the consensus rules. \u00a0My question to the list was whether we could use \n> a transitory soft fork as a method for collecting real-world usage data about proposals.\u00a0 E.g., a \n> consensus change proposal could proceed along the following idealized path:\n> \n> - Idea (individual or small group)\n> - Publication (probably to this list)\n> - Draft specification and implementation\n> - Riskless testing (integration tests, signet(s), testnet, etc)\n> - Money-at-stake testing (availability on a pegged sidechain, an altcoin similar to Bitcoin, or in \n> Bitcoin via a transitory soft fork)\n> - Permanent consensus change\n\nThat all seems fine, except that doing a fork on Bitcoin has very nontrivial cost, both in terms of \necosystem disruption and possibility that anything goes wrong, not to mention code maintenance \n(which we cannot remove the validation code for something ever, really - you still want to be able \nto validate the historical chain). Plus, really, I'd love to see \"technical community consensus\" \nsomewhere in there - at least its been something that has very roughly appeared for most previous \nsoft forks, at least among those who have time/willingness to work on the specific design being \nproposed.\n\n[other comments snipped because my responses would mostly have been rehashing the first response above].\n\nMatt"
            },
            {
                "author": "David A. Harding",
                "date": "2022-04-21T22:28:17",
                "message_text_only": "On 21.04.2022 08:39, Matt Corallo wrote:\n> We add things to Bitcoin because (a) there's some demonstrated\n> use-cases and intent to use the change (which I think we definitely\n> have for covenants, but which only barely, if at all, suggests\n> favoring one covenant design over any other)\n\nI'm unconvinced about CTV's use cases but others have made reasonable \nclaims that it will be used.  We could argue about this indefinitely, \nbut I would love to give CTV proponents an opportunity to prove that a \nsignificant number of people would use it.\n\n> (b) because its\n> generally considered aligned with Bitcoin's design and goals, based on\n> developer and more broad community response\n\nI think CTV fulfills this criteria.  At least, I can't think of any way \nBIP119 itself (notwithstanding activation concerns) violates Bitcoin's \ndesigns and goals.\n\n> (c) because the\n> technical folks who have/are wiling to spend time working on the\n> specific design space think the concrete proposal is the best design\n> we have\n\nThis is the criteria that most concerns me.  What if there is no \nuniversal best?  For example, I mentioned in my previous email that I'm \na partisan of OP_CAT+OP_CSFS due to their min-max of implementation \nsimplicity versus production flexibility.  But one problem is that \nspends using them would need to contain a lot of witness data.  In my \nmind, they're the best for experimentation and for proving the existence \nof demand for more optimized constructions.\n\nOP_TX or OP_TXHASH would likely offer almost as much simplicity and \nflexibility but be more efficient onchain.  Does that make them better \nthan OP_CAT+OP_CSFS?  I don't know how to objectively answer that \nquestion, and I don't feel comfortable with my subjective opinion of \nCAT+CSFS being better than OP_TX.\n\nAPO/IIDs, CTV, and TLUV/EVICT all seem to me to be very specific to \ncertain usecases (respectively: Eltoo, congestion control, and \njoinpools), providing maximum onchain efficiency for those cases but \nrequiring contortions or larger witnesses to accomplish other covenant \nusecases.  Is their increased efficiency better than more general \nconstructions like CSFS or TX?  Again, I don't know how to answer that \nquestion objectively, although subjectively I'm ok with optimized \nconstructions for cases of proven demand.\n\n> , and finally (d) because the implementation is well-reviewed\n> and complete.\n\nNo comment here; I haven't followed CTV's review progress to know \nwhether I'd consider it well enough reviewed or not.\n\n> I do not see how we can make an argument for any specific covenant\n> under (c) here. We could just as well be talking about\n> TLUV/CAT+CHECKSIGFROMSTACK/etc, and nearly anyone who is going to use\n> CTV can probably just as easily use those instead - ie this has\n> nothing to do with \"will people use it\".\n\nI'm curious how we as a technical community will be able to determine \nwhich is the best approach.  Again, I like starting simple and general, \ngathering real usage data, and then optimizing for demonstrated needs.  \nBut the simplest and most general approaches seem to be too general for \nsome people (because they enable recursive covenants), seemingly forcing \nus into looking only at application-optimized designs.  In that case, I \nthink the main thing we want to know about these narrow proposals for \nnew applications is whether the applications and the proposed consensus \nchanges will actually receive significant use.  For that, I think we \nneed some sort of test bed with real paying users, and ideally one that \nis as similar to Bitcoin mainnet as possible.\n\n> we\n> cannot remove the validation code for something ever, really - you\n> still want to be able to validate the historical chain\n\nYou and Jeremy both brought up this point.  I understand it and I \nshould've addressed it better in my OP, but I'm of the opinion that \nreverting to earlier consensus rules gives future developers the \n*option* of dropping no-longer-used consensus code as a practical \nsimplification of the same type we've used on several occasions before, \nand which is an optional default in newly started Bitcoin Core nodes for \nover a decade now (i.e. skipping verification of old signatures).  If \nfuture devs *want* to maintain code from a set of temporary rules used \nmillions of blocks ago, that's great, but giving them the option to \nforget about those rules eliminates one of my concerns about making \nconsensus changes without fully proven demand for that change.\n\nI just wanted to mention the above in case this discussion comes back to \nserious consideration of a transitory soft fork.  For now, I think we \ncan table a debate over validating reverted rules and focus on how we'll \ncome to agreement that a particular covenant-related consensus change is \nwarranted.\n\nThanks for your thoughtful response,\n\n-Dave"
            },
            {
                "author": "Matt Corallo",
                "date": "2022-04-21T23:02:26",
                "message_text_only": "On 4/21/22 3:28 PM, David A. Harding wrote:\n> On 21.04.2022 08:39, Matt Corallo wrote:\n>> We add things to Bitcoin because (a) there's some demonstrated\n>> use-cases and intent to use the change (which I think we definitely\n>> have for covenants, but which only barely, if at all, suggests\n>> favoring one covenant design over any other)\n> \n> I'm unconvinced about CTV's use cases but others have made reasonable claims that it will be used.  \n> We could argue about this indefinitely, but I would love to give CTV proponents an opportunity to \n> prove that a significant number of people would use it.\n\nTo be clear - I was not suggesting that CTV fell flat here. I think there *is* demand for Bitcoin \ncovenant designs, CTV included. I do *not* think there is demand for CTV *over* other covenant \ndesigns, that's okay, though, it doesn't need that, we just have to be confident its the right \ndirection.\n\nI believe you got the impression I was arguing CTV did not meet by criteria list (a)-(d), but in \nfact I only think it falls flat horribly on (c).\n\n>> (b) because its\n>> generally considered aligned with Bitcoin's design and goals, based on\n>> developer and more broad community response\n> \n> I think CTV fulfills this criteria.\u00a0 At least, I can't think of any way BIP119 itself \n> (notwithstanding activation concerns) violates Bitcoin's designs and goals.\n\nI tend to agree.\n\n>> (c) because the\n>> technical folks who have/are wiling to spend time working on the\n>> specific design space think the concrete proposal is the best design\n>> we have\n> \n> This is the criteria that most concerns me.\u00a0 What if there is no universal best?\u00a0 For example, I \n> mentioned in my previous email that I'm a partisan of OP_CAT+OP_CSFS due to their min-max of \n> implementation simplicity versus production flexibility.\u00a0 But one problem is that spends using them \n> would need to contain a lot of witness data.\u00a0 In my mind, they're the best for experimentation and \n> for proving the existence of demand for more optimized constructions.\n\nI agree, there is no universal best, probably. But is there a concrete listing of a number of \nuse-cases and the different weights of things, plus flexibility especially around forward-looking \ndesigns? You don't mention the lack of recursion in CTV vs CAT+CSFS, which is a *huge* difference in \nthe available design space for developers. This stuff is critical to get right and we're barely even \ntalking about it, let alone at a position of deciding something?\n\n>> I do not see how we can make an argument for any specific covenant\n>> under (c) here. We could just as well be talking about\n>> TLUV/CAT+CHECKSIGFROMSTACK/etc, and nearly anyone who is going to use\n>> CTV can probably just as easily use those instead - ie this has\n>> nothing to do with \"will people use it\".\n> \n> I'm curious how we as a technical community will be able to determine which is the best approach.  \n> Again, I like starting simple and general, gathering real usage data, and then optimizing for \n> demonstrated needs. But the simplest and most general approaches seem to be too general for some \n> people (because they enable recursive covenants), seemingly forcing us into looking only at \n> application-optimized designs.\u00a0 In that case, I think the main thing we want to know about these \n> narrow proposals for new applications is whether the applications and the proposed consensus changes \n> will actually receive significant use.\u00a0 For that, I think we need some sort of test bed with real \n> paying users, and ideally one that is as similar to Bitcoin mainnet as possible.\n\nAgain, you're writing off the real and nontrivial risk of doing a fork to begin with. You're also \nwriting off something organic that has happened without issue time and time again - a community of \nindependent contributors who care about Bitcoin working together to make decisions on what is or \nisn't the \"right way to go\" is something we've all collaboratively done time and time again. Why are \nyou suggesting its something that you \"don't know how to do\"?\n\nAgain, my point *is not* \"will people use CTV\", I think they will. I think they would also use TLUV \nif that were activated for the exact same use-cases. I think they would also use CAT+CSFS if that \nwere what was activated, again for the exact same use-cases. Given that, I'm not sure how your \nproposal teaches us anything at all, aside from \"yes, there was demand for *some* kind of covenant\".\n\nMatt"
            },
            {
                "author": "David A. Harding",
                "date": "2022-04-22T01:20:14",
                "message_text_only": "[Rearranging Matt's text in my reply so my nitpicks come last.]\n\nOn 21.04.2022 13:02, Matt Corallo wrote:\n> I agree, there is no universal best, probably. But is there a concrete\n> listing of a number of use-cases and the different weights of things,\n> plus flexibility especially around forward-looking designs?\n\nI'm sure we could make a nice list of covenant usecases, but I don't \nknow how we would assign reasonable objective weights to the different \nthings purely through group foresight.  I know I'm skeptical about \ncongestion control and enthusiastic about joinpools---but I've talked to \ndevelopers I respect who've had the opposite opinions from me about \nthose things.  The best way I know of to reconcile our differing \nopinions is to see what real Bitcoin users actually pay for.  But to do \nthat, I think they must have a way to use covenants in something like \nthe production environment.\n\n> You're also writing off [...] a community of\n> independent contributors who care about Bitcoin working together to\n> make decisions on what is or isn't the \"right way to go\" [...]. Why are \n> you\n> suggesting its something that you \"don't know how to do\"?\n\nYou said we should use the best design.  I said the different designs \noptimize for different things, so it's unlikely that there's an \nobjective best.  That implies to me that we either need to choose a \nwinner (yuck) or we need to implement more than one of the designs.  In \neither of those cases, choosing what to implement would benefit from \ndata about how much the thing will be used and how much users will pay \nfor it in fees.\n\n> Again, my point *is not* \"will people use CTV\", I think they will. I\n> think they would also use TLUV if that were activated for the exact\n> same use-cases. I think they would also use CAT+CSFS if that were what\n> was activated, again for the exact same use-cases. Given that, I'm not\n> sure how your proposal teaches us anything at all, aside from \"yes,\n> there was demand for *some* kind of covenant\".\n\nI'm sorry if my OP was ambiguous about this, but my goal there was to \ndescribe a general framework for activating temporary consensus changes \nfor the purpose of demonstrating demand for proposed features.  I gave \nCTV as an example for how the framework could be used, but we could use \nthe same framework to activate APO and TLUV (or IIDs and EVICT)---and \nthen we would see which of them people actually used.  If there was \nsignificant ongoing use of all three after 5 years, great!  We keep them \nall.  If some of them went largely unused, we let the extra validation \nrules expire and move on.\n\nAlternatively, if we only enabled one covenant design (e.g. CTV), we \nwould still gain data about how it was used and we could see if some of \nthe alternative designs would've been more optimal for those \ndemonstrated uses.\n\nMy goal here is obtaining data from which we can make informed \ndecisions.  A transitory soft fork is an extreme way to acquire that \ndata and I fully acknowledge it has several significant problems \n(including those I listed in my OP).  I'm hoping, though, that it's a \nbetter solution than another activation battle, prolonged yelling on \nthis mailing list and elsewhere, or everyone just giving up and letting \nBitcoin ossify prematurely.  Alternatively, I'm hoping one of the many \npeople on this list who is smarter than I am will think of another way \nto obtain decisive data with less fuss.\n\n> Again, you're writing off the real and nontrivial risk of doing a fork\n> to begin with.\n\nI agree this risk exists and it isn't my intention to write it off---my \nOP did say \"we [must be] absolutely convinced CTV will have no negative \neffects on the holders or receivers of non-CTV coins.\"  I haven't been \nfocusing on this in my replies because I think the other issues we've \nbeen discussing are more significant.  If we were to get everyone to \nagree to do a transitory soft fork, I think the safety concerns related \nto a CTV soft fork could be mitigated the same way we've mitigated them \nfor previous soft forks: heaps of code review/testing and making sure a \nlarge part of the active community supports the change.\n\n> You don't\n> mention the lack of recursion in CTV vs CAT+CSFS\n\nI mentioned recursion, or the lack thereof, in various proposals like \nfive times in this thread.  :-)\n\nThanks again for your replies,\n\n-Dave"
            },
            {
                "author": "Matt Corallo",
                "date": "2022-04-22T18:40:17",
                "message_text_only": "On 4/21/22 6:20 PM, David A. Harding wrote:\n> [Rearranging Matt's text in my reply so my nitpicks come last.]\n> \n> On 21.04.2022 13:02, Matt Corallo wrote:\n>> I agree, there is no universal best, probably. But is there a concrete\n>> listing of a number of use-cases and the different weights of things,\n>> plus flexibility especially around forward-looking designs?\n> \n> I'm sure we could make a nice list of covenant usecases, but I don't know how we would assign \n> reasonable objective weights to the different things purely through group foresight.\u00a0 I know I'm \n> skeptical about congestion control and enthusiastic about joinpools---but I've talked to developers \n> I respect who've had the opposite opinions from me about those things.\u00a0 The best way I know of to \n> reconcile our differing opinions is to see what real Bitcoin users actually pay for.\u00a0 But to do \n> that, I think they must have a way to use covenants in something like the production environment.\n\nTo get good data for this kind of question you'd need much longer than five years, sadly. As we've \nseen over and over again in Bitcoin deploying very nontrivial things takes at least five years, \noften more. While vaults may be deployed relatively more quickly, the fact that we haven't seen \n(AFAIK) *anyone* deploy some of the key-deletion-based vault designs that have been floating around \nfor some time is indication that even that probably wouldn't be deployed quickly.\n\n>> You're also writing off [...] a community of\n>> independent contributors who care about Bitcoin working together to\n>> make decisions on what is or isn't the \"right way to go\" [...]. Why are you\n>> suggesting its something that you \"don't know how to do\"?\n> \n> You said we should use the best design.\u00a0 I said the different designs optimize for different things, \n> so it's unlikely that there's an objective best.\u00a0 That implies to me that we either need to choose a \n> winner (yuck) or we need to implement more than one of the designs.\u00a0 In either of those cases, \n> choosing what to implement would benefit from data about how much the thing will be used and how \n> much users will pay for it in fees.\n\nI agree, there is no objective \"best\" design. But we can sill explore design tradeoffs and utility \nfor different classes of covenants. I've seen relatively little of this so far, and from what I have \nseen its not been clear that CTV is really a good option, sadly.\n\n\n>> Again, you're writing off the real and nontrivial risk of doing a fork\n>> to begin with.\n> \n> I agree this risk exists and it isn't my intention to write it off---my OP did say \"we [must be] \n> absolutely convinced CTV will have no negative effects on the holders or receivers of non-CTV \n> coins.\"\u00a0 I haven't been focusing on this in my replies because I think the other issues we've been \n> discussing are more significant.\u00a0 If we were to get everyone to agree to do a transitory soft fork, \n> I think the safety concerns related to a CTV soft fork could be mitigated the same way we've \n> mitigated them for previous soft forks: heaps of code review/testing and making sure a large part of \n> the active community supports the change.\n\nI'm not sure I made my point here clear - the nontrivial and real risk I was referring to was not \navoidable with \"moar code review\" or \"careful analysis to make sure the proposed fork doesn't cause \ndamage\". I mean issues that keep cropping up in many changes like \"people start threatening to run a \nfork-causing client\" or \"some miners aren't validating blocks and end up creating a fork\" or \"some \npeople forget to upgrade and follow such a fork\" or..... there's lots and lots of risks to a doing a \nfork that come from the process and nature of forks, that have nothing to do with the actual details \nof the fork itself.\n\nMatt"
            },
            {
                "author": "Corey Haddad",
                "date": "2022-04-22T18:49:41",
                "message_text_only": "If none of the alternative proposals have been developed as much as CTV, it\nseems reasonable to interpret that as a lack of interest in those\nalternative proposals themselves.\nThat should not be interpreted as lack of interest in covenants. Perhaps if\nCTV didn't exist, we would have seen more progress on the alternatives.\nIt's entirely reasonable to assume that people who are interested in\ncovenants have put their energy and attention primarily behind CTV, and\nthat is why it is the furthest along. It shouldn't be a requisite to\nimproving Bitcoin that we have multiple, competing proposals for a\nsimilar use case that have all been debated, implemented and tested before\nwe will be okay with integrating one of them. That may be the ideal, but it\nshouldn't be a requirement.\n\nIf we can find consensus of moving forward with one of the proposals, and\nthere are concrete commitments to develop the alternatives over the next\nfew months, I would suggest that would be something worth waiting for. In\nthe absence of such consensus and commitments, the ask here is that CTV be\nset aside in favor of an unlikely hypothetical.\n\nCorey\n\nOn Fri, Apr 22, 2022 at 2:40 PM Matt Corallo via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n>\n> On 4/21/22 6:20 PM, David A. Harding wrote:\n> > [Rearranging Matt's text in my reply so my nitpicks come last.]\n> >\n> > On 21.04.2022 13:02, Matt Corallo wrote:\n> >> I agree, there is no universal best, probably. But is there a concrete\n> >> listing of a number of use-cases and the different weights of things,\n> >> plus flexibility especially around forward-looking designs?\n> >\n> > I'm sure we could make a nice list of covenant usecases, but I don't\n> know how we would assign\n> > reasonable objective weights to the different things purely through\n> group foresight.  I know I'm\n> > skeptical about congestion control and enthusiastic about\n> joinpools---but I've talked to developers\n> > I respect who've had the opposite opinions from me about those things.\n> The best way I know of to\n> > reconcile our differing opinions is to see what real Bitcoin users\n> actually pay for.  But to do\n> > that, I think they must have a way to use covenants in something like\n> the production environment.\n>\n> To get good data for this kind of question you'd need much longer than\n> five years, sadly. As we've\n> seen over and over again in Bitcoin deploying very nontrivial things takes\n> at least five years,\n> often more. While vaults may be deployed relatively more quickly, the fact\n> that we haven't seen\n> (AFAIK) *anyone* deploy some of the key-deletion-based vault designs that\n> have been floating around\n> for some time is indication that even that probably wouldn't be deployed\n> quickly.\n>\n> >> You're also writing off [...] a community of\n> >> independent contributors who care about Bitcoin working together to\n> >> make decisions on what is or isn't the \"right way to go\" [...]. Why are\n> you\n> >> suggesting its something that you \"don't know how to do\"?\n> >\n> > You said we should use the best design.  I said the different designs\n> optimize for different things,\n> > so it's unlikely that there's an objective best.  That implies to me\n> that we either need to choose a\n> > winner (yuck) or we need to implement more than one of the designs.  In\n> either of those cases,\n> > choosing what to implement would benefit from data about how much the\n> thing will be used and how\n> > much users will pay for it in fees.\n>\n> I agree, there is no objective \"best\" design. But we can sill explore\n> design tradeoffs and utility\n> for different classes of covenants. I've seen relatively little of this so\n> far, and from what I have\n> seen its not been clear that CTV is really a good option, sadly.\n>\n>\n> >> Again, you're writing off the real and nontrivial risk of doing a fork\n> >> to begin with.\n> >\n> > I agree this risk exists and it isn't my intention to write it off---my\n> OP did say \"we [must be]\n> > absolutely convinced CTV will have no negative effects on the holders or\n> receivers of non-CTV\n> > coins.\"  I haven't been focusing on this in my replies because I think\n> the other issues we've been\n> > discussing are more significant.  If we were to get everyone to agree to\n> do a transitory soft fork,\n> > I think the safety concerns related to a CTV soft fork could be\n> mitigated the same way we've\n> > mitigated them for previous soft forks: heaps of code review/testing and\n> making sure a large part of\n> > the active community supports the change.\n>\n> I'm not sure I made my point here clear - the nontrivial and real risk I\n> was referring to was not\n> avoidable with \"moar code review\" or \"careful analysis to make sure the\n> proposed fork doesn't cause\n> damage\". I mean issues that keep cropping up in many changes like \"people\n> start threatening to run a\n> fork-causing client\" or \"some miners aren't validating blocks and end up\n> creating a fork\" or \"some\n> people forget to upgrade and follow such a fork\" or..... there's lots and\n> lots of risks to a doing a\n> fork that come from the process and nature of forks, that have nothing to\n> do with the actual details\n> of the fork itself.\n>\n> Matt\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220422/b344c2cb/attachment.html>"
            },
            {
                "author": "James O'Beirne",
                "date": "2022-04-22T16:48:39",
                "message_text_only": "> APO/IIDs, CTV, and TLUV/EVICT all seem to me to be very specific to\n> certain usecases (respectively: Eltoo, congestion control, and\n> joinpools)\n\nThe enumeration of covenants uses here excludes vaulting,\nwhich I see as far and away the highest utility use for covenants given\nthat it allows significant derisking of custody for any user of Bitcoin\ninterested in holding their own coins (which is debatably redundant\nwith a strict definition of \"Bitcoin user\" ;).\n\nA lot of why I like CTV is the simple fact that it is a low-risk way of\ngetting us vaults. That feature in itself is more than enough to\njustify (to me) CTV's added validation complexity, which is very modest\n- in contrast every other covenant proposal I've seen so far.\n\nOn Thu, Apr 21, 2022 at 6:28 PM David A. Harding via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On 21.04.2022 08:39, Matt Corallo wrote:\n> > We add things to Bitcoin because (a) there's some demonstrated\n> > use-cases and intent to use the change (which I think we definitely\n> > have for covenants, but which only barely, if at all, suggests\n> > favoring one covenant design over any other)\n>\n> I'm unconvinced about CTV's use cases but others have made reasonable\n> claims that it will be used.  We could argue about this indefinitely,\n> but I would love to give CTV proponents an opportunity to prove that a\n> significant number of people would use it.\n>\n> > (b) because its\n> > generally considered aligned with Bitcoin's design and goals, based on\n> > developer and more broad community response\n>\n> I think CTV fulfills this criteria.  At least, I can't think of any way\n> BIP119 itself (notwithstanding activation concerns) violates Bitcoin's\n> designs and goals.\n>\n> > (c) because the\n> > technical folks who have/are wiling to spend time working on the\n> > specific design space think the concrete proposal is the best design\n> > we have\n>\n> This is the criteria that most concerns me.  What if there is no\n> universal best?  For example, I mentioned in my previous email that I'm\n> a partisan of OP_CAT+OP_CSFS due to their min-max of implementation\n> simplicity versus production flexibility.  But one problem is that\n> spends using them would need to contain a lot of witness data.  In my\n> mind, they're the best for experimentation and for proving the existence\n> of demand for more optimized constructions.\n>\n> OP_TX or OP_TXHASH would likely offer almost as much simplicity and\n> flexibility but be more efficient onchain.  Does that make them better\n> than OP_CAT+OP_CSFS?  I don't know how to objectively answer that\n> question, and I don't feel comfortable with my subjective opinion of\n> CAT+CSFS being better than OP_TX.\n>\n> APO/IIDs, CTV, and TLUV/EVICT all seem to me to be very specific to\n> certain usecases (respectively: Eltoo, congestion control, and\n> joinpools), providing maximum onchain efficiency for those cases but\n> requiring contortions or larger witnesses to accomplish other covenant\n> usecases.  Is their increased efficiency better than more general\n> constructions like CSFS or TX?  Again, I don't know how to answer that\n> question objectively, although subjectively I'm ok with optimized\n> constructions for cases of proven demand.\n>\n> > , and finally (d) because the implementation is well-reviewed\n> > and complete.\n>\n> No comment here; I haven't followed CTV's review progress to know\n> whether I'd consider it well enough reviewed or not.\n>\n> > I do not see how we can make an argument for any specific covenant\n> > under (c) here. We could just as well be talking about\n> > TLUV/CAT+CHECKSIGFROMSTACK/etc, and nearly anyone who is going to use\n> > CTV can probably just as easily use those instead - ie this has\n> > nothing to do with \"will people use it\".\n>\n> I'm curious how we as a technical community will be able to determine\n> which is the best approach.  Again, I like starting simple and general,\n> gathering real usage data, and then optimizing for demonstrated needs.\n> But the simplest and most general approaches seem to be too general for\n> some people (because they enable recursive covenants), seemingly forcing\n> us into looking only at application-optimized designs.  In that case, I\n> think the main thing we want to know about these narrow proposals for\n> new applications is whether the applications and the proposed consensus\n> changes will actually receive significant use.  For that, I think we\n> need some sort of test bed with real paying users, and ideally one that\n> is as similar to Bitcoin mainnet as possible.\n>\n> > we\n> > cannot remove the validation code for something ever, really - you\n> > still want to be able to validate the historical chain\n>\n> You and Jeremy both brought up this point.  I understand it and I\n> should've addressed it better in my OP, but I'm of the opinion that\n> reverting to earlier consensus rules gives future developers the\n> *option* of dropping no-longer-used consensus code as a practical\n> simplification of the same type we've used on several occasions before,\n> and which is an optional default in newly started Bitcoin Core nodes for\n> over a decade now (i.e. skipping verification of old signatures).  If\n> future devs *want* to maintain code from a set of temporary rules used\n> millions of blocks ago, that's great, but giving them the option to\n> forget about those rules eliminates one of my concerns about making\n> consensus changes without fully proven demand for that change.\n>\n> I just wanted to mention the above in case this discussion comes back to\n> serious consideration of a transitory soft fork.  For now, I think we\n> can table a debate over validating reverted rules and focus on how we'll\n> come to agreement that a particular covenant-related consensus change is\n> warranted.\n>\n> Thanks for your thoughtful response,\n>\n> -Dave\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220422/2a34a678/attachment.html>"
            },
            {
                "author": "James O'Beirne",
                "date": "2022-04-22T17:06:41",
                "message_text_only": "> The enumeration of covenants uses here excludes vaulting,\n> which I see as far and away the highest utility use for covenants\n\nApologies for the double post, but I need to caveat this.\n\nTo be more accurate, I see \"coin pools\" as the most potentially\nvaluable use of covenants, since we need to address the scalability of\nUTXO ownership as an existential issue at some point down the road - but\nbecause a workable design has not yet been proposed (I don't think e.g.\nCoinPools is scalable as-written... but that's for another\npost), I am omitting that use in favor of vaults, which are well\nunderstood and can be implemented workably in various ways.\n\nI do not want to suggest that I don't want more general covenant\nabilities - I do! But it's clear that both the designs and exact\nusages of recursive covenants need *a lot* of work, probably years.\n\nThrowing CTV to the wayside because it isn't a 100% solution to\nevery possible covenant use we can dream up feels a bit like\nslamming the door on P2SH because Taproot might come along\na few years later.\n\nOn Fri, Apr 22, 2022 at 12:48 PM James O'Beirne <james.obeirne at gmail.com>\nwrote:\n\n> > APO/IIDs, CTV, and TLUV/EVICT all seem to me to be very specific to\n> > certain usecases (respectively: Eltoo, congestion control, and\n> > joinpools)\n>\n> The enumeration of covenants uses here excludes vaulting,\n> which I see as far and away the highest utility use for covenants given\n> that it allows significant derisking of custody for any user of Bitcoin\n> interested in holding their own coins (which is debatably redundant\n> with a strict definition of \"Bitcoin user\" ;).\n>\n> A lot of why I like CTV is the simple fact that it is a low-risk way of\n> getting us vaults. That feature in itself is more than enough to\n> justify (to me) CTV's added validation complexity, which is very modest\n> - in contrast every other covenant proposal I've seen so far.\n>\n> On Thu, Apr 21, 2022 at 6:28 PM David A. Harding via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> On 21.04.2022 08:39, Matt Corallo wrote:\n>> > We add things to Bitcoin because (a) there's some demonstrated\n>> > use-cases and intent to use the change (which I think we definitely\n>> > have for covenants, but which only barely, if at all, suggests\n>> > favoring one covenant design over any other)\n>>\n>> I'm unconvinced about CTV's use cases but others have made reasonable\n>> claims that it will be used.  We could argue about this indefinitely,\n>> but I would love to give CTV proponents an opportunity to prove that a\n>> significant number of people would use it.\n>>\n>> > (b) because its\n>> > generally considered aligned with Bitcoin's design and goals, based on\n>> > developer and more broad community response\n>>\n>> I think CTV fulfills this criteria.  At least, I can't think of any way\n>> BIP119 itself (notwithstanding activation concerns) violates Bitcoin's\n>> designs and goals.\n>>\n>> > (c) because the\n>> > technical folks who have/are wiling to spend time working on the\n>> > specific design space think the concrete proposal is the best design\n>> > we have\n>>\n>> This is the criteria that most concerns me.  What if there is no\n>> universal best?  For example, I mentioned in my previous email that I'm\n>> a partisan of OP_CAT+OP_CSFS due to their min-max of implementation\n>> simplicity versus production flexibility.  But one problem is that\n>> spends using them would need to contain a lot of witness data.  In my\n>> mind, they're the best for experimentation and for proving the existence\n>> of demand for more optimized constructions.\n>>\n>> OP_TX or OP_TXHASH would likely offer almost as much simplicity and\n>> flexibility but be more efficient onchain.  Does that make them better\n>> than OP_CAT+OP_CSFS?  I don't know how to objectively answer that\n>> question, and I don't feel comfortable with my subjective opinion of\n>> CAT+CSFS being better than OP_TX.\n>>\n>> APO/IIDs, CTV, and TLUV/EVICT all seem to me to be very specific to\n>> certain usecases (respectively: Eltoo, congestion control, and\n>> joinpools), providing maximum onchain efficiency for those cases but\n>> requiring contortions or larger witnesses to accomplish other covenant\n>> usecases.  Is their increased efficiency better than more general\n>> constructions like CSFS or TX?  Again, I don't know how to answer that\n>> question objectively, although subjectively I'm ok with optimized\n>> constructions for cases of proven demand.\n>>\n>> > , and finally (d) because the implementation is well-reviewed\n>> > and complete.\n>>\n>> No comment here; I haven't followed CTV's review progress to know\n>> whether I'd consider it well enough reviewed or not.\n>>\n>> > I do not see how we can make an argument for any specific covenant\n>> > under (c) here. We could just as well be talking about\n>> > TLUV/CAT+CHECKSIGFROMSTACK/etc, and nearly anyone who is going to use\n>> > CTV can probably just as easily use those instead - ie this has\n>> > nothing to do with \"will people use it\".\n>>\n>> I'm curious how we as a technical community will be able to determine\n>> which is the best approach.  Again, I like starting simple and general,\n>> gathering real usage data, and then optimizing for demonstrated needs.\n>> But the simplest and most general approaches seem to be too general for\n>> some people (because they enable recursive covenants), seemingly forcing\n>> us into looking only at application-optimized designs.  In that case, I\n>> think the main thing we want to know about these narrow proposals for\n>> new applications is whether the applications and the proposed consensus\n>> changes will actually receive significant use.  For that, I think we\n>> need some sort of test bed with real paying users, and ideally one that\n>> is as similar to Bitcoin mainnet as possible.\n>>\n>> > we\n>> > cannot remove the validation code for something ever, really - you\n>> > still want to be able to validate the historical chain\n>>\n>> You and Jeremy both brought up this point.  I understand it and I\n>> should've addressed it better in my OP, but I'm of the opinion that\n>> reverting to earlier consensus rules gives future developers the\n>> *option* of dropping no-longer-used consensus code as a practical\n>> simplification of the same type we've used on several occasions before,\n>> and which is an optional default in newly started Bitcoin Core nodes for\n>> over a decade now (i.e. skipping verification of old signatures).  If\n>> future devs *want* to maintain code from a set of temporary rules used\n>> millions of blocks ago, that's great, but giving them the option to\n>> forget about those rules eliminates one of my concerns about making\n>> consensus changes without fully proven demand for that change.\n>>\n>> I just wanted to mention the above in case this discussion comes back to\n>> serious consideration of a transitory soft fork.  For now, I think we\n>> can table a debate over validating reverted rules and focus on how we'll\n>> come to agreement that a particular covenant-related consensus change is\n>> warranted.\n>>\n>> Thanks for your thoughtful response,\n>>\n>> -Dave\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220422/39139dcc/attachment.html>"
            },
            {
                "author": "James O'Beirne",
                "date": "2022-04-22T16:28:42",
                "message_text_only": "> There are at least three or four separate covenants designs that have\n> been posted to this list, and I don't see why we're even remotely\n> talking about a specific one as something to move forward with at\n> this point.\n\nTo my knowledge none of these other proposals (drafts, really) have\nactual implementations, let alone the many sample usages that exist for\nCTV. Given that the \"covenants\" discussion has been ongoing for years\nnow, I think the lack of other serious proposals is indicative of the\ndifficulty inherent in coming up with a preferable alternative to CTV.\n\nEach covenant proposal aside from CTV has seemed either abstruse and\nhandwavy to me (TLUV, OP_EVICT) or general to the point of\nbeing hard to analyze for safety (CAT) or encourages\nwitness verbosity that seems wasteful (OP_TX[HASH]).\n\nCTV is about as simple a covenant system as can be devised - its limits\nrelative to more \"general\" covenant designs notwithstanding.\nThe level of review around CTV's design is well beyond the other\nsketches for possible designs that this list has seen.\n\n> We could just as well be talking about\n> TLUV/CAT+CHECKSIGFROMSTACK/etc, and nearly anyone who is going to use\n> CTV can probably just as easily use those instead - ie this has\n> nothing to do with \"will people use it\".\n\nThis vault design (https://github.com/jamesob/simple-ctv-vault)\nis a good benchmark for evaluating covenant proposals because it's (i)\nsimple and (ii) has high utility for many users of Bitcoin. I would\nlove to see it implemented in one or all of these alternatives, but I\nam almost certain no one will do it in the next few months because the\nimplementations, tooling, and in some cases even complete\nspecifications do not exist.\n\nWhy that is after years of discussion and the utility of\ncovenants being widely appreciated is indicative to me.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220422/3d711b2a/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2022-04-22T18:35:01",
                "message_text_only": "On 4/22/22 9:28 AM, James O'Beirne wrote:\n>  > There are at least three or four separate covenants designs that have\n>  > been posted to this list, and I don't see why we're even remotely\n>  > talking about a specific one as something to move forward with at\n>  > this point.\n> \n> To my knowledge none of these other proposals (drafts, really) have\n> actual implementations let alone the many sample usages that exist for\n> CTV.\n\nYou can fix this! Don't point to something you can easily remedy in the short-term as an argument \nfor or against something in the long-term.\n\n> Given that the \"covenants\" discussion has been ongoing for years\n> now, I think the lack of other serious proposals is indicative of the\n> difficulty inherent in coming up with a preferable alternative to CTV.\n\nI'd think its indicative of the lack of interest in serious covenants designs from many of the \nhighly-qualified people who could be working on them. There are many reasons for that. If there's \none positive thing from the current total mess, its that hopefully there will be a renewed interest \nin researching things and forming conclusions.\n\n\n> CTV is about as simple a covenant system as can be devised - its limits\n> relative to more \"general\" covenant designs notwithstanding.\n> The level of review around CTV's design is well beyond the other\n> sketches for possible designs that this list has seen.\n\n[citation needed]\n\nMatt"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2022-04-21T19:08:36",
                "message_text_only": "I think I've discussed this type of concept previously somewhere but cannot\nfind a link to where.\n\nLargely, I think the following:\n\n1) This doesn't reduce burden of maintenance and risk of consensus split,\nit raises it:\n   A) as we now have a bunch of tricky code around reorgs and mempool\naround the time of rule de-activation.\n   B) we need to permanently maintain the rule to validate old blocks fully\n2) Most of the value of a 'temporary soft fork' is more safely captured by\nuse of a CTV emulation server / servers, which has a more graceful\ndegradation property of the servers simply shutting down and not\nauthorizing new contracts, but funds not being vulnerable to theft. The\nmodel here is trust, as opposed to a timeout.\n   2A) The way I implemented the oracles in CTV was such that, if we wanted\nto, we could actually soft-fork the rules for the oracle's keys such that\nthey would *have to* only sign CTV-valid transactions (e.g., the keys could\nbe made public). Pretty weird model, but cool that it would enable\nafter-the-fact trust model improvements. This could be generalized for any\nopcode to be emulator -> emulator consensus guaranteed -> non signature\nbased opcode.\n\nAlthough I will note that I like the spirit of this, and encourage thinking\nmore creatively about other ways to have temporary forks in Bitcoin like\nthis.\n\nBest,\n\nJeremy\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220421/c365ffdd/attachment-0001.html>"
            },
            {
                "author": "Anthony Towns",
                "date": "2022-04-22T00:28:40",
                "message_text_only": "On Wed, Apr 20, 2022 at 03:04:53PM -1000, David A. Harding via bitcoin-dev wrote:\n> The main criticisms I'm aware of against CTV seem to be along the following\n> lines: [...]\n\n> Could those concerns be mitigated by making CTV an automatically reverting\n> consensus change with an option to renew?  [...]\n\nBuck O Perley suggested that \"Many of the use cases that people\nare excited to use CTV for ([5], [6]) are very long term in nature\nand targeted for long term store of value in contrast to medium of\nexchange.\"\n\nBut, if true, that's presumably incompatible with any sort of sunset\nthat's less than many decades away, so doesn't seem much better than\njust having it be available on a signet?\n\n[5] https://github.com/kanzure/python-vaults/blob/master/vaults/bip119_ctv.py\n[6] https://github.com/jamesob/simple-ctv-vault\n\nIf sunsetting were a good idea, one way to think about implementing it\nmight be to code it as:\n\n  if (DeploymentActiveAfter(pindexPrev, params, FOO) &&\n      !DeploymentActiveAfter(pindexPrev, params, FOO_SUNSET))\n  {\n      EnforceFoo();\n  }\n\nThat is to have sunsetting the feature be its own soft-fork with\npre-declared parameters that are included in the original activation\nproposal. That way you don't have to have a second process debate about\nhow to go about (not) sunsetting the rules, just one on the merits of\nwhether sunsetting is worth doing or not.\n\nCheers,\naj"
            },
            {
                "author": "David A. Harding",
                "date": "2022-04-22T01:44:41",
                "message_text_only": "On 21.04.2022 14:28, Anthony Towns wrote:\n> But, if [it's true that \"many [...] use cases [...] to use CTV for\n> are very long term in nature\"], that's presumably incompatible\n> with any sort of sunset that's less than many decades away, so doesn't\n> seem much better than just having it be available on a signet?\n\nI fully acknowledge that a temporary test can't fully replicate a \npermanent condition.  That said, if people truly believe CTV vaults will \nsignificantly enhance their security, wouldn't it be worth using them \nfor most of the deployment?  Users would receive both years of added \nsecurity and the opportunity to convince other Bitcoiners to make CTV \npermanent by demonstrating real-world usage.\n\n> If sunsetting were a good idea, one way to think about implementing it\n> might be to code it as:\n> \n>   if (DeploymentActiveAfter(pindexPrev, params, FOO) &&\n>       !DeploymentActiveAfter(pindexPrev, params, FOO_SUNSET))\n>   {\n>       EnforceFoo();\n>   }\n\nDefining at the outset how we'll signal years later if we want to keep \nthe rules seems intelligent to me.\n\nThanks!,\n\n-Dave"
            },
            {
                "author": "alicexbt",
                "date": "2022-04-22T19:05:31",
                "message_text_only": "Hi TheBlueMatt,\n\n>> There are at least three or four separate covenants designs that have\n>>> been posted to this list, and I don't see why we're even remotely\n>>> talking about a specific one as something to move forward with at\n>>> this point.\n>>\n>>> To my knowledge none of these other proposals (drafts, really) have\n>>> actual implementations let alone the many sample usages that exist for\n>> CTV.\n\n> You can fix this! Don't point to something you can easily remedy in the > short-term as an argument\n> for or against something in the long-term.\n\nHow can we fix this? If a proposal already fixed it, does it have some consensus or it was fixed in a different way?\n\n/dev/fd0\n\nSent with [ProtonMail](https://protonmail.com/) secure email.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220422/eb77b668/attachment-0001.html>"
            },
            {
                "author": "Antoine Riard",
                "date": "2022-04-22T19:57:43",
                "message_text_only": "Hi Dave,\n\nI think the transitory idea is interesting, though I would say it would\ntake far more thinking to capture the implications.\n\n> 1. It creates a big footgun.  Anyone who uses CTV without adequately\npreparing for the reversion could easily lose their money.\n\nI think that downside should be weighed far more. If we imagine CTV being\nused in the context of a said off-chain contract, it's not guaranteed you\ncan downgrade to equivalent semantics around the reversion date, or not at\nthe same witness cost which is raising implications for your cached\nfee-bumping reserves.\n\nFurther, this downgrade path might have to be re-signed by your off-chain\ncontract counterparties to migrate a balance distribution locked by CTV to\none relying on pre-signed transactions. This contract \"consensus\" is not\nguaranteed and it could even be leveraged by some unfair counterparties,\nwho have small balances at stake.\n\nIf you can't gracefully downgrade to equivalent semantics or negotiate a\nmigration, it's more likely the safe behavior to adopt would be to close\nthe off-chain contract, ahead of the reversion date.\nAs it might be a critical operation, the toolchain vendors might adopt the\npractice to coordinate the automatic closing with a flag day (e.g \"close\nyour LN channel at block XXX\") or in a relative distributed fashion (e.g\n\"close your LN channel at randomly picked up block between X and Y\"). Such\nrelatively automatic closure, if realized in mass, would provoke mempools\ncongestion. An adversarial event which would cloak the security of all\nexisting off-chain contracts.\n\nTherefore I'm not sure if a reversion date for a contracting primitive\nsoftfork is the soundest off-chain contract engineering practice...\n\nFurther, I think there is one more downside not considered in your list :\nnegative incentives for the CTV ecosystem stakeholders. As a CTV-enabled\nprotocol developer, as you know time is counted to\nprove the worthiness of the primitive, you have an interest to design a\nprotocol and develop/deploy a toolchain on a short-time basis, likely not\nthe soundest principle in system software engineering.\nSuch a development attitude is more likely to grieve the ecosystem with\nsafety-critical bugs/vulnerabilities, of which the exploitation might\neradicate the credibility of your CTV use-case, and with it the wider CTV\necosystem.\n\nSo I think the data-collection method itself to advance the\nconsensus-building process isn't neutral on the outcome yielded. The\nconsensus-building stakeholders themselves aren't immune to the incentives\ndisruptions brought by an innovation in the process.\n\nAntoine\n\nLe mer. 20 avr. 2022 \u00e0 21:06, David A. Harding via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> a \u00e9crit :\n\n> Hi all,\n>\n> The main criticisms I'm aware of against CTV seem to be along the\n> following lines:\n>\n> 1. Usage, either:\n>    a. It won't receive significant real-world usage, or\n>    b. It will be used but we'll end up using something better later\n> 2. An unused CTV will need to be supported forever, creating extra\n> maintenance\n>     burden, increasing security surface, and making it harder to evaluate\n> later\n>     consensus change proposals due to their interactions with CTV\n>\n> Could those concerns be mitigated by making CTV an automatically\n> reverting\n> consensus change with an option to renew?  E.g., redefining OP_NOP4 as\n> OP_CTV\n> for five years from BIP119's activation date and then reverting to\n> OP_NOP4.\n> If, prior to the end of those five years, a second soft fork was\n> activated, it\n> could continue enforcing the CTV rules either for another five years or\n> permanently.\n>\n> This would be similar in nature to the soft fork described in BIP50\n> where the\n> maximum block size was temporarily reduced to address the BDB locks\n> issue and\n> then allowed to return to its original value.  In Script terms, any use\n> of\n> OP_CTV would effectively be:\n>\n>      OP_IF\n>        <arguments> OP_CTV\n>      OP_ELSE\n>        <5 years after activation> OP_CLTV\n>      OP_ENDIF\n>\n> As long as we are absolutely convinced CTV will have no negative effects\n> on the\n> holders or receivers of non-CTV coins, I think an automatically\n> reverting soft\n> fork gives us some ability to experiment with new features without\n> committing\n> ourselves to live with them forever.\n>\n> The main downsides I can see are:\n>\n> 1. It creates a big footgun.  Anyone who uses CTV without adequately\n> preparing for\n>     the reversion could easily lose their money.\n>\n> 2. Miners would be incentivized to censor spends of the reverting\n>     opcode near its reversion date.  E.g., if Alice receives 100 bitcoins\n> to a\n>     script secured only by OP_CTV and attempts to spend them the day\n> before it\n>     becomes OP_NOP4, miners might prefer to skip confirming that\n> transaction even\n>     if it pays a high feerate in favor of spending her 100 bitcoins to\n> themselves\n>     the next day after reversion.\n>\n>     The degree to which this is an issue will depend on the diversity of\n>     hashrate and the willingness of any large percentage of hashrate to\n>     deliberately reorg the chain to remove confirmed transactions.  This\n> could be\n>     mitigated by having OP_CTV change to OP_RETURN, destroying any\n> unspent CTV-only\n>     coins so that any censoring miners only benefited from the (hopefully\n> slight)\n>     decrease in bitcoin currency supply.\n>\n> 3. A bias towards keeping the change.  Even if it turned out very few\n> people\n>     really used CTV, I think there would be a bias at the end of five\n> years towards\n>     \"why not just keep it\".\n>\n> 4. The drama doesn't end.  Activating CTV now, or decisively not\n> activating it,\n>     may bring to an end our frequent discussions about it (though I\n> wouldn't\n>     count on that).  An automatically reverting soft fork would probably\n>     guarantee we'll have further consensus-level discussions about CTV in\n> the\n>     future.\n>\n> Thanks for reading.  I'm curious to hear y'alls thoughts,\n>\n> -Dave\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220422/5b7df9c6/attachment.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2022-04-25T05:12:10",
                "message_text_only": "Good morning Dave, et al.,\n\nI have not read through *all* the mail on this thread, but have read a fair amount of it.\n\nI think the main argument *for* this particular idea is that \"it allows the use of real-world non-toy funds to prove that this feature is something actual users demand\".\n\nAn idea that has been percolating in my various computation systems is to use Smart Contracts Unchained to implement a variant of the Microcode idea I put forth some months ago.\n\nBriefly, define a set of \"more detailed\" opcodes that would allow any general computation to be performed.\nThis is the micro-opcode instruction set.\n\nThen, when a new opcode or behavior is proposed for Bitcoin SCRIPT, create a new mapping from Bitcoin SCRIPT opcodes (including the new opcodes / behavior) to the micro-opcodes.\nThis is a microcode.\n\nThen use Smart Contracts Unchained.\nThis means that we commit to the microcode, plus the SCRIPT that uses the microcode, and instead of sending funds to a new version of the Bitcoin SCRIPT that uses the new opcode(s), send to a \"(n-of-n of users) or (1-of-users and (k-of-n of federation))\".\n\nThis is no worse security-wise than using a federated sidechain, without requiring a complete sidechain implementation, and allows the same code (the micro-opcode interpreter) to be reused across all ideas.\nIt may even be worthwhile to include the micro-opcode interpreter into Bitcoin Core, so that the mechanics of merging in a new opcode, that was prototyped via this mechanism, is easier.\n\nThe federation only needs to interpret the micro-opcode instruction set; it simply translates the (modified) Bitcoin SCRIPT opcodes to the corresponding micro-opcodes and runs that, possibly with reasonable limits on execution time.\nUsers are not required to trust a particular fixed set of k-of-n federation, but may choose any k-of-n they believe is trustworthy.\n\nThis idea does not require consensus at any point in time.\nIt allows \"real\" funds to be used, thus demonstrating real demand for the supposed innovation.\nThe problem is the effective erosion of security to depending on k-of-n of a federation.\n\nPresumably, proponents of a new opcode or feature would run a micro-opcode interpreter faithfully, so that users have a positive experience with their new opcode, and would carefully monitor and vet the micro-opcode interpreters run by other supposed proponents, on the assumption that a sub-goal of such proponents would be to encourage use of the new opcode / feature.\n\nRegards,\nZmnSCPxj"
            }
        ],
        "thread_summary": {
            "title": "Automatically reverting (\"transitory\") soft forks, e.g. for CTV",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Corey Haddad",
                "David A. Harding",
                "Antoine Riard",
                "Anthony Towns",
                "Peter Todd",
                "ZmnSCPxj",
                "alicexbt",
                "Luke Dashjr",
                "Matt Corallo",
                "Jeremy Rubin",
                "James O'Beirne"
            ],
            "messages_count": 26,
            "total_messages_chars_count": 86208
        }
    },
    {
        "title": "[bitcoin-dev] Vaulting (Was: Automatically reverting (\"transitory\") soft forks)",
        "thread_messages": [
            {
                "author": "Russell O'Connor",
                "date": "2022-04-22T17:25:12",
                "message_text_only": "On Fri, Apr 22, 2022 at 12:29 PM James O'Beirne via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> This vault design (https://github.com/jamesob/simple-ctv-vault)\n> is a good benchmark for evaluating covenant proposals because it's (i)\n> simple and (ii) has high utility for many users of Bitcoin. I would\n> love to see it implemented in one or all of these alternatives, but I\n> am almost certain no one will do it in the next few months because the\n> implementations, tooling, and in some cases even complete\n> specifications do not exist.\n>\n\nQuoting from the link above:\nDetecting theft\n\nThis unvault step is critical because it allows us to detect unexpected\nbehavior. If an attacker had stolen our hot wallet keys, their only choice\nto succeed in the theft is to trigger an unvault.\n\n\nIt's not the attackers *only choice to succeed*.  If an attacker steals the\nhot key, then they have the option to simply wait for the user to unvault\ntheir funds of their own accord and then race / outspend the users\ntransaction with their own.  Indeed, this is what we expect would happen in\nthe dark forest.\n\nA key feature of the MES vault design is that the destination address is\nincluded, and committed to, by the unvaulting step.  However, this can only\nbe achieved with a less constrained design for covenants.\n\nI suppose I can see that the damage from a hot key theft could be more\ncontained under some circumstances using a CTV vault, but let us not\noverstate the value of the CTV vault.\n\nAnd that's not even mentioning the issues already noted by the document\nregarding fee management, which would likely also benefit from a less\nconstrained design for covenants.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220422/a55ab1e9/attachment.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2022-04-23T04:56:02",
                "message_text_only": "> If an attacker steals the hot key, then they have the option to simply\nwait for the user to unvault their funds\n\nThis is definitely true. Its kind of a problem with most vault proposals.\nIts one of the primary reasons I designed an alternative proposal\n<https://github.com/fresheneesz/bip-efficient-bitcoin-vaults>. The\nOP_BEFOREBLOCKVERIFY opcode I proposed solves this security hole by\nautomatically swapping control of the UTXO over to the intended recipient\nafter a timeout. Alternatively, if OP_BBV weren't available, OP_POS in\nconjunction with OP_CD could encode things such that the transaction\nwith the hot key could only spend to the intended recipient.\n\nI'm curious if there are any other covenant proposals that have a solution\nto that problem. I'm not aware of any that do other than my proposal.\n\nOn Fri, Apr 22, 2022 at 12:25 PM Russell O'Connor via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Fri, Apr 22, 2022 at 12:29 PM James O'Beirne via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> This vault design (https://github.com/jamesob/simple-ctv-vault)\n>> is a good benchmark for evaluating covenant proposals because it's (i)\n>> simple and (ii) has high utility for many users of Bitcoin. I would\n>> love to see it implemented in one or all of these alternatives, but I\n>> am almost certain no one will do it in the next few months because the\n>> implementations, tooling, and in some cases even complete\n>> specifications do not exist.\n>>\n>\n> Quoting from the link above:\n> Detecting theft\n>\n> This unvault step is critical because it allows us to detect unexpected\n> behavior. If an attacker had stolen our hot wallet keys, their only choice\n> to succeed in the theft is to trigger an unvault.\n>\n>\n> It's not the attackers *only choice to succeed*.  If an attacker steals\n> the hot key, then they have the option to simply wait for the user to\n> unvault their funds of their own accord and then race / outspend the users\n> transaction with their own.  Indeed, this is what we expect would happen in\n> the dark forest.\n>\n> A key feature of the MES vault design is that the destination address is\n> included, and committed to, by the unvaulting step.  However, this can only\n> be achieved with a less constrained design for covenants.\n>\n> I suppose I can see that the damage from a hot key theft could be more\n> contained under some circumstances using a CTV vault, but let us not\n> overstate the value of the CTV vault.\n>\n> And that's not even mentioning the issues already noted by the document\n> regarding fee management, which would likely also benefit from a less\n> constrained design for covenants.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220422/cd3d2e54/attachment-0001.html>"
            },
            {
                "author": "Russell O'Connor",
                "date": "2022-04-23T14:02:36",
                "message_text_only": "On Sat, Apr 23, 2022 at 12:56 AM Billy Tetrud <billy.tetrud at gmail.com>\nwrote:\n\n> > If an attacker steals the hot key, then they have the option to simply\n> wait for the user to unvault their funds\n>\n> This is definitely true. Its kind of a problem with most vault proposals.\n> Its one of the primary reasons I designed an alternative proposal\n> <https://github.com/fresheneesz/bip-efficient-bitcoin-vaults>. The\n> OP_BEFOREBLOCKVERIFY opcode I proposed solves this security hole by\n> automatically swapping control of the UTXO over to the intended recipient\n> after a timeout. Alternatively, if OP_BBV weren't available, OP_POS in\n> conjunction with OP_CD could encode things such that the transaction\n> with the hot key could only spend to the intended recipient.\n>\n> I'm curious if there are any other covenant proposals that have a solution\n> to that problem. I'm not aware of any that do other than my proposal.\n>\n\nAs I noted, the original MES vault\nhttps://fc16.ifca.ai/bitcoin/papers/MES16.pdf, commits to the destination\naddress during unvaulting.  Their proposal uses CheckOutputVerify that\nchecks if a given output has a given amount and a given scriptPubKey.  (The\nMES vault then goes on to add a PATTERN parameter to OP_COV's scriptPubKey\nparameter in order to make a recursive vault, but that is used to deter\ncold-key theft, not hot-key theft).\n\nOur paper https://fc17.ifca.ai/bitcoin/papers/bitcoin17-final28.pdf\nimpelments the MES vault in Elements (alpha) using CAT and\nCHECKSIGFROMSTACK.  While I wouldn't necessarily call it a covenant\nproposal, rather it is an observation that these opcodes happen to be\nadequate for the task.\n\nWith such a big security caveat, I really don't find CTV vaults a\ncompelling example of using CTV.  Sure, if CTV happens to exist, by all\nmeans do whatever you like.  But if anything, the CTV vault scheme instead\nillustrates BlueMatt's point that we aren't really finished with covenant\nresearch design yet:\n\nQ: What ways can we build a secured vault that commits to the destination\naddress?\nQ: Are there elegant ways of building secure vaults by using CTV plus\nsomething else.  Presumably CAT + CTV would be enough, though maybe some\npeople are concerned that CAT might enable recursive covenants (if people\naren't willing to have even CAT, I don't see how we will ever really have\nprogrammable money).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220423/4e7b865d/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2022-04-23T18:24:01",
                "message_text_only": "Still trying to make sure I understand this concern, let me know if I get this all wrong.\n\nOn 4/22/22 10:25 AM, Russell O'Connor via bitcoin-dev wrote:\n> It's not the attackers *only choice to succeed*.\u00a0 If an attacker steals the hot key, then they have \n> the option to simply wait for the user to unvault their funds of their own accord and then race / \n> outspend the users transaction with their own.\u00a0 Indeed, this is what we expect would happen in the \n> dark forest.\n\nRight, a key security assumption of the CTV-based vaults would be that you MUST NOT EVER withdraw \nmore in one go than your hot wallet risk tolerance, but given that your attack isn't any worse than \nsimply stealing the hot wallet key immediately after a withdraw.\n\nIt does have the drawback that if you ever get a hot wallet key stole you have to rotate all of your \nCTV outputs and your CTV outputs must never be any larger than your hot wallet risk tolerance \namount, both of which are somewhat frustrating limitations, but not security limitations, only \npractical ones.\n\n> And that's not even mentioning the issues already noted by the document regarding fee management, \n> which would likely also benefit from a less constrained design for covenants.\n\nOf course I've always been in favor of a less constrained covenants design from day one for ten \nreasons, but that's a whole other rabbit hole :)"
            },
            {
                "author": "Russell O'Connor",
                "date": "2022-04-23T19:30:56",
                "message_text_only": "Okay, Matt explained to me the intended application of CTV vaults off list,\nso I have a better understanding now.\n\nThe CTV vault scheme is designed as an improvement over the traditional\nmanagement of hot-wallets and cold-wallets.  The CTV vault is logically on\nthe \"cold-side\" and lets funds be sent from the \"cold\" side to *one's own*\nthe hot wallet after the unvaulting delay.  In this case, the hot wallet\nfunds are always at risk, so it isn't unexpected that those funds could be\nstolen.  After all, that is how hot wallets are today.  The advantage is\nthat funds can be moved from the \"cold\" side without needing to dig out the\ncold keys.\n\nThe MES vault scheme applies to a different scenario.  In the MES case it\nis the hot funds are inside the vault, and it is the hot key that unvaults\nthe funds and sends them to *customer's addresses* after a delay.  If the\nhot-key is used in any unauthorised way, then funds can be sent to the\naddress of the cold key (the MES vault actually does something fancy in\ncase of recovery, but it could be adapted to simply send funds to a cold\nwallet).\n\nThe MES vault lie somewhere between \"better\" and \"different\" when compared\nto the CTV vault.  If one is unwilling to use the MES vault on the hot side\nand have every withdrawl vetted, then, while you could use the MES design\non the cold side like the CTV vault, it wouldn't really offer you any\nadvantages over a CTV vault.  However, if you are interested in managing\nall your payments through a vault (as I've been imagining) then the CTV\nvault comes across as ineffective when compared to an MES style vault.\n\nOn Sat, Apr 23, 2022 at 2:24 PM Matt Corallo <lf-lists at mattcorallo.com>\nwrote:\n\n> Still trying to make sure I understand this concern, let me know if I get\n> this all wrong.\n>\n> On 4/22/22 10:25 AM, Russell O'Connor via bitcoin-dev wrote:\n> > It's not the attackers *only choice to succeed*.  If an attacker steals\n> the hot key, then they have\n> > the option to simply wait for the user to unvault their funds of their\n> own accord and then race /\n> > outspend the users transaction with their own.  Indeed, this is what we\n> expect would happen in the\n> > dark forest.\n>\n> Right, a key security assumption of the CTV-based vaults would be that you\n> MUST NOT EVER withdraw\n> more in one go than your hot wallet risk tolerance, but given that your\n> attack isn't any worse than\n> simply stealing the hot wallet key immediately after a withdraw.\n>\n> It does have the drawback that if you ever get a hot wallet key stole you\n> have to rotate all of your\n> CTV outputs and your CTV outputs must never be any larger than your hot\n> wallet risk tolerance\n> amount, both of which are somewhat frustrating limitations, but not\n> security limitations, only\n> practical ones.\n>\n> > And that's not even mentioning the issues already noted by the document\n> regarding fee management,\n> > which would likely also benefit from a less constrained design for\n> covenants.\n>\n> Of course I've always been in favor of a less constrained covenants design\n> from day one for ten\n> reasons, but that's a whole other rabbit hole :)\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220423/8077c9f2/attachment-0001.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2022-04-24T23:03:52",
                "message_text_only": "@Matt\n>  both of which are somewhat frustrating limitations, but not security\nlimitations, only practical ones.\n\nSo I think the first limitation you mentioned (that if your hot wallet's\nkey gets stolen you need) can be legitimately considered a security\nlimitation. Not because you need to rotate your keys, but because you might\n*not know* your hot wallet key has been stolen. If you unvault an output to\nyour hot wallet, the thief could be lying in wait, ready to steal those\nfunds upon them landing. At that point, you would then know your hot wallet\nkey was compromised and could rotate your vault keys in order to prevent\nfurther theft. However, the fact that there is a clear theft vulnerability\nis something I would say should be considered a \"security limitation\".\n\nAs you mentioned, this is of course also a security limitation of a hot\nwallet, so this setup definitely has a lot of advantages over a simple hot\nwallet. However, if you compare it against a multisig wallet (eg 2 of 3),\nyou can see that while theft of a single key would never result in any\ntheft in that setup, it could in a CTV vault. The other trade offs there\nare ones of practicality and convenience.\n\nThis isn't to say a CTV vault wouldn't be useful. Just that it has\nsignificant trade offs.\n\n@Russel\n> the original MES vault .. commits to the destination address during\nunvaulting\n\nI see. Looking at the MES16 paper, OP_COV isn't described clearly enough\nfor me to understand that it does that. However, I can imagine how it\n*might* do that.\n\nOne possibility is that the intended destination is predetermined and\nhardcoded. This wouldn't be very useful, and also wouldn't be different\nthan how CTV could do it, so I assume that isn't what you envisioned this\ndoing.\n\nI can imagine instead that the definition of the pattern could be specified\nas a number indicating the number of stack items in the pattern, followed\nby that number of stack items. If that's how it is done, I can see the user\ninputting an intended destination script (corresponding to the intended\ndestination address) which would then be somehow rotated in to the right\nspot within the pattern, allowing the pattern to specify the coins\neventually reaching an address with that script. However, this could be\nquite cumbersome, and would require fully specifying the scripts along the\ncovenant pathways leading to a fair amount of information duplication\n(since scripts must be specified both in the covenant and in spending the\nsubsequent output). Both of these things would seem to make OP_COV in\npractice quite an expensive opcode to spend with. It also means that, since\nthe transactor must fully specify the script, its not possible to take\nadvantage of taproot's script hiding capabilities (were it to send to a\ntaproot address).\n\nHowever, my assumptions might be incorrect. If you think OP_COV would be a\nuseful opcode, I would encourage you to write up a complete specification.\n\n> What ways can we build a secured vault that commits to the destination\naddress?\n\nSome kind of passed-through state allows doing this. With OP_COV (if my\nassumptions above are correct), the intended destination can be passed\nthrough the output script pattern(s). With my own proposed\nop_pushoutputstack\n<https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/pos/bip-pushoutputstack.md>,\nstate is passed as an attachment on the output more directly. Curious what\nyou think about that proposal.\n\n> Are there elegant ways of building secure vaults by using CTV plus\nsomething else.\n\nSince CTV predefines all the transactions that can happen under its\ncontrol, passed state like this can't help because any dynamic state would\nchange the template and render the CTV transaction invalid. I don't see any\nway of solving this problem for CTV.\n\nI'm curious how you think op_cat could enable this with CTV (other than the\ncat+schnorr tricks that don't require CTV at all).\n\n\n\nOn Sat, Apr 23, 2022 at 2:31 PM Russell O'Connor via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Okay, Matt explained to me the intended application of CTV vaults off\n> list, so I have a better understanding now.\n>\n> The CTV vault scheme is designed as an improvement over the traditional\n> management of hot-wallets and cold-wallets.  The CTV vault is logically on\n> the \"cold-side\" and lets funds be sent from the \"cold\" side to *one's own*\n> the hot wallet after the unvaulting delay.  In this case, the hot wallet\n> funds are always at risk, so it isn't unexpected that those funds could be\n> stolen.  After all, that is how hot wallets are today.  The advantage is\n> that funds can be moved from the \"cold\" side without needing to dig out the\n> cold keys.\n>\n> The MES vault scheme applies to a different scenario.  In the MES case it\n> is the hot funds are inside the vault, and it is the hot key that unvaults\n> the funds and sends them to *customer's addresses* after a delay.  If the\n> hot-key is used in any unauthorised way, then funds can be sent to the\n> address of the cold key (the MES vault actually does something fancy in\n> case of recovery, but it could be adapted to simply send funds to a cold\n> wallet).\n>\n> The MES vault lie somewhere between \"better\" and \"different\" when compared\n> to the CTV vault.  If one is unwilling to use the MES vault on the hot side\n> and have every withdrawl vetted, then, while you could use the MES design\n> on the cold side like the CTV vault, it wouldn't really offer you any\n> advantages over a CTV vault.  However, if you are interested in managing\n> all your payments through a vault (as I've been imagining) then the CTV\n> vault comes across as ineffective when compared to an MES style vault.\n>\n> On Sat, Apr 23, 2022 at 2:24 PM Matt Corallo <lf-lists at mattcorallo.com>\n> wrote:\n>\n>> Still trying to make sure I understand this concern, let me know if I get\n>> this all wrong.\n>>\n>> On 4/22/22 10:25 AM, Russell O'Connor via bitcoin-dev wrote:\n>> > It's not the attackers *only choice to succeed*.  If an attacker steals\n>> the hot key, then they have\n>> > the option to simply wait for the user to unvault their funds of their\n>> own accord and then race /\n>> > outspend the users transaction with their own.  Indeed, this is what we\n>> expect would happen in the\n>> > dark forest.\n>>\n>> Right, a key security assumption of the CTV-based vaults would be that\n>> you MUST NOT EVER withdraw\n>> more in one go than your hot wallet risk tolerance, but given that your\n>> attack isn't any worse than\n>> simply stealing the hot wallet key immediately after a withdraw.\n>>\n>> It does have the drawback that if you ever get a hot wallet key stole you\n>> have to rotate all of your\n>> CTV outputs and your CTV outputs must never be any larger than your hot\n>> wallet risk tolerance\n>> amount, both of which are somewhat frustrating limitations, but not\n>> security limitations, only\n>> practical ones.\n>>\n>> > And that's not even mentioning the issues already noted by the document\n>> regarding fee management,\n>> > which would likely also benefit from a less constrained design for\n>> covenants.\n>>\n>> Of course I've always been in favor of a less constrained covenants\n>> design from day one for ten\n>> reasons, but that's a whole other rabbit hole :)\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220424/d2cb24bb/attachment-0001.html>"
            },
            {
                "author": "Nadav Ivgi",
                "date": "2022-04-25T17:27:11",
                "message_text_only": "On Mon, Apr 25, 2022 at 1:36 PM Billy Tetrud via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> If you unvault an output to your hot wallet, the thief could be lying in\nwait, ready to steal those funds upon them landing.\n\nOne way to mitigate some of the risk is to split up your UTXOs so that your\nhot wallet exposure is limited.\n\n> However, if you compare it against a multisig wallet (eg 2 of 3), you can\nsee that while theft of a single key would never result in any theft in\nthat setup, it could in a CTV vault.\n\nThese are two orthogonal things though. You can have a CTV vault where the\nhot key signer is a multisig to get the advantages of both. In this case\nthe addition of a CTV-based unvaulting procedure is an improvement compared\nto not using it.\n\nshesek\n\nOn Mon, Apr 25, 2022 at 1:36 PM Billy Tetrud via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> @Matt\n> >  both of which are somewhat frustrating limitations, but not security\n> limitations, only practical ones.\n>\n> So I think the first limitation you mentioned (that if your hot wallet's\n> key gets stolen you need) can be legitimately considered a security\n> limitation. Not because you need to rotate your keys, but because you might\n> *not know* your hot wallet key has been stolen. If you unvault an output to\n> your hot wallet, the thief could be lying in wait, ready to steal those\n> funds upon them landing. At that point, you would then know your hot wallet\n> key was compromised and could rotate your vault keys in order to prevent\n> further theft. However, the fact that there is a clear theft vulnerability\n> is something I would say should be considered a \"security limitation\".\n>\n> As you mentioned, this is of course also a security limitation of a hot\n> wallet, so this setup definitely has a lot of advantages over a simple hot\n> wallet. However, if you compare it against a multisig wallet (eg 2 of 3),\n> you can see that while theft of a single key would never result in any\n> theft in that setup, it could in a CTV vault. The other trade offs there\n> are ones of practicality and convenience.\n>\n> This isn't to say a CTV vault wouldn't be useful. Just that it has\n> significant trade offs.\n>\n> @Russel\n> > the original MES vault .. commits to the destination address during\n> unvaulting\n>\n> I see. Looking at the MES16 paper, OP_COV isn't described clearly enough\n> for me to understand that it does that. However, I can imagine how it\n> *might* do that.\n>\n> One possibility is that the intended destination is predetermined and\n> hardcoded. This wouldn't be very useful, and also wouldn't be different\n> than how CTV could do it, so I assume that isn't what you envisioned this\n> doing.\n>\n> I can imagine instead that the definition of the pattern could be\n> specified as a number indicating the number of stack items in the pattern,\n> followed by that number of stack items. If that's how it is done, I can see\n> the user inputting an intended destination script (corresponding to the\n> intended destination address) which would then be somehow rotated in to the\n> right spot within the pattern, allowing the pattern to specify the coins\n> eventually reaching an address with that script. However, this could be\n> quite cumbersome, and would require fully specifying the scripts along the\n> covenant pathways leading to a fair amount of information duplication\n> (since scripts must be specified both in the covenant and in spending the\n> subsequent output). Both of these things would seem to make OP_COV in\n> practice quite an expensive opcode to spend with. It also means that, since\n> the transactor must fully specify the script, its not possible to take\n> advantage of taproot's script hiding capabilities (were it to send to a\n> taproot address).\n>\n> However, my assumptions might be incorrect. If you think OP_COV would be a\n> useful opcode, I would encourage you to write up a complete specification.\n>\n> > What ways can we build a secured vault that commits to the destination\n> address?\n>\n> Some kind of passed-through state allows doing this. With OP_COV (if my\n> assumptions above are correct), the intended destination can be passed\n> through the output script pattern(s). With my own proposed\n> op_pushoutputstack\n> <https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/pos/bip-pushoutputstack.md>,\n> state is passed as an attachment on the output more directly. Curious what\n> you think about that proposal.\n>\n> > Are there elegant ways of building secure vaults by using CTV plus\n> something else.\n>\n> Since CTV predefines all the transactions that can happen under its\n> control, passed state like this can't help because any dynamic state would\n> change the template and render the CTV transaction invalid. I don't see any\n> way of solving this problem for CTV.\n>\n> I'm curious how you think op_cat could enable this with CTV (other than\n> the cat+schnorr tricks that don't require CTV at all).\n>\n>\n>\n> On Sat, Apr 23, 2022 at 2:31 PM Russell O'Connor via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Okay, Matt explained to me the intended application of CTV vaults off\n>> list, so I have a better understanding now.\n>>\n>> The CTV vault scheme is designed as an improvement over the traditional\n>> management of hot-wallets and cold-wallets.  The CTV vault is logically on\n>> the \"cold-side\" and lets funds be sent from the \"cold\" side to *one's own*\n>> the hot wallet after the unvaulting delay.  In this case, the hot wallet\n>> funds are always at risk, so it isn't unexpected that those funds could be\n>> stolen.  After all, that is how hot wallets are today.  The advantage is\n>> that funds can be moved from the \"cold\" side without needing to dig out the\n>> cold keys.\n>>\n>> The MES vault scheme applies to a different scenario.  In the MES case it\n>> is the hot funds are inside the vault, and it is the hot key that unvaults\n>> the funds and sends them to *customer's addresses* after a delay.  If the\n>> hot-key is used in any unauthorised way, then funds can be sent to the\n>> address of the cold key (the MES vault actually does something fancy in\n>> case of recovery, but it could be adapted to simply send funds to a cold\n>> wallet).\n>>\n>> The MES vault lie somewhere between \"better\" and \"different\" when\n>> compared to the CTV vault.  If one is unwilling to use the MES vault on the\n>> hot side and have every withdrawl vetted, then, while you could use the MES\n>> design on the cold side like the CTV vault, it wouldn't really offer you\n>> any advantages over a CTV vault.  However, if you are interested in\n>> managing all your payments through a vault (as I've been imagining) then\n>> the CTV vault comes across as ineffective when compared to an MES style\n>> vault.\n>>\n>> On Sat, Apr 23, 2022 at 2:24 PM Matt Corallo <lf-lists at mattcorallo.com>\n>> wrote:\n>>\n>>> Still trying to make sure I understand this concern, let me know if I\n>>> get this all wrong.\n>>>\n>>> On 4/22/22 10:25 AM, Russell O'Connor via bitcoin-dev wrote:\n>>> > It's not the attackers *only choice to succeed*.  If an attacker\n>>> steals the hot key, then they have\n>>> > the option to simply wait for the user to unvault their funds of their\n>>> own accord and then race /\n>>> > outspend the users transaction with their own.  Indeed, this is what\n>>> we expect would happen in the\n>>> > dark forest.\n>>>\n>>> Right, a key security assumption of the CTV-based vaults would be that\n>>> you MUST NOT EVER withdraw\n>>> more in one go than your hot wallet risk tolerance, but given that your\n>>> attack isn't any worse than\n>>> simply stealing the hot wallet key immediately after a withdraw.\n>>>\n>>> It does have the drawback that if you ever get a hot wallet key stole\n>>> you have to rotate all of your\n>>> CTV outputs and your CTV outputs must never be any larger than your hot\n>>> wallet risk tolerance\n>>> amount, both of which are somewhat frustrating limitations, but not\n>>> security limitations, only\n>>> practical ones.\n>>>\n>>> > And that's not even mentioning the issues already noted by the\n>>> document regarding fee management,\n>>> > which would likely also benefit from a less constrained design for\n>>> covenants.\n>>>\n>>> Of course I've always been in favor of a less constrained covenants\n>>> design from day one for ten\n>>> reasons, but that's a whole other rabbit hole :)\n>>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220425/4fb056eb/attachment-0001.html>"
            },
            {
                "author": "Russell O'Connor",
                "date": "2022-04-25T22:27:50",
                "message_text_only": "On Sun, Apr 24, 2022 at 7:04 PM Billy Tetrud <billy.tetrud at gmail.com> wrote:\n\n> @Russel\n> > the original MES vault .. commits to the destination address during\n> unvaulting\n>\n> I see. Looking at the MES16 paper, OP_COV isn't described clearly enough\n> for me to understand that it does that. However, I can imagine how it\n> *might* do that.\n>\n> One possibility is that the intended destination is predetermined and\n> hardcoded. This wouldn't be very useful, and also wouldn't be different\n> than how CTV could do it, so I assume that isn't what you envisioned this\n> doing.\n>\n> I can imagine instead that the definition of the pattern could be\n> specified as a number indicating the number of stack items in the pattern,\n> followed by that number of stack items. If that's how it is done, I can see\n> the user inputting an intended destination script (corresponding to the\n> intended destination address) which would then be somehow rotated in to the\n> right spot within the pattern, allowing the pattern to specify the coins\n> eventually reaching an address with that script. However, this could be\n> quite cumbersome, and would require fully specifying the scripts along the\n> covenant pathways leading to a fair amount of information duplication\n> (since scripts must be specified both in the covenant and in spending the\n> subsequent output). Both of these things would seem to make OP_COV in\n> practice quite an expensive opcode to spend with. It also means that, since\n> the transactor must fully specify the script, its not possible to take\n> advantage of taproot's script hiding capabilities (were it to send to a\n> taproot address).\n>\n\nSo my understanding is that the COV proposal in MES lets you check that the\noutput's scriptPubKey matches the corresponding script item from the stack,\nbut the script item's value additionally allows some wildcard values.  In\nparticular, it makes use of the otherwise reserved opcodes OP_PUBKEY, and\nOP_PUBKEYHASH as wildcards representing any, let's say, 32-byte or 20-byte\npush value.\n\nIf you just used COV by itself, then these wildcards would be third-party\nmalleable, but you also have to sign the transaction with the hot wallet\nkey, which removes the malleability.\n\nNo need to rotate anything into place.\n\nI hope this makes sense.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220425/99e1a76f/attachment.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2022-04-27T01:52:12",
                "message_text_only": "@Russell\n> OP_PUBKEY, and OP_PUBKEYHASH as wildcards\n\nAh I see. Very interesting. Thanks for clarifying.\n\n@Nadav\n> You can have a CTV vault where the hot key signer is a multisig to get\nthe advantages of both.\n\nYes, you can create a CTV vault setup where you unvault to a multisig\nwallet, but you don't get the advantages of both. Rather you get none of\nthe advantages and still have all the downsides you get with a multisig\nwallet. The whole point of a wallet vault is that you can get the security\nof a multisig wallet without having to sign using as many keys.\n\nOn Mon, Apr 25, 2022 at 5:28 PM Russell O'Connor <roconnor at blockstream.com>\nwrote:\n\n> On Sun, Apr 24, 2022 at 7:04 PM Billy Tetrud <billy.tetrud at gmail.com>\n> wrote:\n>\n>> @Russel\n>> > the original MES vault .. commits to the destination address during\n>> unvaulting\n>>\n>> I see. Looking at the MES16 paper, OP_COV isn't described clearly enough\n>> for me to understand that it does that. However, I can imagine how it\n>> *might* do that.\n>>\n>> One possibility is that the intended destination is predetermined and\n>> hardcoded. This wouldn't be very useful, and also wouldn't be different\n>> than how CTV could do it, so I assume that isn't what you envisioned this\n>> doing.\n>>\n>> I can imagine instead that the definition of the pattern could be\n>> specified as a number indicating the number of stack items in the pattern,\n>> followed by that number of stack items. If that's how it is done, I can see\n>> the user inputting an intended destination script (corresponding to the\n>> intended destination address) which would then be somehow rotated in to the\n>> right spot within the pattern, allowing the pattern to specify the coins\n>> eventually reaching an address with that script. However, this could be\n>> quite cumbersome, and would require fully specifying the scripts along the\n>> covenant pathways leading to a fair amount of information duplication\n>> (since scripts must be specified both in the covenant and in spending the\n>> subsequent output). Both of these things would seem to make OP_COV in\n>> practice quite an expensive opcode to spend with. It also means that, since\n>> the transactor must fully specify the script, its not possible to take\n>> advantage of taproot's script hiding capabilities (were it to send to a\n>> taproot address).\n>>\n>\n> So my understanding is that the COV proposal in MES lets you check that\n> the output's scriptPubKey matches the corresponding script item from the\n> stack, but the script item's value additionally allows some wildcard\n> values.  In particular, it makes use of the otherwise reserved opcodes\n> OP_PUBKEY, and OP_PUBKEYHASH as wildcards representing any, let's say,\n> 32-byte or 20-byte push value.\n>\n> If you just used COV by itself, then these wildcards would be third-party\n> malleable, but you also have to sign the transaction with the hot wallet\n> key, which removes the malleability.\n>\n> No need to rotate anything into place.\n>\n> I hope this makes sense.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220426/3a386891/attachment-0001.html>"
            },
            {
                "author": "Nadav Ivgi",
                "date": "2022-04-28T23:14:03",
                "message_text_only": "> The whole point of a wallet vault is that you can get the security of a\nmultisig wallet without having to sign using as many keys.\n\nIn my view, the point of a vault is the ability to keep your primary wallet\nkeys in *highly* deep cold storage (e.g. metal backup only, not loaded on\nany HW wallets, with geographically distributed shares and a slow\ncumbersome process for collecting them), which is made possible because\nyou're not supposed to actually need to use these keys, except for the\nextraordinary (typically once or twice in a lifetime?) circumstances of\ntheft.\n\nThe user can then use a warmer model for the keys they use more frequently\nfor the covenant-encumbered two-step spending. But these warmer keys can\nthemselves also be cold and/or multi-sig, yet more accessible. For example,\na 2-of-2 with standard hardware wallets you have within reach in your\napartment.\n\nSo if you have a cold wallet that you anticipate having to access once\nevery, say, 2-3 months, no matter what scheme you currently use to secure\nit, you can improve your overall security by using that same scheme for\nsecuring the covenant-encumbered keys, then use a colder more secure scheme\nfor your primary keys under the assumption that you'll only have to access\nthem at most once every several years.\n\nIIUC what you were describing is that you can use your regular multisig\nscheme for the primary cold wallet keys, and a 1-of-1 for the\ncovenant-encumbered keys (which can even be hot on your phone etc).\n\nBoth approaches are valid, one gets you more security while the other gets\nyou more convenience. And there is of course a whole range of options that\ncan be chosen in between that gets you some of both.\n\nshesek\n\nOn Wed, Apr 27, 2022 at 11:09 AM Billy Tetrud via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> @Russell\n> > OP_PUBKEY, and OP_PUBKEYHASH as wildcards\n>\n> Ah I see. Very interesting. Thanks for clarifying.\n>\n> @Nadav\n> > You can have a CTV vault where the hot key signer is a multisig to get\n> the advantages of both.\n>\n> Yes, you can create a CTV vault setup where you unvault to a multisig\n> wallet, but you don't get the advantages of both. Rather you get none of\n> the advantages and still have all the downsides you get with a multisig\n> wallet. The whole point of a wallet vault is that you can get the security\n> of a multisig wallet without having to sign using as many keys.\n>\n> On Mon, Apr 25, 2022 at 5:28 PM Russell O'Connor <roconnor at blockstream.com>\n> wrote:\n>\n>> On Sun, Apr 24, 2022 at 7:04 PM Billy Tetrud <billy.tetrud at gmail.com>\n>> wrote:\n>>\n>>> @Russel\n>>> > the original MES vault .. commits to the destination address during\n>>> unvaulting\n>>>\n>>> I see. Looking at the MES16 paper, OP_COV isn't described clearly enough\n>>> for me to understand that it does that. However, I can imagine how it\n>>> *might* do that.\n>>>\n>>> One possibility is that the intended destination is predetermined and\n>>> hardcoded. This wouldn't be very useful, and also wouldn't be different\n>>> than how CTV could do it, so I assume that isn't what you envisioned this\n>>> doing.\n>>>\n>>> I can imagine instead that the definition of the pattern could be\n>>> specified as a number indicating the number of stack items in the pattern,\n>>> followed by that number of stack items. If that's how it is done, I can see\n>>> the user inputting an intended destination script (corresponding to the\n>>> intended destination address) which would then be somehow rotated in to the\n>>> right spot within the pattern, allowing the pattern to specify the coins\n>>> eventually reaching an address with that script. However, this could be\n>>> quite cumbersome, and would require fully specifying the scripts along the\n>>> covenant pathways leading to a fair amount of information duplication\n>>> (since scripts must be specified both in the covenant and in spending the\n>>> subsequent output). Both of these things would seem to make OP_COV in\n>>> practice quite an expensive opcode to spend with. It also means that, since\n>>> the transactor must fully specify the script, its not possible to take\n>>> advantage of taproot's script hiding capabilities (were it to send to a\n>>> taproot address).\n>>>\n>>\n>> So my understanding is that the COV proposal in MES lets you check that\n>> the output's scriptPubKey matches the corresponding script item from the\n>> stack, but the script item's value additionally allows some wildcard\n>> values.  In particular, it makes use of the otherwise reserved opcodes\n>> OP_PUBKEY, and OP_PUBKEYHASH as wildcards representing any, let's say,\n>> 32-byte or 20-byte push value.\n>>\n>> If you just used COV by itself, then these wildcards would be third-party\n>> malleable, but you also have to sign the transaction with the hot wallet\n>> key, which removes the malleability.\n>>\n>> No need to rotate anything into place.\n>>\n>> I hope this makes sense.\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220429/dfe5c22b/attachment-0001.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2022-04-28T23:51:31",
                "message_text_only": ">  the point of a vault is the ability to keep your primary wallet keys in\n*highly* deep cold storage\n\nI think we're both right. You're also right that there are many possible\nconfigurations including the one you mentioned. I can see good reasons to\nuse multisig even if both keys are quickly on hand. My only point was that\nusing a wallet vault that unvaults to a multisig isn't a best of both\nworlds, but rather has different trade offs. Sounds like we agree.\n\nOn Thu, Apr 28, 2022 at 6:14 PM Nadav Ivgi <nadav at shesek.info> wrote:\n\n> > The whole point of a wallet vault is that you can get the security of a\n> multisig wallet without having to sign using as many keys.\n>\n> In my view, the point of a vault is the ability to keep your primary\n> wallet keys in *highly* deep cold storage (e.g. metal backup only, not\n> loaded on any HW wallets, with geographically distributed shares and a slow\n> cumbersome process for collecting them), which is made possible because\n> you're not supposed to actually need to use these keys, except for the\n> extraordinary (typically once or twice in a lifetime?) circumstances of\n> theft.\n>\n> The user can then use a warmer model for the keys they use more frequently\n> for the covenant-encumbered two-step spending. But these warmer keys can\n> themselves also be cold and/or multi-sig, yet more accessible. For example,\n> a 2-of-2 with standard hardware wallets you have within reach in your\n> apartment.\n>\n> So if you have a cold wallet that you anticipate having to access once\n> every, say, 2-3 months, no matter what scheme you currently use to secure\n> it, you can improve your overall security by using that same scheme for\n> securing the covenant-encumbered keys, then use a colder more secure scheme\n> for your primary keys under the assumption that you'll only have to access\n> them at most once every several years.\n>\n> IIUC what you were describing is that you can use your regular multisig\n> scheme for the primary cold wallet keys, and a 1-of-1 for the\n> covenant-encumbered keys (which can even be hot on your phone etc).\n>\n> Both approaches are valid, one gets you more security while the other gets\n> you more convenience. And there is of course a whole range of options that\n> can be chosen in between that gets you some of both.\n>\n> shesek\n>\n> On Wed, Apr 27, 2022 at 11:09 AM Billy Tetrud via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> @Russell\n>> > OP_PUBKEY, and OP_PUBKEYHASH as wildcards\n>>\n>> Ah I see. Very interesting. Thanks for clarifying.\n>>\n>> @Nadav\n>> > You can have a CTV vault where the hot key signer is a multisig to get\n>> the advantages of both.\n>>\n>> Yes, you can create a CTV vault setup where you unvault to a multisig\n>> wallet, but you don't get the advantages of both. Rather you get none of\n>> the advantages and still have all the downsides you get with a multisig\n>> wallet. The whole point of a wallet vault is that you can get the security\n>> of a multisig wallet without having to sign using as many keys.\n>>\n>> On Mon, Apr 25, 2022 at 5:28 PM Russell O'Connor <\n>> roconnor at blockstream.com> wrote:\n>>\n>>> On Sun, Apr 24, 2022 at 7:04 PM Billy Tetrud <billy.tetrud at gmail.com>\n>>> wrote:\n>>>\n>>>> @Russel\n>>>> > the original MES vault .. commits to the destination address during\n>>>> unvaulting\n>>>>\n>>>> I see. Looking at the MES16 paper, OP_COV isn't described clearly\n>>>> enough for me to understand that it does that. However, I can imagine how\n>>>> it *might* do that.\n>>>>\n>>>> One possibility is that the intended destination is predetermined and\n>>>> hardcoded. This wouldn't be very useful, and also wouldn't be different\n>>>> than how CTV could do it, so I assume that isn't what you envisioned this\n>>>> doing.\n>>>>\n>>>> I can imagine instead that the definition of the pattern could be\n>>>> specified as a number indicating the number of stack items in the pattern,\n>>>> followed by that number of stack items. If that's how it is done, I can see\n>>>> the user inputting an intended destination script (corresponding to the\n>>>> intended destination address) which would then be somehow rotated in to the\n>>>> right spot within the pattern, allowing the pattern to specify the coins\n>>>> eventually reaching an address with that script. However, this could be\n>>>> quite cumbersome, and would require fully specifying the scripts along the\n>>>> covenant pathways leading to a fair amount of information duplication\n>>>> (since scripts must be specified both in the covenant and in spending the\n>>>> subsequent output). Both of these things would seem to make OP_COV in\n>>>> practice quite an expensive opcode to spend with. It also means that, since\n>>>> the transactor must fully specify the script, its not possible to take\n>>>> advantage of taproot's script hiding capabilities (were it to send to a\n>>>> taproot address).\n>>>>\n>>>\n>>> So my understanding is that the COV proposal in MES lets you check that\n>>> the output's scriptPubKey matches the corresponding script item from the\n>>> stack, but the script item's value additionally allows some wildcard\n>>> values.  In particular, it makes use of the otherwise reserved opcodes\n>>> OP_PUBKEY, and OP_PUBKEYHASH as wildcards representing any, let's say,\n>>> 32-byte or 20-byte push value.\n>>>\n>>> If you just used COV by itself, then these wildcards would be\n>>> third-party malleable, but you also have to sign the transaction with the\n>>> hot wallet key, which removes the malleability.\n>>>\n>>> No need to rotate anything into place.\n>>>\n>>> I hope this makes sense.\n>>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220428/3ab92a1c/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Vaulting (Was: Automatically reverting (\"transitory\") soft forks)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Russell O'Connor",
                "Billy Tetrud",
                "Matt Corallo",
                "Nadav Ivgi"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 45570
        }
    },
    {
        "title": "[bitcoin-dev] User Resisted Soft Fork for CTV",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2022-04-21T16:45:20",
                "message_text_only": "Ok so we've had to scramble a bit as I don't think anyone except perhaps Jeremy thought that there would be a Speedy Trial signaling period for a CTV soft fork planned to start on May 5th [1]. That is two weeks away.\n\n(I have to take what he says at face value. I can understand why one would be skeptical.)\n\nUnderstandably this has angered and surprised a few people including some of those who have voiced opposition to a CTV soft fork activation being attempted in the first place [2].\n\nAs I've said in a previous post [3] the Bitcoin Core 23.0 release candidate (and older versions) does not include any CTV code or CTV activation code. If a miner runs Bitcoin Core 23.0 out the box it will not signal for CTV. If by some chance CTV was to activate through some other software release Bitcoin Core releases would not apply CTV rules but they also wouldn't reject blocks that apply CTV rules. Hence it is prudent to prepare for an eventuality where the miner signaling threshold might be reached but the community wants to prevent the attempted soft fork from activating. (I personally don't think a 90 percent miner signaling threshold will be reached but I wouldn't want to bet Bitcoin's future on it.)\n\nI've tentatively labelled this effort a User Resisted Soft Fork (URSF) but I'm open to better names. I certainly don't want to discourage those who dislike or oppose UASFs from contributing to this effort and potentially ultimately running a URSF release. If you don't want this rushed CTV soft fork to activate we are all on the same side whatever we call it.\n\nFor now I've set up a ##ursf channel on Libera IRC to monitor developments and discuss working on an additional release that if run may ultimately reject blocks that signal for CTV.\n\nThe intention of this would be to provide additional direction and incentive to miners that the community does not want this soft fork to be activated. To repeat running a Bitcoin Core release will not signal for a CTV soft fork out the box. If a miner runs a Bitcoin Core release it will not signal for CTV.\n\nApologies that this is rushed. But as always with Jeremy caution and conservatism seems to be thrown out the window and we have to react to that. It goes without saying that this is not how Bitcoin consensus changes should be attempted.\n\n[1]: https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n[2]: https://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n[3]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020235.html\n\n--\nMichael Folkson\nEmail: michaelfolkson at [protonmail.com](http://protonmail.com/)\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220421/f082253d/attachment.html>"
            },
            {
                "author": "Keagan McClelland",
                "date": "2022-04-21T23:36:19",
                "message_text_only": "Good day Michael,\n\n> and discuss working on an additional release that if run may ultimately\nreject blocks that signal for CTV.\n\nThis seems silly to me.\n\nThe structure of CTV is imbuing an OP_NOP with script semantics. Resisting\nchanges that don't affect you is not consistent with the ideals of people\nbeing able to structure their own private agreements as they see fit...aka\nfreedom. It seems needlessly coercive to try and resist CTV in this way.\nCTV is ultimately an opt-in proposal. If you don't like the risk/benefit\nratio, you can simply not generate scripts that contain CTV checks.\nConservatism and apathy are something I can understand, but resisting CTV\nvia an escalating soft fork is not conservatism or apathy, it's fundamental\nopposition. What is it that you hope to accomplish by blocking others from\nusing a new opcode? According to your formal statement, you haven't really\nopposed CTV on fundamental grounds so much as vaguely questioning whether\nor not it is the \"best tool for the job\"...as if anyone really has the\ncapacity to judge that for a diverse group with varying interests and use\ncases that may differ substantially from their own.\n\nThere are really two ways to effectively resist this change: 1. reject all\nblocks during the lockin period, 2. reject all blocks that include OP_CTV\nin the script.\n\nRegardless of which method you choose, it is ultimately going to be a far\nmore forceful/invasive consensus change than CTV was in the first place. So\nhave fun trying to explain yourself out of that one. You've gone from\nsaying you won't NACK the proposal on its own to intentionally cause\nconsensus forks to block its enforcement. Did you change your mind or\nsomething?\n\n> Hence it is prudent to prepare for an eventuality where the miner\nsignaling threshold might be reached but the community wants to prevent the\nattempted soft fork from activating. (I personally don't think a 90 percent\nminer signaling threshold will be reached but I wouldn't want to bet\nBitcoin's future on it.)\n\nMaking the statement that \"the community doesn't want this to activate\" as\nif it's some kind of foregone conclusion is a pretty bold claim. I think\nyou'll be surprised at how broad support actually is. To contrast your\nsecond citation, here's the set of people who have endorsed the proposal,\nalong with a handful of people opposed (such as yourself):\nhttps://utxos.org/signals/. If you are aware of others who are opposed, it\nwould be worth your time to solicit a statement from them that can be put\non the signals page. Absent that, it seems appropriate to assume that the\noverwhelming majority of people who have opined on the subject are for it.\n\n> But as always with Jeremy caution and conservatism seems to be thrown out\nthe window and we have to react to that. It goes without saying that this\nis not how Bitcoin consensus changes should be attempted.\n\nWhat an unhinged take. The level of effort put into gathering consensus for\nCTV has set the bar higher than Taproot. Taproot didn't have the level of\noutreach effort that CTV does, and the complexity in taproot is\nsignificantly larger than for CTV. You didn't seem to have a problem\norganizing that activation process. That proposal was opened for public\ndiscussion in Jan'20, merged in Oct'20, and you were organizing activation\ndiscussions as early as Jan'21. The design of CTV has been *final* since\nFeb'20, a month after Taproot was opened for public discussion. There's a\nton of Proof-of-Concept code that has been written to test out use cases\nfor CTV, but for Taproot it still doesn't look like we'll have MuSig for a\nwhile longer (I heard a year, but someone can correct me on that if I'm\nwrong), and wallet support for Taproot wasn't fleshed out until after\nactivation. Characterizing Jeremy's efforts as throwing caution and\nconservatism out the window is hypocritical at best and malicious at worst.\n\nFinally, I think it is worth stating that if Bitcoin adopts a culture where\na willfully ignorant set of people can block changes that have no impact on\nthem, despite a large constituency wanting those changes, then Bitcoin kind\nof deserves the slow deterioration that will result from that. I don't\nreally find that future appealing and so I think that trying to find ways\nto activate non-invasive changes should be everyone's goal, *even if* they\npersonally may not have an immediate use case, or have a slight preference\nfor alternate solutions. The exception to this is any introduction of\nsystemic risk. Not all soft-forks are equal, and therefore the\nmeta-consensus requirements for getting them activated should vary based on\nhow broadly consequential the change is.\n\nFeel free to resist this if you want. In some sense that's what the Speedy\nTrial procedure is for. However, I think your case would be more compelling\nif you actually had some sort of affirmative argument for why CTV induces\nsystemic risk to non-users of the opcode. Expressing uncertainty over\nwhether it is the globally optimal solution (to a problem that cannot be\nglobally defined due to diverse interests) is not persuasive to me and many\nothers in the community.\n\nKeagan\n\nOn Thu, Apr 21, 2022 at 12:16 PM Michael Folkson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Ok so we've had to scramble a bit as I don't think anyone except perhaps\n> Jeremy thought that there would be a Speedy Trial signaling period for a\n> CTV soft fork planned to start on May 5th [1]. That is two weeks away.\n>\n> (I have to take what he says at face value. I can understand why one would\n> be skeptical.)\n>\n> Understandably this has angered and surprised a few people including some\n> of those who have voiced opposition to a CTV soft fork activation being\n> attempted in the first place [2].\n>\n> As I've said in a previous post [3] the Bitcoin Core 23.0 release\n> candidate (and older versions) does not include any CTV code or CTV\n> activation code. If a miner runs Bitcoin Core 23.0 out the box it will not\n> signal for CTV. If by some chance CTV was to activate through some other\n> software release Bitcoin Core releases would not apply CTV rules but they\n> also wouldn't reject blocks that apply CTV rules. Hence it is prudent to\n> prepare for an eventuality where the miner signaling threshold might be\n> reached but the community wants to prevent the attempted soft fork from\n> activating. (I personally don't think a 90 percent miner signaling\n> threshold will be reached but I wouldn't want to bet Bitcoin's future on\n> it.)\n>\n> I've tentatively labelled this effort a User Resisted Soft Fork (URSF) but\n> I'm open to better names. I certainly don't want to discourage those who\n> dislike or oppose UASFs from contributing to this effort and potentially\n> ultimately running a URSF release. If you don't want this rushed CTV soft\n> fork to activate we are all on the same side whatever we call it.\n>\n> For now I've set up a ##ursf channel on Libera IRC to monitor developments\n> and discuss working on an additional release that if run may ultimately\n> reject blocks that signal for CTV.\n>\n> The intention of this would be to provide additional direction and\n> incentive to miners that the community does not want this soft fork to be\n> activated. To repeat running a Bitcoin Core release will not signal for a\n> CTV soft fork out the box. If a miner runs a Bitcoin Core release it will\n> not signal for CTV.\n>\n> Apologies that this is rushed. But as always with Jeremy caution and\n> conservatism seems to be thrown out the window and we have to react to\n> that. It goes without saying that this is not how Bitcoin consensus changes\n> should be attempted.\n>\n> [1]: https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n> [2]:\n> https://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n> [3]:\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020235.html\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220421/9b2b5a9c/attachment-0001.html>"
            },
            {
                "author": "Zac Greenwood",
                "date": "2022-04-22T09:03:51",
                "message_text_only": "On Fri, 22 Apr 2022 at 09:56, Keagan McClelland via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I think that trying to find ways to activate non-invasive changes should\n> be everyone's goal, *even if* they personally may not have an immediate use\n> case\n>\n\nA change that increases the number of use cases of Bitcoin affects all\nusers and is *not* non-invasive. More use cases means more blockchain usage\nwhich increases the price of a transaction for *everyone*.\n\nI like the maxim of Peter Todd: any change of Bitcoin must benefit *all*\nusers. This means that every change must have well-defined and transparent\nbenefits. Personally I believe that the only additions to the protocol that\nwould still be acceptable are those that clearly benefit layer 2 solutions\nsuch as LN *and* do not carry the dangerous potential of getting abused by\nfreeloaders selling commercial services on top of \u201cfree\u201d eternal storage on\nthe blockchain.\n\nZac\n\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220422/0fd0ef11/attachment.html>"
            },
            {
                "author": "Corey Haddad",
                "date": "2022-04-22T15:40:19",
                "message_text_only": ">*A change that increases the number of use cases of Bitcoin affects all\nusers and is *not* non-invasive. More use cases means more blockchain usage\nwhich increases the price of a transaction for *everyone*.*\n\nThis manages to be both incorrect and philosophically opposed to what\ndefines success of the project . Neither the number of ways that people\nfigure out how to innovatively harness Bitcoin's existing capabilities, nor\nthe number or complexity of any optional transaction types that the Bitcoin\nprotocol supports have any bearing on transaction fees. Demand for\nblockspace from transactions, which is just plain *use* - and not *use\ncases* - is what could drive up transaction fees.\n\nOn the philosophical level, as designers of the system, we all hope and\nwork to make Bitcoin so useful, appealing, and secure that there is massive\ndemand for blockspace, even in the face of high transaction fees. As an\nindividual thinking only of their next on-chain transaction, it is\nunderstandable that one might hope for low fees and partially-filled\nblocks. Longer term, the health of the system can both be measured by and\nitself depends on high transaction demand and fee pressure.\n\nIf you were trying to argue that CTV is invasive because it may increase\ntransaction demand and therefore cost users more fees, that is 1) an\nendorsement of CTV's desirability and 2) reveals that you consider any\nincreased free-market competition (i.e. more demand) to be \"invasive\".\n\n\n*>I like the maxim of Peter Todd: any change of Bitcoin must benefit *all*\nusers. *\n\nAs for Peter Todd's \"any change of Bitcoin must benefit *all* users\", that\nis absolutely a reasonable thing to consider. However, in order to make\npractical use of that maxim, we must adopt in our minds a *generic*, or\n\"model user\", and then replicate them so that we may meaningfully\nunderstand a least a proxy for \"all users\". In reality, there will always\nbe someone (and at this point, probably a \"user\" too)  who wouldn't benefit\nfrom a change, or at least think they won't. Some users of Bitcoin may even\nwant Bitcoin to fail, so we cannot afford assume that people have alignment\nof goals or vision just by virtue of being a 'user'.\n\nCorey\n\n\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220422/4cbf6200/attachment-0001.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2022-04-23T05:07:25",
                "message_text_only": "@Zac\n>  More use cases means more blockchain usage which increases the price of\na transaction for *everyone*.\n\nThis is IMO a ridiculous opposition. Anything that increases the utility of\nthe bitcoin network will increase usage of the blockchain and increase the\nprice of a transaction on average. It is absurd to say such a thing is bad\nfor bitcoin. Its like the old saying: \"nobody goes there any more - its too\ncrowded\".\n\n> I like the maxim of Peter Todd: any change of Bitcoin must benefit *all*\nusers.\n\nThis is a fair opinion to take on the face of it. However, I completely\ndisagree with it. Why must any change benefit *all* users? Did segwit\nbenefit all users? Did taproot? What if an upgrade benefits 90% of users\na LOT and at the same time doesn't negatively affect the other 10%? Is that\na bad change? I think you'd find it very difficult to argue it is.\n\nRegardless of the above, I think CTV *does *in fact likely provide\nsubstantial benefit to all users in the following ways:\n\n1. CTV allows much easier/cheaper ways of improving their security via\nwallet vaults, DLCs, channels, and many other use cases. This means both\nsocietal benefit that grows the value of the bitcoin network and on-chain\nbenefit that reduces the fees people have to pay for certain utility, which\nleads to lower fees for everyone.\n\n2. Wallet vaults specifically, that CTV would unlock, would make it\nsubstantially easier and cheaper to hold funds in a multi key vault (akin\nto but better than a classic multisig wallet). This could substantially\nincrease the fraction of users that self-custody their bitcoin. This\nincreased self-custodiation would substantially improve the\ndecentralization of bitcoin in terms of holdership which is an important\npart of bitcoin's resilience, which would be a huge benefit to anyone that\nholds bitcoin or relies on the bitcoin network in any way.\n\nEven if a minority (eg 20%) of bitcoin users use CTV, it would have a\nsubstantial positive effect for everyone because of these things.\n\nOn Fri, Apr 22, 2022 at 10:40 AM Corey Haddad via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> >*A change that increases the number of use cases of Bitcoin affects all\n> users and is *not* non-invasive. More use cases means more blockchain usage\n> which increases the price of a transaction for *everyone*.*\n>\n> This manages to be both incorrect and philosophically opposed to what\n> defines success of the project . Neither the number of ways that people\n> figure out how to innovatively harness Bitcoin's existing capabilities, nor\n> the number or complexity of any optional transaction types that the Bitcoin\n> protocol supports have any bearing on transaction fees. Demand for\n> blockspace from transactions, which is just plain *use* - and not *use\n> cases* - is what could drive up transaction fees.\n>\n> On the philosophical level, as designers of the system, we all hope and\n> work to make Bitcoin so useful, appealing, and secure that there is massive\n> demand for blockspace, even in the face of high transaction fees. As an\n> individual thinking only of their next on-chain transaction, it is\n> understandable that one might hope for low fees and partially-filled\n> blocks. Longer term, the health of the system can both be measured by and\n> itself depends on high transaction demand and fee pressure.\n>\n> If you were trying to argue that CTV is invasive because it may increase\n> transaction demand and therefore cost users more fees, that is 1) an\n> endorsement of CTV's desirability and 2) reveals that you consider any\n> increased free-market competition (i.e. more demand) to be \"invasive\".\n>\n>\n> *>I like the maxim of Peter Todd: any change of Bitcoin must benefit *all*\n> users. *\n>\n> As for Peter Todd's \"any change of Bitcoin must benefit *all* users\", that\n> is absolutely a reasonable thing to consider. However, in order to make\n> practical use of that maxim, we must adopt in our minds a *generic*, or\n> \"model user\", and then replicate them so that we may meaningfully\n> understand a least a proxy for \"all users\". In reality, there will always\n> be someone (and at this point, probably a \"user\" too)  who wouldn't benefit\n> from a change, or at least think they won't. Some users of Bitcoin may even\n> want Bitcoin to fail, so we cannot afford assume that people have alignment\n> of goals or vision just by virtue of being a 'user'.\n>\n> Corey\n>\n>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220423/1bd348d3/attachment.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2022-04-23T14:48:30",
                "message_text_only": "On Sat, Apr 23, 2022, 5:05 AM Billy Tetrud via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> @Zac\n> >  More use cases means more blockchain usage which increases the price of\n> a transaction for *everyone*.\n>\n> This is IMO a ridiculous opposition. Anything that increases the utility\n> of the bitcoin network will increase usage of the blockchain and increase\n> the price of a transaction on average. It is absurd to say such a thing is\n> bad for bitcoin. Its like the old saying: \"nobody goes there any more -\n> its too crowded\".\n>\n> > I like the maxim of Peter Todd: any change of Bitcoin must benefit *all*\n> users.\n>\n> This is a fair opinion to take on the face of it. However, I completely\n> disagree with it. Why must any change benefit *all* users? Did segwit\n> benefit all users? Did taproot? What if an upgrade benefits 90% of users\n> a LOT and at the same time doesn't negatively affect the other 10%? Is that\n> a bad change? I think you'd find it very difficult to argue it is.\n>\n> Regardless of the above, I think CTV *does *in fact likely provide\n> substantial benefit to all users in the following ways:\n>\n> 1. CTV allows much easier/cheaper ways of improving their security via\n> wallet vaults,\n>\n\n\nMaybe.  But there are enough security caveats that it probably needs other\nopcodes too to be useful.\n\n\nDLCs, channels\n>\n\nAPO (BIP118) handles these with a smaller footprint\n\n\nand many other use cases.\n>\n\nSomeone want to volunteer to make a table of use cases, proposed opcodes\n(CTV, APO)  and a maturity and efficiency rating at each intersection?\n\nHard to juggle all this.\n\nI'm not a fan of the squeaky wheel method of consensus.\n\nI do think most people believe some form of restricted, well-tested\ncovenants that don't allow for recursion should make it into Bitcoin at\nsome point.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220423/5adf57df/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2022-04-24T14:47:47",
                "message_text_only": "On April 22, 2022 11:03:51 AM GMT+02:00, Zac Greenwood via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>I like the maxim of Peter Todd: any change of Bitcoin must benefit *all*\n>users. This means that every change must have well-defined and transparent\n>benefits. Personally I believe that the only additions to the protocol that\n>would still be acceptable are those that clearly benefit layer 2 solutions\n>such as LN *and* do not carry the dangerous potential of getting abused by\n>freeloaders selling commercial services on top of \u201cfree\u201d eternal storage on\n>the blockchain.\n\nTo strengthen your point: benefiting \"all users\" can only be done by benefiting layer 2 solutions in some way, because it's inevitable that the vast majority of users will use layer 2 because that's the only known way that Bitcoin can scale."
            },
            {
                "author": "ZmnSCPxj",
                "date": "2022-04-25T05:36:48",
                "message_text_only": "Good morning Peter,\n\n>\n> On April 22, 2022 11:03:51 AM GMT+02:00, Zac Greenwood via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n>\n> > I like the maxim of Peter Todd: any change of Bitcoin must benefit all\n> > users. This means that every change must have well-defined and transparent\n> > benefits. Personally I believe that the only additions to the protocol that\n> > would still be acceptable are those that clearly benefit layer 2 solutions\n> > such as LN and do not carry the dangerous potential of getting abused by\n> > freeloaders selling commercial services on top of \u201cfree\u201d eternal storage on\n> > the blockchain.\n>\n>\n> To strengthen your point: benefiting \"all users\" can only be done by benefiting layer 2 solutions in some way, because it's inevitable that the vast majority of users will use layer 2 because that's the only known way that Bitcoin can scale.\n\nI would like to point out that CTV is usable in LN.\nIn particular, instead of hosting all outputs (remote, local, and all the HTLCs) directly on the commitment transaction, the commitment transaction instead outputs to a CTV-guarded SCRIPT that defers the \"real\" outputs.\n\nThis is beneficial since a common cause of unilateral closes is that one of the HTLCs on the channel has timed out.\nHowever, only *that* particular HTLC has to be exposed onchain *right now*, and the use of CTV allows only that failing HTLC, plus O(log N) other txes, to be published.\nThe CTV-tree can even be rearranged so that HTLCs with closer timeouts are nearer to the root of the CTV-tree.\nThis allows the rest of the unilateral close to be resolved later, if right now there is block space congestion (we only really need to deal with the sole HTLC that is timing out right now, the rest can be done later when block space is less tight).\n\nThis is arguably minimal (unilateral closes are rare, though they *do* have massive effects on the network, since a single timed-out channel can, during short-term block congestion, cause other channels to also time out, which worsen the block congestion and leading to cascades of channel closures).\n\nSo this objection seems, to me, at least mitigated: CTV *can* benefit layer 2 users, which is why I switched from vaguely apathetic to CTV, to vaguely supportive of it.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Zac Greenwood",
                "date": "2022-04-25T09:06:09",
                "message_text_only": "On Mon, 25 Apr 2022 at 07:36, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote\n\nCTV *can* benefit layer 2 users, which is why I switched from vaguely\n> apathetic to CTV, to vaguely supportive of it.\n\n\nOther proposals exist that also benefit L2 solutions. What makes you\nsupport CTV specifically?\n\nCentrally documenting the implications of each side by side and point by\npoint might be a useful next step. This would enable a larger part of the\ncommunity to understand each proposal and may reduce repetition and\nmisunderstandings on this list.\n\nOnce a common understanding of the implications of each proposal is in\nplace, their tradeoffs can be considered, facilitating creating consensus\non which proposal benefits a maximum of users.\n\nZac\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220425/8855a181/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2022-04-25T10:01:28",
                "message_text_only": "Good morning Zac,\n\n> On Mon, 25 Apr 2022 at 07:36, ZmnSCPxj <zmnscpxj at protonmail.com> wrote\n>\n> > CTV *can* benefit layer 2 users, which is why I switched from vaguely apathetic to CTV, to vaguely supportive of it.\n>\n>\n> Other proposals exist that also benefit L2 solutions. What makes you support CTV specifically?\n\nIt is simple to implement, and a pure `OP_CTV` SCRIPT on a P2WSH / P2SH is only 32 bytes + change on the output and 32 bytes + change on the input/witness, compared to signature-based schemes which require at least 32 bytes + change on the output and 64 bytes + change on the witness ***IF*** they use the Taproot format (and since we currently gate the Taproot format behind actual Taproot usages, any special SCRIPT that uses Taproot-format signatures would need at least the 33-byte internal pubkey revelation; if we settle with the old signature format, then that is 73 bytes for the signature).\nTo my knowledge as well, hashes (like `OP_CTV` uses) are CPU-cheaper (and memory-cheaper?) than even highly-optimized `libsecp256k1` signature validation, and (to my knowledge) you cannot use batch validation for SCRIPT-based signature checks.\nIt definitely does not enable recursive covenants, which I think deserve more general research and thinking before we enable recursive covenants.\n\nConceptually, I see `OP_CTV` as the \"AND\" to the \"OR\" of MAST.\nIn both cases, you have a hash-based tree, but in `OP_CTV` you want *all* these pre-agreed cases, while in MAST you want *one* of these pre-agreed cases.\n\nWhich is not to say that other proposals do not benefit L2 solutions *more* (`SIGHASH_ANYPREVOUT` when please?), but other proposals are signature-based and would be larger in this niche.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Michael Folkson",
                "date": "2022-04-22T09:53:25",
                "message_text_only": "I'm going to keep this short as I'm sure you are not interested in discussion on supposedly \"unhinged\" takes. Plus I know you support this soft fork activation attempt, you have heard the arguments from various people against attempting it and if you don't believe by now that soft forks should have community consensus before they are attempted nothing will convince you.\n\n> Resisting changes that don't affect you\n\nThe consensus rules are essentially what define Bitcoin. Bitcoin is nothing without well defined and rarely changing consensus rules. If they can be changed by a subset of the community against the wishes of another subset of the community then we may as well accept that all soft fork proposals will eventually get activated because all soft fork proposals will be able to get a subset of the community to support them. (There are a lot of proposals out there.) Decentralized decision making requires that we collectively set high bars when considering making changes to the most important and dangerous part of Bitcoin. Once consensus rules are changed they generally need a hard fork to revert. This is Bitcoin 101. I really shouldn't need to explain this to you. There was a lot of work done by a large number of people to slowly build community consensus around Taproot. You seem to be arguing that that work was pointless because ultimately Taproot doesn't affect the community. If you don't like it don't use it right? Just keep quiet? Nothing to do with you? Gosh....\n\n> You've gone from saying you won't NACK the proposal on its own to intentionally cause consensus forks to block its enforcement.\n\nCan you provide a link? If there was community consensus a single NACK from me would be pointless. I'm assuming that's the context in which it was said. I've been consistent on wanting community consensus before any soft fork is attempted. If there is community consensus it doesn't matter what I think. This is not a proposal that currently has community consensus and you are seeking to attempt to activate it anyway. Look at some of the individuals on this list. Only yesterday Matt Corallo, Adam Back, Murch, Bob McElrath etc were arguing online this should not be attempted. Perhaps you want to call their takes \"unhinged\" too?\n\nhttps://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n\nI'm happy to discuss anything with those who are on the fence or who are genuinely trying to come to a view on this. But I won't be responding again to people like Jeremy, Keagan etc who I know perfectly well understand these arguments, ignore them and proceed regardless.\n\n--\nMichael Folkson\nEmail: michaelfolkson at [protonmail.com](http://protonmail.com/)\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n\n------- Original Message -------\nOn Friday, April 22nd, 2022 at 12:36 AM, Keagan McClelland <keagan.mcclelland at gmail.com> wrote:\n\n> Good day Michael,\n>> and discuss working on an additional release that if run may ultimately reject blocks that signal for CTV.\n> This seems silly to me.\n>\n> The structure of CTV is imbuing an OP_NOP with script semantics. Resisting changes that don't affect you is not consistent with the ideals of people being able to structure their own private agreements as they see fit...aka freedom. It seems needlessly coercive to try and resist CTV in this way. CTV is ultimately an opt-in proposal. If you don't like the risk/benefit ratio, you can simply not generate scripts that contain CTV checks. Conservatism and apathy are something I can understand, but resisting CTV via an escalating soft fork is not conservatism or apathy, it's fundamental opposition. What is it that you hope to accomplish by blocking others from using a new opcode? According to your formal statement, you haven't really opposed CTV on fundamental grounds so much as vaguely questioning whether or not it is the \"best tool for the job\"...as if anyone really has the capacity to judge that for a diverse group with varying interests and use cases that may differ substantially from their own.\n>\n> There are really two ways to effectively resist this change: 1. reject all blocks during the lockin period, 2. reject all blocks that include OP_CTV in the script.\n>\n> Regardless of which method you choose, it is ultimately going to be a far more forceful/invasive consensus change than CTV was in the first place. So have fun trying to explain yourself out of that one. You've gone from saying you won't NACK the proposal on its own to intentionally cause consensus forks to block its enforcement. Did you change your mind or something?\n>> Hence it is prudent to prepare for an eventuality where the miner signaling threshold might be reached but the community wants to prevent the attempted soft fork from activating. (I personally don't think a 90 percent miner signaling threshold will be reached but I wouldn't want to bet Bitcoin's future on it.)\n>\n> Making the statement that \"the community doesn't want this to activate\" as if it's some kind of foregone conclusion is a pretty bold claim. I think you'll be surprised at how broad support actually is. To contrast your second citation, here's the set of people who have endorsed the proposal, along with a handful of people opposed (such as yourself): https://utxos.org/signals/. If you are aware of others who are opposed, it would be worth your time to solicit a statement from them that can be put on the signals page. Absent that, it seems appropriate to assume that the overwhelming majority of people who have opined on the subject are for it.\n>> But as always with Jeremy caution and conservatism seems to be thrown out the window and we have to react to that. It goes without saying that this is not how Bitcoin consensus changes should be attempted.\n>\n> What an unhinged take. The level of effort put into gathering consensus for CTV has set the bar higher than Taproot. Taproot didn't have the level of outreach effort that CTV does, and the complexity in taproot is significantly larger than for CTV. You didn't seem to have a problem organizing that activation process. That proposal was opened for public discussion in Jan'20, merged in Oct'20, and you were organizing activation discussions as early as Jan'21. The design of CTV has been *final* since Feb'20, a month after Taproot was opened for public discussion. There's a ton of Proof-of-Concept code that has been written to test out use cases for CTV, but for Taproot it still doesn't look like we'll have MuSig for a while longer (I heard a year, but someone can correct me on that if I'm wrong), and wallet support for Taproot wasn't fleshed out until after activation. Characterizing Jeremy's efforts as throwing caution and conservatism out the window is hypocritical at best and malicious at worst.\n>\n> Finally, I think it is worth stating that if Bitcoin adopts a culture where a willfully ignorant set of people can block changes that have no impact on them, despite a large constituency wanting those changes, then Bitcoin kind of deserves the slow deterioration that will result from that. I don't really find that future appealing and so I think that trying to find ways to activate non-invasive changes should be everyone's goal, *even if* they personally may not have an immediate use case, or have a slight preference for alternate solutions. The exception to this is any introduction of systemic risk. Not all soft-forks are equal, and therefore the meta-consensus requirements for getting them activated should vary based on how broadly consequential the change is.\n>\n> Feel free to resist this if you want. In some sense that's what the Speedy Trial procedure is for. However, I think your case would be more compelling if you actually had some sort of affirmative argument for why CTV induces systemic risk to non-users of the opcode. Expressing uncertainty over whether it is the globally optimal solution (to a problem that cannot be globally defined due to diverse interests) is not persuasive to me and many others in the community.\n> Keagan\n>\n> On Thu, Apr 21, 2022 at 12:16 PM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Ok so we've had to scramble a bit as I don't think anyone except perhaps Jeremy thought that there would be a Speedy Trial signaling period for a CTV soft fork planned to start on May 5th [1]. That is two weeks away.\n>>\n>> (I have to take what he says at face value. I can understand why one would be skeptical.)\n>>\n>> Understandably this has angered and surprised a few people including some of those who have voiced opposition to a CTV soft fork activation being attempted in the first place [2].\n>>\n>> As I've said in a previous post [3] the Bitcoin Core 23.0 release candidate (and older versions) does not include any CTV code or CTV activation code. If a miner runs Bitcoin Core 23.0 out the box it will not signal for CTV. If by some chance CTV was to activate through some other software release Bitcoin Core releases would not apply CTV rules but they also wouldn't reject blocks that apply CTV rules. Hence it is prudent to prepare for an eventuality where the miner signaling threshold might be reached but the community wants to prevent the attempted soft fork from activating. (I personally don't think a 90 percent miner signaling threshold will be reached but I wouldn't want to bet Bitcoin's future on it.)\n>>\n>> I've tentatively labelled this effort a User Resisted Soft Fork (URSF) but I'm open to better names. I certainly don't want to discourage those who dislike or oppose UASFs from contributing to this effort and potentially ultimately running a URSF release. If you don't want this rushed CTV soft fork to activate we are all on the same side whatever we call it.\n>>\n>> For now I've set up a ##ursf channel on Libera IRC to monitor developments and discuss working on an additional release that if run may ultimately reject blocks that signal for CTV.\n>>\n>> The intention of this would be to provide additional direction and incentive to miners that the community does not want this soft fork to be activated. To repeat running a Bitcoin Core release will not signal for a CTV soft fork out the box. If a miner runs a Bitcoin Core release it will not signal for CTV.\n>>\n>> Apologies that this is rushed. But as always with Jeremy caution and conservatism seems to be thrown out the window and we have to react to that. It goes without saying that this is not how Bitcoin consensus changes should be attempted.\n>>\n>> [1]: https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n>> [2]: https://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n>> [3]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020235.html\n>>\n>> --\n>> Michael Folkson\n>> Email: michaelfolkson at [protonmail.com](http://protonmail.com/)\n>> Keybase: michaelfolkson\n>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220422/f136410f/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2022-04-23T20:40:19",
                "message_text_only": "I've been calling them \"controversial softforks\" for long.\nI hate to be right some times, but I guess I'm happy that I'm not the only\none who distrusts jeremy rubin anymore.\n\nCan we agree now that resisting a bip8 proposal is simpler and cleaner than\nresisting a speedy trial proposal?\nI guess now we don't need to discuss it in hypothetical terms anymore, do\nwe?\n\nIs there any PR to actively resist the proposal on bitcoin core?\n\n\n\n\n\n\nOn Thu, Apr 21, 2022 at 8:16 PM Michael Folkson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Ok so we've had to scramble a bit as I don't think anyone except perhaps\n> Jeremy thought that there would be a Speedy Trial signaling period for a\n> CTV soft fork planned to start on May 5th [1]. That is two weeks away.\n>\n> (I have to take what he says at face value. I can understand why one would\n> be skeptical.)\n>\n> Understandably this has angered and surprised a few people including some\n> of those who have voiced opposition to a CTV soft fork activation being\n> attempted in the first place [2].\n>\n> As I've said in a previous post [3] the Bitcoin Core 23.0 release\n> candidate (and older versions) does not include any CTV code or CTV\n> activation code. If a miner runs Bitcoin Core 23.0 out the box it will not\n> signal for CTV. If by some chance CTV was to activate through some other\n> software release Bitcoin Core releases would not apply CTV rules but they\n> also wouldn't reject blocks that apply CTV rules. Hence it is prudent to\n> prepare for an eventuality where the miner signaling threshold might be\n> reached but the community wants to prevent the attempted soft fork from\n> activating. (I personally don't think a 90 percent miner signaling\n> threshold will be reached but I wouldn't want to bet Bitcoin's future on\n> it.)\n>\n> I've tentatively labelled this effort a User Resisted Soft Fork (URSF) but\n> I'm open to better names. I certainly don't want to discourage those who\n> dislike or oppose UASFs from contributing to this effort and potentially\n> ultimately running a URSF release. If you don't want this rushed CTV soft\n> fork to activate we are all on the same side whatever we call it.\n>\n> For now I've set up a ##ursf channel on Libera IRC to monitor developments\n> and discuss working on an additional release that if run may ultimately\n> reject blocks that signal for CTV.\n>\n> The intention of this would be to provide additional direction and\n> incentive to miners that the community does not want this soft fork to be\n> activated. To repeat running a Bitcoin Core release will not signal for a\n> CTV soft fork out the box. If a miner runs a Bitcoin Core release it will\n> not signal for CTV.\n>\n> Apologies that this is rushed. But as always with Jeremy caution and\n> conservatism seems to be thrown out the window and we have to react to\n> that. It goes without saying that this is not how Bitcoin consensus changes\n> should be attempted.\n>\n> [1]: https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n> [2]:\n> https://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n> [3]:\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020235.html\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220423/a732ee49/attachment.html>"
            },
            {
                "author": "Michael Folkson",
                "date": "2022-04-24T12:17:22",
                "message_text_only": "Hi Jorge\n\n> Can we agree now that resisting a bip8 proposal is simpler and cleaner than resisting a speedy trial proposal?\n\nPersonally I'd rather stick to one challenge at a time :) Currently we are facing a contentious soft fork activation attempt of CTV using an alternative client which we expect [1] to be a Speedy Trial deployment. Once this is resolved we can discuss the lessons and observations that come out of this.\n\n> Is there any PR to actively resist the proposal on bitcoin core?\n\nNot currently. Unless this becomes really, really messy and starts to pose a true existential threat to Bitcoin itself I think it best that attempts to actively resist the proposal are done outside of Bitcoin Core in an alternative client(s). Contrary to what some CTV proponents say getting anything consensus related into Bitcoin Core is extremely difficult (especially at short notice). There is no BDFL or Linus Torvalds like figure, there are a large number of contributors (and maintainers) who all have differing personal views. Hence directing people to have this discussion on a particular PR in the Bitcoin Core repo seems to me to be counterproductive and a massive distraction to other work that is going on on Bitcoin Core. We've already started to see online attacks on Bitcoin Core by CTV proponents [2] claiming an \"old guard trying to assert dictatorship over the Bitcoin protocol\". It is nonsense of course but directing that nonsense to the Bitcoin Core repo is surely not the right way to go.\n\nAs I've said in previous emails there is a Libera (and Freenode now) IRC channel ##ursf that has been set up to discuss an alternative client. We'll get a conversation log up too. And of course we wait for confirmation on what the Speedy Trial deployment parameters for this attempted CTV soft fork are going to be.\n\n[1]: https://blog.bitmex.com/op_ctv-summer-softfork-shenanigans/\n[2]: https://twitter.com/ProofOfKeags/status/1517574210691887105?s=20&t=_jgRh3kkYP3kn1qLuzGXrQ\n\n--\nMichael Folkson\nEmail: michaelfolkson at [protonmail.com](http://protonmail.com/)\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n\n------- Original Message -------\nOn Saturday, April 23rd, 2022 at 21:40, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n\n> I've been calling them \"controversial softforks\" for long.\n> I hate to be right some times, but I guess I'm happy that I'm not the only one who distrusts jeremy rubin anymore.\n>\n> Can we agree now that resisting a bip8 proposal is simpler and cleaner than resisting a speedy trial proposal?\n> I guess now we don't need to discuss it in hypothetical terms anymore, do we?\n>\n> Is there any PR to actively resist the proposal on bitcoin core?\n>\n> On Thu, Apr 21, 2022 at 8:16 PM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Ok so we've had to scramble a bit as I don't think anyone except perhaps Jeremy thought that there would be a Speedy Trial signaling period for a CTV soft fork planned to start on May 5th [1]. That is two weeks away.\n>>\n>> (I have to take what he says at face value. I can understand why one would be skeptical.)\n>>\n>> Understandably this has angered and surprised a few people including some of those who have voiced opposition to a CTV soft fork activation being attempted in the first place [2].\n>>\n>> As I've said in a previous post [3] the Bitcoin Core 23.0 release candidate (and older versions) does not include any CTV code or CTV activation code. If a miner runs Bitcoin Core 23.0 out the box it will not signal for CTV. If by some chance CTV was to activate through some other software release Bitcoin Core releases would not apply CTV rules but they also wouldn't reject blocks that apply CTV rules. Hence it is prudent to prepare for an eventuality where the miner signaling threshold might be reached but the community wants to prevent the attempted soft fork from activating. (I personally don't think a 90 percent miner signaling threshold will be reached but I wouldn't want to bet Bitcoin's future on it.)\n>>\n>> I've tentatively labelled this effort a User Resisted Soft Fork (URSF) but I'm open to better names. I certainly don't want to discourage those who dislike or oppose UASFs from contributing to this effort and potentially ultimately running a URSF release. If you don't want this rushed CTV soft fork to activate we are all on the same side whatever we call it.\n>>\n>> For now I've set up a ##ursf channel on Libera IRC to monitor developments and discuss working on an additional release that if run may ultimately reject blocks that signal for CTV.\n>>\n>> The intention of this would be to provide additional direction and incentive to miners that the community does not want this soft fork to be activated. To repeat running a Bitcoin Core release will not signal for a CTV soft fork out the box. If a miner runs a Bitcoin Core release it will not signal for CTV.\n>>\n>> Apologies that this is rushed. But as always with Jeremy caution and conservatism seems to be thrown out the window and we have to react to that. It goes without saying that this is not how Bitcoin consensus changes should be attempted.\n>>\n>> [1]: https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n>> [2]: https://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n>> [3]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020235.html\n>>\n>> --\n>> Michael Folkson\n>> Email: michaelfolkson at [protonmail.com](http://protonmail.com/)\n>> Keybase: michaelfolkson\n>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220424/18ffef7b/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2022-04-24T12:57:05",
                "message_text_only": "On Sun, Apr 24, 2022 at 2:17 PM Michael Folkson <\nmichaelfolkson at protonmail.com> wrote:\n\n> Hi Jorge\n>\n> > Can we agree now that resisting a bip8 proposal is simpler and cleaner\n> than resisting a speedy trial proposal?\n>\n> Personally I'd rather stick to one challenge at a time :) Currently we are\n> facing a contentious soft fork activation attempt of CTV using an\n> alternative client which we expect [1] to be a Speedy Trial deployment.\n> Once this is resolved we can discuss the lessons and observations that come\n> out of this.\n>\n\nThat sounds reasonable to me. Fair enough.\n\n\n> > Is there any PR to actively resist the proposal on bitcoin core?\n>\n> Not currently. Unless this becomes really, really messy and starts to pose\n> a true existential threat to Bitcoin itself I think it best that attempts\n> to actively resist the proposal are done outside of Bitcoin Core in an\n> alternative client(s). Contrary to what some CTV proponents say getting\n> anything consensus related into Bitcoin Core is extremely difficult\n> (especially at short notice). There is no BDFL or Linus Torvalds like\n> figure, there are a large number of contributors (and maintainers) who all\n> have differing personal views. Hence directing people to have this\n> discussion on a particular PR in the Bitcoin Core repo seems to me to be\n> counterproductive and a massive distraction to other work that is going on\n> on Bitcoin Core. We've already started to see online attacks on Bitcoin\n> Core by CTV proponents [2] claiming an \"old guard trying to assert\n> dictatorship over the Bitcoin protocol\". It is nonsense of course but\n> directing that nonsense to the Bitcoin Core repo is surely not the right\n> way to go.\n>\n> As I've said in previous emails there is a Libera (and Freenode now) IRC\n> channel ##ursf that has been set up to discuss an alternative client. We'll\n> get a conversation log up too. And of course we wait for confirmation on\n> what the Speedy Trial deployment parameters for this attempted CTV soft\n> fork are going to be.\n>\n> [1]: https://blog.bitmex.com/op_ctv-summer-softfork-shenanigans/\n> [2]:\n> https://twitter.com/ProofOfKeags/status/1517574210691887105?s=20&t=_jgRh3kkYP3kn1qLuzGXrQ\n>\n>\nI disagree that it shouldn't be on bitcoin core, but I guess such a\nproposal would get many nacks.\nBut if there are no speedy trial parameters yet, I guess we need to wait\nfor that; whether the code for resisting it ends up in bitcoin core or not.\nThanks for the clarifications.\n\n--\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n> ------- Original Message -------\n> On Saturday, April 23rd, 2022 at 21:40, Jorge Tim\u00f3n <jtimon at jtimon.cc>\n> wrote:\n>\n> I've been calling them \"controversial softforks\" for long.\n> I hate to be right some times, but I guess I'm happy that I'm not the only\n> one who distrusts jeremy rubin anymore.\n>\n> Can we agree now that resisting a bip8 proposal is simpler and cleaner\n> than resisting a speedy trial proposal?\n> I guess now we don't need to discuss it in hypothetical terms anymore, do\n> we?\n>\n> Is there any PR to actively resist the proposal on bitcoin core?\n>\n>\n>\n>\n>\n>\n> On Thu, Apr 21, 2022 at 8:16 PM Michael Folkson via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Ok so we've had to scramble a bit as I don't think anyone except perhaps\n>> Jeremy thought that there would be a Speedy Trial signaling period for a\n>> CTV soft fork planned to start on May 5th [1]. That is two weeks away.\n>>\n>> (I have to take what he says at face value. I can understand why one\n>> would be skeptical.)\n>>\n>> Understandably this has angered and surprised a few people including some\n>> of those who have voiced opposition to a CTV soft fork activation being\n>> attempted in the first place [2].\n>>\n>> As I've said in a previous post [3] the Bitcoin Core 23.0 release\n>> candidate (and older versions) does not include any CTV code or CTV\n>> activation code. If a miner runs Bitcoin Core 23.0 out the box it will not\n>> signal for CTV. If by some chance CTV was to activate through some other\n>> software release Bitcoin Core releases would not apply CTV rules but they\n>> also wouldn't reject blocks that apply CTV rules. Hence it is prudent to\n>> prepare for an eventuality where the miner signaling threshold might be\n>> reached but the community wants to prevent the attempted soft fork from\n>> activating. (I personally don't think a 90 percent miner signaling\n>> threshold will be reached but I wouldn't want to bet Bitcoin's future on\n>> it.)\n>>\n>> I've tentatively labelled this effort a User Resisted Soft Fork (URSF)\n>> but I'm open to better names. I certainly don't want to discourage those\n>> who dislike or oppose UASFs from contributing to this effort and\n>> potentially ultimately running a URSF release. If you don't want this\n>> rushed CTV soft fork to activate we are all on the same side whatever we\n>> call it.\n>>\n>> For now I've set up a ##ursf channel on Libera IRC to monitor\n>> developments and discuss working on an additional release that if run may\n>> ultimately reject blocks that signal for CTV.\n>>\n>> The intention of this would be to provide additional direction and\n>> incentive to miners that the community does not want this soft fork to be\n>> activated. To repeat running a Bitcoin Core release will not signal for a\n>> CTV soft fork out the box. If a miner runs a Bitcoin Core release it will\n>> not signal for CTV.\n>>\n>> Apologies that this is rushed. But as always with Jeremy caution and\n>> conservatism seems to be thrown out the window and we have to react to\n>> that. It goes without saying that this is not how Bitcoin consensus changes\n>> should be attempted.\n>>\n>> [1]: https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n>> [2]:\n>> https://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n>> [3]:\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020235.html\n>>\n>> --\n>> Michael Folkson\n>> Email: michaelfolkson at protonmail.com\n>> Keybase: michaelfolkson\n>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220424/4bd0bb7e/attachment-0001.html>"
            },
            {
                "author": "Ryan Grant",
                "date": "2022-04-24T12:55:22",
                "message_text_only": "Michael and Jorge,\n\nIt is ethically inappropriate to make personal attacks on the\ntrustworthiness of participants on this list, on such vague grounds as\ndisliking an activation proposal!\n\n  https://en.wikipedia.org/wiki/Wikipedia:Assume_good_faith\n\nIt is against the spirit of the project to base your judgements of a\ntechnical solution on who presents them!  You should not be so\ntechnically adrift that you only have reputation left to speak about.\n\nIf you disagree with ideas, then shoot them down on the technical merits.\n\n  https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-October/011457.html\n\nIf you disagree with people, then take it to smuttier sections of the Internet."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2022-04-24T13:11:55",
                "message_text_only": "On Sun, Apr 24, 2022 at 2:56 PM Ryan Grant <bitcoin-dev at rgrant.org> wrote:\n\n> Michael and Jorge,\n>\n> It is ethically inappropriate to make personal attacks on the\n> trustworthiness of participants on this list, on such vague grounds as\n> disliking an activation proposal!\n>\n>   https://en.wikipedia.org/wiki/Wikipedia:Assume_good_faith\n>\n\nI don't think the same principle is being applied to me and other people,\nsadly.\nSome people disregard dissent on the grounds that it comes from \"people who\njust loo for dissent\".\nI don't think it is unethical to say the truth. In fact, I think it is fair\nthat I clarify my bias against jeremy.\nI realize it can be held against me.\nWhat I think is hypocritical and unethical is having rules that are only\nexpected to be followed by some.\n\nIs everyone assuming good intentions from me?\nIs everyone assuming good intentions from luke?\nIs everyone assuming good intentions from michael?\n\nI don't think so.\n\nIt is against the spirit of the project to base your judgements of a\n> technical solution on who presents them!  You should not be so\n> technically adrift that you only have reputation left to speak about.\n>\n\nI disagree, I think it is against the spirit of the project to trust ideas\nbased on who they come from.\nIn that sense, I apologize for not being able to distrust every other\ndeveloper as much as I can distrust jeremy.\n\n\n> If you disagree with ideas, then shoot them down on the technical merits.\n>\n>\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-October/011457.html\n>\n\nI've tried regarding bip8 and speedy trial. I may be wrong, but I think\nthose ideas have been discarded not on their technical merits, but based on\nwho were promoting them. I feel there has been a biased against people like\nLuke-jr or me.\nThat's subjective. Perhaps I'm just being paranoid. But I truly think\nJeremy distrusts me and luke as much as I distrusts him, he just won't say\nit.\nAnyway, I had said it once before, so I guess there's no need to further\ndisclaim my bias against jeremy.\n\n\n> If you disagree with people, then take it to smuttier sections of the\n> Internet.\n>\n>\nYeah, to twitter, right? lol, sorry, I couldn't resist the joke.\nSorry.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220424/dfbc7de6/attachment.html>"
            },
            {
                "author": "Ryan Grant",
                "date": "2022-04-24T13:15:51",
                "message_text_only": "On Sun, Apr 24, 2022 at 1:12 PM Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> [...all context chopped, mid-sentence...]\n> I think it is against the spirit of the project to trust ideas based on who they come from.\n\nOn this we agree!"
            },
            {
                "author": "alicexbt",
                "date": "2022-04-25T16:11:11",
                "message_text_only": "Hi Peter and Zac,\n\n> I like the maxim of Peter Todd: any change of Bitcoin must benefit all\n> users. This means that every change must have well-defined and transparent\n> benefits. Personally I believe that the only additions to the protocol that\n> would still be acceptable are those that clearly benefit layer 2 solutions\n> such as LN and do not carry the dangerous potential of getting abused by\n> freeloaders selling commercial services on top of \u201cfree\u201d eternal storage on\n> the blockchain.\n>\n> To strengthen your point: benefiting \"all users\" can only be done by benefiting layer 2 solutions in some way, because it's inevitable that the vast majority of users will use layer 2 because that's the only known way that Bitcoin can scale.\n\n- CTV does not allow bitcoin blockchain to be used as storage\n- CTV will benefit layer 2 solutions: lightning, sidechains, spacechain etc.\n- Every L2 is dependent on L1 and soft forks could improve things that benefit both\n\nThere are a few emails with information that could be interpreted in a wrong way on this mailing list related to CTV or creating contentious environment. I had expected better things from bitcoin developers. This is not just the opinion of someone who supports CTV but even people who are trying to read things and form an opinion: https://nitter.net/NicolasDorier/status/1518407535480705024\n\nI am sure there are lot of positives if we look at things differently and will end the email on a good note:\n\nYou might like Jeremy or hate him, however he took some real efforts in working on CTV, Sapio etc. and even if BIP 119 never gets activated his contribution in bitcoin covenants will always be appreciated.\n\n/dev/fd0\n\nSent with [ProtonMail](https://protonmail.com/) secure email.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220425/637ef585/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "User Resisted Soft Fork for CTV",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Ryan Grant",
                "Michael Folkson",
                "Corey Haddad",
                "Keagan McClelland",
                "Peter Todd",
                "ZmnSCPxj",
                "alicexbt",
                "Jorge Tim\u00f3n",
                "Erik Aronesty",
                "Zac Greenwood",
                "Billy Tetrud"
            ],
            "messages_count": 18,
            "total_messages_chars_count": 60461
        }
    },
    {
        "title": "[bitcoin-dev] ANYPREVOUT in place of CTV",
        "thread_messages": [
            {
                "author": "darosior",
                "date": "2022-04-22T11:11:41",
                "message_text_only": "I would like to know people's sentiment about doing (a very slightly tweaked version of) BIP118 in place of\n(or before doing) BIP119.\n\nSIGHASH_ANYPREVOUT and its precedent iterations have been discussed for over 6 years. It presents proven and\nimplemented usecases, that are demanded and (please someone correct me if i'm wrong) more widely accepted than\nCTV's.\n\nSIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made optional [0], can emulate CTV just fine.\nSure then you can't have bare or Segwit v0 CTV, and it's a bit more expensive to use. But we can consider CTV\nan optimization of APO-AS covenants.\n\nCTV advocates have been presenting vaults as the flagship usecase. Although as someone who've been trying to\nimplement practical vaults for the past 2 years i doubt CTV is necessary nor sufficient for this (but still\nuseful!), using APO-AS covers it. And it's not a couple dozen more virtual bytes that are going to matter for\na potential vault user.\n\nIf after some time all of us who are currently dubious about CTV's stated usecases are proven wrong by onchain\nusage of a less efficient construction to achieve the same goal, we could roll-out CTV as an optimization.  In\nthe meantime others will have been able to deploy new applications leveraging ANYPREVOUT (Eltoo, blind\nstatechains, etc..[1]).\n\n\nGiven the interest in, and demand for, both simple covenants and better offchain protocols it seems to me that\nBIP118 is a soft fork candidate that could benefit more (if not most of) Bitcoin users.\nActually i'd also be interested in knowing if people would oppose the APO-AS part of BIP118, since it enables\nCTV's features, for the same reason they'd oppose BIP119.\n\n\n[0] That is, to not commit to the other inputs of the transaction (via `sha_sequences` and maybe also\n`sha_amounts`). Cf https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#signature-message.\n\n[1] https://anyprevout.xyz/ \"Use Cases\" section"
            },
            {
                "author": "rot13maxi",
                "date": "2022-04-22T11:44:24",
                "message_text_only": "Good morning darosior,\n\nDo you know if there is a working implementation of APO somewhere that people can use to try out some of the proposed usecases? For example, it would be great to see what eltoo would actually look like on an APO signet. Or to see some working code for a vault using covenants in an APO world.\n\nI haven\u2019t seen much in the way of APO implementations recently, but I also haven\u2019t gone looking, so would appreciate any links!\n\nThanks\n\nOn Fri, Apr 22, 2022 at 7:11 AM, darosior via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I would like to know people's sentiment about doing (a very slightly tweaked version of) BIP118 in place of\n> (or before doing) BIP119.\n>\n> SIGHASH_ANYPREVOUT and its precedent iterations have been discussed for over 6 years. It presents proven and\n> implemented usecases, that are demanded and (please someone correct me if i'm wrong) more widely accepted than\n> CTV's.\n>\n> SIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made optional [0], can emulate CTV just fine.\n> Sure then you can't have bare or Segwit v0 CTV, and it's a bit more expensive to use. But we can consider CTV\n> an optimization of APO-AS covenants.\n>\n> CTV advocates have been presenting vaults as the flagship usecase. Although as someone who've been trying to\n> implement practical vaults for the past 2 years i doubt CTV is necessary nor sufficient for this (but still\n> useful!), using APO-AS covers it. And it's not a couple dozen more virtual bytes that are going to matter for\n> a potential vault user.\n>\n> If after some time all of us who are currently dubious about CTV's stated usecases are proven wrong by onchain\n> usage of a less efficient construction to achieve the same goal, we could roll-out CTV as an optimization. In\n> the meantime others will have been able to deploy new applications leveraging ANYPREVOUT (Eltoo, blind\n> statechains, etc..[1]).\n>\n> Given the interest in, and demand for, both simple covenants and better offchain protocols it seems to me that\n> BIP118 is a soft fork candidate that could benefit more (if not most of) Bitcoin users.\n> Actually i'd also be interested in knowing if people would oppose the APO-AS part of BIP118, since it enables\n> CTV's features, for the same reason they'd oppose BIP119.\n>\n> [0] That is, to not commit to the other inputs of the transaction (via `sha_sequences` and maybe also\n> `sha_amounts`). Cf https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#signature-message.\n>\n> [1] https://anyprevout.xyz/ \"Use Cases\" section\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220422/801f1d1e/attachment.html>"
            },
            {
                "author": "darosior",
                "date": "2022-04-22T11:54:30",
                "message_text_only": "Hi,\n\nRichard Myers has an implementation of Eltoo using Bitcoin Core's functional test framework: https://github.com/remyers/bitcoin/blob/eltoo-anyprevout/test/functional/simulate_eltoo.py.\nHe blogged about it, too. https://yakshaver.org/2021/07/26/first.html\n\nHe seems to have something similar for covenants, but it's WIP: https://github.com/remyers/bitcoin/blob/covenant-anyprevout/test/functional/feature_apocovenant.py. https://yakshaver.org/2021/11/18/covenants.html.\n\nHis APO page looks like a good reference on the topic: https://yakshaver.org/bitcoin/#anyprevout.\n\n------- Original Message -------\nLe vendredi 22 avril 2022 \u00e0 1:44 PM, rot13maxi <rot13maxi at protonmail.com> a \u00e9crit :\n\n> Good morning darosior,\n>\n> Do you know if there is a working implementation of APO somewhere that people can use to try out some of the proposed usecases? For example, it would be great to see what eltoo would actually look like on an APO signet. Or to see some working code for a vault using covenants in an APO world.\n>\n> I haven\u2019t seen much in the way of APO implementations recently, but I also haven\u2019t gone looking, so would appreciate any links!\n>\n> Thanks\n>\n> On Fri, Apr 22, 2022 at 7:11 AM, darosior via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> I would like to know people's sentiment about doing (a very slightly tweaked version of) BIP118 in place of\n>> (or before doing) BIP119.\n>>\n>> SIGHASH_ANYPREVOUT and its precedent iterations have been discussed for over 6 years. It presents proven and\n>> implemented usecases, that are demanded and (please someone correct me if i'm wrong) more widely accepted than\n>> CTV's.\n>>\n>> SIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made optional [0], can emulate CTV just fine.\n>> Sure then you can't have bare or Segwit v0 CTV, and it's a bit more expensive to use. But we can consider CTV\n>> an optimization of APO-AS covenants.\n>>\n>> CTV advocates have been presenting vaults as the flagship usecase. Although as someone who've been trying to\n>> implement practical vaults for the past 2 years i doubt CTV is necessary nor sufficient for this (but still\n>> useful!), using APO-AS covers it. And it's not a couple dozen more virtual bytes that are going to matter for\n>> a potential vault user.\n>>\n>> If after some time all of us who are currently dubious about CTV's stated usecases are proven wrong by onchain\n>> usage of a less efficient construction to achieve the same goal, we could roll-out CTV as an optimization. In\n>> the meantime others will have been able to deploy new applications leveraging ANYPREVOUT (Eltoo, blind\n>> statechains, etc..[1]).\n>>\n>> Given the interest in, and demand for, both simple covenants and better offchain protocols it seems to me that\n>> BIP118 is a soft fork candidate that could benefit more (if not most of) Bitcoin users.\n>> Actually i'd also be interested in knowing if people would oppose the APO-AS part of BIP118, since it enables\n>> CTV's features, for the same reason they'd oppose BIP119.\n>>\n>> [0] That is, to not commit to the other inputs of the transaction (via `sha_sequences` and maybe also\n>> `sha_amounts`). Cf https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#signature-message.\n>>\n>> [1] https://anyprevout.xyz/ \"Use Cases\" section\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220422/424bbc72/attachment.html>"
            },
            {
                "author": "pushd",
                "date": "2022-04-22T13:35:11",
                "message_text_only": "> I would like to know people's sentiment about doing (a very slightly tweaked version of) BIP118 in place of (or before doing) BIP119.\n\nNACK for the below reasons:\n\n- Premature idea\n- I do not find use cases interesting\n- We are still in research phase of implementing covenants in bitcoin and looking for the best proposal\n- Taproot soft fork was recently activated and its too soon\n- Not enough documentation available\n- Could not find any pull request in core for BIP 118 that can be reviewed\n- Not enough tools available for testing\n\npushd\n---\n\nparallel lines meet at infinity?\n\n------- Original Message -------\nOn Friday, April 22nd, 2022 at 5:30 PM, bitcoin-dev-request at lists.linuxfoundation.org wrote:\n\n> Send bitcoin-dev mailing list submissions to\n> bitcoin-dev at lists.linuxfoundation.org\n>\n> To subscribe or unsubscribe via the World Wide Web, visit\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> or, via email, send a message with subject or body 'help' to\n> bitcoin-dev-request at lists.linuxfoundation.org\n>\n> You can reach the person managing the list at\n> bitcoin-dev-owner at lists.linuxfoundation.org\n>\n> When replying, please edit your Subject line so it is more specific\n> than \"Re: Contents of bitcoin-dev digest...\"\n>\n> Today's Topics:\n>\n> 1. ANYPREVOUT in place of CTV (darosior)\n>\n> ----------------------------------------------------------------------\n>\n> Message: 1\n> Date: Fri, 22 Apr 2022 11:11:41 +0000\n> From: darosior darosior at protonmail.com\n>\n> To: Bitcoin Protocol Discussion\n> bitcoin-dev at lists.linuxfoundation.org\n>\n> Subject: [bitcoin-dev] ANYPREVOUT in place of CTV\n> Message-ID:\n> p3P0m2_aNXd-4oYhFjCKJyI8zQXahmZed6bv7lnj9M9HbP9gMqMtJr-pP7XRAPs-rn_fJuGu1cv9ero5i8f0cvyZrMXYPzPx17CxJ2ZSvRk=@protonmail.com\n>\n> Content-Type: text/plain; charset=utf-8\n>\n> I would like to know people's sentiment about doing (a very slightly tweaked version of) BIP118 in place of\n> (or before doing) BIP119.\n>\n> SIGHASH_ANYPREVOUT and its precedent iterations have been discussed for over 6 years. It presents proven and\n> implemented usecases, that are demanded and (please someone correct me if i'm wrong) more widely accepted than\n> CTV's.\n>\n> SIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made optional [0], can emulate CTV just fine.\n> Sure then you can't have bare or Segwit v0 CTV, and it's a bit more expensive to use. But we can consider CTV\n> an optimization of APO-AS covenants.\n>\n> CTV advocates have been presenting vaults as the flagship usecase. Although as someone who've been trying to\n> implement practical vaults for the past 2 years i doubt CTV is necessary nor sufficient for this (but still\n> useful!), using APO-AS covers it. And it's not a couple dozen more virtual bytes that are going to matter for\n> a potential vault user.\n>\n> If after some time all of us who are currently dubious about CTV's stated usecases are proven wrong by onchain\n> usage of a less efficient construction to achieve the same goal, we could roll-out CTV as an optimization. In\n> the meantime others will have been able to deploy new applications leveraging ANYPREVOUT (Eltoo, blind\n> statechains, etc..[1]).\n>\n> Given the interest in, and demand for, both simple covenants and better offchain protocols it seems to me that\n> BIP118 is a soft fork candidate that could benefit more (if not most of) Bitcoin users.\n> Actually i'd also be interested in knowing if people would oppose the APO-AS part of BIP118, since it enables\n> CTV's features, for the same reason they'd oppose BIP119.\n>\n> [0] That is, to not commit to the other inputs of the transaction (via sha_sequences and maybe also\n> sha_amounts). Cf https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#signature-message.\n>\n> [1] https://anyprevout.xyz/ \"Use Cases\" section\n>\n> ------------------------------\n>\n> Subject: Digest Footer\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n> ------------------------------\n>\n> End of bitcoin-dev Digest, Vol 83, Issue 40\n> *******************************************\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220422/303a4052/attachment-0001.html>"
            },
            {
                "author": "Hampus Sj\u00f6berg",
                "date": "2022-04-25T13:34:25",
                "message_text_only": "Hi pushd.\nWould you mind clarifying what you mean by BIP118 being a premature idea?\nSIGHASH_ANYPREVOUT, or SIGHASH_NOINPUT, as it was called back then, was\nfirst proposed in the original Lightning Network whitepaper back in 2015.\nIt has been discussed on and off for many years now. I would not call it a\npremature idea.\n\nNow, the revised \"Taprooted\" version called ANYPREVOUT is a couple of years\nold, so going with the NOINPUT version could be a safer bet (though that's\na bit ridiculous in my opinion).\n\nRegarding that you do not find use-cases interesting. That's all fine I\nsuppose, but in the Lightning Network scene, I think it's fair to say that\nthere's widespread enthusiasm in getting a working eltoo solution, which\nnecessitates something like NOINPUT/ANYPREVOUT.\nAnd even if eltoo wouldn't happen, enabling spacechains, covenants and\nblind statechains seem like sufficient use-cases to me.\n\nCheers\nHampus\n\nOn Fri, Apr 22, 2022 at 9:32 PM pushd via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I would like to know people's sentiment about doing (a very slightly\n> tweaked version of) BIP118 in place of (or before doing) BIP119.\n>\n>\n> NACK for the below reasons:\n>\n> - Premature idea\n> - I do not find use cases interesting\n> - We are still in research phase of implementing covenants in bitcoin and\n> looking for the best proposal\n> - Taproot soft fork was recently activated and its too soon\n> - Not enough documentation available\n> - Could not find any pull request in core for BIP 118 that can be reviewed\n> - Not enough tools available for testing\n>\n>\n> pushd\n> ---\n>\n> parallel lines meet at infinity?\n>\n> ------- Original Message -------\n> On Friday, April 22nd, 2022 at 5:30 PM,\n> bitcoin-dev-request at lists.linuxfoundation.org wrote:\n>\n> Send bitcoin-dev mailing list submissions to\n> bitcoin-dev at lists.linuxfoundation.org\n>\n> To subscribe or unsubscribe via the World Wide Web, visit\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> or, via email, send a message with subject or body 'help' to\n> bitcoin-dev-request at lists.linuxfoundation.org\n>\n> You can reach the person managing the list at\n> bitcoin-dev-owner at lists.linuxfoundation.org\n>\n> When replying, please edit your Subject line so it is more specific\n> than \"Re: Contents of bitcoin-dev digest...\"\n>\n> Today's Topics:\n>\n> 1. ANYPREVOUT in place of CTV (darosior)\n>\n> ----------------------------------------------------------------------\n>\n> Message: 1\n> Date: Fri, 22 Apr 2022 11:11:41 +0000\n> From: darosior darosior at protonmail.com\n>\n> To: Bitcoin Protocol Discussion\n> bitcoin-dev at lists.linuxfoundation.org\n>\n> Subject: [bitcoin-dev] ANYPREVOUT in place of CTV\n> Message-ID:\n>\n> p3P0m2_aNXd-4oYhFjCKJyI8zQXahmZed6bv7lnj9M9HbP9gMqMtJr-pP7XRAPs-rn_fJuGu1cv9ero5i8f0cvyZrMXYPzPx17CxJ2ZSvRk=@protonmail.com\n>\n> Content-Type: text/plain; charset=utf-8\n>\n> I would like to know people's sentiment about doing (a very slightly\n> tweaked version of) BIP118 in place of\n> (or before doing) BIP119.\n>\n> SIGHASH_ANYPREVOUT and its precedent iterations have been discussed for\n> over 6 years. It presents proven and\n> implemented usecases, that are demanded and (please someone correct me if\n> i'm wrong) more widely accepted than\n> CTV's.\n>\n> SIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made\n> optional [0], can emulate CTV just fine.\n> Sure then you can't have bare or Segwit v0 CTV, and it's a bit more\n> expensive to use. But we can consider CTV\n> an optimization of APO-AS covenants.\n>\n> CTV advocates have been presenting vaults as the flagship usecase.\n> Although as someone who've been trying to\n> implement practical vaults for the past 2 years i doubt CTV is necessary\n> nor sufficient for this (but still\n> useful!), using APO-AS covers it. And it's not a couple dozen more virtual\n> bytes that are going to matter for\n> a potential vault user.\n>\n> If after some time all of us who are currently dubious about CTV's stated\n> usecases are proven wrong by onchain\n> usage of a less efficient construction to achieve the same goal, we could\n> roll-out CTV as an optimization. In\n> the meantime others will have been able to deploy new applications\n> leveraging ANYPREVOUT (Eltoo, blind\n> statechains, etc..[1]).\n>\n> Given the interest in, and demand for, both simple covenants and better\n> offchain protocols it seems to me that\n> BIP118 is a soft fork candidate that could benefit more (if not most of)\n> Bitcoin users.\n> Actually i'd also be interested in knowing if people would oppose the\n> APO-AS part of BIP118, since it enables\n> CTV's features, for the same reason they'd oppose BIP119.\n>\n> [0] That is, to not commit to the other inputs of the transaction (via\n> sha_sequences and maybe also\n> sha_amounts). Cf\n> https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#signature-message\n> .\n>\n> [1] https://anyprevout.xyz/ \"Use Cases\" section\n>\n> ------------------------------\n>\n> Subject: Digest Footer\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n> ------------------------------\n>\n> End of bitcoin-dev Digest, Vol 83, Issue 40\n> *******************************************\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220425/ee7678ee/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2022-04-22T17:01:14",
                "message_text_only": "There's no reason for before/after/in place. We have version bits specifically \nso we can have multiple deployments in parallel.\n\nBut none of this ST nonsense, please. That alone is a reason to oppose it.\n\nLuke\n\n\nOn Friday 22 April 2022 11:11:41 darosior via bitcoin-dev wrote:\n> I would like to know people's sentiment about doing (a very slightly\n> tweaked version of) BIP118 in place of (or before doing) BIP119.\n>\n> SIGHASH_ANYPREVOUT and its precedent iterations have been discussed for\n> over 6 years. It presents proven and implemented usecases, that are\n> demanded and (please someone correct me if i'm wrong) more widely accepted\n> than CTV's.\n>\n> SIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made\n> optional [0], can emulate CTV just fine. Sure then you can't have bare or\n> Segwit v0 CTV, and it's a bit more expensive to use. But we can consider\n> CTV an optimization of APO-AS covenants.\n>\n> CTV advocates have been presenting vaults as the flagship usecase. Although\n> as someone who've been trying to implement practical vaults for the past 2\n> years i doubt CTV is necessary nor sufficient for this (but still useful!),\n> using APO-AS covers it. And it's not a couple dozen more virtual bytes that\n> are going to matter for a potential vault user.\n>\n> If after some time all of us who are currently dubious about CTV's stated\n> usecases are proven wrong by onchain usage of a less efficient construction\n> to achieve the same goal, we could roll-out CTV as an optimization.  In the\n> meantime others will have been able to deploy new applications leveraging\n> ANYPREVOUT (Eltoo, blind statechains, etc..[1]).\n>\n>\n> Given the interest in, and demand for, both simple covenants and better\n> offchain protocols it seems to me that BIP118 is a soft fork candidate that\n> could benefit more (if not most of) Bitcoin users. Actually i'd also be\n> interested in knowing if people would oppose the APO-AS part of BIP118,\n> since it enables CTV's features, for the same reason they'd oppose BIP119.\n>\n>\n> [0] That is, to not commit to the other inputs of the transaction (via\n> `sha_sequences` and maybe also `sha_amounts`). Cf\n> https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#signature-me\n>ssage.\n>\n> [1] https://anyprevout.xyz/ \"Use Cases\" section\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "pushd",
                "date": "2022-04-22T17:14:50",
                "message_text_only": "Hi Luke,\n\n> But none of this ST nonsense, please. That alone is a reason to oppose it.\n\nAgree. Any soft fork that uses only speedy trial should be opposed. There are few other reasons to oppose it as well:\n\n- Premature idea\n- Use cases are not interesting for all users\n- We are still in research phase of implementing covenants in bitcoin and looking for the best proposal\n- Taproot soft fork was recently activated and its too soon\n- Not enough documentation available\n- Could not find any pull request in core for BIP 118 that can be reviewed\n- Not enough tools available for testing\n\nI am planning to maintain a page for all the NACKs against BIP 118 based on this thread. I am assuming you don't mind including your name in it.\n\npushd\n\n---\nparallel lines meet at infinity?\n\n> ------------------------------\n>\n> Message: 3\n> Date: Fri, 22 Apr 2022 17:01:14 +0000\n> From: Luke Dashjr luke at dashjr.org\n>\n> To: bitcoin-dev at lists.linuxfoundation.org, darosior\n> darosior at protonmail.com\n>\n> Subject: Re: [bitcoin-dev] ANYPREVOUT in place of CTV\n> Message-ID: 202204221701.15307.luke at dashjr.org\n>\n> Content-Type: Text/Plain; charset=\"iso-8859-1\"\n>\n> There's no reason for before/after/in place. We have version bits specifically\n> so we can have multiple deployments in parallel.\n>\n> But none of this ST nonsense, please. That alone is a reason to oppose it.\n>\n> Luke\n>\n> On Friday 22 April 2022 11:11:41 darosior via bitcoin-dev wrote:\n>\n>> I would like to know people's sentiment about doing (a very slightly\n>> tweaked version of) BIP118 in place of (or before doing) BIP119.\n>>\n>> SIGHASH_ANYPREVOUT and its precedent iterations have been discussed for\n>> over 6 years. It presents proven and implemented usecases, that are\n>> demanded and (please someone correct me if i'm wrong) more widely accepted\n>> than CTV's.\n>>\n>> SIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made\n>> optional [0], can emulate CTV just fine. Sure then you can't have bare or\n>> Segwit v0 CTV, and it's a bit more expensive to use. But we can consider\n>> CTV an optimization of APO-AS covenants.\n>>\n>> CTV advocates have been presenting vaults as the flagship usecase. Although\n>> as someone who've been trying to implement practical vaults for the past 2\n>> years i doubt CTV is necessary nor sufficient for this (but still useful!),\n>> using APO-AS covers it. And it's not a couple dozen more virtual bytes that\n>> are going to matter for a potential vault user.\n>>\n>> If after some time all of us who are currently dubious about CTV's stated\n>> usecases are proven wrong by onchain usage of a less efficient construction\n>> to achieve the same goal, we could roll-out CTV as an optimization. In the\n>> meantime others will have been able to deploy new applications leveraging\n>> ANYPREVOUT (Eltoo, blind statechains, etc..[1]).\n>>\n>> Given the interest in, and demand for, both simple covenants and better\n>> offchain protocols it seems to me that BIP118 is a soft fork candidate that\n>> could benefit more (if not most of) Bitcoin users. Actually i'd also be\n>> interested in knowing if people would oppose the APO-AS part of BIP118,\n>> since it enables CTV's features, for the same reason they'd oppose BIP119.\n>>\n>> [0] That is, to not commit to the other inputs of the transaction (via\n>> sha_sequences and maybe also sha_amounts). Cf\n>> https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#signature-me\n>> ssage.\n>>\n>> [1] https://anyprevout.xyz/ \"Use Cases\" section\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n> ------------------------------\n>\n> Subject: Digest Footer\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n> ------------------------------\n>\n> End of bitcoin-dev Digest, Vol 83, Issue 42\n> *******************************************\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220422/608937c7/attachment.html>"
            },
            {
                "author": "Richard Myers",
                "date": "2022-04-24T20:41:54",
                "message_text_only": "Hi darosior,\n\nThanks for sharing your thoughts on this.\n\n> I would like to know people's sentiment about doing (a very slightly tweaked version of) BIP118 in place of\n> (or before doing) BIP119.\n\nSounds good to me. Although from an activation perspective it may not be either/or, both proposals do compete for scarce reviewer time so their ordering will necessarily be driven by reviewer's priorities. My priority is eltoo which is why I focus on BIP-118.\n\n> SIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made optional [0], can emulate CTV just fine.\n\nFor someone not as versed in CTV, why is it necessary that ANYONECANPAY be optional to emulate CTV? Is there a write-up that explains how APO-AS w/out ANYONECANPAY approximates CTV?\n\nIn the case of eltoo commit txs, we use bring-your-own-fee (BYOF) to late-bind fees; that means ANYONECANPAY will always be paired with APO-AS for eltoo. Settlement txs in eltoo use just APO and do not necessarily need to be paired with ANYONECANPAY.\n\nI would guess making ANYONECANPAY the default for APO-AS was a way to squeeze in one more sighash flag. Perhaps there's another way to do it?\n\nIncluding SIGHASH_GROUP with APO for eltoo is also tempting. Specifically so the counter-party who commits a settlement tx can use for fees their settled to_self balance. How to rejigger the sighash flags to accommodate both APO and GROUP may be worth some discussion.\n\nThe BIP-118 proposal will certainly benefit from having input from reviewers looking at other protocols than eltoo.\n\n  -- Richard"
            },
            {
                "author": "darosior",
                "date": "2022-04-25T13:35:48",
                "message_text_only": "Hi Richard,\n\n> Sounds good to me. Although from an activation perspective it may not be either/or, both proposals do\ncompete for scarce reviewer time\n\nYes, of course. Let's say i was more interested in knowing if people who oppose CTV would oppose\nSIGHASH_ANYPREVOUT too. I think talking about activation of anything at this point is premature.\n\n\n> For someone not as versed in CTV, why is it necessary that ANYONECANPAY be optional to emulate CTV? Is there\na write-up that explains how APO-AS w/out ANYONECANPAY approximates CTV?\n\nI'm not aware of any specific to CTV. It's just that the fields covered in the CTV hash are very close to what\nANYPREVOUT_ANYSCRIPT's signature hash covers [0]. The two things that CTV commits to that APO_AS does not are\nthe number of inputs and the hash of the inputs' sequences [1].\nNot committing to the number of inputs and other inputs' data is today's behaviour of ANYONECANPAY that can\nbe combined with other signature hash types [1]. Thus APO_AS makes ACP mandatory, and to emulate CTV\ncompletely it should be optional.\n\n\nAntoine\n\n[0] https://github.com/bitcoin/bips/blob/master/bip-0119.mediawiki#Detailed_Specification\n[1] https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#signature-message\n[2] https://github.com/bitcoin/bitcoin/blob/10a626a1d6776447525f50d3e1a97b3c5bbad7d6/src/script/interpreter.cpp#L1327, https://github.com/bitcoin/bitcoin/blob/10a626a1d6776447525f50d3e1a97b3c5bbad7d6/src/script/interpreter.cpp#L1517-L1522\n\n\n------- Original Message -------\nLe dimanche 24 avril 2022 \u00e0 10:41 PM, Richard Myers <remyers at yakshaver.org> a \u00e9crit :\n\n\n> Hi darosior,\n>\n> Thanks for sharing your thoughts on this.\n>\n> > I would like to know people's sentiment about doing (a very slightly tweaked version of) BIP118 in place of\n> > (or before doing) BIP119.\n>\n>\n> Sounds good to me. Although from an activation perspective it may not be either/or, both proposals do compete for scarce reviewer time so their ordering will necessarily be driven by reviewer's priorities. My priority is eltoo which is why I focus on BIP-118.\n>\n> > SIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made optional [0], can emulate CTV just fine.\n>\n>\n> For someone not as versed in CTV, why is it necessary that ANYONECANPAY be optional to emulate CTV? Is there a write-up that explains how APO-AS w/out ANYONECANPAY approximates CTV?\n>\n> In the case of eltoo commit txs, we use bring-your-own-fee (BYOF) to late-bind fees; that means ANYONECANPAY will always be paired with APO-AS for eltoo. Settlement txs in eltoo use just APO and do not necessarily need to be paired with ANYONECANPAY.\n>\n> I would guess making ANYONECANPAY the default for APO-AS was a way to squeeze in one more sighash flag. Perhaps there's another way to do it?\n>\n> Including SIGHASH_GROUP with APO for eltoo is also tempting. Specifically so the counter-party who commits a settlement tx can use for fees their settled to_self balance. How to rejigger the sighash flags to accommodate both APO and GROUP may be worth some discussion.\n>\n> The BIP-118 proposal will certainly benefit from having input from reviewers looking at other protocols than eltoo.\n>\n> -- Richard"
            },
            {
                "author": "darosior",
                "date": "2022-04-25T16:35:14",
                "message_text_only": "Just a correction to my previous mail. Sorry for the non-attribution, i didn't recall APO covenants had been discussed in the context of CTV.\n\n> > a write-up that explains how APO-AS w/out ANYONECANPAY approximates CTV?\n>\n> I'm not aware of any specific to CTV. It's just that the fields covered in the CTV hash are very close to what\n\nThe comparison was already done by Anthony Towns.\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-June/017036.html\n\nJeremy Rubin already pointed out that it missed committing to the nSequences hash and number of inputs (and optionally scriptSigs).\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-June/017038.html\n\n\n------- Original Message -------\nLe lundi 25 avril 2022 \u00e0 3:35 PM, darosior via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> a \u00e9crit :\n\n\n> Hi Richard,\n>\n> > Sounds good to me. Although from an activation perspective it may not be either/or, both proposals do\n>\n> compete for scarce reviewer time\n>\n> Yes, of course. Let's say i was more interested in knowing if people who oppose CTV would oppose\n> SIGHASH_ANYPREVOUT too. I think talking about activation of anything at this point is premature.\n>\n> > For someone not as versed in CTV, why is it necessary that ANYONECANPAY be optional to emulate CTV? Is there\n>\n> a write-up that explains how APO-AS w/out ANYONECANPAY approximates CTV?\n>\n> I'm not aware of any specific to CTV. It's just that the fields covered in the CTV hash are very close to what\n> ANYPREVOUT_ANYSCRIPT's signature hash covers [0]. The two things that CTV commits to that APO_AS does not are\n> the number of inputs and the hash of the inputs' sequences [1].\n> Not committing to the number of inputs and other inputs' data is today's behaviour of ANYONECANPAY that can\n> be combined with other signature hash types [1]. Thus APO_AS makes ACP mandatory, and to emulate CTV\n> completely it should be optional.\n>\n>\n> Antoine\n>\n> [0] https://github.com/bitcoin/bips/blob/master/bip-0119.mediawiki#Detailed_Specification\n> [1] https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#signature-message\n> [2] https://github.com/bitcoin/bitcoin/blob/10a626a1d6776447525f50d3e1a97b3c5bbad7d6/src/script/interpreter.cpp#L1327, https://github.com/bitcoin/bitcoin/blob/10a626a1d6776447525f50d3e1a97b3c5bbad7d6/src/script/interpreter.cpp#L1517-L1522\n>\n>\n> ------- Original Message -------\n> Le dimanche 24 avril 2022 \u00e0 10:41 PM, Richard Myers remyers at yakshaver.org a \u00e9crit :\n>\n>\n>\n> > Hi darosior,\n> >\n> > Thanks for sharing your thoughts on this.\n> >\n> > > I would like to know people's sentiment about doing (a very slightly tweaked version of) BIP118 in place of\n> > > (or before doing) BIP119.\n> >\n> > Sounds good to me. Although from an activation perspective it may not be either/or, both proposals do compete for scarce reviewer time so their ordering will necessarily be driven by reviewer's priorities. My priority is eltoo which is why I focus on BIP-118.\n> >\n> > > SIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made optional [0], can emulate CTV just fine.\n> >\n> > For someone not as versed in CTV, why is it necessary that ANYONECANPAY be optional to emulate CTV? Is there a write-up that explains how APO-AS w/out ANYONECANPAY approximates CTV?\n> >\n> > In the case of eltoo commit txs, we use bring-your-own-fee (BYOF) to late-bind fees; that means ANYONECANPAY will always be paired with APO-AS for eltoo. Settlement txs in eltoo use just APO and do not necessarily need to be paired with ANYONECANPAY.\n> >\n> > I would guess making ANYONECANPAY the default for APO-AS was a way to squeeze in one more sighash flag. Perhaps there's another way to do it?\n> >\n> > Including SIGHASH_GROUP with APO for eltoo is also tempting. Specifically so the counter-party who commits a settlement tx can use for fees their settled to_self balance. How to rejigger the sighash flags to accommodate both APO and GROUP may be worth some discussion.\n> >\n> > The BIP-118 proposal will certainly benefit from having input from reviewers looking at other protocols than eltoo.\n> >\n> > -- Richard\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Erik Aronesty",
                "date": "2022-04-25T01:46:25",
                "message_text_only": ">\n>\n> useful!), using APO-AS covers it. And it's not a couple dozen more virtual\n> bytes that are going to matter for\n> a potential vault user.\n>\n\nmakes sense that byte-efficiency would be likely less important to vault\nusers vs lightning noninteractive channel users\n\n\n>\n> the meantime others will have been able to deploy new applications\n> leveraging ANYPREVOUT (Eltoo, blind\n> statechains, etc..[1]).\n>\n\na smaller code change that seems much less controversial\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220424/5df93b81/attachment-0001.html>"
            },
            {
                "author": "Nadav Ivgi",
                "date": "2022-04-25T16:35:17",
                "message_text_only": "darosior via bitcoin-dev wrote:\n\n> CTV advocates have been presenting vaults as the flagship usecase.\nAlthough as someone who've been trying to\n> implement practical vaults for the past 2 years i doubt CTV is necessary\nnor sufficient for this (but still\n> useful!), using APO-AS covers it. And it's not a couple dozen more\nvirtual bytes that are going to matter for\n> a potential vault user.\n\nSome potential vault users looking to store funds for long time periods\n(say of decades) might have quantumphobia and prefer to avoid Taproot for\nthat reason.\n\nOne of the arguments presented for not using pubkey hashes in Taproot is\nthat quantumphobic people could choose to continue using non-Taproot\noutputs. Making a feature that's targeted for long-term cold-storage vaults\navailable on Taproot only might be less ideal in that view.\n\nCheers\nshesek\n\nOn Fri, Apr 22, 2022 at 2:23 PM darosior via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I would like to know people's sentiment about doing (a very slightly\n> tweaked version of) BIP118 in place of\n> (or before doing) BIP119.\n>\n> SIGHASH_ANYPREVOUT and its precedent iterations have been discussed for\n> over 6 years. It presents proven and\n> implemented usecases, that are demanded and (please someone correct me if\n> i'm wrong) more widely accepted than\n> CTV's.\n>\n> SIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made\n> optional [0], can emulate CTV just fine.\n> Sure then you can't have bare or Segwit v0 CTV, and it's a bit more\n> expensive to use. But we can consider CTV\n> an optimization of APO-AS covenants.\n>\n> CTV advocates have been presenting vaults as the flagship usecase.\n> Although as someone who've been trying to\n> implement practical vaults for the past 2 years i doubt CTV is necessary\n> nor sufficient for this (but still\n> useful!), using APO-AS covers it. And it's not a couple dozen more virtual\n> bytes that are going to matter for\n> a potential vault user.\n>\n> If after some time all of us who are currently dubious about CTV's stated\n> usecases are proven wrong by onchain\n> usage of a less efficient construction to achieve the same goal, we could\n> roll-out CTV as an optimization.  In\n> the meantime others will have been able to deploy new applications\n> leveraging ANYPREVOUT (Eltoo, blind\n> statechains, etc..[1]).\n>\n>\n> Given the interest in, and demand for, both simple covenants and better\n> offchain protocols it seems to me that\n> BIP118 is a soft fork candidate that could benefit more (if not most of)\n> Bitcoin users.\n> Actually i'd also be interested in knowing if people would oppose the\n> APO-AS part of BIP118, since it enables\n> CTV's features, for the same reason they'd oppose BIP119.\n>\n>\n> [0] That is, to not commit to the other inputs of the transaction (via\n> `sha_sequences` and maybe also\n> `sha_amounts`). Cf\n> https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#signature-message\n> .\n>\n> [1] https://anyprevout.xyz/ \"Use Cases\" section\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220425/598ecaae/attachment.html>"
            },
            {
                "author": "Nadav Ivgi",
                "date": "2022-04-25T16:57:48",
                "message_text_only": "darosior via bitcoin-dev wrote:\n> i doubt CTV is necessary nor sufficient for this\n\nI would be interested to hear more on this.\n\nIs it not necessary because you can exchange and store pre-signed\ntransactions instead?\n\nWhat purpose is it not sufficient for? There are some vault designs out\nthere that are able to achieve interesting properties with CTV, like James\nO'Beirne's simple-ctv-vault:\n\nhttps://github.com/jamesob/simple-ctv-vault\n(the basic design expressed in Minsc:\nhttps://min.sc/nextc/#gist=001cf1fcb0e24ca9f3614c4db9bfe57d:4)\n\nOn Fri, Apr 22, 2022 at 2:23 PM darosior via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I would like to know people's sentiment about doing (a very slightly\n> tweaked version of) BIP118 in place of\n> (or before doing) BIP119.\n>\n> SIGHASH_ANYPREVOUT and its precedent iterations have been discussed for\n> over 6 years. It presents proven and\n> implemented usecases, that are demanded and (please someone correct me if\n> i'm wrong) more widely accepted than\n> CTV's.\n>\n> SIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made\n> optional [0], can emulate CTV just fine.\n> Sure then you can't have bare or Segwit v0 CTV, and it's a bit more\n> expensive to use. But we can consider CTV\n> an optimization of APO-AS covenants.\n>\n> CTV advocates have been presenting vaults as the flagship usecase.\n> Although as someone who've been trying to\n> implement practical vaults for the past 2 years i doubt CTV is necessary\n> nor sufficient for this (but still\n> useful!), using APO-AS covers it. And it's not a couple dozen more virtual\n> bytes that are going to matter for\n> a potential vault user.\n>\n> If after some time all of us who are currently dubious about CTV's stated\n> usecases are proven wrong by onchain\n> usage of a less efficient construction to achieve the same goal, we could\n> roll-out CTV as an optimization.  In\n> the meantime others will have been able to deploy new applications\n> leveraging ANYPREVOUT (Eltoo, blind\n> statechains, etc..[1]).\n>\n>\n> Given the interest in, and demand for, both simple covenants and better\n> offchain protocols it seems to me that\n> BIP118 is a soft fork candidate that could benefit more (if not most of)\n> Bitcoin users.\n> Actually i'd also be interested in knowing if people would oppose the\n> APO-AS part of BIP118, since it enables\n> CTV's features, for the same reason they'd oppose BIP119.\n>\n>\n> [0] That is, to not commit to the other inputs of the transaction (via\n> `sha_sequences` and maybe also\n> `sha_amounts`). Cf\n> https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#signature-message\n> .\n>\n> [1] https://anyprevout.xyz/ \"Use Cases\" section\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220425/cd6fa22e/attachment-0001.html>"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2022-04-26T20:13:26",
                "message_text_only": "I can't find all of my earlier references around this, I thought I made a\nthread on it, but as a reminder, my thoughts for mild tweaks to APO that\nmake it a bit less hacky are as follows:\n\n- Remove OP_1 key punning and replace it with OP_GENERATOR and\nOP_INTERNALKEY (maybe OP_EXTERNALKEY too?). The key punning is useful\ngenerically, because I may want to reuse the internal key in conjunction\nwith a script path in some circumstances.\n- Add an additional sequence field that is specific to a signature with no\nother consensus meaning, so APO can be used with absolute timelocks. For\nexample, this makes it impossible for more than one ratchet to be\naggregated within a single transaction under any circumstance if their\nsequences differ (not sure this is a good example, but an example\nnonetheless).\n- Replace tagged keys for APO with either a Checksig2 or a separate feature\nflag that enables or disables APO behavior so that we can have programmatic\ncontrol over if APO is allowed for a given key (e..g., OP_IF <N> CSV DROP\nCHECKSIG2 OP_ELSE CHECKSIG OP_ENDIF enables APO to be turned on after a\ncertain time, perhaps for a pre-approved backup transaction).\n\nOverall, this would make eltoo ratchets look something like this:\n\n<sig> <seq> OP_1 OP_INTERNALKEY OP_CHECKSIG2VERIFY <N> OP_GREATERTHAN\n\nwhere checksig2 leaves seq on the stack which can be used to enforce the\nratchet.\n\nand covenants like:\n\n<sig> OP_1 OP_1 OP_GENERATOR OP_CHECKSIG2VERIFY\n\n\n\n\n\n\n\nOn Fri, Apr 22, 2022 at 4:23 AM darosior via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I would like to know people's sentiment about doing (a very slightly\n> tweaked version of) BIP118 in place of\n> (or before doing) BIP119.\n>\n> SIGHASH_ANYPREVOUT and its precedent iterations have been discussed for\n> over 6 years. It presents proven and\n> implemented usecases, that are demanded and (please someone correct me if\n> i'm wrong) more widely accepted than\n> CTV's.\n>\n> SIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made\n> optional [0], can emulate CTV just fine.\n> Sure then you can't have bare or Segwit v0 CTV, and it's a bit more\n> expensive to use. But we can consider CTV\n> an optimization of APO-AS covenants.\n>\n> CTV advocates have been presenting vaults as the flagship usecase.\n> Although as someone who've been trying to\n> implement practical vaults for the past 2 years i doubt CTV is necessary\n> nor sufficient for this (but still\n> useful!), using APO-AS covers it. And it's not a couple dozen more virtual\n> bytes that are going to matter for\n> a potential vault user.\n>\n> If after some time all of us who are currently dubious about CTV's stated\n> usecases are proven wrong by onchain\n> usage of a less efficient construction to achieve the same goal, we could\n> roll-out CTV as an optimization.  In\n> the meantime others will have been able to deploy new applications\n> leveraging ANYPREVOUT (Eltoo, blind\n> statechains, etc..[1]).\n>\n>\n> Given the interest in, and demand for, both simple covenants and better\n> offchain protocols it seems to me that\n> BIP118 is a soft fork candidate that could benefit more (if not most of)\n> Bitcoin users.\n> Actually i'd also be interested in knowing if people would oppose the\n> APO-AS part of BIP118, since it enables\n> CTV's features, for the same reason they'd oppose BIP119.\n>\n>\n> [0] That is, to not commit to the other inputs of the transaction (via\n> `sha_sequences` and maybe also\n> `sha_amounts`). Cf\n> https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#signature-message\n> .\n>\n> [1] https://anyprevout.xyz/ \"Use Cases\" section\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220426/8de4425a/attachment-0001.html>"
            },
            {
                "author": "Nadav Ivgi",
                "date": "2022-04-29T05:08:32",
                "message_text_only": "Here's a summary of the trade-offs I see for using APO as a CTV alternative:\n\n1. The resulting txids are not stable.\n\nCTV commits to enough tx information such that given the txid:vout of the\ncovenant-encumbered output, you can predict the txid of the spending tx\npermitted by CTV (and of the entire transaction graph descending from it).\n\nThis property could be important for some of the proposed CTV use-cases,\nlike channel factories.\n\n2. APO will only be available on Taproot, which some people might prefer to\navoid for long-term multi-decade vault storage due to QC concerns. (also\nsee my previous post on this thread [0])\n\n3. Higher witness satisfaction cost of roughly 3x vbytes vs CTV-in-Taproot\n(plus 33 extra vbytes vs CTV-in-segwitv0 *in the case of a single CTV\nbranch*, for the taproot control block. with more branches CTV-in-taproot\neventually becomes preferable).\n\n4. Higher network-wide full-node validation costs (checking a signature is\nquite more expensive than hashing, and the hashing is done in both cases).\n\n5. As APO is currently spec'd, it would suffer from the half-spend problem:\nif you have multiple outputs encumbered under an APO covenant that requires\nthe same tx sigmsg hash, it becomes possible to spend all of them together\nas multiple inputs in a single transaction and burn the extra to mining\nfees.\n\nIf I'm not mistaken, I believe this makes the simple-apo-vault\nimplementation [1] vulnerable to spending multiple vaulted outputs of the\nsame denomination together and burning all but the first one. I asked the\nauthor for a more definitive answer on twitter [2].\n\nFixing this requires amending BIP 118 with some new sigmsg flags (making\nthe ANYONECANPAY behaviour optional, as mentioned in the OP).\n\nThis is definitely possible but also means that APO as-is isn't a\nCTV-replacement candidate, without first going through some more design and\nreview iterations.\n\nshesek\n\n[0]\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020326.html\n[1] https://github.com/darosior/simple-anyprevout-vault\n[2] https://twitter.com/shesek/status/1519874493434544128\n\n\n\nOn Fri, Apr 22, 2022 at 2:23 PM darosior via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I would like to know people's sentiment about doing (a very slightly\n> tweaked version of) BIP118 in place of\n> (or before doing) BIP119.\n>\n> SIGHASH_ANYPREVOUT and its precedent iterations have been discussed for\n> over 6 years. It presents proven and\n> implemented usecases, that are demanded and (please someone correct me if\n> i'm wrong) more widely accepted than\n> CTV's.\n>\n> SIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made\n> optional [0], can emulate CTV just fine.\n> Sure then you can't have bare or Segwit v0 CTV, and it's a bit more\n> expensive to use. But we can consider CTV\n> an optimization of APO-AS covenants.\n>\n> CTV advocates have been presenting vaults as the flagship usecase.\n> Although as someone who've been trying to\n> implement practical vaults for the past 2 years i doubt CTV is necessary\n> nor sufficient for this (but still\n> useful!), using APO-AS covers it. And it's not a couple dozen more virtual\n> bytes that are going to matter for\n> a potential vault user.\n>\n> If after some time all of us who are currently dubious about CTV's stated\n> usecases are proven wrong by onchain\n> usage of a less efficient construction to achieve the same goal, we could\n> roll-out CTV as an optimization.  In\n> the meantime others will have been able to deploy new applications\n> leveraging ANYPREVOUT (Eltoo, blind\n> statechains, etc..[1]).\n>\n>\n> Given the interest in, and demand for, both simple covenants and better\n> offchain protocols it seems to me that\n> BIP118 is a soft fork candidate that could benefit more (if not most of)\n> Bitcoin users.\n> Actually i'd also be interested in knowing if people would oppose the\n> APO-AS part of BIP118, since it enables\n> CTV's features, for the same reason they'd oppose BIP119.\n>\n>\n> [0] That is, to not commit to the other inputs of the transaction (via\n> `sha_sequences` and maybe also\n> `sha_amounts`). Cf\n> https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#signature-message\n> .\n>\n> [1] https://anyprevout.xyz/ \"Use Cases\" section\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220429/08486216/attachment.html>"
            },
            {
                "author": "darosior",
                "date": "2022-04-29T08:30:55",
                "message_text_only": "Hi Shesek,\n\n> 1. The resulting txids are not stable.\n\nThis is *literally* what the post you are replying to is proposing to solve.\n\n> This property could be important for some of the proposed CTV use-cases, like channel factories.\n\nHmm? You can't have channel factories without Eltoo. (Well, you can in theory but good luck.)\nMaybe you are refering to non-interactive channel creation? The case for stable txids is less strong if wehave APO (and therefore Eltoo). [0]\n\n> 2. APO will only be available on Taproot, which some people might prefer to avoid for long-term multi-decade vault storage due to QC concerns. (also see my previous post on this thread [0])\n\nThis has been addressed over and over and over again. If a QC is able overnight to spend a large fraction of\nthe supply, your coins in your super non-QC-vulnerable-bare-CTV-covenant (that would eventually become\nvulnerable when trying to use it) are worthless.[1]\n\nSorry for being sarcastic, but at this point it's not fair to use quantum-computer FUD to justify theactivation of CTV over APO, or encourage the use of legacy transactions over Taproot ones.\n\n> 3. Higher witness satisfaction cost of roughly 3x vbytes vs CTV-in-Taproot (plus 33 extra vbytes vs CTV-in-segwitv0 in the case of a single CTV branch, for the taproot control block. with more branches CTV-in-taproot eventually becomes preferable).\n\nAgain, this is what my post discusses. Here are the arguments from my post about why i don't think it's a big deal:\n\n1. You can in this case see CTV as an optimization of (tweaked) APOAS. A lot of us are doubtful about CTV\nusecases for real people. So much that it was even proposed to temporarily activate it to see if it would\never have any real traction! [2]\nMy point with this post was: what if we do (a slightly tweaked) BIP118, that is otherwise useful. And\nif this use of covenants is really getting traction then we can roll out an optimization in the form of\nCTV (or better covenants, as we'd have had more research put into it by this time).\n2. CTV is mainly sold for its usage inside vaults. While i'm not convinced, a few more vbytes should not\nmatter for this usecase.\n\nAlso, it's not 33 extra vbytes vs CTV-in-segwitv0, but 33 extra * witness units* (8.25 vbytes).\nAside, you can also use the internal key optimization with APO. But i don't think it's desirable just to save32 WU, as you can't have NUMS-ness then. [3]\n\n> 4. Higher network-wide full-node validation costs (checking a signature is quite more expensive than hashing, and the hashing is done in both cases).\n\nAre APO signatures more expensive to verify? If not i don't think this should be a reason to constrain us to a\nmuch less useful construction, as the cost for the network of validating signatures already exists today. Evenif it didn't, the tradeoff of cost/usefulness needs to be considered.\n\n> 5. As APO is currently spec'd, it would suffer from the half-spend problem: if you have multiple outputs encumbered under an APO covenant that requires the same tx sigmsg hash, it becomes possible to spend all of them together as multiple inputs in a single transaction and burn the extra to mining fees.\n>\n> If I'm not mistaken, I believe this makes the simple-apo-vault implementation [1] vulnerable to spending multiple vaulted outputs of the same denomination together and burning all but the first one. I asked the author for a more definitive answer on twitter [2].\n>\n> Fixing this requires amending BIP 118 with some new sigmsg flags (making the ANYONECANPAY behaviour optional, as mentioned in the OP).\n\nYes! And as i mentioned on Twitter also committing to the input index which i forgot to add in the OP here.\n\nWhile i don't think the specific points are valid, i appreciate your reply and your efforts to explore the\ntradeoffs between the two approaches.\n\nThanks,\nAntoine\n\n[0] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019813.html\n\n[1] https://bitcoin.stackexchange.com/a/91050/101498\n[2] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020242.html\n[3] https://twitter.com/darosior/status/1518979155362254849?s=20&t=mGkw7K8mcyQwdLImFvdebw\n\n> This is definitely possible but also means that APO as-is isn't a CTV-replacement candidate, without first going through some more design and review iterations.\n>\n> shesek\n>\n> [0] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020326.html\n>\n> [1] https://github.com/darosior/simple-anyprevout-vault\n> [2] https://twitter.com/shesek/status/1519874493434544128\n>\n> On Fri, Apr 22, 2022 at 2:23 PM darosior via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> I would like to know people's sentiment about doing (a very slightly tweaked version of) BIP118 in place of\n>> (or before doing) BIP119.\n>>\n>> SIGHASH_ANYPREVOUT and its precedent iterations have been discussed for over 6 years. It presents proven and\n>> implemented usecases, that are demanded and (please someone correct me if i'm wrong) more widely accepted than\n>> CTV's.\n>>\n>> SIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made optional [0], can emulate CTV just fine.\n>> Sure then you can't have bare or Segwit v0 CTV, and it's a bit more expensive to use. But we can consider CTV\n>> an optimization of APO-AS covenants.\n>>\n>> CTV advocates have been presenting vaults as the flagship usecase. Although as someone who've been trying to\n>> implement practical vaults for the past 2 years i doubt CTV is necessary nor sufficient for this (but still\n>> useful!), using APO-AS covers it. And it's not a couple dozen more virtual bytes that are going to matter for\n>> a potential vault user.\n>>\n>> If after some time all of us who are currently dubious about CTV's stated usecases are proven wrong by onchain\n>> usage of a less efficient construction to achieve the same goal, we could roll-out CTV as an optimization. In\n>> the meantime others will have been able to deploy new applications leveraging ANYPREVOUT (Eltoo, blind\n>> statechains, etc..[1]).\n>>\n>> Given the interest in, and demand for, both simple covenants and better offchain protocols it seems to me that\n>> BIP118 is a soft fork candidate that could benefit more (if not most of) Bitcoin users.\n>> Actually i'd also be interested in knowing if people would oppose the APO-AS part of BIP118, since it enables\n>> CTV's features, for the same reason they'd oppose BIP119.\n>>\n>> [0] That is, to not commit to the other inputs of the transaction (via `sha_sequences` and maybe also\n>> `sha_amounts`). Cf https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#signature-message.\n>>\n>> [1] https://anyprevout.xyz/ \"Use Cases\" section\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220429/54863559/attachment-0001.html>"
            },
            {
                "author": "Nadav Ivgi",
                "date": "2022-04-29T10:21:33",
                "message_text_only": "> This is *literally* what the post you are replying to is proposing to\nsolve.\n\nI thought the changes mentioned in the OP (+ committing to the spent input\nindex) only solves the half-spend problem, but not the stable txids one?\n\nThere can be other inputs with a scriptSig, which doesn't get committed to\nin the APO hash. I guess this isn't too common, but there might be some\ncases where you would want to spend some (pre-selected) non-segwit inputs\nalongside your covenant, maybe for fees. With CTV you would pre-commit to\nthe scriptSig which makes it non-malleable even if the script itself is.\n\n> Hmm? You can't have channel factories without Eltoo. (Well, you can in\ntheory but good luck.)\n> Maybe you are refering to non-interactive channel creation?\n\nI was referring to what BIP 119 calls 'Batched Channel Creation' [0], which\nis a sort of a channel factory construction under a broader definition (and\nin fact was previously called that in the BIP [1]).\n\n> The case for stable txids is less strong if we have APO (and therefore\nEltoo).\n\nThere's merit in using these factory constructs for Poon-Dryja channels\neven if Eltoo was available.\nI don't foresee Eltoo taking over the penalty approach entirely, but rather\nthe two living side by side.\n\n(It could theoretically be possible to use APO to open Poon-Dryja channels\non top of unstable funding txids, but having stable txids makes this much\nmore easily integratable with existing lightning implementations, without\nthe invasive changes that unstable txids would bring.)\n\n> This has been addressed over and over and over again. If a QC is able\novernight to spend a large fraction of\n> the supply, your coins in your super non-QC-vulnerable-bare-CTV-covenant\n(that would eventually become\n> vulnerable when trying to use it) are worthless.\n\nIt might be the case that a sufficient fraction of supply does switch over\nto QC-protected outputs in time, with only some small minority that didn't\nactively switch over *and* with revealed bare pubkeys losing their funds,\nwhich wouldn't make BTC entirely worthless. It makes sense not to want to\nbe in that minority, ideally without requiring further time-sensitive\nactive action (esp if considering long-term deep cold storage for\ninheritance etc).\n\n(This of course assumes a safe post-QC mechanism to later spend these\nfunds; IIUC there are some viable approaches for that using a two-step\nspending procedure, where you prove knowledge of the pubkey/script preimage\nwhile commiting to a future tx.)\n\n> Sorry for being sarcastic, but at this point it's not fair to use\nquantum-computer FUD to justify the\n> activation of CTV over APO, or encourage the use of legacy transactions\nover Taproot ones.\n\nSorry if it came off as FUDing. I don't know enough to hold a strong opinion\non whether the fear of QCs is justified or not. I know that many people on\nthis list don't think so, but I also think that this fear is prevalent\nenough to warrant taking it into consideration (at least for features that\ntarget long-term SoV use cases; less so for features targeted at L2 MoE\napplications like lightning spacechains paypools etc).\n\n> you can also use the internal key optimization .. you can't have\nNUMS-ness then\n\nRight, which makes this unsuitable for the vaulting use case.\n\n> Also, it's not 33 extra vbytes vs CTV-in-segwitv0, but 33 extra * witness\nunits* (8.25 vbytes).\n\nUgh yes sorry about that! I realized after hitting send and meant to\nclarify that it should've been s/vbyte/WU/ in my next reply.\n\n> Are APO signatures more expensive to verify? .. the cost for the network\nof validating signatures already exists today\n\nNot compared to existing signature verifications, but compared to a\nCTV/TXHASH-like construction.\n\nCan anyone quantify how much of a difference this makes in practice?\n\n> i appreciate your reply and your efforts to explore the tradeoffs between\nthe two approaches.\n\nThank you, I appreciate your efforts on this too :-)\n\nshesek\n\n[0]\nhttps://github.com/bitcoin/bips/blob/master/bip-0119.mediawiki#Batched_Channel_Creation\n[1] https://github.com/bitcoin/bips/pull/1273\n\nOn Fri, Apr 29, 2022 at 11:31 AM darosior <darosior at protonmail.com> wrote:\n\n> Hi Shesek,\n>\n> 1. The resulting txids are not stable.\n>\n>\n> This is *literally* what the post you are replying to is proposing to\n> solve.\n>\n>\n> This property could be important for some of the proposed CTV use-cases,\n> like channel factories.\n>\n>\n> Hmm? You can't have channel factories without Eltoo. (Well, you can in\n> theory but good luck.)\n> Maybe you are refering to non-interactive channel creation? The case for\n> stable txids is less strong if we\n> have APO (and therefore Eltoo). [0]\n>\n>\n> 2. APO will only be available on Taproot, which some people might prefer\n> to avoid for long-term multi-decade vault storage due to QC concerns. (also\n> see my previous post on this thread [0])\n>\n>\n> This has been addressed over and over and over again. If a QC is able\n> overnight to spend a large fraction of\n> the supply, your coins in your super non-QC-vulnerable-bare-CTV-covenant\n> (that would eventually become\n> vulnerable when trying to use it) are worthless.[1]\n>\n> Sorry for being sarcastic, but at this point it's not fair to use\n> quantum-computer FUD to justify the\n> activation of CTV over APO, or encourage the use of legacy transactions\n> over Taproot ones.\n>\n>\n> 3. Higher witness satisfaction cost of roughly 3x vbytes vs CTV-in-Taproot\n> (plus 33 extra vbytes vs CTV-in-segwitv0 *in the case of a single CTV\n> branch*, for the taproot control block. with more branches CTV-in-taproot\n> eventually becomes preferable).\n>\n>\n> Again, this is what my post discusses. Here are the arguments from my post\n> about why i don't think it's a big deal:\n>\n>     1. You can in this case see CTV as an optimization of (tweaked) APOAS.\n> A lot of us are doubtful about CTV\n>        usecases for real people. So much that it was even proposed to\n> temporarily activate it to see if it would\n>        ever have any real traction! [2]\n>        My point with this post was: what if we do (a slightly tweaked)\n> BIP118, that is otherwise useful. And\n>        if this use of covenants is really getting traction then we can\n> roll out an optimization in the form of\n>        CTV (or better covenants, as we'd have had more research put into\n> it by this time).\n>     2. CTV is mainly sold for its usage inside vaults. While i'm not\n> convinced, a few more vbytes should not\n>        matter for this usecase.\n>\n> Also, it's not 33 extra vbytes vs CTV-in-segwitv0, but 33 extra * witness\n> units* (8.25 vbytes).\n> Aside, you can also use the internal key optimization with APO. But i\n> don't think it's desirable just to save\n> 32 WU, as you can't have NUMS-ness then. [3]\n>\n>\n> 4. Higher network-wide full-node validation costs (checking a signature is\n> quite more expensive than hashing, and the hashing is done in both cases).\n>\n>\n> Are APO signatures more expensive to verify? If not i don't think this\n> should be a reason to constrain us to a\n> much less useful construction, as the cost for the network of validating\n> signatures already exists today. Even\n> if it didn't, the tradeoff of cost/usefulness needs to be considered.\n>\n>\n> 5. As APO is currently spec'd, it would suffer from the half-spend\n> problem: if you have multiple outputs encumbered under an APO covenant that\n> requires the same tx sigmsg hash, it becomes possible to spend all of them\n> together as multiple inputs in a single transaction and burn the extra to\n> mining fees.\n>\n> If I'm not mistaken, I believe this makes the simple-apo-vault\n> implementation [1] vulnerable to spending multiple vaulted outputs of the\n> same denomination together and burning all but the first one. I asked the\n> author for a more definitive answer on twitter [2].\n>\n> Fixing this requires amending BIP 118 with some new sigmsg flags (making\n> the ANYONECANPAY behaviour optional, as mentioned in the OP).\n>\n>\n> Yes! And as i mentioned on Twitter also committing to the input index\n> which i forgot to add in the OP here.\n>\n>\n> While i don't think the specific points are valid, i appreciate your reply\n> and your efforts to explore the\n> tradeoffs between the two approaches.\n>\n> Thanks,\n> Antoine\n>\n> [0]\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019813.html\n> [1] https://bitcoin.stackexchange.com/a/91050/101498\n> [2]\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020242.html\n> [3]\n> https://twitter.com/darosior/status/1518979155362254849?s=20&t=mGkw7K8mcyQwdLImFvdebw\n>\n>\n> This is definitely possible but also means that APO as-is isn't a\n> CTV-replacement candidate, without first going through some more design and\n> review iterations.\n>\n> shesek\n>\n>\n> [0]\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020326.html\n> [1] https://github.com/darosior/simple-anyprevout-vault\n> [2] https://twitter.com/shesek/status/1519874493434544128\n>\n>\n>\n> On Fri, Apr 22, 2022 at 2:23 PM darosior via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> I would like to know people's sentiment about doing (a very slightly\n>> tweaked version of) BIP118 in place of\n>> (or before doing) BIP119.\n>>\n>> SIGHASH_ANYPREVOUT and its precedent iterations have been discussed for\n>> over 6 years. It presents proven and\n>> implemented usecases, that are demanded and (please someone correct me if\n>> i'm wrong) more widely accepted than\n>> CTV's.\n>>\n>> SIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made\n>> optional [0], can emulate CTV just fine.\n>> Sure then you can't have bare or Segwit v0 CTV, and it's a bit more\n>> expensive to use. But we can consider CTV\n>> an optimization of APO-AS covenants.\n>>\n>> CTV advocates have been presenting vaults as the flagship usecase.\n>> Although as someone who've been trying to\n>> implement practical vaults for the past 2 years i doubt CTV is necessary\n>> nor sufficient for this (but still\n>> useful!), using APO-AS covers it. And it's not a couple dozen more\n>> virtual bytes that are going to matter for\n>> a potential vault user.\n>>\n>> If after some time all of us who are currently dubious about CTV's stated\n>> usecases are proven wrong by onchain\n>> usage of a less efficient construction to achieve the same goal, we could\n>> roll-out CTV as an optimization. In\n>> the meantime others will have been able to deploy new applications\n>> leveraging ANYPREVOUT (Eltoo, blind\n>> statechains, etc..[1]).\n>>\n>>\n>> Given the interest in, and demand for, both simple covenants and better\n>> offchain protocols it seems to me that\n>> BIP118 is a soft fork candidate that could benefit more (if not most of)\n>> Bitcoin users.\n>> Actually i'd also be interested in knowing if people would oppose the\n>> APO-AS part of BIP118, since it enables\n>> CTV's features, for the same reason they'd oppose BIP119.\n>>\n>>\n>> [0] That is, to not commit to the other inputs of the transaction (via\n>> `sha_sequences` and maybe also\n>> `sha_amounts`). Cf\n>> https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#signature-message\n>> .\n>>\n>> [1] https://anyprevout.xyz/ \"Use Cases\" section\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220429/42e5fb1f/attachment-0001.html>"
            },
            {
                "author": "Nadav Ivgi",
                "date": "2022-04-29T11:40:05",
                "message_text_only": "Correction: thinking about this some more, you can't actually expect to\nhave a stable txid if you allow additional inputs at all...\n\nSo yes, amending BIP 118 to commit to sha_sequences (which indirectly also\ncommits to the number of inputs) as proposed in the OP should be sufficient\nto get stable txids for single-input transactions.\n\n(I initially thought that APO has to cover some additional tx parts for\nthis, but it seems that it's really just the scriptSig which is guarrnated\nto be empty if you have a single input that is known to be the taproot APO\nspend.)\n\nSo in overall, my (1) and (5) points are only applicable to\nAPO-as-currently-spec'd and not to the suggested APO revision.\n\nOn Fri, Apr 29, 2022 at 1:21 PM Nadav Ivgi <nadav at shesek.info> wrote:\n\n> > This is *literally* what the post you are replying to is proposing to\n> solve.\n>\n> I thought the changes mentioned in the OP (+ committing to the spent input\n> index) only solves the half-spend problem, but not the stable txids one?\n>\n> There can be other inputs with a scriptSig, which doesn't get committed to\n> in the APO hash. I guess this isn't too common, but there might be some\n> cases where you would want to spend some (pre-selected) non-segwit inputs\n> alongside your covenant, maybe for fees. With CTV you would pre-commit to\n> the scriptSig which makes it non-malleable even if the script itself is.\n>\n> > Hmm? You can't have channel factories without Eltoo. (Well, you can in\n> theory but good luck.)\n> > Maybe you are refering to non-interactive channel creation?\n>\n> I was referring to what BIP 119 calls 'Batched Channel Creation' [0],\n> which is a sort of a channel factory construction under a broader\n> definition (and in fact was previously called that in the BIP [1]).\n>\n> > The case for stable txids is less strong if we have APO (and therefore\n> Eltoo).\n>\n> There's merit in using these factory constructs for Poon-Dryja channels\n> even if Eltoo was available.\n> I don't foresee Eltoo taking over the penalty approach entirely, but\n> rather the two living side by side.\n>\n> (It could theoretically be possible to use APO to open Poon-Dryja\n> channels on top of unstable funding txids, but having stable txids makes\n> this much more easily integratable with existing lightning implementations,\n> without the invasive changes that unstable txids would bring.)\n>\n> > This has been addressed over and over and over again. If a QC is able\n> overnight to spend a large fraction of\n> > the supply, your coins in your super non-QC-vulnerable-bare-CTV-covenant\n> (that would eventually become\n> > vulnerable when trying to use it) are worthless.\n>\n> It might be the case that a sufficient fraction of supply does switch over\n> to QC-protected outputs in time, with only some small minority that didn't\n> actively switch over *and* with revealed bare pubkeys losing their funds,\n> which wouldn't make BTC entirely worthless. It makes sense not to want to\n> be in that minority, ideally without requiring further time-sensitive\n> active action (esp if considering long-term deep cold storage for\n> inheritance etc).\n>\n> (This of course assumes a safe post-QC mechanism to later spend these\n> funds; IIUC there are some viable approaches for that using a two-step\n> spending procedure, where you prove knowledge of the pubkey/script preimage\n> while commiting to a future tx.)\n>\n> > Sorry for being sarcastic, but at this point it's not fair to use\n> quantum-computer FUD to justify the\n> > activation of CTV over APO, or encourage the use of legacy transactions\n> over Taproot ones.\n>\n> Sorry if it came off as FUDing. I don't know enough to hold a strong\n> opinion on whether the fear of QCs is justified or not. I know that many\n> people on this list don't think so, but I also think that this fear is\n> prevalent enough to warrant taking it into consideration (at least for\n> features that target long-term SoV use cases; less so for features\n> targeted at L2 MoE applications like lightning spacechains paypools etc).\n>\n> > you can also use the internal key optimization .. you can't have\n> NUMS-ness then\n>\n> Right, which makes this unsuitable for the vaulting use case.\n>\n> > Also, it's not 33 extra vbytes vs CTV-in-segwitv0, but 33 extra *\n> witness units* (8.25 vbytes).\n>\n> Ugh yes sorry about that! I realized after hitting send and meant to\n> clarify that it should've been s/vbyte/WU/ in my next reply.\n>\n> > Are APO signatures more expensive to verify? .. the cost for the\n> network of validating signatures already exists today\n>\n> Not compared to existing signature verifications, but compared to a\n> CTV/TXHASH-like construction.\n>\n> Can anyone quantify how much of a difference this makes in practice?\n>\n> > i appreciate your reply and your efforts to explore the tradeoffs\n> between the two approaches.\n>\n> Thank you, I appreciate your efforts on this too :-)\n>\n> shesek\n>\n> [0]\n> https://github.com/bitcoin/bips/blob/master/bip-0119.mediawiki#Batched_Channel_Creation\n> [1] https://github.com/bitcoin/bips/pull/1273\n>\n> On Fri, Apr 29, 2022 at 11:31 AM darosior <darosior at protonmail.com> wrote:\n>\n>> Hi Shesek,\n>>\n>> 1. The resulting txids are not stable.\n>>\n>>\n>> This is *literally* what the post you are replying to is proposing to\n>> solve.\n>>\n>>\n>> This property could be important for some of the proposed CTV use-cases,\n>> like channel factories.\n>>\n>>\n>> Hmm? You can't have channel factories without Eltoo. (Well, you can in\n>> theory but good luck.)\n>> Maybe you are refering to non-interactive channel creation? The case for\n>> stable txids is less strong if we\n>> have APO (and therefore Eltoo). [0]\n>>\n>>\n>> 2. APO will only be available on Taproot, which some people might prefer\n>> to avoid for long-term multi-decade vault storage due to QC concerns. (also\n>> see my previous post on this thread [0])\n>>\n>>\n>> This has been addressed over and over and over again. If a QC is able\n>> overnight to spend a large fraction of\n>> the supply, your coins in your super non-QC-vulnerable-bare-CTV-covenant\n>> (that would eventually become\n>> vulnerable when trying to use it) are worthless.[1]\n>>\n>> Sorry for being sarcastic, but at this point it's not fair to use\n>> quantum-computer FUD to justify the\n>> activation of CTV over APO, or encourage the use of legacy transactions\n>> over Taproot ones.\n>>\n>>\n>> 3. Higher witness satisfaction cost of roughly 3x vbytes vs\n>> CTV-in-Taproot (plus 33 extra vbytes vs CTV-in-segwitv0 *in the case of\n>> a single CTV branch*, for the taproot control block. with more branches\n>> CTV-in-taproot eventually becomes preferable).\n>>\n>>\n>> Again, this is what my post discusses. Here are the arguments from my\n>> post about why i don't think it's a big deal:\n>>\n>>     1. You can in this case see CTV as an optimization of (tweaked)\n>> APOAS. A lot of us are doubtful about CTV\n>>        usecases for real people. So much that it was even proposed to\n>> temporarily activate it to see if it would\n>>        ever have any real traction! [2]\n>>        My point with this post was: what if we do (a slightly tweaked)\n>> BIP118, that is otherwise useful. And\n>>        if this use of covenants is really getting traction then we can\n>> roll out an optimization in the form of\n>>        CTV (or better covenants, as we'd have had more research put into\n>> it by this time).\n>>     2. CTV is mainly sold for its usage inside vaults. While i'm not\n>> convinced, a few more vbytes should not\n>>        matter for this usecase.\n>>\n>> Also, it's not 33 extra vbytes vs CTV-in-segwitv0, but 33 extra * witness\n>> units* (8.25 vbytes).\n>> Aside, you can also use the internal key optimization with APO. But i\n>> don't think it's desirable just to save\n>> 32 WU, as you can't have NUMS-ness then. [3]\n>>\n>>\n>> 4. Higher network-wide full-node validation costs (checking a signature\n>> is quite more expensive than hashing, and the hashing is done in both\n>> cases).\n>>\n>>\n>> Are APO signatures more expensive to verify? If not i don't think this\n>> should be a reason to constrain us to a\n>> much less useful construction, as the cost for the network of validating\n>> signatures already exists today. Even\n>> if it didn't, the tradeoff of cost/usefulness needs to be considered.\n>>\n>>\n>> 5. As APO is currently spec'd, it would suffer from the half-spend\n>> problem: if you have multiple outputs encumbered under an APO covenant that\n>> requires the same tx sigmsg hash, it becomes possible to spend all of them\n>> together as multiple inputs in a single transaction and burn the extra to\n>> mining fees.\n>>\n>> If I'm not mistaken, I believe this makes the simple-apo-vault\n>> implementation [1] vulnerable to spending multiple vaulted outputs of the\n>> same denomination together and burning all but the first one. I asked the\n>> author for a more definitive answer on twitter [2].\n>>\n>> Fixing this requires amending BIP 118 with some new sigmsg flags (making\n>> the ANYONECANPAY behaviour optional, as mentioned in the OP).\n>>\n>>\n>> Yes! And as i mentioned on Twitter also committing to the input index\n>> which i forgot to add in the OP here.\n>>\n>>\n>> While i don't think the specific points are valid, i appreciate your\n>> reply and your efforts to explore the\n>> tradeoffs between the two approaches.\n>>\n>> Thanks,\n>> Antoine\n>>\n>> [0]\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019813.html\n>> [1] https://bitcoin.stackexchange.com/a/91050/101498\n>> [2]\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020242.html\n>> [3]\n>> https://twitter.com/darosior/status/1518979155362254849?s=20&t=mGkw7K8mcyQwdLImFvdebw\n>>\n>>\n>> This is definitely possible but also means that APO as-is isn't a\n>> CTV-replacement candidate, without first going through some more design and\n>> review iterations.\n>>\n>> shesek\n>>\n>>\n>> [0]\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020326.html\n>> [1] https://github.com/darosior/simple-anyprevout-vault\n>> [2] https://twitter.com/shesek/status/1519874493434544128\n>>\n>>\n>>\n>> On Fri, Apr 22, 2022 at 2:23 PM darosior via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> I would like to know people's sentiment about doing (a very slightly\n>>> tweaked version of) BIP118 in place of\n>>> (or before doing) BIP119.\n>>>\n>>> SIGHASH_ANYPREVOUT and its precedent iterations have been discussed for\n>>> over 6 years. It presents proven and\n>>> implemented usecases, that are demanded and (please someone correct me\n>>> if i'm wrong) more widely accepted than\n>>> CTV's.\n>>>\n>>> SIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made\n>>> optional [0], can emulate CTV just fine.\n>>> Sure then you can't have bare or Segwit v0 CTV, and it's a bit more\n>>> expensive to use. But we can consider CTV\n>>> an optimization of APO-AS covenants.\n>>>\n>>> CTV advocates have been presenting vaults as the flagship usecase.\n>>> Although as someone who've been trying to\n>>> implement practical vaults for the past 2 years i doubt CTV is necessary\n>>> nor sufficient for this (but still\n>>> useful!), using APO-AS covers it. And it's not a couple dozen more\n>>> virtual bytes that are going to matter for\n>>> a potential vault user.\n>>>\n>>> If after some time all of us who are currently dubious about CTV's\n>>> stated usecases are proven wrong by onchain\n>>> usage of a less efficient construction to achieve the same goal, we\n>>> could roll-out CTV as an optimization. In\n>>> the meantime others will have been able to deploy new applications\n>>> leveraging ANYPREVOUT (Eltoo, blind\n>>> statechains, etc..[1]).\n>>>\n>>>\n>>> Given the interest in, and demand for, both simple covenants and better\n>>> offchain protocols it seems to me that\n>>> BIP118 is a soft fork candidate that could benefit more (if not most of)\n>>> Bitcoin users.\n>>> Actually i'd also be interested in knowing if people would oppose the\n>>> APO-AS part of BIP118, since it enables\n>>> CTV's features, for the same reason they'd oppose BIP119.\n>>>\n>>>\n>>> [0] That is, to not commit to the other inputs of the transaction (via\n>>> `sha_sequences` and maybe also\n>>> `sha_amounts`). Cf\n>>> https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#signature-message\n>>> .\n>>>\n>>> [1] https://anyprevout.xyz/ \"Use Cases\" section\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220429/90e320ba/attachment-0001.html>"
            },
            {
                "author": "Swambo, Jacob",
                "date": "2022-04-29T13:22:14",
                "message_text_only": "Hi,\n\nWhile I agree with the arguments in favour of (optional ANYONECANPAY) APOAS in lieu of CTV in the short-term (given the additional benefit of enabling Eltoo), there's a point to add in favour of CTV (or similar) in the long-term beyond as an optimisation.\n\nWith APOAS-based covenants, the signature message algorithm is tied to both the covenant commitment and transaction validation. Coupling these things introduces a trade-off between safety and flexibility with covenant-based applications. E.g. the maximally safe and restricted covenant commits to all inputs and outputs of the transaction (using SIGHASH ALL). However, a less restricted covenant commits to, for example, a single input and a single output (using ANYONECANPAY|SINGLE) but opens itself up to attacks making use of transaction malleability and signature replay. If instead we separate the covenant commitment from the signatures to validate transactions (as with CTV and TXHASH + CHECKSIGFROMSTACK) then we by-pass this trade-off. The flexibility of additional templates with new CTV versions or with the TXHASH primitive seems to me to enable significantly more utility for covenant-based applications.\n\nBest regards,\n\nJacob Swambo\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220429/942ba6fa/attachment.html>"
            },
            {
                "author": "Nadav Ivgi",
                "date": "2022-04-30T08:09:26",
                "message_text_only": "Hi darosior,\n\nIt's interesting to note that APOAS|SINGLE (with the ANYONECANPAY behaviour\nand without covering the spent input index) has some interesting uses for\ncases where the covenant only needs to restrict a single output (so useful\nfor e.g. vaults or spacechains, but not for batch channels or congestion\ncontrol).\n\nFor example in the vault use-case, it makes it possible to bump fees on the\nunvault tx by adding more inputs and a change output, as well as unvault\nmultiple vaulted outputs in a single transaction.\n\nFor spacechains, it makes it possible to add the spaceblock hash OP_RETURN\nand pay fees directly in the tx chain, instead of having to use an\nadditional tx to prepare an output that gets spent in the tx chain  (see\nthe diagram in [0]).\n\n> via `sha_sequences` and maybe also `sha_amounts`\n\nCTV does not commit to the input amounts. This has some practical\nimplications:\n\n1. If it is committed, sending an even slightly incorrect amount will make\nthe covenant-encumbered spend path unusable.\n\nWith CTV, sending a slightly lower amount results in slightly lower fees,\nwhile any extra gets spent/burned on fees. The covenant spend path only\nbecomes unusable if the amount is too low to cover for the outputs (+relay\nfee for it to also be standard).\n\n2. The ability to allow for additional inputs with unknown amounts makes it\npossible to fee-bump the covenant spending transaction (with whole utxos\nand no change). You can have one tapleaf for spending the covenant output\nalone, and another one for attaching an extra fee input to it.\n\nThis also makes it possible to resolve the under-payment issue described in\n(1), by adding an input that covers the original intended amount.\n\nSo my suggestion would be to either not cover `sha_amounts` in the msg\nhash, or to make it optional behind a flag.\n\nshesek\n\n[0] https://github.com/fiatjaf/simple-ctv-spacechain\n\nOn Fri, Apr 22, 2022 at 2:23 PM darosior via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I would like to know people's sentiment about doing (a very slightly\n> tweaked version of) BIP118 in place of\n> (or before doing) BIP119.\n>\n> SIGHASH_ANYPREVOUT and its precedent iterations have been discussed for\n> over 6 years. It presents proven and\n> implemented usecases, that are demanded and (please someone correct me if\n> i'm wrong) more widely accepted than\n> CTV's.\n>\n> SIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made\n> optional [0], can emulate CTV just fine.\n> Sure then you can't have bare or Segwit v0 CTV, and it's a bit more\n> expensive to use. But we can consider CTV\n> an optimization of APO-AS covenants.\n>\n> CTV advocates have been presenting vaults as the flagship usecase.\n> Although as someone who've been trying to\n> implement practical vaults for the past 2 years i doubt CTV is necessary\n> nor sufficient for this (but still\n> useful!), using APO-AS covers it. And it's not a couple dozen more virtual\n> bytes that are going to matter for\n> a potential vault user.\n>\n> If after some time all of us who are currently dubious about CTV's stated\n> usecases are proven wrong by onchain\n> usage of a less efficient construction to achieve the same goal, we could\n> roll-out CTV as an optimization.  In\n> the meantime others will have been able to deploy new applications\n> leveraging ANYPREVOUT (Eltoo, blind\n> statechains, etc..[1]).\n>\n>\n> Given the interest in, and demand for, both simple covenants and better\n> offchain protocols it seems to me that\n> BIP118 is a soft fork candidate that could benefit more (if not most of)\n> Bitcoin users.\n> Actually i'd also be interested in knowing if people would oppose the\n> APO-AS part of BIP118, since it enables\n> CTV's features, for the same reason they'd oppose BIP119.\n>\n>\n> [0] That is, to not commit to the other inputs of the transaction (via\n> `sha_sequences` and maybe also\n> `sha_amounts`). Cf\n> https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#signature-message\n> .\n>\n> [1] https://anyprevout.xyz/ \"Use Cases\" section\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220430/8361bbc7/attachment.html>"
            },
            {
                "author": "Greg Sanders",
                "date": "2022-04-30T11:15:25",
                "message_text_only": "The proposed use case for the ANYSCRIPT part of APOAS explicitly doesn't\ncommit to amount, so I'd also assume it not be re-added or at least be able\nto be opened out.\n\nOn Sat, Apr 30, 2022, 4:47 AM Nadav Ivgi via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi darosior,\n>\n> It's interesting to note that APOAS|SINGLE (with the ANYONECANPAY\n> behaviour and without covering the spent input index) has some interesting\n> uses for cases where the covenant only needs to restrict a single output\n> (so useful for e.g. vaults or spacechains, but not for batch channels or\n> congestion control).\n>\n> For example in the vault use-case, it makes it possible to bump fees on\n> the unvault tx by adding more inputs and a change output, as well as\n> unvault multiple vaulted outputs in a single transaction.\n>\n> For spacechains, it makes it possible to add the spaceblock hash OP_RETURN\n> and pay fees directly in the tx chain, instead of having to use an\n> additional tx to prepare an output that gets spent in the tx chain  (see\n> the diagram in [0]).\n>\n> > via `sha_sequences` and maybe also `sha_amounts`\n>\n> CTV does not commit to the input amounts. This has some practical\n> implications:\n>\n> 1. If it is committed, sending an even slightly incorrect amount will make\n> the covenant-encumbered spend path unusable.\n>\n> With CTV, sending a slightly lower amount results in slightly lower fees,\n> while any extra gets spent/burned on fees. The covenant spend path only\n> becomes unusable if the amount is too low to cover for the outputs (+relay\n> fee for it to also be standard).\n>\n> 2. The ability to allow for additional inputs with unknown amounts makes\n> it possible to fee-bump the covenant spending transaction (with whole utxos\n> and no change). You can have one tapleaf for spending the covenant output\n> alone, and another one for attaching an extra fee input to it.\n>\n> This also makes it possible to resolve the under-payment issue described\n> in (1), by adding an input that covers the original intended amount.\n>\n> So my suggestion would be to either not cover `sha_amounts` in the msg\n> hash, or to make it optional behind a flag.\n>\n> shesek\n>\n> [0] https://github.com/fiatjaf/simple-ctv-spacechain\n>\n> On Fri, Apr 22, 2022 at 2:23 PM darosior via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> I would like to know people's sentiment about doing (a very slightly\n>> tweaked version of) BIP118 in place of\n>> (or before doing) BIP119.\n>>\n>> SIGHASH_ANYPREVOUT and its precedent iterations have been discussed for\n>> over 6 years. It presents proven and\n>> implemented usecases, that are demanded and (please someone correct me if\n>> i'm wrong) more widely accepted than\n>> CTV's.\n>>\n>> SIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made\n>> optional [0], can emulate CTV just fine.\n>> Sure then you can't have bare or Segwit v0 CTV, and it's a bit more\n>> expensive to use. But we can consider CTV\n>> an optimization of APO-AS covenants.\n>>\n>> CTV advocates have been presenting vaults as the flagship usecase.\n>> Although as someone who've been trying to\n>> implement practical vaults for the past 2 years i doubt CTV is necessary\n>> nor sufficient for this (but still\n>> useful!), using APO-AS covers it. And it's not a couple dozen more\n>> virtual bytes that are going to matter for\n>> a potential vault user.\n>>\n>> If after some time all of us who are currently dubious about CTV's stated\n>> usecases are proven wrong by onchain\n>> usage of a less efficient construction to achieve the same goal, we could\n>> roll-out CTV as an optimization.  In\n>> the meantime others will have been able to deploy new applications\n>> leveraging ANYPREVOUT (Eltoo, blind\n>> statechains, etc..[1]).\n>>\n>>\n>> Given the interest in, and demand for, both simple covenants and better\n>> offchain protocols it seems to me that\n>> BIP118 is a soft fork candidate that could benefit more (if not most of)\n>> Bitcoin users.\n>> Actually i'd also be interested in knowing if people would oppose the\n>> APO-AS part of BIP118, since it enables\n>> CTV's features, for the same reason they'd oppose BIP119.\n>>\n>>\n>> [0] That is, to not commit to the other inputs of the transaction (via\n>> `sha_sequences` and maybe also\n>> `sha_amounts`). Cf\n>> https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#signature-message\n>> .\n>>\n>> [1] https://anyprevout.xyz/ \"Use Cases\" section\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220430/eb90c7fe/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "ANYPREVOUT in place of CTV",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "rot13maxi",
                "darosior",
                "Hampus Sj\u00f6berg",
                "Nadav Ivgi",
                "pushd",
                "Luke Dashjr",
                "Erik Aronesty",
                "Richard Myers",
                "Jeremy Rubin",
                "Swambo, Jacob",
                "Greg Sanders"
            ],
            "messages_count": 21,
            "total_messages_chars_count": 92022
        }
    },
    {
        "title": "[bitcoin-dev] What to expect in the next few weeks",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2022-04-22T16:38:25",
                "message_text_only": "If the next few weeks go how I fear they will it could get messy. If you care about Bitcoin's consensus rules I'd request you pay attention so you can make an informed view on what to run and what to support. For those of you who were around in 2015-2017 you'll know what to expect. The right outcome endured in 2017 and I'm sure the right outcome will endure here assuming people pay attention and listen to the individuals who were trusted during that period. There are always a large number of motivated parties who are incentivized to break nodes off from Bitcoin and may seek to take advantage of a contentious soft fork activation attempt.\n\nRemember that if all the information is presented to users in a clear way well ahead of time then they can make their own mind up. I fear that things will be made as convoluted as possible in a way intended to confuse and information will be withheld until the last minute. When in doubt it is generally better to rely on the status quo and tried and trusted. In this case that would be Bitcoin Core. Alternative releases such as those seeking to attempt to activate CTV or indeed those seeking to resist the activation of CTV really should only be considered if you are informed on exactly what you are running.\n\nIf you are interested in the effort to resist the contentious soft fork activation attempt of CTV please join ##ursf on Libera IRC.\n\nHave a good weekend. Hopefully those behind this contentious soft fork activation attempt will see sense and we can go back to more productive things than resisting contentious soft forks.\n\n--\nMichael Folkson\nEmail: michaelfolkson at [protonmail.com](http://protonmail.com/)\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220422/3da4d053/attachment.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2022-04-23T05:10:53",
                "message_text_only": ">   assuming people pay attention and listen to the individuals who were\ntrusted during that period\n\nBitcoin is not run by a group of authorities of olde. By asking people to\ntrust \"those.. around in 2015-2017\" you're asking people to blindly trust\nauthorities. This, in my strong opinion, goes against the bitcoin ethos,\nand is an incredibly harmful way to push for your agenda. I'd very much\nrecommend you reassess the way you're going about what you're trying to do.\nI fear you risk losing respect in the community by implying without any\nevidence that certain people are \"taking advantage\" of some situation and\nattempting \"to confuse\".\n\nOn Fri, Apr 22, 2022 at 12:33 PM Michael Folkson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> If the next few weeks go how I fear they will it could get messy. If you\n> care about Bitcoin's consensus rules I'd request you pay attention so you\n> can make an informed view on what to run and what to support. For those of\n> you who were around in 2015-2017 you'll know what to expect. The right\n> outcome endured in 2017 and I'm sure the right outcome will endure here\n> assuming people pay attention and listen to the individuals who were\n> trusted during that period. There are always a large number of motivated\n> parties who are incentivized to break nodes off from Bitcoin and may seek\n> to take advantage of a contentious soft fork activation attempt.\n>\n> Remember that if all the information is presented to users in a clear way\n> well ahead of time then they can make their own mind up. I fear that things\n> will be made as convoluted as possible in a way intended to confuse and\n> information will be withheld until the last minute. When in doubt it is\n> generally better to rely on the status quo and tried and trusted. In this\n> case that would be Bitcoin Core. Alternative releases such as those seeking\n> to attempt to activate CTV or indeed those seeking to resist the activation\n> of CTV really should only be considered if you are informed on exactly what\n> you are running.\n>\n> If you are interested in the effort to resist the contentious soft fork\n> activation attempt of CTV please join ##ursf on Libera IRC.\n>\n> Have a good weekend. Hopefully those behind this contentious soft fork\n> activation attempt will see sense and we can go back to more productive\n> things than resisting contentious soft forks.\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220423/1ab9bc29/attachment.html>"
            },
            {
                "author": "Michael Folkson",
                "date": "2022-04-23T10:03:15",
                "message_text_only": "As I said in my post:\n\n\"If you care about Bitcoin's consensus rules I'd request you pay attention so you can make an informed view on what to run and what to support.\"\n\nIdeally everyone would come to an informed view independently. Unfortunately many people don't have the time to follow Bitcoin drama 24/7 and hence struggle to separate noise from signal. In this case simple heuristics are better than nothing. One heuristic is to listen to those in the past who showed good judgment and didn't seek to misinform. Of course it is an imperfect heuristic. Ideally the community would be given sufficient time to come to an informed view independently on what software to run and not be rushed into making decisions. But it appears they are not being afforded that luxury.\n\n> I fear you risk losing respect in the community\n\nI appreciate your concern.\n\n--\nMichael Folkson\nEmail: michaelfolkson at [protonmail.com](http://protonmail.com/)\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n\n------- Original Message -------\nOn Saturday, April 23rd, 2022 at 6:10 AM, Billy Tetrud <billy.tetrud at gmail.com> wrote:\n\n>>  assuming people pay attention and listen to the individuals who were trusted during that period\n>\n> Bitcoin is not run by a group of authorities of olde. By asking people to trust \"those.. around in 2015-2017\" you're asking people to blindly trust authorities. This, in my strong opinion, goes against the bitcoin ethos, and is an incredibly harmful way to push for your agenda. I'd very much recommend you reassess the way you're going about what you're trying to do. I fear you risk losing respect in the community by implying without any evidence that certain people are \"taking advantage\" of some situation and attempting \"to confuse\".\n>\n> On Fri, Apr 22, 2022 at 12:33 PM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> If the next few weeks go how I fear they will it could get messy. If you care about Bitcoin's consensus rules I'd request you pay attention so you can make an informed view on what to run and what to support. For those of you who were around in 2015-2017 you'll know what to expect. The right outcome endured in 2017 and I'm sure the right outcome will endure here assuming people pay attention and listen to the individuals who were trusted during that period. There are always a large number of motivated parties who are incentivized to break nodes off from Bitcoin and may seek to take advantage of a contentious soft fork activation attempt.\n>>\n>> Remember that if all the information is presented to users in a clear way well ahead of time then they can make their own mind up. I fear that things will be made as convoluted as possible in a way intended to confuse and information will be withheld until the last minute. When in doubt it is generally better to rely on the status quo and tried and trusted. In this case that would be Bitcoin Core. Alternative releases such as those seeking to attempt to activate CTV or indeed those seeking to resist the activation of CTV really should only be considered if you are informed on exactly what you are running.\n>>\n>> If you are interested in the effort to resist the contentious soft fork activation attempt of CTV please join ##ursf on Libera IRC.\n>>\n>> Have a good weekend. Hopefully those behind this contentious soft fork activation attempt will see sense and we can go back to more productive things than resisting contentious soft forks.\n>>\n>> --\n>> Michael Folkson\n>> Email: michaelfolkson at [protonmail.com](http://protonmail.com/)\n>> Keybase: michaelfolkson\n>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220423/f083def3/attachment-0001.html>"
            },
            {
                "author": "Michael Folkson",
                "date": "2022-04-25T22:26:36",
                "message_text_only": "The latest I'm hearing (this mailing list appears to be being bypassed in favor of personal blogs and messaging apps) is that Speedy Trial miner signaling for the contentious CTV soft fork is no longer going to start on May 5th (as previously communicated [1]) and may instead now start around August 1st 2022.\n\nHence for now the drama seems to have been averted. I am deeply skeptical that in the next 3 months this soft fork activation attempt will obtain community consensus and will no longer be contentious (although I guess theoretically it is possible). As a result I suspect we'll be in the exact same situation with a URSF effort required 2-3 months down the line.\n\nIf we are I'll try to keep the mailing list informed. It is important there is transparency and ample time to research and prepare before making decisions on what software to run. Obviously I have no control over what others choose to do. Please don't be rushed into running things you don't understand the implications of and please only signal for a soft fork if you are convinced it has community consensus (what should precede signaling as it did for Taproot) and you are ready to activate a soft fork.\n\n[1]: https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n\n--\nMichael Folkson\nEmail: michaelfolkson at [protonmail.com](http://protonmail.com/)\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n\n------- Original Message -------\nOn Saturday, April 23rd, 2022 at 11:03 AM, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> As I said in my post:\n>\n> \"If you care about Bitcoin's consensus rules I'd request you pay attention so you can make an informed view on what to run and what to support.\"\n>\n> Ideally everyone would come to an informed view independently. Unfortunately many people don't have the time to follow Bitcoin drama 24/7 and hence struggle to separate noise from signal. In this case simple heuristics are better than nothing. One heuristic is to listen to those in the past who showed good judgment and didn't seek to misinform. Of course it is an imperfect heuristic. Ideally the community would be given sufficient time to come to an informed view independently on what software to run and not be rushed into making decisions. But it appears they are not being afforded that luxury.\n>\n>> I fear you risk losing respect in the community\n>\n> I appreciate your concern.\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at [protonmail.com](http://protonmail.com/)\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n> ------- Original Message -------\n> On Saturday, April 23rd, 2022 at 6:10 AM, Billy Tetrud <billy.tetrud at gmail.com> wrote:\n>\n>>>  assuming people pay attention and listen to the individuals who were trusted during that period\n>>\n>> Bitcoin is not run by a group of authorities of olde. By asking people to trust \"those.. around in 2015-2017\" you're asking people to blindly trust authorities. This, in my strong opinion, goes against the bitcoin ethos, and is an incredibly harmful way to push for your agenda. I'd very much recommend you reassess the way you're going about what you're trying to do. I fear you risk losing respect in the community by implying without any evidence that certain people are \"taking advantage\" of some situation and attempting \"to confuse\".\n>>\n>> On Fri, Apr 22, 2022 at 12:33 PM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> If the next few weeks go how I fear they will it could get messy. If you care about Bitcoin's consensus rules I'd request you pay attention so you can make an informed view on what to run and what to support. For those of you who were around in 2015-2017 you'll know what to expect. The right outcome endured in 2017 and I'm sure the right outcome will endure here assuming people pay attention and listen to the individuals who were trusted during that period. There are always a large number of motivated parties who are incentivized to break nodes off from Bitcoin and may seek to take advantage of a contentious soft fork activation attempt.\n>>>\n>>> Remember that if all the information is presented to users in a clear way well ahead of time then they can make their own mind up. I fear that things will be made as convoluted as possible in a way intended to confuse and information will be withheld until the last minute. When in doubt it is generally better to rely on the status quo and tried and trusted. In this case that would be Bitcoin Core. Alternative releases such as those seeking to attempt to activate CTV or indeed those seeking to resist the activation of CTV really should only be considered if you are informed on exactly what you are running.\n>>>\n>>> If you are interested in the effort to resist the contentious soft fork activation attempt of CTV please join ##ursf on Libera IRC.\n>>>\n>>> Have a good weekend. Hopefully those behind this contentious soft fork activation attempt will see sense and we can go back to more productive things than resisting contentious soft forks.\n>>>\n>>> --\n>>> Michael Folkson\n>>> Email: michaelfolkson at [protonmail.com](http://protonmail.com/)\n>>> Keybase: michaelfolkson\n>>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220425/f414c306/attachment-0001.html>"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2022-04-26T05:48:20",
                "message_text_only": "The reason there was not a mailing list post is because that's not a\ncommitted plan, it was offered up for discussion to a public working group\nfor feedback as a potential plan. You've inaccurately informed the list on\nsomething no one has communicated committed intent for. This was an\nalternative discussed in the telegram messaging app but did not seem to\nstrike the correct balance so was not furthered.\n\nI was hoping to be able to share something back to this list sooner rather\nthan later, but I have not been able to get, among those interested to\ndiscuss in that venue, coherence on a best next step. I communicated\ninasmuch on the bird app\nhttps://twitter.com/JeremyRubin/status/1518347793903017984\nhttps://twitter.com/JeremyRubin/status/1518477022439247872, but do not have\na clear next step and am pouring over all the fantastic feedback I\nreceived so far.\n\nFurther, you're representing the state of affairs as if there's a great\nneed to scramble to generate software for this, whereas there already are\nscripts to support a URSF that work with the source code I pointed to from\nmy blog. This approach is a decent one, even though it requires two things,\nbecause it is simple. I think it's important that people keep this in mind\nbecause that is not a joke, the intention was that the correct set of check\nand balance tools were made available. I'd be eager to learn what,\nspecifically, you think the advantages are of a separate binary release\nrather than a binary + script that can handle both cases? I'm asking\nsincerely because I would make the modifications to the release I prepared\nto support that as well, if they do not entail substantial technical risk.\nPersonally, were I aligned with your preferences, I'd be testing the\nforkd script and making sure it is easy to use as the simplest and most\neffective way to achieve your ends.\n\nregards,\n\nJeremy\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n\nOn Mon, Apr 25, 2022 at 3:44 PM Michael Folkson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> The latest I'm hearing (this mailing list appears to be being bypassed in\n> favor of personal blogs and messaging apps) is that Speedy Trial miner\n> signaling for the contentious CTV soft fork is no longer going to start on\n> May 5th (as previously communicated [1]) and may instead now start around\n> August 1st 2022.\n>\n> Hence for now the drama seems to have been averted. I am deeply skeptical\n> that in the next 3 months this soft fork activation attempt will obtain\n> community consensus and will no longer be contentious (although I guess\n> theoretically it is possible). As a result I suspect we'll be in the exact\n> same situation with a URSF effort required 2-3 months down the line.\n>\n> If we are I'll try to keep the mailing list informed. It is important\n> there is transparency and ample time to research and prepare before making\n> decisions on what software to run. Obviously I have no control over what\n> others choose to do. Please don't be rushed into running things you don't\n> understand the implications of and please only signal for a soft fork if\n> you are convinced it has community consensus (what should precede signaling\n> as it did for Taproot) and you are ready to activate a soft fork.\n>\n> [1]: https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n> ------- Original Message -------\n> On Saturday, April 23rd, 2022 at 11:03 AM, Michael Folkson via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> As I said in my post:\n>\n> \"If you care about Bitcoin's consensus rules I'd request you pay\n> attention so you can make an informed view on what to run and what to\n> support.\"\n>\n> Ideally everyone would come to an informed view independently.\n> Unfortunately many people don't have the time to follow Bitcoin drama 24/7\n> and hence struggle to separate noise from signal. In this case simple\n> heuristics are better than nothing. One heuristic is to listen to those in\n> the past who showed good judgment and didn't seek to misinform. Of course\n> it is an imperfect heuristic. Ideally the community would be given\n> sufficient time to come to an informed view independently on what software\n> to run and not be rushed into making decisions. But it appears they are not\n> being afforded that luxury.\n>\n> >  I fear you risk losing respect in the community\n>\n> I appreciate your concern.\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n> ------- Original Message -------\n> On Saturday, April 23rd, 2022 at 6:10 AM, Billy Tetrud <\n> billy.tetrud at gmail.com> wrote:\n>\n> > assuming people pay attention and listen to the individuals who were\n> trusted during that period\n>\n> Bitcoin is not run by a group of authorities of olde. By asking people to\n> trust \"those.. around in 2015-2017\" you're asking people to blindly trust\n> authorities. This, in my strong opinion, goes against the bitcoin ethos,\n> and is an incredibly harmful way to push for your agenda. I'd very much\n> recommend you reassess the way you're going about what you're trying to do.\n> I fear you risk losing respect in the community by implying without any\n> evidence that certain people are \"taking advantage\" of some situation and\n> attempting \"to confuse\".\n>\n> On Fri, Apr 22, 2022 at 12:33 PM Michael Folkson via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> If the next few weeks go how I fear they will it could get messy. If you\n>> care about Bitcoin's consensus rules I'd request you pay attention so you\n>> can make an informed view on what to run and what to support. For those of\n>> you who were around in 2015-2017 you'll know what to expect. The right\n>> outcome endured in 2017 and I'm sure the right outcome will endure here\n>> assuming people pay attention and listen to the individuals who were\n>> trusted during that period. There are always a large number of motivated\n>> parties who are incentivized to break nodes off from Bitcoin and may seek\n>> to take advantage of a contentious soft fork activation attempt.\n>>\n>> Remember that if all the information is presented to users in a clear way\n>> well ahead of time then they can make their own mind up. I fear that things\n>> will be made as convoluted as possible in a way intended to confuse and\n>> information will be withheld until the last minute. When in doubt it is\n>> generally better to rely on the status quo and tried and trusted. In this\n>> case that would be Bitcoin Core. Alternative releases such as those seeking\n>> to attempt to activate CTV or indeed those seeking to resist the activation\n>> of CTV really should only be considered if you are informed on exactly what\n>> you are running.\n>>\n>> If you are interested in the effort to resist the contentious soft fork\n>> activation attempt of CTV please join ##ursf on Libera IRC.\n>>\n>> Have a good weekend. Hopefully those behind this contentious soft fork\n>> activation attempt will see sense and we can go back to more productive\n>> things than resisting contentious soft forks.\n>>\n>> --\n>> Michael Folkson\n>> Email: michaelfolkson at protonmail.com\n>> Keybase: michaelfolkson\n>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220425/cb867947/attachment-0001.html>"
            },
            {
                "author": "Anthony Towns",
                "date": "2022-04-26T10:47:51",
                "message_text_only": "On Mon, Apr 25, 2022 at 10:48:20PM -0700, Jeremy Rubin via bitcoin-dev wrote:\n> Further, you're representing the state of affairs as if there's a great\n> need to scramble to generate software for this, whereas there already are\n> scripts to support a URSF that work with the source code I pointed to from\n> my blog. This approach is a decent one, even though it requires two things,\n> because it is simple. I think it's important that people keep this in mind\n> because that is not a joke, the intention was that the correct set of check\n> and balance tools were made available. I'd be eager to learn what,\n> specifically, you think the advantages are of a separate binary release\n> rather than a binary + script that can handle both cases?\n\nThe point of running a client with a validation requirement of \"blocks\nmust (not) signal\" is to handle the possiblity of there being a chain\nsplit, where your preferred ruleset ends up on the less-work side.\n\nIdeally that will be a temporary situation and other people will come to\nyour side, switch their miners over etc, and your chain will go back to\nhaving the most work, and anyone who wasn't running a client with the\nopposite signalling requirement will reorg to your chain and ruleset.\n\nBut forkd isn't quite enough to do that reliably -- instead, you'll\nstart disconnecting nodes who forward blocks to you that were built on\nthe block you disconnected, and you'll risk ending up isolated: that's\nwhy bip8 recommends clients \"should either use parameters that do not\nrisk there being a higher work alternative chain, or specify a mechanism\nfor implementations that support the deployment to preferentially peer\nwith each other\".\n\nAlso, in order to have other nodes reorg to your chain when it has\nmore work, you don't want to exclusively connect to likeminded peers.\nThat's less of a big deal though, since you only need one peer to\nforward the new chain to the compatible network to trigger all of them\nto reorg.\n\nBeing able to see the other chain has more work might be valuable in\norder to add some sort of user warning signal though: \"the other chain\nappears to have maintained 3x as much hash power as the chain your are\nfollowing\".\n\nIn theory, using the `BLOCK_RECENT_CONSENSUS_CHANGE` flag to indicate\nunwanted signalling might make sense; then you could theoretically\ntrigger on that to avoid disconnecting inbound peers that are following\nthe wrong chain. There's already some code along those lines; but while I\nhaven't checked recently, I think it ends up failing relatively quickly\nonce an invalid chain has been extended by a few blocks, since they'll\nresult in `BLOCK_INVALID_PREV` errors instead. The segwit UASF client\ntook some care to try to make this work, fwiw.\n\n(As it stands, I think RECENT_CONSENSUS_CHANGE only really helps with\navoiding disconnections if there's one or maybe two invalid blocks in\na row from a random miner that's doing strange things, rather than if\nthere's an active conflict resulting in a deliberate chain split).\n\nOn the other hand, if there is a non-trivial chain split, then everyone\nhas to deal with splitting their coins across the different chains,\npresuming they don't want to just consider one or the other a complete\nwrite-off. That's already annoying; but for lightning funds I think it\nmeans the automation breaks down, and every channel in the network would\nneed to be immediately closed on chain, as otherwise accepting state\nupdates risks losing the value of your channel balance on whichever\nchain you're lightning node is not following.\n\nSo to your original question: I think it's pretty hard to do all that\nstuff in a separate script, without updating the node software itself.\n\nMore generally, while I think forkd *is* pretty much state of the art;\nI don't think it comes close to addressing all the problems that a chain\nsplit would create.  Maybe it's still worthwhile despite those problems\nif there's some existential threat to bitcoin, but (not) activating CTV\ndoesn't seem to rise to that level to me.\n\nJust my opinion, but: without some sort of existential threat, it\nseems better to take things slowly and hold off on changes until either\npretty much everyone who cares is convinced that the change is a good\nidea and ready to go; or until someone has done the rest of the work to\nsmooth over all the disruption a non-trivial chain split could cause.\nOf course, the latter option is a _lot_ of work, and probably requires\nconsensus changes itself...\n\nCheers,\naj"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2022-04-26T16:02:42",
                "message_text_only": "Thanks, this is good feedback.\n\nI think the main thing then to add to forkd would be some sort of seed\nnodes set that you can peer with of other forkd runners? And have forkd be\nresponsible for making sure you addnode them?\n\nwrt the generation of other problems, my understanding of the *summons\nrusty's bat signal i wonder if he'll see this* triumvirate in this context\nis that it's essentially, in this case:\n\n- Dev proposes\n- Miners may signal\n- Users may credibly threaten that if signal, Miners will lose consensus\nwith sufficient portion of economy.\n\n\nAnd that it's really, AFAIU, the *threat* of the outcome that ensures that\nminers don't signal, and the followthrough is intentionally messy. If it's\n*not* messy, then it is actually less effective and people just 'go their\nseparate ways', but if the intent is to drive consensus, it must be messy.\n\nThis is similar to Nuclear Deterrence game theory, whereby it's clearly not\nthe right call to use nukes, but paired with an irrational leader, the\ncredible threat serves to force a system of more relative peace. So the\npairing of ST + Users able to reject, albeit messily, does form a\nrelatively stable configuration.\n\nKudos to NVK for explaining the nuance to me.\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n\n\nOn Tue, Apr 26, 2022 at 3:47 AM Anthony Towns <aj at erisian.com.au> wrote:\n\n> On Mon, Apr 25, 2022 at 10:48:20PM -0700, Jeremy Rubin via bitcoin-dev\n> wrote:\n> > Further, you're representing the state of affairs as if there's a great\n> > need to scramble to generate software for this, whereas there already are\n> > scripts to support a URSF that work with the source code I pointed to\n> from\n> > my blog. This approach is a decent one, even though it requires two\n> things,\n> > because it is simple. I think it's important that people keep this in\n> mind\n> > because that is not a joke, the intention was that the correct set of\n> check\n> > and balance tools were made available. I'd be eager to learn what,\n> > specifically, you think the advantages are of a separate binary release\n> > rather than a binary + script that can handle both cases?\n>\n> The point of running a client with a validation requirement of \"blocks\n> must (not) signal\" is to handle the possiblity of there being a chain\n> split, where your preferred ruleset ends up on the less-work side.\n>\n> Ideally that will be a temporary situation and other people will come to\n> your side, switch their miners over etc, and your chain will go back to\n> having the most work, and anyone who wasn't running a client with the\n> opposite signalling requirement will reorg to your chain and ruleset.\n>\n> But forkd isn't quite enough to do that reliably -- instead, you'll\n> start disconnecting nodes who forward blocks to you that were built on\n> the block you disconnected, and you'll risk ending up isolated: that's\n> why bip8 recommends clients \"should either use parameters that do not\n> risk there being a higher work alternative chain, or specify a mechanism\n> for implementations that support the deployment to preferentially peer\n> with each other\".\n>\n> Also, in order to have other nodes reorg to your chain when it has\n> more work, you don't want to exclusively connect to likeminded peers.\n> That's less of a big deal though, since you only need one peer to\n> forward the new chain to the compatible network to trigger all of them\n> to reorg.\n>\n> Being able to see the other chain has more work might be valuable in\n> order to add some sort of user warning signal though: \"the other chain\n> appears to have maintained 3x as much hash power as the chain your are\n> following\".\n>\n> In theory, using the `BLOCK_RECENT_CONSENSUS_CHANGE` flag to indicate\n> unwanted signalling might make sense; then you could theoretically\n> trigger on that to avoid disconnecting inbound peers that are following\n> the wrong chain. There's already some code along those lines; but while I\n> haven't checked recently, I think it ends up failing relatively quickly\n> once an invalid chain has been extended by a few blocks, since they'll\n> result in `BLOCK_INVALID_PREV` errors instead. The segwit UASF client\n> took some care to try to make this work, fwiw.\n>\n> (As it stands, I think RECENT_CONSENSUS_CHANGE only really helps with\n> avoiding disconnections if there's one or maybe two invalid blocks in\n> a row from a random miner that's doing strange things, rather than if\n> there's an active conflict resulting in a deliberate chain split).\n>\n> On the other hand, if there is a non-trivial chain split, then everyone\n> has to deal with splitting their coins across the different chains,\n> presuming they don't want to just consider one or the other a complete\n> write-off. That's already annoying; but for lightning funds I think it\n> means the automation breaks down, and every channel in the network would\n> need to be immediately closed on chain, as otherwise accepting state\n> updates risks losing the value of your channel balance on whichever\n> chain you're lightning node is not following.\n>\n> So to your original question: I think it's pretty hard to do all that\n> stuff in a separate script, without updating the node software itself.\n>\n> More generally, while I think forkd *is* pretty much state of the art;\n> I don't think it comes close to addressing all the problems that a chain\n> split would create.  Maybe it's still worthwhile despite those problems\n> if there's some existential threat to bitcoin, but (not) activating CTV\n> doesn't seem to rise to that level to me.\n>\n> Just my opinion, but: without some sort of existential threat, it\n> seems better to take things slowly and hold off on changes until either\n> pretty much everyone who cares is convinced that the change is a good\n> idea and ready to go; or until someone has done the rest of the work to\n> smooth over all the disruption a non-trivial chain split could cause.\n> Of course, the latter option is a _lot_ of work, and probably requires\n> consensus changes itself...\n>\n> Cheers,\n> aj\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220426/969010c5/attachment.html>"
            },
            {
                "author": "Michael Folkson",
                "date": "2022-04-26T13:53:21",
                "message_text_only": "Jeremy\n\n> The reason there was not a mailing list post is because that's not a committed plan, it was offered up for discussion to a public working group for feedback as a potential plan.\n\nIn the interests of posterity from your personal blog on April 17th [1]:\n\n\"Within a week from today, you\u2019ll find software builds for a CTV Bitcoin Client for all platforms linked here:\n\n- Mac OSX TODO:\n- Windows TODO:\n- Linux TODO:\n\nThese will be built using GUIX, which are reproducible for verification.\"\n\nDoesn't sound to me that this was being \"offered up for discussion\". A week from April 17th would have been Sunday April 24th (2 days ago). Readers of this mailing list would have had no idea of these plans.\n\n\u200b> You've inaccurately informed the list on something no one has communicated committed intent for.\n\nI'll let readers assess from the above who is accurately informing the mailing list and who is using personal blog posts and messaging apps to give a completely different impression to one set of people versus readers of this mailing list.\n\nI like to give people the benefit of the doubt and assume incompetence rather than malice but when it comes to potential chain splits it doesn't really matter which it is. It has the same effect and poses the same network risk. If and when you try something like this again I hope this is remembered.\n\nThe Binance hack rollback suggestion, the NACKing then coin flip suggestion on Taproot activation and now this. It seems like this trillion dollar industry is a joke to you. I know we aren't supposed to get personal on this mailing list but honestly if you are going to continue with these stunts I'd rather you do them on a different blockchain.\n\n[1]: https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n\n--\nMichael Folkson\nEmail: michaelfolkson at [protonmail.com](http://protonmail.com/)\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n\n------- Original Message -------\nOn Tuesday, April 26th, 2022 at 6:48 AM, Jeremy Rubin <jeremy.l.rubin at gmail.com> wrote:\n\n> The reason there was not a mailing list post is because that's not a committed plan, it was offered up for discussion to a public working group for feedback as a potential plan. You've inaccurately informed the list on something no one has communicated committed intent for. This was an alternative discussed in the telegram messaging app but did not seem to strike the correct balance so was not furthered.\n>\n> I was hoping to be able to share something back to this list sooner rather than later, but I have not been able to get, among those interested to discuss in that venue, coherence on a best next step. I communicated inasmuch on the bird app https://twitter.com/JeremyRubin/status/1518347793903017984 https://twitter.com/JeremyRubin/status/1518477022439247872, but do not have a clear next step and am pouring over all the fantastic feedback I received so far.\n>\n> Further, you're representing the state of affairs as if there's a great need to scramble to generate software for this, whereas there already are scripts to support a URSF that work with the source code I pointed to from my blog. This approach is a decent one, even though it requires two things, because it is simple. I think it's important that people keep this in mind because that is not a joke, the intention was that the correct set of check and balance tools were made available. I'd be eager to learn what, specifically, you think the advantages are of a separate binary release rather than a binary + script that can handle both cases? I'm asking sincerely because I would make the modifications to the release I prepared to support that as well, if they do not entail substantial technical risk. Personally, were I aligned with your preferences, I'd be testing the forkd script and making sure it is easy to use as the simplest and most effective way to achieve your ends.\n>\n> regards,\n>\n> Jeremy\n>\n> --\n> [@JeremyRubin](https://twitter.com/JeremyRubin)\n>\n> On Mon, Apr 25, 2022 at 3:44 PM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> The latest I'm hearing (this mailing list appears to be being bypassed in favor of personal blogs and messaging apps) is that Speedy Trial miner signaling for the contentious CTV soft fork is no longer going to start on May 5th (as previously communicated [1]) and may instead now start around August 1st 2022.\n>>\n>> Hence for now the drama seems to have been averted. I am deeply skeptical that in the next 3 months this soft fork activation attempt will obtain community consensus and will no longer be contentious (although I guess theoretically it is possible). As a result I suspect we'll be in the exact same situation with a URSF effort required 2-3 months down the line.\n>>\n>> If we are I'll try to keep the mailing list informed. It is important there is transparency and ample time to research and prepare before making decisions on what software to run. Obviously I have no control over what others choose to do. Please don't be rushed into running things you don't understand the implications of and please only signal for a soft fork if you are convinced it has community consensus (what should precede signaling as it did for Taproot) and you are ready to activate a soft fork.\n>>\n>> [1]: https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n>>\n>> --\n>> Michael Folkson\n>> Email: michaelfolkson at [protonmail.com](http://protonmail.com/)\n>> Keybase: michaelfolkson\n>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>\n>> ------- Original Message -------\n>> On Saturday, April 23rd, 2022 at 11:03 AM, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> As I said in my post:\n>>>\n>>> \"If you care about Bitcoin's consensus rules I'd request you pay attention so you can make an informed view on what to run and what to support.\"\n>>>\n>>> Ideally everyone would come to an informed view independently. Unfortunately many people don't have the time to follow Bitcoin drama 24/7 and hence struggle to separate noise from signal. In this case simple heuristics are better than nothing. One heuristic is to listen to those in the past who showed good judgment and didn't seek to misinform. Of course it is an imperfect heuristic. Ideally the community would be given sufficient time to come to an informed view independently on what software to run and not be rushed into making decisions. But it appears they are not being afforded that luxury.\n>>>\n>>>> I fear you risk losing respect in the community\n>>>\n>>> I appreciate your concern.\n>>>\n>>> --\n>>> Michael Folkson\n>>> Email: michaelfolkson at [protonmail.com](http://protonmail.com/)\n>>> Keybase: michaelfolkson\n>>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>>\n>>> ------- Original Message -------\n>>> On Saturday, April 23rd, 2022 at 6:10 AM, Billy Tetrud <billy.tetrud at gmail.com> wrote:\n>>>\n>>>>>  assuming people pay attention and listen to the individuals who were trusted during that period\n>>>>\n>>>> Bitcoin is not run by a group of authorities of olde. By asking people to trust \"those.. around in 2015-2017\" you're asking people to blindly trust authorities. This, in my strong opinion, goes against the bitcoin ethos, and is an incredibly harmful way to push for your agenda. I'd very much recommend you reassess the way you're going about what you're trying to do. I fear you risk losing respect in the community by implying without any evidence that certain people are \"taking advantage\" of some situation and attempting \"to confuse\".\n>>>>\n>>>> On Fri, Apr 22, 2022 at 12:33 PM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>\n>>>>> If the next few weeks go how I fear they will it could get messy. If you care about Bitcoin's consensus rules I'd request you pay attention so you can make an informed view on what to run and what to support. For those of you who were around in 2015-2017 you'll know what to expect. The right outcome endured in 2017 and I'm sure the right outcome will endure here assuming people pay attention and listen to the individuals who were trusted during that period. There are always a large number of motivated parties who are incentivized to break nodes off from Bitcoin and may seek to take advantage of a contentious soft fork activation attempt.\n>>>>>\n>>>>> Remember that if all the information is presented to users in a clear way well ahead of time then they can make their own mind up. I fear that things will be made as convoluted as possible in a way intended to confuse and information will be withheld until the last minute. When in doubt it is generally better to rely on the status quo and tried and trusted. In this case that would be Bitcoin Core. Alternative releases such as those seeking to attempt to activate CTV or indeed those seeking to resist the activation of CTV really should only be considered if you are informed on exactly what you are running.\n>>>>>\n>>>>> If you are interested in the effort to resist the contentious soft fork activation attempt of CTV please join ##ursf on Libera IRC.\n>>>>>\n>>>>> Have a good weekend. Hopefully those behind this contentious soft fork activation attempt will see sense and we can go back to more productive things than resisting contentious soft forks.\n>>>>>\n>>>>> --\n>>>>> Michael Folkson\n>>>>> Email: michaelfolkson at [protonmail.com](http://protonmail.com/)\n>>>>> Keybase: michaelfolkson\n>>>>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>>>>\n>>>>> _______________________________________________\n>>>>> bitcoin-dev mailing list\n>>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220426/82531c39/attachment-0001.html>"
            },
            {
                "author": "alicexbt",
                "date": "2022-04-27T05:59:01",
                "message_text_only": "Hi Michael,\n\n> Doesn't sound to me that this was being \"offered up for discussion\". A week from April 17th would have been Sunday April 24th (2 days ago). Readers of this mailing list would have had no idea of these plans.\n\nI'm quoting 5 points from the blog post and putting some words in capital :\n\n- EVALUATE the software PROPOSED above and find any bugs (claim 5.5 BTC Bounties?)\n- DISCUSS vociferously through the next few months if BIP-119 SHOULD BE ACTIVATED OR NOT (that means you should e.g. POST PUBLICLY if you/your org ENDORSES this particular path, cover it in your news org, etc).\n- Before the end of July, Miners should signal IF the speedy trial should succeed\n- Before November, IF Speedy Trial passes, then all users should ensure they upgrade to validate CTV\n- IF Speedy Trial FAILS, at least we were at the ball, and we can either TRY AGAIN NEXT YEAR, meaning CTV would be available for use in at minimum 1.5 years, or we can RE-EVALUATE the design of CTV against ALTERNATIVES that would take more time to prepare engineering wise (e.g., more general covenants, small tweaks to CTV).\n\n> I'll let readers assess from the above who is accurately informing the mailing list and who is using personal blog posts and messaging apps to give a completely different impression to one set of people versus readers of this mailing list.\n\nPeople are free to discuss things on different apps and websites. Not everyone enjoys spamming the mailing list every day with the same message repeated in many threads. Instead of trusting a group, I would ask them to verify everything and think critically and independently.\n\n> I like to give people the benefit of the doubt and assume incompetence rather than malice but when it comes to potential chain splits it doesn't really matter which it is. It has the same effect and poses the same network risk. If and when you try something like this again I hope this is remembered.\n\nYou should assume good faith not incompetence for a developer who has contributed to bitcoin for years as suggested earlier: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020303.html\n\nChain splits are discussed during each soft fork and nothing wrong in a conversation that is looking for solutions. Personal attacks will not stop chain split but they might derail the covenants research and development. Jeremy will be remembered for his contributions in bitcoin covenants and others can help him improve bitcoin with code. Some developers have already started reviewing, testing and even writing code for use cases of other covenant proposals.\n\n> The Binance hack rollback suggestion, the NACKing then coin flip suggestion on Taproot activation and now this. It seems like this trillion dollar industry is a joke to you. I know we aren't supposed to get personal on this mailing list but honestly if you are going to continue with these stunts I'd rather you do them on a different blockchain.\n\n- Developers have discussed, suggested and wrote lot of things during Binance and Bitfinex hack. This includes lot of respected core developers and co-authors of previous soft forks. I would not rehash and go in to the details of each event, comments etc. as this has nothing to do with BIP 119.\n\nhttps://www.reddit.com/r/Bitcoin/comments/4vupa6/p2shinfo_shows_movement_out_of_multisig_wallets/d61qyaj/\n\n- Coin flip was neither proposed by Jeremy nor used for anything during Taproot\n\nBitcoin developers care about bitcoin, despite our differing viewpoints on some issues. I'm sure we can accuse others of being irresponsible about a lot of things, and breaking bitcoin doesn't always require a soft fork. Nobody needs anyone's permission to suggest improvements to Bitcoin or to contribute in other ways, the most common of which is coding.\n\nPlease don't use personal insults to deter bitcoin contributors.\n\n/dev/fd0\n\nSent with [ProtonMail](https://protonmail.com/) secure email.\n------- Original Message -------\nOn Tuesday, April 26th, 2022 at 7:23 PM, Michael Folkson via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n\n> Jeremy\n>\n>> The reason there was not a mailing list post is because that's not a committed plan, it was offered up for discussion to a public working group for feedback as a potential plan.\n>> In the interests of posterity from your personal blog on April 17th 1:\n>> \"Within a week from today, you\u2019ll find software builds for a CTV Bitcoin Client for all platforms linked here:\n>\n> - Mac OSX TODO:\n> - Windows TODO:\n> - Linux TODO:\n>\n> These will be built using GUIX, which are reproducible for verification.\"\n>\n> Doesn't sound to me that this was being \"offered up for discussion\". A week from April 17th would have been Sunday April 24th (2 days ago). Readers of this mailing list would have had no idea of these plans.\n>\n>> You've inaccurately informed the list on something no one has communicated committed intent for.\n>\n> I'll let readers assess from the above who is accurately informing the mailing list and who is using personal blog posts and messaging apps to give a completely different impression to one set of people versus readers of this mailing list.\n>\n> I like to give people the benefit of the doubt and assume incompetence rather than malice but when it comes to potential chain splits it doesn't really matter which it is. It has the same effect and poses the same network risk. If and when you try something like this again I hope this is remembered.\n>\n> The Binance hack rollback suggestion, the NACKing then coin flip suggestion on Taproot activation and now this. It seems like this trillion dollar industry is a joke to you. I know we aren't supposed to get personal on this mailing list but honestly if you are going to continue with these stunts I'd rather you do them on a different blockchain.\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n> ------- Original Message -------\n> On Tuesday, April 26th, 2022 at 6:48 AM, Jeremy Rubin jeremy.l.rubin at gmail.com wrote:\n>\n>> The reason there was not a mailing list post is because that's not a committed plan, it was offered up for discussion to a public working group for feedback as a potential plan. You've inaccurately informed the list on something no one has communicated committed intent for. This was an alternative discussed in the telegram messaging app but did not seem to strike the correct balance so was not furthered.\n>> I was hoping to be able to share something back to this list sooner rather than later, but I have not been able to get, among those interested to discuss in that venue, coherence on a best next step. I communicated inasmuch on the bird app https://twitter.com/JeremyRubin/status/1518347793903017984 https://twitter.com/JeremyRubin/status/1518477022439247872, but do not have a clear next step and am pouring over all the fantastic feedback I received so far.\n>> Further, you're representing the state of affairs as if there's a great need to scramble to generate software for this, whereas there already are scripts to support a URSF that work with the source code I pointed to from my blog. This approach is a decent one, even though it requires two things, because it is simple. I think it's important that people keep this in mind because that is not a joke, the intention was that the correct set of check and balance tools were made available. I'd be eager to learn what, specifically, you think the advantages are of a separate binary release rather than a binary + script that can handle both cases? I'm asking sincerely because I would make the modifications to the release I prepared to support that as well, if they do not entail substantial technical risk. Personally, were I aligned with your preferences, I'd be testing the forkd script and making sure it is easy to use as the simplest and most effective way to achieve your ends.\n>> regards,\n>> Jeremy\n>> --\n>> @JeremyRubin\n>>\n>> On Mon, Apr 25, 2022 at 3:44 PM Michael Folkson via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n>>\n>>> The latest I'm hearing (this mailing list appears to be being bypassed in favor of personal blogs and messaging apps) is that Speedy Trial miner signaling for the contentious CTV soft fork is no longer going to start on May 5th (as previously communicated 1) and may instead now start around August 1st 2022.\n>>> Hence for now the drama seems to have been averted. I am deeply skeptical that in the next 3 months this soft fork activation attempt will obtain community consensus and will no longer be contentious (although I guess theoretically it is possible). As a result I suspect we'll be in the exact same situation with a URSF effort required 2-3 months down the line.\n>>> If we are I'll try to keep the mailing list informed. It is important there is transparency and ample time to research and prepare before making decisions on what software to run. Obviously I have no control over what others choose to do. Please don't be rushed into running things you don't understand the implications of and please only signal for a soft fork if you are convinced it has community consensus (what should precede signaling as it did for Taproot) and you are ready to activate a soft fork.\n>>> 1: https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n>>> --\n>>> Michael Folkson\n>>> Email: michaelfolkson at protonmail.com\n>>> Keybase: michaelfolkson\n>>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>>\n>>> ------- Original Message -------\n>>> On Saturday, April 23rd, 2022 at 11:03 AM, Michael Folkson via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n>>>\n>>>> As I said in my post:\n>>>> \"If you care about Bitcoin's consensus rules I'd request you pay attention so you can make an informed view on what to run and what to support.\"\n>>>> Ideally everyone would come to an informed view independently. Unfortunately many people don't have the time to follow Bitcoin drama 24/7 and hence struggle to separate noise from signal. In this case simple heuristics are better than nothing. One heuristic is to listen to those in the past who showed good judgment and didn't seek to misinform. Of course it is an imperfect heuristic. Ideally the community would be given sufficient time to come to an informed view independently on what software to run and not be rushed into making decisions. But it appears they are not being afforded that luxury.\n>>>>\n>>>>> I fear you risk losing respect in the community\n>>>>> I appreciate your concern.\n>>>>> --\n>>>>> Michael Folkson\n>>>>> Email: michaelfolkson at protonmail.com\n>>>>> Keybase: michaelfolkson\n>>>>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>>>\n>>>> ------- Original Message -------\n>>>> On Saturday, April 23rd, 2022 at 6:10 AM, Billy Tetrud billy.tetrud at gmail.com wrote:\n>>>>\n>>>>>> assuming people pay attention and listen to the individuals who were trusted during that period\n>>>>>> Bitcoin is not run by a group of authorities of olde. By asking people to trust \"those.. around in 2015-2017\" you're asking people to blindly trust authorities. This, in my strong opinion, goes against the bitcoin ethos, and is an incredibly harmful way to push for your agenda. I'd very much recommend you reassess the way you're going about what you're trying to do. I fear you risk losing respect in the community by implying without any evidence that certain people are \"taking advantage\" of some situation and attempting \"to confuse\".\n>>>>>\n>>>>> On Fri, Apr 22, 2022 at 12:33 PM Michael Folkson via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n>>>>>\n>>>>>> If the next few weeks go how I fear they will it could get messy. If you care about Bitcoin's consensus rules I'd request you pay attention so you can make an informed view on what to run and what to support. For those of you who were around in 2015-2017 you'll know what to expect. The right outcome endured in 2017 and I'm sure the right outcome will endure here assuming people pay attention and listen to the individuals who were trusted during that period. There are always a large number of motivated parties who are incentivized to break nodes off from Bitcoin and may seek to take advantage of a contentious soft fork activation attempt.\n>>>>>> Remember that if all the information is presented to users in a clear way well ahead of time then they can make their own mind up. I fear that things will be made as convoluted as possible in a way intended to confuse and information will be withheld until the last minute. When in doubt it is generally better to rely on the status quo and tried and trusted. In this case that would be Bitcoin Core. Alternative releases such as those seeking to attempt to activate CTV or indeed those seeking to resist the activation of CTV really should only be considered if you are informed on exactly what you are running.\n>>>>>> If you are interested in the effort to resist the contentious soft fork activation attempt of CTV please join ##ursf on Libera IRC.\n>>>>>> Have a good weekend. Hopefully those behind this contentious soft fork activation attempt will see sense and we can go back to more productive things than resisting contentious soft forks.\n>>>>>> --\n>>>>>> Michael Folkson\n>>>>>> Email: michaelfolkson at protonmail.com\n>>>>>> Keybase: michaelfolkson\n>>>>>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>>>>>\n>>>>>> _______________________________________________\n>>>>>> bitcoin-dev mailing list\n>>>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220427/211c410a/attachment-0001.html>"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2022-04-26T15:20:17",
                "message_text_only": "I'm a bit confused here. The \"personal blog\" in question was sent to this\nlist with an archive link and you saw an replied to it.\n\nThe proposal to make an alternative path hadn't gotten buy in sufficient\nfrom those iterating, and given the propensity of people to blow things out\nof proportion in this list, I wanted to be sure a follow up plan carried\nsome buy before wider dissemination.\n\nOn Tue, Apr 26, 2022, 6:53 AM Michael Folkson <michaelfolkson at protonmail.com>\nwrote:\n\n> Jeremy\n>\n> > The reason there was not a mailing list post is because that's not a\n> committed plan, it was offered up for discussion to a public working group\n> for feedback as a potential plan.\n>\n> In the interests of posterity from your personal blog on April 17th [1]:\n>\n> \"Within a week from today, you\u2019ll find software builds for a CTV Bitcoin\n> Client for all platforms linked here:\n>\n>    - Mac OSX TODO:\n>    - Windows TODO:\n>    - Linux TODO:\n>\n> These will be built using GUIX, which are reproducible for verification.\"\n>\n> Doesn't sound to me that this was being \"offered up for discussion\". A\n> week from April 17th would have been Sunday April 24th (2 days ago).\n> Readers of this mailing list would have had no idea of these plans.\n>\n> \u200b> You've inaccurately informed the list on something no one has\n> communicated committed intent for.\n>\n> I'll let readers assess from the above who is accurately informing the\n> mailing list and who is using personal blog posts and messaging apps to\n> give a completely different impression to one set of people versus readers\n> of this mailing list.\n>\n> I like to give people the benefit of the doubt and assume incompetence\n> rather than malice but when it comes to potential chain splits it doesn't\n> really matter which it is. It has the same effect and poses the same\n> network risk. If and when you try something like this again I hope this is\n> remembered.\n>\n> The Binance hack rollback suggestion, the NACKing then coin flip\n> suggestion on Taproot activation and now this. It seems like this trillion\n> dollar industry is a joke to you. I know we aren't supposed to get personal\n> on this mailing list but honestly if you are going to continue with these\n> stunts I'd rather you do them on a different blockchain.\n>\n> [1]: https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n> ------- Original Message -------\n> On Tuesday, April 26th, 2022 at 6:48 AM, Jeremy Rubin <\n> jeremy.l.rubin at gmail.com> wrote:\n>\n> The reason there was not a mailing list post is because that's not a\n> committed plan, it was offered up for discussion to a public working group\n> for feedback as a potential plan. You've inaccurately informed the list on\n> something no one has communicated committed intent for. This was an\n> alternative discussed in the telegram messaging app but did not seem to\n> strike the correct balance so was not furthered.\n>\n> I was hoping to be able to share something back to this list sooner rather\n> than later, but I have not been able to get, among those interested to\n> discuss in that venue, coherence on a best next step. I communicated\n> inasmuch on the bird app\n> https://twitter.com/JeremyRubin/status/1518347793903017984\n> https://twitter.com/JeremyRubin/status/1518477022439247872, but do not\n> have a clear next step and am pouring over all the fantastic feedback I\n> received so far.\n>\n> Further, you're representing the state of affairs as if there's a great\n> need to scramble to generate software for this, whereas there already are\n> scripts to support a URSF that work with the source code I pointed to from\n> my blog. This approach is a decent one, even though it requires two things,\n> because it is simple. I think it's important that people keep this in mind\n> because that is not a joke, the intention was that the correct set of check\n> and balance tools were made available. I'd be eager to learn what,\n> specifically, you think the advantages are of a separate binary release\n> rather than a binary + script that can handle both cases? I'm asking\n> sincerely because I would make the modifications to the release I prepared\n> to support that as well, if they do not entail substantial technical risk.\n> Personally, were I aligned with your preferences, I'd be testing the forkd\n> script and making sure it is easy to use as the simplest and most effective\n> way to achieve your ends.\n>\n> regards,\n>\n> Jeremy\n>\n> --\n> @JeremyRubin <https://twitter.com/JeremyRubin>\n>\n> On Mon, Apr 25, 2022 at 3:44 PM Michael Folkson via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> The latest I'm hearing (this mailing list appears to be being bypassed in\n>> favor of personal blogs and messaging apps) is that Speedy Trial miner\n>> signaling for the contentious CTV soft fork is no longer going to start on\n>> May 5th (as previously communicated [1]) and may instead now start around\n>> August 1st 2022.\n>>\n>> Hence for now the drama seems to have been averted. I am deeply skeptical\n>> that in the next 3 months this soft fork activation attempt will obtain\n>> community consensus and will no longer be contentious (although I guess\n>> theoretically it is possible). As a result I suspect we'll be in the exact\n>> same situation with a URSF effort required 2-3 months down the line.\n>>\n>> If we are I'll try to keep the mailing list informed. It is important\n>> there is transparency and ample time to research and prepare before making\n>> decisions on what software to run. Obviously I have no control over what\n>> others choose to do. Please don't be rushed into running things you don't\n>> understand the implications of and please only signal for a soft fork if\n>> you are convinced it has community consensus (what should precede signaling\n>> as it did for Taproot) and you are ready to activate a soft fork.\n>>\n>> [1]: https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n>>\n>> --\n>> Michael Folkson\n>> Email: michaelfolkson at protonmail.com\n>> Keybase: michaelfolkson\n>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>\n>> ------- Original Message -------\n>> On Saturday, April 23rd, 2022 at 11:03 AM, Michael Folkson via\n>> bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> As I said in my post:\n>>\n>> \"If you care about Bitcoin's consensus rules I'd request you pay\n>> attention so you can make an informed view on what to run and what to\n>> support.\"\n>>\n>> Ideally everyone would come to an informed view independently.\n>> Unfortunately many people don't have the time to follow Bitcoin drama 24/7\n>> and hence struggle to separate noise from signal. In this case simple\n>> heuristics are better than nothing. One heuristic is to listen to those in\n>> the past who showed good judgment and didn't seek to misinform. Of course\n>> it is an imperfect heuristic. Ideally the community would be given\n>> sufficient time to come to an informed view independently on what software\n>> to run and not be rushed into making decisions. But it appears they are not\n>> being afforded that luxury.\n>>\n>> > I fear you risk losing respect in the community\n>>\n>> I appreciate your concern.\n>>\n>> --\n>> Michael Folkson\n>> Email: michaelfolkson at protonmail.com\n>> Keybase: michaelfolkson\n>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>\n>> ------- Original Message -------\n>> On Saturday, April 23rd, 2022 at 6:10 AM, Billy Tetrud <\n>> billy.tetrud at gmail.com> wrote:\n>>\n>> > assuming people pay attention and listen to the individuals who were\n>> trusted during that period\n>>\n>> Bitcoin is not run by a group of authorities of olde. By asking people to\n>> trust \"those.. around in 2015-2017\" you're asking people to blindly trust\n>> authorities. This, in my strong opinion, goes against the bitcoin ethos,\n>> and is an incredibly harmful way to push for your agenda. I'd very much\n>> recommend you reassess the way you're going about what you're trying to do.\n>> I fear you risk losing respect in the community by implying without any\n>> evidence that certain people are \"taking advantage\" of some situation and\n>> attempting \"to confuse\".\n>>\n>> On Fri, Apr 22, 2022 at 12:33 PM Michael Folkson via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> If the next few weeks go how I fear they will it could get messy. If you\n>>> care about Bitcoin's consensus rules I'd request you pay attention so you\n>>> can make an informed view on what to run and what to support. For those of\n>>> you who were around in 2015-2017 you'll know what to expect. The right\n>>> outcome endured in 2017 and I'm sure the right outcome will endure here\n>>> assuming people pay attention and listen to the individuals who were\n>>> trusted during that period. There are always a large number of motivated\n>>> parties who are incentivized to break nodes off from Bitcoin and may seek\n>>> to take advantage of a contentious soft fork activation attempt.\n>>>\n>>> Remember that if all the information is presented to users in a clear\n>>> way well ahead of time then they can make their own mind up. I fear that\n>>> things will be made as convoluted as possible in a way intended to confuse\n>>> and information will be withheld until the last minute. When in doubt it is\n>>> generally better to rely on the status quo and tried and trusted. In this\n>>> case that would be Bitcoin Core. Alternative releases such as those seeking\n>>> to attempt to activate CTV or indeed those seeking to resist the activation\n>>> of CTV really should only be considered if you are informed on exactly what\n>>> you are running.\n>>>\n>>> If you are interested in the effort to resist the contentious soft fork\n>>> activation attempt of CTV please join ##ursf on Libera IRC.\n>>>\n>>> Have a good weekend. Hopefully those behind this contentious soft fork\n>>> activation attempt will see sense and we can go back to more productive\n>>> things than resisting contentious soft forks.\n>>>\n>>> --\n>>> Michael Folkson\n>>> Email: michaelfolkson at protonmail.com\n>>> Keybase: michaelfolkson\n>>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220426/74387575/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2022-04-26T11:40:19",
                "message_text_only": "\"The only 3 nacks\"...I would not call that an accurate \"collection of\nfeedback\". Feedback is always more positive when you laregely chose to\nignore any negative feedback, isn't it?\n\n\"Largely, the formal critiques of CTV (the 3 NACKs) are based on topics of\nwhether or not to swing the racquet, not if we should be at the ball. \"\n\nI would comment on this point, but I'm not sure I'm \"technical enough\". I\nhave to admit: I've never played tennis.\nBesides, I'm pretty sure any feedback I give would be ignored.\nFollowing the tennis analogy, one could think Jeremy is trying to win this\nmatch the way Nadal won Djokovich in Australia in 2021 (ie by doing\neverything in his hand to make sure his opponent wasn't even allowed to\nplay, ie not by playing fair nor by playing better than the opppnent).\n\n\"Activation parameters like in taproot\".\nIf this was a tennis match, then I would have some sort of ability to slow\ntime down or something, because I've been seeing this ball slowly coming\nsince taproot's activation parameters were discussed.\n\nIt feels a little bit \"deja vu\" too. Was ever a controversial hardfork\nattempted \"just with the same activation mechanism as the last softfork\"?\nI should look for the exact words, I guess.\n\n\nOn Mon, Apr 25, 2022, 23:45 Michael Folkson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> The latest I'm hearing (this mailing list appears to be being bypassed in\n> favor of personal blogs and messaging apps) is that Speedy Trial miner\n> signaling for the contentious CTV soft fork is no longer going to start on\n> May 5th (as previously communicated [1]) and may instead now start around\n> August 1st 2022.\n>\n> Hence for now the drama seems to have been averted. I am deeply skeptical\n> that in the next 3 months this soft fork activation attempt will obtain\n> community consensus and will no longer be contentious (although I guess\n> theoretically it is possible). As a result I suspect we'll be in the exact\n> same situation with a URSF effort required 2-3 months down the line.\n>\n> If we are I'll try to keep the mailing list informed. It is important\n> there is transparency and ample time to research and prepare before making\n> decisions on what software to run. Obviously I have no control over what\n> others choose to do. Please don't be rushed into running things you don't\n> understand the implications of and please only signal for a soft fork if\n> you are convinced it has community consensus (what should precede signaling\n> as it did for Taproot) and you are ready to activate a soft fork.\n>\n> [1]: https://rubin.io/bitcoin/2022/04/17/next-steps-bip119/\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n> ------- Original Message -------\n> On Saturday, April 23rd, 2022 at 11:03 AM, Michael Folkson via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> As I said in my post:\n>\n> \"If you care about Bitcoin's consensus rules I'd request you pay\n> attention so you can make an informed view on what to run and what to\n> support.\"\n>\n> Ideally everyone would come to an informed view independently.\n> Unfortunately many people don't have the time to follow Bitcoin drama 24/7\n> and hence struggle to separate noise from signal. In this case simple\n> heuristics are better than nothing. One heuristic is to listen to those in\n> the past who showed good judgment and didn't seek to misinform. Of course\n> it is an imperfect heuristic. Ideally the community would be given\n> sufficient time to come to an informed view independently on what software\n> to run and not be rushed into making decisions. But it appears they are not\n> being afforded that luxury.\n>\n> >  I fear you risk losing respect in the community\n>\n> I appreciate your concern.\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n> ------- Original Message -------\n> On Saturday, April 23rd, 2022 at 6:10 AM, Billy Tetrud <\n> billy.tetrud at gmail.com> wrote:\n>\n> > assuming people pay attention and listen to the individuals who were\n> trusted during that period\n>\n> Bitcoin is not run by a group of authorities of olde. By asking people to\n> trust \"those.. around in 2015-2017\" you're asking people to blindly trust\n> authorities. This, in my strong opinion, goes against the bitcoin ethos,\n> and is an incredibly harmful way to push for your agenda. I'd very much\n> recommend you reassess the way you're going about what you're trying to do.\n> I fear you risk losing respect in the community by implying without any\n> evidence that certain people are \"taking advantage\" of some situation and\n> attempting \"to confuse\".\n>\n> On Fri, Apr 22, 2022 at 12:33 PM Michael Folkson via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> If the next few weeks go how I fear they will it could get messy. If you\n>> care about Bitcoin's consensus rules I'd request you pay attention so you\n>> can make an informed view on what to run and what to support. For those of\n>> you who were around in 2015-2017 you'll know what to expect. The right\n>> outcome endured in 2017 and I'm sure the right outcome will endure here\n>> assuming people pay attention and listen to the individuals who were\n>> trusted during that period. There are always a large number of motivated\n>> parties who are incentivized to break nodes off from Bitcoin and may seek\n>> to take advantage of a contentious soft fork activation attempt.\n>>\n>> Remember that if all the information is presented to users in a clear way\n>> well ahead of time then they can make their own mind up. I fear that things\n>> will be made as convoluted as possible in a way intended to confuse and\n>> information will be withheld until the last minute. When in doubt it is\n>> generally better to rely on the status quo and tried and trusted. In this\n>> case that would be Bitcoin Core. Alternative releases such as those seeking\n>> to attempt to activate CTV or indeed those seeking to resist the activation\n>> of CTV really should only be considered if you are informed on exactly what\n>> you are running.\n>>\n>> If you are interested in the effort to resist the contentious soft fork\n>> activation attempt of CTV please join ##ursf on Libera IRC.\n>>\n>> Have a good weekend. Hopefully those behind this contentious soft fork\n>> activation attempt will see sense and we can go back to more productive\n>> things than resisting contentious soft forks.\n>>\n>> --\n>> Michael Folkson\n>> Email: michaelfolkson at protonmail.com\n>> Keybase: michaelfolkson\n>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220426/3bd98b42/attachment.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2022-04-26T13:42:43",
                "message_text_only": ">\n>\n> I would comment on this point, but I'm not sure I'm \"technical enough\". I\n> have to admit: I've never played tennis.\n>\n\nYou are technicial enough to read the nacks... everyone is:\nhttps://github.com/JeremyRubin/utxos.org/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n\nI can give a summary of the nack arguments here on one sentence:    \"I am\nresisting a consensus change because we don't have consensus\"\n\nIt's lovely recursive logic\n\n------\n\nThe most cogent *technical* arguments against ctv seem fall into 3 camps:\n\n1. APO is better for eltoo:\nhttps://twitter.com/rusty_twit/status/1518007923896578048?s=20&t=8IUgni_i5jcfSlJ1Gy7T1A\n\n2. CTV doesn't have recursion, but i want recursion... which are swiftly\nfollowed by arguments against recursion:\nhttps://bitcoinops.org/en/newsletters/2022/03/09/#limiting-script-language-expressiveness\n\n(I usually ignore this one)\n\n3. TLUV is super cool for vaults, so why are we even talking about CTV when\nTLUV is better?\n\nI like this (positive vibes) summary:\n\nhttps://raymonddurk.medium.com/bitcoin-after-taproot-86c93fe5cc0c\n\nNowhere in there would anyone say CTV is \"bad\".\n\nJust that other opcodes will wind up being used more because they are more\npurpose-fit for <insert use case here>\n\nIf only we had unlimited resources we could have APO/TLUV;/CTV all ready to\ngo and be able to evaluate them on a level playing field / signet.\n\nDoes this sound about right?   Am I missing something?\n\n\n- Erik\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220426/fa300163/attachment-0001.html>"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2022-04-26T06:39:36",
                "message_text_only": "On Fri, Apr 22, 2022 at 7:33 PM Michael Folkson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> If the next few weeks go how I fear they will it could get messy. If you\n> care about Bitcoin's consensus rules I'd request you pay attention so you\n> can make an informed view on what to run and what to support. For those of\n> you who were around in 2015-2017 you'll know what to expect. The right\n> outcome endured in 2017 and I'm sure the right outcome will endure here\n> assuming people pay attention and listen to the individuals who were\n> trusted during that period. There are always a large number of motivated\n> parties who are incentivized to break nodes off from Bitcoin and may seek\n> to take advantage of a contentious soft fork activation attempt.\n>\n> Remember that if all the information is presented to users in a clear way\n> well ahead of time then they can make their own mind up. I fear that things\n> will be made as convoluted as possible in a way intended to confuse and\n> information will be withheld until the last minute. When in doubt it is\n> generally better to rely on the status quo and tried and trusted. In this\n> case that would be Bitcoin Core. Alternative releases such as those seeking\n> to attempt to activate CTV or indeed those seeking to resist the activation\n> of CTV really should only be considered if you are informed on exactly what\n> you are running.\n>\n> If you are interested in the effort to resist the contentious soft fork\n> activation attempt of CTV please join ##ursf on Libera IRC.\n>\n> Have a good weekend. Hopefully those behind this contentious soft fork\n> activation attempt will see sense and we can go back to more productive\n> things than resisting contentious soft forks.\n>\n\nThanks for raising this\n\nRemembering 2017 quite well, it's often characterized as small block(ers)\nvs big block(ers).  While that was certainly the case, I see it slightly\ndifferently.\n\nI think the bigger argument of 2017 was around a network split.  Splitting\nthe network is problematic because one or other of the split chains may\nexperience a hash death (without mitigating difficulty adjustment\nalgorithms), or the so-called \"famine and feast\" minority hash behaviour,\nexperienced on testnet, and disruptive to users\n\nAny proposed changes should factor in network splits as a potential risk.\nOr perhaps through another lens, you could see a network split as an\nattack, on a par with a 51% attack, in terms of user disruption.  It may in\nfact, be more potent, since we've never had a serious 51% attack, but we\nhave had network splits\n\nI do think the conversation here is MUCH better tempered than 2017.\nHopefully we can try and avoid perceptions of gate keeping and railroading,\nand keep the network together, as we did back then\n\n\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220426/1c0c7197/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "What to expect in the next few weeks",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Michael Folkson",
                "Anthony Towns",
                "alicexbt",
                "Jorge Tim\u00f3n",
                "Erik Aronesty",
                "Melvin Carvalho",
                "Billy Tetrud",
                "Jeremy Rubin"
            ],
            "messages_count": 13,
            "total_messages_chars_count": 80404
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Core 23.0 released",
        "thread_messages": [
            {
                "author": "W. J. van der Laan",
                "date": "2022-04-25T14:06:49",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nBitcoin Core version 23.0 is now available from:\n\n  <https://bitcoincore.org/bin/bitcoin-core-23.0/>\n\nOr through BitTorrent:\n\n   magnet:?xt=urn:btih:32bc317cce76b966a26bdb53d42f64d66d595954&dn=bitcoin-core-23.0&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969%2Fannounce&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969%2Fannounce&tr=udp%3A%2F%2Fexplodie.org%3A6969%2Fannounce&tr=udp%3A%2F%2Ftracker.torrent.eu.org%3A451%2Fannounce&tr=udp%3A%2F%2Ftracker.bitcoin.sprovoost.nl%3A6969\n\nThis release includes new features, various bug fixes and performance\nimprovements, as well as updated translations.\n\nPlease report bugs using the issue tracker at GitHub:\n\n  <https://github.com/bitcoin/bitcoin/issues>\n\nTo receive security and update notifications, please subscribe to:\n\n  <https://bitcoincore.org/en/list/announcements/join/>\n\nHow to Upgrade\n==============\n\nIf you are running an older version, shut it down. Wait until it has completely\nshut down (which might take a few minutes in some cases), then run the\ninstaller (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\nor `bitcoind`/`bitcoin-qt` (on Linux).\n\nUpgrading directly from a version of Bitcoin Core that has reached its EOL is\npossible, but it might take some time if the data directory needs to be migrated. Old\nwallet versions of Bitcoin Core are generally supported.\n\nCompatibility\n==============\n\nBitcoin Core is supported and extensively tested on operating systems\nusing the Linux kernel, macOS 10.15+, and Windows 7 and newer.  Bitcoin\nCore should also work on most other Unix-like systems but is not as\nfrequently tested on them.  It is not recommended to use Bitcoin Core on\nunsupported systems.\n\nNotable changes\n===============\n\nP2P and network changes\n- -----------------------\n\n- - A bitcoind node will no longer rumour addresses to inbound peers by default.\n  They will become eligible for address gossip after sending an ADDR, ADDRV2,\n  or GETADDR message. (#21528)\n\n- - Before this release, Bitcoin Core had a strong preference to try to connect only to peers that listen on port 8333. As a result of that, Bitcoin nodes listening on non-standard ports would likely not get any Bitcoin Core peers connecting to them. This preference has been removed. (#23542)\n\n- - Full support has been added for the CJDNS network. See the new option `-cjdnsreachable` and [doc/cjdns.md](https://github.com/bitcoin/bitcoin/tree/23.x/doc/cjdns.md) (#23077)\n\nFee estimation changes\n- ----------------------\n\n- - Fee estimation now takes the feerate of replacement (RBF) transactions into\n  account. (#22539)\n\nRescan startup parameter removed\n- --------------------------------\n\nThe `-rescan` startup parameter has been removed. Wallets which require\nrescanning due to corruption will still be rescanned on startup.\nOtherwise, please use the `rescanblockchain` RPC to trigger a rescan. (#23123)\n\nTracepoints and Userspace, Statically Defined Tracing support\n- -------------------------------------------------------------\n\nBitcoin Core release binaries for Linux now include experimental tracepoints which\nact as an interface for process-internal events. These can be used for review,\ndebugging, monitoring, and more. The tracepoint API is semi-stable. While the API\nis tested, process internals might change between releases requiring changes to the\ntracepoints. Information about the existing tracepoints can be found under\n[doc/tracing.md](https://github.com/bitcoin/bitcoin/blob/23.x/doc/tracing.md) and\nusage examples are provided in [contrib/tracing/](https://github.com/bitcoin/bitcoin/tree/23.x/contrib/tracing).\n\nUpdated RPCs\n- ------------\n\n- - The `validateaddress` RPC now returns an `error_locations` array for invalid\n  addresses, with the indices of invalid character locations in the address (if\n  known). For example, this will attempt to locate up to two Bech32 errors, and\n  return their locations if successful. Success and correctness are only guaranteed\n  if fewer than two substitution errors have been made.\n  The error message returned in the `error` field now also returns more specific\n  errors when decoding fails. (#16807)\n\n- - The `-deprecatedrpc=addresses` configuration option has been removed.  RPCs\n  `gettxout`, `getrawtransaction`, `decoderawtransaction`, `decodescript`,\n  `gettransaction verbose=true` and REST endpoints `/rest/tx`, `/rest/getutxos`,\n  `/rest/block` no longer return the `addresses` and `reqSigs` fields, which\n  were previously deprecated in 22.0. (#22650)\n- - The `getblock` RPC command now supports verbosity level 3 containing transaction inputs'\n  `prevout` information.  The existing `/rest/block/` REST endpoint is modified to contain\n  this information too. Every `vin` field will contain an additional `prevout` subfield\n  describing the spent output. `prevout` contains the following keys:\n  - `generated` - true if the spent coins was a coinbase.\n  - `height`\n  - `value`\n  - `scriptPubKey`\n\n- - The top-level fee fields `fee`, `modifiedfee`, `ancestorfees` and `descendantfees`\n  returned by RPCs `getmempoolentry`,`getrawmempool(verbose=true)`,\n  `getmempoolancestors(verbose=true)` and `getmempooldescendants(verbose=true)`\n  are deprecated and will be removed in the next major version (use\n  `-deprecated=fees` if needed in this version). The same fee fields can be accessed\n  through the `fees` object in the result. WARNING: deprecated\n  fields `ancestorfees` and `descendantfees` are denominated in sats, whereas all\n  fields in the `fees` object are denominated in BTC. (#22689)\n\n- - Both `createmultisig` and `addmultisigaddress` now include a `warnings`\n  field, which will show a warning if a non-legacy address type is requested\n  when using uncompressed public keys. (#23113)\n\nChanges to wallet related RPCs can be found in the Wallet section below.\n\nNew RPCs\n- --------\n\n- - Information on soft fork status has been moved from `getblockchaininfo`\n  to the new `getdeploymentinfo` RPC which allows querying soft fork status at any\n  block, rather than just at the chain tip. Inclusion of soft fork\n  status in `getblockchaininfo` can currently be restored using the\n  configuration `-deprecatedrpc=softforks`, but this will be removed in\n  a future release. Note that in either case, the `status` field\n  now reflects the status of the current block rather than the next\n  block. (#23508)\n\nFiles\n- -----\n\n* On startup, the list of banned hosts and networks (via `setban` RPC) in\n  `banlist.dat` is ignored and only `banlist.json` is considered. Bitcoin Core\n  version 22.x is the only version that can read `banlist.dat` and also write\n  it to `banlist.json`. If `banlist.json` already exists, version 22.x will not\n  try to translate the `banlist.dat` into json. After an upgrade, `listbanned`\n  can be used to double check the parsed entries. (#22570)\n\nUpdated settings\n- ----------------\n\n- - In previous releases, the meaning of the command line option\n  `-persistmempool` (without a value provided) incorrectly disabled mempool\n  persistence.  `-persistmempool` is now treated like other boolean options to\n  mean `-persistmempool=1`. Passing `-persistmempool=0`, `-persistmempool=1`\n  and `-nopersistmempool` is unaffected. (#23061)\n\n- - `-maxuploadtarget` now allows human readable byte units [k|K|m|M|g|G|t|T].\n  E.g. `-maxuploadtarget=500g`. No whitespace, +- or fractions allowed.\n  Default is `M` if no suffix provided. (#23249)\n\n- - If `-proxy=` is given together with `-noonion` then the provided proxy will\n  not be set as a proxy for reaching the Tor network. So it will not be\n  possible to open manual connections to the Tor network for example with the\n  `addnode` RPC. To mimic the old behavior use `-proxy=` together with\n  `-onlynet=` listing all relevant networks except `onion`. (#22834)\n\nTools and Utilities\n- -------------------\n\n- - Update `-getinfo` to return data in a user-friendly format that also reduces vertical space. (#21832)\n\n- - CLI `-addrinfo` now returns a single field for the number of `onion` addresses\n  known to the node instead of separate `torv2` and `torv3` fields, as support\n  for Tor V2 addresses was removed from Bitcoin Core in 22.0. (#22544)\n\nWallet\n- ------\n\n- - Descriptor wallets are now the default wallet type. Newly created wallets\n  will use descriptors unless `descriptors=false` is set during `createwallet`, or\n  the `Descriptor wallet` checkbox is unchecked in the GUI.\n\n  Note that wallet RPC commands like `importmulti` and `dumpprivkey` cannot be\n  used with descriptor wallets, so if your client code relies on these commands\n  without specifying `descriptors=false` during wallet creation, you will need\n  to update your code.\n\n- - Newly created descriptor wallets will contain an automatically generated `tr()`\n  descriptor which allows for creating single key Taproot receiving addresses.\n\n- - `upgradewallet` will now automatically flush the keypool if upgrading\n  from a non-HD wallet to an HD wallet, to immediately start using the\n  newly-generated HD keys. (#23093)\n\n- - a new RPC `newkeypool` has been added, which will flush (entirely\n  clear and refill) the keypool. (#23093)\n\n- - `listunspent` now includes `ancestorcount`, `ancestorsize`, and\n  `ancestorfees` for each transaction output that is still in the mempool.\n  (#12677)\n\n- - `lockunspent` now optionally takes a third parameter, `persistent`, which\n  causes the lock to be written persistently to the wallet database. This\n  allows UTXOs to remain locked even after node restarts or crashes. (#23065)\n\n- - `receivedby` RPCs now include coinbase transactions. Previously, the\n  following wallet RPCs excluded coinbase transactions: `getreceivedbyaddress`,\n  `getreceivedbylabel`, `listreceivedbyaddress`, `listreceivedbylabel`. This\n  release changes this behaviour and returns results accounting for received\n  coins from coinbase outputs. The previous behaviour can be restored using the\n  configuration `-deprecatedrpc=exclude_coinbase`, but may be removed in a\n  future release. (#14707)\n\n- - A new option in the same `receivedby` RPCs, `include_immature_coinbase`\n  (default=`false`), determines whether to account for immature coinbase\n  transactions. Immature coinbase transactions are coinbase transactions that\n  have 100 or fewer confirmations, and are not spendable. (#14707)\n\nGUI changes\n- -----------\n\n- - UTXOs which are locked via the GUI are now stored persistently in the\n  wallet database, so are not lost on node shutdown or crash. (#23065)\n\n- - The Bech32 checkbox has been replaced with a dropdown for all address types, including the new Bech32m (BIP-350) standard for Taproot enabled wallets.\n\nLow-level changes\n=================\n\nRPC\n- ---\n\n- - `getblockchaininfo` now returns a new `time` field, that provides the chain tip time. (#22407)\n\nTests\n- -----\n\n- - For the `regtest` network the activation heights of several softforks were\n  set to block height 1. They can be changed by the runtime setting\n  `-testactivationheight=name at height`. (#22818)\n\nCredits\n=======\n\nThanks to everyone who directly contributed to this release:\n\n- - 0xb10c\n- - 0xree\n- - Aaron Clauson\n- - Adrian-Stefan Mares\n- - agroce\n- - aitorjs\n- - Alex Groce\n- - amadeuszpawlik\n- - Amiti Uttarwar\n- - Andrew Chow\n- - Andrew Poelstra\n- - Andrew Toth\n- - anouar kappitou\n- - Anthony Towns\n- - Antoine Poinsot\n- - Arnab Sen\n- - Ben Woosley\n- - benthecarman\n- - Bitcoin Hodler\n- - BitcoinTsunami\n- - brianddk\n- - Bruno Garcia\n- - CallMeMisterOwl\n- - Calvin Kim\n- - Carl Dong\n- - Cory Fields\n- - Cuong V. Nguyen\n- - Darius Parvin\n- - Dhruv Mehta\n- - Dimitri Deijs\n- - Dimitris Apostolou\n- - Dmitry Goncharov\n- - Douglas Chimento\n- - eugene\n- - Fabian Jahr\n- - fanquake\n- - Florian Baumgartl\n- - fyquah\n- - Gleb Naumenko\n- - glozow\n- - Gregory Sanders\n- - Heebs\n- - Hennadii Stepanov\n- - hg333\n- - HiLivin\n- - Igor Cota\n- - Jadi\n- - James O'Beirne\n- - Jameson Lopp\n- - Jarol Rodriguez\n- - Jeremy Rand\n- - Jeremy Rubin\n- - Joan Karadimov\n- - John Newbery\n- - Jon Atack\n- - Jo\u00e3o Barbosa\n- - josibake\n- - junderw\n- - Karl-Johan Alm\n- - katesalazar\n- - Kennan Mell\n- - Kiminuo\n- - Kittywhiskers Van Gogh\n- - Klement Tan\n- - Kristaps Kaupe\n- - Kuro\n- - Larry Ruane\n- - lsilva01\n- - lucash-dev\n- - Luke Dashjr\n- - MarcoFalke\n- - Martin Leitner-Ankerl\n- - Martin Zumsande\n- - Matt Corallo\n- - Matt Whitlock\n- - MeshCollider\n- - Michael Dietz\n- - Murch\n- - naiza\n- - Nathan Garabedian\n- - Nelson Galdeman\n- - NikhilBartwal\n- - Niklas G\u00f6gge\n- - node01\n- - nthumann\n- - Pasta\n- - Patrick Kamin\n- - Pavel Safronov\n- - Pavol Rusnak\n- - Perlover\n- - Pieter Wuille\n- - practicalswift\n- - pradumnasaraf\n- - pranabp-bit\n- - Prateek Sancheti\n- - Prayank\n- - Rafael Sadowski\n- - rajarshimaitra\n- - randymcmillan\n- - ritickgoenka\n- - Rob Fielding\n- - Rojar Smith\n- - Russell Yanofsky\n- - S3RK\n- - Saibato\n- - Samuel Dobson\n- - sanket1729\n- - seaona\n- - Sebastian Falbesoner\n- - sh15h4nk\n- - Shashwat\n- - Shorya\n- - ShubhamPalriwala\n- - Shubhankar Gambhir\n- - Sjors Provoost\n- - sogoagain\n- - sstone\n- - stratospher\n- - Suriyaa Rocky Sundararuban\n- - Taeik Lim\n- - TheCharlatan\n- - Tim Ruffing\n- - Tobin Harding\n- - Troy Giorshev\n- - Tyler Chambers\n- - Vasil Dimov\n- - W. J. van der Laan\n- - w0xlt\n- - willcl-ark\n- - William Casarin\n- - zealsham\n- - Zero-1729\n\nAs well as to everyone that helped with translations on\n[Transifex](https://www.transifex.com/bitcoin/bitcoin/).\n-----BEGIN PGP SIGNATURE-----\n\niQEzBAEBCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAmJmqnkACgkQHkrtYphs\n0l3ACQgAzwMtfxcPBOX4MEO0ioKoPmlHUGqa8Ak9nli3RUUHJB3dduTpqKZsbDjt\nL8i4iOJpLMH6Irkgl8XWVoqTASMnkOdPQmSOBvOqVATCnpWbZmaGWlAkHammmLdD\nmTo5TouJZI4C6QT7xQj2MhqYjI6dlXbYU8VSQFrp6D921fHTFJON+evNsGH11c4y\nsa0KQfEiO2CBVlvQl+qhq6w/I/Y8ug+iHe50fr/9qolNab4+urZRzr2pBBxHYS3z\nY6XEkUVsVMvBnH956O6FA+u4svbt2nvSfFhk2/xVP68WayxlL8v5N6VeUKyXkVKU\n8BjcJ+bQNfckn6WfxhUazTUKXLfRCg==\n=/aFR\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 23.0 released",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "W. J. van der Laan"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 13981
        }
    },
    {
        "title": "[bitcoin-dev] Vaulting (Was: Automatically reverting (\"transitory\") > soft forks)",
        "thread_messages": [
            {
                "author": "Buck O Perley",
                "date": "2022-04-25T16:03:12",
                "message_text_only": "Just a couple of comments re-CTV vault security concerns.\n\n\n1. One way to assuage the concern of the hot wallet vulnerability\nis pre-program the spends such that the hot wallet can only\nspend a certain amount from the hot wallet spend and the rest would\nkind of be \"recursive\" in that it would be sent back to a\nnew instantiation of the CTV vault. I believe kanzure's vaults\ndoes this w/ the non-covenant version using pre-signed transactions\n(https://github.com/kanzure/python-vaults). While this doesn't\nprevent the theft it caps off the total risk. I would argue that\nthis is strictly better than a multisig because you can also use\nmultisig as you normally would if you want but you have the option\nif you think your hot key is secure to use that spending path.\nYou also get the nice benefit of learning about compromised\nkeys without having to risk all funds associated with that key.\n\n\n2. As to how to improve UX for CTV with other proposals, I think\nyou get a lot of benefits when using with taproot because you can\nuse CTV in tapleaves to secure specific spend conditions, but can\nalways fall back to other off-ramps (e.g. a musig key path spend or\nother script path conditions). Of course you can do this without\ntaproot but taproot makes this more space efficient. This idea has\nbeen used to some effect in some recent exploration of how CTV can\nhelp improve UX around DLCs. You could even do this to help with\nthe problems of not sending the right amount such that you have a\nreally really cold key or set of keys for example such that if you\nhave UTXOs that have values that can't be spent with the given CTV\ncommitment, then you just use that other branch.\n\n- Buck\n\n------- Original Message -------\n\n> Date: Sun, 24 Apr 2022 18:03:52 -0500\n> From: Billy Tetrud billy.tetrud at gmail.com\n> \n\n> To: \"Russell O'Connor\" roconnor at blockstream.com, Bitcoin Protocol\n> \n\n> Discussion bitcoin-dev at lists.linuxfoundation.org\n> \n\n> Subject: Re: [bitcoin-dev] Vaulting (Was: Automatically reverting\n> (\"transitory\") soft forks)\n> Message-ID:\n> CAGpPWDaeKYABkK+StFXoxgWEhVGzqY02KPGOFjOtt9W8UPRr1A at mail.gmail.com\n> \n\n> Content-Type: text/plain; charset=\"utf-8\"\n> \n\n> @Matt\n> \n\n> > both of which are somewhat frustrating limitations, but not security\n> \n\n> limitations, only practical ones.\n> \n\n> So I think the first limitation you mentioned (that if your hot wallet's\n> key gets stolen you need) can be legitimately considered a security\n> limitation. Not because you need to rotate your keys, but because you might\n> not know your hot wallet key has been stolen. If you unvault an output to\n> your hot wallet, the thief could be lying in wait, ready to steal those\n> funds upon them landing. At that point, you would then know your hot wallet\n> key was compromised and could rotate your vault keys in order to prevent\n> further theft. However, the fact that there is a clear theft vulnerability\n> is something I would say should be considered a \"security limitation\".\n> \n\n> As you mentioned, this is of course also a security limitation of a hot\n> wallet, so this setup definitely has a lot of advantages over a simple hot\n> wallet. However, if you compare it against a multisig wallet (eg 2 of 3),\n> you can see that while theft of a single key would never result in any\n> theft in that setup, it could in a CTV vault. The other trade offs there\n> are ones of practicality and convenience.\n> \n\n> This isn't to say a CTV vault wouldn't be useful. Just that it has\n> significant trade offs.\n> \n\n> @Russel\n> \n\n> > the original MES vault .. commits to the destination address during\n> \n\n> unvaulting\n> \n\n> I see. Looking at the MES16 paper, OP_COV isn't described clearly enough\n> for me to understand that it does that. However, I can imagine how it\n> might do that.\n> \n\n> One possibility is that the intended destination is predetermined and\n> hardcoded. This wouldn't be very useful, and also wouldn't be different\n> than how CTV could do it, so I assume that isn't what you envisioned this\n> doing.\n> \n\n> I can imagine instead that the definition of the pattern could be specified\n> as a number indicating the number of stack items in the pattern, followed\n> by that number of stack items. If that's how it is done, I can see the user\n> inputting an intended destination script (corresponding to the intended\n> destination address) which would then be somehow rotated in to the right\n> spot within the pattern, allowing the pattern to specify the coins\n> eventually reaching an address with that script. However, this could be\n> quite cumbersome, and would require fully specifying the scripts along the\n> covenant pathways leading to a fair amount of information duplication\n> (since scripts must be specified both in the covenant and in spending the\n> subsequent output). Both of these things would seem to make OP_COV in\n> practice quite an expensive opcode to spend with. It also means that, since\n> the transactor must fully specify the script, its not possible to take\n> advantage of taproot's script hiding capabilities (were it to send to a\n> taproot address).\n> \n\n> However, my assumptions might be incorrect. If you think OP_COV would be a\n> useful opcode, I would encourage you to write up a complete specification.\n> \n\n> > What ways can we build a secured vault that commits to the destination\n> \n\n> address?\n> \n\n> Some kind of passed-through state allows doing this. With OP_COV (if my\n> assumptions above are correct), the intended destination can be passed\n> through the output script pattern(s). With my own proposed\n> op_pushoutputstack\n> https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/pos/bip-pushoutputstack.md,\n> \n\n> state is passed as an attachment on the output more directly. Curious what\n> you think about that proposal.\n> \n\n> > Are there elegant ways of building secure vaults by using CTV plus\n> \n\n> something else.\n> \n\n> Since CTV predefines all the transactions that can happen under its\n> control, passed state like this can't help because any dynamic state would\n> change the template and render the CTV transaction invalid. I don't see any\n> way of solving this problem for CTV.\n> \n\n> I'm curious how you think op_cat could enable this with CTV (other than the\n> cat+schnorr tricks that don't require CTV at all).\n> \n\n> \n\n> \n\n> On Sat, Apr 23, 2022 at 2:31 PM Russell O'Connor via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n\n> > Okay, Matt explained to me the intended application of CTV vaults off\n> > list, so I have a better understanding now.\n> > \n\n> > The CTV vault scheme is designed as an improvement over the traditional\n> > management of hot-wallets and cold-wallets. The CTV vault is logically on\n> > the \"cold-side\" and lets funds be sent from the \"cold\" side to one's own\n> > the hot wallet after the unvaulting delay. In this case, the hot wallet\n> > funds are always at risk, so it isn't unexpected that those funds could be\n> > stolen. After all, that is how hot wallets are today. The advantage is\n> > that funds can be moved from the \"cold\" side without needing to dig out the\n> > cold keys.\n> > \n\n> > The MES vault scheme applies to a different scenario. In the MES case it\n> > is the hot funds are inside the vault, and it is the hot key that unvaults\n> > the funds and sends them to customer's addresses after a delay. If the\n> > hot-key is used in any unauthorised way, then funds can be sent to the\n> > address of the cold key (the MES vault actually does something fancy in\n> > case of recovery, but it could be adapted to simply send funds to a cold\n> > wallet).\n> > \n\n> > The MES vault lie somewhere between \"better\" and \"different\" when compared\n> > to the CTV vault. If one is unwilling to use the MES vault on the hot side\n> > and have every withdrawl vetted, then, while you could use the MES design\n> > on the cold side like the CTV vault, it wouldn't really offer you any\n> > advantages over a CTV vault. However, if you are interested in managing\n> > all your payments through a vault (as I've been imagining) then the CTV\n> > vault comes across as ineffective when compared to an MES style vault.\n> > \n\n> > On Sat, Apr 23, 2022 at 2:24 PM Matt Corallo lf-lists at mattcorallo.com\n> > wrote:\n> > \n\n> > > Still trying to make sure I understand this concern, let me know if I get\n> > > this all wrong.\n> > > \n\n> > > On 4/22/22 10:25 AM, Russell O'Connor via bitcoin-dev wrote:\n> > > \n\n> > > > It's not the attackers only choice to succeed. If an attacker steals\n> > > > the hot key, then they have\n> > > > the option to simply wait for the user to unvault their funds of their\n> > > > own accord and then race /\n> > > > outspend the users transaction with their own. Indeed, this is what we\n> > > > expect would happen in the\n> > > > dark forest.\n> > > \n\n> > > Right, a key security assumption of the CTV-based vaults would be that\n> > > you MUST NOT EVER withdraw\n> > > more in one go than your hot wallet risk tolerance, but given that your\n> > > attack isn't any worse than\n> > > simply stealing the hot wallet key immediately after a withdraw.\n> > > \n\n> > > It does have the drawback that if you ever get a hot wallet key stole you\n> > > have to rotate all of your\n> > > CTV outputs and your CTV outputs must never be any larger than your hot\n> > > wallet risk tolerance\n> > > amount, both of which are somewhat frustrating limitations, but not\n> > > security limitations, only\n> > > practical ones.\n> > > \n\n> > > > And that's not even mentioning the issues already noted by the document\n> > > > regarding fee management,\n> > > > which would likely also benefit from a less constrained design for\n> > > > covenants.\n> > > \n\n> > > Of course I've always been in favor of a less constrained covenants\n> > > design from day one for ten\n> > > reasons, but that's a whole other rabbit hole :)\n> > \n\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 249 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220425/e6f9b337/attachment-0001.sig>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2022-04-27T02:09:03",
                "message_text_only": ">  the hot wallet can only spend a certain amount from the hot wallet spend\nand the rest would .. be sent back\n\nThat would definitely be the way to do it. The ability to steal from the\nhot wallet in my opinion shouldn't really be a \"concern\" about CTV, but\nrather an understood tradeoff of a CTV wallet vault. In fact, its hardly\neven a trade off - a CTV vault can be created that is usable exactly as a\nnormal multisig wallet if the user wants to use it that way. The unvaulting\nwould simply add an additional (and optional) usability improvement over\nnormal multisig. The security considerations around choosing the\nappropriate maximum amount to unvault at a time (with one key) is just\nsomething that someone would need to decide based on basically their\ncomfort level. It sounds like you said something very similar in your point\n2.\n\nWould I like to have a wallet vault that doesn't have this security\nconsideration? Sure. But that isn't to say a wallet vault with that hitch\nisn't a very useful advance to self-custody setups.\n\n> You also get the nice benefit of learning about compromised keys without\nhaving to risk all funds associated with that key.\n\nThis is an interesting tack-on attribute. A built in honey pot. If you only\nallow 1% of your savings to be taken out at a time (with one key), is 1% of\nyour savings worth knowing that your wallet has been partially compromised?\nMaybe it would be.\n\n\n\nOn Mon, Apr 25, 2022 at 11:51 AM Buck O Perley via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Just a couple of comments re-CTV vault security concerns.\n>\n>\n> 1. One way to assuage the concern of the hot wallet vulnerability\n> is pre-program the spends such that the hot wallet can only\n> spend a certain amount from the hot wallet spend and the rest would\n> kind of be \"recursive\" in that it would be sent back to a\n> new instantiation of the CTV vault. I believe kanzure's vaults\n> does this w/ the non-covenant version using pre-signed transactions\n> (https://github.com/kanzure/python-vaults). While this doesn't\n> prevent the theft it caps off the total risk. I would argue that\n> this is strictly better than a multisig because you can also use\n> multisig as you normally would if you want but you have the option\n> if you think your hot key is secure to use that spending path.\n> You also get the nice benefit of learning about compromised\n> keys without having to risk all funds associated with that key.\n>\n>\n> 2. As to how to improve UX for CTV with other proposals, I think\n> you get a lot of benefits when using with taproot because you can\n> use CTV in tapleaves to secure specific spend conditions, but can\n> always fall back to other off-ramps (e.g. a musig key path spend or\n> other script path conditions). Of course you can do this without\n> taproot but taproot makes this more space efficient. This idea has\n> been used to some effect in some recent exploration of how CTV can\n> help improve UX around DLCs. You could even do this to help with\n> the problems of not sending the right amount such that you have a\n> really really cold key or set of keys for example such that if you\n> have UTXOs that have values that can't be spent with the given CTV\n> commitment, then you just use that other branch.\n>\n> - Buck\n>\n> ------- Original Message -------\n>\n> > Date: Sun, 24 Apr 2022 18:03:52 -0500\n> > From: Billy Tetrud billy.tetrud at gmail.com\n> >\n>\n> > To: \"Russell O'Connor\" roconnor at blockstream.com, Bitcoin Protocol\n> >\n>\n> > Discussion bitcoin-dev at lists.linuxfoundation.org\n> >\n>\n> > Subject: Re: [bitcoin-dev] Vaulting (Was: Automatically reverting\n> > (\"transitory\") soft forks)\n> > Message-ID:\n> > CAGpPWDaeKYABkK+StFXoxgWEhVGzqY02KPGOFjOtt9W8UPRr1A at mail.gmail.com\n> >\n>\n> > Content-Type: text/plain; charset=\"utf-8\"\n> >\n>\n> > @Matt\n> >\n>\n> > > both of which are somewhat frustrating limitations, but not security\n> >\n>\n> > limitations, only practical ones.\n> >\n>\n> > So I think the first limitation you mentioned (that if your hot wallet's\n> > key gets stolen you need) can be legitimately considered a security\n> > limitation. Not because you need to rotate your keys, but because you\n> might\n> > not know your hot wallet key has been stolen. If you unvault an output to\n> > your hot wallet, the thief could be lying in wait, ready to steal those\n> > funds upon them landing. At that point, you would then know your hot\n> wallet\n> > key was compromised and could rotate your vault keys in order to prevent\n> > further theft. However, the fact that there is a clear theft\n> vulnerability\n> > is something I would say should be considered a \"security limitation\".\n> >\n>\n> > As you mentioned, this is of course also a security limitation of a hot\n> > wallet, so this setup definitely has a lot of advantages over a simple\n> hot\n> > wallet. However, if you compare it against a multisig wallet (eg 2 of 3),\n> > you can see that while theft of a single key would never result in any\n> > theft in that setup, it could in a CTV vault. The other trade offs there\n> > are ones of practicality and convenience.\n> >\n>\n> > This isn't to say a CTV vault wouldn't be useful. Just that it has\n> > significant trade offs.\n> >\n>\n> > @Russel\n> >\n>\n> > > the original MES vault .. commits to the destination address during\n> >\n>\n> > unvaulting\n> >\n>\n> > I see. Looking at the MES16 paper, OP_COV isn't described clearly enough\n> > for me to understand that it does that. However, I can imagine how it\n> > might do that.\n> >\n>\n> > One possibility is that the intended destination is predetermined and\n> > hardcoded. This wouldn't be very useful, and also wouldn't be different\n> > than how CTV could do it, so I assume that isn't what you envisioned this\n> > doing.\n> >\n>\n> > I can imagine instead that the definition of the pattern could be\n> specified\n> > as a number indicating the number of stack items in the pattern, followed\n> > by that number of stack items. If that's how it is done, I can see the\n> user\n> > inputting an intended destination script (corresponding to the intended\n> > destination address) which would then be somehow rotated in to the right\n> > spot within the pattern, allowing the pattern to specify the coins\n> > eventually reaching an address with that script. However, this could be\n> > quite cumbersome, and would require fully specifying the scripts along\n> the\n> > covenant pathways leading to a fair amount of information duplication\n> > (since scripts must be specified both in the covenant and in spending the\n> > subsequent output). Both of these things would seem to make OP_COV in\n> > practice quite an expensive opcode to spend with. It also means that,\n> since\n> > the transactor must fully specify the script, its not possible to take\n> > advantage of taproot's script hiding capabilities (were it to send to a\n> > taproot address).\n> >\n>\n> > However, my assumptions might be incorrect. If you think OP_COV would be\n> a\n> > useful opcode, I would encourage you to write up a complete\n> specification.\n> >\n>\n> > > What ways can we build a secured vault that commits to the destination\n> >\n>\n> > address?\n> >\n>\n> > Some kind of passed-through state allows doing this. With OP_COV (if my\n> > assumptions above are correct), the intended destination can be passed\n> > through the output script pattern(s). With my own proposed\n> > op_pushoutputstack\n> >\n> https://github.com/fresheneesz/bip-efficient-bitcoin-vaults/blob/main/pos/bip-pushoutputstack.md\n> ,\n> >\n>\n> > state is passed as an attachment on the output more directly. Curious\n> what\n> > you think about that proposal.\n> >\n>\n> > > Are there elegant ways of building secure vaults by using CTV plus\n> >\n>\n> > something else.\n> >\n>\n> > Since CTV predefines all the transactions that can happen under its\n> > control, passed state like this can't help because any dynamic state\n> would\n> > change the template and render the CTV transaction invalid. I don't see\n> any\n> > way of solving this problem for CTV.\n> >\n>\n> > I'm curious how you think op_cat could enable this with CTV (other than\n> the\n> > cat+schnorr tricks that don't require CTV at all).\n> >\n>\n> >\n>\n> >\n>\n> > On Sat, Apr 23, 2022 at 2:31 PM Russell O'Connor via bitcoin-dev <\n> > bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n>\n> > > Okay, Matt explained to me the intended application of CTV vaults off\n> > > list, so I have a better understanding now.\n> > >\n>\n> > > The CTV vault scheme is designed as an improvement over the traditional\n> > > management of hot-wallets and cold-wallets. The CTV vault is logically\n> on\n> > > the \"cold-side\" and lets funds be sent from the \"cold\" side to one's\n> own\n> > > the hot wallet after the unvaulting delay. In this case, the hot wallet\n> > > funds are always at risk, so it isn't unexpected that those funds\n> could be\n> > > stolen. After all, that is how hot wallets are today. The advantage is\n> > > that funds can be moved from the \"cold\" side without needing to dig\n> out the\n> > > cold keys.\n> > >\n>\n> > > The MES vault scheme applies to a different scenario. In the MES case\n> it\n> > > is the hot funds are inside the vault, and it is the hot key that\n> unvaults\n> > > the funds and sends them to customer's addresses after a delay. If the\n> > > hot-key is used in any unauthorised way, then funds can be sent to the\n> > > address of the cold key (the MES vault actually does something fancy in\n> > > case of recovery, but it could be adapted to simply send funds to a\n> cold\n> > > wallet).\n> > >\n>\n> > > The MES vault lie somewhere between \"better\" and \"different\" when\n> compared\n> > > to the CTV vault. If one is unwilling to use the MES vault on the hot\n> side\n> > > and have every withdrawl vetted, then, while you could use the MES\n> design\n> > > on the cold side like the CTV vault, it wouldn't really offer you any\n> > > advantages over a CTV vault. However, if you are interested in managing\n> > > all your payments through a vault (as I've been imagining) then the CTV\n> > > vault comes across as ineffective when compared to an MES style vault.\n> > >\n>\n> > > On Sat, Apr 23, 2022 at 2:24 PM Matt Corallo lf-lists at mattcorallo.com\n> > > wrote:\n> > >\n>\n> > > > Still trying to make sure I understand this concern, let me know if\n> I get\n> > > > this all wrong.\n> > > >\n>\n> > > > On 4/22/22 10:25 AM, Russell O'Connor via bitcoin-dev wrote:\n> > > >\n>\n> > > > > It's not the attackers only choice to succeed. If an attacker\n> steals\n> > > > > the hot key, then they have\n> > > > > the option to simply wait for the user to unvault their funds of\n> their\n> > > > > own accord and then race /\n> > > > > outspend the users transaction with their own. Indeed, this is\n> what we\n> > > > > expect would happen in the\n> > > > > dark forest.\n> > > >\n>\n> > > > Right, a key security assumption of the CTV-based vaults would be\n> that\n> > > > you MUST NOT EVER withdraw\n> > > > more in one go than your hot wallet risk tolerance, but given that\n> your\n> > > > attack isn't any worse than\n> > > > simply stealing the hot wallet key immediately after a withdraw.\n> > > >\n>\n> > > > It does have the drawback that if you ever get a hot wallet key\n> stole you\n> > > > have to rotate all of your\n> > > > CTV outputs and your CTV outputs must never be any larger than your\n> hot\n> > > > wallet risk tolerance\n> > > > amount, both of which are somewhat frustrating limitations, but not\n> > > > security limitations, only\n> > > > practical ones.\n> > > >\n>\n> > > > > And that's not even mentioning the issues already noted by the\n> document\n> > > > > regarding fee management,\n> > > > > which would likely also benefit from a less constrained design for\n> > > > > covenants.\n> > > >\n>\n> > > > Of course I've always been in favor of a less constrained covenants\n> > > > design from day one for ten\n> > > > reasons, but that's a whole other rabbit hole :)\n> > >\n>\n> > > _______________________________________________\n> > > bitcoin-dev mailing list\n> > > bitcoin-dev at lists.linuxfoundation.org\n> > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220426/ad1ab383/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Vaulting (Was: Automatically reverting (\"transitory\") > soft forks)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Buck O Perley",
                "Billy Tetrud"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 22690
        }
    },
    {
        "title": "[bitcoin-dev] CTV, covenants and vaults (was: : Re:  ANYPREVOUT in place of CTV)",
        "thread_messages": [
            {
                "author": "darosior",
                "date": "2022-04-26T10:20:04",
                "message_text_only": "> > i doubt CTV is necessary nor sufficient for this\n\n> I would be interested to hear more on this.\n\nA lot of people have been conflating vaults and covenants, especially lately. I believe we should\ndifferentiate more Bitcoin vaults, a scheme that defines a \"staged transaction process\" [0], and Bitcoin\ncovenants. I find that there was a lot of confusion spread around that. Everything was a vault, from the\nmarketing of a mobile wallet with a 2of3 account to a covenant scheme. ( :)\nIt led to the confusion that a Bitcoin covenant would be necessary in order to have a Bitcoin vault. It's\nincorrect: https://github.com/revault/practical-revault/blob/master/introduction.md (or [1], but albeit pretty\nclever, i don't think it's practical).\n\nNow, CTV is useful for Bitcoin vaults. For instance i believe it's useful to pre-commit to a Cancel\ntransaction directly in the Unvault Script. This matters a lot as today you need to be sure that your\nwatchtowers (or any other network monitor) have had the Cancel transaction signature of all participants in\nthe vault before you sign the Unvault transaction.\nA covenant, as simple as CTV, fixes this. It makes sure that not only any Unvault you sign can be Canceled,\nbut also that when you spin up a new watchtower you don't need to send to it all the signatures for all the\ncurrent vaults. Of course you'd want to add some secret here to avoid the annoyance of all your Unvaults being\nable to be canceled by some rando on the network. But you can derive them from a secret shared only once.\nAlso on the topic of reducing interactivity, i think that CTV or another more powerful covenants that allows\nto commit to all parts of a transaction (for malleability) can be useful for the complicated issue of fee\nbumping [2].\n\nHowever, it's not sufficient. You are not going to be able to receive coins on a CTV that commits to the\nUnvault (whose output would commit to either the Cancel immediately, or something else after a delay). It\nwould be an enormous footgun. For this, i believe something like TLUV with IN_OUT_AMOUNT [3] is a much more\ninteresting direction.\nFurthermore, committing entirely to the withdrawal amounts in advance is very impractical. It is the one\nlargest UX barrier in my opinion. Users don't think in coins, but in amount to transfer. In order to have an\nalmost decent UX you would have to prepare a first stage transaction that creates a nice (what is nice? It's\nvery hard to reason about) distribution of coin amounts. This is a big tradeoff between usability and cost\n(granularity). Of course it's not new to CTV, It's an issue today with Revault. It's just a problem faced by\ntoday's implementation(s) (i don't know of any other \"real\" vault implementation) of Bitcoin vaults that CTV\ndoes not solve.\nI realise that you might not care to receive coins on a single-sig Script and have a vaulting step in a\nsingle-party situation. I guess i just think vaults are more interesting in organisational situations, where a\nset of participants only marginally trust another one (that may be a subset) and want to both limit the amount\nthey have access to and apply policies on how they would use the funds.\n\nAntoine\n\n[0] All vaults architectures i know of are characterized by the necessity to unlock the funds in multiple\nstages, one of which is timelocked.\n[1] https://arxiv.org/abs/2005.11776\n[2] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020122.html[3] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019419.html\n\n------- Original Message -------\nLe lundi 25 avril 2022 \u00e0 6:57 PM, Nadav Ivgi <nadav at shesek.info> a \u00e9crit :\n\n> darosior via bitcoin-dev wrote:> i doubt CTV is necessary nor sufficient for this\n>\n> I would be interested to hear more on this.\n>\n> Is it not necessary because you can exchange and store pre-signed transactions instead?\n>\n> What purpose is it not sufficient for? There are some vault designs out there that are able to achieve interesting properties with CTV, like James O'Beirne's simple-ctv-vault:\n>\n> https://github.com/jamesob/simple-ctv-vault\n> (the basic design expressed in Minsc: https://min.sc/nextc/#gist=001cf1fcb0e24ca9f3614c4db9bfe57d:4)\n>\n> On Fri, Apr 22, 2022 at 2:23 PM darosior via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> I would like to know people's sentiment about doing (a very slightly tweaked version of) BIP118 in place of\n>> (or before doing) BIP119.\n>>\n>> SIGHASH_ANYPREVOUT and its precedent iterations have been discussed for over 6 years. It presents proven and\n>> implemented usecases, that are demanded and (please someone correct me if i'm wrong) more widely accepted than\n>> CTV's.\n>>\n>> SIGHASH_ANYPREVOUTANYSCRIPT, if its \"ANYONECANPAY\" behaviour is made optional [0], can emulate CTV just fine.\n>> Sure then you can't have bare or Segwit v0 CTV, and it's a bit more expensive to use. But we can consider CTV\n>> an optimization of APO-AS covenants.\n>>\n>> CTV advocates have been presenting vaults as the flagship usecase. Although as someone who've been trying to\n>> implement practical vaults for the past 2 years i doubt CTV is necessary nor sufficient for this (but still\n>> useful!), using APO-AS covers it. And it's not a couple dozen more virtual bytes that are going to matter for\n>> a potential vault user.\n>>\n>> If after some time all of us who are currently dubious about CTV's stated usecases are proven wrong by onchain\n>> usage of a less efficient construction to achieve the same goal, we could roll-out CTV as an optimization. In\n>> the meantime others will have been able to deploy new applications leveraging ANYPREVOUT (Eltoo, blind\n>> statechains, etc..[1]).\n>>\n>> Given the interest in, and demand for, both simple covenants and better offchain protocols it seems to me that\n>> BIP118 is a soft fork candidate that could benefit more (if not most of) Bitcoin users.\n>> Actually i'd also be interested in knowing if people would oppose the APO-AS part of BIP118, since it enables\n>> CTV's features, for the same reason they'd oppose BIP119.\n>>\n>> [0] That is, to not commit to the other inputs of the transaction (via `sha_sequences` and maybe also\n>> `sha_amounts`). Cf https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#signature-message.\n>>\n>> [1] https://anyprevout.xyz/ \"Use Cases\" section\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220426/0c24b9fb/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "CTV, covenants and vaults (was: : Re:  ANYPREVOUT in place of CTV)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "darosior"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 6709
        }
    },
    {
        "title": "[bitcoin-dev] Towards a means of measuring user support for Soft Forks",
        "thread_messages": [
            {
                "author": "Keagan McClelland",
                "date": "2022-04-26T19:37:07",
                "message_text_only": "Hi all,\n\nAlongside the debate with CTV right now there's a second debate that was\nnot fully hashed out in the activation of Taproot. There is a lot of\nargument around what Speedy Trial is or isn't, what BIP8 T/F is or isn't\netc. A significant reason for the breakdown in civility around this debate\nis that because we don't have a means of measuring user support for\nproposed sof-fork changes, it invariably devolves into people claiming that\ntheir circles support/reject a proposal, AND that their circles are more\nbroadly representative of the set of Bitcoin users as a whole.\n\nIt seems everyone in this forum has at one point or another said \"I would\nsupport activation of ____ if there was consensus on it, but there isn't\".\nThis statement, in order to be true, requires that there exist a set of\nconditions that would convince you that there is consensus. People have\ntried to dodge this question by saying \"it's obvious\", but the reality is\nthat it fundamentally isn't. My bubble has a different \"obvious\" answer\nthan any of yours.\n\nSecondly, due to the trauma of the block size wars, no one wants to utter a\nstatement that could imply that miners have any influence over what\nrulesets get activated or don't. As such \"miner signaling\" is consistently\ndevalued as a signal for market demand. I don't think this is reasonable\nsince following the events of '17  miners are aware that they have the\nstrong incentive that they understand market demand. Nevertheless, as it\nstands right now the only signal we have to work with is miner signaling,\nwhich I think is rightly frustrating to a lot of people.\n\nSo how can we measure User Support for a proposed rule change?\n\nI've had this idea floating around in the back of my head for a while, and\nI'd like to solicit some feedback here. Currently, all forms of activation\nthat are under consideration involve miner signaling in one form or\nanother. What if we could make it such that users could more directly\npressure miners to act on their behalf? After all, if miners are but the\nhumble servants of user demands, this should be in alignment with how\npeople want Bitcoin to behave.\n\nCurrently, the only means users have of influencing miner decisions are A.\nrejection of blocks that don't follow rules and B. paying fees for\ntransaction inclusion. I suggest we combine these in such a way that\ntransactions themselves can signal for upgrade. I believe (though am not\ncertain) that there are \"free\" bits in the version field of a transaction\nthat are presently ignored. If we could devise a mapping between some of\nthose free bits, and the signaling bits in the block header, it would be\npossible to have rules as follows:\n\n- A transaction signaling in the affirmative MUST NOT be included in a\nblock that does not signal in the affirmative\n- A transaction that is NOT signaling MAY be included in a block regardless\nof that block's signaling vector\n- (Optional) A transaction signaling in the negative MUST NOT be included\nin a block that signals in the affirmative\n\nUnder this set of conditions, a user has the means of sybil-resistant\ninfluence over miner decisions. If a miner cannot collect the fees for a\ntransaction without signaling, the user's fee becomes active economic\npressure for the miner to signal (or not, if we include some variant of the\nnegative clause). In this environment, miners could have a better view into\nwhat users do want, as would the Bitcoin network at large.\n\nSome may take issue with the idea that people can pay for the outcome they\nwant and may try to compare a method like this to Proof of Stake, but there\nare only 3 sybil resistant mechanisms I am aware of, and any \"real\" view\ninto what social consensus looks like MUST be sybil resistant:\n\n- Hashpower\n- Proof of personhood (KYC)\n- Capital burn/risk\n\nLetting hashpower decide this is the thing that is currently contentious,\nKYC is dead on arrival both on technical and social grounds, which really\njust leaves some means of getting capital into the process of consensus\nmeasurement. This mechanism I'm proposing is measurable completely\nen-protocol and doesn't require trust in institutions that fork futures\nwould. Additionally it could be an auxiliary feature of the soft fork\ndeployment scheme chosen making it something you could neatly package all\ntogether with the deployment itself.\n\nThere are many potential tweaks to the design I propose above:\n1. Do we include a notion of negative signaling (allowing for the\npossibility of rejection)\n2. Do we make it such that miner signaling must be congruent with >X% of\ntransactions, where congruence is that the signal must match any\nnon-neutral signal of transaction.\n\nSome anticipated objections:\n\n1. signaling isn't voting, no deployment should be made without consensus\nfirst.\n- yeah well we can't currently measure consensus right now, so that's not a\nsuper helpful thing to say and is breeding ground for abuse in the form of\ncertain people making the unsubstantiated claim that consensus does or does\nnot exist for a particular initiative\n\n2. This is just a proposal for \"pay to play\", we should not let the wealthy\nmake consensus decisions.\n- I agree that wealth should not be able to strong-arm decision making. But\nthe status quo seems even worse where we let publicly influential people\ndecide consensus in such a way where not only do they not \"lose ammunition\"\nin the process of campaigning, but actually accrue it, creating really bad\nlong-term balances of power.\n\n3. Enforcing this proposal requires its own soft fork.\n- Yes. It does...and there's a certain cosmic irony to that, but before we\nconsider how to make this happen, I'd like to even discuss whether or not\nit's a good idea.\n\n4. This gives CoinJoin pool operators and L2 protocol implementations power\nover deciding consensus.\n- I see this as an improvement over the status quo\n\n5. This encourages \"spam\"\n- If you pay the fees, it's not spam.\n\nThe biggest question I'd like to pose to the forum is:\n- Does a scheme like this afford us a better view into consensus than we\nhave today?\n- Can it be gamed to give us a *worse* view into consensus? How?\n- Does it measure the right thing? If not, what do you think is the right\nthing to measure? (assuming we could)\n- Should I write a BIP spec'ing this out in detail?\n\nCheers,\nKeagan\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220426/f3d1f2bf/attachment.html>"
            },
            {
                "author": "Bryan Bishop",
                "date": "2022-04-26T20:39:44",
                "message_text_only": "You may be interested in these posts on transaction signalling:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014193.html\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014202.html\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014251.html\n\n\nOn Tue, Apr 26, 2022 at 3:12 PM Keagan McClelland via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi all,\n>\n> Alongside the debate with CTV right now there's a second debate that was\n> not fully hashed out in the activation of Taproot. There is a lot of\n> argument around what Speedy Trial is or isn't, what BIP8 T/F is or isn't\n> etc. A significant reason for the breakdown in civility around this debate\n> is that because we don't have a means of measuring user support for\n> proposed sof-fork changes, it invariably devolves into people claiming that\n> their circles support/reject a proposal, AND that their circles are more\n> broadly representative of the set of Bitcoin users as a whole.\n>\n> It seems everyone in this forum has at one point or another said \"I would\n> support activation of ____ if there was consensus on it, but there isn't\".\n> This statement, in order to be true, requires that there exist a set of\n> conditions that would convince you that there is consensus. People have\n> tried to dodge this question by saying \"it's obvious\", but the reality is\n> that it fundamentally isn't. My bubble has a different \"obvious\" answer\n> than any of yours.\n>\n> Secondly, due to the trauma of the block size wars, no one wants to utter\n> a statement that could imply that miners have any influence over what\n> rulesets get activated or don't. As such \"miner signaling\" is consistently\n> devalued as a signal for market demand. I don't think this is reasonable\n> since following the events of '17  miners are aware that they have the\n> strong incentive that they understand market demand. Nevertheless, as it\n> stands right now the only signal we have to work with is miner signaling,\n> which I think is rightly frustrating to a lot of people.\n>\n> So how can we measure User Support for a proposed rule change?\n>\n> I've had this idea floating around in the back of my head for a while, and\n> I'd like to solicit some feedback here. Currently, all forms of activation\n> that are under consideration involve miner signaling in one form or\n> another. What if we could make it such that users could more directly\n> pressure miners to act on their behalf? After all, if miners are but the\n> humble servants of user demands, this should be in alignment with how\n> people want Bitcoin to behave.\n>\n> Currently, the only means users have of influencing miner decisions are A.\n> rejection of blocks that don't follow rules and B. paying fees for\n> transaction inclusion. I suggest we combine these in such a way that\n> transactions themselves can signal for upgrade. I believe (though am not\n> certain) that there are \"free\" bits in the version field of a transaction\n> that are presently ignored. If we could devise a mapping between some of\n> those free bits, and the signaling bits in the block header, it would be\n> possible to have rules as follows:\n>\n> - A transaction signaling in the affirmative MUST NOT be included in a\n> block that does not signal in the affirmative\n> - A transaction that is NOT signaling MAY be included in a block\n> regardless of that block's signaling vector\n> - (Optional) A transaction signaling in the negative MUST NOT be included\n> in a block that signals in the affirmative\n>\n> Under this set of conditions, a user has the means of sybil-resistant\n> influence over miner decisions. If a miner cannot collect the fees for a\n> transaction without signaling, the user's fee becomes active economic\n> pressure for the miner to signal (or not, if we include some variant of the\n> negative clause). In this environment, miners could have a better view into\n> what users do want, as would the Bitcoin network at large.\n>\n> Some may take issue with the idea that people can pay for the outcome they\n> want and may try to compare a method like this to Proof of Stake, but there\n> are only 3 sybil resistant mechanisms I am aware of, and any \"real\" view\n> into what social consensus looks like MUST be sybil resistant:\n>\n> - Hashpower\n> - Proof of personhood (KYC)\n> - Capital burn/risk\n>\n> Letting hashpower decide this is the thing that is currently contentious,\n> KYC is dead on arrival both on technical and social grounds, which really\n> just leaves some means of getting capital into the process of consensus\n> measurement. This mechanism I'm proposing is measurable completely\n> en-protocol and doesn't require trust in institutions that fork futures\n> would. Additionally it could be an auxiliary feature of the soft fork\n> deployment scheme chosen making it something you could neatly package all\n> together with the deployment itself.\n>\n> There are many potential tweaks to the design I propose above:\n> 1. Do we include a notion of negative signaling (allowing for the\n> possibility of rejection)\n> 2. Do we make it such that miner signaling must be congruent with >X% of\n> transactions, where congruence is that the signal must match any\n> non-neutral signal of transaction.\n>\n> Some anticipated objections:\n>\n> 1. signaling isn't voting, no deployment should be made without consensus\n> first.\n> - yeah well we can't currently measure consensus right now, so that's not\n> a super helpful thing to say and is breeding ground for abuse in the form\n> of certain people making the unsubstantiated claim that consensus does or\n> does not exist for a particular initiative\n>\n> 2. This is just a proposal for \"pay to play\", we should not let the\n> wealthy make consensus decisions.\n> - I agree that wealth should not be able to strong-arm decision making.\n> But the status quo seems even worse where we let publicly influential\n> people decide consensus in such a way where not only do they not \"lose\n> ammunition\" in the process of campaigning, but actually accrue it, creating\n> really bad long-term balances of power.\n>\n> 3. Enforcing this proposal requires its own soft fork.\n> - Yes. It does...and there's a certain cosmic irony to that, but before we\n> consider how to make this happen, I'd like to even discuss whether or not\n> it's a good idea.\n>\n> 4. This gives CoinJoin pool operators and L2 protocol implementations\n> power over deciding consensus.\n> - I see this as an improvement over the status quo\n>\n> 5. This encourages \"spam\"\n> - If you pay the fees, it's not spam.\n>\n> The biggest question I'd like to pose to the forum is:\n> - Does a scheme like this afford us a better view into consensus than we\n> have today?\n> - Can it be gamed to give us a *worse* view into consensus? How?\n> - Does it measure the right thing? If not, what do you think is the right\n> thing to measure? (assuming we could)\n> - Should I write a BIP spec'ing this out in detail?\n>\n> Cheers,\n> Keagan\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n-- \n- Bryan\nhttps://twitter.com/kanzure\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220426/64c2013e/attachment.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2022-04-27T03:04:04",
                "message_text_only": ">   A transaction signaling in the affirmative MUST NOT be included in a\nblock that does not signal in the affirmative\n\nI feel like I've heard this idea somewhere before. Its an interesting idea.\n\nIt should be noted that there is a consequence of this: holders wouldn't\nhave much say. People that transact a lot (or happen to be transacting a\nlot during the signaling time period) would have a very disproportionate\nability to pressure miners than people who aren't transacting much. This\nwould probably be a pretty good proxy for future mining revenue that\nsupports (or is against) a particular thing. However, the network does do\nmore than just transact, so I would be a bit worried that such a mechanism\nwould bias the system towards things that are good for transactors and bad\nfor holders. Things like more coin inflation, larger blocks, etc.\n\nAnother consideration is that miners are already incentivized to follow the\nmoney here. Adding an *additional* incentive might be distorting the\nmarket, so to speak.\n\nAn alternative I proposed was a way to do weighted polling of holders:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020146.html\n\nThe polling wouldn't be directly connected to the activation mechanism in\nany way, but would just be a mechanism to gauge some portion of consensus.\nIf enough people were involved, theoretically it could be hooked up to\nactivation, but I would be pretty wary of doing that directly as well.\n\n> we should not let the wealthy make consensus decisions.\n\nWe shouldn't let the wealthy continue to control our governments. However,\nbitcoin is not a government. Its a financial network. The fact of the\nmatter is that fundamentally, the economic majority controls where the\nchain goes. Its very likely that the wealthy are disproportionately\nrepresented in the economic majority. Attempting to subvert the economic\nmajority seems like a bad idea. The reality of control there will come out\none way or another, and being honest about it is probably the best way to\navoid major schisms in the future.\n\n> Does a scheme like this afford us a better view into consensus than we\nhave today?\n\nIt does more than provide a view. It directly changes the game theory\naround how activation works. If we wanted to simply get a better view into\nconsensus, we could allow the same thing, but allow any block to mine any\ntransaction regardless of transaction signaling. Then it would be more\npurely informational.\n\n> Can it be gamed to give us a *worse* view into consensus? How?\n> Does it measure the right thing? If not, what do you think is the right\nthing to measure?\n\nDoesn't seem like it could be gamed, but as I mentioned above, the honest\nmechanics of it might be themselves undesirably distorting.\n\n\n\nOn Tue, Apr 26, 2022 at 3:49 PM Bryan Bishop via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> You may be interested in these posts on transaction signalling:\n>\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014193.html\n>\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014202.html\n>\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014251.html\n>\n>\n> On Tue, Apr 26, 2022 at 3:12 PM Keagan McClelland via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi all,\n>>\n>> Alongside the debate with CTV right now there's a second debate that was\n>> not fully hashed out in the activation of Taproot. There is a lot of\n>> argument around what Speedy Trial is or isn't, what BIP8 T/F is or isn't\n>> etc. A significant reason for the breakdown in civility around this debate\n>> is that because we don't have a means of measuring user support for\n>> proposed sof-fork changes, it invariably devolves into people claiming that\n>> their circles support/reject a proposal, AND that their circles are more\n>> broadly representative of the set of Bitcoin users as a whole.\n>>\n>> It seems everyone in this forum has at one point or another said \"I would\n>> support activation of ____ if there was consensus on it, but there isn't\".\n>> This statement, in order to be true, requires that there exist a set of\n>> conditions that would convince you that there is consensus. People have\n>> tried to dodge this question by saying \"it's obvious\", but the reality is\n>> that it fundamentally isn't. My bubble has a different \"obvious\" answer\n>> than any of yours.\n>>\n>> Secondly, due to the trauma of the block size wars, no one wants to utter\n>> a statement that could imply that miners have any influence over what\n>> rulesets get activated or don't. As such \"miner signaling\" is consistently\n>> devalued as a signal for market demand. I don't think this is reasonable\n>> since following the events of '17  miners are aware that they have the\n>> strong incentive that they understand market demand. Nevertheless, as it\n>> stands right now the only signal we have to work with is miner signaling,\n>> which I think is rightly frustrating to a lot of people.\n>>\n>> So how can we measure User Support for a proposed rule change?\n>>\n>> I've had this idea floating around in the back of my head for a while,\n>> and I'd like to solicit some feedback here. Currently, all forms of\n>> activation that are under consideration involve miner signaling in one form\n>> or another. What if we could make it such that users could more directly\n>> pressure miners to act on their behalf? After all, if miners are but the\n>> humble servants of user demands, this should be in alignment with how\n>> people want Bitcoin to behave.\n>>\n>> Currently, the only means users have of influencing miner decisions are\n>> A. rejection of blocks that don't follow rules and B. paying fees for\n>> transaction inclusion. I suggest we combine these in such a way that\n>> transactions themselves can signal for upgrade. I believe (though am not\n>> certain) that there are \"free\" bits in the version field of a transaction\n>> that are presently ignored. If we could devise a mapping between some of\n>> those free bits, and the signaling bits in the block header, it would be\n>> possible to have rules as follows:\n>>\n>> - A transaction signaling in the affirmative MUST NOT be included in a\n>> block that does not signal in the affirmative\n>> - A transaction that is NOT signaling MAY be included in a block\n>> regardless of that block's signaling vector\n>> - (Optional) A transaction signaling in the negative MUST NOT be included\n>> in a block that signals in the affirmative\n>>\n>> Under this set of conditions, a user has the means of sybil-resistant\n>> influence over miner decisions. If a miner cannot collect the fees for a\n>> transaction without signaling, the user's fee becomes active economic\n>> pressure for the miner to signal (or not, if we include some variant of the\n>> negative clause). In this environment, miners could have a better view into\n>> what users do want, as would the Bitcoin network at large.\n>>\n>> Some may take issue with the idea that people can pay for the outcome\n>> they want and may try to compare a method like this to Proof of Stake, but\n>> there are only 3 sybil resistant mechanisms I am aware of, and any \"real\"\n>> view into what social consensus looks like MUST be sybil resistant:\n>>\n>> - Hashpower\n>> - Proof of personhood (KYC)\n>> - Capital burn/risk\n>>\n>> Letting hashpower decide this is the thing that is currently contentious,\n>> KYC is dead on arrival both on technical and social grounds, which really\n>> just leaves some means of getting capital into the process of consensus\n>> measurement. This mechanism I'm proposing is measurable completely\n>> en-protocol and doesn't require trust in institutions that fork futures\n>> would. Additionally it could be an auxiliary feature of the soft fork\n>> deployment scheme chosen making it something you could neatly package all\n>> together with the deployment itself.\n>>\n>> There are many potential tweaks to the design I propose above:\n>> 1. Do we include a notion of negative signaling (allowing for the\n>> possibility of rejection)\n>> 2. Do we make it such that miner signaling must be congruent with >X% of\n>> transactions, where congruence is that the signal must match any\n>> non-neutral signal of transaction.\n>>\n>> Some anticipated objections:\n>>\n>> 1. signaling isn't voting, no deployment should be made without consensus\n>> first.\n>> - yeah well we can't currently measure consensus right now, so that's not\n>> a super helpful thing to say and is breeding ground for abuse in the form\n>> of certain people making the unsubstantiated claim that consensus does or\n>> does not exist for a particular initiative\n>>\n>> 2. This is just a proposal for \"pay to play\", we should not let the\n>> wealthy make consensus decisions.\n>> - I agree that wealth should not be able to strong-arm decision making.\n>> But the status quo seems even worse where we let publicly influential\n>> people decide consensus in such a way where not only do they not \"lose\n>> ammunition\" in the process of campaigning, but actually accrue it, creating\n>> really bad long-term balances of power.\n>>\n>> 3. Enforcing this proposal requires its own soft fork.\n>> - Yes. It does...and there's a certain cosmic irony to that, but before\n>> we consider how to make this happen, I'd like to even discuss whether or\n>> not it's a good idea.\n>>\n>> 4. This gives CoinJoin pool operators and L2 protocol implementations\n>> power over deciding consensus.\n>> - I see this as an improvement over the status quo\n>>\n>> 5. This encourages \"spam\"\n>> - If you pay the fees, it's not spam.\n>>\n>> The biggest question I'd like to pose to the forum is:\n>> - Does a scheme like this afford us a better view into consensus than we\n>> have today?\n>> - Can it be gamed to give us a *worse* view into consensus? How?\n>> - Does it measure the right thing? If not, what do you think is the right\n>> thing to measure? (assuming we could)\n>> - Should I write a BIP spec'ing this out in detail?\n>>\n>> Cheers,\n>> Keagan\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> --\n> - Bryan\n> https://twitter.com/kanzure\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220426/6f7eba77/attachment-0001.html>"
            },
            {
                "author": "Chris Riley",
                "date": "2022-04-27T14:01:57",
                "message_text_only": ">> we should not let the wealthy make consensus decisions.\n\n>We shouldn't let the wealthy continue to control our governments. However,\nbitcoin is not a government. Its a financial network.\n>The fact of the matter is that fundamentally, the economic majority\ncontrols where the chain goes. Its very likely that the wealthy\n>are disproportionately represented in the economic majority. Attempting to\nsubvert the economic majority seems like a bad idea.\n>The reality of control there will come out one way or another, and being\nhonest about it is probably the best way to avoid major schisms in the\nfuture.\n\nYes, the economic majority is important:  Who else has more incentive to\nprotect the security and thus the value embodied in the network than people\nwho have invested money and time in the network?  A group of people with\n1/10/100/1000 bitcoins each has more economic incentive to do so than a\nsimilar sized group with 1/10/100/1000 satoshis each.  Likewise, it is\nsignificantly easier to mobilize 1 million people \"voting\" with 100\nsatoshis each - a total of 1 BTC -  vs 10000 people each voting with 100\nbitcoins each - a total of 1 million BTC.  I don't think anyone would say\nthat even if those 1 million people, for example, thought that we should\nincrease the number of bitcoins via perpetual inflation it would be a good\nidea to listen to it however the vote was done whether via transaction\nflags or something else.  Of course they could fork off.\n\nCheers,    :-)\nChris\n\n\n\n\n\nOn Wed, Apr 27, 2022 at 4:11 AM Billy Tetrud via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> >   A transaction signaling in the affirmative MUST NOT be included in a\n> block that does not signal in the affirmative\n>\n> I feel like I've heard this idea somewhere before. Its an interesting\n> idea.\n>\n> It should be noted that there is a consequence of this: holders wouldn't\n> have much say. People that transact a lot (or happen to be transacting a\n> lot during the signaling time period) would have a very disproportionate\n> ability to pressure miners than people who aren't transacting much. This\n> would probably be a pretty good proxy for future mining revenue that\n> supports (or is against) a particular thing. However, the network does do\n> more than just transact, so I would be a bit worried that such a mechanism\n> would bias the system towards things that are good for transactors and bad\n> for holders. Things like more coin inflation, larger blocks, etc.\n>\n> Another consideration is that miners are already incentivized to follow\n> the money here. Adding an *additional* incentive might be distorting the\n> market, so to speak.\n>\n> An alternative I proposed was a way to do weighted polling of holders:\n>\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020146.html\n>\n> The polling wouldn't be directly connected to the activation mechanism in\n> any way, but would just be a mechanism to gauge some portion of consensus.\n> If enough people were involved, theoretically it could be hooked up to\n> activation, but I would be pretty wary of doing that directly as well.\n>\n> > we should not let the wealthy make consensus decisions.\n>\n> We shouldn't let the wealthy continue to control our governments. However,\n> bitcoin is not a government. Its a financial network. The fact of the\n> matter is that fundamentally, the economic majority controls where the\n> chain goes. Its very likely that the wealthy are disproportionately\n> represented in the economic majority. Attempting to subvert the economic\n> majority seems like a bad idea. The reality of control there will come out\n> one way or another, and being honest about it is probably the best way to\n> avoid major schisms in the future.\n>\n> > Does a scheme like this afford us a better view into consensus than we\n> have today?\n>\n> It does more than provide a view. It directly changes the game theory\n> around how activation works. If we wanted to simply get a better view into\n> consensus, we could allow the same thing, but allow any block to mine any\n> transaction regardless of transaction signaling. Then it would be more\n> purely informational.\n>\n> > Can it be gamed to give us a *worse* view into consensus? How?\n> > Does it measure the right thing? If not, what do you think is the right\n> thing to measure?\n>\n> Doesn't seem like it could be gamed, but as I mentioned above, the honest\n> mechanics of it might be themselves undesirably distorting.\n>\n>\n>\n> On Tue, Apr 26, 2022 at 3:49 PM Bryan Bishop via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> You may be interested in these posts on transaction signalling:\n>>\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014193.html\n>>\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014202.html\n>>\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014251.html\n>>\n>>\n>> On Tue, Apr 26, 2022 at 3:12 PM Keagan McClelland via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> Hi all,\n>>>\n>>> Alongside the debate with CTV right now there's a second debate that was\n>>> not fully hashed out in the activation of Taproot. There is a lot of\n>>> argument around what Speedy Trial is or isn't, what BIP8 T/F is or isn't\n>>> etc. A significant reason for the breakdown in civility around this debate\n>>> is that because we don't have a means of measuring user support for\n>>> proposed sof-fork changes, it invariably devolves into people claiming that\n>>> their circles support/reject a proposal, AND that their circles are more\n>>> broadly representative of the set of Bitcoin users as a whole.\n>>>\n>>> It seems everyone in this forum has at one point or another said \"I\n>>> would support activation of ____ if there was consensus on it, but there\n>>> isn't\". This statement, in order to be true, requires that there exist a\n>>> set of conditions that would convince you that there is consensus. People\n>>> have tried to dodge this question by saying \"it's obvious\", but the reality\n>>> is that it fundamentally isn't. My bubble has a different \"obvious\" answer\n>>> than any of yours.\n>>>\n>>> Secondly, due to the trauma of the block size wars, no one wants to\n>>> utter a statement that could imply that miners have any influence over what\n>>> rulesets get activated or don't. As such \"miner signaling\" is consistently\n>>> devalued as a signal for market demand. I don't think this is reasonable\n>>> since following the events of '17  miners are aware that they have the\n>>> strong incentive that they understand market demand. Nevertheless, as it\n>>> stands right now the only signal we have to work with is miner signaling,\n>>> which I think is rightly frustrating to a lot of people.\n>>>\n>>> So how can we measure User Support for a proposed rule change?\n>>>\n>>> I've had this idea floating around in the back of my head for a while,\n>>> and I'd like to solicit some feedback here. Currently, all forms of\n>>> activation that are under consideration involve miner signaling in one form\n>>> or another. What if we could make it such that users could more directly\n>>> pressure miners to act on their behalf? After all, if miners are but the\n>>> humble servants of user demands, this should be in alignment with how\n>>> people want Bitcoin to behave.\n>>>\n>>> Currently, the only means users have of influencing miner decisions are\n>>> A. rejection of blocks that don't follow rules and B. paying fees for\n>>> transaction inclusion. I suggest we combine these in such a way that\n>>> transactions themselves can signal for upgrade. I believe (though am not\n>>> certain) that there are \"free\" bits in the version field of a transaction\n>>> that are presently ignored. If we could devise a mapping between some of\n>>> those free bits, and the signaling bits in the block header, it would be\n>>> possible to have rules as follows:\n>>>\n>>> - A transaction signaling in the affirmative MUST NOT be included in a\n>>> block that does not signal in the affirmative\n>>> - A transaction that is NOT signaling MAY be included in a block\n>>> regardless of that block's signaling vector\n>>> - (Optional) A transaction signaling in the negative MUST NOT be\n>>> included in a block that signals in the affirmative\n>>>\n>>> Under this set of conditions, a user has the means of sybil-resistant\n>>> influence over miner decisions. If a miner cannot collect the fees for a\n>>> transaction without signaling, the user's fee becomes active economic\n>>> pressure for the miner to signal (or not, if we include some variant of the\n>>> negative clause). In this environment, miners could have a better view into\n>>> what users do want, as would the Bitcoin network at large.\n>>>\n>>> Some may take issue with the idea that people can pay for the outcome\n>>> they want and may try to compare a method like this to Proof of Stake, but\n>>> there are only 3 sybil resistant mechanisms I am aware of, and any \"real\"\n>>> view into what social consensus looks like MUST be sybil resistant:\n>>>\n>>> - Hashpower\n>>> - Proof of personhood (KYC)\n>>> - Capital burn/risk\n>>>\n>>> Letting hashpower decide this is the thing that is currently\n>>> contentious, KYC is dead on arrival both on technical and social grounds,\n>>> which really just leaves some means of getting capital into the process of\n>>> consensus measurement. This mechanism I'm proposing is measurable\n>>> completely en-protocol and doesn't require trust in institutions that fork\n>>> futures would. Additionally it could be an auxiliary feature of the soft\n>>> fork deployment scheme chosen making it something you could neatly package\n>>> all together with the deployment itself.\n>>>\n>>> There are many potential tweaks to the design I propose above:\n>>> 1. Do we include a notion of negative signaling (allowing for the\n>>> possibility of rejection)\n>>> 2. Do we make it such that miner signaling must be congruent with >X% of\n>>> transactions, where congruence is that the signal must match any\n>>> non-neutral signal of transaction.\n>>>\n>>> Some anticipated objections:\n>>>\n>>> 1. signaling isn't voting, no deployment should be made without\n>>> consensus first.\n>>> - yeah well we can't currently measure consensus right now, so that's\n>>> not a super helpful thing to say and is breeding ground for abuse in the\n>>> form of certain people making the unsubstantiated claim that consensus does\n>>> or does not exist for a particular initiative\n>>>\n>>> 2. This is just a proposal for \"pay to play\", we should not let the\n>>> wealthy make consensus decisions.\n>>> - I agree that wealth should not be able to strong-arm decision making.\n>>> But the status quo seems even worse where we let publicly influential\n>>> people decide consensus in such a way where not only do they not \"lose\n>>> ammunition\" in the process of campaigning, but actually accrue it, creating\n>>> really bad long-term balances of power.\n>>>\n>>> 3. Enforcing this proposal requires its own soft fork.\n>>> - Yes. It does...and there's a certain cosmic irony to that, but before\n>>> we consider how to make this happen, I'd like to even discuss whether or\n>>> not it's a good idea.\n>>>\n>>> 4. This gives CoinJoin pool operators and L2 protocol implementations\n>>> power over deciding consensus.\n>>> - I see this as an improvement over the status quo\n>>>\n>>> 5. This encourages \"spam\"\n>>> - If you pay the fees, it's not spam.\n>>>\n>>> The biggest question I'd like to pose to the forum is:\n>>> - Does a scheme like this afford us a better view into consensus than we\n>>> have today?\n>>> - Can it be gamed to give us a *worse* view into consensus? How?\n>>> - Does it measure the right thing? If not, what do you think is the\n>>> right thing to measure? (assuming we could)\n>>> - Should I write a BIP spec'ing this out in detail?\n>>>\n>>> Cheers,\n>>> Keagan\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n>>\n>> --\n>> - Bryan\n>> https://twitter.com/kanzure\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220427/815a5da9/attachment-0001.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2022-04-27T14:28:31",
                "message_text_only": "There are many challenges with on-chain voting, here are a few:\n\n- We may not want votes on-chain, because it creates miner incentives for\ncontentious BIP's to drive up fees\n- Miners can block votes from the chain\n- Cold storage votes are probably the most important for certain proposals\n(like vaulting), but are the least-likely to vote\n- Awareness and participation in blockchain voting is typically very low\nand is mostly limited to big exchanges\n\nAnd off chain voting is even worse:\n\n- We can collect votes off-chain by signing messages and publishing them\n\"somewhere\", but where would that be?\n- How do you make this censorship-resistant?\n- Suppose someone's coins are protected by a hot/cold covenant, like TLUV\nor CTV: parse scripts?  Ick.\n\nAlthough I do wish sometimes that this were not the case, I feel like the\nverbal wrangling and rough/messy-consensus building remains our best choice.\n\nOn Wed, Apr 27, 2022 at 10:07 AM Chris Riley via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> >> we should not let the wealthy make consensus decisions.\n>\n> >We shouldn't let the wealthy continue to control our governments.\n> However, bitcoin is not a government. Its a financial network.\n> >The fact of the matter is that fundamentally, the economic majority\n> controls where the chain goes. Its very likely that the wealthy\n> >are disproportionately represented in the economic majority. Attempting\n> to subvert the economic majority seems like a bad idea.\n> >The reality of control there will come out one way or another, and being\n> honest about it is probably the best way to avoid major schisms in the\n> future.\n>\n> Yes, the economic majority is important:  Who else has more incentive to\n> protect the security and thus the value embodied in the network than people\n> who have invested money and time in the network?  A group of people with\n> 1/10/100/1000 bitcoins each has more economic incentive to do so than a\n> similar sized group with 1/10/100/1000 satoshis each.  Likewise, it is\n> significantly easier to mobilize 1 million people \"voting\" with 100\n> satoshis each - a total of 1 BTC -  vs 10000 people each voting with 100\n> bitcoins each - a total of 1 million BTC.  I don't think anyone would say\n> that even if those 1 million people, for example, thought that we should\n> increase the number of bitcoins via perpetual inflation it would be a good\n> idea to listen to it however the vote was done whether via transaction\n> flags or something else.  Of course they could fork off.\n>\n> Cheers,    :-)\n> Chris\n>\n>\n>\n>\n>\n> On Wed, Apr 27, 2022 at 4:11 AM Billy Tetrud via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> >   A transaction signaling in the affirmative MUST NOT be included in a\n>> block that does not signal in the affirmative\n>>\n>> I feel like I've heard this idea somewhere before. Its an interesting\n>> idea.\n>>\n>> It should be noted that there is a consequence of this: holders wouldn't\n>> have much say. People that transact a lot (or happen to be transacting a\n>> lot during the signaling time period) would have a very disproportionate\n>> ability to pressure miners than people who aren't transacting much. This\n>> would probably be a pretty good proxy for future mining revenue that\n>> supports (or is against) a particular thing. However, the network does do\n>> more than just transact, so I would be a bit worried that such a mechanism\n>> would bias the system towards things that are good for transactors and bad\n>> for holders. Things like more coin inflation, larger blocks, etc.\n>>\n>> Another consideration is that miners are already incentivized to follow\n>> the money here. Adding an *additional* incentive might be distorting the\n>> market, so to speak.\n>>\n>> An alternative I proposed was a way to do weighted polling of holders:\n>>\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020146.html\n>>\n>> The polling wouldn't be directly connected to the activation mechanism in\n>> any way, but would just be a mechanism to gauge some portion of consensus.\n>> If enough people were involved, theoretically it could be hooked up to\n>> activation, but I would be pretty wary of doing that directly as well.\n>>\n>> > we should not let the wealthy make consensus decisions.\n>>\n>> We shouldn't let the wealthy continue to control our governments.\n>> However, bitcoin is not a government. Its a financial network. The fact of\n>> the matter is that fundamentally, the economic majority controls where the\n>> chain goes. Its very likely that the wealthy are disproportionately\n>> represented in the economic majority. Attempting to subvert the economic\n>> majority seems like a bad idea. The reality of control there will come out\n>> one way or another, and being honest about it is probably the best way to\n>> avoid major schisms in the future.\n>>\n>> > Does a scheme like this afford us a better view into consensus than we\n>> have today?\n>>\n>> It does more than provide a view. It directly changes the game theory\n>> around how activation works. If we wanted to simply get a better view into\n>> consensus, we could allow the same thing, but allow any block to mine any\n>> transaction regardless of transaction signaling. Then it would be more\n>> purely informational.\n>>\n>> > Can it be gamed to give us a *worse* view into consensus? How?\n>> > Does it measure the right thing? If not, what do you think is the right\n>> thing to measure?\n>>\n>> Doesn't seem like it could be gamed, but as I mentioned above, the honest\n>> mechanics of it might be themselves undesirably distorting.\n>>\n>>\n>>\n>> On Tue, Apr 26, 2022 at 3:49 PM Bryan Bishop via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> You may be interested in these posts on transaction signalling:\n>>>\n>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014193.html\n>>>\n>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014202.html\n>>>\n>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014251.html\n>>>\n>>>\n>>> On Tue, Apr 26, 2022 at 3:12 PM Keagan McClelland via bitcoin-dev <\n>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>>> Hi all,\n>>>>\n>>>> Alongside the debate with CTV right now there's a second debate that\n>>>> was not fully hashed out in the activation of Taproot. There is a lot of\n>>>> argument around what Speedy Trial is or isn't, what BIP8 T/F is or isn't\n>>>> etc. A significant reason for the breakdown in civility around this debate\n>>>> is that because we don't have a means of measuring user support for\n>>>> proposed sof-fork changes, it invariably devolves into people claiming that\n>>>> their circles support/reject a proposal, AND that their circles are more\n>>>> broadly representative of the set of Bitcoin users as a whole.\n>>>>\n>>>> It seems everyone in this forum has at one point or another said \"I\n>>>> would support activation of ____ if there was consensus on it, but there\n>>>> isn't\". This statement, in order to be true, requires that there exist a\n>>>> set of conditions that would convince you that there is consensus. People\n>>>> have tried to dodge this question by saying \"it's obvious\", but the reality\n>>>> is that it fundamentally isn't. My bubble has a different \"obvious\" answer\n>>>> than any of yours.\n>>>>\n>>>> Secondly, due to the trauma of the block size wars, no one wants to\n>>>> utter a statement that could imply that miners have any influence over what\n>>>> rulesets get activated or don't. As such \"miner signaling\" is consistently\n>>>> devalued as a signal for market demand. I don't think this is reasonable\n>>>> since following the events of '17  miners are aware that they have the\n>>>> strong incentive that they understand market demand. Nevertheless, as it\n>>>> stands right now the only signal we have to work with is miner signaling,\n>>>> which I think is rightly frustrating to a lot of people.\n>>>>\n>>>> So how can we measure User Support for a proposed rule change?\n>>>>\n>>>> I've had this idea floating around in the back of my head for a while,\n>>>> and I'd like to solicit some feedback here. Currently, all forms of\n>>>> activation that are under consideration involve miner signaling in one form\n>>>> or another. What if we could make it such that users could more directly\n>>>> pressure miners to act on their behalf? After all, if miners are but the\n>>>> humble servants of user demands, this should be in alignment with how\n>>>> people want Bitcoin to behave.\n>>>>\n>>>> Currently, the only means users have of influencing miner decisions are\n>>>> A. rejection of blocks that don't follow rules and B. paying fees for\n>>>> transaction inclusion. I suggest we combine these in such a way that\n>>>> transactions themselves can signal for upgrade. I believe (though am not\n>>>> certain) that there are \"free\" bits in the version field of a transaction\n>>>> that are presently ignored. If we could devise a mapping between some of\n>>>> those free bits, and the signaling bits in the block header, it would be\n>>>> possible to have rules as follows:\n>>>>\n>>>> - A transaction signaling in the affirmative MUST NOT be included in a\n>>>> block that does not signal in the affirmative\n>>>> - A transaction that is NOT signaling MAY be included in a block\n>>>> regardless of that block's signaling vector\n>>>> - (Optional) A transaction signaling in the negative MUST NOT be\n>>>> included in a block that signals in the affirmative\n>>>>\n>>>> Under this set of conditions, a user has the means of sybil-resistant\n>>>> influence over miner decisions. If a miner cannot collect the fees for a\n>>>> transaction without signaling, the user's fee becomes active economic\n>>>> pressure for the miner to signal (or not, if we include some variant of the\n>>>> negative clause). In this environment, miners could have a better view into\n>>>> what users do want, as would the Bitcoin network at large.\n>>>>\n>>>> Some may take issue with the idea that people can pay for the outcome\n>>>> they want and may try to compare a method like this to Proof of Stake, but\n>>>> there are only 3 sybil resistant mechanisms I am aware of, and any \"real\"\n>>>> view into what social consensus looks like MUST be sybil resistant:\n>>>>\n>>>> - Hashpower\n>>>> - Proof of personhood (KYC)\n>>>> - Capital burn/risk\n>>>>\n>>>> Letting hashpower decide this is the thing that is currently\n>>>> contentious, KYC is dead on arrival both on technical and social grounds,\n>>>> which really just leaves some means of getting capital into the process of\n>>>> consensus measurement. This mechanism I'm proposing is measurable\n>>>> completely en-protocol and doesn't require trust in institutions that fork\n>>>> futures would. Additionally it could be an auxiliary feature of the soft\n>>>> fork deployment scheme chosen making it something you could neatly package\n>>>> all together with the deployment itself.\n>>>>\n>>>> There are many potential tweaks to the design I propose above:\n>>>> 1. Do we include a notion of negative signaling (allowing for the\n>>>> possibility of rejection)\n>>>> 2. Do we make it such that miner signaling must be congruent with >X%\n>>>> of transactions, where congruence is that the signal must match any\n>>>> non-neutral signal of transaction.\n>>>>\n>>>> Some anticipated objections:\n>>>>\n>>>> 1. signaling isn't voting, no deployment should be made without\n>>>> consensus first.\n>>>> - yeah well we can't currently measure consensus right now, so that's\n>>>> not a super helpful thing to say and is breeding ground for abuse in the\n>>>> form of certain people making the unsubstantiated claim that consensus does\n>>>> or does not exist for a particular initiative\n>>>>\n>>>> 2. This is just a proposal for \"pay to play\", we should not let the\n>>>> wealthy make consensus decisions.\n>>>> - I agree that wealth should not be able to strong-arm decision making.\n>>>> But the status quo seems even worse where we let publicly influential\n>>>> people decide consensus in such a way where not only do they not \"lose\n>>>> ammunition\" in the process of campaigning, but actually accrue it, creating\n>>>> really bad long-term balances of power.\n>>>>\n>>>> 3. Enforcing this proposal requires its own soft fork.\n>>>> - Yes. It does...and there's a certain cosmic irony to that, but before\n>>>> we consider how to make this happen, I'd like to even discuss whether or\n>>>> not it's a good idea.\n>>>>\n>>>> 4. This gives CoinJoin pool operators and L2 protocol implementations\n>>>> power over deciding consensus.\n>>>> - I see this as an improvement over the status quo\n>>>>\n>>>> 5. This encourages \"spam\"\n>>>> - If you pay the fees, it's not spam.\n>>>>\n>>>> The biggest question I'd like to pose to the forum is:\n>>>> - Does a scheme like this afford us a better view into consensus than\n>>>> we have today?\n>>>> - Can it be gamed to give us a *worse* view into consensus? How?\n>>>> - Does it measure the right thing? If not, what do you think is the\n>>>> right thing to measure? (assuming we could)\n>>>> - Should I write a BIP spec'ing this out in detail?\n>>>>\n>>>> Cheers,\n>>>> Keagan\n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>\n>>>\n>>>\n>>> --\n>>> - Bryan\n>>> https://twitter.com/kanzure\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220427/7302e747/attachment-0001.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2022-04-27T16:17:51",
                "message_text_only": "@Erik\n>  Miners can block votes from the chain\n\nThis would seem to not realistically ever happen in Keagan's proposal,\nsince miners can only include transactions that signal the same way they're\nsignaling. So yes, they could block those transactions, but it would be\nvery much against their interests to do so, and they cannot block\ntransactions that signal against them. That is assuming that *some* miners\nsignal differently. If literally (or practically) 100% of the miners signal\nthe same way, then you're right that it blocks alternative signals, but at\nthe same time, the signals will still be there in the mempool for all to\nsee at the time.\n\nThe other points against this style of transaction signaling sound correct\nto me.\n\n>  We can collect votes off-chain by signing messages and publishing them\n\"somewhere\", but where would that be?\n\nHave you taken a look at my proposal\n<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020146.html>?\nThe proposal is, to be clear, *not* \"voting\" but rather polling that isn't\nprogrammatically connected to activation. The intention is for people\n(developers) to look at the polling results and make an educated analysis\nof it as far as how it should contribute to consensus gathering.\n\nIn that proposal, a central publishing place is not necessary, as any\ncomparison of two different sets of poll results can simply be merged into\none set to get the most accurate picture. It would be very easy to see if\nsomeone is dishonestly publishing incomplete poll results. In a proper\nimplementation of this, everyone should be able to have poll results that\nmatch almost exactly, especially when looking at the results for eg > 1\nweek in the past.\n\n> How do you make this censorship-resistant?\n\nLet's say everyone who participates in polling broadcasts it along the\nbitcoin network (a separate network would probably be better, so as to not\ninterfere with normal bitcoin, but I digress), and anyone who wants to\ncollect poll data simply collects it all. That would be censorship\nresistant in the exact same way bitcoin is censorship resistant.\n\n>  Suppose someone's coins are protected by a hot/cold covenant, like TLUV\nor CTV: parse scripts?  Ick.\n\nIdeally, address types would take this into account. In taproot, one could\nsimply sign a poll message with the key spendpath key but one could also\nembed a poll-signing path in a particular unspendable leaf in the MAST if\nthey want to designate a different poll-signing key. For non-taproot, an\naddress format could be redefined to be, instead of hash(publickey), to be\nhash(hash(publickey)+hash(pollSigningKey)). Or something similar. That way\nthe spending public key doesn't need to be revealed in order to sign a poll\nmessage.\n\nSimilar structures could be added to any script configuration to allow\nsigning of polls without any significant exposure.\n\nOn Wed, Apr 27, 2022 at 9:28 AM Erik Aronesty <erik at q32.com> wrote:\n\n> There are many challenges with on-chain voting, here are a few:\n>\n> - We may not want votes on-chain, because it creates miner incentives for\n> contentious BIP's to drive up fees\n> - Miners can block votes from the chain\n> - Cold storage votes are probably the most important for certain proposals\n> (like vaulting), but are the least-likely to vote\n> - Awareness and participation in blockchain voting is typically very low\n> and is mostly limited to big exchanges\n>\n> And off chain voting is even worse:\n>\n> - We can collect votes off-chain by signing messages and publishing them\n> \"somewhere\", but where would that be?\n> - How do you make this censorship-resistant?\n> - Suppose someone's coins are protected by a hot/cold covenant, like TLUV\n> or CTV: parse scripts?  Ick.\n>\n> Although I do wish sometimes that this were not the case, I feel like the\n> verbal wrangling and rough/messy-consensus building remains our best choice.\n>\n> On Wed, Apr 27, 2022 at 10:07 AM Chris Riley via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> >> we should not let the wealthy make consensus decisions.\n>>\n>> >We shouldn't let the wealthy continue to control our governments.\n>> However, bitcoin is not a government. Its a financial network.\n>> >The fact of the matter is that fundamentally, the economic majority\n>> controls where the chain goes. Its very likely that the wealthy\n>> >are disproportionately represented in the economic majority. Attempting\n>> to subvert the economic majority seems like a bad idea.\n>> >The reality of control there will come out one way or another, and being\n>> honest about it is probably the best way to avoid major schisms in the\n>> future.\n>>\n>> Yes, the economic majority is important:  Who else has more incentive to\n>> protect the security and thus the value embodied in the network than people\n>> who have invested money and time in the network?  A group of people with\n>> 1/10/100/1000 bitcoins each has more economic incentive to do so than a\n>> similar sized group with 1/10/100/1000 satoshis each.  Likewise, it is\n>> significantly easier to mobilize 1 million people \"voting\" with 100\n>> satoshis each - a total of 1 BTC -  vs 10000 people each voting with 100\n>> bitcoins each - a total of 1 million BTC.  I don't think anyone would say\n>> that even if those 1 million people, for example, thought that we should\n>> increase the number of bitcoins via perpetual inflation it would be a good\n>> idea to listen to it however the vote was done whether via transaction\n>> flags or something else.  Of course they could fork off.\n>>\n>> Cheers,    :-)\n>> Chris\n>>\n>>\n>>\n>>\n>>\n>> On Wed, Apr 27, 2022 at 4:11 AM Billy Tetrud via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> >   A transaction signaling in the affirmative MUST NOT be included in a\n>>> block that does not signal in the affirmative\n>>>\n>>> I feel like I've heard this idea somewhere before. Its an interesting\n>>> idea.\n>>>\n>>> It should be noted that there is a consequence of this: holders wouldn't\n>>> have much say. People that transact a lot (or happen to be transacting a\n>>> lot during the signaling time period) would have a very disproportionate\n>>> ability to pressure miners than people who aren't transacting much. This\n>>> would probably be a pretty good proxy for future mining revenue that\n>>> supports (or is against) a particular thing. However, the network does do\n>>> more than just transact, so I would be a bit worried that such a mechanism\n>>> would bias the system towards things that are good for transactors and bad\n>>> for holders. Things like more coin inflation, larger blocks, etc.\n>>>\n>>> Another consideration is that miners are already incentivized to follow\n>>> the money here. Adding an *additional* incentive might be distorting the\n>>> market, so to speak.\n>>>\n>>> An alternative I proposed was a way to do weighted polling of holders:\n>>>\n>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020146.html\n>>>\n>>> The polling wouldn't be directly connected to the activation mechanism\n>>> in any way, but would just be a mechanism to gauge some portion of\n>>> consensus. If enough people were involved, theoretically it could be hooked\n>>> up to activation, but I would be pretty wary of doing that directly as well.\n>>>\n>>> > we should not let the wealthy make consensus decisions.\n>>>\n>>> We shouldn't let the wealthy continue to control our governments.\n>>> However, bitcoin is not a government. Its a financial network. The fact of\n>>> the matter is that fundamentally, the economic majority controls where the\n>>> chain goes. Its very likely that the wealthy are disproportionately\n>>> represented in the economic majority. Attempting to subvert the economic\n>>> majority seems like a bad idea. The reality of control there will come out\n>>> one way or another, and being honest about it is probably the best way to\n>>> avoid major schisms in the future.\n>>>\n>>> > Does a scheme like this afford us a better view into consensus than we\n>>> have today?\n>>>\n>>> It does more than provide a view. It directly changes the game theory\n>>> around how activation works. If we wanted to simply get a better view into\n>>> consensus, we could allow the same thing, but allow any block to mine any\n>>> transaction regardless of transaction signaling. Then it would be more\n>>> purely informational.\n>>>\n>>> > Can it be gamed to give us a *worse* view into consensus? How?\n>>> > Does it measure the right thing? If not, what do you think is the\n>>> right thing to measure?\n>>>\n>>> Doesn't seem like it could be gamed, but as I mentioned above, the\n>>> honest mechanics of it might be themselves undesirably distorting.\n>>>\n>>>\n>>>\n>>> On Tue, Apr 26, 2022 at 3:49 PM Bryan Bishop via bitcoin-dev <\n>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>>> You may be interested in these posts on transaction signalling:\n>>>>\n>>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014193.html\n>>>>\n>>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014202.html\n>>>>\n>>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014251.html\n>>>>\n>>>>\n>>>> On Tue, Apr 26, 2022 at 3:12 PM Keagan McClelland via bitcoin-dev <\n>>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>\n>>>>> Hi all,\n>>>>>\n>>>>> Alongside the debate with CTV right now there's a second debate that\n>>>>> was not fully hashed out in the activation of Taproot. There is a lot of\n>>>>> argument around what Speedy Trial is or isn't, what BIP8 T/F is or isn't\n>>>>> etc. A significant reason for the breakdown in civility around this debate\n>>>>> is that because we don't have a means of measuring user support for\n>>>>> proposed sof-fork changes, it invariably devolves into people claiming that\n>>>>> their circles support/reject a proposal, AND that their circles are more\n>>>>> broadly representative of the set of Bitcoin users as a whole.\n>>>>>\n>>>>> It seems everyone in this forum has at one point or another said \"I\n>>>>> would support activation of ____ if there was consensus on it, but there\n>>>>> isn't\". This statement, in order to be true, requires that there exist a\n>>>>> set of conditions that would convince you that there is consensus. People\n>>>>> have tried to dodge this question by saying \"it's obvious\", but the reality\n>>>>> is that it fundamentally isn't. My bubble has a different \"obvious\" answer\n>>>>> than any of yours.\n>>>>>\n>>>>> Secondly, due to the trauma of the block size wars, no one wants to\n>>>>> utter a statement that could imply that miners have any influence over what\n>>>>> rulesets get activated or don't. As such \"miner signaling\" is consistently\n>>>>> devalued as a signal for market demand. I don't think this is reasonable\n>>>>> since following the events of '17  miners are aware that they have the\n>>>>> strong incentive that they understand market demand. Nevertheless, as it\n>>>>> stands right now the only signal we have to work with is miner signaling,\n>>>>> which I think is rightly frustrating to a lot of people.\n>>>>>\n>>>>> So how can we measure User Support for a proposed rule change?\n>>>>>\n>>>>> I've had this idea floating around in the back of my head for a while,\n>>>>> and I'd like to solicit some feedback here. Currently, all forms of\n>>>>> activation that are under consideration involve miner signaling in one form\n>>>>> or another. What if we could make it such that users could more directly\n>>>>> pressure miners to act on their behalf? After all, if miners are but the\n>>>>> humble servants of user demands, this should be in alignment with how\n>>>>> people want Bitcoin to behave.\n>>>>>\n>>>>> Currently, the only means users have of influencing miner decisions\n>>>>> are A. rejection of blocks that don't follow rules and B. paying fees for\n>>>>> transaction inclusion. I suggest we combine these in such a way that\n>>>>> transactions themselves can signal for upgrade. I believe (though am not\n>>>>> certain) that there are \"free\" bits in the version field of a transaction\n>>>>> that are presently ignored. If we could devise a mapping between some of\n>>>>> those free bits, and the signaling bits in the block header, it would be\n>>>>> possible to have rules as follows:\n>>>>>\n>>>>> - A transaction signaling in the affirmative MUST NOT be included in a\n>>>>> block that does not signal in the affirmative\n>>>>> - A transaction that is NOT signaling MAY be included in a block\n>>>>> regardless of that block's signaling vector\n>>>>> - (Optional) A transaction signaling in the negative MUST NOT be\n>>>>> included in a block that signals in the affirmative\n>>>>>\n>>>>> Under this set of conditions, a user has the means of sybil-resistant\n>>>>> influence over miner decisions. If a miner cannot collect the fees for a\n>>>>> transaction without signaling, the user's fee becomes active economic\n>>>>> pressure for the miner to signal (or not, if we include some variant of the\n>>>>> negative clause). In this environment, miners could have a better view into\n>>>>> what users do want, as would the Bitcoin network at large.\n>>>>>\n>>>>> Some may take issue with the idea that people can pay for the outcome\n>>>>> they want and may try to compare a method like this to Proof of Stake, but\n>>>>> there are only 3 sybil resistant mechanisms I am aware of, and any \"real\"\n>>>>> view into what social consensus looks like MUST be sybil resistant:\n>>>>>\n>>>>> - Hashpower\n>>>>> - Proof of personhood (KYC)\n>>>>> - Capital burn/risk\n>>>>>\n>>>>> Letting hashpower decide this is the thing that is currently\n>>>>> contentious, KYC is dead on arrival both on technical and social grounds,\n>>>>> which really just leaves some means of getting capital into the process of\n>>>>> consensus measurement. This mechanism I'm proposing is measurable\n>>>>> completely en-protocol and doesn't require trust in institutions that fork\n>>>>> futures would. Additionally it could be an auxiliary feature of the soft\n>>>>> fork deployment scheme chosen making it something you could neatly package\n>>>>> all together with the deployment itself.\n>>>>>\n>>>>> There are many potential tweaks to the design I propose above:\n>>>>> 1. Do we include a notion of negative signaling (allowing for the\n>>>>> possibility of rejection)\n>>>>> 2. Do we make it such that miner signaling must be congruent with >X%\n>>>>> of transactions, where congruence is that the signal must match any\n>>>>> non-neutral signal of transaction.\n>>>>>\n>>>>> Some anticipated objections:\n>>>>>\n>>>>> 1. signaling isn't voting, no deployment should be made without\n>>>>> consensus first.\n>>>>> - yeah well we can't currently measure consensus right now, so that's\n>>>>> not a super helpful thing to say and is breeding ground for abuse in the\n>>>>> form of certain people making the unsubstantiated claim that consensus does\n>>>>> or does not exist for a particular initiative\n>>>>>\n>>>>> 2. This is just a proposal for \"pay to play\", we should not let the\n>>>>> wealthy make consensus decisions.\n>>>>> - I agree that wealth should not be able to strong-arm decision\n>>>>> making. But the status quo seems even worse where we let publicly\n>>>>> influential people decide consensus in such a way where not only do they\n>>>>> not \"lose ammunition\" in the process of campaigning, but actually accrue\n>>>>> it, creating really bad long-term balances of power.\n>>>>>\n>>>>> 3. Enforcing this proposal requires its own soft fork.\n>>>>> - Yes. It does...and there's a certain cosmic irony to that, but\n>>>>> before we consider how to make this happen, I'd like to even discuss\n>>>>> whether or not it's a good idea.\n>>>>>\n>>>>> 4. This gives CoinJoin pool operators and L2 protocol implementations\n>>>>> power over deciding consensus.\n>>>>> - I see this as an improvement over the status quo\n>>>>>\n>>>>> 5. This encourages \"spam\"\n>>>>> - If you pay the fees, it's not spam.\n>>>>>\n>>>>> The biggest question I'd like to pose to the forum is:\n>>>>> - Does a scheme like this afford us a better view into consensus than\n>>>>> we have today?\n>>>>> - Can it be gamed to give us a *worse* view into consensus? How?\n>>>>> - Does it measure the right thing? If not, what do you think is the\n>>>>> right thing to measure? (assuming we could)\n>>>>> - Should I write a BIP spec'ing this out in detail?\n>>>>>\n>>>>> Cheers,\n>>>>> Keagan\n>>>>> _______________________________________________\n>>>>> bitcoin-dev mailing list\n>>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>>\n>>>>\n>>>>\n>>>> --\n>>>> - Bryan\n>>>> https://twitter.com/kanzure\n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220427/532c8a5a/attachment-0001.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2022-04-27T20:13:35",
                "message_text_only": ">\n>\n>\n> Have you taken a look at my proposal\n> <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020146.html>?\n> The proposal is, to be clear, *not* \"voting\" but rather polling that isn't\n> programmatically connected to activation. The intention is for people\n> (developers) to look at the polling results and make an educated analysis\n> of it as far as how it should contribute to consensus gathering.\n>\n\nit's cool, and i agree it's somewhat censorship resistant\n\n\n> Let's say everyone who participates in polling broadcasts it along the\n> bitcoin network (a separate network would probably be better, so as to not\n> interfere with normal bitcoin, but I digress),\n>\n\nright, anyone can then publish a json file with polling aggregates at a\ncertain block height and anyone can quickly check to see if they are lying\nor missing data\n\n\n> Similar structures could be added to any script configuration to allow\n> signing of polls without any significant exposure.\n>\n\nrubin's suggestion around tapscript anon voting could help with anonymity\n\n.... all of this is cool ...\n\nbut it doesn't address the \"what about people who don't know there's a vote\ngoing on\"  or other the other social issues with \"weighted polling\" in\ngeneral, like how nonexperts can \"have a say\" when they simply don't\nunderstand the relevant issues.  i personally feel like i'm \"only a very\nlittle bit up on the issues\" and i have more tech knowledge than most\npeople i know\n\nalso, it will just be a poll of \"people who pay attention to the dev list\nand maybe some irc rooms\"\n\nmight be worth experimenting with... but unless there's a great ux around\nthe tooling my guess is that it won't garner a lot of meaningful data:\n\nopen source, simple cli, gitian build, installs easily on all platforms,\nworks well with bitcoind rpc, works with ledger, can import a seed, etc.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220427/bf05383b/attachment.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2022-04-28T05:18:06",
                "message_text_only": "@Felipe\n> the consensus should follow the current line: discussions and tests\ncarried out by experts. We all know that the most important devs have the\nmost weight in discussions. And that's how it should be\n\nWe have up til this point been miraculously lucky that the vast majority of\nprominent bitcoin developers are in relative alignment on the big picture\nphilosophy and have all seemed to be honest and open in general. However,\nwe cannot rely on this era of philosopher kings to continue. Relying on\nexperts in this way is an enormous attack vector. It should not be the\n\"most important\" devs who carry the most weight, but weight should be\ncarried by the logic of what is being said. The speaker should ideally not\nmatter in consensus building. So I agree with Keagan's implication that\nthis is not how bitcoin should govern itself. We should move away from\nappeals to authority towards something more amorphous and difficult to\ncontrol.\n\n@Jeremy\n> if there were a way to sign with a NUMS point for ring signature purposes\n\nDo you have any link you could point to about NUMS points? I assume this\nwould be a way to aggregate coin-weighted signals in a way that helps hide\nwho signaled in what direction?\n\n> if NUMS points are common these ring signatures protocols might not be\ntoo useful for collecting signals\n\nI'm curious: why is it better if its less common? I'm used to privacy\nproperties increasing as the privacy technique used becomes more common.\n\n@Erik\n> it doesn't address the \"what about people who don't know there's a vote\ngoing on\"\n> how nonexperts can \"have a say\" when they simply don't understand the\nrelevant issues.\n\nI think a useful way to think about this is in terms of preferences and\nrepresentation, rather than in the terms of coming to the best technical\nsolution. The fact of the matter is that value is subjective and therefore\nthere is no \"best\" technical solution all the time. Sometimes the\npreferences of stakeholders must be weighed and a compromise come to.\nHopefully most of these kinds of compromises can happen in the free market\non upper layers. But certainly some of them happen on the consensus layer.\n\nAn expert with deep knowledge can deeply understand a design or change well\nenough to come to a full opinion about it according to their preferences.\nBut even other experts might not have read enough about a thing, or just\ndon't have time to delve deeply into that particular aspect. They'll have\nto rely partly on their ability to make a determination from partial\nknowledge and their ability to evaluate the trustworthiness and skill of\nthose who have deeper knowledge than them. Nonexperts and non-technical\npeople have to rely on those kinds of things even more so. Many people only\nhave social signals to rely on. What do the people they trust say?\n\nI believe that the truth gets out eventually. Those who have deep knowledge\nwill eventually convince those who don't, tho that may take a long time to\nplay out. As annoying as the twitterati is, I think we should get used to\nneeding to give their opinions a bit of weight in terms of measuring\nconsensus. Of course, we shouldn't be making technical decisions based on\nwhat nontechnical people want or think, however, what we should do is make\nsure that we are explaining the changes we propose to make clearly enough\nthat a certainly level of comfort diffuses into the social circles of\npeople who care about bitcoin but don't understand it at a technical enough\nlevel to participate in technical decision making. At a certain point, if\nnot enough people are comfortable with a change, the change shouldn't be\nmade yet until enough people are convinced its probably safe and probably\ngood. Think of the large set of non-technical people to be a glue that\nconnects together otherwise unconnected pockets of wisdom.\n\nDoing things this way would almost certainly lead to slower development.\nBut development of the consensus layer slowing over time should be what we\nall expect, and I daresay what we should all want eventually.\n\n> it will just be a poll of \"people who pay attention to the dev list and\nmaybe some irc rooms\"\n\nMaybe. But if there were mechanisms for broader consensus measuring,\nperhaps more would pay attention. Perhaps some way to affect change would\nlead more to have discussions and participate.\n\nEven if its a small group at first, I think it would be very useful\ninformation to see both who explicitly supports something, who explicitly\nis against something, and also who is paying attention but neutral (maybe\neven actively signaling as \"neutral').\n\n> unless there's a great ux around the tooling my guess is that it won't\ngarner a lot of meaningful data:\n\nI agree. Tooling would be very important here.\n\n\n\n\n\n\n\nOn Wed, Apr 27, 2022 at 3:13 PM Erik Aronesty <erik at q32.com> wrote:\n\n>\n>>\n>> Have you taken a look at my proposal\n>> <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020146.html>?\n>> The proposal is, to be clear, *not* \"voting\" but rather polling that isn't\n>> programmatically connected to activation. The intention is for people\n>> (developers) to look at the polling results and make an educated analysis\n>> of it as far as how it should contribute to consensus gathering.\n>>\n>\n> it's cool, and i agree it's somewhat censorship resistant\n>\n>\n>> Let's say everyone who participates in polling broadcasts it along the\n>> bitcoin network (a separate network would probably be better, so as to not\n>> interfere with normal bitcoin, but I digress),\n>>\n>\n> right, anyone can then publish a json file with polling aggregates at a\n> certain block height and anyone can quickly check to see if they are lying\n> or missing data\n>\n>\n>> Similar structures could be added to any script configuration to allow\n>> signing of polls without any significant exposure.\n>>\n>\n> rubin's suggestion around tapscript anon voting could help with anonymity\n>\n> .... all of this is cool ...\n>\n> but it doesn't address the \"what about people who don't know there's a\n> vote going on\"  or other the other social issues with \"weighted polling\" in\n> general, like how nonexperts can \"have a say\" when they simply don't\n> understand the relevant issues.  i personally feel like i'm \"only a very\n> little bit up on the issues\" and i have more tech knowledge than most\n> people i know\n>\n> also, it will just be a poll of \"people who pay attention to the dev list\n> and maybe some irc rooms\"\n>\n> might be worth experimenting with... but unless there's a great ux around\n> the tooling my guess is that it won't garner a lot of meaningful data:\n>\n> open source, simple cli, gitian build, installs easily on all platforms,\n> works well with bitcoind rpc, works with ledger, can import a seed, etc.\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220428/4db9389a/attachment-0001.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2022-04-28T16:09:36",
                "message_text_only": "@Keagan\n> we have to have a way (formalized or not) of deciding when the \"lesser\nexperts\" in aggregate have better judgement.\n\nI agree. Its certainly convenient for development speed to limit the number\nof cooks in the kitchen. But for the largest cryptocurrency in the world,\nwe're going to have to face the reality that the number of stakeholders has\ngrown vastly larger than the developer community and those who implicitly\ntrust the developer community, or any particular part of the dev community\nworking on any particular upgrade.\n\n> Perhaps it warrants zooming out beyond even what my proposal aims to solve\n\nI very much like the way you framed the question, and I think these are\nimportant, potentially existential questions we should urge the bitcoin\ncommunity to think deeply about.\n\n> 1. ...  what would be the threshold for saying \"this consensus change is\nready for activation\"?\n\nThis is indeed the basic question.\n\n> 1a. Does that threshold change based on the nature of the consensus change\n\nI don't think the threshold of consensus changes should depend on the type\nof consensus change. Any consensus change, no matter how small, introduces\nrisk, can cause bugs, can open a back door. Naturally, simpler changes\nshould be able to *reach* consensus faster, because presumably it would\ntake less analysis, and be easier to explain and convince people of. But\nthat doesn't mean the bar of consensus should be lower. I think it should\nnot. A change may look small and innocuous when it is in fact not, and it\nwould be less than ideal for people to try to pretend there's sufficient\nconsensus by insisting that a change is so \"small\" that no more is needed.\n\n> 1b. Do different constituencies (end users, wallets, exchanges, coinjoin\ncoordinators, layer2 protocols, miners) have a desired minimum or maximum\nrepresentation in this \"threshold\"?\n\nThere is a lot to say about this simple question. I think it should be\nrecognized that the \"say\" anyone or any group has depends on their total\nfuture (or perhaps only total near-term) economic influence on the network.\nThis is related to the concept of the \"economic majority\". What is the\n\"economic majority\"? We could say this depends exactly on the proportion of\nbitcoin you own, but I don't think that would be quite right. For example,\na miner that (hypothetically) keeps no bitcoin except for what is being\nchanged into fiat has an important role and significant economic influence\non bitcoin. Miners provide a service. Their livelihood depends on\nbitcoiners, and the livelihood of bitcoin depends in part on miners.\nSimilarly, a vendor who accepts bitcoin directly but converts it all to\nfiat provides a service as well. They expand the network of where bitcoin\nis directly useful. People willing to pay for things in bitcoin also\nsimilarly expand bitcoin's network.\n\nI think it only makes sense to align incentives and attempt to match the\namount of representation a group gets to the amount of economic influence\nthey have on the network. To do otherwise would invite a schism.\n\nBased on the above, I'm thinking that there are only really two components\nof what should comprise the weight of any person or group's say: 1. the\nstake they have in bitcoin, and 2. the value they provide to bitcoin. Let\nme elaborate:\n\nBitcoin has a purpose. That purpose is as a currency. The directly valuable\naspects of that are as a store of value and as a means of exchange. The\nproperties of bitcoin lead to benefits to using it as both of those things.\nTherefore, the stake people have in holding bitcoin should count heavily\nbecause the value of holding is a major purpose of bitcoin. But at the same\ntime the ability to transact bitcoin should also count pretty heavily\nbecause its also a major purpose of bitcoin and at the same time accepting\nor spending bitcoin expands the network. If we were able to economically\nequate those two things, we might get closer to a way to figure out how to\nideally distribute representation. Similarly, we could add miners and\ndevelopers into this mix, comparing them based on the value they provide to\nthe network.\n\nSo let:\nholdAmount = the value of bitcoin they're holding over a given period of\ntime T\ntransactionVolume = the volume of transaction value over a given period of\ntime T\nminingVolume = the value of bitcoin they mined over time period T\ntechnologyValue = the value of new technological developments produced over\ntime period T\n\nA group's representation should =\n(holdAmount*A + transactionVolume*B + miningVolume*C + technologyValue*D)\n/\n(totalLiveBitcoin*A + totalTransactionVolume*B + totalMiningVolume*C +\ntotalTechnologyValue*D)\n\nwhere A through D are constants that relate the value of holding vs the\nvalue of transacting vs the value of mining vs the value of building\nbitcoin technology. We could split this up so that eg the representation\nthat holders in total should have just by holding is: A/(A+B+C+D)\n\nFor example, an equivalence could be: how much value does holding bitcoin\ngive the average user per year? How much value does transacting give the\naverage user per year? These are fuzzy and subjective and potentially\ndubious, but bare with me. Let's say that on average, a holder gets a\nbenefit of 2% of their holdings per year (on a risk adjusted basis). That\nwould be a benefit of $13.25 billion per year. And let's say that the ~$1.642\ntrillion of transactions per year\n<https://data.nasdaq.com/data/BCHAIN/ETRVU-bitcoin-estimated-transaction-volume-usd>\nbitcoin\nis doing has about 33% being actual exchanges of goods and services\n<https://www.newsbtc.com/tech/only-33-of-bitcoin-payments-used-to-purchase-goods-economic-value-in-question/>\nand\nfor that 33% the transactors in sum also get a benefit of about 2% of the\ntransacted amount. That would be a benefit of $10.8 billion per year. If we\nproxy the value of bitcoin mining to the network as the revenue they\nreceived, perhaps this is as much as $15.3 billion\n<https://www.prnewswire.com/news-releases/bitcoin-miners-revenue-rose-206-in-2021-301482452.html#:~:text=The%20report%20finds%20that%20on,in%20terms%20of%20Bitcoin%20mining.>.\nHow do we calculate the value of developers? I don't know a good proxy for\nthat. But for kicks, why don't we say its as much as miners at $15.3\nbillion.\n\nUsing these numbers, the representation for each:\n\nHolders: 13.25/(13.25+10.8+15.3+15.3) = 24%\nTransactors: 10.8/(13.25+10.8+15.3+15.3) = 20%\nMiners:  15.3/(13.25+10.8+15.3+15.3) = 27%\nDevelopers: Also 27%\n\nMaybe we could approximate that as each of the four categories has a 1/4th\nshare of representation. Values of A through D are certainly up for debate.\n\nIn any case, to get back to the question at hand (1b), I don't see any\nreason to think there's a minimum or maximum representation for each\nprimary constituency. However, there would of course be minimum and maximum\nbounds on our confidence for how much value/stake each constituency has,\nand therefore a confidence range on how much representation they should\nhave.\n\nBut this 4 part group of holders, transactors, miners, and developers seems\nto make a lot of sense to me. These are the main groups, and any other\nsubgroup can neatly fit into one or more of those.\n\nWith the assumption that the above numbers are somewhat accurate, it seems\nreasonable to say that any majority of those four groups should be able to\nprevent a change from happening. Maybe even any 40% of any of those groups.\nWere we to roll this all into a single count, 40% of any group of 25% of\nthe whole is 10%, so it kind of supports the idea of a 90% threshold.\nAlthough of course right now we have a 90% threshold on just miner\nsignaling. But since that's the only direct signaling we have, I think we\nprudently erred on the safe side. But perhaps if we have something near\n100% consensus in support of a change among the other 3 categories, perhaps\nwe could safely reduce the miner signaling quite a bit, perhaps not to 60%\n(because of chain split concerns) but perhaps to 70% or 75%.\n\n> what tests can we devise to measure those levels of support directly? If\nwe can't measure it directly, can we measure different indicators that\nwould help us infer or solve for the knowledge we want?\n\nFor 3 of the 4 groups, there seems to me clear mechanisms we can use:\n* Holders: Something akin to my coin-weighted polling proposal here\n<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020146.html>\n.\n* Transactors: Something akin to your transaction signaling proposal above.\nTho I would strongly suggest removing the tie between miner signaling and\ntransaction signaling to make it purely informational.\n* Miner signaling as usual, or perhaps extended to provide a way for miners\nto actively signal against a change\n<https://github.com/fresheneesz/bip-trinary-version-signaling>.\n\nFor developers, I would say we probably need to come to consensus with\ndiscussion, but hopefully we could be a bit more structured about it. For\nexample, we could get rough measures of consensus by gathering explicit\nreviews on a proposal. Opinions like \"I don't like it\" or \"This is great,\nlet's do it!\" would count for very little, reviews that look into a\nparticular section deeply or review the broad idea as a whole would count a\nbit more, and reviews that discuss many good points and reasons about a\nlarge fraction of the proposal would carry even more weight. This is of\ncourse again subjective, but at least it would provide a framework to work\nwithin, and a way to at least approximate a developer consensus weighted by\nactual knowledge of and thought put into the subject. If we went further to\nattempt to collect together these reviews in a structured way, it would\nmake it easier for someone to relatively quickly (ie by spending a few\nhours reading through reviews) verify for themselves approximately what\nconsensus \"is\".\n\n> 3. Can any of the answers to #2 be \"gamed\"?\n\nAs long as we understand the limitations of the measurements, I don't think\nthey can be gamed. However, they can leave a lot of room for doubt. Eg, a\ncoin-weighted poll might only have a response rate of 5% of the coin. If we\nallow signals to both support or oppose a change, I think that would\nsubstantially increase the meaningfulness of the data - at least we know\nthe consensus among those who care / are aware enough to signal (without\nallowing opposition signaling, a low response rate means we have no idea\nhow many of the non signalers oppose a thing).\n\nThe transaction signaling can be gamed a bit, because someone can simply\nspend more money to send more signals. This might favor bad actors a bit\n(honest actors presumably wouldn't attempt to game the system).\n\nMiner signaling doesn't really seem gameable.\n\nTBH, developer consensus is probably the most gameable. All it is is talk.\nPutting coin weight behind it would bias things, and often the\nloudest/frequentest talkers get an advantage. Putting some major thought\ninto how to de-bias developer consensus seems like the most important thing\nto figure out.\n\n> Perhaps .. we are doomed to this painful process of arguing .. until\nthere's only one opinion left standing.. However, if this is the case, I\ndon't think we can honestly claim that devs don't control the protocol.\n\nIf we argue until the last left standing, is it even \"the developers\" in\ncontrol? Might it rather be the talkers, the yellers, the busy bodies? I\ncan't think of anyone worse being in control. I very much hope we're not\ndoomed to that fate. However, to avoid it, we need to come up with a\nlogical solution that is defendable and encodable into the social fabric of\nbitcoin (just like sound money and nacho keys nacho cheese).\n\nOn Thu, Apr 28, 2022 at 12:18 AM Billy Tetrud <billy.tetrud at gmail.com>\nwrote:\n\n>   @Felipe\n> > the consensus should follow the current line: discussions and tests\n> carried out by experts. We all know that the most important devs have the\n> most weight in discussions. And that's how it should be\n>\n> We have up til this point been miraculously lucky that the vast majority\n> of prominent bitcoin developers are in relative alignment on the big\n> picture philosophy and have all seemed to be honest and open in general.\n> However, we cannot rely on this era of philosopher kings to continue.\n> Relying on experts in this way is an enormous attack vector. It should not\n> be the \"most important\" devs who carry the most weight, but weight should\n> be carried by the logic of what is being said. The speaker should ideally\n> not matter in consensus building. So I agree with Keagan's implication that\n> this is not how bitcoin should govern itself. We should move away from\n> appeals to authority towards something more amorphous and difficult to\n> control.\n>\n> @Jeremy\n> > if there were a way to sign with a NUMS point for ring signature\n> purposes\n>\n> Do you have any link you could point to about NUMS points? I assume this\n> would be a way to aggregate coin-weighted signals in a way that helps hide\n> who signaled in what direction?\n>\n> > if NUMS points are common these ring signatures protocols might not be\n> too useful for collecting signals\n>\n> I'm curious: why is it better if its less common? I'm used to privacy\n> properties increasing as the privacy technique used becomes more common.\n>\n> @Erik\n> > it doesn't address the \"what about people who don't know there's a vote\n> going on\"\n> > how nonexperts can \"have a say\" when they simply don't understand the\n> relevant issues.\n>\n> I think a useful way to think about this is in terms of preferences and\n> representation, rather than in the terms of coming to the best technical\n> solution. The fact of the matter is that value is subjective and therefore\n> there is no \"best\" technical solution all the time. Sometimes the\n> preferences of stakeholders must be weighed and a compromise come to.\n> Hopefully most of these kinds of compromises can happen in the free market\n> on upper layers. But certainly some of them happen on the consensus layer.\n>\n> An expert with deep knowledge can deeply understand a design or change\n> well enough to come to a full opinion about it according to their\n> preferences. But even other experts might not have read enough about a\n> thing, or just don't have time to delve deeply into that particular aspect.\n> They'll have to rely partly on their ability to make a determination from\n> partial knowledge and their ability to evaluate the trustworthiness and\n> skill of those who have deeper knowledge than them. Nonexperts and\n> non-technical people have to rely on those kinds of things even more so.\n> Many people only have social signals to rely on. What do the people they\n> trust say?\n>\n> I believe that the truth gets out eventually. Those who have deep\n> knowledge will eventually convince those who don't, tho that may take a\n> long time to play out. As annoying as the twitterati is, I think we should\n> get used to needing to give their opinions a bit of weight in terms of\n> measuring consensus. Of course, we shouldn't be making technical decisions\n> based on what nontechnical people want or think, however, what we should do\n> is make sure that we are explaining the changes we propose to make clearly\n> enough that a certainly level of comfort diffuses into the social circles\n> of people who care about bitcoin but don't understand it at a technical\n> enough level to participate in technical decision making. At a certain\n> point, if not enough people are comfortable with a change, the change\n> shouldn't be made yet until enough people are convinced its probably safe\n> and probably good. Think of the large set of non-technical people to be a\n> glue that connects together otherwise unconnected pockets of wisdom.\n>\n> Doing things this way would almost certainly lead to slower development.\n> But development of the consensus layer slowing over time should be what we\n> all expect, and I daresay what we should all want eventually.\n>\n> > it will just be a poll of \"people who pay attention to the dev list and\n> maybe some irc rooms\"\n>\n> Maybe. But if there were mechanisms for broader consensus measuring,\n> perhaps more would pay attention. Perhaps some way to affect change would\n> lead more to have discussions and participate.\n>\n> Even if its a small group at first, I think it would be very useful\n> information to see both who explicitly supports something, who explicitly\n> is against something, and also who is paying attention but neutral (maybe\n> even actively signaling as \"neutral').\n>\n> > unless there's a great ux around the tooling my guess is that it won't\n> garner a lot of meaningful data:\n>\n> I agree. Tooling would be very important here.\n>\n>\n>\n>\n>\n>\n>\n> On Wed, Apr 27, 2022 at 3:13 PM Erik Aronesty <erik at q32.com> wrote:\n>\n>>\n>>>\n>>> Have you taken a look at my proposal\n>>> <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020146.html>?\n>>> The proposal is, to be clear, *not* \"voting\" but rather polling that isn't\n>>> programmatically connected to activation. The intention is for people\n>>> (developers) to look at the polling results and make an educated analysis\n>>> of it as far as how it should contribute to consensus gathering.\n>>>\n>>\n>> it's cool, and i agree it's somewhat censorship resistant\n>>\n>>\n>>> Let's say everyone who participates in polling broadcasts it along the\n>>> bitcoin network (a separate network would probably be better, so as to not\n>>> interfere with normal bitcoin, but I digress),\n>>>\n>>\n>> right, anyone can then publish a json file with polling aggregates at a\n>> certain block height and anyone can quickly check to see if they are lying\n>> or missing data\n>>\n>>\n>>> Similar structures could be added to any script configuration to allow\n>>> signing of polls without any significant exposure.\n>>>\n>>\n>> rubin's suggestion around tapscript anon voting could help with anonymity\n>>\n>> .... all of this is cool ...\n>>\n>> but it doesn't address the \"what about people who don't know there's a\n>> vote going on\"  or other the other social issues with \"weighted polling\" in\n>> general, like how nonexperts can \"have a say\" when they simply don't\n>> understand the relevant issues.  i personally feel like i'm \"only a very\n>> little bit up on the issues\" and i have more tech knowledge than most\n>> people i know\n>>\n>> also, it will just be a poll of \"people who pay attention to the dev list\n>> and maybe some irc rooms\"\n>>\n>> might be worth experimenting with... but unless there's a great ux around\n>> the tooling my guess is that it won't garner a lot of meaningful data:\n>>\n>> open source, simple cli, gitian build, installs easily on all platforms,\n>> works well with bitcoind rpc, works with ledger, can import a seed, etc.\n>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220428/4eac8acc/attachment-0001.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2022-04-28T16:35:32",
                "message_text_only": "@Zman\n> if two people are perfectly rational and start from the same information,\nthey *will* agree\n\nI take issue with this. I view the word \"rational\" to mean basically\nlogical. Someone is rational if they advocate for things that are best for\nthem. Two humans are not the same people. They have different circumstances\nand as a result different goals. Two actors with different goals will\ninevitably have things they rationally and logically disagree about. There\nis no universal rationality. Even an AI from outside space and time is\nincredibly likely to experience at least some value drift from its peers.\n\n> 3.  Can we actually have the goals of all humans discussing this topic\nall laid out, *accurately*?\n\nI think this would be a very useful exercise to do on a regular basis. This\nconversation is a good example, but conversations like this are rare. I\ntried to discuss some goals\n<https://github.com/fresheneesz/bitcoinThroughputAnalysis#general-goals> we\nmight want bitcoin to have in a paper I wrote about throughput bottlenecks.\nComing to a consensus around goals, or at very least identifying various\ncompeting groupings of goals would be quite useful to streamline\nconversations and to more effectively share ideas.\n\n@Nadav\n> 1. There's a real cost attached to voting\n\nThis is IMO a huge downside. It prevents many from participating at all.\nAnd it also give a big advantage to those who have a large monetary\nconsequence. It exacerbates the common problem in votes where special\ninterests spend lots of time and money to get something passed that is bad\noverall, while its not bad enough for most people to spend time and money\nopposing it.\n\n> 3. Custodians don't get disproportionate voting power with their\ncustomers' funds (not without getting themselves into fractional reserve,\nat least).\n\nI disagree. A. they already have fractional reserve most likely, but you're\nright that it would cut into their normal rehypothication. But B.\ncustodians would definitely have an advantage because of holding people's\nfunds. They can use those funds however they want. If they think this vote\nis more valuable to them then their normal rehypothication, they can direct\na lot of funds.\n\n> 5. Selling your vote if you're disinterested in the outcome isn't a\nno-brainer like in the naive scheme.\n\nThis is a good point, and is something I missed above when I was talking\nabout coin-weighted polling. However, literally all signaling of any kind\nis subject to this kind of thing, unless you do something like blind voting\n(where the voter can't prove how they voted to a would be vote buyer). Not\nsure how you'd do blind voting in a way people can trust. Then again, if\nthese things aren't actually voting, and its quite likely that people would\ntalk about any significant vote buying effort, its possible that such an\neffort could be adjusted for.\n\nOn Thu, Apr 28, 2022 at 11:09 AM Billy Tetrud <billy.tetrud at gmail.com>\nwrote:\n\n> @Keagan\n> > we have to have a way (formalized or not) of deciding when the \"lesser\n> experts\" in aggregate have better judgement.\n>\n> I agree. Its certainly convenient for development speed to limit the\n> number of cooks in the kitchen. But for the largest cryptocurrency in the\n> world, we're going to have to face the reality that the number of\n> stakeholders has grown vastly larger than the developer community and those\n> who implicitly trust the developer community, or any particular part of the\n> dev community working on any particular upgrade.\n>\n> > Perhaps it warrants zooming out beyond even what my proposal aims to\n> solve\n>\n> I very much like the way you framed the question, and I think these are\n> important, potentially existential questions we should urge the bitcoin\n> community to think deeply about.\n>\n> > 1. ...  what would be the threshold for saying \"this consensus change is\n> ready for activation\"?\n>\n> This is indeed the basic question.\n>\n> > 1a. Does that threshold change based on the nature of the consensus\n> change\n>\n> I don't think the threshold of consensus changes should depend on the type\n> of consensus change. Any consensus change, no matter how small, introduces\n> risk, can cause bugs, can open a back door. Naturally, simpler changes\n> should be able to *reach* consensus faster, because presumably it would\n> take less analysis, and be easier to explain and convince people of. But\n> that doesn't mean the bar of consensus should be lower. I think it should\n> not. A change may look small and innocuous when it is in fact not, and it\n> would be less than ideal for people to try to pretend there's sufficient\n> consensus by insisting that a change is so \"small\" that no more is needed.\n>\n> > 1b. Do different constituencies (end users, wallets, exchanges, coinjoin\n> coordinators, layer2 protocols, miners) have a desired minimum or maximum\n> representation in this \"threshold\"?\n>\n> There is a lot to say about this simple question. I think it should be\n> recognized that the \"say\" anyone or any group has depends on their total\n> future (or perhaps only total near-term) economic influence on the network.\n> This is related to the concept of the \"economic majority\". What is the\n> \"economic majority\"? We could say this depends exactly on the proportion of\n> bitcoin you own, but I don't think that would be quite right. For example,\n> a miner that (hypothetically) keeps no bitcoin except for what is being\n> changed into fiat has an important role and significant economic influence\n> on bitcoin. Miners provide a service. Their livelihood depends on\n> bitcoiners, and the livelihood of bitcoin depends in part on miners.\n> Similarly, a vendor who accepts bitcoin directly but converts it all to\n> fiat provides a service as well. They expand the network of where bitcoin\n> is directly useful. People willing to pay for things in bitcoin also\n> similarly expand bitcoin's network.\n>\n> I think it only makes sense to align incentives and attempt to match the\n> amount of representation a group gets to the amount of economic influence\n> they have on the network. To do otherwise would invite a schism.\n>\n> Based on the above, I'm thinking that there are only really two components\n> of what should comprise the weight of any person or group's say: 1. the\n> stake they have in bitcoin, and 2. the value they provide to bitcoin. Let\n> me elaborate:\n>\n> Bitcoin has a purpose. That purpose is as a currency. The directly\n> valuable aspects of that are as a store of value and as a means of\n> exchange. The properties of bitcoin lead to benefits to using it as both of\n> those things. Therefore, the stake people have in holding bitcoin should\n> count heavily because the value of holding is a major purpose of bitcoin.\n> But at the same time the ability to transact bitcoin should also count\n> pretty heavily because its also a major purpose of bitcoin and at the same\n> time accepting or spending bitcoin expands the network. If we were able to\n> economically equate those two things, we might get closer to a way to\n> figure out how to ideally distribute representation. Similarly, we could\n> add miners and developers into this mix, comparing them based on the value\n> they provide to the network.\n>\n> So let:\n> holdAmount = the value of bitcoin they're holding over a given period of\n> time T\n> transactionVolume = the volume of transaction value over a given period of\n> time T\n> miningVolume = the value of bitcoin they mined over time period T\n> technologyValue = the value of new technological developments produced\n> over time period T\n>\n> A group's representation should =\n> (holdAmount*A + transactionVolume*B + miningVolume*C + technologyValue*D)\n> /\n> (totalLiveBitcoin*A + totalTransactionVolume*B + totalMiningVolume*C +\n> totalTechnologyValue*D)\n>\n> where A through D are constants that relate the value of holding vs the\n> value of transacting vs the value of mining vs the value of building\n> bitcoin technology. We could split this up so that eg the representation\n> that holders in total should have just by holding is: A/(A+B+C+D)\n>\n> For example, an equivalence could be: how much value does holding bitcoin\n> give the average user per year? How much value does transacting give the\n> average user per year? These are fuzzy and subjective and potentially\n> dubious, but bare with me. Let's say that on average, a holder gets a\n> benefit of 2% of their holdings per year (on a risk adjusted basis). That\n> would be a benefit of $13.25 billion per year. And let's say that the ~$1.642\n> trillion of transactions per year\n> <https://data.nasdaq.com/data/BCHAIN/ETRVU-bitcoin-estimated-transaction-volume-usd> bitcoin\n> is doing has about 33% being actual exchanges of goods and services\n> <https://www.newsbtc.com/tech/only-33-of-bitcoin-payments-used-to-purchase-goods-economic-value-in-question/> and\n> for that 33% the transactors in sum also get a benefit of about 2% of the\n> transacted amount. That would be a benefit of $10.8 billion per year. If we\n> proxy the value of bitcoin mining to the network as the revenue they\n> received, perhaps this is as much as $15.3 billion\n> <https://www.prnewswire.com/news-releases/bitcoin-miners-revenue-rose-206-in-2021-301482452.html#:~:text=The%20report%20finds%20that%20on,in%20terms%20of%20Bitcoin%20mining.>.\n> How do we calculate the value of developers? I don't know a good proxy for\n> that. But for kicks, why don't we say its as much as miners at $15.3\n> billion.\n>\n> Using these numbers, the representation for each:\n>\n> Holders: 13.25/(13.25+10.8+15.3+15.3) = 24%\n> Transactors: 10.8/(13.25+10.8+15.3+15.3) = 20%\n> Miners:  15.3/(13.25+10.8+15.3+15.3) = 27%\n> Developers: Also 27%\n>\n> Maybe we could approximate that as each of the four categories has a 1/4th\n> share of representation. Values of A through D are certainly up for debate.\n>\n> In any case, to get back to the question at hand (1b), I don't see any\n> reason to think there's a minimum or maximum representation for each\n> primary constituency. However, there would of course be minimum and maximum\n> bounds on our confidence for how much value/stake each constituency has,\n> and therefore a confidence range on how much representation they should\n> have.\n>\n> But this 4 part group of holders, transactors, miners, and developers\n> seems to make a lot of sense to me. These are the main groups, and any\n> other subgroup can neatly fit into one or more of those.\n>\n> With the assumption that the above numbers are somewhat accurate, it seems\n> reasonable to say that any majority of those four groups should be able to\n> prevent a change from happening. Maybe even any 40% of any of those groups.\n> Were we to roll this all into a single count, 40% of any group of 25% of\n> the whole is 10%, so it kind of supports the idea of a 90% threshold.\n> Although of course right now we have a 90% threshold on just miner\n> signaling. But since that's the only direct signaling we have, I think we\n> prudently erred on the safe side. But perhaps if we have something near\n> 100% consensus in support of a change among the other 3 categories, perhaps\n> we could safely reduce the miner signaling quite a bit, perhaps not to 60%\n> (because of chain split concerns) but perhaps to 70% or 75%.\n>\n> > what tests can we devise to measure those levels of support directly? If\n> we can't measure it directly, can we measure different indicators that\n> would help us infer or solve for the knowledge we want?\n>\n> For 3 of the 4 groups, there seems to me clear mechanisms we can use:\n> * Holders: Something akin to my coin-weighted polling proposal here\n> <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020146.html>\n> .\n> * Transactors: Something akin to your transaction signaling proposal\n> above. Tho I would strongly suggest removing the tie between miner\n> signaling and transaction signaling to make it purely informational.\n> * Miner signaling as usual, or perhaps extended to provide a way for\n> miners to actively signal against a change\n> <https://github.com/fresheneesz/bip-trinary-version-signaling>.\n>\n> For developers, I would say we probably need to come to consensus with\n> discussion, but hopefully we could be a bit more structured about it. For\n> example, we could get rough measures of consensus by gathering explicit\n> reviews on a proposal. Opinions like \"I don't like it\" or \"This is great,\n> let's do it!\" would count for very little, reviews that look into a\n> particular section deeply or review the broad idea as a whole would count a\n> bit more, and reviews that discuss many good points and reasons about a\n> large fraction of the proposal would carry even more weight. This is of\n> course again subjective, but at least it would provide a framework to work\n> within, and a way to at least approximate a developer consensus weighted by\n> actual knowledge of and thought put into the subject. If we went further to\n> attempt to collect together these reviews in a structured way, it would\n> make it easier for someone to relatively quickly (ie by spending a few\n> hours reading through reviews) verify for themselves approximately what\n> consensus \"is\".\n>\n> > 3. Can any of the answers to #2 be \"gamed\"?\n>\n> As long as we understand the limitations of the measurements, I don't\n> think they can be gamed. However, they can leave a lot of room for doubt.\n> Eg, a coin-weighted poll might only have a response rate of 5% of the coin.\n> If we allow signals to both support or oppose a change, I think that would\n> substantially increase the meaningfulness of the data - at least we know\n> the consensus among those who care / are aware enough to signal (without\n> allowing opposition signaling, a low response rate means we have no idea\n> how many of the non signalers oppose a thing).\n>\n> The transaction signaling can be gamed a bit, because someone can simply\n> spend more money to send more signals. This might favor bad actors a bit\n> (honest actors presumably wouldn't attempt to game the system).\n>\n> Miner signaling doesn't really seem gameable.\n>\n> TBH, developer consensus is probably the most gameable. All it is is talk.\n> Putting coin weight behind it would bias things, and often the\n> loudest/frequentest talkers get an advantage. Putting some major thought\n> into how to de-bias developer consensus seems like the most important thing\n> to figure out.\n>\n> > Perhaps .. we are doomed to this painful process of arguing .. until\n> there's only one opinion left standing.. However, if this is the case, I\n> don't think we can honestly claim that devs don't control the protocol.\n>\n> If we argue until the last left standing, is it even \"the developers\" in\n> control? Might it rather be the talkers, the yellers, the busy bodies? I\n> can't think of anyone worse being in control. I very much hope we're not\n> doomed to that fate. However, to avoid it, we need to come up with a\n> logical solution that is defendable and encodable into the social fabric of\n> bitcoin (just like sound money and nacho keys nacho cheese).\n>\n> On Thu, Apr 28, 2022 at 12:18 AM Billy Tetrud <billy.tetrud at gmail.com>\n> wrote:\n>\n>>   @Felipe\n>> > the consensus should follow the current line: discussions and tests\n>> carried out by experts. We all know that the most important devs have the\n>> most weight in discussions. And that's how it should be\n>>\n>> We have up til this point been miraculously lucky that the vast majority\n>> of prominent bitcoin developers are in relative alignment on the big\n>> picture philosophy and have all seemed to be honest and open in general.\n>> However, we cannot rely on this era of philosopher kings to continue.\n>> Relying on experts in this way is an enormous attack vector. It should not\n>> be the \"most important\" devs who carry the most weight, but weight should\n>> be carried by the logic of what is being said. The speaker should ideally\n>> not matter in consensus building. So I agree with Keagan's implication that\n>> this is not how bitcoin should govern itself. We should move away from\n>> appeals to authority towards something more amorphous and difficult to\n>> control.\n>>\n>> @Jeremy\n>> > if there were a way to sign with a NUMS point for ring signature\n>> purposes\n>>\n>> Do you have any link you could point to about NUMS points? I assume this\n>> would be a way to aggregate coin-weighted signals in a way that helps hide\n>> who signaled in what direction?\n>>\n>> > if NUMS points are common these ring signatures protocols might not be\n>> too useful for collecting signals\n>>\n>> I'm curious: why is it better if its less common? I'm used to privacy\n>> properties increasing as the privacy technique used becomes more common.\n>>\n>> @Erik\n>> > it doesn't address the \"what about people who don't know there's a vote\n>> going on\"\n>> > how nonexperts can \"have a say\" when they simply don't understand the\n>> relevant issues.\n>>\n>> I think a useful way to think about this is in terms of preferences and\n>> representation, rather than in the terms of coming to the best technical\n>> solution. The fact of the matter is that value is subjective and therefore\n>> there is no \"best\" technical solution all the time. Sometimes the\n>> preferences of stakeholders must be weighed and a compromise come to.\n>> Hopefully most of these kinds of compromises can happen in the free market\n>> on upper layers. But certainly some of them happen on the consensus layer.\n>>\n>> An expert with deep knowledge can deeply understand a design or change\n>> well enough to come to a full opinion about it according to their\n>> preferences. But even other experts might not have read enough about a\n>> thing, or just don't have time to delve deeply into that particular aspect.\n>> They'll have to rely partly on their ability to make a determination from\n>> partial knowledge and their ability to evaluate the trustworthiness and\n>> skill of those who have deeper knowledge than them. Nonexperts and\n>> non-technical people have to rely on those kinds of things even more so.\n>> Many people only have social signals to rely on. What do the people they\n>> trust say?\n>>\n>> I believe that the truth gets out eventually. Those who have deep\n>> knowledge will eventually convince those who don't, tho that may take a\n>> long time to play out. As annoying as the twitterati is, I think we should\n>> get used to needing to give their opinions a bit of weight in terms of\n>> measuring consensus. Of course, we shouldn't be making technical decisions\n>> based on what nontechnical people want or think, however, what we should do\n>> is make sure that we are explaining the changes we propose to make clearly\n>> enough that a certainly level of comfort diffuses into the social circles\n>> of people who care about bitcoin but don't understand it at a technical\n>> enough level to participate in technical decision making. At a certain\n>> point, if not enough people are comfortable with a change, the change\n>> shouldn't be made yet until enough people are convinced its probably safe\n>> and probably good. Think of the large set of non-technical people to be a\n>> glue that connects together otherwise unconnected pockets of wisdom.\n>>\n>> Doing things this way would almost certainly lead to slower development.\n>> But development of the consensus layer slowing over time should be what we\n>> all expect, and I daresay what we should all want eventually.\n>>\n>> > it will just be a poll of \"people who pay attention to the dev list and\n>> maybe some irc rooms\"\n>>\n>> Maybe. But if there were mechanisms for broader consensus measuring,\n>> perhaps more would pay attention. Perhaps some way to affect change would\n>> lead more to have discussions and participate.\n>>\n>> Even if its a small group at first, I think it would be very useful\n>> information to see both who explicitly supports something, who explicitly\n>> is against something, and also who is paying attention but neutral (maybe\n>> even actively signaling as \"neutral').\n>>\n>> > unless there's a great ux around the tooling my guess is that it won't\n>> garner a lot of meaningful data:\n>>\n>> I agree. Tooling would be very important here.\n>>\n>>\n>>\n>>\n>>\n>>\n>>\n>> On Wed, Apr 27, 2022 at 3:13 PM Erik Aronesty <erik at q32.com> wrote:\n>>\n>>>\n>>>>\n>>>> Have you taken a look at my proposal\n>>>> <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020146.html>?\n>>>> The proposal is, to be clear, *not* \"voting\" but rather polling that isn't\n>>>> programmatically connected to activation. The intention is for people\n>>>> (developers) to look at the polling results and make an educated analysis\n>>>> of it as far as how it should contribute to consensus gathering.\n>>>>\n>>>\n>>> it's cool, and i agree it's somewhat censorship resistant\n>>>\n>>>\n>>>> Let's say everyone who participates in polling broadcasts it along the\n>>>> bitcoin network (a separate network would probably be better, so as to not\n>>>> interfere with normal bitcoin, but I digress),\n>>>>\n>>>\n>>> right, anyone can then publish a json file with polling aggregates at a\n>>> certain block height and anyone can quickly check to see if they are lying\n>>> or missing data\n>>>\n>>>\n>>>> Similar structures could be added to any script configuration to allow\n>>>> signing of polls without any significant exposure.\n>>>>\n>>>\n>>> rubin's suggestion around tapscript anon voting could help with anonymity\n>>>\n>>> .... all of this is cool ...\n>>>\n>>> but it doesn't address the \"what about people who don't know there's a\n>>> vote going on\"  or other the other social issues with \"weighted polling\" in\n>>> general, like how nonexperts can \"have a say\" when they simply don't\n>>> understand the relevant issues.  i personally feel like i'm \"only a very\n>>> little bit up on the issues\" and i have more tech knowledge than most\n>>> people i know\n>>>\n>>> also, it will just be a poll of \"people who pay attention to the dev\n>>> list and maybe some irc rooms\"\n>>>\n>>> might be worth experimenting with... but unless there's a great ux\n>>> around the tooling my guess is that it won't garner a lot of meaningful\n>>> data:\n>>>\n>>> open source, simple cli, gitian build, installs easily on all platforms,\n>>> works well with bitcoind rpc, works with ledger, can import a seed, etc.\n>>>\n>>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220428/7beecb19/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2022-04-30T06:14:45",
                "message_text_only": "Good morning Billy,\n\n> @Zman\n> > if two people are perfectly rational and start from the same information, they *will* agree\n> I take issue with this. I view the word \"rational\" to mean basically logical. Someone is rational if they advocate for things that are best for them. Two humans are not the same people. They have different circumstances and as a result different goals. Two actors with different goals will inevitably have things they rationally and logically disagree about. There is no universal rationality. Even an AI from outside space and time is incredibly likely to experience at least some value drift from its peers.\n\nNote that \"the goal of this thing\" is part of the information where both \"start from\" here.\n\nEven if you and I have different goals, if we both think about \"given this goal, and these facts, is X the best solution available?\" we will both agree, though our goals might not be the same as each other, or the same as \"this goal\" is in the sentence.\nWhat is material is simply that the laws of logic are universal and if you include the goal itself as part of the question, you will reach the same conclusion --- but refuse to act on it (and even oppose it) because the goal is not your own goal.\n\nE.g. \"What is the best way to kill a person without getting caught?\" will probably have us both come to the same broad conclusion, but I doubt either of us has a goal or sub-goal to kill a person.\nThat is: if you are perfectly rational, you can certainly imagine a \"what if\" where your goal is different from your current goal and figure out what you would do ***if*** that were your goal instead.\n\nIs that better now?\n\n> > 3. Can we actually have the goals of all humans discussing this topic all laid out, *accurately*?\n> I think this would be a very useful exercise to do on a regular basis. This conversation is a good example, but conversations like this are rare. I tried to discuss some goals we might want bitcoin to have in a paper I wrote about throughput bottlenecks. Coming to a consensus around goals, or at very least identifying various competing groupings of goals would be quite useful to streamline conversations and to more effectively share ideas.\n\n\nUsing a future market has the attractive property that, since money is often an instrumental sub-goal to achieve many of your REAL goals, you can get reasonably good information on the goals of people without them having to actually reveal their actual goals.\nAlso, irrationality on the market tends to be punished over time, and a human who achieves better-than-human rationality can gain quite a lot of funds on the market, thus automatically re-weighing their thoughts higher.\n\nHowever, persistent irrationalities embedded in the design of the human mind will still be difficult to break (it is like a program attempting to escape a virtual machine).\nAnd an uninformed market is still going to behave pretty much randomly.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Ryan Grant",
                "date": "2022-04-27T15:27:23",
                "message_text_only": "We had a UTXO proof-of-stake website at some point during the\nblocksize wars.  A few people signed with a few thousand bitcoins, but\nit was clear that most were not participating.  I don't have a link.\n\nAnother old discussion link:\n  https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-June/002731.html\n\nErik Aronesty listed good issues, a few minutes ago.\n\nOther issues:\n  - you're feeding the Chainalysis beasts, when hodlers move their UTXOs;\n  - signalling should be weighted by Bitcoin Days Destroyed [ref_bdd];\n  - Coinbase.com's interests are not sufficiently aligned to poll them; and\n  - yuk, it's voting.\n\nWithout supporting voting, I wish to note there is also one more way\nto de-Sybil, via network analysis, historically labeled the Web of\nTrust.  It can be algorithmically blinded so as not to fit strongly\ninto your \"KYC\" category, despite using assertions about people that\ndo know each other as a ground truth.\n\n[ref_bdd:]\n  https://en.bitcoin.it/wiki/Bitcoin_Days_Destroyed"
            },
            {
                "author": "micaroni at gmail.com",
                "date": "2022-04-27T17:22:07",
                "message_text_only": "The idea seems interesting at first glance, but soon we see several\nproblems. The biggest problem with votes of this type is that they can be\neasily manipulated. Imagine a powerful attacker who impersonates someone in\ngood faith and arrives with a proposal that looks great but has dark ends\nbehind it (and that no one has simply noticed yet). It would be enough for\nthis attacker to convince major wallets, major exchanges and even\nindividuals to believe him. It could be with a good marketing campaign or\neven buying these people. This would create a \"false consensus\", a\nmisconception of what consensus means.\n\nFor me, the consensus should follow the current line: discussions and tests\ncarried out by experts. We all know that the most important devs have the\nmost weight in discussions. And that's how it should be, because they\nunderstand far better than any other lowly mortal. Consensus simply means\nthat there are not at least two or three important people opposing the idea\nwith solid arguments. Is it very subjective and difficult? Yes. For sure.\nWe all yearn for objective answers or methods. However, any method would\nfail. At the end, after numerous discussions and an apparent consensus, the\nobjective answer and the real consensus will be obtained in the network, in\nthe nodes upgrading. If there is a big war, the network will end up\nsplitting in two, as it has in the past. To avoid any unwanted splits we\ndiscuss for exhaustion here in the list.\n\nI don't think flagging transactions would be a good method to measure this\nsort of thing. You are handing important technical discussions into the\nhands of those who have no idea about the subject.\n\nFelipe.\n\nOn Tue, Apr 26, 2022 at 5:12 PM Keagan McClelland via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi all,\n>\n> Alongside the debate with CTV right now there's a second debate that was\n> not fully hashed out in the activation of Taproot. There is a lot of\n> argument around what Speedy Trial is or isn't, what BIP8 T/F is or isn't\n> etc. A significant reason for the breakdown in civility around this debate\n> is that because we don't have a means of measuring user support for\n> proposed sof-fork changes, it invariably devolves into people claiming that\n> their circles support/reject a proposal, AND that their circles are more\n> broadly representative of the set of Bitcoin users as a whole.\n>\n> It seems everyone in this forum has at one point or another said \"I would\n> support activation of ____ if there was consensus on it, but there isn't\".\n> This statement, in order to be true, requires that there exist a set of\n> conditions that would convince you that there is consensus. People have\n> tried to dodge this question by saying \"it's obvious\", but the reality is\n> that it fundamentally isn't. My bubble has a different \"obvious\" answer\n> than any of yours.\n>\n> Secondly, due to the trauma of the block size wars, no one wants to utter\n> a statement that could imply that miners have any influence over what\n> rulesets get activated or don't. As such \"miner signaling\" is consistently\n> devalued as a signal for market demand. I don't think this is reasonable\n> since following the events of '17  miners are aware that they have the\n> strong incentive that they understand market demand. Nevertheless, as it\n> stands right now the only signal we have to work with is miner signaling,\n> which I think is rightly frustrating to a lot of people.\n>\n> So how can we measure User Support for a proposed rule change?\n>\n> I've had this idea floating around in the back of my head for a while, and\n> I'd like to solicit some feedback here. Currently, all forms of activation\n> that are under consideration involve miner signaling in one form or\n> another. What if we could make it such that users could more directly\n> pressure miners to act on their behalf? After all, if miners are but the\n> humble servants of user demands, this should be in alignment with how\n> people want Bitcoin to behave.\n>\n> Currently, the only means users have of influencing miner decisions are A.\n> rejection of blocks that don't follow rules and B. paying fees for\n> transaction inclusion. I suggest we combine these in such a way that\n> transactions themselves can signal for upgrade. I believe (though am not\n> certain) that there are \"free\" bits in the version field of a transaction\n> that are presently ignored. If we could devise a mapping between some of\n> those free bits, and the signaling bits in the block header, it would be\n> possible to have rules as follows:\n>\n> - A transaction signaling in the affirmative MUST NOT be included in a\n> block that does not signal in the affirmative\n> - A transaction that is NOT signaling MAY be included in a block\n> regardless of that block's signaling vector\n> - (Optional) A transaction signaling in the negative MUST NOT be included\n> in a block that signals in the affirmative\n>\n> Under this set of conditions, a user has the means of sybil-resistant\n> influence over miner decisions. If a miner cannot collect the fees for a\n> transaction without signaling, the user's fee becomes active economic\n> pressure for the miner to signal (or not, if we include some variant of the\n> negative clause). In this environment, miners could have a better view into\n> what users do want, as would the Bitcoin network at large.\n>\n> Some may take issue with the idea that people can pay for the outcome they\n> want and may try to compare a method like this to Proof of Stake, but there\n> are only 3 sybil resistant mechanisms I am aware of, and any \"real\" view\n> into what social consensus looks like MUST be sybil resistant:\n>\n> - Hashpower\n> - Proof of personhood (KYC)\n> - Capital burn/risk\n>\n> Letting hashpower decide this is the thing that is currently contentious,\n> KYC is dead on arrival both on technical and social grounds, which really\n> just leaves some means of getting capital into the process of consensus\n> measurement. This mechanism I'm proposing is measurable completely\n> en-protocol and doesn't require trust in institutions that fork futures\n> would. Additionally it could be an auxiliary feature of the soft fork\n> deployment scheme chosen making it something you could neatly package all\n> together with the deployment itself.\n>\n> There are many potential tweaks to the design I propose above:\n> 1. Do we include a notion of negative signaling (allowing for the\n> possibility of rejection)\n> 2. Do we make it such that miner signaling must be congruent with >X% of\n> transactions, where congruence is that the signal must match any\n> non-neutral signal of transaction.\n>\n> Some anticipated objections:\n>\n> 1. signaling isn't voting, no deployment should be made without consensus\n> first.\n> - yeah well we can't currently measure consensus right now, so that's not\n> a super helpful thing to say and is breeding ground for abuse in the form\n> of certain people making the unsubstantiated claim that consensus does or\n> does not exist for a particular initiative\n>\n> 2. This is just a proposal for \"pay to play\", we should not let the\n> wealthy make consensus decisions.\n> - I agree that wealth should not be able to strong-arm decision making.\n> But the status quo seems even worse where we let publicly influential\n> people decide consensus in such a way where not only do they not \"lose\n> ammunition\" in the process of campaigning, but actually accrue it, creating\n> really bad long-term balances of power.\n>\n> 3. Enforcing this proposal requires its own soft fork.\n> - Yes. It does...and there's a certain cosmic irony to that, but before we\n> consider how to make this happen, I'd like to even discuss whether or not\n> it's a good idea.\n>\n> 4. This gives CoinJoin pool operators and L2 protocol implementations\n> power over deciding consensus.\n> - I see this as an improvement over the status quo\n>\n> 5. This encourages \"spam\"\n> - If you pay the fees, it's not spam.\n>\n> The biggest question I'd like to pose to the forum is:\n> - Does a scheme like this afford us a better view into consensus than we\n> have today?\n> - Can it be gamed to give us a *worse* view into consensus? How?\n> - Does it measure the right thing? If not, what do you think is the right\n> thing to measure? (assuming we could)\n> - Should I write a BIP spec'ing this out in detail?\n>\n> Cheers,\n> Keagan\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220427/9aa1ef81/attachment.html>"
            },
            {
                "author": "Keagan McClelland",
                "date": "2022-04-27T18:32:33",
                "message_text_only": "Felipe,\n\n> For me, the consensus should follow the current line: discussions and\ntests carried out by experts. We all know that the most important devs have\nthe most weight in discussions. And that's how it should be, because they\nunderstand far better than any other lowly mortal. Consensus simply means\nthat there are not at least two or three important people opposing the idea\nwith solid arguments. Is it very subjective and difficult? Yes. For sure.\nWe all yearn for objective answers or methods. However, any method would\nfail. At the end, after numerous discussions and an apparent consensus, the\nobjective answer and the real consensus will be obtained in the network, in\nthe nodes upgrading. If there is a big war, the network will end up\nsplitting in two, as it has in the past. To avoid any unwanted splits we\ndiscuss for exhaustion here in the list.\n\nThis is essentially an admission that devs have control over the protocol.\nUsers \"having control\" but deferring their judgement to devs is not\nmeaningfully different than devs \"having control\". Many people have\nasserted, quite strongly, that this ought not be how Bitcoin governs\nitself. I myself am on the fence about what is practically possible or not.\nHowever, let's say that your supposition is correct. How would we protect\nagainst a corollary scenario where a dev has a proposal that looks great\nbut has dark ends that no one notices yet, if the process for evaluation\nmore or less is to defer to \"the most important devs\" expertise? Presumably\nwe hash this out in forums like this, but in order to \"override\" the \"most\nimportant devs\" we have to have a way (formalized or not) of deciding when\nthe \"lesser experts\" in aggregate have better judgement.\n\nErik,\n\n> There are many challenges with on-chain voting, here are a few:\n\nThis may be hair-splitting but I feel it important to clarify that my\nproposal isn't voting per se. Calling it that doesn't bug me, but the\nmechanics are meaningfully different than a simple tally vote which is the\nintuition that I think that term conveys. As Billy mentions this proposal\nactually requires that miners block signals from inclusion in the block if\nthey themselves do not signal. I'm not necessarily claiming this is a\nsuperior design overall, however the \"flaw\" you point out is by design in\nthis case. My goal in the proposal was really to give users a means of\napplying direct economic pressure to miners, who do inevitably play a role\nin BIP8/BIP9 activation procedure.\n\nRyan,\n\n> - you're feeding the Chainalysis beasts, when hodlers move their UTXOs;\n\nDefinitely a frightening proposition I hadn't considered. It does open up\nthe possibility of tracking individual preferences and targeting of\npolitical opponents.\n\n>   - yuk, it's voting.\n\nI don't think the process of collecting information on user preference is\nin and of itself bad. Where I think Bitcoiners really want to avoid voting\nis this notion that 51% of the constituency can bully the other 49% into\nwhatever they want. No part of my proposal suggests this, nor is it\nsomething I would want.\n\n-----\n\nI think there are a few questions surrounding the issue of soft fork\nactivation. Perhaps it warrants zooming out beyond even what my proposal\naims to solve. In my mind the most important questions surrounding this\nprocess are:\n\n1. In an ideal world, assuming we could, with perfect certainty, know\nanything we wanted about the preferences of the user base, what would be\nthe threshold for saying \"this consensus change is ready for activation\"?\n    1a. Does that threshold change based on the nature of the consensus\nchange (new script type/opcode vs. block size reduction vs. blacklisting\nUTXOs)?\n    1b. Do different constituencies (end users, wallets, exchanges,\ncoinjoin coordinators, layer2 protocols, miners) have a desired minimum or\nmaximum representation in this \"threshold\"?\n2. Given an answer from #1, what tests can we devise to measure those\nlevels of support directly? If we can't measure it directly, can we measure\ndifferent indicators that would help us infer or solve for the knowledge we\nwant?\n3. Can any of the answers to #2 be \"gamed\"? I'm defining \"game\" here to\nmean that the measurement taken, diverges from the ground truth we are\ntrying to get at in such a way that its divergence would be undetectable.\n\nIf we do not answer these sorts of questions we can get technical consensus\nthrough this messy process, but when it comes to assessing user consensus,\nit is just going to devolve into dogma and demagoguery as we each have our\nown perceptions or agendas and there is no rigorous way for anyone to\nrefute our claims. This would, again, be an admission that devs ultimately\ndo make protocol decisions. Perhaps it's unavoidable and we are doomed to\nthis painful process of arguing with one another until there's only one\nopinion left standing (either because of merit or just plain old grit).\nHowever, if this is the case, I don't think we can honestly claim that devs\ndon't control the protocol (as a group).\n\nI don't think we will have broad agreement on #1 as it is ultimately a\nvalue judgement and even the most intellectually honest people in Bitcoin\ndev are going to have different value sets. I think this is OK, to a\ndegree. But where a lot of communication breakdown occurs is when people\nare debating the properties of #2/#3 when they don't even know that there\nis disagreement between them on #1. I think that everyone having an\nindividual answer to #1 can make these discussions go a lot more smoothly\nin the technical sphere since I think most people can suspend their own\nvalues for the sake of analyzing the effectiveness of a particular\napproach. I am concerned, however, that if value differences are allowed to\nbe passed off as technical evaluations, the quality of the conversation may\nerode to the point where no meaningful advancement can happen anymore,\nsince we will lose our shared framework for understanding. If this occurs\ntoo soon, I believe quite strongly that Bitcoin will be captured through\nthe increasing power of custodial institutions.\n\nKeagan\n\nOn Wed, Apr 27, 2022 at 11:22 AM <micaroni at gmail.com> wrote:\n\n> The idea seems interesting at first glance, but soon we see several\n> problems. The biggest problem with votes of this type is that they can be\n> easily manipulated. Imagine a powerful attacker who impersonates someone in\n> good faith and arrives with a proposal that looks great but has dark ends\n> behind it (and that no one has simply noticed yet). It would be enough for\n> this attacker to convince major wallets, major exchanges and even\n> individuals to believe him. It could be with a good marketing campaign or\n> even buying these people. This would create a \"false consensus\", a\n> misconception of what consensus means.\n>\n> For me, the consensus should follow the current line: discussions and\n> tests carried out by experts. We all know that the most important devs have\n> the most weight in discussions. And that's how it should be, because they\n> understand far better than any other lowly mortal. Consensus simply means\n> that there are not at least two or three important people opposing the idea\n> with solid arguments. Is it very subjective and difficult? Yes. For sure.\n> We all yearn for objective answers or methods. However, any method would\n> fail. At the end, after numerous discussions and an apparent consensus, the\n> objective answer and the real consensus will be obtained in the network, in\n> the nodes upgrading. If there is a big war, the network will end up\n> splitting in two, as it has in the past. To avoid any unwanted splits we\n> discuss for exhaustion here in the list.\n>\n> I don't think flagging transactions would be a good method to measure this\n> sort of thing. You are handing important technical discussions into the\n> hands of those who have no idea about the subject.\n>\n> Felipe.\n>\n> On Tue, Apr 26, 2022 at 5:12 PM Keagan McClelland via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi all,\n>>\n>> Alongside the debate with CTV right now there's a second debate that was\n>> not fully hashed out in the activation of Taproot. There is a lot of\n>> argument around what Speedy Trial is or isn't, what BIP8 T/F is or isn't\n>> etc. A significant reason for the breakdown in civility around this debate\n>> is that because we don't have a means of measuring user support for\n>> proposed sof-fork changes, it invariably devolves into people claiming that\n>> their circles support/reject a proposal, AND that their circles are more\n>> broadly representative of the set of Bitcoin users as a whole.\n>>\n>> It seems everyone in this forum has at one point or another said \"I would\n>> support activation of ____ if there was consensus on it, but there isn't\".\n>> This statement, in order to be true, requires that there exist a set of\n>> conditions that would convince you that there is consensus. People have\n>> tried to dodge this question by saying \"it's obvious\", but the reality is\n>> that it fundamentally isn't. My bubble has a different \"obvious\" answer\n>> than any of yours.\n>>\n>> Secondly, due to the trauma of the block size wars, no one wants to utter\n>> a statement that could imply that miners have any influence over what\n>> rulesets get activated or don't. As such \"miner signaling\" is consistently\n>> devalued as a signal for market demand. I don't think this is reasonable\n>> since following the events of '17  miners are aware that they have the\n>> strong incentive that they understand market demand. Nevertheless, as it\n>> stands right now the only signal we have to work with is miner signaling,\n>> which I think is rightly frustrating to a lot of people.\n>>\n>> So how can we measure User Support for a proposed rule change?\n>>\n>> I've had this idea floating around in the back of my head for a while,\n>> and I'd like to solicit some feedback here. Currently, all forms of\n>> activation that are under consideration involve miner signaling in one form\n>> or another. What if we could make it such that users could more directly\n>> pressure miners to act on their behalf? After all, if miners are but the\n>> humble servants of user demands, this should be in alignment with how\n>> people want Bitcoin to behave.\n>>\n>> Currently, the only means users have of influencing miner decisions are\n>> A. rejection of blocks that don't follow rules and B. paying fees for\n>> transaction inclusion. I suggest we combine these in such a way that\n>> transactions themselves can signal for upgrade. I believe (though am not\n>> certain) that there are \"free\" bits in the version field of a transaction\n>> that are presently ignored. If we could devise a mapping between some of\n>> those free bits, and the signaling bits in the block header, it would be\n>> possible to have rules as follows:\n>>\n>> - A transaction signaling in the affirmative MUST NOT be included in a\n>> block that does not signal in the affirmative\n>> - A transaction that is NOT signaling MAY be included in a block\n>> regardless of that block's signaling vector\n>> - (Optional) A transaction signaling in the negative MUST NOT be included\n>> in a block that signals in the affirmative\n>>\n>> Under this set of conditions, a user has the means of sybil-resistant\n>> influence over miner decisions. If a miner cannot collect the fees for a\n>> transaction without signaling, the user's fee becomes active economic\n>> pressure for the miner to signal (or not, if we include some variant of the\n>> negative clause). In this environment, miners could have a better view into\n>> what users do want, as would the Bitcoin network at large.\n>>\n>> Some may take issue with the idea that people can pay for the outcome\n>> they want and may try to compare a method like this to Proof of Stake, but\n>> there are only 3 sybil resistant mechanisms I am aware of, and any \"real\"\n>> view into what social consensus looks like MUST be sybil resistant:\n>>\n>> - Hashpower\n>> - Proof of personhood (KYC)\n>> - Capital burn/risk\n>>\n>> Letting hashpower decide this is the thing that is currently contentious,\n>> KYC is dead on arrival both on technical and social grounds, which really\n>> just leaves some means of getting capital into the process of consensus\n>> measurement. This mechanism I'm proposing is measurable completely\n>> en-protocol and doesn't require trust in institutions that fork futures\n>> would. Additionally it could be an auxiliary feature of the soft fork\n>> deployment scheme chosen making it something you could neatly package all\n>> together with the deployment itself.\n>>\n>> There are many potential tweaks to the design I propose above:\n>> 1. Do we include a notion of negative signaling (allowing for the\n>> possibility of rejection)\n>> 2. Do we make it such that miner signaling must be congruent with >X% of\n>> transactions, where congruence is that the signal must match any\n>> non-neutral signal of transaction.\n>>\n>> Some anticipated objections:\n>>\n>> 1. signaling isn't voting, no deployment should be made without consensus\n>> first.\n>> - yeah well we can't currently measure consensus right now, so that's not\n>> a super helpful thing to say and is breeding ground for abuse in the form\n>> of certain people making the unsubstantiated claim that consensus does or\n>> does not exist for a particular initiative\n>>\n>> 2. This is just a proposal for \"pay to play\", we should not let the\n>> wealthy make consensus decisions.\n>> - I agree that wealth should not be able to strong-arm decision making.\n>> But the status quo seems even worse where we let publicly influential\n>> people decide consensus in such a way where not only do they not \"lose\n>> ammunition\" in the process of campaigning, but actually accrue it, creating\n>> really bad long-term balances of power.\n>>\n>> 3. Enforcing this proposal requires its own soft fork.\n>> - Yes. It does...and there's a certain cosmic irony to that, but before\n>> we consider how to make this happen, I'd like to even discuss whether or\n>> not it's a good idea.\n>>\n>> 4. This gives CoinJoin pool operators and L2 protocol implementations\n>> power over deciding consensus.\n>> - I see this as an improvement over the status quo\n>>\n>> 5. This encourages \"spam\"\n>> - If you pay the fees, it's not spam.\n>>\n>> The biggest question I'd like to pose to the forum is:\n>> - Does a scheme like this afford us a better view into consensus than we\n>> have today?\n>> - Can it be gamed to give us a *worse* view into consensus? How?\n>> - Does it measure the right thing? If not, what do you think is the right\n>> thing to measure? (assuming we could)\n>> - Should I write a BIP spec'ing this out in detail?\n>>\n>> Cheers,\n>> Keagan\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220427/f12f1111/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2022-04-28T05:26:48",
                "message_text_only": "Good morning Keagan, et al,\n\n\n\n> I think there are a few questions surrounding the issue of soft fork activation. Perhaps it warrants zooming out beyond even what my proposal aims to solve. In my mind the most important questions surrounding this process are:\n>\n> 1. In an ideal world, assuming we could, with perfect certainty, know anything we wanted about the preferences of the user base, what would be the threshold for saying \"this consensus change is ready for activation\"?\n> \u00a0 \u00a0 1a. Does that threshold change based on the nature of the consensus change (new script type/opcode vs. block size reduction vs. blacklisting UTXOs)?\n> \u00a0 \u00a0 1b. Do different constituencies (end users, wallets, exchanges, coinjoin coordinators, layer2 protocols, miners) have a desired minimum or maximum representation in this \"threshold\"?\n\nIdeally, in a consensus system, 100% should be the threshold.\nAfter all, the intent of the design of Bitcoin is that everyone should be able to use it, and the objection of even 0.01%, who would actively refuse a change, implies that set would not be able to use Bitcoin.\ni.e. \"consensus means 'everyone agrees'\"\n\nAgainst this position, the real world smashes our ideals.\nZooming out, the number of Bitcoin users in the globe is far less than 100%, and there are people who would object to the use of Bitcoin entirely.\nThis implies that the position \"consensus means 'everyone agrees'\" would imply that Bitcoin should be shut down, as it cannot help users who oppose it.\nObviously, the continued use of Bitcoin, by us and others, is not in perfect agreement with this position.\n\nLet us reconsider the result of the blocksize debate.\nA group of former-Bitcoin-users forked themselves off the Bitcoin blockchain.\nBut in effect: the opposers to SegWit were simply outright *evicted* from the set of people who are in 'everyone', in the \"consensus means 'everyone agrees'\" sense.\n(That some of them changed their mind later is immaterial --- their acceptance back into the Bitcoin community is conditional on them accepting the current Bitcoin rules.)\n\nSo obviously there is *some* threshold, that is not 100%, that we would deem gives us \"acceptable losses\".\nSo: what is the \"acceptable loss\"?\n\n--\n\nMore philosphically: the [Aumann Agreement Theorem](https://en.wikipedia.org/wiki/Aumann%27s_agreement_theorem) can be bastardized to: \"if two people are perfectly rational and start from the same information, they *will* agree\".\n\nIf humans were perfectly rational and the information was complete and accurately available beforehand, we could abduct a single convenient human being, feed them the information, and ask them what they think, and simply follow that.\nIt would be pointless to abduct a second human, since it would just agree with the first (as per the Aumann Agreement Theorem), and abducting humans is not easy or cheap.\n\nIf humans were perfectly rational and all information was complete, then there would be no need for \"representation\", you just input \"this is my goal\" and \"this is the info\" and get out \"aye\" or \"nay\", and whoever you gave those inputs to would not matter, because everyone would agree on the same conclusion.\n\nAll democracy/voting and consensus, stem from the real-world flaws of this simple theorem.\n\n1.  No human is perfectly rational in the sense required by the Aumann Agreement Theorem.\n2.  Information may be ambiguous or lacking.\n3.  Humans do not want to reveal their *actual* goals and sub-goals, because their competitors may be able to block them if the competitors knew what their goals/sub-goals were.\n\nDemocracy, and the use of some kind of high \"threshold\" in a \"consensus\" (ha, ha) system, depend on the following assumptions to \"fix\" the flaws of the Aumann Agreement Theorem:\n\n1.  With a large sample of humans, the flaws in rationality (hopefully, ha, ha) cancel out, and if we ask them *Really Nicely* they may make an effort to be a little nearer to the ideal perfect rationality.\n2.  With a large sample of humans, the incompleteness and obscureness of the necessary information may now become available in aggregate (hopefully, ha, ha), which it might not be individually.\n3.  With a large sample of humans, hopefully those with similar goals get to aggregate their goals, and thus we can get the most good (achieved goals) for the greatest number.\n\nUnfortunately, democracy itself (and therefore, any \"consensus\" ha ha system that uses a high threshold, which is just a more restricted kind of democracy that overfavors the status quo) has these flaws in the above assumptions:\n\n1.  Humans belong to a single species with pretty much a single brain design (\"foolish humans!\"), thus flaws in their rationality tend to correlate, so aggregation will *increase* the error, not decrease it.\n2.  Humans have limited brain space (\"puny humans!\") which they often assign to more important things, like whether Johnny Depp is the victim or not, and thus the information needed to make a good decision on inconsequential things, like Bitcoin (the future of money and hopefully a key to more prosperity for our civilization), may still not be available.\n3.  Human goals and sub-goals may be so disparate and incompatible that the result is instead an unfocused, scattered mess.\n\nIn conclusion, what we need to do is to eliminate these humans and hand over control of the world to an AI from outside of space and time.\n\nUnfortunately, we do not have access to such an AI, and instead must make do with mere humans.\n\n\nBut in principle, *everything* other than \"just ask some random human and do what they think is good\" are simply attempts to work around the known issues of real-world application of the Aumann Agreement Theorem.\nInstead of increasingly-complicated solutions, could we attack the issues directly so we can settle for the simplest (but known flawed due to the issues with direct application of the Aumann Agreement Theorem) solution?\n\n1.  Can we improve the thinking of typical humans discussing this topic?\n2.  Can we gather all the relevant information?\n    - This seems easiest to tackle.\n3.  Can we actually have the goals of all humans discussing this topic all laid out, *accurately*?\n    - This may be impossible, given that human brains are not introspective enough to understand their own sub-conscious goals.\n\n\nOf note is that the reason why \"democracy works\" (and also that \"consensus ha ha works\", given that we have already done eviction of some set of users before in order to maintain \"consensus\") is that widespread agreement on some topic, among more-rational-than-irrational humans, is evidence that a *purely rational* computational entity would decide the same thing.\nThat is, we assume that the minority whose view is rejected is either irrational, uninformed, or malicious (i.e. has goals incompatible with the rest) and therefore that if we evict them, the remainder achieves Aumann Agreement and the majority view is in fact, rational, well-informed, and goal-maximizing.\n\n\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "micaroni at gmail.com",
                "date": "2022-04-28T08:03:53",
                "message_text_only": "Hi Keagan,\n\nThe worst case scenario is: no new proposals are accepted and the Bitcoin\nremains the same. This is not so bad. I think a bad actor will usually want\nto *add* (or remove) something that breaks. I don't know if the boycott of\nnew proposals is as effective in breaking Bitcoin. It means the more\nimportant devs are not in full control, but they have the (kind of) power\nof veto if they have really rational arguments. The most harm they can do\nis delay things a little.\n\nBut remember: after all, everyone is free to fork the code, try to change\nsomething and perhaps create undesirable splits in the network.\n\n\nFelipe.\n\n\nOn Wed, Apr 27, 2022 at 3:32 PM Keagan McClelland <\nkeagan.mcclelland at gmail.com> wrote:\n\n> Felipe,\n>\n> > For me, the consensus should follow the current line: discussions and\n> tests carried out by experts. We all know that the most important devs have\n> the most weight in discussions. And that's how it should be, because they\n> understand far better than any other lowly mortal. Consensus simply means\n> that there are not at least two or three important people opposing the idea\n> with solid arguments. Is it very subjective and difficult? Yes. For sure.\n> We all yearn for objective answers or methods. However, any method would\n> fail. At the end, after numerous discussions and an apparent consensus, the\n> objective answer and the real consensus will be obtained in the network, in\n> the nodes upgrading. If there is a big war, the network will end up\n> splitting in two, as it has in the past. To avoid any unwanted splits we\n> discuss for exhaustion here in the list.\n>\n> This is essentially an admission that devs have control over the protocol.\n> Users \"having control\" but deferring their judgement to devs is not\n> meaningfully different than devs \"having control\". Many people have\n> asserted, quite strongly, that this ought not be how Bitcoin governs\n> itself. I myself am on the fence about what is practically possible or not.\n> However, let's say that your supposition is correct. How would we protect\n> against a corollary scenario where a dev has a proposal that looks great\n> but has dark ends that no one notices yet, if the process for evaluation\n> more or less is to defer to \"the most important devs\" expertise? Presumably\n> we hash this out in forums like this, but in order to \"override\" the \"most\n> important devs\" we have to have a way (formalized or not) of deciding when\n> the \"lesser experts\" in aggregate have better judgement.\n>\n> Erik,\n>\n> > There are many challenges with on-chain voting, here are a few:\n>\n> This may be hair-splitting but I feel it important to clarify that my\n> proposal isn't voting per se. Calling it that doesn't bug me, but the\n> mechanics are meaningfully different than a simple tally vote which is the\n> intuition that I think that term conveys. As Billy mentions this proposal\n> actually requires that miners block signals from inclusion in the block if\n> they themselves do not signal. I'm not necessarily claiming this is a\n> superior design overall, however the \"flaw\" you point out is by design in\n> this case. My goal in the proposal was really to give users a means of\n> applying direct economic pressure to miners, who do inevitably play a role\n> in BIP8/BIP9 activation procedure.\n>\n> Ryan,\n>\n> > - you're feeding the Chainalysis beasts, when hodlers move their UTXOs;\n>\n> Definitely a frightening proposition I hadn't considered. It does open up\n> the possibility of tracking individual preferences and targeting of\n> political opponents.\n>\n> >   - yuk, it's voting.\n>\n> I don't think the process of collecting information on user preference is\n> in and of itself bad. Where I think Bitcoiners really want to avoid voting\n> is this notion that 51% of the constituency can bully the other 49% into\n> whatever they want. No part of my proposal suggests this, nor is it\n> something I would want.\n>\n> -----\n>\n> I think there are a few questions surrounding the issue of soft fork\n> activation. Perhaps it warrants zooming out beyond even what my proposal\n> aims to solve. In my mind the most important questions surrounding this\n> process are:\n>\n> 1. In an ideal world, assuming we could, with perfect certainty, know\n> anything we wanted about the preferences of the user base, what would be\n> the threshold for saying \"this consensus change is ready for activation\"?\n>     1a. Does that threshold change based on the nature of the consensus\n> change (new script type/opcode vs. block size reduction vs. blacklisting\n> UTXOs)?\n>     1b. Do different constituencies (end users, wallets, exchanges,\n> coinjoin coordinators, layer2 protocols, miners) have a desired minimum or\n> maximum representation in this \"threshold\"?\n> 2. Given an answer from #1, what tests can we devise to measure those\n> levels of support directly? If we can't measure it directly, can we measure\n> different indicators that would help us infer or solve for the knowledge we\n> want?\n> 3. Can any of the answers to #2 be \"gamed\"? I'm defining \"game\" here to\n> mean that the measurement taken, diverges from the ground truth we are\n> trying to get at in such a way that its divergence would be undetectable.\n>\n> If we do not answer these sorts of questions we can get technical\n> consensus through this messy process, but when it comes to assessing user\n> consensus, it is just going to devolve into dogma and demagoguery as we\n> each have our own perceptions or agendas and there is no rigorous way for\n> anyone to refute our claims. This would, again, be an admission that devs\n> ultimately do make protocol decisions. Perhaps it's unavoidable and we are\n> doomed to this painful process of arguing with one another until\n> there's only one opinion left standing (either because of merit or just\n> plain old grit). However, if this is the case, I don't think we can\n> honestly claim that devs don't control the protocol (as a group).\n>\n> I don't think we will have broad agreement on #1 as it is ultimately a\n> value judgement and even the most intellectually honest people in Bitcoin\n> dev are going to have different value sets. I think this is OK, to a\n> degree. But where a lot of communication breakdown occurs is when people\n> are debating the properties of #2/#3 when they don't even know that there\n> is disagreement between them on #1. I think that everyone having an\n> individual answer to #1 can make these discussions go a lot more smoothly\n> in the technical sphere since I think most people can suspend their own\n> values for the sake of analyzing the effectiveness of a particular\n> approach. I am concerned, however, that if value differences are allowed to\n> be passed off as technical evaluations, the quality of the conversation may\n> erode to the point where no meaningful advancement can happen anymore,\n> since we will lose our shared framework for understanding. If this occurs\n> too soon, I believe quite strongly that Bitcoin will be captured through\n> the increasing power of custodial institutions.\n>\n> Keagan\n>\n> On Wed, Apr 27, 2022 at 11:22 AM <micaroni at gmail.com> wrote:\n>\n>> The idea seems interesting at first glance, but soon we see several\n>> problems. The biggest problem with votes of this type is that they can be\n>> easily manipulated. Imagine a powerful attacker who impersonates someone in\n>> good faith and arrives with a proposal that looks great but has dark ends\n>> behind it (and that no one has simply noticed yet). It would be enough for\n>> this attacker to convince major wallets, major exchanges and even\n>> individuals to believe him. It could be with a good marketing campaign or\n>> even buying these people. This would create a \"false consensus\", a\n>> misconception of what consensus means.\n>>\n>> For me, the consensus should follow the current line: discussions and\n>> tests carried out by experts. We all know that the most important devs have\n>> the most weight in discussions. And that's how it should be, because they\n>> understand far better than any other lowly mortal. Consensus simply means\n>> that there are not at least two or three important people opposing the idea\n>> with solid arguments. Is it very subjective and difficult? Yes. For sure.\n>> We all yearn for objective answers or methods. However, any method would\n>> fail. At the end, after numerous discussions and an apparent consensus, the\n>> objective answer and the real consensus will be obtained in the network, in\n>> the nodes upgrading. If there is a big war, the network will end up\n>> splitting in two, as it has in the past. To avoid any unwanted splits we\n>> discuss for exhaustion here in the list.\n>>\n>> I don't think flagging transactions would be a good method to measure\n>> this sort of thing. You are handing important technical discussions into\n>> the hands of those who have no idea about the subject.\n>>\n>> Felipe.\n>>\n>> On Tue, Apr 26, 2022 at 5:12 PM Keagan McClelland via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> Hi all,\n>>>\n>>> Alongside the debate with CTV right now there's a second debate that was\n>>> not fully hashed out in the activation of Taproot. There is a lot of\n>>> argument around what Speedy Trial is or isn't, what BIP8 T/F is or isn't\n>>> etc. A significant reason for the breakdown in civility around this debate\n>>> is that because we don't have a means of measuring user support for\n>>> proposed sof-fork changes, it invariably devolves into people claiming that\n>>> their circles support/reject a proposal, AND that their circles are more\n>>> broadly representative of the set of Bitcoin users as a whole.\n>>>\n>>> It seems everyone in this forum has at one point or another said \"I\n>>> would support activation of ____ if there was consensus on it, but there\n>>> isn't\". This statement, in order to be true, requires that there exist a\n>>> set of conditions that would convince you that there is consensus. People\n>>> have tried to dodge this question by saying \"it's obvious\", but the reality\n>>> is that it fundamentally isn't. My bubble has a different \"obvious\" answer\n>>> than any of yours.\n>>>\n>>> Secondly, due to the trauma of the block size wars, no one wants to\n>>> utter a statement that could imply that miners have any influence over what\n>>> rulesets get activated or don't. As such \"miner signaling\" is consistently\n>>> devalued as a signal for market demand. I don't think this is reasonable\n>>> since following the events of '17  miners are aware that they have the\n>>> strong incentive that they understand market demand. Nevertheless, as it\n>>> stands right now the only signal we have to work with is miner signaling,\n>>> which I think is rightly frustrating to a lot of people.\n>>>\n>>> So how can we measure User Support for a proposed rule change?\n>>>\n>>> I've had this idea floating around in the back of my head for a while,\n>>> and I'd like to solicit some feedback here. Currently, all forms of\n>>> activation that are under consideration involve miner signaling in one form\n>>> or another. What if we could make it such that users could more directly\n>>> pressure miners to act on their behalf? After all, if miners are but the\n>>> humble servants of user demands, this should be in alignment with how\n>>> people want Bitcoin to behave.\n>>>\n>>> Currently, the only means users have of influencing miner decisions are\n>>> A. rejection of blocks that don't follow rules and B. paying fees for\n>>> transaction inclusion. I suggest we combine these in such a way that\n>>> transactions themselves can signal for upgrade. I believe (though am not\n>>> certain) that there are \"free\" bits in the version field of a transaction\n>>> that are presently ignored. If we could devise a mapping between some of\n>>> those free bits, and the signaling bits in the block header, it would be\n>>> possible to have rules as follows:\n>>>\n>>> - A transaction signaling in the affirmative MUST NOT be included in a\n>>> block that does not signal in the affirmative\n>>> - A transaction that is NOT signaling MAY be included in a block\n>>> regardless of that block's signaling vector\n>>> - (Optional) A transaction signaling in the negative MUST NOT be\n>>> included in a block that signals in the affirmative\n>>>\n>>> Under this set of conditions, a user has the means of sybil-resistant\n>>> influence over miner decisions. If a miner cannot collect the fees for a\n>>> transaction without signaling, the user's fee becomes active economic\n>>> pressure for the miner to signal (or not, if we include some variant of the\n>>> negative clause). In this environment, miners could have a better view into\n>>> what users do want, as would the Bitcoin network at large.\n>>>\n>>> Some may take issue with the idea that people can pay for the outcome\n>>> they want and may try to compare a method like this to Proof of Stake, but\n>>> there are only 3 sybil resistant mechanisms I am aware of, and any \"real\"\n>>> view into what social consensus looks like MUST be sybil resistant:\n>>>\n>>> - Hashpower\n>>> - Proof of personhood (KYC)\n>>> - Capital burn/risk\n>>>\n>>> Letting hashpower decide this is the thing that is currently\n>>> contentious, KYC is dead on arrival both on technical and social grounds,\n>>> which really just leaves some means of getting capital into the process of\n>>> consensus measurement. This mechanism I'm proposing is measurable\n>>> completely en-protocol and doesn't require trust in institutions that fork\n>>> futures would. Additionally it could be an auxiliary feature of the soft\n>>> fork deployment scheme chosen making it something you could neatly package\n>>> all together with the deployment itself.\n>>>\n>>> There are many potential tweaks to the design I propose above:\n>>> 1. Do we include a notion of negative signaling (allowing for the\n>>> possibility of rejection)\n>>> 2. Do we make it such that miner signaling must be congruent with >X% of\n>>> transactions, where congruence is that the signal must match any\n>>> non-neutral signal of transaction.\n>>>\n>>> Some anticipated objections:\n>>>\n>>> 1. signaling isn't voting, no deployment should be made without\n>>> consensus first.\n>>> - yeah well we can't currently measure consensus right now, so that's\n>>> not a super helpful thing to say and is breeding ground for abuse in the\n>>> form of certain people making the unsubstantiated claim that consensus does\n>>> or does not exist for a particular initiative\n>>>\n>>> 2. This is just a proposal for \"pay to play\", we should not let the\n>>> wealthy make consensus decisions.\n>>> - I agree that wealth should not be able to strong-arm decision making.\n>>> But the status quo seems even worse where we let publicly influential\n>>> people decide consensus in such a way where not only do they not \"lose\n>>> ammunition\" in the process of campaigning, but actually accrue it, creating\n>>> really bad long-term balances of power.\n>>>\n>>> 3. Enforcing this proposal requires its own soft fork.\n>>> - Yes. It does...and there's a certain cosmic irony to that, but before\n>>> we consider how to make this happen, I'd like to even discuss whether or\n>>> not it's a good idea.\n>>>\n>>> 4. This gives CoinJoin pool operators and L2 protocol implementations\n>>> power over deciding consensus.\n>>> - I see this as an improvement over the status quo\n>>>\n>>> 5. This encourages \"spam\"\n>>> - If you pay the fees, it's not spam.\n>>>\n>>> The biggest question I'd like to pose to the forum is:\n>>> - Does a scheme like this afford us a better view into consensus than we\n>>> have today?\n>>> - Can it be gamed to give us a *worse* view into consensus? How?\n>>> - Does it measure the right thing? If not, what do you think is the\n>>> right thing to measure? (assuming we could)\n>>> - Should I write a BIP spec'ing this out in detail?\n>>>\n>>> Cheers,\n>>> Keagan\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220428/53b29505/attachment-0001.html>"
            },
            {
                "author": "Jeremy Rubin",
                "date": "2022-04-27T17:54:16",
                "message_text_only": "Generally speaking, I'm not too fond of these mechanisms, for reasons\nothers have expounded upon, but I will point out the following:\n\nTaproot means that top-level keys can be used in a ring signature scheme to\ncollect coin votes from, e.g., all individual coins above a certain value\nat a certain time without revealing the particulars of who signed.\n\nThis capability helps with some of the chainalysis concerns.\n\nHowever, note that many thoughtful individuals do not currently have any\ntaproot outputs on mainchain AFAIK because wallets are not yet 'upgraded',\nso it's more of a future possibility.\n\nOne thing that might be nice is if there were a way to sign with a NUMS\npoint for ring signature purposes, but not for transactions. Otherwise if\nNUMS points are common these ring signatures protocols might not be too\nuseful for collecting signals (even if they remain useful for covering a\nset including the NUMS pointed tr outs).\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n\nOn Tue, Apr 26, 2022 at 1:12 PM Keagan McClelland via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi all,\n>\n> Alongside the debate with CTV right now there's a second debate that was\n> not fully hashed out in the activation of Taproot. There is a lot of\n> argument around what Speedy Trial is or isn't, what BIP8 T/F is or isn't\n> etc. A significant reason for the breakdown in civility around this debate\n> is that because we don't have a means of measuring user support for\n> proposed sof-fork changes, it invariably devolves into people claiming that\n> their circles support/reject a proposal, AND that their circles are more\n> broadly representative of the set of Bitcoin users as a whole.\n>\n> It seems everyone in this forum has at one point or another said \"I would\n> support activation of ____ if there was consensus on it, but there isn't\".\n> This statement, in order to be true, requires that there exist a set of\n> conditions that would convince you that there is consensus. People have\n> tried to dodge this question by saying \"it's obvious\", but the reality is\n> that it fundamentally isn't. My bubble has a different \"obvious\" answer\n> than any of yours.\n>\n> Secondly, due to the trauma of the block size wars, no one wants to utter\n> a statement that could imply that miners have any influence over what\n> rulesets get activated or don't. As such \"miner signaling\" is consistently\n> devalued as a signal for market demand. I don't think this is reasonable\n> since following the events of '17  miners are aware that they have the\n> strong incentive that they understand market demand. Nevertheless, as it\n> stands right now the only signal we have to work with is miner signaling,\n> which I think is rightly frustrating to a lot of people.\n>\n> So how can we measure User Support for a proposed rule change?\n>\n> I've had this idea floating around in the back of my head for a while, and\n> I'd like to solicit some feedback here. Currently, all forms of activation\n> that are under consideration involve miner signaling in one form or\n> another. What if we could make it such that users could more directly\n> pressure miners to act on their behalf? After all, if miners are but the\n> humble servants of user demands, this should be in alignment with how\n> people want Bitcoin to behave.\n>\n> Currently, the only means users have of influencing miner decisions are A.\n> rejection of blocks that don't follow rules and B. paying fees for\n> transaction inclusion. I suggest we combine these in such a way that\n> transactions themselves can signal for upgrade. I believe (though am not\n> certain) that there are \"free\" bits in the version field of a transaction\n> that are presently ignored. If we could devise a mapping between some of\n> those free bits, and the signaling bits in the block header, it would be\n> possible to have rules as follows:\n>\n> - A transaction signaling in the affirmative MUST NOT be included in a\n> block that does not signal in the affirmative\n> - A transaction that is NOT signaling MAY be included in a block\n> regardless of that block's signaling vector\n> - (Optional) A transaction signaling in the negative MUST NOT be included\n> in a block that signals in the affirmative\n>\n> Under this set of conditions, a user has the means of sybil-resistant\n> influence over miner decisions. If a miner cannot collect the fees for a\n> transaction without signaling, the user's fee becomes active economic\n> pressure for the miner to signal (or not, if we include some variant of the\n> negative clause). In this environment, miners could have a better view into\n> what users do want, as would the Bitcoin network at large.\n>\n> Some may take issue with the idea that people can pay for the outcome they\n> want and may try to compare a method like this to Proof of Stake, but there\n> are only 3 sybil resistant mechanisms I am aware of, and any \"real\" view\n> into what social consensus looks like MUST be sybil resistant:\n>\n> - Hashpower\n> - Proof of personhood (KYC)\n> - Capital burn/risk\n>\n> Letting hashpower decide this is the thing that is currently contentious,\n> KYC is dead on arrival both on technical and social grounds, which really\n> just leaves some means of getting capital into the process of consensus\n> measurement. This mechanism I'm proposing is measurable completely\n> en-protocol and doesn't require trust in institutions that fork futures\n> would. Additionally it could be an auxiliary feature of the soft fork\n> deployment scheme chosen making it something you could neatly package all\n> together with the deployment itself.\n>\n> There are many potential tweaks to the design I propose above:\n> 1. Do we include a notion of negative signaling (allowing for the\n> possibility of rejection)\n> 2. Do we make it such that miner signaling must be congruent with >X% of\n> transactions, where congruence is that the signal must match any\n> non-neutral signal of transaction.\n>\n> Some anticipated objections:\n>\n> 1. signaling isn't voting, no deployment should be made without consensus\n> first.\n> - yeah well we can't currently measure consensus right now, so that's not\n> a super helpful thing to say and is breeding ground for abuse in the form\n> of certain people making the unsubstantiated claim that consensus does or\n> does not exist for a particular initiative\n>\n> 2. This is just a proposal for \"pay to play\", we should not let the\n> wealthy make consensus decisions.\n> - I agree that wealth should not be able to strong-arm decision making.\n> But the status quo seems even worse where we let publicly influential\n> people decide consensus in such a way where not only do they not \"lose\n> ammunition\" in the process of campaigning, but actually accrue it, creating\n> really bad long-term balances of power.\n>\n> 3. Enforcing this proposal requires its own soft fork.\n> - Yes. It does...and there's a certain cosmic irony to that, but before we\n> consider how to make this happen, I'd like to even discuss whether or not\n> it's a good idea.\n>\n> 4. This gives CoinJoin pool operators and L2 protocol implementations\n> power over deciding consensus.\n> - I see this as an improvement over the status quo\n>\n> 5. This encourages \"spam\"\n> - If you pay the fees, it's not spam.\n>\n> The biggest question I'd like to pose to the forum is:\n> - Does a scheme like this afford us a better view into consensus than we\n> have today?\n> - Can it be gamed to give us a *worse* view into consensus? How?\n> - Does it measure the right thing? If not, what do you think is the right\n> thing to measure? (assuming we could)\n> - Should I write a BIP spec'ing this out in detail?\n>\n> Cheers,\n> Keagan\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220427/15ebad05/attachment-0001.html>"
            },
            {
                "author": "Nadav Ivgi",
                "date": "2022-04-28T00:16:57",
                "message_text_only": "Back in the 2017 block size wars I brought up the idea [0] of using\ntime-locked-weighted voting as a mechanism to gauge community/hodler\nsentiment (lived on testnet for awhile at https://hodl.voting [1]).\n\nBasically, the user locks up some bitcoins with an OP_CSV while committing\nto some statement (using a pay-to-contract-hash construct in my\nimplementation[2]). Votes are then weighted as <lock duration> x <locked\nbtc amount>.\n\nThis has some interesting advantages over the more naive coin weighting\nscheme used at the time (Bitcoinocracy [3]):\n\n1. There's a real cost attached to voting, in the form of lost liquidity\nand losing the ability to sell. The handicap principle suggests that this\nmakes for more reliable signaling, getting people to put more thought and\nconsideration into their vote (and whether they really care/know enough\nabout the issue to vote on it at all).\n2. It shows that the voter has a long-term interest in the value of bitcoin\n(and stands to lose if bitcoin is harmed), and gives more influence to\nlong-term hodlers that possess strong confidence in bitcoin.\n3. Custodians don't get disproportionate voting power with their customers'\nfunds (not without getting themselves into fractional reserve, at least).\n5. Selling your vote if you're disinterested in the outcome isn't a\nno-brainer like in the naive scheme.\n\nA drawback is that in a chain-split scenario, you cannot use these bitcoins\nto influence the markets (participate in futures markets, sell the side of\nthe split you want to see die off etc). But some people might not agree to\nlose self-custody over their coins in order to do that, while with\ntime-weighted voting they can retain full self-custody. Or maybe they're\nonly willing to risk some X% on centralized futures markets, and still have\naside some Y% to allocate for timelocking.\n\nTo clarify, I don't really see this as 'voting' despite calling it that.\nI'm definitely not advocating to use this as some authoritative\ndecision-making voting mechanism or as part of an activation mechanism,\nonly possibly as one more market signal to look at among many.\n\nAs for the proposal in the OP, it could be argued that mining fees are not\na highly reliable signal because users have to pay them anyway when\ntransacting, which makes the voting itself zero-cost (perhaps except for\nwaiting some more time to get it confirmed?). And as others have mentioned,\nthis gives influence primarily to transactors (the tx volume by exchanges\nand payment processors easily eclipses that of end users) and not to\nhodlers (while my idea does the exact opposite, so maybe makes sense to use\nboth?).\n\nshesek\n\n[0]\nhttps://bitcoinmagazine.com/markets/hodlvoting-voting-your-bitcoins-better\n[1] http://web.archive.org/web/20170710161455/https://hodl.voting/\n[2] https://github.com/shesek/proof-of-hodl (hackathon grade code)\n[3] Seems like a version of it now lives at\nhttps://bitcoinocracy.herokuapp.com/\n\nOn Tue, Apr 26, 2022 at 11:12 PM Keagan McClelland via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi all,\n>\n> Alongside the debate with CTV right now there's a second debate that was\n> not fully hashed out in the activation of Taproot. There is a lot of\n> argument around what Speedy Trial is or isn't, what BIP8 T/F is or isn't\n> etc. A significant reason for the breakdown in civility around this debate\n> is that because we don't have a means of measuring user support for\n> proposed sof-fork changes, it invariably devolves into people claiming that\n> their circles support/reject a proposal, AND that their circles are more\n> broadly representative of the set of Bitcoin users as a whole.\n>\n> It seems everyone in this forum has at one point or another said \"I would\n> support activation of ____ if there was consensus on it, but there isn't\".\n> This statement, in order to be true, requires that there exist a set of\n> conditions that would convince you that there is consensus. People have\n> tried to dodge this question by saying \"it's obvious\", but the reality is\n> that it fundamentally isn't. My bubble has a different \"obvious\" answer\n> than any of yours.\n>\n> Secondly, due to the trauma of the block size wars, no one wants to utter\n> a statement that could imply that miners have any influence over what\n> rulesets get activated or don't. As such \"miner signaling\" is consistently\n> devalued as a signal for market demand. I don't think this is reasonable\n> since following the events of '17  miners are aware that they have the\n> strong incentive that they understand market demand. Nevertheless, as it\n> stands right now the only signal we have to work with is miner signaling,\n> which I think is rightly frustrating to a lot of people.\n>\n> So how can we measure User Support for a proposed rule change?\n>\n> I've had this idea floating around in the back of my head for a while, and\n> I'd like to solicit some feedback here. Currently, all forms of activation\n> that are under consideration involve miner signaling in one form or\n> another. What if we could make it such that users could more directly\n> pressure miners to act on their behalf? After all, if miners are but the\n> humble servants of user demands, this should be in alignment with how\n> people want Bitcoin to behave.\n>\n> Currently, the only means users have of influencing miner decisions are A.\n> rejection of blocks that don't follow rules and B. paying fees for\n> transaction inclusion. I suggest we combine these in such a way that\n> transactions themselves can signal for upgrade. I believe (though am not\n> certain) that there are \"free\" bits in the version field of a transaction\n> that are presently ignored. If we could devise a mapping between some of\n> those free bits, and the signaling bits in the block header, it would be\n> possible to have rules as follows:\n>\n> - A transaction signaling in the affirmative MUST NOT be included in a\n> block that does not signal in the affirmative\n> - A transaction that is NOT signaling MAY be included in a block\n> regardless of that block's signaling vector\n> - (Optional) A transaction signaling in the negative MUST NOT be included\n> in a block that signals in the affirmative\n>\n> Under this set of conditions, a user has the means of sybil-resistant\n> influence over miner decisions. If a miner cannot collect the fees for a\n> transaction without signaling, the user's fee becomes active economic\n> pressure for the miner to signal (or not, if we include some variant of the\n> negative clause). In this environment, miners could have a better view into\n> what users do want, as would the Bitcoin network at large.\n>\n> Some may take issue with the idea that people can pay for the outcome they\n> want and may try to compare a method like this to Proof of Stake, but there\n> are only 3 sybil resistant mechanisms I am aware of, and any \"real\" view\n> into what social consensus looks like MUST be sybil resistant:\n>\n> - Hashpower\n> - Proof of personhood (KYC)\n> - Capital burn/risk\n>\n> Letting hashpower decide this is the thing that is currently contentious,\n> KYC is dead on arrival both on technical and social grounds, which really\n> just leaves some means of getting capital into the process of consensus\n> measurement. This mechanism I'm proposing is measurable completely\n> en-protocol and doesn't require trust in institutions that fork futures\n> would. Additionally it could be an auxiliary feature of the soft fork\n> deployment scheme chosen making it something you could neatly package all\n> together with the deployment itself.\n>\n> There are many potential tweaks to the design I propose above:\n> 1. Do we include a notion of negative signaling (allowing for the\n> possibility of rejection)\n> 2. Do we make it such that miner signaling must be congruent with >X% of\n> transactions, where congruence is that the signal must match any\n> non-neutral signal of transaction.\n>\n> Some anticipated objections:\n>\n> 1. signaling isn't voting, no deployment should be made without consensus\n> first.\n> - yeah well we can't currently measure consensus right now, so that's not\n> a super helpful thing to say and is breeding ground for abuse in the form\n> of certain people making the unsubstantiated claim that consensus does or\n> does not exist for a particular initiative\n>\n> 2. This is just a proposal for \"pay to play\", we should not let the\n> wealthy make consensus decisions.\n> - I agree that wealth should not be able to strong-arm decision making.\n> But the status quo seems even worse where we let publicly influential\n> people decide consensus in such a way where not only do they not \"lose\n> ammunition\" in the process of campaigning, but actually accrue it, creating\n> really bad long-term balances of power.\n>\n> 3. Enforcing this proposal requires its own soft fork.\n> - Yes. It does...and there's a certain cosmic irony to that, but before we\n> consider how to make this happen, I'd like to even discuss whether or not\n> it's a good idea.\n>\n> 4. This gives CoinJoin pool operators and L2 protocol implementations\n> power over deciding consensus.\n> - I see this as an improvement over the status quo\n>\n> 5. This encourages \"spam\"\n> - If you pay the fees, it's not spam.\n>\n> The biggest question I'd like to pose to the forum is:\n> - Does a scheme like this afford us a better view into consensus than we\n> have today?\n> - Can it be gamed to give us a *worse* view into consensus? How?\n> - Does it measure the right thing? If not, what do you think is the right\n> thing to measure? (assuming we could)\n> - Should I write a BIP spec'ing this out in detail?\n>\n> Cheers,\n> Keagan\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220428/e19afb11/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Towards a means of measuring user support for Soft Forks",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Ryan Grant",
                "Bryan Bishop",
                "micaroni at gmail.com",
                "Keagan McClelland",
                "Nadav Ivgi",
                "ZmnSCPxj",
                "Erik Aronesty",
                "Chris Riley",
                "Billy Tetrud",
                "Jeremy Rubin"
            ],
            "messages_count": 18,
            "total_messages_chars_count": 187400
        }
    },
    {
        "title": "[bitcoin-dev] Transcript: Sydney Socratic on FROST w/ Jesse Posner",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2022-04-27T12:09:19",
                "message_text_only": "Hi\n\nI thought this transcript might be of interest to the mailing list.\n\nhttps://btctranscripts.com/sydney-bitcoin-meetup/2022-03-29-socratic-seminar/\n\nJesse Posner joined the online Sydney Socratic [1] last month to discuss his work on FROST. There is a video [2] too. As Jesse states [3] \"With the introduction of Taproot, we can begin to bridge this divide between a \"hot\" and \"cold\" key by leveraging distributed key generation and threshold signing.\"\n\nDuring the Socratic he discussed how with FROST you can simulate a threshold signature arrangement (k-of-n, k<n or indeed n-of-n) with only one signature going onchain when making a transaction. There are lots of upsides, you can swap participants in and out without needing an onchain transaction and even change the arrangement from say a 3-of-5 to a 4-of-5 without needing an onchain transaction. There are challenges too of course and it was discussed how the various participants might swap nonces and keep track of which nonce they should be using when signing, how hardware wallets might support FROST and to what extent accountability can be achieved if malicious parties are included in the threshold arrangement.\n\nThanks to Lloyd Fournier for organizing it and thanks to Adam Jonas for maintaining the btctranscripts.com site. The Sydney Socratic is online, open to all and Lloyd has a number of ideas for future topics.\n\n[1]: https://github.com/bitcoin-sydney/socratic\n[2]: https://rumble.com/vz3i3u-frost-the-future-of-schnorr-multisignatures-on-bitcoin.html\n[3]: https://brink.dev/blog/2021/04/15/frost/\n\n--\nMichael Folkson\nEmail: michaelfolkson at [protonmail.com](http://protonmail.com/)\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220427/d69ceab9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Transcript: Sydney Socratic on FROST w/ Jesse Posner",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Michael Folkson"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1921
        }
    },
    {
        "title": "[bitcoin-dev] Multiple ways to do bitcoin covenants",
        "thread_messages": [
            {
                "author": "alicexbt",
                "date": "2022-04-28T08:11:28",
                "message_text_only": "CTV and other covenant proposals, tradeoffs, and overlapping features are among the topics being explored recently. I had some views and questions on this subject.:\n\na) Does bitcoin already have opcodes with overlapping features? Yes\n\nb) Can we have multiple ways with some overlapping features to do bitcoin covenants with some tradeoffs? Yes\n_\nc) What are these tradeoffs if we compare CTV, APO, TLUV and TXHASH+CSFS?\n\nI am sure about a) because it was already answered in CTV chat by Jeremy and sheshek. Example: CHECKSIG and CHECKSIGADD is redundant with OP_IF and OP_ADD\n\nNot sure if we have \"consensus\" on b) but I don't see anything wrong with it.\n\nFor c) I would prefer CTV because:\n\n- Simpler\n- Blockspace effient\n- Can be used even without taproot\n\nCovering bare script, as in segwit v0, is necessary. Exposing a pubkey in case of an EC break will be a disaster, and vaults imply very long lived storage. Root CA offline certificates can often have shelf life measured in decades. However, NSA has issued warnings, NIST has issued guidelines, and executive order to prepare for the quantum shift. As a result, forcing everyone into a quantum-unsafe position is unsustainable.\n\nOther developers might use a different way to do bitcoin covenant for other reasons. Example: Russel O'Connor would prefer general OP_TXHASH design\n/dev/fd0\n\nSent with [ProtonMail](https://protonmail.com/) secure email.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220428/9166a9de/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Multiple ways to do bitcoin covenants",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "alicexbt"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1589
        }
    },
    {
        "title": "[bitcoin-dev] Conjectures on solving the high interactivity issue in payment pools and channel factories",
        "thread_messages": [
            {
                "author": "Antoine Riard",
                "date": "2022-04-28T13:18:05",
                "message_text_only": "Hi,\n\nThis post recalls the noticeable interactivity issue encumbering payment\npools and channel factories in the context of a high number of\nparticipants, describes how the problem can be understood and proposes few\nsolutions with diverse trust-minizations and efficiency assumptions. It is\nintended to capture the theoretical bounds of the \"interactivity issue\",\nwhere technical completeness of the solutions is exposed in future works.\n\nThe post assumes a familiarity with the CoinPool paper concepts and\nterminology [0].\n\n# The interactivity requirement grieving payment pools/channel factories\n\nPayment pools and channel factories are multi-party constructions enabling\nto share the ownership of a single on-chain UTXO among many\noff-chain/promised balances. Payment pool improves on the channel factory\nconstruction fault-tolerance by reducing the number of balance outputs\ndisclosed  on-chain to a single one in case of unilateral user exits.\n\nHowever, those constructions require all the users to be online and\nexchange rounds of signatures to update the balance distribution. Those\nliveliness/interactivity requirements are increasing with the number of\nusers, as there are higher odds of *one* lazzy/buggy/offline user stalling\nthe pool/factory updates.\n\nIn echo, the design of LN was envisioned for a network of\nalways-online/self-hosted participants, the early deployment of LN showed\nthe resort to delegated channel hosting solutions, relieving users from the\nliveliness requirement. While the trust trade-offs of those solutions are\nsignificant, they answer the reality of a world made of unreliable networks\nand mobile devices.\n\nMinding that observation, the attractiveness of pools/factories might be\nquestioned.\n\n# The interactivity requirement palliatives and their limits\n\nRelatively straightforward solutions to lower the interactivity\nrequirement, or its encumbered costs, can be drawn out. Pools/factories\nusers could own (absolute) timelocked kick-out abilities to evict offline\nusers who are not present before expiration.\n\nE.g, let's say you have Alice, Bob, Caroll and Dave as pool participants.\nEach of them owns a Withdraw transaction to exit their individual balances\nat any time. Each user should have received the pre-signed components from\nthe others guaranteeing the unilateral ability to publish the Withdraw.\n\nA kick-out ability playable by any pool user could be provided by\ngenerating a second set of Withdraw transactions, with the difference of\nthe nLocktime field setup to an absolute height T + X, where T is the\nheight at which the corresponding Update transaction is generated and X the\nkick-out delay.  For this set of kick-out transactions, the complete\nwitnesses should be fully shared among Alice, Bob, Caroll and Dave. That\nway, if Caroll is unresponsive to move the pool state forward after X, any\none of Alice, Bob or Dave can publish the Caroll kick-out Withdraw\ntransaction, and pursue operations without that unresponsive party.\n\nWhile decreasing the interactivity requirement to the timelock delay, this\nsolution is constraining the kicked user to fallback on-chain encumbering\nthe UTXO set with one more entry.\n\nAnother solution could be to assume the widespread usage of node towers\namong the pool participants. Those towers would host the full logic and key\nstate necessary to receive an update request and produce a user's approval\nof it. As long as one tower instance is online per-user, the pool/factory\ncan move forward. Yet this is forcing the pool/factory user to share their\nkey materials with potentially lower trusted entities, if they don't\nself-host the tower instances.\n\nIdeally, I think we would like a trust-minimized solution enabling\nnon-interactive, off-chain updates of the pool/factory, with no or minimal\nconsumption of blockspace.\n\nFor the remainder of this post, only the pool use-case will be mentioned.\nThough, I think the observations/implications can be extended to factories\nas well.\n\n# Non-interactive Off-chain Pool Partitions\n\nIf a pool update fails because of lack of online unanimity, a partition\nrequest could be exchanged among the online subset of users (\"the\nactives\"). They decide to partition the pool by introducing a new layer of\ntransactions gathering the promised/off-chain outputs of the actives. The\nset of outputs belonging to the passive users remains unchanged.\n\nThe actives spend their Withdraw transactions `user_balance` outputs back\nto a new intermediate Update transaction. This \"intermediate\" Update\ntransaction is free to re-distribute the pool balances among the active\nusers. To guarantee the unilateral withdraw ability of a partitioned-up\nbalance, the private components of the partitioned Withdraw transactions\nshould be revealed among the set of active users.\n\nE.g, let's say you have Alice, Bob, Caroll and Dave as pool participants.\nPool is at state N, Bob and Dave are offline. Alice and Caroll agree to\npartition the pool, each of them owns a Withdraw transaction\nready-to-be-attached on the Update transaction N. They generate a new\npartitioning Update transaction with two inputs spending respectively\nAlice's Withdraw transaction `user_balance` output and Caroll's Withdraw\ntransaction `user-balance` output. From this partitioning Update\ntransaction, two new second-layer Withdraw ones are issued.\n\nAlice and Caroll reveal to each other the private components of their\nfirst-layer Withdraw transactions, allowing to publish the full branch :\nfirst-layer Update transaction, first-layer Withdraw transactions,\nsecond-layer partitioning Update transaction, second-layer partitioned\nWithdraw transaction. At that step, I think the partitioning should be\ncomplete.\n\nQuickly, a safety issue arises with pool partitioning. A participant of the\nactive set A could equivocate the partition state by signing another spend\nof her Withdraw transaction allocating her balance to an Update transaction\nof a \"covert\" set of active users B.\n\nThis equivocation exists because there is no ordering of the off-chain\nspend of the Withdraw transactions and any Withdraw transaction can be\nfreely spent by its owner. This issue appears as similar to solving the\ndouble-spend problem.\n\nEquivocation is a different case than multiple *parallel* partitions, where\nthere is no intersection between the partitioned balances. The parallel\npartitions are still rooting from the same Update transaction N. I think\nthe safety of parallel partitions is yet to be explored.\n\n# Current solutions to the double-spend problem : Bitcoin base-layer &\nLightning Network\n\nOf course, the double-spend issue is already addressed on the Bitcoin\nbase-layer due to nodes consensus convergence on the most-proof-of-work\naccumulated valid chain of blocks. While reorg can happen, a UTXO cannot be\nspent twice on the same chain. This security model can be said to be\nprophylactic, i.e an invalid block cannot be applied to a node's state and\nshould be rejected.\n\nThe double-spend issue is also solved in its own way in payment channels.\nIf a transaction is published, of which the correctness has been revoked\nw.r.t negotiated, private channel state, the wronged channel users must\nreact in consequence. This security model can be said to be corrective,\nstates updates are applied first on the global ledger then eventually\ncorrected.\n\nA solution to the pool partition equivocation issue appears as either based\non a prophylactic one or a corrective security model.\n\nLet's examine first, a reactive security model similar to LN-Penalty. At\npool partition proposals, the owners of the partitioned-up Withdraw\ntransactions could reveal a revocation secret enabling correction in case\nof wrongdoing (e.g single-show signatures). However, such off-chain\nrevocation can be committed towards multiple sets of honest \"active\" users.\nOnly one equivocating balance spend can succeed, letting the remaining set\nof honest users still be deprived of their expected partitioned balances.\n\nE.g, let's say you have Alice, Bob, Caroll and Dave as pool participants.\nAlice contacts Bob to form a first partition, then Caroll to form a second\none, then Dave to form a last one. If she is successful in that\nequivocation trick, she can *triple*-spend her balance against any goods or\nout-of-pool payments.\n\nAssuming the equivocation is discovered once realized, Bob, Caroll and Dave\nare all left with a branch of transactions all including Alice's Withdraw\none. However only one branch can be fully published, as a Withdraw\ntransaction can be played only once following the pool semantic.\nGame-theory-wise, Bob, Caroll and Dave have an interest to enter in a fee\nrace to be the first to confirm and earn the Alice balance spend.\n\nThe equivocation is only bounded by the maximal number of equivocating sets\none can form, namely the number of pool users. However, correction can only\nbe limited to the equivocated balance. Therefore, it appears that\ncorrective security models in the context of multi-party are always\nproducing an economic disequilibrium.\n\nAn extension of this corrective model could be to require off-pool\ncollaterals locked-up, against which the revocation secret would be\nrevealed at partition generation. However, this fix is limited to the\ncollateral liquidity available. One collateral balance should be guaranteed\nfor each potential victim, thus the collateral liquidity should be equal to\nthe number of pool users multiplied by the equivocatable balance amount.\n\nIt sounds like a more economic-efficient security model of the pool\npartitioning can be established with a prophylactic technique.\n\n# Trusted coordinator\n\nA genuine solution could be to rely on a coordinator collecting the\npartition declaration and order them canonically. The pool partition\ncandidates can then fetch them and decide their partitions acceptance\ndecisions on that. Of course, the coordinator is trusted and can drop or\ndissimulate any partition, thus enabling partitioned balance equivocation.\n\n# Trust-minimized : Partition Statements\n\nA pool partition invalidity can be defined by the existence of two\nsecond-layer Update transactions at the same state number spending the same\nWithdraw transaction balance output. Each Update transaction signature can\nbe considered as a \"partition statement\". A user wishing to join a\npartition should ensure there is no conflicting partition statement before\napplying the partition to her local state.\n\nThe open question is from where the conflict should be observed. A\npartition statement log could be envisioned and monitored by pool users\nbefore to accept any partition.\n\nI think multiple partition statement publication spaces can be drawn out,\nwith different trust-minization trade-offs.\n\n# Publication space : Distributed Bulletin Boards\n\nThe set of \"active\" pool users could host their own boards of partition\nstatements. They would coordinate on the statement order through a\nconsensus algorithm (e.g Raft). For redundancy, a user can have multiple\nboard instances. If a user falls offline, they can fetch the statement\norder from the other users boards.\n\nHowever, while this solution distributes the trust across all the other\nusers, it's not safe in case of malicious user coalitions agreeing among\nthemselves to drop a partition statement. Therefore, a user catching up\nonline can be feeded with an incorrect view of the existing partitions, and\nthus enter into an equivocated partition.\n\n# Publication space : On-chain Authoritative Board\n\nAnother solution could be to designate an authoritative UTXO at pool setup.\nThis UTXO could be spent by any user of the pool set (1-of-N) to a\ncovenanted transaction sending back to a Taproot output with the same\ninternal key. The Merkelized tree tweaked could be modified by the spender\nto stamp the partition statements as leaves hashes. The statement data is\nnot committed in the leaves itself and the storage can be delegated to\nout-of-band archive servers.\n\nE.g, let's say you have Alice, Bob, Caroll and Dave as pool participants.\nAlice and Bob decide to start a partition, they commit a hash of the\npartitioning Update transaction as a Taproot tree leaf and they spend the\npool authoritative UTXO. They also send a copy of the Update transaction to\nan archive server.\n\nAt a later time, Alice proposes to Caroll to start a partition. Caroll\nfollows the chain of transactions forming the on-chain authoritative board,\nshe fetches the merkle branches and leaves data payload from an archive\nserver, verifying the authenticity of the branches and payload. As Alice\nhas already published a partition statement spending her Withdraw, Caroll\nshould refuse the partition proposal.\n\nEven if a pool user goes offline, she can recover the correct partition\nstatement logs, as it has been committed in the chain from the\nauthoritative UTXO. If the statement data is not available from servers,\nthe pool user should not engage in partitions.\n\nAssuming the spend confirms in every block, this solution enables\npartitions every 10min. The cost can be shared across pool instances, if\nthe authoritative signers set is made of multiple pool instances signers\nsets. A threshold signature scheme could be used to avoid interactivity\nbeyond the aggregated key setup. However, batching across pool instances\nincreases the set of data to verify by the partition candidate users, which\ncould be a grievance for bandwidth-constrained clients.\n\n# Fiability of the Publication of Partition Statements\n\nWhatever ends up being used as a partition statement log, there is still\nthe question of the incentives of pool users to publish the partition\nstatements. A malicious user could act in coalition with the equivocating\nentity to retain the publication of her partition statement. Thus, an\nhonest user would only be aware of her own partition statement and accept\nthe partition proposal from the will-be equivocating entity.\n\nI think that leveraging covenants a revocation mechanism could be attached\non any equivocating branch of transactions, allowing in the above case a\nsingle honest user to punish the publication. While a revocation mechanism\ndoes not work in case of multiple defrauded users, I believe the existence\nof a revocation mechanism makes the formation of malicious coalitions\nunsafe for their conjurers.\n\nIndeed, any user entering in the coalition is not guaranteed to be blinded\nto other equivocating branches generated by the partition initiator.\nTherefore, the publication of a partition statement by everyone is\nholistically optimal to discover any equivocating candidate among the pool\nusers.\n\nFurther research should establish the soundness of the partition statement\npublication game-theory.\n\n# Writing the Partition Statements to a new Consensus Data Structure\n\nTo avoid a solution relying on game-theory, a new consensus data structure\ncould be introduced to register and order the partition statements. This\noff-chain contract register could be a Merkle tree, where every leaf is a\npool balance identified by a key. This register would be established\non-chain at the same time the pool is set up.\n\nEvery time the pool is partitioned, the tree leaves would be updated with\nthe partition statement committed to. Only one partition could be\nregistered per user by state number. The publication branch would be\ninvalid if it doesn't point back to the corresponding contract register\ntree entries. When the first-layer pool Update transaction is replaced, the\ntree should transition to a blank state too.\n\nBeyond the high cost of yet-another softfork to introduce such consensus\ndata structure, the size of the witness to write into the contract register\ncould be so significant that the economic attractiveness of pool\npartitioning is decreased in consequence.\n\nIf you have read so far, thank you. And curious if anyone has more ideas or\nthoughts on  the high interactivity issue ?\n\nThanks Gleb for the review.\n\nCheers,\nAntoine\n\n[0] https://coinpool.dev/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220428/6ceb610b/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Conjectures on solving the high interactivity issue in payment pools and channel factories",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Antoine Riard"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 16096
        }
    },
    {
        "title": "[bitcoin-dev] Miniscript support in hardware wallets/signing devices",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2022-04-29T11:24:30",
                "message_text_only": "Hi\n\nAssessing what should be sent to this mailing list is difficult. We don't want to be bombarded with full on company promotional materials obviously but then at the same time only focusing on contentious consensus changes at the expense of everything else just gives a warped view to readers of this list of what is happening in the community and what 99 percent of Bitcoin devs are working on.\n\nOne example of many is Miniscript. In this excellent blog post [1] by Salvatore Ingala he explains the work he is doing to get Miniscript support in the Ledger hardware wallet (or \"signing device\" [2], hat tip nvk). Miniscript has been in the works for a number of years now and the first of multiple Miniscript related pull requests was recently merged into the Bitcoin Core wallet [3]. This wasn't included in the recent Bitcoin Core 23.0 release [4] but one would expect it to be included in the next major release (24.0).\n\nSalvatore explains that to start enabling Miniscript support in Ledger only requires ~20 lines of code but there is additional complexity that isn't covered by the included code snippet. And of course the Policy to Miniscript compiler(s) don't (yet) support Taproot trees of scripts so we are talking primarily Bitcoin scripts pre-Taproot. He also includes a short video of what the Policy/Miniscript user experience might look like on a Ledger Nano.\n\nFor those who are interested in learning more about Miniscript stickies-v is hosting a Bitcoin Core PR review club on Miniscript on May 18th [5].\n\nDisclaimer: I have personal views on hardware wallets/signing devices as anyone does but I do not receive funding from any particular company or product in the space.\n\n[1]: https://blog.ledger.com/miniscript-is-coming/\n[2]: https://signingdevice.com/\n[3]: https://github.com/bitcoin/bitcoin/pull/24147\n[4]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020321.html\n[5]: https://bitcoincore.reviews/24148\n\n--\nMichael Folkson\nEmail: michaelfolkson at [protonmail.com](http://protonmail.com/)\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220429/18ff2b2a/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Miniscript support in hardware wallets/signing devices",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Michael Folkson"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2297
        }
    },
    {
        "title": "[bitcoin-dev] What to do when contentious soft fork activations are attempted",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2022-04-30T09:53:19",
                "message_text_only": "I\u2019ve been in two minds on whether to completely move on to other topics or to formulate some thoughts on the recent attempt to activate a contentious soft fork. In the interests of those of us who have wasted days/weeks/months of our time on this (with no personal upside) and who don\u2019t want to repeat this exercise again I thought I should at least raise the issue for discussion of what should be done differently if this is tried again in future.\n\nThis could be Jeremy with OP_CTV at a later point (assuming it is still contentious) or anyone who wants to pick up a single opcode that is not yet activated on Bitcoin and try to get miners to signal for it bypassing technical concerns from many developers, bypassing Bitcoin Core and bypassing users.\n\nMaybe the whole thing worked as designed. Some users identified what was going on, well known Bitcoin educators such as Andreas Antonopoulos, Jimmy Song etc brought additional attention to the dangers, a URSF movement started to gain momentum and those attempting a contentious soft fork activation backed off. (Disappointingly Bitcoin Optech didn't cover my previous posts to this mailing list [1], [2], [3] highlighting the dangers many months ago or recent posts. Normally Optech is very high signal.)\n\nAlternatively this was the first time a contentious soft fork activation was attempted, we were all woefully unprepared for it and none of us knew what we were doing.\n\nI\u2019m unsure on the above. I\u2019d be interested to hear thoughts. What I am sure of is that it is totally unacceptable for one individual to bring the entire Bitcoin network to the brink of a chain split. There has to be a personal cost to that individual dissuading them from trying it again otherwise they\u2019re motivated to try it again every week/month. Perhaps the personal cost that the community is now prepared if that individual tries it again is sufficient. I\u2019m not sure. Obviously Bitcoin is a permissionless network, Bitcoin Core and other open source projects are easily forked and no authority (I\u2019m certainly no authority) can stop things like this happening again.\n\nI\u2019ll follow the responses if people have thoughts (I won't be responding to the instigators of this contentious soft fork activation attempt) but other than that I\u2019d like to move on to other things than contentious soft fork activations. Thanks to those who have expressed concerns publicly (too many to name, Bob McElrath was often wording arguments better than I could) and who were willing to engage with the URSF conversation. If an individual can go directly to miners to get soft forks activated bypassing technical concerns from many developers, bypassing Bitcoin Core and bypassing users Bitcoin is fundamentally broken. The reason I still have hope that it isn't is that during a period of general apathy some people were willing to stand up and actively resist it.\n\n[1]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-October/019535.html\n\n[2]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019728.html\n\n[3]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020235.html\n\n--\nMichael Folkson\nEmail: michaelfolkson at [protonmail.com](http://protonmail.com/)\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220430/0b8a6f2f/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "What to do when contentious soft fork activations are attempted",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Michael Folkson"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3483
        }
    },
    {
        "title": "[bitcoin-dev] Transcript: Carl Dong on libbitcoinkernel",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2022-04-30T16:25:26",
                "message_text_only": "Hi\n\nAnother transcript that may be of interest to this list. Carl Dong recently did an excellent short video explaining the libbitcoinkernel project in Bitcoin Core. The transcript is here:\n\nhttps://btctranscripts.com/chaincode-labs/2022-04-12-carl-dong-libbitcoinkernel/\n\nAs he explains in the video libbitcoinkernel is the latest attempt to extract the consensus engine out of Bitcoin Core. There are many motivations for doing this. Obviously disagreements between the consensus engines of nodes across the network can lead to catastrophic forks. This boundary between what is part of consensus and what is not has occasionally been blurred in the past and for the most security critical part of Bitcoin Core (and Bitcoin generally) this is clearly unacceptable. This is not a criticism of anyone in the past, unravelling Satoshi's spaghetti code and the entanglement between the consensus engine and the rest of the codebase has been a decade long task, requires extreme care and is by no means completed.\n\nAs well as leading to some consensus bugs in older versions of Bitcoin Core, the leaky consensus abstraction has made it difficult for alternative implementations to be built in other languages and with different RPCs etc without risking falling out of consensus with Bitcoin Core.\n\nThis is clearly an ambitious long term project but the first PR in the series was recently merged [1] and Carl explains his thinking on the future direction of this project in the video and on the linked issue.\n\n[1]: https://github.com/bitcoin/bitcoin/issues/24303\n\n--\nMichael Folkson\nEmail: michaelfolkson at [protonmail.com](http://protonmail.com/)\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20220430/c9029435/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Transcript: Carl Dong on libbitcoinkernel",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Michael Folkson"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1906
        }
    }
]