[
    {
        "title": "[bitcoin-dev] Your Gmaxwell exchange",
        "thread_messages": [
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-01T00:02:15",
                "message_text_only": "> Bitcoin is a decentralized currency which allows any person the\n> ability to transact in a way that does not require specific trust in\n> any particular party.\n\nBitcoin is only a partial solution to the Byzantine general problem. \nUsers do need to trust that things such as mining and development \nsystems work as intended.  Once the user trusts those systems only then \nis the state of the ledger trustless.  Just because the state of ledger \nis decentralized due to mining that does not automatically mean \neverything associated with Bitcoin is \"decentralized.\"  (Some people \nactually claim reddit is decentralized because users can vote.  That \nwould mean the US government is also decentralized since there are \nelections but i don't think most people would agree with that definition.)\n\nCentralized and decentralized system are not intrinsically good or bad. \n  Each one has it use cases just like a hammer and a screw driver. \nClaiming otherwise is treating Bitcoin a as religion rather than a \ntechnology.\n\nRuss"
            },
            {
                "author": "Oliver Petruzel",
                "date": "2015-09-01T02:30:44",
                "message_text_only": ">>>I would be OK with $100 transaction fee\n\nUnless you're relying upon some hypothetical hyper-inflation of the USD,\nhow does one accept or justify such fees given the title (and intentions)\nof Satoshi's own white paper and corresponding software?\n\nI believe the key words \"cash system\" must be kept in mind throughout all\nof these discussions and developments, or else we risk turning Bitcoin into\nsomething other than cash.\n\nBitcoin will no longer be a P2P cash system if the fees make transactions\nprohibitively expensive for all but the wealthiest of individuals and\ncorporations.\n\nI understand that a careful balance must be struck between (measurable?)\ndecentralization and Bitcoin's use as an actual cash system; however, those\nwho are willing to annihilate the latter to maintain ONLY the former must\nat least be honest with everyone that they really don't care if Bitcoin\nbecomes something entirely different than Satoshi's original invention and\nintention.\n\nCall it a necessary transformation or reinvention, and by a new name, if\nyou will; because, with exorbitant fees, it may no longer be accurate or\nappropriate to call it Bitcoin: A Peer-to-peer Electronic CASH System.\n\nRespectfully,\nOliver\nOn Aug 30, 2015 2:38 AM, \"Adam Ritter via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I don't really see any problem with the paper:\n> All it states is that having the assumption that miners don't\n> centralize, transaction fees don't go to zero even without the\n> blocksize limit. I think we can accept this as a nice academic\n> research, and I believe that it's true.\n> Still, it doesn't have anything that is practical for me as an user of\n> the Bitcoin network (I use it for storing long-term purchase value, as\n> most of the people who I know): it doesn't help me if I still need to\n> pay transaction fees after the blocksize limit is gone. My (and other\n> users') main concern is about centralization, which has nothing to do\n> with transaction fees. I would be OK with $100 transaction fee as\n> well, as long as the network is fair and secure (which comes from\n> decentralization).\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150831/d557c458/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-01T09:25:03",
                "message_text_only": "On Aug 31, 2015 3:01 PM, \"Justus Ranvier via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n> You keep using the word \"decentralized\" without explaining (and most\n> likely, understanding) what it means.\n\nI believe he explained very well what he meant by decentralized, please\nstop suggesting he doesn't understand his own thoughts: it is extremely\nirritating.\n\n> You say:\n>\n> > a system without the trust of third parties to process electronic\npayments\n>\n> What does it mean to use a decentralized network instead of a trusted\n> third party to process electronic payments? What undesirable actions can\n> a trusted third party perform that a decentralized network can not\nperform?\n\nFor starters, a third party (or a recuded group of miners controlling the\nmajority of the hashrate) can censor transactions. It doesn't matter how\nbenevolent that party is: it can be forced to do it by the laws of its\njurisdiction.\n\nIf you don't care about this, I suggest you start a new system without\nexpensive proof of work, you can replace it with block signing (it can\nstill be multisig). It is already coded, just fork the alpha or the\nblocksigning branch in elementsProject (github).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/39e5d2ff/attachment.html>"
            },
            {
                "author": "Monarch",
                "date": "2015-09-01T11:11:12",
                "message_text_only": "On 2015-08-31 23:32, Peter R wrote:\n> On 2015-08-31, at 2:24 PM, Allen Piscitello via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n\n> It is my opinion, then, that we should support multiple\n> implementations of the Bitcoin protocol, working to reduce the\n> network's dependency on Core.\n> \n\nThat would be incredibly foolish given the history, where even heroic\nattempts at making consensus compatible re-implementations have ended\nrather poorly.  bitcoin-ruby and btcd have collectively had numerous\nconsensus failures, some only recently found by fuzzing the scripting\nenvironment.  There are more failures than publicly disclosed, and\nalmost any failure can be leveraged to split the network and steal\nmoney.   Ethereum attempted to create four clients, written to a\ndefined specification, and even with all the money in the world has\nmanaged to have numerous consensus failures due to misunderstanding or\nimplementation.\n\n\n> I agree. What about decentralization in development? Gavin recently\n> said that he wants to \"get to the point where there will be multiple\n> robust implementations of the core protocol.\"\n> \n\nGavin clearly hasn't kept up with the ridiculousness of that task."
            },
            {
                "author": "Dave Collins",
                "date": "2015-09-01T15:59:24",
                "message_text_only": "I'd be interested to know about these supposed btcd mainnet forks that\nhave occurred due to a consensus failure since it came out of alpha.\nI'll go ahead and save you some research time - there hasn't been one.\nI'm not claiming there will never be one as that would be just as\nfoolish as claiming Bitcoin Core won't have any more either.\n\nAs you alluded to, there was a _potential_ instance found due to fuzzing\nwhich prompted a thorough audit of the code base.  It was fixed before\nany problems occurred and resulted in improved test coverage in Bitcoin\nCore as well.\n\nOn the other hand, Bitcoin Core has had actual forks on mainnet during\nthe same period.  I'm not casting stones at Bitcoin Core here, because\nas I've said many times, none of us are perfect.  No matter how careful\neveryone is, it is bound to happen from time to time.\n\nUntil this community decides to get serious about facing the reality\nthat an infrastructure built on a single implementation with no real\ndisaster prevention measures for unintentional incompatibilities between\ndifferent versions of that implementation is incredibly fragile, there\nwill continue to be more unintentional hard forks regardless of the\nexistence of alternative implementations.\n\nIt has not ended poorly by any means.  It has already led to several\nimprovements such as improved test coverage and more robust and modular\ncode.\n\n\nOn 9/1/2015 6:11 AM, Monarch via bitcoin-dev wrote:\n> That would be incredibly foolish given the history, where even heroic\n> attempts at making consensus compatible re-implementations have ended\n> rather poorly.  bitcoin-ruby and btcd have collectively had numerous\n> consensus failures, some only recently found by fuzzing the scripting\n> environment.  There are more failures than publicly disclosed, and\n> almost any failure can be leveraged to split the network and steal\n> money.   Ethereum attempted to create four clients, written to a\n> defined specification, and even with all the money in the world has\n> managed to have numerous consensus failures due to misunderstanding or\n> implementation.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 834 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/573cb2a5/attachment-0001.sig>"
            },
            {
                "author": "Monarch",
                "date": "2015-09-01T16:51:54",
                "message_text_only": "On 2015-09-01 15:59, Dave Collins via bitcoin-dev wrote:\n> I'd be interested to know about these supposed btcd mainnet forks that\n> have occurred due to a consensus failure since it came out of alpha.\n> I'll go ahead and save you some research time - there hasn't been one.\n> I'm not claiming there will never be one as that would be just as\n> foolish as claiming Bitcoin Core won't have any more either.\n> \n\nFor the purposes of the conversation this was only brought up to re-\nenforce my claim that this is outrageously difficult software\ndevelopment, irrespective of the quality of the code being produced in\nalternate implementations.  Sorry if that came across as an attack\nagainst your software in particular, it wasn't intended.\n\n\n> On the other hand, Bitcoin Core has had actual forks on mainnet during\n> the same period.  I'm not casting stones at Bitcoin Core here, because\n> as I've said many times, none of us are perfect.  No matter how careful\n> everyone is, it is bound to happen from time to time.\n> \n\nThe point I was trying to make is that this is simply a hard\ndevelopment situation to be working in, we don't know what behavior is\ninferred by the use of CPP and even more so OpenSSL (as the DER\nencoding consensus failure made abundantly clear).  There's almost\ncertainly more problems lying around given how generally dusty a lot\nof the transaction environment is, it's very easy to get off the\nbeaten track with Bitcoin script."
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-09-01T18:37:18",
                "message_text_only": "On 09/01/2015 09:51 AM, Monarch via bitcoin-dev wrote:\n> On 2015-09-01 15:59, Dave Collins via bitcoin-dev wrote:\n>> I'd be interested to know about these supposed btcd mainnet forks that\n>> have occurred due to a consensus failure since it came out of alpha.\n>> I'll go ahead and save you some research time - there hasn't been one.\n>> I'm not claiming there will never be one as that would be just as\n>> foolish as claiming Bitcoin Core won't have any more either.\n>\n> For the purposes of the conversation this was only brought up to re-\n> enforce my claim that this is outrageously difficult software\n> development, irrespective of the quality of the code being produced in\n> alternate implementations.  Sorry if that came across as an attack\n> against your software in particular, it wasn't intended.\n\nWhether intended or otherwise this is an attack on the idea of\ndecentralized bitcoin development. The option to fork or roll your own\nis open source, not decentralization. Decentralization requires\n*actually doing so*. One step down that path, even for a fork, is a\nmajor commitment.\n\nCommon consensus check code is now available in several bitcoin\nimplementations. The claim that this is outrageously difficult is\nmisleading. It's just engineering work that needs to get done if Bitcoin\nis to survive.\n\n>> On the other hand, Bitcoin Core has had actual forks on mainnet during\n>> the same period.  I'm not casting stones at Bitcoin Core here, because\n>> as I've said many times, none of us are perfect.  No matter how careful\n>> everyone is, it is bound to happen from time to time.\n> \n> The point I was trying to make is that this is simply a hard\n> development situation to be working in, we don't know what behavior is\n> inferred by the use of CPP and even more so OpenSSL (as the DER\n> encoding consensus failure made abundantly clear).  There's almost\n> certainly more problems lying around given how generally dusty a lot\n> of the transaction environment is, it's very easy to get off the\n> beaten track with Bitcoin script.\n\nThese are issues that affect the satoshi client as much as other\nimplementations, and therefore don't support your premise.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/2be9abde/attachment.sig>"
            },
            {
                "author": "Monarch",
                "date": "2015-09-01T20:08:37",
                "message_text_only": "On 2015-09-01 18:37, Eric Voskuil wrote:\n> Whether intended or otherwise this is an attack on the idea of\n> decentralized bitcoin development. The option to fork or roll your own\n> is open source, not decentralization. Decentralization requires\n> *actually doing so*. One step down that path, even for a fork, is a\n> major commitment.\n> \n> Common consensus check code is now available in several bitcoin\n> implementations. The claim that this is outrageously difficult is\n> misleading. It's just engineering work that needs to get done if \n> Bitcoin\n> is to survive.\n> \n\nThere's no requirement for there to be multiple interpretations of the\nconsensus code, this is why libbitcoinconsensus exists.  Why do you\nthink Bitcoins survival is predicated on reimplementation?\n\n\n> These are issues that affect the satoshi client as much as other\n> implementations, and therefore don't support your premise.\n> \n\nI'm aware that these problems apply to Bitcoin Core."
            },
            {
                "author": "Monarch",
                "date": "2015-09-01T11:44:04",
                "message_text_only": "On 2015-08-31 23:47, s7r via bitcoin-dev wrote:\n> The problem is there is no other implementation out there which comes\n> near the quality of the code in Bitcoin Core. I am actually eager to\n> try other implementations as well, but something serious, because\n> Bitcoin itself is a payment protocol not something to play with.\n> \n\nI don't think code quality is of a particular problem in alternate\nimplementations, the difficulty of getting it right is simply\nastronomical.  If you attempt to re-implement just transaction\nsignature verification you run into edge cases remarkably quickly,\nmost use of Bitcoin today barely scratches the surface of what was\nadded to Bitcoin for future expansion.\n\nhttps://jonasnick.github.io/blog/2015/05/09/fuzzing-bitcoin-consensus/"
            },
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-09-01T20:29:39",
                "message_text_only": "On Mon, Aug 31, 2015 at 01:55:43PM -0500, Justus Ranvier via bitcoin-dev wrote:\n\n> * They should own their bitcoins, meaning that they retain exclusive\n> control over their balances. Even more precisely, the network must\n> always honour the conditions of the scripts associated with unspent outputs.\n> \n> * Their fraction of the Bitcoin ledger must not be diluted.\n> \n> * When they decide to spend their coins, they will be able to do so\n> without requiring permission from a third party.\n\nAll of these properties are contingent on the system being decentralized. Asking random end-users if they care if bitcoin is decentralized is like asking random people if they care if their drinking water is dihydrogen monoxide.\n\nBoth miner and full node over-centralization could result in\n\n- Permission requirements to submit transactions (miners can be pressured to adhere to KYC rules)\n\n- Transactions being reversed without consent (reorgs by the miner cartel)\n\n- ...even dilution of their fraction of their ledger (if changing the rules becomes normal, I'm sure some smoothtalker could come up with arguments to raise the 21M cap. Another option would be to force the remaining people that are able to run full nodes to comply)\n\nBitcoin's properties don't come from magic. All its attractive properties are derived from decentralization, on spreading responsibility as widely globally as possible. Without that, it's just an inefficient ledger database.\n\nWladimir"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-09-02T18:51:08",
                "message_text_only": "On 09/01/2015 03:29 PM, Wladimir J. van der Laan wrote:\n> On Mon, Aug 31, 2015 at 01:55:43PM -0500, Justus Ranvier via bitcoin-dev wrote:\n> \n>> * They should own their bitcoins, meaning that they retain exclusive\n>> control over their balances. Even more precisely, the network must\n>> always honour the conditions of the scripts associated with unspent outputs.\n>>\n>> * Their fraction of the Bitcoin ledger must not be diluted.\n>>\n>> * When they decide to spend their coins, they will be able to do so\n>> without requiring permission from a third party.\n> \n> All of these properties are contingent on the system being decentralized.\n\nThat is not true, unless you are using a definition of the word\n\"decentralized\" which is so broad as to convey no information whatsoever.\n\nSaying that Bitcoin's security depends on decentralization is like\nsaying that a bridge's structural integrity depends on good materials.\n\nStatements like that convey zero relevant information. Potential users\nof a bridge want to know about the maximum working load of the bridge,\nand under which conditions it is safe to use. At what wind speed should\nthe bridge be closed? Is it ok to keep using it after a magnitude 4\nearthquake, or should it be closed for inspection?\n\nRepeatedly asserting that bridges need to be made of good materials as\nan alternative to answering those kinds of questions would be easily\nrecognized as useless in that context, but for some reason people seem\nto accept it in this one.\n\n\n-- \nJustus Ranvier\nOpen Bitcoin Privacy Project\nhttp://www.openbitcoinprivacyproject.org/\njustus at openbitcoinprivacyproject.org\nE7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18381 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/d0a332af/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/d0a332af/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Your Gmaxwell exchange",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Dave Collins",
                "Eric Voskuil",
                "Monarch",
                "Milly Bitcoin",
                "Jorge Tim\u00f3n",
                "Wladimir J. van der Laan",
                "Justus Ranvier",
                "Oliver Petruzel"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 17766
        }
    },
    {
        "title": "[bitcoin-dev] AT&T has effectively banned Bitcoin nodes by closing port 8333 via a hidden firewall in the cable box",
        "thread_messages": [
            {
                "author": "hurricanewarn1 at aol.com",
                "date": "2015-09-01T00:26:17",
                "message_text_only": "I have been struggling to get port 8333 open all year, I gave up and was using blockchain for months despite a strong desire to stay on Bitcoin Core, but now the issue has reached critical mass since I'm using the python Bitcoin server module. I have literally spent my entire day trying to open 8333, I thoroughly made sure it was open on the router and computer and it's still closed. Strangely enough I got it open for 30 seconds once today but something closed it immediately.\n\nAfter hours of phone calls and messaging AT&T finally told me the truth of what was going on, and only because I noticed it myself and demanded an answer. The internet is being routed through a DVR/cable box, and they confirmed the DVR also has a firewall. To make this even more absurd they refused to turn the firewall off because it is their equipment. So effectively they can firewall any port they want even if the customer asks them not to, in the unlikely event the customer figures it out.\n\nPerhaps this is the driving force behind the inexplicable and massive decline in Bitcoin nodes. Bitcoin is being censored by the ISPs themselves, and they won't even tell you that. I had to get in touch with headquarters and threaten to rip it out of the wall to get a proper answer. \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150831/a9145edf/attachment.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-01T01:04:59",
                "message_text_only": "> I have been struggling to get port 8333 open all year,\n>\n> After hours of phone calls and messaging AT&T finally told me the truth\n> of what was going on,\n\nI went through this Comcast involving another port.  When they blocked \nthe port I asked them the reason (I referenced their privacy policy that \nthey are supposed to disclose my account info to me).  they told me it \ndidn't matter what their privacy policy said, they weren't going to tell \nme.  I then showed up in federal court and testified as to what they \nwere doing.  It was a class action lawsuit against them for people who \ntried to get refunds over bandwidth throttling and I was one of members \nof the class.\n\nIn any event the solution for me was to get a business account rather \nthan a residential account.  You get a gateway that you can configure \nyourself and you can turn off the firewall.  As far as I can tell no \nports are blocked like residential accounts.  The cost was an extra \n$10/month (unless you get other options like fixed IP and/or increased \nbandwidth).  maybe you can get the data from bitnodes.io to see if any \nISP is blocking nodes.  Maybe stats could be posted based on ISP.  I \nhave been running a node through that account for awhile now \nhttps://getaddr.bitnodes.io/nodes/70.90.2.18-8333/\n\nRuss"
            },
            {
                "author": "James Hilliard",
                "date": "2015-09-01T01:16:31",
                "message_text_only": "You should tell AT&T that you want the DVR/cable box put into what is\nusually referred to as \"bridge mode\" or sometimes \"true bridge mode\"\ndepending on your ISP and then use your own router, look under\n\"Bridged Mode\" at the bottom of this page for AT&T\nhttp://www.att.com/gen/general?pid=23697 . You want your own router to\nhave the external IP, if it does not it is not configured correctly.\nIn general one should never use a router provided by their ISP for\nanything other than modem functionality since it is typically only the\nISP that can change the firmware on it, it also makes troubleshooting\nproblems like this more difficult.\n\nOn Mon, Aug 31, 2015 at 7:26 PM, Zach G via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I have been struggling to get port 8333 open all year, I gave up and was\n> using blockchain for months despite a strong desire to stay on Bitcoin Core,\n> but now the issue has reached critical mass since I'm using the python\n> Bitcoin server module. I have literally spent my entire day trying to open\n> 8333, I thoroughly made sure it was open on the router and computer and it's\n> still closed. Strangely enough I got it open for 30 seconds once today but\n> something closed it immediately.\n>\n> After hours of phone calls and messaging AT&T finally told me the truth of\n> what was going on, and only because I noticed it myself and demanded an\n> answer. The internet is being routed through a DVR/cable box, and they\n> confirmed the DVR also has a firewall. To make this even more absurd they\n> refused to turn the firewall off because it is their equipment. So\n> effectively they can firewall any port they want even if the customer asks\n> them not to, in the unlikely event the customer figures it out.\n>\n> Perhaps this is the driving force behind the inexplicable and massive\n> decline in Bitcoin nodes. Bitcoin is being censored by the ISPs themselves,\n> and they won't even tell you that. I had to get in touch with headquarters\n> and threaten to rip it out of the wall to get a proper answer.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "odinn",
                "date": "2015-09-01T07:16:47",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nAnother note on this subject to add to the stuff people have already\nmentioned...\n\nIf you have the AT&T landline but don't use AT&T's standard internet /\ntv (what they call Uverse) offering - that is, if you prefer to use\nsome local internet provider - you are probably better off (in terms\nof avoiding not only this sort of blockage/censorship but as well,\npotentially getting a better privacy policy that isn't going to be\nlike AT&T's long-term data retention).  You can check directly with\nthe various local small ISPs to see what their policies are\nspecifically on ports and whatnot.\n\nIdeally your ISP should let you:\n\nport forward to SOMEPORTNUMBER for tcp and udp\n\n(above may or may not be helpful for some if you are using\ndecentralized markets)\n\nhave port 8333 open\n\n(above is for bitcoin of course)\n\nSupposing you have FTTN because you are paying a local ISP for\ninternet service, and that local ISP has contracted with AT&T to be\nable to provide service in an area where old-style DSL has been phased\nout, thus your local ISP is essentially providing you AT&T FTTN.\n(FTTN is Fiber to the Node, FTTN-BP is FTTN Bonded Pair).  Even if a\nlocal ISP has its own privacy policy posted which is different from\nAT&T, everything is subject to AT&T data retention because the FTTN.\nSo get yourself a VPN (or set up your own) for your connection. Tor\nwill run through the VPN.\n\nGeneral observations - TWC stores your IP and other stuffs for 6\nmonths or longer.  Same for Comcast.  Verizon retains your stuffs for\n18 month minimum, probably longer though. Qwest/Century, 1 year.\nCox, 6 months.  AT&T retains for longer than a year.  This is just\nwhat they are telling you, the reality is it's probably longer due to\nstuff like this:\nhttps://www.lawfareblog.com/odni-and-doj-release-last-section-215-collec\ntion-order\n\n\n\n\n\n\n\n\n\nZach G via bitcoin-dev:\n> I have been struggling to get port 8333 open all year, I gave up\n> and was using blockchain for months despite a strong desire to stay\n> on Bitcoin Core, but now the issue has reached critical mass since\n> I'm using the python Bitcoin server module. I have literally spent\n> my entire day trying to open 8333, I thoroughly made sure it was\n> open on the router and computer and it's still closed. Strangely\n> enough I got it open for 30 seconds once today but something closed\n> it immediately.\n> \n> After hours of phone calls and messaging AT&T finally told me the\n> truth of what was going on, and only because I noticed it myself\n> and demanded an answer. The internet is being routed through a\n> DVR/cable box, and they confirmed the DVR also has a firewall. To\n> make this even more absurd they refused to turn the firewall off\n> because it is their equipment. So effectively they can firewall any\n> port they want even if the customer asks them not to, in the\n> unlikely event the customer figures it out.\n> \n> Perhaps this is the driving force behind the inexplicable and\n> massive decline in Bitcoin nodes. Bitcoin is being censored by the\n> ISPs themselves, and they won't even tell you that. I had to get in\n> touch with headquarters and threaten to rip it out of the wall to\n> get a proper answer.\n> \n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJV5VDeAAoJEGxwq/inSG8CvkIH/jy4Vo+My3xeBdvFQmxkJWyQ\nU5mv2zWEvBYw71Xy1EDzQY1AhEBmatUU1eu2AbOqXdUR4511FxCNzFmTxy6roEiz\nEehBkvXNbBCbEzLRisjxuQw34OKM+xfieCqE1mzJok2uSdLMMQLcbWL1/k3/OmS5\n9O9z/wMXqU1Jc19MTK+vF1Lz5ilnRn3hEbTaCN3ivYnYFa0DpBH9r0Y07UcoJ6Wr\nui/x0sSSuupAGzOkZ75HQ8yeQXckeAu6TB3/jE8QEqNUmAJkmR8eK4ofXZWFrIjy\nmOKeQL4c+jRQnTR8pt+y89g2QIpzFoHaV5T+WvQuC1t8xNOrxLgYFXWgl0dhoYE=\n=UCLC\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Dan Bryant",
                "date": "2015-09-01T14:44:44",
                "message_text_only": "Keep in mind... Legal or Not, many ISPs (Comcast for example) prohibit\noffering up network services (which a full node would supply) from\nyour residence.\n\nI checked AT&T's TOS and they have a carve-out on equipment that is scary\n\nhttp://www.att.com/legal/terms.internetAttTermsOfService.html\n\n>Regardless of whether the equipment used to access your Service (modem, gateway, etc.) is owned by you or AT&T, AT&T reserves the right to manage such equipment for the duration of your Service, and retains exclusive rights to data generated by the equipment. Neither you nor a third party may change, interfere with, or block access to equipment data or settings.\n\nAT&T seams to imply they implicitly have Admin rights to all\n\"equipment\" that connects to their network.  Clearly an overreach that\nneeds to be clarified, but there it is.\n\nAs for Comcast, they simply forbid network \"services\" that serve\nanyone off-premise.\n\nhttp://www.xfinity.com/Corporate/Customers/Policies/HighSpeedInternetAUP.html\n\n> [MAY NOT] use or run dedicated, stand-alone equipment or servers from the Premises that provide network\ncontent or any other services to anyone outside of your Premises local\narea network (\u201cPremises\nLAN\u201d), also commonly referred to as public services or servers.\nExamples of prohibited\nequipment and servers include, but are not limited to, email, web\nhosting, file sharing, and proxy\nservices and servers\n\nTechnically, P2P is prohibited in the Comcast TOS, or at least by my\nreading.  I realize that Comcast with deny this tooth and nail, but if\nthey ever want to exercise the prohibition, it is clearly spelled out\nin their TOS\n\nMy recommendation is to file a complaint with the FCC to bring up your\nissue as well as any overreach they spell out in the AUP or TOS.\n\nAs for me... I simply subscribed to a VPN.  That gives me both privacy\n(to a degree) and flexibility to open or close whatever ports I want.\n\nOn Tue, Sep 1, 2015 at 2:16 AM, odinn via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA512\n>\n> Another note on this subject to add to the stuff people have already\n> mentioned...\n>\n> If you have the AT&T landline but don't use AT&T's standard internet /\n> tv (what they call Uverse) offering - that is, if you prefer to use\n> some local internet provider - you are probably better off (in terms\n> of avoiding not only this sort of blockage/censorship but as well,\n> potentially getting a better privacy policy that isn't going to be\n> like AT&T's long-term data retention).  You can check directly with\n> the various local small ISPs to see what their policies are\n> specifically on ports and whatnot.\n>\n> Ideally your ISP should let you:\n>\n> port forward to SOMEPORTNUMBER for tcp and udp\n>\n> (above may or may not be helpful for some if you are using\n> decentralized markets)\n>\n> have port 8333 open\n>\n> (above is for bitcoin of course)\n>\n> Supposing you have FTTN because you are paying a local ISP for\n> internet service, and that local ISP has contracted with AT&T to be\n> able to provide service in an area where old-style DSL has been phased\n> out, thus your local ISP is essentially providing you AT&T FTTN.\n> (FTTN is Fiber to the Node, FTTN-BP is FTTN Bonded Pair).  Even if a\n> local ISP has its own privacy policy posted which is different from\n> AT&T, everything is subject to AT&T data retention because the FTTN.\n> So get yourself a VPN (or set up your own) for your connection. Tor\n> will run through the VPN.\n>\n> General observations - TWC stores your IP and other stuffs for 6\n> months or longer.  Same for Comcast.  Verizon retains your stuffs for\n> 18 month minimum, probably longer though. Qwest/Century, 1 year.\n> Cox, 6 months.  AT&T retains for longer than a year.  This is just\n> what they are telling you, the reality is it's probably longer due to\n> stuff like this:\n> https://www.lawfareblog.com/odni-and-doj-release-last-section-215-collec\n> tion-order\n>\n>\n>\n>\n>\n>\n>\n>\n>\n> Zach G via bitcoin-dev:\n>> I have been struggling to get port 8333 open all year, I gave up\n>> and was using blockchain for months despite a strong desire to stay\n>> on Bitcoin Core, but now the issue has reached critical mass since\n>> I'm using the python Bitcoin server module. I have literally spent\n>> my entire day trying to open 8333, I thoroughly made sure it was\n>> open on the router and computer and it's still closed. Strangely\n>> enough I got it open for 30 seconds once today but something closed\n>> it immediately.\n>>\n>> After hours of phone calls and messaging AT&T finally told me the\n>> truth of what was going on, and only because I noticed it myself\n>> and demanded an answer. The internet is being routed through a\n>> DVR/cable box, and they confirmed the DVR also has a firewall. To\n>> make this even more absurd they refused to turn the firewall off\n>> because it is their equipment. So effectively they can firewall any\n>> port they want even if the customer asks them not to, in the\n>> unlikely event the customer figures it out.\n>>\n>> Perhaps this is the driving force behind the inexplicable and\n>> massive decline in Bitcoin nodes. Bitcoin is being censored by the\n>> ISPs themselves, and they won't even tell you that. I had to get in\n>> touch with headquarters and threaten to rip it out of the wall to\n>> get a proper answer.\n>>\n>>\n>>\n>> _______________________________________________ bitcoin-dev mailing\n>> list bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n> - --\n> http://abis.io ~\n> \"a protocol concept to enable decentralization\n> and expansion of a giving economy, and a new social good\"\n> https://keybase.io/odinn\n> -----BEGIN PGP SIGNATURE-----\n>\n> iQEcBAEBCgAGBQJV5VDeAAoJEGxwq/inSG8CvkIH/jy4Vo+My3xeBdvFQmxkJWyQ\n> U5mv2zWEvBYw71Xy1EDzQY1AhEBmatUU1eu2AbOqXdUR4511FxCNzFmTxy6roEiz\n> EehBkvXNbBCbEzLRisjxuQw34OKM+xfieCqE1mzJok2uSdLMMQLcbWL1/k3/OmS5\n> 9O9z/wMXqU1Jc19MTK+vF1Lz5ilnRn3hEbTaCN3ivYnYFa0DpBH9r0Y07UcoJ6Wr\n> ui/x0sSSuupAGzOkZ75HQ8yeQXckeAu6TB3/jE8QEqNUmAJkmR8eK4ofXZWFrIjy\n> mOKeQL4c+jRQnTR8pt+y89g2QIpzFoHaV5T+WvQuC1t8xNOrxLgYFXWgl0dhoYE=\n> =UCLC\n> -----END PGP SIGNATURE-----\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "AT&T has effectively banned Bitcoin nodes by closing port 8333 via a hidden firewall in the cable box",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "odinn",
                "Dan Bryant",
                "Milly Bitcoin",
                "James Hilliard",
                "hurricanewarn1 at aol.com"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 15340
        }
    },
    {
        "title": "[bitcoin-dev] AT&T has effectively banned Bitcoin nodes via utilizing private subnets.",
        "thread_messages": [
            {
                "author": "hurricanewarn1 at aol.com",
                "date": "2015-09-02T07:20:35",
                "message_text_only": "I was about to buy a VPS for Bitcoin, but I really do need Bitcoin Core for business reasons so I didn't give up. I once again thoroughly went through my computer and made sure there was nothing blocking 8333, a couple useful tools are CurrPorts and TCPView. I went through the router to make sure there was no block of port 8333. I researched everything thoroughly and was sure these were the right settings, but Bitcoin was still getting throttled every second and stuck in sys_sent, and python kept saying the target was rejecting the connection.\n\nI finally stumbled upon subnet settings, and saw that I had a private subnet, one of the few IPs that are private on earth ( https://www.arin.net/knowledge/address_filters.html ). Uverse put all their customers on a private subnet by default. This made my computer not only hidden but unroutable for any computer on the Bitcoin network. That alone is enough to totally stop Bitcoin connections on any port, but they made it even crazier by generating a dynamic IP that changes all the time, so public IP was meaningless for my computer. \n\nI switched over to a public subnet, and right there was a checkbox to allow incoming connections. My static IP showed for a minute then became dynamic/hidden again without me even touching anything. The final roadblock was AT&T charges $15-30/month for a public static IP, which is obviously insane and actually one could argue that violates their own terms of service. So the router was still ignoring my public IP settings simply because I wasn't paying for a public IP, and intentionally changing the settings back. I asked for a free public IP and there was no response for awhile.\n\nI found this article on cryptocoinnews while working out: https://www.cryptocoinsnews.com/isps-intentionally-blocking-bitcoin/ It's based on the first email I sent, and was displayed prominently on their front page. I posted a tweet publicly about it which referenced AT&T ( https://twitter.com/turtlehurricane/status/638930065980551168 ) and believe it or not I had a static public IP and port 8333 was open about 1 minute later. I don't know if it was a coincidence cause I already messaged them to please do that an hour before, or if that article and tweet spurred them to action. The timing was so ridiculous I think it's the latter. Without twitter I probably wouldn't have succeeded, the technicians on twitter actually answered all my questions 24/7 unlike phone technicians which were clueless and trying to sell me a subscription for connection services help. And shout out to cryptocoinnews for making this public. \n\nSo to clarify, it appears AT&T has not blocked port 8333 itself, but rather effectively blocked all ports via the private subnet, which makes the computer hidden and unroutable for incoming peers. Although this severely limits functionality and cripples the ability to run a full node and many other programs it is understandable, since it just about 100% prevents hackers from getting in, since they can't even see your computer. What isn't understandable is that AT&T technicians did not inform me about this until I changed the settings myself, despite the fact it is a very obvious cause of ports being blocked. It's probably just ignorance since AT&T has so many complex network settings it's hard to keep track of, although I have a suspicion that someone in their command chain is withholding information in an attempt to make them buy a $15/month connection service, and once they buy that another $15-30/month is needed to get the static IP.\n\nAs far as I know there is no easy to find info on the internet about private subnets crippling the ability to use Bitcoin. I believe this needs to be explicitly said in instructions for running a full node, maybe it wasn't a problem in 2009 but now it is a major issue. On default settings Bitcoin is 100% blocked, and most people do not have the time or motivation to fix this. I talked to at least 10 AT&T technicians and worked on it 2-3 days straight, did not receive the right answer until I found it myself, although they certainly gave me some useful clues about how the network works.\n\nI am very happy that AT&T fixed it, since other ISPs like Comcast appeared even worse. I openly talked with them about Bitcoin and they showed no prejudice, might've actually made them more willing to help me cause otherwise they would think I'm a hacker.\n\ntl;dr The good news is anyone with AT&T can be a full node by getting a public static IP, the bad news is almost no one will figure this out unless we as a community make it well known. I guarantee node numbers will improve if this information is spread to everyone. Database size and computing expenditures is simply not the reason people don't run full nodes, it's because their ISP has made it just about impossible without shelling out nearly 100% more money per month. If you don't pay the fee AT&T would never tell you about the private subnet, at least based on my experience.\n\n\n-----Original Message-----\nFrom: odinn <odinn.cyberguerrilla at riseup.net>\nTo: hurricanewarn1 <hurricanewarn1 at aol.com>; bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nSent: Tue, Sep 1, 2015 3:16 am\nSubject: Re: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes by closing port 8333 via a hidden firewall in the cable box\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nAnother note on this subject\nto add to the stuff people have already\nmentioned...\n\nIf you have the AT&T\nlandline but don't use AT&T's standard internet /\ntv (what they call Uverse)\noffering - that is, if you prefer to use\nsome local internet provider - you are\nprobably better off (in terms\nof avoiding not only this sort of\nblockage/censorship but as well,\npotentially getting a better privacy policy\nthat isn't going to be\nlike AT&T's long-term data retention).  You can check\ndirectly with\nthe various local small ISPs to see what their policies\nare\nspecifically on ports and whatnot.\n\nIdeally your ISP should let\nyou:\n\nport forward to SOMEPORTNUMBER for tcp and udp\n\n(above may or may not\nbe helpful for some if you are using\ndecentralized markets)\n\nhave port 8333\nopen\n\n(above is for bitcoin of course)\n\nSupposing you have FTTN because you\nare paying a local ISP for\ninternet service, and that local ISP has contracted\nwith AT&T to be\nable to provide service in an area where old-style DSL has been\nphased\nout, thus your local ISP is essentially providing you AT&T FTTN.\n(FTTN\nis Fiber to the Node, FTTN-BP is FTTN Bonded Pair).  Even if a\nlocal ISP has\nits own privacy policy posted which is different from\nAT&T, everything is\nsubject to AT&T data retention because the FTTN.\nSo get yourself a VPN (or set\nup your own) for your connection. Tor\nwill run through the VPN.\n\nGeneral\nobservations - TWC stores your IP and other stuffs for 6\nmonths or longer. \nSame for Comcast.  Verizon retains your stuffs for\n18 month minimum, probably\nlonger though. Qwest/Century, 1 year.\nCox, 6 months.  AT&T retains for longer\nthan a year.  This is just\nwhat they are telling you, the reality is it's\nprobably longer due to\nstuff like\nthis:\nhttps://www.lawfareblog.com/odni-and-doj-release-last-section-215-collec\ntion-order\n\n\n\n\n\n\n\n\n\nZach\nG via bitcoin-dev:\n> I have been struggling to get port 8333 open all year, I\ngave up\n> and was using blockchain for months despite a strong desire to\nstay\n> on Bitcoin Core, but now the issue has reached critical mass since\n>\nI'm using the python Bitcoin server module. I have literally spent\n> my entire\nday trying to open 8333, I thoroughly made sure it was\n> open on the router and\ncomputer and it's still closed. Strangely\n> enough I got it open for 30 seconds\nonce today but something closed\n> it immediately.\n> \n> After hours of phone\ncalls and messaging AT&T finally told me the\n> truth of what was going on, and\nonly because I noticed it myself\n> and demanded an answer. The internet is\nbeing routed through a\n> DVR/cable box, and they confirmed the DVR also has a\nfirewall. To\n> make this even more absurd they refused to turn the firewall\noff\n> because it is their equipment. So effectively they can firewall any\n>\nport they want even if the customer asks them not to, in the\n> unlikely event\nthe customer figures it out.\n> \n> Perhaps this is the driving force behind the\ninexplicable and\n> massive decline in Bitcoin nodes. Bitcoin is being censored\nby the\n> ISPs themselves, and they won't even tell you that. I had to get in\n>\ntouch with headquarters and threaten to rip it out of the wall to\n> get a\nproper answer.\n> \n> \n> \n> _______________________________________________\nbitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n>\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- --\n\nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand\nexpansion of a giving economy, and a new social\ngood\"\nhttps://keybase.io/odinn\n-----BEGIN PGP\nSIGNATURE-----\n\niQEcBAEBCgAGBQJV5VDeAAoJEGxwq/inSG8CvkIH/jy4Vo+My3xeBdvFQmxkJWyQ\nU5mv2zWEvBYw71Xy1EDzQY1AhEBmatUU1eu2AbOqXdUR4511FxCNzFmTxy6roEiz\nEehBkvXNbBCbEzLRisjxuQw34OKM+xfieCqE1mzJok2uSdLMMQLcbWL1/k3/OmS5\n9O9z/wMXqU1Jc19MTK+vF1Lz5ilnRn3hEbTaCN3ivYnYFa0DpBH9r0Y07UcoJ6Wr\nui/x0sSSuupAGzOkZ75HQ8yeQXckeAu6TB3/jE8QEqNUmAJkmR8eK4ofXZWFrIjy\nmOKeQL4c+jRQnTR8pt+y89g2QIpzFoHaV5T+WvQuC1t8xNOrxLgYFXWgl0dhoYE=\n=UCLC\n-----END\nPGP SIGNATURE-----\n\n \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/4ec5e5ed/attachment-0001.html>"
            },
            {
                "author": "hurricanewarn1 at aol.com",
                "date": "2015-09-02T09:20:24",
                "message_text_only": "First off I couldn't synch the wallet, it said no block source available and there was zero connections. Bitcoin was literally getting thottled every second. It would not even allow the connection to get block source. EVERY port was blocked, making exceptions in the router firewall did nothing. I was forced to use Blockchain.info which is a major security risk.\n\nSecondly, I am developing a program using Bitcoin Python modules, so I login to my computer like it's a server and it was flat out rejecting the connection. I could not run any code until this got fixed, and of course needed the block source to even do anything. \n\nIf Bitcoin Core worked but 8333 was blocked I would not be emailing the list. Bitcoin Core was crippled and unusable due to the AT&T settings, and they tried hard to get me to buy monthly subscriptions to get the answer. This makes it likely that Bitcoin Core is unusable for most AT&T customers and other ISPs, hence the massive node decline. I'm sure this disrupts alot of other people besides Bitcoiners too, hence the monthly subscriptions geared towards people who can't figure out their connection situation.\n\nAT&T literally blocked access to static IP if you don't buy one, so it wasn't a normal network setup. Unfortunately the same security used to stop hackers and viruses stops Bitcoin too, so this is probably the settings for almost every router in the country. Nodes are in fact declining worldwide, down 15% in the past year alone. Community needs to speak up and also educate before this gets completely out of control. https://getaddr.bitnodes.io/dashboard/?days=365 6,000 nodes is pathetic as it is and it's constantly declining.\n \n\n \n\n-----Original Message-----\nFrom: Matt Whitlock <bip at mattwhitlock.name>\nTo: hurricanewarn1 <hurricanewarn1 at aol.com>\nSent: Wed, Sep 2, 2015 4:32 am\nSubject: Re: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes via utilizing private subnets.\n\n\nRespectfully, what the heck are you talking about? Practically every home LAN\nruns on a private subnet. My own desktop computer has the IP address\n192.168.1.34, which is in a private subnet. This doesn't prevent my Bitcoin Core\nnode from making outbound connections to other nodes. Moreover, almost all home\nInternet connections in the world run on dynamically assigned IP addresses.\nAgain, this does not cause any problems for connecting outbound to other Bitcoin\nnodes. It's true that your node can't accept incoming connections unless you\nforward port 8333 on your router to your computer, but you don't need to be able\nto accept incoming connections to participate in the Bitcoin network.\n\n\nOn\nWednesday, 2 September 2015, at 3:20 am, Zach G via bitcoin-dev wrote:\n> \n>  I\nwas about to buy a VPS for Bitcoin, but I really do need Bitcoin Core for\nbusiness reasons so I didn't give up. I once again thoroughly went through my\ncomputer and made sure there was nothing blocking 8333, a couple useful tools\nare CurrPorts and TCPView. I went through the router to make sure there was no\nblock of port 8333. I researched everything thoroughly and was sure these were\nthe right settings, but Bitcoin was still getting throttled every second and\nstuck in sys_sent, and python kept saying the target was rejecting the\nconnection.\n> \n> I finally stumbled upon subnet settings, and saw that I had a\nprivate subnet, one of the few IPs that are private on earth (\nhttps://www.arin.net/knowledge/address_filters.html ). Uverse put all their\ncustomers on a private subnet by default. This made my computer not only hidden\nbut unroutable for any computer on the Bitcoin network. That alone is enough to\ntotally stop Bitcoin connections on any port, but they made it even crazier by\ngenerating a dynamic IP that changes all the time, so public IP was meaningless\nfor my computer. \n> \n> I switched over to a public subnet, and right there was\na checkbox to allow incoming connections. My static IP showed for a minute then\nbecame dynamic/hidden again without me even touching anything. The final\nroadblock was AT&T charges $15-30/month for a public static IP, which is\nobviously insane and actually one could argue that violates their own terms of\nservice. So the router was still ignoring my public IP settings simply because I\nwasn't paying for a public IP, and intentionally changing the settings back. I\nasked for a free public IP and there was no response for awhile.\n> \n> I found\nthis article on cryptocoinnews while working out:\nhttps://www.cryptocoinsnews.com/isps-intentionally-blocking-bitcoin/ It's based\non the first email I sent, and was displayed prominently on their front page. I\nposted a tweet publicly about it which referenced AT&T (\nhttps://twitter.com/turtlehurricane/status/638930065980551168 ) and believe it\nor not I had a static public IP and port 8333 was open about 1 minute later. I\ndon't know if it was a coincidence cause I already messaged them to please do\nthat an hour before, or if that article and tweet spurred them to action. The\ntiming was so ridiculous I think it's the latter. Without twitter I probably\nwouldn't have succeeded, the technicians on twitter actually answered all my\nquestions 24/7 unlike phone technicians which were clueless and trying to sell\nme a subscription for connection services help. And shout out to cryptocoinnews\nfor making this public. \n> \n> So to clarify, it appears AT&T has not blocked\nport 8333 itself, but rather effectively blocked all ports via the private\nsubnet, which makes the computer hidden and unroutable for incoming peers.\nAlthough this severely limits functionality and cripples the ability to run a\nfull node and many other programs it is understandable, since it just about 100%\nprevents hackers from getting in, since they can't even see your computer. What\nisn't understandable is that AT&T technicians did not inform me about this until\nI changed the settings myself, despite the fact it is a very obvious cause of\nports being blocked. It's probably just ignorance since AT&T has so many complex\nnetwork settings it's hard to keep track of, although I have a suspicion that\nsomeone in their command chain is withholding information in an attempt to make\nthem buy a $15/month connection service, and once they buy that another\n$15-30/month is needed to get the static IP.\n> \n> As far as I know there is no\neasy to find info on the internet about private subnets crippling the ability to\nuse Bitcoin. I believe this needs to be explicitly said in instructions for\nrunning a full node, maybe it wasn't a problem in 2009 but now it is a major\nissue. On default settings Bitcoin is 100% blocked, and most people do not have\nthe time or motivation to fix this. I talked to at least 10 AT&T technicians and\nworked on it 2-3 days straight, did not receive the right answer until I found\nit myself, although they certainly gave me some useful clues about how the\nnetwork works.\n> \n> I am very happy that AT&T fixed it, since other ISPs like\nComcast appeared even worse. I openly talked with them about Bitcoin and they\nshowed no prejudice, might've actually made them more willing to help me cause\notherwise they would think I'm a hacker.\n> \n> tl;dr The good news is anyone\nwith AT&T can be a full node by getting a public static IP, the bad news is\nalmost no one will figure this out unless we as a community make it well known.\nI guarantee node numbers will improve if this information is spread to everyone.\nDatabase size and computing expenditures is simply not the reason people don't\nrun full nodes, it's because their ISP has made it just about impossible without\nshelling out nearly 100% more money per month. If you don't pay the fee AT&T\nwould never tell you about the private subnet, at least based on my\nexperience.\n> \n> \n> -----Original Message-----\n> From: odinn\n<odinn.cyberguerrilla at riseup.net>\n> To: hurricanewarn1\n<hurricanewarn1 at aol.com>; bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n>\nSent: Tue, Sep 1, 2015 3:16 am\n> Subject: Re: [bitcoin-dev] AT&T has\neffectively banned Bitcoin nodes by closing port 8333 via a hidden firewall in\nthe cable box\n> \n> \n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA512\n>\n\n> Another note on this subject\n> to add to the stuff people have already\n>\nmentioned...\n> \n> If you have the AT&T\n> landline but don't use AT&T's\nstandard internet /\n> tv (what they call Uverse)\n> offering - that is, if you\nprefer to use\n> some local internet provider - you are\n> probably better off\n(in terms\n> of avoiding not only this sort of\n> blockage/censorship but as\nwell,\n> potentially getting a better privacy policy\n> that isn't going to\nbe\n> like AT&T's long-term data retention).  You can check\n> directly with\n>\nthe various local small ISPs to see what their policies\n> are\n> specifically\non ports and whatnot.\n> \n> Ideally your ISP should let\n> you:\n> \n> port\nforward to SOMEPORTNUMBER for tcp and udp\n> \n> (above may or may not\n> be\nhelpful for some if you are using\n> decentralized markets)\n> \n> have port\n8333\n> open\n> \n> (above is for bitcoin of course)\n> \n> Supposing you have\nFTTN because you\n> are paying a local ISP for\n> internet service, and that\nlocal ISP has contracted\n> with AT&T to be\n> able to provide service in an\narea where old-style DSL has been\n> phased\n> out, thus your local ISP is\nessentially providing you AT&T FTTN.\n> (FTTN\n> is Fiber to the Node, FTTN-BP\nis FTTN Bonded Pair).  Even if a\n> local ISP has\n> its own privacy policy\nposted which is different from\n> AT&T, everything is\n> subject to AT&T data\nretention because the FTTN.\n> So get yourself a VPN (or set\n> up your own) for\nyour connection. Tor\n> will run through the VPN.\n> \n> General\n> observations\n- TWC stores your IP and other stuffs for 6\n> months or longer. \n> Same for\nComcast.  Verizon retains your stuffs for\n> 18 month minimum, probably\n>\nlonger though. Qwest/Century, 1 year.\n> Cox, 6 months.  AT&T retains for\nlonger\n> than a year.  This is just\n> what they are telling you, the reality\nis it's\n> probably longer due to\n> stuff like\n> this:\n>\nhttps://www.lawfareblog.com/odni-and-doj-release-last-section-215-collec\n>\ntion-order\n> \n> \n> \n> \n> \n> \n> \n> \n> \n> Zach\n> G via bitcoin-dev:\n>\n> I have been struggling to get port 8333 open all year, I\n> gave up\n> > and\nwas using blockchain for months despite a strong desire to\n> stay\n> > on\nBitcoin Core, but now the issue has reached critical mass since\n> >\n> I'm\nusing the python Bitcoin server module. I have literally spent\n> > my entire\n>\nday trying to open 8333, I thoroughly made sure it was\n> > open on the router\nand\n> computer and it's still closed. Strangely\n> > enough I got it open for\n30 seconds\n> once today but something closed\n> > it immediately.\n> > \n> >\nAfter hours of phone\n> calls and messaging AT&T finally told me the\n> > truth\nof what was going on, and\n> only because I noticed it myself\n> > and demanded\nan answer. The internet is\n> being routed through a\n> > DVR/cable box, and\nthey confirmed the DVR also has a\n> firewall. To\n> > make this even more\nabsurd they refused to turn the firewall\n> off\n> > because it is their\nequipment. So effectively they can firewall any\n> >\n> port they want even if\nthe customer asks them not to, in the\n> > unlikely event\n> the customer\nfigures it out.\n> > \n> > Perhaps this is the driving force behind the\n>\ninexplicable and\n> > massive decline in Bitcoin nodes. Bitcoin is being\ncensored\n> by the\n> > ISPs themselves, and they won't even tell you that. I\nhad to get in\n> >\n> touch with headquarters and threaten to rip it out of the\nwall to\n> > get a\n> proper answer.\n> > \n> > \n> > \n> >\n_______________________________________________\n> bitcoin-dev mailing\n> > list\nbitcoin-dev at lists.linuxfoundation.org \n> >\n>\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > \n> \n> -\n--\n> \n> http://abis.io ~\n> \"a protocol concept to enable decentralization\n>\nand\n> expansion of a giving economy, and a new social\n> good\"\n>\nhttps://keybase.io/odinn\n> -----BEGIN PGP\n> SIGNATURE-----\n> \n>\niQEcBAEBCgAGBQJV5VDeAAoJEGxwq/inSG8CvkIH/jy4Vo+My3xeBdvFQmxkJWyQ\n>\nU5mv2zWEvBYw71Xy1EDzQY1AhEBmatUU1eu2AbOqXdUR4511FxCNzFmTxy6roEiz\n>\nEehBkvXNbBCbEzLRisjxuQw34OKM+xfieCqE1mzJok2uSdLMMQLcbWL1/k3/OmS5\n>\n9O9z/wMXqU1Jc19MTK+vF1Lz5ilnRn3hEbTaCN3ivYnYFa0DpBH9r0Y07UcoJ6Wr\n>\nui/x0sSSuupAGzOkZ75HQ8yeQXckeAu6TB3/jE8QEqNUmAJkmR8eK4ofXZWFrIjy\n>\nmOKeQL4c+jRQnTR8pt+y89g2QIpzFoHaV5T+WvQuC1t8xNOrxLgYFXWgl0dhoYE=\n> =UCLC\n>\n-----END\n> PGP SIGNATURE-----\n> \n>  \n\n \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/acbda28d/attachment-0001.html>"
            },
            {
                "author": "hurricanewarn1 at aol.com",
                "date": "2015-09-02T13:44:53",
                "message_text_only": "42 in the whole world, and I'm one of them. Clearly that is a problem, do you even know about AT&T or are you in another country? Cause that statement is utterly ridiculous given the fact there are hundreds of millions of people using AT&T. I was simply sharing my knowledge on this issue since it poses a threat to the health of the bitcoin network, no need for personal attacks. \n\nNone of my accusations were false, there is a firewall in the DVR that is uncontrolled and all ports are blocked via private subnets and no fixed public IP allowed unless you pay. I confirmed every one of these details with AT&T technicians or I wouldn't be saying them.\n\n \n\n \n\n \n\n-----Original Message-----\nFrom: Matt Whitlock <bip at mattwhitlock.name>\nTo: hurricanewarn1 <hurricanewarn1 at aol.com>\nSent: Wed, Sep 2, 2015 5:34 am\nSubject: Re: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes via utilizing private subnets.\n\n\nAccording to BitNodes, 42 Bitcoin nodes are running on AT&T's\nnetwork:\n\nhttps://getaddr.bitnodes.io/nodes/?q=AT%26T\n\nSo I'm thinking\nthere's nothing wrong with AT&T's default network configuration.\n\nFrankly, the\nthings you've been writing strongly suggest that you aren't very knowledgeable\nabout computer networking. Instead of jumping right into making wild accusations\nabout AT&T, you probably should find someone knowledgeable to verify your\nclaims.\n\n\nOn Wednesday, 2 September 2015, at 5:20 am, Zach G via bitcoin-dev\nwrote:\n> First off I couldn't synch the wallet, it said no block source\navailable and there was zero connections. Bitcoin was literally getting thottled\nevery second. It would not even allow the connection to get block source. EVERY\nport was blocked, making exceptions in the router firewall did nothing. I was\nforced to use Blockchain.info which is a major security risk.\n> \n> Secondly, I\nam developing a program using Bitcoin Python modules, so I login to my computer\nlike it's a server and it was flat out rejecting the connection. I could not run\nany code until this got fixed, and of course needed the block source to even do\nanything. \n> \n> If Bitcoin Core worked but 8333 was blocked I would not be\nemailing the list. Bitcoin Core was crippled and unusable due to the AT&T\nsettings, and they tried hard to get me to buy monthly subscriptions to get the\nanswer. This makes it likely that Bitcoin Core is unusable for most AT&T\ncustomers and other ISPs, hence the massive node decline. I'm sure this disrupts\nalot of other people besides Bitcoiners too, hence the monthly subscriptions\ngeared towards people who can't figure out their connection situation.\n> \n>\nAT&T literally blocked access to static IP if you don't buy one, so it wasn't a\nnormal network setup. Unfortunately the same security used to stop hackers and\nviruses stops Bitcoin too, so this is probably the settings for almost every\nrouter in the country. Nodes are in fact declining worldwide, down 15% in the\npast year alone. Community needs to speak up and also educate before this gets\ncompletely out of control. https://getaddr.bitnodes.io/dashboard/?days=365 6,000\nnodes is pathetic as it is and it's constantly declining.\n>  \n> \n>  \n> \n>\n-----Original Message-----\n> From: Matt Whitlock <bip at mattwhitlock.name>\n> To:\nhurricanewarn1 <hurricanewarn1 at aol.com>\n> Sent: Wed, Sep 2, 2015 4:32 am\n>\nSubject: Re: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes via\nutilizing private subnets.\n> \n> \n> Respectfully, what the heck are you\ntalking about? Practically every home LAN\n> runs on a private subnet. My own\ndesktop computer has the IP address\n> 192.168.1.34, which is in a private\nsubnet. This doesn't prevent my Bitcoin Core\n> node from making outbound\nconnections to other nodes. Moreover, almost all home\n> Internet connections in\nthe world run on dynamically assigned IP addresses.\n> Again, this does not\ncause any problems for connecting outbound to other Bitcoin\n> nodes. It's true\nthat your node can't accept incoming connections unless you\n> forward port 8333\non your router to your computer, but you don't need to be able\n> to accept\nincoming connections to participate in the Bitcoin network.\n> \n> \n> On\n>\nWednesday, 2 September 2015, at 3:20 am, Zach G via bitcoin-dev wrote:\n> > \n>\n>  I\n> was about to buy a VPS for Bitcoin, but I really do need Bitcoin Core\nfor\n> business reasons so I didn't give up. I once again thoroughly went\nthrough my\n> computer and made sure there was nothing blocking 8333, a couple\nuseful tools\n> are CurrPorts and TCPView. I went through the router to make\nsure there was no\n> block of port 8333. I researched everything thoroughly and\nwas sure these were\n> the right settings, but Bitcoin was still getting\nthrottled every second and\n> stuck in sys_sent, and python kept saying the\ntarget was rejecting the\n> connection.\n> > \n> > I finally stumbled upon\nsubnet settings, and saw that I had a\n> private subnet, one of the few IPs that\nare private on earth (\n> https://www.arin.net/knowledge/address_filters.html ).\nUverse put all their\n> customers on a private subnet by default. This made my\ncomputer not only hidden\n> but unroutable for any computer on the Bitcoin\nnetwork. That alone is enough to\n> totally stop Bitcoin connections on any\nport, but they made it even crazier by\n> generating a dynamic IP that changes\nall the time, so public IP was meaningless\n> for my computer. \n> > \n> > I\nswitched over to a public subnet, and right there was\n> a checkbox to allow\nincoming connections. My static IP showed for a minute then\n> became\ndynamic/hidden again without me even touching anything. The final\n> roadblock\nwas AT&T charges $15-30/month for a public static IP, which is\n> obviously\ninsane and actually one could argue that violates their own terms of\n> service.\nSo the router was still ignoring my public IP settings simply because I\n>\nwasn't paying for a public IP, and intentionally changing the settings back.\nI\n> asked for a free public IP and there was no response for awhile.\n> > \n> >\nI found\n> this article on cryptocoinnews while working out:\n>\nhttps://www.cryptocoinsnews.com/isps-intentionally-blocking-bitcoin/ It's\nbased\n> on the first email I sent, and was displayed prominently on their front\npage. I\n> posted a tweet publicly about it which referenced AT&T (\n>\nhttps://twitter.com/turtlehurricane/status/638930065980551168 ) and believe\nit\n> or not I had a static public IP and port 8333 was open about 1 minute\nlater. I\n> don't know if it was a coincidence cause I already messaged them to\nplease do\n> that an hour before, or if that article and tweet spurred them to\naction. The\n> timing was so ridiculous I think it's the latter. Without twitter\nI probably\n> wouldn't have succeeded, the technicians on twitter actually\nanswered all my\n> questions 24/7 unlike phone technicians which were clueless\nand trying to sell\n> me a subscription for connection services help. And shout\nout to cryptocoinnews\n> for making this public. \n> > \n> > So to clarify, it\nappears AT&T has not blocked\n> port 8333 itself, but rather effectively blocked\nall ports via the private\n> subnet, which makes the computer hidden and\nunroutable for incoming peers.\n> Although this severely limits functionality\nand cripples the ability to run a\n> full node and many other programs it is\nunderstandable, since it just about 100%\n> prevents hackers from getting in,\nsince they can't even see your computer. What\n> isn't understandable is that\nAT&T technicians did not inform me about this until\n> I changed the settings\nmyself, despite the fact it is a very obvious cause of\n> ports being blocked.\nIt's probably just ignorance since AT&T has so many complex\n> network settings\nit's hard to keep track of, although I have a suspicion that\n> someone in their\ncommand chain is withholding information in an attempt to make\n> them buy a\n$15/month connection service, and once they buy that another\n> $15-30/month is\nneeded to get the static IP.\n> > \n> > As far as I know there is no\n> easy to\nfind info on the internet about private subnets crippling the ability to\n> use\nBitcoin. I believe this needs to be explicitly said in instructions for\n>\nrunning a full node, maybe it wasn't a problem in 2009 but now it is a major\n>\nissue. On default settings Bitcoin is 100% blocked, and most people do not\nhave\n> the time or motivation to fix this. I talked to at least 10 AT&T\ntechnicians and\n> worked on it 2-3 days straight, did not receive the right\nanswer until I found\n> it myself, although they certainly gave me some useful\nclues about how the\n> network works.\n> > \n> > I am very happy that AT&T fixed\nit, since other ISPs like\n> Comcast appeared even worse. I openly talked with\nthem about Bitcoin and they\n> showed no prejudice, might've actually made them\nmore willing to help me cause\n> otherwise they would think I'm a hacker.\n> >\n\n> > tl;dr The good news is anyone\n> with AT&T can be a full node by getting a\npublic static IP, the bad news is\n> almost no one will figure this out unless\nwe as a community make it well known.\n> I guarantee node numbers will improve\nif this information is spread to everyone.\n> Database size and computing\nexpenditures is simply not the reason people don't\n> run full nodes, it's\nbecause their ISP has made it just about impossible without\n> shelling out\nnearly 100% more money per month. If you don't pay the fee AT&T\n> would never\ntell you about the private subnet, at least based on my\n> experience.\n> > \n>\n> \n> > -----Original Message-----\n> > From: odinn\n>\n<odinn.cyberguerrilla at riseup.net>\n> > To: hurricanewarn1\n>\n<hurricanewarn1 at aol.com>; bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n>\n>\n> Sent: Tue, Sep 1, 2015 3:16 am\n> > Subject: Re: [bitcoin-dev] AT&T has\n>\neffectively banned Bitcoin nodes by closing port 8333 via a hidden firewall\nin\n> the cable box\n> > \n> > \n> > -----BEGIN PGP SIGNED MESSAGE-----\n> >\nHash: SHA512\n> >\n> \n> > Another note on this subject\n> > to add to the stuff\npeople have already\n> >\n> mentioned...\n> > \n> > If you have the AT&T\n> >\nlandline but don't use AT&T's\n> standard internet /\n> > tv (what they call\nUverse)\n> > offering - that is, if you\n> prefer to use\n> > some local\ninternet provider - you are\n> > probably better off\n> (in terms\n> > of\navoiding not only this sort of\n> > blockage/censorship but as\n> well,\n> >\npotentially getting a better privacy policy\n> > that isn't going to\n> be\n> >\nlike AT&T's long-term data retention).  You can check\n> > directly with\n> >\n>\nthe various local small ISPs to see what their policies\n> > are\n> >\nspecifically\n> on ports and whatnot.\n> > \n> > Ideally your ISP should let\n>\n> you:\n> > \n> > port\n> forward to SOMEPORTNUMBER for tcp and udp\n> > \n> >\n(above may or may not\n> > be\n> helpful for some if you are using\n> >\ndecentralized markets)\n> > \n> > have port\n> 8333\n> > open\n> > \n> > (above\nis for bitcoin of course)\n> > \n> > Supposing you have\n> FTTN because you\n> >\nare paying a local ISP for\n> > internet service, and that\n> local ISP has\ncontracted\n> > with AT&T to be\n> > able to provide service in an\n> area where\nold-style DSL has been\n> > phased\n> > out, thus your local ISP is\n>\nessentially providing you AT&T FTTN.\n> > (FTTN\n> > is Fiber to the Node,\nFTTN-BP\n> is FTTN Bonded Pair).  Even if a\n> > local ISP has\n> > its own\nprivacy policy\n> posted which is different from\n> > AT&T, everything is\n> >\nsubject to AT&T data\n> retention because the FTTN.\n> > So get yourself a VPN\n(or set\n> > up your own) for\n> your connection. Tor\n> > will run through the\nVPN.\n> > \n> > General\n> > observations\n> - TWC stores your IP and other\nstuffs for 6\n> > months or longer. \n> > Same for\n> Comcast.  Verizon retains\nyour stuffs for\n> > 18 month minimum, probably\n> >\n> longer though.\nQwest/Century, 1 year.\n> > Cox, 6 months.  AT&T retains for\n> longer\n> > than\na year.  This is just\n> > what they are telling you, the reality\n> is it's\n>\n> probably longer due to\n> > stuff like\n> > this:\n> >\n>\nhttps://www.lawfareblog.com/odni-and-doj-release-last-section-215-collec\n> >\n>\ntion-order\n> > \n> > \n> > \n> > \n> > \n> > \n> > \n> > \n> > \n> > Zach\n> >\nG via bitcoin-dev:\n> >\n> > I have been struggling to get port 8333 open all\nyear, I\n> > gave up\n> > > and\n> was using blockchain for months despite a\nstrong desire to\n> > stay\n> > > on\n> Bitcoin Core, but now the issue has\nreached critical mass since\n> > >\n> > I'm\n> using the python Bitcoin server\nmodule. I have literally spent\n> > > my entire\n> >\n> day trying to open 8333,\nI thoroughly made sure it was\n> > > open on the router\n> and\n> > computer and\nit's still closed. Strangely\n> > > enough I got it open for\n> 30 seconds\n> >\nonce today but something closed\n> > > it immediately.\n> > > \n> > >\n> After\nhours of phone\n> > calls and messaging AT&T finally told me the\n> > > truth\n>\nof what was going on, and\n> > only because I noticed it myself\n> > > and\ndemanded\n> an answer. The internet is\n> > being routed through a\n> > >\nDVR/cable box, and\n> they confirmed the DVR also has a\n> > firewall. To\n> > >\nmake this even more\n> absurd they refused to turn the firewall\n> > off\n> > >\nbecause it is their\n> equipment. So effectively they can firewall any\n> > >\n>\n> port they want even if\n> the customer asks them not to, in the\n> > >\nunlikely event\n> > the customer\n> figures it out.\n> > > \n> > > Perhaps this\nis the driving force behind the\n> >\n> inexplicable and\n> > > massive decline\nin Bitcoin nodes. Bitcoin is being\n> censored\n> > by the\n> > > ISPs\nthemselves, and they won't even tell you that. I\n> had to get in\n> > >\n> >\ntouch with headquarters and threaten to rip it out of the\n> wall to\n> > > get\na\n> > proper answer.\n> > > \n> > > \n> > > \n> > >\n>\n_______________________________________________\n> > bitcoin-dev mailing\n> > >\nlist\n> bitcoin-dev at lists.linuxfoundation.org \n> > >\n> >\n>\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > > \n> > \n>\n> -\n> --\n> > \n> > http://abis.io ~\n> > \"a protocol concept to enable\ndecentralization\n> >\n> and\n> > expansion of a giving economy, and a new\nsocial\n> > good\"\n> >\n> https://keybase.io/odinn\n> > -----BEGIN PGP\n> >\nSIGNATURE-----\n> > \n> >\n>\niQEcBAEBCgAGBQJV5VDeAAoJEGxwq/inSG8CvkIH/jy4Vo+My3xeBdvFQmxkJWyQ\n> >\n>\nU5mv2zWEvBYw71Xy1EDzQY1AhEBmatUU1eu2AbOqXdUR4511FxCNzFmTxy6roEiz\n> >\n>\nEehBkvXNbBCbEzLRisjxuQw34OKM+xfieCqE1mzJok2uSdLMMQLcbWL1/k3/OmS5\n> >\n>\n9O9z/wMXqU1Jc19MTK+vF1Lz5ilnRn3hEbTaCN3ivYnYFa0DpBH9r0Y07UcoJ6Wr\n> >\n>\nui/x0sSSuupAGzOkZ75HQ8yeQXckeAu6TB3/jE8QEqNUmAJkmR8eK4ofXZWFrIjy\n> >\n>\nmOKeQL4c+jRQnTR8pt+y89g2QIpzFoHaV5T+WvQuC1t8xNOrxLgYFXWgl0dhoYE=\n> > =UCLC\n>\n>\n> -----END\n> > PGP SIGNATURE-----\n> > \n> >  \n> \n>  \n\n \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/960fffea/attachment-0001.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2015-09-02T19:21:48",
                "message_text_only": "I've been trying to keep our discussion off-list because it is off-topic, but you keep adding the list back on in your replies.\n\nhttp://steamforge.net/wiki/images/2/29/Settings-Firewall-Advanced.png\n\nSettings > Firewall > Advanced Configuration > Outbound Protocol Control > All Other Protocols\n\nThat's all you had to do.\n\n\nOn Wednesday, 2 September 2015, at 9:44 am, Zach G via bitcoin-dev wrote:\n> 42 in the whole world, and I'm one of them. Clearly that is a problem, do you even know about AT&T or are you in another country? Cause that statement is utterly ridiculous given the fact there are hundreds of millions of people using AT&T. I was simply sharing my knowledge on this issue since it poses a threat to the health of the bitcoin network, no need for personal attacks. \n> \n> None of my accusations were false, there is a firewall in the DVR that is uncontrolled and all ports are blocked via private subnets and no fixed public IP allowed unless you pay. I confirmed every one of these details with AT&T technicians or I wouldn't be saying them.\n> \n>  \n> \n>  \n> \n>  \n> \n> -----Original Message-----\n> From: Matt Whitlock <bip at mattwhitlock.name>\n> To: hurricanewarn1 <hurricanewarn1 at aol.com>\n> Sent: Wed, Sep 2, 2015 5:34 am\n> Subject: Re: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes via utilizing private subnets.\n> \n> \n> According to BitNodes, 42 Bitcoin nodes are running on AT&T's\n> network:\n> \n> https://getaddr.bitnodes.io/nodes/?q=AT%26T\n> \n> So I'm thinking\n> there's nothing wrong with AT&T's default network configuration.\n> \n> Frankly, the\n> things you've been writing strongly suggest that you aren't very knowledgeable\n> about computer networking. Instead of jumping right into making wild accusations\n> about AT&T, you probably should find someone knowledgeable to verify your\n> claims.\n> \n> \n> On Wednesday, 2 September 2015, at 5:20 am, Zach G via bitcoin-dev\n> wrote:\n> > First off I couldn't synch the wallet, it said no block source\n> available and there was zero connections. Bitcoin was literally getting thottled\n> every second. It would not even allow the connection to get block source. EVERY\n> port was blocked, making exceptions in the router firewall did nothing. I was\n> forced to use Blockchain.info which is a major security risk.\n> > \n> > Secondly, I\n> am developing a program using Bitcoin Python modules, so I login to my computer\n> like it's a server and it was flat out rejecting the connection. I could not run\n> any code until this got fixed, and of course needed the block source to even do\n> anything. \n> > \n> > If Bitcoin Core worked but 8333 was blocked I would not be\n> emailing the list. Bitcoin Core was crippled and unusable due to the AT&T\n> settings, and they tried hard to get me to buy monthly subscriptions to get the\n> answer. This makes it likely that Bitcoin Core is unusable for most AT&T\n> customers and other ISPs, hence the massive node decline. I'm sure this disrupts\n> alot of other people besides Bitcoiners too, hence the monthly subscriptions\n> geared towards people who can't figure out their connection situation.\n> > \n> >\n> AT&T literally blocked access to static IP if you don't buy one, so it wasn't a\n> normal network setup. Unfortunately the same security used to stop hackers and\n> viruses stops Bitcoin too, so this is probably the settings for almost every\n> router in the country. Nodes are in fact declining worldwide, down 15% in the\n> past year alone. Community needs to speak up and also educate before this gets\n> completely out of control. https://getaddr.bitnodes.io/dashboard/?days=365 6,000\n> nodes is pathetic as it is and it's constantly declining."
            },
            {
                "author": "hurricanewarn1 at aol.com",
                "date": "2015-09-02T20:31:05",
                "message_text_only": "When you assume you make an ass out of you and me. That page doesn't even exist in my router, I don't have 2wire. The router I have is the one everyone is getting from uverse.\n\nLiterally everything you said is incorrect. It is completely on topic as it pertains to Bitcoin Core functionality, 42 connections is nothing, and that's not how you fix it. If you're gonna call me out for being wrong at least be correct! I spent a lot of time fixing this and the info is useful cause this problem happens to a lot of people, so why obfuscate it with this nonsense. \n\nAT&T u-verse as it is now is near impossible for bitcoin nodes, 42 in the world is absolutely pathetic considering they are among the top 2 ISPs in the USA. Thanks for proving my point.\n\n \n\n \n\n-----Original Message-----\nFrom: Matt Whitlock <bip at mattwhitlock.name>\nTo: hurricanewarn1 <hurricanewarn1 at aol.com>\nCc: bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nSent: Wed, Sep 2, 2015 3:21 pm\nSubject: Re: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes via utilizing private subnets.\n\n\nI've been trying to keep our discussion off-list because it is off-topic, but\nyou keep adding the list back on in your\nreplies.\n\nhttp://steamforge.net/wiki/images/2/29/Settings-Firewall-Advanced.png\n\nSettings\n> Firewall > Advanced Configuration > Outbound Protocol Control > All Other\nProtocols\n\nThat's all you had to do.\n\n\nOn Wednesday, 2 September 2015, at\n9:44 am, Zach G via bitcoin-dev wrote:\n> 42 in the whole world, and I'm one of\nthem. Clearly that is a problem, do you even know about AT&T or are you in\nanother country? Cause that statement is utterly ridiculous given the fact there\nare hundreds of millions of people using AT&T. I was simply sharing my knowledge\non this issue since it poses a threat to the health of the bitcoin network, no\nneed for personal attacks. \n> \n> None of my accusations were false, there is a\nfirewall in the DVR that is uncontrolled and all ports are blocked via private\nsubnets and no fixed public IP allowed unless you pay. I confirmed every one of\nthese details with AT&T technicians or I wouldn't be saying them.\n> \n>  \n>\n\n>  \n> \n>  \n> \n> -----Original Message-----\n> From: Matt Whitlock\n<bip at mattwhitlock.name>\n> To: hurricanewarn1 <hurricanewarn1 at aol.com>\n> Sent:\nWed, Sep 2, 2015 5:34 am\n> Subject: Re: [bitcoin-dev] AT&T has effectively\nbanned Bitcoin nodes via utilizing private subnets.\n> \n> \n> According to\nBitNodes, 42 Bitcoin nodes are running on AT&T's\n> network:\n> \n>\nhttps://getaddr.bitnodes.io/nodes/?q=AT%26T\n> \n> So I'm thinking\n> there's\nnothing wrong with AT&T's default network configuration.\n> \n> Frankly, the\n>\nthings you've been writing strongly suggest that you aren't very\nknowledgeable\n> about computer networking. Instead of jumping right into making\nwild accusations\n> about AT&T, you probably should find someone knowledgeable\nto verify your\n> claims.\n> \n> \n> On Wednesday, 2 September 2015, at 5:20 am,\nZach G via bitcoin-dev\n> wrote:\n> > First off I couldn't synch the wallet, it\nsaid no block source\n> available and there was zero connections. Bitcoin was\nliterally getting thottled\n> every second. It would not even allow the\nconnection to get block source. EVERY\n> port was blocked, making exceptions in\nthe router firewall did nothing. I was\n> forced to use Blockchain.info which is\na major security risk.\n> > \n> > Secondly, I\n> am developing a program using\nBitcoin Python modules, so I login to my computer\n> like it's a server and it\nwas flat out rejecting the connection. I could not run\n> any code until this\ngot fixed, and of course needed the block source to even do\n> anything. \n> >\n\n> > If Bitcoin Core worked but 8333 was blocked I would not be\n> emailing the\nlist. Bitcoin Core was crippled and unusable due to the AT&T\n> settings, and\nthey tried hard to get me to buy monthly subscriptions to get the\n> answer.\nThis makes it likely that Bitcoin Core is unusable for most AT&T\n> customers\nand other ISPs, hence the massive node decline. I'm sure this disrupts\n> alot\nof other people besides Bitcoiners too, hence the monthly subscriptions\n>\ngeared towards people who can't figure out their connection situation.\n> > \n>\n>\n> AT&T literally blocked access to static IP if you don't buy one, so it\nwasn't a\n> normal network setup. Unfortunately the same security used to stop\nhackers and\n> viruses stops Bitcoin too, so this is probably the settings for\nalmost every\n> router in the country. Nodes are in fact declining worldwide,\ndown 15% in the\n> past year alone. Community needs to speak up and also educate\nbefore this gets\n> completely out of control.\nhttps://getaddr.bitnodes.io/dashboard/?days=365 6,000\n> nodes is pathetic as it\nis and it's constantly declining.\n\n \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/df785a6e/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "AT&T has effectively banned Bitcoin nodes via utilizing private subnets.",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Matt Whitlock",
                "hurricanewarn1 at aol.com"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 45447
        }
    },
    {
        "title": "[bitcoin-dev] Message: 5",
        "thread_messages": [
            {
                "author": "William Miller",
                "date": "2015-09-01T01:21:08",
                "message_text_only": "Message: 5\nDate: Mon, 31 Aug 2015 20:26:17 -0400\nFrom: hurricanewarn1 at aol.com\nTo: bitcoin-dev at lists.linuxfoundation.org\nSubject: [bitcoin-dev] AT&T has effectively banned Bitcoin nodes by\n\tclosing port 8333 via a hidden firewall in the cable box\nMessage-ID: <14f864c1631-3abb-a855 at webprd-a67.mail.aol.com>\nContent-Type: text/plain; charset=\"utf-8\"\n\nI have been struggling to get port 8333 open all year, I gave up and was\nusing blockchain for months despite a strong desire to stay on Bitcoin Core,\nbut now the issue has reached critical mass since I'm using the python\nBitcoin server module. I have literally spent my entire day trying to open\n8333, I thoroughly made sure it was open on the router and computer and it's\nstill closed. Strangely enough I got it open for 30 seconds once today but\nsomething closed it immediately.\n\nAfter hours of phone calls and messaging AT&T finally told me the truth of\nwhat was going on, and only because I noticed it myself and demanded an\nanswer. The internet is being routed through a DVR/cable box, and they\nconfirmed the DVR also has a firewall. To make this even more absurd they\nrefused to turn the firewall off because it is their equipment. So\neffectively they can firewall any port they want even if the customer asks\nthem not to, in the unlikely event the customer figures it out.\n\nPerhaps this is the driving force behind the inexplicable and massive\ndecline in Bitcoin nodes. Bitcoin is being censored by the ISPs themselves,\nand they won't even tell you that. I had to get in touch with headquarters\nand threaten to rip it out of the wall to get a proper answer.\n\n\nI am grateful that, as of this current moment, Time Warner doesn't seem to\nmind. I am aware of what you're saying, because a friend had me look at\ntheir AT&T system one day, and I discovered all their equipment is now\nrunning over IP. I was not aware, however, that they wouldn't unblock a\nport.\n\nI run a bitcoin node, miners ,all sort of other stuff (like Video, etc.) and\nit runs pretty good, even with me myself having everything 'double\nfirewalled'. Time Warner seems the way to go!"
            }
        ],
        "thread_summary": {
            "title": "Message: 5",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "William Miller"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2111
        }
    },
    {
        "title": "[bitcoin-dev] Let's kill Bitcoin Core and allow the green shoots of a garden of new implementations to grow from its fertile ashes",
        "thread_messages": [
            {
                "author": "Peter R",
                "date": "2015-09-01T02:16:22",
                "message_text_only": "I agree, s7r, that Bitcoin Core represents the most stable code base.  To create multiple implementations, other groups would fork Bitcoin Core similar to what Bitcoin XT did.  We could have:\n\n- Bitcoin-A (XT)\n- Bitcoin-B (Blockstream)\n- Bitcoin-C (promoting BIP100)\n- Bitcoin-D\n- etc.\n\nInnovation from any development group would be freely integrated by any other development group, if desired.  Of course, each group would have a very strong incentive to remain fork-wise compatible with the other implementations.  \n\nIn fact, this just gave me a great idea!  Since Wladimir has stated that he will not integrate a forking change into Core without Core Dev consensus, I suggest we work together to never reach consensus with Bitcoin Core.  This will provide impetus for new implementations to fork from Core (like XT did) and implement whatever scaling solution they deem best.  The users will then select the winning solution simply based on the code they choose to run.  The other implementations will then rush to make compatible changes in order to keep their dwindling user bases.  \n\nThis is the decentralized spirit of Bitcoin in action.  Creative destruction.  Consensus formed simply by the code that gets run.  \n\nLet's kill Bitcoin Core and allow the green shoots of a garden of new implementations to grow from its fertile ashes.  \n\nSincerely,\nPeter R\n\n\nOn 2015-08-31, at 4:47 PM, s7r <s7r at sky-ip.org> wrote:\n\n> Signed PGP part\n> Decentralization depends on the context and does not have a definition\n> in a form that it was demanded... I can confirm we have people in our\n> community which do understand decentralization, and quite good\n> actually, just there is no definition if the form demanded.\n> \n> It is known that ~90% (at least of the nodes accepting incoming\n> connections) are running Bitcoin Core software. This does not mean\n> that Bitcoin is somehow less decentralized. Bitcoin Core is open\n> source, it has many contributors from all over the world and there are\n> many pull requests - most of them do get merged if you check the\n> commit history. It is widely used because the quality of the code is 5\n> stars. There are other implementations as well, they are just not\n> widely used. This does not mean one is not free to write his own\n> implementation of the Bitcoin protocol (assuming he follows the\n> consensus rules of the network). The biggest problem is convincing\n> users to adopt that implementation, which is a normal thing which\n> happens in general, not only related to software implementations.\n> \n> The problem is there is no other implementation out there which comes\n> near the quality of the code in Bitcoin Core. I am actually eager to\n> try other implementations as well, but something serious, because\n> Bitcoin itself is a payment protocol not something to play with.\n> \n> This is the reason why a lot of developers contribute to Bitcoin Core\n> rather than writing their own implementation. This only makes Bitcoin\n> Core stronger, better, and obviously the result is that it has\n> majority in the ecosystem for good reasons. If I'm experienced in a\n> certain segment related to software developing, I am better of in\n> contributing to Bitcoin Core just with the part I know instead of\n> writing from scratch my own implementation.\n> \n> On 9/1/2015 2:32 AM, Peter R via bitcoin-dev wrote:\n> > On 2015-08-31, at 2:24 PM, Allen Piscitello via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org\n> > <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> >\n> >> Even so, *decentralization is a means to an end* - not an\n> >> end-goal. It is essential for Bitcoin to be a useful alternative,\n> >> of course.\n> >\n> > I agree.  What about decentralization in development?  Gavin\n> > recently said that he wants to \"get to the point where there will\n> > be multiple robust implementations of the core protocol.\"\n> >\n> > When I look at this image (https://i.imgur.com/zivHJvY.gif)\n> > illustrating centralization in nodes, mining and development, the\n> > biggest source of concern for me is the 85% node share around\n> > Bitcoin Core.  With this level of centralization, it may be\n> > possible in the future for a group of coders to prevent important\n> > changes from being made in a timely fashion (e.g., should their\n> > interests no longer align with those of the larger Bitcoin\n> > community).\n> >\n> > It is my opinion, then, that we should support multiple\n> > implementations of the Bitcoin protocol, working to reduce the\n> > network's dependency on Core.\n> >\n> > Best regards, Peter R\n> >\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150831/14b56b5b/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150831/14b56b5b/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-09-01T02:25:08",
                "message_text_only": "On Tue, Sep 1, 2015 at 2:16 AM, Peter R via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> - Bitcoin-B (Blockstream)\n\nBlockstream currently has no interest in maintaining a separate\nimplementation of Bitcoin.\n\nAt this time I believe doing so would have significantly negative\nvalue; especially in light of the current climate where people are\nconflating a tremendously destructive bifurcation of the Bitcoin\nledger with mere (and far more boring) alternative implementations."
            },
            {
                "author": "Adam Back",
                "date": "2015-09-01T08:42:51",
                "message_text_only": "Peter this seems to be a not well thought through course of action,\nfun though it maybe informally or philosophically or to tweak various\npeoples sensibilities.\n\nBitcoin is a consensus system that does not work if there are\nincompatible versions of consensus code competing on the network.\nThis is why work is underway on libconsensus so we can see diversity\nof implementation without the risk of incompatibility arising by\nsoftware defect.  It has proven quite hard to match independent\nconsensus implementations bit for bit against an adaptive adversary\nlooking for inconsistencies in interpretation.\n\nIn terms of protocol updates it is more constructive therefore that\npeople with a technical interest analyse and validate others proposals\nvia testing, or make their own proposals so that we can arrive at a\nwell validated upgrade mechanism that everyone upgrades to in a\ncoordinated fashion.\n\nPrevious intentional upgrades to bitcoin have been\nbackwards-compatible (via soft-fork which can be secured reasonably\nusing a miner vote trigger and temporary SPV security for those who\nnot yet upgraded) but the current topic of a throughput increase is\nnon-backwards-compatible (via a hard-fork), and the way to minimise\nrisk of such an upgrade is for everyone to try to upgrade well in\nadvance of an agreed upgrade schedule, and to be all upgrading to the\n*same* consensus rule change.\n\nEncouraging nodes or miners to \"vote\" by running a range of different\nconsensus rules isnt really constructive I feel - it alarms people who\nunderstand the risks, sets things on a path that have to be fixed\nwhile in flight by obvious implication, and isnt collaborative - so it\nrisks being a politicising suggestion on what should be a purely\ntechnical topic of choosing the best approach, where it is best to\nstrive to keep things non-emotive and professional and technically\nfocussed.  Such calls are offending the technical sensibilities of\npeople who understand the risks.\n\nAnyway lets try to keep things constructive and focus on analysing proposals.\n\nAdam\n\nOn 31 August 2015 at 19:16, Peter R via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I agree, s7r, that Bitcoin Core represents the most stable code base.  To\n> create multiple implementations, other groups would fork Bitcoin Core\n> similar to what Bitcoin XT did.  We could have:\n>\n> - Bitcoin-A (XT)\n> - Bitcoin-B (Blockstream)\n> - Bitcoin-C (promoting BIP100)\n> - Bitcoin-D\n> - etc.\n>\n> Innovation from any development group would be freely integrated by any\n> other development group, if desired.  Of course, each group would have a\n> very strong incentive to remain fork-wise compatible with the other\n> implementations.\n>\n> In fact, this just gave me a great idea!  Since Wladimir has stated that he\n> will not integrate a forking change into Core without Core Dev consensus, I\n> suggest we work together to never reach consensus with Bitcoin Core.  This\n> will provide impetus for new implementations to fork from Core (like XT did)\n> and implement whatever scaling solution they deem best.  The users will then\n> select the winning solution simply based on the code they choose to run.\n> The other implementations will then rush to make compatible changes in order\n> to keep their dwindling user bases.\n>\n> This is the decentralized spirit of Bitcoin in action.  Creative\n> destruction.  Consensus formed simply by the code that gets run.\n>\n> Let's kill Bitcoin Core and allow the green shoots of a garden of new\n> implementations to grow from its fertile ashes."
            },
            {
                "author": "Chris D'Costa",
                "date": "2015-09-01T10:16:04",
                "message_text_only": "I think the \"Kill King Bitcoin - Long Live the King\" call is somewhat\ninevitable, and we should expect this to happen from time-to-time, now that\nthe cat is out of the bag.\n\nHowever, I fully agree with Adam that livenet is probably not the place to\nplay this game, and I'm also not convinced that testnet is either.\n\nI often wondered if there is any appetite for a no-holds-barred, anything\ngoes, bitcoin fork that would allow for the kind of valuable\nexperimentation that Peter R is suggesting? This is a different concept\nthan an alt-coin because it would be undoubtedly unstable until consensus\nis reached - and that is the whole idea. It hopefully would inform future\ndecisions about what gets rolled into Core. One problem I see with doing\nthis, is the lack of incentive.\n\nChris\n\nOn 1 September 2015 at 10:42, Adam Back via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Peter this seems to be a not well thought through course of action,\n> fun though it maybe informally or philosophically or to tweak various\n> peoples sensibilities.\n>\n> Bitcoin is a consensus system that does not work if there are\n> incompatible versions of consensus code competing on the network.\n> This is why work is underway on libconsensus so we can see diversity\n> of implementation without the risk of incompatibility arising by\n> software defect.  It has proven quite hard to match independent\n> consensus implementations bit for bit against an adaptive adversary\n> looking for inconsistencies in interpretation.\n>\n> In terms of protocol updates it is more constructive therefore that\n> people with a technical interest analyse and validate others proposals\n> via testing, or make their own proposals so that we can arrive at a\n> well validated upgrade mechanism that everyone upgrades to in a\n> coordinated fashion.\n>\n> Previous intentional upgrades to bitcoin have been\n> backwards-compatible (via soft-fork which can be secured reasonably\n> using a miner vote trigger and temporary SPV security for those who\n> not yet upgraded) but the current topic of a throughput increase is\n> non-backwards-compatible (via a hard-fork), and the way to minimise\n> risk of such an upgrade is for everyone to try to upgrade well in\n> advance of an agreed upgrade schedule, and to be all upgrading to the\n> *same* consensus rule change.\n>\n> Encouraging nodes or miners to \"vote\" by running a range of different\n> consensus rules isnt really constructive I feel - it alarms people who\n> understand the risks, sets things on a path that have to be fixed\n> while in flight by obvious implication, and isnt collaborative - so it\n> risks being a politicising suggestion on what should be a purely\n> technical topic of choosing the best approach, where it is best to\n> strive to keep things non-emotive and professional and technically\n> focussed.  Such calls are offending the technical sensibilities of\n> people who understand the risks.\n>\n> Anyway lets try to keep things constructive and focus on analysing\n> proposals.\n>\n> Adam\n>\n> On 31 August 2015 at 19:16, Peter R via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > I agree, s7r, that Bitcoin Core represents the most stable code base.  To\n> > create multiple implementations, other groups would fork Bitcoin Core\n> > similar to what Bitcoin XT did.  We could have:\n> >\n> > - Bitcoin-A (XT)\n> > - Bitcoin-B (Blockstream)\n> > - Bitcoin-C (promoting BIP100)\n> > - Bitcoin-D\n> > - etc.\n> >\n> > Innovation from any development group would be freely integrated by any\n> > other development group, if desired.  Of course, each group would have a\n> > very strong incentive to remain fork-wise compatible with the other\n> > implementations.\n> >\n> > In fact, this just gave me a great idea!  Since Wladimir has stated that\n> he\n> > will not integrate a forking change into Core without Core Dev\n> consensus, I\n> > suggest we work together to never reach consensus with Bitcoin Core.\n> This\n> > will provide impetus for new implementations to fork from Core (like XT\n> did)\n> > and implement whatever scaling solution they deem best.  The users will\n> then\n> > select the winning solution simply based on the code they choose to run.\n> > The other implementations will then rush to make compatible changes in\n> order\n> > to keep their dwindling user bases.\n> >\n> > This is the decentralized spirit of Bitcoin in action.  Creative\n> > destruction.  Consensus formed simply by the code that gets run.\n> >\n> > Let's kill Bitcoin Core and allow the green shoots of a garden of new\n> > implementations to grow from its fertile ashes.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/8d5ffbbb/attachment.html>"
            },
            {
                "author": "Monarch",
                "date": "2015-09-01T11:20:37",
                "message_text_only": "On 2015-09-01 10:16, Chris D'Costa via bitcoin-dev wrote:\n> However, I fully agree with Adam that livenet is probably not the\n> place to play this game, and I'm also not convinced that testnet is\n> either.\u00a0\n> \n> I often wondered if there is any appetite for a no-holds-barred,\n> anything goes, bitcoin fork that would allow for the kind of valuable\n> experimentation that Peter R is suggesting? This is a different\n> concept than an alt-coin because it would be undoubtedly unstable\n> until consensus is reached - and that is the whole idea. It hopefully\n> would inform future decisions about what gets rolled into Core. One\n> problem I see with doing this, is the lack of incentive.\n> \n\nYou are describing the essence of sidechains.  You might want to check\nout Elements Alpha, which has some outrageous experimental changes to\ntransaction structure.  It's a technical Bitcoin sandbox which doesn't\nrequire launching yet another altcoin."
            },
            {
                "author": "Wladimir",
                "date": "2015-09-01T12:24:37",
                "message_text_only": "On Tue, Sep 1, 2015 at 4:16 AM, Peter R via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I agree, s7r, that Bitcoin Core represents the most stable code base.  To\n\nWhat about the people that like stability, that appreciate bitcoin as\na \"digital gold\", and like all this 'excitement' like a hole in the\nhead?\n\nInstead of creating hardforks and all the drama around it I'd\nencourage to do your experiments on sidechains, or altcoins. Forks of\nthe bitcoin chain wil needlessly confuse matters, especially if they\nall gain their share of users. In theory an hardfork would be no\ndifferent than an altcoin with shared history, but without proper\nmeasures \"crosstalk\" between forks of the same chain can make for a\nmessy separation.\n(A fact often ignored, because those proposing forks assume they can\njust run over people on the other side of the fork by sake of their\npopularity)\n\nAlso please don't confuse alternative implementations of the node\nsoftware - btcd, obelisk, etc - that try to implement the consensus\nrules as faithfully as they can, or even use bitcoin core's consensus\ncode directly - with deliberate rule changes as done in bitcoin XT.\nThe former can cause an accidental fork (which will probably be\nrepaired), the latter exist to split off their chain.\n\nWladimir"
            },
            {
                "author": "s7r",
                "date": "2015-09-01T22:06:35",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nThat would be very wrong and cause a lot of problems and 'political\nchaos' without solving at least one (technical) problem in exchange.\n\nBitcoin Core is a good quality code. It is open source and free.\nAnyone can contribute and submit small changes, improvements.\nControversial changes are not easily merged not because the\nmaintainers do not want, but because they represent a threat to the\nentire ecosystem, one way or the other. We have to very carefully\nbalance the gains and the risks. If we try to never reach a consensus\non purpose, this will only cause instability, and a possible result\ncould be that we will end up having many more weaker implementations\nrunning in the network, decreasing the security overall and for everyone.\n\nWhile I do agree with some of your points of view and I am happy to\nsee you advocate for 'more decentralization', please let me point you\nin a better direction (I think): there is a much bigger problem than >\n~90% of the full nodes running Bitcoin Core software - it is\n*centralized mining (e.g. a lot of hashing power behind a single full\nmining node)*.\n\nOn 9/1/2015 5:16 AM, Peter R wrote:\n> I agree, s7r, that Bitcoin Core represents the most stable code\n> base. To create multiple implementations, other groups would fork\n> Bitcoin Core similar to what Bitcoin XT did.  We could have:\n> \n> - Bitcoin-A (XT) - Bitcoin-B (Blockstream) - Bitcoin-C (promoting\n> BIP100) - Bitcoin-D - etc.\n> \n> Innovation from any development group would be freely integrated by\n> any other development group, if desired.  Of course, each group\n> would have a very strong incentive to remain fork-wise compatible\n> with the other implementations.\n> \n> In fact, this just gave me a great idea!  Since Wladimir has stated\n> that he will not integrate a forking change into Core without Core\n> Dev consensus, *I suggest we work together to never reach consensus\n> with Bitcoin Core.  *This will provide impetus for new\n> implementations to fork from Core (like XT did) and implement\n> whatever scaling solution they deem best.  The users will then\n> select the winning solution simply based on the code they choose to\n> run.  The other implementations will then rush to make compatible\n> changes in order to keep their dwindling user bases.\n> \n> This is the decentralized spirit of Bitcoin in action.  Creative \n> destruction.  Consensus formed simply by the code that gets run.\n> \n> *Let's kill Bitcoin Core and allow the green shoots of a garden of \n> new implementations to grow from its fertile ashes.  *\n> \n> Sincerely, Peter R\n> \n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (MingW32)\n\niQEcBAEBCAAGBQJV5iFqAAoJEIN/pSyBJlsRMvIH/RiE8BhlXPbNOQW01HBJTBOD\n3H4bgaZoXuxSq2B1F4zKa/FvKJKtq7BGR3hLEj5tascqZTE2YsksRqmEednFNvbL\nXOliCjees6nI/oz/aYFuz9rFoKH4cxA7bJmbvieqGSOqDt7rtClaO2JzBycilngS\nF5pVGjKlprprTn4XUS8R40rfYVFbYyxaMnWBOnkgEpEAbtEvNRcASSW4HQoxuGRL\n6E8mzp8f23zAv6ENxKEfQoIf5SBBfYf8v2xV+YY9JcFjwh4MAQ7zFazsChh83D42\neI01jfuh58f0DS6qGmjb++N+a/mbgmQhIC4yV4iRZKiIHp9o2xKlSv4NyEJIHlM=\n=JnYI\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Let's kill Bitcoin Core and allow the green shoots of a garden of new implementations to grow from its fertile ashes",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Chris D'Costa",
                "Wladimir",
                "Monarch",
                "Adam Back",
                "s7r",
                "Gregory Maxwell",
                "Peter R"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 19351
        }
    },
    {
        "title": "[bitcoin-dev] Short review of previously-proposed exotic SIGHASH types",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2015-09-01T06:54:42",
                "message_text_only": "On Sun, Aug 30, 2015 at 01:56:34PM -0500, Bryan Bishop via bitcoin-dev wrote:\n> Here is a short review of previously-proposed and exotic SIGHASH types.\n> \n> SIGHASH_MULTIPLE\n> Similarly, petertodd has asked for a SIGHASH_DONT_SIGN_TXID before to\n> make OP_CODESEPARATOR more useful.\n\nThere's also my \"meta sighash\" idea of using code to build up the\nsignature with OP_CODESEPARATOR:\n\nhttp://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg07384.html\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000010b552c5f5c18705ccb1b21c550c08872089f89076840d6d\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/d9db07d0/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Short review of previously-proposed exotic SIGHASH types",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Peter Todd"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 841
        }
    },
    {
        "title": "[bitcoin-dev] ERRATA CORRIGE + Short Theorem",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2015-09-01T07:56:14",
                "message_text_only": "On Sun, Aug 30, 2015 at 10:01:00PM +0200, Daniele Pinna via bitcoin-dev wrote:\n> Since my longer post seems to be caught in moderator purgatory I will\n> rehash its results into this much smaller message. I apologize for the\n> spamming.\n> \n> I present a theorem whose thesis is obvious to many.\n> \n> *THESIS: All hashrates* *h' > h generate a revenue per unit of hash v' >\n> v. *\n> \n> Let us absurdly[1] assume that an optimal hashrate *h* exists where the\n> average revenue for each hash in service is maximized. This will result\n> from perpetually mining blocks of size *q,* is *v. *All larger hashrates *h'\n> > h* will generate an average revenue per hash *v' < v*(effectively the\n> conclusion of my paper) due to the higher orphan risk carried from having\n> to mine blocks of size *q' > q*. Leading from Peter's model and my\n> analysis, the origin of this balance lies in the fact that larger miners\n> must somehow be forced to mine larger blocks which in turn carry a larger\n> orphan risk.\n> \n> What happens if a large miner *h'* chooses not to mine his optimal block\n> size *q' *in favor of a seemingly \"sub-optimal\" block size* q*?\n> Since he mines a block of identical size as the smaller miner, they will\n> both carry identical orphan risks[2], and win identical\n> amounts*R+M(q)* whenever\n> they successfully mine a block. Since the larger miner can statistically\n> expect to win *h'/h* more blocks than the smaller miner, they will each\n> earn an identical revenue per unit of hash *R+M(q)/h*.\n> \n> This however directly contradicts the assumption that an optimal hashrate\n> exists beyond which the revenue per unit of hash *v' < v*if  *h' > h. *\n> *Q.E.D *\n> \n> This theorem in turn implies the following corollary:\n> \n> *COROLLARY: **The marginal profit curve is a monotonically increasing of\n> miner hashrate.*\n> \n> This simple theorem, suggested implicitly by Gmaxwell disproves any and all\n> conclusions of my work. Most importantly, centralization pressures will\n> always be present.\n\nFWIW I did a quick math proof along those lines awhile back too using\nsome basic first-year math, again proving that larger miners earn more\nmoney per unit hashing power:\n\nhttp://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg03272.html\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000010b552c5f5c18705ccb1b21c550c08872089f89076840d6d\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/83359699/attachment.sig>"
            },
            {
                "author": "Peter R",
                "date": "2015-09-01T08:06:30",
                "message_text_only": "On 2015-09-01, at 12:56 AM, Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote\n> \n> FWIW I did a quick math proof along those lines awhile back too using\n> some basic first-year math, again proving that larger miners earn more\n> money per unit hashing power:\n> \n> http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg03272.html\n\nI don't believe anyone is arguing otherwise.  Miners with a larger fraction of the network hash rate, h/H, have a theoretical advantage, all other variables in the miner's profitability equation held constant.  \n\nDpinna originally claimed (unless I'm mistaken) that his paper showed that this advantage decreased as the block reward diminished or as the total fees increased.  This didn't seem unreasonable to me, although I never checked the math.  \n\nBest regards,\nPeter\n\n\n \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/85a88dc1/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/85a88dc1/attachment.sig>"
            },
            {
                "author": "Daniele Pinna",
                "date": "2015-09-01T08:52:46",
                "message_text_only": "My paper did show that the advantage decreased with the block reward.\nHowever, in that limit, it also seemed to imply that a network state would\nappear where the revenue per unit hash decreased with increasing hashrate\nwhich should be impossible as just discussed.\n\nIn a followup email, I showed how the origin of this effect stems from the\norphaning factor used which doesn't preserve the full network revenue per\nunit block. This led me to correct my assertions by pointing out that our\nminer profit equations seemed to be just lower bounds to the miner's true\nexpected profit. As such, just because the *lower bound* on the revenue per\nunit hash advantage decreases with the block reward, this doesn't\nnecessarily imply that the *real* revenue per unit hash advantage does also.\n\nI suspect that the orphaning factor used, independently of the specific\nform of the block relay time, is incorrect or incomplete as stated.\n\nBest,\nDaniele\n\nDaniele Pinna, Ph.D\n\nOn Tue, Sep 1, 2015 at 10:06 AM, Peter R <peter_r at gmx.com> wrote:\n\n> On 2015-09-01, at 12:56 AM, Peter Todd via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote\n>\n>\n> FWIW I did a quick math proof along those lines awhile back too using\n> some basic first-year math, again proving that larger miners earn more\n> money per unit hashing power:\n>\n>\n> http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg03272.html\n>\n>\n> I don't believe anyone is arguing otherwise.  Miners with a larger\n> fraction of the network hash rate, *h*/*H*, have a theoretical advantage,\n> all other variables in the miner's profitability equation held constant.\n>\n> Dpinna originally claimed (unless I'm mistaken) that his paper showed that\n> this advantage *decreased* as the block reward diminished or as the total\n> fees increased.  This didn't seem unreasonable to me, although I never\n> checked the math.\n>\n> Best regards,\n> Peter\n>\n>\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/352b7446/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "ERRATA CORRIGE + Short Theorem",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Peter R",
                "Peter Todd",
                "Daniele Pinna"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 6064
        }
    },
    {
        "title": "[bitcoin-dev]  Open Block Chain Licence, BIP[xxxx] Draft",
        "thread_messages": [
            {
                "author": "Ahmed Zsales",
                "date": "2015-09-01T13:30:17",
                "message_text_only": "Hello,\n\nWe believe the network requires a block chain licence to supplement the\nexisting MIT Licence which we believe only covers the core reference client\nsoftware.\n\nReplacing or amending the existing MIT Licence is beyond the scope of this\ndraft BIP.\n\nRationale and details of our draft BIP for discussion and evaluation are\nhere:\n\nhttps://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing\n\nRegards,\n\nAhmed\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/06343931/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Open Block Chain Licence, BIPDraft",
            "categories": [
                "bitcoin-dev",
                "xxxx"
            ],
            "authors": [
                "Ahmed Zsales"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 611
        }
    },
    {
        "title": "[bitcoin-dev] Open Block Chain Licence, BIP[xxxx] Draft",
        "thread_messages": [
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-01T13:43:20",
                "message_text_only": "> We believe the network requires a block chain licence to supplement the\n> existing MIT Licence which we believe only covers the core reference\n> client software.\n\nI suggest talking to a lawyer first.  To have a license you need an \nentity that holds the license.  What entity actually holds the MIT \nlicense?  There is a copyright notice on the Core Client that claims the \nlicense is held by the developers.  It that the main core developers, \nanyone who has ever submitted an accepted pull request, or something \nelse?  I don't think there is any kind of valid license on the software \nto begin with.  Just posting a notice does not make it true just like \nall those \"terms of use\" web notices are generally not valid contracts \n(see \"click wrap vs. \"browser wrap\" discussions).\n\nWhat entity would actually hold a \"blockchain license\" and who decides \nwho would hold the license?  If the developers decide there should be a \nlicense that means the developers own the blockchain and I don't think \nthat is consistent with what is going on here.\n\nRuss"
            },
            {
                "author": "Bryan Bishop",
                "date": "2015-09-01T13:50:17",
                "message_text_only": "On Tue, Sep 1, 2015 at 8:30 AM, Ahmed Zsales via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> We believe the network requires a block chain licence\n\n\nHere is a previous discussion of this topic (2012):\nhttps://bitcointalk.org/index.php?topic=117663.0\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/5e6b4926/attachment.html>"
            },
            {
                "author": "Ahmed Zsales",
                "date": "2015-09-01T15:11:27",
                "message_text_only": "Thank you. We hadn't seen that before.  It is an interesting discussion.\n\nWe did think about including some references to protections for private\nkeys while they remained in your control and you could prove as much. In\ntheory it should be no different to dropping money on the floor. The money\nstill belongs to you, even if someone else comes along and finds it. The\nonus of proof is on you as the owner to demonstrate private keys are yours,\nbut you also need the goodwill of the person finding the money.\n\nHowever, this raised a number of issues including whether finding private\nkeys attached to coins and moving the funds constituted theft, in which\ncase there are already criminal protections if you are able to track the\ncoins to an individual. We decided not to include anything specific in the\ndraft licence to keep it simple, relying instead on the generic definitions\nof rights to *private transaction data* of which private keys would come\nunder.\n\nRegards,\n\nAhmed\n\n\n\nOn Tue, Sep 1, 2015 at 2:50 PM, Bryan Bishop <kanzure at gmail.com> wrote:\n\n> On Tue, Sep 1, 2015 at 8:30 AM, Ahmed Zsales via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> We believe the network requires a block chain licence\n>\n>\n> Here is a previous discussion of this topic (2012):\n> https://bitcointalk.org/index.php?topic=117663.0\n>\n> - Bryan\n> http://heybryan.org/\n> 1 512 203 0507\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/da927d62/attachment.html>"
            },
            {
                "author": "Natanael",
                "date": "2015-09-01T16:05:50",
                "message_text_only": "Creative Commons Zero, if anything at all.\n\nIt essentially emulates public domain in jurisdictions that do not\nofficially have a public domain.\n\n- Sent from my tablet\nDen 1 sep 2015 15:30 skrev \"Ahmed Zsales via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> Hello,\n>\n> We believe the network requires a block chain licence to supplement the\n> existing MIT Licence which we believe only covers the core reference client\n> software.\n>\n> Replacing or amending the existing MIT Licence is beyond the scope of this\n> draft BIP.\n>\n> Rationale and details of our draft BIP for discussion and evaluation are\n> here:\n>\n>\n> https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing\n>\n> Regards,\n>\n> Ahmed\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/2d1ba353/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-09-01T17:39:34",
                "message_text_only": "On Tuesday, September 01, 2015 1:30:17 PM Ahmed Zsales via bitcoin-dev wrote:\n> Rationale and details of our draft BIP for discussion and evaluation are\n> here:\n> \n> https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=shari\n> ng\n\nBIPs should be in MediaWiki-compatible markdown format, not PDF.\n\nThanks,\n\nLuke"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-01T18:12:13",
                "message_text_only": "Without commenting on your proposal at all, the general problem with\nlicensing after the fact is you require the permission of every\ncopyright holder in order to make the change.\n\n\n\nOn Tue, Sep 1, 2015 at 2:30 PM, Ahmed Zsales via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Hello,\n>\n> We believe the network requires a block chain licence to supplement the\n> existing MIT Licence which we believe only covers the core reference client\n> software.\n>\n> Replacing or amending the existing MIT Licence is beyond the scope of this\n> draft BIP.\n>\n> Rationale and details of our draft BIP for discussion and evaluation are\n> here:\n>\n> https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing\n>\n> Regards,\n>\n> Ahmed\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Ahmed Zsales",
                "date": "2015-09-01T19:36:59",
                "message_text_only": "That is a very good point.\n\nWe considered whether data existing before a licence change would be\ncovered, but we hadn't factored the potential need for gaining permissions\nfor a change to be considered effective.\n\nWe have proposed that miners be the main beneficiaries of licensing and\nthere is a consideration on whether they should vote to adopt the new\nterms. While not the preferred route, that would overcome any issues to\nwhat is an otherwise honest 'error and omission.' There doesn't seem to be\nanyone who could claim to have suffered any economic losses so this may not\nbe an issue. It merits further investigation.\n\nThe block chain is in perpetual change, so the sooner a change is agreed\nupon, if at all, the more data it will cover without any reservations. At\nany rate, we believe the changes would be considered effective on a\nretrospective basis.\n\n\nOn Tue, Sep 1, 2015 at 7:12 PM, Btc Drak <btcdrak at gmail.com> wrote:\n\n> Without commenting on your proposal at all, the general problem with\n> licensing after the fact is you require the permission of every\n> copyright holder in order to make the change.\n>\n>\n>\n> On Tue, Sep 1, 2015 at 2:30 PM, Ahmed Zsales via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Hello,\n> >\n> > We believe the network requires a block chain licence to supplement the\n> > existing MIT Licence which we believe only covers the core reference\n> client\n> > software.\n> >\n> > Replacing or amending the existing MIT Licence is beyond the scope of\n> this\n> > draft BIP.\n> >\n> > Rationale and details of our draft BIP for discussion and evaluation are\n> > here:\n> >\n> >\n> https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing\n> >\n> > Regards,\n> >\n> > Ahmed\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/0cccdded/attachment.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-01T21:36:36",
                "message_text_only": "> We considered whether data existing before a licence change would be\n> covered, but we hadn't factored the potential need for gaining\n> permissions for a change to be considered effective.\n>\n> We have proposed that miners be the main beneficiaries of licensing and\n> there is a consideration on whether they should vote to adopt the new\n> terms. While not the preferred route, that would overcome any issues to\n> what is an otherwise honest 'error and omission.' There doesn't seem to\n> be anyone who could claim to have suffered any economic losses so this\n> may not be an issue. It merits further investigation.\n\nLike I said, you need to talk to a lawyer.  What exactly would be the \npurpose of any license?  How can someone be a \"beneficiary\" to a license \nwhen you can't even explain who holds the license to begin with?  How do \nthey \"benefit?\"  I don't see any purpose to putting a license on the \nCore software or the blockchain because nobody can explain who actually \nholds the license and there is no mechanism to enforce any license and \nthere is no revenue to be shared.  The whole discussion makes no sense.\n\nRuss"
            },
            {
                "author": "Ahmed Zsales",
                "date": "2015-09-01T22:02:36",
                "message_text_only": "Russ,\n\nThe general points and questions you have raised are covered in the draft\nBIP:\n\nhttps://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing\n\nRegards,\n\nAhmed\n\nOn Tue, Sep 1, 2015 at 10:36 PM, Milly Bitcoin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> We considered whether data existing before a licence change would be\n>> covered, but we hadn't factored the potential need for gaining\n>> permissions for a change to be considered effective.\n>>\n>> We have proposed that miners be the main beneficiaries of licensing and\n>> there is a consideration on whether they should vote to adopt the new\n>> terms. While not the preferred route, that would overcome any issues to\n>> what is an otherwise honest 'error and omission.' There doesn't seem to\n>> be anyone who could claim to have suffered any economic losses so this\n>> may not be an issue. It merits further investigation.\n>>\n>\n> Like I said, you need to talk to a lawyer.  What exactly would be the\n> purpose of any license?  How can someone be a \"beneficiary\" to a license\n> when you can't even explain who holds the license to begin with?  How do\n> they \"benefit?\"  I don't see any purpose to putting a license on the Core\n> software or the blockchain because nobody can explain who actually holds\n> the license and there is no mechanism to enforce any license and there is\n> no revenue to be shared.  The whole discussion makes no sense.\n>\n> Russ\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/4ffe6be7/attachment.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-01T22:42:39",
                "message_text_only": "> The general points and questions you have raised are covered in the\n> draft BIP:\n\nNo, the BIP makes some weird statements that don't really make sense.\n\nNumber one rule here:  To put a license on something you have to own it \nin the first place.\n\nLet's say for the sake of argument that Miners own the copyright on a \nblock they find (as pointed out something like does not normally get \ncopyright protection but let's just pretend).  Then the miner can charge \na fee for any public block explorer that wants to display the block at \ntheir web site.  They could also try to collect a fee from anyone who \ndistributes it (like Bitcoin users using p2p to distribute the \nblockchain).  A copyright is about protecting revenue.  Is there some \nother purpose of putting a license on intellectual property?\n\nAlso, it is not up to you, or anyone else, to come up with the form of a \nlicense to control data owned by someone else.  How can you force miners \n  or users to use any specific license that you come up with?\n\nThere are a number of other weird statements that really don't make any \nkind of sense:\n\n\"In the USA, for example, these attributes confer legal protections for \ndatabases which have been ruled upon by the courts.\"  I have no idea \nwhat this means or what court cases you are referring to.\n\n\"The Bitcoin Core Miners\" is not an identifiable entity and cannot own \nintellectual property rights.  What is the purpose of you putting a \nnotice that some unidentifiable entity has some sort of rights over the \nblockchain data?  You are not that entity and neither are the \ndevelopers.  If there are rights it is up to miners to come up with \ntheir license.\n\n\"[users] own the rights to their individual transactions through \ncryptograph security.\"  I have no idea what this means.  It is certainly \nnot intellectual property rights of anything I am familiar with.  Once \nagain, if the users do have intellectual rights then someone else cannot \ndictate the terms of the license.  They could charge a fee for miners \npublishing their transaction data.\n\nRuss"
            },
            {
                "author": "Ahmed Zsales",
                "date": "2015-09-01T23:21:30",
                "message_text_only": "This is good feedback. Thank you.\n\nVery briefly:\n\n> \"To put a license on something you have to own it in the first place.\" ##\nThe block chain is a database. There are laws to protect databases. We have\nsuggested who might be best placed to be assigned rights to the block chain\nand more importantly why.\n\n> \"A copyright is about protecting revenue\" ## Not always. It can also be\nabout saying you have a right to something and you give up those rights.\nThere are likely to be many examples where this could be applied, for\nexample - if you transact with someone and government agencies develop the\nmeans to reveal your transaction, a licence gives protections which might\notherwise not be there in the absence of a licence. The MIT licence does\nsomething similar - the Core developers give up their rights to revenue\nfrom the software. Not wishing to go down rabbit hole, why not just remove\nthe MIT licence?\n\n> \"it is not up to you, or anyone else, to come up with the form of a\nlicense to control data owned by someone else.\" ## It is up to us to\nproduce some guidance and context to assist with the BIP discussion\nprocess. If anyone else has any suggestions on wording or access to legal\nadvice, that will be helpful.\n\n> \"Then the miner can charge a fee for any public block explorer that wants\nto display the block at their web site\" ## I would oppose any wording that\nattempted to do anything of the sort. Bitcoin works because the block chain\nis in the public domain. We have included references to royalty free use of\nthe data.\n\n> \"If there are rights it is up to miners to come up with their license.\"\n## The original reference client did everything. A block chain licence was\nprobably not envisioned. Mining has taken a different path from that which\nwas intended. Nevertheless, one needs to start somewhere. The proposal to\nassign rights to miners is just that, a proposal.\n\nI would just like to labour the point that users pay to use the network,\nbut they have no defined rights, anywhere.\n\nRegards,\n\nAhmed\n\nOn Tue, Sep 1, 2015 at 11:42 PM, Milly Bitcoin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> The general points and questions you have raised are covered in the\n>> draft BIP:\n>>\n>\n> No, the BIP makes some weird statements that don't really make sense.\n>\n> Number one rule here:  To put a license on something you have to own it in\n> the first place.\n>\n> Let's say for the sake of argument that Miners own the copyright on a\n> block they find (as pointed out something like does not normally get\n> copyright protection but let's just pretend).  Then the miner can charge a\n> fee for any public block explorer that wants to display the block at their\n> web site.  They could also try to collect a fee from anyone who distributes\n> it (like Bitcoin users using p2p to distribute the blockchain).  A\n> copyright is about protecting revenue.  Is there some other purpose of\n> putting a license on intellectual property?\n>\n> Also, it is not up to you, or anyone else, to come up with the form of a\n> license to control data owned by someone else.  How can you force miners\n> or users to use any specific license that you come up with?\n>\n> There are a number of other weird statements that really don't make any\n> kind of sense:\n>\n> \"In the USA, for example, these attributes confer legal protections for\n> databases which have been ruled upon by the courts.\"  I have no idea what\n> this means or what court cases you are referring to.\n>\n> \"The Bitcoin Core Miners\" is not an identifiable entity and cannot own\n> intellectual property rights.  What is the purpose of you putting a notice\n> that some unidentifiable entity has some sort of rights over the blockchain\n> data?  You are not that entity and neither are the developers.  If there\n> are rights it is up to miners to come up with their license.\n>\n> \"[users] own the rights to their individual transactions through\n> cryptograph security.\"  I have no idea what this means.  It is certainly\n> not intellectual property rights of anything I am familiar with.  Once\n> again, if the users do have intellectual rights then someone else cannot\n> dictate the terms of the license.  They could charge a fee for miners\n> publishing their transaction data.\n>\n>\n> Russ\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/5298429e/attachment-0001.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-01T23:40:56",
                "message_text_only": "> I would just like to labour the point that users pay to use the network,\n> but they have no defined rights, anywhere.\n\nThat is an interesting point.  That is a feature of Bitcoin, not a bug. \n  If the user did have rights to sue someone then the system would not \nbe decentralized.  User rights = someone else has a liability for \nviolating those rights.\n\nAs it is now a user would have the right to sue all the miners, node \noperators, and developers collectively.  Of course that is not realistic \nwhich is the way a decentralized system should be.  If you want to try \nto define specific entities that have liability then they must be in \ncontrol or otherwise they would not be liable.\n\nRuss"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-01T22:02:52",
                "message_text_only": "I think it gets worse. Who are the copyright owners (if this actually\napplies). You've got people publishing transaction messages, you've\ngot miners reproducing them and publishing blocks. Who are all the\nparties involved? Then to take pedantry to the next level, does a\nminer have permission to republish messages? How do you know? What if\nthe messages are reproducing others copyright/licensed material? It's\nnot possible to license someone else's work. There are plenty rabbit\nholes to go down with this train of thought.\n\nOn Tue, Sep 1, 2015 at 8:36 PM, Ahmed Zsales via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> That is a very good point.\n>\n> We considered whether data existing before a licence change would be\n> covered, but we hadn't factored the potential need for gaining permissions\n> for a change to be considered effective.\n>\n> We have proposed that miners be the main beneficiaries of licensing and\n> there is a consideration on whether they should vote to adopt the new terms.\n> While not the preferred route, that would overcome any issues to what is an\n> otherwise honest 'error and omission.' There doesn't seem to be anyone who\n> could claim to have suffered any economic losses so this may not be an\n> issue. It merits further investigation.\n>\n> The block chain is in perpetual change, so the sooner a change is agreed\n> upon, if at all, the more data it will cover without any reservations. At\n> any rate, we believe the changes would be considered effective on a\n> retrospective basis.\n>\n>\n> On Tue, Sep 1, 2015 at 7:12 PM, Btc Drak <btcdrak at gmail.com> wrote:\n>>\n>> Without commenting on your proposal at all, the general problem with\n>> licensing after the fact is you require the permission of every\n>> copyright holder in order to make the change.\n>>\n>>\n>>\n>> On Tue, Sep 1, 2015 at 2:30 PM, Ahmed Zsales via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > Hello,\n>> >\n>> > We believe the network requires a block chain licence to supplement the\n>> > existing MIT Licence which we believe only covers the core reference\n>> > client\n>> > software.\n>> >\n>> > Replacing or amending the existing MIT Licence is beyond the scope of\n>> > this\n>> > draft BIP.\n>> >\n>> > Rationale and details of our draft BIP for discussion and evaluation are\n>> > here:\n>> >\n>> >\n>> > https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing\n>> >\n>> > Regards,\n>> >\n>> > Ahmed\n>> >\n>> > _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Ahmed Zsales",
                "date": "2015-09-01T22:11:56",
                "message_text_only": "To avoid repetition, we have actually covered the general points and\nquestions you have raised in the draft BIP, which includes a draft licence\nto assist discussions:\n\nhttps://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing\n\nRegards,\n\nAhmed\n\nOn Tue, Sep 1, 2015 at 11:02 PM, Btc Drak <btcdrak at gmail.com> wrote:\n\n> I think it gets worse. Who are the copyright owners (if this actually\n> applies). You've got people publishing transaction messages, you've\n> got miners reproducing them and publishing blocks. Who are all the\n> parties involved? Then to take pedantry to the next level, does a\n> miner have permission to republish messages? How do you know? What if\n> the messages are reproducing others copyright/licensed material? It's\n> not possible to license someone else's work. There are plenty rabbit\n> holes to go down with this train of thought.\n>\n> On Tue, Sep 1, 2015 at 8:36 PM, Ahmed Zsales via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > That is a very good point.\n> >\n> > We considered whether data existing before a licence change would be\n> > covered, but we hadn't factored the potential need for gaining\n> permissions\n> > for a change to be considered effective.\n> >\n> > We have proposed that miners be the main beneficiaries of licensing and\n> > there is a consideration on whether they should vote to adopt the new\n> terms.\n> > While not the preferred route, that would overcome any issues to what is\n> an\n> > otherwise honest 'error and omission.' There doesn't seem to be anyone\n> who\n> > could claim to have suffered any economic losses so this may not be an\n> > issue. It merits further investigation.\n> >\n> > The block chain is in perpetual change, so the sooner a change is agreed\n> > upon, if at all, the more data it will cover without any reservations. At\n> > any rate, we believe the changes would be considered effective on a\n> > retrospective basis.\n> >\n> >\n> > On Tue, Sep 1, 2015 at 7:12 PM, Btc Drak <btcdrak at gmail.com> wrote:\n> >>\n> >> Without commenting on your proposal at all, the general problem with\n> >> licensing after the fact is you require the permission of every\n> >> copyright holder in order to make the change.\n> >>\n> >>\n> >>\n> >> On Tue, Sep 1, 2015 at 2:30 PM, Ahmed Zsales via bitcoin-dev\n> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> > Hello,\n> >> >\n> >> > We believe the network requires a block chain licence to supplement\n> the\n> >> > existing MIT Licence which we believe only covers the core reference\n> >> > client\n> >> > software.\n> >> >\n> >> > Replacing or amending the existing MIT Licence is beyond the scope of\n> >> > this\n> >> > draft BIP.\n> >> >\n> >> > Rationale and details of our draft BIP for discussion and evaluation\n> are\n> >> > here:\n> >> >\n> >> >\n> >> >\n> https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing\n> >> >\n> >> > Regards,\n> >> >\n> >> > Ahmed\n> >> >\n> >> > _______________________________________________\n> >> > bitcoin-dev mailing list\n> >> > bitcoin-dev at lists.linuxfoundation.org\n> >> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >> >\n> >\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/605b71cf/attachment.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-01T22:47:10",
                "message_text_only": "I have read the proposal. I think you missed my point: every existing\ntransaction author would be required to agree to your proposals for\nthem to be legal, and that's clearly impossible. You'd also need every\nsingle miner who published a block. You're much better taking the line\nthat actually, the data is public domain and unrestricted based on\nvarious assumptions.\n\nYou make some assumptions that transaction authors use Bitcoin Core to\n\"contract with the network\", but in fact transactions are written and\nbroadcast by a number of means, arguably very few are created by\nBitcoin Core these days. How exactly do you expect to get a legally\nbinding agreement from all future transaction authors agreeing to your\nterms? How would you prove Alice agreed 10 years later? If it was a\nproprietary system like Paypal who can force you to agree or close\nyour account, the Bitcoin protocol is permissionless and anyone can\nauthor a transaction using any means they like, not just Bitcoin Core.\nSo again I come back to the point your proposal would have to get\npermission from all existing authors, and all future authors to work.\n\nOverall I think the proposal is trying to fix something that doesn't\nneed fixing and get into a quagmire in the process. In fact, I see it\nas an impossible task.\n\nOn Tue, Sep 1, 2015 at 11:11 PM, Ahmed Zsales <ahmedzsales18 at gmail.com> wrote:\n> To avoid repetition, we have actually covered the general points and\n> questions you have raised in the draft BIP, which includes a draft licence\n> to assist discussions:\n>\n> https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing\n>\n> Regards,\n>\n> Ahmed\n>\n> On Tue, Sep 1, 2015 at 11:02 PM, Btc Drak <btcdrak at gmail.com> wrote:\n>>\n>> I think it gets worse. Who are the copyright owners (if this actually\n>> applies). You've got people publishing transaction messages, you've\n>> got miners reproducing them and publishing blocks. Who are all the\n>> parties involved? Then to take pedantry to the next level, does a\n>> miner have permission to republish messages? How do you know? What if\n>> the messages are reproducing others copyright/licensed material? It's\n>> not possible to license someone else's work. There are plenty rabbit\n>> holes to go down with this train of thought.\n>>\n>> On Tue, Sep 1, 2015 at 8:36 PM, Ahmed Zsales via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > That is a very good point.\n>> >\n>> > We considered whether data existing before a licence change would be\n>> > covered, but we hadn't factored the potential need for gaining\n>> > permissions\n>> > for a change to be considered effective.\n>> >\n>> > We have proposed that miners be the main beneficiaries of licensing and\n>> > there is a consideration on whether they should vote to adopt the new\n>> > terms.\n>> > While not the preferred route, that would overcome any issues to what is\n>> > an\n>> > otherwise honest 'error and omission.' There doesn't seem to be anyone\n>> > who\n>> > could claim to have suffered any economic losses so this may not be an\n>> > issue. It merits further investigation.\n>> >\n>> > The block chain is in perpetual change, so the sooner a change is agreed\n>> > upon, if at all, the more data it will cover without any reservations.\n>> > At\n>> > any rate, we believe the changes would be considered effective on a\n>> > retrospective basis.\n>> >\n>> >\n>> > On Tue, Sep 1, 2015 at 7:12 PM, Btc Drak <btcdrak at gmail.com> wrote:\n>> >>\n>> >> Without commenting on your proposal at all, the general problem with\n>> >> licensing after the fact is you require the permission of every\n>> >> copyright holder in order to make the change.\n>> >>\n>> >>\n>> >>\n>> >> On Tue, Sep 1, 2015 at 2:30 PM, Ahmed Zsales via bitcoin-dev\n>> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >> > Hello,\n>> >> >\n>> >> > We believe the network requires a block chain licence to supplement\n>> >> > the\n>> >> > existing MIT Licence which we believe only covers the core reference\n>> >> > client\n>> >> > software.\n>> >> >\n>> >> > Replacing or amending the existing MIT Licence is beyond the scope of\n>> >> > this\n>> >> > draft BIP.\n>> >> >\n>> >> > Rationale and details of our draft BIP for discussion and evaluation\n>> >> > are\n>> >> > here:\n>> >> >\n>> >> >\n>> >> >\n>> >> > https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing\n>> >> >\n>> >> > Regards,\n>> >> >\n>> >> > Ahmed\n>> >> >\n>> >> > _______________________________________________\n>> >> > bitcoin-dev mailing list\n>> >> > bitcoin-dev at lists.linuxfoundation.org\n>> >> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >> >\n>> >\n>> >\n>> >\n>> > _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >\n>\n>"
            },
            {
                "author": "Natanael",
                "date": "2015-09-01T22:20:59",
                "message_text_only": "Den 2 sep 2015 00:03 skrev \"Btc Drak via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org>:\n>\n> I think it gets worse. Who are the copyright owners (if this actually\n> applies). You've got people publishing transaction messages, you've\n> got miners reproducing them and publishing blocks. Who are all the\n> parties involved? Then to take pedantry to the next level, does a\n> miner have permission to republish messages? How do you know? What if\n> the messages are reproducing others copyright/licensed material? It's\n> not possible to license someone else's work. There are plenty rabbit\n> holes to go down with this train of thought.\n\nWorse yet - transaction malleability creates derative works with multiple\ncopyright holders (the original one, plus the author of the modification).\nIs that even legal to do? What to do if a miner unknowingly accepts an\nillegally modified transaction in a block? And can he who modified it ALSO\nsue anybody replicating the block for infringement?\n\nBetter just put everything in public domain, or the closest thing to it you\ncan get. Copyright in the blockchain is essentially the DVDCSS illegal\nprime mess all over again, but in a P2P network.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/9dcf77bc/attachment.html>"
            },
            {
                "author": "Ahmed Zsales",
                "date": "2015-09-01T22:28:28",
                "message_text_only": "Your points are interesting, but they are covered:\n\nhttps://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing\n\nYour general point: \"Better just put everything in public domain\" is the\nreason why Bitcoin works, but taken to the extreme it is an argument\nagainst attempts to obfuscate transaction ownership.\n\nRegards,\n\nAhmed\n\nOn Tue, Sep 1, 2015 at 11:20 PM, Natanael <natanael.l at gmail.com> wrote:\n\n>\n> Den 2 sep 2015 00:03 skrev \"Btc Drak via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org>:\n> >\n> > I think it gets worse. Who are the copyright owners (if this actually\n> > applies). You've got people publishing transaction messages, you've\n> > got miners reproducing them and publishing blocks. Who are all the\n> > parties involved? Then to take pedantry to the next level, does a\n> > miner have permission to republish messages? How do you know? What if\n> > the messages are reproducing others copyright/licensed material? It's\n> > not possible to license someone else's work. There are plenty rabbit\n> > holes to go down with this train of thought.\n>\n> Worse yet - transaction malleability creates derative works with multiple\n> copyright holders (the original one, plus the author of the modification).\n> Is that even legal to do? What to do if a miner unknowingly accepts an\n> illegally modified transaction in a block? And can he who modified it ALSO\n> sue anybody replicating the block for infringement?\n>\n> Better just put everything in public domain, or the closest thing to it\n> you can get. Copyright in the blockchain is essentially the DVDCSS illegal\n> prime mess all over again, but in a P2P network.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/1be425e9/attachment.html>"
            },
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-09-01T21:51:25",
                "message_text_only": "On Tue, Sep 01, 2015 at 02:30:17PM +0100, Ahmed Zsales via bitcoin-dev wrote:\n> Hello,\n> \n> We believe the network requires a block chain licence to supplement the\n> existing MIT Licence which we believe only covers the core reference client\n> software.\n\nAs long as it's an open system, one can't require a specific license for everything added to the chain.\n\nYou could of course make the BIP advisory, but I'm not sure what that would help. You still wouldn't have any certainty what license the contents of block #XXXX would be under.\n\nWladimir"
            },
            {
                "author": "hurricanewarn1 at aol.com",
                "date": "2015-09-01T23:39:43",
                "message_text_only": "The only reason someone would want to make a license is so they can sue/threaten people for not following the license rules. At best this is pointless since Bitcoin cannot be controlled, and at worst it will result in a group of people using coercion against the community to gain profits. \n \n There is no legal ground for anyone to make a Bitcoin license, it simply wouldn't stand in court. Not even the MIT license is valid or meaningful. But I wouldn't be surprised if people tried scaring people with a license even if they knew it was invalid.\n    \n    \n    It's actually disgusting that you wrote what people are allowed and not allowed to do with Bitcoin. Pure centralization ideology. Maybe go work for the government and make regulations instead of trying to centralize one of the only de-centralized things left on the planet.\n    \n   \n    \n\n \n\n \n\n-----Original Message-----\nFrom: Ahmed Zsales via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nTo: Bitcoin Dev <bitcoin-dev at lists.linuxfoundation.org>\nSent: Tue, Sep 1, 2015 9:30 am\nSubject: [bitcoin-dev]  Open Block Chain Licence, BIP[xxxx] Draft\n\n\n \nHello,  \n   \n  \n  \nWe believe the network requires a block chain licence to supplement the existing MIT Licence which we believe only covers the core reference client software.  \n  \n   \n  \n  \nReplacing or amending the existing MIT Licence is beyond the scope of this draft BIP.  \n  \n   \n  \n  \nRationale and details of our draft BIP for discussion and evaluation are here:  \n  \n   \n  \n  \n   https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing   \n  \n  \n   \n  \n  \nRegards,  \n  \n   \n  \n  \nAhmed  \n \n \n\n_______________________________________________\nbitcoin-dev mailing\nlist\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/fe5d4286/attachment.html>"
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2015-09-02T08:56:30",
                "message_text_only": "I am skeptical that any license for the blockchain itself is needed because\nof the possibility that the blockchain is not entitled to copyright\nprotection.  While I am not a lawyer, I have stared hard at the copyright\ndoctrine of the U.S. in multiple law school Intellectual Property courses\nand during my previous career in Open Source Software where copyright\nmatters a great deal.\n\nAs each owner of a\n> coin makes a transfer by digitally signing a hash of the previous\n> transaction along with the\n> new owner\u2019s public key, the block chain is a perpetual compilation of\n> unique data.\n> *It is therefore compiled in a creative and non-obvious way.* In the USA,\n> for example, these\n> attributes confer legal protections for databases which have been ruled\n> upon by the courts.\n\n\nThis portion of your paper I believe is not true and requires citations if\nyou want to be convincing.  Is it truly \"creative and non-obvious\"?  My\nunderstanding under at least U.S. law, the blockchain may not be entitled\nto copyright protection because a compilation created in a mechanical\nmanner is not a creative work of a human.\n\nI suppose a transaction could contain a \"creative\" element if it contains\narbitrary bytes of a message or clever script.  For the most part though\nmost of what you call \"digitally signing a hash of the previous transaction\nalong with the new owner\u2019s public key\" is purely the result of a mechanical\nprocess and really is not creative.  Furthermore, even if that output were\n\"non-obvious\", obviousness has nothing to do with copyrightability.\n\nYour license is correct in intent in attempting to exclude from the royalty\nfree grant works within the blockchain that themselves may be subject to\ncopyright of third parties.  The elements within the blockchain may be\nentitled individually to copyright if they are in any way a creative work\nof a human, but as a compilation I am doubtful the blockchain itself is\nentitled to copyright.\n\nI understand copyright with respect to databases can be different under\nother jurisdictions.  Your paper mentions the European database law that is\nindeed different from the U.S.  Your paper is incomplete in scholarly and\nlegal citations.  I myself and we as a community don't know enough.  I\nsuppose this topic merits further study.\n\nWarren Togami\n\nOn Tue, Sep 1, 2015 at 6:30 AM, Ahmed Zsales via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hello,\n>\n> We believe the network requires a block chain licence to supplement the\n> existing MIT Licence which we believe only covers the core reference client\n> software.\n>\n> Replacing or amending the existing MIT Licence is beyond the scope of this\n> draft BIP.\n>\n> Rationale and details of our draft BIP for discussion and evaluation are\n> here:\n>\n>\n> https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing\n>\n> Regards,\n>\n> Ahmed\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/f96f29e5/attachment.html>"
            },
            {
                "author": "Ahmed Zsales",
                "date": "2015-09-02T20:28:53",
                "message_text_only": "Thanks Warren, very good feedback.\n\nTo avoid taking up too much of everyone's time at this point, I\nthink Wladimir's suggestion of placing this in a BIP advisory box for a\nwhile is a good one. We did indicate that this might take a while to\ngestate.\n\nIt is probably for us to do some further investigations and possibly engage\nsome input from a few miners.  We don't want to play at being lawyer, but\nour review does point towards this being something worth coming back to.\n\nIn terms of citation, we did reference a case called *Feist*. We also found\nsome general database protection details which are relevant to the USA, if\nyou need any bed time reading:\n\nhttp://copyright.gov/reports/dbase.html\n\nFor now, thanks to everyone for feedback and comments.\n\nRegards,\n\nAhmed\n\nOn Wed, Sep 2, 2015 at 9:56 AM, Warren Togami Jr. via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I am skeptical that any license for the blockchain itself is needed\n> because of the possibility that the blockchain is not entitled to copyright\n> protection.  While I am not a lawyer, I have stared hard at the copyright\n> doctrine of the U.S. in multiple law school Intellectual Property courses\n> and during my previous career in Open Source Software where copyright\n> matters a great deal.\n>\n> As each owner of a\n>> coin makes a transfer by digitally signing a hash of the previous\n>> transaction along with the\n>> new owner\u2019s public key, the block chain is a perpetual compilation of\n>> unique data.\n>> *It is therefore compiled in a creative and non-obvious way.* In the\n>> USA, for example, these\n>> attributes confer legal protections for databases which have been ruled\n>> upon by the courts.\n>\n>\n> This portion of your paper I believe is not true and requires citations if\n> you want to be convincing.  Is it truly \"creative and non-obvious\"?  My\n> understanding under at least U.S. law, the blockchain may not be entitled\n> to copyright protection because a compilation created in a mechanical\n> manner is not a creative work of a human.\n>\n> I suppose a transaction could contain a \"creative\" element if it contains\n> arbitrary bytes of a message or clever script.  For the most part though\n> most of what you call \"digitally signing a hash of the previous transaction\n> along with the new owner\u2019s public key\" is purely the result of a mechanical\n> process and really is not creative.  Furthermore, even if that output were\n> \"non-obvious\", obviousness has nothing to do with copyrightability.\n>\n> Your license is correct in intent in attempting to exclude from the\n> royalty free grant works within the blockchain that themselves may be\n> subject to copyright of third parties.  The elements within the blockchain\n> may be entitled individually to copyright if they are in any way a creative\n> work of a human, but as a compilation I am doubtful the blockchain itself\n> is entitled to copyright.\n>\n> I understand copyright with respect to databases can be different under\n> other jurisdictions.  Your paper mentions the European database law that is\n> indeed different from the U.S.  Your paper is incomplete in scholarly and\n> legal citations.  I myself and we as a community don't know enough.  I\n> suppose this topic merits further study.\n>\n> Warren Togami\n>\n> On Tue, Sep 1, 2015 at 6:30 AM, Ahmed Zsales via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hello,\n>>\n>> We believe the network requires a block chain licence to supplement the\n>> existing MIT Licence which we believe only covers the core reference client\n>> software.\n>>\n>> Replacing or amending the existing MIT Licence is beyond the scope of\n>> this draft BIP.\n>>\n>> Rationale and details of our draft BIP for discussion and evaluation are\n>> here:\n>>\n>>\n>> https://drive.google.com/file/d/0BwEbhrQ4ELzBMVFxajNZa2hzMTg/view?usp=sharing\n>>\n>> Regards,\n>>\n>> Ahmed\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/e322b19b/attachment.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-02T20:58:38",
                "message_text_only": ">We don't want to play at being\n> lawyer, but our review does point towards this being something worth\n> coming back to.\n>\n> In terms of citation, we did reference a case called /Feist/.\n\nI don't see how you can possibly conclude this effort is worth any \nadditional time.  The legal reference is:  Feist Publications, Inc., v. \nRural Telephone Service Co., 499 U.S. 340 (1991).  The court ruled that \nRural's directory was nothing more than an alphabetic list of all \nsubscribers to its service, which it was required to compile under law, \nand that no creative expression was involved. The fact that Rural spent \nconsiderable time and money collecting the data was irrelevant to \ncopyright law, and Rural's copyright claim was dismissed.\n\nIf some entity puts a copyright notice, demands a license, signs \nsoftware with a certificate, claims developers or miners are some legal \nentity, etc. then those entities are setting themselves up to be sued or \nprosecuted (whether legitimately or not).  There is no benefit to \nclaiming such ownership or authority or issuing any license because \nnobody is going to enforce anything and they don't even have that \nauthority anyway.  A 5-minute talk with an IP lawyer should confirm that \n... but you sound like you are not going to do that.  Bitcoin certainly \nattracts quite a number of completely irrational people.\n\nRuss"
            }
        ],
        "thread_summary": {
            "title": "Open Block Chain Licence, BIPDraft",
            "categories": [
                "bitcoin-dev",
                "xxxx"
            ],
            "authors": [
                "Bryan Bishop",
                "Natanael",
                "Warren Togami Jr.",
                "Milly Bitcoin",
                "hurricanewarn1 at aol.com",
                "Luke Dashjr",
                "Btc Drak",
                "Wladimir J. van der Laan",
                "Ahmed Zsales"
            ],
            "messages_count": 22,
            "total_messages_chars_count": 43984
        }
    },
    {
        "title": "[bitcoin-dev] RFC - BIP: URI scheme for Blockchain exploration",
        "thread_messages": [
            {
                "author": "Marco Pontello",
                "date": "2015-09-01T14:33:59",
                "message_text_only": "That surely make sense.\nA URI like that perfectly readable, unambiguous and simple enough.\n\nAnd nice to see a Wallet developer showing interest for this! :)\n\nOn Sat, Aug 29, 2015 at 8:07 PM, Andreas Schildbach via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On 08/29/2015 06:31 PM, Richard Moore via bitcoin-dev wrote:\n>\n> > I like the idea of having a standard for this, that all explorers (and\n> > even core, eventually) would understand.\n> >\n> > I would recommend 2 changes though. First, using a real URI scheme,\n> > blockchain:// so that we can just use normal URL parsing libraries. The\n> > bitcoin: thing leads to additional code to mutate it into a proper URI\n> > before passing it to URL parsing. And I think it would be fine to\n> > include the type looking up. For example:\n> >\n> >\n> blockchain://blockhash/00000000000000001003e880d500968d51157f210c632e08a652af3576600198\n> >\n> blockchain://txid/3b95a766d7a99b87188d6875c8484cb2b310b78459b7816d4dfc3f0f7e04281a\n> > blockchain://block/189000\n> > blockchain://address/1RicMooMWxqKczuRCa5D2dnJaUEn9ZJyn\n>\n> Good thinking! It might make sense to look at the existing de-facto\n> standard (e.g. blockexplorer.com, blockchain.info):\n>\n> /tx/ for transactions\n> /block/ for blocks, supports both hash or height\n> /address/ for address\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n\n-- \nTry the Online TrID File Identifier\nhttp://mark0.net/onlinetrid.aspx\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/0b36091b/attachment.html>"
            },
            {
                "author": "Marco Pontello",
                "date": "2015-09-01T14:49:47",
                "message_text_only": "On Sat, Aug 29, 2015 at 10:10 PM, Jorge Tim\u00f3n <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> I would really prefer chain=<chainID> over network=<chainPetnameStr>\n> By chainID I mean the hash of the genesis block, see\n>\n> https://github.com/jtimon/bitcoin/commit/3191d5e8e75687a27cf466b7a4c70bdc04809d39\n> I'm completely fine with doing that using an optional parameter (for\n> backwards compatibility).\n>\n\nI see that using the genesis block hash would be the perfectly rigorous way\nto do it, but what do you think about the possibility of letting also use\nthe name constants, as a simple / more relaxed alternative? That would\nspare a source lookup just to write a correct reference to a tx, maybe in a\nforum or a post.\n\nSo a reference to a certain tx could be either:\n\nblockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n\nblockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n\nblockchain://ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=main\n\n(or a different element name maybe)\n\n-- \nTry the Online TrID File Identifier\nhttp://mark0.net/onlinetrid.aspx\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/68c31b7b/attachment.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2015-09-01T21:16:37",
                "message_text_only": "Isn't this all backward? The \"authority\" component of the URL should identify the chain, and the \"path\" component should identify the particular block, tx, or address in that chain.\n\nSo instead of:\n\nblockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n\nIt should be:\n\nblockchain://000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n\nAnd I would agree with allowing well-known chains to register a name, to be used as an alternative to the literal, hash syntax:\n\nblockchain://bitcoin/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n\n\nOn Tuesday, 1 September 2015, at 4:49 pm, Marco Pontello wrote:\n> On Sat, Aug 29, 2015 at 10:10 PM, Jorge Tim\u00f3n <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> >\n> > I would really prefer chain=<chainID> over network=<chainPetnameStr>\n> > By chainID I mean the hash of the genesis block, see\n> >\n> > https://github.com/jtimon/bitcoin/commit/3191d5e8e75687a27cf466b7a4c70bdc04809d39\n> > I'm completely fine with doing that using an optional parameter (for\n> > backwards compatibility).\n> >\n> \n> I see that using the genesis block hash would be the perfectly rigorous way\n> to do it, but what do you think about the possibility of letting also use\n> the name constants, as a simple / more relaxed alternative? That would\n> spare a source lookup just to write a correct reference to a tx, maybe in a\n> forum or a post.\n> \n> So a reference to a certain tx could be either:\n> \n> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n> \n> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n> \n> blockchain://ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=main\n> \n> (or a different element name maybe)\n> \n> -- \n> Try the Online TrID File Identifier\n> http://mark0.net/onlinetrid.aspx"
            },
            {
                "author": "Esteban Ordano",
                "date": "2015-09-01T21:25:59",
                "message_text_only": "Slightly relevant: standardization of http queries to blockchain explorers.\nIt's not just about URLs, it's about the query body and response.\nhttps://github.com/common-blockchain\n\nOn Tue, Sep 1, 2015 at 6:16 PM, Matt Whitlock via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Isn't this all backward? The \"authority\" component of the URL should\n> identify the chain, and the \"path\" component should identify the particular\n> block, tx, or address in that chain.\n>\n> So instead of:\n>\n>\n> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n>\n> It should be:\n>\n>\n> blockchain://000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n>\n> And I would agree with allowing well-known chains to register a name, to\n> be used as an alternative to the literal, hash syntax:\n>\n>\n> blockchain://bitcoin/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n>\n>\n> On Tuesday, 1 September 2015, at 4:49 pm, Marco Pontello wrote:\n> > On Sat, Aug 29, 2015 at 10:10 PM, Jorge Tim\u00f3n <\n> > bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> > >\n> > > I would really prefer chain=<chainID> over network=<chainPetnameStr>\n> > > By chainID I mean the hash of the genesis block, see\n> > >\n> > >\n> https://github.com/jtimon/bitcoin/commit/3191d5e8e75687a27cf466b7a4c70bdc04809d39\n> > > I'm completely fine with doing that using an optional parameter (for\n> > > backwards compatibility).\n> > >\n> >\n> > I see that using the genesis block hash would be the perfectly rigorous\n> way\n> > to do it, but what do you think about the possibility of letting also use\n> > the name constants, as a simple / more relaxed alternative? That would\n> > spare a source lookup just to write a correct reference to a tx, maybe\n> in a\n> > forum or a post.\n> >\n> > So a reference to a certain tx could be either:\n> >\n> >\n> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n> >\n> >\n> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n> >\n> >\n> blockchain://ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=main\n> >\n> > (or a different element name maybe)\n> >\n> > --\n> > Try the Online TrID File Identifier\n> > http://mark0.net/onlinetrid.aspx\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/d3ce3853/attachment.html>"
            },
            {
                "author": "Marco Pontello",
                "date": "2015-09-01T21:38:58",
                "message_text_only": "I see your point. But I personally like that the chain part could be\noptional, given that the vast majority of the references in the end will be\nto Bitcoin main net.\n\nOn Tue, Sep 1, 2015 at 11:16 PM, Matt Whitlock <bip at mattwhitlock.name>\nwrote:\n\n> Isn't this all backward? The \"authority\" component of the URL should\n> identify the chain, and the \"path\" component should identify the particular\n> block, tx, or address in that chain.\n>\n> So instead of:\n>\n>\n> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n>\n> It should be:\n>\n>\n> blockchain://000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n>\n> And I would agree with allowing well-known chains to register a name, to\n> be used as an alternative to the literal, hash syntax:\n>\n>\n> blockchain://bitcoin/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n>\n>\n> On Tuesday, 1 September 2015, at 4:49 pm, Marco Pontello wrote:\n> > On Sat, Aug 29, 2015 at 10:10 PM, Jorge Tim\u00f3n <\n> > bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> > >\n> > > I would really prefer chain=<chainID> over network=<chainPetnameStr>\n> > > By chainID I mean the hash of the genesis block, see\n> > >\n> > >\n> https://github.com/jtimon/bitcoin/commit/3191d5e8e75687a27cf466b7a4c70bdc04809d39\n> > > I'm completely fine with doing that using an optional parameter (for\n> > > backwards compatibility).\n> > >\n> >\n> > I see that using the genesis block hash would be the perfectly rigorous\n> way\n> > to do it, but what do you think about the possibility of letting also use\n> > the name constants, as a simple / more relaxed alternative? That would\n> > spare a source lookup just to write a correct reference to a tx, maybe\n> in a\n> > forum or a post.\n> >\n> > So a reference to a certain tx could be either:\n> >\n> >\n> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n> >\n> >\n> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n> >\n> >\n> blockchain://ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=main\n> >\n> > (or a different element name maybe)\n> >\n> > --\n> > Try the Online TrID File Identifier\n> > http://mark0.net/onlinetrid.aspx\n>\n\n\n\n-- \nTry the Online TrID File Identifier\nhttp://mark0.net/onlinetrid.aspx\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/fa329e12/attachment.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2015-09-01T21:42:09",
                "message_text_only": "The authority part in a URI is optional.\n\nblockchain:/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n\nNotice the lack of a double-slash.\n\n\nOn Tuesday, 1 September 2015, at 11:38 pm, Marco Pontello wrote:\n> I see your point. But I personally like that the chain part could be\n> optional, given that the vast majority of the references in the end will be\n> to Bitcoin main net.\n> \n> On Tue, Sep 1, 2015 at 11:16 PM, Matt Whitlock <bip at mattwhitlock.name>\n> wrote:\n> \n> > Isn't this all backward? The \"authority\" component of the URL should\n> > identify the chain, and the \"path\" component should identify the particular\n> > block, tx, or address in that chain.\n> >\n> > So instead of:\n> >\n> >\n> > blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n> >\n> > It should be:\n> >\n> >\n> > blockchain://000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n> >\n> > And I would agree with allowing well-known chains to register a name, to\n> > be used as an alternative to the literal, hash syntax:\n> >\n> >\n> > blockchain://bitcoin/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n> >\n> >\n> > On Tuesday, 1 September 2015, at 4:49 pm, Marco Pontello wrote:\n> > > On Sat, Aug 29, 2015 at 10:10 PM, Jorge Tim\u00f3n <\n> > > bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > >\n> > > >\n> > > > I would really prefer chain=<chainID> over network=<chainPetnameStr>\n> > > > By chainID I mean the hash of the genesis block, see\n> > > >\n> > > >\n> > https://github.com/jtimon/bitcoin/commit/3191d5e8e75687a27cf466b7a4c70bdc04809d39\n> > > > I'm completely fine with doing that using an optional parameter (for\n> > > > backwards compatibility).\n> > > >\n> > >\n> > > I see that using the genesis block hash would be the perfectly rigorous\n> > way\n> > > to do it, but what do you think about the possibility of letting also use\n> > > the name constants, as a simple / more relaxed alternative? That would\n> > > spare a source lookup just to write a correct reference to a tx, maybe\n> > in a\n> > > forum or a post.\n> > >\n> > > So a reference to a certain tx could be either:\n> > >\n> > >\n> > blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n> > >\n> > >\n> > blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n> > >\n> > >\n> > blockchain://ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=main\n> > >\n> > > (or a different element name maybe)\n> > >\n> > > --\n> > > Try the Online TrID File Identifier\n> > > http://mark0.net/onlinetrid.aspx\n> >\n> \n> \n> \n> -- \n> Try the Online TrID File Identifier\n> http://mark0.net/onlinetrid.aspx"
            },
            {
                "author": "Marco Pontello",
                "date": "2015-09-01T21:43:39",
                "message_text_only": "Oh, my bad! Right, sounds pretty good to me then.\n\nOn Tue, Sep 1, 2015 at 11:42 PM, Matt Whitlock <bip at mattwhitlock.name>\nwrote:\n\n> The authority part in a URI is optional.\n>\n>\n> blockchain:/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n>\n> Notice the lack of a double-slash.\n>\n>\n> On Tuesday, 1 September 2015, at 11:38 pm, Marco Pontello wrote:\n> > I see your point. But I personally like that the chain part could be\n> > optional, given that the vast majority of the references in the end will\n> be\n> > to Bitcoin main net.\n> >\n> > On Tue, Sep 1, 2015 at 11:16 PM, Matt Whitlock <bip at mattwhitlock.name>\n> > wrote:\n> >\n> > > Isn't this all backward? The \"authority\" component of the URL should\n> > > identify the chain, and the \"path\" component should identify the\n> particular\n> > > block, tx, or address in that chain.\n> > >\n> > > So instead of:\n> > >\n> > >\n> > >\n> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n> > >\n> > > It should be:\n> > >\n> > >\n> > >\n> blockchain://000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n> > >\n> > > And I would agree with allowing well-known chains to register a name,\n> to\n> > > be used as an alternative to the literal, hash syntax:\n> > >\n> > >\n> > >\n> blockchain://bitcoin/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n> > >\n> > >\n> > > On Tuesday, 1 September 2015, at 4:49 pm, Marco Pontello wrote:\n> > > > On Sat, Aug 29, 2015 at 10:10 PM, Jorge Tim\u00f3n <\n> > > > bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > > >\n> > > > >\n> > > > > I would really prefer chain=<chainID> over\n> network=<chainPetnameStr>\n> > > > > By chainID I mean the hash of the genesis block, see\n> > > > >\n> > > > >\n> > >\n> https://github.com/jtimon/bitcoin/commit/3191d5e8e75687a27cf466b7a4c70bdc04809d39\n> > > > > I'm completely fine with doing that using an optional parameter\n> (for\n> > > > > backwards compatibility).\n> > > > >\n> > > >\n> > > > I see that using the genesis block hash would be the perfectly\n> rigorous\n> > > way\n> > > > to do it, but what do you think about the possibility of letting\n> also use\n> > > > the name constants, as a simple / more relaxed alternative? That\n> would\n> > > > spare a source lookup just to write a correct reference to a tx,\n> maybe\n> > > in a\n> > > > forum or a post.\n> > > >\n> > > > So a reference to a certain tx could be either:\n> > > >\n> > > >\n> > >\n> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n> > > >\n> > > >\n> > >\n> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n> > > >\n> > > >\n> > >\n> blockchain://ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=main\n> > > >\n> > > > (or a different element name maybe)\n> > > >\n> > > > --\n> > > > Try the Online TrID File Identifier\n> > > > http://mark0.net/onlinetrid.aspx\n> > >\n> >\n> >\n> >\n> > --\n> > Try the Online TrID File Identifier\n> > http://mark0.net/onlinetrid.aspx\n>\n\n\n\n-- \nTry the Online TrID File Identifier\nhttp://mark0.net/onlinetrid.aspx\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/1e897ea9/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-01T22:46:46",
                "message_text_only": "On Tue, Sep 1, 2015 at 4:49 PM, Marco Pontello <marcopon at gmail.com> wrote:\n>\n> On Sat, Aug 29, 2015 at 10:10 PM, Jorge Tim\u00f3n\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>\n>> I would really prefer chain=<chainID> over network=<chainPetnameStr>\n>> By chainID I mean the hash of the genesis block, see\n>>\n>> https://github.com/jtimon/bitcoin/commit/3191d5e8e75687a27cf466b7a4c70bdc04809d39\n>> I'm completely fine with doing that using an optional parameter (for\n>> backwards compatibility).\n>\n>\n> I see that using the genesis block hash would be the perfectly rigorous way\n> to do it, but what do you think about the possibility of letting also use\n> the name constants, as a simple / more relaxed alternative? That would spare\n> a source lookup just to write a correct reference to a tx, maybe in a forum\n> or a post.\n>\n> So a reference to a certain tx could be either:\n>\n> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n\nI'm fine with each explorer using whatever chain they prefer as default.\n\n> blockchain://tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n>\n> blockchain://ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f?chain=main\n>\n> (or a different element name maybe)\n\nIt would need to be a different argument, for example chainPetName.\n\nOn Tue, Sep 1, 2015 at 11:16 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> And I would agree with allowing well-known chains to register a name, to be used as an alternative to the literal, hash syntax:\n>\n> blockchain://bitcoin/tx/ca26cedeb9cbc94e030891578e0d2b688a28902114f6ad2f24ecd3918f76c17f\n\nBut who is the central authority that registers the mnemonic names?\nThat's why I say petname, because no dictionary of supported chains\nshould be considered universally accepted and thus it will always be\njust a local registry.\nIf we're chainPetName is supported, there should be an additional call\nto query that local list. For example:\n\nblockchain:/chains\n\nJSON response:\n\n{ \"main\": \"000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\",\n  \"test\": \"000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\",\n  \"regtest\": \"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"}\n\nIt may be problematic when too many chains are supported. For example,\n#6382 introduces std::numeric_limits<uint64_t>::max() new chains.\n\nOn Tue, Sep 1, 2015 at 6:12 PM, Danny Thorpe <danny.thorpe at gmail.com> wrote:\n> Rather than using an inhumanly long hex string from the genesis hash to\n> distinguish between mainnet and testnet, why not use the network magic bytes\n> instead? Much shorter, just as distinct.\n\nObviously 4 bytes is not \"as distinct\" as 32 bytes. In #6382,\nstd::numeric_limits<uint64_t>::max() new chains share the same magic\nbytes.\nAnd again, there's no central authority to register unique magic\nbytes. In contrast, producing a unique genesis block is trivial (look\nhow I produced std::numeric_limits<uint64_t>::max() new unique genesis\nblocks in #6382).\n\n> I'd still prefer a common network name mapping for the sake of humanity. Few\n> bitcoin library implementations use the same string names for mainnet and\n> testnet. This BIP could simply define one string name alias for each\n> supported network and leave mapping to local lingo to the implementors.\n\nThere's many altcoins that call \"testnet\" to their own testnet. In\nBitcoin itself, we've been using \"testnet\" to refer to the original\ntestnet, testnet2 and testnet3.\nBut again, the main issue is that we don't want a central authority to\nregister unique unique and memorable chain name strings.\n\nRelevant links:\n\nhttps://en.wikipedia.org/wiki/Zooko%27s_triangle\nhttp://www.skyhunter.com/marcs/petnames/IntroPetNames.html"
            },
            {
                "author": "Matt Whitlock",
                "date": "2015-09-01T23:25:33",
                "message_text_only": "On Wednesday, 2 September 2015, at 12:46 am, Jorge Tim\u00f3n wrote:\n> But again, the main issue is that we don't want a central authority to\n> register unique unique and memorable chain name strings.\n\nWhy not? There's a central registry of MIME types. And there's a central registry of TCP/UDP port number assignments. The BIP describing the \"blockchain\" URI scheme is published by a central authority. For cases where assigning names to numbers is uncontroversial, central authorities don't cause any problems."
            },
            {
                "author": "Marco Pontello",
                "date": "2015-09-01T14:51:52",
                "message_text_only": "On Sat, Aug 29, 2015 at 9:28 PM, Richard Moore <me at ricmoo.com> wrote:\n\n> Yes! Good point, network should be encoded. Not sure I like this format\n> yet, but what if it was part of the authority, like block:testnet. Like\n> http uses port 80 by default, you could have block by default refer to\n> block:mainnet.\n>\n> Eg.\n>\n> blockchain://tx:testnet3/3b95a766d7a99b87188d6875c8484cb2b310b78459b7816d4dfc3f0f7e04281a\n>\n> I will read the RFC over more thoroughly tomorrow to get an idea of what\n> types of things make more or less sense.\n\n\nLike this option too!\n\n\n-- \nTry the Online TrID File Identifier\nhttp://mark0.net/onlinetrid.aspx\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/ff752f04/attachment.html>"
            },
            {
                "author": "Danny Thorpe",
                "date": "2015-09-01T16:12:42",
                "message_text_only": "Rather than using an inhumanly long hex string from the genesis hash to\ndistinguish between mainnet and testnet, why not use the network magic\nbytes instead? Much shorter, just as distinct.\n\nI'd still prefer a common network name mapping for the sake of humanity.\nFew bitcoin library implementations use the same string names for mainnet\nand testnet. This BIP could simply define one string name alias for each\nsupported network and leave mapping to local lingo to the implementors.\n\n-Danny\n\nOn Sat, Aug 29, 2015 at 1:10 PM, Jorge Tim\u00f3n <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Sat, Aug 29, 2015 at 9:01 PM, Matt Whitlock via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > That's still not right, since \"mainnet\" and \"testnet\" are not host names.\n> >\n> > You'd have to do something like:\n> >\n> >\n> blockchain:?network=testnet&txid=3b95a766d7a99b87188d6875c8484cb2b310b78459b7816d4dfc3f0f7e04281a\n>\n> I would really prefer chain=<chainID> over network=<chainPetnameStr>\n> By chainID I mean the hash of the genesis block, see\n>\n> https://github.com/jtimon/bitcoin/commit/3191d5e8e75687a27cf466b7a4c70bdc04809d39\n> I'm completely fine with doing that using an optional parameter (for\n> backwards compatibility).\n>\n> I agree with Andreas Schildbach that respecting the most commonly used\n> schemes is desirable.\n> So my preference would be:\n>\n>\n> /tx/3b95a766d7a99b87188d6875c8484cb2b310b78459b7816d4dfc3f0f7e04281a?chain=000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\n>\n> (a tx in testnet)\n>\n>\n> /block/00000000000000000b0d504d142ac8bdd1a2721d19f423a8146d0d6de882167b?chain=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n>\n> (a block in bitcoin's mainnet)\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/bd5d758c/attachment.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-01T22:59:36",
                "message_text_only": "On Tue, Sep 1, 2015 at 5:12 PM, Danny Thorpe via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Rather than using an inhumanly long hex string from the genesis hash to\n> distinguish between mainnet and testnet, why not use the network magic bytes\n> instead? Much shorter, just as distinct.\n\nThere's nothing stopping two coins having the same magic bytes, but\ncommunicating on separate ports.\n\n> I'd still prefer a common network name mapping for the sake of humanity. Few\n> bitcoin library implementations use the same string names for mainnet and\n> testnet. This BIP could simply define one string name alias for each\n> supported network and leave mapping to local lingo to the implementors.\n\nThe only sane way to me see to have cointype like BIP44.\nSee https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#coin-type"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-01T23:57:16",
                "message_text_only": "On Wed, Sep 2, 2015 at 12:56 AM, Btc Drak <btcdrak at gmail.com> wrote:\n> When I brought up the issue originally, I deliberately steered away\n> from altchains choosing to focus on networks like mainnet, testnet\n> because I think it's easier to repurpose a protocol for an altcoin\n> than it is to make the proposal work for all cases. Take the payment\n> protocol for example. The BIP specifies a URI with bitcoin: well it's\n> just as easy to repurpose that for litecoin: etc than adding something\n> like ?cointype=litecoin, so that was my reason for not mentioning\n> altcoins at all.\n>\n> If the proposal is made to account for altcoins, genesis hash is\n> definitely not desirable, or at least not genesis hash in isolation,\n> and if that's the case, better to have an identifier\n\nI agree. That's why we don't need to account for altchains other than\ntestchains (ie sidechains and altcoins).\n\n\n\n> On Sun, Aug 30, 2015 at 3:20 AM, Jorge Tim\u00f3n\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> Some altcoins (LTC and FTC for example) have the same genesis block hash.\n>>\n>> That's obviously a design mistake in FTC, but it's not unsolvable. FTC could\n>> move their genesis block to the next block (or the first one that is not\n>> identical to LTC's).\n>>\n>> Bitcoin and all its test chains have different genesis blocks, so I'm not\n>> sure FTC should be a concern for a BIP anyway...\n>\n> That's a very sweeping generalisation indeed. Why should two chains\n> have to have a separate genesis? It's cleaner, but it's certainly not\n> a necessity. You cant exclude this case just because it doesn't fit\n> your concept of neat and tidy. Other BIP proposals that account for\n> alternative chains do not rely on the genesis hash, but instead an\n> identifier. Why should it be any different here?\n\nOn Wed, Sep 2, 2015 at 12:59 AM, Btc Drak <btcdrak at gmail.com> wrote:\n> The only sane way to me see to have cointype like BIP44.\n> See https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#coin-type\n\nWe can do it the right way from now on (and as you say altcoins can\ntrivially adapt to this).\nSorry for having missed bip44 for review but that section is horrible\nin my opinion (see the links above). And it seems to be incompatible\nwith bip001 which says are immutable once accepted (assuming that\ndocument is expected to be the central registry of registered chains).\n\n> How would you account\n> for a world with XTCoin and Bitcoin which would also share the same\n> genesis hash, but clearly not be the same coin.\n\nSchism hardforks are explicitly renouncing to reach consensus with all\nprevious users. You're intentionally divorcing 2 chains, and you can\ndo that without confusing users.\nIn BIP99 the recommended deployment path for a schism fork is to\nsimply use the nHeight for activation.\nThe 95% miner's upgrade confirmation is not used here (like in\nuncontroversial hardforks and softforks) because you don't necessarily\nexpect all miners to move to your side of the schism (and you don't\nwant to wait for them, specially if it's an \"anti-miner\" hardfork).\nTo avoid confusing users, you can define a new \"genesis block\" to use\nfor the chain ID, for example, 1000 blocks before the activation\nheight.\nThe same applies for potentially pre-mined altcoins that haven't had\nthe decency/competency of even changing the string in pszTimestamp.\nFor example, FTC, coins generated with coingen (Matt Corallo or the\ncurrent owner may want to correct me on this point) or elements alpha\n(https://github.com/ElementsProject/elements/blob/alpha/src/chainparams.cpp#L115).\nFortunately alpha has a unique chain ID because it was changing both\nthe block and transaction serialization formats anyway. But hopefully\nwe will fix that for beta and later sidechains.\nAll chains that want a unique chain ID can have it retroactively. At\nworst, they may need to use the hash of a block that is not the\ngenesis block.\nIn other words, they may need to move their \"genesis checkpoint\" upwards.\nTerminology may make things more clear. We can replace:\n\n\"The chain ID is the hash of the genesis block\"\n\nwith\n\n\"The chain ID is the hash of the genesis checkpoint\".\n\nIf we want a unique chain ID we can have it: it just cannot be\nmemorable at the same time.\nAnd each chain and implementation can start using them (in addition to\npetname -> chain ID local dictionaries) at any point in time: this is\nretroactively (and obviously forwards) compatible.\nThere can be many competing registries for the name -> chainID\ndictionaries (maybe one of them based on namecoin?) but bitcoin/bips\nshouldn't maintain one."
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-01T22:56:32",
                "message_text_only": "On Sun, Aug 30, 2015 at 3:20 AM, Jorge Tim\u00f3n\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Some altcoins (LTC and FTC for example) have the same genesis block hash.\n>\n> That's obviously a design mistake in FTC, but it's not unsolvable. FTC could\n> move their genesis block to the next block (or the first one that is not\n> identical to LTC's).\n>\n> Bitcoin and all its test chains have different genesis blocks, so I'm not\n> sure FTC should be a concern for a BIP anyway...\n\nThat's a very sweeping generalisation indeed. Why should two chains\nhave to have a separate genesis? It's cleaner, but it's certainly not\na necessity. You cant exclude this case just because it doesn't fit\nyour concept of neat and tidy. Other BIP proposals that account for\nalternative chains do not rely on the genesis hash, but instead an\nidentifier. Why should it be any different here? How would you account\nfor a world with XTCoin and Bitcoin which would also share the same\ngenesis hash, but clearly not be the same coin.\n\nWhen I brought up the issue originally, I deliberately steered away\nfrom altchains choosing to focus on networks like mainnet, testnet\nbecause I think it's easier to repurpose a protocol for an altcoin\nthan it is to make the proposal work for all cases. Take the payment\nprotocol for example. The BIP specifies a URI with bitcoin: well it's\njust as easy to repurpose that for litecoin: etc than adding something\nlike ?cointype=litecoin, so that was my reason for not mentioning\naltcoins at all.\n\nIf the proposal is made to account for altcoins, genesis hash is\ndefinitely not desirable, or at least not genesis hash in isolation,\nand if that's the case, better to have an identifier."
            }
        ],
        "thread_summary": {
            "title": "RFC - BIP: URI scheme for Blockchain exploration",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Esteban Ordano",
                "Matt Whitlock",
                "Jorge Tim\u00f3n",
                "Btc Drak",
                "Danny Thorpe",
                "Marco Pontello"
            ],
            "messages_count": 14,
            "total_messages_chars_count": 31417
        }
    },
    {
        "title": "[bitcoin-dev] push tx fuzzing",
        "thread_messages": [
            {
                "author": "Kristov Atlas",
                "date": "2015-09-01T15:50:35",
                "message_text_only": "I am interested in finding or writing a fuzzer for push tx APIs. I did not\nfind one after a brief search. Has anyone found otherwise, or is she in the\nprocess of writing one?\n\nIf not, what features would people recommend for a new push tx fuzzer?\n\nEndpoints I would like to test include:\n\nhttps://live.blockcypher.com/btc-testnet/pushtx/\n\nhttps://insight.bitpay.com/tx/send\n\nhttps://blockchain.info/pushtx\n\nhttps://coinb.in/#broadcast\n\nhttps://btc.blockr.io/tx/push\n\nhttps://chain.localbitcoins.com/tx/send\n\n\nThe fuzzer should be able to send random data, invalid characters, etc. but\nalso fuzz particular aspects of the transaction format such as malformed\nP2SH and P2PKH transactions, fields such as lock time, size, # inputs,\nversion number, vin size, etc. It should also be able to fuzz a variety of\nvalid and invalid script formats using odd op codes, changing the order of\nop codes, etc.\n\n\nIf anyone has recommendations about how such a fuzzer should be structured,\nplease let me know.\n\n\nFinally, if you are interested in collaborating, please contact me via\nprivate message.\n\n\nThanks!\n\nKristov\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/4cd15068/attachment.html>"
            },
            {
                "author": "Monarch",
                "date": "2015-09-01T16:59:15",
                "message_text_only": "On 2015-09-01 15:50, Kristov Atlas via bitcoin-dev wrote:\n> I am interested in finding or writing a fuzzer for push tx APIs. I did\n> not find one after a brief search. Has anyone found otherwise, or is\n> she in the process of writing one?\n> \n\nhttps://github.com/jonasnick/bitcoinconsensus_testcases\n\nhttps://jonasnick.github.io/blog/2015/05/09/fuzzing-bitcoin-consensus/\n\nThe only implementations with any significant network presence are\nbtcd and Bitcoin Core, fuzzing them should be sufficient if these\nservices are doing validation of transactions using one of the two.\nFor example two of the ones you have linked are based in Insight,\nwhich uses Bitcoin Core for validation.  If they aren't validating\ntransactions before broadcast they won't make it more than a single\nhop through the P2P the network so they are of minimum concern."
            },
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-09-01T18:03:34",
                "message_text_only": "On Tue, Sep 01, 2015 at 04:59:15PM +0000, Monarch via bitcoin-dev wrote:\n\n> which uses Bitcoin Core for validation.  If they aren't validating\n> transactions before broadcast they won't make it more than a single\n> hop through the P2P the network so they are of minimum concern.\n\nblockchain.info had some problems here for a while. They were not using a full validating node underneath:\n\n- Signatures were not verified properly. This resulted in some panic when it looked like (on their site) a massive number of very old coins were being spent.\n\n- They were relaying loose coinbase transactions. This caused them to be instantly banned from nodes they were connected to.\n\nSo there's certainly some scope for fun with fuzzing those APIs.\n\nWladimir"
            },
            {
                "author": "Manuel Ar\u00e1oz",
                "date": "2015-09-01T18:22:51",
                "message_text_only": "Interesting project, Kristov. Two more ideas for fuzzing bitcoin txs:\n- random bit flipping from valid txs\n- random tx script generators:\n  - from a grammar\n  - from a stochastic grammar\n  - from a random sequence of opcodes\n\nI've made some really small experiments on fuzzing in the past [1][2], and\nI'm interested in helping out.\n\nBest,\nManuel\n\n[1] https://github.com/maraoz/json-fuzzer\n[2] https://github.com/maraoz/bitcoin-fuzzer\n\nOn Tue, Sep 1, 2015 at 3:03 PM, Wladimir J. van der Laan via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Tue, Sep 01, 2015 at 04:59:15PM +0000, Monarch via bitcoin-dev wrote:\n>\n> > which uses Bitcoin Core for validation.  If they aren't validating\n> > transactions before broadcast they won't make it more than a single\n> > hop through the P2P the network so they are of minimum concern.\n>\n> blockchain.info had some problems here for a while. They were not using a\n> full validating node underneath:\n>\n> - Signatures were not verified properly. This resulted in some panic when\n> it looked like (on their site) a massive number of very old coins were\n> being spent.\n>\n> - They were relaying loose coinbase transactions. This caused them to be\n> instantly banned from nodes they were connected to.\n>\n> So there's certainly some scope for fun with fuzzing those APIs.\n>\n> Wladimir\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150901/95e7353c/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "push tx fuzzing",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Manuel Ar\u00e1oz",
                "Kristov Atlas",
                "Wladimir J. van der Laan",
                "Monarch"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 4578
        }
    },
    {
        "title": "[bitcoin-dev] AT&T/ISPs making Bitcoin Core near impossible to use as a full node via hidden private dynamic IPs, not by specifically blocking 8333 or Bitcoin as stated in original email",
        "thread_messages": [
            {
                "author": "hurricanewarn1 at aol.com",
                "date": "2015-09-04T09:55:33",
                "message_text_only": "I sent out an email after 48 hours of dealing with trying to open up my ports for Bitcoin, I was quite frustrated and angry since I had to call like 10 times and I was making zero progress. Most of the AT&T people didn't give me any helpful clues on how to fix the situation. The original email described how there is a firewall in the DVR, and I thought it was blocking the ports. It is true there is a uncontrollable firewall in the DVR, it is false this blocks 8333.\n\nThe actual problem is due to AT&T Uverse customers being forced to use a private dynamic IP, the IP is literally hidden from the internet, so it isn't possible to send any requests at it. It will literally ignore pings across all ports. So the solution is to switch to public static IP and make sure you allow incoming traffic. \n\nIt's not so simple though, AT&T will not let you have a public static IP without paying. I've had my router reset 10 times today by AT&T (probably automatically) and it comes back with a private dynamic IP. Then I have to reset it to use public IP and that lasts less than an hour. It literally went from open to closed while typing this email... the IP address went from public to private dynamic. \n\nhttps://i.gyazo.com/3c732687fc3d21acb7d62f6d0e23a346.png\n\nThis is making using Bitcoin Core almost impossible. I'm at least getting some synch now but maybe a few days of blocks the entire day, cause I can't sit here all day with the computer and keep fixing it.\n\nThe proof is in the pudding, there are 37 nodes using AT&T in the ENTIRE world. AT&T is a massive ISP so this is strong evidence that using Bitcoin Core as a full node on AT&T is extremely difficult and actually just about impossible.\n\nhttps://i.gyazo.com/90beebe056f5fc338165e8d200536c06.png\n\nThe other big ISPs have pathetic numbers also due to the same sort've things that AT&T does, but at least Comcast has 400 nodes. AT&T is much harder to use than any other ISP I've dealt with when it comes to Bitcoin Core.\n\nI apologize for sending out the wrong info the first time, although it is still worth noting the DVR firewall is out of your control, which might be a problem if not now then in the future. In any case AT&T has effectively blocked full nodes for Bitcoin Core via the private subnet, and the disability to change it to public without paying $15 more per month, and buying a $15 connection service so they will give you that info (if you dont pay the connection 'specialists' hang up on you). \n\nIt is important to note this is not Bitcoin specific, but effects every program that depends on freely open ports. I don't think AT&T has anything against Bitcoin, it's just their security settings and policies have disabled Bitcoin Core for most customers. Also important to note this isn't a problem specific to AT&T, all the big ISPs are doing similar things. I believe the changes in ISP protocol are the main driving force behind the massive decline in Bitcoin nodes. Another big factor is firewalls, most people can't even remove the firewalls enough to open ports at will. The community needs to educate people on how to use Bitcoin Core when facing these intensifying security measures, or the decline of node numbers will continue.\n\n \n\n \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/ea4a48e8/attachment.html>"
            },
            {
                "author": "Bastiaan van den Berg",
                "date": "2015-09-04T13:47:41",
                "message_text_only": "On Fri, Sep 4, 2015 at 11:55 AM, Zach G via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> It's not so simple though, AT&T will not let you have a public static IP\n> without paying.\n\n\nNot sure, but, what part of bitcoin development are you addressing in this\nemail?\n\n--\nbuZz\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/26c78fef/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "AT&T/ISPs making Bitcoin Core near impossible to use as a full node via hidden private dynamic IPs, not by specifically blocking 8333 or Bitcoin as stated in original email",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Bastiaan van den Berg",
                "hurricanewarn1 at aol.com"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3881
        }
    },
    {
        "title": "[bitcoin-dev] BIP 100 repo",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2015-09-02T23:51:52",
                "message_text_only": "Opened a repo containing the full text of BIP 100 discussion document, in\nmarkdown format.\n\nThe BIP 100 formal spec will be checked in here as well, before submitting\nto upstream bips.git repo.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/3380d204/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-09-02T23:58:54",
                "message_text_only": "Oops, link paste fail.\n\nThe repo: https://github.com/jgarzik/bip100\n\n\nOn Wed, Sep 2, 2015 at 7:51 PM, Jeff Garzik <jgarzik at gmail.com> wrote:\n\n> Opened a repo containing the full text of BIP 100 discussion document, in\n> markdown format.\n>\n> The BIP 100 formal spec will be checked in here as well, before submitting\n> to upstream bips.git repo.\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/2b394143/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-09-03T00:17:42",
                "message_text_only": "On Wednesday, September 02, 2015 11:58:54 PM Jeff Garzik via bitcoin-dev \nwrote:\n> The repo: https://github.com/jgarzik/bip100\n\nWhat is the purpose of the newly added 1 MB floor? It seems clear from the \ncurrent information available that 1 MB is presently too high for the limit, \nand it is entirely one-sided to only allow increases when decreases are much \nmore likely to be needed in the short term.\n\nMust the new size limit votes use 11 bytes of coinbase? Why not just use a \nnumeric value pushed after height? Since this is a hardfork, I suggest \nincreasing the coinbase length to allow for 100 bytes *in addition* to the \npushed height and size-vote.\n\nI suggest combining 2 & 4 into a single rule lifting the 1 MB limit to 32 MB \n(or whatever value is deemed appropriate) to make it clear that the limit \nremains a part of the consensus protocol and p2p protocol limits are not to \nhave an effect on consensus rules.\n\nFurthermore, I suggest modifying the voting to require 50% to set the limit \nfloor. This has the effect of merely coordinating what miners can already \neffectively do today by rejecting blocks larger than some collusion-\ndetermined limit.\n\nThoughts?\n\nLuke"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-09-03T03:38:33",
                "message_text_only": "Luke,\n\n- Definitely agree with most of your suggestions on the practical side;\nseveral clarification could be made.\n- The power to decrease the hard limit appears riskier long term in my\nanalysis.  This is mitigated somewhat by the ease at which miners may\nlocally or collectively lower the block size at any time, without a vote.\n\n\nOn Wed, Sep 2, 2015 at 8:17 PM, Luke Dashjr <luke at dashjr.org> wrote:\n\n> On Wednesday, September 02, 2015 11:58:54 PM Jeff Garzik via bitcoin-dev\n> wrote:\n> > The repo: https://github.com/jgarzik/bip100\n>\n> What is the purpose of the newly added 1 MB floor? It seems clear from the\n> current information available that 1 MB is presently too high for the\n> limit,\n> and it is entirely one-sided to only allow increases when decreases are\n> much\n> more likely to be needed in the short term.\n>\n> Must the new size limit votes use 11 bytes of coinbase? Why not just use a\n> numeric value pushed after height? Since this is a hardfork, I suggest\n> increasing the coinbase length to allow for 100 bytes *in addition* to the\n> pushed height and size-vote.\n>\n> I suggest combining 2 & 4 into a single rule lifting the 1 MB limit to 32\n> MB\n> (or whatever value is deemed appropriate) to make it clear that the limit\n> remains a part of the consensus protocol and p2p protocol limits are not to\n> have an effect on consensus rules.\n>\n> Furthermore, I suggest modifying the voting to require 50% to set the limit\n> floor. This has the effect of merely coordinating what miners can already\n> effectively do today by rejecting blocks larger than some collusion-\n> determined limit.\n>\n> Thoughts?\n>\n> Luke\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/a238869a/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-09-03T04:09:25",
                "message_text_only": "Oh, and answering your question about the 1M:  It is a safety rail.  It can\nperform no worse on the low end than the current system.  Eliminates\nunlikely scenarios that squeeze users.\n\n\nOn Wed, Sep 2, 2015 at 8:17 PM, Luke Dashjr <luke at dashjr.org> wrote:\n\n> On Wednesday, September 02, 2015 11:58:54 PM Jeff Garzik via bitcoin-dev\n> wrote:\n> > The repo: https://github.com/jgarzik/bip100\n>\n> What is the purpose of the newly added 1 MB floor? It seems clear from the\n> current information available that 1 MB is presently too high for the\n> limit,\n> and it is entirely one-sided to only allow increases when decreases are\n> much\n> more likely to be needed in the short term.\n>\n> Must the new size limit votes use 11 bytes of coinbase? Why not just use a\n> numeric value pushed after height? Since this is a hardfork, I suggest\n> increasing the coinbase length to allow for 100 bytes *in addition* to the\n> pushed height and size-vote.\n>\n> I suggest combining 2 & 4 into a single rule lifting the 1 MB limit to 32\n> MB\n> (or whatever value is deemed appropriate) to make it clear that the limit\n> remains a part of the consensus protocol and p2p protocol limits are not to\n> have an effect on consensus rules.\n>\n> Furthermore, I suggest modifying the voting to require 50% to set the limit\n> floor. This has the effect of merely coordinating what miners can already\n> effectively do today by rejecting blocks larger than some collusion-\n> determined limit.\n>\n> Thoughts?\n>\n> Luke\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/133d57d9/attachment-0001.html>"
            },
            {
                "author": "Benjamin",
                "date": "2015-09-03T04:55:17",
                "message_text_only": "I would be helpful to describe what is meant by \"votes\". As far as I\nunderstand this would be a semi-automatic process - nodes encode values\nwhich in turn are hardcoded in software, or is this completely automated\nwithout any intervention at all? Is there the possibility that nodes decide\nby encode votes, but somehow this decision is not adhered to? Is 4. a 51%\nrule?\n\nUnder 2. it might make sense to specify values in the range (1MB steps\ne.g.). The number of options could have an effect. For example if the vote\nhas 4 possible values or 32 possible values can make a difference in\noutcomes.\n\nWith regards to 1. Bitcoin does not have a fee market, although I agree\nthat might be a good goal. There is no price-determination of fees and no\ndefinition of quality of service. A fee market would entail some matching\nof demand and supply to establish a price. Users would adjust fee to win a\ntransaction slow in a deterministic way. However currently the user has no\nway of knowing what effect a fee might have. So this would necessarily\ninclude some kind pricing-mechanism with actual commitments. Bitcoin as a\nsystem is quite far away from such a capability. It would mean Bitcoin is\ncapable of adapting to how it is used. For example that would allow to\nshift transactions from high demand period to low demand period. I'm not\naware of any proposal to make an actual functioning fee market in Bitcoin\n(or even the conceptual primitives).\n\n\n\nOn Thu, Sep 3, 2015 at 5:09 AM, Jeff Garzik via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Oh, and answering your question about the 1M:  It is a safety rail.  It\n> can perform no worse on the low end than the current system.  Eliminates\n> unlikely scenarios that squeeze users.\n>\n>\n> On Wed, Sep 2, 2015 at 8:17 PM, Luke Dashjr <luke at dashjr.org> wrote:\n>\n>> On Wednesday, September 02, 2015 11:58:54 PM Jeff Garzik via bitcoin-dev\n>> wrote:\n>> > The repo: https://github.com/jgarzik/bip100\n>>\n>> What is the purpose of the newly added 1 MB floor? It seems clear from the\n>> current information available that 1 MB is presently too high for the\n>> limit,\n>> and it is entirely one-sided to only allow increases when decreases are\n>> much\n>> more likely to be needed in the short term.\n>>\n>> Must the new size limit votes use 11 bytes of coinbase? Why not just use a\n>> numeric value pushed after height? Since this is a hardfork, I suggest\n>> increasing the coinbase length to allow for 100 bytes *in addition* to the\n>> pushed height and size-vote.\n>>\n>> I suggest combining 2 & 4 into a single rule lifting the 1 MB limit to 32\n>> MB\n>> (or whatever value is deemed appropriate) to make it clear that the limit\n>> remains a part of the consensus protocol and p2p protocol limits are not\n>> to\n>> have an effect on consensus rules.\n>>\n>> Furthermore, I suggest modifying the voting to require 50% to set the\n>> limit\n>> floor. This has the effect of merely coordinating what miners can already\n>> effectively do today by rejecting blocks larger than some collusion-\n>> determined limit.\n>>\n>> Thoughts?\n>>\n>> Luke\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/218cbfe4/attachment.html>"
            },
            {
                "author": "odinn",
                "date": "2015-09-03T06:41:20",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nExcellent - thank you.\n\nJeff Garzik via bitcoin-dev:\n> Oops, link paste fail.\n> \n> The repo: https://github.com/jgarzik/bip100\n> \n> \n> On Wed, Sep 2, 2015 at 7:51 PM, Jeff Garzik <jgarzik at gmail.com>\n> wrote:\n> \n>> Opened a repo containing the full text of BIP 100 discussion\n>> document, in markdown format.\n>> \n>> The BIP 100 formal spec will be checked in here as well, before\n>> submitting to upstream bips.git repo.\n>> \n>> \n>> \n> \n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEbBAEBCgAGBQJV5+uQAAoJEGxwq/inSG8CVBUH9A5GtIj3pLxZRlX0oDxSbIWJ\n2830HURoeb40ShBlhbzO1nHiJtPhRPWqByZETQcuElBagMPreSKI5VZxJ1xaNOI3\no6yo9ujeLNlge1j53TOq8uQCXKnwrVsjS3yQkXlo+IX+Vihin5c/D4Xn9y97OqwQ\nCixVswCJrrRrGHj6YaFsfAx+epaJ/aT4djoB0XjH9PKJI5b0cPGSBDipHbuVn3nd\nFZidPAS/hHI0Sw3k0EHtYudjBXBbMi2hCad37asrg2cIF/sFbCA/BSkpuIi5agzY\n50Wp8xm3gd4WWjEn/svhw2AIgH7R/1Yk2/qFImob5iXMm7sU1OUMHD325kN2dg==\n=7a0Z\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "BIP 100 repo",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeff Garzik",
                "Benjamin",
                "Luke Dashjr",
                "odinn"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 10327
        }
    },
    {
        "title": "[bitcoin-dev] BIP 100 specification",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2015-09-03T03:33:29",
                "message_text_only": "BIP 100 initial public draft:\nhttps://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki\n\nEmphasis on \"initial\"  This is a starting point for the usual open source\nfeedback/iteration cycle, not an endpoint that Must Be This Way.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/0c11c03f/attachment.html>"
            },
            {
                "author": "Dave Scotese",
                "date": "2015-09-03T04:45:38",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nI suggest revising these items for clarity (and I'm guessing on the first\none)\n\n    Calculate hardLimit by examining the coinbase scriptSig votes of the\nprevious 12,000 blocks, and taking the 20th percentile.\n    A new hardLimit may not increase or decrease by more than 1.2x beyond\nthe prior hardLimit.\n\nto:\n\n    The new hardLimit is calculated by sorting the coinbase scriptSig votes\nof the last 12,000 blocks from lowest to highest and using the vote of the\n2400th block.\n    If the vote of the 2400th block is a change of less than 20%, use it as\nthe new hardLimit.  Otherwise, change the hardLimit to be closer to that\nvote, to either 120% or 80% of the current hardLimit.\n\nI don't understand #5, 75% rule.  Shouldn't invalid version 4 blocks always\nbe rejected?\n\nnotplato\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAEBAgAGBQJV58/5AAoJEL8dSijmIbHt16IH/0jAr3v1HjWW7N1awNxeAABs\nGIvOFYuZAcPkZvWZQc4JRAppglqeBfYqWl2gpyywSBK1SXjsY8zdo3t7xAK/IJfB\n05hnv1GGutG3dLTzJBEXaPx62SLukepC1pzEH7rlwWvVuE9zcRqVE1eGbBEUjA9c\nsGPr0z9BNeLoTbllyl3Jndz9N2Vnd6bBTxRgBlfkm/Y5ovc+GhyKZyX3Pdmj5Pga\nE6foOsvqNXQJqPl8WCODsnfPSshyb7YRNFrBB9A+tpjvj4UMc8PxOpL6IX/nJpOt\njlfRoKVw2YBEodvda+9P6S54GlGFazyHhwJ11F5YCNnWW1bKoQrqJU6ofgmyxMM=\n=QWra\n-----END PGP SIGNATURE-----\n\n\nOn Wed, Sep 2, 2015 at 8:33 PM, Jeff Garzik via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> BIP 100 initial public draft:\n> https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki\n>\n> Emphasis on \"initial\"  This is a starting point for the usual open source\n> feedback/iteration cycle, not an endpoint that Must Be This Way.\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n\n\n-- \nI like to provide some work at no charge to prove my value. Do you need a\ntechie?\nI own Litmocracy <http://www.litmocracy.com> and Meme Racing\n<http://www.memeracing.net> (in alpha).\nI'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which\nnow accepts Bitcoin.\nI also code for The Dollar Vigilante <http://dollarvigilante.com/>.\n\"He ought to find it more profitable to play by the rules\" - Satoshi\nNakamoto\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150902/f858063b/attachment.html>"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-09-03T07:57:09",
                "message_text_only": "Some comments:\n\n \t* The 75% rule is meaningless here. Since this is a pure relaxation of\nrules, there is no such thing as \"invalid version 4 blocks\"\n\n\t* \n\nThe implication threshold is unclear. Is it 95% or 80%?\n\n \t* Softfork requires a very high threshold (95%) to \"attack\" the\noriginal fork. This makes sure that unupgraded client will only see the\nnew fork.\n \t* In the case of hardfork, however, the new fork is unable to attack\nthe original fork, and unupgraded client will never see the new fork.\nThe initiation of a hardfork should be based on its acceptance by the\neconomic majority, not miner support. 95% is an overkill and may\nprobably never accomplished. I strongly prefer a 80% threshold rather\nthan 95%.\n\n \t* As I've pointed out, using 20-percentile rather than median creates\nan incentive to 51% attack the uncooperative minority.\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010690.html\n\nHaving said that, I don't have a strong feeling about the use of\n20-percentile as threshold to increase the block size. That means the\nblock size is increased only when most miners agree, which sounds ok to\nme. \n\nHowever, using 20-percentile as threshold to DECREASE the block size\ncould be very dangerous. Consider that the block size has been stable at\n8MB for a few years. Everyone are happy with that. An attacker would\njust need to acquire 21% of mining power to break the status quo and\nsend us all the way to 1MB. The only way to stop such attempt is to 51%\nattack the attacker. That'd be really ugly. \n\nFor technical and ethical reasons, I believe the thresholds for increase\nand decrease must be symmetrical: increase the block size when the\nx-percentile is bigger than the current size, decrease the block size\nwhen the (100-x)-percentile is smaller than the current size. The\noverall effect is: the block size remains unchanged unless 80% of miners\nagree to. \n\n \t* Please consider the use of \"hardfork bit\" to signify the hardfork:\n\nhttps://www.reddit.com/r/bitcoin_devlist/comments/3ekhg2/bip_draft_hardfork_bit_jl2012_at_xbthk_jul_23_2015/\n\n\nhttps://github.com/jl2012/bips/blob/master/hardforkbit.mediawiki \n\n \t* Or, alternatively, please combine the hardfork with a softfork. I'm\nrewriting the specification as follow (changes underlined):\n\n \t* Replace static 1M block size hard limit with a floating limit\n(\"hardLimit\").\n\n\t* \n\nhardLimit floats within the range 1-32M, inclusive.\n\n\t* \n\nInitial value of hardLimit is 1M, preserving current system.\n \t* Changing hardLimit is accomplished by encoding a proposed value\nwithin a block's coinbase scriptSig.\n\n \t* Votes refer to a byte value, encoded within the pattern \"/BVd+/\"\nExample: /BV8000000/ votes for 8,000,000 byte hardLimit. If there is\nmore than one match with with pattern, the first match is counted.\n \t* Absent/invalid votes and votes below minimum cap (1M) are counted as\n1M votes. Votes above the maximum cap (32M) are counted as 32M votes.\n \t* A new hardLimit is calculated at each difficult adjustment period\n(2016 blocks), and applies to the next 2016 blocks.\n \t* Calculate hardLimit by examining the coinbase scriptSig votes of the\nprevious 12,000 blocks, and taking the 20th percentile and 80th\npercentile.\n \t* New hardLimit is the median of the followings:\n\n \t* min(current hardLimit * 1.2, 20-percentile)\n \t* max(current hardLimit / 1.2, 80-percentile)\n \t* current hardLimit\n\n \t* version 4 block: the coinbase of a version 4 block must match this\npattern: \"/BVd+/\"\n \t* 70% rule: If 8,400 of the last 12,000 blocks are version 4 or\ngreater, reject invalid version 4 blocks. (testnet4: 501 of last 1000)\n \t* 80% rule (\"Point of no return\"): If 9,600 of the last 12,000 blocks\nare version 4 or greater, reject all version <= 3 blocks. (testnet4: 750\nof last 1000)\n \t* Block version number is calculated after masking out high 16 bits\n(final bit count TBD by versionBits outcome).\n\nJeff Garzik via bitcoin-dev \u65bc 2015-09-02 23:33 \u5beb\u5230:\n> BIP 100 initial public draft:\n> https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki [1]\n> \n> Emphasis on \"initial\" This is a starting point for the usual open\n> source feedback/iteration cycle, not an endpoint that Must Be This\n> Way.\n> \n> \n> \n> Links:\n> ------\n> [1] https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/9bfb6c46/attachment.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-03T11:20:08",
                "message_text_only": "We should avoid discussing actual hard fork/softfork deployment\nmethodologies when discussing blocksize proposals because deployment\nis a separate issue. As a recent case in point, look at how BIP65\n(CHECKLOCKTIMEVERIFY) specifically avoided the issue of how to deploy.\nThat lead to a focused discussion of the functionality and relatively\nquick inclusion.\n\nDeployment really is a separate issue than the mechanics of how BIP100\nwill function after activation.\n\nOn Thu, Sep 3, 2015 at 8:57 AM, jl2012 via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Some comments:\n>\n> The 75% rule is meaningless here. Since this is a pure relaxation of rules,\n> there is no such thing as \"invalid version 4 blocks\"\n>\n> The implication threshold is unclear. Is it 95% or 80%?\n>\n> Softfork requires a very high threshold (95%) to \"attack\" the original fork.\n> This makes sure that unupgraded client will only see the new fork.\n> In the case of hardfork, however, the new fork is unable to attack the\n> original fork, and unupgraded client will never see the new fork. The\n> initiation of a hardfork should be based on its acceptance by the economic\n> majority, not miner support. 95% is an overkill and may probably never\n> accomplished. I strongly prefer a 80% threshold rather than 95%.\n>\n> As I've pointed out, using 20-percentile rather than median creates an\n> incentive to 51% attack the uncooperative minority.\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010690.html\n>\n> Having said that, I don't have a strong feeling about the use of\n> 20-percentile as threshold to increase the block size. That means the block\n> size is increased only when most miners agree, which sounds ok to me.\n>\n> However, using 20-percentile as threshold to DECREASE the block size could\n> be very dangerous. Consider that the block size has been stable at 8MB for a\n> few years. Everyone are happy with that. An attacker would just need to\n> acquire 21% of mining power to break the status quo and send us all the way\n> to 1MB. The only way to stop such attempt is to 51% attack the attacker.\n> That'd be really ugly.\n>\n> For technical and ethical reasons, I believe the thresholds for increase and\n> decrease must be symmetrical: increase the block size when the x-percentile\n> is bigger than the current size, decrease the block size when the\n> (100-x)-percentile is smaller than the current size. The overall effect is:\n> the block size remains unchanged unless 80% of miners agree to.\n>\n> Please consider the use of \"hardfork bit\" to signify the hardfork:\n>\n> https://www.reddit.com/r/bitcoin_devlist/comments/3ekhg2/bip_draft_hardfork_bit_jl2012_at_xbthk_jul_23_2015/\n>\n> https://github.com/jl2012/bips/blob/master/hardforkbit.mediawiki\n>\n> Or, alternatively, please combine the hardfork with a softfork. I'm\n> rewriting the specification as follow (changes underlined):\n>\n> Replace static 1M block size hard limit with a floating limit (\"hardLimit\").\n>\n> hardLimit floats within the range 1-32M, inclusive.\n>\n> Initial value of hardLimit is 1M, preserving current system.\n>\n> Changing hardLimit is accomplished by encoding a proposed value within a\n> block's coinbase scriptSig.\n>\n> Votes refer to a byte value, encoded within the pattern \"/BV\\d+/\" Example:\n> /BV8000000/ votes for 8,000,000 byte hardLimit. If there is more than one\n> match with with pattern, the first match is counted.\n> Absent/invalid votes and votes below minimum cap (1M) are counted as 1M\n> votes. Votes above the maximum cap (32M) are counted as 32M votes.\n> A new hardLimit is calculated at each difficult adjustment period (2016\n> blocks), and applies to the next 2016 blocks.\n> Calculate hardLimit by examining the coinbase scriptSig votes of the\n> previous 12,000 blocks, and taking the 20th percentile and 80th percentile.\n> New hardLimit is the median of the followings:\n>\n> min(current hardLimit * 1.2, 20-percentile)\n> max(current hardLimit / 1.2, 80-percentile)\n> current hardLimit\n>\n> version 4 block: the coinbase of a version 4 block must match this pattern:\n> \"/BV\\d+/\"\n> 70% rule: If 8,400 of the last 12,000 blocks are version 4 or greater,\n> reject invalid version 4 blocks. (testnet4: 501 of last 1000)\n> 80% rule (\"Point of no return\"): If 9,600 of the last 12,000 blocks are\n> version 4 or greater, reject all version <= 3 blocks. (testnet4: 750 of last\n> 1000)\n> Block version number is calculated after masking out high 16 bits (final bit\n> count TBD by versionBits outcome).\n>\n> Jeff Garzik via bitcoin-dev \u65bc 2015-09-02 23:33 \u5beb\u5230:\n>> BIP 100 initial public draft:\n>> https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki [1]\n>>\n>> Emphasis on \"initial\"  This is a starting point for the usual open\n>> source feedback/iteration cycle, not an endpoint that Must Be This\n>> Way.\n>>\n>>\n>>\n>> Links:\n>> ------\n>> [1] https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-09-03T14:34:02",
                "message_text_only": "A discussion of rolling out BIP 100 will not be avoided :)\n\nIt is a hard fork; it would be silly to elide discussion of these key\nissues.\n\nI don't get the community's recent interest in avoiding certain topics.\n\n\n\nOn Thu, Sep 3, 2015 at 7:20 AM, Btc Drak <btcdrak at gmail.com> wrote:\n\n> We should avoid discussing actual hard fork/softfork deployment\n> methodologies when discussing blocksize proposals because deployment\n> is a separate issue. As a recent case in point, look at how BIP65\n> (CHECKLOCKTIMEVERIFY) specifically avoided the issue of how to deploy.\n> That lead to a focused discussion of the functionality and relatively\n> quick inclusion.\n>\n> Deployment really is a separate issue than the mechanics of how BIP100\n> will function after activation.\n>\n> On Thu, Sep 3, 2015 at 8:57 AM, jl2012 via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Some comments:\n> >\n> > The 75% rule is meaningless here. Since this is a pure relaxation of\n> rules,\n> > there is no such thing as \"invalid version 4 blocks\"\n> >\n> > The implication threshold is unclear. Is it 95% or 80%?\n> >\n> > Softfork requires a very high threshold (95%) to \"attack\" the original\n> fork.\n> > This makes sure that unupgraded client will only see the new fork.\n> > In the case of hardfork, however, the new fork is unable to attack the\n> > original fork, and unupgraded client will never see the new fork. The\n> > initiation of a hardfork should be based on its acceptance by the\n> economic\n> > majority, not miner support. 95% is an overkill and may probably never\n> > accomplished. I strongly prefer a 80% threshold rather than 95%.\n> >\n> > As I've pointed out, using 20-percentile rather than median creates an\n> > incentive to 51% attack the uncooperative minority.\n> >\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010690.html\n> >\n> > Having said that, I don't have a strong feeling about the use of\n> > 20-percentile as threshold to increase the block size. That means the\n> block\n> > size is increased only when most miners agree, which sounds ok to me.\n> >\n> > However, using 20-percentile as threshold to DECREASE the block size\n> could\n> > be very dangerous. Consider that the block size has been stable at 8MB\n> for a\n> > few years. Everyone are happy with that. An attacker would just need to\n> > acquire 21% of mining power to break the status quo and send us all the\n> way\n> > to 1MB. The only way to stop such attempt is to 51% attack the attacker.\n> > That'd be really ugly.\n> >\n> > For technical and ethical reasons, I believe the thresholds for increase\n> and\n> > decrease must be symmetrical: increase the block size when the\n> x-percentile\n> > is bigger than the current size, decrease the block size when the\n> > (100-x)-percentile is smaller than the current size. The overall effect\n> is:\n> > the block size remains unchanged unless 80% of miners agree to.\n> >\n> > Please consider the use of \"hardfork bit\" to signify the hardfork:\n> >\n> >\n> https://www.reddit.com/r/bitcoin_devlist/comments/3ekhg2/bip_draft_hardfork_bit_jl2012_at_xbthk_jul_23_2015/\n> >\n> > https://github.com/jl2012/bips/blob/master/hardforkbit.mediawiki\n> >\n> > Or, alternatively, please combine the hardfork with a softfork. I'm\n> > rewriting the specification as follow (changes underlined):\n> >\n> > Replace static 1M block size hard limit with a floating limit\n> (\"hardLimit\").\n> >\n> > hardLimit floats within the range 1-32M, inclusive.\n> >\n> > Initial value of hardLimit is 1M, preserving current system.\n> >\n> > Changing hardLimit is accomplished by encoding a proposed value within a\n> > block's coinbase scriptSig.\n> >\n> > Votes refer to a byte value, encoded within the pattern \"/BV\\d+/\"\n> Example:\n> > /BV8000000/ votes for 8,000,000 byte hardLimit. If there is more than one\n> > match with with pattern, the first match is counted.\n> > Absent/invalid votes and votes below minimum cap (1M) are counted as 1M\n> > votes. Votes above the maximum cap (32M) are counted as 32M votes.\n> > A new hardLimit is calculated at each difficult adjustment period (2016\n> > blocks), and applies to the next 2016 blocks.\n> > Calculate hardLimit by examining the coinbase scriptSig votes of the\n> > previous 12,000 blocks, and taking the 20th percentile and 80th\n> percentile.\n> > New hardLimit is the median of the followings:\n> >\n> > min(current hardLimit * 1.2, 20-percentile)\n> > max(current hardLimit / 1.2, 80-percentile)\n> > current hardLimit\n> >\n> > version 4 block: the coinbase of a version 4 block must match this\n> pattern:\n> > \"/BV\\d+/\"\n> > 70% rule: If 8,400 of the last 12,000 blocks are version 4 or greater,\n> > reject invalid version 4 blocks. (testnet4: 501 of last 1000)\n> > 80% rule (\"Point of no return\"): If 9,600 of the last 12,000 blocks are\n> > version 4 or greater, reject all version <= 3 blocks. (testnet4: 750 of\n> last\n> > 1000)\n> > Block version number is calculated after masking out high 16 bits (final\n> bit\n> > count TBD by versionBits outcome).\n> >\n> > Jeff Garzik via bitcoin-dev \u65bc 2015-09-02 23:33 \u5beb\u5230:\n> >> BIP 100 initial public draft:\n> >> https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki [1]\n> >>\n> >> Emphasis on \"initial\"  This is a starting point for the usual open\n> >> source feedback/iteration cycle, not an endpoint that Must Be This\n> >> Way.\n> >>\n> >>\n> >>\n> >> Links:\n> >> ------\n> >> [1] https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki\n> >>\n> >> _______________________________________________\n> >> bitcoin-dev mailing list\n> >> bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/43c07e6d/attachment-0001.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-03T15:58:04",
                "message_text_only": "On Thu, Sep 3, 2015 at 3:34 PM, Jeff Garzik <jgarzik at gmail.com> wrote:\n> A discussion of rolling out BIP 100 will not be avoided :)\n>\n> It is a hard fork; it would be silly to elide discussion of these key\n> issues.\n>\n> I don't get the community's recent interest in avoiding certain topics.\n\nIt's not a matter of avoiding the subject, it's a whole separate\ndiscussion and in the interests of efficient discussion, it is best\ndone separately. There's a whole BIP dedicated to the discussion of\nconsensus forks which you should probably give some input in also,\nBIP99 [1]\n\nOnce we come to an agreement and can say \"here's what we're doing\nabout blocksize, it will be X, or we'll raise by this algo\", then we\ncan discuss the best way to implement the hard fork.\n\n[1] https://github.com/bitcoin/bips/pull/181\n\n\n>\n>\n>\n> On Thu, Sep 3, 2015 at 7:20 AM, Btc Drak <btcdrak at gmail.com> wrote:\n>>\n>> We should avoid discussing actual hard fork/softfork deployment\n>> methodologies when discussing blocksize proposals because deployment\n>> is a separate issue. As a recent case in point, look at how BIP65\n>> (CHECKLOCKTIMEVERIFY) specifically avoided the issue of how to deploy.\n>> That lead to a focused discussion of the functionality and relatively\n>> quick inclusion.\n>>\n>> Deployment really is a separate issue than the mechanics of how BIP100\n>> will function after activation.\n>>\n>> On Thu, Sep 3, 2015 at 8:57 AM, jl2012 via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > Some comments:\n>> >\n>> > The 75% rule is meaningless here. Since this is a pure relaxation of\n>> > rules,\n>> > there is no such thing as \"invalid version 4 blocks\"\n>> >\n>> > The implication threshold is unclear. Is it 95% or 80%?\n>> >\n>> > Softfork requires a very high threshold (95%) to \"attack\" the original\n>> > fork.\n>> > This makes sure that unupgraded client will only see the new fork.\n>> > In the case of hardfork, however, the new fork is unable to attack the\n>> > original fork, and unupgraded client will never see the new fork. The\n>> > initiation of a hardfork should be based on its acceptance by the\n>> > economic\n>> > majority, not miner support. 95% is an overkill and may probably never\n>> > accomplished. I strongly prefer a 80% threshold rather than 95%.\n>> >\n>> > As I've pointed out, using 20-percentile rather than median creates an\n>> > incentive to 51% attack the uncooperative minority.\n>> >\n>> > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010690.html\n>> >\n>> > Having said that, I don't have a strong feeling about the use of\n>> > 20-percentile as threshold to increase the block size. That means the\n>> > block\n>> > size is increased only when most miners agree, which sounds ok to me.\n>> >\n>> > However, using 20-percentile as threshold to DECREASE the block size\n>> > could\n>> > be very dangerous. Consider that the block size has been stable at 8MB\n>> > for a\n>> > few years. Everyone are happy with that. An attacker would just need to\n>> > acquire 21% of mining power to break the status quo and send us all the\n>> > way\n>> > to 1MB. The only way to stop such attempt is to 51% attack the attacker.\n>> > That'd be really ugly.\n>> >\n>> > For technical and ethical reasons, I believe the thresholds for increase\n>> > and\n>> > decrease must be symmetrical: increase the block size when the\n>> > x-percentile\n>> > is bigger than the current size, decrease the block size when the\n>> > (100-x)-percentile is smaller than the current size. The overall effect\n>> > is:\n>> > the block size remains unchanged unless 80% of miners agree to.\n>> >\n>> > Please consider the use of \"hardfork bit\" to signify the hardfork:\n>> >\n>> >\n>> > https://www.reddit.com/r/bitcoin_devlist/comments/3ekhg2/bip_draft_hardfork_bit_jl2012_at_xbthk_jul_23_2015/\n>> >\n>> > https://github.com/jl2012/bips/blob/master/hardforkbit.mediawiki\n>> >\n>> > Or, alternatively, please combine the hardfork with a softfork. I'm\n>> > rewriting the specification as follow (changes underlined):\n>> >\n>> > Replace static 1M block size hard limit with a floating limit\n>> > (\"hardLimit\").\n>> >\n>> > hardLimit floats within the range 1-32M, inclusive.\n>> >\n>> > Initial value of hardLimit is 1M, preserving current system.\n>> >\n>> > Changing hardLimit is accomplished by encoding a proposed value within a\n>> > block's coinbase scriptSig.\n>> >\n>> > Votes refer to a byte value, encoded within the pattern \"/BV\\d+/\"\n>> > Example:\n>> > /BV8000000/ votes for 8,000,000 byte hardLimit. If there is more than\n>> > one\n>> > match with with pattern, the first match is counted.\n>> > Absent/invalid votes and votes below minimum cap (1M) are counted as 1M\n>> > votes. Votes above the maximum cap (32M) are counted as 32M votes.\n>> > A new hardLimit is calculated at each difficult adjustment period (2016\n>> > blocks), and applies to the next 2016 blocks.\n>> > Calculate hardLimit by examining the coinbase scriptSig votes of the\n>> > previous 12,000 blocks, and taking the 20th percentile and 80th\n>> > percentile.\n>> > New hardLimit is the median of the followings:\n>> >\n>> > min(current hardLimit * 1.2, 20-percentile)\n>> > max(current hardLimit / 1.2, 80-percentile)\n>> > current hardLimit\n>> >\n>> > version 4 block: the coinbase of a version 4 block must match this\n>> > pattern:\n>> > \"/BV\\d+/\"\n>> > 70% rule: If 8,400 of the last 12,000 blocks are version 4 or greater,\n>> > reject invalid version 4 blocks. (testnet4: 501 of last 1000)\n>> > 80% rule (\"Point of no return\"): If 9,600 of the last 12,000 blocks are\n>> > version 4 or greater, reject all version <= 3 blocks. (testnet4: 750 of\n>> > last\n>> > 1000)\n>> > Block version number is calculated after masking out high 16 bits (final\n>> > bit\n>> > count TBD by versionBits outcome).\n>> >\n>> > Jeff Garzik via bitcoin-dev \u65bc 2015-09-02 23:33 \u5beb\u5230:\n>> >> BIP 100 initial public draft:\n>> >> https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki [1]\n>> >>\n>> >> Emphasis on \"initial\"  This is a starting point for the usual open\n>> >> source feedback/iteration cycle, not an endpoint that Must Be This\n>> >> Way.\n>> >>\n>> >>\n>> >>\n>> >> Links:\n>> >> ------\n>> >> [1] https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki\n>> >>\n>> >> _______________________________________________\n>> >> bitcoin-dev mailing list\n>> >> bitcoin-dev at lists.linuxfoundation.org\n>> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >\n>> >\n>> > _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >\n>\n>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-03T16:13:34",
                "message_text_only": "On Sep 3, 2015 5:58 PM, \"Btc Drak via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> On Thu, Sep 3, 2015 at 3:34 PM, Jeff Garzik <jgarzik at gmail.com> wrote:\n> > A discussion of rolling out BIP 100 will not be avoided :)\n> >\n> > It is a hard fork; it would be silly to elide discussion of these key\n> > issues.\n> >\n> > I don't get the community's recent interest in avoiding certain topics.\n>\n> It's not a matter of avoiding the subject, it's a whole separate\n> discussion and in the interests of efficient discussion, it is best\n> done separately. There's a whole BIP dedicated to the discussion of\n> consensus forks which you should probably give some input in also,\n> BIP99 [1]\n>\n> Once we come to an agreement and can say \"here's what we're doing\n> about blocksize, it will be X, or we'll raise by this algo\", then we\n> can discuss the best way to implement the hard fork.\n>\n> [1] https://github.com/bitcoin/bips/pull/181\n\nIn fact, that discussion can happen in parallel. But it is more efficient\nto do so in one place instead of in each of the 5+ hardfork proposals\n(bip99 itself has a hardfork proposal with its code ready).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/a11ae3c3/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-09-03T11:59:01",
                "message_text_only": "On Thu, Sep 3, 2015 at 8:57 AM, jl2012 via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n>    1.\n>\n>    hardLimit floats within the range 1-32M, inclusive.\n>\n>\n>\nDoes the 32MB limit actually still exist anywhere in the code?  In effect,\nit is re-instating a legacy limitation.\n\nThe message size limit is to minimize the storage required per peer.  If a\n32MB block size is required, then each network input buffer must be at\nleast 32MB. This makes it harder for a node to support a large number of\npeers.\n\nThere is no reason why a single message is used for each block.  Using the\nmerkleblock message (or a different dedicated message), it would be\npossible to send messages which only contain part of a block and have a\nlimited maximum size.\n\nThis would allow receiving parts of a block from multiple sources.\n\nThis is a separate issue but should be considered if moving past 32MB block\nsizes (or maybe as a later protocol change).\n\n\n>\n>    1. Changing hardLimit is accomplished by encoding a proposed value\n>    within a block's coinbase scriptSig.\n>       1. Votes refer to a byte value, encoded within the pattern\n>       \"/BV\\d+/\" Example: /BV8000000/ votes for 8,000,000 byte hardLimit. If\n>       there is more than one match with with pattern, the first match is counted.\n>\n> Is there a need for byte resolution?  Using MB resolution would use up\nmuch fewer bytes in the coinbase.\n\nEven with the +/- 20% rule, miners could vote for the nearest MB.  Once the\nblock size exceeds 5MB, then there is enough resolution anyway.\n\n\n>    1. Absent/invalid votes and votes below minimum cap (1M) are counted\n>       as 1M votes. Votes above the maximum cap (32M) are counted as 32M votes.\n>\n>\nI think abstains should count for the status quo.  Votes which are out of\nrange should be clamped.\n\nHaving said that, if core supports the change, then most miners will\nprobably vote one way or another.\n\n> New hardLimit is the median of the followings:\n> min(current hardLimit * 1.2, 20-percentile)\n> max(current hardLimit / 1.2, 80-percentile)\n> current hardLimit\n\nI think this is unclear, though mathematically exact.\n\nSort the votes for the last 12,000 blocks from lowest to highest.\n\nBlocks which don't have a vote are considered a vote for the status quo.\n\nVotes are limited to +/- 20% of the current value.  Votes that are out of\nrange are considered to vote for the nearest in range value.\n\nThe raise value is defined as the vote for the 2400th highest block (20th\npercentile).\nThe lower value  is defined as the vote for the 9600th highest block (80th\npercentile).\n\nIf the raise value is higher than the status quo, then the new limit is set\nto the raise value.\nIf the lower value is lower than the status quo, then the new limit is set\nto the lower value.\nOtherwise, the size limit is unchanged.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/765fb2ef/attachment-0001.html>"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-09-03T16:32:15",
                "message_text_only": "1. I think there is no need to have resolution at byte level, while \nresolution at MB level is not enough. kB would be a better choice.\n\n2. In my specification a v4 block without a vote is invalid, so there is \nno need to consider absent or invalid votes\n\n3. We should allow miners to explicitly vote for the status quo, so they \ndon't need to change the coinbase vote every time the size is changed. \nThey may indicate it by /BV/ in the coinbase, and we should look for the \nfirst \"/BVd*/\" instead of \"/BVd+/\"\n\n4. Alternatively, miners may vote in different styles: /BV1234567/, \n/BV1500K/, /BV3M/. The first one means 1.234567MB, the second one is \n1.5MB, the last one is 3MB. The pattern is \"/BV(\\d+[KM]?)?/\"\n\nTier Nolan via bitcoin-dev \u65bc 2015-09-03 07:59 \u5beb\u5230:\n> On Thu, Sep 3, 2015 at 8:57 AM, jl2012 via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n>> *\n>> \n>> hardLimit floats within the range 1-32M, inclusive.\n> \n> Does the 32MB limit actually still exist anywhere in the code?  In\n> effect, it is re-instating a legacy limitation.\n> \n> The message size limit is to minimize the storage required per peer.\n> If a 32MB block size is required, then each network input buffer must\n> be at least 32MB. This makes it harder for a node to support a large\n> number of peers.\n> \n> There is no reason why a single message is used for each block.  Using\n> the merkleblock message (or a different dedicated message), it would\n> be possible to send messages which only contain part of a block and\n> have a limited maximum size.\n> \n> This would allow receiving parts of a block from multiple sources.\n> \n> This is a separate issue but should be considered if moving past 32MB\n> block sizes (or maybe as a later protocol change).\n> \n>> * Changing hardLimit is accomplished by encoding a proposed value\n>> within a block's coinbase scriptSig.\n>> \n>> * Votes refer to a byte value, encoded within the pattern \"/BVd+/\"\n>> Example: /BV8000000/ votes for 8,000,000 byte hardLimit. If there is\n>> more than one match with with pattern, the first match is counted.\n> \n> Is there a need for byte resolution?  Using MB resolution would use up\n> much fewer bytes in the coinbase.\n> \n> Even with the +/- 20% rule, miners could vote for the nearest MB.\n> Once the block size exceeds 5MB, then there is enough resolution\n> anyway.\n> \n>> * Absent/invalid votes and votes below minimum cap (1M) are\n>> counted as 1M votes. Votes above the maximum cap (32M) are counted\n>> as 32M votes.\n> \n> I think abstains should count for the status quo.  Votes which are out\n> of range should be clamped.\n> \n> Having said that, if core supports the change, then most miners will\n> probably vote one way or another.\n> \n>> New hardLimit is the median of the followings:\n>> min(current hardLimit * 1.2, 20-percentile)\n>> max(current hardLimit / 1.2, 80-percentile)\n>> current hardLimit\n> \n> I think this is unclear, though mathematically exact.\n> \n> Sort the votes for the last 12,000 blocks from lowest to highest.\n> \n> Blocks which don't have a vote are considered a vote for the status\n> quo.\n> \n> Votes are limited to +/- 20% of the current value.  Votes that are out\n> of range are considered to vote for the nearest in range value.\n> \n> The raise value is defined as the vote for the 2400th highest block\n> (20th percentile).\n> \n> The lower value  is defined as the vote for the 9600th highest block\n> (80th percentile).\n> \n> If the raise value is higher than the status quo, then the new limit\n> is set to the raise value.\n> \n> If the lower value is lower than the status quo, then the new limit is\n> set to the lower value.\n> \n> Otherwise, the size limit is unchanged.\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-09-03T16:35:23",
                "message_text_only": "Take a look at the latest update:\n\n- swiped Tier Nolan verbiage, which I agree was usefully more clear\n- added 'M' suffix and removed 'V' from coinbase scriptSig\n\n\nOn Thu, Sep 3, 2015 at 12:32 PM, jl2012 via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> 1. I think there is no need to have resolution at byte level, while\n> resolution at MB level is not enough. kB would be a better choice.\n>\n> 2. In my specification a v4 block without a vote is invalid, so there is\n> no need to consider absent or invalid votes\n>\n> 3. We should allow miners to explicitly vote for the status quo, so they\n> don't need to change the coinbase vote every time the size is changed. They\n> may indicate it by /BV/ in the coinbase, and we should look for the first\n> \"/BVd*/\" instead of \"/BVd+/\"\n>\n> 4. Alternatively, miners may vote in different styles: /BV1234567/,\n> /BV1500K/, /BV3M/. The first one means 1.234567MB, the second one is 1.5MB,\n> the last one is 3MB. The pattern is \"/BV(\\d+[KM]?)?/\"\n>\n> Tier Nolan via bitcoin-dev \u65bc 2015-09-03 07:59 \u5beb\u5230:\n>\n>> On Thu, Sep 3, 2015 at 8:57 AM, jl2012 via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> *\n>>>\n>>> hardLimit floats within the range 1-32M, inclusive.\n>>>\n>>\n>> Does the 32MB limit actually still exist anywhere in the code?  In\n>> effect, it is re-instating a legacy limitation.\n>>\n>> The message size limit is to minimize the storage required per peer.\n>> If a 32MB block size is required, then each network input buffer must\n>> be at least 32MB. This makes it harder for a node to support a large\n>> number of peers.\n>>\n>> There is no reason why a single message is used for each block.  Using\n>> the merkleblock message (or a different dedicated message), it would\n>> be possible to send messages which only contain part of a block and\n>> have a limited maximum size.\n>>\n>> This would allow receiving parts of a block from multiple sources.\n>>\n>> This is a separate issue but should be considered if moving past 32MB\n>> block sizes (or maybe as a later protocol change).\n>>\n>> * Changing hardLimit is accomplished by encoding a proposed value\n>>> within a block's coinbase scriptSig.\n>>>\n>>> * Votes refer to a byte value, encoded within the pattern \"/BVd+/\"\n>>> Example: /BV8000000/ votes for 8,000,000 byte hardLimit. If there is\n>>> more than one match with with pattern, the first match is counted.\n>>>\n>>\n>> Is there a need for byte resolution?  Using MB resolution would use up\n>> much fewer bytes in the coinbase.\n>>\n>> Even with the +/- 20% rule, miners could vote for the nearest MB.\n>> Once the block size exceeds 5MB, then there is enough resolution\n>> anyway.\n>>\n>> * Absent/invalid votes and votes below minimum cap (1M) are\n>>>\n>>> counted as 1M votes. Votes above the maximum cap (32M) are counted\n>>> as 32M votes.\n>>>\n>>\n>> I think abstains should count for the status quo.  Votes which are out\n>> of range should be clamped.\n>>\n>> Having said that, if core supports the change, then most miners will\n>> probably vote one way or another.\n>>\n>> New hardLimit is the median of the followings:\n>>> min(current hardLimit * 1.2, 20-percentile)\n>>> max(current hardLimit / 1.2, 80-percentile)\n>>> current hardLimit\n>>>\n>>\n>> I think this is unclear, though mathematically exact.\n>>\n>> Sort the votes for the last 12,000 blocks from lowest to highest.\n>>\n>> Blocks which don't have a vote are considered a vote for the status\n>> quo.\n>>\n>> Votes are limited to +/- 20% of the current value.  Votes that are out\n>> of range are considered to vote for the nearest in range value.\n>>\n>> The raise value is defined as the vote for the 2400th highest block\n>> (20th percentile).\n>>\n>> The lower value  is defined as the vote for the 9600th highest block\n>> (80th percentile).\n>>\n>> If the raise value is higher than the status quo, then the new limit\n>> is set to the raise value.\n>>\n>> If the lower value is lower than the status quo, then the new limit is\n>> set to the lower value.\n>>\n>> Otherwise, the size limit is unchanged.\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/6babfaa4/attachment.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-03T17:32:09",
                "message_text_only": "Just use a 4-byte unsigned integer where the integer is the size in\nbytes. It's concise and less complex (and less complex to implement).\nThere's no need for human readable strings here.\n\nOn Thu, Sep 3, 2015 at 5:35 PM, Jeff Garzik via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Take a look at the latest update:\n>\n> - swiped Tier Nolan verbiage, which I agree was usefully more clear\n> - added 'M' suffix and removed 'V' from coinbase scriptSig\n>\n>\n> On Thu, Sep 3, 2015 at 12:32 PM, jl2012 via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> 1. I think there is no need to have resolution at byte level, while\n>> resolution at MB level is not enough. kB would be a better choice.\n>>\n>> 2. In my specification a v4 block without a vote is invalid, so there is\n>> no need to consider absent or invalid votes\n>>\n>> 3. We should allow miners to explicitly vote for the status quo, so they\n>> don't need to change the coinbase vote every time the size is changed. They\n>> may indicate it by /BV/ in the coinbase, and we should look for the first\n>> \"/BVd*/\" instead of \"/BVd+/\"\n>>\n>> 4. Alternatively, miners may vote in different styles: /BV1234567/,\n>> /BV1500K/, /BV3M/. The first one means 1.234567MB, the second one is 1.5MB,\n>> the last one is 3MB. The pattern is \"/BV(\\d+[KM]?)?/\"\n>>\n>> Tier Nolan via bitcoin-dev \u65bc 2015-09-03 07:59 \u5beb\u5230:\n>>>\n>>> On Thu, Sep 3, 2015 at 8:57 AM, jl2012 via bitcoin-dev\n>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>>> *\n>>>>\n>>>> hardLimit floats within the range 1-32M, inclusive.\n>>>\n>>>\n>>> Does the 32MB limit actually still exist anywhere in the code?  In\n>>> effect, it is re-instating a legacy limitation.\n>>>\n>>> The message size limit is to minimize the storage required per peer.\n>>> If a 32MB block size is required, then each network input buffer must\n>>> be at least 32MB. This makes it harder for a node to support a large\n>>> number of peers.\n>>>\n>>> There is no reason why a single message is used for each block.  Using\n>>> the merkleblock message (or a different dedicated message), it would\n>>> be possible to send messages which only contain part of a block and\n>>> have a limited maximum size.\n>>>\n>>> This would allow receiving parts of a block from multiple sources.\n>>>\n>>> This is a separate issue but should be considered if moving past 32MB\n>>> block sizes (or maybe as a later protocol change).\n>>>\n>>>> * Changing hardLimit is accomplished by encoding a proposed value\n>>>> within a block's coinbase scriptSig.\n>>>>\n>>>> * Votes refer to a byte value, encoded within the pattern \"/BVd+/\"\n>>>> Example: /BV8000000/ votes for 8,000,000 byte hardLimit. If there is\n>>>> more than one match with with pattern, the first match is counted.\n>>>\n>>>\n>>> Is there a need for byte resolution?  Using MB resolution would use up\n>>> much fewer bytes in the coinbase.\n>>>\n>>> Even with the +/- 20% rule, miners could vote for the nearest MB.\n>>> Once the block size exceeds 5MB, then there is enough resolution\n>>> anyway.\n>>>\n>>>> * Absent/invalid votes and votes below minimum cap (1M) are\n>>>>\n>>>> counted as 1M votes. Votes above the maximum cap (32M) are counted\n>>>> as 32M votes.\n>>>\n>>>\n>>> I think abstains should count for the status quo.  Votes which are out\n>>> of range should be clamped.\n>>>\n>>> Having said that, if core supports the change, then most miners will\n>>> probably vote one way or another.\n>>>\n>>>> New hardLimit is the median of the followings:\n>>>> min(current hardLimit * 1.2, 20-percentile)\n>>>> max(current hardLimit / 1.2, 80-percentile)\n>>>> current hardLimit\n>>>\n>>>\n>>> I think this is unclear, though mathematically exact.\n>>>\n>>> Sort the votes for the last 12,000 blocks from lowest to highest.\n>>>\n>>> Blocks which don't have a vote are considered a vote for the status\n>>> quo.\n>>>\n>>> Votes are limited to +/- 20% of the current value.  Votes that are out\n>>> of range are considered to vote for the nearest in range value.\n>>>\n>>> The raise value is defined as the vote for the 2400th highest block\n>>> (20th percentile).\n>>>\n>>> The lower value  is defined as the vote for the 9600th highest block\n>>> (80th percentile).\n>>>\n>>> If the raise value is higher than the status quo, then the new limit\n>>> is set to the raise value.\n>>>\n>>> If the lower value is lower than the status quo, then the new limit is\n>>> set to the lower value.\n>>>\n>>> Otherwise, the size limit is unchanged.\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-09-03T17:52:55",
                "message_text_only": "On Thu, Sep 03, 2015 at 06:32:09PM +0100, Btc Drak via bitcoin-dev wrote:\n> Just use a 4-byte unsigned integer where the integer is the size in\n> bytes. It's concise and less complex (and less complex to implement).\n> There's no need for human readable strings here.\n\nSolid NACK on making string parsers part of the consensus critical\ncodebase. (WTF\u203d)\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000c69430beea18c71be1d34114d7e1d4023dd1ffe1d9bc7f0\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/9c4c10ba/attachment.sig>"
            },
            {
                "author": "Andy Chase",
                "date": "2015-09-04T07:53:48",
                "message_text_only": "The 32Mb limit is here:\nhttps://github.com/bitcoin/bitcoin/blob/master/src/serialize.h#L25\n\nIt's to keep the message size small enough that messages can be serialized\nin memory.\n\nJeff if you decide to lift the 32MB limit (you really should, unless your\nplan is to potentially hard force another Blocksize discussion again which\nmight be okay). I suggest having the 32MB ceiling auto-raise according to a\nexponential factor (1.5?) starting 1 year from now.\n\nBasically hard limit ceiling 2016-2017: 32 MB\nHard limit ceiling 2018+: 32*((currentYear-2018)*1.5) MB\n\nThe factor could be 2 like BIP-101 but I imagine you will want to be more\nconservative. The delay time could also be longer if you think it will take\nlonger to fix the message size issue across all implementations.\n\n\nOn Thu, Sep 3, 2015 at 4:59 AM, Tier Nolan via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n>\n> On Thu, Sep 3, 2015 at 8:57 AM, jl2012 via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>>\n>>    1.\n>>\n>>    hardLimit floats within the range 1-32M, inclusive.\n>>\n>>\n>>\n> Does the 32MB limit actually still exist anywhere in the code?  In effect,\n> it is re-instating a legacy limitation.\n>\n> The message size limit is to minimize the storage required per peer.  If a\n> 32MB block size is required, then each network input buffer must be at\n> least 32MB. This makes it harder for a node to support a large number of\n> peers.\n>\n> There is no reason why a single message is used for each block.  Using the\n> merkleblock message (or a different dedicated message), it would be\n> possible to send messages which only contain part of a block and have a\n> limited maximum size.\n>\n> This would allow receiving parts of a block from multiple sources.\n>\n> This is a separate issue but should be considered if moving past 32MB\n> block sizes (or maybe as a later protocol change).\n>\n>\n>>\n>>    1. Changing hardLimit is accomplished by encoding a proposed value\n>>    within a block's coinbase scriptSig.\n>>       1. Votes refer to a byte value, encoded within the pattern\n>>       \"/BV\\d+/\" Example: /BV8000000/ votes for 8,000,000 byte hardLimit. If\n>>       there is more than one match with with pattern, the first match is counted.\n>>\n>> Is there a need for byte resolution?  Using MB resolution would use up\n> much fewer bytes in the coinbase.\n>\n> Even with the +/- 20% rule, miners could vote for the nearest MB.  Once\n> the block size exceeds 5MB, then there is enough resolution anyway.\n>\n>\n>>    1. Absent/invalid votes and votes below minimum cap (1M) are counted\n>>       as 1M votes. Votes above the maximum cap (32M) are counted as 32M votes.\n>>\n>>\n> I think abstains should count for the status quo.  Votes which are out of\n> range should be clamped.\n>\n> Having said that, if core supports the change, then most miners will\n> probably vote one way or another.\n>\n> > New hardLimit is the median of the followings:\n> > min(current hardLimit * 1.2, 20-percentile)\n> > max(current hardLimit / 1.2, 80-percentile)\n> > current hardLimit\n>\n> I think this is unclear, though mathematically exact.\n>\n> Sort the votes for the last 12,000 blocks from lowest to highest.\n>\n> Blocks which don't have a vote are considered a vote for the status quo.\n>\n> Votes are limited to +/- 20% of the current value.  Votes that are out of\n> range are considered to vote for the nearest in range value.\n>\n> The raise value is defined as the vote for the 2400th highest block (20th\n> percentile).\n> The lower value  is defined as the vote for the 9600th highest block (80th\n> percentile).\n>\n> If the raise value is higher than the status quo, then the new limit is\n> set to the raise value.\n> If the lower value is lower than the status quo, then the new limit is set\n> to the lower value.\n> Otherwise, the size limit is unchanged.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/7a2ee899/attachment.html>"
            },
            {
                "author": "Simon Liu",
                "date": "2015-09-04T15:37:33",
                "message_text_only": "Maybe grab some code from BIP101 ?  It permits block messages > 2MB,\nwhile retaining the current limit of 2 MB imposed on other network\nmessages.  The 32 MB limit was patched a few months ago.\n\nLinks to code:\n\nhttps://www.reddit.com/r/bitcoinxt/comments/3in5mm/psa_correction_to_btcchina_letter_which_states/\n\n\n\nOn 09/04/2015 12:53 AM, Andy Chase via bitcoin-dev wrote:\n> The 32Mb limit is\n> here: https://github.com/bitcoin/bitcoin/blob/master/src/serialize.h#L25\n> \n> It's to keep the message size small enough that messages can be\n> serialized in memory.\n> \n> Jeff if you decide to lift the 32MB limit (you really should, unless\n> your plan is to potentially hard force another Blocksize discussion\n> again which might be okay). I suggest having the 32MB ceiling auto-raise\n> according to a exponential factor (1.5?) starting 1 year from now.\n> \n> Basically hard limit ceiling 2016-2017: 32 MB\n> Hard limit ceiling 2018+: 32*((currentYear-2018)*1.5) MB\n> \n> The factor could be 2 like BIP-101 but I imagine you will want to be\n> more conservative. The delay time could also be longer if you think it\n> will take longer to fix the message size issue across all implementations.\n>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-04T15:40:26",
                "message_text_only": "If you read between the lines of what was recently changed and why\n(reducing to 2MB), it seems reasonable to assume BIP101's allowance\nopens up some of the attack vector again.\n\nOn Fri, Sep 4, 2015 at 4:37 PM, Simon Liu via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Maybe grab some code from BIP101 ?  It permits block messages > 2MB,\n> while retaining the current limit of 2 MB imposed on other network\n> messages.  The 32 MB limit was patched a few months ago.\n>\n> Links to code:\n>\n> https://www.reddit.com/r/bitcoinxt/comments/3in5mm/psa_correction_to_btcchina_letter_which_states/\n>\n>\n>\n> On 09/04/2015 12:53 AM, Andy Chase via bitcoin-dev wrote:\n>> The 32Mb limit is\n>> here: https://github.com/bitcoin/bitcoin/blob/master/src/serialize.h#L25\n>>\n>> It's to keep the message size small enough that messages can be\n>> serialized in memory.\n>>\n>> Jeff if you decide to lift the 32MB limit (you really should, unless\n>> your plan is to potentially hard force another Blocksize discussion\n>> again which might be okay). I suggest having the 32MB ceiling auto-raise\n>> according to a exponential factor (1.5?) starting 1 year from now.\n>>\n>> Basically hard limit ceiling 2016-2017: 32 MB\n>> Hard limit ceiling 2018+: 32*((currentYear-2018)*1.5) MB\n>>\n>> The factor could be 2 like BIP-101 but I imagine you will want to be\n>> more conservative. The delay time could also be longer if you think it\n>> will take longer to fix the message size issue across all implementations.\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-09-03T14:35:56",
                "message_text_only": "Thanks - several good suggestions, including some in common.  Will comment\n& revise today.\n\nCurrently in \"collecting\" mode, to avoid duplicative comments in multiple\nlocales.\n\n\n\nOn Thu, Sep 3, 2015 at 3:57 AM, <jl2012 at xbt.hk> wrote:\n\n> Some comments:\n>\n>\n>    - The 75% rule is meaningless here. Since this is a pure relaxation of\n>    rules, there is no such thing as \"invalid version 4 blocks\"\n>\n>\n>    -\n>\n>    The implication threshold is unclear. Is it 95% or 80%?\n>\n>    - Softfork requires a very high threshold (95%) to \"attack\" the\n>       original fork. This makes sure that unupgraded client will only see the new\n>       fork.\n>       - In the case of hardfork, however, the new fork is unable to\n>       attack the original fork, and unupgraded client will never see the new\n>       fork. The initiation of a hardfork should be based on its acceptance by the\n>       economic majority, not miner support. 95% is an overkill and may probably\n>       never accomplished. I strongly prefer a 80% threshold rather than 95%.\n>\n>\n>    - As I've pointed out, using 20-percentile rather than median creates\n>    an incentive to 51% attack the uncooperative minority.\n>    https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010690.html\n>\n> Having said that, I don't have a strong feeling about the use of\n> 20-percentile as threshold to increase the block size. That means the block\n> size is increased only when most miners agree, which sounds ok to me.\n>\n> However, using 20-percentile as threshold to DECREASE the block size could\n> be very dangerous. Consider that the block size has been stable at 8MB for\n> a few years. Everyone are happy with that. An attacker would just need to\n> acquire 21% of mining power to break the status quo and send us all the way\n> to 1MB. The only way to stop such attempt is to 51% attack the attacker.\n> That'd be really ugly.\n>\n> For technical and ethical reasons, I believe the thresholds for increase\n> and decrease must be symmetrical: increase the block size when the\n> x-percentile is bigger than the current size, decrease the block size when\n> the (100-x)-percentile is smaller than the current size. The overall effect\n> is: the block size remains unchanged unless 80% of miners agree to.\n>\n>    - Please consider the use of \"hardfork bit\" to signify the hardfork:\n>\n>\n> https://www.reddit.com/r/bitcoin_devlist/comments/3ekhg2/bip_draft_hardfork_bit_jl2012_at_xbthk_jul_23_2015/\n>\n> https://github.com/jl2012/bips/blob/master/hardforkbit.mediawiki\n>\n>    - Or, alternatively, please combine the hardfork with a softfork. I'm\n>    rewriting the specification as follow (changes underlined):\n>\n>\n>    1. Replace static 1M block size hard limit with a floating limit\n>    (\"hardLimit\").\n>    2.\n>\n>    hardLimit floats within the range 1-32M, inclusive.\n>\n>    3.\n>\n>    Initial value of hardLimit is 1M, preserving current system.\n>\n>    4. Changing hardLimit is accomplished by encoding a proposed value\n>    within a block's coinbase scriptSig.\n>       1. Votes refer to a byte value, encoded within the pattern\n>       \"/BV\\d+/\" Example: /BV8000000/ votes for 8,000,000 byte hardLimit. If\n>       there is more than one match with with pattern, the first match is counted.\n>       2. Absent/invalid votes and votes below minimum cap (1M) are\n>       counted as 1M votes. Votes above the maximum cap (32M) are counted as 32M\n>       votes.\n>       3. A new hardLimit is calculated at each difficult adjustment\n>       period (2016 blocks), and applies to the next 2016 blocks.\n>       4. Calculate hardLimit by examining the coinbase scriptSig votes of\n>       the previous 12,000 blocks, and taking the 20th percentile and 80th\n>       percentile.\n>       5. New hardLimit is the median of the followings:\n>          1. min(current hardLimit * 1.2, 20-percentile)\n>          2. max(current hardLimit / 1.2, 80-percentile)\n>          3. current hardLimit\n>       5. version 4 block: the coinbase of a version 4 block must match\n>    this pattern: \"/BV\\d+/\"\n>    6. 70% rule: If 8,400 of the last 12,000 blocks are version 4 or\n>    greater, reject invalid version 4 blocks. (testnet4: 501 of last 1000)\n>    7. 80% rule (\"Point of no return\"): If 9,600 of the last 12,000 blocks\n>    are version 4 or greater, reject all version <= 3 blocks. (testnet4: 750 of\n>    last 1000)\n>    8. Block version number is calculated after masking out high 16 bits\n>    (final bit count TBD by versionBits outcome).\n>\n> Jeff Garzik via bitcoin-dev \u65bc 2015-09-02 23:33 \u5beb\u5230:\n> > BIP 100 initial public draft:\n> > https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki [1]\n> >\n> > Emphasis on \"initial\"  This is a starting point for the usual open\n> > source feedback/iteration cycle, not an endpoint that Must Be This\n> > Way.\n> >\n> >\n> >\n> > Links:\n> > ------\n> > [1] https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/2be39ef3/attachment.html>"
            },
            {
                "author": "Simon Liu",
                "date": "2015-09-03T19:40:54",
                "message_text_only": "Hi Jeff,\n\nThoughts on this part of the proposal:\n\n\"Absent/invalid votes are counted as votes for the current hardLimit.\nOut of range votes are counted as the nearest in-range value.\"\n\n1. Why should an absent vote be considered a vote for the status quo?  A\nnon-voter should have zero impact on the result.\n\n2. Why should out of range votes be counted?  They're an invalid vote, a\nspoiled ballot as such, and thus it would be better if they were discarded.\n\nRegards,\nSimon\n\n\nOn 09/02/2015 08:33 PM, Jeff Garzik via bitcoin-dev wrote:\n> BIP 100 initial public\n> draft: https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki\n> \n> Emphasis on \"initial\"  This is a starting point for the usual open\n> source feedback/iteration cycle, not an endpoint that Must Be This Way.\n> \n> \n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Oliver Petruzel",
                "date": "2015-09-03T20:15:58",
                "message_text_only": "I agree with Simon's sentiments for question #1, and was actually going to\npose the same question. Non-votes seem like they may poison the well\nmathematically, and counting them anyway seems to encourage a lack of\nparticipation at a time when miners really need to be very much involved.\nSince we're handing them even more control over the ecosystem with this\nBIP, it would be nice to ensure they (all miners) seriously consider their\nimpact and role on a regular basis.\n\nI'm curious why we couldn't/shouldn't simply drop the non-votes. (There may\nbe a great reason that I can't think of, but it's eluding me... LOL)\n\nThat said, I don't see any issue with counting votes from outside of the\nrange as the maximum/minimum accordingly (Simon's question #2). In fact,\nsuch votes would be very interesting (worthy of further discussion) if they\nbegin to lean heavily in either direction.\n\nV/r,\nOliver\nOn Sep 3, 2015 3:41 PM, \"Simon Liu via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi Jeff,\n>\n> Thoughts on this part of the proposal:\n>\n> \"Absent/invalid votes are counted as votes for the current hardLimit.\n> Out of range votes are counted as the nearest in-range value.\"\n>\n> 1. Why should an absent vote be considered a vote for the status quo?  A\n> non-voter should have zero impact on the result.\n>\n> 2. Why should out of range votes be counted?  They're an invalid vote, a\n> spoiled ballot as such, and thus it would be better if they were discarded.\n>\n> Regards,\n> Simon\n>\n>\n> On 09/02/2015 08:33 PM, Jeff Garzik via bitcoin-dev wrote:\n> > BIP 100 initial public\n> > draft: https://github.com/jgarzik/bip100/blob/master/bip-0100.mediawiki\n> >\n> > Emphasis on \"initial\"  This is a starting point for the usual open\n> > source feedback/iteration cycle, not an endpoint that Must Be This Way.\n> >\n> >\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/1ab14fff/attachment.html>"
            },
            {
                "author": "Dave Scotese",
                "date": "2015-09-03T20:34:54",
                "message_text_only": "I have seen \"1M\" mean 1,000,000 bytes as well as 1,048,576bytes and\n1,024,000 bytes.  I believe the best policy is to use \"megabyte\" to mean\n2^20 (1,048,576) bytes.  Kb always means 1024 bytes, even when a lot people\nround it, so I like the K spec best.  I also see value in having human\nreadable data.  The spec should nail down these details.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/0a8d6507/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-09-04T03:50:45",
                "message_text_only": "On Thu, Sep 03, 2015 at 01:34:54PM -0700, Dave Scotese via bitcoin-dev wrote:\n> I have seen \"1M\" mean 1,000,000 bytes as well as 1,048,576bytes and\n> 1,024,000 bytes.  I believe the best policy is to use \"megabyte\" to mean\n> 2^20 (1,048,576) bytes.  Kb always means 1024 bytes, even when a lot people\n> round it, so I like the K spec best.  I also see value in having human\n> readable data.  The spec should nail down these details.\n\nThe IEC standard is to use the prefix MiB for 2^20 bytes:\n\nhttps://en.wikipedia.org/wiki/Binary_prefix\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000010f9e95aff6454fedb9d0a4b92a4108e9449c507936f9f18\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/8dd12b93/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "BIP 100 specification",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeff Garzik",
                "Andy Chase",
                "Peter Todd",
                "Dave Scotese",
                "Tier Nolan",
                "Simon Liu",
                "Jorge Tim\u00f3n",
                "Btc Drak",
                "jl2012 at xbt.hk",
                "Oliver Petruzel"
            ],
            "messages_count": 20,
            "total_messages_chars_count": 61147
        }
    },
    {
        "title": "[bitcoin-dev] block size - pay with difficulty",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2015-09-03T04:05:11",
                "message_text_only": "Schemes proposing to pay with difficulty / hashpower to change block size\nshould be avoided.  The miners incentive has always been fairly\nstraightforward - it is rational to deploy new hashpower as soon as you can\nget it online.  Introducing the concepts of (a) requiring out-of-band\ncollusion to change block size and/or (b) requiring miners to have idle\nhashpower on hand to change block size are both unrealistic and potentially\ncorrosive.  That potentially makes the block size - and therefore fee\nmarket - too close, too sensitive to the wild vagaries of the mining chip\nmarket.\n\nPay-to-future-miner has neutral, forward looking incentives worth\nresearching.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/c3b89058/attachment.html>"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-09-03T04:55:35",
                "message_text_only": "Jeff Garzik via bitcoin-dev \u65bc 2015-09-03 00:05 \u5beb\u5230:\n> Schemes proposing to pay with difficulty / hashpower to change block\n> size should be avoided.  The miners incentive has always been fairly\n> straightforward - it is rational to deploy new hashpower as soon as\n> you can get it online.  Introducing the concepts of (a) requiring\n> out-of-band collusion to change block size and/or (b) requiring miners\n> to have idle hashpower on hand to change block size are both\n> unrealistic and potentially corrosive.  That potentially makes the\n> block size - and therefore fee market - too close, too sensitive to\n> the wild vagaries of the mining chip market.\n> \n> Pay-to-future-miner has neutral, forward looking incentives worth\n> researching.\n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\nRef: \nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010723.html\n\nI explained here why pay with difficulty is bad for everyone: miners and \nusers, and described the use of OP_CLTV for pay-to-future-miner\n\nHowever, a general problem of pay-to-increase-block-size scheme is it \nindirectly sets a minimal tx fee, which could be difficult and \narbitrary, and is against competition"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-09-03T14:18:56",
                "message_text_only": "Thanks for the link.  I readily admit only having given pay-to-future-miner\na little bit of thought.  Not convinced it sets a minimal tx fee in all\ncases.\n\n\nOn Thu, Sep 3, 2015 at 12:55 AM, <jl2012 at xbt.hk> wrote:\n\n> Jeff Garzik via bitcoin-dev \u65bc 2015-09-03 00:05 \u5beb\u5230:\n>\n>> Schemes proposing to pay with difficulty / hashpower to change block\n>> size should be avoided.  The miners incentive has always been fairly\n>> straightforward - it is rational to deploy new hashpower as soon as\n>> you can get it online.  Introducing the concepts of (a) requiring\n>> out-of-band collusion to change block size and/or (b) requiring miners\n>> to have idle hashpower on hand to change block size are both\n>> unrealistic and potentially corrosive.  That potentially makes the\n>> block size - and therefore fee market - too close, too sensitive to\n>> the wild vagaries of the mining chip market.\n>>\n>> Pay-to-future-miner has neutral, forward looking incentives worth\n>> researching.\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n> Ref:\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010723.html\n>\n> I explained here why pay with difficulty is bad for everyone: miners and\n> users, and described the use of OP_CLTV for pay-to-future-miner\n>\n> However, a general problem of pay-to-increase-block-size scheme is it\n> indirectly sets a minimal tx fee, which could be difficult and arbitrary,\n> and is against competition\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/28c494e3/attachment.html>"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-09-03T18:24:26",
                "message_text_only": "Assuming that:\n1. The current block size is 1MB\n2. The block reward for a full block is 25.5BTC including tx fee\n3. Miner is required to pay x% of reward penalty if he is trying to \nincrease the size of the next block by x%\n\nIf a miner wants to increase the block size by 1 byte, the block size \nhas to increase by 0.0001%, and the penalty will be 0.0000255BTC/byte. \nFor a typical 230byte tx that'd be 0.005865BTC, or 1.35USD at current \nrate. This is the effective minimum tx fee.\n\n\n\nJeff Garzik \u65bc 2015-09-03 10:18 \u5beb\u5230:\n> Thanks for the link.  I readily admit only having given\n> pay-to-future-miner a little bit of thought.  Not convinced it sets a\n> minimal tx fee in all cases.\n> \n> On Thu, Sep 3, 2015 at 12:55 AM, <jl2012 at xbt.hk> wrote:\n> \n>> Jeff Garzik via bitcoin-dev \u65bc 2015-09-03 00:05 \u5beb\u5230:\n>> \n>>> Schemes proposing to pay with difficulty / hashpower to change\n>>> block\n>>> size should be avoided. The miners incentive has always been\n>>> fairly\n>>> straightforward - it is rational to deploy new hashpower as soon\n>>> as\n>>> you can get it online. Introducing the concepts of (a) requiring\n>>> out-of-band collusion to change block size and/or (b) requiring\n>>> miners\n>>> to have idle hashpower on hand to change block size are both\n>>> unrealistic and potentially corrosive. That potentially makes\n>>> the\n>>> block size - and therefore fee market - too close, too sensitive\n>>> to\n>>> the wild vagaries of the mining chip market.\n>>> \n>>> Pay-to-future-miner has neutral, forward looking incentives worth\n>>> researching.\n>>> \n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>> [1]\n>> \n>> Ref:\n>> \n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010723.html\n>> [2]\n>> \n>> I explained here why pay with difficulty is bad for everyone:\n>> miners and users, and described the use of OP_CLTV for\n>> pay-to-future-miner\n>> \n>> However, a general problem of pay-to-increase-block-size scheme is\n>> it indirectly sets a minimal tx fee, which could be difficult and\n>> arbitrary, and is against competition\n> \n> \n> \n> Links:\n> ------\n> [1] https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> [2]\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010723.html"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-09-03T06:57:44",
                "message_text_only": "On Thu, Sep 3, 2015 at 4:05 AM, Jeff Garzik via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> (b) requiring miners to have idle\n> hashpower on hand to change block size are both unrealistic and potentially\n\nI really cannot figure out how you could characterize pay with\ndifficty has in any way involving idle hashpower.\n\nCan you walk me through this?"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-09-03T14:31:31",
                "message_text_only": "It's written as 'a' and/or 'b'.  If you don't have idle hashpower, then\npaying with difficulty requires some amount of collusion ('a')\n\nAny miner paying with a higher difficulty either needs idle hashpower, or\nself-increase their own difficulty at the possible *opportunity cost* of\nlosing an entire block's income to another miner who doesn't care about\nchanging the block size.  The potential loss does not economically\ncompensate for size increase gains in most cases, when you consider the\nvariability of blocks (they come in bursts and pauses) and the fee income\nthat would be associated.\n\nMiners have more to lose paying with diff than they gain -- unless the\nentire network colludes out-of-band with ~90% certainty, by collectively\nagreeing to increase the block period by collectively agreeing with\npay-with-diff until the globally desired block size is reached.  At that\nlevel of collusion, we can create far more simple schemes to increase block\nsize.\n\nPay-with-diff will either not get used, or lead to radical short term block\nsize (and thus fee) volatility.  It is complex & difficult for all players\nto reason, and a Rational game theory choice can be to avoid\npaying-for-diff even when the network desperately needs an upgrade.\n\n\n\n\n\n\nOn Thu, Sep 3, 2015 at 2:57 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Thu, Sep 3, 2015 at 4:05 AM, Jeff Garzik via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > (b) requiring miners to have idle\n> > hashpower on hand to change block size are both unrealistic and\n> potentially\n>\n> I really cannot figure out how you could characterize pay with\n> difficty has in any way involving idle hashpower.\n>\n> Can you walk me through this?\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/78c0bac7/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-09-03T14:40:37",
                "message_text_only": "Expanding on pay-with-diff and volatility (closing comment),\n\nUsers and miners will have significant difficulty creating and/or\npredicting a stable block size (and fee environment) with pay-with-diff\nacross the months.  The ability of businesses to plan is low.  Chaos and\nunpredictability are bad in general for markets and systems.  Thus the\nbinary conclusion of \"not get used\" or \"volatility\"\n\n\n\n\n\n\nOn Thu, Sep 3, 2015 at 10:31 AM, Jeff Garzik <jgarzik at gmail.com> wrote:\n\n> It's written as 'a' and/or 'b'.  If you don't have idle hashpower, then\n> paying with difficulty requires some amount of collusion ('a')\n>\n> Any miner paying with a higher difficulty either needs idle hashpower, or\n> self-increase their own difficulty at the possible *opportunity cost* of\n> losing an entire block's income to another miner who doesn't care about\n> changing the block size.  The potential loss does not economically\n> compensate for size increase gains in most cases, when you consider the\n> variability of blocks (they come in bursts and pauses) and the fee income\n> that would be associated.\n>\n> Miners have more to lose paying with diff than they gain -- unless the\n> entire network colludes out-of-band with ~90% certainty, by collectively\n> agreeing to increase the block period by collectively agreeing with\n> pay-with-diff until the globally desired block size is reached.  At that\n> level of collusion, we can create far more simple schemes to increase block\n> size.\n>\n> Pay-with-diff will either not get used, or lead to radical short term\n> block size (and thus fee) volatility.  It is complex & difficult for all\n> players to reason, and a Rational game theory choice can be to avoid\n> paying-for-diff even when the network desperately needs an upgrade.\n>\n>\n>\n>\n>\n>\n> On Thu, Sep 3, 2015 at 2:57 AM, Gregory Maxwell <gmaxwell at gmail.com>\n> wrote:\n>\n>> On Thu, Sep 3, 2015 at 4:05 AM, Jeff Garzik via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > (b) requiring miners to have idle\n>> > hashpower on hand to change block size are both unrealistic and\n>> potentially\n>>\n>> I really cannot figure out how you could characterize pay with\n>> difficty has in any way involving idle hashpower.\n>>\n>> Can you walk me through this?\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/1b1284e9/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-09-03T17:57:48",
                "message_text_only": "On Thu, Sep 3, 2015 at 2:40 PM, Jeff Garzik <jgarzik at gmail.com> wrote:\n> Expanding on pay-with-diff and volatility (closing comment),\n>\n> Users and miners will have significant difficulty creating and/or predicting\n> a stable block size (and fee environment) with pay-with-diff across the\n> months.  The ability of businesses to plan is low.  Chaos and\n> unpredictability are bad in general for markets and systems.  Thus the\n> binary conclusion of \"not get used\" or \"volatility\"\n\nSorry, I'm still not following.  I agree that predictability is important.\n\nI don't follow where unpredictability is coming from here. Most (all?)\nof the difficulty based adjustments had small limits on the difficulty\nchange that wouldn't have substantially changed the interblock times\nrelative to orphaning.\n\n> It's written as 'a' and/or 'b'.  If you don't have idle hashpower, then paying with difficulty requires some amount of collusion ('a')\n> Any miner paying with a higher difficulty either needs idle hashpower, or self-increase their own difficulty at the possible opportunity cost of losing an entire block's income to another miner who doesn't care about changing the block size.  The potential loss does not economically compensate for size increase gains in most cases, when you consider the variability of blocks (they come in bursts and pauses) and the fee income that would be associated\n\nWhat the schemes propose is blocksize that increases fast with\ndifficulty over a narrow window. The result is that your odds of\nproducing a block are slightly reduced but the block you produce if\nyou do is more profitable: but only if there is a good supply of\ntransactions which pay real fees compariable to the ones you're\nalready taking.  The same trade-off exists at the moment with respect\nto orphaning risk and miners still produce large blocks, producing a\nlarger block means a greater chance you're not successful (due to\norphaning) but you have a greater utility.  The orphing mediated risk\nis fragile and can be traded off for centeralization advantage or by\nminers bypassing validation, issues which at least so far we have no\nreason to believe exist for size mediated schemes.\n\nAs you know, mining is not a race (ignoring edge effects with\norphaning/propagation time). Increasing difficulty does not put you at\nan expected return disavantage compared to other miners so long as the\nincome increases at least proportionally (otherwise pooling with low\ndiff shares would be an astronomically losing proposition :)!).\n\nPay-for-size schemes have been successfully used in some altcoins\nwithout the effects you're suggesting."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-03T18:23:45",
                "message_text_only": "Greg, I believe Jeff is focusing on BtcDrak's proposal (\nhttps://gist.github.com/btcdrak/1c3a323100a912b605b5 ) where the\nincreased nBits are used to vote for the block size to raise\npermanently ( or until it gets voted down).\nHis arguments don't seem to apply to your original proposal (where the\nsize is only increased for that block).\n\n\nOn Thu, Sep 3, 2015 at 7:57 PM, Gregory Maxwell via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Thu, Sep 3, 2015 at 2:40 PM, Jeff Garzik <jgarzik at gmail.com> wrote:\n>> Expanding on pay-with-diff and volatility (closing comment),\n>>\n>> Users and miners will have significant difficulty creating and/or predicting\n>> a stable block size (and fee environment) with pay-with-diff across the\n>> months.  The ability of businesses to plan is low.  Chaos and\n>> unpredictability are bad in general for markets and systems.  Thus the\n>> binary conclusion of \"not get used\" or \"volatility\"\n>\n> Sorry, I'm still not following.  I agree that predictability is important.\n>\n> I don't follow where unpredictability is coming from here. Most (all?)\n> of the difficulty based adjustments had small limits on the difficulty\n> change that wouldn't have substantially changed the interblock times\n> relative to orphaning.\n>\n>> It's written as 'a' and/or 'b'.  If you don't have idle hashpower, then paying with difficulty requires some amount of collusion ('a')\n>> Any miner paying with a higher difficulty either needs idle hashpower, or self-increase their own difficulty at the possible opportunity cost of losing an entire block's income to another miner who doesn't care about changing the block size.  The potential loss does not economically compensate for size increase gains in most cases, when you consider the variability of blocks (they come in bursts and pauses) and the fee income that would be associated\n>\n> What the schemes propose is blocksize that increases fast with\n> difficulty over a narrow window. The result is that your odds of\n> producing a block are slightly reduced but the block you produce if\n> you do is more profitable: but only if there is a good supply of\n> transactions which pay real fees compariable to the ones you're\n> already taking.  The same trade-off exists at the moment with respect\n> to orphaning risk and miners still produce large blocks, producing a\n> larger block means a greater chance you're not successful (due to\n> orphaning) but you have a greater utility.  The orphing mediated risk\n> is fragile and can be traded off for centeralization advantage or by\n> miners bypassing validation, issues which at least so far we have no\n> reason to believe exist for size mediated schemes.\n>\n> As you know, mining is not a race (ignoring edge effects with\n> orphaning/propagation time). Increasing difficulty does not put you at\n> an expected return disavantage compared to other miners so long as the\n> income increases at least proportionally (otherwise pooling with low\n> diff shares would be an astronomically losing proposition :)!).\n>\n> Pay-for-size schemes have been successfully used in some altcoins\n> without the effects you're suggesting.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-03T18:28:52",
                "message_text_only": "Maybe Jeff can clarify but my communications with him seemed to imply\nhe didn't think any kind of difficulty penalty scheme is workable. I\nstrongly dispute that assertion.\n\nOn Thu, Sep 3, 2015 at 7:23 PM, Jorge Tim\u00f3n\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Greg, I believe Jeff is focusing on BtcDrak's proposal (\n> https://gist.github.com/btcdrak/1c3a323100a912b605b5 ) where the\n> increased nBits are used to vote for the block size to raise\n> permanently ( or until it gets voted down).\n> His arguments don't seem to apply to your original proposal (where the\n> size is only increased for that block).\n>\n>\n> On Thu, Sep 3, 2015 at 7:57 PM, Gregory Maxwell via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> On Thu, Sep 3, 2015 at 2:40 PM, Jeff Garzik <jgarzik at gmail.com> wrote:\n>>> Expanding on pay-with-diff and volatility (closing comment),\n>>>\n>>> Users and miners will have significant difficulty creating and/or predicting\n>>> a stable block size (and fee environment) with pay-with-diff across the\n>>> months.  The ability of businesses to plan is low.  Chaos and\n>>> unpredictability are bad in general for markets and systems.  Thus the\n>>> binary conclusion of \"not get used\" or \"volatility\"\n>>\n>> Sorry, I'm still not following.  I agree that predictability is important.\n>>\n>> I don't follow where unpredictability is coming from here. Most (all?)\n>> of the difficulty based adjustments had small limits on the difficulty\n>> change that wouldn't have substantially changed the interblock times\n>> relative to orphaning.\n>>\n>>> It's written as 'a' and/or 'b'.  If you don't have idle hashpower, then paying with difficulty requires some amount of collusion ('a')\n>>> Any miner paying with a higher difficulty either needs idle hashpower, or self-increase their own difficulty at the possible opportunity cost of losing an entire block's income to another miner who doesn't care about changing the block size.  The potential loss does not economically compensate for size increase gains in most cases, when you consider the variability of blocks (they come in bursts and pauses) and the fee income that would be associated\n>>\n>> What the schemes propose is blocksize that increases fast with\n>> difficulty over a narrow window. The result is that your odds of\n>> producing a block are slightly reduced but the block you produce if\n>> you do is more profitable: but only if there is a good supply of\n>> transactions which pay real fees compariable to the ones you're\n>> already taking.  The same trade-off exists at the moment with respect\n>> to orphaning risk and miners still produce large blocks, producing a\n>> larger block means a greater chance you're not successful (due to\n>> orphaning) but you have a greater utility.  The orphing mediated risk\n>> is fragile and can be traded off for centeralization advantage or by\n>> miners bypassing validation, issues which at least so far we have no\n>> reason to believe exist for size mediated schemes.\n>>\n>> As you know, mining is not a race (ignoring edge effects with\n>> orphaning/propagation time). Increasing difficulty does not put you at\n>> an expected return disavantage compared to other miners so long as the\n>> income increases at least proportionally (otherwise pooling with low\n>> diff shares would be an astronomically losing proposition :)!).\n>>\n>> Pay-for-size schemes have been successfully used in some altcoins\n>> without the effects you're suggesting.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-09-03T19:17:07",
                "message_text_only": "On Thu, Sep 3, 2015 at 6:23 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> Greg, I believe Jeff is focusing on BtcDrak's proposal (\n> https://gist.github.com/btcdrak/1c3a323100a912b605b5 ) where the\n> increased nBits are used to vote for the block size to raise\n> permanently ( or until it gets voted down).\n> His arguments don't seem to apply to your original proposal (where the\n> size is only increased for that block).\n\nAh, that would clarify things for me me.\n\nPlease everyone try to speak specifically enough to catch details like that."
            },
            {
                "author": "Tom Harding",
                "date": "2015-09-03T18:23:11",
                "message_text_only": "On 9/2/2015 9:05 PM, Jeff Garzik via bitcoin-dev wrote:\n> Schemes proposing to pay with difficulty / hashpower to change block \n> size should be avoided.  The miners incentive has always been fairly \n> straightforward - it is rational to deploy new hashpower as soon as \n> you can get it online.  Introducing the concepts of (a) requiring \n> out-of-band collusion to change block size and/or (b) requiring miners \n> to have idle hashpower on hand to change block size are both \n> unrealistic and potentially corrosive.  That potentially makes the \n> block size - and therefore fee market - too close, too sensitive to \n> the wild vagaries of the mining chip market.\n>\n> Pay-to-future-miner has neutral, forward looking incentives worth \n> researching.\n>\n\nAnother market dependency is even more direct.\n\nBlocksize that can be bought with either difficulty or bitcoin has \nincentives whose strength (though not direction) is subject to the \nexchange rate.  Hence those incentives are subject to the whims of fiat \nholders, who can push the exchange rate around."
            }
        ],
        "thread_summary": {
            "title": "block size - pay with difficulty",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeff Garzik",
                "Jorge Tim\u00f3n",
                "Gregory Maxwell",
                "Btc Drak",
                "jl2012 at xbt.hk",
                "Tom Harding"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 22415
        }
    },
    {
        "title": "[bitcoin-dev] Adhoc Bitcoin Network",
        "thread_messages": [
            {
                "author": "jimsmit at Safe-mail.net",
                "date": "2015-09-03T20:16:03",
                "message_text_only": "Hi,\n\nIs there a feature in Bitcoin that supports adhoc networks, that merge their work into the main Blockchain at some point?\n\n\nThanks,\nJim"
            }
        ],
        "thread_summary": {
            "title": "Adhoc Bitcoin Network",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "jimsmit at Safe-mail.net"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 140
        }
    },
    {
        "title": "[bitcoin-dev] Proposed minor change to BIP 01 to use a PR for request assignment",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2015-09-03T23:18:08",
                "message_text_only": "The process in BIP01 was written when we used a different solution for\nstoring and presenting BIPs.\n\nI'm thinking of suggesting that the number request process be changed\nto opening a pull req with BIP text with no number (e.g. just using\nthe authors name and an index as the number) as the mechenism to\nrequest number assignment.\n\nIs there any reason that anyone would find this objectionable?\n\n(Please do not respond to this message with anything but a strictly\ndirected answer to that question, start a new thread for a different\nsubject. Thanks!)"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-03T23:45:13",
                "message_text_only": "It's a good idea. It would remove friction from the process and\nassignment is auditable to boot, something I've had difficulty with in\nthe past. Almost every time I see a BIP number I would wonder, is that\nself-assigned (and thus invalid) or has it been assigned by the BIP\neditor.\n\nOn Fri, Sep 4, 2015 at 12:18 AM, Gregory Maxwell via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> The process in BIP01 was written when we used a different solution for\n> storing and presenting BIPs.\n>\n> I'm thinking of suggesting that the number request process be changed\n> to opening a pull req with BIP text with no number (e.g. just using\n> the authors name and an index as the number) as the mechenism to\n> request number assignment.\n>\n> Is there any reason that anyone would find this objectionable?\n>\n> (Please do not respond to this message with anything but a strictly\n> directed answer to that question, start a new thread for a different\n> subject. Thanks!)\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Marco Pontello",
                "date": "2015-09-04T00:17:47",
                "message_text_only": "None that I can see.\nIn fact I was just about to ask for some details about this part of the\nprocess, so this come just at the right time.\n\nOn Fri, Sep 4, 2015 at 1:18 AM, Gregory Maxwell via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> The process in BIP01 was written when we used a different solution for\n> storing and presenting BIPs.\n>\n> I'm thinking of suggesting that the number request process be changed\n> to opening a pull req with BIP text with no number (e.g. just using\n> the authors name and an index as the number) as the mechenism to\n> request number assignment.\n>\n> Is there any reason that anyone would find this objectionable?\n>\n> (Please do not respond to this message with anything but a strictly\n> directed answer to that question, start a new thread for a different\n> subject. Thanks!)\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n\n-- \nTry the Online TrID File Identifier\nhttp://mark0.net/onlinetrid.aspx\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/ba32510a/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-09-04T00:24:18",
                "message_text_only": "On Fri, Sep 4, 2015 at 12:17 AM, Marco Pontello <marcopon at gmail.com> wrote:\n> None that I can see.\n> In fact I was just about to ask for some details about this part of the\n> process, so this come just at the right time.\n\nWe used to have a WIKI page for all the BIP stuff and that worked\nbetter IMO, the use of git(hub) for it was a step forward in a number\nof ways but made the number assignment part an odd duck. We should\nhave fixed it then, but it wasn't obvious (enough) that it needed\nfixing at the time. Live and learn."
            },
            {
                "author": "Peter Todd",
                "date": "2015-09-04T15:24:42",
                "message_text_only": "On Thu, Sep 03, 2015 at 11:18:08PM +0000, Gregory Maxwell via bitcoin-dev wrote:\n> The process in BIP01 was written when we used a different solution for\n> storing and presenting BIPs.\n> \n> I'm thinking of suggesting that the number request process be changed\n> to opening a pull req with BIP text with no number (e.g. just using\n> the authors name and an index as the number) as the mechenism to\n> request number assignment.\n> \n> Is there any reason that anyone would find this objectionable?\n> \n> (Please do not respond to this message with anything but a strictly\n> directed answer to that question, start a new thread for a different\n> subject. Thanks!)\n\nACK\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000010f9e95aff6454fedb9d0a4b92a4108e9449c507936f9f18\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/fdf04575/attachment.sig>"
            },
            {
                "author": "Douglas Roark",
                "date": "2015-09-04T15:33:21",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK\n\n- -- \n- ---\nDouglas Roark\nSenior Developer\nArmory Technologies, Inc.\ndoug at bitcoinarmory.com\nPGP key ID: 92ADC0D7\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2\nComment: GPGTools - https://gpgtools.org\n\niQIcBAEBCgAGBQJV6bnBAAoJEGybVGGSrcDXoDAQAJyfypOpGjTQZFR4BAbJzOJ0\nvbHv2QjBcf8/FJ7BxLyZYyIzwBBfYyacm69fETKgo2JyzfhFb3KsF7M0lsggBKRT\nR5DFr6GRDXTC1p7L7II3U6oGRQ3yHbxvMyep/6CyJYGaEfdnlTinxYsb4WlFIiPh\nZMr9CH+hLHUb4s3Re5/Wl6RNz83ZNeJSAO5o2Iv/2+GCF3Iyh8UfADzDrnMOuWKE\n6URhNVvCHvsxYgS/00QN8MW2Dn3txCrUEag10hJ59wlkWRDA26wHosB3m5w/arbO\n3OzAkthrkImTYTCusX+Mcitvldc8J88YQD4kNOJvc472j0TTaksl/ubAvDUx1hon\naHdQqb/6A+kxhsvHox0BmUmoqDiAGsVPVJinCDVG8QRUDMVbVIhRgPLK5p9ND/Ab\nB0Nm5zZgtyPnGUrY6Ci22xHmeJKcGVmYMudYEkwOOMK8x0AcnDifMu4NjWxxFwIN\nQ1CSLuF7FGuAEenO9v/oZklLWrTZ4ewA4pM5uaYtTQHc3AD+Jg3/ZcmHQxDlSQMJ\nEiaB5rvLXwvlLthDOtr3gEG+8f08KWl0eJijrhd6UQCvEsMje19LAXxuU49u2A3C\nl1T2XzxPquGC1FfrWCwY+/pGsOaH7eNnCBBnBZGBuXWt3pFL2C0OVWPa3J9ZYj26\nPYHDKl1eYP4trWGGY/T2\n=G5PZ\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-04T18:41:52",
                "message_text_only": "I think it's a reasonable approach. Once the number is assigned, the \nchange is made and the pull request is updated.\n\nOnly thing is it would be nice to be able to indicate which pull \nrequests are number requests and which pull requests are ready for \nmerging. Perhaps we should make a special label for number requests.\n\n- Eric\n\n------ Original Message ------\nFrom: \"Gregory Maxwell via bitcoin-dev\" \n<bitcoin-dev at lists.linuxfoundation.org>\nTo: \"Bitcoin Dev\" <bitcoin-dev at lists.linuxfoundation.org>\nSent: 9/3/2015 4:18:08 PM\nSubject: [bitcoin-dev] Proposed minor change to BIP 01 to use a PR for \nrequest assignment\n\n>The process in BIP01 was written when we used a different solution for\n>storing and presenting BIPs.\n>\n>I'm thinking of suggesting that the number request process be changed\n>to opening a pull req with BIP text with no number (e.g. just using\n>the authors name and an index as the number) as the mechenism to\n>request number assignment.\n>\n>Is there any reason that anyone would find this objectionable?\n>\n>(Please do not respond to this message with anything but a strictly\n>directed answer to that question, start a new thread for a different\n>subject. Thanks!)\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "Proposed minor change to BIP 01 to use a PR for request assignment",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Lombrozo",
                "Douglas Roark",
                "Peter Todd",
                "Gregory Maxwell",
                "Btc Drak",
                "Marco Pontello"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 6952
        }
    },
    {
        "title": "[bitcoin-dev] Alpha release of METAmarket available for download NOW for Windows and Linux. Come help us test a new standard in P2P e-commerce!",
        "thread_messages": [
            {
                "author": "Marc D. Wood",
                "date": "2015-09-03T23:54:17",
                "message_text_only": "I'm pleased to announce the newest contender in the field of decentralized\ne-commerce. 100% P2P and 100% customize-able. Using METAmarket, you can\ncreate your own market where you make the rules. Open to all or Private?\nWholesale or retail? Moderated or unmoderated? Clearnet or Darknet? You\nare in complete control of your local market. There are always people\nlooking for cheap and easy ways to trade and METAmarket uses a zero-fee\napproach. All funds are secure from theft or exit scams using a P2P\nBitcoin multisig escrow between buyer and seller ONLY. (NO third parties!)\nMETAmarket is built directly on top of the Bitcoin and Bitmessage\nreference clients, keeping security as priority #1. The future of\ne-commerce under your control. The future of e-commerce is METAmarket.\n\nhttp://www.notbeinggoverned.com/metamarket-whitepaper/\n\nhttps://bitcointalk.org/index.php?topic=1044827.0\n\nhttp://metamarket.biz/"
            }
        ],
        "thread_summary": {
            "title": "Alpha release of METAmarket available for download NOW for Windows and Linux. Come help us test a new standard in P2P e-commerce!",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Marc D. Wood"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 910
        }
    },
    {
        "title": "[bitcoin-dev] Multi-chain payment channel nodes",
        "thread_messages": [
            {
                "author": "Bryan Bishop",
                "date": "2015-09-04T00:02:10",
                "message_text_only": "Here is a brief overview of a way to use something like the lightning\nnetwork, or another multi-hop payment channel network, to handle more\ntransactions per second.\n\nThese ideas were mentioned yesterday in #bitcoin-wizards and my email\ndoes not significantly elaborate on any of it (search for\n\"cross-chain\"):\nhttp://gnusha.org/bitcoin-wizards/2015-09-01.log\nhttp://gnusha.org/bitcoin-wizards/2015-09-02.log\n\nMailing list discussion of this can be found at [6] and on the forum at [7].\n\nSummary\n=======\n\nPayment channel network nodes could operate on multiple chains or\nledgers, especially if those ledgers are 2-way-peg compatible with\nBTC. Payment network users may have a variety of different preferences\nabout security models or fees or any other number of system\nproperties, and this method can be more accomodating than only\noffering mainnet UTXOs.\n\nTerminology\n===========\n\nDuring the IRC monologue I was using the word \"hub\" and \"cross-chain\nhubs\" to describe a payment channel network node. Rusty Russell later\nbrought to my attention a good argument from Joseph Poon to prefer to\ncall them nodes, namely that \"hub\" implies centralization which isn't\nreally necessary to implicate in these designs. So I'll stick with\n\"node\".\n\nVague requirements and scenario speculation\n===========================================\n\n- bip70-like payment-channel-compatible wallet-to-wallet communication\nprotocol; useful for sender and receiver to negotiate how payment\nshould be routed over the payment channel network.\n\n- assume existence of other ledgers with working 2-way-peg.\n\n- lightning network[1], amiko pay[2], or some other payment channel\nnetwork with multi-hop payment routing\n\n- (at least some) payment channel nodes which access more than one\nblockchain or ledger system\n\n- can be more than two chains or ledgers that the node opens channels\non or operate on (octoledger nodes?)\n\n- node can eventually setup 2-way-pegs through moxiebox code embedded\nin some opcode for a specification of an alternative federated ledger\n(just kidding, there be dragons here)\n\nImplication: Chain or ledger UTXO ambivalence\n=============================================\n\nThe sender (receiver) doesn't need to be concerned with which chain\nthe receiver (sender) wishes to transact with, as long as both parties\nhave wallets that can communicate with each other for fee negotiation\nwhile payment channel routing happens.\n\nImplication: UTXO preferences informed by fee pressures\n=======================================================\n\nAn earlier identified implication by others has been that transaction\nfee trends may influence when payment channel users choose to settle\non the main chain, because fees may be too high to make the tradeoffs\nworthwhile for the user.\n\nTransaction fee pressure on the bitcoin mainnet chain may influence\nreceivers, otherwise busy negotiating their payment channel payments,\nto negotiate receipt of their UTXOs on alternative chains which might\nbe charging lower fees. Users that wish to settle to a ledger for a\nlower fee can do so without paying for main chain transaction\nprioritization.\n\n(Concerns about market exchange rate of BTC even with the presence of\n2-way-pegs could be alleviated by multi-chain nodes that practice\narbitrage. However, perhaps the financial markets will not bother\nassigning different values to BTC-compatible UTXOs on different\nsidechains? High mainnet fees may be reflected in market price\ndifferences, maybe....)\n\nMinor lightning network protocol change\n=======================================\n\nAdd chain parameter to onion routing protocol message. Receipt of this\nmessage was acknowledged by Rusty Russell yesterday. However, this\nchange alone may be insufficient to enable this described usage. Also\nwhile I hope that onion routing continues to be the direction there's\nno guarantee of course.\n\nOther: Centralized ledgers\n==========================\n\nCentralized ledger operators, such as companies running spot\nexchanges, could run payment channel nodes, allowing their users to\ndeposit and withdraw funds \"immediately\" subject to whether the\nservice provider is operating anything resembling a hot wallet. A\ncentralized ledger operator could be considered a valid multi-chain\ndestination in the above-mentioned imaginary lightning-compatible\npayment protocol. Payment channel network programmers should not be\nburdened with a thousand different standards for this ability, and\ninstead there should be an attempt at general compatibility, although\ntrustless implementations should be preferred if available.\n\nLuke-Jr mentions that the same (currently imaginary) payment protocol\ncould also provide for user-to-user transfers on the same centralized\nservices, skipping the payment channels entirely.\n\nOther\n=====\n\nHere are some things that I have been meaning to look at, but haven't looked at:\n\n- can we do probabilistic payments[3][4] over payment channels? does\nit require all payments to be probabilistic payments?\n\n- is lightning network + multi-chain compatible with terminating on a\nchain like zerocash? or inside coinjoin/coinshuffle schemes? mixing\nimplications?\n\n- are payment channel networks compatible with confidential\ntransactions[5], and what about in the multi-chain regime?\n\n- should work if 2-way-peg between multiple assets on same chain, like\nin elements alpha?\n\nReferences\n==========\n\n[1] http://lightning.network/lightning-network-paper.pdf\n\n[2] https://github.com/cornwarecjp/amiko-pay\n\n[3] http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-May/002564.html\n\n[4] https://bitcointalk.org/index.php?topic=62558.0\n\n[5] https://bitcointalk.org/index.php?topic=1085273.0\n\n[6] http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010797.html\n\n[7] https://bitcointalk.org/index.php?topic=1170303.0\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507"
            }
        ],
        "thread_summary": {
            "title": "Multi-chain payment channel nodes",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Bryan Bishop"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 5835
        }
    },
    {
        "title": "[bitcoin-dev] RFC: HD Bitmessage address derivation based on BIP-43",
        "thread_messages": [
            {
                "author": "Luke Dashjr",
                "date": "2015-09-04T00:06:05",
                "message_text_only": "On Tuesday, June 30, 2015 5:53:05 PM Justus Ranvier wrote:\n> Monetas has developed a Bitmessage address derivation method from an\n> HD seed based on BIP-43.\n> \n> https://github.com/monetas/bips/blob/bitmessage/bip-bm01.mediawiki\n>\n> We're proposing this as a BIP per the BIP-43 recommendation in order\n> to reserve a purpose code.\n\nBitmessage is not Bitcoin, thus this falls outside the scope of the BIP \nprocess. Since BIP 43 is still a draft, I propose modifying it to refer non-\nBitcoin purpose codes to the SLIP repository:\n    https://doc.satoshilabs.com/slips/\n\nLuke"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-09-04T17:48:48",
                "message_text_only": "On 09/03/2015 07:06 PM, Luke Dashjr via bitcoin-dev wrote:\n> Since BIP 43 is still a draft, I propose modifying it to refer non-\n> Bitcoin purpose codes to the SLIP repository:\n>     https://doc.satoshilabs.com/slips/\n\nWhat benefit is created by delegating the BIP-43 namespace management to\nthat company in particular?\n\nBIP-43 as it is currently composed provides the convenient feature of\npurpose codes matching the BIP number. Moving purpose codes to a\nseparate namespace add complexity to its usage for no discernible benefit.\n\n-- \nJustus Ranvier\nOpen Bitcoin Privacy Project\nhttp://www.openbitcoinprivacyproject.org/\njustus at openbitcoinprivacyproject.org\nE7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18381 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/ade4f0f3/attachment-0001.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/ade4f0f3/attachment-0001.sig>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-09-04T18:21:15",
                "message_text_only": "On Friday, September 04, 2015 5:48:48 PM Justus Ranvier wrote:\n> On 09/03/2015 07:06 PM, Luke Dashjr via bitcoin-dev wrote:\n> > Since BIP 43 is still a draft, I propose modifying it to refer non-\n> > \n> > Bitcoin purpose codes to the SLIP repository:\n> >     https://doc.satoshilabs.com/slips/\n> \n> What benefit is created by delegating the BIP-43 namespace management to\n> that company in particular?\n\nFeel free to create a company-independent repository instead.\nAlthough I don't think SLIPs are intended to be biased toward their company.\n\n> BIP-43 as it is currently composed provides the convenient feature of\n> purpose codes matching the BIP number. Moving purpose codes to a\n> separate namespace add complexity to its usage for no discernible benefit.\n\nThis is not Bitcoin's problem... Polluting the BIP repository with N non-\nBitcoin related specifications would be.\n\nLuke"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-09-04T18:25:16",
                "message_text_only": "On 09/04/2015 01:21 PM, Luke Dashjr wrote:\n> This is not Bitcoin's problem... Polluting the BIP repository with N non-\n> Bitcoin related specifications would be.\n\nHD generation of keypairs from a single seed for many non-conflicting\nuses is a valuable and useful technique.\n\nIntentionally making a useful technology less useful because assigning\nnon-colliding numbers is too hard is a strange approach to software\nengineering.\n\n-- \nJustus Ranvier\nOpen Bitcoin Privacy Project\nhttp://www.openbitcoinprivacyproject.org/\njustus at openbitcoinprivacyproject.org\nE7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18381 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/ba5265b3/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/ba5265b3/attachment.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-05T11:17:52",
                "message_text_only": "On Sep 4, 2015 7:56 PM, \"Justus Ranvier via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> On 09/03/2015 07:06 PM, Luke Dashjr via bitcoin-dev wrote:\n> > Since BIP 43 is still a draft, I propose modifying it to refer non-\n> > Bitcoin purpose codes to the SLIP repository:\n> >     https://doc.satoshilabs.com/slips/\n>\n> What benefit is created by delegating the BIP-43 namespace management to\n> that company in particular?\n>\n> BIP-43 as it is currently composed provides the convenient feature of\n> purpose codes matching the BIP number. Moving purpose codes to a\n> separate namespace add complexity to its usage for no discernible benefit.\nThe \"namespace\" defined in BIP43 is acceptable. BIP44's is not:\n\nhttps://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#Registered_coin_types\n\nIt defines a centralized registry controlld by a single company instead of\nhaving a way for different companies (or p2p chains like namecoin?) to\nmaintain competing registries.\n\nEven better, it could use a code deterministically generated from the chain\nID (the hash of the genesis block), completely removing the need for a\nregistry in the first place.\n\n> --\n> Justus Ranvier\n> Open Bitcoin Privacy Project\n> http://www.openbitcoinprivacyproject.org/\n> justus at openbitcoinprivacyproject.org\n> E7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150905/7a1c309d/attachment.html>"
            },
            {
                "author": "Christophe Biocca",
                "date": "2015-09-05T16:48:41",
                "message_text_only": "I will point out that the current situation is not an accident:\nhttps://github.com/bitcoin/bips/pulls?utf8=%E2%9C%93&q=44 is a great\nplace to get some context for what happened. I believe you can also\nfind the other half of this discussion on the mailing list archives.\n\nThe cointypes being simple integers was how the code worked as shipped\n(in the trezor), so changing the semantics after the fact wasn't a\npossibility.\n\nThe BIP repository didn't want to constantly deal with updates\nunrelated to Bitcoin proper, so a decision was made to move that part\nof the standard to a repository willing to handle it.\n\nOn 5 September 2015 at 07:17, Jorge Tim\u00f3n\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> On Sep 4, 2015 7:56 PM, \"Justus Ranvier via bitcoin-dev\"\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> On 09/03/2015 07:06 PM, Luke Dashjr via bitcoin-dev wrote:\n>> > Since BIP 43 is still a draft, I propose modifying it to refer non-\n>> > Bitcoin purpose codes to the SLIP repository:\n>> >     https://doc.satoshilabs.com/slips/\n>>\n>> What benefit is created by delegating the BIP-43 namespace management to\n>> that company in particular?\n>>\n>> BIP-43 as it is currently composed provides the convenient feature of\n>> purpose codes matching the BIP number. Moving purpose codes to a\n>> separate namespace add complexity to its usage for no discernible benefit.\n> The \"namespace\" defined in BIP43 is acceptable. BIP44's is not:\n>\n> https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#Registered_coin_types\n>\n> It defines a centralized registry controlld by a single company instead of\n> having a way for different companies (or p2p chains like namecoin?) to\n> maintain competing registries.\n>\n> Even better, it could use a code deterministically generated from the chain\n> ID (the hash of the genesis block), completely removing the need for a\n> registry in the first place.\n>\n>> --\n>> Justus Ranvier\n>> Open Bitcoin Privacy Project\n>> http://www.openbitcoinprivacyproject.org/\n>> justus at openbitcoinprivacyproject.org\n>> E7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-06T02:09:52",
                "message_text_only": "On Sat, Sep 5, 2015 at 6:48 PM, Christophe Biocca\n<christophe.biocca at gmail.com> wrote:\n> I will point out that the current situation is not an accident:\n> https://github.com/bitcoin/bips/pulls?utf8=%E2%9C%93&q=44 is a great\n> place to get some context for what happened. I believe you can also\n> find the other half of this discussion on the mailing list archives.\n>\n> The cointypes being simple integers was how the code worked as shipped\n> (in the trezor), so changing the semantics after the fact wasn't a\n> possibility.\n>\n> The BIP repository didn't want to constantly deal with updates\n> unrelated to Bitcoin proper, so a decision was made to move that part\n> of the standard to a repository willing to handle it.\n\nThis is in fact useful. The centralized registries themselves are fine\nprovided that we don't rely on having only one of them or in them\nhaving the same values for the same chains.\nTrezor can maintain its own too.\nFuture versions of Trezor could support full chain IDs instead of\nthese integers (or keep using these integers forever, whatever they\nchose to do).\n\nOn Sat, Sep 5, 2015 at 7:03 PM, Luke Dashjr <luke at dashjr.org> wrote:\n> On Saturday, September 05, 2015 11:17:52 AM Jorge Tim\u00f3n via bitcoin-dev wrote:\n>> The \"namespace\" defined in BIP43 is acceptable. BIP44's is not:\n>>\n>> https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#Registered_c\n>> oin_types\n>>\n>> It defines a centralized registry controlld by a single company instead of\n>> having a way for different companies (or p2p chains like namecoin?) to\n>> maintain competing registries.\n>>\n>> Even better, it could use a code deterministically generated from the chain\n>> ID (the hash of the genesis block), completely removing the need for a\n>> registry in the first place.\n>\n> No, because different chains may very well use the same genesis block.\n\nCan you read my reasoning here?\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-September/010861.html\nWhat I propose is retro-compatible, even for carelessly designed\nchains (that allowed pre-mining) like FTC.\nAnd provides securely unique IDs that don't require a centralized registry.\n\nMaybe I should start a Chain IDs BIP..."
            }
        ],
        "thread_summary": {
            "title": "RFC: HD Bitmessage address derivation based on BIP-43",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Christophe Biocca",
                "Jorge Tim\u00f3n",
                "Luke Dashjr",
                "Justus Ranvier"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 10302
        }
    },
    {
        "title": "[bitcoin-dev] [BIP/Draft] BIP Acceptance Process",
        "thread_messages": [
            {
                "author": "Andy Chase",
                "date": "2015-09-04T00:30:50",
                "message_text_only": "Here\u2019s a BIP. I wrote the BIP mostly to stir the pot on ideas of governance, but I\u2019m moderately serious about it. This is set in Markdown for readability, but here\u2019s the BIP-0001 Medawiki version: https://gist.github.com/andychase/dddb83c294295879308b <https://gist.github.com/andychase/dddb83c294295879308b>\n\n\n  Title: BIP Acceptance Process\n  Author: Andy Chase\n  Status: Draft\n  Type: Process\n  Created: 2015-08-31\n\nAbstract\n========\n\nThe current process for accepting a BIP is not clearly defined. While\nBIP-0001 defines the process for writing and submitting a Bitcoin\nimprovement proposal to the community it does not specify the precise\nmethod for which BIPs are considered accepted or rejected.\n\nThis proposal sets up a method for determining BIP acceptance.\n\nThis BIP has two parts:\n\n-   It sets up a process which a BIP goes through for comments\n  and acceptance.\n  -   The Process is:\n      -   BIP Draft\n      -   Submitted for comments (2 weeks)\n      -   Waiting on opinion (two weeks)\n      -   Accepted or Deferred\n-   It sets up committees for reviewing comments and indicating\n  acceptance under precise conditions.\n  -   Committees are authorized groups that represent client authors,\n      miners, merchants, and users (each as a segment). Each one must\n      represent at least 1% stake in the Bitcoin ecosystem.\n\nBIP acceptance is defined as at least 70% of the represented percentage\nstake in 3 out of the 4 Bitcoin segments.\n\nCopyright\n=========\n\nThis document is placed into the public domain.\n\nMotivation\n==========\n\nBIPs represent important improvements to Bitcoin infrastructure, and in\norder to foster continued innovation, the BIP process must have clearly\ndefined stages and acceptance acknowledgement.\n\nRationale\n=========\n\nA committee system is used to organize the essential concerns of each\nsegment of the Bitcoin ecosystem. Although each segment may have many\ndifferent viewpoints on each BIP, in order to seek a decisive yes/no on\na BIP, a representational authoritative structure is sought. This\nstructure should be fluid, allowing people to move away from committees\nthat do not reflect their views and should be re-validated on each BIP\nevaluation.\n\nWeaknesses\n==========\n\nEach committee submits a declaration including their claim to represent\na certain percentage of the Bitcoin ecosystem in some way. Though\nguidelines are given, it's up to each committee to prove their stake,\nand it's up to the reader of the opinions to decide if a BIP was truly\naccepted or rejected.\n\nThe author doesn't believe this is a problem because a BIP cannot be\nforced on client authors, miners, merchants, or users. Ultimately this\nBIP is a tool for determining whether a BIP is overwhelmingly accepted.\nIf one committee's validity claim becomes the factor that decides\nwhether the BIP will succeed or fail, this process simply didn't return\na clear answer and the BIP should be considered deferred.\n\nProcess\n=======\n\n-   **Submit for Comments.** The first BIP champion named in the\n  proposal can call a \"submit for comments\" at any time by posting to\n  the [Dev Mailing\n  List](https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>)\n  mailling with the BIP number and a statement that the champion\n  intends to immediately submit the BIP for comments.\n  -   The BIP must have been assigned BIP-number (i.e. been approved\n      by the BIP editor) to be submitted for comments.\n-   **Comments.**\n  -   After a BIP has been submitted for comments, a two-week waiting\n      period begins in which the community should transition from\n      making suggestions about a proposal to publishing their opinions\n      or concerns on the proposal.\n-   **Reported Opinions.**\n  -   After the waiting period has past, committees must submit a\n      summary of the comments which they have received from their\n      represented communities.\n  -   The deadline for this opinion is four weeks after the BIP was\n      submitted for comments.\n  -   Committees cannot reverse their decision after the deadline, but\n      at their request may flag their decision as \"likely to change if\n      another submit for comments is called\". Committees can change\n      their decision if a resubmit is called.\n  -   Opinions must include:\n      -   One of the following statements: \"Intend to accept\", \"Intent\n          to implement\", \"Decline to accept\", \"Intend to accept, but\n          decline to implement\".\n      -   If rejected, the opinion must cite clear and specific\n          reasons for rejecting including a checklist for what must\n          happen or be change for their committee to accept\n          the proposal.\n      -   If accepted, the committee must list why they accepted the\n          proposal and also include concerns they have or what about\n          the BIP that, if things changed, would cause the committee\n          to likely reverse their decision if another submit for\n          comments was called.\n-   **Accepted.**\n  -   If at least 70% of the represented percentage stake in 3 out of\n      4 segments accept a proposal, a BIP is considered accepted.\n      -   If a committee fails to submit an opinion, consider the\n          opinion \"Decline to accept\".\n  -   The BIP cannot be substantially changed at this point, but can\n      be replaced. Minor changes or clarifications are allowed but\n      must be recorded in the document.\n-   **Deferred.**\n  -   The acceptance test above is not met, a BIP is sent back\n      into suggestions.\n  -   BIP can be modified and re-submitted for a comments no sooner\n      than two months after the date of the previous submit for\n      comments is called.\n  -   A BIP is marked rejected after two failed submission attempts. A\n      rejected BIP can still be modified and re-submitted.\n\nCommittees\n==========\n\n**BIP Committees.**\n\n-   BIP Committees are representational structures that represent\n  critical segments of the Bitcoin ecosystem.\n-   Each committee must prove and maintain a clear claim that they\n  represent at least 1% of the Bitcoin ecosystem in some form.\n  -   If an organization or community does not meet that requirement,\n      it should conglomerate itself with other communities and\n      organizations so that it does.\n-   The segments that committees can be based around are:\n  -   Bitcoin software\n  -   Merchants/services/payment processors\n  -   Mining operators\n  -   User communities\n-   A person may be represented by any number of segments, but a\n  committee cannot re-use the same resource as another committee in\n  the same segment.\n\n-   **Committee Declarations.** At any point, a Committee Declaration\n  can be posted.\n-   This Declaration contain details about:\n  -   The segment the Committee is representing\n  -   Who the committee claim to represent and it's compositional\n      makeup (if made up of multiple miner orgs, user orgs, companies,\n      clients, etc).\n  -   Proof of claim and minimum 1% stake via:\n      -   Software: proof of ownership and user base (Min 1% of\n          Bitcoin userbase)\n      -   Merchant: proof of economic activity (Min 1% of Bitcoin\n          economic activity)\n      -   Mining: proof of work (Min 1% of Hashpower)\n      -   For a user organization, auditable signatures qualifies for\n          a valid committee (Min 1% of Bitcoin userbase)\n  -   Who is running the committee, their names and roles\n  -   How represented members can submit comments to the committee\n  -   A code of conduct and code of ethics which the committee\n      promises to abide by\n-   A committee declaration is accepted if:\n  -   The declaration includes all of the required elements\n  -   The stake is considered valid\n-   Committee validation is considered when considering the results of\n  opinions submitted by committee on a BIP. A committee must have met\n  the required stake percentage before a BIP is submitted for\n  comments, and have maintained that stake until a valid opinion\n  is submitted.\n  -   Committees can dissolve at any time or submit a declaration at\n      any time\n  -   Declaration must have been submitted no later than the third day\n      following a BIP's request for comments to be eligible for\n      inclusion in a BIP\n\nBIP Process Management Role\n===========================\n\nBIPs, Opinions, and Committee Declaration must be public at all times.\n\nA BIP Process Manager should be chosen who is in charge of:\n\n-   Declaring where and how BIPs, Opinions, and Committee Declaration\n  should be posted and updated officially.\n-   Maintaining the security and authenticity of BIPs, Opinions, and\n  Committee Declarations\n-   Publishing advisory documents about what kinds of proof of stakes\n  are valid and what kinds should be rejected.\n-   Naming a series of successors for the roles of the BIP Process\n  Manager and BIP Editor (BIP-001) as needed.\n\nConditions for activation\n=========================\n\nIn order for this process BIP to become active, it must succeed by its\nown rules. At least a 4% sample of the Bitcoin community must be\nrepresented, with at least one committee in each segment included. Once\nat least one committee has submitted a declaration, a request for\ncomments will be called and the process should be completed from there.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/79dda43f/attachment-0001.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-09-04T00:41:07",
                "message_text_only": "On Friday, September 04, 2015 12:30:50 AM Andy Chase via bitcoin-dev wrote:\n> Here's a BIP. I wrote the BIP mostly to stir the pot on ideas of\n> governance, but I\u2019m moderately serious about it.\n\nSigh. There is *no governance at all*. Any such a BIP like this needs to \ndocument the natural forces involved in real-world acceptance, not try to lay \ndown \"rules\" that people are expected to follow.\n\nFor hardforks, that means economic consensus. For softforks, miner majority. \nFor basically anything else, real-world implementation and use (by any \nsignificant quantity of people).\n\nLuke"
            },
            {
                "author": "Andy Chase",
                "date": "2015-09-04T00:52:06",
                "message_text_only": "> Any such a BIP like this needs to\n> document the natural forces involved in real-world acceptance, not try to\nlay\n> down \"rules\" that people are expected to follow.\n\nThat's my goal: to take the hodgepodge of we already use for acceptance,\nand apply rules that allow true acceptance to be identified in a clearer\nway.\n\nIf people don't follow the \"rules\" then the system simply won't work, this\nis mentioned in the last section.\n\nOn Thu, Sep 3, 2015 at 5:41 PM, Luke Dashjr <luke at dashjr.org> wrote:\n\n> On Friday, September 04, 2015 12:30:50 AM Andy Chase via bitcoin-dev wrote:\n> > Here's a BIP. I wrote the BIP mostly to stir the pot on ideas of\n> > governance, but I\u2019m moderately serious about it.\n>\n> Sigh. There is *no governance at all*. Any such a BIP like this needs to\n> document the natural forces involved in real-world acceptance, not try to\n> lay\n> down \"rules\" that people are expected to follow.\n>\n> For hardforks, that means economic consensus. For softforks, miner\n> majority.\n> For basically anything else, real-world implementation and use (by any\n> significant quantity of people).\n>\n> Luke\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/1f4e33fd/attachment.html>"
            },
            {
                "author": "Bryan Bishop",
                "date": "2015-09-04T00:43:15",
                "message_text_only": "On Thu, Sep 3, 2015 at 7:30 PM, Andy Chase via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I wrote the BIP mostly to stir the pot on ideas of governance\n\nSome quick comments:\n\nI have some objects that I am not ready to put into words, but I do\nthink there are easily some major objections to committee design. If I\nvanish and never respond with my objections, perhaps there's an IETF\nRFC about this already....\n\nSomething that may mitigate my possible objections would be some\nmandatory requirement about ecosystem echo-chambers making many\nattempts and efforts at steelman representations of alternative\nviewpoints. Understanding objections at a fundamental level, enough to\nmake strong steelman statements, is very important to ensure that the\ncompeting opinions are not censored from consideration. Pathological\nintegration and internalization of these steelman arguments can be\nvery useful, even if the process looks unusual.\n\nYour process does not have to replace any particular BIP process\nas-is, but rather could be an alternative that proceeds on its own\nperhaps indefinitely without replacement. I don't think too many BIP\nprocesses are necessarily incompatible except by namespace collision.\n\nhttps://gist.github.com/andychase/dddb83c294295879308b#gistcomment-1566432\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507"
            },
            {
                "author": "Andy Chase",
                "date": "2015-09-04T04:40:56",
                "message_text_only": "As posted:\n\n**Enforcement/Organization** I agree with your comments. I don't believe in\nsetting up an organization to manage this process (would be too much power\nand not really needed because the internet is pretty good at information\nsharing). Therefore, I designed it around the assumption that participation\nis voluntary. This means that it's hard to enforce rules like forcing\ngroups to see the other side. Groupthink/Echo chambers is real and is bad\nbut it's hard to change human nature.\n\nIn regards to enforcement, I believe that the best approach would be to\nmotivate committees to produce the best opinion they can (and also proof of\nstake, another weak point in this proposal), as the better they can do this\nthe more likely the community will accept their opinion as valid and\nimportant.\n\nIndeed, I believe that without an organization managing the process, it's\nup to each individual reader of each BIP/Opinions set to make the decision\non whether or not there is clear and true community acceptance.\n\n----\n\n**Committee versus another approach**\n\nPros of using Committees:\n\n* Committees are used today in many fields with a range of success. Lots of\nprevious work to work off of here, history is established.\n* Many segments already have committee-like structures (Merchants produce\nshared signed documents, miners often represent themselves, User groups\nhave representatives like voting on subreddit moderators, Core Devs have\nCore Devs)\n* Committees can filter a range of opinions down to a yes/no\n* Committees have real people that can be talked to, contacted, etc.\n* Much easier to proof stake in a range (People generally accept the\nBitcoin Core has 70-90% of the market share) vs someone trying to proof\nthey make up (.000001% of the Bitcoin user-base)\n* Committees have some stability, encourages experience and expertise\n(Committee members can be knowledgeable in their area and adequately\nunderstand BIPs)\n\nCons:\n\n* Fear of committees working in the dark, censoring opinions (i.e. \"Dark\nsmokey room of fat cats\") (Possible solution: make committee power fluid\ni.e. easily abandon-able: miners can change pools, users can change client\nforks, change merchants, users can re-group, encourage transparency)\n* More centralized, centralization of power (generally bad) (Possible\nsolution: encourage smaller committees)\n* Centralization pressure (groups may seek to consolidate to gain power)\n(Possible solution: Segmentation)\n* Encourages groupthink, political maneuvers, turns good people into\npoliticians, mud-tossing\n\n**Another possible approach: micro votes**\n\nPros:\n\n* Each user can represent themselves, no censorship\n* People feel more involved and empowered\n\nCons:\n\n* How to prove and prevent manipulation?\n* Only motivated people will contribute. Motivated people may be motivated\nfor bad reasons.\n\n\nOn Thu, Sep 3, 2015 at 5:43 PM, Bryan Bishop <kanzure at gmail.com> wrote:\n\n> On Thu, Sep 3, 2015 at 7:30 PM, Andy Chase via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > I wrote the BIP mostly to stir the pot on ideas of governance\n>\n> Some quick comments:\n>\n> I have some objects that I am not ready to put into words, but I do\n> think there are easily some major objections to committee design. If I\n> vanish and never respond with my objections, perhaps there's an IETF\n> RFC about this already....\n>\n> Something that may mitigate my possible objections would be some\n> mandatory requirement about ecosystem echo-chambers making many\n> attempts and efforts at steelman representations of alternative\n> viewpoints. Understanding objections at a fundamental level, enough to\n> make strong steelman statements, is very important to ensure that the\n> competing opinions are not censored from consideration. Pathological\n> integration and internalization of these steelman arguments can be\n> very useful, even if the process looks unusual.\n>\n> Your process does not have to replace any particular BIP process\n> as-is, but rather could be an alternative that proceeds on its own\n> perhaps indefinitely without replacement. I don't think too many BIP\n> processes are necessarily incompatible except by namespace collision.\n>\n> https://gist.github.com/andychase/dddb83c294295879308b#gistcomment-1566432\n>\n> - Bryan\n> http://heybryan.org/\n> 1 512 203 0507\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150903/77939aff/attachment-0001.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-04T19:20:58",
                "message_text_only": "I'm rather perplexed about this proposal. What exactly is wrong with\nthe existing BIPs process? I mean, it seems to me anyone can publish a\nBIP pretty easily in the BIPs repository. There doesnt seems to be any\nreal barrier to entry whatsoever. I know there have been all manner of\naspersions, but having just written two BIPs there was no friction at\nall.\n\nWhether the ecosystem adopts a BIP is another question of course, but\nthat's out of scope of the BIPs project anyhow. Take BIP101\ncontroversial as it gets, but it's there. Whether Bitcoin implementers\nimplement it is another kettle of fish and a matter for each project\nto decide. It's absolutely NOT the realm of the BIPs project itself.\nBitcoin Core does not make any consensus critical changes with a BIP.\nWhere one seeks to establish certain standards, say for privacy, a BIP\nwould be appropriate so the ecosystem can harmonise methodology across\nthe board.\n\nThe status of a BIP is not really determined by anyone, it's by\nadoption - that's where consensus happens. There's a little legroom\naround this but I'm not entirely sure what you are trying to solve.\nYes the process is loose, but is it broken? There have been a flood of\nBIPs added recently with zero bureaucracy or friction.\n\nBIP0001 is the BIP that defines the BIP process. Interestingly enough\nthe only BIP that might be controversial is in fact a BIP to change\nthe way BIPs are handled!\n\nSo I'd really prefer to start this conversation with a breakdown of\nwhat you think is broken first before tackling what may or may not\nneed fixing. I would be very cautious bringing \"administrative\"\nburdens to the process or evicting common sense from the proceedings.\nMuch of the debates around consensus building seem to negate the\nimportance of common sense and the simple fact that \"it's obvious when\nyou see it\".\n\nI'm sure there can be improvements, but for me personally, I need to\nsee what is broken before I can make any judgement on a potential way\nforward, and if it's not broken, we should leave it alone.\n\n\nOn Fri, Sep 4, 2015 at 5:40 AM, Andy Chase via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> As posted:\n>\n> **Enforcement/Organization** I agree with your comments. I don't believe in\n> setting up an organization to manage this process (would be too much power\n> and not really needed because the internet is pretty good at information\n> sharing). Therefore, I designed it around the assumption that participation\n> is voluntary. This means that it's hard to enforce rules like forcing groups\n> to see the other side. Groupthink/Echo chambers is real and is bad but it's\n> hard to change human nature.\n>\n> In regards to enforcement, I believe that the best approach would be to\n> motivate committees to produce the best opinion they can (and also proof of\n> stake, another weak point in this proposal), as the better they can do this\n> the more likely the community will accept their opinion as valid and\n> important.\n>\n> Indeed, I believe that without an organization managing the process, it's up\n> to each individual reader of each BIP/Opinions set to make the decision on\n> whether or not there is clear and true community acceptance.\n>\n> ----\n>\n> **Committee versus another approach**\n>\n> Pros of using Committees:\n>\n> * Committees are used today in many fields with a range of success. Lots of\n> previous work to work off of here, history is established.\n> * Many segments already have committee-like structures (Merchants produce\n> shared signed documents, miners often represent themselves, User groups have\n> representatives like voting on subreddit moderators, Core Devs have Core\n> Devs)\n> * Committees can filter a range of opinions down to a yes/no\n> * Committees have real people that can be talked to, contacted, etc.\n> * Much easier to proof stake in a range (People generally accept the Bitcoin\n> Core has 70-90% of the market share) vs someone trying to proof they make up\n> (.000001% of the Bitcoin user-base)\n> * Committees have some stability, encourages experience and expertise\n> (Committee members can be knowledgeable in their area and adequately\n> understand BIPs)\n>\n> Cons:\n>\n> * Fear of committees working in the dark, censoring opinions (i.e. \"Dark\n> smokey room of fat cats\") (Possible solution: make committee power fluid\n> i.e. easily abandon-able: miners can change pools, users can change client\n> forks, change merchants, users can re-group, encourage transparency)\n> * More centralized, centralization of power (generally bad) (Possible\n> solution: encourage smaller committees)\n> * Centralization pressure (groups may seek to consolidate to gain power)\n> (Possible solution: Segmentation)\n> * Encourages groupthink, political maneuvers, turns good people into\n> politicians, mud-tossing\n>\n> **Another possible approach: micro votes**\n>\n> Pros:\n>\n> * Each user can represent themselves, no censorship\n> * People feel more involved and empowered\n>\n> Cons:\n>\n> * How to prove and prevent manipulation?\n> * Only motivated people will contribute. Motivated people may be motivated\n> for bad reasons.\n>\n>\n> On Thu, Sep 3, 2015 at 5:43 PM, Bryan Bishop <kanzure at gmail.com> wrote:\n>>\n>> On Thu, Sep 3, 2015 at 7:30 PM, Andy Chase via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > I wrote the BIP mostly to stir the pot on ideas of governance\n>>\n>> Some quick comments:\n>>\n>> I have some objects that I am not ready to put into words, but I do\n>> think there are easily some major objections to committee design. If I\n>> vanish and never respond with my objections, perhaps there's an IETF\n>> RFC about this already....\n>>\n>> Something that may mitigate my possible objections would be some\n>> mandatory requirement about ecosystem echo-chambers making many\n>> attempts and efforts at steelman representations of alternative\n>> viewpoints. Understanding objections at a fundamental level, enough to\n>> make strong steelman statements, is very important to ensure that the\n>> competing opinions are not censored from consideration. Pathological\n>> integration and internalization of these steelman arguments can be\n>> very useful, even if the process looks unusual.\n>>\n>> Your process does not have to replace any particular BIP process\n>> as-is, but rather could be an alternative that proceeds on its own\n>> perhaps indefinitely without replacement. I don't think too many BIP\n>> processes are necessarily incompatible except by namespace collision.\n>>\n>> https://gist.github.com/andychase/dddb83c294295879308b#gistcomment-1566432\n>>\n>> - Bryan\n>> http://heybryan.org/\n>> 1 512 203 0507\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Andy Chase",
                "date": "2015-09-04T20:13:18",
                "message_text_only": "Thanks for your thoughts.\n\nMy proposal isn't perfect for sure. There's likely much better ways to do\nit. But to be clear what I'm trying to solve is basically this:\n\nWho makes high-level Bitcoin decisions? Miners, client devs, merchants, or\nusers? Let's set up a system where everyone has a say and clear acceptance\ncan be reached.\n\n---\n\nMy motivation for writing this proposal is stated right at the start:\n> \"The current process for accepting a BIP is not clearly defined. While\nBIP-0001 defines the process for writing and submitting a Bitcoin\nImprovement Proposal to the community it does not specify the precise\nmethod for which BIPs are considered accepted or rejected.\"\n\nBIPs are considered \"accepted\" right now based on an undefined system,\nquite honestly. Btc Drak: What's the system for accepting a BIP? Words like\n\"consensus\" come up but they aren't defined. My goal is to define a system\nthat makes finding \"consensus\" (I like the word \"acceptance\" better) in a\nclear and fair way.\n\nI.e. what's broken?\n\n* Being sure that a proposal is widely accepted or rejected\n* Preventing deadlock (i.e. one person's weak objections preventing\nacceptance)\n* Receiving feedback from important segments like user groups,\nmerchants/exchanges, etc. in a systematic and clear way instead of going\nand forth or having \"oracles\" on technical advisory boards.\n\n> Yes the process is loose, but is it broken?\n\nYes/No. Work gets done with the current process. Work can get done with\nthis process. The goal is for this process is to be safer/clearer/better\ndefined way.\n\n> There have been a flood of\n> BIPs added recently with zero bureaucracy or friction.\n\nAs we move forward, we want to balance the powers in such a way that we may\nwant to pause a bit before we accept each proposal. 2 weeks for comments +\n2 weeks for opinions will slow things down, but it shouldn't stall\nmeaningful work. I used 4 weeks for the process with the understanding that\nmost proposals are clear and easily acceptable. Controversial proposals\nwill likely need more time and thus will likely have be submitted at least\ntwice to discover a clear response.\n\n\"Accepting\" a BIP means just that: It's accepted. What's acceptance mean?\nThis proposal provides an answer.\n\nClient implementations, users, miners, and merchants can feel safe\nimplementing and using a feature that has clear acceptance. This process\nisn't meant to force anything on client implementors, users, miners, or\nmerchants.\n\nOn Fri, Sep 4, 2015 at 12:20 PM, Btc Drak <btcdrak at gmail.com> wrote:\n\n> I'm rather perplexed about this proposal. What exactly is wrong with\n> the existing BIPs process? I mean, it seems to me anyone can publish a\n> BIP pretty easily in the BIPs repository. There doesnt seems to be any\n> real barrier to entry whatsoever. I know there have been all manner of\n> aspersions, but having just written two BIPs there was no friction at\n> all.\n>\n> Whether the ecosystem adopts a BIP is another question of course, but\n> that's out of scope of the BIPs project anyhow. Take BIP101\n> controversial as it gets, but it's there. Whether Bitcoin implementers\n> implement it is another kettle of fish and a matter for each project\n> to decide. It's absolutely NOT the realm of the BIPs project itself.\n> Bitcoin Core does not make any consensus critical changes with a BIP.\n> Where one seeks to establish certain standards, say for privacy, a BIP\n> would be appropriate so the ecosystem can harmonise methodology across\n> the board.\n>\n> The status of a BIP is not really determined by anyone, it's by\n> adoption - that's where consensus happens. There's a little legroom\n> around this but I'm not entirely sure what you are trying to solve.\n> Yes the process is loose, but is it broken? There have been a flood of\n> BIPs added recently with zero bureaucracy or friction.\n>\n> BIP0001 is the BIP that defines the BIP process. Interestingly enough\n> the only BIP that might be controversial is in fact a BIP to change\n> the way BIPs are handled!\n>\n> So I'd really prefer to start this conversation with a breakdown of\n> what you think is broken first before tackling what may or may not\n> need fixing. I would be very cautious bringing \"administrative\"\n> burdens to the process or evicting common sense from the proceedings.\n> Much of the debates around consensus building seem to negate the\n> importance of common sense and the simple fact that \"it's obvious when\n> you see it\".\n>\n> I'm sure there can be improvements, but for me personally, I need to\n> see what is broken before I can make any judgement on a potential way\n> forward, and if it's not broken, we should leave it alone.\n>\n>\n> On Fri, Sep 4, 2015 at 5:40 AM, Andy Chase via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > As posted:\n> >\n> > **Enforcement/Organization** I agree with your comments. I don't believe\n> in\n> > setting up an organization to manage this process (would be too much\n> power\n> > and not really needed because the internet is pretty good at information\n> > sharing). Therefore, I designed it around the assumption that\n> participation\n> > is voluntary. This means that it's hard to enforce rules like forcing\n> groups\n> > to see the other side. Groupthink/Echo chambers is real and is bad but\n> it's\n> > hard to change human nature.\n> >\n> > In regards to enforcement, I believe that the best approach would be to\n> > motivate committees to produce the best opinion they can (and also proof\n> of\n> > stake, another weak point in this proposal), as the better they can do\n> this\n> > the more likely the community will accept their opinion as valid and\n> > important.\n> >\n> > Indeed, I believe that without an organization managing the process,\n> it's up\n> > to each individual reader of each BIP/Opinions set to make the decision\n> on\n> > whether or not there is clear and true community acceptance.\n> >\n> > ----\n> >\n> > **Committee versus another approach**\n> >\n> > Pros of using Committees:\n> >\n> > * Committees are used today in many fields with a range of success. Lots\n> of\n> > previous work to work off of here, history is established.\n> > * Many segments already have committee-like structures (Merchants produce\n> > shared signed documents, miners often represent themselves, User groups\n> have\n> > representatives like voting on subreddit moderators, Core Devs have Core\n> > Devs)\n> > * Committees can filter a range of opinions down to a yes/no\n> > * Committees have real people that can be talked to, contacted, etc.\n> > * Much easier to proof stake in a range (People generally accept the\n> Bitcoin\n> > Core has 70-90% of the market share) vs someone trying to proof they\n> make up\n> > (.000001% of the Bitcoin user-base)\n> > * Committees have some stability, encourages experience and expertise\n> > (Committee members can be knowledgeable in their area and adequately\n> > understand BIPs)\n> >\n> > Cons:\n> >\n> > * Fear of committees working in the dark, censoring opinions (i.e. \"Dark\n> > smokey room of fat cats\") (Possible solution: make committee power fluid\n> > i.e. easily abandon-able: miners can change pools, users can change\n> client\n> > forks, change merchants, users can re-group, encourage transparency)\n> > * More centralized, centralization of power (generally bad) (Possible\n> > solution: encourage smaller committees)\n> > * Centralization pressure (groups may seek to consolidate to gain power)\n> > (Possible solution: Segmentation)\n> > * Encourages groupthink, political maneuvers, turns good people into\n> > politicians, mud-tossing\n> >\n> > **Another possible approach: micro votes**\n> >\n> > Pros:\n> >\n> > * Each user can represent themselves, no censorship\n> > * People feel more involved and empowered\n> >\n> > Cons:\n> >\n> > * How to prove and prevent manipulation?\n> > * Only motivated people will contribute. Motivated people may be\n> motivated\n> > for bad reasons.\n> >\n> >\n> > On Thu, Sep 3, 2015 at 5:43 PM, Bryan Bishop <kanzure at gmail.com> wrote:\n> >>\n> >> On Thu, Sep 3, 2015 at 7:30 PM, Andy Chase via bitcoin-dev\n> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> > I wrote the BIP mostly to stir the pot on ideas of governance\n> >>\n> >> Some quick comments:\n> >>\n> >> I have some objects that I am not ready to put into words, but I do\n> >> think there are easily some major objections to committee design. If I\n> >> vanish and never respond with my objections, perhaps there's an IETF\n> >> RFC about this already....\n> >>\n> >> Something that may mitigate my possible objections would be some\n> >> mandatory requirement about ecosystem echo-chambers making many\n> >> attempts and efforts at steelman representations of alternative\n> >> viewpoints. Understanding objections at a fundamental level, enough to\n> >> make strong steelman statements, is very important to ensure that the\n> >> competing opinions are not censored from consideration. Pathological\n> >> integration and internalization of these steelman arguments can be\n> >> very useful, even if the process looks unusual.\n> >>\n> >> Your process does not have to replace any particular BIP process\n> >> as-is, but rather could be an alternative that proceeds on its own\n> >> perhaps indefinitely without replacement. I don't think too many BIP\n> >> processes are necessarily incompatible except by namespace collision.\n> >>\n> >>\n> https://gist.github.com/andychase/dddb83c294295879308b#gistcomment-1566432\n> >>\n> >> - Bryan\n> >> http://heybryan.org/\n> >> 1 512 203 0507\n> >\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/1cc7ed2b/attachment-0001.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-09-04T20:31:44",
                "message_text_only": "On Fri, Sep 04, 2015 at 01:13:18PM -0700, Andy Chase via bitcoin-dev wrote:\n> Thanks for your thoughts.\n> \n> My proposal isn't perfect for sure. There's likely much better ways to do\n> it. But to be clear what I'm trying to solve is basically this:\n> \n> Who makes high-level Bitcoin decisions? Miners, client devs, merchants, or\n> users? Let's set up a system where everyone has a say and clear acceptance\n> can be reached.\n\nIt depends on a case-by-case basis.\n\nE.g. for soft-forks miners can do what they want with little ability for\nother parties to have a say. For non-consensus-related standards - e.g.\naddress formats - it's quite possible for a BIP to be \"accepted\" even if\nonly a small group of users use the standard. For hard-forks almost\neveryone is involved, though who can stop a fork isn't as well defined.\n\nIMO trying to \"set up a system\" in that kind of environment is silly,\nand likely to be a bureaucratic waste of time. Let the market decide, as\nhas happened previously. If you're idea isn't getting acceptance, do a\nbetter job of convincing the people who need to adopt it that it is a\ngood idea.\n\nNo amount of words on paper will change the fact that we can't force\npeople to run software they don't want to run. The entire formal part of\nthe BIP process is simply a convenience so we have clear, short, numbers\nthat we can refer to when discussing ideas and standards. The rest of\nthe process - e.g. what Adam Back and others have been referring to when\nattempting to dissuade Hearn and Andresen - is by definition always\ngoing to be a fuzzy, situation-specific, and generally undefined\nprocess.\n\nOr put another way, even if you did create your proposed process, the\nfirst time those committees \"approved\" a BIP that relevant stakeholders\ndisagreed with, you'd find out pretty quickly that \"clear acceptance\" of\nyour 4% sample would fall apart the moment the other 96% realized what a\ntiny minority was intending to do. Particularly if it was one of the\ninhernet cases where the underlying math means a particular group - like\nminers - has the ability to override what another group wants out of\nBitcoin.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000010f9e95aff6454fedb9d0a4b92a4108e9449c507936f9f18\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/eee44cae/attachment.sig>"
            },
            {
                "author": "Martin Becze",
                "date": "2015-09-04T20:42:51",
                "message_text_only": ">> Let the market decide\nHow about Futarchy?\n\nOn Fri, Sep 4, 2015 at 8:31 PM, Peter Todd via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Fri, Sep 04, 2015 at 01:13:18PM -0700, Andy Chase via bitcoin-dev wrote:\n> > Thanks for your thoughts.\n> >\n> > My proposal isn't perfect for sure. There's likely much better ways to do\n> > it. But to be clear what I'm trying to solve is basically this:\n> >\n> > Who makes high-level Bitcoin decisions? Miners, client devs, merchants,\n> or\n> > users? Let's set up a system where everyone has a say and clear\n> acceptance\n> > can be reached.\n>\n> It depends on a case-by-case basis.\n>\n> E.g. for soft-forks miners can do what they want with little ability for\n> other parties to have a say. For non-consensus-related standards - e.g.\n> address formats - it's quite possible for a BIP to be \"accepted\" even if\n> only a small group of users use the standard. For hard-forks almost\n> everyone is involved, though who can stop a fork isn't as well defined.\n>\n> IMO trying to \"set up a system\" in that kind of environment is silly,\n> and likely to be a bureaucratic waste of time. Let the market decide, as\n> has happened previously. If you're idea isn't getting acceptance, do a\n> better job of convincing the people who need to adopt it that it is a\n> good idea.\n>\n> No amount of words on paper will change the fact that we can't force\n> people to run software they don't want to run. The entire formal part of\n> the BIP process is simply a convenience so we have clear, short, numbers\n> that we can refer to when discussing ideas and standards. The rest of\n> the process - e.g. what Adam Back and others have been referring to when\n> attempting to dissuade Hearn and Andresen - is by definition always\n> going to be a fuzzy, situation-specific, and generally undefined\n> process.\n>\n> Or put another way, even if you did create your proposed process, the\n> first time those committees \"approved\" a BIP that relevant stakeholders\n> disagreed with, you'd find out pretty quickly that \"clear acceptance\" of\n> your 4% sample would fall apart the moment the other 96% realized what a\n> tiny minority was intending to do. Particularly if it was one of the\n> inhernet cases where the underlying math means a particular group - like\n> miners - has the ability to override what another group wants out of\n> Bitcoin.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 000000000000000010f9e95aff6454fedb9d0a4b92a4108e9449c507936f9f18\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/7d75cc66/attachment.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-04T21:05:02",
                "message_text_only": "> IMO trying to \"set up a system\" in that kind of environment is silly,\n\nThe first step is to define the system that is currently in place. \nThere is a system in place but it is just close to the vest and \nsometimes not discussed in public.  This works when Bitcoin has a small \nnumber of stakeholder but does not work well as other parties with \ndiverse interests get involved.  You can't expect major players to \ninvest large sums when the process is controlled by a tiny group of \npeople where some of those people have rather unusual opinions about \nthings and limited experience outside of technical areas within Bitcoin.\n\nYou just don't have enough experience in working on large projects to \nunderstand the benefits of the proposal discussed.  I suggest you look \ninto into and get some experience instead of posting rants that \nhighlight your inexperience.  What is silly is using a process that \ninvolves hyperbolic twitter and reddit posts.\n\nBasically such a process does not replace the analysis that is done now, \nit just makes it transparent and attempts to make it consistent so there \nis not all this confusion over comparing apples and oranges.  Here is \nlink that discusses some of the benefits and limitations of doing this: \n  http://www.jakeman.com.au/media/whats-right-with-risk-matrices.\n\nRuss"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-09-04T21:01:09",
                "message_text_only": "On Friday, September 04, 2015 8:13:18 PM Andy Chase via bitcoin-dev wrote:\n> Who makes high-level Bitcoin decisions? Miners, client devs, merchants, or\n> users? Let's set up a system where everyone has a say and clear acceptance\n> can be reached.\n\nFor hardforks (removing consensus rules), economic consensus: people who \naccept payment in bitcoins weighted by their actual volume of such payments. \nA supermajority subset may arguably be sufficient for some hardforks (which \ndon't violate Bitcoin's social contract) since they can effectively compel \nthe remaining economy to comply.\n\nFor softforks (adding consensus rules), a majority of miners: they can \"51% \nattack\" miners who don't go along with it.\n\nAnything else does not necessarily need universal agreement, so are \ncompletely up to the whim of individual software projects. If someone doesn't \nlike a decision in Core (for example), they can safely fork the code. If any \nsignificant amount of people use their fork, then the BIP is accepted whether \nor not Core later adopts it.\n\nNote this \"system\" is really describing a lack of a system - that is, what \nnaturally must happen for changes to occur. Softforks have a relatively \nmature technical method for measuring support and deploying (which I believe \nsomeone else is already working on a BIP describing), but the same thing is \nimpractical for hardforks. Some formal way to measure actual economic \nacceptance seems like a good idea to study, but it needs to be reasonably \naccurate so as to not change the outcome from its natural/necessary result.\n\nLuke"
            },
            {
                "author": "Andy Chase",
                "date": "2015-09-04T21:36:42",
                "message_text_only": "I understand your concerns. What kinds of changes do you think should go\nthrough a process like this? Just hard forks?\n\nI was thinking that an advantage of making all BIPs use this process is\nthat it makes it familiar and well used. Kinda like a muscle grows stronger\nwith use. If only hard forks go through the process then there's the risk\nthat the process has to be spun up whenever they happen which might cause\nconfusion.\n\nAnother reason I was thinking is that even small, local changes, it doesn't\nhurt to have a few more people take a look at it and approve it.\n\nThe bureaucracy only applies to BIPs, not PRs. There's only been 18\napproved/final/accepted BIPs in 4 years since BIP-0001. That's only about\n~5 per year. I get that bureaucracy is often a waste of time, but I just\ndon't think every second counts for these things.\n\nOn Fri, Sep 4, 2015 at 2:01 PM, Luke Dashjr <luke at dashjr.org> wrote:\n\n> On Friday, September 04, 2015 8:13:18 PM Andy Chase via bitcoin-dev wrote:\n> > Who makes high-level Bitcoin decisions? Miners, client devs, merchants,\n> or\n> > users? Let's set up a system where everyone has a say and clear\n> acceptance\n> > can be reached.\n>\n> For hardforks (removing consensus rules), economic consensus: people who\n> accept payment in bitcoins weighted by their actual volume of such\n> payments.\n> A supermajority subset may arguably be sufficient for some hardforks (which\n> don't violate Bitcoin's social contract) since they can effectively compel\n> the remaining economy to comply.\n>\n> For softforks (adding consensus rules), a majority of miners: they can \"51%\n> attack\" miners who don't go along with it.\n>\n> Anything else does not necessarily need universal agreement, so are\n> completely up to the whim of individual software projects. If someone\n> doesn't\n> like a decision in Core (for example), they can safely fork the code. If\n> any\n> significant amount of people use their fork, then the BIP is accepted\n> whether\n> or not Core later adopts it.\n>\n> Note this \"system\" is really describing a lack of a system - that is, what\n> naturally must happen for changes to occur. Softforks have a relatively\n> mature technical method for measuring support and deploying (which I\n> believe\n> someone else is already working on a BIP describing), but the same thing is\n> impractical for hardforks. Some formal way to measure actual economic\n> acceptance seems like a good idea to study, but it needs to be reasonably\n> accurate so as to not change the outcome from its natural/necessary result.\n>\n> Luke\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150904/31c3d750/attachment-0001.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-09-04T21:45:32",
                "message_text_only": "On Friday, September 04, 2015 9:36:42 PM Andy Chase wrote:\n> I understand your concerns. What kinds of changes do you think should go\n> through a process like this? Just hard forks?\n\nThe process loses meaning if it doesn't reflect reality. So only hardforks \nshould go through the hardfork process; only softforks through the softfork \nprocess; etc. Trying to make one-size-fits-all just means de facto accepted \nBIPs wouldn't be recognised as such because nobody cares to meet the higher \nrequirements.\n\nLuke"
            },
            {
                "author": "Andy Chase",
                "date": "2015-09-05T21:19:51",
                "message_text_only": "Okay for sure yeah writing another proposal that reflects the current state\nof affairs as people see it might provide some interesting perspective on\nthis proposal. I would welcome that.\n\nGreg: With no other direct comments appearing to be inbound I'd like to\nmove forward with this one and get a number assigned to it. Thanks!\n\nThanks to all for the discussion!\n\nOn Fri, Sep 4, 2015 at 2:45 PM, Luke Dashjr <luke at dashjr.org> wrote:\n\n> On Friday, September 04, 2015 9:36:42 PM Andy Chase wrote:\n> > I understand your concerns. What kinds of changes do you think should go\n> > through a process like this? Just hard forks?\n>\n> The process loses meaning if it doesn't reflect reality. So only hardforks\n> should go through the hardfork process; only softforks through the softfork\n> process; etc. Trying to make one-size-fits-all just means de facto accepted\n> BIPs wouldn't be recognised as such because nobody cares to meet the higher\n> requirements.\n>\n> Luke\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150905/9e4999b0/attachment.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-07T19:37:06",
                "message_text_only": "Sorry not to reply earlier. I have a rather long post. I've split it\ninto two sections, one explaining the background and secondly talking\nvery specifically about your proposal and possible areas to look at.\n\nI think there's a key misunderstanding about BIPs and \"who decides\nwhat in Bitcoin\". A BIP usually defines some problem and a solutions\nor helps communicate proposals to the technical community. They are\nsort of mini white papers on specific topics often with reference\nimplementations attached. They may be consensus critical, or not. The\nprocess for getting a BIP published is fairly loose in that it really\njust requires some discussion and relevance to Bitcoin regardless of\nwhether the proposal is something that would be accepted or used by\nothers in the ecosystem. The BIP editor is obviously going to filter\nout obvious nonesense and that shouldn't be controversial but obvious\nwhen you see it.\n\nYou need to separate out the idea of BIPs as is, and implementations\nof BIPs in Bitcoin software (like Bitcoin Core).\n\nTake BIP64 for example. It's a proposal that adds a service to nodes\nallowing anyone to query the UTXO set on the p2p network. Bitcoin Core\nas a project has not implemented it but was instead implemented in XT\nand is utilised by Lighthouse. So the BIP specification is there in\nthe BIPs repository. As far as the bitcoin ecosystem goes, only\nBitcoin XT and lighthouse utilise it so far.\n\nBIP101 is another example, but one of a consensus critical proposal\nthat would change the Bitcoin protocol (i.e. requires a hard fork). It\nwas adopted by only the XT project and so far no other software. At\nthe time of writing miners have chosen not to run implementations of\nBIP101.\n\nYou can see the BIPs authoring and publishing process is a separate\nissue entirely to the implementation and acceptance by the Bitcoin\necosystem.\n\nFor non-consensus critical proposals like BIP64, or maybe one relating\nto privacy (how to order transaction output for example), you could\njudge acceptance of the proposal by the number of software projects\nthat implement the proposal, and the number of users it impacts. If a\nproposal is utilised by many projects, but not the few projects that\nhave the majority of users, one could not claim wide acceptance.\n\nFor consensus critical proposals like BIP66 (Strict DER encoding) this\nBIP was implemented in at least two bitcoin software implementations.\nOver 95% of miners adopted the proposal over a 4.5 month period. The\nBIP became de facto accepted, and in fact, once 95% lock-in was\nachieved, the BIP became Final by rights that the consensus rules for\nthe Bitcoin network had changed.\n\nIn the case of consensus critical proposals like that, you can only\nwrite proposals, implement it in software and hope they are adopted.\n\nNow where does the confusion arise? Well, Bitcoin Core is the de facto\nreference implementation by virtue of having the largest technical\ncontributor base and the widest userbase of any Bitcoin full node\nimplementation. This is where I believe, the community get stuck in\ntheir assumptions and is so obvious it may have been overlooked.\n\nConsensus rule changes to Bitcoin Core are always documented as BIPs\nso the exact details can be picked up by other software implementers\n(if they so desire). Take CHECKLOCKTIMEVERIFY a new widely anticipated\nopcode. The proposal implemented in Bitcoin Core and eventually\nmerged. Peter also authored BIP65 (required because without it, his\nproposal could not be considered for Bitcoin Core).\n\nIt is not that BIP65 was somehow \"accepted\", in fact, as it stands,\nBIP65 is still just a draft because while there is a BIP and a\nreference implementation in Bitcoin Core, the consensus changes to the\nBitcoin protocol have not been proposed to the community (through a\nsoft fork), and thus acceptance is still only a possibility (although\nacceptance is extremely likely because service providers are literally\nchomping at the bit waiting for deployment).\n\nAlso I would like to note that it's only an internal rule of Bitcoin\nCore that consensus rule changes require a formal BIP. It is not a\nrequirement laid down from the BIP gods. BIPs simply serve as a way to\ncommunicate ideas and proposals. The community at large will decide if\na BIP becomes widely adopted or not. Of course, Bitcoin Core has a\nmajor influence on this because they have the largest user base. It is\nrelevant to say the large userbase is not just a historical artefact\nby virtue of being the first Bitcoin implementation. Bitcoin Core is\nwidely trusted by commercial users because of the high developer\ncount, wide technical expertise and relative security given knowing\nthat they will be supported with security and maintenance releases.\n\nYOUR PROPOSAL\n\nGetting back to your specific proposal. It seems to focus more on\ngetting BIPs accepted in the sense of published and missed the wider\npicture. As I have detailed, getting published isnt a problem. Anyone\ncan make a proposal, so long as it's not obviously off topic or\nnonsensical, there is no grounds to refuse to publish it.\n\nAny part of your proposal which seems to infer governance of Bitcoin\nis misplaced because it's not the place of BIPs. The Bitcoin Core\nproject is not the BIPs project and their rules are their own. They\nare one implementation, and very influential one yes, but, not the one\ntrue implementation to rule them all.\n\nWhere I do think the BIP-1 text falls down is with the workflow of\nACCEPTED/REJECTED because it does not really define who is accepting\nand rejecting what and misses much of the reality of the process in\nthe real world. Given the purpose of BIPs is a formal way to\ncommunicate technical proposals to the bitcoin community (i.e.\nimplementers and protocol consumers) the work flow needs to be\nadjusted.\n\nAnyone can submit a proposal and the state of the proposal can be\nDRAFT or WITHDRAWN but draft here is confusing. Draft would suggest\nit's a work in progress, but the proposal is \"complete\" when the\nproposer is happy with the final text. Downstream implementers should\nnot attempt to write code (in my opinion) until the proposal has been\nfinalised by the authors. Only the author has the right to say when\ntheir proposal is finished.\n\nThe states of Accepted / Rejected are easy for consensus critical\nchanges, especially once versionbits softforking is enacted and\nproposals will have a timeout associated. Certainly for deployed\nproposals you could say the proposal is \"active\" or better still\n\"pending approval\". However \"accepted\" and \"rejected\" is difficult for\nsay privacy standards because how can you gauge or measure it. As I\nsaid earlier, you might have a lot of small projects implementing some\nprivacy standards, but if the major wallets dont, and thus the\nmajority of users, how would you gauge it?\n\nSomething is a standard only when it becomes a standard by virtue of\nhaving become a standard :)\n\n\"Replaced\" is an easy state, when another proposal supercedes and\nreplaces an older one. Again the wording could be better here.\n\"deprecated\" would also be appropriate in some circumstances.\n\nI'm not making a concrete proposal, I'm just highlighting where BIP-1\nsort of falls apart because of an incongruence with the workflow\nstates and what actually happens in real life.\n\nLocal to the BIPs project, I do think the BIPs editor, and guidelines\ntry to filter proposals by raising the bar: i.e. requiring proposal to\nbe polished through peer review before they are formally published as\ndraft BIPs. Though this process an author would a) get most of his\ndetails right first time, and b) have some relative confidence his/her\nidea was useful and withdraw any obvious bad proposals themselves. An\nauthor may still decide, despite many objections from their peers they\nwant to proceed with publishing and nothing should stop them providing\nit's relevant to the Bitcoin space. Peer review pressure is likely to\nact as the best filtering mechanism in this case anyway (no-one would\nwant to be seen as an ass right?). Personally speaking, I felt quite\nnervous proposing my own blocksize ideas. I sought opinions in private\nfirst and had it been widely decried would probably not have pursued\nit any further.\n\nSo in summary, I think some aspects of BIP-1 could do with polishing\nas I have detailed, specially around the \"workflow states\" but not to\nintroduce any committees to the process, but where possible to extract\nstate from the real state of the BIP in the real world. In fact, this\nis my direct argument against any forms of committee, in that the\nstate of a BIP is determined by factors outside of any particular\nindividual's or groups' purview.\n\nOn Fri, Sep 4, 2015 at 9:13 PM, Andy Chase <theandychase at gmail.com> wrote:\n> Thanks for your thoughts.\n>\n> My proposal isn't perfect for sure. There's likely much better ways to do\n> it. But to be clear what I'm trying to solve is basically this:\n>\n> Who makes high-level Bitcoin decisions? Miners, client devs, merchants, or\n> users? Let's set up a system where everyone has a say and clear acceptance\n> can be reached.\n>\n> ---\n>\n> My motivation for writing this proposal is stated right at the start:\n>> \"The current process for accepting a BIP is not clearly defined. While\n>> BIP-0001 defines the process for writing and submitting a Bitcoin\n>> Improvement Proposal to the community it does not specify the precise method\n>> for which BIPs are considered accepted or rejected.\"\n>\n> BIPs are considered \"accepted\" right now based on an undefined system, quite\n> honestly. Btc Drak: What's the system for accepting a BIP? Words like\n> \"consensus\" come up but they aren't defined. My goal is to define a system\n> that makes finding \"consensus\" (I like the word \"acceptance\" better) in a\n> clear and fair way.\n>\n> I.e. what's broken?\n>\n> * Being sure that a proposal is widely accepted or rejected\n> * Preventing deadlock (i.e. one person's weak objections preventing\n> acceptance)\n> * Receiving feedback from important segments like user groups,\n> merchants/exchanges, etc. in a systematic and clear way instead of going and\n> forth or having \"oracles\" on technical advisory boards.\n>\n>> Yes the process is loose, but is it broken?\n>\n> Yes/No. Work gets done with the current process. Work can get done with this\n> process. The goal is for this process is to be safer/clearer/better defined\n> way.\n>\n>> There have been a flood of\n>> BIPs added recently with zero bureaucracy or friction.\n>\n> As we move forward, we want to balance the powers in such a way that we may\n> want to pause a bit before we accept each proposal. 2 weeks for comments + 2\n> weeks for opinions will slow things down, but it shouldn't stall meaningful\n> work. I used 4 weeks for the process with the understanding that most\n> proposals are clear and easily acceptable. Controversial proposals will\n> likely need more time and thus will likely have be submitted at least twice\n> to discover a clear response.\n>\n> \"Accepting\" a BIP means just that: It's accepted. What's acceptance mean?\n> This proposal provides an answer.\n>\n> Client implementations, users, miners, and merchants can feel safe\n> implementing and using a feature that has clear acceptance. This process\n> isn't meant to force anything on client implementors, users, miners, or\n> merchants.\n>\n> On Fri, Sep 4, 2015 at 12:20 PM, Btc Drak <btcdrak at gmail.com> wrote:\n>>\n>> I'm rather perplexed about this proposal. What exactly is wrong with\n>> the existing BIPs process? I mean, it seems to me anyone can publish a\n>> BIP pretty easily in the BIPs repository. There doesnt seems to be any\n>> real barrier to entry whatsoever. I know there have been all manner of\n>> aspersions, but having just written two BIPs there was no friction at\n>> all.\n>>\n>> Whether the ecosystem adopts a BIP is another question of course, but\n>> that's out of scope of the BIPs project anyhow. Take BIP101\n>> controversial as it gets, but it's there. Whether Bitcoin implementers\n>> implement it is another kettle of fish and a matter for each project\n>> to decide. It's absolutely NOT the realm of the BIPs project itself.\n>> Bitcoin Core does not make any consensus critical changes with a BIP.\n>> Where one seeks to establish certain standards, say for privacy, a BIP\n>> would be appropriate so the ecosystem can harmonise methodology across\n>> the board.\n>>\n>> The status of a BIP is not really determined by anyone, it's by\n>> adoption - that's where consensus happens. There's a little legroom\n>> around this but I'm not entirely sure what you are trying to solve.\n>> Yes the process is loose, but is it broken? There have been a flood of\n>> BIPs added recently with zero bureaucracy or friction.\n>>\n>> BIP0001 is the BIP that defines the BIP process. Interestingly enough\n>> the only BIP that might be controversial is in fact a BIP to change\n>> the way BIPs are handled!\n>>\n>> So I'd really prefer to start this conversation with a breakdown of\n>> what you think is broken first before tackling what may or may not\n>> need fixing. I would be very cautious bringing \"administrative\"\n>> burdens to the process or evicting common sense from the proceedings.\n>> Much of the debates around consensus building seem to negate the\n>> importance of common sense and the simple fact that \"it's obvious when\n>> you see it\".\n>>\n>> I'm sure there can be improvements, but for me personally, I need to\n>> see what is broken before I can make any judgement on a potential way\n>> forward, and if it's not broken, we should leave it alone.\n>>\n>>\n>> On Fri, Sep 4, 2015 at 5:40 AM, Andy Chase via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > As posted:\n>> >\n>> > **Enforcement/Organization** I agree with your comments. I don't believe\n>> > in\n>> > setting up an organization to manage this process (would be too much\n>> > power\n>> > and not really needed because the internet is pretty good at information\n>> > sharing). Therefore, I designed it around the assumption that\n>> > participation\n>> > is voluntary. This means that it's hard to enforce rules like forcing\n>> > groups\n>> > to see the other side. Groupthink/Echo chambers is real and is bad but\n>> > it's\n>> > hard to change human nature.\n>> >\n>> > In regards to enforcement, I believe that the best approach would be to\n>> > motivate committees to produce the best opinion they can (and also proof\n>> > of\n>> > stake, another weak point in this proposal), as the better they can do\n>> > this\n>> > the more likely the community will accept their opinion as valid and\n>> > important.\n>> >\n>> > Indeed, I believe that without an organization managing the process,\n>> > it's up\n>> > to each individual reader of each BIP/Opinions set to make the decision\n>> > on\n>> > whether or not there is clear and true community acceptance.\n>> >\n>> > ----\n>> >\n>> > **Committee versus another approach**\n>> >\n>> > Pros of using Committees:\n>> >\n>> > * Committees are used today in many fields with a range of success. Lots\n>> > of\n>> > previous work to work off of here, history is established.\n>> > * Many segments already have committee-like structures (Merchants\n>> > produce\n>> > shared signed documents, miners often represent themselves, User groups\n>> > have\n>> > representatives like voting on subreddit moderators, Core Devs have Core\n>> > Devs)\n>> > * Committees can filter a range of opinions down to a yes/no\n>> > * Committees have real people that can be talked to, contacted, etc.\n>> > * Much easier to proof stake in a range (People generally accept the\n>> > Bitcoin\n>> > Core has 70-90% of the market share) vs someone trying to proof they\n>> > make up\n>> > (.000001% of the Bitcoin user-base)\n>> > * Committees have some stability, encourages experience and expertise\n>> > (Committee members can be knowledgeable in their area and adequately\n>> > understand BIPs)\n>> >\n>> > Cons:\n>> >\n>> > * Fear of committees working in the dark, censoring opinions (i.e. \"Dark\n>> > smokey room of fat cats\") (Possible solution: make committee power fluid\n>> > i.e. easily abandon-able: miners can change pools, users can change\n>> > client\n>> > forks, change merchants, users can re-group, encourage transparency)\n>> > * More centralized, centralization of power (generally bad) (Possible\n>> > solution: encourage smaller committees)\n>> > * Centralization pressure (groups may seek to consolidate to gain power)\n>> > (Possible solution: Segmentation)\n>> > * Encourages groupthink, political maneuvers, turns good people into\n>> > politicians, mud-tossing\n>> >\n>> > **Another possible approach: micro votes**\n>> >\n>> > Pros:\n>> >\n>> > * Each user can represent themselves, no censorship\n>> > * People feel more involved and empowered\n>> >\n>> > Cons:\n>> >\n>> > * How to prove and prevent manipulation?\n>> > * Only motivated people will contribute. Motivated people may be\n>> > motivated\n>> > for bad reasons.\n>> >\n>> >\n>> > On Thu, Sep 3, 2015 at 5:43 PM, Bryan Bishop <kanzure at gmail.com> wrote:\n>> >>\n>> >> On Thu, Sep 3, 2015 at 7:30 PM, Andy Chase via bitcoin-dev\n>> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >> > I wrote the BIP mostly to stir the pot on ideas of governance\n>> >>\n>> >> Some quick comments:\n>> >>\n>> >> I have some objects that I am not ready to put into words, but I do\n>> >> think there are easily some major objections to committee design. If I\n>> >> vanish and never respond with my objections, perhaps there's an IETF\n>> >> RFC about this already....\n>> >>\n>> >> Something that may mitigate my possible objections would be some\n>> >> mandatory requirement about ecosystem echo-chambers making many\n>> >> attempts and efforts at steelman representations of alternative\n>> >> viewpoints. Understanding objections at a fundamental level, enough to\n>> >> make strong steelman statements, is very important to ensure that the\n>> >> competing opinions are not censored from consideration. Pathological\n>> >> integration and internalization of these steelman arguments can be\n>> >> very useful, even if the process looks unusual.\n>> >>\n>> >> Your process does not have to replace any particular BIP process\n>> >> as-is, but rather could be an alternative that proceeds on its own\n>> >> perhaps indefinitely without replacement. I don't think too many BIP\n>> >> processes are necessarily incompatible except by namespace collision.\n>> >>\n>> >>\n>> >> https://gist.github.com/andychase/dddb83c294295879308b#gistcomment-1566432\n>> >>\n>> >> - Bryan\n>> >> http://heybryan.org/\n>> >> 1 512 203 0507\n>> >\n>> >\n>> >\n>> > _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >\n>\n>"
            },
            {
                "author": "Andy Chase",
                "date": "2015-09-10T01:21:41",
                "message_text_only": "Thanks for your response BTC Drak, I will attempt to summarize your\npoints and respond to them:\n\n* Some BIPs are not consensus critical -- True, see my response to Luke\n* BIPs do not imply usage -- This I covered in my paper.\n* Acceptance can be defined by actual use -- That's one way of doing it\n\n> Getting back to your specific proposal. It seems to focus more on\n> getting BIPs accepted in the sense of published\n\nWildly incorrect. My BIP had nothing to do with getting published. The\nfirst words you can read in my proposal are as follows:\n\n> The current process for accepting a BIP is not clearly defined. While BIP-0001 defines the process for writing and submitting a Bitcoin Improvement Proposal to the community it does not specify the precise method for which BIPs are considered accepted or rejected. This proposal sets up a method for determining BIP acceptance.\n\n* but the proposal is \"complete\" when the proposer is happy with the final text.\n\nThis would be a cool inclusion. That is the intent of my \"Submit for\ncomments\" process.\n\n---\n\nOverall your post seemed to miss the point of my proposal, but that's\nlikely my fault for poor wording. I'm trying to develop a process of\ncoming to \"consensus\" i.e. gathering feedback and reducing opinions\ndown to a yes/no should this BIP happen or should we find a better\nsolution.\n\nImportantly, it's not client specific. It's just a way of saying \"hey\neveryone, here's a problem and solution that a lot of people agree on\"\nor \"hey everyone, here's a problem and solution that has a few\nproblems with it\"\n\nIt's true that even if a \"BIP\" is \"accepted\" by my proposal it still\nmay not actually happen (this is mentioned in my proposal), and I\nbelieve that's healthy. We can't force a change on anyone nor should\nwe.\n\n---\n\nSince so many people are missing the actual problem I'm solving,\nhere's another way of wording it: A BIP is proposed and goes through\nthe process. A PR is submitted that matches the BIP perfectly, and is\nsubmitted and vetted. Should wladimir merge it?\n\nMy process isn't perfect solution that would make it so we could\nreplace wladimir with a wladBot. But it's a tool we can use for\ngathering meaningful information to help guide that decision. Waiting\non all objections to be handled works okay so far but won't work\nforever.\n\n\nOn Mon, Sep 7, 2015 at 12:37 PM, Btc Drak <btcdrak at gmail.com> wrote:\n>\n> Sorry not to reply earlier. I have a rather long post. I've split it\n> into two sections, one explaining the background and secondly talking\n> very specifically about your proposal and possible areas to look at.\n>\n> I think there's a key misunderstanding about BIPs and \"who decides\n> what in Bitcoin\". A BIP usually defines some problem and a solutions\n> or helps communicate proposals to the technical community. They are\n> sort of mini white papers on specific topics often with reference\n> implementations attached. They may be consensus critical, or not. The\n> process for getting a BIP published is fairly loose in that it really\n> just requires some discussion and relevance to Bitcoin regardless of\n> whether the proposal is something that would be accepted or used by\n> others in the ecosystem. The BIP editor is obviously going to filter\n> out obvious nonesense and that shouldn't be controversial but obvious\n> when you see it.\n>\n> You need to separate out the idea of BIPs as is, and implementations\n> of BIPs in Bitcoin software (like Bitcoin Core).\n>\n> Take BIP64 for example. It's a proposal that adds a service to nodes\n> allowing anyone to query the UTXO set on the p2p network. Bitcoin Core\n> as a project has not implemented it but was instead implemented in XT\n> and is utilised by Lighthouse. So the BIP specification is there in\n> the BIPs repository. As far as the bitcoin ecosystem goes, only\n> Bitcoin XT and lighthouse utilise it so far.\n>\n> BIP101 is another example, but one of a consensus critical proposal\n> that would change the Bitcoin protocol (i.e. requires a hard fork). It\n> was adopted by only the XT project and so far no other software. At\n> the time of writing miners have chosen not to run implementations of\n> BIP101.\n>\n> You can see the BIPs authoring and publishing process is a separate\n> issue entirely to the implementation and acceptance by the Bitcoin\n> ecosystem.\n>\n> For non-consensus critical proposals like BIP64, or maybe one relating\n> to privacy (how to order transaction output for example), you could\n> judge acceptance of the proposal by the number of software projects\n> that implement the proposal, and the number of users it impacts. If a\n> proposal is utilised by many projects, but not the few projects that\n> have the majority of users, one could not claim wide acceptance.\n>\n> For consensus critical proposals like BIP66 (Strict DER encoding) this\n> BIP was implemented in at least two bitcoin software implementations.\n> Over 95% of miners adopted the proposal over a 4.5 month period. The\n> BIP became de facto accepted, and in fact, once 95% lock-in was\n> achieved, the BIP became Final by rights that the consensus rules for\n> the Bitcoin network had changed.\n>\n> In the case of consensus critical proposals like that, you can only\n> write proposals, implement it in software and hope they are adopted.\n>\n> Now where does the confusion arise? Well, Bitcoin Core is the de facto\n> reference implementation by virtue of having the largest technical\n> contributor base and the widest userbase of any Bitcoin full node\n> implementation. This is where I believe, the community get stuck in\n> their assumptions and is so obvious it may have been overlooked.\n>\n> Consensus rule changes to Bitcoin Core are always documented as BIPs\n> so the exact details can be picked up by other software implementers\n> (if they so desire). Take CHECKLOCKTIMEVERIFY a new widely anticipated\n> opcode. The proposal implemented in Bitcoin Core and eventually\n> merged. Peter also authored BIP65 (required because without it, his\n> proposal could not be considered for Bitcoin Core).\n>\n> It is not that BIP65 was somehow \"accepted\", in fact, as it stands,\n> BIP65 is still just a draft because while there is a BIP and a\n> reference implementation in Bitcoin Core, the consensus changes to the\n> Bitcoin protocol have not been proposed to the community (through a\n> soft fork), and thus acceptance is still only a possibility (although\n> acceptance is extremely likely because service providers are literally\n> chomping at the bit waiting for deployment).\n>\n> Also I would like to note that it's only an internal rule of Bitcoin\n> Core that consensus rule changes require a formal BIP. It is not a\n> requirement laid down from the BIP gods. BIPs simply serve as a way to\n> communicate ideas and proposals. The community at large will decide if\n> a BIP becomes widely adopted or not. Of course, Bitcoin Core has a\n> major influence on this because they have the largest user base. It is\n> relevant to say the large userbase is not just a historical artefact\n> by virtue of being the first Bitcoin implementation. Bitcoin Core is\n> widely trusted by commercial users because of the high developer\n> count, wide technical expertise and relative security given knowing\n> that they will be supported with security and maintenance releases.\n>\n> YOUR PROPOSAL\n>\n> Getting back to your specific proposal. It seems to focus more on\n> getting BIPs accepted in the sense of published and missed the wider\n> picture. As I have detailed, getting published isnt a problem. Anyone\n> can make a proposal, so long as it's not obviously off topic or\n> nonsensical, there is no grounds to refuse to publish it.\n>\n> Any part of your proposal which seems to infer governance of Bitcoin\n> is misplaced because it's not the place of BIPs. The Bitcoin Core\n> project is not the BIPs project and their rules are their own. They\n> are one implementation, and very influential one yes, but, not the one\n> true implementation to rule them all.\n>\n> Where I do think the BIP-1 text falls down is with the workflow of\n> ACCEPTED/REJECTED because it does not really define who is accepting\n> and rejecting what and misses much of the reality of the process in\n> the real world. Given the purpose of BIPs is a formal way to\n> communicate technical proposals to the bitcoin community (i.e.\n> implementers and protocol consumers) the work flow needs to be\n> adjusted.\n>\n> Anyone can submit a proposal and the state of the proposal can be\n> DRAFT or WITHDRAWN but draft here is confusing. Draft would suggest\n> it's a work in progress, but the proposal is \"complete\" when the\n> proposer is happy with the final text. Downstream implementers should\n> not attempt to write code (in my opinion) until the proposal has been\n> finalised by the authors. Only the author has the right to say when\n> their proposal is finished.\n>\n> The states of Accepted / Rejected are easy for consensus critical\n> changes, especially once versionbits softforking is enacted and\n> proposals will have a timeout associated. Certainly for deployed\n> proposals you could say the proposal is \"active\" or better still\n> \"pending approval\". However \"accepted\" and \"rejected\" is difficult for\n> say privacy standards because how can you gauge or measure it. As I\n> said earlier, you might have a lot of small projects implementing some\n> privacy standards, but if the major wallets dont, and thus the\n> majority of users, how would you gauge it?\n>\n> Something is a standard only when it becomes a standard by virtue of\n> having become a standard :)\n>\n> \"Replaced\" is an easy state, when another proposal supercedes and\n> replaces an older one. Again the wording could be better here.\n> \"deprecated\" would also be appropriate in some circumstances.\n>\n> I'm not making a concrete proposal, I'm just highlighting where BIP-1\n> sort of falls apart because of an incongruence with the workflow\n> states and what actually happens in real life.\n>\n> Local to the BIPs project, I do think the BIPs editor, and guidelines\n> try to filter proposals by raising the bar: i.e. requiring proposal to\n> be polished through peer review before they are formally published as\n> draft BIPs. Though this process an author would a) get most of his\n> details right first time, and b) have some relative confidence his/her\n> idea was useful and withdraw any obvious bad proposals themselves. An\n> author may still decide, despite many objections from their peers they\n> want to proceed with publishing and nothing should stop them providing\n> it's relevant to the Bitcoin space. Peer review pressure is likely to\n> act as the best filtering mechanism in this case anyway (no-one would\n> want to be seen as an ass right?). Personally speaking, I felt quite\n> nervous proposing my own blocksize ideas. I sought opinions in private\n> first and had it been widely decried would probably not have pursued\n> it any further.\n>\n> So in summary, I think some aspects of BIP-1 could do with polishing\n> as I have detailed, specially around the \"workflow states\" but not to\n> introduce any committees to the process, but where possible to extract\n> state from the real state of the BIP in the real world. In fact, this\n> is my direct argument against any forms of committee, in that the\n> state of a BIP is determined by factors outside of any particular\n> individual's or groups' purview.\n>"
            },
            {
                "author": "Andy Chase",
                "date": "2015-09-12T23:50:32",
                "message_text_only": "Wanted to throw up here some feedback I got off-list. Source:\nhttp://bitco.in/forum/threads/bitcoinxt-dispute-resolution-etc.36/#post-602\n\n==== [1] ====\n\n> Interesting.\n>\n> I like your idea that people can form representational groups which then collectively votes (\"committees\"). Basically an individual can delegate his vote to one, but take it away at any time. This allows one person to do the detail work on behalf of others.\n>\n> I think that your 2 week then 2 week process is too constrained. I would propose that the groups have 2 weeks to respond, then an indetermine time occurs where the BIP author can work to resolve the open questions by corresponding directly with the groups. Then 2 week final arguments and voting.\n>\n> I think a clear definition of what \"accepted\" means would be important. I think that \"accepted\" should mean that the master github branch, and relevant project releases should incorporate the BIP as soon as reasonably possible after a branch is created that passes security and code competence checks. In other words, the \"YES\" votes may have to implement the BIP or pay to have it implemented.\n>\n> I think that you need to clearly define how the different groups prove their stake, and perhaps specify maximum ratios. That is, you can't have 100 committees with 99 merchant processors and 1 miner.\n\n==== [2] ====\n\nTimeline\n--------\n\nthat's an important point. I've gotten that echoed from a few people\nnow. I was thinking that a re-submit could be called if more time is\nneeded but I think your method of allowing the author to have control\nover the pace makes a lot of sense.\n\nWhat does accepted mean? \"Accepted\" is the hardest thing to grasp in\nthis paper. There's just no way to force client authors, users, and\nminers, to integrate and use a change, even if one is accepted by my\nprocess. I.e. I'm trying to define what \"accepted\" even means, but\nmaybe I should use different words that don't have baggage. Like my\nprocess could indicate \"community greenlight\" and client authors who\nrefuse to follow \"community greenlight\" can do so, but they are going\nagainst the wishes of the community and that becomes obvious. Other\nclient others (like btcd) might follow the greenlight recommendation\ninstead and users are free to switch to that. Then there could also be\n\"community redlight\", and \"no decision reached\" in which there was\nconflicting views.\n\nIf I go this route, I could use the word \"accepted\" to mean something\nlike \"appears in the longest fork\", or \"is in use by multiple clients,\nmerchants, & users\" (for things like urls that aren't\nblockchain-related).\n\nHow to prove stake?\n--------------------\n\n\"How groups prove their stake\" is the hard question that has to be\naddressed in this proposal or any. I've pushed forward several\nrecommendations but there's no perfect solution that everyone will\naccept. For users, in the comments I suggested a \"community sample\"\nmethod that requires that only a random few people in a group to give\nup their privacy.\n\nRatios\n------\n\n\nThe \"accepted\" or \"greenlit\" standard in my proposal is defined as:\nleast 70% of the represented percentage stake in 3 out of the 4\nBitcoin segments. It's true that it seems weird to have 1 group in a\nsegment by itself (seems like too much power), you have to recall that\ncommittees can consist of several groups that have agreed to act\ntogether. If the 1 miner group had conflicts they'd separate to make\npublic both their views.\n\nI'm interested in if you think that definition should be changed or if\nyou are worried about those risks.\n\n==== [3] ====\n\n> What does accepted mean?\n> ------------------------\n>\n> I like your \"community greenlight\" idea to cover how BIPs apply to the larger community of wallet providers. However, I also think that there should be stronger language applied to the Bitcoin Core or Bitcoin XT (if a XIP is submitted). That language should make it absolutely clear that committers can't revert or refuse to commit a change that implements the \"greenlighted\" BIP just because they don't agree with it.\n>\n> How to prove stake?\n> -------------------\n>\n> I think we need to nail this down (even if imperfectly) to make this BIP real. Personally, I think that there should be at least one way to anonymously vote (say by owning coins). But I don't feel that there's any need to preserve anonymity for the other stakeholders. In fact, for some groups I think it would be bad to allow anonymous voters. If you own a bunch of coins, or prove massive mining capacity, there can be no doubt that you are incentivized to vote for what is best for bitcoin. But some vocal forum writer, speaker or professor might not care about Bitcoin's ultimate success, or be a paid shill or sockpuppet. But requiring identity at least these people are putting a little bit of their personal reputation behind their comments. Of course, companies already disclose their identities so no problem there.\n>\n> But how do we choose which indirect stakeholders (companies, etc) get a vote? All I can think is that coin owners vote that this company is in fact important... this would be a once every 5 years or something vote not something you can give or take away every time a BIP is proposed.\n>\n> Ratios\n> ------\n>\n> Somehow I missed that in your doc. Your proposal seems ok, although it may be hard to get consensus at those levels. And honestly I think that miners have too much power already -- I think that Bitcoin should be optimizing itself for users not for infrastructure. At the same time, I hope that miners realize that their business model requires consumer users (vs corporate users like bank 2 bank) so will probably vote what they believe is best for consumers..\n\nOn Wed, Sep 9, 2015 at 6:21 PM, Andy Chase <theandychase at gmail.com> wrote:\n> Thanks for your response BTC Drak, I will attempt to summarize your\n> points and respond to them:\n>\n> * Some BIPs are not consensus critical -- True, see my response to Luke\n> * BIPs do not imply usage -- This I covered in my paper.\n> * Acceptance can be defined by actual use -- That's one way of doing it\n>\n>> Getting back to your specific proposal. It seems to focus more on\n>> getting BIPs accepted in the sense of published\n>\n> Wildly incorrect. My BIP had nothing to do with getting published. The\n> first words you can read in my proposal are as follows:\n>\n>> The current process for accepting a BIP is not clearly defined. While BIP-0001 defines the process for writing and submitting a Bitcoin Improvement Proposal to the community it does not specify the precise method for which BIPs are considered accepted or rejected. This proposal sets up a method for determining BIP acceptance.\n>\n> * but the proposal is \"complete\" when the proposer is happy with the final text.\n>\n> This would be a cool inclusion. That is the intent of my \"Submit for\n> comments\" process.\n>\n> ---\n>\n> Overall your post seemed to miss the point of my proposal, but that's\n> likely my fault for poor wording. I'm trying to develop a process of\n> coming to \"consensus\" i.e. gathering feedback and reducing opinions\n> down to a yes/no should this BIP happen or should we find a better\n> solution.\n>\n> Importantly, it's not client specific. It's just a way of saying \"hey\n> everyone, here's a problem and solution that a lot of people agree on\"\n> or \"hey everyone, here's a problem and solution that has a few\n> problems with it\"\n>\n> It's true that even if a \"BIP\" is \"accepted\" by my proposal it still\n> may not actually happen (this is mentioned in my proposal), and I\n> believe that's healthy. We can't force a change on anyone nor should\n> we.\n>\n> ---\n>\n> Since so many people are missing the actual problem I'm solving,\n> here's another way of wording it: A BIP is proposed and goes through\n> the process. A PR is submitted that matches the BIP perfectly, and is\n> submitted and vetted. Should wladimir merge it?\n>\n> My process isn't perfect solution that would make it so we could\n> replace wladimir with a wladBot. But it's a tool we can use for\n> gathering meaningful information to help guide that decision. Waiting\n> on all objections to be handled works okay so far but won't work\n> forever.\n>\n>\n> On Mon, Sep 7, 2015 at 12:37 PM, Btc Drak <btcdrak at gmail.com> wrote:\n>>\n>> Sorry not to reply earlier. I have a rather long post. I've split it\n>> into two sections, one explaining the background and secondly talking\n>> very specifically about your proposal and possible areas to look at.\n>>\n>> I think there's a key misunderstanding about BIPs and \"who decides\n>> what in Bitcoin\". A BIP usually defines some problem and a solutions\n>> or helps communicate proposals to the technical community. They are\n>> sort of mini white papers on specific topics often with reference\n>> implementations attached. They may be consensus critical, or not. The\n>> process for getting a BIP published is fairly loose in that it really\n>> just requires some discussion and relevance to Bitcoin regardless of\n>> whether the proposal is something that would be accepted or used by\n>> others in the ecosystem. The BIP editor is obviously going to filter\n>> out obvious nonesense and that shouldn't be controversial but obvious\n>> when you see it.\n>>\n>> You need to separate out the idea of BIPs as is, and implementations\n>> of BIPs in Bitcoin software (like Bitcoin Core).\n>>\n>> Take BIP64 for example. It's a proposal that adds a service to nodes\n>> allowing anyone to query the UTXO set on the p2p network. Bitcoin Core\n>> as a project has not implemented it but was instead implemented in XT\n>> and is utilised by Lighthouse. So the BIP specification is there in\n>> the BIPs repository. As far as the bitcoin ecosystem goes, only\n>> Bitcoin XT and lighthouse utilise it so far.\n>>\n>> BIP101 is another example, but one of a consensus critical proposal\n>> that would change the Bitcoin protocol (i.e. requires a hard fork). It\n>> was adopted by only the XT project and so far no other software. At\n>> the time of writing miners have chosen not to run implementations of\n>> BIP101.\n>>\n>> You can see the BIPs authoring and publishing process is a separate\n>> issue entirely to the implementation and acceptance by the Bitcoin\n>> ecosystem.\n>>\n>> For non-consensus critical proposals like BIP64, or maybe one relating\n>> to privacy (how to order transaction output for example), you could\n>> judge acceptance of the proposal by the number of software projects\n>> that implement the proposal, and the number of users it impacts. If a\n>> proposal is utilised by many projects, but not the few projects that\n>> have the majority of users, one could not claim wide acceptance.\n>>\n>> For consensus critical proposals like BIP66 (Strict DER encoding) this\n>> BIP was implemented in at least two bitcoin software implementations.\n>> Over 95% of miners adopted the proposal over a 4.5 month period. The\n>> BIP became de facto accepted, and in fact, once 95% lock-in was\n>> achieved, the BIP became Final by rights that the consensus rules for\n>> the Bitcoin network had changed.\n>>\n>> In the case of consensus critical proposals like that, you can only\n>> write proposals, implement it in software and hope they are adopted.\n>>\n>> Now where does the confusion arise? Well, Bitcoin Core is the de facto\n>> reference implementation by virtue of having the largest technical\n>> contributor base and the widest userbase of any Bitcoin full node\n>> implementation. This is where I believe, the community get stuck in\n>> their assumptions and is so obvious it may have been overlooked.\n>>\n>> Consensus rule changes to Bitcoin Core are always documented as BIPs\n>> so the exact details can be picked up by other software implementers\n>> (if they so desire). Take CHECKLOCKTIMEVERIFY a new widely anticipated\n>> opcode. The proposal implemented in Bitcoin Core and eventually\n>> merged. Peter also authored BIP65 (required because without it, his\n>> proposal could not be considered for Bitcoin Core).\n>>\n>> It is not that BIP65 was somehow \"accepted\", in fact, as it stands,\n>> BIP65 is still just a draft because while there is a BIP and a\n>> reference implementation in Bitcoin Core, the consensus changes to the\n>> Bitcoin protocol have not been proposed to the community (through a\n>> soft fork), and thus acceptance is still only a possibility (although\n>> acceptance is extremely likely because service providers are literally\n>> chomping at the bit waiting for deployment).\n>>\n>> Also I would like to note that it's only an internal rule of Bitcoin\n>> Core that consensus rule changes require a formal BIP. It is not a\n>> requirement laid down from the BIP gods. BIPs simply serve as a way to\n>> communicate ideas and proposals. The community at large will decide if\n>> a BIP becomes widely adopted or not. Of course, Bitcoin Core has a\n>> major influence on this because they have the largest user base. It is\n>> relevant to say the large userbase is not just a historical artefact\n>> by virtue of being the first Bitcoin implementation. Bitcoin Core is\n>> widely trusted by commercial users because of the high developer\n>> count, wide technical expertise and relative security given knowing\n>> that they will be supported with security and maintenance releases.\n>>\n>> YOUR PROPOSAL\n>>\n>> Getting back to your specific proposal. It seems to focus more on\n>> getting BIPs accepted in the sense of published and missed the wider\n>> picture. As I have detailed, getting published isnt a problem. Anyone\n>> can make a proposal, so long as it's not obviously off topic or\n>> nonsensical, there is no grounds to refuse to publish it.\n>>\n>> Any part of your proposal which seems to infer governance of Bitcoin\n>> is misplaced because it's not the place of BIPs. The Bitcoin Core\n>> project is not the BIPs project and their rules are their own. They\n>> are one implementation, and very influential one yes, but, not the one\n>> true implementation to rule them all.\n>>\n>> Where I do think the BIP-1 text falls down is with the workflow of\n>> ACCEPTED/REJECTED because it does not really define who is accepting\n>> and rejecting what and misses much of the reality of the process in\n>> the real world. Given the purpose of BIPs is a formal way to\n>> communicate technical proposals to the bitcoin community (i.e.\n>> implementers and protocol consumers) the work flow needs to be\n>> adjusted.\n>>\n>> Anyone can submit a proposal and the state of the proposal can be\n>> DRAFT or WITHDRAWN but draft here is confusing. Draft would suggest\n>> it's a work in progress, but the proposal is \"complete\" when the\n>> proposer is happy with the final text. Downstream implementers should\n>> not attempt to write code (in my opinion) until the proposal has been\n>> finalised by the authors. Only the author has the right to say when\n>> their proposal is finished.\n>>\n>> The states of Accepted / Rejected are easy for consensus critical\n>> changes, especially once versionbits softforking is enacted and\n>> proposals will have a timeout associated. Certainly for deployed\n>> proposals you could say the proposal is \"active\" or better still\n>> \"pending approval\". However \"accepted\" and \"rejected\" is difficult for\n>> say privacy standards because how can you gauge or measure it. As I\n>> said earlier, you might have a lot of small projects implementing some\n>> privacy standards, but if the major wallets dont, and thus the\n>> majority of users, how would you gauge it?\n>>\n>> Something is a standard only when it becomes a standard by virtue of\n>> having become a standard :)\n>>\n>> \"Replaced\" is an easy state, when another proposal supercedes and\n>> replaces an older one. Again the wording could be better here.\n>> \"deprecated\" would also be appropriate in some circumstances.\n>>\n>> I'm not making a concrete proposal, I'm just highlighting where BIP-1\n>> sort of falls apart because of an incongruence with the workflow\n>> states and what actually happens in real life.\n>>\n>> Local to the BIPs project, I do think the BIPs editor, and guidelines\n>> try to filter proposals by raising the bar: i.e. requiring proposal to\n>> be polished through peer review before they are formally published as\n>> draft BIPs. Though this process an author would a) get most of his\n>> details right first time, and b) have some relative confidence his/her\n>> idea was useful and withdraw any obvious bad proposals themselves. An\n>> author may still decide, despite many objections from their peers they\n>> want to proceed with publishing and nothing should stop them providing\n>> it's relevant to the Bitcoin space. Peer review pressure is likely to\n>> act as the best filtering mechanism in this case anyway (no-one would\n>> want to be seen as an ass right?). Personally speaking, I felt quite\n>> nervous proposing my own blocksize ideas. I sought opinions in private\n>> first and had it been widely decried would probably not have pursued\n>> it any further.\n>>\n>> So in summary, I think some aspects of BIP-1 could do with polishing\n>> as I have detailed, specially around the \"workflow states\" but not to\n>> introduce any committees to the process, but where possible to extract\n>> state from the real state of the BIP in the real world. In fact, this\n>> is my direct argument against any forms of committee, in that the\n>> state of a BIP is determined by factors outside of any particular\n>> individual's or groups' purview.\n>>"
            },
            {
                "author": "Andy Chase",
                "date": "2015-09-06T20:44:56",
                "message_text_only": "Dang you are right Thomas! I'm just pretty excited about this proposal and\nsparking a discussion on this issue.\n\nHere's some updates and thoughts:\n\n   - Luke said: \"BIPs wouldn't be recognised as such because nobody cares\n   to meet the higher requirements\"\n      - Possibly true, but maybe not! I think people like having a say\n      especially people with a lot of money on the line or those who are really\n      passionate about Bitcoin\n      - One counter example, I emailed all the sponsors of the workshop\n      conference about their stance in regards to scalability going into the\n      workshop and I got a 47% response rate (with 21% responding with\na concrete\n      answer). See here:\n      https://www.reddit.com/r/bitcoinxt/comments/3isqmf/which_of_the_scaling_bitcoin_conference_sponsors/cujg3vc\n      - One example that agrees with you, I talked to the #bitcoin-assets\n      community and they seemed very against participating in future\nBIPs or even\n      allowing discussion with people outside their community:\n      http://pastebin.com/H5WeNwu3\n   - I'm seeking a historian or political science expert to assist me in\n   this area. If you guys know any I'd be glad to talk to them about working\n   with them.\n   - Many people are complaining about the stake part, and are worried\n   about the ambiguity. I firmly believe that proof of stake is a poor voting\n   mechanism because it gives the most power to those that have a lot of\n   money.\n      - I think proof of stake might work for merchants to prove they have\n      a decent economic stake if they sign with a well-known cold\nwallet address,\n      but I agree with someone that said merchants may be hesitant about doing\n      that.\n\n\nOn Sun, Sep 6, 2015 at 6:36 AM, Thomas Kerin <thomas.kerin at gmail.com> wrote:\n\n> Normally allocation comes after about 2 weeks or so, not 2 days!\n> On 5 Sep 2015 10:20 pm, \"Andy Chase via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Okay for sure yeah writing another proposal that reflects the current\n>> state of affairs as people see it might provide some interesting\n>> perspective on this proposal. I would welcome that.\n>>\n>> Greg: With no other direct comments appearing to be inbound I'd like to\n>> move forward with this one and get a number assigned to it. Thanks!\n>>\n>> Thanks to all for the discussion!\n>>\n>> On Fri, Sep 4, 2015 at 2:45 PM, Luke Dashjr <luke at dashjr.org> wrote:\n>>\n>>> On Friday, September 04, 2015 9:36:42 PM Andy Chase wrote:\n>>> > I understand your concerns. What kinds of changes do you think should\n>>> go\n>>> > through a process like this? Just hard forks?\n>>>\n>>> The process loses meaning if it doesn't reflect reality. So only\n>>> hardforks\n>>> should go through the hardfork process; only softforks through the\n>>> softfork\n>>> process; etc. Trying to make one-size-fits-all just means de facto\n>>> accepted\n>>> BIPs wouldn't be recognised as such because nobody cares to meet the\n>>> higher\n>>> requirements.\n>>>\n>>> Luke\n>>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150906/574ed608/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP Acceptance Process",
            "categories": [
                "bitcoin-dev",
                "BIP/Draft"
            ],
            "authors": [
                "Andy Chase",
                "Bryan Bishop",
                "Milly Bitcoin",
                "Peter Todd",
                "Martin Becze",
                "Luke Dashjr",
                "Btc Drak"
            ],
            "messages_count": 18,
            "total_messages_chars_count": 97108
        }
    },
    {
        "title": "[bitcoin-dev] Proposal to add the bitcoin symbol to Unicode",
        "thread_messages": [
            {
                "author": "Ken Shirriff",
                "date": "2015-09-05T14:11:27",
                "message_text_only": "Use of the bitcoin symbol in text is inconvenient, because the bitcoin\nsymbol isn't in the Unicode standard. To fix this, I've written a proposal\nto have the common B-with-vertical-bars bitcoin symbol added to Unicode.\nI've successfully proposed a new character for Unicode before, so I'm\nfamiliar with the process and think this has a good chance of succeeding.\nThe proposal is at http://righto.com/bitcoin-unicode.pdf\n\nI received a suggestion to run this proposal by the bitcoin-dev group, so I\nhope this email is appropriate here. Endorsement by Bitcoin developers will\nhelp the Unicode Committee realize the importance of adding this symbol, so\nplease let me know if you support this proposal.\n\nThanks,\nKen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150905/cb453472/attachment.html>"
            },
            {
                "author": "Theo Chino",
                "date": "2015-09-05T14:26:19",
                "message_text_only": "Ken,\n\nWhat do I do to second and join you ?\n\nTheo Chino\nNew York\n\nOn Sat, Sep 5, 2015 at 4:11 PM, Ken Shirriff via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Use of the bitcoin symbol in text is inconvenient, because the bitcoin\n> symbol isn't in the Unicode standard. To fix this, I've written a proposal\n> to have the common B-with-vertical-bars bitcoin symbol added to Unicode.\n> I've successfully proposed a new character for Unicode before, so I'm\n> familiar with the process and think this has a good chance of succeeding.\n> The proposal is at http://righto.com/bitcoin-unicode.pdf\n>\n> I received a suggestion to run this proposal by the bitcoin-dev group, so\n> I hope this email is appropriate here. Endorsement by Bitcoin developers\n> will help the Unicode Committee realize the importance of adding this\n> symbol, so please let me know if you support this proposal.\n>\n> Thanks,\n> Ken\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150905/55a53a0f/attachment.html>"
            },
            {
                "author": "Richard Moore",
                "date": "2015-09-05T14:58:18",
                "message_text_only": "This might also be a useful page to look at:\n\nhttps://en.bitcoin.it/wiki/Bitcoin_symbol\n\nRicMoo\n\nSent from my self-aware iPhone\n\n.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8><(((\u00ba>\n\nRichard Moore ~ Founder\nGenetic Mistakes Software Inc.\nphone: (778) 882-6125\nemail: ricmoo at geneticmistakes.com\nwww: http://GeneticMistakes.com\n\n> On Sep 5, 2015, at 10:11 AM, Ken Shirriff via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> Use of the bitcoin symbol in text is inconvenient, because the bitcoin symbol isn't in the Unicode standard. To fix this, I've written a proposal to have the common B-with-vertical-bars bitcoin symbol added to Unicode. I've successfully proposed a new character for Unicode before, so I'm familiar with the process and think this has a good chance of succeeding. The proposal is at http://righto.com/bitcoin-unicode.pdf\n> \n> I received a suggestion to run this proposal by the bitcoin-dev group, so I hope this email is appropriate here. Endorsement by Bitcoin developers will help the Unicode Committee realize the importance of adding this symbol, so please let me know if you support this proposal. \n> \n> Thanks,\n> Ken\n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150905/ad8ba582/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-09-05T18:48:57",
                "message_text_only": "Very cool! Thanks for tackling this.\n\n\nOn 09/05/2015 04:11 PM, Ken Shirriff via bitcoin-dev wrote:\n> Use of the bitcoin symbol in text is inconvenient, because the bitcoin\n> symbol isn't in the Unicode standard. To fix this, I've written a\n> proposal to have the common B-with-vertical-bars bitcoin symbol added to\n> Unicode. I've successfully proposed a new character for Unicode before,\n> so I'm familiar with the process and think this has a good chance of\n> succeeding. The proposal is at http://righto.com/bitcoin-unicode.pdf\n> \n> I received a suggestion to run this proposal by the bitcoin-dev group,\n> so I hope this email is appropriate here. Endorsement by Bitcoin\n> developers will help the Unicode Committee realize the importance of\n> adding this symbol, so please let me know if you support this proposal. \n> \n> Thanks,\n> Ken\n> \n> \n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-09-06T23:26:54",
                "message_text_only": "On Sat, Sep 05, 2015 at 07:11:27AM -0700, Ken Shirriff via bitcoin-dev wrote:\n> Use of the bitcoin symbol in text is inconvenient, because the bitcoin\n> symbol isn't in the Unicode standard. To fix this, I've written a proposal\n> to have the common B-with-vertical-bars bitcoin symbol added to Unicode.\n> I've successfully proposed a new character for Unicode before, so I'm\n> familiar with the process and think this has a good chance of succeeding.\n> The proposal is at http://righto.com/bitcoin-unicode.pdf\n> \n> I received a suggestion to run this proposal by the bitcoin-dev group, so I\n> hope this email is appropriate here. Endorsement by Bitcoin developers will\n> help the Unicode Committee realize the importance of adding this symbol, so\n> please let me know if you support this proposal.\n\nACK\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000010f9e95aff6454fedb9d0a4b92a4108e9449c507936f9f18\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150906/03c9a08f/attachment.sig>"
            },
            {
                "author": "Danny Thorpe",
                "date": "2015-09-08T20:28:41",
                "message_text_only": "What of this prior effort, proposing B-with-horizontal-bar (\u0243)?\nhttp://bitcoinsymbol.org/\n\nThey argue that B-with-2-vertical-bars is easily confused with the Thai\nBhat currency symbol, which is a B with a single vertical bar.\n\nI'm not terribly fond of the B-with-horizontal-bar as a symbol, but it does\nhave the advantage that it is already in the Unicode glyph set, already\navailable on most Unicode enabled devices.\n\n-Danny\n\nOn Sat, Sep 5, 2015 at 7:11 AM, Ken Shirriff via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Use of the bitcoin symbol in text is inconvenient, because the bitcoin\n> symbol isn't in the Unicode standard. To fix this, I've written a proposal\n> to have the common B-with-vertical-bars bitcoin symbol added to Unicode.\n> I've successfully proposed a new character for Unicode before, so I'm\n> familiar with the process and think this has a good chance of succeeding.\n> The proposal is at http://righto.com/bitcoin-unicode.pdf\n>\n> I received a suggestion to run this proposal by the bitcoin-dev group, so\n> I hope this email is appropriate here. Endorsement by Bitcoin developers\n> will help the Unicode Committee realize the importance of adding this\n> symbol, so please let me know if you support this proposal.\n>\n> Thanks,\n> Ken\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150908/1b167716/attachment.html>"
            },
            {
                "author": "Ken Shirriff",
                "date": "2015-09-08T21:05:07",
                "message_text_only": "On Tue, Sep 8, 2015 at 1:28 PM, Danny Thorpe <danny.thorpe at gmail.com> wrote:\n\n> What of this prior effort, proposing B-with-horizontal-bar (\u0243)?\n> http://bitcoinsymbol.org/\n>\n> They argue that B-with-2-vertical-bars is easily confused with the Thai\n> Bhat currency symbol, which is a B with a single vertical bar.\n>\n\nActually that page argues that using the Thai Bhat currency symbol *for*\nBitcoin causes confusion. From the page you linked to:\n\nThe Thai Baht (\u0e3f <https://en.wikipedia.org/wiki/Thai_baht>) is sometimes\nused to represent Bitcoin, but this certainly raises a problem of\ndifferenciation between the Thai Baht and Bitcoin.\n\nTheir main motivation for using the horizontal-bar \u0243 (which they admit is a\nhack) is they consider adding a character to Unicode to be a \"really long\nand complicated process\". My view is that adding the bitcoin sign to\nUnicode avoids confusion with the Thai Baht, avoids hacks such as \u0243, and\nlets everyone use the standard symbol. Hopefully it won't be a really long\nand complicated process...\n\nKen\n\n\n> I'm not terribly fond of the B-with-horizontal-bar as a symbol, but it\n> does have the advantage that it is already in the Unicode glyph set,\n> already available on most Unicode enabled devices.\n>\n> -Danny\n>\n> On Sat, Sep 5, 2015 at 7:11 AM, Ken Shirriff via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Use of the bitcoin symbol in text is inconvenient, because the bitcoin\n>> symbol isn't in the Unicode standard. To fix this, I've written a proposal\n>> to have the common B-with-vertical-bars bitcoin symbol added to Unicode.\n>> I've successfully proposed a new character for Unicode before, so I'm\n>> familiar with the process and think this has a good chance of succeeding.\n>> The proposal is at http://righto.com/bitcoin-unicode.pdf\n>>\n>> I received a suggestion to run this proposal by the bitcoin-dev group, so\n>> I hope this email is appropriate here. Endorsement by Bitcoin developers\n>> will help the Unicode Committee realize the importance of adding this\n>> symbol, so please let me know if you support this proposal.\n>>\n>> Thanks,\n>> Ken\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150908/22f61cf9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposal to add the bitcoin symbol to Unicode",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Ken Shirriff",
                "Andreas Schildbach",
                "Theo Chino",
                "Peter Todd",
                "Richard Moore",
                "Danny Thorpe"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 10099
        }
    },
    {
        "title": "[bitcoin-dev] Problem compiling bitcoin-core",
        "thread_messages": [
            {
                "author": "LinuXperia",
                "date": "2015-09-05T17:54:55",
                "message_text_only": "Hi.\n\nI am trying to compile bitcoin core on my ubuntu Linux machine as follow:\n\n./autogen.sh\n\n./configure \nCPPFLAGS=\"-I/media/linuxperia/mydata/Projects/bitcoi/depends/x86_64-unknown-linux-gnu/include/ \n-O2\" \nLDFLAGS=\"-L/media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/lib/\" \n--without-gui\n\nmake\n\nbut i am getting always this Build Error message here!\nWhat i am doing wrong ?\nHow can i fix this build problem so i am able to run the Bitcoin-core \nNode on my Machine ?\n\nThanks in advance for your helpful solution tips!\n\n    CXXLD    bitcoind\nlibbitcoin_server.a(libbitcoin_server_a-init.o): In function \n`boost::filesystem::path::path<boost::filesystem::directory_entry>(boost::filesystem::directory_entry \nconst&, \nboost::enable_if<boost::filesystem::path_traits::is_pathable<boost::decay<boost::filesystem::directory_entry>::type>, \nvoid>::type*)':\n/media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/filesystem/path.hpp:140: \nundefined reference to \n`boost::filesystem::path_traits::dispatch(boost::filesystem::directory_entry \nconst&, std::__cxx11::basic_string<char, std::char_traits<char>, \nstd::allocator<char> >&)'\nlibbitcoin_util.a(libbitcoin_util_a-util.o): In function `GetNumCores()':\n/media/linuxperia/mydata/Projects/bitcoin/src/util.cpp:825: undefined \nreference to `boost::thread::physical_concurrency()'\nlibbitcoin_util.a(libbitcoin_util_a-util.o): In function \n`boost::program_options::detail::basic_config_file_iterator<char>::getline(std::__cxx11::basic_string<char, \nstd::char_traits<char>, std::allocator<char> >&)':\n/media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/program_options/detail/config_file.hpp:161: \nundefined reference to \n`boost::program_options::to_internal(std::__cxx11::basic_string<char, \nstd::char_traits<char>, std::allocator<char> > const&)'\nlibbitcoin_util.a(libbitcoin_util_a-util.o): In function \n`boost::program_options::detail::basic_config_file_iterator<char>::basic_config_file_iterator(std::istream&, \nstd::set<std::__cxx11::basic_string<char, std::char_traits<char>, \nstd::allocator<char> >, std::less<std::__cxx11::basic_string<char, \nstd::char_traits<char>, std::allocator<char> > >, \nstd::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, \nstd::allocator<char> > > > const&, bool)':\n/media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/program_options/detail/config_file.hpp:145: \nundefined reference to \n`boost::program_options::detail::common_config_file_iterator::common_config_file_iterator(std::set<std::__cxx11::basic_string<char, \nstd::char_traits<char>, std::allocator<char> >, \nstd::less<std::__cxx11::basic_string<char, std::char_traits<char>, \nstd::allocator<char> > >, \nstd::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, \nstd::allocator<char> > > > const&, bool)'\nlibbitcoin_wallet.a(libbitcoin_wallet_a-walletdb.o): In function \n`boost::filesystem::copy_file(boost::filesystem::path const&, \nboost::filesystem::path const&, boost::filesystem::copy_option::enum_type)':\n/media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/filesystem/operations.hpp:497: \nundefined reference to \n`boost::filesystem::detail::copy_file(boost::filesystem::path const&, \nboost::filesystem::path const&, boost::filesystem::detail::copy_option, \nboost::system::error_code*)'\ncollect2: error: ld returned 1 exit status\nMakefile:2620: recipe for target 'bitcoind' failed\nmake[2]: *** [bitcoind] Error 1\nmake[2]: Leaving directory '/media/linuxperia/mydata/Projects/bitcoin/src'\nMakefile:6559: recipe for target 'all-recursive' failed\nmake[1]: *** [all-recursive] Error 1\nmake[1]: Leaving directory '/media/linuxperia/mydata/Projects/bitcoin/src'\nMakefile:626: recipe for target 'all-recursive' failed\nmake: *** [all-recursive] Error 1"
            },
            {
                "author": "Sriram Karra",
                "date": "2015-09-07T08:58:48",
                "message_text_only": "Your problem is it cannot find your Boost libs. Why exactly are you trying\nto build with a custom lib directory?\n\n\n\nOn Sat, Sep 5, 2015 at 11:24 PM, LinuXperia via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi.\n>\n> I am trying to compile bitcoin core on my ubuntu Linux machine as follow:\n>\n> ./autogen.sh\n>\n> ./configure\n> CPPFLAGS=\"-I/media/linuxperia/mydata/Projects/bitcoi/depends/x86_64-unknown-linux-gnu/include/\n> -O2\"\n> LDFLAGS=\"-L/media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/lib/\"\n> --without-gui\n>\n> make\n>\n> but i am getting always this Build Error message here!\n> What i am doing wrong ?\n> How can i fix this build problem so i am able to run the Bitcoin-core Node\n> on my Machine ?\n>\n> Thanks in advance for your helpful solution tips!\n>\n>    CXXLD    bitcoind\n> libbitcoin_server.a(libbitcoin_server_a-init.o): In function\n> `boost::filesystem::path::path<boost::filesystem::directory_entry>(boost::filesystem::directory_entry\n> const&,\n> boost::enable_if<boost::filesystem::path_traits::is_pathable<boost::decay<boost::filesystem::directory_entry>::type>,\n> void>::type*)':\n> /media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/filesystem/path.hpp:140:\n> undefined reference to\n> `boost::filesystem::path_traits::dispatch(boost::filesystem::directory_entry\n> const&, std::__cxx11::basic_string<char, std::char_traits<char>,\n> std::allocator<char> >&)'\n> libbitcoin_util.a(libbitcoin_util_a-util.o): In function `GetNumCores()':\n> /media/linuxperia/mydata/Projects/bitcoin/src/util.cpp:825: undefined\n> reference to `boost::thread::physical_concurrency()'\n> libbitcoin_util.a(libbitcoin_util_a-util.o): In function\n> `boost::program_options::detail::basic_config_file_iterator<char>::getline(std::__cxx11::basic_string<char,\n> std::char_traits<char>, std::allocator<char> >&)':\n> /media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/program_options/detail/config_file.hpp:161:\n> undefined reference to\n> `boost::program_options::to_internal(std::__cxx11::basic_string<char,\n> std::char_traits<char>, std::allocator<char> > const&)'\n> libbitcoin_util.a(libbitcoin_util_a-util.o): In function\n> `boost::program_options::detail::basic_config_file_iterator<char>::basic_config_file_iterator(std::istream&,\n> std::set<std::__cxx11::basic_string<char, std::char_traits<char>,\n> std::allocator<char> >, std::less<std::__cxx11::basic_string<char,\n> std::char_traits<char>, std::allocator<char> > >,\n> std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>,\n> std::allocator<char> > > > const&, bool)':\n> /media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/program_options/detail/config_file.hpp:145:\n> undefined reference to\n> `boost::program_options::detail::common_config_file_iterator::common_config_file_iterator(std::set<std::__cxx11::basic_string<char,\n> std::char_traits<char>, std::allocator<char> >,\n> std::less<std::__cxx11::basic_string<char, std::char_traits<char>,\n> std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char,\n> std::char_traits<char>, std::allocator<char> > > > const&, bool)'\n> libbitcoin_wallet.a(libbitcoin_wallet_a-walletdb.o): In function\n> `boost::filesystem::copy_file(boost::filesystem::path const&,\n> boost::filesystem::path const&, boost::filesystem::copy_option::enum_type)':\n> /media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/filesystem/operations.hpp:497:\n> undefined reference to\n> `boost::filesystem::detail::copy_file(boost::filesystem::path const&,\n> boost::filesystem::path const&, boost::filesystem::detail::copy_option,\n> boost::system::error_code*)'\n> collect2: error: ld returned 1 exit status\n> Makefile:2620: recipe for target 'bitcoind' failed\n> make[2]: *** [bitcoind] Error 1\n> make[2]: Leaving directory '/media/linuxperia/mydata/Projects/bitcoin/src'\n> Makefile:6559: recipe for target 'all-recursive' failed\n> make[1]: *** [all-recursive] Error 1\n> make[1]: Leaving directory '/media/linuxperia/mydata/Projects/bitcoin/src'\n> Makefile:626: recipe for target 'all-recursive' failed\n> make: *** [all-recursive] Error 1\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150907/d7a00b09/attachment.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-07T10:26:26",
                "message_text_only": "I mailed the solution privately, but for the record he was using the\nwrong build option which should have been --with-gui=no\n\nOn Mon, Sep 7, 2015 at 9:58 AM, Sriram Karra via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Your problem is it cannot find your Boost libs. Why exactly are you trying\n> to build with a custom lib directory?\n>\n>\n>\n> On Sat, Sep 5, 2015 at 11:24 PM, LinuXperia via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> Hi.\n>>\n>> I am trying to compile bitcoin core on my ubuntu Linux machine as follow:\n>>\n>> ./autogen.sh\n>>\n>> ./configure\n>> CPPFLAGS=\"-I/media/linuxperia/mydata/Projects/bitcoi/depends/x86_64-unknown-linux-gnu/include/\n>> -O2\"\n>> LDFLAGS=\"-L/media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/lib/\"\n>> --without-gui\n>>\n>> make\n>>\n>> but i am getting always this Build Error message here!\n>> What i am doing wrong ?\n>> How can i fix this build problem so i am able to run the Bitcoin-core Node\n>> on my Machine ?\n>>\n>> Thanks in advance for your helpful solution tips!\n>>\n>>    CXXLD    bitcoind\n>> libbitcoin_server.a(libbitcoin_server_a-init.o): In function\n>> `boost::filesystem::path::path<boost::filesystem::directory_entry>(boost::filesystem::directory_entry\n>> const&,\n>> boost::enable_if<boost::filesystem::path_traits::is_pathable<boost::decay<boost::filesystem::directory_entry>::type>,\n>> void>::type*)':\n>>\n>> /media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/filesystem/path.hpp:140:\n>> undefined reference to\n>> `boost::filesystem::path_traits::dispatch(boost::filesystem::directory_entry\n>> const&, std::__cxx11::basic_string<char, std::char_traits<char>,\n>> std::allocator<char> >&)'\n>> libbitcoin_util.a(libbitcoin_util_a-util.o): In function `GetNumCores()':\n>> /media/linuxperia/mydata/Projects/bitcoin/src/util.cpp:825: undefined\n>> reference to `boost::thread::physical_concurrency()'\n>> libbitcoin_util.a(libbitcoin_util_a-util.o): In function\n>> `boost::program_options::detail::basic_config_file_iterator<char>::getline(std::__cxx11::basic_string<char,\n>> std::char_traits<char>, std::allocator<char> >&)':\n>>\n>> /media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/program_options/detail/config_file.hpp:161:\n>> undefined reference to\n>> `boost::program_options::to_internal(std::__cxx11::basic_string<char,\n>> std::char_traits<char>, std::allocator<char> > const&)'\n>> libbitcoin_util.a(libbitcoin_util_a-util.o): In function\n>> `boost::program_options::detail::basic_config_file_iterator<char>::basic_config_file_iterator(std::istream&,\n>> std::set<std::__cxx11::basic_string<char, std::char_traits<char>,\n>> std::allocator<char> >, std::less<std::__cxx11::basic_string<char,\n>> std::char_traits<char>, std::allocator<char> > >,\n>> std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>,\n>> std::allocator<char> > > > const&, bool)':\n>>\n>> /media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/program_options/detail/config_file.hpp:145:\n>> undefined reference to\n>> `boost::program_options::detail::common_config_file_iterator::common_config_file_iterator(std::set<std::__cxx11::basic_string<char,\n>> std::char_traits<char>, std::allocator<char> >,\n>> std::less<std::__cxx11::basic_string<char, std::char_traits<char>,\n>> std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char,\n>> std::char_traits<char>, std::allocator<char> > > > const&, bool)'\n>> libbitcoin_wallet.a(libbitcoin_wallet_a-walletdb.o): In function\n>> `boost::filesystem::copy_file(boost::filesystem::path const&,\n>> boost::filesystem::path const&, boost::filesystem::copy_option::enum_type)':\n>>\n>> /media/linuxperia/mydata/Projects/bitcoin/depends/x86_64-unknown-linux-gnu/include/boost/filesystem/operations.hpp:497:\n>> undefined reference to\n>> `boost::filesystem::detail::copy_file(boost::filesystem::path const&,\n>> boost::filesystem::path const&, boost::filesystem::detail::copy_option,\n>> boost::system::error_code*)'\n>> collect2: error: ld returned 1 exit status\n>> Makefile:2620: recipe for target 'bitcoind' failed\n>> make[2]: *** [bitcoind] Error 1\n>> make[2]: Leaving directory '/media/linuxperia/mydata/Projects/bitcoin/src'\n>> Makefile:6559: recipe for target 'all-recursive' failed\n>> make[1]: *** [all-recursive] Error 1\n>> make[1]: Leaving directory '/media/linuxperia/mydata/Projects/bitcoin/src'\n>> Makefile:626: recipe for target 'all-recursive' failed\n>> make: *** [all-recursive] Error 1\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "LinuXperia",
                "date": "2015-09-07T18:35:31",
                "message_text_only": "Am 07.09.2015 um 10:58 schrieb Sriram Karra:\n> Your problem is it cannot find your Boost libs. Why exactly are you trying\n> to build with a custom lib directory?\n>\n\nHi Sriram !\n\nThank you very much for your Reply !\n\nYes you are right.\n\nI did not had the right Configuration Options.\n\nBTC Drake and ChinaTinte contacted me yesterday direct off the Mailing \nList after i posted the mail here and helped me to solve the Problem.\n\nI got bitcoin-core finally builded from sources and running.\n\nBig Compliments to everyone especially also to all the bitcoin developers.\n\nHave all a nice Day.\nGreetings LinuXperia"
            }
        ],
        "thread_summary": {
            "title": "Problem compiling bitcoin-core",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Sriram Karra",
                "LinuXperia",
                "Btc Drak"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 14017
        }
    },
    {
        "title": "[bitcoin-dev] python-bitcoinlib-v0.5.0rc1 - OpenSSL crashes on OSX and Arch Linux should be fixed",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2015-09-07T00:43:24",
                "message_text_only": "https://github.com/petertodd/python-bitcoinlib/tree/python-bitcoinlib-v0.5.0rc1\n\nFWIW if you've been experienceing OpenSSL related crashes on OSX or Arch\nLinux this release should fix your issues. I don't have any way of\ntesting this myself, so if I could get some confirmation that this new\nrelease candidate fixes things that'd be really helpful!\n\n\nOther release notes:\n\nv0.5.0\n======\n\nMajor fix: Fixed OpenSSL related crashes on OSX and Arch Linux. Big thanks to\neveryone who helped fix this!\n\nBreaking API changes:\n\n* Proxy no longer has ``__getattr__`` to support arbitrary methods. Use\n  RawProxy or Proxy.call instead. This allows new wrappers to be added safely.\n  See docstrings for details.\n\nNew features:\n\n* New RPC calls: getbestblockhash, getblockcount, getmininginfo\n* Signing and verification of Bitcoin Core compatible messages. (w/ pubkey recovery)\n* Tox tests\n* Sphinx docs\n\nNotable bugfixes:\n\n* getinfo() now works where disablewallet=1\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000010f9e95aff6454fedb9d0a4b92a4108e9449c507936f9f18\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150906/bb595f91/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-09-27T14:51:41",
                "message_text_only": "On Sun, Sep 06, 2015 at 08:43:24PM -0400, Peter Todd via bitcoin-dev wrote:\n> https://github.com/petertodd/python-bitcoinlib/tree/python-bitcoinlib-v0.5.0rc1\n\nNo issues have been reported with the release candidate, so I've\nreleased v0.5.0 officially pretty much as-is:\n\nhttps://github.com/petertodd/python-bitcoinlib/tree/python-bitcoinlib-v0.5.0\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000002221cb8e8732f77da172a50fd6b0290cd5069d2ea192233\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150927/1c49dbf6/attachment-0001.sig>"
            }
        ],
        "thread_summary": {
            "title": "python-bitcoinlib-v0.5.0rc1 - OpenSSL crashes on OSX and Arch Linux should be fixed",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Peter Todd"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2055
        }
    },
    {
        "title": "[bitcoin-dev] [BIP/Draft] BIP Realistic Acceptance Process",
        "thread_messages": [
            {
                "author": "Andy Chase",
                "date": "2015-09-07T02:17:32",
                "message_text_only": "Mediawiki formatted documented: https://gist.github.com/andychase/dadbfbb145de934d8e1c\n\n\u2014\u2014\n\n    Title: BIP Realistic Acceptance Process\n    Author: Andy Chase \n    Status: Draft \n    Type: Process \n    Created: 2015-09-06\n\nAbstract\n========\n\nThe current process for accepting a BIP is not clearly defined. While\nBIP-0001 defines the process for writing and submitting a Bitcoin\nimprovement proposal to the community it does not specify the precise\nmethod for which BIPs are considered accepted or rejected.\n\nThis proposal documents the current method for which BIPs are accepted\nor rejected.\n\nDue to the large number of BIPs and the different processes that were\nfollowed, this BIP is specifically based around the acceptance process\nof BIP-0064. This was picked because it picks up a lot of the edge cases\nthat BIPs often have.\n\nMotivation\n==========\n\nThe primary motivation of this document is to allow for a discussion on\na realistic and acceptable BIP acceptance procedure. There has been a\nquite few calls for documenting and using the current \"realistic\" method\nfor BIP acceptance:\n\nLuke Jr.\n\n> Any such a BIP like this needs to document the natural forces involved\n> in real-world acceptance \\[...\\] it needs to be reasonably accurate so\n> as to not change the outcome from its natural/necessary result.\n\nBtc Drak\n\n> I'm rather perplexed about \\[another acceptance\\] proposal. What\n> exactly is wrong with the existing BIPs process?\n\nPeter Todd\n\n> IMO trying to \"set up a system\" in that kind of environment is silly,\n> and likely to be a bureaucratic waste of time.\n\nAdam Back\n\n> The development process is to improve Bitcoin, not to randomly\n> redefine it on a whim of one guy's opinion, nor the devs opinion.\n\nCopyright\n=========\n\nThis document is placed into the public domain.\n\nProcess\n=======\n\nThis game works best with at least 3 people and a basic familiarity with\nthe BIP process.\n\n-   Story: You are a confident software superstar who has worked at\n    Hooli and has taken up a passion for Bitcoin. You've realized that\n    you need a specific protocol in Bitcoin core for an application you\n    are working on. You've been funded a lot of money for this project\n    so you don't really have any option but to try to put it into the\n    core protocol.\n-   Rules:\n    -   Each turn counts as a day\n    -   You can prevent anyone from taking a drink at any time by\n        handing them a buck, looking into their eyes and saying \"we are\n        the future of Bitcoin\"\n    -   If you can't remember a word replace it with the word\n        \"consensus\"\n    -   If try to take a drink but are out, you must try to explain what\n        a \"fork\" is to the person on your left in the most complicated\n        way possible.\n-   Start:\n    -   Take a turn drawing up your implementation (draw a picture\n        of something)\n    -   Hand the \"implementation\" to the person on your left who writes\n        down words explaining the picture in the abstract using\n        big words. Hand it back. This is your BIP Draft.\n        -   Roll die, number rolled is the number of required elements\n            from BIP-0001 that you included in your BIP draft\n            -   take a drink for each element you included\n            -   If you rolled a 6 oops you didn't include a\n                copyright declaration. Nothing happens.\n    -   Submit for comments on mailing list\n        -   For three turns, receive criticism. Each turn:\n            -   Someone says your proposal is trash! take a drink and\n                roll a die:\n                -   If 1-2: Smash your hand on the table with your other\n                    hand and take out the pain on the person to your\n                    right who is criticizing your proposal. Take a drink\n                    to ease the pain.\n                -   If 3-4: Make an ad hominem statement about the\n                    person on the right. Look them in the eye and take a\n                    smug sip.\n                -   If 5-6: Ignore it. Do nothing.\n        -   Finish your drink if you get any positive remarks or\n            constructive feedback about your BIP (in other words don't\n            finish your drink).\n    -   Submit draft pull request to bitcoin/bip.\n        -   Story: Congrats! This represents an important milestone in\n            the BIP process. You put in the effort to get the BIP draft\n            vetted and you are ready to perform the janitorial task of\n            publicly submitting your BIP into the official BIP repo for\n            the world to see and refer to. The road ahead won't be easy,\n            there's rules to obey and guidelines to follow. Think this\n            will be quick and painless? Think again, a bit of short\n            sidedness or a forgotten rebase will cost you time, and time\n            is money.\n        -   Setup (1 turn):\n            -   Take a drink and roll a 6 sided die. Now self-assign a\n                BIP number based on that. Say: \"I'm not sure what the\n                process is for picking a number, so I just grabbed one\n                that's free.\" Take a drink if the number was taken.\n            -   Flip coin. If tails take a drink and argue about\n                following procedures: Say: \"Seems like a timesink\n                to me\".\n            -   Roll 6 sided die. If you get a 7, BIP editor reads your\n                BIP and makes editorial suggestions.\n            -   Flip a coin: If heads you will be asked to submit a\n                change to the index readme as well. If so drown your\n                misery by finishing your drink.\n        -   Maintainence. Each day:\n            -   Roll die. If 6:\n                -   If you were asked to submit a change to the index\n                    readme: flip a coin. If heads, your merge commit has\n                    conflicts and you will be asked to rebase. If tails\n                    continue:\n                -   Did you receive any sort of comment in the last 2\n                    days?\n                    -   If so do nothing\n                    -   If not, your BIP draft was merged! Celebrate!\n                        Finish your drink.\n            -   Flip coin. If heads take a drink as you received\n                comments about implementation-level issues in the high\n                level draft. Person to your right must say to you: \"not\n                a fixed size type? And why does the signed-ness not\n                match the BIP?\"\n                -   You must now stealth fix issues in the background,\n                    squashing history. Do not answer the question with\n                    an explanation but instead remain positive. Say:\n                    \"Good catch, thanks!\"\n                -   Roll die. Take a stealth sip for each commit you\n                    squashed\n            -   Repeat until merged.\n    -   Submit pull request with implementation\n        -   Story: Amazing! Not only are you a brilliant writer and\n            communicator, you happen to be a software engineer as well.\n            Truely a the right combination of ethics and ethos in\n            your genetics. Now you get to submit your change to see if\n            it's a good fit for inclusion into Bitcoin core.\n        -   Setup (1 turn)\n            -   Flip a coin. If you get either heads or tails that means\n                you didn't include any unit tests. Take a drink.\n        -   Maintenance (3 turns):\n            -   (1 turn) Peter found a DDoS vulnerability in your code.\n                Take a drink of shame and say: \"I don't think the attack\n                you have in mind works.\"\n            -   (1 turn) Someone says you haven't tested this patch\n                enough yet. Take a test drink and say: \"I attempted to\n                write unit tests for this, but Core has no\n                infrastructure for building test chains\"\n            -   (1 turn) Roll a dice. You can either take that many sips\n                or insult the person on your right that many times. The\n                person on your left may assist with the insults. Insults\n                must be one of:\n                -   \"that would complicate the implementation\n                    considerably\"\n                -   \"You are welcome to implement such an upgrade in a\n                    future patch, if you like\"\n                -   \"You're making assumptions about the design without\n                    understanding it.\"\n                -   \"Your second statement is nonsensical.\"\n                -   \"This patch is what it is. If you'd like it to be\n                    better feel free to contribute code to make it so.\"\n    -   Roll die. If 1-5 your patch was never merged. If 6 your patch\n        was merged but then reverted. Finish your drink if\n        this happened.\n    -   Hard fork\n        -   Story: Fantastic! You've gone through the BIP draft process\n            and now its time to shift from the PR (pull request) process\n            to the PR (public relations) process. You goal is now to\n            convince everyone to join a client with your patch in it. If\n            you get 70% (the economic supermajority) to join your patch\n            you win the game. To signify they've joined your client,\n            take their BIP document.\n            -   You have to get 100% if you are playing with 5 or less\n                people\n        -   Setup (1 turn)\n            -   Pick a reddit username. Flip a coin. If heads the person\n                on your left makes up a name for you. If tails use your\n                real name. Your profile picture is a strange picture you\n                of a much younger age. Everyone must now refer to you by\n                your reddit name prefixed but \"u/\" like so: \"u slash\n                sloppy lizard, it's your turn\".\n        -   Controversy (each day):\n            -   Roll a die:\n                -   If 1: Make a blog post about how your client is\n                    the best. Make up a headline and say it. Everyone\n                    must thumbs up or thumbs down. Those who thumbs down\n                    must take a drink. Roll a die and that number from\n                    the left looping around joins your client (only if\n                    their thumb was up, you can join your own client).\n                -   If 2: Announce a new community without censorship.\n                    Anyone can finish their drink to censor this action.\n                    If not censored, roll a die to see who joins (same\n                    rules as 1)\n                -   If 3: You make a silly beer joke on twitter. Take\n                    a drink. No one joins.\n                -   If 4: Point to the roof! Last one to point mined one\n                    of your blocks and has to join your client. They\n                    must also take a drink and say (begrudgingly): \"to\n                    the moon\".\n                -   If 5: Someone incites Fear, Uncertainty, & Doubt\n                    about your client. Everyone is now scared of you.\n                    First one to look you in the eyes has to join your\n                    client and take a drink. Lasts only until your\n                    next turn.\n                -   If 6: Ask someone to join your client. They\n                    must accept. Both take a drink of friendship."
            }
        ],
        "thread_summary": {
            "title": "BIP Realistic Acceptance Process",
            "categories": [
                "bitcoin-dev",
                "BIP/Draft"
            ],
            "authors": [
                "Andy Chase"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 11347
        }
    },
    {
        "title": "[bitcoin-dev] Dynamic limit to the block size - BIP draft discussion",
        "thread_messages": [
            {
                "author": "Washington Sanchez",
                "date": "2015-09-08T07:45:16",
                "message_text_only": "Hi everyone,\n\nI know many of us feel that the last thing the Bitcoin community needs is\nanother BIP related to the block size, but after a lot of reading and\ncommenting, I'd like to throw this idea out there.\n\nI've already written it up as a BIP and would like some constructive\nfeedback/suggestions/alternatives related to some of the variables in my\nspecification:\n\n\nDynamic limit to the block size\n=======================\n\nThe goal is to dynamically increase the maximum block size conservatively,\nbut allow meaningful relief to transaction volume pressure in response to\ntrue market demand. The specification follows:\n\n- Every 4032 blocks (~4 weeks), the maximum block size will be increased by\n10% *IF* a minimum of 2000 blocks has a size >= 60% of the maximum block\nsize at that time\n  + This calculates to theoretically 13 increases per year\n- The maximum block size can only ever be increased, not decreased\n\nFor example, if this rule were to be instituted January 1st 2016, with a\npresent maximum block size 1 MB, the limit would be increased to 1.1 MB on\nJanuary 29th 2016. The theoretical maximum block size at the end of 2016\nwould be ~3.45 MB, assuming all 13 increases are triggered.\n\nAs the maximum block size rises, so the cost of artificially triggering an\nincrease in the maximum block size.\n\n\nRegards,\nWash\n\n\n-------------------------------------------\n*Dr Washington Y. Sanchez <http://onename.com/drwasho>*\nCo-founder, OB1 <http://ob1.io>\nCore developer of OpenBazaar <https://openbazaar.org>\n@drwasho <https://twitter.com/drwasho>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150908/f9e714da/attachment.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-08T08:49:31",
                "message_text_only": "> but allow meaningful relief to transaction volume pressure in response to true market demand\n\nIf blocksize can only increase then it's like a market that only goes\nup which is unrealistic. Transaction will volume ebb and flow\nsignificantly. Some people have been looking at transaction volume\ncharts over time and all they can see is an exponential curve which\nthey think will go on forever, yet nothing goes up forever and it will\ngo through significant trend cycles (like everything does). If you\ndont want to hurt the fee market, the blocksize has to be elastic and\nallow contraction as well as expansion.\n\nOn Tue, Sep 8, 2015 at 8:45 AM, Washington Sanchez via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Hi everyone,\n>\n> I know many of us feel that the last thing the Bitcoin community needs is\n> another BIP related to the block size, but after a lot of reading and\n> commenting, I'd like to throw this idea out there.\n>\n> I've already written it up as a BIP and would like some constructive\n> feedback/suggestions/alternatives related to some of the variables in my\n> specification:\n>\n>\n> Dynamic limit to the block size\n> =======================\n>\n> The goal is to dynamically increase the maximum block size conservatively,\n> but allow meaningful relief to transaction volume pressure in response to\n> true market demand. The specification follows:\n>\n> - Every 4032 blocks (~4 weeks), the maximum block size will be increased by\n> 10% *IF* a minimum of 2000 blocks has a size >= 60% of the maximum block\n> size at that time\n>   + This calculates to theoretically 13 increases per year\n> - The maximum block size can only ever be increased, not decreased\n>\n> For example, if this rule were to be instituted January 1st 2016, with a\n> present maximum block size 1 MB, the limit would be increased to 1.1 MB on\n> January 29th 2016. The theoretical maximum block size at the end of 2016\n> would be ~3.45 MB, assuming all 13 increases are triggered.\n>\n> As the maximum block size rises, so the cost of artificially triggering an\n> increase in the maximum block size.\n>\n>\n> Regards,\n> Wash\n>\n>\n> -------------------------------------------\n> Dr Washington Y. Sanchez\n> Co-founder, OB1\n> Core developer of OpenBazaar\n> @drwasho\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Ivan Brightly",
                "date": "2015-09-08T12:28:56",
                "message_text_only": "This is true, but miners already control block size through soft caps.\nMiners are fully capable of producing smaller blocks regardless of the max\nblock limit, with or without collusion. Arguably, there is no need to ever\nreduce the max block size unless technology advances for some reason\nreverse course - aka, WW3 takes a toll on the internet and the average\nbandwidth available halves. The likelihood of significant technology\ncontraction in the near future seems rather unlikely and is more broadly\nproblematic for society than bitcoin specifically.\n\nThe only reason for reducing the max block limit other than technology\navailability is if you think that this is what will produce the fee market,\nwhich is back to an economic discussion - not a technology scaling\ndiscussion.\n\nOn Tue, Sep 8, 2015 at 4:49 AM, Btc Drak via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> > but allow meaningful relief to transaction volume pressure in response\n> to true market demand\n>\n> If blocksize can only increase then it's like a market that only goes\n> up which is unrealistic. Transaction will volume ebb and flow\n> significantly. Some people have been looking at transaction volume\n> charts over time and all they can see is an exponential curve which\n> they think will go on forever, yet nothing goes up forever and it will\n> go through significant trend cycles (like everything does). If you\n> dont want to hurt the fee market, the blocksize has to be elastic and\n> allow contraction as well as expansion.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150908/a1ce797b/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2015-09-08T13:13:16",
                "message_text_only": "The maximum block-size is one that can be filled at zero-cost by\nminers, and so allows some kinds of amplification of selfish-mining\nrelated attacks.\n\nAdam\n\n\nOn 8 September 2015 at 13:28, Ivan Brightly via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> This is true, but miners already control block size through soft caps.\n> Miners are fully capable of producing smaller blocks regardless of the max\n> block limit, with or without collusion. Arguably, there is no need to ever\n> reduce the max block size unless technology advances for some reason reverse\n> course - aka, WW3 takes a toll on the internet and the average bandwidth\n> available halves. The likelihood of significant technology contraction in\n> the near future seems rather unlikely and is more broadly problematic for\n> society than bitcoin specifically.\n>\n> The only reason for reducing the max block limit other than technology\n> availability is if you think that this is what will produce the fee market,\n> which is back to an economic discussion - not a technology scaling\n> discussion.\n>\n> On Tue, Sep 8, 2015 at 4:49 AM, Btc Drak via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> > but allow meaningful relief to transaction volume pressure in response\n>> > to true market demand\n>>\n>> If blocksize can only increase then it's like a market that only goes\n>> up which is unrealistic. Transaction will volume ebb and flow\n>> significantly. Some people have been looking at transaction volume\n>> charts over time and all they can see is an exponential curve which\n>> they think will go on forever, yet nothing goes up forever and it will\n>> go through significant trend cycles (like everything does). If you\n>> dont want to hurt the fee market, the blocksize has to be elastic and\n>> allow contraction as well as expansion.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Ivan Brightly",
                "date": "2015-09-08T13:52:00",
                "message_text_only": "Agreed. For this reason, the scaling BIPs which don't allow for easy gaming\nsuch as BIP101, your proposal or Pieter's are preferable for their\npredictability and simplicity. Changing the fundamental rules for Bitcoin\nis supposed to be hard - why give this power up to a subsection of the\necosystem in order to make it easier to change or game?\n\nOn Tue, Sep 8, 2015 at 9:13 AM, Adam Back <adam at cypherspace.org> wrote:\n\n> The maximum block-size is one that can be filled at zero-cost by\n> miners, and so allows some kinds of amplification of selfish-mining\n> related attacks.\n>\n> Adam\n>\n>\n> On 8 September 2015 at 13:28, Ivan Brightly via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > This is true, but miners already control block size through soft caps.\n> > Miners are fully capable of producing smaller blocks regardless of the\n> max\n> > block limit, with or without collusion. Arguably, there is no need to\n> ever\n> > reduce the max block size unless technology advances for some reason\n> reverse\n> > course - aka, WW3 takes a toll on the internet and the average bandwidth\n> > available halves. The likelihood of significant technology contraction in\n> > the near future seems rather unlikely and is more broadly problematic for\n> > society than bitcoin specifically.\n> >\n> > The only reason for reducing the max block limit other than technology\n> > availability is if you think that this is what will produce the fee\n> market,\n> > which is back to an economic discussion - not a technology scaling\n> > discussion.\n> >\n> > On Tue, Sep 8, 2015 at 4:49 AM, Btc Drak via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >> > but allow meaningful relief to transaction volume pressure in response\n> >> > to true market demand\n> >>\n> >> If blocksize can only increase then it's like a market that only goes\n> >> up which is unrealistic. Transaction will volume ebb and flow\n> >> significantly. Some people have been looking at transaction volume\n> >> charts over time and all they can see is an exponential curve which\n> >> they think will go on forever, yet nothing goes up forever and it will\n> >> go through significant trend cycles (like everything does). If you\n> >> dont want to hurt the fee market, the blocksize has to be elastic and\n> >> allow contraction as well as expansion.\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150908/8c49c772/attachment-0001.html>"
            },
            {
                "author": "Washington Sanchez",
                "date": "2015-09-08T14:02:51",
                "message_text_only": ">\n> The maximum block-size is one that can be filled at zero-cost by\n> miners, and so allows some kinds of amplification of selfish-mining\n> related attacks\n\n\nA selfish mining attack would have to be performed for at least 2000 blocks\nover a period of 4 weeks in order to achieve a meager 10% increase in the\nblock size.\n\nIf there goal is to simply drive up fees to gain acceptance into the block,\nwe're in exactly the same position we are in today (as in nothing stops a\nminer from doing this).\nIf the goal is to increase the block size to push out smaller miners,\nthey'll have to perform this attack over the course of years and destroy\nany economic incentives they have for mining in the first place.\n\n why give this power up to a subsection of the ecosystem in order to make\n> it easier to change or game\n\n\nWell this same could be said for developers trying to predict what the\nappropriate block size should be over the next 20 years... it's a hallmark\nto a group of bankers trying to predict the appropriate interest rate for\nthe entire economy. Just as it is impossible to predict the appropriate\nhash rate to secure the network, so it goes for the block size. Both need\nto adjust dynamically to the scale/adoption of the network.\n\nOn Tue, Sep 8, 2015 at 11:13 PM, Adam Back <adam at cypherspace.org> wrote:\n\n> The maximum block-size is one that can be filled at zero-cost by\n> miners, and so allows some kinds of amplification of selfish-mining\n> related attacks.\n>\n> Adam\n>\n>\n> On 8 September 2015 at 13:28, Ivan Brightly via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > This is true, but miners already control block size through soft caps.\n> > Miners are fully capable of producing smaller blocks regardless of the\n> max\n> > block limit, with or without collusion. Arguably, there is no need to\n> ever\n> > reduce the max block size unless technology advances for some reason\n> reverse\n> > course - aka, WW3 takes a toll on the internet and the average bandwidth\n> > available halves. The likelihood of significant technology contraction in\n> > the near future seems rather unlikely and is more broadly problematic for\n> > society than bitcoin specifically.\n> >\n> > The only reason for reducing the max block limit other than technology\n> > availability is if you think that this is what will produce the fee\n> market,\n> > which is back to an economic discussion - not a technology scaling\n> > discussion.\n> >\n> > On Tue, Sep 8, 2015 at 4:49 AM, Btc Drak via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >> > but allow meaningful relief to transaction volume pressure in response\n> >> > to true market demand\n> >>\n> >> If blocksize can only increase then it's like a market that only goes\n> >> up which is unrealistic. Transaction will volume ebb and flow\n> >> significantly. Some people have been looking at transaction volume\n> >> charts over time and all they can see is an exponential curve which\n> >> they think will go on forever, yet nothing goes up forever and it will\n> >> go through significant trend cycles (like everything does). If you\n> >> dont want to hurt the fee market, the blocksize has to be elastic and\n> >> allow contraction as well as expansion.\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n>\n\n\n\n-- \n-------------------------------------------\n*Dr Washington Y. Sanchez <http://onename.com/drwasho>*\nCo-founder, OB1 <http://ob1.io>\nCore developer of OpenBazaar <https://openbazaar.org>\n@drwasho <https://twitter.com/drwasho>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150909/1d1a8aa2/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2015-09-08T14:18:03",
                "message_text_only": "> A selfish mining attack would have to be performed for at least 2000 blocks over a period of 4 weeks in order to achieve a meager 10% increase in the block size.\n\nYou seem to be analysing a different attack - I mean that if someone\nhas enough hashrate to do a selfish mining attack, then setting up a\nsystem that has no means to reduce block-size risks that at a point\nwhere there is excess block-size they can use that free transaction\nspace to amplify selfish mining instead of collecting transaction\nfees.\n\nAdam"
            },
            {
                "author": "Washington Sanchez",
                "date": "2015-09-08T15:10:54",
                "message_text_only": "1) It's not really clear to me how that would work, but assuming it does\nthen it will go into a basket of attacks that are possible but unlikely due\nto the economic disincentives to do so.\n\n2) That said, is the Achilles heal of this proposal the lack of a mechanism\nto lower the block size?\n\n3) Let me put it another way, I've read that both Gavin and yourself are\nfavorable to a dynamic limit on the block size. In your view, what is\nmissing from this proposal, or what variables should be adjusted, to get\nthe rules to a place where you and other Core developers would seriously\nconsider it?\n\nOn Wed, Sep 9, 2015 at 12:18 AM, Adam Back <adam at cypherspace.org> wrote:\n\n> > A selfish mining attack would have to be performed for at least 2000\n> blocks over a period of 4 weeks in order to achieve a meager 10% increase\n> in the block size.\n>\n> You seem to be analysing a different attack - I mean that if someone\n> has enough hashrate to do a selfish mining attack, then setting up a\n> system that has no means to reduce block-size risks that at a point\n> where there is excess block-size they can use that free transaction\n> space to amplify selfish mining instead of collecting transaction\n> fees.\n>\n> Adam\n>\n\n\n\n-- \n-------------------------------------------\n*Dr Washington Y. Sanchez <http://onename.com/drwasho>*\nCo-founder, OB1 <http://ob1.io>\nCore developer of OpenBazaar <https://openbazaar.org>\n@drwasho <https://twitter.com/drwasho>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150909/e308be60/attachment.html>"
            },
            {
                "author": "Andrew Johnson",
                "date": "2015-09-08T16:46:33",
                "message_text_only": "I rather like this idea, I like that we're taking block scaling back to a\ntechnical method rather than political.  BIP100 is frightening to me as it\ngives a disproportionate amount of power to the miners, who can already\ncontrol their own blocksize with a soft cap.  It also seems silly to worry\nabout a selfish mining attack if you're going to institute a miner vote\nthat an entity with that much hashrate can noticeably influence anyway.\n\n101 is better but is still attempting to make a guess as to technological\nprogression quite far into the future.  And then when we do finally hit 8GB\nwe will need yet another hard fork if we need to go bigger(or we may need\nto do it earlier if the increase schedule isn't aggressive enough).  And\nwho knows how large the ecosystem may be at that time, a hard fork may be\nan undertaking of truly epic proportions due to the sheer number of devices\nand embedded firmware that operates on the block chain.\n\nI've done no math on this(posting from mobile) but something similar to\nthis would be reasonable, I think.  Unbounded growth, as Adam points out,\nis also undesirable.\n\nEvery 4032 blocks (~4 weeks), the maximum block size will be decreased by\n10% *IF* a minimum of 2500 blocks has a size <= 40% of the maximum block\nsize at that time.\n\nThis requires a larger threshold to be crossed to move downwards, that way\nwe hopefully aren't oscillating back and forth constantly.  I'll try to do\nsome blockchain research sometime this week and either back my plucked from\nthe air numbers or change them.\n\nAndrew Johnson\nOn Sep 8, 2015 10:11 AM, \"Washington Sanchez via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> 1) It's not really clear to me how that would work, but assuming it does\n> then it will go into a basket of attacks that are possible but unlikely due\n> to the economic disincentives to do so.\n>\n> 2) That said, is the Achilles heal of this proposal the lack of a\n> mechanism to lower the block size?\n>\n> 3) Let me put it another way, I've read that both Gavin and yourself are\n> favorable to a dynamic limit on the block size. In your view, what is\n> missing from this proposal, or what variables should be adjusted, to get\n> the rules to a place where you and other Core developers would seriously\n> consider it?\n>\n> On Wed, Sep 9, 2015 at 12:18 AM, Adam Back <adam at cypherspace.org> wrote:\n>\n>> > A selfish mining attack would have to be performed for at least 2000\n>> blocks over a period of 4 weeks in order to achieve a meager 10% increase\n>> in the block size.\n>>\n>> You seem to be analysing a different attack - I mean that if someone\n>> has enough hashrate to do a selfish mining attack, then setting up a\n>> system that has no means to reduce block-size risks that at a point\n>> where there is excess block-size they can use that free transaction\n>> space to amplify selfish mining instead of collecting transaction\n>> fees.\n>>\n>> Adam\n>>\n>\n>\n>\n> --\n> -------------------------------------------\n> *Dr Washington Y. Sanchez <http://onename.com/drwasho>*\n> Co-founder, OB1 <http://ob1.io>\n> Core developer of OpenBazaar <https://openbazaar.org>\n> @drwasho <https://twitter.com/drwasho>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150908/e4e2989e/attachment-0001.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-09-08T17:04:16",
                "message_text_only": ">\n> 3) Let me put it another way, I've read that both Gavin and yourself are\n> favorable to a dynamic limit on the block size. In your view, what is\n> missing from this proposal, or what variables should be adjusted, to get\n> the rules to a place where you and other Core developers would seriously\n> consider it?\n>\n\nI'm not clear on what problem(s) you're trying to solve.\n\nIf you want blocks to be at least 60% full, then just specify a simple rule\nlike \"maximum block size is 1.0/0.6 = 1.666 times the average block size\nover the last N blocks (applied at every block or every 2016 blocks or\nwhatever, details don't really matter)\".\n\nIf you want an upper limit on growth, then just implement a simple rule\nlike \"Absolute maximum block size is 1 megabyte in 2016, 3.45 megabytes in\n2017, and increases by a maximum of 3.45 times every year.\"\n\nIf you want me to take your proposal seriously, you need to justify why 60%\nfull is a good answer (and why we need a centralized decision on how full\nblocks \"should\" be), and why 3.45 times-per-year is a good answer for\nmaximum growth (and, again, why we need a centralized decision on that).\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150908/a47462eb/attachment.html>"
            },
            {
                "author": "Washington Sanchez",
                "date": "2015-09-08T23:11:49",
                "message_text_only": ">\n> If you want me to take your proposal seriously, you need to justify why\n> 60% full is a good answer\n>\n\nSure thing Gavin.\n\nIf you want blocks to be at least 60% full...\n\n\nFirst off, I do not want blocks to be at least 60% full, so let me try and\nexplain where I got this number from\n\n   - The idea of this parameter is set a *triggering level* for an increase\n   in the block size\n   - The triggering level is the point where a reasonable medium-term trend\n   can be observed. That trend is an increase in the transaction volume that,\n   left unchecked, would fill up blocks.\n   - Determining the appropriate triggering level is difficult, and it\n   consists of 3 parameters:\n      1. Evaluation period\n         - *Period of time where you check to see if the conditions to\n         trigger a raise the block size are true *\n         - Ideally you want an increase to occur in response to a real\n         increase of transaction volume from the market, and not some\nshort term\n         spam attack.\n         - Too short, spam attacks can be used to trigger multiple\n         increases (at least early on). Too long, the block size\ndoesn't increase\n         fast enough to transaction demand.\n         - I selected a period of *4032 blocks*\n         2. Capacity\n         - *The capacity level that a majority of blocks would demonstrate\n         in order to trigger a block size increase*\n         - The capacity level, in tandem with the evaluation period and\n         threshold level, needs to reflect an underlying trend towards filling\n         blocks.\n         - If the capacity level is too low, block size increases can be\n         triggered prematurely. If the capacity level is too high, the\nnetwork could\n         be unnecessarily jammed with the transactions before an\nincrease can kick\n         in.\n         - I selected a capacity level of *60%*.\n      3. Threshold\n         - *The number of blocks during the evaluation period that are\n         above the capacity level in order to trigger a block size increase.*\n         - If blocks are getting larger than 60% over a 4032 block period,\n         how many reflect a market-driven increase transaction volume?\n         - If the threshold is too low, increases could be triggered\n         artificially or prematurely. If the threshold is too high,\nthe easier it\n         gets for 1-2 mining pools to prevent any increases in the\nblock size or the\n         block size doesn't respond fast enough to a real increase in\ntransaction\n         volume.\n         - I selected a threshold of *2000 blocks or ~50%*.\n      - So in my proposal, if 2000+ nodes have a block size >= 60%, this is\n   an indication that real transaction volume has increased and we're\n   approaching a time where block could be filled to capacity without an\n   increase. The block size increase, 10%, is triggered.\n\nA centralized decision, presumably by Satoshi, was made on the parameters\nthat alter the target difficulty, rather than attempt to forecast hash\nrates based on his CPU power. He allowed the system to scale to a level\nwhere real market demand would take it. I believe the same approach should\nbe replicated for the block size. The trick of course is settling on the\nright variables. I hope this proposal is a good way to do that.\n\n*Some additional calculations*\n\nBlock sizes for each year are *theoretical maximums* if ALL trigger points\nare activated in my proposal (unlikely, but anyway).\nThese calculations assume zero transactions are taken off-chain by third\nparty processors or the LN, and no efficiency improvements.\n\n   - 2015\n      - 1 MB/block\n      - 2 tps (conservative factor, also carried on below)\n      - 0.17 million tx/day\n   - 2016\n      - 3.45 MB/block\n      - 7 tps\n      - 0.6 million tx/day\n   - 2017\n      - 12 MB/block\n      - 24 tps\n      - 2 million tx/day\n   - 2018\n      - 41 MB/block\n      - 82 tps\n      - 7 million tx/day\n   - 2019\n      - 142 MB/block\n      - 284 tps\n      - 25 million tx/day\n   - 2020\n      - 490 MB/block\n      - 980 tps\n      - 85 million tx/day\n\nBy way of comparison, Alipay (payment processor for the Alibaba Group's\necosystem) processes 30 million escrow transactions per day. This gives us\nat least 4-5 years to reach the present day transaction processing capacity\nof 1 corporation... in reality it will take a little longer as I doubt all\nblock size triggers will be activated. This also gives us at least 4-5\nyears to develop efficiency improvements within the protocol, develop the\nLN to take many of these transactions off-chain, and network infrastructure\nto be significantly improved (and anything else this ecosystem can come up\nwith).\n\n(let me know if any of these calculations are off)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150909/05e85994/attachment-0001.html>"
            },
            {
                "author": "Washington Sanchez",
                "date": "2015-09-09T13:10:43",
                "message_text_only": "Errata + clarity (in bold):\n>\n>\n>    - So in my proposal, if 2000+ *blocks *have a size >= 60% *of the\n>    current limit*, this is an indication that real transaction volume has\n>    increased and we're approaching a time where block could be filled to\n>    capacity without an increase. The block size increase, 10%, is triggered.\n>\n>\nOn Wed, Sep 9, 2015 at 9:11 AM, Washington Sanchez <\nwashington.sanchez at gmail.com> wrote:\n\n> If you want me to take your proposal seriously, you need to justify why\n>> 60% full is a good answer\n>>\n>\n> Sure thing Gavin.\n>\n> If you want blocks to be at least 60% full...\n>\n>\n> First off, I do not want blocks to be at least 60% full, so let me try and\n> explain where I got this number from\n>\n>    - The idea of this parameter is set a *triggering level* for an\n>    increase in the block size\n>    - The triggering level is the point where a reasonable medium-term\n>    trend can be observed. That trend is an increase in the transaction volume\n>    that, left unchecked, would fill up blocks.\n>    - Determining the appropriate triggering level is difficult, and it\n>    consists of 3 parameters:\n>       1. Evaluation period\n>          - *Period of time where you check to see if the conditions to\n>          trigger a raise the block size are true *\n>          - Ideally you want an increase to occur in response to a real\n>          increase of transaction volume from the market, and not some short term\n>          spam attack.\n>          - Too short, spam attacks can be used to trigger multiple\n>          increases (at least early on). Too long, the block size doesn't increase\n>          fast enough to transaction demand.\n>          - I selected a period of *4032 blocks*\n>          2. Capacity\n>          - *The capacity level that a majority of blocks\n>          would demonstrate in order to trigger a block size increase*\n>          - The capacity level, in tandem with the evaluation period and\n>          threshold level, needs to reflect an underlying trend towards filling\n>          blocks.\n>          - If the capacity level is too low, block size increases can be\n>          triggered prematurely. If the capacity level is too high, the network could\n>          be unnecessarily jammed with the transactions before an increase can kick\n>          in.\n>          - I selected a capacity level of *60%*.\n>       3. Threshold\n>          - *The number of blocks during the evaluation period that are\n>          above the capacity level in order to trigger a block size increase.*\n>          - If blocks are getting larger than 60% over a 4032 block\n>          period, how many reflect a market-driven increase transaction volume?\n>          - If the threshold is too low, increases could be triggered\n>          artificially or prematurely. If the threshold is too high, the easier it\n>          gets for 1-2 mining pools to prevent any increases in the block size or the\n>          block size doesn't respond fast enough to a real increase in transaction\n>          volume.\n>          - I selected a threshold of *2000 blocks or ~50%*.\n>       - So in my proposal, if 2000+ nodes have a block size >= 60%, this\n>    is an indication that real transaction volume has increased and we're\n>    approaching a time where block could be filled to capacity without an\n>    increase. The block size increase, 10%, is triggered.\n>\n> A centralized decision, presumably by Satoshi, was made on the parameters\n> that alter the target difficulty, rather than attempt to forecast hash\n> rates based on his CPU power. He allowed the system to scale to a level\n> where real market demand would take it. I believe the same approach should\n> be replicated for the block size. The trick of course is settling on the\n> right variables. I hope this proposal is a good way to do that.\n>\n> *Some additional calculations*\n>\n> Block sizes for each year are *theoretical maximums* if ALL trigger\n> points are activated in my proposal (unlikely, but anyway).\n> These calculations assume zero transactions are taken off-chain by third\n> party processors or the LN, and no efficiency improvements.\n>\n>    - 2015\n>       - 1 MB/block\n>       - 2 tps (conservative factor, also carried on below)\n>       - 0.17 million tx/day\n>    - 2016\n>       - 3.45 MB/block\n>       - 7 tps\n>       - 0.6 million tx/day\n>    - 2017\n>       - 12 MB/block\n>       - 24 tps\n>       - 2 million tx/day\n>    - 2018\n>       - 41 MB/block\n>       - 82 tps\n>       - 7 million tx/day\n>    - 2019\n>       - 142 MB/block\n>       - 284 tps\n>       - 25 million tx/day\n>    - 2020\n>       - 490 MB/block\n>       - 980 tps\n>       - 85 million tx/day\n>\n> By way of comparison, Alipay (payment processor for the Alibaba Group's\n> ecosystem) processes 30 million escrow transactions per day. This gives us\n> at least 4-5 years to reach the present day transaction processing capacity\n> of 1 corporation... in reality it will take a little longer as I doubt all\n> block size triggers will be activated. This also gives us at least 4-5\n> years to develop efficiency improvements within the protocol, develop the\n> LN to take many of these transactions off-chain, and network infrastructure\n> to be significantly improved (and anything else this ecosystem can come up\n> with).\n>\n> (let me know if any of these calculations are off)\n>\n>\n\n\n-- \n-------------------------------------------\n*Dr Washington Y. Sanchez <http://onename.com/drwasho>*\nCo-founder, OB1 <http://ob1.io>\nCore developer of OpenBazaar <https://openbazaar.org>\n@drwasho <https://twitter.com/drwasho>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150909/fcc85792/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Dynamic limit to the block size - BIP draft discussion",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Andrew Johnson",
                "Adam Back",
                "Btc Drak",
                "Gavin Andresen",
                "Washington Sanchez",
                "Ivan Brightly"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 32154
        }
    },
    {
        "title": "[bitcoin-dev] Adjusted difficulty depending on relative blocksize",
        "thread_messages": [
            {
                "author": "Tom Harding",
                "date": "2015-09-09T03:27:22",
                "message_text_only": "There is another concern regarding \"flexcap\" that was not discussed.\n\nA change to difficulty in response to anything BUT observed block\nproduction rate unavoidably changes the money supply schedule, unless\nyou also change the reward, and in that case you've still changed the\ntiming even if not the average rate.\n\n\nOn 8/14/2015 8:14 AM, Jakob R\u00f6nnb\u00e4ck via bitcoin-dev wrote:\n> Ah, there we go. I should have dug deeper into the mailing list\n>\n> Thanks\n>\n> /jakob\n>\n>> 14 aug 2015 kl. 17:03 skrev Adam Back <adam at cypherspace.org>:\n>>\n>> There is a proposal that relates to this, see the flexcap proposal by\n>> Greg Maxwell & Mark Friedenbach, it was discussed on the list back in\n>> May:\n>>\n>> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008017.html\n>>\n>> and http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008038.html\n>>\n>> Adam\n>"
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2015-09-09T18:59:19",
                "message_text_only": "Does it really change the schedule when the next difficulty retarget\nreadjusts to an average of 10 minutes again?\n\nOn Tue, Sep 8, 2015 at 8:27 PM, Tom Harding via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> There is another concern regarding \"flexcap\" that was not discussed.\n>\n> A change to difficulty in response to anything BUT observed block\n> production rate unavoidably changes the money supply schedule, unless\n> you also change the reward, and in that case you've still changed the\n> timing even if not the average rate.\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150909/1641325f/attachment.html>"
            },
            {
                "author": "Tom Harding",
                "date": "2015-09-09T19:53:10",
                "message_text_only": "Well let's see.  All else being equal, if everybody uses difficulty to \nbuy big blocks during retarget interval 0, blocks and therefore money \nissuance is slower during that interval.  Then, the retargeting causes \nit to be faster during interval 1.  Subsidy got shifted from the \ncalendar period corresponding to interval 0, to interval 1.\n\nIf you change the reward, you can lower the time-frame of the effect to \nthe order of a single block interval, but there is still an effect.\n\nThese schemes do not avoid the need for a hard cap, and there are new \nrules for the size of the allowed adjustment, in addition to the main \nrule relating difficulty to block size.  So it seems they generally have \nmore complexity than the other blocksize schemes being considered.\n\n\nOn 9/9/2015 11:59 AM, Warren Togami Jr. via bitcoin-dev wrote:\n> Does it really change the schedule when the next difficulty retarget \n> readjusts to an average of 10 minutes again?\n>\n> On Tue, Sep 8, 2015 at 8:27 PM, Tom Harding via bitcoin-dev \n> <bitcoin-dev at lists.linuxfoundation.org \n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>\n>\n>     There is another concern regarding \"flexcap\" that was not discussed.\n>\n>     A change to difficulty in response to anything BUT observed block\n>     production rate unavoidably changes the money supply schedule, unless\n>     you also change the reward, and in that case you've still changed the\n>     timing even if not the average rate.\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150909/6df72c5a/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Adjusted difficulty depending on relative blocksize",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Warren Togami Jr.",
                "Tom Harding"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 3452
        }
    },
    {
        "title": "[bitcoin-dev] Yet another blocklimit proposal / compromise",
        "thread_messages": [
            {
                "author": "Marcel Jamin",
                "date": "2015-09-09T07:55:44",
                "message_text_only": "I propose to:\n\na) assess what blocklimit is currently technically possible without driving\nup costs of running a node up too much. Most systems currently running a\nfullnode probably have some capacity left.\n\nb) set the determined blocklimit at the next reward halving\n\nc) then double the blocksize limit at every halving thereafter up to a\nhardlimit of 8GB.\n\nReasoning:\n\nDoubling every four years will stay within expected technological growth.\nCisco's VNI forecast predicts a 2.1-fold increase in global average fixed\nbroadand speed from 2014 to 2019. Nielsen's law, which looks more at the\npower user (probably more fitting) is even more optimistic with +50% per\nyear.\n\nThis proposal can be considered a compromise between Pieter's and Gavin's\nproposals. While the growth rate is more or less what Pieter proposes, it\nincludes an initial increase to kickstart the growth. If we start with 8MB,\nwhich seems to be popular among miners, we would reach 8GB in 2056 (as\nopposed to 2036 in BIP101). The start date (ca. mid 2016) is also a\ncompromise between Pieter's 01/2017 and Gavin's 01/2016.\n\nIt's simple, predictable and IMHO elegant -- block subsidy halves,\nblocksize limit doubles.\n\nIt might make sense to update the limit more often in between, though.\nEither completely linearly based on a block's timestamp like in BIP101, or\nfor example for each difficulty period.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150909/4e5271e9/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-09T18:51:37",
                "message_text_only": "On Sep 9, 2015 8:36 PM, \"Marcel Jamin via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> I propose to:\n>\n> a) assess what blocklimit is currently technically possible without\ndriving up costs of running a node up too much. Most systems currently\nrunning a fullnode probably have some capacity left.\n\nWhat about the risk of further increasing mining centralization?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150909/10fb939b/attachment-0001.html>"
            },
            {
                "author": "Marcel Jamin",
                "date": "2015-09-09T19:00:55",
                "message_text_only": "I think the overlap of people who want to run a serious mining operation\nand people who are unable to afford a slightly above average internet\nconnection is infinitesimally small.\n\n2015-09-09 20:51 GMT+02:00 Jorge Tim\u00f3n <jtimon at jtimon.cc>:\n\n>\n> On Sep 9, 2015 8:36 PM, \"Marcel Jamin via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> > I propose to:\n> >\n> > a) assess what blocklimit is currently technically possible without\n> driving up costs of running a node up too much. Most systems currently\n> running a fullnode probably have some capacity left.\n>\n> What about the risk of further increasing mining centralization?\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150909/67a529ec/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-11T16:22:26",
                "message_text_only": "Unfortunately the relation between block maximum size and mining\ncentralization is much more complex than that.\nOn Sep 9, 2015 3:00 PM, \"Marcel Jamin\" <marcel at jamin.net> wrote:\n\n> I think the overlap of people who want to run a serious mining operation\n> and people who are unable to afford a slightly above average internet\n> connection is infinitesimally small.\n>\n> 2015-09-09 20:51 GMT+02:00 Jorge Tim\u00f3n <jtimon at jtimon.cc>:\n>\n>>\n>> On Sep 9, 2015 8:36 PM, \"Marcel Jamin via bitcoin-dev\" <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >\n>> > I propose to:\n>> >\n>> > a) assess what blocklimit is currently technically possible without\n>> driving up costs of running a node up too much. Most systems currently\n>> running a fullnode probably have some capacity left.\n>>\n>> What about the risk of further increasing mining centralization?\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150911/dd9b57ab/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2015-09-11T16:47:22",
                "message_text_only": "Bitcoin security depends on the enforcement of consensus rules which\nis done by economically dependent full nodes.  This is distinct from\nminers fullnodes, and balances miners interests, otherwise SPV nodes\nand decentralisation of policy would tend degrade, I think.  Therefore\nit is important that it be reasonably convenient to run full nodes for\ndecentralisation security.\n\nAlso you may want to read this summary of Bitcoin decentralisation by Mark:\n\nhttps://www.reddit.com/r/Bitcoin/comments/3h7eei/greg_luke_adam_if_xt_takes_over_and_wins_the/cu53eq3\n\nI think you maybe misunderstanding what the Chinese miners said also,\nabout 8MB, that was a cap on the maximum they felt they could handle\nwith current network infrastructure.\n\nI had proposed 2-4-8MB growing over a 4 year time frame with 2MB once\nthe hard-fork is upgraded by everyone in the network.  (I dont\nconsider miner triggers, as with soft-fork upgrades, to be an\nappropriate roll out mechanism because it is more important that\neconomically dependent full nodes upgrade, though it can be useful to\nknow that miners also have upgraded to a reasonable extent to avoid a\ntemporary hashrate drop off affecting security).\n\nAdam\n\nOn 9 September 2015 at 15:00, Marcel Jamin via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I think the overlap of people who want to run a serious mining operation and\n> people who are unable to afford a slightly above average internet connection\n> is infinitesimally small.\n>\n> 2015-09-09 20:51 GMT+02:00 Jorge Tim\u00f3n <jtimon at jtimon.cc>:\n>>\n>>\n>> On Sep 9, 2015 8:36 PM, \"Marcel Jamin via bitcoin-dev\"\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >\n>> > I propose to:\n>> >\n>> > a) assess what blocklimit is currently technically possible without\n>> > driving up costs of running a node up too much. Most systems currently\n>> > running a fullnode probably have some capacity left.\n>>\n>> What about the risk of further increasing mining centralization?\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Marcel Jamin",
                "date": "2015-09-11T17:54:17",
                "message_text_only": "> Therefore it is important that it be reasonably convenient to run full\nnodes for decentralisation security.\n\nYes, and I'm suggesting to define what \"reasonably convenient\" is in 2016.\nMost likely node operators have more than a little headroom for larger\nblocks. If you just use more of the processing power / storage / bandwidth\nyou very likely already paid for then there is no increase in costs.\n\n> I think you maybe misunderstanding what the Chinese miners said also, about\n8MB, that was a cap on the maximum they felt they could handle with current\nnetwork infrastructure.\n\nAnd what they felt \"remained fair to all to all miners and node operators\nworldwide.\" Increasing network connection requirements might even decrease\nmining centralization right now.\n\n\n\n2015-09-11 18:47 GMT+02:00 Adam Back <adam at cypherspace.org>:\n\n> Bitcoin security depends on the enforcement of consensus rules which\n> is done by economically dependent full nodes.  This is distinct from\n> miners fullnodes, and balances miners interests, otherwise SPV nodes\n> and decentralisation of policy would tend degrade, I think.  Therefore\n> it is important that it be reasonably convenient to run full nodes for\n> decentralisation security.\n>\n> Also you may want to read this summary of Bitcoin decentralisation by Mark:\n>\n>\n> https://www.reddit.com/r/Bitcoin/comments/3h7eei/greg_luke_adam_if_xt_takes_over_and_wins_the/cu53eq3\n>\n> I think you maybe misunderstanding what the Chinese miners said also,\n> about 8MB, that was a cap on the maximum they felt they could handle\n> with current network infrastructure.\n>\n> I had proposed 2-4-8MB growing over a 4 year time frame with 2MB once\n> the hard-fork is upgraded by everyone in the network.  (I dont\n> consider miner triggers, as with soft-fork upgrades, to be an\n> appropriate roll out mechanism because it is more important that\n> economically dependent full nodes upgrade, though it can be useful to\n> know that miners also have upgraded to a reasonable extent to avoid a\n> temporary hashrate drop off affecting security).\n>\n> Adam\n>\n> On 9 September 2015 at 15:00, Marcel Jamin via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > I think the overlap of people who want to run a serious mining operation\n> and\n> > people who are unable to afford a slightly above average internet\n> connection\n> > is infinitesimally small.\n> >\n> > 2015-09-09 20:51 GMT+02:00 Jorge Tim\u00f3n <jtimon at jtimon.cc>:\n> >>\n> >>\n> >> On Sep 9, 2015 8:36 PM, \"Marcel Jamin via bitcoin-dev\"\n> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> >\n> >> > I propose to:\n> >> >\n> >> > a) assess what blocklimit is currently technically possible without\n> >> > driving up costs of running a node up too much. Most systems currently\n> >> > running a fullnode probably have some capacity left.\n> >>\n> >> What about the risk of further increasing mining centralization?\n> >\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150911/e31daa59/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-11T18:17:19",
                "message_text_only": "On Sep 11, 2015 1:54 PM, \"Marcel Jamin\" <marcel at jamin.net> wrote:\n> And what they felt \"remained fair to all to all miners and node operators\nworldwide.\" Increasing network connection requirements might even decrease\nmining centralization right now.\n\nNo. People seem to think \"Chinese have slow connections? Screw them, free\ncompetition.\"\nBut not being well connected with the other miners is not a problem for the\nChinese miners (who are the hashrate majority), it's a problem for the rest\nof the miners!!\nIt's not about being well connected to the \"global internet\", it's about\nbeing well connected to the hashrate majority.\n\n> 2015-09-11 18:47 GMT+02:00 Adam Back <adam at cypherspace.org>:\n>>\n>> Bitcoin security depends on the enforcement of consensus rules which\n>> is done by economically dependent full nodes.  This is distinct from\n>> miners fullnodes, and balances miners interests, otherwise SPV nodes\n>> and decentralisation of policy would tend degrade, I think.  Therefore\n>> it is important that it be reasonably convenient to run full nodes for\n>> decentralisation security.\n>>\n>> Also you may want to read this summary of Bitcoin decentralisation by\nMark:\n>>\n>>\nhttps://www.reddit.com/r/Bitcoin/comments/3h7eei/greg_luke_adam_if_xt_takes_over_and_wins_the/cu53eq3\n>>\n>> I think you maybe misunderstanding what the Chinese miners said also,\n>> about 8MB, that was a cap on the maximum they felt they could handle\n>> with current network infrastructure.\n>>\n>> I had proposed 2-4-8MB growing over a 4 year time frame with 2MB once\n>> the hard-fork is upgraded by everyone in the network.  (I dont\n>> consider miner triggers, as with soft-fork upgrades, to be an\n>> appropriate roll out mechanism because it is more important that\n>> economically dependent full nodes upgrade, though it can be useful to\n>> know that miners also have upgraded to a reasonable extent to avoid a\n>> temporary hashrate drop off affecting security).\n>>\n>> Adam\n>>\n>> On 9 September 2015 at 15:00, Marcel Jamin via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > I think the overlap of people who want to run a serious mining\noperation and\n>> > people who are unable to afford a slightly above average internet\nconnection\n>> > is infinitesimally small.\n>> >\n>> > 2015-09-09 20:51 GMT+02:00 Jorge Tim\u00f3n <jtimon at jtimon.cc>:\n>> >>\n>> >>\n>> >> On Sep 9, 2015 8:36 PM, \"Marcel Jamin via bitcoin-dev\"\n>> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >> >\n>> >> > I propose to:\n>> >> >\n>> >> > a) assess what blocklimit is currently technically possible without\n>> >> > driving up costs of running a node up too much. Most systems\ncurrently\n>> >> > running a fullnode probably have some capacity left.\n>> >>\n>> >> What about the risk of further increasing mining centralization?\n>> >\n>> >\n>> >\n>> > _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150911/8e6153d2/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Yet another blocklimit proposal / compromise",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Marcel Jamin",
                "Adam Back",
                "Jorge Tim\u00f3n"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 12667
        }
    },
    {
        "title": "[bitcoin-dev] MAST with OP_EVAL and OP_CAT",
        "thread_messages": [
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-09-10T17:18:52",
                "message_text_only": "Inspired by Pieter's Tree Signatures, I believe Merkleized Abstract \nSyntax Trees (MAST) could be implemented with only OP_CAT and OP_EVAL \n(BIP12).\n\nThe idea is very simple. Using a similar example in Pieter's paper,\n\nscriptSig = <sig> <serialized sub-script 10> Z1 0 1 1 X6 1 K9 0 \n<serialized script>\nscriptPubKey = DUP HASH160 <hash serialized script> EQUALVERIFY EVAL\nserialized script = 8 PICK SHA256 (SWAP IF SWAP ENDIF CAT SHA256)*4 <R> \nEQUALVERIFY EVAL\n\nThis will run the 10-th sub-script, when there are 11 sub-scripts in the \nMAST\n\nI think this is the easiest way to enable MAST since the reference \nimplementation for BIP12 is already there. We could enable OP_CAT only \ninside OP_EVAL so this will be a pure softfork.\n\nRef:\nTree Signatures: https://blockstream.com/2015/08/24/treesignatures/\nBIP12: https://github.com/bitcoin/bips/blob/master/bip-0012.mediawiki"
            }
        ],
        "thread_summary": {
            "title": "MAST with OP_EVAL and OP_CAT",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "jl2012 at xbt.hk"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 875
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin threat modelling thread",
        "thread_messages": [
            {
                "author": "Adam Back",
                "date": "2015-09-10T17:48:42",
                "message_text_only": "Hi\n\nCame across this\nhttps://groups.google.com/forum/m/#!topic/bitcoin-xt/zbPwfDf7UoQ useful\nthread discussing Bitcoin threat modelling may reach wider audience on this\nlist.\n\nText from Mike Hearn:\n\n think the next stage is to build a threat model for Bitcoin.\n\nThis mail starts with background. If you already know what a threat model\nis you can skip to the last section where I propose a first draft, as the\nstarting point for discussion.\n\n\nAn intro to threat modelling\n\nIn security engineering, a threat model\n<https://en.wikipedia.org/wiki/Threat_model> is a document that informally\nspecifies:\n\nWhich adversaries (enemies) do you care about?What can they do?Why do they\nwant to attack you?As a result: what threats do they pose?How do you\nprioritise these threats?\n\nEstablishing a threat model is an important part of any security\nengineering project. In the early days of secure computing, threat\nmodelling hadn't been invented and as a result projects frequently hit the\nfollowing problem:\n\nEvery threat looked equally serious, so it became impossible to prioritise\n\nAlmost anything could become a threat, if you squinted right\n\nSo usability, performance, code maintainability etc were sacrificed over\nand over to try and defend against absurd or very unlikely threats just\nbecause someone identified one, in an endless race\n\nThe resulting product sucked and nobody used it, thus protecting people\nfrom no threats at all\n\nPGP is a good example of this problem in action.\n\nMaking good threat models isn't easy (see The Economist article,New Threat\nModel Army\n<http://www.economist.com/blogs/babbage/2013/11/internet-after-snowden>).\nIt can be controversial, because a threat model involves accepting that you\ncan't win all the time - there will exist adversaries that you\nrealistically cannot beat. Writing them down and not worrying about them\nanymore liberates you to focus on other threats you might do a better job\nat, or to work on usability, or features, or other things that users might\nactually care about more.\n\nYou can make your threat model too weak, so it doesn't encompass real\nthreats your users are likely to encounter. But a much more common problem\nis making the model too strong: including *too many* different kinds of\nthreats. Strangely, this can make your product *less* secure rather than\nmore.\n\nOne reason is that with too many threats in your model, you can lose your\nability to prioritise: every threat seems equally important even if perhaps\nreally they aren't, and then you can waste time solving \"threats\" that are\nabsurd or incredibly unlikely.\n\nEven worse, once people add things in to a threat model they hate taking\nthem out, because it'd imply that previous efforts were wasted.\n\nThe Tor threat model\n\nA good example of this is Tor. As you my know I have kind of a love/hate\nrelationship with Tor. It's a useful thing, but I often feel they could do\nthings differently.\n\nThe <https://www.torproject.org/about/overview.html.en#stayinganonymous>Tor\n<https://www.torproject.org/about/overview.html.en#stayinganonymous>\nproject\n<https://www.torproject.org/about/overview.html.en#stayinganonymous>*does\n<https://www.torproject.org/about/overview.html.en#stayinganonymous>* have\na threat model\n<https://www.torproject.org/about/overview.html.en#stayinganonymous>, and\nit is a very strong one. Tor tries to protect you against adversaries that\ncare about very small leaks of application level data, like a browser\nreporting your screen size, because it sees its mission as making all\ntraffic look identical, rather than just hiding your IP address. As a\nconsequence of this threat model Tor is meant to be used with apps that are\nspecifically \"Torified\", like their Tor Browser which is based on Firefox.\nIf a user takes the obvious approach of just downloading and running the\nTor Browser Bundle, their iTunes traffic won't be anonymised. The rationale\nis it's useless to route traffic of random apps via Tor because even if\nthat hides the IP address, the apps might leak private data anyway as they\nweren't designed for it.\n\nThis threat model has a couple of consequences:\n\nIt's extremely easy to think you're hiding your IP address when in fact you\naren't, due to using or accidentally running non-Torified apps.\n\nThe Tor Browser is based on Firefox. When Chrome came along it had a\nclearly superior security architecture, because it was sandboxed, but the\nTor project had made a big investment in customising Firefox to anonymise\nthings like screen sizes. They didn't want to redo all that work.\n\nThe end result of this is that Tor's adversaries discovered they could just\nbreak Tor completely by hacking the web browser, as Firefox is the least\nsecure browser and yet it's the one the Tor project recommends. The Snowden\nfiles contain a bunch of references to this.\n\nInterestingly, the Tor threat model explicitly *excludes* the NSA because\nit can observe the whole network (it is the so-called \"global passive\nadversary\"). Tor does this because they want to support low latency web\nbrowsing, and nobody knows how to do that fast enough when your adversary\ncan watch the traffic between all Tor nodes. So they just exclude such\nenemies from their threat model and that is why Tor is possible.\n\nBut even more interestingly, it turned out that their threat model\nassumptions weren't quite correct. The NSA/GCHQ should, in theory, be able\nto totally deanonymise Tor. But in practice they can't. When the time\nfinally came the 5 Eyes agencies attacked Tor by hacking the web browser,\nnot by exploiting their global observation abilities.\n\nTor has competitors - the commercial VPN providers. They have a rather\ndifferent threat model, where they explicitly don't care about application\nlevel attacks like web sites looking at your screen size. They *only* care\nabout hiding your IP address. As a result their products work for every\napp, and users can easily use Chrome or any other secure web browser.\nAdditionally they only add one hop of latency because the VPN provider does\nnot include itself in the threat model.\n\nThis solves for a different set of adversaries, but for many users it's\nactually a more appropriate set and as a result VPNs are vastly more\npopular than Tor is.\n\nSo to recap, we should build a threat model for Bitcoin because:\n\nWe have limited manpower and therefore must prioritise, sometimes brutally\n\nWithout a model anything can be a threat, so changes that are obvious or\nlook like technical no-brainers can get shot down due to the risk of absurd\nor ridiculous attacks. This happens in Bitcoin Core *a lot*.\n\nIt will bring more formality and rigour to our thinking about security.\n\n\n\nProposed model\n\nThis is *a suggestion only*. I expect vigorous debate and for some people\nto want a different (probably stronger) model. Models are just documents so\nthey can always be tweaked later, there's no need for v1 to be perfect.\n\nOK. Adversaries I think we should care about in version 1, in priority\norder:\n\nRational individuals and small groups, motivated by profit.\n\nThe \"global passive adversary\" as defined by the\n<https://tools.ietf.org/html/rfc7624>IETF\n<https://tools.ietf.org/html/rfc7624>, motivated by a desire to map Bitcoin\ntransactions to people in bulk.\n\nAnd that's it.\n\n*The GPA*\n\nThe \"global passive adversary\" can mean intelligence agencies *but only\nsometimes*. Specifically, it assumes they only watch and they don't\nactively interfere. This assumption is of course not entirely valid - IAs\ndo sometimes engage in active attacks. My suggested threat model doesn't\ninclude that activity because (1) it's hard to do anything about it and (2)\nthey much prefer to stay stealthy anyway.\n\nOf course, in the Bitcoin system, there may be other GPAs. Anyone who\nwatches the block chain can potentially be such an adversary. Note the\ncareful wording: you have to be doing deanonymization *in bulk* to be an\nin-scope adversary. This is to avoid including block explorers that have\nnotes features, people who build lists of well known addresses etc. We\ncan't stop people doing that: it's up to Bitcoin users to avoid telling the\nworld which transactions are theirs. It also excludes exchanges that are\ntrying to monitor transactions going in and out of their platform for\ncompliance purposes: they are not attempting to do this for the entire\nsystem, therefore, they are not adversaries in this threat model.\n\n*Individuals and small groups*\n\nThey are assumed to have hacking skills that are considered good by the\nstandards of ordinary hackers - they are not script kiddies. However they\nare also not state-level hackers: they do not have an endless bag of zero\ndays that can exploit any imaginable device.\n\nThese attackers are motivated by profit. An attack that yields only\nworthless pieces of data is not interesting to these adversaries: they want\nto monetise. Attacks that involve some incredibly convoluted process to\nturn data into money is also uninteresting: we assume a level of\nrationality that means they'll ignore attacks with very poor effort/reward\nratios.\n\n*Examples*\n\nHere are some examples of attackers that would be in-scope for this threat\nmodel:\n\n\u2713 A hacker who is attempting to steal the contents of your Bitcoin wallet\n\n\u2713 A mugger at a conference who is trying to identify rich targets to beat up\n\n\u2713 A business owner who is attempting to discover the revenue of his\ncompetitor\n\n\u2713 A government attempting to build a map of every Bitcoin transaction to\npeople\n\n\u2713 Someone attempting to profit off a quick market panic by short selling\nBTC and then DoSing the network\n\n.... and would not be in scope .....\n\n\u2718 An actor who learns IP addresses of people using Bitcoin (reason: not\nprofitable, mere fact of use is not enough to build a GPA map)\n\n\u2718 A short seller who needs to successfully root a specific, well run server\nto cause problems (reason: without zero days it's hard to attack a fully\npatched and locked down machine)\n\n\u2718 A bitcoin exchange that demands proof of where your money came from\n(reason: not global adversary)\n\n\u2718 A government who wants to shut down Bitcoin globally (reason: active\nstate adversary, can't realistically stop this as they can always mine a\nbogus chain)\n\n\u2718 A government who wants to shut down Bitcoin in their own territory\n(reason: active state adversary, can just find and arrest anyone\nadvertising BTC acceptance)\n\n\u2718 A developer who wants to turn the block chain into a file sharing network\n(reason: not rational, the resulting product would be terrible)\n\n\u2718 A random individual learning the balance of wallets on random IP\naddresses (reason: can't monetise with any reasonable effort)\n\n.... and could be argued either way .....\n\n\u2022 A developer who wants to use the block chain for timestamping lots of\ndata (can be seen as \"motivated by profit\", OTOH, actual threat is pretty\nlow)\n\n\u2022 A miner who constantly tries to mine zero sized blocks or constantly\ndouble spends against high profile merchants (can be seen as \"motivated by\nprofit\" but also not rational behaviour as it'd tank the price of BTC)\n\nObviously this stuff is subjective. We can argue about what \"rational\"\nmeans for miners, for instance.\n\nThe goal of the model is not to be 100% accurate or a perfect prediction of\nthe future. It's just there to help people prioritise development efforts.\nShould I work on *this* new feature or addressing *that* threat? A threat\nmodel can help you decide whether it's worth it. People can still choose to\nwork on threats that are outside of this model if they want to, and we can\nalso choose to ignore threats that might be inside it, if the cost/benefit\nratio is really bad.\n\nThe exclusion of many types of government adversary might be controversial.\nIt's for practical reasons: governments have lots of very effective ways to\ninterfere with Bitcoin that we can't do anything about, like bank\nblockades, and so far most of them seem to be taking a wait-and-see stance\nanyway.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150910/76e85360/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin threat modelling thread",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Adam Back"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 12077
        }
    },
    {
        "title": "[bitcoin-dev] Named Bitcoin Addresses",
        "thread_messages": [
            {
                "author": "essofluffy .",
                "date": "2015-09-10T21:12:29",
                "message_text_only": "Hi Everyone,\n\nAn issue I'm sure everyone here is familiar with is the problem concerning\nthe fact that Bitcoin addresses are too complex to memorize and share.\nCurrent Bitcoin addresses can be very intimidating to new users. As Bitcoin\ngrows it's necessary to provide a much more user friendly experience to the\nend user. I think that having the capability to assign a unique name to a\nBitcoin address is in the best interest of Bitcoin and it's users.\nI've recently come up with a method for assigning a unique name to a\nspecific Bitcoin address. I'm looking to get some feedback/criticism on\nthis method that I have detailed below.\n\nLet\u2019s run through Bob and Alice transacting with a Named Bitcoin Address.\nBob wants to collect a payment from Alice for a service/good he is selling,\nbut Alice wants to pay from her home computer where she securely keeps all\nher Bitcoin. So now Bob needs to give Alice his Bitcoin address and because\nBob is using a Named Bitcoin Address and a supported wallet he can give her\nan easy to memorize and hard to mess up address. Bob\u2019s address is simply\n\u2018SendBitcoinsToBob\u2019 which can easily be written down or memorized. Now\nAlice can go home send the Bitcoin from her own supported wallet and be\npositive that she sent it to Bob.\n\nLet\u2019s look at how Bob\u2019s supported wallet made that address.\n\nFirst Bob let\u2019s his wallet know that he wants to create a new address. In\nresponse, his wallet simply asks him what he wants that address to be\nnamed. Bob then enters \u2018SendBitcoinsToBob\u2019 as his preferred address name.\nThe wallet then let\u2019s Bob know if his preferred address name is available.\nIf it\u2019s available the name is broadcasted to the network and ready to use.\n\nNow let\u2019s get a little more technical.\n\nWhen Bob inputs his preferred address name the client has to make sure this\nname hasn\u2019t been taken or else who knows where Alice will be sending her\nBitcoins. The client does this by referencing a downloaded \u201cdirectory\u201d of\nnames chosen by people using this system. This directory of names are\ntransactions sent to an address without a private key (but still viewable\non the blockchain) with the name appended to the transactions as an\nOP_RETURN output. These transactions are downloaded or indexed, depending\non whether or not the wallet contains the full Blockchain or is an SPV\nwallet. Because of such a large amount of possible address names a binary\nsearch method is used to search through all this data efficiently. The\nnames could be sorted in two ways, the first being the first character and\nthe second being the total length of the name (I will being exploring\nadditional methods to make this process more efficient). So now that Bob\u2019s\nclient has verified that the name has not been taken and is valid (valid\nmeaning it's under 35 bytes long and only using chars 0-9 and a-z) it sends\na transaction of 1 satoshi and a small fee to the address without a private\nkey as talked about earlier. The transaction's OP_RETURN output consists of\ntwo parts. The implementation version of this method (up to 8 characters)\nand the name itself (up to 32 characters). Once the transaction is\nbroadcasted to the network and confirmed the name is ready to be used.\n\nLet\u2019s look at how Alice\u2019s supported wallet sends her Bitcoin to Bob\u2019s Named\nBitcoin Address.\n\nWhen Alice enters in Bob\u2019s address, \u2018SendBitcoinsToBob\u2019 Alice\u2019s client\nreferences the same \u201cdirectory\u201d as Bob only on her device and searches for\nthe OP_RETURN output of \u2018SendBitcoinsToBob\u2019 using a very similar binary\nsearch method as used for the verification of the availability of an\naddress name. If a name isn\u2019t found the client would simply return an\nerror. If the name is found then the client will pull the information of\nthat transaction and use the address it was sent from as the address to\nsend the Bitcoin to.\n\nEssentially what this idea describes is a method to assign a name to a\nBitcoin address in a way that is completely verifiable and independent of a\nthird party.\n\nPlease ask your questions and provide feedback.\n\n- Devin\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150910/ee0e603c/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-09-10T21:32:37",
                "message_text_only": "Are you aware of the payment protocol?\nOn Sep 10, 2015 2:12 PM, \"essofluffy . via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi Everyone,\n>\n> An issue I'm sure everyone here is familiar with is the problem concerning\n> the fact that Bitcoin addresses are too complex to memorize and share.\n> Current Bitcoin addresses can be very intimidating to new users. As Bitcoin\n> grows it's necessary to provide a much more user friendly experience to the\n> end user. I think that having the capability to assign a unique name to a\n> Bitcoin address is in the best interest of Bitcoin and it's users.\n> I've recently come up with a method for assigning a unique name to a\n> specific Bitcoin address. I'm looking to get some feedback/criticism on\n> this method that I have detailed below.\n>\n> Let\u2019s run through Bob and Alice transacting with a Named Bitcoin Address.\n> Bob wants to collect a payment from Alice for a service/good he is\n> selling, but Alice wants to pay from her home computer where she securely\n> keeps all her Bitcoin. So now Bob needs to give Alice his Bitcoin address\n> and because Bob is using a Named Bitcoin Address and a supported wallet he\n> can give her an easy to memorize and hard to mess up address. Bob\u2019s address\n> is simply \u2018SendBitcoinsToBob\u2019 which can easily be written down or\n> memorized. Now Alice can go home send the Bitcoin from her own supported\n> wallet and be positive that she sent it to Bob.\n>\n> Let\u2019s look at how Bob\u2019s supported wallet made that address.\n>\n> First Bob let\u2019s his wallet know that he wants to create a new address. In\n> response, his wallet simply asks him what he wants that address to be\n> named. Bob then enters \u2018SendBitcoinsToBob\u2019 as his preferred address name.\n> The wallet then let\u2019s Bob know if his preferred address name is available.\n> If it\u2019s available the name is broadcasted to the network and ready to use.\n>\n> Now let\u2019s get a little more technical.\n>\n> When Bob inputs his preferred address name the client has to make sure\n> this name hasn\u2019t been taken or else who knows where Alice will be sending\n> her Bitcoins. The client does this by referencing a downloaded \u201cdirectory\u201d\n> of names chosen by people using this system. This directory of names are\n> transactions sent to an address without a private key (but still viewable\n> on the blockchain) with the name appended to the transactions as an\n> OP_RETURN output. These transactions are downloaded or indexed, depending\n> on whether or not the wallet contains the full Blockchain or is an SPV\n> wallet. Because of such a large amount of possible address names a binary\n> search method is used to search through all this data efficiently. The\n> names could be sorted in two ways, the first being the first character and\n> the second being the total length of the name (I will being exploring\n> additional methods to make this process more efficient). So now that Bob\u2019s\n> client has verified that the name has not been taken and is valid (valid\n> meaning it's under 35 bytes long and only using chars 0-9 and a-z) it sends\n> a transaction of 1 satoshi and a small fee to the address without a private\n> key as talked about earlier. The transaction's OP_RETURN output consists of\n> two parts. The implementation version of this method (up to 8 characters)\n> and the name itself (up to 32 characters). Once the transaction is\n> broadcasted to the network and confirmed the name is ready to be used.\n>\n> Let\u2019s look at how Alice\u2019s supported wallet sends her Bitcoin to Bob\u2019s\n> Named Bitcoin Address.\n>\n> When Alice enters in Bob\u2019s address, \u2018SendBitcoinsToBob\u2019 Alice\u2019s client\n> references the same \u201cdirectory\u201d as Bob only on her device and searches for\n> the OP_RETURN output of \u2018SendBitcoinsToBob\u2019 using a very similar binary\n> search method as used for the verification of the availability of an\n> address name. If a name isn\u2019t found the client would simply return an\n> error. If the name is found then the client will pull the information of\n> that transaction and use the address it was sent from as the address to\n> send the Bitcoin to.\n>\n> Essentially what this idea describes is a method to assign a name to a\n> Bitcoin address in a way that is completely verifiable and independent of a\n> third party.\n>\n> Please ask your questions and provide feedback.\n>\n> - Devin\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150910/85ca26b6/attachment.html>"
            },
            {
                "author": "Andy Chase",
                "date": "2015-09-11T09:43:54",
                "message_text_only": "What's some more information about the \"memorizing and sharing\" use\ncase? In most cases if you wanted someone to send you money you'd send\nthem a payment request via email (or just send them your address).\n\nThere's a bunch of solutions to your problem listed here:\nhttps://github.com/bitcoin/bips/blob/master/bip-0015.mediawiki\nBut sending a payment request via BIP-70 is the \"best practice\":\nhttps://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki\n\nOn Thu, Sep 10, 2015 at 2:32 PM, Mark Friedenbach via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Are you aware of the payment protocol?\n>\n> On Sep 10, 2015 2:12 PM, \"essofluffy . via bitcoin-dev\"\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> Hi Everyone,\n>>\n>> An issue I'm sure everyone here is familiar with is the problem concerning\n>> the fact that Bitcoin addresses are too complex to memorize and share.\n>> Current Bitcoin addresses can be very intimidating to new users. As Bitcoin\n>> grows it's necessary to provide a much more user friendly experience to the\n>> end user. I think that having the capability to assign a unique name to a\n>> Bitcoin address is in the best interest of Bitcoin and it's users.\n>> I've recently come up with a method for assigning a unique name to a\n>> specific Bitcoin address. I'm looking to get some feedback/criticism on this\n>> method that I have detailed below.\n>>\n>> Let\u2019s run through Bob and Alice transacting with a Named Bitcoin Address.\n>> Bob wants to collect a payment from Alice for a service/good he is\n>> selling, but Alice wants to pay from her home computer where she securely\n>> keeps all her Bitcoin. So now Bob needs to give Alice his Bitcoin address\n>> and because Bob is using a Named Bitcoin Address and a supported wallet he\n>> can give her an easy to memorize and hard to mess up address. Bob\u2019s address\n>> is simply \u2018SendBitcoinsToBob\u2019 which can easily be written down or memorized.\n>> Now Alice can go home send the Bitcoin from her own supported wallet and be\n>> positive that she sent it to Bob.\n>>\n>> Let\u2019s look at how Bob\u2019s supported wallet made that address.\n>>\n>> First Bob let\u2019s his wallet know that he wants to create a new address. In\n>> response, his wallet simply asks him what he wants that address to be named.\n>> Bob then enters \u2018SendBitcoinsToBob\u2019 as his preferred address name. The\n>> wallet then let\u2019s Bob know if his preferred address name is available. If\n>> it\u2019s available the name is broadcasted to the network and ready to use.\n>>\n>> Now let\u2019s get a little more technical.\n>>\n>> When Bob inputs his preferred address name the client has to make sure\n>> this name hasn\u2019t been taken or else who knows where Alice will be sending\n>> her Bitcoins. The client does this by referencing a downloaded \u201cdirectory\u201d\n>> of names chosen by people using this system. This directory of names are\n>> transactions sent to an address without a private key (but still viewable on\n>> the blockchain) with the name appended to the transactions as an OP_RETURN\n>> output. These transactions are downloaded or indexed, depending on whether\n>> or not the wallet contains the full Blockchain or is an SPV wallet. Because\n>> of such a large amount of possible address names a binary search method is\n>> used to search through all this data efficiently. The names could be sorted\n>> in two ways, the first being the first character and the second being the\n>> total length of the name (I will being exploring additional methods to make\n>> this process more efficient). So now that Bob\u2019s client has verified that the\n>> name has not been taken and is valid (valid meaning it's under 35 bytes long\n>> and only using chars 0-9 and a-z) it sends a transaction of 1 satoshi and a\n>> small fee to the address without a private key as talked about earlier. The\n>> transaction's OP_RETURN output consists of two parts. The implementation\n>> version of this method (up to 8 characters) and the name itself (up to 32\n>> characters). Once the transaction is broadcasted to the network and\n>> confirmed the name is ready to be used.\n>>\n>> Let\u2019s look at how Alice\u2019s supported wallet sends her Bitcoin to Bob\u2019s\n>> Named Bitcoin Address.\n>>\n>> When Alice enters in Bob\u2019s address, \u2018SendBitcoinsToBob\u2019 Alice\u2019s client\n>> references the same \u201cdirectory\u201d as Bob only on her device and searches for\n>> the OP_RETURN output of \u2018SendBitcoinsToBob\u2019 using a very similar binary\n>> search method as used for the verification of the availability of an address\n>> name. If a name isn\u2019t found the client would simply return an error. If the\n>> name is found then the client will pull the information of that transaction\n>> and use the address it was sent from as the address to send the Bitcoin to.\n>>\n>> Essentially what this idea describes is a method to assign a name to a\n>> Bitcoin address in a way that is completely verifiable and independent of a\n>> third party.\n>>\n>> Please ask your questions and provide feedback.\n>>\n>> - Devin\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Kristov Atlas",
                "date": "2015-09-11T15:13:18",
                "message_text_only": "I applaud your brainstorming efforts! :) But I dislike just about\neverything about this proposal.\n\nBitcoin addresses should never be reused, for privacy and security reasons\ndocumented extensively online.\n\nI definitely do not want my computer to maintain a registry of every\naddress in the world any more than I want to maintain a list of all email\naddresses, web addresses, etc. This cannot be scaled and is wasteful since\nmost participants in the network don't need to transact.\n\nIf we need naming conventions, I'd rather see a name registry system\noff-chain attached to bip47 reusable payment codes.\n\n-Kr\nOn Sep 10, 2015 5:32 PM, \"Mark Friedenbach via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Are you aware of the payment protocol?\n> On Sep 10, 2015 2:12 PM, \"essofluffy . via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi Everyone,\n>>\n>> An issue I'm sure everyone here is familiar with is the problem\n>> concerning the fact that Bitcoin addresses are too complex to memorize and\n>> share. Current Bitcoin addresses can be very intimidating to new users. As\n>> Bitcoin grows it's necessary to provide a much more user friendly\n>> experience to the end user. I think that having the capability to assign a\n>> unique name to a Bitcoin address is in the best interest of Bitcoin and\n>> it's users.\n>> I've recently come up with a method for assigning a unique name to a\n>> specific Bitcoin address. I'm looking to get some feedback/criticism on\n>> this method that I have detailed below.\n>>\n>> Let\u2019s run through Bob and Alice transacting with a Named Bitcoin Address.\n>> Bob wants to collect a payment from Alice for a service/good he is\n>> selling, but Alice wants to pay from her home computer where she securely\n>> keeps all her Bitcoin. So now Bob needs to give Alice his Bitcoin address\n>> and because Bob is using a Named Bitcoin Address and a supported wallet he\n>> can give her an easy to memorize and hard to mess up address. Bob\u2019s address\n>> is simply \u2018SendBitcoinsToBob\u2019 which can easily be written down or\n>> memorized. Now Alice can go home send the Bitcoin from her own supported\n>> wallet and be positive that she sent it to Bob.\n>>\n>> Let\u2019s look at how Bob\u2019s supported wallet made that address.\n>>\n>> First Bob let\u2019s his wallet know that he wants to create a new address. In\n>> response, his wallet simply asks him what he wants that address to be\n>> named. Bob then enters \u2018SendBitcoinsToBob\u2019 as his preferred address name.\n>> The wallet then let\u2019s Bob know if his preferred address name is available.\n>> If it\u2019s available the name is broadcasted to the network and ready to use.\n>>\n>> Now let\u2019s get a little more technical.\n>>\n>> When Bob inputs his preferred address name the client has to make sure\n>> this name hasn\u2019t been taken or else who knows where Alice will be sending\n>> her Bitcoins. The client does this by referencing a downloaded \u201cdirectory\u201d\n>> of names chosen by people using this system. This directory of names are\n>> transactions sent to an address without a private key (but still viewable\n>> on the blockchain) with the name appended to the transactions as an\n>> OP_RETURN output. These transactions are downloaded or indexed, depending\n>> on whether or not the wallet contains the full Blockchain or is an SPV\n>> wallet. Because of such a large amount of possible address names a binary\n>> search method is used to search through all this data efficiently. The\n>> names could be sorted in two ways, the first being the first character and\n>> the second being the total length of the name (I will being exploring\n>> additional methods to make this process more efficient). So now that Bob\u2019s\n>> client has verified that the name has not been taken and is valid (valid\n>> meaning it's under 35 bytes long and only using chars 0-9 and a-z) it sends\n>> a transaction of 1 satoshi and a small fee to the address without a private\n>> key as talked about earlier. The transaction's OP_RETURN output consists of\n>> two parts. The implementation version of this method (up to 8 characters)\n>> and the name itself (up to 32 characters). Once the transaction is\n>> broadcasted to the network and confirmed the name is ready to be used.\n>>\n>> Let\u2019s look at how Alice\u2019s supported wallet sends her Bitcoin to Bob\u2019s\n>> Named Bitcoin Address.\n>>\n>> When Alice enters in Bob\u2019s address, \u2018SendBitcoinsToBob\u2019 Alice\u2019s client\n>> references the same \u201cdirectory\u201d as Bob only on her device and searches for\n>> the OP_RETURN output of \u2018SendBitcoinsToBob\u2019 using a very similar binary\n>> search method as used for the verification of the availability of an\n>> address name. If a name isn\u2019t found the client would simply return an\n>> error. If the name is found then the client will pull the information of\n>> that transaction and use the address it was sent from as the address to\n>> send the Bitcoin to.\n>>\n>> Essentially what this idea describes is a method to assign a name to a\n>> Bitcoin address in a way that is completely verifiable and independent of a\n>> third party.\n>>\n>> Please ask your questions and provide feedback.\n>>\n>> - Devin\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150911/6ce236b5/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Named Bitcoin Addresses",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "essofluffy .",
                "Kristov Atlas",
                "Andy Chase",
                "Mark Friedenbach"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 19920
        }
    },
    {
        "title": "[bitcoin-dev] Three Challenges for Scaling Bitcoin",
        "thread_messages": [
            {
                "author": "Bob McElrath",
                "date": "2015-09-11T14:21:00",
                "message_text_only": "I will be unable to attend the Scaling Bitcoin conference this weekend, but I\nwrote down a few thoughts, to hopefully move us past this block size debate and\nonto something more constructive:\n\n    http://blog.sldx.com/three-challenges-for-scaling-bitcoin/\n\nComments/criticism welcome.\n\n--\nCheers, Bob McElrath\n\n\"For every complex problem, there is a solution that is simple, neat, and wrong.\"\n    -- H. L. Mencken"
            }
        ],
        "thread_summary": {
            "title": "Three Challenges for Scaling Bitcoin",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Bob McElrath"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 413
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Days Destroyed as block selection heuristic",
        "thread_messages": [
            {
                "author": "Dave Scotese",
                "date": "2015-09-11T16:27:25",
                "message_text_only": "Rather than (promising to, and when they don't actually, at least\npretending to) use the first-seen block, I propose that a more\nsophisticated method of choosing which of two block solutions to accept.\nEssentially, a miner receiving two solutions at the same height would\ncompute a weighted sum of bitcoin-days-destroyed (transactions received\nearlier get higher weights) of whatever transactions are in a block *and\nalso* were in the miner's mempool *before* the first solution arrived.\nWhichever block has more wins.\n\nThis strategy avoids allowing miners to use private transactions to mess\nwith the blockchain.  It also makes an empty block far less attractive\nbecause it is easily replaced, all the way until the next block locks it\nin.  Any block-selection heuristic can be gamed, but I believe that using a\nweighted sum of BTCDD is harder to game than using block propagation timing.\n\nI asked Can Bitcoin Days Destroyed be a better resolution mechanism for\ncompeting blocks?\n<http://bitcoin.stackexchange.com/questions/39226/can-bitcoin-days-destroyed-be-a-better-resolution-mechanism-for-competing-blocks>\non the stackexchange bitcoin site in order to collect objections to and\nproblems with this idea, and have not found any that I haven't addressed.\nThe best objection is that *maybe* empty blocks and selfish mining are\neither good for bitcoin, or else they are so minimally bad that no effort\nought to be expended in preventing them.\n\nIf anyone here thinks this is a good idea, and no one can offer reasons\nit's a bad idea, I will probably start working on an implementation.  I'm\nreally slow though, so ping me if it looks like fun to you.\n\nnotplato\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150911/3ecf1dff/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-11T16:32:44",
                "message_text_only": "On Sep 11, 2015 12:27 PM, \"Dave Scotese via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Rather than (promising to, and when they don't actually, at least\npretending to) use the first-seen block, I propose that a more\nsophisticated method of choosing which of two block solutions to accept.\n\nThere's already a criterion to chose: the one with more work (in valid\nblocks) on top of it.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150911/4844c5c9/attachment.html>"
            },
            {
                "author": "Christophe Biocca",
                "date": "2015-09-11T17:18:10",
                "message_text_only": "It's pretty obvious that Dave is suggesting an alternate tie-breaker:\n\n> It also makes an empty block far less attractive because it is easily replaced, all the way until the next block locks it in.\n\nI do see a problem with the proposal. Right now, when a miner sees a\nnew block with the most work and there are no ties, it is always a\ngood idea to build on top of it (unless they're in the middle of\nbuilding a private chain, or other pathological cases).\n\nWith this new heuristic (assuming it is actually followed by a good\nchunk of people), a miner can reasonably know whether or not they can\nsafely mine a sibling of the block instead. When enough widely\npropagated transactions exist, and the block to orphan is small,\nthere's minimal risk in mining a sibling block instead of a child\nblock (the only extra risk is in someone else mining a child block\nright around the time we suceed in mining a siblish block, where we'll\ndefinitely be orphaned instead of ~50% of the time).\n\nBecause the risk can be measured and is sometimes very small, it will\nthen be profitable for a miner to orphan a small non-empty block and\ndouble-spend some confirmed transactions whenever the block confirming\nthem is easily replaced. This lowers the security of 1-conf\ntransactions.\n\nMind you, that risk doesn't apply if we prefer non-empty blocks to\nempty blocks and leave it at that, or only switch if the new block\ndoesn't double spend transactions in the old one, so it's a fixable\nissue.\n\nOn 11 September 2015 at 12:32, Jorge Tim\u00f3n\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> On Sep 11, 2015 12:27 PM, \"Dave Scotese via bitcoin-dev\"\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> Rather than (promising to, and when they don't actually, at least\n>> pretending to) use the first-seen block, I propose that a more sophisticated\n>> method of choosing which of two block solutions to accept.\n>\n> There's already a criterion to chose: the one with more work (in valid\n> blocks) on top of it.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-11T18:37:34",
                "message_text_only": "On Sep 11, 2015 1:18 PM, \"Christophe Biocca\" <christophe.biocca at gmail.com>\nwrote:\n>\n> It's pretty obvious that Dave is suggesting an alternate tie-breaker:\n\nI thought he was proposing a new consesnsus rule. I see, this would be just\na policy validation that everybody would be free to ignore (like the \"first\nseen\" spend conflict tx replacement policy).\n\nI don't see how miners would benefit from running this policy so I would\nnot expect them to run it in the long run (like the \"first seen\" spend\nconflict tx replacement policy).\nIf miners don't use it, I don't see how users can benefit from running that\npolicy themselves.\nThey will still have to keep waiting some block confirmation to\nexponentially reduce the chances of a successful double-spend attack with\neach new confirmation (as explained in the bitcoin white paper).\n\n> Mind you, that risk doesn't apply if we prefer non-empty blocks to\n> empty blocks and leave it at that, or only switch if the new block\n> doesn't double spend transactions in the old one, so it's a fixable\n> issue.\n\nHow do you know which of 2 blocks with the same height is \"newer\"?\n\n> On 11 September 2015 at 12:32, Jorge Tim\u00f3n\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> > On Sep 11, 2015 12:27 PM, \"Dave Scotese via bitcoin-dev\"\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >> Rather than (promising to, and when they don't actually, at least\n> >> pretending to) use the first-seen block, I propose that a more\nsophisticated\n> >> method of choosing which of two block solutions to accept.\n> >\n> > There's already a criterion to chose: the one with more work (in valid\n> > blocks) on top of it.\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150911/953bcc1b/attachment.html>"
            },
            {
                "author": "Christophe Biocca",
                "date": "2015-09-11T19:06:43",
                "message_text_only": "> How do you know which of 2 blocks with the same height is \"newer\"?\n\n>From the particular node's perspective. I'm aware there is no\npossibility of consistent global ordering.\n\nDave's code is about switching blocks (instead of continuing on the\nexisting one), and, in that context, \"old\" means the first sibling the\nnode saw, and \"new\" is any subsequent block. I will disambiguate this\nin the future, because I'm clearly confusing at least 1 person.\n\n> I don't see how miners would benefit from running this policy so I would not expect them to run it in the long run (like the \"first seen\" spend conflict tx replacement policy).\n\nThere's always a default, and if miners don't have any overriding\nreason to change, they'll likely stick to it. Which is why Dave\nstarted his statement with:\n\n> Rather than (promising to, and when they don't actually, at least pretending to) use the first-seen block\n\nClearly recognizing that any changed logic is non-binding.\n\nOn 11 September 2015 at 14:37, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>\n> On Sep 11, 2015 1:18 PM, \"Christophe Biocca\" <christophe.biocca at gmail.com>\n> wrote:\n>>\n>> It's pretty obvious that Dave is suggesting an alternate tie-breaker:\n>\n> I thought he was proposing a new consesnsus rule. I see, this would be just\n> a policy validation that everybody would be free to ignore (like the \"first\n> seen\" spend conflict tx replacement policy).\n>\n> I don't see how miners would benefit from running this policy so I would not\n> expect them to run it in the long run (like the \"first seen\" spend conflict\n> tx replacement policy).\n> If miners don't use it, I don't see how users can benefit from running that\n> policy themselves.\n> They will still have to keep waiting some block confirmation to\n> exponentially reduce the chances of a successful double-spend attack with\n> each new confirmation (as explained in the bitcoin white paper).\n>\n>> Mind you, that risk doesn't apply if we prefer non-empty blocks to\n>> empty blocks and leave it at that, or only switch if the new block\n>> doesn't double spend transactions in the old one, so it's a fixable\n>> issue.\n>\n> How do you know which of 2 blocks with the same height is \"newer\"?\n>\n>> On 11 September 2015 at 12:32, Jorge Tim\u00f3n\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >\n>> > On Sep 11, 2015 12:27 PM, \"Dave Scotese via bitcoin-dev\"\n>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >>\n>> >> Rather than (promising to, and when they don't actually, at least\n>> >> pretending to) use the first-seen block, I propose that a more\n>> >> sophisticated\n>> >> method of choosing which of two block solutions to accept.\n>> >\n>> > There's already a criterion to chose: the one with more work (in valid\n>> > blocks) on top of it.\n>> >\n>> >\n>> > _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >"
            },
            {
                "author": "Dave Scotese",
                "date": "2015-09-11T19:26:20",
                "message_text_only": "Yes, this proposal is a policy that everyone would be free to ignore.  I\nshould have introduced the situation in which this *unenforceable* policy\nmakes sense to me.  Here it is:\n\nEvery miner is listening for valid block solutions but might receive two\nvalid blocks and then they have to decide which one to use.  Choosing the\none you saw first is the default behavior.  In that situation, we'd all\nlike everyone to choose the same block.  I propose that a better heuristic\nthan \"first seen\" is to compare the BTCDD, *but only of transactions you\nalready have in your mempool*, and\n\n*weight the BTCDD so that txns you got earlier are more important.*\nThe heuristic is most useful when the two blocks are received within a\nsmall window of time, opting for the first-seen rule otherwise.  I assume\nmany miners have an idea of how long it takes for anyone's new block to get\nacross the network, and more specifically, the range of times it takes for\nnew solutions to get to themselves.  During this little time window, the\nchances are 50/50 that they'll choose the right block.  If the default\nbehavior were to use BTCDD during that time window (one second? I have no\nidea!), then the chances would be significantly better.\n\nI think Jorge is right that it doesn't benefit miners.  It doesn't hurt\nthem either, unless they are trying to do selfish mining.  Well, it\nbenefits them in terms of increased bitcoin stability by A) making it\neasier for clients to decide which block is valid when they see two\ncompeting with each other, B) motivating miners to add transactions instead\nof mining empty blocks, C) severely decreasing the utility of any global\nprivate network of nodes intended to spread selfishly-mined blocks, and D)\nmotivating miners to stay well-connected so that they get transactions\nquickly.\n\nI sent this to the list because it is only useful if it is set as default\nbehavior since most miners leave the defaults alone, and the benefits don't\nmaterialize unless a majority follows the policy.\n\nOn Fri, Sep 11, 2015 at 11:37 AM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n\n>\n> On Sep 11, 2015 1:18 PM, \"Christophe Biocca\" <christophe.biocca at gmail.com>\n> wrote:\n> >\n> > It's pretty obvious that Dave is suggesting an alternate tie-breaker:\n>\n> I thought he was proposing a new consesnsus rule. I see, this would be\n> just a policy validation that everybody would be free to ignore (like the\n> \"first seen\" spend conflict tx replacement policy).\n>\n> I don't see how miners would benefit from running this policy so I would\n> not expect them to run it in the long run (like the \"first seen\" spend\n> conflict tx replacement policy).\n> If miners don't use it, I don't see how users can benefit from running\n> that policy themselves.\n> They will still have to keep waiting some block confirmation to\n> exponentially reduce the chances of a successful double-spend attack with\n> each new confirmation (as explained in the bitcoin white paper).\n>\n> > Mind you, that risk doesn't apply if we prefer non-empty blocks to\n> > empty blocks and leave it at that, or only switch if the new block\n> > doesn't double spend transactions in the old one, so it's a fixable\n> > issue.\n>\n> How do you know which of 2 blocks with the same height is \"newer\"?\n>\n> > On 11 September 2015 at 12:32, Jorge Tim\u00f3n\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > >\n> > > On Sep 11, 2015 12:27 PM, \"Dave Scotese via bitcoin-dev\"\n> > > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > >>\n> > >> Rather than (promising to, and when they don't actually, at least\n> > >> pretending to) use the first-seen block, I propose that a more\n> sophisticated\n> > >> method of choosing which of two block solutions to accept.\n> > >\n> > > There's already a criterion to chose: the one with more work (in valid\n> > > blocks) on top of it.\n> > >\n> > >\n> > > _______________________________________________\n> > > bitcoin-dev mailing list\n> > > bitcoin-dev at lists.linuxfoundation.org\n> > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > >\n>\n\n\n\n-- \nI like to provide some work at no charge to prove my value. Do you need a\ntechie?\nI own Litmocracy <http://www.litmocracy.com> and Meme Racing\n<http://www.memeracing.net> (in alpha).\nI'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which\nnow accepts Bitcoin.\nI also code for The Dollar Vigilante <http://dollarvigilante.com/>.\n\"He ought to find it more profitable to play by the rules\" - Satoshi\nNakamoto\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150911/5d843513/attachment.html>"
            },
            {
                "author": "Vincent Truong",
                "date": "2015-09-11T22:21:33",
                "message_text_only": "Would this alter the way txns will be prioritised in order to try to win?\nYou would always pick txns with the best BTCDD to maximize your chances of\nbeing the block to build on.\n\nI see this as potentially being a bad outcome for bitcoin's fungibility.\nOn Sep 12, 2015 5:26 AM, \"Dave Scotese via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Yes, this proposal is a policy that everyone would be free to ignore.  I\n> should have introduced the situation in which this *unenforceable* policy\n> makes sense to me.  Here it is:\n>\n> Every miner is listening for valid block solutions but might receive two\n> valid blocks and then they have to decide which one to use.  Choosing the\n> one you saw first is the default behavior.  In that situation, we'd all\n> like everyone to choose the same block.  I propose that a better heuristic\n> than \"first seen\" is to compare the BTCDD, *but only of transactions you\n> already have in your mempool*, and\n>\n> *weight the BTCDD so that txns you got earlier are more important.*\n> The heuristic is most useful when the two blocks are received within a\n> small window of time, opting for the first-seen rule otherwise.  I assume\n> many miners have an idea of how long it takes for anyone's new block to get\n> across the network, and more specifically, the range of times it takes for\n> new solutions to get to themselves.  During this little time window, the\n> chances are 50/50 that they'll choose the right block.  If the default\n> behavior were to use BTCDD during that time window (one second? I have no\n> idea!), then the chances would be significantly better.\n>\n> I think Jorge is right that it doesn't benefit miners.  It doesn't hurt\n> them either, unless they are trying to do selfish mining.  Well, it\n> benefits them in terms of increased bitcoin stability by A) making it\n> easier for clients to decide which block is valid when they see two\n> competing with each other, B) motivating miners to add transactions instead\n> of mining empty blocks, C) severely decreasing the utility of any global\n> private network of nodes intended to spread selfishly-mined blocks, and D)\n> motivating miners to stay well-connected so that they get transactions\n> quickly.\n>\n> I sent this to the list because it is only useful if it is set as default\n> behavior since most miners leave the defaults alone, and the benefits don't\n> materialize unless a majority follows the policy.\n>\n> On Fri, Sep 11, 2015 at 11:37 AM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>\n>>\n>> On Sep 11, 2015 1:18 PM, \"Christophe Biocca\" <christophe.biocca at gmail.com>\n>> wrote:\n>> >\n>> > It's pretty obvious that Dave is suggesting an alternate tie-breaker:\n>>\n>> I thought he was proposing a new consesnsus rule. I see, this would be\n>> just a policy validation that everybody would be free to ignore (like the\n>> \"first seen\" spend conflict tx replacement policy).\n>>\n>> I don't see how miners would benefit from running this policy so I would\n>> not expect them to run it in the long run (like the \"first seen\" spend\n>> conflict tx replacement policy).\n>> If miners don't use it, I don't see how users can benefit from running\n>> that policy themselves.\n>> They will still have to keep waiting some block confirmation to\n>> exponentially reduce the chances of a successful double-spend attack with\n>> each new confirmation (as explained in the bitcoin white paper).\n>>\n>> > Mind you, that risk doesn't apply if we prefer non-empty blocks to\n>> > empty blocks and leave it at that, or only switch if the new block\n>> > doesn't double spend transactions in the old one, so it's a fixable\n>> > issue.\n>>\n>> How do you know which of 2 blocks with the same height is \"newer\"?\n>>\n>> > On 11 September 2015 at 12:32, Jorge Tim\u00f3n\n>> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > >\n>> > > On Sep 11, 2015 12:27 PM, \"Dave Scotese via bitcoin-dev\"\n>> > > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > >>\n>> > >> Rather than (promising to, and when they don't actually, at least\n>> > >> pretending to) use the first-seen block, I propose that a more\n>> sophisticated\n>> > >> method of choosing which of two block solutions to accept.\n>> > >\n>> > > There's already a criterion to chose: the one with more work (in valid\n>> > > blocks) on top of it.\n>> > >\n>> > >\n>> > > _______________________________________________\n>> > > bitcoin-dev mailing list\n>> > > bitcoin-dev at lists.linuxfoundation.org\n>> > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> > >\n>>\n>\n>\n>\n> --\n> I like to provide some work at no charge to prove my value. Do you need a\n> techie?\n> I own Litmocracy <http://www.litmocracy.com> and Meme Racing\n> <http://www.memeracing.net> (in alpha).\n> I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com>\n> which now accepts Bitcoin.\n> I also code for The Dollar Vigilante <http://dollarvigilante.com/>.\n> \"He ought to find it more profitable to play by the rules\" - Satoshi\n> Nakamoto\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150912/222cba76/attachment-0001.html>"
            },
            {
                "author": "Dave Scotese",
                "date": "2015-09-12T18:55:03",
                "message_text_only": ">\n> From the Bitcoin wiki page on transaction fees\n> <https://en.bitcoin.it/wiki/Transaction_fees#Technical_info>:\n>\n> Transaction priority is calculated as a value-weighted sum of input age,\n> divided by transaction size in bytes: priority =\n> sum(input_value_in_base_units * input_age)/size_in_bytes\n>\nIf I read that correctly, that is directly proportional to BTCDD, so\nwhatever effect concerns you has already been built into the code.\n\nOn Fri, Sep 11, 2015 at 3:21 PM, Vincent Truong <\nvincent.truong at procabiak.com> wrote:\n\n> Would this alter the way txns will be prioritised in order to try to win?\n> You would always pick txns with the best BTCDD to maximize your chances of\n> being the block to build on.\n>\n> I see this as potentially being a bad outcome for bitcoin's fungibility.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150912/3d8a53d4/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Days Destroyed as block selection heuristic",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Dave Scotese",
                "Christophe Biocca",
                "Jorge Tim\u00f3n",
                "Vincent Truong"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 20615
        }
    },
    {
        "title": "[bitcoin-dev] Stealth Address Idea (special-less)",
        "thread_messages": [
            {
                "author": "Richard Moore",
                "date": "2015-09-12T05:38:53",
                "message_text_only": "Hey all,\n\nI am throwing out an idea I\u2019ve been toying with, for feedback and if it seems like an idea worth pursuing, possibly a BIP number.\n\nThe goal is to make straight forward stealth address that are SPV friendly and easy to support in software without too much special goop.\n\nI\u2019ve got working code at https://github.com/ricmoo/sandbox/tree/master/stealth, and here are some example transactions on the block chain:\n\nTarget Public Key: 029ed06e396761c24416cf7323ed4f1cb29763ee9e2b0fccae347d6a2a3eaecbf5\nTarget Public Key [tentative] Encoding (this is what you would give away): 59KkSZsVE7vErdqo8m5gtNoez44CbdwJQ5cSM1AAARzN19vkJ6NU\n\nRevocable Payment made: b4ad20cad4cc2fcbbec09bc071dfe8c4a4b1e8e57d1e56bf51947445cfc6c7af\nIrrevocable Payment made: f600643a1d32152117be0d9c652a86dc6182d2dab3be53340739395f524cd95c\nCleared out all funds from stealth address: 58eb0fdab108c7add74835466251ffe5c51c7f4cec149f06daf0435d43d9ce55\n\n\nIdea overview:\n\nThere are 2 modes of operation, revocable and irrevocable payments. Revocable payments result in both parties knowing the private key, allowing for a certain level of plausible deniability when the funds are swept, as to whether the funds were actually sent or were revoked\u2026 You could imagine WikiLeaks stating they will not claim donations for 1-3 months after receiving them; if the funds are claimed after 1.5 months, did the sender actually send funds? The other option is irrevocable, where only the receiver can claim the funds (allowing them to leave them in that address until they need to be spent).\n\nThe basic idea is (the above code above gets into the nitty gritty), to send to targetPublicKey:\nGiven the UTXO set of inputs into a transaction, choose one at random, senderUtxo\nUse ECDH(targetPublicKey, senderUtxo.privateKey) as sharedSecret\nFor revocable payments, you are done; use sharedSecret as your privateKey, compute the address\nFor irrevocable payments, create a sharedPrivateKey from the bytes of sharedSecret, use ECC addition (or would multiplication make more sense? advantages?) on the public key of sharedPrivateKey and the targetPublicKey. The receiver can then use ECC addition (or multiplication) on the sharedPrivateKey and the targetPrivateKey to generate the coresponding privateKey.\n\nThe SPV-able part, is lightly discussed in the top of stealth.js, but I haven\u2019t played with bloom filters enough and the idea is still all too fresh in my head; the general idea is to make a 1-of-2 multisig where the first is the resulting stealth address, and the second is something (anything) that looks like a valid public key, but will match a bloom filter (given a tweak that is generated deterministically from the targetPublicKey) and matches the targetPublicKey. Again, I need much more feedback on this.\n\nThanks,\nRicMoo\n\n.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8><(((\u00ba>\n\nRichard Moore ~ Founder\nGenetic Mistakes Software inc.\nphone: (778) 882-6125\nemail: ricmoo at geneticmistakes.com <mailto:ricmoo at geneticmistakes.com>\nwww: http://GeneticMistakes.com <http://geneticmistakes.com/>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150912/385fc6f2/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Stealth Address Idea (special-less)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Richard Moore"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3241
        }
    },
    {
        "title": "[bitcoin-dev] [BIP Proposal] Version bits with timeout and delay.",
        "thread_messages": [
            {
                "author": "Rusty Russell",
                "date": "2015-09-13T18:56:01",
                "message_text_only": "Hi all,\n\nThose who've seen the original versionbits bip, this adds:\n   1) Percentage checking only on retarget period boundaries.\n   2) 1 retarget period between 95% and activation.\n   3) A stronger suggestion for timeout value selection.\n\nhttps://gist.github.com/rustyrussell/47eb08093373f71f87de\n\nAnd pasted below, de-formatted a little.\n\nThanks,\nRusty.\n\n  BIP: ??\n  Title: Version bits with timeout and delay\n  Author: Pieter Wuille <pieter.wuille at gmail.com>, Peter Todd <pete at petertodd.org>, Greg Maxwell <greg at xiph.org>, Rusty Russell <rusty at rustcorp.com.au>\n  Status: Draft\n  Type: Informational Track\n  Created: 2015-10-04\n\n==Abstract==\n\nThis document specifies a proposed change to the semantics of the 'version' field in Bitcoin blocks, allowing multiple backward-compatible changes (further called called \"soft forks\") being deployed in parallel. It relies on interpreting the version field as a bit vector, where each bit can be used to track an independent change. These are tallied each retarget period. Once the consensus change succeeds or times out, there is a \"fallow\" pause after which the bit can be reused for later changes.\n\n==Motivation==\n\nBIP 34 introduced a mechanism for doing soft-forking changes without predefined flag timestamp (or flag block height), instead relying on measuring miner support indicated by a higher version number in block headers. As it relies on comparing version numbers as integers however, it only supports one single change being rolled out at once, requiring coordination between proposals, and does not allow for permanent rejection: as long as one soft fork is not fully rolled out, no future one can be scheduled.\n\nIn addition, BIP 34 made the integer comparison (nVersion >= 2) a consensus rule after its 95% threshold was reached, removing 2^31 +2 values from the set of valid version numbers (all negative numbers, as nVersion is interpreted as a signed integer, as well as 0 and 1). This indicates another downside this approach: every upgrade permanently restricts the set of allowed nVersion field values. This approach was later reused in BIP 66, which further removed nVersion = 2 as valid option. As will be shown further, this is unnecessary. \n\n==Specification==\n\n===Mechanism===\n\n'''Bit flags'''\nWe are permitting several independent soft forks to be deployed in parallel. For each, a bit B is chosen from the set {0,1,2,...,28}, which is not currently in use for any other ongoing soft fork. Miners signal intent to enforce the new rules associated with the proposed soft fork by setting bit 1<sup>B</sup> in nVersion to 1 in their blocks.\n\n'''High bits'''\nThe highest 3 bits are set to 001, so the range of actually possible nVersion values is [0x20000000...0x3FFFFFFF], inclusive. This leaves two future upgrades for different mechanisms (top bits 010 and 011), while complying to the constraints set by BIP34 and BIP66. Having more than 29 available bits for parallel soft forks does not add anything anyway, as the (nVersion >= 3) requirement already makes that impossible.\n\n'''States'''\nWith every softfork proposal we associate a state BState, which begins\nat ''defined'', and can be ''locked-in'', ''activated'',\nor ''failed''.  Transitions are considered after each\nretarget period.\n\n'''Soft Fork Support'''\nSoftware which supports the change should begin by setting B in all blocks\nmined until it is resolved.\n\n if (BState == defined) {\n     SetBInBlock();\n }\n\n'''Success: Lock-in Threshold'''\nIf bit B is set in 1916 (1512 on testnet) or more of the 2016 blocks\nwithin a retarget period, it is considered ''locked-in''.  Miners should\nstop setting bit B.\n\n if (NextBlockHeight % 2016 == 0) {\n    if (BState == defined && Previous2016BlocksCountB() >= 1916) {\n        BState = locked-in;\n        BActiveHeight = NextBlockHeight + 2016;\n    }\n }\n\n'''Success: Activation Delay'''\nThe consensus rules related to ''locked-in'' soft fork will be enforced in\nthe second retarget period; ie. there is a one retarget period in\nwhich the remaining 5% can upgrade.  At the that activation block and\nafter, the bit B may be reused for a different soft fork.\n\n if (BState == locked-in && NextBlockHeight == BActiveHeight) {\n    BState = activated;\n    ApplyRulesForBFromNextBlock();\n    /* B can be reused, immediately */\n }\n\n'''Failure: Timeout'''\nA soft fork proposal should include a ''timeout''.  This is measured\nas the beginning of a calendar year as per this table (suggested\nthree years from drafting the soft fork proposal):\n\nTimeout Year    >= Seconds              Timeout Year    >= Seconds\n2018            1514764800              2026            1767225600\n2019            1546300800              2027            1798761600\n2020            1577836800              2028            1830297600\n2021            1609459200              2029            1861920000\n2022            1640995200              2030            1893456000\n2023            1672531200              2031            1924992000\n2024            1704067200              2032            1956528000\n2025            1735689600              2033            1988150400\n\nIf the soft fork still not ''locked-in'' and the\nGetMedianTimePast() of a block following a retarget period is at or\npast this timeout, miners should cease setting this bit.\n\n if (NextBlockHeight % 2016 == 0) {\n    if (BState == defined && GetMedianTimePast(nextblock) >= BFinalYear) {\n         BState = failed;\n    }\n }\n\nAfter another retarget period (to allow detection of buggy miners),\nthe bit may be reused.\n\n'''Warning system'''\nTo support upgrade warnings, an extra \"unknown upgrade\" is tracked, using the \"implicit bit\" mask = (block.nVersion & ~expectedVersion) != 0. Mask will be non-zero whenever an unexpected bit is set in nVersion.  Whenever lock-in for the unknown upgrade is detected, the software should warn loudly about the upcoming soft fork.  It should warn even more loudly after the next retarget period.\n\n'''Forks'''\nIt should be noted that the states are maintained along block chain\nbranches, but may need recomputation when a reorganization happens.\n\n===Support for future changes===\n\nThe mechanism described above is very generic, and variations are possible for future soft forks. Here are some ideas that can be taken into account.\n\n'''Modified thresholds'''\nThe 95% threshold (based on in BIP 34) does not have to be maintained for eternity, but changes should take the effect on the warning system into account. In particular, having a lock-in threshold that is incompatible with the one used for the warning system may have long-term effects, as the warning system cannot rely on a permanently detectable condition anymore.\n\n'''Conflicting soft forks'''\nAt some point, two mutually exclusive soft forks may be proposed. The naive way to deal with this is to never create software that implements both, but that is a making a bet that at least one side is guaranteed to lose. Better would be to encode \"soft fork X cannot be locked-in\" as consensus rule for the conflicting soft fork - allowing software that supports both, but can never trigger conflicting changes.\n\n'''Multi-stage soft forks'''\nSoft forks right now are typically treated as booleans: they go from an inactive to an active state in blocks. Perhaps at some point there is demand for a change that has a larger number of stages, with additional validation rules that get enabled one by one. The above mechanism can be adapted to support this, by interpreting a combination of bits as an integer, rather than as isolated bits. The warning system is compatible with this, as (nVersion & ~nExpectedVersion) will always be non-zero for increasing integers.\n\n== Rationale ==\n\nThe failure timeout allows eventual reuse of bits even if a soft fork was\nnever activated, so it's clear that the new use of the bit refers to a\nnew BIP.  It's deliberately very course grained, to take into account\nreasonable development and deployment delays.  There are unlikely to be\nenough failed proposals to cause a bit shortage.\n\nThe fallow period at the conclusion of a soft fork attempt allows some\ndetection of buggy clients, and allows time for warnings and software\nupgrades for successful soft forks."
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-16T15:53:08",
                "message_text_only": "Rusty,\n\nI think you've covered all the issues discussed now. +1 for submitting to\nBIPs repo to get an official number.\n\nAre you planning to write the implementation?\n\n\n\nOn Sun, Sep 13, 2015 at 7:56 PM, Rusty Russell via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi all,\n>\n> Those who've seen the original versionbits bip, this adds:\n>    1) Percentage checking only on retarget period boundaries.\n>    2) 1 retarget period between 95% and activation.\n>    3) A stronger suggestion for timeout value selection.\n>\n> https://gist.github.com/rustyrussell/47eb08093373f71f87de\n>\n> And pasted below, de-formatted a little.\n>\n> Thanks,\n> Rusty.\n>\n>   BIP: ??\n>   Title: Version bits with timeout and delay\n>   Author: Pieter Wuille <pieter.wuille at gmail.com>, Peter Todd <\n> pete at petertodd.org>, Greg Maxwell <greg at xiph.org>, Rusty Russell <\n> rusty at rustcorp.com.au>\n>   Status: Draft\n>   Type: Informational Track\n>   Created: 2015-10-04\n>\n> ==Abstract==\n>\n> This document specifies a proposed change to the semantics of the\n> 'version' field in Bitcoin blocks, allowing multiple backward-compatible\n> changes (further called called \"soft forks\") being deployed in parallel. It\n> relies on interpreting the version field as a bit vector, where each bit\n> can be used to track an independent change. These are tallied each retarget\n> period. Once the consensus change succeeds or times out, there is a\n> \"fallow\" pause after which the bit can be reused for later changes.\n>\n> ==Motivation==\n>\n> BIP 34 introduced a mechanism for doing soft-forking changes without\n> predefined flag timestamp (or flag block height), instead relying on\n> measuring miner support indicated by a higher version number in block\n> headers. As it relies on comparing version numbers as integers however, it\n> only supports one single change being rolled out at once, requiring\n> coordination between proposals, and does not allow for permanent rejection:\n> as long as one soft fork is not fully rolled out, no future one can be\n> scheduled.\n>\n> In addition, BIP 34 made the integer comparison (nVersion >= 2) a\n> consensus rule after its 95% threshold was reached, removing 2^31 +2 values\n> from the set of valid version numbers (all negative numbers, as nVersion is\n> interpreted as a signed integer, as well as 0 and 1). This indicates\n> another downside this approach: every upgrade permanently restricts the set\n> of allowed nVersion field values. This approach was later reused in BIP 66,\n> which further removed nVersion = 2 as valid option. As will be shown\n> further, this is unnecessary.\n>\n> ==Specification==\n>\n> ===Mechanism===\n>\n> '''Bit flags'''\n> We are permitting several independent soft forks to be deployed in\n> parallel. For each, a bit B is chosen from the set {0,1,2,...,28}, which is\n> not currently in use for any other ongoing soft fork. Miners signal intent\n> to enforce the new rules associated with the proposed soft fork by setting\n> bit 1<sup>B</sup> in nVersion to 1 in their blocks.\n>\n> '''High bits'''\n> The highest 3 bits are set to 001, so the range of actually possible\n> nVersion values is [0x20000000...0x3FFFFFFF], inclusive. This leaves two\n> future upgrades for different mechanisms (top bits 010 and 011), while\n> complying to the constraints set by BIP34 and BIP66. Having more than 29\n> available bits for parallel soft forks does not add anything anyway, as the\n> (nVersion >= 3) requirement already makes that impossible.\n>\n> '''States'''\n> With every softfork proposal we associate a state BState, which begins\n> at ''defined'', and can be ''locked-in'', ''activated'',\n> or ''failed''.  Transitions are considered after each\n> retarget period.\n>\n> '''Soft Fork Support'''\n> Software which supports the change should begin by setting B in all blocks\n> mined until it is resolved.\n>\n>  if (BState == defined) {\n>      SetBInBlock();\n>  }\n>\n> '''Success: Lock-in Threshold'''\n> If bit B is set in 1916 (1512 on testnet) or more of the 2016 blocks\n> within a retarget period, it is considered ''locked-in''.  Miners should\n> stop setting bit B.\n>\n>  if (NextBlockHeight % 2016 == 0) {\n>     if (BState == defined && Previous2016BlocksCountB() >= 1916) {\n>         BState = locked-in;\n>         BActiveHeight = NextBlockHeight + 2016;\n>     }\n>  }\n>\n> '''Success: Activation Delay'''\n> The consensus rules related to ''locked-in'' soft fork will be enforced in\n> the second retarget period; ie. there is a one retarget period in\n> which the remaining 5% can upgrade.  At the that activation block and\n> after, the bit B may be reused for a different soft fork.\n>\n>  if (BState == locked-in && NextBlockHeight == BActiveHeight) {\n>     BState = activated;\n>     ApplyRulesForBFromNextBlock();\n>     /* B can be reused, immediately */\n>  }\n>\n> '''Failure: Timeout'''\n> A soft fork proposal should include a ''timeout''.  This is measured\n> as the beginning of a calendar year as per this table (suggested\n> three years from drafting the soft fork proposal):\n>\n> Timeout Year    >= Seconds              Timeout Year    >= Seconds\n> 2018            1514764800              2026            1767225600\n> 2019            1546300800              2027            1798761600\n> 2020            1577836800              2028            1830297600\n> 2021            1609459200              2029            1861920000\n> 2022            1640995200              2030            1893456000\n> 2023            1672531200              2031            1924992000\n> 2024            1704067200              2032            1956528000\n> 2025            1735689600              2033            1988150400\n>\n> If the soft fork still not ''locked-in'' and the\n> GetMedianTimePast() of a block following a retarget period is at or\n> past this timeout, miners should cease setting this bit.\n>\n>  if (NextBlockHeight % 2016 == 0) {\n>     if (BState == defined && GetMedianTimePast(nextblock) >= BFinalYear) {\n>          BState = failed;\n>     }\n>  }\n>\n> After another retarget period (to allow detection of buggy miners),\n> the bit may be reused.\n>\n> '''Warning system'''\n> To support upgrade warnings, an extra \"unknown upgrade\" is tracked, using\n> the \"implicit bit\" mask = (block.nVersion & ~expectedVersion) != 0. Mask\n> will be non-zero whenever an unexpected bit is set in nVersion.  Whenever\n> lock-in for the unknown upgrade is detected, the software should warn\n> loudly about the upcoming soft fork.  It should warn even more loudly after\n> the next retarget period.\n>\n> '''Forks'''\n> It should be noted that the states are maintained along block chain\n> branches, but may need recomputation when a reorganization happens.\n>\n> ===Support for future changes===\n>\n> The mechanism described above is very generic, and variations are possible\n> for future soft forks. Here are some ideas that can be taken into account.\n>\n> '''Modified thresholds'''\n> The 95% threshold (based on in BIP 34) does not have to be maintained for\n> eternity, but changes should take the effect on the warning system into\n> account. In particular, having a lock-in threshold that is incompatible\n> with the one used for the warning system may have long-term effects, as the\n> warning system cannot rely on a permanently detectable condition anymore.\n>\n> '''Conflicting soft forks'''\n> At some point, two mutually exclusive soft forks may be proposed. The\n> naive way to deal with this is to never create software that implements\n> both, but that is a making a bet that at least one side is guaranteed to\n> lose. Better would be to encode \"soft fork X cannot be locked-in\" as\n> consensus rule for the conflicting soft fork - allowing software that\n> supports both, but can never trigger conflicting changes.\n>\n> '''Multi-stage soft forks'''\n> Soft forks right now are typically treated as booleans: they go from an\n> inactive to an active state in blocks. Perhaps at some point there is\n> demand for a change that has a larger number of stages, with additional\n> validation rules that get enabled one by one. The above mechanism can be\n> adapted to support this, by interpreting a combination of bits as an\n> integer, rather than as isolated bits. The warning system is compatible\n> with this, as (nVersion & ~nExpectedVersion) will always be non-zero for\n> increasing integers.\n>\n> == Rationale ==\n>\n> The failure timeout allows eventual reuse of bits even if a soft fork was\n> never activated, so it's clear that the new use of the bit refers to a\n> new BIP.  It's deliberately very course grained, to take into account\n> reasonable development and deployment delays.  There are unlikely to be\n> enough failed proposals to cause a bit shortage.\n>\n> The fallow period at the conclusion of a soft fork attempt allows some\n> detection of buggy clients, and allows time for warnings and software\n> upgrades for successful soft forks.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/c96d62e3/attachment-0001.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-09-16T17:53:20",
                "message_text_only": "On Sun, Sep 13, 2015 at 7:56 PM, Rusty Russell via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> '''States'''\n> With every softfork proposal we associate a state BState, which begins\n> at ''defined'', and can be ''locked-in'', ''activated'',\n> or ''failed''.  Transitions are considered after each\n> retarget period.\n>\n\nI think the 75% rule should be maintained.  It confirms that miners who are\nsetting the bit are actually creating blocks that meet the new rule (though\nit doesn't check if they are enforcing it).\n\nWhat is the reason for aligning the updated to the difficulty window?\n\n\n*defined*\nMiners set bit\nIf 75% of blocks of last 2016 have bit set, goto tentative\n\n\n*tentative*\nMiners set bit\nReject blocks that have bit set that don't follow new rule\nIf 95% of blocks of last 2016 have bit set, goto locked-in\n\n\n*locked-in*\n\nPoint of no return\nMiners still set bit\nReject blocks that have bit set that don't follow new rule\nAfter 2016 blocks goto notice\n\n\n*activated*\n\nMiners don't set bit for at least 10080 blocks\nReject blocks that don't follow new rule\n\n'''Failure: Timeout'''\n> A soft fork proposal should include a ''timeout''.\n>\n\nI think counting in blocks is easier to be exact here.\n\nIf two bits were allocated per proposal, then miners could vote against\nforks to recover the bits.  If 25% of the miners vote against, then that\nkills it.\n\nIn the rationale, it would be useful to discuss effects on SPV clients and\nbuggy miners.\n\nSPV clients should be recommended to actually monitor the version field.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/37241dd5/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2015-09-16T20:19:22",
                "message_text_only": "Tier Nolan via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nwrites:\n> On Sun, Sep 13, 2015 at 7:56 PM, Rusty Russell via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> '''States'''\n>> With every softfork proposal we associate a state BState, which begins\n>> at ''defined'', and can be ''locked-in'', ''activated'',\n>> or ''failed''.  Transitions are considered after each\n>> retarget period.\n>>\n>\n> I think the 75% rule should be maintained.  It confirms that miners who are\n> setting the bit are actually creating blocks that meet the new rule (though\n> it doesn't check if they are enforcing it).\n\nI couldn't see a use for it, since partial enforcement of a soft fork is\npretty useless.\n\nYour point about checking that miners are actually doing it is true,\nthough all stuff being forked in in future will be nonstandard AFAICT.\n\nI bias towards simplicity for this.\n\n> What is the reason for aligning the updated to the difficulty window?\n\nMiners already have that date in their calendar, so prefer to anchor to\nthat.\n\n> *defined*\n> Miners set bit\n> If 75% of blocks of last 2016 have bit set, goto tentative\n>\n>\n> *tentative*\n> Miners set bit\n> Reject blocks that have bit set that don't follow new rule\n> If 95% of blocks of last 2016 have bit set, goto locked-in\n>\n>\n> *locked-in*\n>\n> Point of no return\n> Miners still set bit\n> Reject blocks that have bit set that don't follow new rule\n> After 2016 blocks goto notice\n\nOK, *that* variant makes perfect sense, and is no more complex, AFAICT.\n\nSo, there's two weeks to detect bad implementations, then you everyone\nstops setting the bit, for later reuse by another BIP.\n\n> I think counting in blocks is easier to be exact here.\n\nEasier for code, but harder for BIP authors.\n\n> If two bits were allocated per proposal, then miners could vote against\n> forks to recover the bits.  If 25% of the miners vote against, then that\n> kills it.\n\nYou need a timeout: an ancient (non-mining, thus undetectable) node\nshould never fork itself off the network because someone reused a failed\nBIP bit.\n\n> In the rationale, it would be useful to discuss effects on SPV clients and\n> buggy miners.\n>\n> SPV clients should be recommended to actually monitor the version field.\n\nSPV clients don't experience a security change when a soft fork occurs?\nThey're already trusting miners.\n\nGreg pointed out that soft forks tend to get accompanied by block forks\nacross activation, but SPV clients should *definitely* be taking those\ninto account whenever they happen, right?\n\nThanks!\nRusty."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-16T20:27:33",
                "message_text_only": "For enforcing new restrictions on your own blocks (thus at the policy\nlevel, not consensus) you don't need to wait for 75%. You can do it from\nthe start (this way all miners setting the bit will enforce the new\nrestrictions.\nOn Sep 16, 2015 4:20 PM, \"Rusty Russell via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Tier Nolan via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n> writes:\n> > On Sun, Sep 13, 2015 at 7:56 PM, Rusty Russell via bitcoin-dev <\n> > bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> >> '''States'''\n> >> With every softfork proposal we associate a state BState, which begins\n> >> at ''defined'', and can be ''locked-in'', ''activated'',\n> >> or ''failed''.  Transitions are considered after each\n> >> retarget period.\n> >>\n> >\n> > I think the 75% rule should be maintained.  It confirms that miners who\n> are\n> > setting the bit are actually creating blocks that meet the new rule\n> (though\n> > it doesn't check if they are enforcing it).\n>\n> I couldn't see a use for it, since partial enforcement of a soft fork is\n> pretty useless.\n>\n> Your point about checking that miners are actually doing it is true,\n> though all stuff being forked in in future will be nonstandard AFAICT.\n>\n> I bias towards simplicity for this.\n>\n> > What is the reason for aligning the updated to the difficulty window?\n>\n> Miners already have that date in their calendar, so prefer to anchor to\n> that.\n>\n> > *defined*\n> > Miners set bit\n> > If 75% of blocks of last 2016 have bit set, goto tentative\n> >\n> >\n> > *tentative*\n> > Miners set bit\n> > Reject blocks that have bit set that don't follow new rule\n> > If 95% of blocks of last 2016 have bit set, goto locked-in\n> >\n> >\n> > *locked-in*\n> >\n> > Point of no return\n> > Miners still set bit\n> > Reject blocks that have bit set that don't follow new rule\n> > After 2016 blocks goto notice\n>\n> OK, *that* variant makes perfect sense, and is no more complex, AFAICT.\n>\n> So, there's two weeks to detect bad implementations, then you everyone\n> stops setting the bit, for later reuse by another BIP.\n>\n> > I think counting in blocks is easier to be exact here.\n>\n> Easier for code, but harder for BIP authors.\n>\n> > If two bits were allocated per proposal, then miners could vote against\n> > forks to recover the bits.  If 25% of the miners vote against, then that\n> > kills it.\n>\n> You need a timeout: an ancient (non-mining, thus undetectable) node\n> should never fork itself off the network because someone reused a failed\n> BIP bit.\n>\n> > In the rationale, it would be useful to discuss effects on SPV clients\n> and\n> > buggy miners.\n> >\n> > SPV clients should be recommended to actually monitor the version field.\n>\n> SPV clients don't experience a security change when a soft fork occurs?\n> They're already trusting miners.\n>\n> Greg pointed out that soft forks tend to get accompanied by block forks\n> across activation, but SPV clients should *definitely* be taking those\n> into account whenever they happen, right?\n>\n> Thanks!\n> Rusty.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/2fd0dd04/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-09-16T20:32:16",
                "message_text_only": "On Wed, Sep 16, 2015 at 9:27 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n\n> For enforcing new restrictions on your own blocks (thus at the policy\n> level, not consensus) you don't need to wait for 75%. You can do it from\n> the start (this way all miners setting the bit will enforce the new\n> restrictions.\n>\nAt 75%, you have a pretty solid super-majority.\n\nYou can safely reject blocks that have the bit set but are invalid\naccording to the new rule (as long as everyone who sets the bit does it\ntoo).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/d701990e/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-16T20:38:20",
                "message_text_only": "No, 95% is safer and will produce less orphaned blocks.\n0%is fine to do it in your own blocks.\n\nI agree on using height vs time. Rusty, what do you mean by being easier\nfor bip writers? How is writing \"block x\" any harder than writing \"date y\".\nOn Sep 16, 2015 4:32 PM, \"Tier Nolan via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n>\n> On Wed, Sep 16, 2015 at 9:27 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>\n>> For enforcing new restrictions on your own blocks (thus at the policy\n>> level, not consensus) you don't need to wait for 75%. You can do it from\n>> the start (this way all miners setting the bit will enforce the new\n>> restrictions.\n>>\n> At 75%, you have a pretty solid super-majority.\n>\n> You can safely reject blocks that have the bit set but are invalid\n> according to the new rule (as long as everyone who sets the bit does it\n> too).\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/2eb2025c/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-09-16T20:48:57",
                "message_text_only": "On Wed, Sep 16, 2015 at 9:38 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n\n> No, 95% is safer and will produce less orphaned blocks.\n>\nThe point of the 75% is just as a test run.  Enforcement wouldn't happen\nuntil 95%.\n\nAt 75%, if someone sets the bit, then they should be creating valid blocks\n(under the rule).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/855e71c0/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-16T20:54:56",
                "message_text_only": "On Sep 16, 2015 4:49 PM, \"Tier Nolan via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>\n>\n> On Wed, Sep 16, 2015 at 9:38 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>>\n>> No, 95% is safer and will produce less orphaned blocks.\n>\n> The point of the 75% is just as a test run.  Enforcement wouldn't happen\nuntil 95%.\n>\n> At 75%, if someone sets the bit, then they should be creating valid\nblocks (under the rule).\n\nYou shouldn't rely on that, some may start applying the restrictions in\ntheir own blocks at 0% and others only at 90%. Until it becomes a consensus\nrule it is just part of the standard policy (and we shouldn't rely on nodes\nfollowing the standard policy).\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/0756bd20/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-09-16T20:57:42",
                "message_text_only": "On Wed, Sep 16, 2015 at 9:54 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n\n>\n> On Sep 16, 2015 4:49 PM, \"Tier Nolan via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > At 75%, if someone sets the bit, then they should be creating valid\n> blocks (under the rule).\n>\n> You shouldn't rely on that, some may start applying the restrictions in\n> their own blocks at 0% and others only at 90%. Until it becomes a consensus\n> rule it is just part of the standard policy (and we shouldn't rely on nodes\n> following the standard policy).\n>\n\nIt would be a consensus rule.  If >75% of the blocks in the last 2016\nwindow have the bit set, then reject all blocks that have the bit set and\nfail to meet the rule.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/530b12d1/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-16T21:03:43",
                "message_text_only": "I understand your proposal, but I don't see what it accomplishes compared\nto applying the new rule from the start (in your own blocks) and wait for\n95% for consensus activation (which is my preference and it's much simpler\nto implement).\nWhat are the disadvantages of my approach? What are the advantages of yours?\nOn Sep 16, 2015 4:57 PM, \"Tier Nolan via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n>\n> On Wed, Sep 16, 2015 at 9:54 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>\n>>\n>> On Sep 16, 2015 4:49 PM, \"Tier Nolan via bitcoin-dev\" <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > At 75%, if someone sets the bit, then they should be creating valid\n>> blocks (under the rule).\n>>\n>> You shouldn't rely on that, some may start applying the restrictions in\n>> their own blocks at 0% and others only at 90%. Until it becomes a consensus\n>> rule it is just part of the standard policy (and we shouldn't rely on nodes\n>> following the standard policy).\n>>\n>\n> It would be a consensus rule.  If >75% of the blocks in the last 2016\n> window have the bit set, then reject all blocks that have the bit set and\n> fail to meet the rule.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/8b4bf287/attachment-0001.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-16T22:52:09",
                "message_text_only": "The exact numbers (95% vs. 75% etc) don't need to be completely specified to start working on an implementation. What really matters for now is defining the states and trigger mechanisms. I'd rather we not argue over the optimal values for supermajority requirement at this point.\n\nOn September 16, 2015 5:03:43 PM EDT, \"Jorge Tim\u00f3n via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>I understand your proposal, but I don't see what it accomplishes\n>compared\n>to applying the new rule from the start (in your own blocks) and wait\n>for\n>95% for consensus activation (which is my preference and it's much\n>simpler\n>to implement).\n>What are the disadvantages of my approach? What are the advantages of\n>yours?\n>On Sep 16, 2015 4:57 PM, \"Tier Nolan via bitcoin-dev\" <\n>bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>>\n>>\n>> On Wed, Sep 16, 2015 at 9:54 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc>\n>wrote:\n>>\n>>>\n>>> On Sep 16, 2015 4:49 PM, \"Tier Nolan via bitcoin-dev\" <\n>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> > At 75%, if someone sets the bit, then they should be creating\n>valid\n>>> blocks (under the rule).\n>>>\n>>> You shouldn't rely on that, some may start applying the restrictions\n>in\n>>> their own blocks at 0% and others only at 90%. Until it becomes a\n>consensus\n>>> rule it is just part of the standard policy (and we shouldn't rely\n>on nodes\n>>> following the standard policy).\n>>>\n>>\n>> It would be a consensus rule.  If >75% of the blocks in the last 2016\n>> window have the bit set, then reject all blocks that have the bit set\n>and\n>> fail to meet the rule.\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/d29bd9ce/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-09-17T10:38:29",
                "message_text_only": "On Wed, Sep 16, 2015 at 11:52 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n\n> The exact numbers (95% vs. 75% etc) don't need to be completely specified\n> to start working on an implementation. What really matters for now is\n> defining the states and trigger mechanisms. I'd rather we not argue over\n> the optimal values for supermajority requirement at this point.\n>\n\nThe discussion was about what each state means, not the thresholds\nexactly.  I agree that can be set later.\n\nOn Wed, Sep 16, 2015 at 10:03 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n\n> I understand your proposal, but I don't see what it accomplishes compared\nto applying the new rule from the start (in your own blocks)\n\n> and wait for 95% for consensus activation (which is my preference and\nit's much simpler to implement).\n> What are the disadvantages of my approach? What are the advantages of\nyours?\nI agree that miners should apply the rule from the start in their own\nblocks.\n\n\n*defined*\nMiners set bit\nMiners apply rule to their own blocks\nIf 75% of blocks of last 2016 have bit set, goto tentative\n\n\n*tentative*\nMiners set bit\nMiners apply rule to their own blocks\nMiners enforce rule in blocks with bit set (reject invalid blocks)\nIf 95% of blocks of last 2016 have bit set, goto locked-in\n\n\n*locked-in*\n\nPoint of no return\nMiners set bit\nMiners apply rule to their own blocks\nMiners enforce rule in blocks with bit set (reject invalid blocks)\nAfter 2016 blocks goto activated\n\n\n*activated*\n\nMiners don't set bit\nReject any block that has the bit set for 10080 blocks (10 diff periods)\nReject blocks that don't follow new rule\n\nThe advantage of enforcing the rule when 75% is reached (but only for\nblocks with the bit set) is that miners get early notification that they\nhave implemented the rule incorrectly.    They might produce blocks that\nthey think are fine, but which aren't.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150917/10045fa6/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-17T13:59:43",
                "message_text_only": "On Thu, Sep 17, 2015 at 12:38 PM, Tier Nolan via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> The advantage of enforcing the rule when 75% is reached (but only for blocks\n> with the bit set) is that miners get early notification that they have\n> implemented the rule incorrectly.    They might produce blocks that they\n> think are fine, but which aren't.\n\nI'm still unconvinced, but thanks, this is what I was asking for."
            },
            {
                "author": "Rusty Russell",
                "date": "2015-09-17T21:57:51",
                "message_text_only": "Tier Nolan via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nwrites:\n> The advantage of enforcing the rule when 75% is reached (but only for\n> blocks with the bit set) is that miners get early notification that they\n> have implemented the rule incorrectly.    They might produce blocks that\n> they think are fine, but which aren't.\n\nIndeed.  There are three believable failure possibilties:\n\n1) You don't implement the rule at all, and don't set the bit.\n2) You implement it and set bit, but think some valid block is invalid.\n3) You implement it and set bit, but think some invalid block is valid.\n\n#1 is by far the most common, and the proposal is designed so they\n*always* get ~2 weeks warning before those drop to SPV security.\n\nAssuming the mining majority isn't buggy (otherwise, it's arguably not a\nbug but a feature!) #2 is the worst case: some miners fork off and don't\nrejoin.\n\nSo there is a slight advantage in doing this early: those buggy miners\nno longer contribute to the 95% threshold.  But that's outweighed IMHO\nby:\n\n1) We would need another delay at 75% so #1 nodes can upgrade.\n\n2) The new feature won't be exercised much before impliciation, since\n   it's useless before then, so it might not find bugs anyway.\n\nIn conclusion, I'm not convinced by the extra complexity.\n\nCheers,\nRusty."
            },
            {
                "author": "Rusty Russell",
                "date": "2015-09-17T22:00:27",
                "message_text_only": "Jorge Tim\u00f3n via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> writes:\n> I agree on using height vs time. Rusty, what do you mean by being easier\n> for bip writers? How is writing \"block x\" any harder than writing \"date y\".\n\nThree years from drafting is reasonable.  How many blocks is that?  Hmm,\nbetter make it 6 years of blocks just in case we have a hash race.\n\nDeployment speed is measured in months, not blocks.  It's hard enough to\nguess without adding another variable.\n\nCheers,\nRusty."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-19T05:04:45",
                "message_text_only": "I disagree with the importance of this concern and old soft/hardforks will\nreplace this activation mechanism with height, so that's an argument in\nfavor of using the height from the start. This is \"being discussed\" in a\nthread branched from bip99's discussion.\nAnyway, is this proposing to use the block time or the median block time?\nFor some hardforks/softforks the block time complicates the implementation\n(ie in acceptToMemoryPool) as discussed in the mentioned thread.\nOn Sep 19, 2015 1:24 AM, \"Rusty Russell\" <rusty at rustcorp.com.au> wrote:\n\n> Jorge Tim\u00f3n via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n> writes:\n> > I agree on using height vs time. Rusty, what do you mean by being easier\n> > for bip writers? How is writing \"block x\" any harder than writing \"date\n> y\".\n>\n> Three years from drafting is reasonable.  How many blocks is that?  Hmm,\n> better make it 6 years of blocks just in case we have a hash race.\n>\n> Deployment speed is measured in months, not blocks.  It's hard enough to\n> guess without adding another variable.\n>\n> Cheers,\n> Rusty.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/f7220d48/attachment-0001.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2015-09-20T03:56:43",
                "message_text_only": "Jorge Tim\u00f3n <jtimon at jtimon.cc> writes:\n> I disagree with the importance of this concern and old soft/hardforks will\n> replace this activation mechanism with height, so that's an argument in\n> favor of using the height from the start. This is \"being discussed\" in a\n> thread branched from bip99's discussion.\n\nThanks, I'll have to dig through bitcoin-dev and find it.\n\n> Anyway, is this proposing to use the block time or the median block time?\n> For some hardforks/softforks the block time complicates the implementation\n> (ie in acceptToMemoryPool) as discussed in the mentioned thread.\n\nBIP text is pretty clear that it's median block time.\n\nThis is only for timeout, not for soft fork rule change (which *is* 2016\nblocks after 95% is reached).\n\nCheers,\nRusty."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-21T08:24:58",
                "message_text_only": "On Sep 20, 2015 10:58 PM, \"Rusty Russell\" <rusty at rustcorp.com.au> wrote:\n>\n> Jorge Tim\u00f3n <jtimon at jtimon.cc> writes:\n> > I disagree with the importance of this concern and old soft/hardforks\nwill\n> > replace this activation mechanism with height, so that's an argument in\n> > favor of using the height from the start. This is \"being discussed\" in a\n> > thread branched from bip99's discussion.\n>\n> Thanks, I'll have to dig through bitcoin-dev and find it.\n\nThe initial thread is linked to from the BIP document (which is in the\nbitcoin/bips PR).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150921/2a2bb088/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2015-09-21T10:34:06",
                "message_text_only": "Jorge Tim\u00f3n <jtimon at jtimon.cc> writes:\n> On Sep 20, 2015 10:58 PM, \"Rusty Russell\" <rusty at rustcorp.com.au> wrote:\n>>\n>> Jorge Tim\u00f3n <jtimon at jtimon.cc> writes:\n>> > I disagree with the importance of this concern and old soft/hardforks\n> will\n>> > replace this activation mechanism with height, so that's an argument in\n>> > favor of using the height from the start. This is \"being discussed\" in a\n>> > thread branched from bip99's discussion.\n>>\n>> Thanks, I'll have to dig through bitcoin-dev and find it.\n>\n> The initial thread is linked to from the BIP document (which is in the\n> bitcoin/bips PR).\n\nThanks, read and digested.\n\nThe good news is that timeout via GetMedianTimePast() doesn't have any\neffect on \"should I accept this to mempool\", and seems pretty\nuncontroversial.   Activation is by block number once vote hits 95%, so\nthat too is fairly simple to implement.\n\nCheers,\nRusty."
            },
            {
                "author": "Tier Nolan",
                "date": "2015-09-16T20:30:27",
                "message_text_only": "On Wed, Sep 16, 2015 at 9:19 PM, Rusty Russell <rusty at rustcorp.com.au>\nwrote:\n\n> I couldn't see a use for it, since partial enforcement of a soft fork is\n> pretty useless.\n>\n\nIt isn't useful for actually using the feature, but some miners might set\nthe bit but not actually create blocks that comply with the new rule.\n\nThis would cause their blocks to be orphaned until they fixed it.\n\nOK, *that* variant makes perfect sense, and is no more complex, AFAICT.\n>\n> So, there's two weeks to detect bad implementations, then you everyone\n> stops setting the bit, for later reuse by another BIP.\n>\n\nIt could be more than two weeks if the support stays between 80% and 90%\nfor a while.\n\n75%+ checks that blocks with the bit set follow the rule.\n\n95%+ enters lock-in and has the same rules as 75%+, but is irreversible at\nthat point.\n\n\n> You need a timeout: an ancient (non-mining, thus undetectable) node\n> should never fork itself off the network because someone reused a failed\n> BIP bit.\n>\n\nI meant if the 2nd bit was part of the BIP.  One of the 2 bits is \"FOR\" and\nthe other is \"AGAINST\".  If against hits 25%, then it is deemed a failure.\n\nThe 2nd bit wouldn't be used normally.  This means that proposals can be\nkilled quickly if they are obviously going to fail.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/c60f2225/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2015-09-18T01:19:05",
                "message_text_only": "Tier Nolan via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> writes:\n> On Wed, Sep 16, 2015 at 9:19 PM, Rusty Russell <rusty at rustcorp.com.au>\n> wrote:\n>> You need a timeout: an ancient (non-mining, thus undetectable) node\n>> should never fork itself off the network because someone reused a failed\n>> BIP bit.\n>>\n>\n> I meant if the 2nd bit was part of the BIP.  One of the 2 bits is \"FOR\" and\n> the other is \"AGAINST\".  If against hits 25%, then it is deemed a failure.\n>\n> The 2nd bit wouldn't be used normally.  This means that proposals can be\n> killed quickly if they are obviously going to fail.\n\nThis could be added if we approach one failed soft fork every 5 weeks,\nI guess (or it could be just for specific soft forks).\n\nCheers,\nRusty."
            },
            {
                "author": "Tom Harding",
                "date": "2015-09-23T18:33:25",
                "message_text_only": "On 9/13/2015 11:56 AM, Rusty Russell via bitcoin-dev wrote:\n> '''Success: Activation Delay'''\n> The consensus rules related to ''locked-in'' soft fork will be enforced in\n> the second retarget period; ie. there is a one retarget period in\n> which the remaining 5% can upgrade.  At the that activation block and\n> after, the bit B may be reused for a different soft fork.\n>\n\nRather than a simple one-period delay, should there be a one-period \n\"burn-in\" to show sustained support of the threshold?  During this \nperiod, support must continuously remain above the threshold.  Any lapse \nresets to inactivated state.\n\nWith a simple delay, you can have the embarrassing situation where \nsupport falls off during the delay period and there is far below \nthreshold support just moments prior to enforcement, but enforcement \nhappens anyway.\n\nBIP 101 has this problem too."
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-09-23T19:01:55",
                "message_text_only": "I say keep it simple.\n\nIf the 75% threshold is hit, then support suddenly drops off below 50%,\n\"meh\" -- there will be a big ruckus, everybody will freak out, and miners\nwill refuse to build big blocks because they'll worry that they'll get\norphaned.\n\nAdding more complexity for a case that ain't gonna happen (and isn't a\ndisaster if it does) is a mistake, in my humble opinion.\n\n\n\nOn Wed, Sep 23, 2015 at 2:33 PM, Tom Harding via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On 9/13/2015 11:56 AM, Rusty Russell via bitcoin-dev wrote:\n>\n>> '''Success: Activation Delay'''\n>> The consensus rules related to ''locked-in'' soft fork will be enforced in\n>> the second retarget period; ie. there is a one retarget period in\n>> which the remaining 5% can upgrade.  At the that activation block and\n>> after, the bit B may be reused for a different soft fork.\n>>\n>>\n> Rather than a simple one-period delay, should there be a one-period\n> \"burn-in\" to show sustained support of the threshold?  During this period,\n> support must continuously remain above the threshold.  Any lapse resets to\n> inactivated state.\n>\n> With a simple delay, you can have the embarrassing situation where support\n> falls off during the delay period and there is far below threshold support\n> just moments prior to enforcement, but enforcement happens anyway.\n>\n> BIP 101 has this problem too.\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/c8d94f63/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2015-09-30T02:05:47",
                "message_text_only": "Tom Harding via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nwrites:\n> On 9/13/2015 11:56 AM, Rusty Russell via bitcoin-dev wrote:\n>> '''Success: Activation Delay'''\n>> The consensus rules related to ''locked-in'' soft fork will be enforced in\n>> the second retarget period; ie. there is a one retarget period in\n>> which the remaining 5% can upgrade.  At the that activation block and\n>> after, the bit B may be reused for a different soft fork.\n>>\n>\n> Rather than a simple one-period delay, should there be a one-period \n> \"burn-in\" to show sustained support of the threshold?  During this \n> period, support must continuously remain above the threshold.  Any lapse \n> resets to inactivated state.\n>\n> With a simple delay, you can have the embarrassing situation where \n> support falls off during the delay period and there is far below \n> threshold support just moments prior to enforcement, but enforcement \n> happens anyway.\n\nYeah, but Gavin's right.  If you can't account for all the corner cases,\nall you can do is keep it simple and well defined.\n\nThanks,\nRusty."
            },
            {
                "author": "Tom Harding",
                "date": "2015-09-30T23:41:51",
                "message_text_only": "On 9/29/2015 7:05 PM, Rusty Russell wrote:\n> Tom Harding via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n> writes:\n>> With a simple delay, you can have the embarrassing situation where\n>> support falls off during the delay period and there is far below\n>> threshold support just moments prior to enforcement, but enforcement\n>> happens anyway.\n> Yeah, but Gavin's right.  If you can't account for all the corner cases,\n> all you can do is keep it simple and well defined.\n>\n\nAt least you changed the BIP to make it possible to see a fall off in \nsupport, even though nothing is done about it."
            }
        ],
        "thread_summary": {
            "title": "Version bits with timeout and delay.",
            "categories": [
                "bitcoin-dev",
                "BIP Proposal"
            ],
            "authors": [
                "Rusty Russell",
                "Eric Lombrozo",
                "Tier Nolan",
                "Jorge Tim\u00f3n",
                "Btc Drak",
                "Gavin Andresen",
                "Tom Harding"
            ],
            "messages_count": 26,
            "total_messages_chars_count": 47857
        }
    },
    {
        "title": "[bitcoin-dev] Quick Bitcoin/Pre-Christmas modest blocksize max increase",
        "thread_messages": [
            {
                "author": "Jason Livesay",
                "date": "2015-09-14T01:46:57",
                "message_text_only": "After studying the issues I believe that the situation warrants a\nshort-term modest blockchain increase.  Somewhere between 2mb-5mb, whatever\nthe community will swallow.  I recommend that happen before the winter\nshopping rush.\n\nThen, because of the fundamental technical limitations of scaling, a new\nsystem needs to be adopted for fast transactions.  To maintain momentum\netc., the new system ultimately settles with traditional bitcoins.\n\nIn order to keep the existing brand momentum, network, and business\ninvestment, I believe the smoothest path forward is to build a new,\nadditional system re-using the bitcoin name.  I suggest this new system\ncome packaged with the bitcoin core client and be referred to as\nQuickBitcoin or qbtc or something similar.  As far as the public is\nconcerned it could simply continue to be called bitcoin.  The system will\nwork on top of traditional bitcoins but have a mechanism for more/faster\ntransactions.  Exactly what mechanism doesn't have to be perfect, it just\nneeds to be reasonably secure/useful and something that the community will\naccept.\n\nI believe this is the best way to scale bitcoin while maintaining the\nstrength of its existing network,  community, and branding.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150914/11b8f27b/attachment.html>"
            },
            {
                "author": "gladoscc",
                "date": "2015-09-14T15:13:08",
                "message_text_only": "I appreciate your interest in Bitcoin, but I trust that you understand your\nproposal adds nothing to the current discussion and recommend you read more\nemails from this mailing list.\nOn 14/09/2015 11:47 am, \"Jason Livesay via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> After studying the issues I believe that the situation warrants a\n> short-term modest blockchain increase.  Somewhere between 2mb-5mb, whatever\n> the community will swallow.  I recommend that happen before the winter\n> shopping rush.\n>\n> Then, because of the fundamental technical limitations of scaling, a new\n> system needs to be adopted for fast transactions.  To maintain momentum\n> etc., the new system ultimately settles with traditional bitcoins.\n>\n> In order to keep the existing brand momentum, network, and business\n> investment, I believe the smoothest path forward is to build a new,\n> additional system re-using the bitcoin name.  I suggest this new system\n> come packaged with the bitcoin core client and be referred to as\n> QuickBitcoin or qbtc or something similar.  As far as the public is\n> concerned it could simply continue to be called bitcoin.  The system will\n> work on top of traditional bitcoins but have a mechanism for more/faster\n> transactions.  Exactly what mechanism doesn't have to be perfect, it just\n> needs to be reasonably secure/useful and something that the community will\n> accept.\n>\n> I believe this is the best way to scale bitcoin while maintaining the\n> strength of its existing network,  community, and branding.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/95fe131b/attachment.html>"
            },
            {
                "author": "phm",
                "date": "2015-09-16T11:23:52",
                "message_text_only": "Jason Livesay via bitcoin-dev wrote:\n> In order to keep the existing brand momentum, network, and business\n> investment, \nThese are precisely the issues that the Bitcoin Development team SHOULD\nNOT concern themselves with as they are not technical in nature.\n> I believe the smoothest path forward is to build a new, additional\n> system re-using the bitcoin name.  I suggest this new system come\n> packaged with the bitcoin core client and be referred to as\n> QuickBitcoin or qbtc or something similar.  As far as the public is\n> concerned it could simply continue to be called bitcoin.  The system\n> will work on top of traditional bitcoins but have a mechanism for\n> more/faster transactions.  Exactly what mechanism doesn't have to be\n> perfect, it just needs to be reasonably secure/useful and something\n> that the community will accept. \nA few members of the development team have already begun doing something\nalong these lines but its future does not look promising.\n\nI do not see any indication that this Christmas will be any more or less\nbusy than last Christmas. Correct me if I'm wrong, but retail spending\nas a whole still makes up only a small percentage of Bitcoin transactions.\n\nphm\nhttp://phm.link"
            }
        ],
        "thread_summary": {
            "title": "Quick Bitcoin/Pre-Christmas modest blocksize max increase",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jason Livesay",
                "phm",
                "gladoscc"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 4537
        }
    },
    {
        "title": "[bitcoin-dev] URI scheme for signing and verifying messages",
        "thread_messages": [
            {
                "author": "Arthur - bitcoin-fr.io",
                "date": "2015-09-14T18:57:01",
                "message_text_only": "Hi,I realized that there isn't any way to ask for a signature (or to verify a message) as easily you can do when requesting a payment using a bitcoin URI scheme (BIP0021).I think a URI scheme to use the signing tools in bitcoin core might be useful, and with a proper consensus it could become available in most bitcoin clients who already support message signing/verifying and payment url (or QRCode) and enable new uses of bitcoin signatures.A way to gain proper consensus is going through a BIP, so that's why I'm here: to present my idea publicly before going any further (draft BIP and reference implementation).Some thoughts\u00a0- like BIP0021: \"Bitcoin clients MUST NOT act on URIs without getting the user's authorization.\" so signing requires the user to manually approve the process\u00a0- it could use the same URI scheme than BIP0021 with an additional parameter (ex: signaction=) or use another one like BIP121 (ex: btcsig:)PS : I'll also post a topic in \"Development & Technical Discussion\" section on Bitcointalk\n\u00a0--Arthur Bouquet\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150914/c6f3afb9/attachment.html>"
            },
            {
                "author": "Thomas Kerin",
                "date": "2015-09-14T23:51:27",
                "message_text_only": "I think it would be more akin to bip70. I have a similar proposal, largely\nalready written up around this. I'm very interested in having this for\nmulti signature wallets.\nOn 14 Sep 2015 8:06 pm, \"Arthur - bitcoin-fr.io via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi,\n> I realized that there isn't any way to ask for a signature (or to verify a\n> message) as easily you can do when requesting a payment using a bitcoin URI\n> scheme (BIP0021).\n> I think a URI scheme to use the signing tools in bitcoin core might be\n> useful, and with a proper consensus it could become available in most\n> bitcoin clients who already support message signing/verifying and payment\n> url (or QRCode) and enable new uses of bitcoin signatures.\n> A way to gain proper consensus is going through a BIP, so that's why I'm\n> here: to present my idea publicly before going any further (draft BIP and\n> reference implementation).\n> Some thoughts\n>  - like BIP0021: \"Bitcoin clients MUST NOT act on URIs without getting the\n> user's authorization.\" so signing requires the user to manually approve the\n> process\n>  - it could use the same URI scheme than BIP0021 with an additional\n> parameter (ex: signaction=<verify/sign>) or use another one like BIP121\n> (ex: btcsig:)\n> PS : I'll also post a topic in \"Development & Technical Discussion\"\n> section on Bitcointalk\n>\n> --\n> Arthur Bouquet\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/bef6bd06/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-09-15T04:03:40",
                "message_text_only": "On Monday, September 14, 2015 6:57:01 PM Arthur - bitcoin-fr.io via bitcoin-\ndev wrote:\n> Hi,I realized that there isn't any way to ask for a signature (or to verify\n> a message) as easily you can do when requesting a payment using a bitcoin\n> URI scheme (BIP0021).I think a URI scheme to use the signing tools in\n> bitcoin core might be useful, and with a proper consensus it could become\n> available in most bitcoin clients who already support message\n> signing/verifying and payment url (or QRCode) and enable new uses of\n> bitcoin signatures.A way to gain proper consensus is going through a BIP,\n> so that's why I'm here: to present my idea publicly before going any\n> further (draft BIP and reference implementation).Some thoughts - like\n> BIP0021: \"Bitcoin clients MUST NOT act on URIs without getting the user's\n> authorization.\" so signing requires the user to manually approve the\n> process - it could use the same URI scheme than BIP0021 with an additional\n> parameter (ex: signaction=) or use another one like BIP121 (ex: btcsig:)PS\n> : I'll also post a topic in \"Development & Technical Discussion\" section\n> on Bitcointalk --Arthur Bouquet\n\nI think probably the whole signed message thing needs to be rethought. The \nmost common \"uses\" today seem to be insecure cases that it doesn't actually \nwork in: people trying to prove ownership of bitcoins and/or that they sent \nbitcoins (current signed messages can do neither). Ideally, whatever the new \nmethod is should also avoid using the same key as for signing transactions, \nsince the public key is technically private information. Furthermore, since \naddresses are semi-deprecated (by the payment protocol), I'm not sure it \nmakes sense to do this without designing an entire authentication system, \nwhich may be rather complex.\n\nLuke"
            },
            {
                "author": "Arthur - bitcoin-fr.io",
                "date": "2015-09-15T10:49:36",
                "message_text_only": "September 15 2015 6:04 AM, \"Luke Dashjr\" <luke at dashjr.org> wrote:\n> I think probably the whole signed message thing needs to be rethought. The\n> most common \"uses\" today seem to be insecure cases that it doesn't actually\n> work in: people trying to prove ownership of bitcoins and/or that they sent\n> bitcoins (current signed messages can do neither). Ideally, whatever the new\n> method is should also avoid using the same key as for signing transactions,\n> since the public key is technically private information. Furthermore, since\n> addresses are semi-deprecated (by the payment protocol), I'm not sure it\n> makes sense to do this without designing an entire authentication system,\n> which may be rather complex.\n> \n> Luke\n\nMy proposal is about the current signing process (which exists event it it's not perfect) but it could also work with a new signing message system tomorrow. It more about give users an easier way to access existing tools than the \"sign message thing\" itself.\n\nBTW I'm aware of privacy issues, but could you elaborate on why the use case your are referring to doesn't actually work?\nHere are a use of bitcoin signatures ( https://bitcointalk.org/index.php?topic=497545.0 ) to speak about a real case.\n\n--\nArthur"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-09-15T12:08:57",
                "message_text_only": "On Tuesday, September 15, 2015 10:49:36 AM Arthur - bitcoin-fr.io wrote:\n> September 15 2015 6:04 AM, \"Luke Dashjr\" <luke at dashjr.org> wrote:\n> > I think probably the whole signed message thing needs to be rethought.\n> > The most common \"uses\" today seem to be insecure cases that it doesn't\n> > actually work in: people trying to prove ownership of bitcoins and/or\n> > that they sent bitcoins (current signed messages can do neither).\n> > Ideally, whatever the new method is should also avoid using the same key\n> > as for signing transactions, since the public key is technically private\n> > information. Furthermore, since addresses are semi-deprecated (by the\n> > payment protocol), I'm not sure it makes sense to do this without\n> > designing an entire authentication system, which may be rather complex.\n> > \n> > Luke\n> \n> My proposal is about the current signing process (which exists event it\n> it's not perfect) but it could also work with a new signing message system\n> tomorrow. It more about give users an easier way to access existing tools\n> than the \"sign message thing\" itself.\n\nOne of my concerns is that making the existing signatures even easier will \ncause incompatible uses to become more prolific and accepted, increasing the \noverall risk. Hence my recommendation to satisfy these clearly-existing use \ncases with a safe signature *first*.\n\n> BTW I'm aware of privacy issues, but could you elaborate on why the use\n> case your are referring to doesn't actually work?\n\nThe signed message proves that the person who *receives* payment with the \naddress agrees to a given message/contract.\n\nIt is therefore appropriate and a best practice for web wallet providers \n(inherent problems with webwallets aside) to allow users to sign messages \nwith their deposit addresses. When bitcoins are received by this address, the \ntransaction creates a low-level UTXO representing the bitcoins *in the \nwallet*, but this UTXO is not associated with the address itself. Therefore, \nit is entirely possible that this UTXO remains unspent/valid on the \nblockchain even after the user in question has spent their entire balance at \nthe webwallet and therefore such a signature proves only that they once \nreceived the payment, but *not* that they presently still have the bitcoins \nreceived.\n\nFurthermore, it is proper for the UTXO to be redeemed at a low-level by the \nwallet when an entirely unrelated user is sending a transaction. In such a \ncircumstance, the original recipient of the bitcoins would still be able to \nsign a message, even though they have nothing to do with nor any right to the \ngoods/services purchased with the transaction redeeming that UTXO.\n\n> Here are a use of\n> bitcoin signatures ( https://bitcointalk.org/index.php?topic=497545.0 ) to\n> speak about a real case.\n\nYes, there are a few good use cases for the current signed messages, but they \nappear to be a minority at the moment. I suspect implementing any URI-based \nsigning would actually make them more difficult as well, since it is \nadditional code on the requester's part.\n\nLuke"
            },
            {
                "author": "Arthur - bitcoin-fr.io",
                "date": "2015-09-15T13:21:56",
                "message_text_only": "September 15 2015 2:10 PM, \"Luke Dashjr\" <luke at dashjr.org> wrote:\n> On Tuesday, September 15, 2015 10:49:36 AM Arthur - bitcoin-fr.io wrote:\n> \n>> September 15 2015 6:04 AM, \"Luke Dashjr\" <luke at dashjr.org> wrote:\n>>> I think probably the whole signed message thing needs to be rethought.\n>>> The most common \"uses\" today seem to be insecure cases that it doesn't\n>>> actually work in: people trying to prove ownership of bitcoins and/or\n>>> that they sent bitcoins (current signed messages can do neither).\n>>> Ideally, whatever the new method is should also avoid using the same key\n>>> as for signing transactions, since the public key is technically private\n>>> information. Furthermore, since addresses are semi-deprecated (by the\n>>> payment protocol), I'm not sure it makes sense to do this without\n>>> designing an entire authentication system, which may be rather complex.\n>>> \n>>> Luke\n>> \n>> My proposal is about the current signing process (which exists event it\n>> it's not perfect) but it could also work with a new signing message system\n>> tomorrow. It more about give users an easier way to access existing tools\n>> than the \"sign message thing\" itself.\n> \n> One of my concerns is that making the existing signatures even easier will\n> cause incompatible uses to become more prolific and accepted, increasing the\n> overall risk. Hence my recommendation to satisfy these clearly-existing use\n> cases with a safe signature *first*.\n> \n\nIdeally yes, but it will take some time to make a new signature system.\nI could also propose a URI scheme that will work with a future implementation but be compatible with the current one explaining its limitations (ex: sigversion=1 to use the current system, default value is sigversion=2 which won't work until a new system is developped).\n\n>> BTW I'm aware of privacy issues, but could you elaborate on why the use\n>> case your are referring to doesn't actually work?\n> \n> The signed message proves that the person who *receives* payment with the\n> address agrees to a given message/contract.\n> \n> It is therefore appropriate and a best practice for web wallet providers\n> (inherent problems with webwallets aside) to allow users to sign messages\n> with their deposit addresses. When bitcoins are received by this address, the\n> transaction creates a low-level UTXO representing the bitcoins *in the\n> wallet*, but this UTXO is not associated with the address itself. Therefore,\n> it is entirely possible that this UTXO remains unspent/valid on the\n> blockchain even after the user in question has spent their entire balance at\n> the webwallet and therefore such a signature proves only that they once\n> received the payment, but *not* that they presently still have the bitcoins\n> received.\n> \n> Furthermore, it is proper for the UTXO to be redeemed at a low-level by the\n> wallet when an entirely unrelated user is sending a transaction. In such a\n> circumstance, the original recipient of the bitcoins would still be able to\n> sign a message, even though they have nothing to do with nor any right to the\n> goods/services purchased with the transaction redeeming that UTXO.\n> \n>> Here are a use of\n>> bitcoin signatures ( https://bitcointalk.org/index.php?topic=497545.0 ) to\n>> speak about a real case.\n> \n> Yes, there are a few good use cases for the current signed messages, but they\n> appear to be a minority at the moment. I suspect implementing any URI-based\n> signing would actually make them more difficult as well, since it is\n> additional code on the requester's part.\n\nOk,thx for your answer, I actually agree with you up until the last sentence. (if not I wouldn't propose this URI scheme :-)\n\n--\nArthur"
            }
        ],
        "thread_summary": {
            "title": "URI scheme for signing and verifying messages",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Thomas Kerin",
                "Luke Dashjr",
                "Arthur - bitcoin-fr.io"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 12774
        }
    },
    {
        "title": "[bitcoin-dev] BIP-38 issue and altchain support",
        "thread_messages": [
            {
                "author": "Eric Voskuil",
                "date": "2015-09-14T19:54:39",
                "message_text_only": "In the integration of BIP-38 into libbitcoin we ran into two issues.\n\nFirst, the scenario that justifies the \"confirmation code\" is flawed. We\nhave implemented full support for this, but have also marked it as\ndeprecated.\n\nI am seeking counter arguments, in case there is some scenario that we\nhaven't imagined where it might be useful. Details here:\n\n[TLDR: the confirmation code cannot prove anything about the owner's\nability to spend from the public-key/address that it confirms.]\n\nhttps://github.com/libbitcoin/libbitcoin/wiki/BIP38-Security-Considerations\n\nSecond, BIP-38 envisions altchain integration but doesn't specify it. We\nhave implemented the capability, documented here:\n\n[TLDR: incorporate the payment address version into the last byte of the\nencoded encrypted key prefixes, with backward compatibility]\n\nhttps://github.com/libbitcoin/libbitcoin/wiki/Altchain-Encrypted-Private-Keys\n\nIf there is sufficient support I'll write up a Proposal that modifies\nBIP-38.\n\nThanks to Neill Miller for the libbitcoin and bx BIP-38 pull requests.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150914/0b841467/attachment-0001.sig>"
            }
        ],
        "thread_summary": {
            "title": "BIP-38 issue and altchain support",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Voskuil"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1344
        }
    },
    {
        "title": "[bitcoin-dev] libconsensus and bitcoin development process",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2015-09-15T04:10:37",
                "message_text_only": "[collating a private mail and a github issue comment, moving it to a\nbetter forum]\n\nOn libconsensus\n---------------\nIn general there exists the reasonable goal to move consensus state\nand code to a specific, separate lib.\n\nTo someone not closely reviewing the seemingly endless stream of\nlibconsensus refactoring PRs, the 10,000 foot view is that there is a\nrather random stream of refactors that proceed in fits and starts\nwithout apparent plan or end other than a one sentence \"isolate\nconsensus state and code\" summary.\n\nI am hoping that\n* There is some plan\n* We will not see a five year stream of random consensus code movement\npatches causing lots of downstream developer headaches.\n\nI read every code change in every pull request that comes into\ngithub/bitcoin/bitcoin with three exceptions:\n* consensus code movement changes - too big, too chaotic, too\nfrequent, too unfocused, laziness guarantees others will inevitably\nACK it without me.\n* some non-code changes (docs)\n* ignore 80% of the Qt changes\n\nAs with any sort of refactoring, they are easy to prove correct, easy\nto reason, and therefore quick and easy to ACK and merge.\n\nRefactors however have a very real negative impact.\nbitcoin/bitcoin.git is not only the source tree in the universe.\nSoftware engineers at home, at startups, and at major companies are\nmaintaining branches of their own.\n\nIt is very very easy to fall into a trap where a project is merging\nlots of cosmetic changes and not seeing the downstream ripple effects.\nSeveral people complained to me at the conference about all the code\nmovement changes breaking their own work, causing them to stay on\nolder versions of bitcoin due to the effort required to rebase to each\nnew release version - and I share those complaints.\n\nComplex code changes with longer development cycles than simple code\nmovement patches keep breaking.  It is very frustrating, and causes\nfolks to get trapped between a rock and a hard place:\n- Trying to push non-trivial changes upstream is difficult, for normal\nand reasonable reasons (big important changes need review etc.).\n- Maintaining non-trivial changes out of tree is also painful, for the\naforementioned reasons.\n\nReasonable work languishes in constant-rebase hell, and incentivizes\nagainst keeping up with the latest tree.\n\n\nAside from the refactor, libconsensus appears to be engineering in the\ndark.  Where is any sort of plan?  I have low standards - a photo of a\nwhiteboard or youtube clip will do.\n\nThe general goal is good.   But we must not stray into unfocused\nengineering for a non-existent future library user.\n\nThe higher priority must be given to having a source code base that\nmaximizes the collective developers' ability to maintain The Router --\nthe core bitcoin full node P2P engine.\n\nI recommend time-based bursts of code movement changes.  See below;\nfor example, just submit & merge code movement changes on the first\nweek of every 2nd month.  Code movement changes are easy to create\nfrom scratch once a concrete goal is known.  The coding part is\ntrivial and takes no time.\n\nAs we saw in the Linux kernel - battle lessons hard learned - code\nmovement and refactors have often unseen negative impact on downstream\ndevelopers working on more complicated changes that have more positive\nimpact to our developers and users.\n\n\nOn Bitcoin development release cycles & process\n------------------------------------------------------------------\n\nAs I've outlined in the past, the Linux kernel maintenance phases\naddress some of these problems.  The merge window into git master\nopens for 1 week, a very chaotic week full of merging (and rebasing),\nand then the merge window closes.  Several weeks follow as the \"dust\nsettles\" -- testing, bug fixing, moving in parallel OOB with\nnot-yet-ready development.  Release candidates follow, then the\nrelease, then the cycle repeats.\n\nIMO a merge window approach fixes some of the issues with refactoring,\nas well as introduces some useful -developer discipline- into the\ndevelopment process.  Bitcoin Core still needs rapid iteration --\nanother failing of the current project -- and so something of a more\nrapid pace is needed:\n- 1st week of each month, merge changes.  Lots of rebasing during this week.\n- remaining days of the month, test, bug fix\n- release at end of month\n\nIf changes are not ready for merging, then so be it, they wait until\nnext month's release.  Some releases have major features, some\nreleases are completely boring and offer little of note.  That is the\nnature of time-based development iteration.  It's like dollar cost\naveraging, a bit.\n\n\nAnd frankly, I would like to close all github pull requests that are\nnot ready to merge That Week.  I'm as guilty of this as any, but that\nstuff just languishes.  Excluding a certain category of obvious-crap,\npull requests tend to default to a state of either (a) rapid merging,\n(b) months-long issues/projects, (c) limbo.\n\nUnder a more time-based approach, a better pull request process would be to\n* Only open pull requests if it's a bug fix, or the merge window is\nopen and the change is ready to be merged in the developer's opinion.\n* Developers CC bitcoin-dev list to discuss Bitcoin Core-bound projects\n* Developers maintain and publish projects via their own git trees\n* Pull requests should be closed if unmerged after 7 days, unless it\nis an important bug fix etc.\n\nThe problem with projects like libconsensus is that they can get\nunfocused and open ended.  Code movement changes in particular are\ncheap to generate.  It is low developer cost for the developer to\niterate all the way to the end state, see what that looks like, and\nsee if people like it.  That end state is not something you would\nmerge all in one go.  I would likely stash that tree, and then start\nagain, seek the most optimal and least disruptive set of refactors,\nand generate and merge those into bitcoin/bitcoin.git in a time-based,\npaced manner.  Announce the pace ahead of time - \"cosmetic stuff that\nbreaks your patches will be merged 1st week of every second month\"\n\nTo underscore, the higher priority must be given to having a source\ncode base and disciplined development process that maximizes the\ncollective developers' ability to maintain The Router that maintains\nmost of our network.\n\nModularity, refactoring, cleaning up grotty code generates a deep\nseated happiness in many engineers.  Field experience however shows\nrefactoring is a never ending process which sometimes gets in the way\nof More Important Work."
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-15T09:55:34",
                "message_text_only": "I also share a lot of Jeff's concerns about refactoring and have voiced\nthem several times on IRC and in private to Jorge, Wladamir and Greg. I\nmeant to do a write up but never got around to it. Jeff has quite\neloquently stated the various problems. I would like to share my thoughts\non the matter because we really do need to come up with a plan on how this\nissue is dealt with.\n\nObviously, Bitcoin Core is quite tightly coupled at the moment and\ndefinitely needs extensive modularisation. Such work will inevitably\nrequire lots of bulk code moves and then finer refactoring. However, it\nrequires proper planning because there are lots of effects and consequences\nfor other people contributing to Core and also downstream projects relying\non Core:\n\n1. Refactoring often causes other pull requests to diverge and require\nrebasing. Continual refactoring can put PRs in \"rebase hell\" and puts a big\nstress on contributors (many of whom are part time).\n\n2. Version to version, Bitcoin Core changes significantly in structure. 0.9\nto 0.10 is unrecognisable. 0.10 to 0.11 is even more so. This makes makes\nit hard to follow release to release and the net result is less people\nupgrade (especially think of miners trying to keep their patch sets working\nwhile trying not to disrupt or risk their mining operations).\n\n3. Continual refactoring increases risk: we're human, and mistakes will\nslip through peer review. This is especially concerning with consensus\ncritical code and this makes it difficult to merge such refactoring often,\nwhich of course exacerbates the problem.\n\nThe net negative consequence is it is harder to contribute to Core, harder\nfor the Core maintainers to merge and harder for downstream/dependent\nprojects/implementations to keep up.\n\nSuggested Way Forward\n---------------------------------\n\nWith the understanding that refactored code by definition must not change\nbehaviour. There are three major kinds of refactoring:\n\n1. code moves (e.g. separating concerns into different files);\n2. code style;\n3. structural optimisation and consolidation (reducing LOC, separating\nconcerns, encapsulation etc).\n\nCode moves(1) and CS(2) are easy to peer review and merge quickly. The\nthird kind(3) requires deeper analysis to ensure that while the code\nchanged, the behaviour (including any bugs) did not.\n\nWe must resist all temptation to fix bugs or tack on minor fixes and tweaks\nduring refactoring: pull requests should only be refactoring only, with no\nnet change to behaviour. Keeping discipline makes it much easier to verify\nand peer review and this faster to merge.\n\nWith respect to Code moves and CS, I believe we should have a \"refactoring\nfortnight\" where we so the bulk of code move-only refactoring plus CS where\nnecessary. This is by fat the most disruptive kind of change because it\nwidely affects other PRs mergeability. We should aim to get most of this\ndone in one go, so that it's not happening in dribs and drabs over months\nand many releases. Once done, it gives everyone a good idea to the overall\nnew structure and where one can expect to find things in the future. The\nidea here is to help orientation and not have to continuously hunt for\nwhere things have moved to.\n\nTo be clear, I am strongly suggesting code move-only refactoring PRs not be\nmixed with anything else. Same for CS changes. This makes the PRs extremely\neasy to vet and thus quick to merge.\n\nTowards this end, maybe there should be an IRC meeting to agree the initial\nmoves, then someone who has the stomach for it can get on and do it -\nduring that time, we do not merge anything else. We need to bite the bullet\nand break the back out of code moves.\n\nWith regards to CS, I think we do need to get CS right, because a continual\ndribble of CS changes also makes diffs between releases less easy to\nfollow. Much of CS checking can be automated by the continuous integration\nso authors can get it right easily. It can be just like a Travis check.\n\nWith respect to the 3rd kind of refactoring, we need to set some standards\nand goals and aim for some kind of consistency. Refactoring needs to fulfil\ncertain goals and criterion otherwise contributors will always find a\nreason to fiddle over and over forever. Obvious targets here can be things\nlike proper encapsulation and separation of concerns.\n\nOverall, refactoring should be merged quickly, but only on a schedule so it\ndoesn't cause major disruption to others.\n\nObviously the third kind of refactoring more complex and time consuming and\nwill need to occur over time, but it should happen in defined steps. As\nJeff said, one week a month, or maybe one month a release. In any case,\nrefactoring changes should be quickly accepted or rejected by the project\nmaintainer and not left hanging.\n\nFinally, refactoring should *always* be uncontroversial because essentially\nfunctionality is not changing. If functionality changes (e.g. you try to\nsneak in a big fix or feature tweak \"because it's small\") the PR should be\nrejected outright. Additionally, if we break down refactoring into the\nthree kinds stated above, peer review will be much more straightforward.\n\n\n\nOn Tue, Sep 15, 2015 at 5:10 AM, Jeff Garzik via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> [collating a private mail and a github issue comment, moving it to a\n> better forum]\n>\n> On libconsensus\n> ---------------\n> In general there exists the reasonable goal to move consensus state\n> and code to a specific, separate lib.\n>\n> To someone not closely reviewing the seemingly endless stream of\n> libconsensus refactoring PRs, the 10,000 foot view is that there is a\n> rather random stream of refactors that proceed in fits and starts\n> without apparent plan or end other than a one sentence \"isolate\n> consensus state and code\" summary.\n>\n> I am hoping that\n> * There is some plan\n> * We will not see a five year stream of random consensus code movement\n> patches causing lots of downstream developer headaches.\n>\n> I read every code change in every pull request that comes into\n> github/bitcoin/bitcoin with three exceptions:\n> * consensus code movement changes - too big, too chaotic, too\n> frequent, too unfocused, laziness guarantees others will inevitably\n> ACK it without me.\n> * some non-code changes (docs)\n> * ignore 80% of the Qt changes\n>\n> As with any sort of refactoring, they are easy to prove correct, easy\n> to reason, and therefore quick and easy to ACK and merge.\n>\n> Refactors however have a very real negative impact.\n> bitcoin/bitcoin.git is not only the source tree in the universe.\n> Software engineers at home, at startups, and at major companies are\n> maintaining branches of their own.\n>\n> It is very very easy to fall into a trap where a project is merging\n> lots of cosmetic changes and not seeing the downstream ripple effects.\n> Several people complained to me at the conference about all the code\n> movement changes breaking their own work, causing them to stay on\n> older versions of bitcoin due to the effort required to rebase to each\n> new release version - and I share those complaints.\n>\n> Complex code changes with longer development cycles than simple code\n> movement patches keep breaking.  It is very frustrating, and causes\n> folks to get trapped between a rock and a hard place:\n> - Trying to push non-trivial changes upstream is difficult, for normal\n> and reasonable reasons (big important changes need review etc.).\n> - Maintaining non-trivial changes out of tree is also painful, for the\n> aforementioned reasons.\n>\n> Reasonable work languishes in constant-rebase hell, and incentivizes\n> against keeping up with the latest tree.\n>\n>\n> Aside from the refactor, libconsensus appears to be engineering in the\n> dark.  Where is any sort of plan?  I have low standards - a photo of a\n> whiteboard or youtube clip will do.\n>\n> The general goal is good.   But we must not stray into unfocused\n> engineering for a non-existent future library user.\n>\n> The higher priority must be given to having a source code base that\n> maximizes the collective developers' ability to maintain The Router --\n> the core bitcoin full node P2P engine.\n>\n> I recommend time-based bursts of code movement changes.  See below;\n> for example, just submit & merge code movement changes on the first\n> week of every 2nd month.  Code movement changes are easy to create\n> from scratch once a concrete goal is known.  The coding part is\n> trivial and takes no time.\n>\n> As we saw in the Linux kernel - battle lessons hard learned - code\n> movement and refactors have often unseen negative impact on downstream\n> developers working on more complicated changes that have more positive\n> impact to our developers and users.\n>\n>\n> On Bitcoin development release cycles & process\n> ------------------------------------------------------------------\n>\n> As I've outlined in the past, the Linux kernel maintenance phases\n> address some of these problems.  The merge window into git master\n> opens for 1 week, a very chaotic week full of merging (and rebasing),\n> and then the merge window closes.  Several weeks follow as the \"dust\n> settles\" -- testing, bug fixing, moving in parallel OOB with\n> not-yet-ready development.  Release candidates follow, then the\n> release, then the cycle repeats.\n>\n> IMO a merge window approach fixes some of the issues with refactoring,\n> as well as introduces some useful -developer discipline- into the\n> development process.  Bitcoin Core still needs rapid iteration --\n> another failing of the current project -- and so something of a more\n> rapid pace is needed:\n> - 1st week of each month, merge changes.  Lots of rebasing during this\n> week.\n> - remaining days of the month, test, bug fix\n> - release at end of month\n>\n> If changes are not ready for merging, then so be it, they wait until\n> next month's release.  Some releases have major features, some\n> releases are completely boring and offer little of note.  That is the\n> nature of time-based development iteration.  It's like dollar cost\n> averaging, a bit.\n>\n>\n> And frankly, I would like to close all github pull requests that are\n> not ready to merge That Week.  I'm as guilty of this as any, but that\n> stuff just languishes.  Excluding a certain category of obvious-crap,\n> pull requests tend to default to a state of either (a) rapid merging,\n> (b) months-long issues/projects, (c) limbo.\n>\n> Under a more time-based approach, a better pull request process would be to\n> * Only open pull requests if it's a bug fix, or the merge window is\n> open and the change is ready to be merged in the developer's opinion.\n> * Developers CC bitcoin-dev list to discuss Bitcoin Core-bound projects\n> * Developers maintain and publish projects via their own git trees\n> * Pull requests should be closed if unmerged after 7 days, unless it\n> is an important bug fix etc.\n>\n> The problem with projects like libconsensus is that they can get\n> unfocused and open ended.  Code movement changes in particular are\n> cheap to generate.  It is low developer cost for the developer to\n> iterate all the way to the end state, see what that looks like, and\n> see if people like it.  That end state is not something you would\n> merge all in one go.  I would likely stash that tree, and then start\n> again, seek the most optimal and least disruptive set of refactors,\n> and generate and merge those into bitcoin/bitcoin.git in a time-based,\n> paced manner.  Announce the pace ahead of time - \"cosmetic stuff that\n> breaks your patches will be merged 1st week of every second month\"\n>\n> To underscore, the higher priority must be given to having a source\n> code base and disciplined development process that maximizes the\n> collective developers' ability to maintain The Router that maintains\n> most of our network.\n>\n> Modularity, refactoring, cleaning up grotty code generates a deep\n> seated happiness in many engineers.  Field experience however shows\n> refactoring is a never ending process which sometimes gets in the way\n> of More Important Work.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/93989145/attachment-0001.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-09-15T15:26:50",
                "message_text_only": "Drak,\n\nI would say that the refactoring does actually fulfill some conditions you\nmention:\n- move-only is almost always clearly separated out\n- the refactoring is not controversial _in minimis_ - meaning, the\nindividual pull request is not controversial.\n\nThe problem comes with the impact of an unfocused stream of refactors to\nkey code.\n\nFor example, there is much less long term developer impact if refactoring\nwere _accelerated_, scheduled to be performed in a one-week sprint.  There\nis a lot of breakage, yes, but after that week the average level of\ndownstream patch breakage is significantly lower.  A \"rip the band-aid off\nquickly rather than slowly\" approach.\n\n\n\n\nOn Tue, Sep 15, 2015 at 5:55 AM, Btc Drak <btcdrak at gmail.com> wrote:\n\n> I also share a lot of Jeff's concerns about refactoring and have voiced\n> them several times on IRC and in private to Jorge, Wladamir and Greg. I\n> meant to do a write up but never got around to it. Jeff has quite\n> eloquently stated the various problems. I would like to share my thoughts\n> on the matter because we really do need to come up with a plan on how this\n> issue is dealt with.\n>\n> Obviously, Bitcoin Core is quite tightly coupled at the moment and\n> definitely needs extensive modularisation. Such work will inevitably\n> require lots of bulk code moves and then finer refactoring. However, it\n> requires proper planning because there are lots of effects and consequences\n> for other people contributing to Core and also downstream projects relying\n> on Core:\n>\n> 1. Refactoring often causes other pull requests to diverge and require\n> rebasing. Continual refactoring can put PRs in \"rebase hell\" and puts a big\n> stress on contributors (many of whom are part time).\n>\n> 2. Version to version, Bitcoin Core changes significantly in structure.\n> 0.9 to 0.10 is unrecognisable. 0.10 to 0.11 is even more so. This makes\n> makes it hard to follow release to release and the net result is less\n> people upgrade (especially think of miners trying to keep their patch sets\n> working while trying not to disrupt or risk their mining operations).\n>\n> 3. Continual refactoring increases risk: we're human, and mistakes will\n> slip through peer review. This is especially concerning with consensus\n> critical code and this makes it difficult to merge such refactoring often,\n> which of course exacerbates the problem.\n>\n> The net negative consequence is it is harder to contribute to Core, harder\n> for the Core maintainers to merge and harder for downstream/dependent\n> projects/implementations to keep up.\n>\n> Suggested Way Forward\n> ---------------------------------\n>\n> With the understanding that refactored code by definition must not change\n> behaviour. There are three major kinds of refactoring:\n>\n> 1. code moves (e.g. separating concerns into different files);\n> 2. code style;\n> 3. structural optimisation and consolidation (reducing LOC, separating\n> concerns, encapsulation etc).\n>\n> Code moves(1) and CS(2) are easy to peer review and merge quickly. The\n> third kind(3) requires deeper analysis to ensure that while the code\n> changed, the behaviour (including any bugs) did not.\n>\n> We must resist all temptation to fix bugs or tack on minor fixes and\n> tweaks during refactoring: pull requests should only be refactoring only,\n> with no net change to behaviour. Keeping discipline makes it much easier to\n> verify and peer review and this faster to merge.\n>\n> With respect to Code moves and CS, I believe we should have a \"refactoring\n> fortnight\" where we so the bulk of code move-only refactoring plus CS where\n> necessary. This is by fat the most disruptive kind of change because it\n> widely affects other PRs mergeability. We should aim to get most of this\n> done in one go, so that it's not happening in dribs and drabs over months\n> and many releases. Once done, it gives everyone a good idea to the overall\n> new structure and where one can expect to find things in the future. The\n> idea here is to help orientation and not have to continuously hunt for\n> where things have moved to.\n>\n> To be clear, I am strongly suggesting code move-only refactoring PRs not\n> be mixed with anything else. Same for CS changes. This makes the PRs\n> extremely easy to vet and thus quick to merge.\n>\n> Towards this end, maybe there should be an IRC meeting to agree the\n> initial moves, then someone who has the stomach for it can get on and do it\n> - during that time, we do not merge anything else. We need to bite the\n> bullet and break the back out of code moves.\n>\n> With regards to CS, I think we do need to get CS right, because a\n> continual dribble of CS changes also makes diffs between releases less easy\n> to follow. Much of CS checking can be automated by the continuous\n> integration so authors can get it right easily. It can be just like a\n> Travis check.\n>\n> With respect to the 3rd kind of refactoring, we need to set some standards\n> and goals and aim for some kind of consistency. Refactoring needs to fulfil\n> certain goals and criterion otherwise contributors will always find a\n> reason to fiddle over and over forever. Obvious targets here can be things\n> like proper encapsulation and separation of concerns.\n>\n> Overall, refactoring should be merged quickly, but only on a schedule so\n> it doesn't cause major disruption to others.\n>\n> Obviously the third kind of refactoring more complex and time consuming\n> and will need to occur over time, but it should happen in defined steps. As\n> Jeff said, one week a month, or maybe one month a release. In any case,\n> refactoring changes should be quickly accepted or rejected by the project\n> maintainer and not left hanging.\n>\n> Finally, refactoring should *always* be uncontroversial because\n> essentially functionality is not changing. If functionality changes (e.g.\n> you try to sneak in a big fix or feature tweak \"because it's small\") the PR\n> should be rejected outright. Additionally, if we break down refactoring\n> into the three kinds stated above, peer review will be much more\n> straightforward.\n>\n>\n>\n> On Tue, Sep 15, 2015 at 5:10 AM, Jeff Garzik via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> [collating a private mail and a github issue comment, moving it to a\n>> better forum]\n>>\n>> On libconsensus\n>> ---------------\n>> In general there exists the reasonable goal to move consensus state\n>> and code to a specific, separate lib.\n>>\n>> To someone not closely reviewing the seemingly endless stream of\n>> libconsensus refactoring PRs, the 10,000 foot view is that there is a\n>> rather random stream of refactors that proceed in fits and starts\n>> without apparent plan or end other than a one sentence \"isolate\n>> consensus state and code\" summary.\n>>\n>> I am hoping that\n>> * There is some plan\n>> * We will not see a five year stream of random consensus code movement\n>> patches causing lots of downstream developer headaches.\n>>\n>> I read every code change in every pull request that comes into\n>> github/bitcoin/bitcoin with three exceptions:\n>> * consensus code movement changes - too big, too chaotic, too\n>> frequent, too unfocused, laziness guarantees others will inevitably\n>> ACK it without me.\n>> * some non-code changes (docs)\n>> * ignore 80% of the Qt changes\n>>\n>> As with any sort of refactoring, they are easy to prove correct, easy\n>> to reason, and therefore quick and easy to ACK and merge.\n>>\n>> Refactors however have a very real negative impact.\n>> bitcoin/bitcoin.git is not only the source tree in the universe.\n>> Software engineers at home, at startups, and at major companies are\n>> maintaining branches of their own.\n>>\n>> It is very very easy to fall into a trap where a project is merging\n>> lots of cosmetic changes and not seeing the downstream ripple effects.\n>> Several people complained to me at the conference about all the code\n>> movement changes breaking their own work, causing them to stay on\n>> older versions of bitcoin due to the effort required to rebase to each\n>> new release version - and I share those complaints.\n>>\n>> Complex code changes with longer development cycles than simple code\n>> movement patches keep breaking.  It is very frustrating, and causes\n>> folks to get trapped between a rock and a hard place:\n>> - Trying to push non-trivial changes upstream is difficult, for normal\n>> and reasonable reasons (big important changes need review etc.).\n>> - Maintaining non-trivial changes out of tree is also painful, for the\n>> aforementioned reasons.\n>>\n>> Reasonable work languishes in constant-rebase hell, and incentivizes\n>> against keeping up with the latest tree.\n>>\n>>\n>> Aside from the refactor, libconsensus appears to be engineering in the\n>> dark.  Where is any sort of plan?  I have low standards - a photo of a\n>> whiteboard or youtube clip will do.\n>>\n>> The general goal is good.   But we must not stray into unfocused\n>> engineering for a non-existent future library user.\n>>\n>> The higher priority must be given to having a source code base that\n>> maximizes the collective developers' ability to maintain The Router --\n>> the core bitcoin full node P2P engine.\n>>\n>> I recommend time-based bursts of code movement changes.  See below;\n>> for example, just submit & merge code movement changes on the first\n>> week of every 2nd month.  Code movement changes are easy to create\n>> from scratch once a concrete goal is known.  The coding part is\n>> trivial and takes no time.\n>>\n>> As we saw in the Linux kernel - battle lessons hard learned - code\n>> movement and refactors have often unseen negative impact on downstream\n>> developers working on more complicated changes that have more positive\n>> impact to our developers and users.\n>>\n>>\n>> On Bitcoin development release cycles & process\n>> ------------------------------------------------------------------\n>>\n>> As I've outlined in the past, the Linux kernel maintenance phases\n>> address some of these problems.  The merge window into git master\n>> opens for 1 week, a very chaotic week full of merging (and rebasing),\n>> and then the merge window closes.  Several weeks follow as the \"dust\n>> settles\" -- testing, bug fixing, moving in parallel OOB with\n>> not-yet-ready development.  Release candidates follow, then the\n>> release, then the cycle repeats.\n>>\n>> IMO a merge window approach fixes some of the issues with refactoring,\n>> as well as introduces some useful -developer discipline- into the\n>> development process.  Bitcoin Core still needs rapid iteration --\n>> another failing of the current project -- and so something of a more\n>> rapid pace is needed:\n>> - 1st week of each month, merge changes.  Lots of rebasing during this\n>> week.\n>> - remaining days of the month, test, bug fix\n>> - release at end of month\n>>\n>> If changes are not ready for merging, then so be it, they wait until\n>> next month's release.  Some releases have major features, some\n>> releases are completely boring and offer little of note.  That is the\n>> nature of time-based development iteration.  It's like dollar cost\n>> averaging, a bit.\n>>\n>>\n>> And frankly, I would like to close all github pull requests that are\n>> not ready to merge That Week.  I'm as guilty of this as any, but that\n>> stuff just languishes.  Excluding a certain category of obvious-crap,\n>> pull requests tend to default to a state of either (a) rapid merging,\n>> (b) months-long issues/projects, (c) limbo.\n>>\n>> Under a more time-based approach, a better pull request process would be\n>> to\n>> * Only open pull requests if it's a bug fix, or the merge window is\n>> open and the change is ready to be merged in the developer's opinion.\n>> * Developers CC bitcoin-dev list to discuss Bitcoin Core-bound projects\n>> * Developers maintain and publish projects via their own git trees\n>> * Pull requests should be closed if unmerged after 7 days, unless it\n>> is an important bug fix etc.\n>>\n>> The problem with projects like libconsensus is that they can get\n>> unfocused and open ended.  Code movement changes in particular are\n>> cheap to generate.  It is low developer cost for the developer to\n>> iterate all the way to the end state, see what that looks like, and\n>> see if people like it.  That end state is not something you would\n>> merge all in one go.  I would likely stash that tree, and then start\n>> again, seek the most optimal and least disruptive set of refactors,\n>> and generate and merge those into bitcoin/bitcoin.git in a time-based,\n>> paced manner.  Announce the pace ahead of time - \"cosmetic stuff that\n>> breaks your patches will be merged 1st week of every second month\"\n>>\n>> To underscore, the higher priority must be given to having a source\n>> code base and disciplined development process that maximizes the\n>> collective developers' ability to maintain The Router that maintains\n>> most of our network.\n>>\n>> Modularity, refactoring, cleaning up grotty code generates a deep\n>> seated happiness in many engineers.  Field experience however shows\n>> refactoring is a never ending process which sometimes gets in the way\n>> of More Important Work.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/3f2f6d55/attachment-0001.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-15T16:00:11",
                "message_text_only": "I basically agree with what has been said here.\n\nRefactoring efforts should be well-coordinated. Their short-term impact can be quite disruptive, although if done correctly, longer-term they make it even easier for downstream developers to add and merge changes.\n\nBy scheduling move-only changes, others can avoid making PRs immediately prior to or during these changes (which ironically involve considerable disruption to PRs while changing nothing for endusers). Furthermore, it would be useful to document the changes in ways that help other developers rebase properly.\n\nOn September 15, 2015 11:26:50 AM EDT, Jeff Garzik via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>Drak,\n>\n>I would say that the refactoring does actually fulfill some conditions\n>you\n>mention:\n>- move-only is almost always clearly separated out\n>- the refactoring is not controversial _in minimis_ - meaning, the\n>individual pull request is not controversial.\n>\n>The problem comes with the impact of an unfocused stream of refactors\n>to\n>key code.\n>\n>For example, there is much less long term developer impact if\n>refactoring\n>were _accelerated_, scheduled to be performed in a one-week sprint. \n>There\n>is a lot of breakage, yes, but after that week the average level of\n>downstream patch breakage is significantly lower.  A \"rip the band-aid\n>off\n>quickly rather than slowly\" approach.\n>\n>\n>\n>\n>On Tue, Sep 15, 2015 at 5:55 AM, Btc Drak <btcdrak at gmail.com> wrote:\n>\n>> I also share a lot of Jeff's concerns about refactoring and have\n>voiced\n>> them several times on IRC and in private to Jorge, Wladamir and Greg.\n>I\n>> meant to do a write up but never got around to it. Jeff has quite\n>> eloquently stated the various problems. I would like to share my\n>thoughts\n>> on the matter because we really do need to come up with a plan on how\n>this\n>> issue is dealt with.\n>>\n>> Obviously, Bitcoin Core is quite tightly coupled at the moment and\n>> definitely needs extensive modularisation. Such work will inevitably\n>> require lots of bulk code moves and then finer refactoring. However,\n>it\n>> requires proper planning because there are lots of effects and\n>consequences\n>> for other people contributing to Core and also downstream projects\n>relying\n>> on Core:\n>>\n>> 1. Refactoring often causes other pull requests to diverge and\n>require\n>> rebasing. Continual refactoring can put PRs in \"rebase hell\" and puts\n>a big\n>> stress on contributors (many of whom are part time).\n>>\n>> 2. Version to version, Bitcoin Core changes significantly in\n>structure.\n>> 0.9 to 0.10 is unrecognisable. 0.10 to 0.11 is even more so. This\n>makes\n>> makes it hard to follow release to release and the net result is less\n>> people upgrade (especially think of miners trying to keep their patch\n>sets\n>> working while trying not to disrupt or risk their mining operations).\n>>\n>> 3. Continual refactoring increases risk: we're human, and mistakes\n>will\n>> slip through peer review. This is especially concerning with\n>consensus\n>> critical code and this makes it difficult to merge such refactoring\n>often,\n>> which of course exacerbates the problem.\n>>\n>> The net negative consequence is it is harder to contribute to Core,\n>harder\n>> for the Core maintainers to merge and harder for downstream/dependent\n>> projects/implementations to keep up.\n>>\n>> Suggested Way Forward\n>> ---------------------------------\n>>\n>> With the understanding that refactored code by definition must not\n>change\n>> behaviour. There are three major kinds of refactoring:\n>>\n>> 1. code moves (e.g. separating concerns into different files);\n>> 2. code style;\n>> 3. structural optimisation and consolidation (reducing LOC,\n>separating\n>> concerns, encapsulation etc).\n>>\n>> Code moves(1) and CS(2) are easy to peer review and merge quickly.\n>The\n>> third kind(3) requires deeper analysis to ensure that while the code\n>> changed, the behaviour (including any bugs) did not.\n>>\n>> We must resist all temptation to fix bugs or tack on minor fixes and\n>> tweaks during refactoring: pull requests should only be refactoring\n>only,\n>> with no net change to behaviour. Keeping discipline makes it much\n>easier to\n>> verify and peer review and this faster to merge.\n>>\n>> With respect to Code moves and CS, I believe we should have a\n>\"refactoring\n>> fortnight\" where we so the bulk of code move-only refactoring plus CS\n>where\n>> necessary. This is by fat the most disruptive kind of change because\n>it\n>> widely affects other PRs mergeability. We should aim to get most of\n>this\n>> done in one go, so that it's not happening in dribs and drabs over\n>months\n>> and many releases. Once done, it gives everyone a good idea to the\n>overall\n>> new structure and where one can expect to find things in the future.\n>The\n>> idea here is to help orientation and not have to continuously hunt\n>for\n>> where things have moved to.\n>>\n>> To be clear, I am strongly suggesting code move-only refactoring PRs\n>not\n>> be mixed with anything else. Same for CS changes. This makes the PRs\n>> extremely easy to vet and thus quick to merge.\n>>\n>> Towards this end, maybe there should be an IRC meeting to agree the\n>> initial moves, then someone who has the stomach for it can get on and\n>do it\n>> - during that time, we do not merge anything else. We need to bite\n>the\n>> bullet and break the back out of code moves.\n>>\n>> With regards to CS, I think we do need to get CS right, because a\n>> continual dribble of CS changes also makes diffs between releases\n>less easy\n>> to follow. Much of CS checking can be automated by the continuous\n>> integration so authors can get it right easily. It can be just like a\n>> Travis check.\n>>\n>> With respect to the 3rd kind of refactoring, we need to set some\n>standards\n>> and goals and aim for some kind of consistency. Refactoring needs to\n>fulfil\n>> certain goals and criterion otherwise contributors will always find a\n>> reason to fiddle over and over forever. Obvious targets here can be\n>things\n>> like proper encapsulation and separation of concerns.\n>>\n>> Overall, refactoring should be merged quickly, but only on a schedule\n>so\n>> it doesn't cause major disruption to others.\n>>\n>> Obviously the third kind of refactoring more complex and time\n>consuming\n>> and will need to occur over time, but it should happen in defined\n>steps. As\n>> Jeff said, one week a month, or maybe one month a release. In any\n>case,\n>> refactoring changes should be quickly accepted or rejected by the\n>project\n>> maintainer and not left hanging.\n>>\n>> Finally, refactoring should *always* be uncontroversial because\n>> essentially functionality is not changing. If functionality changes\n>(e.g.\n>> you try to sneak in a big fix or feature tweak \"because it's small\")\n>the PR\n>> should be rejected outright. Additionally, if we break down\n>refactoring\n>> into the three kinds stated above, peer review will be much more\n>> straightforward.\n>>\n>>\n>>\n>> On Tue, Sep 15, 2015 at 5:10 AM, Jeff Garzik via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> [collating a private mail and a github issue comment, moving it to a\n>>> better forum]\n>>>\n>>> On libconsensus\n>>> ---------------\n>>> In general there exists the reasonable goal to move consensus state\n>>> and code to a specific, separate lib.\n>>>\n>>> To someone not closely reviewing the seemingly endless stream of\n>>> libconsensus refactoring PRs, the 10,000 foot view is that there is\n>a\n>>> rather random stream of refactors that proceed in fits and starts\n>>> without apparent plan or end other than a one sentence \"isolate\n>>> consensus state and code\" summary.\n>>>\n>>> I am hoping that\n>>> * There is some plan\n>>> * We will not see a five year stream of random consensus code\n>movement\n>>> patches causing lots of downstream developer headaches.\n>>>\n>>> I read every code change in every pull request that comes into\n>>> github/bitcoin/bitcoin with three exceptions:\n>>> * consensus code movement changes - too big, too chaotic, too\n>>> frequent, too unfocused, laziness guarantees others will inevitably\n>>> ACK it without me.\n>>> * some non-code changes (docs)\n>>> * ignore 80% of the Qt changes\n>>>\n>>> As with any sort of refactoring, they are easy to prove correct,\n>easy\n>>> to reason, and therefore quick and easy to ACK and merge.\n>>>\n>>> Refactors however have a very real negative impact.\n>>> bitcoin/bitcoin.git is not only the source tree in the universe.\n>>> Software engineers at home, at startups, and at major companies are\n>>> maintaining branches of their own.\n>>>\n>>> It is very very easy to fall into a trap where a project is merging\n>>> lots of cosmetic changes and not seeing the downstream ripple\n>effects.\n>>> Several people complained to me at the conference about all the code\n>>> movement changes breaking their own work, causing them to stay on\n>>> older versions of bitcoin due to the effort required to rebase to\n>each\n>>> new release version - and I share those complaints.\n>>>\n>>> Complex code changes with longer development cycles than simple code\n>>> movement patches keep breaking.  It is very frustrating, and causes\n>>> folks to get trapped between a rock and a hard place:\n>>> - Trying to push non-trivial changes upstream is difficult, for\n>normal\n>>> and reasonable reasons (big important changes need review etc.).\n>>> - Maintaining non-trivial changes out of tree is also painful, for\n>the\n>>> aforementioned reasons.\n>>>\n>>> Reasonable work languishes in constant-rebase hell, and incentivizes\n>>> against keeping up with the latest tree.\n>>>\n>>>\n>>> Aside from the refactor, libconsensus appears to be engineering in\n>the\n>>> dark.  Where is any sort of plan?  I have low standards - a photo of\n>a\n>>> whiteboard or youtube clip will do.\n>>>\n>>> The general goal is good.   But we must not stray into unfocused\n>>> engineering for a non-existent future library user.\n>>>\n>>> The higher priority must be given to having a source code base that\n>>> maximizes the collective developers' ability to maintain The Router\n>--\n>>> the core bitcoin full node P2P engine.\n>>>\n>>> I recommend time-based bursts of code movement changes.  See below;\n>>> for example, just submit & merge code movement changes on the first\n>>> week of every 2nd month.  Code movement changes are easy to create\n>>> from scratch once a concrete goal is known.  The coding part is\n>>> trivial and takes no time.\n>>>\n>>> As we saw in the Linux kernel - battle lessons hard learned - code\n>>> movement and refactors have often unseen negative impact on\n>downstream\n>>> developers working on more complicated changes that have more\n>positive\n>>> impact to our developers and users.\n>>>\n>>>\n>>> On Bitcoin development release cycles & process\n>>> ------------------------------------------------------------------\n>>>\n>>> As I've outlined in the past, the Linux kernel maintenance phases\n>>> address some of these problems.  The merge window into git master\n>>> opens for 1 week, a very chaotic week full of merging (and\n>rebasing),\n>>> and then the merge window closes.  Several weeks follow as the \"dust\n>>> settles\" -- testing, bug fixing, moving in parallel OOB with\n>>> not-yet-ready development.  Release candidates follow, then the\n>>> release, then the cycle repeats.\n>>>\n>>> IMO a merge window approach fixes some of the issues with\n>refactoring,\n>>> as well as introduces some useful -developer discipline- into the\n>>> development process.  Bitcoin Core still needs rapid iteration --\n>>> another failing of the current project -- and so something of a more\n>>> rapid pace is needed:\n>>> - 1st week of each month, merge changes.  Lots of rebasing during\n>this\n>>> week.\n>>> - remaining days of the month, test, bug fix\n>>> - release at end of month\n>>>\n>>> If changes are not ready for merging, then so be it, they wait until\n>>> next month's release.  Some releases have major features, some\n>>> releases are completely boring and offer little of note.  That is\n>the\n>>> nature of time-based development iteration.  It's like dollar cost\n>>> averaging, a bit.\n>>>\n>>>\n>>> And frankly, I would like to close all github pull requests that are\n>>> not ready to merge That Week.  I'm as guilty of this as any, but\n>that\n>>> stuff just languishes.  Excluding a certain category of\n>obvious-crap,\n>>> pull requests tend to default to a state of either (a) rapid\n>merging,\n>>> (b) months-long issues/projects, (c) limbo.\n>>>\n>>> Under a more time-based approach, a better pull request process\n>would be\n>>> to\n>>> * Only open pull requests if it's a bug fix, or the merge window is\n>>> open and the change is ready to be merged in the developer's\n>opinion.\n>>> * Developers CC bitcoin-dev list to discuss Bitcoin Core-bound\n>projects\n>>> * Developers maintain and publish projects via their own git trees\n>>> * Pull requests should be closed if unmerged after 7 days, unless it\n>>> is an important bug fix etc.\n>>>\n>>> The problem with projects like libconsensus is that they can get\n>>> unfocused and open ended.  Code movement changes in particular are\n>>> cheap to generate.  It is low developer cost for the developer to\n>>> iterate all the way to the end state, see what that looks like, and\n>>> see if people like it.  That end state is not something you would\n>>> merge all in one go.  I would likely stash that tree, and then start\n>>> again, seek the most optimal and least disruptive set of refactors,\n>>> and generate and merge those into bitcoin/bitcoin.git in a\n>time-based,\n>>> paced manner.  Announce the pace ahead of time - \"cosmetic stuff\n>that\n>>> breaks your patches will be merged 1st week of every second month\"\n>>>\n>>> To underscore, the higher priority must be given to having a source\n>>> code base and disciplined development process that maximizes the\n>>> collective developers' ability to maintain The Router that maintains\n>>> most of our network.\n>>>\n>>> Modularity, refactoring, cleaning up grotty code generates a deep\n>>> seated happiness in many engineers.  Field experience however shows\n>>> refactoring is a never ending process which sometimes gets in the\n>way\n>>> of More Important Work.\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n>>\n>\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/428dad3f/attachment-0001.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-15T18:26:50",
                "message_text_only": "On Tue, Sep 15, 2015 at 4:26 PM, Jeff Garzik <jgarzik at gmail.com> wrote:\n\n> The problem comes with the impact of an unfocused stream of refactors to\n> key code.\n>\n> For example, there is much less long term developer impact if refactoring\n> were _accelerated_, scheduled to be performed in a one-week sprint.  There\n> is a lot of breakage, yes, but after that week the average level of\n> downstream patch breakage is significantly lower.  A \"rip the band-aid off\n> quickly rather than slowly\" approach.\n>\n\nMy sentiments exactly...\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/578098d2/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-09-16T22:29:28",
                "message_text_only": "On Tue, Sep 15, 2015 at 12:10:37AM -0400, Jeff Garzik via bitcoin-dev wrote:\n> Refactors however have a very real negative impact.\n> bitcoin/bitcoin.git is not only the source tree in the universe.\n> Software engineers at home, at startups, and at major companies are\n> maintaining branches of their own.\n\nIncidentally, it'd help if we got some insight into why those branches\nare being maintained; what features are in those branches that Bitcoin\nCore doesn't have?\n\nI've run into a number of cases where companies were maintaining forks\nof Bitcoin Core unnecessarily, where a different, loosely coupled,\narchitecture could do what they needed to do without including the new\nlogic in the codebase itself.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000013137b1bd77e352d28fa36309be1c821180eda408bcb745c\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/107d673c/attachment.sig>"
            },
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-09-18T00:07:20",
                "message_text_only": "On Wed, Sep 16, 2015 at 06:29:28PM -0400, Peter Todd via bitcoin-dev wrote:\n\n> I've run into a number of cases where companies were maintaining forks\n> of Bitcoin Core unnecessarily, where a different, loosely coupled,\n> architecture could do what they needed to do without including the new\n> logic in the codebase itself.\n\nThis is the same point I have been making to Jeff privately.\n\nRefactors are a means to an end: a more modular, reusable and maintainable codebase. This goal is that new functionality can be plugged in more easily, and rebase work for e.g. functionality built on top can go down, not up, if it just hooks into well-defined interfaces here and there.\n\nAlthough there has been a lot of progress, bitcoind's design is still too monolithic. To add a more involved feature, like say a new index over the block chain data, code needs to be touched all over the place. This change interacts with all other functionality, potentially breaking the base node functionality - risk for users that do NOT use the functionality. This increases risk and review time.\n\n- *If possible* functionality should be built without changing bitcoind's code at all. An external process should be able to keep up to date with the chain, notice reorgs, and process block data accordingly. If bitcoind's interface does not allow that, or it is too difficult, that is what should be fixed. \n- *if not possible* then a change should at least touch the code in as few places as possible, and integrate with e.g. signal notification.\n\nTo name an example of it done right, IMO: Monero's 'simplewallet'. It is a command-line utility wallet that communicates with the node software, and remembers where it was in the chain, and processes changes to the chain state since its last invocation when it 'refreshes'. \nWhat is nice is that one can run an arbitary number of simplewallets against one node daemon, and unlike bitcoind's wallet it doesn't need to run as always-on daemon itself. It can be invoked when the user wants to do something with the wallet, or see if there are new transactions.\n\nAn index could be implemented entirely externally in a similar way, while still fully handling reorgs.\n\nWhat one needs for that, I think, is a library that communicate with the node, and which offers functionality abstractly be similar to 'git pull': give me the tree path from my current known tip to the best tip, and supply the block hashes (and block data) along the way. \n\nMy long-term vision of bitcoind is a P2P node with validation and blockchain store, with a couple of data sources that can be subscribed to or pulled from.\n\nWladimir"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-18T08:42:53",
                "message_text_only": "You're aware that my entire stack was built around this model and I've even built a fully fledged desktop GUI, multisig account manager, and servers supporting pull and event subscription atop it, right?\n\nOn September 17, 2015 5:07:20 PM PDT, \"Wladimir J. van der Laan via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>On Wed, Sep 16, 2015 at 06:29:28PM -0400, Peter Todd via bitcoin-dev\n>wrote:\n>\n>> I've run into a number of cases where companies were maintaining\n>forks\n>> of Bitcoin Core unnecessarily, where a different, loosely coupled,\n>> architecture could do what they needed to do without including the\n>new\n>> logic in the codebase itself.\n>\n>This is the same point I have been making to Jeff privately.\n>\n>Refactors are a means to an end: a more modular, reusable and\n>maintainable codebase. This goal is that new functionality can be\n>plugged in more easily, and rebase work for e.g. functionality built on\n>top can go down, not up, if it just hooks into well-defined interfaces\n>here and there.\n>\n>Although there has been a lot of progress, bitcoind's design is still\n>too monolithic. To add a more involved feature, like say a new index\n>over the block chain data, code needs to be touched all over the place.\n>This change interacts with all other functionality, potentially\n>breaking the base node functionality - risk for users that do NOT use\n>the functionality. This increases risk and review time.\n>\n>- *If possible* functionality should be built without changing\n>bitcoind's code at all. An external process should be able to keep up\n>to date with the chain, notice reorgs, and process block data\n>accordingly. If bitcoind's interface does not allow that, or it is too\n>difficult, that is what should be fixed. \n>- *if not possible* then a change should at least touch the code in as\n>few places as possible, and integrate with e.g. signal notification.\n>\n>To name an example of it done right, IMO: Monero's 'simplewallet'. It\n>is a command-line utility wallet that communicates with the node\n>software, and remembers where it was in the chain, and processes\n>changes to the chain state since its last invocation when it\n>'refreshes'. \n>What is nice is that one can run an arbitary number of simplewallets\n>against one node daemon, and unlike bitcoind's wallet it doesn't need\n>to run as always-on daemon itself. It can be invoked when the user\n>wants to do something with the wallet, or see if there are new\n>transactions.\n>\n>An index could be implemented entirely externally in a similar way,\n>while still fully handling reorgs.\n>\n>What one needs for that, I think, is a library that communicate with\n>the node, and which offers functionality abstractly be similar to 'git\n>pull': give me the tree path from my current known tip to the best tip,\n>and supply the block hashes (and block data) along the way. \n>\n>My long-term vision of bitcoind is a P2P node with validation and\n>blockchain store, with a couple of data sources that can be subscribed\n>to or pulled from.\n>\n>Wladimir\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/138066de/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-18T16:22:09",
                "message_text_only": ">\n> What one needs for that, I think, is a library that communicate with the\n> node, and which offers functionality abstractly be similar to 'git pull':\n> give me the tree path from my current known tip to the best tip, and supply\n> the block hashes (and block data) along the way.\n>\n\nThis is exactly what SPV libraries like bitcoinj do: they know how to build\na block locator, request the blocks forward from the common branch point,\nand handle re-orgs onto whatever the current best chain are by downloading\ndata from a full node.\n\nIf your official position is people should all use bitcoinj to do things\nlike build extra indexes, then great. Send them our way. It already knows\nhow to calculate a UTXO set indexed by address.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/af7e248f/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-22T18:12:41",
                "message_text_only": "On Tue, Sep 15, 2015 at 6:10 AM, Jeff Garzik via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> [collating a private mail and a github issue comment, moving it to a\n> better forum]\n>\n> On libconsensus\n> ---------------\n> In general there exists the reasonable goal to move consensus state\n> and code to a specific, separate lib.\n>\n> To someone not closely reviewing the seemingly endless stream of\n> libconsensus refactoring PRs, the 10,000 foot view is that there is a\n> rather random stream of refactors that proceed in fits and starts\n> without apparent plan or end other than a one sentence \"isolate\n> consensus state and code\" summary.\n>\n> I am hoping that\n> * There is some plan\n> * We will not see a five year stream of random consensus code movement\n> patches causing lots of downstream developer headaches.\n>\n> I read every code change in every pull request that comes into\n> github/bitcoin/bitcoin with three exceptions:\n> * consensus code movement changes - too big, too chaotic, too\n> frequent, too unfocused, laziness guarantees others will inevitably\n> ACK it without me.\n> * some non-code changes (docs)\n> * ignore 80% of the Qt changes\n>\n> As with any sort of refactoring, they are easy to prove correct, easy\n> to reason, and therefore quick and easy to ACK and merge.\n>\n> Refactors however have a very real negative impact.\n> bitcoin/bitcoin.git is not only the source tree in the universe.\n> Software engineers at home, at startups, and at major companies are\n> maintaining branches of their own.\n>\n> It is very very easy to fall into a trap where a project is merging\n> lots of cosmetic changes and not seeing the downstream ripple effects.\n> Several people complained to me at the conference about all the code\n> movement changes breaking their own work, causing them to stay on\n> older versions of bitcoin due to the effort required to rebase to each\n> new release version - and I share those complaints.\n>\n> Complex code changes with longer development cycles than simple code\n> movement patches keep breaking.  It is very frustrating, and causes\n> folks to get trapped between a rock and a hard place:\n> - Trying to push non-trivial changes upstream is difficult, for normal\n> and reasonable reasons (big important changes need review etc.).\n> - Maintaining non-trivial changes out of tree is also painful, for the\n> aforementioned reasons.\n>\n> Reasonable work languishes in constant-rebase hell, and incentivizes\n> against keeping up with the latest tree.\n>\n>\n> Aside from the refactor, libconsensus appears to be engineering in the\n> dark.  Where is any sort of plan?  I have low standards - a photo of a\n> whiteboard or youtube clip will do.\n\nJust because you don't understand the changes proposed it doesn't mean\nthat they are random.\nI may have done a poor job in communicating \"my plan for libconsensus\"\nbut I have tried many times and in many ways.\n#bitcoin-dev logs show that I have not worked \"in the dark\" at all, on\nthe contrary, I've been very tenacious when asking for review and\nopinions, to the point that several people (at least @laanwj and\n@theuni have complained about their github inboxes being full of\n\"spam\").\nThis is a relatively recent thread where I describe my plan:\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009568.html\nNot my first attempt on this list.\n\nIt is very frustrating that everybody seems to agree that separating\nlibconsensus is a priority to maximize the number of people that can\nsafely contribute to the project, but at the same time, nobody thinks\nthat reviewing the necessary refactors to do so is a priority.\nI tried creating big PRs for people to see \"the big picture\" #5946 but\nthose were too many commits and nobody wanted to read it. Gavin asked\nfor an API.\nSo I tried a smaller step: exposing just VerifyHeader in libconsensus\nand leave VerifyTx and VerifyBlock for later #5995\nAgain, this was \"too big\" and \"a moving target\". In the meantime I\nalways had smaller one-little-step PRs that were part of a longer\nbranch:\n\n** [8/8] MERGED Consensus\n- [X] Consensus: Decouple pow from chainparams #5812 [consensuspow]\n- [X] MOVEONLY: Move constants and globals to consensus.h #5696\n[consensus_policy0]\n- [X] Chainparams: Refactor: Decouple IsSuperMajority from Params()\n#5968 [params_consensus]\n- [X] Remove redundant getter CChainParams::SubsidyHalvingInterval()\n#5996 [params_subsidy]\n- [X] Separate CValidationState from main #5669 [consensus]\n- [X] Consensus: Decouple ContextualCheckBlockHeader from checkpoints\n#5975 [consensus_checkpoints]\n- [X] Separate Consensus::CheckTxInputs and GetSpendHeight in\nCheckInputs #6061 [consensus_inputs]\n- [X] Bugfix: Don't check the genesis block header before accepting it\n#6299 [5975-quick-fix]\n** [5/5] DELETED\n*** DELETED Refactor: Create CCoinsViewEfficient interface for\nCCoinsViewCache #5747 [coins]\n*** DELETED Chainparams: Explicit Consensus::Params arg in consensus\nfunctions #6024 [params_consensus2]\n*** DELETED MOVEONLY: Move most of consensus functions (pre-block)\n#6051 [consensus_moveonly] (depends on consensus-blocksize-0.12.99)\n*** DELETED Consensus: Refactor: Separate CheckFinalTx from\nmain::IsFinalTx #6063 [consensus_finaltx]\n*** DELETED Consensus: Refactor: Turn CBlockIndex::GetMedianTimePast\ninto independent function #6009 [consensus_mediantime]\n*** DELETED Consensus: Adapt declarations of most obviously consensus\nfunctions #6591 [consensus-params-0.12.99]\n*** DELETED Consensus: Move blocksize and related parameters to\nconsensusparams ...without removing consensus/consensus.h [#6526\nalternative] #6625 [consensus-blocksize-0.12.99]\n\nAfter a while I stop rebasing the longer branches and just maintained\na few small consensus-related PRs at a time.\n\nNow I consolidated 3 of them in\n\n*** REVIEW Optimizations: Consensus: In AcceptToMemoryPool,\nConnectBlock, and CreateNewBlock #6445 [consensus-txinputs-0.12.99]\n\nwith the hope that it would be merged relatively fast.\nAfter that it will be much simpler to start talking about potential C\nAPIs for VerifyHeader, VerifyTx and VerifyBlock; as well as separating\nthe library to a subtree.\n\nI'm more than happy to answer any questions anyone may have about any\nof the PRs or commits, until everybody interested is convinced that\nthere's nothing random in the proposed changes.\nI'm also more than happy to get advice on how to better communicate my\nplans and structure my PRs."
            },
            {
                "author": "Dave Scotese",
                "date": "2015-09-22T23:49:11",
                "message_text_only": "If I'm reading this situation correctly, Jeff is basically pointing out\nthat developers need more links (hooks, rungs, handholds, data points,\nwhatever you want to call them) so that they can see all the things his\nemail insinuated are missing (a plan, order, sense, etc.).  He didn't say\nthese things were missing, but that it kind of feels like it from the\n10,000 foot view.\n\nIf you use Google to search the list, as in <<site:lists.linuxfoundation.org\nlibconsensus plan>> you DO NOT get the page Jorge gave.  He wrote that\npage, so he had a good idea what to search for to find it again.  I just\nwant to recommend that when you describe the work you're doing on bitcoin,\nimagine several different ways people might try to find this description in\nthe future and make them work.  In other words, Jorge could have put \"A\nplan for abstracting out libconsensus\" in the email where he wrote \"Here\nare some things that need to happen first...\"\n\nLikewise, if Jeff had searched for <<site:lists.linuxfoundation.org\nlibconsensus plan>> (maybe he did, but he didn't list any results), he may\nhave found enough clues to see Jorge's overall plan.  The \"site:\" keyword\non Google fascinated me when I discovered it, so I let it inspire this\nemail :-)\n\nMaybe someone can explain this if I have it wrong: A few people are able to\npull code into Bitcoin/bitcoin.  Isn't is possible that those few people\ncan agree to merge in a lot of refactor-hell PRs for those making the\nrequests, but postpone them to that one-week-per-month that someone\nsuggested?  The idea of letting that \"hell\" come in (predictable) waves is\nexcellent and I was hoping to see some agreement.  But I don't know who\nthose few are, so even if they all wrote \"Yeah, we'll do that,\" I wouldn't\nrecognize that I got what I wanted.\n\nnotplato\n\nOn Tue, Sep 22, 2015 at 11:12 AM, Jorge Tim\u00f3n <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Tue, Sep 15, 2015 at 6:10 AM, Jeff Garzik via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > [collating a private mail and a github issue comment, moving it to a\n> > better forum]\n> >\n> > On libconsensus\n> > ---------------\n> > In general there exists the reasonable goal to move consensus state\n> > and code to a specific, separate lib.\n> >\n> > To someone not closely reviewing the seemingly endless stream of\n> > libconsensus refactoring PRs, the 10,000 foot view is that there is a\n> > rather random stream of refactors that proceed in fits and starts\n> > without apparent plan or end other than a one sentence \"isolate\n> > consensus state and code\" summary.\n> >\n> > I am hoping that\n> > * There is some plan\n> > * We will not see a five year stream of random consensus code movement\n> > patches causing lots of downstream developer headaches.\n> >\n> > I read every code change in every pull request that comes into\n> > github/bitcoin/bitcoin with three exceptions:\n> > * consensus code movement changes - too big, too chaotic, too\n> > frequent, too unfocused, laziness guarantees others will inevitably\n> > ACK it without me.\n> > * some non-code changes (docs)\n> > * ignore 80% of the Qt changes\n> >\n> > As with any sort of refactoring, they are easy to prove correct, easy\n> > to reason, and therefore quick and easy to ACK and merge.\n> >\n> > Refactors however have a very real negative impact.\n> > bitcoin/bitcoin.git is not only the source tree in the universe.\n> > Software engineers at home, at startups, and at major companies are\n> > maintaining branches of their own.\n> >\n> > It is very very easy to fall into a trap where a project is merging\n> > lots of cosmetic changes and not seeing the downstream ripple effects.\n> > Several people complained to me at the conference about all the code\n> > movement changes breaking their own work, causing them to stay on\n> > older versions of bitcoin due to the effort required to rebase to each\n> > new release version - and I share those complaints.\n> >\n> > Complex code changes with longer development cycles than simple code\n> > movement patches keep breaking.  It is very frustrating, and causes\n> > folks to get trapped between a rock and a hard place:\n> > - Trying to push non-trivial changes upstream is difficult, for normal\n> > and reasonable reasons (big important changes need review etc.).\n> > - Maintaining non-trivial changes out of tree is also painful, for the\n> > aforementioned reasons.\n> >\n> > Reasonable work languishes in constant-rebase hell, and incentivizes\n> > against keeping up with the latest tree.\n> >\n> >\n> > Aside from the refactor, libconsensus appears to be engineering in the\n> > dark.  Where is any sort of plan?  I have low standards - a photo of a\n> > whiteboard or youtube clip will do.\n>\n> Just because you don't understand the changes proposed it doesn't mean\n> that they are random.\n> I may have done a poor job in communicating \"my plan for libconsensus\"\n> but I have tried many times and in many ways.\n> #bitcoin-dev logs show that I have not worked \"in the dark\" at all, on\n> the contrary, I've been very tenacious when asking for review and\n> opinions, to the point that several people (at least @laanwj and\n> @theuni have complained about their github inboxes being full of\n> \"spam\").\n> This is a relatively recent thread where I describe my plan:\n>\n> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009568.html\n> Not my first attempt on this list.\n>\n> It is very frustrating that everybody seems to agree that separating\n> libconsensus is a priority to maximize the number of people that can\n> safely contribute to the project, but at the same time, nobody thinks\n> that reviewing the necessary refactors to do so is a priority.\n> I tried creating big PRs for people to see \"the big picture\" #5946 but\n> those were too many commits and nobody wanted to read it. Gavin asked\n> for an API.\n> So I tried a smaller step: exposing just VerifyHeader in libconsensus\n> and leave VerifyTx and VerifyBlock for later #5995\n> Again, this was \"too big\" and \"a moving target\". In the meantime I\n> always had smaller one-little-step PRs that were part of a longer\n> branch:\n>\n> ** [8/8] MERGED Consensus\n> - [X] Consensus: Decouple pow from chainparams #5812 [consensuspow]\n> - [X] MOVEONLY: Move constants and globals to consensus.h #5696\n> [consensus_policy0]\n> - [X] Chainparams: Refactor: Decouple IsSuperMajority from Params()\n> #5968 [params_consensus]\n> - [X] Remove redundant getter CChainParams::SubsidyHalvingInterval()\n> #5996 [params_subsidy]\n> - [X] Separate CValidationState from main #5669 [consensus]\n> - [X] Consensus: Decouple ContextualCheckBlockHeader from checkpoints\n> #5975 [consensus_checkpoints]\n> - [X] Separate Consensus::CheckTxInputs and GetSpendHeight in\n> CheckInputs #6061 [consensus_inputs]\n> - [X] Bugfix: Don't check the genesis block header before accepting it\n> #6299 [5975-quick-fix]\n> ** [5/5] DELETED\n> *** DELETED Refactor: Create CCoinsViewEfficient interface for\n> CCoinsViewCache #5747 [coins]\n> *** DELETED Chainparams: Explicit Consensus::Params arg in consensus\n> functions #6024 [params_consensus2]\n> *** DELETED MOVEONLY: Move most of consensus functions (pre-block)\n> #6051 [consensus_moveonly] (depends on consensus-blocksize-0.12.99)\n> *** DELETED Consensus: Refactor: Separate CheckFinalTx from\n> main::IsFinalTx #6063 [consensus_finaltx]\n> *** DELETED Consensus: Refactor: Turn CBlockIndex::GetMedianTimePast\n> into independent function #6009 [consensus_mediantime]\n> *** DELETED Consensus: Adapt declarations of most obviously consensus\n> functions #6591 [consensus-params-0.12.99]\n> *** DELETED Consensus: Move blocksize and related parameters to\n> consensusparams ...without removing consensus/consensus.h [#6526\n> alternative] #6625 [consensus-blocksize-0.12.99]\n>\n> After a while I stop rebasing the longer branches and just maintained\n> a few small consensus-related PRs at a time.\n>\n> Now I consolidated 3 of them in\n>\n> *** REVIEW Optimizations: Consensus: In AcceptToMemoryPool,\n> ConnectBlock, and CreateNewBlock #6445 [consensus-txinputs-0.12.99]\n>\n> with the hope that it would be merged relatively fast.\n> After that it will be much simpler to start talking about potential C\n> APIs for VerifyHeader, VerifyTx and VerifyBlock; as well as separating\n> the library to a subtree.\n>\n> I'm more than happy to answer any questions anyone may have about any\n> of the PRs or commits, until everybody interested is convinced that\n> there's nothing random in the proposed changes.\n> I'm also more than happy to get advice on how to better communicate my\n> plans and structure my PRs.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n\n-- \nI like to provide some work at no charge to prove my value. Do you need a\ntechie?\nI own Litmocracy <http://www.litmocracy.com> and Meme Racing\n<http://www.memeracing.net> (in alpha).\nI'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which\nnow accepts Bitcoin.\nI also code for The Dollar Vigilante <http://dollarvigilante.com/>.\n\"He ought to find it more profitable to play by the rules\" - Satoshi\nNakamoto\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150922/53c92cc5/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-23T17:28:06",
                "message_text_only": "On Wed, Sep 23, 2015 at 1:49 AM, Dave Scotese <dscotese at litmocracy.com> wrote:\n> If I'm reading this situation correctly, Jeff is basically pointing out that\n> developers need more links (hooks, rungs, handholds, data points, whatever\n> you want to call them) so that they can see all the things his email\n> insinuated are missing (a plan, order, sense, etc.).  He didn't say these\n> things were missing, but that it kind of feels like it from the 10,000 foot\n> view.\n>\n> If you use Google to search the list, as in <<site:lists.linuxfoundation.org\n> libconsensus plan>> you DO NOT get the page Jorge gave.  He wrote that page,\n> so he had a good idea what to search for to find it again.  I just want to\n> recommend that when you describe the work you're doing on bitcoin, imagine\n> several different ways people might try to find this description in the\n> future and make them work.  In other words, Jorge could have put \"A plan for\n> abstracting out libconsensus\" in the email where he wrote \"Here are some\n> things that need to happen first...\"\n>\n> Likewise, if Jeff had searched for <<site:lists.linuxfoundation.org\n> libconsensus plan>> (maybe he did, but he didn't list any results), he may\n> have found enough clues to see Jorge's overall plan.  The \"site:\" keyword on\n> Google fascinated me when I discovered it, so I let it inspire this email\n> :-)\n\nMy fault: https://github.com/bitcoin/bitcoin/issues/6714\n\n> On Tue, Sep 22, 2015 at 11:12 AM, Jorge Tim\u00f3n\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> On Tue, Sep 15, 2015 at 6:10 AM, Jeff Garzik via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > [collating a private mail and a github issue comment, moving it to a\n>> > better forum]\n>> >\n>> > On libconsensus\n>> > ---------------\n>> > In general there exists the reasonable goal to move consensus state\n>> > and code to a specific, separate lib.\n>> >\n>> > To someone not closely reviewing the seemingly endless stream of\n>> > libconsensus refactoring PRs, the 10,000 foot view is that there is a\n>> > rather random stream of refactors that proceed in fits and starts\n>> > without apparent plan or end other than a one sentence \"isolate\n>> > consensus state and code\" summary.\n>> >\n>> > I am hoping that\n>> > * There is some plan\n>> > * We will not see a five year stream of random consensus code movement\n>> > patches causing lots of downstream developer headaches.\n>> >\n>> > I read every code change in every pull request that comes into\n>> > github/bitcoin/bitcoin with three exceptions:\n>> > * consensus code movement changes - too big, too chaotic, too\n>> > frequent, too unfocused, laziness guarantees others will inevitably\n>> > ACK it without me.\n>> > * some non-code changes (docs)\n>> > * ignore 80% of the Qt changes\n>> >\n>> > As with any sort of refactoring, they are easy to prove correct, easy\n>> > to reason, and therefore quick and easy to ACK and merge.\n>> >\n>> > Refactors however have a very real negative impact.\n>> > bitcoin/bitcoin.git is not only the source tree in the universe.\n>> > Software engineers at home, at startups, and at major companies are\n>> > maintaining branches of their own.\n>> >\n>> > It is very very easy to fall into a trap where a project is merging\n>> > lots of cosmetic changes and not seeing the downstream ripple effects.\n>> > Several people complained to me at the conference about all the code\n>> > movement changes breaking their own work, causing them to stay on\n>> > older versions of bitcoin due to the effort required to rebase to each\n>> > new release version - and I share those complaints.\n>> >\n>> > Complex code changes with longer development cycles than simple code\n>> > movement patches keep breaking.  It is very frustrating, and causes\n>> > folks to get trapped between a rock and a hard place:\n>> > - Trying to push non-trivial changes upstream is difficult, for normal\n>> > and reasonable reasons (big important changes need review etc.).\n>> > - Maintaining non-trivial changes out of tree is also painful, for the\n>> > aforementioned reasons.\n>> >\n>> > Reasonable work languishes in constant-rebase hell, and incentivizes\n>> > against keeping up with the latest tree.\n>> >\n>> >\n>> > Aside from the refactor, libconsensus appears to be engineering in the\n>> > dark.  Where is any sort of plan?  I have low standards - a photo of a\n>> > whiteboard or youtube clip will do.\n>>\n>> Just because you don't understand the changes proposed it doesn't mean\n>> that they are random.\n>> I may have done a poor job in communicating \"my plan for libconsensus\"\n>> but I have tried many times and in many ways.\n>> #bitcoin-dev logs show that I have not worked \"in the dark\" at all, on\n>> the contrary, I've been very tenacious when asking for review and\n>> opinions, to the point that several people (at least @laanwj and\n>> @theuni have complained about their github inboxes being full of\n>> \"spam\").\n>> This is a relatively recent thread where I describe my plan:\n>>\n>> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009568.html\n>> Not my first attempt on this list.\n>>\n>> It is very frustrating that everybody seems to agree that separating\n>> libconsensus is a priority to maximize the number of people that can\n>> safely contribute to the project, but at the same time, nobody thinks\n>> that reviewing the necessary refactors to do so is a priority.\n>> I tried creating big PRs for people to see \"the big picture\" #5946 but\n>> those were too many commits and nobody wanted to read it. Gavin asked\n>> for an API.\n>> So I tried a smaller step: exposing just VerifyHeader in libconsensus\n>> and leave VerifyTx and VerifyBlock for later #5995\n>> Again, this was \"too big\" and \"a moving target\". In the meantime I\n>> always had smaller one-little-step PRs that were part of a longer\n>> branch:\n>>\n>> ** [8/8] MERGED Consensus\n>> - [X] Consensus: Decouple pow from chainparams #5812 [consensuspow]\n>> - [X] MOVEONLY: Move constants and globals to consensus.h #5696\n>> [consensus_policy0]\n>> - [X] Chainparams: Refactor: Decouple IsSuperMajority from Params()\n>> #5968 [params_consensus]\n>> - [X] Remove redundant getter CChainParams::SubsidyHalvingInterval()\n>> #5996 [params_subsidy]\n>> - [X] Separate CValidationState from main #5669 [consensus]\n>> - [X] Consensus: Decouple ContextualCheckBlockHeader from checkpoints\n>> #5975 [consensus_checkpoints]\n>> - [X] Separate Consensus::CheckTxInputs and GetSpendHeight in\n>> CheckInputs #6061 [consensus_inputs]\n>> - [X] Bugfix: Don't check the genesis block header before accepting it\n>> #6299 [5975-quick-fix]\n>> ** [5/5] DELETED\n>> *** DELETED Refactor: Create CCoinsViewEfficient interface for\n>> CCoinsViewCache #5747 [coins]\n>> *** DELETED Chainparams: Explicit Consensus::Params arg in consensus\n>> functions #6024 [params_consensus2]\n>> *** DELETED MOVEONLY: Move most of consensus functions (pre-block)\n>> #6051 [consensus_moveonly] (depends on consensus-blocksize-0.12.99)\n>> *** DELETED Consensus: Refactor: Separate CheckFinalTx from\n>> main::IsFinalTx #6063 [consensus_finaltx]\n>> *** DELETED Consensus: Refactor: Turn CBlockIndex::GetMedianTimePast\n>> into independent function #6009 [consensus_mediantime]\n>> *** DELETED Consensus: Adapt declarations of most obviously consensus\n>> functions #6591 [consensus-params-0.12.99]\n>> *** DELETED Consensus: Move blocksize and related parameters to\n>> consensusparams ...without removing consensus/consensus.h [#6526\n>> alternative] #6625 [consensus-blocksize-0.12.99]\n>>\n>> After a while I stop rebasing the longer branches and just maintained\n>> a few small consensus-related PRs at a time.\n>>\n>> Now I consolidated 3 of them in\n>>\n>> *** REVIEW Optimizations: Consensus: In AcceptToMemoryPool,\n>> ConnectBlock, and CreateNewBlock #6445 [consensus-txinputs-0.12.99]\n>>\n>> with the hope that it would be merged relatively fast.\n>> After that it will be much simpler to start talking about potential C\n>> APIs for VerifyHeader, VerifyTx and VerifyBlock; as well as separating\n>> the library to a subtree.\n>>\n>> I'm more than happy to answer any questions anyone may have about any\n>> of the PRs or commits, until everybody interested is convinced that\n>> there's nothing random in the proposed changes.\n>> I'm also more than happy to get advice on how to better communicate my\n>> plans and structure my PRs.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n>\n> --\n> I like to provide some work at no charge to prove my value. Do you need a\n> techie?\n> I own Litmocracy and Meme Racing (in alpha).\n> I'm the webmaster for The Voluntaryist which now accepts Bitcoin.\n> I also code for The Dollar Vigilante.\n> \"He ought to find it more profitable to play by the rules\" - Satoshi\n> Nakamoto"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-09-29T13:04:09",
                "message_text_only": "There seemed to be some agreement on IRC - after a bit of haranguing by\nmyself :) -- that large refactors should (a) occur over a small window of\ntime and (b) have a written plan beforehand.\n\n\n\nOn Tue, Sep 22, 2015 at 7:49 PM, Dave Scotese <dscotese at litmocracy.com>\nwrote:\n\n> If I'm reading this situation correctly, Jeff is basically pointing out\n> that developers need more links (hooks, rungs, handholds, data points,\n> whatever you want to call them) so that they can see all the things his\n> email insinuated are missing (a plan, order, sense, etc.).  He didn't say\n> these things were missing, but that it kind of feels like it from the\n> 10,000 foot view.\n>\n> If you use Google to search the list, as in <<site:\n> lists.linuxfoundation.org libconsensus plan>> you DO NOT get the page\n> Jorge gave.  He wrote that page, so he had a good idea what to search for\n> to find it again.  I just want to recommend that when you describe the work\n> you're doing on bitcoin, imagine several different ways people might try to\n> find this description in the future and make them work.  In other words,\n> Jorge could have put \"A plan for abstracting out libconsensus\" in the email\n> where he wrote \"Here are some things that need to happen first...\"\n>\n> Likewise, if Jeff had searched for <<site:lists.linuxfoundation.org\n> libconsensus plan>> (maybe he did, but he didn't list any results), he may\n> have found enough clues to see Jorge's overall plan.  The \"site:\" keyword\n> on Google fascinated me when I discovered it, so I let it inspire this\n> email :-)\n>\n> Maybe someone can explain this if I have it wrong: A few people are able\n> to pull code into Bitcoin/bitcoin.  Isn't is possible that those few people\n> can agree to merge in a lot of refactor-hell PRs for those making the\n> requests, but postpone them to that one-week-per-month that someone\n> suggested?  The idea of letting that \"hell\" come in (predictable) waves is\n> excellent and I was hoping to see some agreement.  But I don't know who\n> those few are, so even if they all wrote \"Yeah, we'll do that,\" I wouldn't\n> recognize that I got what I wanted.\n>\n> notplato\n>\n> On Tue, Sep 22, 2015 at 11:12 AM, Jorge Tim\u00f3n <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> On Tue, Sep 15, 2015 at 6:10 AM, Jeff Garzik via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > [collating a private mail and a github issue comment, moving it to a\n>> > better forum]\n>> >\n>> > On libconsensus\n>> > ---------------\n>> > In general there exists the reasonable goal to move consensus state\n>> > and code to a specific, separate lib.\n>> >\n>> > To someone not closely reviewing the seemingly endless stream of\n>> > libconsensus refactoring PRs, the 10,000 foot view is that there is a\n>> > rather random stream of refactors that proceed in fits and starts\n>> > without apparent plan or end other than a one sentence \"isolate\n>> > consensus state and code\" summary.\n>> >\n>> > I am hoping that\n>> > * There is some plan\n>> > * We will not see a five year stream of random consensus code movement\n>> > patches causing lots of downstream developer headaches.\n>> >\n>> > I read every code change in every pull request that comes into\n>> > github/bitcoin/bitcoin with three exceptions:\n>> > * consensus code movement changes - too big, too chaotic, too\n>> > frequent, too unfocused, laziness guarantees others will inevitably\n>> > ACK it without me.\n>> > * some non-code changes (docs)\n>> > * ignore 80% of the Qt changes\n>> >\n>> > As with any sort of refactoring, they are easy to prove correct, easy\n>> > to reason, and therefore quick and easy to ACK and merge.\n>> >\n>> > Refactors however have a very real negative impact.\n>> > bitcoin/bitcoin.git is not only the source tree in the universe.\n>> > Software engineers at home, at startups, and at major companies are\n>> > maintaining branches of their own.\n>> >\n>> > It is very very easy to fall into a trap where a project is merging\n>> > lots of cosmetic changes and not seeing the downstream ripple effects.\n>> > Several people complained to me at the conference about all the code\n>> > movement changes breaking their own work, causing them to stay on\n>> > older versions of bitcoin due to the effort required to rebase to each\n>> > new release version - and I share those complaints.\n>> >\n>> > Complex code changes with longer development cycles than simple code\n>> > movement patches keep breaking.  It is very frustrating, and causes\n>> > folks to get trapped between a rock and a hard place:\n>> > - Trying to push non-trivial changes upstream is difficult, for normal\n>> > and reasonable reasons (big important changes need review etc.).\n>> > - Maintaining non-trivial changes out of tree is also painful, for the\n>> > aforementioned reasons.\n>> >\n>> > Reasonable work languishes in constant-rebase hell, and incentivizes\n>> > against keeping up with the latest tree.\n>> >\n>> >\n>> > Aside from the refactor, libconsensus appears to be engineering in the\n>> > dark.  Where is any sort of plan?  I have low standards - a photo of a\n>> > whiteboard or youtube clip will do.\n>>\n>> Just because you don't understand the changes proposed it doesn't mean\n>> that they are random.\n>> I may have done a poor job in communicating \"my plan for libconsensus\"\n>> but I have tried many times and in many ways.\n>> #bitcoin-dev logs show that I have not worked \"in the dark\" at all, on\n>> the contrary, I've been very tenacious when asking for review and\n>> opinions, to the point that several people (at least @laanwj and\n>> @theuni have complained about their github inboxes being full of\n>> \"spam\").\n>> This is a relatively recent thread where I describe my plan:\n>>\n>> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009568.html\n>> Not my first attempt on this list.\n>>\n>> It is very frustrating that everybody seems to agree that separating\n>> libconsensus is a priority to maximize the number of people that can\n>> safely contribute to the project, but at the same time, nobody thinks\n>> that reviewing the necessary refactors to do so is a priority.\n>> I tried creating big PRs for people to see \"the big picture\" #5946 but\n>> those were too many commits and nobody wanted to read it. Gavin asked\n>> for an API.\n>> So I tried a smaller step: exposing just VerifyHeader in libconsensus\n>> and leave VerifyTx and VerifyBlock for later #5995\n>> Again, this was \"too big\" and \"a moving target\". In the meantime I\n>> always had smaller one-little-step PRs that were part of a longer\n>> branch:\n>>\n>> ** [8/8] MERGED Consensus\n>> - [X] Consensus: Decouple pow from chainparams #5812 [consensuspow]\n>> - [X] MOVEONLY: Move constants and globals to consensus.h #5696\n>> [consensus_policy0]\n>> - [X] Chainparams: Refactor: Decouple IsSuperMajority from Params()\n>> #5968 [params_consensus]\n>> - [X] Remove redundant getter CChainParams::SubsidyHalvingInterval()\n>> #5996 [params_subsidy]\n>> - [X] Separate CValidationState from main #5669 [consensus]\n>> - [X] Consensus: Decouple ContextualCheckBlockHeader from checkpoints\n>> #5975 [consensus_checkpoints]\n>> - [X] Separate Consensus::CheckTxInputs and GetSpendHeight in\n>> CheckInputs #6061 [consensus_inputs]\n>> - [X] Bugfix: Don't check the genesis block header before accepting it\n>> #6299 [5975-quick-fix]\n>> ** [5/5] DELETED\n>> *** DELETED Refactor: Create CCoinsViewEfficient interface for\n>> CCoinsViewCache #5747 [coins]\n>> *** DELETED Chainparams: Explicit Consensus::Params arg in consensus\n>> functions #6024 [params_consensus2]\n>> *** DELETED MOVEONLY: Move most of consensus functions (pre-block)\n>> #6051 [consensus_moveonly] (depends on consensus-blocksize-0.12.99)\n>> *** DELETED Consensus: Refactor: Separate CheckFinalTx from\n>> main::IsFinalTx #6063 [consensus_finaltx]\n>> *** DELETED Consensus: Refactor: Turn CBlockIndex::GetMedianTimePast\n>> into independent function #6009 [consensus_mediantime]\n>> *** DELETED Consensus: Adapt declarations of most obviously consensus\n>> functions #6591 [consensus-params-0.12.99]\n>> *** DELETED Consensus: Move blocksize and related parameters to\n>> consensusparams ...without removing consensus/consensus.h [#6526\n>> alternative] #6625 [consensus-blocksize-0.12.99]\n>>\n>> After a while I stop rebasing the longer branches and just maintained\n>> a few small consensus-related PRs at a time.\n>>\n>> Now I consolidated 3 of them in\n>>\n>> *** REVIEW Optimizations: Consensus: In AcceptToMemoryPool,\n>> ConnectBlock, and CreateNewBlock #6445 [consensus-txinputs-0.12.99]\n>>\n>> with the hope that it would be merged relatively fast.\n>> After that it will be much simpler to start talking about potential C\n>> APIs for VerifyHeader, VerifyTx and VerifyBlock; as well as separating\n>> the library to a subtree.\n>>\n>> I'm more than happy to answer any questions anyone may have about any\n>> of the PRs or commits, until everybody interested is convinced that\n>> there's nothing random in the proposed changes.\n>> I'm also more than happy to get advice on how to better communicate my\n>> plans and structure my PRs.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n>\n> --\n> I like to provide some work at no charge to prove my value. Do you need a\n> techie?\n> I own Litmocracy <http://www.litmocracy.com> and Meme Racing\n> <http://www.memeracing.net> (in alpha).\n> I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com>\n> which now accepts Bitcoin.\n> I also code for The Dollar Vigilante <http://dollarvigilante.com/>.\n> \"He ought to find it more profitable to play by the rules\" - Satoshi\n> Nakamoto\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/5ac4034a/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-23T16:58:16",
                "message_text_only": "On Tue, Sep 22, 2015 at 8:27 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> You need to write a high-level overview document, explaining things like:\n>\n> + Who should use libconsensus\n\nSeparating the consensus code is extremely important for less risky\nand wider contributions regardless of what is exposed.\nBut once a complete libconsensus is exposed, alternative\nimplementations should use it (SPV implementations may not use all of\nit though) and Bitcoin Core should eventually use it through its API\nas well.\n\n> + What functionality it will provide, and what it won't\n\nIt will provide full consensus validation (verification) for the\nfollowing structures:\n\n- Script (done, VerifyScript is already exposed)\n- Block Headers\n- Transactions\n- Blocks (including headers and transactions)\n\nThe user of the library has to manage storage by itself. This library\nwill be stateless (apart from libsecp256k1's context) and won't\nprovide storage.\nThis library won't tell you which is the longest chain, the highest\nlevel function is VerifyBlock() that just tells you whether a block is\nvalid or not.\n\n> + How the API works (is it C++ ? C ? Is it stateless ? How is information\n> sent to/from -- classes ? structs ? serialized data structures ? Are there\n> callbacks ?  How are errors returned ?)\n\nLike the existing libconsensus, a complete libconsensus will have a C API.\nThe concrete API of each function is to be determined. The exact\nconcrete way to expose CCoinsViewCache and CBlockIndex (which are not\nstateless) will require some discussion.\nMy preference is using function pointers combined with structs but\nthere's several possibilities there.\nOnce the code is separated and the rest of the undesired dependencies\nare eliminated, people will be able to propose concrete final APIs\nwith a few commits.\n\n> + What functions are in the API ?\n\nAt the very least:\n\n- VerifyScript\n- VerifyHeader\n- VerifyTx\n- VerifyBlock\n\nTo allow users of the library to intertwine policy or DoS checks with\nthe full verification of a structure (like Bitcoin core does today), I\nwould also expose at least:\n\n- CheckTransaction/Consensus::CheckTx\n- Consensus::CheckTxInputs\n- Consensus::CheckTxInputsScripts (doesn't exist yet in master)\n- CheckBlockHeader\n- ContextualCheckBlockHeader\n- CheckBlock\n- ContextualCheckBlock\n\n> Nobody has time to wade through pull requests to try to figure all that out.\n\nNobody has the time to review a PR with the many commits necessary to\npropose a final independently buildable and complete C API.\nThis is a work in progress and there's more people participating, not just me.\nThere's many possible roads that lead to Rome, but let's not allow\nperfection be the enemy of walking the very first step.\nCan we at least agree on most of the functions that are clearly\nconsensus critical and separate those so it's easy to build them\nseparately from main.cpp ?\nCan we agree on some of the dependencies that are obviously undesired\nand relatively easy to remove?\n\n> On Tue, Sep 22, 2015 at 2:12 PM, Jorge Tim\u00f3n\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> On Tue, Sep 15, 2015 at 6:10 AM, Jeff Garzik via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > [collating a private mail and a github issue comment, moving it to a\n>> > better forum]\n>> >\n>> > On libconsensus\n>> > ---------------\n>> > In general there exists the reasonable goal to move consensus state\n>> > and code to a specific, separate lib.\n>> >\n>> > To someone not closely reviewing the seemingly endless stream of\n>> > libconsensus refactoring PRs, the 10,000 foot view is that there is a\n>> > rather random stream of refactors that proceed in fits and starts\n>> > without apparent plan or end other than a one sentence \"isolate\n>> > consensus state and code\" summary.\n>> >\n>> > I am hoping that\n>> > * There is some plan\n>> > * We will not see a five year stream of random consensus code movement\n>> > patches causing lots of downstream developer headaches.\n>> >\n>> > I read every code change in every pull request that comes into\n>> > github/bitcoin/bitcoin with three exceptions:\n>> > * consensus code movement changes - too big, too chaotic, too\n>> > frequent, too unfocused, laziness guarantees others will inevitably\n>> > ACK it without me.\n>> > * some non-code changes (docs)\n>> > * ignore 80% of the Qt changes\n>> >\n>> > As with any sort of refactoring, they are easy to prove correct, easy\n>> > to reason, and therefore quick and easy to ACK and merge.\n>> >\n>> > Refactors however have a very real negative impact.\n>> > bitcoin/bitcoin.git is not only the source tree in the universe.\n>> > Software engineers at home, at startups, and at major companies are\n>> > maintaining branches of their own.\n>> >\n>> > It is very very easy to fall into a trap where a project is merging\n>> > lots of cosmetic changes and not seeing the downstream ripple effects.\n>> > Several people complained to me at the conference about all the code\n>> > movement changes breaking their own work, causing them to stay on\n>> > older versions of bitcoin due to the effort required to rebase to each\n>> > new release version - and I share those complaints.\n>> >\n>> > Complex code changes with longer development cycles than simple code\n>> > movement patches keep breaking.  It is very frustrating, and causes\n>> > folks to get trapped between a rock and a hard place:\n>> > - Trying to push non-trivial changes upstream is difficult, for normal\n>> > and reasonable reasons (big important changes need review etc.).\n>> > - Maintaining non-trivial changes out of tree is also painful, for the\n>> > aforementioned reasons.\n>> >\n>> > Reasonable work languishes in constant-rebase hell, and incentivizes\n>> > against keeping up with the latest tree.\n>> >\n>> >\n>> > Aside from the refactor, libconsensus appears to be engineering in the\n>> > dark.  Where is any sort of plan?  I have low standards - a photo of a\n>> > whiteboard or youtube clip will do.\n>>\n>> Just because you don't understand the changes proposed it doesn't mean\n>> that they are random.\n>> I may have done a poor job in communicating \"my plan for libconsensus\"\n>> but I have tried many times and in many ways.\n>> #bitcoin-dev logs show that I have not worked \"in the dark\" at all, on\n>> the contrary, I've been very tenacious when asking for review and\n>> opinions, to the point that several people (at least @laanwj and\n>> @theuni have complained about their github inboxes being full of\n>> \"spam\").\n>> This is a relatively recent thread where I describe my plan:\n>>\n>> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009568.html\n>> Not my first attempt on this list.\n>>\n>> It is very frustrating that everybody seems to agree that separating\n>> libconsensus is a priority to maximize the number of people that can\n>> safely contribute to the project, but at the same time, nobody thinks\n>> that reviewing the necessary refactors to do so is a priority.\n>> I tried creating big PRs for people to see \"the big picture\" #5946 but\n>> those were too many commits and nobody wanted to read it. Gavin asked\n>> for an API.\n>> So I tried a smaller step: exposing just VerifyHeader in libconsensus\n>> and leave VerifyTx and VerifyBlock for later #5995\n>> Again, this was \"too big\" and \"a moving target\". In the meantime I\n>> always had smaller one-little-step PRs that were part of a longer\n>> branch:\n>>\n>> ** [8/8] MERGED Consensus\n>> - [X] Consensus: Decouple pow from chainparams #5812 [consensuspow]\n>> - [X] MOVEONLY: Move constants and globals to consensus.h #5696\n>> [consensus_policy0]\n>> - [X] Chainparams: Refactor: Decouple IsSuperMajority from Params()\n>> #5968 [params_consensus]\n>> - [X] Remove redundant getter CChainParams::SubsidyHalvingInterval()\n>> #5996 [params_subsidy]\n>> - [X] Separate CValidationState from main #5669 [consensus]\n>> - [X] Consensus: Decouple ContextualCheckBlockHeader from checkpoints\n>> #5975 [consensus_checkpoints]\n>> - [X] Separate Consensus::CheckTxInputs and GetSpendHeight in\n>> CheckInputs #6061 [consensus_inputs]\n>> - [X] Bugfix: Don't check the genesis block header before accepting it\n>> #6299 [5975-quick-fix]\n>> ** [5/5] DELETED\n>> *** DELETED Refactor: Create CCoinsViewEfficient interface for\n>> CCoinsViewCache #5747 [coins]\n>> *** DELETED Chainparams: Explicit Consensus::Params arg in consensus\n>> functions #6024 [params_consensus2]\n>> *** DELETED MOVEONLY: Move most of consensus functions (pre-block)\n>> #6051 [consensus_moveonly] (depends on consensus-blocksize-0.12.99)\n>> *** DELETED Consensus: Refactor: Separate CheckFinalTx from\n>> main::IsFinalTx #6063 [consensus_finaltx]\n>> *** DELETED Consensus: Refactor: Turn CBlockIndex::GetMedianTimePast\n>> into independent function #6009 [consensus_mediantime]\n>> *** DELETED Consensus: Adapt declarations of most obviously consensus\n>> functions #6591 [consensus-params-0.12.99]\n>> *** DELETED Consensus: Move blocksize and related parameters to\n>> consensusparams ...without removing consensus/consensus.h [#6526\n>> alternative] #6625 [consensus-blocksize-0.12.99]\n>>\n>> After a while I stop rebasing the longer branches and just maintained\n>> a few small consensus-related PRs at a time.\n>>\n>> Now I consolidated 3 of them in\n>>\n>> *** REVIEW Optimizations: Consensus: In AcceptToMemoryPool,\n>> ConnectBlock, and CreateNewBlock #6445 [consensus-txinputs-0.12.99]\n>>\n>> with the hope that it would be merged relatively fast.\n>> After that it will be much simpler to start talking about potential C\n>> APIs for VerifyHeader, VerifyTx and VerifyBlock; as well as separating\n>> the library to a subtree.\n>>\n>> I'm more than happy to answer any questions anyone may have about any\n>> of the PRs or commits, until everybody interested is convinced that\n>> there's nothing random in the proposed changes.\n>> I'm also more than happy to get advice on how to better communicate my\n>> plans and structure my PRs.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n>\n> --\n> --\n> Gavin Andresen"
            }
        ],
        "thread_summary": {
            "title": "libconsensus and bitcoin development process",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeff Garzik",
                "Eric Lombrozo",
                "Mike Hearn",
                "Peter Todd",
                "Dave Scotese",
                "Jorge Tim\u00f3n",
                "Btc Drak",
                "Wladimir J. van der Laan"
            ],
            "messages_count": 14,
            "total_messages_chars_count": 100505
        }
    },
    {
        "title": "[bitcoin-dev] Instant exchange rates URI scheme",
        "thread_messages": [
            {
                "author": "John Bailon",
                "date": "2015-09-15T11:10:54",
                "message_text_only": "Hello,\n\nI'd like to propose a BIP for a standard URI scheme to allow wallet\noperators that implement instant exchange or pegging to other currencies,\ncryptocurrencies or asset classes to allow for interoperable communications\nof rates and other pertinent information.\n\nThe idea is to include in the wallet address as parameters information that\nsupplements the presentation of a proposed transaction.\n\nFor example, a wallet operator that instantly exchanges bitcoin to gold\nwould present a wallet address as follows:\nbitcoin:1JohnxNT6jRzhu3H1wgVFbSGKmHP4EUjUV?currency=xau&rate=0.2084&expires=1458432000\n\nWherein:\n<currency> :  the currency, cryptocurrency or asset that the transaction\nwill end up as encoded in ISO 4217 if applicable.\n<rate> : the bitcoin to <currency> rate as dictated by receiving wallet\n<expires> : unix timestamp of when the rate loses validity\n\nThis would allow the sending wallet the ability to present up-to-date\nexchange rates. When, for example, a wallet operator that pegs to the USD\nscans the address above, it would be able to present to the user the\nfollowing information:\n\n1. USD to XAU rate\n2. How much XAU will be received by the address\n3. How long before the rates expires\n\n\nThoughts?\n\n\nRegards,\nJohn\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/d7589516/attachment.html>"
            },
            {
                "author": "Angel Leon",
                "date": "2015-09-15T12:48:35",
                "message_text_only": "might want to specify there that the rate being sent is out of USD.\n\nhttp://twitter.com/gubatron\n\nOn Tue, Sep 15, 2015 at 7:10 AM, John Bailon via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hello,\n>\n> I'd like to propose a BIP for a standard URI scheme to allow wallet\n> operators that implement instant exchange or pegging to other currencies,\n> cryptocurrencies or asset classes to allow for interoperable communications\n> of rates and other pertinent information.\n>\n> The idea is to include in the wallet address as parameters information\n> that supplements the presentation of a proposed transaction.\n>\n> For example, a wallet operator that instantly exchanges bitcoin to gold\n> would present a wallet address as follows:\n>\n> bitcoin:1JohnxNT6jRzhu3H1wgVFbSGKmHP4EUjUV?currency=xau&rate=0.2084&expires=1458432000\n>\n> Wherein:\n> <currency> :  the currency, cryptocurrency or asset that the transaction\n> will end up as encoded in ISO 4217 if applicable.\n> <rate> : the bitcoin to <currency> rate as dictated by receiving wallet\n> <expires> : unix timestamp of when the rate loses validity\n>\n> This would allow the sending wallet the ability to present up-to-date\n> exchange rates. When, for example, a wallet operator that pegs to the USD\n> scans the address above, it would be able to present to the user the\n> following information:\n>\n> 1. USD to XAU rate\n> 2. How much XAU will be received by the address\n> 3. How long before the rates expires\n>\n>\n> Thoughts?\n>\n>\n> Regards,\n> John\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/246bc9b0/attachment.html>"
            },
            {
                "author": "John Bailon",
                "date": "2015-09-15T12:56:27",
                "message_text_only": "Wouldn't need to. The <rate> is of BTC to <currency>. BTC is the intermediary currency, as is basically how it becomes in this \"payment rails\" method.\n\nTo the receiver, it wouldn't matter what currency the transaction came from.\n\nOn Tue, Sep 15, 2015 at 8:48 PM, Angel Leon <gubatron at gmail.com> wrote:\n\n> might want to specify there that the rate being sent is out of USD.\n> http://twitter.com/gubatron\n> On Tue, Sep 15, 2015 at 7:10 AM, John Bailon via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Hello,\n>>\n>> I'd like to propose a BIP for a standard URI scheme to allow wallet\n>> operators that implement instant exchange or pegging to other currencies,\n>> cryptocurrencies or asset classes to allow for interoperable communications\n>> of rates and other pertinent information.\n>>\n>> The idea is to include in the wallet address as parameters information\n>> that supplements the presentation of a proposed transaction.\n>>\n>> For example, a wallet operator that instantly exchanges bitcoin to gold\n>> would present a wallet address as follows:\n>>\n>> bitcoin:1JohnxNT6jRzhu3H1wgVFbSGKmHP4EUjUV?currency=xau&rate=0.2084&expires=1458432000\n>>\n>> Wherein:\n>> <currency> :  the currency, cryptocurrency or asset that the transaction\n>> will end up as encoded in ISO 4217 if applicable.\n>> <rate> : the bitcoin to <currency> rate as dictated by receiving wallet\n>> <expires> : unix timestamp of when the rate loses validity\n>>\n>> This would allow the sending wallet the ability to present up-to-date\n>> exchange rates. When, for example, a wallet operator that pegs to the USD\n>> scans the address above, it would be able to present to the user the\n>> following information:\n>>\n>> 1. USD to XAU rate\n>> 2. How much XAU will be received by the address\n>> 3. How long before the rates expires\n>>\n>>\n>> Thoughts?\n>>\n>>\n>> Regards,\n>> John\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/e632b30d/attachment-0001.html>"
            },
            {
                "author": "Thomas Kerin",
                "date": "2015-09-15T14:40:44",
                "message_text_only": "Something very similar was posted not too long ago.\n\nLong and sort of it is, there is no point in saying you priced in GBP, etc,\nbecause it can vary from exchange to exchange.\n\nTo be honest, adding more things to consider at checkout time confuses\nthings; why not just specify the amount of Bitcoin you wish to be paid?\nOn 15 Sep 2015 11:11 am, \"John Bailon via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hello,\n>\n> I'd like to propose a BIP for a standard URI scheme to allow wallet\n> operators that implement instant exchange or pegging to other currencies,\n> cryptocurrencies or asset classes to allow for interoperable communications\n> of rates and other pertinent information.\n>\n> The idea is to include in the wallet address as parameters information\n> that supplements the presentation of a proposed transaction.\n>\n> For example, a wallet operator that instantly exchanges bitcoin to gold\n> would present a wallet address as follows:\n>\n> bitcoin:1JohnxNT6jRzhu3H1wgVFbSGKmHP4EUjUV?currency=xau&rate=0.2084&expires=1458432000\n>\n> Wherein:\n> <currency> :  the currency, cryptocurrency or asset that the transaction\n> will end up as encoded in ISO 4217 if applicable.\n> <rate> : the bitcoin to <currency> rate as dictated by receiving wallet\n> <expires> : unix timestamp of when the rate loses validity\n>\n> This would allow the sending wallet the ability to present up-to-date\n> exchange rates. When, for example, a wallet operator that pegs to the USD\n> scans the address above, it would be able to present to the user the\n> following information:\n>\n> 1. USD to XAU rate\n> 2. How much XAU will be received by the address\n> 3. How long before the rates expires\n>\n>\n> Thoughts?\n>\n>\n> Regards,\n> John\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/7a45e450/attachment.html>"
            },
            {
                "author": "John Bailon",
                "date": "2015-09-15T15:02:57",
                "message_text_only": "This scheme would mostly be beneficial to end users of instant exchange wallets and would be implemented by the operators. None of the parameters would be filled up by the user by hand. It's more of enabling different wallet operators to communicate with each other and to be able to present to their end users the rates they are getting when sending from their pegged wallet to another pegged wallet. Abstracting bitcoin rates from both end users.\u00a0\n\n\n\n\nTo illustrate, imagine Alice who has a USD wallet wants to send JPY 10,000 to Bob who has a JPY pegged wallet.\u00a0\n\n\n\n\nAlice's wallet scans Bob's wallet which tells Alice's wallet the following info:\n\n1. Bob's BTC address\n\n2. Bob's wallet currency is JPY\n\n3. Bob's wallet operator is pricing BTC 1 at JPY\u00a027,779 for the next 5 minutes.\u00a0\n\n\n\n\n\nWith these info, Alice's wallet can already derive the following:\n\n\n\n\n\nAlice needs to send\u00a00.35998416 BTC to send JPY 10,000. Alice's wallet can also show how much\u00a00.35998416 BTC is in USD, which is USD 83.27. Alice's wallet can present it as follows;\n\n\n\n\n\n\"You are sending JPY 10,000 for USD 83.27 to Bob's wallet.\"\n\nOn Tue, Sep 15, 2015 at 10:40 PM, Thomas Kerin <thomas.kerin at gmail.com>\nwrote:\n\n> Something very similar was posted not too long ago.\n> Long and sort of it is, there is no point in saying you priced in GBP, etc,\n> because it can vary from exchange to exchange.\n> To be honest, adding more things to consider at checkout time confuses\n> things; why not just specify the amount of Bitcoin you wish to be paid?\n> On 15 Sep 2015 11:11 am, \"John Bailon via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Hello,\n>>\n>> I'd like to propose a BIP for a standard URI scheme to allow wallet\n>> operators that implement instant exchange or pegging to other currencies,\n>> cryptocurrencies or asset classes to allow for interoperable communications\n>> of rates and other pertinent information.\n>>\n>> The idea is to include in the wallet address as parameters information\n>> that supplements the presentation of a proposed transaction.\n>>\n>> For example, a wallet operator that instantly exchanges bitcoin to gold\n>> would present a wallet address as follows:\n>>\n>> bitcoin:1JohnxNT6jRzhu3H1wgVFbSGKmHP4EUjUV?currency=xau&rate=0.2084&expires=1458432000\n>>\n>> Wherein:\n>> <currency> :  the currency, cryptocurrency or asset that the transaction\n>> will end up as encoded in ISO 4217 if applicable.\n>> <rate> : the bitcoin to <currency> rate as dictated by receiving wallet\n>> <expires> : unix timestamp of when the rate loses validity\n>>\n>> This would allow the sending wallet the ability to present up-to-date\n>> exchange rates. When, for example, a wallet operator that pegs to the USD\n>> scans the address above, it would be able to present to the user the\n>> following information:\n>>\n>> 1. USD to XAU rate\n>> 2. How much XAU will be received by the address\n>> 3. How long before the rates expires\n>>\n>>\n>> Thoughts?\n>>\n>>\n>> Regards,\n>> John\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150915/cc6163fa/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Instant exchange rates URI scheme",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Thomas Kerin",
                "John Bailon",
                "Angel Leon"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 10995
        }
    },
    {
        "title": "[bitcoin-dev] Proof of unique blockchain storage revised",
        "thread_messages": [
            {
                "author": "Sergio Demian Lerner",
                "date": "2015-09-16T04:37:42",
                "message_text_only": "One possible way to incentivize the existence of more Bitcoin network nodes\nis by paying peers when they provide data in the blokcchain. One of the\nproblems is that it is not easy to tell if the peer is really providing a\nuseful service by storing the blockchain or it is just relying the request\nto some other peers as a proxy.\n\nIn this post I review the use of asymmetric-time functions to be able to\nprove unique (IP-tied) blockchain storage and propose improvements to make\nit fully practical.\n\nFull post here:\nhttps://bitslog.wordpress.com/2015/09/16/proof-of-unique-blockchain-storage-revised/\n\nBest regards, Sergio.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/4d9dfc3c/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Proof of unique blockchain storage revised",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Sergio Demian Lerner"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 805
        }
    },
    {
        "title": "[bitcoin-dev] Scaling Bitcoin conference micro-report",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2015-09-16T21:32:04",
                "message_text_only": "During Scaling Bitcoin, Bitcoin Core committers and notable contributors\ngot together and chatted about where a \"greatest common denominator\" type\nconsensus might be.  The following is a without-attribution (Chatham House)\nsummary.  This is my own personal summary of the chat; any errors are my\nown; this is _not_ a consensus statement or anything formal.\n\n- Background (pre-conference, was on public IRC): \"net-utxo\", calculating\ntransaction size within block by applying a delta to transaction size based\non the amount of data added, or removed, from the UTXO set.  Fee is then\nevaluated after the delta is applied.  This aligns user incentives with\nUTXO resource usage/cost.  Original idea by gmaxwell (and others??).\n\n- Many interested or at least willing to accept a \"short term bump\", a hard\nfork to modify block size limit regime to be cost-based via \"net-utxo\"\nrather than a simple static hard limit.  2-4-8 and 17%/year were debated\nand seemed \"in range\" with what might work as a short term bump - net after\napplying the new cost metric.\n\n- Hard fork method:  Leaning towards \"if (timestamp > X)\" flag day hard\nfork Y months in the future.  Set high bit in version, resulting in a\nnegative number, to more cleanly fork away.  \"miner advisement\" - miners,\nas they've done recently, signal non-binding (Bitcoin Core does not examine\nthe value) engineering readiness for a hard fork via coinbase moniker.\nSome fork cancellation method is useful, if unsuccessful after Z time\nelapses.\n\n- As discussed publicly elsewhere, other forks may be signaled via setting\na bit in version, and then triggering a fork'ing change once a threshold is\nreached.\n\nChat participants are invited to reply to this message with their own\ncorrections and comments and summary in their view.\n\nFor the wider community, take this as one of many \"inputs\" described at\nScaling Bitcoin.  Over the next few months developers and the community\nshould evaluate everything discussed and work towards some concrete\nproposal(s) that are implemented, tested and simulated in December in Hong\nKong.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/b53805a1/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2015-09-16T21:51:57",
                "message_text_only": "I only have one \"correction\", included inline.\n\nOn 09/16/15 21:32, Jeff Garzik via bitcoin-dev wrote:\n> \n> During Scaling Bitcoin, Bitcoin Core committers and notable contributors\n> got together and chatted about where a \"greatest common denominator\"\n> type consensus might be.  The following is a without-attribution\n> (Chatham House) summary.  This is my own personal summary of the chat;\n> any errors are my own; this is _not_ a consensus statement or anything\n> formal.\n> \n> - Background (pre-conference, was on public IRC): \"net-utxo\",\n> calculating transaction size within block by applying a delta to\n> transaction size based on the amount of data added, or removed, from the\n> UTXO set.  Fee is then evaluated after the delta is applied.  This\n> aligns user incentives with UTXO resource usage/cost.  Original idea by\n> gmaxwell (and others??).\n> \n> - Many interested or at least willing to accept a \"short term bump\", a\n> hard fork to modify block size limit regime to be cost-based via\n> \"net-utxo\" rather than a simple static hard limit.  2-4-8 and 17%/year\n> were debated and seemed \"in range\" with what might work as a short term\n> bump - net after applying the new cost metric.\n\nI would be careful to point out that hard numbers were deliberately NOT\ndiscussed. Though some general things were thrown out, they were not\nextensively discussed nor agreed to. I personally think 2-4 is \"in\nrange\", though 8 maybe not so much. Of course it depends on exactly how\nthe non-blocksize limit accounting/adjusting is done.\n\nStill, the \"greatest common denominator\" agreement did not seem to be\nagreeing to an increase which continues over time, but which instead\nlimits itself to a set, smooth increase for X time and then requires a\nsecond hardfork if there is agreement on a need for more blocksize at\nthat point.\n\n\n> - Hard fork method:  Leaning towards \"if (timestamp > X)\" flag day hard\n> fork Y months in the future.  Set high bit in version, resulting in a\n> negative number, to more cleanly fork away.  \"miner advisement\" -\n> miners, as they've done recently, signal non-binding (Bitcoin Core does\n> not examine the value) engineering readiness for a hard fork via\n> coinbase moniker.  Some fork cancellation method is useful, if\n> unsuccessful after Z time elapses.\n> \n> - As discussed publicly elsewhere, other forks may be signaled via\n> setting a bit in version, and then triggering a fork'ing change once a\n> threshold is reached.\n> \n> Chat participants are invited to reply to this message with their own\n> corrections and comments and summary in their view.\n> \n> For the wider community, take this as one of many \"inputs\" described at\n> Scaling Bitcoin.  Over the next few months developers and the community\n> should evaluate everything discussed and work towards some concrete\n> proposal(s) that are implemented, tested and simulated in December in\n> Hong Kong."
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-09-18T05:55:55",
                "message_text_only": "Correction of a correction, in-line:\n\nOn Wed, Sep 16, 2015 at 5:51 PM, Matt Corallo via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> > - Many interested or at least willing to accept a \"short term bump\", a\n> > hard fork to modify block size limit regime to be cost-based via\n> > \"net-utxo\" rather than a simple static hard limit.  2-4-8 and 17%/year\n> > were debated and seemed \"in range\" with what might work as a short term\n> > bump - net after applying the new cost metric.\n>\n> I would be careful to point out that hard numbers were deliberately NOT\n> discussed. Though some general things were thrown out, they were not\n> extensively discussed nor agreed to. I personally think 2-4 is \"in\n> range\", though 8 maybe not so much. Of course it depends on exactly how\n> the non-blocksize limit accounting/adjusting is done.\n>\n> Still, the \"greatest common denominator\" agreement did not seem to be\n> agreeing to an increase which continues over time, but which instead\n> limits itself to a set, smooth increase for X time and then requires a\n> second hardfork if there is agreement on a need for more blocksize at\n> that point.\n>\n\nPerhaps it is accurate to say that there wasn't consensus at all except\nthat (1) we think we can work together on resolving this impasse (yay!),\nand (2) it is conceivable that changing from block size to some other\nmetric might provide the basis for a compromise on near-term numbers.\n\nAs an example, I do not think the net-UTXO metric provides any benefit with\nrespect to scalability, and in some ways makes the situation worse (even\nthough it helpfully solves an unrelated problem of spammy dust outputs).\nBut there are other possible metrics and I maintain hope that data will\nshow the benefit of another metric or other metrics combined with net-UTXO\nin a way that will allow us to reach consensus.\n\nAs a further example, I also am quite concerned about 2-4-8MB with either\nblock size or net-UTXO as the base metric. As you say, it depends on how\nthe non-blocksize limit accounting/adjusting is done... But if a metric\nwere chosen that addressed my concerns (worst case propagation and\nvalidation time), then I could be in favor of an initial bump that allowed\na larger number of typical transactions in a block.\n\nBut where I really need to disagree is on the requirement for a 2nd hard\nfork. I will go on record as being definitively against this. While being\nconservative with respect to exponentials, I would very much like to make\nsure that there is a long-term growth curve as part of any proposal. I am\nwilling to accept a hard-fork if the adopted plan is too conservative, but\nI do not want to be kicking the can down the road to a scheduled 2nd hard\nfork that absolutely must occur. That, I feel, could be a more dangerous\noutcome than an exponential that outlasts conservative historical trends.\n\nI commend Jeff for writing a Chatham-rules summary of the outcome of some\nhallway conversations that occurred. On the whole I think his summary does\nrepresent the majority view of the opinions expressed by core developers at\nthe workshop. I will caution though that on nearly every issue there were\nthose expressed disagreement but did not fight the issue, and those who\nsaid nothing and left unpolled opinions. Nevertheless this summary is\ninformative as it feeds forwards into the design of proposals that will be\nmade prior to the Hong Kong workshop in December, in order that they have a\nhigher likelihood of success.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/ddd28331/attachment.html>"
            },
            {
                "author": "Dave Scotese",
                "date": "2015-09-18T17:10:08",
                "message_text_only": "\"But if a metric were chosen that addressed my concerns (worst case\npropagation and validation time), then I could be in favor of an initial\nbump that allowed a larger number of typical transactions in a block.\"\n\n+1.  A ratio is much more valuable than a simple metric.  It seems clearly\ndifficult to identify a reasonable limit to block size, but the ratio\nbetween any one of several possible metrics and bytes in a block would work\nwell and may already have a very good reasonable expected range.\n\nI like BTCDaysDestroyed (BTCDD) best.  If it might be time consuming to\ncompute, then it need only be computed for all blocks less than or equal in\nsize to the average size of the largest 200 or so blocks in the previous\ndifficulty period.  To exceed that limit, a miner would have to ensure that\nthe block has enough BTCDD per byte.  \"Enough\" could be hardcoded in each\nrelease, or if it's simple enough, use the ratio as computed over all the\nblocks in the previous difficulty period as the lower limit.\n\nnotplato\n\nOn Thu, Sep 17, 2015 at 10:55 PM, Mark Friedenbach via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Correction of a correction, in-line:\n>\n> On Wed, Sep 16, 2015 at 5:51 PM, Matt Corallo via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> > - Many interested or at least willing to accept a \"short term bump\", a\n>> > hard fork to modify block size limit regime to be cost-based via\n>> > \"net-utxo\" rather than a simple static hard limit.  2-4-8 and 17%/year\n>> > were debated and seemed \"in range\" with what might work as a short term\n>> > bump - net after applying the new cost metric.\n>>\n>> I would be careful to point out that hard numbers were deliberately NOT\n>> discussed. Though some general things were thrown out, they were not\n>> extensively discussed nor agreed to. I personally think 2-4 is \"in\n>> range\", though 8 maybe not so much. Of course it depends on exactly how\n>> the non-blocksize limit accounting/adjusting is done.\n>>\n>> Still, the \"greatest common denominator\" agreement did not seem to be\n>> agreeing to an increase which continues over time, but which instead\n>> limits itself to a set, smooth increase for X time and then requires a\n>> second hardfork if there is agreement on a need for more blocksize at\n>> that point.\n>>\n>\n> Perhaps it is accurate to say that there wasn't consensus at all except\n> that (1) we think we can work together on resolving this impasse (yay!),\n> and (2) it is conceivable that changing from block size to some other\n> metric might provide the basis for a compromise on near-term numbers.\n>\n> As an example, I do not think the net-UTXO metric provides any benefit\n> with respect to scalability, and in some ways makes the situation worse\n> (even though it helpfully solves an unrelated problem of spammy dust\n> outputs). But there are other possible metrics and I maintain hope that\n> data will show the benefit of another metric or other metrics combined with\n> net-UTXO in a way that will allow us to reach consensus.\n>\n> As a further example, I also am quite concerned about 2-4-8MB with either\n> block size or net-UTXO as the base metric. As you say, it depends on how\n> the non-blocksize limit accounting/adjusting is done... But if a metric\n> were chosen that addressed my concerns (worst case propagation and\n> validation time), then I could be in favor of an initial bump that allowed\n> a larger number of typical transactions in a block.\n>\n> But where I really need to disagree is on the requirement for a 2nd hard\n> fork. I will go on record as being definitively against this. While being\n> conservative with respect to exponentials, I would very much like to make\n> sure that there is a long-term growth curve as part of any proposal. I am\n> willing to accept a hard-fork if the adopted plan is too conservative, but\n> I do not want to be kicking the can down the road to a scheduled 2nd hard\n> fork that absolutely must occur. That, I feel, could be a more dangerous\n> outcome than an exponential that outlasts conservative historical trends.\n>\n> I commend Jeff for writing a Chatham-rules summary of the outcome of some\n> hallway conversations that occurred. On the whole I think his summary does\n> represent the majority view of the opinions expressed by core developers at\n> the workshop. I will caution though that on nearly every issue there were\n> those expressed disagreement but did not fight the issue, and those who\n> said nothing and left unpolled opinions. Nevertheless this summary is\n> informative as it feeds forwards into the design of proposals that will be\n> made prior to the Hong Kong workshop in December, in order that they have a\n> higher likelihood of success.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n\n\n-- \nI like to provide some work at no charge to prove my value. Do you need a\ntechie?\nI own Litmocracy <http://www.litmocracy.com> and Meme Racing\n<http://www.memeracing.net> (in alpha).\nI'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which\nnow accepts Bitcoin.\nI also code for The Dollar Vigilante <http://dollarvigilante.com/>.\n\"He ought to find it more profitable to play by the rules\" - Satoshi\nNakamoto\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/5700f8e2/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-18T17:28:08",
                "message_text_only": "To be quite frank, I'm a little disappointed we've fallen back on arguing over numbers pulled out of a hat rather than discussing far more fundamental issues such as the dev process generally, consensus building, and our basic understanding of what Bitcoin really is, its strengths and weaknesses, where it shows most promise, and communicating a more unified vision to the industry and the public.\n\nOn September 18, 2015 10:10:08 AM PDT, Dave Scotese via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\"But if a metric were chosen that addressed my concerns (worst case\n>propagation and validation time), then I could be in favor of an\n>initial\n>bump that allowed a larger number of typical transactions in a block.\"\n>\n>+1.  A ratio is much more valuable than a simple metric.  It seems\n>clearly\n>difficult to identify a reasonable limit to block size, but the ratio\n>between any one of several possible metrics and bytes in a block would\n>work\n>well and may already have a very good reasonable expected range.\n>\n>I like BTCDaysDestroyed (BTCDD) best.  If it might be time consuming to\n>compute, then it need only be computed for all blocks less than or\n>equal in\n>size to the average size of the largest 200 or so blocks in the\n>previous\n>difficulty period.  To exceed that limit, a miner would have to ensure\n>that\n>the block has enough BTCDD per byte.  \"Enough\" could be hardcoded in\n>each\n>release, or if it's simple enough, use the ratio as computed over all\n>the\n>blocks in the previous difficulty period as the lower limit.\n>\n>notplato\n>\n>On Thu, Sep 17, 2015 at 10:55 PM, Mark Friedenbach via bitcoin-dev <\n>bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Correction of a correction, in-line:\n>>\n>> On Wed, Sep 16, 2015 at 5:51 PM, Matt Corallo via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> > - Many interested or at least willing to accept a \"short term\n>bump\", a\n>>> > hard fork to modify block size limit regime to be cost-based via\n>>> > \"net-utxo\" rather than a simple static hard limit.  2-4-8 and\n>17%/year\n>>> > were debated and seemed \"in range\" with what might work as a short\n>term\n>>> > bump - net after applying the new cost metric.\n>>>\n>>> I would be careful to point out that hard numbers were deliberately\n>NOT\n>>> discussed. Though some general things were thrown out, they were not\n>>> extensively discussed nor agreed to. I personally think 2-4 is \"in\n>>> range\", though 8 maybe not so much. Of course it depends on exactly\n>how\n>>> the non-blocksize limit accounting/adjusting is done.\n>>>\n>>> Still, the \"greatest common denominator\" agreement did not seem to\n>be\n>>> agreeing to an increase which continues over time, but which instead\n>>> limits itself to a set, smooth increase for X time and then requires\n>a\n>>> second hardfork if there is agreement on a need for more blocksize\n>at\n>>> that point.\n>>>\n>>\n>> Perhaps it is accurate to say that there wasn't consensus at all\n>except\n>> that (1) we think we can work together on resolving this impasse\n>(yay!),\n>> and (2) it is conceivable that changing from block size to some other\n>> metric might provide the basis for a compromise on near-term numbers.\n>>\n>> As an example, I do not think the net-UTXO metric provides any\n>benefit\n>> with respect to scalability, and in some ways makes the situation\n>worse\n>> (even though it helpfully solves an unrelated problem of spammy dust\n>> outputs). But there are other possible metrics and I maintain hope\n>that\n>> data will show the benefit of another metric or other metrics\n>combined with\n>> net-UTXO in a way that will allow us to reach consensus.\n>>\n>> As a further example, I also am quite concerned about 2-4-8MB with\n>either\n>> block size or net-UTXO as the base metric. As you say, it depends on\n>how\n>> the non-blocksize limit accounting/adjusting is done... But if a\n>metric\n>> were chosen that addressed my concerns (worst case propagation and\n>> validation time), then I could be in favor of an initial bump that\n>allowed\n>> a larger number of typical transactions in a block.\n>>\n>> But where I really need to disagree is on the requirement for a 2nd\n>hard\n>> fork. I will go on record as being definitively against this. While\n>being\n>> conservative with respect to exponentials, I would very much like to\n>make\n>> sure that there is a long-term growth curve as part of any proposal.\n>I am\n>> willing to accept a hard-fork if the adopted plan is too\n>conservative, but\n>> I do not want to be kicking the can down the road to a scheduled 2nd\n>hard\n>> fork that absolutely must occur. That, I feel, could be a more\n>dangerous\n>> outcome than an exponential that outlasts conservative historical\n>trends.\n>>\n>> I commend Jeff for writing a Chatham-rules summary of the outcome of\n>some\n>> hallway conversations that occurred. On the whole I think his summary\n>does\n>> represent the majority view of the opinions expressed by core\n>developers at\n>> the workshop. I will caution though that on nearly every issue there\n>were\n>> those expressed disagreement but did not fight the issue, and those\n>who\n>> said nothing and left unpolled opinions. Nevertheless this summary is\n>> informative as it feeds forwards into the design of proposals that\n>will be\n>> made prior to the Hong Kong workshop in December, in order that they\n>have a\n>> higher likelihood of success.\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n>\n>-- \n>I like to provide some work at no charge to prove my value. Do you need\n>a\n>techie?\n>I own Litmocracy <http://www.litmocracy.com> and Meme Racing\n><http://www.memeracing.net> (in alpha).\n>I'm the webmaster for The Voluntaryist <http://www.voluntaryist.com>\n>which\n>now accepts Bitcoin.\n>I also code for The Dollar Vigilante <http://dollarvigilante.com/>.\n>\"He ought to find it more profitable to play by the rules\" - Satoshi\n>Nakamoto\n>\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/e1bb9ba2/attachment-0001.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2015-09-18T20:06:23",
                "message_text_only": "I did not intend to imply that there was agreement on a desire to\nschedule a second hardfork. My wording may have been a bit too loose.\nInstead, I believe there was much agreement that doing a short-term\nhardfork now, with many agreeing that a second would hopefully be\nentirely unnecessary/impossible, while others thought that a second\nwould be necessary and would have to happen. While this may set up a\nsimilar controversy again in several years, I think everyone agreed that\nwe cannot predict the future and I, personally, think none of us should\nbe committing to a viewpoint for what should be done at that time.\n\nPersonally, I think it is also critical that there be no messaging that\npeople should rely on or assume there will be a future increase after a\nshort-term bump (which I also do not believe people should be relying on\nnow).\n\nMatt\n\nOn 09/18/15 05:55, Mark Friedenbach wrote:\n> Correction of a correction, in-line:\n> \n> On Wed, Sep 16, 2015 at 5:51 PM, Matt Corallo via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n>     > - Many interested or at least willing to accept a \"short term bump\", a\n>     > hard fork to modify block size limit regime to be cost-based via\n>     > \"net-utxo\" rather than a simple static hard limit.  2-4-8 and 17%/year\n>     > were debated and seemed \"in range\" with what might work as a short term\n>     > bump - net after applying the new cost metric.\n> \n>     I would be careful to point out that hard numbers were deliberately NOT\n>     discussed. Though some general things were thrown out, they were not\n>     extensively discussed nor agreed to. I personally think 2-4 is \"in\n>     range\", though 8 maybe not so much. Of course it depends on exactly how\n>     the non-blocksize limit accounting/adjusting is done.\n> \n>     Still, the \"greatest common denominator\" agreement did not seem to be\n>     agreeing to an increase which continues over time, but which instead\n>     limits itself to a set, smooth increase for X time and then requires a\n>     second hardfork if there is agreement on a need for more blocksize at\n>     that point.\n> \n> \n> Perhaps it is accurate to say that there wasn't consensus at all except\n> that (1) we think we can work together on resolving this impasse (yay!),\n> and (2) it is conceivable that changing from block size to some other\n> metric might provide the basis for a compromise on near-term numbers.\n> \n> As an example, I do not think the net-UTXO metric provides any benefit\n> with respect to scalability, and in some ways makes the situation worse\n> (even though it helpfully solves an unrelated problem of spammy dust\n> outputs). But there are other possible metrics and I maintain hope that\n> data will show the benefit of another metric or other metrics combined\n> with net-UTXO in a way that will allow us to reach consensus.\n> \n> As a further example, I also am quite concerned about 2-4-8MB with\n> either block size or net-UTXO as the base metric. As you say, it depends\n> on how the non-blocksize limit accounting/adjusting is done... But if a\n> metric were chosen that addressed my concerns (worst case propagation\n> and validation time), then I could be in favor of an initial bump that\n> allowed a larger number of typical transactions in a block.\n> \n> But where I really need to disagree is on the requirement for a 2nd hard\n> fork. I will go on record as being definitively against this. While\n> being conservative with respect to exponentials, I would very much like\n> to make sure that there is a long-term growth curve as part of any\n> proposal. I am willing to accept a hard-fork if the adopted plan is too\n> conservative, but I do not want to be kicking the can down the road to a\n> scheduled 2nd hard fork that absolutely must occur. That, I feel, could\n> be a more dangerous outcome than an exponential that outlasts\n> conservative historical trends.\n> \n> I commend Jeff for writing a Chatham-rules summary of the outcome of\n> some hallway conversations that occurred. On the whole I think his\n> summary does represent the majority view of the opinions expressed by\n> core developers at the workshop. I will caution though that on nearly\n> every issue there were those expressed disagreement but did not fight\n> the issue, and those who said nothing and left unpolled opinions.\n> Nevertheless this summary is informative as it feeds forwards into the\n> design of proposals that will be made prior to the Hong Kong workshop in\n> December, in order that they have a higher likelihood of success."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-18T22:33:33",
                "message_text_only": "Any change that results in this happening all over again in a few years\ndoes not have consensus.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/04e0e9b6/attachment.html>"
            },
            {
                "author": "cipher anthem",
                "date": "2015-09-19T16:03:44",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/16da38ec/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-19T20:43:32",
                "message_text_only": ">\n> Let me get this straight. You start this whole debate with a \"kick the can\n> down the road\" proposal to increase the block size to 20MB, which obviously\n> would require another hard fork in the future, but if someone else proposes\n> a similar \"kicka the can\" proposal you will outright reject it?\n>\n\nWhich part of \"in the next few years\" was unclear?\n\nThis seems to be a persistent problem in the block size debates: the\nassumption that there are only two numbers, zero and infinity.\n\nBIP101 tops out at 8 gigabyte blocks, which would represent extremely high\ntransaction rates compared to today. *If* Bitcoin ever became so popular,\nit would be a long way in the future, and many things could have happened:\n\n   1. Bitcoin may have become as irrelevant as the Commodore 64 is.\n   2. We may have invented upgrades that make Bitcoin 100x more efficient\n   than today.\n   3. Hardware may have improved so much that it no longer matters.\n   4. The world may have been devastated by nuclear war and nobody gives a\n   shit about internet currencies anymore, because there is no internet.\n\nIt's silly to ignore the time dimension in these decisions. Bitcoin will\nnot last forever: even if it becomes very successful it will one day it\nwill be replaced by something better, so it does not have to handle\ninfinite usage.\n\nBut hey, as you bring it up, I'd have been happy with no upper limit at\nall. There's nothing magic about 8 gigabytes. I go along with BIP 101\nbecause it is still the only proposal that is both reasonable and\nimplemented, and I'm willing to compromise.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/ecf4ffe4/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-09-19T01:47:10",
                "message_text_only": "On Fri, Sep 18, 2015 at 08:06:23PM +0000, Matt Corallo via bitcoin-dev wrote:\n> I did not intend to imply that there was agreement on a desire to\n> schedule a second hardfork. My wording may have been a bit too loose.\n> Instead, I believe there was much agreement that doing a short-term\n> hardfork now, with many agreeing that a second would hopefully be\n> entirely unnecessary/impossible, while others thought that a second\n> would be necessary and would have to happen. While this may set up a\n> similar controversy again in several years, I think everyone agreed that\n> we cannot predict the future and I, personally, think none of us should\n> be committing to a viewpoint for what should be done at that time.\n> \n> Personally, I think it is also critical that there be no messaging that\n> people should rely on or assume there will be a future increase after a\n> short-term bump (which I also do not believe people should be relying on\n> now).\n\nAgreed!\n\nWe still seem to be in a possition where there is fundemental\ndisagreements about the threat model we should design for, and\nultimately, what we want Bitcoin to be. For instance, yesterday I was on\na blocksize panel, and Valery Vavilov - CEO of the ASIC manufacturer and\nminer BitFury - stated that he thought we needed to setup a system of\nlarge, high-bandwidth, high-powered, Bitcoin nodes at institutions such\nas universities and large companies to allow the Bitcoin blocksize to be\nraised multiple orders of magnitude. (e.g. hundreds of megabytes, or\neven multiple gigabytes) In discussion with him he seemed to expect that\nwe'd have just a few hundred Bitcoin nodes at most, with SPV being the\nstandard way of using Bitcoin.\n\nWhile to many of us that sounds crazy, if you're threat model assumes\nBitcoin is a legal/regulated service provided by a highly trusted mining\ncommunity it's a reasonable design. Mike Hearn recently posted his\nthreat model, which specifically argues we should assume governments are\nnot a threat. (and Hearn has previously argued that the design of\nBitcoin assumes a majority of miners are \"honest\" rather than merely\neconomically rational) Similarly Gavin Andresen was also on that panel,\nand stated that he believes the idea that Bitcoin has O(n^2) scaling is\nwrong, implying he doesn't think a large % of the Bitcoin user base will\ncontinue to run fully validating nodes. (note that there are other\npossibilities he could be referring to here, although again with\ndifferent security assumptions and/or unproven tech)\n\nThe main objection I raised during the committer/contributor discussions\nto the idea of a \"short term bump\" was messaging. I think it's fair to\nsay that nearly all the support for a small blocksize increase stemmed\nfrom the (perceived) need to give Bitcoin users and Bitcoin\ninfrastructure some more time to adapt to a world where the blocksize\ndoes not grow sufficiently to meet demand, resulting in higher\ntransaction fees and the practical requirement to use the Bitcoin\nblockchain more efficiently. (or of course the development of genuinely\nscalable blockchain technology) With that in mind, it's important that\nwe properly communicate that fact, or as Hearn replied, we'll run into\nthe same problem all over again in a few years, but with even less\nsafety margin in the system.\n\nMy second objection was one of science. Any bump should be accompanied\nby some kind of model describing scientifically what we were trying to\nachieve and where the numbers chosen came from. For instance, Pieter\nWuille's BIP103 proposes 17% per year based on a bandwidth growth model,\nthe assumption that bandwidth is the bottleneck we're trying to keep\nconstant, and the design criteria to keep centralization roughly\nconstant. (all else being equal) Sure there's lots of potential flaws in\nthat proposal, but the _message_ that we're basing it on science rather\nthan political \"horse-trading\" is very important.\n\nAs for the disagreements, it's quite likely that we can't come to\ngenuine consensus in the fact of those fundemental disagreements about\nwhat Bitcoin should be. I don't have any good way to resolve that, and\nI'm open to suggestions!\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000000da942d1651d405c157821a3fa55bd0c11cd9b39321e574\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/d4413b8f/attachment-0001.sig>"
            },
            {
                "author": "NxtChg",
                "date": "2015-09-19T06:06:39",
                "message_text_only": ">While to many of us that sounds crazy, if you're threat model assumes\n>Bitcoin is a legal/regulated service provided by a highly trusted mining\n>community it's a reasonable design.\n\nThere is a large, grey area all the way to \"legal/regulated service provided by a highly trusted mining community\".\n\nPainting the worst looking picture is either a defect in thinking or intentional FUD.\n\n\n> Mike Hearn recently posted his threat model, which specifically argues we\n> should assume governments are not a threat.\n\nThere are two ways to fight governments:\n\n1. either you become too big to close, so political repercussions become unacceptable\n\n2. or you become too tiny to hunt, in which case you are much better off with a specialized alt-coin, designed specifically for that purpose."
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-09-19T06:56:55",
                "message_text_only": "On 09/18/2015 11:06 PM, NxtChg via bitcoin-dev wrote:\n>> While to many of us that sounds crazy, if you're threat model assumes\n>> Bitcoin is a legal/regulated service provided by a highly trusted\n>> mining community it's a reasonable design.\n>\n> There is a large, grey area all the way to \"legal/regulated service\n> provided by a highly trusted mining community\". Painting the worst\n> looking picture is either a defect in thinking or intentional FUD.\n\nThe state is the threat in the Bitcoin threat model. You comments below\nacknowledge it. The assumption of hostile state actors is the only\nrational starting point. That which is regulated (and regulatable) in\nBitcoin is the attack surface.\n\nWhile of course there are various degrees of weakness, the reference to\n\"legal/regulated service provided by a highly trusted mining\" as the\nthreat is by no means irrational or misdirecting. This threat represents\nthe difference between Bitcoin and Fedcoin.\n\nI found Mike's threat model downright disturbing. All benefits of\nBitcoin arise from its resistance to this threat. Anyone investor in\nthis space should be paying attention... the apparent benefits of\nBitcoin will vaporize with regulation.\n\n>> Mike Hearn recently posted his threat model, which specifically\n>> argues we should assume governments are not a threat.\n>\n> There are two ways to fight governments:\n>\n> 1. either you become too big to close, so political repercussions\n> become unacceptable\n\nThis is extremely naive. At a minimum, getting popular/successful (and\nregulated) is the formula for regulatory capture.\n\n> 2. or you become too tiny to hunt, in which case you are much better\n> off with a specialized alt-coin, designed specifically for that\n> purpose.\n\nI assume you are referring some marginal and largely irrelevant effort.\n\nFalse dichotomy.\n\n[cross-posted to libbitcoin]\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/ca1214fd/attachment.sig>"
            },
            {
                "author": "NxtChg",
                "date": "2015-09-19T07:27:14",
                "message_text_only": ">The state is the threat in the Bitcoin threat model. You comments below\n>acknowledge it. The assumption of hostile state actors is the only\n>rational starting point. That which is regulated (and regulatable) \n>in Bitcoin is the attack surface.\n\nI think, you just proved my point. If your goal is to shrink the attack surface as much as possible,\nyou are better off being a marginalized alt-coin.\n\n\n>This threat represents the difference between Bitcoin and Fedcoin.\n\n_This_ is the false dichotomy. There's a range of coins between DarkCoin and FedCoin.\n\n\n>This is extremely naive. At a minimum, getting popular/successful (and regulated) is the formula for regulatory capture.\n\nLet me give you an example.\n\nSuppose you are a regular guy, say Peter Todd, and you are faced with 10 policemen in anti-riot gear.\n\nYou can fight them in two ways:\n\n1. become stronger, so you could provide an adequate response, either by turning into Hulk or by getting another 30-50 Peter Todds.\n\n2. lose some fat, learn a few parkour tricks and move around mostly by night behind dumpsters.\n\nThe worst you can fare is just being Peter Todd with a backpack and an expensive camera on his neck, wandering around the city in daylight.\n\n\nYour vision of Bitcoin is the most vulnerable to government attacks."
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-09-19T07:39:14",
                "message_text_only": "On 09/19/2015 12:27 AM, NxtChg wrote:\n>> This is extremely naive. At a minimum, getting popular/successful (and regulated) is the formula for regulatory capture.\n> \n> Let me give you an example.\n> \n> Suppose you are a regular guy, say Peter Todd, and you are faced with 10 policemen in anti-riot gear.\n> \n> You can fight them in two ways:\n> \n> 1. become stronger, so you could provide an adequate response, either by turning into Hulk or by getting another 30-50 Peter Todds.\n\nYour vision of censorship resistance is to become such a strong central\nauthority that you can resist it in direct physical confrontation. If\nyou succeed at this, you are the threat.\n\n> 2. lose some fat, learn a few parkour tricks and move around mostly by night behind dumpsters.\n\nAnd your alternative is to lurk in dark corners.\n\n\nThe inability to see another option is the inability to understand what\nSatoshi created.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/5262f3ce/attachment.sig>"
            },
            {
                "author": "NxtChg",
                "date": "2015-09-19T07:57:58",
                "message_text_only": ">Your vision of censorship resistance is to become such a strong \n>central authority that you can resist it in direct physical confrontation. \n>If you succeed at this, you are the threat.\n\nMy vision is a strong _decentralized_ system, which is:\n\n  a) too important to close,\n\n  b) able to provide adequate response to governments, like EFF or Google do.\n\nHaving a substantial attack surface and, at the same time, not having significant power is the worst fighting strategy.\n\nIt's the \"Peter Todd vs 10 cops\" scenario.\n\n\n>The inability to see another option is the inability to understand what Satoshi created.\n\nSo your closing remark is basically, \"you're too stupid to understand\"?\n\nI'll take it."
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-09-19T08:52:43",
                "message_text_only": "On 09/19/2015 12:57 AM, NxtChg wrote:>\n>> Your vision of censorship resistance is to become such a strong\n>> central authority that you can resist it in direct physical\n>> confrontation. If you succeed at this, you are the threat.\n>\n> My vision is a strong _decentralized_ system, which is:\n>\n>   a) too important to close,\n\nYour argument is that the state is not a threat to a system designed to\ndeprive the state of seigniorage, because the state will see that system\nas too important?\n\nBitcoin cannot be both decentralized and reliant on being, \"too\nimportant to close\". If it can be closed there is insufficient\ndecentralization.\n\nI was concerned that this was going off topic for a technical forum.\nHowever this is the central technical issue of Bitcoin. If one does not\nunderstand the threat then one cannot model it or design systems to\ndefend against it. On the other hand, this is unfortunately not new\nterritory, so I'll leave it at this, which is also not news to most of us...\n\n\n>   b) able to provide adequate response to governments, like EFF or\nGoogle do.\n\n\"The National Security Agency paid millions of dollars to cover the\ncosts of major internet companies involved in the Prism surveillance\nprogram after a court ruled that some of the agency's activities were\nunconstitutional, according to top-secret material passed to the Guardian.\n\nThe technology companies, which the NSA says includes Google...\"\n\nhttp://www.theguardian.com/world/2013/aug/23/nsa-prism-costs-tech-companies-paid\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/9fb0d870/attachment.sig>"
            },
            {
                "author": "NxtChg",
                "date": "2015-09-19T13:32:55",
                "message_text_only": ">Your argument is that the state is not a threat to a system \n>designed to deprive the state of seigniorage, because the state will see that \n>system as too important?\n\nWell, if you look at governments from the point of youtube illuminati videos, then, yeah, I guess my position would seem a bit off.\n\nBut in that case no threat model or small blocks are gonna save you. As history shows, even if you go as deep as Dread Pirate Roberts, you will eventually be caught and prosecuted.\n\nSo start building SilkRoadCoin, which only works via TOR, has ASIC-resistant algorithm and 10 Kb blocks. Then you might have a tiny chance.\n\nMost of us subscribed to a global \"electronic cash system\" and we intend to continue using Bitcoin for that."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-19T20:57:40",
                "message_text_only": ">\n> Your argument is that the state is not a threat to a system designed to\n> deprive the state of seigniorage, because the state will see that system\n> as too important?\n>\n\nAnd so we get to one of the hearts of the debate.\n\nThe axiom upon which you and NxtChg disagree is this: he/she believes\ngovernments can crush Bitcoin if they want regardless of how decentralised\nit is, and you don't.\n\nIf one believes governments have the power to end Bitcoin no matter what,\nthen the only true protection comes from popularity. Governments find it\nhard to ban things that are wildly popular with their voters. This is the\nUber approach: grow fast, annoy governments, but be popular enough that\nbanning you is politically risky.\n\nIf you don't believe that governments can end Bitcoin because of\ndecentralisation, then the opposite conclusion is logical: growth can be\ndangerous because stateless money will be inherently opposed by the state,\ntherefore if growth == less decentralisation, growth increases the risk of\nstate shutdown.\n\nI don't think we have to choose between decentralisation and growth\nactually - computers are just amazingly fast. But that's irrelevant here.\n\nThe point is, your disagreement is summed up by your statement:\n\n\n> Bitcoin cannot be both decentralized and reliant on being, \"too important\n> to close\". If it can be closed there is insufficient decentralization.\n>\n\nI believe this statement is wrong because governments can shut down Bitcoin\nat any point regardless of its level of decentralisation. This is true\nbecause:\n\n   - Most governments can easily spend enough money to do a 51% attack,\n   especially if they can compel chip fabs to cooperate for free. This attack\n   works regardless of how decentralised Bitcoin is.\n\n   - Any government can end Bitcoin usage in its territory by jailing\n   anyone who advertises acceptance/trading of bitcoins, or prices in BTC.\n   Because merchants *must* advertise in order to alert customers that\n   trades in BTC are possible, this is an attack which is unsolvable. If\n   ordinary people can find such merchants so can government agents.\n\nIt may appear that trade cannot be suppressed because merchants can all\nbecome anonymous too, a la Silk Road. However, if use of Bitcoin is banned\nthen it becomes impossible to convert coins into local currency as that\nrequires cooperation of banks ..... making it useless for even anonymous\nmerchants. An outlaw currency is useless even to outlaws.\n\nBecause Bitcoin's existence ultimately relies on government cooperation and\nacceptance, the best way to ensure its survival is growth. Lots of it.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/67222559/attachment.html>"
            },
            {
                "author": "phm",
                "date": "2015-09-19T21:53:21",
                "message_text_only": "Mike Hearn via bitcoin-dev wrote:\n> Governments find it hard to ban things that are wildly popular with\n> their voters. This is the Uber approach: grow fast, annoy governments,\n> but be popular enough that banning you is politically risky.\nGovernments do not find it hard to ban things that threaten their\nauthority, least of all their authority to control money, and they also\ndo not find it hard to ban things which are popular. I'm sure the\nmillions of people with felony drug charges for the possession of\nmarijuana, a plant, understand this better than you appear to. Also, in\nthe US, despite overwhelming resistance on a broad scale, legislation\ncontinues to be presented which would violate the 2nd amendment right to\nkeep and bear arms.\n\nBitcoin does not enjoy nearly the popularity that marijuana and guns do,\nand likely never may. But even if it did, the government can be relied\non to outlaw it once it understands the true extent to which Bitcoin can\nundermine its ability to control stores of value. A mining network that\nanyone can contribute to would enable Bitcoin to stay alive in spite of\nthis, much like torrents have enabled people to continue pirating music\nregardless of how many websites have been taken down.\n>\n> If you don't believe that governments can end Bitcoin because of\n> decentralisation, then the opposite conclusion is logical: growth can\n> be dangerous because stateless money will be inherently opposed by the\n> state, therefore if growth == less decentralisation, growth increases\n> the risk of state shutdown.\nI think there's a difference between natural growth and the kind of\ngrowth that's being proposed by bank-backed start-ups and pro-censorship\nentities.\n>\n> I don't think we have to choose between decentralisation and growth\n> actually - computers are just amazingly fast. But that's irrelevant here.\n>\n> The point is, your disagreement is summed up by your statement:\n>  \n>\n>     Bitcoin cannot be both decentralized and reliant on being,\n>     \"too important to close\". If it can be closed there is\n>     insufficient decentralization.\n>\n>\n> I believe this statement is wrong because governments can shut down\n> Bitcoin at any point regardless of its level of decentralisation. This\n> is true because:\n>\n>   * Most governments can easily spend enough money to do a 51% attack,\n>     especially if they can compel chip fabs to cooperate for free.\n>     This attack works regardless of how decentralised Bitcoin is.\n>\n>   * Any government can end Bitcoin usage in its territory by jailing\n>     anyone who advertises acceptance/trading of bitcoins, or prices in\n>     BTC. Because merchants /must/ advertise in order to alert\n>     customers that trades in BTC are possible, this is an attack which\n>     is unsolvable. If ordinary people can find such merchants so can\n>     government agents.\n>\n> It may appear that trade cannot be suppressed because merchants can\n> all become anonymous too, a la Silk Road. However, if use of Bitcoin\n> is banned then it becomes impossible to convert coins into local\n> currency as that requires cooperation of banks ..... making it useless\n> for even anonymous merchants. An outlaw currency is useless even to\n> outlaws.\nA ban on Bitcoin would lead to a rise in p2p markets. The government is\nan inefficient sinkhole at its very best and it has never successfully\neradicated anything."
            },
            {
                "author": "Dave Scotese",
                "date": "2015-09-20T01:26:48",
                "message_text_only": "phm got most of this, but...\n\nOn Sat, Sep 19, 2015 at 2:53 PM, phm via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Mike Hearn via bitcoin-dev wrote:\n>\n> >\n> >   * Most governments can easily spend enough money to do a 51% attack,\n> >     especially if they can compel chip fabs to cooperate for free.\n> >     This attack works regardless of how decentralised Bitcoin is.\n> >\n> >   * Any government can end Bitcoin usage in its territory by jailing\n> >     anyone who advertises acceptance/trading of bitcoins, or prices in\n> >     BTC. Because merchants /must/ advertise in order to alert\n> >     customers that trades in BTC are possible, this is an attack which\n> >     is unsolvable. If ordinary people can find such merchants so can\n> >     government agents.\n> >\n>\nPot is used as money, and they do jail people for it, but it doesn't have\nthe effect to which you refer. It has the opposite effect, partially\nbecause it enriches suppliers.\n\nThe 51% attack is a good point, but they would be taking a huge risk.\nIdeas don't die, just people.  For example, they got Ross Ulbricht, not DPR.\n\nGovernment is the group of people that does things that are not acceptable\nif anyone else does them, and that is because people cheer for them when\nthey do those things, rather than pointing out that they are not\nacceptable.  The movie \"The Deep Web\" shows how bitcoin helps to turn this\nmisfortune around.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/02521925/attachment.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-20T02:18:54",
                "message_text_only": "> Government is the group of people that does things ...\n\nGovernments (note the plural) are a collection of entities made up of \npeople that do all sorts of things both good and bad.  Attaching your \npolitical agenda to Bitcoin with the hopes people will agree with it \nafter using Bitcoin is not a viable plan to promote your agenda nor is \nit a plan for mass adoption.\n\nRuss"
            },
            {
                "author": "NxtChg",
                "date": "2015-09-20T09:18:21",
                "message_text_only": ">Bitcoin does not enjoy nearly the popularity that marijuana and guns do,\n\nMarijuana is an individual activity. Precisely the problem with Bitcoin you envision, where each one of us could be easily jailed.\n\nGuns are quite different: they have NRA and judging by how successful it is at fending _any_ sort of gun control laws, it can very effectively counter-balance the government.\n\nIf Bitcoin had it's own NBitA, it would be in a much better position to defend itself than a bunch of individual users.\n\n\n>A mining network that anyone can contribute to would enable Bitcoin to stay alive in spite of this\n\nAgain. Start building an alt-coin with ASIC-resistant algorithm then, it's much more important than the small blocks in your model.\n\nAnd it must also have other features to support your fight: integrated darkcoin-style anonymity, only TOR as the protocol, etc.\n\nTrying to use Bitcoin, which is overly-exposed, for this kind of fight is a pretty dumb idea.\n\nYou won't have the benefits of a small attack surface and you won't have the benefits of strength - the most vulnerable position.\n\nNot to mention that many people simply don't share your vision of Bitcoin as a marginalized outlawed coin somewhere in the depths of TOR.\n\nLooking at how enthusiastically people in smallblockistan promote the most vulnerable position, I'd say they are all agents of USG."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-20T09:25:03",
                "message_text_only": ">\n> Also, in the US, despite overwhelming resistance on a broad scale,\n> legislation continues to be presented which would violate the 2nd amendment\n> right to keep and bear arms.\n\n\nAnd yet the proposed legislation goes nowhere, and the USA continues to\nstand alone in having the first world's weakest gun control laws.\n\nYou are just supporting my point with this example. Obama would like to\nrestrict guns, but can't, because they are too popular (in the USA).\n\nThe comparison to BitTorrent is likewise weak: governments hardly care\nabout piracy. They care enough to pass laws occasionally, but not enough to\nput serious effort into enforcement. Wake me up when the USA establishes a\nCopyright Enforcement Administration with the same budget and powers as the\nDEA.\n\nInternet based black markets exist only because governments tolerate them\n(for now). A ban on Tor, Bitcoin or both would send them back to the\npre-2011 state where they were virtually non-existent. Governments tolerate\nthis sort of abuse only because they believe, I think correctly, that\nBitcoin can have great benefits for their ordinary voters and for now are\nwilling to let the tech industry experiment.\n\nBut for that state of affairs to continue, the benefits must actually\nappear. That requires growth.\n\nI think there's a difference between natural growth and the kind of growth\n> that's being proposed by bank-backed start-ups and pro-censorship entities.\n>\n\nWhat difference? Are you saying the people who come to Bitcoin because of a\nstartup are somehow less \"natural\" than other users?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150920/52eca066/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-09-20T15:43:19",
                "message_text_only": "Replying to this specific email only because it is the most recent in my\nmail client.\n\nDoes this conversation have to happen on-list? It seems to have wandered\nincredibly far off-topic.\n\nOn Sun, Sep 20, 2015 at 5:25 AM, Mike Hearn via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Also, in the US, despite overwhelming resistance on a broad scale,\n>> legislation continues to be presented which would violate the 2nd amendment\n>> right to keep and bear arms.\n>\n>\n> And yet the proposed legislation goes nowhere, and the USA continues to\n> stand alone in having the first world's weakest gun control laws.\n>\n> You are just supporting my point with this example. Obama would like to\n> restrict guns, but can't, because they are too popular (in the USA).\n>\n> The comparison to BitTorrent is likewise weak: governments hardly care\n> about piracy. They care enough to pass laws occasionally, but not enough to\n> put serious effort into enforcement. Wake me up when the USA establishes a\n> Copyright Enforcement Administration with the same budget and powers as the\n> DEA.\n>\n> Internet based black markets exist only because governments tolerate them\n> (for now). A ban on Tor, Bitcoin or both would send them back to the\n> pre-2011 state where they were virtually non-existent. Governments tolerate\n> this sort of abuse only because they believe, I think correctly, that\n> Bitcoin can have great benefits for their ordinary voters and for now are\n> willing to let the tech industry experiment.\n>\n> But for that state of affairs to continue, the benefits must actually\n> appear. That requires growth.\n>\n> I think there's a difference between natural growth and the kind of growth\n>> that's being proposed by bank-backed start-ups and pro-censorship entities.\n>>\n>\n> What difference? Are you saying the people who come to Bitcoin because of\n> a startup are somehow less \"natural\" than other users?\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150920/65ddbc70/attachment-0001.html>"
            },
            {
                "author": "NxtChg",
                "date": "2015-09-20T16:21:40",
                "message_text_only": ">Does this conversation have to happen on-list? It seems to have wandered incredibly far off-topic.\n\nHow is this off-topic? This a fundamental decision, from which all the other development decisions follow.\n\nAnd apparently it's far from settled, with one part pulling in the direction of HideCoin and the other in the direction of PopCoin.\n\nThe block limit debate is a direct consequence of this fundamental disagreement.\n\nUntil this is settled, Bitcoin has no clear direction and developers cannot make effective decisions: it's hard to get anywhere when you don't know where you're going.\n\nEven though this disagreement probably won't be resolved on this list, it's helpful to have this discussion for people to understand what the root problem is."
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-20T16:34:29",
                "message_text_only": "> Until this is settled, Bitcoin has no clear direction and developers cannot make effective decisions:\n\nHow exactly do things set \"settled\" in this environment?\n\nPeople looking at Bitcoin think a small group of developers and miners \n\"control\" these decisions.  Not sure if \"control\" is the right word but \nthat is the perception.\n\nRuss"
            },
            {
                "author": "Steven Pine",
                "date": "2015-09-20T20:23:28",
                "message_text_only": "It's amazing how foolish some people are to continue trusting governments\nespecially in light of recent history: a seemingly endless, Orwellian 'war\non terror', multiple regional conflicts often justified by fake evidence,\nwholesale disregard of law and basic human covenants such as do not\ntorture, ubiquitous and secret global surveillance.\n\nAnyone who doesn't consider governments the proper threat model is either a\nshill or an idiot.\nOn Sep 20, 2015 12:34 PM, \"Milly Bitcoin via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Until this is settled, Bitcoin has no clear direction and developers\n>> cannot make effective decisions:\n>>\n>\n> How exactly do things set \"settled\" in this environment?\n>\n> People looking at Bitcoin think a small group of developers and miners\n> \"control\" these decisions.  Not sure if \"control\" is the right word but\n> that is the perception.\n>\n> Russ\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150920/47ac3c80/attachment.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-20T20:54:30",
                "message_text_only": "Your reply has nothing to do with my comment.  It looks like you just go \naround posting wing nut stuff without regard to what is being discussed. \n  A proper threat model considers all possible threats and looks at the \nprobability of each.\n\nObviously from your comment you have no experience in threat models and \nlimited education in general.\n\n\nRuss\n\n\nOn 9/20/2015 4:23 PM, Steven Pine wrote:\n> It's amazing how foolish some people are to continue trusting\n> governments especially in light of recent history: a seemingly endless,\n> Orwellian 'war on terror', multiple regional conflicts often justified\n> by fake evidence, wholesale disregard of law and basic human covenants\n> such as do not torture, ubiquitous and secret global surveillance.\n>\n> Anyone who doesn't consider governments the proper threat model is\n> either a shill or an idiot.\n>\n> On Sep 20, 2015 12:34 PM, \"Milly Bitcoin via bitcoin-dev\"\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>\n>         Until this is settled, Bitcoin has no clear direction and\n>         developers cannot make effective decisions:\n>\n>\n>     How exactly do things set \"settled\" in this environment?\n>\n>     People looking at Bitcoin think a small group of developers and\n>     miners \"control\" these decisions.  Not sure if \"control\" is the\n>     right word but that is the perception.\n>\n>     Russ\n>\n>\n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "s7r",
                "date": "2015-09-20T21:33:38",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nNobody said anything about trusting the governments in the way such as\nyou describe.\n\nNo matter how much you want to disagree here, Mike Hearn is right on\nsome aspects. He only said that bitcoin needs to have larger user\nbase, more use cases, making it more popular and less likely to be\nbanned by the governments because of political reasons. He did not say\n\"let's trust the governments and centralize bitcoin, give them the\npossibility to trace/seize/control people's bitcoins, own all the full\nnodes or hashing power\" or anything like this. So, I think he wants to\nsuggest \"be smart and Play by the rules, follow your interest\". The\ngeneral threat model for which we want to scale is: larger user base\n(not necessarily by increasing the blocksize - just increase the\ntransactions per second using the best way from all points of view),\nmore use cases for simple people who only do basic stuff, more\npopularity but all these without the possibility for some actor to\ncontrol more than he should (like a government agency). For example,\njust a summary (among many others): it will always be impossible to\nfreeze anyone's coins, or take them without the party's consent, or\nmake it mandatory to tie bitcoin addresses / wallets to real world\nidentities.\n\nIf we think governments are the threat, it's bad. This is because they\ncan make bitcoin illegal, and no matter what you or I think, there\nwill _always_ be more people who follow the laws (even the immoral\nones) than people who don't. If it's illegal / banned in relevant\nplaces/countries/continents, bitcoin will be useless. What good will\nit be if you can only use it anonymously in a dark-web via Tor, and\nyou can't tell anyone you do it and can't exchange it to fiat or vice\nversa? Bitcoin has to be legit, have normal use cases and be as\npopular as possible. Don't think that if tomorrow some government bans\nbitcoin there will be a revolution supporting freedom and free speech\nand who had this terrible idea will be jailed forever - this will not\nhappen. What will happen is that users under that jurisdiction will\nnot use bitcoin any more, merchants from there will not accept bitcoin\nany more and exchangers from there will disappear. If some of them\nwill remain to continue doing it as an outlaw, I assume their number\nwill be insignificant anyway. If we move towards crypto-anarchy where\nwe want to say \"f*** the laws, f*** the government, f*** everything\",\nwe already lost and this should not be the consensus here under any\ncircumstances. We, a few computer experts on this mail list using\nbitcoin is not what it will make it strong. What will make it strong\nis millions of human beings from all social classes and with various\noccupations using it for whatever boring reason each one might have.\n\n+1: An outlaw currency is useless even to outlaws.\n\n\n> On 9/20/2015 4:23 PM, Steven Pine wrote:\n>> It's amazing how foolish some people are to continue trusting \n>> governments especially in light of recent history: a seemingly\n>> endless, Orwellian 'war on terror', multiple regional conflicts\n>> often justified by fake evidence, wholesale disregard of law and\n>> basic human covenants such as do not torture, ubiquitous and\n>> secret global surveillance.\n>> \n>> Anyone who doesn't consider governments the proper threat model\n>> is either a shill or an idiot.\n>> \n>> On Sep 20, 2015 12:34 PM, \"Milly Bitcoin via bitcoin-dev\" \n>> <bitcoin-dev at lists.linuxfoundation.org \n>> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>> \n>> Until this is settled, Bitcoin has no clear direction and \n>> developers cannot make effective decisions:\n>> \n>> \n>> How exactly do things set \"settled\" in this environment?\n>> \n>> People looking at Bitcoin think a small group of developers and \n>> miners \"control\" these decisions.  Not sure if \"control\" is the \n>> right word but that is the perception.\n>> \n>> Russ\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (MingW32)\n\niQEcBAEBCAAGBQJV/yYyAAoJEIN/pSyBJlsRbagH/1mv0u+xUy2FhYhk07irH9Qd\n+U/v7xOLfrzz8j7BzcqLAt3Jey0r00oWbLpay4EyhtoOjPFSFwXZ5Cz/2FChbTFO\nkNFtrQpR9ioRAHslePzhIWl0Zl3qz6a7HzrYGl7hLZVJGmXdAncpGEZLpgjONggb\nR+dbKipICkRCjuOWZkpULLVUEfTTdy7bkBTR33wVb7QxRhdJNdLtXc9E0xEWPwfy\nAalDSu/nhg+VLjIW9NUGky8oqk1pqnHS8AkkAt0jLaemdWgLTzt6Ll4+w4GYaLrj\nAc2te3HXPwUzyq9xnoae5ESOU7MWzkzvyKQs35c4z03aLz2UxHjEL6o6K50leAw=\n=43rd\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-20T21:45:04",
                "message_text_only": "------ Original Message ------\nFrom: \"s7r via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org>\nTo: bitcoin-dev at lists.linuxfoundation.org\nSent: 9/20/2015 2:33:38 PM\nSubject: Re: [bitcoin-dev] Scaling Bitcoin conference micro-report\n\n>The general threat model for which we want to scale is: larger user \n>base\n>(not necessarily by increasing the blocksize - just increase the\n>transactions per second using the best way from all points of view),\n>more use cases for simple people who only do basic stuff, more\n>popularity but all these without the possibility for some actor to\n>control more than he should (like a government agency).\n\nLarger user base won't necessarily protect against governments if we \nstill have chokepoints they can go after. Given that as a currency \nBitcoin  currently represents a negligible portion of the world's \neconomy, even growing the user base by some small factor is at best a \ntoken gesture in our fight against governmental threats. If governments \nsuccessfully take down critical pieces of our network infrastructure, \nBitcoin will fail and most people will continue doing business as usual \n(using fiat currency), most of them never even noticing anything \nnoteworthy happened at all.\n\nWhat we really need to grow is the number of nodes on the network that \nparticipate in its basic infrastructure - namely: miners, validators, \netc...and the more centralized these activities become, the easier it \nwill be for governments to clamp down.\n>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-20T22:02:32",
                "message_text_only": "> Larger user base won't necessarily protect against governments if we\n> still have chokepoints they can go after.\n\n\nBitcoin will always have chokepoints governments can go after.  Hackers \nalready targeted routers to divert mining traffic awhile back.  Bitcoin \ntraffic is easily seen and blocked by ISP's.  It has already been \npointed out that laws against merchants and exchanges cannot be defended \nagainst any other way than to have many people use the system.  (As a \ndeveloper you, of course, did not mention the threat of having a tiny \nnumber of developers who have significant influence over Bitcoin.  It \nalways amazes me the endless discussion over miners centralization and \nalmost zero discussion of developer decentralization.)\n\nIncreasing the nodes by a factor of 2 or 3 or keeping the block size \nsmall to increase the diversity of miners by a few percent will have \nzero effect if those other government threats were to actually happen.\n\nRuss"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-20T22:21:55",
                "message_text_only": "------ Original Message ------\nFrom: \"Milly Bitcoin via bitcoin-dev\" \n<bitcoin-dev at lists.linuxfoundation.org>\nTo: bitcoin-dev at lists.linuxfoundation.org\nSent: 9/20/2015 3:02:32 PM\nSubject: Re: [bitcoin-dev] Scaling Bitcoin conference micro-report\n\n>>Larger user base won't necessarily protect against governments if we\n>>still have chokepoints they can go after.\n>\n>\n>Bitcoin will always have chokepoints governments can go after.  Hackers \n>already targeted routers to divert mining traffic awhile back.  Bitcoin \n>traffic is easily seen and blocked by ISP's.  It has already been \n>pointed out that laws against merchants and exchanges cannot be \n>defended against any other way than to have many people use the system.\nAlmost none of these merchants depend on Bitcoin in any significant way \nfor revenue...and that's likely to remain the case for a good while. \nMerchants that have chosen to accept Bitcoin are typically using a \nhandful of payment processors, again...chokepoints. And almost none of \nthem are contributing any network resources back to Bitcoin.\n\nExchanges are indeed serious chokepoints. But increasing the number of \nusers will probably have relatively little effect on this unless we also \nincrease the number of exchanges and decentralize the exchanges. If all \nwe had to do is increase the number of users, the same argument could be \nused to claim that banks would be less susceptible to governmental \ncrackdowns if they just had more account holders.\n\nExchange decentralization is indeed another thing we must work towards - \nbut that's probably beyond the scope of the more pressing issue which is \nbuilding consensus in Bitcoin development.\n\n>(As a developer you, of course, did not mention the threat of having a \n>tiny number of developers who have significant influence over Bitcoin.  \n>It always amazes me the endless discussion over miners centralization \n>and almost zero discussion of developer decentralization.)\nI've pointed out this weakness of Bitcoin *numerous* times. That I \nfailed to mention it here does not mean it hasn't been discussed \nelsewhere. Some of us have also been actively working towards developing \na more modular, layered architecture and better implementations that \nwill afford greater decentralization in software development with less \nneed for critical code reviews, less pushback from downstream developers \nwho must continuously rebase, a better process for building consensus in \nthe community, and simpler app migration.\n\n>\n>\n>Increasing the nodes by a factor of 2 or 3 or keeping the block size \n>small to increase the diversity of miners by a few percent will have \n>zero effect if those other government threats were to actually happen.\n>\nWe need to increase the basic infrastructure nodes by a factor much \nlarger than 2 or 3...more like 100 or 1000...and it's entirely doable \nwith properly aligned incentives.\n\n>Russ\n>\n>\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-20T22:51:36",
                "message_text_only": ">Some of us have also been actively working towards developing\n> a more modular, layered architecture and better implementations that\n> will afford greater decentralization in software development with less\n> need for critical code reviews, less pushback from downstream developers\n> who must continuously rebase, a better process for building consensus in\n> the community, and simpler app migration.\n\nIt sounds more efficient but it is not clear to me that it would change \nthe level of centralization of how the final decisions are made.\n\nOne threat to Bintcoin involves incentive for companies to hire \ndevelopers.  The only reason is to change (or not change) Bitcoin Core \nso it is beneficial to their interests.  I am not sure anything can be \ndone about that risk but it needs to be understood and considered and \nnot just ignored.\n\n> We need to increase the basic infrastructure nodes by a factor much\n> larger than 2 or 3...more like 100 or 1000...and it's entirely doable\n> with properly aligned incentives.\n\nI assume that would mean fees that hike transaction fees and make \nBitcoin more expensive?\n\nRuss"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-20T23:11:33",
                "message_text_only": "------ Original Message ------\nFrom: \"Milly Bitcoin via bitcoin-dev\" \n<bitcoin-dev at lists.linuxfoundation.org>\nTo: bitcoin-dev at lists.linuxfoundation.org\nSent: 9/20/2015 3:51:36 PM\nSubject: Re: [bitcoin-dev] Scaling Bitcoin conference micro-report\n\n>>Some of us have also been actively working towards developing\n>>a more modular, layered architecture and better implementations that\n>>will afford greater decentralization in software development with less\n>>need for critical code reviews, less pushback from downstream \n>>developers\n>>who must continuously rebase, a better process for building consensus \n>>in\n>>the community, and simpler app migration.\n>\n>It sounds more efficient but it is not clear to me that it would change \n>the level of centralization of how the final decisions are made.\n>\n>One threat to Bintcoin involves incentive for companies to hire \n>developers.  The only reason is to change (or not change) Bitcoin Core \n>so it is beneficial to their interests.  I am not sure anything can be \n>done about that risk but it needs to be understood and considered and \n>not just ignored.\nCore development process and decentralized dev/community consensus \nbuilding (in particular for consensus-critical changes) is at the top of \nmy priorities as issues right now...and one that I'd love to discuss \nmore in depth...but it probably deserves its own thread. The political \nangle seems very difficult right now while the systems architecture \nstuff seems a bit more tractable...and it seems that without \narchitectural changes it will be extremely hard to decentralize \ndevelopment and easily bring large numbers of new developers in.\n\n>\n>>We need to increase the basic infrastructure nodes by a factor much\n>>larger than 2 or 3...more like 100 or 1000...and it's entirely doable\n>>with properly aligned incentives.\n>\n>I assume that would mean fees that hike transaction fees and make \n>Bitcoin more expensive?\n>\nNot necessarily. Right now we already pay around 3,600 bitcoins a day in \ninflationary subsidies, very little of which goes to the majority of \ncritical infrastructure nodes and their operators. This is a problem \nwith the current protocol design, one we'll hopefully be able to fix.\n\nHaving more core infrastructure nodes doesn't need to raise costs per \ntransaction - but it will most likely require abandoning the current \napproach of having three basic node classes: miners (which tend towards \ncentralized pools), full nodes (which must validate each of everyone's \ntransaction and in return get paid nothing), and thin clients (which \nessentially amount to parasitic nodes that do not contribute any \nresources back to the network and must be subsidized)."
            },
            {
                "author": "Dave Scotese",
                "date": "2015-09-21T00:11:46",
                "message_text_only": "Mike wrote:\n... Obama would like to restrict guns, but can't, because they are too\npopular (in the USA).\n... Governments tolerate this sort of abuse [black markets] only because\nthey believe, I think correctly, that Bitcoin can have great benefits for\ntheir ordinary voters and for now are willing to let the tech industry\nexperiment.\n\nThose two reasons must be recognized for their differences.  What does it\nmean that something is \"too popular\" if the ultimate goal of government is\n\"great benefits for their ordinary voters\"?  It means the government\nassumes that some things are bad for people even though they are popular.\nCrystal meth and heroin come to mind.  This is a natural concern of all\ndecent parents for their children, and the reason that cultures for\nmillennia have had rites of passage, wherein the child takes on the\nresponsibility of determining for him or her self whether or not a popular\nthing provides great benefits.  That responsibility is the birthright of\nevery human being. Why is there an institution that usurps it?  How do the\npeople within that institution benefit from being part of it?\n\nSome history to study and answer these questions includes:\n\n   - The origination of public schooling as motivated by Johann Fichte's\n   public letters to his king in response to Prussia's loss to Napolean at\n   Jena.\n   - Franz Oppenheimer's book, The State, tracing the origination of the\n   idea of a state, or group of people who make up and enforce laws.\n   - Carroll Quigley's history book, Tragedy and Hope.\n   - Larken Rose's book, Kicking the Dragon.\n   - The Republic, by Plato, but only once you understand those other books.\n   - If you want a shortcut, John Taylor Gatto did a five-hour interview\n   which is now titled \"The Ultimate History Lesson with John Taylor Gatto.\"\n   It is heavily sourced by its producer in case anyone wants to verify the\n   information he provides.\n\nI'm \"notplato\" for a reason.\n\nnotplato\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150920/540fc23e/attachment.html>"
            },
            {
                "author": "Corey Haddad",
                "date": "2015-09-21T05:04:54",
                "message_text_only": "If it turns out that the blocksize divide is hinging on differing developer\nviews on the nature of the threat posed by governments, perhaps it would be\nbetter to defer to people who specialize in that area.  There are plenty of\nthem operating in the Bitcoin space.  I am familiar with some of the United\nStates based policy people, such as Jerry Brito, Alex Fowler, Constance\nChoi, Jim Harper, Patrick Murck, etc..  If they are not sure how to frame\ntheir ideas as they relate to this debate, maybe the devs could pose some\nquestions for them to answer.  If the bitcoin policy people are not of\nhelp, maybe we should turn to some political philosophers or something.\n\nThe main idea here is that if this is a politics question, please consider\nyou may be outside your area of expertise.\n\n\nOn Sun, Sep 20, 2015 at 5:11 PM, Dave Scotese via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Mike wrote:\n> ... Obama would like to restrict guns, but can't, because they are too\n> popular (in the USA).\n> ... Governments tolerate this sort of abuse [black markets] only because\n> they believe, I think correctly, that Bitcoin can have great benefits for\n> their ordinary voters and for now are willing to let the tech industry\n> experiment.\n>\n> Those two reasons must be recognized for their differences.  What does it\n> mean that something is \"too popular\" if the ultimate goal of government is\n> \"great benefits for their ordinary voters\"?  It means the government\n> assumes that some things are bad for people even though they are popular.\n> Crystal meth and heroin come to mind.  This is a natural concern of all\n> decent parents for their children, and the reason that cultures for\n> millennia have had rites of passage, wherein the child takes on the\n> responsibility of determining for him or her self whether or not a popular\n> thing provides great benefits.  That responsibility is the birthright of\n> every human being. Why is there an institution that usurps it?  How do the\n> people within that institution benefit from being part of it?\n>\n> Some history to study and answer these questions includes:\n>\n>    - The origination of public schooling as motivated by Johann Fichte's\n>    public letters to his king in response to Prussia's loss to Napolean at\n>    Jena.\n>    - Franz Oppenheimer's book, The State, tracing the origination of the\n>    idea of a state, or group of people who make up and enforce laws.\n>    - Carroll Quigley's history book, Tragedy and Hope.\n>    - Larken Rose's book, Kicking the Dragon.\n>    - The Republic, by Plato, but only once you understand those other\n>    books.\n>    - If you want a shortcut, John Taylor Gatto did a five-hour interview\n>    which is now titled \"The Ultimate History Lesson with John Taylor Gatto.\"\n>    It is heavily sourced by its producer in case anyone wants to verify the\n>    information he provides.\n>\n> I'm \"notplato\" for a reason.\n>\n> notplato\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150920/0e792cc4/attachment-0001.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-21T11:45:41",
                "message_text_only": "On 9/21/2015 1:04 AM, Corey Haddad via bitcoin-dev wrote:\n > If it turns out that the blocksize divide is hinging on differing\n > developer views on the nature of the threat posed by governments,\n > perhaps it would be better to defer to people who specialize in that\n > area.  ...\n...\n > The main idea here is that if this is a politics question, please\n > consider you may be outside your area of expertise.\n\n\nThat is a great suggestion.  Jerry Brito is the number one guy to go to \nfor this information.  You will find that many early Bitcoiners are \ncompletely clueless as to the motivations of regulators.  However, you \nstill have the problem that some influential developers know Bitcoin but \notherwise are completely ignorant.  They will go around claiming \neveryone who discusses regulation is a \"statist\" and so forth.  Some \npeople on this list actually claimed I am \"statist\" simply by pointing \nout that governments do both good and bad things and that most people \ntrust and depend on governments to a certain extent.  That is simply a \nfact, it does not support any agenda.\n\nAnother example are the developers who are going around claiming a \nstress test is a criminal action against those running nodes.  Such a \nclaim brings all kinds of complicated legal questions about the \nliability of people running nodes.  Instead of contacting someone who \nresearched the issue (such as Peter \u0160urda who ended up posting several \nsensible replies) the developer posted some hyperbolic article on Reddit \nwhich did nothing but promote misinformation.  On top of that it makes \nBitcoiners look totally ridiculous.  One day they claim Bitcoin will \ncollapse all these government institutions and the next day they want \nthose same government institutions to arrest people for overflowing \ntheir memory pool.\n\nOne final issue about the conference ... the developers should not be \naccepting advertisers engaged in nefarious activities.  In particular \nBicoinTalk was accepted as an advertiser.  It is well known that site \nhas promoted fake banks where many users lost money \n(CoinLeders/Inputs.io), illegal investments schemes where,any people \nlost funds (BLBSE) and whole host of questionable, illegal, immoral, and \nunethical activities.  Just because the guy who runs the site wrote a \nblock explorer that does not mean the developers should blindly promote \na highly questionable web site that damages Bitcoin's reputation.  The \npeople running these events need to start acting responsibly.\n\nRuss"
            },
            {
                "author": "NxtChg",
                "date": "2015-09-21T08:48:20",
                "message_text_only": ">Larger user base won't necessarily protect against governments if \n>we still have chokepoints they can go after.\n\nThis is the critical confusion about Bitcoin decentralization, which leads to this whole recent mess of shouting at each other.\n\nDecentralization is _not_ a way to withstand an attack, if the government \"goes after you\".\n\nMany people got this idea drilled into their heads in the previous years, that Bitcoin is a \"movement\" to fight governments, and decentralization is its main weapon.\n\nThey confuse Bitcoin and Anonymous.\n\n\n>What we really need to grow is the number of nodes on the network \n>that participate in its basic infrastructure - namely: miners, validators, etc...\n\nAbsolutely. Nobody argues that we shouldn't care about decentralization.\n\nBut who's gonna pay for all this? What are the incentives?\n\nWe need Bitcoin to get much more popular for this to happen."
            },
            {
                "author": "NxtChg",
                "date": "2015-09-20T21:10:47",
                "message_text_only": ">Anyone who doesn't consider governments the proper threat model is either a shill or an idiot.\n\nYou meant to say \"threat\". This is what threat model is: https://en.wikipedia.org/wiki/Threat_model\n\nNobody here discounts governments as a threat.\n\nAs to the \"proper threat model\", you can't construct one since your attacker is essentially unbounded.\n\nFor example, any large government could easily obtain 51% of hash power and then only accept transactions from \"certified services\"."
            },
            {
                "author": "Steven Pine",
                "date": "2015-09-20T21:13:08",
                "message_text_only": "That's a simple fallacy, historically governments even hegemons, fail, in\nfact it would be odd to assert that a government will not fail, therefore\nascribing godlike and limitless powers to a government is again the view of\neither a shill or someone untutored in history.\n\nOn Sun, Sep 20, 2015 at 5:10 PM, NxtChg <nxtchg at hush.com> wrote:\n\n>\n> >Anyone who doesn't consider governments the proper threat model is either\n> a shill or an idiot.\n>\n> You meant to say \"threat\". This is what threat model is:\n> https://en.wikipedia.org/wiki/Threat_model\n>\n> Nobody here discounts governments as a threat.\n>\n> As to the \"proper threat model\", you can't construct one since your\n> attacker is essentially unbounded.\n>\n> For example, any large government could easily obtain 51% of hash power\n> and then only accept transactions from \"certified services\".\n>\n>\n\n\n-- \nSteven Pine\n(510) 517-7075\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150920/23655cdc/attachment-0001.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-20T21:34:27",
                "message_text_only": "> therefore ascribing godlike and limitless powers to a government is\n> again the view of either a shill or someone untutored in history.\n\nSince nobody ever ascribed \"godlike and limitless powers to a \ngovernment\" on this list your comment has no bearing on anything \ndiscussed here.  I am sure the whole world, except for a few \nunderemployed gamers who discovered Bitcoin, are all untutored in history.\n\nAs for this thread, the question was how/when is a Bitcoin development \nissue considered \"settled?\"\n\nRuss"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-20T21:24:40",
                "message_text_only": "Threat models can be developed for things like threats from governments. \n  The idea in developing a model is to put in the context of other \npossible threats.  For example, someone with a few million to burn can \neasily crash the exchange rate or buy a couple core developers much \neasier and cheaper than doing a 51% attack.  These attacks can be done \nby governments and non-governments alike.  The people who consider \nthreats from government and think everyone associated with Bitcoin is \nsomehow \"pure\" are irrational cultists who have no business discussing \nthreat models in the first place.\n\nRuss\n\n\n\nOn 9/20/2015 5:10 PM, NxtChg via bitcoin-dev wrote:\n>\n>> Anyone who doesn't consider governments the proper threat model is either a shill or an idiot.\n>\n> You meant to say \"threat\". This is what threat model is: https://en.wikipedia.org/wiki/Threat_model\n>\n> Nobody here discounts governments as a threat.\n>\n> As to the \"proper threat model\", you can't construct one since your attacker is essentially unbounded.\n>\n> For example, any large government could easily obtain 51% of hash power and then only accept transactions from \"certified services\".\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-20T21:16:36",
                "message_text_only": "Steven,\n\nYou make a decent point...but please try to keep the discourse civil. \nIt's already hard enough trying to figure this stuff out without fanning \nmore flames.\n\n------ Original Message ------\nFrom: \"Steven Pine via bitcoin-dev\" \n<bitcoin-dev at lists.linuxfoundation.org>\nTo: \"Milly Bitcoin\" <milly at bitcoins.info>\nCc: bitcoin-dev at lists.linuxfoundation.org\nSent: 9/20/2015 1:23:28 PM\nSubject: Re: [bitcoin-dev] Scaling Bitcoin conference micro-report\n\n>It's amazing how foolish some people are to continue trusting \n>governments especially in light of recent history: a seemingly endless, \n>Orwellian 'war on terror', multiple regional conflicts often justified \n>by fake evidence, wholesale disregard of law and basic human covenants \n>such as do not torture, ubiquitous and secret global surveillance.\n>\n>Anyone who doesn't consider governments the proper threat model is \n>either a shill or an idiot.\n>\n>On Sep 20, 2015 12:34 PM, \"Milly Bitcoin via bitcoin-dev\" \n><bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>Until this is settled, Bitcoin has no clear direction and developers \n>>>cannot make effective decisions:\n>>\n>>How exactly do things set \"settled\" in this environment?\n>>\n>>People looking at Bitcoin think a small group of developers and miners \n>>\"control\" these decisions.  Not sure if \"control\" is the right word \n>>but that is the perception.\n>>\n>>Russ\n>>\n>>\n>>_______________________________________________\n>>bitcoin-dev mailing list\n>>bitcoin-dev at lists.linuxfoundation.org\n>>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150920/bb9c4e1a/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-21T10:30:10",
                "message_text_only": ">\n> Does this conversation have to happen on-list? It seems to have wandered\n> incredibly far off-topic.\n>\n\nI understand, it does seem off topic. But ..... what was the topic again?\nAll Jeff's mail and the followups seem to say is there was a meeting where\nsome people (unnamed) agreed to do something (unspecified) if the metric\nused is modified (which doesn't change the fundamental issues).\n\nSo there isn't really much on-topic to discuss. If/when Wladimir starts a\nthread, with a BIP, and says \"this is how it's gonna be in Bitcoin Core\",\nthen there will be things to discuss.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150921/4f6b5c5f/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Scaling Bitcoin conference micro-report",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeff Garzik",
                "Eric Lombrozo",
                "Eric Voskuil",
                "Steven Pine",
                "Corey Haddad",
                "phm",
                "Mike Hearn",
                "Milly Bitcoin",
                "s7r",
                "Peter Todd",
                "Dave Scotese",
                "cipher anthem",
                "NxtChg",
                "Matt Corallo",
                "Mark Friedenbach"
            ],
            "messages_count": 44,
            "total_messages_chars_count": 86806
        }
    },
    {
        "title": "[bitcoin-dev] Improving Blocksize Communication Through Markets",
        "thread_messages": [
            {
                "author": "Paul Sztorc",
                "date": "2015-09-18T22:15:07",
                "message_text_only": "Dear List,\n\n1. Are you sick of hearing about THE BLOCKSIZE?\n2. Do you feel that long-settled blocksize issues are coming up again\nand again, resulting in duplicated work and communications burnout?\n3. Do you feel that, while scalability is important and all, people\nshould just shut up about it already so that you can talk about X\nFeature that you actually spent your time on?\n4. Do you ever stop and think: How much *money* was spent for everyone\nto travel to Montreal, stay at their hotels, and to rent the conference\nvenue and broadcasting accommodations? Shouldn't there be a way of just\n*purchasing* the information we wanted more directly?\n5. Do you feel that the inherent subjectivity of the conversation\nencourages \u201cpolitical maneuvers\u201d such as character assassination,\nreduction of complex issues to minimal (two) unrepresentative \u201cparties\u201d,\nand harassment / threats of violence (for the \u201cgreater good\u201d)?\n\nAs I presented at the Montreal Conference, there is a way to\nsubstantially improve the discussion. Would you believe that Hal Finney\nhimself advocated it just seven short years ago?\n\nI happen to know it back-to-front, and the (simple) pieces are already\ncoded into my own more-complex project Truthcoin.\n\nYou could wait for me to hack the pieces together myself (which might\ntake a long time), or you, a competent/fast C++ developer familiar with\nBitcoin and/or Sidechain-Elements, could talk to me for 30 minutes, and\n(depending on your skill level) bang it out in, probably, one weekend.\n\nMore details are on the project page ( http://bitcoinblocksize.com/ ),\nsome technical details are in the Github README.\n\nI have also created a Slack:\nhttps://blocksize-markets.slack.com/messages/general/\n\nSincerely,\nPaul\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/7718057d/attachment.html>"
            },
            {
                "author": "Isidor Zeuner",
                "date": "2015-09-20T11:41:52",
                "message_text_only": "Hi there,\n\nreplies in-line:\n\n[...]\n> 4. Do you ever stop and think: How much *money* was spent for everyone\n> to travel to Montreal, stay at their hotels, and to rent the conference\n> venue and broadcasting accommodations?\n\nNot to mention that trying to solve a global issue with a conference\nlocal to Montreal is a good example for _centralizing_ Bitcoin...\n\n[...]\n> More details are on the project page ( http://bitcoinblocksize.com/ ),\n> some technical details are in the Github README.\n>\n\nI agree that letting the market decide is the way to go. But I\ndon't understand why we would want to have yet another\n(side-)chain because of that. The market can already decide at the\npoint where _every_ Bitcoin user starts to discriminate the Bitcoins\nhe accepts between the client versions of the blocks where the\nBitcoins come from (and the corresponding BIPs where the version\nnumbers relate to). If a miner decides to follow a particular block\nsize policy against the will of the community, the market could\nquickly rectify it when the miner realizes that no one accepts the\nresulting coins anymore, leading to financial loss for the miner.\n\nBest regards,\n\nIsidor"
            }
        ],
        "thread_summary": {
            "title": "Improving Blocksize Communication Through Markets",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Isidor Zeuner",
                "Paul Sztorc"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3072
        }
    },
    {
        "title": "[bitcoin-dev] [BIP-draft] CHECKSEQUENCEVERIFY - An opcode for relative locktime",
        "thread_messages": [
            {
                "author": "Btc Drak",
                "date": "2015-09-16T22:40:06",
                "message_text_only": "Where do we stand now on which sequencenumbers variation to use? We really\nshould make a decision now.\n\nOn Fri, Aug 28, 2015 at 12:32 AM, Mark Friedenbach via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> So I've created 2 new repositories with changed rules regarding\n> sequencenumbers:\n>\n> https://github.com/maaku/bitcoin/tree/sequencenumbers2\n>\n> This repository inverts (un-inverts?) the sequence number. nSequence=1\n> means 1 block relative lock-height. nSequence=LOCKTIME_THRESHOLD means 1\n> second relative lock-height. nSequence>=0x80000000 (most significant bit\n> set) is not interpreted as a relative lock-time.\n>\n> https://github.com/maaku/bitcoin/tree/sequencenumbers3\n>\n> This repository not only inverts the sequence number, but also interprets\n> it as a fixed-point number. This allows up to 5 year relative lock times\n> using blocks as units, and saves 12 low-order bits for future use. Or, up\n> to about 2 year relative lock times using seconds as units, and saves 4\n> bits for future use without second-level granularity. More bits could be\n> recovered from time-based locktimes by choosing a higher granularity (a\n> soft-fork change if done correctly).\n>\n> On Tue, Aug 25, 2015 at 3:08 PM, Mark Friedenbach <mark at friedenbach.org>\n> wrote:\n>\n>> To follow up on this, let's say that you want to be able to have up to 1\n>> year relative lock-times. This choice is somewhat arbitrary and what I\n>> would like some input on, but I'll come back to this point.\n>>\n>>  * 1 bit is necessary to enable/disable relative lock-time.\n>>\n>>  * 1 bit is necessary to indicate whether seconds vs blocks as the unit\n>> of measurement.\n>>\n>>  * 1 year of time with 1-second granularity requires 25 bits. However\n>> since blocks occur at approximately 10 minute intervals on average, having\n>> a relative lock-time significantly less than this interval doesn't make\n>> much sense. A granularity of 256 seconds would be greater than the Nyquist\n>> frequency and requires only 17 bits.\n>>\n>>  * 1 year of blocks with 1-block granularity requires 16 bits.\n>>\n>> So time-based relative lock time requires about 19 bits, and block-based\n>> relative lock-time requires about 18 bits. That leaves 13 or 14 bits for\n>> other uses.\n>>\n>> Assuming a maximum of 1-year relative lock-times. But what is an\n>> appropriate maximum to choose? The use cases I have considered have only\n>> had lock times on the order of a few days to a month or so. However I would\n>> feel uncomfortable going less than a year for a hard maximum, and am having\n>> trouble thinking of any use case that would require more than a year of\n>> lock-time. Can anyone else think of a use case that requires >1yr relative\n>> lock-time?\n>>\n>> TL;DR\n>>\n>> On Sun, Aug 23, 2015 at 7:37 PM, Mark Friedenbach <mark at friedenbach.org>\n>> wrote:\n>>\n>>> A power of 2 would be far more efficient here. The key question is how\n>>> long of a relative block time do you need? Figure out what the maximum\n>>> should be ( I don't know what that would be, any ideas?) and then see how\n>>> many bits you have left over.\n>>> On Aug 23, 2015 7:23 PM, \"Jorge Tim\u00f3n\" <\n>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>>> On Mon, Aug 24, 2015 at 3:01 AM, Gregory Maxwell via bitcoin-dev\n>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>> > Seperately, to Mark and Btcdrank: Adding an extra wrinkel to the\n>>>> > discussion has any thought been given to represent one block with more\n>>>> > than one increment?  This would leave additional space for future\n>>>> > signaling, or allow, for example, higher resolution numbers for a\n>>>> > sharechain commitement.\n>>>>\n>>>> No, I don't think anybody thought about this. I just explained this to\n>>>> Pieter using \"for example, 10 instead of 1\".\n>>>> He suggested 600 increments so that it is more similar to timestamps.\n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>\n>>>\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/bfdc2567/attachment-0001.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-16T23:23:18",
                "message_text_only": "I'd rather replace the whole nSequence thing with an explicit relative locktime with clear semantics...but I'm not going to fight this one too much.\n\nOn September 16, 2015 6:40:06 PM EDT, Btc Drak via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>Where do we stand now on which sequencenumbers variation to use? We\n>really\n>should make a decision now.\n>\n>On Fri, Aug 28, 2015 at 12:32 AM, Mark Friedenbach via bitcoin-dev <\n>bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> So I've created 2 new repositories with changed rules regarding\n>> sequencenumbers:\n>>\n>> https://github.com/maaku/bitcoin/tree/sequencenumbers2\n>>\n>> This repository inverts (un-inverts?) the sequence number.\n>nSequence=1\n>> means 1 block relative lock-height. nSequence=LOCKTIME_THRESHOLD\n>means 1\n>> second relative lock-height. nSequence>=0x80000000 (most significant\n>bit\n>> set) is not interpreted as a relative lock-time.\n>>\n>> https://github.com/maaku/bitcoin/tree/sequencenumbers3\n>>\n>> This repository not only inverts the sequence number, but also\n>interprets\n>> it as a fixed-point number. This allows up to 5 year relative lock\n>times\n>> using blocks as units, and saves 12 low-order bits for future use.\n>Or, up\n>> to about 2 year relative lock times using seconds as units, and saves\n>4\n>> bits for future use without second-level granularity. More bits could\n>be\n>> recovered from time-based locktimes by choosing a higher granularity\n>(a\n>> soft-fork change if done correctly).\n>>\n>> On Tue, Aug 25, 2015 at 3:08 PM, Mark Friedenbach\n><mark at friedenbach.org>\n>> wrote:\n>>\n>>> To follow up on this, let's say that you want to be able to have up\n>to 1\n>>> year relative lock-times. This choice is somewhat arbitrary and what\n>I\n>>> would like some input on, but I'll come back to this point.\n>>>\n>>>  * 1 bit is necessary to enable/disable relative lock-time.\n>>>\n>>>  * 1 bit is necessary to indicate whether seconds vs blocks as the\n>unit\n>>> of measurement.\n>>>\n>>>  * 1 year of time with 1-second granularity requires 25 bits.\n>However\n>>> since blocks occur at approximately 10 minute intervals on average,\n>having\n>>> a relative lock-time significantly less than this interval doesn't\n>make\n>>> much sense. A granularity of 256 seconds would be greater than the\n>Nyquist\n>>> frequency and requires only 17 bits.\n>>>\n>>>  * 1 year of blocks with 1-block granularity requires 16 bits.\n>>>\n>>> So time-based relative lock time requires about 19 bits, and\n>block-based\n>>> relative lock-time requires about 18 bits. That leaves 13 or 14 bits\n>for\n>>> other uses.\n>>>\n>>> Assuming a maximum of 1-year relative lock-times. But what is an\n>>> appropriate maximum to choose? The use cases I have considered have\n>only\n>>> had lock times on the order of a few days to a month or so. However\n>I would\n>>> feel uncomfortable going less than a year for a hard maximum, and am\n>having\n>>> trouble thinking of any use case that would require more than a year\n>of\n>>> lock-time. Can anyone else think of a use case that requires >1yr\n>relative\n>>> lock-time?\n>>>\n>>> TL;DR\n>>>\n>>> On Sun, Aug 23, 2015 at 7:37 PM, Mark Friedenbach\n><mark at friedenbach.org>\n>>> wrote:\n>>>\n>>>> A power of 2 would be far more efficient here. The key question is\n>how\n>>>> long of a relative block time do you need? Figure out what the\n>maximum\n>>>> should be ( I don't know what that would be, any ideas?) and then\n>see how\n>>>> many bits you have left over.\n>>>> On Aug 23, 2015 7:23 PM, \"Jorge Tim\u00f3n\" <\n>>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>\n>>>>> On Mon, Aug 24, 2015 at 3:01 AM, Gregory Maxwell via bitcoin-dev\n>>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>> > Seperately, to Mark and Btcdrank: Adding an extra wrinkel to the\n>>>>> > discussion has any thought been given to represent one block\n>with more\n>>>>> > than one increment?  This would leave additional space for\n>future\n>>>>> > signaling, or allow, for example, higher resolution numbers for\n>a\n>>>>> > sharechain commitement.\n>>>>>\n>>>>> No, I don't think anybody thought about this. I just explained\n>this to\n>>>>> Pieter using \"for example, 10 instead of 1\".\n>>>>> He suggested 600 increments so that it is more similar to\n>timestamps.\n>>>>> _______________________________________________\n>>>>> bitcoin-dev mailing list\n>>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>>\n>>>>\n>>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150916/6256d65f/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-09-17T04:23:41",
                "message_text_only": "Eric, that would be, I think, my sequencenumbers2 branch in which nSequence\nis an explicit relative lock-time field (unless the most significant bit is\nset). That has absolutely clear semantics. You should comment on #6312\nwhere this is being discussed.\n\nOn Wed, Sep 16, 2015 at 7:23 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n\n> I'd rather replace the whole nSequence thing with an explicit relative\n> locktime with clear semantics...but I'm not going to fight this one too\n> much.\n>\n>\n> On September 16, 2015 6:40:06 PM EDT, Btc Drak via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> Where do we stand now on which sequencenumbers variation to use? We\n>> really should make a decision now.\n>>\n>> On Fri, Aug 28, 2015 at 12:32 AM, Mark Friedenbach via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> So I've created 2 new repositories with changed rules regarding\n>>> sequencenumbers:\n>>>\n>>> https://github.com/maaku/bitcoin/tree/sequencenumbers2\n>>>\n>>> This repository inverts (un-inverts?) the sequence number. nSequence=1\n>>> means 1 block relative lock-height. nSequence=LOCKTIME_THRESHOLD means 1\n>>> second relative lock-height. nSequence>=0x80000000 (most significant bit\n>>> set) is not interpreted as a relative lock-time.\n>>>\n>>> https://github.com/maaku/bitcoin/tree/sequencenumbers3\n>>>\n>>> This repository not only inverts the sequence number, but also\n>>> interprets it as a fixed-point number. This allows up to 5 year relative\n>>> lock times using blocks as units, and saves 12 low-order bits for future\n>>> use. Or, up to about 2 year relative lock times using seconds as units, and\n>>> saves 4 bits for future use without second-level granularity. More bits\n>>> could be recovered from time-based locktimes by choosing a higher\n>>> granularity (a soft-fork change if done correctly).\n>>>\n>>> On Tue, Aug 25, 2015 at 3:08 PM, Mark Friedenbach <mark at friedenbach.org>\n>>> wrote:\n>>>\n>>>> To follow up on this, let's say that you want to be able to have up to\n>>>> 1 year relative lock-times. This choice is somewhat arbitrary and what I\n>>>> would like some input on, but I'll come back to this point.\n>>>>\n>>>>  * 1 bit is necessary to enable/disable relative lock-time.\n>>>>\n>>>>  * 1 bit is necessary to indicate whether seconds vs blocks as the unit\n>>>> of measurement.\n>>>>\n>>>>  * 1 year of time with 1-second granularity requires 25 bits. However\n>>>> since blocks occur at approximately 10 minute intervals on average, having\n>>>> a relative lock-time significantly less than this interval doesn't make\n>>>> much sense. A granularity of 256 seconds would be greater than the Nyquist\n>>>> frequency and requires only 17 bits.\n>>>>\n>>>>  * 1 year of blocks with 1-block granularity requires 16 bits.\n>>>>\n>>>> So time-based relative lock time requires about 19 bits, and\n>>>> block-based relative lock-time requires about 18 bits. That leaves 13 or 14\n>>>> bits for other uses.\n>>>>\n>>>> Assuming a maximum of 1-year relative lock-times. But what is an\n>>>> appropriate maximum to choose? The use cases I have considered have only\n>>>> had lock times on the order of a few days to a month or so. However I would\n>>>> feel uncomfortable going less than a year for a hard maximum, and am having\n>>>> trouble thinking of any use case that would require more than a year of\n>>>> lock-time. Can anyone else think of a use case that requires >1yr relative\n>>>> lock-time?\n>>>>\n>>>> TL;DR\n>>>>\n>>>> On Sun, Aug 23, 2015 at 7:37 PM, Mark Friedenbach <mark at friedenbach.org\n>>>> > wrote:\n>>>>\n>>>>> A power of 2 would be far more efficient here. The key question is how\n>>>>> long of a relative block time do you need? Figure out what the maximum\n>>>>> should be ( I don't know what that would be, any ideas?) and then see how\n>>>>> many bits you have left over.\n>>>>> On Aug 23, 2015 7:23 PM, \"Jorge Tim\u00f3n\" <\n>>>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>>\n>>>>>> On Mon, Aug 24, 2015 at 3:01 AM, Gregory Maxwell via bitcoin-dev\n>>>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>>> > Seperately, to Mark and Btcdrank: Adding an extra wrinkel to the\n>>>>>> > discussion has any thought been given to represent one block with\n>>>>>> more\n>>>>>> > than one increment?  This would leave additional space for future\n>>>>>> > signaling, or allow, for example, higher resolution numbers for a\n>>>>>> > sharechain commitement.\n>>>>>>\n>>>>>> No, I don't think anybody thought about this. I just explained this to\n>>>>>> Pieter using \"for example, 10 instead of 1\".\n>>>>>> He suggested 600 increments so that it is more similar to timestamps.\n>>>>>> _______________________________________________\n>>>>>> bitcoin-dev mailing list\n>>>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>>>\n>>>>>\n>>>>\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>>\n>> ------------------------------\n>>\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n> --\n> Sent from my Android device with K-9 Mail. Please excuse my brevity.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150917/2a787e07/attachment-0001.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2015-09-18T01:21:19",
                "message_text_only": "Mark Friedenbach via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nwrites:\n> Eric, that would be, I think, my sequencenumbers2 branch in which nSequence\n> is an explicit relative lock-time field (unless the most significant bit is\n> set). That has absolutely clear semantics. You should comment on #6312\n> where this is being discussed.\n\nIndeed.  Simplicity wins.  We have half the number space left for the\nfuture, too.  If people are paranoid, reserve the top *two* bits.\n\nThanks,\nRusty."
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-09-17T07:43:02",
                "message_text_only": "How many years of relative lock time do we need? It really depends why \nwe need a relative lock time in the first place, what what does it offer \nin addition to CHECKLOCKTIMEVERIFY. The only case I know is when the \nconfirmation taking too long, CLTV may expire before the tx is \nconfirmed. For use case like this, 1 year of relative lock time is much \nmore than enough, since Bitcoin is basically worthless if it takes \nmonths to confirm a tx with a reasonable fee.\n\nIs there any other use case of CSV that is irreplaceable by CLTV? There \nis only one example in the BIP CSV draft.\n\nFor the timebased relative lock time, 256 seconds of granularity is more \nthan enough since the block interval is 600s. Although it is not \nimpossible to reduce the block interval in the future, that will be a \nhardfork anyway and we may just hardfork BIP68/CSV at the same time.\n\n\n\nMark Friedenbach via bitcoin-dev \u65bc 2015-08-27 19:32 \u5beb\u5230:\n> So I've created 2 new repositories with changed rules regarding\n> sequencenumbers:\n> \n> https://github.com/maaku/bitcoin/tree/sequencenumbers2 [2]\n> \n> This repository inverts (un-inverts?) the sequence number. nSequence=1\n> means 1 block relative lock-height. nSequence=LOCKTIME_THRESHOLD means\n> 1 second relative lock-height. nSequence>=0x80000000 (most significant\n> bit set) is not interpreted as a relative lock-time.\n> \n> https://github.com/maaku/bitcoin/tree/sequencenumbers3 [3]\n> \n> This repository not only inverts the sequence number, but also\n> interprets it as a fixed-point number. This allows up to 5 year\n> relative lock times using blocks as units, and saves 12 low-order bits\n> for future use. Or, up to about 2 year relative lock times using\n> seconds as units, and saves 4 bits for future use without second-level\n> granularity. More bits could be recovered from time-based locktimes by\n> choosing a higher granularity (a soft-fork change if done correctly).\n> \n> On Tue, Aug 25, 2015 at 3:08 PM, Mark Friedenbach\n> <mark at friedenbach.org> wrote:\n> \n>> To follow up on this, let's say that you want to be able to have up\n>> to 1 year relative lock-times. This choice is somewhat arbitrary and\n>> what I would like some input on, but I'll come back to this point.\n>> \n>> * 1 bit is necessary to enable/disable relative lock-time.\n>> \n>> * 1 bit is necessary to indicate whether seconds vs blocks as the\n>> unit of measurement.\n>> \n>> * 1 year of time with 1-second granularity requires 25 bits.\n>> However since blocks occur at approximately 10 minute intervals on\n>> average, having a relative lock-time significantly less than this\n>> interval doesn't make much sense. A granularity of 256 seconds would\n>> be greater than the Nyquist frequency and requires only 17 bits.\n>> \n>> * 1 year of blocks with 1-block granularity requires 16 bits.\n>> \n>> So time-based relative lock time requires about 19 bits, and\n>> block-based relative lock-time requires about 18 bits. That leaves\n>> 13 or 14 bits for other uses.\n>> \n>> Assuming a maximum of 1-year relative lock-times. But what is an\n>> appropriate maximum to choose? The use cases I have considered have\n>> only had lock times on the order of a few days to a month or so.\n>> However I would feel uncomfortable going less than a year for a hard\n>> maximum, and am having trouble thinking of any use case that would\n>> require more than a year of lock-time. Can anyone else think of a\n>> use case that requires >1yr relative lock-time?\n>> \n>> TL;DR\n>> \n>> On Sun, Aug 23, 2015 at 7:37 PM, Mark Friedenbach\n>> <mark at friedenbach.org> wrote:\n>> \n>> A power of 2 would be far more efficient here. The key question is\n>> how long of a relative block time do you need? Figure out what the\n>> maximum should be ( I don't know what that would be, any ideas?) and\n>> then see how many bits you have left over.\n>> \n>> On Aug 23, 2015 7:23 PM, \"Jorge Tim\u00f3n\"\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> On Mon, Aug 24, 2015 at 3:01 AM, Gregory Maxwell via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> Seperately, to Mark and Btcdrank: Adding an extra wrinkel to the\n>>> discussion has any thought been given to represent one block with\n>> more\n>>> than one increment? This would leave additional space for future\n>>> signaling, or allow, for example, higher resolution numbers for a\n>>> sharechain commitement.\n>> \n>> No, I don't think anybody thought about this. I just explained this\n>> to\n>> Pieter using \"for example, 10 instead of 1\".\n>> He suggested 600 increments so that it is more similar to\n>> timestamps.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev [1]\n> \n> \n> \n> Links:\n> ------\n> [1] https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> [2] https://github.com/maaku/bitcoin/tree/sequencenumbers2\n> [3] https://github.com/maaku/bitcoin/tree/sequencenumbers3\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "CHECKSEQUENCEVERIFY - An opcode for relative locktime",
            "categories": [
                "bitcoin-dev",
                "BIP-draft"
            ],
            "authors": [
                "Rusty Russell",
                "Eric Lombrozo",
                "Btc Drak",
                "Mark Friedenbach",
                "jl2012 at xbt.hk"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 20737
        }
    },
    {
        "title": "[bitcoin-dev] BIP 106 : Graphs Required",
        "thread_messages": [
            {
                "author": "Upal Chakraborty",
                "date": "2015-09-17T17:49:47",
                "message_text_only": "Hello,\n\nFirst of all, I'm not sure if it is the right place to ask for such help.\nBut, I thought, someone might just help out.\n\nI'm looking for two graphs to analyze the effectiveness of BIP 106, which\ncan be found at\nhttps://github.com/bitcoin/bips/blob/master/bip-0106.mediawiki.\nBlockchain.info currently provides a graph plotting the historical data of\nblock size for each block, which can be found at...\n\nhttps://blockchain.info/charts/avg-block-size?timespan=all&showDataPoints=false&daysAverageString=1&show_header=true&scale=0&address=\n\nI need two similar graphs plotting max block size cap against each block,\ncalculated as per my two proposals in BIP 106. Is it possible for anyone to\nprovide these two graphs assuming max block size cap for block 1 was 1mb ?\n\nThanks & Regards,\nUpal Chakraborty\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150917/e1f248e6/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP 106 : Graphs Required",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Upal Chakraborty"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 988
        }
    },
    {
        "title": "[bitcoin-dev] Fill-or-kill transaction",
        "thread_messages": [
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-09-17T18:41:39",
                "message_text_only": "Fill-or-kill tx is not a new idea and is discussed in the Scaling \nBitcoin workshop. In Satoshi's implementation of nLockTime, a huge range \nof timestamp (from 1970 to 2009) is wasted. By exploiting this unused \nrange and with compromise in the time resolution, a fill-or-kill system \ncould be built with a softfork.\n\n-----------\nTwo new parameters, nLockTime2 and nKillTime are defined:\n\nnLockTime2 (Range: 0-1,853,010)\n0: Tx could be confirmed at or after block 420,000\n1: Tx could be confirmed at or after block 420,004\n.\n.\n719,999: Tx could be confirmed at or after block 3,299,996 (about 55 \nyears from now)\n720,000: Tx could be confirmed if the median time-past >= 1,474,562,048 \n(2016-09-22)\n720,001: Tx could be confirmed if the median time-past >= 1,474,564,096 \n(2016-09-22)\n.\n.\n1,853,010 (max): Tx could be confirmed if the median time-past >= \n3,794,966,528 (2090-04-04)\n\nnKillTime (Range: 0-2047)\nif nLockTime2 < 720,000, the tx could be confirmed at or before block \n(nLockTime2 + nKillTime * 4)\nif nLockTime2 >= 720,000, the tx could be confirmed if the median \ntime-past <= (nLockTime2 - 720,001 + nKillTime) * 2048\n\nFinally, nLockTime = 500,000,000 + nKillTime + nLockTime2 * 2048\n\nSetting a bit flag in tx nVersion will activate the new rules.\n\nThe resolution is 4 blocks or 2048s (34m)\nThe maximum confirmation window is 8188 blocks (56.9 days) or \n16,769,024s (48.5 days)\n\nFor example:\nWith nLockTime2 = 20 and nKillTime = 100, a tx could be confirmed only \nbetween block 420,080 and 420,480\nWith nLockTime2 = 730,000 and nKillTime = 1000, a tx could be confirmed \nonly between median time-past of 1,495,042,048 and 1,497,090,048\n\n----------------\nWhy is this a softfork?\n\nRemember this formula: nLockTime = 500,000,000 + nKillTime + nLockTime2 \n* 2048\n\nFor height based nLockTime2 (<= 719,999)\n\nFor nLockTime2 = 0 and nKillTime = 0, nLockTime = 500,000,000, which \nmeans the tx could be confirmed after 1970-01-01 with the original lock \ntime rule. As the new rule does not allow confirmation until block \n420,000, it's clearly a softfork.\n\nIt is not difficult to see that the growth of nLockTime will never catch \nup nLockTime2.\n\nAt nLockTime2 = 719,999 and nKillTime = 2047, nLockTime = 1,974,559,999, \nwhich means 2016-09-22. However, the new rule will not allow \nconfirmation until block 3,299,996 which is decades to go\n\n\n\nFor time based nLockTime2 (> 720,000)\n\nFor nLockTime2 = 720,000 and nKillTime = 0, nLockTime = 1,974,560,000, \nwhich means the tx could be confirmed after median time-past \n1,474,560,000 (assuming BIP113). However, the new rule will not allow \nconfirmation until 1,474,562,048, therefore a soft fork.\n\nFor nLockTime2 = 720,000 and nKillTime = 2047, nLockTime = \n1,974,562,047, which could be confirmed at 1,474,562,047. Again, the new \nrule will not allow confirmation until 1,474,562,048. The 1 second \ndifference makes it a soft fork.\n\nActually, for every nLockTime2 value >= 720,000, the lock time with the \nnew rule must be 1-2048 seconds later than the original rule.\n\nFor nLockTime2 = 1,853,010 and nKillTime = 2047, nLockTime = \n4,294,966,527, which is the highest possible value with the 32-bit \nnLockTime\n\n----------------\nUser's perspective:\n\nA user wants his tx either filled or killed in about 3 hours. He will \nset a time-based nLockTime2 according to the current median time-past, \nand set nKillTime = 5\n\nA user wants his tx get confirmed in the block 630000, the first block \nwith reward below 10BTC. He is willing to pay high fee but don't want it \ngets into another block. He will set nLockTime2 = 210,000 and nKillTime \n= 0\n\n----------------\nOP_CLTV\n\nTime-based OP_CLTV could be upgraded to support time-based nLockTime2. \nHowever, height-based OP_CLTV is not compatible with nLockTime2. To \nspend a height-based OP_CLTV output, user must use the original \nnLockTime.\n\nWe may need a new OP_CLTV2 which could verify both nLockTime and \nnLockTime2\n\n----------------\n55 years after?\n\nThe height-based nLockTime2 will overflow in 55 years. It is very likely \na hard fork will happen to implement a better fill-or-kill system. If \nnot, we could reboot everything with another tx nVersion for another 55 \nyears."
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-09-17T19:07:34",
                "message_text_only": "Note that this violates present assumptions about transaction validity,\nunless a constraint also exists that any output of such an expiry block is\nnot spent for at least 100 blocks.\n\nDo you have a clean way of ensuring this?\n\nOn Thu, Sep 17, 2015 at 2:41 PM, jl2012 via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Fill-or-kill tx is not a new idea and is discussed in the Scaling Bitcoin\n> workshop. In Satoshi's implementation of nLockTime, a huge range of\n> timestamp (from 1970 to 2009) is wasted. By exploiting this unused range\n> and with compromise in the time resolution, a fill-or-kill system could be\n> built with a softfork.\n>\n> -----------\n> Two new parameters, nLockTime2 and nKillTime are defined:\n>\n> nLockTime2 (Range: 0-1,853,010)\n> 0: Tx could be confirmed at or after block 420,000\n> 1: Tx could be confirmed at or after block 420,004\n> .\n> .\n> 719,999: Tx could be confirmed at or after block 3,299,996 (about 55 years\n> from now)\n> 720,000: Tx could be confirmed if the median time-past >= 1,474,562,048\n> (2016-09-22)\n> 720,001: Tx could be confirmed if the median time-past >= 1,474,564,096\n> (2016-09-22)\n> .\n> .\n> 1,853,010 (max): Tx could be confirmed if the median time-past >=\n> 3,794,966,528 (2090-04-04)\n>\n> nKillTime (Range: 0-2047)\n> if nLockTime2 < 720,000, the tx could be confirmed at or before block\n> (nLockTime2 + nKillTime * 4)\n> if nLockTime2 >= 720,000, the tx could be confirmed if the median\n> time-past <= (nLockTime2 - 720,001 + nKillTime) * 2048\n>\n> Finally, nLockTime = 500,000,000 + nKillTime + nLockTime2 * 2048\n>\n> Setting a bit flag in tx nVersion will activate the new rules.\n>\n> The resolution is 4 blocks or 2048s (34m)\n> The maximum confirmation window is 8188 blocks (56.9 days) or 16,769,024s\n> (48.5 days)\n>\n> For example:\n> With nLockTime2 = 20 and nKillTime = 100, a tx could be confirmed only\n> between block 420,080 and 420,480\n> With nLockTime2 = 730,000 and nKillTime = 1000, a tx could be confirmed\n> only between median time-past of 1,495,042,048 and 1,497,090,048\n>\n> ----------------\n> Why is this a softfork?\n>\n> Remember this formula: nLockTime = 500,000,000 + nKillTime + nLockTime2 *\n> 2048\n>\n> For height based nLockTime2 (<= 719,999)\n>\n> For nLockTime2 = 0 and nKillTime = 0, nLockTime = 500,000,000, which means\n> the tx could be confirmed after 1970-01-01 with the original lock time\n> rule. As the new rule does not allow confirmation until block 420,000, it's\n> clearly a softfork.\n>\n> It is not difficult to see that the growth of nLockTime will never catch\n> up nLockTime2.\n>\n> At nLockTime2 = 719,999 and nKillTime = 2047, nLockTime = 1,974,559,999,\n> which means 2016-09-22. However, the new rule will not allow confirmation\n> until block 3,299,996 which is decades to go\n>\n>\n>\n> For time based nLockTime2 (> 720,000)\n>\n> For nLockTime2 = 720,000 and nKillTime = 0, nLockTime = 1,974,560,000,\n> which means the tx could be confirmed after median time-past 1,474,560,000\n> (assuming BIP113). However, the new rule will not allow confirmation until\n> 1,474,562,048, therefore a soft fork.\n>\n> For nLockTime2 = 720,000 and nKillTime = 2047, nLockTime = 1,974,562,047,\n> which could be confirmed at 1,474,562,047. Again, the new rule will not\n> allow confirmation until 1,474,562,048. The 1 second difference makes it a\n> soft fork.\n>\n> Actually, for every nLockTime2 value >= 720,000, the lock time with the\n> new rule must be 1-2048 seconds later than the original rule.\n>\n> For nLockTime2 = 1,853,010 and nKillTime = 2047, nLockTime =\n> 4,294,966,527, which is the highest possible value with the 32-bit nLockTime\n>\n> ----------------\n> User's perspective:\n>\n> A user wants his tx either filled or killed in about 3 hours. He will set\n> a time-based nLockTime2 according to the current median time-past, and set\n> nKillTime = 5\n>\n> A user wants his tx get confirmed in the block 630000, the first block\n> with reward below 10BTC. He is willing to pay high fee but don't want it\n> gets into another block. He will set nLockTime2 = 210,000 and nKillTime = 0\n>\n> ----------------\n> OP_CLTV\n>\n> Time-based OP_CLTV could be upgraded to support time-based nLockTime2.\n> However, height-based OP_CLTV is not compatible with nLockTime2. To spend a\n> height-based OP_CLTV output, user must use the original nLockTime.\n>\n> We may need a new OP_CLTV2 which could verify both nLockTime and nLockTime2\n>\n> ----------------\n> 55 years after?\n>\n> The height-based nLockTime2 will overflow in 55 years. It is very likely a\n> hard fork will happen to implement a better fill-or-kill system. If not, we\n> could reboot everything with another tx nVersion for another 55 years.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150917/78f51514/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-17T19:14:38",
                "message_text_only": "Fill or kill us normally used for trades and I think it can be confusing.\nPrevious times this has been discussed it has been discussed under\nnExpiryTime or op_height (which enables expiration), for example, in the\nfreimarkets white paper.\n\nAs Mark points out this can be made safe by requiring that all the outputs\nof a transaction that can expire have op_maturity/csv/rcltv of 100. That\nmakes them as reorg-safe as coinbase transactions. Unfortunately this\ndoesn't play very well with p2sh...\nOn Sep 17, 2015 3:08 PM, \"Mark Friedenbach via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Note that this violates present assumptions about transaction validity,\n> unless a constraint also exists that any output of such an expiry block is\n> not spent for at least 100 blocks.\n>\n> Do you have a clean way of ensuring this?\n>\n> On Thu, Sep 17, 2015 at 2:41 PM, jl2012 via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Fill-or-kill tx is not a new idea and is discussed in the Scaling Bitcoin\n>> workshop. In Satoshi's implementation of nLockTime, a huge range of\n>> timestamp (from 1970 to 2009) is wasted. By exploiting this unused range\n>> and with compromise in the time resolution, a fill-or-kill system could be\n>> built with a softfork.\n>>\n>> -----------\n>> Two new parameters, nLockTime2 and nKillTime are defined:\n>>\n>> nLockTime2 (Range: 0-1,853,010)\n>> 0: Tx could be confirmed at or after block 420,000\n>> 1: Tx could be confirmed at or after block 420,004\n>> .\n>> .\n>> 719,999: Tx could be confirmed at or after block 3,299,996 (about 55\n>> years from now)\n>> 720,000: Tx could be confirmed if the median time-past >= 1,474,562,048\n>> (2016-09-22)\n>> 720,001: Tx could be confirmed if the median time-past >= 1,474,564,096\n>> (2016-09-22)\n>> .\n>> .\n>> 1,853,010 (max): Tx could be confirmed if the median time-past >=\n>> 3,794,966,528 (2090-04-04)\n>>\n>> nKillTime (Range: 0-2047)\n>> if nLockTime2 < 720,000, the tx could be confirmed at or before block\n>> (nLockTime2 + nKillTime * 4)\n>> if nLockTime2 >= 720,000, the tx could be confirmed if the median\n>> time-past <= (nLockTime2 - 720,001 + nKillTime) * 2048\n>>\n>> Finally, nLockTime = 500,000,000 + nKillTime + nLockTime2 * 2048\n>>\n>> Setting a bit flag in tx nVersion will activate the new rules.\n>>\n>> The resolution is 4 blocks or 2048s (34m)\n>> The maximum confirmation window is 8188 blocks (56.9 days) or 16,769,024s\n>> (48.5 days)\n>>\n>> For example:\n>> With nLockTime2 = 20 and nKillTime = 100, a tx could be confirmed only\n>> between block 420,080 and 420,480\n>> With nLockTime2 = 730,000 and nKillTime = 1000, a tx could be confirmed\n>> only between median time-past of 1,495,042,048 and 1,497,090,048\n>>\n>> ----------------\n>> Why is this a softfork?\n>>\n>> Remember this formula: nLockTime = 500,000,000 + nKillTime + nLockTime2 *\n>> 2048\n>>\n>> For height based nLockTime2 (<= 719,999)\n>>\n>> For nLockTime2 = 0 and nKillTime = 0, nLockTime = 500,000,000, which\n>> means the tx could be confirmed after 1970-01-01 with the original lock\n>> time rule. As the new rule does not allow confirmation until block 420,000,\n>> it's clearly a softfork.\n>>\n>> It is not difficult to see that the growth of nLockTime will never catch\n>> up nLockTime2.\n>>\n>> At nLockTime2 = 719,999 and nKillTime = 2047, nLockTime = 1,974,559,999,\n>> which means 2016-09-22. However, the new rule will not allow confirmation\n>> until block 3,299,996 which is decades to go\n>>\n>>\n>>\n>> For time based nLockTime2 (> 720,000)\n>>\n>> For nLockTime2 = 720,000 and nKillTime = 0, nLockTime = 1,974,560,000,\n>> which means the tx could be confirmed after median time-past 1,474,560,000\n>> (assuming BIP113). However, the new rule will not allow confirmation until\n>> 1,474,562,048, therefore a soft fork.\n>>\n>> For nLockTime2 = 720,000 and nKillTime = 2047, nLockTime = 1,974,562,047,\n>> which could be confirmed at 1,474,562,047. Again, the new rule will not\n>> allow confirmation until 1,474,562,048. The 1 second difference makes it a\n>> soft fork.\n>>\n>> Actually, for every nLockTime2 value >= 720,000, the lock time with the\n>> new rule must be 1-2048 seconds later than the original rule.\n>>\n>> For nLockTime2 = 1,853,010 and nKillTime = 2047, nLockTime =\n>> 4,294,966,527, which is the highest possible value with the 32-bit nLockTime\n>>\n>> ----------------\n>> User's perspective:\n>>\n>> A user wants his tx either filled or killed in about 3 hours. He will set\n>> a time-based nLockTime2 according to the current median time-past, and set\n>> nKillTime = 5\n>>\n>> A user wants his tx get confirmed in the block 630000, the first block\n>> with reward below 10BTC. He is willing to pay high fee but don't want it\n>> gets into another block. He will set nLockTime2 = 210,000 and nKillTime = 0\n>>\n>> ----------------\n>> OP_CLTV\n>>\n>> Time-based OP_CLTV could be upgraded to support time-based nLockTime2.\n>> However, height-based OP_CLTV is not compatible with nLockTime2. To spend a\n>> height-based OP_CLTV output, user must use the original nLockTime.\n>>\n>> We may need a new OP_CLTV2 which could verify both nLockTime and\n>> nLockTime2\n>>\n>> ----------------\n>> 55 years after?\n>>\n>> The height-based nLockTime2 will overflow in 55 years. It is very likely\n>> a hard fork will happen to implement a better fill-or-kill system. If not,\n>> we could reboot everything with another tx nVersion for another 55 years.\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150917/3db9f191/attachment-0001.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-09-17T22:44:05",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n\n\nOn 17 September 2015 12:14:38 GMT-07:00, \"Jorge Tim\u00f3n via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>Fill or kill us normally used for trades and I think it can be\n>confusing.\n>Previous times this has been discussed it has been discussed under\n>nExpiryTime or op_height (which enables expiration), for example, in\n>the\n>freimarkets white paper.\n>\n>As Mark points out this can be made safe by requiring that all the\n>outputs\n>of a transaction that can expire have op_maturity/csv/rcltv of 100.\n>That\n>makes them as reorg-safe as coinbase transactions. Unfortunately this\n>doesn't play very well with p2sh...\n\nWhy wouldn't that work with p2sh? It can be implemented by a \"treat like Coinbase\" flag in the UTXO set, set when the output is created.\n-----BEGIN PGP SIGNATURE-----\n\niQE9BAEBCgAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJV+0Ip\nAAoJEMCF8hzn9Lncz4MIAIQpz7tKbmjEuETX6BnPatJ50I+kS6CQ4eE+e1irXpbb\nOCMe0A2TGzw9G5t7DgMU1lCcbcbuqOxMOrHYXuGsGkpVtRrLFbkS/F9vCS2RJT0w\nkRkL2ecN8riAjh1lUUgY1CEgVyhkwh6Rw1ZALu3Ba2tISysMfXjAW1GiLHlgxP7g\nxD6zS0OTTokG/7+s1hGK2Nd4q/ZHnfOO1JgiBzrykGNq4enp7nRhiZKhnc/0ILJA\n3WAsAMI14ZUxs95onjey7J3100tZBetYr14jzLRvf+w1klBNSvcen9dr+VhdyXYk\nMPMOwuUtq4OI1vt3HDoMjNFT6olg0gTxzWe8Grn96S4=\n=pP3Q\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-09-18T03:27:54",
                "message_text_only": "Peter Todd via bitcoin-dev \u65bc 2015-09-17 18:44 \u5beb\u5230:\n\n> It can be implemented by a \"treat like Coinbase\" flag in the\n> UTXO set, set when the output is created.\n\nI think this is the cleanest way to implement the maturity requirement. \nI understand why we need maturity, However, requiring 100 block maturity \nwill unfortunately make the system much less appealing since the \nrecipient may not like it. A fill-or-kill tx may still be used as the \ninitial funding tx to the Lightning Network, as long as the counterparty \nis willing to take the extra risk.\n\nActually, a fill-or-kill tx is slight safer than a coinbase tx, \ndepending on the difference between the absolute kill time and actual \nconfirmation time. In a re-org, an orphaned coinbase tx is permanently \ninvalidated and has no hope to be included again. However, an orphaned \nfill-or-kill tx may still be confirmed by another miner. If there is \nstill a few days until the absolute kill time, a fill-or-kill tx is \nbasically as safe as a normal tx.\n\nWith possibility of re-org and unpredictable block interval in mind, \nheight-based fill-or-kill is not very useful since it is difficult for \nusers to determine the actual kill time. If we could abolish the idea of \nheight-based fill-or-kill, the resolution of time-based fill-or-kill \nmight be improved.\n\n\n------------------------------------\n\nChun Wang \u65bc 2015-09-17 18:33 \u5beb\u5230:\n> We are currently using nLockTime for share info and nSequence for\n> extranonce2. I have carefully reviewed the reference implementation of\n> BIP68 and it should be compatible, but this proposal may break the\n> implementation unless it does not affect coinbase transactions.\n> \n\nThe fill-or-kill system is totally optional, using a bit flag in tx \nnVersion to indicate. Everything should be fine unless you are also \nmessing with the nVersion\n\n\n-------------------------------------\n\nBtc Drak \u65bc 2015-09-17 15:12 \u5beb\u5230:\n> Forgive me if I have missed the exact use-case, but this seems overly\n> complex. Surely fill-or-kill refers to getting a transaction confirmed\n> within a few confirms or to drop the tx from the mempool so it wont be\n> considered for inclusion anymore. As such, you could just repurpose a\n> small range of nLocktime such that a TX will be accepted into mempool\n> for a specific period before expiring.\n\nWhat I'm describing is to implement fill-or-kill as consensus rule. \nCertainly, we could implement it at the P2P network level: everything is \nthe same as I described, but the nLockTime2 and nKillTime are for \nreference only and tx validity depends only on the nLockTime. Benevolent \nminers should drop the tx after the suggested kill time but there is no \nguarantee\n\n\n-------------------------------------\n\nI made a mistake in this example:\n\n> A user wants his tx get confirmed in the block 630000, the first block\n> with reward below 10BTC. He is willing to pay high fee but don't want\n> it gets into another block. He will set nLockTime2 = 210,000 and\n> nKillTime = 0\n\nThe correct nLockTime2 for this example should be 210000/4 = 52500"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-18T06:42:42",
                "message_text_only": "On Fri, Sep 18, 2015 at 4:27 AM, jl2012 via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Btc Drak \u65bc 2015-09-17 15:12 \u5beb\u5230:\n>\n>> Forgive me if I have missed the exact use-case, but this seems overly\n>> complex. Surely fill-or-kill refers to getting a transaction confirmed\n>> within a few confirms or to drop the tx from the mempool so it wont be\n>> considered for inclusion anymore. As such, you could just repurpose a\n>> small range of nLocktime such that a TX will be accepted into mempool\n>> for a specific period before expiring.\n>>\n>\n> What I'm describing is to implement fill-or-kill as consensus rule.\n> Certainly, we could implement it at the P2P network level: everything is\n> the same as I described, but the nLockTime2 and nKillTime are for reference\n> only and tx validity depends only on the nLockTime. Benevolent miners\n> should drop the tx after the suggested kill time but there is no guarantee\n>\n\nSure, you can make the scheme I describe consensus based by adding the rule\ntx is not valid to mine after expiry: this still keeps the simplicity I\ndescribed.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/d28eff3f/attachment-0001.html>"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-09-18T09:12:27",
                "message_text_only": "Btc Drak \u65bc 2015-09-18 02:42 \u5beb\u5230:\n> On Fri, Sep 18, 2015 at 4:27 AM, jl2012 via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n>> Btc Drak \u65bc 2015-09-17 15:12 \u5beb\u5230:\n>> \n>>> Forgive me if I have missed the exact use-case, but this seems\n>>> overly\n>>> complex. Surely fill-or-kill refers to getting a transaction\n>>> confirmed\n>>> within a few confirms or to drop the tx from the mempool so it\n>>> wont be\n>>> considered for inclusion anymore. As such, you could just\n>>> repurpose a\n>>> small range of nLocktime such that a TX will be accepted into\n>>> mempool\n>>> for a specific period before expiring.\n>> \n>> What I'm describing is to implement fill-or-kill as consensus rule.\n>> Certainly, we could implement it at the P2P network level:\n>> everything is the same as I described, but the nLockTime2 and\n>> nKillTime are for reference only and tx validity depends only on the\n>> nLockTime. Benevolent miners should drop the tx after the suggested\n>> kill time but there is no guarantee\n> \n> Sure, you can make the scheme I describe consensus based by adding the\n> rule tx is not valid to mine after expiry: this still keeps the\n> simplicity I described.\n\nIf you simply redefine a range of unused nLockTime as nKillTime, users \nwill be constrained to use either nLockTime or nKillTime, but not both \nin the same tx.\n\nIf we are willing to scarify a large range of tx nVersion, say \n10-15bits, the nKillTime data could be embedded there.\n\nAnother option is nSequence, which will allow per-input nKillTime and \nnLockTime.\n\nThe cleanest way, of course, is a hardfork to add a new nKillTime field \nto the tx so people could use nLockTime and nKillTime in parallel."
            },
            {
                "author": "Tom Harding",
                "date": "2015-09-19T15:31:38",
                "message_text_only": "On 9/17/2015 8:27 PM, jl2012 via bitcoin-dev wrote:\n> However, requiring 100 block maturity will unfortunately make the\n> system much less appealing since the recipient may not like it.\n\nThe maturity requirement can be dropped if the expiration height is more\nthat 100 blocks after inclusion height."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-18T13:08:30",
                "message_text_only": "On Sep 17, 2015 6:48 PM, \"Peter Todd\" <pete at petertodd.org> wrote:\n>\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA512\n>\n>\n>\n> On 17 September 2015 12:14:38 GMT-07:00, \"Jorge Tim\u00f3n via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n> >Fill or kill us normally used for trades and I think it can be\n> >confusing.\n> >Previous times this has been discussed it has been discussed under\n> >nExpiryTime or op_height (which enables expiration), for example, in\n> >the\n> >freimarkets white paper.\n> >\n> >As Mark points out this can be made safe by requiring that all the\n> >outputs\n> >of a transaction that can expire have op_maturity/csv/rcltv of 100.\n> >That\n> >makes them as reorg-safe as coinbase transactions. Unfortunately this\n> >doesn't play very well with p2sh...\n>\n> Why wouldn't that work with p2sh? It can be implemented by a \"treat like\nCoinbase\" flag in the UTXO set, set when the output is created.\n\nI said require all scrptPubkeys to have op_maturity/rcltv/csv 100+, but\nyeah, that would work.\n\nRegarding nKillTime, please call it nExpiryTime. And instead of fill or\nkill transactions, ttansactions that expire. It is not only more accurate\n(ie fill or kill is for market orders that complete in their full amount\nnow or are cancelled, not for transfers) and it is the term we have been\nusing for years.\n\nReinventing the wheel by changing its name it's something we do often (for\nexample, rcltv was op_maturity in February 2014 and was \"reinvented\" as\nrcltv recently. This makes it harder for people to learn and follow up.\nPlease don't insist in fok, that's for market orders and works differently\nthan expiries. Expiry is the old name and it's also much more accurate.\n\n>\n> iQE9BAEBCgAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJV+0Ip\n> AAoJEMCF8hzn9Lncz4MIAIQpz7tKbmjEuETX6BnPatJ50I+kS6CQ4eE+e1irXpbb\n> OCMe0A2TGzw9G5t7DgMU1lCcbcbuqOxMOrHYXuGsGkpVtRrLFbkS/F9vCS2RJT0w\n> kRkL2ecN8riAjh1lUUgY1CEgVyhkwh6Rw1ZALu3Ba2tISysMfXjAW1GiLHlgxP7g\n> xD6zS0OTTokG/7+s1hGK2Nd4q/ZHnfOO1JgiBzrykGNq4enp7nRhiZKhnc/0ILJA\n> 3WAsAMI14ZUxs95onjey7J3100tZBetYr14jzLRvf+w1klBNSvcen9dr+VhdyXYk\n> MPMOwuUtq4OI1vt3HDoMjNFT6olg0gTxzWe8Grn96S4=\n> =pP3Q\n> -----END PGP SIGNATURE-----\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/b761932c/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-22T17:45:00",
                "message_text_only": "On Fri, Sep 18, 2015 at 12:44 AM, Peter Todd <pete at petertodd.org> wrote:\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA512\n>\n>\n>\n> On 17 September 2015 12:14:38 GMT-07:00, \"Jorge Tim\u00f3n via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>Fill or kill us normally used for trades and I think it can be\n>>confusing.\n>>Previous times this has been discussed it has been discussed under\n>>nExpiryTime or op_height (which enables expiration), for example, in\n>>the\n>>freimarkets white paper.\n>>\n>>As Mark points out this can be made safe by requiring that all the\n>>outputs\n>>of a transaction that can expire have op_maturity/csv/rcltv of 100.\n>>That\n>>makes them as reorg-safe as coinbase transactions. Unfortunately this\n>>doesn't play very well with p2sh...\n>\n> Why wouldn't that work with p2sh? It can be implemented by a \"treat like Coinbase\" flag in the UTXO set, set when the output is created.\n\nThat would work. I was thinking about requiring OP_MATURITY 100 (or\ngreater than 100) in all the scriptPubKey's of the expiry transaction."
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-09-19T02:01:00",
                "message_text_only": "On Thursday, September 17, 2015 7:14:38 PM Jorge Tim\u00f3n via bitcoin-dev wrote:\n> As Mark points out this can be made safe by requiring that all the outputs\n> of a transaction that can expire have op_maturity/csv/rcltv of 100. That\n> makes them as reorg-safe as coinbase transactions.\n\nNot quite as safe. Remember that mined bitcoins have not only a 100-block \nmaturity requirement, but *also* are expensive to generate.\nMere OP_CHECKMATURITYVERIFY (aka rcltv) has no cost to use...\n\nLuke"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-19T05:09:23",
                "message_text_only": "How them being expensive to generate make them less likely to be reorged?\nWould an op_return output used as a nonce to make the hash of the\ntransaction contain some proof of work make the non-coinbase expirable\ntransaction more secure against reorgs?\nI'm afraid your point is irrelevant.\nOn Sep 19, 2015 4:01 AM, \"Luke Dashjr\" <luke at dashjr.org> wrote:\n\n> On Thursday, September 17, 2015 7:14:38 PM Jorge Tim\u00f3n via bitcoin-dev\n> wrote:\n> > As Mark points out this can be made safe by requiring that all the\n> outputs\n> > of a transaction that can expire have op_maturity/csv/rcltv of 100. That\n> > makes them as reorg-safe as coinbase transactions.\n>\n> Not quite as safe. Remember that mined bitcoins have not only a 100-block\n> maturity requirement, but *also* are expensive to generate.\n> Mere OP_CHECKMATURITYVERIFY (aka rcltv) has no cost to use...\n>\n> Luke\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/e2484b34/attachment.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-17T19:12:08",
                "message_text_only": "Forgive me if I have missed the exact use-case, but this seems overly\ncomplex. Surely fill-or-kill refers to getting a transaction confirmed\nwithin a few confirms or to drop the tx from the mempool so it wont be\nconsidered for inclusion anymore. As such, you could just repurpose a small\nrange of nLocktime such that a TX will be accepted into mempool for a\nspecific period before expiring.\n\nOn Thu, Sep 17, 2015 at 7:41 PM, jl2012 via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Fill-or-kill tx is not a new idea and is discussed in the Scaling Bitcoin\n> workshop. In Satoshi's implementation of nLockTime, a huge range of\n> timestamp (from 1970 to 2009) is wasted. By exploiting this unused range\n> and with compromise in the time resolution, a fill-or-kill system could be\n> built with a softfork.\n>\n> -----------\n> Two new parameters, nLockTime2 and nKillTime are defined:\n>\n> nLockTime2 (Range: 0-1,853,010)\n> 0: Tx could be confirmed at or after block 420,000\n> 1: Tx could be confirmed at or after block 420,004\n> .\n> .\n> 719,999: Tx could be confirmed at or after block 3,299,996 (about 55 years\n> from now)\n> 720,000: Tx could be confirmed if the median time-past >= 1,474,562,048\n> (2016-09-22)\n> 720,001: Tx could be confirmed if the median time-past >= 1,474,564,096\n> (2016-09-22)\n> .\n> .\n> 1,853,010 (max): Tx could be confirmed if the median time-past >=\n> 3,794,966,528 (2090-04-04)\n>\n> nKillTime (Range: 0-2047)\n> if nLockTime2 < 720,000, the tx could be confirmed at or before block\n> (nLockTime2 + nKillTime * 4)\n> if nLockTime2 >= 720,000, the tx could be confirmed if the median\n> time-past <= (nLockTime2 - 720,001 + nKillTime) * 2048\n>\n> Finally, nLockTime = 500,000,000 + nKillTime + nLockTime2 * 2048\n>\n> Setting a bit flag in tx nVersion will activate the new rules.\n>\n> The resolution is 4 blocks or 2048s (34m)\n> The maximum confirmation window is 8188 blocks (56.9 days) or 16,769,024s\n> (48.5 days)\n>\n> For example:\n> With nLockTime2 = 20 and nKillTime = 100, a tx could be confirmed only\n> between block 420,080 and 420,480\n> With nLockTime2 = 730,000 and nKillTime = 1000, a tx could be confirmed\n> only between median time-past of 1,495,042,048 and 1,497,090,048\n>\n> ----------------\n> Why is this a softfork?\n>\n> Remember this formula: nLockTime = 500,000,000 + nKillTime + nLockTime2 *\n> 2048\n>\n> For height based nLockTime2 (<= 719,999)\n>\n> For nLockTime2 = 0 and nKillTime = 0, nLockTime = 500,000,000, which means\n> the tx could be confirmed after 1970-01-01 with the original lock time\n> rule. As the new rule does not allow confirmation until block 420,000, it's\n> clearly a softfork.\n>\n> It is not difficult to see that the growth of nLockTime will never catch\n> up nLockTime2.\n>\n> At nLockTime2 = 719,999 and nKillTime = 2047, nLockTime = 1,974,559,999,\n> which means 2016-09-22. However, the new rule will not allow confirmation\n> until block 3,299,996 which is decades to go\n>\n>\n>\n> For time based nLockTime2 (> 720,000)\n>\n> For nLockTime2 = 720,000 and nKillTime = 0, nLockTime = 1,974,560,000,\n> which means the tx could be confirmed after median time-past 1,474,560,000\n> (assuming BIP113). However, the new rule will not allow confirmation until\n> 1,474,562,048, therefore a soft fork.\n>\n> For nLockTime2 = 720,000 and nKillTime = 2047, nLockTime = 1,974,562,047,\n> which could be confirmed at 1,474,562,047. Again, the new rule will not\n> allow confirmation until 1,474,562,048. The 1 second difference makes it a\n> soft fork.\n>\n> Actually, for every nLockTime2 value >= 720,000, the lock time with the\n> new rule must be 1-2048 seconds later than the original rule.\n>\n> For nLockTime2 = 1,853,010 and nKillTime = 2047, nLockTime =\n> 4,294,966,527, which is the highest possible value with the 32-bit nLockTime\n>\n> ----------------\n> User's perspective:\n>\n> A user wants his tx either filled or killed in about 3 hours. He will set\n> a time-based nLockTime2 according to the current median time-past, and set\n> nKillTime = 5\n>\n> A user wants his tx get confirmed in the block 630000, the first block\n> with reward below 10BTC. He is willing to pay high fee but don't want it\n> gets into another block. He will set nLockTime2 = 210,000 and nKillTime = 0\n>\n> ----------------\n> OP_CLTV\n>\n> Time-based OP_CLTV could be upgraded to support time-based nLockTime2.\n> However, height-based OP_CLTV is not compatible with nLockTime2. To spend a\n> height-based OP_CLTV output, user must use the original nLockTime.\n>\n> We may need a new OP_CLTV2 which could verify both nLockTime and nLockTime2\n>\n> ----------------\n> 55 years after?\n>\n> The height-based nLockTime2 will overflow in 55 years. It is very likely a\n> hard fork will happen to implement a better fill-or-kill system. If not, we\n> could reboot everything with another tx nVersion for another 55 years.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150917/13bdb4db/attachment.html>"
            },
            {
                "author": "Chun Wang",
                "date": "2015-09-17T22:33:19",
                "message_text_only": "We are currently using nLockTime for share info and nSequence for\nextranonce2. I have carefully reviewed the reference implementation of\nBIP68 and it should be compatible, but this proposal may break the\nimplementation unless it does not affect coinbase transactions.\n\nOn Fri, Sep 18, 2015 at 2:41 AM, jl2012 via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Fill-or-kill tx is not a new idea and is discussed in the Scaling Bitcoin\n> workshop. In Satoshi's implementation of nLockTime, a huge range of\n> timestamp (from 1970 to 2009) is wasted. By exploiting this unused range and\n> with compromise in the time resolution, a fill-or-kill system could be built\n> with a softfork.\n>\n> -----------\n> Two new parameters, nLockTime2 and nKillTime are defined:\n>\n> nLockTime2 (Range: 0-1,853,010)\n> 0: Tx could be confirmed at or after block 420,000\n> 1: Tx could be confirmed at or after block 420,004\n> .\n> .\n> 719,999: Tx could be confirmed at or after block 3,299,996 (about 55 years\n> from now)\n> 720,000: Tx could be confirmed if the median time-past >= 1,474,562,048\n> (2016-09-22)\n> 720,001: Tx could be confirmed if the median time-past >= 1,474,564,096\n> (2016-09-22)\n> .\n> .\n> 1,853,010 (max): Tx could be confirmed if the median time-past >=\n> 3,794,966,528 (2090-04-04)\n>\n> nKillTime (Range: 0-2047)\n> if nLockTime2 < 720,000, the tx could be confirmed at or before block\n> (nLockTime2 + nKillTime * 4)\n> if nLockTime2 >= 720,000, the tx could be confirmed if the median time-past\n> <= (nLockTime2 - 720,001 + nKillTime) * 2048\n>\n> Finally, nLockTime = 500,000,000 + nKillTime + nLockTime2 * 2048\n>\n> Setting a bit flag in tx nVersion will activate the new rules.\n>\n> The resolution is 4 blocks or 2048s (34m)\n> The maximum confirmation window is 8188 blocks (56.9 days) or 16,769,024s\n> (48.5 days)\n>\n> For example:\n> With nLockTime2 = 20 and nKillTime = 100, a tx could be confirmed only\n> between block 420,080 and 420,480\n> With nLockTime2 = 730,000 and nKillTime = 1000, a tx could be confirmed only\n> between median time-past of 1,495,042,048 and 1,497,090,048\n>\n> ----------------\n> Why is this a softfork?\n>\n> Remember this formula: nLockTime = 500,000,000 + nKillTime + nLockTime2 *\n> 2048\n>\n> For height based nLockTime2 (<= 719,999)\n>\n> For nLockTime2 = 0 and nKillTime = 0, nLockTime = 500,000,000, which means\n> the tx could be confirmed after 1970-01-01 with the original lock time rule.\n> As the new rule does not allow confirmation until block 420,000, it's\n> clearly a softfork.\n>\n> It is not difficult to see that the growth of nLockTime will never catch up\n> nLockTime2.\n>\n> At nLockTime2 = 719,999 and nKillTime = 2047, nLockTime = 1,974,559,999,\n> which means 2016-09-22. However, the new rule will not allow confirmation\n> until block 3,299,996 which is decades to go\n>\n>\n>\n> For time based nLockTime2 (> 720,000)\n>\n> For nLockTime2 = 720,000 and nKillTime = 0, nLockTime = 1,974,560,000, which\n> means the tx could be confirmed after median time-past 1,474,560,000\n> (assuming BIP113). However, the new rule will not allow confirmation until\n> 1,474,562,048, therefore a soft fork.\n>\n> For nLockTime2 = 720,000 and nKillTime = 2047, nLockTime = 1,974,562,047,\n> which could be confirmed at 1,474,562,047. Again, the new rule will not\n> allow confirmation until 1,474,562,048. The 1 second difference makes it a\n> soft fork.\n>\n> Actually, for every nLockTime2 value >= 720,000, the lock time with the new\n> rule must be 1-2048 seconds later than the original rule.\n>\n> For nLockTime2 = 1,853,010 and nKillTime = 2047, nLockTime = 4,294,966,527,\n> which is the highest possible value with the 32-bit nLockTime\n>\n> ----------------\n> User's perspective:\n>\n> A user wants his tx either filled or killed in about 3 hours. He will set a\n> time-based nLockTime2 according to the current median time-past, and set\n> nKillTime = 5\n>\n> A user wants his tx get confirmed in the block 630000, the first block with\n> reward below 10BTC. He is willing to pay high fee but don't want it gets\n> into another block. He will set nLockTime2 = 210,000 and nKillTime = 0\n>\n> ----------------\n> OP_CLTV\n>\n> Time-based OP_CLTV could be upgraded to support time-based nLockTime2.\n> However, height-based OP_CLTV is not compatible with nLockTime2. To spend a\n> height-based OP_CLTV output, user must use the original nLockTime.\n>\n> We may need a new OP_CLTV2 which could verify both nLockTime and nLockTime2\n>\n> ----------------\n> 55 years after?\n>\n> The height-based nLockTime2 will overflow in 55 years. It is very likely a\n> hard fork will happen to implement a better fill-or-kill system. If not, we\n> could reboot everything with another tx nVersion for another 55 years.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "Fill-or-kill transaction",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Peter Todd",
                "Jorge Tim\u00f3n",
                "Btc Drak",
                "Luke Dashjr",
                "Mark Friedenbach",
                "jl2012 at xbt.hk",
                "Chun Wang",
                "Tom Harding"
            ],
            "messages_count": 14,
            "total_messages_chars_count": 37849
        }
    },
    {
        "title": "[bitcoin-dev] Weekly development meetings on IRC",
        "thread_messages": [
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-09-18T01:07:10",
                "message_text_only": "Hello,\n\nAt Monday's code sprint we had a good idea to schedule a regular developer meeting in #bitcoin-dev.\n\nAttendance is of course voluntary, but it may be good to have a time that many people are expected to be present and current issues can be discussed.\n\nAny preference for days/times?\n\nWhat about e.g. every week 15:00-16:00 UTC on Thursday?\n\nWladimir"
            },
            {
                "author": "Alex Morcos",
                "date": "2015-09-18T02:56:17",
                "message_text_only": "+1\nsounds good to me!\n\n\n\nOn Thu, Sep 17, 2015 at 9:07 PM, Wladimir J. van der Laan via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hello,\n>\n> At Monday's code sprint we had a good idea to schedule a regular developer\n> meeting in #bitcoin-dev.\n>\n> Attendance is of course voluntary, but it may be good to have a time that\n> many people are expected to be present and current issues can be discussed.\n>\n> Any preference for days/times?\n>\n> What about e.g. every week 15:00-16:00 UTC on Thursday?\n>\n> Wladimir\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150917/074771ec/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-09-18T04:19:09",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n\n\nOn 17 September 2015 19:56:17 GMT-07:00, Alex Morcos via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>+1\n>sounds good to me!\n\n+2\n\nMy schedule is chaotic, but I'll try to attend.\n-----BEGIN PGP SIGNATURE-----\n\niQE9BAEBCgAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJV+5Cr\nAAoJEMCF8hzn9Lncz4MH/Rx7HDZ0eob6PWnA9zB0He2AvhJwhWsgfGZvj8C1CCHS\nQ8JmtcVmaq8fcNFLIb3r/aN/cZxKiY/9pbceHe2/l8cYDH6VUsLUear/bjDOaBL5\nh76jIswFcr54ifjrwXIvHC98x9NeezcbvkFNOgxRWrgFO28saxgq78lOHp8g5mZ9\nsL6/nBLqadCH59c5ieJHATyb8nR2qSZRj3fGUuuI9nQnQMkmSEV09URNr7LBgRAE\nsuR09jsLXrHcME7XAryw9pl6w/Fuh+Ygcpij8eLsf+uLvr/vzkBPpthr0h9jg3Np\nJtm0mpgMsNg+p2koQbhHWYa5E+dzIEXoVURFm0y+H5Y=\n=/ZFP\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-09-18T04:30:37",
                "message_text_only": "I am unlikely to attend at that time, but there is no time that will fit\neverybody's schedules. I approve of the idea and look forward to reading\nthe logs.\n\nOn Thu, Sep 17, 2015 at 9:07 PM, Wladimir J. van der Laan via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hello,\n>\n> At Monday's code sprint we had a good idea to schedule a regular developer\n> meeting in #bitcoin-dev.\n>\n> Attendance is of course voluntary, but it may be good to have a time that\n> many people are expected to be present and current issues can be discussed.\n>\n> Any preference for days/times?\n>\n> What about e.g. every week 15:00-16:00 UTC on Thursday?\n>\n> Wladimir\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/095b3f02/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-09-18T04:57:14",
                "message_text_only": "On Friday, September 18, 2015 1:07:10 AM Wladimir J. van der Laan via \nbitcoin-dev wrote:\n> At Monday's code sprint we had a good idea to schedule a regular developer\n> meeting in #bitcoin-dev.\n> \n> Attendance is of course voluntary, but it may be good to have a time that\n> many people are expected to be present and current issues can be\n> discussed.\n\nI think it's important to make a point that these meetings are for \ndiscussions, and explicitly never decisions, to avoid a repeat of the P2SH \nevents when people have to miss it.\n\n> Any preference for days/times?\n> \n> What about e.g. every week 15:00-16:00 UTC on Thursday?\n\nI think I would prefer a bit later, but I could probably make this work. \nProbably should try to make it more practical for California devs though, \nsince there are a number of them.\n\nLuke"
            },
            {
                "author": "Jonas Schnelli",
                "date": "2015-09-18T07:04:58",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n> On Friday, September 18, 2015 1:07:10 AM Wladimir J. van der Laan\n> via bitcoin-dev wrote:\n>> At Monday's code sprint we had a good idea to schedule a regular\n>> developer meeting in #bitcoin-dev.\n>> \n>> Attendance is of course voluntary, but it may be good to have a\n>> time that many people are expected to be present and current\n>> issues can be discussed.\n> \n> I think it's important to make a point that these meetings are for\n>  discussions, and explicitly never decisions, to avoid a repeat of\n> the P2SH events when people have to miss it.\n> \n>> Any preference for days/times?\n>> \n>> What about e.g. every week 15:00-16:00 UTC on Thursday?\n\n+1 for the weekly IRC meetings.\n\nFor time and date maybe a Doodle could help:\nhttp://doodle.com/poll/cihug53sa8u4h2in#table\n\n\n- ---\njonas\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAEBCAAGBQJV+7eaAAoJECnUvLZBb1PsESgQAIQnHDe7owv3OzMvxwupzGaD\nIkTsRtCTSntIb75Wb/KYc0y1L3ilSENRTfZ4nNc4QquqTstkhjU5t+u9T3Mak4D3\n2/5AOiJhV6OLYav1SC7uSJh0B4halnZlTwclU7NOvmnkg40DUpNxmEbf+RvUZup3\nJ0EQFxIuhtjIz0HfZTvw6wmstrP3+UJZTbM5fg0FO3TpgmGybAUoQ3eWgRa7v/gR\nOUxnAV//Mus2O80/Z+c5KycZ1Dqc/iN7cQsQFt7kEIK0epkJhkTjoRrW9MyQW04d\n1jv7d0mjEJt+2EiC8UuwpaW2eFmeFnGR0pL4UCY1QsDzGENyHKNbrVg26v1AzIbB\nSNEYN1+fmsXQYosY5t0Z887Ij+u4/GLHciimh5z7fbI5VB1Ng6Wl84maVmP5Zb3L\nMHtkIqQ00RX7GIXUp5+u7eKOO0pH9S08tqo5Ag6ceynJ2lh4Wr8BCNghHzH+ybNJ\nNG3BaSkQmjxnWjW3XplaYyxz6E4qJ8id7qH4s0iaNKchAfXiCaBtbcMfljlyBSn/\nUbzHJk5jlWZEVpxmiMRctFxusk6GI4P+0eRTJrkffskLEjImUN93A8hOLs5Dy+gI\nmm/PZKT2S2qKKa6dlI2kpyPZuRbN7+WSi/FwI0YsUDGl+IoDSqTX7WqRY8cY40ji\nrUgzYTw3Won3BcjHTe9y\n=JsXj\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-18T08:20:54",
                "message_text_only": "I love the weekly meeting idea...but timezones might be an issue.\n\nMy general preference would be afternoons to late evenings pacific time, but that translates to late night/early morning for those in europe.\n\nOn September 18, 2015 12:04:58 AM PDT, Jonas Schnelli via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>-----BEGIN PGP SIGNED MESSAGE-----\n>Hash: SHA256\n>\n>> On Friday, September 18, 2015 1:07:10 AM Wladimir J. van der Laan\n>> via bitcoin-dev wrote:\n>>> At Monday's code sprint we had a good idea to schedule a regular\n>>> developer meeting in #bitcoin-dev.\n>>> \n>>> Attendance is of course voluntary, but it may be good to have a\n>>> time that many people are expected to be present and current\n>>> issues can be discussed.\n>> \n>> I think it's important to make a point that these meetings are for\n>>  discussions, and explicitly never decisions, to avoid a repeat of\n>> the P2SH events when people have to miss it.\n>> \n>>> Any preference for days/times?\n>>> \n>>> What about e.g. every week 15:00-16:00 UTC on Thursday?\n>\n>+1 for the weekly IRC meetings.\n>\n>For time and date maybe a Doodle could help:\n>http://doodle.com/poll/cihug53sa8u4h2in#table\n>\n>\n>- ---\n>jonas\n>-----BEGIN PGP SIGNATURE-----\n>Version: GnuPG v2\n>\n>iQIcBAEBCAAGBQJV+7eaAAoJECnUvLZBb1PsESgQAIQnHDe7owv3OzMvxwupzGaD\n>IkTsRtCTSntIb75Wb/KYc0y1L3ilSENRTfZ4nNc4QquqTstkhjU5t+u9T3Mak4D3\n>2/5AOiJhV6OLYav1SC7uSJh0B4halnZlTwclU7NOvmnkg40DUpNxmEbf+RvUZup3\n>J0EQFxIuhtjIz0HfZTvw6wmstrP3+UJZTbM5fg0FO3TpgmGybAUoQ3eWgRa7v/gR\n>OUxnAV//Mus2O80/Z+c5KycZ1Dqc/iN7cQsQFt7kEIK0epkJhkTjoRrW9MyQW04d\n>1jv7d0mjEJt+2EiC8UuwpaW2eFmeFnGR0pL4UCY1QsDzGENyHKNbrVg26v1AzIbB\n>SNEYN1+fmsXQYosY5t0Z887Ij+u4/GLHciimh5z7fbI5VB1Ng6Wl84maVmP5Zb3L\n>MHtkIqQ00RX7GIXUp5+u7eKOO0pH9S08tqo5Ag6ceynJ2lh4Wr8BCNghHzH+ybNJ\n>NG3BaSkQmjxnWjW3XplaYyxz6E4qJ8id7qH4s0iaNKchAfXiCaBtbcMfljlyBSn/\n>UbzHJk5jlWZEVpxmiMRctFxusk6GI4P+0eRTJrkffskLEjImUN93A8hOLs5Dy+gI\n>mm/PZKT2S2qKKa6dlI2kpyPZuRbN7+WSi/FwI0YsUDGl+IoDSqTX7WqRY8cY40ji\n>rUgzYTw3Won3BcjHTe9y\n>=JsXj\n>-----END PGP SIGNATURE-----\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/7eecad48/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2015-09-18T20:14:29",
                "message_text_only": "Generally in favor, but for practical purposes can we select a timezone\nthat is available in Google Calendar? It appears it does not directly\nsupport UTC...\n\nOn 09/18/15 01:07, Wladimir J. van der Laan via bitcoin-dev wrote:\n> Hello,\n> \n> At Monday's code sprint we had a good idea to schedule a regular developer meeting in #bitcoin-dev.\n> \n> Attendance is of course voluntary, but it may be good to have a time that many people are expected to be present and current issues can be discussed.\n> \n> Any preference for days/times?\n> \n> What about e.g. every week 15:00-16:00 UTC on Thursday?\n> \n> Wladimir\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-18T20:24:50",
                "message_text_only": "Google calendar is localised, so it doesn't matter. The problem with\nquoting UTC anyway it the meeting times are going to change for those that\nobserve DST. It would be much better to quote an actual timezone of an\nactual area so it will remain constant, like 1700 CEST, or 0900AM PDT for\nexample. Otherwise when the clocks change, what was a convenient meeting\ntime will become inconvenient for some.\n\nOn Fri, Sep 18, 2015 at 9:14 PM, Matt Corallo via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Generally in favor, but for practical purposes can we select a timezone\n> that is available in Google Calendar? It appears it does not directly\n> support UTC...\n>\n> On 09/18/15 01:07, Wladimir J. van der Laan via bitcoin-dev wrote:\n> > Hello,\n> >\n> > At Monday's code sprint we had a good idea to schedule a regular\n> developer meeting in #bitcoin-dev.\n> >\n> > Attendance is of course voluntary, but it may be good to have a time\n> that many people are expected to be present and current issues can be\n> discussed.\n> >\n> > Any preference for days/times?\n> >\n> > What about e.g. every week 15:00-16:00 UTC on Thursday?\n> >\n> > Wladimir\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/c4455a41/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2015-09-18T20:27:00",
                "message_text_only": "Google Calendar is localized, but has an option to change the timezone\nof an event, it just doesnt have UTC in its options. So, yes, we should\nuse something that observes DST in roughly the same way as everyone else\n- CEST/PDT/EST/etc.\n\nOn 09/18/15 20:24, Btc Drak wrote:\n> Google calendar is localised, so it doesn't matter. The problem with\n> quoting UTC anyway it the meeting times are going to change for those\n> that observe DST. It would be much better to quote an actual timezone of\n> an actual area so it will remain constant, like 1700 CEST, or 0900AM PDT\n> for example. Otherwise when the clocks change, what was a convenient\n> meeting time will become inconvenient for some.\n> \n> On Fri, Sep 18, 2015 at 9:14 PM, Matt Corallo via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n>     Generally in favor, but for practical purposes can we select a timezone\n>     that is available in Google Calendar? It appears it does not directly\n>     support UTC...\n> \n>     On 09/18/15 01:07, Wladimir J. van der Laan via bitcoin-dev wrote:\n>     > Hello,\n>     >\n>     > At Monday's code sprint we had a good idea to schedule a regular\n>     developer meeting in #bitcoin-dev.\n>     >\n>     > Attendance is of course voluntary, but it may be good to have a\n>     time that many people are expected to be present and current issues\n>     can be discussed.\n>     >\n>     > Any preference for days/times?\n>     >\n>     > What about e.g. every week 15:00-16:00 UTC on Thursday?\n>     >\n>     > Wladimir\n>     > _______________________________________________\n>     > bitcoin-dev mailing list\n>     > bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     >\n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n>"
            },
            {
                "author": "Jeffrey Paul",
                "date": "2015-09-18T20:30:23",
                "message_text_only": "> On 18 Sep 2015, at 22:27, Matt Corallo via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> Google Calendar is localized, but has an option to change the timezone\n> of an event, it just doesnt have UTC in its options. So, yes, we should\n> use something that observes DST in roughly the same way as everyone else\n> - CEST/PDT/EST/etc.\n\nAccording to this post, it is possible to configure Google Calendar to show an additional time zone to your localized one, and GMT/UTC is indeed in the list.\n\n    https://productforums.google.com/forum/#!topic/calendar/y6uaiAdZrIg\n\n-jp\n\n--\nJeffrey Paul                                                      EEQJ\njp at eeqj.com                                           https://eeqj.com\n+1-800-403-1126 (America)                  +1-312-361-0355 (Worldwide)\n5539 AD00 DE4C 42F3 AFE1                      1575 0524 43F4 DF2A 55C2"
            },
            {
                "author": "Matt Corallo",
                "date": "2015-09-18T20:34:43",
                "message_text_only": "I believe that is out of date. I see neither UTC nor GMT on the website nor on Android.\n\nMatt\n\nOn September 18, 2015 4:30:23 PM EDT, Jeffrey Paul <jp at eeqj.com> wrote:\n>\n>> On 18 Sep 2015, at 22:27, Matt Corallo via bitcoin-dev\n><bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>> Google Calendar is localized, but has an option to change the\n>timezone\n>> of an event, it just doesnt have UTC in its options. So, yes, we\n>should\n>> use something that observes DST in roughly the same way as everyone\n>else\n>> - CEST/PDT/EST/etc.\n>\n>According to this post, it is possible to configure Google Calendar to\n>show an additional time zone to your localized one, and GMT/UTC is\n>indeed in the list.\n>\n>    https://productforums.google.com/forum/#!topic/calendar/y6uaiAdZrIg\n>\n>-jp\n>\n>--\n>Jeffrey Paul                                                      EEQJ\n>jp at eeqj.com                                           https://eeqj.com\n>+1-800-403-1126 (America)                  +1-312-361-0355 (Worldwide)\n>5539 AD00 DE4C 42F3 AFE1                      1575 0524 43F4 DF2A 55C2"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-09-18T20:31:28",
                "message_text_only": "On Fri, Sep 18, 2015 at 8:27 PM, Matt Corallo via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Google Calendar is localized, but has an option to change the timezone\n> of an event, it just doesnt have UTC in its options. So, yes, we should\n> use something that observes DST in roughly the same way as everyone else\n> - CEST/PDT/EST/etc.\n\nuh. There is fairly little global consistency in DST usage. Lots of\nplaces do dst on different dates.\n\nSo if it's in some DST timezone it's likely to move twice each change\nfor some subset of the people who do it.\n\nE.g. europe and US end DST one week apart."
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-18T20:34:59",
                "message_text_only": "Urgh... Can we hardfork time? It's clearly in need of an upgrade...\n\nOn Fri, Sep 18, 2015 at 9:31 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Fri, Sep 18, 2015 at 8:27 PM, Matt Corallo via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Google Calendar is localized, but has an option to change the timezone\n> > of an event, it just doesnt have UTC in its options. So, yes, we should\n> > use something that observes DST in roughly the same way as everyone else\n> > - CEST/PDT/EST/etc.\n>\n> uh. There is fairly little global consistency in DST usage. Lots of\n> places do dst on different dates.\n>\n> So if it's in some DST timezone it's likely to move twice each change\n> for some subset of the people who do it.\n>\n> E.g. europe and US end DST one week apart.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/09bbdbe3/attachment.html>"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-09-21T13:01:52",
                "message_text_only": "It is possible to softfork. Just use Iceland time. Iceland time = UTC \nwithout DST\n\nBtc Drak via bitcoin-dev \u65bc 2015-09-18 16:34 \u5beb\u5230:\n> Urgh... Can we hardfork time? It's clearly in need of an upgrade...\n> \n> On Fri, Sep 18, 2015 at 9:31 PM, Gregory Maxwell <gmaxwell at gmail.com>\n> wrote:\n> \n>> On Fri, Sep 18, 2015 at 8:27 PM, Matt Corallo via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> Google Calendar is localized, but has an option to change the\n>> timezone\n>>> of an event, it just doesnt have UTC in its options. So, yes, we\n>> should\n>>> use something that observes DST in roughly the same way as\n>> everyone else\n>>> - CEST/PDT/EST/etc.\n>> \n>> uh. There is fairly little global consistency in DST usage. Lots of\n>> places do dst on different dates.\n>> \n>> So if it's in some DST timezone it's likely to move twice each\n>> change\n>> for some subset of the people who do it.\n>> \n>> E.g. europe and US end DST one week apart.\n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Matt Corallo",
                "date": "2015-09-18T20:36:41",
                "message_text_only": "Yes, I'm aware, however they are closer to each other than UTC is to either :p.\n\nOn September 18, 2015 4:31:28 PM EDT, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n>On Fri, Sep 18, 2015 at 8:27 PM, Matt Corallo via bitcoin-dev\n><bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Google Calendar is localized, but has an option to change the\n>timezone\n>> of an event, it just doesnt have UTC in its options. So, yes, we\n>should\n>> use something that observes DST in roughly the same way as everyone\n>else\n>> - CEST/PDT/EST/etc.\n>\n>uh. There is fairly little global consistency in DST usage. Lots of\n>places do dst on different dates.\n>\n>So if it's in some DST timezone it's likely to move twice each change\n>for some subset of the people who do it.\n>\n>E.g. europe and US end DST one week apart."
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-09-18T21:50:04",
                "message_text_only": "On Friday, September 18, 2015 8:24:50 PM Btc Drak via bitcoin-dev wrote:\n> Google calendar is localised, so it doesn't matter. The problem with\n> quoting UTC anyway it the meeting times are going to change for those that\n> observe DST. It would be much better to quote an actual timezone of an\n> actual area so it will remain constant, like 1700 CEST, or 0900AM PDT for\n> example. Otherwise when the clocks change, what was a convenient meeting\n> time will become inconvenient for some.\n\nNot everyone does crazy clock-changing. Using such a time system for \nscheduling seems to inconvenience the wrong position. (although perhaps \narguably better since most people probably use DST) :p\n\n(Aside, if Google Calendar can't support standard UTC, that sounds like an \nargument against using Google Calendar...)\n\n> Urgh... Can we hardfork time? It's clearly in need of an upgrade...\n\nTonal time works nice any consistently. :D\n\nLuke"
            },
            {
                "author": "Dave Scotese",
                "date": "2015-09-18T23:29:42",
                "message_text_only": "I am in a timezone that uses DST (currently PDT), but I would like us to\nuse a timezone that does NOT use DST.  It will be nice to have something\nthat reflects the seasonal patterns like my own body does.  I hate the time\nchange in both ways.\n\nOn Fri, Sep 18, 2015 at 2:50 PM, Luke Dashjr via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Friday, September 18, 2015 8:24:50 PM Btc Drak via bitcoin-dev wrote:\n> > Google calendar is localised, so it doesn't matter. The problem with\n> > quoting UTC anyway it the meeting times are going to change for those\n> that\n> > observe DST. It would be much better to quote an actual timezone of an\n> > actual area so it will remain constant, like 1700 CEST, or 0900AM PDT for\n> > example. Otherwise when the clocks change, what was a convenient meeting\n> > time will become inconvenient for some.\n>\n> Not everyone does crazy clock-changing. Using such a time system for\n> scheduling seems to inconvenience the wrong position. (although perhaps\n> arguably better since most people probably use DST) :p\n>\n> (Aside, if Google Calendar can't support standard UTC, that sounds like an\n> argument against using Google Calendar...)\n>\n> > Urgh... Can we hardfork time? It's clearly in need of an upgrade...\n>\n> Tonal time works nice any consistently. :D\n>\n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n\n-- \nI like to provide some work at no charge to prove my value. Do you need a\ntechie?\nI own Litmocracy <http://www.litmocracy.com> and Meme Racing\n<http://www.memeracing.net> (in alpha).\nI'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which\nnow accepts Bitcoin.\nI also code for The Dollar Vigilante <http://dollarvigilante.com/>.\n\"He ought to find it more profitable to play by the rules\" - Satoshi\nNakamoto\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/3727a8c0/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-09-18T21:50:33",
                "message_text_only": "On Friday, September 18, 2015 8:24:50 PM Btc Drak via bitcoin-dev wrote:\n> Google calendar is localised, so it doesn't matter. The problem with\n> quoting UTC anyway it the meeting times are going to change for those that\n> observe DST. It would be much better to quote an actual timezone of an\n> actual area so it will remain constant, like 1700 CEST, or 0900AM PDT for\n> example. Otherwise when the clocks change, what was a convenient meeting\n> time will become inconvenient for some.\n\nNot everyone does crazy clock-changing. Using such a time system for \nscheduling seems to inconvenience the wrong position. (although perhaps \narguably better since most people probably use DST) :p\n\n(Aside, if Google Calendar can't support standard UTC, that sounds like an \nargument against using Google Calendar...)\n\n> Urgh... Can we hardfork time? It's clearly in need of an upgrade...\n\nTonal time works nice and consistently. :D\n\nLuke"
            },
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-09-21T13:29:15",
                "message_text_only": "On Fri, Sep 18, 2015 at 03:07:10AM +0200, Wladimir J. van der Laan wrote:\n> Hello,\n> \n> At Monday's code sprint we had a good idea to schedule a regular developer meeting in #bitcoin-dev.\n> \n> Attendance is of course voluntary, but it may be good to have a time that many people are expected to be present and current issues can be discussed.\n> \n> Any preference for days/times?\n> \n> What about e.g. every week 15:00-16:00 UTC on Thursday?\n\n>From Jonasschnelli's doodle ( http://doodle.com/poll/cihug53sa8u4h2in#table ) it appears that Thursday 19:00 UTC - 20:00 UTC is the most popular time.\n\nI think scheduling the meeting in UTC (=Iceland time) makes sense internationally because different locales have different DST or no DST at all, so all in all that makes it more complex. It's true that this can make a convenient time less convenient half of the year, for some people, but I don't think there's a time that works for everyone anyway...\n\nWladimir"
            },
            {
                "author": "gb",
                "date": "2015-09-21T13:51:29",
                "message_text_only": "Although the planning for this a bit far along now, one consideration I\nmight add from experience on working with other transglobal IT projects\nis the effect of timezones on local mood/alertness/awareness etc. The\nguys at 9am pinging on their first coffee in the antipodes will be in a\ndifferent mindset than those at 21:00 in Europe, and this is\nunavoidable. What is possible is to schedule the meeting every other\nweek at a time that is better for the \"other\" half, whoever that might\nbe. This comes at the cost of not having an exactly same time set every\nweek.\n\nOn Mon, 2015-09-21 at 15:29 +0200, Wladimir J. van der Laan via\nbitcoin-dev wrote:\n> On Fri, Sep 18, 2015 at 03:07:10AM +0200, Wladimir J. van der Laan wrote:\n> > Hello,\n> > \n> > At Monday's code sprint we had a good idea to schedule a regular developer meeting in #bitcoin-dev.\n> > \n> > Attendance is of course voluntary, but it may be good to have a time that many people are expected to be present and current issues can be discussed.\n> > \n> > Any preference for days/times?\n> > \n> > What about e.g. every week 15:00-16:00 UTC on Thursday?\n> \n> From Jonasschnelli's doodle ( http://doodle.com/poll/cihug53sa8u4h2in#table ) it appears that Thursday 19:00 UTC - 20:00 UTC is the most popular time.\n> \n> I think scheduling the meeting in UTC (=Iceland time) makes sense internationally because different locales have different DST or no DST at all, so all in all that makes it more complex. It's true that this can make a convenient time less convenient half of the year, for some people, but I don't think there's a time that works for everyone anyway...\n> \n> Wladimir\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-09-22T14:03:02",
                "message_text_only": "On Mon, Sep 21, 2015 at 03:51:29PM +0200, gb wrote:\n> \n> Although the planning for this a bit far along now, one consideration I\n> might add from experience on working with other transglobal IT projects\n\nNah, we can always change the scheduling later... But let's first try it out with one time.\n\nW"
            }
        ],
        "thread_summary": {
            "title": "Weekly development meetings on IRC",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Lombrozo",
                "jl2012 at xbt.hk",
                "Jeffrey Paul",
                "gb",
                "Peter Todd",
                "Dave Scotese",
                "Luke Dashjr",
                "Alex Morcos",
                "Wladimir J. van der Laan",
                "Mark Friedenbach",
                "Matt Corallo",
                "Btc Drak",
                "Gregory Maxwell",
                "Jonas Schnelli"
            ],
            "messages_count": 22,
            "total_messages_chars_count": 25125
        }
    },
    {
        "title": "[bitcoin-dev] Hash of UTXO set as consensus-critical",
        "thread_messages": [
            {
                "author": "Rune Kj\u00e6r Svendsen",
                "date": "2015-09-18T19:05:37",
                "message_text_only": "Currently, when a new node wants to join the network, it needs to retrieve the entire blockchain history, starting from January 2009 and up until now, in order to derive a UTXO set that it can verify new blocks/transactions against. With a blockchain size of 40GB and a UTXO size of around 1GB, the extra bandwidth required is significant, and will keep increasing indefinitely. If a newly mined block were to include the UTXO set hash of the chain up until the previous block \u2014 the hash of the UTXO set on top of which this block builds \u2014 then new nodes, who want to know whether a transaction is valid, would be able to acquire the UTXO set in a trustless manner, by only verifying proof-of-work headers, and knowing that a block with an invalid UTXO set hash would be rejected.\n\nI\u2019m not talking about calculating a complicated tree structure from the UTXO set, which would put further burden on already burdened Bitcoin Core nodes. We simply include the hash of the current UTXO set in a newly created block, such that the transactions in the new block build *on top* of the UTXO set whose hash is specified. This actually alleviates Bitcoin Core nodes, as it will now become possible for nodes without the entire blockchain to answer SPV queries (by retrieving the UTXO set trustlessly and using this to answer queries). It also saves bandwidth for Bitcore Core nodes, who only need to send roughly 1GB of data, in order to synchronise a node, rather than 40GB+. I will continue to run a full Bitcoin Core node, saving the entire blockchain history, but it shouldn\u2019t be a requirement to hold the entire transaction history in order to start verifying new transactions.\n\nAs far as I can see, this also forces miners to actually maintain an UTXO set, rather than just build on top of the chain with the most proof-of-work. Producing a UTXO set and verifying a block against a chain is the same thing, so by including the hash of the UTXO set we force miners to verify the block that they want to build on top of.\n\nAm I missing something obvious, because as far as I can see, this solves the problem of quadratic time complexity for initial sync: http://www.youtube.com/watch?v=TgjrS-BPWDQ&t=2h02m12s\n\nThe only added step to verifying a block is to hash the UTXO set. So it does require additional computation, but most modern CPUs have a SHA256 throughput of around 500 MB/s, which means it takes only two seconds to hash the UTXO set. And this can be improved further (GPUs can do 2-3 GB/s). A small sacrifice for the added ease of initial syncing, in my opinion.\n\n/Rune"
            },
            {
                "author": "Patrick Strateman",
                "date": "2015-09-18T19:43:13",
                "message_text_only": "Full nodes using UTXO set commitments is a change to the bitcoin\nsecurity model.\n\nCurrently an attacker with >50% of the network hashrate can rewrite history.\n\nIf full nodes rely on UTXO set commitments such an attacker could create\nan infinite number of bitcoins (as in many times more than the current\n21 million bitcoin limit).\n\nBefore we consider mechanisms for UTXO set commitments, we should\nseriously discuss whether the security model reduction is reasonable.\n\nOn 09/18/2015 12:05 PM, Rune Kj\u00e6r Svendsen via bitcoin-dev wrote:\n> Currently, when a new node wants to join the network, it needs to retrieve the entire blockchain history, starting from January 2009 and up until now, in order to derive a UTXO set that it can verify new blocks/transactions against. With a blockchain size of 40GB and a UTXO size of around 1GB, the extra bandwidth required is significant, and will keep increasing indefinitely. If a newly mined block were to include the UTXO set hash of the chain up until the previous block \u2014 the hash of the UTXO set on top of which this block builds \u2014 then new nodes, who want to know whether a transaction is valid, would be able to acquire the UTXO set in a trustless manner, by only verifying proof-of-work headers, and knowing that a block with an invalid UTXO set hash would be rejected.\n>\n> I\u2019m not talking about calculating a complicated tree structure from the UTXO set, which would put further burden on already burdened Bitcoin Core nodes. We simply include the hash of the current UTXO set in a newly created block, such that the transactions in the new block build *on top* of the UTXO set whose hash is specified. This actually alleviates Bitcoin Core nodes, as it will now become possible for nodes without the entire blockchain to answer SPV queries (by retrieving the UTXO set trustlessly and using this to answer queries). It also saves bandwidth for Bitcore Core nodes, who only need to send roughly 1GB of data, in order to synchronise a node, rather than 40GB+. I will continue to run a full Bitcoin Core node, saving the entire blockchain history, but it shouldn\u2019t be a requirement to hold the entire transaction history in order to start verifying new transactions.\n>\n> As far as I can see, this also forces miners to actually maintain an UTXO set, rather than just build on top of the chain with the most proof-of-work. Producing a UTXO set and verifying a block against a chain is the same thing, so by including the hash of the UTXO set we force miners to verify the block that they want to build on top of.\n>\n> Am I missing something obvious, because as far as I can see, this solves the problem of quadratic time complexity for initial sync: http://www.youtube.com/watch?v=TgjrS-BPWDQ&t=2h02m12s\n>\n> The only added step to verifying a block is to hash the UTXO set. So it does require additional computation, but most modern CPUs have a SHA256 throughput of around 500 MB/s, which means it takes only two seconds to hash the UTXO set. And this can be improved further (GPUs can do 2-3 GB/s). A small sacrifice for the added ease of initial syncing, in my opinion.\n>\n> /Rune\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Alex Morcos",
                "date": "2015-09-18T20:07:25",
                "message_text_only": "I guess I always assumed that UTXO set commitments were an alternative\nsecurity model (between SPV and full-node), not that they would cause the\nexisting security model to be deprecated.\n\n\nOn Fri, Sep 18, 2015 at 3:43 PM, Patrick Strateman via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Full nodes using UTXO set commitments is a change to the bitcoin\n> security model.\n>\n> Currently an attacker with >50% of the network hashrate can rewrite\n> history.\n>\n> If full nodes rely on UTXO set commitments such an attacker could create\n> an infinite number of bitcoins (as in many times more than the current\n> 21 million bitcoin limit).\n>\n> Before we consider mechanisms for UTXO set commitments, we should\n> seriously discuss whether the security model reduction is reasonable.\n>\n> On 09/18/2015 12:05 PM, Rune Kj\u00e6r Svendsen via bitcoin-dev wrote:\n> > Currently, when a new node wants to join the network, it needs to\n> retrieve the entire blockchain history, starting from January 2009 and up\n> until now, in order to derive a UTXO set that it can verify new\n> blocks/transactions against. With a blockchain size of 40GB and a UTXO size\n> of around 1GB, the extra bandwidth required is significant, and will keep\n> increasing indefinitely. If a newly mined block were to include the UTXO\n> set hash of the chain up until the previous block \u2014 the hash of the UTXO\n> set on top of which this block builds \u2014 then new nodes, who want to know\n> whether a transaction is valid, would be able to acquire the UTXO set in a\n> trustless manner, by only verifying proof-of-work headers, and knowing that\n> a block with an invalid UTXO set hash would be rejected.\n> >\n> > I\u2019m not talking about calculating a complicated tree structure from the\n> UTXO set, which would put further burden on already burdened Bitcoin Core\n> nodes. We simply include the hash of the current UTXO set in a newly\n> created block, such that the transactions in the new block build *on top*\n> of the UTXO set whose hash is specified. This actually alleviates Bitcoin\n> Core nodes, as it will now become possible for nodes without the entire\n> blockchain to answer SPV queries (by retrieving the UTXO set trustlessly\n> and using this to answer queries). It also saves bandwidth for Bitcore Core\n> nodes, who only need to send roughly 1GB of data, in order to synchronise a\n> node, rather than 40GB+. I will continue to run a full Bitcoin Core node,\n> saving the entire blockchain history, but it shouldn\u2019t be a requirement to\n> hold the entire transaction history in order to start verifying new\n> transactions.\n> >\n> > As far as I can see, this also forces miners to actually maintain an\n> UTXO set, rather than just build on top of the chain with the most\n> proof-of-work. Producing a UTXO set and verifying a block against a chain\n> is the same thing, so by including the hash of the UTXO set we force miners\n> to verify the block that they want to build on top of.\n> >\n> > Am I missing something obvious, because as far as I can see, this solves\n> the problem of quadratic time complexity for initial sync:\n> http://www.youtube.com/watch?v=TgjrS-BPWDQ&t=2h02m12s\n> >\n> > The only added step to verifying a block is to hash the UTXO set. So it\n> does require additional computation, but most modern CPUs have a SHA256\n> throughput of around 500 MB/s, which means it takes only two seconds to\n> hash the UTXO set. And this can be improved further (GPUs can do 2-3 GB/s).\n> A small sacrifice for the added ease of initial syncing, in my opinion.\n> >\n> > /Rune\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/b0e1a5b4/attachment-0001.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2015-09-18T20:11:33",
                "message_text_only": "I believe the discussion here is on improving initial-sync time by\nsimply skipping initial-sync and getting a committed-to utxo set. This\nis obviously a new security model in between SPV and full-node (I would\ncall it SPV with future validation). Still, I'm not convinced it buys us\nanything, we really should just tweak Bitcoin Core to do spv mode at\nstartup and validate backwards in the background. I think this would\nalleviate most of the concerns raised, given the chain growth is not\nentirely unreasonable going forward.\n\nOn 09/18/15 20:07, Alex Morcos via bitcoin-dev wrote:\n> I guess I always assumed that UTXO set commitments were an alternative\n> security model (between SPV and full-node), not that they would cause\n> the existing security model to be deprecated.\n> \n> \n> On Fri, Sep 18, 2015 at 3:43 PM, Patrick Strateman via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n>     Full nodes using UTXO set commitments is a change to the bitcoin\n>     security model.\n> \n>     Currently an attacker with >50% of the network hashrate can rewrite\n>     history.\n> \n>     If full nodes rely on UTXO set commitments such an attacker could create\n>     an infinite number of bitcoins (as in many times more than the current\n>     21 million bitcoin limit).\n> \n>     Before we consider mechanisms for UTXO set commitments, we should\n>     seriously discuss whether the security model reduction is reasonable.\n> \n>     On 09/18/2015 12:05 PM, Rune Kj\u00e6r Svendsen via bitcoin-dev wrote:\n>     > Currently, when a new node wants to join the network, it needs to\n>     retrieve the entire blockchain history, starting from January 2009\n>     and up until now, in order to derive a UTXO set that it can verify\n>     new blocks/transactions against. With a blockchain size of 40GB and\n>     a UTXO size of around 1GB, the extra bandwidth required is\n>     significant, and will keep increasing indefinitely. If a newly mined\n>     block were to include the UTXO set hash of the chain up until the\n>     previous block \u2014 the hash of the UTXO set on top of which this block\n>     builds \u2014 then new nodes, who want to know whether a transaction is\n>     valid, would be able to acquire the UTXO set in a trustless manner,\n>     by only verifying proof-of-work headers, and knowing that a block\n>     with an invalid UTXO set hash would be rejected.\n>     >\n>     > I\u2019m not talking about calculating a complicated tree structure\n>     from the UTXO set, which would put further burden on already\n>     burdened Bitcoin Core nodes. We simply include the hash of the\n>     current UTXO set in a newly created block, such that the\n>     transactions in the new block build *on top* of the UTXO set whose\n>     hash is specified. This actually alleviates Bitcoin Core nodes, as\n>     it will now become possible for nodes without the entire blockchain\n>     to answer SPV queries (by retrieving the UTXO set trustlessly and\n>     using this to answer queries). It also saves bandwidth for Bitcore\n>     Core nodes, who only need to send roughly 1GB of data, in order to\n>     synchronise a node, rather than 40GB+. I will continue to run a full\n>     Bitcoin Core node, saving the entire blockchain history, but it\n>     shouldn\u2019t be a requirement to hold the entire transaction history in\n>     order to start verifying new transactions.\n>     >\n>     > As far as I can see, this also forces miners to actually maintain\n>     an UTXO set, rather than just build on top of the chain with the\n>     most proof-of-work. Producing a UTXO set and verifying a block\n>     against a chain is the same thing, so by including the hash of the\n>     UTXO set we force miners to verify the block that they want to build\n>     on top of.\n>     >\n>     > Am I missing something obvious, because as far as I can see, this\n>     solves the problem of quadratic time complexity for initial sync:\n>     http://www.youtube.com/watch?v=TgjrS-BPWDQ&t=2h02m12s\n>     >\n>     > The only added step to verifying a block is to hash the UTXO set.\n>     So it does require additional computation, but most modern CPUs have\n>     a SHA256 throughput of around 500 MB/s, which means it takes only\n>     two seconds to hash the UTXO set. And this can be improved further\n>     (GPUs can do 2-3 GB/s). A small sacrifice for the added ease of\n>     initial syncing, in my opinion.\n>     >\n>     > /Rune\n>     > _______________________________________________\n>     > bitcoin-dev mailing list\n>     > bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> \n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> \n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Rune Kj\u00e6r Svendsen",
                "date": "2015-09-18T20:17:40",
                "message_text_only": "There are a couple of points I\u2019d like to address.\n\nFirstly, yes, >50% attacks are a problem for Bitcoin. Bitcoin does not function if the majority of mining power is dishonest. There is no way around that. It\u2019s how proof-of-work functions. And if we lose proof-of-work, we lose Bitcoin.\n\nSecondly, I\u2019m not suggesting that UTXO set hashes *replace* block hashes, or even that it should be in the block header (probably in the coinbase somewhere). I suggest it as an *addition* to the existing consensus rules. Full nodes can still verify the chain with the added step of hashing the UTXO set for every block. Of course, this can easily be deferred to after proof-of-work has been verified already, such that no work is wasted. Unless a 51% attack is in effect. But I argue that this is a moot point, since Bitcoin is useless anyway under such circumstances.\n\nLastly, I\u2019m not suggesting miners discard the blockchain history. A miner has an incentive to be absolutely sure that the chain he\u2019s building on is the right one. If he\u2019s wrong, he loses money/income. There\u2019s simply no reason for a professional miner *not* to do the full initial sync, which only needs to be done once. Non-miners, who just want to check the balance of their wallet, however, really don\u2019t need to retrieve information about Hal Finney sending bitcoins to Satoshi in 2010. In any case, this practice isn\u2019t sustainable.\n\nIn the end, it isn\u2019t possible to control whether a miner verifies the entire blockchain anyway (anyone can send the UTXO set over the wire). Not letting the proof-of-work cover the UTXO hash doesn\u2019t solve this problem, it only makes it impossible to know whether a given UTXO set is the one that the majority is mining on without retrieving the entire blockchain, and doing the verification yourself. People can choose to skip that regardless of what we do.\n\nFurthermore, all nodes have the option of deciding which level of security they want. We\u2019re not lessening security of the protocol, we\u2019re strengthening the security of something that\u2019s already possible to do (build on top of an unverified blockchain), but we\u2019d rather want that people not do.\n\n/Rune\n\n\n> On 18 Sep 2015, at 21:43, Patrick Strateman via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> Full nodes using UTXO set commitments is a change to the bitcoin\n> security model.\n> \n> Currently an attacker with >50% of the network hashrate can rewrite history.\n> \n> If full nodes rely on UTXO set commitments such an attacker could create\n> an infinite number of bitcoins (as in many times more than the current\n> 21 million bitcoin limit).\n> \n> Before we consider mechanisms for UTXO set commitments, we should\n> seriously discuss whether the security model reduction is reasonable.\n> \n> On 09/18/2015 12:05 PM, Rune Kj\u00e6r Svendsen via bitcoin-dev wrote:\n>> Currently, when a new node wants to join the network, it needs to retrieve the entire blockchain history, starting from January 2009 and up until now, in order to derive a UTXO set that it can verify new blocks/transactions against. With a blockchain size of 40GB and a UTXO size of around 1GB, the extra bandwidth required is significant, and will keep increasing indefinitely. If a newly mined block were to include the UTXO set hash of the chain up until the previous block \u2014 the hash of the UTXO set on top of which this block builds \u2014 then new nodes, who want to know whether a transaction is valid, would be able to acquire the UTXO set in a trustless manner, by only verifying proof-of-work headers, and knowing that a block with an invalid UTXO set hash would be rejected.\n>> \n>> I\u2019m not talking about calculating a complicated tree structure from the UTXO set, which would put further burden on already burdened Bitcoin Core nodes. We simply include the hash of the current UTXO set in a newly created block, such that the transactions in the new block build *on top* of the UTXO set whose hash is specified. This actually alleviates Bitcoin Core nodes, as it will now become possible for nodes without the entire blockchain to answer SPV queries (by retrieving the UTXO set trustlessly and using this to answer queries). It also saves bandwidth for Bitcore Core nodes, who only need to send roughly 1GB of data, in order to synchronise a node, rather than 40GB+. I will continue to run a full Bitcoin Core node, saving the entire blockchain history, but it shouldn\u2019t be a requirement to hold the entire transaction history in order to start verifying new transactions.\n>> \n>> As far as I can see, this also forces miners to actually maintain an UTXO set, rather than just build on top of the chain with the most proof-of-work. Producing a UTXO set and verifying a block against a chain is the same thing, so by including the hash of the UTXO set we force miners to verify the block that they want to build on top of.\n>> \n>> Am I missing something obvious, because as far as I can see, this solves the problem of quadratic time complexity for initial sync: http://www.youtube.com/watch?v=TgjrS-BPWDQ&t=2h02m12s\n>> \n>> The only added step to verifying a block is to hash the UTXO set. So it does require additional computation, but most modern CPUs have a SHA256 throughput of around 500 MB/s, which means it takes only two seconds to hash the UTXO set. And this can be improved further (GPUs can do 2-3 GB/s). A small sacrifice for the added ease of initial syncing, in my opinion.\n>> \n>> /Rune\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-18T20:37:05",
                "message_text_only": "Well, with utxo commitments at some point maybe is enough to validate the\nfull headers history but only the last 5 years of ttansaction history\n(assuming utxo commitments are buried 5 years worth of blocks in the past).\nThis scales much better than validating the full history and if we get a 5\nyear reorg something is going really wrong anyway...\nMaybe after validating the last 5 years you also want to validate the rest\nof the history backards to get the \"fully-full node\" security.\nOf course 5 years it's just an arbitrary number: 2 or maybe even 1 would\nprobably be secure enough for most people. I've referred to this idea as\n\"hard checkpoints\" or \"moving the genesis block forward\" in the past.\nOn Sep 18, 2015 4:18 PM, \"Rune Kj\u00e6r Svendsen\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> There are a couple of points I\u2019d like to address.\n>\n> Firstly, yes, >50% attacks are a problem for Bitcoin. Bitcoin does not\n> function if the majority of mining power is dishonest. There is no way\n> around that. It\u2019s how proof-of-work functions. And if we lose\n> proof-of-work, we lose Bitcoin.\n>\n> Secondly, I\u2019m not suggesting that UTXO set hashes *replace* block hashes,\n> or even that it should be in the block header (probably in the coinbase\n> somewhere). I suggest it as an *addition* to the existing consensus rules.\n> Full nodes can still verify the chain with the added step of hashing the\n> UTXO set for every block. Of course, this can easily be deferred to after\n> proof-of-work has been verified already, such that no work is wasted.\n> Unless a 51% attack is in effect. But I argue that this is a moot point,\n> since Bitcoin is useless anyway under such circumstances.\n>\n> Lastly, I\u2019m not suggesting miners discard the blockchain history. A miner\n> has an incentive to be absolutely sure that the chain he\u2019s building on is\n> the right one. If he\u2019s wrong, he loses money/income. There\u2019s simply no\n> reason for a professional miner *not* to do the full initial sync, which\n> only needs to be done once. Non-miners, who just want to check the balance\n> of their wallet, however, really don\u2019t need to retrieve information about\n> Hal Finney sending bitcoins to Satoshi in 2010. In any case, this practice\n> isn\u2019t sustainable.\n>\n> In the end, it isn\u2019t possible to control whether a miner verifies the\n> entire blockchain anyway (anyone can send the UTXO set over the wire). Not\n> letting the proof-of-work cover the UTXO hash doesn\u2019t solve this problem,\n> it only makes it impossible to know whether a given UTXO set is the one\n> that the majority is mining on without retrieving the entire blockchain,\n> and doing the verification yourself. People can choose to skip that\n> regardless of what we do.\n>\n> Furthermore, all nodes have the option of deciding which level of security\n> they want. We\u2019re not lessening security of the protocol, we\u2019re\n> strengthening the security of something that\u2019s already possible to do\n> (build on top of an unverified blockchain), but we\u2019d rather want that\n> people not do.\n>\n> /Rune\n>\n>\n> > On 18 Sep 2015, at 21:43, Patrick Strateman via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> > Full nodes using UTXO set commitments is a change to the bitcoin\n> > security model.\n> >\n> > Currently an attacker with >50% of the network hashrate can rewrite\n> history.\n> >\n> > If full nodes rely on UTXO set commitments such an attacker could create\n> > an infinite number of bitcoins (as in many times more than the current\n> > 21 million bitcoin limit).\n> >\n> > Before we consider mechanisms for UTXO set commitments, we should\n> > seriously discuss whether the security model reduction is reasonable.\n> >\n> > On 09/18/2015 12:05 PM, Rune Kj\u00e6r Svendsen via bitcoin-dev wrote:\n> >> Currently, when a new node wants to join the network, it needs to\n> retrieve the entire blockchain history, starting from January 2009 and up\n> until now, in order to derive a UTXO set that it can verify new\n> blocks/transactions against. With a blockchain size of 40GB and a UTXO size\n> of around 1GB, the extra bandwidth required is significant, and will keep\n> increasing indefinitely. If a newly mined block were to include the UTXO\n> set hash of the chain up until the previous block \u2014 the hash of the UTXO\n> set on top of which this block builds \u2014 then new nodes, who want to know\n> whether a transaction is valid, would be able to acquire the UTXO set in a\n> trustless manner, by only verifying proof-of-work headers, and knowing that\n> a block with an invalid UTXO set hash would be rejected.\n> >>\n> >> I\u2019m not talking about calculating a complicated tree structure from the\n> UTXO set, which would put further burden on already burdened Bitcoin Core\n> nodes. We simply include the hash of the current UTXO set in a newly\n> created block, such that the transactions in the new block build *on top*\n> of the UTXO set whose hash is specified. This actually alleviates Bitcoin\n> Core nodes, as it will now become possible for nodes without the entire\n> blockchain to answer SPV queries (by retrieving the UTXO set trustlessly\n> and using this to answer queries). It also saves bandwidth for Bitcore Core\n> nodes, who only need to send roughly 1GB of data, in order to synchronise a\n> node, rather than 40GB+. I will continue to run a full Bitcoin Core node,\n> saving the entire blockchain history, but it shouldn\u2019t be a requirement to\n> hold the entire transaction history in order to start verifying new\n> transactions.\n> >>\n> >> As far as I can see, this also forces miners to actually maintain an\n> UTXO set, rather than just build on top of the chain with the most\n> proof-of-work. Producing a UTXO set and verifying a block against a chain\n> is the same thing, so by including the hash of the UTXO set we force miners\n> to verify the block that they want to build on top of.\n> >>\n> >> Am I missing something obvious, because as far as I can see, this\n> solves the problem of quadratic time complexity for initial sync:\n> http://www.youtube.com/watch?v=TgjrS-BPWDQ&t=2h02m12s\n> >>\n> >> The only added step to verifying a block is to hash the UTXO set. So it\n> does require additional computation, but most modern CPUs have a SHA256\n> throughput of around 500 MB/s, which means it takes only two seconds to\n> hash the UTXO set. And this can be improved further (GPUs can do 2-3 GB/s).\n> A small sacrifice for the added ease of initial syncing, in my opinion.\n> >>\n> >> /Rune\n> >> _______________________________________________\n> >> bitcoin-dev mailing list\n> >> bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/a57078f8/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-18T20:38:06",
                "message_text_only": "s/move the genesis block forward/move your genesis checkpoint forward/\nOn Sep 18, 2015 4:37 PM, \"Jorge Tim\u00f3n\" <jtimon at jtimon.cc> wrote:\n\n> Well, with utxo commitments at some point maybe is enough to validate the\n> full headers history but only the last 5 years of ttansaction history\n> (assuming utxo commitments are buried 5 years worth of blocks in the past).\n> This scales much better than validating the full history and if we get a 5\n> year reorg something is going really wrong anyway...\n> Maybe after validating the last 5 years you also want to validate the rest\n> of the history backards to get the \"fully-full node\" security.\n> Of course 5 years it's just an arbitrary number: 2 or maybe even 1 would\n> probably be secure enough for most people. I've referred to this idea as\n> \"hard checkpoints\" or \"moving the genesis block forward\" in the past.\n> On Sep 18, 2015 4:18 PM, \"Rune Kj\u00e6r Svendsen\" <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> There are a couple of points I\u2019d like to address.\n>>\n>> Firstly, yes, >50% attacks are a problem for Bitcoin. Bitcoin does not\n>> function if the majority of mining power is dishonest. There is no way\n>> around that. It\u2019s how proof-of-work functions. And if we lose\n>> proof-of-work, we lose Bitcoin.\n>>\n>> Secondly, I\u2019m not suggesting that UTXO set hashes *replace* block hashes,\n>> or even that it should be in the block header (probably in the coinbase\n>> somewhere). I suggest it as an *addition* to the existing consensus rules.\n>> Full nodes can still verify the chain with the added step of hashing the\n>> UTXO set for every block. Of course, this can easily be deferred to after\n>> proof-of-work has been verified already, such that no work is wasted.\n>> Unless a 51% attack is in effect. But I argue that this is a moot point,\n>> since Bitcoin is useless anyway under such circumstances.\n>>\n>> Lastly, I\u2019m not suggesting miners discard the blockchain history. A miner\n>> has an incentive to be absolutely sure that the chain he\u2019s building on is\n>> the right one. If he\u2019s wrong, he loses money/income. There\u2019s simply no\n>> reason for a professional miner *not* to do the full initial sync, which\n>> only needs to be done once. Non-miners, who just want to check the balance\n>> of their wallet, however, really don\u2019t need to retrieve information about\n>> Hal Finney sending bitcoins to Satoshi in 2010. In any case, this practice\n>> isn\u2019t sustainable.\n>>\n>> In the end, it isn\u2019t possible to control whether a miner verifies the\n>> entire blockchain anyway (anyone can send the UTXO set over the wire). Not\n>> letting the proof-of-work cover the UTXO hash doesn\u2019t solve this problem,\n>> it only makes it impossible to know whether a given UTXO set is the one\n>> that the majority is mining on without retrieving the entire blockchain,\n>> and doing the verification yourself. People can choose to skip that\n>> regardless of what we do.\n>>\n>> Furthermore, all nodes have the option of deciding which level of\n>> security they want. We\u2019re not lessening security of the protocol, we\u2019re\n>> strengthening the security of something that\u2019s already possible to do\n>> (build on top of an unverified blockchain), but we\u2019d rather want that\n>> people not do.\n>>\n>> /Rune\n>>\n>>\n>> > On 18 Sep 2015, at 21:43, Patrick Strateman via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >\n>> > Full nodes using UTXO set commitments is a change to the bitcoin\n>> > security model.\n>> >\n>> > Currently an attacker with >50% of the network hashrate can rewrite\n>> history.\n>> >\n>> > If full nodes rely on UTXO set commitments such an attacker could create\n>> > an infinite number of bitcoins (as in many times more than the current\n>> > 21 million bitcoin limit).\n>> >\n>> > Before we consider mechanisms for UTXO set commitments, we should\n>> > seriously discuss whether the security model reduction is reasonable.\n>> >\n>> > On 09/18/2015 12:05 PM, Rune Kj\u00e6r Svendsen via bitcoin-dev wrote:\n>> >> Currently, when a new node wants to join the network, it needs to\n>> retrieve the entire blockchain history, starting from January 2009 and up\n>> until now, in order to derive a UTXO set that it can verify new\n>> blocks/transactions against. With a blockchain size of 40GB and a UTXO size\n>> of around 1GB, the extra bandwidth required is significant, and will keep\n>> increasing indefinitely. If a newly mined block were to include the UTXO\n>> set hash of the chain up until the previous block \u2014 the hash of the UTXO\n>> set on top of which this block builds \u2014 then new nodes, who want to know\n>> whether a transaction is valid, would be able to acquire the UTXO set in a\n>> trustless manner, by only verifying proof-of-work headers, and knowing that\n>> a block with an invalid UTXO set hash would be rejected.\n>> >>\n>> >> I\u2019m not talking about calculating a complicated tree structure from\n>> the UTXO set, which would put further burden on already burdened Bitcoin\n>> Core nodes. We simply include the hash of the current UTXO set in a newly\n>> created block, such that the transactions in the new block build *on top*\n>> of the UTXO set whose hash is specified. This actually alleviates Bitcoin\n>> Core nodes, as it will now become possible for nodes without the entire\n>> blockchain to answer SPV queries (by retrieving the UTXO set trustlessly\n>> and using this to answer queries). It also saves bandwidth for Bitcore Core\n>> nodes, who only need to send roughly 1GB of data, in order to synchronise a\n>> node, rather than 40GB+. I will continue to run a full Bitcoin Core node,\n>> saving the entire blockchain history, but it shouldn\u2019t be a requirement to\n>> hold the entire transaction history in order to start verifying new\n>> transactions.\n>> >>\n>> >> As far as I can see, this also forces miners to actually maintain an\n>> UTXO set, rather than just build on top of the chain with the most\n>> proof-of-work. Producing a UTXO set and verifying a block against a chain\n>> is the same thing, so by including the hash of the UTXO set we force miners\n>> to verify the block that they want to build on top of.\n>> >>\n>> >> Am I missing something obvious, because as far as I can see, this\n>> solves the problem of quadratic time complexity for initial sync:\n>> http://www.youtube.com/watch?v=TgjrS-BPWDQ&t=2h02m12s\n>> >>\n>> >> The only added step to verifying a block is to hash the UTXO set. So\n>> it does require additional computation, but most modern CPUs have a SHA256\n>> throughput of around 500 MB/s, which means it takes only two seconds to\n>> hash the UTXO set. And this can be improved further (GPUs can do 2-3 GB/s).\n>> A small sacrifice for the added ease of initial syncing, in my opinion.\n>> >>\n>> >> /Rune\n>> >> _______________________________________________\n>> >> bitcoin-dev mailing list\n>> >> bitcoin-dev at lists.linuxfoundation.org\n>> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >\n>> >\n>> > _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/45701f72/attachment.html>"
            },
            {
                "author": "Vincent Truong",
                "date": "2015-09-18T22:22:35",
                "message_text_only": "This way lets us protect from 51% overwrites for a whole year:\n\n1. Hash utxo set as is today, H1, and store it in a block.\n2. At the same time, store a copy of the utxo set for H1 on disk, D1\n3. After 1 year, create D2, then wait for H2 (if a fork happens then\nrecreate D2 and see which wins)\n4. The block with H2 must hash on top of H1\n4. Blocks before H1 can be safely pruned by the network, only keeping D1\nfor reference/validation, plus blocks the node wants to keep (data/colored\ncoins)\n5. After 1 year, repeat for H3.\n7. D1 can also be dropped after a few days once D3 is up, since the H1\nsecuring D1 would have been pruned with H3's usage of D2 by then.\n\nThis reduces the security model from 'always secure' to 'secure, as of last\nyear'. An attacker will need to have hidden hashing power to overwrite a\nyears worth of blocks. Which I think would be hard enough.\n\nThe attacker can also try to undo a freshly built Hn, but because we can\nbuild Dn first and wait for Hn, the nodes should be expecting the same\nhash. They also serve as automated checkpoints to prevent them from\noverwriting all of it.\nOn Sep 19, 2015 6:38 AM, \"Jorge Tim\u00f3n\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> s/move the genesis block forward/move your genesis checkpoint forward/\n> On Sep 18, 2015 4:37 PM, \"Jorge Tim\u00f3n\" <jtimon at jtimon.cc> wrote:\n>\n>> Well, with utxo commitments at some point maybe is enough to validate the\n>> full headers history but only the last 5 years of ttansaction history\n>> (assuming utxo commitments are buried 5 years worth of blocks in the past).\n>> This scales much better than validating the full history and if we get a 5\n>> year reorg something is going really wrong anyway...\n>> Maybe after validating the last 5 years you also want to validate the\n>> rest of the history backards to get the \"fully-full node\" security.\n>> Of course 5 years it's just an arbitrary number: 2 or maybe even 1 would\n>> probably be secure enough for most people. I've referred to this idea as\n>> \"hard checkpoints\" or \"moving the genesis block forward\" in the past.\n>> On Sep 18, 2015 4:18 PM, \"Rune Kj\u00e6r Svendsen\" <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> There are a couple of points I\u2019d like to address.\n>>>\n>>> Firstly, yes, >50% attacks are a problem for Bitcoin. Bitcoin does not\n>>> function if the majority of mining power is dishonest. There is no way\n>>> around that. It\u2019s how proof-of-work functions. And if we lose\n>>> proof-of-work, we lose Bitcoin.\n>>>\n>>> Secondly, I\u2019m not suggesting that UTXO set hashes *replace* block\n>>> hashes, or even that it should be in the block header (probably in the\n>>> coinbase somewhere). I suggest it as an *addition* to the existing\n>>> consensus rules. Full nodes can still verify the chain with the added step\n>>> of hashing the UTXO set for every block. Of course, this can easily be\n>>> deferred to after proof-of-work has been verified already, such that no\n>>> work is wasted. Unless a 51% attack is in effect. But I argue that this is\n>>> a moot point, since Bitcoin is useless anyway under such circumstances.\n>>>\n>>> Lastly, I\u2019m not suggesting miners discard the blockchain history. A\n>>> miner has an incentive to be absolutely sure that the chain he\u2019s building\n>>> on is the right one. If he\u2019s wrong, he loses money/income. There\u2019s simply\n>>> no reason for a professional miner *not* to do the full initial sync, which\n>>> only needs to be done once. Non-miners, who just want to check the balance\n>>> of their wallet, however, really don\u2019t need to retrieve information about\n>>> Hal Finney sending bitcoins to Satoshi in 2010. In any case, this practice\n>>> isn\u2019t sustainable.\n>>>\n>>> In the end, it isn\u2019t possible to control whether a miner verifies the\n>>> entire blockchain anyway (anyone can send the UTXO set over the wire). Not\n>>> letting the proof-of-work cover the UTXO hash doesn\u2019t solve this problem,\n>>> it only makes it impossible to know whether a given UTXO set is the one\n>>> that the majority is mining on without retrieving the entire blockchain,\n>>> and doing the verification yourself. People can choose to skip that\n>>> regardless of what we do.\n>>>\n>>> Furthermore, all nodes have the option of deciding which level of\n>>> security they want. We\u2019re not lessening security of the protocol, we\u2019re\n>>> strengthening the security of something that\u2019s already possible to do\n>>> (build on top of an unverified blockchain), but we\u2019d rather want that\n>>> people not do.\n>>>\n>>> /Rune\n>>>\n>>>\n>>> > On 18 Sep 2015, at 21:43, Patrick Strateman via bitcoin-dev <\n>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> >\n>>> > Full nodes using UTXO set commitments is a change to the bitcoin\n>>> > security model.\n>>> >\n>>> > Currently an attacker with >50% of the network hashrate can rewrite\n>>> history.\n>>> >\n>>> > If full nodes rely on UTXO set commitments such an attacker could\n>>> create\n>>> > an infinite number of bitcoins (as in many times more than the current\n>>> > 21 million bitcoin limit).\n>>> >\n>>> > Before we consider mechanisms for UTXO set commitments, we should\n>>> > seriously discuss whether the security model reduction is reasonable.\n>>> >\n>>> > On 09/18/2015 12:05 PM, Rune Kj\u00e6r Svendsen via bitcoin-dev wrote:\n>>> >> Currently, when a new node wants to join the network, it needs to\n>>> retrieve the entire blockchain history, starting from January 2009 and up\n>>> until now, in order to derive a UTXO set that it can verify new\n>>> blocks/transactions against. With a blockchain size of 40GB and a UTXO size\n>>> of around 1GB, the extra bandwidth required is significant, and will keep\n>>> increasing indefinitely. If a newly mined block were to include the UTXO\n>>> set hash of the chain up until the previous block \u2014 the hash of the UTXO\n>>> set on top of which this block builds \u2014 then new nodes, who want to know\n>>> whether a transaction is valid, would be able to acquire the UTXO set in a\n>>> trustless manner, by only verifying proof-of-work headers, and knowing that\n>>> a block with an invalid UTXO set hash would be rejected.\n>>> >>\n>>> >> I\u2019m not talking about calculating a complicated tree structure from\n>>> the UTXO set, which would put further burden on already burdened Bitcoin\n>>> Core nodes. We simply include the hash of the current UTXO set in a newly\n>>> created block, such that the transactions in the new block build *on top*\n>>> of the UTXO set whose hash is specified. This actually alleviates Bitcoin\n>>> Core nodes, as it will now become possible for nodes without the entire\n>>> blockchain to answer SPV queries (by retrieving the UTXO set trustlessly\n>>> and using this to answer queries). It also saves bandwidth for Bitcore Core\n>>> nodes, who only need to send roughly 1GB of data, in order to synchronise a\n>>> node, rather than 40GB+. I will continue to run a full Bitcoin Core node,\n>>> saving the entire blockchain history, but it shouldn\u2019t be a requirement to\n>>> hold the entire transaction history in order to start verifying new\n>>> transactions.\n>>> >>\n>>> >> As far as I can see, this also forces miners to actually maintain an\n>>> UTXO set, rather than just build on top of the chain with the most\n>>> proof-of-work. Producing a UTXO set and verifying a block against a chain\n>>> is the same thing, so by including the hash of the UTXO set we force miners\n>>> to verify the block that they want to build on top of.\n>>> >>\n>>> >> Am I missing something obvious, because as far as I can see, this\n>>> solves the problem of quadratic time complexity for initial sync:\n>>> http://www.youtube.com/watch?v=TgjrS-BPWDQ&t=2h02m12s\n>>> >>\n>>> >> The only added step to verifying a block is to hash the UTXO set. So\n>>> it does require additional computation, but most modern CPUs have a SHA256\n>>> throughput of around 500 MB/s, which means it takes only two seconds to\n>>> hash the UTXO set. And this can be improved further (GPUs can do 2-3 GB/s).\n>>> A small sacrifice for the added ease of initial syncing, in my opinion.\n>>> >>\n>>> >> /Rune\n>>> >> _______________________________________________\n>>> >> bitcoin-dev mailing list\n>>> >> bitcoin-dev at lists.linuxfoundation.org\n>>> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>> >\n>>> >\n>>> > _______________________________________________\n>>> > bitcoin-dev mailing list\n>>> > bitcoin-dev at lists.linuxfoundation.org\n>>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/91e1268c/attachment-0001.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-09-19T02:30:13",
                "message_text_only": "On 18/09/15 15:17, Rune Kj\u00e6r Svendsen via bitcoin-dev wrote:\n> Bitcoin does not function if the majority of mining power is dishonest. There is no way around that. It\u2019s how proof-of-work functions.\n\n\nNone of those statements are true.\n\nIf a majority of Bitcoin miners are mining invalid blocks, then they\naren't Bitcoin miners any more and are no longer relevant to the Bitcoin\nconsensus.\n\nThere does exist a problem that light clients aren't always able to tell\nthe difference between chains that are valid and chains that are not\nvalid, but it's is possible to create simple proofs that would do so:\n\nhttps://gist.github.com/justusranvier/451616fa4697b5f25f60\n\n\nIf those changes would be implemented, then any node that knew a chain\nwas invalid could produce a compact proof that anyone else in the\nnetwork could verify, regardless of how much proof of work was used to\ncreate the invalid chain.\n\nCommitted UTXO sets would need safe to rely upon if a similar set of\nproofs that a particular set was invalid existed.\n\n-- \nJustus Ranvier\nOpen Bitcoin Privacy Project\nhttp://www.openbitcoinprivacyproject.org/\njustus at openbitcoinprivacyproject.org\nE7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18442 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/69ac0ec4/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150918/69ac0ec4/attachment.sig>"
            },
            {
                "author": "Rune Kj\u00e6r Svendsen",
                "date": "2015-09-19T15:45:49",
                "message_text_only": "We need to distinguish between two different things here:\n\n1) A 51% attack, where the majority of mining power is *malicious* (hence \u201cattack\u201d)\n\nand\n\n2) A fork that exists because of a disagreement in the network, with total mining power split in two camps, each camp mining peacefully on their own chain\n\nThese are two very different scenarios.\n\nSome claim that including the UTXO set hash in the block creates a vulnerability where miners can include the wrong UTXO hash, and mine on that, but this is only possible if a 51% attack is in effect. And if a 51% attack is in effect, it\u2019s a moot point, because Bitcoin is useless anyway, because that 51% malicious mining power could just as well be used for mining empty blocks on top of the official chain. Or blocks containing randomly generated transactions, without confirming any legitimate transactions. This is why we say that a majority of honest miners is a hard requirement for Bitcoin. A majority of dishonest miners can only be circumvented through centralisation, and then we don\u2019t have Bitcoin any longer.\n\nScenario 2 is unproblematic regardless of whether we include the UTXO hash in the block (and make it consensus-critical) or not, since the majority mining power on either chain isn\u2019t malicious.\n\nIt is correct that if you\u2019re a full node, and a 51% attack is in effect, you are able to verify that miners are honest (ie. you know whether a 51% attack is in effect or not). But this doesn\u2019t change the fact that the Bitcoin network is unreliable, at best, when a majority of mining power is used for malicious purposes.\n\n\n\n/Rune\n\n\n> On 19 Sep 2015, at 04:30, Justus Ranvier via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> On 18/09/15 15:17, Rune Kj\u00e6r Svendsen via bitcoin-dev wrote:\n>> Bitcoin does not function if the majority of mining power is dishonest. There is no way around that. It\u2019s how proof-of-work functions.\n> \n> \n> None of those statements are true.\n> \n> If a majority of Bitcoin miners are mining invalid blocks, then they\n> aren't Bitcoin miners any more and are no longer relevant to the Bitcoin\n> consensus.\n> \n> There does exist a problem that light clients aren't always able to tell\n> the difference between chains that are valid and chains that are not\n> valid, but it's is possible to create simple proofs that would do so:\n> \n> https://gist.github.com/justusranvier/451616fa4697b5f25f60\n> \n> \n> If those changes would be implemented, then any node that knew a chain\n> was invalid could produce a compact proof that anyone else in the\n> network could verify, regardless of how much proof of work was used to\n> create the invalid chain.\n> \n> Committed UTXO sets would need safe to rely upon if a similar set of\n> proofs that a particular set was invalid existed.\n> \n> -- \n> Justus Ranvier\n> Open Bitcoin Privacy Project\n> http://www.openbitcoinprivacyproject.org/\n> justus at openbitcoinprivacyproject.org\n> E7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n> <0xEAD9E623.asc>_______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-09-19T17:19:11",
                "message_text_only": "On 19/09/15 10:45, Rune Kj\u00e6r Svendsen wrote:\n> We need to distinguish between two different things here:\n> \n> 1) A 51% attack, where the majority of mining power is *malicious* (hence \u201cattack\u201d)\n\nWhat does \"malicious\" mean?\n\nIn other words, If miner A is mining honestly, and miner B is mining\nmaliciously, what are some of the possible difference in their behaviour\nwe would observe?\n\n\n-- \nJustus Ranvier\nOpen Bitcoin Privacy Project\nhttp://www.openbitcoinprivacyproject.org/\njustus at openbitcoinprivacyproject.org\nE7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18442 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/c934b9de/attachment-0001.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/c934b9de/attachment-0001.sig>"
            },
            {
                "author": "Rune K. Svendsen",
                "date": "2015-09-19T20:11:08",
                "message_text_only": "An honest miner is a miner that supports the network by building on top of the best valid chain. A malicious miner is one who wants to disrupt the Bitcoin network, not support it, for example by executing a 51% attack which mines empty blocks on top of the best chain.\n\n\n/Rune\n\n> Den 19/09/2015 kl. 19.19 skrev Justus Ranvier <justus at openbitcoinprivacyproject.org>:\n> \n>> On 19/09/15 10:45, Rune Kj\u00e6r Svendsen wrote:\n>> We need to distinguish between two different things here:\n>> \n>> 1) A 51% attack, where the majority of mining power is *malicious* (hence \u201cattack\u201d)\n> \n> What does \"malicious\" mean?\n> \n> In other words, If miner A is mining honestly, and miner B is mining\n> maliciously, what are some of the possible difference in their behaviour\n> we would observe?\n> \n> \n> -- \n> Justus Ranvier\n> Open Bitcoin Privacy Project\n> http://www.openbitcoinprivacyproject.org/\n> justus at openbitcoinprivacyproject.org\n> E7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n> <0xEAD9E623.asc>"
            },
            {
                "author": "Dave Scotese",
                "date": "2015-09-20T00:48:19",
                "message_text_only": "It seems there should be a practical limit to the size of a re-org - I mean\na practical limit that is smaller than the current height.  Vincent's\nproposal suggests that a year's worth of blocks is such a practical limit.\nI agree.  There are probably lower limits that are practical too, but I\nlike an entire year just to be conservative.  As Vincent points out, \"An\nattacker will need to have hidden hashing power to overwrite a years worth\nof blocks.\"\n\nTL;DR for the rest of this: Txns that lose confirmations from a reorg and\nthen show up in the mempool but not in any of the next few blocks indicate\nmalicious mining.\n\nI see a blind spot here.  We are seeing the rule that says the longest\nchain is the valid chain as impossible to break, but it isn't.  We broke it\nto fix the BerkelyDB problem.  The code itself would have prevented us from\ndoing that IF 51% of the hashpower had been used to build on the wrong\nchain, but it wasn't.\n\nJustus' question about what malicious means is key here.  The blind spot is\na bit more complex than just viewing the longest chain as impossible to\nbreak except with more than 51% of the hash power.  The blind spot is our\ninability to distinguish between malicious blocks and honest blocks.\n\nRune suggests that empty blocks indicate malice.  I like that (which is why\nI advocate using BitcoinDaysDestroyed to decide between blocks at the same\nheight that appear at nearly the same time, rather than first-seen).  There\nare other methods we can use to distinguish between malicious blocks and\nhonest ones.  I'm inventing one right now, but I'm sure better ones can be\nfound.\n\nHere's mine: Once a transaction has been confirmed, its originator\ngenerally takes on the responsibility of re-broadcasting it if it gets\nre-org'd out of its confirmation(s).  Many mempools will see that\nre-broadcast, *if it happens*.  Any malice in a 51% attack would come in\nthe form of failing to include such transactions.  If we have a history of\norphaned blocks, then we can check to see which ones have been included in\nnon-orphaned blocks since they got reorg'd out.  Such transactions should\nbe top-priority after a reorg, even if they have zero fees.  When there is\na transaction that doesn't appear in a new block within a couple hours of a\nreorg, that indicates dishonesty, usually in the sender (but that could be\nnegligence), but possibly in the miner.  Looking at the mempool would\ndetermine which, wouldn't it?\n\nnotplato\n\nOn Sat, Sep 19, 2015 at 1:11 PM, Rune K. Svendsen via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> An honest miner is a miner that supports the network by building on top of\n> the best valid chain. A malicious miner is one who wants to disrupt the\n> Bitcoin network, not support it, for example by executing a 51% attack\n> which mines empty blocks on top of the best chain.\n>\n>\n> /Rune\n>\n> > Den 19/09/2015 kl. 19.19 skrev Justus Ranvier <\n> justus at openbitcoinprivacyproject.org>:\n> >\n> >> On 19/09/15 10:45, Rune Kj\u00e6r Svendsen wrote:\n> >> We need to distinguish between two different things here:\n> >>\n> >> 1) A 51% attack, where the majority of mining power is *malicious*\n> (hence \u201cattack\u201d)\n> >\n> > What does \"malicious\" mean?\n> >\n> > In other words, If miner A is mining honestly, and miner B is mining\n> > maliciously, what are some of the possible difference in their behaviour\n> > we would observe?\n> >\n> >\n> > --\n> > Justus Ranvier\n> > Open Bitcoin Privacy Project\n> > http://www.openbitcoinprivacyproject.org/\n> > justus at openbitcoinprivacyproject.org\n> > E7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n> > <0xEAD9E623.asc>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n\n-- \nI like to provide some work at no charge to prove my value. Do you need a\ntechie?\nI own Litmocracy <http://www.litmocracy.com> and Meme Racing\n<http://www.memeracing.net> (in alpha).\nI'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which\nnow accepts Bitcoin.\nI also code for The Dollar Vigilante <http://dollarvigilante.com/>.\n\"He ought to find it more profitable to play by the rules\" - Satoshi\nNakamoto\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150919/43bfbb1d/attachment-0001.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-09-21T17:15:12",
                "message_text_only": "On 19/09/15 15:11, Rune K. Svendsen wrote:\n> An honest miner is a miner that supports the network by building on top of the best valid chain. A malicious miner is one who wants to disrupt the Bitcoin network, not support it, for example by executing a 51% attack which mines empty blocks on top of the best chain.\n\nThis isn't a particularly good definition.\n\n\"An honest miner is a miner that supports the network by building on top\nof the best valid chain.\"\n\nWhat is the \"best valid chain\"? The one with the most proof of work? The\none that meets some other definition of \"best\"?\n\n\"A malicious miner is one who wants to disrupt the Bitcoin network, not\nsupport it\"\n\nThis is a tautology, the equivalent of saying \"a malicious miner is a\nminer that is malicious\" A true, but entirely useless, statement.\n\n\"for example by executing a 51% attack which mines empty blocks on top\nof the best chain.\"\n\nAgain, you're begging the question with the word \"attack\", because\nthat's what you're supposed to demonstrate.\n\nApparently the difference between honest mining and malicious mining is\nempty blocks? You've said in both cases the miners are extending the\n\"best valid chain\". Is extending the best valid chain with an empty\nblock always a malicious act?\n\nWhat's the significance of 51% in this definition? Is the same empty\nblock which extended the best valid chain honest if the miner who\nproduced it has 49% of the network hashing power and malicious if they\nadd a few more ASIC units?\n\n-- \nJustus Ranvier\nOpen Bitcoin Privacy Project\nhttp://www.openbitcoinprivacyproject.org/\njustus at openbitcoinprivacyproject.org\nE7AD 8215 8497 3673 6D9E 61C4 2A5F DA70 EAD9 E623\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18442 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150921/1a8e96bd/attachment-0001.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150921/1a8e96bd/attachment-0001.sig>"
            }
        ],
        "thread_summary": {
            "title": "Hash of UTXO set as consensus-critical",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Patrick Strateman",
                "Dave Scotese",
                "Jorge Tim\u00f3n",
                "Alex Morcos",
                "Rune Kj\u00e6r Svendsen",
                "Matt Corallo",
                "Justus Ranvier",
                "Rune K. Svendsen",
                "Vincent Truong"
            ],
            "messages_count": 14,
            "total_messages_chars_count": 58353
        }
    },
    {
        "title": "[bitcoin-dev] Proposed new policy for transactions that depend on other unconfirmed transactions",
        "thread_messages": [
            {
                "author": "Alex Morcos",
                "date": "2015-09-21T15:02:20",
                "message_text_only": "Thanks for everyone's review.  These policy changes have been merged in to\nmaster in 6654 <https://github.com/bitcoin/bitcoin/pull/6654>, which just\nimplements these limits and no mempool limiting yet.  The default ancestor\npackage size limit is 900kb not 1MB.\n\nYes I think these limits are generous, but they were designed to be as\ngenerous as was computationally feasible so they were unobjectionable\n(since the existing policy was no limits).  This does not preclude future\nchanges to policy that would reduce these limits.\n\n\n\n\n\nOn Fri, Aug 21, 2015 at 3:52 PM, Danny Thorpe <danny.thorpe at gmail.com>\nwrote:\n\n> The limits Alex proposed are generous (bordering on obscene!), but\n> dropping that down to allowing only two levels of chained unconfirmed\n> transactions is too tight.\n>\n> Use case: Brokered asset transfers may require sets of transactions with a\n> dependency tree depth of 3 to be published together. ( N seller txs, 1\n> broker bridge tx, M buyer txs )\n>\n> If the originally proposed depth limit of 100 does not provide a\n> sufficient cap on memory consumption or loop/recursion depth, a depth limit\n> of 10 would provide plenty of headroom for this 3 level use case and\n> similar patterns.\n>\n> -Danny\n>\n> On Fri, Aug 21, 2015 at 12:22 PM, Matt Corallo via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> I dont see any problem with such limits. Though, hell, if you limited\n>> entire tx dependency trees (ie transactions and all required unconfirmed\n>> transactions for them) to something like 10 txn, maximum two levels\n>> deep, I also wouldnt have a problem.\n>>\n>> Matt\n>>\n>> On 08/14/15 19:33, Alex Morcos via bitcoin-dev wrote:\n>> > Hi everyone,\n>> >\n>> >\n>> > I'd like to propose a new set of requirements as a policy on when to\n>> > accept new transactions into the mempool and relay them.  This policy\n>> > would affect transactions which have as inputs other transactions which\n>> > are not yet confirmed in the blockchain.\n>> >\n>> > The motivation for this policy is 6470\n>> > <https://github.com/bitcoin/bitcoin/pull/6470> which aims to limit the\n>> > size of a mempool.  As discussed in that pull\n>> > <https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125324736>,\n>> > once the mempool is full a new transaction must be able to pay not only\n>> > for the transaction it would evict, but any dependent transactions that\n>> > would be removed from the mempool as well.  In order to make sure this\n>> > is always feasible, I'm proposing 4 new policy limits.\n>> >\n>> > All limits are command line configurable.\n>> >\n>> > The first two limits are required to make sure no chain of transactions\n>> > will be too large for the eviction code to handle:\n>> >\n>> > Max number of descendant txs : No transaction shall be accepted if it\n>> > would cause another transaction in the mempool to have too many\n>> > descendant transactions (all of which would have to be evicted if the\n>> > ancestor transaction was evicted).  Default: 1000\n>> >\n>> > Max descendant size : No transaction shall be accepted if it would cause\n>> > another transaction in the mempool to have the total size of all its\n>> > descendant transactions be too great.  Default : maxmempool / 200  =\n>> 2.5MB\n>> >\n>> > The third limit is required to make sure calculating the state required\n>> > for sorting and limiting the mempool and enforcing the first 2 limits is\n>> > computationally feasible:\n>> >\n>> > Max number of ancestor txs:  No transaction shall be accepted if it has\n>> > too many ancestor transactions which are not yet confirmed (ie, in the\n>> > mempool). Default: 100\n>> >\n>> > The fourth limit is required to maintain the pre existing policy goal\n>> > that all transactions in the mempool should be mineable in the next\n>> block.\n>> >\n>> > Max ancestor size: No transaction shall be accepted if the total size of\n>> > all its unconfirmed ancestor transactions is too large.  Default: 1MB\n>> >\n>> > (All limits include the transaction itself.)\n>> >\n>> > For reference, these limits would have affected less than 2% of\n>> > transactions entering the mempool in April or May of this year.  During\n>> > the period of 7/6 through 7/14, while the network was under stress test,\n>> > as many as 25% of the transactions would have been affected.\n>> >\n>> > The code to implement the descendant package tracking and new policy\n>> > limits can be found in 6557\n>> > <https://github.com/bitcoin/bitcoin/pull/6557> which is built off of\n>> 6470.\n>> >\n>> > Thanks,\n>> > Alex\n>> >\n>> >\n>> >\n>> > _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150921/9c5e53e6/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposed new policy for transactions that depend on other unconfirmed transactions",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Alex Morcos"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 5089
        }
    },
    {
        "title": "[bitcoin-dev] Weekly development meetings on IRC: schedule",
        "thread_messages": [
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-09-22T14:36:29",
                "message_text_only": "Hello,\n\nThere was overwhelming response that weekly IRC meetings are a good thing.\n\nThanks to the doodle site we were able to select a time slot that everyone (that voted) is available:\n\n    Thursday 19:00-20:00 UTC, every week, starting September 24 (next Thursday)\n\nI created a shared Google Calendar here:\nhttps://www.google.com/calendar/embed?src=MTFwcXZkZ3BkOTlubGliZjliYTg2MXZ1OHNAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ\n\nThe timezone of this calendar is Reykyavik (Iceland) which is UTC+0. However, you can use the button on the lower right to add the calendar to your own calendar, which will then show the meeting in your own timezone.\n\nSee you then,\n\nWladimir"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-09-23T11:01:12",
                "message_text_only": "There could not be a worse timing than this for those in China (3-4am), \nJapan/Korea (4-5am), and Australia (3-6am depends on which part of the \ncountry). Maybe we have no dev in this part of the planet? Is there any \nchance to review the timing in a weekly or monthly basis (also with a \ndoodle vote?)\n\nWill there be any agenda published before the meetings? If I'm really \ninterested in the topics, I'll have some reasons to get up in the middle \nof the night.\n\nWladimir J. van der Laan via bitcoin-dev \u65bc 2015-09-22 10:36 \u5beb\u5230:\n> Hello,\n> \n> There was overwhelming response that weekly IRC meetings are a good \n> thing.\n> \n> Thanks to the doodle site we were able to select a time slot that\n> everyone (that voted) is available:\n> \n>     Thursday 19:00-20:00 UTC, every week, starting September 24 (next \n> Thursday)\n> \n> I created a shared Google Calendar here:\n> https://www.google.com/calendar/embed?src=MTFwcXZkZ3BkOTlubGliZjliYTg2MXZ1OHNAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ\n> \n> The timezone of this calendar is Reykyavik (Iceland) which is UTC+0.\n> However, you can use the button on the lower right to add the calendar\n> to your own calendar, which will then show the meeting in your own\n> timezone.\n> \n> See you then,\n> \n> Wladimir\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-23T13:02:29",
                "message_text_only": "On Wed, Sep 23, 2015 at 12:01 PM, jl2012 via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Will there be any agenda published before the meetings? If I'm really\n> interested in the topics, I'll have some reasons to get up in the middle of\n> the night.\n>\n\nThe #bitcoin-dev IRC channel is logged at http://bitcoinstats.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/39e8b81b/attachment.html>"
            },
            {
                "author": "Vincent Truong",
                "date": "2015-09-23T14:06:20",
                "message_text_only": "All,\n\nCurrent meeting time visualised globally.\n\nhttp://everytimezone.com/#2015-9-24,420,4ia\n\njl,\n\nI think I found a good compromise: if the US want to accommodate Asia and\nwilling to sacrifice preference, 23:00 to 00:00 UTC might work.\n\nhttp://everytimezone.com/#2015-9-24,660,4ia\n\nIt isn't easy to grab everyone's preference and accommodate everyone, so\nthis might work in theory but people may not be free to show up. US should\nbe ok. UK can participate or catch some nice z. Asia will need a bit of\nearly bird time but it's not as crazy as 3am. AU also fits in there nicely.\n\nA meeting like this once a month should be enough probably (say, do this on\nthe first week of the month, and run every other week on the main\nschedule). But I don't know whether there are enough people in Asia/AU to\nmake it worth it. Asia/AU people, thoughts?\nOn Sep 23, 2015 9:01 PM, \"jl2012 via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> There could not be a worse timing than this for those in China (3-4am),\n> Japan/Korea (4-5am), and Australia (3-6am depends on which part of the\n> country). Maybe we have no dev in this part of the planet? Is there any\n> chance to review the timing in a weekly or monthly basis (also with a\n> doodle vote?)\n>\n> Will there be any agenda published before the meetings? If I'm really\n> interested in the topics, I'll have some reasons to get up in the middle of\n> the night.\n>\n> Wladimir J. van der Laan via bitcoin-dev \u65bc 2015-09-22 10:36 \u5beb\u5230:\n>\n>> Hello,\n>>\n>> There was overwhelming response that weekly IRC meetings are a good thing.\n>>\n>> Thanks to the doodle site we were able to select a time slot that\n>> everyone (that voted) is available:\n>>\n>>     Thursday 19:00-20:00 UTC, every week, starting September 24 (next\n>> Thursday)\n>>\n>> I created a shared Google Calendar here:\n>>\n>> https://www.google.com/calendar/embed?src=MTFwcXZkZ3BkOTlubGliZjliYTg2MXZ1OHNAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ\n>>\n>> The timezone of this calendar is Reykyavik (Iceland) which is UTC+0.\n>> However, you can use the button on the lower right to add the calendar\n>> to your own calendar, which will then show the meeting in your own\n>> timezone.\n>>\n>> See you then,\n>>\n>> Wladimir\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150924/41e7146a/attachment-0001.html>"
            },
            {
                "author": "Micha Bailey",
                "date": "2015-09-24T15:33:06",
                "message_text_only": "That's suboptimal for Europe etc., starting at midnight in the UK, 1 AM in\nCET, 2 AM in EET (an hour earlier once DST ends).\n\nOn Wednesday, September 23, 2015, Vincent Truong via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> All,\n>\n> Current meeting time visualised globally.\n>\n> http://everytimezone.com/#2015-9-24,420,4ia\n>\n> jl,\n>\n> I think I found a good compromise: if the US want to accommodate Asia and\n> willing to sacrifice preference, 23:00 to 00:00 UTC might work.\n>\n> http://everytimezone.com/#2015-9-24,660,4ia\n>\n> It isn't easy to grab everyone's preference and accommodate everyone, so\n> this might work in theory but people may not be free to show up. US should\n> be ok. UK can participate or catch some nice z. Asia will need a bit of\n> early bird time but it's not as crazy as 3am. AU also fits in there nicely.\n>\n> A meeting like this once a month should be enough probably (say, do this\n> on the first week of the month, and run every other week on the main\n> schedule). But I don't know whether there are enough people in Asia/AU to\n> make it worth it. Asia/AU people, thoughts?\n> On Sep 23, 2015 9:01 PM, \"jl2012 via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org\n> <javascript:_e(%7B%7D,'cvml','bitcoin-dev at lists.linuxfoundation.org');>>\n> wrote:\n>\n>> There could not be a worse timing than this for those in China (3-4am),\n>> Japan/Korea (4-5am), and Australia (3-6am depends on which part of the\n>> country). Maybe we have no dev in this part of the planet? Is there any\n>> chance to review the timing in a weekly or monthly basis (also with a\n>> doodle vote?)\n>>\n>> Will there be any agenda published before the meetings? If I'm really\n>> interested in the topics, I'll have some reasons to get up in the middle of\n>> the night.\n>>\n>> Wladimir J. van der Laan via bitcoin-dev \u65bc 2015-09-22 10:36 \u5beb\u5230:\n>>\n>>> Hello,\n>>>\n>>> There was overwhelming response that weekly IRC meetings are a good\n>>> thing.\n>>>\n>>> Thanks to the doodle site we were able to select a time slot that\n>>> everyone (that voted) is available:\n>>>\n>>>     Thursday 19:00-20:00 UTC, every week, starting September 24 (next\n>>> Thursday)\n>>>\n>>> I created a shared Google Calendar here:\n>>>\n>>> https://www.google.com/calendar/embed?src=MTFwcXZkZ3BkOTlubGliZjliYTg2MXZ1OHNAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ\n>>>\n>>> The timezone of this calendar is Reykyavik (Iceland) which is UTC+0.\n>>> However, you can use the button on the lower right to add the calendar\n>>> to your own calendar, which will then show the meeting in your own\n>>> timezone.\n>>>\n>>> See you then,\n>>>\n>>> Wladimir\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> <javascript:_e(%7B%7D,'cvml','bitcoin-dev at lists.linuxfoundation.org');>\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> <javascript:_e(%7B%7D,'cvml','bitcoin-dev at lists.linuxfoundation.org');>\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150924/983769e0/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Weekly development meetings on IRC: schedule",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Btc Drak",
                "Wladimir J. van der Laan",
                "Micha Bailey",
                "jl2012 at xbt.hk",
                "Vincent Truong"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 8750
        }
    },
    {
        "title": "[bitcoin-dev] Long-term vision for bitcoind (was libconsensus and bitcoin development process)",
        "thread_messages": [
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-22T18:36:14",
                "message_text_only": "On Fri, Sep 18, 2015 at 2:07 AM, Wladimir J. van der Laan via\nbitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> My long-term vision of bitcoind is a P2P node with validation and blockchain store, with a couple of data sources that can be subscribed to or pulled from.\n\nI agree with this long term vision.\nHere's how I think it could happen:\n\n1) Libconsensus is completed and moved to a subtree (which has libsecp\nas an internal subtree)\n\n2) Bitcoind becomes a subtree of bitcoin-wallet (which has\nbitcoin-wallet and bitcoin-qt)\n\nWithout aggressively changing it for this purpose, libconsensus should\ntend to become C, like libsecp, which is better for proving\ncorrectness.\nHopefully at some point it won't take much to move to C.\n\nUpper layers should move to C++11\n\nDon't focus on the git subtrees, the basic architecture is bitcoin-qt\non top of bitcoin-wallet, bitcoin-wallet on top of bitcoind (and\nfriends like bitcoin-cli and bitcoin-tx), bitcoind on top of\nlibconsensus on top of libsecp256k1.\n\nI believe this would maximize the number of people who can safely\ncontribute to the project.\nI also believe this is the architecture most contributors have in mind\nfor the long term, but I may be wrong about it.\n\nCriticisms to this plan?"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-23T00:07:22",
                "message_text_only": "Here's what I propose as a long-term plan:\n\n1) libconsensus\n==========\nWe should probably start by defining an API for libconsensus. It should \nsupport an abstract DB model, track chain state, provide query \nmechanisms for blocks and transactions with optional pruning and \nindexing, expose a subscription mechanism for events such as NEW_TIP, \nREORG, etc, and contain a script interpreter.\n\nWe can develop the library in parallel with Bitcoin Core without too \nmuch refactoring of Bitcoin Core itself...just moving pieces of Bitcoin \nCore's consensus code into the new library, tracking code movements to \nmake merging easier. Yes, this is a bit ugly as it requires code \nduplication...but it will temporarily avoid much of the downstream \npushback we're getting. The idea is that we can prove out the library \nwith some simple projects, then start removing the consensus stuff from \nBitcoin Core once we have greater acceptance of the library and better \ndocumentation.\n\n\n2) peer services\n==========\nWe develop a peer services library that performs the tasks of peer \ndiscovery and relay, with the ability to connect to appropriate peers \nand queue messages. It uses libconsensus for all validation \nfunctionality and as a datastore for the consensus state but maintains \nits own database for peer history and statistics. I believe Cory has \nbeen working on this already using libevent. I've already developed an \nasync library for this as well.\n\n\n3) API/RPC\n=======\nWe provide high level calls and pub/sub mechanisms. ZMQ has been \nimplemented and added already, but we could support other transports as \nwell.\n\n\n4) Wallet\n======\nThe wallet is split out into a separate process that connects to the \nstack via the API/RPC layer.\n\n\n- Eric\n\n------ Original Message ------\nFrom: \"Jorge Tim\u00f3n\" <bitcoin-dev at lists.linuxfoundation.org>\nTo: \"Wladimir J. van der Laan\" <laanwj at gmail.com>\nCc: \"Bitcoin development mailing list\" \n<bitcoin-dev at lists.linuxfoundation.org>\nSent: 9/22/2015 11:36:14 AM\nSubject: [bitcoin-dev] Long-term vision for bitcoind (was libconsensus \nand bitcoin development process)\n\n>On Fri, Sep 18, 2015 at 2:07 AM, Wladimir J. van der Laan via\n>bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>  My long-term vision of bitcoind is a P2P node with validation and \n>>blockchain store, with a couple of data sources that can be subscribed \n>>to or pulled from.\n>\n>I agree with this long term vision.\n>Here's how I think it could happen:\n>\n>1) Libconsensus is completed and moved to a subtree (which has libsecp\n>as an internal subtree)\n>\n>2) Bitcoind becomes a subtree of bitcoin-wallet (which has\n>bitcoin-wallet and bitcoin-qt)\n>\n>Without aggressively changing it for this purpose, libconsensus should\n>tend to become C, like libsecp, which is better for proving\n>correctness.\n>Hopefully at some point it won't take much to move to C.\n>\n>Upper layers should move to C++11\n>\n>Don't focus on the git subtrees, the basic architecture is bitcoin-qt\n>on top of bitcoin-wallet, bitcoin-wallet on top of bitcoind (and\n>friends like bitcoin-cli and bitcoin-tx), bitcoind on top of\n>libconsensus on top of libsecp256k1.\n>\n>I believe this would maximize the number of people who can safely\n>contribute to the project.\n>I also believe this is the architecture most contributors have in mind\n>for the long term, but I may be wrong about it.\n>\n>Criticisms to this plan?\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-23T00:10:50",
                "message_text_only": "I should also add that the mempool should exist in (2). This way the \npeer services layer can manage all relay policy and mempool management.\n\n------ Original Message ------\nFrom: \"Eric Lombrozo\" <elombrozo at gmail.com>\nTo: \"Jorge Tim\u00f3n\" <jtimon at jtimon.cc>; \"Wladimir J. van der Laan\" \n<laanwj at gmail.com>\nCc: \"Bitcoin development mailing list\" \n<bitcoin-dev at lists.linuxfoundation.org>\nSent: 9/22/2015 5:07:22 PM\nSubject: Re: [bitcoin-dev] Long-term vision for bitcoind (was \nlibconsensus and bitcoin development process)\n\n>Here's what I propose as a long-term plan:\n>\n>1) libconsensus\n>==========\n>We should probably start by defining an API for libconsensus. It should \n>support an abstract DB model, track chain state, provide query \n>mechanisms for blocks and transactions with optional pruning and \n>indexing, expose a subscription mechanism for events such as NEW_TIP, \n>REORG, etc, and contain a script interpreter.\n>\n>We can develop the library in parallel with Bitcoin Core without too \n>much refactoring of Bitcoin Core itself...just moving pieces of Bitcoin \n>Core's consensus code into the new library, tracking code movements to \n>make merging easier. Yes, this is a bit ugly as it requires code \n>duplication...but it will temporarily avoid much of the downstream \n>pushback we're getting. The idea is that we can prove out the library \n>with some simple projects, then start removing the consensus stuff from \n>Bitcoin Core once we have greater acceptance of the library and better \n>documentation.\n>\n>\n>2) peer services\n>==========\n>We develop a peer services library that performs the tasks of peer \n>discovery and relay, with the ability to connect to appropriate peers \n>and queue messages. It uses libconsensus for all validation \n>functionality and as a datastore for the consensus state but maintains \n>its own database for peer history and statistics. I believe Cory has \n>been working on this already using libevent. I've already developed an \n>async library for this as well.\n>\n>\n>3) API/RPC\n>=======\n>We provide high level calls and pub/sub mechanisms. ZMQ has been \n>implemented and added already, but we could support other transports as \n>well.\n>\n>\n>4) Wallet\n>======\n>The wallet is split out into a separate process that connects to the \n>stack via the API/RPC layer.\n>\n>\n>- Eric\n>\n>------ Original Message ------\n>From: \"Jorge Tim\u00f3n\" <bitcoin-dev at lists.linuxfoundation.org>\n>To: \"Wladimir J. van der Laan\" <laanwj at gmail.com>\n>Cc: \"Bitcoin development mailing list\" \n><bitcoin-dev at lists.linuxfoundation.org>\n>Sent: 9/22/2015 11:36:14 AM\n>Subject: [bitcoin-dev] Long-term vision for bitcoind (was libconsensus \n>and bitcoin development process)\n>\n>>On Fri, Sep 18, 2015 at 2:07 AM, Wladimir J. van der Laan via\n>>bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>  My long-term vision of bitcoind is a P2P node with validation and \n>>>blockchain store, with a couple of data sources that can be \n>>>subscribed to or pulled from.\n>>\n>>I agree with this long term vision.\n>>Here's how I think it could happen:\n>>\n>>1) Libconsensus is completed and moved to a subtree (which has libsecp\n>>as an internal subtree)\n>>\n>>2) Bitcoind becomes a subtree of bitcoin-wallet (which has\n>>bitcoin-wallet and bitcoin-qt)\n>>\n>>Without aggressively changing it for this purpose, libconsensus should\n>>tend to become C, like libsecp, which is better for proving\n>>correctness.\n>>Hopefully at some point it won't take much to move to C.\n>>\n>>Upper layers should move to C++11\n>>\n>>Don't focus on the git subtrees, the basic architecture is bitcoin-qt\n>>on top of bitcoin-wallet, bitcoin-wallet on top of bitcoind (and\n>>friends like bitcoin-cli and bitcoin-tx), bitcoind on top of\n>>libconsensus on top of libsecp256k1.\n>>\n>>I believe this would maximize the number of people who can safely\n>>contribute to the project.\n>>I also believe this is the architecture most contributors have in mind\n>>for the long term, but I may be wrong about it.\n>>\n>>Criticisms to this plan?\n>>_______________________________________________\n>>bitcoin-dev mailing list\n>>bitcoin-dev at lists.linuxfoundation.org\n>>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "Long-term vision for bitcoind (was libconsensus and bitcoin development process)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Lombrozo",
                "Jorge Tim\u00f3n"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 9028
        }
    },
    {
        "title": "[bitcoin-dev] Weak block thoughts...",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2015-09-23T15:43:11",
                "message_text_only": "I've been thinking about 'weak blocks' and SPV mining, and it seems to me\nweak blocks will make things better, not worse, if we improve the mining\ncode a little bit.\n\nFirst:  the idea of 'weak blocks' (hat tip to Rusty for the term) is for\nminers to pre-announce blocks that they're working on, before they've\nsolved the proof-of-work puzzle. To prevent DoS attacks, assume that some\namount of proof-of-work is done (hence the term 'weak block') to rate-limit\nhow many 'weak block' messages are relayed across the network.\n\n\nToday, miners are incentivized to start mining an empty block as soon as\nthey see a block with valid proof-of-work, because they want to spend as\nlittle time as possible mining a not-best chain.\n\nImagine miners always pre-announce the blocks they're working on to their\npeers, and peers validate those 'weak blocks' as quickly as they are able.\n\nBecause weak blocks are pre-validated, when a full-difficulty block based\non a previously announced weak block is found, block propagation should be\ninsanely fast-- basically, as fast as a single packet can be relayed across\nthe network the whole network could be mining on the new block.\n\nI don't see any barrier to making accepting the full-difficulty block and\nCreateNewBlock() insanely fast, and if those operations take just a\nmicrosecond or three, miners will have an incentive to create blocks with\nfee-paying transactions that weren't in the last block, rather than mining\nempty blocks.\n\n.................\n\nA miner could try to avoid validation work by just taking a weak block\nannounced by somebody else, replacing the coinbase and re-computing the\nmerkle root, and then mining. They will be at a slight disadvantage to\nfully validating miners, though, because they WOULD have to mine empty\nblocks between the time a full block is found and a fully-validating miner\nannounced their next weak block.\n\n.................\n\nWeak block announcements are great for the network; they give transaction\ncreators a pretty good idea of whether or not their transactions are likely\nto be confirmed in the next block. And if we're smart about implementing\nthem, they shouldn't increase bandwidth or CPU usage significantly, because\nall the weak blocks at a given point in time are likely to contain the same\ntransactions.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/ca1bbeb5/attachment.html>"
            },
            {
                "author": "Bryan Bishop",
                "date": "2015-09-23T16:07:08",
                "message_text_only": "On Wed, Sep 23, 2015 at 10:43 AM, Gavin Andresen via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> First:  the idea of 'weak blocks' (hat tip to Rusty for the term)\n\n\nHere are some other \"weak blocks\" and \"near blocks\" proposals or mentions:\nhttps://bitcointalk.org/index.php?topic=179598.0\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-July/002976.html\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-September/003275.html\nhttps://bitcointalk.org/index.php?topic=673415.msg7658481#msg7658481\nhttp://gnusha.org/bitcoin-wizards/2015-08-20.log\n\nmore recently:\nhttp://gnusha.org/bitcoin-wizards/2015-09-20.log\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/roundgroup-roundup-1/\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/bitcoin-block-propagation-iblt-rusty-russell/\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/451af1ac/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-09-23T19:24:06",
                "message_text_only": "On Wed, Sep 23, 2015 at 4:07 PM, Bryan Bishop via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> more recently:\n> http://gnusha.org/bitcoin-wizards/2015-09-20.log\n> http://diyhpl.us/wiki/transcripts/scalingbitcoin/roundgroup-roundup-1/\n> http://diyhpl.us/wiki/transcripts/scalingbitcoin/bitcoin-block-propagation-iblt-rusty-russell/\n\nSee also my response to Peter R's paper that was republished to the\nlist at http://pastebin.com/jFgkk8M3\n(See sections at \"For example, imagine if miners only include\ntransactions that were previously committed\" and especially \"Miners\nvolutarily participate in a fast consensus mechenism which commits to\ntransactions\")\n\nOn Wed, Sep 23, 2015 at 3:43 PM, Gavin Andresen via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Imagine miners always pre-announce the blocks they're working on to their\n> peers, and peers validate those 'weak blocks' as quickly as they are able.\n>\n> Because weak blocks are pre-validated, when a full-difficulty block based on\n> a previously announced weak block is found, block propagation should be\n> insanely fast--\n[...]\n> A miner could try to avoid validation work by just taking a weak block\n> announced by somebody else, replacing the coinbase and re-computing the\n> merkle root, and then mining. They will be at a slight disadvantage to fully\n\nTake care, here-- if a scheme is used where e.g. the full solution had\nto be exactly identical to a prior weak block then the result would be\nmaking mining not progress free because bigger miners would have\ndisproportionately more access to the weak/strong one/two punch. I\nthink what you're thinking here is okay, but it wasn't clear to me if\nyou'd caught that particular potential issue.\n\nAvoiding this is why I've always previously described this idea as\nmerged mined block DAG (with blocks of arbitrary strength) which are\nalways efficiently deferentially coded against prior state. A new\nsolution (regardless of who creates it) can still be efficiently\ntransmitted even if it differs in arbitrary ways (though the\nefficiency is less the more different it is).\n\nThere is a cost to these schemes-- additional overhead from\ncommunicating the efficiently encoded weak blocks. But participation\nin this overhead is optional and doesn't impact the history.\n\nI'm unsure of what approach to take for incentive compatibility\nanalysis. In the worst case this approach class has no better delays\n(and higher bandwidth); but it doesn't seem to me to give rise to any\nimmediate incrementally strategic behavior (or at least none worse\nthan you'd get from just privately using the same scheme).\n\nOn Wed, Sep 23, 2015 at 4:28 PM, Peter R via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Shouldn't mining pools and miners be paying you guys for coding solutions\n> that improve their profitability?\n\nThe income to miners as a whole doesn't depend on these sorts of\noptimizations, competitive advantages do... so better common open\ninfrastructure helps mostly in the case of putting propagation\ndisadvantaged miners on an equal playing field. You'll note that none\nof them are exactly sharing their SPV mining source code right now....\nin any case, there are simple, expedient, and low risk ways to improve\ntheir equality in that respect: centralize (e.g. use bigger pools)."
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-09-23T21:37:25",
                "message_text_only": "On Wed, Sep 23, 2015 at 3:24 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Wed, Sep 23, 2015 at 3:43 PM, Gavin Andresen via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> [...]\n> > A miner could try to avoid validation work by just taking a weak block\n> > announced by somebody else, replacing the coinbase and re-computing the\n> > merkle root, and then mining. They will be at a slight disadvantage to\n> fully\n>\n> Take care, here-- if a scheme is used where e.g. the full solution had\n> to be exactly identical to a prior weak block then the result would be\n> making mining not progress free because bigger miners would have\n> disproportionately more access to the weak/strong one/two punch. I\n> think what you're thinking here is okay, but it wasn't clear to me if\n> you'd caught that particular potential issue.\n>\n\nI'm assuming the optimized protocol would be forward-error-coded (e.g.\nusing IBLTs)  and NOT require the full solution (or follow-on weak blocks)\nto be exactly the same.\n\n\n> Avoiding this is why I've always previously described this idea as\n> merged mined block DAG (with blocks of arbitrary strength) which are\n> always efficiently deferentially coded against prior state. A new\n> solution (regardless of who creates it) can still be efficiently\n> transmitted even if it differs in arbitrary ways (though the\n> efficiency is less the more different it is).\n>\n\nYup, although I don't get the 'merge mined' bit; the weak blocks are\nephemeral, probably purged out of memory as soon as a few full blocks are\nfound...\n\n\n> I'm unsure of what approach to take for incentive compatibility\n> analysis. In the worst case this approach class has no better delays\n> (and higher bandwidth); but it doesn't seem to me to give rise to any\n> immediate incrementally strategic behavior (or at least none worse\n> than you'd get from just privately using the same scheme).\n>\n\nI don't see any incentive problems, either. Worst case is more miners\ndecide to skip validation and just mine a variation of the\nhighest-fee-paying weak block they've seen, but that's not a disaster--\ninvalid blocks will still get rejected by all the non-miners running full\nnodes.\n\nIf we did see that behavior, I bet it would be a good strategy for a big\nhashrate miner to dedicate some of their hashrate to announcing invalid\nweak blocks; if you can get your lazy competitors to mine it, then you\nwin....\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/4ef4ac54/attachment.html>"
            },
            {
                "author": "Jonathan Toomim (Toomim Bros)",
                "date": "2015-09-23T22:16:14",
                "message_text_only": "On Sep 23, 2015, at 2:37 PM, Gavin Andresen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Take care, here-- if a scheme is used where e.g. the full solution had\n> to be exactly identical to a prior weak block then the result would be\n> making mining not progress free because bigger miners would have\n> disproportionately more access to the weak/strong one/two punch. I\n> think what you're thinking here is okay, but it wasn't clear to me if\n> you'd caught that particular potential issue.\n> \n> I'm assuming the optimized protocol would be forward-error-coded (e.g. using IBLTs)  and NOT require the full solution (or follow-on weak blocks) to be exactly the same.\n> \n\nOne possible improvement on this is to cache Merkle nodes/subtrees. When a weak block is created, nodes could cache the hashes for the Merkle nodes along with each node's children. A miner could then describe their block in terms of Merkle nodes (describing groups of 2^n transactions), which would give them the ability to copy e.g. 87.5% or 96.875% or whatever of their new block from someone else's weak block but with a few modifications (e.g. new transactions) in the remaining non-prespecified portion. This gives small miners the ability to trade off versatility (do I specify all of the transactions with my own Merkle structure?) versus propagation speed (do I copy all of my Merkle tree from another miner's weak block?) with all steps in between.\n\nI've got a proposal for a block propagation protocol inspired by bittorrent applied to the Merkle tree instead of chunks of a file. Weak blocks would fit in with this blocktorrent protocol quite nicely by caching and pre-transmitting Merkle nodes. I don't want to hijack this thread, so I'll post it under a separate subject in an hour or so.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/3edaab92/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/3edaab92/attachment.sig>"
            },
            {
                "author": "Rusty Russell",
                "date": "2015-09-24T01:11:03",
                "message_text_only": "Gavin Andresen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nwrites:\n> I don't see any incentive problems, either. Worst case is more miners\n> decide to skip validation and just mine a variation of the\n> highest-fee-paying weak block they've seen, but that's not a disaster--\n> invalid blocks will still get rejected by all the non-miners running full\n> nodes.\n\nThat won't help SPV nodes, unfortunately.\n\n> If we did see that behavior, I bet it would be a good strategy for a big\n> hashrate miner to dedicate some of their hashrate to announcing invalid\n> weak blocks; if you can get your lazy competitors to mine it, then you\n> win....\n\nWe already see non-validating mining, but they do empty blocks.  This\njust makes it more attractive in the future, since you can collect fees\ntoo.\n\nBut I think it's clear we'll eventually need some UTXO commitment so\nfull nodes can tell SPV nodes about bad blocks.\n\nCheers,\nRusty."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-09-27T01:39:00",
                "message_text_only": "On Wed, Sep 23, 2015 at 9:37 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n>> Avoiding this is why I've always previously described this idea as\n>> merged mined block DAG (with blocks of arbitrary strength) which are\n>> always efficiently deferentially coded against prior state. A new\n>> solution (regardless of who creates it) can still be efficiently\n>> transmitted even if it differs in arbitrary ways (though the\n>> efficiency is less the more different it is).\n>\n> Yup, although I don't get the 'merge mined' bit; the weak blocks are\n> ephemeral, probably purged out of memory as soon as a few full blocks are\n> found...\n\nUnless the weak block transaction list can be a superset of the block\ntransaction list size proportional propagation costs are not totally\neliminated.\n\nAs even if the weak block criteria is MUCH lower than the block\ncriteria (which would become problematic in its own right at some\npoint) the network will sometimes find blocks when there hasn't been\nany weak block priming at all (e.g. all prior priming has made it into\nblocks already).\n\nSo if the weak block commitment must be exactly the block commitment\nyou end up having to add a small number of transactions to your block\nabove and beyond the latest well propagated weak-blocks... Could still\nwork, but then creates a pressure to crank up the weak block overhead\nwhich could better be avoided."
            },
            {
                "author": "Tier Nolan",
                "date": "2015-09-27T09:42:24",
                "message_text_only": "On Sun, Sep 27, 2015 at 2:39 AM, Gregory Maxwell via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Unless the weak block transaction list can be a superset of the block\n> transaction list size proportional propagation costs are not totally\n> eliminated.\n>\n\nThe POW threshold could be dynamic.  The first weak-block that builds on a\nnew block could be forwarded with a smaller target.\n\nThis reduces  the window size until at least one weak block is propagated.\n\nThe change in threshold could be time based (for the first 30 seconds or\nso).  This would cause a surge of traffic when a new block once a new block\nhas propagated, so perhaps not so good an idea.\n\n\n> As even if the weak block criteria is MUCH lower than the block\n> criteria (which would become problematic in its own right at some\n> point) the network will sometimes find blocks when there hasn't been\n> any weak block priming at all (e.g. all prior priming has made it into\n> blocks already).\n>\n\nIf there is a transaction backlog, then miners could forward merkle\nbranches with transactions in the memory pool with a commitment in the\ncoinbase.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150927/a0f6ff63/attachment.html>"
            },
            {
                "author": "Kalle Rosenbaum",
                "date": "2015-09-27T15:10:24",
                "message_text_only": "I was mansplaining weak blocks to my wife. She asked a simple question:\n\nWhy would I, as a miner, publish a weak block if I find one?\n\nI don't know.\n\nSure, I will get faster propagation for my solved block, should I find one.\nOn the other hand everybody else mining a similar block will enjoy the same\nbenefit. Assuming that I'm not a huge miner, it's unlikely that I will\nactually solve the block, so I'm probably just giving away fast propagation\ntimes to someone else.\n\nSo how does publishing a weak block benefit the producer of it more than\nthe other miners? Please help me understand this.\n\n/Kalle Rosenbaum\n\n\n2015-09-27 11:42 GMT+02:00 Tier Nolan via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n>\n>\n> On Sun, Sep 27, 2015 at 2:39 AM, Gregory Maxwell via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Unless the weak block transaction list can be a superset of the block\n>> transaction list size proportional propagation costs are not totally\n>> eliminated.\n>>\n>\n> The POW threshold could be dynamic.  The first weak-block that builds on a\n> new block could be forwarded with a smaller target.\n>\n> This reduces  the window size until at least one weak block is\n> propagated.\n>\n> The change in threshold could be time based (for the first 30 seconds or\n> so).  This would cause a surge of traffic when a new block once a new block\n> has propagated, so perhaps not so good an idea.\n>\n>\n>> As even if the weak block criteria is MUCH lower than the block\n>> criteria (which would become problematic in its own right at some\n>> point) the network will sometimes find blocks when there hasn't been\n>> any weak block priming at all (e.g. all prior priming has made it into\n>> blocks already).\n>>\n>\n> If there is a transaction backlog, then miners could forward merkle\n> branches with transactions in the memory pool with a commitment in the\n> coinbase.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150927/04c13069/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-09-27T19:50:22",
                "message_text_only": "On Sun, Sep 27, 2015 at 3:10 PM, Kalle Rosenbaum via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I was mansplaining weak blocks to my wife. She asked a simple question:\n>\n> Why would I, as a miner, publish a weak block if I find one?\n>\n> I don't know.\n> Sure, I will get faster propagation for my solved block, should I find one.\n> On the other hand everybody else mining a similar block will enjoy the same\n> benefit. Assuming that I'm not a huge miner, it's unlikely that I will\n> actually solve the block, so I'm probably just giving away fast propagation\n> times to someone else.\n> So how does publishing a weak block benefit the producer of it more than the\n> other miners? Please help me understand this.\n\nKeep in mind, because of efficient differential transmission the cost\nto you is effectively nothing if your transaction acceptance policy is\npredictable, it's a hand-full of bytes sent. And by failing to send\nyours you do little to nothing to deny others the improvement.\n\nLets imagine an alternative weak-blockless weak block implementation:\n\nEvery N seconds, every miner send to every other miner what they're\nworking on.  This isn't totally crazy-- efficient differential\ntransmission will keep the amount transmitted small.\n\nAny block found can be referenced to any of these earlier worklists.\n\nWhat the effect be of not transmitting yours?\n\nIf your block is unlike everyone elses, you would suffer great delays\nin the event you found a block.\nIf your block is mostly like everyone elses, you wouldn't suffer as\nmuch delay-- but the transmission costs would be negligible in that\ncase. ... the size sent is proportional to the improvement you get\nwhen finding a block.\n\nIn either case, no one else is harmed by you not sending yours... they\nstill send their lists.\n\nA problem with that scheme is that unless you've layered an identity\nbased access control system on it anyone can DOS attack it, because\nanyone can send as much as they want, they don't even have to be\nactual miners.\n\nWhat weak blocks adds to that is using hashcash as a rate limiting\nmechanism-- a coordination free lottery weighed by hash-power decides\nwho can transmit.\n\nWhat if you don't participate in the lottery and share your solutions?\n No major harm for the other users... the other users will just choose\na somewhat lower weak-block threshold to get the updates at the\ndesired rate than they would otherwise. To the extent that what you\nwere working on was different from anyone else, you'll suffer because\nyou failed to make use of your chance to influence what could be\nefficiently transmitted to include your own blocks.\n\nYou could also ask a question of why would you transitively relay\nsomeone elses announcement-- well if it helped their blocks too  (by\nreflecting things they also want to mine) the answer is obvious. But\nwhat if it was disjoint from the things they wanted to mine and didn't\nhelp compared to the weak blocks they already relayed?  In that case\nit's still in likely in their interest to relay it because if a block\nsimilar to it is produced and they extend that block they may end up\norphaned because of propagation delays their parent block suffered.\nWhat if they receive an announcement which is so \"ugly\" that they\nwouldn't extend the chain with the strong block version of it (they'd\nintentionally try to fork it off?)-- in that case they wouldn't want\nto relay it.  So much the same logic as why you relay other parties\nblocks applies, including-- relaying helps the network, but if you\ndon't it'll still get along fine without you."
            },
            {
                "author": "Kalle Rosenbaum",
                "date": "2015-09-28T08:30:42",
                "message_text_only": "2015-09-27 21:50 GMT+02:00 Gregory Maxwell <gmaxwell at gmail.com>:\n\n> On Sun, Sep 27, 2015 at 3:10 PM, Kalle Rosenbaum via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > I was mansplaining weak blocks to my wife. She asked a simple question:\n> >\n> > Why would I, as a miner, publish a weak block if I find one?\n> >\n> > I don't know.\n> > Sure, I will get faster propagation for my solved block, should I find\n> one.\n> > On the other hand everybody else mining a similar block will enjoy the\n> same\n> > benefit. Assuming that I'm not a huge miner, it's unlikely that I will\n> > actually solve the block, so I'm probably just giving away fast\n> propagation\n> > times to someone else.\n> > So how does publishing a weak block benefit the producer of it more than\n> the\n> > other miners? Please help me understand this.\n>\n> Keep in mind, because of efficient differential transmission the cost\n> to you is effectively nothing if your transaction acceptance policy is\n> predictable, it's a hand-full of bytes sent. And by failing to send\n> yours you do little to nothing to deny others the improvement.\n>\n>\nSuppose that you've solved a block Z (weak or not) and you want to\npropagate it using a previous weak block Y. With \"efficient differential\ntransmission\", I assume that you refer to the transmission of the\ndifferences between Y and Z to a peer? What encodings are discussed? I\nguess IBLTs are a hot candidate, but are there other schemes in the making?\nI suppose that sending something like \"weak block Y plus transactions A, B,\nC minus transaction ids h(D), h(E)\" is not considered an efficient\ndifferential transmission. Then that's part of the answer to my question.\n\n\n> Lets imagine an alternative weak-blockless weak block implementation:\n>\n> Every N seconds, every miner send to every other miner what they're\n> working on.  This isn't totally crazy-- efficient differential\n> transmission will keep the amount transmitted small.\n>\n> Any block found can be referenced to any of these earlier worklists.\n>\n> What the effect be of not transmitting yours?\n>\n> If your block is unlike everyone elses, you would suffer great delays\n> in the event you found a block.\n> If your block is mostly like everyone elses, you wouldn't suffer as\n> much delay-- but the transmission costs would be negligible in that\n> case. ... the size sent is proportional to the improvement you get\n> when finding a block.\n>\n\n\"the size sent is proportional to the improvement you get when finding a\nblock.\" - This encapsulates the issue quite well! The more exotic block I'm\nbuilding, the more I would benefit from publishing a weak block, but my\nweak block would also be larger.\n\n\n>\n> In either case, no one else is harmed by you not sending yours... they\n> still send their lists.\n>\n> A problem with that scheme is that unless you've layered an identity\n> based access control system on it anyone can DOS attack it, because\n> anyone can send as much as they want, they don't even have to be\n> actual miners.\n>\n> What weak blocks adds to that is using hashcash as a rate limiting\n> mechanism-- a coordination free lottery weighed by hash-power decides\n> who can transmit.\n>\n> What if you don't participate in the lottery and share your solutions?\n>  No major harm for the other users... the other users will just choose\n> a somewhat lower weak-block threshold to get the updates at the\n> desired rate than they would otherwise. To the extent that what you\n> were working on was different from anyone else, you'll suffer because\n> you failed to make use of your chance to influence what could be\n> efficiently transmitted to include your own blocks.\n>\n\nMakes perfect sense. Also, if I'm working on an exotic block, the\nprobability of someone extending my weak block would be low-ish, so I'm not\nnecessarily \"giving away fast propagation times to someone else\" as I first\nthought.\n\n\n> You could also ask a question of why would you transitively relay\n> someone elses announcement-- well if it helped their blocks too  (by\n> reflecting things they also want to mine) the answer is obvious. But\n> what if it was disjoint from the things they wanted to mine and didn't\n> help compared to the weak blocks they already relayed?  In that case\n> it's still in likely in their interest to relay it because if a block\n> similar to it is produced and they extend that block they may end up\n> orphaned because of propagation delays their parent block suffered.\n> What if they receive an announcement which is so \"ugly\" that they\n> wouldn't extend the chain with the strong block version of it (they'd\n> intentionally try to fork it off?)-- in that case they wouldn't want\n> to relay it.  So much the same logic as why you relay other parties\n> blocks applies, including-- relaying helps the network, but if you\n> don't it'll still get along fine without you.\n>\n\nThank you very much for your explanation.\n\n/Kalle\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/50ae758a/attachment.html>"
            },
            {
                "author": "Jonathan Toomim (Toomim Bros)",
                "date": "2015-09-28T13:30:22",
                "message_text_only": "On Sep 28, 2015, at 1:30 AM, Kalle Rosenbaum via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Suppose that you've solved a block Z (weak or not) and you want to propagate it using a previous weak block Y. With \"efficient differential transmission\", I assume that you refer to the transmission of the differences between Y and Z to a peer? What encodings are discussed? I guess IBLTs are a hot candidate, but are there other schemes in the making? I suppose that sending something like \"weak block Y plus transactions A, B, C minus transaction ids h(D), h(E)\" is not considered an efficient differential transmission. Then that's part of the answer to my question.\n> \n\nIBLTs are effective for synchronizing mempools, to ensure that all nodes in a network can successfully map a transaction hash to a full transaction. However, IBLTs do not help with the ordering of the transactions.\n\nEncoding the new blocks as a diff (delete bytes x through y, insert string s after byte z) based on a weak block would probably be pretty effective, but it would probably require a lot of memory for keeping a weak block (or chain of diffs) for each miner that publishes weak blocks. It might be a little complicated to manage and remove duplicate information between weak blocks published by different sources. You'd probably have to build a weak block tree or DAG with diffs as edges, and walk the tree each time you wanted to fetch a (weak) block.\n\nAnother strategy is to use the Merkle tree nodes. Each node is a hash of its concatenated child nodes, Each node thus specifies the order of 2^n transaction hashes. Changing one transaction hash requires modifying log_2(n) Merkle node hashes, which is okay but maybe not as good as the diff approach. However, the main benefit comes from compressing and storing data from many different weak blocks generated by different miners. You can build a cache of Merkle nodes, and each time you get a new weak block, you can add any new Merkle nodes to that cache. There's some more info on this here: http://bitcoin-development.narkive.com/dGIxjVI5/torrent-style-new-block-propagation-on-merkle-trees\n\nMerkle tree encodings handle replacements of transactions well, but they have trouble with insertions or deletions near the beginning of a block. Efforts could be made to avoid insertions and deletions in the actual transaction ordering to improve transmissibility, or a hybrid system could be implemented in which byte-level diffs or transaction-level diffs are used for transmitting the weak blocks as a diff against previously cached Merkle nodes.\n\nOr maybe there's a better way.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/4decf9a0/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/4decf9a0/attachment.sig>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-23T16:07:31",
                "message_text_only": "For anyone who missed the discussions of weak blocks, here are the Scaling\nBitcoin's transcripts:\n\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/bitcoin-block-propagation-iblt-rusty-russell/\n\nhttp://diyhpl.us/wiki/transcripts/scalingbitcoin/roundgroup-roundup-1/\n(under Network Propagation).\n\nOn Wed, Sep 23, 2015 at 4:43 PM, Gavin Andresen via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I've been thinking about 'weak blocks' and SPV mining, and it seems to me\n> weak blocks will make things better, not worse, if we improve the mining\n> code a little bit.\n>\n> First:  the idea of 'weak blocks' (hat tip to Rusty for the term) is for\n> miners to pre-announce blocks that they're working on, before they've\n> solved the proof-of-work puzzle. To prevent DoS attacks, assume that some\n> amount of proof-of-work is done (hence the term 'weak block') to rate-limit\n> how many 'weak block' messages are relayed across the network.\n>\n>\n> Today, miners are incentivized to start mining an empty block as soon as\n> they see a block with valid proof-of-work, because they want to spend as\n> little time as possible mining a not-best chain.\n>\n> Imagine miners always pre-announce the blocks they're working on to their\n> peers, and peers validate those 'weak blocks' as quickly as they are able.\n>\n> Because weak blocks are pre-validated, when a full-difficulty block based\n> on a previously announced weak block is found, block propagation should be\n> insanely fast-- basically, as fast as a single packet can be relayed across\n> the network the whole network could be mining on the new block.\n>\n> I don't see any barrier to making accepting the full-difficulty block and\n> CreateNewBlock() insanely fast, and if those operations take just a\n> microsecond or three, miners will have an incentive to create blocks with\n> fee-paying transactions that weren't in the last block, rather than mining\n> empty blocks.\n>\n> .................\n>\n> A miner could try to avoid validation work by just taking a weak block\n> announced by somebody else, replacing the coinbase and re-computing the\n> merkle root, and then mining. They will be at a slight disadvantage to\n> fully validating miners, though, because they WOULD have to mine empty\n> blocks between the time a full block is found and a fully-validating miner\n> announced their next weak block.\n>\n> .................\n>\n> Weak block announcements are great for the network; they give transaction\n> creators a pretty good idea of whether or not their transactions are likely\n> to be confirmed in the next block. And if we're smart about implementing\n> them, they shouldn't increase bandwidth or CPU usage significantly, because\n> all the weak blocks at a given point in time are likely to contain the same\n> transactions.\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/1d2d6730/attachment.html>"
            },
            {
                "author": "Peter R",
                "date": "2015-09-23T16:28:20",
                "message_text_only": "Hi Gavin,\n\nOne thing that's not clear to me is whether it is even necessary--from the perspective of the block size limit--to consider block propagation.  Bitcoin has been successfully operating unconstrained by the block size limit over its entire history (except for in the past few months)--block propagation never entered into the equation.  \n\nImagine that the limit were raised to significantly above the free market equilibrium block size Q*.  Mining pools and other miners would then have an incentive to work out schemes like \"weak blocks,\" relay networks, IBLTs, etc., in order to reduce the risk of orphaning larger blocks (blocks with more fees that they'd like to produce if it were profitable).  \n\nShouldn't mining pools and miners be paying you guys for coding solutions that improve their profitability?   \n\nBest regards,\nPeter\n\n\nOn 2015-09-23, at 8:43 AM, Gavin Andresen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I've been thinking about 'weak blocks' and SPV mining, and it seems to me weak blocks will make things better, not worse, if we improve the mining code a little bit.\n> \n> First:  the idea of 'weak blocks' (hat tip to Rusty for the term) is for miners to pre-announce blocks that they're working on, before they've solved the proof-of-work puzzle. To prevent DoS attacks, assume that some amount of proof-of-work is done (hence the term 'weak block') to rate-limit how many 'weak block' messages are relayed across the network.\n> \n> \n> Today, miners are incentivized to start mining an empty block as soon as they see a block with valid proof-of-work, because they want to spend as little time as possible mining a not-best chain.\n> \n> Imagine miners always pre-announce the blocks they're working on to their peers, and peers validate those 'weak blocks' as quickly as they are able.\n> \n> Because weak blocks are pre-validated, when a full-difficulty block based on a previously announced weak block is found, block propagation should be insanely fast-- basically, as fast as a single packet can be relayed across the network the whole network could be mining on the new block.\n> \n> I don't see any barrier to making accepting the full-difficulty block and CreateNewBlock() insanely fast, and if those operations take just a microsecond or three, miners will have an incentive to create blocks with fee-paying transactions that weren't in the last block, rather than mining empty blocks.\n> \n> .................\n> \n> A miner could try to avoid validation work by just taking a weak block announced by somebody else, replacing the coinbase and re-computing the merkle root, and then mining. They will be at a slight disadvantage to fully validating miners, though, because they WOULD have to mine empty blocks between the time a full block is found and a fully-validating miner announced their next weak block.\n> \n> .................\n> \n> Weak block announcements are great for the network; they give transaction creators a pretty good idea of whether or not their transactions are likely to be confirmed in the next block. And if we're smart about implementing them, they shouldn't increase bandwidth or CPU usage significantly, because all the weak blocks at a given point in time are likely to contain the same transactions.\n> \n> -- \n> --\n> Gavin Andresen\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/7172a4da/attachment-0001.html>"
            },
            {
                "author": "Gavin",
                "date": "2015-09-23T17:40:58",
                "message_text_only": "> On Sep 23, 2015, at 12:28 PM, Peter R <peter_r at gmx.com> wrote:\n> \n> Hi Gavin,\n> \n> One thing that's not clear to me is whether it is even necessary--from the perspective of the block size limit--to consider block propagation.  \n\nI didn't mention the block size limit; weak blocks are a good idea no matter the limit.\n\nAs for miners paying for the work: lots of companies contributed to the Foundation, and will contribute to the DCI. When there are big, stable, profitable companies I think we'll see them task their developers to contribute code.\n\nI think optimizing new block propagation is interesting and important, so I plan on working on it."
            },
            {
                "author": "Peter R",
                "date": "2015-09-23T17:49:04",
                "message_text_only": "Thanks for the reply, Gavin.  I agree on all points.  \n\nPeter"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-09-23T18:48:38",
                "message_text_only": "On Wed, Sep 23, 2015 at 4:43 PM, Gavin Andresen via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Imagine miners always pre-announce the blocks they're working on to their\n> peers, and peers validate those 'weak blocks' as quickly as they are able.\n>\n> Because weak blocks are pre-validated, when a full-difficulty block based\n> on a previously announced weak block is found, block propagation should be\n> insanely fast-- basically, as fast as a single packet can be relayed across\n> the network the whole network could be mining on the new block.\n>\n> I don't see any barrier to making accepting the full-difficulty block and\n> CreateNewBlock() insanely fast, and if those operations take just a\n> microsecond or three, miners will have an incentive to create blocks with\n> fee-paying transactions that weren't in the last block, rather than mining\n> empty blocks.\n>\n\nYou can create these blocks in advance too.\n\n- receive weak block\n- validate\n- create child block\n\nIt becomes a pure array lookup to get the new header that builds on top of\nthat block.  The child blocks would need to be updated as the memory pool\nchanges though.\n\n\n> A miner could try to avoid validation work by just taking a weak block\n> announced by somebody else, replacing the coinbase and re-computing the\n> merkle root, and then mining. They will be at a slight disadvantage to\n> fully validating miners, though, because they WOULD have to mine empty\n> blocks between the time a full block is found and a fully-validating miner\n> announced their next weak block.\n>\n\nThis also speeds up propagation for the miner.  The first weak block that\nis broadcast could end up being copied by many other miners.\n\nA miner who is copying a block could send coinbase + original header if he\nhits a block.  Weak blocks that are just coinbase + header could have lower\nPOW requirements, since they use up much less bandwidth.\n\nMiners would mostly copy other miners once they had verified their blocks.\nThe IBLT system works well here.  A miner could pick a weak block that is\nclose to what it actually wants to broadcast.\n\n\n> Weak block announcements are great for the network; they give transaction\n> creators a pretty good idea of whether or not their transactions are likely\n> to be confirmed in the next block.\n>\n\nAggregator nodes could offer a service to show/prove how many weak blocks\nthat the transaction has been accepted in.\n\n\n> And if we're smart about implementing them, they shouldn't increase\n> bandwidth or CPU usage significantly, because all the weak blocks at a\n> given point in time are likely to contain the same transactions.\n>\n\nThis assumes other compression systems for handling block propagation.\n\n>\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/3004f4bf/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2015-09-24T01:32:34",
                "message_text_only": "Gavin Andresen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nwrites:\n> I've been thinking about 'weak blocks' and SPV mining, and it seems to me\n> weak blocks will make things better, not worse, if we improve the mining\n> code a little bit.\n>\n> First:  the idea of 'weak blocks' (hat tip to Rusty for the term) is for\n> miners to pre-announce blocks that they're working on, before they've\n> solved the proof-of-work puzzle. To prevent DoS attacks, assume that some\n> amount of proof-of-work is done (hence the term 'weak block') to rate-limit\n> how many 'weak block' messages are relayed across the network.\n>\n>\n> Today, miners are incentivized to start mining an empty block as soon as\n> they see a block with valid proof-of-work, because they want to spend as\n> little time as possible mining a not-best chain.\n>\n> Imagine miners always pre-announce the blocks they're working on to their\n> peers, and peers validate those 'weak blocks' as quickly as they are able.\n>\n> Because weak blocks are pre-validated, when a full-difficulty block based\n> on a previously announced weak block is found, block propagation should be\n> insanely fast-- basically, as fast as a single packet can be relayed across\n> the network the whole network could be mining on the new block.\n\nThe bandwidth/latency argument is solid.  And if a block encodes to <\n~3k, then we can just spray it to (some?) peers rather than using INV.\n\nBut validation is only trivially cachable if the delta to the previous\nweak block is zero.  The \"partially validated\" cases need to be coded\nwith care (eg. total opcode constraints, tx order).\n\nI was thinking as a first cut we do the opposite: don't validate weak\nblocks at all (other than PoW), and just use them as a bandwidth\noptimization.\n\nAmbition is good though!\n\nChers,\nRusty.\nPS.  Original idea came to me from Greg Maxwell; Peter Todd called it\n     \"near blocks\" and extolled their virtues 2 years ago..."
            }
        ],
        "thread_summary": {
            "title": "Weak block thoughts...",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Bryan Bishop",
                "Gavin",
                "Jonathan Toomim (Toomim Bros)",
                "Kalle Rosenbaum",
                "Tier Nolan",
                "Gregory Maxwell",
                "Btc Drak",
                "Gavin Andresen",
                "Peter R"
            ],
            "messages_count": 18,
            "total_messages_chars_count": 42055
        }
    },
    {
        "title": "[bitcoin-dev] CI Build for Bitcoin - Some Basic Questions about Gitian and other stuff",
        "thread_messages": [
            {
                "author": "Roy Osherove",
                "date": "2015-09-23T17:13:14",
                "message_text_only": "Hi Folks.\nI'm trying my hand at creating a reproducible build of my own for bitcoin\nand bitcoin-XT, using TeamCity.\nI believe it is the best way to learn something: To try to build it\nyourself.\nHere is what I think I know so far, and I would love corrections, plus\nquestions:\n\n   1. Bitcoin is built continuously on travis-CI at\n   https://travis-ci.org/bitcoin/bitcoin/\n   2.  there are many flavors that are built, but I'm not sure if all of\n   them are actually used/necessary. are they all needed, or just to \"just in\n   case\"?\n   3.  There is a gitian build file for bitcoin, but is anyone actually\n   using it? are the bin files on bitcoin.org taken from that? or the\n   travis ci builds? or some other place?\n   4. Are there any things that people would love to have in the build that\n   do not exist there today? perhaps I can help with that?\n\nHere is what I have now: http://btcdev.osherove.com:8111/\nIt does not do the matrix build yet, but it's coming. I'm just wondering if\nall the platforms need to be supported,and if gitian is truly required to\nbe used, or used in parallel, or at all..\n\nFeedback appreciated.\n\n-- \nThanks,\n\nRoy Osherove\n\n   - *@RoyOsherove* <https://twitter.com/RoyOsherove>\n   - Read my new book *Notes to a Software Team Leader\n<http://TeamLeadSkills.com>*\n   - Or *my new course* about Beautiful Builds <http://courses.osherove.com>\nand Continuous Delivery\n   - +1-201-256-5575\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/99a98bb2/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-09-23T17:18:14",
                "message_text_only": "The builds made by Travis are for the purpose of making sure that the\nsource code compiles and tests run successfully on all supported platforms.\nThe binaries are not used anywhere else because Travis is not a trusted\nplatform.\n\nThe binaries on bitcoin.org are built using the gitian process and signed\nby a quorum of developers.\n\nOn Wed, Sep 23, 2015 at 10:13 AM, Roy Osherove via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi Folks.\n> I'm trying my hand at creating a reproducible build of my own for bitcoin\n> and bitcoin-XT, using TeamCity.\n> I believe it is the best way to learn something: To try to build it\n> yourself.\n> Here is what I think I know so far, and I would love corrections, plus\n> questions:\n>\n>    1. Bitcoin is built continuously on travis-CI at\n>    https://travis-ci.org/bitcoin/bitcoin/\n>    2.  there are many flavors that are built, but I'm not sure if all of\n>    them are actually used/necessary. are they all needed, or just to \"just in\n>    case\"?\n>    3.  There is a gitian build file for bitcoin, but is anyone actually\n>    using it? are the bin files on bitcoin.org taken from that? or the\n>    travis ci builds? or some other place?\n>    4. Are there any things that people would love to have in the build\n>    that do not exist there today? perhaps I can help with that?\n>\n> Here is what I have now: http://btcdev.osherove.com:8111/\n> It does not do the matrix build yet, but it's coming. I'm just wondering\n> if all the platforms need to be supported,and if gitian is truly required\n> to be used, or used in parallel, or at all..\n>\n> Feedback appreciated.\n>\n> --\n> Thanks,\n>\n> Roy Osherove\n>\n>    - *@RoyOsherove* <https://twitter.com/RoyOsherove>\n>    - Read my new book *Notes to a Software Team Leader\n> <http://TeamLeadSkills.com>*\n>    - Or *my new course* about Beautiful Builds\n> <http://courses.osherove.com> and Continuous Delivery\n>    - +1-201-256-5575\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/a91bd297/attachment.html>"
            },
            {
                "author": "Roy Osherove",
                "date": "2015-09-23T17:31:22",
                "message_text_only": "Thanks Mark.\nIs there a public server where the gitian builds can be viewed?\nIs there a public server that shows the quorum verifications or that shows\nhow to join in on the verification if such as thing is helpful?\n\nOn Wed, Sep 23, 2015 at 10:18 AM, Mark Friedenbach <mark at friedenbach.org>\nwrote:\n\n> The builds made by Travis are for the purpose of making sure that the\n> source code compiles and tests run successfully on all supported platforms.\n> The binaries are not used anywhere else because Travis is not a trusted\n> platform.\n>\n> The binaries on bitcoin.org are built using the gitian process and signed\n> by a quorum of developers.\n>\n> On Wed, Sep 23, 2015 at 10:13 AM, Roy Osherove via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi Folks.\n>> I'm trying my hand at creating a reproducible build of my own for bitcoin\n>> and bitcoin-XT, using TeamCity.\n>> I believe it is the best way to learn something: To try to build it\n>> yourself.\n>> Here is what I think I know so far, and I would love corrections, plus\n>> questions:\n>>\n>>    1. Bitcoin is built continuously on travis-CI at\n>>    https://travis-ci.org/bitcoin/bitcoin/\n>>    2.  there are many flavors that are built, but I'm not sure if all of\n>>    them are actually used/necessary. are they all needed, or just to \"just in\n>>    case\"?\n>>    3.  There is a gitian build file for bitcoin, but is anyone actually\n>>    using it? are the bin files on bitcoin.org taken from that? or the\n>>    travis ci builds? or some other place?\n>>    4. Are there any things that people would love to have in the build\n>>    that do not exist there today? perhaps I can help with that?\n>>\n>> Here is what I have now: http://btcdev.osherove.com:8111/\n>> It does not do the matrix build yet, but it's coming. I'm just wondering\n>> if all the platforms need to be supported,and if gitian is truly required\n>> to be used, or used in parallel, or at all..\n>>\n>> Feedback appreciated.\n>>\n>> --\n>> Thanks,\n>>\n>> Roy Osherove\n>>\n>>    - *@RoyOsherove* <https://twitter.com/RoyOsherove>\n>>    - Read my new book *Notes to a Software Team Leader\n>> <http://TeamLeadSkills.com>*\n>>    - Or *my new course* about Beautiful Builds\n>> <http://courses.osherove.com> and Continuous Delivery\n>>    - +1-201-256-5575\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n\n\n-- \nThanks,\n\nRoy Osherove\n\n   - *@RoyOsherove* <https://twitter.com/RoyOsherove>\n   - Read my new book *Notes to a Software Team Leader\n<http://TeamLeadSkills.com>*\n   - Or *my new course* about Beautiful Builds <http://courses.osherove.com>\nand Continuous Delivery\n   - +1-201-256-5575\n    - Timezone: Eastern Standard Time (New York)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/2a3f1ef5/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-09-23T18:10:12",
                "message_text_only": "Well the gitian builds are made available on bitcoin.org. If you mean a\nbuild server where gitian builds are automatically done and made available,\nwell that rather defeats the point of gitian.\n\nThe quorum signatures are accumulated here:\nhttps://github.com/bitcoin/gitian.sigs (it's a manual process).\n\nOn Wed, Sep 23, 2015 at 10:31 AM, Roy Osherove <roy at osherove.com> wrote:\n\n> Thanks Mark.\n> Is there a public server where the gitian builds can be viewed?\n> Is there a public server that shows the quorum verifications or that shows\n> how to join in on the verification if such as thing is helpful?\n>\n> On Wed, Sep 23, 2015 at 10:18 AM, Mark Friedenbach <mark at friedenbach.org>\n> wrote:\n>\n>> The builds made by Travis are for the purpose of making sure that the\n>> source code compiles and tests run successfully on all supported platforms.\n>> The binaries are not used anywhere else because Travis is not a trusted\n>> platform.\n>>\n>> The binaries on bitcoin.org are built using the gitian process and\n>> signed by a quorum of developers.\n>>\n>> On Wed, Sep 23, 2015 at 10:13 AM, Roy Osherove via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> Hi Folks.\n>>> I'm trying my hand at creating a reproducible build of my own for\n>>> bitcoin and bitcoin-XT, using TeamCity.\n>>> I believe it is the best way to learn something: To try to build it\n>>> yourself.\n>>> Here is what I think I know so far, and I would love corrections, plus\n>>> questions:\n>>>\n>>>    1. Bitcoin is built continuously on travis-CI at\n>>>    https://travis-ci.org/bitcoin/bitcoin/\n>>>    2.  there are many flavors that are built, but I'm not sure if all\n>>>    of them are actually used/necessary. are they all needed, or just to \"just\n>>>    in case\"?\n>>>    3.  There is a gitian build file for bitcoin, but is anyone actually\n>>>    using it? are the bin files on bitcoin.org taken from that? or the\n>>>    travis ci builds? or some other place?\n>>>    4. Are there any things that people would love to have in the build\n>>>    that do not exist there today? perhaps I can help with that?\n>>>\n>>> Here is what I have now: http://btcdev.osherove.com:8111/\n>>> It does not do the matrix build yet, but it's coming. I'm just wondering\n>>> if all the platforms need to be supported,and if gitian is truly required\n>>> to be used, or used in parallel, or at all..\n>>>\n>>> Feedback appreciated.\n>>>\n>>> --\n>>> Thanks,\n>>>\n>>> Roy Osherove\n>>>\n>>>    - *@RoyOsherove* <https://twitter.com/RoyOsherove>\n>>>    - Read my new book *Notes to a Software Team Leader\n>>> <http://TeamLeadSkills.com>*\n>>>    - Or *my new course* about Beautiful Builds\n>>> <http://courses.osherove.com> and Continuous Delivery\n>>>    - +1-201-256-5575\n>>>\n>>>\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>>\n>>\n>\n>\n> --\n> Thanks,\n>\n> Roy Osherove\n>\n>    - *@RoyOsherove* <https://twitter.com/RoyOsherove>\n>    - Read my new book *Notes to a Software Team Leader\n> <http://TeamLeadSkills.com>*\n>    - Or *my new course* about Beautiful Builds\n> <http://courses.osherove.com> and Continuous Delivery\n>    - +1-201-256-5575\n>     - Timezone: Eastern Standard Time (New York)\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/3f931fdb/attachment-0001.html>"
            },
            {
                "author": "Roy Osherove",
                "date": "2015-09-23T20:54:22",
                "message_text_only": "So who physically manually uploads the gitian build to bitcoin.org?\n\nOn Wed, Sep 23, 2015 at 11:10 AM, Mark Friedenbach <mark at friedenbach.org>\nwrote:\n\n> Well the gitian builds are made available on bitcoin.org. If you mean a\n> build server where gitian builds are automatically done and made available,\n> well that rather defeats the point of gitian.\n>\n> The quorum signatures are accumulated here:\n> https://github.com/bitcoin/gitian.sigs (it's a manual process).\n>\n> On Wed, Sep 23, 2015 at 10:31 AM, Roy Osherove <roy at osherove.com> wrote:\n>\n>> Thanks Mark.\n>> Is there a public server where the gitian builds can be viewed?\n>> Is there a public server that shows the quorum verifications or that\n>> shows how to join in on the verification if such as thing is helpful?\n>>\n>> On Wed, Sep 23, 2015 at 10:18 AM, Mark Friedenbach <mark at friedenbach.org>\n>> wrote:\n>>\n>>> The builds made by Travis are for the purpose of making sure that the\n>>> source code compiles and tests run successfully on all supported platforms.\n>>> The binaries are not used anywhere else because Travis is not a trusted\n>>> platform.\n>>>\n>>> The binaries on bitcoin.org are built using the gitian process and\n>>> signed by a quorum of developers.\n>>>\n>>> On Wed, Sep 23, 2015 at 10:13 AM, Roy Osherove via bitcoin-dev <\n>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>>> Hi Folks.\n>>>> I'm trying my hand at creating a reproducible build of my own for\n>>>> bitcoin and bitcoin-XT, using TeamCity.\n>>>> I believe it is the best way to learn something: To try to build it\n>>>> yourself.\n>>>> Here is what I think I know so far, and I would love corrections, plus\n>>>> questions:\n>>>>\n>>>>    1. Bitcoin is built continuously on travis-CI at\n>>>>    https://travis-ci.org/bitcoin/bitcoin/\n>>>>    2.  there are many flavors that are built, but I'm not sure if all\n>>>>    of them are actually used/necessary. are they all needed, or just to \"just\n>>>>    in case\"?\n>>>>    3.  There is a gitian build file for bitcoin, but is anyone\n>>>>    actually using it? are the bin files on bitcoin.org taken from\n>>>>    that? or the travis ci builds? or some other place?\n>>>>    4. Are there any things that people would love to have in the build\n>>>>    that do not exist there today? perhaps I can help with that?\n>>>>\n>>>> Here is what I have now: http://btcdev.osherove.com:8111/\n>>>> It does not do the matrix build yet, but it's coming. I'm just\n>>>> wondering if all the platforms need to be supported,and if gitian is truly\n>>>> required to be used, or used in parallel, or at all..\n>>>>\n>>>> Feedback appreciated.\n>>>>\n>>>> --\n>>>> Thanks,\n>>>>\n>>>> Roy Osherove\n>>>>\n>>>>    - *@RoyOsherove* <https://twitter.com/RoyOsherove>\n>>>>    - Read my new book *Notes to a Software Team Leader\n>>>> <http://TeamLeadSkills.com>*\n>>>>    - Or *my new course* about Beautiful Builds\n>>>> <http://courses.osherove.com> and Continuous Delivery\n>>>>    - +1-201-256-5575\n>>>>\n>>>>\n>>>>\n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>\n>>>>\n>>>\n>>\n>>\n>> --\n>> Thanks,\n>>\n>> Roy Osherove\n>>\n>>    - *@RoyOsherove* <https://twitter.com/RoyOsherove>\n>>    - Read my new book *Notes to a Software Team Leader\n>> <http://TeamLeadSkills.com>*\n>>    - Or *my new course* about Beautiful Builds\n>> <http://courses.osherove.com> and Continuous Delivery\n>>    - +1-201-256-5575\n>>     - Timezone: Eastern Standard Time (New York)\n>>\n>>\n>>\n>\n\n\n-- \nThanks,\n\nRoy Osherove\n\n   - *@RoyOsherove* <https://twitter.com/RoyOsherove>\n   - Read my new book *Notes to a Software Team Leader\n<http://TeamLeadSkills.com>*\n   - Or *my new course* about Beautiful Builds <http://courses.osherove.com>\nand Continuous Delivery\n   - +1-201-256-5575\n    - Timezone: Eastern Standard Time (New York)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/700a2825/attachment-0001.html>"
            },
            {
                "author": "Jonas Schnelli",
                "date": "2015-09-24T09:18:16",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nHi Roy\n\n> So who physically manually uploads the gitian build to bitcoin.org \n> <http://bitcoin.org>?\n\nIt's done by the core devs (very likely the project maintainer).\nI think it doesn't matter who did the upload to bitcoin.org.\n\nWhat really would matter is \u2013 if users deciding to run a pre-compiled\nversion of bitcoin-core \u2013 that they verify the binary against the\navailable gitian sigs.\n\nSignatur repository:\nhttps://github.com/bitcoin/gitian.sigs\n\nPGP Pubkeys (mostly also available over gpg key servers):\nhttps://github.com/bitcoin/bitcoin/tree/master/contrib/gitian-downloader\n\nInstruction available here:\nhttps://www.reddit.com/r/Bitcoin/wiki/verifying_bitcoin_core\n\n\n/jonas\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAEBCAAGBQJWA7/YAAoJECnUvLZBb1PspoEQAKDs672Vn/EFEn02oYbo41Xi\ntiHLpZMePiL1GV+XAQrqA91x5Q4RY2oJBmBzq2Bnllr+fm5zodcTP80lDyYeizb7\n+2MPuoF8ICMYxUDJ3tz163Y4hHforFyMMHgr/NPXQcsMEEnEuAQIMxRFMqexhkn9\nW/YVT2ow/5illYmZ9EAoSreaD+1ShVTxkZY2ltY79ZATTcVU85mEXau9Jv6qq4sN\njHCWAJYrsFQay4t42Pp4ciclz3A7W//OoFhwxUR2sNcDZ6NkOSnYOZSwMPM4uBAL\nz1OpSWVOSQZeGXFOzEF07oyLaCVKm6ygND4IT7eFcvlrgXMIYE0bvzfqPymBArRJ\nZSKR0bmTkUsuw3NCcV23HF8yW+G/Y/SKPRl5n1AmmXppzklSSojDzDT3h2xKGNTd\nDYoIQhwsNcm7sLlmHZa+VZ7peeCzdQ9z+OTG1ZDwDsFRBDY9kTbP2pD1tHEkEvxR\nz2DJg8iP9V4ZUUFEuAdOOCInl1v+0RJu8DxWa6BZmLYJ/SVuKqSEZ0HYBqPOJOUO\n4ct+NLyY7fNQurq0VzIjpZN9/L+SEePSIP4bFwOiGBJosUEHyS3VZ7JZZMOs5jxx\n1GDI964Pi54Z/XPzV2+X1GjWLeReJ6WUznX7zv/LNER2yI6XQBw2w5/rmomI+ifl\nvk5pfinRCIP3t6q+K0ge\n=vP2n\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "CI Build for Bitcoin - Some Basic Questions about Gitian and other stuff",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Roy Osherove",
                "Jonas Schnelli",
                "Mark Friedenbach"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 16042
        }
    },
    {
        "title": "[bitcoin-dev] Torrent-style new-block propagation on Merkle trees",
        "thread_messages": [
            {
                "author": "Jonathan Toomim (Toomim Bros)",
                "date": "2015-09-23T23:12:14",
                "message_text_only": "As I understand it, the current block propagation algorithm is this:\n\n1. A node mines a block.\n2. It notifies its peers that it has a new block with an inv. Typical nodes have 8 peers.\n3. The peers respond that they have not seen it, and request the block with getdata [hash].\n4. The node sends out the block in parallel to all 8 peers simultaneously. If the node's upstream bandwidth is limiting, then all peers will receive most of the block before any peer receives all of the block. The block is sent out as the small header followed by a list of transactions.\n5. Once a peer completes the download, it verifies the block, then enters step 2.\n\n(If I'm missing anything, please let me know.)\n\nThe main problem with this algorithm is that it requires a peer to have the full block before it does any uploading to other peers in the p2p mesh. This slows down block propagation to O( p \u2022 log_p(n) ), where n is the number of peers in the mesh, and p is the number of peers transmitted to simultaneously.\n\nIt's like the Napster era of file-sharing. We can do much better than this. Bittorrent can be an example for us. Bittorrent splits the file to be shared into a bunch of chunks, and hashes each chunk. Downloaders (leeches) grab the list of hashes, then start requesting their peers for the chunks out-of-order. As each leech completes a chunk and verifies it against the hash, it begins to share those chunks with other leeches. Total propagation time for large files can be approximately equal to the transmission time for an FTP upload. Sometimes it's significantly slower, but often it's actually faster due to less bottlenecking on a single connection and better resistance to packet/connection loss. (This could be relevant for crossing the Chinese border, since the Great Firewall tends to produce random packet loss, especially on encrypted connections.)\n\nBitcoin uses a data structure for transactions with hashes built-in. We can use that in lieu of Bittorrent's file chunks.\n\nA Bittorrent-inspired algorithm might be something like this:\n\n0. (Optional steps to build a Merkle cache; described later)\n1. A seed node mines a block.\n2. It notifies its peers that it has a new block with an extended version of inv.\n3. The leech peers request the block header.\n4. The seed sends the block header. The leech code path splits into two.\n5(a). The leeches verify the block header, including the PoW. If the header is valid,\n6(a). They notify their peers that they have a header for an unverified new block with an extended version of inv, looping back to 2. above. If it is invalid, they abort thread (b).\n5(b). The leeches request the Nth row (from the root) of the transaction Merkle tree, where N might typically be between 2 and 10. That corresponds to about 1/4th to 1/1024th of the transactions. The leeches also request a bitfield indicating which of the Merkle nodes the seed has leaves for. The seed supplies this (0xFFFF...).\n6(b). The leeches calculate all parent node hashes in the Merkle tree, and verify that the root hash is as described in the header.\n7. The leeches search their Merkle hash cache to see if they have the leaves (transaction hashes and/or transactions) for that node already.\n8. The leeches send a bitfield request to the node indicating which Merkle nodes they want the leaves for.\n9. The seed responds by sending leaves (either txn hashes or full transactions, depending on benchmark results) to the leeches in whatever order it decides is optimal for the network.\n10. The leeches verify that the leaves hash into the ancestor node hashes that they already have.\n11. The leeches begin sharing leaves with each other.\n12. If the leaves are txn hashes, they check their cache for the actual transactions. If they are missing it, they request the txns with a getdata, or all of the txns they're missing (as a list) with a few batch getdatas.\n\nThe main feature of this algorithm is that a leech will begin to upload chunks of data as soon as it gets them and confirms both PoW and hash/data integrity instead of waiting for a fully copy with full verification.\n\nThis algorithm is more complicated than the existing algorithm, and won't always be better in performance. Because more round trip messages are required for negotiating the Merkle tree transfers, it will perform worse in situations where the bandwidth to ping latency ratio is high relative to the blocksize. Specifically, the minimum per-hop latency will likely be higher. This might be mitigated by reducing the number of round-trip messages needed to set up the blocktorrent by using larger and more complex inv-like and getdata-like messages that preemptively send some data (e.g. block headers). This would trade off latency for bandwidth overhead from larger duplicated inv messages. Depending on implementation quality, the latency for the smallest block size might be the same between algorithms, or it might be 300% higher for the torrent algorithm. For small blocks (perhaps < 100 kB), the blocktorrent algorithm will likely be slightly slower. For large blocks (e.g. 8 MB over 20 Mbps), I expect the blocktorrent algo will likely be around an order of magnitude faster in the worst case (adversarial) scenarios, in which none of the block's transactions are in the caches.\n\nOne of the big benefits of the blocktorrent algorithm is that it provides several obvious and straightforward points for bandwidth saving and optimization by caching transactions and reconstructing the transaction order. A cooperating miner can pre-announce Merkle subtrees with some of the transactions they are planning on including in the final block. Other miners who see those subtrees can compare the transactions in those subtrees to the transaction sets they are mining with, and can rearrange their block prototypes to use the same subtrees as much as possible. In the case of public pools supporting the getblocktemplate protocol, it might be possible to build Merkle subtree caches without the pool's help by having one or more nodes just scraping their getblocktemplate results. Even if some transactions are inserted or deleted, it may be possible to guess a lot of the tree based on the previous ordering.\n\nOnce a block header and the first few rows of the Merkle tree have been published, they will propagate through the whole network, at which time full nodes might even be able to guess parts of the tree by searching through their txn and Merkle node/subtree caches. That might be fun to think about, but probably not effective due to O(n^2) or worse scaling with transaction count. Might be able to make it work if the whole network cooperates on it, but there are probably more important things to do.\n\nThere are also a few other features of Bittorrent that would be useful here, like prioritizing uploads to different peers based on their upload capacity, and banning peers that submit data that doesn't hash to the right value. (It might be good if we could get Bram Cohen to help with the implementation.)\n\nAnother option is just to treat the block as a file and literally Bittorrent it, but I think that there should be enough benefits to integrating it with the existing bitcoin p2p connections and also with using bitcoind's transaction caches and Merkle tree caches to make a native implementation worthwhile. Also, Bittorrent itself was designed to optimize more for bandwidth than for latency, so we will have slightly different goals and tradeoffs during implementation.\n\nOne of the concerns that I initially had about this idea was that it would involve nodes forwarding unverified block data to other nodes. At first, I thought this might be useful for a rogue miner or node who wanted to quickly waste the whole network's bandwidth. However, in order to perform this attack, the rogue needs to construct a valid header with a valid PoW, but use a set of transactions that renders the block as a whole invalid in a manner that is difficult to detect without full verification. However, it will be difficult to design such an attack so that the damage in bandwidth used has a greater value than the 240 exahashes (and 25.1 BTC opportunity cost) associated with creating a valid header.\n\nAs I understand it, the O(1) IBLT approach requires that blocks follow strict rules (yet to be fully defined) about the transaction ordering. If these are not followed, then it turns into sending a list of txn hashes, and separately ensuring that all of the txns in the new block are already in the recipient's mempool. When mempools are very dissimilar, the IBLT approach performance degrades heavily and performance becomes worse than simply sending the raw block. This could occur if a node just joined the network, during chain reorgs, or due to malicious selfish miners. Also, if the mempool has a lot more transactions than are included in the block, the false positive rate for detecting whether a transaction already exists in another node's mempool might get high for otherwise reasonable bucket counts/sizes.\n\nWith the blocktorrent approach, the focus is on transmitting the list of hashes in a manner that propagates as quickly as possible while still allowing methods for reducing the total bandwidth needed. The blocktorrent algorithm does not really address how the actual transaction data will be obtained because, once the leech has the list of txn hashes, the standard Bitcoin p2p protocol can supply them in a parallelized and decentralized manner.\n\n\n\nThoughts?\n\n-jtoomim\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/8e6e7243/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/8e6e7243/attachment-0001.sig>"
            },
            {
                "author": "Angel Leon",
                "date": "2015-09-24T00:31:27",
                "message_text_only": "has anybody ever submitted a patch using libtorrent's library for this\npurpose?\nwould it make sense to create a torrent per confirmed valid block once it's\nbeen truly added to the blockchain?\n\nif we used libtorrent, I imagine the following to announce the new block on\nlibtorrent's DHT\n\n(PSEUDO CODE)\n\n// this is how you could announce yourself as a peer on the DHT holding a\nblock at a certain height.\n// the announcement would include a TCP port to then request more\ninformation about that block.\nstring peer_announcement_key = sha1_hasher(\"blockchain::bitcoin::block::\" +\nlast_block_height_number).final();\nsession.dht_announce(peer_announcement_key, rpc_port, 0);\n\n// then another peer looking for peers that might be seeding a block at N\nheight would:\nsessoin.dht_get_peers(sha1_hasher(\"blockchain::bitcoin::block::\" +\nN_height).final());\n\n// asynchronously you'd handle the responses by the XOR-nearest peers on\nthe DHT\n// this search would be O(log n)\n// you could then request from several of these guys what's the infohash\nfor the .torrent\n// that's been created to seed the block at height N.\n\nthen you'd start the block download by building a magnet link out of the\ninfohash received for the block.\nThe download would be done directly to memory and then such byte array\nwould be serialized as a block\nas it is done now, and you'd then announce yourself both on the\nsha1(peer_announcement_key) and\non the infohash of the block you just downloaded, after you start seeding\nit.\n\nperhaps the block's torrent chunk sizes could be made optimal so that\nchunks sent would perfectly match\ntranactions, this way you could start building the blocks on the other end\nas they're being downloaded from the swarm.\n\n\nhttp://twitter.com/gubatron\n\nOn Wed, Sep 23, 2015 at 7:12 PM, Jonathan Toomim (Toomim Bros) via\nbitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n>\n> As I understand it, the current block propagation algorithm is this:\n>\n> 1. A node mines a block.\n> 2. It notifies its peers that it has a new block with an *inv*. Typical\n> nodes have 8 peers.\n> 3. The peers respond that they have not seen it, and request the block\n> with *getdata* [hash].\n> 4. The node sends out the block in parallel to all 8 peers simultaneously.\n> If the node's upstream bandwidth is limiting, then all peers will receive\n> most of the block before any peer receives all of the block. The block is\n> sent out as the small header followed by a list of transactions.\n> 5. Once a peer completes the download, it verifies the block, then enters\n> step 2.\n>\n> (If I'm missing anything, please let me know.)\n>\n> The main problem with this algorithm is that it requires a peer to have\n> the full block before it does any uploading to other peers in the p2p mesh.\n> This slows down block propagation to O( p \u2022 log_p(n) ), where n is the\n> number of peers in the mesh, and p is the number of peers transmitted to\n> simultaneously.\n>\n> It's like the Napster era of file-sharing. We can do much better than\n> this. Bittorrent can be an example for us. Bittorrent splits the file to be\n> shared into a bunch of chunks, and hashes each chunk. Downloaders (leeches)\n> grab the list of hashes, then start requesting their peers for the chunks\n> out-of-order. As each leech completes a chunk and verifies it against the\n> hash, it begins to share those chunks with other leeches. Total propagation\n> time for large files can be approximately equal to the transmission time\n> for an FTP upload. Sometimes it's significantly slower, but often it's\n> actually faster due to less bottlenecking on a single connection and better\n> resistance to packet/connection loss. (This could be relevant for crossing\n> the Chinese border, since the Great Firewall tends to produce random packet\n> loss, especially on encrypted connections.)\n>\n> Bitcoin uses a data structure for transactions with hashes built-in. We\n> can use that in lieu of Bittorrent's file chunks.\n>\n> A Bittorrent-inspired algorithm might be something like this:\n>\n> 0. (Optional steps to build a Merkle cache; described later)\n> 1. A seed node mines a block.\n> 2. It notifies its peers that it has a new block with an extended version\n> of *inv*.\n> 3. The leech peers request the block header.\n> 4. The seed sends the block header. The leech code path splits into two.\n> 5(a). The leeches verify the block header, including the PoW. If the\n> header is valid,\n> 6(a). They notify their peers that they have a header for an unverified\n> new block with an extended version of *inv*, looping back to 2. above. If\n> it is invalid, they abort thread (b).\n> 5(b). The leeches request the Nth row (from the root) of the transaction\n> Merkle tree, where N might typically be between 2 and 10. That corresponds\n> to about 1/4th to 1/1024th of the transactions. The leeches also request a\n> bitfield indicating which of the Merkle nodes the seed has leaves for. The\n> seed supplies this (0xFFFF...).\n> 6(b). The leeches calculate all parent node hashes in the Merkle tree, and\n> verify that the root hash is as described in the header.\n> 7. The leeches search their Merkle hash cache to see if they have the\n> leaves (transaction hashes and/or transactions) for that node already.\n> 8. The leeches send a bitfield request to the node indicating which Merkle\n> nodes they want the leaves for.\n> 9. The seed responds by sending leaves (either txn hashes or full\n> transactions, depending on benchmark results) to the leeches in whatever\n> order it decides is optimal for the network.\n> 10. The leeches verify that the leaves hash into the ancestor node hashes\n> that they already have.\n> 11. The leeches begin sharing leaves with each other.\n> 12. If the leaves are txn hashes, they check their cache for the actual\n> transactions. If they are missing it, they request the txns with a\n> *getdata*, or all of the txns they're missing (as a list) with a few\n> batch *getdata*s.\n>\n> The main feature of this algorithm is that a leech will begin to upload\n> chunks of data as soon as it gets them and confirms both PoW and hash/data\n> integrity instead of waiting for a fully copy with full verification.\n>\n> This algorithm is more complicated than the existing algorithm, and won't\n> always be better in performance. Because more round trip messages are\n> required for negotiating the Merkle tree transfers, it will perform worse\n> in situations where the bandwidth to ping latency ratio is high relative to\n> the blocksize. Specifically, the minimum per-hop latency will likely be\n> higher. This might be mitigated by reducing the number of round-trip\n> messages needed to set up the blocktorrent by using larger and more complex\n> *inv*-like and *getdata*-like messages that preemptively send some data\n> (e.g. block headers). This would trade off latency for bandwidth overhead\n> from larger duplicated *inv* messages. Depending on implementation\n> quality, the latency for the smallest block size might be the same between\n> algorithms, or it might be 300% higher for the torrent algorithm. For small\n> blocks (perhaps < 100 kB), the blocktorrent algorithm will likely be\n> slightly slower. For large blocks (e.g. 8 MB over 20 Mbps), I expect the\n> blocktorrent algo will likely be around an order of magnitude faster in the\n> worst case (adversarial) scenarios, in which none of the block's\n> transactions are in the caches.\n>\n> One of the big benefits of the blocktorrent algorithm is that it provides\n> several obvious and straightforward points for bandwidth saving and\n> optimization by caching transactions and reconstructing the transaction\n> order. A cooperating miner can pre-announce Merkle subtrees with some of\n> the transactions they are planning on including in the final block. Other\n> miners who see those subtrees can compare the transactions in those\n> subtrees to the transaction sets they are mining with, and can rearrange\n> their block prototypes to use the same subtrees as much as possible. In the\n> case of public pools supporting the *getblocktemplate* protocol, it might\n> be possible to build Merkle subtree caches without the pool's help by\n> having one or more nodes just scraping their *getblocktemplate* results.\n> Even if some transactions are inserted or deleted, it may be possible to\n> guess a lot of the tree based on the previous ordering.\n>\n> Once a block header and the first few rows of the Merkle tree have been\n> published, they will propagate through the whole network, at which time\n> full nodes might even be able to guess parts of the tree by searching\n> through their txn and Merkle node/subtree caches. That might be fun to\n> think about, but probably not effective due to O(n^2) or worse scaling with\n> transaction count. Might be able to make it work if the whole network\n> cooperates on it, but there are probably more important things to do.\n>\n> There are also a few other features of Bittorrent that would be useful\n> here, like prioritizing uploads to different peers based on their upload\n> capacity, and banning peers that submit data that doesn't hash to the right\n> value. (It might be good if we could get Bram Cohen to help with the\n> implementation.)\n>\n> Another option is just to treat the block as a file and literally\n> Bittorrent it, but I think that there should be enough benefits to\n> integrating it with the existing bitcoin p2p connections and also with\n> using bitcoind's transaction caches and Merkle tree caches to make a native\n> implementation worthwhile. Also, Bittorrent itself was designed to optimize\n> more for bandwidth than for latency, so we will have slightly different\n> goals and tradeoffs during implementation.\n>\n> One of the concerns that I initially had about this idea was that it would\n> involve nodes forwarding unverified block data to other nodes. At first, I\n> thought this might be useful for a rogue miner or node who wanted to\n> quickly waste the whole network's bandwidth. However, in order to perform\n> this attack, the rogue needs to construct a valid header with a valid PoW,\n> but use a set of transactions that renders the block as a whole invalid in\n> a manner that is difficult to detect without full verification. However, it\n> will be difficult to design such an attack so that the damage in bandwidth\n> used has a greater value than the 240 exahashes (and 25.1 BTC opportunity\n> cost) associated with creating a valid header.\n>\n> As I understand it, the O(1) IBLT approach requires that blocks follow\n> strict rules (yet to be fully defined) about the transaction ordering. If\n> these are not followed, then it turns into sending a list of txn hashes,\n> and separately ensuring that all of the txns in the new block are already\n> in the recipient's mempool. When mempools are very dissimilar, the IBLT\n> approach performance degrades heavily and performance becomes worse than\n> simply sending the raw block. This could occur if a node just joined the\n> network, during chain reorgs, or due to malicious selfish miners. Also, if\n> the mempool has a lot more transactions than are included in the block, the\n> false positive rate for detecting whether a transaction already exists in\n> another node's mempool might get high for otherwise reasonable bucket\n> counts/sizes.\n>\n> With the blocktorrent approach, the focus is on transmitting the list of\n> hashes in a manner that propagates as quickly as possible while still\n> allowing methods for reducing the total bandwidth needed. The blocktorrent\n> algorithm does not really address how the actual transaction data will be\n> obtained because, once the leech has the list of txn hashes, the standard\n> Bitcoin p2p protocol can supply them in a parallelized and decentralized\n> manner.\n>\n>\n>\n> Thoughts?\n>\n> -jtoomim\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150923/8065ee6a/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-09-24T08:52:34",
                "message_text_only": "On Thu, Sep 24, 2015 at 12:12 AM, Jonathan Toomim (Toomim Bros) via\nbitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n>\n> As I understand it, the current block propagation algorithm is this:\n>\n> 1. A node mines a block.\n> 2. It notifies its peers that it has a new block with an *inv*. Typical\n> nodes have 8 peers.\n> 3. The peers respond that they have not seen it, and request the block\n> with *getdata* [hash].\n> 4. The node sends out the block in parallel to all 8 peers simultaneously.\n> If the node's upstream bandwidth is limiting, then all peers will receive\n> most of the block before any peer receives all of the block. The block is\n> sent out as the small header followed by a list of transactions.\n> 5. Once a peer completes the download, it verifies the block, then enters\n> step 2.\n>\n\nMining pools currently connect to the \"fast relay network\".  This is\noptimised for fast block distribution.  It does no validation and is only\nfor low latency propagation.  The normal network is used as a fallback.\n\nMy understanding is that it works as follows:\n\nEach miner runs a normal full node and a relay node on the same computer.\n\nThe full node tells the relay node whenever it receives a new transaction\nvia the inv message and the node requests the full transaction.\n\nThe relay node tells its relay peers that it knows about the transaction\n(hash only) and its 4 byte key. This is not forwarded onwards, since the\nrelay peer only gets the hash of the transaction and doesn't do validation\nanyway.  The key is just a 4 byte counter.\n\nEach relay node keeps a mapping of txid to key for each of its peer.  There\nis some garbage collection and entries are removed once the transaction is\nincluded in a block (there might be a confirm threshold).\n\nWhen a block is found, the local node sends it to the relay node.  The\nrelay node then forwards it to all of its peers in a compact form.\n\nThe block is sent as a list of keys for that peer and full transactions are\nonly sent for unknown transactions.\n\nWhen a relay node receives a block, it just verifies the POW, checks that\nit is new and recent.  It does not do tx validation.  It forwards the block\nto its local full node, which does the validation.  Since the relay node is\non localhost, it never gets kicked due to sending invalid blocks.  This\nprevents a DOS attack where you could send invalid blocks to the relay node\nand cause the local full node to kick it.\n\nIf all the transactions are already known, then it can forward a block for\nonly 4 bytes per transactions.  I think it has an optimisation, so that is\ncompressed to 1 byte per tx.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150924/4144a8ea/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Torrent-style new-block propagation on Merkle trees",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Tier Nolan",
                "Jonathan Toomim (Toomim Bros)",
                "Angel Leon"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 24862
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Core 0.12.0 release schedule",
        "thread_messages": [
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-09-24T11:25:56",
                "message_text_only": "Hello all,\n\nThe next major release of Bitcoin Core, 0.12.0 is planned for the end of the year. Let's propose a more detailed schedule:\n\n2015-11-01\n-----------\n- Open Transifex translations for 0.12\n- Soft translation string freeze (no large or unnecessary changes)\n- Finalize and close translation for 0.10\n\n2015-12-01\n-----------\n- Feature freeze\n- Translation string freeze\n\nIn December at least I will probably not get much done code-wise (Scaling Bitcoin Hongkong, 32C3, end of year festivities, etc), and I'm sure I'm not the only one, so let's leave that for last pre-RC bugfixes and polishing.\n\n2016-01-06\n-----------\n- Split off `0.12` branch from `master`\n- Start RC cycle, tag and release `0.12.0rc1`\n- Start merging for 0.13 on master branch\n\n2016-02-01\n-----------\n- Release 0.12.0 final (aim)\n\nWladimir"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-09-29T21:22:58",
                "message_text_only": "ACK\n\n\nOn Thu, Sep 24, 2015 at 7:25 AM, Wladimir J. van der Laan via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hello all,\n>\n> The next major release of Bitcoin Core, 0.12.0 is planned for the end of\n> the year. Let's propose a more detailed schedule:\n>\n> 2015-11-01\n> -----------\n> - Open Transifex translations for 0.12\n> - Soft translation string freeze (no large or unnecessary changes)\n> - Finalize and close translation for 0.10\n>\n> 2015-12-01\n> -----------\n> - Feature freeze\n> - Translation string freeze\n>\n> In December at least I will probably not get much done code-wise (Scaling\n> Bitcoin Hongkong, 32C3, end of year festivities, etc), and I'm sure I'm not\n> the only one, so let's leave that for last pre-RC bugfixes and polishing.\n>\n> 2016-01-06\n> -----------\n> - Split off `0.12` branch from `master`\n> - Start RC cycle, tag and release `0.12.0rc1`\n> - Start merging for 0.13 on master branch\n>\n> 2016-02-01\n> -----------\n> - Release 0.12.0 final (aim)\n>\n> Wladimir\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/8eba3a72/attachment-0001.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-09-30T17:57:42",
                "message_text_only": "On Thursday, September 24, 2015 11:25:56 AM Wladimir J. van der Laan via \nbitcoin-dev wrote:\n> 2015-12-01\n> -----------\n> - Feature freeze\n\nWhere is \"Consensus freeze\"? Shouldn't this be put off until after the HK \nworkshop in case a hardfork is decided on? Or have we de-coupled it from the \nrelease process entirely anyway (since old versions need an update for it \ntoo)?\n\nLuke"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-30T18:10:30",
                "message_text_only": "Yes, I believe consensus rule changes don't need to be couple with\nmajor releases, there's no problem that I can see in them being minor\nreleases if they're not ready on time for a major release.\n\nOn Wed, Sep 30, 2015 at 7:57 PM, Luke Dashjr via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Thursday, September 24, 2015 11:25:56 AM Wladimir J. van der Laan via\n> bitcoin-dev wrote:\n>> 2015-12-01\n>> -----------\n>> - Feature freeze\n>\n> Where is \"Consensus freeze\"? Shouldn't this be put off until after the HK\n> workshop in case a hardfork is decided on? Or have we de-coupled it from the\n> release process entirely anyway (since old versions need an update for it\n> too)?\n>\n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-09-30T19:24:29",
                "message_text_only": "Right; In general, the consensus is to decouple from Bitcoin Core releases.\n\n\nOn Wed, Sep 30, 2015 at 1:57 PM, Luke Dashjr via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Thursday, September 24, 2015 11:25:56 AM Wladimir J. van der Laan via\n> bitcoin-dev wrote:\n> > 2015-12-01\n> > -----------\n> > - Feature freeze\n>\n> Where is \"Consensus freeze\"? Shouldn't this be put off until after the HK\n> workshop in case a hardfork is decided on? Or have we de-coupled it from\n> the\n> release process entirely anyway (since old versions need an update for it\n> too)?\n>\n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/f7ac4b70/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.12.0 release schedule",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeff Garzik",
                "Jorge Tim\u00f3n",
                "Luke Dashjr",
                "Wladimir J. van der Laan"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 4427
        }
    },
    {
        "title": "[bitcoin-dev] [BIP Proposal] New \"sendheaders\" p2p message",
        "thread_messages": [
            {
                "author": "Suhas Daftuar",
                "date": "2015-09-24T18:02:28",
                "message_text_only": "Hi,\n\nI'm proposing the addition of a new, optional p2p message to help improve\nthe way blocks are announced on the network.  The draft BIP is available\nhere and pasted below:\nhttps://gist.github.com/sdaftuar/465bf008f0a4768c0def\n\nThe goal of this p2p message is to facilitate nodes being able to\noptionally announce blocks with headers messages rather than with inv's,\nwhich is particularly beneficial since the introduction of headers-first\ndownload in Bitcoin Core 0.10.  In particular, this allows for more\nefficient propagation of reorgs as it would eliminate a round trip in\nnetwork communication.\n\nThe implementation of this BIP (which includes code to directly fetch\nblocks based on announced headers) is in\nhttps://github.com/bitcoin/bitcoin/pull/6494.  For additional background,\nplease also see https://github.com/bitcoin/bitcoin/issues/5982.\n\nNote that this new p2p message is optional; nodes can feel free to ignore\nand continue to use inv messages to announce new blocks.\n\nThanks to Pieter Wuille for suggesting this idea.\n\nDraft BIP text:\n\n<pre>\n  BIP: <unassigned>\n  Title: sendheaders message\n  Author: Suhas Daftuar <sdaftuar at chaincode.com>\n  Status: Draft\n  Type: Standards Track\n  Created: 2015-05-08\n</pre>\n\n==Abstract==\n\nAdd a new message, \"sendheaders\", which indicates that a node prefers to\nreceive new block announcements via a \"headers\" message rather than an\n\"inv\".\n\n==Motivation==\n\nSince the introduction of \"headers-first\" downloading of blocks in 0.10,\nblocks will not be processed unless\nthey are able to connect to a (valid) headers chain.  Consequently, block\nrelay generally works\nas follows:\n# A node (N) announces the new tip with an \"inv\" message, containing the\nblock hash\n# A peer (P) responds to the \"inv\" with a \"getheaders\" message (to request\nheaders up to the new tip) and a \"getdata\" message for the new tip itself\n# N responds with a \"headers\" message (with the header for the new block\nalong with any preceding headers unknown to P) and a \"block\" message\ncontaining the new block\n\nHowever, in the case where a new block is being announced that builds on\nthe tip, it would be generally more efficient if the node N just announced\nthe block header for the new block, rather than just the block hash, and\nsaved the peer from generating and transmitting the getheaders message (and\nthe required block locator).\n\nIn the case of a reorg, where 1 or more blocks are disconnected, nodes\ncurrently just send an \"inv\" for the new tip.  Peers currently are able to\nrequest the new tip immediately, but wait until the headers for the\nintermediate blocks are delivered before requesting those blocks.  By\nannouncing headers from the last fork point leading up to the new tip in\nthe block announcement, peers are able to request all the intermediate\nblocks immediately.\n\n==Specification==\n\n# The sendheaders message is defined as an empty message where pchCommand\n== \"sendheaders\"\n# Upon receipt of a \"sendheaders\" message, the node will be permitted, but\nnot required, to announce new blocks by sending the header of the new block\n(along with any other blocks that a node believes a peer might need in\norder for the block to connect).\n# Feature discovery is enabled by checking protocol version >= 70012\n\n==Backward compatibility==\n\nOlder clients remain fully compatible and interoperable after this change.\n\n==Implementation==\n\nhttps://github.com/bitcoin/bitcoin/pull/6494\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150924/42c7569e/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-09-24T18:17:50",
                "message_text_only": "On Thu, Sep 24, 2015 at 7:02 PM, Suhas Daftuar via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi,\n>\n> I'm proposing the addition of a new, optional p2p message to help improve\n> the way blocks are announced on the network.  The draft BIP is available\n> here and pasted below:\n> https://gist.github.com/sdaftuar/465bf008f0a4768c0def\n>\n> The goal of this p2p message is to facilitate nodes being able to\n> optionally announce blocks with headers messages rather than with inv's,\n> which is particularly beneficial since the introduction of headers-first\n> download in Bitcoin Core 0.10.  In particular, this allows for more\n> efficient propagation of reorgs as it would eliminate a round trip in\n> network communication.\n>\n\nIs there actually a requirement for the new message?  New nodes could just\nunilaterally switch to sending headers and current nodes would be\ncompatible.\n\nIt looks like the only DOS misbehaving penalty is if the header is invalid\nor if the headers don't form a chain.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150924/8eeade53/attachment.html>"
            },
            {
                "author": "Suhas Daftuar",
                "date": "2015-09-24T18:37:40",
                "message_text_only": "On Thu, Sep 24, 2015 at 2:17 PM, Tier Nolan via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> Is there actually a requirement for the new message?  New nodes could just\n> unilaterally switch to sending headers and current nodes would be\n> compatible.\n>\n\nI don't believe that unilaterally switching to headers announcements would\nwork for all network participants -- both for users running older Bitcoin\nCore versions (anything before 0.10, which I believe all ignore headers\nmessages) and for non-Bitcoin Core software that participates on the\nnetwork (which may ignore headers messages too, I'm not sure what all is\nout there).\n\nEven for Bitcoin Core versions 0.10 and 0.11, which process headers and use\nthem to determine what blocks to download, the block fetching logic is not\noptimized for new block announcements via headers messages.  Part of what\nis implemented in the pull request is direct fetching of blocks upon\nreceiving a headers message; nodes that don't implement block downloading\nin response to headers announcements should continue to receive inv's, I\nthink -- hence this p2p message to opt-in to the new behavior.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150924/dd63b110/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-09-24T18:41:07",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n\n\nOn 24 September 2015 14:37:40 GMT-04:00, Suhas Daftuar via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>On Thu, Sep 24, 2015 at 2:17 PM, Tier Nolan via bitcoin-dev <\n>bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>>\n>> Is there actually a requirement for the new message?  New nodes could\n>just\n>> unilaterally switch to sending headers and current nodes would be\n>> compatible.\n>>\n>\n>I don't believe that unilaterally switching to headers announcements\n>would\n>work for all network participants -- both for users running older\n>Bitcoin\n>Core versions (anything before 0.10, which I believe all ignore headers\n>messages) and for non-Bitcoin Core software that participates on the\n>network (which may ignore headers messages too, I'm not sure what all\n>is\n>out there).\n\nYou can enable the behaviour based on advertised p2p network version.\n-----BEGIN PGP SIGNATURE-----\n\niQE9BAEBCgAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJWBEO5\nAAoJEMCF8hzn9Lncz4MH/3ztGWdFvMWWcwQsjIRH+eP6PH57WaEru1smmFYOmKrj\ndjdiRVdxfChxRqP3adO21RUKKchjl8DNjrFJHPFz75FSM0cDcD0QAGAHilVdnICE\nLEIlTEoiIc0f1z9f/EJHSHPhiUXMnjpl/l7PYJFZV3Lt2Bl30yLsNnrp9qxjR30n\n3nykZjyRad4JSavdTP6Evd3qaqwGXNUWsdObXNI+WPKlrw6hczlhFDKQ7RC1FPQU\nRbgb21pavtqLUTwbBZGUisAAc94e2Gama1p3ioUFklbVtLTdw+FtxPgV/0ZS75OR\nV9pCXIbg9VM6QY4+9gYnP635+qCkqAJ4tBsYGmsT8yA=\n=cF4B\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Suhas Daftuar",
                "date": "2015-09-24T18:56:23",
                "message_text_only": "I considered that as well, but it seemed to me that other software on the\nnetwork (say, different wallet implementations) might prefer the option of\nbeing able to bump up their protocol version in the future to pick up some\nother change, without having to also opt-in to receiving\nheaders-announcements for blocks.\n\nIn particular, inv-based block announcements aren't going away (even in my\nimplementation of headers announcements, there are some edge cases where\nthe code would need to fall back to an inv announcement), so forcing all\nsoftware on the network to upgrade to supporting headers announcements,\nwhether now or in the future, seems too drastic -- I could imagine some\nsoftware not being very concerned about optimizing block relay in this\nparticular way.\n\nOn Thu, Sep 24, 2015 at 2:41 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA512\n>\n>\n>\n> On 24 September 2015 14:37:40 GMT-04:00, Suhas Daftuar via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >On Thu, Sep 24, 2015 at 2:17 PM, Tier Nolan via bitcoin-dev <\n> >bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> >>\n> >> Is there actually a requirement for the new message?  New nodes could\n> >just\n> >> unilaterally switch to sending headers and current nodes would be\n> >> compatible.\n> >>\n> >\n> >I don't believe that unilaterally switching to headers announcements\n> >would\n> >work for all network participants -- both for users running older\n> >Bitcoin\n> >Core versions (anything before 0.10, which I believe all ignore headers\n> >messages) and for non-Bitcoin Core software that participates on the\n> >network (which may ignore headers messages too, I'm not sure what all\n> >is\n> >out there).\n>\n> You can enable the behaviour based on advertised p2p network version.\n> -----BEGIN PGP SIGNATURE-----\n>\n> iQE9BAEBCgAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJWBEO5\n> AAoJEMCF8hzn9Lncz4MH/3ztGWdFvMWWcwQsjIRH+eP6PH57WaEru1smmFYOmKrj\n> djdiRVdxfChxRqP3adO21RUKKchjl8DNjrFJHPFz75FSM0cDcD0QAGAHilVdnICE\n> LEIlTEoiIc0f1z9f/EJHSHPhiUXMnjpl/l7PYJFZV3Lt2Bl30yLsNnrp9qxjR30n\n> 3nykZjyRad4JSavdTP6Evd3qaqwGXNUWsdObXNI+WPKlrw6hczlhFDKQ7RC1FPQU\n> Rbgb21pavtqLUTwbBZGUisAAc94e2Gama1p3ioUFklbVtLTdw+FtxPgV/0ZS75OR\n> V9pCXIbg9VM6QY4+9gYnP635+qCkqAJ4tBsYGmsT8yA=\n> =cF4B\n> -----END PGP SIGNATURE-----\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150924/dd34cc2a/attachment-0001.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-09-24T19:27:57",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n\n\nOn 24 September 2015 14:56:23 GMT-04:00, Suhas Daftuar <sdaftuar at gmail.com> wrote:\n>I considered that as well, but it seemed to me that other software on\n>the\n>network (say, different wallet implementations) might prefer the option\n>of\n>being able to bump up their protocol version in the future to pick up\n>some\n>other change, without having to also opt-in to receiving\n>headers-announcements for blocks.\n>\n>In particular, inv-based block announcements aren't going away (even in\n>my\n>implementation of headers announcements, there are some edge cases\n>where\n>the code would need to fall back to an inv announcement), so forcing\n>all\n>software on the network to upgrade to supporting headers announcements,\n>whether now or in the future, seems too drastic -- I could imagine some\n>software not being very concerned about optimizing block relay in this\n>particular way.\n\nBlock headers are so small - 80 bytes - that it may be reasonable to just stop using the inv mechanism for them in favor of always sending headers. IIRC a inv is 32 bytes of digest and another four bytes or something of the inv string itself - that's already nearly half of the header.\n\nMeanwhile reducing the amount of state in the protocol does have some value, and decreasing overall latency for headers to get around the network certainely isnt a bad thing.\n-----BEGIN PGP SIGNATURE-----\n\niQE9BAEBCgAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJWBE60\nAAoJEMCF8hzn9Lncz4MH/jybITh0VWtf+2MotWZOdMIiQtmWZ6Ly2yiDXwi3atu+\nMEA6yx9vPFV8P1ZKIZzVtr/4Iu3gBHBdDxAzQW0SjreTLdzZ1+d28/A2kYD4+es7\nMFD8rDV/kPtnu8ajMkS9bfmrU0WfkgSSB2fUheT+kqgH/ejIJBISo8BpQZbz7f4B\nM+D+hoNadcqWcZZKBHT+o5o7v3jJwxh8qpJgMMZrtN/QfFJK5UVdU4I/hEd89XP9\nXD/y29ykWAFQPDdBKMGIUj1csUGlyS5kFXp6ZLVtAZWHIgfZ1R/qOhIUcRwRxZjc\nJXZEWrMGTIXr2zkX9mtLzfjAzDc6ZULoEAHCV3sVa0M=\n=SLUT\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "New \"sendheaders\" p2p message",
            "categories": [
                "bitcoin-dev",
                "BIP Proposal"
            ],
            "authors": [
                "Peter Todd",
                "Suhas Daftuar",
                "Tier Nolan"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 11946
        }
    },
    {
        "title": "[bitcoin-dev] 2015-09-24 #bitcoin-dev Weekly Development Meeting Minutes",
        "thread_messages": [
            {
                "author": "Daniel Stadulis",
                "date": "2015-09-25T00:29:02",
                "message_text_only": "If you weren't able to attend the first, weekly development meeting, the\nfollowing are the minutes:\n\nMeeting Title:\n\n#bitcoin-dev Weekly Development Meeting\n\nMeeting Date:\n\n2015-09-24\n\nMeeting Time:\n\n19:00-20:00 UTC\n\nParticipants in Attendance:\n\nluke-jr\n\nCodeShark\n\nsipa\n\nmorcos\n\nsdaftuar\n\ndstadulis\n\njtimon\n\nwumpus\n\njgarzik\n\nkanzure\n\ngmaxwell\n\ncfields\n\ngavinandresen\n\nIRC Chat Logs:\n\nhttp://bitcoinstats.com/irc/bitcoin-dev/logs/2015/09/24#l1443121200.0\n\n------------------------------\n\nTopics Discussed:\n\n\n   1.\n\n   libconsensus and refactoring\n   2.\n\n   All goals for 0.12 release\n   1.\n\n      libsecp256k1 is ready for 0.12?\n      1.\n\n         libsecp256k1 needs a native OSX travis build\n         1.\n\n            cfields has work that moves to the new Travis infrastructure\n            2.\n\n            PROPOSAL: propose libsecp256k1 validation PR as soon as all\n            currently-in-pipeline API changes are merged\n            2.\n\n      OP_CHECKSEQUENCEVERIFY\n      3.\n\n      mempool limiting\n      4.\n\n      version bits\n      3.\n\n   BIP process\n   4.\n\n   Split off script base classes/execution for use in consensus?\n   5.\n\n   Current/near-term \u201cwhat are you working on\u201d\n   1.\n\n      versionbits: Codeshark has been working on an implementation\n      2.\n\n      gavinandresen: simple benchmarking framework then plan on optimizing\n      new block relay/broadcast.\n\n------------------------------\n\nMeeting Conclusions:\n\nMempool limiting discussion will be delayed until 2015-10-1 meeting\n\n#\n\nAction items\n\nResponsible Parties\n\nETA\n\n1\n\nPlease review 6557 (starting Saturday), 6673 and any other mempool pulls\nfor concept\n\nEveryone\n\nNext Thurs. meeting (2015-10-01)\n\n2\n\nlibsecp256k1 needs a native OSX travis build\n\n\n3\n\nPropose libsecp256k1 validation PR as soon as all currently-in-pipeline API\nchanges are merged\n\n\n4\n\nReview BIP 68, review #6312, #6564\n\n\n5\n\nversionbits BIP number assignment\n\ngmaxwell\n\n2015-09-25\n\nGoogle Doc:\nhttps://docs.google.com/document/d/1zsWVaf5H9ECrN1zPutMdD_2ky3fnhQUM411NDrRrc-M/edit\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150924/2554b5f9/attachment-0001.html>"
            },
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-09-28T18:26:14",
                "message_text_only": "Hello Daniel,\n\nOn Thu, Sep 24, 2015 at 05:29:02PM -0700, Daniel Stadulis via bitcoin-dev wrote:\n> If you weren't able to attend the first, weekly development meeting, the\n> following are the minutes:\n\nThanks for writing up the meeting minutes and posting them to the list!\n\nWe should probably put them on the wiki, as well.\n\nWladimir"
            }
        ],
        "thread_summary": {
            "title": "2015-09-24 #bitcoin-dev Weekly Development Meeting Minutes",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Daniel Stadulis",
                "Wladimir J. van der Laan"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2541
        }
    },
    {
        "title": "[bitcoin-dev] Build: win64: Package 'mingw-w64-dev' has no installation candidate",
        "thread_messages": [
            {
                "author": "Roy Osherove",
                "date": "2015-09-27T08:37:36",
                "message_text_only": "Hi All\nAs part of trying to learn more about the bitcoin builds, I am trying to\nrecreate the travis CI build system using TeamCity.\nSome of the builds work fine, but the windows builds seem to be having a\nproblem with getting mingw dev:\n\n[08:31:21][Step 3/3] E: Package 'mingw-w64-dev' has no installation\ncandidate\n\nI'm using the same exports env vars as the travis script, and actually\nusing the travis script inside teamcity , incuding adding the PPA for the\nmingw packages.\n\nThe PPA seems to be importing fine during the build:\n[Step 3/3] gpg: keyring `/tmp/tmp_nolyfrh/secring.gpg' created\n[08:30:48][Step 3/3] gpg: keyring `/tmp/tmp_nolyfrh/pubring.gpg' created\n[08:30:48][Step 3/3] gpg: requesting key F9CB8DB0 from hkp server\nkeyserver.ubuntu.com\n[08:30:48][Step 3/3] gpg: /tmp/tmp_nolyfrh/trustdb.gpg: trustdb created\n[08:30:48][Step 3/3] gpg: key F9CB8DB0: public key \"Launchpad PPA for\nUbuntu Wine Team\" imported\n[08:30:48][Step 3/3] gpg: no ultimately trusted keys found\n[08:30:48][Step 3/3] gpg: Total number processed: 1\n[08:30:48][Step 3/3] gpg: imported: 1 (RSA: 1)\n\nAny ideas why this seems to be working on travis and not on the teamcity\nbuild agent?\nThe agent is running inside  docker image based on ubuntu.\n\nThe full log of the failed build can be found at :\nhttp://btcdev.osherove.com:8111/viewLog.html?tab=buildLog&buildTypeId=Bitcoin_BuildWin64&buildId=332#_state=103&focus=242\n\nsame problem appears in win32 build.\nthere are the env vars:\n\nNameValue passed to buildenv.BASE_OUTDIR%system.teamcity.build.checkoutDir%\nenv.BITCOIN_CONFIG--enable-gui --enable-reduce-exportsenv.BOOST_TEST_RANDOM\n%build.number%env.CCACHE_COMPRESS1env.CCACHE_SIZE100Menv.CCACHE_TEMPDIR\n/tmp/.ccache-tempenv.GOALdeployenv.HOSTx86_64-w64-mingw32env.MAKEJOBS-j2\nenv.PACKAGESnsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64\nbinutils-mingw-w64-x86-64 mingw-w64-dev wine1.7 bcenv.PPAppa:ubuntu-wine/ppa\nenv.PYTHON_DEBUG1env.RUN_TESTStrueenv.SDK_URL\nhttps://bitcoincore.org/depends-sources/sdksenv.WINEDEBUG\n\n-- \nThanks,\n\nRoy Osherove\n\n   - *@RoyOsherove* <https://twitter.com/RoyOsherove>\n   - Read my new book *Notes to a Software Team Leader\n<http://TeamLeadSkills.com>*\n   - Or *my new course* about Beautiful Builds <http://courses.osherove.com>\nand Continuous Delivery\n   - +1-201-256-5575\n    - Timezone: Eastern Standard Time (New York)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150927/4ef1dbb9/attachment.html>"
            },
            {
                "author": "Roy Osherove",
                "date": "2015-09-29T06:09:36",
                "message_text_only": "Ah, I didn't notice, thanks!\n\nOn Mon, Sep 28, 2015 at 7:23 PM, Joseph Bisch <joseph.bisch at gmail.com>\nwrote:\n\n> Hi Roy,\n>\n> It looks like your TeamCity setup is using Ubuntu Trusty to perform\n> the build. Travis CI is using Ubuntu Precise instead[0]. The\n> mingw-w64-dev package is only available in Precise[1]. It looks like\n> that package was split into mingw-w64-x86-64-dev and\n> mingw-w64-i686-dev, so those are what have to be used with Ubuntu\n> Trusty.\n>\n> [0] - http://docs.travis-ci.com/user/ci-environment/\n> [1] - http://packages.ubuntu.com/precise/mingw-w64-dev\n> [2] - http://packages.ubuntu.com/trusty/mingw-w64-x86-64-dev\n> [3] - http://packages.ubuntu.com/trusty/mingw-w64-i686-dev\n>\n> Cheers,\n> Joseph\n>\n\n\n\n-- \nThanks,\n\nRoy Osherove\n\n   - *@RoyOsherove* <https://twitter.com/RoyOsherove>\n   - Read my new book *Notes to a Software Team Leader\n<http://TeamLeadSkills.com>*\n   - Or *my new course* about Beautiful Builds <http://courses.osherove.com>\nand Continuous Delivery\n   - +1-201-256-5575\n    - Timezone: Eastern Standard Time (New York)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/a1c50156/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Build: win64: Package 'mingw-w64-dev' has no installation candidate",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Roy Osherove"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3764
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin mining idea",
        "thread_messages": [
            {
                "author": "Neil Haran",
                "date": "2015-09-27T17:53:14",
                "message_text_only": "Hi,\n\nI have an idea for a gamified bitcoin mining app that I'd like to partner\nwith someone on that is very good with cryptography and knows the bitcoin\ncode base well. I have received interest in this from some, but I'm looking\nfor the ideal candidate to work with. If this is of interest, please email\nme at nharan81 at gmail.com.\n\nThanks,\nNeil\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150927/df354c5f/attachment.html>"
            },
            {
                "author": "Lauri Love",
                "date": "2015-09-28T13:33:52",
                "message_text_only": "Don't solicit interest in advance of content, please. Share your idea\nfirst and if people find it cogent and interesting they will volunteer\ninterest/assistance.\n\nOn 27 September 2015 at 18:53, Neil Haran via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Hi,\n>\n> I have an idea for a gamified bitcoin mining app that I'd like to partner\n> with someone on that is very good with cryptography and knows the bitcoin\n> code base well. I have received interest in this from some, but I'm looking\n> for the ideal candidate to work with. If this is of interest, please email\n> me at nharan81 at gmail.com.\n>\n> Thanks,\n> Neil\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n\n-- \n[Any text in this message is copyrighted to the full extent of the law\nin all jurisdictions with the following license: it may be read and\nstored or used to create derivative works by any person or\norganization with the following exceptions: all law-enforcement\norganizations, all national intelligence services, all corporate\nentities that monitize personal information. Any violations of this\nlicense with be prosecuted relentlessly and the highest possible\ndamages sought.]"
            },
            {
                "author": "Neil Haran",
                "date": "2015-09-29T05:47:04",
                "message_text_only": "My apologies Lauri!\n\nHere is the idea:\n\nI want to build a massive rock paper scissors tournament, the largest the\nworld has ever seen and one that no one can stop. I imagine re-purposing\nbitcoin-qt to do this.\n\nImagine a tournament like the World Series of Poker, but for RPS.\n\nEach person plays a best of 5 tournament each round. The players are\nrandomly matched against each other. The number of rounds would effectively\nbe the depth of a binary tree...\n\nSo if a million people play in this tournament, you would need to win 20\nrounds to win the tournament and the cash prize.\n\nNow, I will supply this cash prize and I have media connections to get\ncoverage for this. I fully believe I could get millions playing in this.\n\nThanks,\nNeil\n\n\nOn Mon, Sep 28, 2015 at 6:33 AM, Lauri Love <lauri.love at gmail.com> wrote:\n\n> Don't solicit interest in advance of content, please. Share your idea\n> first and if people find it cogent and interesting they will volunteer\n> interest/assistance.\n>\n> On 27 September 2015 at 18:53, Neil Haran via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Hi,\n> >\n> > I have an idea for a gamified bitcoin mining app that I'd like to partner\n> > with someone on that is very good with cryptography and knows the bitcoin\n> > code base well. I have received interest in this from some, but I'm\n> looking\n> > for the ideal candidate to work with. If this is of interest, please\n> email\n> > me at nharan81 at gmail.com.\n> >\n> > Thanks,\n> > Neil\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n>\n>\n>\n> --\n> [Any text in this message is copyrighted to the full extent of the law\n> in all jurisdictions with the following license: it may be read and\n> stored or used to create derivative works by any person or\n> organization with the following exceptions: all law-enforcement\n> organizations, all national intelligence services, all corporate\n> entities that monitize personal information. Any violations of this\n> license with be prosecuted relentlessly and the highest possible\n> damages sought.]\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/7b561b51/attachment.html>"
            },
            {
                "author": "Trevin Hofmann",
                "date": "2015-09-29T05:56:31",
                "message_text_only": "This is quite off topic, so please consider another channel. As long as you\nhave my attention, I previously started a cryptographically secure RPS game\nas a proof of concept.\n\nhttps://github.com/thofmann/rock-paper-scissors-protocol-secure/blob/master/readme.md\n\nUnfortunately, I do not have the time to develop it at the moment, but you\ncan message me off the channel if you would like to discuss things further.\n\nThank you,\nTrevin Hofmann\nOn Sep 29, 2015 12:47 AM, \"Neil Haran via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> My apologies Lauri!\n>\n> Here is the idea:\n>\n> I want to build a massive rock paper scissors tournament, the largest the\n> world has ever seen and one that no one can stop. I imagine re-purposing\n> bitcoin-qt to do this.\n>\n> Imagine a tournament like the World Series of Poker, but for RPS.\n>\n> Each person plays a best of 5 tournament each round. The players are\n> randomly matched against each other. The number of rounds would effectively\n> be the depth of a binary tree...\n>\n> So if a million people play in this tournament, you would need to win 20\n> rounds to win the tournament and the cash prize.\n>\n> Now, I will supply this cash prize and I have media connections to get\n> coverage for this. I fully believe I could get millions playing in this.\n>\n> Thanks,\n> Neil\n>\n>\n> On Mon, Sep 28, 2015 at 6:33 AM, Lauri Love <lauri.love at gmail.com> wrote:\n>\n>> Don't solicit interest in advance of content, please. Share your idea\n>> first and if people find it cogent and interesting they will volunteer\n>> interest/assistance.\n>>\n>> On 27 September 2015 at 18:53, Neil Haran via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > Hi,\n>> >\n>> > I have an idea for a gamified bitcoin mining app that I'd like to\n>> partner\n>> > with someone on that is very good with cryptography and knows the\n>> bitcoin\n>> > code base well. I have received interest in this from some, but I'm\n>> looking\n>> > for the ideal candidate to work with. If this is of interest, please\n>> email\n>> > me at nharan81 at gmail.com.\n>> >\n>> > Thanks,\n>> > Neil\n>> >\n>> > _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> >\n>>\n>>\n>>\n>> --\n>> [Any text in this message is copyrighted to the full extent of the law\n>> in all jurisdictions with the following license: it may be read and\n>> stored or used to create derivative works by any person or\n>> organization with the following exceptions: all law-enforcement\n>> organizations, all national intelligence services, all corporate\n>> entities that monitize personal information. Any violations of this\n>> license with be prosecuted relentlessly and the highest possible\n>> damages sought.]\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/081a598a/attachment.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-29T06:13:18",
                "message_text_only": "> This is quite off topic,\n\nI see a number of people claiming they know what should be posted to \nthis list but those claims appear to be without merit.\n\nThe list states the subject is \"Development discussion list for Bitcoin \nprotocol and its implementation.\"  That is a pretty broad description \nthat appears to encompass a number of topics that are claimed to be \n\"off-topic\" by people who seem to be making up their own rules.  One guy \neven contacts people and threatens to have the list moderated if you \ndon't follow his rules even though it appears he has no such authority \nand there are no official rules he can reference.\n\nMaybe there should be a more precise description if the discussion is to \nbe limited in some way beyond the \"official\" description.\n\nRuss"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-09-29T21:07:53",
                "message_text_only": "This is off-topic for this list.\n\n\n\nOn Sun, Sep 27, 2015 at 1:53 PM, Neil Haran via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi,\n>\n> I have an idea for a gamified bitcoin mining app that I'd like to partner\n> with someone on that is very good with cryptography and knows the bitcoin\n> code base well. I have received interest in this from some, but I'm looking\n> for the ideal candidate to work with. If this is of interest, please email\n> me at nharan81 at gmail.com.\n>\n> Thanks,\n> Neil\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/e2679f89/attachment.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-29T22:58:37",
                "message_text_only": "On 9/29/2015 5:07 PM, Jeff Garzik via bitcoin-dev wrote:\n> This is off-topic for this list.\n\nYou like to go around pretending you are in charge and telling people \nwhat to do.  You have no such authority and your time is probably better \nspent reviewing your company's Bitcoin handling and security procedures \ninstead of trying to bully people all the time.\n\nRuss"
            },
            {
                "author": "Jonathan Toomim (Toomim Bros)",
                "date": "2015-09-29T23:02:39",
                "message_text_only": "Making statements about a developer's personal character is also off-topic for this list.\n\nOn Sep 29, 2015, at 3:58 PM, Milly Bitcoin via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On 9/29/2015 5:07 PM, Jeff Garzik via bitcoin-dev wrote:\n>> This is off-topic for this list.\n> \n> You like to go around pretending you are in charge and telling people what to do.  You have no such authority and your time is probably better spent reviewing your company's Bitcoin handling and security procedures instead of trying to bully people all the time.\n> \n> Russ\n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/48b57d13/attachment.sig>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-29T23:16:03",
                "message_text_only": "On 9/29/2015 7:02 PM, Jonathan Toomim (Toomim Bros) wrote:\n> Making statements about a developer's personal character is also off-topic for this list.\n\nIf that were true then probably 20-30% of the posting here would be \noff-topic.  lol.\n\nRuss"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-09-29T23:54:43",
                "message_text_only": "On Tue, Sep 29, 2015 at 7:16 PM, Milly Bitcoin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On 9/29/2015 7:02 PM, Jonathan Toomim (Toomim Bros) wrote:\n>\n>> Making statements about a developer's personal character is also\n>> off-topic for this list.\n>>\n>\n> If that were true then probably 20-30% of the posting here would be\n> off-topic.  lol.\n\n\nYes - that is the reason why a discussion list is being created, as an\noutlet for off-topic discussions.  The consensus of the developers that\ncreated this bitcoin-dev list a short time ago is of being turned off due\nto the off-topic noise, impacting productivity.\n\nSince 2011 and bitcoin-development, the list was always intended to focus\non the highly technical bits of the core software, and avoid wandering into\nnever-ending philosophical discussions.  Example:\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-June/thread.html\n\n\n\n\n\n\n\n\n>\n>\n> Russ\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/fcf5c011/attachment.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-30T00:07:31",
                "message_text_only": "> Since 2011 and bitcoin-development, the list was always intended to\n> focus on the highly technical bits of the core software, and avoid\n> wandering into never-ending philosophical discussions.  Example:\n> http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-June/thread.html\n\nWhat happened years ago is not really relevant as Bitcoin has changed \nand the stakeholders have expanded.  What is relevant is the actual \ndescription.  Whatever you want to discuss it should be clearly \ndescribed when people sign up.\n\nRuss"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-09-30T00:10:57",
                "message_text_only": "On Tue, Sep 29, 2015 at 8:07 PM, Milly Bitcoin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> What happened years ago is not really relevant as Bitcoin has changed and\n>> the stakeholders have expanded.  What is relevant is the actual\n>> description.  Whatever you want to discuss it should be clearly described\n>> when people sign up.\n>>\n>\nThis email's quote excised the \"short time ago\" bit, which is the other 1/2\nof the context.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/78c833e5/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin mining idea",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeff Garzik",
                "Milly Bitcoin",
                "Jonathan Toomim (Toomim Bros)",
                "Trevin Hofmann",
                "Lauri Love",
                "Neil Haran"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 13219
        }
    },
    {
        "title": "[bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2015-09-27T18:50:31",
                "message_text_only": "Summary\n-------\n\nIt's time to deploy BIP65 CHECKLOCKTIMEVERIFY.\n\nI've backported the CLTV op-code and a IsSuperMajority() soft-fork to\nthe v0.10 and v0.11 branches, pull-reqs #6706 and #6707 respectively. A\npull-req for git HEAD for the soft-fork deployment has been open since\nJune 28th, #6351 - the opcode implementation itself was merged two\nmonths ago.\n\nWe should release a v0.10.3 and v0.11.1 with CLTV and get the ball\nrolling on miner adoption. We have consensus that we need CLTV, we have\na well tested implementation, and we have a well-tested deployment\nmechanism. We also don't need to wait for other soft-fork proposals to\ncatch up - starting the CLTV deployment process isn't going to delay\nfuture soft-forks, or for that matter, hard-forks.\n\nI think it's possible to safely get CLTV live on mainnet before the end\nof the year. It's time we get this over with and done.\n\n\nDetailed Rational\n-----------------\n\n1) There is a clear need for CLTV\n\nEscrow and payment channels both benefit greatly from CLTV. In\nparticular, payment channel implementations are made significantly\nsimpler with CLTV, as well as more secure by removing the malleability\nvulnerability.\n\nWhy are payment channels important? There's a lot of BTC out there\nvulnerable to theft that doesn't have to be. For example, just the other\nday I was talking with Nick Sullivan about ChangeTip's vulnerability to\ntheft, as well as regulatory uncertainty about whether or not they're a\ncustodian of their users' funds. With payment channels ChangeTip would\nonly be able to spend as much of a deposit as a user had spent, keeping\nthe rest safe from theft. Similarly, in the other direction - ChangeTip\nto their users - in many cases it is feasible to also use payment\nchannels to immediately give users control of their funds as they\nreceive them, again protecting users and helping make the case that\nthey're not a custodian. In the future I'm sure we'll see fancy\nbi-directional payment channels serving this role, but lets not let\nperfect be the enemy of good.\n\n\n2) We have consensus on the semantics of the CLTV opcode\n\nPull-req #6124 - the implementation of the opcode itself - was merged\nnearly three months ago after significant peer review and discussion.\nPart of that review process included myself(1) and mruddy(2) writing\nactual demos of CLTV. The chance of the CLTV semantics changing now is\nnear-zero.\n\n\n3) We have consensus that Bitcoin should adopt CLTV\n\nThe broad peer review and discussion that got #6124 merged is a clear\nsign that we expect CLTV to be eventually adopted. The question isn't if\nCLTV should be added to the Bitcoin protocol, but rather when.\n\n\n4) The CLTV opcode and IsSuperMajority() deployment code has been\n   thoroughly tested and reviewed\n\nThe opcode implementation is very simple, yet got significant review,\nand it has solid test coverage by a suite of tx-(in)valid.json tests.\nThe tests themselves have been reviewed by others, resulting in Esteban\nOrdano's pull-req #6368 by Esteban Ordano which added a few more cases.\n\nAs for the deployment code, both the actual IsSuperMajority() deployment\ncode and associated unit-tests tests were copied nearly line-by-line\nfrom the succesful BIP66. I did this deliberately to make all the peer\nreview and testing of the deployment mechanism used in BIP66 be equally\nvalid for CLTV.\n\n\n5) We can safely deploy CLTV with IsSuperMajority()\n\nWe've done two soft-forks so far with the IsSuperMajority() mechanism,\nBIP34 and BIP66. In both cases the IsSuperMajority() mechanism itself\nworked flawlessly. As is well-known BIP66 in combination with a large %\nof the hashing power running non-validating \"SPV\" mining operations did\nlead to a temporary fork, however the root cause of this issue is\nunavoidable and not unique to IsSuperMajority() soft-forks.\n\nPragmatically speaking, now that miners are well aware of the issue it\nwill be easy for them to avoid a repeat of that fork by simply adding\nIsSuperMajority() rules to their \"SPV\" mining code. Equally turning off\nSPV mining (temporarily) is perfectly feasable.\n\n\n6) We have the necessary consensus to deploy CLTV via IsSuperMajority()\n\nThe various \"nVersion bits\" proposals - which I am a co-author of - have\nthe primary advantage of being able to cleanly deal with the case where\na soft-fork fails to get adopted. However, we do have broad consensus,\nincluding across all sides of the blocksize debate, that CLTV should be\nadopted. The risk of CLTV failing to get miner adoption, and thus\nblocking other soft-forks, is very low.\n\n\n7) Using IsSuperMajority() to deploy CLTV doesn't limit or delay other upgrades\n\nIt _is_ possible for multiple IsSuperMajority() soft-forks to coexist,\nin the sense that if one soft-fork is \"in flight\" that doesn't prevent\nanother soft-fork from also being deployed simultaneously.\n\nIn particular, if we deploy CLTV via IsSuperMajority() that does _not_\nimpact the adoption schedule for other future soft-forks, including\nsoft-forks using a future nVersion bits deployment mechanism.\n\nFor instance, suppose we start deployment of CLTV right now with\nnVersion=4 blocks. In three months we have 25% miner support, and start\ndeploying CHECKSEQUENCEVERIFY with nVersion=5 blocks. For miners\nsupporting only OP_CLTV, the nVersion=5 blocks still trigger OP_CLTV;\nminers creating nVersion=5 blocks are simply stating that they support\nboth soft-forks. Equally, if in three months we finish a nVersion bits\nproposal, those miners will be advertising nVersion=(1 << 29) blocks,\nwhich also advertise OP_CLTV support.\n\n\n8) BIP101 miners have not proved to be a problem for CLTV deployment\n\nWhile there was concern that BIP101's use of nVersion would cause\nissues with a IsSuperMajority() softfork, the % of blocks with BIP101\nnVersion's never reached more than 1%, and currently is hovering at\naround 0.1%\n\nAs Gavin Andresen has stated that he is happy to add CLTV to BIP101, and\nthus Bitcoin XT, I believe we can expect those miners to safely support\nCLTV well before soft-fork enforcement happens. Secondly, the 95%\nenforcement threshold means we can tolerate a fairly high % of miners\nrunning pre-CLTV BIP101 implementations without fatal effects in the\nunlikely event that those miners don't upgrade.\n\n\n9) Doing another IsSuperMajority() soft-fork doesn't \"burn a bit\"\n\nThis is a common myth! All nVersion bits proposals involve permanently\nsetting a high-order bit to 1, which results in nVersion >= all prior\nIsSuperMajority() soft-forks. In short, we can do a nearly unlimited\nnumber of IsSuperMajority() soft-forks without affecting future nVersion\nbits soft-forks at all.\n\n\n10) Waiting for nVersion bits and CHECKSEQUENCEVERIFY will significantly\n    delay deployment of CLTV\n\nIt's been proposed multiple times that we wait until we can do a single\nsoft-fork with CSV using the nVersion bits mechanism.\n\nnVersion bits doesn't even have an implementation yet, nor has solid\nconsensus been reached on the exact semantics of how nVersion bits\nshould work. The stateful nature of nVersion bits soft-forks requires a\nsignificant amount of new code compared to IsSuperMajority() soft-forks,\nwhich in turn will require a significant amount of testing. (again I'll\npoint out I'm a co-author to all the nVersion bits proposals)\n\nCSV has an implementation, but there is still debate going on about what\nthe exact semantics of it should be. Getting the semantics right is\nespecially important as part of CSV includes changing the meaning of\nnSequence, restricting future uses of that field. There have been many\nproposals to use nSequence, e.g. for proof-of-stake blocksize voting,\nand it has the unique capability of being a field that is both unused,\nand signed by scriptSigs. We shouldn't take potentially restricting\nfuture uses of it lightly.\n\nCSV is also significantly more complex and invasive than CLTV in terms\nof code changes. A large % of the mining power is running forks\nof Bitcoin Core with custom changes - modifying these forks with new\nfeatures is a labor intensive and slow process.\n\nIf CLTV is ready now, why delay it - potentially for 6-12 months - for\nother proposals to catch up? Equally if they do catch up, great! As\nexplained above an in-flight CLTV soft-fork won't delay future upgrades.\n\n\n11) Even if CLTV is broken/obsoleted there is very little carrying cost\n    to having it\n\nSuppose we decide in two years that CLTV was botched and we need to fix\nit. What's the \"carrying cost\" of having implemented CLTV in the first\nplace?\n\nWe'll have used up one of our ten soft-forkable NOPs, but if we ever\n\"run out\" it's easy to use extension NOPs(3). Similarly, future script\nimprovements like OP_MAST - or even a hard-fork - can easily expand the\nrange of NOPs to the point where this is a non-issue.\n\nIf you don't use OP_CLTV in your scripts there is zero effect on your\ntransactions; we're not limiting future improvements to Bitcoin in any\nway other than using up a NOP by implementing CLTV.\n\n\nReferences\n----------\n\n1) https://github.com/petertodd/checklocktimeverify-demos\n2) https://github.com/mruddy/bip65-demos\n3) https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101293403\n4) https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000006a257845da185433cbde54a74be889b1c046a267dcf4ab2\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150927/3c7f726e/attachment.sig>"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-09-27T20:26:12",
                "message_text_only": "+1 for deploying BIP65 immediately without further waiting. Agree with \nall Peter's points.\n\nIf BIP65 has to follow the 0.12 schedule, it will take almost 9 months \nfrom now to complete the softfork. I don't see any good reason to wait \nfor that long. We have too much talk, too little action.\n\nSome mining pools hinted that they may adopt BitcoinXT at the end of \n2015. If we could start deploying BIP65 earlier, they will have a \npatched version by the time they switch. Gavin has agreed to support \nBIP65 in XT.\n\nBy the way, is there any chance to backport it to 0.9? In the deployment \nof BIP66 some miners requested a backport to 0.9 and that's why we have \n0.9.5."
            },
            {
                "author": "Peter Todd",
                "date": "2015-09-27T20:27:55",
                "message_text_only": "On Sun, Sep 27, 2015 at 04:26:12PM -0400, jl2012 at xbt.hk wrote:\n> +1 for deploying BIP65 immediately without further waiting. Agree\n> with all Peter's points.\n\nThanks!\n\n> By the way, is there any chance to backport it to 0.9? In the\n> deployment of BIP66 some miners requested a backport to 0.9 and\n> that's why we have 0.9.5.\n\nI certainly could, though there's good reasons to move to v0.10.x; I'd\nwant to first hear from miners as to why they're still on v0.9.x\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000f8ed62397b82b10e56b9aea309fb18c37985d1405808c4f\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150927/c633be3b/attachment.sig>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-09-27T20:27:57",
                "message_text_only": "Agree with all CLTV and nVersionBits points. We should deploy a lock-time\nsoft-fork ASAP, using the tried and true IsSuperMajoirty test.\n\nHowever your information regarding BIPs 68 (sequence numbers), 112\n(checksequenceverify) and 113 (median time past) is outdated. Debate\nregarding semantics has been settled, and there are working implementations\nready for merge on github. See pull requests #6312, #6564, and #6566. I\ndon\u2019t know what the hold up has been regarding further reviews and merging,\nbut it is ready.\n\nIf you believe there are reasons #6312, #6564, or #6566 should not be\nmerged, please speak up. Otherwise it appears there is consensus on these\nchanges. They are related, and there is no reason not to include them in\nthe soft-fork, delaying applications using these features by 6-12 months.\n\nOn Sun, Sep 27, 2015 at 11:50 AM, Peter Todd via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Summary\n> -------\n>\n> It's time to deploy BIP65 CHECKLOCKTIMEVERIFY.\n>\n> I've backported the CLTV op-code and a IsSuperMajority() soft-fork to\n> the v0.10 and v0.11 branches, pull-reqs #6706 and #6707 respectively. A\n> pull-req for git HEAD for the soft-fork deployment has been open since\n> June 28th, #6351 - the opcode implementation itself was merged two\n> months ago.\n>\n> We should release a v0.10.3 and v0.11.1 with CLTV and get the ball\n> rolling on miner adoption. We have consensus that we need CLTV, we have\n> a well tested implementation, and we have a well-tested deployment\n> mechanism. We also don't need to wait for other soft-fork proposals to\n> catch up - starting the CLTV deployment process isn't going to delay\n> future soft-forks, or for that matter, hard-forks.\n>\n> I think it's possible to safely get CLTV live on mainnet before the end\n> of the year. It's time we get this over with and done.\n>\n>\n> Detailed Rational\n> -----------------\n>\n> 1) There is a clear need for CLTV\n>\n> Escrow and payment channels both benefit greatly from CLTV. In\n> particular, payment channel implementations are made significantly\n> simpler with CLTV, as well as more secure by removing the malleability\n> vulnerability.\n>\n> Why are payment channels important? There's a lot of BTC out there\n> vulnerable to theft that doesn't have to be. For example, just the other\n> day I was talking with Nick Sullivan about ChangeTip's vulnerability to\n> theft, as well as regulatory uncertainty about whether or not they're a\n> custodian of their users' funds. With payment channels ChangeTip would\n> only be able to spend as much of a deposit as a user had spent, keeping\n> the rest safe from theft. Similarly, in the other direction - ChangeTip\n> to their users - in many cases it is feasible to also use payment\n> channels to immediately give users control of their funds as they\n> receive them, again protecting users and helping make the case that\n> they're not a custodian. In the future I'm sure we'll see fancy\n> bi-directional payment channels serving this role, but lets not let\n> perfect be the enemy of good.\n>\n>\n> 2) We have consensus on the semantics of the CLTV opcode\n>\n> Pull-req #6124 - the implementation of the opcode itself - was merged\n> nearly three months ago after significant peer review and discussion.\n> Part of that review process included myself(1) and mruddy(2) writing\n> actual demos of CLTV. The chance of the CLTV semantics changing now is\n> near-zero.\n>\n>\n> 3) We have consensus that Bitcoin should adopt CLTV\n>\n> The broad peer review and discussion that got #6124 merged is a clear\n> sign that we expect CLTV to be eventually adopted. The question isn't if\n> CLTV should be added to the Bitcoin protocol, but rather when.\n>\n>\n> 4) The CLTV opcode and IsSuperMajority() deployment code has been\n>    thoroughly tested and reviewed\n>\n> The opcode implementation is very simple, yet got significant review,\n> and it has solid test coverage by a suite of tx-(in)valid.json tests.\n> The tests themselves have been reviewed by others, resulting in Esteban\n> Ordano's pull-req #6368 by Esteban Ordano which added a few more cases.\n>\n> As for the deployment code, both the actual IsSuperMajority() deployment\n> code and associated unit-tests tests were copied nearly line-by-line\n> from the succesful BIP66. I did this deliberately to make all the peer\n> review and testing of the deployment mechanism used in BIP66 be equally\n> valid for CLTV.\n>\n>\n> 5) We can safely deploy CLTV with IsSuperMajority()\n>\n> We've done two soft-forks so far with the IsSuperMajority() mechanism,\n> BIP34 and BIP66. In both cases the IsSuperMajority() mechanism itself\n> worked flawlessly. As is well-known BIP66 in combination with a large %\n> of the hashing power running non-validating \"SPV\" mining operations did\n> lead to a temporary fork, however the root cause of this issue is\n> unavoidable and not unique to IsSuperMajority() soft-forks.\n>\n> Pragmatically speaking, now that miners are well aware of the issue it\n> will be easy for them to avoid a repeat of that fork by simply adding\n> IsSuperMajority() rules to their \"SPV\" mining code. Equally turning off\n> SPV mining (temporarily) is perfectly feasable.\n>\n>\n> 6) We have the necessary consensus to deploy CLTV via IsSuperMajority()\n>\n> The various \"nVersion bits\" proposals - which I am a co-author of - have\n> the primary advantage of being able to cleanly deal with the case where\n> a soft-fork fails to get adopted. However, we do have broad consensus,\n> including across all sides of the blocksize debate, that CLTV should be\n> adopted. The risk of CLTV failing to get miner adoption, and thus\n> blocking other soft-forks, is very low.\n>\n>\n> 7) Using IsSuperMajority() to deploy CLTV doesn't limit or delay other\n> upgrades\n>\n> It _is_ possible for multiple IsSuperMajority() soft-forks to coexist,\n> in the sense that if one soft-fork is \"in flight\" that doesn't prevent\n> another soft-fork from also being deployed simultaneously.\n>\n> In particular, if we deploy CLTV via IsSuperMajority() that does _not_\n> impact the adoption schedule for other future soft-forks, including\n> soft-forks using a future nVersion bits deployment mechanism.\n>\n> For instance, suppose we start deployment of CLTV right now with\n> nVersion=4 blocks. In three months we have 25% miner support, and start\n> deploying CHECKSEQUENCEVERIFY with nVersion=5 blocks. For miners\n> supporting only OP_CLTV, the nVersion=5 blocks still trigger OP_CLTV;\n> miners creating nVersion=5 blocks are simply stating that they support\n> both soft-forks. Equally, if in three months we finish a nVersion bits\n> proposal, those miners will be advertising nVersion=(1 << 29) blocks,\n> which also advertise OP_CLTV support.\n>\n>\n> 8) BIP101 miners have not proved to be a problem for CLTV deployment\n>\n> While there was concern that BIP101's use of nVersion would cause\n> issues with a IsSuperMajority() softfork, the % of blocks with BIP101\n> nVersion's never reached more than 1%, and currently is hovering at\n> around 0.1%\n>\n> As Gavin Andresen has stated that he is happy to add CLTV to BIP101, and\n> thus Bitcoin XT, I believe we can expect those miners to safely support\n> CLTV well before soft-fork enforcement happens. Secondly, the 95%\n> enforcement threshold means we can tolerate a fairly high % of miners\n> running pre-CLTV BIP101 implementations without fatal effects in the\n> unlikely event that those miners don't upgrade.\n>\n>\n> 9) Doing another IsSuperMajority() soft-fork doesn't \"burn a bit\"\n>\n> This is a common myth! All nVersion bits proposals involve permanently\n> setting a high-order bit to 1, which results in nVersion >= all prior\n> IsSuperMajority() soft-forks. In short, we can do a nearly unlimited\n> number of IsSuperMajority() soft-forks without affecting future nVersion\n> bits soft-forks at all.\n>\n>\n> 10) Waiting for nVersion bits and CHECKSEQUENCEVERIFY will significantly\n>     delay deployment of CLTV\n>\n> It's been proposed multiple times that we wait until we can do a single\n> soft-fork with CSV using the nVersion bits mechanism.\n>\n> nVersion bits doesn't even have an implementation yet, nor has solid\n> consensus been reached on the exact semantics of how nVersion bits\n> should work. The stateful nature of nVersion bits soft-forks requires a\n> significant amount of new code compared to IsSuperMajority() soft-forks,\n> which in turn will require a significant amount of testing. (again I'll\n> point out I'm a co-author to all the nVersion bits proposals)\n>\n> CSV has an implementation, but there is still debate going on about what\n> the exact semantics of it should be. Getting the semantics right is\n> especially important as part of CSV includes changing the meaning of\n> nSequence, restricting future uses of that field. There have been many\n> proposals to use nSequence, e.g. for proof-of-stake blocksize voting,\n> and it has the unique capability of being a field that is both unused,\n> and signed by scriptSigs. We shouldn't take potentially restricting\n> future uses of it lightly.\n>\n> CSV is also significantly more complex and invasive than CLTV in terms\n> of code changes. A large % of the mining power is running forks\n> of Bitcoin Core with custom changes - modifying these forks with new\n> features is a labor intensive and slow process.\n>\n> If CLTV is ready now, why delay it - potentially for 6-12 months - for\n> other proposals to catch up? Equally if they do catch up, great! As\n> explained above an in-flight CLTV soft-fork won't delay future upgrades.\n>\n>\n> 11) Even if CLTV is broken/obsoleted there is very little carrying cost\n>     to having it\n>\n> Suppose we decide in two years that CLTV was botched and we need to fix\n> it. What's the \"carrying cost\" of having implemented CLTV in the first\n> place?\n>\n> We'll have used up one of our ten soft-forkable NOPs, but if we ever\n> \"run out\" it's easy to use extension NOPs(3). Similarly, future script\n> improvements like OP_MAST - or even a hard-fork - can easily expand the\n> range of NOPs to the point where this is a non-issue.\n>\n> If you don't use OP_CLTV in your scripts there is zero effect on your\n> transactions; we're not limiting future improvements to Bitcoin in any\n> way other than using up a NOP by implementing CLTV.\n>\n>\n> References\n> ----------\n>\n> 1) https://github.com/petertodd/checklocktimeverify-demos\n> 2) https://github.com/mruddy/bip65-demos\n> 3) https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101293403\n> 4) https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 000000000000000006a257845da185433cbde54a74be889b1c046a267dcf4ab2\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150927/7fbbbfa6/attachment-0001.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-27T20:41:02",
                "message_text_only": "On Sun, Sep 27, 2015 at 7:50 PM, Peter Todd via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> 10) Waiting for nVersion bits and CHECKSEQUENCEVERIFY will significantly\n>     delay deployment of CLTV\n>\n> It's been proposed multiple times that we wait until we can do a single\n> soft-fork with CSV using the nVersion bits mechanism.\n>\n> nVersion bits doesn't even have an implementation yet, nor has solid\n> consensus been reached on the exact semantics of how nVersion bits\n> should work.\n\n\nSmall correction, the suggestion is to aim to roll out CLTV+CSV together by\n0.12 release, using IsSuperMajority() (or versionbits if it is ready by\nthen). If CSV is not ready by then, we'd just roll out CLTV.\n\nHowever, the CSV related pull requests are ready for final review and if\nthat can happen soon I don't see why we wouldn't roll CLTV+CSV out together\nbefore 0.12. A considerable amount of time, discussion and iterations have\noccurred for the related PRs and I believe they are at the point of\nconsensus modulo final review before merging.\n\nReferences:\n\nMempool-only sequence number constraint verification\nhttps://github.com/bitcoin/bitcoin/pull/6312\n\nMempool-only CHECKSEQUENCEVERIFY\nhttps://github.com/bitcoin/bitcoin/pull/6564\n\nMempool-only Median time-past as endpoint for lock-time calculations\nhttps://github.com/bitcoin/bitcoin/pull/6566\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150927/81513026/attachment.html>"
            },
            {
                "author": "s7r",
                "date": "2015-09-28T10:10:38",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n+1\nI was actually waiting for this. It makes 'smart contracts' simpler\nand better from many points of view.\n\nPete I don't see anything about RCLTV in BIP65, was that a separate\nBIP? Which one is it and are we also deploying it via\nIsSuperMajority()? RCLTV in addition to CLTV would be trivial so maybe\nwe can take the pain just once?\n\nOn 9/27/2015 9:50 PM, Peter Todd via bitcoin-dev wrote:\n> Summary -------\n> \n> It's time to deploy BIP65 CHECKLOCKTIMEVERIFY.\n> \n> I've backported the CLTV op-code and a IsSuperMajority() soft-fork\n> to the v0.10 and v0.11 branches, pull-reqs #6706 and #6707\n> respectively. A pull-req for git HEAD for the soft-fork deployment\n> has been open since June 28th, #6351 - the opcode implementation\n> itself was merged two months ago.\n> \n> We should release a v0.10.3 and v0.11.1 with CLTV and get the ball \n> rolling on miner adoption. We have consensus that we need CLTV, we\n> have a well tested implementation, and we have a well-tested\n> deployment mechanism. We also don't need to wait for other\n> soft-fork proposals to catch up - starting the CLTV deployment\n> process isn't going to delay future soft-forks, or for that matter,\n> hard-forks.\n> \n> I think it's possible to safely get CLTV live on mainnet before the\n> end of the year. It's time we get this over with and done.\n> \n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (MingW32)\n\niQEcBAEBCAAGBQJWCRIeAAoJEIN/pSyBJlsRlqgH/iir3Ao99WMNV0xC5RL+fv/Q\nJ1az1dXif9w9sTaCZMkENyIH9B2kwmOcPX/pU+p75qNvhQi9OrNMNRE8Wlwa+tcL\nDD9DbyiQvxKdXjCnZqUyyIgBjuFbiF5VNQ67B1faEnzvmX81PoDjd2FPC51WChjZ\nj7xPcJ73d23OPXpsKtyaUwn1QbGwprhFCEkcqjC50gw/IQkMJiqZ6pMepDVSyGKl\nRpOsWCyCVoTJtM5NFk7wXg5LBFA7rXXQL56M00YJKLJAx/ooGb2T4ZRX0GeEWX8/\nwquNA9Bj7picIr20sPohGE0cr2QiD3gmL9qLT2ZDlrFFDk8thL8afOx00Z6ih3I=\n=dPXd\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-28T10:48:57",
                "message_text_only": "There is *no* consensus on using a soft fork to deploy this feature. It\nwill result in the same problems as all the other soft forks - SPV wallets\nwill become less reliable during the rollout period. I am against that, as\nit's entirely avoidable.\n\nMake it a hard fork and my objection will be dropped.\n\nUntil then, as there is no consensus, you need to do one of two things:\n\n1) Drop the \"everyone must agree to make changes\" idea that people here\nlike to peddle, and do it loudly, so everyone in the community is correctly\ninformed\n\n2) Do nothing\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/2ef01e42/attachment-0001.html>"
            },
            {
                "author": "Adam Back",
                "date": "2015-09-28T11:00:26",
                "message_text_only": "I wonder what Gavin's views are, he's usually constructive, and see if\nhe'll include it in XT - I think he may have said he was supportive.\n\nThe rationale for soft vs hard-forks is well known, so I wont go over them.\n\nAdam\n\n\nOn 28 September 2015 at 06:48, Mike Hearn via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> There is no consensus on using a soft fork to deploy this feature. It will\n> result in the same problems as all the other soft forks - SPV wallets will\n> become less reliable during the rollout period. I am against that, as it's\n> entirely avoidable.\n>\n> Make it a hard fork and my objection will be dropped.\n>\n> Until then, as there is no consensus, you need to do one of two things:\n>\n> 1) Drop the \"everyone must agree to make changes\" idea that people here like\n> to peddle, and do it loudly, so everyone in the community is correctly\n> informed\n>\n> 2) Do nothing\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-28T11:40:35",
                "message_text_only": ">\n> The rationale for soft vs hard-forks is well known, so I wont go over them.\n>\n\nThe rationale of \"backwards compatibility\" is well known, yet wrong. I've\ngone over the arguments here and explained why the concept makes no sense:\n\nhttps://medium.com/@octskyward/on-consensus-and-forks-c6a050c792e7\n\nEric - no, it's not sophisticated humour. I've been objecting to soft forks\nsince this idea first appeared.\n\nThere is no consensus. Now pick. Lose the requirement that everyone agree\nfor consensus changes, and tell people you've done it. Change the spec. Or\ndo nothing.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/5dae3282/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-28T12:20:31",
                "message_text_only": "Perhaps Adam won't go into the rationale...but I think it is important we clarify this.\n\nFor better or worse, the only \"voting\" system available to Bitcoin that cannot be trivially attacked is hashing power. Soft forks are essentially miner-enforced rule changes...rules they could have decided to enforce without the consensus of anyone else. For instance, as far as old nodes are concerned, a p2sh output can be redeemed by a simple preimage of the hash...with no signatures. The point, however, is that as long as the majority of hashpower enforces the new rule, such attempts to redeem the output will never end up on the blockchain. Therefore, transactions that attempt to redeem the output with a simple preimage are as good as invalid...and effectively have become invalid.\n\nI concede that this mechanism has some issues. Moreover, I agree that it is important that the Bitcoin community be aware of these things. I've been proposing making these rule changes explicit in the BIPs (https://github.com/CodeShark/bips/blob/BIP_Classification/bip-layers.mediawiki). I believe it is important that people weigh in on such rule changes. However, the above stated mechanism does not fall under the definition of \"hard fork\" we've come to accept.\n\nGo ahead and object to soft forks...but at least try not to make arguments based on changing the definitions of terms we all generally agree upon.\n\n- Eric\n\nOn September 28, 2015 4:40:35 AM PDT, Mike Hearn via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> The rationale for soft vs hard-forks is well known, so I wont go over\n>them.\n>>\n>\n>The rationale of \"backwards compatibility\" is well known, yet wrong.\n>I've\n>gone over the arguments here and explained why the concept makes no\n>sense:\n>\n>https://medium.com/@octskyward/on-consensus-and-forks-c6a050c792e7\n>\n>Eric - no, it's not sophisticated humour. I've been objecting to soft\n>forks\n>since this idea first appeared.\n>\n>There is no consensus. Now pick. Lose the requirement that everyone\n>agree\n>for consensus changes, and tell people you've done it. Change the spec.\n>Or\n>do nothing.\n>\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/3812b096/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-28T12:26:17",
                "message_text_only": ">\n> Go ahead and object to soft forks...but at least try not to make arguments\n> based on changing the definitions of terms we all generally agree upon.\n>\n\nI don't intend to do that, and I don't think I am - I know what the\ndifference between a soft and hard fork is and am not trying to confuse or\nblur the two.\n\nTo reiterate: this current BIP implements a soft fork. I am not debating\nthat. I am saying it should use a hard fork instead. This will ensure no\nrepeat of the P2SH case where invalid blocks were being found for weeks (or\nwas it months?) after the new rules kicked in, thus exposing SPV wallets\nand old nodes to unnecessary risk for no benefit.\n\nAdditionally, I am making it clear that there's no consensus for rolling\nout the new opcode in this way. As you say, the mechanism has issues. If\nyou read the comments when I wrote my article, you can see that others\nshare the same concerns:\n\nhttps://www.reddit.com/r/Bitcoin/comments/3griiv/on_consensus_and_forks_by_mike_hearn\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/a7bdf845/attachment-0001.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-28T12:44:52",
                "message_text_only": "SPV wallets in their current form are inherently insecure. Moreover, while we at least have a soft fork mechanism that is not trivially exploitable (yes, it's got issues...but unlike SPV wallets, it isn't so easily exploitable), we have NO hard fork mechanism in place that isn't highly prone to systemic consensus failure.\n\nBut I think pretty much anyone who hasn't been in a coma for the last several years knows this...and I'll stop repeating the obvious.\n\nOn September 28, 2015 5:26:17 AM PDT, Mike Hearn <hearn at vinumeris.com> wrote:\n>>\n>> Go ahead and object to soft forks...but at least try not to make\n>arguments\n>> based on changing the definitions of terms we all generally agree\n>upon.\n>>\n>\n>I don't intend to do that, and I don't think I am - I know what the\n>difference between a soft and hard fork is and am not trying to confuse\n>or\n>blur the two.\n>\n>To reiterate: this current BIP implements a soft fork. I am not\n>debating\n>that. I am saying it should use a hard fork instead. This will ensure\n>no\n>repeat of the P2SH case where invalid blocks were being found for weeks\n>(or\n>was it months?) after the new rules kicked in, thus exposing SPV\n>wallets\n>and old nodes to unnecessary risk for no benefit.\n>\n>Additionally, I am making it clear that there's no consensus for\n>rolling\n>out the new opcode in this way. As you say, the mechanism has issues.\n>If\n>you read the comments when I wrote my article, you can see that others\n>share the same concerns:\n>\n>https://www.reddit.com/r/Bitcoin/comments/3griiv/on_consensus_and_forks_by_mike_hearn\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/cacc6b6d/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-28T12:54:33",
                "message_text_only": ">\n> we have NO hard fork mechanism in place that isn't highly prone to\n> systemic consensus failure.\n>\n\nJust use an opcode that isn't currently defined. Done. What about that\nmechanism is prone to failure?\n\nRe: coma. No need for insults. Please read my article and address the\npoints raised there, which, by the way, do not include any mention of SPV\nwallets. Although your belief that SPV wallets are \"inherently insecure\"\nseems needlessly trollish - I certainly would disagree, but it's a\ndifferent debate.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/4e00a31e/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-29T06:17:33",
                "message_text_only": "Mike,\n\nInsults were not really my intention. Let's set aside our differences regarding SPV security and assume you understand the different implications for soft forks and hard forks.\n\nOther than the fact that doing this as a soft fork requires an extra OP_DROP, how would doing this as a hard fork make any difference to SPV clients? If, as others have suggested, all clients warn the user on unrecognized nVersion and make unknown noops nonstandard, would this satisfy your concerns? The logic seems pretty straightforward.\n\n- Eric\n\nOn September 28, 2015 5:54:33 AM PDT, Mike Hearn <hearn at vinumeris.com> wrote:\n>>\n>> we have NO hard fork mechanism in place that isn't highly prone to\n>> systemic consensus failure.\n>>\n>\n>Just use an opcode that isn't currently defined. Done. What about that\n>mechanism is prone to failure?\n>\n>Re: coma. No need for insults. Please read my article and address the\n>points raised there, which, by the way, do not include any mention of\n>SPV\n>wallets. Although your belief that SPV wallets are \"inherently\n>insecure\"\n>seems needlessly trollish - I certainly would disagree, but it's a\n>different debate.\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/f4f3138f/attachment-0001.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-29T12:02:59",
                "message_text_only": ">\n> Other than the fact that doing this as a soft fork requires an extra\n> OP_DROP, how would doing this as a hard fork make any difference to SPV\n> clients? If, as others have suggested, all clients warn the user on\n> unrecognized nVersion\n>\n\nAll clients do *not* do this. Why would they? What action would they take?\nTry and simulate a hard fork in some complicated roundabout manner? Why not\njust do the real thing and keep things simple?\n\n\n> and make unknown noops nonstandard\n>\n\nThey are already non-standard. That change was made last time I brought up\nthe problems with soft forks. It brought soft forks that use OP_NOPs a bit\ncloser to the ideal of a hard fork, but didn't go all the way. I pointed\nthat out above in my reply to Peter's mail.\n\nSo to answer your question, no, it wouldn't satisfy my concerns. My logic\nis this:\n\nHard forks - simple, well understood, SPV friendly, old full nodes do not\ncalculate incorrect ledgers whilst telling their users (via UI, RPC) that\nthey are fully synced. Emphasis on simple: simple is good.\n\nSoft forks - to get the benefits of a hard fork back requires lots of extra\ncode, silently makes IsStandard() effectively a part of the consensus rules\nwhen in the past it hasn't been, SPV unfriendly. Benefits? As far as I can\ntell, there are none.\n\nIf someone could elucidate *what* the benefits actually are, that would be\na good next step. So far everyone who tried to answer this question gave a\ncircular answer of the form \"soft forks are good because they are soft\nforks\".\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/6cc51d05/attachment.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-09-28T14:05:40",
                "message_text_only": "On Mon, Sep 28, 2015 at 12:40 PM, Mike Hearn via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> There is no consensus. Now pick. Lose the requirement that everyone agree\n> for consensus changes, and tell people you've done it. Change the spec. Or\n> do nothing.\n>\n\nOf course there is good technical consensus for CLTV by IsSuperMajority()\nin the same way as BIP66 was rolled out. I believe the only open question\nis whether we have to account for XT's use of versionbits (because the\nstandard has not been finalised). One can take the view that it is a non\nissue given the almost negligible number of BIP101 blocks, but it certainly\ngoes away if XT also merges BIP65/CLTV.\n\nAs for risks, I think we learned a lot from BIP66:\n\n1. miners are now aware of the risks of SPV mining near activation and are\nfinancially incentivised not to during that period.\n2. As for SPV wallets need to handle awareness of the new blocks. BitcoinJ\ncan play a pivotal role: as far as I am aware if we'd thought about adding\nhandling to BitcoinJ before activation rather than after activation[1][2],\nthe SPV issues would have been mitigated for the vast majority who rely on\nthe library. To me, this particular issue highlights our collective failure\nto communicate the necessity for additional SPV handling requirements and\nother preparation the ecosystem should engage in during a soft fork. This\nis something we should definitely add to the release notes for the next\nsoft fork and advertise widely. Certainly it MUST be well documented in the\nBIP65 deployment section, which it is currently not.\n\nLastly your objections came across very strongly (at least to my\nunderstanding) so I am curious: Peter stated Gavin is OK with adding CLTV\nsupport to XT, and assuming that is the case, will you object to merging it\nor similarly object to adding the necessary block handling to BitcoinJ?\n\n[1]\nhttps://github.com/bitcoinj/bitcoinj/commit/6f03669fbd6c368961a25dfd772751d1ca2a1b5b\n[2]\nhttps://github.com/bitcoinj/bitcoinj/commit/d3d11df6d71ff11cef2dc0caa8263daa641fe118\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/2d9c5e1d/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-28T14:17:06",
                "message_text_only": ">\n> 2. As for SPV wallets need to handle awareness of the new blocks.\n>\n\nThere is simply no need for any wallets to change. Making the spec a hard\nfork instead of a soft fork means all existing software does the right\nthing automatically.\n\nTo repeat, please bear in mind that bitcoinj is no longer the only SPV\nwallet implementation. BreadWallet has its own code in Objective-C and is\nthe second most popular SPV implementation (and growing). Additionally,\nbitcoinj is incorporated into lots of apps that'd have to have new versions\nreleased, some of which don't have any way to force a user to update.\n\nSo it's not just my time you'd waste: it's lots of different people's.\n\nOne thing I haven't seen yet is the justification for why a soft fork\nshould be used here. There's no requirement that it be so, and there are\nreal downsides. As Eric said, the fact that the mechanism has issues is not\nunder dispute.\n\nThe normal justification for this it's that it's forwards compatible. But\nthat's not a justification, that's a description.\n\nRe: XT, I already addressed this above.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/be6a8d45/attachment.html>"
            },
            {
                "author": "odinn",
                "date": "2015-09-28T21:12:03",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nAnd still no movement on BIP 63...\n\nhttps://bitcointalk.org/index.php?topic=1083961.20\n\nApart from that,\n\nAll my prior objections to XT still hold as expressed on this list.\nXT is not acceptable.\n\nOn the topic of consensus:\n\nReaching consensus, I hope, is something that developers can\naccomplish by refining and adjusting the BIPS and coming to agreement\nupon them.  This should be something that can be done in a few months\ntime, before the end of the year.\n\nCheers,\n\n- - O\n\nAdam Back via bitcoin-dev:\n> I wonder what Gavin's views are, he's usually constructive, and see\n> if he'll include it in XT - I think he may have said he was\n> supportive.\n> \n> The rationale for soft vs hard-forks is well known, so I wont go\n> over them.\n> \n> Adam\n> \n> \n> On 28 September 2015 at 06:48, Mike Hearn via bitcoin-dev \n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> There is no consensus on using a soft fork to deploy this\n>> feature. It will result in the same problems as all the other\n>> soft forks - SPV wallets will become less reliable during the\n>> rollout period. I am against that, as it's entirely avoidable.\n>> \n>> Make it a hard fork and my objection will be dropped.\n>> \n>> Until then, as there is no consensus, you need to do one of two\n>> things:\n>> \n>> 1) Drop the \"everyone must agree to make changes\" idea that\n>> people here like to peddle, and do it loudly, so everyone in the\n>> community is correctly informed\n>> \n>> 2) Do nothing\n>> \n>> \n>> \n>> _______________________________________________ bitcoin-dev\n>> mailing list bitcoin-dev at lists.linuxfoundation.org \n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJWCa0jAAoJEGxwq/inSG8CuCUIALiRt6cE3b+9f+l9m6aMTjIR\nvTEIM/7B4dIZW9eatXmkxyd44uz5YoN93SlZtV62c90HCqqpFRBCfyXRyXzQ11E7\n0i70or5LnWDOqrD1bSsCEdrQxPIpAQnv101UHe3iyn/uHAVBiz/HfqvGMruNt0r1\n4sMecp+LedWpy6/p9c6iMHV1rhtYRfmRfJHj+9KlSn+in5PQKx2kieWqpfqjmlNs\nJ/UNoLvRuF0YxDcqEdp2BAaI0s+NyXBo3YDi4R77U9YPRj/cYuWHh/yPKAvFW+2K\n0d9NNuKSKEY/m4uW3ghPEJL7OxlGbOoNWFS3kcKYr+BanfsPTov7yHQhBuRBRPw=\n=hd0W\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Dave Scotese",
                "date": "2015-09-28T22:16:42",
                "message_text_only": "Why are they called soft forks when they are really hidden forks?  Isn't\nthe point of a soft fork to prevent old clients from rejecting what they\ndon't have the code to validate?  That seems dangerous.\n\nnotplato\n\nOn Mon, Sep 28, 2015 at 2:12 PM, odinn via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA512\n>\n> And still no movement on BIP 63...\n>\n> https://bitcointalk.org/index.php?topic=1083961.20\n>\n> Apart from that,\n>\n> All my prior objections to XT still hold as expressed on this list.\n> XT is not acceptable.\n>\n> On the topic of consensus:\n>\n> Reaching consensus, I hope, is something that developers can\n> accomplish by refining and adjusting the BIPS and coming to agreement\n> upon them.  This should be something that can be done in a few months\n> time, before the end of the year.\n>\n> Cheers,\n>\n> - - O\n>\n> Adam Back via bitcoin-dev:\n> > I wonder what Gavin's views are, he's usually constructive, and see\n> > if he'll include it in XT - I think he may have said he was\n> > supportive.\n> >\n> > The rationale for soft vs hard-forks is well known, so I wont go\n> > over them.\n> >\n> > Adam\n> >\n> >\n> > On 28 September 2015 at 06:48, Mike Hearn via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> There is no consensus on using a soft fork to deploy this\n> >> feature. It will result in the same problems as all the other\n> >> soft forks - SPV wallets will become less reliable during the\n> >> rollout period. I am against that, as it's entirely avoidable.\n> >>\n> >> Make it a hard fork and my objection will be dropped.\n> >>\n> >> Until then, as there is no consensus, you need to do one of two\n> >> things:\n> >>\n> >> 1) Drop the \"everyone must agree to make changes\" idea that\n> >> people here like to peddle, and do it loudly, so everyone in the\n> >> community is correctly informed\n> >>\n> >> 2) Do nothing\n> >>\n> >>\n> >>\n> >> _______________________________________________ bitcoin-dev\n> >> mailing list bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >>\n> > _______________________________________________ bitcoin-dev mailing\n> > list bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n>\n> - --\n> http://abis.io ~\n> \"a protocol concept to enable decentralization\n> and expansion of a giving economy, and a new social good\"\n> https://keybase.io/odinn\n> -----BEGIN PGP SIGNATURE-----\n>\n> iQEcBAEBCgAGBQJWCa0jAAoJEGxwq/inSG8CuCUIALiRt6cE3b+9f+l9m6aMTjIR\n> vTEIM/7B4dIZW9eatXmkxyd44uz5YoN93SlZtV62c90HCqqpFRBCfyXRyXzQ11E7\n> 0i70or5LnWDOqrD1bSsCEdrQxPIpAQnv101UHe3iyn/uHAVBiz/HfqvGMruNt0r1\n> 4sMecp+LedWpy6/p9c6iMHV1rhtYRfmRfJHj+9KlSn+in5PQKx2kieWqpfqjmlNs\n> J/UNoLvRuF0YxDcqEdp2BAaI0s+NyXBo3YDi4R77U9YPRj/cYuWHh/yPKAvFW+2K\n> 0d9NNuKSKEY/m4uW3ghPEJL7OxlGbOoNWFS3kcKYr+BanfsPTov7yHQhBuRBRPw=\n> =hd0W\n> -----END PGP SIGNATURE-----\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/fd9d5a38/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-28T11:04:49",
                "message_text_only": "My initial reaction is just HUH?!?!? Is this some sophisticated form of humor I'm just not getting?\n\nOn September 28, 2015 3:48:57 AM PDT, Mike Hearn via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>There is *no* consensus on using a soft fork to deploy this feature. It\n>will result in the same problems as all the other soft forks - SPV\n>wallets\n>will become less reliable during the rollout period. I am against that,\n>as\n>it's entirely avoidable.\n>\n>Make it a hard fork and my objection will be dropped.\n>\n>Until then, as there is no consensus, you need to do one of two things:\n>\n>1) Drop the \"everyone must agree to make changes\" idea that people here\n>like to peddle, and do it loudly, so everyone in the community is\n>correctly\n>informed\n>\n>2) Do nothing\n>\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/0eabc6d7/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-09-28T12:47:25",
                "message_text_only": "On Mon, Sep 28, 2015 at 11:48 AM, Mike Hearn via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> 1) Drop the \"everyone must agree to make changes\" idea that people here\n> like to peddle, and do it loudly, so everyone in the community is correctly\n> informed\n>\n\nThere never was a rule that soft-forks require total consensus.  It is\ndesirable but not mandatory.\n\nA majority of miners can inherently implement a soft fork against the\nwishes of the rest of the users.\n\nMerchant/exchange/user checkpointing is the defense and therefore is a\nperfectly valid response to miners taking such an action.  If a soft fork\nis opposed by a large section of the users, then threatening (and\nimplementing) a checkpoint is the correct response.\n\nNo group can force through a hard fork, it inherently requires buy-in from\na large portion of the userbase.  That is where the \"total consensus\"\nrequirement comes from.  Naturally, absolute total consensus isn't actually\nrequired but you do need very large consensus and also consensus across the\nvarious sub-groups.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/0a0f7108/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-09-28T13:01:02",
                "message_text_only": "I think three things need to happen:\n\n1) Stop pretending that \"everyone must agree to make consensus rule\nchanges.\" \"Rough consensus\" is what we've always gone with, and is good\nenough.\n\n2) Mr. Todd (or somebody) needs to write up a risk/benefit security\ntradeoff analysis doo-hickey document and publish it. I'm reasonably\nconfident that the risks to SPV nodes can be mitigated (e.g. by deploying\nmempool-only first, before the soft fork rolls out), but as somebody who\nhas only been moderately paying attention, BETTER COMMUNICATION is needed.\nWhat should SPV wallet authors be doing right now, if anything? Once the\nsoft fork starts to roll out or activates, what do miners need to be aware\nof? SPV wallet authors?\n\n3) I agree CLTV is ready to roll out, that there is rough consensus a soft\nfork is a reasonable way to do it, and that it should happen ASAP.\n\nOn Mon, Sep 28, 2015 at 6:48 AM, Mike Hearn via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> There is *no* consensus on using a soft fork to deploy this feature. It\n> will result in the same problems as all the other soft forks - SPV wallets\n> will become less reliable during the rollout period. I am against that, as\n> it's entirely avoidable.\n>\n> Make it a hard fork and my objection will be dropped.\n>\n> Until then, as there is no consensus, you need to do one of two things:\n>\n> 1) Drop the \"everyone must agree to make changes\" idea that people here\n> like to peddle, and do it loudly, so everyone in the community is correctly\n> informed\n>\n> 2) Do nothing\n>\n>\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/066eb127/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-09-28T13:28:14",
                "message_text_only": "On Mon, Sep 28, 2015 at 09:01:02AM -0400, Gavin Andresen wrote:\n> I think three things need to happen:\n> \n> 1) Stop pretending that \"everyone must agree to make consensus rule\n> changes.\" \"Rough consensus\" is what we've always gone with, and is good\n> enough.\n> \n> 2) Mr. Todd (or somebody) needs to write up a risk/benefit security\n> tradeoff analysis doo-hickey document and publish it. I'm reasonably\n> confident that the risks to SPV nodes can be mitigated (e.g. by deploying\n> mempool-only first, before the soft fork rolls out), but as somebody who\n> has only been moderately paying attention, BETTER COMMUNICATION is needed.\n> What should SPV wallet authors be doing right now, if anything? Once the\n> soft fork starts to roll out or activates, what do miners need to be aware\n> of? SPV wallet authors?\n\nDo you have such a document for your BIP101? That would save me a lot of\ntime, and the need for that kind of document is significantly higher\nwith BIP101 anyway.\n\n\nRe: mempool, CLTV-using transactions are non-standard and are not\nrelayed in all Bitcoin Core releases. (see my pull-req #5000 -\nDiscourage NOPs reserved for soft-fork upgrades - for why) I believe\nthat meets your suggestion of deploying mempool-only first.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000032420ad2987adc954df855f9ae10cf608e911b431f640e0\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/24bdf9f3/attachment.sig>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-09-28T13:43:42",
                "message_text_only": "On Mon, Sep 28, 2015 at 9:28 AM, Peter Todd <pete at petertodd.org> wrote:\n\n> > 2) Mr. Todd (or somebody) needs to write up a risk/benefit security\n> > tradeoff analysis doo-hickey document and publish it. I'm reasonably\n> > confident that the risks to SPV nodes can be mitigated (e.g. by deploying\n> > mempool-only first, before the soft fork rolls out), but as somebody who\n> > has only been moderately paying attention, BETTER COMMUNICATION is\n> needed.\n> > What should SPV wallet authors be doing right now, if anything? Once the\n> > soft fork starts to roll out or activates, what do miners need to be\n> aware\n> > of? SPV wallet authors?\n>\n> Do you have such a document for your BIP101? That would save me a lot of\n> time, and the need for that kind of document is significantly higher\n> with BIP101 anyway.\n>\n\nHmmm?  When I asked YOU for that kind of security analysis document, you\nsaid you'd see if any of your clients would be willing to let you publish\none you'd done in the past. Then I never heard back from you.\n\nSo, no, I don't have one for BIP 101, but unless you were lying and just\ntrying to add Yet Another Hoop for BIP 101 to jump through, you should\nalready have something to start from.\n\nRE: mempool only: yes, pull-req 5000 satisfies (and that's what I was\nthinking of). There should be a nice, readable blog post explaining to\nother full node implementors and wallet implementors why that was done for\nCore and what they should do to follow 'best practices to be soft-fork\nready.'\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/7a494177/attachment-0001.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-09-28T14:14:41",
                "message_text_only": "On Mon, Sep 28, 2015 at 09:43:42AM -0400, Gavin Andresen wrote:\n> On Mon, Sep 28, 2015 at 9:28 AM, Peter Todd <pete at petertodd.org> wrote:\n> \n> > > 2) Mr. Todd (or somebody) needs to write up a risk/benefit security\n> > > tradeoff analysis doo-hickey document and publish it. I'm reasonably\n> > > confident that the risks to SPV nodes can be mitigated (e.g. by deploying\n> > > mempool-only first, before the soft fork rolls out), but as somebody who\n> > > has only been moderately paying attention, BETTER COMMUNICATION is\n> > needed.\n> > > What should SPV wallet authors be doing right now, if anything? Once the\n> > > soft fork starts to roll out or activates, what do miners need to be\n> > aware\n> > > of? SPV wallet authors?\n> >\n> > Do you have such a document for your BIP101? That would save me a lot of\n> > time, and the need for that kind of document is significantly higher\n> > with BIP101 anyway.\n> >\n> \n> Hmmm?  When I asked YOU for that kind of security analysis document, you\n> said you'd see if any of your clients would be willing to let you publish\n> one you'd done in the past. Then I never heard back from you.\n\nI don't remember what you are referring to at all. Was this a private\nemail? IRC chat? In person discussion?\n\n> So, no, I don't have one for BIP 101, but unless you were lying and just\n> trying to add Yet Another Hoop for BIP 101 to jump through, you should\n> already have something to start from.\n\n\"unless you were lying\"\n\nPlease keep the discussion on the development mailing list civil and\nrespectful.\n\n> RE: mempool only: yes, pull-req 5000 satisfies (and that's what I was\n> thinking of). There should be a nice, readable blog post explaining to\n> other full node implementors and wallet implementors why that was done for\n> Core and what they should do to follow 'best practices to be soft-fork\n> ready.'\n\nActually, that sounds like the kind of thing that should be in the\nbitcoin.org developer documentation; IMO for the audience of competent\nfull node developers the comments in the pull-req code itself and\nassociated discussion covers everything they need to know. Without that\nbackground though, this is something that'd fit well in the category of\ngeneral education to get new developers to a good state of competence.\n\nAs for wallets specifically, that's pretty much all covered by SPV\nwallets based on bitcoinj, and Mike Hearn has different views on the\nsubject which need to be resolved first.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000102f6eb0772c453a0ad0e10a6f720f41a7f008a7d329ef66\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/17258ef8/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-09-28T13:21:27",
                "message_text_only": "On Mon, Sep 28, 2015 at 12:48:57PM +0200, Mike Hearn wrote:\n> There is *no* consensus on using a soft fork to deploy this feature. It\n> will result in the same problems as all the other soft forks - SPV wallets\n> will become less reliable during the rollout period. I am against that, as\n> it's entirely avoidable.\n> \n> Make it a hard fork and my objection will be dropped.\n> \n> Until then, as there is no consensus, you need to do one of two things:\n> \n> 1) Drop the \"everyone must agree to make changes\" idea that people here\n> like to peddle, and do it loudly, so everyone in the community is correctly\n> informed\n> \n> 2) Do nothing\n\nHmm? You didn't quote any of my email, so I'll remind you what I did say\nwe had consensus about:\n\n    2) We have consensus on the semantics of the CLTV opcode\n\nand\n\n    3) We have consensus that Bitcoin should adopt CLTV\n\n    The broad peer review and discussion that got #6124 merged is a clear\n    sign that we expect CLTV to be eventually adopted.  __The question isn't\n    if CLTV should be added to the Bitcoin protocol, but rather when.__\n\n(emphasis mine)\n\nBoth those statements of consensus are *not* about how CLTV is to be\ndeployed. I did discuss deployment later:\n\n    6) We have the __necessary consensus__ to deploy CLTV via IsSuperMajority()\n\n    The various \"nVersion bits\" proposals - which I am a co-author of - have\n    the primary advantage of being able to cleanly deal with the case where\n    a soft-fork fails to get adopted. However, we do have broad consensus,\n    including across all sides of the blocksize debate, that CLTV should be\n    adopted. __The risk of CLTV failing to get miner adoption, and thus\n    blocking other soft-forks, is very low.__\n\nI probably could have worded this section a bit more clearly; when I say\n\"necessary consensus\" I'm referring to the consensus required for a\nsoft-fork deployment. At minimum a simple majority of hashing power -\nyour approval isn't required.\n\nFor a safe soft-fork, we'd like a super majority of miners to be on\nboard. For a IsSuperMajority() soft-fork - as opposed to nVersion bits -\nwe also need the probability of the soft-fork being rejected to be very\nlow. To achieve that, having consensus that CLTV is a good idea is the\nbest situation to be in. But that's not to say that a few dissenting\nvoices should be seen as a blocker to progress - rather is just makes\nthe deployment a bit more risky, being a sign that the consensus may\nchange in the future, with the soft-fork being later rejected. For\nexample strong objections by a respected Bitcoin developer who has made\nsignificant contributions to the consensus codebase and protocol\ndevelopment would be a strong sign that a IsSuperMajority() soft-fork\nmight fail, and deployment via nVersion bits is probably a better\napproach. Fortunately we're not in that situation.\n\nHard-forks are a very different situation, with significantly more need\nfor very broad consensus, but that's been well discussed elsewhere.\n\n\nI have three questions to you:\n\n1) Do you agree that CLTV should be added to the Bitcoin protocol?\n\nIgnoring the question how exactly it is added, hard-fork or soft-fork.\n\n\n2) Will you add a IsSuperMajority() CLTV soft-fork to Bitcoin XT if it\n   is added to Bitcoin Core?\n\nIf you refuse to do this the risk of the soft-fork is increased a bit,\nalthough miner support for XT has remained extremely low, and the 95%\nswitch-over threshold has a significant margin for error. (there's a 75%\nthreshold to consider as well, however as XT has adopted my pull-req\n#5000 - Discourage NOPs reserved for soft-fork upgrades - those miners\nwill only produce valid blocks under CLTV rules)\n\n\n3) Will you add soft-fork detection to bitcoinj, to allow SPV clients to\n   detect advertised soft-forks and correctly handle them?\n\nNotably, if you do this your objections against soft-forks will be met,\nas the behavior of a SPV client with soft-fork detection during a\nsoft-fork will be identical to that client during a hard-fork. In\nparticular, the SPV client will correct reject invalid blocks, and\ncontinue to follow only the longest valid chain. (modulo unadvertised\nforks of course, an inherently unavoidable problem with the SPV security\nmodel) Secondly, that code should also detect forks it doesn't know\nabout - as is done in Bitcoin Core already - and warn the user.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000d74f5def1087f3ec1571cb468e471e71f96063253988c78\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/8afec924/attachment-0001.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-28T13:41:56",
                "message_text_only": ">\n> 1) Do you agree that CLTV should be added to the Bitcoin protocol?\n>\n> Ignoring the question how exactly it is added, hard-fork or soft-fork.\n>\n\nThe opcode definition seems OK.\n\n\n> 2) Will you add a IsSuperMajority() CLTV soft-fork to Bitcoin XT if it\n>    is added to Bitcoin Core?\n>\n\nYes. It might be worth putting the version bit change behind a command line\nflag though: the BIP, as written, has problems (with deployment).\n\n\n> 3) Will you add soft-fork detection to bitcoinj, to allow SPV clients to\n\n   detect advertised soft-forks and correctly handle them?\n>\n\nI'd really hate to do that. It'd be a Rube Goldberg machine:\n\n   https://krypt3ia.files.wordpress.com/2011/11/rube.jpg\n\nThere's no really good way to do what you propose, and we already have a\nperfectly workable mechanism to tell SPV clients about chain forks: the\nblock chain itself. This has the advantage of being already implemented,\nalready deployed, and it works correctly.\n\nAttempting to strap a different mechanism on top to try and make soft forks\nmore like hard forks would be a large and pointless waste of people's time\nand effort, not just mine (bitcoinj is not the only widely used SPV\nimplementation nowadays). You may as well go straight to the correct\noutcome instead of trying to simulate it with ever more complex mechanisms.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/2f74bd22/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-09-28T14:29:53",
                "message_text_only": "On Mon, Sep 28, 2015 at 03:41:56PM +0200, Mike Hearn wrote:\n> >\n> > 1) Do you agree that CLTV should be added to the Bitcoin protocol?\n> >\n> > Ignoring the question how exactly it is added, hard-fork or soft-fork.\n> >\n> \n> The opcode definition seems OK.\n\nGood!\n\n> > 2) Will you add a IsSuperMajority() CLTV soft-fork to Bitcoin XT if it\n> >    is added to Bitcoin Core?\n> >\n> \n> Yes. It might be worth putting the version bit change behind a command line\n> flag though: the BIP, as written, has problems (with deployment).\n\nCould you elaborate on what exatly you mean by this.\n\n> > 3) Will you add soft-fork detection to bitcoinj, to allow SPV clients to\n> \n>    detect advertised soft-forks and correctly handle them?\n> >\n> \n> I'd really hate to do that. It'd be a Rube Goldberg machine:\n> \n>    https://krypt3ia.files.wordpress.com/2011/11/rube.jpg\n> \n> There's no really good way to do what you propose, and we already have a\n> perfectly workable mechanism to tell SPV clients about chain forks: the\n> block chain itself. This has the advantage of being already implemented,\n> already deployed, and it works correctly.\n\nSPV wallets can't detect hard-forks, so in both cases you will have\ninvalid blocks be accepted by SPV clients; there's no deployment\nscenario for either hard or soft forks that guarantees all miners adopt\na fork.\n\nWhat does prevent invalid blocks being accepted by SPV clients is\nchecking the block nVersion field and applying forking logic. Of course,\nthat only works for advertised forks, but again, that's equally true for\nsoft and hard forks.\n\n> Attempting to strap a different mechanism on top to try and make soft forks\n> more like hard forks would be a large and pointless waste of people's time\n> and effort, not just mine (bitcoinj is not the only widely used SPV\n> implementation nowadays). You may as well go straight to the correct\n> outcome instead of trying to simulate it with ever more complex mechanisms.\n\nAgain, in neither case do you get the \"correct outcome\" of SPV clients\naccepting no invalid blocks without nVersion field checking.\n\nHowever, in the hard-fork case, because the non-adopting miners reject\nthe fork, they build a chain which could be used to attack SPV clients\nwith false confirmations by sybil attacking those clients. In the\nsoft-fork case, the non-adopting miners keep accepting the longer chain\nbuilt by the adopting miners, preventing the creation of a chain that\ncould be used to attack SPV miners.\n\n\nBTW, what's the other widely used SPV implementation you're thinking of?\nI'll contact them directly and help them implement proper SPV fork\nprotections if they haven't already; if bitcoinj is unwilling to do this\nat least we could have an alternative implementation that does.\n(equally, if anyone wants to fork bitcoinj and correct this flaw I'd be\nhappy to help advise)\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000ca626374f25dadbbb9245e60563a4d876f3c73070ad3849\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/f7a49dbf/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-28T14:33:23",
                "message_text_only": ">\n> SPV wallets can't detect hard-forks\n\n\nThey don't have to - they pick the highest work chain. Any miner who hasn't\nupgraded makes blocks on the shorter chain that are then ignored (or\nrather, stored for future reorgs). After the fork point, there won't be any\nblocks in the main chain that violate the rules and end up being doomed to\nbeing orphaned, which is the underlying problem.\n\nAnd I think you know this already. There is no \"flaw\" in bitcoinj in this\nrespect. It works exactly as it was designed to work.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/10e73edb/attachment-0001.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-09-28T14:43:18",
                "message_text_only": "On Mon, Sep 28, 2015 at 04:33:23PM +0200, Mike Hearn wrote:\n> >\n> > SPV wallets can't detect hard-forks\n> \n> \n> They don't have to - they pick the highest work chain. Any miner who hasn't\n> upgraded makes blocks on the shorter chain that are then ignored (or\n> rather, stored for future reorgs). After the fork point, there won't be any\n> blocks in the main chain that violate the rules and end up being doomed to\n> being orphaned, which is the underlying problem.\n> \n> And I think you know this already. There is no \"flaw\" in bitcoinj in this\n> respect. It works exactly as it was designed to work.\n\nOk, so again, if that's your security criteria, what's the issue with\nsoft-forks? With soft-forks, the result of a SPV wallet following the\nhighest work chain is the same: eventually invalid blocks are reorged\nout.\n\nHowever, because soft-forks make it less likely that a long invalid\nchain will be generated, an attacker sybil attacking your SPV wallet has\na much harder time tricking it into accepting a transaction. (they might\nget one or two confirmations, rather than dozens)\n\nWhat's the scenario where soft-forks are worse than hard-forks from a\nSPV wallet's perspective?\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000368227ec1de9c27c14d23cb7be9e9f38c0082db79a87c49\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/2e7816df/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-28T14:51:22",
                "message_text_only": ">\n> Ok, so again, if that's your security criteria, what's the issue\n> with soft-forks?\n\n\nPlease read my article as it's all explained there.\n\nBut to reiterate: the risk is that miners will build invalid blocks on top\nof the best work chain, instead of an ignored lower work side chain. This\nopens users to payment fraud. With a hard fork, all the blocks by miners\nthat aren't checking all the rules anymore get neatly collected together on\na side chain after the split, and wallets all know how to ignore that chain.\n\nYes, you made OP_NOPs be non-standard. So out of the box, miners won't\ncreate invalid blocks, as long as they're running Core past that version.\nBut this makes the IsStandard function very much like a part of the\nconsensus rules, as bypassing it can result in invalid blocks being\ncreated. Miners have always understood that they can modify this function,\nor even bypass it entirely, without affecting the validity of their blocks.\nAnd some miners do exactly that.\n\nSo I'll repeat the question that I posed before - given that there are\nclear, explicit downsides, what is the purpose of doing things this way?\nWhere is the gain for ordinary Bitcoin users?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/7c9e36e4/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-09-28T15:05:43",
                "message_text_only": "On Mon, Sep 28, 2015 at 04:51:22PM +0200, Mike Hearn wrote:\n> >\n> > Ok, so again, if that's your security criteria, what's the issue\n> > with soft-forks?\n> \n> \n> Please read my article as it's all explained there.\n\nI have read your article. In fact we reviewed it at a NY BitDevs meetup\nthat I attended.\n\n> But to reiterate: the risk is that miners will build invalid blocks on top\n> of the best work chain, instead of an ignored lower work side chain. This\n> opens users to payment fraud. With a hard fork, all the blocks by miners\n> that aren't checking all the rules anymore get neatly collected together on\n> a side chain after the split, and wallets all know how to ignore that chain.\n\nCan you explain exactly how you think wallets will \"know\" how to ignore\nthe invalid chain?\n\nWith an advertised soft-fork, e.g. the IsSuperMajority() mechanism,\nignoring the invalid chain is easy: use nVersion to detect invalid\nblocks when you know what soft-forks are coming up, and if presented\nwith an unknown - but advertised - soft-fork at minimum loudly warn the\nuser. In the case of a hard-fork identical logic can be used. (BIP101\nbeing an example of a hard-fork triggered in a way that can be detected\nby SPV clients, both explicitly (BIP101 specific) and implicitly\n(general unknown block nVersion warnings))\n\n> Yes, you made OP_NOPs be non-standard. So out of the box, miners won't\n> create invalid blocks, as long as they're running Core past that version.\n> But this makes the IsStandard function very much like a part of the\n> consensus rules, as bypassing it can result in invalid blocks being\n> created.\n\nHow so? Miners can always choose to create invalid blocks, thus\nattacking SPV wallets; my statement with regard to pull-req #5000 comes\nfrom a risk-based approach, knowing that every invalid block is\nexpensive and the new concern created by a soft-fork is whether or not\nminers will create them accidentally; miners can always create invalid\nblocks delibrately.\n\n> Miners have always understood that they can modify this function,\n> or even bypass it entirely, without affecting the validity of their blocks.\n> And some miners do exactly that.\n\nThat's incorrect: Miners bypassing IsStandard() risk creating invalid\nblocks in the event of a soft-fork. Equally, we design soft-forks to\ntake advantage of this.\n\n> So I'll repeat the question that I posed before - given that there are\n> clear, explicit downsides, what is the purpose of doing things this way?\n> Where is the gain for ordinary Bitcoin users?\n\nWe seem to be in strong disagreement about which option has \"clear,\nexplicit downsides\"\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000006f2abe95e361b73289e4a79ba3124801896f6b7dc8d977\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/36509171/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-28T15:38:28",
                "message_text_only": ">\n> Can you explain exactly how you think wallets will \"know\" how to ignore\n> the invalid chain?\n>\n\nI'm confused - I already said this. For a fork to work, hard or soft, there\nmust be support from a majority of the hash power.\n\nTherefore, the usual SPV technique of following the highest work chain\nresults in ignoring the minority chain produced by the hard fork.\n\nBIP 101 is SPV friendly because the wallets would simply follow the 75%\nchain and never even be aware anything has changed. It's backwards\ncompatible with them in this respect: they already know how to ignore the\nno-bigger-blocks fork that'd be created if some miners didn't upgrade\nduring the grace period.\n\nMy point about IsStandard is that miners can and do bypass it, without\nexpecting that to carry financial consequences or lower the security of\nother users. By making it so a block which includes non-standard\ntransactions can end up being seen as invalid, you are increasing the risk\nof accidents that carry financial consequences.\n\nThat's incorrect: Miners bypassing IsStandard() risk creating invalid\n> blocks in the event of a soft-fork. Equally, we design soft-forks to\n> take advantage of this.\n>\n\nGah. You repeated what I just said. Yes, I know miners face that risk, my\npoint is that they do NOT face such a risk when there's no soft fork in\naction and have historically NOT faced that risk at all, hence the\nwidespread practice of bypassing or modifying this function.\n\nAll this approach does is make changing IsStandard() the same as changing\nAcceptBlock(), except without the advantage of telling anyone about it.\n\n\n> > So I'll repeat the question that I posed before - given that there are\n> > clear, explicit downsides, what is the purpose of doing things this way?\n> > Where is the gain for ordinary Bitcoin users?\n>\n> We seem to be in strong disagreement about which option has \"clear,\n> explicit downsides\"\n\n\nObviously. So please enlighten me.\n\nHow do ordinary Bitcoin users benefit from this rollout strategy? Put\nsimply, what is the point of this whole complex soft fork endeavour?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/37024596/attachment.html>"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-09-28T16:52:51",
                "message_text_only": "Mike Hearn via bitcoin-dev \u65bc 2015-09-28 11:38 \u5beb\u5230:\n\n> My point about IsStandard is that miners can and do bypass it,\n> without expecting that to carry financial consequences or lower the\n> security of other users. By making it so a block which includes\n> non-standard transactions can end up being seen as invalid, you are\n> increasing the risk of accidents that carry financial consequences.\n\nBypassing IsStandard should be considered as an \"expert mode\". The \nmessage should be \"don't bypass it unless you understand what you are \ndoing\".\n\nBy the way, miners are PAID to protect the network. It is their greatest \nresponsibility to follow the development and keep their software up to \ndate.\n\n\n\n> How do ordinary Bitcoin users benefit from this rollout strategy? Put\n> simply, what is the point of this whole complex soft fork endeavour?\n\nLet me try to answer this question. Softfork is beneficial to non-mining \nfull nodes as they will follow the majority chain. In the case of a \nhardfork (e.g. BIP101), non-upgrading full nodes will insist to follow \nthe minority chain. (unless you believe that all non-miner should use an \nSPV client)\n\nPut it in a different angle. In a softfork, the new fork is a persistent \n95% attack against the old fork, which will force all in-cooperating \nminers to join (or leave). In a hardfork, however, there is no mechanism \nto stop the old fork and we may have 2 chains co-exist for a long time.\n\nAlthough it is not mentioned in the whitepaper, the ability to softfork \nis a feature of Bitcoin. Otherwise, we won't have these OP_NOPs and the \noriginal OP_RETURN."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-28T17:14:15",
                "message_text_only": ">\n> Let me try to answer this question. Softfork is beneficial to non-mining\n> full nodes as they will follow the majority chain.\n\n\nThat is not a benefit. That is a description of what the software will do,\nbut not why you would want it.\n\nIn case this seems like a pedantic point, consider the consequences of\nfollowing a chain you aren't checking properly. You get SPV level security\nand might calculate a corrupted ledger.\n\nIn the case of P2SH, I could make a transaction that spends someone elses\nmoney to myself. In the case of CLTV, I could ignore the locktime\nrequirement.\n\nNow yes, eventually, the miner majority will correct and uncorrupt your\nledger for you. But by then it might be too late, you may have already\nacted upon the incorrect data by e.g. selling me lots of stuff that I paid\nfor with somebody else's coins. If you don't care about that risk, hey,\nswitch to an SPV wallet and save yourself a lot of disk space.\n\n\n> In a hardfork, however, there is no mechanism to stop the old fork and we\n> may have 2 chains co-exist for a long time.\n>\n\nThere isn't any difference in how long the divergent state exists for. That\ndepends only on how fast people upgrade, which is unaffected by the rollout\nstrategy used.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150928/345ac195/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-28T23:17:15",
                "message_text_only": "On Sep 28, 2015 7:14 PM, \"Mike Hearn via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n>> In a hardfork, however, there is no mechanism to stop the old fork and\nwe may have 2 chains co-exist for a long time.\n>\n>\n> There isn't any difference in how long the divergent state exists for.\nThat depends only on how fast people upgrade, which is unaffected by the\nrollout strategy used.\n>\n\nYes, there is a difference. Assuming the hashrate majority upgrades, in the\ncase of a softfork non-upgraded miners will try to build on top of the\nlongest chain (the upgraded one) but their blocks will get consistently\norphaned for having a too old block version (and if they just increment the\nversion without implementing the new restrictions, then their blocks will\nbe orphaned when they fail to enforce the new restrictions). In the case of\na hardfork, the non-upgraded miners will keep on building their own longest\nvalid chain (the upgraded chain is not valid in their eyes), potentially\nforever.\nThat's not to say softforks are always preferrable. There's cases when a\nfeature can be implemented as a softfork or a hardfork, but the softfork\nsolution is clearly inferior and introduces technical debt.\nIn those cases I prefer a hardfork, but this is not one of those cases.\n\nIn any case, maybe you want to provide some feedback to bip99, which is\nabout possible consensus rule changes scenarios and a recommended\ndeployment path for each of them (softforks and hardforks are subdivided in\nseveral types). This discussion about the general desirability of softforks\nseems offtopic for the concrete cltv deployment discussion, which assumes\nsoftforks as deployment mechanism (just like bip66 assumed it).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/66e45ae4/attachment-0001.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-29T12:07:24",
                "message_text_only": "Hi Jorge,\n\nYes, there is a difference. Assuming the hashrate majority upgrades, in the\n> case of a softfork [snip] ...... In the case of a hardfork [snip]\n>\nYes, I know what the difference between them is at a technical level. You\ndidn't explain why this would make any difference to how fast miners\nupgrade. The amount of money they lose in both cases is identical: they are\nequally incentivised to upgrade with both fork types.\n\nAdditionally, you say in a hard fork the other chain may \"continue\nforever\". Why do you think this is not true for miners building invalid\nblocks on top of the main chain? Why would that not continue forever?\n\nThere just isn't any difference between the two fork types in terms of how\nfast miners would upgrade. Heck if anything, a hard fork should promote\nfaster upgrades, because if a miner isn't paying attention to their\ndebug.log they might miss the warnings. A soft fork would then look\nidentical to a run of really bad luck, which can legitimately happen from\ntime to time. A hard fork results in your node having a different height to\neveryone else, which is easily detectable by just checking a block explorer.\n\n> This discussion about the general desirability of softforks seems offtopic\n> for the concrete cltv deployment discussion, which assumes softforks as\n> deployment mechanism (just like bip66 assumed it).\n>\nIsn't that circular? This thread is about deployment of CLTV, but the BIP\nassumes a particular mechanism, so pointing out problems with it is off\ntopic? Why have a thread at all?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/09aeae3b/attachment.html>"
            },
            {
                "author": "Jonathan Toomim (Toomim Bros)",
                "date": "2015-09-29T13:30:41",
                "message_text_only": "On Sep 28, 2015, at 7:43 AM, Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> \n> Ok, so again, if that's your security criteria, what's the issue with\n> soft-forks? With soft-forks, the result of a SPV wallet following the\n> highest work chain is the same: eventually invalid blocks are reorged\n> out.\n> \n> However, because soft-forks make it less likely that a long invalid\n> chain will be generated, an attacker sybil attacking your SPV wallet has\n> a much harder time tricking it into accepting a transaction. (they might\n> get one or two confirmations, rather than dozens)\n> \n> What's the scenario where soft-forks are worse than hard-forks from a\n> SPV wallet's perspective?\n\n\nI don't think this was addressed clearly, so here's my attempt.\n\nWith a soft fork, miners who have not upgraded append their blocks to the longest block chain. To SPV clients and to old fully-validating clients, it appears to be a valid block that inevitably gets orphaned. SPV clients will be tricked to follow these blocks every time they appear, since every time they appear they will have a PoW advantage for a few minutes. SPV clients will appear to behave normally, and will continue to show new transactions and get confirmations in a timely fashion. However, they will be systematically susceptible to attack from double-spends that attempt to spend funds in a way that the upgraded nodes will reject. These transactions will appear to get 1 confirmation, then regress to zero conf, every single time. These attacks can be performed for as long as someone mines with the old version. If an attacker thinks he could get more than 25 BTC of double-spends per block, he might even choose to mine with the obsolete version in order to get predictable orphans and to trick SPV clients and fully verifying wallets on the old version.\n\nWith a hard fork, miners who have not upgraded will append their blocks on the shorter fork. SPV clients will ignore this fork unless Sybil attacked. If an SPV node only connects to one full node server, that's equivalent to a Sybil attack.  In that case, transactions on the long chain will often not be present on the short chain due to its shortness. Confirmations will be slow, and will be shown to be very different from what's shown on block explorers. Displayed transaction dates and times will be off, when they show up at all. Any transactions that have been contaminated by recent mining revenue will not show up at all. SPV client users will probably notice something is wrong. If the SPV client connects to several full nodes, then this should rarely happen. For example, if 5% of full nodes are still on the old version, and an SPV wallet connects to 2 nodes at a time, there is a 0.05**2 = 0.25% chance. If the SPV client has headers cached on disk from a previous connection to the longer chain, then that chance effectively drops to zero. As a further benefit to hard forks, anybody who is ideologically opposed to the change can continue to use the old version successfully, as long as there are enough miners to keep the fork alive.\n\nIn short: soft forks mean frequent predictable and manipulable orphan blocks that SPV clients will always follow, with transactions that get confirmed once and then perma-orphaned. Hard forks mean that SPV clients will almost always work flawlessly, and will occasionally give very strange and noticeably wrong results. For fully-verifying nodes, soft forks make old versions insecure, but hard forks allow new and old versions to operate in parallel.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/22615768/attachment.sig>"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-09-29T15:59:05",
                "message_text_only": "Jonathan Toomim (Toomim Bros) via bitcoin-dev \u65bc 2015-09-29 09:30 \u5beb\u5230:\n> SPV clients will appear to behave normally, and\n> will continue to show new transactions and get confirmations in a\n> timely fashion. However, they will be systematically susceptible to\n> attack from double-spends that attempt to spend funds in a way that\n> the upgraded nodes will reject. These transactions will appear to get\n> 1 confirmation, then regress to zero conf, every single time. These\n> attacks can be performed for as long as someone mines with the old\n> version.\n\n1. Who told you to accept 1-confirmation tx? Satoshi recommended 6 \nconfirmations in the whitepaper. Take your own risk if you do not follow \nhis advice.\n\n2. This is true only if your SPV client naively follows the longest \nchain without even looking at the block version. This might be good \nenough for the 1st generation SPV client, but future generations should \nat least have basic fraud detecting mechanism.\n\n\n\n> If an attacker thinks he could get more than 25 BTC of\n> double-spends per block, he might even choose to mine with the\n> obsolete version in order to get predictable orphans and to trick SPV\n> clients and fully verifying wallets on the old version.\n\nThis point is totally irrelevant. No matter there is a softfork or not, \nSPV users are always vulnerable to such double-spending attack if they \nblindly follow the longest chain AND accept 1-confirmation. The fiat \ncurrency system might be safer for them."
            },
            {
                "author": "odinn",
                "date": "2015-09-29T19:54:41",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nHello, (see my remarks below)\n\njl2012 via bitcoin-dev:\n> Jonathan Toomim (Toomim Bros) via bitcoin-dev \u65bc 2015-09-29 09:30 \u5beb\n> \u5230:\n>> SPV clients will appear to behave normally, and will continue to\n>> show new transactions and get confirmations in a timely fashion.\n>> However, they will be systematically susceptible to attack from\n>> double-spends that attempt to spend funds in a way that the\n>> upgraded nodes will reject. These transactions will appear to\n>> get 1 confirmation, then regress to zero conf, every single time.\n>> These attacks can be performed for as long as someone mines with\n>> the old version.\n> \n> 1. Who told you to accept 1-confirmation tx? Satoshi recommended 6 \n> confirmations in the whitepaper. Take your own risk if you do not\n> follow his advice.\n> \n> 2. This is true only if your SPV client naively follows the\n> longest chain without even looking at the block version. This might\n> be good enough for the 1st generation SPV client, but future\n> generations should at least have basic fraud detecting mechanism.\n> \n> \n\nRegarding \"basic fraud detecting mechanism\" of which you speak, being\nas I personally enjoy SPV for the time being (Electrum), and I know\nthat people will continue to keep using SPV wallets because they are\nlight and handy, I think that you make a good point that \"basic fraud\ndetecting mechanism\" is needed, but how to verify that such a\nmechanism in an SPV wallet is good, and/or that the software and\nversion information provided by the server admins via the banner is\nvalid (being as it's not validated)?  I have made a thread on this\nconundrum.  Which is posted here if you are interested.\n\nhttps://bitcointalk.org/index.php?topic=1157545.0\n\nSo as to avoid repeating stuff please read whole thead before\nanswering in it or posting back to list.  It seems that there are\ndefinitely unanswered questions...\n\nI may open this up as an issue on https://github.com/spesmilo/electrum\nabout this stuff, but I wanted to post comment here also, for the record\n.\n\n\n> \n>> If an attacker thinks he could get more than 25 BTC of \n>> double-spends per block, he might even choose to mine with the \n>> obsolete version in order to get predictable orphans and to trick\n>> SPV clients and fully verifying wallets on the old version.\n> \n> This point is totally irrelevant. No matter there is a softfork or\n> not, SPV users are always vulnerable to such double-spending attack\n> if they blindly follow the longest chain AND accept 1-confirmation.\n> The fiat currency system might be safer for them. \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJWCuyBAAoJEGxwq/inSG8CtpAH/R6N1QYzMFWPo75RsP46VYbi\nk33QbsbhlEznEEWX/ayKEzmnbt7DkXFXQtesuabongFr9UpwxED0OGQJztyRz5NC\niS8ty+Kfi9/Aq/e79A6IPSYfRCPB1w+oP/cEsV/LB4BPkut2mdpMbdwDZ3TQuLRq\nLnFLmz8tY+CUqSbyrPUx/FKJ7ZbQsAlammMTKoUYaAYRytDBPzW4PdYtTyrK2QTK\njjt11n5U8ShmXdsCo/E0pWVbggQlhFgrCoIYjGNfmDyK/eYaskD5O6czIdqd5WPs\nP+2zMC1Cukkr5l8BQXiSedVXGpMyaYhMgWB7MD6sNDIAE9IFbfEpkse/Ek4aJII=\n=Ud4C\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-09-29T18:31:28",
                "message_text_only": "On Mon, Sep 28, 2015 at 10:48 AM, Mike Hearn via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> There is no consensus on using a soft fork to deploy this feature. It will\n> result in the same problems as all the other soft forks - SPV wallets will\n> become less reliable during the rollout period. I am against that, as it's\n> entirely avoidable.\n>\n> Make it a hard fork and my objection will be dropped.\n\nI'm surprised to see this response-- BIP65 is a year old now which is\nplenty of time to mature and for issues to be uncovered. It (and its\npredecessors) have had extensive discussion-- with no controversy\nexposed during its entire lifetime, but in any case...\n\nI am having a little difficulty making sense of this complaint. For\nall any of us know miners are already enforcing the validity of CLTV,\nit's indistinguishable on the visible behavior.  At the same time in\nBitcoinXT's 101 proposal the change in system rules is similarly\n\"invisible\" to existing \"SPV\" wallets in the same way that enforcement\nof CLTV is \"invisible\": both are no change from their perspective.\nHave I missed a proposal to change BIP101 to be a real hardfork (e.g.\nbe invalid from the perspective of historical bitcoinj clients too)?\n---- I'd think it to be completely reasonable to do so, even while not\nthinking that it would be reasonable here:  Softforks and hardforks\nare not the same thing, not technically, and not politically. Miners\ncan collectively, at their whim, impose any kind of soft fork they\nwant, at any time and you won't even necessarily be able to tell...\nthat is just how the system works. Hardforks on the other hand, can\nonly happen with the consent of the participants-- they can directly\nviolate system properties that the participants believe to be largely\nnonvolatile, and they _force__ software upgrades, so I think having a\nhigher bar makes good sense there.\n\nThe particular mechanism used in the proposal as-is has been used many\ntimes before (and has been refined over time) and we have considerable\nexperience with it. The behavior is not, in fact, truly invisible to\nnon-upgraded participants: it's is visible by way of the block version\nchanging.  Bitcoin Core, going back years, responds by issuing a\nwarning-- \"%s: %d of last 100 blocks above version %d\\n\" which then\nbecomes \"Warning: This version is obsolete; upgrade required!\".  Users\nof the software (directly or via automation) are free to decide to\ntake whatever policy action they wish to take, delay accepting\ntransactions, patching software, etc..  The same could be done by any\nclient of the system if they cared to do so.\n\nI believe the versionbits mechanism will be superior, but-- among\nother things-- its deployment has been complicated by BitcoinXT\ndeploying an incomplete approximation of it.  Versionbits primary\nadvantage is related to having multiple concurrent proposals in\nflight, which will be good to have but isn't itself a reason not to\npull a proposal up ahead of versionbits."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-30T17:11:56",
                "message_text_only": "Hi Gregory,\n\n\n> I'm surprised to see this response\n\n\nWhy? I have objected to the idea of soft forks many times. I wrote an\nentire article about it in August. I also objected in April 2014, for\ninstance, where Pieter agreed with me that soft forks can result in ugly\nhacks, and that they are \"not nice philosophically because they reduce the\nsecurity model of former full nodes to SPV without their knowledge\" (he\nthought they were worth it anyway).\n\nThis is not a new debate. If you're surprised, it means only you weren't\npaying attention to all the previous times people raised this issue.\n\n\n> Have I missed a proposal to change BIP101 to be a real hardfork\n\n\nThere's no such thing as a \"real\" hard fork - don't try and move the goal\nposts. SPV clients do not need any changes to do the right thing with BIP\n101, they will follow the new chain automatically, so it needs no changes.\n\nSeveral people have asked several times now: given the very real and widely\nacknowledged downsides that come with a soft fork, *what* is the specific\nbenefit to end users of doing them?\n\nUntil that question is answered to my satisfaction I continue to object to\nthis BIP on the grounds that the deployment creates financial risk\nunnecessarily. To repeat: *CLTV does not have consensus at the moment*.\n\nBTW, in the April 2014 thread Pieter's argument was that hard forks are\nmore risky, which is at least an answer to my question. But he didn't\nexplain why he thought that. I disagree: the risk level seems lower with a\nhard fork because it doesn't lower anyone's security level.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/9962a0a6/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-30T17:58:45",
                "message_text_only": "On Wed, Sep 30, 2015 at 7:11 PM, Mike Hearn via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Several people have asked several times now: given the very real and widely\n> acknowledged downsides that come with a soft fork, what is the specific\n> benefit to end users of doing them?\n\nAs previously explained, the biggest advantage of softforks is that\nassuming the hasrate majority upgrades, network convergence is\nguaranteed.\nI don't know of anyone else (apart from you) that believes that the\nadvantages of softforks are generally worse than those of hardforks.\nI'm attempting to clarify everything related to consensus rule changes\nin BIP99.\n\n> Until that question is answered to my satisfaction I continue to object to\n> this BIP on the grounds that the deployment creates financial risk\n> unnecessarily. To repeat: CLTV does not have consensus at the moment.\n\nBut your argument is flawed because it assumes softforks are more\nrisky than hardforks.\nYou've been explained why this is not the case, so unless you can\nexplain what's more important for a consensus system than network\nconvergence I think we can still consider this consensus rule change\nuncontroversial, just like BIP66 was (even if you were also unable to\nunderstand the advantages of softforks back then, just like you are\nunable to understand them now, as you just proved in your answer to my\nexplanation). Using BIP99's terminology, this is an \"uncontroversial\nsoftfork\" and it's therefore the safest option for consensus rule\nchanges deployment.\nI should definitely improve my explanation on why uncontroversial\nsoftforks are preferrable to uncontroversial hardforks in most cases\n(and maybe try to come up with an example in which a hardfork is\npreferable). I should also explain the disadvantages of\nuncontroversial softforks that you have pointed out several times. So\nI will mention you in BIP99's PR once I update it with a new section\nthat talks about the trade offs of uncontroversial softforks vs\nuncontroversial hardforks.\nIn the meantime I believe that we can safely move forwards with BIP65\n(again, just like we did with BIP66 ) and I also believe that you, as\nan expert in Bitcoin, will eventually be able to understand the\nadvantages of uncontroversial softforks.\nWith all due respect, I don't think we need to wait for you to\nunderstand the advantages of softforks to move forward with BIP65,\njust like we didn't need to wait for every developer and user to\nunderstand BIP66 to deploy it.\nYou don't have specific complaints against the new script operator,\nand you don't have an uncontroversial hardfork alternative design (or\nimplementation).\nThis is a feature that enables new contracts that are important to\nBitcoin. Please don't try to block it just to make a point about what\n\"uncontroversial\" means."
            },
            {
                "author": "Adam Back",
                "date": "2015-09-30T18:15:03",
                "message_text_only": "On 30 September 2015 at 13:11, Mike Hearn via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Have I missed a proposal to change BIP101 to be a real hardfork\n>\n> There's no such thing as a \"real\" hard fork - don't try and move the goal\n> posts. SPV clients do not need any changes to do the right thing with BIP\n> 101, they will follow the new chain automatically, so it needs no changes.\n\nBIP101 is a hybrid: in some ways it is a hard-fork and in other ways\nit is a soft-fork.  It is a hard-fork to full-nodes, but also a\nsoft-fork to SPV clients, as by definition the SPV miners are having\nchanges made whether they approve or not as they are not even aware of\nthe change.\n\n> To repeat: CLTV does not have consensus at the moment.\n\nI think people are saying CLTV is long discussed and does have consensus.\n\n> Several people have asked several times now: given the very real and widely\n> acknowledged downsides that come with a soft fork, what is the specific\n> benefit to end users of doing them?\n>\n> Until that question is answered to my satisfaction I continue to object to\n> this BIP on the grounds that the deployment creates financial risk\n> unnecessarily.\n\nLet's not conflate CLTV with a discussion about future possible\ndeployment methods.  Forks are an interesting but different topic.\n\nSoft-forks have a lot of mileage on them at this point, hard-forks do\nnot, and are anyway inherently higher riskier, even ignoring our lack\nof practical experience with planned hard-forks.\n\nWith a soft-fork, while it's clear there is a temporary security model\nreduction for SPV nodes (and non-upgraded full nodes) in the period\nbefore they upgrade, this is preferable to the risks of a system-wide\ncoordinated hard-fork upgrade.  There is some limit if the complexity\nof soft-forking a feature is quite complicated (eg one could argue\nthat with soft-fork extension-blocks vs hard-fork method of increasing\nblock-size for example).  So the balance, which I think is easily met\nwith CLTV, is that soft-fork is simple-enough technically and the\nfeature is entirely non-controversial and additive functionality\nimprovement without downside or reason for dissent.\n\nTo my view this is an answer to your question \"what is the specific\nbenefit to end users of doing [soft-forks]\" -- it is a lower risk, and\ntherefore faster way to deploy non-controversial (additive) changes.\n\nGiven the CLTV is useful for improving lightning efficiency this is\ngood for improving Bitcoin's scalability.\n\nAdam"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-09-30T19:26:56",
                "message_text_only": "On Wed, Sep 30, 2015 at 1:11 PM, Mike Hearn via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Several people have asked several times now: given the very real and\n> widely acknowledged downsides that come with a soft fork, *what* is the\n> specific benefit to end users of doing them?\n>\n\nField experience shows it successfully delivers new features to end users\nwithout a global software upgrade.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/c7ce1b05/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-30T19:56:01",
                "message_text_only": ">\n> Field experience shows it successfully delivers new features to end users\n> without a global software upgrade.\n>\n\nThe global upgrade is required for all full nodes in both types. If a full\nnode doesn't upgrade then it no longer does what it was designed to do; if\nthe user is OK with that, they should just run an SPV wallet or use\nblockchain.info or some other mechanism that consumes way fewer resources.\n\nBut if you want the software you installed to achieve its stated goal, you\n*must* upgrade. There is no way around that.\n\nJorge has said soft forks always lead to network convergence. No, they\ndon't. You get constant mini divergences until everyone has upgraded, as\nopposed to a single divergence with a hard fork (until everyone has\nupgraded). The quantity of invalid blocks mined, on the other hand, is\nidentical in both types.\n\nAdam has said \"there is actually consensus\", although I just said there\nisn't. Feel free to say what you really mean here Adam - there's consensus\nif you ignore people who don't agree, i.e. the concept of \"developer\nconsensus\" doesn't actually mean anything. This would contradict your prior\nstatements about how Bitcoin Core makes decisions, but alright ....\n\nFinally John, I fully agree with what you wrote. Debates that never end are\nbad news all round. Bitcoin Core has told the world it uses \"developer\nconsensus\" to make decisions. I don't agree that's a good way to do things,\nbut if Core wants to stick with it then there is no choice - as I am a\ndeveloper, and I do not agree with the change, there is no consensus and\nthe debate is over.\n\nHey, I have an idea. Maybe we should organise a conference about soft vs\nhard forks. Let's have it down the road from where I live, a couple of\nweeks from now. Please submit your talk titles to me so I can vet them to\nensure nobody does an offtopic talk ;)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/5e0bab14/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-30T20:37:08",
                "message_text_only": "On Sep 30, 2015 9:56 PM, \"Mike Hearn via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Jorge has said soft forks always lead to network convergence. No, they\ndon't. You get constant mini divergences until everyone has upgraded, as\nopposed to a single divergence with a hard fork (until everyone has\nupgraded). The quantity of invalid blocks mined, on the other hand, is\nidentical in both types.\n\nExactly, all those \"mini divergences\" eventually disappear (because we're\nassuming the hashrate majority has upgraded and non-upgraded miners accept\nupgraded blocks as valid), even if the hashrate minority never upgrades.\nOn the other hand, the \"single divergence\" in the hardfork keeps growing\nforever (unless all miners evetually upgrade.\nWith softforks, we maintain eventual consistency, with hardforks we don't.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/54749cdd/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-30T21:06:01",
                "message_text_only": ">\n> Exactly, all those \"mini divergences\" eventually disappear\n>\nA miner that has accepted a newly invalid transaction into its memory pool\nand is trying to mine it, will keep producing invalid blocks forever until\nthe owner shuts it down and upgrades. This was happening for weeks after\nP2SH triggered.\n\nFor instance, any miner that has modified/bypassed IsStandard() can do\nthis, or any miner that accepts direct transaction submission, or any miner\nthat runs an old node from before OP_NOPs were made non-standard.\n\n> On the other hand, the \"single divergence\" in the hardfork keeps growing\n> forever (unless all miners evetually upgrade.\n>\nWhich they do, because they will eventually notice they are burning money.\n\nSorry Jorge, but I don't think your argument makes sense.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/e6e4693e/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-30T22:14:21",
                "message_text_only": "On Wed, Sep 30, 2015 at 11:06 PM, Mike Hearn <hearn at vinumeris.com> wrote:\n>> Exactly, all those \"mini divergences\" eventually disappear\n>\n> A miner that has accepted a newly invalid transaction into its memory pool\n> and is trying to mine it, will keep producing invalid blocks forever until\n> the owner shuts it down and upgrades. This was happening for weeks after\n> P2SH triggered.\n>\n> For instance, any miner that has modified/bypassed IsStandard() can do this,\n> or any miner that accepts direct transaction submission, or any miner that\n> runs an old node from before OP_NOPs were made non-standard.\n\nThat is correct. But doesn't seem to contradict anything I said.\n\n>> On the other hand, the \"single divergence\" in the hardfork keeps growing\n>> forever (unless all miners evetually upgrade.\n>\n> Which they do, because they will eventually notice they are burning money.\n\nAssuming it is an uncontroversial hardfork (unlike bip101 in its\ncurrent form), miners will eventually upgrade because all users will\neventually upgrade as well.\nSoftfork-caused forks will live shortly because non-upgraded miners\nwill build on top of the longest upgraded chain.\nIn contrast, non-upgraded miners will not build on top of the longest\nchain (the upgraded one assuming hashrate majority) and a parallel\nchain will be built for some time. This chain can be used to defraud\nnon-upgraded or SPV users by isolating them and showing them only the\nnon-upgraded chain, which keeps growing but will eventually be\nabandoned.\nIn the case of a Schism hardfork, some users may never want to\n\"upgrade\" and if there's demand for the \"old coins\" there will be\nminers for the \"old chain\".\n\n> Sorry Jorge, but I don't think your argument makes sense.\n\nI think my argument makes a lot of sense, it's just that for some\nreason you don't think guaranteed eventual consistency has any value\nbecause you are ok with miners abandoning the old rules chain only\neventually (and you don't believe that \"eventually\" can be far in the\nfuture in practice).\n\nOn Wed, Sep 30, 2015 at 9:56 PM, Mike Hearn via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Adam has said \"there is actually consensus\", although I just said there\n> isn't. Feel free to say what you really mean here Adam - there's consensus\n> if you ignore people who don't agree, i.e. the concept of \"developer\n> consensus\" doesn't actually mean anything. This would contradict your prior\n> statements about how Bitcoin Core makes decisions, but alright ....\n\nBIP99 doesn't talk about \"developer consensus\", but rather\n\"uncontroversial consensus rule changes\".\nObviously a patch in which developers steal everybody else's coins\nwouldn't be \"uncontroversial\" even if \"developer consensus\" is\nreached.\nWe don't need to ignore anyone to consider BIP65 an uncontroversial\nsoftfork: we just need to ignore fallacious and unreasonable\narguments.\nAs far as I can tell, you are the only person opposing BIP65 (even if\nyou keep talking about \"several people\") and I would like to think\nthat you are aren't being obstinate on purpose only to make your point\nabout \"developer consensus not meaning anything\", but you are making\nit very hard.\n\nOn Wed, Sep 30, 2015 at 11:01 PM, Mike Hearn via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I coined the term SPV so I know exactly what it means, and bitcoinj\n> implements it, as does BreadWallet (the other big SPV implementation).\n\nNo, you didn't. \"Simplified Payment Verification\" is section 8 in the\nBitcoin whitepaper that you like to cite so much.\n\n> I'm going to ignore the rest of the stuff you wrote about \"design decisions\n> to lack security\" or \"cheaply avoidable lack of validation\". When you have\n> sat down and written an SPV implementation by yourself, then shipped it to a\n> couple of million users, you might have better insight into basic\n> engineering costs. Until then, I find your criticisms of code you think was\n> missing due to \"stonewalling\" and so on to be seriously lacking real world\n> experience.\n\nPlease study this page carefully and hopefully one day you will stop\nusing logical fallacies as often as you currently do:\nhttps://en.wikipedia.org/wiki/List_of_fallacies\nIn this case you manage to combine ad hominem and appeal to authority\n(maybe false authority is more accurate?).\nOnce again, please, stop using fallacies to try to convince people\nthat you are right. No offense, but being warned publicly about the\nuse of logical fallacies so often would be extremely embarrassing to\nme."
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-09-30T22:17:12",
                "message_text_only": "On Wed, Sep 30, 2015 at 3:56 PM, Mike Hearn <hearn at vinumeris.com> wrote:\n\n> Field experience shows it successfully delivers new features to end users\n>> without a global software upgrade.\n>>\n>\n> The global upgrade is required for all full nodes in both types. If a full\n> node doesn't upgrade then it no longer does what it was designed to do; if\n> the user is OK with that, they should just run an SPV wallet or use\n> blockchain.info or some other mechanism that consumes way fewer resources.\n>\n> But if you want the software you installed to achieve its stated goal, you\n> *must* upgrade. There is no way around that.\n>\n\nIt is correct that security is slightly reduced for full nodes that have\nnot upgraded.  It is not correct that the choice is binary, full node or\nSPV.\n\nAny user running a not-upgraded full node still retains protection against\nmany attacks outside the subset related to the feature being introduced.\n\nThe field observable end result is that we do receive new features, secured\nby hashpower and user full nodes, via soft fork, without a global flag day\nupgrade.\n\nYes, a flag day hard fork upgrade is cleaner and results in higher security\ndue to the entire network validating the new rules.  However, the\ndifficulty of executing hard forks would mean fewer total features to\nusers, if that route were chosen instead.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/79a7b5d7/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-09-30T23:25:03",
                "message_text_only": "On Wed, Sep 30, 2015 at 10:17 PM, Jeff Garzik <jgarzik at gmail.com> wrote:\n> It is correct that security is slightly reduced for full nodes that have not\n> upgraded.  It is not correct that the choice is binary, full node or SPV.\n>\n> Any user running a not-upgraded full node still retains protection against\n> many attacks outside the subset related to the feature being introduced.\n\nAn extra way to look at this is that even absent any rule changes--\nusers who are asleep at the switch may lose effective security over\ntime because attackers learn new tricks against existing\nvulnerabilities. Security requires a bit of vigilance, inherently.\n\nIn many specific cases I think it's hard-to-impossible to articulate a\nconcrete way that security is lost by users at all, excluding some\nsmall amplification of orphan blocks.\n\n\nOn Wed, Sep 30, 2015 at 9:06 PM, Mike Hearn via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> and is trying to mine it, will keep producing invalid blocks forever until\n> the owner shuts it down and upgrades.\n\nThis is the outcome guaranteed for absentee miners with a hard fork,\nbut it is not guaranteed for a soft fork.\n\n> For instance, any miner that has modified/bypassed IsStandard() can do this,\n\nMiners who have changed their code in inadvisable ways can produce\ninvalid blocks as a result. There are many seemingly innocuous ways\none can produce invalid blocks, and miners have stumbled on a few of\nthem over the years.\n\nPedantically, modifying IsStandard() will not have this effect:\nUnknown NOPs are now handled via a script validation flag--\nSCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS.  Experience (e.g. with\nSTRICTDER) has show that script validation flags are much more robust\nto casual twiddling than IsStandard is.\n\nThe only way that script validation flags have been observed getting\nbypassed in the field was a miner that had disabled all signature\nvalidation completely (and whom had a not-completely-negligible amount\nof hashpower. :( )... as it's a lot more clear that you might be\nexposing yourself to trouble if you mess with the validation flags.\n\n> runs an old node from before OP_NOPs were made non-standard.\n\nIIRC; There is no released version of Bitcoin that has IsStandard\nwhich has failed failed to treat the NOPs as non-standard.\n\nThere was a brief time in git master between when IsStandardness was\nrelaxed and NOPs were addressed via a validation flag but I am\nreasonably confident that didn't make it into a release.\n\nRegardless, anyone actually running that code of that vintage would\nalready be incompatible with the current network already due to prior\nsoft forks.\n\nAnd as a matter of fact, invalid CLTVs don't currently appear to get\nmined. Checking this again pre-release would be a good checklist item.\nFor prior soft-forks we've monitored and tested for this (with the\ngoal of going and yelling at any broken miners to fix their behavior)."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-09-30T20:15:31",
                "message_text_only": "On Wed, Sep 30, 2015 at 5:11 PM, Mike Hearn <hearn at vinumeris.com> wrote:\n> Hi Gregory,\n>\n>>\n>> I'm surprised to see this response\n>\n>\n> Why? I have objected to the idea of soft forks many times. I wrote an entire\n> article about it in August.\n\nYes, your article contained numerous factual and logical inaccuracies\nwhich I corrected (many of which you had been previously corrected on\nas well by others). (For example:\nhttps://www.reddit.com/r/Bitcoin/comments/3griiv/on_consensus_and_forks_by_mike_hearn/cu0yv0r\n)\n\nI would have hoped that after so many corrections you would have\nupdated your beliefs.\n\n> There's no such thing as a \"real\" hard fork - don't try and move the goal\n> posts. SPV clients do not need any changes to do the right thing with BIP\n> 101, they will follow the new chain automatically, so it needs no changes.\n\nYes, because what 101 does is not a hard-fork from the perspective of\nBitcoinJ clients. Please do not conflate BitcoinJ with all of SPV; a\nSPV client could validate the information received more extensively or\nrespond to alerts in reject rule violating blocks--  BitcoinJ does\nnot, but this is BitcoinJ's design decision to lack security in this\nrespect and not something inherent to SPV).\n\nDirectly fixing the time-warp attack, for example, would be a hard\nfork from the perspective of BitcoinJ clients.  Recovering the fixed 0\nbits in the header for use as extra-nonce would be a hard fork from\nthe perspective of BitcoinJ clients. Changing the transaction format\nto include an explicit nonce for ECDH (e.g. stealth addresses) would\nbe a hard fork from the perspective of BitcoinJ clients. Increasing\nthe precision of Bitcoin by 1000 would be a hard fork from the\nperspective of BitcoinJ. As would adjusting the hashtree to commit to\nfees, including fees under OP_CHECKSIGs hash, or switching to the\nsegregated witness commitment structure from elements alpha that\nallows syncing the chain without fetching signatures... all that would\nbe hardforks from the perspective of BitcoinJ.\n\nBecause of an cheaply avoidable the lack of validation in BitcoinJ no\nincrease of the blocksize is a hard-fork from its perspective. Nor\nwould increasing the subsidy to miners, or allowing third parties to\nconfiscate coins. But other SPV clients could, if they wanted to,\nreject blocks the violated most of these criteria.\n\nThe argument you are presenting against BIP65 is that it is bad\nbecause it is silently accepted. But this applies no less to 101 for\nSPV clients, and in 101's case it's a failure to enforce pre-existing\nrules which the users might care a great deal about. Worse, counting\non this kind of behavior can build a dependence on weak security forms\nof SPV and inhibits the use of full security SPV.\n\nIn truth, both of BIP101 and BIP65 are detectable even by the most\nsimplistic and pre-change clients due to the voluntarily use of block\nversion signaling. Any participant in the network is free to take\nwhatever action they choose to take in response to such an event.\nBitcoin Core's behavior is to issue alerts to the user when unexpected\nblock versions show up on the network.  Users and implementer are free\nto turn changes like BIP65 into hardforks from the perspective of\ntheir own system, necessitating manual intervention, by simply forcing\nthe block version to be a particular value (or shutting down when\nthere are many blocks of a new version; until manually authorized to\ncontinue).\n\n> Several people have asked several times now: given the very real and widely\n> acknowledged downsides that come with a soft fork, what is the specific\n> benefit to end users of doing them?\n\nFor many changes, including CLTV the actual soft fork change is by far\nthe most natural way of implementing the change itself. One simply\ntakes an existing non-standard placeholder op code sequence and\nassigns it the new VERIFY style meaning. It is clean, tidy, and the\nresult is nearly as if the system has had it all along. The only\ncomplexity is around the activation and can be dropped in future code.\n\nBeyond that, the primary upside is no forced industry wide \"flag day\"\nwhere everyone is _forced_ to modify their software arises, taking\nconsiderable cost.  People who care about the new rule can use it,\npeople who don't don't. All the rules that you care about enforcing\nremain in force-- you still prevent inflation, you still will not\ntolerate the theft of your own coins (or those of most other people),\netc.. No one is necessarily caught by surprise since the block\nversions communicate that something is happening, allowing network\nparticipants to choose to act (or not).\n\nFor example, for years you stonewalled P2SH and multi-signature.  You\ndidn't care about it. You didn't think it was valuable. You didn't add\nit to your software, even after it was well specified and deployed in\nproduction. Could it have been done as a hard-fork?  Likely not: you\nwould have prevented it. But as a soft-fork you were free to ignore it\nwith no ill-effect for a long time existing for those who cared about\nit, and not for you, until widespread use resulted in demand enough to\njustify accepting a patch that permitted sending to it.\n\nWhat if we'd needed a hard fork to enable CoinJoin or other privacy\nfeatures?  I think would have blocked that too.\n\nThe relative ease of handling soft-forks which you are indifferent to\nmeans that there is little reason to object to a compatible change\nthat gives other people flexibility they care about greatly but which\nyou are indifferent to; and it forces people who would oppose a\nfunctionality because they don't want others to have some piece of\nfreedom to try to frame justifications in language other than \"I don't\nthink it's worth the cost\" since they have the nearly free option of\nignoring the change-- they're forced to actually argue against other\npeople having that freedom.\n\nSoft-forks also allows us to deploy fixes to the Bitcoin protocol\nwhich are more important-to-have but not urgently critical (like\nheight in coinbase),  or sometimes to deploy fixes to critical\nvulnerabilities without first handing everyone excruciatingly detailed\ninstructions on exploiting them, simply by closing off an pattern of\nprotocol which is obviously bad and risky.\n\nThe primary cost of a soft-fork for non-participants is simply some\nrisk of increased network instability around the change-- but short\nlived forks happen every day, and longer lived ones happen from time\nto time. Larger amounts of instability occur from time to time due to\nnetwork partitioning, misconfiguration, and software bugs-- and client\nsoftware must be prepared to cope with it; this is a fact of bitcoin\nand decenteralized systems in general. Upgraded, change enforcing,\nclient software is not exposed to the this instability, and\nnon-upgraded software could choose to mitigate any exposure by\nmonitoring the block versions. This is a far better situation that the\nnatural instability that will happen from time to time in a\ndecentralized system.\n\nBy contrast, the programmed activation point of BIP101 at 75% almost\nguarantees activation among considerable controversy, promising\nnetwork instability which BitcoinJ clients would experience upgraded\nor not, even if the larger block side was ultimately the losing side\nin the switch. I find it more than a little strange that you think the\ninstability of a 75%-version-hashpower cut is acceptable but the a\n95%-version-hashpower compatible change is not.\n\nFinally, there is the demonstrated track record: They work; they\ndeliver new features to people. Our experience in the half dozen or\nmore soft-forks in the system so far is that in practice do not cause\nsignificant problems, including financial losses for SPV wallet users.\nEven with that complete success there has been room for improvement,\nwhich is why the process has evolved over time to feature things like\npreemptive non-standardness, high switchover thresholds, etc.  and\nthese will continue to evolve over time.\n\nI hope that you can put aside your effort to force a blocksize\nincrease on others for a moment and add functionality, of the kind the\nBitcoin Core has had for years, to BitcoinJ to improve the experience\nwith soft-forks if you think it isn't good enough as is..."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-30T21:01:09",
                "message_text_only": "tl;dr Nothing I have read here has changed my mind. There is still no\nconsensus to deploy CLTV in this way.\n\n\n> Yes, your article contained numerous factual and logical inaccuracies\n> which I corrected\n>\n\nI responded to your response several times. It was not convincing, and I do\nnot think you corrected factual inaccuracies. I mean, you said yourself you\nonce used the correct terminology of forwards compatibility but stopped\nonly because the term \"backwards compatibility\" is more common. But that's\nnot a good reason to use a term with the opposite meaning and is certainly\nnot a factual correction!\n\n\n> Yes, because what 101 does is not a hard-fork from the perspective of\n> BitcoinJ clients. Please do not conflate BitcoinJ with all of SPV;\n\n\nI coined the term SPV so I know exactly what it means, and bitcoinj\nimplements it, as does BreadWallet (the other big SPV implementation).\n\nYes, SPV wallets will follow the mining hashpower instead of doing a hard\nreject for bigger blocks, because they deliberately check a subset of the\nrules: block size is not and never has been one of them. Indeed it's not\neven included in the protocol messages. Users have no expectation that SPV\nwallets would check that, as it's never been claimed they do.\n\nOn the other hand, full nodes all claim they run scripts. Users expect that\nand may be relying on it. The unstated assumption here is that the nodes\nrun them correctly. A soft fork breaks this assumption.\n\nI'm going to ignore the rest of the stuff you wrote about \"design decisions\nto lack security\" or \"cheaply avoidable lack of validation\". When you have\nsat down and written an SPV implementation by yourself, then shipped it to\na couple of million users, you might have better insight into basic\nengineering costs. Until then, I find your criticisms of code you think was\nmissing due to \"stonewalling\" and so on to be seriously lacking real world\nexperience.\n\nYes, a hypothetical full node could fork on the version bits. I would be\nquite happy with the version number in the header being an enforced\nconsensus rule: it'd make hard forks easier to trigger. But it hasn't been\ndone that way, and wishing away the behaviour of existing software in the\nfield is no good. Luckily, for introducing a new opcode, the same effect\ncan be achieved by using a non-allocated opcode number.\n\n\n> For many changes, including CLTV the actual soft fork change is by far\n> the most natural way of implementing the change itself.\n\n\nThis is subjective. I'd say picking an entirely new opcode number is most\nnatural.\n\nThe rest of your argument boils down to \"people don't have to upgrade if\nthey don't want to\", which is addressed in the article I wrote already, and\nmultiple responses on this thread. Yes, they do, otherwise they aren't\ngetting the security level they were before.\n\n\n> Could [P2SH] have been done as a hard-fork?  Likely not: you would have\n> prevented it.\n\n\nWhat? This is nonsensical. P2SH was added to the full verification code\nquite quickly, but it didn't matter much because nobody uses bitcoinj for\nmining. The docs explicitly tell people, in fact, not to mine on top of\nbitcoinj:\n\nhttps://bitcoinj.github.io/full-verification\n\nSo no, bitcoinj+P2SH was irrelevant from a fork type perspective. It just\nhad no effect at all. This entire section of your message is completely\nwrong.\n\nThe code that did take longer was for wallet support. And the reason it\ncame later was resource prioritisation: there were more important issues to\nresolve. Like I said - write the amount of code I've written, unpaid in\nyour evenings and weekends, and then you can criticise bitcoinj for lacking\nfeatures.\n\n75% is a fine activation threshold. By definition if support is at 75% then\nbigger blocks is \"winning\", but if support fell, then the SPV wallets would\njust reorg back onto the 1mb-blocks chain.\n\nRe: demonstrated track record. They \"work\" only if you ignore the actual\nproblems that have resulted. P2SH-invalid blocks were being mined for weeks\nafter the flag day. That's not good no matter how you slice it: even if you\ndidn't hear about any fraud resulting, it is still risk that can be avoided.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/5774e38f/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-09-30T22:59:22",
                "message_text_only": "On Wed, Sep 30, 2015 at 9:01 PM, Mike Hearn <hearn at vinumeris.com> wrote:\n> I coined the term SPV so I know exactly what it means, and bitcoinj\n\nThe term comes from the Bitcoin whitepaper.\n\n> On the other hand, full nodes all claim they run scripts. Users expect that\n> and may be relying on it. The unstated assumption here is that the nodes run\n> them correctly. A soft fork breaks this assumption.\n\nThey run them correctly with respect to the rules that they implement,\nnothing about a soft-fork changes that.\n\nThe system could have been designed in a way that wasn't full of nice\ncompatibility features. The history of bitcoin could have been that\npast improvements were all performed with hard forks instead of soft\nforks.\n\nBut neither of these things are true. (And I think it's very likely\nthat there would have been fewer improvements if that were the case).\n\n> I'm going to ignore the rest of the stuff you wrote  about \"design decisions\n> to lack security\" or \"cheaply avoidable lack of validation\". When you have\n> sat down and written an SPV implementation by yourself, then shipped it to a\n> couple of million users, you might have better insight into basic\n> engineering costs.\n\nAt the end of the day we need to deliver software to our users that\ndelivers on their needs and doesn't undermine their privacy or\nsecurity;  even if its really hard.  So when someone calls out\nsomething that I'm working on that could use improvement, my response\nisn't to tell them how much I'm not going to listen to them because\nI've accomplished some long list of things that they haven't; that\nsoftware I've written runs on hundreds of millions of devices; ...\nrather my response is to hear out their concerns, even when due to\nextensive context I'm confident that they are probably confused or\ndishonestly motivated; because there is always a potential to learn,\nand always a potential to do better.  I have found this to be pretty\nproductive, as even when both parties walk away with the same\npositions they started with, I usually learn something along the way\njust because I paid attention.\n\n> Until then, I find your criticisms of code you think was\n> missing due to \"stonewalling\" and so on to be seriously lacking real world\n> experience.\n\nBIP16 was published on 2012-01-01. Enforcement on the network began on\nApril 1st 2012.\n\nSupport for merely sending to P2SH addresses was merged into BitcoinJ,\nNov 30th _2013_, after it was written by Mike Belshe.\n\nIn the interim you spent considerable time arguing against\nimplementing it, e.g. in one example incident:\n\n--- Day changed Thu Sep 12 2013\n10:03 < TD> heck, if a recipient really really wants to receive a p2sh\npayment for some reason, they can just put the p2sh output into the\npayment request message\n....\n10:17 <@gmaxwell> TD: In any case, P2SH has been deployed for\nsomething like two years now. Your arguement seems to be basically we\nshould be creating a false tying between payment protocol messages and\nthings like escrow usage in order to coerce people to adopt the\npayment protocol in places where an address would do.\n10:17 <@gmaxwell> I think thats a bit cruddy.\n10:19 < TD> no, i'm saying p2sh is a feature that just isn't usable. i\ndid point this out at the time it was merged - gavin believed that\napps to do complicated multi-device wallets would appear before a\npayment protocol did, and people wouldn't like the look of long\naddresses. that was pretty much the rationale given. that didn't\nhappen, obviously\n10:20 < TD> developing features that are used only by bitcoind\ndevelopers, isn't the right way to go, and p2sh definitely falls into\nthat category\n...\n10:35 < TD> i'm not going to do it myself because anyone who is\ncapable of producing and running something that uses p2sh is capable\nof working with the payment protocol as well, and that gives a better\nuser experience overall. but if someone else wants to, go for it.\n\nI don't think there is anything wrong about calling this stonewalling.\nAt least thats how it came across to myself and others. I'm sorry if I\njudged too harshly there.\n\nTo be clear, by pointing out your past opposition and non-deployment\nin this message I am _not_ trying to attacking you for failing to\nsupport P2SH.\n\nI pointing out that right or wrong..... That you actively argued\nagainst it. That you chose not to implement it, and only accepted a\npatch for it a year and a half later. From your own words it seems\nclear that you didn't implement it due to actual opposition, but even\nif the non-implementation was simply engineering priorities, the fact\nremains that you didn't implement for a very long time.\n\nAnd that is _okay_, we still got it anyways, and today tens of\nthousands of transactions per day use it and P2SH secures about 10% of\nall Bitcoin value.  This is possible because with a soft fork users\nusing other software can gain functionality which might be critical to\nthem (As Jgarzik was saying about Bitpay in the discussion I was\nquoting from) that you don't have the time or interest to implement in\nyour own software.\n\n\n> What? This is nonsensical. P2SH was added to the full verification code\n> quite quickly,\n\nYes, Matt Corallo added it to code which by your admission no one was\nusing.  I agree this is not relevant.\n\n> resolve. Like I said - write the amount of code I've written, unpaid in your\n> evenings and weekends, and then you can criticise bitcoinj for lacking\n> features.\n\nI think it's likely that I've spent significant more time unpaid on my\nevenings and weekends creating software for others than you have (and\ncontinue to do so; as well as having donated years worth of income\nsupporting other people's Free Software work), but it's a bit of an\nunfair comparison: I'm a fair bit older than you. :)\n\nAnd yet, I think that is all irrelevant here because I'm not current\ncriticizing bitcoinj for lacking features!   Quite the opposite, I am\npointing out that the advantage of soft-forks is that its OKAY for\nsoftware to lack soft-fork features,  which means that participants\nwho code only on evenings and weeks are free to continue participating\nwith the priorities they choose!\n\nForcing _all_ upgrades to be via hard-fork takes away the freedom to\nmake that trade-off; and concurrently reduces the collection of fixes\nupgrades we could potentially deploy; because will always be\nimplementations out there like BitcoinJ in 2012 that didn't have the\nresources (or interest) to fully implement this feature or that\nfeature, at least not right away.\n\nAnd for many things, they simply don't have to, and that should be okay.\n\n> Yes, a hypothetical full node could fork on the version bits. I would be\n> quite happy with the version number in the header being an enforced\n> consensus rule: it'd make hard forks easier to trigger. But it hasn't been\n> done that way, and wishing away the behaviour of existing software in the\n> field is no good. Luckily, for introducing a new opcode, the same effect can\n> be achieved by using a non-allocated opcode number.\n\nWe handle this in Bitcoin Core. Our chosen and intentional way to\nhandle this is setting a notice. This gives users the freedom to do\nwhat they like, while also behaving in a reasonably sane way by\ndefault.\n\nYou don't have to like it, you can behave differently in your own\nsoftware or on your own hosts-- all the data is available to you.\n\n(I wouldn't object out of principle to a default config option to take\nmore aggressive action on unexpected versions... but no one has ever\nasked for one... and I'm doubtful anyone would ever do so.)\n\n> The rest of your argument boils down to \"people don't have to upgrade if\n> they don't want to\", which is addressed in the article I wrote already, and\n> multiple responses on this thread. Yes, they do, otherwise they aren't\n> getting the security level they were before.\n\nThey continue to enforce all the same rules as before. With the soft\nfork Bitcoin Core users are informed that unexpected things are going\non, and they are free to look at whats going on and decide how to\nhandle it, or just accept that the new thing is almost certainly\nsomething they don't care about (after all, the rules they signed up\nfor before are all still in effect, and at any time miners could be\nsilently imposing new 'soft fork' like rules without their knowledge--\nhaving a big reaction to ones the network was kind enough to tell them\nabout doesn't seem that reasonable).\n\nFor many users and many soft-forks there is no substantial security\nimplication, and you cannot say that they were not getting the\nsecurity level they were getting before. But regardless, even what it\nis different, they're free to decide on the cost tradeoff with\nupgrading, and they're not forced onto an upgrade hamsterwheel that\ndisenfranchises their role in the system.\n\nIf you have a specific generalized security implication in mind,\nyou're failing to state it. In your writings you like to assert that I\n \"did not respond\" or were \"not convincing\"-- that is not generally my\nstyle, I don't usually think anyone owes me point by point answers,\nbut I think on this point it seems clear that there is some\nimplication which is in your head that is a mystery to at least myself\nand Jgarzik.\n\n> 75% is a fine activation threshold. By definition if support is at 75% then\n> bigger blocks is \"winning\", but if support fell, then the SPV wallets would\n> just reorg back onto the 1mb-blocks chain.\n\nA 75% measurement doesn't actually mean 75% support, due to variance.\nEven ignoring that-- you recognize the acceptability of reorgs. The\nsituation is no worse for an SPV client for a soft-fork; and it's\nbetter because (1) convergence is still guaranteed with exponential\nprobability (a hard fork can be mutual and no convergence may be\npossible-- as is the case for more conceivable hard forks), and (2)\nfor BIP65 (and current soft forks generally) a _much_ more\nconservative threshold is set (because in Bitcoin Core and the general\ncommunity around here considers 75% to be too low to achieve high\nstability, based on our past experience).\n\n> Re: demonstrated track record. They \"work\" only if you ignore the actual\n> problems that have resulted. P2SH-invalid blocks were being mined for weeks\n> after the flag day. That's not good no matter how you slice it: even if you\n> didn't hear about any fraud resulting, it is still risk that can be avoided.\n\nA couple points:\n\nThat same invalid blocks for weeks (actually months) from BIP16 is the\nbehavior you will get with a hard fork, for at least the same reasons\n(miners asleep at the switch). Much more for a controversial hard-fork\nas there will be principled objections.\n\nBlocks get produced that get orphaned every day and this is\nunavoidable, so users already must deal with occasional cases where\nconfirmations get undone.\n\nMore recent soft-forks have reduced the incidence of invalid blocks by\nsubstantially increasing the threshold, including better notification\nin Bitcoin core, communicating directly with miners more, and making\nnon-conforming transactions non-standard in advance. These mitigations\nhave been effective in practice; and we have not seen the same\nbehavior (which, as, noted is not known to have enabled any fraud in\nany case -- in part because to non-upgraded wallets it looks just like\nthe orphaning that normally happens but with somewhat increased\nfrequency.).  I think it's unfortunate that people proposing hard\nforks have not learned the same lessons, even though the stakes are\nhigher and the self-resolution of the system is greatly diminished."
            },
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-09-29T20:03:04",
                "message_text_only": "On Sun, Sep 27, 2015 at 02:50:31PM -0400, Peter Todd via bitcoin-dev wrote:\n\n> It's time to deploy BIP65 CHECKLOCKTIMEVERIFY.\n\nThere appears to be common agreement on that.\n\nThe only source of some controversy is how to deploy: versionbits versus\nIsSuperMajority. I think the versionbits proposal should first have code\nout there for longer before we consider it for concrete softforks. Haste-ing\nalong versionbits because CLTV is wanted would be risky.\n\n> I've backported the CLTV op-code and a IsSuperMajority() soft-fork to\n> the v0.10 and v0.11 branches, pull-reqs #6706 and #6707 respectively. A\n> pull-req for git HEAD for the soft-fork deployment has been open since\n> June 28th, #6351 - the opcode implementation itself was merged two\n> months ago.\n\n> We should release a v0.10.3 and v0.11.1 with CLTV and get the ball\n> rolling on miner adoption. We have consensus that we need CLTV, we have\n> a well tested implementation, and we have a well-tested deployment\n> mechanism. \n\nAs you say, the underlying code has been merged for months in master, and #6351\nseems to have had quite some eyes on it already.\n\nIt does need to be made sure that the backports are correct, however.\nAlthough the tests do provide some assurance, I think those two pulls\nrequire more review.\n\nAfter they are merged, a 0.10.3 and 0.11.1 release can be rolled out (with RC\ncycle).\n\n> We also don't need to wait for other soft-fork proposals to\n> catch up - starting the CLTV deployment process isn't going to delay\n> future soft-forks, or for that matter, hard-forks.\n> \n> I think it's possible to safely get CLTV live on mainnet before the end\n> of the year. It's time we get this over with and done.\n\nWladimir"
            },
            {
                "author": "Rusty Russell",
                "date": "2015-09-30T04:05:42",
                "message_text_only": "\"Wladimir J. van der Laan via bitcoin-dev\"\n<bitcoin-dev at lists.linuxfoundation.org> writes:\n> On Sun, Sep 27, 2015 at 02:50:31PM -0400, Peter Todd via bitcoin-dev wrote:\n>\n>> It's time to deploy BIP65 CHECKLOCKTIMEVERIFY.\n>\n> There appears to be common agreement on that.\n>\n> The only source of some controversy is how to deploy: versionbits versus\n> IsSuperMajority. I think the versionbits proposal should first have code\n> out there for longer before we consider it for concrete softforks. Haste-ing\n> along versionbits because CLTV is wanted would be risky.\n\nAgreed.  Unfortunately, a simple \"block version >= 4\" check is\ninsufficient, due to XT which sets version bits 001....111.\n\nGiven that, I suggest using the simple test:\n\n        if (pstart->nVersion & 0x8)\n            ++nFound;\n\nWhich means:\n1) XT won't trigger it.\n2) It won't trigger XT.\n3) You can simply set block nVersion to 8 for now.\n4) We can still use versionbits in parallel later.\n\nCheers,\nRusty."
            },
            {
                "author": "Adam Back",
                "date": "2015-09-30T06:19:56",
                "message_text_only": "I think from discussion with Gavin sometime during the montreal\nscaling bitcoin workshop, XT maybe willing to make things easy and\nadapt what it's doing.  For example in relation to versionBits Gavin\nsaid he'd be willing to update XT with an updated/improved\nversionBits, for example.\n\nIt seems more sensible to do what is simple and clean and have both\ncore do that, and XT follow if there is no particular philosophy\ndebate on a given technical topic.  This seems a quite constructive\napproach.\n\nAdam\n\nOn 30 September 2015 at 00:05, Rusty Russell via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \"Wladimir J. van der Laan via bitcoin-dev\"\n> <bitcoin-dev at lists.linuxfoundation.org> writes:\n>> On Sun, Sep 27, 2015 at 02:50:31PM -0400, Peter Todd via bitcoin-dev wrote:\n>>\n>>> It's time to deploy BIP65 CHECKLOCKTIMEVERIFY.\n>>\n>> There appears to be common agreement on that.\n>>\n>> The only source of some controversy is how to deploy: versionbits versus\n>> IsSuperMajority. I think the versionbits proposal should first have code\n>> out there for longer before we consider it for concrete softforks. Haste-ing\n>> along versionbits because CLTV is wanted would be risky.\n>\n> Agreed.  Unfortunately, a simple \"block version >= 4\" check is\n> insufficient, due to XT which sets version bits 001....111.\n>\n> Given that, I suggest using the simple test:\n>\n>         if (pstart->nVersion & 0x8)\n>             ++nFound;\n>\n> Which means:\n> 1) XT won't trigger it.\n> 2) It won't trigger XT.\n> 3) You can simply set block nVersion to 8 for now.\n> 4) We can still use versionbits in parallel later.\n>\n> Cheers,\n> Rusty.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-30T12:30:25",
                "message_text_only": ">\n> I think from discussion with Gavin sometime during the montreal\n> scaling bitcoin workshop, XT maybe willing to make things easy and\n> adapt what it's doing.\n\n\nIf Core ships CLTV as is, then XT will have to adopt it - such is the\nnature of a consensus system.\n\nThis will not change the fact that the rollout strategy is bad and nobody\nhas answered my extremely basic question: *why* is it being done in this\nway, given the numerous downsides?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/a5fc7897/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-30T15:55:52",
                "message_text_only": "On Tue, Sep 29, 2015 at 2:07 PM, Mike Hearn <hearn at vinumeris.com> wrote:\n> Hi Jorge,\n>\n>> Yes, there is a difference. Assuming the hashrate majority upgrades, in\n>> the case of a softfork [snip] ...... In the case of a hardfork [snip]\n>\n> Yes, I know what the difference between them is at a technical level. You\n> didn't explain why this would make any difference to how fast miners\n> upgrade. The amount of money they lose in both cases is identical: they are\n> equally incentivised to upgrade with both fork types.\n>\n> Additionally, you say in a hard fork the other chain may \"continue forever\".\n> Why do you think this is not true for miners building invalid blocks on top\n> of the main chain? Why would that not continue forever?\n\nI didn't talked about how fast miners would upgrade, please read again\nbecause I believe I was extremely precise.\nIn both cases I'm assuming there's a minority of the hasrate which\ndoesn't upgrade.\nIn the softfork case, the minority will always build on top of the\nlongest chain (which is valid to them). There may be many little\nalternative chains that are ignored (and orphaned) by the upgraded\nminers, but non-upgraded miners will always build on top of the\nlongest chain.\n\nIn the hardfork case, non-upgraded miners will reject the upgraded\nchain because it is invalid to them, so they will build on top of the\nlongest non-upgraded chains.\nTwo alternative chains will continue growing forever unless the\nnon-upgraded miners eventually upgrade.\nIn contrast, there won't be 2 alternative chains growing forever in\nthe softfork case even if the minority miners never upgrade.\n\n> There just isn't any difference between the two fork types in terms of how\n> fast miners would upgrade. Heck if anything, a hard fork should promote\n> faster upgrades, because if a miner isn't paying attention to their\n> debug.log they might miss the warnings. A soft fork would then look\n> identical to a run of really bad luck, which can legitimately happen from\n> time to time. A hard fork results in your node having a different height to\n> everyone else, which is easily detectable by just checking a block explorer.\n>>\n>> This discussion about the general desirability of softforks seems offtopic\n>> for the concrete cltv deployment discussion, which assumes softforks as\n>> deployment mechanism (just like bip66 assumed it).\n>\n> Isn't that circular? This thread is about deployment of CLTV, but the BIP\n> assumes a particular mechanism, so pointing out problems with it is off\n> topic? Why have a thread at all?\n\nBIP99 recommends an uncontroversial softfork for this kind of case.\nYou seem to be contradicting BIP99 in many other places. Maybe you\nwant to complain about some of the recommendations in BIP99 (instead\nof everywhere else):\n\nhttps://github.com/bitcoin/bips/pull/181\n\nOn Wed, Sep 30, 2015 at 2:30 PM, Mike Hearn via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> This will not change the fact that the rollout strategy is bad and nobody\n> has answered my extremely basic question: why is it being done in this way,\n> given the numerous downsides?\n\nYou seem to be the only one who thinks that softforks have \"numerous\ndownsides\" over hardforks.\nSo everybody just basically disagrees with the assumption in your\nquestion and thus nobody can answer it."
            },
            {
                "author": "John Winslow",
                "date": "2015-09-30T19:17:10",
                "message_text_only": "Two observations from a Bitcoin investor and non-programmer:\n\n1) I think it's possible that those who are adamantly opposed to a soft \nfork may be largely (if not completely) correct on purely technical \nterms, but that they also may be underestimating the risk of a \ncontentious hardfork.\n\n2) The downsides of a softfork are unclear because they seem to be based \nprimarily on inelegant coding, not that it couldn't be made to work.\n\nAs a Bitcoin investor, I am becoming increasingly concerned that the \nrancorous and mostly unproductive debates occurring here daily are \nslowly closing the window of opportunity for Bitcoin to succeed. If this \nwere a start-up or public company, the stock would be plunging. Why? \nSimple. Uncertainty. While I think (and I'm sure most here would agree) \nthat these debates are necessary (and due to Bitcoin's decentralized \nnature perhaps even necessary to have in a public forum) but when these \ndebates go on and on indefinitely thereby reducing confidence in \nBitcoin's future something different needs to be done. In a public \ncompany or startup these debates would be happening in private with a an \neye on competition, public/market perception, timing and anticipation of \na shareholder-value-increasing outcome followed by a press release or \nmarketing campaign. And the clock is always ticking.\n\nMy suggestion is the top devs from both sides need to get together \noffline and decide what the best compromise would be and then publicly \npromote a non-contentious solution that balances the technical with \nmarket concerns that everyone can get behind. Continuing to debate \ntechnical issues ad-infinitum without compromise or waiting until the \nHong Kong conference in December to start making a decision while \nBitcoin dies on the vine should not be an option. If anything, the \nconference should be the time at the end of which a confidence-inspiring \ntechnical roadmap is announced.\n\nFurther, I would like to add that in my perception what Bitcoin needs to \nand can easily become is essentially a public utility/backbone \nblockchain (like IP is to the internet) upon which all current and \nfuture blockchain stakeholders should see as their best and cheapest \noption for entering the space. For this to happen Bitcoin, from a user's \nstandpoint needs to be simple and reliable, and from an \ninvestor/developer standpoint cost-effective and scalable. I don't see \nwhy this can't happen.\n\nJTW\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn 9/30/2015 8:55 AM, Jorge Tim\u00f3n via bitcoin-dev wrote: On Wed, Sep 30, \n2015 at 2:30 PM, Mike Hearn via bitcoin-dev \n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> This will not change the fact that the rollout strategy is bad and nobody\n>> has answered my extremely basic question: why is it being done in this way,\n>> given the numerous downsides?\n> You seem to be the only one who thinks that softforks have \"numerous\n> downsides\" over hardforks.\n> So everybody just basically disagrees with the assumption in your\n> question and thus nobody can answer it.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>"
            },
            {
                "author": "Adam Back",
                "date": "2015-09-30T17:14:08",
                "message_text_only": "I was talking about the versionBits from Rusty's email (pasted below) and\nsimplifying that by XT adopting the patch as Gavin had seemed agreeable to.\n\nAdam\n\nRusty wrote:\n> Agreed.  Unfortunately, a simple \"block version >= 4\" check is\n> insufficient, due to XT which sets version bits 001....111.\n>\n> Given that, I suggest using the simple test:\n>\n>         if (pstart->nVersion & 0x8)\n>             ++nFound;\n>\n> Which means:\n> 1) XT won't trigger it.\n> 2) It won't trigger XT.\n> 3) You can simply set block nVersion to 8 for now.\n> 4) We can still use versionbits in parallel later.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/5fec4b01/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Let's deploy BIP65 CHECKLOCKTIMEVERIFY!",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "John Winslow",
                "Tier Nolan",
                "Wladimir J. van der Laan",
                "Rusty Russell",
                "odinn",
                "Adam Back",
                "Mike Hearn",
                "Peter Todd",
                "Jorge Tim\u00f3n",
                "Btc Drak",
                "Gregory Maxwell",
                "Mark Friedenbach",
                "Jeff Garzik",
                "s7r",
                "Dave Scotese",
                "Gavin Andresen",
                "jl2012 at xbt.hk",
                "Eric Lombrozo",
                "Jonathan Toomim (Toomim Bros)"
            ],
            "messages_count": 61,
            "total_messages_chars_count": 150890
        }
    },
    {
        "title": "[bitcoin-dev] Why soft-forks? was: Let's deploy BIP65 CHECKLOCKTIMEVERIFY!",
        "thread_messages": [
            {
                "author": "Santino Napolitano",
                "date": "2015-09-29T15:09:05",
                "message_text_only": "> So I'll repeat the question that I posed before - given that there are clear, explicit downsides,\n> what is the purpose of doing things this way? Where is the gain for ordinary Bitcoin users?\n\n+1 for a direct answer to this question."
            }
        ],
        "thread_summary": {
            "title": "Why soft-forks? was: Let's deploy BIP65 CHECKLOCKTIMEVERIFY!",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Santino Napolitano"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 235
        }
    },
    {
        "title": "[bitcoin-dev] Is it possible for there to be two chains after a hard fork?",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2015-09-29T14:04:39",
                "message_text_only": "I keep seeing statements like this:\n\nOn Tue, Sep 29, 2015 at 9:30 AM, Jonathan Toomim (Toomim Bros) via\nbitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> As a further benefit to hard forks, anybody who is ideologically opposed\n> to the change can continue to use the old version successfully, as long as\n> there are enough miners to keep the fork alive.\n\n\n... but I can't see how that would work.\n\nLets say there is a hard fork, and 5% of miners stubbornly refuse to go\nalong with the 95% majority (for this thought experiment, it doesn't matter\nif the old rules or new rules 'win').\n\nLets further imagine that some exchange decides to support that 5% and lets\npeople trade coins from that fork (one of the small altcoin exchanges would\ndefinitely do this if they think they can make a profit).\n\nNow, lets say I've got a lot of pre-fork bitcoin; they're valid on both\nsides of the fork. I support the 95% chain (because I'm not insane), but\nI'm happy to take people's money if they're stupid enough to give it to me.\n\nSo, I do the following:\n\n1) Create a send-to-self transaction on the 95% fork that is ONLY valid on\nthe 95% fork (maybe I CoinJoin with a post-fork coinbase transaction, or\njust move my coins into then out of an exchange's very active hot wallet so\nI get coins with a long transaction history on the 95% side of the fork).\n\n2) Transfer  those same coins to the 5% exchange and sell them for whatever\nprice I can get (I don't care how low, it is free money to me-- I will\nstill own the coins on the 95% fork).\n\nI have to do step (1) to prevent the exchange from taking the\ntransfer-to-exchange transaction and replaying it on the 95% chain.\n\nI don't see any way of preventing EVERYBODY who has coins on the 95% side\nof the fork from doing that. The result would be a huge free-fall in price\nas I, and everybody else, rushes to get some free money from anybody\nwilling to pay us to remain idealogically pure.\n\nDoes anybody think something else would happen, and do you think that\nANYBODY would stick to the 5% fork in the face of enormously long\ntransaction confirmation times (~3 hours), a huge transaction backlog as\nlots of the 95%'ers try to sell their coins before the price drops, and a\nmassive price drop for coins on the 5% fork.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/1104ed67/attachment.html>"
            },
            {
                "author": "Jonathan Toomim (Toomim Bros)",
                "date": "2015-09-29T14:17:35",
                "message_text_only": "At the 95% threshold, I don't think it would happen unless there was a very strong motivating factor, like a small group believing that CLTV was a conspiracy run by the NSA agent John Titor to contaminate our precious bodily fluids with time-traveling traveler's cheques.\n\nAt the 75% threshold, I think it could happen with mostly rational users, but even then it's not very likely with most forks. With the blocksize issue, there are some people who get very religious about things like decentralization or fee markets and think that even 1 MB is too large; I could see them making financial sacrifices in order to try to make a small-block parallel fork a reality, one that is true to their vision of what's needed to make Bitcoin true and pure, or whatever.\n\n\n\n\nOn Sep 29, 2015, at 7:04 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n\n> I keep seeing statements like this:\n> \n> On Tue, Sep 29, 2015 at 9:30 AM, Jonathan Toomim (Toomim Bros) via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> As a further benefit to hard forks, anybody who is ideologically opposed to the change can continue to use the old version successfully, as long as there are enough miners to keep the fork alive.\n> \n> ... but I can't see how that would work.\n> \n> Lets say there is a hard fork, and 5% of miners stubbornly refuse to go along with the 95% majority (for this thought experiment, it doesn't matter if the old rules or new rules 'win').\n> \n> Lets further imagine that some exchange decides to support that 5% and lets people trade coins from that fork (one of the small altcoin exchanges would definitely do this if they think they can make a profit).\n> \n> Now, lets say I've got a lot of pre-fork bitcoin; they're valid on both sides of the fork. I support the 95% chain (because I'm not insane), but I'm happy to take people's money if they're stupid enough to give it to me.\n> \n> So, I do the following:\n> \n> 1) Create a send-to-self transaction on the 95% fork that is ONLY valid on the 95% fork (maybe I CoinJoin with a post-fork coinbase transaction, or just move my coins into then out of an exchange's very active hot wallet so I get coins with a long transaction history on the 95% side of the fork).\n> \n> 2) Transfer  those same coins to the 5% exchange and sell them for whatever price I can get (I don't care how low, it is free money to me-- I will still own the coins on the 95% fork).\n> \n> I have to do step (1) to prevent the exchange from taking the transfer-to-exchange transaction and replaying it on the 95% chain.\n> \n> I don't see any way of preventing EVERYBODY who has coins on the 95% side of the fork from doing that. The result would be a huge free-fall in price as I, and everybody else, rushes to get some free money from anybody willing to pay us to remain idealogically pure.\n> \n> Does anybody think something else would happen, and do you think that ANYBODY would stick to the 5% fork in the face of enormously long transaction confirmation times (~3 hours), a huge transaction backlog as lots of the 95%'ers try to sell their coins before the price drops, and a massive price drop for coins on the 5% fork.\n> \n> --\n> --\n> Gavin Andresen\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/4dde6117/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/4dde6117/attachment.sig>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-09-29T14:59:46",
                "message_text_only": "You don't need to appeal to human psychology. At 75% threshold, it takes\nonly 25.01% of the hashpower to report but not actually enforce the fork to\ncause the majority hashpower to remain on the old chain, but for upgraded\nclients to start rejecting the old chain. With 95% the same problem exists\nbut with a threshold of 45.01%. BIP 66 showed this not to be a hypothetical\nconcern.\n\nOn Tue, Sep 29, 2015 at 7:17 AM, Jonathan Toomim (Toomim Bros) via\nbitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> At the 95% threshold, I don't think it would happen unless there was a\n> very strong motivating factor, like a small group believing that CLTV was a\n> conspiracy run by the NSA agent John Titor to contaminate our precious\n> bodily fluids with time-traveling traveler's cheques.\n>\n> At the 75% threshold, I think it could happen with mostly rational users,\n> but even then it's not very likely with most forks. With the blocksize\n> issue, there are some people who get very religious about things like\n> decentralization or fee markets and think that even 1 MB is too large; I\n> could see them making financial sacrifices in order to try to make a\n> small-block parallel fork a reality, one that is true to their vision of\n> what's needed to make Bitcoin true and pure, or whatever.\n>\n>\n>\n>\n> On Sep 29, 2015, at 7:04 AM, Gavin Andresen <gavinandresen at gmail.com>\n> wrote:\n>\n> I keep seeing statements like this:\n>\n> On Tue, Sep 29, 2015 at 9:30 AM, Jonathan Toomim (Toomim Bros) via\n> bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> As a further benefit to hard forks, anybody who is ideologically opposed\n>> to the change can continue to use the old version successfully, as long as\n>> there are enough miners to keep the fork alive.\n>\n>\n> ... but I can't see how that would work.\n>\n> Lets say there is a hard fork, and 5% of miners stubbornly refuse to go\n> along with the 95% majority (for this thought experiment, it doesn't matter\n> if the old rules or new rules 'win').\n>\n> Lets further imagine that some exchange decides to support that 5% and\n> lets people trade coins from that fork (one of the small altcoin exchanges\n> would definitely do this if they think they can make a profit).\n>\n> Now, lets say I've got a lot of pre-fork bitcoin; they're valid on both\n> sides of the fork. I support the 95% chain (because I'm not insane), but\n> I'm happy to take people's money if they're stupid enough to give it to me.\n>\n> So, I do the following:\n>\n> 1) Create a send-to-self transaction on the 95% fork that is ONLY valid on\n> the 95% fork (maybe I CoinJoin with a post-fork coinbase transaction, or\n> just move my coins into then out of an exchange's very active hot wallet so\n> I get coins with a long transaction history on the 95% side of the fork).\n>\n> 2) Transfer  those same coins to the 5% exchange and sell them for\n> whatever price I can get (I don't care how low, it is free money to me-- I\n> will still own the coins on the 95% fork).\n>\n> I have to do step (1) to prevent the exchange from taking the\n> transfer-to-exchange transaction and replaying it on the 95% chain.\n>\n> I don't see any way of preventing EVERYBODY who has coins on the 95% side\n> of the fork from doing that. The result would be a huge free-fall in price\n> as I, and everybody else, rushes to get some free money from anybody\n> willing to pay us to remain idealogically pure.\n>\n> Does anybody think something else would happen, and do you think that\n> ANYBODY would stick to the 5% fork in the face of enormously long\n> transaction confirmation times (~3 hours), a huge transaction backlog as\n> lots of the 95%'ers try to sell their coins before the price drops, and a\n> massive price drop for coins on the 5% fork.\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/786eebfe/attachment-0001.html>"
            },
            {
                "author": "Allen Piscitello",
                "date": "2015-09-29T17:24:21",
                "message_text_only": "You're entire argument seems to be based on this assumption.\n\n>I support the 95% chain (because I'm not insane)\n\nI fail to see how always following a majority of miners no matter what\ntheir actions somehow equates to insanity.\n\n\nOn Tue, Sep 29, 2015 at 9:04 AM, Gavin Andresen via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I keep seeing statements like this:\n>\n> On Tue, Sep 29, 2015 at 9:30 AM, Jonathan Toomim (Toomim Bros) via\n> bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> As a further benefit to hard forks, anybody who is ideologically opposed\n>> to the change can continue to use the old version successfully, as long as\n>> there are enough miners to keep the fork alive.\n>\n>\n> ... but I can't see how that would work.\n>\n> Lets say there is a hard fork, and 5% of miners stubbornly refuse to go\n> along with the 95% majority (for this thought experiment, it doesn't matter\n> if the old rules or new rules 'win').\n>\n> Lets further imagine that some exchange decides to support that 5% and\n> lets people trade coins from that fork (one of the small altcoin exchanges\n> would definitely do this if they think they can make a profit).\n>\n> Now, lets say I've got a lot of pre-fork bitcoin; they're valid on both\n> sides of the fork. I support the 95% chain (because I'm not insane), but\n> I'm happy to take people's money if they're stupid enough to give it to me.\n>\n> So, I do the following:\n>\n> 1) Create a send-to-self transaction on the 95% fork that is ONLY valid on\n> the 95% fork (maybe I CoinJoin with a post-fork coinbase transaction, or\n> just move my coins into then out of an exchange's very active hot wallet so\n> I get coins with a long transaction history on the 95% side of the fork).\n>\n> 2) Transfer  those same coins to the 5% exchange and sell them for\n> whatever price I can get (I don't care how low, it is free money to me-- I\n> will still own the coins on the 95% fork).\n>\n> I have to do step (1) to prevent the exchange from taking the\n> transfer-to-exchange transaction and replaying it on the 95% chain.\n>\n> I don't see any way of preventing EVERYBODY who has coins on the 95% side\n> of the fork from doing that. The result would be a huge free-fall in price\n> as I, and everybody else, rushes to get some free money from anybody\n> willing to pay us to remain idealogically pure.\n>\n> Does anybody think something else would happen, and do you think that\n> ANYBODY would stick to the 5% fork in the face of enormously long\n> transaction confirmation times (~3 hours), a huge transaction backlog as\n> lots of the 95%'ers try to sell their coins before the price drops, and a\n> massive price drop for coins on the 5% fork.\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/bec94c52/attachment-0001.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-09-29T17:35:20",
                "message_text_only": "On Tue, Sep 29, 2015 at 1:24 PM, Allen Piscitello <\nallen.piscitello at gmail.com> wrote:\n\n> I fail to see how always following a majority of miners no matter what\n> their actions somehow equates to insanity.\n\n\nOk, I have a hidden assumption: I assume most miners are also not\ncompletely insane.\n\nI have met a fair number of them, and while they are often a little bit\ncrazy (all entrepreneurs are a little bit crazy), I am confident that the\nvast majority of them are economically rational, and most of them are also\nmeta-rational: they want Bitcoin to succeed. We've seen them demonstrate\nthat meta-rationality when we've had accidental consensus forks.\n\nIf you start with the premise that more than half of Bitcoin miners would\ndo something crazy that would either destroy Bitcoin or would be completely\nunacceptable to you, personally... then maybe you should look for some\nother system that you might trust more, because Bitcoin's basic security\nassumption is that a supermajority of miners are 'honest.'\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/f20f08f7/attachment.html>"
            },
            {
                "author": "Allen Piscitello",
                "date": "2015-09-29T17:43:55",
                "message_text_only": ">If you start with the premise that more than half of Bitcoin miners would\ndo something crazy that would either destroy Bitcoin or would be completely\nunacceptable to you, personally... then maybe you should look for some\nother system that you might trust more, because Bitcoin's basic security\nassumption is that a supermajority of miners are 'honest.'\n\nMiners not being crazy does not mean they are infallible.  They may\nmisjudge the market and change their minds about what is the most\nreasonable action based on new information.  Their commitment to one fork\nor another is very dynamic, and is a huge assumption missing.  They may\noverestimate their influence, support of the economy.  Other factors may\ncome into play that no one thought of, and they can revert back at any\npoint.\n\nLabeling things as insane or crazy is not productive.\n\n>because Bitcoin's basic security assumption is that a supermajority of\nminers are 'honest.'\n\nOnly if you rely on SPV.\n\nOn Tue, Sep 29, 2015 at 12:35 PM, Gavin Andresen <gavinandresen at gmail.com>\nwrote:\n\n> On Tue, Sep 29, 2015 at 1:24 PM, Allen Piscitello <\n> allen.piscitello at gmail.com> wrote:\n>\n>> I fail to see how always following a majority of miners no matter what\n>> their actions somehow equates to insanity.\n>\n>\n> Ok, I have a hidden assumption: I assume most miners are also not\n> completely insane.\n>\n> I have met a fair number of them, and while they are often a little bit\n> crazy (all entrepreneurs are a little bit crazy), I am confident that the\n> vast majority of them are economically rational, and most of them are also\n> meta-rational: they want Bitcoin to succeed. We've seen them demonstrate\n> that meta-rationality when we've had accidental consensus forks.\n>\n> If you start with the premise that more than half of Bitcoin miners would\n> do something crazy that would either destroy Bitcoin or would be completely\n> unacceptable to you, personally... then maybe you should look for some\n> other system that you might trust more, because Bitcoin's basic security\n> assumption is that a supermajority of miners are 'honest.'\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/cc99256a/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-29T17:51:34",
                "message_text_only": ">\n> >because Bitcoin's basic security assumption is that a supermajority of\n> miners are 'honest.'\n>\n> Only if you rely on SPV.\n>\n\nNo, you rely on miners honesty even if you run a full node. This is in the\nwhite paper. A dishonest miner majority can commit fraud against you, they\ncan mine only empty blocks, they can do various other things that render\nyour money worthless.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/91b9b493/attachment.html>"
            },
            {
                "author": "Allen Piscitello",
                "date": "2015-09-29T17:55:02",
                "message_text_only": ">A dishonest miner majority can commit fraud against you, they can mine\nonly empty blocks, they can do various other things that render your money\nworthless.\n\nMining empty blocks is not fraud.\n\nIf you want to use terms like \"honest miners\" and \"fraud\", please define\nthem so we can at least be on the same page.\n\nI am defining an honest miner as one that follows the rules of the\nprotocol.  Obviously your definition is different.\n\nOn Tue, Sep 29, 2015 at 12:51 PM, Mike Hearn <hearn at vinumeris.com> wrote:\n\n> >because Bitcoin's basic security assumption is that a supermajority of\n>> miners are 'honest.'\n>>\n>> Only if you rely on SPV.\n>>\n>\n> No, you rely on miners honesty even if you run a full node. This is in the\n> white paper. A dishonest miner majority can commit fraud against you, they\n> can mine only empty blocks, they can do various other things that render\n> your money worthless.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/c22d0ed4/attachment-0001.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-09-29T18:01:59",
                "message_text_only": "We really shouldn't have to go over \"Bitcoin 101\" on this mailing list, and\nthis discussion should move to the not-yet-created more general discussion\nlist.  I started this thread as a sanity check on myself, because I keep\nseeing smart people saying that two chains could persist for more than a\nfew days after a hard fork, and I still don't see how that would possibly\nwork.\n\nSo: \"fraud\" would be 51% miners sending you bitcoin in exchange for\nsomething of value, you wait for confirmations and send them that something\nof value, and then the 51% reverses the transaction.\n\nRunning a full node doesn't help.\n\nOn Tue, Sep 29, 2015 at 1:55 PM, Allen Piscitello <\nallen.piscitello at gmail.com> wrote:\n\n> >A dishonest miner majority can commit fraud against you, they can mine\n> only empty blocks, they can do various other things that render your money\n> worthless.\n>\n> Mining empty blocks is not fraud.\n>\n> If you want to use terms like \"honest miners\" and \"fraud\", please define\n> them so we can at least be on the same page.\n>\n> I am defining an honest miner as one that follows the rules of the\n> protocol.  Obviously your definition is different.\n>\n> On Tue, Sep 29, 2015 at 12:51 PM, Mike Hearn <hearn at vinumeris.com> wrote:\n>\n>> >because Bitcoin's basic security assumption is that a supermajority of\n>>> miners are 'honest.'\n>>>\n>>> Only if you rely on SPV.\n>>>\n>>\n>> No, you rely on miners honesty even if you run a full node. This is in\n>> the white paper. A dishonest miner majority can commit fraud against you,\n>> they can mine only empty blocks, they can do various other things that\n>> render your money worthless.\n>>\n>\n>\n\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/e754296f/attachment.html>"
            },
            {
                "author": "Allen Piscitello",
                "date": "2015-09-29T18:23:56",
                "message_text_only": ">I started this thread as a sanity check on myself, because I keep seeing\nsmart people saying that two chains could persist for more than a few days\nafter a hard fork, and I still don't see how that would possibly work.\n\nWhen you start with the assumption that anyone who disagrees with you is\ninsane or crazy, I can see why you have such difficulty.\n\n\nOn Tue, Sep 29, 2015 at 1:01 PM, Gavin Andresen <gavinandresen at gmail.com>\nwrote:\n\n> We really shouldn't have to go over \"Bitcoin 101\" on this mailing list,\n> and this discussion should move to the not-yet-created more general\n> discussion list.  I started this thread as a sanity check on myself,\n> because I keep seeing smart people saying that two chains could persist for\n> more than a few days after a hard fork, and I still don't see how that\n> would possibly work.\n>\n> So: \"fraud\" would be 51% miners sending you bitcoin in exchange for\n> something of value, you wait for confirmations and send them that something\n> of value, and then the 51% reverses the transaction.\n>\n> Running a full node doesn't help.\n>\n> On Tue, Sep 29, 2015 at 1:55 PM, Allen Piscitello <\n> allen.piscitello at gmail.com> wrote:\n>\n>> >A dishonest miner majority can commit fraud against you, they can mine\n>> only empty blocks, they can do various other things that render your money\n>> worthless.\n>>\n>> Mining empty blocks is not fraud.\n>>\n>> If you want to use terms like \"honest miners\" and \"fraud\", please define\n>> them so we can at least be on the same page.\n>>\n>> I am defining an honest miner as one that follows the rules of the\n>> protocol.  Obviously your definition is different.\n>>\n>> On Tue, Sep 29, 2015 at 12:51 PM, Mike Hearn <hearn at vinumeris.com> wrote:\n>>\n>>> >because Bitcoin's basic security assumption is that a supermajority of\n>>>> miners are 'honest.'\n>>>>\n>>>> Only if you rely on SPV.\n>>>>\n>>>\n>>> No, you rely on miners honesty even if you run a full node. This is in\n>>> the white paper. A dishonest miner majority can commit fraud against you,\n>>> they can mine only empty blocks, they can do various other things that\n>>> render your money worthless.\n>>>\n>>\n>>\n>\n>\n> --\n> --\n> Gavin Andresen\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/6fcb15b7/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-09-30T16:14:42",
                "message_text_only": "Gavin, you assume that users must necessarily always follow the\nhashrate majority, but this is not true.\nIn fact, it is the opposite: market forces make the hashrate follow the users.\nNot following the hashrate majority is not necessarily insane.\n\nIf some users aren't happy with the new hardfork rules, they may never\nupgrade. This is discussed (although I want to improve the text) under\nthe \"Schism hardforks\" section of BIP99 (which you may have some\ncomplaints against, so please review\nhttps://github.com/bitcoin/bips/pull/181/files#diff-e331b8631759a4ed6a4cfb4d10f473caR135\n).\n\nIt is true that users of chain A may sell or their B-coins, but the\nopposite is also true: users in chain B may sell all their A-coins.\nSpeculators will likely sell both and probably not buy again until the\ninitial uncertainty is gone (or they may never buy again, nobody can\npredict this).\n\nLet's use an example. Let's assume that a hardfork is rolled out to\ncompletely remove the blocksize limit (I believe you would be against\nthat from previous conversations with you).\nAs long as there are users creating demand for the old-coins, there\nwill be miners mining the old coins.\nThis is not insane for neither users or miners no matter how big the\nmajority of users and/or miners in the new rules chain.\n\nAgain, probably the best place to discuss this kind of thing is\nhttps://github.com/bitcoin/bips/pull/181 or the bitcoin-dev thread\nlinked from the BIP (\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008936.html\n).\n\n\nOn Tue, Sep 29, 2015 at 8:23 PM, Allen Piscitello via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>I started this thread as a sanity check on myself, because I keep seeing\n>> smart people saying that two chains could persist for more than a few days\n>> after a hard fork, and I still don't see how that would possibly work.\n>\n> When you start with the assumption that anyone who disagrees with you is\n> insane or crazy, I can see why you have such difficulty.\n>\n>\n> On Tue, Sep 29, 2015 at 1:01 PM, Gavin Andresen <gavinandresen at gmail.com>\n> wrote:\n>>\n>> We really shouldn't have to go over \"Bitcoin 101\" on this mailing list,\n>> and this discussion should move to the not-yet-created more general\n>> discussion list.  I started this thread as a sanity check on myself, because\n>> I keep seeing smart people saying that two chains could persist for more\n>> than a few days after a hard fork, and I still don't see how that would\n>> possibly work.\n>>\n>> So: \"fraud\" would be 51% miners sending you bitcoin in exchange for\n>> something of value, you wait for confirmations and send them that something\n>> of value, and then the 51% reverses the transaction.\n>>\n>> Running a full node doesn't help.\n>>\n>> On Tue, Sep 29, 2015 at 1:55 PM, Allen Piscitello\n>> <allen.piscitello at gmail.com> wrote:\n>>>\n>>> >A dishonest miner majority can commit fraud against you, they can mine\n>>> > only empty blocks, they can do various other things that render your money\n>>> > worthless.\n>>>\n>>> Mining empty blocks is not fraud.\n>>>\n>>> If you want to use terms like \"honest miners\" and \"fraud\", please define\n>>> them so we can at least be on the same page.\n>>>\n>>> I am defining an honest miner as one that follows the rules of the\n>>> protocol.  Obviously your definition is different.\n>>>\n>>> On Tue, Sep 29, 2015 at 12:51 PM, Mike Hearn <hearn at vinumeris.com> wrote:\n>>>>>\n>>>>> >because Bitcoin's basic security assumption is that a supermajority of\n>>>>> > miners are 'honest.'\n>>>>>\n>>>>> Only if you rely on SPV.\n>>>>\n>>>>\n>>>> No, you rely on miners honesty even if you run a full node. This is in\n>>>> the white paper. A dishonest miner majority can commit fraud against you,\n>>>> they can mine only empty blocks, they can do various other things that\n>>>> render your money worthless.\n>>>\n>>>\n>>\n>>\n>>\n>> --\n>> --\n>> Gavin Andresen\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-29T18:02:06",
                "message_text_only": ">\n> Mining empty blocks is not fraud.\n>\n\nI didn't say it was, sorry, the comma was separating two list items. By\n\"fraud\" I meant double spending. Mining only empty blocks would be a DoS\nattack rather than double spending.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/96ad0a79/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Is it possible for there to be two chains after a hard fork?",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Mike Hearn",
                "Jonathan Toomim (Toomim Bros)",
                "Jorge Tim\u00f3n",
                "Gavin Andresen",
                "Mark Friedenbach",
                "Allen Piscitello"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 27234
        }
    },
    {
        "title": "[bitcoin-dev] On bitcoin-dev list admin and list noise",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2015-09-29T15:44:57",
                "message_text_only": "This was discussed in IRC, but (did I miss it?) never made it to the list\noutside of being buried in a longer summary.\n\nThere is a common complain that bitcoin-dev is too noisy.  The response\nplan is to narrow the focus of the list to near term technical changes to\nthe bitcoin protocol and its implementations (bitcoin core, btcd, ...)\n\nDebates over bitcoin philosophy, broader context, etc. will start seeing\ngrumpy list admins squawk about \"off-topic!\"\n\nIt is a fair criticism, though, that \"take it elsewhere!\" needs to have\nsome place as a suggested destination.  The proposal is to create a second\nlist, bitcoin-tech-discuss or perhaps just 'bitcoin', with a more general\nrubric.  This split has served IRC well and generally manages to keep the\nnoise down to a productive level.  We want this list to achieve that same\ngoal; if bitcoin-dev is not productive then it's not useful.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/d62cd28f/attachment.html>"
            },
            {
                "author": "Santino Napolitano",
                "date": "2015-09-29T16:38:02",
                "message_text_only": "I'm not intending to completely dismiss your concerns but as a data point: I read this list daily and it usually takes 15 minutes or less while I drink a cup of coffee.\n\nMy concern is that this is one of the (maybe *the*) last uncensored persisted forums related to technical bitcoin discussion with wide viewership. It is increasingly difficult for an average somewhat technical person to attempt to hold the bitcoin development community accountable for its actions or have their voice heard. It would really be a shame if messages like this were relegated to a black hole where things like the exchange rate and various scammy spam goes to fester.\n\n>Debates over bitcoin philosophy, broader context, etc. will start seeing grumpy list admins squawk about \"off-topic!\"\n\nWho will draw this line? It's unclear to me who the list admins are."
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-09-29T17:07:12",
                "message_text_only": "This mailing list was never meant to be a place \"to hold the bitcoin\ndevelopment community accountable for its actions [sic].\" I know other\ndevelopers that have switched to digest-only or unsubscribed. I know if\nthis became a channel for PR and populist venting as you describe, I would\nleave as well. This mailing list is meant to be a place to discuss ongoing\nbitcoin development issues relating to the protocol and its instantiation\nin bitcoin core. Please don't decrease the utility of this list by\nexpanding scope.\n\nOn Tue, Sep 29, 2015 at 9:38 AM, Santino Napolitano via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I'm not intending to completely dismiss your concerns but as a data point:\n> I read this list daily and it usually takes 15 minutes or less while I\n> drink a cup of coffee.\n>\n> My concern is that this is one of the (maybe *the*) last uncensored\n> persisted forums related to technical bitcoin discussion with wide\n> viewership. It is increasingly difficult for an average somewhat technical\n> person to attempt to hold the bitcoin development community accountable for\n> its actions or have their voice heard. It would really be a shame if\n> messages like this were relegated to a black hole where things like the\n> exchange rate and various scammy spam goes to fester.\n>\n> >Debates over bitcoin philosophy, broader context, etc. will start seeing\n> grumpy list admins squawk about \"off-topic!\"\n>\n> Who will draw this line? It's unclear to me who the list admins are.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/78988206/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-09-29T17:29:01",
                "message_text_only": "There's a simple way to cut down on \"noise\" that doesn't involve people\nshouting OFFTOPIC at each other: the maintainer needs to resolve\ndiscussions by making decisions and saying, this is how Core does it. If\nyou disagree, go make/join a fork because there's no point in discussing\nthis any further here. People would get the picture pretty fast.\n\nWladimir doesn't do this. That is something he should fix. Clearly ending\ndebates so they don't run in circles forever is a basic management\ntechnique.\n\nAllowing random people to give each other red cards is merely a great way\nto piss off users even further, because anyone who objects to a clearly\nbone-headed decision will be told they're discussing philosophy and to go\naway (this is meaningless).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150929/21ce6628/attachment.html>"
            },
            {
                "author": "Pavel Jan\u00edk",
                "date": "2015-09-29T17:59:18",
                "message_text_only": "> On 29 Sep 2015, at 19:29, Mike Hearn via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> There's a simple way to cut down on \"noise\" that doesn't involve people shouting OFFTOPIC at each other: the maintainer needs to resolve discussions by making decisions and saying, this is how Core does it.\n\nLooks like you are mixing the maintainer of the Bitcoin Core with the bitcoin-dev mailing list moderator. Intentionally?\n--  \nPavel Jan\u00edk"
            }
        ],
        "thread_summary": {
            "title": "On bitcoin-dev list admin and list noise",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeff Garzik",
                "Pavel Jan\u00edk",
                "Mike Hearn",
                "Santino Napolitano",
                "Mark Friedenbach"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 5176
        }
    },
    {
        "title": "[bitcoin-dev] Are 'soft forks' misnamed? [was: Let's deploy BIP65 CHECKLOCKTIMEVERIFY!]",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2015-09-29T20:31:43",
                "message_text_only": "On Mon, Sep 28, 2015 at 10:16 PM, Dave Scotese via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Why are they called soft forks when they are really hidden forks?  Isn't the\n> point of a soft fork to prevent old clients from rejecting what they don't\n> have the code to validate?  That seems dangerous.\n\nAs an aside, this list loses utility if people insist on taking\ntangential questions to the list in the middle of threads. It's\npreferable to either split the thread or take the message off list.\n\nThe naming arose from a series of historical naming-by-comparisons:\n\nThe bitcoin network has self-arising forks in state when miners\nconcurrently create blocks. These are natural, unavoidable, and\nself-resolving.\n\nIf a nodes enforce different and incompatible rules-- for example,\nsome decide to require that the subsidy stay at 25 BTC forever, then a\nfork may come into existence which is not self resolvable.\n\nThus the term hardfork arose to talk about rule changes which were\nincompatible with the existing network, would require all users to\nupgrade, would exclude all non-consenting users from the resulting\nsystem, and which have the power to arbitrarily rewrite rules.  This\nis in contrast to \"forks\" which are boring, natural, and happen every\nday.\n\nIts often possible to make critical fixes and powerful improvements to\nthe Bitcoin consensus rules by using the unavoidable power of miners\nto filter transactions according to their own rules.  New features and\nfixes can be carved out of existing \"do anything\" space in the\nprotocol: like carving a statue out of a block of marble. Doing so\nreduces the incidence of flag days which are costly to coordinate and\nactively risky for users and avoids forcing constant software churn,\nwhich is bad for decentralization. Such changes are a strict narrowing\nof permissible actions. And as such, so long as they have a\nsuper-majority hashpower behind them any network forking that happens\nto result from them is automatically self-resolving.\n\nSo by contrast with hardfork the term softfork came into use to\ndescribe these _compatible_ protocol rule changes.\n\nThere is explicit support for compatible rule changes the bitcoin\nprotocol in the form of no-op opcodes and free form, non-enforced,\nversion fields (for example). Every fix or enhancement you've heard\nabout to Bitcoin's consensus rules (going back to the system's\noriginal author) was performed via some form of this mechanism.\n\nIn the modern form, the behavior to be soft-forked out is first made\nnon-standard (if it wasn't already-- they almost always are) meaning\nthat participants will not relay, mine, or display unconfirmed txn in\ntheir wallets transactions which violate the new rule.  But if a\nviolation shows up in a block, the block is still accepted.  After\nthat the blockchain itself is used to coordinate a vast super-majority\nof hashpower (recently 95% has been used) agreeing to enforce the new\nrule which results in confidence confidence of low disruption on\naccount of the enforcement. Then when the threshold is reached, they\nenforce (automatically).  Old software continues to enforce all the\nold rules they always enforced, the only difference in behavior\nrelates to non-standard transactions and contests between otherwise\nvalid blocks.  Even unupgraded participants can tell that the network\nis doing something new on account of the block version changing (and,\nfor example, Bitcoin Core warns users about this).\n\nThe primary disadvantage of this approach is that it only allowed you\nto carve functionality of of \"do anything\" space, which is quite\nnatural for some features (especially since the Bitcoin protocol\nincludes tons of do anything space)--- e.g. height in coinbase, DER\nstrictness, transactions that have integer overflow creating a\nkazillion coins-- but less natural for others.\n\nOf course, it's always possible for the majority of hashpower to have\nhidden transaction exclusion rules that _no one_ but them knows about\nand this cannot be prevented, but at least the mechanism proscribed in\nmodern soft-forks is transparent (the network tells you that its doing\nsomething you don't understand)."
            }
        ],
        "thread_summary": {
            "title": "Are 'soft forks' misnamed? ",
            "categories": [
                "bitcoin-dev",
                "was: Let's deploy BIP65 CHECKLOCKTIMEVERIFY!"
            ],
            "authors": [
                "Gregory Maxwell"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 4157
        }
    },
    {
        "title": "[bitcoin-dev] Versionbits BIP (009) minor revision proposal.",
        "thread_messages": [
            {
                "author": "Rusty Russell",
                "date": "2015-09-30T02:30:23",
                "message_text_only": "Hi all,\n\n        Pieter and Eric pointed out that the current BIP has miners\nturning off the bit as soon as it's locked in (75% testnet / 95%\nmainnet).  It's better for them to keep setting the bit until activation\n(2016 blocks later), so network adoption is visible.\n\nI'm not proposing another suggestion, though I note it for future:\nminers keep setting the bit for another 2016 blocks after activation,\nand have a consensus rule that rejects blocks without the bit.  That\nwould \"force\" upgrades on those last miners.  I feel we should see how\nthis works first.\n\nCheers,\nRusty.\n\ndiff --git a/bip-0009.mediawiki b/bip-0009.mediawiki\nindex c17ca15..b160810 100644\n--- a/bip-0009.mediawiki\n+++ b/bip-0009.mediawiki\n@@ -37,14 +37,15 @@ retarget period.\n Software which supports the change should begin by setting B in all blocks\n mined until it is resolved.\n \n-    if (BState == defined) {\n+    if (BState != activated && BState != failed) {\n         SetBInBlock();\n     }\n \n '''Success: Lock-in Threshold'''\n If bit B is set in 1916 (1512 on testnet) or\n more of the 2016 blocks within a retarget period, it is considered\n-''locked-in''.  Miners should stop setting bit B.\n+''locked-in''.  Miners should continue setting bit B, so uptake is\n+visible.\n \n     if (NextBlockHeight % 2016 == 0) {\n         if (BState == defined && Previous2016BlocksCountB() >= 1916) {\n@@ -57,7 +58,7 @@ more of the 2016 blocks within a retarget period, it is considered\n The consensus rules related to ''locked-in'' soft fork will be enforced in\n the second retarget period; ie. there is a one retarget period in\n which the remaining 5% can upgrade.  At the that activation block and\n-after, the bit B may be reused for a different soft fork.\n+after, miners should stop setting bit B, which may be reused for a different soft fork.\n \n     if (BState == locked-in && NextBlockHeight == BActiveHeight) {\n         BState = activated;"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-09-30T02:57:52",
                "message_text_only": "On Wed, Sep 30, 2015 at 2:30 AM, Rusty Russell <rusty at rustcorp.com.au> wrote:\n> Hi all,\n>\n>         Pieter and Eric pointed out that the current BIP has miners\n> turning off the bit as soon as it's locked in (75% testnet / 95%\n> mainnet).  It's better for them to keep setting the bit until activation\n> (2016 blocks later), so network adoption is visible.\n>\n> I'm not proposing another suggestion, though I note it for future:\n> miners keep setting the bit for another 2016 blocks after activation,\n> and have a consensus rule that rejects blocks without the bit.  That\n> would \"force\" upgrades on those last miners.  I feel we should see how\n> this works first.\n\n\nActually getting rid of the immediate bit forcing was something I\nconsidered to be an advantage of versionbits over prior work.\n\nConsider,  where possible we carve soft fork features out from\nnon-standard behavior.  Why do we do this?  Primarily so that\nnon-upgraded miners are not mining invalid transactions which\nimmediately cause short lived forks once the soft-fork activates.\n(Secondarily to protect wallets from unconfirmed TX that won't ever\nconfirm).\n\nThe version forcing, however, guarantees existence of the same forks\nthat the usage of non-standard prevented!\n\nI can, however, argue it the other way (and probably have in the\npast):  The bit is easily checked by thin clients, so thin clients\ncould use it to reject potentially ill-fated blocks from non-upgraded\nminers post switch (which otherwise they couldn't reject without\ninspecting the whole thing). This is an improvement over not forcing\nthe bit, and it's why I was previously in favor of the way the\nversions were enforced.  But, experience has played out other ways,\nand thin clients have not done anything useful with the version\nnumbers.\n\nA middle ground might be to require setting the bit for a period of\ntime after rule enforcing begins, but don't enforce the bit, just\nenforce validity of the block under new rules.  Thus a thin client\ncould treat these blocks with increased skepticism."
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-30T04:46:25",
                "message_text_only": "Good points, Greg.\n\nThe way I see it, this mechanism isn't really about \"voting\" - it's \nabout deployment of fairly uncontroversial changes with the minimum \namount of negative disruption. If we have reason to believe a particular \nBIP stands little chance of hitting the 95% mark relatively quickly, \nit's probably better not to deploy it...so this mechanism is most useful \nfor adding fairly uncontroversial features provided as default settings \nin product releases - and measuring adoption as best we can before \nactivating these features.\n\nThe current controversies around things like CLTV, CSV, etc... don't \nseem to revolve around these features themselves - there seems to be \nnear-unanimous agreement that these features are good (and most \ndisagreements regarding functionality are over quite minor nits, \nreally). Instead the controversies are much more likely to be around \ndeployment strategies.\n\nWhile I would like to get some form of explicit acknowledgment from \nminers that a new rule is in effect, the truth of the matter is we still \nlack a means to determine whether or not miners are actually enforcing \nthese rules...unless someone happens to mine a block that breaks the new \nrule. This is a bit frustrating...but that's just how it is.\n\nTo sum up, Version Bits is not a mechanism for vetting proposed changes \nand building consensus (that should take place BEFORE we assign bits). \nThis is a deployment mechanism for fairly uncontroversial changes. \nEither a BIP is relatively quickly adopted with overwhelming \nsupport...or else perhaps it's best to wait until it has sufficient \nsupport before attempting deployment (or perhaps not deploy it at all) - \nand ultimately we want these transitions to run as smoothly as possible. \nAs long as the BIPs are relatively uncontroversial, miners will most \nlikely continue to choose to cooperate in the interest of the health of \nthe network (and will use recommended default settings). Once clients \nhave better support for this, perhaps we can do more sophisticated \nsignaling.\n\n\n- Eric\n\n\n------ Original Message ------\nFrom: \"Gregory Maxwell\" <gmaxwell at gmail.com>\nTo: \"Rusty Russell\" <rusty at rustcorp.com.au>\nCc: \"Bitcoin Dev\" <bitcoin-dev at lists.linuxfoundation.org>; \"Peter Todd\" \n<pete at petertodd.org>; \"Pieter Wuille\" <pieter.wuille at gmail.com>; \"Eric \nLombrozo\" <elombrozo at gmail.com>\nSent: 9/29/2015 7:57:52 PM\nSubject: Re: Versionbits BIP (009) minor revision proposal.\n\n>On Wed, Sep 30, 2015 at 2:30 AM, Rusty Russell <rusty at rustcorp.com.au> \n>wrote:\n>>  Hi all,\n>>\n>>          Pieter and Eric pointed out that the current BIP has miners\n>>  turning off the bit as soon as it's locked in (75% testnet / 95%\n>>  mainnet).  It's better for them to keep setting the bit until \n>>activation\n>>  (2016 blocks later), so network adoption is visible.\n>>\n>>  I'm not proposing another suggestion, though I note it for future:\n>>  miners keep setting the bit for another 2016 blocks after activation,\n>>  and have a consensus rule that rejects blocks without the bit.  That\n>>  would \"force\" upgrades on those last miners.  I feel we should see \n>>how\n>>  this works first.\n>\n>\n>Actually getting rid of the immediate bit forcing was something I\n>considered to be an advantage of versionbits over prior work.\n>\n>Consider,  where possible we carve soft fork features out from\n>non-standard behavior.  Why do we do this?  Primarily so that\n>non-upgraded miners are not mining invalid transactions which\n>immediately cause short lived forks once the soft-fork activates.\n>(Secondarily to protect wallets from unconfirmed TX that won't ever\n>confirm).\n>\n>The version forcing, however, guarantees existence of the same forks\n>that the usage of non-standard prevented!\n>\n>I can, however, argue it the other way (and probably have in the\n>past):  The bit is easily checked by thin clients, so thin clients\n>could use it to reject potentially ill-fated blocks from non-upgraded\n>miners post switch (which otherwise they couldn't reject without\n>inspecting the whole thing). This is an improvement over not forcing\n>the bit, and it's why I was previously in favor of the way the\n>versions were enforced.  But, experience has played out other ways,\n>and thin clients have not done anything useful with the version\n>numbers.\n>\n>A middle ground might be to require setting the bit for a period of\n>time after rule enforcing begins, but don't enforce the bit, just\n>enforce validity of the block under new rules.  Thus a thin client\n>could treat these blocks with increased skepticism."
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-30T05:09:51",
                "message_text_only": ">While I would like to get some form of explicit acknowledgment from \n>miners that a new rule is in effect, the truth of the matter is we \n>still lack a means to determine whether or not miners are actually \n>enforcing these rules...unless someone happens to mine a block that \n>breaks the new rule. This is a bit frustrating...but that's just how it \n>is.\n>\n\nI should add that hard forks do provide us with a means to determine \nwhether or not miners are enforcing the new rules...but generally \nspeaking they risk far greater disruption if anything fails to go as \nplanned. Between the risk of clients accepting an occasional invalid \n\"confirmation\" or two and the risk of a total network partition, the \nformer seems far less serious. I believe the concerns regarding old \nclients can be remedied to a very large extent by means of a good \nawareness campaign.\n\n\n- Eric"
            }
        ],
        "thread_summary": {
            "title": "Versionbits BIP (009) minor revision proposal.",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Eric Lombrozo",
                "Gregory Maxwell"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 9370
        }
    },
    {
        "title": "[bitcoin-dev] Design Competition",
        "thread_messages": [
            {
                "author": "Richard Olsen",
                "date": "2015-09-30T06:37:07",
                "message_text_only": "All,\n\nWe are looking for participants in a Bitcoin related competition: the aim\nis to build a trading platform (initially for foreign exchange, other\nassets will follow) which lets participants settle their trades through the\nblockchain via coloured coins. To facilitate a quicker trade\nreconciliation, the use of a sidechain is a suggestion but by no means a\nrequirement. There will be an online briefing event today where we will\noutline the requirements in more detail, though much of it we have posted\non our website www.lykkex.com .\n\nAs we want this to be a community driven effort rather than something\nturning into a proprietary technology, all contributions will be made\navailable under a MIT license on Github.\n\nI look forward to answering your questions at the online briefing event or\nover email,\n\nThank you and kind regards,\nRichard Olsen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/95c65141/attachment-0001.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-09-30T07:16:01",
                "message_text_only": "I've also got a competition where the object is to build a spaceship \nusing only a watermelon, two donkeys, some duct tape, and a fire \nhydrant.\n\n------ Original Message ------\nFrom: \"Richard Olsen via bitcoin-dev\" \n<bitcoin-dev at lists.linuxfoundation.org>\nTo: \"bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org>\nSent: 9/29/2015 11:37:07 PM\nSubject: [bitcoin-dev] Design Competition\n\n>All,\n>\n>We are looking for participants in a Bitcoin related competition: the \n>aim is to build a trading platform (initially for foreign exchange, \n>other assets will follow) which lets participants settle their trades \n>through the blockchain via coloured coins. To facilitate a quicker \n>trade reconciliation, the use of a sidechain is a suggestion but by no \n>means a requirement. There will be an online briefing event today where \n>we will outline the requirements in more detail, though much of it we \n>have posted on our website www.lykkex.com .\n>\n>As we want this to be a community driven effort rather than something \n>turning into a proprietary technology, all contributions will be made \n>available under a MIT license on Github.\n>\n>I look forward to answering your questions at the online briefing event \n>or over email,\n>\n>Thank you and kind regards,\n>Richard Olsen\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/c322b7f5/attachment.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-09-30T11:03:15",
                "message_text_only": "On 9/30/2015 3:16 AM, Eric Lombrozo via bitcoin-dev wrote:\n> I've also got a competition where the object is to build a spaceship\n> using only a watermelon, two donkeys, some duct tape, and a fire hydrant.\n\nThere are many people interested in starting new services and who are \ninterested in hiring developers or at least partnering with them.  This \nis an important part of the ecosystem.  I have noticed both here and on \nReddit that when someone proposes an idea it goes one of two ways: \neither there is a large amount of interest if the person is well known \nor liked or; the person is accused of being a spammer or made fun of if \nthey are not well known or liked.  All this does is make the developers \nlook like a small fickle group who actively promote Bitcoin as a an \ninsiders' club (much like the Fed).  There should probably be a list \nwhere people can actively discuss proposed or ongoing projects and look \nfor developers to hire.\n\nRuss"
            },
            {
                "author": "Thomas Kerin",
                "date": "2015-09-30T12:22:36",
                "message_text_only": "Who is funding this?\n\nWhy not fund Core development?\nOn 30 Sep 2015 7:37 am, \"Richard Olsen via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> All,\n>\n> We are looking for participants in a Bitcoin related competition: the aim\n> is to build a trading platform (initially for foreign exchange, other\n> assets will follow) which lets participants settle their trades through the\n> blockchain via coloured coins. To facilitate a quicker trade\n> reconciliation, the use of a sidechain is a suggestion but by no means a\n> requirement. There will be an online briefing event today where we will\n> outline the requirements in more detail, though much of it we have posted\n> on our website www.lykkex.com .\n>\n> As we want this to be a community driven effort rather than something\n> turning into a proprietary technology, all contributions will be made\n> available under a MIT license on Github.\n>\n> I look forward to answering your questions at the online briefing event\n> or over email,\n>\n> Thank you and kind regards,\n> Richard Olsen\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/5e34964e/attachment.html>"
            },
            {
                "author": "richard.olsen at lykkex.com",
                "date": "2015-09-30T13:17:24",
                "message_text_only": "Lykke Corp based in Z\u00fcrich funds the competition.\n\n2 Mio Lykke coins (8'000 USD) is allocated to funding core development in next 3 months,\n\nRichard\n\n> On 30.09.2015, at 14:22, Thomas Kerin <thomas.kerin at gmail.com> wrote:\n> \n> Who is funding this?\n> \n> Why not fund Core development?\n> \n>> On 30 Sep 2015 7:37 am, \"Richard Olsen via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> All, \n>> \n>> We are looking for participants in a Bitcoin related competition: the aim is to build a trading platform (initially for foreign exchange, other assets will follow) which lets participants settle their trades through the blockchain via coloured coins. To facilitate a quicker trade reconciliation, the use of a sidechain is a suggestion but by no means a requirement. There will be an online briefing event today where we will outline the requirements in more detail, though much of it we have posted on our website  www.lykkex.com . \n>> \n>> As we want this to be a community driven  effort rather than something turning into a proprietary technology, all contributions will be made available under a MIT license on Github. \n>> \n>> I look forward to answering your questions at the online briefing event or over email,\n>> \n>> Thank you and kind regards,\n>> Richard Olsen \n>> \n>> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/55961225/attachment-0001.html>"
            },
            {
                "author": "Benjamin",
                "date": "2015-09-30T13:38:14",
                "message_text_only": "Hi Richard,\n\nits great that people with a lot of experience in financial markets take\ninterest in these topics. I don't think you will receive the best answers\nhere. The Bitcointalk Altcoin section is currently the best place for such\nannouncements. I believe there is room for a better board/list for new 2.0\nprojects. Bitcoin dev is not very welcoming to discussions/debates/projects\nwhich go beyond digital cash systems (assets, markets, etc.), as it is very\nfocused on the core problems which are under-funded.\n\nAnyone who wants to build a better venue for 2.0 projects feel free to\ncontact me. This could be a mailing list or an upgraded message board. Most\nsuch boards are project/currency specific, but there is one missing for\nannouncements.\n\nIn terms of markets on top of blockchains, I have sent a private email.\n\nRegards,\nBenjamin\n\nOn Wed, Sep 30, 2015 at 3:17 PM, Richard Olsen via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Lykke Corp based in Z\u00fcrich funds the competition.\n>\n> 2 Mio Lykke coins (8'000 USD) is allocated to funding core development in\n> next 3 months,\n>\n> Richard\n>\n> On 30.09.2015, at 14:22, Thomas Kerin <thomas.kerin at gmail.com> wrote:\n>\n> Who is funding this?\n>\n> Why not fund Core development?\n> On 30 Sep 2015 7:37 am, \"Richard Olsen via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> All,\n>>\n>> We are looking for participants in a Bitcoin related competition: the aim\n>> is to build a trading platform (initially for foreign exchange, other\n>> assets will follow) which lets participants settle their trades through the\n>> blockchain via coloured coins. To facilitate a quicker trade\n>> reconciliation, the use of a sidechain is a suggestion but by no means a\n>> requirement. There will be an online briefing event today where we will\n>> outline the requirements in more detail, though much of it we have posted\n>> on our website www.lykkex.com .\n>>\n>> As we want this to be a community driven effort rather than something\n>> turning into a proprietary technology, all contributions will be made\n>> available under a MIT license on Github.\n>>\n>> I look forward to answering your questions at the online briefing event\n>> or over email,\n>>\n>> Thank you and kind regards,\n>> Richard Olsen\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/c28a42b2/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-09-30T12:40:48",
                "message_text_only": "This sounds like a cool competition; it is also off-topic for this mailing\nlist, which is focused on bitcoin protocol and reference implementation\ndevelopment.\n\n\nOn Wed, Sep 30, 2015 at 2:37 AM, Richard Olsen via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> All,\n>\n> We are looking for participants in a Bitcoin related competition: the aim\n> is to build a trading platform (initially for foreign exchange, other\n> assets will follow) which lets participants settle their trades through the\n> blockchain via coloured coins. To facilitate a quicker trade\n> reconciliation, the use of a sidechain is a suggestion but by no means a\n> requirement. There will be an online briefing event today where we will\n> outline the requirements in more detail, though much of it we have posted\n> on our website www.lykkex.com .\n>\n> As we want this to be a community driven effort rather than something\n> turning into a proprietary technology, all contributions will be made\n> available under a MIT license on Github.\n>\n> I look forward to answering your questions at the online briefing event\n> or over email,\n>\n> Thank you and kind regards,\n> Richard Olsen\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/9cb0c23d/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Design Competition",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeff Garzik",
                "Eric Lombrozo",
                "Thomas Kerin",
                "Benjamin",
                "Milly Bitcoin",
                "Richard Olsen",
                "richard.olsen at lykkex.com"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 10923
        }
    }
]