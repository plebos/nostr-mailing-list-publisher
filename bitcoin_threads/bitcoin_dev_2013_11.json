[
    {
        "title": "[Bitcoin-development] BIP39 word list",
        "thread_messages": [
            {
                "author": "Brooks Boyd",
                "date": "2013-11-01T20:14:44",
                "message_text_only": "I was inspired to join the mailing list to comment on some of these\ndiscussions about BIP39, which I think will have great use in the Bitcoin\ncommunity and outside it as a way to transcribe binary data.\n\nThe one thought I had as the discussions about similar characters are\nresulting in culling words from the list, is that it only helps to validate\ninput, not help the user if it is incorrect.\n\nFor example, if both \"cat\" and \"eat\" were in the word list, and someone\nwrote down \"eat\", but later mis-translated it and put \"cat\" back into\ntranslator, the result would be a checksum error; \"cat\" is a different\nnumber, so the checksum would fail.\n\nAs it currently stands, \"cat\" would not be a valid word (\"eat\" is the real\nword, and no other number is \"cat\"), so the translator can throw a\ndifferent error which is more helpful (i.e. \"'cat' isn't a valid word\nchoice), but still doesn't get the user to the proper translation.\n\nWhat about if the wordlist included those \"words that are so similar to\neach other that we only kept one of them\" and had them all refer to the\nsame number? I propose the wordlist have the possibility of multiple words\non a single line, with the first word on the line being the \"primary\" or\n\"real\" word to be used, with the other similar words be included so that a\ntranslation program if it wanted to assist the user could fix their input\nfor them (verbosely or not), along the lines of \"'cat' isn't a valid word\nchoice; assuming you meant 'eat', which is valid\". You might still hit a\nchecksum error if that similar word is still the wrong word, but as it\nstands now, I know you culled a bunch of words from the wordlist as \"too\nsimilar\", but if I want to try and help the user fix a bad input, I need to\nwrite a translation program with a full english dictionary alongside the\nBIP39 dictionary.\n\nI'd be willing to create a pull request for such an update, but before I\ndelve into that, does this sound like a good idea? I could see it devolving\ninto a slippery slope if every number in the 2048 set had a dozen word\nvariations (misspellings, similar words, slang terms for the real word,\netc.) which could get confusing of how similar is similar enough to be\nadded as an alternate, and the standard would need to be clear that when\ntranslating binary to words, you only use the \"main\" word for that row, not\nany of the variations.\n\nMidnightLightning\n\n\n> I've just pushed updated wordlist which is filtered to similar characters\ntaken from this matrix.\n> BIP39 now consider following character pairs as similar:\n>         similar = (\n>             ('a', 'c'), ('a', 'e'), ('a', 'o'),\n>             ('b', 'd'), ('b', 'h'), ('b', 'p'), ('b', 'q'), ('b', 'r'),\n>             ('c', 'e'), ('c', 'g'), ('c', 'n'), ('c', 'o'), ('c', 'q'),\n('c', 'u'),\n>             ('d', 'g'), ('d', 'h'), ('d', 'o'), ('d', 'p'), ('d', 'q'),\n>             ('e', 'f'), ('e', 'o'),\n>             ('f', 'i'), ('f', 'j'), ('f', 'l'), ('f', 'p'), ('f', 't'),\n>             ('g', 'j'), ('g', 'o'), ('g', 'p'), ('g', 'q'), ('g', 'y'),\n>             ('h', 'k'), ('h', 'l'), ('h', 'm'), ('h', 'n'), ('h', 'r'),\n>             ('i', 'j'), ('i', 'l'), ('i', 't'), ('i', 'y'),\n>             ('j', 'l'), ('j', 'p'), ('j', 'q'), ('j', 'y'),\n>             ('k', 'x'),\n>             ('l', 't'),\n>             ('m', 'n'), ('m', 'w'),\n>             ('n', 'u'), ('n', 'z'),\n>             ('o', 'p'), ('o', 'q'), ('o', 'u'), ('o', 'v'),\n>             ('p', 'q'), ('p', 'r'),\n>             ('q', 'y'),\n>             ('s', 'z'),\n>             ('u', 'v'), ('u', 'w'), ('u', 'y'),\n>             ('v', 'w'), ('v', 'y')\n>         )\n> Feel free to review and comment current wordlist, but I think we're\nslowly moving forward final list.\n> slush\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131101/94fd83a9/attachment.html>"
            },
            {
                "author": "Allen Piscitello",
                "date": "2013-11-01T23:41:53",
                "message_text_only": "The problem with this is that you might have word A which is similar to B,\nbut B is also similar to C.  So we scrub B from the list, someone enters B,\nand we have no way to know if it means A or C.  It leads to a much more\ncomplicated scheme to ensure that all errors are correctable.\n\nScrubbing A, B, and C is preferable, since it leads to no ambiguity and\nthere is no need to try to correct an error.\n\n\nOn Fri, Nov 1, 2013 at 3:14 PM, Brooks Boyd <boydb at midnightdesign.ws> wrote:\n\n> I was inspired to join the mailing list to comment on some of these\n> discussions about BIP39, which I think will have great use in the Bitcoin\n> community and outside it as a way to transcribe binary data.\n>\n> The one thought I had as the discussions about similar characters are\n> resulting in culling words from the list, is that it only helps to validate\n> input, not help the user if it is incorrect.\n>\n> For example, if both \"cat\" and \"eat\" were in the word list, and someone\n> wrote down \"eat\", but later mis-translated it and put \"cat\" back into\n> translator, the result would be a checksum error; \"cat\" is a different\n> number, so the checksum would fail.\n>\n> As it currently stands, \"cat\" would not be a valid word (\"eat\" is the real\n> word, and no other number is \"cat\"), so the translator can throw a\n> different error which is more helpful (i.e. \"'cat' isn't a valid word\n> choice), but still doesn't get the user to the proper translation.\n>\n> What about if the wordlist included those \"words that are so similar to\n> each other that we only kept one of them\" and had them all refer to the\n> same number? I propose the wordlist have the possibility of multiple words\n> on a single line, with the first word on the line being the \"primary\" or\n> \"real\" word to be used, with the other similar words be included so that a\n> translation program if it wanted to assist the user could fix their input\n> for them (verbosely or not), along the lines of \"'cat' isn't a valid word\n> choice; assuming you meant 'eat', which is valid\". You might still hit a\n> checksum error if that similar word is still the wrong word, but as it\n> stands now, I know you culled a bunch of words from the wordlist as \"too\n> similar\", but if I want to try and help the user fix a bad input, I need to\n> write a translation program with a full english dictionary alongside the\n> BIP39 dictionary.\n>\n> I'd be willing to create a pull request for such an update, but before I\n> delve into that, does this sound like a good idea? I could see it devolving\n> into a slippery slope if every number in the 2048 set had a dozen word\n> variations (misspellings, similar words, slang terms for the real word,\n> etc.) which could get confusing of how similar is similar enough to be\n> added as an alternate, and the standard would need to be clear that when\n> translating binary to words, you only use the \"main\" word for that row, not\n> any of the variations.\n>\n> MidnightLightning\n>\n>\n> > I've just pushed updated wordlist which is filtered to similar\n> characters taken from this matrix.\n> > BIP39 now consider following character pairs as similar:\n> >         similar = (\n> >             ('a', 'c'), ('a', 'e'), ('a', 'o'),\n> >             ('b', 'd'), ('b', 'h'), ('b', 'p'), ('b', 'q'), ('b', 'r'),\n> >             ('c', 'e'), ('c', 'g'), ('c', 'n'), ('c', 'o'), ('c', 'q'),\n> ('c', 'u'),\n> >             ('d', 'g'), ('d', 'h'), ('d', 'o'), ('d', 'p'), ('d', 'q'),\n> >             ('e', 'f'), ('e', 'o'),\n> >             ('f', 'i'), ('f', 'j'), ('f', 'l'), ('f', 'p'), ('f', 't'),\n> >             ('g', 'j'), ('g', 'o'), ('g', 'p'), ('g', 'q'), ('g', 'y'),\n> >             ('h', 'k'), ('h', 'l'), ('h', 'm'), ('h', 'n'), ('h', 'r'),\n> >             ('i', 'j'), ('i', 'l'), ('i', 't'), ('i', 'y'),\n> >             ('j', 'l'), ('j', 'p'), ('j', 'q'), ('j', 'y'),\n> >             ('k', 'x'),\n> >             ('l', 't'),\n> >             ('m', 'n'), ('m', 'w'),\n> >             ('n', 'u'), ('n', 'z'),\n> >             ('o', 'p'), ('o', 'q'), ('o', 'u'), ('o', 'v'),\n> >             ('p', 'q'), ('p', 'r'),\n> >             ('q', 'y'),\n> >             ('s', 'z'),\n> >             ('u', 'v'), ('u', 'w'), ('u', 'y'),\n> >             ('v', 'w'), ('v', 'y')\n> >         )\n> > Feel free to review and comment current wordlist, but I think we're\n> slowly moving forward final list.\n> > slush\n>\n>\n> ------------------------------------------------------------------------------\n> Android is increasing in popularity, but the open development platform that\n> developers love is also attractive to malware creators. Download this white\n> paper to learn more about secure code signing practices that can help keep\n> Android apps secure.\n> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131101/2a99b12c/attachment.html>"
            },
            {
                "author": "slush",
                "date": "2013-11-02T00:04:11",
                "message_text_only": "Hi Brooks,\n\nI've been already thinking about eat -> cat typing mistake. Actually there\nmay be simplier solution than having wordlist with duplicated words.\nBecause there's already a mapping of similar characters in the source code\n(currently only in unit test, but it can be moved), when user type a word\nwhich isn't in wordlist, application may try to use such mapping to find a\ncombination which actually is in the mapping. This may be disambiguous in\nsome cases, but giving a choice between few words may be better than hard\nfail. And it is actually quite easy to implement. Although I think\napplication can do such smart suggestions and help user to recover badly\nwritten mnemonic, I don't think it is necessary to standardize such method\ndirectly into BIP. It may or may not be implemented by developers and it is\njust nice to have feature.\n\nExample:\n\nuser type ear, but it isn't in wordlist.\n\nRegards the mapping,\nE is similar to A, C, F, O\nA is similar to E, C, O\nR is similar to B, P, H\n\nSo application can calculate combinations of possible characters:\n\na) when app consider than the the user mistyped only one character\nAAR, CAR, FAR, OAR\nEER, ECR, EOR\nEAB, EAP, EAH\n\nb) when app consider than user maybe mistyped more characters, it may do\nfull combination matrix\nAEB,  ACB, AOB,  ... OEH, OCH, OOH\n\nand then ask user to select only these combinations which are actually\npresented in the wordlist. In this particular case it may be only CAR or\nFAR (both cannot be in the wordlist because of rules in similarity).\n\nMarek\n\n\nOn Fri, Nov 1, 2013 at 9:14 PM, Brooks Boyd <boydb at midnightdesign.ws> wrote:\n\n> I was inspired to join the mailing list to comment on some of these\n> discussions about BIP39, which I think will have great use in the Bitcoin\n> community and outside it as a way to transcribe binary data.\n>\n> The one thought I had as the discussions about similar characters are\n> resulting in culling words from the list, is that it only helps to validate\n> input, not help the user if it is incorrect.\n>\n> For example, if both \"cat\" and \"eat\" were in the word list, and someone\n> wrote down \"eat\", but later mis-translated it and put \"cat\" back into\n> translator, the result would be a checksum error; \"cat\" is a different\n> number, so the checksum would fail.\n>\n> As it currently stands, \"cat\" would not be a valid word (\"eat\" is the real\n> word, and no other number is \"cat\"), so the translator can throw a\n> different error which is more helpful (i.e. \"'cat' isn't a valid word\n> choice), but still doesn't get the user to the proper translation.\n>\n> What about if the wordlist included those \"words that are so similar to\n> each other that we only kept one of them\" and had them all refer to the\n> same number? I propose the wordlist have the possibility of multiple words\n> on a single line, with the first word on the line being the \"primary\" or\n> \"real\" word to be used, with the other similar words be included so that a\n> translation program if it wanted to assist the user could fix their input\n> for them (verbosely or not), along the lines of \"'cat' isn't a valid word\n> choice; assuming you meant 'eat', which is valid\". You might still hit a\n> checksum error if that similar word is still the wrong word, but as it\n> stands now, I know you culled a bunch of words from the wordlist as \"too\n> similar\", but if I want to try and help the user fix a bad input, I need to\n> write a translation program with a full english dictionary alongside the\n> BIP39 dictionary.\n>\n> I'd be willing to create a pull request for such an update, but before I\n> delve into that, does this sound like a good idea? I could see it devolving\n> into a slippery slope if every number in the 2048 set had a dozen word\n> variations (misspellings, similar words, slang terms for the real word,\n> etc.) which could get confusing of how similar is similar enough to be\n> added as an alternate, and the standard would need to be clear that when\n> translating binary to words, you only use the \"main\" word for that row, not\n> any of the variations.\n>\n> MidnightLightning\n>\n>\n> > I've just pushed updated wordlist which is filtered to similar\n> characters taken from this matrix.\n> > BIP39 now consider following character pairs as similar:\n> >         similar = (\n> >             ('a', 'c'), ('a', 'e'), ('a', 'o'),\n> >             ('b', 'd'), ('b', 'h'), ('b', 'p'), ('b', 'q'), ('b', 'r'),\n> >             ('c', 'e'), ('c', 'g'), ('c', 'n'), ('c', 'o'), ('c', 'q'),\n> ('c', 'u'),\n> >             ('d', 'g'), ('d', 'h'), ('d', 'o'), ('d', 'p'), ('d', 'q'),\n> >             ('e', 'f'), ('e', 'o'),\n> >             ('f', 'i'), ('f', 'j'), ('f', 'l'), ('f', 'p'), ('f', 't'),\n> >             ('g', 'j'), ('g', 'o'), ('g', 'p'), ('g', 'q'), ('g', 'y'),\n> >             ('h', 'k'), ('h', 'l'), ('h', 'm'), ('h', 'n'), ('h', 'r'),\n> >             ('i', 'j'), ('i', 'l'), ('i', 't'), ('i', 'y'),\n> >             ('j', 'l'), ('j', 'p'), ('j', 'q'), ('j', 'y'),\n> >             ('k', 'x'),\n> >             ('l', 't'),\n> >             ('m', 'n'), ('m', 'w'),\n> >             ('n', 'u'), ('n', 'z'),\n> >             ('o', 'p'), ('o', 'q'), ('o', 'u'), ('o', 'v'),\n> >             ('p', 'q'), ('p', 'r'),\n> >             ('q', 'y'),\n> >             ('s', 'z'),\n> >             ('u', 'v'), ('u', 'w'), ('u', 'y'),\n> >             ('v', 'w'), ('v', 'y')\n> >         )\n> > Feel free to review and comment current wordlist, but I think we're\n> slowly moving forward final list.\n> > slush\n>\n>\n> ------------------------------------------------------------------------------\n> Android is increasing in popularity, but the open development platform that\n> developers love is also attractive to malware creators. Download this white\n> paper to learn more about secure code signing practices that can help keep\n> Android apps secure.\n> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/26d9c9a1/attachment.html>"
            },
            {
                "author": "Brooks Boyd",
                "date": "2013-11-02T04:31:33",
                "message_text_only": "That would be a way to go, though iterating through all possibilities of a\nsimilar letter misspell would take significantly more processing (4x3x3\n= 36 total possibilities, only to cull it back to 2, in your example), than\niterating through a list of pre-calculated possibilities. It's definitely\nnot a hard computation on any modern device, though, and depending on how\n\"helpful\" the program wants to try to be, it could even try help with\nmisspellings due to hitting a keyboard key next to the correct one or\nhitting a letter twice, depending on how big a comparison matrix it wants\nto create.\n\nI do agree it should not be required for clients implementing the BIP to\nhelp fix mis-translations, though keeping the similar letter unit test in\nthere I like, since it helps convey the thought that went into culling some\nwords from the dictionary. Though to Allen's point, what did happen with\nthe words that were found to be similar; was one of the similar words left\nin the list or were all the similar words removed?\n\nBrooks\nMidnightLightning\n\n\nOn Fri, Nov 1, 2013 at 7:04 PM, slush <slush at centrum.cz> wrote:\n\n> Hi Brooks,\n>\n> I've been already thinking about eat -> cat typing mistake. Actually there\n> may be simplier solution than having wordlist with duplicated words.\n> Because there's already a mapping of similar characters in the source code\n> (currently only in unit test, but it can be moved), when user type a word\n> which isn't in wordlist, application may try to use such mapping to find a\n> combination which actually is in the mapping. This may be disambiguous in\n> some cases, but giving a choice between few words may be better than hard\n> fail. And it is actually quite easy to implement. Although I think\n> application can do such smart suggestions and help user to recover badly\n> written mnemonic, I don't think it is necessary to standardize such method\n> directly into BIP. It may or may not be implemented by developers and it is\n> just nice to have feature.\n>\n> Example:\n>\n> user type ear, but it isn't in wordlist.\n>\n> Regards the mapping,\n> E is similar to A, C, F, O\n> A is similar to E, C, O\n> R is similar to B, P, H\n>\n> So application can calculate combinations of possible characters:\n>\n> a) when app consider than the the user mistyped only one character\n> AAR, CAR, FAR, OAR\n> EER, ECR, EOR\n> EAB, EAP, EAH\n>\n> b) when app consider than user maybe mistyped more characters, it may do\n> full combination matrix\n> AEB,  ACB, AOB,  ... OEH, OCH, OOH\n>\n> and then ask user to select only these combinations which are actually\n> presented in the wordlist. In this particular case it may be only CAR or\n> FAR (both cannot be in the wordlist because of rules in similarity).\n>\n> Marek\n>\n>\n> On Fri, Nov 1, 2013 at 9:14 PM, Brooks Boyd <boydb at midnightdesign.ws>wrote:\n>\n>> I was inspired to join the mailing list to comment on some of these\n>> discussions about BIP39, which I think will have great use in the Bitcoin\n>> community and outside it as a way to transcribe binary data.\n>>\n>> The one thought I had as the discussions about similar characters are\n>> resulting in culling words from the list, is that it only helps to validate\n>> input, not help the user if it is incorrect.\n>>\n>> For example, if both \"cat\" and \"eat\" were in the word list, and someone\n>> wrote down \"eat\", but later mis-translated it and put \"cat\" back into\n>> translator, the result would be a checksum error; \"cat\" is a different\n>> number, so the checksum would fail.\n>>\n>> As it currently stands, \"cat\" would not be a valid word (\"eat\" is the\n>> real word, and no other number is \"cat\"), so the translator can throw a\n>> different error which is more helpful (i.e. \"'cat' isn't a valid word\n>> choice), but still doesn't get the user to the proper translation.\n>>\n>> What about if the wordlist included those \"words that are so similar to\n>> each other that we only kept one of them\" and had them all refer to the\n>> same number? I propose the wordlist have the possibility of multiple words\n>> on a single line, with the first word on the line being the \"primary\" or\n>> \"real\" word to be used, with the other similar words be included so that a\n>> translation program if it wanted to assist the user could fix their input\n>> for them (verbosely or not), along the lines of \"'cat' isn't a valid word\n>> choice; assuming you meant 'eat', which is valid\". You might still hit a\n>> checksum error if that similar word is still the wrong word, but as it\n>> stands now, I know you culled a bunch of words from the wordlist as \"too\n>> similar\", but if I want to try and help the user fix a bad input, I need to\n>> write a translation program with a full english dictionary alongside the\n>> BIP39 dictionary.\n>>\n>> I'd be willing to create a pull request for such an update, but before I\n>> delve into that, does this sound like a good idea? I could see it devolving\n>> into a slippery slope if every number in the 2048 set had a dozen word\n>> variations (misspellings, similar words, slang terms for the real word,\n>> etc.) which could get confusing of how similar is similar enough to be\n>> added as an alternate, and the standard would need to be clear that when\n>> translating binary to words, you only use the \"main\" word for that row, not\n>> any of the variations.\n>>\n>> MidnightLightning\n>>\n>>\n>> > I've just pushed updated wordlist which is filtered to similar\n>> characters taken from this matrix.\n>> > BIP39 now consider following character pairs as similar:\n>> >         similar = (\n>> >             ('a', 'c'), ('a', 'e'), ('a', 'o'),\n>> >             ('b', 'd'), ('b', 'h'), ('b', 'p'), ('b', 'q'), ('b', 'r'),\n>> >             ('c', 'e'), ('c', 'g'), ('c', 'n'), ('c', 'o'), ('c', 'q'),\n>> ('c', 'u'),\n>> >             ('d', 'g'), ('d', 'h'), ('d', 'o'), ('d', 'p'), ('d', 'q'),\n>> >             ('e', 'f'), ('e', 'o'),\n>> >             ('f', 'i'), ('f', 'j'), ('f', 'l'), ('f', 'p'), ('f', 't'),\n>> >             ('g', 'j'), ('g', 'o'), ('g', 'p'), ('g', 'q'), ('g', 'y'),\n>> >             ('h', 'k'), ('h', 'l'), ('h', 'm'), ('h', 'n'), ('h', 'r'),\n>> >             ('i', 'j'), ('i', 'l'), ('i', 't'), ('i', 'y'),\n>> >             ('j', 'l'), ('j', 'p'), ('j', 'q'), ('j', 'y'),\n>> >             ('k', 'x'),\n>> >             ('l', 't'),\n>> >             ('m', 'n'), ('m', 'w'),\n>> >             ('n', 'u'), ('n', 'z'),\n>> >             ('o', 'p'), ('o', 'q'), ('o', 'u'), ('o', 'v'),\n>> >             ('p', 'q'), ('p', 'r'),\n>> >             ('q', 'y'),\n>> >             ('s', 'z'),\n>> >             ('u', 'v'), ('u', 'w'), ('u', 'y'),\n>> >             ('v', 'w'), ('v', 'y')\n>> >         )\n>> > Feel free to review and comment current wordlist, but I think we're\n>> slowly moving forward final list.\n>> > slush\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Android is increasing in popularity, but the open development platform\n>> that\n>> developers love is also attractive to malware creators. Download this\n>> white\n>> paper to learn more about secure code signing practices that can help keep\n>> Android apps secure.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131101/3609f0da/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP39 word list",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "slush",
                "Allen Piscitello",
                "Brooks Boyd"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 22898
        }
    },
    {
        "title": "[Bitcoin-development] Message Signing based authentication",
        "thread_messages": [
            {
                "author": "bitcoingrant at gmx.com",
                "date": "2013-11-02T05:01:43",
                "message_text_only": "Passwords are inefficient by design: frequently we hear news from Sony, Square Enix, Adobe, and various others about passwords being compromised, databases being copied and stolen. This story remains true in the Bitcoin space. In light of the recent Bitcointalk forum breach echoes an increasing need for passwords to become a thing of the past.\nIn celebration of the 5 year anniversary of the Bitcoin whitepaper, we are delighted to introduce the Message Signing based authentication method.\nIn brief, the authentication work as follows:\nServer provides a token for the client to sign.\nclient passes the signed message and the bitcoin address back to the server.\nserver validates the message and honors the alias (optional) and bitcoin address as identification.\nhttp://forums.bitcoingrant.org/\nAbove is a proof of concept forum that utilize this authentication method. Following Kerckhoffs's principle, this forum only stores the signed message and bitcoin address the users provide the first time they use the site, both are public information. In addition, there is no database, everything is simply an RSS feed. For the sake of usability we have included a redis for the sessions, at the cost of additional exposure to potential risks: users no longer need to sign a token every time they wish to post.\nAll source code will be available on github in the next few days. \nWe welcome any feedback or suggestions.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/460bbdcc/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-11-02T05:54:28",
                "message_text_only": "On Saturday, November 02, 2013 5:01:43 AM bitcoingrant at gmx.com wrote:\n> In celebration of the 5 year anniversary of the Bitcoin whitepaper, we are\n> delighted to introduce the Message Signing based authentication method. In\n> brief, the authentication work as follows:\n> Server provides a token for the client to sign.\n> client passes the signed message and the bitcoin address back to the\n> server. server validates the message and honors the alias (optional) and\n> bitcoin address as identification. http://forums.bitcoingrant.org/\n> Above is a proof of concept forum that utilize this authentication method.\n\nCongratulations! You've reinvented what Eligius and Bitcoin-OTC have been \ndoing for years! :)\n\nThere's no reason to ask the user to provide the address every time, though...\n\nLuke"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-11-02T13:02:58",
                "message_text_only": "On Sat, Nov 2, 2013 at 6:01 AM, <bitcoingrant at gmx.com> wrote:\n\n> In brief, the authentication work as follows:\n>\n>\n>\n> Server provides a token for the client to sign.\n>\n> client passes the signed message and the bitcoin address back to the\n> server.\n>\n> server validates the message and honors the alias (optional) and bitcoin\n> address as identification.\n>\n\nhttp://pilif.github.io/2008/05/why-is-nobody-using-ssl-client-certificates/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/6892fd9d/attachment.html>"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-11-02T13:16:12",
                "message_text_only": "On 2 November 2013 14:02, Mike Hearn <mike at plan99.net> wrote:\n\n> On Sat, Nov 2, 2013 at 6:01 AM, <bitcoingrant at gmx.com> wrote:\n>\n>> In brief, the authentication work as follows:\n>>\n>>\n>>\n>> Server provides a token for the client to sign.\n>>\n>> client passes the signed message and the bitcoin address back to the\n>> server.\n>>\n>> server validates the message and honors the alias (optional) and bitcoin\n>> address as identification.\n>>\n>\n> http://pilif.github.io/2008/05/why-is-nobody-using-ssl-client-certificates/\n>\n\nI actually use client certificates for almost all of my authentication.\n\nIt's true that the browser manufacturers have created an UX which is not\nideal, and very little effort is made to improve it.  But it is possible.\nSee this project from Mozilla labs.\n\nhttp://www.azarask.in/blog/post/identity-in-the-browser-firefox/\n\nUnfortunately this got killed :(\n\nMore popular is the trusted third party model like OAuth or Persona.\nThere's a conflict of interest as well, because browser manufacturers are\noften identity providers too, so there is an incentive to push TTP\ntechnology.\n\nThere's two elements here.  One is paswordless login (which I love).  The\nother is who controls your identity.  I like to control my own identity (in\nmy browser) using PKI.  But facebook and the big webmail providers have a\nlions share of the market.\n\nThe way to shift the balance is to offer the right incentives.\n\n\n>\n>\n> ------------------------------------------------------------------------------\n> Android is increasing in popularity, but the open development platform that\n> developers love is also attractive to malware creators. Download this white\n> paper to learn more about secure code signing practices that can help keep\n> Android apps secure.\n> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/1aaf3dcc/attachment.html>"
            },
            {
                "author": "Hannu Kotipalo",
                "date": "2013-11-02T13:19:51",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 02.11.2013 15:02, Mike Hearn wrote:\n> \n> http://pilif.github.io/2008/05/why-is-nobody-using-ssl-client-certificates/\n>\n> \nMaybe this is a bit off-topic, but the *real* answer to the question\n\"why-is-nobody-using-ssl-client-certificates\" is that it would force\nwww pages to be encrypted and would make it a lot more difficult for\nNSA to log www-trafic. So they have been made not-user-friendly by\ndefault.\n\nBut what you think about this:\n\"White paper on passwordless secure login (based on bitcoin/bitmessage\ntechnology)\"\nhttps://bitcointalk.org/index.php?topic=323360.0\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niEYEARECAAYFAlJ0+/cACgkQvafo1Ths1Sw5FwCgxdJB/lazDzxRos1ogSfJQo0V\nEl4AnjyHxWjOXG6qjcTcWvccty+03xRa\n=BikE\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-11-02T16:26:05",
                "message_text_only": "Guys, identity systems for the web are off-topic for this list. Other than\nthe anonymous passports/SINs/fidelity bond ideas, Bitcoin doesn't have any\nrelevance to it.\n\nOn Sat, Nov 2, 2013 at 2:19 PM, Hannu Kotipalo <hannu.kotipalo at iki.fi>wrote:\n\n> Maybe this is a bit off-topic, but the *real* answer to the question\n> \"why-is-nobody-using-ssl-client-certificates\" is that it would force\n> www pages to be encrypted and would make it a lot more difficult for\n> NSA to log www-trafic.\n>\n\nNo, it wouldn't. You can log a user in using SSL and then redirect the user\nback to an encrypted page, using cookies for the rest of the session.\nPlease don't clutter up this list with conspiracy theories. The brutal\nreality is that identity is a hard problem.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/c202bc05/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-11-02T16:26:32",
                "message_text_only": "> No, it wouldn't. You can log a user in using SSL and then redirect the\nuser back to an encrypted page\n\nsorry, I meant unencrypted page of course\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/15fd1508/attachment.html>"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-11-02T16:52:20",
                "message_text_only": "On 2 November 2013 17:26, Mike Hearn <mike at plan99.net> wrote:\n\n> Guys, identity systems for the web are off-topic for this list. Other than\n> the anonymous passports/SINs/fidelity bond ideas, Bitcoin doesn't have any\n> relevance to it.\n>\n> On Sat, Nov 2, 2013 at 2:19 PM, Hannu Kotipalo <hannu.kotipalo at iki.fi>wrote:\n>\n>> Maybe this is a bit off-topic, but the *real* answer to the question\n>> \"why-is-nobody-using-ssl-client-certificates\" is that it would force\n>> www pages to be encrypted and would make it a lot more difficult for\n>> NSA to log www-trafic.\n>>\n>\n> No, it wouldn't. You can log a user in using SSL and then redirect the\n> user back to an encrypted page, using cookies for the rest of the session.\n> Please don't clutter up this list with conspiracy theories. The brutal\n> reality is that identity is a hard problem.\n>\n\nIdentity need not be a hard problem.  In my view it is a solved problem.\n\nYou have a real world entity translated to a digital format.  Yes that can\nbe slightly ambiguous at time, naming is hard, and people do get this wrong\nfrequently.\n\nThe most common problem is to name something in a way that does not scale.\nThe solution to this problem is rather easy, and that is to use a URI to\nname something, which makes it global and scalable.\n\nIn the case of bitcoin you could have use the bitcion URI scheme\n\nbitcion:1fhdjkfhjksf...\n\n\n>\n>\n> ------------------------------------------------------------------------------\n> Android is increasing in popularity, but the open development platform that\n> developers love is also attractive to malware creators. Download this white\n> paper to learn more about secure code signing practices that can help keep\n> Android apps secure.\n> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/502938fc/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-11-02T17:08:04",
                "message_text_only": "On Sat, Nov 2, 2013 at 12:52 PM, Melvin Carvalho\n<melvincarvalho at gmail.com> wrote:\n> Identity need not be a hard problem.  In my view it is a solved problem.\n\n\nYes:  https://en.bitcoin.it/wiki/Identity_protocol_v1"
            },
            {
                "author": "Hannu Kotipalo",
                "date": "2013-11-02T17:16:46",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 02.11.2013 19:08, Jeff Garzik wrote:\n> On Sat, Nov 2, 2013 at 12:52 PM, Melvin Carvalho \n> <melvincarvalho at gmail.com> wrote:\n>> Identity need not be a hard problem.  In my view it is a solved\n>> problem.\n> \n> \n> Yes:  https://en.bitcoin.it/wiki/Identity_protocol_v1\n> \n\nWell in the view of an average internet browser, it is not a solved\nproblem neither does this identity protocol solve it.\n\nBut Mike is correct, this is a wrong place to discuss about it.\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niEYEARECAAYFAlJ1M30ACgkQvafo1Ths1SxypQCgor9LQTyKnlr0gByMPPJRQF6U\nLpIAnRMj/udBSDJOK+2JP0hhiG1Bk81d\n=tcpx\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Johnathan Corgan",
                "date": "2013-11-02T21:14:22",
                "message_text_only": "On 11/01/2013 10:01 PM, bitcoingrant at gmx.com wrote:\n\n> Server provides a token for the client to sign.\n\nAnyone else concerned about signing an arbitrary string?  Could be a\nhash of $EVIL_DOCUMENT, no?  I'd want to XOR the string with my own\nrandomly generated nonce, sign that, then pass the nonce and the\nsignature back to the server for verification.\n\n-- \nJohnathan Corgan, Corgan Labs\nSDR Training and Development Services\nhttp://corganlabs.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: johnathan.vcf\nType: text/x-vcard\nSize: 334 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/09685fb5/attachment.vcf>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 230 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/09685fb5/attachment.sig>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-11-02T21:51:22",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOr SIGHASH of a transaction spending those coins or updating the SIN...\n\nOn 11/2/13 2:14 PM, Johnathan Corgan wrote:> On 11/01/2013 10:01 PM,\nbitcoingrant at gmx.com wrote:\n> \n>> Server provides a token for the client to sign.\n> \n> Anyone else concerned about signing an arbitrary string?  Could be\n> a hash of $EVIL_DOCUMENT, no?  I'd want to XOR the string with my\n> own randomly generated nonce, sign that, then pass the nonce and\n> the signature back to the server for verification.\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.19 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJSdXPaAAoJEAdzVfsmodw4+m8P/1Ce/PwZOYfiFuFJ8pmT2tb2\nro7tw7zSr12RSTvs+qRl7lDzJzQ6BDXOdXZCkcU0Vj3TDm8fdrrXN/iw3iQYU/5Y\n3K7hj2mGqQUMovCLw0CbrMWrMvor7FhO6MZsRwe0+VxDV/dDrX5f5vSEhnkR26be\nNrzOFU4hqGM3R4eLq8Bmw5rVD/VCrRzKoXXAvJb1EwM1+fQPjKi+bNMJu3reyfXU\n5eMbbiM6tUMmPXy9M6vZrN+6ad53x3KUVP6+/hXxsrnfPp57WQzRZlvwTo/qdJ1C\nOxl71m6o2zkXbLTFmg1xmK/A4V1BPTLD6nLDIsw+wTBBfdn22pfDv6Q8d3VRctrd\n6x+PMkwysoMjhemmkXCY/7G9GD6AGsrYSqIShSULd9QO5WxAFzRO01ewiRUCUFHi\nDn0LEjy8/R/CWK3jvj9uL3vQh9DLdOtqf/X7cEtjF3LThVP+stFTsmXObhTh/8Ai\nYYjpnwOFG5ZtDzRZfP3OCwyhqlsaMlNgN4xnyR4GPaoJRP3a0zllblIbTWzg6nhY\njbON5Ec9N9txGhagYOoAvcQYqGyJdffkBzW82CRUsFYuYYmW2oLUQXPhAGDBIzzj\ng/7RjMlM1OEp3qctxMZQlrTj7VJmhD768PRLh2XvEDmEC5Qb8Tcq28Nq5t85/O/6\ni3+pzT5rMuiIZWLx7Msv\n=tAUY\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Allen Piscitello",
                "date": "2013-11-03T00:29:28",
                "message_text_only": "This was one of my concerns when implementing a scheme where you sign a\nrefund transaction before the original transaction is broadcast.  I\noriginally tried to pass a hash and have the server sign it.  However, I\nhad no way to know that what I was signing wasn't a transaction that was\nspending my coins!  So I changed the code to require sending the full\ntransaction, not just the hash.  The other way to mitigate this is through\nnot having any unspent outputs from this key.\n\nFor authentication, you could have both a user-generated and\nserver-generated portion, so that you signed something that clearly had\ndata from you, so even if the server-data was a hash of $EVIL_DOCUMENT, you\nhave clear plausible deniability in that your data that is also signed is\n\"ATTEMPTING LOGIN TO XYZ.COM Hash($EVIL_DOCUMENT)\".\n\n\nOn Sat, Nov 2, 2013 at 4:51 PM, Mark Friedenbach <mark at monetize.io> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> Or SIGHASH of a transaction spending those coins or updating the SIN...\n>\n> On 11/2/13 2:14 PM, Johnathan Corgan wrote:> On 11/01/2013 10:01 PM,\n> bitcoingrant at gmx.com wrote:\n> >\n> >> Server provides a token for the client to sign.\n> >\n> > Anyone else concerned about signing an arbitrary string?  Could be\n> > a hash of $EVIL_DOCUMENT, no?  I'd want to XOR the string with my\n> > own randomly generated nonce, sign that, then pass the nonce and\n> > the signature back to the server for verification.\n> >\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG/MacGPG2 v2.0.19 (Darwin)\n> Comment: GPGTools - http://gpgtools.org\n> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n>\n> iQIcBAEBAgAGBQJSdXPaAAoJEAdzVfsmodw4+m8P/1Ce/PwZOYfiFuFJ8pmT2tb2\n> ro7tw7zSr12RSTvs+qRl7lDzJzQ6BDXOdXZCkcU0Vj3TDm8fdrrXN/iw3iQYU/5Y\n> 3K7hj2mGqQUMovCLw0CbrMWrMvor7FhO6MZsRwe0+VxDV/dDrX5f5vSEhnkR26be\n> NrzOFU4hqGM3R4eLq8Bmw5rVD/VCrRzKoXXAvJb1EwM1+fQPjKi+bNMJu3reyfXU\n> 5eMbbiM6tUMmPXy9M6vZrN+6ad53x3KUVP6+/hXxsrnfPp57WQzRZlvwTo/qdJ1C\n> Oxl71m6o2zkXbLTFmg1xmK/A4V1BPTLD6nLDIsw+wTBBfdn22pfDv6Q8d3VRctrd\n> 6x+PMkwysoMjhemmkXCY/7G9GD6AGsrYSqIShSULd9QO5WxAFzRO01ewiRUCUFHi\n> Dn0LEjy8/R/CWK3jvj9uL3vQh9DLdOtqf/X7cEtjF3LThVP+stFTsmXObhTh/8Ai\n> YYjpnwOFG5ZtDzRZfP3OCwyhqlsaMlNgN4xnyR4GPaoJRP3a0zllblIbTWzg6nhY\n> jbON5Ec9N9txGhagYOoAvcQYqGyJdffkBzW82CRUsFYuYYmW2oLUQXPhAGDBIzzj\n> g/7RjMlM1OEp3qctxMZQlrTj7VJmhD768PRLh2XvEDmEC5Qb8Tcq28Nq5t85/O/6\n> i3+pzT5rMuiIZWLx7Msv\n> =tAUY\n> -----END PGP SIGNATURE-----\n>\n>\n> ------------------------------------------------------------------------------\n> Android is increasing in popularity, but the open development platform that\n> developers love is also attractive to malware creators. Download this white\n> paper to learn more about secure code signing practices that can help keep\n> Android apps secure.\n> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/4ee1c42f/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-11-03T00:33:55",
                "message_text_only": "On Sunday, November 03, 2013 12:29:28 AM Allen Piscitello wrote:\n> This was one of my concerns when implementing a scheme where you sign a\n> refund transaction before the original transaction is broadcast.  I\n> originally tried to pass a hash and have the server sign it.  However, I\n> had no way to know that what I was signing wasn't a transaction that was\n> spending my coins!  So I changed the code to require sending the full\n> transaction, not just the hash.  The other way to mitigate this is through\n> not having any unspent outputs from this key.\n\nWell, there's no use case to sign with an address that has already been sent \ncoins. The main problem with enforcing this is that you can't exactly stop \nsomeone from sending to an \"identity\" address.\n\nLuke"
            },
            {
                "author": "Allen Piscitello",
                "date": "2013-11-03T01:19:51",
                "message_text_only": "I actually had a use case in my case where it was possible, and that was\nthe check I used to get around it, just configured it so that I always\ngenerated a new key when I needed to set up a 2 of 2 Multisig Refund Tx.\n It was either that or making sure I had no unspent outputs.  The use case\nof doing it was laziness in just creating a single key.\n\n\nOn Sat, Nov 2, 2013 at 7:33 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Sunday, November 03, 2013 12:29:28 AM Allen Piscitello wrote:\n> > This was one of my concerns when implementing a scheme where you sign a\n> > refund transaction before the original transaction is broadcast.  I\n> > originally tried to pass a hash and have the server sign it.  However, I\n> > had no way to know that what I was signing wasn't a transaction that was\n> > spending my coins!  So I changed the code to require sending the full\n> > transaction, not just the hash.  The other way to mitigate this is\n> through\n> > not having any unspent outputs from this key.\n>\n> Well, there's no use case to sign with an address that has already been\n> sent\n> coins. The main problem with enforcing this is that you can't exactly stop\n> someone from sending to an \"identity\" address.\n>\n> Luke\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/8c7dc481/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-11-03T01:27:41",
                "message_text_only": "On Sunday, November 03, 2013 1:19:51 AM Allen Piscitello wrote:\n> I actually had a use case in my case where it was possible, and that was\n> the check I used to get around it, just configured it so that I always\n> generated a new key when I needed to set up a 2 of 2 Multisig Refund Tx.\n>  It was either that or making sure I had no unspent outputs.  The use case\n> of doing it was laziness in just creating a single key.\n\nUse cases mean an actual use, not mere laziness. Bitcoin as a system has \nalways required a unique EC key (and address) for each transaction.\n\nLuke"
            },
            {
                "author": "Allen Piscitello",
                "date": "2013-11-03T01:36:59",
                "message_text_only": "Required vs. strongly recommended is an important distinction.  Satoshi\nDice reuses EC Keys for every single transaction.  Exchanges will have the\nsame address you deposit in over and over, which gets reused.  This is a\nbest practice argument rather than a protocol requirement.\n\n\nOn Sat, Nov 2, 2013 at 8:27 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Sunday, November 03, 2013 1:19:51 AM Allen Piscitello wrote:\n> > I actually had a use case in my case where it was possible, and that was\n> > the check I used to get around it, just configured it so that I always\n> > generated a new key when I needed to set up a 2 of 2 Multisig Refund Tx.\n> >  It was either that or making sure I had no unspent outputs.  The use\n> case\n> > of doing it was laziness in just creating a single key.\n>\n> Use cases mean an actual use, not mere laziness. Bitcoin as a system has\n> always required a unique EC key (and address) for each transaction.\n>\n> Luke\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/7cd74af0/attachment.html>"
            },
            {
                "author": "Timo Hanke",
                "date": "2013-11-03T06:23:09",
                "message_text_only": "On Sat, Nov 02, 2013 at 02:14:22PM -0700, Johnathan Corgan wrote:\n> On 11/01/2013 10:01 PM, bitcoingrant at gmx.com wrote:\n> \n> > Server provides a token for the client to sign.\n> \n> Anyone else concerned about signing an arbitrary string?  Could be a\n> hash of $EVIL_DOCUMENT, no?  I'd want to XOR the string with my own\n> randomly generated nonce, sign that, then pass the nonce and the\n> signature back to the server for verification.\n\nThere were several replies like this, suggesting the client should\nmodify or add something to the token, or should give the token some\nstructure. But signing a token is not what the client should do in the\nfirst place. At least not if the client's key is (EC)DSA. The standard\nway is a challenge-response protocol in the form of the Diffie-Hellman\nkey exchange, which avoids producing any unintentional signatures.\n\nSay the clients wants to prove he owns private key p, belonging to\npublic key P. P=p*G and G is the \"base\" of the (EC)DSA signature system.\nThe server generates a new keypair (a,A), a is private, A is public, and\nsends A to the client as a challenge. The client computes and sends p*A\nback. The server verifies whether p*A = a*P.\n\nOnly \"public keys\" are exchanged here, there's nothing that can be\nmistaken for a (EC)DSA signature.\n\nTimo\n\n> -- \n> Johnathan Corgan, Corgan Labs\n> SDR Training and Development Services\n> http://corganlabs.com\n\n> begin:vcard\n> fn:Johnathan Corgan\n> n:Corgan;Johnathan\n> org:Corgan Enterprises LLC dba Corgan Labs\n> adr:;;6081 Meridian Ave. Suite 70-111;San Jose;CA;95120;United States\n> email;internet:johnathan at corganlabs.com\n> title:Managing Partner\n> tel;work:+1 408 463 6614\n> x-mozilla-html:FALSE\n> url:http://corganlabs.com\n> version:2.1\n> end:vcard\n> \n\n\n\n\n-- \nTimo Hanke\nPGP 1EFF 69BC 6FB7 8744 14DB  631D 1BB5 D6E3 AB96 7DA8"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-11-06T03:38:59",
                "message_text_only": "On 2 November 2013 22:14, Johnathan Corgan <johnathan at corganlabs.com> wrote:\n\n> On 11/01/2013 10:01 PM, bitcoingrant at gmx.com wrote:\n>\n> > Server provides a token for the client to sign.\n>\n> Anyone else concerned about signing an arbitrary string?  Could be a\n> hash of $EVIL_DOCUMENT, no?  I'd want to XOR the string with my own\n> randomly generated nonce, sign that, then pass the nonce and the\n> signature back to the server for verification.\n>\n\nGood point.\n\nThere are actually times you may want to sign a transaction.\n\nThere's a little know HTTP code, 402, \"Payment Required\".  We should really\nstart using this at some point ...\n\nhttp://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n\nReserved for future use.[2] The original intention was that this code might\nbe used as part of some form of digital cash or micropayment scheme, but\nthat has not happened, and this code is not usually used. As an example of\nits use, however, Apple's defunct MobileMe service generated a 402 error if\nthe MobileMe account was delinquent.[citation needed] In addition, YouTube\nuses this status if a particular IP address has made excessive requests,\nand requires the person to enter a CAPTCHA.\n\n\n>\n> --\n> Johnathan Corgan, Corgan Labs\n> SDR Training and Development Services\n> http://corganlabs.com\n>\n>\n> ------------------------------------------------------------------------------\n> Android is increasing in popularity, but the open development platform that\n> developers love is also attractive to malware creators. Download this white\n> paper to learn more about secure code signing practices that can help keep\n> Android apps secure.\n> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/0a43b210/attachment.html>"
            },
            {
                "author": "slush",
                "date": "2013-11-02T21:57:50",
                "message_text_only": "Glad to see that there are more and more people wanting to replace\npasswords with digital signatures.\n\nAlthough such method has been already used on other websites like Eligius\nor bitcoin-otc, I dont think theres any standard way to doing so yet.\n\nTwo comments to your proposal:\n\nA) message-to-be-signed need to be carefully composed to be both structured\nand human readable. It should contain at least:\nDesired username/identity handler\nServer identifier (url)\nTimestamp to prevent replay attack\nServer challenge\n\nThen the user can see what he's signing, instead of signing some binary\nblob which can contain some evil data.\n\nB)\nSame structured data should be a part of html page in some header tag,\nideally signed by server certificate to confirm that the request is valid.\nThen the login request can be processed by machine automatically, without a\nneed of copy&paste by a user.\n\nSlush\n\n\nOn Sat, Nov 2, 2013 at 6:01 AM, <bitcoingrant at gmx.com> wrote:\n\n> Passwords are inefficient by design: frequently we hear news from Sony,\n> Square Enix, Adobe, and various others about passwords being compromised,\n> databases being copied and stolen. This story remains true in the Bitcoin\n> space. In light of the recent Bitcointalk forum breach echoes an increasing\n> need for passwords to become a thing of the past.\n>\n>\n>\n> In celebration of the 5 year anniversary of the Bitcoin whitepaper, we are\n> delighted to introduce the Message Signing based authentication method.\n>\n>\n>\n> In brief, the authentication work as follows:\n>\n>\n>\n> Server provides a token for the client to sign.\n>\n> client passes the signed message and the bitcoin address back to the\n> server.\n>\n> server validates the message and honors the alias (optional) and bitcoin\n> address as identification.\n>\n>\n>\n> http://forums.bitcoingrant.org/\n>\n>\n>\n> Above is a proof of concept forum that utilize this authentication method.\n> Following Kerckhoffs's principle, this forum only stores the signed message\n> and bitcoin address the users provide the first time they use the site,\n> both are public information. In addition, there is no database, everything\n> is simply an RSS feed. For the sake of usability we have included a redis\n> for the sessions, at the cost of additional exposure to potential risks:\n> users no longer need to sign a token every time they wish to post.\n>\n>\n>\n> All source code will be available on github in the next few days.\n>\n>\n>\n> We welcome any feedback or suggestions.\n>\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Android is increasing in popularity, but the open development platform that\n> developers love is also attractive to malware creators. Download this white\n> paper to learn more about secure code signing practices that can help keep\n> Android apps secure.\n> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131102/31897bcb/attachment.html>"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-11-06T03:01:48",
                "message_text_only": "On 2 November 2013 22:57, slush <slush at centrum.cz> wrote:\n\n> Glad to see that there are more and more people wanting to replace\n> passwords with digital signatures.\n>\n> Although such method has been already used on other websites like Eligius\n> or bitcoin-otc, I dont think theres any standard way to doing so yet.\n>\n> Two comments to your proposal:\n>\n> A) message-to-be-signed need to be carefully composed to be both\n> structured and human readable. It should contain at least:\n> Desired username/identity handler\n> Server identifier (url)\n> Timestamp to prevent replay attack\n> Server challenge\n>\n> Then the user can see what he's signing, instead of signing some binary\n> blob which can contain some evil data.\n>\n> B)\n> Same structured data should be a part of html page in some header tag,\n> ideally signed by server certificate to confirm that the request is valid.\n> Then the login request can be processed by machine automatically, without a\n> need of copy&paste by a user.\n>\nBut where are the private keys stored?  Crypto in the browser with help,\nbut although they will expose ECC via the NSS, I dont think bitcoin's\nparticular curve will be supported, because it's not NIST approved.  If the\nuse case was presented though, they may add it.\n\nThis can actually be done today using client side certificates.  Two\nmethods.\n\nMethod 1:\n\nIn your client side certificate, put in your bitcoin address in the\nsubjectAlternativeName field.  This is a field that lets you tell the\nserver \"I have another identity\"\n\n>From the bitcoin address look up via a \".well-known\" key server some items\npreviously uploaded.  This would normally be a signed value of the key\nused, or a signed value of the the certificate.  The server checks this and\nlogs you in.\n\nMethod 2:\n\nIn your client side certificate, put in an HTTP address.  That HTTP address\ncontains your bitcoin address and a signed copy of your cert public key or\nthe cert itself.\n\nThe advantage here is that you dont need a key server.\n\n\nBoth methods work, I've been doing this kind of thing for 5 years+, and I'd\nnever go back to passwords on anything I build.\n\nI'm all for recreating this UI in javascript too, but I just wonder how to\nprotect the private keys ...\n\n\n> Slush\n>\n>\n> On Sat, Nov 2, 2013 at 6:01 AM, <bitcoingrant at gmx.com> wrote:\n>\n>> Passwords are inefficient by design: frequently we hear news from Sony,\n>> Square Enix, Adobe, and various others about passwords being compromised,\n>> databases being copied and stolen. This story remains true in the Bitcoin\n>> space. In light of the recent Bitcointalk forum breach echoes an increasing\n>> need for passwords to become a thing of the past.\n>>\n>>\n>>\n>> In celebration of the 5 year anniversary of the Bitcoin whitepaper, we\n>> are delighted to introduce the Message Signing based authentication method.\n>>\n>>\n>>\n>> In brief, the authentication work as follows:\n>>\n>>\n>>\n>> Server provides a token for the client to sign.\n>>\n>> client passes the signed message and the bitcoin address back to the\n>> server.\n>>\n>> server validates the message and honors the alias (optional) and bitcoin\n>> address as identification.\n>>\n>>\n>>\n>> http://forums.bitcoingrant.org/\n>>\n>>\n>>\n>> Above is a proof of concept forum that utilize this authentication\n>> method. Following Kerckhoffs's principle, this forum only stores the signed\n>> message and bitcoin address the users provide the first time they use the\n>> site, both are public information. In addition, there is no database,\n>> everything is simply an RSS feed. For the sake of usability we have\n>> included a redis for the sessions, at the cost of additional exposure to\n>> potential risks: users no longer need to sign a token every time they wish\n>> to post.\n>>\n>>\n>>\n>> All source code will be available on github in the next few days.\n>>\n>>\n>>\n>> We welcome any feedback or suggestions.\n>>\n>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Android is increasing in popularity, but the open development platform\n>> that\n>> developers love is also attractive to malware creators. Download this\n>> white\n>> paper to learn more about secure code signing practices that can help keep\n>> Android apps secure.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Android is increasing in popularity, but the open development platform that\n> developers love is also attractive to malware creators. Download this white\n> paper to learn more about secure code signing practices that can help keep\n> Android apps secure.\n> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/ad6ee9ff/attachment.html>"
            },
            {
                "author": "slush",
                "date": "2013-11-06T06:41:57",
                "message_text_only": "> But where are the private keys stored? Crypto in the browser with help,\nbut although they will expose ECC via the NSS, I dont think bitcoin's\nparticular curve will be supported, because it's not NIST approved. If the\nuse case was presented though, they may add it.\n\nTrezor, my friend.\n\nSlush\n\nSent from mobile phone.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/34efeea8/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Message Signing based authentication",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Luke-Jr",
                "Hannu Kotipalo",
                "slush",
                "Mike Hearn",
                "Timo Hanke",
                "Johnathan Corgan",
                "bitcoingrant at gmx.com",
                "Mark Friedenbach",
                "Melvin Carvalho",
                "Allen Piscitello"
            ],
            "messages_count": 22,
            "total_messages_chars_count": 33132
        }
    },
    {
        "title": "[Bitcoin-development] Proposal to replace BIP0039",
        "thread_messages": [
            {
                "author": "Thomas Voegtlin",
                "date": "2013-11-02T09:44:58",
                "message_text_only": "> To be specific, we (in cooperation with / inspired by Timo Hanke) \n> developed method how to prove that the seed generated by Trezor has \n> been created using combination of computer-provided entropy and \n> device-provided entropy, without leaking full private information to \n> other computer, just because we want Trezor to be blackbox-testable \n> and fully deterministic (seed generation is currently the only \n> operation which uses any source of RNG).\n>\n\nThanks for the explanation. Here is how I understand how it works, \nplease correct me if I'm wrong:\n\nThe user's computer picks a random number a, the Trezor picks a random \nnumber b.\nTrezor adds a and b in the secp256k1 group, and this creates a master \nprivate key k.\nTrezor sends the corresponding master public key K to the computer.\nThus, the computer can check that K was derived from a, without knowing b.\nThis also allows the computer to check that any bitcoin address derived \nfrom K is derived from a, without leaking b. (and reciprocally)\n\nHowever, it seems to me that this property will work only with bip32 \npublic derivations; if a private derivation is used, don't you need to \nknow k?"
            },
            {
                "author": "Timo Hanke",
                "date": "2013-11-03T06:41:11",
                "message_text_only": "On Sat, Nov 02, 2013 at 10:44:58AM +0100, Thomas Voegtlin wrote:\n> \n> >To be specific, we (in cooperation with / inspired by Timo Hanke)\n> >developed method how to prove that the seed generated by Trezor\n> >has been created using combination of computer-provided entropy\n> >and device-provided entropy, without leaking full private\n> >information to other computer, just because we want Trezor to be\n> >blackbox-testable and fully deterministic (seed generation is\n> >currently the only operation which uses any source of RNG).\n> >\n> \n> Thanks for the explanation. Here is how I understand how it works,\n> please correct me if I'm wrong:\n> \n> The user's computer picks a random number a, the Trezor picks a\n> random number b.\n> Trezor adds a and b in the secp256k1 group, and this creates a\n> master private key k.\n> Trezor sends the corresponding master public key K to the computer.\n> Thus, the computer can check that K was derived from a, without knowing b.\n\nNo. You mean the computer would use B for this check? \n(k,K) could be rigged by Trezor, who computes b as k-a.\n\nTimo\n\n> This also allows the computer to check that any bitcoin address\n> derived from K is derived from a, without leaking b. (and\n> reciprocally)\n> \n> However, it seems to me that this property will work only with bip32\n> public derivations; if a private derivation is used, don't you need\n> to know k?\n> \n> \n> \n\n-- \nTimo Hanke\nPGP 1EFF 69BC 6FB7 8744 14DB  631D 1BB5 D6E3 AB96 7DA8"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2013-11-03T07:03:54",
                "message_text_only": "Le 03/11/2013 07:41, Timo Hanke a \u00e9crit :\n> No. You mean the computer would use B for this check? (k,K) could be \n> rigged by Trezor, who computes b as k-a. Timo\n\nI was just asking a question, in order to understand how this device \nworks, and what are its requirements.\nif you think you can help, please explain."
            },
            {
                "author": "Timo Hanke",
                "date": "2013-11-03T07:40:52",
                "message_text_only": "I think the communication would have to go the other way around. Trezor\nhas to commit to a value First. Like this:\n\nTrezor picks random s and sends S=s*G to computer, keeping s secret.\nComputer picks random t and sends t to Trezor.  Trezor makes r := s+t\nits internal master private key with corresponding master public key \nR := (s+t)*G. Since R = S+t*G, the computer can verify the master\npublic key. As you say, the computer can then store R and can later\nverify for each derived pubkey that it was indeed derived from R, hence\nfrom his own entropy t.\n\nHowever, Trezor could not use straight bip32 out of the box. The\nchaincode would have to be something like SHA(R). And the seed (that\ngets translated to mnemonic) would be r itself, making it 256 bit\ninstead of only 128 bit.\n\nIf the longer seed is bearable then this is a good way to do it.\n\nOne question remains: if you only write down the mnemonic how can you be\nsure that it is correct and corresponds to the secret in Trezor? You\ncannot verify that on paper. You would have to restore it on some\ndevice, eg another empty Trezor, and see if it brings up the same master\npubkey. Right? \n\nTimo\n\nOn Sun, Nov 03, 2013 at 08:03:54AM +0100, Thomas Voegtlin wrote:\n> \n> Le 03/11/2013 07:41, Timo Hanke a \u00e9crit :\n> >No. You mean the computer would use B for this check? (k,K) could\n> >be rigged by Trezor, who computes b as k-a. Timo\n> \n> I was just asking a question, in order to understand how this device\n> works, and what are its requirements.\n> if you think you can help, please explain.\n> \n> \n\n-- \nTimo Hanke\nPGP 1EFF 69BC 6FB7 8744 14DB  631D 1BB5 D6E3 AB96 7DA8"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2013-11-03T08:39:42",
                "message_text_only": "Le 03/11/2013 08:40, Timo Hanke a \u00e9crit :\n> I think the communication would have to go the other way around. Trezor\n> has to commit to a value First. Like this:\n>\n> Trezor picks random s and sends S=s*G to computer, keeping s secret.\n> Computer picks random t and sends t to Trezor.  Trezor makes r := s+t\n> its internal master private key with corresponding master public key\n> R := (s+t)*G. Since R = S+t*G, the computer can verify the master\n> public key. As you say, the computer can then store R and can later\n> verify for each derived pubkey that it was indeed derived from R, hence\n> from his own entropy t.\n\nI'm not sure how this differs from what I wrote...\n\nHowever, if this is how it works, then my question remains:\nThe computer has no proof to know that pubkeys derived through bip32's \nprivate derivations are derived from its own entropy...\nThis verification would only work for public (aka type2) derivations.\n\n.. but maybe Trezor works in a different way? I think an explanation \nfrom slush would be needed.\n\n\n> However, Trezor could not use straight bip32 out of the box. The\n> chaincode would have to be something like SHA(R). And the seed (that\n> gets translated to mnemonic) would be r itself, making it 256 bit\n> instead of only 128 bit.\n>\n> If the longer seed is bearable then this is a good way to do it.\n>\n> One question remains: if you only write down the mnemonic how can you be\n> sure that it is correct and corresponds to the secret in Trezor? You\n> cannot verify that on paper. You would have to restore it on some\n> device, eg another empty Trezor, and see if it brings up the same master\n> pubkey. Right?\n>\nI guess you have to trust Trezor that it derives R from r"
            },
            {
                "author": "Timo Hanke",
                "date": "2013-11-04T15:10:36",
                "message_text_only": "On Sun, Nov 03, 2013 at 09:39:42AM +0100, Thomas Voegtlin wrote:\n> \n> Le 03/11/2013 08:40, Timo Hanke a \u00e9crit :\n> >I think the communication would have to go the other way around. Trezor\n> >has to commit to a value First. Like this:\n> >\n> >Trezor picks random s and sends S=s*G to computer, keeping s secret.\n> >Computer picks random t and sends t to Trezor.  Trezor makes r := s+t\n> >its internal master private key with corresponding master public key\n> >R := (s+t)*G. Since R = S+t*G, the computer can verify the master\n> >public key. As you say, the computer can then store R and can later\n> >verify for each derived pubkey that it was indeed derived from R, hence\n> >from his own entropy t.\n> \n> I'm not sure how this differs from what I wrote...\n\nSorry, yes, of course it's the same..\nYour very first proposal was fine, provided that Trezor commits to its\nrandom value first.\n\n> However, if this is how it works, then my question remains:\n> The computer has no proof to know that pubkeys derived through\n> bip32's private derivations are derived from its own entropy...\n> This verification would only work for public (aka type2) derivations.\n> \n> .. but maybe Trezor works in a different way? I think an explanation\n> from slush would be needed.\n\nDoes Trezor even use private derivation?\n\nRegardless of whether the derivation is private or public, and\nregardless of what kind of proof you use to show that the master public\nkey was derived from user supplied entropy, my question also remains:\nHow do you verify your backup? The backup is a seed or private key. It's\ntoo long to do any meaningful computation by hand. So you would need a\nsecond offline device, eg a second Trezor in \"restore mode\", just to\nverify your backup.\n\nTimo\n\n> >However, Trezor could not use straight bip32 out of the box. The\n> >chaincode would have to be something like SHA(R). And the seed (that\n> >gets translated to mnemonic) would be r itself, making it 256 bit\n> >instead of only 128 bit.\n> >\n> >If the longer seed is bearable then this is a good way to do it.\n> >\n> >One question remains: if you only write down the mnemonic how can you be\n> >sure that it is correct and corresponds to the secret in Trezor? You\n> >cannot verify that on paper. You would have to restore it on some\n> >device, eg another empty Trezor, and see if it brings up the same master\n> >pubkey. Right?\n> >\n> I guess you have to trust Trezor that it derives R from r\n> \n> \n> \n> \n\n-- \nTimo Hanke\nPGP 1EFF 69BC 6FB7 8744 14DB  631D 1BB5 D6E3 AB96 7DA8"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2013-11-16T23:41:01",
                "message_text_only": "On 04/11/13 16:10, Timo Hanke wrote:\n> Does Trezor even use private derivation?\n\nNo. It can't. Private keys never leave the device so client would not\nknow how to generate addresses.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2013-11-16T23:49:04",
                "message_text_only": "On 03/11/13 08:40, Timo Hanke wrote:\n> Trezor picks random s and sends S=s*G to computer, keeping s secret.\n\nThat's a really neat trick!\n\n> One question remains: if you only write down the mnemonic how can you be\n> sure that it is correct and corresponds to the secret in Trezor?\n\nRight. That's a problem. I'm not sure if this whole cryptomagic is\nbenefitial at all.\n\nI'd suggest to go the easy way for now, i.e. prove that external entropy\nwas used while generating the master seed. If the user does not trust\nour firmware, he can use his own built one.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Timo Hanke",
                "date": "2013-11-17T00:42:39",
                "message_text_only": "On Sun, Nov 17, 2013 at 12:49:04AM +0100, Pavol Rusnak wrote:\n> On 03/11/13 08:40, Timo Hanke wrote:\n> > Trezor picks random s and sends S=s*G to computer, keeping s secret.\n> \n> That's a really neat trick!\n> \n> > One question remains: if you only write down the mnemonic how can you be\n> > sure that it is correct and corresponds to the secret in Trezor?\n> \n> Right. That's a problem. I'm not sure if this whole cryptomagic is\n> benefitial at all.\n> \n> I'd suggest to go the easy way for now, i.e. prove that external entropy\n> was used while generating the master seed. If the user does not trust\n> our firmware, he can use his own built one.\n\nNo, this question of mine was regardless of any cryptomagic or neat\ntricks like Thomas' suggestion. It has nothing do with auditing the\nentropy. It was just a backup question.\n\nI recently had an experience where I thought coins were lost because the\nsecrets I had didn't match the public keys that I thought they'd match.\n>From now on I will always recover my wallet first, from the backed up\nsecrets, before sending any coins to the pubkeys in the wallet. I will\nnever again generate a wallet, backup the secrets, and hope the secrets\nindeed match the pubkeys.. without testing that. My question was how\nTrezor allows me to verify my backup.\n\nAll this makes me think if having one device generating and displaying\nthe secret, and making a backing from the display, is the right way to\ngo. Since you would need a second device to verify your backup is sane,\nyou could have two devices to start with. One is your hardware wallet\nand it only imports secrets (restores backups). The other is an entropy\ngenerator and it only generates secrets.\n\nBest regards,\nTimo\n\np.s. The question about auditing entropy would only apply to the generator,\nnot the wallet. Is it yet documented how Trezor proves that external\nentropy was used? \n\n-- \nTimo Hanke\nPGP 1EFF 69BC 6FB7 8744 14DB  631D 1BB5 D6E3 AB96 7DA8"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2013-11-17T00:49:00",
                "message_text_only": "On 17/11/13 01:42, Timo Hanke wrote:\n> p.s. The question about auditing entropy would only apply to the generator,\n> not the wallet. Is it yet documented how Trezor proves that external\n> entropy was used? \n\nWe'll probably use the most straightforward way:\na) trezor prints entropy A on a display (probably in hex format, this\nstep is triggered by sending a special flag in initialize message)\nb) trezor receives entropy B from external source\nc) trezor creates sha256(A + B) and uses that as a seed\nd) trezor prints used seed on a display (probably in BIP39 format)\ne) user can check on a trusted computer that everything was ok\n\n(note that steps b-d are the same regardless of whether the special flag\nwas set)\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2013-11-02T10:10:13",
                "message_text_only": "Le 31/10/2013 12:18, slush a \u00e9crit :\n> Oh, I forgot to one practical aspect; the way how the mnemonic is \n> \"mined\" in Thomas proposal prevents usage in embedded devices, because \n> difficulty of generating proper mnemonic is simply too high for \n> embedded microcontrollers. Maybe this can be solved somehow by \n> modifying the proposal, but right now it is a showstopper for us.\n>\n>\n\neven if metadata is only 8 bits ? (that's about 256 hashes)"
            }
        ],
        "thread_summary": {
            "title": "Proposal to replace BIP0039",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Pavol Rusnak",
                "Timo Hanke",
                "Thomas Voegtlin"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 12789
        }
    },
    {
        "title": "[Bitcoin-development] Zeroconf-safe tx replacement (replace-for-fee)",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-11-04T10:52:43",
                "message_text_only": "On Mon, Oct 28, 2013 at 07:17:50AM +0000, John Dillon wrote:\n> This discussion seems to be a lot of hot air over a simple observation that\n> estimates are imperfect and always will be. I do not understand you vehement\n> opposition the notion that a backup is a good thing except in the context that\n> replacement to change fees is halfway to profit-seeking replacement by fee.\n> \n> \n> Peter Todd:\n> \n> You did a fair bit of leg work for replace-by-fee. Seems to me that\n> replace-for-fee will help prep infrastructure to eventual replace-by-fee usage,\n> while avoiding some of the politics around zero-conf transactions.\n\nHere's the easy part done:\n\nhttps://github.com/petertodd/bitcoin/tree/replace-for-fee\n\nThe rules are pretty simple: a replacement can only happen if every\noutput in the old transaction has a corresponding output in the new with\nthe same scriptPubKey, and of equal or greater value. All old tx outputs\nmust also be unspent. For implementation reasons, the order of the\noutputs must also be the same, and the code will never replace two\ntransactions with one.\n\nIf someone wanted to mine with the above code, I'd say go right ahead.\n(modulo general testing concerns)\n\nClient-side though it shows a flaw with the Bitcoin wallet code that I\nshould have realized months ago: essentially a transaction in your\nwallet with double-spent inputs forever blocks those inputs from being\nspent. This doesn't happen too often because you're wallet will\ncurrently never create double-spends, and will never respend unconfirmed\ncoins from someone else, but any CoinJoin implementation violates that\nassumption and an attacker could easily cause a lot of havok.\n\nI'll have to think about the issue further, but essentially the wallet\nneeds to recognize when a transaction's inputs no longer exist, and mark\nthe remaining inputs as unspent. Actually deleting those transactions\nfrom your wallet is secondary to that more important concern.\n\n-- \n'peter'[:-1]@petertodd.org\n000000002fdfe6bbcffea72c934475cd4fcfe78d8d06910016d707c9b4a9e827\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/99189ff5/attachment.sig>"
            },
            {
                "author": "Adam Back",
                "date": "2013-11-04T11:10:38",
                "message_text_only": "Might leak less wiggle room and be simpler/more robut to validate that\n*everything* has to be the same except for the amount going to one (presumed\nchange) address.  A privacy leak I know, but dont do that - ie send enough\nchange the first time.  And network analysis has shown change addresses\narent adding hardly any privacy.\n\nWe need more robust privacy fixes independently.  I do not support damaging\nthe 0-conf feature, so I think this later approach is a better track for\nrevising fees.\n\nAdam\n\nOn Mon, Nov 04, 2013 at 05:52:43AM -0500, Peter Todd wrote:\n>On Mon, Oct 28, 2013 at 07:17:50AM +0000, John Dillon wrote:\n>> This discussion seems to be a lot of hot air over a simple observation that\n>> estimates are imperfect and always will be. I do not understand you vehement\n>> opposition the notion that a backup is a good thing except in the context that\n>> replacement to change fees is halfway to profit-seeking replacement by fee.\n>>\n>>\n>> Peter Todd:\n>>\n>> You did a fair bit of leg work for replace-by-fee. Seems to me that\n>> replace-for-fee will help prep infrastructure to eventual replace-by-fee usage,\n>> while avoiding some of the politics around zero-conf transactions."
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-04T11:59:25",
                "message_text_only": "On Mon, Nov 04, 2013 at 12:10:38PM +0100, Adam Back wrote:\n> Might leak less wiggle room and be simpler/more robut to validate that\n> *everything* has to be the same except for the amount going to one (presumed\n> change) address.  A privacy leak I know, but dont do that - ie send enough\n> change the first time.  And network analysis has shown change addresses\n> arent adding hardly any privacy.\n> \n> We need more robust privacy fixes independently.  I do not support damaging\n> the 0-conf feature, so I think this later approach is a better track for\n> revising fees.\n\nThere's been a number of uses found for tx-replacement beyond simply\nmodifying fees. In additition, allowing for the value of a specificly\ndesignated change address to be changed after the fact is not compatible\nwith current zero-conf-using implementations; they don't know to treat a\ntxout as special so allowing its value to be reduced would allow for a\nzeroconf attack.\n\nAnyway, if you look at the code that actually implements the\nreplacement, it's extremely simple already. I see no reason to make it\nless general; transaction relaying rules are not part of consensus.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000a6dd96c551eca7299463e4e523462798a006535f412b519c7\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/04bb20b1/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Zeroconf-safe tx replacement (replace-for-fee)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Adam Back",
                "Peter Todd"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 5023
        }
    },
    {
        "title": "[Bitcoin-development] Auto-generated miner backbone",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2013-11-04T11:26:30",
                "message_text_only": "W.R.T. this paper and the oft-discussed miner backbone,\n\n  http://arxiv.org/pdf/1311.0243v1.pdf\n\nI'm wondering about an alternative protocol change that perhaps has less\nsubtle implications than their suggested change. Rather than address the\nproblem by assuming the network is full of sybil nodes and changing the\nrules for selecting the chain to build on, how about if we wrote code to\nautomatically build a miner backbone by having IP addresses of nodes\nembedded into coinbases, then having any bitcoind that is creating work\nautomatically connect to IPs that appeared in enough recent blocks?\n\nThis would have the effect of automatically linking all the major pools\ntogether, with no administration overhead.\n\nFor bonus points, the IPs could be IPv6 and then the trick we use to pack\nhidden services into IPv6 address space would allow nodes to be reached via\nTor. This might be useful in the case of pools that don't to reveal the\nlocation of their bitcoin node[s], like for anti-DoS reasons.\n\nIt feels like this should be achievable with a few days of solid coding and\na couple of new command line flags, and the impact is much easier to reason\nabout than a fundamental rule change like the one proposed by the paper.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/55c09065/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-04T11:53:14",
                "message_text_only": "On Mon, Nov 04, 2013 at 12:26:30PM +0100, Mike Hearn wrote:\n> W.R.T. this paper and the oft-discussed miner backbone,\n> \n>   http://arxiv.org/pdf/1311.0243v1.pdf\n> \n> I'm wondering about an alternative protocol change that perhaps has less\n> subtle implications than their suggested change. Rather than address the\n> problem by assuming the network is full of sybil nodes and changing the\n> rules for selecting the chain to build on, how about if we wrote code to\n> automatically build a miner backbone by having IP addresses of nodes\n> embedded into coinbases, then having any bitcoind that is creating work\n> automatically connect to IPs that appeared in enough recent blocks?\n\nI proposed this as a means of giving a mechanism for wallets to get\nnon-sybilled peers as well.\n\n> This would have the effect of automatically linking all the major pools\n> together, with no administration overhead.\n> \n> For bonus points, the IPs could be IPv6 and then the trick we use to pack\n> hidden services into IPv6 address space would allow nodes to be reached via\n> Tor. This might be useful in the case of pools that don't to reveal the\n> location of their bitcoin node[s], like for anti-DoS reasons.\n> \n> It feels like this should be achievable with a few days of solid coding and\n> a couple of new command line flags, and the impact is much easier to reason\n> about than a fundamental rule change like the one proposed by the paper.\n\nDoing so encourages pools to only bother connecting to other pools,\nwhich is a strong centralizing force. But given the nasty incentives\npresent anyway - it's in your advantage to distribute your blocks to no\nmore than a majority of hashing power if you can do so consistently -\nI'm unconvinced that this won't happen anyway.\n\nThe maximal benefit would be if two sets of addresses were published:\npublic and private. The issue with publishing addresses is DoS attacks,\nbut publishing Tor addresses doesn't stop attacks. What would discourage\nattacks however would be to encrypt that data such that only the\ncreators of specific prior blocks could decrypt it. This limits the\naudience to those with incentives not to commit a DoS attack. (DoS\nattack the IP, and you'll no longer get preferential peering)\n\nSay what you want about centralization, but for the pools involved it's\na good idea.\n\n\nOn a technical level, the coinbase is limited in size, and people use it\nfor other purposes, so lets define a standard where this data is stored\nin an OP_RETURN txout of the form:\n\nOP_RETURN <key> <value> <key> <value> ...\n\nMultiple values with the same key should be allowed. This data should be\nplaced in the last txout so that SPV nodes can eventually be given it\nwith a SHA256 midstate.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000080e395c361bdf9db583d5f4c0e144f476c229285b15eae59c\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/e4f7f86e/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-11-04T12:00:16",
                "message_text_only": "On Mon, Nov 4, 2013 at 12:53 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> I proposed this as a means of giving a mechanism for wallets to get\n> non-sybilled peers as well.\n>\n\nAh yes, good point.\n\n\n> Doing so encourages pools to only bother connecting to other pools,\n> which is a strong centralizing force.\n>\n\nThey could already create such a setup, but we don't observe it in practice.\n\n\n> On a technical level, the coinbase is limited in size, and people use it\n> for other purposes, so lets define a standard ....\n\n\nGiven that IP address data is inherently transient, perhaps a better\nsolution is to define a short hash in the coinbase that commits to extra\ndata that is relayed along with block data (e.g. appended to the block\nmessage). It can then be stored temporarily in the block db and erased\nafter some time, like a few months. It would therefore not really be a part\nof the chain, but could be extended as we see fit with any other\nsemi-transient data required. A new \"getextra\" message would let nodes\nquery for it.\n\nThe hash can be short because it doesn't have to survive brute forcing\nattacks longer than the expected validity period of the transient data\nanyway. 80 bits would probably be overkill.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/2a432175/attachment.html>"
            },
            {
                "author": "Michael Gronager",
                "date": "2013-11-04T11:58:06",
                "message_text_only": "On 4/11/13, 12:26 , Mike Hearn wrote:\n> W.R.T. this paper and the oft-discussed miner backbone,\n> \n>   http://arxiv.org/pdf/1311.0243v1.pdf\n> \n> I'm wondering about an alternative protocol change that perhaps has less\n> subtle implications than their suggested change. \n\nThe suggested change is actually very simple (minutes of coding) and\nelegant and addresses precisely the identified problem. It is actually a\nmental shortcut in the assumption of how probability works when mining a\nchain. The paper simply corrects this error - nice work!\n\n> Rather than address the\n> problem by assuming the network is full of sybil nodes and changing the\n> rules for selecting the chain to build on, how about if we wrote code to\n> automatically build a miner backbone by having IP addresses of nodes\n> embedded into coinbases, then having any bitcoind that is creating work\n> automatically connect to IPs that appeared in enough recent blocks? \n\nYou suggestion could perhaps be fun for other purposes, but does not\nrule out pools of \"selfish miners\". Further, it binds physical state\n(ip) to the blockchain, which has so far held no assumptions on the\ntechnology of the system on which it is running.\n\n> \n> This would have the effect of automatically linking all the major pools\n> together, with no administration overhead.\n> \n> For bonus points, the IPs could be IPv6 and then the trick we use to\n> pack hidden services into IPv6 address space would allow nodes to be\n> reached via Tor. This might be useful in the case of pools that don't to\n> reveal the location of their bitcoin node[s], like for anti-DoS reasons.\n> \n> It feels like this should be achievable with a few days of solid coding\n> and a couple of new command line flags, and the impact is much easier to\n> reason about than a fundamental rule change like the one proposed by the\n> paper.\n> \n> \n> ------------------------------------------------------------------------------\n> Android is increasing in popularity, but the open development platform that\n> developers love is also attractive to malware creators. Download this white\n> paper to learn more about secure code signing practices that can help keep\n> Android apps secure.\n> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-11-04T12:03:50",
                "message_text_only": ">\n> The suggested change is actually very simple (minutes of coding) and\n> elegant and addresses precisely the identified problem.\n>\n\nDisagree. Unless I'm misunderstanding what they propose, their suggested\nchange would mean anyone could broadcast a newly discovered block at any\npoint and have a 50% chance of being the winner. That is a fundamental\nchange to the dynamics of how Bitcoin works that would require careful\nthought and study.\n\nAlso, their solution doesn't really address the problem they bring up, it\njust changes the size of the threshold required.\n\nFundamentally, their attack is a sybil attack. It doesn't work if they\ncan't delay or block a pools competitors because mostly their block will\ncome in second place and they'll lose the race. Thus the solution should be\na solution to sybil attacks.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/edb33ec8/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-04T12:20:39",
                "message_text_only": "On Mon, Nov 04, 2013 at 01:03:50PM +0100, Mike Hearn wrote:\n> >\n> > The suggested change is actually very simple (minutes of coding) and\n> > elegant and addresses precisely the identified problem.\n> >\n> \n> Disagree. Unless I'm misunderstanding what they propose, their suggested\n> change would mean anyone could broadcast a newly discovered block at any\n> point and have a 50% chance of being the winner. That is a fundamental\n> change to the dynamics of how Bitcoin works that would require careful\n> thought and study.\n\nIt's worth pointing out that my previous post on this list for\n\"near-block broadcasts\" - where blocks that almost but not quite met the\nproof-of-work threshold are also broadcast so that propagation of\ntransactions can be proven - also naturally leads to their proposed\nsolution. Any miner who sees a near-block-broadcast extending a chain\nfork that they aren't mining on would naturally see that as evidence\nthat the other side has more hashing power, and thus it's in their\ninterest to mine it rather than the side they are mining.\n\n\nYou know, the whole paper follows the same logic as the point I made\nmonths ago in how if there is no explicit blocksize limit miners have\nincentives to make their blocks large enough that they only propagate to\njust over 50% of the hashing power, thus causing their competitors to\nwaste effort.  They analyze the situation in terms of a sybil attack,\nwhere I proposed a more fundemental mechanism to achieve the same goal\nbased on simple physics.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000719f061e0fa83343ddbe80d2b6a1fefc84691ffe8652385e0\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/349cb7b5/attachment.sig>"
            },
            {
                "author": "Michael Gronager",
                "date": "2013-11-04T12:40:00",
                "message_text_only": "\"We propose a simple, backwards-compatible change to the Bitcoin\nprotocol to address this problem and raise the threshold. Specifically,\nwhen a miner learns of competing branches of the same length, it should\npropagate all of them, and choose which one to mine on uniformly at random.\"\n\nSo only in the case of two competing chains... The \"Selfish Miner\" today\nhas an advantage knowing which chain the other will work on, and by\nsimply choosing the other they get their advantage making it likely that\nit is the other that will waste their effort. By using the random scheme\nthis advantage is gone.\n\nNote again that it is only in the case of two competing chains, which\nwill happen on average every 60 blocks. So it is only roughly once every\n60 block that you change from choosing one chain to doing a 50% random.\n\nA rough calculation on earnings will be that you loose roughly 1/(2*60)\n~ 1% of your blocks using this scheme. But at the same time you make it\nharder for such an attack to happen. (This number might be slightly\nhigher, as working in parallel on both chains will make the two chains\nlast longer, so agree that we need a bit more analysis...)\n\nI also agree that it is a kind of a Sybil attack, but I think we should\naccept the risk of a Sybil attack but of course minimize it, rather than\nintroducing various social network (ip addresses) solutions, which in\none way or the other always have some central auth / oracle assumption.\n\n\n\nOn 4/11/13, 13:03 , Mike Hearn wrote:\n>     The suggested change is actually very simple (minutes of coding) and\n>     elegant and addresses precisely the identified problem.\n> \n> \n> Disagree. Unless I'm misunderstanding what they propose, their suggested\n> change would mean anyone could broadcast a newly discovered block at any\n> point and have a 50% chance of being the winner. That is a fundamental\n> change to the dynamics of how Bitcoin works that would require careful\n> thought and study.\n> \n> Also, their solution doesn't really address the problem they bring up,\n> it just changes the size of the threshold required. \n> \n> Fundamentally, their attack is a sybil attack. It doesn't work if they\n> can't delay or block a pools competitors because mostly their block will\n> come in second place and they'll lose the race. Thus the solution should\n> be a solution to sybil attacks."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-11-04T15:58:15",
                "message_text_only": "On Mon, Nov 4, 2013 at 3:58 AM, Michael Gronager <gronager at ceptacle.com> wrote:\n> The suggested change is actually very simple (minutes of coding) and\n> elegant and addresses precisely the identified problem. It is actually a\n> mental shortcut in the assumption of how probability works when mining a\n> chain. The paper simply corrects this error - nice work!\n\nThis isn't so.  Their solution creates a weaker form of the\nvulnerability at all times, not just when the attacker has a\ninformational/positional advantage.\n\nNormally delaying your blocks is negative expectation because you will\nget orphaned by blocks that are announced before you most of the time\nbecause miners extend the first seen. However, if you can position\nyourself all over the network you can condition your announcements on\nother blocks being announced and still win the race even if you\ndelayed.\n\nEliminating the first seen rule means that a miner with enough\nhashpower (including the largest pools existing today) could execute\nthis attack without positioning themselves all over the network, the\nimprovement is that a low hashrate attacker couldn't do as well, even\nwith positioning themselves all over the network.  I don't think this\ncan be described as \"simply corrects the error\".  The largest pool\nwould gain an advantage in delaying their blocks and would receive a\nsuperliner share of mining income from doing so, something they can't\nsimply do today without attacking the network.\n\nAt the moment I believe we can improve the situation with propagation\nadvantage without the other changes, so we should do that first while\nthinking carefully about this.\n\nSimply relaying late blocks might be fine, if anything it would at\nleast make it easier to keep reliable orphan stats... though I'm\nconcerned with the bandwidth overhead and risk of flooding if its not\nimplemented carefully."
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-04T14:26:21",
                "message_text_only": "On Mon, Nov 04, 2013 at 12:26:30PM +0100, Mike Hearn wrote:\n> W.R.T. this paper and the oft-discussed miner backbone,\n> \n>   http://arxiv.org/pdf/1311.0243v1.pdf\n> \n> I'm wondering about an alternative protocol change that perhaps has less\n> subtle implications than their suggested change. Rather than address the\n> problem by assuming the network is full of sybil nodes and changing the\n> rules for selecting the chain to build on, how about if we wrote code to\n> automatically build a miner backbone by having IP addresses of nodes\n> embedded into coinbases, then having any bitcoind that is creating work\n> automatically connect to IPs that appeared in enough recent blocks?\n> \n> It feels like this should be achievable with a few days of solid coding and\n> a couple of new command line flags, and the impact is much easier to reason\n> about than a fundamental rule change like the one proposed by the paper.\n\nActually on further reflection this idea will make the attack described\nin the paper easier to carry out, rather than harder.\n\nI think where you're misunderstanding originates is the description of\nthis attack as requiring a sybil attack on the network - you see this\nunderlying sybil as one of numerical advantage, when it's actually one\nof *informational* advantage.\n\nRemember that the selfish miner strategy outlined in the paper is\nessentially a way to use knowledge of what blocks miners will be mining\non, from the \"first seen\" rule, and the ability to broadcast blocks you\nhave mined more widely than other miners. That knowledge and ability is\nthen used in conjunction with a small lead (obtainable by chance) to\noutpace the rest of the network.\n\nBy making all miners easily identifiable you make gaining that\ninformational and broadcast capability easier to obtain rather than\nharder. The attacker now only needs to connect to every identified miner\nwith especially fast nodes. With judicious use of DoS attacks and low\nlatency they can still gain the informational and broadcast \"upper hand\"\nover other miners and carry out the attack.\n\nWhere the paper goes wrong is they don't recognize the fundemental\nnature of the strategy being based on an informational advantage. Their\n\"pick a random side of the fork\" strategy may work to some extent, but\nit's incomplete and isn't necessarily rational for the miners\nindividually.\n\nThe correct, and rational, approach for a miner is to always mine to\nextend the block that the majority of hashing power is trying to extend.\nThe current relay rules don't give you that information at all, but they\ncan if we do two things:\n\n1) Relay all blocks that meet the PoW target. (as suggested in the\n   paper)\n\n2) Relay block headers that nearly meet the PoW target.\n\nMining strategy is now to mine to extend the first block you see, on the\nassumption that the earlier one probably propagated to a large portion\nof the total hashing power. But as you receive \"near-blocks\" that are\nunder the PoW target, use them to estimate the hashing power on each\nfork, and if it looks like you are not on the majority side, switch.\n\nThis very effectively defeats the paper's selfish-miner strategy, as all\nminers will very quickly be mining on the block that truly has the\nmajority of hashing power trying to extend it. This is also a better\noverall outcome, because it puts the 51% attack threshhold back at 51%\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000004ee9bb13b022c412d75692b5e85454013c53f89e5d6fa8c69\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/cc436362/attachment.sig>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-11-04T14:34:35",
                "message_text_only": "On Mon, Nov 4, 2013 at 3:26 PM, Peter Todd <pete at petertodd.org> wrote:\n> The correct, and rational, approach for a miner is to always mine to\n> extend the block that the majority of hashing power is trying to extend.\n> The current relay rules don't give you that information at all, but they\n> can if we do two things:\n>\n> 1) Relay all blocks that meet the PoW target. (as suggested in the\n>    paper)\n>\n> 2) Relay block headers that nearly meet the PoW target.\n>\n> Mining strategy is now to mine to extend the first block you see, on the\n> assumption that the earlier one probably propagated to a large portion\n> of the total hashing power. But as you receive \"near-blocks\" that are\n> under the PoW target, use them to estimate the hashing power on each\n> fork, and if it looks like you are not on the majority side, switch.\n\nDoesn't that mean that by selective blocking these near-PoW headers,\nyou can bias peers into preferring to mine on those with near-PoW\nheaders, turning the attack around? Of course, because of their size,\nheaders are likely much harder to slow down (in propagation speed)\nthan full blocks...\n\n-- \nPieter"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-04T14:46:31",
                "message_text_only": "On Mon, Nov 04, 2013 at 03:34:35PM +0100, Pieter Wuille wrote:\n> > Mining strategy is now to mine to extend the first block you see, on the\n> > assumption that the earlier one probably propagated to a large portion\n> > of the total hashing power. But as you receive \"near-blocks\" that are\n> > under the PoW target, use them to estimate the hashing power on each\n> > fork, and if it looks like you are not on the majority side, switch.\n> \n> Doesn't that mean that by selective blocking these near-PoW headers,\n> you can bias peers into preferring to mine on those with near-PoW\n> headers, turning the attack around? Of course, because of their size,\n> headers are likely much harder to slow down (in propagation speed)\n> than full blocks...\n\nRemember that the attack described in the paper *doesn't* depend on the\nability to selectively block or even just slow down anything - it works\neven on a unlimited bandwidth jam-free network so long as latency is\nnon-zero.\n\nAs for other possible attacks, if you can selectively block or slow down\ncertain near-target headers you haven't achieved anything novel. Why not\nuse that ability to block or slow down blocks themselves? Even if you\ndid block some PoW headers for whatever reason the original purpose of\nbroadcasting them - getting all hashing power to work to extend the same\nblock - is still achieved.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000001d7eb7fceb2e27f3dd1eb5f516464a6b6874fdf6debbd0227\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/fc7ff294/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-11-04T15:27:58",
                "message_text_only": "On Mon, Nov 4, 2013 at 3:26 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> The attacker now only needs to connect to every identified miner\n> with especially fast nodes. With judicious use of DoS attacks and low\n> latency .....\n>\n\nSo you're back to a complicated sybil attack. I don't follow your thought\nprocess here - I didn't say anything about numerical advantage. The attack\noutlined in the paper *requires* you to be able to race the rest of the\nnetwork and win some non-trivial fraction of the time. If you can't do that\nthen all it means is that when you try to release a private block to\ncompete with the other found block, you're quite likely to lose and you\nsacrifice the block rewards by doing so.\n\n\n> The correct, and rational, approach for a miner is to always mine to\n> extend the block that the majority of hashing power is trying to extend.\n>\n\nThere's no stable way to know that. The whole purpose of the block chain to\nestablish the majority. I think your near-miss headers solution is\ncircular/unstable for that reason, it's essentially a recursive solution.\n\n\n> Mining strategy is now to mine to extend the first block you see, on the\n> assumption that the earlier one probably propagated to a large portion\n> of the total hashing power. But as you receive \"near-blocks\" that are\n> under the PoW target, use them to estimate the hashing power on each\n> fork, and if it looks like you are not on the majority side, switch.\n>\n\nBut you can't reliably estimate that. You can't even reliably estimate the\nspeed of the overall network especially not on a short term basis like a\nblock interval.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/688d1f48/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-04T17:36:44",
                "message_text_only": "On Mon, Nov 04, 2013 at 04:27:58PM +0100, Mike Hearn wrote:\n> > The correct, and rational, approach for a miner is to always mine to\n> > extend the block that the majority of hashing power is trying to extend.\n> >\n> \n> There's no stable way to know that. The whole purpose of the block chain to\n> establish the majority. I think your near-miss headers solution is\n> circular/unstable for that reason, it's essentially a recursive solution.\n> \n> \n> > Mining strategy is now to mine to extend the first block you see, on the\n> > assumption that the earlier one probably propagated to a large portion\n> > of the total hashing power. But as you receive \"near-blocks\" that are\n> > under the PoW target, use them to estimate the hashing power on each\n> > fork, and if it looks like you are not on the majority side, switch.\n> >\n> \n> But you can't reliably estimate that. You can't even reliably estimate the\n> speed of the overall network especially not on a short term basis like a\n> block interval.\n\nRe-read my proposal - the whole point of it is to give a way to quickly\ncome to consensus about which side of the fork has the majority of\nhashing power. It doesn't, and doesn't need to, reliable determine what\nthe hashing power actually is on either side. Rather it's a feedback\nmechanism that creates a clear majority consensus in a short amount of\ntime with the use of only a small amount of bandwidth. (~5KB/10minutes)\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000079c8a642234cb452cbe261fcdb5885af604471c458c257956\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/0402f7f4/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-11-04T15:51:07",
                "message_text_only": "On Mon, Nov 4, 2013 at 3:26 AM, Mike Hearn <mike at plan99.net> wrote:\n> I'm wondering about an alternative protocol change that perhaps has less\n> subtle implications than their suggested change. Rather than address the\n> problem by assuming the network is full of sybil nodes and changing the\n> rules for selecting the chain to build on, how about if we wrote code to\n> automatically build a miner backbone by having IP addresses of nodes\n> embedded into coinbases, then having any bitcoind that is creating work\n> automatically connect to IPs that appeared in enough recent blocks?\n\nYea, I've proposed this too (both in the past and in the context of\nthis). I don't think, however, that the announcements need to be the\nminers themselves\u2014 but instead just need to be nodes that the miners\nthink are good (and, for their own sake\u2014 ones they're well connected\nto).\n\nMiner's could keep a list of address messages nodes they\nlike/are-connected to, perhaps prioritizing their own nodes, than\nexclude ones which are already in the most recent blocks, and include\nthe best remaining. Of course, if it's using address messages (or\nperhaps a new address message syntax) it would automatically support\nhidden services.\n\nThey should probably be included as OP_RETURN outputs in coinbase\ntransactions, maybe only limited (by what other clients pay attention\nto) to one or two per block.\n\nThis should make it harder to get partitioned from the majority\nhashrate (or partition the majority hashrate from itself), though\nthese hosts would be DOS targets, so it isn't a silver bullet.\n\nMaking the majority hashrate self-unpartitionabilty stronger is\npossible\u2014 have miners add an encryption key to their coinbase\ntransactions, then have subsequent miners mine encrypted addr messages\nto single other block sources to automatically weave a miner darknet\nwith access controlled by successful block creation. But I doubt it's\nworth the complexity of bandwidth."
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-04T15:04:06",
                "message_text_only": "On Mon, Nov 04, 2013 at 09:49:09AM -0500, Ittay wrote:\n> 1. Something important that is being overlooked is that the attack is\n> relevant even without the sybil attack. Even if you assume the selfish\n> miners loose every time on a 1:1 competition, they can still benefit in\n> pools larger than 33%. And pools often reach this size.\n> \n> 2. The selfish pool can essentially hide its behavior behind multiple IP\n> addresses. I fear employing an anti-sybil mechanism of this sort may expose\n> new vulnerabilities. The current approach is great - the attacker cannot\n> partition the network, only gain a slight timing advantage. Our approach\n> just takes away the network-induced arbitrariness and replaces it with\n> explicit randomness, which cannot introduce new vulnerabilities. It\n> protects us from 25% attacks, which is excellent (though unfortunately not\n> as good as the 51% security we believed before).\n\nThe problem is picking which side of the fork you mine on randomly isn't\nrational for an individual miner. The time that you heard about a block\nis important information: the block you heard about first is more likely\nto have propagated to the majority of the hashing power than the one you\nlearn about second. You're rational incentive is to always mine on the\nmajority side as that side has the highest probability of no competing\nblocks being found when the next block is found. (with the one exception\nof the previous block being yours) In addition the next block found will\npropagate to the majority of hashing power faster, as that majority\nalready has the previous block. By suggesting that miners pick randomly\nhalf the time they will be going against their best interests. (if not\nthe interests of the network as a whole)\n\nOn the other hand my near-target broadcast solution gives miners honest\nproof of what the majority actually is. Making use of that information\nis the economically rational choice even at an individual level. Yet it\nstill defeats the attack, and it does better in returning the threshold\nto the originally assumed 51% level.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000005fa5454135b2638d1b2240d565737a24586f31490025e2de0\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/255b5a05/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-04T15:46:39",
                "message_text_only": "On Mon, Nov 04, 2013 at 10:25:19AM -0500, Ittay wrote:\n> Peter - how can you guarantee that the majority mines on the non-selfish\n> block?\n\nFeedback basically. So suppose the hashing power is split exactly 50:50,\nwith half the hashing power hearing about one block first, and half the\nother. Also suppose the near-target threshold is 1/64th, that is a block\nheader that means a target with difficulty 1/64th of the actual\ndifficulty will be broadcast around the network by nodes. With a 10\nminute block interval, near-target block headers will be found on\naverage every 9.4 seconds.\n\nEventually one of the two halves will find a near-target PoW solution,\nand the corresponding block-header will be broadcast on the network. Now\nif you are a miner, and you receive such a PoW solution, that's evidence\nthat whatever block that block header built on has more hashing power\nthan other competing blocks. Thus you would be rational to switch, and\nstart mining to extend that block if you aren't already. Once miners\nstart doing that, very soon another near-block solution will be\ngenerated, giving even more certainty about what block the majority are\nmining on.\n\nOf course, it may be the case that competing near-block headers are\nfound, but no matter: as long as miners switch to the block with the\nmost hashing power, this forms a feedback effect that quickly brings\neveryone to consensus. With everyone mining to extend the same block,\nthere's nothing the selfish miner can do; there's no disagreement to\nexploit.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000771e068338fef7e2285b8a6db582e37473f42b76573677adf\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/b29004b3/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-04T16:07:16",
                "message_text_only": "(not sure if you meant this to go to the list, my apologies if not)\n\nOn Mon, Nov 04, 2013 at 10:50:25AM -0500, Ittay wrote:\n> On Mon, Nov 4, 2013 at 10:46 AM, Peter Todd <pete at petertodd.org> wrote:\n> \n> > On Mon, Nov 04, 2013 at 10:25:19AM -0500, Ittay wrote:\n> > > Peter - how can you guarantee that the majority mines on the non-selfish\n> > > block?\n> >\n> > Of course, it may be the case that competing near-block headers are\n> > found, but no matter: as long as miners switch to the block with the\n> > most hashing power, this forms a feedback effect that quickly brings\n> > everyone to consensus. With everyone mining to extend the same block,\n> > there's nothing the selfish miner can do; there's no disagreement to\n> > exploit.\n> >\n> \n> This is not the exploit! The majority you create might just as well follow\n> the previously-private block, so we're back in square one.\n\nRight, but the thing is, if all miners quickly come to consensus and are\nall mining on the same block, there's nothing the attacker can exploit\nin the first place.\n\nSuppose Alice the attacker is 100 blocks ahead of the main network\nsomehow. We'll say the other miners are working to extend block n, and\nshe's in posession of 100 blocks extending that. She also has just under\n50% of the hashing power.\n\nNow when the main network finds a block n+1, Alice can do one of two\nthings: she can publish her own n+1 block, or she can do nothing. If she\ndoes nothing, the main network will find block n+2 faster than she finds\nn+101, so eventually she loses. Thus she has to publish.\n\nIn your attack she publishes to a subset of nodes strategicly, splitting\nthe hashing power between nodes working to extend her n+1, and the other\nn+1 found. However, with near-target headers, very quickly all hashing\npower will come to consensus and all work to extend the same block,\neither theirs or Alice's. Given that they have the majority, they will\nfind another block faster on average than Alice can extend her lead, and\nthus eventually Alice will lose.\n\nNow there is still a slight advantage for Alice in that it takes some\ntime for the whole network to come to consensus, but this is a much\nslimmer margin, maybe a few percentage points, so at best Alice might\nneed, say, 45% of the total hashing power.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000004b8381fe97338c8b710cb662160f08e391820f30a375bb9b9\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/647ddf7c/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-04T16:51:52",
                "message_text_only": "On Mon, Nov 04, 2013 at 11:24:33AM -0500, Ittay wrote:\n> Yes - this is for the mailing list.\n> \n> Regarding the algorithm - as we explain in the paper, as long as the\n> attacker is way ahead - the others can mine on whatever they like. Doesn't\n> really matter. Once they almost close the gap (and they will, because\n> they're the majority), leaving only 1 block lead, the selfish miners\n> publish their secret blocks, loose their lead, but win the entire secret\n> chain. The honest miners thus loose all the work they did so far. It\n> doesn't really matter how the honest miners waste their time.\n\nYes, they lose their work, but that's irrelevant: what's important is\neventually Alice runs out of secret blocks and then has no advantage\nover the other miners.\n\nIn your paper Alice created her lead by exploiting the fact that not all\nof the hashing power was working to extend the same block due to the\n\"first-wins\" rule. With my solution that situation doesn't happen in the\nfirst place: forks are resolved quickly because both sides have both\nforks, and consensus on which one is the winner is achieved very quickly\nby proving which side has the majority of hashing power through\nnear-target PoW solutions. With the majority of hashing power in\nconsensus and working to extend the same block there's nothing Alice can\ndo to get ahead, defeating the attack.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000008adb581077dcfa0bf067a4ee010fbabb92d136292625b2299\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/731ccaa1/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-04T21:04:51",
                "message_text_only": "On Mon, Nov 04, 2013 at 02:12:44PM -0500, Ittay wrote:\n> On Mon, Nov 4, 2013 at 10:25 AM, Ittay <ittay.eyal at cornell.edu> wrote:\n> \n> > As for the rational motivation of the individual miners - that's a good\n> > point!\n> > Here is a solution we did not put in the paper due to space constraints\n> > that should alleviate your concern:\n> > Instead of locally choosing a block at random, have a deterministic\n> > pseudo-random mechanism for choosing between competing chains. E.g., take\n> > the one whose last block hash is smaller. This way all miners choose the\n> > same chain, and the guarantees of our solution hold.\n> >\n> \n> I take that back.\n\nSpeaking of, I'm going to take back my solution as well; I misunderstood\nyour paper.\n\nSo here's your argument in a ELI5 nutshell:\n\nAlice is a miner with some amount of hashing power. She has the ability\nto detect new blocks on the network extremely effectively for whatever\nreason; in short she has unusually good knowledge of the state of the\nnetwork. She is also very good at publishing her blocks and getting them\nto the majority of hashing power in very little time; she has unusually\ngood connectivity to all miners. (low-latency and high bandwidth)\n\nShe's so good at this that when she finds a new block, she keeps it a\nsecret! She can get away with this because she knows that the moment Bob\nfinds a block, she can immediately broadcast it to the rest of the\nnetwork before the other block propagates. Instead of building on Bob's\nblocks, almost everyone builds on Alice's block, depriving Bob of the\nrevenue. Gradually Alice gets more and more miners because Bob, and\nother pools, don't pay out as much.\n\nYou propose a rule where essentially miners extend Bob's block 50% of\nthe time, and show in your paper how that leads to a scenario where\nAlice needs to have at leastr 1/4 of the total hashing power to\nsuccesfully pull this attack off anyway.\n\n\nWhat I did succesfully show is that for a short-term rational miner\nthey're still better off mining to extend the block they hear about\nfirst rather than using your pick-one-at-random rule, because when you\nhear about a block is important information about whether or not the\nmajority is mining on it. This is true even if others are using the\npick-one-at-random rule. (they're better defecting than doing what's\nright for the whole network) Even worse is that miners have a rational\nincentive to broadcast such near-target headers to try to encourage\nother miners to work on the same fork that they are working on. The\nnear-target idea came about for a totally different reason, so it's\nsomething that might wind up being implemented anyway.\n\nMike Hearn's idea of making it easy to identify nodes associated with\nhashing power is still wrong. Although again, it's something that miners\nthemselves have rational incentives to do. (you always want to encourage\nothers to send you their blocks, and you also want to be able to send\nyour blocks to the majority of hashing power as quickly as possible)\n\nWhere the idea goes wrong is it makes it easier for Alice to identify\nhashing power, specifically where she needs to send her blocks to\ndistribute them to the majority as quickly as possible. The second\nproblem occurs if those nodes also distribute blocks to connecting\npeers: this makes it easy for Alice to be sure she'll hear about a new\nblock as soon as possible by connecting to every one of those peers with\na high-speed, low-latency connection. Bizzarely the idea does work if\nthe advertised nodes only accept blocks, and never send blocks - instead\nminers would *only* send their blocks to other miners who have proven\ntheir hashing power, and do so essentially largest miner to smallest.\nNow unless Alice already is a large miner, her strategy can't work.  Of\ncourse this will strongly encourage further centralization of pools. But\nit is in the interests of rational miners sadly.\n\nThat blocks take a finite amount of time to propagate makes the problem\nworse: for Alice to learn that another block has been mined only\nrequires her to receive the small 80 byte header from a peer; she\ndoesn't need the whole block. She thus can know the block exists well\nbefore it has a chance to propagate fully. Even if every miner were\ndirectly peered to every other as some suggest, Alice could simply make\nsmaller blocks, faster propagating than everyone else and use especially\nlow-latency connections to win the race.\n\nOn the other hand, the Bitcoin protocol is currently designed such that\na miner can mine a block without knowing the previous block in full.\nGiven the large block reward and/or a supply of transactions they knew\nno other miner had a rational miner would start trying to extend the\nlongest chain they know about prior to actually receiving and validating\nthe full block. Again, when miners start doing this - perhaps out of\ndesperation due to low revenue - as long as Alice has the lowest latency\nnetwork she'll win. (she doesn't even need to have the highest bandwidth\nin this case) We can change the protocol to force miners to fully\nvalidate blocks prior to mining extensions, but that only forces Alice\nto get more bandwidth - she still wins.\n\nSpeaking of low-latency, latency not only centralizes control in a\nsingle pool, it centralizes pools and even mining hardware itself in a\nsingle physical location. Anyone at the edges of the propagation network\nwill get comparatively less revenue than those in the center, gradually\ntightening the network, even without selfish mining. Alice's strategy of\ncourse should be to position her nodes in the geographical center. It's\nworth noting how if Alice is the one with the lowest average latency,\nshe will win against any other miner trying to persue the same selfish\nminer strategy that she is using.\n\n\nFinally nLockTime makes the selfish miner strategy even more profitable.\nYou may not be aware, but it's possible to make a transaction that can't\nbe mined until some time in the future, measured by either block height\nor block timestamp. I've proposed to use this mechanism in\nannounce/commit sacrifices: you create a transaction that can't be mined\nuntil some point in the future that sacrifices a large amount to mining\nfees, and then prior to that point you include it in the blockchain as\ndata, proving the whole world knew about your transaction. The idea was\nthat which miner managed to include the transaction, and collect the\nreward, would be random. However whenever Alice is able to maintain a\nlead over other miners she's able to reliably mine significantly more of\nthose valuable transactions, further increasing her revenue over other\nminers.\n\n\nI must say, you've really opened a can of worms...\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000379e2a349ccee65efc29d43e2c742f8e4a9247d68025ace84\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/d4c62965/attachment.sig>"
            },
            {
                "author": "Alan Reiner",
                "date": "2013-11-04T21:45:24",
                "message_text_only": "Sorry guys, I'm a little late to the party here.  I skimmed over the\npaper, and appreciated Peter Todd's recap of it.  My first thought was\nthat this seems profit-neutral at best, when you take into account all\nthe races you lose by trying to beat the propagation of other miners'\nblocks.\n\nSo given the assumption that Alice is \"well-connected\" as Peter\nmentioned, it seems like this is a concern.  But is this a realistic\nassumption?  All miners have an incentive to be thoroughly connected to\none another, to make sure they minimize the amount of time they spend\nmining on forks and that their blocks win with minimal chance of being\norphaned.  Is it realistic that one miner can somehow monopolize the\ngood connections when the big miners are already trying to do the same\nthing for honest reasons?  If you have a network full of honest miners\nand this one selfish-miner, it seems that all the honest miners need to\ndo is try to establish those connections to each other as well as Alice\ndoes, and Alice will end up orphaning all her profit away.\n\nFurthermore, you can de-incentivize it by simply randomizing the order\nof broadcasts.  Although you are maintaining multiple concurrent\nconnections, the data still exits your network card as a serial stream\nof packets, and it seems that if you randomize who gets your new-block\nbroadcasts first, then it further reduces the Alice's advantage if she's\nnot guaranteed to \"be first.\"   Sure, she can do it sometimes, but it\nwould seem that even a couple failures to beat the rest of the network\nis going to erase most/all of what she gained on the blocks/chains that\nshe wins.\n\nI liked the statement by Chris WIllmer on the reddit thread:  \"practice\n> theory\".  The more we can theorize our way to believing the\nconclusions that this is a problem, the more incentive there is for\nsomeone intelligent to actually try it.  It's very possible that the\nconditions needed to execute this \"attack\" just cannot be attained in\npractice. \n\n-Alan\n\n\n\n\nOn 11/04/2013 04:04 PM, Peter Todd wrote:\n> On Mon, Nov 04, 2013 at 02:12:44PM -0500, Ittay wrote:\n>> On Mon, Nov 4, 2013 at 10:25 AM, Ittay <ittay.eyal at cornell.edu> wrote:\n>>\n>>> As for the rational motivation of the individual miners - that's a good\n>>> point!\n>>> Here is a solution we did not put in the paper due to space constraints\n>>> that should alleviate your concern:\n>>> Instead of locally choosing a block at random, have a deterministic\n>>> pseudo-random mechanism for choosing between competing chains. E.g., take\n>>> the one whose last block hash is smaller. This way all miners choose the\n>>> same chain, and the guarantees of our solution hold.\n>>>\n>> I take that back.\n> Speaking of, I'm going to take back my solution as well; I misunderstood\n> your paper.\n>\n> So here's your argument in a ELI5 nutshell:\n>\n> Alice is a miner with some amount of hashing power. She has the ability\n> to detect new blocks on the network extremely effectively for whatever\n> reason; in short she has unusually good knowledge of the state of the\n> network. She is also very good at publishing her blocks and getting them\n> to the majority of hashing power in very little time; she has unusually\n> good connectivity to all miners. (low-latency and high bandwidth)\n>\n> She's so good at this that when she finds a new block, she keeps it a\n> secret! She can get away with this because she knows that the moment Bob\n> finds a block, she can immediately broadcast it to the rest of the\n> network before the other block propagates. Instead of building on Bob's\n> blocks, almost everyone builds on Alice's block, depriving Bob of the\n> revenue. Gradually Alice gets more and more miners because Bob, and\n> other pools, don't pay out as much.\n>\n> You propose a rule where essentially miners extend Bob's block 50% of\n> the time, and show in your paper how that leads to a scenario where\n> Alice needs to have at leastr 1/4 of the total hashing power to\n> succesfully pull this attack off anyway.\n>\n>\n> What I did succesfully show is that for a short-term rational miner\n> they're still better off mining to extend the block they hear about\n> first rather than using your pick-one-at-random rule, because when you\n> hear about a block is important information about whether or not the\n> majority is mining on it. This is true even if others are using the\n> pick-one-at-random rule. (they're better defecting than doing what's\n> right for the whole network) Even worse is that miners have a rational\n> incentive to broadcast such near-target headers to try to encourage\n> other miners to work on the same fork that they are working on. The\n> near-target idea came about for a totally different reason, so it's\n> something that might wind up being implemented anyway.\n>\n> Mike Hearn's idea of making it easy to identify nodes associated with\n> hashing power is still wrong. Although again, it's something that miners\n> themselves have rational incentives to do. (you always want to encourage\n> others to send you their blocks, and you also want to be able to send\n> your blocks to the majority of hashing power as quickly as possible)\n>\n> Where the idea goes wrong is it makes it easier for Alice to identify\n> hashing power, specifically where she needs to send her blocks to\n> distribute them to the majority as quickly as possible. The second\n> problem occurs if those nodes also distribute blocks to connecting\n> peers: this makes it easy for Alice to be sure she'll hear about a new\n> block as soon as possible by connecting to every one of those peers with\n> a high-speed, low-latency connection. Bizzarely the idea does work if\n> the advertised nodes only accept blocks, and never send blocks - instead\n> miners would *only* send their blocks to other miners who have proven\n> their hashing power, and do so essentially largest miner to smallest.\n> Now unless Alice already is a large miner, her strategy can't work.  Of\n> course this will strongly encourage further centralization of pools. But\n> it is in the interests of rational miners sadly.\n>\n> That blocks take a finite amount of time to propagate makes the problem\n> worse: for Alice to learn that another block has been mined only\n> requires her to receive the small 80 byte header from a peer; she\n> doesn't need the whole block. She thus can know the block exists well\n> before it has a chance to propagate fully. Even if every miner were\n> directly peered to every other as some suggest, Alice could simply make\n> smaller blocks, faster propagating than everyone else and use especially\n> low-latency connections to win the race.\n>\n> On the other hand, the Bitcoin protocol is currently designed such that\n> a miner can mine a block without knowing the previous block in full.\n> Given the large block reward and/or a supply of transactions they knew\n> no other miner had a rational miner would start trying to extend the\n> longest chain they know about prior to actually receiving and validating\n> the full block. Again, when miners start doing this - perhaps out of\n> desperation due to low revenue - as long as Alice has the lowest latency\n> network she'll win. (she doesn't even need to have the highest bandwidth\n> in this case) We can change the protocol to force miners to fully\n> validate blocks prior to mining extensions, but that only forces Alice\n> to get more bandwidth - she still wins.\n>\n> Speaking of low-latency, latency not only centralizes control in a\n> single pool, it centralizes pools and even mining hardware itself in a\n> single physical location. Anyone at the edges of the propagation network\n> will get comparatively less revenue than those in the center, gradually\n> tightening the network, even without selfish mining. Alice's strategy of\n> course should be to position her nodes in the geographical center. It's\n> worth noting how if Alice is the one with the lowest average latency,\n> she will win against any other miner trying to persue the same selfish\n> miner strategy that she is using.\n>\n>\n> Finally nLockTime makes the selfish miner strategy even more profitable.\n> You may not be aware, but it's possible to make a transaction that can't\n> be mined until some time in the future, measured by either block height\n> or block timestamp. I've proposed to use this mechanism in\n> announce/commit sacrifices: you create a transaction that can't be mined\n> until some point in the future that sacrifices a large amount to mining\n> fees, and then prior to that point you include it in the blockchain as\n> data, proving the whole world knew about your transaction. The idea was\n> that which miner managed to include the transaction, and collect the\n> reward, would be random. However whenever Alice is able to maintain a\n> lead over other miners she's able to reliably mine significantly more of\n> those valuable transactions, further increasing her revenue over other\n> miners.\n>\n>\n> I must say, you've really opened a can of worms...\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Android is increasing in popularity, but the open development platform that\n> developers love is also attractive to malware creators. Download this white\n> paper to learn more about secure code signing practices that can help keep\n> Android apps secure.\n> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/0837e02c/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-04T22:03:17",
                "message_text_only": "On Mon, Nov 04, 2013 at 04:45:24PM -0500, Alan Reiner wrote:\n> So given the assumption that Alice is \"well-connected\" as Peter\n> mentioned, it seems like this is a concern.  But is this a realistic\n> assumption?  All miners have an incentive to be thoroughly connected to\n> one another, to make sure they minimize the amount of time they spend\n> mining on forks and that their blocks win with minimal chance of being\n> orphaned.  Is it realistic that one miner can somehow monopolize the\n> good connections when the big miners are already trying to do the same\n> thing for honest reasons?  If you have a network full of honest miners\n> and this one selfish-miner, it seems that all the honest miners need to\n> do is try to establish those connections to each other as well as Alice\n> does, and Alice will end up orphaning all her profit away.\n\nRight, but as I said, I think this is likely to become a contest of who\ncan create the lowest latency mining operation, or to be more precise,\nwho can get the best ratio of latency per dollar.\n\nUnfortunately even with totally \"honest\" mining winning orphan rates is\na function of latency; what this paper has done is mainly show a\nremarkably effective way of leveraging low-latency and very good\nvisibility to the network.\n\nRegardless, globe-spanning low-latency networks cost a lot of money, so\nif they are something that makes mining more profitable, for whatever\nreason, that's an effect that will incentivise pools to grow larger and\nmore centralized.\n\n> Furthermore, you can de-incentivize it by simply randomizing the order\n> of broadcasts.  Although you are maintaining multiple concurrent\n> connections, the data still exits your network card as a serial stream\n> of packets, and it seems that if you randomize who gets your new-block\n> broadcasts first, then it further reduces the Alice's advantage if she's\n> not guaranteed to \"be first.\"   Sure, she can do it sometimes, but it\n> would seem that even a couple failures to beat the rest of the network\n> is going to erase most/all of what she gained on the blocks/chains that\n> she wins.\n\nYeah, there's a lot of possible solutions, but what I'm seeing looking\nat them is they all tend to be not economically rational, in the short\nterm, or even worse, they actually incentivize mining pools to get\nlarger. For instance anything that tries to prevent Alice from sybiling\nthe network by forcing nodes to prove they have mining capacity just\nmeans that larger miners will have an advantage over smaller ones in\ngetting their blocks propagated as fast as possible. Once Alice does\nhave a reasonable amount of mining capacity, she can still use the\nselfish miner attack to grow larger and more profitable.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000aae6d13639c5b4555eeda301ebcbc53f12e8a633e267c8331\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/58801b29/attachment.sig>"
            },
            {
                "author": "Gustaw Wieczorek",
                "date": "2013-11-05T04:14:37",
                "message_text_only": "Mike Hearn wrote:\n\n> how about if we wrote code to automatically build a miner backbone\n\nYeah, let's build a backbone, or a cloud, and then we could have Google run it!\n\nCome on, Mike, your conflict-of-interest as an employee is hanging out in the open, flapping in the breeze here...\u00a0 Don't you think it's a bit obvious for somebody in your position to advocate centralization of infrastructure, especially when it comes to bitcoin?\n\n\nOn the other hand, I guess your blind trust in IP addresses as a solid foundation for security is why you were so shocked when the NSA hacked your \"backbone\".\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/7b947cb5/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-05T04:39:05",
                "message_text_only": "On Mon, Nov 04, 2013 at 08:14:37PM -0800, Gustaw Wieczorek wrote:\n> Mike Hearn wrote:\n> \n> > how about if we wrote code to automatically build a miner backbone\n> \n> Yeah, let's build a backbone, or a cloud, and then we could have Google run it!\n> \n> Come on, Mike, your conflict-of-interest as an employee is hanging out in the open, flapping in the breeze here...\u00a0 Don't you think it's a bit obvious for somebody in your position to advocate centralization of infrastructure, especially when it comes to bitcoin?\n> \n> \n> On the other hand, I guess your blind trust in IP addresses as a solid foundation for security is why you were so shocked when the NSA hacked your \"backbone\".\n\nGo away.\n\nMike specifically mentioned the idea of using Tor addresses, which are\nauthenticated. In addition this mechanism to create a backbone\n*automatically* is exactly as decentralized as Bitcoin mining itself is.\nIt has nothing to do with Google.\n\nI suggested the mechanism myself for slightly different reasons, and if\nyou know me, you'd know I'm the first to jump on anyone pushing\ncentralization.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000517064a43348fa39325bdc244ffb1d0da11ab85676d494a85\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/05df1b7c/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-11-05T06:37:43",
                "message_text_only": "On Mon, Nov 4, 2013 at 8:39 PM, Peter Todd <pete at petertodd.org> wrote:\n> I suggested the mechanism myself for slightly different reasons, and if\n> you know me, you'd know I'm the first to jump on anyone pushing\n> centralization.\n\nLikewise, I did too and am also not very tolerant with \"trusted\" or\n\"centeralized\" things in general.\n\nAn authenticated miner announced set of nodes is _far_ from a cure\nall, as any attack they stop can be recovered by adding \"and dos\nattacks the public miner announced nodes\" to the attack's\nrequirements... but we build security with layers.\n\nBitcoin's security is only improved when we can weave the network\ntighter and make partitioning it more difficult."
            }
        ],
        "thread_summary": {
            "title": "Auto-generated miner backbone",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Michael Gronager",
                "Mike Hearn",
                "Peter Todd",
                "Alan Reiner",
                "Gregory Maxwell",
                "Pieter Wuille",
                "Gustaw Wieczorek"
            ],
            "messages_count": 24,
            "total_messages_chars_count": 59052
        }
    },
    {
        "title": "[Bitcoin-development] Committing to extra block data/a better merge-mine standard",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-11-04T18:16:49",
                "message_text_only": "On Mon, Nov 04, 2013 at 01:00:16PM +0100, Mike Hearn wrote:\n> Given that IP address data is inherently transient, perhaps a better\n> solution is to define a short hash in the coinbase that commits to extra\n> data that is relayed along with block data (e.g. appended to the block\n> message). It can then be stored temporarily in the block db and erased\n> after some time, like a few months. It would therefore not really be a part\n> of the chain, but could be extended as we see fit with any other\n> semi-transient data required. A new \"getextra\" message would let nodes\n> query for it.\n> \n> The hash can be short because it doesn't have to survive brute forcing\n> attacks longer than the expected validity period of the transient data\n> anyway. 80 bits would probably be overkill.\n\nNo sense in compromising - you need a whole merkle path to prove the\nextra data is valid so you might as well make this a full 256 bits;\nanother 22 bytes is insignificant compared to the size of the path.\n\nAgain, the right way to do this is define the standard to use the last\ntxout so that midstate compression can be applied in the future. We can\nre-use this for merge-mining and other commitments easily by defining a\nsimple standard based on defined path directions. Essentially for each\nthing you might want to commit, perhaps a merge-mined coin, a p2pool\nshare, a UTXO commitment, whatever, generate a random 128-bit UUID.\n\nNow interpret the bits of that UUID as an allowed path: 0 = left, 1 =\nright, from the top of the tree. When you build the tree, make sure\neverything that is going to be committed to uses it's allowed path; the\ntree will look a bit jagged. If everyone picks their per-purpose UUIDs\nrandomly the paths won't collide for very many levels on average, and\npath lengths will remain short. Validating that some given data was\ncommitted properly is simple and easy: just check the path, and check\nthat the directions from the top of the tree followed the spec.\n\nFor timestamping, just pick any empty spot in the tree.\n\nYou'll want to put some \"reasonable\" limit on actual path lengths, just\npick something like 32 levels; if applications pick their UUIDs honestly\na collision will be very unlikely. You can also make the allowed paths\nblock specific by defining them as H(uuid | nonce), with nonce as an\noptional PUSHDATA just prior to the commitment pushdata, allowing overly\nlong paths to be eliminated entirely by simply incrmenting the nonce.\n\nUnlike the original, broken, merge-mining standard alt-coins have used\nthis actually works, extends indefinitely, and is simple and easy to\nvalidate given a single merkle-path for each purpose. Generating the\ntrees of commitments is a bit convoluted, but at least that code only\nneeds to be written once.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000002c43b3c05c0ed0842317747f0d1e3982489d0a51e7c8a05a3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/91107aba/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-04T18:32:12",
                "message_text_only": "On Mon, Nov 04, 2013 at 01:16:49PM -0500, Peter Todd wrote:\n> You'll want to put some \"reasonable\" limit on actual path lengths, just\n> pick something like 32 levels; if applications pick their UUIDs honestly\n> a collision will be very unlikely. You can also make the allowed paths\n> block specific by defining them as H(uuid | nonce), with nonce as an\n\nThis could be H(uuid | nLockTime) Coinbase transactions still have a\nnLockTime, and while it's generally left at zero it can be any value\nvalid for a transaction in the block.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000086d6d5b17d979d44a24a68bcf92eb9aea18351e4f6bc485b6\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/12cb149d/attachment.sig>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-11-04T19:11:34",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 11/4/13 10:16 AM, Peter Todd wrote:\n> Again, the right way to do this is define the standard to use the\n> last txout so that midstate compression can be applied in the\n> future. We can re-use this for merge-mining and other commitments\n> easily by defining a simple standard based on defined path\n> directions. Essentially for each thing you might want to commit,\n> perhaps a merge-mined coin, a p2pool share, a UTXO commitment,\n> whatever, generate a random 128-bit UUID.\n> \n> Now interpret the bits of that UUID as an allowed path: 0 = left, 1\n> = right, from the top of the tree. When you build the tree, make\n> sure everything that is going to be committed to uses it's allowed\n> path; the tree will look a bit jagged. If everyone picks their\n> per-purpose UUIDs randomly the paths won't collide for very many\n> levels on average, and path lengths will remain short. Validating\n> that some given data was committed properly is simple and easy:\n> just check the path, and check that the directions from the top of\n> the tree followed the spec.\n\nYou mean... an authenticated prefix tree? Composable/commutative\nproperties are not needed as far as I can see, so you could make the\npath validation, traversal, and proof size smaller by using level\ncompression.\n\nI had previously proposed to this list a hash256-to-UUID mechanism\nexplicitly for this purpose. Recap: use 122 of the low 128 bits of the\naux-chain's genesis block to form a version=4 (random) or version=6\n(previously unused) UUID. However since making that proposal I am now\nleaning towards simply using the hash of the genesis block directly to\nidentify aux chains since level compression will allow longer keys\nwith the same path length.\n\nI'm in the middle of writing BIPs to this end, among my many other\ntasks. But basically it's the same as you describe (\"OP_RETURN\n<32-byte auth tree root>\" for the last output), except keys don't\nnecessarily have to be UUIDs.\n\nIf there is general interest, I can make finishing this a higher priority.\n\nMark\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.19 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJSd/FmAAoJEAdzVfsmodw4pA0QALtgKLKsMNFocUanKGNp5T1F\n918IjFt/HASRMs4GXiPpIeTB+o5Id6aCsg1ikKRuL9xD+WKoSyo83JP5UmcxGjFA\nWTPi/0/ArYRh8L7ECvWoBSanNrun3z72p3KMI1Aa8qcJCgWbPx88AYeJv0Ki4JOo\n1Pxc883772bOJnazrh4f/C4gcrqrlgs29PwI1rc3yCD9dmJhVmkz+O0/yfq+U8Gg\nFXrpqR14mUM36wGX2HjqEual7Ry/7TEz5Ne4o8uncaVHtGgaYVw45a5Hk6rdo1rH\nF3EV9nIpsLhGyqbKPqSxSju2h3eYQxQXKUP14mJS+ja/mKFXVc3PXDV+IHtXAplk\n4gW8vtTWtVIDJAGTTh5RkJu5yAr57vq9lUMTNGGk6v1C3xOPP2C097sHRLaD4kD+\nolsw5M9NW/Qpn1X3SCN3K85f7dvV3+fucmWL8mPM9KMLfc38fgs7I5SQgurMngsS\n2D5jSwcZVjI/4n6ocgK3Y66yKC5xuzOOi2ZV+pPM38TjUeCF8fbjRnoIWyaBPDWy\nmKA0bJiw5NMzi+IsNK5YDS5Gqb3qxS6tYLCp1+hesW3pBj35Zv/LdSh5DyecRETW\nJ0ye56lw/DfRAfNf+YERvrznqC2WVDZcQaElACq8R/nPJ2HD53p+SfxMSbljVO+I\nSDsDOSvAzfQjQBLGdkx7\n=5fPS\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-15T22:06:48",
                "message_text_only": "On Mon, Nov 04, 2013 at 11:11:34AM -0800, Mark Friedenbach wrote:\n> > Now interpret the bits of that UUID as an allowed path: 0 = left, 1\n> > = right, from the top of the tree. When you build the tree, make\n> > sure everything that is going to be committed to uses it's allowed\n> > path; the tree will look a bit jagged. If everyone picks their\n> > per-purpose UUIDs randomly the paths won't collide for very many\n> > levels on average, and path lengths will remain short. Validating\n> > that some given data was committed properly is simple and easy:\n> > just check the path, and check that the directions from the top of\n> > the tree followed the spec.\n> \n> You mean... an authenticated prefix tree? Composable/commutative\n> properties are not needed as far as I can see, so you could make the\n> path validation, traversal, and proof size smaller by using level\n> compression.\n\nYou don't need level compression if you adopt my per-block randomization\nidea. I think we'd be better off keeping the proofs as simple as\npossible, just dumb merkle paths.\n\n> I had previously proposed to this list a hash256-to-UUID mechanism\n> explicitly for this purpose. Recap: use 122 of the low 128 bits of the\n> aux-chain's genesis block to form a version=4 (random) or version=6\n> (previously unused) UUID. However since making that proposal I am now\n> leaning towards simply using the hash of the genesis block directly to\n> identify aux chains since level compression will allow longer keys\n> with the same path length.\n\nI mentioned UUID more in spirit than in terms of the official UUID\nstandard; any large randomly picked integer is fine.\n\n> If there is general interest, I can make finishing this a higher priority.\n\nWouldn't hurt to run the idea past forrestv, given p2pool will be\naffected as it'd need to adopt the standard. He's run into some oddness\nwith mining hardware and nonces that would be good to understand. (note\nhow p2pool blocks don't commit to a fully random hash - there's some\nextra bytes in there due to stratum or something IIRC)\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000601a5b2f2b4a597851fdf00f6fc3572bbc03f26857c170032\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/735bc9b1/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-11-04T19:38:09",
                "message_text_only": "I like the UUID-as-path idea. That resolves the problem of how to share the\nalt-chain merkle tree quite nicely.\n\nOn Mon, Nov 4, 2013 at 7:16 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> No sense in compromising - you need a whole merkle path to prove the\n> extra data is valid so you might as well make this a full 256 bits;\n>\n\nThe Merkle branch doesn't get stored indefinitely though, whereas the\ncoinbase hash does. The data stored in the coinbase [output] can always\njust be the 256-bit root hash truncated to less.\n\nI doubt the additional bytes make much difference really, so the additional\ncomplexity may not be worth it. But it wouldn't be an issue to do.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/3bbee2b8/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-11-04T19:53:05",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 11/4/13 11:38 AM, Mike Hearn wrote:\n> The Merkle branch doesn't get stored indefinitely though, whereas\n> the coinbase hash does. The data stored in the coinbase [output]\n> can always just be the 256-bit root hash truncated to less.\n> \n> I doubt the additional bytes make much difference really, so the \n> additional complexity may not be worth it. But it wouldn't be an\n> issue to do.\n\nThe bits make a difference if you are merged mining. You can use the\nbirthday attack to construct two data trees whose hash match the\n(truncated) value, each containing separate aux block headers. This\nallows you to double-count the bitcoin PoW for more than one aux block\non the same chain, potentially facilitating aux chain attacks.\n\nIf you want 128 bits of security for merged mined aux chains, you need\n256 bits of hash in the coinbase.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.19 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJSd/shAAoJEAdzVfsmodw48a0P/RaCOctBDvhU0THnsUw6nRBm\nA8oH3Kpio4ZltU4oIT0tznZbUOG2j2xVrmATqXDYOZQ6FuGihjmkKJ9jHgl57pb5\n0qDdCBiEuWtLIh2+Awrb3Y0s8czyCQP9/1CJyzdEFmI8rSwCaqJMa6B2Ny6Xz6+8\neiK45YdXCPgdTAb56FKOi9WzOe0g1aOO5KiUOci22xRkXvh4qPYrt2F0LIgjZTdC\nkoyXU6dcKON9H8Cecu+ag7jJ5A9ZDj7oIq5rflEyolh2V4ie0tGQ50rFGg/ii6iQ\nTz9AWwigsHEkuinBTuN5041Xb8nAgHLvA60RQ41lWUHJxfAvDE+wN6NqgHmMVaRo\nNHqlZcCuEl1jn7HW81XQTpgarrXHk1G7b2vK10pB/lUxUNIstZvCSjcp8QdtmC9v\ntIhC2czSnsQaE6kIBuHxDNZxOlZ8DxBYCAgXSkycwznwzGhFPP0xB1lV9HfaP5+i\naikmx5SQmqBXQQKsxmIacoykrfu5x+O2TB/bq8JhJ1ak2jG9LVFyQqjorABVAgA7\npLEN6EomWht5qstaLVfHYpNsLMf6WA7UzRG08HKItUeDPtG7bDx8vBx5TvIUjT44\nA0i09bOt8ZIgp+lJ8lFLWiPLChViAoy7fqKy2vrdsZerOF3l4LUQeQO/xnfZc+dG\nAEG+7iCBOMxJSVoJ5bP6\n=nydG\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-11-04T20:10:04",
                "message_text_only": "Yes, sure. I was talking about the case of transiently relayed data, like\nIP addresses.\n\n\nOn Mon, Nov 4, 2013 at 8:53 PM, Mark Friedenbach <mark at monetize.io> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> On 11/4/13 11:38 AM, Mike Hearn wrote:\n> > The Merkle branch doesn't get stored indefinitely though, whereas\n> > the coinbase hash does. The data stored in the coinbase [output]\n> > can always just be the 256-bit root hash truncated to less.\n> >\n> > I doubt the additional bytes make much difference really, so the\n> > additional complexity may not be worth it. But it wouldn't be an\n> > issue to do.\n>\n> The bits make a difference if you are merged mining. You can use the\n> birthday attack to construct two data trees whose hash match the\n> (truncated) value, each containing separate aux block headers. This\n> allows you to double-count the bitcoin PoW for more than one aux block\n> on the same chain, potentially facilitating aux chain attacks.\n>\n> If you want 128 bits of security for merged mined aux chains, you need\n> 256 bits of hash in the coinbase.\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG/MacGPG2 v2.0.19 (Darwin)\n> Comment: GPGTools - http://gpgtools.org\n> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n>\n> iQIcBAEBAgAGBQJSd/shAAoJEAdzVfsmodw48a0P/RaCOctBDvhU0THnsUw6nRBm\n> A8oH3Kpio4ZltU4oIT0tznZbUOG2j2xVrmATqXDYOZQ6FuGihjmkKJ9jHgl57pb5\n> 0qDdCBiEuWtLIh2+Awrb3Y0s8czyCQP9/1CJyzdEFmI8rSwCaqJMa6B2Ny6Xz6+8\n> eiK45YdXCPgdTAb56FKOi9WzOe0g1aOO5KiUOci22xRkXvh4qPYrt2F0LIgjZTdC\n> koyXU6dcKON9H8Cecu+ag7jJ5A9ZDj7oIq5rflEyolh2V4ie0tGQ50rFGg/ii6iQ\n> Tz9AWwigsHEkuinBTuN5041Xb8nAgHLvA60RQ41lWUHJxfAvDE+wN6NqgHmMVaRo\n> NHqlZcCuEl1jn7HW81XQTpgarrXHk1G7b2vK10pB/lUxUNIstZvCSjcp8QdtmC9v\n> tIhC2czSnsQaE6kIBuHxDNZxOlZ8DxBYCAgXSkycwznwzGhFPP0xB1lV9HfaP5+i\n> aikmx5SQmqBXQQKsxmIacoykrfu5x+O2TB/bq8JhJ1ak2jG9LVFyQqjorABVAgA7\n> pLEN6EomWht5qstaLVfHYpNsLMf6WA7UzRG08HKItUeDPtG7bDx8vBx5TvIUjT44\n> A0i09bOt8ZIgp+lJ8lFLWiPLChViAoy7fqKy2vrdsZerOF3l4LUQeQO/xnfZc+dG\n> AEG+7iCBOMxJSVoJ5bP6\n> =nydG\n> -----END PGP SIGNATURE-----\n>\n>\n> ------------------------------------------------------------------------------\n> Android is increasing in popularity, but the open development platform that\n> developers love is also attractive to malware creators. Download this white\n> paper to learn more about secure code signing practices that can help keep\n> Android apps secure.\n> http://pubads.g.doubleclick.net/gampad/clk?id=65839951&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131104/3c6d8bed/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Committing to extra block data/a better merge-mine standard",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Peter Todd",
                "Mark Friedenbach"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 14996
        }
    },
    {
        "title": "[Bitcoin-development] Electrum version 1.9",
        "thread_messages": [
            {
                "author": "Thomas Voegtlin",
                "date": "2013-11-04T11:40:00",
                "message_text_only": "Electrum version 1.9 is now released.\n\nThis version connects to multiple servers, and it also checks the SSL \ncertificates of servers it knows.\nPlease note that the BIP32 features are postponed (to version 2.0), due \nto the discussions about mnemonic seed format.\n\n\nHere is the changelog:\n\n# Release 1.9\n* The client connects to multiple servers in order to retrieve block \nheaders and find the longest chain\n* SSL certificate validation (to prevent MITM)\n* Deterministic signatures (RFC 6979)\n* Menu to create/restore/open wallets\n* Create transactions with multiple outputs from CSV (comma separated \nvalues)\n* New user interface for text mode, named \"stdio\" (does not use curses)\n* Plugins are no longer tied to the qt GUI, they can reach all GUIs\n* Proxy bugs have been fixed"
            }
        ],
        "thread_summary": {
            "title": "Electrum version 1.9",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Thomas Voegtlin"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 779
        }
    },
    {
        "title": "[Bitcoin-development] BIP proposal - patch to raise selfish mining threshold.",
        "thread_messages": [
            {
                "author": "Ittay",
                "date": "2013-11-05T16:56:53",
                "message_text_only": "Hello,\n\nPlease see below our BIP for raising the selfish mining threshold.\nLooking forward to your comments.\n\nBest,\nIttay\n\n---\n\nBitcoin Improvement Proposal\n\nOwners: Ittay Eyal and Emin Gun Sirer\n\nWe suggest a change in the propagation and mining algorithm for chains of\nthe same difficulty, to raise the threshold on Selfish Mining attacks.\n\n* Current situation:\nWhen a miner is notified of a new chain of the same difficulty as the one\nit is mining on, it will ignore it.\n\n* Background:\nThe selfish mining attack and its implications were described in detail in\nthe following research paper:\nhttp://arxiv.org/abs/1311.0243v1\n\n* Proposal:\nTo thwart selfish mining attacks launched by less than 25% of the mining\npower, we propose the following change to the protocol:\nWhen a miner learns of more than one chain of the same difficulty, it\nshould propagate all of them, and choose one of them to mine on uniformly\nat random among all chains of the same difficulty.\n\nWhen hearing of a chain of maximal difficulty that it did not know of\nbefore:\n1. Add it to a local list of maximal difficulty chains.\n2. Propagate it to its neighbors.\n3. Choose a branch uniformly at random from the local list, and mine on it.\n\n* Example:\nt0: learn of chain A of difficulty x.\n    propagate A to neighbors.\n    start mining on A.\nt1: learn of chain B of difficulty x.\n    propagate B to neighbors.\n    toss a coin between A and B; if B wins, switch to mining on B.\nt2: learn of chain C of difficulty x.\n    propagate C to neighbors.\n    toss a 3 faced coin among A, B, and C; switch to mining on the winning\nchain.\n\n* Concerns and answers:\n1. No harm to miners when all are honest.\nMining blocks is a random Poisson process, which is memoryless. Having\nmined on the block in the past does not provide an advantage in locating a\nsolution in the future. Therefore, a miner is not harmed by switching the\nchain on which it mines.\n\n2. No new vulnerabilities introduced:\nCurrently the choice among equal-length chains is done arbitrarily,\ndepending on network topology. This arbitrariness is a source of\nvulnerability. We replace it with explicit randomness, which is at the\ncontrol of the protocol. The change does not introduce executions that were\nnot possible with the old protocol.\n\n3. Complete backward compatibility:\nAny subset of the miners can switch to the proposed protocol.\n\n4. Progressive improvement:\nEach miner that adopts the change raises the threshold a little bit. The\nthreshold will reach 25% with universal adoption.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/6602a128/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-05T17:05:41",
                "message_text_only": "On Tue, Nov 05, 2013 at 11:56:53AM -0500, Ittay wrote:\n> Hello,\n> \n> Please see below our BIP for raising the selfish mining threshold.\n> Looking forward to your comments.\n\n<snip>\n\n> 2. No new vulnerabilities introduced:\n> Currently the choice among equal-length chains is done arbitrarily,\n> depending on network topology. This arbitrariness is a source of\n> vulnerability. We replace it with explicit randomness, which is at the\n> control of the protocol. The change does not introduce executions that were\n> not possible with the old protocol.\n\nCredit goes to Gregory Maxwell for pointing this out, but the random\nchoice solution does in fact introduce a vulnerability in that it\ncreates incentives for pools over a certain size to withhold blocks\nrather than immediately broadcasting all blocks found.\n\nThe problem is that when the pool eventually choses to reveal the block\nthey mined, 50% of the hashing power switches, thus splitting the\nnetwork. Like the original attack this can be to their benefit. For\npools over a certain size this strategy is profitable even without\ninvesting in a low-latency network; Maxwell or someone else can chime in\nwith the details for deriving that threshold.\n\nI won't get a chance to for a few hours, but someone should do the\nanalysis on a deterministic switching scheme.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000005e25ca9b9fe62bdd6e8a2b4527ad61753dd2113c268bec707\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/78930d87/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-05T17:14:45",
                "message_text_only": "On Tue, Nov 05, 2013 at 12:05:41PM -0500, Peter Todd wrote:\n> On Tue, Nov 05, 2013 at 11:56:53AM -0500, Ittay wrote:\n> > Hello,\n> > \n> > Please see below our BIP for raising the selfish mining threshold.\n> > Looking forward to your comments.\n> \n> <snip>\n> \n> > 2. No new vulnerabilities introduced:\n> > Currently the choice among equal-length chains is done arbitrarily,\n> > depending on network topology. This arbitrariness is a source of\n> > vulnerability. We replace it with explicit randomness, which is at the\n> > control of the protocol. The change does not introduce executions that were\n> > not possible with the old protocol.\n> \n> Credit goes to Gregory Maxwell for pointing this out, but the random\n> choice solution does in fact introduce a vulnerability in that it\n> creates incentives for pools over a certain size to withhold blocks\n> rather than immediately broadcasting all blocks found.\n> \n> The problem is that when the pool eventually choses to reveal the block\n> they mined, 50% of the hashing power switches, thus splitting the\n> network. Like the original attack this can be to their benefit. For\n> pools over a certain size this strategy is profitable even without\n> investing in a low-latency network; Maxwell or someone else can chime in\n> with the details for deriving that threshold.\n> \n> I won't get a chance to for a few hours, but someone should do the\n> analysis on a deterministic switching scheme.\n\nOh, and I don't want to give the wrong impression: there's no need to\nrush to get this problem fixed. Even if someone wanted to launch an\nattack right now, with a fair amount of resources, there's a lot of\ncounter-measures based on human intervention that can definitely stop\nthe attack in the short-term; what's needed is at worst moderate-term,\nand much more likely a long-term approach. In addition, keep in mind\nthat this attack is very easy to detect, so if one is actually launched\nwe will know immediately and can start taking direct counter-measures at\nthat time.\n\nThat Gregory Maxwell so quickly identified a flaw in this proposed\nsolution suggests we should proceed carefully.\n\nIt'd be good to do a test of this attack, as well as possible solutions,\non testnet to better explore it and possible counter-measures.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000a03ea8c90161a275ee63d077ec35c1b582c77934c0be12a02\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/d8f114b2/attachment.sig>"
            },
            {
                "author": "Ittay",
                "date": "2013-11-05T17:43:15",
                "message_text_only": "On Tue, Nov 5, 2013 at 12:14 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> On Tue, Nov 05, 2013 at 12:05:41PM -0500, Peter Todd wrote:\n> > On Tue, Nov 05, 2013 at 11:56:53AM -0500, Ittay wrote:\n>\n> Oh, and I don't want to give the wrong impression: there's no need to\n> rush to get this problem fixed. Even if someone wanted to launch an\n> attack right now, with a fair amount of resources, there's a lot of\n> counter-measures based on human intervention that can definitely stop\n> the attack in the short-term\n\n\nThe attack can be easily hidden. And be sure that before today, today,\nand after today, very smart people are at their computer planning attacks\non Bitcoin. Exploits must be published and fixed FAST.\n\nNevertheless, I agree  that, as you say, we must not rush it. Look at the\nBIP, find if we missed anything, and let's discuss it.\n\n\n> In addition, keep in mind\n> that this attack is very easy to detect, so if one is actually launched\n> we will know immediately and can start taking direct counter-measures at\n> that time.\n>\n\nNot really. Please see the discussion section in our paper.\n\n\n> That Gregory Maxwell so quickly identified a flaw in this proposed\n> solution suggests we should proceed carefully.\n>\n\nThere is no flaw. You were just reiterating that the solution does not give\nus the 51% percent security you thought you had before. We showed that\nwe're not getting this back, I'm afraid.\n\nBest,\nIttay\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/8c0bd106/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-11-05T17:54:14",
                "message_text_only": "On Tue, Nov 5, 2013 at 6:43 PM, Ittay <ittay.eyal at cornell.edu> wrote:\n\n> The attack can be easily hidden. And be sure that before today, today,\n> and after today, very smart people are at their computer planning attacks\n> on Bitcoin. Exploits must be published and fixed FAST.\n>\n\nI think it would be helpful if you actually implemented and pulled off this\nattack, by becoming the dominant miner capable of reversing spends at will.\nThen we'd know how quickly it can be done.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/58285c95/attachment.html>"
            },
            {
                "author": "Alessandro Parisi",
                "date": "2013-11-05T18:07:55",
                "message_text_only": "I agree with Ittay: when bugs are found, they must be fixed ASAP,\nexpecially when they affect a sensitive sw such as Bitcon; in IT security,\nevery flaw that is exploitable in abstract, is going to be exploited in\nreal, sooner or later, also taking into account the increasing parallel\ncomputing power; beware of false sense of security\n\nWebSite: http://www.startithub.com\nPer rimanere aggiornato in merito a Startup, Innovazione e Normativa di\nsettore, sottoscrivi la nostra newsletter:\nhttp://www.startithub.com/blog/sottoscrivi-newsletter/\n\n\n2013/11/5 Mike Hearn <mike at plan99.net>\n\n> On Tue, Nov 5, 2013 at 6:43 PM, Ittay <ittay.eyal at cornell.edu> wrote:\n>\n>> The attack can be easily hidden. And be sure that before today, today,\n>> and after today, very smart people are at their computer planning attacks\n>> on Bitcoin. Exploits must be published and fixed FAST.\n>>\n>\n> I think it would be helpful if you actually implemented and pulled off\n> this attack, by becoming the dominant miner capable of reversing spends at\n> will. Then we'd know how quickly it can be done.\n>\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models.\n> Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and\n> register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/e141a5e9/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-11-05T18:37:04",
                "message_text_only": "On Tue, Nov 5, 2013 at 1:07 PM, Alessandro Parisi <startithub at gmail.com> wrote:\n> I agree with Ittay: when bugs are found, they must be fixed ASAP, expecially\n> when they affect a sensitive sw such as Bitcon; in IT security, every flaw\n> that is exploitable in abstract, is going to be exploited in real, sooner or\n> later, also taking into account the increasing parallel computing power;\n> beware of false sense of security\n\nThat is quite ignorant.  Bitcoin is far more complex than standard IT\nsecurity \"fix ASAP\" mantra.  Distributed consensus is a new field of\ncomputer science, and blindly applying standard logic to bitcoin will\nquickly result in large problems.\n\nEvery fix has the chance of changing the game theory or economics of\nbitcoin.  A change to the core consensus protocol within bitcoin --\nmining -- is even more game-theory- and economically-critical to the\ncore system.  Changes thus have more impact, where any change\npotentially reduces bitcoin's value to zero in the worst case.\n\nBitcoin is akin to medical device or avionics software.  We cannot\njust change at will, without significant research, analysis and\ntesting.   \"It is a bug, it must be fixed ASAP\" is ignorant and\ndangerous.\n\nFurther, this is at present a THEORETICAL problem, and the solution\npresented has some obvious flaws, that would make our current, WORKING\nSYSTEM more fragile, and less secure.\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Alessandro Parisi",
                "date": "2013-11-05T18:55:45",
                "message_text_only": "Thank you very much for your fair response, Sir;\nthis means that anytime a bug is found in Bitcoin protocol, chances are\nthat it would take a lot more time to get fixed\n\n\n2013/11/5 Jeff Garzik <jgarzik at bitpay.com>\n\n> On Tue, Nov 5, 2013 at 1:07 PM, Alessandro Parisi <startithub at gmail.com>\n> wrote:\n> > I agree with Ittay: when bugs are found, they must be fixed ASAP,\n> expecially\n> > when they affect a sensitive sw such as Bitcon; in IT security, every\n> flaw\n> > that is exploitable in abstract, is going to be exploited in real,\n> sooner or\n> > later, also taking into account the increasing parallel computing power;\n> > beware of false sense of security\n>\n> That is quite ignorant.  Bitcoin is far more complex than standard IT\n> security \"fix ASAP\" mantra.  Distributed consensus is a new field of\n> computer science, and blindly applying standard logic to bitcoin will\n> quickly result in large problems.\n>\n> Every fix has the chance of changing the game theory or economics of\n> bitcoin.  A change to the core consensus protocol within bitcoin --\n> mining -- is even more game-theory- and economically-critical to the\n> core system.  Changes thus have more impact, where any change\n> potentially reduces bitcoin's value to zero in the worst case.\n>\n> Bitcoin is akin to medical device or avionics software.  We cannot\n> just change at will, without significant research, analysis and\n> testing.   \"It is a bug, it must be fixed ASAP\" is ignorant and\n> dangerous.\n>\n> Further, this is at present a THEORETICAL problem, and the solution\n> presented has some obvious flaws, that would make our current, WORKING\n> SYSTEM more fragile, and less secure.\n>\n> --\n> Jeff Garzik\n> Senior Software Engineer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/9b6cf3a4/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-11-05T18:58:18",
                "message_text_only": "On Tue, Nov 5, 2013 at 1:55 PM, Alessandro Parisi <startithub at gmail.com> wrote:\n> this means that anytime a bug is found in Bitcoin protocol, chances are that\n> it would take a lot more time to get fixed\n\nCorrect.  There is significant potential that a fix can create other\nproblems...   and any major mistake could instantly destroy > $2\nbillion worth of value.\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Jameson Lopp",
                "date": "2013-11-05T19:33:14",
                "message_text_only": "The conversations that spawned from this paper have been fascinating to \nread, but I have a problem with the conclusions. To quote the paper:\n\n\"The Bitcoin ecosystem is open to manipulation, and potential takeover, \nby miners seeking to maximize their rewards. This paper presented \nSelfish-Mine, a mining strategy that enables pools of colluding miners\nthat adopt it to earn revenues in excess of their mining power. Higher \nrevenues can lead new rational miners to join sel\fsh miner pools, \nleading to a collapse of the decentralized currency.\"\n\nPlease explain to me why any rational miner would collude to earn \nslightly higher short term profits at the expense of then wiping out the \nvalue of all their bitcoins in the long term.\n\nAlso, if you felt that this vulnerability is an immediate danger to the \nBitcoin network, why publish the vulnerability publicly rather than \nfirst disclosing it privately to the core developers? Apologies if you \ndid disclose it privately in the past; I've seen no mention of it.\n--\nJameson Lopp\nSoftware Engineer\nBronto Software\n\nOn 11/05/2013 01:58 PM, Jeff Garzik wrote:\n> On Tue, Nov 5, 2013 at 1:55 PM, Alessandro Parisi <startithub at gmail.com> wrote:\n>> this means that anytime a bug is found in Bitcoin protocol, chances are that\n>> it would take a lot more time to get fixed\n>\n> Correct.  There is significant potential that a fix can create other\n> problems...   and any major mistake could instantly destroy > $2\n> billion worth of value.\n>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-05T19:56:16",
                "message_text_only": "On Tue, Nov 05, 2013 at 12:43:15PM -0500, Ittay wrote:\n> On Tue, Nov 5, 2013 at 12:14 PM, Peter Todd <pete at petertodd.org> wrote:\n> \n> > On Tue, Nov 05, 2013 at 12:05:41PM -0500, Peter Todd wrote:\n> > > On Tue, Nov 05, 2013 at 11:56:53AM -0500, Ittay wrote:\n> >\n> > Oh, and I don't want to give the wrong impression: there's no need to\n> > rush to get this problem fixed. Even if someone wanted to launch an\n> > attack right now, with a fair amount of resources, there's a lot of\n> > counter-measures based on human intervention that can definitely stop\n> > the attack in the short-term\n> \n> \n> The attack can be easily hidden. And be sure that before today, today,\n> and after today, very smart people are at their computer planning attacks\n> on Bitcoin. Exploits must be published and fixed FAST.\n\nNot this exploit.\n\nHere's a perfectly plausible worst-case scenario, that could be\nhappening right now: RAND High Frequency Trading Corp (a subsidiary of\nGeneral Evil) has a globe-spanning low-latency network of fiber,\nline-of-sight microwave, and some experimental line-of-site neutrino\nlinks criss-crossing the globe. They can get data to and from any point\non this planet faster than anyone else. Of course, in addition to their\nspectacular network they have an immense amount of computing power, as\nwell as exotic overclocked liquid nitrogen bathed CPU's that run at\nclockspeeds double what commercial hardware can do; in short, they have\naccess to scalar performance no-one else has. Of course, they like to\nkeep a healthy reserve so, 99% of all this fancy gear is constantly\nidle. Whatever, they can afford it.\n\nRAND just hired a bunch of fresh MIT graduates, the best of the best.\nProblem is the best of the best tends to make not so best mistakes, so\nRAND figures a Training Exercise is in order. Fortunately for them the NSA (a\nsubsidiary of General Evil) slipped a rootkit into my keyboard a week or\nso ago - probably that time when I woke up in that farmers field with a\n*splitting* headache - and are reading what I'm typing right now.\n\nI go on to explain how an excellent training exercise for these fresh\nMIT graduates would be to implement this nifty attack some Cornell\nresearchers came up with. It's really simple, elegant even, but to do it\nbest what you really want is the kind of low-latency network a\nhigh-frequency-trading corporation would have. I then point out how a\ngood training exercise ideally is done in a scenario where there is\ngenuine risk and reward, but where the worst-case consequences are\nmanageable - new hires to tend to screw up. (I then go on to explain my\nanalog electronics background, and squeeze in some forced anecdote about\nhow I blew up something worth a lot of money owned by my employers at\nsome point in the distant past)\n\nUnfortunately for the operators of BTC Guild, one of these new MIT grads\nhappens to have a: passed General Evil's psych screening with flying\ncolors, and b: have spent too much time around the MIT Kidnappng Club.\nHe decides it'd be easier to just kidnap the guy running BTC Guild than\nfill out the paperwork to borrow RAND's FPGA cluster, so he does.\n\nAs expected the attack runs smoothly: with 30% of the hashing power,\nneutrino burst generator/encoders's rigged around the globe to fire the\nmoment another pool gets a block, and the odd DoS attack for fun, they\nquickly make a mockery of the Bitcoin network, reducing every other\nminers profitability to zero in minutes. The other miners don't have a\nhope: they're blocks have to travel the long way, along the surface of\nthe earth, while RAND's blocks shave off important milliseconds by\ntaking the direct route.\n\n\nOf course, this doesn't go unnoticed, er, eventualy: 12 hours later the\noperators of GHash.IO, Eligius, slush, Bitminter, Eclipse and ASICMiner\nopen their groggy eyes and mutter something about how that simulcast\nTuesday party really shouldn't have had an open bar... or so much coke.\n\nThey don't even notice that the team from BTC Guild has vanished, but\nthey do notice a YouTube video of Gavin right on bitcoin.org doing his\nbest Spock impression, er, I mean appealing for calm and promising that\nTop Men are working on the issue of empty blocks as we speak. Meanwhile\nCNN's top headline reads \"IS THIS THE END OF BITCOIN?!?!\"\n\nIt takes another hour for the Aspirin's to finally kick in, but\neventually get all get on IRC and start trying to resolve the issue -\nseems that whenever any of them produce a block, somehow by incredible\ncoincidence someone else finds another block first. After a few rounds\nof this they're getting suspicious. (if they weren't all so hung-over\nthey might have also found suspicious the fact that whenever they found\na block they saw a sudden blue flash - Cherenkov radiation emitted when\nthose neutrino's interacted with the vitreous humour in their eyeballs)\n\nIt's quickly realized that \"somehow\" BTC Guild isn't affected...\nGHash.IO and Eligius, 22% and 13% of the hashing power respectively,\ndecide to try a little experiment: they peer to each other and only each\nother through an encrypted tunnel and... hey, no more lucky blocks!\nslush, 7% of the hashing power is invited to the peering group next,\nfollowed by Bitminter, 6%, and Eclipse, 2%, and finally ASICMiner, 1%,\nfor a grand total of... 51% of the hashing power!\n\nOf course, just creating blocks isn't useful for users, they need to be\ndistributed too, so someone quickly writes up a \"one-way firewall\" patch\nthat allows the group's blocks to propagate to the rest of the network.\nBlocks created by anyone else are ignored.\n\nIt takes a few more hours, but eventually the attacker seems to run out\nof blocks, and transaction processing returns to normal, albeit a little\nslow. (20 min block average) Of course, soon there's a 3,000 post thread\non bitcointalk complaining about the \"centralized pool cartel\", but\nsomehow life goes on.\n\nThe next day Gavin goes on CNN, and gives a lovely interview about how\nthe past two days events show how the strength of the Bitcoin network is\nin the community. For balance they interview this annoying \"Peter Todd\"\nguy from \"Keep Bitcoin Free!\" who blathers on about how relying on\naltruism or something will doom the Bitcoin network in the long run.\nAfter the interview Gavin respectfully points out that maybe next time\nthey find a so called \"developer\" with a ratio of bitcointalk posts to\nactual lines of code in the Bitcoin git repository better than one\nhundred to one. The producer just wishes that \"Mike Hearn\" guy was\navailable; at least he's got a sense of fashion, sheesh!\n\n\nAnyway, I'm out of space for my little story, but yeah, the ending\ninvolves a group of now-rich pool operators who decide to start a large\nfinancial services and data networking company, oh, and time-travel...\n\n\n> Nevertheless, I agree  that, as you say, we must not rush it. Look at the\n> BIP, find if we missed anything, and let's discuss it.\n\nIndeed.\n\nQuite seriously, your attack is a serious long-term risk, but in the\nshort term the social dynamics of Bitcoin are such that it's just not a\nshow-stopping risk. At worst some miners will lose a bunch of money -\nthat's something that's happened before with the March chain fork, and\nsure enough Bitcoin survived just fine.\n\n> > In addition, keep in mind\n> > that this attack is very easy to detect, so if one is actually launched\n> > we will know immediately and can start taking direct counter-measures at\n> > that time.\n> >\n> \n> Not really. Please see the discussion section in our paper.\n\nYou can hide *who* is the attacker - you can't hide the fact that an\nattack is happening if done on a meaningful scale.\n\n> > That Gregory Maxwell so quickly identified a flaw in this proposed\n> > solution suggests we should proceed carefully.\n> >\n> \n> There is no flaw. You were just reiterating that the solution does not give\n> us the 51% percent security you thought you had before. We showed that\n> we're not getting this back, I'm afraid.\n\nThat's not what we're concerned about - what we're concerned about is\nthat your BIP doesn't discuss the issue, and you didn't seem to be aware\nof it. That suggests that the analysis is incomplete. There's no\npressing need to rush changes, as explained above by example, so we're\nbest off understanding the issue thoroughly first.\n\nThere's a whole spectrum of potential solutions that haven't been\ndiscussed - I myself have two approaches I'm working on that may solve\nthis problem in ways you haven't (publicly) considered. I'm sure there\nare many others out there.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000005144f6a7109b9f8543880a0a5f85a054ec53966bc2daa24c\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/2ca9c7a6/attachment.sig>"
            },
            {
                "author": "Ittay",
                "date": "2013-11-05T17:26:46",
                "message_text_only": "That sounds like selfish mining, and the magic number is 25%. That's the\nminimal pool size.\nToday the threshold is 0% with good connectivity.\n\nIf I misunderstood your point, please elaborate.\n\nIttay\n\n\n\nOn Tue, Nov 5, 2013 at 12:05 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> On Tue, Nov 05, 2013 at 11:56:53AM -0500, Ittay wrote:\n> > Hello,\n> >\n> > Please see below our BIP for raising the selfish mining threshold.\n> > Looking forward to your comments.\n>\n> <snip>\n>\n> > 2. No new vulnerabilities introduced:\n> > Currently the choice among equal-length chains is done arbitrarily,\n> > depending on network topology. This arbitrariness is a source of\n> > vulnerability. We replace it with explicit randomness, which is at the\n> > control of the protocol. The change does not introduce executions that\n> were\n> > not possible with the old protocol.\n>\n> Credit goes to Gregory Maxwell for pointing this out, but the random\n> choice solution does in fact introduce a vulnerability in that it\n> creates incentives for pools over a certain size to withhold blocks\n> rather than immediately broadcasting all blocks found.\n>\n> The problem is that when the pool eventually choses to reveal the block\n> they mined, 50% of the hashing power switches, thus splitting the\n> network. Like the original attack this can be to their benefit. For\n> pools over a certain size this strategy is profitable even without\n> investing in a low-latency network; Maxwell or someone else can chime in\n> with the details for deriving that threshold.\n>\n> I won't get a chance to for a few hours, but someone should do the\n> analysis on a deterministic switching scheme.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 0000000000000005e25ca9b9fe62bdd6e8a2b4527ad61753dd2113c268bec707\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/b28e776d/attachment.html>"
            },
            {
                "author": "Patrick",
                "date": "2013-11-05T17:37:54",
                "message_text_only": "The ratio of honest miners that mine the first block they see is > 0.5\n\nYour proposed solution would reduce that ratio to 0.5\n\nIn other words your proposed change would make the attack you describe\neasier not harder.\n\nOn 11/05/2013 09:26 AM, Ittay wrote:\n> That sounds like selfish mining, and the magic number is 25%. That's\n> the minimal pool size. \n> Today the threshold is 0% with good connectivity. \n>\n> If I misunderstood your point, please elaborate. \n>\n> Ittay \n>\n>\n>\n> On Tue, Nov 5, 2013 at 12:05 PM, Peter Todd <pete at petertodd.org\n> <mailto:pete at petertodd.org>> wrote:\n>\n>     On Tue, Nov 05, 2013 at 11:56:53AM -0500, Ittay wrote:\n>     > Hello,\n>     >\n>     > Please see below our BIP for raising the selfish mining threshold.\n>     > Looking forward to your comments.\n>\n>     <snip>\n>\n>     > 2. No new vulnerabilities introduced:\n>     > Currently the choice among equal-length chains is done arbitrarily,\n>     > depending on network topology. This arbitrariness is a source of\n>     > vulnerability. We replace it with explicit randomness, which is\n>     at the\n>     > control of the protocol. The change does not introduce\n>     executions that were\n>     > not possible with the old protocol.\n>\n>     Credit goes to Gregory Maxwell for pointing this out, but the random\n>     choice solution does in fact introduce a vulnerability in that it\n>     creates incentives for pools over a certain size to withhold blocks\n>     rather than immediately broadcasting all blocks found.\n>\n>     The problem is that when the pool eventually choses to reveal the\n>     block\n>     they mined, 50% of the hashing power switches, thus splitting the\n>     network. Like the original attack this can be to their benefit. For\n>     pools over a certain size this strategy is profitable even without\n>     investing in a low-latency network; Maxwell or someone else can\n>     chime in\n>     with the details for deriving that threshold.\n>\n>     I won't get a chance to for a few hours, but someone should do the\n>     analysis on a deterministic switching scheme.\n>\n>     --\n>     'peter'[:-1]@petertodd.org <http://petertodd.org>\n>     0000000000000005e25ca9b9fe62bdd6e8a2b4527ad61753dd2113c268bec707\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models. Explore\n> techniques for threading, error checking, porting, and tuning. Get the most \n> from the latest Intel processors and coprocessors. See abstracts and register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/3ac68674/attachment.html>"
            },
            {
                "author": "Alessandro Parisi",
                "date": "2013-11-05T18:18:22",
                "message_text_only": "Patrick, could you please explain us why the solution proposed by Ittay\nwould drop the actual honest miners ratio, becoming so backfire? Thanks a\nlot\n\n\n2013/11/5 Patrick <patrick at intersango.com>\n\n>  The ratio of honest miners that mine the first block they see is > 0.5\n>\n> Your proposed solution would reduce that ratio to 0.5\n>\n> In other words your proposed change would make the attack you describe\n> easier not harder.\n>\n>\n> On 11/05/2013 09:26 AM, Ittay wrote:\n>\n> That sounds like selfish mining, and the magic number is 25%. That's the\n> minimal pool size.\n> Today the threshold is 0% with good connectivity.\n>\n>  If I misunderstood your point, please elaborate.\n>\n>  Ittay\n>\n>\n>\n> On Tue, Nov 5, 2013 at 12:05 PM, Peter Todd <pete at petertodd.org> wrote:\n>\n>> On Tue, Nov 05, 2013 at 11:56:53AM -0500, Ittay wrote:\n>> > Hello,\n>> >\n>> > Please see below our BIP for raising the selfish mining threshold.\n>> > Looking forward to your comments.\n>>\n>>  <snip>\n>>\n>> > 2. No new vulnerabilities introduced:\n>> > Currently the choice among equal-length chains is done arbitrarily,\n>> > depending on network topology. This arbitrariness is a source of\n>> > vulnerability. We replace it with explicit randomness, which is at the\n>> > control of the protocol. The change does not introduce executions that\n>> were\n>> > not possible with the old protocol.\n>>\n>>  Credit goes to Gregory Maxwell for pointing this out, but the random\n>> choice solution does in fact introduce a vulnerability in that it\n>> creates incentives for pools over a certain size to withhold blocks\n>> rather than immediately broadcasting all blocks found.\n>>\n>> The problem is that when the pool eventually choses to reveal the block\n>> they mined, 50% of the hashing power switches, thus splitting the\n>> network. Like the original attack this can be to their benefit. For\n>> pools over a certain size this strategy is profitable even without\n>> investing in a low-latency network; Maxwell or someone else can chime in\n>> with the details for deriving that threshold.\n>>\n>> I won't get a chance to for a few hours, but someone should do the\n>> analysis on a deterministic switching scheme.\n>>\n>> --\n>> 'peter'[:-1]@petertodd.org\n>> 0000000000000005e25ca9b9fe62bdd6e8a2b4527ad61753dd2113c268bec707\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models. Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and registerhttp://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n>\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing listBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models.\n> Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and\n> register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/ccaea6cc/attachment.html>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2013-11-05T18:57:34",
                "message_text_only": "Great paper Ittay, thanks for all your work on this.\n\n> Today the threshold is 0% with good connectivity.\n\nFig. 2 captures this well, the threshold is only zero if 'y' is 1. In  \nSection 6 and 6.1 you argue y -> 1 but the sybil attack you describe,  \nisn't that more like how *all* sophisticated miners would want to ensure  \ntheir blocks are widely propagated? I think you can't assume only the  \nselfish miner is doing it.\n\nBased on the current  'first seen' algorithm, as you say, competing  \nlongest chains happen about every 60 blocks.  The rest of the time, a  \nsingle block propagates through the vast majority of the network  \n'uncontested'.  If there are multiple valid longest blocks being  \nsimultaneously propagated, then  propagation pattern of the competing  \nblocks will determine hash rate on each.\n\nSelfish mining requires exploiting the race condition between learning  \nabout a competing block, and publishing your own. Usually we talk about  \nminimizing publishing latency so that your block ends up uncontested 59/60  \ntimes, and in the 1/60 times, even then your block has the best chance of  \nwinning.\n\nSelfish mining forgoes the 59/60 chance of your block being uncontested,  \nand instead chooses to 'race the network' every time. You start 'one step  \nbehind' the competing block (since of course you only learn about it after  \nit starts propagating), so you must rely on being able to outrace  \npropagation of the competing block through a private low-latency  \nside-network which can inject your block at multiple points throughout the  \nbitcoin p2p network to outrace the competitor.\n\nI think it's a stretch to say 'y' is 0 with good connectivity. Even the  \nbest connected mining pools today are concerned with this 'y' factor.\n\nHere's a probably very dumb idea... to throw out one possible \"solution\"...\n\nYou want a way to fake-out the 'selfish miner' into disclosing their  \nblocks -- how can your force their hand to prevent them from accumulating  \nlonger private chains?\n\nWhat if you propagate (and relay) an encrypted block header which honest  \nminers will timestamp when they receive it, then 10 seconds later  \npropagate the decryption key to unblind it. But here's the catch - maybe  \nthe decryption results in junk, maybe it results a new longer block. If  \nit's a real block then it gets priority based on when the ciphertext was  \nreceived instead of when the decryption key was received. Now 'selfish  \nminer' can't race the network anymore, because they are always in state 0'  \nand can't tell if they are up against a ghost, or a real competing block.  \nIf they wait for the decryption key to check, it's too late, and they are  \nguaranteed to lose unless they can out-race the network, e.g. back at  \nt=50%. Of course there would need to be some way to anti-DDoS this which  \nallows for some amount of these fake-outs without letting them get out of  \nhand.\n\nThanks,\nJeremy\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/15da1196/attachment.html>"
            },
            {
                "author": "Ittay",
                "date": "2013-11-05T22:49:26",
                "message_text_only": "On Tue, Nov 5, 2013 at 1:57 PM, Jeremy Spilman <jeremy at taplink.co> wrote:\n\n\n> I think it's a stretch to say 'y' is 0 with good connectivity. Even the\n> best connected mining pools today are concerned with this 'y' factor.\n>\n\nCheck out the following paper for the effect a single node can have on\npropagation, and on the relation between block size and propagation speed.\nThis strongly supports our assumption.\nhttp://www.tik.ee.ethz.ch/file/49318d3f56c1d525aabf7fda78b23fc0/P2P2013_041.pdf\n\n\n>\n> Here's a probably very dumb idea... to throw out one possible \"solution\"...\n>\n> You want a way to fake-out the 'selfish miner' into disclosing their\n> blocks -- how can your force their hand to prevent them from accumulating\n> longer private chains?\n>\n> What if you propagate (and relay) an encrypted block header which honest\n> miners will timestamp when they receive it, then 10 seconds later propagate\n> the decryption key to unblind it. But here's the catch - maybe the\n> decryption results in junk, maybe it results a new longer block. If it's a\n> real block then it gets priority based on when the ciphertext was received\n> instead of when the decryption key was received. Now 'selfish miner' can't\n> race the network anymore, because they are always in state 0' and can't\n> tell if they are up against a ghost, or a real competing block. If they\n> wait for the decryption key to check, it's too late, and they are\n> guaranteed to lose unless they can out-race the network, e.g. back at\n> t=50%. Of course there would need to be some way to anti-DDoS this which\n> allows for some amount of these fake-outs without letting them get out of\n> hand.\n>\n\nThat's a dangerous way to go, opening the door to DoS attacks, as you\nmention. Besides, it makes a simple algorithm complicated, and doing such\nchanges may lead to different vulnerabilities that are difficult to cover.\n\nBest,\nIttay\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/96e0df01/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP proposal - patch to raise selfish mining threshold.",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Patrick",
                "Mike Hearn",
                "Peter Todd",
                "Jeremy Spilman",
                "Alessandro Parisi",
                "Jameson Lopp",
                "Ittay"
            ],
            "messages_count": 16,
            "total_messages_chars_count": 39443
        }
    },
    {
        "title": "[Bitcoin-development] comments on selfish-mining model (Re: BIP proposal - patch to raise selfish mining threshold.)",
        "thread_messages": [
            {
                "author": "Adam Back",
                "date": "2013-11-07T20:05:34",
                "message_text_only": "(Talking about the paper, not the BIP).  With regard to racing the other\nwinner which catches up when private pool length=1:\n\ni) the model does not appear to take into account that when another pool\ngoes on to mine a block, and the attacker publishes their selfishly-withheld\nblock, the selfish pool will not be able to change the existing winners\nmind.  This is not insignificant as the pools have 30%, 20%, 15%, 7% etc. \n\nii) The miners already have an incentive, as other big bitcoin processors,\nto maintain fast, secure and redundant links to other significant miners. \n\nThe attacker is giving up a large proportion of their winnings from the\ntimes that they win at all.  Say the attacker IS the 30% pool, when he wins\nand waits for someone else to win, > 80% of the network is pool mined, so\nthere is a good chance that the other winner individually represents a\nnon-negligible proportion of the network or a sufficiently well connected\nportion of the network that the attacker will be unable to race them to\npublication with a useful proportion of the network.\n\niii) Also broadcast is not instantaneous, lets say network propagation takes\n10 seconds; a big proportion of the time, the actual mining times will be\nmore than 5 seconds apart so that by the time the selfish miner learns of\nthe block, much of the network will already have accepted it block as first.\n\niv) Even within the 10 seconds ambiguity period, the more powerful miner\nwill tend statistically to come first, and so reach a bigger portion of the\nnetwork, as well as having a stronger incentive to maintain links as in ii).\n\nThese four factors erode the achievable \\gamma parameter.  I suspect it\nunlikely \\gamma>0.5 would be achievable, putting the profitable threshold\n\\alpha in 25% - 33%.  (And assuming whatever techniques to reduce latency\nare used by the selfish pools can be used by other pools.)\n\n\nYour main result that even with \\gamma=0 (if you dont win any races) that\nyou still win once the selfish pool reaches 33% is an important new\nindication, which needs further consideration.  (And you could expect to win\nsome percentage \\gamma>0 even with the factors I mention, and full\nimplementation of the same latency reduction techniques in all moderate\nsized miners, selfish and normal).\n\nIt is also not clear what will happen if multiple selfish miners compete\nwith each other.  A selfish miner cooperating as a peer to increase\npercentage runs risk of mutual sabotage - he has to announce his private\nblock to his co-conspirator, and the co-conspirator may publish, or collude\nwith another non-selfish miner.  \n\nYour supposition is there is a profit motive to collude.  However there are\nother profit motives in bitcoin that are not exercised - for example there\nwere for sometime 2 pools that had excess of 50% power, and yet this was not\nabused for double spending.  Of course increasing profit by a new mining\nstrategy is not theft as double spending which has a clear loser.  Miners\neven exercised restraint and volutarily avoided growing over 50%.\n\n\nAs others have I think said by now analysis is welcome.  It seems that Peter\nTodd may have observed the same or something similar wrt miner incentives\nsome months ago, though it wasnt as widely read nor formally verified.  \n\nIt might be useful to release the source for your simulator if that is open\nto you.\n\n\nIn my opinion a constructive direction for reducing centralization risks is\nto try to reduce the use of and motivation for pools.  Even at <51% per pool\nthere is (probabilistic) miner risk in double-spends.  And there is risk\nthat the large miners evolve to become a defacto policy enforcement point\nfor policies not aligned with user interests, or with fungibility of bitcoin\nwhich itself presents another kind of risk (defacto reduced fungibility\nshould this arise would also be bad for bitcoin).\n\nAlso without even having mining power, there is scope to network hacking (eg\nof routers in front of miners) to influence the mining profit, and even\ndouble spend.  As I mentioned large miners have an incentive to maintain\nsecure redudant links (probably some links using Tor for blocks) as a\ncounter-measure. \n\nAdam\n\nOn Tue, Nov 05, 2013 at 11:56:53AM -0500, Ittay wrote:\n>   Hello,\n>   Please see below our BIP for raising the selfish mining threshold.\n>   Looking forward to your comments."
            }
        ],
        "thread_summary": {
            "title": "comments on selfish-mining model (Re: BIP proposal - patch to raise selfish mining threshold.)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Adam Back"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 4343
        }
    },
    {
        "title": "[Bitcoin-development] Possible Solution To SM Attack",
        "thread_messages": [
            {
                "author": "colj at Safe-mail.net",
                "date": "2013-11-05T20:51:24",
                "message_text_only": "Preliminary:\nAlice has the ability to hear of a block before all other miners do.\n\nThe Problem:\nSay Alice built a block, A1, from previous block 0. She doesn't let other miners know about it. She then works on A2 with previous block A1. Bob on the other hand is still working on B1 with previous block 0. Bob now finds a block and he broadcasts it. The assumption here is Alice will be the first miner to hear of this block and she will send her previously mined block, A1, to all other miners. By the time Bobs block arrives to other miners majority of them will already have received Block A1 and Bobs block will most likely be orphaned. Alice revealed her block, A1, only when Bob broadcast his block. This means she has been mining on block A2 with previous block A1 for longer than any other miner thus gaining an advantage without increasing her hash rate.\n\nWhat We Know:\nAlice has gained an advantage with time. She mines longer on the valid block.\nIn order for this attack to work Alice must reveal her previously mined block as late as possible, gaining her the most time spent working on the valid block. Since she has such good view of the Bitcoin network she can wait until a miner finds a block to release her previously mined block.\n\nThe most obvious sign of this attack taking place is the timing. A miner will receive a block and very quickly hear of another block both built from the same previous block. \n\nThe block that a miner hears first is the one which will be mined on.\n\nPossible Solution:\nIf N amount of blocks built of the same previous block are received within a time frame of T mine on the block with the lowest hash.\n\nLogic:\nIn order for Alice to pull of this attack she not only has to propagate her blocks first she must also ensure her blocks are of the smallest hash.\n\nAlice would now have to decrease her target to pull of this attack. Since she has a lower target it will take her longer to find a valid block negating her time advantage.\n\n\ncolj"
            },
            {
                "author": "Quinn Harris",
                "date": "2013-11-05T22:07:16",
                "message_text_only": "I don't think choosing the block with the lowest hash is the best \noption.  The good and bad miners have an equal probability of finding a \nlower hash.  But after Alice finds a block she can easily determine the \nprobability that someone else will find a lower hash value that meets \nthe difficulty requirement.  This can be used to judge if its best to \nstart working on the next block or work on finding a lower value hash to \nincrease the chance her block is used.\n\nIts better if the block is chosen in a way that doesn't let Alice know \nthe probability her block will be chosen.  One simple possibility is to \nstart at the least significant bit of the hash and whichever has a 1 is \nchosen and if both bits are the same the next bit is used.\n\nThis should be pseudo random and not give Alice any knowledge ahead of \ntime if her block will be chosen.  This would prevent the network hash \npower from being split between two branches unlike each node choosing a \nrandom block.\n\nQuinn\n\nOn 11/05/2013 05:51 PM, colj at Safe-mail.net wrote:\n> Preliminary:\n> Alice has the ability to hear of a block before all other miners do.\n>\n> The Problem:\n> Say Alice built a block, A1, from previous block 0. She doesn't let other miners know about it. She then works on A2 with previous block A1. Bob on the other hand is still working on B1 with previous block 0. Bob now finds a block and he broadcasts it. The assumption here is Alice will be the first miner to hear of this block and she will send her previously mined block, A1, to all other miners. By the time Bobs block arrives to other miners majority of them will already have received Block A1 and Bobs block will most likely be orphaned. Alice revealed her block, A1, only when Bob broadcast his block. This means she has been mining on block A2 with previous block A1 for longer than any other miner thus gaining an advantage without increasing her hash rate.\n>\n> What We Know:\n> Alice has gained an advantage with time. She mines longer on the valid block.\n> In order for this attack to work Alice must reveal her previously mined block as late as possible, gaining her the most time spent working on the valid block. Since she has such good view of the Bitcoin network she can wait until a miner finds a block to release her previously mined block.\n>\n> The most obvious sign of this attack taking place is the timing. A miner will receive a block and very quickly hear of another block both built from the same previous block.\n>\n> The block that a miner hears first is the one which will be mined on.\n>\n> Possible Solution:\n> If N amount of blocks built of the same previous block are received within a time frame of T mine on the block with the lowest hash.\n>\n> Logic:\n> In order for Alice to pull of this attack she not only has to propagate her blocks first she must also ensure her blocks are of the smallest hash.\n>\n> Alice would now have to decrease her target to pull of this attack. Since she has a lower target it will take her longer to find a valid block negating her time advantage.\n>\n>\n> colj\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models. Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Drak",
                "date": "2013-11-05T23:03:13",
                "message_text_only": "On 5 November 2013 22:07, Quinn Harris <btcdev at quinnharris.me> wrote:\n\n> I don't think choosing the block with the lowest hash is the best\n> option.  The good and bad miners have an equal probability of finding a\n> lower hash.  But after Alice finds a block she can easily determine the\n> probability that someone else will find a lower hash value that meets\n> the difficulty requirement.  This can be used to judge if its best to\n> start working on the next block or work on finding a lower value hash to\n> increase the chance her block is used.\n\n\nWell in that case, you could make it unpredictable by choosing based on a\nhash of the blockhash and chose the lowest from two. There is no way for\nAlice to know if Bob's resulting hash will be higher or lower than hers\nsince she does not know Bob's blockhash in advance and therefore she would\nbe better broadcasting her block immediately.\n\nYou could even add another unpredictable factor: deciding the rules of\nwhether higher or lower wins by hashing both competing blockhashes. If the\nleading two hex digits are below 128 lower wins, and if above, higher wins.\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/f54e78ea/attachment.html>"
            },
            {
                "author": "Quinn Harris",
                "date": "2013-11-06T00:26:59",
                "message_text_only": "On 11/05/2013 08:03 PM, Drak wrote:\n> On 5 November 2013 22:07, Quinn Harris <btcdev at quinnharris.me \n> <mailto:btcdev at quinnharris.me>> wrote:\n>\n>     I don't think choosing the block with the lowest hash is the best\n>     option.  The good and bad miners have an equal probability of\n>     finding a\n>     lower hash.  But after Alice finds a block she can easily\n>     determine the\n>     probability that someone else will find a lower hash value that meets\n>     the difficulty requirement.  This can be used to judge if its best to\n>     start working on the next block or work on finding a lower value\n>     hash to\n>     increase the chance her block is used.\n>\n>\n> Well in that case, you could make it unpredictable by choosing based \n> on a hash of the blockhash and chose the lowest from two. There is no \n> way for Alice to know if Bob's resulting hash will be higher or lower \n> than hers since she does not know Bob's blockhash in advance and \n> therefore she would be better broadcasting her block immediately.\n>\nI don't think that will work but the bit test I suggested won't work either.\n\nAlice can calculate the hash of her blockhash and if the block to mine \nis chosen based on the lowest result she will know the probability Bobs \nblock will be used.  This complexity doesn't change anything.  If hers \nis more than 50% likely to be used she should mine the next block \notherwise its best to work to find a better current block.\n\nBut if the block determination takes into account the current difficulty \nwe can prevent Alice from knowing if Bobs or any block she mines is more \nlikely to win.\n\nAssuming\na = hash of block A\nb = hash of block B\ndifficulty = current difficulty such that A < difficulty and b < difficulty\n\nThe following code could be used to determine if the higher or lower \nblock should be chosen\n\nuint256 choose_block(uint256 a, uint256 b, uint256 difficulty)\n{\n   bool choice = false; // false for lower hash, true for greater hash\n   uint256 am = (a + d/4) % difficulty;\n   uint256 bm = (b + d/4) % difficulty\n   if (a + d/4 >= d)\n     choice = b > a || b < am || bm > a || bm < am;\n   else\n     choice = (b > a && b < am) || (bm > a && bm < am);\n   return choice ? (a > b ? a : b) : (a > b ? b : a);\n}\n\nThe basic idea is to find a range over 0 to difficulty starting at A and \nB that is 1/4 of the range of the difficulty.  If the two ranges overlap \nwhich should be 1/2 of the time pick the greater hash is used otherwise \nthe lower hash.\n\nThere is likely a cleaner solution but this demonstrates the basic idea.\n\nYou could use the hash of the blockhash and just set the difficulty to \nthe maximum hash value which would really just end up removing all the \nmodulus stuff and make the code simpler.  But that code requires much \nless computation that any cryptographic hash.\n\nI think this is preferable to each node randomly picking a block to mine \non as the paper suggests.  This should be completely unpredictable but \ndeterministic so all the miners should end up working on the same block.\n\n> You could even add another unpredictable factor: deciding the rules of \n> whether higher or lower wins by hashing both competing blockhashes. If \n> the leading two hex digits are below 128 lower wins, and if above, \n> higher wins.\n>\n> Drak\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models. Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/2c797822/attachment.html>"
            },
            {
                "author": "Drak",
                "date": "2013-11-05T22:15:27",
                "message_text_only": "On 5 November 2013 20:51, <colj at safe-mail.net> wrote:\n\n> Possible Solution:\n> If N amount of blocks built of the same previous block are received within\n> a time frame of T mine on the block with the lowest hash.\n>\n> Logic:\n> In order for Alice to pull of this attack she not only has to propagate\n> her blocks first she must also ensure her blocks are of the smallest hash.\n>\n> Alice would now have to decrease her target to pull of this attack. Since\n> she has a lower target it will take her longer to find a valid block\n> negating her time advantage.\n\n\nIf I understand the issue properly, this seems like a pretty elegant\nsolution: if two blocks are broadcast within a certain period of eachother,\nchose the lower target. That's a provable fair way of randomly choosing the\nwinning block and would seem like a pretty simply patch.\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/378a96dc/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-11-05T23:06:52",
                "message_text_only": "On Tue, Nov 5, 2013 at 2:15 PM, Drak <drak at zikula.org> wrote:\n> If I understand the issue properly, this seems like a pretty elegant\n> solution: if two blocks are broadcast within a certain period of eachother,\n> chose the lower target. That's a provable fair way of randomly choosing the\n> winning block and would seem like a pretty simply patch.\n\nuh. and so when my solution is, by chance, unusually low... I am\nincentivized to hurry up and release my block because?\n\nI've simulated non-first-block-heard strategies in the past (in the\ntwo nearly tied miner with network latency model) and they result in\nsignificant increase in large (e.g. >>6 block) reorgs). It's easy to\nmake convergence worse or to create additional perverse incentives."
            },
            {
                "author": "Drak",
                "date": "2013-11-05T23:44:15",
                "message_text_only": "On 5 November 2013 23:06, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Tue, Nov 5, 2013 at 2:15 PM, Drak <drak at zikula.org> wrote:\n> > If I understand the issue properly, this seems like a pretty elegant\n> > solution: if two blocks are broadcast within a certain period of\n> eachother,\n> > chose the lower target. That's a provable fair way of randomly choosing\n> the\n> > winning block and would seem like a pretty simply patch.\n>\n> uh. and so when my solution is, by chance, unusually low... I am\n> incentivized to hurry up and release my block because?\n\n\nYes, I saw the flaw as pointed out by Quinn so I then suggested two step\nsolution:\n\n1. Decide high or low by taking a the leading bytes from\nhash(alice)+hash(bob): above certain number we the rule is \"higher wins\",\nbelow a certain number the \"lower hash wins\"\n2. Chose winner based on the higher or lower of hash(alice) or hash(bob)\nbased on the rule coming from 1\n\nNow you have a situation where you don't know the rules of the game in\nadvance (whether high or low wins) until the hands are already dealt nor\nhave any idea about how high or low Bob's hash will be since it's not based\non target anymore, but on a hash of the blockhash so it makes it a guessing\ngame.\n\nYou might have an unusually high or low hash, but then you have no idea\nwhether higher or lower is going to win. So it is better for Alice to just\nbroadcast the block.\n\nWhat do you think?\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131105/8fa2d7da/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-11-06T00:00:04",
                "message_text_only": "> What do you think?\n>\n\nI would like to be convinced that there is, actually, a real-world problem\nbefore thinking about potential solutions.\n\nI'd like to see more analysis of the proposed selfish-mining algorithm at a\nparticular share-of-network and gamma=0 (assume second-broadcast blocks\nalways lose, to make the math easier). I can't reproduce the finding in the\npaper if I take into account the \"opportunity cost\" of working on more\nblocks in the private chain that might be orphaned instead of always simply\nextending the public chain, but it is very possible my little brain is\nmissing something obvious.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/61f2057c/attachment.html>"
            },
            {
                "author": "rob.golding at astutium.com",
                "date": "2013-11-06T00:37:49",
                "message_text_only": "> The Problem:\n> Say Alice built a block, A1, from previous block 0. She doesn't let\n> other miners know about it. She then works on A2 with previous block\n> A1. Bob on the other hand is still working on B1 with previous block\n> 0. Bob now finds a block and he broadcasts it. The assumption here is\n> Alice will be the first miner to hear of this block and she will send\n> her previously mined block, A1, to all other miners. By the time Bobs\n> block arrives to other miners majority of them will already have\n> received Block A1 and Bobs block will most likely be orphaned. Alice\n> revealed her block, A1, only when Bob broadcast his block. This means\n> she has been mining on block A2 with previous block A1 for longer than\n> any other miner thus gaining an advantage without increasing her hash\n> rate.\n\nUnless A1 gets orphaned and B1 gets accepted, in which case all the work \ndone on A2 is 'wasted'.\n\nThe question is whether there is any 'real' advantage over time for A \nover B.\n\n> What We Know:\n> Alice has gained an advantage with time. She mines longer on the valid \n> block.\n\nShe mines longer on *a* block which *may* become the valid block, yes.\n\n> In order for this attack to work Alice must reveal her previously\n> mined block as late as possible, gaining her the most time spent\n> working on the valid block. Since she has such good view of the\n> Bitcoin network she can wait until a miner finds a block to release\n> her previously mined block.\n\nThen the simple 'fix' would be for the block-acceptance to take into \naccount either the total transactions or the total fees, and for the the \n'accepted' block for mining the next block to be the one with the lowest \nhash of one of those values if 2 are released to the network at the same \ntime\n\nThat is of of course assuming there is really a problem to fix, \ncurrently I'm not convinced.\n\nRob"
            }
        ],
        "thread_summary": {
            "title": "Possible Solution To SM Attack",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Quinn Harris",
                "rob.golding at astutium.com",
                "colj at Safe-mail.net",
                "Gregory Maxwell",
                "Gavin Andresen",
                "Drak"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 17167
        }
    },
    {
        "title": "[Bitcoin-development] we can all relax now",
        "thread_messages": [
            {
                "author": "kjj",
                "date": "2013-11-06T05:33:17",
                "message_text_only": "One of the things that really gets me going is when someone devises a \nmodel, tests it against itself, and then pretends that they've learned \nsomething about the real world.\n\nNaturally, the Selfish Mining paper is exactly this sort of nonsense.  \nTheir model is one with no latency, and one where the attacker has total \nvisibility across the network.  An iterated FSM is not a suitable \nsimulation of the bitcoin system.  The bitcoin network does not have \nstates, and to the extent that you can pretend that we do, you can't \nsimulate transitions between them with static probabilities.\n\nThe authors understand this deep down inside, even though they didn't \nwork out the implications.  They handwave the issue by assuming a total \nsybil attack, and in true academic spirit, they don't realize that the \ncondition necessary for the attack is far, far worse than the attack itself.\n\nGreg said he'd like to run some simulations, and I'm thinking about it \ntoo.  Unfortunately, he is busy all week, and I'm lazy (and also busy \nfor most of tomorrow).\n\nIf neither of us get to it first, I'm willing to pitch in 1 BTC as a \nbounty for building a general bitcoin network simulator framework. The \nsimulator should be able to account for latency between nodes, and \nideally within a node.  It needs to be able to simulate an attacker that \nowns varying fractions of the network, and make decisions based only on \nwhat the attacker actually knows.  It needs to be able to simulate this \n\"attack\" and should be generic enough to be easily modified for other \ncrazy schemes.\n\n(Bounty offer is serious, but expires in one year [based on the earliest \ntimestamp that my mail server puts on this email], and /may/ be subject \nto change if the price on any reputable exchange breaks 1000 USD per BTC \nin that period.)\n\nBasically, the lack of a decent network simulator is what allowed this \npaper to get press.  If the author had been able to see the importance \nof the stuff he was ignoring, we wouldn't be wasting so much time \ncorrecting him (and sadly the reporters that have no way to check his \nclaims).\n\nhttps://bitcointalk.org/index.php?topic=324413.msg3495663#msg3495663"
            },
            {
                "author": "Frank F",
                "date": "2013-11-06T09:26:27",
                "message_text_only": "The problem with academics is that they don't have to worry about the real\nworld. They get paid to publish things, not to be helpful to society.\n\n\nOn Tue, Nov 5, 2013 at 11:33 PM, kjj <bitcoin-devel at jerviss.org> wrote:\n\n> One of the things that really gets me going is when someone devises a\n> model, tests it against itself, and then pretends that they've learned\n> something about the real world.\n>\n> Naturally, the Selfish Mining paper is exactly this sort of nonsense.\n> Their model is one with no latency, and one where the attacker has total\n> visibility across the network.  An iterated FSM is not a suitable\n> simulation of the bitcoin system.  The bitcoin network does not have\n> states, and to the extent that you can pretend that we do, you can't\n> simulate transitions between them with static probabilities.\n>\n> The authors understand this deep down inside, even though they didn't\n> work out the implications.  They handwave the issue by assuming a total\n> sybil attack, and in true academic spirit, they don't realize that the\n> condition necessary for the attack is far, far worse than the attack\n> itself.\n>\n> Greg said he'd like to run some simulations, and I'm thinking about it\n> too.  Unfortunately, he is busy all week, and I'm lazy (and also busy\n> for most of tomorrow).\n>\n> If neither of us get to it first, I'm willing to pitch in 1 BTC as a\n> bounty for building a general bitcoin network simulator framework. The\n> simulator should be able to account for latency between nodes, and\n> ideally within a node.  It needs to be able to simulate an attacker that\n> owns varying fractions of the network, and make decisions based only on\n> what the attacker actually knows.  It needs to be able to simulate this\n> \"attack\" and should be generic enough to be easily modified for other\n> crazy schemes.\n>\n> (Bounty offer is serious, but expires in one year [based on the earliest\n> timestamp that my mail server puts on this email], and /may/ be subject\n> to change if the price on any reputable exchange breaks 1000 USD per BTC\n> in that period.)\n>\n> Basically, the lack of a decent network simulator is what allowed this\n> paper to get press.  If the author had been able to see the importance\n> of the stuff he was ignoring, we wouldn't be wasting so much time\n> correcting him (and sadly the reporters that have no way to check his\n> claims).\n>\n> https://bitcointalk.org/index.php?topic=324413.msg3495663#msg3495663\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models.\n> Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and\n> register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \n*MONEY IS OVER!*\n                                IF YOU WANT IT<http://www.zeitgeistmovie.com/>\n=====================================================\nThe causes of my servitude can be traced to the tyranny of money.\n-Serj Tankian\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/a4337e71/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-11-06T11:35:51",
                "message_text_only": "I will contribute 1 BTC to this bounty, under same terms and expiration.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/b3d74829/attachment.html>"
            },
            {
                "author": "Christophe Biocca",
                "date": "2013-11-06T18:06:47",
                "message_text_only": "I might try building this sometime soon. I think it may also serve an\neducational purpose when trying to understand the whole network's behaviour.\n\nWhat level of accuracy are we looking for though? Obviously we need to\nfully emulate the steps of the network protocol, and we need to be able to\nspecify time taken for transmission/processing for each node. Do we care\nabout the actual contents of the messages (to be able to simulate double\nspend attempts, invalid transactions and blocks, SPV node communication),\nand their validation (actual signatures and proof of work)?\n\nI imagine the latter is pretty useless, beyond specifying that the\nsignature/proof of work is valid/invalid.\n\nIf we could build up a set of experiments we'd like to run on it, it would\nhelp clarify what's needed.\n\nOff the top of my head:\n\n- Peter Todd's miner strategy of sending blocks to only 51% of the\nhashpower.\n- Various network split conditions, and how aware of the split nodes would\nbe (and the effect of client variability).\n- Testing the feasability of network race double spends, or Finney attacks.\n- Various network partition scenarios.\n- Tricking SPV nodes.\nOn Nov 6, 2013 6:37 AM, \"Jeff Garzik\" <jgarzik at bitpay.com> wrote:\n\n> I will contribute 1 BTC to this bounty, under same terms and expiration.\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models.\n> Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and\n> register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/5f944e9e/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-07T03:44:04",
                "message_text_only": "On Wed, Nov 06, 2013 at 01:06:47PM -0500, Christophe Biocca wrote:\n> I might try building this sometime soon. I think it may also serve an\n> educational purpose when trying to understand the whole network's behaviour.\n> \n> What level of accuracy are we looking for though? Obviously we need to\n> fully emulate the steps of the network protocol, and we need to be able to\n> specify time taken for transmission/processing for each node. Do we care\n> about the actual contents of the messages (to be able to simulate double\n> spend attempts, invalid transactions and blocks, SPV node communication),\n> and their validation (actual signatures and proof of work)?\n> \n> I imagine the latter is pretty useless, beyond specifying that the\n> signature/proof of work is valid/invalid.\n> \n> If we could build up a set of experiments we'd like to run on it, it would\n> help clarify what's needed.\n> \n> Off the top of my head:\n> \n> - Peter Todd's miner strategy of sending blocks to only 51% of the\n> hashpower.\n\nSpeaking of, I hadn't gotten around to doing up the math behind that\nstrategy properly; turns out 51% I was overly optimistic and the actual\nthreshold is 29.3%\n\nSuppose I find a block. I have Q hashing power, and the rest of the\nnetwork 1-Q. Should I tell the rest of the network, or withhold that\nblock and hope I find a second one?\n\nNow in a purely inflation subsidy environment, where I don't care about\nthe other miners success, of course I should publish. However, if my\ngoals are to find *more* blocks than the other miners for whatever\nreason, maybe because transaction fees matter or I'm trying to get\nnLockTime'd announce/commit fee sacrifices, it gets more complicated.\n\n\nThere are three possible outcomes:\n\n1) I find the next block, probability Q\n2) They find the next block, probability 1-Q\n2.1) I find the next block, probability Q, or (1-Q)*Q in total.\n2.2) They find the next block, probability (1-Q)^2 in total.\n\nNote how only in the last option do I lose. So how much hashing power do\nI need before it is just as likely that the other miners will find two\nblocks before I find either one block, or two blocks? Easy enough:\n\nQ + (1-Q)*Q = (1-Q)^2 -> Q^2 - Q + 1/2 -> Q = (1 - \\sqrt(2))/2\n\nQ ~= 29.2%\n\nSo basically, if I'm trying to beat other miners, once I have >29.3% of\nthe hashing power I have no incentive to publish the blocks I mine!\n\nBut hang on, does it matter if I'm the one who actually has that hashing\npower? What if I just make sure that only >29.3% of the hashing power\nhas that block? If my goal is to make sure that someone does useless\nwork, and/or they are working on a lower height block than me, then no,\nI don't care, which means my original \"send blocks to >51% of the\nhashing power\" analysis was actually wrong, and the strategy is even\nmore crazy: \"send blocks to >29.3% of the hashing power\" (!)\n\n\nLets suppose I know that I'm two blocks ahead:\n\n1) I find the next block: Q                    (3:0)\n2) They find the next block: (1-Q)             (2:1)\n2.1) I find the next block: (1-Q)*Q            (3:1)\n2.2) They find the next block: (1-Q)^2         (2:2)\n2.2.1) I find the next block: (1-Q)^2 * Q      (3:2)\n2.2.2) They find the next block: (1-Q)^3       (2:3)\n\nAt what hashing power should I release my blocks? So remember, I win\nthis round on outcomes 1, 2.1, 2.2.1 and they only win on 2.2.2:\n\nQ + (1-Q)*Q + (1-Q)^2*Q = (1-Q)^3 -> Q = 1 - 2^-3\n\nQ ~= 20.6%\n\nInteresting... so as I get further ahead, or to be exact the group of\nminers who have a given block gets further ahead, I need less hashing\npower for my incentives to be to *not* publish the block I just found.\nConversely this means I should try to make my blocks propagate to less\nof the hashing power, by whatever means necessary.\n\nNow remember, none of the above strategy requires me to have a special\nlow-latency network or anything fancy. I don't even have to have a lot\nof hashing power - the strategy still works if I'm, say, a 5% pool. It\njust means I don't have the incentives people thought I did to propagate\nmy blocks widely.\n\nThe other nasty thing about this, is suppose I'm a miner and recently\ngot a block from another miner: should I forward that block, or not\nbother? Well, it depends: if I have no idea how much of the hashing\npower has that block, I should forward the block. But again, if my goal\nis to be most likely to get the next block, I should only forward in\nsuch a way that >30% of the hashing power has the block.\n\nThis means that if I have some information about what % already has that\nblock, I have less incentive to forward! For instance, suppose that\nevery major miner has been publishing their node addresses in their\nblocks - I'll have a pretty good idea of who probably has that most\nrecent block, so I can easily make a well-optimized decision not to\nforward. Similarly because the 30% hashing power figure is the\n*integral* of time * hashes/second, if miners are forwarding\nnear-target-headers, I might as well wait a few seconds and see if I see\nany near-target-headers; if I do for this block then I have evidence\nthat hashing power does have it, and I shouldn't forward.\n\n\nSo yeah, we're fucked and have got to fix this awful incentive structure\nsomehow before the inflation subsidy gets any smaller. Also, raising the\nblocksize, especially by just removing the limit, is utter madness given\nit can be used to slow down block propagation selectively, so the\nhashing power that gets a given block is limited repeatably to the same\ngroup.\n\n\nP.S: If any large pools want to try this stuff out, give me a shout. You\nhave my PGP key - confidentiality assured.\n\nP.P.S: If you're mining on a pool with more than, like, 1% hashing\npower, do the math on varience... Seriously, stop it and go mine on a\nsmaller pool, or better yet, p2pool.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000078b970f5134bae96da021744f80e04aa9dc2e2d2c2bcb07c2\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/ed5fbe66/attachment.sig>"
            },
            {
                "author": "Kyle Jerviss",
                "date": "2013-11-07T04:15:40",
                "message_text_only": "You are ignoring the gambler's ruin. We do not operate on an infinite \ntimeline.  If you find a big pool willing to try this, please give me \nenough advance warning to get my popcorn ready.\n\nPeter Todd wrote:\n> On Wed, Nov 06, 2013 at 01:06:47PM -0500, Christophe Biocca wrote:\n>> I might try building this sometime soon. I think it may also serve an\n>> educational purpose when trying to understand the whole network's behaviour.\n>>\n>> What level of accuracy are we looking for though? Obviously we need to\n>> fully emulate the steps of the network protocol, and we need to be able to\n>> specify time taken for transmission/processing for each node. Do we care\n>> about the actual contents of the messages (to be able to simulate double\n>> spend attempts, invalid transactions and blocks, SPV node communication),\n>> and their validation (actual signatures and proof of work)?\n>>\n>> I imagine the latter is pretty useless, beyond specifying that the\n>> signature/proof of work is valid/invalid.\n>>\n>> If we could build up a set of experiments we'd like to run on it, it would\n>> help clarify what's needed.\n>>\n>> Off the top of my head:\n>>\n>> - Peter Todd's miner strategy of sending blocks to only 51% of the\n>> hashpower.\n> Speaking of, I hadn't gotten around to doing up the math behind that\n> strategy properly; turns out 51% I was overly optimistic and the actual\n> threshold is 29.3%\n>\n> Suppose I find a block. I have Q hashing power, and the rest of the\n> network 1-Q. Should I tell the rest of the network, or withhold that\n> block and hope I find a second one?\n>\n> Now in a purely inflation subsidy environment, where I don't care about\n> the other miners success, of course I should publish. However, if my\n> goals are to find *more* blocks than the other miners for whatever\n> reason, maybe because transaction fees matter or I'm trying to get\n> nLockTime'd announce/commit fee sacrifices, it gets more complicated.\n>\n>\n> There are three possible outcomes:\n>\n> 1) I find the next block, probability Q\n> 2) They find the next block, probability 1-Q\n> 2.1) I find the next block, probability Q, or (1-Q)*Q in total.\n> 2.2) They find the next block, probability (1-Q)^2 in total.\n>\n> Note how only in the last option do I lose. So how much hashing power do\n> I need before it is just as likely that the other miners will find two\n> blocks before I find either one block, or two blocks? Easy enough:\n>\n> Q + (1-Q)*Q = (1-Q)^2 -> Q^2 - Q + 1/2 -> Q = (1 - \\sqrt(2))/2\n>\n> Q ~= 29.2%\n>\n> So basically, if I'm trying to beat other miners, once I have >29.3% of\n> the hashing power I have no incentive to publish the blocks I mine!\n>\n> But hang on, does it matter if I'm the one who actually has that hashing\n> power? What if I just make sure that only >29.3% of the hashing power\n> has that block? If my goal is to make sure that someone does useless\n> work, and/or they are working on a lower height block than me, then no,\n> I don't care, which means my original \"send blocks to >51% of the\n> hashing power\" analysis was actually wrong, and the strategy is even\n> more crazy: \"send blocks to >29.3% of the hashing power\" (!)\n>\n>\n> Lets suppose I know that I'm two blocks ahead:\n>\n> 1) I find the next block: Q                    (3:0)\n> 2) They find the next block: (1-Q)             (2:1)\n> 2.1) I find the next block: (1-Q)*Q            (3:1)\n> 2.2) They find the next block: (1-Q)^2         (2:2)\n> 2.2.1) I find the next block: (1-Q)^2 * Q      (3:2)\n> 2.2.2) They find the next block: (1-Q)^3       (2:3)\n>\n> At what hashing power should I release my blocks? So remember, I win\n> this round on outcomes 1, 2.1, 2.2.1 and they only win on 2.2.2:\n>\n> Q + (1-Q)*Q + (1-Q)^2*Q = (1-Q)^3 -> Q = 1 - 2^-3\n>\n> Q ~= 20.6%\n>\n> Interesting... so as I get further ahead, or to be exact the group of\n> miners who have a given block gets further ahead, I need less hashing\n> power for my incentives to be to *not* publish the block I just found.\n> Conversely this means I should try to make my blocks propagate to less\n> of the hashing power, by whatever means necessary.\n>\n> Now remember, none of the above strategy requires me to have a special\n> low-latency network or anything fancy. I don't even have to have a lot\n> of hashing power - the strategy still works if I'm, say, a 5% pool. It\n> just means I don't have the incentives people thought I did to propagate\n> my blocks widely.\n>\n> The other nasty thing about this, is suppose I'm a miner and recently\n> got a block from another miner: should I forward that block, or not\n> bother? Well, it depends: if I have no idea how much of the hashing\n> power has that block, I should forward the block. But again, if my goal\n> is to be most likely to get the next block, I should only forward in\n> such a way that >30% of the hashing power has the block.\n>\n> This means that if I have some information about what % already has that\n> block, I have less incentive to forward! For instance, suppose that\n> every major miner has been publishing their node addresses in their\n> blocks - I'll have a pretty good idea of who probably has that most\n> recent block, so I can easily make a well-optimized decision not to\n> forward. Similarly because the 30% hashing power figure is the\n> *integral* of time * hashes/second, if miners are forwarding\n> near-target-headers, I might as well wait a few seconds and see if I see\n> any near-target-headers; if I do for this block then I have evidence\n> that hashing power does have it, and I shouldn't forward.\n>\n>\n> So yeah, we're fucked and have got to fix this awful incentive structure\n> somehow before the inflation subsidy gets any smaller. Also, raising the\n> blocksize, especially by just removing the limit, is utter madness given\n> it can be used to slow down block propagation selectively, so the\n> hashing power that gets a given block is limited repeatably to the same\n> group.\n>\n>\n> P.S: If any large pools want to try this stuff out, give me a shout. You\n> have my PGP key - confidentiality assured.\n>\n> P.P.S: If you're mining on a pool with more than, like, 1% hashing\n> power, do the math on varience... Seriously, stop it and go mine on a\n> smaller pool, or better yet, p2pool.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models. Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/a05c5a7f/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-07T04:33:10",
                "message_text_only": "On Wed, Nov 06, 2013 at 10:15:40PM -0600, Kyle Jerviss wrote:\n> You are ignoring the gambler's ruin. We do not operate on an\n> infinite timeline.  If you find a big pool willing to try this,\n> please give me enough advance warning to get my popcorn ready.\n\nGamblers ruin has nothing to do with it.\n\nAt every point you want to evaluate the chance the other side will get\nahead, vs. cashing in by just publishing the blocks you have. (or some\nof them) I didn't mention it in the analysis, but obviously you want to\nkeep track of how much the blocks you haven't published are worth to\nyou, and consider publishing some or all of your lead to the rest of the\nnetwork if you stand to lose more than you gain.\n\nRight now it's a mostly theoretical attack because the inflation subsidy\nis enormous and fees don't matter, but once fees do start to matter\nthings get a lot more complex. An extreme example is announce/commit\nsacrifices to mining fees: if I'm at block n+1, the rest of the network\nis at block n, and there's a 100BTC sacrifice at block n+2, I could\neasily be in a situation where I have zero incentive to publish my block\nto keep everyone else behind me, and just hope I find block n+2. If I\ndo, great! I'll immediately publish to lock-in my winnings and start\nworking on block n+3\n\n\nAnyway, my covert suggestion that pools contact me was more to hopefully\nstrike fear into the people mining at a large pool and get them to\nswitch to a small one. :) If everyone mined solo or on p2pool none of\nthis stuff would matter much... but we can't force them too yet.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000005713cac303bd2d529ebeffa82fff60be5307010a83933698d\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/553e167c/attachment.sig>"
            },
            {
                "author": "Kyle Jerviss",
                "date": "2013-11-07T04:59:28",
                "message_text_only": "Each block that you solve has a reward.  In practice, some blocks will \nbe orphaned, so the expected reward is slightly less than the nominal \nreward.  Each second that you delay publishing a block, the expected \nreward drops somewhat.\n\nOn an infinite timeline, the total reward approaches the expected \nreward.  But reality is discrete, and zero tends to be a brick wall.  If \nyou delay publishing a block, you will get either the nominal reward, or \nzero, not some fraction in between.  And if your personal random walk \ninvolves an excursion through negative land, you may not stick around \nlong enough for it to come back.\n\nThus, a positive expected value is not sufficient for some strategy to \nbe a good one.\n\nPeter Todd wrote:\n> On Wed, Nov 06, 2013 at 10:15:40PM -0600, Kyle Jerviss wrote:\n>> You are ignoring the gambler's ruin. We do not operate on an\n>> infinite timeline.  If you find a big pool willing to try this,\n>> please give me enough advance warning to get my popcorn ready.\n> Gamblers ruin has nothing to do with it.\n>\n> At every point you want to evaluate the chance the other side will get\n> ahead, vs. cashing in by just publishing the blocks you have. (or some\n> of them) I didn't mention it in the analysis, but obviously you want to\n> keep track of how much the blocks you haven't published are worth to\n> you, and consider publishing some or all of your lead to the rest of the\n> network if you stand to lose more than you gain.\n>\n> Right now it's a mostly theoretical attack because the inflation subsidy\n> is enormous and fees don't matter, but once fees do start to matter\n> things get a lot more complex. An extreme example is announce/commit\n> sacrifices to mining fees: if I'm at block n+1, the rest of the network\n> is at block n, and there's a 100BTC sacrifice at block n+2, I could\n> easily be in a situation where I have zero incentive to publish my block\n> to keep everyone else behind me, and just hope I find block n+2. If I\n> do, great! I'll immediately publish to lock-in my winnings and start\n> working on block n+3\n>\n>\n> Anyway, my covert suggestion that pools contact me was more to hopefully\n> strike fear into the people mining at a large pool and get them to\n> switch to a small one. :) If everyone mined solo or on p2pool none of\n> this stuff would matter much... but we can't force them too yet.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models. Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/31419fb3/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-07T13:09:20",
                "message_text_only": "On Wed, Nov 06, 2013 at 10:59:28PM -0600, Kyle Jerviss wrote:\n> Each block that you solve has a reward.  In practice, some blocks\n> will be orphaned, so the expected reward is slightly less than the\n> nominal reward.  Each second that you delay publishing a block, the\n> expected reward drops somewhat.\n\nYou don't understand how to read papers.\n\nA good author will state his assumptions. For instance my third\nparagraph read:\n\n    Now in a purely inflation subsidy environment, where I don't care about\n    the other miners success, of course I should publish. However, if my\n    goals are to find *more* blocks than the other miners for whatever\n    reason, maybe because transaction fees matter or I'm trying to get\n    nLockTime'd announce/commit fee sacrifices, it gets more complicated.\n\nNow that you understand the assumptions made, you can attack the paper\nin one of two ways:\n\n1) Show it's wrong.\n\n2) Show its assumptions make it irrelevant.\n\nYou've done neither.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000006d61eb32f3643aa30c2f9647e4e758af84b03abc43f09959f\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131107/bf755f03/attachment.sig>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-11-07T04:56:56",
                "message_text_only": "> P.S: If any large pools want to try this stuff out, give me a shout. You\n> have my PGP key - confidentiality assured.\n>\n\nIf I find out one of the large pools decides to run this 'experiment' on\nthe main network, I will make it my mission to tell people to switch to a\nmore responsible pool.\n\nAnd if you think you can get away with driving up EVERYBODY's orphan rate\nwithout anybody noticing, you should think again.\n\n\n> P.P.S: If you're mining on a pool with more than, like, 1% hashing\n> power, do the math on varience... Seriously, stop it and go mine on a\n> smaller pool, or better yet, p2pool.\n>\n\nThat I agree with.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131107/ba14a6dd/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-07T13:24:42",
                "message_text_only": "On Thu, Nov 07, 2013 at 02:56:56PM +1000, Gavin Andresen wrote:\n> > P.S: If any large pools want to try this stuff out, give me a shout. You\n> > have my PGP key - confidentiality assured.\n> >\n> \n> If I find out one of the large pools decides to run this 'experiment' on\n> the main network, I will make it my mission to tell people to switch to a\n> more responsible pool.\n\nI hope they listen.\n\nA few months ago ASICMiner could have made use of that attack if my\nmemories of their peak hashing power were correct. They certainely could\nhave used the selfish miner version, (we need better name for that)\nalthough development costs would eat into profits.\n\nGHash.IO, 22%, says they're a \"private Bitfury ASIC mining pool\" - dunno\nwhat they mean by that, but they're involved with CEX.IO who has\nphysical control of a bunch of hashing power so I guess that means their\nmodel is like ASICMiners. They're a bit short of 30%, but maybe some\nbehind-the-scenes deals would fix that, and/or lowering the barrier with\nreactive block publishing. (a better name)\n\n> And if you think you can get away with driving up EVERYBODY's orphan rate\n> without anybody noticing, you should think again.\n\n...and remember, if you only do the attack a little bit, you still can\nearn more profit, and only drive up the orphan rate a little bit. So who\nknows, maybe the orphans are real, or maybe they're an attack? ASICMiner\nwas involved with a bunch of orphans a while back...\n\nYou know what this calls for? A witchhunt!\n\nBURN THE LARGE POOLS!\n\n> > P.P.S: If you're mining on a pool with more than, like, 1% hashing\n> > power, do the math on varience... Seriously, stop it and go mine on a\n> > smaller pool, or better yet, p2pool.\n> >\n> \n> That I agree with.\n\nGlad to hear.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000007bd936f19e33bc8b8f9bb1f4c013b863ef60a7f5a6a5d2112\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131107/9ee39a7b/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-11-07T16:14:47",
                "message_text_only": "Once the ASIC race calms down because everyone has one, has more or less\noptimal power supplies, process improvements aren't easily reachable\nanymore etc then I'd expect people to dissipate from the large pools\nbecause eliminating their fees will become the next lowest hanging fruit to\nsqueeze out extra profit. There's no particular reason we need only a\nhandful of pools that control a major fraction of the hashpower.\n\nIf we end up with a few hundred pools or lots of miners on p2pool, then a\nlot of these theoretical attacks become not very relevant (I don't think ID\nsacrifices will be so common or large as to justify a pile of custom mining\ncode+strategies at any point ...)\n\n\nOn Thu, Nov 7, 2013 at 2:24 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> On Thu, Nov 07, 2013 at 02:56:56PM +1000, Gavin Andresen wrote:\n> > > P.S: If any large pools want to try this stuff out, give me a shout.\n> You\n> > > have my PGP key - confidentiality assured.\n> > >\n> >\n> > If I find out one of the large pools decides to run this 'experiment' on\n> > the main network, I will make it my mission to tell people to switch to a\n> > more responsible pool.\n>\n> I hope they listen.\n>\n> A few months ago ASICMiner could have made use of that attack if my\n> memories of their peak hashing power were correct. They certainely could\n> have used the selfish miner version, (we need better name for that)\n> although development costs would eat into profits.\n>\n> GHash.IO, 22%, says they're a \"private Bitfury ASIC mining pool\" - dunno\n> what they mean by that, but they're involved with CEX.IO who has\n> physical control of a bunch of hashing power so I guess that means their\n> model is like ASICMiners. They're a bit short of 30%, but maybe some\n> behind-the-scenes deals would fix that, and/or lowering the barrier with\n> reactive block publishing. (a better name)\n>\n> > And if you think you can get away with driving up EVERYBODY's orphan rate\n> > without anybody noticing, you should think again.\n>\n> ...and remember, if you only do the attack a little bit, you still can\n> earn more profit, and only drive up the orphan rate a little bit. So who\n> knows, maybe the orphans are real, or maybe they're an attack? ASICMiner\n> was involved with a bunch of orphans a while back...\n>\n> You know what this calls for? A witchhunt!\n>\n> BURN THE LARGE POOLS!\n>\n> > > P.P.S: If you're mining on a pool with more than, like, 1% hashing\n> > > power, do the math on varience... Seriously, stop it and go mine on a\n> > > smaller pool, or better yet, p2pool.\n> > >\n> >\n> > That I agree with.\n>\n> Glad to hear.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 0000000000000007bd936f19e33bc8b8f9bb1f4c013b863ef60a7f5a6a5d2112\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models.\n> Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and\n> register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131107/4f561b99/attachment.html>"
            },
            {
                "author": "Daniel Lidstrom",
                "date": "2013-11-07T18:28:52",
                "message_text_only": "Hey Peter, something seems wrong with your above analysis: I think a miner\nwould withhold his block not because it leads to a greater probability of\nwinning the next one, but because it increases his expected revenue.\n\nSuppose a cabal with fraction q of the total hashing power is n blocks\nahead on a secret branch of that has mined r_tot coins, and let r_next be\nits next block's reward.  If the cabal chooses not to broadcast its secret\nchain until at least the next block, its expected revenue after the next\nblock is found is\n\n(1 - (1-q)^(n+1))*(r_tot + r_next)\n\nIf it does broadcast, its expected revenue after the next block is found is\n\nr_tot + q * r_next\n\nIf the cabal seeks only to maximize immediate revenue, then after a bit of\nalgebra we find that it will withhold its chain if\n\nq > 1 - ( 1 + r_tot / r_next )^(-1/n)\n\nSo if the cabal has just mined his first block off of the public chain,\ni.e. n = 1, and if the block reward is relatively stable, i.e. r_next =\nr_tot, then it needs q > 50% to profitably withhold, not the 29.2% you\ncalculated.\n\n>From this formula we can also see that if the miner wins the race and\nwithholds again, then he must grow q to compensate for the increase in\nr_tot, and any decrease in n.  So generally publication becomes\nincreasingly in the cabal's interest, and secret chains will tend not to\ngrow too large (intuition tells me that simulations using the above formula\nshould bear this out).\n\nThis seem correct to you?\n\n\nOn Thu, Nov 7, 2013 at 9:14 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> Once the ASIC race calms down because everyone has one, has more or less\n> optimal power supplies, process improvements aren't easily reachable\n> anymore etc then I'd expect people to dissipate from the large pools\n> because eliminating their fees will become the next lowest hanging fruit to\n> squeeze out extra profit. There's no particular reason we need only a\n> handful of pools that control a major fraction of the hashpower.\n>\n> If we end up with a few hundred pools or lots of miners on p2pool, then a\n> lot of these theoretical attacks become not very relevant (I don't think ID\n> sacrifices will be so common or large as to justify a pile of custom mining\n> code+strategies at any point ...)\n>\n>\n> On Thu, Nov 7, 2013 at 2:24 PM, Peter Todd <pete at petertodd.org> wrote:\n>\n>> On Thu, Nov 07, 2013 at 02:56:56PM +1000, Gavin Andresen wrote:\n>> > > P.S: If any large pools want to try this stuff out, give me a shout.\n>> You\n>> > > have my PGP key - confidentiality assured.\n>> > >\n>> >\n>> > If I find out one of the large pools decides to run this 'experiment' on\n>> > the main network, I will make it my mission to tell people to switch to\n>> a\n>> > more responsible pool.\n>>\n>> I hope they listen.\n>>\n>> A few months ago ASICMiner could have made use of that attack if my\n>> memories of their peak hashing power were correct. They certainely could\n>> have used the selfish miner version, (we need better name for that)\n>> although development costs would eat into profits.\n>>\n>> GHash.IO, 22%, says they're a \"private Bitfury ASIC mining pool\" - dunno\n>> what they mean by that, but they're involved with CEX.IO who has\n>> physical control of a bunch of hashing power so I guess that means their\n>> model is like ASICMiners. They're a bit short of 30%, but maybe some\n>> behind-the-scenes deals would fix that, and/or lowering the barrier with\n>> reactive block publishing. (a better name)\n>>\n>> > And if you think you can get away with driving up EVERYBODY's orphan\n>> rate\n>> > without anybody noticing, you should think again.\n>>\n>> ...and remember, if you only do the attack a little bit, you still can\n>> earn more profit, and only drive up the orphan rate a little bit. So who\n>> knows, maybe the orphans are real, or maybe they're an attack? ASICMiner\n>> was involved with a bunch of orphans a while back...\n>>\n>> You know what this calls for? A witchhunt!\n>>\n>> BURN THE LARGE POOLS!\n>>\n>> > > P.P.S: If you're mining on a pool with more than, like, 1% hashing\n>> > > power, do the math on varience... Seriously, stop it and go mine on a\n>> > > smaller pool, or better yet, p2pool.\n>> > >\n>> >\n>> > That I agree with.\n>>\n>> Glad to hear.\n>>\n>> --\n>> 'peter'[:-1]@petertodd.org\n>> 0000000000000007bd936f19e33bc8b8f9bb1f4c013b863ef60a7f5a6a5d2112\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> November Webinars for C, C++, Fortran Developers\n>> Accelerate application performance with scalable programming models.\n>> Explore\n>> techniques for threading, error checking, porting, and tuning. Get the\n>> most\n>> from the latest Intel processors and coprocessors. See abstracts and\n>> register\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models.\n> Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and\n> register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131107/a324be8f/attachment.html>"
            },
            {
                "author": "Andreas M. Antonopoulos",
                "date": "2013-11-08T19:49:11",
                "message_text_only": "Nicholas Weaver is reporting that pools have already started delaying\nblocks, something that hints at Selfish Mining, since Nov. 3rd.\nhttps://medium.com/something-like-falling/d321a2ef9317\n\nHe dismisses other reasons for delayed block propagation.\n\nAny ideas on whether pools are already mucking around with block delaying\ntactics?\n\nI have no idea if this report is accurate or explained by some other issue\nin the network, does anyone here have a comment on this?\n\n\nOn Thu, Nov 7, 2013 at 10:28 AM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:\n\n> Hey Peter, something seems wrong with your above analysis: I think a miner\n> would withhold his block not because it leads to a greater probability of\n> winning the next one, but because it increases his expected revenue.\n>\n> Suppose a cabal with fraction q of the total hashing power is n blocks\n> ahead on a secret branch of that has mined r_tot coins, and let r_next be\n> its next block's reward.  If the cabal chooses not to broadcast its secret\n> chain until at least the next block, its expected revenue after the next\n> block is found is\n>\n> (1 - (1-q)^(n+1))*(r_tot + r_next)\n>\n> If it does broadcast, its expected revenue after the next block is found is\n>\n> r_tot + q * r_next\n>\n> If the cabal seeks only to maximize immediate revenue, then after a bit of\n> algebra we find that it will withhold its chain if\n>\n> q > 1 - ( 1 + r_tot / r_next )^(-1/n)\n>\n> So if the cabal has just mined his first block off of the public chain,\n> i.e. n = 1, and if the block reward is relatively stable, i.e. r_next =\n> r_tot, then it needs q > 50% to profitably withhold, not the 29.2% you\n> calculated.\n>\n> From this formula we can also see that if the miner wins the race and\n> withholds again, then he must grow q to compensate for the increase in\n> r_tot, and any decrease in n.  So generally publication becomes\n> increasingly in the cabal's interest, and secret chains will tend not to\n> grow too large (intuition tells me that simulations using the above formula\n> should bear this out).\n>\n> This seem correct to you?\n>\n>\n> On Thu, Nov 7, 2013 at 9:14 AM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> Once the ASIC race calms down because everyone has one, has more or less\n>> optimal power supplies, process improvements aren't easily reachable\n>> anymore etc then I'd expect people to dissipate from the large pools\n>> because eliminating their fees will become the next lowest hanging fruit to\n>> squeeze out extra profit. There's no particular reason we need only a\n>> handful of pools that control a major fraction of the hashpower.\n>>\n>> If we end up with a few hundred pools or lots of miners on p2pool, then a\n>> lot of these theoretical attacks become not very relevant (I don't think ID\n>> sacrifices will be so common or large as to justify a pile of custom mining\n>> code+strategies at any point ...)\n>>\n>>\n>> On Thu, Nov 7, 2013 at 2:24 PM, Peter Todd <pete at petertodd.org> wrote:\n>>\n>>> On Thu, Nov 07, 2013 at 02:56:56PM +1000, Gavin Andresen wrote:\n>>> > > P.S: If any large pools want to try this stuff out, give me a shout.\n>>> You\n>>> > > have my PGP key - confidentiality assured.\n>>> > >\n>>> >\n>>> > If I find out one of the large pools decides to run this 'experiment'\n>>> on\n>>> > the main network, I will make it my mission to tell people to switch\n>>> to a\n>>> > more responsible pool.\n>>>\n>>> I hope they listen.\n>>>\n>>> A few months ago ASICMiner could have made use of that attack if my\n>>> memories of their peak hashing power were correct. They certainely could\n>>> have used the selfish miner version, (we need better name for that)\n>>> although development costs would eat into profits.\n>>>\n>>> GHash.IO, 22%, says they're a \"private Bitfury ASIC mining pool\" - dunno\n>>> what they mean by that, but they're involved with CEX.IO who has\n>>> physical control of a bunch of hashing power so I guess that means their\n>>> model is like ASICMiners. They're a bit short of 30%, but maybe some\n>>> behind-the-scenes deals would fix that, and/or lowering the barrier with\n>>> reactive block publishing. (a better name)\n>>>\n>>> > And if you think you can get away with driving up EVERYBODY's orphan\n>>> rate\n>>> > without anybody noticing, you should think again.\n>>>\n>>> ...and remember, if you only do the attack a little bit, you still can\n>>> earn more profit, and only drive up the orphan rate a little bit. So who\n>>> knows, maybe the orphans are real, or maybe they're an attack? ASICMiner\n>>> was involved with a bunch of orphans a while back...\n>>>\n>>> You know what this calls for? A witchhunt!\n>>>\n>>> BURN THE LARGE POOLS!\n>>>\n>>> > > P.P.S: If you're mining on a pool with more than, like, 1% hashing\n>>> > > power, do the math on varience... Seriously, stop it and go mine on a\n>>> > > smaller pool, or better yet, p2pool.\n>>> > >\n>>> >\n>>> > That I agree with.\n>>>\n>>> Glad to hear.\n>>>\n>>> --\n>>> 'peter'[:-1]@petertodd.org\n>>> 0000000000000007bd936f19e33bc8b8f9bb1f4c013b863ef60a7f5a6a5d2112\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> November Webinars for C, C++, Fortran Developers\n>>> Accelerate application performance with scalable programming models.\n>>> Explore\n>>> techniques for threading, error checking, porting, and tuning. Get the\n>>> most\n>>> from the latest Intel processors and coprocessors. See abstracts and\n>>> register\n>>>\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> November Webinars for C, C++, Fortran Developers\n>> Accelerate application performance with scalable programming models.\n>> Explore\n>> techniques for threading, error checking, porting, and tuning. Get the\n>> most\n>> from the latest Intel processors and coprocessors. See abstracts and\n>> register\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models.\n> Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and\n> register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131108/ce3a2e5b/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-11-08T20:33:38",
                "message_text_only": "On Fri, Nov 8, 2013 at 11:49 AM, Andreas M. Antonopoulos\n<andreas at rooteleven.com> wrote:\n> Nicholas Weaver is reporting that pools have already started delaying\n> blocks, something that hints at Selfish Mining, since Nov. 3rd.\n> https://medium.com/something-like-falling/d321a2ef9317\n>\n> He dismisses other reasons for delayed block propagation.\n>\n> Any ideas on whether pools are already mucking around with block delaying\n> tactics?\n>\n> I have no idea if this report is accurate or explained by some other issue\n> in the network, does anyone here have a comment on this?\n\nThe BC.i timestamps have historically been inaccurate relative to my\nlocal GPS clock measurements on my own nodes... but not just that, it\nsounds like he's comparing block timestamps and bc.i numbers.\n\nThats insane, because it tells you the delay between when the miner\n_started_ a work unit and when BC.i claims to have found it. Even\nassuming bc.i's times were accurate and assuming miner clocks are\naccurate (they are often not) you expect there to be be a gap because\nit takes time to compute work, send it to the miner, search for a\nvalid nonce (an average of 2^31 hash operations, often executed\nsequentially on a single core taking ten seconds or so on a lot of\nhardware) and then return a result.\n\nEvidence of selfish miners wouldn't be block timestamps (which are\ninaccurate and controlled by miners anyways), or data on\nblockchain.info (which is inaccurate and controlled by bc.i) ... but\nthe existence of an unusual amount of orphan blocks. High levels of\nblocks are _necessary_ evidence of this sort of things, there can be\nother explanations of high orphaning levels, but they're required here\nand couldn't be faked."
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-15T10:58:37",
                "message_text_only": "On Thu, Nov 07, 2013 at 11:28:52AM -0700, Daniel Lidstrom wrote:\n> Hey Peter, something seems wrong with your above analysis: I think a miner\n> would withhold his block not because it leads to a greater probability of\n> winning the next one, but because it increases his expected revenue.\n> \n> Suppose a cabal with fraction q of the total hashing power is n blocks\n> ahead on a secret branch of that has mined r_tot coins, and let r_next be\n> its next block's reward.  If the cabal chooses not to broadcast its secret\n> chain until at least the next block, its expected revenue after the next\n> block is found is\n> \n> (1 - (1-q)^(n+1))*(r_tot + r_next)\n> \n> If it does broadcast, its expected revenue after the next block is found is\n> \n> r_tot + q * r_next\n> \n> If the cabal seeks only to maximize immediate revenue, then after a bit of\n> algebra we find that it will withhold its chain if\n> \n> q > 1 - ( 1 + r_tot / r_next )^(-1/n)\n> \n> So if the cabal has just mined his first block off of the public chain,\n> i.e. n = 1, and if the block reward is relatively stable, i.e. r_next =\n> r_tot, then it needs q > 50% to profitably withhold, not the 29.2% you\n> calculated.\n> \n> From this formula we can also see that if the miner wins the race and\n> withholds again, then he must grow q to compensate for the increase in\n> r_tot, and any decrease in n.  So generally publication becomes\n> increasingly in the cabal's interest, and secret chains will tend not to\n> grow too large (intuition tells me that simulations using the above formula\n> should bear this out).\n> \n> This seem correct to you?\n\nRemember how I started off by asking what was the correct strategy if a\nminer wanted to get more blocks than their *competition*, not more\nblocks in total. In some scenarios that strategy is the one that\nmaximizes returns, such as the case when you make your returns from\ntransaction fees, especially without a blocksize limit restricting how\nmany fee paying transactions you can stuff in your blocks. It's not\ncorrect to say the cabal is trying to maximize immediate revenue.\n\nAs for the length of those secret chains, at every step you of course\nwant to weigh the value of the blocks you have found against the risk\nthat someone else catches up, and when it makes sense, publish some or\nall.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000b4ff49cd2cad865d6cbca99828987a02f3d5f41067eab00a\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/bbf731b9/attachment.sig>"
            },
            {
                "author": "Jannes Faber",
                "date": "2013-11-07T08:07:56",
                "message_text_only": "I wonder if you need to take into consideration the fact that there might\nbe another \"bad\" pool (in the 1-Q part of the network) running the same\nstrategy and also holding on to two blocks of their own? Once they find\ntheir third block before you do, then your 2 blocks lead is gone instantly.\n\n\n--\nJannes Faber\nElevate BV\n\nt: +31 20 636 9977\nm: +31 6 5342 9669\nj.faber at elevate.nl\n\n\nOn 7 November 2013 04:44, Peter Todd <pete at petertodd.org> wrote:\n\n> On Wed, Nov 06, 2013 at 01:06:47PM -0500, Christophe Biocca wrote:\n> > I might try building this sometime soon. I think it may also serve an\n> > educational purpose when trying to understand the whole network's\n> behaviour.\n> >\n> > What level of accuracy are we looking for though? Obviously we need to\n> > fully emulate the steps of the network protocol, and we need to be able\n> to\n> > specify time taken for transmission/processing for each node. Do we care\n> > about the actual contents of the messages (to be able to simulate double\n> > spend attempts, invalid transactions and blocks, SPV node communication),\n> > and their validation (actual signatures and proof of work)?\n> >\n> > I imagine the latter is pretty useless, beyond specifying that the\n> > signature/proof of work is valid/invalid.\n> >\n> > If we could build up a set of experiments we'd like to run on it, it\n> would\n> > help clarify what's needed.\n> >\n> > Off the top of my head:\n> >\n> > - Peter Todd's miner strategy of sending blocks to only 51% of the\n> > hashpower.\n>\n> Speaking of, I hadn't gotten around to doing up the math behind that\n> strategy properly; turns out 51% I was overly optimistic and the actual\n> threshold is 29.3%\n>\n> Suppose I find a block. I have Q hashing power, and the rest of the\n> network 1-Q. Should I tell the rest of the network, or withhold that\n> block and hope I find a second one?\n>\n> Now in a purely inflation subsidy environment, where I don't care about\n> the other miners success, of course I should publish. However, if my\n> goals are to find *more* blocks than the other miners for whatever\n> reason, maybe because transaction fees matter or I'm trying to get\n> nLockTime'd announce/commit fee sacrifices, it gets more complicated.\n>\n>\n> There are three possible outcomes:\n>\n> 1) I find the next block, probability Q\n> 2) They find the next block, probability 1-Q\n> 2.1) I find the next block, probability Q, or (1-Q)*Q in total.\n> 2.2) They find the next block, probability (1-Q)^2 in total.\n>\n> Note how only in the last option do I lose. So how much hashing power do\n> I need before it is just as likely that the other miners will find two\n> blocks before I find either one block, or two blocks? Easy enough:\n>\n> Q + (1-Q)*Q = (1-Q)^2 -> Q^2 - Q + 1/2 -> Q = (1 - \\sqrt(2))/2\n>\n> Q ~= 29.2%\n>\n> So basically, if I'm trying to beat other miners, once I have >29.3% of\n> the hashing power I have no incentive to publish the blocks I mine!\n>\n> But hang on, does it matter if I'm the one who actually has that hashing\n> power? What if I just make sure that only >29.3% of the hashing power\n> has that block? If my goal is to make sure that someone does useless\n> work, and/or they are working on a lower height block than me, then no,\n> I don't care, which means my original \"send blocks to >51% of the\n> hashing power\" analysis was actually wrong, and the strategy is even\n> more crazy: \"send blocks to >29.3% of the hashing power\" (!)\n>\n>\n> Lets suppose I know that I'm two blocks ahead:\n>\n> 1) I find the next block: Q                    (3:0)\n> 2) They find the next block: (1-Q)             (2:1)\n> 2.1) I find the next block: (1-Q)*Q            (3:1)\n> 2.2) They find the next block: (1-Q)^2         (2:2)\n> 2.2.1) I find the next block: (1-Q)^2 * Q      (3:2)\n> 2.2.2) They find the next block: (1-Q)^3       (2:3)\n>\n> At what hashing power should I release my blocks? So remember, I win\n> this round on outcomes 1, 2.1, 2.2.1 and they only win on 2.2.2:\n>\n> Q + (1-Q)*Q + (1-Q)^2*Q = (1-Q)^3 -> Q = 1 - 2^-3\n>\n> Q ~= 20.6%\n>\n> Interesting... so as I get further ahead, or to be exact the group of\n> miners who have a given block gets further ahead, I need less hashing\n> power for my incentives to be to *not* publish the block I just found.\n> Conversely this means I should try to make my blocks propagate to less\n> of the hashing power, by whatever means necessary.\n>\n> Now remember, none of the above strategy requires me to have a special\n> low-latency network or anything fancy. I don't even have to have a lot\n> of hashing power - the strategy still works if I'm, say, a 5% pool. It\n> just means I don't have the incentives people thought I did to propagate\n> my blocks widely.\n>\n> The other nasty thing about this, is suppose I'm a miner and recently\n> got a block from another miner: should I forward that block, or not\n> bother? Well, it depends: if I have no idea how much of the hashing\n> power has that block, I should forward the block. But again, if my goal\n> is to be most likely to get the next block, I should only forward in\n> such a way that >30% of the hashing power has the block.\n>\n> This means that if I have some information about what % already has that\n> block, I have less incentive to forward! For instance, suppose that\n> every major miner has been publishing their node addresses in their\n> blocks - I'll have a pretty good idea of who probably has that most\n> recent block, so I can easily make a well-optimized decision not to\n> forward. Similarly because the 30% hashing power figure is the\n> *integral* of time * hashes/second, if miners are forwarding\n> near-target-headers, I might as well wait a few seconds and see if I see\n> any near-target-headers; if I do for this block then I have evidence\n> that hashing power does have it, and I shouldn't forward.\n>\n>\n> So yeah, we're fucked and have got to fix this awful incentive structure\n> somehow before the inflation subsidy gets any smaller. Also, raising the\n> blocksize, especially by just removing the limit, is utter madness given\n> it can be used to slow down block propagation selectively, so the\n> hashing power that gets a given block is limited repeatably to the same\n> group.\n>\n>\n> P.S: If any large pools want to try this stuff out, give me a shout. You\n> have my PGP key - confidentiality assured.\n>\n> P.P.S: If you're mining on a pool with more than, like, 1% hashing\n> power, do the math on varience... Seriously, stop it and go mine on a\n> smaller pool, or better yet, p2pool.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 00000000000000078b970f5134bae96da021744f80e04aa9dc2e2d2c2bcb07c2\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models.\n> Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and\n> register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131107/8ba3db34/attachment.html>"
            },
            {
                "author": "Kyle Jerviss",
                "date": "2013-11-07T05:24:48",
                "message_text_only": "What I want is configurable 1/10/100 millisecond ticks, and accurate \nflow of information.\n\nIt doesn't seem necessary to really emulate the whole protocol, nor to \nbe overly concerned with the content of messages, nor to simulate every \nlittle housekeeping step or network message.\n\nI'm not looking for a bitcoin-network-in-a-bottle, I just want to see \nflows.  In the current situation, how often does a miner win if they \nhold their block until they see another one?  How does that change with \nvarious numbers of remote sensors?\n\nOther applications in the future could very well involve transaction \nspread, double spends, network partitions, transaction replacement, etc.\n\nIf the simulation run in question involves blocks, I'd like realistic \nlatencies for blocks.  If it is about transactions, the latencies should \nbe realistic for transactions.\n\nWhat is realistic for those?  That brings me to...\n\nI'll kick in another 1 BTC for an instrumentation package for the \nreference client.  Same conditions as before.  A runtime option, \ndisabled by default, that collects data for the simulator.  If this \ncreates an uproar, I'll also accept a compile-time option. Support \ndumping to a file that can be uploaded to a parser as the bare minimum, \nand if you are feeling clever, add automatic uploads to a server \nspecified in the conf file, or whatever.  All data should be anonymous, \nof course.  Local file should be in a format that humans can read (JSON, \nXML, CSV, etc) so that people can verify that the data is indeed anonymous.\n\nI want stats on peers (number, turnover, latency, in/out, etc), stats on \nlocal operations (I/O stats, sigs per second when verifying a block, \nfraction of sig cache hits when validating, etc) and whatever else might \nbe useful to a simulator.  Each parameter should collect min, max, mean, \nstd. deviation, etc so that the simulator can provide realistic virtual \nnodes.\n\nAlso, I don't want anyone to think that they need to satisfy me \npersonally to collect on either of these two bounties.  I will pay mine \nfor a product that is generally along the lines I have laid out, if a \ncouple of the core devs (Gavin, Greg, Jeff, sipa, Luke, etc) agree that \nyour work is useful.\n\n\nChristophe Biocca wrote:\n>\n> I might try building this sometime soon. I think it may also serve an \n> educational purpose when trying to understand the whole network's \n> behaviour.\n>\n> What level of accuracy are we looking for though? Obviously we need to \n> fully emulate the steps of the network protocol, and we need to be \n> able to specify time taken for transmission/processing for each node. \n> Do we care about the actual contents of the messages (to be able to \n> simulate double spend attempts, invalid transactions and blocks, SPV \n> node communication), and their validation (actual signatures and proof \n> of work)?\n>\n> I imagine the latter is pretty useless, beyond specifying that the \n> signature/proof of work is valid/invalid.\n>\n> If we could build up a set of experiments we'd like to run on it, it \n> would help clarify what's needed.\n>\n> Off the top of my head:\n>\n> - Peter Todd's miner strategy of sending blocks to only 51% of the \n> hashpower.\n> - Various network split conditions, and how aware of the split nodes \n> would be (and the effect of client variability).\n> - Testing the feasability of network race double spends, or Finney \n> attacks.\n> - Various network partition scenarios.\n> - Tricking SPV nodes.\n>\n> On Nov 6, 2013 6:37 AM, \"Jeff Garzik\" <jgarzik at bitpay.com \n> <mailto:jgarzik at bitpay.com>> wrote:\n>\n>     I will contribute 1 BTC to this bounty, under same terms and\n>     expiration.\n>\n>\n>     ------------------------------------------------------------------------------\n>     November Webinars for C, C++, Fortran Developers\n>     Accelerate application performance with scalable programming\n>     models. Explore\n>     techniques for threading, error checking, porting, and tuning. Get\n>     the most\n>     from the latest Intel processors and coprocessors. See abstracts\n>     and register\n>     http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models. Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/ba3e152f/attachment.html>"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-11-06T18:17:46",
                "message_text_only": "On 6 November 2013 06:33, kjj <bitcoin-devel at jerviss.org> wrote:\n\n> One of the things that really gets me going is when someone devises a\n> model, tests it against itself, and then pretends that they've learned\n> something about the real world.\n>\n> Naturally, the Selfish Mining paper is exactly this sort of nonsense.\n> Their model is one with no latency, and one where the attacker has total\n> visibility across the network.  An iterated FSM is not a suitable\n> simulation of the bitcoin system.  The bitcoin network does not have\n> states, and to the extent that you can pretend that we do, you can't\n> simulate transitions between them with static probabilities.\n>\n> The authors understand this deep down inside, even though they didn't\n> work out the implications.  They handwave the issue by assuming a total\n> sybil attack, and in true academic spirit, they don't realize that the\n> condition necessary for the attack is far, far worse than the attack\n> itself.\n>\n> Greg said he'd like to run some simulations, and I'm thinking about it\n> too.  Unfortunately, he is busy all week, and I'm lazy (and also busy\n> for most of tomorrow).\n>\n> If neither of us get to it first, I'm willing to pitch in 1 BTC as a\n> bounty for building a general bitcoin network simulator framework. The\n> simulator should be able to account for latency between nodes, and\n> ideally within a node.  It needs to be able to simulate an attacker that\n> owns varying fractions of the network, and make decisions based only on\n> what the attacker actually knows.  It needs to be able to simulate this\n> \"attack\" and should be generic enough to be easily modified for other\n> crazy schemes.\n>\n> (Bounty offer is serious, but expires in one year [based on the earliest\n> timestamp that my mail server puts on this email], and /may/ be subject\n> to change if the price on any reputable exchange breaks 1000 USD per BTC\n> in that period.)\n>\n> Basically, the lack of a decent network simulator is what allowed this\n> paper to get press.  If the author had been able to see the importance\n> of the stuff he was ignoring, we wouldn't be wasting so much time\n> correcting him (and sadly the reporters that have no way to check his\n> claims).\n>\n> https://bitcointalk.org/index.php?topic=324413.msg3495663#msg3495663\n>\n\nThanks for posting this bounty.  I'm interested in working on it, and will\ngive it a try.  I also have some other commitments, so I suspect you guys\nwill finish it first tho... but if not, I'll post details of the simulator.\n\n\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models.\n> Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and\n> register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/c5b726ae/attachment.html>"
            },
            {
                "author": "Jouke Hofman",
                "date": "2013-11-06T22:19:42",
                "message_text_only": "bounty++\n\nOn 06-11-13 06:33, kjj wrote:\n> One of the things that really gets me going is when someone devises a \n> model, tests it against itself, and then pretends that they've learned \n> something about the real world.\n> \n> Naturally, the Selfish Mining paper is exactly this sort of nonsense.  \n> Their model is one with no latency, and one where the attacker has total \n> visibility across the network.  An iterated FSM is not a suitable \n> simulation of the bitcoin system.  The bitcoin network does not have \n> states, and to the extent that you can pretend that we do, you can't \n> simulate transitions between them with static probabilities.\n> \n> The authors understand this deep down inside, even though they didn't \n> work out the implications.  They handwave the issue by assuming a total \n> sybil attack, and in true academic spirit, they don't realize that the \n> condition necessary for the attack is far, far worse than the attack itself.\n> \n> Greg said he'd like to run some simulations, and I'm thinking about it \n> too.  Unfortunately, he is busy all week, and I'm lazy (and also busy \n> for most of tomorrow).\n> \n> If neither of us get to it first, I'm willing to pitch in 1 BTC as a \n> bounty for building a general bitcoin network simulator framework. The \n> simulator should be able to account for latency between nodes, and \n> ideally within a node.  It needs to be able to simulate an attacker that \n> owns varying fractions of the network, and make decisions based only on \n> what the attacker actually knows.  It needs to be able to simulate this \n> \"attack\" and should be generic enough to be easily modified for other \n> crazy schemes.\n> \n> (Bounty offer is serious, but expires in one year [based on the earliest \n> timestamp that my mail server puts on this email], and /may/ be subject \n> to change if the price on any reputable exchange breaks 1000 USD per BTC \n> in that period.)\n> \n> Basically, the lack of a decent network simulator is what allowed this \n> paper to get press.  If the author had been able to see the importance \n> of the stuff he was ignoring, we wouldn't be wasting so much time \n> correcting him (and sadly the reporters that have no way to check his \n> claims).\n> \n> https://bitcointalk.org/index.php?topic=324413.msg3495663#msg3495663\n> \n> \n> \n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models. Explore\n> techniques for threading, error checking, porting, and tuning. Get the most \n> from the latest Intel processors and coprocessors. See abstracts and register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            }
        ],
        "thread_summary": {
            "title": "we can all relax now",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "kjj",
                "Andreas M. Antonopoulos",
                "Frank F",
                "Daniel Lidstrom",
                "Kyle Jerviss",
                "Mike Hearn",
                "Peter Todd",
                "Christophe Biocca",
                "Gregory Maxwell",
                "Jannes Faber",
                "Gavin Andresen",
                "Jouke Hofman",
                "Melvin Carvalho"
            ],
            "messages_count": 20,
            "total_messages_chars_count": 70551
        }
    },
    {
        "title": "[Bitcoin-development] [ANN] High-speed Bitcoin Relay Network",
        "thread_messages": [
            {
                "author": "Matt Corallo",
                "date": "2013-11-06T05:50:21",
                "message_text_only": "Recently, there has been a reasonable amount of discussion about the\ncontinued fragility of the public Bitcoin network on IRC and elsewhere\n(1). To this extent, I'm organizing a system of peering between nodes in\nthe network by creating a system of high-speed relay nodes for miners\nand merchants/exchanges. This system will a) act as a fallback in the\ncase that the public Bitcoin network encounters issues and b) decrease\nblock propagation times between miners.\nIt is NOT designed to in any way replace or decrease the need for the\npublic Bitcoin P2P network. It is NOT any kind of attempt at\ncentralization, and I still encourage interested parties to establish\ntheir own private peering agreements with large miners as needed.\n\nCurrently the network consists of one specially-designed relay node, but\nI hope to bring more online in the coming days.\n\nThis network is open to everyone via a few public relay nodes, but also\nwill have nodes which are made available only to large miners and\nmerchants/exchanges to mitigate the ability of malicious parties to DoS\nthe network.\n\nTo peer with the public relay nodes, simply select the closest region\nout of us-west (West Coast US), us-east (East Coast US), eu (Western\nEurope), au (Australia), or jpy (Japan) and add\npublic.REGION.relay.mattcorallo.com to your addnode list. Note that\nsince all of the relay nodes will relay between each other, you gain no\nlatency advantage by peering with more than the closest node to you (and\ncurrently all the regions map to one node, so there they're redundant\nanyway).\n\nFor each relay node, you can connect to either port 8334 or 8335.\nConnecting on port 8334 will relay only blocks, and port 8335 will relay\nboth blocks and transactions. The relay nodes will request any\ntransactions which appear in your invs no matter which port you connect to.\n\nRelay node details:\n * The relay nodes do some data verification to prevent DoS, but in\norder to keep relay fast, they do not fully verify the data they are\nrelaying, thus YOU SHOULD NEVER mine a block building on top of a\nrelayed block without fully checking it with your own bitcoin validator\n(as you would any other block relayed from the P2P network).\n * The relay nodes do not follow the standard inv-getdata-tx/block flow,\nbut instead relay transactions/blocks immediately after they have done\ntheir cursory verification. They do keep some track of whether or not\nyour nodes claim to have seen the transactions/blocks before relaying,\nbut you may see transactions/blocks being sent which you already have\nand have not requested, if this is a problem for you due to bandwith\nissues, you should reconsider your bandwith constraints and/or are\npeering with too many nodes.\n * The relay nodes will all relay among themselves very quickly, so\nthere is no advantage to peering with as many relay nodes as you can\nfind, in fact, the increased incoming bandwidth during block relay\nspikes may result in higher latency for your nodes.\n * The relay nodes are NOT designed to ensure that you never miss data,\nand may fail to relay some transactions. Additionally, because the relay\nnodes do not respond to standard getdata requests, if you miss a relay\nand then reconnect, that data will not be sent again by the relay nodes.\nThe relay nodes are NOT a replacement for having peers on the standard\nP2P network, they are only there to augment the existing P2P network.\n\nIf you are a merchant/exchange/large miner/other important node operator\nand wish to gain access to additional domain names which map to relay\nnodes with fewer peers, please fill out the form at\nhttps://docs.google.com/forms/d/1UL82QdcXXEhZwSHJAK04Sk_cWg4zLOu8a216nO7Mt8c/viewform\n\nYou can find the source for the relay nodes at\nhttps://github.com/TheBlueMatt/RelayNode\n\nIf you have any comments/concerns/suggestions, please do not hesitate to\nemail bitcoin-peering at mattcorallo.com\n\nThanks,\nMatt\n\n\n(1) There has been extended discussion on #bitcoin-wizards as well as\n#bitcoin-dev of the very small number of active, listening nodes.\nAdditionally, because many of those nodes are versions prior to 0.8.4,\nit seems very likely that maliciously creating network splits or at\nleast drastically reducing the number of peers for most nodes would not\nbe particularly challenging in the current network. Also,\nhttp://www.tik.ee.ethz.ch/file/49318d3f56c1d525aabf7fda78b23fc0/P2P2013_041.pdf\nnoted that they were able to single-handledly decrease the network-wide\norphan rate by around 50% by improving network peering. Finally, you've\nall seen the recent discussion on malicious mining algorithms. Though\nthose are not entirely prevented by reducing block propagation times,\nthey can be significantly limited compared to the current, rather\ndisjoint, network."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-11-06T09:23:15",
                "message_text_only": "Very cool, thanks Matt.\n\nI was actually thinking this morning, maybe we should require all nodes to\ngo through the inv/getdata dance. Otherwise it's possible to improve your\nchances at racing a block by mining a block, waiting to see a block inv\nfrom another node, then blasting out your block while other nodes are still\nwaiting on their getdatas.\n\n\nOn Wed, Nov 6, 2013 at 6:50 AM, Matt Corallo <bitcoin-list at bluematt.me>wrote:\n\n> Recently, there has been a reasonable amount of discussion about the\n> continued fragility of the public Bitcoin network on IRC and elsewhere\n> (1). To this extent, I'm organizing a system of peering between nodes in\n> the network by creating a system of high-speed relay nodes for miners\n> and merchants/exchanges. This system will a) act as a fallback in the\n> case that the public Bitcoin network encounters issues and b) decrease\n> block propagation times between miners.\n> It is NOT designed to in any way replace or decrease the need for the\n> public Bitcoin P2P network. It is NOT any kind of attempt at\n> centralization, and I still encourage interested parties to establish\n> their own private peering agreements with large miners as needed.\n>\n> Currently the network consists of one specially-designed relay node, but\n> I hope to bring more online in the coming days.\n>\n> This network is open to everyone via a few public relay nodes, but also\n> will have nodes which are made available only to large miners and\n> merchants/exchanges to mitigate the ability of malicious parties to DoS\n> the network.\n>\n> To peer with the public relay nodes, simply select the closest region\n> out of us-west (West Coast US), us-east (East Coast US), eu (Western\n> Europe), au (Australia), or jpy (Japan) and add\n> public.REGION.relay.mattcorallo.com to your addnode list. Note that\n> since all of the relay nodes will relay between each other, you gain no\n> latency advantage by peering with more than the closest node to you (and\n> currently all the regions map to one node, so there they're redundant\n> anyway).\n>\n> For each relay node, you can connect to either port 8334 or 8335.\n> Connecting on port 8334 will relay only blocks, and port 8335 will relay\n> both blocks and transactions. The relay nodes will request any\n> transactions which appear in your invs no matter which port you connect to.\n>\n> Relay node details:\n>  * The relay nodes do some data verification to prevent DoS, but in\n> order to keep relay fast, they do not fully verify the data they are\n> relaying, thus YOU SHOULD NEVER mine a block building on top of a\n> relayed block without fully checking it with your own bitcoin validator\n> (as you would any other block relayed from the P2P network).\n>  * The relay nodes do not follow the standard inv-getdata-tx/block flow,\n> but instead relay transactions/blocks immediately after they have done\n> their cursory verification. They do keep some track of whether or not\n> your nodes claim to have seen the transactions/blocks before relaying,\n> but you may see transactions/blocks being sent which you already have\n> and have not requested, if this is a problem for you due to bandwith\n> issues, you should reconsider your bandwith constraints and/or are\n> peering with too many nodes.\n>  * The relay nodes will all relay among themselves very quickly, so\n> there is no advantage to peering with as many relay nodes as you can\n> find, in fact, the increased incoming bandwidth during block relay\n> spikes may result in higher latency for your nodes.\n>  * The relay nodes are NOT designed to ensure that you never miss data,\n> and may fail to relay some transactions. Additionally, because the relay\n> nodes do not respond to standard getdata requests, if you miss a relay\n> and then reconnect, that data will not be sent again by the relay nodes.\n> The relay nodes are NOT a replacement for having peers on the standard\n> P2P network, they are only there to augment the existing P2P network.\n>\n> If you are a merchant/exchange/large miner/other important node operator\n> and wish to gain access to additional domain names which map to relay\n> nodes with fewer peers, please fill out the form at\n>\n> https://docs.google.com/forms/d/1UL82QdcXXEhZwSHJAK04Sk_cWg4zLOu8a216nO7Mt8c/viewform\n>\n> You can find the source for the relay nodes at\n> https://github.com/TheBlueMatt/RelayNode\n>\n> If you have any comments/concerns/suggestions, please do not hesitate to\n> email bitcoin-peering at mattcorallo.com\n>\n> Thanks,\n> Matt\n>\n>\n> (1) There has been extended discussion on #bitcoin-wizards as well as\n> #bitcoin-dev of the very small number of active, listening nodes.\n> Additionally, because many of those nodes are versions prior to 0.8.4,\n> it seems very likely that maliciously creating network splits or at\n> least drastically reducing the number of peers for most nodes would not\n> be particularly challenging in the current network. Also,\n>\n> http://www.tik.ee.ethz.ch/file/49318d3f56c1d525aabf7fda78b23fc0/P2P2013_041.pdf\n> noted that they were able to single-handledly decrease the network-wide\n> orphan rate by around 50% by improving network peering. Finally, you've\n> all seen the recent discussion on malicious mining algorithms. Though\n> those are not entirely prevented by reducing block propagation times,\n> they can be significantly limited compared to the current, rather\n> disjoint, network.\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models.\n> Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and\n> register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/13c94d62/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-11-06T11:42:01",
                "message_text_only": "Good stuff.  I have been pushing for private peering agreeents and a\n\"backbone\" for years. Even had a paltry effort going with exmulti.net + a\nfew manually connected parties.\n\nI hope parties in the bitcoin space take it upon themselves to network with\nmajor sites - miners, payment processors, exchanges, popular sites, etc.\n On Nov 6, 2013 12:50 AM, \"Matt Corallo\" <bitcoin-list at bluematt.me> wrote:\n\n> Recently, there has been a reasonable amount of discussion about the\n> continued fragility of the public Bitcoin network on IRC and elsewhere\n> (1). To this extent, I'm organizing a system of peering between nodes in\n> the network by creating a system of high-speed relay nodes for miners\n> and merchants/exchanges. This system will a) act as a fallback in the\n> case that the public Bitcoin network encounters issues and b) decrease\n> block propagation times between miners.\n> It is NOT designed to in any way replace or decrease the need for the\n> public Bitcoin P2P network. It is NOT any kind of attempt at\n> centralization, and I still encourage interested parties to establish\n> their own private peering agreements with large miners as needed.\n>\n> Currently the network consists of one specially-designed relay node, but\n> I hope to bring more online in the coming days.\n>\n> This network is open to everyone via a few public relay nodes, but also\n> will have nodes which are made available only to large miners and\n> merchants/exchanges to mitigate the ability of malicious parties to DoS\n> the network.\n>\n> To peer with the public relay nodes, simply select the closest region\n> out of us-west (West Coast US), us-east (East Coast US), eu (Western\n> Europe), au (Australia), or jpy (Japan) and add\n> public.REGION.relay.mattcorallo.com to your addnode list. Note that\n> since all of the relay nodes will relay between each other, you gain no\n> latency advantage by peering with more than the closest node to you (and\n> currently all the regions map to one node, so there they're redundant\n> anyway).\n>\n> For each relay node, you can connect to either port 8334 or 8335.\n> Connecting on port 8334 will relay only blocks, and port 8335 will relay\n> both blocks and transactions. The relay nodes will request any\n> transactions which appear in your invs no matter which port you connect to.\n>\n> Relay node details:\n>  * The relay nodes do some data verification to prevent DoS, but in\n> order to keep relay fast, they do not fully verify the data they are\n> relaying, thus YOU SHOULD NEVER mine a block building on top of a\n> relayed block without fully checking it with your own bitcoin validator\n> (as you would any other block relayed from the P2P network).\n>  * The relay nodes do not follow the standard inv-getdata-tx/block flow,\n> but instead relay transactions/blocks immediately after they have done\n> their cursory verification. They do keep some track of whether or not\n> your nodes claim to have seen the transactions/blocks before relaying,\n> but you may see transactions/blocks being sent which you already have\n> and have not requested, if this is a problem for you due to bandwith\n> issues, you should reconsider your bandwith constraints and/or are\n> peering with too many nodes.\n>  * The relay nodes will all relay among themselves very quickly, so\n> there is no advantage to peering with as many relay nodes as you can\n> find, in fact, the increased incoming bandwidth during block relay\n> spikes may result in higher latency for your nodes.\n>  * The relay nodes are NOT designed to ensure that you never miss data,\n> and may fail to relay some transactions. Additionally, because the relay\n> nodes do not respond to standard getdata requests, if you miss a relay\n> and then reconnect, that data will not be sent again by the relay nodes.\n> The relay nodes are NOT a replacement for having peers on the standard\n> P2P network, they are only there to augment the existing P2P network.\n>\n> If you are a merchant/exchange/large miner/other important node operator\n> and wish to gain access to additional domain names which map to relay\n> nodes with fewer peers, please fill out the form at\n>\n> https://docs.google.com/forms/d/1UL82QdcXXEhZwSHJAK04Sk_cWg4zLOu8a216nO7Mt8c/viewform\n>\n> You can find the source for the relay nodes at\n> https://github.com/TheBlueMatt/RelayNode\n>\n> If you have any comments/concerns/suggestions, please do not hesitate to\n> email bitcoin-peering at mattcorallo.com\n>\n> Thanks,\n> Matt\n>\n>\n> (1) There has been extended discussion on #bitcoin-wizards as well as\n> #bitcoin-dev of the very small number of active, listening nodes.\n> Additionally, because many of those nodes are versions prior to 0.8.4,\n> it seems very likely that maliciously creating network splits or at\n> least drastically reducing the number of peers for most nodes would not\n> be particularly challenging in the current network. Also,\n>\n> http://www.tik.ee.ethz.ch/file/49318d3f56c1d525aabf7fda78b23fc0/P2P2013_041.pdf\n> noted that they were able to single-handledly decrease the network-wide\n> orphan rate by around 50% by improving network peering. Finally, you've\n> all seen the recent discussion on malicious mining algorithms. Though\n> those are not entirely prevented by reducing block propagation times,\n> they can be significantly limited compared to the current, rather\n> disjoint, network.\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models.\n> Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and\n> register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/215aa818/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2013-11-06T12:25:31",
                "message_text_only": "On Wed, Nov 6, 2013 at 5:50 AM, Matt Corallo <bitcoin-list at bluematt.me>wrote:\n\n> Relay node details:\n>  * The relay nodes do some data verification to prevent DoS, but in\n> order to keep relay fast, they do not fully verify the data they are\n> relaying, thus YOU SHOULD NEVER mine a block building on top of a\n> relayed block without fully checking it with your own bitcoin validator\n> (as you would any other block relayed from the P2P network).\n>\n\nWouldn't this cause disconnects due to misbehavior?\n\nA standard node connecting to a relay node would receive\nblocks/transactions that are not valid in some way and then disconnect.\n\nHave you looked though the official client to find what things are\nconsidered signs that a peer is hostile?  I assume things like double\nspending checks count as misbehavior and can't be quickly checked by a\nrelay node.\n\nMaybe another bit could be assigned in the services field as \"relay\".  This\nmeans that the node doesn't do any checking.\n\nConnects to relay nodes could be command line/config file only.  Peers\nwouldn't connect to them.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131106/2ac17bfa/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2013-11-06T23:35:34",
                "message_text_only": "No, the transactions relayed are piped through a bitcoind first (ie\nfully verified by a bitcoind). For blocks, for which the timing needs to\nbe tighter, bitcoinj does SPV-validation. Though it is possible to\ncreate a block which passes SPV validation but causes a DoS score, doing\nso would cost a miner a full block's worth of profits, which they are\nfairly unlikely to do. In any case, if it every becomes a problem, its\nnot hard to adapt addnode to allow higher DoS scores for individual nodes.\n\nMatt\n\nOn 11/06/13 07:25, Tier Nolan wrote:\n> \n> \n> \n> On Wed, Nov 6, 2013 at 5:50 AM, Matt Corallo <bitcoin-list at bluematt.me\n> <mailto:bitcoin-list at bluematt.me>> wrote:\n> \n>     Relay node details:\n>      * The relay nodes do some data verification to prevent DoS, but in\n>     order to keep relay fast, they do not fully verify the data they are\n>     relaying, thus YOU SHOULD NEVER mine a block building on top of a\n>     relayed block without fully checking it with your own bitcoin validator\n>     (as you would any other block relayed from the P2P network).\n> \n> \n> Wouldn't this cause disconnects due to misbehavior? \n> \n> A standard node connecting to a relay node would receive\n> blocks/transactions that are not valid in some way and then disconnect.\n> \n> Have you looked though the official client to find what things are\n> considered signs that a peer is hostile?  I assume things like double\n> spending checks count as misbehavior and can't be quickly checked by a\n> relay node.\n> \n> Maybe another bit could be assigned in the services field as \"relay\". \n> This means that the node doesn't do any checking. \n> \n> Connects to relay nodes could be command line/config file only.  Peers\n> wouldn't connect to them."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-11-08T11:46:02",
                "message_text_only": "I took a brief look at the code - it's looking very reasonable. You can\nreplace any construct like\n\ntry {\n  Thread.sleep(1000);\n} catch (InterruptedException e) {\n  throw new RuntimeException(e);\n}\n\nwhich is quite verbose, just with\nUninterruptibles.sleepUninterruptably(1000, TimeUnit.MILLISECONDS); (and of\ncourse static imports help too)\n\nI think for this concept to take off, you'd need a website and to recruit\nsomeone to help you market it. Pool operators won't reach out to you.\n\nI still find it perhaps more elegant to just boost the connectivity of the\nexisting network with bitcoind changes, but this can help for now.\n\n\n\nOn Thu, Nov 7, 2013 at 12:35 AM, Matt Corallo <bitcoin-list at bluematt.me>wrote:\n\n> No, the transactions relayed are piped through a bitcoind first (ie\n> fully verified by a bitcoind). For blocks, for which the timing needs to\n> be tighter, bitcoinj does SPV-validation. Though it is possible to\n> create a block which passes SPV validation but causes a DoS score, doing\n> so would cost a miner a full block's worth of profits, which they are\n> fairly unlikely to do. In any case, if it every becomes a problem, its\n> not hard to adapt addnode to allow higher DoS scores for individual nodes.\n>\n> Matt\n>\n> On 11/06/13 07:25, Tier Nolan wrote:\n> >\n> >\n> >\n> > On Wed, Nov 6, 2013 at 5:50 AM, Matt Corallo <bitcoin-list at bluematt.me\n> > <mailto:bitcoin-list at bluematt.me>> wrote:\n> >\n> >     Relay node details:\n> >      * The relay nodes do some data verification to prevent DoS, but in\n> >     order to keep relay fast, they do not fully verify the data they are\n> >     relaying, thus YOU SHOULD NEVER mine a block building on top of a\n> >     relayed block without fully checking it with your own bitcoin\n> validator\n> >     (as you would any other block relayed from the P2P network).\n> >\n> >\n> > Wouldn't this cause disconnects due to misbehavior?\n> >\n> > A standard node connecting to a relay node would receive\n> > blocks/transactions that are not valid in some way and then disconnect.\n> >\n> > Have you looked though the official client to find what things are\n> > considered signs that a peer is hostile?  I assume things like double\n> > spending checks count as misbehavior and can't be quickly checked by a\n> > relay node.\n> >\n> > Maybe another bit could be assigned in the services field as \"relay\".\n> > This means that the node doesn't do any checking.\n> >\n> > Connects to relay nodes could be command line/config file only.  Peers\n> > wouldn't connect to them.\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models.\n> Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and\n> register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131108/0da600b9/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2013-11-14T02:11:35",
                "message_text_only": "On 11/08/13 06:46, Mike Hearn wrote:\n> I took a brief look at the code - it's looking very reasonable. You can\n> replace any construct like\n> \n> try {\n>   Thread.sleep(1000);\n> } catch (InterruptedException e) {\n>   throw new RuntimeException(e);\n> }\n> \n> which is quite verbose, just with\n> Uninterruptibles.sleepUninterruptably(1000, TimeUnit.MILLISECONDS); (and\n> of course static imports help too)\n\nThanks, fixed.\n\n\n> \n> I think for this concept to take off, you'd need a website and to\n> recruit someone to help you market it. Pool operators won't reach out to\n> you.\n\nYes, I've done some initial outreach and plan on doing another major\nround now that the initial network is up and Im working on running some\nrelay time benchmarks. Finding someone to help push peering would be\nnice, if you have any suggestions, Im all ears.\n\n> \n> I still find it perhaps more elegant to just boost the connectivity of\n> the existing network with bitcoind changes, but this can help for now.\n\nAgreed, improving relay times across the regular P2P network would be\nnice, however I really dont see this as a part of the P2P network. Its\nmore of a backup relay network that just happens to follow the P2P\nprotocol (mostly, it doesnt do full block verification, so technically\nit breaks spec). In this model, this is really a nice augment to the P2P\nnetwork no matter what improvements are made. Having more protocols/ways\nblocks are relayed is always nice (anyone wanna launch a satellite?)\n\nMatt"
            },
            {
                "author": "John Dillon",
                "date": "2013-11-13T20:13:40",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n> To peer with the public relay nodes, simply select the closest region\n> out of us-west (West Coast US), us-east (East Coast US), eu (Western\n> Europe), au (Australia), or jpy (Japan) and add\n> public.REGION.relay.mattcorallo.com to your addnode list. Note that\n> since all of the relay nodes will relay between each other, you gain no\n> latency advantage by peering with more than the closest node to you (and\n> currently all the regions map to one node, so there they're redundant\n> anyway).\n>\n> For each relay node, you can connect to either port 8334 or 8335.\n> Connecting on port 8334 will relay only blocks, and port 8335 will relay\n> both blocks and transactions. The relay nodes will request any\n> transactions which appear in your invs no matter which port you connect to.\n\nYou should split the block-only and block+tx not only by port number, but also\nby DNS address. DoS attack by flooding blocks is fundamentally more difficult\nthan DoS attack by flooding transctions, so doing the split by IP address\nensures that in the event of an attack the more important block relaying\nfunctionality is less likely to be damaged. In the meantime point both DNS\naddresses to the same IP until it becomes an issue.\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQEcBAEBCAAGBQJSg91YAAoJEEWCsU4mNhiPq2oH/03kVqfHsXJ1l10qHhYaBPMy\nLe26Cp30Jt9BELiPVQISWjPeuOLsB0m7Say52GWHxBCfoNx3NYag6p8G3woSdWqv\nguc5U2lTwfhXS5R7y0B5diaGJ+Jaq70me4DYGdEnmkBf0F38wcgOtK92V2esLyVx\nTmCsRGxjAE8Ary0YHJOlb7sU4CNvQ8k1PDX6Hd+GCZVMvRtisILunGV4UDgSS62u\nyddZfrOs0yWZr2bwwI4koB2Sc0cFjK6/gMhr/d19ikQj2i2uqxYtwZIxuaAvYNdA\nhSmeouR4EFtVHTEQybF82VcfGcTcU11HncyKHU6FOAZQLZUgc3A/M3QgXc0mQrI=\n=l6GI\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Matt Corallo",
                "date": "2013-11-14T02:14:57",
                "message_text_only": "In the short-term, maybe. Keep in mind that the code for tx relay is\nfairly different and the bandwidth for transaction relay on these\nnodes is already lower than it is for blocks (by design). That said,\nI'd like to look into doing tx-less block relays for transactions that\npeers already have to limit block relay times even for large blocks,\nin which case tx relay is very much required.\n\nMatt\n\nOn 11/13/13 15:13, John Dillon wrote:\n> You should split the block-only and block+tx not only by port\n> number, but also by DNS address. DoS attack by flooding blocks is\n> fundamentally more difficult than DoS attack by flooding\n> transctions, so doing the split by IP address ensures that in the\n> event of an attack the more important block relaying functionality\n> is less likely to be damaged. In the meantime point both DNS \n> addresses to the same IP until it becomes an issue.\n> \n>"
            }
        ],
        "thread_summary": {
            "title": "High-speed Bitcoin Relay Network",
            "categories": [
                "Bitcoin-development",
                "ANN"
            ],
            "authors": [
                "Jeff Garzik",
                "John Dillon",
                "Mike Hearn",
                "Tier Nolan",
                "Matt Corallo"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 27567
        }
    },
    {
        "title": "[Bitcoin-development] On the optimal block size and why transaction fees are 8 times too low (or transactions 8 times too big)",
        "thread_messages": [
            {
                "author": "Michael Gronager",
                "date": "2013-11-07T14:11:39",
                "message_text_only": "Following the discussion on the recent mining sybil trick, I reread the\narticle on block propagation by Decker et al.* and decided to use it for\ndoing a proper estimate of transaction fee size and optimal block size.\n\nThe propagation of a block depends on and is roughly proportional to its\nsize. Further, the slower a block propagates the higher the risk of a\nfork, so as a miner you are basically juggling the risk of a fork\n(meaning you loose your bounty) vs the opportunity for including more\ntransactions and hence also get those fees.\n\nThis alone will dictate the minimal transaction fee as well as the\noptimal block size!\n\nLets try to put it into equations. For the purpose of this initial study\nlets simplify the work by Decker et al. Roughly, we can say that the\naverage propagation time for a block is t_propagate, and the average\ntime between blocks is t_blocks. Those are roughly 10sec and 600sec\nrespectively. The risk of someone else mining a block before your block\npropagates is roughly**:\n\nP_fork = t_propagate/t_blocks (~1/60)\n\nAlso note that propagation time is a function of block size, S:\n\nt_propagate = t_0 + alpha*S\n\nwhere Decker et al have determined alpha to 80ms/kb. We also define the\nfee size pr kilobyte, f, so\n\nE_fee = f*S\n\nGiven these equations the expected average earning is:\n\nE = P_hashrate*(1 - P_fork)*(E_bounty + E_fees)\n\nAnd inserting:\n\nE  = P_hashrate*[1 - (t_0 + alpha*S)/t_block]*(E_bounty + f*S)\n\nWe would like to choose the fee so the more transactions we include the\nmore we earn. I.e. dE/dS > 0:\n\ndE/dS = P_hashrate*{[(t_block - t_0)*f - alpha*E_bounty]/t_block -\n2*alpha*f/t_block*S}\n\nWhich gives:\n\n f > alpha*E_bounty/(t_block-t_0) ~ alpha*E_bounty/t_block\n\nor f > 80*25/600000 = 0.0033 or assuming a standard transaction size of\n0.227kb:\n\nf_tx > 0.00076.\n\nNote that this number is 8 times higher than the current transaction\nfee! So the current optimal block size is an empty block i.e. without\nother transactions than the coinbase! (miners don't listen now...)\n\nLets see what you loose by e.g. including 1000 transactions:\n\nE(1000) = P_hashrate*24.34XBT\n\nWhich is a loss of 2.6% compared to not including transactions at all!\n\nSo there are two ways forward from here. 1) raise the minimum fee, and\n2) make transactions smaller. We cannot make transactions much smaller,\nbut we can utilize that most of them have already been broadcasted\nverified and validated and then just include their hash in the block***.\nThis changes the relevant size for a transaction from 0.227kb to\n0.032kb. Which makes f_tx = 0.00011. We are almost there!\n\nNow assume that we implement this change and raise the minimum fee to\n0.00015, what is then the optimal block size (dE/dS = 0) ?\n\n S = 1/2 * (t_block/alpha - E_bounty/f)\n\nWhich gives 1083kb for a bounty of 25 and 2417kb for a bounty of 12.5.\nOptimal size in case of no bounty or an infinite fee is 3750MB.\n\nFinal conclusions is that the fee currently is too small and that there\nis no need to keep a maximum block size, the fork probability will\nautomatically provide an incentive to not let block grows into infinity.\n\n*)\nhttp://www.tik.ee.ethz.ch/file/49318d3f56c1d525aabf7fda78b23fc0/P2P2013_041.pdf\n**) The calculations should be done using the proper integrals and\nsimulations, but I will leave that for academia ;)\n***) A nice side effect from switching to broadcasting transactions in\nblocks as only their hash is that it decouples fee size from transaction\nsize!"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-11-07T15:00:01",
                "message_text_only": "Hi,\n\n(I didn't have time to read your e-mail entirely yet, I'll do so later)\n\nI believe that C. Decker's paper used measurements for propagation\ndelays for blocks 180000-190000, which happened between may and juli\n2012. The latest bitcoind/bitcoin-qt release at the time was 0.6.3.\n\nI'm sure the general patterns are valid, but if you're relying on\nactual speed numbers, I believe they may be very different now. I\ndon't have numbers of course, but at least the changes 0.8 should\nimpact propagation significantly. Some changes merged in git head (to\nbecome 0.9) could improve things further. If we're talking about\nlong-term scalability, we should base decisions on the best technology\navailable, at least.\n\n-- \nPieter\n\n\nOn Thu, Nov 7, 2013 at 3:11 PM, Michael Gronager <gronager at ceptacle.com> wrote:\n> Following the discussion on the recent mining sybil trick, I reread the\n> article on block propagation by Decker et al.* and decided to use it for\n> doing a proper estimate of transaction fee size and optimal block size.\n>\n> The propagation of a block depends on and is roughly proportional to its\n> size. Further, the slower a block propagates the higher the risk of a\n> fork, so as a miner you are basically juggling the risk of a fork\n> (meaning you loose your bounty) vs the opportunity for including more\n> transactions and hence also get those fees.\n>\n> This alone will dictate the minimal transaction fee as well as the\n> optimal block size!\n>\n> Lets try to put it into equations. For the purpose of this initial study\n> lets simplify the work by Decker et al. Roughly, we can say that the\n> average propagation time for a block is t_propagate, and the average\n> time between blocks is t_blocks. Those are roughly 10sec and 600sec\n> respectively. The risk of someone else mining a block before your block\n> propagates is roughly**:\n>\n> P_fork = t_propagate/t_blocks (~1/60)\n>\n> Also note that propagation time is a function of block size, S:\n>\n> t_propagate = t_0 + alpha*S\n>\n> where Decker et al have determined alpha to 80ms/kb. We also define the\n> fee size pr kilobyte, f, so\n>\n> E_fee = f*S\n>\n> Given these equations the expected average earning is:\n>\n> E = P_hashrate*(1 - P_fork)*(E_bounty + E_fees)\n>\n> And inserting:\n>\n> E  = P_hashrate*[1 - (t_0 + alpha*S)/t_block]*(E_bounty + f*S)\n>\n> We would like to choose the fee so the more transactions we include the\n> more we earn. I.e. dE/dS > 0:\n>\n> dE/dS = P_hashrate*{[(t_block - t_0)*f - alpha*E_bounty]/t_block -\n> 2*alpha*f/t_block*S}\n>\n> Which gives:\n>\n>  f > alpha*E_bounty/(t_block-t_0) ~ alpha*E_bounty/t_block\n>\n> or f > 80*25/600000 = 0.0033 or assuming a standard transaction size of\n> 0.227kb:\n>\n> f_tx > 0.00076.\n>\n> Note that this number is 8 times higher than the current transaction\n> fee! So the current optimal block size is an empty block i.e. without\n> other transactions than the coinbase! (miners don't listen now...)\n>\n> Lets see what you loose by e.g. including 1000 transactions:\n>\n> E(1000) = P_hashrate*24.34XBT\n>\n> Which is a loss of 2.6% compared to not including transactions at all!\n>\n> So there are two ways forward from here. 1) raise the minimum fee, and\n> 2) make transactions smaller. We cannot make transactions much smaller,\n> but we can utilize that most of them have already been broadcasted\n> verified and validated and then just include their hash in the block***.\n> This changes the relevant size for a transaction from 0.227kb to\n> 0.032kb. Which makes f_tx = 0.00011. We are almost there!\n>\n> Now assume that we implement this change and raise the minimum fee to\n> 0.00015, what is then the optimal block size (dE/dS = 0) ?\n>\n>  S = 1/2 * (t_block/alpha - E_bounty/f)\n>\n> Which gives 1083kb for a bounty of 25 and 2417kb for a bounty of 12.5.\n> Optimal size in case of no bounty or an infinite fee is 3750MB.\n>\n> Final conclusions is that the fee currently is too small and that there\n> is no need to keep a maximum block size, the fork probability will\n> automatically provide an incentive to not let block grows into infinity.\n>\n> *)\n> http://www.tik.ee.ethz.ch/file/49318d3f56c1d525aabf7fda78b23fc0/P2P2013_041.pdf\n> **) The calculations should be done using the proper integrals and\n> simulations, but I will leave that for academia ;)\n> ***) A nice side effect from switching to broadcasting transactions in\n> blocks as only their hash is that it decouples fee size from transaction\n> size!\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models. Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-11-07T15:19:24",
                "message_text_only": "Correcting myself:\n\nOn Thu, Nov 7, 2013 at 4:00 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> I believe that C. Decker's paper used measurements for propagation\n> delays for blocks 180000-190000, which happened between may and juli\n> 2012. The latest bitcoind/bitcoin-qt release at the time was 0.6.3.\n\nThey did use data from blocks 20000-210000, september-november 2012.\nThat was still before the 0.8 release, however.\n\n-- \nPieter"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-11-07T15:22:16",
                "message_text_only": "I think trying to help miners figure out the propagation/fees tradeoff at\nthe moment is a non-starter until we understand it better ourselves. A\nserver that tracks and records block propagation times, how many fees per\npassed up per block, orphan stats per size bucket etc would be tremendously\nhelpful.\n\n\nOn Thu, Nov 7, 2013 at 4:19 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> Correcting myself:\n>\n> On Thu, Nov 7, 2013 at 4:00 PM, Pieter Wuille <pieter.wuille at gmail.com>\n> wrote:\n> > I believe that C. Decker's paper used measurements for propagation\n> > delays for blocks 180000-190000, which happened between may and juli\n> > 2012. The latest bitcoind/bitcoin-qt release at the time was 0.6.3.\n>\n> They did use data from blocks 20000-210000, september-november 2012.\n> That was still before the 0.8 release, however.\n>\n> --\n> Pieter\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models.\n> Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and\n> register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131107/65ec5f61/attachment.html>"
            },
            {
                "author": "Michael Gronager",
                "date": "2013-11-07T15:53:12",
                "message_text_only": "Mike, Pieter,\n\nMy writeup outlines a framework for good approximation to a minimal fee\nas well as the optimal block size. The model has basically just one\nparameter, the propagation time - if that goes down, so can the fee.\n(Well there is another parameter too, the time btw blocks, which\ncurrently with the current hash acceleration is more like 400 than 600).\n\nAlso seconding Mike, that, yes, it would be tremendously useful to track\npropagation times and other things on the network to help us all decide\nthe proper settings.\n\nFinally, it would be great if someone from academia would grab the ball\nand do the full probabilistic analysis based on my outline.\n\nMichael\n\nOn 7/11/13, 16:22 , Mike Hearn wrote:\n> I think trying to help miners figure out the propagation/fees tradeoff\n> at the moment is a non-starter until we understand it better ourselves.\n> A server that tracks and records block propagation times, how many fees\n> per passed up per block, orphan stats per size bucket etc would be\n> tremendously helpful.\n> \n> \n> On Thu, Nov 7, 2013 at 4:19 PM, Pieter Wuille <pieter.wuille at gmail.com\n> <mailto:pieter.wuille at gmail.com>> wrote:\n> \n>     Correcting myself:\n> \n>     On Thu, Nov 7, 2013 at 4:00 PM, Pieter Wuille\n>     <pieter.wuille at gmail.com <mailto:pieter.wuille at gmail.com>> wrote:\n>     > I believe that C. Decker's paper used measurements for propagation\n>     > delays for blocks 180000-190000, which happened between may and juli\n>     > 2012. The latest bitcoind/bitcoin-qt release at the time was 0.6.3.\n> \n>     They did use data from blocks 20000-210000, september-november 2012.\n>     That was still before the 0.8 release, however.\n> \n>     --\n>     Pieter\n> \n>     ------------------------------------------------------------------------------\n>     November Webinars for C, C++, Fortran Developers\n>     Accelerate application performance with scalable programming models.\n>     Explore\n>     techniques for threading, error checking, porting, and tuning. Get\n>     the most\n>     from the latest Intel processors and coprocessors. See abstracts and\n>     register\n>     http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models. Explore\n> techniques for threading, error checking, porting, and tuning. Get the most \n> from the latest Intel processors and coprocessors. See abstracts and register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-07T20:31:23",
                "message_text_only": "> Final conclusions is that the fee currently is too small and that there\n> is no need to keep a maximum block size, the fork probability will\n> automatically provide an incentive to not let block grows into infinity.\n\nYour definition of P_fork is inaccurate for a miner with non-negligable\nhashing power - a miner will never fork themselves. Taking that into\naccount we have three outcomes:\n\n1) The block propagates without any other miner finding a block.\n2) During propagation another miner finds a block. (tie)\n2.1) You win the tie by finding another block.\n2.2) You lose the tie because someone else finds a block.\n\nWe will define t_prop as the time it takes for a block to propagate from\nyou to 100% of the hashing power, and as a simplifying assumption we\nwill assume that until t_prop has elapsed, 0% of the hashing power has\nthe block, and immedately after, 100% has the block. We will also define\nt_int, the average interval between blocks. (600 seconds for Bitcoin)\nFinally, we will define Q as the probability that you will find the next\nblock.\n\nThe probabilities of the various outcomes:\n\n1) 1 - (t_prop/t_int * (1-Q))\n2) t_prop/t_int * (1-Q)\n2.1) Q\n2.2) 1-Q\n\nNote that to simplify the equations we have not taking into account\npropagation in our calculations for outcomes 2.1 or 2.2\n\nThus we can define P_fork taking into account Q:\n\nP_fork(Q) = (t_prop/t_int * (1-Q))(1-Q) = t_pop/t_int * (1-Q)^2\n\nOver the range 0 < Q < 0.5 the probability of a fork decreases\napproximately linearly as your hashing power increases:\n\nd/dq P_fork(Q) = 2(Q-1)\n\nQ=0   -> d/dq P_fork(Q) = -2\nQ=1/2 -> d/dq P_fork(Q) = -1\n\nWith our new, more accurate, P_fork(Q) function lets re-calculate the\nbreak-even fee/KB using your original approach:\n\nt_prop = t_0 + \\alpha*S\nE_fee = f*S\n\nE(Q) = Q*(1 - P_fork(Q))*(E_bounty + E_fee)\nE(Q) = Q*[1 - (t_0 + k*S)/t_int * (1-Q)^2]*(E_B + f*S)\n\nd/dS E(Q) = Q*[ -2fSk/t_int*(1-Q)^2 - f*t_0/t_int*(1-Q)^2 + f - E_b*k/t_int*(1-Q)^2 ]\n\nAgain, we want to choose the fee so that the more transactions we\ninclude the more we earn, dE/dS > 0 We find the minimum fee to include a\ntransaction at all by setting S=0, thus we get:\n\nd/dS E(Q, S=0) = Q*[ f - f*t_0/t_int*(1-Q)^2 - E_b*k/t_int*(1-Q)^2 ] > 0\n\nf(1 - t_0/t_int*(1-Q)^2) > E_b*k/t_int*(1-Q)^2\n\nf > [E_b*k/t_int(1-Q)^2] / [1 - t_0/t_int*(1-Q)^2]\n\nf > [E_b*k*(1-Q)^2] / [t_int - t_0*(1-Q)^2]\n\nWith Q=0:\n\nf > E_b*k / (t_int - t_0) ~ E_b*k/t_int\n\nThis is the same result you derived. However lets look at Q != 0:\n\ndf/dQ = 2*E_b*k * [t_int*(q-1)] / [t_int - t_0(q-1)^2]^2\n\nWith negligible latency we get:\n\ndf/dQ, t_0=0 = 2*E_b*k*(q-1)/t_int\n\nSo what does that mean? Well in the region 0 < q < 1/2, df/dQ is always\nnegative. In other words, as you get more hashing power, the fee/KB you\ncan charge and still break even decreases linearly because you will\nnever orphan yourself. Lets trythe same assumptions as your first\nanalysis, based on the work by Decker et al\n\nBased on the work by Decker et al, lets try to calculate break-even\nfee/KB for negligible, 10%, 25% and 40% hashing power:\n\nt_0 = 10s\nt_int = 600s\nk = 80ms/kB\nE_b = 25BTC\n\nQ=0    -> f = 0.0033 BTC/kB\nQ=0.1  -> f = 0.0027 BTC/kB\nQ=0.25 -> f = 0.0018 BTC/kB\nQ=0.40 -> f = 0.0012 BTC/kB\n\nLet's assume every miner is directly peered with every other miner, each\nof those connections is 1MB/s, and somehow there's no latency at all:\n\nk = 1mS/kB\n\nQ=0    -> f = 0.000042 BTC/kB\nQ=0.1  -> f = 0.000034 BTC/kB\nQ=0.25 -> f = 0.000023 BTC/kB\nQ=0.40 -> f = 0.000015 BTC/kB\n\nRegardless of how you play around with the parameters, being a larger\nminer has a significant advantage because you can charge lower fees for\nyour transactions and therefor earn more money. But it gets even more\nugly when you take into account that maybe a guy with 0.1% hashing power\ncan't afford the high bandwidth, low-latency, internet connection that\nthe larger pool has:\n\nk = 10mS/kB, t_0=5s, Q=0.01 -> 0.000411 BTC/KB\nk =  1mS/kB, t_0=1s, Q=0.15 -> 0.000030 BTC/KB\n\nSo the 1% pool has an internet connection capable of 100kB/s to each\npeer, taking 5s to reach all the hashing power. The 15% pool can do\n1MB/s to each peer, taking 1s to reach all the hashing power. This small\ndifferent means that the 1% pool needs to charge 13.7x more per KB for\ntheir transactions to break even! It's a disaster for decentralization.\nBusinesses live and die on percentage points, let alone orders of\nmagnitude differences in cost, and I haven't even taken into account\nsecond-order effects like the perverse incentives to publish your blocks\nto only a minority of hashing power.(1)\n\nThis problem is inherent to the fundemental design of Bitcoin:\nregardless of what the blocksize is, or how fast the network is, the\ncurrent Bitcoin consensus protocol rewards larger mining pools with\nlower costs per KB to include transactions. It's a fundemental issue. An\nunlimited blocksize will make the problem even worse by increasing fixed\ncosts, but keeping the blocksize at 1MB forever doesn't solve the\nunderlying problem either as the inflation subsidy becomes less\nimportant and fees more important.\n\n1) http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg03200.html\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000054eeccf3ac454892457bf4919d78efb275efd2ddd1a920c99\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131107/ff509779/attachment.sig>"
            },
            {
                "author": "Michael Gronager",
                "date": "2013-11-07T21:58:42",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 7/11/13, 21:31 , Peter Todd wrote:\n>> Final conclusions is that the fee currently is too small and that\n>> there is no need to keep a maximum block size, the fork\n>> probability will automatically provide an incentive to not let\n>> block grows into infinity.\n> \n\nGreat additions! - I was about to do a second iteration of the\ncalculations including the pool size, but you beat me to it - thanks!\n\nStill the picture remains the same - you can half the fee if you are a\nlarge pool\n\n> Q=0    -> f = 0.0033 BTC/kB Q=0.1  -> f = 0.0027 BTC/kB Q=0.25 -> f\n> = 0.0018 BTC/kB Q=0.40 -> f = 0.0012 BTC/kB\n\nYou second list of numbers is an unlikely extreme:\n\n> k = 1mS/kB\n\nThe propagation latency in the network is more due to the block\nverification than due to its network (fiber) propagation time,\nbringing down the number of hops helps tremendously, so I agree that\nwe can probably bring down k by a factor of ~10 (k=8-12) if we\nconsider only pools directly connected. This should bring us close to\nbreak even with the current fee size, but we should really get some\nempirical data for interconnected large pools. However - important\nnote - if you are a 1% miner - don't include transactions!\n\n> \n> Q=0    -> f = 0.000042 BTC/kB Q=0.1  -> f = 0.000034 BTC/kB Q=0.25\n> -> f = 0.000023 BTC/kB Q=0.40 -> f = 0.000015 BTC/kB\n> \n\n> \n> This problem is inherent to the fundemental design of Bitcoin: \n> regardless of what the blocksize is, or how fast the network is,\n> the current Bitcoin consensus protocol rewards larger mining pools\n> with lower costs per KB to include transactions.\n\nI don't see a problem of rewarding economy of scale, as long as the\neffect is not too grave (raising the min fee would actually make it\nmore profitable for smaller miners).\n\nMichael\n\n> 1)\n> http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg03200.html\n>\n> \n> \n> \n> ------------------------------------------------------------------------------\n>\n> \nNovember Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming\n> models. Explore techniques for threading, error checking, porting,\n> and tuning. Get the most from the latest Intel processors and\n> coprocessors. See abstracts and register \n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n>\n> \n> \n> \n> _______________________________________________ Bitcoin-development\n> mailing list Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.22 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJSfA0SAAoJEKpww0VFxdGRSEUIALFws8/nNDGPDFWKX2N19jWA\nYecC7ZdMgN+1xmf+z2TNjaREvUqI1BLbYO3qQj9AsvTgkMZDwo8c5hMfJL7//V+z\nvLiygTbEcorEbyM54w8yTuDVBqdNEg22Cn2T35DIEmqxGP5OSqw+vEBp2B4Y7asv\nGG+JgYTVNJf6kZ1GV8cXYnXVBgfccZfXllBYOIPjyk2tdz7HMJN10WKUePbSJtg+\nzcvly05JY70d1quERj/fXxVsHpPP6BrH5sH+h4WPxM27+i6R3N90JLAWbB9D4h2s\noYK9MMlH3UC3HR4AR7po4xxuOpxOK3Exa6d9ACQGPGtLRNVWmHiBFT2SViKViK4=\n=gALT\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-15T10:52:40",
                "message_text_only": "On Thu, Nov 07, 2013 at 10:58:42PM +0100, Michael Gronager wrote:\n> > Q=0    -> f = 0.0033 BTC/kB Q=0.1  -> f = 0.0027 BTC/kB Q=0.25 -> f\n> > = 0.0018 BTC/kB Q=0.40 -> f = 0.0012 BTC/kB\n> \n> You second list of numbers is an unlikely extreme:\n> \n> > k = 1mS/kB\n> \n> The propagation latency in the network is more due to the block\n> verification than due to its network (fiber) propagation time,\n> bringing down the number of hops helps tremendously, so I agree that\n> we can probably bring down k by a factor of ~10 (k=8-12) if we\n> consider only pools directly connected. This should bring us close to\n> break even with the current fee size, but we should really get some\n> empirical data for interconnected large pools.\n\nWell if large pools wanted it would be trivial for all of them to just\nconnect to each other... but my 25kB/s average data rate sure indicates\nthat they either aren't bothering, or aren't bothering to do that\ncorrectly.\n\n> However - important\n> note - if you are a 1% miner - don't include transactions!\n\nWhich is an awful solution, although probably a correct one.... After\nall, if you don't include transactions, you can start mining blocks\nearlier too based on just the header.\n\n> > Q=0    -> f = 0.000042 BTC/kB Q=0.1  -> f = 0.000034 BTC/kB Q=0.25\n> > -> f = 0.000023 BTC/kB Q=0.40 -> f = 0.000015 BTC/kB\n> > \n> \n> > \n> > This problem is inherent to the fundemental design of Bitcoin: \n> > regardless of what the blocksize is, or how fast the network is,\n> > the current Bitcoin consensus protocol rewards larger mining pools\n> > with lower costs per KB to include transactions.\n> \n> I don't see a problem of rewarding economy of scale, as long as the\n> effect is not too grave (raising the min fee would actually make it\n> more profitable for smaller miners).\n\nThat's a fundemental misunderstanding; there's no such thing as a min\nfee.\n\nAs for economies of scale, the \"product\" we're paying miners for is\ndecentralization and resistance to 51% attack. If instead only get 51%\nattack resistance, we're getting a bum deal. If that's all we're\ngetting, we don't actually have 51% resistance...\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000075ed91531e07d2045b5823da050fe373bde7bb363965e44ae\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/06316107/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "On the optimal block size and why transaction fees are 8 times too low (or transactions 8 times too big)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Michael Gronager",
                "Pieter Wuille",
                "Peter Todd"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 24988
        }
    },
    {
        "title": "[Bitcoin-development] BIP 38",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2013-11-08T15:41:00",
                "message_text_only": "Hello Mike,\n\nI tried (and eventually succeded) to implement BIP 0038 today in Python and\nhave a few comments on your BIP,\n\n- The BIP does not describe how flag 0x04 (lotsequence_present) should\nexactly be used in decoding (it does not indicate how ownersalt /\nownerentropy is handled differently). I figured this out eventually from\nthe C# and JS implementations.\n\n- Under \"Now we will encrypt seedb. Derive a second key from passpoint\nusing scrypt\" it says \"Split the result into two 16-byte halves and call\nthem derivedhalf1 and derivedhalf2.\". This should be two *32-byte* halves\nas the results is 64 bytes.\n\nRegards,\nWladimir\n\n\n\nOn Fri, Oct 25, 2013 at 10:46 PM, Mike Caldwell <mcaldwell at swipeclock.com>wrote:\n\n> Gregory,\n>\n> No problem, thanks for providing the IRC recap, and glad I've finally made\n> \"radio contact\" with the list.  Perhaps there can be some long overdue\n> discussion on the topic.\n>\n> I see Kogelman's improvements to my proposal as being of merit and may\n> very well be sufficient to supersede what I've originally proposed.  I\n> suppose the main thing I'm wanting to ensure is that the identity of my\n> original proposal is maintained.  Regardless of whether a paper wallet or\n> physical bitcoin with a single address is poor form or whether my proposal\n> is rejected or superseded, I hope there can be a consensus that \"BIP38\" can\n> continue to be understood to mean \"Password-protected private key proposal\n> by Mike Caldwell\", and that it can appear in the lists of BIPs alongside\n> others.\n>\n> Regarding \"BIP 22\"... I in fact did not originally attempt to post to the\n> list over what I had created and called BIP 22 once upon a time, I\n> literally just created a wiki entry contrary to advice in BIP 1 that I had\n> not read at the time.  I recognize it's totally legitimate to feel and act\n> upon the appearance that BIP 38 was created in a similar shortcut fashion.\n>  Certainly, the next thing I propose will be in the form of a draft outside\n> the BIP \"numberspace\" and I won't solicit a BIP number without an\n> established consensus in the future.  That said, I'm asking for BIP 38 to\n> stand and be recognized as in existence, so as to not confuse those who\n> call it by that name and who have already chosen to do something with it\n> (whether that's to implement it, or to draft improvements to it like\n> Kogelman).\n>\n> If I did BIP 38 over again, there's a couple shortcomings of my own that I\n> wouldn't mind seeing addressed in another iteration, and the right venue\n> for that may very well be to contribute to Kogelman's work.  My particular\n> improvements might include wanting the ability to outsource the\n> computationally expensive step to another service at a minimized risk to\n> the user, potentially the ability to have special-purpose \"encrypted\n> minikeys\" (sort of how ARM has Thumb for places where the tradeoff makes\n> sense), and a typo check with better privacy (I currently use\n> sha256(address)[0...3] which may unintentionally reveal the bitcoin\n> address, if it's funded, to someone who has the encrypted key but doesn't\n> know the password).\n>\n> mike\n>\n>\n>\n> -----Original Message-----\n> From: Gregory Maxwell [mailto:gmaxwell at gmail.com]\n> Sent: Friday, October 25, 2013 2:05 PM\n> To: Mike Caldwell\n> Cc: bitcoin-development at lists.sourceforge.net\n> Subject: Re: [Bitcoin-development] BIP 38\n>\n> On Fri, Oct 25, 2013 at 11:50 AM, Mike Caldwell <mcaldwell at swipeclock.com>\n> wrote:\n> > I have noticed that there was a recent change to BIP 0038\n> > (Password-Protected Private Key) on the Wiki, which is a proposal I\n> > wrote in late 2012.  Gregory, it looks to me as though you have made\n> > this change, and I\u2019m hoping for your help here.  The change suggests\n> > that the number was never assigned, and that there has been no\n> > discussion regarding the proposal on this list.\n>\n> Greetings, (repeating from our discussion on IRC)\n>\n> No prior messages about your proposal have made it to the list, and no\n> mention of the assignment had been made in the wiki.\n>\n> The first I ever heard of this scheme was long after you'd written the\n> document when I attempted to assign the number to something else then\n> noticed something existed at that name.\n>\n> Since you had previously created BIP documents without public discussion\n> (e.g. \"BIP 22\"\n> https://en.bitcoin.it/wiki/OP_CHECKSIGEX_DRAFT_BIP [...] Or, I wonder did\n> your emails just get eaten that time too?), I'd just assumed something\n> similar had happened here.\n>\n> I didn't take any action at the time I first noticed it, but after someone\n> complained about bitcoin-qt \"not confirming with BIP38\" to me today it was\n> clear to me that people were confusing this with something that was\n> \"officially\" (as much as anything is) supported, so I moved the document\n> out.  (I've since moved it back, having heard from you that you thought\n> that it had actually been assigned/announced).\n>\n> With respect to moving it forward: Having a wallet which can only a single\n> address is poor form. Jean-Paul Kogelman has a draft proposal which is\n> based on your BIP38 work though the encoding scheme is different, having\n> been revised in response to public discussion.\n>\n> Perhaps efforts here can be combined?\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n> from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60135991&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131108/35cfe907/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP 38",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 6053
        }
    },
    {
        "title": "[Bitcoin-development] 1. Re: On the optimal block size and why transaction fees are 8",
        "thread_messages": [
            {
                "author": "Goss, Brian C., M.D.",
                "date": "2013-11-08T16:21:35",
                "message_text_only": "Peter,\n\nWhat is the propagation time within a pool?  If my pool is made up of a ton\nof fancy ASICs connected by 300 baud modems, how does that affect your\nanalysis (ie, Q for a mining pool is effectively a function of time as\nwell)?  \n\nBrian\n P.S. I hope these are not ignorant questions; if they are, please feel free\nto disregard!\n\n\nMessage: 1\nDate: Thu, 7 Nov 2013 15:31:23 -0500\nFrom: Peter Todd <pete at petertodd.org>\nSubject: Re: [Bitcoin-development] On the optimal block size and why\n\ttransaction fees are 8 times too low (or transactions 8 times too\nbig)\nTo: Michael Gronager <gronager at ceptacle.com>\nCc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>\nMessage-ID: <20131107203123.GB3805 at petertodd.org>\nContent-Type: text/plain; charset=\"us-ascii\"\n\n> Final conclusions is that the fee currently is too small and that \n> there is no need to keep a maximum block size, the fork probability \n> will automatically provide an incentive to not let block grows into\ninfinity.\n\nYour definition of P_fork is inaccurate for a miner with non-negligable\nhashing power - a miner will never fork themselves. Taking that into account\nwe have three outcomes:\n\n1) The block propagates without any other miner finding a block.\n2) During propagation another miner finds a block. (tie)\n2.1) You win the tie by finding another block.\n2.2) You lose the tie because someone else finds a block.\n\nWe will define t_prop as the time it takes for a block to propagate from you\nto 100% of the hashing power, and as a simplifying assumption we will assume\nthat until t_prop has elapsed, 0% of the hashing power has the block, and\nimmedately after, 100% has the block. We will also define t_int, the average\ninterval between blocks. (600 seconds for Bitcoin) Finally, we will define Q\nas the probability that you will find the next block.\n\nThe probabilities of the various outcomes:\n\n1) 1 - (t_prop/t_int * (1-Q))\n2) t_prop/t_int * (1-Q)\n2.1) Q\n2.2) 1-Q\n\nNote that to simplify the equations we have not taking into account\npropagation in our calculations for outcomes 2.1 or 2.2\n\nThus we can define P_fork taking into account Q:\n\nP_fork(Q) = (t_prop/t_int * (1-Q))(1-Q) = t_pop/t_int * (1-Q)^2\n\nOver the range 0 < Q < 0.5 the probability of a fork decreases approximately\nlinearly as your hashing power increases:\n\nd/dq P_fork(Q) = 2(Q-1)\n\nQ=0   -> d/dq P_fork(Q) = -2\nQ=1/2 -> d/dq P_fork(Q) = -1\n\nWith our new, more accurate, P_fork(Q) function lets re-calculate the\nbreak-even fee/KB using your original approach:\n\nt_prop = t_0 + \\alpha*S\nE_fee = f*S\n\nE(Q) = Q*(1 - P_fork(Q))*(E_bounty + E_fee)\nE(Q) = Q*[1 - (t_0 + k*S)/t_int * (1-Q)^2]*(E_B + f*S)\n\nd/dS E(Q) = Q*[ -2fSk/t_int*(1-Q)^2 - f*t_0/t_int*(1-Q)^2 + f -\nE_b*k/t_int*(1-Q)^2 ]\n\nAgain, we want to choose the fee so that the more transactions we include\nthe more we earn, dE/dS > 0 We find the minimum fee to include a transaction\nat all by setting S=0, thus we get:\n\nd/dS E(Q, S=0) = Q*[ f - f*t_0/t_int*(1-Q)^2 - E_b*k/t_int*(1-Q)^2 ] > 0\n\nf(1 - t_0/t_int*(1-Q)^2) > E_b*k/t_int*(1-Q)^2\n\nf > [E_b*k/t_int(1-Q)^2] / [1 - t_0/t_int*(1-Q)^2]\n\nf > [E_b*k*(1-Q)^2] / [t_int - t_0*(1-Q)^2]\n\nWith Q=0:\n\nf > E_b*k / (t_int - t_0) ~ E_b*k/t_int\n\nThis is the same result you derived. However lets look at Q != 0:\n\ndf/dQ = 2*E_b*k * [t_int*(q-1)] / [t_int - t_0(q-1)^2]^2\n\nWith negligible latency we get:\n\ndf/dQ, t_0=0 = 2*E_b*k*(q-1)/t_int\n\nSo what does that mean? Well in the region 0 < q < 1/2, df/dQ is always\nnegative. In other words, as you get more hashing power, the fee/KB you can\ncharge and still break even decreases linearly because you will never orphan\nyourself. Lets trythe same assumptions as your first analysis, based on the\nwork by Decker et al\n\nBased on the work by Decker et al, lets try to calculate break-even fee/KB\nfor negligible, 10%, 25% and 40% hashing power:\n\nt_0 = 10s\nt_int = 600s\nk = 80ms/kB\nE_b = 25BTC\n\nQ=0    -> f = 0.0033 BTC/kB\nQ=0.1  -> f = 0.0027 BTC/kB\nQ=0.25 -> f = 0.0018 BTC/kB\nQ=0.40 -> f = 0.0012 BTC/kB\n\nLet's assume every miner is directly peered with every other miner, each of\nthose connections is 1MB/s, and somehow there's no latency at all:\n\nk = 1mS/kB\n\nQ=0    -> f = 0.000042 BTC/kB\nQ=0.1  -> f = 0.000034 BTC/kB\nQ=0.25 -> f = 0.000023 BTC/kB\nQ=0.40 -> f = 0.000015 BTC/kB\n\nRegardless of how you play around with the parameters, being a larger miner\nhas a significant advantage because you can charge lower fees for your\ntransactions and therefor earn more money. But it gets even more ugly when\nyou take into account that maybe a guy with 0.1% hashing power can't afford\nthe high bandwidth, low-latency, internet connection that the larger pool\nhas:\n\nk = 10mS/kB, t_0=5s, Q=0.01 -> 0.000411 BTC/KB k =  1mS/kB, t_0=1s, Q=0.15\n-> 0.000030 BTC/KB\n\nSo the 1% pool has an internet connection capable of 100kB/s to each peer,\ntaking 5s to reach all the hashing power. The 15% pool can do 1MB/s to each\npeer, taking 1s to reach all the hashing power. This small different means\nthat the 1% pool needs to charge 13.7x more per KB for their transactions to\nbreak even! It's a disaster for decentralization.\nBusinesses live and die on percentage points, let alone orders of magnitude\ndifferences in cost, and I haven't even taken into account second-order\neffects like the perverse incentives to publish your blocks to only a\nminority of hashing power.(1)\n\nThis problem is inherent to the fundemental design of Bitcoin:\nregardless of what the blocksize is, or how fast the network is, the current\nBitcoin consensus protocol rewards larger mining pools with lower costs per\nKB to include transactions. It's a fundemental issue. An unlimited blocksize\nwill make the problem even worse by increasing fixed costs, but keeping the\nblocksize at 1MB forever doesn't solve the underlying problem either as the\ninflation subsidy becomes less important and fees more important.\n\n1)\nhttp://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg032\n00.html\n\n--\n'peter'[:-1]@petertodd.org\n00000000000000054eeccf3ac454892457bf4919d78efb275efd2ddd1a920c99\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: not available\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\n\n------------------------------\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: smime.p7s\nType: application/pkcs7-signature\nSize: 6822 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131108/76a7dd01/attachment.p7s>"
            },
            {
                "author": "John Dillon",
                "date": "2013-11-13T20:27:52",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn Fri, Nov 8, 2013 at 4:21 PM, Goss, Brian C., M.D.\n<Goss.Brian at mayo.edu> wrote:\n> Peter,\n>\n> What is the propagation time within a pool?  If my pool is made up of a ton\n> of fancy ASICs connected by 300 baud modems, how does that affect your\n> analysis (ie, Q for a mining pool is effectively a function of time as\n> well)?\n\nThe propagation time you're thinking of is from the pool to the miner, and even\nnow that is significant for pools that do not pay for stale shares. I remember\nan Australian pool mentioning that problem on their website as a reason for the\npools existence.\n\nI would expect selfish mining, as well as orphans becoming more important in\ngeneral, to centralize the physical location of hashing power too. If the 100ms\ndelay to your pool impacts profits you'll have an incentive to locate your\nmining equipment physically closer to the pool. The next step is pools wanting\nto physically locate themselves closer to other pools.\n\nIt would not be good if all Bitcoin mining was done in Iceland...\n\n> Brian\n>  P.S. I hope these are not ignorant questions; if they are, please feel free\n> to disregard!\n\nNot ignorant at all IMO.\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQEcBAEBCAAGBQJSg+CpAAoJEEWCsU4mNhiPufwIAKNpBBvlRvSQZOzMJvghG7fX\nlCNliohDKw9kdKJJjN1T73Ssl06wGbBe881k4c4r7fHeNDRQZbrFsj+uBsFyUhmy\nCF70KiOKuowDlWwyWMxZbbyinK0mEKC7J/hJVOt15FHubLnq71Utb+I2L7seyHlo\n2E2byG4UnofoD5L+hGzfD6FJ/zYEHtTKgFw7Y1+ZSmAxlIcdrcpH7tPmUzFD7JPi\nRnaK1BH7hpM6FyZQUhSC/tW7mYswNEasvouBE4V1vSySZb6S43kiED2Q4uH3W0+A\nUtbyRQ7yT3BOLGB2OO/L92tg6S7WRyMtvQoevJkEIAnUywD3YWaZnBbf0IM4LWg=\n=6750\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "1. Re: On the optimal block size and why transaction fees are 8",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "John Dillon",
                "Goss, Brian C., M.D."
            ],
            "messages_count": 2,
            "total_messages_chars_count": 8209
        }
    },
    {
        "title": "[Bitcoin-development] Extending the Payment Protocol with vCards",
        "thread_messages": [
            {
                "author": "Taylor Gerring",
                "date": "2013-11-09T17:43:41",
                "message_text_only": "Hi everyone,\n\nI made a post on the BitcoinTalk forums <https://bitcointalk.org/index.php?topic=329229.0> outlining how the Payment Protocol could be extended with optional vCard support to increase the usability of Payment Protocol for user-to-user transactions and improve the user experience in wallets supporting PP.\n\nI\u2019ve outlined the concept in as much detail as my feeble brain can handle, drawing on BIP 0070 itself and Mike Hearn\u2019s Payment Protocol FAQ. I know there is interest in \u201ccontact exchange\u201d functionality from the Hive team, so I\u2019m hoping this will begin a discussion on how we can make wallets more friendly in a standard way.\n\nPlease read, digest, and let me know if you have any feedback.\n\nThanks,\n\nTaylor Gerring\n\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131109/0af3c2d6/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-11-10T11:08:38",
                "message_text_only": "Hey Taylor,\n\nIt's great to see people thinking about payment protocol extensions. I'm\nnot totally convinced vCard support is the best idea relative to social\nnetwork integration - I can't recall the last time I saw someone use a\nvCard. However, that should not hold you back from experimenting or\nprototyping. All an extension requires is some tag numbers and we're not in\ndanger of running out of numbers any time soon.\n\nThe reason I favour social network integration is because those are the\nID's people already have. Distributed social networks (like the PGP web of\ntrust) have never really taken off, and fixing that is an entirely separate\nproject to Bitcoin.\n\nDoing so is quite easy. Major social networks all have a concept of a user\nID, moreover, one that can be queried without any kind of API authorization\nfor basic info. Examples:\n\nhttps://graph.facebook.com/i.am.the.real.mike\nhttps://plus.google.com/s2/u/0/photos/profile/114798402540078632611\n\nSo you could simply embed a social network URL into a payment request, and\nuse that to associate a name/photo with a payment. That would be\nunauthenticated (the sender is not proving they are the real owner of the\nsocial network profile). However, authentication may not turn out to be\nnecessary. If it were to be, then steganographically embedding a key into\nthe profile picture and signing the payment request with it would be a way\nto do so.\n\n\nOn Sat, Nov 9, 2013 at 6:43 PM, Taylor Gerring <taylor.gerring at gmail.com>wrote:\n\n> Hi everyone,\n>\n> I made a post on the BitcoinTalk forums <\n> https://bitcointalk.org/index.php?topic=329229.0> outlining how the\n> Payment Protocol could be extended with optional vCard support to increase\n> the usability of Payment Protocol for user-to-user transactions and improve\n> the user experience in wallets supporting PP.\n>\n> I\u2019ve outlined the concept in as much detail as my feeble brain can handle,\n> drawing on BIP 0070 itself and Mike Hearn\u2019s Payment Protocol FAQ. I know\n> there is interest in \u201ccontact exchange\u201d functionality from the Hive team,\n> so I\u2019m hoping this will begin a discussion on how we can make wallets more\n> friendly in a standard way.\n>\n> Please read, digest, and let me know if you have any feedback.\n>\n> Thanks,\n>\n> Taylor Gerring\n>\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models.\n> Explore\n> techniques for threading, error checking, porting, and tuning. Get the most\n> from the latest Intel processors and coprocessors. See abstracts and\n> register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131110/8b1c59d0/attachment.html>"
            },
            {
                "author": "Wendell",
                "date": "2013-11-12T18:34:37",
                "message_text_only": "Hi Mike,\n\nIt seems to me there is some confusion about this. Taylor's talking about a standard way to pass around data; the end user would never be exposed to something like a \"vCard\". That vCard's existence itself would in fact be very temporary.\n\n-wendell\n\ngrabhive.com | twitter.com/hivewallet | gpg: 6C0C9411\n\nOn Nov 10, 2013, at 7:08 PM, Mike Hearn wrote:\n\n> It's great to see people thinking about payment protocol extensions. I'm not totally convinced vCard support is the best idea relative to social network integration - I can't recall the last time I saw someone use a vCard. However, that should not hold you back from experimenting or prototyping. All an extension requires is some tag numbers and we're not in danger of running out of numbers any time soon.\n>"
            }
        ],
        "thread_summary": {
            "title": "Extending the Payment Protocol with vCards",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Taylor Gerring",
                "Wendell"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 4916
        }
    },
    {
        "title": "[Bitcoin-development] idea",
        "thread_messages": [
            {
                "author": "Chris Evans",
                "date": "2013-11-09T20:16:07",
                "message_text_only": "maybe add an optional note field to transaction so the receiver knows who\nsent the\nbtc\n\n\n\n-chris\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131109/18a27baf/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-11-09T20:30:28",
                "message_text_only": "On Saturday, November 09, 2013 8:16:07 PM Chris Evans wrote:\n> maybe add an optional note field to transaction so the receiver knows who\n> sent the btc\n\nThis mailing list is for development discussion, NOT bug reports nor feature \nrequests.\n\nBitcoin does not currently support any built-in mechanism for conveying the \nsender of a transaction nor notes. It is advised to collect any such \ninformation you need before giving someone a payment address.\n\nLuke"
            },
            {
                "author": "Wladimir",
                "date": "2013-11-10T08:13:46",
                "message_text_only": "On Sat, Nov 9, 2013 at 9:16 PM, Chris Evans <aaxiomfinity at gmail.com> wrote:\n\n> maybe add an optional note field to transaction so the receiver knows who\n> sent the\n> btc\n>\n\nThis has been discussed many times. But in any case: If you encounter this\nas a problem it means you are re-using addresses, which is discouraged for\ngood reasons.\n\nOtherwise, when someone wants to send you BTC they need to request a new\nreceiving address from you. Along with this request they can also send a\nmessage, over whatever channel is used to negotiate the payment.\n\nIf you're just posting a static bitcoin address somewhere for donations,\nconsider it an anonymous (wel, pseudonymous) gift jar.\n\nRegards,\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131110/78ef81a1/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "idea",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Chris Evans",
                "Wladimir"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 1617
        }
    },
    {
        "title": "[Bitcoin-development] Even simpler minimum fee calculation formula: f > bounty*fork_rate/average_blocksize",
        "thread_messages": [
            {
                "author": "Michael Gronager",
                "date": "2013-11-13T11:52:21",
                "message_text_only": "Last week I posted a writeup: \"On the optimal block size and why\ntransaction fees are 8 times too low (or transactions 8 times too big)\".\n\nPeter Todd made some nice additions to it including different pool sizes\ninto the numbers.\n\nHowever, it occurred to me that things can in fact be calculated even\nsimpler: The measured fork rate will mean out all the different pool\nsizes and network latencies and will as such provide a simple number we\ncan use to estimate the minimum fee. Key assumption is that the latency\nwill depend on block size (# txns) and the fork rate will depend on latency.\n\nUsing the formulas from last week:\n\nP_fork = t_propagate/t_blocks\n\nand:\n\nt_propagate = t_0 + alpha*S ~= alpha*S\n\nWe get a measure for alpha as a function of the average fork rate and\naverage block size:\n\nalpha = P_fork*t_block/S\n\nFurther, take the formula for the minimum fee:\n\nf > alpha*E_bounty/t_block\n\nAnd insert the formula for alpha:\n\nf > P_fork*E_bounty/S_average\n\nLuckily the fork frequency and the average block size are easily\nmeasurable. blockchain.info keeps historical graphs of number of\norphaned blocks pr day - average over the last year is 1.5. Average\nnumber of blocks per day over the last year is 169, which yields a\nP_fork of ~1/113. Average block size in the same time is 134kBytes,\nwhich yields a minimum fee:\n\nf > 0.00165XBT/kb or 0.00037XBT/txn\n\nSo the 0.0001 is only 4 times too small. Further, let us look at the\ntrend over the last 12 months. Pieter Wuille claimed that there has been\nseveral improvements over the last half year that would bring down the\nlatency, there has also been speculations regarding direct connections\nbetween the major pools etc - lets see if this is indeed true.\n\nIf you look instead of 360 days, only at the last 90 days the average\nblock size has been 131kBytes, and the fork rate has been ~1/118, which\nresults in a minimum fee of:\n\nf > 0.00162XBT/kb or 0.00037XBT/txn\n\nSo a small improvement but not statistically important...\n\nLast question, recalling that optimal revenue block size is a function\nof the txn-fee (from the last writeup) - lets see what fee it takes to\nsupport a block size of 131kBytes:\n\nS = 1/2 * (t_block/alpha - E_bounty/f)\n\nS = 1/2 * (S/P_fork - E_bounty/f)\n\nf = E_bounty/[(1/P_fork-2)*S] = 0.00165XBT/kB\n\nSo a 4 times increase is still sufficient for the current load.\n\nAnyway - the all important number is alpha, the network latency which we\nexpect to be dependent of various things such as interconnectivity,\nbandwidths, software quality etc, where mainly the latter is within our\nhands to bring down the fee. And you can actually setup the standard\nclient to choose a better fee, as all the parameters in the formula are\neasily measured!"
            },
            {
                "author": "Michael Gronager",
                "date": "2013-11-13T12:34:07",
                "message_text_only": "Just a quick comment on the actual fees (checked at blockchain.info) the\naverage fee over the last 90 days is actually ~0.0003BTC/txn - so not\ntoo far behind the theoretical minimum of 0.00037BTC/txn.\n\nI suppose, though, that it has more to do with old clients and fee\nsettings (0.0005) than network wisdom ;)\n\nOn 13/11/13, 12:52 , Michael Gronager wrote:\n> Last week I posted a writeup: \"On the optimal block size and why\n> transaction fees are 8 times too low (or transactions 8 times too big)\".\n> \n> Peter Todd made some nice additions to it including different pool sizes\n> into the numbers.\n> \n> However, it occurred to me that things can in fact be calculated even\n> simpler: The measured fork rate will mean out all the different pool\n> sizes and network latencies and will as such provide a simple number we\n> can use to estimate the minimum fee. Key assumption is that the latency\n> will depend on block size (# txns) and the fork rate will depend on latency.\n> \n> Using the formulas from last week:\n> \n> P_fork = t_propagate/t_blocks\n> \n> and:\n> \n> t_propagate = t_0 + alpha*S ~= alpha*S\n> \n> We get a measure for alpha as a function of the average fork rate and\n> average block size:\n> \n> alpha = P_fork*t_block/S\n> \n> Further, take the formula for the minimum fee:\n> \n> f > alpha*E_bounty/t_block\n> \n> And insert the formula for alpha:\n> \n> f > P_fork*E_bounty/S_average\n> \n> Luckily the fork frequency and the average block size are easily\n> measurable. blockchain.info keeps historical graphs of number of\n> orphaned blocks pr day - average over the last year is 1.5. Average\n> number of blocks per day over the last year is 169, which yields a\n> P_fork of ~1/113. Average block size in the same time is 134kBytes,\n> which yields a minimum fee:\n> \n> f > 0.00165XBT/kb or 0.00037XBT/txn\n> \n> So the 0.0001 is only 4 times too small. Further, let us look at the\n> trend over the last 12 months. Pieter Wuille claimed that there has been\n> several improvements over the last half year that would bring down the\n> latency, there has also been speculations regarding direct connections\n> between the major pools etc - lets see if this is indeed true.\n> \n> If you look instead of 360 days, only at the last 90 days the average\n> block size has been 131kBytes, and the fork rate has been ~1/118, which\n> results in a minimum fee of:\n> \n> f > 0.00162XBT/kb or 0.00037XBT/txn\n> \n> So a small improvement but not statistically important...\n> \n> Last question, recalling that optimal revenue block size is a function\n> of the txn-fee (from the last writeup) - lets see what fee it takes to\n> support a block size of 131kBytes:\n> \n> S = 1/2 * (t_block/alpha - E_bounty/f)\n> \n> S = 1/2 * (S/P_fork - E_bounty/f)\n> \n> f = E_bounty/[(1/P_fork-2)*S] = 0.00165XBT/kB\n> \n> So a 4 times increase is still sufficient for the current load.\n> \n> Anyway - the all important number is alpha, the network latency which we\n> expect to be dependent of various things such as interconnectivity,\n> bandwidths, software quality etc, where mainly the latter is within our\n> hands to bring down the fee. And you can actually setup the standard\n> client to choose a better fee, as all the parameters in the formula are\n> easily measured!\n> \n> ------------------------------------------------------------------------------\n> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> Free app hosting. Or install the open source package on any LAMP server.\n> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-15T10:46:54",
                "message_text_only": "On Wed, Nov 13, 2013 at 01:34:07PM +0100, Michael Gronager wrote:\n> Just a quick comment on the actual fees (checked at blockchain.info) the\n> average fee over the last 90 days is actually ~0.0003BTC/txn - so not\n> too far behind the theoretical minimum of 0.00037BTC/txn.\n\nHow did you get those numbers exactly?\n\nAlso fee per txn is *not* useful and we really shouldn't quote it so\nthat newbies reading this stuff get the right understanding.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000075ed91531e07d2045b5823da050fe373bde7bb363965e44ae\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/68ff333f/attachment.sig>"
            },
            {
                "author": "John Dillon",
                "date": "2013-11-13T20:01:27",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n> Last week I posted a writeup: \"On the optimal block size and why\n> transaction fees are 8 times too low (or transactions 8 times too big)\".\n>\n> Peter Todd made some nice additions to it including different pool sizes\n> into the numbers.\n\nPeter claims on IRC that he is writing a paper of some kind on this topic. I\nsuggest he submit it to that crypto-currency thing the foundation is\nsponsoring. Given the Nov 24th deadline, I also suggest at least making part of\nit public ASAP so some peer review can be done. It would be a shame for a\nsimple math error to cause embarassment later.\n\n\n> However, it occurred to me that things can in fact be calculated even\n> simpler: The measured fork rate will mean out all the different pool\n> sizes and network latencies and will as such provide a simple number we\n> can use to estimate the minimum fee.\n\nAre you sure about that? You are assuming linearity where none may exist.\n\n\n> Luckily the fork frequency and the average block size are easily\n> measurable. blockchain.info keeps historical graphs of number of\n> orphaned blocks pr day\n\nAre those stats accurate? Have any pool operators at least confirmed that the\norphaned blocks that blockchain.info reports match their own records?\n\nMy gut feeling is to relay all orphaned blocks. We know that with a high\ninvestment and sybil attack as blockchain.info has done you can have better\nawareness of orphaned blocks than someone without those resources. If having\nthat awareness is ever a profitable thing we have both created an incentive to\nsybil attack the network and we have linked profitability to high up-front\ncapital investments.\n\nOn those grounds alone I will argue that we should relay all orphans to even\nthe playing field. If there is a circumstance where we do not want the attacker\nto have that knowledge we have failed anyway, as blockchain.info's sybil attack\non the network clearly shows.\n\n\n> Anyway - the all important number is alpha, the network latency which we\n> expect to be dependent of various things such as interconnectivity,\n> bandwidths, software quality etc, where mainly the latter is within our\n> hands to bring down the fee. And you can actually setup the standard\n> client to choose a better fee, as all the parameters in the formula are\n> easily measured!\n\nWith relayed orphans you could even have P2Pool enforce an optimal tx inclusion\npolicy based on a statistical model by including proof of those orphans into\nthe P2Pool share chain. P2Pool needs to take fees into account soon, but simply\nasking for blocks with the highest total fees or even highest fee/kb appears to\nbe incomplete according to what your and Peter's analysis is suggesting.\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQEcBAEBCAAGBQJSg9pfAAoJEEWCsU4mNhiP5mcH/jKd2Rpl9gEJ7WhTndS5gYJ9\nEp151NyD/iKpAA4E/d9QVYalo8595LCqnrXnV6wuvuiifB6EJD5WBJq3MAMyaJLA\nagl920ygY98slhDmFhnwlU9lkJVim5FoUkZgE7lQ5dr0MIhvoLQiF2Ywky49Izf0\nIqL+nyW83AQweSalvktA+XGkDfGDV/EnJN7SdNqKDNtE7E9NeMl61NNOWNndsYy6\nuT4PF2YB7rh8wGyHXMTC4Z192pfW4S4s60ZAflG/sTtWCcEwWi+5V/RIu0o5Hmog\nRFpEPvc6d6ykdqtPfTRADMGkT2wC1yXsgeos9oFFVVuVSj8EqHb2db0B+psHRBk=\n=76Qs\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Michael Gronager",
                "date": "2013-11-13T20:32:59",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nHi John,\n\nThanks for the feedback - comments below:\n\n>> However, it occurred to me that things can in fact be calculated even\n>> simpler: The measured fork rate will mean out all the different pool\n>> sizes and network latencies and will as such provide a simple number we\n>> can use to estimate the minimum fee.\n> \n> Are you sure about that? You are assuming linearity where none may exist.\n\nWell, my work from last week and now is a model. A model enabling you to\neasily calculate the minimum fee and as a miner which transaction to\ninclude to not shoot yourselves in the foot risking to create an\norphaned block.\n\nThe assumption that there is a linearity between block size and latency\nis shown pretty well in the paper by Decker et. al (see last weeks\npost). What I add this week is mainly more up to date numbers and a\nformula dependent only of data that is easy to measure. (fork rate and\nblock size).\n\n> \n> Are those stats accurate? Have any pool operators at least confirmed that the\n> orphaned blocks that blockchain.info reports match their own records?\n\nProbably not - but the are at least a minimum - in case they are higher,\nthe fee should go up further.\n\n> \n> My gut feeling is to relay all orphaned blocks. We know that with a high\n> investment and sybil attack as blockchain.info has done you can have better\n> awareness of orphaned blocks than someone without those resources. If having\n> that awareness is ever a profitable thing we have both created an incentive to\n> sybil attack the network and we have linked profitability to high up-front\n> capital investments.\n\nAnother way to measure latency is to setup a node that only listens but\ndo not relay data. By measuring the propagation of blocks of different\nsize as well as transactions, you can get a propagation distribution and\nfrom that an average. However, the relevant propagation time is the one\nbetween the pools/(single miners). Which you cannot assess using this\nscheme - however, it would be nice to compare it to the orphan block scheme.\n\n> \n> With relayed orphans you could even have P2Pool enforce an optimal tx inclusion\n> policy based on a statistical model by including proof of those orphans into\n> the P2Pool share chain. P2Pool needs to take fees into account soon, but simply\n> asking for blocks with the highest total fees or even highest fee/kb appears to\n> be incomplete according to what your and Peter's analysis is suggesting.\n\nIndeed, and nice... But note that it is never of benefit for the miner\nto include a transaction with a fee of less than ~0.0004BTC - unless it\nis linked to another transaction that pay an extra fee.\n\nThere have been a lot of assumptions on the fee size and generally it\nhas been linked to the bitcoin exchange rate. This analysis shows that\nthis is wrong. Also it shows that the scalability of bitcoin is directly\nlinked to the network and node latency (with the current latency it will\nnever beneficial for miners to include more than ~30k transactions in a\nblock or ~70 pr second resulting in ~10MB blocks).\nHowever, halving the latency will double the capacity, down to the\nminimum which is governed by the speed of light.\n\n> \n> \n> ------------------------------------------------------------------------------\n> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> Free app hosting. Or install the open source package on any LAMP server.\n> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.22 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJSg+H7AAoJEKpww0VFxdGRn+gIAIgju90DED5r//USqKvkQsYI\nJDj0tLBLMg9BPXOOt3eJ+NX4YE4lW+QkwqDd/swuJxLmj0l9BQKgt1lTb/f0P/cY\nGdE14gh5EYlvNzY1h0TGKcMe8NTWXU0/tC+Clpy4sqBHPXW/eF/77sLQUnFRrLKi\nsT48aHOOFUdBLdlyylUzzevh/FFVLidkKqV031tv52+BFHcTFd4kRPwZXgBSs9YH\nU66MkJ4ytAqeOfJue9n7Qn4kJF9kNIhRpqTrtapqu8jglLfuYlJ3s5fwaw9FxQdR\n+On4IWeXzURQ6tcVRCovCq/2lxRKIbYGlW7HGVASjRmm68/+8YUAfFsYFl6DIgA=\n=9tbL\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-15T09:54:13",
                "message_text_only": "On Wed, Nov 13, 2013 at 08:01:27PM +0000, John Dillon wrote:\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n> \n> > Last week I posted a writeup: \"On the optimal block size and why\n> > transaction fees are 8 times too low (or transactions 8 times too big)\".\n> >\n> > Peter Todd made some nice additions to it including different pool sizes\n> > into the numbers.\n> \n> Peter claims on IRC that he is writing a paper of some kind on this topic. I\n> suggest he submit it to that crypto-currency thing the foundation is\n> sponsoring. Given the Nov 24th deadline, I also suggest at least making part of\n> it public ASAP so some peer review can be done. It would be a shame for a\n> simple math error to cause embarassment later.\n\nHere's what I've got to date. The first two sections is just a\nrelatively simple proof that mining is more profitable as centralization\nincreases under any circumstance, even before any real-world factors are\ntaken into account. (other than non-zero latency and bandwidth) Nice\nhomework problem, and neat that you can easily get a solid proof, but\nacademic because it doesn't say anything about the magnitude of the\nincentives.\n\nThe latter part is the actual derivation with proper model of\nsupply-and-demand for fees. Or will be: while you can of course solve\nthe equations with mathematica or similar - getting a horrid mess - I'm\nstill trying to see if I can simplify them sanely in a way that's\nstep-by-step understandable. Taking me longer than I'd like; sobering to\nrealize how rusty I am. That said if any you do just throw it at\nMathematica, looks like you get a result where the slope of your\nexpected block return is at least quadratic with increasing hashing\npower. (though I spent all of five minutes eyeballing that result)\n\n\n\\documentclass{article}\n\\usepackage{url}\n\\usepackage{mathtools}\n\\begin{document}\n\\title{Expected Return}\n\\author{Peter Todd}\n\\date{FIXME}\n\\maketitle\n\n\\section{Expected return of a block}\n\\label{sec:exp-return-of-a-block}\n\nLet $f(L)$, a continuous function,\\footnote{Transactions do of course give a\ndiscontinuous $f$. For a large $L$ the approximation error is negligible.} be\nthe fee-per-byte available to a rational miner for the last transaction\nincluded in a block of size $L$. $f(L)$ is a continuous function defined for $L\n\\ge 0$. Supply and demand dictates that:\n\n\\begin{equation}\n    f(L) \\ge f(L+\\epsilon) \\label{eq:f-increases}\n\\end{equation}\n\nA reasonable example for $f$ might be $f(L) = kL$, representing the demand side\nof a linear supply and demand plot. For a block of size $L$ that is optimally\nfilled with transactions the value of those fees is just the integral:\n\n\\begin{equation}\n    E_f(L) = \\int_0^L f(l)\\,dl\n\\end{equation}\n\nLet $P(Q,L)$, a continuous function, be the probability that a block of size\n$L$ produced by a miner with relative hashing power $Q$ will be orphaned.\nBecause a miner will never orphan their own blocks the following holds true:\n\n\\begin{equation}\n    P(Q,L) \\le P(Q + \\epsilon,L) \\label{eq:p-increases}\n\\end{equation}\n\nSimilarly because larger blocks take longer to propagate and thus risk getting\norphaned by another miner finding a block at the same time:\n\n\\begin{equation}\n    P(Q,L) \\ge P(Q,L + \\epsilon)\n\\end{equation}\n\nBy combining $P(Q, L)$, $E_f(L)$ and the inflation subsidy $B$, gives us the\nexpected return of a block for a given size and hashing power:\\footnote{Note\nhow real world marginal costs can be accommodated easily in the definitions of\n$f$ and $B$.}\n\n\\begin{equation}\n    E(Q,L) = P(Q,L)[E_f(L) + B]\n\\end{equation}\n\nThe optimal size is simply the size $L$ at which $E(Q, L)$ no longer increases:\n\n\\begin{equation}\n    \\frac{d}{dL}\\big[E(Q, L(Q))\\big] = 0\n\\end{equation}\n\nWe will define the function $L(Q)$ as the optimal value for a given $Q$. A\nminer creating optimal blocks will thus have an expected return per block found\nof $E'(Q)=E(Q,L(Q))$. Note how this definition is per unit hashing power by\nvirtue of being per block found.\n\n\n\\section{Optimal return $E'$ vs. hashing power $Q$}\n\nWe want to know if a large miner has a larger return for a given amount of\nhashing power. We do this by taking the derivative with respect to $Q$ of the\nexpected return given optimal strategy:\n\n\\begin{align*}\n    \\frac{d}{dQ}\\big[E'(Q)\\big] &= \\frac{d}{dQ}\\big[P(Q,L(Q))\\big]\\big[E_f(L(Q)) + B\\big] + P(Q,L(Q))\\frac{d}{dQ}\\big[E_f(L(Q))\\big] \\\\\n                                &= \\frac{dL(Q)}{dQ}\\Big[\\frac{dP(Q,L(Q))}{dQ}\\big[E_f(L(Q)) + B\\big] + P(Q,L)\\frac{dE_f(L(Q))}{dQ}\\Big]\n\\end{align*}\n\nWe know that $L(Q)$, $E_f$, $P$, and $B$ are all $\\ge 0$. Thus for $dE'/dQ$ to\nbe negative requires either $dL/dQ$ to be negative, or for $dL/dQ$ to be\npositive and one of $dP/dQ$ or $dE_f/dQ$ negative.\n\nSuppose $dP/dQ$ negative and $dL/dQ$ positive:\n\n\\begin{align}\n    \\frac{dL(Q)}{dQ} > 0    &\\implies L(Q + \\epsilon) > L(Q) \\notag \\\\\n    \\frac{dP(L(Q))}{dQ} < 0 &\\implies P(Q + \\epsilon, L(Q + \\epsilon)) < P(Q, L(Q)) \\label{eq:dl-pos-dp-neg}\n\\end{align}\n\nBut that contradicts our definition \\eqref{eq:p-increases} of $P$ as continuous\nand increasing. Suppose instead that $dE_f/dQ$ is negative and $dL/dQ$\npositive:\n\n\\begin{align}\n    \\frac{dL(Q)}{dQ} > 0      &\\implies L(Q) < L(Q + \\epsilon) \\notag \\\\\n    \\frac{dE_f(L(Q))}{dL} < 0 &\\implies E_f(L(Q)) > E_f(L(Q + \\epsilon)) \\notag \\\\\n                              &\\implies \\int_0^{L(Q)} f(l)\\,dl > \\int_0^{L(Q+\\epsilon)} f(l)\\,dl \\notag \\\\\n                              &\\implies f(l) < 0 \\label{eq:dl-pos-de-neg}\n\\end{align}\n\nAgain we have a contradiction with our definition \\eqref{eq:f-increases} of\n$f$. Finally suppose $dL/dQ$ is negative:\n\n\\begin{align}\n    \\frac{dL(Q)}{dQ} < 0 &\\implies L(Q) > L(Q + \\epsilon) \\notag \\\\\n                         &\\implies P(Q + \\epsilon, L(Q + \\epsilon)) < P(Q, L(Q)) \\notag \\\\\n                         &\\implies \\frac{dP(Q, L(Q))}{dQ} < 0 \\notag \\\\\n                         &\\implies \\frac{dL(Q)}{dQ}\\frac{dP(Q, L(Q))}{dQ} > 0 \\label{eq:dl-neg-dp-neg} \\\\\n                         &\\implies E_f(L(Q + \\epsilon)) < E_f(L(Q)) \\implies \\frac{dE_f(L(Q))}{dQ} < 0 \\notag \\\\\n                         &\\implies \\frac{dL(Q)}{dQ}\\frac{dE_f(L(Q))}{dQ} > 0 \\label{eq:dl-neg-de-neg}\n\\end{align}\n\nEven if $dL/dQ$ is negative \\eqref{eq:dl-neg-dp-neg} and\n\\eqref{eq:dl-neg-de-neg} show that $dE'/dQ > 0$. In conjunction with\n\\eqref{eq:dl-pos-dp-neg} and \\eqref{eq:dl-pos-de-neg} we prove that increased\nhashing power always leads to increased return on investment per unit hashing\npower.\n\n\n\\subsection{Real-world implications to centralization}\n\nWhile the author has shown that they still remember first-year, is this result\nrelevant?\n\nThe proof holds regardless of what any of the functions actually are, provided\nthat they meet the requirements set out in section\n\\ref{sec:exp-return-of-a-block}. The requirements are met by any reasonable\nreal-world scenario\\footnote{Negative fees are not reasonable!}, and show an\nincentive for mining to centralize even in an ideal situation where all miners\nare on a level playing field and have no fixed costs.\n\nHowever the proof is abstract, and doesn't tell us anything about how strong\nthat pressure is; it may be insignificant enough to be outweighed by effects\nsuch as social pressure.\n\nWe need to investigate $dE'/dQ$ in detail.\n\n\n\\section{Detailed derivation of of $P(Q,L)$}\n\n\\subsection{Assumptions}\n\nThe difficulty is assumed to be in a steady state condition and the\npercentage of hashing power for any given miner is fixed. Unconfirmed\ntransactions are assumed to be known to all miners, giving everyone an\nequal opportunity of mining any given transaction.\n\nWe assume that the graph of all Bitcoin miners is fully connected and\nthat the bandwidth, $1/k$, and latency, $t_0$, is identical for all\nconnections and unchanging. We assume that miners always attempt to\nbuild upon the first block they see on the longest chain known to them,\nand when they find a block, they always broadcast it to all other miners\nsimultaneously. From that we see that the time taken for a block of size\n$L$ to propagate to $100\\%$ of the hashing power is simply:\n\n\\begin{equation}\n    t(L) = t_0 + kL\n\\end{equation}\n\n\n\\subsection{Analysis}\n\nWhen miner $Q$ finds a block during the condition of full consensus the\noutcomes can be described by the following state tree.  The numbers in brackets\nare the \"scorecard\" of blocks found by $Q$ and all other miners should a given\nstate be reached:\n\n\\begin{description}\n\n    \\item[1)] No other block is found prior to full propagation. (1:0)\n\n    \\item[2)] $Q$ finds another block prior to full propagation. (2:0)\n    \\begin{description}\n        \\item[2.1)] $Q$'s second block is not orphaned. (2:0)\n        \\item[2.2)] $Q$'s second block is orphaned. (2:3)\n    \\end{description}\n\n    \\item[3)] $(1-Q)$ finds another block prior to full propagation. (1:1)\n    \\begin{description}\n        \\item[3.1)] $(1-Q)$'s block is orphaned. (2:1)\n        \\item[3.2)] $(1-Q)$'s block is not orphaned. (1:2)\n    \\end{description}\n\\end{description}\n\nMiner $Q$ wins if states $1$, $2.1$, or $3.1$ are reached. Though it is\npossible to derive an equation for $P$ that accurately models possible states -\nthe author did exactly that in a fit of madness - the resulting equation is\nunwieldly and offers no additional insight.\n\nWe want to end up with a $dE'/dQ$ that captures second order effects. Since\n$L(Q)$ and thus $E'(Q)$ will depend on $Q$ our approximation of $P$ should be\nsuch that $dP/dQ$ is at least linear.\n\nWith $\\lambda$ as the block interval the probabilities of reaching states $1$,\n$2$, and $3$ are as follows:\n\\begin{align}\n    p_1 &= 1 - \\frac{t}{\\lambda} \\\\\n    p_2 &= \\frac{t}{\\lambda} Q \\\\\n    p_3 &= \\frac{t}{\\lambda} (1-Q)\n\\end{align}\n\nWe could assume that states $2$ and $3$ both lead to the block being orphaned,\nthus giving us:\n\\begin{equation}\n    P(Q, L) = 1 - \\frac{t}{\\lambda} = 1 - \\frac{t_o + kL}{\\lambda}\n\\end{equation}\n\nHowever this gives us a linear $E(Q, L)$, linear $L(Q)$, and thus only a\nquadratic $E'(Q)$. We need at least one more state in our model; state $2.1$ is\na good choice. Reaching state $2.2$ is exceptionally improbable - the miners\n$(1-Q)$ have to find three blocks in time $t$ - so ignoring state $2.2$ and\nthus using the probability for state $2$ instead has negligible impact on the\nmodel. Meanwhile state $3$ requires that state $3.1$ be used directly and would\nresult in a third-order terms in $P$ when treating state $3$ as an always loss\nis a conservative lower-bound.\n\nThis gives us:\n\\begin{align}\n    P(Q, L) &= p_1 + p_2 = 1 - \\frac{t}{\\lambda} + \\frac{t}{\\lambda} Q = 1 - (1-Q)\\frac{t}{\\lambda} \\notag \\\\\n            &= 1 - (1-Q)\\frac{t_o + kL}{\\lambda}\n\\end{align}\n\n\n\\subsection{Detailed derivation of E'(Q)}\n\nSome preliminaries:\n\n\\begin{align}\n    \\frac{dP(Q,L)}{dL} &= -(1-Q)\\frac{k}{\\lambda} \\\\\n    \\notag\\\\\n    \\frac{dE(Q,L)}{dL} &= \\frac{dP(Q,L)}{dL}\\big[E_f(L) + B\\big] + P(Q,L)\\frac{dE_f(L)}{dL} \\notag\\\\\n                       &= \\frac{dP(Q,L)}{dL}\\big[E_f(L) + B\\big] + P(Q,L)\\,f(L)\n\\end{align}\n\nWe're not going to get very far without a definition for $f$ so we'll use a\nsimple linear demand model:\n\n\\begin{align}\n    f(L) &= a - bL \\\\\n    E_f(L) &= aL - \\frac{1}{2}bL^2\n\\end{align}\n\nNow we set $dE/dL=0$ and solve for $L$. To simplify the problem we will consider the no-subsidy, $B=0$ case:\n\n\\begin{align}\n    0 &= \\frac{dP(Q,L)}{dL}E_f(L) + P(Q,L)\\,f(L) \\\\\n      &= -(1-Q)\\frac{k}{\\lambda}\\big[aL - \\frac{1}{2}bL^2] + \\big[1 - (1-Q)\\frac{t_o + kL}{\\lambda}\\big](a - bL) \\\\\n\\end{align}\n\n\n\\end{document}\n\n> > Luckily the fork frequency and the average block size are easily\n> > measurable. blockchain.info keeps historical graphs of number of\n> > orphaned blocks pr day\n> \n> Are those stats accurate? Have any pool operators at least confirmed that the\n> orphaned blocks that blockchain.info reports match their own records?\n> \n> My gut feeling is to relay all orphaned blocks. We know that with a high\n> investment and sybil attack as blockchain.info has done you can have better\n> awareness of orphaned blocks than someone without those resources. If having\n> that awareness is ever a profitable thing we have both created an incentive to\n> sybil attack the network and we have linked profitability to high up-front\n> capital investments.\n> \n> On those grounds alone I will argue that we should relay all orphans to even\n> the playing field. If there is a circumstance where we do not want the attacker\n> to have that knowledge we have failed anyway, as blockchain.info's sybil attack\n> on the network clearly shows.\n\nAgreed.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000004fe7b45f3bbc4c7edbd9ff86c963fe77282453e1b38f66503\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/38ed190c/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-11-15T09:59:44",
                "message_text_only": "On Fri, Nov 15, 2013 at 1:54 AM, Peter Todd <pete at petertodd.org> wrote:\n> \\documentclass{article}\n\nLaTeX moon language to PDF moon language conversion:\n\nhttps://people.xiph.org/~greg/peter_todd_mining_ev.pdf"
            },
            {
                "author": "Michael Gronager",
                "date": "2013-11-15T10:47:53",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nHi Peter,\n\nLove to see things put into formulas - nice work!\n\nFully agree on the your fist section: As latency determines maximum\nblock earnings, define a 0-latency (big-miner never orphans his own\nblocks) island and growing that will of course result in increased earnings.\n\nSo build your own huge mining data center and you rock.\n\nHowever, that is hardly the real work scenario today. Instead we have\npools (Huge pools). It would be interesting to do the calculation:\n\n\tQ = Total pool size (fraction of all mining power)\n\tq = My mining power (do.)\n\te = fraction of block fee that pool reserves\n\nIt is pretty obvious that given your formulas small miners are better\noff in a pool (can't survive as solo miners), but there will be a\nthreshold q_min above which you are actually better off on you own -\ndepending also on e. (excluding here all benefits of a stable revenue\nstream provided by pools)\n\nNext interesting calculation would be bitcoin rate as a function of pool\nsize, I expect a sharp dip somewhere in the 40%s of hardware controlled\nby one entity ;)\n\nFinally, as you mention yourselves, qualification of the various\nfunctions is needed. This could e.g. suggest if we are like to get 3 or\n10 miners on the long run.\n\nAnd now for section 2. You insert a definition of f(L) = a-bL. I think\nthe whole idea of letting f depend on L is superfluous. As a miner you\nare always free to choose which transactions to include. You will always\nchoose those with the biggest fee, so really it is only the average fee\nthat is relevant: f(L) = c. Any dependence in L will be removed by the\nreshuffeling. To include an extra transaction will require either that\nit has a fee larger than another (kicking that out out) or that it has a\nfee so large that it covers for the other transaction too. Also recall\nthat there is a logical minimum fee (as I have already shown), and a\nmaximum optimal block size - that is until the bounty becomes 0 (which\nis where other effects kick in).\n\n> Here's what I've got to date. The first two sections is just a\n> relatively simple proof that mining is more profitable as centralization\n> increases under any circumstance, even before any real-world factors are\n> taken into account. (other than non-zero latency and bandwidth) Nice\n> homework problem, and neat that you can easily get a solid proof, but\n> academic because it doesn't say anything about the magnitude of the\n> incentives.\n> \n> The latter part is the actual derivation with proper model of\n> supply-and-demand for fees. Or will be: while you can of course solve\n> the equations with mathematica or similar - getting a horrid mess - I'm\n> still trying to see if I can simplify them sanely in a way that's\n> step-by-step understandable. Taking me longer than I'd like; sobering to\n> realize how rusty I am. That said if any you do just throw it at\n> Mathematica, looks like you get a result where the slope of your\n> expected block return is at least quadratic with increasing hashing\n> power. (though I spent all of five minutes eyeballing that result)\n> \n> \n> \\documentclass{article}\n> \\usepackage{url}\n> \\usepackage{mathtools}\n> \\begin{document}\n> \\title{Expected Return}\n> \\author{Peter Todd}\n> \\date{FIXME}\n> \\maketitle\n> \n> \\section{Expected return of a block}\n> \\label{sec:exp-return-of-a-block}\n> \n> Let $f(L)$, a continuous function,\\footnote{Transactions do of course give a\n> discontinuous $f$. For a large $L$ the approximation error is negligible.} be\n> the fee-per-byte available to a rational miner for the last transaction\n> included in a block of size $L$. $f(L)$ is a continuous function defined for $L\n> \\ge 0$. Supply and demand dictates that:\n> \n> \\begin{equation}\n>     f(L) \\ge f(L+\\epsilon) \\label{eq:f-increases}\n> \\end{equation}\n> \n> A reasonable example for $f$ might be $f(L) = kL$, representing the demand side\n> of a linear supply and demand plot. For a block of size $L$ that is optimally\n> filled with transactions the value of those fees is just the integral:\n> \n> \\begin{equation}\n>     E_f(L) = \\int_0^L f(l)\\,dl\n> \\end{equation}\n> \n> Let $P(Q,L)$, a continuous function, be the probability that a block of size\n> $L$ produced by a miner with relative hashing power $Q$ will be orphaned.\n> Because a miner will never orphan their own blocks the following holds true:\n> \n> \\begin{equation}\n>     P(Q,L) \\le P(Q + \\epsilon,L) \\label{eq:p-increases}\n> \\end{equation}\n> \n> Similarly because larger blocks take longer to propagate and thus risk getting\n> orphaned by another miner finding a block at the same time:\n> \n> \\begin{equation}\n>     P(Q,L) \\ge P(Q,L + \\epsilon)\n> \\end{equation}\n> \n> By combining $P(Q, L)$, $E_f(L)$ and the inflation subsidy $B$, gives us the\n> expected return of a block for a given size and hashing power:\\footnote{Note\n> how real world marginal costs can be accommodated easily in the definitions of\n> $f$ and $B$.}\n> \n> \\begin{equation}\n>     E(Q,L) = P(Q,L)[E_f(L) + B]\n> \\end{equation}\n> \n> The optimal size is simply the size $L$ at which $E(Q, L)$ no longer increases:\n> \n> \\begin{equation}\n>     \\frac{d}{dL}\\big[E(Q, L(Q))\\big] = 0\n> \\end{equation}\n> \n> We will define the function $L(Q)$ as the optimal value for a given $Q$. A\n> miner creating optimal blocks will thus have an expected return per block found\n> of $E'(Q)=E(Q,L(Q))$. Note how this definition is per unit hashing power by\n> virtue of being per block found.\n> \n> \n> \\section{Optimal return $E'$ vs. hashing power $Q$}\n> \n> We want to know if a large miner has a larger return for a given amount of\n> hashing power. We do this by taking the derivative with respect to $Q$ of the\n> expected return given optimal strategy:\n> \n> \\begin{align*}\n>     \\frac{d}{dQ}\\big[E'(Q)\\big] &= \\frac{d}{dQ}\\big[P(Q,L(Q))\\big]\\big[E_f(L(Q)) + B\\big] + P(Q,L(Q))\\frac{d}{dQ}\\big[E_f(L(Q))\\big] \\\\\n>                                 &= \\frac{dL(Q)}{dQ}\\Big[\\frac{dP(Q,L(Q))}{dQ}\\big[E_f(L(Q)) + B\\big] + P(Q,L)\\frac{dE_f(L(Q))}{dQ}\\Big]\n> \\end{align*}\n> \n> We know that $L(Q)$, $E_f$, $P$, and $B$ are all $\\ge 0$. Thus for $dE'/dQ$ to\n> be negative requires either $dL/dQ$ to be negative, or for $dL/dQ$ to be\n> positive and one of $dP/dQ$ or $dE_f/dQ$ negative.\n> \n> Suppose $dP/dQ$ negative and $dL/dQ$ positive:\n> \n> \\begin{align}\n>     \\frac{dL(Q)}{dQ} > 0    &\\implies L(Q + \\epsilon) > L(Q) \\notag \\\\\n>     \\frac{dP(L(Q))}{dQ} < 0 &\\implies P(Q + \\epsilon, L(Q + \\epsilon)) < P(Q, L(Q)) \\label{eq:dl-pos-dp-neg}\n> \\end{align}\n> \n> But that contradicts our definition \\eqref{eq:p-increases} of $P$ as continuous\n> and increasing. Suppose instead that $dE_f/dQ$ is negative and $dL/dQ$\n> positive:\n> \n> \\begin{align}\n>     \\frac{dL(Q)}{dQ} > 0      &\\implies L(Q) < L(Q + \\epsilon) \\notag \\\\\n>     \\frac{dE_f(L(Q))}{dL} < 0 &\\implies E_f(L(Q)) > E_f(L(Q + \\epsilon)) \\notag \\\\\n>                               &\\implies \\int_0^{L(Q)} f(l)\\,dl > \\int_0^{L(Q+\\epsilon)} f(l)\\,dl \\notag \\\\\n>                               &\\implies f(l) < 0 \\label{eq:dl-pos-de-neg}\n> \\end{align}\n> \n> Again we have a contradiction with our definition \\eqref{eq:f-increases} of\n> $f$. Finally suppose $dL/dQ$ is negative:\n> \n> \\begin{align}\n>     \\frac{dL(Q)}{dQ} < 0 &\\implies L(Q) > L(Q + \\epsilon) \\notag \\\\\n>                          &\\implies P(Q + \\epsilon, L(Q + \\epsilon)) < P(Q, L(Q)) \\notag \\\\\n>                          &\\implies \\frac{dP(Q, L(Q))}{dQ} < 0 \\notag \\\\\n>                          &\\implies \\frac{dL(Q)}{dQ}\\frac{dP(Q, L(Q))}{dQ} > 0 \\label{eq:dl-neg-dp-neg} \\\\\n>                          &\\implies E_f(L(Q + \\epsilon)) < E_f(L(Q)) \\implies \\frac{dE_f(L(Q))}{dQ} < 0 \\notag \\\\\n>                          &\\implies \\frac{dL(Q)}{dQ}\\frac{dE_f(L(Q))}{dQ} > 0 \\label{eq:dl-neg-de-neg}\n> \\end{align}\n> \n> Even if $dL/dQ$ is negative \\eqref{eq:dl-neg-dp-neg} and\n> \\eqref{eq:dl-neg-de-neg} show that $dE'/dQ > 0$. In conjunction with\n> \\eqref{eq:dl-pos-dp-neg} and \\eqref{eq:dl-pos-de-neg} we prove that increased\n> hashing power always leads to increased return on investment per unit hashing\n> power.\n> \n> \n> \\subsection{Real-world implications to centralization}\n> \n> While the author has shown that they still remember first-year, is this result\n> relevant?\n> \n> The proof holds regardless of what any of the functions actually are, provided\n> that they meet the requirements set out in section\n> \\ref{sec:exp-return-of-a-block}. The requirements are met by any reasonable\n> real-world scenario\\footnote{Negative fees are not reasonable!}, and show an\n> incentive for mining to centralize even in an ideal situation where all miners\n> are on a level playing field and have no fixed costs.\n> \n> However the proof is abstract, and doesn't tell us anything about how strong\n> that pressure is; it may be insignificant enough to be outweighed by effects\n> such as social pressure.\n> \n> We need to investigate $dE'/dQ$ in detail.\n> \n> \n> \\section{Detailed derivation of of $P(Q,L)$}\n> \n> \\subsection{Assumptions}\n> \n> The difficulty is assumed to be in a steady state condition and the\n> percentage of hashing power for any given miner is fixed. Unconfirmed\n> transactions are assumed to be known to all miners, giving everyone an\n> equal opportunity of mining any given transaction.\n> \n> We assume that the graph of all Bitcoin miners is fully connected and\n> that the bandwidth, $1/k$, and latency, $t_0$, is identical for all\n> connections and unchanging. We assume that miners always attempt to\n> build upon the first block they see on the longest chain known to them,\n> and when they find a block, they always broadcast it to all other miners\n> simultaneously. From that we see that the time taken for a block of size\n> $L$ to propagate to $100\\%$ of the hashing power is simply:\n> \n> \\begin{equation}\n>     t(L) = t_0 + kL\n> \\end{equation}\n> \n> \n> \\subsection{Analysis}\n> \n> When miner $Q$ finds a block during the condition of full consensus the\n> outcomes can be described by the following state tree.  The numbers in brackets\n> are the \"scorecard\" of blocks found by $Q$ and all other miners should a given\n> state be reached:\n> \n> \\begin{description}\n> \n>     \\item[1)] No other block is found prior to full propagation. (1:0)\n> \n>     \\item[2)] $Q$ finds another block prior to full propagation. (2:0)\n>     \\begin{description}\n>         \\item[2.1)] $Q$'s second block is not orphaned. (2:0)\n>         \\item[2.2)] $Q$'s second block is orphaned. (2:3)\n>     \\end{description}\n> \n>     \\item[3)] $(1-Q)$ finds another block prior to full propagation. (1:1)\n>     \\begin{description}\n>         \\item[3.1)] $(1-Q)$'s block is orphaned. (2:1)\n>         \\item[3.2)] $(1-Q)$'s block is not orphaned. (1:2)\n>     \\end{description}\n> \\end{description}\n> \n> Miner $Q$ wins if states $1$, $2.1$, or $3.1$ are reached. Though it is\n> possible to derive an equation for $P$ that accurately models possible states -\n> the author did exactly that in a fit of madness - the resulting equation is\n> unwieldly and offers no additional insight.\n> \n> We want to end up with a $dE'/dQ$ that captures second order effects. Since\n> $L(Q)$ and thus $E'(Q)$ will depend on $Q$ our approximation of $P$ should be\n> such that $dP/dQ$ is at least linear.\n> \n> With $\\lambda$ as the block interval the probabilities of reaching states $1$,\n> $2$, and $3$ are as follows:\n> \\begin{align}\n>     p_1 &= 1 - \\frac{t}{\\lambda} \\\\\n>     p_2 &= \\frac{t}{\\lambda} Q \\\\\n>     p_3 &= \\frac{t}{\\lambda} (1-Q)\n> \\end{align}\n> \n> We could assume that states $2$ and $3$ both lead to the block being orphaned,\n> thus giving us:\n> \\begin{equation}\n>     P(Q, L) = 1 - \\frac{t}{\\lambda} = 1 - \\frac{t_o + kL}{\\lambda}\n> \\end{equation}\n> \n> However this gives us a linear $E(Q, L)$, linear $L(Q)$, and thus only a\n> quadratic $E'(Q)$. We need at least one more state in our model; state $2.1$ is\n> a good choice. Reaching state $2.2$ is exceptionally improbable - the miners\n> $(1-Q)$ have to find three blocks in time $t$ - so ignoring state $2.2$ and\n> thus using the probability for state $2$ instead has negligible impact on the\n> model. Meanwhile state $3$ requires that state $3.1$ be used directly and would\n> result in a third-order terms in $P$ when treating state $3$ as an always loss\n> is a conservative lower-bound.\n> \n> This gives us:\n> \\begin{align}\n>     P(Q, L) &= p_1 + p_2 = 1 - \\frac{t}{\\lambda} + \\frac{t}{\\lambda} Q = 1 - (1-Q)\\frac{t}{\\lambda} \\notag \\\\\n>             &= 1 - (1-Q)\\frac{t_o + kL}{\\lambda}\n> \\end{align}\n> \n> \n> \\subsection{Detailed derivation of E'(Q)}\n> \n> Some preliminaries:\n> \n> \\begin{align}\n>     \\frac{dP(Q,L)}{dL} &= -(1-Q)\\frac{k}{\\lambda} \\\\\n>     \\notag\\\\\n>     \\frac{dE(Q,L)}{dL} &= \\frac{dP(Q,L)}{dL}\\big[E_f(L) + B\\big] + P(Q,L)\\frac{dE_f(L)}{dL} \\notag\\\\\n>                        &= \\frac{dP(Q,L)}{dL}\\big[E_f(L) + B\\big] + P(Q,L)\\,f(L)\n> \\end{align}\n> \n> We're not going to get very far without a definition for $f$ so we'll use a\n> simple linear demand model:\n> \n> \\begin{align}\n>     f(L) &= a - bL \\\\\n>     E_f(L) &= aL - \\frac{1}{2}bL^2\n> \\end{align}\n> \n> Now we set $dE/dL=0$ and solve for $L$. To simplify the problem we will consider the no-subsidy, $B=0$ case:\n> \n> \\begin{align}\n>     0 &= \\frac{dP(Q,L)}{dL}E_f(L) + P(Q,L)\\,f(L) \\\\\n>       &= -(1-Q)\\frac{k}{\\lambda}\\big[aL - \\frac{1}{2}bL^2] + \\big[1 - (1-Q)\\frac{t_o + kL}{\\lambda}\\big](a - bL) \\\\\n> \\end{align}\n> \n> \n> \\end{document}\n> \n>>> Luckily the fork frequency and the average block size are easily\n>>> measurable. blockchain.info keeps historical graphs of number of\n>>> orphaned blocks pr day\n>>\n>> Are those stats accurate? Have any pool operators at least confirmed that the\n>> orphaned blocks that blockchain.info reports match their own records?\n>>\n>> My gut feeling is to relay all orphaned blocks. We know that with a high\n>> investment and sybil attack as blockchain.info has done you can have better\n>> awareness of orphaned blocks than someone without those resources. If having\n>> that awareness is ever a profitable thing we have both created an incentive to\n>> sybil attack the network and we have linked profitability to high up-front\n>> capital investments.\n>>\n>> On those grounds alone I will argue that we should relay all orphans to even\n>> the playing field. If there is a circumstance where we do not want the attacker\n>> to have that knowledge we have failed anyway, as blockchain.info's sybil attack\n>> on the network clearly shows.\n> \n> Agreed.\n> \n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.22 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJShfvZAAoJEKpww0VFxdGRDVoIALEgjxC8PQvj4hyp8CmTM8wP\n4ASL72gs/V6cRZuVPXjKJrrWxs2GjvxASQWaZa+9Oe5pXTg1Qa9yo5/3vBnB4kmK\nSgeJNo+C1rQjd3KuunAV0vG4pkIYnMa9GyBYnWf8mNuP1oysy8NSDOVt2jhtO5A3\ngKra0YFJYIEyOgewfefDrxokP0iSfQnJO7mPYfkoaLQm0ugoAi1IR8EiAuZX3oT9\nv80o9yhKqilz0wxhvsFAFf8txfpJw7LWTne5L/gQkHIV3v3dY7fLoWTfil/mqsAq\n6+d6xf+9s1tOXD18C/QTvhZIAyE3yiW7ZxbOyAYbQmbjORRZBdgWzaxCQbTHQNM=\n=k1i2\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-15T11:12:04",
                "message_text_only": "On Fri, Nov 15, 2013 at 11:47:53AM +0100, Michael Gronager wrote:\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n> \n> Hi Peter,\n> \n> Love to see things put into formulas - nice work!\n> \n> Fully agree on the your fist section: As latency determines maximum\n> block earnings, define a 0-latency (big-miner never orphans his own\n> blocks) island and growing that will of course result in increased earnings.\n> \n> So build your own huge mining data center and you rock.\n> \n> However, that is hardly the real work scenario today. Instead we have\n> pools (Huge pools). It would be interesting to do the calculation:\n> \n> \tQ = Total pool size (fraction of all mining power)\n> \tq = My mining power (do.)\n> \te = fraction of block fee that pool reserves\n> \n> It is pretty obvious that given your formulas small miners are better\n> off in a pool (can't survive as solo miners), but there will be a\n> threshold q_min above which you are actually better off on you own -\n> depending also on e. (excluding here all benefits of a stable revenue\n> stream provided by pools)\n\nUnfortunately the math doesn't work that way. For any Q, a bigger Q\ngives you a higher return. Remember that the way I setup those equations\nin section 3.2 is such that I'm actually modeling two pools, one with Q\nhashing power and one with (1-Q) hashing power. Or maybe more\naccurately, it's irrelevant if the (1-Q) hashing power is or isn't a\nunified pool.\n\nThe other thing is the fraction of the block fee the pool reserves\nindicates you're talking about real-world costs... and the moment you do\nthat you find that pools themselves have economies of scale simply by\nvirtue of using a small overhead infrastructure, their nodes etc., for a\nlarge number of miners. On that basis alone a small miner joining a\nlarger pool would always be financially advantageous modulo situations\nwhere the large pool had legal restrictions that artificially increased\ntheir overheads.\n\n> Next interesting calculation would be bitcoin rate as a function of pool\n> size, I expect a sharp dip somewhere in the 40%s of hardware controlled\n> by one entity ;)\n\nBitcoin rate?\n\n> Finally, as you mention yourselves, qualification of the various\n> functions is needed. This could e.g. suggest if we are like to get 3 or\n> 10 miners on the long run.\n\nThe equations give an incentive to centralize all the way up to 1 miner\nwith 100% hashing power.\n\nOf course, if that one pool were p2pool, that might be ok!\n\n> And now for section 2. You insert a definition of f(L) = a-bL. I think\n> the whole idea of letting f depend on L is superfluous. As a miner you\n> are always free to choose which transactions to include. You will always\n> choose those with the biggest fee, so really it is only the average fee\n> that is relevant: f(L) = c. Any dependence in L will be removed by the\n> reshuffeling. To include an extra transaction will require either that\n> it has a fee larger than another (kicking that out out) or that it has a\n> fee so large that it covers for the other transaction too. Also recall\n> that there is a logical minimum fee (as I have already shown), and a\n> maximum optimal block size - that is until the bounty becomes 0 (which\n> is where other effects kick in).\n\nBy defining f(L) you can model supply and demand, which can be relevant\nin that a steep demand curve with a small number of high-fee\ntransactions can reduce centralization pressure in my model.\n\nOf course, by defining f(L) = a-bL you also wind up with mathematica\nspitting out some truly hideous polynomials. :P Setting f(L) = c as you\nsuggest is something I looked at, and results in equations that are more\nreasonable, so I think I'll likely wind up doing that. You can make a\ngood argument anyway that the centralization would cause a flattening of\nany demand curve anyway, as in the no-blocksize-limit case the larger\npools cost per transaction tends towards zero as their hashing power\nincreases - why pay high fees when the large pool will mine them almost\nas fast?\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000b4ff49cd2cad865d6cbca99828987a02f3d5f41067eab00a\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/b10ac2bf/attachment.sig>"
            },
            {
                "author": "Michael Gronager",
                "date": "2013-11-15T11:58:14",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n>> \n\n>> Q = Total pool size (fraction of all mining power) q = My mining\n>> power (do.) e = fraction of block fee that pool reserves\n>> \n> \n> Unfortunately the math doesn't work that way. For any Q, a bigger\n> Q gives you a higher return. Remember that the way I setup those\n> equations in section 3.2 is such that I'm actually modeling two\n> pools, one with Q hashing power and one with (1-Q) hashing power.\n> Or maybe more accurately, it's irrelevant if the (1-Q) hashing\n> power is or isn't a unified pool.\n\nMy Q and q are meant differently, I agree to your Q vs Q-1 argument,\nbut the q is \"me as a miner\" participating in \"a pool\" Q. If I\nparticipate in a pool I pay the pool owner a fraction, e, but at the\nsame time I become part of an economy of scale (well actually a math\nof scale...) and that can end up paying for the lost e. The question\nis what is the ratio q/Q where I should rather mine on my own ? This\nquestion is interesting as it will make bigger miners break away from\npools into solo mining, but I also agree that from pure math the most\nadvantageous scenario is the 100% mining rig.\n\n> The equations give an incentive to centralize all the way up to 1\n> miner with 100% hashing power.\n> \n> Of course, if that one pool were p2pool, that might be ok!\n\nHa, yes, and then the math for p2pool starts... a math where we have\nmuch more stales...\n\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.22 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJShgxWAAoJEKpww0VFxdGRoiwH/3RGTH503PJ8UWuyKjrxscb4\ndG3TyThZCDs12DvtC+2TPKnIkQFinGx9442tZU/O+qmwsGJsNVoEcnGmKEYz/vlI\nXzFF30ugslB4FKwHZYRqXELaKR4RvUtSzu6td8P3n+e6d0MZsuemMornpbXZkw3n\nCbMlYuiG4h3iUAwTaOTS26cFbZoo6eyogydDjnS7Ogi2Ur85Rydi/Lj24rj7UxYB\n+WUkYAv3bCqCzTkv1LxO7HwY1SICZDmoGRbuil5M7bJ+MftYt6Q6DVprGSVP0mOV\n9eEVeMVY/WmMZCI/01ruXpzC3gxU60vOd/a3q9G2hd9Tn00HzugAllEXh7ZzzUs=\n=unP8\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-15T19:09:40",
                "message_text_only": "On Fri, Nov 15, 2013 at 12:58:14PM +0100, Michael Gronager wrote:\n> My Q and q are meant differently, I agree to your Q vs Q-1 argument,\n> but the q is \"me as a miner\" participating in \"a pool\" Q. If I\n> participate in a pool I pay the pool owner a fraction, e, but at the\n> same time I become part of an economy of scale (well actually a math\n> of scale...) and that can end up paying for the lost e. The question\n> is what is the ratio q/Q where I should rather mine on my own ? This\n> question is interesting as it will make bigger miners break away from\n> pools into solo mining, but I also agree that from pure math the most\n> advantageous scenario is the 100% mining rig.\n\nThe underlying issue is what is the pools expenses compared to yours.\nThere is an overhead to mining, you need to spend money and time (and\nhence money) running and administering full nodes at the very minimum.\nThe pool can amortise that cost over many hashers; the solo miner can't.\n\nPools will of course have some profit margin, but why would you expect\nthat margin to not be sufficiently low to make it in a solo-miner's\ninterest to join the pool? Both the pool and the former solo-miner earn\nmore return after all if they centralize.\n\nThe fundemental issue is that in the design of Bitcoin there is an\nincentive for miners to join into pools, and that incentive exists at\nany amount of hashing power. Sure second order effects like regulation\nand social pressure can counteract that incentive in some circumstances,\nbut that's not very strong protection.\n\n> > The equations give an incentive to centralize all the way up to 1\n> > miner with 100% hashing power.\n> > \n> > Of course, if that one pool were p2pool, that might be ok!\n> \n> Ha, yes, and then the math for p2pool starts... a math where we have\n> much more stales...\n\nHowever p2pool doesn't necessarily need a linear blockchain to function,\nso there is a potential for stales to be much less relevant.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000772f720b0a231150f22af20760c1463ef920f71ba3daab819\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/540cf503/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-15T10:32:46",
                "message_text_only": "On Wed, Nov 13, 2013 at 12:52:21PM +0100, Michael Gronager wrote:\n> Last week I posted a writeup: \"On the optimal block size and why\n> transaction fees are 8 times too low (or transactions 8 times too big)\".\n> \n> Peter Todd made some nice additions to it including different pool sizes\n> into the numbers.\n> \n> However, it occurred to me that things can in fact be calculated even\n> simpler: The measured fork rate will mean out all the different pool\n> sizes and network latencies and will as such provide a simple number we\n> can use to estimate the minimum fee. Key assumption is that the latency\n> will depend on block size (# txns) and the fork rate will depend on latency.\n> \n> Using the formulas from last week:\n> \n> P_fork = t_propagate/t_blocks\n> \n> and:\n> \n> t_propagate = t_0 + alpha*S ~= alpha*S\n\nAssuming t_0 is negligible is wrong in this case. Or, it should be...\n\n> We get a measure for alpha as a function of the average fork rate and\n> average block size:\n> \n> alpha = P_fork*t_block/S\n\nSo alpha has units of seconds/byte, which lets us indirectly figure out\nthe bandwidth the blocks are propagating at assuming t_0=0 and all links\nare equal. When you realize that P_fork is basically a multiplier on the\nbandwidth required to get a block out fast enough, the derivation makes\nsense. In any case we get:\n\nalpha = (1/113)*600s/134kBytes = 39.62uS/byte = 24kB/second\n\nWhich is atrocious... but when you remember that Bitcoin nodes send\nblocks to all peers simultaneously,(1) thus dividing up the bandwidth and\nruining latency you see why. t_0 shouldn't be at all negligible due to\nspeed of light, but with this low bandwidth it is anyway.\n\n1) To be precise, nodes answer queries for blocks from all peers\nsimultaneously.\n\nThis also indicates that pools haven't taken the simple step of peering\nwith each other using high-bandwidth nodes with restricted numbers of\npeers, which shows you how little attention they are paying to\noptimizing profits.  Right now mining pulls in $1.8 million/day, so\nthat's up to $16k wasted.\n\nHowever, because miners don't orphan themselves, that $16k loss is born\ndisproportionately by smaller miners... which also means the 24kB/sec\nbandwidth estimate is wrong, and the real number is even worse. In\ntheory anyway, could just as easily be the case that larger pools have\nscrewed up relaying still such that p2pool's forwarding wins.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000658459cd64e63243e719106014257870d073207c2d5460137\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/461df067/attachment.sig>"
            },
            {
                "author": "Michael Gronager",
                "date": "2013-11-15T11:47:46",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 15/11/13, 11:32 , Peter Todd wrote:\n\n> alpha = (1/113)*600s/134kBytes = 39.62uS/byte = 24kB/second\n> \n> Which is atrocious... \n\nalpha = P_fork*t_block/S = 1/113*454000/134 = 29ms/kb\n\nor 272kbit pr second - if you assume this is a bandwidth then I agree it\nis strikingly small (ISDN like), but this is not the case, the size\ndependence of this number originates both from the limited network\nbandwidth and from the validation and verification time of the blocks as\nwell as the latency in sending thee again.\n\nThe connection between propagation time and fork rate cannot be denied,\nand the bandwidth can be deducted from that alone - see Decket et al.\n\nt_0 on a 10000km link is on the order of 40ms, and that is only counting\nthe finite light speed in the fibers - if you ping the same distance you\nget roughly 1-200ms (due to latencies in network equipment). at a size\nof ~100kbyte t_0 hence becomes irrelevant.\n\n> This also indicates that pools haven't taken the simple step of peering\n> with each other using high-bandwidth nodes with restricted numbers of\n> peers\n\nagree\n\n> , which shows you how little attention they are paying to\n> optimizing profits.  Right now mining pulls in $1.8 million/day, so\n> that's up to $16k wasted.\n\nyup, but the relevant comparison is not 16k vs 1.8m, but the pool\noperator earnings which are on the order of 1% of the 1.8m so it is 18k\nvs 16k - I wouldn't mind doubling my income...\n\n> \n> However, because miners don't orphan themselves, that $16k loss is born\n> disproportionately by smaller miners... which also means the 24kB/sec\n> bandwidth estimate is wrong, and the real number is even worse.\n\nYes, agree\n\n> In\n> theory anyway, could just as easily be the case that larger pools have\n> screwed up relaying still such that p2pool's forwarding wins.\n\nYeah, we should resurrect p2pool ;)\n\n> \n> \n> \n> ------------------------------------------------------------------------------\n> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> Free app hosting. Or install the open source package on any LAMP server.\n> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.22 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJShgniAAoJEKpww0VFxdGRrwQIALKsOtBUaAaQTX9ikN+10mSE\npE2dp2VnUvfUqpXf3MgJtAvg2RFqHjziyBMYmpMw5tLJPpeUthpNXm6Vm/Yg0DdL\nJXSESIrd4Pdb/xPk2Fh9OKHmR1SB/8VxtRL2Vj1HmzzBcBiCylcaBuKlRkizvGSF\nKrUm3EOFUfzgGYFUnqNceZ3CuQHWFAXbsitNqU6Vop8JOTgiSLhUrvb7r3W7Ewuy\njM3H2KAk/PrdGXwna3sUfDXmmOxmPm1pBy6+OaBTHEv+ALkreD++XSUnLUUTky9N\nnZt2g7eMEFHIkVooj/HOGiwAvVwd7r86etiyUi8c2Pd46ff2OP5h1uiP/Qr28MA=\n=Bsv9\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-15T19:19:56",
                "message_text_only": "On Fri, Nov 15, 2013 at 12:47:46PM +0100, Michael Gronager wrote:\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n> \n> On 15/11/13, 11:32 , Peter Todd wrote:\n> \n> > alpha = (1/113)*600s/134kBytes = 39.62uS/byte = 24kB/second\n> > \n> > Which is atrocious... \n> \n> alpha = P_fork*t_block/S = 1/113*454000/134 = 29ms/kb\n\nHuh? Where did 454000 come from?\n\n> > , which shows you how little attention they are paying to\n> > optimizing profits.  Right now mining pulls in $1.8 million/day, so\n> > that's up to $16k wasted.\n> \n> yup, but the relevant comparison is not 16k vs 1.8m, but the pool\n> operator earnings which are on the order of 1% of the 1.8m so it is 18k\n> vs 16k - I wouldn't mind doubling my income...\n\nThat's only true for a PPS pool though, not the more usual pools that\npay relative to blocks actually found. Heh, actually, that might be part\nof the problem... also doesn't help how varience is going to make\nnoticing 1% hard.\n\n> > In\n> > theory anyway, could just as easily be the case that larger pools have\n> > screwed up relaying still such that p2pool's forwarding wins.\n> \n> Yeah, we should resurrect p2pool ;)\n\nP2Pool has 1% hashing power right now; I mine on it myself with what\nlittle hashing power I have.\n\nThe more interesting thing is how do you grow P2Pool - requiring a full\nnode is going to make that tricky. Also the once we start adding more\nefficient block propagation by transmitting headers + txids p2pool's\ncurrent advantage goes away.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000005fbc1840bbd5bd71d4d6cd2930e20da9e697710f58bd4f69d\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/bc59798d/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-20T10:01:08",
                "message_text_only": "On Fri, Nov 15, 2013 at 02:19:56PM -0500, Peter Todd wrote:\n> On Fri, Nov 15, 2013 at 12:47:46PM +0100, Michael Gronager wrote:\n> > -----BEGIN PGP SIGNED MESSAGE-----\n> > Hash: SHA1\n> > \n> > On 15/11/13, 11:32 , Peter Todd wrote:\n> > \n> > > alpha = (1/113)*600s/134kBytes = 39.62uS/byte = 24kB/second\n> > > \n> > > Which is atrocious... \n> > \n> > alpha = P_fork*t_block/S = 1/113*454000/134 = 29ms/kb\n> \n> Huh? Where did 454000 come from?\n\nOh right, you're using the actual block interval, not the steady state\none.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000056032432f186a8276d3feecb805d064c1def85905670a453b\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131120/d595d74c/attachment.sig>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-11-13T23:52:41",
                "message_text_only": "Couple of thoughts:\n\nRE: the marvelous coincidence that the average fee these days is very close\nto the modeled minimum orphan cost:\n\nEngineers tend to underestimate the power of markets, even inefficient\nmarkets, to arrive at the 'correct' price. It would not surprise me at all\nif the messy, chaotic inefficient market with tens of thousands of\nindividual decisions (\"which mining pool should I join\" and \"how high\nshould my dice site set fees\" and \"how large should the minimum payout be\"\nand \"should I make my blocks bigger or smaller\") might arrive at the\n'correct' price, even if NOBODY involved has any clue how or why it\nhappened.\n\nOr it might just be a coincidence.\n\nRE: orphan rate:\n\nThe network-wide orphan rate has been very steady apart from the March\nblockchain fork. Kudos to Ben Reeves for keeping track of the data and\ngiving us a nice chart:\n  http://blockchain.info/charts/n-orphaned-blocks\n\nRE: new block latency:\n\nWe should be able to reduce the size of new block announcements by about a\nfactor of ten with very little additional effort (transmit/relay as\n\"merkleblock\" with full bloom filters-- the factor of 10 is because a\ntransaction id hash is 32 bytes, average transaction size is a few hundred\nbytes).\n\nMining revenue is a fixed-size pie, so if EVERYBODY agreed to accept\n(somewhat) higher orphan rates for more transaction volume then, in the\nlong run, there is no difference.  Well, except that more transaction\nvolume means more utility for Bitcoin as a whole, so everybody should\nbenefit from a higher bitcoin price.\n\nThat's a classic free-rider problem, though-- a miner could defect to try\nto get a lower orphan rate.\n\nThis is one of the reasons why I think relaying all blocks in a race is\nprobably the right thing to do; if a miner is mildly punished (by losing\nthe occasional block race) for creating blocks that don't include \"enough\"\nalready-relayed transactions, that is a strong incentive to go along with\nwhatever consensus has been established.\n\nThe same argument applies for a miner producing too-large blocks, or blocks\nwith lots of transactions that were never relayed across the network.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/1d37b8b2/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Even simpler minimum fee calculation formula: f > bounty*fork_rate/average_blocksize",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Michael Gronager",
                "John Dillon",
                "Peter Todd",
                "Gregory Maxwell",
                "Gavin Andresen"
            ],
            "messages_count": 16,
            "total_messages_chars_count": 62906
        }
    },
    {
        "title": "[Bitcoin-development] MITOSYS: New Encrypted Communications Cryptocurrency",
        "thread_messages": [
            {
                "author": "Zumbi Warrior",
                "date": "2013-11-14T09:57:19",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/456c01fe/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "MITOSYS: New Encrypted Communications Cryptocurrency",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Zumbi Warrior"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 142
        }
    },
    {
        "title": "[Bitcoin-development] moving the default display to mbtc",
        "thread_messages": [
            {
                "author": "Melvin Carvalho",
                "date": "2013-11-14T11:45:51",
                "message_text_only": "Rationale\n=======\n\nGiven the recent rise in value there seems to be anecdotal evidence that 1\nbitcoin being so high is putting off a lot of normal buyers, because they\nfeel that putting down $400+ and only getting \"1 coin\", or having to buy in\nmultiples of 1 whole coin, is too much.. only after it being explained that\nthey can buy fractional amounts to they regain interest, apparently\nhappening increasingly.\n\n\nStraw Poll\n========\n\n6 months ago there was a straw poll on this\n\nhttps://bitcointalk.org/index.php?topic=220322.0\n\nRoughly 2/3 of respondents favoured switching\n\nA further 20% said to switch after it hits 1000\n\nSatoshi's comments:\n================\n\nEventually at most only 21 million coins for 6.8 billion people in the\nworld if it really gets huge.\n\nBut don't worry, there are another 6 decimal places that aren't shown, for\na total of 8 decimal places internally.  It shows 1.00 but internally it's\n1.00000000.  If there's massive deflation in the future, the software could\nshow more decimal places.\n\nIf it gets tiresome working with small numbers, we could change where the\ndisplay shows the decimal point.  Same amount of money, just different\nconvention for where the \",\"'s and \".\"'s go.  e.g. moving the decimal place\n3 places would mean if you had 1.00000 before, now it shows it as 1,000.00.\n\nhttps://bitcointalk.org/index.php?topic=44.msg267#msg267\n\n\nWould now be a good time to start thinking about changing the default\ndisplay in the software.  Perhaps initially it could be a dropdown display\noption, then at some point mbtc becomes the default?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/264b078a/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-11-14T18:18:45",
                "message_text_only": "On Thursday, November 14, 2013 11:45:51 AM Melvin Carvalho wrote:\n> Would now be a good time to start thinking about changing the default\n> display in the software.  Perhaps initially it could be a dropdown display\n> option, then at some point mbtc becomes the default?\n\nThere's already a dropdown display option..."
            },
            {
                "author": "Jacob Lyles",
                "date": "2013-11-17T03:22:36",
                "message_text_only": "One of the strongest results from psychology is the power of defaults over\npeople's behavio<http://danariely.com/2008/05/05/3-main-lessons-of-psychology/>r.\nOpt-in vs. opt-out national organ donation policies mean the difference\nbetween organ donation rates under ~10% to over ~90%. Most people stick\nwith the default option.\n\n\nOn Thu, Nov 14, 2013 at 10:18 AM, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Thursday, November 14, 2013 11:45:51 AM Melvin Carvalho wrote:\n> > Would now be a good time to start thinking about changing the default\n> > display in the software.  Perhaps initially it could be a dropdown\n> display\n> > option, then at some point mbtc becomes the default?\n>\n> There's already a dropdown display option...\n>\n>\n> ------------------------------------------------------------------------------\n> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> Free app hosting. Or install the open source package on any LAMP server.\n> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131116/3df42782/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2013-11-14T20:01:49",
                "message_text_only": "I highly recommend that if we make any move towards this, that the\nsoftware show verification in both/all units.\n\nFor instance, there should be 3 input fields, one for \"BTC\", one for\n\"mBTC\" one for \"uBTC\".  As the user enters a value in one of the fields,\nit would automatically update the other fields with the converted value\nas they type.  This makes it really difficult to get it wrong... if\nyou're typing \"10\" into the BTC field, thinking it's mBTC, you'll see\n10,000 mBTC showing up in the other box as you type.  Similarly, it\nshould display all units on all verification windows.  Users may also\nuse it for sanity checking conversion between units.\n\nPersonally, I'm of the opinion that this change is important in the long\nrun:  the current price makes Bitcoin *intimidating* to new users.  But\nI'm also of the opinion that it's freakin' hard to change the base unit\nin such an established system.  There is no easy way to do this that\ndoesn't cause more heartache than it's worth.  But it's possible if you\nmake it idiot-proof enough, and roll it out in the least inconvenient way.\n\n-Alan\n\n\nOn 11/14/2013 06:45 AM, Melvin Carvalho wrote:\n> Rationale\n> =======\n>\n> Given the recent rise in value there seems to be anecdotal evidence\n> that 1 bitcoin being so high is putting off a lot of normal buyers,\n> because they feel that putting down $400+ and only getting \"1 coin\",\n> or having to buy in multiples of 1 whole coin, is too much.. only\n> after it being explained that they can buy fractional amounts to they\n> regain interest, apparently happening increasingly.\n>\n>\n> Straw Poll\n> ========\n>\n> 6 months ago there was a straw poll on this\n>\n> https://bitcointalk.org/index.php?topic=220322.0\n>\n> Roughly 2/3 of respondents favoured switching\n>\n> A further 20% said to switch after it hits 1000\n>\n> Satoshi's comments:\n> ================\n>\n> Eventually at most only 21 million coins for 6.8 billion people in the\n> world if it really gets huge.\n>\n> But don't worry, there are another 6 decimal places that aren't shown,\n> for a total of 8 decimal places internally.  It shows 1.00 but\n> internally it's 1.00000000.  If there's massive deflation in the\n> future, the software could show more decimal places.\n>\n> If it gets tiresome working with small numbers, we could change where\n> the display shows the decimal point.  Same amount of money, just\n> different convention for where the \",\"'s and \".\"'s go.  e.g. moving\n> the decimal place 3 places would mean if you had 1.00000 before, now\n> it shows it as 1,000.00.\n>\n> https://bitcointalk.org/index.php?topic=44.msg267#msg267\n>\n>\n> Would now be a good time to start thinking about changing the default\n> display in the software.  Perhaps initially it could be a dropdown\n> display option, then at some point mbtc becomes the default?\n>\n>\n>\n> ------------------------------------------------------------------------------\n> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> Free app hosting. Or install the open source package on any LAMP server.\n> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/bfef8905/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-11-14T21:15:54",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nFor this reason I'm in favor of skipping mBTC and moving straight to\nuBTC. Having eight, or even five decimal places is not intuitive to\nthe average user. Two decimal places is becoming standard for new\nnational currencies, and we wouldn't be too far from human scale\neveryday numbers: 25.00uBTC ~= $0.01 currently. And I don't think very\nmany people on this list would consider bitcoin overvalued in the long\nterm perspective.\n\nBetter to go through a confusing renumbering only once.\n\nMark\n\nOn 11/14/13 12:01 PM, Alan Reiner wrote:\n> ... I'm also of the opinion that it's freakin' hard to change the\n> base unit in such an established system.  There is no easy way to\n> do this that doesn't cause more heartache than it's worth...\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.19 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJShT2JAAoJEAdzVfsmodw4DXAQAIJTNbpwBGTXuFyaxXQULf20\nhMs7OlQZSOZOdsmSiPv2augxzbpa2DhhZjiosrScSBCjxMeYd4S6WgTt/b8moAYR\nHD8pm88JyCKDOd7bOmzTkgDOTBBFfH+islmOY9VTdeKGHeOHH6yyLMKwnUpa+S89\n4YtdzlIXAtfT37dpR5E4cHPmAYCbrRsNOB6j5ohVl2VqRou2vkwoJr/YvaW54M8i\nucIZyai2qjNWyJLcZC9QWi9Yw/W/n9QYE2mHyL0qWNaIrZVn6WGty8KpYq+i7aeU\n4N4UdtLT7FAhWYec9nmEec868WsUsd+H3/WSWViMinUKO4YA3cyxWDL7MTmTRsci\ng0R4WGYCzMM3cEWz5ycf5KEBPH/nDlbqFmEartTffqKXgrK5Ohhw+28Iqw5KcDX8\nSVx34lw2yHWmTeIMY8d3qYKqBdcsvixDUD3xvq+ZqEIa+bZw12s4LIzqmir84TB8\nfB4bdq5GddXX0PK4pboXL+Nib0OVK72YgYnVs/ejlBmeiG8Ixoz4/ygR5MHm8jcw\ntSiwH0xohOJWg3lJj0vZorubXoECcOqwPzsZkwnT9irbrvOuk2jCPvrkEC8U9fgA\nXHgirStS49/lI/iUWrRchoTt5iuwG18G4+E81V/DMsrSkYlipuf2DlEXiapn3hWz\nccP053+6o5Rgpc7J1aa0\n=QW1i\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Allen Piscitello",
                "date": "2013-11-14T21:55:35",
                "message_text_only": "I also would prefer to go straight to uBTC as the \"standard wallet unit\".\n It works out perfectly with Satoshi's being the decimal units.  Something\nthat costs $10USD would be 25000uBTC.  This isn't a problem for a place\nlike South Korea, where 10USD is about 10,000 Won, so we aren't even off on\na scale of usable currencies in major economies.\n\nThe downsides are obviously confusion (causing mistakes resulting in lost\ncoins), and possibly from a psychological perspective on price (uBTC are\nworthless!).  On the other hand, it also might help people feel like they\nare getting in on the ground floor still (I own 100,000 uBTC!), and reduce\nthe perception the Bitcoins are not divisible (I have heard several people\nworry that 21 million is not enough units).\n\nAlan's ideas for compatibility with multiple fields will also be helpful to\nsolving the confusion issue.\n\n\n\nOn Thu, Nov 14, 2013 at 3:15 PM, Mark Friedenbach <mark at monetize.io> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> For this reason I'm in favor of skipping mBTC and moving straight to\n> uBTC. Having eight, or even five decimal places is not intuitive to\n> the average user. Two decimal places is becoming standard for new\n> national currencies, and we wouldn't be too far from human scale\n> everyday numbers: 25.00uBTC ~= $0.01 currently. And I don't think very\n> many people on this list would consider bitcoin overvalued in the long\n> term perspective.\n>\n> Better to go through a confusing renumbering only once.\n>\n> Mark\n>\n> On 11/14/13 12:01 PM, Alan Reiner wrote:\n> > ... I'm also of the opinion that it's freakin' hard to change the\n> > base unit in such an established system.  There is no easy way to\n> > do this that doesn't cause more heartache than it's worth...\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG/MacGPG2 v2.0.19 (Darwin)\n> Comment: GPGTools - http://gpgtools.org\n> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n>\n> iQIcBAEBAgAGBQJShT2JAAoJEAdzVfsmodw4DXAQAIJTNbpwBGTXuFyaxXQULf20\n> hMs7OlQZSOZOdsmSiPv2augxzbpa2DhhZjiosrScSBCjxMeYd4S6WgTt/b8moAYR\n> HD8pm88JyCKDOd7bOmzTkgDOTBBFfH+islmOY9VTdeKGHeOHH6yyLMKwnUpa+S89\n> 4YtdzlIXAtfT37dpR5E4cHPmAYCbrRsNOB6j5ohVl2VqRou2vkwoJr/YvaW54M8i\n> ucIZyai2qjNWyJLcZC9QWi9Yw/W/n9QYE2mHyL0qWNaIrZVn6WGty8KpYq+i7aeU\n> 4N4UdtLT7FAhWYec9nmEec868WsUsd+H3/WSWViMinUKO4YA3cyxWDL7MTmTRsci\n> g0R4WGYCzMM3cEWz5ycf5KEBPH/nDlbqFmEartTffqKXgrK5Ohhw+28Iqw5KcDX8\n> SVx34lw2yHWmTeIMY8d3qYKqBdcsvixDUD3xvq+ZqEIa+bZw12s4LIzqmir84TB8\n> fB4bdq5GddXX0PK4pboXL+Nib0OVK72YgYnVs/ejlBmeiG8Ixoz4/ygR5MHm8jcw\n> tSiwH0xohOJWg3lJj0vZorubXoECcOqwPzsZkwnT9irbrvOuk2jCPvrkEC8U9fgA\n> XHgirStS49/lI/iUWrRchoTt5iuwG18G4+E81V/DMsrSkYlipuf2DlEXiapn3hWz\n> ccP053+6o5Rgpc7J1aa0\n> =QW1i\n> -----END PGP SIGNATURE-----\n>\n>\n> ------------------------------------------------------------------------------\n> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> Free app hosting. Or install the open source package on any LAMP server.\n> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/c60e096d/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2013-11-14T22:00:29",
                "message_text_only": "Just keep in mind it will be a little awkward that 54.3 uBTC is the\nsmallest unit that can be transferred [easily] and the standard fees are\n500 uBTC.    It's not a deal breaker, it's just something that needs to\nbe taken into consideration when it comes to user perception (which is\none of the reasons we would make such a change in the first place). \n\n\"Holy crap these fees are huge!  I thought Bitcoin didn't have fees!\"\n\n\nOn 11/14/2013 04:55 PM, Allen Piscitello wrote:\n> I also would prefer to go straight to uBTC as the \"standard wallet unit\".    It works out\nperfectly with Satoshi's being the decimal units.  Something that costs\n$10USD would be 25000uBTC.  This isn't a problem for a place like South\nKorea, where 10USD is about 10,000 Won, so we aren't even off on a scale\nof usable currencies in major economies.\n>\n> The downsides are obviously confusion (causing mistakes resulting in\nlost coins), and possibly from a psychological perspective on price\n(uBTC are worthless!).  On the other hand, it also might help people\nfeel like they are getting in on the ground floor still (I own 100,000\nuBTC!), and reduce the perception the Bitcoins are not divisible (I have\nheard several people worry that 21 million is not enough units).\n>\n> Alan's ideas for compatibility with multiple fields will also be\nhelpful to solving the confusion issue.\n>\n>\n>\n> On Thu, Nov 14, 2013 at 3:15 PM, Mark Friedenbach <mark at monetize.io\n<mailto:mark at monetize.io>> wrote:\n>\n> For this reason I'm in favor of skipping mBTC and moving straight to\n> uBTC. Having eight, or even five decimal places is not intuitive to\n> the average user. Two decimal places is becoming standard for new\n> national currencies, and we wouldn't be too far from human scale\n> everyday numbers: 25.00uBTC ~= $0.01 currently. And I don't think very\n> many people on this list would consider bitcoin overvalued in the long\n> term perspective.\n>\n> Better to go through a confusing renumbering only once.\n>\n> Mark\n>\n> On 11/14/13 12:01 PM, Alan Reiner wrote:\n> > ... I'm also of the opinion that it's freakin' hard to change the\n> > base unit in such an established system.  There is no easy way to\n> > do this that doesn't cause more heartache than it's worth...\n>\n>    \n------------------------------------------------------------------------------\n>     DreamFactory - Open Source REST & JSON Services for HTML5 & Native\nApps\n>     OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n>     Free app hosting. Or install the open source package on any LAMP\nserver.\n>     Sign up and see examples for AngularJS, jQuery, Sencha Touch and\nNative!\n>    \nhttp://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n<mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n>\n------------------------------------------------------------------------------\n> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> Free app hosting. Or install the open source package on any LAMP server.\n> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n>\nhttp://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/862ccf75/attachment.html>"
            },
            {
                "author": "Allen Piscitello",
                "date": "2013-11-14T22:07:58",
                "message_text_only": "Obviously the answer is to just display all fees and trading rates as BTC\nor MBTC (.0000005 MBTC fee? how cheap!).  On a more serious note, the\ntransition should definitely be thought out well as it could be very\ndamaging to have this confusion, but I would prefer to do it only once\nrather than twice.\n\n\nOn Thu, Nov 14, 2013 at 4:00 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n\n>  Just keep in mind it will be a little awkward that 54.3 uBTC is the\n> smallest unit that can be transferred [easily] and the standard fees are\n> 500 uBTC.    It's not a deal breaker, it's just something that needs to be\n> taken into consideration when it comes to user perception (which is one of\n> the reasons we would make such a change in the first place).\n>\n> \"Holy crap these fees are huge!  I thought Bitcoin didn't have fees!\"\n>\n>\n>\n> On 11/14/2013 04:55 PM, Allen Piscitello wrote:\n> > I also would prefer to go straight to uBTC as the \"standard wallet\n> unit\".    It works out perfectly with Satoshi's being the decimal units.\n> Something that costs $10USD would be 25000uBTC.  This isn't a problem for a\n> place like South Korea, where 10USD is about 10,000 Won, so we aren't even\n> off on a scale of usable currencies in major economies.\n> >\n> > The downsides are obviously confusion (causing mistakes resulting in\n> lost coins), and possibly from a psychological perspective on price (uBTC\n> are worthless!).  On the other hand, it also might help people feel like\n> they are getting in on the ground floor still (I own 100,000 uBTC!), and\n> reduce the perception the Bitcoins are not divisible (I have heard several\n> people worry that 21 million is not enough units).\n> >\n> > Alan's ideas for compatibility with multiple fields will also be helpful\n> to solving the confusion issue.\n> >\n> >\n> >\n> > On Thu, Nov 14, 2013 at 3:15 PM, Mark Friedenbach <mark at monetize.io\n> <mailto:mark at monetize.io> <mark at monetize.io>> wrote:\n> >\n>\n> For this reason I'm in favor of skipping mBTC and moving straight to\n> uBTC. Having eight, or even five decimal places is not intuitive to\n> the average user. Two decimal places is becoming standard for new\n> national currencies, and we wouldn't be too far from human scale\n> everyday numbers: 25.00uBTC ~= $0.01 currently. And I don't think very\n> many people on this list would consider bitcoin overvalued in the long\n> term perspective.\n>\n> Better to go through a confusing renumbering only once.\n>\n> Mark\n>\n> On 11/14/13 12:01 PM, Alan Reiner wrote:\n> > ... I'm also of the opinion that it's freakin' hard to change the\n> > base unit in such an established system.  There is no easy way to\n> > do this that doesn't cause more heartache than it's worth...\n>\n> >\n>\n> >\n> ------------------------------------------------------------------------------\n> >     DreamFactory - Open Source REST & JSON Services for HTML5 & Native\n> Apps\n> >     OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> >     Free app hosting. Or install the open source package on any LAMP\n> server.\n> >     Sign up and see examples for AngularJS, jQuery, Sencha Touch and\n> Native!\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n> >     _______________________________________________\n> >     Bitcoin-development mailing list\n> >     Bitcoin-development at lists.sourceforge.net\n> <mailto:Bitcoin-development at lists.sourceforge.net><Bitcoin-development at lists.sourceforge.net>\n> >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n> >\n> >\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> > OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> > Free app hosting. Or install the open source package on any LAMP server.\n> > Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n> >\n> >\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> Free app hosting. Or install the open source package on any LAMP server.\n> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/cfa37763/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-11-14T23:01:38",
                "message_text_only": "On Thursday, November 14, 2013 10:07:58 PM Allen Piscitello wrote:\n> Obviously the answer is to just display all fees and trading rates as BTC\n> or MBTC (.0000005 MBTC fee? how cheap!).  On a more serious note, the\n> transition should definitely be thought out well as it could be very\n> damaging to have this confusion, but I would prefer to do it only once\n> rather than twice.\n\nI wonder if it might make sense to bundle some other terminology fixups at the \nsame time.\n\nRight now, Bitcoin-Qt has been using the term \"confirmations\" (plural) to \nrefer to how many blocks deep a transaction is buried. We also use the term \n\"confirmation\" to refer to the point where a transaction is accepted as paid. \nIMO, the latter use makes sense, but the former leads to confusion especially \nin light of scamcoins which abuse this confusion to claim they have \"faster \nconfirmations\", implying that the actual confirmation occurs faster when it \nreally doesn't. \"5 blocks deep\" may not be more clear to laymen, but at least \nit makes it harder for people to confuse with actual confirmation.\n\nI think we all know the problems with the term \"address\". People naturally \ncompare it to postal addresses, email addresses, etc, which operate \nfundamentally different. I suggest that we switch to using \"invoice id\" to \nrefer to what is now known as addresses, as that seems to get the more natural \nunderstanding to people. On the other hand, with the advent of the payment \nprotocol, perhaps address/invoice id use will die out soon?\n\nThoughts?\n\nLuke"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-11-14T23:11:26",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 11/14/13 3:01 PM, Luke-Jr wrote:\n> I think we all know the problems with the term \"address\". People\n> naturally compare it to postal addresses, email addresses, etc,\n> which operate fundamentally different. I suggest that we switch to\n> using \"invoice id\" to refer to what is now known as addresses, as\n> that seems to get the more natural understanding to people. On the\n> other hand, with the advent of the payment protocol, perhaps\n> address/invoice id use will die out soon?\n> \n> Thoughts?\n\n\"key id\" (thanks sipa).\n\nI know it's a more technical term, but that is rather the point. It\nwas a fundamental error to call hashed-pubkeys \"addresses\" as people\neither associate this with \"account\" or physical addresses, which also\nrarely change.\n\nSecurity and privacy guarantees of the system are defeated when key\npairs are reused. We should ideally adopt terminology that lead people\nto associations of ephemeral, temporary use. \"key id\" is at least\nneutral in this regard. Can anyone think of something better?\n\nMark\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.19 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJShVieAAoJEAdzVfsmodw4TlkP/i2cZm9NolReIsv6WBNQUGZ6\n0VJveOcsOmEXj3ixSyzPRitFl52EOfU+LZaM3liwFPczuIOXZUXOLAJqakxGGsFa\ncWwvZjrBk13aTR+4dXZ6OWcCNmTfm6+st2+v1MpQcXlHD8J1WtrdrzKr3fNSntir\nyHbNmF6hPfgLr64m52BhUVrxBg9eiIFDI6VCzmUgk+paNmIxs9dgx7POnz1/hQb3\n2FGfNt2J81t4F78mpzjtKx+vHRyHpIKJ2+3mjzcQ7IBkhBgPYnp69TwBSGXbg7l9\n6yV0P7DGjWepO5+s96GCjbScYpmZO0gx0ZTn/eamfxh20XuX2fZBEVNd1KnhX4Xq\nD4UwylGNa5FteRgURtVN5Xdb82jB2qhhr/IkGSgKds24zhHzgvBgvLJBgwtQHwil\nM/y2DMC70WVEXf0Fz96L1kNYUA6062/ZNlwITRWxkUUJprF+xyN3R+BVWMggBMnR\nVjht74MZMkJyYlPQr8BRbYdhgMwv6dh0v5T4M6ck6MjKYj/GLsnEfHyY2d/BNg8c\n2nkcBC8Dtv9KoFOk6STS1n7R4ooqepmdsRNPBZUzKvv/NN1B1A8jeluLiN9hSzl1\nubDF/34LJTji8bP9jfDBEND94xdaKjTl+2ISweRttBOOVqCtQlzCQ4udiT7vAntb\nAYYMBYmYO/A926T+K6Lp\n=kFj9\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-11-14T23:13:59",
                "message_text_only": "On Thursday, November 14, 2013 11:11:26 PM Mark Friedenbach wrote:\n> \"key id\" (thanks sipa).\n> \n> I know it's a more technical term, but that is rather the point. It\n> was a fundamental error to call hashed-pubkeys \"addresses\" as people\n> either associate this with \"account\" or physical addresses, which also\n> rarely change.\n> \n> Security and privacy guarantees of the system are defeated when key\n> pairs are reused. We should ideally adopt terminology that lead people\n> to associations of ephemeral, temporary use. \"key id\" is at least\n> neutral in this regard. Can anyone think of something better?\n\nKeys are often reused, so not sure that conveys the single-use much better.\nReason I suggested invoice id is because nobody wants to pay the same invoice \ntwice.\n\nLuke"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-11-14T23:22:38",
                "message_text_only": "On Thu, Nov 14, 2013 at 6:11 PM, Mark Friedenbach <mark at monetize.io> wrote:\n> \"key id\" (thanks sipa).\n\n+1, short and accurate\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-11-15T00:15:58",
                "message_text_only": "On Thursday, November 14, 2013 11:11:26 PM Mark Friedenbach wrote:\n> On 11/14/13 3:01 PM, Luke-Jr wrote:\n> > I think we all know the problems with the term \"address\". People\n> > naturally compare it to postal addresses, email addresses, etc,\n> > which operate fundamentally different. I suggest that we switch to\n> > using \"invoice id\" to refer to what is now known as addresses, as\n> > that seems to get the more natural understanding to people. On the\n> > other hand, with the advent of the payment protocol, perhaps\n> > address/invoice id use will die out soon?\n> > \n> > Thoughts?\n> \n> \"key id\" (thanks sipa).\n\nTo be clear, I wasn't suggesting renaming scriptPubKey, which sipa was talking \nabout with \"key id\"; just the destination-for-transaction presented to\nend-users."
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-11-15T00:18:45",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 11/14/13 4:15 PM, Luke-Jr wrote:\n> On Thursday, November 14, 2013 11:11:26 PM Mark Friedenbach wrote:\n>> \"key id\" (thanks sipa).\n> \n> To be clear, I wasn't suggesting renaming scriptPubKey, which sipa\n> was talking about with \"key id\"; just the\n> destination-for-transaction presented to end-users.\n\nI was referencing a IRC conversation where sipa suggested \"key id\" as\na replacement for \"address\".\n\nMy only issue with \"invoice\" is possible confusion over the payment\nprotocol.\n\nMark\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.19 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJShWhlAAoJEAdzVfsmodw4SgUP/j52LdhCh/MZXrZNlKQhO57/\nRO2Z9Ul2lL/uAB/7/lydxDmds6Ad12QT285fwYycvnKY31F2flBI3j+Er8EDZPCs\n7O2eTWw9LD1DF45iBoU2PM1oXL+G1xsiNoyTKriLIH9n16sXr1/XvaeRa539gRhT\nnaM/r3AeW0mr6TZ/kh4/KRcFkkMsnyzrdFDwEpbpHlWPfz+QFQaJ6fI1rtgvD8xv\nv7zlRBi7WhSdPQhE+SmK97hxRRTK0qW+qSOYd5zbh9gZXRcbI5ys0erikORUVBjR\n/rMnKzK46uF8RYddXiMew/AdrFBb999MJsdI2Ci+HOezAzg5tyxf4IqKqk6FJcVK\nTC1KebM/TpH3MpAqYLpRo24/SAelLLCIPD9S+afz5ME+pD5cuMZNAnyqY9vVPpCb\nw9sEh5JksIVXXPugKM5ZW4VBjj/h6zOKD1fsjirgV0JzKKZm59JHSG9NL7XQhoSS\nzFb1SxH8jueH+xAIE6mCUDWK1uDPUphJ6ZMs2fk3opBeDEevLspR2g+U2XSdtB4p\nymV+sbsph+rT02Gf6d588WXlQHbD5KTaLbyq6XqFHI3UIhjhVs0mAda/Ey6S+PMS\no/5Q10gX9NKPinqQU/WYHD2pgEwRFhCCqSuAbfWzz4v2fyvUT3v9o/aDxXlU/ogF\nMVptUVrWXCJDUymG0mbq\n=EclJ\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Drak",
                "date": "2013-11-16T00:41:56",
                "message_text_only": "On 14 November 2013 23:01, Luke-Jr <luke at dashjr.org> wrote:\n\n> I wonder if it might make sense to bundle some other terminology fixups at\n> the\n> same time.\n>\n\nA very good idea.\n\n\n> Right now, Bitcoin-Qt has been using the term \"confirmations\" (plural) to\n> refer to how many blocks deep a transaction is buried. We also use the term\n> \"confirmation\" to refer to the point where a transaction is accepted as\n> paid.\n> IMO, the latter use makes sense, but the former leads to confusion\n> especially\n> in light of scamcoins which abuse this confusion to claim they have \"faster\n> confirmations\", implying that the actual confirmation occurs faster when it\n> really doesn't. \"5 blocks deep\" may not be more clear to laymen, but at\n> least\n> it makes it harder for people to confuse with actual confirmation.\n>\n\nI think people are more familiar with check clearance - \"the payment/check\nhas cleared\".\n\nIf \"confirmation\" and \"n confirmations\" together are problematic, I'd talk\nabout \"cleared payments\" and \"n confirmations\"\n\nSo \"a payment clears after one confirmation, but you might want to wait\nuntil the payment has been confirmed n times\".\nThen at least you are not using the same word for two different meanings\nand you're using stuff more familiar in popular lexicon.\nI dont think it's helpful for users if we use the word \"blocks\".\n\nWithout the technical details, I just explain to normal bitcoin users that\nthe Bitcoin network checks and confirms the payment is valid (multiple\ntimes).\n\nI think we all know the problems with the term \"address\". People naturally\n> compare it to postal addresses, email addresses, etc, which operate\n> fundamentally different. I suggest that we switch to using \"invoice id\" to\n> refer to what is now known as addresses, as that seems to get the more\n> natural\n> understanding to people. On the other hand, with the advent of the payment\n> protocol, perhaps address/invoice id use will die out soon?\n>\n\nI think \"key id\" is a bit alien at user level - it's not something they are\nused to.\nFor years, people had a problem with  \"email address\", instead using \"email\nnumber\" but they got there eventually. Most people nowadays use \"email\naddress\"\nSo \"payment address\" or \"bitcoin address\" make better sense here when\nqualified as a \"<foo> address\" and not just an \"address\"\n\nYou could also call it \"payment id\", but I dont think \"invoice id\" since\nno-one pays to an invoice id that's just a reference for a payment, not the\ndestination.\n\nPeople are very familiar with Paypal these days, and are familiar with\n\"paypal address\" or their \"paypal id\" so again I think valid contenders are\n\"bitcoin address\" or \"bitcoin id\".\n\nRegards,\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131116/4c212074/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-11-16T00:48:42",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 11/15/13 4:41 PM, Drak wrote:\n> For years, people had a problem with  \"email address\", instead\n> using \"email number\" but they got there eventually. Most people\n> nowadays use \"email address\" So \"payment address\" or \"bitcoin\n> address\" make better sense here when qualified as a \"<foo> address\"\n> and not just an \"address\"\n> \n> You could also call it \"payment id\", but I dont think \"invoice id\"\n> since no-one pays to an invoice id that's just a reference for a\n> payment, not the destination.\n> \n> People are very familiar with Paypal these days, and are familiar\n> with \"paypal address\" or their \"paypal id\" so again I think valid\n> contenders are \"bitcoin address\" or \"bitcoin id\".\n\nNo, no no. That's precisely the problem! Bitcoin pubkey-hashes are not\nlike email address, physical address, or paypal address. These latter\nthings are fixed pieces of information that stay constant over time.\nBitcoin keys, on the other hand, must be one-use-only. We want to\nbreak this association, not strengthen it.\n\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.19 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJShsDqAAoJEAdzVfsmodw4e+UQAJBk3N7y/1ph8k6K/tPn2RB4\nt0TiI46j0WuUghnCiDSOhQiL0EnUWUX8tCa6jH/3ASafBLKVey2LA7LeYoFZXpqJ\nQEk5S7+eroA6uzzhViDTcoJJ7yH+ivd6dioVApirfnHVYiq6TZuTULhN/5zM6g1J\nWehI9Rg2C7wj+I71yPJDeGAdtyOeX0iKQy3hN+q7+RIgeZC1viwsq81u6dzVjIZM\naPIk6S2VYHSUKhd7wSg+AprCV7jwftKhxDrW6R6KmOGYIG+JdqVnaErc5Wm7ujXk\nJnoh6UsQrcx9ck8I4sRTcbb5jGme1taN8RDcKifYqzTVQAr/ziVRqYY57fNAJMm2\nlJZ0ctVD1+UB96DzQB4wCuWRoFF5+I9kD2hoEAXA4O9tqcou48lTQ25DAnkcusd+\ndD0SfcRsgda8XqnWffGPYaW0E0dQuvu6elO+rzSh4DSCMkroKIvUwdak8Ah5M2lC\nDyE/efwO9csImbTc1QukedkPskbOqPOo36sH5GdmObKKFCpORIzIO0aDQE1NM2Ib\nrJurpU0iJ8eA+QT9lpyWG+jjahYpqyVhPcpfVsIewKhI0izBa352IYPbpCv/pdfM\noMO/tBfIwUW3jjav3zyFE47hAwistqfV4xds93K9rqpOmLtDIhSuzfmbuXwmciCM\nd7/3rYQ6FxtyNkEUa27L\n=5MWw\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-11-16T01:10:41",
                "message_text_only": "On Saturday, November 16, 2013 12:41:56 AM Drak wrote:\n> So \"a payment clears after one confirmation, but you might want to wait\n> until the payment has been confirmed n times\".\n> Then at least you are not using the same word for two different meanings\n> and you're using stuff more familiar in popular lexicon.\n> I dont think it's helpful for users if we use the word \"blocks\".\n\n\"Confirmations\" in a numeric context isn't correct, though. We're using to it \nbecause we've been using Bitcoin so long, but to the average person they would \nexpect it to mean something more than it is. If not referring to blocks, then \nperhaps \"witnessed N times\"?\n\n> For years, people had a problem with  \"email address\", instead using \"email\n> number\" but they got there eventually. Most people nowadays use \"email\n> address\"\n> So \"payment address\" or \"bitcoin address\" make better sense here when\n> qualified as a \"<foo> address\" and not just an \"address\"\n> \n> You could also call it \"payment id\", but I dont think \"invoice id\" since\n> no-one pays to an invoice id that's just a reference for a payment, not the\n> destination.\n> \n> People are very familiar with Paypal these days, and are familiar with\n> \"paypal address\" or their \"paypal id\" so again I think valid contenders are\n> \"bitcoin address\" or \"bitcoin id\".\n\nI think you might be demonstrating my point with regard to user confusion \nhere. Bitcoin addresses are *not* like email addresses, paypal ids, etc. \nBitcoin addresses aren't the destination - they're point to a destination (an \naccount in a wallet), but they also represent information such as who is \npaying and what for - in other words, a specific invoice.\n\nLuke"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-11-16T01:19:06",
                "message_text_only": "On Nov 15, 2013, at 05:10 PM, Luke-Jr <luke at dashjr.org> wrote:\n\nOn Saturday, November 16, 2013 12:41:56 AM Drak wrote:\nSo \"a payment clears after one confirmation, but you might want to wait\nuntil the payment has been confirmed n times\".\nThen at least you are not using the same word for two different meanings\nand you're using stuff more familiar in popular lexicon.\nI dont think it's helpful for users if we use the word \"blocks\".\n\n\"Confirmations\" in a numeric context isn't correct, though. We're using to it \nbecause we've been using Bitcoin so long, but to the average person they would \nexpect it to mean something more than it is. If not referring to blocks, then \nperhaps \"witnessed N times\"?\n\nWhy not call it \"Clearing\" for transactions with < 6 confirmations and \"Cleared\" for >= 6?\n\u00a0\nThe round ticker should be enough of an indication of the progress.\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131116/efd41732/attachment.html>"
            },
            {
                "author": "Drak",
                "date": "2013-11-16T01:19:22",
                "message_text_only": "On 16 November 2013 01:10, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Saturday, November 16, 2013 12:41:56 AM Drak wrote:\n> > So \"a payment clears after one confirmation, but you might want to wait\n> > until the payment has been confirmed n times\".\n> > Then at least you are not using the same word for two different meanings\n> > and you're using stuff more familiar in popular lexicon.\n> > I dont think it's helpful for users if we use the word \"blocks\".\n>\n> \"Confirmations\" in a numeric context isn't correct, though. We're using to\n> it\n> because we've been using Bitcoin so long, but to the average person they\n> would\n> expect it to mean something more than it is. If not referring to blocks,\n> then\n> perhaps \"witnessed N times\"?\n\n\nIf you are talking about user interface, I don't think you have to be\ntechnically correct. It must make sense to the user.\nA user cares about his balance, and did a payment \"go through\", and \"did my\npayment arrive/clear\".\n\nThe UI is for their benefit.\n\n\n> > For years, people had a problem with  \"email address\", instead using\n> \"email\n> > number\" but they got there eventually. Most people nowadays use \"email\n> > address\"\n> > So \"payment address\" or \"bitcoin address\" make better sense here when\n> > qualified as a \"<foo> address\" and not just an \"address\"\n> >\n> > You could also call it \"payment id\", but I dont think \"invoice id\" since\n> > no-one pays to an invoice id that's just a reference for a payment, not\n> the\n> > destination.\n> >\n> > People are very familiar with Paypal these days, and are familiar with\n> > \"paypal address\" or their \"paypal id\" so again I think valid contenders\n> are\n> > \"bitcoin address\" or \"bitcoin id\".\n>\n> I think you might be demonstrating my point with regard to user confusion\n> here. Bitcoin addresses are *not* like email addresses, paypal ids, etc.\n> Bitcoin addresses aren't the destination - they're point to a destination\n> (an\n> account in a wallet), but they also represent information such as who is\n> paying and what for - in other words, a specific invoice.\n\n\nMaybe, but again from the user's perspective they pay someone, and they\nreceive money - just like you do with paypal using an email address.\nThe technical bits in the middle dont matter to the user and trying to crap\nstuff in to be technically correct is just confusing to them.\n\nThe UI needs to be about the user and fit with his experience of the world.\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131116/49a7ee31/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-11-16T01:31:36",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 11/15/13 5:19 PM, Drak wrote:\n> Maybe, but again from the user's perspective they pay someone, and\n> they receive money - just like you do with paypal using an email\n> address. The technical bits in the middle dont matter to the user\n> and trying to crap stuff in to be technically correct is just\n> confusing to them.\n> \n> The UI needs to be about the user and fit with his experience of\n> the world.\n\nIt's not about being technically correct. It is about protecting the\nuser from grave breaches of privacy. It is for their own benefit that\nthey should not be reusing addresses, and if they understood why they\nwouldn't.\n\nUnfortunately calling it a \"bitcoin address\" and including an \"address\nbook\" in the reference client has had the effect of making people\nthink that these objects are like paypal address, or email addresses,\nbut they are not and they should not be treated the same.\n\nMark\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.19 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJShsr4AAoJEAdzVfsmodw46nIP/AlDcJh2ET9qYT2ZvddciTk3\ndtQDArCkwCW3kYbVjIFT8YtNFftEfkq/qBNnILipLJNN49QduAIlt3aetEE6eJBZ\noqYOV2R7GW2yhLDv/GrT6GnB1C9nQ4OuKC6RNpXX4bMpZSrbP9yfyyLqecF1tMBV\ni8De4XLz1uUvZOo/jwHNeYy/BAZktwdk5hWlgG2yKebRbqVX1Xv70Qb1cPpBgCWm\nuRDL3bqdZuh6i8NNDQpBqMJ/MP4ZWpIgdHkfO6a3QCq3H0JXyug4t5lkNngCrAI3\nKGlSOuYK4Fsfw97xQUBFIaSYFOU+yPDRQK4UGcTqWPLt5YHzUxBFNkOXSnVReudq\nEm/wlbDkPqm7R6by54fVkG85snJrwmTbD7uxGz2fe1LyzB3HhdOTZyZ1KiyDHqGA\nzDUFxmH0XNhvVcJvcSFlc38A54oOHTJmfJ3rxJU/q0/5N3ZIBdF8fQ4xIvXXDeeA\ndO+tul5q78tbO6xyTrbsHO8JRYt4Un8Hjc5mkdqp9gzA8beJFm5+jMZlGBfdl5jR\nlS9sW7QBxr6m+n2PJ97i+1CgoxTfzOh3jyj93G6Hqx3reTfCu5fSWUhwRnFzJXav\nqqPBP4Cl+6ocK7+4V1lyfAzMqpYx+GCJ1JZhD0hhwrGglgVPfE0bz7BUGea8U3+T\n0pCTlkhWzEbzDp7NtFdY\n=ShxL\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Eugen Leitl",
                "date": "2013-11-15T08:55:42",
                "message_text_only": "On Thu, Nov 14, 2013 at 04:07:58PM -0600, Allen Piscitello wrote:\n> Obviously the answer is to just display all fees and trading rates as BTC\n> or MBTC (.0000005 MBTC fee? how cheap!).  On a more serious note, the\n> transition should definitely be thought out well as it could be very\n> damaging to have this confusion, but I would prefer to do it only once\n> rather than twice.\n\nWhy not just using SI prefixes, as God intended.\n\nMBTC mega 10^6 \nkBTC kilo 10^3\n-    -    10^0\nmBTC milli 10^-3 \nuBTC micro 10^-6\nnBTC nano  10^-9 (at all possible?)"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-11-14T22:21:56",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 11/14/13 2:00 PM, Alan Reiner wrote:\n> Just keep in mind it will be a little awkward that 54.3 uBTC is\n> the smallest unit that can be transferred [easily] and the standard\n> fees are 500 uBTC.    It's not a deal breaker, it's just something\n> that needs to be taken into consideration when it comes to user\n> perception (which is one of the reasons we would make such a change\n> in the first place).\n> \n> \"Holy crap these fees are huge!  I thought Bitcoin didn't have\n> fees!\"\n\nWell.. they are huge. 20 cents suggested fee for a irrevocable\ntransaction?\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.19 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJShU0EAAoJEAdzVfsmodw4TlAP/33KPX3ypMZ0PyHQVg3OCX21\nhUXhTQBBO3JjO7x4HoNqdV0fApfCldq4cl/pNENG74inVuYNH+dUwUBIF6q6Qzfs\nRU45++yytPob28ZojgrQgZq7/lAvi9qvsg5tLMyLt72uf3Kz1whmiRAHI5qaJ/xW\n5w9LfOxXHFVkTQsUPzIjbD2kYAqUNILMzndKSv4YwRruYNm60gxCh2mQvgNr3s1Z\noGdLsPhx6AA1+Y6tgvnZVm71dwYUyg7OAafzGtpGEz953/cQwbgTqsZ3CrOiPk67\nOJ9XxRPREOyKTDYo1WcM1GlQAq9LOHkMcU5OWS7TX2DzZAbLc7TqmqSMuAHdn6d5\neh+AgRWN1ppgVzHaCfgGSfP4NdXHRuMbDvSSoeiP+JLZ1ateT1aesklOaPRFfieW\nNUJ61XAFWYCuVEK/ctUhSKMd19Rao23yuly+PtrMHvCw6Zn/LrpA4z2nD4vTFTXi\nWeFyYwjIDjKBeuQMfWg5I2uMpo+9vC/DA3cwPticV7+LD7wsATHVNWVzuHlmjgTX\nCPO4tVkqBPk7NsqDreOaVhvgnbAUHknyeDqguYS2LppDGu4P4XiOIHpS3reRyHuc\n/NbXAvDkR23JGQFeHgdR/E983TdsqUiH3US43Cy3ikEcWm79eNG0cPGuHHVZBjPh\nAACKjmPS+JR7rBAKFSGl\n=f9P7\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Drak",
                "date": "2013-11-14T22:32:42",
                "message_text_only": "On 14 November 2013 22:00, Alan Reiner <etotheipi at gmail.com> wrote:\n\n>  Just keep in mind it will be a little awkward that 54.3 uBTC is the\n> smallest unit that can be transferred [easily] and the standard fees are\n> 500 uBTC.    It's not a deal breaker,\n>\n\nThe fed was reduced to 0.0001/kb a while back...\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/485c885c/attachment.html>"
            },
            {
                "author": "Drak",
                "date": "2013-11-14T22:37:08",
                "message_text_only": "On 14 November 2013 22:32, Drak <drak at zikula.org> wrote:\n\n> On 14 November 2013 22:00, Alan Reiner <etotheipi at gmail.com> wrote:\n>\n>>  Just keep in mind it will be a little awkward that 54.3 uBTC is the\n>> smallest unit that can be transferred [easily] and the standard fees are\n>> 500 uBTC.    It's not a deal breaker,\n>>\n>\n> The fed was reduced to 0.0001/kb a while back...\n>\n\nHrm. Freudian slip... you know what I mean *fee, not fed.... :-)\n\n.... so in response to those saying the fees are $0.20, actually it's more\nlike $0.042 at current prices.\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/e4c182e4/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-11-14T22:03:03",
                "message_text_only": "Go straight to uBTC. Humans and existing computer systems handle numbers to\nthe left of the decimals just fine (HK Dollars, Yen). The opposite is\nuntrue (QuickBooks really does not like 3+ decimal places).\n\n     - Jeff\nOn Nov 14, 2013 4:40 PM, \"Mark Friedenbach\" <mark at monetize.io> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> For this reason I'm in favor of skipping mBTC and moving straight to\n> uBTC. Having eight, or even five decimal places is not intuitive to\n> the average user. Two decimal places is becoming standard for new\n> national currencies, and we wouldn't be too far from human scale\n> everyday numbers: 25.00uBTC ~= $0.01 currently. And I don't think very\n> many people on this list would consider bitcoin overvalued in the long\n> term perspective.\n>\n> Better to go through a confusing renumbering only once.\n>\n> Mark\n>\n> On 11/14/13 12:01 PM, Alan Reiner wrote:\n> > ... I'm also of the opinion that it's freakin' hard to change the\n> > base unit in such an established system.  There is no easy way to\n> > do this that doesn't cause more heartache than it's worth...\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG/MacGPG2 v2.0.19 (Darwin)\n> Comment: GPGTools - http://gpgtools.org\n> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n>\n> iQIcBAEBAgAGBQJShT2JAAoJEAdzVfsmodw4DXAQAIJTNbpwBGTXuFyaxXQULf20\n> hMs7OlQZSOZOdsmSiPv2augxzbpa2DhhZjiosrScSBCjxMeYd4S6WgTt/b8moAYR\n> HD8pm88JyCKDOd7bOmzTkgDOTBBFfH+islmOY9VTdeKGHeOHH6yyLMKwnUpa+S89\n> 4YtdzlIXAtfT37dpR5E4cHPmAYCbrRsNOB6j5ohVl2VqRou2vkwoJr/YvaW54M8i\n> ucIZyai2qjNWyJLcZC9QWi9Yw/W/n9QYE2mHyL0qWNaIrZVn6WGty8KpYq+i7aeU\n> 4N4UdtLT7FAhWYec9nmEec868WsUsd+H3/WSWViMinUKO4YA3cyxWDL7MTmTRsci\n> g0R4WGYCzMM3cEWz5ycf5KEBPH/nDlbqFmEartTffqKXgrK5Ohhw+28Iqw5KcDX8\n> SVx34lw2yHWmTeIMY8d3qYKqBdcsvixDUD3xvq+ZqEIa+bZw12s4LIzqmir84TB8\n> fB4bdq5GddXX0PK4pboXL+Nib0OVK72YgYnVs/ejlBmeiG8Ixoz4/ygR5MHm8jcw\n> tSiwH0xohOJWg3lJj0vZorubXoECcOqwPzsZkwnT9irbrvOuk2jCPvrkEC8U9fgA\n> XHgirStS49/lI/iUWrRchoTt5iuwG18G4+E81V/DMsrSkYlipuf2DlEXiapn3hWz\n> ccP053+6o5Rgpc7J1aa0\n> =QW1i\n> -----END PGP SIGNATURE-----\n>\n>\n> ------------------------------------------------------------------------------\n> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> Free app hosting. Or install the open source package on any LAMP server.\n> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/ac7bde5f/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-11-14T22:31:53",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nWhoops, this was meant for the list:\n\nDrawing on analogues from national currencies, it's also possible to\nalleviate the confusion by switching currency symbols, e.g. to XBT or\nNBC (New Bitcoin).\n\n1 XBC == 1 uBTC\n\nOn 11/14/13 2:03 PM, Jeff Garzik wrote:\n> Go straight to uBTC. Humans and existing computer systems handle\n> numbers to the left of the decimals just fine (HK Dollars, Yen).\n> The opposite is untrue (QuickBooks really does not like 3+ decimal\n> places).\n> \n> - Jeff\n> \n> On Nov 14, 2013 4:40 PM, \"Mark Friedenbach\" <mark at monetize.io \n> <mailto:mark at monetize.io>> wrote:\n> \n> For this reason I'm in favor of skipping mBTC and moving straight\n> to uBTC. Having eight, or even five decimal places is not intuitive\n> to the average user. Two decimal places is becoming standard for\n> new national currencies, and we wouldn't be too far from human\n> scale everyday numbers: 25.00uBTC ~= $0.01 currently. And I don't\n> think very many people on this list would consider bitcoin\n> overvalued in the long term perspective.\n> \n> Better to go through a confusing renumbering only once.\n> \n> Mark\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.19 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJShU9YAAoJEAdzVfsmodw4svUP/1THaWdSoy+/J1Z4QcuoEC5T\nLxyu5uN6d1TRb/fxZ1VQI+FJgRjJTT2zIBrk9lJHBuvYy6Gq6JUjHQZHbC7lhr9Q\nnDwM76LFOWPR0PDC9JLIeiDbkIimrARUjrKIMUJYCpQWHfLOZssWjDmLhAucAYcF\ngmObw+9M2fR7Xh7X2qOQt+xXWyAeeqCur2EClV+xNnhcyQXyXl2R9qdCF5ugy7k1\nnmHhMYap7q8TP2yrH/SloEGor56DICamVNnB91HOiN/QY9fZD0To6+RTJDsu/CR3\n01hRS+5JNVEQIBQ7cCxAO7kRxcxf9aDabEdS24r/alpuMg7/32wz/EqCSCqQtSnq\nMlvKifF5Bh+Y0hSNbNKdFMSes6fOhoLkl87ugKCkH8FQjI8rev3ke79tGKK92m01\nkmSBuzazwjVDNS/wwhPunkaiBaEAtzo1VCilibjjqLQEWdUBdsawsdlLDYb13mQD\nxPxDTKB2TR33Iri+mvdAai8qrLGHJUDDLVs5N0uK+tHbxqgznCkQ3NSINtuwFRLk\nL1Usvr3XNSc0Jh7lHfPP+voE1TAYsDD3DXmT0eAmIXXzo1E4J2UKzhI+M7kJM8M9\nqSzbC3TExmijd9LrOYdVX3Ab+LP6XDSPym4rBb0mAH8DOxKmFOYrNIwURnmGwJFA\njZi0WrHXHpg3ThXP8Jdj\n=J7x7\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Alan Reiner",
                "date": "2013-11-14T22:53:16",
                "message_text_only": "I really like the XBT idea.  It makes a lot of sense to match the ISO\ncurrency symbol (though the ISO guys will have to adjust the way they've\ndefined the \"XBT\").  And I do agree that going right to uBTC and\nskipping mBTC makes sense, too.\n\nI'd prefer them not be called \"micro bitcoins.\"  I really want to call\nthem \"microbes\" ... but I'm not sure that has the right flavor for money\ntransfer :)  \"Please give me 872 microbes\".  Perhaps we just call them\n\"bits.\"  Or even \"micros\" or \"microbits\".  As I write this, I realize\nthere's probably 872 threads on the forums about this already...\n\nBut we would want to promote a consistent term, to avoid further\nconfusion when people use different names for the new unit.  It's not\nguaranteed to be successful, but if we pick a good name, and build it\ninto the interface on the first release pushing the new unit, we have a\nchance to make the transition even easier.\n\n\n\n\n\nOn 11/14/2013 05:31 PM, Mark Friedenbach wrote:\n> Whoops, this was meant for the list:\n>\n> Drawing on analogues from national currencies, it's also possible to\n> alleviate the confusion by switching currency symbols, e.g. to XBT or\n> NBC (New Bitcoin).\n>\n> 1 XBC == 1 uBTC\n>\n> On 11/14/13 2:03 PM, Jeff Garzik wrote:\n> > Go straight to uBTC. Humans and existing computer systems handle\n> > numbers to the left of the decimals just fine (HK Dollars, Yen).\n> > The opposite is untrue (QuickBooks really does not like 3+ decimal\n> > places).\n>\n> > - Jeff\n>\n> > On Nov 14, 2013 4:40 PM, \"Mark Friedenbach\" <mark at monetize.io\n> > <mailto:mark at monetize.io>> wrote:\n>\n> > For this reason I'm in favor of skipping mBTC and moving straight\n> > to uBTC. Having eight, or even five decimal places is not intuitive\n> > to the average user. Two decimal places is becoming standard for\n> > new national currencies, and we wouldn't be too far from human\n> > scale everyday numbers: 25.00uBTC ~= $0.01 currently. And I don't\n> > think very many people on this list would consider bitcoin\n> > overvalued in the long term perspective.\n>\n> > Better to go through a confusing renumbering only once.\n>\n> > Mark\n>\n>\n------------------------------------------------------------------------------\n> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> Free app hosting. Or install the open source package on any LAMP server.\n> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n>\nhttp://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/c8bca901/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-11-14T23:01:45",
                "message_text_only": "On Thu, Nov 14, 2013 at 5:53 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n> I really like the XBT idea.  It makes a lot of sense to match the ISO\n\nIndeed.  The decimal place move would be an excellent time to switch.\n\n     Jeff"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-11-14T23:10:32",
                "message_text_only": "On Thursday, November 14, 2013 10:53:16 PM Alan Reiner wrote:\n> I really like the XBT idea.  It makes a lot of sense to match the ISO\n> currency symbol (though the ISO guys will have to adjust the way they've\n> defined the \"XBT\").  And I do agree that going right to uBTC and\n> skipping mBTC makes sense, too.\n> \n> I'd prefer them not be called \"micro bitcoins.\"  I really want to call\n> them \"microbes\" ... but I'm not sure that has the right flavor for money\n> transfer :)  \"Please give me 872 microbes\".  Perhaps we just call them\n> \"bits.\"  Or even \"micros\" or \"microbits\".  As I write this, I realize\n> there's probably 872 threads on the forums about this already...\n> \n> But we would want to promote a consistent term, to avoid further\n> confusion when people use different names for the new unit.  It's not\n> guaranteed to be successful, but if we pick a good name, and build it\n> into the interface on the first release pushing the new unit, we have a\n> chance to make the transition even easier.\n\nAs long as we're using SI units, IMO we should stick to SI. That means \"micro-\nbitcoins\". *Informally/spoken*, an abbreviation like \"mibicoins\" might make \nsense.\n\nLuke"
            },
            {
                "author": "Eugen Leitl",
                "date": "2013-11-15T09:23:39",
                "message_text_only": "On Thu, Nov 14, 2013 at 05:53:16PM -0500, Alan Reiner wrote:\n> I really like the XBT idea.  It makes a lot of sense to match the ISO\n\nI really don't. Just use the SI prefixes.\n\n> currency symbol (though the ISO guys will have to adjust the way they've\n> defined the \"XBT\").  And I do agree that going right to uBTC and\n> skipping mBTC makes sense, too.\n\nThe display units should be choosable by the user. \n \n> I'd prefer them not be called \"micro bitcoins.\"  I really want to call\n> them \"microbes\" ... but I'm not sure that has the right flavor for money\n\nWhy on earth?\n\n> transfer :)  \"Please give me 872 microbes\".  Perhaps we just call them\n> \"bits.\"  Or even \"micros\" or \"microbits\".  As I write this, I realize\n> there's probably 872 threads on the forums about this already...\n> \n> But we would want to promote a consistent term, to avoid further\n> confusion when people use different names for the new unit.  It's not\n> guaranteed to be successful, but if we pick a good name, and build it\n> into the interface on the first release pushing the new unit, we have a\n> chance to make the transition even easier.\n\nThe reason SI prefixes were invented is exactly to preven that case."
            },
            {
                "author": "Alex Kravets",
                "date": "2013-11-15T09:37:56",
                "message_text_only": "Hi guys,\n\nI've seen many many non-geeks be utterly intimidated and confused by\n0.000XXXXX quantities and/or mBTC & uBTC notation\n\n\nYes, $10 being rougnly 10,000 Won in South Korean is a great example where\nlarge amounts of units work very well in a major economy.\n\n\nFWIW,  I would prefer the entire switch-over be done *once* *and *at the\nsame time switching both BTC to XBT and using the following\n\n\nCurrency Code *: *XBT\nUnit Definition  *: *1 Bit = 100 Satoshis\n\nAddition benefit is splitting the term Bitcoin/bitcoin (as in Network and\ncurrency unit) into Bitcoin (network) and Bit (the unit).\n\n\nPerhaps this project/process should have a name and be listed on a road map\nsomewhere\n\n*BRCS: *Bitcoin Re-denomination and [Currency] Code Standardization project\n\n\nCheers ...\n\n\n\n\n\nOn Fri, Nov 15, 2013 at 1:23 AM, Eugen Leitl <eugen at leitl.org> wrote:\n\n> On Thu, Nov 14, 2013 at 05:53:16PM -0500, Alan Reiner wrote:\n> > I really like the XBT idea.  It makes a lot of sense to match the ISO\n>\n> I really don't. Just use the SI prefixes.\n>\n> > currency symbol (though the ISO guys will have to adjust the way they've\n> > defined the \"XBT\").  And I do agree that going right to uBTC and\n> > skipping mBTC makes sense, too.\n>\n> The display units should be choosable by the user.\n>\n> > I'd prefer them not be called \"micro bitcoins.\"  I really want to call\n> > them \"microbes\" ... but I'm not sure that has the right flavor for money\n>\n> Why on earth?\n>\n> > transfer :)  \"Please give me 872 microbes\".  Perhaps we just call them\n> > \"bits.\"  Or even \"micros\" or \"microbits\".  As I write this, I realize\n> > there's probably 872 threads on the forums about this already...\n> >\n> > But we would want to promote a consistent term, to avoid further\n> > confusion when people use different names for the new unit.  It's not\n> > guaranteed to be successful, but if we pick a good name, and build it\n> > into the interface on the first release pushing the new unit, we have a\n> > chance to make the transition even easier.\n>\n> The reason SI prefixes were invented is exactly to preven that case.\n>\n>\n> ------------------------------------------------------------------------------\n> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> Free app hosting. Or install the open source package on any LAMP server.\n> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nAlex Kravets <http://www.linkedin.com/in/akravets>       def redPill = '\nScala <http://www.scala-lang.org/>\n[[ brutal honesty <http://goo.gl/vwydt> is the best policy ]]\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/8eb4c3e6/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2013-11-15T09:59:59",
                "message_text_only": "While we're discussing the emotive (though actually of real relevance for\nbitcoin user comprehension and sentiment) I couldnt resisnt to add some\ntrivia reference it is amusing that a currency rarely in history had to\ndeflate (remove 0s) rather than inflate (add 0s).  Viz this hyperinflated\nfifty trillion zimbabwe dollar note I carry in my wallet for bitcoin\ncontrast/amusement purposes:\n\nhttp://www.ebay.com/itm/50-TRILLION-ZIMBABWE-DOLLARS-CURRENCY-MONEY-US-SELLER-/110671104681\n\nI like Alan's suggestion to show both to avoid denomination confusion.  That\nis the one danger, and high risk given irrevocability.\n\nAdam"
            },
            {
                "author": "Eugen Leitl",
                "date": "2013-11-15T10:39:17",
                "message_text_only": "On Fri, Nov 15, 2013 at 01:37:56AM -0800, Alex Kravets wrote:\n> Hi guys,\n\nAlex, you're top-posting and not trimming your replies.\n \n> I've seen many many non-geeks be utterly intimidated and confused by\n> 0.000XXXXX quantities and/or mBTC & uBTC notation\n\nYes, people really can't tell any difference between\nmm, cm, m, dm and km. Not.\n \n> \n> Yes, $10 being rougnly 10,000 Won in South Korean is a great example where\n> large amounts of units work very well in a major economy.\n\nYou're trying to invent a new symbol for the same unit, instead\nof using an established, generic system of prefixes.\nThat's pretty insane.\n \n> \n> FWIW,  I would prefer the entire switch-over be done *once* *and *at the\n> same time switching both BTC to XBT and using the following\n\nI would prefer that nobody does any such silly thing. \n \n> \n> Currency Code *: *XBT\n> Unit Definition  *: *1 Bit = 100 Satoshis\n> \n> Addition benefit is splitting the term Bitcoin/bitcoin (as in Network and\n> currency unit) into Bitcoin (network) and Bit (the unit).\n\nBitcoin is not measured in bits. Bits are units of information, and\nare measured in bits, kbits, Mbits, Gbits, Tbits, Pbits etc.\nhttp://en.wikipedia.org/wiki/Bit_rate\n \n> \n> Perhaps this project/process should have a name and be listed on a road map\n> somewhere\n\nWhat would a sane person think if he saw that on the roadmap, you think?\n \n> *BRCS: *Bitcoin Re-denomination and [Currency] Code Standardization project\n\nEver heard of SI unit prefixes?\n\nhttp://en.wikipedia.org/wiki/Metric_prefix\n \n> \n> Cheers ...\n> \n> \n> \n> \n> \n> On Fri, Nov 15, 2013 at 1:23 AM, Eugen Leitl <eugen at leitl.org> wrote:\n> \n> > On Thu, Nov 14, 2013 at 05:53:16PM -0500, Alan Reiner wrote:\n> > > I really like the XBT idea.  It makes a lot of sense to match the ISO\n> >\n> > I really don't. Just use the SI prefixes.\n> >\n> > > currency symbol (though the ISO guys will have to adjust the way they've\n> > > defined the \"XBT\").  And I do agree that going right to uBTC and\n> > > skipping mBTC makes sense, too.\n> >\n> > The display units should be choosable by the user.\n> >\n> > > I'd prefer them not be called \"micro bitcoins.\"  I really want to call\n> > > them \"microbes\" ... but I'm not sure that has the right flavor for money\n> >\n> > Why on earth?\n> >\n> > > transfer :)  \"Please give me 872 microbes\".  Perhaps we just call them\n> > > \"bits.\"  Or even \"micros\" or \"microbits\".  As I write this, I realize\n> > > there's probably 872 threads on the forums about this already...\n> > >\n> > > But we would want to promote a consistent term, to avoid further\n> > > confusion when people use different names for the new unit.  It's not\n> > > guaranteed to be successful, but if we pick a good name, and build it\n> > > into the interface on the first release pushing the new unit, we have a\n> > > chance to make the transition even easier.\n> >\n> > The reason SI prefixes were invented is exactly to preven that case.\n> >\n> >\n> > ------------------------------------------------------------------------------\n> > DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> > OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> > Free app hosting. Or install the open source package on any LAMP server.\n> > Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n> > http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> \n> \n> \n> -- \n> Alex Kravets <http://www.linkedin.com/in/akravets>       def redPill = '\n> Scala <http://www.scala-lang.org/>\n> [[ brutal honesty <http://goo.gl/vwydt> is the best policy ]]\n\n> ------------------------------------------------------------------------------\n> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> Free app hosting. Or install the open source package on any LAMP server.\n> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Wladimir",
                "date": "2013-11-15T07:18:52",
                "message_text_only": "On Thu, Nov 14, 2013 at 11:03 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> Go straight to uBTC. Humans and existing computer systems handle numbers\n> to the left of the decimals just fine (HK Dollars, Yen). The opposite is\n> untrue (QuickBooks really does not like 3+ decimal places).\n>\nI have used mBTC for a long time and never had cope with more than two\nnumbers to the right of the decimal (which is the norm in euro countries).\nSure, if we have another 100x+ price increase then \u03bcBTC is a better pick,\nbut right now that would give us *intimidating large numbers*.\n\nThough I have always liked the idea of moving to mBTC or \u03bcBTC, I want the\ncommunity to take initiative before switching over the default in the\nreference client. The alternative units should first be sufficiently known\nto the user base.\n\nIt has been possible for a long time to set the reference client to those\nunits (and all mentions of monetary value are accompanied with a unit).\nMaybe we should stealthily collect people's settings and switch over once a\nmajority switched *ducks*.\n\nOr, more seriously, maybe add a popup when upgrading the first time to 0.9\nwith an explanation where people can reconsider their unit setting?\n\nWladimir\n\n\n\n>      - Jeff\n> On Nov 14, 2013 4:40 PM, \"Mark Friedenbach\" <mark at monetize.io> wrote:\n>\n>> -----BEGIN PGP SIGNED MESSAGE-----\n>> Hash: SHA1\n>>\n>> For this reason I'm in favor of skipping mBTC and moving straight to\n>> uBTC. Having eight, or even five decimal places is not intuitive to\n>> the average user. Two decimal places is becoming standard for new\n>> national currencies, and we wouldn't be too far from human scale\n>> everyday numbers: 25.00uBTC ~= $0.01 currently. And I don't think very\n>> many people on this list would consider bitcoin overvalued in the long\n>> term perspective.\n>>\n>> Better to go through a confusing renumbering only once.\n>>\n>> Mark\n>>\n>> On 11/14/13 12:01 PM, Alan Reiner wrote:\n>> > ... I'm also of the opinion that it's freakin' hard to change the\n>> > base unit in such an established system.  There is no easy way to\n>> > do this that doesn't cause more heartache than it's worth...\n>> -----BEGIN PGP SIGNATURE-----\n>> Version: GnuPG/MacGPG2 v2.0.19 (Darwin)\n>> Comment: GPGTools - http://gpgtools.org\n>> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n>>\n>> iQIcBAEBAgAGBQJShT2JAAoJEAdzVfsmodw4DXAQAIJTNbpwBGTXuFyaxXQULf20\n>> hMs7OlQZSOZOdsmSiPv2augxzbpa2DhhZjiosrScSBCjxMeYd4S6WgTt/b8moAYR\n>> HD8pm88JyCKDOd7bOmzTkgDOTBBFfH+islmOY9VTdeKGHeOHH6yyLMKwnUpa+S89\n>> 4YtdzlIXAtfT37dpR5E4cHPmAYCbrRsNOB6j5ohVl2VqRou2vkwoJr/YvaW54M8i\n>> ucIZyai2qjNWyJLcZC9QWi9Yw/W/n9QYE2mHyL0qWNaIrZVn6WGty8KpYq+i7aeU\n>> 4N4UdtLT7FAhWYec9nmEec868WsUsd+H3/WSWViMinUKO4YA3cyxWDL7MTmTRsci\n>> g0R4WGYCzMM3cEWz5ycf5KEBPH/nDlbqFmEartTffqKXgrK5Ohhw+28Iqw5KcDX8\n>> SVx34lw2yHWmTeIMY8d3qYKqBdcsvixDUD3xvq+ZqEIa+bZw12s4LIzqmir84TB8\n>> fB4bdq5GddXX0PK4pboXL+Nib0OVK72YgYnVs/ejlBmeiG8Ixoz4/ygR5MHm8jcw\n>> tSiwH0xohOJWg3lJj0vZorubXoECcOqwPzsZkwnT9irbrvOuk2jCPvrkEC8U9fgA\n>> XHgirStS49/lI/iUWrRchoTt5iuwG18G4+E81V/DMsrSkYlipuf2DlEXiapn3hWz\n>> ccP053+6o5Rgpc7J1aa0\n>> =QW1i\n>> -----END PGP SIGNATURE-----\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n>> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n>> Free app hosting. Or install the open source package on any LAMP server.\n>> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> Free app hosting. Or install the open source package on any LAMP server.\n> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/64a9bcfe/attachment.html>"
            },
            {
                "author": "Wendell",
                "date": "2013-11-18T02:28:56",
                "message_text_only": "We're with uBTC too. Been waiting for the signal to do this, let's do it right after the fee system is improved.\n\n-wendell\n\ngrabhive.com | twitter.com/hivewallet | gpg: 6C0C9411\n\nOn Nov 15, 2013, at 6:03 AM, Jeff Garzik wrote:\n\n> Go straight to uBTC. Humans and existing computer systems handle numbers to\n> the left of the decimals just fine (HK Dollars, Yen). The opposite is\n> untrue (QuickBooks really does not like 3+ decimal places)."
            },
            {
                "author": "Wladimir",
                "date": "2013-11-15T10:45:41",
                "message_text_only": "Alan,\n\n I highly recommend that if we make any move towards this, that the\n> software show verification in both/all units.\n>\n> For instance, there should be 3 input fields, one for \"BTC\", one for\n> \"mBTC\" one for \"uBTC\".  As the user enters a value in one of the fields, it\n> would automatically update the other fields with the converted value as\n> they type.  This makes it really difficult to get it wrong... if you're\n> typing \"10\" into the BTC field, thinking it's mBTC, you'll see 10,000 mBTC\n> showing up in the other box as you type.  Similarly, it should display all\n> units on all verification windows.  Users may also use it for sanity\n> checking conversion between units.\n>\n\nGood point - For me its too much clutter to show multiple boxes everywhere\n(we already support unit conversion by changing the dropdown box in the\namount widget), but I'm going to make the verification dialog show the\ntotals in all three units. This will make people learn about other units\nwithout having to choose them consciously.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/01c469b0/attachment.html>"
            },
            {
                "author": "Eugen Leitl",
                "date": "2013-11-15T10:57:32",
                "message_text_only": "On Fri, Nov 15, 2013 at 11:45:41AM +0100, Wladimir wrote:\n\n> Good point - For me its too much clutter to show multiple boxes everywhere\n> (we already support unit conversion by changing the dropdown box in the\n> amount widget), but I'm going to make the verification dialog show the\n> totals in all three units. This will make people learn about other units\n> without having to choose them consciously.\n\nThat sounds like a good idea."
            },
            {
                "author": "Drak",
                "date": "2013-11-14T22:27:53",
                "message_text_only": "Given the meteoric growth many are now saying we should just switch\nstraight to Satoshi (uBTC) because it looks like we will be seeing BTC\nvalued in the thousands pretty soon. Small decimal numbers are certainly\nnot very attractive to the masses. There's no point switching to mBTC only\nto have to switch to uBTC later - especially when that later could be a lot\nsooner.\n\nUnless something is recommended/done by the bitcoin core developers I doubt\nmuch will change at bitcoin user/consumer level.\n\nDrak\n\n\nOn 14 November 2013 11:45, Melvin Carvalho <melvincarvalho at gmail.com> wrote:\n\n> Rationale\n> =======\n>\n> Given the recent rise in value there seems to be anecdotal evidence that 1\n> bitcoin being so high is putting off a lot of normal buyers, because they\n> feel that putting down $400+ and only getting \"1 coin\", or having to buy in\n> multiples of 1 whole coin, is too much.. only after it being explained that\n> they can buy fractional amounts to they regain interest, apparently\n> happening increasingly.\n>\n>\n> Straw Poll\n> ========\n>\n> 6 months ago there was a straw poll on this\n>\n> https://bitcointalk.org/index.php?topic=220322.0\n>\n> Roughly 2/3 of respondents favoured switching\n>\n> A further 20% said to switch after it hits 1000\n>\n> Satoshi's comments:\n> ================\n>\n> Eventually at most only 21 million coins for 6.8 billion people in the\n> world if it really gets huge.\n>\n> But don't worry, there are another 6 decimal places that aren't shown, for\n> a total of 8 decimal places internally.  It shows 1.00 but internally it's\n> 1.00000000.  If there's massive deflation in the future, the software could\n> show more decimal places.\n>\n> If it gets tiresome working with small numbers, we could change where the\n> display shows the decimal point.  Same amount of money, just different\n> convention for where the \",\"'s and \".\"'s go.  e.g. moving the decimal place\n> 3 places would mean if you had 1.00000 before, now it shows it as 1,000.00.\n>\n> https://bitcointalk.org/index.php?topic=44.msg267#msg267\n>\n>\n> Would now be a good time to start thinking about changing the default\n> display in the software.  Perhaps initially it could be a dropdown display\n> option, then at some point mbtc becomes the default?\n>\n>\n>\n> ------------------------------------------------------------------------------\n> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> Free app hosting. Or install the open source package on any LAMP server.\n> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131114/2209c344/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-11-15T00:05:06",
                "message_text_only": "On Thu, Nov 14, 2013 at 5:27 PM, Drak <drak at zikula.org> wrote:\n> Unless something is recommended/done by the bitcoin core developers I doubt\n> much will change at bitcoin user/consumer level.\n\nWhile the sentiment is appreciated, it seems important to gently push\nback a bit, and remind:\n\nThis is a decentralized currency, and we should avoid centralizing\ndecisions.  This is something that impacts the community at large, and\ndeserves input and discussion at every level.\n\nI would suggest posting on all possible forums \"proposal: switch to\nuBTC, labelled as ISO prefers (XBT?)\" and see what sort of discussion\nis generated.  If the support is broad, it will be plain from the\nresponses if there is a consensus.  Perhaps everyone will agree it is\nthe best course, and we can make an easy change.\n\nBut we need less \"core dev fiat\" not more :)\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Daniel F",
                "date": "2013-11-15T00:37:27",
                "message_text_only": "> This is a decentralized currency, and we should avoid centralizing\n> decisions.  This is something that impacts the community at large, and\n> deserves input and discussion at every level.\n> \n> I would suggest posting on all possible forums \"proposal: switch to\n> uBTC, labelled as ISO prefers (XBT?)\" and see what sort of discussion\n> is generated.  If the support is broad, it will be plain from the\n> responses if there is a consensus.  Perhaps everyone will agree it is\n> the best course, and we can make an easy change.\n> \n> But we need less \"core dev fiat\" not more :)\n> \nthis seems like such a paint-the-bikeshed problem that it's sure to\ngenerate vast volumes of discussion, waste a lot of people's time, and\nall for only a dubious (imo) gain. (case in point - here i am\ncontributing to it :) ).\n\ni agree that we should avoid centralizing this. i'll go a step further\nand note that the client already has a dropdown allowing individuals to\nchoose units. merchants are free to choose to price in different units.\nexchanges are free to denominate trade in different units.\n\ni suggest we just let the market do its thing and not get into trying to\n'make a decision' of any sort."
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-11-15T00:46:14",
                "message_text_only": "On 15 November 2013 01:37, Daniel F <nanotube at gmail.com> wrote:\n\n> > This is a decentralized currency, and we should avoid centralizing\n> > decisions.  This is something that impacts the community at large, and\n> > deserves input and discussion at every level.\n> >\n> > I would suggest posting on all possible forums \"proposal: switch to\n> > uBTC, labelled as ISO prefers (XBT?)\" and see what sort of discussion\n> > is generated.  If the support is broad, it will be plain from the\n> > responses if there is a consensus.  Perhaps everyone will agree it is\n> > the best course, and we can make an easy change.\n> >\n> > But we need less \"core dev fiat\" not more :)\n> >\n> this seems like such a paint-the-bikeshed problem that it's sure to\n> generate vast volumes of discussion, waste a lot of people's time, and\n> all for only a dubious (imo) gain. (case in point - here i am\n> contributing to it :) ).\n>\n> i agree that we should avoid centralizing this. i'll go a step further\n> and note that the client already has a dropdown allowing individuals to\n> choose units. merchants are free to choose to price in different units.\n> exchanges are free to denominate trade in different units.\n>\n> i suggest we just let the market do its thing and not get into trying to\n> 'make a decision' of any sort.\n>\n\nI do agree with you here\n\ne.g. I think the question of the ISO code (XBT vs BTC) is probably out of\nscope for this thread, and there was no clear consensus, when it came up on\nthe forums.\n\nAs a data point, the price of bitcoin has gone up roughly 1000x since\nsatoshi made his suggestion that the decimal point could move 3 places.\n\nI dont think it's a question of centralization, I was just seeking opinion\non what people felt about the reference implementation.  How about just\nchanging the default value in the dropdown from BTC -> to mBTC\n\nThe the other clients and exchange choose whether they want to follow suit\nor not\n\n>\n>\n>\n> ------------------------------------------------------------------------------\n> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> Free app hosting. Or install the open source package on any LAMP server.\n> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/5cd8c304/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2013-11-15T00:57:43",
                "message_text_only": "I disagree.  There's a real perception and usability issue with the\ncurrent interface combined with the current price.  People are\nintimidated by the current system, even though the price really reflects\nBitcoin starting to spread its wings (maybe prematurely, bubble-style,\nbut the price will have to get to this point eventually if Bitcoin will\nthrive at the target scale). \n\nBitcoin's learning curve is hard enough already.   As silly as it\nsounds, feeling \"insecure\" because you only 0.00032 BTC, and then using\ntoo many zeroes when paying for your smoothie are problems that can\nreally turn people off.  You say \"Let the market sort it out\". \nSometimes the market needs direction and consistency.  Without us doing\nanything, we just end up with fragmentation and confusion. \n\nI'd much prefer we reach a consensus on a path forward and push that\npath hard.  Because there's always resistance to change, and confusion\nalong the way.  The easier and more consistent we can make it, the\nsmoother it will be.  We want to avoid:\n\n\"Hey, I'll sell it to you for 382 microbes.\" \n\"What is a microbe?  Is that the same as a XBT?\"\n\"I don't know, my wallet uses NBC.\"\n\"Well how much BTC is it? Okay, just send me 0.00038200 BTC\"\n\"Four zeros after the decimal?\"\n\"Yeah... oh wait you just sent me 10x\"\n...\n\nAgain it sounds silly, but this is a real usability issue.\n\nOn 11/14/2013 07:37 PM, Daniel F wrote:\n>> This is a decentralized currency, and we should avoid centralizing\n>> decisions.  This is something that impacts the community at large, and\n>> deserves input and discussion at every level.\n>>\n>> I would suggest posting on all possible forums \"proposal: switch to\n>> uBTC, labelled as ISO prefers (XBT?)\" and see what sort of discussion\n>> is generated.  If the support is broad, it will be plain from the\n>> responses if there is a consensus.  Perhaps everyone will agree it is\n>> the best course, and we can make an easy change.\n>>\n>> But we need less \"core dev fiat\" not more :)\n>>\n> this seems like such a paint-the-bikeshed problem that it's sure to\n> generate vast volumes of discussion, waste a lot of people's time, and\n> all for only a dubious (imo) gain. (case in point - here i am\n> contributing to it :) ).\n>\n> i agree that we should avoid centralizing this. i'll go a step further\n> and note that the client already has a dropdown allowing individuals to\n> choose units. merchants are free to choose to price in different units.\n> exchanges are free to denominate trade in different units.\n>\n> i suggest we just let the market do its thing and not get into trying to\n> 'make a decision' of any sort.\n>\n> ------------------------------------------------------------------------------\n> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> Free app hosting. Or install the open source package on any LAMP server.\n> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Tamas Blummer",
                "date": "2013-11-15T05:21:26",
                "message_text_only": "Hi Jeff,\n\nsuch a vote is up there since March:\n\nhttps://bitcointalk.org/index.php?topic=149150.0\n\nVotes are in favor of it.\n\nAdvantages are obvious:\n\n1. having satoshi as 1/100 of the main unit is familiar to people like USD and cent\n2. All existing financial software can deal/store big numbers but typically only 2 decimals.\n3. Split could be linked with the introduction of the ISO code in one step.\n\nLets get it finally done.\n\nOn Thu, 14 Nov 2013 19:05:06 -0500 Jeff Garzik <jgarzik at bitpay.com> wrote:\n> would suggest posting on all possible forums \"proposal: switch to\n>uBTC, labelled as ISO prefers (XBT?)\" and see what sort of discussion\n>is generated.  If the support is broad, it will be plain from the\n>responses if there is a consensus.  Perhaps everyone will agree it is\n>the best course, and we can make an easy change.\n>\n>But we need less \"core dev fiat\" not more :)\n>\n>-- \n>Jeff Garzik\n>Senior Software Engineer and open source evangelist\n>BitPay, Inc.      https://bitpay.com/\n\nRegards,\n\nTam\u00e1s Blummer\nFounder, CEO\nhttp://bitsofproof.com\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/0c3e0bd4/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "moving the default display to mbtc",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Luke-Jr",
                "Tamas Blummer",
                "Wladimir",
                "Adam Back",
                "Alex Kravets",
                "Eugen Leitl",
                "Jean-Paul Kogelman",
                "Alan Reiner",
                "Wendell",
                "Jacob Lyles",
                "Mark Friedenbach",
                "Melvin Carvalho",
                "Allen Piscitello",
                "Drak",
                "Daniel F"
            ],
            "messages_count": 43,
            "total_messages_chars_count": 81821
        }
    },
    {
        "title": "[Bitcoin-development] Testnet under attack?",
        "thread_messages": [
            {
                "author": "Mike Belshe",
                "date": "2013-11-15T19:34:50",
                "message_text_only": "It appears that someone is minting new blocks literally every couple of\nseconds on the testnet chain right now.\n\nYou can see it on both blockexplorer:\n   http://blockexplorer.com/testnet\n\nand also btclook:\n  http://testnet.btclook.com/\n\nIs this something we should worry about?\n\nthanks,\nMike\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/344160f8/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-11-15T20:02:06",
                "message_text_only": "I don't use testnet much anymore, partly because it sometimes kind of\nbreaks like this. It's a public resource and people sometimes abuse it.\n\nYou can create your own local network with -regtest and that lets you mint\nnew blocks instantly. It's a much simpler way to do testing and app\ndevelopment.\n\n\nOn Fri, Nov 15, 2013 at 8:34 PM, Mike Belshe <mike at belshe.com> wrote:\n\n> It appears that someone is minting new blocks literally every couple of\n> seconds on the testnet chain right now.\n>\n> You can see it on both blockexplorer:\n>    http://blockexplorer.com/testnet\n>\n> and also btclook:\n>   http://testnet.btclook.com/\n>\n> Is this something we should worry about?\n>\n> thanks,\n> Mike\n>\n>\n>\n> ------------------------------------------------------------------------------\n> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> Free app hosting. Or install the open source package on any LAMP server.\n> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/635bddf7/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Testnet under attack?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Mike Belshe"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2009
        }
    },
    {
        "title": "[Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet master seed with optional encryption",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2013-11-16T02:47:09",
                "message_text_only": "On Mon, Jul 22, 2013 at 2:37 PM, Jean-Paul Kogelman\n<jeanpaulkogelman at me.com> wrote:\n>\n> I added a 2 byte 'weeks since 2013-01-01' field and updated the prefixes,\n> ranges and test vectors.\n>\n> The updated proposal lives here:\n> https://bitcointalk.org/index.php?topic=258678\n\nGreetings.  Any recent progress on this?\n\nDo we believe this proposal can replace BIP38?  If not, what are the\nlimitations that would prevent it from doing so?"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-11-16T03:09:07",
                "message_text_only": "I've made no changes since the last time I've mentioned it here on the list (when the BIP procedures were being discussed).\n\nThe last changes are:\n\n01-10-2013 - Expanded the salt to be prefix + date + checksum and renamed 'master seed' to 'root key'.\n24-07-2013 - Added user selectable KDF + parameters, encoded in the prefix.\n22-07-2013 - Added 2 byte creation date field, as a result, the prefix is expanded to 3 bytes.\n\nThe biggest difference between this proposal and BIP38 is that BIP38 allows a 3rd party to generate the encrypted private key + confirmation code from a passphrase code. Since this proposal is about encrypting a random value that's fed into HMAC-SHA512 and the presence of a partial hash of the root address, that's not possible.\n\n\n\n\n>> https://bitcointalk.org/index.php?topic=258678\n> \n> Greetings.  Any recent progress on this?\n> \n> Do we believe this proposal can replace BIP38?  If not, what are the\n> limitations that would prevent it from doing so?\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/4376a583/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131115/4376a583/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Proposal: Base58 encoded HD Wallet master seed with optional encryption",
            "categories": [
                "Bitcoin-development",
                "RFC"
            ],
            "authors": [
                "Jean-Paul Kogelman",
                "Gregory Maxwell"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1901
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin Network Simulator",
        "thread_messages": [
            {
                "author": "Rafael Brune",
                "date": "2013-11-17T16:43:14",
                "message_text_only": "Over the last days I spent some time working on a simple Bitcoin network simulator.\nIt is a stochastic event-based continuous-time simulation of Bitcoin miners\nexchanging messages and building block chains. It simulates latency, bandwidth \nand also verification speed but it currently does not simulate propagation/inclusion\nof transactions and instead uses random block sizes.\n\nThe simulator includes two examples, one for a 51% attack and the other is an\nimplementation of selfish mining (pretty much 1:1 as described in the paper).\nWith the random parameters I picked it seems like it pays off to mine selfish with\n>=30% of the hashing power - but take this with a huge grain of salt as this\nis with a very small network and randomly chosen parameters. And of course it\nis not a perfect replica of the real world network.\n\nSince this is based on my understanding of the Bitcoin network and protocol it\nwould be great if others would take a look and help improve it.\n\nThe project can be found on my github:\nhttps://github.com/rbrune/btcsim\n\nRegards,\n Rafael Brune"
            },
            {
                "author": "Christophe Biocca",
                "date": "2013-11-18T03:59:04",
                "message_text_only": "Beat me to it. My own implementation is here:\nhttps://github.com/christophebiocca/bitcoin-network-simulator\nSame basic principles, but I've been following the protocol message\nstructure as much as possible/Theoretical support for transaction\npropagation (I really want to see zero-conf stuff, and whether it works).\nRunning a network of 1000 full nodes (with 100 miners) for a week of\nsimulated time (with a normal hashrate) and empty blocks (except for the\ncoinbase transaction) takes about 30-60 seconds.\nUses nodejs, with the ultimate goal of having a network/chain visualization\nrunning in the browser (with the actual simulation running on a WebWorker\nto keep things responsive).\n\n\nOn Sun, Nov 17, 2013 at 11:43 AM, Rafael Brune <mail at rbrune.de> wrote:\n\n> Over the last days I spent some time working on a simple Bitcoin network\n> simulator.\n> It is a stochastic event-based continuous-time simulation of Bitcoin miners\n> exchanging messages and building block chains. It simulates latency,\n> bandwidth\n> and also verification speed but it currently does not simulate\n> propagation/inclusion\n> of transactions and instead uses random block sizes.\n>\n> The simulator includes two examples, one for a 51% attack and the other is\n> an\n> implementation of selfish mining (pretty much 1:1 as described in the\n> paper).\n> With the random parameters I picked it seems like it pays off to mine\n> selfish with\n> >=30% of the hashing power - but take this with a huge grain of salt as\n> this\n> is with a very small network and randomly chosen parameters. And of course\n> it\n> is not a perfect replica of the real world network.\n>\n> Since this is based on my understanding of the Bitcoin network and\n> protocol it\n> would be great if others would take a look and help improve it.\n>\n> The project can be found on my github:\n> https://github.com/rbrune/btcsim\n>\n> Regards,\n>  Rafael Brune\n>\n> ------------------------------------------------------------------------------\n> DreamFactory - Open Source REST & JSON Services for HTML5 & Native Apps\n> OAuth, Users, Roles, SQL, NoSQL, BLOB Storage and External API Access\n> Free app hosting. Or install the open source package on any LAMP server.\n> Sign up and see examples for AngularJS, jQuery, Sencha Touch and Native!\n> http://pubads.g.doubleclick.net/gampad/clk?id=63469471&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131117/0e733ccf/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Network Simulator",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Rafael Brune",
                "Christophe Biocca"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3788
        }
    },
    {
        "title": "[Bitcoin-development] Bounty: MacOS X Bitcoin Corruption Issue",
        "thread_messages": [
            {
                "author": "Warren Togami Jr.",
                "date": "2013-11-18T11:29:04",
                "message_text_only": "https://bitcointalk.org/index.php?topic=337294\nSince 0.8.x many MacOS X users have been experiencing periodic leveldb data\ncorruption issues.  While not fatal, it is very time consuming to recover\nfrom this corruption and upsetting that it happens often for some users.\n There have been three commits in Bitcoin that attempted to fix this, one\nfsync fix in leveldb, one in util.h, and a leveldb version upgrade to 1.13.\n My guess is that one of these commits fixed other corruption, but there\nremains at least one mysterious corruption issue on Mac where leveldb is\ncorrupted after a clean shutdown of Bitcoin-Qt.  After 5+ months we still\ndo not know why some users never see corruption while it happens often for\nothers.\n\nGavin has pledged 5 BTC, and Litecoin Dev pledges 200 LTC to start this\nbounty.  This thread has public addresses for Mac users to donate to\nincrease the incentive to fix this issue sooner.\n\nTo help please contribute detailed bug reports or links to more relevant\nbackground information pertaining to this corruption issue.\n\nhttps://bitcointalk.org/index.php?topic=320695.0\nFor testing purposes, please use either Bitcoin git master or Bitcoin 0.8.5\nOMG3, both of which contain all of the relevant leveldb fixes.  Testing\nwithout those fixes will not be helpful at this point.\n\nWarren\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131118/5f66c79a/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bounty: MacOS X Bitcoin Corruption Issue",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Warren Togami Jr."
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1491
        }
    },
    {
        "title": "[Bitcoin-development] Disentangling Crypto-Coin Mining: Timestamping, Proof-of-Publication, and Validation",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-11-19T11:00:23",
                "message_text_only": "In the design of Bitcoin mining serves two fundemental purposes:\nproof-of-publication and order consensus.  Bitcoin's design entangles\nthese fundemental purposes with other goals, such as validation and\ninitial coin distribution. This leads to a design that is fundementally\nunscalable, albeit effective on a small scale. Here we show how these\npurposes do not need to be entangled together, and how by disentangling\nthem we can achieve better scalability and validation of the system as a\nwhole.\n\nLet's first look at what role each of those purposes plays:\n\n* Proof-of-publication\n\nThe fundemental problem Bitcoin solves is the double-spend problem.\nAlice has some Bitcoins, and she wants to give them to Bob. She does\nthis by signing a digital message, a transaction, authorizing her coins\nto be assigned to Bob. However, Bob has no way of knowing if Alice has\nsigned a conflicting digital message assigning her coins to Charlie\ninstead.\n\nBitcoin solves this problem by providing a way for Alice and Bob to\nagree on a common place where *all* transactions will be published, the\nblockchain. Because the definition of a valid transaction is that it has\nbeen published in the blockchain, Bob can examine the contents of it,\nand be confident that no conflicting transaction exists.\n\n\n* Order consensus\n\nDue to the constraints of physics no decentralized system can provide\ninstantaneous and reliable proof of publication; for a non-ideal\nproof-of-publication system to be useful to solve the double-spend\nproblem we need to come to a consensus about the order in which data was\npublished. Once an order has been established, subsequent\ndouble-spending transactions can be declared invalid.\n\nNote that time itself isn't directly required, only the order of\ntransactions needs to be agreed upon.\n\n\n* Why validation is an optional optimization\n\nGiven only proof-of-publication, and a consensus on the order of\ntransactions, can we make a succesful crypto-coin system? Surprisingly,\nthe answere is yes!\n\nSuppose the rules of Bitcoin allowed blocks to contain invalid\ntransactions, in fact, suppose miners did no verification what-so-ever\nof the contents of the blocks they mined. Could Bob still be confident\nin the coins he received? Absolutely. There is consensus that the\ntransaction sending coins to Bob's came first and all prior transactions\ncan be verified as valid by checking the entire blockchain. In Bitcoin\nall full nodes do this and Bitcoin could succesfully operate on that\nmodel.\n\nWhat can't be supported in this model is SPV clients: the existance of a\ntransaction in a block tells you nothing about its validity, so no\ncompact proof can be made.\n\nReal-world examples of this issue can be found in the parasitic\nconsensus system Mastercoin, and to a lesser extent Colored Coins: the\nformer uses Bitcoin as a proof-of-publication, applying it's own\nindependent set of rules to that published data. The latter tracks the\ntransfer of assets in a way that takes advantage of the Bitcoin\nvalidation rules, but any given txout can only be proven to represent a\nparticular asset with a full chain of transfers back to the asset\ngenesis. It's notable that proponents of colored coins have proposed\nthat rules to validate colored coins be added to Bitcoin to make such\nlengthy proofs not required.(1)\n\n\n* What is the minimum domain for anti-double-spend proof-of-publication?\n\nAnswer: a single txout.\n\nSo what do we mean by \"domain\" here? In the existing Bitcoin system,\nmodulo validation, what Alice has proven to Bob is that an entire\ntransaction has been published. But that's not actually what Bob wants\nto know: he only wants to be sure that no transaction inputs, that is\nthe CTxIn data structure containing a valid scriptSig and reference to a\nprevious output, have been published that spend outputs of the\ntransaction he is accepting from Alice. Put more simply, he doesn't care\nwhere a double-spending transaction sends the money, he only cares that\nit exists at all.\n\nSuppose the blockchain consisted of blocks that only contained\ninformation on the transaction outputs spent by that block; essentially\na block is a list of CTxIn's. We also, add a third field to the existing\nCTxIn structure, hashTx, which commits to the rest of the transaction\nspending that txout.\n\nIf we sort the CTxIn's in each block by the hash of the *transaction\noutput being spent* and commit to them with a merkle tree, Bob can now\ndetermine if Alice's transaction is valid by checking the blockchain for\nblocks that contain a conflicting spend of any of the inputs to that\ntransaction. For each block the proof that the block does not contain a\ngiven spend is log2(n) in size.\n\nPut another way, Bob needs proof that some data, a valid CTxIn spending\nsome CTxOut, has never been published before. He only cares about that\nparticular CTxOut, so the \"publication domain\" he is interested in is\nthat single CTxOut. (note that we are considering a CTxIn as valid if\nits scriptSig satisfies the prevout's scriptPubKey; the rest of the\ntransaction may be invalid for other reasons)\n\nConversely a transaction is only considered to be valid if all CTxIn's\nin that transaction have been succesfully committed to the blockchain\nproper; there must be proof that every CTxIn has been published.\n\nNote the parallels to the authors TXO commitments proposal: where TXO\ncommitments commit to the outputs of every transaction in each block,\nhere we are committing to the inputs of all transactions.\n\n\n* Transaction validation\n\nMiners still are doing almost no validation in this scheme, other than\nthe fact that a block is only valid if the data in it follows some\norder. Bob still needs to examine the chain of of all transactions to\ndetermine if Alice's payment was valid. However, the information he\nneeds to do this is greatly diminished: log(n) * m per txout in that\nhistory, with n as the average number of spends in a block, and m the\nnumber of blocks each txout was in existance for.\n\nOf course, a practical implementation of this concept will have to rely\nheavily on direct transfer of proof data from payor to payee.\n\n\n** Privacy\n\nThe increased validation effort required on the part of Bob has an\nimportant privacy advantage: whole transactions need never appear in the\nblockchain at all. By incorporating a simple nonce into every\ntransaction blinding the miners have no way of linking CTxIn's to\nCTxOut's. This achieves the end goal of Adam Back's blind symmetric\ncommitments(3) but by leaving data out of the blockchain entirely rather\nthan blinding it.\n\n\n* The incentive to share blockchain data\n\nWhat is the incentive for miners have in the Bitcoin system to share\ntheir blocks? Why not just share the block header? Of course, the\nincentive is that unless they share their block data, all other miners\nin the system won't build upon their blocks because they have no idea if\nthey are valid or not.\n\nBut here there is no such thing as an invalid block! Blocks are just\narbitrary data with no specific meaning; whether or not the data is\nvalid in some sense is of no importance to the miner.\n\nWe can re-introduce this incentive by using a proof-of-work scheme that\nhas the requirement of posession of blockchain data. For instance we\ncould make the underlying computation be simply H(header + all previous\nblocks) - without the entire blockchain you would be unable to mine, or\neven validate the work done.\n\nOf course this is impractical for a number of reasons. But it's\nimportant to recognize that this simple scheme doesn't make any\ncompromises about the continual availability of blockchain data, and\nthus the ability for users to validate history. Any lesser scheme will\nbe a trade-off between that guarantee and other objectives.\n\n\n** Full TxIn set commitments\n\nSince we have to require miners to posess blockchain data, we might as\nwell make a simple optimization: rather than commit to the CTxIn's in a\nsingle block, commit to multiple blocks.\n\nFirst, let's require that every CTxIn present in a block be have a valid\nscriptSig for the corresponding scriptPubKey. To do this we need for\nCTxIn's to commit to the H(txout) they are spending, and include the\nCTxOut itself alongside the CTxIn in the block. Our hash commitments are\nnow chained as follows:\n\n    CTxIn -> CTxOut -> <merkle path> -> CTransaction -> <merkle path> -> CTxIn\n\nNow that we have valid and invalid CTxIn's, we might as well state that\nonly one valid CTxIn is allowed for a given CTxOut per block; proof that\na transaction is valid now doesn't have to take into account the problem\nof an *invalid* CTxIn that you need to prove is invalid and thus can be\nignored. This validation is stateless, requiring only local data, and\nstill provides for strong privacy.(a) A fraud proof in this scheme is\nsimply the CTxIn and CTxOut and merkle path, and the code required to\nevaluate it is the same code required to evaluate the data in a block.\n\na) Remember the mention of a per transaction nonce? It can be used\n   between the CTxOut and the rest of the CTransaction so that even if\n   every CTxIn and CTxOut is known, the actual transactions can't be\n   derived.\n\nNow that we have a definition of a valid CTxIn, we can naturally extend\nthis to define the set of all valid *oldest* CTxIn's. That is for any\ngiven CTxOut, we include the first valid CTxIn found in any block in\nthis set. This is analogous to the concept of the UTXO set, except that\nitems can only ever be added to the TxIn set.\n\nAs with UTXO commitments we can commit to the state of the TxIn set\nusing a merkelized radix tree whose tip is committed to by the block\nheader.\n\nOf course because a block can manipulate the contents of this set in an\ninvalid way, we've strongly reintroduced the notion of an invalid block,\nwe've re-introduced the incentive to share blockchain data, and we've\nre-introduced the requirement to have the full set of blockchain data to\nmine.\n\n\n*** Mining with incomplete blockchain data\n\nOr have we? This requirement isn't particularly strong as all: if other\nminers are usually honest we'll get away with just trusting them to mine\nonly valid blocks. Meanwhile the TxIn set in merkelized radix tree form\ncan have items added to it with only the subset of internal nodes\nmodified by your additions. A miner can easily produce blocks only\ncontaining CTxIn's spending CTxOuts from a subset of the possible\nvalues. Multiple such miners can even co-operate to produce blocks, with\neach handling a specific subset, as multiple radix trees are easily\ncomposed.(b)\n\nNote that Bitcoin is even worse in this regard: you don't need any\nprevious blockchain data at all to create a new block. For instance the\nauthors proof-of-tx-propagation concept(5) has the serious flaw that\nunscrupulous miners can use the proof that other miners are mining\ncertain transactions as a way to avoid doing any validation themselves.\n\n\n*** The deletion problem\n\nWhat happens if a copy of some of the txin set can't be found? With\nBitcoin this isn't an issue in theory - the miners are supposed to never\nextend blocks they haven't verified in full and they are supposed to\ndistribute blocks freely. Not necessarily a perfect assumption(6) but it\nmostly holds true.\n\nWith any type of sharded blockchain, it is easy to see that assumption\nmay not hold true. Now rather than a 51% attack in terms of total\nhashing power, you could have a \"local\" attack on some portion of the\ncommitment set. On the other hand, with the right set of incentives, the\nexistance of such an attack can be made to imply actual consent by those\nowning the coins involved, e.g. through proof-of-stake combined with the\nproof-of-work. (perhaps better described as proof-of-consent with\nproof-of-work)\n\n\n1) OP_CHECKCOLORVERIFY: soft-fork for native color coin support,\n   https://bitcointalk.org/index.php?topic=253385.0,\n   jl2012\n\n2) Merkle tree of open transactions for lite mode?\n   https://bitcointalk.org/index.php?topic=21995.0,\n   Gregory Maxwell\n\n3) Ultimate blockchain compression w/ trust-free lite nodes\n   https://bitcointalk.org/index.php?topic=88208.0\n   Alan C. Reiner\n\n4) blind symmetric commitment for stronger byzantine voting resilience,\n   http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg02184.html,\n   Adam Back\n\n5) Near-block broadcasts for proof of tx propagation,\n   http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg02868.html,\n   Peter Todd\n\n6) Perverse incentives to withhold blocks\n   http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg03200.html\n   Peter Todd\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000009f9403506c42540415272f68232a986e8f529d994bc917c1e\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131119/e1b491fe/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Disentangling Crypto-Coin Mining: Timestamping, Proof-of-Publication, and Validation",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 12922
        }
    },
    {
        "title": "[Bitcoin-development] Revisiting the BIPS process, a proposal",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2013-11-19T16:32:55",
                "message_text_only": "On Mon, Oct 21, 2013 at 4:30 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> BIP drafts are stored in git://github.com/bitcoin/bips.git/drafts/ and\n> are not automatically assigned a BIPS number.\n>\n\nAre we going to move ahead with this?\n\nIf so, I'm volunteering to create the repository and import the current\nBIPs from the wiki there (and convert from wiki markup to markdown where\nnecessary).\n\n2) Time passes.  Software for BIP drafts is developed, tested,\n> published, and publicly discussed in a typical open source manner.\n>\n\nPersonally I think it is useful to have a number as soon as a BIP can be\nimplemented, even if still in draft status; it gives something to refer to\nwhen mentioning a certain improvement proposal (in commit messages and such\nit could be called BIP xxx Draft).\nI don't think we are at risk of running out of numbers to assign any time\nsoon.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131119/295bc88c/attachment.html>"
            },
            {
                "author": "Drak",
                "date": "2013-11-19T16:53:38",
                "message_text_only": "On 19 November 2013 16:32, Wladimir <laanwj at gmail.com> wrote:\n\n>\n> On Mon, Oct 21, 2013 at 4:30 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>\n>> BIP drafts are stored in git://github.com/bitcoin/bips.git/drafts/ and\n>> are not automatically assigned a BIPS number.\n>>\n>\n> Are we going to move ahead with this?\n>\n> If so, I'm volunteering to create the repository and import the current\n> BIPs from the wiki there (and convert from wiki markup to markdown where\n> necessary).\n>\n> 2) Time passes.  Software for BIP drafts is developed, tested,\n>> published, and publicly discussed in a typical open source manner.\n>>\n>\n> Personally I think it is useful to have a number as soon as a BIP can be\n> implemented, even if still in draft status; it gives something to refer to\n> when mentioning a certain improvement proposal (in commit messages and such\n> it could be called BIP xxx Draft).\n> I don't think we are at risk of running out of numbers to assign any time\n> soon.\n>\n\nIt's quite normal for standards bodies to allocate numbers when in draft\nstatus. If they don't pass, they don't pass - they are clearly labelled\nDRAFTs.\n\n+1 on having things in a github repository. Much better for collaboration,\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131119/54f8eeca/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-11-19T17:01:26",
                "message_text_only": "On Tue, Nov 19, 2013 at 8:53 AM, Drak <drak at zikula.org> wrote:\n> It's quite normal for standards bodies to allocate numbers when in draft\n> status. If they don't pass, they don't pass - they are clearly labelled\n> DRAFTs.\n>\n> +1 on having things in a github repository. Much better for collaboration,\n\nThe IETF makes a clear distinction between individual proposals and\ndocuments which have been accepted by a working group. The former are\nnamed after their authors.  Work is not assigned a number until it is\ncomplete.\n\nI believe it is important to distinguish complete work that people\nshould be implementing from things which are incomplete,  and even\nmore important to distinguish the work of single parties.\n\nOtherwise you're going to get crap like BIP90: \"Increase the supply of\nBitcoins to 210 million\" being confused as an earnest proposal\nsupported by many that has traction."
            },
            {
                "author": "Drak",
                "date": "2013-11-19T17:07:58",
                "message_text_only": "On 19 November 2013 17:01, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Tue, Nov 19, 2013 at 8:53 AM, Drak <drak at zikula.org> wrote:\n> > It's quite normal for standards bodies to allocate numbers when in draft\n> > status. If they don't pass, they don't pass - they are clearly labelled\n> > DRAFTs.\n> >\n> > +1 on having things in a github repository. Much better for\n> collaboration,\n>\n> The IETF makes a clear distinction between individual proposals and\n> documents which have been accepted by a working group. The former are\n> named after their authors.  Work is not assigned a number until it is\n> complete.\n>\n> I believe it is important to distinguish complete work that people\n> should be implementing from things which are incomplete,  and even\n> more important to distinguish the work of single parties.\n>\n> Otherwise you're going to get crap like BIP90: \"Increase the supply of\n> Bitcoins to 210 million\" being confused as an earnest proposal\n> supported by many that has traction.\n>\n\nI wasnt suggesting people add drafts willy nilly to the repository.\nWhen working on a proposal you can work on it in your own fork and create a\nPR. When it's ready to be accepted as a working draft by the WG, then it\ncan be merged into the draft folder. At which point, PRs are made to that\ndraft copy until it gets into a ready state to become final. If passed,\nit's moved to the accepted/ folder.\n\nThis way random BIPS cannot be added to the drafts/ folder in the official\nrepo. They are only added once they are accepted as a working draft\nproposal by Gavin or whatever. Now you get all the niceties of github\nworkflow for collaboration and tweaking of the draft proposal.\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131119/ca9c1e2a/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2013-11-19T17:45:36",
                "message_text_only": "On Tue, Nov 19, 2013 at 6:01 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Tue, Nov 19, 2013 at 8:53 AM, Drak <drak at zikula.org> wrote:\n> > It's quite normal for standards bodies to allocate numbers when in draft\n> > status. If they don't pass, they don't pass - they are clearly labelled\n> > DRAFTs.\n> >\n> > +1 on having things in a github repository. Much better for\n> collaboration,\n>\n> The IETF makes a clear distinction between individual proposals and\n> documents which have been accepted by a working group. The former are\n> named after their authors.  Work is not assigned a number until it is\n> complete.\n>\n\nTalking about complete, BIP 40 and 41 don't even have an associated\ndocument:\nhttps://github.com/bitcoin/bips\nI agree that was over-eager number assigning.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131119/e8ebcf9a/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-11-19T17:54:34",
                "message_text_only": "On Tue, Nov 19, 2013 at 9:45 AM, Wladimir <laanwj at gmail.com> wrote:\n> Talking about complete, BIP 40 and 41 don't even have an associated\n> document:\n> https://github.com/bitcoin/bips\n> I agree that was over-eager number assigning.\n\nMaybe!  The subject matter its assigned for is already _widely_\ndeployed, for better or worse.\n\n(by comparison in the IETF, informational RFCs for already widely\ndeployed things are issued pretty liberally)\n\nI'm not sure how we should be distinguish BIPs which are documenting\nthings which are already defacto standards vs ones which are proposing\nthat people do something new.\n\nMostly I think we don't want the BIP itself being a lever to force\nsomething down people's throats, but rather the process should help\nbuild consensus and review about how to do something\u2014 and then\ndocument that consensus."
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-19T17:06:13",
                "message_text_only": "On Tue, Nov 19, 2013 at 05:32:55PM +0100, Wladimir wrote:\n> On Mon, Oct 21, 2013 at 4:30 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> \n> > BIP drafts are stored in git://github.com/bitcoin/bips.git/drafts/ and\n> > are not automatically assigned a BIPS number.\n> >\n> \n> Are we going to move ahead with this?\n> \n> If so, I'm volunteering to create the repository and import the current\n> BIPs from the wiki there (and convert from wiki markup to markdown where\n> necessary).\n\nI already did that:\n\nhttps://github.com/petertodd/bips\n\nGitHub can render MediaWiki just fine, so I think leaving the BIPs as\nMediaWiki is the way to go. New BIPs may want to use either markdown or\nMediaWiki - the latter has advantages in terms of formatting\ncapabilities over the former, particularly when math needs to be\ndisplayed.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131119/8fb8fb48/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Revisiting the BIPS process, a proposal",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gregory Maxwell",
                "Drak",
                "Wladimir",
                "Peter Todd"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 8148
        }
    },
    {
        "title": "[Bitcoin-development] Fwd:  Revisiting the BIPS process, a proposal",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2013-11-19T17:21:50",
                "message_text_only": "On Tue, Nov 19, 2013 at 6:06 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> On Tue, Nov 19, 2013 at 05:32:55PM +0100, Wladimir wrote:\n> > On Mon, Oct 21, 2013 at 4:30 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> >\n> > > BIP drafts are stored in git://github.com/bitcoin/bips.git/drafts/ and\n> > > are not automatically assigned a BIPS number.\n> > >\n> >\n> > Are we going to move ahead with this?\n> >\n> > If so, I'm volunteering to create the repository and import the current\n> > BIPs from the wiki there (and convert from wiki markup to markdown where\n> > necessary).\n>\n> I already did that:\n>\n> https://github.com/petertodd/bips\n>\n\nOk cool, I forked it into https://github.com/bitcoin/bips\n\n\n> GitHub can render MediaWiki just fine, so I think leaving the BIPs as\n> MediaWiki is the way to go. New BIPs may want to use either markdown or\n> MediaWiki - the latter has advantages in terms of formatting\n> capabilities over the former, particularly when math needs to be\n> displayed.\n>\n\nAgreed, I had no idea github could do that too.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131119/5589b9e8/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Fwd:  Revisiting the BIPS process, a proposal",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1231
        }
    },
    {
        "title": "[Bitcoin-development] Who or what is /Satoshi:0.8.99/Gangnam Style:2.1/ ?",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2013-11-21T13:48:10",
                "message_text_only": "I added some additional logging to my node and ran it for a few days.\nThere's a pull req open for my extra logging, it is quite trivial. Here's\nwhat it looks like:\n\n2013-11-21 13:41:04 AcceptToMemoryPool:\n5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n2d1bbcc2bf64dfcb57a2f0180b2607a48a34de4422c446929b26b190083bbfe7 (poolsz\n2087)\n2013-11-21 13:41:05 AcceptToMemoryPool:\n198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n28bb94978bdaa224faeafa95d03a0c4f5743396d6f592469c5ac2b64184ac716 (poolsz\n2088)\n2013-11-21 13:41:06 ERROR: AcceptToMemoryPool : nonstandard transaction:\ndust\n2013-11-21 13:41:06\n42323d9553e4c592d27765dc3ef9152c186cb7d67b08d783d72974a56085032d from\n82.68.68.254:39232 /Satoshi:0.8.1/ was not accepted into the memory pool:\ndust\n2013-11-21 13:41:06 AcceptToMemoryPool:\n198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n2fdb19e5e87d518b7b6bb7371d547a5f60c2bb056ba4522190460f0bc41b51fb (poolsz\n2089)\n2013-11-21 13:41:08 AcceptToMemoryPool:\n5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n52c8ed6a48f89d48b1152b67ac0b718a7aadb5f9a0c70c18b9b2fed058ca3323 (poolsz\n2090)\n2013-11-21 13:41:08 AcceptToMemoryPool:\n198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n980bbdbd4a6b365fa6f13fb5247eb6cb1e54847e490c3b7c3026d1548fb9efc6 (poolsz\n2091)\n2013-11-21 13:41:08 AcceptToMemoryPool:\n64.120.253.194:60896/Satoshi:0.8.99/Gangnam Style:2.0/ : accepted\n03f79c611bbdc1afa7afa67eb0bbd4d8bc86a730a7066622e2709ae506e61e0f (poolsz\n2092)\n2013-11-21 13:41:10 AcceptToMemoryPool:\n5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\naf8096ad637af1ca022a5146e07cf1fc6bfbec877935f9e114b279fcfe26c06d (poolsz\n2093)\n2013-11-21 13:41:10 AcceptToMemoryPool:\n5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n751c2415d058d45ca602fdf1b6490edb6e57fc718e914d628c11b17e25aac834 (poolsz\n2094)\n\n\n\nDespite that I have 87 connections from regular nodes, virtually all\ntransactions seen by my node are being announced by this modified software,\nwhich appears to run on several different machines.\n\nI am wondering if anyone out there knows/owns these nodes and if they are\nrelaying transactions without checking their validity. That seems the most\nlikely reason for how they are always able to win the race to be the first\nto announce to my node.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131121/c281e9e8/attachment.html>"
            },
            {
                "author": "Addy Yeow",
                "date": "2013-11-21T13:55:25",
                "message_text_only": "Try https://bitcointalk.org/index.php?action=profile;u=19897?\n\n\n\n\nOn Fri, Nov 22, 2013 at 12:48 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> I added some additional logging to my node and ran it for a few days.\n> There's a pull req open for my extra logging, it is quite trivial. Here's\n> what it looks like:\n>\n> 2013-11-21 13:41:04 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n> 2d1bbcc2bf64dfcb57a2f0180b2607a48a34de4422c446929b26b190083bbfe7 (poolsz\n> 2087)\n> 2013-11-21 13:41:05 AcceptToMemoryPool: 198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n> 28bb94978bdaa224faeafa95d03a0c4f5743396d6f592469c5ac2b64184ac716 (poolsz\n> 2088)\n> 2013-11-21 13:41:06 ERROR: AcceptToMemoryPool : nonstandard transaction:\n> dust\n> 2013-11-21 13:41:06\n> 42323d9553e4c592d27765dc3ef9152c186cb7d67b08d783d72974a56085032d from\n> 82.68.68.254:39232 /Satoshi:0.8.1/ was not accepted into the memory pool:\n> dust\n> 2013-11-21 13:41:06 AcceptToMemoryPool: 198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n> 2fdb19e5e87d518b7b6bb7371d547a5f60c2bb056ba4522190460f0bc41b51fb (poolsz\n> 2089)\n> 2013-11-21 13:41:08 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n> 52c8ed6a48f89d48b1152b67ac0b718a7aadb5f9a0c70c18b9b2fed058ca3323 (poolsz\n> 2090)\n> 2013-11-21 13:41:08 AcceptToMemoryPool: 198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n> 980bbdbd4a6b365fa6f13fb5247eb6cb1e54847e490c3b7c3026d1548fb9efc6 (poolsz\n> 2091)\n> 2013-11-21 13:41:08 AcceptToMemoryPool: 64.120.253.194:60896/Satoshi:0.8.99/Gangnam Style:2.0/ : accepted\n> 03f79c611bbdc1afa7afa67eb0bbd4d8bc86a730a7066622e2709ae506e61e0f (poolsz\n> 2092)\n> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n> af8096ad637af1ca022a5146e07cf1fc6bfbec877935f9e114b279fcfe26c06d (poolsz\n> 2093)\n> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n> 751c2415d058d45ca602fdf1b6490edb6e57fc718e914d628c11b17e25aac834 (poolsz\n> 2094)\n>\n>\n>\n> Despite that I have 87 connections from regular nodes, virtually all\n> transactions seen by my node are being announced by this modified software,\n> which appears to run on several different machines.\n>\n> I am wondering if anyone out there knows/owns these nodes and if they are\n> relaying transactions without checking their validity. That seems the most\n> likely reason for how they are always able to win the race to be the first\n> to announce to my node.\n>\n>\n> ------------------------------------------------------------------------------\n> Shape the Mobile Experience: Free Subscription\n> Software experts and developers: Be at the forefront of tech innovation.\n> Intel(R) Software Adrenaline delivers strategic insight and game-changing\n> conversations that shape the rapidly evolving mobile landscape. Sign up\n> now.\n> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131122/73033547/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-11-21T14:47:59",
                "message_text_only": "Thanks. By the way, your bitnodes site is excellent. Thanks for doing that.\nIf you're in the mood for extending it, it'd be great to gather and chart\ndata on block and tx propagation times.\n\nDo you think the recent explosion in running nodes is real, or due to some\nkind of custom experimental thing?\n\n\nOn Thu, Nov 21, 2013 at 2:55 PM, Addy Yeow <ayeowch at gmail.com> wrote:\n\n> Try https://bitcointalk.org/index.php?action=profile;u=19897?\n>\n>\n>\n>\n> On Fri, Nov 22, 2013 at 12:48 AM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> I added some additional logging to my node and ran it for a few days.\n>> There's a pull req open for my extra logging, it is quite trivial. Here's\n>> what it looks like:\n>>\n>> 2013-11-21 13:41:04 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>> 2d1bbcc2bf64dfcb57a2f0180b2607a48a34de4422c446929b26b190083bbfe7 (poolsz\n>> 2087)\n>> 2013-11-21 13:41:05 AcceptToMemoryPool: 198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>> 28bb94978bdaa224faeafa95d03a0c4f5743396d6f592469c5ac2b64184ac716 (poolsz\n>> 2088)\n>> 2013-11-21 13:41:06 ERROR: AcceptToMemoryPool : nonstandard transaction:\n>> dust\n>> 2013-11-21 13:41:06\n>> 42323d9553e4c592d27765dc3ef9152c186cb7d67b08d783d72974a56085032d from\n>> 82.68.68.254:39232 /Satoshi:0.8.1/ was not accepted into the memory\n>> pool: dust\n>> 2013-11-21 13:41:06 AcceptToMemoryPool: 198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>> 2fdb19e5e87d518b7b6bb7371d547a5f60c2bb056ba4522190460f0bc41b51fb (poolsz\n>> 2089)\n>> 2013-11-21 13:41:08 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>> 52c8ed6a48f89d48b1152b67ac0b718a7aadb5f9a0c70c18b9b2fed058ca3323 (poolsz\n>> 2090)\n>> 2013-11-21 13:41:08 AcceptToMemoryPool: 198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>> 980bbdbd4a6b365fa6f13fb5247eb6cb1e54847e490c3b7c3026d1548fb9efc6 (poolsz\n>> 2091)\n>> 2013-11-21 13:41:08 AcceptToMemoryPool: 64.120.253.194:60896/Satoshi:0.8.99/Gangnam Style:2.0/ : accepted\n>> 03f79c611bbdc1afa7afa67eb0bbd4d8bc86a730a7066622e2709ae506e61e0f (poolsz\n>> 2092)\n>> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>> af8096ad637af1ca022a5146e07cf1fc6bfbec877935f9e114b279fcfe26c06d (poolsz\n>> 2093)\n>> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>> 751c2415d058d45ca602fdf1b6490edb6e57fc718e914d628c11b17e25aac834 (poolsz\n>> 2094)\n>>\n>>\n>>\n>> Despite that I have 87 connections from regular nodes, virtually all\n>> transactions seen by my node are being announced by this modified software,\n>> which appears to run on several different machines.\n>>\n>> I am wondering if anyone out there knows/owns these nodes and if they are\n>> relaying transactions without checking their validity. That seems the most\n>> likely reason for how they are always able to win the race to be the first\n>> to announce to my node.\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Shape the Mobile Experience: Free Subscription\n>> Software experts and developers: Be at the forefront of tech innovation.\n>> Intel(R) Software Adrenaline delivers strategic insight and game-changing\n>> conversations that shape the rapidly evolving mobile landscape. Sign up\n>> now.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131121/9f4acdfd/attachment.html>"
            },
            {
                "author": "Addy Yeow",
                "date": "2013-11-22T10:55:21",
                "message_text_only": "Hi Mike,\n\nI am glad you are still following up with Bitnodes. The recent spike in\nnodes count should probably be taken with a grain of salt; run #231 (\nhttp://getaddr.bitnodes.io/231/) does appear artificial to me, i.e.\npotentially bogus nodes being added. I am still working on a more in depth\nanalysis on the data.\n\nThere are quite some TODOs for the project at the moment for the next\ncouple of months. I have included propagation data as well into the list.\n\nCheers,\nAddy\n\n\nOn Fri, Nov 22, 2013 at 1:47 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> Thanks. By the way, your bitnodes site is excellent. Thanks for doing\n> that. If you're in the mood for extending it, it'd be great to gather and\n> chart data on block and tx propagation times.\n>\n> Do you think the recent explosion in running nodes is real, or due to some\n> kind of custom experimental thing?\n>\n>\n> On Thu, Nov 21, 2013 at 2:55 PM, Addy Yeow <ayeowch at gmail.com> wrote:\n>\n>> Try https://bitcointalk.org/index.php?action=profile;u=19897?\n>>\n>>\n>>\n>>\n>> On Fri, Nov 22, 2013 at 12:48 AM, Mike Hearn <mike at plan99.net> wrote:\n>>\n>>>  I added some additional logging to my node and ran it for a few days.\n>>> There's a pull req open for my extra logging, it is quite trivial. Here's\n>>> what it looks like:\n>>>\n>>> 2013-11-21 13:41:04 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>>> 2d1bbcc2bf64dfcb57a2f0180b2607a48a34de4422c446929b26b190083bbfe7 (poolsz\n>>> 2087)\n>>> 2013-11-21 13:41:05 AcceptToMemoryPool: 198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>>> 28bb94978bdaa224faeafa95d03a0c4f5743396d6f592469c5ac2b64184ac716 (poolsz\n>>> 2088)\n>>> 2013-11-21 13:41:06 ERROR: AcceptToMemoryPool : nonstandard transaction:\n>>> dust\n>>> 2013-11-21 13:41:06\n>>> 42323d9553e4c592d27765dc3ef9152c186cb7d67b08d783d72974a56085032d from\n>>> 82.68.68.254:39232 /Satoshi:0.8.1/ was not accepted into the memory\n>>> pool: dust\n>>> 2013-11-21 13:41:06 AcceptToMemoryPool: 198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>>> 2fdb19e5e87d518b7b6bb7371d547a5f60c2bb056ba4522190460f0bc41b51fb (poolsz\n>>> 2089)\n>>> 2013-11-21 13:41:08 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>>> 52c8ed6a48f89d48b1152b67ac0b718a7aadb5f9a0c70c18b9b2fed058ca3323 (poolsz\n>>> 2090)\n>>> 2013-11-21 13:41:08 AcceptToMemoryPool: 198.12.127.2:29057/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>>> 980bbdbd4a6b365fa6f13fb5247eb6cb1e54847e490c3b7c3026d1548fb9efc6 (poolsz\n>>> 2091)\n>>> 2013-11-21 13:41:08 AcceptToMemoryPool: 64.120.253.194:60896/Satoshi:0.8.99/Gangnam Style:2.0/ : accepted\n>>> 03f79c611bbdc1afa7afa67eb0bbd4d8bc86a730a7066622e2709ae506e61e0f (poolsz\n>>> 2092)\n>>> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>>> af8096ad637af1ca022a5146e07cf1fc6bfbec877935f9e114b279fcfe26c06d (poolsz\n>>> 2093)\n>>> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834/Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>>> 751c2415d058d45ca602fdf1b6490edb6e57fc718e914d628c11b17e25aac834 (poolsz\n>>> 2094)\n>>>\n>>>\n>>>\n>>> Despite that I have 87 connections from regular nodes, virtually all\n>>> transactions seen by my node are being announced by this modified software,\n>>> which appears to run on several different machines.\n>>>\n>>> I am wondering if anyone out there knows/owns these nodes and if they\n>>> are relaying transactions without checking their validity. That seems the\n>>> most likely reason for how they are always able to win the race to be the\n>>> first to announce to my node.\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Shape the Mobile Experience: Free Subscription\n>>> Software experts and developers: Be at the forefront of tech innovation.\n>>> Intel(R) Software Adrenaline delivers strategic insight and game-changing\n>>> conversations that shape the rapidly evolving mobile landscape. Sign up\n>>> now.\n>>>\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131122/b7408390/attachment.html>"
            },
            {
                "author": "Arthur Gervais",
                "date": "2013-11-21T15:02:27",
                "message_text_only": "Hello Mike,\n\nYou can see the three nodes from nogleg on\nhttps://blockchain.info/hub-nodes. They also relay the most to\nblockchain.info.\n\nArthur\n\nOn 21/11/13 14:55, Addy Yeow wrote:\n> Try https://bitcointalk.org/index.php?action=profile;u=19897?\n> \n> \n> \n> \n> On Fri, Nov 22, 2013 at 12:48 AM, Mike Hearn <mike at plan99.net\n> <mailto:mike at plan99.net>> wrote:\n> \n>     I added some additional logging to my node and ran it for a few\n>     days. There's a pull req open for my extra logging, it is quite\n>     trivial. Here's what it looks like:\n> \n>     2013-11-21 13:41:04 AcceptToMemoryPool: 5.9.24.81:7834\n>     <http://5.9.24.81:7834> /Satoshi:0.8.99/Gangnam Style:2.1/ :\n>     accepted\n>     2d1bbcc2bf64dfcb57a2f0180b2607a48a34de4422c446929b26b190083bbfe7\n>     (poolsz 2087)\n>     2013-11-21 13:41:05 AcceptToMemoryPool: 198.12.127.2:29057\n>     <http://198.12.127.2:29057> /Satoshi:0.8.99/Gangnam Style:2.1/ :\n>     accepted\n>     28bb94978bdaa224faeafa95d03a0c4f5743396d6f592469c5ac2b64184ac716\n>     (poolsz 2088)\n>     2013-11-21 13:41:06 ERROR: AcceptToMemoryPool : nonstandard\n>     transaction: dust\n>     2013-11-21 13:41:06\n>     42323d9553e4c592d27765dc3ef9152c186cb7d67b08d783d72974a56085032d\n>     from 82.68.68.254:39232 <http://82.68.68.254:39232> /Satoshi:0.8.1/\n>     was not accepted into the memory pool: dust\n>     2013-11-21 13:41:06 AcceptToMemoryPool: 198.12.127.2:29057\n>     <http://198.12.127.2:29057> /Satoshi:0.8.99/Gangnam Style:2.1/ :\n>     accepted\n>     2fdb19e5e87d518b7b6bb7371d547a5f60c2bb056ba4522190460f0bc41b51fb\n>     (poolsz 2089)\n>     2013-11-21 13:41:08 AcceptToMemoryPool: 5.9.24.81:7834\n>     <http://5.9.24.81:7834> /Satoshi:0.8.99/Gangnam Style:2.1/ :\n>     accepted\n>     52c8ed6a48f89d48b1152b67ac0b718a7aadb5f9a0c70c18b9b2fed058ca3323\n>     (poolsz 2090)\n>     2013-11-21 13:41:08 AcceptToMemoryPool: 198.12.127.2:29057\n>     <http://198.12.127.2:29057> /Satoshi:0.8.99/Gangnam Style:2.1/ :\n>     accepted\n>     980bbdbd4a6b365fa6f13fb5247eb6cb1e54847e490c3b7c3026d1548fb9efc6\n>     (poolsz 2091)\n>     2013-11-21 13:41:08 AcceptToMemoryPool: 64.120.253.194:60896\n>     <http://64.120.253.194:60896> /Satoshi:0.8.99/Gangnam Style:2.0/ :\n>     accepted\n>     03f79c611bbdc1afa7afa67eb0bbd4d8bc86a730a7066622e2709ae506e61e0f\n>     (poolsz 2092)\n>     2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834\n>     <http://5.9.24.81:7834> /Satoshi:0.8.99/Gangnam Style:2.1/ :\n>     accepted\n>     af8096ad637af1ca022a5146e07cf1fc6bfbec877935f9e114b279fcfe26c06d\n>     (poolsz 2093)\n>     2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834\n>     <http://5.9.24.81:7834> /Satoshi:0.8.99/Gangnam Style:2.1/ :\n>     accepted\n>     751c2415d058d45ca602fdf1b6490edb6e57fc718e914d628c11b17e25aac834\n>     (poolsz 2094)\n> \n> \n> \n>     Despite that I have 87 connections from regular nodes, virtually all\n>     transactions seen by my node are being announced by this modified\n>     software, which appears to run on several different machines.\n> \n>     I am wondering if anyone out there knows/owns these nodes and if\n>     they are relaying transactions without checking their validity. That\n>     seems the most likely reason for how they are always able to win the\n>     race to be the first to announce to my node.\n> \n>     ------------------------------------------------------------------------------\n>     Shape the Mobile Experience: Free Subscription\n>     Software experts and developers: Be at the forefront of tech innovation.\n>     Intel(R) Software Adrenaline delivers strategic insight and\n>     game-changing\n>     conversations that shape the rapidly evolving mobile landscape. Sign\n>     up now.\n>     http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Shape the Mobile Experience: Free Subscription\n> Software experts and developers: Be at the forefront of tech innovation.\n> Intel(R) Software Adrenaline delivers strategic insight and game-changing \n> conversations that shape the rapidly evolving mobile landscape. Sign up now. \n> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-11-21T15:27:30",
                "message_text_only": "Is that Matt's relay, which has reduced validity checking?\n\n\nOn Thu, Nov 21, 2013 at 8:48 AM, Mike Hearn <mike at plan99.net> wrote:\n> I added some additional logging to my node and ran it for a few days.\n> There's a pull req open for my extra logging, it is quite trivial. Here's\n> what it looks like:\n>\n> 2013-11-21 13:41:04 AcceptToMemoryPool: 5.9.24.81:7834\n> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n> 2d1bbcc2bf64dfcb57a2f0180b2607a48a34de4422c446929b26b190083bbfe7 (poolsz\n> 2087)\n> 2013-11-21 13:41:05 AcceptToMemoryPool: 198.12.127.2:29057\n> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n> 28bb94978bdaa224faeafa95d03a0c4f5743396d6f592469c5ac2b64184ac716 (poolsz\n> 2088)\n> 2013-11-21 13:41:06 ERROR: AcceptToMemoryPool : nonstandard transaction:\n> dust\n> 2013-11-21 13:41:06\n> 42323d9553e4c592d27765dc3ef9152c186cb7d67b08d783d72974a56085032d from\n> 82.68.68.254:39232 /Satoshi:0.8.1/ was not accepted into the memory pool:\n> dust\n> 2013-11-21 13:41:06 AcceptToMemoryPool: 198.12.127.2:29057\n> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n> 2fdb19e5e87d518b7b6bb7371d547a5f60c2bb056ba4522190460f0bc41b51fb (poolsz\n> 2089)\n> 2013-11-21 13:41:08 AcceptToMemoryPool: 5.9.24.81:7834\n> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n> 52c8ed6a48f89d48b1152b67ac0b718a7aadb5f9a0c70c18b9b2fed058ca3323 (poolsz\n> 2090)\n> 2013-11-21 13:41:08 AcceptToMemoryPool: 198.12.127.2:29057\n> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n> 980bbdbd4a6b365fa6f13fb5247eb6cb1e54847e490c3b7c3026d1548fb9efc6 (poolsz\n> 2091)\n> 2013-11-21 13:41:08 AcceptToMemoryPool: 64.120.253.194:60896\n> /Satoshi:0.8.99/Gangnam Style:2.0/ : accepted\n> 03f79c611bbdc1afa7afa67eb0bbd4d8bc86a730a7066622e2709ae506e61e0f (poolsz\n> 2092)\n> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834\n> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n> af8096ad637af1ca022a5146e07cf1fc6bfbec877935f9e114b279fcfe26c06d (poolsz\n> 2093)\n> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834\n> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n> 751c2415d058d45ca602fdf1b6490edb6e57fc718e914d628c11b17e25aac834 (poolsz\n> 2094)\n>\n>\n>\n> Despite that I have 87 connections from regular nodes, virtually all\n> transactions seen by my node are being announced by this modified software,\n> which appears to run on several different machines.\n>\n> I am wondering if anyone out there knows/owns these nodes and if they are\n> relaying transactions without checking their validity. That seems the most\n> likely reason for how they are always able to win the race to be the first\n> to announce to my node.\n>\n> ------------------------------------------------------------------------------\n> Shape the Mobile Experience: Free Subscription\n> Software experts and developers: Be at the forefront of tech innovation.\n> Intel(R) Software Adrenaline delivers strategic insight and game-changing\n> conversations that shape the rapidly evolving mobile landscape. Sign up now.\n> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Matt Corallo",
                "date": "2013-11-21T15:28:58",
                "message_text_only": "No, mine identifies as BitcoinJ, RelayNode, version string\n\nOn 11/21/2013 10:27 AM, Jeff Garzik wrote:\n> Is that Matt's relay, which has reduced validity checking?\n> \n> \n> On Thu, Nov 21, 2013 at 8:48 AM, Mike Hearn <mike at plan99.net> wrote:\n>> I added some additional logging to my node and ran it for a few days.\n>> There's a pull req open for my extra logging, it is quite trivial. Here's\n>> what it looks like:\n>>\n>> 2013-11-21 13:41:04 AcceptToMemoryPool: 5.9.24.81:7834\n>> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>> 2d1bbcc2bf64dfcb57a2f0180b2607a48a34de4422c446929b26b190083bbfe7 (poolsz\n>> 2087)\n>> 2013-11-21 13:41:05 AcceptToMemoryPool: 198.12.127.2:29057\n>> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>> 28bb94978bdaa224faeafa95d03a0c4f5743396d6f592469c5ac2b64184ac716 (poolsz\n>> 2088)\n>> 2013-11-21 13:41:06 ERROR: AcceptToMemoryPool : nonstandard transaction:\n>> dust\n>> 2013-11-21 13:41:06\n>> 42323d9553e4c592d27765dc3ef9152c186cb7d67b08d783d72974a56085032d from\n>> 82.68.68.254:39232 /Satoshi:0.8.1/ was not accepted into the memory pool:\n>> dust\n>> 2013-11-21 13:41:06 AcceptToMemoryPool: 198.12.127.2:29057\n>> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>> 2fdb19e5e87d518b7b6bb7371d547a5f60c2bb056ba4522190460f0bc41b51fb (poolsz\n>> 2089)\n>> 2013-11-21 13:41:08 AcceptToMemoryPool: 5.9.24.81:7834\n>> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>> 52c8ed6a48f89d48b1152b67ac0b718a7aadb5f9a0c70c18b9b2fed058ca3323 (poolsz\n>> 2090)\n>> 2013-11-21 13:41:08 AcceptToMemoryPool: 198.12.127.2:29057\n>> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>> 980bbdbd4a6b365fa6f13fb5247eb6cb1e54847e490c3b7c3026d1548fb9efc6 (poolsz\n>> 2091)\n>> 2013-11-21 13:41:08 AcceptToMemoryPool: 64.120.253.194:60896\n>> /Satoshi:0.8.99/Gangnam Style:2.0/ : accepted\n>> 03f79c611bbdc1afa7afa67eb0bbd4d8bc86a730a7066622e2709ae506e61e0f (poolsz\n>> 2092)\n>> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834\n>> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>> af8096ad637af1ca022a5146e07cf1fc6bfbec877935f9e114b279fcfe26c06d (poolsz\n>> 2093)\n>> 2013-11-21 13:41:10 AcceptToMemoryPool: 5.9.24.81:7834\n>> /Satoshi:0.8.99/Gangnam Style:2.1/ : accepted\n>> 751c2415d058d45ca602fdf1b6490edb6e57fc718e914d628c11b17e25aac834 (poolsz\n>> 2094)\n>>\n>>\n>>\n>> Despite that I have 87 connections from regular nodes, virtually all\n>> transactions seen by my node are being announced by this modified software,\n>> which appears to run on several different machines.\n>>\n>> I am wondering if anyone out there knows/owns these nodes and if they are\n>> relaying transactions without checking their validity. That seems the most\n>> likely reason for how they are always able to win the race to be the first\n>> to announce to my node.\n>>\n>> ------------------------------------------------------------------------------\n>> Shape the Mobile Experience: Free Subscription\n>> Software experts and developers: Be at the forefront of tech innovation.\n>> Intel(R) Software Adrenaline delivers strategic insight and game-changing\n>> conversations that shape the rapidly evolving mobile landscape. Sign up now.\n>> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n> \n> \n>"
            }
        ],
        "thread_summary": {
            "title": "Who or what is /Satoshi:0.8.99/Gangnam Style:2.1/ ?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Addy Yeow",
                "Arthur Gervais",
                "Mike Hearn",
                "Matt Corallo"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 25487
        }
    },
    {
        "title": "[Bitcoin-development] is there a way to do bitcoin-staging?",
        "thread_messages": [
            {
                "author": "coinscoins",
                "date": "2013-11-21T20:22:33",
                "message_text_only": "looks like Betacoin is already here - http://betacoin.org"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-11-21T20:35:44",
                "message_text_only": "On 14 October 2013 20:08, Adam Back <adam at cypherspace.org> wrote:\n\n> Coming back to the staging idea, maybe this is a realistic model that could\n> work.  The objective being to provide a way for bitcoin to move to a live\n> beta and stable being worked on in parallel like fedora vs RHEL or odd/even\n> linux kernel versions.\n>\n> Development runs in parallel on bitcoin 1.x beta (betacoin) and bitcoin 0.x\n> stable and leap-frogs as beta becomes stable after testing.\n>\n> Its a live beta, meaning real value, real contracts.  But we dont want it\n> to\n> be an alt-coin with a floating value exactly, we want it to be bitcoin, but\n> the bleeding edge bitcoin so we want to respect the 21 million coin limit,\n> and allow coins to move between bitcoin and betacoin with some necessary\n> security related restrictions.\n>\n> There is no mining reward on the betacoin network (can be merge mined for\n> security), and the way you opt to move a bitcoin into the betacoin network\n> is to mark it as transferred in some UTXO recognized way.  It cant be\n> reanimated, its dead.  (eg spend to a specific recognized invalid address\n> on\n> the bitcoin network).  In this way its not really a destruction, but a\n> move,\n> moving the coin from bitcoin to betacoin network.\n>\n> This respects the 21 million coin cap, and avoids betacoin bugs flowing\n> back\n> and affecting bitcoin security or value-store properties.  Users may buy or\n> swap betacoin for bitcoin to facilitate moving money back from betacoin to\n> bitcoin.  However that is market priced so the bitcoin network is security\n> insulated from beta.  A significant security bug in beta would cause a\n> market freeze, until it is rectified.\n>\n> The cost of a betacoin is capped at one BTC because no one will pay more\n> than one bitcoin for a betacoin because they could alternatively move their\n> own coin.  The reverse is market priced.\n>\n> Once bitcoin beta stabalizes, eg say year or two type of time-frame, a\n> decision is reached to promote 1.0 beta to 2.0 stable, the remaining\n> bitcoins can be moved, and the old network switched off, with mining past a\n> flag day moving to the betacoin.\n>\n> During the beta period betacoin is NOT an alpha, people can rely on it and\n> use it in anger for real value transactions.  eg if it enables more script\n> features, or coin coloring, scalabity tweaks etc people can use it.\n> Probably for large value store they are always going to prefer\n> bitcoin-stable, but applications that need the coloring features, or\n> advanced scripting etc can go ahead and beta.\n>\n> Bitcoin-stable may pull validated changes and merge them, as a way to pull\n> in any features needed in the shorter term and benefit from the betacoin\n> validation.  (Testing isnt as much validation as real-money at stake\n> survivability).\n>\n> The arguments are I think that:\n>\n> - it allows faster development allowing bitcoin to progress features\n> faster,\n>\n> - it avoids mindshare dilution if alternatively an alt-coin with a hit\n>    missing feature takes off;\n>\n> - it concentrates such useful-feature alt activities into one OPEN source\n>    and OPEN control foundation mediated area (rather than suspected land\n>    grabs on colored fees or such like bitcoin respun as a business model\n>    things),\n>\n> - maybe gets the developers that would've been working on their pet\n>    alt-coin, or their startup alt-coin to work together putting more\n>    developers, testers and resources onto something with open control (open\n>    source does not necessarily mean that much) and bitcoin mindshare\n>    branding, its STILL bitcoin, its just the beta network.\n>\n> - it respects the 21 million limit, starting new mining races probably\n>    dillutes the artificial scarcity semantic\n>\n> - while insulating bitcoin from betacoin security defects (I dont mean\n>    betacoin as a testnet, it should have prudent rigorous testing like\n>    bitcoin, just the very act of adding a feature creates risk that bitcoin\n>    stable can be hesitant to take).\n>\n> Probably the main issue as always is more (trustable) very high caliber\n> testers and developers.  Maybe if the alt-coin minded startups and\n> developers donate their time to bitcoin-beta (or bitcoin-stable) for the\n> bits they are missing, we'll get more hands to work on something of\n> reusable\n> value to humanity, in parallel with their startup's objectives and as a way\n> for them to get their needed features, while giving back to the bitcoin\n> community, and helping bitcoin progress faster.\n>\n> Maybe bitcoin foundation could ask for BTC donations to hire more\n> developers\n> and testers full time.  $1.5b of stored value should be interested to safe\n> guard their value store, and develop the transaction features.\n>\n\nI think there may be a simpler way to do this.\n\nCreate a new genesis block for a staging network, but in all other aspects,\nas far as possible, keep the properties the same as bitcoin.\n\nDo not actively be opposed to it being traded, but people need to know\nthat, although there is no intention to reset the chain, new and\npotentially not fully tested, changes can be rolled into the network.\nAnyone mining staging coins should be prepared for the value to go to zero.\n\nPerhaps also a \"straw poll\" voting system could be set up for those that\nown staging coins could sign messages saying which patches they would like\nto test out next.  When patches are stable in the staging area, they could\nbe \"promoted\" to the main net ...\n\n\n>\n> Adam\n>\n> On Mon, May 20, 2013 at 02:34:06AM -0400, Alan Reiner wrote:\n> >   This is exactly what I was planning to do with the\n> >   inappropriately-named \"Ultimate Blockchain Compression\".  [...]\n> >\n> >   For it to really work, it's gotta be part of the mainnet validation\n> >   rules, but no way it can be evaluated realistically without some kind\n> of\n> >   \"staging\".\n>\n> >   On 5/19/2013 11:08 AM, Peter Vessenes wrote:\n> >\n> >   I think this is a very interesting idea. As Bitcoiners, we often stuff\n> >   things into the 'alt chain' bucket in our heads; I wonder if this idea\n> >   works better as a curing period, essentially an extended version of the\n> >   current 100 block wait for mined coins.\n>\n>\n> ------------------------------------------------------------------------------\n> October Webinars: Code for Performance\n> Free Intel webinars can help you accelerate application performance.\n> Explore tips for MPI, OpenMP, advanced profiling, and more. Get the most\n> from\n> the latest Intel processors and coprocessors. See abstracts and register >\n> http://pubads.g.doubleclick.net/gampad/clk?id=60134071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131121/61f2374a/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "is there a way to do bitcoin-staging?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Melvin Carvalho",
                "coinscoins"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 7046
        }
    },
    {
        "title": "[Bitcoin-development] bitcoin 1.x & 0.x in parallel (Re: is there a way to do bitcoin-staging?)",
        "thread_messages": [
            {
                "author": "Adam Back",
                "date": "2013-11-21T21:11:57",
                "message_text_only": "Yeah but that sounds pretty much like test-net and starts a new digital\nscarcity on an alpha-qa level network, with an implied promise that maybe if\nyou're lucky your coins might survive the alpha testing and have some value.\n\nI'm not talking about some slightly stabler version of test-net.\n\nProbably bitcoin staging is the wrong name.  I mean like development of\nbitcoin 1.x in parallel with bitcoin 0.x which includes like test net for\nboth, and strong (though maybe not quite as high) assurance of qa and care\nas bitcoin 0.x.  Just as a way to get features like Mark Freidenbach's\nfreimarket script extensions, and some of the disabled scripts validated on\n1.x testnet and then after rigorous testing deployed onto 1.x  Because they\nare new features even with good testing that introduces non-zero risk, hence\nthe 1 way peg idea.  Welcome to suggest better names for the idea...\n\nOf course maybe the other issue is insufficient people with the skills and\nmotivation to support two parallel efforts.\n\nIt gives somewhere to code and test and then deploy clearly useful things\nbut that dont warrant a hard fork.\n\nAdam\n\nMelvin wrote:\n>   I think there may be a simpler way to do this.\n>   Create a new genesis block for a staging network, but in all other\n>   aspects, as far as possible, keep the properties the same as bitcoin.\n>   Do not actively be opposed to it being traded, but people need to know\n>   that, although there is no intention to reset the chain, new and\n>   potentially not fully tested, changes can be rolled into the network.\n>   Anyone mining staging coins should be prepared for the value to go to\n>   zero.\n>   Perhaps also a \"straw poll\" voting system could be set up for those\n>   that own staging coins could sign messages saying which patches they\n>   would like to test out next.  When patches are stable in the staging\n>   area, they could be \"promoted\" to the main net ..."
            }
        ],
        "thread_summary": {
            "title": "bitcoin 1.x & 0.x in parallel (Re: is there a way to do bitcoin-staging?)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Adam Back"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1904
        }
    },
    {
        "title": "[Bitcoin-development] [PATCH] bitcoind: whitelist nodes, to prevent them from being banned",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2013-11-22T20:46:50",
                "message_text_only": "Trying something new... a [simple] patch sent to the list, for\ndiscussion.  Seems unlikely to be controversial.  github access is\ntemporarily disabled, so this is the best pull request avenue for the\nmoment.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\ndiff --git a/node_modules/bitpay/bitcoinRPC.js b/node_modules/bitpay/bitcoinRPC.js\nindex bd410ac..e6edf81 100644\n--- a/node_modules/bitpay/bitcoinRPC.js\n+++ b/node_modules/bitpay/bitcoinRPC.js\n@@ -68,6 +68,18 @@ function spec(b) {\n     RPC.call(this, 'gettransaction',  [txid], callback);\n   };\n \n+  BitcoinRPC.prototype.getRawTransaction = function(txid, callback) {\n+    RPC.call(this, 'getrawtransaction',  [txid], callback);\n+  };\n+\n+  BitcoinRPC.prototype.signRawTransaction = function(hexstr, callback) {\n+    RPC.call(this, 'signrawtransaction',  [hexstr], callback);\n+  };\n+\n+  BitcoinRPC.prototype.sendRawTransaction = function(hexstr, callback) {\n+    RPC.call(this, 'sendrawtransaction',  [hexstr], callback);\n+  };\n+\n   BitcoinRPC.prototype.sendToAddress = function(address, amount, callback) {\n     RPC.call(this, 'sendtoaddress', [address, amount], callback);\n   };\ndiff --git a/node_modules/txtool/txtool b/node_modules/txtool/txtool\nnew file mode 100755\nindex 0000000..b50dc77\n--- /dev/null\n+++ b/node_modules/txtool/txtool\n@@ -0,0 +1,124 @@\n+#!/usr/bin/env node\n+\n+var fs = require('fs');\n+var Util = require('bitcoin/lib/ext/util');\n+var BitcoinRPC = require('bitpay/bitcoinRPC').default();\n+var bitcoinRPC = undefined;\n+var Transaction = required('bitcoin/lib/model/transaction').class();\n+\n+var argv = require('optimist')\n+\t.usage('Transaction tool.\\nUsage: $0 [options]')\n+\t.demand(['c'])\n+\t.alias('f', 'file')\n+\t.describe('f', 'Transaction source file (raw, serialized, hex encoded)')\n+\t.alias('x', 'txid')\n+\t.describe('x', 'Transaction id (switches TX source to RPC)')\n+\t.alias('c', 'cmd')\n+\t.describe('c', 'JSON command file')\n+\t.alias('h', 'host')\n+\t.describe('h', 'bitcoind RPC hostname or IP address')\n+\t.alias('p', 'port')\n+\t.describe('p', 'bitcoind RPC port')\n+\t.alias('U', 'user')\n+\t.describe('U', 'bitcoind RPC username')\n+\t.alias('P', 'pass')\n+\t.describe('P', 'bitcoind RPC password')\n+\t.argv\n+;\n+\n+function setupRPC(host, port, user, pass) {\n+\tvar opts = {};\n+\topts.host = host;\n+\topts.port = port;\n+\topts.user = user;\n+\topts.pass = pass;\n+\tbitcoinRPC = new BitcoinRPC(opts);\n+}\n+\n+function loadTxRPC(txid) {\n+\tvar hexstr = bitcoinRPC.getRawTransaction(txid);\n+\n+\tvar data = new Buffer(hexstr, 'hex');\n+\tvar tx = new Transaction(data);\n+\treturn tx;\n+}\n+\n+function loadTxfile(filename) {\n+\tvar hexfile = fs.readFilesync(filename, 'utf8');\n+\n+\tvar data = new Buffer(hexfile.trim(), 'hex');\n+\tvar tx = new Transaction(data);\n+\treturn tx;\n+}\n+\n+function loadCmdFile(filename) {\n+\tvar data = JSON.parse(fs.readFileSync(filename)).result;\n+\treturn data;\n+}\n+\n+// how many copies of this can one codebase bear?\n+function transactionDesc(tx) {\n+  var outDescriptions = [];\n+  var outs = tx.outs;\n+  for(var i=0; i<outs.length; i++) {\n+    var txout = outs[i];\n+    var script = txout.getScript();\n+    var type = script.getOutType();\n+    var amount = (txout.getValue() / 1e8).round(8);\n+    if(type == 'Address') {\n+      outDescriptions.push({\n+        type: type,\n+        amount: amount,\n+        address: Util.pubKeyHashToAddress(script.simpleOutHash())\n+      });\n+    } else {\n+      outDescriptions.push({\n+        type: type,\n+        amount: amount\n+      });\n+    }\n+  }\n+  return {\n+    txid: Util.formatHashFull(tx.getHash()),\n+    outs: outDescriptions\n+  }\n+};\n+\n+function CmdShow(tx) {\n+\tconsole.log(inspect(transactionDesc(tx), false, 10));\n+}\n+\n+function CmdSign(tx) {\n+\tvar txHex = Util.encodeHex(tx.serialize());\n+\tvar retHex = bitcoinRPC.signRawTransaction(txHex);\n+\tconsole.log(retHex);\n+}\n+\n+function CmdSend(tx) {\n+\tvar txHex = Util.encodeHex(tx.serialize());\n+\tbitcoinRPC.sendRawTransaction(txHex);\n+}\n+\n+function ExecCmdData(tx, cmdData) {\n+\tfor (var i = 0; i < cmdData.length; i++) {\n+\t\tvar obj = cmdData[i];\n+\t\tif (obj.cmd == \"show\") {\n+\t\t\tCmdShow(tx);\n+\t\t}\n+\t\telse if (obj.cmd == \"sign\") {\n+\t\t\tCmdSign(tx);\n+\t\t}\n+\t\telse if (obj.cmd == \"send\") {\n+\t\t\tCmdSend(tx);\n+\t\t}\n+\t}\n+}\n+\n+if (argv.host) {\n+\tsetupRPC(host, port, user, pass);\n+}\n+var tx = argv.txid ? loadTxRPC(argv.txid) :\n+\t\t     loadTxFile(argv.file);\n+var cmdData = loadCmdFile(argv.cmd);\n+ExecCmdData(tx, cmdData);\n+"
            },
            {
                "author": "Michael Hendricks",
                "date": "2013-11-22T23:11:00",
                "message_text_only": "Wrong patch?  This looks like node.js code for something called txtool.\n\n\n-- \nMichael\n\n\nOn Fri, Nov 22, 2013 at 1:46 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> Trying something new... a [simple] patch sent to the list, for\n> discussion.  Seems unlikely to be controversial.  github access is\n> temporarily disabled, so this is the best pull request avenue for the\n> moment.\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Shape the Mobile Experience: Free Subscription\n> Software experts and developers: Be at the forefront of tech innovation.\n> Intel(R) Software Adrenaline delivers strategic insight and game-changing\n> conversations that shape the rapidly evolving mobile landscape. Sign up\n> now.\n> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131122/ce3833ea/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "bitcoind: whitelist nodes, to prevent them from being banned",
            "categories": [
                "Bitcoin-development",
                "PATCH"
            ],
            "authors": [
                "Jeff Garzik",
                "Michael Hendricks"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 5805
        }
    },
    {
        "title": "[Bitcoin-development] [PATCH, try2] bitcoind: whitelist nodes against banning",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2013-11-22T20:49:04",
                "message_text_only": "Whitelist nodes against banning.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\ncommit af7b624763e790075f8bb29a084309e6591e3469\nAuthor: Jeff Garzik <jgarzik at bitpay.com>\nDate:   Fri Nov 22 15:43:51 2013 -0500\n\n    Add whitelist, to prevent whitelisted nodes from being banned.\n    \n    Entry point via RPC, configuration file or command line.\n\ndiff --git a/src/bitcoinrpc.cpp b/src/bitcoinrpc.cpp\nindex a1e7d14..506b370 100644\n--- a/src/bitcoinrpc.cpp\n+++ b/src/bitcoinrpc.cpp\n@@ -233,6 +233,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getpeerinfo\",            &getpeerinfo,            true,      false,      false },\n     { \"ping\",                   &ping,                   true,      false,      false },\n     { \"addnode\",                &addnode,                true,      true,       false },\n+    { \"addwhite\",               &addwhite,               true,      true,       false },\n     { \"getaddednodeinfo\",       &getaddednodeinfo,       true,      true,       false },\n     { \"getnettotals\",           &getnettotals,           true,      true,       false },\n     { \"getdifficulty\",          &getdifficulty,          true,      false,      false },\ndiff --git a/src/bitcoinrpc.h b/src/bitcoinrpc.h\nindex 9025ff9..a7c2e2d 100644\n--- a/src/bitcoinrpc.h\n+++ b/src/bitcoinrpc.h\n@@ -162,6 +162,7 @@ extern json_spirit::Value getconnectioncount(const json_spirit::Array& params, b\n extern json_spirit::Value getpeerinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value ping(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value addnode(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value addwhite(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getaddednodeinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getnettotals(const json_spirit::Array& params, bool fHelp);\n \ndiff --git a/src/init.cpp b/src/init.cpp\nindex b2e7ddf..75aa301 100644\n--- a/src/init.cpp\n+++ b/src/init.cpp\n@@ -548,6 +548,8 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n \n     strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n \n+    LoadWhitelist();\n+\n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n \n     std::string strDataDir = GetDataDir().string();\ndiff --git a/src/net.cpp b/src/net.cpp\nindex c547cf3..969bb1b 100644\n--- a/src/net.cpp\n+++ b/src/net.cpp\n@@ -55,6 +55,8 @@ bool fDiscover = true;\n uint64_t nLocalServices = NODE_NETWORK;\n static CCriticalSection cs_mapLocalHost;\n static map<CNetAddr, LocalServiceInfo> mapLocalHost;\n+static CCriticalSection cs_mapWhitelist;\n+static map<CNetAddr, LocalServiceInfo> mapWhitelist;\n static bool vfReachable[NET_MAX] = {};\n static bool vfLimited[NET_MAX] = {};\n static CNode* pnodeLocalHost = NULL;\n@@ -298,6 +300,45 @@ bool IsReachable(const CNetAddr& addr)\n     return vfReachable[net] && !vfLimited[net];\n }\n \n+// learn a new whitelisted address\n+bool AddWhitelist(const CService& addr, int nScore)\n+{\n+    LogPrintf(\"AddWhitelist(%s,%i)\\n\", addr.ToString().c_str(), nScore);\n+\n+    {\n+        LOCK(cs_mapWhitelist);\n+        bool fAlready = mapWhitelist.count(addr) > 0;\n+        LocalServiceInfo &info = mapWhitelist[addr];\n+        if (!fAlready || nScore >= info.nScore) {\n+            info.nScore = nScore + (fAlready ? 1 : 0);\n+            info.nPort = addr.GetPort();\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+/** check whether a given address is potentially local */\n+bool IsWhitelisted(const CService& addr)\n+{\n+    LOCK(cs_mapWhitelist);\n+    return mapWhitelist.count(addr) > 0;\n+}\n+\n+void LoadWhitelist()\n+{\n+    // Connect to specific addresses\n+    if (mapArgs.count(\"-whitelist\") && mapMultiArgs[\"-whitelist\"].size() > 0)\n+    {\n+        BOOST_FOREACH(string strAddr, mapMultiArgs[\"-whitelist\"])\n+        {\n+            CService serv(strAddr.c_str(), Params().GetDefaultPort(), true);\n+            if (serv.IsValid())\n+                AddWhitelist(serv, 0);\n+        }\n+    }\n+}\n+\n bool GetMyExternalIP2(const CService& addrConnect, const char* pszGet, const char* pszKeyword, CNetAddr& ipRet)\n {\n     SOCKET hSocket;\n@@ -588,6 +629,11 @@ bool CNode::Misbehaving(int howmuch)\n         LogPrintf(\"Warning: Local node %s misbehaving (delta: %d)!\\n\", addrName.c_str(), howmuch);\n         return false;\n     }\n+    if (IsWhitelisted(addr))\n+    {\n+        LogPrintf(\"Warning: Whitelisted node %s misbehaving (delta: %d)!\\n\", addrName.c_str(), howmuch);\n+        return false;\n+    }\n \n     nMisbehavior += howmuch;\n     if (nMisbehavior >= GetArg(\"-banscore\", 100))\ndiff --git a/src/net.h b/src/net.h\nindex 278462a..e215255 100644\n--- a/src/net.h\n+++ b/src/net.h\n@@ -87,6 +87,9 @@ bool AddLocal(const CService& addr, int nScore = LOCAL_NONE);\n bool AddLocal(const CNetAddr& addr, int nScore = LOCAL_NONE);\n bool SeenLocal(const CService& addr);\n bool IsLocal(const CService& addr);\n+bool AddWhitelist(const CService& addr, int nScore);\n+bool IsWhitelisted(const CService& addr);\n+void LoadWhitelist();\n bool GetLocal(CService &addr, const CNetAddr *paddrPeer = NULL);\n bool IsReachable(const CNetAddr &addr);\n void SetReachable(enum Network net, bool fFlag = true);\ndiff --git a/src/rpcnet.cpp b/src/rpcnet.cpp\nindex 9f8dea8..47af21f 100644\n--- a/src/rpcnet.cpp\n+++ b/src/rpcnet.cpp\n@@ -139,6 +139,26 @@ Value getpeerinfo(const Array& params, bool fHelp)\n     return ret;\n }\n \n+Value addwhite(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"addwhite \\\"node\\\"\\n\"\n+            \"\\nAttempts add a node to the whitelist.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"node\\\"     (string, required) The node (see getpeerinfo for nodes)\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"addwhite\", \"\\\"192.168.0.6:8333\\\" \")\n+            + HelpExampleRpc(\"addwhite\", \"\\\"192.168.0.6:8333\\\" \")\n+        );\n+\n+    string strNode = params[0].get_str();\n+\n+    CService serv(strNode.c_str(), Params().GetDefaultPort(), true);\n+\n+    return AddWhitelist(serv, 0);\n+}\n+\n Value addnode(const Array& params, bool fHelp)\n {\n     string strCommand;"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-11-22T20:56:43",
                "message_text_only": "On Fri, Nov 22, 2013 at 12:49 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> Whitelist nodes against banning.\n\nIs there a reason not to have a parallel get rpc to get the current list?"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-11-22T21:01:51",
                "message_text_only": "On Fri, Nov 22, 2013 at 3:56 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> Is there a reason not to have a parallel get rpc to get the current list?\n\nEasy enough to add.  There had also been requests for an IP blacklist,\nwhich would need associated RPC/config gadgetry.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2013-11-22T21:07:53",
                "message_text_only": "https://github.com/bitcoin/bitcoin/pull/2906\nThere is already a bannode RPC PR.  Last I tried it didn't work though.\n\n\nOn Fri, Nov 22, 2013 at 11:01 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> On Fri, Nov 22, 2013 at 3:56 PM, Gregory Maxwell <gmaxwell at gmail.com>\n> wrote:\n> > Is there a reason not to have a parallel get rpc to get the current list?\n>\n> Easy enough to add.  There had also been requests for an IP blacklist,\n> which would need associated RPC/config gadgetry.\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Shape the Mobile Experience: Free Subscription\n> Software experts and developers: Be at the forefront of tech innovation.\n> Intel(R) Software Adrenaline delivers strategic insight and game-changing\n> conversations that shape the rapidly evolving mobile landscape. Sign up\n> now.\n> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131122/75e1a855/attachment.html>"
            },
            {
                "author": "Jouke Hofman",
                "date": "2013-11-22T21:37:40",
                "message_text_only": "Thanks a lot! I will run these patches on some nodes tomorrow to see if\nit works.\n\nOn 22-11-13 21:49, Jeff Garzik wrote:\n> Whitelist nodes against banning.\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Shape the Mobile Experience: Free Subscription\n> Software experts and developers: Be at the forefront of tech innovation.\n> Intel(R) Software Adrenaline delivers strategic insight and game-changing \n> conversations that shape the rapidly evolving mobile landscape. Sign up now. \n> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            }
        ],
        "thread_summary": {
            "title": "bitcoind: whitelist nodes against banning",
            "categories": [
                "Bitcoin-development",
                "PATCH, try2"
            ],
            "authors": [
                "Jeff Garzik",
                "Warren Togami Jr.",
                "Gregory Maxwell",
                "Jouke Hofman"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 9114
        }
    },
    {
        "title": "[Bitcoin-development] Network propagation speeds",
        "thread_messages": [
            {
                "author": "Christian Decker",
                "date": "2013-11-24T16:20:22",
                "message_text_only": "Since this came up again during the discussion of the Cornell paper I\nthought I'd dig up my measurement code from the Information\nPropagation paper and automate it as much as possible.\n\nThe result is the Network Propagation page on bitcoinstats.com\n(http://bitcoinstats.com/network/propagation/). It takes a daily\nsnapshot of the situation, then calculates the time until blocks and\ntransactions reach a certain percentile of the nodes in the network.\nThere is also a detailed page showing the density function describing\nat what times nodes learn about the existence of a block/transaction\n(for example yesterdays distribution:\nhttp://bitcoinstats.com/network/propagation/2013/11/23).\n\nI intend to add more information and plots over time, but I wanted to\npush this out quickly as there were some people asking for it. Hope\nthis helps getting the blockchain fork rate down :-)\n\nRegards,\nChris\n--\nChristian Decker"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-11-24T16:26:45",
                "message_text_only": "On Sun, Nov 24, 2013 at 8:20 AM, Christian Decker\n<decker.christian at gmail.com> wrote:\n> Since this came up again during the discussion of the Cornell paper I\n> thought I'd dig up my measurement code from the Information\n> Propagation paper and automate it as much as possible.\n\nCould you publish the block ids and timestamp sets for each block?\n\nIt would be useful in correlating propagation information against\nblock characteristics."
            },
            {
                "author": "Christian Decker",
                "date": "2013-11-24T16:37:25",
                "message_text_only": "Sure thing, I'm looking for a good way to publish these measurements,\nbut I haven't found a good option yet. They are rather large in size,\nso I'd rather not serve them along with the website as it hasn't got\nthe capacity. Any suggestions? If the demand is not huge I could\nprovide them on a per user basis.\n--\nChristian Decker\n\n\nOn Sun, Nov 24, 2013 at 5:26 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Sun, Nov 24, 2013 at 8:20 AM, Christian Decker\n> <decker.christian at gmail.com> wrote:\n>> Since this came up again during the discussion of the Cornell paper I\n>> thought I'd dig up my measurement code from the Information\n>> Propagation paper and automate it as much as possible.\n>\n> Could you publish the block ids and timestamp sets for each block?\n>\n> It would be useful in correlating propagation information against\n> block characteristics."
            },
            {
                "author": "Michael Gronager",
                "date": "2013-11-25T08:51:47",
                "message_text_only": "Hi Christian,\n\nCool - thanks for posting - agree, that it would be nice to normalize\nthe results with block size - so divide by size and:\n1. see if there is a correlation (we all presume there still is)\n2. plot the delay graph as e.g. normalized to the averaged blocksize or\nlets define a \"standard block size\" of 200kb or what ever so we can\ncompare the plot btw days.\n\nAlso, does the correlation of propagation times hold for transaction\nsizes as well (would be ice to find the logical t0 and the constant - I\nguess the interesting measure is not kb but signatures, so number of\ninputs - some correlation with size though).\n\nBest,\n\nMichael\n\nOn 24/11/13, 17:37 , Christian Decker wrote:\n> Sure thing, I'm looking for a good way to publish these measurements,\n> but I haven't found a good option yet. They are rather large in size,\n> so I'd rather not serve them along with the website as it hasn't got\n> the capacity. Any suggestions? If the demand is not huge I could\n> provide them on a per user basis.\n> --\n> Christian Decker\n> \n> \n> On Sun, Nov 24, 2013 at 5:26 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n>> On Sun, Nov 24, 2013 at 8:20 AM, Christian Decker\n>> <decker.christian at gmail.com> wrote:\n>>> Since this came up again during the discussion of the Cornell paper I\n>>> thought I'd dig up my measurement code from the Information\n>>> Propagation paper and automate it as much as possible.\n>>\n>> Could you publish the block ids and timestamp sets for each block?\n>>\n>> It would be useful in correlating propagation information against\n>> block characteristics.\n> \n> ------------------------------------------------------------------------------\n> Shape the Mobile Experience: Free Subscription\n> Software experts and developers: Be at the forefront of tech innovation.\n> Intel(R) Software Adrenaline delivers strategic insight and game-changing \n> conversations that shape the rapidly evolving mobile landscape. Sign up now. \n> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Christian Decker",
                "date": "2013-11-25T19:27:09",
                "message_text_only": "Thanks Mike for the Tip :-)\n\nI will definitely extend the calculations to include a size-normalized\nversion. As for transaction propagations, being much smaller the\nmeasurements tend to be much noisier, but given enough samples we\nmight be able to reconstruct some of the system parameters.\n\nGood idea to attempt to correlate propagation speed and number of\ninputs/outputs, might be interesting to see whether processing at the\nnodes has an influence.\n\nRegards,\nChris\n--\nChristian Decker\n\n\nOn Mon, Nov 25, 2013 at 9:51 AM, Michael Gronager <gronager at ceptacle.com> wrote:\n> Hi Christian,\n>\n> Cool - thanks for posting - agree, that it would be nice to normalize\n> the results with block size - so divide by size and:\n> 1. see if there is a correlation (we all presume there still is)\n> 2. plot the delay graph as e.g. normalized to the averaged blocksize or\n> lets define a \"standard block size\" of 200kb or what ever so we can\n> compare the plot btw days.\n>\n> Also, does the correlation of propagation times hold for transaction\n> sizes as well (would be ice to find the logical t0 and the constant - I\n> guess the interesting measure is not kb but signatures, so number of\n> inputs - some correlation with size though).\n>\n> Best,\n>\n> Michael\n>\n> On 24/11/13, 17:37 , Christian Decker wrote:\n>> Sure thing, I'm looking for a good way to publish these measurements,\n>> but I haven't found a good option yet. They are rather large in size,\n>> so I'd rather not serve them along with the website as it hasn't got\n>> the capacity. Any suggestions? If the demand is not huge I could\n>> provide them on a per user basis.\n>> --\n>> Christian Decker\n>>\n>>\n>> On Sun, Nov 24, 2013 at 5:26 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n>>> On Sun, Nov 24, 2013 at 8:20 AM, Christian Decker\n>>> <decker.christian at gmail.com> wrote:\n>>>> Since this came up again during the discussion of the Cornell paper I\n>>>> thought I'd dig up my measurement code from the Information\n>>>> Propagation paper and automate it as much as possible.\n>>>\n>>> Could you publish the block ids and timestamp sets for each block?\n>>>\n>>> It would be useful in correlating propagation information against\n>>> block characteristics.\n>>\n>> ------------------------------------------------------------------------------\n>> Shape the Mobile Experience: Free Subscription\n>> Software experts and developers: Be at the forefront of tech innovation.\n>> Intel(R) Software Adrenaline delivers strategic insight and game-changing\n>> conversations that shape the rapidly evolving mobile landscape. Sign up now.\n>> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Shape the Mobile Experience: Free Subscription\n> Software experts and developers: Be at the forefront of tech innovation.\n> Intel(R) Software Adrenaline delivers strategic insight and game-changing\n> conversations that shape the rapidly evolving mobile landscape. Sign up now.\n> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-11-27T19:35:15",
                "message_text_only": "Hey Christian,\n\nCould you sort the snapshots by date? At the moment they're kind of in a\nrandom order.\n\nSometimes I wish we had real-time stats too but this is a great start.\n\n\nOn Mon, Nov 25, 2013 at 8:27 PM, Christian Decker <\ndecker.christian at gmail.com> wrote:\n\n> Thanks Mike for the Tip :-)\n>\n> I will definitely extend the calculations to include a size-normalized\n> version. As for transaction propagations, being much smaller the\n> measurements tend to be much noisier, but given enough samples we\n> might be able to reconstruct some of the system parameters.\n>\n> Good idea to attempt to correlate propagation speed and number of\n> inputs/outputs, might be interesting to see whether processing at the\n> nodes has an influence.\n>\n> Regards,\n> Chris\n> --\n> Christian Decker\n>\n>\n> On Mon, Nov 25, 2013 at 9:51 AM, Michael Gronager <gronager at ceptacle.com>\n> wrote:\n> > Hi Christian,\n> >\n> > Cool - thanks for posting - agree, that it would be nice to normalize\n> > the results with block size - so divide by size and:\n> > 1. see if there is a correlation (we all presume there still is)\n> > 2. plot the delay graph as e.g. normalized to the averaged blocksize or\n> > lets define a \"standard block size\" of 200kb or what ever so we can\n> > compare the plot btw days.\n> >\n> > Also, does the correlation of propagation times hold for transaction\n> > sizes as well (would be ice to find the logical t0 and the constant - I\n> > guess the interesting measure is not kb but signatures, so number of\n> > inputs - some correlation with size though).\n> >\n> > Best,\n> >\n> > Michael\n> >\n> > On 24/11/13, 17:37 , Christian Decker wrote:\n> >> Sure thing, I'm looking for a good way to publish these measurements,\n> >> but I haven't found a good option yet. They are rather large in size,\n> >> so I'd rather not serve them along with the website as it hasn't got\n> >> the capacity. Any suggestions? If the demand is not huge I could\n> >> provide them on a per user basis.\n> >> --\n> >> Christian Decker\n> >>\n> >>\n> >> On Sun, Nov 24, 2013 at 5:26 PM, Gregory Maxwell <gmaxwell at gmail.com>\n> wrote:\n> >>> On Sun, Nov 24, 2013 at 8:20 AM, Christian Decker\n> >>> <decker.christian at gmail.com> wrote:\n> >>>> Since this came up again during the discussion of the Cornell paper I\n> >>>> thought I'd dig up my measurement code from the Information\n> >>>> Propagation paper and automate it as much as possible.\n> >>>\n> >>> Could you publish the block ids and timestamp sets for each block?\n> >>>\n> >>> It would be useful in correlating propagation information against\n> >>> block characteristics.\n> >>\n> >>\n> ------------------------------------------------------------------------------\n> >> Shape the Mobile Experience: Free Subscription\n> >> Software experts and developers: Be at the forefront of tech innovation.\n> >> Intel(R) Software Adrenaline delivers strategic insight and\n> game-changing\n> >> conversations that shape the rapidly evolving mobile landscape. Sign up\n> now.\n> >>\n> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Shape the Mobile Experience: Free Subscription\n> > Software experts and developers: Be at the forefront of tech innovation.\n> > Intel(R) Software Adrenaline delivers strategic insight and game-changing\n> > conversations that shape the rapidly evolving mobile landscape. Sign up\n> now.\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> ------------------------------------------------------------------------------\n> Shape the Mobile Experience: Free Subscription\n> Software experts and developers: Be at the forefront of tech innovation.\n> Intel(R) Software Adrenaline delivers strategic insight and game-changing\n> conversations that shape the rapidly evolving mobile landscape. Sign up\n> now.\n> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131127/0361951b/attachment.html>"
            },
            {
                "author": "Christian Decker",
                "date": "2013-11-27T20:46:50",
                "message_text_only": "Damn, that happens if I do the overview as an afterthought. Fixed :-)\n\nReal time (last 24 hours, last week, last month) are in the pipeline,\njust need to find the time to implement access to the collector from\nthe webpage.\n--\nChristian Decker\n\n\nOn Wed, Nov 27, 2013 at 8:35 PM, Mike Hearn <mike at plan99.net> wrote:\n> Hey Christian,\n>\n> Could you sort the snapshots by date? At the moment they're kind of in a\n> random order.\n>\n> Sometimes I wish we had real-time stats too but this is a great start.\n>\n>\n> On Mon, Nov 25, 2013 at 8:27 PM, Christian Decker\n> <decker.christian at gmail.com> wrote:\n>>\n>> Thanks Mike for the Tip :-)\n>>\n>> I will definitely extend the calculations to include a size-normalized\n>> version. As for transaction propagations, being much smaller the\n>> measurements tend to be much noisier, but given enough samples we\n>> might be able to reconstruct some of the system parameters.\n>>\n>> Good idea to attempt to correlate propagation speed and number of\n>> inputs/outputs, might be interesting to see whether processing at the\n>> nodes has an influence.\n>>\n>> Regards,\n>> Chris\n>> --\n>> Christian Decker\n>>\n>>\n>> On Mon, Nov 25, 2013 at 9:51 AM, Michael Gronager <gronager at ceptacle.com>\n>> wrote:\n>> > Hi Christian,\n>> >\n>> > Cool - thanks for posting - agree, that it would be nice to normalize\n>> > the results with block size - so divide by size and:\n>> > 1. see if there is a correlation (we all presume there still is)\n>> > 2. plot the delay graph as e.g. normalized to the averaged blocksize or\n>> > lets define a \"standard block size\" of 200kb or what ever so we can\n>> > compare the plot btw days.\n>> >\n>> > Also, does the correlation of propagation times hold for transaction\n>> > sizes as well (would be ice to find the logical t0 and the constant - I\n>> > guess the interesting measure is not kb but signatures, so number of\n>> > inputs - some correlation with size though).\n>> >\n>> > Best,\n>> >\n>> > Michael\n>> >\n>> > On 24/11/13, 17:37 , Christian Decker wrote:\n>> >> Sure thing, I'm looking for a good way to publish these measurements,\n>> >> but I haven't found a good option yet. They are rather large in size,\n>> >> so I'd rather not serve them along with the website as it hasn't got\n>> >> the capacity. Any suggestions? If the demand is not huge I could\n>> >> provide them on a per user basis.\n>> >> --\n>> >> Christian Decker\n>> >>\n>> >>\n>> >> On Sun, Nov 24, 2013 at 5:26 PM, Gregory Maxwell <gmaxwell at gmail.com>\n>> >> wrote:\n>> >>> On Sun, Nov 24, 2013 at 8:20 AM, Christian Decker\n>> >>> <decker.christian at gmail.com> wrote:\n>> >>>> Since this came up again during the discussion of the Cornell paper I\n>> >>>> thought I'd dig up my measurement code from the Information\n>> >>>> Propagation paper and automate it as much as possible.\n>> >>>\n>> >>> Could you publish the block ids and timestamp sets for each block?\n>> >>>\n>> >>> It would be useful in correlating propagation information against\n>> >>> block characteristics.\n>> >>\n>> >>\n>> >> ------------------------------------------------------------------------------\n>> >> Shape the Mobile Experience: Free Subscription\n>> >> Software experts and developers: Be at the forefront of tech\n>> >> innovation.\n>> >> Intel(R) Software Adrenaline delivers strategic insight and\n>> >> game-changing\n>> >> conversations that shape the rapidly evolving mobile landscape. Sign up\n>> >> now.\n>> >>\n>> >> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n>> >> _______________________________________________\n>> >> Bitcoin-development mailing list\n>> >> Bitcoin-development at lists.sourceforge.net\n>> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >>\n>> >\n>> >\n>> >\n>> > ------------------------------------------------------------------------------\n>> > Shape the Mobile Experience: Free Subscription\n>> > Software experts and developers: Be at the forefront of tech innovation.\n>> > Intel(R) Software Adrenaline delivers strategic insight and\n>> > game-changing\n>> > conversations that shape the rapidly evolving mobile landscape. Sign up\n>> > now.\n>> >\n>> > http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n>> > _______________________________________________\n>> > Bitcoin-development mailing list\n>> > Bitcoin-development at lists.sourceforge.net\n>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Shape the Mobile Experience: Free Subscription\n>> Software experts and developers: Be at the forefront of tech innovation.\n>> Intel(R) Software Adrenaline delivers strategic insight and game-changing\n>> conversations that shape the rapidly evolving mobile landscape. Sign up\n>> now.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-11-24T16:38:57",
                "message_text_only": "This is great, thanks for doing it. Tip sent your way.\n\nGraphs of how propagation data change over time would also be helpful (as\nwell as raw data so we can calculate overhead per kilobyte and so on). I\nknow there are only two days worth of data, but for future, it'd be good.\n\nI think the next part of figuring out why there's such huge disparity is\ninstrumenting bitcoind to find out where the time goes when relaying a\nblock.\n\n\nOn Sun, Nov 24, 2013 at 5:26 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Sun, Nov 24, 2013 at 8:20 AM, Christian Decker\n> <decker.christian at gmail.com> wrote:\n> > Since this came up again during the discussion of the Cornell paper I\n> > thought I'd dig up my measurement code from the Information\n> > Propagation paper and automate it as much as possible.\n>\n> Could you publish the block ids and timestamp sets for each block?\n>\n> It would be useful in correlating propagation information against\n> block characteristics.\n>\n>\n> ------------------------------------------------------------------------------\n> Shape the Mobile Experience: Free Subscription\n> Software experts and developers: Be at the forefront of tech innovation.\n> Intel(R) Software Adrenaline delivers strategic insight and game-changing\n> conversations that shape the rapidly evolving mobile landscape. Sign up\n> now.\n> http://pubads.g.doubleclick.net/gampad/clk?id=63431311&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131124/2fbea1fe/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-11-24T17:13:10",
                "message_text_only": "On Sun, Nov 24, 2013 at 05:20:22PM +0100, Christian Decker wrote:\n> Since this came up again during the discussion of the Cornell paper I\n> thought I'd dig up my measurement code from the Information\n> Propagation paper and automate it as much as possible.\n> \n> The result is the Network Propagation page on bitcoinstats.com\n> (http://bitcoinstats.com/network/propagation/). It takes a daily\n> snapshot of the situation, then calculates the time until blocks and\n> transactions reach a certain percentile of the nodes in the network.\n> There is also a detailed page showing the density function describing\n> at what times nodes learn about the existence of a block/transaction\n> (for example yesterdays distribution:\n> http://bitcoinstats.com/network/propagation/2013/11/23).\n> \n> I intend to add more information and plots over time, but I wanted to\n> push this out quickly as there were some people asking for it. Hope\n> this helps getting the blockchain fork rate down :-)\n\nDo you have the resources to save the raw log data? You'll also need to\nsave transaction timestamp data - whether or not a given node has a\ntransaction already matters re: propagation.\n\nOf course given pool centralization the moment pools start peering\ndirectly with each other all these stats might not mean all that much.\n\nNote that the number that's important isn't seconds, rather rather\nseconds/actual block interval as long as hashing power is growing.\nUnfortunately actually determining that is tricky - block interval is\ninherently noisy so you'll want to use a fairly agressively smoothed\naverage.\n\nSo here's a rough calculation: right now blocks are happening roughly\n%15 faster than they would at equilibrium, and blockchain.info reports\nabout 2 orphans a day. 2/166=1.2% orphan rate.\n\nNow with a simplistic model where it takes exactly t seconds for a block\nto propagate to 100% of the hashing power, and until then 0% has it,\nyou'd get:\n\n    orphan rate = t / actual block interval -> t = rate * interval\n\nOr 6.2 seconds with our orphan rate data. Now whether or not\nblockchain.info succesfully captures all orphans I don't know, but given\nyou're reporting 4.5 to 9.4 seconds for 50th and 75th percentile\nrespectively that number 6.2s seems \"ballpark\" reasonable - remember\nthat hashing power is definitely not distributed evenly among the nodes\nyou are sampling from.\n\nWhich is another point... it may be the case that your propagation data\ndoesn't actually give any insight into real-world orphan rates because\nthe distribution of hashing power is concentrated into pools.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000064bb57c6681a117371f06c4efe26917d9179a56cc20cff9f2\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131124/c7c2d88e/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Network propagation speeds",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Michael Gronager",
                "Mike Hearn",
                "Peter Todd",
                "Gregory Maxwell",
                "Christian Decker"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 22499
        }
    },
    {
        "title": "[Bitcoin-development] Proof-of-storage txouts",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-11-27T15:24:58",
                "message_text_only": "So Sarchar and I were talking about his Bitstorage scheme(1) and we came\nto the conclusion that it wouldn't work. However he came up with a less\nabitious idea that I thought would work: force people to prove they were\nstill holding your data D by publishing transactions with scriptPubKeys\nof the form:\n\n    HASH160 H(D[i:i+n]) EQUALVERIFY {<pubkey> OP_CHECKSIG}\n\nWhere pubkey optionally lets you pick a specific person to hold your\ndata. (so the scheme isn't restricted to miners - hash-only\nscriptPubKeys aren't secure) Basically you'd publish the data and store\na much smaller random set of D[] samples. If you ever needed the data in\nfull, you know it's out there, so it's just a matter of haggling on the\nprice to get it back. (you may want to do some dry-runs for negotiation\nleverage...)\n\nHowever, I realized you can improve upon this greatly by deriving the\nECC privkeys from the random samples of data instead using H(E_k(D)),\nthat is, use a block cipher with key k, and then hash that to form the\nprivkey. Then create a perfectly normal txout paying to the appropriate\npubkey. Now only people who actually have the data can claim the txout,\nand everyone doesn't even know the scheme exists at all.\n\nFurthermore you can create key k using k_i=HMAC(i, K), where i in [0,\nn], so rewards for the proof can be released incrementally while only\nstoring a single secret key. Again, actual retrivial isn't necessarily\nguaranteed, but the odd dry-run is simple enough.\n\nOne last issue is how to distribute k_i, although this is made easier by\nthe fact that they can be tiny 128-bit numbers - they should however be\nsigned to avoid DoS attacks as only by processing all the data can the\nstorage node know if k_i works for the given txout.\n\n\n1) https://bitcointalk.org/index.php?topic=348868.new#new\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000056738baba2d1f0fb2638555529e0735e41e1ce9e0c946d48a\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131127/7e0e1652/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Proof-of-storage txouts",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2172
        }
    }
]