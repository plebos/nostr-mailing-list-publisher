[
    {
        "title": "[bitcoin-dev] A Better MMR Definition",
        "thread_messages": [
            {
                "author": "Bram Cohen",
                "date": "2017-03-01T01:47:30",
                "message_text_only": "On Tue, Feb 28, 2017 at 3:24 PM, Pieter Wuille <pieter.wuille at gmail.com>\nwrote:\n\n>\n> Yes, someone needs to have a lookup table from prevouts to TXO tree\n> positions. But because an insertion-ordered TXO tree does not rebalance,\n> that table can be maintained by wallets or service providers for just their\n> own coins, instead of by every full node and miner individually for\n> everyone's coins.\n>\n\nThat falls apart if you want to support proofs of non-spend, which is the\npoint of the whole exercise\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170228/7a006446/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2017-03-01T01:56:16",
                "message_text_only": "On Tue, Feb 28, 2017 at 05:47:30PM -0800, Bram Cohen via bitcoin-dev wrote:\n> On Tue, Feb 28, 2017 at 3:24 PM, Pieter Wuille <pieter.wuille at gmail.com>\n> wrote:\n> \n> >\n> > Yes, someone needs to have a lookup table from prevouts to TXO tree\n> > positions. But because an insertion-ordered TXO tree does not rebalance,\n> > that table can be maintained by wallets or service providers for just their\n> > own coins, instead of by every full node and miner individually for\n> > everyone's coins.\n> >\n> \n> That falls apart if you want to support proofs of non-spend, which is the\n> point of the whole exercise\n\nCan you explain in more detail what you mean there?\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170228/403df8fa/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2017-03-01T22:31:01",
                "message_text_only": "On Fri, Feb 24, 2017 at 10:23:20PM -0800, Bram Cohen wrote:\n> > Your merkle-set implementation is 1500 lines of densely written Python\n> \n> \n> The reference implementation which is included in those 1500 lines is less\n> than 300 lines and fairly straightforward. The non-reference implementation\n> always behaves semantically identically to the reference implementation, it\n> just does so faster and using less memory.\n\nGreat!\n\nBut do you see my point here? Even though I spent some time reading through\nthat code, I didn't realise you had a 300 line reference implementation\nembedded within those 1500 lines. This makes it less likely for you to get any\nreview on either.\n\nA better way to present your work would have been to at least explain that at\nthe top of the file, and perhaps even better, split the reference\nimplementation and optimized implementation into two separate files. If you did\nthis, you'd be more likely to get others to review your work.\n\n> > with\n> > almost no comments,\n> \n> \n> The comments at the top explain both the proof format and the in-memory\n> data structures very precisely. The whole codebase was reviewed by a\n> coworker of mine and comments were added explaining the subtleties which\n> tripped him up.\n\nYes, and it's good that you have those comments. But the codebase itself could\ndefinitely use more, and adding those comments would help get more people\nreviewing your work.\n\n> > and less than a 100 lines of (also uncommented) tests.\n> \n> \n> Those tests get 98% code coverage and extensively hit not only the lines of\n> code but the semantic edge cases as well. The lines which aren't hit are\n> convenience functions and error conditions of the parsing code for when\n> it's passed bad data\n\nGreat! But you see how without comments, it'll take a tremendous amount of work\nfor an external reviewer like myself to determine what is being tested, and\nwhat edge cases you're targeting.\n\nIn fact, I'd suggest that for things like edge cases, you test edge cases in\nseparate unit tests that explain what edge cases you're trying to catch.\n\n> > By\n> > comparison, my Python MMR implementation is 300 lines of very readable\n> > Python\n> > with lots of comments, a 200 line explanation at the top, and 200 lines of\n> > (commented) tests. Yet no-one is taking the (still considerable) effort to\n> > understand and comment on my implementation. :)\n> >\n> \n> Given that maaku's Merkle prefix trees were shelved because of performance\n> problems despite being written in C and operating in basically the same way\n> as your code and my reference code, it's clear that non-optimized Python\n> won't be touching the bitcoin codebase any time soon.\n\nTo be clear, I gave my implementation as an example of how hard it is to get\nexternal review, not to suggest it's going to be a part of Bitcoin; I've\npointed a lot of people to it when they asked for a MMR implementation, and I'm\nsure if some of those people had reviewed it carefully they would have\nsuggested changes. Yet they haven't, because doing good review is a lot of\nwork!\n\n> > In particular, while at the top of merkle_set.py you have a list of\n> > advantages,\n> > and a bunch of TODO's, you don't explain *why* the code has any of these\n> > advantages. To figure that out, I'd have to read and understand 1500 lines\n> > of\n> > densely written Python. Without a human-readable pitch, not many people are\n> > going to do that, myself included.\n> >\n> \n> It's all about cache coherence. When doing operations it pulls in a bunch\n> of things which are near each other in memory instead of jumping all over\n> the place. The improvements it gets should be much greater than the ones\n> gained from insertion ordering, although the two could be accretive.\n\nThat's good, but that paragraph should be part of your MerkleSet git repo,\npreferably in the README, where reviewers will immediately find it and get\nexcited about reviewing your code.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170301/53de0322/attachment.sig>"
            },
            {
                "author": "Bram Cohen",
                "date": "2017-03-31T20:38:16",
                "message_text_only": "On Wed, Mar 1, 2017 at 2:31 PM, Peter Todd <pete at petertodd.org> wrote:\n\n>\n> A better way to present your work would have been to at least explain that\n> at\n> the top of the file, and perhaps even better, split the reference\n> implementation and optimized implementation into two separate files. If\n> you did\n> this, you'd be more likely to get others to review your work.\n>\n\nI've now added explanation to the README, reorganized the files, and added\nsome comments:\n\nhttps://github.com/bramcohen/MerkleSet\n\nIn fact, I'd suggest that for things like edge cases, you test edge cases in\n> separate unit tests that explain what edge cases you're trying to catch.\n>\n\nThe tests work by doing a lot of exercising on pseudorandom data, an\napproach which does a good job of hitting all the lines of code and edge\ncases and requiring very little updating as the implementation changes, at\nthe expense of it taking a while for tests to run. The advantage of very\ncustom unit tests is that they run almost instantly, at the cost of\nrequiring painstaking maintenance and missing more stuff. I've come to\nfavor this approach in my old age.\n\nThe proportion of code devoted to tests is more than it looks like at first\nblush, because all the audit methods are just for testing.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170331/797a3461/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "A Better MMR Definition",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Bram Cohen",
                "Peter Todd"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 7364
        }
    },
    {
        "title": "[bitcoin-dev]  Currency/exchange rate information API",
        "thread_messages": [
            {
                "author": "Luke Dashjr",
                "date": "2017-03-04T08:27:32",
                "message_text_only": "Investigating what it would take to add fiat currency information to Bitcoin \nKnots, I noticed Electrum currently has many implementations, one for each \nexchange rate provider, due to lack of a common format for such data.\n\nTherefore, I put together an initial draft of a BIP that could standardise \nthis so wallets (or other software) and exchange rate providers can simply \ninteroperate without a lot of overhead reimplementing the same thing many \nways.\n\nOne thing I am unsure about, is that currently this draft requires using XBT \n(as BTC) for Bitcoin amounts. It would seem nicer to use satoshis, but those \ndon't really have a pseudo-ISO currency code to fit in nicely...\n\nCurrent draft here:\n    https://github.com/luke-jr/bips/blob/bip-xchgrate/bip-xchgrate.mediawiki\n\nThoughts? Anything critical missing? Ways to make the interface better?\n\nLuke"
            }
        ],
        "thread_summary": {
            "title": "Currency/exchange rate information API",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Luke Dashjr"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 856
        }
    },
    {
        "title": "[bitcoin-dev] Currency/exchange rate information API",
        "thread_messages": [
            {
                "author": "\u30a2\u30eb\u30e0\u3000\u30ab\u30fc\u30eb\u30e8\u30cf\u30f3",
                "date": "2017-03-04T15:18:50",
                "message_text_only": "I am surprised nothing like this exists already, so am all for the idea.\n\nMaybe I am misunderstanding, but I'm not sure you want to have\nthousand separators and other locale stuff in there. All currencies\nincluding USD are often shown in Swedish using space or dot as\nthousand separator and comma as decimal separator, e.g. \"1.234,56 USD\"\nor \"1 234,56 USD\". I.e. this is something that the locale of the\nuser's environment defines, not something the server should have\nopinions about. It is also not ideal to propose a given format based\non the user's locale, as some users have preferences for this (I\npersonally use US locale for numbers, and a US person who is visiting\nSweden wouldn't want this to suddenly change).\n\n-Kalle.\n\nOn Sat, Mar 4, 2017 at 12:27 AM, Luke Dashjr via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Investigating what it would take to add fiat currency information to Bitcoin\n> Knots, I noticed Electrum currently has many implementations, one for each\n> exchange rate provider, due to lack of a common format for such data.\n>\n> Therefore, I put together an initial draft of a BIP that could standardise\n> this so wallets (or other software) and exchange rate providers can simply\n> interoperate without a lot of overhead reimplementing the same thing many\n> ways.\n>\n> One thing I am unsure about, is that currently this draft requires using XBT\n> (as BTC) for Bitcoin amounts. It would seem nicer to use satoshis, but those\n> don't really have a pseudo-ISO currency code to fit in nicely...\n>\n> Current draft here:\n>     https://github.com/luke-jr/bips/blob/bip-xchgrate/bip-xchgrate.mediawiki\n>\n> Thoughts? Anything critical missing? Ways to make the interface better?\n>\n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Tim Ruffing",
                "date": "2017-03-06T05:37:24",
                "message_text_only": "I'm not sure if a BIP is the right thing in that case, given that the\nprovided functionality is not special to Bitcoin and can be used in\nother contexts as well. \n\nBut ignoring this, the server should be authenticated at a\nminimum.\u00a0Otherwise manipulating exchange rates seems to be a nice\nway\u00a0for the attacker on the wire to make money...\n\nApart from that, my feeling is that it could be simplified. Is\u00a0\nlongpolling useful? And is the historical rate thing really necessary\nfor typical applications?\n\nIf yes, the client should be allowed to decide on which time scale the\ndata should be. (tick, min, hour, day, ...) That goes together with\nclearly defining the type field (something like low, high, open, close,\nbut without flexibility). Think of a candle-stick chart basically.\n\nAlso, pushing may be more appropriate for \"current\" rates than polling.\nThen no polling interval is necessary. On the other hand, this adds\ncomplexity in other places, e.g., state.\n\nTim  \n\nOn Sat, 2017-03-04 at 08:27 +0000, Luke Dashjr via bitcoin-dev wrote:\n> Investigating what it would take to add fiat currency information to\n> Bitcoin\u00a0\n> Knots, I noticed Electrum currently has many implementations, one for\n> each\u00a0\n> exchange rate provider, due to lack of a common format for such data.\n> \n> Therefore, I put together an initial draft of a BIP that could\n> standardise\u00a0\n> this so wallets (or other software) and exchange rate providers can\n> simply\u00a0\n> interoperate without a lot of overhead reimplementing the same thing\n> many\u00a0\n> ways.\n> \n> One thing I am unsure about, is that currently this draft requires\n> using XBT\u00a0\n> (as BTC) for Bitcoin amounts. It would seem nicer to use satoshis,\n> but those\u00a0\n> don't really have a pseudo-ISO currency code to fit in nicely...\n> \n> Current draft here:\n> \u00a0\u00a0\u00a0\u00a0https://github.com/luke-jr/bips/blob/bip-xchgrate/bip-xchgrate.me\n> diawiki\n> \n> Thoughts? Anything critical missing? Ways to make the interface\n> better?\n> \n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Luke Dashjr",
                "date": "2017-03-06T07:09:39",
                "message_text_only": "On Monday, March 06, 2017 5:37:24 AM Tim Ruffing via bitcoin-dev wrote:\n> But ignoring this, the server should be authenticated at a\n> minimum. Otherwise manipulating exchange rates seems to be a nice\n> way for the attacker on the wire to make money...\n\nHTTPS would be used for that. It's not something that needs to be at a higher \nlayer.\n\n> Apart from that, my feeling is that it could be simplified. Is \n> longpolling useful?\n\nI would think so, at least for Bitcoin since rates can change significantly in \na short period of time (or can they anymore? I haven't really watched lately.)\n\n> And is the historical rate thing really necessary for typical applications?\n\nWhen displaying historical transactions, it doesn't really make sense to use \nthe current market rate, but rather the market rate at the time the payment \nwas made. While wallets might simply cache it with the transaction, it would \nbe perhaps nicer if it could be automatically restored for seed-only \nrecoveries. In any case, if a service/wallet doesn't want to provide/use \nhistorical information, it can simply not implement that part.\n\n> If yes, the client should be allowed to decide on which time scale the\n> data should be. (tick, min, hour, day, ...) That goes together with\n> clearly defining the type field (something like low, high, open, close,\n> but without flexibility). Think of a candle-stick chart basically.\n\nHow is the current draft insufficient for this?\n\n> Also, pushing may be more appropriate for \"current\" rates than polling.\n> Then no polling interval is necessary. On the other hand, this adds\n> complexity in other places, e.g., state.\n\nPushing is what longpolling does.\n\nLuke"
            },
            {
                "author": "Jonas Schnelli",
                "date": "2017-03-06T08:14:23",
                "message_text_only": "I like the BIP. It can reduce workload during implementation on both sides of the API and it allows to show the user more data without implementing tons of proprietary APIs.\nIt\u2019s not directly Bitcoin specific (example: BIP32 is also not Bitcoin specific), but I think a BIP is the right way for this.\n\n\n> \n>> Apart from that, my feeling is that it could be simplified. Is\n>> longpolling useful?\n> \n> I would think so, at least for Bitcoin since rates can change significantly in\n> a short period of time (or can they anymore? I haven't really watched lately.)\n\nLong polling is a simple push concept that works on most type of network configurations (NAT, proxy, etc.).\nThe only concern I see here is that an public API will quickly fill up the maximum allowed httpd connections.\nBut it\u2019s solvable.\n\n> \n>> And is the historical rate thing really necessary for typical applications?\n> \n> When displaying historical transactions, it doesn't really make sense to use\n> the current market rate, but rather the market rate at the time the payment\n> was made. While wallets might simply cache it with the transaction, it would\n> be perhaps nicer if it could be automatically restored for seed-only\n> recoveries. In any case, if a service/wallet doesn't want to provide/use\n> historical information, it can simply not implement that part.\n\nI\u2019m also not sure how useful historical datapoint are. I don\u2019t think the use case where someone wants to restore from a seed and get all exchange rates during the time of the payment is something users are looking for.\nHowever, It\u2019s optional.\n\n> \n>> If yes, the client should be allowed to decide on which time scale the\n>> data should be. (tick, min, hour, day, ...) That goes together with\n>> clearly defining the type field (something like low, high, open, close,\n>> but without flexibility). Think of a candle-stick chart basically.\n> \n> How is the current draft insufficient for this?\n> \n>> Also, pushing may be more appropriate for \"current\" rates than polling.\n>> Then no polling interval is necessary. On the other hand, this adds\n>> complexity in other places, e.g., state.\n> \n> Pushing is what longpolling does.\n\nAgree with Luke. A \u201ereal\u201c push (though I\u2019d say long-polling is the real push, AFAIK it\u2019s also the technique behind Apple\u2019s iOS push channel) would require a complex server setup that complicates many things like load-balancer, mem-caching, etc.\n\n\n</jonas>\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170306/ec223a69/attachment.sig>"
            },
            {
                "author": "Tim Ruffing",
                "date": "2017-03-06T21:54:16",
                "message_text_only": "On Mon, 2017-03-06 at 07:09 +0000, Luke Dashjr wrote:\n> On Monday, March 06, 2017 5:37:24 AM Tim Ruffing via bitcoin-dev\n> wrote:\n> > But ignoring this, the server should be authenticated at a\n> > minimum. Otherwise manipulating exchange rates seems to be a nice\n> > way for the attacker on the wire to make money...\n> \n> HTTPS would be used for that. It's not something that needs to be at\n> a higher\u00a0\n> layer.\nSure, HTTPS is the way to go. But I think that should be required or at\nleast noted in the BIP, because people could miss easily, e.g., \"I\ndon't need TLS, all the data is public anyway.\"\n\n> When displaying historical transactions, it doesn't really make sense\n> to use\u00a0\n> the current market rate, but rather the market rate at the time the\n> payment\u00a0\n> was made. While wallets might simply cache it with the transaction,\n> it would\u00a0\n> be perhaps nicer if it could be automatically restored for seed-only\u00a0\n> recoveries. In any case, if a service/wallet doesn't want to\n> provide/use\u00a0\n> historical information, it can simply not implement that part.\n> \nHaving the rate at the time of payment is indeed very useful, yes.\nHowever that requires just a single value per payment, and there is no\nquery that tells the server \"give me the value closest to timestamp t\"\nor similar.\nOf course the client can download and keep a large part of history and\nextract the information on its own but I can imagine that not every\nclients wants to do that, and also the client does not know in advance\nthe bounds (from, to) that it must query.\n\n> > If yes, the client should be allowed to decide on which time scale\n> the\n> > data should be. (tick, min, hour, day, ...) That goes together with\n> > clearly defining the type field (something like low, high, open,\n> close,\n> > but without flexibility). Think of a candle-stick chart basically.\n> \n> How is the current draft insufficient for this?\n> \nIn the current draft the client or the server cannot specify\ngranularity. If the clients only wants one value per day but for an\nentire year, then it has to perform many requests or download and\nprocess a very large response.\nAlso, I think it's okay that the type field allows for arbitrary user-\ndefined values, but it should also have some precisely defined values\n(e.g. the mentioned low/high/open/close/typical).\nFor example, it's not clear currently what \"low\" means for a timestamp\n(as opposed to a time span). Is it the low of the entire day or the low\nsince the previous record or something different?  \n\nOne has to be careful not to add too much complexity though. As soon as\none moves away from timestamps to something like hours or days, all\nkind of issues with timezone, daylight saving time etc. appear. Maybe a\nsimple way to let the client ask \"give me one value for every interval\nof 3600 seconds\" or similar. \n\n\n> Pushing is what longpolling does.\n> \nThat makes a lot of sense, yes.\n\n\nTim"
            },
            {
                "author": "Tim Ruffing",
                "date": "2017-03-06T22:02:53",
                "message_text_only": "On Mon, 2017-03-06 at 16:54 -0500, Tim Ruffing via bitcoin-dev wrote:\n> \n> > Pushing is what longpolling does.\n> > \n> \n> That makes a lot of sense, yes.\n> \nForgot one thing:\nFor longpolling, maybe we would like to have the possibility to request\nsome periodic message from the server. Otherwise clients cannot\ndistinguish between the situations 1. \"value is still in the requested\nbounds (minrate, maxrate)\" and 2. \"connection has dropped\". So the user\nmay take a wrong decision because  he assumed that the value is still\nin bounds holds but actually the server has died.\n\nTim"
            },
            {
                "author": "Luke Dashjr",
                "date": "2017-03-06T22:21:24",
                "message_text_only": "On Monday, March 06, 2017 10:02:53 PM Tim Ruffing via bitcoin-dev wrote:\n> For longpolling, maybe we would like to have the possibility to request\n> some periodic message from the server. Otherwise clients cannot\n> distinguish between the situations 1. \"value is still in the requested\n> bounds (minrate, maxrate)\" and 2. \"connection has dropped\". So the user\n> may take a wrong decision because  he assumed that the value is still\n> in bounds holds but actually the server has died.\n\nThat's the job of TCP.\nDo you think we need to explicitly specify a keepalive configuration?\nSeems like that would vary based on client or network."
            },
            {
                "author": "Luke Dashjr",
                "date": "2017-03-06T22:14:47",
                "message_text_only": "On Monday, March 06, 2017 9:54:16 PM Tim Ruffing wrote:\n> Having the rate at the time of payment is indeed very useful, yes.\n> However that requires just a single value per payment, and there is no\n> query that tells the server \"give me the value closest to timestamp t\"\n> or similar.\n> Of course the client can download and keep a large part of history and\n> extract the information on its own but I can imagine that not every\n> clients wants to do that, and also the client does not know in advance\n> the bounds (from, to) that it must query.\n\nIt would be a privacy leak to request only the specific timestamps, but I \nsuppose many wallets lack even basic privacy to begin with.\n\nTo address the bounds issue, I have specified that when from/to don't have an \nexact record, that the previous/next (respectively) is provided.\n\nHopefully this addresses both concerns?\n\n> In the current draft the client or the server cannot specify\n> granularity. If the clients only wants one value per day but for an\n> entire year, then it has to perform many requests or download and\n> process a very large response.\n\nThat's what the \"timedelta\" field solves, no?\nIf you want one value per day, you'd put 86400.\n\n> Also, I think it's okay that the type field allows for arbitrary user-\n> defined values, but it should also have some precisely defined values\n> (e.g. the mentioned low/high/open/close/typical).\n> For example, it's not clear currently what \"low\" means for a timestamp\n> (as opposed to a time span). Is it the low of the entire day or the low\n> since the previous record or something different?\n\nIs it not sufficient for the server to specify this in the description of the \ngiven currency-pair feed?\n\nLuke"
            },
            {
                "author": "Tim Ruffing",
                "date": "2017-03-06T22:30:59",
                "message_text_only": "On Mon, 2017-03-06 at 22:14 +0000, Luke Dashjr wrote:\n> It would be a privacy leak to request only the specific timestamps,\n> but I\u00a0\n> suppose many wallets lack even basic privacy to begin with.\n> \n> To address the bounds issue, I have specified that when from/to don't\n> have an\u00a0\n> exact record, that the previous/next (respectively) is provided.\n> \n> Hopefully this addresses both concerns?\nYes, that solves it. You're right with the privacy concern however.\n\n> \n> > In the current draft the client or the server cannot specify\n> > granularity. If the clients only wants one value per day but for an\n> > entire year, then it has to perform many requests or download and\n> > process a very large response.\n> \n> That's what the \"timedelta\" field solves, no?\n> If you want one value per day, you'd put 86400.\nOh sure, I had overlooked that.\n\n> \n> > Also, I think it's okay that the type field allows for arbitrary\n> user-\n> > defined values, but it should also have some precisely defined\n> values\n> > (e.g. the mentioned low/high/open/close/typical).\n> > For example, it's not clear currently what \"low\" means for a\n> timestamp\n> > (as opposed to a time span). Is it the low of the entire day or the\n> low\n> > since the previous record or something different?\n> \n> Is it not sufficient for the server to specify this in the\n> description of the\u00a0\n> given currency-pair feed?\nThat works but a standardized way of indicating that piece of\ninformation to the client is useful. Then the client can display a\n\"connection status\" to the user, e.g., an \"possible out-of-date\"\nwarning like the warning sign in the Qt GUI when Bitcoin Core is\ncatching up the network.\n\n\nTim"
            },
            {
                "author": "Tim Ruffing",
                "date": "2017-03-06T22:38:25",
                "message_text_only": "On Mon, 2017-03-06 at 17:30 -0500, Tim Ruffing via bitcoin-dev wrote:\n> \n> That works but a standardized way of indicating that piece of\n> information to the client is useful. Then the client can display a\n> \"connection status\" to the user, e.g., an \"possible out-of-date\"\n> warning like the warning sign in the Qt GUI when Bitcoin Core is\n> catching up the network.\n\nWait, forget this reply, I mixed up the two issues of keepalive and\ndefinition of low, high etc... -.-\n\n1. Keepalive for longpolling:\nAs I said, this can be useful for an out-of-date warning. I don't know\nif this is better solved with TCP keepalive or on the higher layer.\n\n2. Definition of low, high:\nMy feeling is that there is nothing wrong with providing exact\ndefinitions in the BIP, i.e.., giving up the flexibility does not too\nhurt much. However all of this is a minor issue after all.\n\nTim"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2017-03-06T23:14:13",
                "message_text_only": "On 03/06/2017 06:37 AM, Tim Ruffing via bitcoin-dev wrote:\n\n> And is the historical rate thing really necessary\n> for typical applications?\n\nYes, it is. Basically all incoming transactions are historical, as your\nwallet is likely not online when it happens."
            },
            {
                "author": "Marcel Jamin",
                "date": "2017-03-07T09:29:24",
                "message_text_only": "> Why are multiple results separated by a line-feed rather than using a JSON Array?\n> * Clients ought to cache historical data, and using a line-feed format allows them to simply append to a cache file.\n> * Parsing JSON typically requires the entire data parsed together as a single memory object. Using simple lines to separate results, however, allows parsing a single result at a time.\n> What if long descriptions require line and paragraph breaks?\n> * Clients should word-wrap long lines, and JSON escapes newlines as \"\\n\" which can be used doubly (\"\\n\\n\") for paragraph breaks.\n\nI'd file this under premature optimization at the cost of\ninteroperability. If you use JSON, then please use it properly.\n\nI'd also say it's the job of the parser to offer a way of doing that,\ne.g. in .NET you can easily achieve that with Newtonsoft's JSON\nparser: http://stackoverflow.com/questions/20374083/deserialize-json-array-stream-one-item-at-a-time.\n\nOn 4 March 2017 at 09:27, Luke Dashjr via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Investigating what it would take to add fiat currency information to Bitcoin\n> Knots, I noticed Electrum currently has many implementations, one for each\n> exchange rate provider, due to lack of a common format for such data.\n>\n> Therefore, I put together an initial draft of a BIP that could standardise\n> this so wallets (or other software) and exchange rate providers can simply\n> interoperate without a lot of overhead reimplementing the same thing many\n> ways.\n>\n> One thing I am unsure about, is that currently this draft requires using XBT\n> (as BTC) for Bitcoin amounts. It would seem nicer to use satoshis, but those\n> don't really have a pseudo-ISO currency code to fit in nicely...\n>\n> Current draft here:\n>     https://github.com/luke-jr/bips/blob/bip-xchgrate/bip-xchgrate.mediawiki\n>\n> Thoughts? Anything critical missing? Ways to make the interface better?\n>\n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Andrew LeCody",
                "date": "2017-03-13T18:10:57",
                "message_text_only": "This formatting of JSON isn't unheard of though, it's typically called JSON\nStreaming[1]. As long as exchanges implementing the API actually follow the\nBIP and keep one JSON object per line, it shouldn't be a problem to decode.\n\n1. https://en.wikipedia.org/wiki/JSON_Streaming\n\nOn Tue, Mar 7, 2017 at 8:07 AM Marcel Jamin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> > Why are multiple results separated by a line-feed rather than using a\n> JSON Array?\n> > * Clients ought to cache historical data, and using a line-feed format\n> allows them to simply append to a cache file.\n> > * Parsing JSON typically requires the entire data parsed together as a\n> single memory object. Using simple lines to separate results, however,\n> allows parsing a single result at a time.\n> > What if long descriptions require line and paragraph breaks?\n> > * Clients should word-wrap long lines, and JSON escapes newlines as \"\\n\"\n> which can be used doubly (\"\\n\\n\") for paragraph breaks.\n>\n> I'd file this under premature optimization at the cost of\n> interoperability. If you use JSON, then please use it properly.\n>\n> I'd also say it's the job of the parser to offer a way of doing that,\n> e.g. in .NET you can easily achieve that with Newtonsoft's JSON\n> parser:\n> http://stackoverflow.com/questions/20374083/deserialize-json-array-stream-one-item-at-a-time\n> .\n>\n> On 4 March 2017 at 09:27, Luke Dashjr via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> > Investigating what it would take to add fiat currency information to\n> Bitcoin\n> > Knots, I noticed Electrum currently has many implementations, one for\n> each\n> > exchange rate provider, due to lack of a common format for such data.\n> >\n> > Therefore, I put together an initial draft of a BIP that could\n> standardise\n> > this so wallets (or other software) and exchange rate providers can\n> simply\n> > interoperate without a lot of overhead reimplementing the same thing many\n> > ways.\n> >\n> > One thing I am unsure about, is that currently this draft requires using\n> XBT\n> > (as BTC) for Bitcoin amounts. It would seem nicer to use satoshis, but\n> those\n> > don't really have a pseudo-ISO currency code to fit in nicely...\n> >\n> > Current draft here:\n> >\n> https://github.com/luke-jr/bips/blob/bip-xchgrate/bip-xchgrate.mediawiki\n> >\n> > Thoughts? Anything critical missing? Ways to make the interface better?\n> >\n> > Luke\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170313/b8f95ee6/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Currency/exchange rate information API",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Andreas Schildbach",
                "Andrew LeCody",
                "\u30a2\u30eb\u30e0\u3000\u30ab\u30fc\u30eb\u30e8\u30cf\u30f3",
                "Tim Ruffing",
                "Marcel Jamin",
                "Luke Dashjr",
                "Jonas Schnelli"
            ],
            "messages_count": 13,
            "total_messages_chars_count": 22105
        }
    },
    {
        "title": "[bitcoin-dev] Unique node identifiers",
        "thread_messages": [
            {
                "author": "John Hardy",
                "date": "2017-03-04T16:04:50",
                "message_text_only": "The discussion of UASF got me thinking about whether such a method might lead to sybil attacks, with new nodes created purely to inflate the node count for a particular implementation in an attempt at social engineering.\n\n\nI had an idea for an anonymous, opt-in, unique node identification mechanism to help counter this.\n\n\nThis would give every node the opportunity to create a node \u2018address\u2019/unique identifier. This could even come in the form of a Bitcoin address.\n\n\nThe node on first installation generates and backs up a private key. The corresponding public key becomes that node\u2019s unique identifier. If the node switches to a new software version or a new IP, the identifier can remain constant if the node operator chooses.\n\n\nAsking a node for its identifier can be done by sending a message the command \u2018identify\u2019 and a challenge. The node can then respond with its unique identifier and a signature for the challenge to prove it. The node can also include what software it is running and sign this information so it can be verified as legitimate by third parties.\n\n\nWhy would we do this?\n\n\nWell, it adds a small but very useful piece of data when compiling lists of active nodes.\n\n\nAny register of active nodes can have a record of when a node identifier was \u201cfirst seen\u201d, and how many IPs the same identifier has broadcast from. Also, crucially, we could see what software the node operator has been seen running historically.\n\n\nThis information would make it easy to identify patterns. For example if a huge new group of nodes appeared on the network with no history for their identifier they could likely be dismissed as sybil attacks. If a huge number of nodes that had been reporting as Bitcoin Core for an extended period of time started switching to a rival implementation, this would add credibility but not certainty (keys could be traded), that the shift was more organic.\n\n\nThis would be trivial to implement, is (to me?) non-controversial, and would give a way for a node to link itself to a pseudo-anonymous identity, but with the freedom to opt-out at any time.\n\n\nKeen to hear any thoughts?\n\n\nThanks,\n\n\nJohn Hardy\n\njohn at seebitcoin.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170304/e785bc48/attachment.html>"
            },
            {
                "author": "Marcel Jamin",
                "date": "2017-03-05T06:29:16",
                "message_text_only": "> This could even come in the form of a Bitcoin address.\n\nWouldn't this actually *need* to be a bitcoin address that is included in a\nblock to get any real assurances about the age if this node id? Otherwise\nmalicous nodes could lie and claim to have seen a brand new node id years\nago already.\n\nEven if included in a block, people could sell their aged IDs (if we were\nto rely on those for anything).\n\nAlso funding that ID address would might tie your economic activity (or\neven identity) to a node.\n\nOn 4 March 2017 at 17:04, John Hardy via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> The discussion of UASF got me thinking about whether such a method might\n> lead to sybil attacks, with new nodes created purely to inflate the node\n> count for a particular implementation in an attempt at social engineering.\n>\n> I had an idea for an anonymous, opt-in, unique node identification\n> mechanism to help counter this.\n>\n> This would give every node the opportunity to create a node\n> \u2018address\u2019/unique identifier. This could even come in the form of a Bitcoin\n> address.\n>\n> The node on first installation generates and backs up a private key. The\n> corresponding public key becomes that node\u2019s unique identifier. If the node\n> switches to a new software version or a new IP, the identifier can remain\n> constant if the node operator chooses.\n>\n> Asking a node for its identifier can be done by sending a message the\n> command \u2018identify\u2019 and a challenge. The node can then respond with its\n> unique identifier and a signature for the challenge to prove it. The node\n> can also include what software it is running and sign this information so\n> it can be verified as legitimate by third parties.\n>\n> Why would we do this?\n>\n> Well, it adds a small but very useful piece of data when compiling lists\n> of active nodes.\n>\n> Any register of active nodes can have a record of when a node identifier\n> was \u201cfirst seen\u201d, and how many IPs the same identifier has broadcast from.\n> Also, crucially, we could see what software the node operator has been seen\n> running historically.\n>\n> This information would make it easy to identify patterns. For example if a\n> huge new group of nodes appeared on the network with no history for their\n> identifier they could likely be dismissed as sybil attacks. If a huge\n> number of nodes that had been reporting as Bitcoin Core for an extended\n> period of time started switching to a rival implementation, this would add\n> credibility but not certainty (keys could be traded), that the shift was\n> more organic.\n>\n> This would be trivial to implement, is (to me?) non-controversial, and\n> would give a way for a node to link itself to a pseudo-anonymous identity,\n> but with the freedom to opt-out at any time.\n>\n> Keen to hear any thoughts?\n>\n> Thanks,\n>\n> John Hardy\n>\n> john at seebitcoin.com\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170305/baaa502c/attachment.html>"
            },
            {
                "author": "John Hardy",
                "date": "2017-03-05T12:55:27",
                "message_text_only": "> Wouldn't this actually *need* to be a bitcoin address that is included in a block\n\nI think it being a bitcoin address probably makes the most sense. The address could even be used for donations to incentivise identifier use.\n\nI had not really envisaged this having any blockchain presence though. It was just an easy way to give third party node monitors like coin.dance and bitnodes.21.co a few more metrics.\n\nThat said, it would allow the creation of a 'nodepool', where each node could broadcast its latest status like a transaction, and every node has a register of active nodes. Like a mempool, but for nodes.\n\nBy leveraging the randomness of node identities, it could be that a deterministic subset of nodes randomly check that a new node status update is legitimate by querying the node directly (a small enough subset to not cause a DDOS). If a threshhold of those random checking nodes reports that the node either doesn't exist or is responding with conflicting information, this will become evident to the network and can be flagged.\n\nThis should paint a pretty accurate picture of the state of the network, and might also prove useful for developing lightning routing?\n\n________________________________\nFrom: Marcel Jamin <marcel at jamin.net>\nSent: Sunday, March 5, 2017 6:29 AM\nTo: John Hardy; Bitcoin Protocol Discussion\nSubject: Re: [bitcoin-dev] Unique node identifiers\n\n> This could even come in the form of a Bitcoin address.\n\nWouldn't this actually *need* to be a bitcoin address that is included in a block to get any real assurances about the age if this node id? Otherwise malicous nodes could lie and claim to have seen a brand new node id years ago already.\n\nEven if included in a block, people could sell their aged IDs (if we were to rely on those for anything).\n\nAlso funding that ID address would might tie your economic activity (or even identity) to a node.\n\nOn 4 March 2017 at 17:04, John Hardy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n\nThe discussion of UASF got me thinking about whether such a method might lead to sybil attacks, with new nodes created purely to inflate the node count for a particular implementation in an attempt at social engineering.\n\n\nI had an idea for an anonymous, opt-in, unique node identification mechanism to help counter this.\n\n\nThis would give every node the opportunity to create a node \u2018address\u2019/unique identifier. This could even come in the form of a Bitcoin address.\n\n\nThe node on first installation generates and backs up a private key. The corresponding public key becomes that node\u2019s unique identifier. If the node switches to a new software version or a new IP, the identifier can remain constant if the node operator chooses.\n\n\nAsking a node for its identifier can be done by sending a message the command \u2018identify\u2019 and a challenge. The node can then respond with its unique identifier and a signature for the challenge to prove it. The node can also include what software it is running and sign this information so it can be verified as legitimate by third parties.\n\n\nWhy would we do this?\n\n\nWell, it adds a small but very useful piece of data when compiling lists of active nodes.\n\n\nAny register of active nodes can have a record of when a node identifier was \u201cfirst seen\u201d, and how many IPs the same identifier has broadcast from. Also, crucially, we could see what software the node operator has been seen running historically.\n\n\nThis information would make it easy to identify patterns. For example if a huge new group of nodes appeared on the network with no history for their identifier they could likely be dismissed as sybil attacks. If a huge number of nodes that had been reporting as Bitcoin Core for an extended period of time started switching to a rival implementation, this would add credibility but not certainty (keys could be traded), that the shift was more organic.\n\n\nThis would be trivial to implement, is (to me?) non-controversial, and would give a way for a node to link itself to a pseudo-anonymous identity, but with the freedom to opt-out at any time.\n\n\nKeen to hear any thoughts?\n\n\nThanks,\n\n\nJohn Hardy\n\njohn at seebitcoin.com<mailto:john at seebitcoin.com>\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170305/f716ff99/attachment-0001.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2017-03-05T13:27:08",
                "message_text_only": "Nodes are by design not supposed to be identifiable in any way, including\npersisting identities across IPs changes or when connecting over different\nnetworks (e.g. clearnet/tor). Anything that makes Bitcoin less private is a\nstep backwards. Also absolute node count is pretty meaningless since only\nfully validating nodes that participate in economic activity really matter.\n\nAs a side note, this should probably have started out as a bitcoin-discuss\npost.\n\nOn Sat, Mar 4, 2017 at 4:04 PM, John Hardy via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> The discussion of UASF got me thinking about whether such a method might\n> lead to sybil attacks, with new nodes created purely to inflate the node\n> count for a particular implementation in an attempt at social engineering.\n>\n> I had an idea for an anonymous, opt-in, unique node identification\n> mechanism to help counter this.\n>\n> This would give every node the opportunity to create a node\n> \u2018address\u2019/unique identifier. This could even come in the form of a Bitcoin\n> address.\n>\n> The node on first installation generates and backs up a private key. The\n> corresponding public key becomes that node\u2019s unique identifier. If the node\n> switches to a new software version or a new IP, the identifier can remain\n> constant if the node operator chooses.\n>\n> Asking a node for its identifier can be done by sending a message the\n> command \u2018identify\u2019 and a challenge. The node can then respond with its\n> unique identifier and a signature for the challenge to prove it. The node\n> can also include what software it is running and sign this information so\n> it can be verified as legitimate by third parties.\n>\n> Why would we do this?\n>\n> Well, it adds a small but very useful piece of data when compiling lists\n> of active nodes.\n>\n> Any register of active nodes can have a record of when a node identifier\n> was \u201cfirst seen\u201d, and how many IPs the same identifier has broadcast from.\n> Also, crucially, we could see what software the node operator has been seen\n> running historically.\n>\n> This information would make it easy to identify patterns. For example if a\n> huge new group of nodes appeared on the network with no history for their\n> identifier they could likely be dismissed as sybil attacks. If a huge\n> number of nodes that had been reporting as Bitcoin Core for an extended\n> period of time started switching to a rival implementation, this would add\n> credibility but not certainty (keys could be traded), that the shift was\n> more organic.\n>\n> This would be trivial to implement, is (to me?) non-controversial, and\n> would give a way for a node to link itself to a pseudo-anonymous identity,\n> but with the freedom to opt-out at any time.\n>\n> Keen to hear any thoughts?\n>\n> Thanks,\n>\n> John Hardy\n>\n> john at seebitcoin.com\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170305/efa7c897/attachment.html>"
            },
            {
                "author": "John Hardy",
                "date": "2017-03-05T13:57:08",
                "message_text_only": "> Nodes are by design not supposed to be identifiable in any way\n\nI feel you're conflating social identifiability with technical identifiability. Sure, a node operator must always be able to remain anonymous, but nodes themselves require a certain level of identifiability otherwise there would be no means to communicate between them.\n\nI agree that absolute node counts have their limitations, but that doesn't stop them being used as a measure and even propaganda tool. If something like this is a way to help highlight the latter when it is occurring I think it has value. I 'm not convinced that node identifiers or identity persistence would have any meaningful impact on privacy, though am open to being convinced otherwise.\n\n\n________________________________\nFrom: Btc Drak <btcdrak at gmail.com>\nSent: Sunday, March 5, 2017 1:27 PM\nTo: John Hardy; Bitcoin Protocol Discussion\nSubject: Re: [bitcoin-dev] Unique node identifiers\n\nNodes are by design not supposed to be identifiable in any way, including persisting identities across IPs changes or when connecting over different networks (e.g. clearnet/tor). Anything that makes Bitcoin less private is a step backwards. Also absolute node count is pretty meaningless since only fully validating nodes that participate in economic activity really matter.\n\nAs a side note, this should probably have started out as a bitcoin-discuss post.\n\nOn Sat, Mar 4, 2017 at 4:04 PM, John Hardy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n\nThe discussion of UASF got me thinking about whether such a method might lead to sybil attacks, with new nodes created purely to inflate the node count for a particular implementation in an attempt at social engineering.\n\n\nI had an idea for an anonymous, opt-in, unique node identification mechanism to help counter this.\n\n\nThis would give every node the opportunity to create a node \u2018address\u2019/unique identifier. This could even come in the form of a Bitcoin address.\n\n\nThe node on first installation generates and backs up a private key. The corresponding public key becomes that node\u2019s unique identifier. If the node switches to a new software version or a new IP, the identifier can remain constant if the node operator chooses.\n\n\nAsking a node for its identifier can be done by sending a message the command \u2018identify\u2019 and a challenge. The node can then respond with its unique identifier and a signature for the challenge to prove it. The node can also include what software it is running and sign this information so it can be verified as legitimate by third parties.\n\n\nWhy would we do this?\n\n\nWell, it adds a small but very useful piece of data when compiling lists of active nodes.\n\n\nAny register of active nodes can have a record of when a node identifier was \u201cfirst seen\u201d, and how many IPs the same identifier has broadcast from. Also, crucially, we could see what software the node operator has been seen running historically.\n\n\nThis information would make it easy to identify patterns. For example if a huge new group of nodes appeared on the network with no history for their identifier they could likely be dismissed as sybil attacks. If a huge number of nodes that had been reporting as Bitcoin Core for an extended period of time started switching to a rival implementation, this would add credibility but not certainty (keys could be traded), that the shift was more organic.\n\n\nThis would be trivial to implement, is (to me?) non-controversial, and would give a way for a node to link itself to a pseudo-anonymous identity, but with the freedom to opt-out at any time.\n\n\nKeen to hear any thoughts?\n\n\nThanks,\n\n\nJohn Hardy\n\njohn at seebitcoin.com<mailto:john at seebitcoin.com>\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170305/3f0fadb5/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2017-03-07T18:44:07",
                "message_text_only": "> On Mar 5, 2017, at 5:57 AM, John Hardy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> > Nodes are by design not supposed to be identifiable in any way\n\nThis is of course my objection to BIP150 (\"a way for peers to ... guarantee node ownership\").\n\n> I feel you're conflating social identifiability with technical identifiability. Sure, a node operator must always be able to remain anonymous, but nodes themselves require a certain level of identifiability otherwise there would be no means to communicate between them.\n\nAnonymous node identity is pointless, and is why I object to BIP151. It provides no actual security/privacy benefit and is a stepping stone to non-anonymous node identity (e.g. BIP150).\n\n> I agree that absolute node counts have their limitations, but that doesn't stop them being used as a measure and even propaganda tool. If something like this is a way to help highlight the latter when it is occurring I think it has value. I 'm not convinced that node identifiers or identity persistence would have any meaningful impact on privacy, though am open to being convinced otherwise.\n\nBitcoin does not require node counts, and this proposal is redundant with BIP150.\n\ne\n\n> \n> From: Btc Drak <btcdrak at gmail.com>\n> Sent: Sunday, March 5, 2017 1:27 PM\n> To: John Hardy; Bitcoin Protocol Discussion\n> Subject: Re: [bitcoin-dev] Unique node identifiers\n>  \n> Nodes are by design not supposed to be identifiable in any way, including persisting identities across IPs changes or when connecting over different networks (e.g. clearnet/tor). Anything that makes Bitcoin less private is a step backwards. Also absolute node count is pretty meaningless since only fully validating nodes that participate in economic activity really matter.\n> \n> As a side note, this should probably have started out as a bitcoin-discuss post.\n> \n>> On Sat, Mar 4, 2017 at 4:04 PM, John Hardy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> The discussion of UASF got me thinking about whether such a\n>>  method might lead to sybil attacks, with new nodes created purely to inflate the node count for a particular implementation in an attempt at social engineering.\n>> \n>> I had an idea for an anonymous, opt-in, unique node identification\n>>  mechanism to help counter this.\n>> \n>> This would give every node the opportunity to create a node\n>>  \u2018address\u2019/unique identifier. This could even come in the form of a Bitcoin address.\n>> \n>> The node on first installation generates and backs up a private\n>>  key. The corresponding public key becomes that node\u2019s unique identifier. If the node switches to a new software version or a new IP, the identifier can remain constant if the node operator chooses.\n>> \n>> Asking a node for its identifier can be done by sending a message\n>>  the command \u2018identify\u2019 and a challenge. The node can then respond with its unique identifier and a signature for the challenge to prove it. The node can also include what software it is running and sign this information so it can be verified as legitimate\n>>  by third parties.\n>> \n>> Why would we do this?\n>> \n>> Well, it adds a small but very useful piece of data when compiling\n>>  lists of active nodes.\n>> \n>> Any register of active nodes can have a record of when a node\n>>  identifier was \u201cfirst seen\u201d, and how many IPs the same identifier has broadcast from. Also, crucially, we could see what software the node operator has been seen running historically.\n>> \n>> This information would make it easy to identify patterns. For\n>>  example if a huge new group of nodes appeared on the network with no history for their identifier they could likely be dismissed as sybil attacks. If a huge number of nodes that had been reporting as Bitcoin Core for an extended period of time started switching\n>>  to a rival implementation, this would add credibility but not certainty (keys could be traded), that the shift was more organic.\n>> \n>> This would be trivial to implement, is (to me?) non-controversial,\n>>  and would give a way for a node to link itself to a pseudo-anonymous identity, but with the freedom to opt-out at any time.\n>> \n>> Keen to hear any thoughts?\n>> \n>> Thanks,\n>> \n>> John Hardy\n>> john at seebitcoin.com\n>> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170307/40eb419f/attachment-0001.html>"
            },
            {
                "author": "bfd at cock.lu",
                "date": "2017-03-08T02:01:26",
                "message_text_only": ">> I feel you're conflating social identifiability with technical\n>> identifiability. Sure, a node operator must always be able to remain\n>> anonymous, but nodes themselves require a certain level of\n>> identifiability otherwise there would be no means to communicate\n>> between them.\n\nNodes running through networks like cjdns, onion, and i2p can\neffectively communicate with no knowledge of the counterparty\nwhatsoever. Bitcoin does make an assumption that you are connected to\nat least one non-partitioned peer, and that there is a cost in having\na large number of sybil nodes in many different ranges. Nothing\nsays you have to do your communication exclusively on one network or\nanother, so long as you have *some* source of information which is not\npartitioned.\n\n\n\nOn 2017-03-08 05:44, Eric Voskuil via bitcoin-dev wrote:\n> On Mar 5, 2017, at 5:57 AM, John Hardy via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n>>> Nodes are by design not supposed to be identifiable in any way\n> \n> This is of course my objection to BIP150 (\"a way for peers to ...\n> guarantee node ownership\").\n> \n>> I feel you're conflating social identifiability with technical\n>> identifiability. Sure, a node operator must always be able to remain\n>> anonymous, but nodes themselves require a certain level of\n>> identifiability otherwise there would be no means to communicate\n>> between them.\n> \n> Anonymous node identity is pointless, and is why I object to BIP151.\n> It provides no actual security/privacy benefit and is a stepping stone\n> to non-anonymous node identity (e.g. BIP150).\n> \n>> I agree that absolute node counts have their limitations, but that\n>> doesn't stop them being used as a measure and even propaganda tool.\n>> If something like this is a way to help highlight the latter when it\n>> is occurring I think it has value. I 'm not convinced that node\n>> identifiers or identity persistence would have any meaningful impact\n>> on privacy, though am open to being convinced otherwise.\n> \n> Bitcoin does not require node counts, and this proposal is redundant\n> with BIP150.\n> \n> e\n> \n>> -------------------------\n>> \n>> FROM: Btc Drak <btcdrak at gmail.com>\n>> SENT: Sunday, March 5, 2017 1:27 PM\n>> TO: John Hardy; Bitcoin Protocol Discussion\n>> SUBJECT: Re: [bitcoin-dev] Unique node identifiers\n>> \n>> Nodes are by design not supposed to be identifiable in any way,\n>> including persisting identities across IPs changes or when\n>> connecting over different networks (e.g. clearnet/tor). Anything\n>> that makes Bitcoin less private is a step backwards. Also absolute\n>> node count is pretty meaningless since only fully validating nodes\n>> that participate in economic activity really matter.\n>> \n>> As a side note, this should probably have started out as a\n>> bitcoin-discuss post.\n>> \n>> On Sat, Mar 4, 2017 at 4:04 PM, John Hardy via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>>> The discussion of UASF got me thinking about whether such a method\n>>> might lead to sybil attacks, with new nodes created purely to\n>>> inflate the node count for a particular implementation in an\n>>> attempt at social engineering.\n>>> I had an idea for an anonymous, opt-in, unique node identification\n>>> mechanism to help counter this.\n>>> This would give every node the opportunity to create a node\n>>> \u2018address\u2019/unique identifier. This could even come in the form\n>>> of a Bitcoin address.\n>>> The node on first installation generates and backs up a private\n>>> key. The corresponding public key becomes that node\u2019s unique\n>>> identifier. If the node switches to a new software version or a\n>>> new IP, the identifier can remain constant if the node operator\n>>> chooses.\n>>> Asking a node for its identifier can be done by sending a message\n>>> the command \u2018identify\u2019 and a challenge. The node can then\n>>> respond with its unique identifier and a signature for the\n>>> challenge to prove it. The node can also include what software it\n>>> is running and sign this information so it can be verified as\n>>> legitimate by third parties.\n>>> Why would we do this?\n>>> Well, it adds a small but very useful piece of data when compiling\n>>> lists of active nodes.\n>>> Any register of active nodes can have a record of when a node\n>>> identifier was \u201cfirst seen\u201d, and how many IPs the same\n>>> identifier has broadcast from. Also, crucially, we could see what\n>>> software the node operator has been seen running historically.\n>>> This information would make it easy to identify patterns. For\n>>> example if a huge new group of nodes appeared on the network with\n>>> no history for their identifier they could likely be dismissed as\n>>> sybil attacks. If a huge number of nodes that had been reporting\n>>> as Bitcoin Core for an extended period of time started switching\n>>> to a rival implementation, this would add credibility but not\n>>> certainty (keys could be traded), that the shift was more organic.\n>>> \n>>> This would be trivial to implement, is (to me?) non-controversial,\n>>> and would give a way for a node to link itself to a\n>>> pseudo-anonymous identity, but with the freedom to opt-out at any\n>>> time.\n>>> Keen to hear any thoughts?\n>>> Thanks,\n>>> John Hardy\n>>> \n>>> john at seebitcoin.com\n>>> \n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev [1]\n> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> \n> Links:\n> ------\n> [1] https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Jonas Schnelli",
                "date": "2017-03-08T19:47:54",
                "message_text_only": "> \n>> \n>> > Nodes are by design not supposed to be identifiable in any way\n> \n> This is of course my objection to BIP150 (\"a way for peers to ... guarantee node ownership\u201c).\n\nPlease Eric. Stop spreading FUD.\nBIP150 has a fingerprint-free **OPTIONAL** authentication. It\u2019s designed to not reveal any node identifier/identity without first get a crypto.-proof from other peer that he already knows your identity.\n**Peers can\u2019t be identified without having the identity-keys pre shared by the node operators.**\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170308/a20244e4/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170308/a20244e4/attachment.sig>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2017-03-08T21:09:05",
                "message_text_only": "On 03/08/2017 11:47 AM, Jonas Schnelli wrote:\n>>> Nodes are by design not supposed to be identifiable in any way\n>>\n>> This is of course my objection to BIP150 (\"a way for peers to ...\n>> guarantee node ownership\u201c).\n> \n> Please Eric. Stop spreading FUD.\n\nI'm always willing to debate this issue. I'm generally a little\nsuspicious of one who demands another person to stop arguing. I got at\nleast one such demand (along with a threat) on this subject privately\nlast summer from a notable Core dev. There is a lengthy thread on this\nsubject in which I raised these issues. Everyone is free to review that\ndiscussion.\n\n> BIP150 has a fingerprint-free **OPTIONAL** authentication. It\u2019s designed\n> to not reveal any node identifier/identity without first get a\n> crypto.-proof from other peer that he already knows your identity.\n> **Peers can\u2019t be identified without having the identity-keys pre shared\n> by the node operators.**\n\nThe \"presharing\" of keys is how provable identity works, and is\nprecisely what this new proposal is also promoting. And in response to\nthat, the above statement was made by a Core dev (and not disputed):\n\n>>> Nodes are by design not supposed to be identifiable in any way...\n\nI'm calling out the obvious relationship between BIP150 and this new\nproposal. Restating how identity works, or that its use is optional does\nnot refute my position. It's not FUD.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170308/fbf8ef86/attachment.sig>"
            },
            {
                "author": "Jonas Schnelli",
                "date": "2017-03-08T21:20:39",
                "message_text_only": "> Am 08.03.2017 um 22:09 schrieb Eric Voskuil <eric at voskuil.org>:\n> \n> On 03/08/2017 11:47 AM, Jonas Schnelli wrote:\n>>>> Nodes are by design not supposed to be identifiable in any way\n>>> \n>>> This is of course my objection to BIP150 (\"a way for peers to ...\n>>> guarantee node ownership\u201c).\n>> \n>> Please Eric. Stop spreading FUD.\n> \n> I'm always willing to debate this issue. I'm generally a little\n> suspicious of one who demands another person to stop arguing. I got at\n> least one such demand (along with a threat) on this subject privately\n> last summer from a notable Core dev. There is a lengthy thread on this\n> subject in which I raised these issues. Everyone is free to review that\n> discussion.\n\nWhat you did say in the sentence above (and I think is FUD) is, that BIP150 will lead to every node being identifiable. This is just completely wrong.\nThere is nothing to say against a technical debate (and we had this), but I will ask you to stop if I see you attacking BIP150/151 at every occasion with FUDish arguments like this.\n\n</jonas>\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170308/c29e775d/attachment.sig>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2017-03-08T23:12:01",
                "message_text_only": "On Wed, Mar 8, 2017 at 1:20 PM, Jonas Schnelli via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Am 08.03.2017 um 22:09 schrieb Eric Voskuil <eric at voskuil.org>:\n>>\n>> On 03/08/2017 11:47 AM, Jonas Schnelli wrote:\n>>>>> Nodes are by design not supposed to be identifiable in any way\n>>>>\n>>>> This is of course my objection to BIP150 (\"a way for peers to ...\n>>>> guarantee node ownership\u201c).\n\nI believe this discussion is getting sidetracked.\n\nThere is a difference between identification/fingerprinting (who are\nyou?) and proving identity (prove that you are who I think you are?).\n\nBIP150 only facilitates the second, not the first. I don't think you\ndisagree about that, but I want to make it clear for anyone else\nfollowing the discussion.\n\nThe question is whether it encourages people to establish known and\npre-shared identities for nodes. Perhaps, but not in any way that\nIP/onion addresses don't already. Think about it:\n* If you know an IP/onion address, you can verify whether some node\nhas it. If you know an IP/onion address + BIP150 PSK, you can verify\nwhether some node has it.\n* If you know 2 IP/onion addresses, you cannot figure out whether they\ncorrespond to the same node (and if you can, that is a bug, not by\ndesign). If you know 2 (IP/onion addresses, BIP150 PSK) pairs, you\ncannot figure out whether they correspond to the same node (and if you\ncan, that is a bug, not by design).\n* If you receive a connection from a node, you cannot know what their\nonion address is. If you receive a connection from a node, you cannot\nfigure out what their PSK is.\n\nIn that way, I see BIP150 as an extension of IP addresses, except more\nsecure against network-level attackers. If you believe the concept of\npeople establishing links along existing trust lines is a problem, you\nshould be arguing against features in Bitcoin software that allows\nconfiguring preferred IP addresses to connect to as well (-addnode and\n-connect in Bitcoin Core, for example).\n\nCheers,\n\n-- \nPieter"
            },
            {
                "author": "Eric Voskuil",
                "date": "2017-03-09T01:08:04",
                "message_text_only": "On 03/08/2017 01:20 PM, Jonas Schnelli wrote:\n>\n>> Am 08.03.2017 um 22:09 schrieb Eric Voskuil <eric at voskuil.org>:\n>>\n>> On 03/08/2017 11:47 AM, Jonas Schnelli wrote:\n>>>>> Nodes are by design not supposed to be identifiable in any way\n>>>>\n>>>> This is of course my objection to BIP150 (\"a way for peers to ...\n>>>> guarantee node ownership\u201c).\n>>>\n>>> Please Eric. Stop spreading FUD.\n>>\n>> I'm always willing to debate this issue. I'm generally a little\n>> suspicious of one who demands another person to stop arguing. I got at\n>> least one such demand (along with a threat) on this subject privately\n>> last summer from a notable Core dev. There is a lengthy thread on this\n>> subject in which I raised these issues. Everyone is free to review that\n>> discussion.\n\n> What you did say in the sentence above (and I think is FUD) is, that\nBIP150 will lead to every node being identifiable.\n\nMy argument against BIP150 (and 151) is based on the very real concern\nthat it provides a built-in mechanism to partition the network (while\nalso providing no meaningful privacy benefit).\n\n> This is just completely wrong.\n\nThe only actual argument that I have seen from *anyone* to date is that\nthis is *unlikely* to happen. That was specifically Pieter's position\nlast summer. That argument is not technical but instead based on blind\ntrust in people.\n\nThe common refrain, which Pieter has penned again in a follow-up to this\npost, is that we already have identity in terms of IP addresses, so\nwhat's the harm. I find this argument ironic given that one of the\narguments in favor of this proposal is that IP address identification is\ninsufficient to establish identity. I assume that you both understand\nthere is a very meaningful distinction between strong identity and weak\nidentity.\n\nThe other argument that is often given is that, because we are talking\nabout privately shared as opposed to published identifiers, there is no\nreason for concern. This entirely misses the point. The ability to\nestablish strong identity makes it trivial for someone to (strongly)\nrequire the identity of anyone with who he/she allows a connection. This\nis the *stated purpose* of BIP150. This turns the Bitcoin security model\non its head. Instead of validating content this validates people.\n\nGiven the current level of economic and hash power centralization it is\nnot at all hard to imagine that through fear/consequences of regulatory\ncontrols or even poor scalability, that these points of centralization\nwill eventually start by establishing private connections, and\neventually require anyone connecting to them to \"preshare\" an identifier\n(which of course identifies the person). At that point Bitcoin P2P will\nhave become a private network. I know you have the right motivation, but\nI do not understand why you would ignore this risk in exchange for a\nfalse sense of privacy.\n\nThere is a very clear path to this happening. So please explain to me\nhow this concern is \"wrong\". This is *not* a technical question, I know\nperfectly well how the scheme works.\n\n> There is nothing to say against a technical debate (and we had this),\nbut I will ask you to stop if I see you attacking BIP150/151 at every\noccasion with FUDish arguments like this.\n\nTake a step back and consider that there may in fact be serious\nconsequences to what you are proposing. Calling may arguments\n\"attacking\" and \"FUD\" is unproductive.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170308/a8cd537c/attachment.sig>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2017-03-09T01:55:32",
                "message_text_only": "On Wed, Mar 8, 2017 at 5:16 PM, Eric Voskuil <eric at voskuil.org> wrote:\n> On 03/08/2017 03:12 PM, Pieter Wuille wrote:\n>> In that way, I see BIP150 as an extension of IP addresses, except more\n>> secure against network-level attackers. If you believe the concept of\n>> people establishing links along existing trust lines is a problem, you\n>> should be arguing against features in Bitcoin software that allows\n>> configuring preferred IP addresses to connect to as well (-addnode and\n>> -connect in Bitcoin Core, for example).\n>\n> Weak identity is insufficient to produce the problem scenario that is at\n> the heart of my concern (excluding people). It is this \"[same] except\n> more secure\" distinction that is the problem. You brush past that as if\n> it did not exist.\n\nSo you're saying that a -onlyacceptconnectionsfrom=IP option wouldn't\nbe a concern to you because it can't exclude people? Of course it can\nexclude people - just not your ISP or a state-level attacker.\n\nPlease, Eric. I think I understand your concern, but this argument\nisn't constructive either.\n\nThe proposal here is to introduce visible node identities on the\nnetwork. I think that's misguided as node count is irrelevant and\ntrivial to fake anyway. But you bringing up BIP150 here isn't useful\neither. I know that you equate the concept of having verifiable\nidentity keys in the P2P with a step towards making every node\nidentifiable, but they are not the same. It's just a cryptographic\ntool to keep a certain class of attackers from bypassing restrictions\nthat people can already make.\n\n-- \nPieter"
            },
            {
                "author": "Aymeric Vitte",
                "date": "2017-03-09T11:01:49",
                "message_text_only": "As stated in this thread and as I see it the use of BIP150 is optional, \nso if some parties want to trust each others and use it, then they can, \nif they don't like it and don't want to use it, then they don't use it\n\nUnless I misread, some statements in this thread involving the Tor \nnetwork are wrong, the Tor network is a centralized network, each node \n(except the bridges) have a long term identity key and have to prove  \nperiodically to the authority servers that they are the owners of this \nkey, if not the other nodes will never extend circuits to them, then \nthey will be of course quite difficult to reach\n\nUnfortunately the original proposal starting this thread seems to be \nreinventing this system that probably can only lead to something \ncentralized which cannot apply for the bitcoin network (the Tor network \nis centralized because the team want to control what is happening: \nsybils, bugs, attacks, blacklist etc)\n\nUnless some peers/nodes have decided to trust each others (BIP150) I \ndon't think it's a good idea at all that bitcoin nodes have anything \nsimilar to long term nodeIDs (see \nhttps://gist.github.com/Ayms/aab6f8e08fef0792ab3448f542a826bf , already \nposted, not final, not finished, and the title does not really reflect \nwhat would be the proposal today, but it carefully avoids any \npossibility for a full node to have a long term ID)\n\n\nLe 09/03/2017 \u00e0 02:55, Pieter Wuille via bitcoin-dev a \u00e9crit :\n> On Wed, Mar 8, 2017 at 5:16 PM, Eric Voskuil <eric at voskuil.org> wrote:\n>> On 03/08/2017 03:12 PM, Pieter Wuille wrote:\n>>> In that way, I see BIP150 as an extension of IP addresses, except more\n>>> secure against network-level attackers. If you believe the concept of\n>>> people establishing links along existing trust lines is a problem, you\n>>> should be arguing against features in Bitcoin software that allows\n>>> configuring preferred IP addresses to connect to as well (-addnode and\n>>> -connect in Bitcoin Core, for example).\n>> Weak identity is insufficient to produce the problem scenario that is at\n>> the heart of my concern (excluding people). It is this \"[same] except\n>> more secure\" distinction that is the problem. You brush past that as if\n>> it did not exist.\n> So you're saying that a -onlyacceptconnectionsfrom=IP option wouldn't\n> be a concern to you because it can't exclude people? Of course it can\n> exclude people - just not your ISP or a state-level attacker.\n>\n> Please, Eric. I think I understand your concern, but this argument\n> isn't constructive either.\n>\n> The proposal here is to introduce visible node identities on the\n> network. I think that's misguided as node count is irrelevant and\n> trivial to fake anyway. But you bringing up BIP150 here isn't useful\n> either. I know that you equate the concept of having verifiable\n> identity keys in the P2P with a step towards making every node\n> identifiable, but they are not the same. It's just a cryptographic\n> tool to keep a certain class of attackers from bypassing restrictions\n> that people can already make.\n>\n\n-- \nPeersm : http://www.peersm.com\nnode-Tor : https://www.github.com/Ayms/node-Tor\nGitHub : https://www.github.com/Ayms"
            },
            {
                "author": "Eric Voskuil",
                "date": "2017-03-22T00:04:47",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nReposting this response since this made it neither to distribution nor\nto the moderation archive.\n\n\n- -------- Forwarded Message --------\nSubject: Re: [bitcoin-dev] Unique node identifiers\nDate: Wed, 8 Mar 2017 18:59:42 -0800\nFrom: Eric Voskuil <eric at voskuil.org>\nTo: Pieter Wuille <pieter.wuille at gmail.com>\nCC: Jonas Schnelli <dev at jonasschnelli.ch>, Bitcoin Protocol Discussion\n<bitcoin-dev at lists.linuxfoundation.org>, Libbitcoin Development\n<libbitcoin at lists.dyne.org>\n\nOn 03/08/2017 05:55 PM, Pieter Wuille wrote:\n> On Wed, Mar 8, 2017 at 5:16 PM, Eric Voskuil <eric at voskuil.org>\n> wrote:\n>> On 03/08/2017 03:12 PM, Pieter Wuille wrote:\n>>> In that way, I see BIP150 as an extension of IP addresses,\n>>> except more secure against network-level attackers. If you\n>>> believe the concept of people establishing links along existing\n>>> trust lines is a problem, you should be arguing against\n>>> features in Bitcoin software that allows configuring preferred\n>>> IP addresses to connect to as well (-addnode and -connect in\n>>> Bitcoin Core, for example).\n>> \n>> Weak identity is insufficient to produce the problem scenario\n>> that is at the heart of my concern (excluding people). It is this\n>> \"[same] except more secure\" distinction that is the problem. You\n>> brush past that as if it did not exist.\n> \n> So you're saying that a -onlyacceptconnectionsfrom=IP option\n> wouldn't be a concern to you because it can't exclude people? Of\n> course it can exclude people - just not your ISP or a state-level\n> attacker.\n\nYou seem to look at this from only one perspective. Put yourself on the\nother end of the wire (web wallets, APIs, exchanges, miners). Is an IP\naddress strong enough for them to prove to the state that they are\ngetting connections only from authorized \"customers\" that they know? Is\nit sufficient for them that they may think they know their customer but\nin reality it may be some ISP spoofing their customer (or some state)?\nObviously it is not sufficient, which is why IP addresses do not produce\nthis problem. They will need another mechanism, and BIP150 just happens\nto be it.\n\n> Please, Eric. I think I understand your concern,\n\nI assume you do. The question is ultimately whether the P2P protocol is\nan anonymous network of public information or it is a private network\n(of private information). Too many arguments have been based on the idea\nthat the information is private (bloom filters, tainting). There are\nanonymizing networks, Bitcoin P2P is not one of them.\n\nConsensus rules exist to validate information obtained from the\nanonymous public. That includes your ISP and the state. The rules\nvalidate everything that matters except whether there is a stronger\nchain - and seeing the strongest chain cannot be guaranteed by\nencryption, unless of course we are all strongly tied to the majority\nhash power and trust them.\n\nMaking the network private so that we can detect denial/disruption of\nservice is pointless if the the only threat is your own ISP or the state\n.\n\n> but this argument isn't constructive either.\n\nI don't need to continue it, I've made my case. It's up to others to\ndecide whether it has been constructive and what to do with it. I hope\nit is understood that I do not question the motivation of anyone involve\nd.\n\n> The proposal here is to introduce visible node identities on the \n> network. I think that's misguided as node count is irrelevant and \n> trivial to fake anyway.\n\nAgreed.\n\n> I know that you equate the concept of having verifiable identity\n> keys in the P2P with a step towards making every node \n> identifiable,\n\nThere is no question that is a step toward making every person who\nconnects to the more centralized network identifiable. The next step\ndoesn't even require a software change. A \"bitcoin provider\" will only\nneed to provide you a secret to use when connecting. And they have every\nreason to want to control this access.\n\ne\n\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\n\niQEcBAEBCAAGBQJY0b+SAAoJEDzYwH8LXOFOzskH/Ak4xTVWuY02dpA7Xcna0/lG\npLCYz5aFOoCRDokHf2uxtZptNaXMcz5eNBwhxRyXL9cMQ1ewME9nWDiM0x7Is0zC\n0haiFW1bi81Tak6ELhA7+BwCQNYH4MBWirFo/T91veiaOx3Ttn5Nf8p+kYfbcvCC\neANxCsPM8s9ul7CzpfDtO+K7S9rV/mEZYDsogKT7P3JPbgH4kRWcyt1AcFfw74LU\nZ68XkZL6aCl+nymupZR72z/oxykljjPegkZxIkoguNSybZR9dOLRRmkyiPplX+OU\nszOlGnwuePxOq/BQE8ouAlfSgAmBHqMj6lnYCgbBUIWrTzjYlpZVA4dWTj/FVCM=\n=um+z\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Unique node identifiers",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Voskuil",
                "John Hardy",
                "bfd at cock.lu",
                "Aymeric Vitte",
                "Marcel Jamin",
                "Btc Drak",
                "Pieter Wuille",
                "Jonas Schnelli"
            ],
            "messages_count": 15,
            "total_messages_chars_count": 47169
        }
    },
    {
        "title": "[bitcoin-dev] Unique node identifiers (and BIP150)",
        "thread_messages": [
            {
                "author": "Tom Zander",
                "date": "2017-03-08T21:25:46",
                "message_text_only": "On Wednesday, 8 March 2017 20:47:54 CET Jonas Schnelli via bitcoin-dev \nwrote:\n> Please Eric. Stop spreading FUD.\n> BIP150 has a fingerprint-free **OPTIONAL** authentication. It\u2019s designed\n> to not reveal any node identifier/identity without first get a\n> crypto.-proof from other peer that he already knows your identity.\n> **Peers can\u2019t be identified without having the identity-keys pre shared\n> by the node operators.**\n\nDo you know the trick of having an open wifi basestation in a public street \nand how that can lead to tracking? Especially if you have a network of them.\nThe trick is this; you set up an open wifi base station with a hidden ssid \nand phones try to connect to it by saying \u201cAre you ssid=xyz?\u201d\nThis leads the basestation to know that the phone has known credentials with \nanother wifi that has a specific ssid. (the trick is slightly more elaborate, \nbut the basics are relevant here).\n\nYour BIP is vulnarable to the same issue, as a node wants to connect using \nthe AUTHCHALLENGE which has as an argument the hash of the person I\u2019m trying \nto connect with.\n\nYour BIP says \"Fingerprinting the requesting peer is not possible\u201d.\nUnfortunately, this is wrong. Yes the peer is trivial to fingerprint. Your \nhash never changes and as you connect to a node anyone listening can see you \nsending the same hash on every connect to that peer, whereever you are or \nconnect from.\n\nJust like the wifi hack.\n\nI think you want to use industry standards instead, and a good start may be \nhttps://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Jonas Schnelli",
                "date": "2017-03-08T21:31:01",
                "message_text_only": "Hi Tom\n\n> Do you know the trick of having an open wifi basestation in a public street\n> and how that can lead to tracking? Especially if you have a network of them.\n> The trick is this; you set up an open wifi base station with a hidden ssid\n> and phones try to connect to it by saying \u201cAre you ssid=xyz?\u201d\n> This leads the basestation to know that the phone has known credentials with\n> another wifi that has a specific ssid. (the trick is slightly more elaborate,\n> but the basics are relevant here).\n> \n> Your BIP is vulnarable to the same issue, as a node wants to connect using\n> the AUTHCHALLENGE which has as an argument the hash of the person I\u2019m trying\n> to connect with.\n\nThis thread is not about BIP150/151.\nThe hash includes the encryption session which makes it impossible to distinct identities.\n\n> \n> Your BIP says \"Fingerprinting the requesting peer is not possible\u201d.\n> Unfortunately, this is wrong. Yes the peer is trivial to fingerprint. Your\n> hash never changes and as you connect to a node anyone listening can see you\n> sending the same hash on every connect to that peer, whereever you are or\n> connect from.\n\nNot true. The hash includes the encryption session which is based on a ephemeral ECDH/HKDF per connection-session.\n\nHave you read the BIP?\n\n</jonas>\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170308/42405465/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Unique node identifiers (and BIP150)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Tom Zander",
                "Jonas Schnelli"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3227
        }
    },
    {
        "title": "[bitcoin-dev] Moving towards user activated soft fork activation",
        "thread_messages": [
            {
                "author": "Chris Belcher",
                "date": "2017-03-05T14:33:06",
                "message_text_only": "I think UASF is a great idea for the reasons mentioned before that it\nmore closely matches the balance of powers in bitcoin, and that its much\nmore opt-in.\n\nMany people are comparing an UASF fork with a hard fork. I disagree with\nthis view and I think there is a difference between the two kinds of\nforks. The situation between hard and soft forks is reversed.\n\nIn a fork between segwit-invalid and segwit-valid after a UASF, if the\nsegwit-valid chain ever ends up with more work then the segwit-invalid\nchain will be annihilated in a big re-organization as\nnon-segwit-enforcing nodes move to the segwit-valid chain. The less-work\nchain will simply cease to exist.\n\nOnly a miner that recodes their software can initiate such a fork,\nbecause segwit transactions are non-standard and won't be relayed by\ndefault.\n\nA closer situation is the accidental fork created soon after the BIP66\nsoft fork. The fork lasted a few blocks and did not mine any\ntransactions except the coinbase. It was annihilated with a monetary\nloss to any miner that took part.\n\n\nHere is an argument for why chain fork is unlikely to last long or be\ncreated by a rational self-interested miner, assuming the bitcoin\neconomic majority even slightly enforces the UASF.\n\nBecause the segwit-invalid coins can be annihilated in this way and\nsegwit-valid coins cannot, segwit-invalid coins are more risky to hold\nas an asset, all else equal.\n\nA more risky asset has a lower price, all else equal. Because investors\ndemand higher risk premiums for holding it and also short sellers may\nsell down the price in the hopes of making a profit if it's value goes\nto zero.\n\nIn cryptocurrencies like bitcoin, hashpower follows price. This is very\nclear from historical trends and the underlying economic forces.\n\nA lower-hashrate chain will eventually be overtaken in work by a\nhigher-hashrate chain.\n\nTherefore, the segwit-invalid chain will be annihilated sooner or later\nif the price of its coin is higher.\n\nOf course as the old saying goes markets can stay irrational longer than\nwe can stay solvent, which is why I think UASF should only go ahead if\nwe're sure that a big part of the economic majority will enforce it.\nThis will make the value and liquidity of the segwit-invalid chain very\nlow and make the annihilating re-organization happen faster.\nUser-activated means it _must_ be done by the users of bitcoin."
            },
            {
                "author": "David Vorick",
                "date": "2017-03-05T18:10:15",
                "message_text_only": "I also think that the UASF is a good idea. Hashrate follows coin price. If\nthe UASF has the higher coin price, the other chain will be annihilated. If\nthe UASF has a lower coin price, the user activated chain can still exist\n(though their coins can be trivially stolen on the majority chain).\n\nThe success of the UASF depends entirely on the price. And actually, the\nprice is easy to manipulate. If you, as an economically active full node,\nrefuse to acknowledge the old chain and demand that incoming coins arrive\nover the UASF chain. In doing so, you drive down the utility of the old\nchain and drive up the utility of the new chain. This ultimately impacts\nthe price.\n\nI think it would be pretty easy to get high confidence of the success of a\nUASF. Basically you need all the major economic hubs to agree to upgrade\nand then exclusively accept UASF coins. I don't have a comprehensive list,\nbut if we could sign on 75% of the major exchanges and payment processors,\nand get 75% of the wallets to upgrade, then the UASF would be very likely\nto successfully obliterate the old rules, as miners would be unable to sell\ntheir coins or pay their bills by stubbornly sticking to the old chain.\nIt's less risky than a hard fork by far, because there is zero risk of coin\nsplit if the UASF has majority hashrate, which will follow majority\neconomic value.\n\nA serious proposal I think would get all the code ready and merged, but\nwithout setting a flag day. Then we would get signatures from the major\ninstitutions promising to use the software and saying that they are ready\nfor a flag day. After that, you release a patch with a flag day 12 months\nin the future. People can upgrade immediately, and have a full year to\ntransition.\n\nThat gives tons of time for people to upgrade, and tons of confidence that\nthe UASF will end up as the majority chain.\n\nIf we cannot get enough major exchanges, payment processors, and other\neconomic hubs to upgrade,  the flag day should remain upset, as the risk of\ncoin split will be non-zero.\n\nI would suggest that a carefully executed UASF is much riskier than a soft\nfork, but far, far less risky than a hard fork.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170305/fa9b6571/attachment-0001.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2017-03-05T18:48:33",
                "message_text_only": "There are two aspects of system security in Bitcoin, mining (hash power) and payment validation (economy). The security of each is a function of its level of decentralization. Another way to think of it is that a system with less decentralization has a smaller community (consensus). A large consensus is more secure in that it is more resistant to change (forks) than a system with a small consensus.\n\nThe fact that mining is highly centralized makes it relatively easy to enforce a fork via miner collaboration, and hard to do so without it.\n\nSo clearly the other option, as being discussed here, is to enforce a fork via the economy. Given the highly centralized nature of the economy, described below as \"economic hubs\", it is also relatively easy as well.\n\nIndependent of one's opinion on the merits of one fork or another, the state of centralization in Bitcoin is an area of great concern. If \"we\" can sit down with 75% of the economy and/or 90% of the hash power (which of course has been done) and negotiate a change to any rule, Bitcoin is a purely political money.\n\nIf \"we\" can do this, so can \"they\".\n\ne\n\n> On Mar 5, 2017, at 10:10 AM, David Vorick via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> I also think that the UASF is a good idea. Hashrate follows coin price. If the UASF has the higher coin price, the other chain will be annihilated. If the UASF has a lower coin price, the user activated chain can still exist (though their coins can be trivially stolen on the majority chain).\n> \n> The success of the UASF depends entirely on the price. And actually, the price is easy to manipulate. If you, as an economically active full node, refuse to acknowledge the old chain and demand that incoming coins arrive over the UASF chain. In doing so, you drive down the utility of the old chain and drive up the utility of the new chain. This ultimately impacts the price.\n> \n> I think it would be pretty easy to get high confidence of the success of a UASF. Basically you need all the major economic hubs to agree to upgrade and then exclusively accept UASF coins. I don't have a comprehensive list, but if we could sign on 75% of the major exchanges and payment processors, and get 75% of the wallets to upgrade, then the UASF would be very likely to successfully obliterate the old rules, as miners would be unable to sell their coins or pay their bills by stubbornly sticking to the old chain. It's less risky than a hard fork by far, because there is zero risk of coin split if the UASF has majority hashrate, which will follow majority economic value.\n> \n> A serious proposal I think would get all the code ready and merged, but without setting a flag day. Then we would get signatures from the major institutions promising to use the software and saying that they are ready for a flag day. After that, you release a patch with a flag day 12 months in the future. People can upgrade immediately, and have a full year to transition.\n> \n> That gives tons of time for people to upgrade, and tons of confidence that the UASF will end up as the majority chain.\n> \n> If we cannot get enough major exchanges, payment processors, and other economic hubs to upgrade,  the flag day should remain upset, as the risk of coin split will be non-zero.\n> \n> I would suggest that a carefully executed UASF is much riskier than a soft fork, but far, far less risky than a hard fork.\n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170305/2631a5b3/attachment.html>"
            },
            {
                "author": "Nick ODell",
                "date": "2017-03-05T21:31:26",
                "message_text_only": ">I also think that the UASF is a good idea. Hashrate follows coin price. If\nthe UASF has the higher coin price, the other chain will be annihilated. If\nthe UASF has a lower coin price, the user activated chain can still exist\n(though their coins can be trivially stolen on the majority chain).\n\nI don't think that's true. Say there are two forks of Blahcoin. Alice\nthinks there's a 55% chance that Fork A will succeed. Bob thinks there's a\n55% chance that Fork B will succeed. Alice trades all of her Fork B coins\nfor all of Bob's Fork A coins. Now, Bob and Alice both have a stake in one\nfork or the other succeeding. Alice starts spending more time around Fork A\nusers; Bob starts spending his time with Fork B users.\n\nA year passes, and Alice and Bob meet again. Bob tells Alice that Fork B\nhas been doing much better than Fork A, and is trading at ten times the\nprice. Alice replies that it doesn't matter, since Fork B will soon split\ninto B1 and B2. After all, if Fork B surrendered its principles once, it\ncan do so again. Bob replies that Fork B represents the true spirit of\nBlahcoin. Alice replies that all of the people whose opinion she respects\nbelieve that Fork B violates principles set down by the Founder (peace be\nupon him.)\n\nBob disagrees, and cites an annotated collection of the Founder's writings,\nwhich clearly show that if a situation like what provoked the Great Fork\nhappens, Fork B is in the right. All of the people Bob knows (except Alice)\nagree that this shows Fork A is invalid. Alice replies that Bob is\ncommitting the bandwagon fallacy; even if a thousand people believe that\nred is green, that does not make it true. Also, the collection takes\nseveral of the Founder's comments out of context. If one looks at comments\nmade prior to the release of Blahcoin, they lay out a framework that\nenvisions Fork A. Bob replies that Alice can't use statements made prior to\nthe release of Blahcoin to establish original intent; the system hadn't\nbeen designed yet.\n\nBob points out that Fork B has a higher total chainwork. Alice scoffs. She\nposits a Fork C, which is exactly like Fork A, except that chainwork is\ndefined to be the previous definition plus a quadrillion. Bob finds that\nridiculous. Fork C would transgress upon intrinsic principles of Blahcoin.\nNo more than Fork B does, Alice replies.\n\n----\n\nEach sentence above is true from some point of view. Each person sincerely\nbelieves in the rightness of their position. Is there some objective\nmeasure, that both Alice and Bob can agree on, that resolves this? I don't\nthink there is. Bob and Alice will sneer at each other for being idiots\nforever. The schism will never resolve.\n\nSatoshi Bless,\n--Nick\n\nOn Sun, Mar 5, 2017 at 11:10 AM, David Vorick via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I also think that the UASF is a good idea. Hashrate follows coin price. If\n> the UASF has the higher coin price, the other chain will be annihilated. If\n> the UASF has a lower coin price, the user activated chain can still exist\n> (though their coins can be trivially stolen on the majority chain).\n>\n> The success of the UASF depends entirely on the price. And actually, the\n> price is easy to manipulate. If you, as an economically active full node,\n> refuse to acknowledge the old chain and demand that incoming coins arrive\n> over the UASF chain. In doing so, you drive down the utility of the old\n> chain and drive up the utility of the new chain. This ultimately impacts\n> the price.\n>\n> I think it would be pretty easy to get high confidence of the success of a\n> UASF. Basically you need all the major economic hubs to agree to upgrade\n> and then exclusively accept UASF coins. I don't have a comprehensive list,\n> but if we could sign on 75% of the major exchanges and payment processors,\n> and get 75% of the wallets to upgrade, then the UASF would be very likely\n> to successfully obliterate the old rules, as miners would be unable to sell\n> their coins or pay their bills by stubbornly sticking to the old chain.\n> It's less risky than a hard fork by far, because there is zero risk of coin\n> split if the UASF has majority hashrate, which will follow majority\n> economic value.\n>\n> A serious proposal I think would get all the code ready and merged, but\n> without setting a flag day. Then we would get signatures from the major\n> institutions promising to use the software and saying that they are ready\n> for a flag day. After that, you release a patch with a flag day 12 months\n> in the future. People can upgrade immediately, and have a full year to\n> transition.\n>\n> That gives tons of time for people to upgrade, and tons of confidence that\n> the UASF will end up as the majority chain.\n>\n> If we cannot get enough major exchanges, payment processors, and other\n> economic hubs to upgrade,  the flag day should remain upset, as the risk of\n> coin split will be non-zero.\n>\n> I would suggest that a carefully executed UASF is much riskier than a soft\n> fork, but far, far less risky than a hard fork.\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170305/59946aef/attachment.html>"
            },
            {
                "author": "David Vorick",
                "date": "2017-03-06T09:18:38",
                "message_text_only": "On Mar 5, 2017 6:48 PM, \"Eric Voskuil\" <eric at voskuil.org> wrote:\n\n\nIndependent of one's opinion on the merits of one fork or another, the\nstate of centralization in Bitcoin is an area of great concern. If \"we\" can\nsit down with 75% of the economy and/or 90% of the hash power (which of\ncourse has been done) and negotiate a change to any rule, Bitcoin is a\npurely political money.\n\nIf \"we\" can do this, so can \"they\".\n\ne\n\n\nThere is no doubt that politics play a big role in all of this. Also no\ndoubt that broader decentralization would be superior. But miner activated\nsoft forks and user activated soft forks do not need discussions with\ncentralized parties to move forward. It is merely two different methods for\npushing a soft fork through the network.\n\nThe key is that it's a soft fork. Old nodes continue to work as always,\nwhether the soft fork deploys or not.\n\nUser activated soft forks, or perhaps more accurately called 'economically\nforced soft forks' are a tool to use if the miners are in clear opposition\nto the broader economy. They only work if the broader economy actually\nfully supports the soft fork, which is much more difficult to measure than\nminer support. And miners with deeper pockets may be able to resist for\nsome time, effectively performing a rewardless 51% attack and maintaining a\nsplit network for some time. The miners would lose lots of money, but old\nnodes would feel all the burn of a hard fork, followed by a sudden deep\nreorg when the network finally 'heals'.\n\nI guess in some sense you'd be playing chicken with the miners. If the\nsplit is not instantly successful there would be a lot of damage to old\nnodes, even if the majority of new nodes had upgraded. (but there would\nalso be a lot of damage to the miners).\n\nOn Mar 5, 2017 9:31 PM, \"Nick ODell\" <nickodell at gmail.com> wrote:\n\n>I also think that the UASF is a good idea. Hashrate follows coin price. If\nthe UASF has the higher coin price, the other chain will be annihilated. If\nthe UASF has a lower coin price, the user activated chain can still exist\n(though their coins can be trivially stolen on the majority chain).\n\nI don't think that's true. Say there are two forks of Blahcoin. Alice\nthinks there's a 55% chance that Fork A will succeed. Bob thinks there's a\n55% chance that Fork B will succeed. Alice trades all of her Fork B coins\nfor all of Bob's Fork A coins. Now, Bob and Alice both have a stake in one\nfork or the other succeeding. Alice starts spending more time around Fork A\nusers; Bob starts spending his time with Fork B users.\n\n\nThis is not relevant to a UASF. The existing nodes on the network have a\nsingle formal definition for longest chain. If the UASF is successful, the\nold nodes will follow the new soft fork and there will be only one chain.\nSpirit of Bitcoin or not, the UASF is successful and there is no coin split\nor network fork.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170306/3ec9ee10/attachment.html>"
            },
            {
                "author": "Edmund Edgar",
                "date": "2017-03-06T10:29:35",
                "message_text_only": "On 6 March 2017 at 18:18, David Vorick via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> User activated soft forks, or perhaps more accurately called 'economically\n> forced soft forks' are a tool to use if the miners are in clear opposition\n> to the broader economy.\n\nI don't think they work for that, at least not for new features,\nbecause miners will presumably just head the whole thing off by\norphaning the whole class of non-standard transactions that are the\nsubject of the fork. In the SegWit case, they'd just orphan anything\nthat looks like a SegWit transaction, valid or not. That way they\ndon't need to worry about ending up on the wrong side of the upgrade,\nbecause no transaction affected by the proposed rule change will ever\nget into the longest chain. Rational node operators (particularly\nexchanges) will likely also adopt their stricter rule change, since\nthey know any chain that breaks it will end up being orphaned, so you\ndon't want to act on a payment that you see confirmed in it. So then\nyou're back where you started, except that your soft-fork is now a\nde-facto hard-fork, because you have to undo the new, stricter rule\nthat the miners introduced to head off your shenannigans.\n\nWhere they're interesting is where you can do something meaningful by\nforcing some transactions through on a once-off basis. For example, if\nthe Chinese government identified an address belonging to Uighur\nseparatists and leaned on Chinese miners to prevent anything from that\naddress confirming, it might be interesting for users to say, \"If\nthese utxos are not spent by block X, your block is invalid\".\n\nThey might also be interesting for feature upgrades in a world where\nmining is radically decentralized and upgrades are fighting against\ninertia rather than opposition, but sadly that's not the world we\ncurrently live in.\n\n-- \n-- \nEdmund Edgar\nFounder, Social Minds Inc (KK)\nTwitter: @edmundedgar\nLinked In: edmundedgar\nSkype: edmundedgar\nhttp://www.socialminds.jp\n\nReality Keys\n@realitykeys\nsupport at realitykeys.com\nhttps://www.realitykeys.com"
            },
            {
                "author": "Gareth Williams",
                "date": "2017-03-06T23:23:47",
                "message_text_only": "What you're describing is a hashpower activated soft fork to censor transactions, in response to a user activated soft fork that the majority of hashpower disagrees with.\n\nIt is always possible for a majority of hashpower to censor transactions they disagree with. Users may view that as an attack, and can always respond with a POW hard fork. \n\nBitcoin only works if the majority of hashpower is not hostile to the users.\n\n\nOn 6 March 2017 9:29:35 PM AEDT, Edmund Edgar via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>On 6 March 2017 at 18:18, David Vorick via bitcoin-dev\n><bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> User activated soft forks, or perhaps more accurately called\n>'economically\n>> forced soft forks' are a tool to use if the miners are in clear\n>opposition\n>> to the broader economy.\n>\n>I don't think they work for that, at least not for new features,\n>because miners will presumably just head the whole thing off by\n>orphaning the whole class of non-standard transactions that are the\n>subject of the fork. In the SegWit case, they'd just orphan anything\n>that looks like a SegWit transaction, valid or not. That way they\n>don't need to worry about ending up on the wrong side of the upgrade,\n>because no transaction affected by the proposed rule change will ever\n>get into the longest chain. Rational node operators (particularly\n>exchanges) will likely also adopt their stricter rule change, since\n>they know any chain that breaks it will end up being orphaned, so you\n>don't want to act on a payment that you see confirmed in it. So then\n>you're back where you started, except that your soft-fork is now a\n>de-facto hard-fork, because you have to undo the new, stricter rule\n>that the miners introduced to head off your shenannigans.\n>\n>Where they're interesting is where you can do something meaningful by\n>forcing some transactions through on a once-off basis. For example, if\n>the Chinese government identified an address belonging to Uighur\n>separatists and leaned on Chinese miners to prevent anything from that\n>address confirming, it might be interesting for users to say, \"If\n>these utxos are not spent by block X, your block is invalid\".\n>\n>They might also be interesting for feature upgrades in a world where\n>mining is radically decentralized and upgrades are fighting against\n>inertia rather than opposition, but sadly that's not the world we\n>currently live in."
            },
            {
                "author": "Edmund Edgar",
                "date": "2017-03-07T01:07:05",
                "message_text_only": "On 7 March 2017 at 08:23, Gareth Williams <gjw at posteo.net> wrote:\n> What you're describing is a hashpower activated soft fork to censor transactions, in response to a user activated soft fork that the majority of hashpower disagrees with.\n\nWell, they'd be censoring transactions to prevent the thing from\nactivating in the first place. (As opposed to censoring a subset of\nthose transactions to enforce the new rule, which is the behaviour\nthat the people promoting the change want.) There would be no point at\nwhich people reasonably expected that something useful would happen if\nthey sent funds to an address protected by the new scripting rule.\n\n> Bitcoin only works if the majority of hashpower is not hostile to the users.\n\nThis is true. But what we're talking about here is hostility to *a\nparticular proposal to change the network rules* which is (in this\nhypothetical case) supported by the economic majority of users. This\ndoesn't, in itself, break Bitcoin, although the economic majority are\nof course always free to hard-fork to something new if they're\nunhappy.\n\nEdmund\n\n-- \n-- \nEdmund Edgar\nFounder, Social Minds Inc (KK)\nTwitter: @edmundedgar\nLinked In: edmundedgar\nSkype: edmundedgar\nhttp://www.socialminds.jp\n\nReality Keys\n@realitykeys\ned at realitykeys.com\nhttps://www.realitykeys.com"
            },
            {
                "author": "Eric Voskuil",
                "date": "2017-03-07T17:37:15",
                "message_text_only": "On 03/06/2017 05:07 PM, Edmund Edgar via bitcoin-dev wrote:\n> On 7 March 2017 at 08:23, Gareth Williams <gjw at posteo.net> wrote:\n>> What you're describing is a hashpower activated soft fork to censor\ntransactions, in response to a user activated soft fork that the\nmajority of hashpower disagrees with.\n\nThis definition of censorship would apply to all validation.\n\nA miner is free to select whatever transactions he wants, for whatever\nreasons he wants. Bitcoin's defense against censorship (and disruption)\nis in the broad distribution of over 50% (anecdotally) of the hash power\namong a large number of people.\n\n> Well, they'd be censoring transactions to prevent the thing from\n> activating in the first place. (As opposed to censoring a subset of\n> those transactions to enforce the new rule, which is the behaviour\n> that the people promoting the change want.)\n\nExactly, a soft fork expects that people start rejecting a previously\nvalid style of transaction, or that they ignore it. It's perfectly\nreasonable to conclude that some miners may continue to accept the\nsoft-fork-invalidated transactions and instead reject the new style of\ntransactions as invalid. Reliance on their acceptance of the soft fork\nis based on the weak assumption that they won't change their software or\nthat they live in fear of a retaliatory POW change.\n\n>> Bitcoin only works if the majority of hashpower is not hostile to the\nusers.\n\nHonesty in this context refers to double spending. Selecting a different\nrule set effectively moves one to another coin, which is not dishonest\n(hostile to anyone).  Miners have zero technical or ethical obligation\nto follow any particular set of rules. Bitcoin has one golden rule, run\nwhatever code you want. Security is based on decentralization, not\nwell-behaved people (or well-behaved software).\n\n> This is true. But what we're talking about here is hostility to *a\n> particular proposal to change the network rules* which is (in this\n> hypothetical case) supported by the economic majority of users. This\n> doesn't, in itself, break Bitcoin, although the economic majority are\n> of course always free to hard-fork to something new if they're\n> unhappy.\n\nAgain spot on. Users of the money purchase security from miners. Miners\nare under no obligation to provide that service nor are users under any\nobligation to purchase it.\n\nOne thing to consider is how different the landscape would look if every\nperson on the planet was a miner, and the economy was similarly\ndistributed. Would it be easier to get 51% hash power on board with a\nsoft fork, or some much higher percentage on board with a hard fork? It\nseems likely that any proposed material change would fail. Regardless of\nhow one feels about that, it is the nature of a sound money that it\ndoesn't change.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170307/54bfd64b/attachment-0001.sig>"
            },
            {
                "author": "Tom Zander",
                "date": "2017-03-07T09:17:18",
                "message_text_only": "On Tuesday, 7 March 2017 00:23:47 CET Gareth Williams via bitcoin-dev wrote:\n> What you're describing is a hashpower activated soft fork to censor\n> transactions, in response to a user activated soft fork that the majority\n> of hashpower disagrees with.\n\nIt is incorrect to say that censoring of transactions is what Edmund \nsuggested. It's purely about the form they take, you can re-send the \ntransaction in a different form with the same content and they go through. \nHence, not transaction censoring.\n\nI do believe the point that Edmund brought up is a very good one, the idea \nthat a set of users can force the miners to do something is rather silly and \nthe setup that a minority miner fraction can force the majority to do \nsomething is equally silly. This is because the majority mining hashpower \ncan fight back against this attack upon them.\n\nDon\u2019t be mistaken; a hash-minority attacking the hash-majority is in actual \nfact an attack upon Bitcoin as a whole.\nIf this were possible then next year we\u2019d see governments try to push \nthrough changes in the same UASF way. I\u2019m very happy that UASFs can\u2019t work \nbecause that would be the end of Bitcoin's freedom and decentralized nature.\n\n> It is always possible for a majority of hashpower to censor transactions\n> they disagree with. Users may view that as an attack, and can always\n> respond with a POW hard fork.\n\nI definitely welcome that approach.\n\nThe result would be that you have two chains, but also you ensure that the \nchain that the miners didn\u2019t like will no longer be something they can mine. \nNot even the minority set of miners that like the softfork can mine on it. \nThis is a win-win and then the market will decide which one will \"win\".\n \n> Bitcoin only works if the majority of hashpower is not hostile to the\n> users.\n\nThis goes both ways, miners both generate value (in the form of security) \nand they take value (in the form of inflation).\nIf the majority of the users are hostile and reject blocks that the miners \ncreate, or change the POW, then what the miners bring to the table is also \nremoved.\nBitcoin would lose the security and in the short term even the ability to \nmine blocks every 10 minutes.\n\nSo, lets correct your statement a little;\n\u00abBitcoin only works when the majority of the hashpower and the (economic)\n  majority of the users are balanced in power and have their goals aligned.\u00bb\n\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Eric Voskuil",
                "date": "2017-03-07T18:13:36",
                "message_text_only": "> Bitcoin would lose the security and in the short term even the ability to \nmine blocks every 10 minutes.\n\nPresumably a POW hard fork would be accompanied by a difficulty reset, so that the deployment didn't have *both* of these problems from the outset.  There's really little difference between 10 minutes at little/no security and zero conf. See testnet. But people might feel better about still seeing blocks.\n\nBut in any case it's not clear to me why you assume a loss of security in the \"short term\" is something that can be overcome. The short term can presumably prevent the long term from ever becoming.\n\ne\n\n> On Mar 7, 2017, at 1:17 AM, Tom Zander via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n>> On Tuesday, 7 March 2017 00:23:47 CET Gareth Williams via bitcoin-dev wrote:\n>> What you're describing is a hashpower activated soft fork to censor\n>> transactions, in response to a user activated soft fork that the majority\n>> of hashpower disagrees with.\n> \n> It is incorrect to say that censoring of transactions is what Edmund \n> suggested. It's purely about the form they take, you can re-send the \n> transaction in a different form with the same content and they go through. \n> Hence, not transaction censoring.\n> \n> I do believe the point that Edmund brought up is a very good one, the idea \n> that a set of users can force the miners to do something is rather silly and \n> the setup that a minority miner fraction can force the majority to do \n> something is equally silly. This is because the majority mining hashpower \n> can fight back against this attack upon them.\n> \n> Don\u2019t be mistaken; a hash-minority attacking the hash-majority is in actual \n> fact an attack upon Bitcoin as a whole.\n> If this were possible then next year we\u2019d see governments try to push \n> through changes in the same UASF way. I\u2019m very happy that UASFs can\u2019t work \n> because that would be the end of Bitcoin's freedom and decentralized nature.\n> \n>> It is always possible for a majority of hashpower to censor transactions\n>> they disagree with. Users may view that as an attack, and can always\n>> respond with a POW hard fork.\n> \n> I definitely welcome that approach.\n> \n> The result would be that you have two chains, but also you ensure that the \n> chain that the miners didn\u2019t like will no longer be something they can mine. \n> Not even the minority set of miners that like the softfork can mine on it. \n> This is a win-win and then the market will decide which one will \"win\".\n> \n>> Bitcoin only works if the majority of hashpower is not hostile to the\n>> users.\n> \n> This goes both ways, miners both generate value (in the form of security) \n> and they take value (in the form of inflation).\n> If the majority of the users are hostile and reject blocks that the miners \n> create, or change the POW, then what the miners bring to the table is also \n> removed.\n> Bitcoin would lose the security and in the short term even the ability to \n> mine blocks every 10 minutes.\n> \n> So, lets correct your statement a little;\n> \u00abBitcoin only works when the majority of the hashpower and the (economic)\n>  majority of the users are balanced in power and have their goals aligned.\u00bb\n> \n> -- \n> Tom Zander\n> Blog: https://zander.github.io\n> Vlog: https://vimeo.com/channels/tomscryptochannel\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Alphonse Pace",
                "date": "2017-03-07T19:13:29",
                "message_text_only": "I fail to see how any non-mining user can attack a miner.  The worst they\ncan do is refuse to buy their coinbase transaction.  Do you believe that\nusers are obligated to buy coins from miners?  If not, then all miners are\nvoluntarily choosing a set of rules to enforce and a set of policy to mine.\n\n>Don\u2019t be mistaken; a hash-minority attacking the hash-majority is in actual\nfact an attack upon Bitcoin as a whole.\n\nCan you outline how a minority of hash rate can attack a majority? Users\nare free to follow tighter rules than before, or they may reject it.  The\nmajority of hash rate can continue the old rules or not.  Where is the\nattack?  I see a disagreement being resolved peacefully through unilateral\nseparation.\n\n>If this were possible then next year we\u2019d see governments try to push\nthrough changes in the same UASF way. I\u2019m very happy that UASFs can\u2019t work\nbecause that would be the end of Bitcoin's freedom and decentralized nature.\n\nGovernments would be much more equipped to simply go directly to the miners\nto enforce this for them - why even bother with millions of distributed\nminers when you can knock on a few doors and get your policy?\n\n>If the majority of the users are hostile and reject blocks that the miners\ncreate, or change the POW, then what the miners bring to the table is also\nremoved.\n\nI don't understand how users can be hostile to Bitcoin.  Users are\nBitcoin.  Everyone else serves the users.  All participants are voluntary\nand can choose to participate or not.  Where is the attack or hostility?\n\n-Alphonse\n\nOn Tue, Mar 7, 2017 at 3:17 AM, Tom Zander via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Tuesday, 7 March 2017 00:23:47 CET Gareth Williams via bitcoin-dev\n> wrote:\n> > What you're describing is a hashpower activated soft fork to censor\n> > transactions, in response to a user activated soft fork that the majority\n> > of hashpower disagrees with.\n>\n> It is incorrect to say that censoring of transactions is what Edmund\n> suggested. It's purely about the form they take, you can re-send the\n> transaction in a different form with the same content and they go through.\n> Hence, not transaction censoring.\n>\n> I do believe the point that Edmund brought up is a very good one, the idea\n> that a set of users can force the miners to do something is rather silly\n> and\n> the setup that a minority miner fraction can force the majority to do\n> something is equally silly. This is because the majority mining hashpower\n> can fight back against this attack upon them.\n>\n> Don\u2019t be mistaken; a hash-minority attacking the hash-majority is in actual\n> fact an attack upon Bitcoin as a whole.\n> If this were possible then next year we\u2019d see governments try to push\n> through changes in the same UASF way. I\u2019m very happy that UASFs can\u2019t work\n> because that would be the end of Bitcoin's freedom and decentralized\n> nature.\n>\n> > It is always possible for a majority of hashpower to censor transactions\n> > they disagree with. Users may view that as an attack, and can always\n> > respond with a POW hard fork.\n>\n> I definitely welcome that approach.\n>\n> The result would be that you have two chains, but also you ensure that the\n> chain that the miners didn\u2019t like will no longer be something they can\n> mine.\n> Not even the minority set of miners that like the softfork can mine on it.\n> This is a win-win and then the market will decide which one will \"win\".\n>\n> > Bitcoin only works if the majority of hashpower is not hostile to the\n> > users.\n>\n> This goes both ways, miners both generate value (in the form of security)\n> and they take value (in the form of inflation).\n> If the majority of the users are hostile and reject blocks that the miners\n> create, or change the POW, then what the miners bring to the table is also\n> removed.\n> Bitcoin would lose the security and in the short term even the ability to\n> mine blocks every 10 minutes.\n>\n> So, lets correct your statement a little;\n> \u00abBitcoin only works when the majority of the hashpower and the (economic)\n>   majority of the users are balanced in power and have their goals\n> aligned.\u00bb\n>\n> --\n> Tom Zander\n> Blog: https://zander.github.io\n> Vlog: https://vimeo.com/channels/tomscryptochannel\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170307/042228f6/attachment.html>"
            },
            {
                "author": "shaolinfry",
                "date": "2017-03-12T15:47:28",
                "message_text_only": "Thank you all for the insightful feedback, on list, in private and on various social media platforms. I have extended the generalized proposal which extends BIP9. This basically introduces an extra workflow state if activationtime > starttime and < timeout - 1 month. It allows extra business logic to be added, such as requiring mandatory signalling.\n\nPlease find the draft here:\n\nhttps://gist.github.com/shaolinfry/70d0582db7de958b7d5b6422cfef4e22\n\n<pre> BIP: bip-uaversionbits-strong Title: Version bits extension with mandatory activation Author: Shaolin Fry <shaolinfry at protonmail.ch> Comments-Summary: No comments yet. Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???? Status: Draft Type: Informational Created: 2017-03-09 License: BSD-3-Clause CC0-1.0 </pre> ==Abstract== This document specifies an extension to BIP9 that introduces an additional activation parameter to deploy backward-compatible changes (further called \"soft forks\") to be activated by a deadline. ==Motivation== BIP9 introduced a mechanism for doing parallel soft forking deployments based on repurposing the block nVersion field. Activation is dependent on near unanimous hashrate signalling which may be impractical and is also subject to veto by a small minority of non-signalling hashrate. This specification provides an way for full nodes to coordinate syncronized activation based on a median past time using the BIP9 state machine. Hashrate may optionally trigger activation before the user defined activation sequence triggers. ==Specification== This specification adds a new per-chain deployment parameter to the existing BIP9 specification as follows: # The '''activationtime''' specifies a minimum median time past of a block at which the deployment should transition to the locked-in state. This specification adds a new workflow state, '''PRE_LOCK_IN''' to the BIP9 state machine if the deployment '''activationtime''' is greater than zero when the workflow will be '''DEFINED''' -> '''STARTED''' -> '''PRE_LOCK_IN''' -> '''LOCKED_IN''' -> '''ACTIVE'''. The '''PRE_LOCK_IN''' phase allows optional per deployment processing, e.g. mandatory signalling. ===Selection guidelines=== The following guidelines are suggested for selecting these parameters for a soft fork: # '''activationtime''' should be set to some date in the future and must be less than the BIP9 '''timeout'''. It is recommended to have an activation time of 1 year minus 30 days (28944000 seconds). The '''activationtime''' cannot be less than 30 days before the '''timeout'''. ===State transitions=== The state transition workflow is exactly the same as in BIP9 except when '''activationtime''' is greater than zero. Then the workflow will be '''DEFINED''' -> '''STARTED''' -> '''PRE_LOCK_IN''' -> '''LOCKED_IN''' -> '''ACTIVE'''. When in the STARTED state if the median time past is greater than or equal to the '''activationtime''' then the state will transition to PRE_LOCK_IN on the next retarget after '''activationtime'''. case STARTED: // Transition to THRESHOLD_PRE_LOCK_IN if mandatory activation is set if ((nActivationTime != 0) && pindexPrev->GetMedianTimePast() >= nActivationTime) { stateNext = THRESHOLD_PRE_LOCK_IN; break; } // BIP9 specification follows if (GetMedianTimePast(block.parent) >= timeout) { return FAILED; } int count = 0; walk = block; for (i = 0; i < 2016; i++) { walk = walk.parent; if (walk.nVersion & 0xE0000000 == 0x20000000 && (walk.nVersion >> bit) & 1 == 1) { count++; } } if (count >= threshold) { return LOCKED_IN; } return STARTED; === Reference implementation === https://github.com/bitcoin/bitcoin/compare/master...shaolinfry:bip-uaversionbits-strong ==== Optional mandatory signalling ==== <pre> /** * Return true if nVersion BIP9 deployment is signalling during * mandatory periods. */ bool IsMandatorySignalling(int32_t nVersion, Consensus::DeploymentPos pos, const CBlockIndex* pindexPrev, const Consensus::Params& params) { // Check the deployment is in the correct state for this check to apply. if (!((VersionBitsState(pindexPrev, params, pos, versionbitscache) == THRESHOLD_PRE_LOCK_IN) || (VersionBitsState(pindexPrev, params, pos, versionbitscache) == THRESHOLD_LOCKED_IN))) return true; // return signalling state return (((nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) && (nVersion & VersionBitsMask(params, pos)) != 0); } // segwit signalling is mandatory during PRE_LOCK_IN and LOCKED_IN phase if (!IsMandatorySignalling(block.nVersion, Consensus::DEPLOYMENT_EXAMPLE, pindexPrev, consensusParams)) return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version(0x%08x)\", block.nVersion), strprintf(\"rejected nVersion=0x%08x block, must upgrade\", block.nVersion)); </pre> ==Deployments== A living list of deployment proposals can be found [[bip-0009/assignments.mediawiki|here]]. ==Copyright== This document is placed in the public domain.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170312/74e04d77/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Moving towards user activated soft fork activation",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Chris Belcher",
                "Eric Voskuil",
                "David Vorick",
                "Nick ODell",
                "shaolinfry",
                "Tom Zander",
                "Alphonse Pace",
                "Gareth Williams",
                "Edmund Edgar"
            ],
            "messages_count": 13,
            "total_messages_chars_count": 41456
        }
    },
    {
        "title": "[bitcoin-dev] A Commitment-suitable UTXO set \"Balances\" file data structure",
        "thread_messages": [
            {
                "author": "praxeology_guy",
                "date": "2017-03-07T21:28:49",
                "message_text_only": "A Commitment-suitable UTXO set \"Balances\" file data structure\n- Allows pruned nodes to satisfy SPV nodes\n- Allows pruned nodes to trustlessly start synchronizing at a Balances file's block height instead of the genesis block\n- Allows all nodes in the network to verify their UTXO set's data integrity\n\nFor this to work, Bitcoin would need a new policy:\n- A UTXO commitment is made every \"Balances/UTXO Commitment Period\" (BCP) blocks. The UTXO commitment is made on the state of the UTXO at BCP blocks ago. For example, if BCP is 5000, and we are creating block 20,000, then block 20,000 would contain a commitment on what the state of the UTXO was at block 15,000, right before any changes due to block 15,001.\n- The commitment is made on the state of the UTXO \"BCP blocks ago\" instead of the UTXO state at the tip because: 1. Such a commitment can be made in a background thread and not delay mining/synchronizing node operations; 2. The work of creating the commitment doesn't have to be redone in the case of a fork.\n- The file/commitment is made in a background thread, starting at least BCP/2 blocks after the last block containing a utxo commitment.\n\nBalances file summary:\n{\nHeader: 48 bytes\n{\nFile Type: 4 bytes\nFile version: 4 bytes\nsize of balances: 8 bytes\nroot hash: 32 bytes\n}\nbalances: \"size of balances\" bytes\nbalance index: \"piece count\" * (N + 4) bytes, N=4 proposed\nmerkle tree hashes: ~ 2 * \"piece count\" * 32 bytes\n}\n\nbalances: is a list of balances sorted by txid:\n{\nlength: 4 bytes\ntxid: 32 bytes\nCCoins: variable length, depends on UTXO size\n}\n\nA \"piece\" is like in bittorrent's piece. I propose piece size = 32*1024 bytes. 2GB of balance data would then be divided into 65536 pieces.\n\ntransaction index is an array (with \"piece count\" elements) of:\n{\ntxix: the first N bytes of a txid. I'm proposing N = 4\npiece offset: 4 bytes, location of the first balance in the piece.\n}\n\nmerkle tree hashes:\n- array of \"piece count\" leaf hashes, hashing the balance pieces\n- array of \"(child layer count + 1)/2\" node hashes, hashing pairs of child hashes, or copying up if only one child\n- repeat ^ until the root hash is written\n... except reverse the layer order. In other words, it should be breadth first.\n\n==========\n\nData structure design notes:\n- Most of the file's space is used by the balances. For example, given a 32kB piece size and 2GB balances, the non-balances data only consumes about 4.5MB. If N was increased to 32, ~6.5MB.\n- piece size should be small enough that not that much effort is wasted when invalid pieces are received.\n- piece size should also be small in the case that this data structure is used instead of block history for SPV proof. Then pruned nodes can satisfy SPV clients.\n- The child count = 2 merkle tree structure is only necessary for if this data structure is to be used to satisfy SPV clients. If not used for such a purpose, then technically the root hash could have the leaf hashes as it's direct children. But practically this doesn't make a difference: merkle tree size is nothing compared to sizeof(balances).\n- The only purpose of the balance index is to support SPV clients\n- txix is a truncation of txid to reduce memory usage for a fully in-memory index to support SPV nodes. Maybe this truncation isn't worthwhile.\n\nOther notes:\n- We could make BCP 4383 blocks, which would be 12 times per year, given block period was exactly 10 minutes. But since block period is not exactly 10 minutes, and file names generated with period 4283 are much less comprehensible than file names generated with period 5000... I propose 5000.\n- Having a shorter BCP period would result in more frequent checks on UTXO set integrity, and permit new pruning nodes to start synching closer to the tip. But it may require nodes to keep more copies of the balances file to satisfy the same backup period, and require more background work of creating more balances files.\n\n===========\n\nSuggested design change to the chainstate \"CCoinsViewDB\" utxo database:\n- As it is designed now, the above proposal would require maintaining a duplicate but lagging UTXO database.\n- I propose changing the \"CCoins\" data structure so that it can keep track of spends that shouldn't be included in the commitment. Maybe call it \"vtipspends\".\n\nThen the process for updating the CCoinsViewDB would be:\n1. Mark a txo as spent by adding the vout_ix to vtipspends.\n2. SetNull() and Cleanup() during the background thread that creates Balances commitments. vtipspends would also need to be cleaned.\n- The method for checking whether a txo was spent would need to be changed to check vtipspends.\n\nAt the same time, I know there is currently a lot of code complexity with handling forks and txo spends. Let me propose something to handle this better too:\n- vtipspends could hold {vout_ix, blockhash } instead of just vout_ix.\n- Checking whether a txo is spent will then require a parameter that specifies the \"fork tip hash\" or \"fork chain\"\n\nThen in the case of a fork, no work has to be done to update the utxo database... it is immediately ready to handle answering spend questions for a different fork.\n\nFeedback welcome. FYI I have coded up the creation of such a file already... So I am working on the implementation, not just the spec. I'd really like to hear what you guys think about my proposed changes to CCoins.\n\nCheers,\nPraxeology\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170307/fabd9633/attachment-0001.html>"
            },
            {
                "author": "Bram Cohen",
                "date": "2017-03-08T01:55:18",
                "message_text_only": "On Tue, Mar 7, 2017 at 1:28 PM, praxeology_guy via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> merkle tree hashes:\n> - array of \"piece count\" leaf hashes, hashing the balance pieces\n> - array of \"(child layer count + 1)/2\" node hashes, hashing pairs of child\n> hashes, or copying up if only one child\n> - repeat ^ until the root hash is written\n> ... except reverse the layer order. In other words, it should be breadth\n> first.\n>\n\nA big yuck on that format. It should be something based on a patricia trie\nto support incremental updates. Also if the things being stored are output\ntransaction + output number then those two can be hashed together to make a\nconsistent size identifier and be put into the merkle set format I\nproposed, which is exactly the intended usage:\nhttps://github.com/bramcohen/MerkleSet\n\n- We could make BCP 4383 blocks, which would be 12 times per year, given\n> block period was exactly 10 minutes.  But since block period is not exactly\n> 10 minutes, and file names generated with period 4283 are much less\n> comprehensible than file names generated with period 5000...  I propose\n> 5000.\n>\n\nIf it's of that order it should be synched up with the work difficulty\nreset interval of 2016. If the format supports incremental updates it would\nof course be possible to require them more frequently later.\n\n\n> - Having a shorter BCP period would result in more frequent checks on UTXO\n> set integrity, and permit new pruning nodes to start synching closer to the\n> tip.  But it may require nodes to keep more copies of the balances file to\n> satisfy the same backup period, and require more background work of\n> creating more balances files.\n>\n\nWith a patricia based format it would be possible to make much more common\nutxo commitments, possibly as often as every block only trailing by a few,\nand the cost of updating wouldn't be onerous and reorgs could be handled by\nsimply undoing the last few transactions in the set and and then rolling\nforward.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170307/79914478/attachment.html>"
            },
            {
                "author": "bfd at cock.lu",
                "date": "2017-03-08T01:55:41",
                "message_text_only": "Having a commitment to a \"balance\" of an \"address\" (I assume you mean\nP2SH/P2PKH script) is extremely expensive to create and validate, does\nnot scale and is not a particularly useful thing for a client to use.\nValidating clients should never expect their UTXO to be\ninconsistent with that of the network, if something has happened to\ncause this loosely committing to the UTXO is of no value.\n\n\nOn 2017-03-08 08:28, praxeology_guy via bitcoin-dev wrote:\n> A Commitment-suitable UTXO set \"Balances\" file data structure\n> \n> - Allows pruned nodes to satisfy SPV nodes\n> \n> - Allows pruned nodes to trustlessly start synchronizing at a Balances\n> file's block height instead of the genesis block\n> \n> - Allows all nodes in the network to verify their UTXO set's data\n> integrity\n> \n> For this to work, Bitcoin would need a new policy:\n> \n> - A UTXO commitment is made every \"Balances/UTXO Commitment Period\"\n> (BCP) blocks.  The UTXO commitment is made on the state of the UTXO at\n> BCP blocks ago.  For example, if BCP is 5000, and we are creating\n> block 20,000, then block 20,000 would contain a commitment on what the\n> state of the UTXO was at block 15,000, right before any changes due to\n> block 15,001.\n> \n> - The commitment is made on the state of the UTXO \"BCP blocks ago\"\n> instead of the UTXO state at the tip because: 1. Such a commitment can\n> be made in a background thread and not delay mining/synchronizing node\n> operations; 2. The work of creating the commitment doesn't have to be\n> redone in the case of a fork.\n> \n> - The file/commitment is made in a background thread, starting at\n> least BCP/2 blocks after the last block containing a utxo commitment.\n> \n> Balances file summary:\n> \n> {\n> \n> Header: 48 bytes\n> \n> {\n> \n> File Type: 4 bytes\n> \n> File version: 4 bytes\n> \n> size of balances: 8 bytes\n> \n> root hash: 32 bytes\n> \n> }\n> \n> balances: \"size of balances\" bytes\n> \n> balance index: \"piece count\" * (N + 4) bytes, N=4 proposed\n> \n> merkle tree hashes: ~ 2 * \"piece count\" * 32 bytes\n> \n> }\n> \n> balances: is a list of balances sorted by txid:\n> \n> {\n> \n> length: 4 bytes\n> \n> txid: 32 bytes\n> \n> CCoins: variable length, depends on UTXO size\n> \n> }\n> \n> A \"piece\" is like in bittorrent's piece.  I propose piece size =\n> 32*1024 bytes.  2GB of balance data would then be divided into 65536\n> pieces.\n> \n> transaction index is an array (with \"piece count\" elements) of:\n> \n> {\n> \n> txix: the first N bytes of a txid. I'm proposing N = 4\n> \n> piece offset: 4 bytes, location of the first balance in the piece.\n> \n> }\n> \n> merkle tree hashes:\n> \n> - array of \"piece count\" leaf hashes, hashing the balance pieces\n> \n> - array of \"(child layer count + 1)/2\" node hashes, hashing pairs of\n> child hashes, or copying up if only one child\n> \n> - repeat ^ until the root hash is written\n> \n> ... except reverse the layer order. In other words, it should be\n> breadth first.\n> \n> ==========\n> \n> Data structure design notes:\n> \n> - Most of the file's space is used by the balances.  For example,\n> given a 32kB piece size and 2GB balances, the non-balances data only\n> consumes about 4.5MB.  If N was increased to 32, ~6.5MB.\n> \n> - piece size should be small enough that not that much effort is\n> wasted when invalid pieces are received.\n> \n> - piece size should also be small in the case that this data structure\n> is used instead of block history for SPV proof.  Then pruned nodes can\n> satisfy SPV clients.\n> \n> - The child count = 2 merkle tree structure is only necessary for if\n> this data structure is to be used to satisfy SPV clients.  If not used\n> for such a purpose, then technically the root hash could have the leaf\n> hashes as it's direct children. But practically this doesn't make a\n> difference: merkle tree size is nothing compared to sizeof(balances).\n> \n> - The only purpose of the balance index is to support SPV clients\n> \n> - txix is a truncation of txid to reduce memory usage for a fully\n> in-memory index to support SPV nodes.  Maybe this truncation isn't\n> worthwhile.\n> \n> Other notes:\n> \n> - We could make BCP 4383 blocks, which would be 12 times per year,\n> given block period was exactly 10 minutes.  But since block period is\n> not exactly 10 minutes, and file names generated with period 4283 are\n> much less comprehensible than file names generated with period 5000...\n>  I propose 5000.\n> \n> - Having a shorter BCP period would result in more frequent checks on\n> UTXO set integrity, and permit new pruning nodes to start synching\n> closer to the tip.  But it may require nodes to keep more copies of\n> the balances file to satisfy the same backup period, and require more\n> background work of creating more balances files.\n> \n> ===========\n> \n> Suggested design change to the chainstate \"CCoinsViewDB\" utxo\n> database:\n> \n> - As it is designed now, the above proposal would require maintaining\n> a duplicate but lagging UTXO database.\n> \n> - I propose changing the \"CCoins\" data structure so that it can keep\n> track of spends that shouldn't be included in the commitment. Maybe\n> call it \"vtipspends\".\n> \n> Then the process for updating the CCoinsViewDB would be:\n> \n> 1. Mark a txo as spent by adding the vout_ix to vtipspends.\n> \n> 2. SetNull() and Cleanup() during the background thread that creates\n> Balances commitments.  vtipspends would also need to be cleaned.\n> \n> - The method for checking whether a txo was spent would need to be\n> changed to check vtipspends.\n> \n> At the same time, I know there is currently a lot of code complexity\n> with handling forks and txo spends.  Let me propose something to\n> handle this better too:\n> \n> - vtipspends could hold {vout_ix, blockhash } instead of just vout_ix.\n> \n> - Checking whether a txo is spent will then require a parameter that\n> specifies the \"fork tip hash\" or \"fork chain\"\n> \n> Then in the case of a fork, no work has to be done to update the utxo\n> database... it is immediately ready to handle answering spend\n> questions for a different fork.\n> \n> Feedback welcome.  FYI I have coded up the creation of such a file\n> already... So I am working on the implementation, not just the spec.\n> I'd really like to hear what you guys think about my proposed changes\n> to CCoins.\n> \n> Cheers,\n> \n> Praxeology\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Bram Cohen",
                "date": "2017-03-08T03:07:31",
                "message_text_only": "On Tue, Mar 7, 2017 at 5:55 PM, bfd--- via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Having a commitment to a \"balance\" of an \"address\" (I assume you mean\n> P2SH/P2PKH script) is extremely expensive to create and validate, does\n> not scale and is not a particularly useful thing for a client to use.\n>\n\nThe benefit of this sort of infrequent utxo commitment is that it would\nallow a new client to download just the contents of the utxo set and not\nhave to get the entire blockchain history, which is much larger.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170307/82d8eea0/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "A Commitment-suitable UTXO set \"Balances\" file data structure",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Bram Cohen",
                "bfd at cock.lu",
                "praxeology_guy"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 14858
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Core 0.14.0 released",
        "thread_messages": [
            {
                "author": "Wladimir J. van der Laan",
                "date": "2017-03-08T08:24:00",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nBitcoin Core version 0.14.0 is now available from:\n\n  <https://bitcoin.org/bin/bitcoin-core-0.14.0/>\n\nOr from the torrent,\n\n    magnet:?xt=urn:btih:2dbf4181022baa0629f9313787d0a4294e6acac4&dn=bitcoin-core-0.14.0&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.ccc.de%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969&ws=https%3A%2F%2Fbitcoin.org%2Fbin%2F\n\nThis is a new major version release, including new features, various bugfixes\nand performance improvements, as well as updated translations.\n\nPlease report bugs using the issue tracker at github:\n\n  <https://github.com/bitcoin/bitcoin/issues>\n\nTo receive security and update notifications, please subscribe to:\n\n  <https://bitcoincore.org/en/list/announcements/join/>\n\nCompatibility\n==============\n\nBitcoin Core is extensively tested on multiple operating systems using\nthe Linux kernel, macOS 10.8+, and Windows Vista and later.\n\nMicrosoft ended support for Windows XP on [April 8th, 2014](https://www.microsoft.com/en-us/WindowsForBusiness/end-of-xp-support),\nNo attempt is made to prevent installing or running the software on Windows XP, you\ncan still do so at your own risk but be aware that there are known instabilities and issues.\nPlease do not report issues about Windows XP to the issue tracker.\n\nBitcoin Core should also work on most other Unix-like systems but is not\nfrequently tested on them.\n\nNotable changes\n===============\n\nPerformance Improvements\n- --------------\n\nValidation speed and network propagation performance have been greatly\nimproved, leading to much shorter sync and initial block download times.\n\n- - The script signature cache has been reimplemented as a \"cuckoo cache\",\n  allowing for more signatures to be cached and faster lookups.\n- - Assumed-valid blocks have been introduced which allows script validation to\n  be skipped for ancestors of known-good blocks, without changing the security\n  model. See below for more details.\n- - In some cases, compact blocks are now relayed before being fully validated as\n  per BIP152.\n- - P2P networking has been refactored with a focus on concurrency and\n  throughput. Network operations are no longer bottlenecked by validation. As a\n  result, block fetching is several times faster than previous releases in many\n  cases.\n- - The UTXO cache now claims unused mempool memory. This speeds up initial block\n  download as UTXO lookups are a major bottleneck there, and there is no use for\n  the mempool at that stage.\n\n\nManual Pruning\n- --------------\n\nBitcoin Core has supported automatically pruning the blockchain since 0.11. Pruning\nthe blockchain allows for significant storage space savings as the vast majority of\nthe downloaded data can be discarded after processing so very little of it remains\non the disk.\n\nManual block pruning can now be enabled by setting `-prune=1`. Once that is set,\nthe RPC command `pruneblockchain` can be used to prune the blockchain up to the\nspecified height or timestamp.\n\n`getinfo` Deprecated\n- --------------------\n\nThe `getinfo` RPC command has been deprecated. Each field in the RPC call\nhas been moved to another command's output with that command also giving\nadditional information that `getinfo` did not provide. The following table\nshows where each field has been moved to:\n\n|`getinfo` field   | Moved to                                  |\n|------------------|-------------------------------------------|\n`\"version\"`\t   | `getnetworkinfo()[\"version\"]`\n`\"protocolversion\"`| `getnetworkinfo()[\"protocolversion\"]`\n`\"walletversion\"`  | `getwalletinfo()[\"walletversion\"]`\n`\"balance\"`\t   | `getwalletinfo()[\"balance\"]`\n`\"blocks\"`\t   | `getblockchaininfo()[\"blocks\"]`\n`\"timeoffset\"`\t   | `getnetworkinfo()[\"timeoffset\"]`\n`\"connections\"`\t   | `getnetworkinfo()[\"connections\"]`\n`\"proxy\"`\t   | `getnetworkinfo()[\"networks\"][0][\"proxy\"]`\n`\"difficulty\"`\t   | `getblockchaininfo()[\"difficulty\"]`\n`\"testnet\"`\t   | `getblockchaininfo()[\"chain\"] == \"test\"`\n`\"keypoololdest\"`  | `getwalletinfo()[\"keypoololdest\"]`\n`\"keypoolsize\"`\t   | `getwalletinfo()[\"keypoolsize\"]`\n`\"unlocked_until\"` | `getwalletinfo()[\"unlocked_until\"]`\n`\"paytxfee\"`\t   | `getwalletinfo()[\"paytxfee\"]`\n`\"relayfee\"`\t   | `getnetworkinfo()[\"relayfee\"]`\n`\"errors\"`\t   | `getnetworkinfo()[\"warnings\"]`\n\nZMQ On Windows\n- --------------\n\nPreviously the ZeroMQ notification system was unavailable on Windows\ndue to various issues with ZMQ. These have been fixed upstream and\nnow ZMQ can be used on Windows. Please see [this document](https://github.com/bitcoin/bitcoin/blob/master/doc/zmq.md) for\nhelp with using ZMQ in general.\n\nNested RPC Commands in Debug Console\n- ------------------------------------\n\nThe ability to nest RPC commands has been added to the debug console. This\nallows users to have the output of a command become the input to another\ncommand without running the commands separately.\n\nThe nested RPC commands use bracket syntax (i.e. `getwalletinfo()`) and can\nbe nested (i.e. `getblock(getblockhash(1))`). Simple queries can be\ndone with square brackets where object values are accessed with either an \narray index or a non-quoted string (i.e. `listunspent()[0][txid]`). Both\ncommas and spaces can be used to separate parameters in both the bracket syntax\nand normal RPC command syntax.\n\nNetwork Activity Toggle\n- -----------------------\n\nA RPC command and GUI toggle have been added to enable or disable all p2p\nnetwork activity. The network status icon in the bottom right hand corner \nis now the GUI toggle. Clicking the icon will either enable or disable all\np2p network activity. If network activity is disabled, the icon will \nbe grayed out with an X on top of it.\n\nAdditionally the `setnetworkactive` RPC command has been added which does\nthe same thing as the GUI icon. The command takes one boolean parameter,\n`true` enables networking and `false` disables it.\n\nOut-of-sync Modal Info Layer\n- ----------------------------\n\nWhen Bitcoin Core is out-of-sync on startup, a semi-transparent information\nlayer will be shown over top of the normal display. This layer contains\ndetails about the current sync progress and estimates the amount of time\nremaining to finish syncing. This layer can also be hidden and subsequently\nunhidden by clicking on the progress bar at the bottom of the window.\n\nSupport for JSON-RPC Named Arguments\n- ------------------------------------\n\nCommands sent over the JSON-RPC interface and through the `bitcoin-cli` binary\ncan now use named arguments. This follows the [JSON-RPC specification](http://www.jsonrpc.org/specification)\nfor passing parameters by-name with an object.\n\n`bitcoin-cli` has been updated to support this by parsing `name=value` arguments\nwhen the `-named` option is given.\n\nSome examples:\n\n    src/bitcoin-cli -named help command=\"help\"\n    src/bitcoin-cli -named getblockhash height=0\n    src/bitcoin-cli -named getblock blockhash=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\n    src/bitcoin-cli -named sendtoaddress address=\"(snip)\" amount=\"1.0\" subtractfeefromamount=true\n\nThe order of arguments doesn't matter in this case. Named arguments are also\nuseful to leave out arguments that should stay at their default value. The\nrarely-used arguments `comment` and `comment_to` to `sendtoaddress`, for example, can\nbe left out. However, this is not yet implemented for many RPC calls, this is\nexpected to land in a later release.\n\nThe RPC server remains fully backwards compatible with positional arguments.\n\nOpt into RBF When Sending\n- -------------------------\n\nA new startup option, `-walletrbf`, has been added to allow users to have all\ntransactions sent opt into RBF support. The default value for this option is\ncurrently `false`, so transactions will not opt into RBF by default. The new\n`bumpfee` RPC can be used to replace transactions that opt into RBF.\n\nSensitive Data Is No Longer Stored In Debug Console History\n- -----------------------------------------------------------\n\nThe debug console maintains a history of previously entered commands that can be\naccessed by pressing the Up-arrow key so that users can easily reuse previously\nentered commands. Commands which have sensitive information such as passphrases and\nprivate keys will now have a `(...)` in place of the parameters when accessed through\nthe history.\n\nRetaining the Mempool Across Restarts\n- -------------------------------------\n\nThe mempool will be saved to the data directory prior to shutdown\nto a `mempool.dat` file. This file preserves the mempool so that when the node\nrestarts the mempool can be filled with transactions without waiting for new transactions\nto be created. This will also preserve any changes made to a transaction through\ncommands such as `prioritisetransaction` so that those changes will not be lost.\n\nFinal Alert\n- -----------\n\nThe Alert System was [disabled and deprecated](https://bitcoin.org/en/alert/2016-11-01-alert-retirement) in Bitcoin Core 0.12.1 and removed in 0.13.0. \nThe Alert System was retired with a maximum sequence final alert which causes any nodes\nsupporting the Alert System to display a static hard-coded \"Alert Key Compromised\" message which also\nprevents any other alerts from overriding it. This final alert is hard-coded into this release\nso that all old nodes receive the final alert.\n\nGUI Changes\n- -----------\n\n - After resetting the options by clicking the `Reset Options` button \n   in the options dialog or with the `-resetguioptions` startup option, \n   the user will be prompted to choose the data directory again. This \n   is to ensure that custom data directories will be kept after the \n   option reset which clears the custom data directory set via the choose \n   datadir dialog.\n\n - Multiple peers can now be selected in the list of peers in the debug \n   window. This allows for users to ban or disconnect multiple peers \n   simultaneously instead of banning them one at a time.\n\n - An indicator has been added to the bottom right hand corner of the main\n   window to indicate whether the wallet being used is a HD wallet. This\n   icon will be grayed out with an X on top of it if the wallet is not a\n   HD wallet.\n\nLow-level RPC changes\n- ----------------------\n\n - `importprunedfunds` only accepts two required arguments. Some versions accept\n   an optional third arg, which was always ignored. Make sure to never pass more\n   than two arguments.\n\n - The first boolean argument to `getaddednodeinfo` has been removed. This is \n   an incompatible change.\n\n - RPC command `getmininginfo` loses the \"testnet\" field in favor of the more\n   generic \"chain\" (which has been present for years).\n\n - A new RPC command `preciousblock` has been added which marks a block as\n   precious. A precious block will be treated as if it were received earlier\n   than a competing block.\n\n - A new RPC command `importmulti` has been added which receives an array of \n   JSON objects representing the intention of importing a public key, a \n   private key, an address and script/p2sh\n\n - Use of `getrawtransaction` for retrieving confirmed transactions with unspent\n   outputs has been deprecated. For now this will still work, but in the future\n   it may change to only be able to retrieve information about transactions in\n   the mempool or if `txindex` is enabled.\n\n - A new RPC command `getmemoryinfo` has been added which will return information\n   about the memory usage of Bitcoin Core. This was added in conjunction with\n   optimizations to memory management. See [Pull #8753](https://github.com/bitcoin/bitcoin/pull/8753)\n   for more information.\n\n - A new RPC command `bumpfee` has been added which allows replacing an\n   unconfirmed wallet transaction that signaled RBF (see the `-walletrbf`\n   startup option above) with a new transaction that pays a higher fee, and\n   should be more likely to get confirmed quickly.\n\nHTTP REST Changes\n- -----------------\n\n - UTXO set query (`GET /rest/getutxos/<checkmempool>/<txid>-<n>/<txid>-<n>\n   /.../<txid>-<n>.<bin|hex|json>`) responses were changed to return status \n   code `HTTP_BAD_REQUEST` (400) instead of `HTTP_INTERNAL_SERVER_ERROR` (500)\n   when requests contain invalid parameters.\n\nMinimum Fee Rate Policies\n- -------------------------\n\nSince the changes in 0.12 to automatically limit the size of the mempool and improve the performance of block creation in mining code it has not been important for relay nodes or miners to set `-minrelaytxfee`. With this release the following concepts that were tied to this option have been separated out:\n- - incremental relay fee used for calculating BIP 125 replacement and mempool limiting. (1000 satoshis/kB)\n- - calculation of threshold for a dust output. (effectively 3 * 1000 satoshis/kB)\n- - minimum fee rate of a package of transactions to be included in a block created by the mining code. If miners wish to set this minimum they can use the new `-blockmintxfee` option.  (defaults to 1000 satoshis/kB)\n\nThe `-minrelaytxfee` option continues to exist but is recommended to be left unset.\n\nFee Estimation Changes\n- ----------------------\n\n- - Since 0.13.2 fee estimation for a confirmation target of 1 block has been\n  disabled. The fee slider will no longer be able to choose a target of 1 block.\n  This is only a minor behavior change as there was often insufficient\n  data for this target anyway. `estimatefee 1` will now always return -1 and\n  `estimatesmartfee 1` will start searching at a target of 2.\n\n- - The default target for fee estimation is changed to 6 blocks in both the GUI\n  (previously 25) and for RPC calls (previously 2).\n\nRemoval of Priority Estimation\n- ------------------------------\n\n- - Estimation of \"priority\" needed for a transaction to be included within a target\n  number of blocks has been removed.  The RPC calls are deprecated and will either\n  return -1 or 1e24 appropriately. The format for `fee_estimates.dat` has also\n  changed to no longer save these priority estimates. It will automatically be\n  converted to the new format which is not readable by prior versions of the\n  software.\n\n- - Support for \"priority\" (coin age) transaction sorting for mining is\n  considered deprecated in Core and will be removed in the next major version.\n  This is not to be confused with the `prioritisetransaction` RPC which will remain\n  supported by Core for adding fee deltas to transactions.\n\nP2P connection management\n- --------------------------\n\n- - Peers manually added through the `-addnode` option or `addnode` RPC now have their own\n  limit of eight connections which does not compete with other inbound or outbound\n  connection usage and is not subject to the limitation imposed by the `-maxconnections`\n  option.\n\n- - New connections to manually added peers are performed more quickly.\n\nIntroduction of assumed-valid blocks\n- -------------------------------------\n\n- - A significant portion of the initial block download time is spent verifying\n  scripts/signatures.  Although the verification must pass to ensure the security\n  of the system, no other result from this verification is needed: If the node\n  knew the history of a given block were valid it could skip checking scripts\n  for its ancestors.\n\n- - A new configuration option 'assumevalid' is provided to express this knowledge\n  to the software.  Unlike the 'checkpoints' in the past this setting does not\n  force the use of a particular chain: chains that are consistent with it are\n  processed quicker, but other chains are still accepted if they'd otherwise\n  be chosen as best. Also unlike 'checkpoints' the user can configure which\n  block history is assumed true, this means that even outdated software can\n  sync more quickly if the setting is updated by the user.\n\n- - Because the validity of a chain history is a simple objective fact it is much\n  easier to review this setting.  As a result the software ships with a default\n  value adjusted to match the current chain shortly before release.  The use\n  of this default value can be disabled by setting -assumevalid=0\n\nFundrawtransaction change address reuse\n- ----------------------------------------\n\n- - Before 0.14, `fundrawtransaction` was by default wallet stateless. In\n  almost all cases `fundrawtransaction` does add a change-output to the\n  outputs of the funded transaction. Before 0.14, the used keypool key was\n  never marked as change-address key and directly returned to the keypool\n  (leading to address reuse).  Before 0.14, calling `getnewaddress`\n  directly after `fundrawtransaction` did generate the same address as\n  the change-output address.\n\n- - Since 0.14, fundrawtransaction does reserve the change-output-key from\n  the keypool by default (optional by setting  `reserveChangeKey`, default =\n  `true`)\n\n- - Users should also consider using `getrawchangeaddress()` in conjunction\n  with `fundrawtransaction`'s `changeAddress` option.\n\nUnused mempool memory used by coincache\n- ----------------------------------------\n\n- - Before 0.14, memory reserved for mempool (using the `-maxmempool` option)\n  went unused during initial block download, or IBD. In 0.14, the UTXO DB cache\n  (controlled with the `-dbcache` option) borrows memory from the mempool\n  when there is extra memory available. This may result in an increase in\n  memory usage during IBD for those previously relying on only the `-dbcache`\n  option to limit memory during that time.\n\n0.14.0 Change log\n=================\n\nDetailed release notes follow. This overview includes changes that affect\nbehavior, not code moves, minor refactors and string updates. For convenience\nin locating the code changes and accompanying discussion, both the pull request\nand git merge commit are mentioned.\n\n### RPC and other APIs\n- - #8421 `b77bb95` httpserver: drop boost dependency (theuni)\n- - #8638 `f061415` rest.cpp: change `HTTP_INTERNAL_SERVER_ERROR` to `HTTP_BAD_REQUEST` (djpnewton)\n- - #8272 `91990ee` Make the dummy argument to getaddednodeinfo optional (sipa)\n- - #8722 `bb843ad` bitcoin-cli: More detailed error reporting (laanwj)\n- - #6996 `7f71a3c` Add preciousblock RPC (sipa)\n- - #8788 `97c7f73` Give RPC commands more information about the RPC request (jonasschnelli)\n- - #7948 `5d2c8e5` Augment getblockchaininfo bip9\\_softforks data (mruddy)\n- - #8980 `0e22855` importmulti: Avoid using boost::variant::operator!=, which is only in newer boost versions (luke-jr)\n- - #9025 `4d8558a` Getrawtransaction should take a bool for verbose (jnewbery)\n- - #8811 `5754e03` Add support for JSON-RPC named arguments (laanwj)\n- - #9520 `2456a83` Deprecate non-txindex getrawtransaction and better warning (sipa)\n- - #9518 `a65ced1` Return height of last block pruned by pruneblockchain RPC (ryanofsky)\n- - #9222 `7cb024e` Add 'subtractFeeFromAmount' option to 'fundrawtransaction' (dooglus)\n- - #8456 `2ef52d3` Simplified `bumpfee` command (mrbandrews)\n- - #9516 `727a798` Bug-fix: listsinceblock: use fork point as reference for blocks in reorg'd chains (kallewoof)\n- - #9640 `7bfb770` Bumpfee: bugfixes for error handling and feerate calculation (sdaftuar)\n- - #9673 `8d6447e` Set correct metadata on bumpfee wallet transactions (ryanofsky)\n- - #9650 `40f7e27` Better handle invalid parameters to signrawtransaction (TheBlueMatt)\n- - #9682 `edc9e63` Require timestamps for importmulti keys (ryanofsky)\n- - #9108 `d8e8b06` Use importmulti timestamp when importing watch only keys (on top of #9682) (ryanofsky)\n- - #9756 `7a93af8` Return error when importmulti called with invalid address (ryanofsky)\n- - #9778 `ad168ef` Add two hour buffer to manual pruning (morcos)\n- - #9761 `9828f9a` Use 2 hour grace period for key timestamps in importmulti rescans (ryanofsky)\n- - #9474 `48d7e0d` Mark the minconf parameter to move as ignored (sipa)\n- - #9619 `861cb0c` Bugfix: RPC/Mining: GBT should return 1 MB sizelimit before segwit activates (luke-jr)\n- - #9773 `9072395` Return errors from importmulti if complete rescans are not successful (ryanofsky)\n\n### Block and transaction handling\n- - #8391 `37d83bb` Consensus: Remove ISM (NicolasDorier)\n- - #8365 `618c9dd` Treat high-sigop transactions as larger rather than rejecting them (sipa)\n- - #8814 `14b7b3f` wallet, policy: ParameterInteraction: Don't allow 0 fee (MarcoFalke)\n- - #8515 `9bdf526` A few mempool removal optimizations (sipa)\n- - #8448 `101c642` Store mempool and prioritization data to disk (sipa)\n- - #7730 `3c03dc2` Remove priority estimation (morcos)\n- - #9111 `fb15610` Remove unused variable `UNLIKELY_PCT` from fees.h (fanquake)\n- - #9133 `434e683` Unset fImporting for loading mempool (morcos)\n- - #9179 `b9a87b4` Set `DEFAULT_LIMITFREERELAY` = 0 kB/minute (MarcoFalke)\n- - #9239 `3fbf079` Disable fee estimates for 1-block target (morcos)\n- - #7562 `1eef038` Bump transaction version default to 2 (btcdrak)\n- - #9313,#9367 If we don't allow free txs, always send a fee filter (morcos)\n- - #9346 `b99a093` Batch construct batches (sipa)\n- - #9262 `5a70572` Prefer coins that have fewer ancestors, sanity check txn before ATMP (instagibbs)\n- - #9288 `1ce7ede` Fix a bug if the min fee is 0 for FeeFilterRounder (morcos)\n- - #9395 `0fc1c31` Add test for `-walletrejectlongchains` (morcos)\n- - #9107 `7dac1e5` Safer modify new coins (morcos)\n- - #9312 `a72f76c` Increase mempool expiry time to 2 weeks (morcos)\n- - #8610 `c252685` Share unused mempool memory with coincache (sipa)\n- - #9138 `f646275` Improve fee estimation (morcos)\n- - #9408 `46b249e` Allow shutdown during LoadMempool, dump only when necessary (jonasschnelli)\n- - #9310 `8c87f17` Assert FRESH validity in CCoinsViewCache::BatchWrite (ryanofsky)\n- - #7871 `e2e624d` Manual block file pruning (mrbandrews)\n- - #9507 `0595042` Fix use-after-free in CTxMemPool::removeConflicts() (sdaftuar)\n- - #9380 `dd98f04` Separate different uses of minimum fees (morcos)\n- - #9596 `71148b8` bugfix save feeDelta instead of priorityDelta in DumpMempool (morcos)\n- - #9371 `4a1dc35` Notify on removal (morcos)\n- - #9519 `9b4d267` Exclude RBF replacement txs from fee estimation (morcos)\n- - #8606 `e2a1a1e` Fix some locks (sipa)\n- - #8681 `6898213` Performance Regression Fix: Pre-Allocate txChanged vector (JeremyRubin)\n- - #8223 `744d265` c++11: Use std::unique\\_ptr for block creation (domob1812)\n- - #9125 `7490ae8` Make CBlock a vector of shared\\_ptr of CTransactions (sipa)\n- - #8930 `93566e0` Move orphan processing to ActivateBestChain (TheBlueMatt)\n- - #8580 `46904ee` Make CTransaction actually immutable (sipa)\n- - #9240 `a1dcf2e` Remove txConflicted (morcos)\n- - #8589 `e8cfe1e` Inline CTxInWitness inside CTxIn (sipa)\n- - #9349 `2db4cbc` Make CScript (and prevector) c++11 movable (sipa)\n- - #9252 `ce5c1f4` Release cs\\_main before calling ProcessNewBlock, or processing headers (cmpctblock handling) (sdaftuar)\n- - #9283 `869781c` A few more CTransactionRef optimizations (sipa)\n- - #9499 `9c9af5a` Use recent-rejects, orphans, and recently-replaced txn for compact-block-reconstruction (TheBlueMatt)\n- - #9813 `3972a8e` Read/write mempool.dat as a binary (paveljanik)\n\n### P2P protocol and network code\n- - #8128 `1030fa7` Turn net structures into dumb storage classes (theuni)\n- - #8282 `026c6ed` Feeler connections to increase online addrs in the tried table (EthanHeilman)\n- - #8462 `53f8f22` Move AdvertiseLocal debug output to net category (Mirobit)\n- - #8612 `84decb5` Check for compatibility with download in FindNextBlocksToDownload (sipa)\n- - #8594 `5b2ea29` Do not add random inbound peers to addrman (gmaxwell)\n- - #8085 `6423116` Begin encapsulation (theuni)\n- - #8715 `881d7ea` only delete CConnman if it's been created (theuni)\n- - #8707 `f07424a` Fix maxuploadtarget setting (theuni)\n- - #8661 `d2e4655` Do not set an addr time penalty when a peer advertises itself (gmaxwell)\n- - #8822 `9bc6a6b` Consistent checksum handling (laanwj)\n- - #8936 `1230890` Report NodeId in misbehaving debug (rebroad)\n- - #8968 `3cf496d` Don't hold cs\\_main when calling ProcessNewBlock from a cmpctblock (TheBlueMatt)\n- - #9002 `e1d1f57` Make connect=0 disable automatic outbound connections (gmaxwell)\n- - #9050 `fcf61b8` Make a few values immutable, and use deterministic randomness for the localnonce (theuni)\n- - #8969 `3665483` Decouple peer-processing-logic from block-connection-logic (#2) (TheBlueMatt)\n- - #8708 `c8c572f` have CConnman handle message sending (theuni)\n- - #8709 `1e50d22` Allow filterclear messages for enabling TX relay only (rebroad)\n- - #9045 `9f554e0` Hash P2P messages as they are received instead of at process-time (TheBlueMatt)\n- - #9026 `dc6b940` Fix handling of invalid compact blocks (sdaftuar)\n- - #8996 `ab914a6` Network activity toggle (luke-jr)\n- - #9131 `62af164` fNetworkActive is not protected by a lock, use an atomic (jonasschnelli)\n- - #8872 `0c577f2` Remove block-request logic from INV message processing (TheBlueMatt)\n- - #8690 `791b58d` Do not fully sort all nodes for addr relay (sipa)\n- - #9128 `76fec09` Decouple CConnman and message serialization (theuni)\n- - #9226 `3bf06e9` Remove fNetworkNode and pnodeLocalHost (gmaxwell)\n- - #9352 `a7f7651` Attempt reconstruction from all compact block announcements (sdaftuar)\n- - #9319 `a55716a` Break addnode out from the outbound connection limits (gmaxwell)\n- - #9261 `2742568` Add unstored orphans with rejected parents to recentRejects (morcos)\n- - #9441 `8b66bf7` Massive speedup. Net locks overhaul (theuni)\n- - #9375 `3908fc4` Relay compact block messages prior to full block connection (TheBlueMatt)\n- - #9400 `8a445c5` Set peers as HB peers upon full block validation (instagibbs)\n- - #9561 `6696b46` Wake message handling thread when we receive a new block (TheBlueMatt)\n- - #9535 `82274c0` Split CNode::cs\\_vSend: message processing and message sending (TheBlueMatt)\n- - #9606 `3f9f962` Consistently use GetTimeMicros() for inactivity checks (sdaftuar)\n- - #9594 `fd70211` Send final alert message to older peers after connecting (gmaxwell)\n- - #9626 `36966a1` Clean up a few CConnman cs\\_vNodes/CNode things (TheBlueMatt)\n- - #9609 `4966917` Fix remaining net assertions (theuni)\n- - #9671 `7821db3` Fix super-unlikely race introduced in 236618061a445d2cb11e72 (TheBlueMatt)\n- - #9730 `33f3b21` Remove bitseed.xf2.org form the dns seed list (jonasschnelli)\n- - #9698 `2447c10` Fix socket close race (theuni)\n- - #9708 `a06ede9` Clean up all known races/platform-specific UB at the time PR was opened (TheBlueMatt)\n- - #9715 `b08656e` Disconnect peers which we do not receive VERACKs from within 60 sec (TheBlueMatt)\n- - #9720 `e87ce95` Fix banning and disallow sending messages before receiving verack (theuni)\n- - #9268 `09c4fd1` Fix rounding privacy leak introduced in #9260 (TheBlueMatt)\n- - #9075 `9346f84` Decouple peer-processing-logic from block-connection-logic (#3) (TheBlueMatt)\n- - #8688 `047ded0` Move static global randomizer seeds into CConnman (sipa)\n- - #9289 `d9ae1ce` net: drop boost::thread\\_group (theuni)\n\n### Validation\n- - #9014 `d04aeba` Fix block-connection performance regression (TheBlueMatt)\n- - #9299 `d52ce89` Remove no longer needed check for premature v2 txs (morcos)\n- - #9273 `b68685a` Remove unused `CDiskBlockPos*` argument from ProcessNewBlock (TheBlueMatt)\n- - #8895 `b83264d` Better SigCache Implementation (JeremyRubin)\n- - #9490 `e126d0c` Replace FindLatestBefore used by importmulti with FindEarliestAtLeast (gmaxwell)\n- - #9484 `812714f` Introduce assumevalid setting to skip validation presumed valid scripts (gmaxwell)\n- - #9511 `7884956` Don't overwrite validation state with corruption check (morcos)\n- - #9765 `1e92e04` Harden against mistakes handling invalid blocks (sdaftuar)\n- - #9779 `3c02b95` Update nMinimumChainWork and defaultAssumeValid (gmaxwell)\n- - #8524 `19b0f33` Precompute sighashes (sipa)\n- - #9791 `1825a03` Avoid VLA in hash.h (sipa)\n\n### Build system\n- - #8238 `6caf3ee` ZeroMQ 4.1.5 && ZMQ on Windows (fanquake)\n- - #8520 `b40e19c` Remove check for `openssl/ec.h` (laanwj)\n- - #8617 `de07fdc` Include instructions to extract Mac OS X SDK on Linux using 7zip and SleuthKit (luke-jr)\n- - #8566 `7b98895` Easy to use gitian building script (achow101)\n- - #8604 `f256843` build,doc: Update for 0.13.0+ and OpenBSD 5.9 (laanwj)\n- - #8640 `2663e51` depends: Remove Qt46 package (fanquake)\n- - #8645 `8ea4440` Remove unused Qt 4.6 patch (droark)\n- - #8608 `7e9ab95` Install manpages via make install, also add some autogenerated manpages (nomnombtc)\n- - #8781 `ca69ef4` contrib: delete `qt_translations.py` (MarcoFalke)\n- - #8783 `64dc645` share: remove qt/protobuf.pri (MarcoFalke)\n- - #8423 `3166dff` depends: expat 2.2.0, ccache 3.3.1, fontconfig 2.12.1 (fanquake)\n- - #8791 `b694b0d` travis: cross-mac: explicitly enable gui (MarcoFalke)\n- - #8820 `dc64141` depends: Fix Qt compilation with Xcode 8 (fanquake)\n- - #8730 `489a6ab` depends: Add libevent compatibility patch for windows (laanwj)\n- - #8819 `c841816` depends: Boost 1.61.0 (fanquake)\n- - #8826 `f560d95` Do not include `env_win.cc` on non-Windows systems (paveljanik)\n- - #8948 `e077e00` Reorder Windows gitian build order to match Linux (Michagogo)\n- - #8568 `078900d` new var `DIST_CONTRIB` adds useful things for packagers from contrib (nomnombtc)\n- - #9114 `21e6c6b` depends: Set `OSX_MIN_VERSION` to 10.8 (fanquake)\n- - #9140 `018a4eb` Bugfix: Correctly replace generated headers and fail cleanly (luke-jr)\n- - #9156 `a8b2a82` Add compile and link options echo to configure (jonasschnelli)\n- - #9393 `03d85f6` Include cuckoocache header in Makefile (MarcoFalke)\n- - #9420 `bebe369` Fix linker error when configured with --enable-lcov (droark)\n- - #9412 `53442af` Fix 'make deploy' for OSX (jonasschnelli)\n- - #9475 `7014506` Let autoconf detect presence of `EVP_MD_CTX_new` (luke-jr)\n- - #9513 `bbf193f` Fix qt distdir builds (theuni)\n- - #9471 `ca615e6` depends: libevent 2.1.7rc (fanquake)\n- - #9468 `f9117f2` depends: Dependency updates for 0.14.0 (fanquake)\n- - #9469 `01c4576` depends: Qt 5.7.1 (fanquake)\n- - #9574 `5ac6687` depends: Fix QT build on OSX (fanquake)\n- - #9646 `720b579` depends: Fix cross build for qt5.7 (theuni)\n- - #9705 `6a55515` Add options to override BDB cflags/libs (laanwj)\n- - #8249 `4e1567a` Enable (and check for) 64-bit ASLR on Windows (laanwj)\n- - #9758 `476cc47` Selectively suppress deprecation warnings (jonasschnelli)\n- - #9783 `6d61a2b` release: bump gitian descriptors for a new 0.14 package cache (theuni)\n- - #9789 `749fe95` build: add --enable-werror and warn on vla's (theuni)\n- - #9831 `99fd85c` build: force a c++ standard to be specified (theuni)\n\n### GUI\n- - #8192 `c503863` Remove URLs from About dialog translations (fanquake)\n- - #8540 `36404ae` Fix random segfault when closing \"Choose data directory\" dialog (laanwj)\n- - #8517 `2468292` Show wallet HD state in statusbar (jonasschnelli)\n- - #8463 `62a5a8a` Remove Priority from coincontrol dialog (MarcoFalke)\n- - #7579 `0606f95` Show network/chain errors in the GUI (jonasschnelli)\n- - #8583 `c19f8a4` Show XTHIN in GUI (rebroad)\n- - #7783 `4335d5a` RPC-Console: support nested commands and simple value queries (jonasschnelli)\n- - #8672 `6052d50` Show transaction size in transaction details window (Cocosoft)\n- - #8777 `fec6af7` WalletModel: Expose disablewallet (MarcoFalke)\n- - #8371 `24f72e9` Add out-of-sync modal info layer (jonasschnelli)\n- - #8885 `b2fec4e` Fix ban from qt console (theuni)\n- - #8821 `bf8e68a` sync-overlay: Don't block during reindex (MarcoFalke)\n- - #8906 `088d1f4` sync-overlay: Don't show progress twice (MarcoFalke)\n- - #8918 `47ace42` Add \"Copy URI\" to payment request context menu (luke-jr)\n- - #8925 `f628d9a` Display minimum ping in debug window (rebroad)\n- - #8774 `3e942a7` Qt refactors to better abstract wallet access (luke-jr)\n- - #8985 `7b1bfa3` Use pindexBestHeader instead of setBlockIndexCandidates for NotifyHeaderTip() (jonasschnelli)\n- - #8989 `d2143dc` Overhaul smart-fee slider, adjust default confirmation target (jonasschnelli)\n- - #9043 `273bde3` Return useful error message on ATMP failure (MarcoFalke)\n- - #9088 `4e57824` Reduce ambiguity of warning message (rebroad)\n- - #8874 `e984730` Multiple Selection for peer and ban tables (achow101)\n- - #9145 `924745d` Make network disabled icon 50% opaque (MarcoFalke)\n- - #9130 `ac489b2` Mention the new network toggle functionality in the tooltip (paveljanik)\n- - #9218 `4d955fc` Show progress overlay when clicking spinner icon (laanwj)\n- - #9280 `e15660c` Show ModalOverlay by pressing the progress bar, allow hiding (jonasschnelli)\n- - #9296 `fde7d99` Fix missed change to WalletTx structure (morcos)\n- - #9266 `2044e37` Bugfix: Qt/RPCConsole: Put column enum in the right places (luke-jr)\n- - #9255 `9851a84` layoutAboutToChange signal is called layoutAboutToBeChanged (laanwj)\n- - #9330 `47e6a19` Console: add security warning (jonasschnelli)\n- - #9329 `db45ad8` Console: allow empty arguments (jonasschnelli)\n- - #8877 `6dc4c43` Qt RPC console: history sensitive-data filter, and saving input line when browsing history (luke-jr)\n- - #9462 `649cf5f` Do not translate tilde character (MarcoFalke)\n- - #9457 `123ea73` Select more files for translation (MarcoFalke)\n- - #9413 `fd7d8c7` CoinControl: Allow non-wallet owned change addresses (jonasschnelli)\n- - #9461 `b250686` Improve progress display during headers-sync and peer-finding (jonasschnelli)\n- - #9588 `5086452` Use nPowTargetSpacing constant (MarcoFalke)\n- - #9637 `d9e4d1d` Fix transaction details output-index to reflect vout index (jonasschnelli)\n- - #9718 `36f9d3a` Qt/Intro: Various fixes (luke-jr)\n- - #9735 `ec66d06` devtools: Handle Qt formatting characters edge-case in update-translations.py (laanwj)\n- - #9755 `a441db0` Bugfix: Qt/Options: Restore persistent \"restart required\" notice (luke-jr)\n- - #9817 `7d75a5a` Fix segfault crash when shutdown the GUI in disablewallet mode (jonasschnelli)\n\n### Wallet\n- - #8152 `b9c1cd8` Remove `CWalletDB*` parameter from CWallet::AddToWallet (pstratem)\n- - #8432 `c7e05b3` Make CWallet::fFileBacked private (pstratem)\n- - #8445 `f916700` Move CWallet::setKeyPool to private section of CWallet (pstratem)\n- - #8564 `0168019` Remove unused code/conditions in ReadAtCursor (jonasschnelli)\n- - #8601 `37ac678` Add option to opt into full-RBF when sending funds (rebase, original by petertodd) (laanwj)\n- - #8494 `a5b20ed` init, wallet: ParameterInteraction() iff wallet enabled (MarcoFalke)\n- - #8760 `02ac669` init: Get rid of some `ENABLE_WALLET` (MarcoFalke)\n- - #8696 `a1f8d3e` Wallet: Remove last external reference to CWalletDB (pstratem)\n- - #8768 `886e8c9` init: Get rid of fDisableWallet (MarcoFalke)\n- - #8486 `ab0b411` Add high transaction fee warnings (MarcoFalke)\n- - #8851 `940748b` Move key derivation logic from GenerateNewKey to DeriveNewChildKey (pstratem)\n- - #8287 `e10af96` Set fLimitFree = true (MarcoFalke)\n- - #8928 `c587577` Fix init segfault where InitLoadWallet() calls ATMP before genesis (TheBlueMatt)\n- - #7551 `f2d7056` Add importmulti RPC call (pedrobranco)\n- - #9016 `0dcb888` Return useful error message on ATMP failure (instagibbs)\n- - #8753 `f8723d2` Locked memory manager (laanwj)\n- - #8828 `a4fd8df` Move CWalletDB::ReorderTransactions to CWallet (pstratem)\n- - #8977 `6a1343f` Refactor wallet/init interaction (Reaccept wtx, flush thread) (jonasschnelli)\n- - #9036 `ed0cc50` Change default confirm target from 2 to 6 (laanwj)\n- - #9071 `d1871da` Declare wallet.h functions inline (sipa)\n- - #9132 `f54e460` Make strWalletFile const (jonasschnelli)\n- - #9141 `5ea5e04` Remove unnecessary calls to CheckFinalTx (jonasschnelli)\n- - #9165 `c01f16a` SendMoney: use already-calculated balance (instagibbs)\n- - #9311 `a336d13` Flush wallet after abandontransaction (morcos)\n- - #8717 `38e4887` Addition of ImmatureCreditCached to MarkDirty() (spencerlievens)\n- - #9446 `510c0d9` SetMerkleBranch: remove unused code, remove cs\\_main lock requirement (jonasschnelli)\n- - #8776 `2a524b8` Wallet refactoring leading up to multiwallet (luke-jr)\n- - #9465 `a7d55c9` Do not perform ECDSA signing in the fee calculation inner loop (gmaxwell)\n- - #9404 `12e3112` Smarter coordination of change and fee in CreateTransaction (morcos)\n- - #9377 `fb75cd0` fundrawtransaction: Keep change-output keys by default, make it optional (jonasschnelli)\n- - #9578 `923dc44` Add missing mempool lock for CalculateMemPoolAncestors (TheBlueMatt)\n- - #9227 `02464da` Make nWalletDBUpdated atomic to avoid a potential race (pstratem)\n- - #9764 `f8af89a` Prevent \"overrides a member function but is not marked 'override'\" warnings (laanwj)\n- - #9771 `e43a585` Add missing cs\\_wallet lock that triggers new lock held assertion (ryanofsky)\n- - #9316 `3097ea4` Disable free transactions when relay is disabled (MarcoFalke)\n- - #9615 `d2c9e4d` Wallet incremental fee (morcos)\n- - #9760 `40c754c` Remove importmulti always-true check (ryanofsky)\n\n### Tests and QA\n- - #8270 `6e5e5ab` Tests: Use portable #! in python scripts (/usr/bin/env) (ChoHag)\n- - #8534,#8504 Remove java comparison tool (laanwj,MarcoFalke)\n- - #8482 `740cff5` Use single cache dir for chains (MarcoFalke)\n- - #8450 `21857d2` Replace `rpc_wallet_tests.cpp` with python RPC unit tests (pstratem)\n- - #8671 `ddc3080` Minimal fix to slow prevector tests as stopgap measure (JeremyRubin)\n- - #8680 `666eaf0` Address Travis spurious failures (theuni)\n- - #8789 `e31a43c` pull-tester: Only print output when failed (MarcoFalke)\n- - #8810 `14e8f99` tests: Add exception error message for JSONRPCException (laanwj)\n- - #8830 `ef0801b` test: Add option to run bitcoin-util-test.py manually (jnewbery)\n- - #8881 `e66cc1d` Add some verbose logging to bitcoin-util-test.py (jnewbery)\n- - #8922 `0329511` Send segwit-encoded blocktxn messages in p2p-compactblocks (TheBlueMatt)\n- - #8873 `74dc388` Add microbenchmarks to profile more code paths (ryanofsky)\n- - #9032 `6a8be7b` test: Add format-dependent comparison to bctest (laanwj)\n- - #9023 `774db92` Add logging to bitcoin-util-test.py (jnewbery)\n- - #9065 `c9bdf9a` Merge `doc/unit-tests.md` into `src/test/README.md` (laanwj)\n- - #9069 `ed64bce` Clean up bctest.py and bitcoin-util-test.py (jnewbery)\n- - #9095 `b8f43e3` test: Fix test\\_random includes (MarcoFalke)\n- - #8894 `faec09b` Testing: Include fRelay in mininode version messages (jnewbery)\n- - #9097 `e536499` Rework `sync_*` and preciousblock.py (MarcoFalke)\n- - #9049 `71bc39e` Remove duplicatable duplicate-input check from CheckTransaction (TheBlueMatt)\n- - #9136 `b422913` sync\\_blocks cleanup (ryanofsky)\n- - #9151 `4333b1c` proxy\\_test: Calculate hardcoded port numbers (MarcoFalke)\n- - #9206 `e662d28` Make test constant consistent with consensus.h (btcdrak)\n- - #9139 `0de7fd3` Change sync\\_blocks to pick smarter maxheight (on top of #9196) (ryanofsky)\n- - #9100 `97ec6e5` tx\\_valid: re-order inputs to how they are encoded (dcousens)\n- - #9202 `e56cf67` bench: Add support for measuring CPU cycles (laanwj)\n- - #9223 `5412c08` unification of Bloom filter representation (s-matthew-english)\n- - #9257 `d7ba4a2` Dump debug logs on travis failures (sdaftuar)\n- - #9221 `9e4bb31` Get rid of duplicate code (MarcoFalke)\n- - #9274 `919db03` Use cached utxo set to fix performance regression (MarcoFalke)\n- - #9276 `ea33f19` Some minor testing cleanups (morcos)\n- - #9291 `8601784` Remove mapOrphanTransactionsByPrev from DoS\\_tests (sipa)\n- - #9309 `76fcd9d` Wallet needs to stay unlocked for whole test (morcos)\n- - #9172 `5bc209c` Resurrect pstratem's \"Simple fuzzing framework\" (laanwj)\n- - #9331 `c6fd923` Add test for rescan feature of wallet key import RPCs (ryanofsky)\n- - #9354 `b416095` Make fuzzer actually test CTxOutCompressor (sipa)\n- - #9390,#9416 travis: make distdir (MarcoFalke)\n- - #9308 `0698639` test: Add CCoinsViewCache Access/Modify/Write tests (ryanofsky)\n- - #9406 `0f921e6` Re-enable a blank v1 Tx JSON test (droark)\n- - #9435 `dbc8a8c` Removed unused variable in test, fixing warning (ryanofsky)\n- - #9436 `dce853e` test: Include tx data in `EXTRA_DIST` (MarcoFalke)\n- - #9525 `02e5308` test: Include tx data in `EXTRA_DIST` (MarcoFalke)\n- - #9498 `054d664` Basic CCheckQueue Benchmarks (JeremyRubin)\n- - #9554 `0b96abc` test: Avoid potential NULL pointer dereference in `addrman_tests.cpp` (practicalswift)\n- - #9628 `f895023` Increase a sync\\_blocks timeout in pruning.py (sdaftuar)\n- - #9638 `a7ea2f8` Actually test assertions in pruning.py (MarcoFalke)\n- - #9647 `e99f0d7` Skip RAII event tests if libevent is built without `event_set_mem_functions` (luke-jr)\n- - #9691 `fc67cd2` Init ECC context for `test_bitcoin_fuzzy` (gmaxwell)\n- - #9712 `d304fef` bench: Fix initialization order in registration (laanwj)\n- - #9707 `b860915` Fix RPC failure testing (jnewbery)\n- - #9269 `43e8150` Align struct COrphan definition (sipa)\n- - #9820 `599c69a` Fix pruning test broken by 2 hour manual prune window (ryanofsky)\n- - #9824 `260c71c` qa: Check return code when stopping nodes (MarcoFalke)\n- - #9875 `50953c2` tests: Fix dangling pwalletMain pointer in wallet tests (laanwj)\n- - #9839 `eddaa6b` [qa] Make import-rescan.py watchonly check reliable (ryanofsky)\n\n### Documentation\n- - #8332 `806b9e7` Clarify witness branches in transaction.h serialization (dcousens)\n- - #8935 `0306978` Documentation: Building on Windows with WSL (pooleja)\n- - #9144 `c98f6b3` Correct waitforblockheight example help text (fanquake)\n- - #9407 `041331e` Added missing colons in when running help command (anditto)\n- - #9378 `870cd2b` Add documentation for CWalletTx::fFromMe member (ryanofsky)\n- - #9297 `0b73807` Various RPC help outputs updated (Mirobit)\n- - #9613 `07421cf` Clarify getbalance help string to explain interaction with bumpfee (ryanofsky)\n- - #9663 `e30d928` Clarify listunspent amount description (instagibbs)\n- - #9396 `d65a13b` Updated listsinceblock rpc documentation (accraze)\n- - #8747 `ce43630` rpc: Fix transaction size comments and RPC help text (jnewbery)\n- - #8058 `bbd9740` Doc: Add issue template (AmirAbrams)\n- - #8567 `85d4e21` Add default port numbers to REST doc (djpnewton)\n- - #8624 `89de153` build: Mention curl (MarcoFalke)\n- - #8786 `9da7366` Mandatory copyright agreement (achow101)\n- - #8823 `7b05af6` Add privacy recommendation when running hidden service (laanwj)\n- - #9433 `caa2f10` Update the Windows build notes (droark)\n- - #8879 `f928050` Rework docs (MarcoFalke)\n- - #8887 `61d191f` Improve GitHub issue template (fanquake)\n- - #8787 `279bbad` Add missing autogen to example builds (AmirAbrams)\n- - #8892 `d270c30` Add build instructions for FreeBSD (laanwj)\n- - #8890 `c71a654` Update Doxygen configuration file (fanquake)\n- - #9207 `fa1f944` Move comments above bash command in build-unix (AmirAbrams)\n- - #9219 `c4522e7` Improve windows build instructions using Linux subsystem (laanwj)\n- - #8954 `932d02a` contrib: Add README for pgp keys (MarcoFalke)\n- - #9093 `2fae5b9` release-process: Mention GitHub release and archived release notes (MarcoFalke)\n- - #8743 `bae178f` Remove old manpages from contrib/debian in favour of doc/man (fanquake)\n- - #9550 `4105cb6` Trim down the XP notice and say more about what we support (gmaxwell)\n- - #9246 `9851498` Developer docs about existing subtrees (gmaxwell)\n- - #9401 `c2ea1e6` Make rpcauth help message clearer, add example in example .conf (instagibbs)\n- - #9022,#9033 Document dropping OS X 10.7 support (fanquake, MarcoFalke)\n- - #8771 `bc9e3ab` contributing: Mention not to open several pulls (luke-jr)\n- - #8852 `7b784cc` Mention Gitian building script in doc (Laudaa) (laanwj)\n- - #8915 `03dd707` Add copyright/patent issues to possible NACK reasons (petertodd)\n- - #8965 `23e03f8` Mention that PPA doesn't support Debian (anduck)\n- - #9115 `bfc7aad` Mention reporting security issues responsibly (paveljanik)\n- - #9840 `08e0690` Update sendfrom RPC help to correct coin selection misconception (ryanofsky)\n- - #9865 `289204f` Change bitcoin address in RPC help message (marijnfs)\n\n### Miscellaneous\n- - #8274 `7a2d402` util: Update tinyformat (laanwj)\n- - #8291 `5cac8b1` util: CopyrightHolders: Check for untranslated substitution (MarcoFalke)\n- - #8557 `44691f3` contrib: Rework verifybinaries (MarcoFalke)\n- - #8621 `e8ed6eb` contrib: python: Don't use shell=True (MarcoFalke)\n- - #8813 `fb24d7e` bitcoind: Daemonize using daemon(3) (laanwj)\n- - #9004 `67728a3` Clarify `listenonion` (unsystemizer)\n- - #8674 `bae81b8` tools for analyzing, updating and adding copyright headers in source files (isle2983)\n- - #8976 `8c6218a` libconsensus: Add input validation of flags (laanwj)\n- - #9112 `46027e8` Avoid ugly exception in log on unknown inv type (laanwj)\n- - #8837 `2108911` Allow bitcoin-tx to parse partial transactions (jnewbery)\n- - #9204 `74ced54` Clarify CreateTransaction error messages (instagibbs)\n- - #9265 `31bcc66` bitcoin-cli: Make error message less confusing (laanwj)\n- - #9303 `72bf1b3` Update comments in ctaes (sipa)\n- - #9417 `c4b7d4f` Do not evaluate hidden LogPrint arguments (sipa)\n- - #9506 `593a00c` RFC: Improve style for if indentation (sipa)\n- - #8883 `d5d4ad8` Add all standard TXO types to bitcoin-tx (jnewbery)\n- - #9531 `23281a4` Release notes for estimation changes  (morcos)\n- - #9486 `f62bc10` Make peer=%d log prints consistent (TheBlueMatt)\n- - #9552 `41cb05c` Add IPv6 support to qos.sh (jamesmacwhite)\n- - #9542 `e9e7993` Docs: Update CONTRIBUTING.md (jnewbery)\n- - #9649 `53ab12d` Remove unused clang format dev script (MarcoFalke)\n- - #9625 `77bd8c4` Increase minimum debug.log size to 10MB after shrink (morcos)\n- - #9070 `7b22e50` Lockedpool fixes (kazcw)\n- - #8779 `7008e28` contrib: Delete spendfrom (MarcoFalke)\n- - #9587,#8793,#9496,#8191,#8109,#8655,#8472,#8677,#8981,#9124  Avoid shadowing of variables (paveljanik)\n- - #9063 `f2a6e82` Use deprecated `MAP_ANON` if `MAP_ANONYMOUS` is not defined (paveljanik)\n- - #9060 `1107653` Fix bloom filter init to isEmpty = true (robmcl4)\n- - #8613 `613bda4` LevelDB 1.19 (sipa)\n- - #9225 `5488514` Fix some benign races (TheBlueMatt)\n- - #8736 `5fa7b07` base58: Improve DecodeBase58 performance (wjx)\n- - #9039 `e81df49` Various serialization simplifcations and optimizations (sipa)\n- - #9010 `a143b88` Split up AppInit2 into multiple phases, daemonize after datadir lock errors (laanwj)\n- - #9230 `c79e52a` Fix some benign races in timestamp logging (TheBlueMatt)\n- - #9183,#9260 Mrs Peacock in The Library with The Candlestick (killed main.{h,cpp}) (TheBlueMatt)\n- - #9236 `7f72568` Fix races for strMiscWarning and `fLargeWork*Found`, make QT runawayException use GetWarnings (gmaxwell)\n- - #9243 `7aa7004` Clean up mapArgs and mapMultiArgs Usage (TheBlueMatt)\n- - #9387 `cfe41d7` RAII of libevent stuff using unique ptrs with deleters (kallewoof)\n- - #9472 `fac0f30` Disentangle progress estimation from checkpoints and update it (sipa)\n- - #9512 `6012967` Fix various things -fsanitize complains about (sipa)\n- - #9373,#9580 Various linearization script issues (droark)\n- - #9674 `dd163f5` Lock debugging: Always enforce strict lock ordering (try or not) (TheBlueMatt)\n- - #8453,#9334  Update to latest libsecp256k1 (laanwj,sipa)\n- - #9656 `7c93952` Check verify-commits on pushes to master (TheBlueMatt)\n- - #9679 `a351162` Access WorkQueue::running only within the cs lock (TheBlueMatt)\n- - #9777 `8dee822` Handle unusual maxsigcachesize gracefully (jnewbery)\n- - #8863,#8807 univalue: Pull subtree (MarcoFalke)\n- - #9798 `e22c067` Fix Issue #9775 (Check returned value of fopen) (kirit93)\n- - #9856 `69832aa` Terminate immediately when allocation fails (theuni)\n\nCredits\n=======\n\nThanks to everyone who directly contributed to this release:\n\n- - accraze\n- - adlawren\n- - Alex Morcos\n- - Alexey Vesnin\n- - Amir Abrams\n- - Anders \u00d8yvind Urke-S\u00e6tre\n- - Anditto Heristyo\n- - Andrew Chow\n- - anduck\n- - Anthony Towns\n- - Brian Deery\n- - BtcDrak\n- - Chris Moore\n- - Chris Stewart\n- - Christian Barcenas\n- - Christian Decker\n- - Cory Fields\n- - crowning-\n- - CryptAxe\n- - CryptoVote\n- - Dagur Valberg Johannsson\n- - Daniel Cousens\n- - Daniel Kraft\n- - Derek Miller\n- - djpnewton\n- - Don Patterson\n- - Doug\n- - Douglas Roark\n- - Ethan Heilman\n- - fsb4000\n- - Gaurav Rana\n- - Geoffrey Tsui\n- - Greg Walker\n- - Gregory Maxwell\n- - Gregory Sanders\n- - Hampus Sj\u00f6berg\n- - isle2983\n- - Ivo van der Sangen\n- - James White\n- - Jameson Lopp\n- - Jeremy Rubin\n- - Jiaxing Wang\n- - jnewbery\n- - John Newbery\n- - Johnson Lau\n- - Jon Lund Steffensen\n- - Jonas Schnelli\n- - jonnynewbs\n- - Jorge Tim\u00f3n\n- - Justin Camarena\n- - Karl-Johan Alm\n- - Kaz Wesley\n- - kirit93\n- - Koki Takahashi\n- - Lauda\n- - leijurv\n- - lizhi\n- - Luke Dashjr\n- - maiiz\n- - MarcoFalke\n- - Marijn Stollenga\n- - Marty Jones\n- - Masahiko Hyuga\n- - Matt Corallo\n- - Matthew King\n- - matthias\n- - Micha\n- - Michael Ford\n- - Michael Rotarius\n- - Mitchell Cash\n- - mrbandrews\n- - mruddy\n- - Nicolas DORIER\n- - nomnombtc\n- - Patrick Strateman\n- - Pavel Jan\u00edk\n- - Pedro Branco\n- - Peter Todd\n- - Pieter Wuille\n- - poole\\_party\n- - practicalswift\n- - R E Broadley\n- - randy-waterhouse\n- - Richard Kiss\n- - Robert McLaughlin\n- - rodasmith\n- - Russell Yanofsky\n- - S. Matthew English\n- - Sev\n- - Spencer Lievens\n- - Stanislas Marion\n- - Steven\n- - Suhas Daftuar\n- - Thomas Snider\n- - UdjinM6\n- - unsystemizer\n- - whythat\n- - Will Binns\n- - Wladimir J. van der Laan\n- - wodry\n- - Zak Wilcox\n\nAs well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAEBCgAGBQJYv78GAAoJEHSBCwEjRsmm0NkH+wQhyIz9GZStFn4ddCF2ZIXO\nxLDR9FP4/BJ2RC1jorpwiJHp+Q/qPu9NpczNW+NBcS4pOCneL8NNj+gb7Tkb4x8T\nCXRr3AHcxH6KlrxCPJKvCbX+TmgcGIFTr1DdtqhmqCjdeg3CTiaIIseN2x7H40AC\n3dMP1YieoFS+CQpYHLGD442h20TpE6129lNaLwsPNqBPe91EwvjRYp+AxnLQaxZ2\nOZRwKMGCB9UH7bpgHPeZhh+lHd7mLtYN7Bbgi2AymCm4perer+apcsA3g5tQSUNi\n2bSVeYv7KUk8bJHioyc3FuM+uB8F0LPygkWM40+a3Bv38BoIGkhjkQOApZJa+o8=\n=xaiU\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.14.0 released",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Wladimir J. van der Laan"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 49793
        }
    },
    {
        "title": "[bitcoin-dev] High consensus fork system for scaling without limits",
        "thread_messages": [
            {
                "author": "Erik Aronesty",
                "date": "2017-03-08T19:42:11",
                "message_text_only": "I woudl like to propose a BIP that works something like this:\n\n1. Allow users to signal readiness by publishing an EB. This EB is an\nabsolute upper bound, and cannot be overridden by miners. Current EB is\n1MB, the status-quo.   Maybe EB can be configured in a config file, not a\nUI, since it's an \"advanced\" feature.\n\n2. Miners can also signal readiness by publishing their own EB in a block.\n\n3. If 95% of blocks within a one month signalling period contain an EB\ngreater than the previous consensus EB, a fork date is triggered at 6\nmonths using the smallest 5th percentile EB published. (Other times can be\nselected, but these are fairly conservative, looking for feedback here).\nMiner signalling is ignored during the waiting period.\n\n4. Block heights used for timing\n\n5. After 6 months, any users which already have the new EB or greater begin\nactually using it to validate transactions. Users use the EB or the latest\n95% consensus triggered value - whichever is less.   This means that the\nportion of users that originally signaled for the increase do not have to\nupgrade their software to participate in the hard fork.\n\n6. Core can (optionally) ship a version with a default EB in-line with\ntheir own perceived consensus.\n\n7. Some sort of versioning system is used to ensure that the two networks\n(old and new) are incompatible... blocks hashed in one cannot be used in\nthe other.\n\nAny users which don't already have the new EB or greater should update\ntheir EB within the 6 month period - or they will be excluded from the\nmajority fork.\n\nIt would be in the best interests of major exchanges and users would to\npublicly announce their EB's.\n\nUsers are free to safely set very high EB levels, based on their current\nhardware and network speeds. These EB levels don't cause those users to\naccept invalid blocks ever. They are safe because block size transitions\nbehave like normal hard forks with high miner consensus (95%).\n\nNo code changes will be needed to fork the network as many times as both\nusers and miners feel the need to do so.  (Bitcoin core is off the hook for\n\"scaling\" issues...forever!)\n\nIf a smaller block size is needed, a reduced size can also be published and\nagreed upon by *both* users and miners using a the same mechanism, but the\nlargest 5th percentile is used.   In other words... the requires broad\nconsensus to deviate from status quo and fork.\n\nAny new node can simply follow these rules to validate all the blocks in a\nchain... even if the sizes changes a lot (at most twice per year).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170308/9f44c3e6/attachment.html>"
            },
            {
                "author": "Andrew Chow",
                "date": "2017-03-08T21:21:15",
                "message_text_only": "Hi Erik,\n\nI have left you some comments below.\n\nSome general questions:\nHow will you deal with excessive sighashing (i.e. massive transactions\nthat include a lot of signature verification)?\nPresumably the sigops limit will increase proportionally?\n\nOn 3/8/2017 2:42 PM, Erik Aronesty via bitcoin-dev wrote:\n> I woudl like to propose a BIP that works something like this:\n>\n> 1. Allow users to signal readiness by publishing an EB. This EB is an\n> absolute upper bound, and cannot be overridden by miners. Current EB\n> is 1MB, the status-quo.   Maybe EB can be configured in a config file,\n> not a UI, since it's an \"advanced\" feature.\nWhat does EB stand for?\n\nWhat is the point of users publishing an EB? Is it for miners to\ndetermine what to set theirs to? If so, what about sybil attacks with\nfake nodes publishing EBs?\n\nHow do users publish an EB? Do they use a transaction? Or is it\nsomething that goes into the User Agent?\n\nHow high can the EB go? What is its maximum?\n> 2. Miners can also signal readiness by publishing their own EB in a block.\n>\n> 3. If 95% of blocks within a one month signalling period contain an EB\n> greater than the previous consensus EB, a fork date is triggered at 6\n> months using the smallest 5th percentile EB published. (Other times\n> can be selected, but these are fairly conservative, looking for\n> feedback here).    Miner signalling is ignored during the waiting period.\n>\n> 4. Block heights used for timing\n>\n> 5. After 6 months, any users which already have the new EB or greater\n> begin actually using it to validate transactions. Users use the EB or\n> the latest 95% consensus triggered value - whichever is less.   This\n> means that the portion of users that originally signaled for the\n> increase do not have to upgrade their software to participate in the\n> hard fork.\nSo anyone who does not change their EB are forked off of the network? If\nthe EB is an \"advanced feature\", then most users are going to be leaving\nit at the default shipped with the software. That means that they will\nthen be forked off of the network when they don't change the EB because\nit is an \"advanced feature\" that is more difficult to access.\n>\n> 6. Core can (optionally) ship a version with a default EB in-line with\n> their own perceived consensus.  \n>\n> 7. Some sort of versioning system is used to ensure that the two\n> networks (old and new) are incompatible... blocks hashed in one cannot\n> be used in the other.\nI think this would require a soft fork beforehand in order to implement\nsuch a system.\n>\n> Any users which don't already have the new EB or greater should update\n> their EB within the 6 month period - or they will be excluded from the\n> majority fork.\n>\n> It would be in the best interests of major exchanges and users would\n> to publicly announce their EB's.\nWhy?\n>\n> Users are free to safely set very high EB levels, based on their\n> current hardware and network speeds. These EB levels don't cause those\n> users to accept invalid blocks ever. They are safe because block size\n> transitions behave like normal hard forks with high miner consensus (95%).\n>\n> No code changes will be needed to fork the network as many times as\n> both users and miners feel the need to do so.  (Bitcoin core is off\n> the hook for \"scaling\" issues...forever!)\n\"Scaling\" includes a lot more than just the block size. There is much\nmore to scaling than just increasing the block size.\n>\n> If a smaller block size is needed, a reduced size can also be\n> published and agreed upon by *both* users and miners using a the same\n> mechanism, but the largest 5th percentile is used.   In other words...\n> the requires broad consensus to deviate from status quo and fork.\n>\n> Any new node can simply follow these rules to validate all the blocks\n> in a chain... even if the sizes changes a lot (at most twice per year).\nWhat if the EB of a new node is set to be smaller than the current block\nsize?\n>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170308/024c0a8e/attachment-0001.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2017-03-09T15:29:07",
                "message_text_only": "> 1. Allow users to signal readiness by publishing an EB. This EB is an\nabsolute upper bound, and cannot be overridden by miners. Current EB is\n1MB, the status-quo.   Maybe EB can be configured in a config file, not a\nUI, since it's an \"advanced\" feature.\n>\n> What does EB stand for?\n\nExcessive block size.\n\n> What is the point of users publishing an EB? Is it for miners to\ndetermine what to set theirs to? If so, what about sybil attacks with fake\nnodes publishing EBs?\n\nYou can't trivially fake coinbase's full node, or gemini's, etc.   Large\nusers would also be encouraged to report their EB's publically as well.\n\n> How do users publish an EB? Do they use a transaction? Or is it something\nthat goes into the User Agent?\n\nSame way a version string is published by a node.   Maybe *in* the version\nstring.\n\n> How high can the EB go? What is its maximum?\n\nMaybe 4MB for now?   Seems fine.   Trivial to change it later, since it's\nnot a fork to do so.\n\n> 6. Core can (optionally) ship a version with a default EB in-line with\ntheir own perceived consensus.\n\nI would say that Core /should/ ship new versions with new default EB's\nin-line with both miner and the economic majority after a 95% consensus\nfork.\n\n> 7. Some sort of versioning system is used to ensure that the two networks\n(old and new) are incompatible... blocks hashed in one cannot be used in\nthe other.\n>\n> I think this would require a soft fork beforehand in order to implement\nsuch a system.\n\nI thought versionbits could handle this?   Can't they?  ALP pointed out\nthat it was important for a fork to be fully incompatible.\n\n> It would be in the best interests of major exchanges and users would to\npublicly announce their EB's.\n>\n> Why?\n\nSo miners can have a more reliable signal to go on.   No reasonable miner\nwould start mining signal for a fork unless they were confident that they\nare doing so in-line with users and exchanges.\n\n> \"Scaling\" includes a lot more than just the block size. There is much\nmore to scaling than just increasing the block size.\n\nYes, which is why I used air-quotes.   The primary idea is to remove a\npolitical issue from affecting core developers.   There is a perception\namong some people that \"if only core would....\".   Plus, fees are\n*inherently* political because it is a barrier for low-net-worth\nindividuals transacting using this technology.   Even if lightning worked\nperfectly, how can a small business in Africa afford to set up a full node\nand being to participate as a hub if fees are $50?   OMG blame core.\n\nMiners and users should be free to wrangle each other over fees any time\nthey want without the involvement of developers.   I suspect the status quo\nwould be even *more* stable in that scenario... not less.\n\n> What if the EB of a new node is set to be smaller than the current block\nsize?\n\nThen it is only used for signal unless a fork occurs that results in a\nreduction <= EB... in which case the EB becomes a hard upper bound, just\nlike any other.   When an EB is set by a user a block-height needs to be\nrecorded along with it, so it can be handled correctly.   EB set to <\nactive seems to me to be a special case.   Likewise the percentile shoudl\nbe the upper 5% in the case of EB < active.\n\nThis essentially partitions signalling into \"< active\" and \"> active\".\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170309/d5b982bc/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "High consensus fork system for scaling without limits",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Andrew Chow",
                "Erik Aronesty"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 10472
        }
    },
    {
        "title": "[bitcoin-dev] Solution for blockchain congestion and determination of block size by bitcoin network/protocol itself.",
        "thread_messages": [
            {
                "author": "ashish khandekar",
                "date": "2017-03-12T09:51:12",
                "message_text_only": "BLOCKCHAIN CONGESTION \u2013 A SOLUTION AND PRE-EMPTIVE MEASURES FOR THE FUTURE\n\n\n\nThis document is an idea for helping the bitcoin block chain get\nuncongested, provide enough space for transactions to get included in\nblocks easily, and give the bitcoin network the power to defend itself\nagainst any stress tests or spam attacks in the future.\n\n\n\nThe current maximum size of a block in the bitcoin protocol is 1mb.This has\ncreated a \u201cfee market\u201d allowing those who can send high transaction fees\nonly to use bitcoin easily, making those who use even a slight lower fee to\nwait for transactions to get confirmed by miners, sometimes it take hours\nbut sometimes it can scale up to a few days, this creates a difficulty for\nmerchants who use bitcoin to operate with ease, new people who are adapting\nto bitcoin, and those unaware of the developments in the bitcoin community\nconfused in why transactions aren\u2019t getting confirmed as they used to.\n\n\n\nBitcoin is a highly versatile. From its price being directly influenced by\nits demand and supply to the amount of work done to keep the network safe\na.k.a. mining. Over the years both have changed dramatically but one thing\nwhich has stayed constant is the size of the block, which is 1mb. The limit\nof 1mb creates only a finite number of transactions to get confirmed even\nif used to the brim, leaving out other transactions and creating a backlog\nof transaction to be carried forward indefinitely.\n\n\n\nBitcoin\u2019s verification system, mining, has a dynamic difficulty calculation\nrate, which means every 2016 blocks or 2 weeks the difficulty changes\nmaking mining little bit easy or a bit difficult, but keeping the same\nmaximum output of 1mb per block, so this means every 2 weeks on 2016mb\nworth of transactions can get verified assuming all blocks are filled to\nthe brim, any amount of excess transactions would not get verified due to\nlack of space and would get carried over to the next cycle, over a period\nof time this becomes a massive amount and has led to the current blockchain\ncongestion.\n\n\n\nA unique solution is to let the bitcoin network change the maximum block\nsize as per the prevailing network conditions, this solution borrows some\naspects of both the demand and supply factor and dynamic change of network\ndifficulty (amount of work done to verify transactions).\n\n\n\nThis would be achieved by tracking the volume of the total size of\ntransactions done between 2 consecutive network difficulty changes and\ndividing it by 2016, the number of blocks mined between 2 consecutive\nnetwork difficulty changes. The resulting answer would be rounded up to the\nnearest kb and then compared to the previous block size, the higher between\nthe two would be taken as the new maximum block size. The extra space would\nbe helpful if a malicious attacker tries to create a lot of small dust\ntransactions and flood the network. Let us take a look at a  example of how\nit would affect the bitcoin network in a real life scenario.\n\n\n\nDynamic block size calculation (B) = Total size of transactions from\nprevious network difficulty change(ST) / 2016\n\nWe compare this with the current block size and the higher is accepted as\nnew block size.\n\n\n\nFor example purposes the block numbers have been changed for easy\nunderstanding.\n\nIf during cycle 1, block number 1 to block number 2016 the total size of\ntransactions is 1608mb,recalculating it with the dynamic block size\nalgorithm would give the following result:\n\nDynamic block size calculation (B) = ST/2016\n\n1608/2016=0.79761905       which is 797kb\n\nWe compare this with the current block size which is 1mb (current block\nsize in real life) and the higher of the two becomes the block size for the\nnext cycle.\n\nDuring cycle 2, block number 2017 to block number 4032 the total size of\ntransactions is 2260mb, recalculating it with the dynamic block size\nalgorithm would give the following result:\n\nDynamic block size calculation (B) = ST/2016\n\n2260/2016=1.12103175       which is 1.2mb\n\nWe compare this with the current block size which is 1mb and the higher of\nthe two becomes the block size for the next cycle, in this case 1.2 mb\nblocks would be new block size.\n\n\n\nThe above examples can be repeated indefinitely allowing the network to\nadjust the block size automatically. The dynamic block size is to be\ncalculated at the same time as the network difficulty is changed.\n\nTo avoid orphaning of blocks and very small blocks a minimum block size\nshould also be taken into effect, the minimum size of the block should be\nin the range of 30-60% of the maximum block size; this measure would also\nstop the propagation of very small blocks which aren\u2019t verifying\ntransactions and helping the network grow.\n\n\n\nTHE END\n\nAny questions ?\n\nMail me at: contashk18 at gmail.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170312/8b5ab2cb/attachment.html>"
            },
            {
                "author": "David Vorick",
                "date": "2017-03-12T14:44:20",
                "message_text_only": "What, in your appraisal, is the purpose of the block size limit? I think we\nwill be more able to have a productive discussion around this proposal if\nwe clear that up first.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170312/cb015005/attachment.html>"
            },
            {
                "author": "Dionysis Zindros",
                "date": "2017-03-12T14:52:29",
                "message_text_only": "Are you aware of Washington Sanchez's BIP 107? It is a proposal\nsimilar to yours:\n\nhttps://github.com/bitcoin/bips/blob/master/bip-0107.mediawiki\n\nOn Sun, Mar 12, 2017 at 4:44 PM, David Vorick via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> What, in your appraisal, is the purpose of the block size limit? I think we\n> will be more able to have a productive discussion around this proposal if we\n> clear that up first.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Bram Cohen",
                "date": "2017-03-12T18:00:10",
                "message_text_only": "Shouldn't there be a FAQ about this? All the blocksize increase proposals\ngoing back to the Bitcoin Classic have the same problems and having\nrepeated proposals which move the details around a bit doesn't add anything\nto the discussion.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170312/1882d23d/attachment.html>"
            },
            {
                "author": "ashish khandekar",
                "date": "2017-03-13T13:08:24",
                "message_text_only": "Should a BIP be submitted or are there any suggestions for the proposal ?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170313/b789def0/attachment.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2017-03-14T23:20:48",
                "message_text_only": "- no quadratic hashing solution\n- no way to prevent spamming the network to blow up block sizes\n- no mention of release schedule/consensus levels, etc.   should be\nmentioned\n- this is similar to other BIP already in place... see BIP107\n\n\nOn Mon, Mar 13, 2017 at 9:08 AM, ashish khandekar via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Should a BIP be submitted or are there any suggestions for the proposal ?\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170314/29efdb21/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Solution for blockchain congestion and determination of block size by bitcoin network/protocol itself.",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "David Vorick",
                "ashish khandekar",
                "Erik Aronesty",
                "Bram Cohen",
                "Dionysis Zindros"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 7402
        }
    },
    {
        "title": "[bitcoin-dev] Flag day activation of segwit",
        "thread_messages": [
            {
                "author": "shaolinfry",
                "date": "2017-03-12T15:50:27",
                "message_text_only": "I recently posted about so called \"user activated soft forks\" and received a lot of feedback. Much of this was how such methodologies could be applied to segwit which appears to have fallen under the miner veto category I explained in my original proposal, where there is apparently a lot of support for the proposal from the economy, but a few mining pools are vetoing the activation.\n\nIt turns out Bitcoin already used flag day activation for P2SH[[1](https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283)], a soft fork which is remarkably similar to segwit. The disadvantage of a UASF for segwit is there is an existing deployment. A UASF would require another wide upgrade cycle (from what I can see, around 80% of existing nodes have upgraded from pre-witness, to NODE_WITNESS capability[[2](http://luke.dashjr.org/programs/bitcoin/files/charts/services.html)][[3](https://www.reddit.com/r/Bitcoin/comments/5yyqt1/evidence_of_widespread_segwit_support_near50_of/)]. While absolute node count is meaningless, the uprgrade trend from version to version seems significant.\n\nAlso it is quite clear a substantial portion of the ecosystem industry has put in time and resources into segwit adoption, in the form of upgrading wallet code, updating libraries and various other integration work that requires significant time and money. Further more, others have built systems that rely on segwit, having put significant engineering resources into developing systems that require segwit - such as several lightning network system. This is much more significant social proof than running a node.\n\nThe delayed activation of segwit is also holding back a raft protocol of innovations such as MAST, Covenants, Schnorr signature schemes and signature aggregation and other script innovations of which, much of the development work is already done.\n\nA better option would be to release code that causes the existing segwit deployment to activate without requiring a completely new deployment nor subject to hash power veto. This could be achieved if the economic majority agree to run code that rejects non-signalling segwit blocks. Then from the perspective of all existing witness nodes, miners trigger the BIP9 activation. Such a rule could come into effect 4-6 weeks before the BIP9 timeout. If a large part of the economic majority publicly say that they will adopt this new client, miners will have to signal bip9 segwit activation in order for their blocks to be valid.\n\nI have drafted a BIP proposal so the community may discuss https://gist.github.com/shaolinfry/743157b0b1ee14e1ddc95031f1057e4c (full text below).\n\nReferences:\n[1]: https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\n[2]: http://luke.dashjr.org/programs/bitcoin/files/charts/services.html\n[3]: https://www.reddit.com/r/Bitcoin/comments/5yyqt1/evidence_of_widespread_segwit_support_near50_of/\n\nProposal text:\n\n<pre> BIP: bip-segwit-flagday Title: Flag day activation for segwit deployment Author: Shaolin Fry <shaolinfry at protonmail.ch> Comments-Summary: No comments yet. Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???? Status: Draft Type: Informational Created: 2017-03-12 License: BSD-3-Clause CC0-1.0 </pre> ==Abstract== This document specifies a BIP16 like soft fork flag day activation of the segregated witness BIP9 deployment known as \"segwit\". ==Definitions== \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment using bit 1, between November 15th 2016 and November 15th 2017 to activate BIP141, BIP143 and BIP147. ==Motivation== Cause the mandatory activation of the existing segwit deployment before the end of midnight November 15th 2017. ==Specification== All times are specified according to median past time. This BIP will be activate between midnight October 1st 2017 (epoch time 1538352000) and midnight November 15th 2017 (epoch time 1510704000) if the existing segwit deployment is not activated before epoch time 1538352000. This BIP will cease to be active when the existing segwit deployment activates. While this BIP is active, all blocks must set the nVersion header top 3 bits to 001 together with bit field (1<<1) (according to the existing segwit deployment). Blocks that do not signal as required will be rejected. === Reference implementation === <pre> // mandatory segwit activation between Oct 1st 2017 and Nov 15th 2017 inclusive if (pindex->GetMedianTimePast() >= 1538352000 && pindex->GetMedianTimePast() <= 1510704000 && !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) { if (!((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) && (pindex->nVersion & VersionBitsMask(params, Consensus::DEPLOYMENT_SEGWIT)) != 0) { return state.DoS(2, error(\"ConnectBlock(): relayed block must signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\"); } } </pre> ==Backwards Compatibility== This deployment is compatible with the existing \"segwit\" bit 1 deployment scheduled between midnight November 15th, 2016 and midnight November 15th, 2017. ==Rationale== Historically, the P2SH soft fork (BIP16) was activated using a predetermined flag day where nodes began enforcing the new rules. P2SH was successfully activated with relatively few issues By orphaning non-signalling blocks during the last month of the BIP9 bit 1 \"segwit\" deployment, this BIP can cause the existing \"segwit\" deployment to activate without needing to release a new deployment. ==References== [https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283 P2SH flag day activation]. ==Copyright== This document is placed in the public domain.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170312/6e8cc65a/attachment-0001.html>"
            },
            {
                "author": "David Vorick",
                "date": "2017-03-12T17:20:15",
                "message_text_only": "It has taken almost 6 months for SegWit adoption to get to where it is\ntoday. I don't think it will take that long to reach similar adoption for\nUASF SegWit, but conservatively we want to give it at least that much time.\n\nIt's really important to stress here that a UASF will split and become the\nminority chain if a majority of the transaction accepting nodes on the\nnetwork do not agree to strictly follow the UASF and outright reject blocks\nthat do not signal for SegWit at the designated date.\n\nBefore setting a flag day, I think we should get written cooperation\nagreements from the largest economic players in Bitcoin. This would include:\n\nBitfinex\nBitflyer\nBitGo\nBitPay\nBitstamp\nBlockchain.info\nBlockcypher\nCoinbase\nHuobi\nKraken\nGemeni\nOkCoin\nPoloniex\n\n(feel free to discuss this list)\n\n100% cooperation is not necessary, but close to 100% cooperation is\nstrongly desired. It should be noted that their cooperation is only\nrequired because they are sufficiently powerful to threaten the success of\na UASF, particularly because many of these entities hold users bitcoins.\n\nOnce a convincing majority is on-board, I suggest we release a UASF patch\nthat activates a full year after release. This is because a UASF is a big\ngamble that requires a large majority of the economy has upgraded.\n\nThough that is a very long time, SegWit can always be activated early with\nminer cooperation.\n\n------\n\nAs an extra note, if the UASF triggers with majority economy support and\nthe miners resist, a minority block reward chain may be the longest chain\nfor a while. However, when the majority block reward chain does catch up,\nthe minority reward chain will be entirely obliterated, eliminating all\nblock rewards, all transaction history, and making a ton of money vanish\nall at once.\n\nThis makes it very dangerous for an exchange, payment processor, online\nwallet, or miner to oppose the UASF if there is significant momentum behind\nit. This gives the UASF a powerful snowball effect once a few major parties\n(or the majority of tiny full nodes) have decided to commit to the UASF.\n\nOn the other hand, failure means a permanent coin split, so it is still\nnecessary to exercise caution that exceeds the caution of a normal soft\nfork.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170312/f12ebb1f/attachment.html>"
            },
            {
                "author": "shaolinfry",
                "date": "2017-03-12T21:04:11",
                "message_text_only": "Before setting a flag day, I think we should get written cooperation agreements from the largest economic players in Bitcoin. This would include:\n\nThere isn't a flag day to set. If the major economic organs like exchanges run the BIP, non-signalling miners simply wont get paid (starting October 1st) and their blocks will be rejected. Miners will have the choice to signal, or find something else profitable to mine. In turn, this will trigger the existing segwit deployment for everyone who has already upgraded to segwit compatible node software (currently Bitcoin Core 0.13.1, 0.13.2, 0.14.0, Bitcoin Knots 0.13.1+, and bcoin) regardless of whether they run this BIP or not.\n\nBut yes, it goes without saying that this BIP would need to have buy-in from major economic organs, especially fiat egress points, before being deployed. Failing that, a second deployment of segwit with a flag day, or preferably using the bip-uaversionbits-strong BIP9/flagday hybrid would be required.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170312/26c0106f/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2017-03-13T03:01:40",
                "message_text_only": "On Sunday, March 12, 2017 3:50:27 PM shaolinfry via bitcoin-dev wrote:\n> // mandatory segwit activation between Oct 1st 2017 and Nov 15th 2017\n> inclusive if (pindex->GetMedianTimePast() >= 1538352000 &&\n> pindex->GetMedianTimePast() <= 1510704000 &&\n> !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) {\n>     if (!((pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n>     VERSIONBITS_TOP_BITS) && (pindex->nVersion & VersionBitsMask(params,\n>     Consensus::DEPLOYMENT_SEGWIT)) != 0) {\n>         return state.DoS(2, error(\"ConnectBlock(): relayed block must\n>         signal for segwit, please upgrade\"), REJECT_INVALID,\n>         \"bad-no-segwit\");\n>     }\n> }\n\nI don't think this is actually BIP 9 compatible. Once activated, the bit loses \nits meaning and should not be set. So you need to check that it hasn't locked-\nin already...\n\nAlso, IMO this should tolerate as many as 5% minus one non-signalling blocks.\n\nDisclaimer: This are technical suggestions, and do not imply endorsement of \nthe idea.\n\nLuke"
            },
            {
                "author": "shaolinfry",
                "date": "2017-03-13T10:36:30",
                "message_text_only": "From: luke at dashjr.org\nOn Sunday, March 12, 2017 3:50:27 PM shaolinfry via bitcoin-dev wrote:\n> // mandatory segwit activation between Oct 1st 2017 and Nov 15th 2017\n> inclusive if (pindex->GetMedianTimePast() >= 1538352000 &&\n> pindex->GetMedianTimePast() <= 1510704000 &&\n> !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) {\n> if (!((pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n> VERSIONBITS_TOP_BITS) && (pindex->nVersion & VersionBitsMask(params,\n> Consensus::DEPLOYMENT_SEGWIT)) != 0) {\n> return state.DoS(2, error(\"ConnectBlock(): relayed block must\n> signal for segwit, please upgrade\"), REJECT_INVALID,\n> \"bad-no-segwit\");\n> }\n> }\n\nI don't think this is actually BIP 9 compatible. Once activated, the bit loses\nits meaning and should not be set. So you need to check that it hasn't locked-\nin already...\n\nI believe that is handled.\n\ntime >= 1506816000 && time <= 1510704000 && !IsWitnessEnabled()\n\nSignalling is only required from October 1st until the BIP9 timeout, or, until segwit is activated. The bit becomes free after activation/timeout as per BIP9. Also, the default behaviour of BIP9 in Bitcoin Core is to signal through the LOCKED_IN period - it would be trivial to add a condition to not require mandatory signalling during LOCKED_IN but since miners signal by default during this period, I figured I would leave it.\n\nI thought about 5% tolerance. but I don't think it makes sense since miners will already have plenty of warning this is coming up and the intent of the mandatory signalling period is quite clear. It also seems a bit weird to say \"it's mandatory but not for 5%\". If miners are required to signal, they need to signal. It also adds unnecessary complexity to an otherwise simple patch.\n\nThat said, I have no strong feelings either way on both counts, but I chose to present the simplest option first.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170313/236ddda6/attachment-0001.html>"
            },
            {
                "author": "Nick ODell",
                "date": "2017-03-13T22:18:15",
                "message_text_only": ">time >= 1506816000 && time <= 1510704000 && !IsWitnessEnabled()\nThis has a different start time from the first post.\n>if (pindex->GetMedianTimePast() >= 1538352000 &&\npindex->GetMedianTimePast() <= 1510704000 ...\n\nThanks,\n--Nick\n\nOn Mon, Mar 13, 2017 at 4:36 AM, shaolinfry via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> From: luke at dashjr.org\n> On Sunday, March 12, 2017 3:50:27 PM shaolinfry via bitcoin-dev wrote:\n> > // mandatory segwit activation between Oct 1st 2017 and Nov 15th 2017\n> > inclusive if (pindex->GetMedianTimePast() >= 1538352000 &&\n> > pindex->GetMedianTimePast() <= 1510704000 &&\n> > !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) {\n> > if (!((pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n> > VERSIONBITS_TOP_BITS) && (pindex->nVersion & VersionBitsMask(params,\n> > Consensus::DEPLOYMENT_SEGWIT)) != 0) {\n> > return state.DoS(2, error(\"ConnectBlock(): relayed block must\n> > signal for segwit, please upgrade\"), REJECT_INVALID,\n> > \"bad-no-segwit\");\n> > }\n> > }\n>\n> I don't think this is actually BIP 9 compatible. Once activated, the bit\n> loses\n> its meaning and should not be set. So you need to check that it hasn't\n> locked-\n> in already...\n>\n>\n> I believe that is handled.\n>\n> time >= 1506816000 && time <= 1510704000 && !IsWitnessEnabled()\n>\n> Signalling is only required from October 1st until the BIP9 timeout, or,\n> until segwit is activated. The bit becomes free after activation/timeout as\n> per BIP9. Also, the default behaviour of BIP9 in Bitcoin Core is to signal\n> through the LOCKED_IN period - it would be trivial to add a condition to\n> not require mandatory signalling during LOCKED_IN but since miners signal\n> by default during this period, I figured I would leave it.\n>\n> I thought about 5% tolerance. but I don't think it makes sense since\n> miners will already have plenty of warning this is coming up and the intent\n> of the mandatory signalling period is quite clear. It also seems a bit\n> weird to say \"it's mandatory but not for 5%\". If miners are required to\n> signal, they need to signal. It also adds unnecessary complexity to an\n> otherwise simple patch.\n>\n> That said, I have no strong feelings either way on both counts, but I\n> chose to present the simplest option first.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170313/1488d886/attachment.html>"
            },
            {
                "author": "praxeology_guy",
                "date": "2017-03-26T11:08:08",
                "message_text_only": "\"Activation of segwit is defined by BIP9. After 15 Nov 2016 and before 15 Nov 2017 UTC, if in a full retarget cycle at least 1916 out of 2016 blocks is signaling readiness, segwit will be activated in the retarget cycle after the next one\"\n\nJust change BIP9 and the code to say \"if in a full retarget cycle at least 1 out of 2016 blocks\" and call it done. Or something very similar to this that effectively does the exact same thing. :) Wasting too much time on this. 15 Nov 2017 is plenty of time to be ready for SegWit, and if a participant is not ready by then they are either unreasonably lazy, a manipulator, or manipluted, and we don't need them.\n\nIf non-upgrading miners refuse to build on segwit blocks, or build on malicious invalid segwit blocks, then so be it. We fork. We have spent enough time trying to convince people who don't think for themselves... if they are still manipulated now then its time for us to give up on helping them see the light and instead let them learn the hard way.\n\nCheers,\nPraxeology Guy\n\n-------- Original Message --------\nSubject: Re: [bitcoin-dev] Flag day activation of segwit\nLocal Time: March 13, 2017 5:18 PM\nUTC Time: March 13, 2017 10:18 PM\nFrom: bitcoin-dev at lists.linuxfoundation.org\nTo: shaolinfry <shaolinfry at protonmail.ch>, Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\n\n>time >= 1506816000 && time <= 1510704000 && !IsWitnessEnabled()\nThis has a different start time from the first post.\n>if (pindex->GetMedianTimePast() >= 1538352000 && pindex->GetMedianTimePast() <= 1510704000 ...\n\nThanks,\n--Nick\n\nOn Mon, Mar 13, 2017 at 4:36 AM, shaolinfry via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\nFrom: luke at dashjr.org\nOn Sunday, March 12, 2017 3:50:27 PM shaolinfry via bitcoin-dev wrote:\n> // mandatory segwit activation between Oct 1st 2017 and Nov 15th 2017\n> inclusive if (pindex->GetMedianTimePast() >= 1538352000 &&\n> pindex->GetMedianTimePast() <= 1510704000 &&\n> !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) {\n> if (!((pindex->nVersion & VERSIONBITS_TOP_MASK) ==\n> VERSIONBITS_TOP_BITS) && (pindex->nVersion & VersionBitsMask(params,\n> Consensus::DEPLOYMENT_SEGWIT)) != 0) {\n> return state.DoS(2, error(\"ConnectBlock(): relayed block must\n> signal for segwit, please upgrade\"), REJECT_INVALID,\n> \"bad-no-segwit\");\n> }\n> }\n\nI don't think this is actually BIP 9 compatible. Once activated, the bit loses\nits meaning and should not be set. So you need to check that it hasn't locked-\nin already...\n\nI believe that is handled.\n\ntime >= 1506816000 && time <= 1510704000 && !IsWitnessEnabled()\n\nSignalling is only required from October 1st until the BIP9 timeout, or, until segwit is activated. The bit becomes free after activation/timeout as per BIP9. Also, the default behaviour of BIP9 in Bitcoin Core is to signal through the LOCKED_IN period - it would be trivial to add a condition to not require mandatory signalling during LOCKED_IN but since miners signal by default during this period, I figured I would leave it.\n\nI thought about 5% tolerance. but I don't think it makes sense since miners will already have plenty of warning this is coming up and the intent of the mandatory signalling period is quite clear. It also seems a bit weird to say \"it's mandatory but not for 5%\". If miners are required to signal, they need to signal. It also adds unnecessary complexity to an otherwise simple patch.\n\nThat said, I have no strong feelings either way on both counts, but I chose to present the simplest option first.\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170326/44bc5edb/attachment.html>"
            },
            {
                "author": "Nick ODell",
                "date": "2017-03-13T04:59:10",
                "message_text_only": "The problem with modifying Bitcoin to work around community norms is that\nit's a two-way street. Other people can do it too.\n\nLet me propose a counter-fork, or a \"Double UASF.\" This is also a BIP9\nfork, and it uses, say, bit 2. starttime is 1489449600, and the end time is\n1506812400. It enforces every rule that UASF enforces, plus one additional\nrule. If 60% of blocks in any retargeting period signal for Double UASF,\nany descendant block that creates or spends a segregated witness output is\ninvalid.\n\nDouble UASF signaling never coincides with UASF signaling, because the\nsignaling periods don't overlap. Full nodes happily validate the chain,\nbecause Double UASF doesn't break any rules; it just adds new ones. Miners\nwho adopt Double UASF don't need to understand segwit, because all segwit\ntransactions are banned. Miners don't need to commit to a wtxid structure,\neither. Per BIP 141, \"If all transactions in a block do not have witness\ndata, the commitment is optional.\" Segwit is activated, but useless. Miners\nwho *do* adopt segwit will lose money, as their blocks are orphaned.\n\nThanks,\n--Nick\n\nOn Sun, Mar 12, 2017 at 9:50 AM, shaolinfry via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I recently posted about so called \"user activated soft forks\" and received\n> a lot of feedback. Much of this was how such methodologies could be applied\n> to segwit which appears to have fallen under the miner veto category I\n> explained in my original proposal, where there is apparently a lot of\n> support for the proposal from the economy, but a few mining pools are\n> vetoing the activation.\n>\n> It turns out Bitcoin already used flag day activation for P2SH[1\n> <https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283>],\n> a soft fork which is remarkably similar to segwit. The disadvantage of a\n> UASF for segwit is there is an existing deployment. A UASF would require\n> another wide upgrade cycle (from what I can see, around 80% of existing\n> nodes have upgraded from pre-witness, to NODE_WITNESS capability[2\n> <http://luke.dashjr.org/programs/bitcoin/files/charts/services.html>][3\n> <https://www.reddit.com/r/Bitcoin/comments/5yyqt1/evidence_of_widespread_segwit_support_near50_of/>].\n> While absolute node count is meaningless, the uprgrade trend from version\n> to version seems significant.\n>\n> Also it is quite clear a substantial portion of the ecosystem industry has\n> put in time and resources into segwit adoption, in the form of upgrading\n> wallet code, updating libraries and various other integration work that\n> requires significant time and money. Further more, others have built\n> systems that rely on segwit, having put significant engineering resources\n> into developing systems that require segwit - such as several lightning\n> network system. This is much more significant social proof than running a\n> node.\n>\n> The delayed activation of segwit is also holding back a raft protocol of\n> innovations such as MAST, Covenants, Schnorr signature schemes and\n> signature aggregation and other script innovations of which, much of the\n> development work is already done.\n>\n> A better option would be to release code that causes the existing segwit\n> deployment to activate without requiring a completely new deployment nor\n> subject to hash power veto. This could be achieved if the economic majority\n> agree to run code that rejects non-signalling segwit blocks. Then from the\n> perspective of all existing witness nodes, miners trigger the BIP9\n> activation. Such a rule could come into effect 4-6 weeks before the BIP9\n> timeout. If a large part of the economic majority publicly say that they\n> will adopt this new client, miners will have to signal bip9 segwit\n> activation in order for their blocks to be valid.\n>\n> I have drafted a BIP proposal so the community may discuss\n> https://gist.github.com/shaolinfry/743157b0b1ee14e1ddc95031f1057e4c (full\n> text below).\n>\n> References:\n> [1]: https://github.com/bitcoin/bitcoin/blob/v0.6.0/\n> src/main.cpp#L1281-L1283\n> [2]: http://luke.dashjr.org/programs/bitcoin/files/charts/services.html\n> [3]: https://www.reddit.com/r/Bitcoin/comments/5yyqt1/\n> evidence_of_widespread_segwit_support_near50_of/\n>\n> Proposal text:\n>\n> <pre>\n>   BIP: bip-segwit-flagday\n>   Title: Flag day activation for segwit deployment\n>   Author: Shaolin Fry <shaolinfry at protonmail.ch>\n>   Comments-Summary: No comments yet.\n>   Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-????\n>   Status: Draft\n>   Type: Informational\n>   Created: 2017-03-12\n>   License: BSD-3-Clause\n>            CC0-1.0\n> </pre>\n>\n> ==Abstract==\n>\n> This document specifies a BIP16 like soft fork flag day activation of the segregated witness BIP9 deployment known as \"segwit\".\n>\n> ==Definitions==\n>\n> \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment using bit 1, between November 15th 2016 and November 15th 2017 to activate BIP141, BIP143 and BIP147.\n>\n> ==Motivation==\n>\n> Cause the mandatory activation of the existing segwit deployment before the end of midnight November 15th 2017.\n>\n> ==Specification==\n>\n> All times are specified according to median past time.\n>\n> This BIP will be activate between midnight October 1st 2017 (epoch time 1538352000) and midnight November 15th 2017 (epoch time 1510704000) if the existing segwit deployment is not activated before epoch time 1538352000. This BIP will cease to be active when the existing segwit deployment activates.\n>\n> While this BIP is active, all blocks must set the nVersion header top 3 bits to 001 together with bit field (1<<1) (according to the existing segwit deployment). Blocks that do not signal as required will be rejected.\n>\n> === Reference implementation ===\n>\n> <pre>\n> // mandatory segwit activation between Oct 1st 2017 and Nov 15th 2017 inclusive\n> if (pindex->GetMedianTimePast() >= 1538352000 && pindex->GetMedianTimePast() <= 1510704000 && !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) {\n>     if (!((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) && (pindex->nVersion & VersionBitsMask(params, Consensus::DEPLOYMENT_SEGWIT)) != 0) {\n>         return state.DoS(2, error(\"ConnectBlock(): relayed block must signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>     }\n> }\n> </pre>\n>\n> ==Backwards Compatibility==\n>\n> This deployment is compatible with the existing \"segwit\" bit 1 deployment scheduled between midnight November 15th, 2016 and midnight November 15th, 2017.\n>\n> ==Rationale==\n>\n> Historically, the P2SH soft fork (BIP16) was activated using a predetermined flag day where nodes began enforcing the new rules. P2SH was successfully activated with relatively few issues\n>\n> By orphaning non-signalling blocks during the last month of the BIP9 bit 1 \"segwit\" deployment, this BIP can cause the existing \"segwit\" deployment to activate without needing to release a new deployment.\n>\n> ==References==\n>\n> [https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283 P2SH flag day activation].\n>\n> ==Copyright==\n>\n> This document is placed in the public domain.\n>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170312/0838954e/attachment-0001.html>"
            },
            {
                "author": "David Vorick",
                "date": "2017-03-13T10:35:38",
                "message_text_only": "That's simply a 51% attack choosing to censor transactions. We could do\nthat today, ban all transactions that aren't approved by the PBoC.\n\nYou respond to that with a PoW hardfork, or by finding some way to prop up\n/ subsidize non-censorship miners.\n\nOn Mar 13, 2017 5:59 AM, \"Nick ODell via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> The problem with modifying Bitcoin to work around community norms is that\n> it's a two-way street. Other people can do it too.\n>\n> Let me propose a counter-fork, or a \"Double UASF.\" This is also a BIP9\n> fork, and it uses, say, bit 2. starttime is 1489449600, and the end time is\n> 1506812400. It enforces every rule that UASF enforces, plus one additional\n> rule. If 60% of blocks in any retargeting period signal for Double UASF,\n> any descendant block that creates or spends a segregated witness output is\n> invalid.\n>\n> Double UASF signaling never coincides with UASF signaling, because the\n> signaling periods don't overlap. Full nodes happily validate the chain,\n> because Double UASF doesn't break any rules; it just adds new ones. Miners\n> who adopt Double UASF don't need to understand segwit, because all segwit\n> transactions are banned. Miners don't need to commit to a wtxid structure,\n> either. Per BIP 141, \"If all transactions in a block do not have witness\n> data, the commitment is optional.\" Segwit is activated, but useless. Miners\n> who *do* adopt segwit will lose money, as their blocks are orphaned.\n>\n> Thanks,\n> --Nick\n>\n> On Sun, Mar 12, 2017 at 9:50 AM, shaolinfry via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> I recently posted about so called \"user activated soft forks\" and\n>> received a lot of feedback. Much of this was how such methodologies could\n>> be applied to segwit which appears to have fallen under the miner veto\n>> category I explained in my original proposal, where there is apparently a\n>> lot of support for the proposal from the economy, but a few mining pools\n>> are vetoing the activation.\n>>\n>> It turns out Bitcoin already used flag day activation for P2SH[1\n>> <https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283>],\n>> a soft fork which is remarkably similar to segwit. The disadvantage of a\n>> UASF for segwit is there is an existing deployment. A UASF would require\n>> another wide upgrade cycle (from what I can see, around 80% of existing\n>> nodes have upgraded from pre-witness, to NODE_WITNESS capability[2\n>> <http://luke.dashjr.org/programs/bitcoin/files/charts/services.html>][3\n>> <https://www.reddit.com/r/Bitcoin/comments/5yyqt1/evidence_of_widespread_segwit_support_near50_of/>].\n>> While absolute node count is meaningless, the uprgrade trend from version\n>> to version seems significant.\n>>\n>> Also it is quite clear a substantial portion of the ecosystem industry\n>> has put in time and resources into segwit adoption, in the form of\n>> upgrading wallet code, updating libraries and various other integration\n>> work that requires significant time and money. Further more, others have\n>> built systems that rely on segwit, having put significant engineering\n>> resources into developing systems that require segwit - such as several\n>> lightning network system. This is much more significant social proof than\n>> running a node.\n>>\n>> The delayed activation of segwit is also holding back a raft protocol of\n>> innovations such as MAST, Covenants, Schnorr signature schemes and\n>> signature aggregation and other script innovations of which, much of the\n>> development work is already done.\n>>\n>> A better option would be to release code that causes the existing segwit\n>> deployment to activate without requiring a completely new deployment nor\n>> subject to hash power veto. This could be achieved if the economic majority\n>> agree to run code that rejects non-signalling segwit blocks. Then from the\n>> perspective of all existing witness nodes, miners trigger the BIP9\n>> activation. Such a rule could come into effect 4-6 weeks before the BIP9\n>> timeout. If a large part of the economic majority publicly say that they\n>> will adopt this new client, miners will have to signal bip9 segwit\n>> activation in order for their blocks to be valid.\n>>\n>> I have drafted a BIP proposal so the community may discuss\n>> https://gist.github.com/shaolinfry/743157b0b1ee14e1ddc95031f1057e4c (full\n>> text below).\n>>\n>> References:\n>> [1]: https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/\n>> main.cpp#L1281-L1283\n>> [2]: http://luke.dashjr.org/programs/bitcoin/files/charts/services.html\n>> [3]: https://www.reddit.com/r/Bitcoin/comments/5yyqt1/eviden\n>> ce_of_widespread_segwit_support_near50_of/\n>>\n>> Proposal text:\n>>\n>> <pre>\n>>   BIP: bip-segwit-flagday\n>>   Title: Flag day activation for segwit deployment\n>>   Author: Shaolin Fry <shaolinfry at protonmail.ch>\n>>   Comments-Summary: No comments yet.\n>>   Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-????\n>>   Status: Draft\n>>   Type: Informational\n>>   Created: 2017-03-12\n>>   License: BSD-3-Clause\n>>            CC0-1.0\n>> </pre>\n>>\n>> ==Abstract==\n>>\n>> This document specifies a BIP16 like soft fork flag day activation of the segregated witness BIP9 deployment known as \"segwit\".\n>>\n>> ==Definitions==\n>>\n>> \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment using bit 1, between November 15th 2016 and November 15th 2017 to activate BIP141, BIP143 and BIP147.\n>>\n>> ==Motivation==\n>>\n>> Cause the mandatory activation of the existing segwit deployment before the end of midnight November 15th 2017.\n>>\n>> ==Specification==\n>>\n>> All times are specified according to median past time.\n>>\n>> This BIP will be activate between midnight October 1st 2017 (epoch time 1538352000) and midnight November 15th 2017 (epoch time 1510704000) if the existing segwit deployment is not activated before epoch time 1538352000. This BIP will cease to be active when the existing segwit deployment activates.\n>>\n>> While this BIP is active, all blocks must set the nVersion header top 3 bits to 001 together with bit field (1<<1) (according to the existing segwit deployment). Blocks that do not signal as required will be rejected.\n>>\n>> === Reference implementation ===\n>>\n>> <pre>\n>> // mandatory segwit activation between Oct 1st 2017 and Nov 15th 2017 inclusive\n>> if (pindex->GetMedianTimePast() >= 1538352000 && pindex->GetMedianTimePast() <= 1510704000 && !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) {\n>>     if (!((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) && (pindex->nVersion & VersionBitsMask(params, Consensus::DEPLOYMENT_SEGWIT)) != 0) {\n>>         return state.DoS(2, error(\"ConnectBlock(): relayed block must signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\");\n>>     }\n>> }\n>> </pre>\n>>\n>> ==Backwards Compatibility==\n>>\n>> This deployment is compatible with the existing \"segwit\" bit 1 deployment scheduled between midnight November 15th, 2016 and midnight November 15th, 2017.\n>>\n>> ==Rationale==\n>>\n>> Historically, the P2SH soft fork (BIP16) was activated using a predetermined flag day where nodes began enforcing the new rules. P2SH was successfully activated with relatively few issues\n>>\n>> By orphaning non-signalling blocks during the last month of the BIP9 bit 1 \"segwit\" deployment, this BIP can cause the existing \"segwit\" deployment to activate without needing to release a new deployment.\n>>\n>> ==References==\n>>\n>> [https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283 P2SH flag day activation].\n>>\n>> ==Copyright==\n>>\n>> This document is placed in the public domain.\n>>\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170313/b9619fd6/attachment-0001.html>"
            },
            {
                "author": "shaolinfry",
                "date": "2017-03-13T10:54:48",
                "message_text_only": "Fundamentally, what you have described is not a UASF, it is a miner attack on other miners. 51% of hash power has always been able to collude to orphan blocks that contain transactions they have blacklisted (a censorship soft fork). This is clearly a miner attack which would escalate pretty rapidly into a PoW change if sustained for any time.\n\nMiners have always retained the ability to include whatever valid transactions they like. If they don't like P2SH or segwit, they don't have to include them in their blocks. There is a clear difference between opting out of transaction selection vs miners attacking other miners to prevent their voluntary participation in mining valid transactions.\n\nOf course, anything is possible, but game theory and incentives seem to suggest that any tantrums would be at most, short lived, if lived at all. Mining is an extraordinarily expensive endeavour, which is the basis of the strong assumption of Bitcoin that PoW/revenue incentives will keep miners honest. If that assumption is broken, Bitcoin has bigger problems.\n\n\n-------- Original Message --------\nSubject: Re: [bitcoin-dev] Flag day activation of segwit\nFrom: nickodell\n\n\n\nThe problem with modifying Bitcoin to work around community norms is that it's a two-way street. Other people can do it too.\n\nLet me propose a counter-fork, or a \"Double UASF.\" This is also a BIP9 fork, and it uses, say, bit 2. starttime is 1489449600, and the end time is 1506812400. It enforces every rule that UASF enforces, plus one additional rule. If 60% of blocks in any retargeting period signal for Double UASF, any descendant block that creates or spends a segregated witness output is invalid.\n\nDouble UASF signaling never coincides with UASF signaling, because the signaling periods don't overlap. Full nodes happily validate the chain, because Double UASF doesn't break any rules; it just adds new ones. Miners who adopt Double UASF don't need to understand segwit, because all segwit transactions are banned. Miners don't need to commit to a wtxid structure, either. Per BIP 141, \"If all transactions in a block do not have witness data, the commitment is optional.\" Segwit is activated, but useless. Miners who *do* adopt segwit will lose money, as their blocks are orphaned.\n\nThanks,\n--Nick\n\n\n\nOn Sun, Mar 12, 2017 at 9:50 AM, shaolinfry via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\nI recently posted about so called \"user activated soft forks\" and received a lot of feedback. Much of this was how such methodologies could be applied to segwit which appears to have fallen under the miner veto category I explained in my original proposal, where there is apparently a lot of support for the proposal from the economy, but a few mining pools are vetoing the activation.\n\nIt turns out Bitcoin already used flag day activation for P2SH[[1](https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283)], a soft fork which is remarkably similar to segwit. The disadvantage of a UASF for segwit is there is an existing deployment. A UASF would require another wide upgrade cycle (from what I can see, around 80% of existing nodes have upgraded from pre-witness, to NODE_WITNESS capability[[2](http://luke.dashjr.org/programs/bitcoin/files/charts/services.html)][[3](https://www.reddit.com/r/Bitcoin/comments/5yyqt1/evidence_of_widespread_segwit_support_near50_of/)]. While absolute node count is meaningless, the uprgrade trend from version to version seems significant.\n\nAlso it is quite clear a substantial portion of the ecosystem industry has put in time and resources into segwit adoption, in the form of upgrading wallet code, updating libraries and various other integration work that requires significant time and money. Further more, others have built systems that rely on segwit, having put significant engineering resources into developing systems that require segwit - such as several lightning network system. This is much more significant social proof than running a node.\n\nThe delayed activation of segwit is also holding back a raft protocol of innovations such as MAST, Covenants, Schnorr signature schemes and signature aggregation and other script innovations of which, much of the development work is already done.\n\nA better option would be to release code that causes the existing segwit deployment to activate without requiring a completely new deployment nor subject to hash power veto. This could be achieved if the economic majority agree to run code that rejects non-signalling segwit blocks. Then from the perspective of all existing witness nodes, miners trigger the BIP9 activation. Such a rule could come into effect 4-6 weeks before the BIP9 timeout. If a large part of the economic majority publicly say that they will adopt this new client, miners will have to signal bip9 segwit activation in order for their blocks to be valid.\n\nI have drafted a BIP proposal so the community may discuss https://gist.github.com/shaolinfry/743157b0b1ee14e1ddc95031f1057e4c (full text below).\n\nReferences:\n[1]: https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283\n[2]: http://luke.dashjr.org/programs/bitcoin/files/charts/services.html\n[3]: https://www.reddit.com/r/Bitcoin/comments/5yyqt1/evidence_of_widespread_segwit_support_near50_of/\n\nProposal text:\n\n<pre> BIP: bip-segwit-flagday Title: Flag day activation for segwit deployment Author: Shaolin Fry <shaolinfry at protonmail.ch> Comments-Summary: No comments yet. Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???? Status: Draft Type: Informational Created: 2017-03-12 License: BSD-3-Clause CC0-1.0 </pre> ==Abstract== This document specifies a BIP16 like soft fork flag day activation of the segregated witness BIP9 deployment known as \"segwit\". ==Definitions== \"existing segwit deployment\" refer to the BIP9 \"segwit\" deployment using bit 1, between November 15th 2016 and November 15th 2017 to activate BIP141, BIP143 and BIP147. ==Motivation== Cause the mandatory activation of the existing segwit deployment before the end of midnight November 15th 2017. ==Specification== All times are specified according to median past time. This BIP will be activate between midnight October 1st 2017 (epoch time 1538352000) and midnight November 15th 2017 (epoch time 1510704000) if the existing segwit deployment is not activated before epoch time 1538352000. This BIP will cease to be active when the existing segwit deployment activates. While this BIP is active, all blocks must set the nVersion header top 3 bits to 001 together with bit field (1<<1) (according to the existing segwit deployment). Blocks that do not signal as required will be rejected. === Reference implementation === <pre> // mandatory segwit activation between Oct 1st 2017 and Nov 15th 2017 inclusive if (pindex->GetMedianTimePast() >= 1538352000 && pindex->GetMedianTimePast() <= 1510704000 && !IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) { if (!((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) && (pindex->nVersion & VersionBitsMask(params, Consensus::DEPLOYMENT_SEGWIT)) != 0) { return state.DoS(2, error(\"ConnectBlock(): relayed block must signal for segwit, please upgrade\"), REJECT_INVALID, \"bad-no-segwit\"); } } </pre> ==Backwards Compatibility== This deployment is compatible with the existing \"segwit\" bit 1 deployment scheduled between midnight November 15th, 2016 and midnight November 15th, 2017. ==Rationale== Historically, the P2SH soft fork (BIP16) was activated using a predetermined flag day where nodes began enforcing the new rules. P2SH was successfully activated with relatively few issues By orphaning non-signalling blocks during the last month of the BIP9 bit 1 \"segwit\" deployment, this BIP can cause the existing \"segwit\" deployment to activate without needing to release a new deployment. ==References== [https://github.com/bitcoin/bitcoin/blob/v0.6.0/src/main.cpp#L1281-L1283 P2SH flag day activation]. ==Copyright== This document is placed in the public domain.\n\n\n\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170313/6e5c3f8b/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Flag day activation of segwit",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "David Vorick",
                "shaolinfry",
                "Nick ODell",
                "praxeology_guy",
                "Luke Dashjr"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 43103
        }
    },
    {
        "title": "[bitcoin-dev] Quadratic hashing solution for a post-segwit hard fork",
        "thread_messages": [
            {
                "author": "Erik Aronesty",
                "date": "2017-03-14T23:26:17",
                "message_text_only": "Some discussion today led me to believe that a post segwit hard fork could\ninclude:\n\n1MB old tx non-witness segment\nXMB new segwit non-witness segment\nXMB witness segment\n\nBy partitioning off old transactions, it allows users of older, more\nexpensive validation transactions to continue using them, albeit with\nhigher fees required for the restricted space.\n\nNew segwit blocks, which don't have the hashing problem could be included\nin the new non-witness segment of the block.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170314/26ff9350/attachment.html>"
            },
            {
                "author": "Alphonse Pace",
                "date": "2017-03-16T15:24:14",
                "message_text_only": "This unnecessarily complicates transaction selection for miners by\nintroducing a second (and possibly third if I understand your proposal\ncorrectly) dimension to try to optimize.\n\nSee:  https://en.wikipedia.org/wiki/Bin_packing_problem\n\nSegwit already solves this exact issue by replacing block size with block\nweight, so I fail to see how this proposal would make any improvements\nwithout introducing significant complications.\n\n\n\n\u200b\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170316/e9a79d33/attachment.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2017-03-17T00:44:27",
                "message_text_only": "Yeah, it does make things harder, and it's easy enough to soft fork to\nhandle arbitrary opt-in protocol improvements, new much larger block sizes,\nwhatever you want.   Even OK to migrate to a new system by not allowing\nold->old or new->old transactions.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170316/525909bf/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2017-03-17T10:39:07",
                "message_text_only": "Segwit allows old -> old, old -> new, new -> old and of course new -> new\ntxs.\n\nOn 17 Mar 2017 1:47 a.m., \"Erik Aronesty via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\nYeah, it does make things harder, and it's easy enough to soft fork to\nhandle arbitrary opt-in protocol improvements, new much larger block sizes,\nwhatever you want.   Even OK to migrate to a new system by not allowing\nold->old or new->old transactions.\n\n\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170317/be7e2177/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Quadratic hashing solution for a post-segwit hard fork",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jorge Tim\u00f3n",
                "Erik Aronesty",
                "Alphonse Pace"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 2518
        }
    },
    {
        "title": "[bitcoin-dev] Payment address tokens",
        "thread_messages": [
            {
                "author": "Luke Dashjr",
                "date": "2017-03-15T04:03:40",
                "message_text_only": "I've put together a fairly incomplete BIP draft for a new stateless address \nformat that aims to address the many shortcomings of current addresses, \nincluding:\n- Current addresses special-case specific transaction types, and have needed\n  sender-side upgrades for new types.\n- Outputs are produced which cannot be distinguished from disguised data\n  storage, making spam detection harder.\n- Privacy is severely harmed by reuse of addresses.\n- Funds can be lost due to (accidental or intentional) reuse of very old\n  addresses.\n\nhttps://github.com/luke-jr/bips/blob/bip-genaddr/bip-genaddr.mediawiki\n\nA downside of this approach is that parsing addresses to outputs can be \ncomplicated, but this is resolvable by writing libraries for popular \nlanguages.\n\nThoughts on how it might be improved, before I get too deep into the current \ndesign?\n\nLuke"
            }
        ],
        "thread_summary": {
            "title": "Payment address tokens",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Luke Dashjr"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 847
        }
    },
    {
        "title": "[bitcoin-dev] Committed bloom filters for improved wallet performance and SPV security",
        "thread_messages": [
            {
                "author": "Tom Harding",
                "date": "2017-03-15T22:36:09",
                "message_text_only": "Agreed.\n\nIn contrast, BIP37 as used today is totally decentralized, and can me \nmade much more secure, private, and scalable -- without giving up the \nutility of unconfirmed transactions.\n\nPlease don't read into this statement a belief that all the coffees \nshould go on the chain, or that the security or privacy of BIP37 compare \nfavorably to any other particular thing.\n\nhttps://docs.google.com/presentation/d/13MzUo2iIH9JBW29TgtPMoaMXxeEdanWDfi6SlfO-LlA\n\n\n\nOn 1/5/2017 6:04 PM, bfd--- via bitcoin-dev wrote:\n> You might as well replace Bitcoin with a system where these parties\n> sign transactions and skip mining altogether, it would have the same\n> properties and be significantly more effient.\n>\n>\n> On 2017-01-04 23:06, Chris Priest wrote:\n>> On 1/3/17, Jonas Schnelli via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>> There are plenty, more sane options. If you can't run your own \n>>> full-node\n>>> as a merchant (trivial), maybe co-use a wallet-service with centralized\n>>> verification (maybe use two of them), I guess Copay would be one of\n>>> those wallets (as an example). Use them in watch-only mode.\n>>\n>> The best way is to connect to the mempool of each miner and check to\n>> see if they have your txid in their mempool.\n>>\n>> https://www.antpool.com/api/is_in_mempool?txid=334847bb...\n>> https://www.f2pool.com/api/is_in_mempool?txid=334847bb...\n>> https://bw.com/api/is_in_mempool?txid=334847bb...\n>> https://bitfury.com/api/is_in_mempool?txid=334847bb...\n>> https://btcc.com/api/is_in_mempool?txid=334847bb...\n>>\n>> If each of these services return \"True\", and you know those services\n>> so not engage in RBF, then you can assume with great confidence that\n>> your transaction will be in the next block, or in a block very soon.\n>> If any one of those services return \"False\", then you must assume that\n>> it is possible that there is a double spend floating around, and that\n>> you should wait to see if that tx gets confirmed. The problem is that\n>> not every pool runs such a service to check the contents of their\n>> mempool...\n>>\n>> This is an example of mining centralization increasing the security of\n>> zero confirm. If more people mined, this method will not work as well\n>> because it would require you to call the API of hundreds of different\n>> potential block creators.\n>"
            },
            {
                "author": "bfd at cock.lu",
                "date": "2017-03-16T00:25:01",
                "message_text_only": "Sorry, this is not the case.\n\nYour slides gloss over the simple fact that compact fraud proofs in \nBitcoin aren't possible, and that the \"SPV\" implemented today bears \nabsolutely no resemblance in security properties to the version \ndescribed in the Bitcoin white paper. In the white paper SPV clients \nhave the same security as fully validating nodes, in the implementation \nof BIP37 they have absolutely no security except the vague hope that \nthey are not being lied to, and that the chain with the most work they \nare seeing is actually valid, both are very weak assumptions.\n\nThe suggested solution in no way precludes unconfirmed transactions from \nbeing used with a commitment scheme, my comments and others are just \nrecognising that they are an almost useless indicator for people who \naren't validating.\n\nDuring the validationless mining failure around the BIP66 activation \nminers produced 6 invalid blocks in a chain, and many more invalid \nblocks in isolated bursts for a period lasting several months. Due to \nthe instability of the network you are completely unreasonable to accept \nanything except multiple confirmations, the true number for safety is \nprobably more like 60 or 120, not 6, or 3, or 1 as some Bitcoin \nexchanges use today.\n\n\n0000000000000000009cc829aa25b40b2cd4eb83dd498c12ad0d26d90c439d99.bin \nbad-version(0x00000002)\n0000000000000000032527aa796d3672e32e5f85a452d3a584a28fc7efbcd5d0.bin \nbad-version(0x00000002)\n000000000000000003ae1223f4926ec86100885cfe1484dc52fd67e042a19b12.bin \nbad-version(0x00000002)\n0000000000000000083cbdbb25c1607527c8f3fdb16f0d048c4439a73b501cb6.bin \nbad-version(0x00000002)\n00000000000000000954ed93eda1e79e8261137548fa9ccf4d516bb384a3660b.bin \nbad-version(0x00000002)\n00000000000000000afc9fbe7cfe8a6b50502d509ba626beb2e2d6c15d1d3ee3.bin \nbad-version(0x00000002)\n00000000000000000b6adf92bc192b3c21210f456ab21b5e46951665c74cfab2.bin \nbad-version(0x00000002)\n00000000000000000c9bb4a508fff34f5450d9c62ef2cb833e53909a4c549de5.bin \nbad-version(0x00000002)\n0000000000000000116322b5f25826787b01f7a70fb322837b68dff8216cefc4.bin \nbad-version(0x00000002)\n000000000000000012aac0664cd8b6cbc3ea485921a05f2c4340f928b0226d3c.bin \nbad-version(0x00000002)\n\n\"SPV\" like you're describing can exist, or validationless mining can \nexist, both can not simultaneously.\n\n\n\nOn 2017-03-16 09:36, Tom Harding via bitcoin-dev wrote:\n> Agreed.\n> \n> In contrast, BIP37 as used today is totally decentralized, and can me\n> made much more secure, private, and scalable -- without giving up the\n> utility of unconfirmed transactions.\n> \n> Please don't read into this statement a belief that all the coffees\n> should go on the chain, or that the security or privacy of BIP37\n> compare favorably to any other particular thing.\n> \n> https://docs.google.com/presentation/d/13MzUo2iIH9JBW29TgtPMoaMXxeEdanWDfi6SlfO-LlA\n> \n> \n> \n> On 1/5/2017 6:04 PM, bfd--- via bitcoin-dev wrote:\n>> You might as well replace Bitcoin with a system where these parties\n>> sign transactions and skip mining altogether, it would have the same\n>> properties and be significantly more effient.\n>> \n>> \n>> On 2017-01-04 23:06, Chris Priest wrote:\n>>> On 1/3/17, Jonas Schnelli via bitcoin-dev\n>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>> \n>>>> There are plenty, more sane options. If you can't run your own \n>>>> full-node\n>>>> as a merchant (trivial), maybe co-use a wallet-service with \n>>>> centralized\n>>>> verification (maybe use two of them), I guess Copay would be one of\n>>>> those wallets (as an example). Use them in watch-only mode.\n>>> \n>>> The best way is to connect to the mempool of each miner and check to\n>>> see if they have your txid in their mempool.\n>>> \n>>> https://www.antpool.com/api/is_in_mempool?txid=334847bb...\n>>> https://www.f2pool.com/api/is_in_mempool?txid=334847bb...\n>>> https://bw.com/api/is_in_mempool?txid=334847bb...\n>>> https://bitfury.com/api/is_in_mempool?txid=334847bb...\n>>> https://btcc.com/api/is_in_mempool?txid=334847bb...\n>>> \n>>> If each of these services return \"True\", and you know those services\n>>> so not engage in RBF, then you can assume with great confidence that\n>>> your transaction will be in the next block, or in a block very soon.\n>>> If any one of those services return \"False\", then you must assume \n>>> that\n>>> it is possible that there is a double spend floating around, and that\n>>> you should wait to see if that tx gets confirmed. The problem is that\n>>> not every pool runs such a service to check the contents of their\n>>> mempool...\n>>> \n>>> This is an example of mining centralization increasing the security \n>>> of\n>>> zero confirm. If more people mined, this method will not work as well\n>>> because it would require you to call the API of hundreds of different\n>>> potential block creators.\n>> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Tom Harding",
                "date": "2017-03-16T15:05:11",
                "message_text_only": "On 3/15/2017 5:25 PM, bfd at cock.lu wrote:\n> compact fraud proofs in Bitcoin aren't possible\n> In the white paper SPV clients have the same security as fully\n> validating nodes\n\nIn addition to not existing, if compact fraud proofs did exist, trying\nto ensure they are seen by SPV clients has the same problems as BIP37.\n\n\n> in the implementation of BIP37 they have absolutely no security except\n> the vague hope that they are not being lied to, and that the chain\n> with the most work they are seeing is actually valid, both are very\n> weak assumptions.\n\nSince real money is involved, the near total absence of documented fraud\nalong these lines belies the strong language.\n\n\n> During the validationless mining failure around the BIP66 activation\n> miners produced 6 invalid blocks in a chain, and many more invalid\n> blocks in isolated bursts for a period lasting several months. Due to\n> the instability of the network you are completely unreasonable to\n> accept anything except multiple confirmations\n\nThis affected all users, not just SPV."
            }
        ],
        "thread_summary": {
            "title": "Committed bloom filters for improved wallet performance and SPV security",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "bfd at cock.lu",
                "Tom Harding"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 8351
        }
    },
    {
        "title": "[bitcoin-dev] Script Parser",
        "thread_messages": [
            {
                "author": "Marcos mayorga",
                "date": "2017-03-17T15:53:55",
                "message_text_only": "Hello,\n\nI've notice that OP_1NEGATE cannot be parsed with the function ParseScript\nin core_read.cpp, this op makes the flow reach line 88 -> throw\nruntime_error(\"script parse error\");\n\nThis is likely a bug, is it?\nThanks\n\nM\n\nPS: I am working with version 0.12.1"
            }
        ],
        "thread_summary": {
            "title": "Script Parser",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Marcos mayorga"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 261
        }
    },
    {
        "title": "[bitcoin-dev] Requirement for pseudonymous BIP submissions",
        "thread_messages": [
            {
                "author": "Chris Stewart",
                "date": "2017-03-18T15:23:16",
                "message_text_only": "As everyone in the Bitcoin space knows, there is a massive scaling debate\ngoing on. One side wants to increase the block size via segwit, while the\nother side wants to increase via hard fork. I have strong opinions on the\ntopic but I won\u2019t discuss them here. The point of the matter is we are\nseeing the politicization of protocol level changes. The critiques of these\nchanges are slowly moving towards critiques based on who is submitting the\nBIP -- not what it actually contains. This is the worst thing that can\nhappen in a meritocracy.\n\n*Avoiding politicization of technical changes in the future*\n\nI like what Tom Elvis Judor did when he submitted his MimbleWimble white\npaper to the technical community. He submitted it under a pseudonym, over\nTOR, onto a public IRC channel. No ego involved \u2014 only an extremely\npromising paper. Tom (and Satoshi) both understood that it is only a matter\nof time before who they are impedes technical progress of their system.\n\nI propose we move to a pseudonymous BIP system where it is required for the\nauthor submit the BIP under a pseudonym. For instance, the format could be\nsomething like this:\n\nBIP: 1337\n\nAuthor: 9458b7f9f76131f18823d73770e069d55beb271b at protonmail.com\n\nBIP content down here\n\nThe hash \u201c6f3\u20269cd0\u201d is just my github username, christewart, concatenated\nwith some entropy, in this case these bytes:\n639c28f610edcaf265b47b0679986d10af3360072b56f9b0b085ffbb4d4f440b\n\nand then hashed with RIPEMD160. I checked this morning that protonmail can\nsupport RIPEMD160 hashes as email addresses. Unfortunately it appears it\ncannot support SHA256 hashes.\n\nThere is inconvenience added here. You need to make a new email address,\nyou need to make a new github account to submit the BIP. I think it is\nworth the cost -- but am interested in what others think about this. I\ndon't think people submitting patches to a BIP should be required to submit\nunder a pseudonym -- only the primary author. This means only one person\nhas to create the pseudonym. From a quick look at the BIPs list it looks\nlike the most BIPs submitted by one person is ~10. This means they would\nhave had to create 10 pseudonyms over 8 years -- I think this is\nreasonable.\n\n*What does this give us?*\n\nThis gives us a way to avoid politicization of BIPs. This means a BIP can\nbe proposed and examined based on it\u2019s technical merits. This levels the\nplaying field \u2014 making the BIP process even more meritocratic than it\nalready is.\n\nIf you want to claim credit for your BIP after it is accepted, you can\nreveal the preimage of the author hash to prove that you were the original\nauthor of the BIP. I would need to reveal my github username and\n\u201c639c28f610edcaf265b47b0679986d10af3360072b56f9b0b085ffbb4d4f440b\u201d\n\n*The Future*\nPoliticization of bitcoin is only going to grow in the future. We need to\nmake sure we maintain principled money instead devolving to a system where\nour money is based on a democratic vote \u2014 or the votes of a select few\nelites. We need to vet claims by \u201cauthority figures\u201d whether it is Jihan\nWu, Adam Back, Roger Ver, or Greg Maxwell. I assure you they are human \u2014\nand prone to mistakes \u2014 just like the rest of us. This seems like a simple\nway to level the playing field.\n\nThoughts?\n\n-Chris\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170318/c788f5e3/attachment.html>"
            },
            {
                "author": "Andrew Johnson",
                "date": "2017-03-18T16:57:56",
                "message_text_only": "I think this is an excellent idea. I consider myself to be extremely\ndata-driven and logical in my thinking, and have still fallen victim to\nthinking \"oh great, what's <person I've been annoyed by in the past> on\nabout now?\" when seeing something posted or proposed.\n\nAnd vice versa, it prevents people from being more partial to a bad or not\nso great idea simply because it was posited by someone they hold in high\nregard.\n\nSimple, yet effective.  I would actually even go a step further and say\nthat all BIPs should be done this way as a matter of procedure, I can't\nthink of a downside.\n\n\nOn Sat, Mar 18, 2017 at 10:46 AM Chris Stewart via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> As everyone in the Bitcoin space knows, there is a massive scaling debate\n> going on. One side wants to increase the block size via segwit, while the\n> other side wants to increase via hard fork. I have strong opinions on the\n> topic but I won\u2019t discuss them here. The point of the matter is we are\n> seeing the politicization of protocol level changes. The critiques of these\n> changes are slowly moving towards critiques based on who is submitting the\n> BIP -- not what it actually contains. This is the worst thing that can\n> happen in a meritocracy.\n>\n> *Avoiding politicization of technical changes in the future*\n>\n> I like what Tom Elvis Judor did when he submitted his MimbleWimble white\n> paper to the technical community. He submitted it under a pseudonym, over\n> TOR, onto a public IRC channel. No ego involved \u2014 only an extremely\n> promising paper. Tom (and Satoshi) both understood that it is only a matter\n> of time before who they are impedes technical progress of their system.\n>\n> I propose we move to a pseudonymous BIP system where it is required for\n> the author submit the BIP under a pseudonym. For instance, the format could\n> be something like this:\n>\n> BIP: 1337\n>\n> Author: 9458b7f9f76131f18823d73770e069d55beb271b at protonmail.com\n>\n> BIP content down here\n>\n> The hash \u201c6f3\u20269cd0\u201d is just my github username, christewart, concatenated\n> with some entropy, in this case these bytes:\n> 639c28f610edcaf265b47b0679986d10af3360072b56f9b0b085ffbb4d4f440b\n>\n> and then hashed with RIPEMD160. I checked this morning that protonmail can\n> support RIPEMD160 hashes as email addresses. Unfortunately it appears it\n> cannot support SHA256 hashes.\n>\n> There is inconvenience added here. You need to make a new email address,\n> you need to make a new github account to submit the BIP. I think it is\n> worth the cost -- but am interested in what others think about this. I\n> don't think people submitting patches to a BIP should be required to submit\n> under a pseudonym -- only the primary author. This means only one person\n> has to create the pseudonym. From a quick look at the BIPs list it looks\n> like the most BIPs submitted by one person is ~10. This means they would\n> have had to create 10 pseudonyms over 8 years -- I think this is\n> reasonable.\n>\n> *What does this give us?*\n>\n> This gives us a way to avoid politicization of BIPs. This means a BIP can\n> be proposed and examined based on it\u2019s technical merits. This levels the\n> playing field \u2014 making the BIP process even more meritocratic than it\n> already is.\n>\n> If you want to claim credit for your BIP after it is accepted, you can\n> reveal the preimage of the author hash to prove that you were the original\n> author of the BIP. I would need to reveal my github username and\n> \u201c639c28f610edcaf265b47b0679986d10af3360072b56f9b0b085ffbb4d4f440b\u201d\n>\n> *The Future*\n> Politicization of bitcoin is only going to grow in the future. We need to\n> make sure we maintain principled money instead devolving to a system where\n> our money is based on a democratic vote \u2014 or the votes of a select few\n> elites. We need to vet claims by \u201cauthority figures\u201d whether it is Jihan\n> Wu, Adam Back, Roger Ver, or Greg Maxwell. I assure you they are human \u2014\n> and prone to mistakes \u2014 just like the rest of us. This seems like a simple\n> way to level the playing field.\n>\n> Thoughts?\n>\n> -Chris\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-- \nAndrew Johnson\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170318/a41a9a1a/attachment.html>"
            },
            {
                "author": "Chris Stewart",
                "date": "2017-03-18T17:35:30",
                "message_text_only": ">I think this is an excellent idea. I consider myself to be extremely\ndata-driven and logical in my thinking, and have still fallen victim to\nthinking \"oh great, what's <person I've been annoyed by in the past> on\nabout now?\" when seeing something posted or proposed.\n\nI think we need to all recognize we are only humans -- thus susceptible to\nour emotions influencing our decisions. The notion of identity is an easy\nway to form judgements for/against an idea before thoroughly vetting it.\n\nI also think a by product of this would be to curb reddit/twitter trolls\nfrom talking about these protocol changes. It is a much less juicy story if\nyou have to say \"9458b7f9f76131f18823d73770e069d55beb271b created a BIP to\npropose a block size increase\" compared to \"Satoshi Nakamoto created a BIP\nto propose a block size increase\".\n\nNote about the OP:\n\n\"The hash \u201c6f3\u20269cd0\u201d is just my...\" should really say \"The hash\n'9458...271b' is just my..\" Forgot to change the hash this morning.\n\nOn Sat, Mar 18, 2017 at 11:57 AM, Andrew Johnson <andrew.johnson83 at gmail.com\n> wrote:\n\n> I think this is an excellent idea. I consider myself to be extremely\n> data-driven and logical in my thinking, and have still fallen victim to\n> thinking \"oh great, what's <person I've been annoyed by in the past> on\n> about now?\" when seeing something posted or proposed.\n>\n> And vice versa, it prevents people from being more partial to a bad or not\n> so great idea simply because it was posited by someone they hold in high\n> regard.\n>\n> Simple, yet effective.  I would actually even go a step further and say\n> that all BIPs should be done this way as a matter of procedure, I can't\n> think of a downside.\n>\n>\n> On Sat, Mar 18, 2017 at 10:46 AM Chris Stewart via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> As everyone in the Bitcoin space knows, there is a massive scaling debate\n>> going on. One side wants to increase the block size via segwit, while the\n>> other side wants to increase via hard fork. I have strong opinions on the\n>> topic but I won\u2019t discuss them here. The point of the matter is we are\n>> seeing the politicization of protocol level changes. The critiques of these\n>> changes are slowly moving towards critiques based on who is submitting the\n>> BIP -- not what it actually contains. This is the worst thing that can\n>> happen in a meritocracy.\n>>\n>> *Avoiding politicization of technical changes in the future*\n>>\n>> I like what Tom Elvis Judor did when he submitted his MimbleWimble white\n>> paper to the technical community. He submitted it under a pseudonym, over\n>> TOR, onto a public IRC channel. No ego involved \u2014 only an extremely\n>> promising paper. Tom (and Satoshi) both understood that it is only a matter\n>> of time before who they are impedes technical progress of their system.\n>>\n>> I propose we move to a pseudonymous BIP system where it is required for\n>> the author submit the BIP under a pseudonym. For instance, the format could\n>> be something like this:\n>>\n>> BIP: 1337\n>>\n>> Author: 9458b7f9f76131f18823d73770e069d55beb271b at protonmail.com\n>>\n>> BIP content down here\n>>\n>> The hash \u201c6f3\u20269cd0\u201d is just my github username, christewart, concatenated\n>> with some entropy, in this case these bytes: 639c28f610edcaf265b47b0679986d\n>> 10af3360072b56f9b0b085ffbb4d4f440b\n>>\n>> and then hashed with RIPEMD160. I checked this morning that protonmail\n>> can support RIPEMD160 hashes as email addresses. Unfortunately it appears\n>> it cannot support SHA256 hashes.\n>>\n>> There is inconvenience added here. You need to make a new email address,\n>> you need to make a new github account to submit the BIP. I think it is\n>> worth the cost -- but am interested in what others think about this. I\n>> don't think people submitting patches to a BIP should be required to submit\n>> under a pseudonym -- only the primary author. This means only one person\n>> has to create the pseudonym. From a quick look at the BIPs list it looks\n>> like the most BIPs submitted by one person is ~10. This means they would\n>> have had to create 10 pseudonyms over 8 years -- I think this is\n>> reasonable.\n>>\n>> *What does this give us?*\n>>\n>> This gives us a way to avoid politicization of BIPs. This means a BIP can\n>> be proposed and examined based on it\u2019s technical merits. This levels the\n>> playing field \u2014 making the BIP process even more meritocratic than it\n>> already is.\n>>\n>> If you want to claim credit for your BIP after it is accepted, you can\n>> reveal the preimage of the author hash to prove that you were the original\n>> author of the BIP. I would need to reveal my github username and \u201c\n>> 639c28f610edcaf265b47b0679986d10af3360072b56f9b0b085ffbb4d4f440b\u201d\n>>\n>> *The Future*\n>> Politicization of bitcoin is only going to grow in the future. We need to\n>> make sure we maintain principled money instead devolving to a system where\n>> our money is based on a democratic vote \u2014 or the votes of a select few\n>> elites. We need to vet claims by \u201cauthority figures\u201d whether it is Jihan\n>> Wu, Adam Back, Roger Ver, or Greg Maxwell. I assure you they are human \u2014\n>> and prone to mistakes \u2014 just like the rest of us. This seems like a simple\n>> way to level the playing field.\n>>\n>> Thoughts?\n>>\n>> -Chris\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> --\n> Andrew Johnson\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170318/610a02b7/attachment-0001.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2017-03-18T19:15:09",
                "message_text_only": "On Saturday, March 18, 2017 3:23:16 PM Chris Stewart via bitcoin-dev wrote:\n> There is inconvenience added here. You need to make a new email address,\n> you need to make a new github account to submit the BIP. \n\nGitHub doesn't allow people to have multiple accounts last I checked.\n\nLuke"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2017-03-24T02:30:29",
                "message_text_only": "On Sat, Mar 18, 2017 at 07:15:09PM +0000, Luke Dashjr via bitcoin-dev wrote:\n> On Saturday, March 18, 2017 3:23:16 PM Chris Stewart via bitcoin-dev wrote:\n> > There is inconvenience added here. You need to make a new email address,\n> > you need to make a new github account to submit the BIP. \n> \n> GitHub doesn't allow people to have multiple accounts last I checked.\n\nC'mon people.\n\nAnyone remember when git didn't even exist and all we had was CVS, \nsubversion, and BitKeeper?\n\nGet me a couple of motivated grad students who know Python and we can\nturn a combination of Mercurial, BitTorrent, and pynode into a distributed,\nleaderless, decentralized version control system that can let users \ncreate a crypto key, anonymously propose BIPs, and then get paid in\ncrypto for the best commits.\n\nWho else would contribute to a crowdfunding effort to do such at thing?"
            },
            {
                "author": "Tom Zander",
                "date": "2017-03-29T08:49:38",
                "message_text_only": "On Saturday, 18 March 2017 16:23:16 CEST Chris Stewart via bitcoin-dev \nwrote:\n> As everyone in the Bitcoin space knows, there is a massive scaling debate\n> going on. One side wants to increase the block size via segwit, while the\n> other side wants to increase via hard fork. I have strong opinions on the\n> topic but I won\u2019t discuss them here. The point of the matter is we are\n> seeing the politicization of protocol level changes.\n\nI agree with your assessment, the sides are political and picking sides \nmakes people a target.\nFor that reason I know that many companies are not picking sides, we\u2019ve seen \nsome bad stuff happen to companies that did.\n\nI\u2019m not convnced it makes sense to use anonymous, but provable, identities \nis the way to solve this. Though.\n\nI also don\u2019t believe people are rejecting proposals purely based on the \nname. What I see is that pratically all proposals are ignored for the time \nbeing becaues we can\u2019t make any changes anyway until we have made a protocol \nupgrade and came out stronger.\nI do agree that bips are seen politically, but not based on the person that \nsuggests them, but more based on the content being useful for their \npolitical side.\n\nI am not entirely against pseudonymous submissions, but in that case I think \nit should be carried by a well known member of the Bitcoin community.\n\nThis raises the bar somewhat to a point where you have to convince someone \nthat is already publicly known to propose it with you.\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Steve Davis",
                "date": "2017-03-19T21:17:04",
                "message_text_only": "> On Mar 19, 2017, at 7:00 AM, bitcoin-dev-request at lists.linuxfoundation.org wrote:\n> \n> GitHub doesn't allow people to have multiple accounts last I checked.\n\nGitHub doesn\u2019t allow email addresses to have multiple accounts.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170319/55fab487/attachment-0001.html>"
            },
            {
                "author": "muyuu",
                "date": "2017-03-19T23:43:12",
                "message_text_only": "If this was in place I would contribute more and I wouldn't have to create\nthrow-away accounts.\n\nThis is not a space where you want to be a recognisable target.\n\nToday, BitFury's CEO threatened to sue developers if they didn't kowtow to\nhis demands to leave the PoW alone. This is unacceptable. Decisions have to\nbe made on merit and the interest of the project, and nothing else.\n\nThis is very important and needs to be given priority. Most Core developers\nand all the main ones except Satoshi have built a public persona, either\nfor ego or for practical monetary reasons. Obviously there's academia where\neverything is about plastering your name as much as possible and getting\ncited. So it's understood. Although I understand the difficulty of getting\nfunded and getting trusted without a face, there needs to be an outlet so\npeople can interact and contribute in a proper cypherpunk way.\n\nAlso, GitHub is quite anti-privacy. So I recommend not reusing personal\naccounts from work.\n\n-muyuu\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170319/8e00316b/attachment-0001.html>"
            },
            {
                "author": "hozer at hozed.org",
                "date": "2017-03-24T02:18:45",
                "message_text_only": "On Sun, Mar 19, 2017 at 11:43:12PM +0000, muyuu via bitcoin-dev wrote:\n> If this was in place I would contribute more and I wouldn't have to create\n> throw-away accounts.\n> \n> This is not a space where you want to be a recognisable target.\n> \n> Today, BitFury's CEO threatened to sue developers if they didn't kowtow to\n> his demands to leave the PoW alone. This is unacceptable. Decisions have to\n> be made on merit and the interest of the project, and nothing else.\n> \n> This is very important and needs to be given priority. Most Core developers\n> and all the main ones except Satoshi have built a public persona, either\n> for ego or for practical monetary reasons. Obviously there's academia where\n> everything is about plastering your name as much as possible and getting\n> cited. So it's understood. Although I understand the difficulty of getting\n> funded and getting trusted without a face, there needs to be an outlet so\n> people can interact and contribute in a proper cypherpunk way.\n> \n> Also, GitHub is quite anti-privacy. So I recommend not reusing personal\n> accounts from work.\n> \n> -muyuu\n\nI quite agree, and I would add that sometimes making yourself\nrecognisable is far more important that merit.\n\nIf we are really going to go for merit, then we probably need to go\nall the way back to examine why is it developers and academics think\nthey need to have money to make code or reputation to do research.\n\nThe best code I've written is stuff I've given away for free, although\nsometimes I'm able to leverage being recognized for having written \nsomething into getting paid to write more code. The best research\nI've done has been self-funded, when I did not subconsciously have\na funding agent I was trying to please with the outcome of the \nresearch.\n\nWe need a safe space for merit, how about http://gplspace.org/"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2017-03-28T01:31:04",
                "message_text_only": "On Mon, Mar 27, 2017 at 08:32:07AM -0500, Chris Stewart wrote:\n> >I quite agree, and I would add that sometimes making yourself\n> recognisable is far more important that merit.\n> \n> The intent of my original proposal allows you to reveal yourself *after*\n> the BIP has been accepted if you so choose. You do this by just revealing\n> the preimage of the author hash. As others have pointed out, you can't\n> *force* people to use this process -- but we can make it a defacto\n> requirement by the BIP maintainer. Just like how you can't *force* people\n> to format their BIPs in a certain way, but the BIP maintainer has the right\n> to decline them if they aren't formatted that way.\n> \n> > Today, BitFury's CEO threatened to sue developers if they didn't kowtow to\n> > his demands to leave the PoW alone. This is unacceptable. Decisions have\n> to\n> > be made on merit and the interest of the project, and nothing else.\n> \n> I think everyone on the list needs to see that paragraph again, and let the\n> implications set in.\n\nWe are talking about money here. Decisions in this project are\nnot made based on 'merit', they are made based on ROI. If killing\nthe project is more profitable, many of the actors involved are\nobligated to their shareholders to attempt to kill the project.\n\nOr maybe in this case, they might be obligated to their investors\nto attempt to try to run all the competing miners out of business\nand acquire a majority stake in the hashpower.\n\nIf Merit were actually important, I would hope we would be\ntalking about a way to finance development in a way that provides\nreal financial incentives for merit, rather than what appear to\nbe some perverse incentives that seem to be rewarding short-term\ntraders, conflict, and further consolidation of mining and \nexchanges.\n\nThe other problem with merit is there are just about as many ideas\nabout what has merit as there are people judging the merit of the\nproject.\n\nFor instance, I think demurrage and increasing the money supply are\nideas with more merit, but those ideas are not profitable to existing\nbitcoin investors, and thus are not seriously discussed."
            }
        ],
        "thread_summary": {
            "title": "Requirement for pseudonymous BIP submissions",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Troy Benjegerdes",
                "Chris Stewart",
                "Steve Davis",
                "Andrew Johnson",
                "muyuu",
                "Tom Zander",
                "hozer at hozed.org",
                "Luke Dashjr"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 21789
        }
    },
    {
        "title": "[bitcoin-dev] Malice Reactive Proof of Work Additions (MR POWA): Protecting Bitcoin from malicious miners",
        "thread_messages": [
            {
                "author": "John Hardy",
                "date": "2017-03-18T16:01:08",
                "message_text_only": "I\u2019m very worried about the state of miner centralisation in Bitcoin.\n\nI always felt the centralising effects of ASIC manufacturing would resolve themselves once the first mover advantage had been exhausted and the industry had the opportunity to mature.\n\nI had always assumed initial centralisation would be harmless since miners have no incentive to harm the network. This does not consider the risk of a single entity with sufficient power and either poor, malicious or coerced decision making. I now believe that such centralisation poses a huge risk to the security of Bitcoin and preemptive action needs to be taken to protect the network from malicious actions by any party able to exert influence over a substantial portion of SHA256 hardware.\n\nInspired by UASF, I believe we should implement a Malicious miner Reactive Proof of Work Additions (MR POWA).\n\nThis would be a hard fork activated in response to a malicious attempt by a hashpower majority to introduce a contentious hard fork.\n\nThe activation would occur once a fork was detected violating protocol (likely oversize blocks) with a majority of hashpower. The threshold and duration for activation would need to be carefully considered.\n\nI don\u2019t think we should eliminate SHA256 as a hashing method and change POW entirely. That would be throwing the baby out with the bathwater and hurt the non-malicious miners who have invested in hardware, making it harder to gain their support.\n\nInstead I believe we should introduce multiple new proofs of work that are already established and proven within existing altcoin implementations. As an example we could add Scrypt, Ethash and Equihash. Much of the code and mining infrastructure already exists. Diversification of hardware (a mix of CPU and memory intensive methods) would also be positive for decentralisation. Initial difficulty could simply be an estimated portion of existing infrastructure.\n\nThis example would mean 4 proofs of work with 40 minute block target difficulty for each. There could also be a rule that two different proofs of work must find a block before a method can start hashing again. This means there would only be 50% of hardware hashing at a time, and a sudden gain or drop in hashpower from a particular method does not dramatically impact the functioning of the network between difficulty adjustments. This also adds protection from attacks by the malicious SHA256 hashpower which could even be required to wait until all other methods have found a block before being allowed to hash again.\n\n50% hashing time would mean that the cost of electricity in relation to hardware would fall by 50%, reducing some of the centralising impact of subsidised or inexpensive electricity in some regions over others.\n\nSuch a hard fork could also, counter-intuitively, introduce a block size increase since while we\u2019re hard forking it makes sense to minimise the number of future hard forks where possible. It could also activate SegWit if it hasn\u2019t already.\n\nThe beauty of this method is that it creates a huge risk to any malicious actor trying to abuse their position. Ideally, MR POWA would just serve as a deterrent and never activate.\n\nIf consensus were to form around a hard fork in the future nodes would be able to upgrade and MR POWA, while automatically activating on non-upgraded nodes, would be of no economic significance: a vestigial chain immediately abandoned with no miner incentive.\n\nI think this would be a great way to help prevent malicious use of hashpower to harm the network. This is the beauty of Bitcoin: for any road block that emerges the economic majority can always find a way around.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170318/34aa05cd/attachment.html>"
            },
            {
                "author": "Andrew Johnson",
                "date": "2017-03-20T15:38:01",
                "message_text_only": "By doing this you're significantly changing the economic incentives behind\nbitcoin mining. How can you reliably invest in hardware if you have no idea\nwhen or if your profitability is going to be cut by 50-75% based on a whim?\n\nYou may also inadvertently create an entirely new attack vector if 50-75%\nof the SHA256 hardware is taken offline and purchased by an entity who\nintends to do harm to the network.\n\nBitcoin only works if most miners are honest, this has been known since the\nbeginning.\n\nOn Mon, Mar 20, 2017 at 9:50 AM John Hardy via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I\u2019m very worried about the state of miner centralisation in Bitcoin.\n>\n> I always felt the centralising effects of ASIC manufacturing would resolve\n> themselves once the first mover advantage had been exhausted and the\n> industry had the opportunity to mature.\n>\n> I had always assumed initial centralisation would be harmless since miners\n> have no incentive to harm the network. This does not consider the risk of a\n> single entity with sufficient power and either poor, malicious or coerced\n> decision making. I now believe that such centralisation poses a huge risk\n> to the security of Bitcoin and preemptive action needs to be taken to\n> protect the network from malicious actions by any party able to exert\n> influence over a substantial portion of SHA256 hardware.\n>\n> Inspired by UASF, I believe we should implement a Malicious miner Reactive\n> Proof of Work Additions (MR POWA).\n>\n> This would be a hard fork activated in response to a malicious attempt by\n> a hashpower majority to introduce a contentious hard fork.\n>\n> The activation would occur once a fork was detected violating protocol\n> (likely oversize blocks) with a majority of hashpower. The threshold and\n> duration for activation would need to be carefully considered.\n>\n> I don\u2019t think we should eliminate SHA256 as a hashing method and change\n> POW entirely. That would be throwing the baby out with the bathwater and\n> hurt the non-malicious miners who have invested in hardware, making it\n> harder to gain their support.\n>\n> Instead I believe we should introduce multiple new proofs of work that are\n> already established and proven within existing altcoin implementations. As\n> an example we could add Scrypt, Ethash and Equihash. Much of the code and\n> mining infrastructure already exists. Diversification of hardware (a mix of\n> CPU and memory intensive methods) would also be positive for\n> decentralisation. Initial difficulty could simply be an estimated portion\n> of existing infrastructure.\n>\n> This example would mean 4 proofs of work with 40 minute block target\n> difficulty for each. There could also be a rule that two different proofs\n> of work must find a block before a method can start hashing again. This\n> means there would only be 50% of hardware hashing at a time, and a sudden\n> gain or drop in hashpower from a particular method does not dramatically\n> impact the functioning of the network between difficulty adjustments. This\n> also adds protection from attacks by the malicious SHA256 hashpower which\n> could even be required to wait until all other methods have found a block\n> before being allowed to hash again.\n>\n> 50% hashing time would mean that the cost of electricity in relation to\n> hardware would fall by 50%, reducing some of the centralising impact of\n> subsidised or inexpensive electricity in some regions over others.\n>\n> Such a hard fork could also, counter-intuitively, introduce a block size\n> increase since while we\u2019re hard forking it makes sense to minimise the\n> number of future hard forks where possible. It could also activate SegWit\n> if it hasn\u2019t already.\n>\n> The beauty of this method is that it creates a huge risk to any malicious\n> actor trying to abuse their position. Ideally, MR POWA would just serve as\n> a deterrent and never activate.\n>\n> If consensus were to form around a hard fork in the future nodes would be\n> able to upgrade and MR POWA, while automatically activating on non-upgraded\n> nodes, would be of no economic significance: a vestigial chain immediately\n> abandoned with no miner incentive.\n>\n> I think this would be a great way to help prevent malicious use of\n> hashpower to harm the network. This is the beauty of Bitcoin: for any road\n> block that emerges the economic majority can always find a way around.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-- \nAndrew Johnson\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170320/8083629e/attachment.html>"
            },
            {
                "author": "John Hardy",
                "date": "2017-03-20T15:46:28",
                "message_text_only": "> By doing this you're significantly changing the economic incentives behind bitcoin mining. How can you reliably invest in hardware if you have no idea when or if your profitability is going to be cut by 50-75% based on a whim?\n\n\nOf course, that's why this is a last resort, successfully activated only in response to a contentious hard fork. If it succeeds just once it should help prevent the same situation occurring in the future.\n\n\n> You may also inadvertently create an entirely new attack vector if 50-75% of the SHA256 hardware is taken offline and purchased by an entity who intends to do harm to the network.\n\nHow so? If you have four proof of work methods, that 50-75% of SHA256 hashpower would equate to 13-18% of total hashpower. If you can harm the network with this much hashpower bitcoin was DOA.\n\n________________________________\nFrom: Andrew Johnson <andrew.johnson83 at gmail.com>\nSent: Monday, March 20, 2017 3:38:01 PM\nTo: Bitcoin Protocol Discussion; John Hardy\nSubject: Re: [bitcoin-dev] Malice Reactive Proof of Work Additions (MR POWA): Protecting Bitcoin from malicious miners\n\nBy doing this you're significantly changing the economic incentives behind bitcoin mining. How can you reliably invest in hardware if you have no idea when or if your profitability is going to be cut by 50-75% based on a whim?\n\nYou may also inadvertently create an entirely new attack vector if 50-75% of the SHA256 hardware is taken offline and purchased by an entity who intends to do harm to the network.\n\nBitcoin only works if most miners are honest, this has been known since the beginning.\n\nOn Mon, Mar 20, 2017 at 9:50 AM John Hardy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n\nI\u2019m very worried about the state of miner centralisation in Bitcoin.\n\nI always felt the centralising effects of ASIC manufacturing would resolve themselves once the first mover advantage had been exhausted and the industry had the opportunity to mature.\n\nI had always assumed initial centralisation would be harmless since miners have no incentive to harm the network. This does not consider the risk of a single entity with sufficient power and either poor, malicious or coerced decision making. I now believe that such centralisation poses a huge risk to the security of Bitcoin and preemptive action needs to be taken to protect the network from malicious actions by any party able to exert influence over a substantial portion of SHA256 hardware.\n\nInspired by UASF, I believe we should implement a Malicious miner Reactive Proof of Work Additions (MR POWA).\n\nThis would be a hard fork activated in response to a malicious attempt by a hashpower majority to introduce a contentious hard fork.\n\nThe activation would occur once a fork was detected violating protocol (likely oversize blocks) with a majority of hashpower. The threshold and duration for activation would need to be carefully considered.\n\nI don\u2019t think we should eliminate SHA256 as a hashing method and change POW entirely. That would be throwing the baby out with the bathwater and hurt the non-malicious miners who have invested in hardware, making it harder to gain their support.\n\nInstead I believe we should introduce multiple new proofs of work that are already established and proven within existing altcoin implementations. As an example we could add Scrypt, Ethash and Equihash. Much of the code and mining infrastructure already exists. Diversification of hardware (a mix of CPU and memory intensive methods) would also be positive for decentralisation. Initial difficulty could simply be an estimated portion of existing infrastructure.\n\nThis example would mean 4 proofs of work with 40 minute block target difficulty for each. There could also be a rule that two different proofs of work must find a block before a method can start hashing again. This means there would only be 50% of hardware hashing at a time, and a sudden gain or drop in hashpower from a particular method does not dramatically impact the functioning of the network between difficulty adjustments. This also adds protection from attacks by the malicious SHA256 hashpower which could even be required to wait until all other methods have found a block before being allowed to hash again.\n\n50% hashing time would mean that the cost of electricity in relation to hardware would fall by 50%, reducing some of the centralising impact of subsidised or inexpensive electricity in some regions over others.\n\nSuch a hard fork could also, counter-intuitively, introduce a block size increase since while we\u2019re hard forking it makes sense to minimise the number of future hard forks where possible. It could also activate SegWit if it hasn\u2019t already.\n\nThe beauty of this method is that it creates a huge risk to any malicious actor trying to abuse their position. Ideally, MR POWA would just serve as a deterrent and never activate.\n\nIf consensus were to form around a hard fork in the future nodes would be able to upgrade and MR POWA, while automatically activating on non-upgraded nodes, would be of no economic significance: a vestigial chain immediately abandoned with no miner incentive.\n\nI think this would be a great way to help prevent malicious use of hashpower to harm the network. This is the beauty of Bitcoin: for any road block that emerges the economic majority can always find a way around.\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n--\nAndrew Johnson\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170320/f7748943/attachment-0001.html>"
            },
            {
                "author": "Andrew Johnson",
                "date": "2017-03-20T16:10:32",
                "message_text_only": "On Mon, Mar 20, 2017 at 10:47 AM John Hardy <john at seebitcoin.com> wrote:\n\n> By doing this you're significantly changing the economic incentives\nbehind bitcoin mining. How can you reliably invest in hardware if you have\nno idea when or if your profitability is going to be cut by 50-75% based on\na whim?\n\n\nOf course, that's why this is a last resort, successfully activated only in\nresponse to a contentious hard fork. If it succeeds just once it should\nhelp prevent the same situation occurring in the future.\n\n\nThis seems a lot more disruptive to the network than a simple hard fork to\nincrease the block size.  Compromise is the answer here, not taking our\nball and going home, in my humble opinion.\n\n> You may also inadvertently create an entirely new attack vector if 50-75%\nof the SHA256 hardware is taken offline and purchased by an entity who\nintends to do harm to the network.\n\nHow so? If you have four proof of work methods, that 50-75% of SHA256\nhashpower would equate to 13-18% of total hashpower. If you can harm the\nnetwork with this much hashpower bitcoin was DOA.\n\n\nI'm assuming the difficulty on the SHA256 PoW would drop by 50-75% as\nwell.  So not nearly as bad as it would be with a single PoW and that much\nhardware were available to an adversary, you're correct.\n\nHow would you handle starting difficulty on the other 3 PoWs?  Seems like\nit would be a race to start with, which strikes me as another potential\nattack vector until the amount of hardware and price of production balances\nwith the price of the coin(which is likely to be volatile during this\nturbulent period).  Unless you start the difficulty at a higher value, then\nyou're just doing centralized economic planning and hoping you got the\nnumbers right so that you get the right balance of security vs incentive to\ndo malicious things like double spends.\n\nAll the solutions that people keep positing(such as Luke's complete PoW\nchange) seem like they'd be a whole lot more disruptive to the network than\nan EC fork would be.\n\nIsn't the main reason that everyone is up in arms because a contentious\nhard fork is dangerous?  I just don't understand how any of these solutions\nare safer.\n\nAt that point we've lost our claim to fame, that changes to the protocol\nare hard and you can trust that your value is safe.  What you're advocating\nseems like it would result in a huge drop in hashing security.\n\n------------------------------\n*From:* Andrew Johnson <andrew.johnson83 at gmail.com>\n*Sent:* Monday, March 20, 2017 3:38:01 PM\n*To:* Bitcoin Protocol Discussion; John Hardy\n*Subject:* Re: [bitcoin-dev] Malice Reactive Proof of Work Additions (MR\nPOWA): Protecting Bitcoin from malicious miners\n\nBy doing this you're significantly changing the economic incentives behind\nbitcoin mining. How can you reliably invest in hardware if you have no idea\nwhen or if your profitability is going to be cut by 50-75% based on a whim?\n\nYou may also inadvertently create an entirely new attack vector if 50-75%\nof the SHA256 hardware is taken offline and purchased by an entity who\nintends to do harm to the network.\n\nBitcoin only works if most miners are honest, this has been known since the\nbeginning.\n\nOn Mon, Mar 20, 2017 at 9:50 AM John Hardy via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\nI\u2019m very worried about the state of miner centralisation in Bitcoin.\n\nI always felt the centralising effects of ASIC manufacturing would resolve\nthemselves once the first mover advantage had been exhausted and the\nindustry had the opportunity to mature.\n\nI had always assumed initial centralisation would be harmless since miners\nhave no incentive to harm the network. This does not consider the risk of a\nsingle entity with sufficient power and either poor, malicious or coerced\ndecision making. I now believe that such centralisation poses a huge risk\nto the security of Bitcoin and preemptive action needs to be taken to\nprotect the network from malicious actions by any party able to exert\ninfluence over a substantial portion of SHA256 hardware.\n\nInspired by UASF, I believe we should implement a Malicious miner Reactive\nProof of Work Additions (MR POWA).\n\nThis would be a hard fork activated in response to a malicious attempt by a\nhashpower majority to introduce a contentious hard fork.\n\nThe activation would occur once a fork was detected violating protocol\n(likely oversize blocks) with a majority of hashpower. The threshold and\nduration for activation would need to be carefully considered.\n\nI don\u2019t think we should eliminate SHA256 as a hashing method and change POW\nentirely. That would be throwing the baby out with the bathwater and hurt\nthe non-malicious miners who have invested in hardware, making it harder to\ngain their support.\n\nInstead I believe we should introduce multiple new proofs of work that are\nalready established and proven within existing altcoin implementations. As\nan example we could add Scrypt, Ethash and Equihash. Much of the code and\nmining infrastructure already exists. Diversification of hardware (a mix of\nCPU and memory intensive methods) would also be positive for\ndecentralisation. Initial difficulty could simply be an estimated portion\nof existing infrastructure.\n\nThis example would mean 4 proofs of work with 40 minute block target\ndifficulty for each. There could also be a rule that two different proofs\nof work must find a block before a method can start hashing again. This\nmeans there would only be 50% of hardware hashing at a time, and a sudden\ngain or drop in hashpower from a particular method does not dramatically\nimpact the functioning of the network between difficulty adjustments. This\nalso adds protection from attacks by the malicious SHA256 hashpower which\ncould even be required to wait until all other methods have found a block\nbefore being allowed to hash again.\n\n50% hashing time would mean that the cost of electricity in relation to\nhardware would fall by 50%, reducing some of the centralising impact of\nsubsidised or inexpensive electricity in some regions over others.\n\nSuch a hard fork could also, counter-intuitively, introduce a block size\nincrease since while we\u2019re hard forking it makes sense to minimise the\nnumber of future hard forks where possible. It could also activate SegWit\nif it hasn\u2019t already.\n\nThe beauty of this method is that it creates a huge risk to any malicious\nactor trying to abuse their position. Ideally, MR POWA would just serve as\na deterrent and never activate.\n\nIf consensus were to form around a hard fork in the future nodes would be\nable to upgrade and MR POWA, while automatically activating on non-upgraded\nnodes, would be of no economic significance: a vestigial chain immediately\nabandoned with no miner incentive.\n\nI think this would be a great way to help prevent malicious use of\nhashpower to harm the network. This is the beauty of Bitcoin: for any road\nblock that emerges the economic majority can always find a way around.\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-- \nAndrew Johnson\n\n-- \nAndrew Johnson\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170320/c4a231a7/attachment-0001.html>"
            },
            {
                "author": "Marcos mayorga",
                "date": "2017-03-20T15:55:41",
                "message_text_only": "Hi,\nJust a thought,\nBitcoin developers shouldn't care about miners business model, they can\nalways sell their hw and close the bz as soon as bitcoin hardforks to\nbetter ways of doing.\nJust focus on making a better cryptocurrency, the more decentralized the\nbest.\n\nM\n\n> By doing this you're significantly changing the economic incentives behind\n> bitcoin mining. How can you reliably invest in hardware if you have no\n> idea\n> when or if your profitability is going to be cut by 50-75% based on a\n> whim?\n>\n> You may also inadvertently create an entirely new attack vector if 50-75%\n> of the SHA256 hardware is taken offline and purchased by an entity who\n> intends to do harm to the network.\n>\n> Bitcoin only works if most miners are honest, this has been known since\n> the\n> beginning.\n>\n> On Mon, Mar 20, 2017 at 9:50 AM John Hardy via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> I\u00e2\u20ac\u2122m very worried about the state of miner centralisation in Bitcoin.\n>>\n>> I always felt the centralising effects of ASIC manufacturing would\n>> resolve\n>> themselves once the first mover advantage had been exhausted and the\n>> industry had the opportunity to mature.\n>>\n>> I had always assumed initial centralisation would be harmless since\n>> miners\n>> have no incentive to harm the network. This does not consider the risk\n>> of a\n>> single entity with sufficient power and either poor, malicious or\n>> coerced\n>> decision making. I now believe that such centralisation poses a huge\n>> risk\n>> to the security of Bitcoin and preemptive action needs to be taken to\n>> protect the network from malicious actions by any party able to exert\n>> influence over a substantial portion of SHA256 hardware.\n>>\n>> Inspired by UASF, I believe we should implement a Malicious miner\n>> Reactive\n>> Proof of Work Additions (MR POWA).\n>>\n>> This would be a hard fork activated in response to a malicious attempt\n>> by\n>> a hashpower majority to introduce a contentious hard fork.\n>>\n>> The activation would occur once a fork was detected violating protocol\n>> (likely oversize blocks) with a majority of hashpower. The threshold and\n>> duration for activation would need to be carefully considered.\n>>\n>> I don\u00e2\u20ac\u2122t think we should eliminate SHA256 as a hashing method and\n>> change\n>> POW entirely. That would be throwing the baby out with the bathwater and\n>> hurt the non-malicious miners who have invested in hardware, making it\n>> harder to gain their support.\n>>\n>> Instead I believe we should introduce multiple new proofs of work that\n>> are\n>> already established and proven within existing altcoin implementations.\n>> As\n>> an example we could add Scrypt, Ethash and Equihash. Much of the code\n>> and\n>> mining infrastructure already exists. Diversification of hardware (a mix\n>> of\n>> CPU and memory intensive methods) would also be positive for\n>> decentralisation. Initial difficulty could simply be an estimated\n>> portion\n>> of existing infrastructure.\n>>\n>> This example would mean 4 proofs of work with 40 minute block target\n>> difficulty for each. There could also be a rule that two different\n>> proofs\n>> of work must find a block before a method can start hashing again. This\n>> means there would only be 50% of hardware hashing at a time, and a\n>> sudden\n>> gain or drop in hashpower from a particular method does not dramatically\n>> impact the functioning of the network between difficulty adjustments.\n>> This\n>> also adds protection from attacks by the malicious SHA256 hashpower\n>> which\n>> could even be required to wait until all other methods have found a\n>> block\n>> before being allowed to hash again.\n>>\n>> 50% hashing time would mean that the cost of electricity in relation to\n>> hardware would fall by 50%, reducing some of the centralising impact of\n>> subsidised or inexpensive electricity in some regions over others.\n>>\n>> Such a hard fork could also, counter-intuitively, introduce a block size\n>> increase since while we\u00e2\u20ac\u2122re hard forking it makes sense to minimise the\n>> number of future hard forks where possible. It could also activate\n>> SegWit\n>> if it hasn\u00e2\u20ac\u2122t already.\n>>\n>> The beauty of this method is that it creates a huge risk to any\n>> malicious\n>> actor trying to abuse their position. Ideally, MR POWA would just serve\n>> as\n>> a deterrent and never activate.\n>>\n>> If consensus were to form around a hard fork in the future nodes would\n>> be\n>> able to upgrade and MR POWA, while automatically activating on\n>> non-upgraded\n>> nodes, would be of no economic significance: a vestigial chain\n>> immediately\n>> abandoned with no miner incentive.\n>>\n>> I think this would be a great way to help prevent malicious use of\n>> hashpower to harm the network. This is the beauty of Bitcoin: for any\n>> road\n>> block that emerges the economic majority can always find a way around.\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> --\n> Andrew Johnson\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Nick ODell",
                "date": "2017-03-20T18:02:52",
                "message_text_only": "Chain work currently means the expected number of sha256d evaluations\nneeded to build a chain. Given that these hash functions are not equally\nhard, what should the new definition of chain work be?\n\nOn Mon, Mar 20, 2017 at 9:38 AM, Andrew Johnson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> By doing this you're significantly changing the economic incentives behind\n> bitcoin mining. How can you reliably invest in hardware if you have no idea\n> when or if your profitability is going to be cut by 50-75% based on a whim?\n>\n> You may also inadvertently create an entirely new attack vector if 50-75%\n> of the SHA256 hardware is taken offline and purchased by an entity who\n> intends to do harm to the network.\n>\n> Bitcoin only works if most miners are honest, this has been known since\n> the beginning.\n>\n> On Mon, Mar 20, 2017 at 9:50 AM John Hardy via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> I\u2019m very worried about the state of miner centralisation in Bitcoin.\n>>\n>> I always felt the centralising effects of ASIC manufacturing would\n>> resolve themselves once the first mover advantage had been exhausted and\n>> the industry had the opportunity to mature.\n>>\n>> I had always assumed initial centralisation would be harmless since\n>> miners have no incentive to harm the network. This does not consider the\n>> risk of a single entity with sufficient power and either poor, malicious or\n>> coerced decision making. I now believe that such centralisation poses a\n>> huge risk to the security of Bitcoin and preemptive action needs to be\n>> taken to protect the network from malicious actions by any party able to\n>> exert influence over a substantial portion of SHA256 hardware.\n>>\n>> Inspired by UASF, I believe we should implement a Malicious miner\n>> Reactive Proof of Work Additions (MR POWA).\n>>\n>> This would be a hard fork activated in response to a malicious attempt by\n>> a hashpower majority to introduce a contentious hard fork.\n>>\n>> The activation would occur once a fork was detected violating protocol\n>> (likely oversize blocks) with a majority of hashpower. The threshold and\n>> duration for activation would need to be carefully considered.\n>>\n>> I don\u2019t think we should eliminate SHA256 as a hashing method and change\n>> POW entirely. That would be throwing the baby out with the bathwater and\n>> hurt the non-malicious miners who have invested in hardware, making it\n>> harder to gain their support.\n>>\n>> Instead I believe we should introduce multiple new proofs of work that\n>> are already established and proven within existing altcoin implementations.\n>> As an example we could add Scrypt, Ethash and Equihash. Much of the code\n>> and mining infrastructure already exists. Diversification of hardware (a\n>> mix of CPU and memory intensive methods) would also be positive for\n>> decentralisation. Initial difficulty could simply be an estimated portion\n>> of existing infrastructure.\n>>\n>> This example would mean 4 proofs of work with 40 minute block target\n>> difficulty for each. There could also be a rule that two different proofs\n>> of work must find a block before a method can start hashing again. This\n>> means there would only be 50% of hardware hashing at a time, and a sudden\n>> gain or drop in hashpower from a particular method does not dramatically\n>> impact the functioning of the network between difficulty adjustments. This\n>> also adds protection from attacks by the malicious SHA256 hashpower which\n>> could even be required to wait until all other methods have found a block\n>> before being allowed to hash again.\n>>\n>> 50% hashing time would mean that the cost of electricity in relation to\n>> hardware would fall by 50%, reducing some of the centralising impact of\n>> subsidised or inexpensive electricity in some regions over others.\n>>\n>> Such a hard fork could also, counter-intuitively, introduce a block size\n>> increase since while we\u2019re hard forking it makes sense to minimise the\n>> number of future hard forks where possible. It could also activate SegWit\n>> if it hasn\u2019t already.\n>>\n>> The beauty of this method is that it creates a huge risk to any malicious\n>> actor trying to abuse their position. Ideally, MR POWA would just serve as\n>> a deterrent and never activate.\n>>\n>> If consensus were to form around a hard fork in the future nodes would be\n>> able to upgrade and MR POWA, while automatically activating on non-upgraded\n>> nodes, would be of no economic significance: a vestigial chain immediately\n>> abandoned with no miner incentive.\n>>\n>> I think this would be a great way to help prevent malicious use of\n>> hashpower to harm the network. This is the beauty of Bitcoin: for any road\n>> block that emerges the economic majority can always find a way around.\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> --\n> Andrew Johnson\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170320/873357b6/attachment-0001.html>"
            },
            {
                "author": "David Vorick",
                "date": "2017-03-20T18:51:51",
                "message_text_only": "I am in support of having multiple PoW forks to choose from, but it is\nindeed problematic to have one chain running a rotation of algorithms.\n\nThe reason I support multiple algos is because we don't want an attacker\nsecretly making asics ahead of time in the event of an emergency PoW fork.\nWe want them to be uncertain which of a large selection of algorithms are\ngoing to be used, making pre-emptive asic manufacturing more difficult.\n\nBut once an algorithm is chosen that should be the end of the story, just\none algo without rotation.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170320/ceaa8c60/attachment.html>"
            },
            {
                "author": "John Hardy",
                "date": "2017-03-20T21:29:29",
                "message_text_only": "> Chain work currently means the expected number of sha256d evaluations needed to build a chain. Given that these hash functions are not equally hard, what should the new definition of chain work be?\n\nThey're not equally hard, but they can be equally relative.\n\nIf you had 4 proofs of work you can weigh them each at 25% and compare the overall chain weight from there, shouldn't be difficult.\n\nInitially, some hardware would have an advantage, but over time the market will always average itself out.\n\n\n________________________________\nFrom: bitcoin-dev-bounces at lists.linuxfoundation.org <bitcoin-dev-bounces at lists.linuxfoundation.org> on behalf of Nick ODell via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nSent: Monday, March 20, 2017 6:02:52 PM\nTo: Andrew Johnson; Bitcoin Protocol Discussion\nSubject: Re: [bitcoin-dev] Malice Reactive Proof of Work Additions (MR POWA): Protecting Bitcoin from malicious miners\n\nChain work currently means the expected number of sha256d evaluations needed to build a chain. Given that these hash functions are not equally hard, what should the new definition of chain work be?\n\nOn Mon, Mar 20, 2017 at 9:38 AM, Andrew Johnson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\nBy doing this you're significantly changing the economic incentives behind bitcoin mining. How can you reliably invest in hardware if you have no idea when or if your profitability is going to be cut by 50-75% based on a whim?\n\nYou may also inadvertently create an entirely new attack vector if 50-75% of the SHA256 hardware is taken offline and purchased by an entity who intends to do harm to the network.\n\nBitcoin only works if most miners are honest, this has been known since the beginning.\n\nOn Mon, Mar 20, 2017 at 9:50 AM John Hardy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n\nI\u2019m very worried about the state of miner centralisation in Bitcoin.\n\nI always felt the centralising effects of ASIC manufacturing would resolve themselves once the first mover advantage had been exhausted and the industry had the opportunity to mature.\n\nI had always assumed initial centralisation would be harmless since miners have no incentive to harm the network. This does not consider the risk of a single entity with sufficient power and either poor, malicious or coerced decision making. I now believe that such centralisation poses a huge risk to the security of Bitcoin and preemptive action needs to be taken to protect the network from malicious actions by any party able to exert influence over a substantial portion of SHA256 hardware.\n\nInspired by UASF, I believe we should implement a Malicious miner Reactive Proof of Work Additions (MR POWA).\n\nThis would be a hard fork activated in response to a malicious attempt by a hashpower majority to introduce a contentious hard fork.\n\nThe activation would occur once a fork was detected violating protocol (likely oversize blocks) with a majority of hashpower. The threshold and duration for activation would need to be carefully considered.\n\nI don\u2019t think we should eliminate SHA256 as a hashing method and change POW entirely. That would be throwing the baby out with the bathwater and hurt the non-malicious miners who have invested in hardware, making it harder to gain their support.\n\nInstead I believe we should introduce multiple new proofs of work that are already established and proven within existing altcoin implementations. As an example we could add Scrypt, Ethash and Equihash. Much of the code and mining infrastructure already exists. Diversification of hardware (a mix of CPU and memory intensive methods) would also be positive for decentralisation. Initial difficulty could simply be an estimated portion of existing infrastructure.\n\nThis example would mean 4 proofs of work with 40 minute block target difficulty for each. There could also be a rule that two different proofs of work must find a block before a method can start hashing again. This means there would only be 50% of hardware hashing at a time, and a sudden gain or drop in hashpower from a particular method does not dramatically impact the functioning of the network between difficulty adjustments. This also adds protection from attacks by the malicious SHA256 hashpower which could even be required to wait until all other methods have found a block before being allowed to hash again.\n\n50% hashing time would mean that the cost of electricity in relation to hardware would fall by 50%, reducing some of the centralising impact of subsidised or inexpensive electricity in some regions over others.\n\nSuch a hard fork could also, counter-intuitively, introduce a block size increase since while we\u2019re hard forking it makes sense to minimise the number of future hard forks where possible. It could also activate SegWit if it hasn\u2019t already.\n\nThe beauty of this method is that it creates a huge risk to any malicious actor trying to abuse their position. Ideally, MR POWA would just serve as a deterrent and never activate.\n\nIf consensus were to form around a hard fork in the future nodes would be able to upgrade and MR POWA, while automatically activating on non-upgraded nodes, would be of no economic significance: a vestigial chain immediately abandoned with no miner incentive.\n\nI think this would be a great way to help prevent malicious use of hashpower to harm the network. This is the beauty of Bitcoin: for any road block that emerges the economic majority can always find a way around.\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n--\nAndrew Johnson\n\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170320/46f7569c/attachment-0001.html>"
            },
            {
                "author": "Bram Cohen",
                "date": "2017-03-20T17:49:59",
                "message_text_only": "It's possible to switch PoW algorithms with a soft fork rather than a hard\nfork. You make it so that there are two different PoWs, the old one and the\nnew one, and each old-style block has to reference a new-style block and\ncontain the exact same transactions. The new work rule is that the weighted\ngeometric mean of the quality of the new-style block and the old-style\nblock has to exceed the work threshold, with the weighting starting almost\nentirely on the old-style block and shifting gradually over to the\nnew-style block until in the end the amount of work to generate the\nold-style block is completely trivial and doesn't matter any more.\n\nThe most interesting part of the whole thing is keeping it so that the new\nwork limit is consistently the limiting factor on mining difficulty rather\nthan the old one interfering. Getting that to work right is an interesting\nproblem which I'm not sure how to do off the top of my head but I believe\nis manageable.\n\nUsing many PoWs is a bad idea, that generally gets the worst of everything\nrather than the best. There are two ways to go with a PoW, either make it\nas advantaged on custom hardware as possible, which means sha3, or make it\nas difficult to ASIC as possible, which at this point means cuckoo since\nthere's already hardware for equihash.\n\nOn Sat, Mar 18, 2017 at 9:01 AM, John Hardy via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I\u2019m very worried about the state of miner centralisation in Bitcoin.\n>\n> I always felt the centralising effects of ASIC manufacturing would resolve\n> themselves once the first mover advantage had been exhausted and the\n> industry had the opportunity to mature.\n>\n> I had always assumed initial centralisation would be harmless since miners\n> have no incentive to harm the network. This does not consider the risk of a\n> single entity with sufficient power and either poor, malicious or coerced\n> decision making. I now believe that such centralisation poses a huge risk\n> to the security of Bitcoin and preemptive action needs to be taken to\n> protect the network from malicious actions by any party able to exert\n> influence over a substantial portion of SHA256 hardware.\n>\n> Inspired by UASF, I believe we should implement a Malicious miner Reactive\n> Proof of Work Additions (MR POWA).\n>\n> This would be a hard fork activated in response to a malicious attempt by\n> a hashpower majority to introduce a contentious hard fork.\n>\n> The activation would occur once a fork was detected violating protocol\n> (likely oversize blocks) with a majority of hashpower. The threshold and\n> duration for activation would need to be carefully considered.\n>\n> I don\u2019t think we should eliminate SHA256 as a hashing method and change\n> POW entirely. That would be throwing the baby out with the bathwater and\n> hurt the non-malicious miners who have invested in hardware, making it\n> harder to gain their support.\n>\n> Instead I believe we should introduce multiple new proofs of work that are\n> already established and proven within existing altcoin implementations. As\n> an example we could add Scrypt, Ethash and Equihash. Much of the code and\n> mining infrastructure already exists. Diversification of hardware (a mix of\n> CPU and memory intensive methods) would also be positive for\n> decentralisation. Initial difficulty could simply be an estimated portion\n> of existing infrastructure.\n>\n> This example would mean 4 proofs of work with 40 minute block target\n> difficulty for each. There could also be a rule that two different proofs\n> of work must find a block before a method can start hashing again. This\n> means there would only be 50% of hardware hashing at a time, and a sudden\n> gain or drop in hashpower from a particular method does not dramatically\n> impact the functioning of the network between difficulty adjustments. This\n> also adds protection from attacks by the malicious SHA256 hashpower which\n> could even be required to wait until all other methods have found a block\n> before being allowed to hash again.\n>\n> 50% hashing time would mean that the cost of electricity in relation to\n> hardware would fall by 50%, reducing some of the centralising impact of\n> subsidised or inexpensive electricity in some regions over others.\n>\n> Such a hard fork could also, counter-intuitively, introduce a block size\n> increase since while we\u2019re hard forking it makes sense to minimise the\n> number of future hard forks where possible. It could also activate SegWit\n> if it hasn\u2019t already.\n>\n> The beauty of this method is that it creates a huge risk to any malicious\n> actor trying to abuse their position. Ideally, MR POWA would just serve as\n> a deterrent and never activate.\n>\n> If consensus were to form around a hard fork in the future nodes would be\n> able to upgrade and MR POWA, while automatically activating on non-upgraded\n> nodes, would be of no economic significance: a vestigial chain immediately\n> abandoned with no miner incentive.\n>\n> I think this would be a great way to help prevent malicious use of\n> hashpower to harm the network. This is the beauty of Bitcoin: for any road\n> block that emerges the economic majority can always find a way around.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170320/2d622ba2/attachment.html>"
            },
            {
                "author": "John Hardy",
                "date": "2017-03-20T21:23:17",
                "message_text_only": "> It's possible to switch PoW algorithms with a soft fork rather than a hard fork.\n\n\nYou put forward an interesting idea if it could work, but in the adversarial emergency where an entity is contentiously using a POW monopoly, a hard fork would likely be a far easier and more efficient response.\n\n\nThat said unless I'm missing something I can't see how it would work without still requiring a hard fork since you still need an SHA256 block of sufficient difficulty for the existing network to accept. If the holders of SHA256 hardware didn't want to make their equipment obsolete (likely) they simply would refuse to mine these alternate PoW blocks. I guess a UASF would be an option to force this, but without co-operation (Turkeys voting for Christmas is the British idiom) you'd still end up requiring a hard fork proof of difficulty change, which kind of defeats the purpose?\n\n\n> Using many PoWs is a bad idea, that generally gets the worst of everything rather than the best.\n\n\nUpon what do you base this assertion?\n\n\n________________________________\nFrom: Bram Cohen <bram at bittorrent.com>\nSent: Monday, March 20, 2017 5:49:59 PM\nTo: John Hardy; Bitcoin Protocol Discussion\nSubject: Re: [bitcoin-dev] Malice Reactive Proof of Work Additions (MR POWA): Protecting Bitcoin from malicious miners\n\nIt's possible to switch PoW algorithms with a soft fork rather than a hard fork. You make it so that there are two different PoWs, the old one and the new one, and each old-style block has to reference a new-style block and contain the exact same transactions. The new work rule is that the weighted geometric mean of the quality of the new-style block and the old-style block has to exceed the work threshold, with the weighting starting almost entirely on the old-style block and shifting gradually over to the new-style block until in the end the amount of work to generate the old-style block is completely trivial and doesn't matter any more.\n\nThe most interesting part of the whole thing is keeping it so that the new work limit is consistently the limiting factor on mining difficulty rather than the old one interfering. Getting that to work right is an interesting problem which I'm not sure how to do off the top of my head but I believe is manageable.\n\nUsing many PoWs is a bad idea, that generally gets the worst of everything rather than the best. There are two ways to go with a PoW, either make it as advantaged on custom hardware as possible, which means sha3, or make it as difficult to ASIC as possible, which at this point means cuckoo since there's already hardware for equihash.\n\nOn Sat, Mar 18, 2017 at 9:01 AM, John Hardy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n\nI\u2019m very worried about the state of miner centralisation in Bitcoin.\n\nI always felt the centralising effects of ASIC manufacturing would resolve themselves once the first mover advantage had been exhausted and the industry had the opportunity to mature.\n\nI had always assumed initial centralisation would be harmless since miners have no incentive to harm the network. This does not consider the risk of a single entity with sufficient power and either poor, malicious or coerced decision making. I now believe that such centralisation poses a huge risk to the security of Bitcoin and preemptive action needs to be taken to protect the network from malicious actions by any party able to exert influence over a substantial portion of SHA256 hardware.\n\nInspired by UASF, I believe we should implement a Malicious miner Reactive Proof of Work Additions (MR POWA).\n\nThis would be a hard fork activated in response to a malicious attempt by a hashpower majority to introduce a contentious hard fork.\n\nThe activation would occur once a fork was detected violating protocol (likely oversize blocks) with a majority of hashpower. The threshold and duration for activation would need to be carefully considered.\n\nI don\u2019t think we should eliminate SHA256 as a hashing method and change POW entirely. That would be throwing the baby out with the bathwater and hurt the non-malicious miners who have invested in hardware, making it harder to gain their support.\n\nInstead I believe we should introduce multiple new proofs of work that are already established and proven within existing altcoin implementations. As an example we could add Scrypt, Ethash and Equihash. Much of the code and mining infrastructure already exists. Diversification of hardware (a mix of CPU and memory intensive methods) would also be positive for decentralisation. Initial difficulty could simply be an estimated portion of existing infrastructure.\n\nThis example would mean 4 proofs of work with 40 minute block target difficulty for each. There could also be a rule that two different proofs of work must find a block before a method can start hashing again. This means there would only be 50% of hardware hashing at a time, and a sudden gain or drop in hashpower from a particular method does not dramatically impact the functioning of the network between difficulty adjustments. This also adds protection from attacks by the malicious SHA256 hashpower which could even be required to wait until all other methods have found a block before being allowed to hash again.\n\n50% hashing time would mean that the cost of electricity in relation to hardware would fall by 50%, reducing some of the centralising impact of subsidised or inexpensive electricity in some regions over others.\n\nSuch a hard fork could also, counter-intuitively, introduce a block size increase since while we\u2019re hard forking it makes sense to minimise the number of future hard forks where possible. It could also activate SegWit if it hasn\u2019t already.\n\nThe beauty of this method is that it creates a huge risk to any malicious actor trying to abuse their position. Ideally, MR POWA would just serve as a deterrent and never activate.\n\nIf consensus were to form around a hard fork in the future nodes would be able to upgrade and MR POWA, while automatically activating on non-upgraded nodes, would be of no economic significance: a vestigial chain immediately abandoned with no miner incentive.\n\nI think this would be a great way to help prevent malicious use of hashpower to harm the network. This is the beauty of Bitcoin: for any road block that emerges the economic majority can always find a way around.\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170320/0d8e9f95/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Malice Reactive Proof of Work Additions (MR POWA): Protecting Bitcoin from malicious miners",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Marcos mayorga",
                "Andrew Johnson",
                "David Vorick",
                "Nick ODell",
                "John Hardy",
                "Bram Cohen"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 51758
        }
    },
    {
        "title": "[bitcoin-dev] Inquiry: Transaction Tiering",
        "thread_messages": [
            {
                "author": "Martin Stolze",
                "date": "2017-03-20T20:12:36",
                "message_text_only": "Hi Team,\nI would like to find out what the current consensus on transaction tiering is.\n\nBackground: The current protocol enables two parties to transact\nfreely, however, transaction processors (block generators) have the\nauthority to discriminate participants arbitrarily. This is well known\nand it is widely accepted that transaction processors may take\nadvantage of this with little recourse. It is the current consensus\nthat the economic incentives in form of transaction fees are\nsufficient because the transaction processing authorities are assumed\nto be guided by the growth of Bitcoin and the pursuit of profit.\n\nWe can establish that a transaction processing authority does not need\nto actually process transactions and reigns sovereign over the block\nspace they govern. [1] For further discussion I will refer to a\ntransaction processor more aptly as \"Block Space Authority\" (BSA).\n\nCurrently, a user can only signal to all BSA\u2019s (via the mempool) its\ndesire to include her transaction into the ledger. A user can not\nsignal to specific BSA\u2019s, and thus, can not easily carry out business\nin jurisdictions that conform to the users understanding of best\npractice.\n\nAs a participant in the economy in general and of Bitcoin in\nparticular, I desire an ability to decide where I transact. The\ncurrent state of Bitcoin does not allow me to choose my place of\nbusiness. As a consequence, I try to learn what would be the best way\nto conduct my business in good faith. [2]\n\nI have certain minimum requirements towards the constitution of the\nblock space like transparency, forward guidance and risk management.\nMore poignantly, it could also include due diligence to ensure that\nchild labor is not involved in the maintenance of a specific block\nspace, or that the specific block space does not utilize nuclear\nenergy or sources at least 80% of the expended energy from solar\npower. Obviously, preferences can vary widely.\n\nI don\u2019t think there is any way to discard the desire of users to\nchoose their place of business, especially under the consideration\nthat BSA\u2019s have the discretion to choose users transactions already.\nI have identified the following options along the lines of Lawrence\nLessig's concept of Cyberspace: [3]\n\n1. Law: Bilateral Agreement\n\nUsers engage directly with BSA\u2019s to process their transaction.\nTransactions are routed around the mempool. A likely outcome of this\nsolution is the emergence of brokers that sell off block space in a\nsort of secondary market. Wallets may negotiate on behalf of their\nusers. This model has obvious downsides as it involves new middlemen,\nincreases transaction cost beyond the current market price\n(speculation) and potentially reduces performance.\n\n2. Architecture: Remove transaction fees\n\nIf only the block reward functions to incentivise transaction\nprocessing, no differentiation is useful. However, spam/empty blocks\ncould not be prevented and Bitcoin would have to be entirely\nredesigned, potentially losing its censorship resistance.\n\n3. Market: Direct Communication\n\nThrough the core client, BSA\u2019s can offer individual mempools that\nusers can choose to advertise their transactions to. Different BSA\u2019s\ncould receive different transaction fees for the same transaction in\ntheir respective mempool to reflect the preference of the user.\n\nIn Conclusion: In the long term, it is likely that a clearer\ndifferentiation of BSA\u2019s will become important. Today, BSA\u2019s\ncommunicate rarely and it appears that their raison d'etre is not\nnecessarily motivated by good faith towards Bitcoin as a whole. [4] As\nwe move forward it is not just important to attract opportunistic\nplayers that win an individual game but good players that are invited\nto play again in order to win a set of all possible games.\n\nBSA\u2019s establish their authority on cheap access to capital in the form\nof electricity and hardware and the consent and trust of users who\nexpect BSA's to respect and maintain the ledgers integrity.\n\nIn 3 to 8 years, when Bitcoin leaves it\u2019s bootstrapping phase, the\nincentives will squarely fall on the later. [5] Subsequently it seems\nprudent to allow BSA\u2019s to compete for business on other factors than\nprice.\n\nHence my question: What is the current stance of core developers\nregarding the facilitation of direct communication between users and\nBSA\u2019s, possibly through a transaction tiering model?\n\nSincerely,\nMartin Stolze\n\n[1] BSA rules sovereign: (https://twitter.com/JihanWu/status/704476839566135298)\n[2] No direct attribution but solid foundation for business logic\nsince 1899: \u00a7242 ff BGB\n(https://www.gesetze-im-internet.de/englisch_bgb/englisch_bgb.html#p0726)\n[3] Lessig, Code. \"And Other Laws of Cyberspace, Version 2.0.\" (2006).\n[4] The pursuit of profit can come at the expense of Bitcoin:\n(https://twitter.com/ToneVays/status/835233366203072513)\n[5] Satoshi Nakamoto: \"Once a predetermined number of coins have\nentered circulation, the incentive can transition entirely to\ntransaction fees [...]\""
            },
            {
                "author": "Tim Ruffing",
                "date": "2017-03-21T15:18:26",
                "message_text_only": "(I'm not a lawyer...)\n\nI'm not sure if I can make sense of your email.\n\nOn Mon, 2017-03-20 at 20:12 +0000, Martin Stolze via bitcoin-dev wrote:\n> As a participant in the economy in general and of Bitcoin in\n> particular, I desire an ability to decide where I transact. The\n> current state of Bitcoin does not allow me to choose my place of\n> business. As a consequence, I try to learn what would be the best way\n> to conduct my business in good faith. [2]\n\nIgnoring the rest, I don't think that the physical location /\njurisdiction of the miner has any legal implications for law applicable\nto the relationship between sender and receiver of a payment. \n\nThis is not particular to Bitcoin. We're both in Germany (I guess).\nAssume we have a contract without specific agreements and I pay you in\nIcelandic kronur via PayPal (in Luxembourg) and my HTTPS requests to\nPayPal went via Australia and the US. Then German law applies to our\ncontract, nothing in the middle can change that.\n\nAlso ignoring possible security implications, there is just no need for\na mechanism that enables users to select miners. I claim that almost\nnobody cares who will mine a transaction, because it makes no technical\ndifference. If you don't want a specific miner to mine your\ntransaction, then don't use Bitcoin.\n\nTim"
            },
            {
                "author": "Tom Zander",
                "date": "2017-03-29T09:04:18",
                "message_text_only": "On Monday, 20 March 2017 21:12:36 CEST Martin Stolze via bitcoin-dev wrote:\n> Background: The current protocol enables two parties to transact\n> freely, however, transaction processors (block generators) have the\n> authority to discriminate participants arbitrarily.\n\nNag; they don\u2019t have any authority.\n\n> This is well known\n> and it is widely accepted that transaction processors may take\n> advantage of this with little recourse. It is the current consensus\n> that the economic incentives in form of transaction fees are\n> sufficient because the transaction processing authorities are assumed\n> to be guided by the growth of Bitcoin and the pursuit of profit.\n\nThis is not the case, it misunderstands Bitcoin and specifically is \nmisunderstands that Bitcoin is distributed and decentralized.\n\nWhat you call \u201cblock generators\u201d or \u201ctransaction processors\u201d are in reality \ncalled miners and they don\u2019t have any authority to mine or not mine certain \ntransactions. All they have is a business incentive to mine or not mine a \ncertain transaction.\nThis is a crucial distinction as that makes it a economical decision, not a \npolitical.\n\nThe massive distribution of miners creating blocks means that one miner is \nfree to add his political agenda. They can choose to not mine any satoshi-\ndice transactions, should they want. But they can\u2019t stop other miners from \nmining those transactions anyway, and as such this is not a political move \nthat has any effect whatsoever, at the end of the day it is just an \neconomcal decision.\n\nThe rest of your email is based on this misconception as well, and therefore \nthe above answers your question.\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Martin Stolze",
                "date": "2017-03-29T12:48:42",
                "message_text_only": "Ignoring your contradiction of the political and economical. Your\nconception holds under the presupposition that all action of\nhash-power is motivated by 'rational' economic interest. Specifically\na very strict distinction between the profitable and the unprofitable;\nnamely to include transactions based on \"business incentive\",\npresumably on-chain fees.\n\nI am afraid that this conception is a rickety crutch, unfit to\nnavigate current reality.\n\n\nOn Wed, Mar 29, 2017 at 10:04 AM, Tom Zander <tomz at freedommail.ch> wrote:\n> On Monday, 20 March 2017 21:12:36 CEST Martin Stolze via bitcoin-dev wrote:\n>> Background: The current protocol enables two parties to transact\n>> freely, however, transaction processors (block generators) have the\n>> authority to discriminate participants arbitrarily.\n>\n> Nag; they don\u2019t have any authority.\n>\n>> This is well known\n>> and it is widely accepted that transaction processors may take\n>> advantage of this with little recourse. It is the current consensus\n>> that the economic incentives in form of transaction fees are\n>> sufficient because the transaction processing authorities are assumed\n>> to be guided by the growth of Bitcoin and the pursuit of profit.\n>\n> This is not the case, it misunderstands Bitcoin and specifically is\n> misunderstands that Bitcoin is distributed and decentralized.\n>\n> What you call \u201cblock generators\u201d or \u201ctransaction processors\u201d are in reality\n> called miners and they don\u2019t have any authority to mine or not mine certain\n> transactions. All they have is a business incentive to mine or not mine a\n> certain transaction.\n> This is a crucial distinction as that makes it a economical decision, not a\n> political.\n>\n> The massive distribution of miners creating blocks means that one miner is\n> free to add his political agenda. They can choose to not mine any satoshi-\n> dice transactions, should they want. But they can\u2019t stop other miners from\n> mining those transactions anyway, and as such this is not a political move\n> that has any effect whatsoever, at the end of the day it is just an\n> economcal decision.\n>\n> The rest of your email is based on this misconception as well, and therefore\n> the above answers your question.\n> --\n> Tom Zander\n> Blog: https://zander.github.io\n> Vlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Tom Zander",
                "date": "2017-03-29T13:10:05",
                "message_text_only": "On Wednesday, 29 March 2017 14:48:42 CEST Martin Stolze wrote:\n> Your\n> conception holds under the presupposition that all action of\n> hash-power is motivated by 'rational' economic interest.\n\nThis shows you didn't think this through,\n\ninstead, the concept holds true when there is even a small section of hash \npower motivated by rational economic interest.\n\nYour claim that it has to be 100% of the miners that need to be honest is \nsomething I already addressed in the previous email when I wrote its a \ndistributed system.\n\nSince this is an open market, the requirement of a secton of miners being \nhonest is pretty trivial to fulful, especially since Bitcoins are worth \nquite a lot which makes greed be the main cause of honest miners.\n\nThis is the best part, greedy miners are the ones that end up working inside \nthe system.\n\nThis is very quickly going off-topic. I suggest you to take it to a \ndifferent forum where more people can explain Bitcoin without spamming the \ndev list.\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Martin Stolze",
                "date": "2017-03-22T17:48:52",
                "message_text_only": "Hi Tim,\nAfter writing this I figured that it was probably not evident at first\nsight as the concept may be quite novel. The physical location of the\n\"miner\" is indeed irrelevant, I am referring to the digital location.\nBitcoins blockchain is a digital location or better digital \"space\".\nAs far as I am concerned the authority lies with whoever governs this\nparticular block space. A \"miner\" can, or can not, include my\ntransaction.\n\nTo make this more understandable:\n\nAbu Bakr al-Baghdadi can extend his caliphate into Bitcoins block\nspace and rule sovereign(!) over a given block. If he processes my\ntransaction my fee goes directly into the coffers of his organization.\nThe same goes for the Queen of England or the Emperor of China. My\ninterest is not necessarily aligned with each specific authority, yet\nas you point out, I can only not use Bitcoin.\nAlternatively, however, I can very well sign my transaction and send\nit to an authority of my choosing to be included into the ledger, say\nBitFurry. - This is what I describe in option 1.\n\nIn order to protect my interest I do need to choose, maybe not today,\nbut eventually.\n\nI also think that people do care who processes transactions and a lot\nof bickering could be spared if we could choose.\n\nIf we assume a perfectly competitive market with 3 authorities that\ngovern the block space equally, the marginal cost of 1/3 of the block\nspace is the same for each, however, the marginal revenue absent of\nblock rewards is dependent on fees.\nIf people are willing to pay only a zero fee to a specific authority\nwhile a fee greater than zero to the others it's clear that one would\nbe less competitive.\n\nLet us assume the fees are 10% of the revenue and the cost is 95 we\nhave currently the following situation:\n\nA: Cost=95; Revenue=100; Profit=5\nB: Cost=95; Revenue=100; Profit=5\nC: Cost=95; Revenue=100; Profit=5\n\nWith transaction tiering, the outcome could be different!\n\nA: Cost=95; Revenue=90; Loss=5 // BSA that does not respect user interest.\nB: Cost=95; Revenue=105; Profit=10\nC: Cost=95; Revenue=105; Profit=10\n\nThis could motivate transaction processors to behave in accordance\nwith user interest, or am I missing something?\n\nBest Regards,\nMartin\n\n> From: Tim Ruffing <tim.ruffing at mmci.uni-saarland.de>\n> To: bitcoin-dev at lists.linuxfoundation.org\n> Cc:\n> Bcc:\n> Date: Tue, 21 Mar 2017 16:18:26 +0100\n> Subject: Re: [bitcoin-dev] Inquiry: Transaction Tiering\n> (I'm not a lawyer...)\n>\n> I'm not sure if I can make sense of your email.\n>\n> On Mon, 2017-03-20 at 20:12 +0000, Martin Stolze via bitcoin-dev wrote:\n>> As a participant in the economy in general and of Bitcoin in\n>> particular, I desire an ability to decide where I transact. The\n>> current state of Bitcoin does not allow me to choose my place of\n>> business. As a consequence, I try to learn what would be the best way\n>> to conduct my business in good faith. [2]\n>\n> Ignoring the rest, I don't think that the physical location /\n> jurisdiction of the miner has any legal implications for law applicable\n> to the relationship between sender and receiver of a payment.\n>\n> This is not particular to Bitcoin. We're both in Germany (I guess).\n> Assume we have a contract without specific agreements and I pay you in\n> Icelandic kronur via PayPal (in Luxembourg) and my HTTPS requests to\n> PayPal went via Australia and the US. Then German law applies to our\n> contract, nothing in the middle can change that.\n>\n> Also ignoring possible security implications, there is just no need for\n> a mechanism that enables users to select miners. I claim that almost\n> nobody cares who will mine a transaction, because it makes no technical\n> difference. If you don't want a specific miner to mine your\n> transaction, then don't use Bitcoin.\n>\n> Tim"
            },
            {
                "author": "praxeology_guy",
                "date": "2017-03-25T04:42:30",
                "message_text_only": "Potentially miners could create their own private communication channel/listening port for submitting transactions that they would not relay to other miners/the public node relay network. Users could then chose who they want to relay to. Miners would be incentivized to not relay higher fee transactions, because they would want to keep them to themselves for higher profits.\n\nCheers,\nPraxeology Guy\n\n-------- Original Message --------\nSubject: Re: [bitcoin-dev] Inquiry: Transaction Tiering\nLocal Time: March 22, 2017 12:48 PM\nUTC Time: March 22, 2017 5:48 PM\nFrom: bitcoin-dev at lists.linuxfoundation.org\nTo: bitcoin-dev at lists.linuxfoundation.org\n\nHi Tim,\nAfter writing this I figured that it was probably not evident at first\nsight as the concept may be quite novel. The physical location of the\n\"miner\" is indeed irrelevant, I am referring to the digital location.\nBitcoins blockchain is a digital location or better digital \"space\".\nAs far as I am concerned the authority lies with whoever governs this\nparticular block space. A \"miner\" can, or can not, include my\ntransaction.\n\nTo make this more understandable:\n\nAbu Bakr al-Baghdadi can extend his caliphate into Bitcoins block\nspace and rule sovereign(!) over a given block. If he processes my\ntransaction my fee goes directly into the coffers of his organization.\nThe same goes for the Queen of England or the Emperor of China. My\ninterest is not necessarily aligned with each specific authority, yet\nas you point out, I can only not use Bitcoin.\nAlternatively, however, I can very well sign my transaction and send\nit to an authority of my choosing to be included into the ledger, say\nBitFurry. - This is what I describe in option 1.\n\nIn order to protect my interest I do need to choose, maybe not today,\nbut eventually.\n\nI also think that people do care who processes transactions and a lot\nof bickering could be spared if we could choose.\n\nIf we assume a perfectly competitive market with 3 authorities that\ngovern the block space equally, the marginal cost of 1/3 of the block\nspace is the same for each, however, the marginal revenue absent of\nblock rewards is dependent on fees.\nIf people are willing to pay only a zero fee to a specific authority\nwhile a fee greater than zero to the others it's clear that one would\nbe less competitive.\n\nLet us assume the fees are 10% of the revenue and the cost is 95 we\nhave currently the following situation:\n\nA: Cost=95; Revenue=100; Profit=5\nB: Cost=95; Revenue=100; Profit=5\nC: Cost=95; Revenue=100; Profit=5\n\nWith transaction tiering, the outcome could be different!\n\nA: Cost=95; Revenue=90; Loss=5 // BSA that does not respect user interest.\nB: Cost=95; Revenue=105; Profit=10\nC: Cost=95; Revenue=105; Profit=10\n\nThis could motivate transaction processors to behave in accordance\nwith user interest, or am I missing something?\n\nBest Regards,\nMartin\n\n> From: Tim Ruffing <tim.ruffing at mmci.uni-saarland.de>\n> To: bitcoin-dev at lists.linuxfoundation.org\n> Cc:\n> Bcc:\n> Date: Tue, 21 Mar 2017 16:18:26 +0100\n> Subject: Re: [bitcoin-dev] Inquiry: Transaction Tiering\n> (I'm not a lawyer...)\n>\n> I'm not sure if I can make sense of your email.\n>\n> On Mon, 2017-03-20 at 20:12 +0000, Martin Stolze via bitcoin-dev wrote:\n>> As a participant in the economy in general and of Bitcoin in\n>> particular, I desire an ability to decide where I transact. The\n>> current state of Bitcoin does not allow me to choose my place of\n>> business. As a consequence, I try to learn what would be the best way\n>> to conduct my business in good faith. [2]\n>\n> Ignoring the rest, I don't think that the physical location /\n> jurisdiction of the miner has any legal implications for law applicable\n> to the relationship between sender and receiver of a payment.\n>\n> This is not particular to Bitcoin. We're both in Germany (I guess).\n> Assume we have a contract without specific agreements and I pay you in\n> Icelandic kronur via PayPal (in Luxembourg) and my HTTPS requests to\n> PayPal went via Australia and the US. Then German law applies to our\n> contract, nothing in the middle can change that.\n>\n> Also ignoring possible security implications, there is just no need for\n> a mechanism that enables users to select miners. I claim that almost\n> nobody cares who will mine a transaction, because it makes no technical\n> difference. If you don't want a specific miner to mine your\n> transaction, then don't use Bitcoin.\n>\n> Tim\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170325/bfa2755f/attachment.html>"
            },
            {
                "author": "Martin Stolze",
                "date": "2017-03-25T17:15:50",
                "message_text_only": "Thanks, those are valid concerns.\n\n> Potentially miners could create their own private communication channel/listening port for submitting transactions that they would not relay to other miners/the public node relay network.\nThat is the idea. Transaction Processors could source transactions\nfrom the public mempool as well their proprietary mempool(s).\n\n> Miners would be incentivized to not relay higher fee transactions, because they would want to keep them to themselves for higher profits.\nNot so, a user may want to incentivise a specific Transaction\nProcessor or many. A user can detect this behavior and withdraw his\nfuture business if he notices that his transaction is not included in\na block despite there being transactions with lower fees included.\nRemember, the transaction can be advertised to different mempools and\na Transaction Processor could lose this business to a competitor who\nprocesses the next block if he holds it back.\n\nBest Regards\nMartin\n\nPS: It seems not too late to get rid of misleading terms like \"miner\".\nBlock rewards (infrastructure subsidies) will be neglectable for\nfuture generations and the analogy is exceedingly poor.\n\nOn Sat, Mar 25, 2017 at 4:42 AM, praxeology_guy\n<praxeology_guy at protonmail.com> wrote:\n> Potentially miners could create their own private communication\n> channel/listening port for submitting transactions that they would not relay\n> to other miners/the public node relay network.  Users could then chose who\n> they want to relay to.  Miners would be incentivized to not relay higher fee\n> transactions, because they would want to keep them to themselves for higher\n> profits.\n>\n> Cheers,\n> Praxeology Guy\n>\n>\n> -------- Original Message --------\n> Subject: Re: [bitcoin-dev] Inquiry: Transaction Tiering\n> Local Time: March 22, 2017 12:48 PM\n> UTC Time: March 22, 2017 5:48 PM\n> From: bitcoin-dev at lists.linuxfoundation.org\n> To: bitcoin-dev at lists.linuxfoundation.org\n>\n> Hi Tim,\n> After writing this I figured that it was probably not evident at first\n> sight as the concept may be quite novel. The physical location of the\n> \"miner\" is indeed irrelevant, I am referring to the digital location.\n> Bitcoins blockchain is a digital location or better digital \"space\".\n> As far as I am concerned the authority lies with whoever governs this\n> particular block space. A \"miner\" can, or can not, include my\n> transaction.\n>\n> To make this more understandable:\n>\n> Abu Bakr al-Baghdadi can extend his caliphate into Bitcoins block\n> space and rule sovereign(!) over a given block. If he processes my\n> transaction my fee goes directly into the coffers of his organization.\n> The same goes for the Queen of England or the Emperor of China. My\n> interest is not necessarily aligned with each specific authority, yet\n> as you point out, I can only not use Bitcoin.\n> Alternatively, however, I can very well sign my transaction and send\n> it to an authority of my choosing to be included into the ledger, say\n> BitFurry. - This is what I describe in option 1.\n>\n> In order to protect my interest I do need to choose, maybe not today,\n> but eventually.\n>\n> I also think that people do care who processes transactions and a lot\n> of bickering could be spared if we could choose.\n>\n> If we assume a perfectly competitive market with 3 authorities that\n> govern the block space equally, the marginal cost of 1/3 of the block\n> space is the same for each, however, the marginal revenue absent of\n> block rewards is dependent on fees.\n> If people are willing to pay only a zero fee to a specific authority\n> while a fee greater than zero to the others it's clear that one would\n> be less competitive.\n>\n> Let us assume the fees are 10% of the revenue and the cost is 95 we\n> have currently the following situation:\n>\n> A: Cost=95; Revenue=100; Profit=5\n> B: Cost=95; Revenue=100; Profit=5\n> C: Cost=95; Revenue=100; Profit=5\n>\n> With transaction tiering, the outcome could be different!\n>\n> A: Cost=95; Revenue=90; Loss=5 // BSA that does not respect user interest.\n> B: Cost=95; Revenue=105; Profit=10\n> C: Cost=95; Revenue=105; Profit=10\n>\n> This could motivate transaction processors to behave in accordance\n> with user interest, or am I missing something?\n>\n> Best Regards,\n> Martin\n>\n>> From: Tim Ruffing <tim.ruffing at mmci.uni-saarland.de>\n>> To: bitcoin-dev at lists.linuxfoundation.org\n>> Cc:\n>> Bcc:\n>> Date: Tue, 21 Mar 2017 16:18:26 +0100\n>> Subject: Re: [bitcoin-dev] Inquiry: Transaction Tiering\n>> (I'm not a lawyer...)\n>>\n>> I'm not sure if I can make sense of your email.\n>>\n>> On Mon, 2017-03-20 at 20:12 +0000, Martin Stolze via bitcoin-dev wrote:\n>>> As a participant in the economy in general and of Bitcoin in\n>>> particular, I desire an ability to decide where I transact. The\n>>> current state of Bitcoin does not allow me to choose my place of\n>>> business. As a consequence, I try to learn what would be the best way\n>>> to conduct my business in good faith. [2]\n>>\n>> Ignoring the rest, I don't think that the physical location /\n>> jurisdiction of the miner has any legal implications for law applicable\n>> to the relationship between sender and receiver of a payment.\n>>\n>> This is not particular to Bitcoin. We're both in Germany (I guess).\n>> Assume we have a contract without specific agreements and I pay you in\n>> Icelandic kronur via PayPal (in Luxembourg) and my HTTPS requests to\n>> PayPal went via Australia and the US. Then German law applies to our\n>> contract, nothing in the middle can change that.\n>>\n>> Also ignoring possible security implications, there is just no need for\n>> a mechanism that enables users to select miners. I claim that almost\n>> nobody cares who will mine a transaction, because it makes no technical\n>> difference. If you don't want a specific miner to mine your\n>> transaction, then don't use Bitcoin.\n>>\n>> Tim\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>"
            },
            {
                "author": "praxeology_guy",
                "date": "2017-03-26T11:12:01",
                "message_text_only": "Martin:\n\nRe: Miners not relaying unconfirmed txs... I was saying that this was a good thing from your perspective in wanting to give users the choice on which miners would get to confirm the tx. So then like we don't need to implement any kind of special bloated transaction that is only mine-able by some explicit set of miners... No fork or compatibility problems are necessary, can be completely implemented as an added feature.\n\nRe: \"Miners\": I don't really like calling them \"transaction processors\" because in bitcoin, every synchronizing node that verifies signatures is a transaction processor. What sets them apart from full relay nodes is they create \"blocks\", which are \"ledger change candidates\" that included transactions and proof-of-work (PoW: deterministic diffusion puzzle solutions). They help create confidence that transactions in blocks will never by double spent by requiring that double spending would need lots of economic resources for someone else to re-perform the PoW.\n\nGiven the above definition of a \"block\", I would be happy calling them \"Block Producers\"... which does not imply that they do all of the necessary \"transaction processing\": that all users should be fine with running Electrum wallets or even SPV clients. They produce blocks, but its still up to other users in the network to do \"transaction processing\": decide for themselves if they want to accept particular blocks.\n\nCheers,\nPraxeology Guy\n\n-------- Original Message --------\nSubject: Re: [bitcoin-dev] Inquiry: Transaction Tiering\nLocal Time: March 25, 2017 12:15 PM\nUTC Time: March 25, 2017 5:15 PM\nFrom: martin at stolze.cc\nTo: praxeology_guy <praxeology_guy at protonmail.com>\nbitcoin-dev at lists.linuxfoundation.org\n\nThanks, those are valid concerns.\n\n> Potentially miners could create their own private communication channel/listening port for submitting transactions that they would not relay to other miners/the public node relay network.\nThat is the idea. Transaction Processors could source transactions\nfrom the public mempool as well their proprietary mempool(s).\n\n> Miners would be incentivized to not relay higher fee transactions, because they would want to keep them to themselves for higher profits.\nNot so, a user may want to incentivise a specific Transaction\nProcessor or many. A user can detect this behavior and withdraw his\nfuture business if he notices that his transaction is not included in\na block despite there being transactions with lower fees included.\nRemember, the transaction can be advertised to different mempools and\na Transaction Processor could lose this business to a competitor who\nprocesses the next block if he holds it back.\n\nBest Regards\nMartin\n\nPS: It seems not too late to get rid of misleading terms like \"miner\".\nBlock rewards (infrastructure subsidies) will be neglectable for\nfuture generations and the analogy is exceedingly poor.\n\nOn Sat, Mar 25, 2017 at 4:42 AM, praxeology_guy\n<praxeology_guy at protonmail.com> wrote:\n> Potentially miners could create their own private communication\n> channel/listening port for submitting transactions that they would not relay\n> to other miners/the public node relay network. Users could then chose who\n> they want to relay to. Miners would be incentivized to not relay higher fee\n> transactions, because they would want to keep them to themselves for higher\n> profits.\n>\n> Cheers,\n> Praxeology Guy\n>\n>\n> -------- Original Message --------\n> Subject: Re: [bitcoin-dev] Inquiry: Transaction Tiering\n> Local Time: March 22, 2017 12:48 PM\n> UTC Time: March 22, 2017 5:48 PM\n> From: bitcoin-dev at lists.linuxfoundation.org\n> To: bitcoin-dev at lists.linuxfoundation.org\n>\n> Hi Tim,\n> After writing this I figured that it was probably not evident at first\n> sight as the concept may be quite novel. The physical location of the\n> \"miner\" is indeed irrelevant, I am referring to the digital location.\n> Bitcoins blockchain is a digital location or better digital \"space\".\n> As far as I am concerned the authority lies with whoever governs this\n> particular block space. A \"miner\" can, or can not, include my\n> transaction.\n>\n> To make this more understandable:\n>\n> Abu Bakr al-Baghdadi can extend his caliphate into Bitcoins block\n> space and rule sovereign(!) over a given block. If he processes my\n> transaction my fee goes directly into the coffers of his organization.\n> The same goes for the Queen of England or the Emperor of China. My\n> interest is not necessarily aligned with each specific authority, yet\n> as you point out, I can only not use Bitcoin.\n> Alternatively, however, I can very well sign my transaction and send\n> it to an authority of my choosing to be included into the ledger, say\n> BitFurry. - This is what I describe in option 1.\n>\n> In order to protect my interest I do need to choose, maybe not today,\n> but eventually.\n>\n> I also think that people do care who processes transactions and a lot\n> of bickering could be spared if we could choose.\n>\n> If we assume a perfectly competitive market with 3 authorities that\n> govern the block space equally, the marginal cost of 1/3 of the block\n> space is the same for each, however, the marginal revenue absent of\n> block rewards is dependent on fees.\n> If people are willing to pay only a zero fee to a specific authority\n> while a fee greater than zero to the others it's clear that one would\n> be less competitive.\n>\n> Let us assume the fees are 10% of the revenue and the cost is 95 we\n> have currently the following situation:\n>\n> A: Cost=95; Revenue=100; Profit=5\n> B: Cost=95; Revenue=100; Profit=5\n> C: Cost=95; Revenue=100; Profit=5\n>\n> With transaction tiering, the outcome could be different!\n>\n> A: Cost=95; Revenue=90; Loss=5 // BSA that does not respect user interest.\n> B: Cost=95; Revenue=105; Profit=10\n> C: Cost=95; Revenue=105; Profit=10\n>\n> This could motivate transaction processors to behave in accordance\n> with user interest, or am I missing something?\n>\n> Best Regards,\n> Martin\n>\n>> From: Tim Ruffing <tim.ruffing at mmci.uni-saarland.de>\n>> To: bitcoin-dev at lists.linuxfoundation.org\n>> Cc:\n>> Bcc:\n>> Date: Tue, 21 Mar 2017 16:18:26 +0100\n>> Subject: Re: [bitcoin-dev] Inquiry: Transaction Tiering\n>> (I'm not a lawyer...)\n>>\n>> I'm not sure if I can make sense of your email.\n>>\n>> On Mon, 2017-03-20 at 20:12 +0000, Martin Stolze via bitcoin-dev wrote:\n>>> As a participant in the economy in general and of Bitcoin in\n>>> particular, I desire an ability to decide where I transact. The\n>>> current state of Bitcoin does not allow me to choose my place of\n>>> business. As a consequence, I try to learn what would be the best way\n>>> to conduct my business in good faith. [2]\n>>\n>> Ignoring the rest, I don't think that the physical location /\n>> jurisdiction of the miner has any legal implications for law applicable\n>> to the relationship between sender and receiver of a payment.\n>>\n>> This is not particular to Bitcoin. We're both in Germany (I guess).\n>> Assume we have a contract without specific agreements and I pay you in\n>> Icelandic kronur via PayPal (in Luxembourg) and my HTTPS requests to\n>> PayPal went via Australia and the US. Then German law applies to our\n>> contract, nothing in the middle can change that.\n>>\n>> Also ignoring possible security implications, there is just no need for\n>> a mechanism that enables users to select miners. I claim that almost\n>> nobody cares who will mine a transaction, because it makes no technical\n>> difference. If you don't want a specific miner to mine your\n>> transaction, then don't use Bitcoin.\n>>\n>> Tim\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170326/2214ecab/attachment.html>"
            },
            {
                "author": "greg misiorek",
                "date": "2017-03-26T12:11:44",
                "message_text_only": "agreed, the 'miner' term has run its course and plays a different role than it was originally set out to do, esp its original distributed nature. the 'mining business' has become concentrated too much and resembles today's financial institutions or simply banks, imho.\n\n\nstill, any form forking has dilutive effect on existing BTC holders.\n\n\nthx, gm\n\n________________________________\nFrom: bitcoin-dev-bounces at lists.linuxfoundation.org <bitcoin-dev-bounces at lists.linuxfoundation.org> on behalf of Martin Stolze via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nSent: Saturday, March 25, 2017 1:15 PM\nTo: praxeology_guy\nCc: bitcoin-dev at lists.linuxfoundation.org\nSubject: Re: [bitcoin-dev] Inquiry: Transaction Tiering\n\nThanks, those are valid concerns.\n\n> Potentially miners could create their own private communication channel/listening port for submitting transactions that they would not relay to other miners/the public node relay network.\nThat is the idea. Transaction Processors could source transactions\nfrom the public mempool as well their proprietary mempool(s).\n\n> Miners would be incentivized to not relay higher fee transactions, because they would want to keep them to themselves for higher profits.\nNot so, a user may want to incentivise a specific Transaction\nProcessor or many. A user can detect this behavior and withdraw his\nfuture business if he notices that his transaction is not included in\na block despite there being transactions with lower fees included.\nRemember, the transaction can be advertised to different mempools and\na Transaction Processor could lose this business to a competitor who\nprocesses the next block if he holds it back.\n\nBest Regards\nMartin\n\nPS: It seems not too late to get rid of misleading terms like \"miner\".\nBlock rewards (infrastructure subsidies) will be neglectable for\nfuture generations and the analogy is exceedingly poor.\n\nOn Sat, Mar 25, 2017 at 4:42 AM, praxeology_guy\n<praxeology_guy at protonmail.com> wrote:\n> Potentially miners could create their own private communication\n> channel/listening port for submitting transactions that they would not relay\n> to other miners/the public node relay network.  Users could then chose who\n> they want to relay to.  Miners would be incentivized to not relay higher fee\n> transactions, because they would want to keep them to themselves for higher\n> profits.\n>\n> Cheers,\n> Praxeology Guy\n>\n>\n> -------- Original Message --------\n> Subject: Re: [bitcoin-dev] Inquiry: Transaction Tiering\n> Local Time: March 22, 2017 12:48 PM\n> UTC Time: March 22, 2017 5:48 PM\n> From: bitcoin-dev at lists.linuxfoundation.org\n> To: bitcoin-dev at lists.linuxfoundation.org\n>\n> Hi Tim,\n> After writing this I figured that it was probably not evident at first\n> sight as the concept may be quite novel. The physical location of the\n> \"miner\" is indeed irrelevant, I am referring to the digital location.\n> Bitcoins blockchain is a digital location or better digital \"space\".\n> As far as I am concerned the authority lies with whoever governs this\n> particular block space. A \"miner\" can, or can not, include my\n> transaction.\n>\n> To make this more understandable:\n>\n> Abu Bakr al-Baghdadi can extend his caliphate into Bitcoins block\n> space and rule sovereign(!) over a given block. If he processes my\n> transaction my fee goes directly into the coffers of his organization.\n> The same goes for the Queen of England or the Emperor of China. My\n> interest is not necessarily aligned with each specific authority, yet\n> as you point out, I can only not use Bitcoin.\n> Alternatively, however, I can very well sign my transaction and send\n> it to an authority of my choosing to be included into the ledger, say\n> BitFurry. - This is what I describe in option 1.\n>\n> In order to protect my interest I do need to choose, maybe not today,\n> but eventually.\n>\n> I also think that people do care who processes transactions and a lot\n> of bickering could be spared if we could choose.\n>\n> If we assume a perfectly competitive market with 3 authorities that\n> govern the block space equally, the marginal cost of 1/3 of the block\n> space is the same for each, however, the marginal revenue absent of\n> block rewards is dependent on fees.\n> If people are willing to pay only a zero fee to a specific authority\n> while a fee greater than zero to the others it's clear that one would\n> be less competitive.\n>\n> Let us assume the fees are 10% of the revenue and the cost is 95 we\n> have currently the following situation:\n>\n> A: Cost=95; Revenue=100; Profit=5\n> B: Cost=95; Revenue=100; Profit=5\n> C: Cost=95; Revenue=100; Profit=5\n>\n> With transaction tiering, the outcome could be different!\n>\n> A: Cost=95; Revenue=90; Loss=5 // BSA that does not respect user interest.\n> B: Cost=95; Revenue=105; Profit=10\n> C: Cost=95; Revenue=105; Profit=10\n>\n> This could motivate transaction processors to behave in accordance\n> with user interest, or am I missing something?\n>\n> Best Regards,\n> Martin\n>\n>> From: Tim Ruffing <tim.ruffing at mmci.uni-saarland.de>\n>> To: bitcoin-dev at lists.linuxfoundation.org\n>> Cc:\n>> Bcc:\n>> Date: Tue, 21 Mar 2017 16:18:26 +0100\n>> Subject: Re: [bitcoin-dev] Inquiry: Transaction Tiering\n>> (I'm not a lawyer...)\n>>\n>> I'm not sure if I can make sense of your email.\n>>\n>> On Mon, 2017-03-20 at 20:12 +0000, Martin Stolze via bitcoin-dev wrote:\n>>> As a participant in the economy in general and of Bitcoin in\n>>> particular, I desire an ability to decide where I transact. The\n>>> current state of Bitcoin does not allow me to choose my place of\n>>> business. As a consequence, I try to learn what would be the best way\n>>> to conduct my business in good faith. [2]\n>>\n>> Ignoring the rest, I don't think that the physical location /\n>> jurisdiction of the miner has any legal implications for law applicable\n>> to the relationship between sender and receiver of a payment.\n>>\n>> This is not particular to Bitcoin. We're both in Germany (I guess).\n>> Assume we have a contract without specific agreements and I pay you in\n>> Icelandic kronur via PayPal (in Luxembourg) and my HTTPS requests to\n>> PayPal went via Australia and the US. Then German law applies to our\n>> contract, nothing in the middle can change that.\n>>\n>> Also ignoring possible security implications, there is just no need for\n>> a mechanism that enables users to select miners. I claim that almost\n>> nobody cares who will mine a transaction, because it makes no technical\n>> difference. If you don't want a specific miner to mine your\n>> transaction, then don't use Bitcoin.\n>>\n>> Tim\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\nbitcoin-dev -- Bitcoin Protocol Discussion - Linux Foundation<https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\nlists.linuxfoundation.org\nBitcoin development and protocol discussion. This list is lightly moderated. - No offensive posts, no personal attacks. - Posts must concern development of bitcoin ...\n\n\n\n>\n>\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\nbitcoin-dev -- Bitcoin Protocol Discussion - Linux Foundation<https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\nlists.linuxfoundation.org\nBitcoin development and protocol discussion. This list is lightly moderated. - No offensive posts, no personal attacks. - Posts must concern development of bitcoin ...\n\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170326/f13f0828/attachment-0001.html>"
            },
            {
                "author": "Martin Stolze",
                "date": "2017-03-27T17:18:22",
                "message_text_only": "Yes, the terminology is creating a lot of confusion. I would be happy to\ncontribute to a discourse that helps to clear up the ambiguities and\ncringeworthiness of current \"standardized terminology\".\nRobert Keagen developed a perspective on psychological development [1] and\nit appears to me that Stage 2 and 3 (miner, cash, network upgrade, ...) is\ndiscussing with Stage 4 (hash power, settlement, fork, ...).\n\n\"Miner\" is not wrong, just not helpful if you try to gauge the deeper\ncomplexities of Bitcoin. Likewise, \"money\" is not wrong if you explain it\nto a child, while credit and debt is much more useful if you want to gauge\nthe deeper complexities of economics.\n\nstill, any form forking has dilutive effect on existing BTC holders.\n\n\nNot at all, I sleep sound and anticipate any such event as an ugly scrip\ndividend.\n\nRegards\nMartin\n\n[1] https://en.wikipedia.org/wiki/Robert_Kegan#In_Over_Our_Heads\n\nOn Sun, Mar 26, 2017 at 1:11 PM, greg misiorek <greg_not_so at hotmail.com>\nwrote:\n\n> agreed, the 'miner' term has run its course and plays a different role\n> than it was originally set out to do, esp its original distributed nature.\n> the 'mining business' has become concentrated too much and resembles\n> today's financial institutions or simply banks, imho.\n>\n>\n> still, any form forking has dilutive effect on existing BTC holders.\n>\n>\n> thx, gm\n> ------------------------------\n> *From:* bitcoin-dev-bounces at lists.linuxfoundation.org <\n> bitcoin-dev-bounces at lists.linuxfoundation.org> on behalf of Martin Stolze\n> via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n> *Sent:* Saturday, March 25, 2017 1:15 PM\n> *To:* praxeology_guy\n> *Cc:* bitcoin-dev at lists.linuxfoundation.org\n>\n> *Subject:* Re: [bitcoin-dev] Inquiry: Transaction Tiering\n>\n> Thanks, those are valid concerns.\n>\n> > Potentially miners could create their own private communication\n> channel/listening port for submitting transactions that they would not\n> relay to other miners/the public node relay network.\n> That is the idea. Transaction Processors could source transactions\n> from the public mempool as well their proprietary mempool(s).\n>\n> > Miners would be incentivized to not relay higher fee transactions,\n> because they would want to keep them to themselves for higher profits.\n> Not so, a user may want to incentivise a specific Transaction\n> Processor or many. A user can detect this behavior and withdraw his\n> future business if he notices that his transaction is not included in\n> a block despite there being transactions with lower fees included.\n> Remember, the transaction can be advertised to different mempools and\n> a Transaction Processor could lose this business to a competitor who\n> processes the next block if he holds it back.\n>\n> Best Regards\n> Martin\n>\n> PS: It seems not too late to get rid of misleading terms like \"miner\".\n> Block rewards (infrastructure subsidies) will be neglectable for\n> future generations and the analogy is exceedingly poor.\n>\n> On Sat, Mar 25, 2017 at 4:42 AM, praxeology_guy\n> <praxeology_guy at protonmail.com> wrote:\n> > Potentially miners could create their own private communication\n> > channel/listening port for submitting transactions that they would not\n> relay\n> > to other miners/the public node relay network.  Users could then chose\n> who\n> > they want to relay to.  Miners would be incentivized to not relay higher\n> fee\n> > transactions, because they would want to keep them to themselves for\n> higher\n> > profits.\n> >\n> > Cheers,\n> > Praxeology Guy\n> >\n> >\n> > -------- Original Message --------\n> > Subject: Re: [bitcoin-dev] Inquiry: Transaction Tiering\n> > Local Time: March 22, 2017 12:48 PM\n> > UTC Time: March 22, 2017 5:48 PM\n> > From: bitcoin-dev at lists.linuxfoundation.org\n> > To: bitcoin-dev at lists.linuxfoundation.org\n> >\n> > Hi Tim,\n> > After writing this I figured that it was probably not evident at first\n> > sight as the concept may be quite novel. The physical location of the\n> > \"miner\" is indeed irrelevant, I am referring to the digital location.\n> > Bitcoins blockchain is a digital location or better digital \"space\".\n> > As far as I am concerned the authority lies with whoever governs this\n> > particular block space. A \"miner\" can, or can not, include my\n> > transaction.\n> >\n> > To make this more understandable:\n> >\n> > Abu Bakr al-Baghdadi can extend his caliphate into Bitcoins block\n> > space and rule sovereign(!) over a given block. If he processes my\n> > transaction my fee goes directly into the coffers of his organization.\n> > The same goes for the Queen of England or the Emperor of China. My\n> > interest is not necessarily aligned with each specific authority, yet\n> > as you point out, I can only not use Bitcoin.\n> > Alternatively, however, I can very well sign my transaction and send\n> > it to an authority of my choosing to be included into the ledger, say\n> > BitFurry. - This is what I describe in option 1.\n> >\n> > In order to protect my interest I do need to choose, maybe not today,\n> > but eventually.\n> >\n> > I also think that people do care who processes transactions and a lot\n> > of bickering could be spared if we could choose.\n> >\n> > If we assume a perfectly competitive market with 3 authorities that\n> > govern the block space equally, the marginal cost of 1/3 of the block\n> > space is the same for each, however, the marginal revenue absent of\n> > block rewards is dependent on fees.\n> > If people are willing to pay only a zero fee to a specific authority\n> > while a fee greater than zero to the others it's clear that one would\n> > be less competitive.\n> >\n> > Let us assume the fees are 10% of the revenue and the cost is 95 we\n> > have currently the following situation:\n> >\n> > A: Cost=95; Revenue=100; Profit=5\n> > B: Cost=95; Revenue=100; Profit=5\n> > C: Cost=95; Revenue=100; Profit=5\n> >\n> > With transaction tiering, the outcome could be different!\n> >\n> > A: Cost=95; Revenue=90; Loss=5 // BSA that does not respect user\n> interest.\n> > B: Cost=95; Revenue=105; Profit=10\n> > C: Cost=95; Revenue=105; Profit=10\n> >\n> > This could motivate transaction processors to behave in accordance\n> > with user interest, or am I missing something?\n> >\n> > Best Regards,\n> > Martin\n> >\n> >> From: Tim Ruffing <tim.ruffing at mmci.uni-saarland.de>\n> >> To: bitcoin-dev at lists.linuxfoundation.org\n> >> Cc:\n> >> Bcc:\n> >> Date: Tue, 21 Mar 2017 16:18:26 +0100\n> >> Subject: Re: [bitcoin-dev] Inquiry: Transaction Tiering\n> >> (I'm not a lawyer...)\n> >>\n> >> I'm not sure if I can make sense of your email.\n> >>\n> >> On Mon, 2017-03-20 at 20:12 +0000, Martin Stolze via bitcoin-dev wrote:\n> >>> As a participant in the economy in general and of Bitcoin in\n> >>> particular, I desire an ability to decide where I transact. The\n> >>> current state of Bitcoin does not allow me to choose my place of\n> >>> business. As a consequence, I try to learn what would be the best way\n> >>> to conduct my business in good faith. [2]\n> >>\n> >> Ignoring the rest, I don't think that the physical location /\n> >> jurisdiction of the miner has any legal implications for law applicable\n> >> to the relationship between sender and receiver of a payment.\n> >>\n> >> This is not particular to Bitcoin. We're both in Germany (I guess).\n> >> Assume we have a contract without specific agreements and I pay you in\n> >> Icelandic kronur via PayPal (in Luxembourg) and my HTTPS requests to\n> >> PayPal went via Australia and the US. Then German law applies to our\n> >> contract, nothing in the middle can change that.\n> >>\n> >> Also ignoring possible security implications, there is just no need for\n> >> a mechanism that enables users to select miners. I claim that almost\n> >> nobody cares who will mine a transaction, because it makes no technical\n> >> difference. If you don't want a specific miner to mine your\n> >> transaction, then don't use Bitcoin.\n> >>\n> >> Tim\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> bitcoin-dev -- Bitcoin Protocol Discussion - Linux Foundation\n> <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> lists.linuxfoundation.org\n> Bitcoin development and protocol discussion. This list is lightly\n> moderated. - No offensive posts, no personal attacks. - Posts must concern\n> development of bitcoin ...\n>\n>\n> >\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> bitcoin-dev -- Bitcoin Protocol Discussion - Linux Foundation\n> <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> lists.linuxfoundation.org\n> Bitcoin development and protocol discussion. This list is lightly\n> moderated. - No offensive posts, no personal attacks. - Posts must concern\n> development of bitcoin ...\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170327/caa155b6/attachment.html>"
            },
            {
                "author": "AJ West",
                "date": "2017-03-27T16:29:20",
                "message_text_only": "Hi I'm AJ West, I made a service http://preferredminer.com which is a\nproof-of-concept project designed to spur discussion on exactly this issue\nof \"miners as service providers.\"\n\nThe current status is that Bitcoin end users are looking to support\nspecific miners, whether that's because they agree with a miner/pool's\npolitical positions, their consensus ideology, physical location (yes some\npeople would like only miners in particular countries to mine their\ntransactions) and the list of reasons goes on. The main attitude right now\nis that people would like to 'support' miners who signal for the features\nthey care about.\n\nI strongly believe, whether the Bitcoin developer community facilitates it\nor not, certain miners will become preferred by users. In summary, there\nare realistically two proposed ways of providing this service in the\npresent-day situation: 1) By creating 'segregated mempools' where an\nauthenticated third-party like my web service Preferred Miner manages the\naccess to pending transactions destined for a specific set of miners, and\n2) by creating transactions where the mining fee is in one way or another,\nan output to an address owned by the preferred miner(s).\n\nThere are some terrible pitfalls with both of these methods. The first\nbeing that you have to trust a lot of people, including the 3rd party (me)\nand the pools to work in your users' interest (\"don't give my transactions\nto other miners or broadcast to mempool please\"). Then there are the extra\nfees users will have to pay to offset the risk of a miner losing out for\nhaving to send the network a not-yet-broadcasted transaction. And finally,\nthe other method requires that they be larger transactions, and a directory\nof mining pools' receiving addresses for outputs must be maintained. Then\nyou have to hope the miner will be setup to scoop in your transaction\nknowing it's got a fee for them. Plus, how many nodes going forward are\ngoing to hold what seem to be 0-fee transactions in mempool (because the\nfee is in the outputs)?\n\nI am not necessarily looking for answers or solutions to these issues, but\nsimply to show a case and to express that this idea of having specific\nminers/pools process their transactions, is important to some people.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170327/33df8bb3/attachment.html>"
            },
            {
                "author": "Martin Stolze",
                "date": "2017-03-27T21:11:38",
                "message_text_only": "> [...] we don't need to implement any kind of special bloated transaction that is only mine-able by some explicit set of miners...  No fork or compatibility problems are necessary, can be completely implemented as an added feature.\n\nYes, absolutely. It would still be helpful if it is somewhat\nstandardized on the Client level.\n\n> Re: \"Miners\": I don't really like calling them \"transaction processors\" because in bitcoin, every synchronizing node that verifies signatures is a transaction processor.\n\nI agree and I really appreciate the explanation! Transaction Processor\nis not optimal, I brought up BSA: Block Space Authority before to\nslice the pie in terms of it legitimate power structure instead of its\nfunctionality. I maintain that this is better for higher level\ndiscourse. Maybe something like \"Consensus Space Sovereign\" would be\nmore suitable.\n\n> What sets them apart from full relay nodes is they create \"blocks\", which are \"ledger change candidates\" that included transactions and proof-of-work (PoW: deterministic diffusion puzzle solutions).\n\nFunctionally, a node can moderate the network in the following way:\n1. Relay transactions (mempool) and the global memory (blockchain)\n2. Construct block headers (PoW: deterministic diffusion puzzle\nsolutions) and write to the global memory (create \"blocks\", which are\n\"ledger change candidates\")\n3. Read, verify and accept changes to the global memory\n\n> Given the above definition of a \"block\", I would be happy calling them \"Block Producers\"... which does not imply that they do all of the necessary \"transaction processing\": that all users should be fine with running Electrum wallets or even SPV clients.  They produce blocks, but its still up to other users in the network to do \"transaction processing\": decide for themselves if they want to accept particular blocks.\n\n\"Block Generator\" (ala Satoshi) may be better but let's look at the\npower structure analog to the functionality:\n1. Authority to propose a change\n2. Authority to approve a change\n3. Authority to reject a change\n\nThis can easily be understood in current political terms. In Spain a:\n1. Citizen can propose to engage in a business (voice)\n2. (Special) Citizen (the King) can disapprove of the business (sovereign)\n3. Citizen can leave Spain (exit)\n\nLikewise, citizens can engage with the sovereign in order to change\nsome regulation, say average transaction tax. The question is simply\nwhat legitimate authority a node has. We can map that quite neatly\nonto the terminology of 'Politics'.\n\nThat does also away with naive 51% attack scenarios and the like. They\nare akin to aliens invading earth. Surely it is not impossible that\naliens invade and in Bitcoin land, it is currently conceivable, but\nmost conflicts are not brought about by a single devilish aggressor\nbut a special interest group that wants to concentrate benefits and\ndiffuse costs.\n- Transaction Tiering could be a great basis for decentralized negotiations.\n\nRegards\nMartin\n\n\nOn Sat, Mar 25, 2017 at 10:30 PM, praxeology_guy\n<praxeology_guy at protonmail.com> wrote:\n> Martin:\n>\n> Re: Miners not relaying unconfirmed txs...  I was saying that this was a\n> good thing from your perspective in wanting to give users the choice on\n> which miners would get to confirm the tx.  So then like we don't need to\n> implement any kind of special bloated transaction that is only mine-able by\n> some explicit set of miners...  No fork or compatibility problems are\n> necessary, can be completely implemented as an added feature.\n>\n> Re: \"Miners\": I don't really like calling them \"transaction processors\"\n> because in bitcoin, every synchronizing node that verifies signatures is a\n> transaction processor.  What sets them apart from full relay nodes is they\n> create \"blocks\", which are \"ledger change candidates\" that included\n> transactions and proof-of-work (PoW: deterministic diffusion puzzle\n> solutions).  They help create confidence that transactions in blocks will\n> never by double spent by requiring that double spending would need lots of\n> economic resources for someone else to re-perform the PoW.\n>\n> Given the above definition of a \"block\", I would be happy calling them\n> \"Block Producers\"... which does not imply that they do all of the necessary\n> \"transaction processing\": that all users should be fine with running\n> Electrum wallets or even SPV clients.  They produce blocks, but its still up\n> to other users in the network to do \"transaction processing\": decide for\n> themselves if they want to accept particular blocks.\n>\n> Cheers,\n> Praxeology Guy\n>\n> -------- Original Message --------\n> Subject: Re: [bitcoin-dev] Inquiry: Transaction Tiering\n> Local Time: March 25, 2017 12:15 PM\n> UTC Time: March 25, 2017 5:15 PM\n> From: martin at stolze.cc\n> To: praxeology_guy <praxeology_guy at protonmail.com>\n> bitcoin-dev at lists.linuxfoundation.org\n>\n> Thanks, those are valid concerns.\n>\n>> Potentially miners could create their own private communication\n>> channel/listening port for submitting transactions that they would not relay\n>> to other miners/the public node relay network.\n> That is the idea. Transaction Processors could source transactions\n> from the public mempool as well their proprietary mempool(s).\n>\n>> Miners would be incentivized to not relay higher fee transactions, because\n>> they would want to keep them to themselves for higher profits.\n> Not so, a user may want to incentivise a specific Transaction\n> Processor or many. A user can detect this behavior and withdraw his\n> future business if he notices that his transaction is not included in\n> a block despite there being transactions with lower fees included.\n> Remember, the transaction can be advertised to different mempools and\n> a Transaction Processor could lose this business to a competitor who\n> processes the next block if he holds it back.\n>\n> Best Regards\n> Martin\n>\n> PS: It seems not too late to get rid of misleading terms like \"miner\".\n> Block rewards (infrastructure subsidies) will be neglectable for\n> future generations and the analogy is exceedingly poor.\n>\n> On Sat, Mar 25, 2017 at 4:42 AM, praxeology_guy\n> <praxeology_guy at protonmail.com> wrote:\n>> Potentially miners could create their own private communication\n>> channel/listening port for submitting transactions that they would not\n>> relay\n>> to other miners/the public node relay network. Users could then chose who\n>> they want to relay to. Miners would be incentivized to not relay higher\n>> fee\n>> transactions, because they would want to keep them to themselves for\n>> higher\n>> profits.\n>>\n>> Cheers,\n>> Praxeology Guy\n>>\n>>\n>> -------- Original Message --------\n>> Subject: Re: [bitcoin-dev] Inquiry: Transaction Tiering\n>> Local Time: March 22, 2017 12:48 PM\n>> UTC Time: March 22, 2017 5:48 PM\n>> From: bitcoin-dev at lists.linuxfoundation.org\n>> To: bitcoin-dev at lists.linuxfoundation.org\n>>\n>> Hi Tim,\n>> After writing this I figured that it was probably not evident at first\n>> sight as the concept may be quite novel. The physical location of the\n>> \"miner\" is indeed irrelevant, I am referring to the digital location.\n>> Bitcoins blockchain is a digital location or better digital \"space\".\n>> As far as I am concerned the authority lies with whoever governs this\n>> particular block space. A \"miner\" can, or can not, include my\n>> transaction.\n>>\n>> To make this more understandable:\n>>\n>> Abu Bakr al-Baghdadi can extend his caliphate into Bitcoins block\n>> space and rule sovereign(!) over a given block. If he processes my\n>> transaction my fee goes directly into the coffers of his organization.\n>> The same goes for the Queen of England or the Emperor of China. My\n>> interest is not necessarily aligned with each specific authority, yet\n>> as you point out, I can only not use Bitcoin.\n>> Alternatively, however, I can very well sign my transaction and send\n>> it to an authority of my choosing to be included into the ledger, say\n>> BitFurry. - This is what I describe in option 1.\n>>\n>> In order to protect my interest I do need to choose, maybe not today,\n>> but eventually.\n>>\n>> I also think that people do care who processes transactions and a lot\n>> of bickering could be spared if we could choose.\n>>\n>> If we assume a perfectly competitive market with 3 authorities that\n>> govern the block space equally, the marginal cost of 1/3 of the block\n>> space is the same for each, however, the marginal revenue absent of\n>> block rewards is dependent on fees.\n>> If people are willing to pay only a zero fee to a specific authority\n>> while a fee greater than zero to the others it's clear that one would\n>> be less competitive.\n>>\n>> Let us assume the fees are 10% of the revenue and the cost is 95 we\n>> have currently the following situation:\n>>\n>> A: Cost=95; Revenue=100; Profit=5\n>> B: Cost=95; Revenue=100; Profit=5\n>> C: Cost=95; Revenue=100; Profit=5\n>>\n>> With transaction tiering, the outcome could be different!\n>>\n>> A: Cost=95; Revenue=90; Loss=5 // BSA that does not respect user interest.\n>> B: Cost=95; Revenue=105; Profit=10\n>> C: Cost=95; Revenue=105; Profit=10\n>>\n>> This could motivate transaction processors to behave in accordance\n>> with user interest, or am I missing something?\n>>\n>> Best Regards,\n>> Martin\n>>\n>>> From: Tim Ruffing <tim.ruffing at mmci.uni-saarland.de>\n>>> To: bitcoin-dev at lists.linuxfoundation.org\n>>> Cc:\n>>> Bcc:\n>>> Date: Tue, 21 Mar 2017 16:18:26 +0100\n>>> Subject: Re: [bitcoin-dev] Inquiry: Transaction Tiering\n>>> (I'm not a lawyer...)\n>>>\n>>> I'm not sure if I can make sense of your email.\n>>>\n>>> On Mon, 2017-03-20 at 20:12 +0000, Martin Stolze via bitcoin-dev wrote:\n>>>> As a participant in the economy in general and of Bitcoin in\n>>>> particular, I desire an ability to decide where I transact. The\n>>>> current state of Bitcoin does not allow me to choose my place of\n>>>> business. As a consequence, I try to learn what would be the best way\n>>>> to conduct my business in good faith. [2]\n>>>\n>>> Ignoring the rest, I don't think that the physical location /\n>>> jurisdiction of the miner has any legal implications for law applicable\n>>> to the relationship between sender and receiver of a payment.\n>>>\n>>> This is not particular to Bitcoin. We're both in Germany (I guess).\n>>> Assume we have a contract without specific agreements and I pay you in\n>>> Icelandic kronur via PayPal (in Luxembourg) and my HTTPS requests to\n>>> PayPal went via Australia and the US. Then German law applies to our\n>>> contract, nothing in the middle can change that.\n>>>\n>>> Also ignoring possible security implications, there is just no need for\n>>> a mechanism that enables users to select miners. I claim that almost\n>>> nobody cares who will mine a transaction, because it makes no technical\n>>> difference. If you don't want a specific miner to mine your\n>>> transaction, then don't use Bitcoin.\n>>>\n>>> Tim\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n>"
            },
            {
                "author": "praxeology_guy",
                "date": "2017-03-28T07:02:35",
                "message_text_only": "Martin:\n\nRe: Block Space Authority, or \"authority\": in general\n\nAn authority dictates policy.\n\nAuthority arises in 4 cases off the top of my head:\n- Authority because entity threats violence/dominance\n- Authority because entity's claim to property is respected to maintain friendship/benefits of specialization and trade. (one has authority over one's own property/business/contractually agreed claims)\n- Authority because entity claims divine inspiration, and others accept such a claim\n- Authority because entity gained respect and was voluntarily delegated\n\n\"Miners\" do not fit in any of these categories. In fact \"miners\" do the exact opposite, their policy is dictated by market demand. They do us the service of creating block candidates. If a miner is a good businessman, he mines whatever currency gives him the most profit. The end users decide the policy and which currency is worth anything. Hence the users are the ones dictating to the miners how much work they should perform on each coin.\n\nMiners compete against each other until there is only very slim profit. If they are devoting too much work to a coin they spend too much on energy/computers/network, and they have losses, so they reduce capacity on that coin. If mining a coin is extremely profitable, they expand their work until there is no profit.\n\nSo... miners don't really have any authority. Or if for some reason somebody does give them authority, its due to either the Divine (lol unlikely) or Respect reasons above... which is an unfounded/insecure reason.\n\nUsing miner signalling to determine when/whether SegWit is activated was a mistake in any extent that gave people the implication that miners have any authority. It was a poor way to schedule its activation. We assumed that the miners would activate it in a reasonable time because SegWit is undeniably good, so we just used this method to try to prevent a soft fork. Instead I recommend my proposed BitcoinUpdateBoard https://pastebin.com/ikBGPVfR. Or bitcoin core could include more entities such as specific miners and exchanges in their table located here: https://bitcoincore.org/en/segwit_adoption/.\n\nWe already have come to consensus that SegWit is good. So we should just schedule a date to activate it in the future where market participants have a reasonable time to prepare.\n\nCheers,\nPraxeology Guy\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170328/70d72b08/attachment.html>"
            },
            {
                "author": "Martin Stolze",
                "date": "2017-03-28T19:51:02",
                "message_text_only": "As I alluded to before, certain language lends itself to simple conclusions.\nYou say that \"miner\" have simple profit motives and compete only in\ntheir respective domains. But what is \"mining\"?\n\nIt is the process of acquiring a part of the block space. He who\nacquires that space can decide over this particular space. (1) Your\nentire theory falls apart at the point of an empty block. (2) \"The\npursuit of profit can come at the expense of Bitcoin:\"\n(https://twitter.com/ToneVays/status/835233366203072513). (3) Bitcoin\nhas additional value, like a brand value that could be diverted.\n- The market can be gamed for profit. Really.\n\n> So... miners don't really have any authority.\n\nI fall back on Carl Schmitt according to which the sovereign is he who\ndecides on the state of exception: If there is some person or\ninstitution, in a given polity, capable of bringing about a total\nsuspension of the law and then to use extra-legal force to normalize\nthe situation, then that person or institution is the sovereign in\nthat polity.\n- That is spot on, I don't know why the rest of the political theory\nshouldn't apply.\n\n> Using miner signalling to determine when/whether SegWit is activated [...]\n\nI didn't think of that, but you are right. The problem is just that it\ndidn't just give them the impression that they have authority, it\nactually transferred the authority.\n\nAgain: \"The question is simply what legitimate authority a node has.\"\n- You gave legitimacy to their authority! Core did!\n(Conversely, the intelligence service of some dictatorship may get\nenough hash power to claim authority over the block space, however,\nthis would have zero legitimacy and could easily be dealt with.)\n\n:(\n\nminer signaling ... just \"miner\", right?\n\nThanks for helping me understand.\nMartin\n\n\nOn Tue, Mar 28, 2017 at 8:02 AM, praxeology_guy\n<praxeology_guy at protonmail.com> wrote:\n> Martin:\n>\n> Re: Block Space Authority, or \"authority\": in general\n>\n> An authority dictates policy.\n>\n> Authority arises in 4 cases off the top of my head:\n> - Authority because entity threats violence/dominance\n> - Authority because entity's claim to property is respected to maintain\n> friendship/benefits of specialization and trade. (one has authority over\n> one's own property/business/contractually agreed claims)\n> - Authority because entity claims divine inspiration, and others accept such\n> a claim\n> - Authority because entity gained respect and was voluntarily delegated\n>\n> \"Miners\" do not fit in any of these categories.  In fact \"miners\" do the\n> exact opposite, their policy is dictated by market demand.  They do us the\n> service of creating block candidates.  If a miner is a good businessman, he\n> mines whatever currency gives him the most profit.  The end users decide the\n> policy and which currency is worth anything.  Hence the users are the ones\n> dictating to the miners how much work they should perform on each coin.\n>\n> Miners compete against each other until there is only very slim profit.  If\n> they are devoting too much work to a coin they spend too much on\n> energy/computers/network, and they have losses, so they reduce capacity on\n> that coin.  If mining a coin is extremely profitable, they expand their work\n> until there is no profit.\n>\n> So... miners don't really have any authority.  Or if for some reason\n> somebody does give them authority, its due to either the Divine (lol\n> unlikely) or Respect reasons above... which is an unfounded/insecure reason.\n>\n> Using miner signalling to determine when/whether SegWit is activated was a\n> mistake in any extent that gave people the implication that miners have any\n> authority.  It was a poor way to schedule its activation. We assumed that\n> the miners would activate it in a reasonable time because SegWit is\n> undeniably good, so we just used this method to try to prevent a soft fork.\n> Instead I recommend my proposed BitcoinUpdateBoard\n> https://pastebin.com/ikBGPVfR.  Or bitcoin core could include more entities\n> such as specific miners and exchanges in their table located here:\n> https://bitcoincore.org/en/segwit_adoption/.\n>\n> We already have come to consensus that SegWit is good.  So we should just\n> schedule a date to activate it in the future where market participants have\n> a reasonable time to prepare.\n>\n> Cheers,\n> Praxeology Guy"
            },
            {
                "author": "Martin Stolze",
                "date": "2017-03-28T12:58:31",
                "message_text_only": "Hi AJ,\nThat's outstanding. I am glad to see that there is actually somebody\nwho has made some progress.\n\n> \"miners as service providers.\"\nGreat idea! Block space as a resource is under-analyzed.\n\n> miner/pool's political positions, their consensus ideology, physical location (yes some people would like only miners in particular countries to mine their transactions)\n\nI am not joking when I say that in 3 to 8 years, I want to be able to\nverify my transaction through green blocks that are generated locally\nby my neighbor through the excess capacity of his solar panels or by\nan NGO pool that promotes solar deployment around the equator.\n\n> The main attitude right now is that people would like to 'support' miners who signal for the features they care about.\n\nYes, just selecting all SegWit signaling hash power instead of picking\nindividual Authorities would be helpful on preferredminer.com\n\n> I strongly believe, whether the Bitcoin developer community facilitates it or not, certain miners will become preferred by users.\n\nAbsolutely, considering the recent language used in opinions by the\nECB and drafts by the EU I see them assembling the artillery. I\nwouldn't be surprised if they start target practice next year. That\nwill mean that commercial interest must have a way to transact on\nsomewhat regulated space.\n\n> 1) By creating 'segregated mempools' where an authenticated third-party like my web service Preferred Miner manages the access to pending transactions destined for a specific set of miners\n\nI would call it regulated block space or regulated consensus space. I\nhope that we can do that on a deeper level, as part of the p2p\nprotocol layer.\n\n> 2) by creating transactions where the mining fee is in one way or another, an output to an address owned by the preferred miner(s).\n\nThat's a distinct function, e.g. at least some communities charge a tax. [1]\nI fear it is more likely that a business, say Coinbase, will approach\na \"miner\" and just say \"we pay 100 USD for a KB to your bank account,\nhere are our transactions with no fee\". It will literally be an\noff-chain fee. That's what I mean by \"secondary market\". This would be\none of the least appealing scenarios.\n\n> There are some terrible pitfalls with both of these methods. [...]\n\nSpot on, that's why this should receive some attention before it\nbecomes urgent. I think there is much more to it that we are missing\nat the moment, e.g. Tom: \"Using xthin/compact blocks miners only send\na tiny version of a block which then causes the receiving node to\nre-create it using the memory pool.\"\n\n\n[1] http://thebitcoin.foundation/declaration.txt\n\n\n\n> From: AJ West <ajwest at gmail.com>\n> To: bitcoin-dev at lists.linuxfoundation.org\n> Cc:\n> Bcc:\n> Date: Mon, 27 Mar 2017 12:29:20 -0400\n> Subject: Re: [bitcoin-dev] Inquiry: Transaction Tiering\n> Hi I'm AJ West, I made a service http://preferredminer.com which is a proof-of-concept project designed to spur discussion on exactly this issue of \"miners as service providers.\"\n>\n> The current status is that Bitcoin end users are looking to support specific miners, whether that's because they agree with a miner/pool's political positions, their consensus ideology, physical location (yes some people would like only miners in particular countries to mine their transactions) and the list of reasons goes on. The main attitude right now is that people would like to 'support' miners who signal for the features they care about.\n>\n> I strongly believe, whether the Bitcoin developer community facilitates it or not, certain miners will become preferred by users. In summary, there are realistically two proposed ways of providing this service in the present-day situation: 1) By creating 'segregated mempools' where an authenticated third-party like my web service Preferred Miner manages the access to pending transactions destined for a specific set of miners, and 2) by creating transactions where the mining fee is in one way or another, an output to an address owned by the preferred miner(s).\n>\n> There are some terrible pitfalls with both of these methods. The first being that you have to trust a lot of people, including the 3rd party (me) and the pools to work in your users' interest (\"don't give my transactions to other miners or broadcast to mempool please\"). Then there are the extra fees users will have to pay to offset the risk of a miner losing out for having to send the network a not-yet-broadcasted transaction. And finally, the other method requires that they be larger transactions, and a directory of mining pools' receiving addresses for outputs must be maintained. Then you have to hope the miner will be setup to scoop in your transaction knowing it's got a fee for them. Plus, how many nodes going forward are going to hold what seem to be 0-fee transactions in mempool (because the fee is in the outputs)?\n>"
            },
            {
                "author": "Andrew Baine",
                "date": "2017-03-28T14:57:09",
                "message_text_only": "The bitcoin ecosystem is better off the more transactions are propogated\npeer-to-peer than directly to miners. We want miners listening to the\nnetwork, not soliciting transactions directly from users. You whispering\nyour transactions to your miner-of-choice while I whisper to mine\ncontravenes a critical value-add of the peer-to-peer network in my opinion.\n\nOn Tue, Mar 28, 2017 at 10:35 AM Martin Stolze via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi AJ,\n> That's outstanding. I am glad to see that there is actually somebody\n> who has made some progress.\n>\n> > \"miners as service providers.\"\n> Great idea! Block space as a resource is under-analyzed.\n>\n> > miner/pool's political positions, their consensus ideology, physical\n> location (yes some people would like only miners in particular countries to\n> mine their transactions)\n>\n> I am not joking when I say that in 3 to 8 years, I want to be able to\n> verify my transaction through green blocks that are generated locally\n> by my neighbor through the excess capacity of his solar panels or by\n> an NGO pool that promotes solar deployment around the equator.\n>\n> > The main attitude right now is that people would like to 'support'\n> miners who signal for the features they care about.\n>\n> Yes, just selecting all SegWit signaling hash power instead of picking\n> individual Authorities would be helpful on preferredminer.com\n>\n> > I strongly believe, whether the Bitcoin developer community facilitates\n> it or not, certain miners will become preferred by users.\n>\n> Absolutely, considering the recent language used in opinions by the\n> ECB and drafts by the EU I see them assembling the artillery. I\n> wouldn't be surprised if they start target practice next year. That\n> will mean that commercial interest must have a way to transact on\n> somewhat regulated space.\n>\n> > 1) By creating 'segregated mempools' where an authenticated third-party\n> like my web service Preferred Miner manages the access to pending\n> transactions destined for a specific set of miners\n>\n> I would call it regulated block space or regulated consensus space. I\n> hope that we can do that on a deeper level, as part of the p2p\n> protocol layer.\n>\n> > 2) by creating transactions where the mining fee is in one way or\n> another, an output to an address owned by the preferred miner(s).\n>\n> That's a distinct function, e.g. at least some communities charge a tax.\n> [1]\n> I fear it is more likely that a business, say Coinbase, will approach\n> a \"miner\" and just say \"we pay 100 USD for a KB to your bank account,\n> here are our transactions with no fee\". It will literally be an\n> off-chain fee. That's what I mean by \"secondary market\". This would be\n> one of the least appealing scenarios.\n>\n> > There are some terrible pitfalls with both of these methods. [...]\n>\n> Spot on, that's why this should receive some attention before it\n> becomes urgent. I think there is much more to it that we are missing\n> at the moment, e.g. Tom: \"Using xthin/compact blocks miners only send\n> a tiny version of a block which then causes the receiving node to\n> re-create it using the memory pool.\"\n>\n>\n> [1] http://thebitcoin.foundation/declaration.txt\n>\n>\n>\n> > From: AJ West <ajwest at gmail.com>\n> > To: bitcoin-dev at lists.linuxfoundation.org\n> > Cc:\n> > Bcc:\n> > Date: Mon, 27 Mar 2017 12:29:20 -0400\n> > Subject: Re: [bitcoin-dev] Inquiry: Transaction Tiering\n> > Hi I'm AJ West, I made a service http://preferredminer.com which is a\n> proof-of-concept project designed to spur discussion on exactly this issue\n> of \"miners as service providers.\"\n> >\n> > The current status is that Bitcoin end users are looking to support\n> specific miners, whether that's because they agree with a miner/pool's\n> political positions, their consensus ideology, physical location (yes some\n> people would like only miners in particular countries to mine their\n> transactions) and the list of reasons goes on. The main attitude right now\n> is that people would like to 'support' miners who signal for the features\n> they care about.\n> >\n> > I strongly believe, whether the Bitcoin developer community facilitates\n> it or not, certain miners will become preferred by users. In summary, there\n> are realistically two proposed ways of providing this service in the\n> present-day situation: 1) By creating 'segregated mempools' where an\n> authenticated third-party like my web service Preferred Miner manages the\n> access to pending transactions destined for a specific set of miners, and\n> 2) by creating transactions where the mining fee is in one way or another,\n> an output to an address owned by the preferred miner(s).\n> >\n> > There are some terrible pitfalls with both of these methods. The first\n> being that you have to trust a lot of people, including the 3rd party (me)\n> and the pools to work in your users' interest (\"don't give my transactions\n> to other miners or broadcast to mempool please\"). Then there are the extra\n> fees users will have to pay to offset the risk of a miner losing out for\n> having to send the network a not-yet-broadcasted transaction. And finally,\n> the other method requires that they be larger transactions, and a directory\n> of mining pools' receiving addresses for outputs must be maintained. Then\n> you have to hope the miner will be setup to scoop in your transaction\n> knowing it's got a fee for them. Plus, how many nodes going forward are\n> going to hold what seem to be 0-fee transactions in mempool (because the\n> fee is in the outputs)?\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170328/a83fafa5/attachment-0001.html>"
            },
            {
                "author": "Martin Stolze",
                "date": "2017-03-29T12:51:47",
                "message_text_only": "Sure it will be somewhat controversial initially, however, \"miners\",\nwill have additional incentive to listen to the network in order to\nget transactions. It's not taking away from your personal choice, it's\nadding additional choice to those that are disenfranchised by\nhash-power centralization.\n\nOn Tue, Mar 28, 2017 at 3:57 PM, Andrew Baine <andrew.baine at gmail.com> wrote:\n> The bitcoin ecosystem is better off the more transactions are propogated\n> peer-to-peer than directly to miners. We want miners listening to the\n> network, not soliciting transactions directly from users. You whispering\n> your transactions to your miner-of-choice while I whisper to mine\n> contravenes a critical value-add of the peer-to-peer network in my opinion.\n>\n> On Tue, Mar 28, 2017 at 10:35 AM Martin Stolze via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> Hi AJ,\n>> That's outstanding. I am glad to see that there is actually somebody\n>> who has made some progress.\n>>\n>> > \"miners as service providers.\"\n>> Great idea! Block space as a resource is under-analyzed.\n>>\n>> > miner/pool's political positions, their consensus ideology, physical\n>> > location (yes some people would like only miners in particular countries to\n>> > mine their transactions)\n>>\n>> I am not joking when I say that in 3 to 8 years, I want to be able to\n>> verify my transaction through green blocks that are generated locally\n>> by my neighbor through the excess capacity of his solar panels or by\n>> an NGO pool that promotes solar deployment around the equator.\n>>\n>> > The main attitude right now is that people would like to 'support'\n>> > miners who signal for the features they care about.\n>>\n>> Yes, just selecting all SegWit signaling hash power instead of picking\n>> individual Authorities would be helpful on preferredminer.com\n>>\n>> > I strongly believe, whether the Bitcoin developer community facilitates\n>> > it or not, certain miners will become preferred by users.\n>>\n>> Absolutely, considering the recent language used in opinions by the\n>> ECB and drafts by the EU I see them assembling the artillery. I\n>> wouldn't be surprised if they start target practice next year. That\n>> will mean that commercial interest must have a way to transact on\n>> somewhat regulated space.\n>>\n>> > 1) By creating 'segregated mempools' where an authenticated third-party\n>> > like my web service Preferred Miner manages the access to pending\n>> > transactions destined for a specific set of miners\n>>\n>> I would call it regulated block space or regulated consensus space. I\n>> hope that we can do that on a deeper level, as part of the p2p\n>> protocol layer.\n>>\n>> > 2) by creating transactions where the mining fee is in one way or\n>> > another, an output to an address owned by the preferred miner(s).\n>>\n>> That's a distinct function, e.g. at least some communities charge a tax.\n>> [1]\n>> I fear it is more likely that a business, say Coinbase, will approach\n>> a \"miner\" and just say \"we pay 100 USD for a KB to your bank account,\n>> here are our transactions with no fee\". It will literally be an\n>> off-chain fee. That's what I mean by \"secondary market\". This would be\n>> one of the least appealing scenarios.\n>>\n>> > There are some terrible pitfalls with both of these methods. [...]\n>>\n>> Spot on, that's why this should receive some attention before it\n>> becomes urgent. I think there is much more to it that we are missing\n>> at the moment, e.g. Tom: \"Using xthin/compact blocks miners only send\n>> a tiny version of a block which then causes the receiving node to\n>> re-create it using the memory pool.\"\n>>\n>>\n>> [1] http://thebitcoin.foundation/declaration.txt\n>>\n>>\n>>\n>> > From: AJ West <ajwest at gmail.com>\n>> > To: bitcoin-dev at lists.linuxfoundation.org\n>> > Cc:\n>> > Bcc:\n>> > Date: Mon, 27 Mar 2017 12:29:20 -0400\n>> > Subject: Re: [bitcoin-dev] Inquiry: Transaction Tiering\n>> > Hi I'm AJ West, I made a service http://preferredminer.com which is a\n>> > proof-of-concept project designed to spur discussion on exactly this issue\n>> > of \"miners as service providers.\"\n>> >\n>> > The current status is that Bitcoin end users are looking to support\n>> > specific miners, whether that's because they agree with a miner/pool's\n>> > political positions, their consensus ideology, physical location (yes some\n>> > people would like only miners in particular countries to mine their\n>> > transactions) and the list of reasons goes on. The main attitude right now\n>> > is that people would like to 'support' miners who signal for the features\n>> > they care about.\n>> >\n>> > I strongly believe, whether the Bitcoin developer community facilitates\n>> > it or not, certain miners will become preferred by users. In summary, there\n>> > are realistically two proposed ways of providing this service in the\n>> > present-day situation: 1) By creating 'segregated mempools' where an\n>> > authenticated third-party like my web service Preferred Miner manages the\n>> > access to pending transactions destined for a specific set of miners, and 2)\n>> > by creating transactions where the mining fee is in one way or another, an\n>> > output to an address owned by the preferred miner(s).\n>> >\n>> > There are some terrible pitfalls with both of these methods. The first\n>> > being that you have to trust a lot of people, including the 3rd party (me)\n>> > and the pools to work in your users' interest (\"don't give my transactions\n>> > to other miners or broadcast to mempool please\"). Then there are the extra\n>> > fees users will have to pay to offset the risk of a miner losing out for\n>> > having to send the network a not-yet-broadcasted transaction. And finally,\n>> > the other method requires that they be larger transactions, and a directory\n>> > of mining pools' receiving addresses for outputs must be maintained. Then\n>> > you have to hope the miner will be setup to scoop in your transaction\n>> > knowing it's got a fee for them. Plus, how many nodes going forward are\n>> > going to hold what seem to be 0-fee transactions in mempool (because the fee\n>> > is in the outputs)?\n>> >\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "Inquiry: Transaction Tiering",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Andrew Baine",
                "Martin Stolze",
                "Tom Zander",
                "greg misiorek",
                "praxeology_guy",
                "Tim Ruffing",
                "AJ West"
            ],
            "messages_count": 18,
            "total_messages_chars_count": 88152
        }
    },
    {
        "title": "[bitcoin-dev] A BIP proposal for segwit addresses",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2017-03-20T21:35:08",
                "message_text_only": "Hello everyone,\n\nI'd like to propose a new BIP for native segwit addresses to replace\nBIP 142. These addresses are not required for segwit, but are more\nefficient, flexible, and nicer to use.\n\nThe format is base 32 and uses a simple checksum algorithm with strong\nerror detection properties. Reference code in several languages as\nwell as a website demonstrating it are included.\n\nYou can find the text here:\nhttps://github.com/sipa/bech32/blob/master/bip-witaddr.mediawiki\n\nCheers,\n\n-- \nPieter"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2017-03-21T16:16:30",
                "message_text_only": "Why use Base 32 when the QR code alphanumeric mode allows 44 characters?\nIn Bitcoin Wallet, I use Base 43 (alphabet:\n\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ$*+-./:\") for most efficient QR\ncode encoding. I only leave out the space character because it gets\nreplaced by \"+\" in URLs.\n\n\nOn 03/20/2017 10:35 PM, Pieter Wuille via bitcoin-dev wrote:\n> Hello everyone,\n> \n> I'd like to propose a new BIP for native segwit addresses to replace\n> BIP 142. These addresses are not required for segwit, but are more\n> efficient, flexible, and nicer to use.\n> \n> The format is base 32 and uses a simple checksum algorithm with strong\n> error detection properties. Reference code in several languages as\n> well as a website demonstrating it are included.\n> \n> You can find the text here:\n> https://github.com/sipa/bech32/blob/master/bip-witaddr.mediawiki\n> \n> Cheers,\n>"
            },
            {
                "author": "Peter Todd",
                "date": "2017-03-21T19:14:54",
                "message_text_only": "On Tue, Mar 21, 2017 at 05:16:30PM +0100, Andreas Schildbach via bitcoin-dev wrote:\n> Why use Base 32 when the QR code alphanumeric mode allows 44 characters?\n> In Bitcoin Wallet, I use Base 43 (alphabet:\n> \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ$*+-./:\") for most efficient QR\n> code encoding. I only leave out the space character because it gets\n> replaced by \"+\" in URLs.\n\nDoing that only makes addresses a few % shorter, at the cost of significant\ndownsides.  For example, not everyone knows what those additional characters\nare called, particularly for non-English-speaking users. Non-alphanumeric\ncharacters also complicate using the addresses in a variety of contexts ('/'\nin particularly isn't valid in filenames).\n\nI'd suggest you review the \"Rational\" section of the BIP for more details:\n\nhttps://github.com/sipa/bech32/blob/master/bip-witaddr.mediawiki#rationale\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170321/32c1ba7e/attachment.sig>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2017-03-29T10:07:40",
                "message_text_only": "On 03/21/2017 08:14 PM, Peter Todd via bitcoin-dev wrote:\n> On Tue, Mar 21, 2017 at 05:16:30PM +0100, Andreas Schildbach via bitcoin-dev wrote:\n>> Why use Base 32 when the QR code alphanumeric mode allows 44 characters?\n>> In Bitcoin Wallet, I use Base 43 (alphabet:\n>> \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ$*+-./:\") for most efficient QR\n>> code encoding. I only leave out the space character because it gets\n>> replaced by \"+\" in URLs.\n> \n> Doing that only makes addresses a few % shorter, at the cost of significant\n> downsides.  For example, not everyone knows what those additional characters\n> are called, particularly for non-English-speaking users. Non-alphanumeric\n> characters also complicate using the addresses in a variety of contexts ('/'\n> in particularly isn't valid in filenames).\n\nI'm not convinced that transmitting addresses via voice should be a\nusecase to target at. I don't understand your comment about non-english\nspeaking users. Obviously they cannot voice-communicate at all with\nonly-english-speaking users, so there is no need to communicate\nvoice-communicate addresses between them.\n\nAddresses in QR codes, addresses in URLs and addresses in NFC NDEF\nmessages are the three most used forms.\n\nSpeaking of URLs, actually Base 32 (as well as Base 43) makes QR codes\n*bigger* because due to the characters used for URL parameters (?&=)\nthose QR codes are locked to binary mode. To make them shorter, we'd\nneed to use something like \"Base 64url\" (or ideally Base 94 -- all\nprintable ASCII characters)."
            },
            {
                "author": "Lucas Ontivero",
                "date": "2017-03-30T04:50:54",
                "message_text_only": "I don't know if i should response to this mail list or make a comment in\ncommit file (\nhttps://github.com/sipa/bech32/commit/52b5a0fa6d3174c4150393fb7d6b58d34b4f5e0b#diff-d23a42e5c904045098e8f8b1189f481e\n)\n\n* Motivation:\n\nHere I think it could worth to mention that 58 requires mathematical\noperations over big numbers. This is not very fast and most of the\nprogramming languages don't provide support for big numbers OOB.\n\n* Why not make an address format that is generic for all scriptPubKeys?:\n\nI understand that if a new generic encoding format is introduced that could\nlead to some confusions but what if in the future there is a new type of\naddress that can also be encoded with bech32? Don't we need a address type\nanyway?\n\nthx\n\n\n2017-03-29 7:07 GMT-03:00 Andreas Schildbach via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> On 03/21/2017 08:14 PM, Peter Todd via bitcoin-dev wrote:\n> > On Tue, Mar 21, 2017 at 05:16:30PM +0100, Andreas Schildbach via\n> bitcoin-dev wrote:\n> >> Why use Base 32 when the QR code alphanumeric mode allows 44 characters?\n> >> In Bitcoin Wallet, I use Base 43 (alphabet:\n> >> \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ$*+-./:\") for most efficient QR\n> >> code encoding. I only leave out the space character because it gets\n> >> replaced by \"+\" in URLs.\n> >\n> > Doing that only makes addresses a few % shorter, at the cost of\n> significant\n> > downsides.  For example, not everyone knows what those additional\n> characters\n> > are called, particularly for non-English-speaking users. Non-alphanumeric\n> > characters also complicate using the addresses in a variety of contexts\n> ('/'\n> > in particularly isn't valid in filenames).\n>\n> I'm not convinced that transmitting addresses via voice should be a\n> usecase to target at. I don't understand your comment about non-english\n> speaking users. Obviously they cannot voice-communicate at all with\n> only-english-speaking users, so there is no need to communicate\n> voice-communicate addresses between them.\n>\n> Addresses in QR codes, addresses in URLs and addresses in NFC NDEF\n> messages are the three most used forms.\n>\n> Speaking of URLs, actually Base 32 (as well as Base 43) makes QR codes\n> *bigger* because due to the characters used for URL parameters (?&=)\n> those QR codes are locked to binary mode. To make them shorter, we'd\n> need to use something like \"Base 64url\" (or ideally Base 94 -- all\n> printable ASCII characters).\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/7daa6736/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "A BIP proposal for segwit addresses",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Lucas Ontivero",
                "Pieter Wuille",
                "Peter Todd",
                "Andreas Schildbach"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 6886
        }
    },
    {
        "title": "[bitcoin-dev] Fwd: [Mimblewimble] Lightning in Scriptless Scripts",
        "thread_messages": [
            {
                "author": "Bryan Bishop",
                "date": "2017-03-20T22:36:04",
                "message_text_only": "---------- Forwarded message ----------\nFrom: Andrew Poelstra <apoelstra at wpsoftware.net>\nDate: Mon, Mar 20, 2017 at 5:11 PM\nSubject: [Mimblewimble] Lightning in Scriptless Scripts\nTo: mimblewimble at lists.launchpad.net\n\n\n\n\n\nIn my last post about scriptless scripts [2] I described a way to do\ndeniable atomic swaps by pre-sharing a difference of signatures. This\nhad the limitation that it required at least one party to be shared\nbetween the signatures, allowed only pairwise linking, and required\nboth signatures to cover data that is known at the time of setup.\nLinking a multi-hop Lightning channel with these constraints has proved\ndifficult.\n\n* * *\n\nRecently I've found a different construction that behaves much more like\na hash preimage challenge, and this can actually be used for Lightning.\nFurther, it supports reblinding, so you can learn a preimage but hide\nwhich one you're looking for. (Ethan, one might actually overlap with\nTumbleBit, sorry :)).\n\nIt works like this. We'll treat x -> xG as a hash function, so x is the\npreimage of xG. There are two separate but related things I can do: (a)\nconstruct a signature which reveals the preimage; or (b) create a\n\"pre-signature\" which can be turned into a signature with the help of\nthe preimage.\n\nHere's how it works: suppose I send xG to Rusty and he wants to send\nme coins conditional on my sending him x. Lets say I have key P1 and\nnonce R1; he has key P2 and nonce R2. Together we're going to make a\nmultisignature with key P1 + P2 and Rusty is going to set things up\nso that I can't complete the signature without telling him x.\n\nHere we go.\n\n  0. We agree somehow on R1, R2, P1, P2.\n\n  1. We can both compute a challenge e = H(P1 + P2 || R1 + R2 || tx).\n\n  2. I send s' = k1 - x - x1e, where R1 = k1G and P1 = x1G. Note he\n     can verify I did so with the equation s'G = R1 - xG - eP1.\n\n  3. He now sends me s2 = k2 - x2e, which is his half of the multisig.\n\n  4. I complete the sig by adding s1 = k1 - x1e. The final sig is\n     (s1 + s2, R1 + R2).\n\nNow as soon as this signature gets out, I can compute x = s1 - s'.\n\n* * *\n\nOk, pretty nifty. But now suppose Rusty wants to receive coins conditioned\non him revealing x, say, because he's a middle hop in a Lightning channel.\nYou might think he could act the same as I did in step (2), computing\ns' = k1 - x - x1e, but actually he can't, because he doesn't know x himself!\nAll good. Instead he does the following.\n\nTo put names on things, let's say he's taking coins from Tadge. The\nprotocol is almost the same as above.\n\n  0. They agree somehow on R1, R2, P1, P2. Tadge's key and nonce are\n     R1 and P1, but there's a catch: P1 = x1G as before, but now\n     R1 - xG = k1G. That is, his nonce is offset by k1G.\n\n  1. They can both compute a challenge e = H(P1 + P2 || R1 + R2 || tx).\n\n  2. Tadge sends the \"presignature\" s' = k1 - x1e. Rusty can verify this\n     with the equation s'G = R1 - xG - eP1.\n\n  3. Now whenever Rusty obtains x, he can compute s1 = s' - x, which is\n     Tadge's half of the final signature.\n\n  4. Rusty computes s2 himself and completes the signature.\n\n* * *\n\nOk, even cooler. But the real Rusty complained about these stories, saying\nthat it's a privacy leak for him to use the same xG with me as he used with\nTadge. In a onion-routed Lightning channel, this xG-reuse would let all\nany two participants in a path figure out that they were in one path, if\nthey were colluding, even if they weren't directly connected.\n\nNo worries, we can fix this very simply. Rusty chooses a reblinding factor\nrG. I give him x, as before, but what Tadge demands from him is (x + r).\n(I give xG to Rusty as a challenge; he forwards this as xG + rG to Tadge.)\nSince Rusty knows r he's able to do the translation. The two challenges\nappear uniformly independently random to any observers.\n\n* * *\n\nLet's put this together into my understanding of how Lightning is supposed\nto work. Suppose Andrew is trying to send coins to Drew, through Bob and\nCarol. He constructs a path\n\n  A --> B --> C --> D\n\nwhere each arrow is a Lightning channel. Only Andrew knows the complete\npath, and is onion-encrypting his connections to each participant (who\nknow the next and previous participants, but that's it).\n\nHe obtains a challenge T = xG from D, and reblinding factors U and V\nfrom B and C. Using the above tricks,\n\n  1. A sends coins to B contingent on him learning the discrete logarithm\n     of T + U + V.\n\n  2. B sends coins to C contingent on him learning the discrete logarithm\n     of T + V. (He knows the discrete log of U, so this is sufficient for\n     him to meet Andrew's challenge.)\n\n  3. C sends to D contingent on him learning the discrete log of T, which\n     is D's original challenge. Again, because C knows the discrete log\n     of V, this is sufficient for her to meet B's challenge.\n\nThe resulting path consists of transactions which are signed with single\nuniformly random independent Schnorr signatures. Even though they're all\npart of an atomic Lightning path.\n\n* * *\n\nNote that the s' values need to be re-communicated every time the\ntransaction\nchanges (as does the nonce). Because it depends on the other party's nonce,\nthis might require an additional round of interaction per channel update.\n\nNote also that nothing I've said depends at all on what's being signed. This\nmeans this works just as well for MimbleWimble as it would for\nBitcoin+Schnorr\nas it would for Monero (with a multisig ring-CT construction) as it would\nfor Ethereum+Schnorr. Further, it can link transactions across chains.\n\n\nI'm very excited about this.\n\nCheers\nAndrew\n\n\n[1] https://lists.launchpad.net/mimblewimble/msg00036.html\n\n\n\n\n--\nAndrew Poelstra\nMathematics Department, Blockstream\nEmail: apoelstra at wpsoftware.net\nWeb:   https://www.wpsoftware.net/andrew\n\n\"A goose alone, I suppose, can know the loneliness of geese\n who can never find their peace,\n whether north or south or west or east\"\n       --Joanna Newsom\n\n\n--\nMailing list: https://launchpad.net/~mimblewimble\nPost to     : mimblewimble at lists.launchpad.net\nUnsubscribe : https://launchpad.net/~mimblewimble\nMore help   : https://help.launchpad.net/ListHelp\n\n\n\n\n-- \n- Bryan\nhttp://heybryan.org/\n1 512 203 0507\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170320/4b59a31e/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 464 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170320/4b59a31e/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Fwd: Lightning in Scriptless Scripts",
            "categories": [
                "bitcoin-dev",
                "Mimblewimble"
            ],
            "authors": [
                "Bryan Bishop"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 6657
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin and CVEs",
        "thread_messages": [
            {
                "author": "Simon Liu",
                "date": "2017-03-21T02:47:31",
                "message_text_only": "Hi,\n\nAre there are any vulnerabilities in Bitcoin which have been fixed but\nnot yet publicly disclosed?  Is the following list of Bitcoin CVEs\nup-to-date?\n\nhttps://en.bitcoin.it/wiki/Common_Vulnerabilities_and_Exposures\n\nThere have been no new CVEs posted for almost three years, except for\nCVE-2015-3641, but there appears to be no information publicly available\nfor that issue:\n\nhttps://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3641\n\nIt would be of great benefit to end users if the community of clients\nand altcoins derived from Bitcoin Core could be patched for any known\nvulnerabilities.\n\nDoes anyone keep track of security related bugs and patches, where the\ndefect severity is similar to those found on the CVE list above?  If\nyes, can that list be shared with other developers?\n\nIf some fixes have been committed with discreet log messages, it will be\ndifficult for third parties to identify and assess the importance of any\ncritical patches.  Do any important ones come to mind?\n\nFinally, curious to know, what has changed since 2014 that has resulted\nin the defect rate, at least based on the list of publicly reported\nCVEs, to fall to zero?  A change to the development process?\nIntroduction of a bug bounty?\n\nBest Regards,\n\nSimon"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin and CVEs",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Simon Liu"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1248
        }
    },
    {
        "title": "[bitcoin-dev] Fraud proofs for block size/weight",
        "thread_messages": [
            {
                "author": "Luke Dashjr",
                "date": "2017-03-22T08:47:30",
                "message_text_only": "Despite the generalised case of fraud proofs being likely impossible, there \nhave recently been regular active proposals of miners attacking with simply \noversized blocks in an attempt to force a hardfork. This specific attack can \nbe proven, and reliably so, since the proof cannot be broken without also \nbreaking their attempted hardfork at the same time.\n\nWhile ideally all users ought to use their own full node for validation (even \nwhen using a light client for their wallet), many bitcoin holders still do \nnot. As such, they are likely to need protection from these attacks, to ensure \nthey remain on the Bitcoin blockchain.\n\nI've written up a draft BIP for fraud proofs and how light clients can detect \nblockchains that are simply invalid due to excess size and/or weight:\n\n    https://github.com/luke-jr/bips/blob/bip-sizefp/bip-sizefp.mediawiki\n\nI believe this draft is probably ready for implementation already, but if \nanyone has any idea on how it might first be improved, please feel free to \nmake suggestions.\n\nLuke"
            },
            {
                "author": "Bram Cohen",
                "date": "2017-03-22T20:49:08",
                "message_text_only": "Some questions:\n\nDoes this require information to be added to blocks, or can it work today\non the existing format?\n\nDoes this count number of transactions or their total length? The block\nlimit is in bytes rather than number of transactions, but transaction\nnumber can be a reasonable proxy if you allow for some false negatives but\nwant a basic sanity check.\n\nDoes this allow for proofs of length in the positive direction,\ndemonstrating that a block is good, or does it only serve to show that\nblocks are bad? Ideally we'd like an extension to SPV protocol so light\nclients require proofs of blocks not being too big, given the credible\nthreat of there being an extremely large-scale attack on the network of\nthat form.\n\n\nOn Wed, Mar 22, 2017 at 1:47 AM, Luke Dashjr via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Despite the generalised case of fraud proofs being likely impossible, there\n> have recently been regular active proposals of miners attacking with simply\n> oversized blocks in an attempt to force a hardfork. This specific attack\n> can\n> be proven, and reliably so, since the proof cannot be broken without also\n> breaking their attempted hardfork at the same time.\n>\n> While ideally all users ought to use their own full node for validation\n> (even\n> when using a light client for their wallet), many bitcoin holders still do\n> not. As such, they are likely to need protection from these attacks, to\n> ensure\n> they remain on the Bitcoin blockchain.\n>\n> I've written up a draft BIP for fraud proofs and how light clients can\n> detect\n> blockchains that are simply invalid due to excess size and/or weight:\n>\n>     https://github.com/luke-jr/bips/blob/bip-sizefp/bip-sizefp.mediawiki\n>\n> I believe this draft is probably ready for implementation already, but if\n> anyone has any idea on how it might first be improved, please feel free to\n> make suggestions.\n>\n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170322/d02f0db1/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2017-03-22T21:51:08",
                "message_text_only": "It works today and can be used to prove exact size: the key observation is that all you need to show the length and hash of a transaction is the final SHA256 midstate and chunk (max 64 bytes). It also uses the observation that a valid transaction must be at least 60 bytes long for compression (though much of that compression possibility goes away if you're proving something other than \"too large\").\n\nOn March 22, 2017 1:49:08 PM PDT, Bram Cohen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>Some questions:\n>\n>Does this require information to be added to blocks, or can it work\n>today\n>on the existing format?\n>\n>Does this count number of transactions or their total length? The block\n>limit is in bytes rather than number of transactions, but transaction\n>number can be a reasonable proxy if you allow for some false negatives\n>but\n>want a basic sanity check.\n>\n>Does this allow for proofs of length in the positive direction,\n>demonstrating that a block is good, or does it only serve to show that\n>blocks are bad? Ideally we'd like an extension to SPV protocol so light\n>clients require proofs of blocks not being too big, given the credible\n>threat of there being an extremely large-scale attack on the network of\n>that form.\n>\n>\n>On Wed, Mar 22, 2017 at 1:47 AM, Luke Dashjr via bitcoin-dev <\n>bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Despite the generalised case of fraud proofs being likely impossible,\n>there\n>> have recently been regular active proposals of miners attacking with\n>simply\n>> oversized blocks in an attempt to force a hardfork. This specific\n>attack\n>> can\n>> be proven, and reliably so, since the proof cannot be broken without\n>also\n>> breaking their attempted hardfork at the same time.\n>>\n>> While ideally all users ought to use their own full node for\n>validation\n>> (even\n>> when using a light client for their wallet), many bitcoin holders\n>still do\n>> not. As such, they are likely to need protection from these attacks,\n>to\n>> ensure\n>> they remain on the Bitcoin blockchain.\n>>\n>> I've written up a draft BIP for fraud proofs and how light clients\n>can\n>> detect\n>> blockchains that are simply invalid due to excess size and/or weight:\n>>\n>>    \n>https://github.com/luke-jr/bips/blob/bip-sizefp/bip-sizefp.mediawiki\n>>\n>> I believe this draft is probably ready for implementation already,\n>but if\n>> anyone has any idea on how it might first be improved, please feel\n>free to\n>> make suggestions.\n>>\n>> Luke\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170322/b7fc87f1/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2017-03-23T18:27:39",
                "message_text_only": "Great stuff, although the ordering of the sections seems a little bit confusing.\n\nI think it would be clearer to put the \"Creation of proofs\" section\nbefore \"Proof verification\", maybe even before \"Proof format\" if a\nhigh level defintion of \"full tx size proof\" is provided before.\n\nAlso, in \"For the full-size proof, each transaction should be assumed\nto be at a minimum the stripped-size rather than the fixed 60 bytes.\"\nit seems you are referring to a \"full-size block proof\" as opposed to\na \"full size tx proof\", perhaps a better term could be \"full-weight\nblock proof\" if what you are referring to is the proof of the weight\ninstead of only the pre-segwit size.\n\nPerhaps some short definitions for \"stripped-size proof\", \"full tx\nsize proof\", \"full-size proof\" and maybe also \"size component\" at the\nbeginning would be enough.\n\nIn \"Network protocol\", \"It should not recheck blocks known to be\nvalid, \" does \"known to be valid\" include the blocks that the peer\ntold us where valid (with their hash and 0 in the enumerated varint)?\nThose could be invalid too if the peer was lying, no?\nDo you mean \"It should not recheck blocks known to be invalid,\"?\n\nWhy do you need to have at least one full tx size?\n\nIn Rationale you have:\n\"\nWhy must a full tx size proof be included?\n\nThis is necessary to establish that the claimed block transaction\ncount is correct.\n\"\n\nWhy do you need to establish that? If you can establish that the\nnumber of transactions is at least N and that N * 60 bytes is greater\nthan the size/weight limit, isn't it that enough?\n\n\nOn Wed, Mar 22, 2017 at 10:51 PM, Matt Corallo via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> It works today and can be used to prove exact size: the key observation is\n> that all you need to show the length and hash of a transaction is the final\n> SHA256 midstate and chunk (max 64 bytes). It also uses the observation that\n> a valid transaction must be at least 60 bytes long for compression (though\n> much of that compression possibility goes away if you're proving something\n> other than \"too large\").\n>\n>\n> On March 22, 2017 1:49:08 PM PDT, Bram Cohen via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> Some questions:\n>>\n>> Does this require information to be added to blocks, or can it work today\n>> on the existing format?\n>>\n>> Does this count number of transactions or their total length? The block\n>> limit is in bytes rather than number of transactions, but transaction number\n>> can be a reasonable proxy if you allow for some false negatives but want a\n>> basic sanity check.\n>>\n>> Does this allow for proofs of length in the positive direction,\n>> demonstrating that a block is good, or does it only serve to show that\n>> blocks are bad? Ideally we'd like an extension to SPV protocol so light\n>> clients require proofs of blocks not being too big, given the credible\n>> threat of there being an extremely large-scale attack on the network of that\n>> form.\n>>\n>>\n>> On Wed, Mar 22, 2017 at 1:47 AM, Luke Dashjr via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>> Despite the generalised case of fraud proofs being likely impossible,\n>>> there\n>>> have recently been regular active proposals of miners attacking with\n>>> simply\n>>> oversized blocks in an attempt to force a hardfork. This specific attack\n>>> can\n>>> be proven, and reliably so, since the proof cannot be broken without also\n>>> breaking their attempted hardfork at the same time.\n>>>\n>>> While ideally all users ought to use their own full node for validation\n>>> (even\n>>> when using a light client for their wallet), many bitcoin holders still\n>>> do\n>>> not. As such, they are likely to need protection from these attacks, to\n>>> ensure\n>>> they remain on the Bitcoin blockchain.\n>>>\n>>> I've written up a draft BIP for fraud proofs and how light clients can\n>>> detect\n>>> blockchains that are simply invalid due to excess size and/or weight:\n>>>\n>>>     https://github.com/luke-jr/bips/blob/bip-sizefp/bip-sizefp.mediawiki\n>>>\n>>> I believe this draft is probably ready for implementation already, but if\n>>> anyone has any idea on how it might first be improved, please feel free\n>>> to\n>>> make suggestions.\n>>>\n>>> Luke\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2017-03-25T05:16:25",
                "message_text_only": "On Thursday, March 23, 2017 6:27:39 PM Jorge Tim\u00f3n via bitcoin-dev wrote:\n> I think it would be clearer to put the \"Creation of proofs\" section\n> before \"Proof verification\", maybe even before \"Proof format\" if a\n> high level defintion of \"full tx size proof\" is provided before.\n\nCreation of proofs isn't part of the spec itself.\nI've moved it out of the Specification section (but it's still below it).\n\n> Also, in \"For the full-size proof, each transaction should be assumed\n> to be at a minimum the stripped-size rather than the fixed 60 bytes.\"\n> it seems you are referring to a \"full-size block proof\" as opposed to\n> a \"full size tx proof\", perhaps a better term could be \"full-weight\n> block proof\" if what you are referring to is the proof of the weight\n> instead of only the pre-segwit size.\n> \n> Perhaps some short definitions for \"stripped-size proof\", \"full tx\n> size proof\", \"full-size proof\" and maybe also \"size component\" at the\n> beginning would be enough.\n\nAdded a definitions section above.\n\n> In \"Network protocol\", \"It should not recheck blocks known to be\n> valid, \" does \"known to be valid\" include the blocks that the peer\n> told us where valid (with their hash and 0 in the enumerated varint)?\n> Those could be invalid too if the peer was lying, no?\n> Do you mean \"It should not recheck blocks known to be invalid,\"?\n\nRight, fixed.\n\n> Why do you need to have at least one full tx size?\n> \n> In Rationale you have:\n> \"\n> Why must a full tx size proof be included?\n> \n> This is necessary to establish that the claimed block transaction\n> count is correct.\n> \"\n> \n> Why do you need to establish that? If you can establish that the\n> number of transactions is at least N and that N * 60 bytes is greater\n> than the size/weight limit, isn't it that enough?\n\nThe only way to establish the number of transactions at all, is to show that a \nleaf is a parsable transaction. Which this doesn't actually show, so it's \nbroken. :( Need to think on this. Any ideas? :/\n\nLuke"
            },
            {
                "author": "Chris Pacia",
                "date": "2017-03-26T14:16:15",
                "message_text_only": "On Mar 25, 2017 12:17 AM, \"Luke Dashjr via bitcoin-dev\" <bitcoin-dev at lists.\nlinuxfoundation.org> wrote:\n\n Any ideas? :/\n\n\nCan't the size be aggregated up the tree such that each midstate hash is\nthe hash of branches below plus the agreegate of the sizes below.\n\nThis would make the root  hash(left + right + size/weight) and the proof\nwould just be the preimage.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170326/02f3f01b/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2017-03-28T22:35:05",
                "message_text_only": "I dont think thats true? Sure, you have to assume the block is valid\naside from a too-large size, but it seems sane.\n\nYou don't strictly need to show that a leaf is a parseable transaction,\nas long as you can assume that the block is valid and that you cannot\nforge a SHA256 midstate which, when combined with data with a given\nlength tag, would result in a hash of a given value (this is a pretty\nstrong assumption, IMO, IIRC this was not a studied nor a claimed\nfeature of SHA256).\n\nThe only issue is that, since parts of the merkle tree are repeated, you\nneed to be sure that the counting for minimum number of transactions is\naccurate, though I did not review your proposal text to check that.\n\nOn 03/25/17 05:16, Luke Dashjr wrote:\n - snip -\n> The only way to establish the number of transactions at all, is to show that a \n> leaf is a parsable transaction. Which this doesn't actually show, so it's \n> broken. :( Need to think on this. Any ideas? :/\n> \n> Luke\n>"
            }
        ],
        "thread_summary": {
            "title": "Fraud proofs for block size/weight",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jorge Tim\u00f3n",
                "Luke Dashjr",
                "Matt Corallo",
                "Bram Cohen",
                "Chris Pacia"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 14278
        }
    },
    {
        "title": "[bitcoin-dev] Issolated Bitcoin Nodes",
        "thread_messages": [
            {
                "author": "Juan Garavaglia",
                "date": "2017-03-23T22:37:34",
                "message_text_only": "We notice some reorgs in Bitcoin testnet, while reorgs in testnet are common and may be part of different tests and experiments, it seems the forks are not created by a single user and multiple blocks were mined by different users in each chain.  My first impression was that the problem was related to network issues but some Bitcoin explorers were following one chain while others follow the other one.  Nonetheless, well established explorers like blocktrail.com or blockr.io were following different chains at different heights which led to me to believe that it was not a network issue. After some time, a reorg occurs and it all comes to normal state as a single chain.\nWe started investigating more and we identified that the fork occurs with nodes 0.12; in some situations, nodes 0.12 has longer/different chains. The blocks in both chains are valid so something must be occurring in the communication between nodes but not related with the network itself.\nLong story short, when nodes 0.13+ receive blocks from 0.13+ nodes all is ok, and those blocks propagate to older nodes with no issues. But when a block tries to be propagated from bitcoind 0.12.+ to newer ones those blocks are NOT being propagated to the peers with newer versions while these newer blocks are being propagated to peers with older versions with no issues.\nMy conclusion is that we have a backward compatibility issue between 0.13.X+ and older versions.\nThe issue is simple to replicate, first, get latest version of bitcoind, complete the IBD after is at current height, then force it to use exclusively one or more peers of versions 0.12.X and older, and you will notice that the latest version node will never receive a new block.\nProbably some alternative bitcoin implementations act as bridges between these two versions and facilitate the chain reorgs.\nI have not yet found any way where/how it can be used in a malicious way or be exploited by a miner but in theory Bitcoin 0.13.X+ should remain compatible with older ones, but a 0.13+ node may become isolated by 0.12 peers, and there is not notice for the node owner.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170323/7acf199d/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2017-03-23T23:01:09",
                "message_text_only": "I haven't investigated, but you may be seeing segwit-invalid blocks...0.13.0+ nodes will enforce segwit as it activated some time ago on testnet, 0.12.X nodes will not.\n\nOn March 23, 2017 3:37:34 PM PDT, Juan Garavaglia via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>We notice some reorgs in Bitcoin testnet, while reorgs in testnet are\n>common and may be part of different tests and experiments, it seems the\n>forks are not created by a single user and multiple blocks were mined\n>by different users in each chain.  My first impression was that the\n>problem was related to network issues but some Bitcoin explorers were\n>following one chain while others follow the other one.  Nonetheless,\n>well established explorers like blocktrail.com or blockr.io were\n>following different chains at different heights which led to me to\n>believe that it was not a network issue. After some time, a reorg\n>occurs and it all comes to normal state as a single chain.\n>We started investigating more and we identified that the fork occurs\n>with nodes 0.12; in some situations, nodes 0.12 has longer/different\n>chains. The blocks in both chains are valid so something must be\n>occurring in the communication between nodes but not related with the\n>network itself.\n>Long story short, when nodes 0.13+ receive blocks from 0.13+ nodes all\n>is ok, and those blocks propagate to older nodes with no issues. But\n>when a block tries to be propagated from bitcoind 0.12.+ to newer ones\n>those blocks are NOT being propagated to the peers with newer versions\n>while these newer blocks are being propagated to peers with older\n>versions with no issues.\n>My conclusion is that we have a backward compatibility issue between\n>0.13.X+ and older versions.\n>The issue is simple to replicate, first, get latest version of\n>bitcoind, complete the IBD after is at current height, then force it to\n>use exclusively one or more peers of versions 0.12.X and older, and you\n>will notice that the latest version node will never receive a new\n>block.\n>Probably some alternative bitcoin implementations act as bridges\n>between these two versions and facilitate the chain reorgs.\n>I have not yet found any way where/how it can be used in a malicious\n>way or be exploited by a miner but in theory Bitcoin 0.13.X+ should\n>remain compatible with older ones, but a 0.13+ node may become isolated\n>by 0.12 peers, and there is not notice for the node owner.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170323/f7be920b/attachment.html>"
            },
            {
                "author": "Andrew Chow",
                "date": "2017-03-23T23:14:28",
                "message_text_only": "The issue is due to Segwit blocks since Testnet has already activated\nSegwit. 0.12.x- nodes will receive a Segwit block with all of the\nwitnesses stripped. When they relay this block to a 0.13.0+ node, the\nblock will be rejected because those have Segwit functionality and\nrequire the witnesses to be in the block. Given that Testnet has a\nsmaller number of nodes and less difficulty, this could result in some\nminers using 0.13.0+ mining blocks which do not propagate well and thus\ncausing multiple chain splits and reorgs as other miners find blocks for\nthe same height before receiving a block for that height.\n\n\nOn 3/23/2017 6:37 PM, Juan Garavaglia via bitcoin-dev wrote:\n>\n> We notice some reorgs in Bitcoin testnet, while reorgs in testnet are\n> common and may be part of different tests and experiments, it seems\n> the forks are not created by a single user and multiple blocks were\n> mined by different users in each chain.  My first impression was that\n> the problem was related to network issues but some Bitcoin explorers\n> were following one chain while others follow the other one. \n> Nonetheless, well established explorers like blocktrail.com or\n> blockr.io were following different chains at different heights which\n> led to me to believe that it was not a network issue. After some time,\n> a reorg occurs and it all comes to normal state as a single chain.\n>\n> We started investigating more and we identified that the fork occurs\n> with nodes 0.12; in some situations, nodes 0.12 has longer/different\n> chains. The blocks in both chains are valid so something must be\n> occurring in the communication between nodes but not related with the\n> network itself.\n>\n> Long story short, when nodes 0.13+ receive blocks from 0.13+ nodes all\n> is ok, and those blocks propagate to older nodes with no issues. But\n> when a block tries to be propagated from bitcoind 0.12.+ to newer ones\n> those blocks are NOT being propagated to the peers with newer versions\n> while these newer blocks are being propagated to peers with older\n> versions with no issues.\n>\n> My conclusion is that we have a backward compatibility issue between\n> 0.13.X+ and older versions.\n>\n> The issue is simple to replicate, first, get latest version of\n> bitcoind, complete the IBD after is at current height, then force it\n> to use exclusively one or more peers of versions 0.12.X and older, and\n> you will notice that the latest version node will never receive a new\n> block.\n>\n> Probably some alternative bitcoin implementations act as bridges\n> between these two versions and facilitate the chain reorgs.\n>\n> I have not yet found any way where/how it can be used in a malicious\n> way or be exploited by a miner but in theory Bitcoin 0.13.X+ should\n> remain compatible with older ones, but a 0.13+ node may become\n> isolated by 0.12 peers, and there is not notice for the node owner.\n>\n>  \n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170323/a54eedc6/attachment-0001.html>"
            },
            {
                "author": "Andrew Chow",
                "date": "2017-03-24T03:38:21",
                "message_text_only": "A correction to my previous email (because people are quoting me on\nr/btc and what I wrote was wrong)\n\nThis statement is incorrect:\n\n> Given that Testnet has a smaller number of nodes and less difficulty,\nthis could result in some miners using 0.13.0+ mining blocks which do\nnot propagate well and thus causing multiple chain splits and reorgs as\nother miners find blocks for the same height before receiving a block\nfor that height.\n\nMiners using 0.13.0+ will produce blocks that propagate well. This is\nbecause 0.12.x- nodes will accept those blocks, and so will 0.13.0+.\nFurthermore Core 0.13.0+ will use its outbound connections to connect to\nsegwit enabled peers so that it will be relaying segwit blocks to\nsomeone. However Bitcoin Core 0.13.0+ will not request blocks from peers\nthat are not segwit enabled (because with segwit, they will be receiving\nblocks without witnesses which are invalid to a segwit node), so they\nwill not receive blocks mined by a 0.12.x- node. This means that 0.12.x-\nmined blocks propagate poorly, even though are valid. Because of the\npoor propagation, a 0.13.0+ miner can find a block at the same height\nwhich is more likely to get built upon. However, the poorly propagated\nblock can still reach other 0.12.x- miners who can build upon it due to\nthe low difficulty and difficulty resets, thus causing multiple chains\nto exist, particularly among pockets of 0.12.x- nodes. The reorgs happen\nwhen either the 0.12.x- nodes hear of the segwit blockchain that is\npresumably longer because it has the majority hashrate, or when people\nrun bridges which allow 0.12.x- nodes relay blocks to 0.13.0+ nodes.\n\nOn 3/23/2017 7:14 PM, Andrew Chow wrote:\n>\n> The issue is due to Segwit blocks since Testnet has already activated\n> Segwit. 0.12.x- nodes will receive a Segwit block with all of the\n> witnesses stripped. When they relay this block to a 0.13.0+ node, the\n> block will be rejected because those have Segwit functionality and\n> require the witnesses to be in the block. Given that Testnet has a\n> smaller number of nodes and less difficulty, this could result in some\n> miners using 0.13.0+ mining blocks which do not propagate well and\n> thus causing multiple chain splits and reorgs as other miners find\n> blocks for the same height before receiving a block for that height.\n>\n>\n> On 3/23/2017 6:37 PM, Juan Garavaglia via bitcoin-dev wrote:\n>>\n>> We notice some reorgs in Bitcoin testnet, while reorgs in testnet are\n>> common and may be part of different tests and experiments, it seems\n>> the forks are not created by a single user and multiple blocks were\n>> mined by different users in each chain.  My first impression was that\n>> the problem was related to network issues but some Bitcoin explorers\n>> were following one chain while others follow the other one. \n>> Nonetheless, well established explorers like blocktrail.com or\n>> blockr.io were following different chains at different heights which\n>> led to me to believe that it was not a network issue. After some\n>> time, a reorg occurs and it all comes to normal state as a single chain.\n>>\n>> We started investigating more and we identified that the fork occurs\n>> with nodes 0.12; in some situations, nodes 0.12 has longer/different\n>> chains. The blocks in both chains are valid so something must be\n>> occurring in the communication between nodes but not related with the\n>> network itself.\n>>\n>> Long story short, when nodes 0.13+ receive blocks from 0.13+ nodes\n>> all is ok, and those blocks propagate to older nodes with no issues.\n>> But when a block tries to be propagated from bitcoind 0.12.+ to newer\n>> ones those blocks are NOT being propagated to the peers with newer\n>> versions while these newer blocks are being propagated to peers with\n>> older versions with no issues.\n>>\n>> My conclusion is that we have a backward compatibility issue between\n>> 0.13.X+ and older versions.\n>>\n>> The issue is simple to replicate, first, get latest version of\n>> bitcoind, complete the IBD after is at current height, then force it\n>> to use exclusively one or more peers of versions 0.12.X and older,\n>> and you will notice that the latest version node will never receive a\n>> new block.\n>>\n>> Probably some alternative bitcoin implementations act as bridges\n>> between these two versions and facilitate the chain reorgs.\n>>\n>> I have not yet found any way where/how it can be used in a malicious\n>> way or be exploited by a miner but in theory Bitcoin 0.13.X+ should\n>> remain compatible with older ones, but a 0.13+ node may become\n>> isolated by 0.12 peers, and there is not notice for the node owner.\n>>\n>>  \n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170323/74d42235/attachment-0001.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2017-03-24T00:20:32",
                "message_text_only": "On Thu, Mar 23, 2017 at 3:37 PM, Juan Garavaglia via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Long story short, when nodes 0.13+ receive blocks from 0.13+ nodes all is\n> ok, and those blocks propagate to older nodes with no issues. But when a\n> block tries to be propagated from bitcoind 0.12.+ to newer ones those blocks\n> are NOT being propagated to the peers with newer versions while these newer\n> blocks are being propagated to peers with older versions with no issues.\n>\n> My conclusion is that we have a backward compatibility issue between 0.13.X+\n> and older versions.\n\nHello Juan,\n\nthis is expected behaviour. Nodes with segwit active only download\nblocks from other segwit peers, as old peers cannot provide the\nwitness data they need to verify the blocks.\n\n-- \nPieter"
            },
            {
                "author": "James Hilliard",
                "date": "2017-03-24T00:31:25",
                "message_text_only": "There were bridge nodes being run on testnet at one point to prevent\nforks https://github.com/jl2012/bitcoin/commit/9717d856e72baa939d4b273f0a56e6009978e11b\n\nOn Thu, Mar 23, 2017 at 7:20 PM, Pieter Wuille via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Thu, Mar 23, 2017 at 3:37 PM, Juan Garavaglia via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Long story short, when nodes 0.13+ receive blocks from 0.13+ nodes all is\n>> ok, and those blocks propagate to older nodes with no issues. But when a\n>> block tries to be propagated from bitcoind 0.12.+ to newer ones those blocks\n>> are NOT being propagated to the peers with newer versions while these newer\n>> blocks are being propagated to peers with older versions with no issues.\n>>\n>> My conclusion is that we have a backward compatibility issue between 0.13.X+\n>> and older versions.\n>\n> Hello Juan,\n>\n> this is expected behaviour. Nodes with segwit active only download\n> blocks from other segwit peers, as old peers cannot provide the\n> witness data they need to verify the blocks.\n>\n> --\n> Pieter\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Eric Voskuil",
                "date": "2017-03-24T01:58:37",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 03/23/2017 05:20 PM, Pieter Wuille via bitcoin-dev wrote:\n> On Thu, Mar 23, 2017 at 3:37 PM, Juan Garavaglia via bitcoin-dev \n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Long story short, when nodes 0.13+ receive blocks from 0.13+\n>> nodes all is ok, and those blocks propagate to older nodes with\n>> no issues. But when a block tries to be propagated from bitcoind\n>> 0.12.+ to newer ones those blocks are NOT being propagated to the\n>> peers with newer versions while these newer blocks are being\n>> propagated to peers with older versions with no issues.\n>> \n>> My conclusion is that we have a backward compatibility issue\n>> between 0.13.X+ and older versions.\n> \n> Hello Juan,\n> \n> this is expected behaviour. Nodes with segwit active only download \n> blocks from other segwit peers, as old peers cannot provide the \n> witness data they need to verify the blocks.\n\nJuan's statement pertains to incompatibility, not mysterious causation.\n\nClearly it's a material consideration. Is it an oversight that this is\nnot documented as an incompatibility in any of the segwit BIPs?\n\nI don't recall any discussion on the importance of segwit bridge\nnodes. Is there a plan for bridging mainnet?\n\ne\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\n\niQEcBAEBCAAGBQJY1H1AAAoJEDzYwH8LXOFOAk4H/RrJyexvyFKXfY7qC0bGCVwN\n2iZ0wR0n/H0Z0qfP5nzDID0RARC3F/KFAAeLTaCIZa5uI0h3MrPbNm7hSi/m0nHJ\nmTzfJf0E8g+ETzyDpWjgR25ta6n3VdKp2tnNrY3z/ojnGYBFthpRDWV09K5trX5k\nqMyoPDfTP8jVIwihqx3MZLBnfiQKlEjNxCxmnuL7bh37msp6WK+elKudSrDBPiIi\nljQ+u5NyeKWY+qzEzKPShIKnm3wC4K/RiiZIUvz60x6PCHr8OZGTEiKhPLWznVuj\nQ9gVtHxFzDpMZbxo4vP4nH+isQgqNa9gQ2E5783OC0/lpxHCoZEsgsD5lTAcp08=\n=GyRS\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Issolated Bitcoin Nodes",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Voskuil",
                "James Hilliard",
                "Juan Garavaglia",
                "Matt Corallo",
                "Andrew Chow",
                "Pieter Wuille"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 16989
        }
    },
    {
        "title": "[bitcoin-dev] Defending against empty or near empty blocks from malicious miner takeover?",
        "thread_messages": [
            {
                "author": "CANNON",
                "date": "2017-03-24T16:03:31",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nWhen the original white paper was written the idea was that nodes\nwould be miners at same time. That the distribution of mining power\nbeing mostly on par with the distribution of nodes if I understand\ncorrectly. The problem we face now I fear, is the mining power\nbecoming centralized. Even if every bitcoin node invested a $1000\ninto mining power and mined at a loss, it still would not even\nmake a dent in hash distribution. Currently there are around 6000\nknown nodes. If each node invested $1000 for say 10 ths of hashing\npower. At current hashrate of around 3,674,473,142 GH/s this would\nonly make up %16 of hash power. This is out of balance as while\nnodes are distributed mining power is becoming very centralized\ndue to the creation of monopolization of ASICs. The problem we\nare facing is a small group of a couple people whom control a\nlarge amount and growing of hash power. At time of this writing\nit has quickly risen to 39% and at current rate will soon become\n50% of hashing power that is controlled by a small group of a few\npeople. Their intentions are too hijack the bitcoin network to a\ncryptocurrency that suits their dangerous agenda. Dangerous because\ntheir plan would centralize power of consensus as I understand it,\nto themselves the miners. Dangerous also because the code base of\nthe attempting subverters is buggy, insecure, and reckless from a\ntechnological standpoint. Even though they only have very minute\namount of nodes compared to legitimate bitcion nodes, the danger\nis that they are very quickly taking over in mining power. While\nit is true that nodes will not accept invalid blocks that would be\nattempted to be pushed by the conspirators, they are threatening to\nattack the valid (or in their words, \"minority chain\") by dedicating\nsome mining power soley to attacking the valid chain by mining empty\nblocks and orphaning the valid chain. So even though the majority\nof nodes would be enforcing what blocks are valid and as a result\nblock the non-compliant longer chain, the conspiring miner can simply\n(as they are currently threatening to) make the valid chain unuseable\nby mining empty blocks.\n\nIf a malicious miner with half or majority control passes invalid\nblocks, the worst case scenario is a hardfork coin split in which\nthe non-compliant chain becomes an alt. However the problem is that\nthis malicious miner is very recently threatening to not just simply\nfork, but to kill the valid chain to force economic activity to the\nadversary controlled chain. If we can simply defend against attacks\nto the valid chain, we can prevent the valid chain from dying.\n\nWhile empty or near empty blocks would generally be protected by\nthe incentive of miners to make money. The threat is there if the\nmalicious miner with majority control is willing to lose out on\nthese transaction fees and block reward if their intention is to\nsuppress it to force the majority onto their chain.\n\nProposal for potential solution Update nodes to ignore empty blocks,\nso this way mined empty blocks cannot be used to DOS attack the\nblockchain. But what about defense from say, blocks that are\nnot empty but intentionally only have a couple transactions\nin it? Possible to have nodes not only ignore empty blocks,\nbut also blocks that are abnormally small compared to number of\nvalid transactions in mempool? \n\nFor example would be something like this:\nIf block = (empty OR  <%75 of mempool) THEN discard\nThis threshold just an example.\n\nWhat would be any potentials risks\nand attacks resulting from both having such new rulesets and not\ndoing anything?\n\nLets assume that the first problem of blocking empty or near empty\nblocks has been mitigated with the above proposed solution. How\nlikely and possible would it be for a malicious miner with lots of\nmining power to orphan the chain after so many blocks even with\nnon empty blocks? Is there a need to mitigate this? \nIf so is it possible?\n\nTime is running short I fear. There needs to be discussion on various\nattacks and how they can be guarded against along with various\nother contingency plans.\n\n- -- \nCannon\nPGP Fingerprint: 2BB5 15CD 66E7 4E28 45DC 6494 A5A2 2879 3F06 E832 \nEmail: cannon at cannon-ciota.info\n\nNOTICE: ALL EMAIL CORRESPONDENCE NOT SIGNED/ENCRYPTED WITH PGP SHOULD \nBE CONSIDERED POTENTIALLY FORGED, AND NOT PRIVATE. \nIf this matters to you, use PGP.\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBCgAGBQJY1UH/AAoJEAYDai9lH2mw2QYQALDLBxjdO5WTG7VXfuAE476p\nD3o1MMGw23tb+DFUO5WV6aFqfy3VSxbVXz6UuWbj6kHgp3ys6qxg5TX0Dy8tKSZM\nV28kovuS/pfen4gTxw1FCNff7YVW1R8QX+cSYxSD5EoEaTbpIPgi8zMusDxUVZk2\nWG3ItoyvkLvoNIYGDcU3gR3UkjDS5lOPiHu5BKSj1dEiibOXhr8JEBCznfUSyxCG\nTjVRJaUPlwCU06nad8jAZiDrsW3l866iNkBKaMzMavYuMLvCGIdRkbf54B2ZlIT/\nS/owusxqeIdQpydi/3ydnrqyeWo3znMnn+oOvdvfYEHKLts6gar3Zv8cZ40yYSIE\nz7C7GQFIo5TYDUNOk+2VE7NNtdX39Wj3gJql/305miaIt0qMsf1D30ODjePwyxUQ\nLQ96ZeF1K/0RSTN5TFvLjV9ZmaaN/tFm3kx0PunptJaZT8d9EgMeHREjCF4di04A\n6Dp3Qeug41X/zdIc2AM387QnPwmGB1TpfrY9qgvcrIe26T6An2V5LHwVmslCX3ui\nDYAl0o5ODQqnnakF1FIrr1blMVqm7FqDPQc1I5TfzQuxX2+x+5zdrciPC2HUMCMQ\njMujge5IdGL3kjEwjt+M6kqLu0/T0fhdUetb2DWrRJUcEVoIaiUL7qLJC+4KMR3d\nGu3oWoE1ld+BC6At28AD\n=SSuj\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Emin G\u00fcn Sirer",
                "date": "2017-03-24T16:27:47",
                "message_text_only": "Because there's no consensus on the contents of the mempool, this approach\nis unsafe and will lead to forks. It also opens a new attack vector where\npeople can time the flood of new transactions with the discovery of a block\nby a competitor, to orphan the block and to fork the chain.\n\nThe technical defense against an attacking majority of miners is to change\nthe PoW, effectively moving the community off into a new altcoin where the\nattackers, hopefully, don't have majority hash power.\n\n- egs\n\nSent from my phone, please compensate for autocorrect errors.\n\nOn Mar 24, 2017 9:06 AM, \"CANNON via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA512\n>\n> When the original white paper was written the idea was that nodes\n> would be miners at same time. That the distribution of mining power\n> being mostly on par with the distribution of nodes if I understand\n> correctly. The problem we face now I fear, is the mining power\n> becoming centralized. Even if every bitcoin node invested a $1000\n> into mining power and mined at a loss, it still would not even\n> make a dent in hash distribution. Currently there are around 6000\n> known nodes. If each node invested $1000 for say 10 ths of hashing\n> power. At current hashrate of around 3,674,473,142 GH/s this would\n> only make up %16 of hash power. This is out of balance as while\n> nodes are distributed mining power is becoming very centralized\n> due to the creation of monopolization of ASICs. The problem we\n> are facing is a small group of a couple people whom control a\n> large amount and growing of hash power. At time of this writing\n> it has quickly risen to 39% and at current rate will soon become\n> 50% of hashing power that is controlled by a small group of a few\n> people. Their intentions are too hijack the bitcoin network to a\n> cryptocurrency that suits their dangerous agenda. Dangerous because\n> their plan would centralize power of consensus as I understand it,\n> to themselves the miners. Dangerous also because the code base of\n> the attempting subverters is buggy, insecure, and reckless from a\n> technological standpoint. Even though they only have very minute\n> amount of nodes compared to legitimate bitcion nodes, the danger\n> is that they are very quickly taking over in mining power. While\n> it is true that nodes will not accept invalid blocks that would be\n> attempted to be pushed by the conspirators, they are threatening to\n> attack the valid (or in their words, \"minority chain\") by dedicating\n> some mining power soley to attacking the valid chain by mining empty\n> blocks and orphaning the valid chain. So even though the majority\n> of nodes would be enforcing what blocks are valid and as a result\n> block the non-compliant longer chain, the conspiring miner can simply\n> (as they are currently threatening to) make the valid chain unuseable\n> by mining empty blocks.\n>\n> If a malicious miner with half or majority control passes invalid\n> blocks, the worst case scenario is a hardfork coin split in which\n> the non-compliant chain becomes an alt. However the problem is that\n> this malicious miner is very recently threatening to not just simply\n> fork, but to kill the valid chain to force economic activity to the\n> adversary controlled chain. If we can simply defend against attacks\n> to the valid chain, we can prevent the valid chain from dying.\n>\n> While empty or near empty blocks would generally be protected by\n> the incentive of miners to make money. The threat is there if the\n> malicious miner with majority control is willing to lose out on\n> these transaction fees and block reward if their intention is to\n> suppress it to force the majority onto their chain.\n>\n> Proposal for potential solution Update nodes to ignore empty blocks,\n> so this way mined empty blocks cannot be used to DOS attack the\n> blockchain. But what about defense from say, blocks that are\n> not empty but intentionally only have a couple transactions\n> in it? Possible to have nodes not only ignore empty blocks,\n> but also blocks that are abnormally small compared to number of\n> valid transactions in mempool?\n>\n> For example would be something like this:\n> If block = (empty OR  <%75 of mempool) THEN discard\n> This threshold just an example.\n>\n> What would be any potentials risks\n> and attacks resulting from both having such new rulesets and not\n> doing anything?\n>\n> Lets assume that the first problem of blocking empty or near empty\n> blocks has been mitigated with the above proposed solution. How\n> likely and possible would it be for a malicious miner with lots of\n> mining power to orphan the chain after so many blocks even with\n> non empty blocks? Is there a need to mitigate this?\n> If so is it possible?\n>\n> Time is running short I fear. There needs to be discussion on various\n> attacks and how they can be guarded against along with various\n> other contingency plans.\n>\n> - --\n> Cannon\n> PGP Fingerprint: 2BB5 15CD 66E7 4E28 45DC 6494 A5A2 2879 3F06 E832\n> Email: cannon at cannon-ciota.info\n>\n> NOTICE: ALL EMAIL CORRESPONDENCE NOT SIGNED/ENCRYPTED WITH PGP SHOULD\n> BE CONSIDERED POTENTIALLY FORGED, AND NOT PRIVATE.\n> If this matters to you, use PGP.\n> -----BEGIN PGP SIGNATURE-----\n>\n> iQIcBAEBCgAGBQJY1UH/AAoJEAYDai9lH2mw2QYQALDLBxjdO5WTG7VXfuAE476p\n> D3o1MMGw23tb+DFUO5WV6aFqfy3VSxbVXz6UuWbj6kHgp3ys6qxg5TX0Dy8tKSZM\n> V28kovuS/pfen4gTxw1FCNff7YVW1R8QX+cSYxSD5EoEaTbpIPgi8zMusDxUVZk2\n> WG3ItoyvkLvoNIYGDcU3gR3UkjDS5lOPiHu5BKSj1dEiibOXhr8JEBCznfUSyxCG\n> TjVRJaUPlwCU06nad8jAZiDrsW3l866iNkBKaMzMavYuMLvCGIdRkbf54B2ZlIT/\n> S/owusxqeIdQpydi/3ydnrqyeWo3znMnn+oOvdvfYEHKLts6gar3Zv8cZ40yYSIE\n> z7C7GQFIo5TYDUNOk+2VE7NNtdX39Wj3gJql/305miaIt0qMsf1D30ODjePwyxUQ\n> LQ96ZeF1K/0RSTN5TFvLjV9ZmaaN/tFm3kx0PunptJaZT8d9EgMeHREjCF4di04A\n> 6Dp3Qeug41X/zdIc2AM387QnPwmGB1TpfrY9qgvcrIe26T6An2V5LHwVmslCX3ui\n> DYAl0o5ODQqnnakF1FIrr1blMVqm7FqDPQc1I5TfzQuxX2+x+5zdrciPC2HUMCMQ\n> jMujge5IdGL3kjEwjt+M6kqLu0/T0fhdUetb2DWrRJUcEVoIaiUL7qLJC+4KMR3d\n> Gu3oWoE1ld+BC6At28AD\n> =SSuj\n> -----END PGP SIGNATURE-----\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170324/65f32451/attachment-0001.html>"
            },
            {
                "author": "Nick ODell",
                "date": "2017-03-24T17:29:54",
                "message_text_only": "Two concerns:\n\n1) This makes block validity depend on things that aren't in the\nblockchain. If you and I have different minrelaytxfee's, we will have\ndifferent mempool sizes. Your node will discard a block, but my node will\nthink it is valid, and our nodes will not come to consensus.\n\n2) This is trivially bypassed. A miner can take some coins they own\nalready, and create a zero-value transaction that has a scriptPubKey of\nOP_1. (i.e. anyone-can-spend.) Then, they create another transaction\nspending the first transaction, with an empty scriptSig, and the same\nscriptPubKey. They do this over and over until they fill up the block.\n\nThe last OP_1 output can be left for the next miner. Since the above\nalgorithm is deterministic, a merkle tree containing every transaction\nexcept the coinbase can be precomputed. The 'malicious' miners do not need\nto store this fake block.\n\nOn Fri, Mar 24, 2017 at 10:03 AM, CANNON via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA512\n>\n> When the original white paper was written the idea was that nodes\n> would be miners at same time. That the distribution of mining power\n> being mostly on par with the distribution of nodes if I understand\n> correctly. The problem we face now I fear, is the mining power\n> becoming centralized. Even if every bitcoin node invested a $1000\n> into mining power and mined at a loss, it still would not even\n> make a dent in hash distribution. Currently there are around 6000\n> known nodes. If each node invested $1000 for say 10 ths of hashing\n> power. At current hashrate of around 3,674,473,142 GH/s this would\n> only make up %16 of hash power. This is out of balance as while\n> nodes are distributed mining power is becoming very centralized\n> due to the creation of monopolization of ASICs. The problem we\n> are facing is a small group of a couple people whom control a\n> large amount and growing of hash power. At time of this writing\n> it has quickly risen to 39% and at current rate will soon become\n> 50% of hashing power that is controlled by a small group of a few\n> people. Their intentions are too hijack the bitcoin network to a\n> cryptocurrency that suits their dangerous agenda. Dangerous because\n> their plan would centralize power of consensus as I understand it,\n> to themselves the miners. Dangerous also because the code base of\n> the attempting subverters is buggy, insecure, and reckless from a\n> technological standpoint. Even though they only have very minute\n> amount of nodes compared to legitimate bitcion nodes, the danger\n> is that they are very quickly taking over in mining power. While\n> it is true that nodes will not accept invalid blocks that would be\n> attempted to be pushed by the conspirators, they are threatening to\n> attack the valid (or in their words, \"minority chain\") by dedicating\n> some mining power soley to attacking the valid chain by mining empty\n> blocks and orphaning the valid chain. So even though the majority\n> of nodes would be enforcing what blocks are valid and as a result\n> block the non-compliant longer chain, the conspiring miner can simply\n> (as they are currently threatening to) make the valid chain unuseable\n> by mining empty blocks.\n>\n> If a malicious miner with half or majority control passes invalid\n> blocks, the worst case scenario is a hardfork coin split in which\n> the non-compliant chain becomes an alt. However the problem is that\n> this malicious miner is very recently threatening to not just simply\n> fork, but to kill the valid chain to force economic activity to the\n> adversary controlled chain. If we can simply defend against attacks\n> to the valid chain, we can prevent the valid chain from dying.\n>\n> While empty or near empty blocks would generally be protected by\n> the incentive of miners to make money. The threat is there if the\n> malicious miner with majority control is willing to lose out on\n> these transaction fees and block reward if their intention is to\n> suppress it to force the majority onto their chain.\n>\n> Proposal for potential solution Update nodes to ignore empty blocks,\n> so this way mined empty blocks cannot be used to DOS attack the\n> blockchain. But what about defense from say, blocks that are\n> not empty but intentionally only have a couple transactions\n> in it? Possible to have nodes not only ignore empty blocks,\n> but also blocks that are abnormally small compared to number of\n> valid transactions in mempool?\n>\n> For example would be something like this:\n> If block = (empty OR  <%75 of mempool) THEN discard\n> This threshold just an example.\n>\n> What would be any potentials risks\n> and attacks resulting from both having such new rulesets and not\n> doing anything?\n>\n> Lets assume that the first problem of blocking empty or near empty\n> blocks has been mitigated with the above proposed solution. How\n> likely and possible would it be for a malicious miner with lots of\n> mining power to orphan the chain after so many blocks even with\n> non empty blocks? Is there a need to mitigate this?\n> If so is it possible?\n>\n> Time is running short I fear. There needs to be discussion on various\n> attacks and how they can be guarded against along with various\n> other contingency plans.\n>\n> - --\n> Cannon\n> PGP Fingerprint: 2BB5 15CD 66E7 4E28 45DC 6494 A5A2 2879 3F06 E832\n> Email: cannon at cannon-ciota.info\n>\n> NOTICE: ALL EMAIL CORRESPONDENCE NOT SIGNED/ENCRYPTED WITH PGP SHOULD\n> BE CONSIDERED POTENTIALLY FORGED, AND NOT PRIVATE.\n> If this matters to you, use PGP.\n> -----BEGIN PGP SIGNATURE-----\n>\n> iQIcBAEBCgAGBQJY1UH/AAoJEAYDai9lH2mw2QYQALDLBxjdO5WTG7VXfuAE476p\n> D3o1MMGw23tb+DFUO5WV6aFqfy3VSxbVXz6UuWbj6kHgp3ys6qxg5TX0Dy8tKSZM\n> V28kovuS/pfen4gTxw1FCNff7YVW1R8QX+cSYxSD5EoEaTbpIPgi8zMusDxUVZk2\n> WG3ItoyvkLvoNIYGDcU3gR3UkjDS5lOPiHu5BKSj1dEiibOXhr8JEBCznfUSyxCG\n> TjVRJaUPlwCU06nad8jAZiDrsW3l866iNkBKaMzMavYuMLvCGIdRkbf54B2ZlIT/\n> S/owusxqeIdQpydi/3ydnrqyeWo3znMnn+oOvdvfYEHKLts6gar3Zv8cZ40yYSIE\n> z7C7GQFIo5TYDUNOk+2VE7NNtdX39Wj3gJql/305miaIt0qMsf1D30ODjePwyxUQ\n> LQ96ZeF1K/0RSTN5TFvLjV9ZmaaN/tFm3kx0PunptJaZT8d9EgMeHREjCF4di04A\n> 6Dp3Qeug41X/zdIc2AM387QnPwmGB1TpfrY9qgvcrIe26T6An2V5LHwVmslCX3ui\n> DYAl0o5ODQqnnakF1FIrr1blMVqm7FqDPQc1I5TfzQuxX2+x+5zdrciPC2HUMCMQ\n> jMujge5IdGL3kjEwjt+M6kqLu0/T0fhdUetb2DWrRJUcEVoIaiUL7qLJC+4KMR3d\n> Gu3oWoE1ld+BC6At28AD\n> =SSuj\n> -----END PGP SIGNATURE-----\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170324/3ff30b51/attachment.html>"
            },
            {
                "author": "Hampus Sj\u00f6berg",
                "date": "2017-03-24T17:37:25",
                "message_text_only": "> For example would be something like this:\n> If block = (empty OR  <%75 of mempool) THEN discard\n> This threshold just an example\n\nI don't think this is a good idea, mempool is different from node to node\nand is not a part of the consensus.\n\nHampus\n\n2017-03-24 18:29 GMT+01:00 Nick ODell via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> Two concerns:\n>\n> 1) This makes block validity depend on things that aren't in the\n> blockchain. If you and I have different minrelaytxfee's, we will have\n> different mempool sizes. Your node will discard a block, but my node will\n> think it is valid, and our nodes will not come to consensus.\n>\n> 2) This is trivially bypassed. A miner can take some coins they own\n> already, and create a zero-value transaction that has a scriptPubKey of\n> OP_1. (i.e. anyone-can-spend.) Then, they create another transaction\n> spending the first transaction, with an empty scriptSig, and the same\n> scriptPubKey. They do this over and over until they fill up the block.\n>\n> The last OP_1 output can be left for the next miner. Since the above\n> algorithm is deterministic, a merkle tree containing every transaction\n> except the coinbase can be precomputed. The 'malicious' miners do not need\n> to store this fake block.\n>\n> On Fri, Mar 24, 2017 at 10:03 AM, CANNON via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> -----BEGIN PGP SIGNED MESSAGE-----\n>> Hash: SHA512\n>>\n>> When the original white paper was written the idea was that nodes\n>> would be miners at same time. That the distribution of mining power\n>> being mostly on par with the distribution of nodes if I understand\n>> correctly. The problem we face now I fear, is the mining power\n>> becoming centralized. Even if every bitcoin node invested a $1000\n>> into mining power and mined at a loss, it still would not even\n>> make a dent in hash distribution. Currently there are around 6000\n>> known nodes. If each node invested $1000 for say 10 ths of hashing\n>> power. At current hashrate of around 3,674,473,142 GH/s this would\n>> only make up %16 of hash power. This is out of balance as while\n>> nodes are distributed mining power is becoming very centralized\n>> due to the creation of monopolization of ASICs. The problem we\n>> are facing is a small group of a couple people whom control a\n>> large amount and growing of hash power. At time of this writing\n>> it has quickly risen to 39% and at current rate will soon become\n>> 50% of hashing power that is controlled by a small group of a few\n>> people. Their intentions are too hijack the bitcoin network to a\n>> cryptocurrency that suits their dangerous agenda. Dangerous because\n>> their plan would centralize power of consensus as I understand it,\n>> to themselves the miners. Dangerous also because the code base of\n>> the attempting subverters is buggy, insecure, and reckless from a\n>> technological standpoint. Even though they only have very minute\n>> amount of nodes compared to legitimate bitcion nodes, the danger\n>> is that they are very quickly taking over in mining power. While\n>> it is true that nodes will not accept invalid blocks that would be\n>> attempted to be pushed by the conspirators, they are threatening to\n>> attack the valid (or in their words, \"minority chain\") by dedicating\n>> some mining power soley to attacking the valid chain by mining empty\n>> blocks and orphaning the valid chain. So even though the majority\n>> of nodes would be enforcing what blocks are valid and as a result\n>> block the non-compliant longer chain, the conspiring miner can simply\n>> (as they are currently threatening to) make the valid chain unuseable\n>> by mining empty blocks.\n>>\n>> If a malicious miner with half or majority control passes invalid\n>> blocks, the worst case scenario is a hardfork coin split in which\n>> the non-compliant chain becomes an alt. However the problem is that\n>> this malicious miner is very recently threatening to not just simply\n>> fork, but to kill the valid chain to force economic activity to the\n>> adversary controlled chain. If we can simply defend against attacks\n>> to the valid chain, we can prevent the valid chain from dying.\n>>\n>> While empty or near empty blocks would generally be protected by\n>> the incentive of miners to make money. The threat is there if the\n>> malicious miner with majority control is willing to lose out on\n>> these transaction fees and block reward if their intention is to\n>> suppress it to force the majority onto their chain.\n>>\n>> Proposal for potential solution Update nodes to ignore empty blocks,\n>> so this way mined empty blocks cannot be used to DOS attack the\n>> blockchain. But what about defense from say, blocks that are\n>> not empty but intentionally only have a couple transactions\n>> in it? Possible to have nodes not only ignore empty blocks,\n>> but also blocks that are abnormally small compared to number of\n>> valid transactions in mempool?\n>>\n>> For example would be something like this:\n>> If block = (empty OR  <%75 of mempool) THEN discard\n>> This threshold just an example.\n>>\n>> What would be any potentials risks\n>> and attacks resulting from both having such new rulesets and not\n>> doing anything?\n>>\n>> Lets assume that the first problem of blocking empty or near empty\n>> blocks has been mitigated with the above proposed solution. How\n>> likely and possible would it be for a malicious miner with lots of\n>> mining power to orphan the chain after so many blocks even with\n>> non empty blocks? Is there a need to mitigate this?\n>> If so is it possible?\n>>\n>> Time is running short I fear. There needs to be discussion on various\n>> attacks and how they can be guarded against along with various\n>> other contingency plans.\n>>\n>> - --\n>> Cannon\n>> PGP Fingerprint: 2BB5 15CD 66E7 4E28 45DC 6494 A5A2 2879 3F06 E832\n>> Email: cannon at cannon-ciota.info\n>>\n>> NOTICE: ALL EMAIL CORRESPONDENCE NOT SIGNED/ENCRYPTED WITH PGP SHOULD\n>> BE CONSIDERED POTENTIALLY FORGED, AND NOT PRIVATE.\n>> If this matters to you, use PGP.\n>> -----BEGIN PGP SIGNATURE-----\n>>\n>> iQIcBAEBCgAGBQJY1UH/AAoJEAYDai9lH2mw2QYQALDLBxjdO5WTG7VXfuAE476p\n>> D3o1MMGw23tb+DFUO5WV6aFqfy3VSxbVXz6UuWbj6kHgp3ys6qxg5TX0Dy8tKSZM\n>> V28kovuS/pfen4gTxw1FCNff7YVW1R8QX+cSYxSD5EoEaTbpIPgi8zMusDxUVZk2\n>> WG3ItoyvkLvoNIYGDcU3gR3UkjDS5lOPiHu5BKSj1dEiibOXhr8JEBCznfUSyxCG\n>> TjVRJaUPlwCU06nad8jAZiDrsW3l866iNkBKaMzMavYuMLvCGIdRkbf54B2ZlIT/\n>> S/owusxqeIdQpydi/3ydnrqyeWo3znMnn+oOvdvfYEHKLts6gar3Zv8cZ40yYSIE\n>> z7C7GQFIo5TYDUNOk+2VE7NNtdX39Wj3gJql/305miaIt0qMsf1D30ODjePwyxUQ\n>> LQ96ZeF1K/0RSTN5TFvLjV9ZmaaN/tFm3kx0PunptJaZT8d9EgMeHREjCF4di04A\n>> 6Dp3Qeug41X/zdIc2AM387QnPwmGB1TpfrY9qgvcrIe26T6An2V5LHwVmslCX3ui\n>> DYAl0o5ODQqnnakF1FIrr1blMVqm7FqDPQc1I5TfzQuxX2+x+5zdrciPC2HUMCMQ\n>> jMujge5IdGL3kjEwjt+M6kqLu0/T0fhdUetb2DWrRJUcEVoIaiUL7qLJC+4KMR3d\n>> Gu3oWoE1ld+BC6At28AD\n>> =SSuj\n>> -----END PGP SIGNATURE-----\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170324/0a8b7125/attachment-0001.html>"
            },
            {
                "author": "Aymeric Vitte",
                "date": "2017-03-24T19:00:31",
                "message_text_only": "Since I have been working on crypto currencies/bitcoin, I kept\nrepeating: btc should make a priority to significantly increase the\nridiculous number of full nodes we have today, design an incentive for\npeople to run full nodes and design a system for people to setup full\nnodes in an acceptable timeframe\n\nUnfortunately, this was not a priority at all, maybe because of some\nhistorical consensus between miners and devs, so here we are today, some\nminers became crazy, the situation would be much more different if more\nfull nodes were there\n\nBecause, how comes everybody perfectly knows the plans of the conspiring\nminers? They were stupid enough to explain very precisely how they will\nperform the attack?\n\nIf I were them I would in addition setup quite a lot of nodes (which\nprobably they are planning to do, because anyway they need them for the\nnew sw), not difficult, not so expensive\n\nDefending against abnormal blocks looks to be a non issue, I suppose\nthat the btc devs perfectly know how to create a pattern based on\nhistory to detect abnormal blocks (including some strange transactions)\nand reject them, but this further depends on the ability of current full\nnodes to upgrade, which apparently is not what they do the best\n\nI don't know what \"Time is running short I fear\" stands for and when 50%\nis supposed to be reached\n\nGiven that it looks difficult to quickly increase the number of full\nnodes, that increasing the mining power by standard means looks too\nexpensive, useless and not profitable, that a counter attack based on a\nnew proof of something does not look to be ready, then maybe the btc\nfolks should ask Bram Cohen (who by some luck is participating to this\nlist) to resurrect the bitcoin miner Epic Scale which Bittorrent Inc (in\nan umpteenth dubious attempt to make money) tried some time ago to\ninclude quietly in utorrent forgetting to ask the authorization of the\nselected users, then utorrent users might upgrade (potentially 150 M),\nand the resulting mining power might be sufficient, depending on the\nincentive for this, which is TBD\n\nOr activate by anticipation proof of space... unlike bitcoin-qt,\nutorrent sw is quite good to be intrusive, run in background when you\nthink you have closed it, run things you don't know, etc, so quite\nefficient in this situation\n\nThen if btc folks wants to promote full nodes too, it would not be a bad\nidea to put the bitcoin-qt blockchain + chain state in a torrent making\nsure it is seeded correctly (there are plenty of academics here, they\ncan do it and run full nodes too) so people can download it and setup\nfull nodes (incentive TBD too) assuming they know about upnp/port forwarding\n\n\nLe 24/03/2017 \u00e0 17:03, CANNON via bitcoin-dev a \u00e9crit :\n> When the original white paper was written the idea was that nodes\n> would be miners at same time. That the distribution of mining power\n> being mostly on par with the distribution of nodes if I understand\n> correctly. The problem we face now I fear, is the mining power\n> becoming centralized. Even if every bitcoin node invested a $1000\n> into mining power and mined at a loss, it still would not even\n> make a dent in hash distribution. Currently there are around 6000\n> known nodes. If each node invested $1000 for say 10 ths of hashing\n> power. At current hashrate of around 3,674,473,142 GH/s this would\n> only make up %16 of hash power. This is out of balance as while\n> nodes are distributed mining power is becoming very centralized\n> due to the creation of monopolization of ASICs. The problem we\n> are facing is a small group of a couple people whom control a\n> large amount and growing of hash power. At time of this writing\n> it has quickly risen to 39% and at current rate will soon become\n> 50% of hashing power that is controlled by a small group of a few\n> people. Their intentions are too hijack the bitcoin network to a\n> cryptocurrency that suits their dangerous agenda. Dangerous because\n> their plan would centralize power of consensus as I understand it,\n> to themselves the miners. Dangerous also because the code base of\n> the attempting subverters is buggy, insecure, and reckless from a\n> technological standpoint. Even though they only have very minute\n> amount of nodes compared to legitimate bitcion nodes, the danger\n> is that they are very quickly taking over in mining power. While\n> it is true that nodes will not accept invalid blocks that would be\n> attempted to be pushed by the conspirators, they are threatening to\n> attack the valid (or in their words, \"minority chain\") by dedicating\n> some mining power soley to attacking the valid chain by mining empty\n> blocks and orphaning the valid chain. So even though the majority\n> of nodes would be enforcing what blocks are valid and as a result\n> block the non-compliant longer chain, the conspiring miner can simply\n> (as they are currently threatening to) make the valid chain unuseable\n> by mining empty blocks.\n>\n> If a malicious miner with half or majority control passes invalid\n> blocks, the worst case scenario is a hardfork coin split in which\n> the non-compliant chain becomes an alt. However the problem is that\n> this malicious miner is very recently threatening to not just simply\n> fork, but to kill the valid chain to force economic activity to the\n> adversary controlled chain. If we can simply defend against attacks\n> to the valid chain, we can prevent the valid chain from dying.\n>\n> While empty or near empty blocks would generally be protected by\n> the incentive of miners to make money. The threat is there if the\n> malicious miner with majority control is willing to lose out on\n> these transaction fees and block reward if their intention is to\n> suppress it to force the majority onto their chain.\n>\n> Proposal for potential solution Update nodes to ignore empty blocks,\n> so this way mined empty blocks cannot be used to DOS attack the\n> blockchain. But what about defense from say, blocks that are\n> not empty but intentionally only have a couple transactions\n> in it? Possible to have nodes not only ignore empty blocks,\n> but also blocks that are abnormally small compared to number of\n> valid transactions in mempool?\n>\n> For example would be something like this:\n> If block = (empty OR  <%75 of mempool) THEN discard\n> This threshold just an example.\n>\n> What would be any potentials risks\n> and attacks resulting from both having such new rulesets and not\n> doing anything?\n>\n> Lets assume that the first problem of blocking empty or near empty\n> blocks has been mitigated with the above proposed solution. How\n> likely and possible would it be for a malicious miner with lots of\n> mining power to orphan the chain after so many blocks even with\n> non empty blocks? Is there a need to mitigate this?\n> If so is it possible?\n>\n> Time is running short I fear. There needs to be discussion on various\n> attacks and how they can be guarded against along with various\n> other contingency plans.\n>\n> _______________________________________________ > bitcoin-dev mailing list > bitcoin-dev at lists.linuxfoundation.org >\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-- \nZcash wallets made simple: https://github.com/Ayms/zcash-wallets\nBitcoin wallets made simple: https://github.com/Ayms/bitcoin-wallets\nGet the torrent dynamic blocklist: http://peersm.com/getblocklist\nCheck the 10 M passwords list: http://peersm.com/findmyass\nAnti-spies and private torrents, dynamic blocklist: http://torrent-live.org\nPeersm : http://www.peersm.com\ntorrent-live: https://github.com/Ayms/torrent-live\nnode-Tor : https://www.github.com/Ayms/node-Tor\nGitHub : https://www.github.com/Ayms\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170324/a255a71c/attachment.html>"
            },
            {
                "author": "CANNON",
                "date": "2017-03-25T16:12:54",
                "message_text_only": "On 03/24/2017 07:00 PM, Aymeric Vitte wrote:\n> I don't know what \"Time is running short I fear\" stands for and when 50%\n> is supposed to be reached\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nOn 03/24/2017 07:00 PM, Aymeric Vitte wrote: > I don't know what\n\"Time is running short I fear\" stands for and when 50% > is supposed\nto be reached\n\nAccording to current hashrate distribution tracking site coin.dance,\nvery likely within less than four weeks according to current hashrate\ntakeover rate.\n\nWhile a fork is very likely, that I dont really fear because worst\ncase scenario is that bitcoin still survives and the invalid chain\nbecomes an alt.  My fear is the centralized mining power being used\nto attack the valid chain with intentions on killing it. [1]\n\nShouldn't this 50% attack they are threatening be a concern? If it\nis a concern, what options are on the table. If it is not a concern\nplease enlightent me as to why.\n\n\n[1] Source:\nhttps://www.reddit.com/r/Bitcoin/comments/6172s3/peter_rizun_tells_miners_to_force_a_hard_fork_by/\n\nText:\n\nThe attack quoted from his article:\nhttps://medium.com/@peter_r/on-the-emerging-consensus-regarding-bitcoins-block-size-limit-insights-from-my-visit-with-2348878a16d8\n\n    [Level 2] Anti-split protection\u200a\u200aMiners will orphan the\n    blocks of non-compliant miners prior to the first larger block\n    to serve as a reminder to upgrade. Simply due to the possibility\n    of having blocks orphaned, all miners would be motivated to\n    begin signalling for larger blocks once support definitively\n    passes 51%. If some miners hold out (e.g., they may not be\n    paying attention regarding the upgrade), then they will begin\n    to pay attention after losing approximately $15,000 of revenue\n    due to an orphaned block.\n\n    [Level 3] Anti-split protection\u200a\u200aIn the scenario where Levels\n    1 and 2 protection fails to entice all non-compliant miners to\n    upgrade, a small-block minority chain may emerge. To address the\n    risk of coins being spent on this chain (replay risk), majority\n    miners will deploy hash power as needed to ensure the minority\n    chain includes only empty blocks after the forking point. This\n    can easily be accomplished if the majority miners maintain a\n    secret chain of empty blocks\u200a\u200abuilt off their last empty\n    block\u200a\u200apublishing only as much of this chain as necessary\n    to orphan any non-empty blocks produced on the minority chain.\n\n\n\n\n- --\nCannon\nPGP Fingerprint: 2BB5 15CD 66E7 4E28 45DC 6494 A5A2 2879 3F06 E832 \nEmail: cannon at cannon-ciota.info\n\nNOTICE: ALL EMAIL CORRESPONDENCE NOT SIGNED/ENCRYPTED WITH PGP SHOULD \nBE CONSIDERED POTENTIALLY FORGED, AND NOT PRIVATE. \nIf this matters to you, use PGP.\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBCgAGBQJY1pbaAAoJEAYDai9lH2mwOO0QANOWqGzPNlifWguc+Y5UQxQM\neAiztAayQBoAyLcFE7/qdtSNlUxbIAHG17fM+aNkehjYH2oN5ODJ+j7E2Yt6EoUH\nh5t8MLhNRG/YGF1hJK8Io940EmdcjuNmohiZvrjIqEOYggmLU3hR6J4gsuGsQQhu\ngY3sMS/TtT+gZNH8w53ePGrsVhuQR7yEMMr91/vM4+Q5abpwqLeYLnslaZDcd3XK\nVB9vyyK08r34J1GQt/H4UvTvGs28MFKBkvueA/Sfyvnrih7+WSQLuSvhiFr+cW1B\nTmSVYrB2DzyHN27jDCI2ty3ryNE4PMYcaeLfI2TTbsD/MuVU5lK0kM/1JajP4eRj\nj+P03OipuQiy/dNU63w0Uka2PbdKhDC13hVtK/ttBbNppbjnGeB9PYSJCzOpInGw\nNwAyz0rVS/llGsdctcII7Z6AUMGuJXzsosY8vjUroU+KFRDqIbDfC53sH7DaPh7u\nYawwId5S5RnZsAGCUJ+qNcg0s728J1eDjofN291IS5sOKMzpI7KhaOhFxjnk1MpN\nZAlQeTlvG+sAdn61QMQK1NbFt0km+jcqyVh0+L01yB0K4VDi1YFJaSBOaYUELBXa\n8a6WhZf5nrl5UIpH7rRcPzzqchcdYczy5VRZp2UsU+HYeqLXlcN0a03yPpVQik9S\n/T93MuZgmvSCry5MlccA\n=R71g\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter R",
                "date": "2017-03-25T20:28:44",
                "message_text_only": "One of the purported benefits of a soft-forking change (a tightening of the consensus rule set) is the reduced risk of a blockchain split compared to a loosening of the consensus rule set.  The way this works is that miners who fail to upgrade to the new tighter ruleset will have their non-compliant blocks orphaned by the hash power majority.  This is a strong incentive to upgrade and has historically worked well.  If a minority subset of the network didn\u2019t want to abide by the new restricted rule set, a reasonable solution would be for them to change the proof-of-work and start a spin-off from the existing Bitcoin ledger (https://bitcointalk.org/index.php?topic=563972.0).\n\nIn the case of the coming network upgrade to larger blocks, a primary concern of both business such as Coinbase and Bitpay, and most miners, is the possibility of a blockchain split and the associated confusion, replay risk, etc.  By applying techniques that are known to be successful for soft-forking changes, we can likewise benefit in a way that makes a split less likely as we move towards larger blocks.  Two proposed techniques to reduce the chances of a split are:\n\n1. That miners begin to orphan the blocks of non-upgraded miners once a super-majority of the network hash power has upgraded. This would serve as an expensive-to-ignore reminder to upgrade.\n\n2. That, in the case where a minority branch emerges (unlikely IMO), majority miners would continually re-org that minority branch with empty blocks to prevent transactions from confirming, thereby eliminating replay risk.\n\nJust like after a soft forking change, a minority that does not want to abide by the current ruleset enforced by the majority could change the proof-of-work and start a spin-off from the existing Bitcoin ledger, as suggested by Emin.  \n\nBest regards,\nPeter R\n\n\n> On Mar 25, 2017, at 9:12 AM, CANNON via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> On 03/24/2017 07:00 PM, Aymeric Vitte wrote:\n>> I don't know what \"Time is running short I fear\" stands for and when 50%\n>> is supposed to be reached\n> \n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA512\n> \n> On 03/24/2017 07:00 PM, Aymeric Vitte wrote: > I don't know what\n> \"Time is running short I fear\" stands for and when 50% > is supposed\n> to be reached\n> \n> According to current hashrate distribution tracking site coin.dance,\n> very likely within less than four weeks according to current hashrate\n> takeover rate.\n> \n> While a fork is very likely, that I dont really fear because worst\n> case scenario is that bitcoin still survives and the invalid chain\n> becomes an alt.  My fear is the centralized mining power being used\n> to attack the valid chain with intentions on killing it. [1]\n> \n> Shouldn't this 50% attack they are threatening be a concern? If it\n> is a concern, what options are on the table. If it is not a concern\n> please enlightent me as to why.\n> \n> \n> [1] Source:\n> https://www.reddit.com/r/Bitcoin/comments/6172s3/peter_rizun_tells_miners_to_force_a_hard_fork_by/\n> \n> Text:\n> \n> The attack quoted from his article:\n> https://medium.com/@peter_r/on-the-emerging-consensus-regarding-bitcoins-block-size-limit-insights-from-my-visit-with-2348878a16d8\n> \n>    [Level 2] Anti-split protection\u200a\u200aMiners will orphan the\n>    blocks of non-compliant miners prior to the first larger block\n>    to serve as a reminder to upgrade. Simply due to the possibility\n>    of having blocks orphaned, all miners would be motivated to\n>    begin signalling for larger blocks once support definitively\n>    passes 51%. If some miners hold out (e.g., they may not be\n>    paying attention regarding the upgrade), then they will begin\n>    to pay attention after losing approximately $15,000 of revenue\n>    due to an orphaned block.\n> \n>    [Level 3] Anti-split protection\u200a\u200aIn the scenario where Levels\n>    1 and 2 protection fails to entice all non-compliant miners to\n>    upgrade, a small-block minority chain may emerge. To address the\n>    risk of coins being spent on this chain (replay risk), majority\n>    miners will deploy hash power as needed to ensure the minority\n>    chain includes only empty blocks after the forking point. This\n>    can easily be accomplished if the majority miners maintain a\n>    secret chain of empty blocks\u200a\u200abuilt off their last empty\n>    block\u200a\u200apublishing only as much of this chain as necessary\n>    to orphan any non-empty blocks produced on the minority chain.\n> \n> \n> \n> \n> - --\n> Cannon\n> PGP Fingerprint: 2BB5 15CD 66E7 4E28 45DC 6494 A5A2 2879 3F06 E832 \n> Email: cannon at cannon-ciota.info\n> \n> NOTICE: ALL EMAIL CORRESPONDENCE NOT SIGNED/ENCRYPTED WITH PGP SHOULD \n> BE CONSIDERED POTENTIALLY FORGED, AND NOT PRIVATE. \n> If this matters to you, use PGP.\n> -----BEGIN PGP SIGNATURE-----\n> \n> iQIcBAEBCgAGBQJY1pbaAAoJEAYDai9lH2mwOO0QANOWqGzPNlifWguc+Y5UQxQM\n> eAiztAayQBoAyLcFE7/qdtSNlUxbIAHG17fM+aNkehjYH2oN5ODJ+j7E2Yt6EoUH\n> h5t8MLhNRG/YGF1hJK8Io940EmdcjuNmohiZvrjIqEOYggmLU3hR6J4gsuGsQQhu\n> gY3sMS/TtT+gZNH8w53ePGrsVhuQR7yEMMr91/vM4+Q5abpwqLeYLnslaZDcd3XK\n> VB9vyyK08r34J1GQt/H4UvTvGs28MFKBkvueA/Sfyvnrih7+WSQLuSvhiFr+cW1B\n> TmSVYrB2DzyHN27jDCI2ty3ryNE4PMYcaeLfI2TTbsD/MuVU5lK0kM/1JajP4eRj\n> j+P03OipuQiy/dNU63w0Uka2PbdKhDC13hVtK/ttBbNppbjnGeB9PYSJCzOpInGw\n> NwAyz0rVS/llGsdctcII7Z6AUMGuJXzsosY8vjUroU+KFRDqIbDfC53sH7DaPh7u\n> YawwId5S5RnZsAGCUJ+qNcg0s728J1eDjofN291IS5sOKMzpI7KhaOhFxjnk1MpN\n> ZAlQeTlvG+sAdn61QMQK1NbFt0km+jcqyVh0+L01yB0K4VDi1YFJaSBOaYUELBXa\n> 8a6WhZf5nrl5UIpH7rRcPzzqchcdYczy5VRZp2UsU+HYeqLXlcN0a03yPpVQik9S\n> /T93MuZgmvSCry5MlccA\n> =R71g\n> -----END PGP SIGNATURE-----\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Alex Morcos",
                "date": "2017-03-26T02:38:16",
                "message_text_only": "Surely you are aware that what you are proposing is vastly different from\nthe way soft forks have historically worked.\n\nFirst of all, the bar for miners being on the new chain is extremely high,\n95%.\n\nSecond of all, soft forks make rule restrictions on classes of transactions\nthat are already non-standard so that any non-upgraded miners are unlikely\nto be including txs in their blocks which would violate the new rules and\nshould not have their blocks orphaned even after the fork.\n\nFinally, soft forks are designed to only be used when there is a very wide\ncommunity consensus and the intention is not to overrule anyone's choice to\nremain on the old rules but to ensure the security of nodes that may have\nneglected to upgrade.  Obviously it is impossible to draw a bright line\nbetween users who intentionally are not upgrading due to opposition and\nusers that are just being lazy.  But in the case of a proposed BU hard fork\nit is abundantly clear that there is a very significant fraction, in fact\nlikely a majority of users who intentionally want to remain on the old\nrules.\n\nAs a Bitcoin user I find it abhorrent the way you are proposing to\nintentionally cripple the chain and rules I want to use instead of just\npeacefully splitting.\n\n\nOn Sat, Mar 25, 2017 at 3:28 PM, Peter R via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> One of the purported benefits of a soft-forking change (a tightening of\n> the consensus rule set) is the reduced risk of a blockchain split compared\n> to a loosening of the consensus rule set.  The way this works is that\n> miners who fail to upgrade to the new tighter ruleset will have their\n> non-compliant blocks orphaned by the hash power majority.  This is a strong\n> incentive to upgrade and has historically worked well.  If a minority\n> subset of the network didn\u2019t want to abide by the new restricted rule set,\n> a reasonable solution would be for them to change the proof-of-work and\n> start a spin-off from the existing Bitcoin ledger (\n> https://bitcointalk.org/index.php?topic=563972.0).\n>\n> In the case of the coming network upgrade to larger blocks, a primary\n> concern of both business such as Coinbase and Bitpay, and most miners, is\n> the possibility of a blockchain split and the associated confusion, replay\n> risk, etc.  By applying techniques that are known to be successful for\n> soft-forking changes, we can likewise benefit in a way that makes a split\n> less likely as we move towards larger blocks.  Two proposed techniques to\n> reduce the chances of a split are:\n>\n> 1. That miners begin to orphan the blocks of non-upgraded miners once a\n> super-majority of the network hash power has upgraded. This would serve as\n> an expensive-to-ignore reminder to upgrade.\n>\n> 2. That, in the case where a minority branch emerges (unlikely IMO),\n> majority miners would continually re-org that minority branch with empty\n> blocks to prevent transactions from confirming, thereby eliminating replay\n> risk.\n>\n> Just like after a soft forking change, a minority that does not want to\n> abide by the current ruleset enforced by the majority could change the\n> proof-of-work and start a spin-off from the existing Bitcoin ledger, as\n> suggested by Emin.\n>\n> Best regards,\n> Peter R\n>\n>\n> > On Mar 25, 2017, at 9:12 AM, CANNON via bitcoin-dev <bitcoin-dev at lists.\n> linuxfoundation.org> wrote:\n> >\n> > On 03/24/2017 07:00 PM, Aymeric Vitte wrote:\n> >> I don't know what \"Time is running short I fear\" stands for and when 50%\n> >> is supposed to be reached\n> >\n> > -----BEGIN PGP SIGNED MESSAGE-----\n> > Hash: SHA512\n> >\n> > On 03/24/2017 07:00 PM, Aymeric Vitte wrote: > I don't know what\n> > \"Time is running short I fear\" stands for and when 50% > is supposed\n> > to be reached\n> >\n> > According to current hashrate distribution tracking site coin.dance,\n> > very likely within less than four weeks according to current hashrate\n> > takeover rate.\n> >\n> > While a fork is very likely, that I dont really fear because worst\n> > case scenario is that bitcoin still survives and the invalid chain\n> > becomes an alt.  My fear is the centralized mining power being used\n> > to attack the valid chain with intentions on killing it. [1]\n> >\n> > Shouldn't this 50% attack they are threatening be a concern? If it\n> > is a concern, what options are on the table. If it is not a concern\n> > please enlightent me as to why.\n> >\n> >\n> > [1] Source:\n> > https://www.reddit.com/r/Bitcoin/comments/6172s3/peter_\n> rizun_tells_miners_to_force_a_hard_fork_by/\n> >\n> > Text:\n> >\n> > The attack quoted from his article:\n> > https://medium.com/@peter_r/on-the-emerging-consensus-\n> regarding-bitcoins-block-size-limit-insights-from-my-visit-\n> with-2348878a16d8\n> >\n> >    [Level 2] Anti-split protection Miners will orphan the\n> >    blocks of non-compliant miners prior to the first larger block\n> >    to serve as a reminder to upgrade. Simply due to the possibility\n> >    of having blocks orphaned, all miners would be motivated to\n> >    begin signalling for larger blocks once support definitively\n> >    passes 51%. If some miners hold out (e.g., they may not be\n> >    paying attention regarding the upgrade), then they will begin\n> >    to pay attention after losing approximately $15,000 of revenue\n> >    due to an orphaned block.\n> >\n> >    [Level 3] Anti-split protection In the scenario where Levels\n> >    1 and 2 protection fails to entice all non-compliant miners to\n> >    upgrade, a small-block minority chain may emerge. To address the\n> >    risk of coins being spent on this chain (replay risk), majority\n> >    miners will deploy hash power as needed to ensure the minority\n> >    chain includes only empty blocks after the forking point. This\n> >    can easily be accomplished if the majority miners maintain a\n> >    secret chain of empty blocks built off their last empty\n> >    block publishing only as much of this chain as necessary\n> >    to orphan any non-empty blocks produced on the minority chain.\n> >\n> >\n> >\n> >\n> > - --\n> > Cannon\n> > PGP Fingerprint: 2BB5 15CD 66E7 4E28 45DC 6494 A5A2 2879 3F06 E832\n> > Email: cannon at cannon-ciota.info\n> >\n> > NOTICE: ALL EMAIL CORRESPONDENCE NOT SIGNED/ENCRYPTED WITH PGP SHOULD\n> > BE CONSIDERED POTENTIALLY FORGED, AND NOT PRIVATE.\n> > If this matters to you, use PGP.\n> > -----BEGIN PGP SIGNATURE-----\n> >\n> > iQIcBAEBCgAGBQJY1pbaAAoJEAYDai9lH2mwOO0QANOWqGzPNlifWguc+Y5UQxQM\n> > eAiztAayQBoAyLcFE7/qdtSNlUxbIAHG17fM+aNkehjYH2oN5ODJ+j7E2Yt6EoUH\n> > h5t8MLhNRG/YGF1hJK8Io940EmdcjuNmohiZvrjIqEOYggmLU3hR6J4gsuGsQQhu\n> > gY3sMS/TtT+gZNH8w53ePGrsVhuQR7yEMMr91/vM4+Q5abpwqLeYLnslaZDcd3XK\n> > VB9vyyK08r34J1GQt/H4UvTvGs28MFKBkvueA/Sfyvnrih7+WSQLuSvhiFr+cW1B\n> > TmSVYrB2DzyHN27jDCI2ty3ryNE4PMYcaeLfI2TTbsD/MuVU5lK0kM/1JajP4eRj\n> > j+P03OipuQiy/dNU63w0Uka2PbdKhDC13hVtK/ttBbNppbjnGeB9PYSJCzOpInGw\n> > NwAyz0rVS/llGsdctcII7Z6AUMGuJXzsosY8vjUroU+KFRDqIbDfC53sH7DaPh7u\n> > YawwId5S5RnZsAGCUJ+qNcg0s728J1eDjofN291IS5sOKMzpI7KhaOhFxjnk1MpN\n> > ZAlQeTlvG+sAdn61QMQK1NbFt0km+jcqyVh0+L01yB0K4VDi1YFJaSBOaYUELBXa\n> > 8a6WhZf5nrl5UIpH7rRcPzzqchcdYczy5VRZp2UsU+HYeqLXlcN0a03yPpVQik9S\n> > /T93MuZgmvSCry5MlccA\n> > =R71g\n> > -----END PGP SIGNATURE-----\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170325/16187c21/attachment.html>"
            },
            {
                "author": "Chris Pacia",
                "date": "2017-03-26T09:13:17",
                "message_text_only": "On Mar 25, 2017 10:38 PM, \"Alex Morcos via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n\nAs a Bitcoin user I find it abhorrent the way you are proposing to\nintentionally cripple the chain and rules I want to use instead of just\npeacefully splitting.\n\n\nI just want to point out what appears to be doublespeak going on here.\n\nFirst, I think it would seem obvious to an observer that a sizable portion\nof the community (certainly greater than 5%) view segwit as preventing\n\"rules I want to use instead of just peacefully splitting\" but no\nconsideration was given to these people when designing segwit as a\nsoftfork. I believe it was Luke who went as far as saying consensus does\nnot matter when it comes softforks.\n\nFurthermore, when segwit was first introduced it kicked off a round of\nsoftfork/hardfork debate which I participated in. The primary concern that\nI and other raised was precisely what is going on now.. that miners could\nunilaterally impose an unpopular change to the protocol rules.\n\nAt the time I told, rather forcefully, by multiple people that miners have\nan \"absolute right\" to softfork in whatever rules they want. Which, of\ncourse, is absurd on it's face.\n\nBut I don't see how people can make such claims on the one hand, and then\ncomplain when this process is used against them.\n\nIt amounts to nothing more than \"When it's rules I like we get to impose\nthem on non-consenting users. When it's rules I don't like it's an attack\non the network\".\n\nIt was completely obvious this entire time that softforks were a very\nslippery slope, now we are indeed sliding down that slope.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170326/3cc00f44/attachment-0001.html>"
            },
            {
                "author": "Alex Morcos",
                "date": "2017-03-26T11:27:30",
                "message_text_only": "No I actually agree with a lot of what you said.\n\nI feel there has been a lack of precision and consistency in talking about\nthese things in the past.  This is not intentional, but its just what\nhappens when a lot of different people are all giving their own arguments.\n\nI tried to be a bit more clear by talking about how soft forks have\nhistorically been done.  But certainly the technical definition of a soft\nfork is a slippery slope.  I completely disagree with the idea that miners\nhave any right to enforce a soft fork.  Even more strongly, I don't think\nthey have the ability.  Censoring a certain class of transactions (such as\nthose invalid under a soft fork) is something they can unilaterally do, but\nit is not the same thing as a soft fork.  It is necessarily transient. It\nrequires nodes to enforce the rules to make it a permanent soft fork.\n\nI do think there are differences between soft forks and hard forks and\nconsensus requirements and safety for rolling them out.  But as mentioned\nin my email, I think soft forks should still have a very high bar for\nconsensus.  It's an open question as to whether Core misjudged this for\nsegwit, although if so, I think it was a close call.  The intention is not\nto let 95% of miners make the rules (although again, note that it is 95%, a\nvery high bar, vastly different than 75% of miners).   It seems to me that\nthe vast majority of the community is in favor of segwit.  I'm not sure\nabout your comment that it is obvious to an observer than a sizable portion\nof the community is opposed.  It is certainly some, and perhaps more than\nexpected.  But this is exactly why the new version bits soft fork roll out\nmechanism allows proposals to expire. We did do an extensive job assessing\nsupport for segwit before roll out, and although we knew of a few loud\nvoices against we judged them to be a very small minority.  No business we\ncontacted was opposed.  If it turns out we got it wrong then the proposal\nwill expire harmlessly.  I for one am certainly opposed to forcing segwit\nor any other fork of any kind on a significant minority that is opposed.\n\nDespite saying that, I think you will hear some other responses about how\nsoft forks are opt-in and if you don't like the new features don't use\nthem.  There is some logic behind this idea.  But these are all subtleties\nwhich are hard to make strong right and wrong statements about.  See some\nof the past discussion on this list.\n\n\n\n\nOn Sun, Mar 26, 2017 at 4:13 AM, Chris Pacia <ctpacia at gmail.com> wrote:\n\n>\n>\n> On Mar 25, 2017 10:38 PM, \"Alex Morcos via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>\n> As a Bitcoin user I find it abhorrent the way you are proposing to\n> intentionally cripple the chain and rules I want to use instead of just\n> peacefully splitting.\n>\n>\n> I just want to point out what appears to be doublespeak going on here.\n>\n> First, I think it would seem obvious to an observer that a sizable portion\n> of the community (certainly greater than 5%) view segwit as preventing\n> \"rules I want to use instead of just peacefully splitting\" but no\n> consideration was given to these people when designing segwit as a\n> softfork. I believe it was Luke who went as far as saying consensus does\n> not matter when it comes softforks.\n>\n> Furthermore, when segwit was first introduced it kicked off a round of\n> softfork/hardfork debate which I participated in. The primary concern that\n> I and other raised was precisely what is going on now.. that miners could\n> unilaterally impose an unpopular change to the protocol rules.\n>\n> At the time I told, rather forcefully, by multiple people that miners have\n> an \"absolute right\" to softfork in whatever rules they want. Which, of\n> course, is absurd on it's face.\n>\n> But I don't see how people can make such claims on the one hand, and then\n> complain when this process is used against them.\n>\n> It amounts to nothing more than \"When it's rules I like we get to impose\n> them on non-consenting users. When it's rules I don't like it's an attack\n> on the network\".\n>\n> It was completely obvious this entire time that softforks were a very\n> slippery slope, now we are indeed sliding down that slope.\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170326/1bd8ed19/attachment.html>"
            },
            {
                "author": "Peter R",
                "date": "2017-03-26T19:05:38",
                "message_text_only": "Hello Alex,\n\nThank you for the thoughtful reply.  \n\n> Surely you are aware that what you are proposing is vastly different from the way soft forks have historically worked. \n\nYes, it is different.  It\u2019s different because the future network upgrade to larger blocks includes a loosening of the consensus ruleset whereas previous upgrades have included a tightening of the rule set.  (BTW\u2014this is not my proposal, I am describing what I have recently learned through my work with Bitcoin Unlimited and discussions with miners and businesses).  \n\nWith a tightening of the rule set, a hash power minority that has not upgraded will not produce a minority branch; instead they will simply have any invalid blocks they produce orphaned, serving as a wake-up call to upgrade.  \n\nWith a loosening of the consensus rule set, the situation is different: a hash power minority that has not upgraded will produce a minority branch, that will also drag along non-upgraded node operators, leading to potential confusion.  The idea behind orphaning the blocks of non-upgraded miners was to serve as a wake-up call to upgrade, to reduce the chances of a minority chain emerging in the first place, similar to what happens automatically with a soft-forking change.  If one's worry is a chain split, then this seems like a reasonable way to reduce the chances of that worry materializing.  The Level 3 anti-split protection takes this idea one step further to ensure that if a minority branch does emerge, that transactions cannot be confirmed on that branch.\n\n> First of all, the bar for miners being on the new chain is extremely high, 95%.\n\nI\u2019m very confident that most people do NOT want a split, especially the miners.  The upgrade to larger blocks will not happen until miners are confident that no minority chain will survive.  \n\n> Second of all, soft forks make rule restrictions on classes of transactions that are already non-standard so that any non-upgraded miners are unlikely to be including txs in their blocks which would violate the new rules and should not have their blocks orphaned even after the fork.\n\nI agree that the soft-fork mechanism usually works well.  I believe this mechanism (or perhaps a modified version of it) to increase the block size limit will likewise work well.  All transactions types that are currently valid will be valid after the upgrade, and no new types of transactions are being created.  The \u201cblock-size-limit gene\" of network nodes is simply evolving to allow the network to continue to grow in the way it has always grown. (If you\u2019re interested, here is my talk at Coinbase where I discuss this: https://www.youtube.com/watch?v=pWnFDocAmfg <https://www.youtube.com/watch?v=pWnFDocAmfg>)\n\n> Finally, soft forks are designed to only be used when there is a very wide community consensus and the intention is not to overrule anyone's choice to remain on the old rules but to ensure the security of nodes that may have neglected to upgrade.  Obviously it is impossible to draw a bright line between users who intentionally are not upgrading due to opposition and users that are just being lazy.  But in the case of a proposed BU hard fork it is abundantly clear that there is a very significant fraction, in fact likely a majority of users who intentionally want to remain on the old rules.\n\nMy read is completely different.  I still have never talked with a person in real life who doesn\u2019t want the block size limit to increase.  Indeed, I have met people who worry that Bitcoin Unlimited is \u201ctrying to take over\u201d\u2014and thus they are worried for other reasons\u2014but this couldn\u2019t be further from the truth.  For example, what most people within BU would love to see is a simple patch to Bitcoin Core 0.14 that allows node operators to adjust the size of blocks their nodes will accept, so that these node operators can follow consensus through the upgrade if they choose to.  \n\nThis is not a fight about \u201cCore vs. BU\u201d; Bitcoin\u2019s future is one of \u201cgenetic diversity\u201d with multiple implementations, so that a bug in one doesn\u2019t threaten the network as a whole.  To me it seems this is largely a fight about whether node operators should be easily able to adjust the size of blocks their nodes accept.  BU makes it easy for node operators to accept larger blocks; Core doesn\u2019t believe users should have this power (outside of recompiling from source, which few users can do).  \n\n> As a Bitcoin user I find it abhorrent the way you are proposing to intentionally cripple the chain and rules I want to use instead of just peacefully splitting.\n\nOnce again, this is not my proposal.  I am writing about what I have come to learn over the past several weeks.  When I first heard about these ideas, I was initially against them too.  They seemed harsh and merciless.  It wasn\u2019t until I got out their and started talking to more people in the community that the rationale started to make sense to me: the biggest concern people had was a chain split!\n\nSo I guess the \u201cethics\u201d here depend on the lens through which one is looking. People who believe that an important outcome of the upgrade to larger blocks is to avoid a blockchain split may be more favourable to these ideas than people who want the upgrade to result in a split (or are OK with a split), as it sounds like you do (is this true that you\u2019d rather split than accept blocks with more than 1,000,000 bytes of transaction information in them? Sorry if I misunderstood).  \n\nBut if one's intention is to split and not follow the majority hash power when blocks become larger, then why not change the proof-of-work?  This would certainly result in a peaceful splitting, as you said you desire.  \n\nBest regards,\nPeter R\n\n\n\n> \n> On Sat, Mar 25, 2017 at 3:28 PM, Peter R via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> One of the purported benefits of a soft-forking change (a tightening of the consensus rule set) is the reduced risk of a blockchain split compared to a loosening of the consensus rule set.  The way this works is that miners who fail to upgrade to the new tighter ruleset will have their non-compliant blocks orphaned by the hash power majority.  This is a strong incentive to upgrade and has historically worked well.  If a minority subset of the network didn\u2019t want to abide by the new restricted rule set, a reasonable solution would be for them to change the proof-of-work and start a spin-off from the existing Bitcoin ledger (https://bitcointalk.org/index.php?topic=563972.0 <https://bitcointalk.org/index.php?topic=563972.0>).\n> \n> In the case of the coming network upgrade to larger blocks, a primary concern of both business such as Coinbase and Bitpay, and most miners, is the possibility of a blockchain split and the associated confusion, replay risk, etc.  By applying techniques that are known to be successful for soft-forking changes, we can likewise benefit in a way that makes a split less likely as we move towards larger blocks.  Two proposed techniques to reduce the chances of a split are:\n> \n> 1. That miners begin to orphan the blocks of non-upgraded miners once a super-majority of the network hash power has upgraded. This would serve as an expensive-to-ignore reminder to upgrade.\n> \n> 2. That, in the case where a minority branch emerges (unlikely IMO), majority miners would continually re-org that minority branch with empty blocks to prevent transactions from confirming, thereby eliminating replay risk.\n> \n> Just like after a soft forking change, a minority that does not want to abide by the current ruleset enforced by the majority could change the proof-of-work and start a spin-off from the existing Bitcoin ledger, as suggested by Emin.\n> \n> Best regards,\n> Peter R\n> \n> \n> > On Mar 25, 2017, at 9:12 AM, CANNON via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> >\n> > On 03/24/2017 07:00 PM, Aymeric Vitte wrote:\n> >> I don't know what \"Time is running short I fear\" stands for and when 50%\n> >> is supposed to be reached\n> >\n> > -----BEGIN PGP SIGNED MESSAGE-----\n> > Hash: SHA512\n> >\n> > On 03/24/2017 07:00 PM, Aymeric Vitte wrote: > I don't know what\n> > \"Time is running short I fear\" stands for and when 50% > is supposed\n> > to be reached\n> >\n> > According to current hashrate distribution tracking site coin.dance,\n> > very likely within less than four weeks according to current hashrate\n> > takeover rate.\n> >\n> > While a fork is very likely, that I dont really fear because worst\n> > case scenario is that bitcoin still survives and the invalid chain\n> > becomes an alt.  My fear is the centralized mining power being used\n> > to attack the valid chain with intentions on killing it. [1]\n> >\n> > Shouldn't this 50% attack they are threatening be a concern? If it\n> > is a concern, what options are on the table. If it is not a concern\n> > please enlightent me as to why.\n> >\n> >\n> > [1] Source:\n> > https://www.reddit.com/r/Bitcoin/comments/6172s3/peter_rizun_tells_miners_to_force_a_hard_fork_by/ <https://www.reddit.com/r/Bitcoin/comments/6172s3/peter_rizun_tells_miners_to_force_a_hard_fork_by/>\n> >\n> > Text:\n> >\n> > The attack quoted from his article:\n> > https://medium.com/@peter_r/on-the-emerging-consensus-regarding-bitcoins-block-size-limit-insights-from-my-visit-with-2348878a16d8 <https://medium.com/@peter_r/on-the-emerging-consensus-regarding-bitcoins-block-size-limit-insights-from-my-visit-with-2348878a16d8>\n> >\n> >    [Level 2] Anti-split protection\u200a\u200aMiners will orphan the\n> >    blocks of non-compliant miners prior to the first larger block\n> >    to serve as a reminder to upgrade. Simply due to the possibility\n> >    of having blocks orphaned, all miners would be motivated to\n> >    begin signalling for larger blocks once support definitively\n> >    passes 51%. If some miners hold out (e.g., they may not be\n> >    paying attention regarding the upgrade), then they will begin\n> >    to pay attention after losing approximately $15,000 of revenue\n> >    due to an orphaned block.\n> >\n> >    [Level 3] Anti-split protection\u200a\u200aIn the scenario where Levels\n> >    1 and 2 protection fails to entice all non-compliant miners to\n> >    upgrade, a small-block minority chain may emerge. To address the\n> >    risk of coins being spent on this chain (replay risk), majority\n> >    miners will deploy hash power as needed to ensure the minority\n> >    chain includes only empty blocks after the forking point. This\n> >    can easily be accomplished if the majority miners maintain a\n> >    secret chain of empty blocks\u200a\u200abuilt off their last empty\n> >    block\u200a\u200apublishing only as much of this chain as necessary\n> >    to orphan any non-empty blocks produced on the minority chain.\n> >\n> >\n> >\n> >\n> > - --\n> > Cannon\n> > PGP Fingerprint: 2BB5 15CD 66E7 4E28 45DC 6494 A5A2 2879 3F06 E832\n> > Email: cannon at cannon-ciota.info <mailto:cannon at cannon-ciota.info>\n> >\n> > NOTICE: ALL EMAIL CORRESPONDENCE NOT SIGNED/ENCRYPTED WITH PGP SHOULD\n> > BE CONSIDERED POTENTIALLY FORGED, AND NOT PRIVATE.\n> > If this matters to you, use PGP.\n> > -----BEGIN PGP SIGNATURE-----\n> >\n> > iQIcBAEBCgAGBQJY1pbaAAoJEAYDai9lH2mwOO0QANOWqGzPNlifWguc+Y5UQxQM\n> > eAiztAayQBoAyLcFE7/qdtSNlUxbIAHG17fM+aNkehjYH2oN5ODJ+j7E2Yt6EoUH\n> > h5t8MLhNRG/YGF1hJK8Io940EmdcjuNmohiZvrjIqEOYggmLU3hR6J4gsuGsQQhu\n> > gY3sMS/TtT+gZNH8w53ePGrsVhuQR7yEMMr91/vM4+Q5abpwqLeYLnslaZDcd3XK\n> > VB9vyyK08r34J1GQt/H4UvTvGs28MFKBkvueA/Sfyvnrih7+WSQLuSvhiFr+cW1B\n> > TmSVYrB2DzyHN27jDCI2ty3ryNE4PMYcaeLfI2TTbsD/MuVU5lK0kM/1JajP4eRj\n> > j+P03OipuQiy/dNU63w0Uka2PbdKhDC13hVtK/ttBbNppbjnGeB9PYSJCzOpInGw\n> > NwAyz0rVS/llGsdctcII7Z6AUMGuJXzsosY8vjUroU+KFRDqIbDfC53sH7DaPh7u\n> > YawwId5S5RnZsAGCUJ+qNcg0s728J1eDjofN291IS5sOKMzpI7KhaOhFxjnk1MpN\n> > ZAlQeTlvG+sAdn61QMQK1NbFt0km+jcqyVh0+L01yB0K4VDi1YFJaSBOaYUELBXa\n> > 8a6WhZf5nrl5UIpH7rRcPzzqchcdYczy5VRZp2UsU+HYeqLXlcN0a03yPpVQik9S\n> > /T93MuZgmvSCry5MlccA\n> > =R71g\n> > -----END PGP SIGNATURE-----\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170326/baec31e7/attachment-0001.html>"
            },
            {
                "author": "Alphonse Pace",
                "date": "2017-03-26T20:20:56",
                "message_text_only": "As a user, I would far prefer a split over any kind of mandatory change\nthat would drastically harm the ecosystem.  Many users feel the same way.\nLevel 3 is a pure attack on users who do not conform to your beliefs.\nPlease do not put words in people's mouths claiming they wouldn't prefer a\nsplit when many would.  If you wish to fork off, please do so responsibly.\n\n-Alphonse\n\nOn Sun, Mar 26, 2017 at 2:05 PM, Peter R via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hello Alex,\n>\n> Thank you for the thoughtful reply.\n>\n> Surely you are aware that what you are proposing is vastly different from\n> the way soft forks have historically worked.\n>\n>\n> Yes, it is different.  It\u2019s different because the future network upgrade\n> to larger blocks includes a loosening of the consensus ruleset whereas\n> previous upgrades have included a tightening of the rule set.  (BTW\u2014this is\n> not my proposal, I am describing what I have recently learned through my\n> work with Bitcoin Unlimited and discussions with miners and businesses).\n>\n> With a tightening of the rule set, a hash power minority that has not\n> upgraded will not produce a minority branch; instead they will simply have\n> any invalid blocks they produce orphaned, serving as a wake-up call to\n> upgrade.\n>\n> With a loosening of the consensus rule set, the situation is different: a\n> hash power minority that has not upgraded will produce a minority branch,\n> that will also drag along non-upgraded node operators, leading to potential\n> confusion.  The idea behind orphaning the blocks of non-upgraded miners was\n> to serve as a wake-up call to upgrade, to reduce the chances of a minority\n> chain emerging in the first place, similar to what happens automatically\n> with a soft-forking change.  If one's worry is a chain split, then this\n> seems like a reasonable way to reduce the chances of that worry\n> materializing.  The Level 3 anti-split protection takes this idea one step\n> further to ensure that if a minority branch does emerge, that transactions\n> cannot be confirmed on that branch.\n>\n> First of all, the bar for miners being on the new chain is extremely high,\n> 95%.\n>\n>\n> I\u2019m very confident that most people do NOT want a split, especially the\n> miners.  The upgrade to larger blocks will not happen until miners are\n> confident that no minority chain will survive.\n>\n> Second of all, soft forks make rule restrictions on classes of\n> transactions that are already non-standard so that any non-upgraded miners\n> are unlikely to be including txs in their blocks which would violate the\n> new rules and should not have their blocks orphaned even after the fork.\n>\n>\n> I agree that the soft-fork mechanism usually works well.  I believe this\n> mechanism (or perhaps a modified version of it) to increase the block size\n> limit will likewise work well.  All transactions types that are currently\n> valid will be valid after the upgrade, and no new types of transactions are\n> being created.  The \u201cblock-size-limit gene\" of network nodes is simply\n> evolving to allow the network to continue to grow in the way it has always\n> grown. (If you\u2019re interested, here is my talk at Coinbase where I discuss\n> this: https://www.youtube.com/watch?v=pWnFDocAmfg)\n>\n> Finally, soft forks are designed to only be used when there is a very wide\n> community consensus and the intention is not to overrule anyone's choice to\n> remain on the old rules but to ensure the security of nodes that may have\n> neglected to upgrade.  Obviously it is impossible to draw a bright line\n> between users who intentionally are not upgrading due to opposition and\n> users that are just being lazy.  But in the case of a proposed BU hard fork\n> it is abundantly clear that there is a very significant fraction, in fact\n> likely a majority of users who intentionally want to remain on the old\n> rules.\n>\n>\n> My read is completely different.  I still have never talked with a person\n> in real life who doesn\u2019t want the block size limit to increase.  Indeed, I\n> have met people who worry that Bitcoin Unlimited is \u201ctrying to take\n> over\u201d\u2014and thus they are worried for other reasons\u2014but this couldn\u2019t be\n> further from the truth.  For example, what most people within BU would love\n> to see is a simple patch to Bitcoin Core 0.14 that allows node operators to\n> adjust the size of blocks their nodes will accept, so that these node\n> operators can follow consensus through the upgrade if they choose to.\n>\n> This is not a fight about \u201cCore vs. BU\u201d; Bitcoin\u2019s future is one of\n> \u201cgenetic diversity\u201d with multiple implementations, so that a bug in one\n> doesn\u2019t threaten the network as a whole.  To me it seems this is largely a\n> fight about whether node operators should be easily able to adjust the size\n> of blocks their nodes accept.  BU makes it easy for node operators to\n> accept larger blocks; Core doesn\u2019t believe users should have this power\n> (outside of recompiling from source, which few users can do).\n>\n> As a Bitcoin user I find it abhorrent the way you are proposing to\n> intentionally cripple the chain and rules I want to use instead of just\n> peacefully splitting.\n>\n>\n> Once again, this is not my proposal.  I am writing about what I have come\n> to learn over the past several weeks.  When I first heard about these\n> ideas, I was initially against them too.  They seemed harsh and merciless.\n> It wasn\u2019t until I got out their and started talking to more people in the\n> community that the rationale started to make sense to me: the biggest\n> concern people had was a chain split!\n>\n> So I guess the \u201cethics\u201d here depend on the lens through which one is\n> looking. People who believe that an important outcome of the upgrade to\n> larger blocks is to avoid a blockchain split may be more favourable to\n> these ideas than people who want the upgrade to result in a split (or are\n> OK with a split), as it sounds like you do (is this true that you\u2019d rather\n> split than accept blocks with more than 1,000,000 bytes of transaction\n> information in them? Sorry if I misunderstood).\n>\n> But if one's intention is to split and not follow the majority hash power\n> when blocks become larger, then why not change the proof-of-work?  This\n> would certainly result in a peaceful splitting, as you said you desire.\n>\n> Best regards,\n> Peter R\n>\n>\n>\n>\n> On Sat, Mar 25, 2017 at 3:28 PM, Peter R via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> One of the purported benefits of a soft-forking change (a tightening of\n>> the consensus rule set) is the reduced risk of a blockchain split compared\n>> to a loosening of the consensus rule set.  The way this works is that\n>> miners who fail to upgrade to the new tighter ruleset will have their\n>> non-compliant blocks orphaned by the hash power majority.  This is a strong\n>> incentive to upgrade and has historically worked well.  If a minority\n>> subset of the network didn\u2019t want to abide by the new restricted rule set,\n>> a reasonable solution would be for them to change the proof-of-work and\n>> start a spin-off from the existing Bitcoin ledger (\n>> https://bitcointalk.org/index.php?topic=563972.0).\n>>\n>> In the case of the coming network upgrade to larger blocks, a primary\n>> concern of both business such as Coinbase and Bitpay, and most miners, is\n>> the possibility of a blockchain split and the associated confusion, replay\n>> risk, etc.  By applying techniques that are known to be successful for\n>> soft-forking changes, we can likewise benefit in a way that makes a split\n>> less likely as we move towards larger blocks.  Two proposed techniques to\n>> reduce the chances of a split are:\n>>\n>> 1. That miners begin to orphan the blocks of non-upgraded miners once a\n>> super-majority of the network hash power has upgraded. This would serve as\n>> an expensive-to-ignore reminder to upgrade.\n>>\n>> 2. That, in the case where a minority branch emerges (unlikely IMO),\n>> majority miners would continually re-org that minority branch with empty\n>> blocks to prevent transactions from confirming, thereby eliminating replay\n>> risk.\n>>\n>> Just like after a soft forking change, a minority that does not want to\n>> abide by the current ruleset enforced by the majority could change the\n>> proof-of-work and start a spin-off from the existing Bitcoin ledger, as\n>> suggested by Emin.\n>>\n>> Best regards,\n>> Peter R\n>>\n>>\n>> > On Mar 25, 2017, at 9:12 AM, CANNON via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> >\n>> > On 03/24/2017 07:00 PM, Aymeric Vitte wrote:\n>> >> I don't know what \"Time is running short I fear\" stands for and when\n>> 50%\n>> >> is supposed to be reached\n>> >\n>> > -----BEGIN PGP SIGNED MESSAGE-----\n>> > Hash: SHA512\n>> >\n>> > On 03/24/2017 07:00 PM, Aymeric Vitte wrote: > I don't know what\n>> > \"Time is running short I fear\" stands for and when 50% > is supposed\n>> > to be reached\n>> >\n>> > According to current hashrate distribution tracking site coin.dance,\n>> > very likely within less than four weeks according to current hashrate\n>> > takeover rate.\n>> >\n>> > While a fork is very likely, that I dont really fear because worst\n>> > case scenario is that bitcoin still survives and the invalid chain\n>> > becomes an alt.  My fear is the centralized mining power being used\n>> > to attack the valid chain with intentions on killing it. [1]\n>> >\n>> > Shouldn't this 50% attack they are threatening be a concern? If it\n>> > is a concern, what options are on the table. If it is not a concern\n>> > please enlightent me as to why.\n>> >\n>> >\n>> > [1] Source:\n>> > https://www.reddit.com/r/Bitcoin/comments/6172s3/peter_rizun\n>> _tells_miners_to_force_a_hard_fork_by/\n>> >\n>> > Text:\n>> >\n>> > The attack quoted from his article:\n>> > https://medium.com/@peter_r/on-the-emerging-consensus-regard\n>> ing-bitcoins-block-size-limit-insights-from-my-visit-with-2348878a16d8\n>> >\n>> >    [Level 2] Anti-split protection Miners will orphan the\n>> >    blocks of non-compliant miners prior to the first larger block\n>> >    to serve as a reminder to upgrade. Simply due to the possibility\n>> >    of having blocks orphaned, all miners would be motivated to\n>> >    begin signalling for larger blocks once support definitively\n>> >    passes 51%. If some miners hold out (e.g., they may not be\n>> >    paying attention regarding the upgrade), then they will begin\n>> >    to pay attention after losing approximately $15,000 of revenue\n>> >    due to an orphaned block.\n>> >\n>> >    [Level 3] Anti-split protection In the scenario where Levels\n>> >    1 and 2 protection fails to entice all non-compliant miners to\n>> >    upgrade, a small-block minority chain may emerge. To address the\n>> >    risk of coins being spent on this chain (replay risk), majority\n>> >    miners will deploy hash power as needed to ensure the minority\n>> >    chain includes only empty blocks after the forking point. This\n>> >    can easily be accomplished if the majority miners maintain a\n>> >    secret chain of empty blocks built off their last empty\n>> >    block publishing only as much of this chain as necessary\n>> >    to orphan any non-empty blocks produced on the minority chain.\n>> >\n>> >\n>> >\n>> >\n>> > - --\n>> > Cannon\n>> > PGP Fingerprint: 2BB5 15CD 66E7 4E28 45DC 6494 A5A2 2879 3F06 E832\n>> > Email: cannon at cannon-ciota.info\n>> >\n>> > NOTICE: ALL EMAIL CORRESPONDENCE NOT SIGNED/ENCRYPTED WITH PGP SHOULD\n>> > BE CONSIDERED POTENTIALLY FORGED, AND NOT PRIVATE.\n>> > If this matters to you, use PGP.\n>> > -----BEGIN PGP SIGNATURE-----\n>> >\n>> > iQIcBAEBCgAGBQJY1pbaAAoJEAYDai9lH2mwOO0QANOWqGzPNlifWguc+Y5UQxQM\n>> > eAiztAayQBoAyLcFE7/qdtSNlUxbIAHG17fM+aNkehjYH2oN5ODJ+j7E2Yt6EoUH\n>> > h5t8MLhNRG/YGF1hJK8Io940EmdcjuNmohiZvrjIqEOYggmLU3hR6J4gsuGsQQhu\n>> > gY3sMS/TtT+gZNH8w53ePGrsVhuQR7yEMMr91/vM4+Q5abpwqLeYLnslaZDcd3XK\n>> > VB9vyyK08r34J1GQt/H4UvTvGs28MFKBkvueA/Sfyvnrih7+WSQLuSvhiFr+cW1B\n>> > TmSVYrB2DzyHN27jDCI2ty3ryNE4PMYcaeLfI2TTbsD/MuVU5lK0kM/1JajP4eRj\n>> > j+P03OipuQiy/dNU63w0Uka2PbdKhDC13hVtK/ttBbNppbjnGeB9PYSJCzOpInGw\n>> > NwAyz0rVS/llGsdctcII7Z6AUMGuJXzsosY8vjUroU+KFRDqIbDfC53sH7DaPh7u\n>> > YawwId5S5RnZsAGCUJ+qNcg0s728J1eDjofN291IS5sOKMzpI7KhaOhFxjnk1MpN\n>> > ZAlQeTlvG+sAdn61QMQK1NbFt0km+jcqyVh0+L01yB0K4VDi1YFJaSBOaYUELBXa\n>> > 8a6WhZf5nrl5UIpH7rRcPzzqchcdYczy5VRZp2UsU+HYeqLXlcN0a03yPpVQik9S\n>> > /T93MuZgmvSCry5MlccA\n>> > =R71g\n>> > -----END PGP SIGNATURE-----\n>> >\n>> > _______________________________________________\n>> > bitcoin-dev mailing list\n>> > bitcoin-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170326/88bf8628/attachment-0001.html>"
            },
            {
                "author": "Bryan Bishop",
                "date": "2017-03-26T20:22:19",
                "message_text_only": "On Sun, Mar 26, 2017 at 2:05 PM, Peter R via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> With a tightening of the rule set, a hash power minority that has not\n> upgraded will not produce a minority branch; instead they will simply have\n> any invalid blocks they produce orphaned, serving as a wake-up call to\n> upgrade.\n>\n\nFalse. With bip9-based soft-fork-based activation of segwit, miner blocks\nwill not be orphaned unless they are intentionally segwit-invalid (which\nthey currently are not). If you have told miners otherwise, let me know.\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170326/a3add68d/attachment.html>"
            },
            {
                "author": "Trevin Hofmann",
                "date": "2017-03-26T20:37:28",
                "message_text_only": ">> With a tightening of the rule set, a hash power minority that has not\nupgraded will not produce a minority branch; instead they will simply have\nany invalid blocks they produce orphaned, serving as a wake-up call t>o\nupgrade.\n\n> False. With bip9-based soft-fork-based activation of segwit, miner blocks\nwill not be orphaned unless they are intentionally segwit-invalid (which\nthey currently are not). If you have told miners otherwise, let me know.\n\nHe stated that \"any invalid blocks they produce\" will be orphaned. This is\nnot false. If non-upgraded miners do not produce blocks that are invalid\nper the new rules, their blocks will not be orphaned. This is consistent\nwith Peter's comment.\n\n-Trevin\n\nOn Sun, Mar 26, 2017 at 3:22 PM, Bryan Bishop via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Sun, Mar 26, 2017 at 2:05 PM, Peter R via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> With a tightening of the rule set, a hash power minority that has not\n>> upgraded will not produce a minority branch; instead they will simply have\n>> any invalid blocks they produce orphaned, serving as a wake-up call to\n>> upgrade.\n>>\n>\n> False. With bip9-based soft-fork-based activation of segwit, miner blocks\n> will not be orphaned unless they are intentionally segwit-invalid (which\n> they currently are not). If you have told miners otherwise, let me know.\n>\n> - Bryan\n> http://heybryan.org/\n> 1 512 203 0507 <(512)%20203-0507>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170326/06db8f3d/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2017-03-26T21:12:20",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 03/26/2017 01:22 PM, Bryan Bishop via bitcoin-dev wrote:\n> On Sun, Mar 26, 2017 at 2:05 PM, Peter R via bitcoin-dev \n> <bitcoin-dev at lists.linuxfoundation.org \n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n> With a tightening of the rule set, a hash power minority that has \n> not upgraded will not produce a minority branch; instead they will \n> simply have any invalid blocks they produce orphaned, serving as a \n> wake-up call to upgrade.\n> \n> False. With bip9-based soft-fork-based activation of segwit, miner \n> blocks will not be orphaned unless they are intentionally\n> segwit-invalid (which they currently are not). If you have told\n> miners otherwise, let me know.\n\nGiven the protocol requirements of the segwit proposal this is not the\ncase. A miner running pre-segwit code will produce blocks that no\nsegwit node will ever receive. It matters not whether these blocks\ncontain transactions that are invalidated by the soft fork. Despite\nbeing valid to other pre-segwit nodes they will never be built upon by\nthe majority hash power once segwit activates.\n\nAt the same time, Peter's comment above is also incorrect. A \"minority\nbranch\" *is* a set of blocks that have been orphaned (the term orphan\nbeing a misnomer, since these blocks of course have an ancestry all\nthe way to the genesis block). That's precisely what is implied by the\nword \"minority\". So his description contradicts itself.\n\ne\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\n\niQEcBAEBCAAGBQJY2C6pAAoJEDzYwH8LXOFOf4gH/2e/euZ9bQxPKZyC7DN8us6T\nR1R9f+JFFsU3Vo8HkcU028Ib4aF0IAELvAWrhpZfH6ixZV2c3CJoi53rMbPmJ/+H\nRlj0Qjc58mYpqosxyNoi0qPFZ2e3yCv+R5v9PQEeOdcGwXIr77Tij8lI1yu4uqHU\nbqJ3BXJLFpvL5iXOLhbakeu2qVIHqJnb1/hQMNh6eNM794n+UT2T8You52xUkuTm\nzJ+5CTQUiMNFE/HBWsbk8Vf3BTrM0sqMRTJzdr4VT1l+uOZn58BJJPFzLr2WeZww\nklAB/wK5oExMNlKQVy6Rw9+uFx88qRTl5s7LwFASOxEZYJIjd36bBaoTdqfaB5U=\n=pvlp\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Tom Harding",
                "date": "2017-03-26T21:42:51",
                "message_text_only": "On 3/26/2017 1:22 PM, Bryan Bishop via bitcoin-dev wrote:\n> On Sun, Mar 26, 2017 at 2:05 PM, Peter R via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>\n>     With a tightening of the rule set, a hash power minority that has\n>     not upgraded will not produce a minority branch; instead they will\n>     simply have any invalid blocks they produce orphaned, serving as a\n>     wake-up call to upgrade.\n>\n>\n> False. With bip9-based soft-fork-based activation of segwit, miner\n> blocks will not be orphaned unless they are intentionally\n> segwit-invalid (which they currently are not). If you have told miners\n> otherwise, let me know.\n>\n\nA reasonable miner automatically checks every transaction seen, to see\nif it might be valid with his own outputs substituted.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170326/b69b2b03/attachment-0001.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2017-03-26T22:15:54",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 03/26/2017 12:05 PM, Peter R via bitcoin-dev wrote:\n\nPeter,\n\n> Yes, it is different.  It\u2019s different because the future network\n> upgrade to larger blocks includes a loosening of the consensus\n> ruleset whereas previous upgrades have included a tightening of the\n> rule set.  (BTW\u2014this is not my proposal, I am describing what I\n> have recently learned through my work with Bitcoin Unlimited and\n> discussions with miners and businesses).\n\nThe repeated use of the term \"network upgrade\" in place of the\naccepted technical term (hard fork) is misleading. This and the\npresupposition that the hard fork is coming, and the claims that it's\nnot your proposal, make me feel like I'm shopping for a used car...\nIt's not used it's pre-owned, everyone's getting the warranty, let me\nsee what my manager has to say about the price - it's not my decision.\n\nThis is a development list. Avoidance of standardized terminology and\nuse of the presumptive close diminishes your message.\n\n> With a tightening of the rule set, a hash power minority that has\n> not upgraded will not produce a minority branch; instead they will\n> simply have any invalid blocks they produce orphaned, serving as a\n> wake-up call to upgrade.\n\n\"tightening of the rule set\" == soft fork\n\nThis implies that the minority hash power is producing blocks that are\nvalid according to rules in existence prior to the soft fork. You are\nreferring to these as invalid, but because this has already confused\none commentator, let's be clear. The blocks you are referring to are\nvalid blocks being orphaned because the majority hash power is\nrejecting them because of soft fork activation. This of course\nproduces a minority chain, so this statement is incorrect.\n\n> With a loosening of the consensus rule set, the situation is\n> different: a hash power minority that has not upgraded will produce\n> a minority branch, that will also drag along non-upgraded node\n> operators, leading to potential confusion.\n\n\"loosening of the consensus rule set\" == hard fork\n\nThis is also incorrect. In the case of a hard fork old nodes reject\nthe new blocks that are invalid according to old rules and continue to\naccept other old blocks. This produces a second distinct chain. It is\nneither a majority nor a minority chain with respect to the original.\nIt is simply a new coin that happens to share history with the old\ncoin. This doesn't imply confusion, since both chains continue to\noperate under the rules of their nodes. The only confusion arises from\npeople wanting to transaction across *both* chains. It is only in this\ncontext that replay becomes an issue.\n\n> The idea behind orphaning the blocks of non-upgraded miners was to\n> serve as a wake-up call to upgrade, to reduce the chances of a\n> minority chain emerging in the first place, similar to what happens\n> automatically with a soft-forking change.  If one's worry is a\n> chain split, then this seems like a reasonable way to reduce the \n> chances of that worry materializing.  The Level 3 anti-split\n> protection takes this idea one step further to ensure that if a\n> minority branch does emerge, that transactions cannot be confirmed\n> on that branch.\n\nStopping people from transacting on the old chain due to an ongoing\n51% attack (again, using proper terminology) is one way to make it\nhard for people to transact on both chains. But if you don't care that\npeople are able to transact on both chains, there's no reason to spend\nthe money on the attack.\n\nSo let me point to the elephant in the room. The proposed 51% attack\nis more obviously an attempt to transfer economic activity from BTC to\nBTU, not a benevolent measure to prevent confusion. It can clearly be\nviewed as elimination of competition through an electronic attack on\nBTC operations. Given that they are all regulated entities, I'm not\nsure how the envisioned large miner collaborators (or others who might\nfund it) will feel about participation in the scheme.\n\n> This is not a fight about \u201cCore vs. BU\u201d; Bitcoin\u2019s future is one\n> of \u201cgenetic diversity\u201d with multiple implementations, so that a bug\n> in one doesn\u2019t threaten the network as a whole\n\nYou are right that this is not about Core and BU. These are\nimplementations, not protocols. However, please do not presume that\nother implementations are enlisted in your scheme, or that this is\nabout making the network more bug-resistant.\n\n> To me it seems this is largely a fight about whether node operators\n> should be easily able to adjust the size of blocks their nodes\n> accept.  BU makes it easy for node operators to accept larger\n> blocks; Core doesn\u2019t believe users should have this power (outside\n> of recompiling from source, which few users can do).\n\nI feel like making the block size a configuration option in Libbitcoin\njust to emphasize the gross error of this idea. It has never been\nabout the inability of users to compile the code. It's about the\npurposeful difficulty in changing the rules when everyone has a say.\n\n> Once again, this is not my proposal.  I am writing about what I\n> have come to learn over the past several weeks.  When I first heard\n> about these ideas, I was initially against them too.  They seemed\n> harsh and merciless.  It wasn\u2019t until I got out their and started\n> talking...\n\nThe idea was so powerful you were converted (another sales tactic).\nWho's proposal is this? Can they not speak for themselves?\n\n> So I guess the \u201cethics\u201d here depend on the lens through which one\n> is looking...\n\nThese are not ethical questions. These are development questions,\nbuilt on economic concepts, backed by individual financial decisions.\nThere is no equivalence of ideas based on one's arbitrary perspective.\n\n> But if one's intention is to split and not follow the majority\n> hash power when blocks become larger,\n\nThe \"split\" is always by the one that hard forks. The splitter is the\none who changes what exists and therefore creates something new.\nPlease fix your terminology.\n\n> then why not change the proof-of-work? This would certainly result\n> in a peaceful splitting, as you said you desire.\n\nA hard fork, including changing the PoW algorithm, requires the\npurposely improbable coordination of the economy in the creation of a\nnew coin and the abandonment of the old. This should be apparent from\nthe ongoing block size hard fork attempts.\n\ne\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\n\niQEcBAEBCAAGBQJY2D2SAAoJEDzYwH8LXOFO3r0H/R0PTi2x15Zj1oceOqcNpP4k\n/TrTohFl/BRE4PaOqJ9n9DbJ6W8rnAjRnguOIgOB1CSIRCuy73AQ4aqRSTCBlHbe\nVVrlKKFS8zh50Cjg8tlnomWeKe1YDO31R2Avises+Dr3kyqQ9+QYtOoqxvuvYrXo\nB03fjPIL0eTQypA4KP/W7CxrlHN7oyN+PtehpI51JOGMxx6Xc0RDelGz1NTlQQ1f\n90Axeey51tgAzJ8wsC+Vf22hZdU06VDdtG8PSHVcrELoicDnEjR4T+1XqA1hcAY2\nhWBX5qpQYJqJv1ypfTH0ouh6QtLhJZGCWzKZnpH+T7d3FUG+AXn0UjTP3Nkh7NY=\n=Cc8r\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Aymeric Vitte",
                "date": "2017-03-27T10:25:00",
                "message_text_only": "Le 27/03/2017 \u00e0 00:15, Eric Voskuil via bitcoin-dev a \u00e9crit :\n> On 03/26/2017 12:05 PM, Peter R via bitcoin-dev wrote:\n>\n>\n>\n> The repeated use of the term \"network upgrade\" in place of the\n> accepted technical term (hard fork) is misleading. This and the\n> presupposition that the hard fork is coming, and the claims that it's\n> not your proposal, make me feel like I'm shopping for a used car...\n> It's not used it's pre-owned, everyone's getting the warranty, let me\n> see what my manager has to say about the price - it's not my decision.\n>\n> This is a development list. Avoidance of standardized terminology and\n> use of the presumptive close diminishes your message.\n>\n>\n>\n> The idea was so powerful you were converted (another sales tactic).\n> Who's proposal is this? Can they not speak for themselves?\n>\n>\n\nWhat is the rationale to come on this list (on behalf of we don't know\nwhom) and explain all the details of the \"network upgrade\" (ie the\nattack) if this is not to try to get some information to confirm the\ntheory and/or improve it, or some information about how it will be\ndefeated? This just shows that they are not sure about the whole thing,\nthey should stop this now, launch their approximative BU if they like\nand leave BTC alone\n\n\n-- \nZcash wallets made simple: https://github.com/Ayms/zcash-wallets\nBitcoin wallets made simple: https://github.com/Ayms/bitcoin-wallets\nGet the torrent dynamic blocklist: http://peersm.com/getblocklist\nCheck the 10 M passwords list: http://peersm.com/findmyass\nAnti-spies and private torrents, dynamic blocklist: http://torrent-live.org\nPeersm : http://www.peersm.com\ntorrent-live: https://github.com/Ayms/torrent-live\nnode-Tor : https://www.github.com/Ayms/node-Tor\nGitHub : https://www.github.com/Ayms"
            },
            {
                "author": "Aymeric Vitte",
                "date": "2017-03-24T19:00:40",
                "message_text_only": "Since I have been working on crypto currencies/bitcoin, I kept\nrepeating: btc should make a priority to significantly increase the\nridiculous number of full nodes we have today, design an incentive for\npeople to run full nodes and design a system for people to setup full\nnodes in an acceptable timeframe\n\nUnfortunately, this was not a priority at all, maybe because of some\nhistorical consensus between miners and devs, so here we are today, some\nminers became crazy, the situation would be much more different if more\nfull nodes were there\n\nBecause, how comes everybody perfectly knows the plans of the conspiring\nminers? They were stupid enough to explain very precisely how they will\nperform the attack?\n\nIf I were them I would in addition setup quite a lot of nodes (which\nprobably they are planning to do, because anyway they need them for the\nnew sw), not difficult, not so expensive\n\nDefending against abnormal blocks looks to be a non issue, I suppose\nthat the btc devs perfectly know how to create a pattern based on\nhistory to detect abnormal blocks (including some strange transactions)\nand reject them, but this further depends on the ability of current full\nnodes to upgrade, which apparently is not what they do the best\n\nI don't know what \"Time is running short I fear\" stands for and when 50%\nis supposed to be reached\n\nGiven that it looks difficult to quickly increase the number of full\nnodes, that increasing the mining power by standard means looks too\nexpensive, useless and not profitable, that a counter attack based on a\nnew proof of something does not look to be ready, then maybe the btc\nfolks should ask Bram Cohen (who by some luck is participating to this\nlist) to resurrect the bitcoin miner Epic Scale which Bittorrent Inc (in\nan umpteenth dubious attempt to make money) tried some time ago to\ninclude quietly in utorrent forgetting to ask the authorization of the\nselected users, then utorrent users might upgrade (potentially 150 M),\nand the resulting mining power might be sufficient, depending on the\nincentive for this, which is TBD\n\nOr activate by anticipation proof of space... unlike bitcoin-qt,\nutorrent sw is quite good to be intrusive, run in background when you\nthink you have closed it, run things you don't know, etc, so quite\nefficient in this situation\n\nThen if btc folks wants to promote full nodes too, it would not be a bad\nidea to put the bitcoin-qt blockchain + chain state in a torrent making\nsure it is seeded correctly (there are plenty of academics here, they\ncan do it and run full nodes too) so people can download it and setup\nfull nodes (incentive TBD too) assuming they know about upnp/port forwarding\n\n\nLe 24/03/2017 \u00e0 17:03, CANNON via bitcoin-dev a \u00e9crit :\n> When the original white paper was written the idea was that nodes\n> would be miners at same time. That the distribution of mining power\n> being mostly on par with the distribution of nodes if I understand\n> correctly. The problem we face now I fear, is the mining power\n> becoming centralized. Even if every bitcoin node invested a $1000\n> into mining power and mined at a loss, it still would not even\n> make a dent in hash distribution. Currently there are around 6000\n> known nodes. If each node invested $1000 for say 10 ths of hashing\n> power. At current hashrate of around 3,674,473,142 GH/s this would\n> only make up %16 of hash power. This is out of balance as while\n> nodes are distributed mining power is becoming very centralized\n> due to the creation of monopolization of ASICs. The problem we\n> are facing is a small group of a couple people whom control a\n> large amount and growing of hash power. At time of this writing\n> it has quickly risen to 39% and at current rate will soon become\n> 50% of hashing power that is controlled by a small group of a few\n> people. Their intentions are too hijack the bitcoin network to a\n> cryptocurrency that suits their dangerous agenda. Dangerous because\n> their plan would centralize power of consensus as I understand it,\n> to themselves the miners. Dangerous also because the code base of\n> the attempting subverters is buggy, insecure, and reckless from a\n> technological standpoint. Even though they only have very minute\n> amount of nodes compared to legitimate bitcion nodes, the danger\n> is that they are very quickly taking over in mining power. While\n> it is true that nodes will not accept invalid blocks that would be\n> attempted to be pushed by the conspirators, they are threatening to\n> attack the valid (or in their words, \"minority chain\") by dedicating\n> some mining power soley to attacking the valid chain by mining empty\n> blocks and orphaning the valid chain. So even though the majority\n> of nodes would be enforcing what blocks are valid and as a result\n> block the non-compliant longer chain, the conspiring miner can simply\n> (as they are currently threatening to) make the valid chain unuseable\n> by mining empty blocks.\n>\n> If a malicious miner with half or majority control passes invalid\n> blocks, the worst case scenario is a hardfork coin split in which\n> the non-compliant chain becomes an alt. However the problem is that\n> this malicious miner is very recently threatening to not just simply\n> fork, but to kill the valid chain to force economic activity to the\n> adversary controlled chain. If we can simply defend against attacks\n> to the valid chain, we can prevent the valid chain from dying.\n>\n> While empty or near empty blocks would generally be protected by\n> the incentive of miners to make money. The threat is there if the\n> malicious miner with majority control is willing to lose out on\n> these transaction fees and block reward if their intention is to\n> suppress it to force the majority onto their chain.\n>\n> Proposal for potential solution Update nodes to ignore empty blocks,\n> so this way mined empty blocks cannot be used to DOS attack the\n> blockchain. But what about defense from say, blocks that are\n> not empty but intentionally only have a couple transactions\n> in it? Possible to have nodes not only ignore empty blocks,\n> but also blocks that are abnormally small compared to number of\n> valid transactions in mempool?\n>\n> For example would be something like this:\n> If block = (empty OR  <%75 of mempool) THEN discard\n> This threshold just an example.\n>\n> What would be any potentials risks\n> and attacks resulting from both having such new rulesets and not\n> doing anything?\n>\n> Lets assume that the first problem of blocking empty or near empty\n> blocks has been mitigated with the above proposed solution. How\n> likely and possible would it be for a malicious miner with lots of\n> mining power to orphan the chain after so many blocks even with\n> non empty blocks? Is there a need to mitigate this?\n> If so is it possible?\n>\n> Time is running short I fear. There needs to be discussion on various\n> attacks and how they can be guarded against along with various\n> other contingency plans.\n>\n> _______________________________________________ > bitcoin-dev mailing list > bitcoin-dev at lists.linuxfoundation.org >\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-- \nZcash wallets made simple: https://github.com/Ayms/zcash-wallets\nBitcoin wallets made simple: https://github.com/Ayms/bitcoin-wallets\nGet the torrent dynamic blocklist: http://peersm.com/getblocklist\nCheck the 10 M passwords list: http://peersm.com/findmyass\nAnti-spies and private torrents, dynamic blocklist: http://torrent-live.org\nPeersm : http://www.peersm.com\ntorrent-live: https://github.com/Ayms/torrent-live\nnode-Tor : https://www.github.com/Ayms/node-Tor\nGitHub : https://www.github.com/Ayms\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170324/c2626958/attachment-0001.html>"
            },
            {
                "author": "Bryan Bishop",
                "date": "2017-03-26T20:44:12",
                "message_text_only": "On Sun, Mar 26, 2017 at 3:37 PM, Trevin Hofmann <trevinhofmann at gmail.com>\nwrote:\n\n> He stated that \"any invalid blocks they produce\" will be orphaned. This is\n> not false. If non-upgraded miners do not produce blocks that are invalid\n> per the new rules, their blocks will not be orphaned. This is consistent\n> with Peter's comment.\n\n\nIt's the other part of the statement- the \"wakeup call to upgrade\" from\nproducing invalid blocks? They aren't producing invalid blocks.\nAdditionally, if they want to be even more sure about this, they can run\nthe so-called \"border nodes\". No wakeup calls needed.... the point of a\nsoft-fork is to reduce incompatibility.\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170326/4dc87e3a/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Defending against empty or near empty blocks from malicious miner takeover?",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Bryan Bishop",
                "Eric Voskuil",
                "Emin G\u00fcn Sirer",
                "Nick ODell",
                "Hampus Sj\u00f6berg",
                "Aymeric Vitte",
                "Alphonse Pace",
                "Trevin Hofmann",
                "Alex Morcos",
                "Chris Pacia",
                "Peter R",
                "Tom Harding",
                "CANNON"
            ],
            "messages_count": 20,
            "total_messages_chars_count": 105681
        }
    },
    {
        "title": "[bitcoin-dev] Two altcoins and a 51% attack (was: Defending against empty or near empty blocks from malicious miner takeover?)",
        "thread_messages": [
            {
                "author": "Eric Voskuil",
                "date": "2017-03-26T03:00:51",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 03/25/2017 01:28 PM, Peter R via bitcoin-dev wrote:\n\n> In the case of the coming network upgrade to larger blocks, a\nprimary concern [...] is the possibility of a blockchain split and the\nassociated confusion, replay risk, etc.\n\n> [...] a minority that does not want to abide by the [hard fork]\nruleset enforced by the majority could change the proof-of-work and\nstart a spin-off from the existing Bitcoin ledger [...]\n\nThe \"spin off\" to which you refer is an altcoin. The \"network upgrade\"\nto which you refer is also an altcoin. Both are hard forks from\nBitcoin. I'm having a hard time imagining how a plan to create two new\naltcoins from Bitcoin avoids either a split or confusion.\n\nApplication of hash power toward the disruption of Bitcoin presumes\nparticipating miners are willing to accept a total loss on these\noperations. I can imagine a significant portion of the hash power\ndeciding to let their competitors donate to \"confusion reduction\".\nEventually those thrifty miners will put the philanthropists out of\nbusiness. Maybe you can get Coinbase and Bitpay to finance the operation\n.\n\nThis plan seems to be a response to the industry call for replay\nprotection. Actually writing the code is another option.\n\n> once a super-majority of the network hash power has upgraded.\n\nDespite the fact that nobody (miners included) has any way to measure\nwhat software the economy (or hash power) is running, or what is the\neconomic weight of that portion of the economy.\n\ne\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\n\niQEcBAEBCAAGBQJY1y7aAAoJEDzYwH8LXOFO9EMH/Aip84JpoYBM8/JIRpjq/wzp\nVBU9rwMrVwaKdt8IzdJIhaD8FAiXYmXP6xM3eYk5Jp5g67uBnlrmXqlM/IfHI374\nsKvN2nyHNqng9citI6ZeR+B3xJ7oFzycKf+KnvKi5JnPEMuTYwIw+dvXJGvZdjeH\nWxW0g63KvfDPvYbYkE1hKnzUHWxGrR/Jrs898Cnwd0Z9OjrVNM3ZEix/IK4QrNRN\ne/xLXjuIDHx6nzbddbVOSsuxBDo0GZUufGM4zTrGG+kNy4xFWsfwaXlM6kHmRqGF\n73PDFWzbiur4B0CoBA7zd2C2ErypKZOoM35rsvwZq/a23OlxH6Jds7+6jTwN9lQ=\n=0Bn2\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Two altcoins and a 51% attack (was: Defending against empty or near empty blocks from malicious miner takeover?)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Voskuil"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2014
        }
    },
    {
        "title": "[bitcoin-dev] Strong Anti-Replay via Coinbase Transactions",
        "thread_messages": [
            {
                "author": "Cameron Garnham",
                "date": "2017-03-25T03:30:22",
                "message_text_only": "<pre>\n  BIP: ???\n  Layer: Consensus (soft fork)\n  Title: Strong Anti-Replay via Coinbase Transactions\n  Author: Cameron Garnham <da2ce7 at gmail.com>\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-???\n  Status: Draft\n  Type: Standards Track\n  Created: 2017-03-25\n  License: BSD-3-Clause\n           CC0-1.0\n</pre>\n\n==Abstract==\n\nThis document specifies a soft fork that enables users to make transactions with a strong expectation that such transactions cannot be replayed on a different chain.\n\nImportant Note: In the case that an adversary hard-fork, the strong guarantee of non-replayabilty via this BIP may not be supported.\n\n==Definitions==\n\n\n\n==Motivation==\n\nIn the case of a chain split, it is important to protect users from, potentially significant, loss of funds from transaction replay attacks.\n\n\n==Specification==\n\nUpon activation of the soft-fork (activation methodology undefined in this proposal), the following new rules become activated on the Bitcoin Network.\n\nNew \u2018anti-replay\u2019 OpCode.  Take an unused NoOp and redefine it as \u2018OP_ANTI_REPLAY\u2019.\n\nThe script must only have the form:\n\nscriptPubKey: (empty)\nscriptSig: OP_ANTI_REPLAY\n\nOP_ANTI_REPLAY has the following specification:\n\n\t\u2022 OP_ANTI_REPLAY outputs must only be created in a coinbase transaction.\n\t\u2022 OP_ANTI_REPLAY coinbase outputs must only have the value of 1 Satoshi.\n\t\u2022 Transaction must not included more than 1 OP_ANTI_REPLAY input.\n\t\u2022 If a OP_ANTI_REPLAY input is included in a transaction, the transaction must also be marked as Opt-In-RBF (BIP 125).\n\nThe Bitcoin Network should maintain a total of exactly 100 000 OP_ANTI_REPLAY outputs, with the exception of the the first 99 blocks after activation of this soft fork.\n\nUpon activation of this soft fork.  Every blocks coinbase transaction will be required to create exactly 1000 new OP_ANTI_REPLAY outputs, up to the total of 100 000.\n\nIf a OP_ANTI_REPLAY is spent in a block, a corresponding new OP_ANTI_REPLAY must be included in the same block.\n\nIt is recommend the miners account the size of a OP_ANTI_REPLAY transaction as:  transactions size + size of a OP_ANTI_REPLAY output in coinbase.\n\nIn the case of an chain split after this BIP has activated, miners should \u2018recycle\u2019 all the OP_ANTI_REPLAY outputs via spending and recreating them in new blocks.  Renewing the protection to the new chain.\n\n\n=== Reference implementation ===\n\nTo-Be-Implemented\n\n==Backwards Compatibility==\n\nThis deployment is compatible with all existing bitcoin software.\n\nUpon activation, all deployed Bitcoin Full Nodes will enforce the anti-replay projections for Bitcoin Users. (Only upgraded nodes will enforce the other OP_ANTI_REPLAY requirements).\n\n==Rationale==\n\nThe only know way of guaranteeing that a transaction cannot be replayed is to include an input that cannot exist, by-definition, on the alternative chain.  Coinbase transactions are the only transaction type that is know to exhibit this property strongly.\n\nThis BIP makes it convenient for wallets to automate the inclusion of new coinbase inputs into transactions that spend potentially repayable transactions.  Everything in this BIP could be done manually by close cooperation between the users and miners, however the author thinks that it is preferable to have it well-defined and enforced.\n\nOn Opt-In-RBF enforcement:  In the case of conflicting spends of OP_ANTI_REPLAY outputs, the higher-fee transaction should take priority.  Wallets may select a random OP_ANTI_REPLAY, then check if the competing transaction has a sufficiently low fee to be replaced.\n\nIt is expected that every OP_ANTI_REPLAY output will be in the memory pools waiting to be spend; users must compete for this resource.\n\n==Future Questions==\n\nSegWit Compatibility?\n\n==References==\n\nOpt-In-RBF:  https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki\n\n==Copyright==\n\nThis document is dual licensed as BSD 3-clause, and Creative Commons CC0 1.0 Universal."
            },
            {
                "author": "Luke Dashjr",
                "date": "2017-03-29T09:15:57",
                "message_text_only": "On Saturday, March 25, 2017 3:30:22 AM Cameron Garnham via bitcoin-dev wrote:\n> ==Definitions==\n\nIt's blank?\n\n> ==Specification==\n> \n> Upon activation of the soft-fork (activation methodology undefined in this\n> proposal), the following new rules become activated on the Bitcoin\n> Network.\n\nThe activation methodology should be defined. It can be a TODO for now.\n\n> New \u2018anti-replay\u2019 OpCode.  Take an unused NoOp and redefine it as\n> \u2018OP_ANTI_REPLAY\u2019.\n\nNeed to be specific about which NOP.\n\n> The script must only have the form:\n> \n> scriptPubKey: (empty)\n> scriptSig: OP_ANTI_REPLAY\n> \n> OP_ANTI_REPLAY has the following specification:\n> \n> \t\u2022 OP_ANTI_REPLAY outputs must only be created in a coinbase transaction.\n\nThis is contradicting. scriptSig is not part of an output. Did you get the two \nscripts inverted?\n\n> \t\u2022 OP_ANTI_REPLAY coinbase outputs must only have the value of 1 Satoshi.\n\nWhy burn a satoshi?\n\n> \t\u2022 Transaction must not included more than 1 OP_ANTI_REPLAY input.\n\ninclude*\n\n> \t\u2022 If a OP_ANTI_REPLAY input is included in a transaction, the transaction\n> must also be marked as Opt-In-RBF (BIP 125).\n\nThis is a layering violation. BIP 125 does not affect the consensus rules.\n\n> In the case of an chain split after this BIP has activated, miners should\n> \u2018recycle\u2019 all the OP_ANTI_REPLAY outputs via spending and recreating them\n> in new blocks.  Renewing the protection to the new chain.\n\n*a* chain split\n\nThis recycling is going to be pretty spammy... especially if transactions are \nlimited to one each.\n\nChain splits also happen regularly (probably at least once or twice every few  \nhundred blocks). Since generated UTXOs cannot be spent for 100 blocks, it is \nlikely anything using this would require constant updating.\n\nIt also requires active awareness from the miner that a split is occurring. \nUsually, this is not known until the block is solved, and it is too late to \nmake these recycling transactions.\n\n> === Reference implementation ===\n> \n> To-Be-Implemented\n\nI don't think it's possible to implement for the reasons mentioned above.\n\n> ==Rationale==\n> \n> The only know way of guaranteeing that a transaction cannot be replayed is\n> to include an input that cannot exist, by-definition, on the alternative\n> chain.\n\nknown*\n\nAnother way is to commit to a specific chain explicitly, as with my proposed \nOP_CHECKBLOCKATHEIGHT.\n\n> This BIP makes it convenient for wallets to automate the inclusion of new\n> coinbase inputs into transactions that spend potentially repayable\n> transactions.  Everything in this BIP could be done manually by close\n> cooperation between the users and miners, however the author thinks that\n> it is preferable to have it well-defined and enforced.\n> \n> On Opt-In-RBF enforcement:  In the case of conflicting spends of\n> OP_ANTI_REPLAY outputs, the higher-fee transaction should take priority. \n> Wallets may select a random OP_ANTI_REPLAY, then check if the competing\n> transaction has a sufficiently low fee to be replaced.\n\nThis isn't convenient. Most wallets have no reasonable way to check if there \nare any competing transactions, much less what the fee for them is.\n\nWhy not just use a single reserved output, and have it recycle as part of the \ntransactions? This can be done so long as the signature doesn't commit to the \nrecycle input. So for each transaction, there would be an input with the last-\nrecycle-txid (tracked by the miner as it builds the block), and an output \ngenerating the next-recycle-txid. Wallets could just indicate this input to be \nused by providing a special hash as the input which is not covered under the \nsignature.\n\n> It is expected that every OP_ANTI_REPLAY output will be in the memory pools\n> waiting to be spend; users must compete for this resource.\n\nUTXO set, not memory pool?\n\nLuke"
            }
        ],
        "thread_summary": {
            "title": "Strong Anti-Replay via Coinbase Transactions",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Luke Dashjr",
                "Cameron Garnham"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 7771
        }
    },
    {
        "title": "[bitcoin-dev] Multi-hash mining with Bitcoin holder voting",
        "thread_messages": [
            {
                "author": "Nathan Cook",
                "date": "2017-03-25T19:41:47",
                "message_text_only": "Further to recent posts to this list concerning mining with more than one\nhash function, Adam Perlow and me have a (longish) proposal/analysis on\ncombining multi-hash with bitcoin stake voting on what the mix of hashes\nshould be. Two novelties are:\n\n* Targeting a ratio of blocks mined under each hash function, in a similar\nway to difficulty targeting.\n* Analysis of voting on this ratio in terms of \"voting on a simplex\", using\nextant research to choose a good method of doing so.\n\nOne point about mining under multiple hashes is that it offers existing\nminers a way back in after a contentious hard fork. Shame to waste all that\nhardware\u2026\n\nRead at\nhttp://topynate.net/wp-content/uploads/2017/03/proportionateresponse.pdf\n(archived at http://www.webcitation.org/6pEZLlZoW)\nNathan Cook\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170325/ae48937d/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Multi-hash mining with Bitcoin holder voting",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Nathan Cook"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 969
        }
    },
    {
        "title": "[bitcoin-dev] Bandwidth limits and LN w/ node relay network topography",
        "thread_messages": [
            {
                "author": "praxeology_guy",
                "date": "2017-03-26T22:11:14",
                "message_text_only": "Bandwidth limits:\nWould be nice to specify global and per node up/down bandwidth limits.\nCommunicate limits to peers.\nMonitor actual bandwidth with peers.\nAdjust connections accordingly to attain bandwidth goals/limits.\n\nWith Lightning Network:\nPrepay for bandwidth/data. Continue paying nodes who continue to send new useful data. Potentially pay different amounts for different kinds of data.\nRequest refunds when a node sends useless/duplicate/invalid/spam data. Discontinue connection w/ nodes that don't refund. Hence LN payment channel network topography becomes somewhat correlated w/ bitcoin node relay network topography.\n\nShould help nodes get better data faster, improve spam/DDoS resiliance. Incentivizes relay of unconfirmed txs and new blocks, when currently there is only a utilitarian marginal self benefit via helping everyone in general.\n\nMaybe relay advertisements of available bandwidth and prices, etc.\n\nTo identify network splits:\nNodes could find hash of \"nonce + pub key + tip blockhash\" beating a difficulty threshold. Sign, broadcast. Prove their existence and connectedness. History can be maintained and monitored for disruption. Could be made part of the messages that advertise available network bandwidth.\n\nCheers,\nPraxeology Guy\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170326/20cc7d35/attachment.html>"
            },
            {
                "author": "Aymeric Vitte",
                "date": "2017-03-27T17:09:20",
                "message_text_only": "What you are describing is described here too:\nhttps://gist.github.com/Ayms/aab6f8e08fef0792ab3448f542a826bf (again, at\nvery draft and somewhere misleading state)\n\nI don't think that the rewards should depend on subsequent chains built\non top of the main one, it should be handled by the main chain\n\nI am not sure to really get your last sentence and why history should\nhave an importance based on some ways for historical valid nodes to\nprove they are still, supposedly defeating the nodes trying to split,\nwho would inherently not behave correctly and therefore be banned by the\nother nodes\n\nAgain, we are not far from switching from decentralized to centralized,\nand I must again mention the Tor network, which indeed selects nodes\naccording to their advertised bandwidth (ie does not select you if you\nadvertise a very low one, which my nodes are doing because their work is\nnot to relay the tor traffic), but not only since the network itself\nmakes some calculations (and then does not select the nodes that are\nlying, but this does not work the other way around), unlike this system\nthe decentralized system should self regulate without being able to\nfingerprint the valid nodes over time\n\n\nLe 27/03/2017 \u00e0 00:11, praxeology_guy via bitcoin-dev a \u00e9crit :\n> Bandwidth limits:\n> Would be nice to specify global and per node up/down bandwidth limits.\n> Communicate limits to peers.\n> Monitor actual bandwidth with peers.\n> Adjust connections accordingly to attain bandwidth goals/limits.\n>\n> With Lightning Network:\n> Prepay for bandwidth/data.  Continue paying nodes who continue to send\n> new useful data.  Potentially pay different amounts for different\n> kinds of data.\n> Request refunds when a node sends useless/duplicate/invalid/spam\n> data.  Discontinue connection w/ nodes that don't refund.  Hence LN\n> payment channel network topography becomes somewhat correlated w/\n> bitcoin node relay network topography.\n>\n> Should help nodes get better data faster, improve spam/DDoS\n> resiliance.  Incentivizes relay of unconfirmed txs and new blocks,\n> when currently there is only a utilitarian marginal self benefit via\n> helping everyone in general.\n>\n> Maybe relay advertisements of available bandwidth and prices, etc.\n>\n> To identify network splits:\n> Nodes could find hash of \"nonce + pub key + tip blockhash\" beating a\n> difficulty threshold.  Sign, broadcast.  Prove their existence and\n> connectedness.  History can be maintained and monitored for\n> disruption.  Could be made part of the messages that advertise\n> available network bandwidth.\n>\n> Cheers,\n> Praxeology Guy\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-- \nZcash wallets made simple: https://github.com/Ayms/zcash-wallets\nBitcoin wallets made simple: https://github.com/Ayms/bitcoin-wallets\nGet the torrent dynamic blocklist: http://peersm.com/getblocklist\nCheck the 10 M passwords list: http://peersm.com/findmyass\nAnti-spies and private torrents, dynamic blocklist: http://torrent-live.org\nPeersm : http://www.peersm.com\ntorrent-live: https://github.com/Ayms/torrent-live\nnode-Tor : https://www.github.com/Ayms/node-Tor\nGitHub : https://www.github.com/Ayms\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170327/afc565c1/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Bandwidth limits and LN w/ node relay network topography",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Aymeric Vitte",
                "praxeology_guy"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 4915
        }
    },
    {
        "title": "[bitcoin-dev] Encouraging good miners",
        "thread_messages": [
            {
                "author": "Btc Ideas",
                "date": "2017-03-27T16:12:19",
                "message_text_only": "Add a preference for mined blocks to be the one with more transactions. This comes into play when 2 blocks of the same height are found. The first good block mined would be orphaned if it had less transactions than another. Optionally, have this rule apply to the current block and the previous one.\n\nThis increases incentive for full blocks because a miner thinking the faster propagation of a smaller block will win him the reward, but that would no longer be a good assumption.\n\nI read some miners could attack a chain by mining small or empty blocks. This makes that a little more difficult, but they can still attack the chain many ways.\n\nSent with [ProtonMail](https://protonmail.com) Secure Email.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170327/4814f43d/attachment.html>"
            },
            {
                "author": "Jameson Lopp",
                "date": "2017-03-27T16:29:05",
                "message_text_only": "Bitcoin chooses the \"best chain\" based upon the one that has the most\ncumulative proof of work behind it. Are you proposing that the cumulative\nproof of work be ignored if two blocks are within a certain threshold of\neach others' work and if so, the number of transactions in the block / the\nsize of the block should be used as a \"tie breaker?\"\n\nI think this idea needs more fleshing out of exactly how it would work,\nwith careful consideration that adding complexity to the best chain logic\ncould introduce exploitable flaws.\n\nOn Mon, Mar 27, 2017 at 12:12 PM, Btc Ideas via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Add a preference for mined blocks to be the one with more transactions.\n> This comes into play when 2 blocks of the same height are found. The first\n> good block mined would be orphaned if it had less transactions than\n> another. Optionally, have this rule apply to the current block and the\n> previous one.\n>\n> This increases incentive for full blocks because a miner thinking the\n> faster propagation of a smaller block will win him the reward, but that\n> would no longer be a good assumption.\n>\n> I read some miners could attack a chain by mining small or empty blocks.\n> This makes that a little more difficult, but they can still attack the\n> chain many ways.\n>\n>\n> Sent with ProtonMail <https://protonmail.com> Secure Email.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170327/70b5a851/attachment.html>"
            },
            {
                "author": "Tom Zander",
                "date": "2017-03-27T17:29:57",
                "message_text_only": "For some time now the relation between block size and propagation speed has \nbeen decoupled. Using xthin/compact blocks miners only send a tiny version \nof a block which then causes the receiving node to re-create it using the \nmemory pool.  Immediately getting double benefits by including pre-verified \ntransactions from the memory pool you avoid the old problem of having to \nvalidate them again when a block was mined.\n\nAs such there is no downside to a miner creating a bigger block, as long as \nall the transactions they include are actually in the mempool.\n\nAs such I'm personally convinced that the problem you are trying to solve \nhas already been solved.\n\nCheers!\n\n\nOn Monday, 27 March 2017 18:12:19 CEST Btc Ideas via bitcoin-dev wrote:\n> Add a preference for mined blocks to be the one with more transactions.\n> This comes into play when 2 blocks of the same height are found. The\n> first good block mined would be orphaned if it had less transactions than\n> another. Optionally, have this rule apply to the current block and the\n> previous one.\n> \n> This increases incentive for full blocks because a miner thinking the\n> faster propagation of a smaller block will win him the reward, but that\n> would no longer be a good assumption.\n\n\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Eric Voskuil",
                "date": "2017-03-27T20:01:41",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 03/27/2017 10:29 AM, Tom Zander via bitcoin-dev wrote:\n> For some time now the relation between block size and propagation\n> speed has been decoupled. Using xthin/compact blocks miners only\n> send a tiny version of a block which then causes the receiving node\n> to re-create it using the memory pool.  Immediately getting double\n> benefits by including pre-verified transactions from the memory\n> pool you avoid the old problem of having to validate them again\n> when a block was mined.\n> \n> As such there is no downside to a miner creating a bigger block, as\n> long as all the transactions they include are actually in the\n> mempool.\n\nAll transactions being publicly available is not something that can be\nassumed.\n\nWith no opportunity cost for a miner to generate withheld\ntransactions, a larger miner still maintains the economic advantage of\nlatency as a function of block size. Fast relay works to reduce\nlatency in relation to the opportunity cost created by the space\nconstraint. IOW, the more fees a miner must give up to mine withheld\ntransactions, the greater the economic disadvantage of doing so. So\nthere is a \"downside\" (i.e. centralization pressure) up to the point\nwhere the advantage gained from withholding transactions turns negative.\n\nThe rational competing miner must presume that a block is valid upon\nconfirming the announcement's PoW. He then has the choice of mining on\ntop of the (partially-visible) block, or ignoring it until it can be\nfully populated. The former *eliminates fee opportunity*, since the\nnext block must remain free of all public fee-generating transactions\nuntil all of the preceding block's transactions are visible. The\nlatter increases orphaning probability, since it implies mining on the\nweak chain, which *increases total reward loss*.\n\nOne can conclude that no matter how much space is created, it will\nalways be filled by a rational miner, as a competitive necessity,\ngiven the centralizing effect of latency. Making blocks big enough to\ninclude low cost transactions nullifies the benefits of fast relay\ntechniques based on your above assumption, since a rational miner will\nsimply substitute withheld transactions.\n\ne\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\n\niQEcBAEBCAAGBQJY2W+bAAoJEDzYwH8LXOFOzkwH+wUulsdvUcfEHMspolfDjTD+\nf4egP1FDoOFgXzaGJ+Bq1AjWP+CDYup9msYhp1NTk6xRnG4uGvaEA3DFYGbAzLut\nINtkpCi38O1QGtDJaxmkJHXLoWJPS6VudcDEoam4W6qSKgHFB+ZRnIN4T7jnGMLI\nrp/cGdom9wE/pcq/fvF/fonGfVWf/YP2YjBzJzaJy+zOYPTH2rNcnYBCHFPs4/KX\n9Gu7tDw9WNxM5idnd0TiidublQhYui6xo7ZbZpmXQePcHQoQO5XqaO6yWwiWRWaU\nmqXhalASOtP6xnPzj6FfAHYS7qA7JCaDfwT8UIzt9xv9XsPrhQ/r6Sfgfhvbm2k=\n=b9sf\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Stian Ellingsen",
                "date": "2017-03-27T17:50:12",
                "message_text_only": "On 27/03/17 18:12, Btc Ideas via bitcoin-dev wrote:\n\n> Add a preference for mined blocks to be the one with more\n> transactions. This comes into play when 2 blocks of the same height\n> are found. The first good block mined would be orphaned if it had\n> less transactions than another. Optionally, have this rule apply to\n> the current block and the previous one.\n\nThis would encourage miners to make their own tiny junk transactions\nto fill up their blocks, perhaps leaving larger, more space-efficient\ntransactions in the mempool.\n\n> This increases incentive for full blocks because a miner thinking\n> the faster propagation of a smaller block will win him the reward,\n> but that would no longer be a good assumption.\n\n> I read some miners could attack a chain by mining small or empty\n> blocks. This makes that a little more difficult, but they can still\n> attack the chain many ways.\n\n\"Good\" miners should probably build upon the block with a set of\ntransactions more similar to what they themselves would include based\non their mempool at the time.  However, miners don't have an incentive\nto do so today.  Instead, they may be better off building upon the\nblock that leaves the most valuable transactions in the mempool,\ne.g. a small or empty block, and maybe leave some valuable\ntransactions in the mempool for the next miner.[1]  This issue could\npossibly be addressed by a soft-fork that requires miners to pay a\nportion of their fees to future miners.\n\n[1]\nhttps://freedom-to-tinker.com/2016/10/21/bitcoin-is-unstable-without-the-block-reward/\n\n-- \nStian"
            },
            {
                "author": "Juan Garavaglia",
                "date": "2017-03-28T14:38:40",
                "message_text_only": "If a miner try to hurt the network mining just empty blocks at some time the rest will start rejecting their blocks and will be orphans so will loss the reward incentive and that miner will join the behavior of the rest of the miners, if that miner has 51% of hashrate there the smallest problem are the empty blocks.\n\n-----Original Message-----\nFrom: bitcoin-dev-bounces at lists.linuxfoundation.org [mailto:bitcoin-dev-bounces at lists.linuxfoundation.org] On Behalf Of Stian Ellingsen via bitcoin-dev\nSent: Monday, March 27, 2017 2:50 PM\nTo: Btc Ideas <btcideas at protonmail.com>; Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\nSubject: Re: [bitcoin-dev] Encouraging good miners\n\nOn 27/03/17 18:12, Btc Ideas via bitcoin-dev wrote:\n\n> Add a preference for mined blocks to be the one with more \n> transactions. This comes into play when 2 blocks of the same height \n> are found. The first good block mined would be orphaned if it had less \n> transactions than another. Optionally, have this rule apply to the \n> current block and the previous one.\n\nThis would encourage miners to make their own tiny junk transactions to fill up their blocks, perhaps leaving larger, more space-efficient transactions in the mempool.\n\n> This increases incentive for full blocks because a miner thinking the \n> faster propagation of a smaller block will win him the reward, but \n> that would no longer be a good assumption.\n\n> I read some miners could attack a chain by mining small or empty \n> blocks. This makes that a little more difficult, but they can still \n> attack the chain many ways.\n\n\"Good\" miners should probably build upon the block with a set of transactions more similar to what they themselves would include based on their mempool at the time.  However, miners don't have an incentive to do so today.  Instead, they may be better off building upon the block that leaves the most valuable transactions in the mempool, e.g. a small or empty block, and maybe leave some valuable transactions in the mempool for the next miner.[1]  This issue could possibly be addressed by a soft-fork that requires miners to pay a portion of their fees to future miners.\n\n[1]\nhttps://freedom-to-tinker.com/2016/10/21/bitcoin-is-unstable-without-the-block-reward/\n\n--\nStian\n\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Antoine Le Calvez",
                "date": "2017-03-27T20:56:49",
                "message_text_only": "I don't think encouraging mining more transactions is a good idea since \nit would promote inefficient transaction patterns. It's more efficient \nto send transactions with a high number of outputs/inputs instead of \ncreating long transaction chains as some services do.\n\nYou might consider incentivizing miners to mine blocks that reduce the \nUTXO set size the most, or some other metric that promotes efficient \nuses of the blockchain.\n\nOn 27/03/17 17:12, Btc Ideas via bitcoin-dev wrote:\n> Add a preference for mined blocks to be the one with more \n> transactions. This comes into play when 2 blocks of the same height \n> are found. The first good block mined would be orphaned if it had less \n> transactions than another. Optionally, have this rule apply to the \n> current block and the previous one.\n>\n> This increases incentive for full blocks because a miner thinking the \n> faster propagation of a smaller block will win him the reward, but \n> that would no longer be a good assumption.\n>\n> I read some miners could attack a chain by mining small or empty \n> blocks. This makes that a little more difficult, but they can still \n> attack the chain many ways.\n>\n>\n> Sent with ProtonMail <https://protonmail.com> Secure Email.\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170327/c52ebffe/attachment.html>"
            },
            {
                "author": "Btc Ideas",
                "date": "2017-03-27T16:29:26",
                "message_text_only": "I know miners can do that, but it is not meant to primarily stop a malicious miner, but just to keep the blocks full. I think it is good to convince greedy miners not to mine empty blocks for a speed advantage.\n\nSent with [ProtonMail](https://protonmail.com) Secure Email.\n\n-------- Original Message --------\nSubject: Re: [bitcoin-dev] Encouraging good miners\nLocal Time: March 28, 2017 12:23 AM\nUTC Time: March 27, 2017 4:23 PM\nFrom: patrick.mccorry at newcastle.ac.uk\nTo: Btc Ideas <btcideas at protonmail.com>, Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\n\nMiner's can include transactions that send themselves bitcoins. Number of transactions is not a good measure of utility.\n\n---------------------------------------------------------------\n\nFrom: bitcoin-dev-bounces at lists.linuxfoundation.org <bitcoin-dev-bounces at lists.linuxfoundation.org> on behalf of Btc Ideas via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nSent: 27 March 2017 17:12:19\nTo: bitcoin-dev at lists.linuxfoundation.org\nSubject: [bitcoin-dev] Encouraging good miners\n\nAdd a preference for mined blocks to be the one with more transactions. This comes into play when 2 blocks of the same height are found. The first good block mined would be orphaned if it had less transactions than another. Optionally, have this rule apply to the current block and the previous one.\n\nThis increases incentive for full blocks because a miner thinking the faster propagation of a smaller block will win him the reward, but that would no longer be a good assumption.\n\nI read some miners could attack a chain by mining small or empty blocks. This makes that a little more difficult, but they can still attack the chain many ways.\n\nSent with [ProtonMail](https://protonmail.com) Secure Email.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170327/d2be8cb9/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Encouraging good miners",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Voskuil",
                "Stian Ellingsen",
                "Antoine Le Calvez",
                "Btc Ideas",
                "Tom Zander",
                "Juan Garavaglia",
                "Jameson Lopp"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 14293
        }
    },
    {
        "title": "[bitcoin-dev] Segregated witness p2p layer compatibility",
        "thread_messages": [
            {
                "author": "Suhas Daftuar",
                "date": "2017-03-27T19:22:43",
                "message_text_only": "Hi,\n\nThere have been two threads recently that have made references to\npeer-to-peer implementation details in Bitcoin Core's Segregated Witness\ncode that I would like to clarify.\n\nIn the thread \"Issolated Bitcoin Nodes\" (\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013765.html),\nthere was some discussion about how Bitcoin Core's block download logic\nbehaves after segwit activation.  After segwit activation, Bitcoin Core\nnodes will not (currently) attempt to download any blocks from non-segwit\npeers (nodes that do not set the NODE WITNESS service bit).  This is a\nbandwidth optimization to prevent a node from downloading a block that may\nbe invalid only because the sender omitted the witness, requiring\nre-download until the block is received with the required witness data.\n\nBut to be clear, non-segwit blocks -- that is, blocks without a witness\ncommitment in the coinbase, and whose transactions are serialized without\nwitnesses, and whose transactions are not spending segwit outputs which\nrequire a witness -- are evaluated under the same rules as prior,\npre-segwit versions of the software.  So such non-segwit blocks that are\nvalid to older, pre-segwit nodes are also valid to segwit-nodes.\n\nIn\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013796.html,\nEric Voskuil wrote:\n\nGiven the protocol requirements of the segwit proposal this is not the\n> case. A miner running pre-segwit code will produce blocks that no\n> segwit node will ever receive.\n\n\nThe phrase \"protocol requirements of segwit\" is confusing here, because\nthere are two different layers that need consideration: the consensus\nprotocol layer and the peer-to-peer protocol layer.  But in neither layer\nis the behavior of not downloading blocks from non-NODE WITNESS peers a\n\"requirement\".  This is an implementation detail in the Bitcoin Core code\nthat alternate implementations compliant with BIP 144 could implement\ndifferently.\n\nAt the consensus layer, non-segwit blocks (described above) that are valid\nto older nodes are also valid to segwit nodes.  That means that if a miner\nwas using an older, pre-segwit version of Bitcoin Core to produce blocks\nafter segwit activates, that blocks they find will be valid to all nodes.\n\nAt the p2p layer, though, segwit-enabled Bitcoin Core nodes will only try\nto download those blocks if announced by a segwit-enabled peer.  But this\nis not a protocol requirement; other implementations can remain compatible\neven they take different approaches here.  (As an example, I could imagine\nan implementation that downloaded a new block from any peer, but if the\nblock has a witness commitment in the coinbase and was received from a\nnon-segwit peer, then the node would attempt re-download from a segwit\npeer.  I'm sure many other reasonable block download strategies could be\ndevised.)\n\nStill, if a miner wants to continue mining post-segwit activation, but\nusing pre-segwit software, they would need a way to relay their blocks to a\nsegwit-enabled peer.\n\nThere are a few ways to do this that I can think of:\n\n- Use the RPC call \"submitblock\" on a segwit-enabled node.  Calling\n\"submitblock\" on a Bitcoin Core 0.13.1 (0.13.0 in the case of testnet) or\nlater node works fine as long as the block is valid (whether or not it has\na witness commitment or witness transactions), and once a segwit-enabled\npeer has the block it will relay to other segwit peers.\n\n- Explicitly deliver the block to a segwit node over the p2p network, even\nif unrequested.  Currently Bitcoin Core at least will process unrequested\nblocks, and valid blocks that update the tip will then be relayed to other\npeers.\n\n- Run a bridge node, which advertises NODE_WITNESS and can serialize blocks\nwith witness data, which downloads blocks even from non-NODE WITNESS\npeers.  Anyone can do this to bridge the networks for the benefit of the\nwhole network (I have personally been running a few nodes that do this, for\nseveral months now), but miners concerned about this issue for their own\nblocks could explicitly do this themselves to ensure that their own blocks\npropagate to the segwit-enabled network.\n\n- Peer directly with other miners, bypassing the p2p network.  Many miners\ndo this already, using protocols which may already serve to bridge the\nnetwork.\n\nSo saying that \"A miner running pre-segwit code will produce blocks that no\nsegwit node will ever receive\" is not really correct, in my view.  If the\nwhole network were just running Bitcoin Core software releases, and the\nminer was not able/willing to deliver their block to a segwit-enabled node\n(eg by using the RPC call \"submitblock\", or one of the other suggestions I\nhad above), then I would agree with the statement.  But given that there\nare bridge nodes on the network, and that miners have other options to\nrelay their block, I think this is not an accurate portrayal of what would\nactually happen on the network -- I would expect that non-segwit miners'\nblocks would still get relayed post-segwit activation, even if only by the\nhandful of bridge nodes that I expect are currently running.\n\nAll that said, I do think this is an important detail to highlight and that\nthis behavior should be better documented (I believe it deserves specific\nmention in a BIP), as this is an important issue for miners to be aware of.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170327/564a835d/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2017-03-27T19:32:30",
                "message_text_only": "Just to expand a tiny bit here, while the testnet setup of only a few nodes acting as \"bridges\", mainnet already has many systems which act as effective bridges today - there are several relay networks in use which effectively bypass the P2P network, including my legacy relay network (which many miners historically have used, and I'd expect those who aren't paying attention and don't upgrade will not turn off, fixing the issue for them), ViaBTC's super aggressive bandwidth-wasting block announcement network which pushes blocks from several pools to many nodes globally, and Bitcoin.com's private relay network. (Of course many other miners and pools have private relay networks, but the several other such networks I'm aware of are already segwit-compatible, even for pools not signaling segwit).\n\nMatt\n\nOn March 27, 2017 12:22:43 PM PDT, Suhas Daftuar via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>Hi,\n>\n>There have been two threads recently that have made references to\n>peer-to-peer implementation details in Bitcoin Core's Segregated\n>Witness\n>code that I would like to clarify.\n>\n>In the thread \"Issolated Bitcoin Nodes\" (\n>https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013765.html),\n>there was some discussion about how Bitcoin Core's block download logic\n>behaves after segwit activation.  After segwit activation, Bitcoin Core\n>nodes will not (currently) attempt to download any blocks from\n>non-segwit\n>peers (nodes that do not set the NODE WITNESS service bit).  This is a\n>bandwidth optimization to prevent a node from downloading a block that\n>may\n>be invalid only because the sender omitted the witness, requiring\n>re-download until the block is received with the required witness data.\n>\n>But to be clear, non-segwit blocks -- that is, blocks without a witness\n>commitment in the coinbase, and whose transactions are serialized\n>without\n>witnesses, and whose transactions are not spending segwit outputs which\n>require a witness -- are evaluated under the same rules as prior,\n>pre-segwit versions of the software.  So such non-segwit blocks that\n>are\n>valid to older, pre-segwit nodes are also valid to segwit-nodes.\n>\n>In\n>https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013796.html,\n>Eric Voskuil wrote:\n>\n>Given the protocol requirements of the segwit proposal this is not the\n>> case. A miner running pre-segwit code will produce blocks that no\n>> segwit node will ever receive.\n>\n>\n>The phrase \"protocol requirements of segwit\" is confusing here, because\n>there are two different layers that need consideration: the consensus\n>protocol layer and the peer-to-peer protocol layer.  But in neither\n>layer\n>is the behavior of not downloading blocks from non-NODE WITNESS peers a\n>\"requirement\".  This is an implementation detail in the Bitcoin Core\n>code\n>that alternate implementations compliant with BIP 144 could implement\n>differently.\n>\n>At the consensus layer, non-segwit blocks (described above) that are\n>valid\n>to older nodes are also valid to segwit nodes.  That means that if a\n>miner\n>was using an older, pre-segwit version of Bitcoin Core to produce\n>blocks\n>after segwit activates, that blocks they find will be valid to all\n>nodes.\n>\n>At the p2p layer, though, segwit-enabled Bitcoin Core nodes will only\n>try\n>to download those blocks if announced by a segwit-enabled peer.  But\n>this\n>is not a protocol requirement; other implementations can remain\n>compatible\n>even they take different approaches here.  (As an example, I could\n>imagine\n>an implementation that downloaded a new block from any peer, but if the\n>block has a witness commitment in the coinbase and was received from a\n>non-segwit peer, then the node would attempt re-download from a segwit\n>peer.  I'm sure many other reasonable block download strategies could\n>be\n>devised.)\n>\n>Still, if a miner wants to continue mining post-segwit activation, but\n>using pre-segwit software, they would need a way to relay their blocks\n>to a\n>segwit-enabled peer.\n>\n>There are a few ways to do this that I can think of:\n>\n>- Use the RPC call \"submitblock\" on a segwit-enabled node.  Calling\n>\"submitblock\" on a Bitcoin Core 0.13.1 (0.13.0 in the case of testnet)\n>or\n>later node works fine as long as the block is valid (whether or not it\n>has\n>a witness commitment or witness transactions), and once a\n>segwit-enabled\n>peer has the block it will relay to other segwit peers.\n>\n>- Explicitly deliver the block to a segwit node over the p2p network,\n>even\n>if unrequested.  Currently Bitcoin Core at least will process\n>unrequested\n>blocks, and valid blocks that update the tip will then be relayed to\n>other\n>peers.\n>\n>- Run a bridge node, which advertises NODE_WITNESS and can serialize\n>blocks\n>with witness data, which downloads blocks even from non-NODE WITNESS\n>peers.  Anyone can do this to bridge the networks for the benefit of\n>the\n>whole network (I have personally been running a few nodes that do this,\n>for\n>several months now), but miners concerned about this issue for their\n>own\n>blocks could explicitly do this themselves to ensure that their own\n>blocks\n>propagate to the segwit-enabled network.\n>\n>- Peer directly with other miners, bypassing the p2p network.  Many\n>miners\n>do this already, using protocols which may already serve to bridge the\n>network.\n>\n>So saying that \"A miner running pre-segwit code will produce blocks\n>that no\n>segwit node will ever receive\" is not really correct, in my view.  If\n>the\n>whole network were just running Bitcoin Core software releases, and the\n>miner was not able/willing to deliver their block to a segwit-enabled\n>node\n>(eg by using the RPC call \"submitblock\", or one of the other\n>suggestions I\n>had above), then I would agree with the statement.  But given that\n>there\n>are bridge nodes on the network, and that miners have other options to\n>relay their block, I think this is not an accurate portrayal of what\n>would\n>actually happen on the network -- I would expect that non-segwit\n>miners'\n>blocks would still get relayed post-segwit activation, even if only by\n>the\n>handful of bridge nodes that I expect are currently running.\n>\n>All that said, I do think this is an important detail to highlight and\n>that\n>this behavior should be better documented (I believe it deserves\n>specific\n>mention in a BIP), as this is an important issue for miners to be aware\n>of.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170327/79513d01/attachment-0001.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2017-03-27T21:03:08",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 03/27/2017 12:22 PM, Suhas Daftuar via bitcoin-dev wrote:\n> Eric Voskuil wrote:\n> \n>> Given the protocol requirements of the segwit proposal this is \n>> not the case. A miner running pre-segwit code will produce\n>> blocks that no segwit node will ever receive.\n> \n> The phrase \"protocol requirements of segwit\" is confusing here, \n> because there are two different layers that need consideration:\n> the consensus protocol layer and the peer-to-peer protocol layer.\n> But in neither layer is the behavior of not downloading blocks\n> from non-NODE WITNESS peers a \"requirement\".  This is an\n> implementation detail in the Bitcoin Core code that alternate\n> implementations compliant with BIP 144 could implement\n> differently.\n\nI agree, and thanks for the detailed clarification. Clearly it is\npossible for segwit blocks to be relayed. It is the implementation of\nBitcoin Core (at least), in the absence of sufficient relay, that\nproduces this outcome.\n\n> This is an implementation detail in the Bitcoin Core code that \n> alternate implementations compliant with BIP 144 could implement \n> differently.\n> \n> At the consensus layer, non-segwit blocks (described above) that \n> are valid to older nodes are also valid to segwit nodes.  That \n> means that if a miner was using an older, pre-segwit version of \n> Bitcoin Core to produce blocks after segwit activates, that blocks \n> they find will be valid to all nodes.\n\nIOW Bitcoin Core has been implemented so that it will not see valid\nblocks announced by certain of its peers. Forcing it to see such\nblocks requires the p2p network work around its implementation. I\nagree that this is not inherent in the specifications for segwit, but\nit reads more like a bug than an \"implementation detail\" to me.\n\ne\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\n\niQEcBAEBCAAGBQJY2X3/AAoJEDzYwH8LXOFOez8H+wcmUkQnzqMlmBTQ/OqMO6q4\nenLOX3H4UDa6gZdUxEDpszUvuca2ayukVYwIVo28BcjsTmQgxaxdrFTNTDYTRfe1\nS2aX3Ftism0zuEIw8/KM2wcnNaHe9C5Q8TRmW7u6ZoLTJFwCkKWK1VEM9GFDePpT\n+HjtdviKt3s6NwiYhG+U+JawF+YDJvxyxcEj28bMFB1EW1kIAPA709oz2scZCPrc\nVroEUoFXFgMXBJaosKSVTUN3JE9pU9R1Mn7xVWwMEdU1IjeOeygHjdE/NfP7BJuU\n05dWsH0be/xyNO76oFGhmwIyDogloQ9a5klEe7NetTDs1ieMD5j5oyr/qB79spw=\n=xkiV\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Segregated witness p2p layer compatibility",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Suhas Daftuar",
                "Eric Voskuil",
                "Matt Corallo"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 14358
        }
    },
    {
        "title": "[bitcoin-dev] Hard fork proposal from last week's meeting",
        "thread_messages": [
            {
                "author": "Wang Chun",
                "date": "2017-03-28T16:59:32",
                "message_text_only": "I've proposed this hard fork approach last year in Hong Kong Consensus\nbut immediately rejected by coredevs at that meeting, after more than\none year it seems that lots of people haven't heard of it. So I would\npost this here again for comment.\n\nThe basic idea is, as many of us agree, hard fork is risky and should\nbe well prepared. We need a long time to deploy it.\n\nDespite spam tx on the network, the block capacity is approaching its\nlimit, and we must think ahead. Shall we code a patch right now, to\nremove the block size limit of 1MB, but not activate it until far in\nthe future. I would propose to remove the 1MB limit at the next block\nhalving in spring 2020, only limit the block size to 32MiB which is\nthe maximum size the current p2p protocol allows. This patch must be\nin the immediate next release of Bitcoin Core.\n\nWith this patch in core's next release, Bitcoin works just as before,\nno fork will ever occur, until spring 2020. But everyone knows there\nwill be a fork scheduled. Third party services, libraries, wallets and\nexchanges will have enough time to prepare for it over the next three\nyears.\n\nWe don't yet have an agreement on how to increase the block size\nlimit. There have been many proposals over the past years, like\nBIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248, BU, and so\non. These hard fork proposals, with this patch already in Core's\nrelease, they all become soft fork. We'll have enough time to discuss\nall these proposals and decide which one to go. Take an example, if we\nchoose to fork to only 2MB, since 32MiB already scheduled, reduce it\nfrom 32MiB to 2MB will be a soft fork.\n\nAnyway, we must code something right now, before it becomes too late."
            },
            {
                "author": "Matt Corallo",
                "date": "2017-03-28T17:13:09",
                "message_text_only": "Not sure what \"last week's meeting\" is in reference to?\n\nAgreed that the hard fork should be well-prepared, but I think its\ndangerous to think that a hard fork as agreed upon would be a simple\nrelaxation of the block size. For example, Johnson Lau's previous\nproposal, Spoonnet, which I think is probably one of the better ones,\nwould be incompatible with these rules.\n\nI, of course, worry about what happens if we cannot come to consensus on\na number to soft fork down to, potentially significantly risking miner\nprofits (and, thus, the security of Bitcoin) if a group is able to keep\nthings \"at the status quo\". That said, for that to be alleviated we\ncould simply do something based on historical transaction growth (which\nis somewhat linear, with a few inflection points), but that number ends\nup being super low (eg somewhere around 2MB at the next halving, which\nSegWit itself already provides :/.\n\nWe could, of course, focus on designing a hard fork's activation and\ntechnical details, with a very large block size increase in it (ie\ncloser to 4/6MB at the next halving or so, something we at least could\nbe confident we could develop software for), with intention to soft fork\nit back down if miner profits are suffering.\n\nMatt\n\nOn 03/28/17 16:59, Wang Chun via bitcoin-dev wrote:\n> I've proposed this hard fork approach last year in Hong Kong Consensus\n> but immediately rejected by coredevs at that meeting, after more than\n> one year it seems that lots of people haven't heard of it. So I would\n> post this here again for comment.\n> \n> The basic idea is, as many of us agree, hard fork is risky and should\n> be well prepared. We need a long time to deploy it.\n> \n> Despite spam tx on the network, the block capacity is approaching its\n> limit, and we must think ahead. Shall we code a patch right now, to\n> remove the block size limit of 1MB, but not activate it until far in\n> the future. I would propose to remove the 1MB limit at the next block\n> halving in spring 2020, only limit the block size to 32MiB which is\n> the maximum size the current p2p protocol allows. This patch must be\n> in the immediate next release of Bitcoin Core.\n> \n> With this patch in core's next release, Bitcoin works just as before,\n> no fork will ever occur, until spring 2020. But everyone knows there\n> will be a fork scheduled. Third party services, libraries, wallets and\n> exchanges will have enough time to prepare for it over the next three\n> years.\n> \n> We don't yet have an agreement on how to increase the block size\n> limit. There have been many proposals over the past years, like\n> BIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248, BU, and so\n> on. These hard fork proposals, with this patch already in Core's\n> release, they all become soft fork. We'll have enough time to discuss\n> all these proposals and decide which one to go. Take an example, if we\n> choose to fork to only 2MB, since 32MiB already scheduled, reduce it\n> from 32MiB to 2MB will be a soft fork.\n> \n> Anyway, we must code something right now, before it becomes too late.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-03-29T08:45:14",
                "message_text_only": "> That said, for that to be alleviated we\ncould simply do something based on historical transaction growth (which\nis somewhat linear, with a few inflection points),\n\nWhere do you get this?  Transaction growth for the last 4 years averages to\n+65% per year and the last 2 is +80% per year.  That's very much not linear.\n\n\n\nOn Tue, Mar 28, 2017 at 10:13 AM, Matt Corallo via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Not sure what \"last week's meeting\" is in reference to?\n>\n> Agreed that the hard fork should be well-prepared, but I think its\n> dangerous to think that a hard fork as agreed upon would be a simple\n> relaxation of the block size. For example, Johnson Lau's previous\n> proposal, Spoonnet, which I think is probably one of the better ones,\n> would be incompatible with these rules.\n>\n> I, of course, worry about what happens if we cannot come to consensus on\n> a number to soft fork down to, potentially significantly risking miner\n> profits (and, thus, the security of Bitcoin) if a group is able to keep\n> things \"at the status quo\". That said, for that to be alleviated we\n> could simply do something based on historical transaction growth (which\n> is somewhat linear, with a few inflection points), but that number ends\n> up being super low (eg somewhere around 2MB at the next halving, which\n> SegWit itself already provides :/.\n>\n> We could, of course, focus on designing a hard fork's activation and\n> technical details, with a very large block size increase in it (ie\n> closer to 4/6MB at the next halving or so, something we at least could\n> be confident we could develop software for), with intention to soft fork\n> it back down if miner profits are suffering.\n>\n> Matt\n>\n> On 03/28/17 16:59, Wang Chun via bitcoin-dev wrote:\n> > I've proposed this hard fork approach last year in Hong Kong Consensus\n> > but immediately rejected by coredevs at that meeting, after more than\n> > one year it seems that lots of people haven't heard of it. So I would\n> > post this here again for comment.\n> >\n> > The basic idea is, as many of us agree, hard fork is risky and should\n> > be well prepared. We need a long time to deploy it.\n> >\n> > Despite spam tx on the network, the block capacity is approaching its\n> > limit, and we must think ahead. Shall we code a patch right now, to\n> > remove the block size limit of 1MB, but not activate it until far in\n> > the future. I would propose to remove the 1MB limit at the next block\n> > halving in spring 2020, only limit the block size to 32MiB which is\n> > the maximum size the current p2p protocol allows. This patch must be\n> > in the immediate next release of Bitcoin Core.\n> >\n> > With this patch in core's next release, Bitcoin works just as before,\n> > no fork will ever occur, until spring 2020. But everyone knows there\n> > will be a fork scheduled. Third party services, libraries, wallets and\n> > exchanges will have enough time to prepare for it over the next three\n> > years.\n> >\n> > We don't yet have an agreement on how to increase the block size\n> > limit. There have been many proposals over the past years, like\n> > BIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248, BU, and so\n> > on. These hard fork proposals, with this patch already in Core's\n> > release, they all become soft fork. We'll have enough time to discuss\n> > all these proposals and decide which one to go. Take an example, if we\n> > choose to fork to only 2MB, since 32MiB already scheduled, reduce it\n> > from 32MiB to 2MB will be a soft fork.\n> >\n> > Anyway, we must code something right now, before it becomes too late.\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/5cb7adbe/attachment-0001.html>"
            },
            {
                "author": "Alphonse Pace",
                "date": "2017-03-28T17:23:31",
                "message_text_only": "What meeting are you referring to?  Who were the participants?\n\nRemoving the limit but relying on the p2p protocol is not really a true\n32MiB limit, but a limit of whatever transport methods provide.  This can\nlead to differing consensus if alternative layers for relaying are used.\nWhat you seem to be asking for is an unbound block size (or at least\ndetermined by whatever miners produce).  This has the possibility (and even\nlikelihood) of removing many participants from the network, including many\nsmall miners.\n\n32MB in less than 3 years also appears to be far beyond limits of safety\nwhich are known to exist far sooner, and we cannot expect hardware and\nnetworking layers to improve by those amounts in that time.\n\nIt also seems like it would be much better to wait until SegWit activates\nin order to truly measure the effects on the network from this increased\ncapacity before committing to any additional increases.\n\n-Alphonse\n\n\n\nOn Tue, Mar 28, 2017 at 11:59 AM, Wang Chun via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I've proposed this hard fork approach last year in Hong Kong Consensus\n> but immediately rejected by coredevs at that meeting, after more than\n> one year it seems that lots of people haven't heard of it. So I would\n> post this here again for comment.\n>\n> The basic idea is, as many of us agree, hard fork is risky and should\n> be well prepared. We need a long time to deploy it.\n>\n> Despite spam tx on the network, the block capacity is approaching its\n> limit, and we must think ahead. Shall we code a patch right now, to\n> remove the block size limit of 1MB, but not activate it until far in\n> the future. I would propose to remove the 1MB limit at the next block\n> halving in spring 2020, only limit the block size to 32MiB which is\n> the maximum size the current p2p protocol allows. This patch must be\n> in the immediate next release of Bitcoin Core.\n>\n> With this patch in core's next release, Bitcoin works just as before,\n> no fork will ever occur, until spring 2020. But everyone knows there\n> will be a fork scheduled. Third party services, libraries, wallets and\n> exchanges will have enough time to prepare for it over the next three\n> years.\n>\n> We don't yet have an agreement on how to increase the block size\n> limit. There have been many proposals over the past years, like\n> BIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248, BU, and so\n> on. These hard fork proposals, with this patch already in Core's\n> release, they all become soft fork. We'll have enough time to discuss\n> all these proposals and decide which one to go. Take an example, if we\n> choose to fork to only 2MB, since 32MiB already scheduled, reduce it\n> from 32MiB to 2MB will be a soft fork.\n>\n> Anyway, we must code something right now, before it becomes too late.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170328/ce012e4a/attachment.html>"
            },
            {
                "author": "Wang Chun",
                "date": "2017-03-28T17:31:36",
                "message_text_only": "The basic idea is, let's stop the debate for whether we should upgrade\nto 2MB, 8MB or 32MiB. 32MiB is well above any proposals' upper limit,\nso any final decision would be a soft fork to this already deployed\nrelease. If by 2020, we still agree 1MB is enough, it can be changed\nback to 1MB limit and it would also a soft fork on top of that.\n\nOn Wed, Mar 29, 2017 at 1:23 AM, Alphonse Pace <alp.bitcoin at gmail.com> wrote:\n> What meeting are you referring to?  Who were the participants?\n>\n> Removing the limit but relying on the p2p protocol is not really a true\n> 32MiB limit, but a limit of whatever transport methods provide.  This can\n> lead to differing consensus if alternative layers for relaying are used.\n> What you seem to be asking for is an unbound block size (or at least\n> determined by whatever miners produce).  This has the possibility (and even\n> likelihood) of removing many participants from the network, including many\n> small miners.\n>\n> 32MB in less than 3 years also appears to be far beyond limits of safety\n> which are known to exist far sooner, and we cannot expect hardware and\n> networking layers to improve by those amounts in that time.\n>\n> It also seems like it would be much better to wait until SegWit activates in\n> order to truly measure the effects on the network from this increased\n> capacity before committing to any additional increases.\n>\n> -Alphonse\n>\n>\n>\n> On Tue, Mar 28, 2017 at 11:59 AM, Wang Chun via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> I've proposed this hard fork approach last year in Hong Kong Consensus\n>> but immediately rejected by coredevs at that meeting, after more than\n>> one year it seems that lots of people haven't heard of it. So I would\n>> post this here again for comment.\n>>\n>> The basic idea is, as many of us agree, hard fork is risky and should\n>> be well prepared. We need a long time to deploy it.\n>>\n>> Despite spam tx on the network, the block capacity is approaching its\n>> limit, and we must think ahead. Shall we code a patch right now, to\n>> remove the block size limit of 1MB, but not activate it until far in\n>> the future. I would propose to remove the 1MB limit at the next block\n>> halving in spring 2020, only limit the block size to 32MiB which is\n>> the maximum size the current p2p protocol allows. This patch must be\n>> in the immediate next release of Bitcoin Core.\n>>\n>> With this patch in core's next release, Bitcoin works just as before,\n>> no fork will ever occur, until spring 2020. But everyone knows there\n>> will be a fork scheduled. Third party services, libraries, wallets and\n>> exchanges will have enough time to prepare for it over the next three\n>> years.\n>>\n>> We don't yet have an agreement on how to increase the block size\n>> limit. There have been many proposals over the past years, like\n>> BIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248, BU, and so\n>> on. These hard fork proposals, with this patch already in Core's\n>> release, they all become soft fork. We'll have enough time to discuss\n>> all these proposals and decide which one to go. Take an example, if we\n>> choose to fork to only 2MB, since 32MiB already scheduled, reduce it\n>> from 32MiB to 2MB will be a soft fork.\n>>\n>> Anyway, we must code something right now, before it becomes too late.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>"
            },
            {
                "author": "Jeremy",
                "date": "2017-03-28T17:33:31",
                "message_text_only": "I think it's probably safer to have a fork-to-minumum (e.g. minimal\ncoinbase+header) after a certain date than to fork up at a certain date. At\nleast in that case, the default isn't breaking consensus, but you still get\nthe same pressure to fork to a permanent solution.\n\nI don't endorse the above proposal, but remarked for the sake of guiding\nthe argument you are making.\n\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n\nOn Tue, Mar 28, 2017 at 1:31 PM, Wang Chun via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> The basic idea is, let's stop the debate for whether we should upgrade\n> to 2MB, 8MB or 32MiB. 32MiB is well above any proposals' upper limit,\n> so any final decision would be a soft fork to this already deployed\n> release. If by 2020, we still agree 1MB is enough, it can be changed\n> back to 1MB limit and it would also a soft fork on top of that.\n>\n> On Wed, Mar 29, 2017 at 1:23 AM, Alphonse Pace <alp.bitcoin at gmail.com>\n> wrote:\n> > What meeting are you referring to?  Who were the participants?\n> >\n> > Removing the limit but relying on the p2p protocol is not really a true\n> > 32MiB limit, but a limit of whatever transport methods provide.  This can\n> > lead to differing consensus if alternative layers for relaying are used.\n> > What you seem to be asking for is an unbound block size (or at least\n> > determined by whatever miners produce).  This has the possibility (and\n> even\n> > likelihood) of removing many participants from the network, including\n> many\n> > small miners.\n> >\n> > 32MB in less than 3 years also appears to be far beyond limits of safety\n> > which are known to exist far sooner, and we cannot expect hardware and\n> > networking layers to improve by those amounts in that time.\n> >\n> > It also seems like it would be much better to wait until SegWit\n> activates in\n> > order to truly measure the effects on the network from this increased\n> > capacity before committing to any additional increases.\n> >\n> > -Alphonse\n> >\n> >\n> >\n> > On Tue, Mar 28, 2017 at 11:59 AM, Wang Chun via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >> I've proposed this hard fork approach last year in Hong Kong Consensus\n> >> but immediately rejected by coredevs at that meeting, after more than\n> >> one year it seems that lots of people haven't heard of it. So I would\n> >> post this here again for comment.\n> >>\n> >> The basic idea is, as many of us agree, hard fork is risky and should\n> >> be well prepared. We need a long time to deploy it.\n> >>\n> >> Despite spam tx on the network, the block capacity is approaching its\n> >> limit, and we must think ahead. Shall we code a patch right now, to\n> >> remove the block size limit of 1MB, but not activate it until far in\n> >> the future. I would propose to remove the 1MB limit at the next block\n> >> halving in spring 2020, only limit the block size to 32MiB which is\n> >> the maximum size the current p2p protocol allows. This patch must be\n> >> in the immediate next release of Bitcoin Core.\n> >>\n> >> With this patch in core's next release, Bitcoin works just as before,\n> >> no fork will ever occur, until spring 2020. But everyone knows there\n> >> will be a fork scheduled. Third party services, libraries, wallets and\n> >> exchanges will have enough time to prepare for it over the next three\n> >> years.\n> >>\n> >> We don't yet have an agreement on how to increase the block size\n> >> limit. There have been many proposals over the past years, like\n> >> BIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248, BU, and so\n> >> on. These hard fork proposals, with this patch already in Core's\n> >> release, they all become soft fork. We'll have enough time to discuss\n> >> all these proposals and decide which one to go. Take an example, if we\n> >> choose to fork to only 2MB, since 32MiB already scheduled, reduce it\n> >> from 32MiB to 2MB will be a soft fork.\n> >>\n> >> Anyway, we must code something right now, before it becomes too late.\n> >> _______________________________________________\n> >> bitcoin-dev mailing list\n> >> bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170328/5fb3c287/attachment.html>"
            },
            {
                "author": "Douglas Roark",
                "date": "2017-03-28T17:50:42",
                "message_text_only": "On 2017/3/28 10:31, Wang Chun via bitcoin-dev wrote:\n> The basic idea is, let's stop the debate for whether we should upgrade\n> to 2MB, 8MB or 32MiB. 32MiB is well above any proposals' upper limit,\n> so any final decision would be a soft fork to this already deployed\n> release. If by 2020, we still agree 1MB is enough, it can be changed\n> back to 1MB limit and it would also a soft fork on top of that.\n\nWhile I think this idea isn't bad in and of itself, there is an\nassumption being made that the community would come to consensus\nregarding a future soft fork. This, IMO, is a dangerous assumption.\nFailure would potentially leave the network at a hard fork well past any\ncurrent proposal. It would also potentially lead to miners becoming\nhostile players and making political demands. (\"Soft fork down to X MB\nor I'll shut down 15% of the network hashrate and work to shut down more\nelsewhere.\") I'd hope we can all agree that such a scenario would be\nterrible.\n\nI do agree that the idea of giving everybody plenty of time to plan is\ncritical. (Telecom providers need months, if not years, to plan for even\nsimple upgrades, which often are not as simple as they look on paper.) I\njust think this proposal, while well-meaning, comes across as a bit of a\ntrojan horse as-is. I can't get behind it, although it could potentially\nbe molded into something else that's interesting, e.g., Johnson Lau's\nSpoonnet. Fork-to-minimum, while introducing its own potential problems,\nwould put much less pressure on full nodes, and on the ecosphere as a\nwhole if the max needed to be soft forked down.\n\n(I'd also like to see SegWit go live so that we can get an idea of how\nmuch pressure there really is on the network, thereby giving us a better\nidea of how high we can go. I still think we're flying a bit blind in\nthat regard.)\n\n-- \n---\nDouglas Roark\nCryptocurrency, network security, travel, and art.\nhttps://onename.com/droark\njoroark at vt.edu\nPGP key ID: 26623924\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170328/3355f573/attachment.sig>"
            },
            {
                "author": "Juan Garavaglia",
                "date": "2017-03-28T17:33:22",
                "message_text_only": "Alphonse,\n\nIn my opinion if 1MB limit was ok in 2010, 8MB limit is ok on 2016 and 32MB limit valid in next halving, from network, storage and CPU perspective or 1MB was too high in 2010 what is possible or 1MB is to low today.\n\nIf is unsafe or impossible to raise the blocksize is a different topic.\n\nRegards\n\nJuan\n\n\nFrom: bitcoin-dev-bounces at lists.linuxfoundation.org [mailto:bitcoin-dev-bounces at lists.linuxfoundation.org] On Behalf Of Alphonse Pace via bitcoin-dev\nSent: Tuesday, March 28, 2017 2:24 PM\nTo: Wang Chun <1240902 at gmail.com>; Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\nSubject: Re: [bitcoin-dev] Hard fork proposal from last week's meeting\n\nWhat meeting are you referring to?  Who were the participants?\n\nRemoving the limit but relying on the p2p protocol is not really a true 32MiB limit, but a limit of whatever transport methods provide.  This can lead to differing consensus if alternative layers for relaying are used.  What you seem to be asking for is an unbound block size (or at least determined by whatever miners produce).  This has the possibility (and even likelihood) of removing many participants from the network, including many small miners.\n\n32MB in less than 3 years also appears to be far beyond limits of safety which are known to exist far sooner, and we cannot expect hardware and networking layers to improve by those amounts in that time.\n\nIt also seems like it would be much better to wait until SegWit activates in order to truly measure the effects on the network from this increased capacity before committing to any additional increases.\n\n-Alphonse\n\n\n\nOn Tue, Mar 28, 2017 at 11:59 AM, Wang Chun via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\nI've proposed this hard fork approach last year in Hong Kong Consensus\nbut immediately rejected by coredevs at that meeting, after more than\none year it seems that lots of people haven't heard of it. So I would\npost this here again for comment.\n\nThe basic idea is, as many of us agree, hard fork is risky and should\nbe well prepared. We need a long time to deploy it.\n\nDespite spam tx on the network, the block capacity is approaching its\nlimit, and we must think ahead. Shall we code a patch right now, to\nremove the block size limit of 1MB, but not activate it until far in\nthe future. I would propose to remove the 1MB limit at the next block\nhalving in spring 2020, only limit the block size to 32MiB which is\nthe maximum size the current p2p protocol allows. This patch must be\nin the immediate next release of Bitcoin Core.\n\nWith this patch in core's next release, Bitcoin works just as before,\nno fork will ever occur, until spring 2020. But everyone knows there\nwill be a fork scheduled. Third party services, libraries, wallets and\nexchanges will have enough time to prepare for it over the next three\nyears.\n\nWe don't yet have an agreement on how to increase the block size\nlimit. There have been many proposals over the past years, like\nBIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248, BU, and so\non. These hard fork proposals, with this patch already in Core's\nrelease, they all become soft fork. We'll have enough time to discuss\nall these proposals and decide which one to go. Take an example, if we\nchoose to fork to only 2MB, since 32MiB already scheduled, reduce it\nfrom 32MiB to 2MB will be a soft fork.\n\nAnyway, we must code something right now, before it becomes too late.\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170328/7364d9da/attachment-0001.html>"
            },
            {
                "author": "Johnson Lau",
                "date": "2017-03-28T17:34:23",
                "message_text_only": "You are probably not the first one nor last one with such idea. Actually, Luke wrote up a BIP with similar idea in mind:\n\nhttps://github.com/luke-jr/bips/blob/bip-hfprep/bip-hfprep.mediawiki <https://github.com/luke-jr/bips/blob/bip-hfprep/bip-hfprep.mediawiki>\n\nInstead of just lifting the block size limit, he also suggested to remove many other rules. I think he has given up this idea because it\u2019s just too complicated.\n\nIf we really want to prepare for a hardfork, we probably want to do more than simply increasing the size limit. For example, my spoonnet proposal:\n\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-February/013542.html <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-February/013542.html>\n\nIn a HF, we may want to relocate the witness commitment to a better place. We may also want to fix Satoshi's sighash bug. These are much more than simple size increase.\n\nSo if we really want to get prepared for a potential HF with unknown parameters, I\u2019d suggest to set a time bomb in the client, which will stop processing of transactions with big warning in GUI. The user may still have an option to continue with old rules at their own risks.\n\nOr, instead of increasing the block size, we make a softfork to decrease the block size to 1kB and block reward to 0, activating far in the future. This is similar to the difficulty bomb in ETH, which will freeze the network.\n\n> On 29 Mar 2017, at 00:59, Wang Chun via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> I've proposed this hard fork approach last year in Hong Kong Consensus\n> but immediately rejected by coredevs at that meeting, after more than\n> one year it seems that lots of people haven't heard of it. So I would\n> post this here again for comment.\n> \n> The basic idea is, as many of us agree, hard fork is risky and should\n> be well prepared. We need a long time to deploy it.\n> \n> Despite spam tx on the network, the block capacity is approaching its\n> limit, and we must think ahead. Shall we code a patch right now, to\n> remove the block size limit of 1MB, but not activate it until far in\n> the future. I would propose to remove the 1MB limit at the next block\n> halving in spring 2020, only limit the block size to 32MiB which is\n> the maximum size the current p2p protocol allows. This patch must be\n> in the immediate next release of Bitcoin Core.\n> \n> With this patch in core's next release, Bitcoin works just as before,\n> no fork will ever occur, until spring 2020. But everyone knows there\n> will be a fork scheduled. Third party services, libraries, wallets and\n> exchanges will have enough time to prepare for it over the next three\n> years.\n> \n> We don't yet have an agreement on how to increase the block size\n> limit. There have been many proposals over the past years, like\n> BIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248, BU, and so\n> on. These hard fork proposals, with this patch already in Core's\n> release, they all become soft fork. We'll have enough time to discuss\n> all these proposals and decide which one to go. Take an example, if we\n> choose to fork to only 2MB, since 32MiB already scheduled, reduce it\n> from 32MiB to 2MB will be a soft fork.\n> \n> Anyway, we must code something right now, before it becomes too late.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/f4f40e72/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2017-03-28T17:46:20",
                "message_text_only": "On Tuesday, March 28, 2017 5:34:23 PM Johnson Lau via bitcoin-dev wrote:\n> You are probably not the first one nor last one with such idea. Actually,\n> Luke wrote up a BIP with similar idea in mind:\n> \n> https://github.com/luke-jr/bips/blob/bip-hfprep/bip-hfprep.mediawiki\n> <https://github.com/luke-jr/bips/blob/bip-hfprep/bip-hfprep.mediawiki>\n> \n> Instead of just lifting the block size limit, he also suggested to remove\n> many other rules. I think he has given up this idea because it\u2019s just too\n> complicated.\n> ...\n> So if we really want to get prepared for a potential HF with unknown\n> parameters, I\u2019d suggest to set a time bomb in the client, which will stop\n> processing of transactions with big warning in GUI. The user may still\n> have an option to continue with old rules at their own risks.\n\nIndeed, actually implementing hfprep proved to be overly complicated.\n\nI like the idea of a time bomb that just shuts down the client after it \ndetermine it's stale and refuses to start without an explicit override.\nThat should work no matter what the hardfork is, and gives us a good \nexpectation for hardfork timeframes.\n\n> Or, instead of increasing the block size, we make a softfork to decrease\n> the block size to 1kB and block reward to 0, activating far in the future.\n> This is similar to the difficulty bomb in ETH, which will freeze the\n> network.\n\nI don't like this idea. It leaves the node open to attack from blocks actually \nmeeting the criteria. Maybe the absolute minimum as Jeremy suggested.\n\nLuke"
            },
            {
                "author": "Tom Zander",
                "date": "2017-03-28T20:50:58",
                "message_text_only": "On Tuesday, 28 March 2017 19:34:23 CEST Johnson Lau via bitcoin-dev wrote:\n> So if we really want to get prepared for a potential HF with unknown\n> parameters,\n\nThat was not suggested.\n\nMaybe you can comment on the very specific suggestion instead?\n\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Johnson Lau",
                "date": "2017-03-29T04:21:33",
                "message_text_only": "> On 29 Mar 2017, at 04:50, Tom Zander <tomz at freedommail.ch <mailto:tomz at freedommail.ch>> wrote:\n> \n> On Tuesday, 28 March 2017 19:34:23 CEST Johnson Lau via bitcoin-dev wrote:\n>> So if we really want to get prepared for a potential HF with unknown\n>> parameters,\n> \n> That was not suggested.\n> \n> Maybe you can comment on the very specific suggestion instead?\n> \n> -- \n> Tom Zander\n> Blog: https://zander.github.io <https://zander.github.io/>\n> Vlog: https://vimeo.com/channels/tomscryptochannel <https://vimeo.com/channels/tomscryptochannel>\n\nJust take something like FlexTran as example. How you could get prepared for that without first finalising the spec?\n\nOr changing the block interval from 10 minutes to some other value?\n\nAlso, fixing the sighash bug for legacy scripts?\n\nThere are many other ideas that require a HF:\nhttps://en.bitcoin.it/wiki/User:Gmaxwell/alt_ideas <https://en.bitcoin.it/wiki/User:Gmaxwell/alt_ideas>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/9f5a04ec/attachment.html>"
            },
            {
                "author": "Tom Zander",
                "date": "2017-03-28T20:48:44",
                "message_text_only": "On Tuesday, 28 March 2017 18:59:32 CEST Wang Chun via bitcoin-dev wrote:\n> Despite spam tx on the network, the block capacity is approaching its\n> limit, and we must think ahead. Shall we code a patch right now, to\n> remove the block size limit of 1MB, but not activate it until far in\n> the future. I would propose to remove the 1MB limit at the next block\n> halving in spring 2020, only limit the block size to 32MiB which is\n> the maximum size the current p2p protocol allows. This patch must be\n> in the immediate next release of Bitcoin Core.\n...\n> We don't yet have an agreement on how to increase the block size\n> limit. There have been many proposals over the past years, like\n> BIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248, BU, and so\n> on. These hard fork proposals, with this patch already in Core's\n> release, they all become soft fork.\n\nI think that is a very smart idea, thank you for making it.\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Bram Cohen",
                "date": "2017-03-29T06:32:20",
                "message_text_only": "On Tue, Mar 28, 2017 at 9:59 AM, Wang Chun via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> The basic idea is, as many of us agree, hard fork is risky and should\n> be well prepared. We need a long time to deploy it.\n>\n\nMuch as it may be appealing to repeal the block size limit now with a grace\nperiod until a replacement is needed in a repeal and replace strategy, it's\ndubious to assume that an idea can be agreed upon later when it can't be\nagreed upon now. Trying to put a time limit on it runs into the possibility\nthat you'll find that whatever reasons there were for not having general\nagreement on a new setup before still apply, and running into the\nembarrassing situation of winding up sticking with the status quo after\nmuch sturm and drang.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170328/e04b8d19/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2017-03-29T09:37:08",
                "message_text_only": "While Segwit's change from 1 mb size limit to 4 mb weight limit seems to be\ncontroversial among some users (I find that very often it is because they\nhave been confused about what segwit does or even outright lied about it) I\ndon't think it's very interesting to discuss further size increases.\nI find more interesting to talk to the users and see how they think Segwit\nharms them, maybe we missed something in segwit that needs to be removed\nfor segwit to become uncontroversial, or maybe it is just disinformation.\n\nOn the other hand, we may want to have our first uncontroversial hardfork\nasap, independently of block size. For example, we could do something as\nsimple as fixing the timewarp attack as bip99 proposes. I cannot think of a\nhf that is easier to implement or has less potential for controversy than\nthat.\n\nOn 29 Mar 2017 8:32 am, \"Bram Cohen via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\nOn Tue, Mar 28, 2017 at 9:59 AM, Wang Chun via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> The basic idea is, as many of us agree, hard fork is risky and should\n> be well prepared. We need a long time to deploy it.\n>\n\nMuch as it may be appealing to repeal the block size limit now with a grace\nperiod until a replacement is needed in a repeal and replace strategy, it's\ndubious to assume that an idea can be agreed upon later when it can't be\nagreed upon now. Trying to put a time limit on it runs into the possibility\nthat you'll find that whatever reasons there were for not having general\nagreement on a new setup before still apply, and running into the\nembarrassing situation of winding up sticking with the status quo after\nmuch sturm and drang.\n\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/6b3c913e/attachment.html>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-03-29T19:07:15",
                "message_text_only": "> While Segwit's change from 1 mb size limit to 4 mb weight limit seems to\nbe controversial among some users [..] I don't think it's very interesting\nto discuss further size increases.\n\nI think the reason for this is largely because SegWit as a blocksize\nincrease isn't very satisfying.  It resolves to a one-time increase with no\nfuture plans, thus engendering the same objections as people who demand we\njust \"raise the number to N.\"  People can argue about what N should be, but\nwhen N is just a flat number, we know we'll have to deal with the issue\nagain.\n\nIn that light I think it is even more essential to continue to discuss the\nblocksize debate and problem.\n\n> I find more interesting to talk to the users and see how they think\nSegwit harms them,\n\n>From an inordinant amount of time spent reading Reddit, I believe this\nlargely comes down to the rumor that has a deathgrip on the BU community -\nThat Core are all just extensions of Blockstream, and blockstream wants to\nrestrict growth on-chain to force growth of their 2nd layer\nservices(lightning and/or sidechains).\n\nI believe the tone of the discussion needs to be changed, and have been\ntrying to work to change that tone for weeks now.  There's one faction that\nbelieves that Bitcoin will rarely, if ever, benefit from a blocksize\nincrease, and fees rising is a desired/unavoidable result.  There's a\ndifferent faction that believes Bitcoin limits are arbitrary and that all\npeople worldwide should be able to put any size transactions, even\nmicrotransactions, on-chain.  Both factions are extreme in their viewpoints\nand resort to conspiracy theories to interpret the actions of\nCore(blockstream did it) or BU(Jihan controls everything and anyone who\nsays overwise is a shill paid by Roger Ver!)\n\nIt is all very unhealthy for Bitcoin.  Both sides need to accept that\nmicrotransactions from all humans cannot go on-chain, and that never\nincreasing the blocksize doesn't mean millions of home users will run\nnodes.  The node argument breaks down economically and the microtransaction\nargument is an impossible mountain for a blockchain to climb.\n\n\nOn Wed, Mar 29, 2017 at 2:37 AM, Jorge Tim\u00f3n via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> While Segwit's change from 1 mb size limit to 4 mb weight limit seems to\n> be controversial among some users (I find that very often it is because\n> they have been confused about what segwit does or even outright lied about\n> it) I don't think it's very interesting to discuss further size increases.\n> I find more interesting to talk to the users and see how they think Segwit\n> harms them, maybe we missed something in segwit that needs to be removed\n> for segwit to become uncontroversial, or maybe it is just disinformation.\n>\n> On the other hand, we may want to have our first uncontroversial hardfork\n> asap, independently of block size. For example, we could do something as\n> simple as fixing the timewarp attack as bip99 proposes. I cannot think of a\n> hf that is easier to implement or has less potential for controversy than\n> that.\n>\n> On 29 Mar 2017 8:32 am, \"Bram Cohen via bitcoin-dev\" <bitcoin-dev at lists.\n> linuxfoundation.org> wrote:\n>\n> On Tue, Mar 28, 2017 at 9:59 AM, Wang Chun via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>>\n>> The basic idea is, as many of us agree, hard fork is risky and should\n>> be well prepared. We need a long time to deploy it.\n>>\n>\n> Much as it may be appealing to repeal the block size limit now with a\n> grace period until a replacement is needed in a repeal and replace\n> strategy, it's dubious to assume that an idea can be agreed upon later when\n> it can't be agreed upon now. Trying to put a time limit on it runs into the\n> possibility that you'll find that whatever reasons there were for not\n> having general agreement on a new setup before still apply, and running\n> into the embarrassing situation of winding up sticking with the status quo\n> after much sturm and drang.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/5ef03fb4/attachment-0001.html>"
            },
            {
                "author": "Martin L\u00edzner",
                "date": "2017-03-29T07:49:31",
                "message_text_only": "If there should be a hard-fork, Core team should author the code. Other dev\nteams have marginal support among all BTC users.\n\nIm tending to believe, that HF is necessary evil now. But lets do it in\nconservative approach:\n- Fix historical BTC issues, improve code\n- Plan HF activation date well ahead - 12 months+\n- Allow increasing block size on year-year basis as Luke suggested\n- Compromise with miners on initial block size bump (e.g. 2MB)\n- SegWit\n\nMartin Lizner\n\nOn Tue, Mar 28, 2017 at 6:59 PM, Wang Chun via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I've proposed this hard fork approach last year in Hong Kong Consensus\n> but immediately rejected by coredevs at that meeting, after more than\n> one year it seems that lots of people haven't heard of it. So I would\n> post this here again for comment.\n>\n> The basic idea is, as many of us agree, hard fork is risky and should\n> be well prepared. We need a long time to deploy it.\n>\n> Despite spam tx on the network, the block capacity is approaching its\n> limit, and we must think ahead. Shall we code a patch right now, to\n> remove the block size limit of 1MB, but not activate it until far in\n> the future. I would propose to remove the 1MB limit at the next block\n> halving in spring 2020, only limit the block size to 32MiB which is\n> the maximum size the current p2p protocol allows. This patch must be\n> in the immediate next release of Bitcoin Core.\n>\n> With this patch in core's next release, Bitcoin works just as before,\n> no fork will ever occur, until spring 2020. But everyone knows there\n> will be a fork scheduled. Third party services, libraries, wallets and\n> exchanges will have enough time to prepare for it over the next three\n> years.\n>\n> We don't yet have an agreement on how to increase the block size\n> limit. There have been many proposals over the past years, like\n> BIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248, BU, and so\n> on. These hard fork proposals, with this patch already in Core's\n> release, they all become soft fork. We'll have enough time to discuss\n> all these proposals and decide which one to go. Take an example, if we\n> choose to fork to only 2MB, since 32MiB already scheduled, reduce it\n> from 32MiB to 2MB will be a soft fork.\n>\n> Anyway, we must code something right now, before it becomes too late.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/2a8713c3/attachment-0001.html>"
            },
            {
                "author": "David Vorick",
                "date": "2017-03-29T15:57:19",
                "message_text_only": "On Mar 29, 2017 9:50 AM, \"Martin L\u00edzner via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\nIm tending to believe, that HF is necessary evil now.\n\n\nI will firmly disagree. We know how to do a soft-fork blocksize increase.\nIf it is decided that a block size increase is justified, we can do it with\nextension blocks in a way that achieves full backwards compatibility for\nall nodes.\n\nBarring a significant security motivation, there is no need to hardfork.\n\nI am also solidly unconvinced that increasing the blocksize today is a good\nmove, even as little as SegWit does. It's too expensive for a home user to\nrun a full node, and user-run full nodes are what provide the strongest\ndefence against political manuveuring.\n\nWhen considering what block size is acceptable, the impact of running\nbitcoin in the background on affordable, non-dedicated home-hardware should\nbe a top consideration.\n\nDisk space I believe is the most significant problem today, with RAM being\nthe second most significant problem, and finally bandwidth consumption as\nthe third most important consideration. I believe that v0.14 is already too\nexpensive on all three fronts, and that block size increases shouldn't be\nconsidered at all until the requirements are reduced (or until consumer\nhardware is better, but I believe we are talking 3-7 years of waiting if we\npick that option).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/873b902d/attachment.html>"
            },
            {
                "author": "Aymeric Vitte",
                "date": "2017-03-29T16:08:42",
                "message_text_only": "Le 29/03/2017 \u00e0 17:57, David Vorick via bitcoin-dev a \u00e9crit :\n> It's too expensive for a home user to run a full node, and user-run\n> full nodes are what provide the strongest defence against political\n> manuveuring.\n\nYes but what makes you think that \"It's too expensive for a home user to\nrun a full node\" ? Not trivial, maybe, long to setup, for sure, but why\n\"expensive\"? I tested running a full node from home that was normally\ncorrectly configured and did not notice anything annoying/expensive\n\n-- \nZcash wallets made simple: https://github.com/Ayms/zcash-wallets\nBitcoin wallets made simple: https://github.com/Ayms/bitcoin-wallets\nGet the torrent dynamic blocklist: http://peersm.com/getblocklist\nCheck the 10 M passwords list: http://peersm.com/findmyass\nAnti-spies and private torrents, dynamic blocklist: http://torrent-live.org\nPeersm : http://www.peersm.com\ntorrent-live: https://github.com/Ayms/torrent-live\nnode-Tor : https://www.github.com/Ayms/node-Tor\nGitHub : https://www.github.com/Ayms"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-03-29T19:46:50",
                "message_text_only": "> When considering what block size is acceptable, the impact of running\nbitcoin in the background on affordable, non-dedicated home-hardware should\nbe a top consideration.\n\nWhy is that a given?  Is there math that outlines what the risk levels are\nfor various configurations of node distributions, vulnerabilities, etc?\nHow does one even evaluate the costs versus the benefits of node costs\nversus transaction fees?\n\n> Disk space I believe is the most significant problem today, with RAM\nbeing the second most significant problem, and finally bandwidth\nconsumption as the third most important consideration. I believe that v0.14\nis already too expensive on all three fronts, and that block size increases\nshouldn't be considered at all until the requirements are reduced (or until\nconsumer hardware is better, but I believe we are talking 3-7 years of\nwaiting if we pick that option).\n\nDisk space is not the largest cost, either today or in the future.  Without\nhistorical checkpointing in some fashion, bandwidth costs are more than 2\norders of magnitude higher cost than every other cost for full listening\nnodes.  With historical syncing discounted(i.e. pruned or nonlistening\nnodes) bandwidth costs are still higher than hard drive costs.\n\n\nToday: Full listening node, 133 peers, measured 1.5 TB/mo of bandwidth\nconsumption over two multi-day intervals.  1,500 GB/month @ ec2 low-tier\nprices = $135/month, 110 GB storage = $4.95.  Similar arguments extend to\nconsumer hardware - Comcast broadband is ~$80/mo depending on region and\ncomes with 1.0 TB cap in most regions, so $120/mo or even $80/mo would be\nin the same ballpark.  A consumer-grade 2GB hard drive is $70 and will last\nfor at least 2 years, so $2.93/month if the hard drive was totally\ndedicated to Bitcoin and $0.16/month if we only count the percentage that\nBitcoin uses.\n\nFor a non-full listening node, ~25 peers I measured around 70 GB/month of\nusage over several days, which is $6.3 per month EC2 or $5.6 proportional\nComcast cost.  If someone isn't supporting syncing, there's not much point\nin them not turning on pruning.  Even if they didn't, a desktop in the $500\nrange typically comes with 1 or 2 TB of storage by default, and without\nsegwit or a blocksize cap increase, 3 years from now the full history will\nonly take up the 33% of the smaller, three year old, budget-range PC hard\ndrive.  Even then if we assume the hard drive price declines of the last 4\nyears hold steady(14%, very low compared to historical gains), 330gb of\ndata only works out to a proportional monthly cost of $6.20 - still\nslightly smaller than his bandwidth costs, and almost entirely removable by\nturning on pruning since he isn't paying to help others sync.\n\nI don't know how to evaluate the impacts of RAM or CPU usage, or\nconsequently electricity usage for a node yet.  I'm open to quantifying any\nof those if there's a method, but it seems absurd that ram could even\nbecome a signficant factor given the abundance of cheap ram nowadays with\nfew programs needing it.  CPU usage and thus electricity costs might become\na factor, I just don't know how to quantify it at various block scales.\nCurrently cpu usage isn't taxing any hardware that I run a node on in any\nway I have been able to notice, not including the syncing process.\n\n> I am also solidly unconvinced that increasing the blocksize today is a\ngood move, even as little as SegWit does.\n\nThe consequence of your logic that holds node operational costs down is\nthat transaction fees for users go up, adoption slows as various use cases\nbecome impractical, price growth suffers, and alt coins that choose lower\nfees over node cost concerns will exhibit competitive growth against\nBitcoin's crypto-currency market share.  Even if you are right, that's\nhardly a tradeoff not worth thoroughly investigating from every angle, the\nconsequences could be just as dire for Bitcoin in 10 years as it would be\nif we made ourselves vulnerable.\n\nAnd even if an altcoin can't take Bitcoin's dominance by lower fees, we\nwill not end up with millions of home users running nodes, ever.  If they\ndid so, that would be orders of magnitude fee market competition, and\ncontinuing increases in price, while hardware costs decline.  If\ntransaction fees go up from space limitations, and they go up even further\nin real-world terms from price increases, while node costs decline,\neventually it will cost more to send a transaction than it does to run a\nnode for a full month.  No home users would send transactions because the\nfee costs would be higher than anything they might use Bitcoin for, and so\nthey would not run a node for something they don't use - Why would they?\nThe cost of letting the ratio between node costs and transaction costs go\nin the extreme favor of node costs would be worse - Lower Bitcoin\nusability, adoption, and price, without any meaningful increase in security.\n\nHow do we evaluate the math on node distributions versus various attack\nvectors?\n\n\n\nOn Wed, Mar 29, 2017 at 8:57 AM, David Vorick via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> On Mar 29, 2017 9:50 AM, \"Martin L\u00edzner via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Im tending to believe, that HF is necessary evil now.\n>\n>\n> I will firmly disagree. We know how to do a soft-fork blocksize increase.\n> If it is decided that a block size increase is justified, we can do it with\n> extension blocks in a way that achieves full backwards compatibility for\n> all nodes.\n>\n> Barring a significant security motivation, there is no need to hardfork.\n>\n> I am also solidly unconvinced that increasing the blocksize today is a\n> good move, even as little as SegWit does. It's too expensive for a home\n> user to run a full node, and user-run full nodes are what provide the\n> strongest defence against political manuveuring.\n>\n> When considering what block size is acceptable, the impact of running\n> bitcoin in the background on affordable, non-dedicated home-hardware should\n> be a top consideration.\n>\n> Disk space I believe is the most significant problem today, with RAM being\n> the second most significant problem, and finally bandwidth consumption as\n> the third most important consideration. I believe that v0.14 is already too\n> expensive on all three fronts, and that block size increases shouldn't be\n> considered at all until the requirements are reduced (or until consumer\n> hardware is better, but I believe we are talking 3-7 years of waiting if we\n> pick that option).\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/2e9b6644/attachment-0001.html>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-03-29T19:10:42",
                "message_text_only": "In order for any blocksize increase to be agreed upon, more consensus is\nneeded.  The proportion of users believing no blocksize increases are\nneeded is larger than the hardfork target core wants(95% consensus).  The\nproportion of users believing in microtransactions for all is also larger\nthan 5%, and both of those groups may be larger than 10% respectively.  I\ndon't think either the Big-blocks faction nor the low-node-costs faction\nhave even a simple majority of support.  Getting consensus is going to be a\nbig mess, but it is critical that it is done.\n\nOn Wed, Mar 29, 2017 at 12:49 AM, Martin L\u00edzner via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> If there should be a hard-fork, Core team should author the code. Other\n> dev teams have marginal support among all BTC users.\n>\n> Im tending to believe, that HF is necessary evil now. But lets do it in\n> conservative approach:\n> - Fix historical BTC issues, improve code\n> - Plan HF activation date well ahead - 12 months+\n> - Allow increasing block size on year-year basis as Luke suggested\n> - Compromise with miners on initial block size bump (e.g. 2MB)\n> - SegWit\n>\n> Martin Lizner\n>\n> On Tue, Mar 28, 2017 at 6:59 PM, Wang Chun via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> I've proposed this hard fork approach last year in Hong Kong Consensus\n>> but immediately rejected by coredevs at that meeting, after more than\n>> one year it seems that lots of people haven't heard of it. So I would\n>> post this here again for comment.\n>>\n>> The basic idea is, as many of us agree, hard fork is risky and should\n>> be well prepared. We need a long time to deploy it.\n>>\n>> Despite spam tx on the network, the block capacity is approaching its\n>> limit, and we must think ahead. Shall we code a patch right now, to\n>> remove the block size limit of 1MB, but not activate it until far in\n>> the future. I would propose to remove the 1MB limit at the next block\n>> halving in spring 2020, only limit the block size to 32MiB which is\n>> the maximum size the current p2p protocol allows. This patch must be\n>> in the immediate next release of Bitcoin Core.\n>>\n>> With this patch in core's next release, Bitcoin works just as before,\n>> no fork will ever occur, until spring 2020. But everyone knows there\n>> will be a fork scheduled. Third party services, libraries, wallets and\n>> exchanges will have enough time to prepare for it over the next three\n>> years.\n>>\n>> We don't yet have an agreement on how to increase the block size\n>> limit. There have been many proposals over the past years, like\n>> BIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248, BU, and so\n>> on. These hard fork proposals, with this patch already in Core's\n>> release, they all become soft fork. We'll have enough time to discuss\n>> all these proposals and decide which one to go. Take an example, if we\n>> choose to fork to only 2MB, since 32MiB already scheduled, reduce it\n>> from 32MiB to 2MB will be a soft fork.\n>>\n>> Anyway, we must code something right now, before it becomes too late.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/89ff2027/attachment.html>"
            },
            {
                "author": "praxeology_guy",
                "date": "2017-03-29T19:36:25",
                "message_text_only": "I think at least the three following things have to be done before the block size can be increased by any significant amount:\n1. A network protocol defined UTXO snapshot format be defined, UTXO snapshots being created automatically in a deterministic periodic and low-cost fashion. Ability to synchronize starting from such a UTXO snapshot as requested by a user.\n2. SPV support from a pruned node that has the latest UTXO snapshot. Probably requires committing the UTXO snapshot hash to the block.\n3. Given the above fixes the problem of needing full block chain history storage, and people are comfortable with such a security model, a good portion of the network can switch to this security model, and still satisfy our desire for the system to be sufficiently distributed. This requires lots of testing.\n4. More current studies on the effect of increasing the block size on synchronizing node drop out due to other reasons such as network bandwidth, memory, and CPU usage.\n\nWithout doing the above, scheduling to increasing the block size would be wreckless.\n\nCheers,\nPraxeology Guy\n\n-------- Original Message --------\nSubject: Re: [bitcoin-dev] Hard fork proposal from last week's meeting\nLocal Time: March 29, 2017 2:10 PM\nUTC Time: March 29, 2017 7:10 PM\nFrom: bitcoin-dev at lists.linuxfoundation.org\nTo: Martin L\u00edzner <martin.lizner at gmail.com>, Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\n\nIn order for any blocksize increase to be agreed upon, more consensus is needed. The proportion of users believing no blocksize increases are needed is larger than the hardfork target core wants(95% consensus). The proportion of users believing in microtransactions for all is also larger than 5%, and both of those groups may be larger than 10% respectively. I don't think either the Big-blocks faction nor the low-node-costs faction have even a simple majority of support. Getting consensus is going to be a big mess, but it is critical that it is done.\n\nOn Wed, Mar 29, 2017 at 12:49 AM, Martin L\u00edzner via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\nIf there should be a hard-fork, Core team should author the code. Other dev teams have marginal support among all BTC users.\n\nIm tending to believe, that HF is necessary evil now. But lets do it in conservative approach:\n- Fix historical BTC issues, improve code\n- Plan HF activation date well ahead - 12 months+\n- Allow increasing block size on year-year basis as Luke suggested\n- Compromise with miners on initial block size bump (e.g. 2MB)\n- SegWit\n\nMartin Lizner\n\nOn Tue, Mar 28, 2017 at 6:59 PM, Wang Chun via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\nI've proposed this hard fork approach last year in Hong Kong Consensus\nbut immediately rejected by coredevs at that meeting, after more than\none year it seems that lots of people haven't heard of it. So I would\npost this here again for comment.\n\nThe basic idea is, as many of us agree, hard fork is risky and should\nbe well prepared. We need a long time to deploy it.\n\nDespite spam tx on the network, the block capacity is approaching its\nlimit, and we must think ahead. Shall we code a patch right now, to\nremove the block size limit of 1MB, but not activate it until far in\nthe future. I would propose to remove the 1MB limit at the next block\nhalving in spring 2020, only limit the block size to 32MiB which is\nthe maximum size the current p2p protocol allows. This patch must be\nin the immediate next release of Bitcoin Core.\n\nWith this patch in core's next release, Bitcoin works just as before,\nno fork will ever occur, until spring 2020. But everyone knows there\nwill be a fork scheduled. Third party services, libraries, wallets and\nexchanges will have enough time to prepare for it over the next three\nyears.\n\nWe don't yet have an agreement on how to increase the block size\nlimit. There have been many proposals over the past years, like\nBIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248, BU, and so\non. These hard fork proposals, with this patch already in Core's\nrelease, they all become soft fork. We'll have enough time to discuss\nall these proposals and decide which one to go. Take an example, if we\nchoose to fork to only 2MB, since 32MiB already scheduled, reduce it\nfrom 32MiB to 2MB will be a soft fork.\n\nAnyway, we must code something right now, before it becomes too late.\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/44936f5e/attachment-0001.html>"
            },
            {
                "author": "Alphonse Pace",
                "date": "2017-03-28T17:53:11",
                "message_text_only": "Juan,\n\nI suggest you take a look at this paper:\nhttp://fc16.ifca.ai/bitcoin/papers/CDE+16.pdf  It may help you form\nopinions based in science rather than what appears to be nothing more than\na hunch.  It shows that even 4MB is unsafe.  SegWit provides up to this\nlimit.\n\n8MB is most definitely not safe today.\n\nWhether it is unsafe or impossible is the topic, since Wang Chun proposed\nmaking the block size limit 32MiB.\n\n\nWang Chun,\n\nCan you specify what meeting you are talking about?  You seem to have not\nreplied on that point.  Who were the participants and what was the purpose\nof this meeting?\n\n-Alphonse\n\nOn Tue, Mar 28, 2017 at 12:33 PM, Juan Garavaglia <jg at 112bit.com> wrote:\n\n> Alphonse,\n>\n>\n>\n> In my opinion if 1MB limit was ok in 2010, 8MB limit is ok on 2016 and\n> 32MB limit valid in next halving, from network, storage and CPU perspective\n> or 1MB was too high in 2010 what is possible or 1MB is to low today.\n>\n>\n>\n> If is unsafe or impossible to raise the blocksize is a different topic.\n>\n\n>\n> Regards\n>\n>\n>\n> Juan\n>\n>\n>\n>\n>\n> *From:* bitcoin-dev-bounces at lists.linuxfoundation.org [mailto:\n> bitcoin-dev-bounces at lists.linuxfoundation.org] *On Behalf Of *Alphonse\n> Pace via bitcoin-dev\n> *Sent:* Tuesday, March 28, 2017 2:24 PM\n> *To:* Wang Chun <1240902 at gmail.com>; Bitcoin Protocol Discussion <\n> bitcoin-dev at lists.linuxfoundation.org>\n> *Subject:* Re: [bitcoin-dev] Hard fork proposal from last week's meeting\n>\n>\n>\n> What meeting are you referring to?  Who were the participants?\n>\n>\n>\n> Removing the limit but relying on the p2p protocol is not really a true\n> 32MiB limit, but a limit of whatever transport methods provide.  This can\n> lead to differing consensus if alternative layers for relaying are used.\n> What you seem to be asking for is an unbound block size (or at least\n> determined by whatever miners produce).  This has the possibility (and even\n> likelihood) of removing many participants from the network, including many\n> small miners.\n>\n>\n>\n> 32MB in less than 3 years also appears to be far beyond limits of safety\n> which are known to exist far sooner, and we cannot expect hardware and\n> networking layers to improve by those amounts in that time.\n>\n>\n>\n> It also seems like it would be much better to wait until SegWit activates\n> in order to truly measure the effects on the network from this increased\n> capacity before committing to any additional increases.\n>\n>\n>\n> -Alphonse\n>\n>\n>\n>\n>\n>\n>\n> On Tue, Mar 28, 2017 at 11:59 AM, Wang Chun via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> I've proposed this hard fork approach last year in Hong Kong Consensus\n> but immediately rejected by coredevs at that meeting, after more than\n> one year it seems that lots of people haven't heard of it. So I would\n> post this here again for comment.\n>\n> The basic idea is, as many of us agree, hard fork is risky and should\n> be well prepared. We need a long time to deploy it.\n>\n> Despite spam tx on the network, the block capacity is approaching its\n> limit, and we must think ahead. Shall we code a patch right now, to\n> remove the block size limit of 1MB, but not activate it until far in\n> the future. I would propose to remove the 1MB limit at the next block\n> halving in spring 2020, only limit the block size to 32MiB which is\n> the maximum size the current p2p protocol allows. This patch must be\n> in the immediate next release of Bitcoin Core.\n>\n> With this patch in core's next release, Bitcoin works just as before,\n> no fork will ever occur, until spring 2020. But everyone knows there\n> will be a fork scheduled. Third party services, libraries, wallets and\n> exchanges will have enough time to prepare for it over the next three\n> years.\n>\n> We don't yet have an agreement on how to increase the block size\n> limit. There have been many proposals over the past years, like\n> BIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248, BU, and so\n> on. These hard fork proposals, with this patch already in Core's\n> release, they all become soft fork. We'll have enough time to discuss\n> all these proposals and decide which one to go. Take an example, if we\n> choose to fork to only 2MB, since 32MiB already scheduled, reduce it\n> from 32MiB to 2MB will be a soft fork.\n>\n> Anyway, we must code something right now, before it becomes too late.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170328/70199439/attachment.html>"
            },
            {
                "author": "Juan Garavaglia",
                "date": "2017-03-28T22:36:18",
                "message_text_only": "Alphonse,\n\nEven when several of the experts involved in the document you refer has my respect and admiration, I do not agree with some of their conclusions some of their estimations are not accurate other changed like Bootstrap Time, Cost per Confirmed Transaction they consider a network of 450,000,00 GH and today is 3.594.236.966 GH, the energy consumption per GH is old, the cost of electricity is wrong even when the document was made and is hard to find any parameter used that is valid for an analysis today.\n\nAgain with all respect to the experts involved in that analysis is not valid today.\n\nI tend to believe more in Moore\u2019s law, Butters' Law of Photonics and Kryder\u2019s Law all has been verified for many years and support that 32 MB in 2020 are possible and equals or less than 1 MB in 2010.\n\nAgain may be is not possible Johnson Lau and LukeJr invested a significant amount of time investigating ways to do a safe HF, and may be not possible to do a safe HF today but from processing power, bandwidth and storage is totally valid and Wang Chung proposal has solid grounds.\n\nRegards\n\nJuan\n\n\nFrom: Alphonse Pace [mailto:alp.bitcoin at gmail.com]\nSent: Tuesday, March 28, 2017 2:53 PM\nTo: Juan Garavaglia <jg at 112bit.com>; Wang Chun <1240902 at gmail.com>\nCc: Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\nSubject: Re: [bitcoin-dev] Hard fork proposal from last week's meeting\n\nJuan,\n\nI suggest you take a look at this paper: http://fc16.ifca.ai/bitcoin/papers/CDE+16.pdf  It may help you form opinions based in science rather than what appears to be nothing more than a hunch.  It shows that even 4MB is unsafe.  SegWit provides up to this limit.\n\n8MB is most definitely not safe today.\n\nWhether it is unsafe or impossible is the topic, since Wang Chun proposed making the block size limit 32MiB.\n\n\nWang Chun,\n\nCan you specify what meeting you are talking about?  You seem to have not replied on that point.  Who were the participants and what was the purpose of this meeting?\n\n-Alphonse\n\nOn Tue, Mar 28, 2017 at 12:33 PM, Juan Garavaglia <jg at 112bit.com<mailto:jg at 112bit.com>> wrote:\nAlphonse,\n\nIn my opinion if 1MB limit was ok in 2010, 8MB limit is ok on 2016 and 32MB limit valid in next halving, from network, storage and CPU perspective or 1MB was too high in 2010 what is possible or 1MB is to low today.\n\nIf is unsafe or impossible to raise the blocksize is a different topic.\n\nRegards\n\nJuan\n\n\nFrom: bitcoin-dev-bounces at lists.linuxfoundation.org<mailto:bitcoin-dev-bounces at lists.linuxfoundation.org> [mailto:bitcoin-dev-bounces at lists.linuxfoundation.org<mailto:bitcoin-dev-bounces at lists.linuxfoundation.org>] On Behalf Of Alphonse Pace via bitcoin-dev\nSent: Tuesday, March 28, 2017 2:24 PM\nTo: Wang Chun <1240902 at gmail.com<mailto:1240902 at gmail.com>>; Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>>\nSubject: Re: [bitcoin-dev] Hard fork proposal from last week's meeting\n\nWhat meeting are you referring to?  Who were the participants?\n\nRemoving the limit but relying on the p2p protocol is not really a true 32MiB limit, but a limit of whatever transport methods provide.  This can lead to differing consensus if alternative layers for relaying are used.  What you seem to be asking for is an unbound block size (or at least determined by whatever miners produce).  This has the possibility (and even likelihood) of removing many participants from the network, including many small miners.\n\n32MB in less than 3 years also appears to be far beyond limits of safety which are known to exist far sooner, and we cannot expect hardware and networking layers to improve by those amounts in that time.\n\nIt also seems like it would be much better to wait until SegWit activates in order to truly measure the effects on the network from this increased capacity before committing to any additional increases.\n\n-Alphonse\n\n\n\nOn Tue, Mar 28, 2017 at 11:59 AM, Wang Chun via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\nI've proposed this hard fork approach last year in Hong Kong Consensus\nbut immediately rejected by coredevs at that meeting, after more than\none year it seems that lots of people haven't heard of it. So I would\npost this here again for comment.\n\nThe basic idea is, as many of us agree, hard fork is risky and should\nbe well prepared. We need a long time to deploy it.\n\nDespite spam tx on the network, the block capacity is approaching its\nlimit, and we must think ahead. Shall we code a patch right now, to\nremove the block size limit of 1MB, but not activate it until far in\nthe future. I would propose to remove the 1MB limit at the next block\nhalving in spring 2020, only limit the block size to 32MiB which is\nthe maximum size the current p2p protocol allows. This patch must be\nin the immediate next release of Bitcoin Core.\n\nWith this patch in core's next release, Bitcoin works just as before,\nno fork will ever occur, until spring 2020. But everyone knows there\nwill be a fork scheduled. Third party services, libraries, wallets and\nexchanges will have enough time to prepare for it over the next three\nyears.\n\nWe don't yet have an agreement on how to increase the block size\nlimit. There have been many proposals over the past years, like\nBIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248, BU, and so\non. These hard fork proposals, with this patch already in Core's\nrelease, they all become soft fork. We'll have enough time to discuss\nall these proposals and decide which one to go. Take an example, if we\nchoose to fork to only 2MB, since 32MiB already scheduled, reduce it\nfrom 32MiB to 2MB will be a soft fork.\n\nAnyway, we must code something right now, before it becomes too late.\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170328/ac730df1/attachment-0001.html>"
            },
            {
                "author": "Luv Khemani",
                "date": "2017-03-29T02:59:58",
                "message_text_only": "Hi Juan\n\n\n  >  I tend to believe more in Moore\u2019s law, Butters' Law of Photonics and Kryder\u2019s Law all has been verified for many years and support that 32 MB in 2020 are possible and equals or less than 1 MB in 2010.\n\n\n\n  Protocol development, especially one in control of people's money cannot be based on beliefs. Do you have actual data to show significant increases in desktop CPU, memory and bandwidth?\n\n\nAll empirical evidence points to the opposite.\n\nIntel has been struggling to eek out 5-10% gains for each generation of its CPUs. The growth of the total blockchain size at 1MB alone is much faster than this.\n\nCPU Core counts have also been stagnant for a decade.\n\nDisk Space growth has also been slowing and with the trend towards SSDs, available disk space in a typical PC has turned negative sharply.\n\n\nRegards\n\nLuv\n\n\n________________________________\nFrom: bitcoin-dev-bounces at lists.linuxfoundation.org <bitcoin-dev-bounces at lists.linuxfoundation.org> on behalf of Juan Garavaglia via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nSent: Wednesday, March 29, 2017 6:36 AM\nTo: Alphonse Pace; Wang Chun\nCc: Bitcoin Protocol Discussion\nSubject: Re: [bitcoin-dev] Hard fork proposal from last week's meeting\n\n\nAlphonse,\n\n\n\nEven when several of the experts involved in the document you refer has my respect and admiration, I do not agree with some of their conclusions some of their estimations are not accurate other changed like Bootstrap Time, Cost per Confirmed Transaction they consider a network of 450,000,00 GH and today is 3.594.236.966 GH, the energy consumption per GH is old, the cost of electricity is wrong even when the document was made and is hard to find any parameter used that is valid for an analysis today.\n\n\n\nAgain with all respect to the experts involved in that analysis is not valid today.\n\n\n\nI tend to believe more in Moore\u2019s law, Butters' Law of Photonics and Kryder\u2019s Law all has been verified for many years and support that 32 MB in 2020 are possible and equals or less than 1 MB in 2010.\n\n\n\nAgain may be is not possible Johnson Lau and LukeJr invested a significant amount of time investigating ways to do a safe HF, and may be not possible to do a safe HF today but from processing power, bandwidth and storage is totally valid and Wang Chung proposal has solid grounds.\n\n\n\nRegards\n\n\n\nJuan\n\n\n\n\n\nFrom: Alphonse Pace [mailto:alp.bitcoin at gmail.com]\nSent: Tuesday, March 28, 2017 2:53 PM\nTo: Juan Garavaglia <jg at 112bit.com>; Wang Chun <1240902 at gmail.com>\nCc: Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\nSubject: Re: [bitcoin-dev] Hard fork proposal from last week's meeting\n\n\n\nJuan,\n\n\n\nI suggest you take a look at this paper: http://fc16.ifca.ai/bitcoin/papers/CDE+16.pdf  It may help you form opinions based in science rather than what appears to be nothing more than a hunch.  It shows that even 4MB is unsafe.  SegWit provides up to this limit.\n\nOn Scaling Decentralized Blockchains<http://fc16.ifca.ai/bitcoin/papers/CDE+16.pdf>\nfc16.ifca.ai\nOn Scaling Decentralized Blockchains (A Position Paper) Kyle Croman 0 ;1, Christian Decker 4, Ittay Eyal , Adem Efe Gencer , Ari Juels 0 ;2, Ahmed Kosba 0 ;3, Andrew ...\n\n\n\n\n\n8MB is most definitely not safe today.\n\n\n\nWhether it is unsafe or impossible is the topic, since Wang Chun proposed making the block size limit 32MiB.\n\n\n\n\n\nWang Chun,\n\nCan you specify what meeting you are talking about?  You seem to have not replied on that point.  Who were the participants and what was the purpose of this meeting?\n\n\n\n-Alphonse\n\n\n\nOn Tue, Mar 28, 2017 at 12:33 PM, Juan Garavaglia <jg at 112bit.com<mailto:jg at 112bit.com>> wrote:\n\nAlphonse,\n\n\n\nIn my opinion if 1MB limit was ok in 2010, 8MB limit is ok on 2016 and 32MB limit valid in next halving, from network, storage and CPU perspective or 1MB was too high in 2010 what is possible or 1MB is to low today.\n\n\n\nIf is unsafe or impossible to raise the blocksize is a different topic.\n\n\n\nRegards\n\n\n\nJuan\n\n\n\n\n\nFrom: bitcoin-dev-bounces at lists.linuxfoundation.org<mailto:bitcoin-dev-bounces at lists.linuxfoundation.org> [mailto:bitcoin-dev-bounces at lists.linuxfoundation.org<mailto:bitcoin-dev-bounces at lists.linuxfoundation.org>] On Behalf Of Alphonse Pace via bitcoin-dev\nSent: Tuesday, March 28, 2017 2:24 PM\nTo: Wang Chun <1240902 at gmail.com<mailto:1240902 at gmail.com>>; Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>>\nSubject: Re: [bitcoin-dev] Hard fork proposal from last week's meeting\n\n\n\nWhat meeting are you referring to?  Who were the participants?\n\n\n\nRemoving the limit but relying on the p2p protocol is not really a true 32MiB limit, but a limit of whatever transport methods provide.  This can lead to differing consensus if alternative layers for relaying are used.  What you seem to be asking for is an unbound block size (or at least determined by whatever miners produce).  This has the possibility (and even likelihood) of removing many participants from the network, including many small miners.\n\n\n\n32MB in less than 3 years also appears to be far beyond limits of safety which are known to exist far sooner, and we cannot expect hardware and networking layers to improve by those amounts in that time.\n\n\n\nIt also seems like it would be much better to wait until SegWit activates in order to truly measure the effects on the network from this increased capacity before committing to any additional increases.\n\n\n\n-Alphonse\n\n\n\n\n\n\n\nOn Tue, Mar 28, 2017 at 11:59 AM, Wang Chun via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n\nI've proposed this hard fork approach last year in Hong Kong Consensus\nbut immediately rejected by coredevs at that meeting, after more than\none year it seems that lots of people haven't heard of it. So I would\npost this here again for comment.\n\nThe basic idea is, as many of us agree, hard fork is risky and should\nbe well prepared. We need a long time to deploy it.\n\nDespite spam tx on the network, the block capacity is approaching its\nlimit, and we must think ahead. Shall we code a patch right now, to\nremove the block size limit of 1MB, but not activate it until far in\nthe future. I would propose to remove the 1MB limit at the next block\nhalving in spring 2020, only limit the block size to 32MiB which is\nthe maximum size the current p2p protocol allows. This patch must be\nin the immediate next release of Bitcoin Core.\n\nWith this patch in core's next release, Bitcoin works just as before,\nno fork will ever occur, until spring 2020. But everyone knows there\nwill be a fork scheduled. Third party services, libraries, wallets and\nexchanges will have enough time to prepare for it over the next three\nyears.\n\nWe don't yet have an agreement on how to increase the block size\nlimit. There have been many proposals over the past years, like\nBIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248, BU, and so\non. These hard fork proposals, with this patch already in Core's\nrelease, they all become soft fork. We'll have enough time to discuss\nall these proposals and decide which one to go. Take an example, if we\nchoose to fork to only 2MB, since 32MiB already scheduled, reduce it\nfrom 32MiB to 2MB will be a soft fork.\n\nAnyway, we must code something right now, before it becomes too late.\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/e38abd87/attachment-0001.html>"
            },
            {
                "author": "Emin G\u00fcn Sirer",
                "date": "2017-03-29T06:24:05",
                "message_text_only": ">Even when several of the experts involved in the document you refer has my\nrespect and admiration, I do not agree with some of their conclusions\n\nI'm one of the co-authors of that study. I'd be the first to agree with\nyour conclusion\nand argue that the 4MB size suggested in that paper should not be used\nwithout\ncompensation for two important changes to the network.\n\nOur recent measurements of the Bitcoin P2P network show that network speeds\nhave improved tremendously. From February 2016 to February 2017, the average\nprovisioned bandwidth of a reachable Bitcoin node went up by approximately\n70%.\nAnd that's just in the last year.\n\nFurther, the emergence of high-speed block relay networks, like Falcon (\nhttp://www.falcon-net.org)\nand FIBRE, as well as block compression, e.g. BIP152 and xthin, change the\npicture dramatically.\n\nSo, the 4MB limit mentioned in our paper should not be used as a protocol\nlimit today.\n\nBest,\n- egs\n\n\n\nOn Tue, Mar 28, 2017 at 3:36 PM, Juan Garavaglia via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Alphonse,\n>\n>\n>\n> Even when several of the experts involved in the document you refer has my\n> respect and admiration, I do not agree with some of their conclusions some\n> of their estimations are not accurate other changed like Bootstrap Time,\n> Cost per Confirmed Transaction they consider a network of 450,000,00 GH and\n> today is 3.594.236.966 GH, the energy consumption per GH is old, the cost\n> of electricity is wrong even when the document was made and is hard to find\n> any parameter used that is valid for an analysis today.\n>\n>\n>\n> Again with all respect to the experts involved in that analysis is not\n> valid today.\n>\n>\n>\n> I tend to believe more in Moore\u2019s law, Butters' Law of Photonics and\n> Kryder\u2019s Law all has been verified for many years and support that 32 MB in\n> 2020 are possible and equals or less than 1 MB in 2010.\n>\n>\n>\n> Again may be is not possible Johnson Lau and LukeJr invested a significant\n> amount of time investigating ways to do a safe HF, and may be not possible\n> to do a safe HF today but from processing power, bandwidth and storage is\n> totally valid and Wang Chung proposal has solid grounds.\n>\n>\n>\n> Regards\n>\n>\n>\n> Juan\n>\n>\n>\n>\n>\n> *From:* Alphonse Pace [mailto:alp.bitcoin at gmail.com]\n> *Sent:* Tuesday, March 28, 2017 2:53 PM\n> *To:* Juan Garavaglia <jg at 112bit.com>; Wang Chun <1240902 at gmail.com>\n> *Cc:* Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\n>\n> *Subject:* Re: [bitcoin-dev] Hard fork proposal from last week's meeting\n>\n>\n>\n> Juan,\n>\n>\n>\n> I suggest you take a look at this paper: http://fc16.ifca.ai/\n> bitcoin/papers/CDE+16.pdf  It may help you form opinions based in science\n> rather than what appears to be nothing more than a hunch.  It shows that\n> even 4MB is unsafe.  SegWit provides up to this limit.\n>\n>\n>\n> 8MB is most definitely not safe today.\n>\n>\n>\n> Whether it is unsafe or impossible is the topic, since Wang Chun proposed\n> making the block size limit 32MiB.\n>\n>\n>\n>\n>\n> Wang Chun,\n>\n>\n> Can you specify what meeting you are talking about?  You seem to have not\n> replied on that point.  Who were the participants and what was the purpose\n> of this meeting?\n>\n>\n>\n> -Alphonse\n>\n>\n>\n> On Tue, Mar 28, 2017 at 12:33 PM, Juan Garavaglia <jg at 112bit.com> wrote:\n>\n> Alphonse,\n>\n>\n>\n> In my opinion if 1MB limit was ok in 2010, 8MB limit is ok on 2016 and\n> 32MB limit valid in next halving, from network, storage and CPU perspective\n> or 1MB was too high in 2010 what is possible or 1MB is to low today.\n>\n>\n>\n> If is unsafe or impossible to raise the blocksize is a different topic.\n>\n>\n>\n> Regards\n>\n>\n>\n> Juan\n>\n>\n>\n>\n>\n> *From:* bitcoin-dev-bounces at lists.linuxfoundation.org [mailto:\n> bitcoin-dev-bounces at lists.linuxfoundation.org] *On Behalf Of *Alphonse\n> Pace via bitcoin-dev\n> *Sent:* Tuesday, March 28, 2017 2:24 PM\n> *To:* Wang Chun <1240902 at gmail.com>; Bitcoin Protocol Discussion <\n> bitcoin-dev at lists.linuxfoundation.org>\n> *Subject:* Re: [bitcoin-dev] Hard fork proposal from last week's meeting\n>\n>\n>\n> What meeting are you referring to?  Who were the participants?\n>\n>\n>\n> Removing the limit but relying on the p2p protocol is not really a true\n> 32MiB limit, but a limit of whatever transport methods provide.  This can\n> lead to differing consensus if alternative layers for relaying are used.\n> What you seem to be asking for is an unbound block size (or at least\n> determined by whatever miners produce).  This has the possibility (and even\n> likelihood) of removing many participants from the network, including many\n> small miners.\n>\n>\n>\n> 32MB in less than 3 years also appears to be far beyond limits of safety\n> which are known to exist far sooner, and we cannot expect hardware and\n> networking layers to improve by those amounts in that time.\n>\n>\n>\n> It also seems like it would be much better to wait until SegWit activates\n> in order to truly measure the effects on the network from this increased\n> capacity before committing to any additional increases.\n>\n>\n>\n> -Alphonse\n>\n>\n>\n>\n>\n>\n>\n> On Tue, Mar 28, 2017 at 11:59 AM, Wang Chun via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> I've proposed this hard fork approach last year in Hong Kong Consensus\n> but immediately rejected by coredevs at that meeting, after more than\n> one year it seems that lots of people haven't heard of it. So I would\n> post this here again for comment.\n>\n> The basic idea is, as many of us agree, hard fork is risky and should\n> be well prepared. We need a long time to deploy it.\n>\n> Despite spam tx on the network, the block capacity is approaching its\n> limit, and we must think ahead. Shall we code a patch right now, to\n> remove the block size limit of 1MB, but not activate it until far in\n> the future. I would propose to remove the 1MB limit at the next block\n> halving in spring 2020, only limit the block size to 32MiB which is\n> the maximum size the current p2p protocol allows. This patch must be\n> in the immediate next release of Bitcoin Core.\n>\n> With this patch in core's next release, Bitcoin works just as before,\n> no fork will ever occur, until spring 2020. But everyone knows there\n> will be a fork scheduled. Third party services, libraries, wallets and\n> exchanges will have enough time to prepare for it over the next three\n> years.\n>\n> We don't yet have an agreement on how to increase the block size\n> limit. There have been many proposals over the past years, like\n> BIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248, BU, and so\n> on. These hard fork proposals, with this patch already in Core's\n> release, they all become soft fork. We'll have enough time to discuss\n> all these proposals and decide which one to go. Take an example, if we\n> choose to fork to only 2MB, since 32MiB already scheduled, reduce it\n> from 32MiB to 2MB will be a soft fork.\n>\n> Anyway, we must code something right now, before it becomes too late.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170328/5780df70/attachment.html>"
            },
            {
                "author": "Johnson Lau",
                "date": "2017-03-29T15:34:41",
                "message_text_only": "> On 29 Mar 2017, at 14:24, Emin G\u00fcn Sirer via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> >Even when several of the experts involved in the document you refer has my respect and admiration, I do not agree with some of their conclusions\n> \n> I'm one of the co-authors of that study. I'd be the first to agree with your conclusion\n> and argue that the 4MB size suggested in that paper should not be used without\n> compensation for two important changes to the network.\n> \n> Our recent measurements of the Bitcoin P2P network show that network speeds\n> have improved tremendously. From February 2016 to February 2017, the average\n> provisioned bandwidth of a reachable Bitcoin node went up by approximately 70%. \n> And that's just in the last year.\n\n4 * 144 * 30 = 17.3GB per month, or 207GB per year. Full node initialisation will become prohibitive for most users until a shortcut is made (e.g. witness pruning and UTXO commitment but these are not trust-free)\n\n> \n> Further, the emergence of high-speed block relay networks, like Falcon (http://www.falcon-net.org <http://www.falcon-net.org/>)\n> and FIBRE, as well as block compression, e.g. BIP152 and xthin, change the picture dramatically. \n\nAlso as the co-author of the selfish mining paper, you should know all these technology assume big miners being benevolent.\n\n> \n> So, the 4MB limit mentioned in our paper should not be used as a protocol limit today. \n> \n> Best,\n> - egs\n> \n> \n> \n> On Tue, Mar 28, 2017 at 3:36 PM, Juan Garavaglia via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> Alphonse,\n> \n>  \n> \n> Even when several of the experts involved in the document you refer has my respect and admiration, I do not agree with some of their conclusions some of their estimations are not accurate other changed like Bootstrap Time, Cost per Confirmed Transaction they consider a network of 450,000,00 GH and today is 3.594.236.966 GH, the energy consumption per GH is old, the cost of electricity is wrong even when the document was made and is hard to find any parameter used that is valid for an analysis today.\n> \n>  \n> \n> Again with all respect to the experts involved in that analysis is not valid today.\n> \n>  \n> \n> I tend to believe more in Moore\u2019s law, Butters' Law of Photonics and Kryder\u2019s Law all has been verified for many years and support that 32 MB in 2020 are possible and equals or less than 1 MB in 2010.\n> \n>  \n> \n> Again may be is not possible Johnson Lau and LukeJr invested a significant amount of time investigating ways to do a safe HF, and may be not possible to do a safe HF today but from processing power, bandwidth and storage is totally valid and Wang Chung proposal has solid grounds.\n> \n>  \n> \n> Regards\n> \n>  \n> \n> Juan\n> \n>  \n> \n>  \n> \n> From: Alphonse Pace [mailto:alp.bitcoin at gmail.com <mailto:alp.bitcoin at gmail.com>] \n> Sent: Tuesday, March 28, 2017 2:53 PM\n> To: Juan Garavaglia <jg at 112bit.com <mailto:jg at 112bit.com>>; Wang Chun <1240902 at gmail.com <mailto:1240902 at gmail.com>>\n> Cc: Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>\n> \n> \n> Subject: Re: [bitcoin-dev] Hard fork proposal from last week's meeting\n> \n>  \n> \n> Juan,\n> \n>  \n> \n> I suggest you take a look at this paper: http://fc16.ifca.ai/bitcoin/papers/CDE+16.pdf <http://fc16.ifca.ai/bitcoin/papers/CDE+16.pdf>  It may help you form opinions based in science rather than what appears to be nothing more than a hunch.  It shows that even 4MB is unsafe.  SegWit provides up to this limit.\n> \n>  \n> \n> 8MB is most definitely not safe today.\n> \n>  \n> \n> Whether it is unsafe or impossible is the topic, since Wang Chun proposed making the block size limit 32MiB.  \n> \n>  \n> \n>  \n> \n> Wang Chun,\n> \n> \n> Can you specify what meeting you are talking about?  You seem to have not replied on that point.  Who were the participants and what was the purpose of this meeting?\n> \n>  \n> \n> -Alphonse\n> \n>  \n> \n> On Tue, Mar 28, 2017 at 12:33 PM, Juan Garavaglia <jg at 112bit.com <mailto:jg at 112bit.com>> wrote:\n> \n> Alphonse,\n> \n>  \n> \n> In my opinion if 1MB limit was ok in 2010, 8MB limit is ok on 2016 and 32MB limit valid in next halving, from network, storage and CPU perspective or 1MB was too high in 2010 what is possible or 1MB is to low today.\n> \n>  \n> \n> If is unsafe or impossible to raise the blocksize is a different topic. \n> \n>  \n> \n> Regards\n> \n>  \n> \n> Juan\n> \n>  \n> \n>  \n> \n> From: bitcoin-dev-bounces at lists.linuxfoundation.org <mailto:bitcoin-dev-bounces at lists.linuxfoundation.org> [mailto:bitcoin-dev-bounces at lists.linuxfoundation.org <mailto:bitcoin-dev-bounces at lists.linuxfoundation.org>] On Behalf Of Alphonse Pace via bitcoin-dev\n> Sent: Tuesday, March 28, 2017 2:24 PM\n> To: Wang Chun <1240902 at gmail.com <mailto:1240902 at gmail.com>>; Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>\n> Subject: Re: [bitcoin-dev] Hard fork proposal from last week's meeting\n> \n>  \n> \n> What meeting are you referring to?  Who were the participants?\n> \n>  \n> \n> Removing the limit but relying on the p2p protocol is not really a true 32MiB limit, but a limit of whatever transport methods provide.  This can lead to differing consensus if alternative layers for relaying are used.  What you seem to be asking for is an unbound block size (or at least determined by whatever miners produce).  This has the possibility (and even likelihood) of removing many participants from the network, including many small miners.  \n> \n>  \n> \n> 32MB in less than 3 years also appears to be far beyond limits of safety which are known to exist far sooner, and we cannot expect hardware and networking layers to improve by those amounts in that time.\n> \n>  \n> \n> It also seems like it would be much better to wait until SegWit activates in order to truly measure the effects on the network from this increased capacity before committing to any additional increases.\n> \n>  \n> \n> -Alphonse\n> \n>  \n> \n>  \n> \n>  \n> \n> On Tue, Mar 28, 2017 at 11:59 AM, Wang Chun via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n> I've proposed this hard fork approach last year in Hong Kong Consensus\n> but immediately rejected by coredevs at that meeting, after more than\n> one year it seems that lots of people haven't heard of it. So I would\n> post this here again for comment.\n> \n> The basic idea is, as many of us agree, hard fork is risky and should\n> be well prepared. We need a long time to deploy it.\n> \n> Despite spam tx on the network, the block capacity is approaching its\n> limit, and we must think ahead. Shall we code a patch right now, to\n> remove the block size limit of 1MB, but not activate it until far in\n> the future. I would propose to remove the 1MB limit at the next block\n> halving in spring 2020, only limit the block size to 32MiB which is\n> the maximum size the current p2p protocol allows. This patch must be\n> in the immediate next release of Bitcoin Core.\n> \n> With this patch in core's next release, Bitcoin works just as before,\n> no fork will ever occur, until spring 2020. But everyone knows there\n> will be a fork scheduled. Third party services, libraries, wallets and\n> exchanges will have enough time to prepare for it over the next three\n> years.\n> \n> We don't yet have an agreement on how to increase the block size\n> limit. There have been many proposals over the past years, like\n> BIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248, BU, and so\n> on. These hard fork proposals, with this patch already in Core's\n> release, they all become soft fork. We'll have enough time to discuss\n> all these proposals and decide which one to go. Take an example, if we\n> choose to fork to only 2MB, since 32MiB already scheduled, reduce it\n> from 32MiB to 2MB will be a soft fork.\n> \n> Anyway, we must code something right now, before it becomes too late.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>  \n> \n>  \n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/2a360938/attachment-0001.html>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-03-29T09:16:43",
                "message_text_only": "> I suggest you take a look at this paper: http://fc16.ifca.ai/\nbitcoin/papers/CDE+16.pdf  It may help you form opinions based in science\nrather than what appears to be nothing more than a hunch.  It shows that\neven 4MB is unsafe.  SegWit provides up to this limit.\n\nI find this paper wholly unconvincing.  Firstly I note that he assumes the\nprice of electricity is 10c/kwh in Oct 2015.  As a miner operating and\nbuilding large farms at that time, I can guarantee you that almost no large\nmines were paying anything even close to that high for electricity, even\nthen.  If he had performed a detailed search on the big mines he would have\nfound as much, or could have asked, but it seems like it was simply made\nup.  Even U.S. industrial electricity prices are lower than that.\n\nMoreover, he focuses his math almost entirely around mining, asserting in\ntable 1 that 98% of the \"cost of processing a transaction\" as being\nmining.  That completely misunderstands the purpose of mining.  Miners\noccasionally trivially resolve double spend conflicts, but miners are\npaid(and played against eachother) for economic security against\nattackers.  They aren't paid to process transactions.  Nodes process\ntransactions and are paid nothing to do so, and their costs are 100x more\nrelevant to the blocksize debate than a paper about miner costs.  Miner's\noperational costs relate to economic protection formulas, not the cost of a\ntransaction.\n\nHe also states: \"the top 10% of nodes receive a 1MB block 2.4min earlier\nthan the bottom 10% \u2014 meaning that depending on their access to nodes, some\nminers could obtain a significant and unfair lead over others in solving\nhash puzzles.\"\n\nHe's using 2012-era logic of mining.  By October 2015, no miner of any size\nwas in the bottom 10% of node propagation.  If they were a small or medium\nsized miner, they mined shares on a pool and would be at most 30 seconds\nbehind the pool.  Pools that didn't get blocks within 20 seconds weren't\npools for long.  If they were a huge miner, they ran their own pool with\ngood propagation times.  For a scientific paper, this is reading like\nsomeone who had absolutely no idea what was really going on in the mining\nworld at the time.  But again, none of that relates to transaction \"costs.\"\n Transactions cost nodes money; protecting the network costs miners money.\nMiners are rewarded with fees; nodes are rewarded only by utility and price\nincreases.\n\nOn Tue, Mar 28, 2017 at 10:53 AM, Alphonse Pace via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Juan,\n>\n> I suggest you take a look at this paper: http://fc16.ifca.ai/\n> bitcoin/papers/CDE+16.pdf  It may help you form opinions based in science\n> rather than what appears to be nothing more than a hunch.  It shows that\n> even 4MB is unsafe.  SegWit provides up to this limit.\n>\n> 8MB is most definitely not safe today.\n>\n> Whether it is unsafe or impossible is the topic, since Wang Chun proposed\n> making the block size limit 32MiB.\n>\n>\n> Wang Chun,\n>\n> Can you specify what meeting you are talking about?  You seem to have not\n> replied on that point.  Who were the participants and what was the purpose\n> of this meeting?\n>\n> -Alphonse\n>\n> On Tue, Mar 28, 2017 at 12:33 PM, Juan Garavaglia <jg at 112bit.com> wrote:\n>\n>> Alphonse,\n>>\n>>\n>>\n>> In my opinion if 1MB limit was ok in 2010, 8MB limit is ok on 2016 and\n>> 32MB limit valid in next halving, from network, storage and CPU perspective\n>> or 1MB was too high in 2010 what is possible or 1MB is to low today.\n>>\n>>\n>>\n>> If is unsafe or impossible to raise the blocksize is a different topic.\n>>\n>\n>>\n>> Regards\n>>\n>>\n>>\n>> Juan\n>>\n>>\n>>\n>>\n>>\n>> *From:* bitcoin-dev-bounces at lists.linuxfoundation.org [mailto:\n>> bitcoin-dev-bounces at lists.linuxfoundation.org] *On Behalf Of *Alphonse\n>> Pace via bitcoin-dev\n>> *Sent:* Tuesday, March 28, 2017 2:24 PM\n>> *To:* Wang Chun <1240902 at gmail.com>; Bitcoin Protocol Discussion <\n>> bitcoin-dev at lists.linuxfoundation.org>\n>> *Subject:* Re: [bitcoin-dev] Hard fork proposal from last week's meeting\n>>\n>>\n>>\n>> What meeting are you referring to?  Who were the participants?\n>>\n>>\n>>\n>> Removing the limit but relying on the p2p protocol is not really a true\n>> 32MiB limit, but a limit of whatever transport methods provide.  This can\n>> lead to differing consensus if alternative layers for relaying are used.\n>> What you seem to be asking for is an unbound block size (or at least\n>> determined by whatever miners produce).  This has the possibility (and even\n>> likelihood) of removing many participants from the network, including many\n>> small miners.\n>>\n>>\n>>\n>> 32MB in less than 3 years also appears to be far beyond limits of safety\n>> which are known to exist far sooner, and we cannot expect hardware and\n>> networking layers to improve by those amounts in that time.\n>>\n>>\n>>\n>> It also seems like it would be much better to wait until SegWit activates\n>> in order to truly measure the effects on the network from this increased\n>> capacity before committing to any additional increases.\n>>\n>>\n>>\n>> -Alphonse\n>>\n>>\n>>\n>>\n>>\n>>\n>>\n>> On Tue, Mar 28, 2017 at 11:59 AM, Wang Chun via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> I've proposed this hard fork approach last year in Hong Kong Consensus\n>> but immediately rejected by coredevs at that meeting, after more than\n>> one year it seems that lots of people haven't heard of it. So I would\n>> post this here again for comment.\n>>\n>> The basic idea is, as many of us agree, hard fork is risky and should\n>> be well prepared. We need a long time to deploy it.\n>>\n>> Despite spam tx on the network, the block capacity is approaching its\n>> limit, and we must think ahead. Shall we code a patch right now, to\n>> remove the block size limit of 1MB, but not activate it until far in\n>> the future. I would propose to remove the 1MB limit at the next block\n>> halving in spring 2020, only limit the block size to 32MiB which is\n>> the maximum size the current p2p protocol allows. This patch must be\n>> in the immediate next release of Bitcoin Core.\n>>\n>> With this patch in core's next release, Bitcoin works just as before,\n>> no fork will ever occur, until spring 2020. But everyone knows there\n>> will be a fork scheduled. Third party services, libraries, wallets and\n>> exchanges will have enough time to prepare for it over the next three\n>> years.\n>>\n>> We don't yet have an agreement on how to increase the block size\n>> limit. There have been many proposals over the past years, like\n>> BIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248, BU, and so\n>> on. These hard fork proposals, with this patch already in Core's\n>> release, they all become soft fork. We'll have enough time to discuss\n>> all these proposals and decide which one to go. Take an example, if we\n>> choose to fork to only 2MB, since 32MiB already scheduled, reduce it\n>> from 32MiB to 2MB will be a soft fork.\n>>\n>> Anyway, we must code something right now, before it becomes too late.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/c0cf92f1/attachment.html>"
            },
            {
                "author": "Aymeric Vitte",
                "date": "2017-03-29T16:00:25",
                "message_text_only": "Le 29/03/2017 \u00e0 11:16, Jared Lee Richardson via bitcoin-dev a \u00e9crit :\n> Nodes process transactions and are paid nothing to do so, and their\n> costs are 100x more relevant to the blocksize debate than a paper\n> about miner costs.\n>\n> Miners are rewarded with fees; nodes are rewarded only by utility and\n> price increases.\n\nNodes are rewarded by just nothing which is the main problem of the\nbitcoin network (who is therefore not a decentralized system today)\nalthough it seems like everybody is eluding the issue (as well as how to\nfind solutions to setup quickly full nodes as you quoted in another\nanswer to this thread, and of course design a decentralized system to\nmake sure that full nodes behave correctly)\n\nBitcoin would not be in this situation (ie maybe at the mercy of a very\nsmall minority of freeriders among all the entities involved in the\nnetwork, ie miners,  just seeking to make more and more money because\nthey invested in an anti-ecological pow, not understanding that bitcoin\nis not just about money) if more nodes were existing and could reject\ntheir blocks\n\nIt seems like the initial message of this thread(t) is an ultimatum:\nwhether you implement what we ask, whether we join BU and then > 50 is\nalmost reached...\n\n\n>\n> On Tue, Mar 28, 2017 at 10:53 AM, Alphonse Pace via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>\n>     Juan,\n>\n>     I suggest you take a look at this\n>     paper: http://fc16.ifca.ai/bitcoin/papers/CDE+16.pdf\n>     <http://fc16.ifca.ai/bitcoin/papers/CDE+16.pdf>  It may help you\n>     form opinions based in science rather than what appears to be\n>     nothing more than a hunch.  It shows that even 4MB is unsafe. \n>     SegWit provides up to this limit.\n>\n>     8MB is most definitely not safe today.\n>\n>     Whether it is unsafe or impossible is the topic, since Wang Chun\n>     proposed making the block size limit 32MiB.  \n>\n>\n>     Wang Chun,\n>\n>     Can you specify what meeting you are talking about?  You seem to\n>     have not replied on that point.  Who were the participants and\n>     what was the purpose of this meeting?\n>\n>     -Alphonse\n>\n>     On Tue, Mar 28, 2017 at 12:33 PM, Juan Garavaglia <jg at 112bit.com\n>     <mailto:jg at 112bit.com>> wrote:\n>\n>         Alphonse,\n>\n>          \n>\n>         In my opinion if 1MB limit was ok in 2010, 8MB limit is ok on\n>         2016 and 32MB limit valid in next halving, from network,\n>         storage and CPU perspective or 1MB was too high in 2010 what\n>         is possible or 1MB is to low today.\n>\n>          \n>\n>         If is unsafe or impossible to raise the blocksize is a\n>         different topic. \n>\n>          \n>\n>         Regards\n>\n>          \n>\n>         Juan\n>\n>          \n>\n>          \n>\n>         *From:*bitcoin-dev-bounces at lists.linuxfoundation.org\n>         <mailto:bitcoin-dev-bounces at lists.linuxfoundation.org>\n>         [mailto:bitcoin-dev-bounces at lists.linuxfoundation.org\n>         <mailto:bitcoin-dev-bounces at lists.linuxfoundation.org>] *On\n>         Behalf Of *Alphonse Pace via bitcoin-dev\n>         *Sent:* Tuesday, March 28, 2017 2:24 PM\n>         *To:* Wang Chun <1240902 at gmail.com\n>         <mailto:1240902 at gmail.com>>; Bitcoin Protocol Discussion\n>         <bitcoin-dev at lists.linuxfoundation.org\n>         <mailto:bitcoin-dev at lists.linuxfoundation.org>>\n>         *Subject:* Re: [bitcoin-dev] Hard fork proposal from last\n>         week's meeting\n>\n>          \n>\n>         What meeting are you referring to?  Who were the participants?\n>\n>          \n>\n>         Removing the limit but relying on the p2p protocol is not\n>         really a true 32MiB limit, but a limit of whatever transport\n>         methods provide.  This can lead to differing consensus if\n>         alternative layers for relaying are used.  What you seem to be\n>         asking for is an unbound block size (or at least determined by\n>         whatever miners produce).  This has the possibility (and even\n>         likelihood) of removing many participants from the network,\n>         including many small miners.  \n>\n>          \n>\n>         32MB in less than 3 years also appears to be far beyond limits\n>         of safety which are known to exist far sooner, and we cannot\n>         expect hardware and networking layers to improve by those\n>         amounts in that time.\n>\n>          \n>\n>         It also seems like it would be much better to wait until\n>         SegWit activates in order to truly measure the effects on the\n>         network from this increased capacity before committing to any\n>         additional increases.\n>\n>          \n>\n>         -Alphonse\n>\n>          \n>\n>          \n>\n>          \n>\n>         On Tue, Mar 28, 2017 at 11:59 AM, Wang Chun via bitcoin-dev\n>         <bitcoin-dev at lists.linuxfoundation.org\n>         <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>\n>             I've proposed this hard fork approach last year in Hong\n>             Kong Consensus\n>             but immediately rejected by coredevs at that meeting,\n>             after more than\n>             one year it seems that lots of people haven't heard of it.\n>             So I would\n>             post this here again for comment.\n>\n>             The basic idea is, as many of us agree, hard fork is risky\n>             and should\n>             be well prepared. We need a long time to deploy it.\n>\n>             Despite spam tx on the network, the block capacity is\n>             approaching its\n>             limit, and we must think ahead. Shall we code a patch\n>             right now, to\n>             remove the block size limit of 1MB, but not activate it\n>             until far in\n>             the future. I would propose to remove the 1MB limit at the\n>             next block\n>             halving in spring 2020, only limit the block size to 32MiB\n>             which is\n>             the maximum size the current p2p protocol allows. This\n>             patch must be\n>             in the immediate next release of Bitcoin Core.\n>\n>             With this patch in core's next release, Bitcoin works just\n>             as before,\n>             no fork will ever occur, until spring 2020. But everyone\n>             knows there\n>             will be a fork scheduled. Third party services, libraries,\n>             wallets and\n>             exchanges will have enough time to prepare for it over the\n>             next three\n>             years.\n>\n>             We don't yet have an agreement on how to increase the\n>             block size\n>             limit. There have been many proposals over the past years,\n>             like\n>             BIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248,\n>             BU, and so\n>             on. These hard fork proposals, with this patch already in\n>             Core's\n>             release, they all become soft fork. We'll have enough time\n>             to discuss\n>             all these proposals and decide which one to go. Take an\n>             example, if we\n>             choose to fork to only 2MB, since 32MiB already scheduled,\n>             reduce it\n>             from 32MiB to 2MB will be a soft fork.\n>\n>             Anyway, we must code something right now, before it\n>             becomes too late.\n>             _______________________________________________\n>             bitcoin-dev mailing list\n>             bitcoin-dev at lists.linuxfoundation.org\n>             <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>             https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>             <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>\n>          \n>\n>\n>\n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-- \nZcash wallets made simple: https://github.com/Ayms/zcash-wallets\nBitcoin wallets made simple: https://github.com/Ayms/bitcoin-wallets\nGet the torrent dynamic blocklist: http://peersm.com/getblocklist\nCheck the 10 M passwords list: http://peersm.com/findmyass\nAnti-spies and private torrents, dynamic blocklist: http://torrent-live.org\nPeersm : http://www.peersm.com\ntorrent-live: https://github.com/Ayms/torrent-live\nnode-Tor : https://www.github.com/Ayms/node-Tor\nGitHub : https://www.github.com/Ayms\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/a4a9932b/attachment-0001.html>"
            },
            {
                "author": "Paul Iverson",
                "date": "2017-03-28T19:56:49",
                "message_text_only": "Thank you for the proposal Wang Chung!\n\nIt is clear that, spam aside, blocks are getting full and we need increase\nthem soon. What I don't like about your proposal is it forces all node\noperators to implicitly accept larger blocks in 2020, even maybe against\ntheir will. 32 MB blocks might result in a loss of decentralization, and it\nmight be too difficult to coordinate for small blocks before it's too late.\n\n\nSo I think Core can't decide on hard forks like this. It must be left up to\nthe users. I think only choice is for Core to add a run-time option to\nallow node operators to increase block size limit, so that this very\ncontroversial decision is not coming from Core. It must come from the\ncommunity.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170328/df218008/attachment-0001.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2017-03-28T20:16:03",
                "message_text_only": "On Tue, Mar 28, 2017 at 12:56 PM, Paul Iverson via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> So I think Core can't decide on hard forks like this. It must be left up to\n> the users. I think only choice is for Core to add a run-time option to allow\n> node operators to increase block size limit, so that this very controversial\n> decision is not coming from Core. It must come from the community.\n\nBitcoin Core's (nor any other software's) maintainers can already not\ndecide on a hard fork, and I keep being confused by the focus on Core\nin this topic. Even if a hard forking change (or lack thereof) was\nincluded into a new release, it is still up to the community to choose\nto run the new software. Bitcoin Core has very intentionally no\nauto-update feature, as the choice for what network rules to implement\nmust come from node operators, not developers. Ask yourself this: if a\nnew Bitcoin Core release would include a new rule that blacklists\n<random famous person>'s coins. What do you think would happen? I hope\nthat people would refuse to update, and choose to run different full\nnode software.\n\nCore is not special. It is one of many pieces of software that\nimplement today's Bitcoin consensus rules. If a hardfork is to take\nplace in a way that does not result in two currencies, it must be\nclear that the entire ecosystem will adopt it. Bitcoin Core will not\nmerge any consensus changes that do not clearly satisfy that\ncriterion.\n\n-- \nPieter"
            },
            {
                "author": "Tom Zander",
                "date": "2017-03-28T20:43:34",
                "message_text_only": "On Tuesday, 28 March 2017 21:56:49 CEST Paul Iverson via bitcoin-dev wrote:\n> It is clear that, spam aside, blocks are getting full and we need increase\n> them soon. What I don't like about your proposal is it forces all node\n> operators to implicitly accept larger blocks in 2020, even maybe against\n> their will. 32 MB blocks might result in a loss of decentralization, and\n> it might be too difficult to coordinate for small blocks before it's too\n> late.\n\nThe suggestion was not to produce 32MB blocks, so your fear here is \nunfounded.\n\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Alphonse Pace",
                "date": "2017-03-28T20:53:30",
                "message_text_only": "His demand (not suggestion) allows it without any safeguards.\n\n>This patch must be in the immediate next release of Bitcoin Core.\n\nThat is not a suggestion.\n\nWang - still waiting on the details of this meeting.  In the spirit of\nopenness, I think you ought to share with the community what kind of secret\nmeetings are happening.\n\n\nOn Tue, Mar 28, 2017 at 3:43 PM, Tom Zander via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Tuesday, 28 March 2017 21:56:49 CEST Paul Iverson via bitcoin-dev wrote:\n> > It is clear that, spam aside, blocks are getting full and we need\n> increase\n> > them soon. What I don't like about your proposal is it forces all node\n> > operators to implicitly accept larger blocks in 2020, even maybe against\n> > their will. 32 MB blocks might result in a loss of decentralization, and\n> > it might be too difficult to coordinate for small blocks before it's too\n> > late.\n>\n> The suggestion was not to produce 32MB blocks, so your fear here is\n> unfounded.\n>\n> --\n> Tom Zander\n> Blog: https://zander.github.io\n> Vlog: https://vimeo.com/channels/tomscryptochannel\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170328/a84076b1/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2017-03-28T21:06:49",
                "message_text_only": "On Tuesday, March 28, 2017 8:53:30 PM Alphonse Pace via bitcoin-dev wrote:\n> His demand (not suggestion) allows it without any safeguards.\n> \n> >This patch must be in the immediate next release of Bitcoin Core.\n> \n> That is not a suggestion.\n\nI think it was probably a design requirement more than a demand. It makes \nsense: if we're aiming to have a long lead time for a possible hardfork, we \nwant to get the lead time started ASAP. (It could perhaps have been \ncommunicated clearer, but let's not read hostility into things when \nunnecessary.)\n\nMeta-topic: Can we try a little harder to avoid sequences of multiple brief \nreplies in a matter of minutes? Combine them to a single reply.\n\nLuke"
            },
            {
                "author": "David Vorick",
                "date": "2017-03-29T16:18:26",
                "message_text_only": "Perhaps you are fortunate to have a home computer that has more than a\nsingle 512GB SSD. Lots of consumer hardware has that little storage. Throw\non top of it standard consumer usage, and you're often left with less than\n200 GB of free space. Bitcoin consumes more than half of that, which feels\nvery expensive, especially if it motivates you to buy another drive.\n\nI have talked to several people who cite this as the primary reason that\nthey are reluctant to join the full node club.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/68629ee3/attachment.html>"
            },
            {
                "author": "Andrew Johnson",
                "date": "2017-03-29T16:20:03",
                "message_text_only": "What's stopping these users from running a pruned node?  Not every node\nneeds to store a complete copy of the blockchain.\n\n\nOn Wed, Mar 29, 2017 at 11:18 AM David Vorick via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Perhaps you are fortunate to have a home computer that has more than a\n> single 512GB SSD. Lots of consumer hardware has that little storage. Throw\n> on top of it standard consumer usage, and you're often left with less than\n> 200 GB of free space. Bitcoin consumes more than half of that, which feels\n> very expensive, especially if it motivates you to buy another drive.\n>\n> I have talked to several people who cite this as the primary reason that\n> they are reluctant to join the full node club.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-- \nAndrew Johnson\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/a4c50e5f/attachment.html>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-03-29T20:32:05",
                "message_text_only": "> Perhaps you are fortunate to have a home computer that has more than a\nsingle 512GB SSD. Lots of consumer hardware has that little storage.\n\nThat's very poor logic, sorry.  Restricted-space SSD's are not a\ncost-effective hardware option for running a node.  Keeping blocksizes\nsmall has significant other costs for everyone.  Comparing the cost of\nrunning a node under arbitrary conditons A, B, or C when there are far more\nefficient options than any of those is a very bad way to think about the\ncosts of running a node.  You basically have to ignore the significant\nconsequences of keeping blocks small.\n\nIf node operational costs rose to the point where an entire wide swath of\nusers that we do actually need for security purposes could not justify\nrunning a node, that's something important for consideration.  For me, that\ntranslates to modern hardware that's relatively well aligned with the needs\nof running a node - perhaps budget hardware, but still modern - and\nabove-average bandwidth caps.\n\nYou're free to disagree, but your example only makes sense to me if\nblocksize caps didn't have serious consequences.  Even if those\nconsequences are just the threat of a contentious fork by people who are\nmislead about the real consequences, that threat is still a consequence\nitself.\n\nOn Wed, Mar 29, 2017 at 9:18 AM, David Vorick via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Perhaps you are fortunate to have a home computer that has more than a\n> single 512GB SSD. Lots of consumer hardware has that little storage. Throw\n> on top of it standard consumer usage, and you're often left with less than\n> 200 GB of free space. Bitcoin consumes more than half of that, which feels\n> very expensive, especially if it motivates you to buy another drive.\n>\n> I have talked to several people who cite this as the primary reason that\n> they are reluctant to join the full node club.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/24dbcac6/attachment-0001.html>"
            },
            {
                "author": "praxeology_guy",
                "date": "2017-03-29T21:36:17",
                "message_text_only": "Peter R said: \"On that topic, are there any existing proposals detailing a canonical ordering of the UTXO set and a scheme to calculate the root hash?\"\n\nI created such here: \"A Commitment-suitable UTXO set \"Balances\" file data structure\": https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-March/013692.html\n\nIn short it periodically makes snapshots on the state of the UTXO N blocks ago, where N = the snapshot period. UTXOs are ordered by TXID. I've also implemented it in C and tested making them.\n\ngmaxwell says the utxo data format will change and I have other recommended changes to the chainstate database in order to make this more efficient. He pointed me to another similar solution... and suggested this would be done later after SegWit and after the UTXO data format was changed in the chainstate database.\n\nCheers,\nPraxeology Guy\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/7498459c/attachment.html>"
            },
            {
                "author": "Aymeric Vitte",
                "date": "2017-03-29T22:33:20",
                "message_text_only": "I have heard such theory before, it's a complete mistake to think that\nothers would run full nodes to protect their business and then yours,\nunless it is proven that they are decentralized and independent\n\nRunning a full node is trivial and not expensive for people who know how\nto do it, even with much bigger blocks, assuming that the full nodes are\nstill decentralized and that they don't have to fight against big nodes\nwho would attract the traffic first\n\nI have posted many times here a small proposal, that exactly describes\nwhat is going on now, yes miners are nodes too... it's disturbing to see\nthat despite of Tera bytes of BIPs, papers, etc the current situation is\nhappening and that all the supposed decentralized system is biased by\ncentralization\n\nDo we know what majority controls the 6000 full nodes?\n\n\nLe 29/03/2017 \u00e0 22:32, Jared Lee Richardson via bitcoin-dev a \u00e9crit :\n> > Perhaps you are fortunate to have a home computer that has more than\n> a single 512GB SSD. Lots of consumer hardware has that little storage.\n>\n> That's very poor logic, sorry.  Restricted-space SSD's are not a\n> cost-effective hardware option for running a node.  Keeping blocksizes\n> small has significant other costs for everyone.  Comparing the cost of\n> running a node under arbitrary conditons A, B, or C when there are far\n> more efficient options than any of those is a very bad way to think\n> about the costs of running a node.  You basically have to ignore the\n> significant consequences of keeping blocks small.\n>\n> If node operational costs rose to the point where an entire wide swath\n> of users that we do actually need for security purposes could not\n> justify running a node, that's something important for consideration. \n> For me, that translates to modern hardware that's relatively well\n> aligned with the needs of running a node - perhaps budget hardware,\n> but still modern - and above-average bandwidth caps.\n>\n> You're free to disagree, but your example only makes sense to me if\n> blocksize caps didn't have serious consequences.  Even if those\n> consequences are just the threat of a contentious fork by people who\n> are mislead about the real consequences, that threat is still a\n> consequence itself.\n>\n> On Wed, Mar 29, 2017 at 9:18 AM, David Vorick via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>\n>     Perhaps you are fortunate to have a home computer that has more\n>     than a single 512GB SSD. Lots of consumer hardware has that little\n>     storage. Throw on top of it standard consumer usage, and you're\n>     often left with less than 200 GB of free space. Bitcoin consumes\n>     more than half of that, which feels very expensive, especially if\n>     it motivates you to buy another drive.\n>\n>     I have talked to several people who cite this as the primary\n>     reason that they are reluctant to join the full node club.\n>\n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-- \nZcash wallets made simple: https://github.com/Ayms/zcash-wallets\nBitcoin wallets made simple: https://github.com/Ayms/bitcoin-wallets\nGet the torrent dynamic blocklist: http://peersm.com/getblocklist\nCheck the 10 M passwords list: http://peersm.com/findmyass\nAnti-spies and private torrents, dynamic blocklist: http://torrent-live.org\nPeersm : http://www.peersm.com\ntorrent-live: https://github.com/Ayms/torrent-live\nnode-Tor : https://www.github.com/Ayms/node-Tor\nGitHub : https://www.github.com/Ayms\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/c54aa76d/attachment-0001.html>"
            },
            {
                "author": "Ryan J Martin",
                "date": "2017-03-30T05:23:31",
                "message_text_only": "There is alot going on in this thread so I'll reply more broadly.\n\n     The original post and the assorted limit proposals---lead me to something I think is worth reiterating: assuming Bitcoin adoption continues to grow at similar or accelerating rates, then eventually the mempool is going to be filled with thousands of txs at all times whether block limits are 1MB or 16MB. This isn't to say that increasing the limit isn't a worthwhile change, but rather, that if we are going to change the block limit then it should be done with the intent to achieve a fee rate that maximize surplus (and minimize burden) to both users and miners. Even with implementation of a a payment channels system, the pool will likely be faced with having a mountain of txs. Thus the block limit should be optimized in such that social welfare is optimized.\n    Optimized is likely not keeping the limit at 1MB; this maximizes benefit to miners (producers) while minimizing users' surplus (consumer). 'Unlimited' blocks are purely the reverse; maximizing user surplus while minimizing miners' (with the added bonus of creating blocks that will put technical/hardware strain on the network). So perhaps pursue something in-between that actually optimizes based on a social welfare formula---not just an arbitrary auto-adjusting limit like the other proposals I've seen. Feel free to poke holes in this or e-mail me if curious.\n\n     Finally, with respect to getting node counts up, didn't luke-jr or someone come up with an idea of paying nodes a reward by scraping dust and pooling it into a fund of sorts? Was this not possible/feasible? Perhaps at least in the near and medium term something outside of protocol changes could be done to pay a reward to nodes. Even if this is done via voluntary donation system, it may be useful for the purposes of seeing how people respond to incentives and working out an elasticity measure of sorts for running a node.\n\n\nRyan J. Martin\nrjmarti2 at millersville.edu\n(on freenode: tunafizz )\n\n________________________________\nFrom: bitcoin-dev-bounces at lists.linuxfoundation.org [bitcoin-dev-bounces at lists.linuxfoundation.org] on behalf of Aymeric Vitte via bitcoin-dev [bitcoin-dev at lists.linuxfoundation.org]\nSent: Wednesday, March 29, 2017 6:33 PM\nTo: Jared Lee Richardson; Bitcoin Protocol Discussion\nSubject: Re: [bitcoin-dev] Hard fork proposal from last week's meeting\n\n\nI have heard such theory before, it's a complete mistake to think that others would run full nodes to protect their business and then yours, unless it is proven that they are decentralized and independent\n\nRunning a full node is trivial and not expensive for people who know how to do it, even with much bigger blocks, assuming that the full nodes are still decentralized and that they don't have to fight against big nodes who would attract the traffic first\n\nI have posted many times here a small proposal, that exactly describes what is going on now, yes miners are nodes too... it's disturbing to see that despite of Tera bytes of BIPs, papers, etc the current situation is happening and that all the supposed decentralized system is biased by centralization\n\nDo we know what majority controls the 6000 full nodes?\n\nLe 29/03/2017 \u00e0 22:32, Jared Lee Richardson via bitcoin-dev a \u00e9crit :\n> Perhaps you are fortunate to have a home computer that has more than a single 512GB SSD. Lots of consumer hardware has that little storage.\n\nThat's very poor logic, sorry.  Restricted-space SSD's are not a cost-effective hardware option for running a node.  Keeping blocksizes small has significant other costs for everyone.  Comparing the cost of running a node under arbitrary conditons A, B, or C when there are far more efficient options than any of those is a very bad way to think about the costs of running a node.  You basically have to ignore the significant consequences of keeping blocks small.\n\nIf node operational costs rose to the point where an entire wide swath of users that we do actually need for security purposes could not justify running a node, that's something important for consideration.  For me, that translates to modern hardware that's relatively well aligned with the needs of running a node - perhaps budget hardware, but still modern - and above-average bandwidth caps.\n\nYou're free to disagree, but your example only makes sense to me if blocksize caps didn't have serious consequences.  Even if those consequences are just the threat of a contentious fork by people who are mislead about the real consequences, that threat is still a consequence itself.\n\nOn Wed, Mar 29, 2017 at 9:18 AM, David Vorick via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\nPerhaps you are fortunate to have a home computer that has more than a single 512GB SSD. Lots of consumer hardware has that little storage. Throw on top of it standard consumer usage, and you're often left with less than 200 GB of free space. Bitcoin consumes more than half of that, which feels very expensive, especially if it motivates you to buy another drive.\n\nI have talked to several people who cite this as the primary reason that they are reluctant to join the full node club.\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n\n\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n\n--\nZcash wallets made simple: https://github.com/Ayms/zcash-wallets\nBitcoin wallets made simple: https://github.com/Ayms/bitcoin-wallets\nGet the torrent dynamic blocklist: http://peersm.com/getblocklist\nCheck the 10 M passwords list: http://peersm.com/findmyass\nAnti-spies and private torrents, dynamic blocklist: http://torrent-live.org\nPeersm : http://www.peersm.com\ntorrent-live: https://github.com/Ayms/torrent-live\nnode-Tor : https://www.github.com/Ayms/node-Tor\nGitHub : https://www.github.com/Ayms\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/8499f263/attachment-0001.html>"
            },
            {
                "author": "Tom Zander",
                "date": "2017-03-30T10:30:49",
                "message_text_only": "On Thursday, 30 March 2017 07:23:31 CEST Ryan J Martin via bitcoin-dev \nwrote:\n>      The original post and the assorted limit proposals---lead me to\n> something I think is worth reiterating: assuming Bitcoin adoption\n> continues to grow at similar or accelerating rates, then eventually the\n> mempool is going to be filled with thousands of txs at all times whether\n> block limits are 1MB or 16MB\n\nThis is hopefully true. :)\n\nThere is an unbounded amount of demand for block space, and as such it \ndoesn\u2019t benefit anyone if the amount of free transactions get out of hand. \nBecause freeloaders would definitely be able to completely suffocate Bitcoin.\n\nIn the mail posted by OP he makes clear that this is a proposal for a hard \nfork to change the block size *limit*. The actual block size would not be \nchanged at the same time, it will continue being set based on market values \nor whatever we decide between now and then.\n\nThe block size itself should be set based on the amount of fees being paid \nto miners to make a block.\n\nWhat we want is a true fee-market where the miner can decide to make a block \nsmaller to get people to pay more fees, because if we were to go to 16MB \nblocks in one go, the cost of the miner would go up, but his reward based on \nfees will go down!\nA block so big that 100% of the transactions will always be mined in the \nnext block will just cause a large section of people to no longer feel the \nneed to pay fees.\n\nAs such I don\u2019t fear the situation where the block size limit goes up a lot \nin one go, because it is not in anyone\u2019s interest to make the actual block \nsize follow.\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-03-30T16:44:21",
                "message_text_only": "> The block size itself should be set based on the amount of fees being\npaid to miners to make a block.\n\nThere's a formula to this as well, though going from that to a blocksize\nnumber will be very difficult.  Miner fees need to be sufficient to\nmaintain economic protection against attackers.  There is no reason that\nminer fees need to be any higher than \"sufficient.\"  I believe that\n\"sufficient\" value can be estimated by considering a potential attacker\nseeking to profit from short-selling Bitcoin after causing a panic crash.\nIf they can earn more profit from shorting Bitcoin than it costs to buy,\nbuild/deploy, and perform a 51% attack to shut down the network, then we\nare clearly vulnerable.  The equation for the profit side of the equation\ncan be worked out as:\n\n(bitcoin_price * num_coins_shortable * panic_price_drop_percentage)\n\nThe equation for the cost side of the equation depends on the total amount\nof miner hardware that the network is sustainably paying to operate,\nfactoring in all costs of the entire bitcoin mining lifecycle(HW cost,\ndeployment cost, maintenance cost, electricity, amortized facilities cost,\nbusiness overheads, orphan losses, etc) except chip design, which the\nattacker may be able to take advantage of for free.  For convenience I'm\nsimplifying that complicated cost down to a single number I'm calling\n\"hardware_lifespan\" although the concept is slightly more involved than\nthat.\n\n(total_miner_payouts * bitcoin_price * hardware_lifespan)\n\nBitcoin_price is on boths ides of the equation and so can be divided out,\ngiving:\n\nUnsafe point = (num_coins_shortable * panic_price_drop_percentage) <\n(total_miner_payouts\n* hardware_lifespan)\n\nEstimating the total number of shortable coins an attacker of nearly\nunlimited funds is tricky, especially when things like high leverage levels\nor naked short selling may be offered by exchanges.  The percent of damage\nthe resulting panic would cause is also tricky to estimate, but on both\nnumbers we can make some rough guesses and see how they play out.  With\nmore conservative numbers like say, 2 year hardware lifespan, 10% short,\n70% panic drop you get: 1,300k coins profit, 1800 BTC/day in fees minimum\nneeded to make the attack cost more than it profits.\n\nUsing various inputs and erring on the side of caution, I get a minimum\nBTC/day fee range of 500-2000.  Unfortunately if the blocksize isn't\nincreased, a relatively small number of transactions/users have to bear the\nfull cost of the minimum fees, over time increasing the minimum \"safe\"\naverage fee paid to 0.008 BTC, 30x the fees people are complaining about\ntoday, and increasing in real-world terms as price increases.  All that\nsaid, I believe the costs for node operation are the number that gets hit\nfirst as blocksizes are increased, at least past 2020.  I don't think\nblocksizes could be increased to such a size that the insufficient-fee\nvulnerability would be a bigger concern than high node operational costs.\nThe main thing I don't have a good grasp on at the moment is any math to\nestimate how many nodes we need to protect against the attacks that can\ncome from having few nodes, or even a clear understanding of what those\nattacks are.\n\n> A block so big that 100% of the transactions will always be mined in the\n> next block will just cause a large section of people to no longer feel the\n> need to pay fees.\n\nThis is also totally true.  A system that tried to eliminate the fee\nmarkets would be flawed, and fortunately miners have significant reasons to\noppose such a system.\n\nThe reverse is also a problem - If miners as a large group sought to lower\nblocksizes to force fee markets higher, that could be a problem.  I don't\nhave solutions for the issue at this time, but something I've turned over\nin my mind.\n\nOn Thu, Mar 30, 2017 at 3:30 AM, Tom Zander via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Thursday, 30 March 2017 07:23:31 CEST Ryan J Martin via bitcoin-dev\n> wrote:\n> >      The original post and the assorted limit proposals---lead me to\n> > something I think is worth reiterating: assuming Bitcoin adoption\n> > continues to grow at similar or accelerating rates, then eventually the\n> > mempool is going to be filled with thousands of txs at all times whether\n> > block limits are 1MB or 16MB\n>\n> This is hopefully true. :)\n>\n> There is an unbounded amount of demand for block space, and as such it\n> doesn\u2019t benefit anyone if the amount of free transactions get out of hand.\n> Because freeloaders would definitely be able to completely suffocate\n> Bitcoin.\n>\n> In the mail posted by OP he makes clear that this is a proposal for a hard\n> fork to change the block size *limit*. The actual block size would not be\n> changed at the same time, it will continue being set based on market values\n> or whatever we decide between now and then.\n>\n> The block size itself should be set based on the amount of fees being paid\n> to miners to make a block.\n>\n> What we want is a true fee-market where the miner can decide to make a\n> block\n> smaller to get people to pay more fees, because if we were to go to 16MB\n> blocks in one go, the cost of the miner would go up, but his reward based\n> on\n> fees will go down!\n> A block so big that 100% of the transactions will always be mined in the\n> next block will just cause a large section of people to no longer feel the\n> need to pay fees.\n>\n> As such I don\u2019t fear the situation where the block size limit goes up a lot\n> in one go, because it is not in anyone\u2019s interest to make the actual block\n> size follow.\n> --\n> Tom Zander\n> Blog: https://zander.github.io\n> Vlog: https://vimeo.com/channels/tomscryptochannel\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/dd71b786/attachment-0001.html>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-03-30T20:51:45",
                "message_text_only": "> What we want is a true fee-market where the miner can decide to make a\nblock\n> smaller to get people to pay more fees, because if we were to go to 16MB\n> blocks in one go, the cost of the miner would go up, but his reward based\non\n> fees will go down!\n\nI agree in concept with everything you've said here, but I think there's a\nfrequent misconception that there's a certain level of miner payouts that\nminers \"deserve\" and/or the opposite, that miners \"deserve\" as little as\npossible.  The 51% attacks that PoW's shields us from are relatively well\ndefined, which can be used to estimate the minimum amount of sustainable\nfees for shielding.  Beyond that minimum amount of fees, the best amount of\nfees for every non-miner is the lowest.\n\nUnfortunately miners could arbitrarily decide to limit blocksizes, and\nthere's little except relay restrictions that everyone else could do about\nit.  Fortunately miners so far have pushed for blocksize increases at least\nas much as anyone else, though the future when Bitcoin adoption stabilizes\nwould be an unknown.\n\n> A block so big that 100% of the transactions will always be mined in the\n> next block will just cause a large section of people to no longer feel the\n> need to pay fees.\n\nFYI, I don't see this happening again ever, barring brief exceptions,\nunless there was a sudden blocksize change, which ideally we'd avoid ever\nhappening.  The stable average value of the transaction fee determines what\nkind of business use-cases can be built using Bitcoin.  An average fee of\n$0.001 usd enables a lot more use cases than $0.10 average fees, and $50.00\naverage fees still have far more possible use cases than a $1000 average\nfee.  If fees stabilize low, use cases will spring up to fill the\nblockspace, unless miners arbitraily seek to keep the fees above some level.\n\nOn Thu, Mar 30, 2017 at 3:30 AM, Tom Zander via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Thursday, 30 March 2017 07:23:31 CEST Ryan J Martin via bitcoin-dev\n> wrote:\n> >      The original post and the assorted limit proposals---lead me to\n> > something I think is worth reiterating: assuming Bitcoin adoption\n> > continues to grow at similar or accelerating rates, then eventually the\n> > mempool is going to be filled with thousands of txs at all times whether\n> > block limits are 1MB or 16MB\n>\n> This is hopefully true. :)\n>\n> There is an unbounded amount of demand for block space, and as such it\n> doesn\u2019t benefit anyone if the amount of free transactions get out of hand.\n> Because freeloaders would definitely be able to completely suffocate\n> Bitcoin.\n>\n> In the mail posted by OP he makes clear that this is a proposal for a hard\n> fork to change the block size *limit*. The actual block size would not be\n> changed at the same time, it will continue being set based on market values\n> or whatever we decide between now and then.\n>\n> The block size itself should be set based on the amount of fees being paid\n> to miners to make a block.\n>\n> What we want is a true fee-market where the miner can decide to make a\n> block\n> smaller to get people to pay more fees, because if we were to go to 16MB\n> blocks in one go, the cost of the miner would go up, but his reward based\n> on\n> fees will go down!\n> A block so big that 100% of the transactions will always be mined in the\n> next block will just cause a large section of people to no longer feel the\n> need to pay fees.\n>\n> As such I don\u2019t fear the situation where the block size limit goes up a lot\n> in one go, because it is not in anyone\u2019s interest to make the actual block\n> size follow.\n> --\n> Tom Zander\n> Blog: https://zander.github.io\n> Vlog: https://vimeo.com/channels/tomscryptochannel\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/1f44fdaf/attachment.html>"
            },
            {
                "author": "Tom Zander",
                "date": "2017-03-30T21:57:59",
                "message_text_only": "On Thursday, 30 March 2017 22:51:45 CEST Jared Lee Richardson wrote:\n> Unfortunately miners could arbitrarily decide to limit blocksizes, and\n> there's little except relay restrictions that everyone else could do about\n> it.\n\nNo, there is a lot you and I can do about it. They call it a fee market for \na reason because you can take your money elsewhere. You can choose to not \nmake the transfer at all, use another crypto or just use fiat.\n\nBitcoin has value because we use it as money, supporess that usecase and the \nvalue of it goes down.\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "David Vorick",
                "date": "2017-03-29T16:25:47",
                "message_text_only": "On Mar 29, 2017 12:20 PM, \"Andrew Johnson\" <andrew.johnson83 at gmail.com>\nwrote:\n\nWhat's stopping these users from running a pruned node?  Not every node\nneeds to store a complete copy of the blockchain.\n\n\nPruned nodes are not the default configuration, if it was the default\nconfiguration then I think you would see far more users running a pruned\nnode.\n\nBut that would also substantially increase the burden on archive nodes.\n\n\nFurther discussion about disk space requirements should be taken to another\nthread.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/9f1bb665/attachment.html>"
            },
            {
                "author": "Andrew Johnson",
                "date": "2017-03-29T16:41:29",
                "message_text_only": "I believe that as we continue to add users to the system by scaling\ncapacity that we will see more new nodes appear, but I'm at a bit of a loss\nas to how to empirically prove it.\n\nI do see your point on increasing load on archival nodes, but the majority\nof that load is going to come from new nodes coming online, they're the\nonly ones going after very old blocks.   I could see that as a potential\nattack vector, overwhelm the archival nodes by spinning up new nodes\nconstantly, therefore making it difficult for a \"real\" new node to get up\nto speed in a reasonable amount of time.\n\nPerhaps the answer there would be a way to pay an archival node a small\namount of bitcoin in order to retrieve blocks older than a certain cutoff?\nInclude an IP address for the node asking for the data as metadata in the\ntransaction...  Archival nodes could set and publish their own policy, let\nthe market decide what those older blocks are worth.  Would also help to\nincentivize running archival node, which we do need.  Of course, this isn't\nvery user friendly.\n\nWe can take this to bitcoin-discuss, if we're getting too far off topic.\n\n\nOn Wed, Mar 29, 2017 at 11:25 AM David Vorick <david.vorick at gmail.com>\nwrote:\n\n>\n> On Mar 29, 2017 12:20 PM, \"Andrew Johnson\" <andrew.johnson83 at gmail.com>\n> wrote:\n>\n> What's stopping these users from running a pruned node?  Not every node\n> needs to store a complete copy of the blockchain.\n>\n>\n> Pruned nodes are not the default configuration, if it was the default\n> configuration then I think you would see far more users running a pruned\n> node.\n>\n> But that would also substantially increase the burden on archive nodes.\n>\n>\n> Further discussion about disk space requirements should be taken to\n> another thread.\n>\n>\n> --\nAndrew Johnson\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/9b48ebe3/attachment-0001.html>"
            },
            {
                "author": "Aymeric Vitte",
                "date": "2017-03-29T17:14:50",
                "message_text_only": "Well it's not going off-topic since the btc folks need now to find a way\nto counter the attack\n\nThe disk space story is know to be a non issue, because encouraging\npeople to run nodes while they don't know how to dedicate the right\nstorage space that is trivial and not expensive to get today is just\nstupid, they should not try to run full nodes, and no I tested with non\nSSD drives, I was more wondering about cpu and bandwidth use, but did\nnot notice any impact, just stopped because a repeated sw bug or drive\nissue desynched the chain and bitcoin-qt was trying to reload it from\nthe begining each time, which in my case was taking 10 days despite of\ngood bandwidth (which would allow me to torrent the entire chain + state\nin less than 20 hours), so I stopped after the 3rd crash, setting up a\nfull node on my servers is still in the todo list (very low priority for\nthe reasons already explained)\n\nRunning a prune node implies first to setup a full node, so the same\nproblematic applies and then the advantage of pruning is not really\nobvious, I don't know what's the strange story about \"archival nodes\", I\nproposed something else\n\nBack to the topic, the conclusion is that this is not difficult at all\nfor many people to run efficient full nodes, ideally the community\nshould promote this, seed a torrent with a recent state, implement a\npatch to defeat BU plans and have everybody upgrade\n\nBut of course this will not happen\n\n\nLe 29/03/2017 \u00e0 18:41, Andrew Johnson a \u00e9crit :\n> I believe that as we continue to add users to the system by scaling\n> capacity that we will see more new nodes appear, but I'm at a bit of a\n> loss as to how to empirically prove it. \n>\n> I do see your point on increasing load on archival nodes, but the\n> majority of that load is going to come from new nodes coming online,\n> they're the only ones going after very old blocks.   I could see that\n> as a potential attack vector, overwhelm the archival nodes by spinning\n> up new nodes constantly, therefore making it difficult for a \"real\"\n> new node to get up to speed in a reasonable amount of time. \n>\n> Perhaps the answer there would be a way to pay an archival node a\n> small amount of bitcoin in order to retrieve blocks older than a\n> certain cutoff?  Include an IP address for the node asking for the\n> data as metadata in the transaction...  Archival nodes could set and\n> publish their own policy, let the market decide what those older\n> blocks are worth.  Would also help to incentivize running archival\n> node, which we do need.  Of course, this isn't very user friendly. \n>\n> We can take this to bitcoin-discuss, if we're getting too far off topic.\n>\n>\n> On Wed, Mar 29, 2017 at 11:25 AM David Vorick <david.vorick at gmail.com\n> <mailto:david.vorick at gmail.com>> wrote:\n>\n>\n>     On Mar 29, 2017 12:20 PM, \"Andrew Johnson\"\n>     <andrew.johnson83 at gmail.com <mailto:andrew.johnson83 at gmail.com>>\n>     wrote:\n>\n>         What's stopping these users from running a pruned node?  Not\n>         every node needs to store a complete copy of the blockchain. \n>\n>\n>     Pruned nodes are not the default configuration, if it was the\n>     default configuration then I think you would see far more users\n>     running a pruned node.\n>\n>     But that would also substantially increase the burden on archive\n>     nodes.\n>\n>\n>     Further discussion about disk space requirements should be taken\n>     to another thread.\n>\n>\n> -- \n> Andrew Johnson\n>\n\n-- \nZcash wallets made simple: https://github.com/Ayms/zcash-wallets\nBitcoin wallets made simple: https://github.com/Ayms/bitcoin-wallets\nGet the torrent dynamic blocklist: http://peersm.com/getblocklist\nCheck the 10 M passwords list: http://peersm.com/findmyass\nAnti-spies and private torrents, dynamic blocklist: http://torrent-live.org\nPeersm : http://www.peersm.com\ntorrent-live: https://github.com/Ayms/torrent-live\nnode-Tor : https://www.github.com/Ayms/node-Tor\nGitHub : https://www.github.com/Ayms\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/0b5f83cc/attachment.html>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-03-29T20:53:40",
                "message_text_only": "> Pruned nodes are not the default configuration, if it was the default\nconfiguration then I think you would see far more users running a pruned\nnode.\n\nDefault configurations aren't a big enough deal to factor into the critical\ndiscussion of node costs versus transaction fee cost.  Default\nconfigurations can be changed, and if nodes are negatively affected by a\ndefault configuration, there will be an abundance of information about how\nto correct that effect by turning on pruning.  Bitcoin can't design with\nthe assumption that people can't google - If we wanted to cater to that\npopulation group right now, we'd need 100x the blocksize at least.\n\n> But that would also substantially increase the burden on archive nodes.\n\nThis is already a big problem from the measurements I've been looking at.\nThere are alternatives that need to be considered there as well.  If we\nlimit ourselves to not changing the syncing process for most users, the\nblocksize limit debate changes drastically.  Hard drive costs, CPU costs,\npropagation times... none of those things matter because the cost of sync\nbandwidth is so incredibly high even now ($130ish per month, see other\nemail).  Even if we didn't increase the blocksize any more than segwit,\nwe're already seeing sync costs being shifted onto fewer nodes - I.e., Luke\nJr's scan finding ~50k nodes online but only 7k of those show up on sites\nlike bitnodes.21.co.  Segwit will shift it further until the few nodes\nproviding sync limit speeds and/or max out on connections, providing no\nfully-sync'd nodes for a new node to connect to. Then wallet providers /\nnode software will offer a solution - A bundled utxo checkpoint that\nremoves the need to sync.  This slightly increases centralization, and\nincreases centralization more if core were to adopt the same approach.\n\nThe advantage would be tremendous for such a simple solution - Node costs\nwould drop by a full order of magnitude for full nodes even today, more\nwhen archival nodes are more restricted, history is bigger, and segwit\nblocksizes are in effect, and then blocksizes could be safely increased by\nnearly the same order of magnitude, increasing the utility of bitcoin and\nthe number of people that can effectively use it.\n\nAnother, much more complicated option is for the node sync process to\nfunction like a tor network.  A very small number of seed nodes could send\ndata on to only other nodes with the highest bandwidth available(and good\nretention policy, i.e. not tightly pruning as they sync), who then spread\nit out further and so on.  That's complicated though, because as far as I\nknow the syncing process today has no ability to exchange a selfish syncing\nnode for a high performing syncing node.  I'm not even sure - will a\nsyncing node opt to sync from a different node that, itself, isn't fully\nsync'd but is farther ahead?\n\nAt any rate, syncing bandwidth usage is a critical problem for future\ngrowth and is solvable.  The upsides of fixing it are huge, though.\n\nOn Wed, Mar 29, 2017 at 9:25 AM, David Vorick via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> On Mar 29, 2017 12:20 PM, \"Andrew Johnson\" <andrew.johnson83 at gmail.com>\n> wrote:\n>\n> What's stopping these users from running a pruned node?  Not every node\n> needs to store a complete copy of the blockchain.\n>\n>\n> Pruned nodes are not the default configuration, if it was the default\n> configuration then I think you would see far more users running a pruned\n> node.\n>\n> But that would also substantially increase the burden on archive nodes.\n>\n>\n> Further discussion about disk space requirements should be taken to\n> another thread.\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/6593ee82/attachment.html>"
            },
            {
                "author": "Daniele Pinna",
                "date": "2017-03-29T19:33:58",
                "message_text_only": "What about periodically committing the entire UTXO set to a special\ncheckpoint block which becomes the new de facto Genesis block?\n\nDaniele\n\n------------------------------\n\nMessage: 5\nDate: Wed, 29 Mar 2017 16:41:29 +0000\nFrom: Andrew Johnson <andrew.johnson83 at gmail.com>\nTo: David Vorick <david.vorick at gmail.com>\nCc: Bitcoin Dev <bitcoin-dev at lists.linuxfoundation.org>\nSubject: Re: [bitcoin-dev] Hard fork proposal from last week's meeting\nMessage-ID:\n        <CAAy62_+JtoAuM-RsrAAp5eiGiO+OHLDjzqgbnF2De7TUU7TyYg at mail.gmail.com>\nContent-Type: text/plain; charset=\"utf-8\"\n\nI believe that as we continue to add users to the system by scaling\ncapacity that we will see more new nodes appear, but I'm at a bit of a loss\nas to how to empirically prove it.\n\nI do see your point on increasing load on archival nodes, but the majority\nof that load is going to come from new nodes coming online, they're the\nonly ones going after very old blocks.   I could see that as a potential\nattack vector, overwhelm the archival nodes by spinning up new nodes\nconstantly, therefore making it difficult for a \"real\" new node to get up\nto speed in a reasonable amount of time.\n\nPerhaps the answer there would be a way to pay an archival node a small\namount of bitcoin in order to retrieve blocks older than a certain cutoff?\nInclude an IP address for the node asking for the data as metadata in the\ntransaction...  Archival nodes could set and publish their own policy, let\nthe market decide what those older blocks are worth.  Would also help to\nincentivize running archival node, which we do need.  Of course, this isn't\nvery user friendly.\n\nWe can take this to bitcoin-discuss, if we're getting too far off topic.\n\n\nOn Wed, Mar 29, 2017 at 11:25 AM David Vorick <david.vorick at gmail.com>\nwrote:\n\n>\n> On Mar 29, 2017 12:20 PM, \"Andrew Johnson\" <andrew.johnson83 at gmail.com>\n> wrote:\n>\n> What's stopping these users from running a pruned node?  Not every node\n> needs to store a complete copy of the blockchain.\n>\n>\n> Pruned nodes are not the default configuration, if it was the default\n> configuration then I think you would see far more users running a pruned\n> node.\n>\n> But that would also substantially increase the burden on archive nodes.\n>\n>\n> Further discussion about disk space requirements should be taken to\n> another thread.\n>\n>\n> --\nAndrew Johnson\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/\nattachments/20170329/9b48ebe3/attachment.html>\n\n------------------------------\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/9ef02e82/attachment.html>"
            },
            {
                "author": "Peter R",
                "date": "2017-03-29T20:28:29",
                "message_text_only": "I believe nearly everyone at Bitcoin Unlimited would be supportive of a UTXO check-pointing scheme.  I\u2019d love to see this happen, as it would greatly reduce the time needed to get a new node up-and-running, for node operators who are comfortable trusting these commitments.  \n\nI\u2019m confident that we could work with the miners who we have good relationships with to start including the root hash of the (lagging) UTXO set in their coinbase transactions, in order to begin transforming this idea into reality.  We could also issue regular transactions from \u201csemi-trusted\u201d addresses controlled by known people that include the same root hash in an OP_RETURN output, which would allow cross-checking against the miners\u2019 UTXO commitments, as part of this initial \u201cprototype\u201d system.\n\nThis would \"get the ball rolling\" on UTXO commitments in a permissionless way (no one can stop us from doing this). If the results from this prototype commitment scheme were positive, then perhaps there would be support from the community and miners to enforce a new rule which requires the (lagging) root hashes be included in new blocks.  At that point, the UTXO commitment scheme is no longer a prototype but a trusted feature of the Bitcoin network.    \n\nOn that topic, are there any existing proposals detailing a canonical ordering of the UTXO set and a scheme to calculate the root hash?\n\nBest regards,\nPeter\n\n\n> On Mar 29, 2017, at 12:33 PM, Daniele Pinna via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> What about periodically committing the entire UTXO set to a special checkpoint block which becomes the new de facto Genesis block? \n> \n> Daniele \n> \n> ------------------------------\n> \n> Message: 5\n> Date: Wed, 29 Mar 2017 16:41:29 +0000\n> From: Andrew Johnson <andrew.johnson83 at gmail.com <mailto:andrew.johnson83 at gmail.com>>\n> To: David Vorick <david.vorick at gmail.com <mailto:david.vorick at gmail.com>>\n> Cc: Bitcoin Dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>>\n> Subject: Re: [bitcoin-dev] Hard fork proposal from last week's meeting\n> Message-ID:\n>         <CAAy62_+JtoAuM-RsrAAp5eiGiO+OHLDjzqgbnF2De7TUU7TyYg at mail.gmail.com <mailto:CAAy62_%2BJtoAuM-RsrAAp5eiGiO%2BOHLDjzqgbnF2De7TUU7TyYg at mail.gmail.com>>\n> Content-Type: text/plain; charset=\"utf-8\"\n> \n> I believe that as we continue to add users to the system by scaling\n> capacity that we will see more new nodes appear, but I'm at a bit of a loss\n> as to how to empirically prove it.\n> \n> I do see your point on increasing load on archival nodes, but the majority\n> of that load is going to come from new nodes coming online, they're the\n> only ones going after very old blocks.   I could see that as a potential\n> attack vector, overwhelm the archival nodes by spinning up new nodes\n> constantly, therefore making it difficult for a \"real\" new node to get up\n> to speed in a reasonable amount of time.\n> \n> Perhaps the answer there would be a way to pay an archival node a small\n> amount of bitcoin in order to retrieve blocks older than a certain cutoff?\n> Include an IP address for the node asking for the data as metadata in the\n> transaction...  Archival nodes could set and publish their own policy, let\n> the market decide what those older blocks are worth.  Would also help to\n> incentivize running archival node, which we do need.  Of course, this isn't\n> very user friendly.\n> \n> We can take this to bitcoin-discuss, if we're getting too far off topic.\n> \n> \n> On Wed, Mar 29, 2017 at 11:25 AM David Vorick <david.vorick at gmail.com <mailto:david.vorick at gmail.com>>\n> wrote:\n> \n> >\n> > On Mar 29, 2017 12:20 PM, \"Andrew Johnson\" <andrew.johnson83 at gmail.com <mailto:andrew.johnson83 at gmail.com>>\n> > wrote:\n> >\n> > What's stopping these users from running a pruned node?  Not every node\n> > needs to store a complete copy of the blockchain.\n> >\n> >\n> > Pruned nodes are not the default configuration, if it was the default\n> > configuration then I think you would see far more users running a pruned\n> > node.\n> >\n> > But that would also substantially increase the burden on archive nodes.\n> >\n> >\n> > Further discussion about disk space requirements should be taken to\n> > another thread.\n> >\n> >\n> > --\n> Andrew Johnson\n> -------------- next part --------------\n> An HTML attachment was scrubbed...\n> URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/9b48ebe3/attachment.html <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/9b48ebe3/attachment.html>>\n> \n> ------------------------------\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/ca39b10a/attachment.html>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-03-29T22:17:40",
                "message_text_only": "> I\u2019m confident that we could work with the miners who we have good\nrelationships with to start including the root hash of the (lagging) UTXO\nset in their coinbase transactions, in order to begin transforming this\nidea into reality.\n\nBy itself, this wouldn't work without a way for a new node to differentiate\nbetween a false history and a true one.\n\n>  We could also issue regular transactions from \u201csemi-trusted\u201d addresses\ncontrolled by known people that include the same root hash in an OP_RETURN\noutput, which would allow cross-checking against the miners\u2019 UTXO\ncommitments, as part of this initial \u201cprototype\u201d\n\nThis might work, but I fail to understand how a new node could verify an\naddress / transaction without a blockchain to back it.  Even if it could,\nit becomes dependent upon those addresses not being compromised, and the\nowners of those addresses would become targets for potential government\noperations.\n\nHaving the software silently attempt to resolve the problem is risky unless\nit is foolproof.  Otherwise, users will assume their software is showing\nthem the correct history/numbers implicitly, and if the change the utxo\nattacker made was small, the users might be able to follow the main chain\ntotally until it was too late and the attacker struck with an address that\notherwise never transacted.  Sudden, bizarre, hard to debug fork and\npotentially double spend against people who picked up the fraudulent utxo.\n\nUsers already treat wallet software with some level of suspicion, asking if\nthey can trust x or y or z, or like the portion of the BU community\nconvinced that core has been compromised by blockstream bigwigs.  Signed\nreleases could provide the same thing but would encourage both open-source\nsecurity checks of the signed utxo's and potentially of users to check\ndownload signatures.\n\nEither approach is better than what we have now though, so I'd support\nanything.\n\nOn Wed, Mar 29, 2017 at 1:28 PM, Peter R via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I believe nearly everyone at Bitcoin Unlimited would be supportive of a\n> UTXO check-pointing scheme.  I\u2019d love to see this happen, as it would\n> greatly reduce the time needed to get a new node up-and-running, for node\n> operators who are comfortable trusting these commitments.\n>\n> I\u2019m confident that we could work with the miners who we have good\n> relationships with to start including the root hash of the (lagging) UTXO\n> set in their coinbase transactions, in order to begin transforming this\n> idea into reality.  We could also issue regular transactions from\n> \u201csemi-trusted\u201d addresses controlled by known people that include the same\n> root hash in an OP_RETURN output, which would allow cross-checking against\n> the miners\u2019 UTXO commitments, as part of this initial \u201cprototype\u201d system.\n>\n> This would \"get the ball rolling\" on UTXO commitments in a permissionless\n> way (no one can stop us from doing this). If the results from this\n> prototype commitment scheme were positive, then perhaps there would be\n> support from the community and miners to enforce a new rule which requires\n> the (lagging) root hashes be included in new blocks.  At that point, the\n> UTXO commitment scheme is no longer a prototype but a trusted feature of\n> the Bitcoin network.\n>\n> On that topic, are there any existing proposals detailing a canonical\n> ordering of the UTXO set and a scheme to calculate the root hash?\n>\n> Best regards,\n> Peter\n>\n>\n> On Mar 29, 2017, at 12:33 PM, Daniele Pinna via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> What about periodically committing the entire UTXO set to a special\n> checkpoint block which becomes the new de facto Genesis block?\n>\n> Daniele\n>\n> ------------------------------\n>\n> Message: 5\n> Date: Wed, 29 Mar 2017 16:41:29 +0000\n> From: Andrew Johnson <andrew.johnson83 at gmail.com>\n> To: David Vorick <david.vorick at gmail.com>\n> Cc: Bitcoin Dev <bitcoin-dev at lists.linuxfoundation.org>\n> Subject: Re: [bitcoin-dev] Hard fork proposal from last week's meeting\n> Message-ID:\n>         <CAAy62_+JtoAuM-RsrAAp5eiGiO+OHLDjzqgbnF2De7TUU7TyYg at mail.gm\n> ail.com>\n> Content-Type: text/plain; charset=\"utf-8\"\n>\n> I believe that as we continue to add users to the system by scaling\n> capacity that we will see more new nodes appear, but I'm at a bit of a loss\n> as to how to empirically prove it.\n>\n> I do see your point on increasing load on archival nodes, but the majority\n> of that load is going to come from new nodes coming online, they're the\n> only ones going after very old blocks.   I could see that as a potential\n> attack vector, overwhelm the archival nodes by spinning up new nodes\n> constantly, therefore making it difficult for a \"real\" new node to get up\n> to speed in a reasonable amount of time.\n>\n> Perhaps the answer there would be a way to pay an archival node a small\n> amount of bitcoin in order to retrieve blocks older than a certain cutoff?\n> Include an IP address for the node asking for the data as metadata in the\n> transaction...  Archival nodes could set and publish their own policy, let\n> the market decide what those older blocks are worth.  Would also help to\n> incentivize running archival node, which we do need.  Of course, this isn't\n> very user friendly.\n>\n> We can take this to bitcoin-discuss, if we're getting too far off topic.\n>\n>\n> On Wed, Mar 29, 2017 at 11:25 AM David Vorick <david.vorick at gmail.com>\n> wrote:\n>\n> >\n> > On Mar 29, 2017 12:20 PM, \"Andrew Johnson\" <andrew.johnson83 at gmail.com>\n> > wrote:\n> >\n> > What's stopping these users from running a pruned node?  Not every node\n> > needs to store a complete copy of the blockchain.\n> >\n> >\n> > Pruned nodes are not the default configuration, if it was the default\n> > configuration then I think you would see far more users running a pruned\n> > node.\n> >\n> > But that would also substantially increase the burden on archive nodes.\n> >\n> >\n> > Further discussion about disk space requirements should be taken to\n> > another thread.\n> >\n> >\n> > --\n> Andrew Johnson\n> -------------- next part --------------\n> An HTML attachment was scrubbed...\n> URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/atta\n> chments/20170329/9b48ebe3/attachment.html>\n>\n> ------------------------------\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/8b4cf6b4/attachment.html>"
            },
            {
                "author": "David Vorick",
                "date": "2017-03-29T20:28:35",
                "message_text_only": "> > When considering what block size is acceptable, the impact of running\nbitcoin in the background on affordable, non-dedicated home-hardware should\nbe a top consideration.\n\n> Why is that a given?  Is there math that outlines what the risk levels\nare for various configurations of node distributions, vulnerabilities,\netc?  How does one even evaluate the costs versus the benefits of node\ncosts versus transaction fees?\n\nIt's a political assessment. Full nodes are the ultimate arbiters of\nconsensus. When a contentious change is suggested, only the full nodes have\nthe power to either accept or reject this contentious change. If home users\nare not running their own full nodes, then home users have to trust and\nrely on other, more powerful nodes to represent them. Of course, the more\npowerful nodes, simply by nature of having more power, are going to have\ndifferent opinions and objectives from the users. And it's impossible for\n5000 nodes to properly represent the views of 5,000,000 users. Users\nrunning full nodes is important to prevent political hijacking of the\nBitcoin protocol. Running a full node yourself is the only way to guarantee\n(in the absence of trust - which Bitcoin is all about eliminating trust)\nthat changes you are opposed to are not introduced into the network.\n\n> Disk space is not the largest cost, either today or in the future.\nWithout historical checkpointing in some fashion, bandwidth costs are more\nthan 2 orders of magnitude higher cost than every other cost for full\nlistening nodes.\n\nThis statement is not true for home users, it is true for datacenter nodes.\nFor home users, 200 GB of bandwidth and 500 GB of bandwidth largely have\nthe exact same cost. I pay a fixed amount of money for my internet, and if\nI use 500 GB the cost is identical to if I use 200 GB. So long as bandwidth\nis kept under my home bandwidth cap, bandwidth for home nodes is _free_.\n\nSimilarly, disk space may only be $2/TB in bulk, but as a home user I have\na $1000 computer with 500 GB of total storage, 100 GB seems\n(psychologically) to cost a lot closer to $200 than to $2. And if I go out\nand buy an extra drive to support Bitcoin, it's going to cost about $50 no\nmatter what drive I pick, because that's just how much you have to spend to\nget a drive. The fact that I get an extra 900 GB that I'm not using is\nirrelevant - I spent $50 explicitly so I could run a bitcoin node.\n\nThe financials of home nodes follow a completely different math than the\ncosts you are citing by quoting datacenter prices.\n\n> I don't know how to evaluate the impacts of RAM or CPU usage, or\nconsequently electricity usage for a node yet.  I'm open to quantifying any\nof those if there's a method, but it seems absurd that ram could even\nbecome a signficant factor given the abundance of cheap ram nowadays with\nfew programs needing it.\n\nMany home machines only have 4GB of RAM. (I am acutely aware of this\nbecause my own software consumes about 3.5GB of RAM, which means all of our\nusers stuck at 4 GB cannot use my software and Chrome at the same time).\n0.14 uses more than 1 GB of RAM. This I think is not really a problem for\nmost people, but it becomes a problem if the amount of RAM required grows\nenough that they can't have all of their programs open at the same time.\n1GB I think is really the limit you'd want to have before you'd start\nseeing users choose not to run nodes simply because they'd rather have 300\ntabs open instead.\n\nCPU usage I think is pretty minimal. Your node is pretty busy during IBD\nwhich is annoying but tolerable. And during normal usage a user isn't even\ngoing to notice. Same for electricity. They aren't going to notice at the\nend of the month if their electricity bill is a dollar higher because of\nBitcoin.\n\n> The consequence of your logic that holds node operational costs down is\nthat transaction fees for users go up, adoption slows as various use cases\nbecome impractical, price growth suffers, and alt coins that choose lower\nfees over node cost concerns will exhibit competitive growth against\nBitcoin's crypto-currency market share.  Even if you are right, that's\nhardly a tradeoff not worth thoroughly investigating from every angle, the\nconsequences could be just as dire for Bitcoin in 10 years as it would be\nif we made ourselves vulnerable.\n\nThis is very much worth considering. If transaction fees are so high that\nthere is no use case at all for people unwilling to buy extra hardware for\nBitcoin (a dedicated node or whatever), then there is no longer a reason to\nworry about these people as users. However, I think the fees would have to\nget in the $50 range for that to start to be the case. When talking about\nemergency funds - that is, $10k+ that you keep in case your government\ndefaults, hyperinflates, seizes citizen assets, etc. etc. (situations that\nmany Bitcoin users today have to legitimately worry about), then you are\ngoing to be making a few transactions per year at most, and the cost of\nfees on a home node may be $150 / yr, while the cost of dedicated hardware\nmight be $150/yr ($600 box amortized over 4 years). We are two orders of\nmagnitude away from this type of fee pressure, so I think it continues to\nmake sense to be considering the home nodes as the target that we want to\nhit.\n\n>  What about periodically committing the entire UTXO set to a special\ncheckpoint block which becomes the new de facto Genesis block?\n\nThis should be discussed in another thread but I don't think I'm alone in\nsaying that I think this could actually be done in a secure / safe /\nvaluable way if you did it correctly. It would reduce bandwidth pressure on\narchive nodes, reduce disk pressure on full nodes, and imo make for a more\nefficient network overall.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/930defe5/attachment-0001.html>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-03-29T22:08:33",
                "message_text_only": "> It's a political assessment. Full nodes are the ultimate arbiters of\nconsensus.\n\nThat's not true unless miners are thought of as the identical to nodes,\nwhich is has not been true for nearly 4 years now.  Nodes arbitrating a\nconsensus the BU theory - that nodes can restrain miners - but it doesn't\nwork.  If miners were forked off from nonminers, the miner network could\nkeep their blockchain operational under attack from the nodes far better\nthan nodes could keep their blockchain operational under attack from the\nminers.  The miners could effectively grind the node network to a complete\nhalt and probably still run their own fork unimpeded at the same time.\nThis would continue until the the lack of faith in the network drove the\nminers out of business economically, or until the node network capitulated\nand followed the rules of the miner network.\n\nThe reason BU isn't a dire threat is that there's a great rift between the\nminers just like there is between the average users, just as satoshi\nintended, and that rift gives the user network the economic edge.\n\n> If home users are not running their own full nodes, then home users have\nto trust and rely on other, more powerful nodes to represent them. Of\ncourse, the more powerful nodes, simply by nature of having more power, are\ngoing to have different opinions and objectives from the users.\n\nI think you're conflating mining with node operation here.  Node users only\npower is to block the propagation of certain things.  Since miners also\nhave a node endpoint, they can cut the node users out of the equation by\nlinking with eachother directly - something they already do out of\npracticality for propagation.  Node users do not have the power to\narbitrate consensus, that is why we have blocks and PoW.\n\n> And it's impossible for 5000 nodes to properly represent the views of\n5,000,000 users. Users running full nodes is important to prevent political\nhijacking of the Bitcoin protocol.  [..] that changes you are opposed to\nare not introduced into the network.\n\nThis isn't true.  Non-miner nodes cannot produce blocks.  Their opinion is\nnot represented in the blockchain in any way, the blockchain is entirely\nmade up of blocks.  They can commit transactions, but the transactions must\nfollow an even stricter set of rules and short of a user activated PoW\nchange, the miners get to decide.  It might be viable for us to introduce\nways for transactions to vote on things, but that also isn't nodes voting -\nthat's money voting.\n\nBitcoin is structured such that nodes have no votes because nodes cannot be\ntrusted.  They don't inherently represent individuals, they don't\ninherently represent value, and they don't commit work that is played\nagainst eachother to achieve a game theory equilibrium.  That's miners.\n\n> This statement is not true for home users, it is true for datacenter\nnodes. For home users, 200 GB of bandwidth and 500 GB of bandwidth largely\nhave the exact same cost.\n\nYour assumption is predicated upon the idea that users pay a fixed cost for\nany volume of bandwidth.  That assertion is true for some users but not\ntrue for others, and it is becoming exceedingly less true in recent years\nwith the addition of bandwidth caps by many ISP's.  Even users without a\nbandwidth cap can often get a very threatening letter if they were to max\ntheir connection 24/7.  Assuming unlimited user bandwidth in the future and\ncomparing that with limited datacenter bandwidth is extremely short\nsighted.  Fundamentally, if market forces have established that datacenter\nbandwidth costs $0.09 per GB, what makes you think that ISP's don't have to\ndeal with the same limitations?  They do, the difference is that $0.09 per\nGB times the total usage across the ISP's customer base is far, far lower\nthan $80 times the number of customers.  The more that a small group of\ncustomers deviating wildly becomes a problem for them, the more they will\nadd bandwidth caps or send threatening letters or even rate-limit or stop\nserving those users.\n\nWithout that assumption, your math and examples fall apart - Bandwidth\ncosts for full archival nodes are nearly 50 times higher than storage costs\nno matter whether they are at home or in a datacenter.\n\n> The financials of home nodes follow a completely different math than the\ncosts you are citing by quoting datacenter prices.\n\nNo, they really aren't without your assumption.  Yes, they are somewhat\ndifferent - If someone has a 2TB hard drive but only ever uses 40% of it,\nthe remaining hard drive space would have a cost of zero.  Those specific\nexamples break down when you average over several years and fifty thousand\nusers.  If that same user was running a bitcoin node and hard drive space\nwas indeed a concern, they would factor that desire into the purchase of\ntheir next computer, preferring those with larger hard drives.  That\nreintroduces the cost with the same individual who had no cost before.  The\ncost difference doesn't work out to the exact same numbers as the\ndatacenter costs, who have a better economy of scale but also have profit\nand business overhead, but all of the math I've done indicates that over\nthousands of individuals and several years of time, the costs land in the\nsame ballpark.  For example - Comcast bandwidth cap = 1000gb @ ~$80/month.\n $0.08/GB.  Amazon's first tier is currently $0.09.  Much closer than I\neven expected before I worked out the math.  I'm open to being proven wrong.\n\n> 0.14 uses more than 1 GB of RAM.\n\nI'm running 0.13.2 and only see 300 mb of ram.  Why is 0.14 using three\ntimes the ram?\n\n> 1GB I think is really the limit you'd want to have before you'd start\nseeing users choose not to run nodes simply\n\nAgain, while I sympathize with the concept, I don't believe holding the\ngrowth of the entire currency back based on minimum specs is a fair\ntradeoff.  The impact on usecases that depend on a given fee level is total\nobliteration.  That's unavoidable for things like microtransactions, but a\nfee level of $1/tx allows for hundreds of opportunities that a fee level of\n$100/tx does not.  That difference may be the deciding factor in the\nnetwork effect between Bitcoin and a competitor altcoin.  Bitcoin dying out\nbecause a better-operated coin steals its first-mover advantage is just as\nbad as bitcoin dying out because an attacker halted tx propagation and\nkilled the network.  Probably even worse - First mover advantages are\nalmost never retaken, but the network could recover from a peering attack\nwith software changes and community/miner responses.\n\n> However, I think the fees would have to get in the $50 range for that to\nstart to be the case.\n\nI calculated this out.  If blocksizes aren't increased, but price increases\ncontinue as they have in the last 3-5 years, per-node operational costs for\none month drop from roughly $10-15ish (using datacenter numbers, which you\nsaid would be higher than home user numbers and might very well be when\namortized thoroughly) down to $5-8 in less than 8 years.  If transaction\nfees don't rise at all due to blockspace competition (i.e., they offset\nonly the minimum required for miners to economically protect Bitcoin),\nthey'll be above $10 in less than 4 years.  I believe that comparing\n1-month of node operational costs versus 1 transaction fee is a reasonable,\nalbeit imperfect, comparison of when users will stop caring.\n\nThat's not very far in the future at all, and fee-market competition will\nprobably be much, much worse for us and better for miners.\n\n> When talking about emergency funds - that is, $10k+ that you keep in case\nyour government defaults, hyperinflates, seizes citizen assets, etc. etc.\n(situations that many Bitcoin users today have to legitimately worry about),\n\nSo I don't mean to be rude here, but this kind of thinking is very poor\nlogic when applied to anyone who isn't already a libertarian Bitcoin\nsupporter.  By anyone outside the Bitcoin world's estimation, Bitcoin is an\nextremely high risk, unreliable store of value.  We like to compare it to\n\"digital gold\" because of the parameters that Satoshi chose, but saying it\ndoes not make it true.  For someone not already a believer, Bitcoin is a\nrisky, speculative investment into a promising future technology, and gold\nis a stable physical asset with 4,000 years of acceptance history that has\nthe same value in nearly every city on the planet.  Bitcoin is difficult to\npurchase and difficult to find someone to exchange for goods or services.\n\nCould Bitcoin become more like what you described in the future?  A lot of\nus hope so or we wouldn't be here right now.  But in the meantime, any\nother crypto currency that choses parameters similar to gold could eclipse\nBitcoin if we falter.  If their currency is more usable because they\nbalance the ratio of node operational costs/security versus transaction\nfees/usability, they have a pretty reasonable chance of doing so.  And then\nyou won't store your $10k+ in bitcoin, you'll store in $altcoin.  The\nmarket doesn't really care who wins.\n\n> We are two orders of magnitude away from this type of fee pressure, so I\nthink it continues to make sense to be considering the home nodes as the\ntarget that we want to hit.\n\nThat's nothing, we've never had any fee competition at all until basically\nNovember of last year.  From December to March transaction fees went up by\n250%, and they doubled from May to December before that.  Transactions per\nyear are up 80% per year for the last 4 years.  Things are about to get\nscrewed.\n\n\nOn Wed, Mar 29, 2017 at 1:28 PM, David Vorick via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> > > When considering what block size is acceptable, the impact of running\n> bitcoin in the background on affordable, non-dedicated home-hardware should\n> be a top consideration.\n>\n> > Why is that a given?  Is there math that outlines what the risk levels\n> are for various configurations of node distributions, vulnerabilities,\n> etc?  How does one even evaluate the costs versus the benefits of node\n> costs versus transaction fees?\n>\n> It's a political assessment. Full nodes are the ultimate arbiters of\n> consensus. When a contentious change is suggested, only the full nodes have\n> the power to either accept or reject this contentious change. If home users\n> are not running their own full nodes, then home users have to trust and\n> rely on other, more powerful nodes to represent them. Of course, the more\n> powerful nodes, simply by nature of having more power, are going to have\n> different opinions and objectives from the users. And it's impossible for\n> 5000 nodes to properly represent the views of 5,000,000 users. Users\n> running full nodes is important to prevent political hijacking of the\n> Bitcoin protocol. Running a full node yourself is the only way to guarantee\n> (in the absence of trust - which Bitcoin is all about eliminating trust)\n> that changes you are opposed to are not introduced into the network.\n>\n> > Disk space is not the largest cost, either today or in the future.\n> Without historical checkpointing in some fashion, bandwidth costs are more\n> than 2 orders of magnitude higher cost than every other cost for full\n> listening nodes.\n>\n> This statement is not true for home users, it is true for datacenter\n> nodes. For home users, 200 GB of bandwidth and 500 GB of bandwidth largely\n> have the exact same cost. I pay a fixed amount of money for my internet,\n> and if I use 500 GB the cost is identical to if I use 200 GB. So long as\n> bandwidth is kept under my home bandwidth cap, bandwidth for home nodes is\n> _free_.\n>\n> Similarly, disk space may only be $2/TB in bulk, but as a home user I have\n> a $1000 computer with 500 GB of total storage, 100 GB seems\n> (psychologically) to cost a lot closer to $200 than to $2. And if I go out\n> and buy an extra drive to support Bitcoin, it's going to cost about $50 no\n> matter what drive I pick, because that's just how much you have to spend to\n> get a drive. The fact that I get an extra 900 GB that I'm not using is\n> irrelevant - I spent $50 explicitly so I could run a bitcoin node.\n>\n> The financials of home nodes follow a completely different math than the\n> costs you are citing by quoting datacenter prices.\n>\n> > I don't know how to evaluate the impacts of RAM or CPU usage, or\n> consequently electricity usage for a node yet.  I'm open to quantifying any\n> of those if there's a method, but it seems absurd that ram could even\n> become a signficant factor given the abundance of cheap ram nowadays with\n> few programs needing it.\n>\n> Many home machines only have 4GB of RAM. (I am acutely aware of this\n> because my own software consumes about 3.5GB of RAM, which means all of our\n> users stuck at 4 GB cannot use my software and Chrome at the same time).\n> 0.14 uses more than 1 GB of RAM. This I think is not really a problem for\n> most people, but it becomes a problem if the amount of RAM required grows\n> enough that they can't have all of their programs open at the same time.\n> 1GB I think is really the limit you'd want to have before you'd start\n> seeing users choose not to run nodes simply because they'd rather have 300\n> tabs open instead.\n>\n> CPU usage I think is pretty minimal. Your node is pretty busy during IBD\n> which is annoying but tolerable. And during normal usage a user isn't even\n> going to notice. Same for electricity. They aren't going to notice at the\n> end of the month if their electricity bill is a dollar higher because of\n> Bitcoin.\n>\n> > The consequence of your logic that holds node operational costs down is\n> that transaction fees for users go up, adoption slows as various use cases\n> become impractical, price growth suffers, and alt coins that choose lower\n> fees over node cost concerns will exhibit competitive growth against\n> Bitcoin's crypto-currency market share.  Even if you are right, that's\n> hardly a tradeoff not worth thoroughly investigating from every angle, the\n> consequences could be just as dire for Bitcoin in 10 years as it would be\n> if we made ourselves vulnerable.\n>\n> This is very much worth considering. If transaction fees are so high that\n> there is no use case at all for people unwilling to buy extra hardware for\n> Bitcoin (a dedicated node or whatever), then there is no longer a reason to\n> worry about these people as users. However, I think the fees would have to\n> get in the $50 range for that to start to be the case. When talking about\n> emergency funds - that is, $10k+ that you keep in case your government\n> defaults, hyperinflates, seizes citizen assets, etc. etc. (situations that\n> many Bitcoin users today have to legitimately worry about), then you are\n> going to be making a few transactions per year at most, and the cost of\n> fees on a home node may be $150 / yr, while the cost of dedicated hardware\n> might be $150/yr ($600 box amortized over 4 years). We are two orders of\n> magnitude away from this type of fee pressure, so I think it continues to\n> make sense to be considering the home nodes as the target that we want to\n> hit.\n>\n> >  What about periodically committing the entire UTXO set to a special\n> checkpoint block which becomes the new de facto Genesis block?\n>\n> This should be discussed in another thread but I don't think I'm alone in\n> saying that I think this could actually be done in a secure / safe /\n> valuable way if you did it correctly. It would reduce bandwidth pressure on\n> archive nodes, reduce disk pressure on full nodes, and imo make for a more\n> efficient network overall.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/58af5724/attachment-0001.html>"
            },
            {
                "author": "Luv Khemani",
                "date": "2017-03-30T07:11:21",
                "message_text_only": ">> If home users are not running their own full nodes, then home users have to trust and rely on other, more powerful nodes to represent them. Of course, the more powerful nodes, simply by nature of having more power, are going to have different opinions and objectives from the users.\n\n>I think you're conflating mining with node operation here.  Node users only power is to block the propagation of certain things.  Since miners also have a node endpoint, they can cut the node users out of the equation by linking with eachother directly - something they already do out of practicality for propagation.  Node users do not have the power to arbitrate consensus, that is why we have blocks and PoW.\n\nYou are only looking at technical aspects and missing the political aspect.\n\nNode users decide what a Bitcoin is. It matters not how much hash power is behind a inflationary supply chain fork, full nodes protect the user from the change of any properties of Bitcoin which they do not agree with. The ability to retain this power for users is of prime importance and is arguably what gives Bitcoin most of it's value. Any increase in the cost to run a full node is an increase in cost to maintain monetary sovereignty. The ability for a user to run a node is what keeps the miners honest and prevents them from rewriting any of Bitcoin's rules.\n\nIf it's still difficult to grasp the above paragraph, ask yourself the following questions,\n- What makes Bitcoin uncensorable\n- What gives confidence that the 21 million limit will be upheld\n- What makes transactions irreversible\n- If hashpower was king as you make it to be, why havn't miners making up majority hashrate who want bigger blocks been able to change the blocksize?\n\nThe market is not storing 10s of billions of dollars in Bitcoin despite all it's risks because it is useful for everyday transactions, that is a solved problem in every part of the world (Cash/Visa/etc..).\n\nHaving said that, i fully empathise with your view that increasing transaction fees might allow competitors to gain marketshare for low value use cases. By all means, we should look into ways of solving the problem. But all these debates around blocksize is a total waste of time. Even if we fork to 2MB, 5MB, 10MB. It is irrelevant in the larger picture, transaction capacity will still be too low for global usage in the medium-long term. The additional capacity from blocksize increases are linear improvements with very large systemic costs compared with the userbase and usage which is growing exponentially. Lightning potentially offers a couple or orders of magnitude of scaling and will make blocksize a non-issue for years to come. Even if it fails to live up to the hype, you should not discount the market innovating solutions when there is money to be made.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/bf2ad53b/attachment-0001.html>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-03-30T17:16:41",
                "message_text_only": "> You are only looking at technical aspects and missing the political\naspect.\n\nNodes don't do politics.  People do, and politics is a lot larger with a\nlot more moving parts than just node operation.\n\n> full nodes protect the user from the change of any properties of Bitcoin\nwhich they do not agree with.\n\nFull nodes protect from nothing if the chain they attempt to use is\nnonfunctional.\n\n> The ability to retain this power for users is of prime importance and is\narguably what gives Bitcoin most of it's value\n> Any increase in the cost to run a full node is an increase in cost to\nmaintain monetary sovereignty\n\nThis power is far more complicated than just nodes.  You're implying that\nnode operation == political participation.  Node operation is only a very\nsmall part of the grand picture of the bitcoin balance of power.\n\n> The ability for a user to run a node is what keeps the miners honest and\nprevents them from rewriting any of Bitcoin's rules.\n\nNo, it isn't.  Nodes disagreeing with miners is necessary but not\nsufficient to prevent that.  Nodes can't utilize a nonfunctional chain, nor\ncan they utilize a coin with no exchanges.\n\n> What makes Bitcoin uncensorable\n\nOnly two things - 1. Node propagation being strong enough that a target\nnode can't be surrounded by attacker nodes (or so that attacker nodes can't\nsegment honest nodes), and 2. Miners being distributed in enough countries\nand locations to avoid any single outside attacker group from having enough\nleverage to prevent transaction inclusion, and miners also having enough\nincentives(philosophical or economic) to refuse to collude towards\ntransaction exclusion.\n\nBeing able to run a node yourself has no real effect on either of the two.\nEither we have enough nodes that an attacker can't segment the network or\nwe don't.\n\n> What gives confidence that the 21 million limit will be upheld\n\nWhat you're describing would result in a fork war.  The opposition to this\nwould widespread and preventing an attempt relies upon mutual destruction.\nIf users refused to get on board, exchanges would follow users.  If miners\nrefused to get on board, the attempt would be equally dead in the water.\nIt would require a majority of users, businesses and miners to change the\nlimit; Doing so without an overwhelming majority(90% at least) would still\nresult in a contentious fork that punished both sides(in price, confidence,\nadoption, and possibly chain or node attacks) for refusing to agree.\n\nNodes have absolutely no say in the matter if they can't segment the\nnetwork, and even if they could their impact could be repaired.  Users !=\nNodes.\n\n> What makes transactions irreversible\n\nErr, this makes me worry that you don't understand how blockchains work...\nThis is because miners are severely punished for attempting to mine on\nanything but the longest chain.  Nodes have absolutely no say in the\nmatter, they always follow the longest chain unless a hardfork was\napplied.  If the hardfork has overwhelming consensus, i.e. stopping a 51%\nattack, then the attack would be handled.  If the hardfork did not have\noverwhelming consensus it would result in another fork war requiring users,\nbusinesses, and miners to actively decide which to support and how, and\nonce again would involve mutual destruction on both forks.\n\nNodes don't decide any of these things.  Nodes follow the longest chain,\nand have no practical choices in the matter.  Users not running nodes\ndoesn't diminish their power - Mutual destruction comes from the market\nforces on the exchanges, and they could give a rats ass whether you run a\nnode or not.\n\n> The market is not storing 10s of billions of dollars in Bitcoin despite\nall it's risks because it is useful for everyday transactions, that is a\nsolved problem in every part of the world (Cash/Visa/etc..).\n\nThis is just the \"bitcoin is gold\" argument.  Bitcoin is not gold.  For\nsomeone not already a believer, Bitcoin is a risky, speculative investment\ninto a promising future technology, whereas gold is a stable physical asset\nwith 4,000 years of acceptance history that has the same value in nearly\nevery city on the planet.  Bitcoin is difficult to purchase and difficult\nto find someone to exchange for goods or services.  Literally the only\nreason we have 10s of billions of dollars of value is because speculation,\nwhich includes nearly all Bitcoin users/holders and almost all businesses\nand miners.  While Bitcoin borrows useful features from gold, it has more\npossible uses, including uses that were never possible before Bitcoin\nexisted, and we believe that gives it huge potential.\n\nThe ability of other systems to do transactions, like visa or cash, come\nwith the limitations of those systems.  Bitcoin was designed to break those\nlimitations and STILL provide the ability to do transactions.  We might all\nagree Bitcoin isn't going to ever solve the microtransaction problem, at\nleast not on-chain, but saying Bitcoin doesn't need utility is just\nfoolish.  Gold doesn't need utility, gold has 4,000 years of history.  We\ndon't.\n\n> Even if we fork to 2MB, 5MB, 10MB. It is irrelevant in the larger\npicture, transaction capacity will still be too low for global usage in the\nmedium-long term.\n\nWhich is why it needs to be a formula or a continuous process, not a single\nnumber.\n\n> Even if it fails to live up to the hype, you should not discount the\nmarket innovating solutions when there is money to be made.\n\nThat's like saying it would be better to do nothing so someone else solves\nour problem for us than it would be for us to do what we can to solve it\nourselves.  Someone else solving our problem may very well be Ethereum, and\n\"solving it for us\" is pulling Bitcoin investments, users and nodes away\ninto Ethereum.\n\n> The additional capacity from blocksize increases are linear improvements\nwith very large systemic costs compared with the userbase and usage which\nis growing exponentially.\n\nThe capacity increases do not have to be linear.  The increases in utility\nare linear with blocksize increases, but so are the costs.  There's no\nreason those blocksize increases can't be tied to or related to usage\nincreases, so long as the concerns about having too few nodes (or too few\nfees) for security are handled.\n\n\n\nOn Thu, Mar 30, 2017 at 12:11 AM, Luv Khemani <luvb at hotmail.com> wrote:\n\n>\n> >> If home users are not running their own full nodes, then home users\n> have to trust and rely on other, more powerful nodes to represent them. Of\n> course, the more powerful nodes, simply by nature of having more power, are\n> going to have different opinions and objectives from the users.\n>\n> >I think you're conflating mining with node operation here.  Node users\n> only power is to block the propagation of certain things.  Since miners\n> also have a node endpoint, they can cut the node users out of the equation\n> by linking with eachother directly - something they already do out of\n> practicality for propagation.  Node users do not have the power to\n> arbitrate consensus, that is why we have blocks and PoW.\n>\n> You are only looking at technical aspects and missing the political aspect.\n>\n> Node users decide what a Bitcoin is. It matters not how much hash power is\n> behind a inflationary supply chain fork, full nodes protect the user from\n> the change of any properties of Bitcoin which they do not agree with. The\n> ability to retain this power for users is of prime importance and is\n> arguably what gives Bitcoin most of it's value. Any increase in the cost to\n> run a full node is an increase in cost to maintain monetary sovereignty.\n> The ability for a user to run a node is what keeps the miners honest and\n> prevents them from rewriting any of Bitcoin's rules.\n>\n> If it's still difficult to grasp the above paragraph, ask yourself the\n> following questions,\n> - What makes Bitcoin uncensorable\n> - What gives confidence that the 21 million limit will be upheld\n> - What makes transactions irreversible\n> - If hashpower was king as you make it to be, why havn't miners making up\n> majority hashrate who want bigger blocks been able to change the blocksize?\n>\n> The market is not storing 10s of billions of dollars in Bitcoin despite\n> all it's risks because it is useful for everyday transactions, that is a\n> solved problem in every part of the world (Cash/Visa/etc..).\n>\n> Having said that, i fully empathise with your view that increasing\n> transaction fees might allow competitors to gain marketshare for low value\n> use cases. By all means, we should look into ways of solving the problem.\n> But all these debates around blocksize is a total waste of time. Even if we\n> fork to 2MB, 5MB, 10MB. It is irrelevant in the larger picture, transaction\n> capacity will still be too low for global usage in the medium-long term.\n> The additional capacity from blocksize increases are linear improvements\n> with very large systemic costs compared with the userbase and usage which\n> is growing exponentially. Lightning potentially offers a couple or orders\n> of magnitude of scaling and will make blocksize a non-issue for years to\n> come. Even if it fails to live up to the hype, you should not discount the\n> market innovating solutions when there is money to be made.\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/d09eebbf/attachment-0001.html>"
            },
            {
                "author": "Luv Khemani",
                "date": "2017-03-31T04:21:17",
                "message_text_only": "> Nodes don't do politics.  People do, and politics is a lot larger with a lot more moving parts than just node operation.\n\n\nNode operation is making a stand on what money you will accept.\n\nIe Your local store will only accept US Dollars and not Japanese Yen. Without being able to run a node, you have no way to independently determine what you are receiving, you could be paid Zimbawe Dollars and wouldn't know any better.\n\n> Full nodes protect from nothing if the chain they attempt to use is nonfunctional.\n\nThis is highly subjective.\nJust because it is nonfunctional to you, does not mean it is nonfunctional to existing users.\n\n> This power is far more complicated than just nodes.\n\nI never implied otherwise.\n\n> You're implying that node operation == political participation.\n\nOfcourse it is. Try paying for my goods using BU/Ehtereum/Dash/etc.. or a Bitcoin forked with inflation, you will not get any goods regardless of how much hashrate those coins have.\n\n> Miners being distributed in enough countries and locations to avoid any single outside attacker group from having enough leverage to prevent transaction inclusion, and miners also having enough incentives(philosophical or economic) to refuse to collude towards transaction exclusion.\n\nIt's good that you see the importance of this. You should also take into consideration the number of independent mining entities it takes to achieve 51% hashrate. It will be of little use to have thousands on independent miners/pools  if 3 large pools make up 51% of hash rate and collude to attack the network.\n\n>  If users refused to get on board, exchanges would follow users.  If miners refused to get on board, the attempt would be equally dead in the water.  It would require a majority of users, businesses and miners to change the limit;\n\n> Nodes have absolutely no say in the matter if they can't segment the network, and even if they could their impact could be repaired.  Users != Nodes.\n\nNodes define which network they want to follow. Without a Node, you don't even get to decide which segement you are on. Either miners decide( for SPV wallets) or your wallet's server decides(Node). You have no control without a\n\n>> What makes transactions irreversible\n>Nodes have absolutely no say in the matter, they always follow the longest chain unless a hardfork was applied.\n\nMy bad here, hashpower decides order. This is the sole reason we have mining, to order transactions.\n\n> Mutual destruction comes from the market forces on the exchanges, and they could give a rats ass whether you run a node or not.\n\nAbility to run a node and validate rules => Confidence in currency => Higher demand => Higher exchange rate\n\nI would not be holding any Bitcoins if it was unfeasible for me to run a Node and instead had to trust some 3rd party that the currency was not being inflated/censored. Bitcoin has value because of it's trustless properties. Otherwise, there is no difference between cryptocurrencies and fiat.\n\n> Literally the only reason we have 10s of billions of dollars of value is because speculation, which includes nearly all Bitcoin users/holders and almost all businesses and miners.  While  Bitcoin borrows useful features from gold, it has more possible uses, including uses that were never possible before Bitcoin existed, and we believe that gives it huge potential.\n> The ability of other systems to do transactions, like visa or cash, come with the limitations of those systems.  Bitcoin was designed to break those limitations and STILL provide the ability to do transactions.  We might all agree Bitcoin isn't going to ever solve the microtransaction problem, at least not on-chain, but saying Bitcoin doesn't need utility is just foolish.  Gold doesn't need utility, gold has 4,000 years of history.  We don't.\n> There's no reason those blocksize increases can't be tied to or related to usage increases\n\nBlocksize has nothing to do with utility, only cost of on-chain transactions.\nOTOH increasing the blocksize has alot to do with introducing the very limitations that Visa/Cash have.\nWhy would you risk destroying Bitcoin's primary proposition (removing limitations of Cash/Visa) for insignificant capacity increase?\n\n> That's like saying it would be better to do nothing so someone else solves our problem for us than it would be for us to do what we can to solve it ourselves.  Someone else solving our problem may very well be Ethereum, and \"solving it for us\" is pulling Bitcoin investments, users and nodes away into Ethereum.\n\nWho says nothing is being done? Segwit, Lightning, pre-loaded wallets like Coinbase are all solutions.\n\n\n\n\nOn Thu, Mar 30, 2017 at 12:11 AM, Luv Khemani <luvb at hotmail.com<mailto:luvb at hotmail.com>> wrote:\n\n\n>> If home users are not running their own full nodes, then home users have to trust and rely on other, more powerful nodes to represent them. Of course, the more powerful nodes, simply by nature of having more power, are going to have different opinions and objectives from the users.\n\n>I think you're conflating mining with node operation here.  Node users only power is to block the propagation of certain things.  Since miners also have a node endpoint, they can cut the node users out of the equation by linking with eachother directly - something they already do out of practicality for propagation.  Node users do not have the power to arbitrate consensus, that is why we have blocks and PoW.\n\nYou are only looking at technical aspects and missing the political aspect.\n\nNode users decide what a Bitcoin is. It matters not how much hash power is behind a inflationary supply chain fork, full nodes protect the user from the change of any properties of Bitcoin which they do not agree with. The ability to retain this power for users is of prime importance and is arguably what gives Bitcoin most of it's value. Any increase in the cost to run a full node is an increase in cost to maintain monetary sovereignty. The ability for a user to run a node is what keeps the miners honest and prevents them from rewriting any of Bitcoin's rules.\n\nIf it's still difficult to grasp the above paragraph, ask yourself the following questions,\n- What makes Bitcoin uncensorable\n- What gives confidence that the 21 million limit will be upheld\n- What makes transactions irreversible\n- If hashpower was king as you make it to be, why havn't miners making up majority hashrate who want bigger blocks been able to change the blocksize?\n\nThe market is not storing 10s of billions of dollars in Bitcoin despite all it's risks because it is useful for everyday transactions, that is a solved problem in every part of the world (Cash/Visa/etc..).\n\nHaving said that, i fully empathise with your view that increasing transaction fees might allow competitors to gain marketshare for low value use cases. By all means, we should look into ways of solving the problem. But all these debates around blocksize is a total waste of time. Even if we fork to 2MB, 5MB, 10MB. It is irrelevant in the larger picture, transaction capacity will still be too low for global usage in the medium-long term. The additional capacity from blocksize increases are linear improvements with very large systemic costs compared with the userbase and usage which is growing exponentially. Lightning potentially offers a couple or orders of magnitude of scaling and will make blocksize a non-issue for years to come. Even if it fails to live up to the hype, you should not discount the market innovating solutions when there is money to be made.\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170331/04e79a13/attachment-0001.html>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-03-31T05:28:33",
                "message_text_only": "> Node operation is making a stand on what money you will accept.\n\n> Ie Your local store will only accept US Dollars and not Japanese Yen. Without being able to run a node, you have no way to independently determine what you are receiving, you could be paid Zimbawe Dollars and wouldn't know any better.\n\nErr, no, that's what happens when you double click the Ethereum icon\ninstead of the Bitcoin icon.  Just because you run \"Bitcoin SPV\"\ninstead of \"Bitcoin Verify Everyone's Else's Crap\" doesn't mean you're\nsomehow going to get Ethereum payments.  Your verification is just\ndifferent and the risks that come along with that are different.  It's\nonly confusing if you make it confusing.\n\n> This is highly subjective.\n> Just because it is nonfunctional to you, does not mean it is nonfunctional to existing users.\n\nIf every block that is mined for them is deliberately empty because of\nan attacker, that's nonfunctional.  You can use whatever semantics you\nwant to describe that situation, but that's clearly what I meant.\n\n> Ofcourse it is. Try paying for my goods using BU/Ehtereum/Dash/etc.. or a Bitcoin forked with inflation, you will not get any goods regardless of how much hashrate those coins have.\n\nAs above, if someone operates Bitcoin in SPV mode they are not\nmagically at risk of getting Dashcoins.  They send and receive\nBitcoins just like everyone else running Bitcoin software.  There's no\nconfusion about it and it doesn't have anything to do with hashrates\nof anyone.  It is just a different method of verification with\ncorresponding different costs of use and different security\nguarantees.\n\n> You should also take into consideration the number of independent mining entities it takes to achieve 51% hashrate. It will be of little use to have thousands on independent miners/pools  if 3 large pools make up 51% of hash rate and collude to attack the network.\n\nWe're already fucked, China has 61% of the hashrate and the only thing\nwe can do about it is to wait for the Chinese electrical\nsupply/demand/transmission system to rebalance itself.  Aside from\nthat little problem, mining distributions and pool distributions don't\nsignificantly factor into the blocksize debate.  The debate is a\nchoice between nodes paying more to allow greater growth and adoption,\nor nodes constraining adoption in favor of debatable security\nconcerns.\n\n> Nodes define which network they want to follow.\n\nDo you really consider it choosing when there is only a single option?\n And even if there was, the software would choose it for you?  If it\nis a Bitcoin client, it follows the Bitcoin blockchain.  There is no\nBU blockchain at the moment, and Bitcoin software can't possibly start\nfollowing Ethereum blockchains.\n\n> Without a Node, you don't even get to decide which segement you are on.\n\nYes you do, if the segment options are known (and if they aren't,\nrunning a node likely won't help you choose either, it will choose by\naccident and you'll have no idea).  You would get to choose whose\nverifications to request/check from, and thus choose which segment to\nfollow, if any.\n\n> Ability to run a node and validate rules => Confidence in currency\n\nThis is only true for the small minority that actually need that added\nlevel of security & confidence, and the paranoid people who believe\nthey need it when they really, really don't.  Some guy on reddit\nspouted off the same garbage logic, but was much quieter when I got\nhim to admit that he didn't actually read the code of Bitcoin that he\ndownloaded and ran, nor any of the code of the updates.  He trusted.\n*gasp*\n\nThe average person doesn't need that level of security.  They do\nhowever need to be able to use it, which they cannot right now if you\nconsider \"average\" to be at least 50% of the population.\n\n> Higher demand => Higher exchange rate\n\nDemand comes from usage and adoption.  Neither can happen us being\nwilling to give other people the option to trade security features for\nlower costs.\n\n> I would not be holding any Bitcoins if it was unfeasible for me to run a Node and instead had to trust some 3rd party that the currency was not being inflated/censored.\n\nGreat.  Somehow I think Bitcoin's future involves very few more people\nlike you, and very many people who aren't paranoid and just want to be\nable to send and receive Bitcoins.\n\n> Bitcoin has value because of it's trustless properties. Otherwise, there is no difference between cryptocurrencies and fiat.\n\nNo, it has its value for many, many reasons, trustless properties is\nonly one of them.  What I'm suggesting doesn't involve giving up\ntrustless properties except in your head (And not even then, since you\nwould almost certainly be able to afford to run a node for the rest of\nyour life if Bitcoin's value continues to rise as it has in the past).\nAnd even if it did, there's a lot more reasons that a lot more people\nthan you would use it.\n\n> Blocksize has nothing to do with utility, only cost of on-chain transactions.\n\nAre you really this dense?  If the cost of on-chain transactions\nrises, numerous use cases get killed off.  At $0.10 per tx you\nprobably won't buy in-game digital microtransactions with it, but you\nmight buy coffee with it.  At $1 per tx, you probably won't buy coffee\nwith it but you might pay your ISP bill with it.  At $20 per tx, you\nprobably won't pay your ISP bill with it, but you might pay your rent.\nAt $300 per tx you probably won't use it for anything, but a company\npurchasing goods from China might.  At $4000 per tx that company\nprobably won't use it, but international funds settlement for\nmillion-dollar transactions might use it.\n\nAt each fee step along the way you kill of hundreds or thousands of\npossible uses of Bitcoin.  Killing those off means fewer people will\nuse it, so they will use something else instead.\n\n> OTOH increasing the blocksize has alot to do with introducing the very limitations that Visa/Cash have.\n\nNo they don't.  They only give people the option to pay more for\nhigher security or to accept lower security and use Bitcoin anyway.\n\n> Why would you risk destroying Bitcoin's primary proposition (removing limitations of Cash/Visa) for insignificant capacity increase?\n\nSo far as anyone has presented actual numbers, there's no reason to\nbelieve larger blocksizes endanger anything of the sort, even if I\nagreed that that was Bitcoin's primary proposition.  And I don't\nbelieve we need an insignificant capacity increase, I used to think\nthat way though.  I strongly believe we can handle massive increases\nby adjusting our expectations of what nodes do, how they operate, how\nthey justify the price of their services, and what levels of security\nare available and appropriate for various levels of transaction risk.\n\n> Who says nothing is being done? Segwit, Lightning, pre-loaded wallets like Coinbase are all solutions.\n\nSegwit is a miniscule blocksize increase and wholly inadequate\ncompared to the scope of the problem.  Good for other reasons, though.\nLightning is not Bitcoin, it is something different(but not bad IMO)\nthat has different features and different consequences.  I guess you\nthink it is ok that if your lightning node goes offline at the wrong\ntime, you could lose funds you never transacted with in the first\nplace?  No?  Oh, then you must be ok with lightning hub centralization\nthen as well as paying a monthly fee to lightning hubs for their\nservices.  Wait, that sounds an awful lot like visa....\n\nI have no idea what you're referring to with the pre-loaded wallets point.\n\n\nOn Thu, Mar 30, 2017 at 9:21 PM, Luv Khemani <luvb at hotmail.com> wrote:\n>\n> > Nodes don't do politics.  People do, and politics is a lot larger with a lot more moving parts than just node operation.\n>\n>\n> Node operation is making a stand on what money you will accept.\n>\n> Ie Your local store will only accept US Dollars and not Japanese Yen. Without being able to run a node, you have no way to independently determine what you are receiving, you could be paid Zimbawe Dollars and wouldn't know any better.\n>\n>\n> > Full nodes protect from nothing if the chain they attempt to use is nonfunctional.\n>\n> This is highly subjective.\n> Just because it is nonfunctional to you, does not mean it is nonfunctional to existing users.\n>\n> > This power is far more complicated than just nodes.\n>\n> I never implied otherwise.\n>\n> > You're implying that node operation == political participation.\n>\n> Ofcourse it is. Try paying for my goods using BU/Ehtereum/Dash/etc.. or a Bitcoin forked with inflation, you will not get any goods regardless of how much hashrate those coins have.\n>\n> > Miners being distributed in enough countries and locations to avoid any single outside attacker group from having enough leverage to prevent transaction inclusion, and miners also having enough incentives(philosophical or economic) to refuse to collude towards transaction exclusion.\n>\n> It's good that you see the importance of this. You should also take into consideration the number of independent mining entities it takes to achieve 51% hashrate. It will be of little use to have thousands on independent miners/pools  if 3 large pools make up 51% of hash rate and collude to attack the network.\n>\n> >  If users refused to get on board, exchanges would follow users.  If miners refused to get on board, the attempt would be equally dead in the water.  It would require a majority of users, businesses and miners to change the limit;\n>\n> > Nodes have absolutely no say in the matter if they can't segment the network, and even if they could their impact could be repaired.  Users != Nodes.\n>\n> Nodes define which network they want to follow. Without a Node, you don't even get to decide which segement you are on. Either miners decide( for SPV wallets) or your wallet's server decides(Node). You have no control without a\n>\n> >> What makes transactions irreversible\n> >Nodes have absolutely no say in the matter, they always follow the longest chain unless a hardfork was applied.\n>\n> My bad here, hashpower decides order. This is the sole reason we have mining, to order transactions.\n>\n> > Mutual destruction comes from the market forces on the exchanges, and they could give a rats ass whether you run a node or not.\n>\n> Ability to run a node and validate rules => Confidence in currency => Higher demand => Higher exchange rate\n>\n> I would not be holding any Bitcoins if it was unfeasible for me to run a Node and instead had to trust some 3rd party that the currency was not being inflated/censored. Bitcoin has value because of it's trustless properties. Otherwise, there is no difference between cryptocurrencies and fiat.\n>\n> > Literally the only reason we have 10s of billions of dollars of value is because speculation, which includes nearly all Bitcoin users/holders and almost all businesses and miners.  While  Bitcoin borrows useful features from gold, it has more possible uses, including uses that were never possible before Bitcoin existed, and we believe that gives it huge potential.\n> > The ability of other systems to do transactions, like visa or cash, come with the limitations of those systems.  Bitcoin was designed to break those limitations and STILL provide the ability to do transactions.  We might all agree Bitcoin isn't going to ever solve the microtransaction problem, at least not on-chain, but saying Bitcoin doesn't need utility is just foolish.  Gold doesn't need utility, gold has 4,000 years of history.  We don't.\n> > There's no reason those blocksize increases can't be tied to or related to usage increases\n>\n> Blocksize has nothing to do with utility, only cost of on-chain transactions.\n> OTOH increasing the blocksize has alot to do with introducing the very limitations that Visa/Cash have.\n> Why would you risk destroying Bitcoin's primary proposition (removing limitations of Cash/Visa) for insignificant capacity increase?\n>\n> > That's like saying it would be better to do nothing so someone else solves our problem for us than it would be for us to do what we can to solve it ourselves.  Someone else solving our problem may very well be Ethereum, and \"solving it for us\" is pulling Bitcoin investments, users and nodes away into Ethereum.\n>\n> Who says nothing is being done? Segwit, Lightning, pre-loaded wallets like Coinbase are all solutions.\n>\n>\n>\n>\n> On Thu, Mar 30, 2017 at 12:11 AM, Luv Khemani <luvb at hotmail.com> wrote:\n>>\n>>\n>> >> If home users are not running their own full nodes, then home users have to trust and rely on other, more powerful nodes to represent them. Of course, the more powerful nodes, simply by nature of having more power, are going to have different opinions and objectives from the users.\n>>\n>> >I think you're conflating mining with node operation here.  Node users only power is to block the propagation of certain things.  Since miners also have a node endpoint, they can cut the node users out of the equation by linking with eachother directly - something they already do out of practicality for propagation.  Node users do not have the power to arbitrate consensus, that is why we have blocks and PoW.\n>>\n>> You are only looking at technical aspects and missing the political aspect.\n>>\n>> Node users decide what a Bitcoin is. It matters not how much hash power is behind a inflationary supply chain fork, full nodes protect the user from the change of any properties of Bitcoin which they do not agree with. The ability to retain this power for users is of prime importance and is arguably what gives Bitcoin most of it's value. Any increase in the cost to run a full node is an increase in cost to maintain monetary sovereignty. The ability for a user to run a node is what keeps the miners honest and prevents them from rewriting any of Bitcoin's rules.\n>>\n>> If it's still difficult to grasp the above paragraph, ask yourself the following questions,\n>> - What makes Bitcoin uncensorable\n>> - What gives confidence that the 21 million limit will be upheld\n>> - What makes transactions irreversible\n>> - If hashpower was king as you make it to be, why havn't miners making up majority hashrate who want bigger blocks been able to change the blocksize?\n>>\n>> The market is not storing 10s of billions of dollars in Bitcoin despite all it's risks because it is useful for everyday transactions, that is a solved problem in every part of the world (Cash/Visa/etc..).\n>>\n>> Having said that, i fully empathise with your view that increasing transaction fees might allow competitors to gain marketshare for low value use cases. By all means, we should look into ways of solving the problem. But all these debates around blocksize is a total waste of time. Even if we fork to 2MB, 5MB, 10MB. It is irrelevant in the larger picture, transaction capacity will still be too low for global usage in the medium-long term. The additional capacity from blocksize increases are linear improvements with very large systemic costs compared with the userbase and usage which is growing exponentially. Lightning potentially offers a couple or orders of magnitude of scaling and will make blocksize a non-issue for years to come. Even if it fails to live up to the hype, you should not discount the market innovating solutions when there is money to be made.\n>>\n>"
            },
            {
                "author": "Luv Khemani",
                "date": "2017-03-31T08:19:07",
                "message_text_only": "> Err, no, that's what happens when you double click the Ethereum icon\n\ninstead of the Bitcoin icon.  Just because you run \"Bitcoin SPV\"\ninstead of \"Bitcoin Verify Everyone's Else's Crap\" doesn't mean you're\nsomehow going to get Ethereum payments.  Your verification is just\ndifferent and the risks that come along with that are different.  It's\nonly confusing if you make it confusing.\n\nThis is false. You could get coins which don't even exist  as long as a miner mined the invalid transaction.\nPeter Todd has demonstrated this on mainstream SPV wallets,\nhttps://www.linkedin.com/pulse/peter-todds-fraud-proofs-talk-mit-bitcoin-expo-2016-mark-morris\n\nThe only reason SPV wallets do not accept ethereum payments is because of transaction/block format differences.\nSPV wallets have no clue what is a valid bitcoin, they trust miners fully.\n\nIn the event of a hardfork, SPV wallets will blindly follow the longest chain.\n\n> If every block that is mined for them is deliberately empty because of\nan attacker, that's nonfunctional.  You can use whatever semantics you\nwant to describe that situation, but that's clearly what I meant.\n\nNot sure why you are bringing this up, this is not the case today nor does it have anything to do with blocksize.\n\n> As above, if someone operates Bitcoin in SPV mode they are not\nmagically at risk of getting Dashcoins.  They send and receive\nBitcoins just like everyone else running Bitcoin software.  There's no\nconfusion about it and it doesn't have anything to do with hashrates\nof anyone.\n\nAs mentioned earlier, you are at risk of receiving made up money.\nSPV has everything to do with hashrate, it trusts hashrate fully.\nCrafting a bitcoin transaction paying you money that i do not have is not difficult, as long as a miner mines a block with it, your SPV wallet will accept it.\n\n> The debate is a choice between nodes paying more to allow greater growth and adoption,\nor nodes constraining adoption in favor of debatable security\nconcerns.\n\nOnchain transactions are not the only way to use Bitcoin the currency.\nTrades you do on an exchange are not onchain, yet transacted with Bitcoin.\n\n> And even if there was, the software would choose it for you?\n\nPeople choose the software, not the other way round.\n\n> Yes you do, if the segment options are known (and if they aren't,\nrunning a node likely won't help you choose either, it will choose by\naccident and you'll have no idea).  You would get to choose whose\nverifications to request/check from, and thus choose which segment to\nfollow, if any.\n\nSPV does not decide, they follow longest chain.\nCentralised/Server based wallets follow the server they are connecting to.\nFull Nodes do not depend on a 3rd party to decide if the money received is valid.\n\n>  Are you really this dense?  If the cost of on-chain transactions\nrises, numerous use cases get killed off.  At $0.10 per tx you\nprobably won't buy in-game digital microtransactions with it, but you\nmight buy coffee with it.  At $1 per tx, you probably won't buy coffee\nwith it but you might pay your ISP bill with it.  At $20 per tx, you\nprobably won't pay your ISP bill with it, but you might pay your rent.\nAt $300 per tx you probably won't use it for anything, but a company\npurchasing goods from China might.  At $4000 per tx that company\nprobably won't use it, but international funds settlement for\nmillion-dollar transactions might use it.\n> At each fee step along the way you kill of hundreds or thousands of\npossible uses of Bitcoin.  Killing those off means fewer people will\nuse it, so they will use something else instead.\n\nNo need to get personal.\nAs mentioned earlier, all these low value transactions can happen offchain.\nNone of the use cases will be killed off. We have sub dollar trades happening on exchanges offchain.\n\n> The average person doesn't need that level of security.\n\nPrecisely why they do not need to be on-chain.\n\nIt is clear to me that you have not yet grasped Bitcoin's security model, especially the role Full-Nodes play in it.\nId suggest you do some more reading up and thinking about it.\nDo thought experiments and take it to the extremes where nobody runs a node, what can miners do now which they could not do before?\nWhy don't exchanges run SPV nodes?\n\nFurther correspondence will not be fruitful until you grasp this.\n\n\n\nOn Thu, Mar 30, 2017 at 9:21 PM, Luv Khemani <luvb at hotmail.com> wrote:\n>\n> > Nodes don't do politics.  People do, and politics is a lot larger with a lot more moving parts than just node operation.\n>\n>\n> Node operation is making a stand on what money you will accept.\n>\n> Ie Your local store will only accept US Dollars and not Japanese Yen. Without being able to run a node, you have no way to independently determine what you are receiving, you could be paid Zimbawe Dollars and wouldn't know any better.\n>\n>\n> > Full nodes protect from nothing if the chain they attempt to use is nonfunctional.\n>\n> This is highly subjective.\n> Just because it is nonfunctional to you, does not mean it is nonfunctional to existing users.\n>\n> > This power is far more complicated than just nodes.\n>\n> I never implied otherwise.\n>\n> > You're implying that node operation == political participation.\n>\n> Ofcourse it is. Try paying for my goods using BU/Ehtereum/Dash/etc.. or a Bitcoin forked with inflation, you will not get any goods regardless of how much hashrate those coins have.\n>\n> > Miners being distributed in enough countries and locations to avoid any single outside attacker group from having enough leverage to prevent transaction inclusion, and miners also having enough incentives(philosophical or economic) to refuse to collude towards transaction exclusion.\n>\n> It's good that you see the importance of this. You should also take into consideration the number of independent mining entities it takes to achieve 51% hashrate. It will be of little use to have thousands on independent miners/pools  if 3 large pools make up 51% of hash rate and collude to attack the network.\n>\n> >  If users refused to get on board, exchanges would follow users.  If miners refused to get on board, the attempt would be equally dead in the water.  It would require a majority of users, businesses and miners to change the limit;\n>\n> > Nodes have absolutely no say in the matter if they can't segment the network, and even if they could their impact could be repaired.  Users != Nodes.\n>\n> Nodes define which network they want to follow. Without a Node, you don't even get to decide which segement you are on. Either miners decide( for SPV wallets) or your wallet's server decides(Node). You have no control without a\n>\n> >> What makes transactions irreversible\n> >Nodes have absolutely no say in the matter, they always follow the longest chain unless a hardfork was applied.\n>\n> My bad here, hashpower decides order. This is the sole reason we have mining, to order transactions.\n>\n> > Mutual destruction comes from the market forces on the exchanges, and they could give a rats ass whether you run a node or not.\n>\n> Ability to run a node and validate rules => Confidence in currency => Higher demand => Higher exchange rate\n>\n> I would not be holding any Bitcoins if it was unfeasible for me to run a Node and instead had to trust some 3rd party that the currency was not being inflated/censored. Bitcoin has value because of it's trustless properties. Otherwise, there is no difference between cryptocurrencies and fiat.\n>\n> > Literally the only reason we have 10s of billions of dollars of value is because speculation, which includes nearly all Bitcoin users/holders and almost all businesses and miners.  While  Bitcoin borrows useful features from gold, it has more possible uses, including uses that were never possible before Bitcoin existed, and we believe that gives it huge potential.\n> > The ability of other systems to do transactions, like visa or cash, come with the limitations of those systems.  Bitcoin was designed to break those limitations and STILL provide the ability to do transactions.  We might all agree Bitcoin isn't going to ever solve the microtransaction problem, at least not on-chain, but saying Bitcoin doesn't need utility is just foolish.  Gold doesn't need utility, gold has 4,000 years of history.  We don't.\n> > There's no reason those blocksize increases can't be tied to or related to usage increases\n>\n> Blocksize has nothing to do with utility, only cost of on-chain transactions.\n> OTOH increasing the blocksize has alot to do with introducing the very limitations that Visa/Cash have.\n> Why would you risk destroying Bitcoin's primary proposition (removing limitations of Cash/Visa) for insignificant capacity increase?\n>\n> > That's like saying it would be better to do nothing so someone else solves our problem for us than it would be for us to do what we can to solve it ourselves.  Someone else solving our problem may very well be Ethereum, and \"solving it for us\" is pulling Bitcoin investments, users and nodes away into Ethereum.\n>\n> Who says nothing is being done? Segwit, Lightning, pre-loaded wallets like Coinbase are all solutions.\n>\n>\n>\n>\n> On Thu, Mar 30, 2017 at 12:11 AM, Luv Khemani <luvb at hotmail.com> wrote:\n>>\n>>\n>> >> If home users are not running their own full nodes, then home users have to trust and rely on other, more powerful nodes to represent them. Of course, the more powerful nodes, simply by nature of having more power, are going to have different opinions and objectives from the users.\n>>\n>> >I think you're conflating mining with node operation here.  Node users only power is to block the propagation of certain things.  Since miners also have a node endpoint, they can cut the node users out of the equation by linking with eachother directly - something they already do out of practicality for propagation.  Node users do not have the power to arbitrate consensus, that is why we have blocks and PoW.\n>>\n>> You are only looking at technical aspects and missing the political aspect.\n>>\n>> Node users decide what a Bitcoin is. It matters not how much hash power is behind a inflationary supply chain fork, full nodes protect the user from the change of any properties of Bitcoin which they do not agree with. The ability to retain this power for users is of prime importance and is arguably what gives Bitcoin most of it's value. Any increase in the cost to run a full node is an increase in cost to maintain monetary sovereignty. The ability for a user to run a node is what keeps the miners honest and prevents them from rewriting any of Bitcoin's rules.\n>>\n>> If it's still difficult to grasp the above paragraph, ask yourself the following questions,\n>> - What makes Bitcoin uncensorable\n>> - What gives confidence that the 21 million limit will be upheld\n>> - What makes transactions irreversible\n>> - If hashpower was king as you make it to be, why havn't miners making up majority hashrate who want bigger blocks been able to change the blocksize?\n>>\n>> The market is not storing 10s of billions of dollars in Bitcoin despite all it's risks because it is useful for everyday transactions, that is a solved problem in every part of the world (Cash/Visa/etc..).\n>>\n>> Having said that, i fully empathise with your view that increasing transaction fees might allow competitors to gain marketshare for low value use cases. By all means, we should look into ways of solving the problem. But all these debates around blocksize is a total waste of time. Even if we fork to 2MB, 5MB, 10MB. It is irrelevant in the larger picture, transaction capacity will still be too low for global usage in the medium-long term. The additional capacity from blocksize increases are linear improvements with very large systemic costs compared with the userbase and usage which is growing exponentially. Lightning potentially offers a couple or orders of magnitude of scaling and will make blocksize a non-issue for years to come. Even if it fails to live up to the hype, you should not discount the market innovating solutions when there is money to be made.\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170331/e6068505/attachment-0001.html>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-03-31T15:59:19",
                "message_text_only": "> Peter Todd has demonstrated this on mainstream SPV wallets,\n> https://www.linkedin.com/pulse/peter-todds-fraud-proofs-talk-mit-bitcoin-expo-2016-mark-morris\n\nCorrect me if I'm wrong, but nothing  possible if the client software\nwas electrum-like and used two independent sources for verification.\nNo?\n\n> Do thought experiments and take it to the extremes where nobody runs a node, what can miners do now which they could not do before?\n\nThis and the next point are just reductio ad absurdem, since no one is\nsuggesting anything of the sort. Even in that situation, I can't think\nof anything miners could do if clients used more than one independent\nsource for verification, ala electrum question above.\n\n> Why don't exchanges run SPV nodes?\n\nNo one is suggesting anything like this.  The cost of running a node\nthat could handle 300% of the 2015 worldwide nonbitcoin transaction\nvolume today would be a rounding error for most exchanges even if\nprices didn't rise.\n\n\n\nOn Fri, Mar 31, 2017 at 1:19 AM, Luv Khemani <luvb at hotmail.com> wrote:\n>> Err, no, that's what happens when you double click the Ethereum icon\n>\n> instead of the Bitcoin icon.  Just because you run \"Bitcoin SPV\"\n> instead of \"Bitcoin Verify Everyone's Else's Crap\" doesn't mean you're\n> somehow going to get Ethereum payments.  Your verification is just\n> different and the risks that come along with that are different.  It's\n> only confusing if you make it confusing.\n>\n> This is false. You could get coins which don't even exist  as long as a\n> miner mined the invalid transaction.\n> Peter Todd has demonstrated this on mainstream SPV wallets,\n> https://www.linkedin.com/pulse/peter-todds-fraud-proofs-talk-mit-bitcoin-expo-2016-mark-morris\n>\n> The only reason SPV wallets do not accept ethereum payments is because of\n> transaction/block format differences.\n> SPV wallets have no clue what is a valid bitcoin, they trust miners fully.\n>\n> In the event of a hardfork, SPV wallets will blindly follow the longest\n> chain.\n>\n>> If every block that is mined for them is deliberately empty because of\n> an attacker, that's nonfunctional.  You can use whatever semantics you\n> want to describe that situation, but that's clearly what I meant.\n>\n> Not sure why you are bringing this up, this is not the case today nor does\n> it have anything to do with blocksize.\n>\n>> As above, if someone operates Bitcoin in SPV mode they are not\n> magically at risk of getting Dashcoins.  They send and receive\n> Bitcoins just like everyone else running Bitcoin software.  There's no\n> confusion about it and it doesn't have anything to do with hashrates\n> of anyone.\n>\n> As mentioned earlier, you are at risk of receiving made up money.\n> SPV has everything to do with hashrate, it trusts hashrate fully.\n> Crafting a bitcoin transaction paying you money that i do not have is not\n> difficult, as long as a miner mines a block with it, your SPV wallet will\n> accept it.\n>\n>> The debate is a choice between nodes paying more to allow greater growth\n>> and adoption,\n> or nodes constraining adoption in favor of debatable security\n> concerns.\n>\n> Onchain transactions are not the only way to use Bitcoin the currency.\n> Trades you do on an exchange are not onchain, yet transacted with Bitcoin.\n>\n>> And even if there was, the software would choose it for you?\n>\n> People choose the software, not the other way round.\n>\n>> Yes you do, if the segment options are known (and if they aren't,\n> running a node likely won't help you choose either, it will choose by\n> accident and you'll have no idea).  You would get to choose whose\n> verifications to request/check from, and thus choose which segment to\n> follow, if any.\n>\n> SPV does not decide, they follow longest chain.\n> Centralised/Server based wallets follow the server they are connecting to.\n> Full Nodes do not depend on a 3rd party to decide if the money received is\n> valid.\n>\n>>  Are you really this dense?  If the cost of on-chain transactions\n> rises, numerous use cases get killed off.  At $0.10 per tx you\n> probably won't buy in-game digital microtransactions with it, but you\n> might buy coffee with it.  At $1 per tx, you probably won't buy coffee\n> with it but you might pay your ISP bill with it.  At $20 per tx, you\n> probably won't pay your ISP bill with it, but you might pay your rent.\n> At $300 per tx you probably won't use it for anything, but a company\n> purchasing goods from China might.  At $4000 per tx that company\n> probably won't use it, but international funds settlement for\n> million-dollar transactions might use it.\n>> At each fee step along the way you kill of hundreds or thousands of\n> possible uses of Bitcoin.  Killing those off means fewer people will\n> use it, so they will use something else instead.\n>\n> No need to get personal.\n> As mentioned earlier, all these low value transactions can happen offchain.\n> None of the use cases will be killed off. We have sub dollar trades\n> happening on exchanges offchain.\n>\n>> The average person doesn't need that level of security.\n>\n> Precisely why they do not need to be on-chain.\n>\n> It is clear to me that you have not yet grasped Bitcoin's security model,\n> especially the role Full-Nodes play in it.\n> Id suggest you do some more reading up and thinking about it.\n> Do thought experiments and take it to the extremes where nobody runs a node,\n> what can miners do now which they could not do before?\n> Why don't exchanges run SPV nodes?\n>\n> Further correspondence will not be fruitful until you grasp this.\n>\n>\n>\n> On Thu, Mar 30, 2017 at 9:21 PM, Luv Khemani <luvb at hotmail.com> wrote:\n>>\n>> > Nodes don't do politics.  People do, and politics is a lot larger with a\n>> > lot more moving parts than just node operation.\n>>\n>>\n>> Node operation is making a stand on what money you will accept.\n>>\n>> Ie Your local store will only accept US Dollars and not Japanese Yen.\n>> Without being able to run a node, you have no way to independently determine\n>> what you are receiving, you could be paid Zimbawe Dollars and wouldn't know\n>> any better.\n>>\n>>\n>> > Full nodes protect from nothing if the chain they attempt to use is\n>> > nonfunctional.\n>>\n>> This is highly subjective.\n>> Just because it is nonfunctional to you, does not mean it is nonfunctional\n>> to existing users.\n>>\n>> > This power is far more complicated than just nodes.\n>>\n>> I never implied otherwise.\n>>\n>> > You're implying that node operation == political participation.\n>>\n>> Ofcourse it is. Try paying for my goods using BU/Ehtereum/Dash/etc.. or a\n>> Bitcoin forked with inflation, you will not get any goods regardless of how\n>> much hashrate those coins have.\n>>\n>> > Miners being distributed in enough countries and locations to avoid any\n>> > single outside attacker group from having enough leverage to prevent\n>> > transaction inclusion, and miners also having enough\n>> > incentives(philosophical or economic) to refuse to collude towards\n>> > transaction exclusion.\n>>\n>> It's good that you see the importance of this. You should also take into\n>> consideration the number of independent mining entities it takes to achieve\n>> 51% hashrate. It will be of little use to have thousands on independent\n>> miners/pools  if 3 large pools make up 51% of hash rate and collude to\n>> attack the network.\n>>\n>> >  If users refused to get on board, exchanges would follow users.  If\n>> > miners refused to get on board, the attempt would be equally dead in the\n>> > water.  It would require a majority of users, businesses and miners to\n>> > change the limit;\n>>\n>> > Nodes have absolutely no say in the matter if they can't segment the\n>> > network, and even if they could their impact could be repaired.  Users !=\n>> > Nodes.\n>>\n>> Nodes define which network they want to follow. Without a Node, you don't\n>> even get to decide which segement you are on. Either miners decide( for SPV\n>> wallets) or your wallet's server decides(Node). You have no control without\n>> a\n>>\n>> >> What makes transactions irreversible\n>> >Nodes have absolutely no say in the matter, they always follow the\n>> > longest chain unless a hardfork was applied.\n>>\n>> My bad here, hashpower decides order. This is the sole reason we have\n>> mining, to order transactions.\n>>\n>> > Mutual destruction comes from the market forces on the exchanges, and\n>> > they could give a rats ass whether you run a node or not.\n>>\n>> Ability to run a node and validate rules => Confidence in currency =>\n>> Higher demand => Higher exchange rate\n>>\n>> I would not be holding any Bitcoins if it was unfeasible for me to run a\n>> Node and instead had to trust some 3rd party that the currency was not being\n>> inflated/censored. Bitcoin has value because of it's trustless properties.\n>> Otherwise, there is no difference between cryptocurrencies and fiat.\n>>\n>> > Literally the only reason we have 10s of billions of dollars of value is\n>> > because speculation, which includes nearly all Bitcoin users/holders and\n>> > almost all businesses and miners.  While  Bitcoin borrows useful features\n>> > from gold, it has more possible uses, including uses that were never\n>> > possible before Bitcoin existed, and we believe that gives it huge\n>> > potential.\n>> > The ability of other systems to do transactions, like visa or cash, come\n>> > with the limitations of those systems.  Bitcoin was designed to break those\n>> > limitations and STILL provide the ability to do transactions.  We might all\n>> > agree Bitcoin isn't going to ever solve the microtransaction problem, at\n>> > least not on-chain, but saying Bitcoin doesn't need utility is just foolish.\n>> > Gold doesn't need utility, gold has 4,000 years of history.  We don't.\n>> > There's no reason those blocksize increases can't be tied to or related\n>> > to usage increases\n>>\n>> Blocksize has nothing to do with utility, only cost of on-chain\n>> transactions.\n>> OTOH increasing the blocksize has alot to do with introducing the very\n>> limitations that Visa/Cash have.\n>> Why would you risk destroying Bitcoin's primary proposition (removing\n>> limitations of Cash/Visa) for insignificant capacity increase?\n>>\n>> > That's like saying it would be better to do nothing so someone else\n>> > solves our problem for us than it would be for us to do what we can to solve\n>> > it ourselves.  Someone else solving our problem may very well be Ethereum,\n>> > and \"solving it for us\" is pulling Bitcoin investments, users and nodes away\n>> > into Ethereum.\n>>\n>> Who says nothing is being done? Segwit, Lightning, pre-loaded wallets like\n>> Coinbase are all solutions.\n>>\n>>\n>>\n>>\n>> On Thu, Mar 30, 2017 at 12:11 AM, Luv Khemani <luvb at hotmail.com> wrote:\n>>>\n>>>\n>>> >> If home users are not running their own full nodes, then home users\n>>> >> have to trust and rely on other, more powerful nodes to represent them. Of\n>>> >> course, the more powerful nodes, simply by nature of having more power, are\n>>> >> going to have different opinions and objectives from the users.\n>>>\n>>> >I think you're conflating mining with node operation here.  Node users\n>>> > only power is to block the propagation of certain things.  Since miners also\n>>> > have a node endpoint, they can cut the node users out of the equation by\n>>> > linking with eachother directly - something they already do out of\n>>> > practicality for propagation.  Node users do not have the power to arbitrate\n>>> > consensus, that is why we have blocks and PoW.\n>>>\n>>> You are only looking at technical aspects and missing the political\n>>> aspect.\n>>>\n>>> Node users decide what a Bitcoin is. It matters not how much hash power\n>>> is behind a inflationary supply chain fork, full nodes protect the user from\n>>> the change of any properties of Bitcoin which they do not agree with. The\n>>> ability to retain this power for users is of prime importance and is\n>>> arguably what gives Bitcoin most of it's value. Any increase in the cost to\n>>> run a full node is an increase in cost to maintain monetary sovereignty. The\n>>> ability for a user to run a node is what keeps the miners honest and\n>>> prevents them from rewriting any of Bitcoin's rules.\n>>>\n>>> If it's still difficult to grasp the above paragraph, ask yourself the\n>>> following questions,\n>>> - What makes Bitcoin uncensorable\n>>> - What gives confidence that the 21 million limit will be upheld\n>>> - What makes transactions irreversible\n>>> - If hashpower was king as you make it to be, why havn't miners making up\n>>> majority hashrate who want bigger blocks been able to change the blocksize?\n>>>\n>>> The market is not storing 10s of billions of dollars in Bitcoin despite\n>>> all it's risks because it is useful for everyday transactions, that is a\n>>> solved problem in every part of the world (Cash/Visa/etc..).\n>>>\n>>> Having said that, i fully empathise with your view that increasing\n>>> transaction fees might allow competitors to gain marketshare for low value\n>>> use cases. By all means, we should look into ways of solving the problem.\n>>> But all these debates around blocksize is a total waste of time. Even if we\n>>> fork to 2MB, 5MB, 10MB. It is irrelevant in the larger picture, transaction\n>>> capacity will still be too low for global usage in the medium-long term. The\n>>> additional capacity from blocksize increases are linear improvements with\n>>> very large systemic costs compared with the userbase and usage which is\n>>> growing exponentially. Lightning potentially offers a couple or orders of\n>>> magnitude of scaling and will make blocksize a non-issue for years to come.\n>>> Even if it fails to live up to the hype, you should not discount the market\n>>> innovating solutions when there is money to be made.\n>>>\n>>"
            },
            {
                "author": "Raystonn .",
                "date": "2017-03-29T19:50:48",
                "message_text_only": "Low node costs are a good goal for nodes that handle transactions the node operator can afford.  Nobody is going to run a node for a network they do not use for their own transactions.  If transactions have fees that prohibit use for most economic activity, that means node count will drop until nodes are generally run by those who settle large amounts.  That is very centralizing.\n\nRaystonn\n\nOn 29 Mar 2017 12:14 p.m., Jared Lee Richardson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\nIn order for any blocksize increase to be agreed upon, more consensus is needed.  The proportion of users believing no blocksize increases are needed is larger than the hardfork target core wants(95% consensus).  The proportion of users believing in microtransactions for all is also larger than 5%, and both of those groups may be larger than 10% respectively.  I don't think either the Big-blocks faction nor the low-node-costs faction have even a simple majority of support.  Getting consensus is going to be a big mess, but it is critical that it is done.\n\nOn Wed, Mar 29, 2017 at 12:49 AM, Martin L\u00edzner via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\nIf there should be a hard-fork, Core team should author the code. Other dev teams have marginal support among all BTC users.\n\nIm tending to believe, that HF is necessary evil now. But lets do it in conservative approach:\n- Fix historical BTC issues, improve code\n- Plan HF activation date well ahead - 12 months+\n- Allow increasing block size on year-year basis as Luke suggested\n- Compromise with miners on initial block size bump (e.g. 2MB)\n- SegWit\n\nMartin Lizner\n\nOn Tue, Mar 28, 2017 at 6:59 PM, Wang Chun via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\nI've proposed this hard fork approach last year in Hong Kong Consensus\nbut immediately rejected by coredevs at that meeting, after more than\none year it seems that lots of people haven't heard of it. So I would\npost this here again for comment.\n\nThe basic idea is, as many of us agree, hard fork is risky and should\nbe well prepared. We need a long time to deploy it.\n\nDespite spam tx on the network, the block capacity is approaching its\nlimit, and we must think ahead. Shall we code a patch right now, to\nremove the block size limit of 1MB, but not activate it until far in\nthe future. I would propose to remove the 1MB limit at the next block\nhalving in spring 2020, only limit the block size to 32MiB which is\nthe maximum size the current p2p protocol allows. This patch must be\nin the immediate next release of Bitcoin Core.\n\nWith this patch in core's next release, Bitcoin works just as before,\nno fork will ever occur, until spring 2020. But everyone knows there\nwill be a fork scheduled. Third party services, libraries, wallets and\nexchanges will have enough time to prepare for it over the next three\nyears.\n\nWe don't yet have an agreement on how to increase the block size\nlimit. There have been many proposals over the past years, like\nBIP100, 101, 102, 103, 104, 105, 106, 107, 109, 148, 248, BU, and so\non. These hard fork proposals, with this patch already in Core's\nrelease, they all become soft fork. We'll have enough time to discuss\nall these proposals and decide which one to go. Take an example, if we\nchoose to fork to only 2MB, since 32MiB already scheduled, reduce it\nfrom 32MiB to 2MB will be a soft fork.\n\nAnyway, we must code something right now, before it becomes too late.\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org<mailto:bitcoin-dev at lists.linuxfoundation.org>\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170329/c46dcb07/attachment-0001.html>"
            },
            {
                "author": "Tom Zander",
                "date": "2017-03-30T10:34:45",
                "message_text_only": "On Wednesday, 29 March 2017 21:50:48 CEST Raystonn . via bitcoin-dev wrote:\n> Low node costs are a good goal for nodes that handle transactions the node\n> operator can afford.  Nobody is going to run a node for a network they do\n> not use for their own transactions.  If transactions have fees that\n> prohibit use for most economic activity, that means node count will drop\n> until nodes are generally run by those who settle large amounts.  That is\n> very centralizing.\n> \n> Raystonn\n\nThe idea that people won\u2019t run a node for a network they don\u2019t use for their \nown transactions is a very good observation and a good reason to get on-\nchain scaling happening well before lightning hits. \n\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "David Vorick",
                "date": "2017-03-30T11:19:19",
                "message_text_only": "> What we want is a true fee-market where the miner can decide to make a\nblock\n> smaller to get people to pay more fees, because if we were to go to 16MB\n> blocks in one go, the cost of the miner would go up, but his reward based\non\n> fees will go down!\n> A block so big that 100% of the transactions will always be mined in the\n> next block will just cause a large section of people to no longer feel the\n> need to pay fees.\n\n> As such I don\u2019t fear the situation where the block size limit goes up a\nlot\n> in one go, because it is not in anyone\u2019s interest to make the actual block\n> size follow.\n\nThere have been attacks demonstrated where a malicious miner with\nsufficient hashrate can leverage large blocks to exacerbate selfish mining.\nAdversarial behaviors from miners need to be considered, it's not safe to\nsimply assume that a miner won't have reasons to attack the network. We\nalready know that large empty blocks (rather, blocks with fake\ntransactions) can be leveraged in ways that both damages the network and\nincreases miner profits.\n\nIn general, fear of other currencies passing Bitcoin is unsubstantiated.\nBitcoin has by far the strongest development team, and also is by far the\nmost decentralized. To the best of my knowledge, Bitcoin is the only\ncryptocurrency out there that is both not-dead and also lacks a strong\ncentral leadership.\n\nA coin like ethereum may even be able to pass Bitcoin in market cap. But\nthat's okay. Ethereum has very different properties and it's not something\nI would trust as a tool to provide me with political sovereignty. Ethereum\npassing Bitcoin in market cap does not mean that it has proved superior to\nBitcoin. It could just mean that enterprises are really excited about\npermissioned blockchains. That's not interesting to me at any market cap.\n\nBitcoin's core value add is and should continue to be decentralization and\ntrustlessness. Nobody is remotely close to competing with Bitcoin on those\nfronts, and in my mind that's far more important than any of the other\nmania anyway.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/8cc36f43/attachment.html>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-03-30T21:42:31",
                "message_text_only": "> There have been attacks demonstrated where a malicious miner with\nsufficient hashrate can leverage large blocks to exacerbate selfish mining.\n\nCan you give me a link to this?  Having done a lot of mining, I really\nreally doubt this.  I'm assuming the theory relies upon propagation times\nand focuses on small miners versus large ones, but that's wrong.\nPropagation times don't affect small miners disproportionately, though they\nmight affect small POOLS disproportionately, that isn't the same thing at\nall.  No miner since at least 2014 has operated a full node directly with\neach miner - it is incredibly impractical to do so.  They retrieve only the\nmerkle root hash and other parameters from the stratum server, which is a\nvery small packet and does not increase with the size of the blocks.  If\nthey really want to select which transactions to include, some pools offer\noptions of that sort(or can, I believe) but almost no one does.  If they\ndon't like how their pool picks transactions, they'll use a different pool,\nthat simple.\n\nIf there's some other theory about a miner exploiting higher blocksizes\nselfishly then I'd love to read up on it to understand it.  If what\nyou/others actually meant by that was smaller \"pools,\" that's a much much\nsmaller problem.  Pools don't earn major profits and generally are at the\nmercy of their miners if they make bad choices or can't fix low\nperformance.  For pools, block propagation time was a major major issue\neven before blocks were full, and latency + packet loss between mining\nunits and the pool is also a big concern.  I was seeing occasional block\npropagation delays(over a minute) on a fiber connection in 2013/4 due to\nminute differences in peering.  If a pool can't afford enough bandwidth to\nkeep propagation times down, they can't be a pool.  Bigger blocksizes will\nmake it so they even more totally-can't-be-a-pool, but they already can't\nbe a pool, so who cares.  Plus, compact blocks should have already solve\nnearly all of this problem as I understand it.\n\nSo definitely want to know more if I'm misunderstanding the attack vector.\n\n> We already know that large empty blocks (rather, blocks with fake\ntransactions) can be leveraged in ways that both damages the network and\nincreases miner profits.\n\nMaybe you're meaning an attack where other pools get stuck on validation\ndue to processing issues?  This is also a nonissue.  The smallest viable\npool has enough difficulties with other, non-hardware related issues that\nbuying the largest, beefiest standard processor available with ample RAM\nwon't even come up on the radar.  No one cares about $600 in hardware\nversus $1000 in hardware when it takes you 6 weeks to get your peering and\nblock propagation configuration just right and another 6 months to convince\nminers to substantially use your pool.\n\nIf you meant miners and not pools, that's also wrong.  Mining hardware\ndoesn't validate blocks anymore, it hasn't been practical for years.  They\nonly get the merkle root hash of the valid transaction set.  The pool\nhandles the rest.\n\n> In general, fear of other currencies passing Bitcoin is unsubstantiated.\nBitcoin has by far the strongest development team, and also is by far the\nmost decentralized.\n\nMarkets only care a little bit what your development team is like.\nEthereum has Vitalik, who is an incredibly smart and respectable dude,\nwhile BU absolutely hates the core developers right now.  Markets are more\nlikely to put more faith in a single leader than core right now if that\ncomparison was really made.\n\n\"Most decentralized\" is nearly impossible to quantify, and has almost no\nvalue to speculators.  Since all of these markets are highly speculative,\nthey only care about future demand.  Future demand relies upon future use.\nUnsubstantiated?  Ethereum is already 28% of Bitcoin by cap and 24% by\ntrading.  Four months ago that was 4%.  Their transaction volume also\ndoubled.  What world are you living in?\n\n> A coin like ethereum may even be able to pass Bitcoin in market cap. But\nthat's okay. Ethereum has very different properties and it's not something\nI would trust as a tool to provide me with political sovereignty.\n\nWell great, I guess so long as you're ok with it we'll just roll with it.\nWait, no.  If Bitcoin loses its first-mover network effect, a small cadre\nof die-hard libertarians are not going to be able to keep it from becoming\na page in the history books.  Die hard libertarians can barely keep a voice\nin the U.S. congress - neither markets nor day-to-day users particularly\ncare about the philosophy, they care about what it can do for them.\n\n> Ethereum passing Bitcoin in market cap does not mean that it has proved\nsuperior to Bitcoin.\n\nThe markets have literally told us why Ethereum is shooting up.  Its\nbecause the Bitcoin community has fractured around a debate with nearly no\nprogress on a solution for the last 3 years, and especially because BU\nappears to be strong enough to think they can fork and the markets know\nfull well what a contentious fork will do to Bitcoin's near-term future.\n\n> It could just mean that enterprises are really excited about permissioned\nblockchains.\n\nThen it would have happened not when the BU situation imploded but when\nMicrosoft announced they were working with Ethereum on things like that.\nNo one cared about Microsoft's announcement.  You don't seriously believe\nwhat you're saying, do you?\n\n> That's not interesting to me at any market cap.\n\nI agree with you, but Bitcoin becoming a page in the history books because\na few die-hard libertarians didn't think price or adoption was important is\na big, big concern, especially when they almost have veto power.  Markets\ndon't care about philosophy, they care about future value.  Bitcoin has\nvalue because we think it may be the most useful new innovation in the\nfuture.  If we screw that future usefulness up, philosophy gives us no more\nvalue than Friendster has today.\n\nOn Thu, Mar 30, 2017 at 4:19 AM, David Vorick via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> > What we want is a true fee-market where the miner can decide to make a\n> block\n> > smaller to get people to pay more fees, because if we were to go to 16MB\n> > blocks in one go, the cost of the miner would go up, but his reward\n> based on\n> > fees will go down!\n> > A block so big that 100% of the transactions will always be mined in the\n> > next block will just cause a large section of people to no longer feel\n> the\n> > need to pay fees.\n>\n> > As such I don\u2019t fear the situation where the block size limit goes up a\n> lot\n> > in one go, because it is not in anyone\u2019s interest to make the actual\n> block\n> > size follow.\n>\n> There have been attacks demonstrated where a malicious miner with\n> sufficient hashrate can leverage large blocks to exacerbate selfish mining.\n> Adversarial behaviors from miners need to be considered, it's not safe to\n> simply assume that a miner won't have reasons to attack the network. We\n> already know that large empty blocks (rather, blocks with fake\n> transactions) can be leveraged in ways that both damages the network and\n> increases miner profits.\n>\n> In general, fear of other currencies passing Bitcoin is unsubstantiated.\n> Bitcoin has by far the strongest development team, and also is by far the\n> most decentralized. To the best of my knowledge, Bitcoin is the only\n> cryptocurrency out there that is both not-dead and also lacks a strong\n> central leadership.\n>\n> A coin like ethereum may even be able to pass Bitcoin in market cap. But\n> that's okay. Ethereum has very different properties and it's not something\n> I would trust as a tool to provide me with political sovereignty. Ethereum\n> passing Bitcoin in market cap does not mean that it has proved superior to\n> Bitcoin. It could just mean that enterprises are really excited about\n> permissioned blockchains. That's not interesting to me at any market cap.\n>\n> Bitcoin's core value add is and should continue to be decentralization and\n> trustlessness. Nobody is remotely close to competing with Bitcoin on those\n> fronts, and in my mind that's far more important than any of the other\n> mania anyway.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/35da9093/attachment-0001.html>"
            },
            {
                "author": "Aymeric Vitte",
                "date": "2017-03-30T11:24:53",
                "message_text_only": "Except if people have some incentive to do it, simple example: I have\nsome servers, they are doing some work but are not so busy finally, I\ncan decide to run some nodes, this does not cost me more (and less for\nthe planet than setting up new servers) and I get some rewards (as an\nillustration of this my servers are mining zcash and running zcash\nnodes, this is of course absolutely not profitable but since this does\nnot disturb what the servers are primarly intended for and I get some\nsmall zecs with no additionnal costs, why not doing it?) Of course we\ncan then consider that people doing this are finally using the network...\n\n\nLe 30/03/2017 \u00e0 12:34, Tom Zander via bitcoin-dev a \u00e9crit :\n> On Wednesday, 29 March 2017 21:50:48 CEST Raystonn . via bitcoin-dev wrote:\n>> Low node costs are a good goal for nodes that handle transactions the node\n>> operator can afford.  Nobody is going to run a node for a network they do\n>> not use for their own transactions.  If transactions have fees that\n>> prohibit use for most economic activity, that means node count will drop\n>> until nodes are generally run by those who settle large amounts.  That is\n>> very centralizing.\n>>\n>> Raystonn\n> The idea that people won\u2019t run a node for a network they don\u2019t use for their \n> own transactions is a very good observation and a good reason to get on-\n> chain scaling happening well before lightning hits. \n>\n\n-- \nZcash wallets made simple: https://github.com/Ayms/zcash-wallets\nBitcoin wallets made simple: https://github.com/Ayms/bitcoin-wallets\nGet the torrent dynamic blocklist: http://peersm.com/getblocklist\nCheck the 10 M passwords list: http://peersm.com/findmyass\nAnti-spies and private torrents, dynamic blocklist: http://torrent-live.org\nPeersm : http://www.peersm.com\ntorrent-live: https://github.com/Ayms/torrent-live\nnode-Tor : https://www.github.com/Ayms/node-Tor\nGitHub : https://www.github.com/Ayms"
            },
            {
                "author": "Aymeric Vitte",
                "date": "2017-03-30T10:13:21",
                "message_text_only": "Apparently we will not get an understanding and we will probably be told\nsoon that this is going off topic, so short answer\n\nEh --> No, maybe you would like to quote Mozilla or the W3C too, all of\nthose organizations are financed by the big companies and are promoting\ntheir interests (specs, DRM, etc), then would you really trust them?\n\nA full node does not have to validate all tx and blocks, I am not aware\nof any P2P system organized with peers and intermediate nodes (with no\nincentive) that did survive (diaspora for example), and the most famous\none (who btw is handling much more traffic than what you describe) is\ndoing well because there is an intrinsic incentive for the users, see my\ncomment here\nhttps://ec.europa.eu/futurium/en/content/final-report-next-generation-internet-consultation,\nsurprising to see that nobody raised those issues during the consultation\n\nParadoxally crypto currencies allow now to reward/sustain other systems,\nthen probably they should concentrate first on how to reward/sustain\nthemselves, different ideas have surfaced to reward the full nodes but\nstill seem very far to materialize\n\nComing back again to the subject, does anyone have any idea of who are\nbehind the existing full nodes and how to rank them according to their\nparticipation to the network? Up to now there has been quasi no\ndiscussion about what are the plans for the full nodes which tends to\nsuggest that this is obvious\n\n\nLe 30/03/2017 \u00e0 03:14, Jared Lee Richardson a \u00e9crit :\n> > I have heard such theory before, it's a complete mistake to think\n> that others would run full nodes to protect their business and then yours,\n>\n> It is a complete mistake to think that others would create a massive\n> website to share huge volumes of information without any charges or\n> even any advertising revenue.\n>\n> https://en.wikipedia.org/wiki/List_of_most_popular_websites\n>\n> Wikipedia, 5th largest website.  Well, I guess there's some exceptions\n> to the complete mistake, eh?\n>\n> Relying on other nodes to provide verification for certain types of\n> transactions is completely acceptable.  If I'm paying a friend $100,\n> or paying my landlord $500, that's almost certainly totally fine. \n> There's nothing that says SPV nodes can't source verifications from\n> multiple places to prevent one source from being compromised.  There's\n> also some proposed ideas for fraud proofs that could be added, though\n> I'm not familiar with how they work.  If verification was a highly in\n> demand service, but full nodes were expensive, companies would spring\n> up that offered to verify transactions for a miniscule fee per month. \n> They couldn't profit from 100 customers, but they could profit from\n> 10,000 customers, and their reputation and business would rely on\n> trustworthy verification services.\n>\n> I certainly wouldn't suggest any of those things for things like\n> million dollar purchase, or a purchase where you don't know the seller\n> and have no recourse if something goes wrong, or a purchase where\n> failure to complete has life-altering consequences.  Those\n> transactions are the vast minority of transactions, but they need the\n> additional security of full-node verification.  Why is it unreasonable\n> to ask them to pay for it, but not also ask other people who really\n> don't need that security to pay for it?  If a competing blockchain\n> successfully offers both high security and low-fee users exactly what\n> that particular user needs, they have a major advantage against one\n> that only caters to one group or the other.\n>\n> > Running a full node is trivial and not expensive for people who know\n> how to do it, even with much bigger blocks,\n>\n> This logic does not hold against the scale of the numbers.  Worldwide\n> 2015 transaction volume was 426 billion and is growing by almost 10%\n> per year.  In Bitcoin terms, that's 4.5 GB blocks, and approximately\n> $30,000 in bandwidth a month just to run a pruning node.  And there's\n> almost no limit to the growth - 426 billion transactions is despite\n> the fact that the majority of humans on earth are unbanked and did not\n> add a single transaction to that number.\n>\n> I don't believe the argument that Bitcoin can serve all humans on\n> earth is any more valid than the argument that any computer hardware\n> should be able to run a node.  Low node operational costs mean a\n> proportional penalty to Bitcoin's usability, adoption, and price.  Low\n> transaction fee costs mean a proportional high node operational cost,\n> and therefore possibly represent node vulnerabilities or verification\n> insecurities.\n>\n> There's a balancing point in the middle somewhere that achieves the\n> highest possible Bitcoin usability without putting the network at\n> risk, and providing layers of security only for the transactions that\n> truly need it and can justify the cost of such security.\n>\n>\n>\n> On Wed, Mar 29, 2017 at 3:33 PM, Aymeric Vitte <vitteaymeric at gmail.com\n> <mailto:vitteaymeric at gmail.com>> wrote:\n>\n>     I have heard such theory before, it's a complete mistake to think\n>     that others would run full nodes to protect their business and\n>     then yours, unless it is proven that they are decentralized and\n>     independent\n>\n>     Running a full node is trivial and not expensive for people who\n>     know how to do it, even with much bigger blocks, assuming that the\n>     full nodes are still decentralized and that they don't have to\n>     fight against big nodes who would attract the traffic first\n>\n>     I have posted many times here a small proposal, that exactly\n>     describes what is going on now, yes miners are nodes too... it's\n>     disturbing to see that despite of Tera bytes of BIPs, papers, etc\n>     the current situation is happening and that all the supposed\n>     decentralized system is biased by centralization\n>\n>     Do we know what majority controls the 6000 full nodes?\n>\n>\n>     Le 29/03/2017 \u00e0 22:32, Jared Lee Richardson via bitcoin-dev a \u00e9crit :\n>>     > Perhaps you are fortunate to have a home computer that has more\n>>     than a single 512GB SSD. Lots of consumer hardware has that\n>>     little storage.\n>>\n>>     That's very poor logic, sorry.  Restricted-space SSD's are not a\n>>     cost-effective hardware option for running a node.  Keeping\n>>     blocksizes small has significant other costs for everyone. \n>>     Comparing the cost of running a node under arbitrary conditons A,\n>>     B, or C when there are far more efficient options than any of\n>>     those is a very bad way to think about the costs of running a\n>>     node.  You basically have to ignore the significant consequences\n>>     of keeping blocks small.\n>>\n>>     If node operational costs rose to the point where an entire wide\n>>     swath of users that we do actually need for security purposes\n>>     could not justify running a node, that's something important for\n>>     consideration.  For me, that translates to modern hardware that's\n>>     relatively well aligned with the needs of running a node -\n>>     perhaps budget hardware, but still modern - and above-average\n>>     bandwidth caps.\n>>\n>>     You're free to disagree, but your example only makes sense to me\n>>     if blocksize caps didn't have serious consequences.  Even if\n>>     those consequences are just the threat of a contentious fork by\n>>     people who are mislead about the real consequences, that threat\n>>     is still a consequence itself.\n>>\n>>     On Wed, Mar 29, 2017 at 9:18 AM, David Vorick via bitcoin-dev\n>>     <bitcoin-dev at lists.linuxfoundation.org\n>>     <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>>\n>>         Perhaps you are fortunate to have a home computer that has\n>>         more than a single 512GB SSD. Lots of consumer hardware has\n>>         that little storage. Throw on top of it standard consumer\n>>         usage, and you're often left with less than 200 GB of free\n>>         space. Bitcoin consumes more than half of that, which feels\n>>         very expensive, especially if it motivates you to buy another\n>>         drive.\n>>\n>>         I have talked to several people who cite this as the primary\n>>         reason that they are reluctant to join the full node club.\n>>\n>>         _______________________________________________\n>>         bitcoin-dev mailing list\n>>         bitcoin-dev at lists.linuxfoundation.org\n>>         <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>>         https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>         <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>>\n>>\n>>\n>>\n>>     _______________________________________________\n>>     bitcoin-dev mailing list\n>>     bitcoin-dev at lists.linuxfoundation.org\n>>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>\n>     -- \n>     Zcash wallets made simple: https://github.com/Ayms/zcash-wallets\n>     <https://github.com/Ayms/zcash-wallets>\n>     Bitcoin wallets made simple: https://github.com/Ayms/bitcoin-wallets\n>     <https://github.com/Ayms/bitcoin-wallets>\n>     Get the torrent dynamic blocklist: http://peersm.com/getblocklist\n>     Check the 10 M passwords list: http://peersm.com/findmyass\n>     Anti-spies and private torrents, dynamic blocklist: http://torrent-live.org\n>     Peersm : http://www.peersm.com\n>     torrent-live: https://github.com/Ayms/torrent-live\n>     <https://github.com/Ayms/torrent-live>\n>     node-Tor : https://www.github.com/Ayms/node-Tor\n>     <https://www.github.com/Ayms/node-Tor>\n>     GitHub : https://www.github.com/Ayms\n>\n-- \nZcash wallets made simple: https://github.com/Ayms/zcash-wallets\nBitcoin wallets made simple: https://github.com/Ayms/bitcoin-wallets\nGet the torrent dynamic blocklist: http://peersm.com/getblocklist\nCheck the 10 M passwords list: http://peersm.com/findmyass\nAnti-spies and private torrents, dynamic blocklist: http://torrent-live.org\nPeersm : http://www.peersm.com\ntorrent-live: https://github.com/Ayms/torrent-live\nnode-Tor : https://www.github.com/Ayms/node-Tor\nGitHub : https://www.github.com/Ayms\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/cf114980/attachment-0001.html>"
            },
            {
                "author": "David Vorick",
                "date": "2017-03-31T16:14:42",
                "message_text_only": "No one is suggesting anything like this.  The cost of running a node\nthat could handle 300% of the 2015 worldwide nonbitcoin transaction\nvolume today would be a rounding error for most exchanges even if\nprices didn't rise.\n\n\nThen explain why PayPal has multiple datacenters. And why Visa has multiple\ndatacenters. And why the banking systems have multiple datacenters each.\n\nI'm guessing it's because you need that much juice to run a global payment\nsystem at the transaction volumes that they run at.\n\nUnless you have professional experience working directly with transaction\nprocessors handling tens of millions of financial transactions per day, I\nthink we can fully discount your assessment that it would be a rounding\nerror in the budget of a major exchange or Bitcoin processor to handle that\nmuch load. And even if it was, it wouldn't matter because it's extremely\nimportant to Bitcoin's security that it's everyday users are able to and\nare actively running full nodes.\n\nI'm not going to take the time to refute everything you've been saying but\nI will say that most of your comments have demonstrated a similar level of\nignorance as the one above.\n\nThis whole thread has been absurdly low quality.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170331/5ce1e10b/attachment.html>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-03-31T16:46:10",
                "message_text_only": "I guess I should caveat, a rounding error is a bit of exaggeration -\nmostly because I previously assumed that it would take 14 years for\nthe network to reach such a level, something I didn't say and that you\nmight not grant me.\n\nI don't know why paypal has multiple datacenters, but I'm guessing it\nprobably has a lot more to do with everything else they do -\ninterface, support, tax compliance, replication, redundancy - than it\ndoes with the raw numbers of transaction volumes.\n\nWhat I do know is the math, though.  WW tx volume = 426,000,000,000 in\n2015.  Assuming tx size of ~500 bytes, that's 669 terabytes of data\nper year.  At a hard drive cost of 0.021 per GB, that's $36k a year or\nso and declines ~14% a year.\n\nThe bandwidth is the really big cost.  You are right that if this\nhypothetical node also had to support historical syncing, the numbers\nwould probably be unmanagable.  But that can be solved with a simple\ncheckpointing system for the vast majority of users, and nodes could\nsolve it by not supporting syncing / reducing peer count.  With a peer\ncount of 25 I measured ~75 Gb/month with today's blocksize cap.  That\nworks out to roughly 10 relays(sends+receives) per transaction\nassuming all blocks were full, which was a pretty close approximation.\nThe bandwidth data of our 426 billion transactions per year works out\nto 942 mbit/s.  That's 310 Terabytes per month of bandwidth - At\ntoday's high-volume price of 0.05 per GB, that's $18,500 a month or\n$222,000 a year.  Plus the $36k for storage per year brings it to\n~$250k per year.  Not a rounding error, but within the rough costs of\nrunning an exchange - a team of 5 developers works out to ~$400-600k a\nyear, and the cost of compliance with EU and U.S. entities (including\nlawyers) runs upwards of a million dollars a year.  Then there's the\nsupport department, probably ~$100-200k a year.\n\nThe reason I said a rounding error was that I assumed that it would\ntake until 2032 to reach that volume of transactions (Assuming\n+80%/year of growth, which is our 4-year and 2-year historical average\ntx/s growth).  If hard drive prices decline by 14% per year, that cost\nbecomes $3,900 a year, and if bandwidth prices decline by 14% a year\nthat cost becomes $1800 a month($21,600 a year).  Against a\nmulti-million dollar budget, even 3x that isn't a large concern,\nthough not, as I stated, a rounding error.  My bad.\n\nI didn't approximate for CPU usage, as I don't have any good estimates\nfor it, and I don't have significant reason to believe that it is a\nhigher cost than bandwidth, which seems to be the controlling cost\ncompared to adding CPU's.\n\n> I'm not going to take the time to refute everything you've been saying\n\nCare to respond to the math?\n\n> This whole thread has been absurdly low quality.\n\nWell, we agree on something at least.\n\nOn Fri, Mar 31, 2017 at 9:14 AM, David Vorick <david.vorick at gmail.com> wrote:\n> No one is suggesting anything like this.  The cost of running a node\n> that could handle 300% of the 2015 worldwide nonbitcoin transaction\n> volume today would be a rounding error for most exchanges even if\n> prices didn't rise.\n>\n>\n> Then explain why PayPal has multiple datacenters. And why Visa has multiple\n> datacenters. And why the banking systems have multiple datacenters each.\n>\n> I'm guessing it's because you need that much juice to run a global payment\n> system at the transaction volumes that they run at.\n>\n> Unless you have professional experience working directly with transaction\n> processors handling tens of millions of financial transactions per day, I\n> think we can fully discount your assessment that it would be a rounding\n> error in the budget of a major exchange or Bitcoin processor to handle that\n> much load. And even if it was, it wouldn't matter because it's extremely\n> important to Bitcoin's security that it's everyday users are able to and are\n> actively running full nodes.\n>\n> I'm not going to take the time to refute everything you've been saying but I\n> will say that most of your comments have demonstrated a similar level of\n> ignorance as the one above.\n>\n> This whole thread has been absurdly low quality."
            },
            {
                "author": "David Vorick",
                "date": "2017-03-31T18:23:00",
                "message_text_only": "Sure, your math is pretty much entirely irrelevant because scaling systems\nto massive sizes doesn't work that way.\n\nAt 400B transactions per year we're looking at block sizes of 4.5 GB, and a\ndatabase size of petabytes. How much RAM do you need to process blocks like\nthat? Can you fit that much RAM into a single machine? Okay, you can't fit\nthat much RAM into a single machine. So you have to rework the code to\noperate on a computer cluster.\n\nAlready we've hit a significant problem. You aren't going to rewrite\nBitcoin to do block validation on a computer cluster overnight. Further,\nare storage costs consistent when we're talking about setting up clusters?\nAre bandwidth costs consistent when we're talking about setting up\nclusters? Are RAM and CPU costs consistent when we're talking about setting\nup clusters? No, they aren't. Clusters are a lot more expensive to set up\nper-resource because they need to talk to eachother and synchronize with\neachother and you have a LOT more parts, so you have to build in\nredundancies that aren't necessary in non-clusters.\n\nAlso worth pointing out that peak transaction volumes are typically 20-50x\nthe size of typical transaction volumes. So your cluster isn't going to\nneed to plan to handle 15k transactions per second, you're really looking\nat more like 200k or even 500k transactions per second to handle\npeak-volumes. And if it can't, you're still going to see full blocks.\n\nYou'd need a handful of experts just to maintain such a thing. Disks are\ngoing to be failing every day when you are storing multiple PB, so you\ncan't just count a flat cost of $20/TB and expect that to work. You're\ngoing to need redundancy and tolerance so that you don't lose the system\nwhen a few of your hard drives all fail within minutes of eachother. And\nyou need a way to rebuild everything without taking the system offline.\n\nThis isn't even my area of expertise. I'm sure there are a dozen other\nsignificant issues that one of the Visa architects could tell you about\nwhen dealing with mission-critical data at this scale.\n\n--------\n\nMassive systems operate very differently and are much more costly per-unit\nthan tiny systems. Once we grow the blocksize large enough that a single\ncomputer can't do all the processing all by itself we get into a world of\nmuch harder, much more expensive scaling problems. Especially because we're\ntalking about a distributed system where the nodes don't even trust each\nother. And transaction processing is largely non-parallel. You have to\ncheck each transaction against each other transaction to make sure that\nthey aren't double spending eachother. This takes synchronization and\nprevents 500 CPUs from all crunching the data concurrently. You have to be\na lot more clever than that to get things working and consistent.\n\nWhen talking about scalability problems, you should ask yourself what other\nsystems in the world operate at the scales you are talking about. None of\nthem have cost structures in the 6 digit range, and I'd bet (without\nactually knowing) that none of them have cost structures in the 7 digit\nrange either. In fact I know from working in a related industry that the\ncost structures for the datacenters (plus the support engineers, plus the\nsoftware management, etc.) that do airline ticket processing are above $5\nmillion per year for the larger airlines. Visa is probably even more\nexpensive than that (though I can only speculate).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170331/229b0e3d/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2017-03-31T18:58:44",
                "message_text_only": "As an independently verifiable, decentralized store of public information, the Bitcoin block tree and transaction DAG do have an advantage over systems such as Visa. The store is just a cache. There is no need to implement reliability in storage or in communications. It is sufficient to be able to detect invalidity. And even if a subset of nodes fail to do so, the system overall compensates.\n\nAs such the architecture of a Bitcoin node and its supporting hardware requirements are very different from an unverifiable, centralized store of private information. So in that sense the comparison below is not entirely fair. Many, if not most, of the high costs of a Visa datacenter do not apply because of Bitcoin's information architecture.\n\nHowever, if the system cannot remain decentralized these architectural advantages will not hold. At that point your considerations below are entirely valid. Once the information is centralized it necessarily becomes private and fragile. Conversely, once it becomes private it necessarily becomes centralized and fragile. This fragility requires significant investment by the central authority to maintain.\n\nSo as has been said, we can have decentralization and its benefit of trustlessness or we can have Visa. We already have Visa. Making another is entirely uninteresting.\n\ne \n\n> On Mar 31, 2017, at 11:23 AM, David Vorick via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> Sure, your math is pretty much entirely irrelevant because scaling systems to massive sizes doesn't work that way.\n> \n> At 400B transactions per year we're looking at block sizes of 4.5 GB, and a database size of petabytes. How much RAM do you need to process blocks like that? Can you fit that much RAM into a single machine? Okay, you can't fit that much RAM into a single machine. So you have to rework the code to operate on a computer cluster.\n> \n> Already we've hit a significant problem. You aren't going to rewrite Bitcoin to do block validation on a computer cluster overnight. Further, are storage costs consistent when we're talking about setting up clusters? Are bandwidth costs consistent when we're talking about setting up clusters? Are RAM and CPU costs consistent when we're talking about setting up clusters? No, they aren't. Clusters are a lot more expensive to set up per-resource because they need to talk to eachother and synchronize with eachother and you have a LOT more parts, so you have to build in redundancies that aren't necessary in non-clusters.\n> \n> Also worth pointing out that peak transaction volumes are typically 20-50x the size of typical transaction volumes. So your cluster isn't going to need to plan to handle 15k transactions per second, you're really looking at more like 200k or even 500k transactions per second to handle peak-volumes. And if it can't, you're still going to see full blocks.\n> \n> You'd need a handful of experts just to maintain such a thing. Disks are going to be failing every day when you are storing multiple PB, so you can't just count a flat cost of $20/TB and expect that to work. You're going to need redundancy and tolerance so that you don't lose the system when a few of your hard drives all fail within minutes of eachother. And you need a way to rebuild everything without taking the system offline.\n> \n> This isn't even my area of expertise. I'm sure there are a dozen other significant issues that one of the Visa architects could tell you about when dealing with mission-critical data at this scale.\n> \n> --------\n> \n> Massive systems operate very differently and are much more costly per-unit than tiny systems. Once we grow the blocksize large enough that a single computer can't do all the processing all by itself we get into a world of much harder, much more expensive scaling problems. Especially because we're talking about a distributed system where the nodes don't even trust each other. And transaction processing is largely non-parallel. You have to check each transaction against each other transaction to make sure that they aren't double spending eachother. This takes synchronization and prevents 500 CPUs from all crunching the data concurrently. You have to be a lot more clever than that to get things working and consistent.\n> \n> When talking about scalability problems, you should ask yourself what other systems in the world operate at the scales you are talking about. None of them have cost structures in the 6 digit range, and I'd bet (without actually knowing) that none of them have cost structures in the 7 digit range either. In fact I know from working in a related industry that the cost structures for the datacenters (plus the support engineers, plus the software management, etc.) that do airline ticket processing are above $5 million per year for the larger airlines. Visa is probably even more expensive than that (though I can only speculate).\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Rodney Morris",
                "date": "2017-03-31T21:23:01",
                "message_text_only": "You guessed wrong. Multiple data centres are as much about redundancy and\nresiliency, and latency.\n\nAs for the cost, data centre space, business grade communication lines, and\nstaff are orders of magnitude more expensive than the physical hardware\nthey support.\n\nI'd like to call you out on your continuing reduction to absurdity and\nslippery slope arguments. Just because we can't handle 4GB blocks today,\ndoesn't mean we shouldn't aim in that direction. Doesn't mean we shouldn't\nbe taking our first second and third baby steps in that direction.\n\nIf the obsession with every personal computer being able to run a fill node\ncontinues then bitcoin will be consigned to the dustbin of history, a\nfootnote to the story of the global crypto currency that eventually took\nover the world.\n\nThanks\nRodney\n\n\nDate: Fri, 31 Mar 2017 12:14:42 -0400\nFrom: David Vorick <david.vorick at gmail.com>\nTo: Jared Lee Richardson <jaredr26 at gmail.com>\nCc: Bitcoin Dev <bitcoin-dev at lists.linuxfoundation.org>\nSubject: Re: [bitcoin-dev] Hard fork proposal from last week's meeting\nMessage-ID:\n        <CAFVRnyqSMVj2Ttc4_5vuk73Z5yRJdxeSodvkdjqsrHbgghcmUQ at mail.gmail.com>\nContent-Type: text/plain; charset=\"utf-8\"\n\n\nThen explain why PayPal has multiple datacenters. And why Visa has multiple\ndatacenters. And why the banking systems have multiple datacenters each.\n\nI'm guessing it's because you need that much juice to run a global payment\nsystem at the transaction volumes that they run at.\n\n\n\nUnless you have professional experience working directly with transaction\nprocessors handling tens of millions of financial transactions per day, I\nthink we can fully discount your assessment that it would be a rounding\nerror in the budget of a major exchange or Bitcoin processor to handle that\nmuch load. And even if it was, it wouldn't matter because it's extremely\nimportant to Bitcoin's security that it's everyday users are able to and\nare actively running full nodes.\n\nI'm not going to take the time to refute everything you've been saying but\nI will say that most of your comments have demonstrated a similar level of\nignorance as the one above.\n\nThis whole thread has been absurdly low quality.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170401/54de6975/attachment-0001.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2017-03-31T23:13:09",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 03/31/2017 02:23 PM, Rodney Morris via bitcoin-dev wrote:\n> If the obsession with every personal computer being able to run a\n> fill node continues then bitcoin will be consigned to the dustbin\n> of history,\n\nThe cause of the block size debate is the failure to understand the\nBitcoin security model. This failure is perfectly exemplified by the\nabove statement. If a typical personal computer cannot run a node\nthere is no security.\n\ne\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\n\niQEcBAEBCAAGBQJY3uJ8AAoJEDzYwH8LXOFOrBoH/1VdXQObKZ2JPHL387Sd8qT4\nzzWt8tKFD+6/uCS8re97h1lZcbwb3EzBOB1J15mJ3fqTOU/rPCitN+JZAMgpw/z9\nNGNp4KQDHo3vLiWWOq2GhJzyVAOcDKYLsY8/NrHK91OtABD2XIq9gERwRoZZE4rb\nOPSjSAGvDK8cki72O7HpyEKX5WEyHsHNK/JmBDdTjlzkMcNEbBlYMgO24RC6x+UA\n8Fh17rOcfGv6amIbmS7mK3EMkkGL83WmsgJKXNl4inI1R8z5hVKRqOFMPxmTDXVc\ndEHtw8poHOX1Ld85m0+Tk2S7IdH66PCnhsKL9l6vlH02uAvLNfKxb+291q2g3YU=\n=HPCK\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Hard fork proposal from last week's meeting",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "praxeology_guy",
                "Martin L\u00edzner",
                "Juan Garavaglia",
                "Wang Chun",
                "David Vorick",
                "Aymeric Vitte",
                "Jorge Tim\u00f3n",
                "Matt Corallo",
                "Bram Cohen",
                "Eric Voskuil",
                "Jeremy",
                "Emin G\u00fcn Sirer",
                "Luv Khemani",
                "Tom Zander",
                "Daniele Pinna",
                "Luke Dashjr",
                "Jared Lee Richardson",
                "Douglas Roark",
                "Peter R",
                "Rodney Morris",
                "Andrew Johnson",
                "Johnson Lau",
                "Alphonse Pace",
                "Paul Iverson",
                "Raystonn .",
                "Pieter Wuille",
                "Ryan J Martin"
            ],
            "messages_count": 71,
            "total_messages_chars_count": 301578
        }
    },
    {
        "title": "[bitcoin-dev] Request for Comments: Mastering Bitcoin 2nd Edition",
        "thread_messages": [
            {
                "author": "Andreas M. Antonopoulos",
                "date": "2017-03-29T19:30:23",
                "message_text_only": "I'm requesting feedback and corrections for the second edition of\n\"Mastering Bitcoin\". Apologies if this is considered off-topic - it is only\nmy second message to this list in 4 years and I think it is relevant\nbecause this book is the first source of information for many new bitcoin\ndevelopers.\n\nThe book is in pre-production and will be published within the next 6-8\nweeks. The new edition covers many new topics including segwit, bip9\nsignalling, timelocks, payment channels & lightning network. In addition,\nmost chapters have seen big changes, clarifications and corrections.\n\nThe book is open source (CC-BY-SA) and produced on github (\nhttps://github.com/bitcoinbook/bitcoinbook/tree/develop). Pull requests,\nissues and comments are welcome, only 2-3 weeks left before it goes into a\nproduction freeze.\n\nMany thanks,\n\nAndreas\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/4e010b11/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Request for Comments: Mastering Bitcoin 2nd Edition",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Andreas M. Antonopoulos"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1015
        }
    },
    {
        "title": "[bitcoin-dev] Block size adjustment idea - expedience fees + difficulty scaling proportional to block size (+ fee pool)",
        "thread_messages": [
            {
                "author": "Natanael",
                "date": "2017-03-30T09:34:31",
                "message_text_only": "I had these following ideas as I was thinking about how to allow larger\nblocks without incentivizing the creation of excessively large blocks. I\ndon't know how much of this is novel, I'd appreciate if anybody could link\nto any relevant prior art. I'm making no claims on this, anything novel in\nhere is directly released into public domain.\n\nIn short, I'm trying to rely on simple but direct incentives to improve the\nbehavior of Bitcoin.\n\nFeedback requested. Some simulations requested, see below if you're willing\nto help. Any questions are welcome.\n\n---\n\nExpedience fees. Softfork compatible.\n\nYou want to really make sure your transaction gets processed quickly?\nTransactions could have a second fee type, a specially labeled\nanyone-can-spend output with an op_return value defining a \"best-before\"\nblock number and some function describing the decline of the fee value for\nevery future block, such that before block N the miners can claim the full\nexpedience fee + the standard fee (if any), between block N+1 and N+X the\nminer can claim a reduced expedience fee + standard fee, afterwards only\nthe standard fee.\n\nWhen a transaction is processed late such that not the full expedience fee\ncan be claimed, the remainder of the expedience fee output is returned to\nthe specified address among the inputs/outputs (could be something like\nin#3 for the address used by the 3rd UTXO input). This would have to be\ndone for all remaining expedience fees within the last transaction in the\nblock, inserted there by the miner.\n\nThese additional UTXO:s does increase overhead somewhat, but hopefully not\nby too much. If we're going to modify the transaction syntax eventually,\nthen we could take the chance to design for this to reduce overhead.\n\nMy current best idea for how to handle returned expedience fees in\nmultiuser transactions (coinjoin, etc) is to donate it to an agreed upon\naddress. For recurring donation addresses (the fee pool included!), this\nreduces the number of return UTXO:s in the fee processing transaction.\n\nThe default client policy may be to split the entire fee across an\nexpedience fee and a fee pool donation, where the donation part becomes\nlarger the later the transaction gets processed. This is expected to slow\ndown the average inclusion speed of already delayed transactions, but they\nremain profitable to include.\n\nThe dynamics here is simple, a miner is incentivized to process a\ntransaction with an expedience fee before a standard fee of the same\nvalue-per-bit in order to not reduce the total value of the available fees\nof all standing transactions they can process. The longer they wait, the\nless total fees available.\n\nSidenote: a steady stream of expedience fees reduces the profitability of\nblock withholding attacks (!), at some threshold it should make it entirely\nunprofitable vs standard mining. This is due to the increased risk of\nlosing valuable expedience fees added after you finished your first block\n(as the available value will be reduced in your block #2, vs what other\nminers can claim while still mining on that previous block).\n(Can somebody verify this with simulations?)\n\n---\n\nFee pool. Softfork compatible.\n\nWe want to smooth out fee payments too for the future when the subsidy\ndrops, to prevent deliberate forking to steal fees. We can introduce a\ndesignated P2SH anyone-can-spend fee pool address. The miner can never\nclaim the full fees from his block or claim the full amount in the pool,\nonly some percentage of both. The remainder goes back into the pool (this\nmight be done at the end of the same expedience fee processing transaction\ndescribed above). Anybody can deliberately pay to the pool.\n\nThe fee pool is intended to act as a \"buffer\" such that it remains\nprofitable to not try to steal fees but to just mine normally, even during\nrelatively extreme fee value variance (consider the end of a big\ninternational shopping weekend).\n\nThe fee value claimed by the miners between blocks is allowed to vary, but\nwe want to avoid order-of-magnitude size variation (10x). We do however\nwant the effect of expedience fees to have an impact. Perhaps some\nlogarithmic function can smooth it out? Forcing larger fees to be\ndistributed over longer time periods?\n\n---\n\nBlock size dependent difficulty scaling. Hardfork required.\n\nLarger blocks means greater difficulty - but it doesn't scale linearly,\nrather a little less than linearly. That means miners can take a penalty in\ndifficulty to claim a greater number of high fee transactions in the same\namount of time (effectively increasing \"block size bitrate\"), increasing\ntheir profits. When such profitable fees aren't available, they have to\nreduce block size.\n\nIn other words, the users literally pay miners to increase block size (or\ndon't pay, which reduces it).\n\n(Sidenote: I am in favor of combining this with the idea of a 32 MB max\nblocksize (or larger), with softforked scheduled lower size caps (perhaps\nstarting at 4 MB max) that grows according to a schedule. This reduces the\nrisk of rapidly increasing load before we have functional second layer\nscaling in place.)\n\nIn order for a miner to profit from adding additional transactions, their\nfees must exceed the calculated cost of the resulting difficulty penalty to\nmake it worth it to create a larger block. Such loads are expected during\ninternational shopping weekends.\nWith only a few available high value transactions the incentive becomes the\nreverse, to create a smaller block with lower difficulty to faster claim\nthose fees.\n\nTo keep the average 10 minute block rate and to let this mechanism shift\nthe \"block size bitrate\" as according to the fee justified block size\nchanges, we set an Expected blocksize value that changes over time, and we\nchange the difficulty target into the Standard difficulty target, where\neach block must reach a Scaled difficulty target .\n\nIn terms of math we do something like this:\nScaled difficulty = Standard difficulty * f(blocksize), where f would\nlikely be some logarithmic function, and blocksize is defined in terms of\nunits of Expected blocksize (a block 1.5x larger than Expected blocksize\ngets a value of 1.5).\n\nWhen we retarget the Standard difficulty and Expected blocksize we do this:\nStandard difficulty = Network hashrate per 10 minutes (approximately same\nas before, but now we take the Scaled difficulty of the last period's\nprevious blocks into consideration)\nStandard blocksize = Recent average effective block bitrate = (sum of\nrecent (weighted!) block sizes / length of timeperiod) / number of blocks\nin a retargeting period.\n\nThus, generating larger blocks drives up the long term standard block\nbitrate, smaller blocks reduces it, in both cases we strive to average 1\nblock per 10 minutes.\n\nCombining this with expedience fees makes it even more effective;\n\nThere's always a cutoff for where a miner stops including unprocessed\ntransactions and let the rest remain for the next block. For standard fees,\nthis would result in a fairly static block size and transactions backlog.\nWith expedience fees your transaction can bypass standard fees with same\nvalue-per-bit, as explained above, because otherwise the miners reduces the\nvalue of their future expected fees. The more people that do this, the\ngreater incentive to not delay transactions and instead increase the\nblocksize. (Can somebody help with the math here? I want simulations of\nthis.)\n\n(Sidenote: I'm in favor of RBF, replace-by-fee. This makes the above work\nmuch more smoothly. Anybody relying on the security of unconfirmed\ntransactions for any significant value *have to* rely on some kind of\nincentive protected multisignature transaction, including LN type second\nlayer schemes. The other option is just not secure.)\n\nIf load is low then you can add a high expedience fee to incentivize the\ncreation of a smaller block with your transaction, since difficulty will be\nreduced for the smaller block. This means the miner has a higher chance of\nbeating the competition. Adding additional lower fee transactions may\nreduce his average value-per-bit to become less profitable.\n\nMiners simply aim to maximize their fees-per-bit, while also paying as\nlittle as possible in mining costs.\n\nTo make this work as intended for those willing to explicitly pay to reduce\nblock size, one could tag such an expedience fee with a maximum allowed\nblocksize (where the fee will be claimed in such a smaller block if it is\nthe more profitable option), such that it won't be countered by others\nmaking more high expedience fees to increase blocksize. Note: I'm not\nparticularly in favor of this idea, just mentioning the possibility.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/823b7763/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2017-03-30T10:04:05",
                "message_text_only": "On Thursday, March 30, 2017 9:34:31 AM Natanael via bitcoin-dev wrote:\n> You want to really make sure your transaction gets processed quickly?\n> Transactions could have a second fee type, a specially labeled\n> anyone-can-spend output with an op_return value defining a \"best-before\"\n> block number and some function describing the decline of the fee value for\n> every future block, such that before block N the miners can claim the full\n> expedience fee + the standard fee (if any), between block N+1 and N+X the\n> miner can claim a reduced expedience fee + standard fee, afterwards only\n> the standard fee.\n\nMinor detail: OP_RETURN doesn't work like that. You'd need OP_DROP.\n\n> When a transaction is processed late such that not the full expedience fee\n> can be claimed, the remainder of the expedience fee output is returned to\n> the specified address among the inputs/outputs (could be something like\n> in#3 for the address used by the 3rd UTXO input). This would have to be\n> done for all remaining expedience fees within the last transaction in the\n> block, inserted there by the miner.\n\nInputs don't have addresses, and addresses should only ever be used once.\nYou might be able to fix this by increasing the value of the change, though.\nIt would require a new signature-check opcode at the very least.\n\nI don't see a purpose to this proposal. Miners always mine as if it's their \n*only* chance to get the fee, because if they don't, another miner will. Ie, \nafter 1 block, the fee effectively drops to 0 already.\n\n> ---\n> \n> Fee pool. Softfork compatible.\n\nThe standard problem with these is that miners are incentivised to publish \ntheir own \"out of band fee\" address so they get all the fee directly.\n\nLuke"
            },
            {
                "author": "Natanael",
                "date": "2017-03-30T18:41:19",
                "message_text_only": "Den 30 mars 2017 11:34 skrev \"Natanael\" <natanael.l at gmail.com>:\n\nBlock size dependent difficulty scaling. Hardfork required.\n\nLarger blocks means greater difficulty - but it doesn't scale linearly,\nrather a little less than linearly. That means miners can take a penalty in\ndifficulty to claim a greater number of high fee transactions in the same\namount of time (effectively increasing \"block size bitrate\"), increasing\ntheir profits. When such profitable fees aren't available, they have to\nreduce block size.\n\nIn other words, the users literally pay miners to increase block size (or\ndon't pay, which reduces it).\n\n\nThis can be simplified if we do get a fee pool (less hardfork code, more\nsoftfork code), except that the effect will be partially reduced by the\nmining subsidy until it approximately reaches parity with average total\nfees.\n\nWe don't need to alter difficulty calculation.\nInstead we alter the percentage of the fees that the miner gets to claim VS\nwhat he have to donate to the pool based on the size of the block he\ngenerated.\nLarger block = smaller percentage of fees. This is another way to pay for\nblocksize. The effect of this is that on average, miners that generate\nsmaller blocks takes a share of what otherwise would be part of the mining\nprofits of those generating larger blocks.\n\nWe would need to keep pieces of the section from above on expected\nblocksize calculation. Because the closer you are to the expected\nblocksize, the more you keep. And thus we need to adjust it according to\nusage.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/051be6af/attachment.html>"
            },
            {
                "author": "Natanael",
                "date": "2017-03-31T04:14:30",
                "message_text_only": "Den 30 mars 2017 11:34 skrev \"Natanael\" <natanael.l at gmail.com>:\n\nBlock size dependent difficulty scaling. Hardfork required.\n\nLarger blocks means greater difficulty - but it doesn't scale linearly,\nrather a little less than linearly. That means miners can take a penalty in\ndifficulty to claim a greater number of high fee transactions in the same\namount of time (effectively increasing \"block size bitrate\"), increasing\ntheir profits. When such profitable fees aren't available, they have to\nreduce block size.\n\nIn other words, the users literally pay miners to increase block size (or\ndon't pay, which reduces it).\n\n\nThis can be simplified if we do get a fee pool (less hardfork code, more\nsoftfork code), except that the effect will be partially reduced by the\nmining subsidy until it approximately reaches parity with average total\nfees.\n\nWe don't need to alter difficulty calculation.\nInstead we alter the percentage of the fees that the miner gets to claim VS\nwhat he have to donate to the pool based on the size of the block he\ngenerated.\nLarger block = smaller percentage of fees. This is another way to pay for\nblocksize. The effect of this is that on average, miners that generate\nsmaller blocks takes a share of what otherwise would be part of the mining\nprofits of those generating larger blocks.\n\nWe would need to keep pieces of the section from above on expected\nblocksize calculation. Because the closer you are to the expected\nblocksize, the more you keep. And thus we need to adjust it according to\nusage.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170331/507bf8de/attachment-0001.html>"
            },
            {
                "author": "Natanael",
                "date": "2017-03-31T04:15:17",
                "message_text_only": "Sorry for sending a double, hit the wrong button...\n\nDen 31 mars 2017 06:14 skrev \"Natanael\" <natanael.l at gmail.com>:\n\n>\n>\n> Den 30 mars 2017 11:34 skrev \"Natanael\" <natanael.l at gmail.com>:\n>\n> Block size dependent difficulty scaling. Hardfork required.\n>\n> Larger blocks means greater difficulty - but it doesn't scale linearly,\n> rather a little less than linearly. That means miners can take a penalty in\n> difficulty to claim a greater number of high fee transactions in the same\n> amount of time (effectively increasing \"block size bitrate\"), increasing\n> their profits. When such profitable fees aren't available, they have to\n> reduce block size.\n>\n> In other words, the users literally pay miners to increase block size (or\n> don't pay, which reduces it).\n>\n>\n> This can be simplified if we do get a fee pool (less hardfork code, more\n> softfork code), except that the effect will be partially reduced by the\n> mining subsidy until it approximately reaches parity with average total\n> fees.\n>\n> We don't need to alter difficulty calculation.\n> Instead we alter the percentage of the fees that the miner gets to claim\n> VS what he have to donate to the pool based on the size of the block he\n> generated.\n> Larger block = smaller percentage of fees. This is another way to pay for\n> blocksize. The effect of this is that on average, miners that generate\n> smaller blocks takes a share of what otherwise would be part of the mining\n> profits of those generating larger blocks.\n>\n> We would need to keep pieces of the section from above on expected\n> blocksize calculation. Because the closer you are to the expected\n> blocksize, the more you keep. And thus we need to adjust it according to\n> usage.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170331/19564c56/attachment.html>"
            },
            {
                "author": "Natanael",
                "date": "2017-03-30T10:19:33",
                "message_text_only": "Den 30 mars 2017 12:04 skrev \"Luke Dashjr\" <luke at dashjr.org>:\n\n\nI don't see a purpose to this proposal. Miners always mine as if it's their\n*only* chance to get the fee, because if they don't, another miner will. Ie,\nafter 1 block, the fee effectively drops to 0 already.\n\n\nI believe that with correctly configured incentives, you can make it more\nprofitable to delay some transactions with lower fees but still include\nthem in the next block then to include them all at once. This would smooth\nout the inclusion of transactions.\n\nThis may require changing the difficulty scaling from using a simple\nlogarithm to a function that first behaves like a logarithm up to some\nmultiple of the standard block size, after which difficulty starts\nincreasing faster and reaches a greater-than-linear ratio in expected\nrequired hash per mined bit. Perhaps tipping over at around a blocksize 3x\nthe standard blocksize. Since the standard blocksize increases with\ncontinous load after retargeting, the blocksize at which this happens also\nincreases.\n\nAlso, together with the above the fee pool does slightly counteract what\nyou say, as they'll get a share via the pool when there's less transactions\navailable the next time they create a block (like insurance).\n\nFor a user, what's the incentive to pay an individual miner the fee\ndirectly?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/ccbd4893/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Block size adjustment idea - expedience fees + difficulty scaling proportional to block size (+ fee pool)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Natanael",
                "Luke Dashjr"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 17344
        }
    },
    {
        "title": "[bitcoin-dev] High fees / centralization",
        "thread_messages": [
            {
                "author": "Tom Harding",
                "date": "2017-03-30T15:38:20",
                "message_text_only": "Raystonn,\n\nYour logic is very hard to dispute. An important special case is small\nminers.\n\nSmall miners use pools exactly because they want smaller, more frequent\npayments.\n\nRising fees force them to take payments less frequently, and will only tend\nto make more of them give up.\n\nWith fees rising superlinearly, this centralizing effect is much stronger\nthan the oft-cited worry of small miners joining large pools to decrease\norphan rates.\n\n\nOn Mar 29, 2017 15:01, \"Raystonn . via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\nLow node costs are a good goal for nodes that handle transactions the node\noperator can afford.  Nobody is going to run a node for a network they do\nnot use for their own transactions.  If transactions have fees that\nprohibit use for most economic activity, that means node count will drop\nuntil nodes are generally run by those who settle large amounts.  That is\nvery centralizing.\n\nRaystonn\n\nOn 29 Mar 2017 12:14 p.m., Jared Lee Richardson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\nIn order for any blocksize increase to be agreed upon, more consensus is\nneeded.  The proportion of users believing no blocksize increases are\nneeded is larger than the hardfork target core wants(95% consensus).  The\nproportion of users believing in microtransactions for all is also larger\nthan 5%, and both of those groups may be larger than 10% respectively.  I\ndon't think either the Big-blocks faction nor the low-node-costs faction\nhave even a simple majority of support.  Getting consensus is going to be a\nbig mess, but it is critical that it is done.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/2efe6ad0/attachment.html>"
            },
            {
                "author": "David Vorick",
                "date": "2017-03-30T16:14:24",
                "message_text_only": "On Mar 30, 2017 12:04 PM, \"Tom Harding via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\nRaystonn,\n\nYour logic is very hard to dispute. An important special case is small\nminers.\n\nSmall miners use pools exactly because they want smaller, more frequent\npayments.\n\nRising fees force them to take payments less frequently, and will only tend\nto make more of them give up.\n\nWith fees rising superlinearly, this centralizing effect is much stronger\nthan the oft-cited worry of small miners joining large pools to decrease\norphan rates.\n\n\nMiners get paid on average once every ten minutes. The size of fees and the\nnumber of fee transactions does not change the payout rate.\n\nFurther, we are very far from the point (in my appraisal) where fees are\nhigh enough to block home users from using the network.\n\nBitcoin has many high-value use cases such as savings. We should not throw\naway the core innovation of monetary sovereignty in pursuit of supporting\n0.1% of the world's daily transactions.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/92e8b405/attachment.html>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-03-30T21:52:01",
                "message_text_only": "> Further, we are very far from the point (in my appraisal) where fees are\nhigh enough to block home users from using the network.\n\nThis depends entirely on the usecase entirely.  Most likely even without a\nblocksize increase, home purchases will be large enough to fit on the\nblocksize in the forseeable future.  Microtransactions(<$0.25) on the other\nhand aren't viable no matter what we try to do - There's just too much data.\n\nMost likely, transaction fees above $1 per tx will become unappealing for\nmany consumers, and above $10 is likely to be niche-level.  It is hard to\nsay with any certainty, but average credit card fees give us some\nindications to work with - $1.2 on a $30 transaction, though paid by the\nbusiness and not the consumer.\n\nWithout blocksize increases, fees higher than $1/tx are basically\ninevitable, most likely before 2020.  Running a node only costs $10/month\nif that.  If we were going to favor node operational costs that highly in\nthe weighting, we'd better have a pretty solid justification with\nmathematical models or examples.\n\n> We should not throw away the core innovation of monetary sovereignty in\npursuit of supporting 0.1% of the world's daily transactions.\n\nIf we can easily have both, why not have both?\n\nAn altcoin with both will take Bitcoin's monetary sovereignty crown by\ndefault.  No crown, no usecases, no Bitcoin.\n\n\n\nOn Thu, Mar 30, 2017 at 9:14 AM, David Vorick via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Mar 30, 2017 12:04 PM, \"Tom Harding via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Raystonn,\n>\n> Your logic is very hard to dispute. An important special case is small\n> miners.\n>\n> Small miners use pools exactly because they want smaller, more frequent\n> payments.\n>\n> Rising fees force them to take payments less frequently, and will only\n> tend to make more of them give up.\n>\n> With fees rising superlinearly, this centralizing effect is much stronger\n> than the oft-cited worry of small miners joining large pools to decrease\n> orphan rates.\n>\n>\n> Miners get paid on average once every ten minutes. The size of fees and\n> the number of fee transactions does not change the payout rate.\n>\n> Further, we are very far from the point (in my appraisal) where fees are\n> high enough to block home users from using the network.\n>\n> Bitcoin has many high-value use cases such as savings. We should not throw\n> away the core innovation of monetary sovereignty in pursuit of supporting\n> 0.1% of the world's daily transactions.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/697743ea/attachment.html>"
            },
            {
                "author": "Vladimir Zaytsev",
                "date": "2017-03-31T01:39:23",
                "message_text_only": "There must be a way to organize \u201cbranches\u201d of smaller activity to join main tree after they grow. Outsider a bit, I see going circles here, but not everything must be accepted in the chain. Good idea as it is, it\u2019s just too early to record every sight\u2026.\n\n\n\n> On Mar 30, 2017, at 5:52 PM, Jared Lee Richardson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> > Further, we are very far from the point (in my appraisal) where fees are high enough to block home users from using the network.\n> \n> This depends entirely on the usecase entirely.  Most likely even without a blocksize increase, home purchases will be large enough to fit on the blocksize in the forseeable future.  Microtransactions(<$0.25) on the other hand aren't viable no matter what we try to do - There's just too much data.\n> \n> Most likely, transaction fees above $1 per tx will become unappealing for many consumers, and above $10 is likely to be niche-level.  It is hard to say with any certainty, but average credit card fees give us some indications to work with - $1.2 on a $30 transaction, though paid by the business and not the consumer.\n> \n> Without blocksize increases, fees higher than $1/tx are basically inevitable, most likely before 2020.  Running a node only costs $10/month if that.  If we were going to favor node operational costs that highly in the weighting, we'd better have a pretty solid justification with mathematical models or examples.\n> \n> > We should not throw away the core innovation of monetary sovereignty in pursuit of supporting 0.1% of the world's daily transactions.\n> \n> If we can easily have both, why not have both?\n> \n> An altcoin with both will take Bitcoin's monetary sovereignty crown by default.  No crown, no usecases, no Bitcoin.\n> \n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/5c299869/attachment-0001.html>"
            },
            {
                "author": "Jared Lee Richardson",
                "date": "2017-03-31T02:01:49",
                "message_text_only": "That would be blockchain sharding.\n\nWould be amazing if someone could figure out how to do it trustlessly.  So\nfar I'm not convinced it is possible to resolve the conflicts between the\nshards and commit transactions between shards.\n\nOn Thu, Mar 30, 2017 at 6:39 PM, Vladimir Zaytsev <\nvladimir.zaytsev at gmail.com> wrote:\n\n> There must be a way to organize \u201cbranches\u201d of smaller activity to join\n> main tree after they grow. Outsider a bit, I see going circles here, but\n> not everything must be accepted in the chain. Good idea as it is, it\u2019s just\n> too early to record every sight\u2026.\n>\n>\n>\n> On Mar 30, 2017, at 5:52 PM, Jared Lee Richardson via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> > Further, we are very far from the point (in my appraisal) where fees\n> are high enough to block home users from using the network.\n>\n> This depends entirely on the usecase entirely.  Most likely even without a\n> blocksize increase, home purchases will be large enough to fit on the\n> blocksize in the forseeable future.  Microtransactions(<$0.25) on the other\n> hand aren't viable no matter what we try to do - There's just too much data.\n>\n> Most likely, transaction fees above $1 per tx will become unappealing for\n> many consumers, and above $10 is likely to be niche-level.  It is hard to\n> say with any certainty, but average credit card fees give us some\n> indications to work with - $1.2 on a $30 transaction, though paid by the\n> business and not the consumer.\n>\n> Without blocksize increases, fees higher than $1/tx are basically\n> inevitable, most likely before 2020.  Running a node only costs $10/month\n> if that.  If we were going to favor node operational costs that highly in\n> the weighting, we'd better have a pretty solid justification with\n> mathematical models or examples.\n>\n> > We should not throw away the core innovation of monetary sovereignty in\n> pursuit of supporting 0.1% of the world's daily transactions.\n>\n> If we can easily have both, why not have both?\n>\n> An altcoin with both will take Bitcoin's monetary sovereignty crown by\n> default.  No crown, no usecases, no Bitcoin.\n>\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/b24ba14f/attachment.html>"
            },
            {
                "author": "Vladimir Zaytsev",
                "date": "2017-03-31T02:26:31",
                "message_text_only": "Can there be a minimum amount to put up for mining ? I hope i\u2019m not in violation with any ideology yet :)\n\n> On Mar 30, 2017, at 10:01 PM, Jared Lee Richardson <jaredr26 at gmail.com> wrote:\n> \n> That would be blockchain sharding.\n> \n> Would be amazing if someone could figure out how to do it trustlessly.  So far I'm not convinced it is possible to resolve the conflicts between the shards and commit transactions between shards.\n> \n> On Thu, Mar 30, 2017 at 6:39 PM, Vladimir Zaytsev <vladimir.zaytsev at gmail.com <mailto:vladimir.zaytsev at gmail.com>> wrote:\n> There must be a way to organize \u201cbranches\u201d of smaller activity to join main tree after they grow. Outsider a bit, I see going circles here, but not everything must be accepted in the chain. Good idea as it is, it\u2019s just too early to record every sight\u2026.\n> \n> \n> \n>> On Mar 30, 2017, at 5:52 PM, Jared Lee Richardson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>> \n>> > Further, we are very far from the point (in my appraisal) where fees are high enough to block home users from using the network.\n>> \n>> This depends entirely on the usecase entirely.  Most likely even without a blocksize increase, home purchases will be large enough to fit on the blocksize in the forseeable future.  Microtransactions(<$0.25) on the other hand aren't viable no matter what we try to do - There's just too much data.\n>> \n>> Most likely, transaction fees above $1 per tx will become unappealing for many consumers, and above $10 is likely to be niche-level.  It is hard to say with any certainty, but average credit card fees give us some indications to work with - $1.2 on a $30 transaction, though paid by the business and not the consumer.\n>> \n>> Without blocksize increases, fees higher than $1/tx are basically inevitable, most likely before 2020.  Running a node only costs $10/month if that.  If we were going to favor node operational costs that highly in the weighting, we'd better have a pretty solid justification with mathematical models or examples.\n>> \n>> > We should not throw away the core innovation of monetary sovereignty in pursuit of supporting 0.1% of the world's daily transactions.\n>> \n>> If we can easily have both, why not have both?\n>> \n>> An altcoin with both will take Bitcoin's monetary sovereignty crown by default.  No crown, no usecases, no Bitcoin.\n>> \n>> \n> \n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/d04bf4f1/attachment.html>"
            },
            {
                "author": "Tom Harding",
                "date": "2017-03-31T01:13:35",
                "message_text_only": "On 3/30/2017 9:14 AM, David Vorick wrote:\n> On Mar 30, 2017 12:04 PM, \"Tom Harding via bitcoin-dev\"\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>\n>     Raystonn, \n>\n>     Your logic is very hard to dispute. An important special case is\n>     small miners.\n>\n>     Small miners use pools exactly because they want smaller, more\n>     frequent payments.\n>\n>     Rising fees force them to take payments less frequently, and will\n>     only tend to make more of them give up.\n>\n>     With fees rising superlinearly, this centralizing effect is much\n>     stronger than the oft-cited worry of small miners joining large\n>     pools to decrease orphan rates.\n>\n>\n> Miners get paid on average once every ten minutes. The size of fees\n> and the number of fee transactions does not change the payout rate.\n>\n> Further, we are very far from the point (in my appraisal) where fees\n> are high enough to block home users from using the network.\n>\n> Bitcoin has many high-value use cases such as savings. We should not\n> throw away the core innovation of monetary sovereignty in pursuit of\n> supporting 0.1% of the world's daily transactions.\n>\n\nOwners of small mining rigs get paid by pools, generally using regular\ntransactions that pay regular fees (p2pool is an exception that pays\ndirectly from coinbase).  The point is the unintended consequences are\ndirectly at odds with one of the justifications offered for small blocks\n- miner centralization.\n\nThis is a special case.  Raystonn's general point was that high fees\nwill lead to fewer economic actors overall, and therefore fewer full nodes.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170330/1d2447b2/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "High fees / centralization",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "David Vorick",
                "Vladimir Zaytsev",
                "Tom Harding",
                "Jared Lee Richardson"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 14616
        }
    },
    {
        "title": "[bitcoin-dev] Proposing the SiTAH-fork, a mechanism for compromise.",
        "thread_messages": [
            {
                "author": "SHAroshima Nakamati",
                "date": "2017-03-31T06:18:39",
                "message_text_only": "Soft-fork - A soft-fork is a change to the bitcoin protocol wherein only previously valid blocks/transactions are made invalid. Since old nodes will recognise the new blocks as valid, a soft-fork is backward-compatible.\n\nHard-fork - A hard-fork is a change to the bitcoin protocol that makes previously invalid blocks/transactions valid, and therefore requires all users to upgrade.\n\nThe difficulty about pulling off a hard-fork is that for it to happen safely and without a massive disruption, everyone needs to be ready for it before it occurs. Coordinating this is a daunting task, however, safe hard-forks *will* be necessary in Bitcoin's future. Furthermore, the majority of stakeholders - devs, miners as well as users - want both soft-fork SegWit and a hard-fork TX block size increase, but favor one over the other and want to perform their favorite fork first out of fear that activating the other prevents their choice from being activated at a later point. This is a proposal to solve this stalemate by providing a path to activating both.\n\nI propose the Soft-into-Time-Activated-Hard fork, or SiTAH-fork in short. The core concept is that it is a soft-fork that comes with a lock-in to transitioning into a hard-fork at a predetermined later point in time, drawing elements from Spoonnet. This means that, after the soft-fork takes place, there is a transition period during which everyone has the opportunity and incentive to upgrade their software, before the hard-fork inevitably happens. As a consequence of this, those who want the hard-fork have incentive to support activating the the soft-fork, and those who want the soft-fork have the incentive to pledge to activate the hard-fork, rather than opposing their secondary choice out of fear of their primary choice being indefinitely postponed.\n\nAs for how this can be implemented for SegWit; SegWit is made soft-fork compatible by virtue of the block weight function. From BIP-0141:\n\n> Block weight is defined as Base size * 3 + Total size.\n>\n> Base size is the block size in bytes with the original transaction serialization without any witness-related data, as seen by a non-upgraded node.\n>\n> Total size is the block size in bytes with transactions serialized as described in BIP144, including base data and witness data.\n>\n> The new rule is block weight \u2264 4,000,000.\n\nThis block weight function can be replaced by a version that allows for >1MB of pure TX data when the median time-past of the last 11 blocks is greater than the HardForkTime. In other words:\n\nBlockWeight = MedianTimePast < HardForkTime ? BaseSize * 3 + TotalSize : TotalSize;\n\nThe post-hard-fork part of this formula can of course be tweaked.\n\nI pose that implementing this would greatly improve support for the introduction of SegWit as it provides a pledge to increase space for pure TX data, which is something many are asking for. LN is a great long-term scaling solution but is not ready yet, and this measure provides a way to enable SegWit so that LN can later be built on top, while at the same time providing a promise of TX-space relief to those skeptical or unconvinced of SW/LN providing this relief in the short to medium term.\n\n- SHAroshima\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170331/1192f955/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposing the SiTAH-fork, a mechanism for compromise.",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "SHAroshima Nakamati"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3379
        }
    },
    {
        "title": "[bitcoin-dev] Refund Excesss Fee Hard Fork Proposal",
        "thread_messages": [
            {
                "author": "praxeology_guy",
                "date": "2017-03-31T20:29:41",
                "message_text_only": "TL;DR (In layman terms): Refund any excess fee amounts higher than the lowest included fee in a block.\n\n=== Proposed Hard Fork Change ===\n\nLIFB: Lowest Included Fee/Byte\n\nChange the fee policy to cause all fee/byte in a block to be reduced to the lowest included fee/byte. Change transactions to specify how/which outputs get what portions of [(TX_fee/TX_length - LIFB)*TX_length]. Transactions of course could still offer the remainder to the miner if they don't want to modify some of the outputs and don't want to reveal their change output.\n\n=== Economic Analysis Of Why Such Is Desirable ===\n\nPure profit seeking miners attempt to fill their block with transactions that have the highest fee/byte. So what happens is the users who are willing to offer the highest fee/byte get included first in a block until it gets filled. At fill, there is some fee/byte where the next available tx in mempool doesn't get included. And right above that fee/byte is the last transaction that was selected to be included in the block, which has the lowest fee/byte of any of the transactions in the block.\n\nUsers who want to create transactions with the lowest fee watch the LIFB with https://bitcoinfees.21.co/ or similar systems... so that they can make a transaction that offers a fee at or above the LIFB so that it can be included in a block in reasonable time.\n\nSome users have transactions with very high confirmation time sensitivity/importance... so they offer a fee much higher than the LIFB to guarantee quick confirmation. But they would prefer that even though they are willing to pay a higher fee, that they would still only pay the LIFB fee/byte amount.\n\nThis becomes even more of an issue when someone wants to create a transaction now that they want to be included in a block at a much later time... because it becomes harder and harder to predict what the LIFB will be as you try to predict further into the future. It would be nice to be able to specify a very high fee/byte in such a transaction, and then when the transaction is confirmed only have to pay the LIFB.\n\nUsers will look for the money that offers the greatest money transfer efficiency, and tx fees are a big and easily measurable component. So a money system is better if its users can pay lower fees than competing money options. Refund Excees Fee is one way to reduce fees.\n\n=== Technical Difficulties ===\n\nI realize this is a big change... and I'm not sure of the performance problems this might entail... I'm just throwing this idea out there. Of course if fees are very small, and there is little difference between a high priority fee/byte and the LIFB, then this issue is not really that big of a deal. Also... hard forks are very hard to do in general, so such a hard fork as this might not be worthwhile.\n\nCheers,\nPraxeology Guy\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170331/11994290/attachment.html>"
            },
            {
                "author": "Bram Cohen",
                "date": "2017-03-31T20:57:04",
                "message_text_only": "On Fri, Mar 31, 2017 at 1:29 PM, praxeology_guy via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> Change the fee policy to cause all fee/byte in a block to be reduced to\n> the lowest included fee/byte. Change transactions to specify how/which\n> outputs get what portions of [(TX_fee/TX_length - LIFB)*TX_length].\n> Transactions of course could still offer the remainder to the miner if they\n> don't want to modify some of the outputs and don't want to reveal their\n> change output.\n>\n\nThat would have the unfortunate effect of incentivizing miners to not\ncompletely fill blocks, because low fee marginal transactions could cost\nthem money.\n\nAn alternate approach would be to incentivize miners to follow transaction\nfees more by reducing mining rewards, which could be done by soft forking\nin a requirement that a chunk of all mining rewards be sent to an\nunspendable address.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170331/0fc61bb9/attachment.html>"
            },
            {
                "author": "praxeology_guy",
                "date": "2017-03-31T21:17:16",
                "message_text_only": "> That would have the unfortunate effect of incentivizing miners to not completely fill blocks, because low fee marginal transactions could cost them money.\n\nLook at the fee distribution. The vast majority of fee income comes from txs w/ fees near the LIFB. The blocks will be full... but I guess this would make Child Pays For Parent undesirable. CPFP would need a flag saying it is CPFP so that the parent fee isn't considered the LIFB.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170331/d725ac3f/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Refund Excesss Fee Hard Fork Proposal",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Bram Cohen",
                "praxeology_guy"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 4695
        }
    },
    {
        "title": "[bitcoin-dev] Segwit2Mb - combined soft/hard fork - Request For Comments",
        "thread_messages": [
            {
                "author": "Sergio Demian Lerner",
                "date": "2017-03-31T21:09:18",
                "message_text_only": "Hi everyone,\n\nSegwit2Mb is the project to merge into Bitcoin a minimal patch that aims to\nuntangle the current conflict between different political positions\nregarding segwit activation vs. an increase of the on-chain blockchain\nspace through a standard block size increase. It is not a new solution, but\nit should be seen more as a least common denominator.\n\nSegwit2Mb combines segwit as it is today in Bitcoin 0.14+ with a 2MB block\nsize hard-fork activated ONLY if segwit activates (95% of miners\nsignaling), but at a fixed future date.\n\nThe sole objective of this proposal is to re-unite the Bitcoin community\nand avoid a cryptocurrency split. Segwit2Mb does not aim to be best\npossible technical solution to solve Bitcoin technical limitations.\nHowever, this proposal does not imply a compromise to the future\nscalability or decentralization of Bitcoin, as a small increase in block\nsize has been proven by several core and non-core developers not to affect\nBitcoin value propositions.\n\nIn the worst case, a 2X block size increase has much lower economic impact\nthan the last bitcoin halving (<10%), which succeeded without problem.\n\nOn the other side, Segwit2Mb primary goal is to be minimalistic: in this\npatch some choices have been made to reduce the number of lines modified in\nthe current Bitcoin Core state (master branch), instead of implementing the\nmost elegant solution. This is because I want to reduce the time it takes\nfor core programmers and reviewers to check the correctness of the code,\nand to report and correct bugs.\n\nThe patch was built by forking the master branch of Bitcoin Core, mixing a\nfew lines of code from Jeff Garzik's BIP102,  and defining a second\nversionbits activation bit (bit 2) for the combined activation.\n\nThe combined activation of segwit and 2Mb hard-fork nVersion bit is 2\n(DEPLOYMENT_SEGWIT_AND_2MB_BLOCKS).\n\nThis means that segwit can still be activated without the 2MB hard-fork by\nsignaling bit 1 in nVersion  (DEPLOYMENT_SEGWIT).\n\nThe tentative lock-in and hard-fork dates are the following:\n\nBit 2 signaling StartTime = 1493424000; // April 29th, 2017\n\nBit 2 signaling Timeout = 1503964800; // August 29th, 2017\n\nHardForkTime = 1513209600; // Thu, 14 Dec 2017 00:00:00 GMT\n\n\nThe hard-fork is conditional to 95% of the hashing power has approved the\nsegwit2mb soft-fork and the segwit soft-fork has been activated (which\nshould occur 2016 blocks after its lock-in time)\n\nFor more information on how soft-forks are signaled and activated, see\nhttps://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki\n\nThis means that segwit would be activated before 2Mb: this is inevitable,\nas versionbits have been designed to have fixed activation periods and\nthresholds for all bits. Making segwit and 2Mb fork activate together at a\ndelayed date would have required a major re-write of this code, which would\ncontradict the premise of creating a minimalistic patch. However, once\nsegwit is activated, the hard-fork is unavoidable.\n\nAlthough I have coded a first version of the segwit2mb patch (which\nmodifies 120 lines of code, and adds 220 lines of testing code), I would\nprefer to wait to publish the source code until more comments have been\nreceived from the community.\n\nTo prevent worsening block verification time because of the O(N^2) hashing\nproblem, the simple restriction that transactions cannot be larger than 1Mb\nhas been kept. Therefore the worse-case of block verification time has only\ndoubled.\n\nRegarding the hard-fork activation date, I want to give enough time to all\nactive economic nodes to upgrade. As of Fri Mar 31 2017,\nhttps://bitnodes.21.co/nodes/ reports that 6332 out of 6955 nodes (91%)\nhave upgraded to post 0.12 versions. Upgrade to post 0.12 versions can be\nused to identify economic active nodes, because in the 0.12 release dynamic\nfees were introduced, and currently no Bitcoin automatic payment system can\noperate without automatic discovery of the current fee rate. A pre-0.12\nwould require constant manual intervention.\nTherefore I conclude that no more than 91% of the network nodes reported by\nbitnodes are active economic nodes.\n\nAs Bitcoin Core 0.12 was released on February 2016, the time for this 91%\nto upgrade has been around one year (under a moderate pressure of\noperational problems with unconfirmed transactions).\nTherefore we can expect a similar or lower time to upgrade for a hard-fork,\nafter developers have discussed and approved the patch, and it has been\nreviewed and merged and 95% of the hashing power has signaled for it (the\npressure not to upgrade being a complete halt of the operations). However I\nsuggest that we discuss the hard-fork date and delay it if there is a real\nneed to.\n\nCurrently time works against the Bitcoin community, and so is delaying a\ncompromise solution. Most of the community agree that halting the\ninnovation for several years is a very bad option.\n\nAfter the comments collected by the community, a BIP will be written\ndescribing the resulting proposal details.\n\nIf segwit2mb locks-in, before hard-fork occurs all bitcoin nodes should be\nupdated to a Segwit2Mb enabled node to prevent them to be forked-away in a\nchain with almost no hashing-power.\n\nThe proof of concept patch was made for Bitcoin Core but should be easily\nported to other Bitcoin protocol implementations that already support\nversionbits. Lightweight (SPV) wallets should not be affected as they\ngenerally do not check the block size.\n\nI personally want to see the Lightning Network in action this year, use the\nnon-malleability features in segwit, see the community discussing other\nexciting soft-forks in the scaling roadmap, Schnorr sigs, drivechains and\nMAST.\n\nI want to see miners, developers and industry side-by-side pushing Bitcoin\nforward, to increase the value of Bitcoin and prevent high transaction fees\nto put out of business use-cases that could have high positive social\nimpact.\n\nI believe in the strength of a unified Bitcoin community. If you're a\ndeveloper, please give your opinion, suggest changes, audit it, and take a\nstand with me to unlock the current Bitcoin deadlock.\n\nContributions to the segwit2mb project are welcomed and awaited. The only\nlimitation is to stick to the principle that the patch should be as simple\nto audit as possible. As an example, I wouldn't feel confident if the patch\nmodified more than ~150 lines of code.\n\nImprovements unrelated to a 2 Mb increase or segwit, as beneficial as it\nmay be to Bitcoin, should not be part of segwit2Mb.\n\nThis proposal should not prevent other consensus proposals to be\nsimultaneously merged: segwit2mb is a last resort solution in case we can\nnot reach consensus on anything better.\n\nAgain, the proposal is only a starting point: community feedback is\nexpected and welcomed.\n\nRegards,\nSergio Demian Lerner\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170331/c55dafa8/attachment-0001.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2017-03-31T21:18:25",
                "message_text_only": "Hey Sergio,\n\nYou appear to have ignored the last two years of Bitcoin hardfork\nresearch and understanding, recycling instead BIP 102 from 2015. There\nare many proposals which have pushed the state of hard fork research\nmuch further since then, and you may wish to read some of the posts on\nthis mailing list listed at https://bitcoinhardforkresearch.github.io/\nand make further edits based on what you learn. It seems your goal of\n\"avoid any technical changes\" doesn't have any foundation aside from a\nperceived compromise for compromise sake, only making for fork riskier\nin the process.\n\nAt a minimum, in terms of pure technical changes, you should probably\nconsider (probably among others):\n\na) Utilizing the \"hard fork signaling bit\" in the nVersion of the block.\nb) Either limiting non-SegWit transactions in some way to fix the n**2\nsighash and FindAndDelete runtime and memory usage issues or fix them by\nutilizing the new sighash type which many wallets and projects have\nalready implemented for SegWit in the spending of non-SegWit outputs.\nc) Your replay protection isn't really ideal - XXX. The clever fix from\nSpoonnet for poor scaling of optionally allowing non-SegWit outputs to\nbe spent with SegWit's sighash provides this all in one go.\nd) You may wish to consider the possibility of tweaking the witness\ndiscount and possibly discounting other parts of the input - SegWit went\na long ways towards making removal of elements from the UTXO set cheaper\nthan adding them, but didn't quite get there, you should probably finish\nthat job. This also provides additional tuneable parameters to allow you\nto increase the block size while not having a blowup in the worst-case\nblock size.\ne) Additional commitments at the top of the merkle root - both for\nSegWit transactions and as additional space for merged mining and other\ncommitments which we may wish to add in the future, this should likely\nbe implemented an \"additional header\" ala Johnson Lau's Spoonnet proposal.\n\nAdditionally, I think your parameters here pose very significant risk to\nthe Bitcoin ecosystem broadly.\n\na) Activating a hard fork with less than 18/24 months (and even then...)\nfrom a fully-audited and supported release of full node software to\nactivation date poses significant risks to many large software projects\nand users. I've repeatedly received feedback from various folks that a\nyear or more is likely required in any hard fork to limit this risk, and\nlimited pushback on that given the large increase which SegWit provides\nitself buying a ton of time.\n\nb) Having a significant discontinuity in block size increase only serves\nto confuse and mislead users and businesses, forcing them to rapidly\nadapt to a Bitcoin which changed overnight both by hardforking, and by\nfees changing suddenly. Instead, having the hard fork activate technical\nchanges, and then slowly increasing the block size over the following\nseveral years keeps things nice and continuous and also keeps us from\nhaving to revisit ye old blocksize debate again six months after activation.\n\nc) You should likely consider the effect of the many technological\ninnovations coming down the pipe in the coming months. Technologies like\nLightning, TumbleBit, and even your own RootStock could significantly\nreduce fee pressure as transactions move to much faster and more\nfeatureful systems.\n\nCommitments to aggressive hard fork parameters now may leave miners\nwithout much revenue as far out as the next halving (which current\ntransaction growth trends are indicating we'd just only barely reach 2MB\nof transaction volume, let alone if you consider the effects of users\nmoving to systems which provide more features for Bitcoin transactions).\nThis could lead to a precipitous drop in hashrate as miners are no\nlonger sufficiently compensated.\n\nRemember that the \"hashpower required to secure bitcoin\" is determined\nas a percentage of total Bitcoins transacted on-chain in each block, so\nas subsidy goes down, miners need to be paid with fees, not just price\nincreases. Even if we were OK with hashpower going down compared to the\nvalue it is securing, betting the security of Bitcoin on its price\nrising exponentially to match decreasing subsidy does not strike me as a\nparticularly inspiring tradeoff.\n\nThere aren't many great technical solutions to some of these issues, as\nfar as I'm aware, but it's something that needs to be incredibly\ncarefully considered before betting the continued security of Bitcoin on\nexponential on-chain growth, something which we have historically never\nseen.\n\nMatt\n\n\nOn March 31, 2017 5:09:18 PM EDT, Sergio Demian Lerner via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>Hi everyone,\n>\n>Segwit2Mb is the project to merge into Bitcoin a minimal patch that\n>aims to\n>untangle the current conflict between different political positions\n>regarding segwit activation vs. an increase of the on-chain blockchain\n>space through a standard block size increase. It is not a new solution,\n>but\n>it should be seen more as a least common denominator.\n>\n>Segwit2Mb combines segwit as it is today in Bitcoin 0.14+ with a 2MB\n>block\n>size hard-fork activated ONLY if segwit activates (95% of miners\n>signaling), but at a fixed future date.\n>\n>The sole objective of this proposal is to re-unite the Bitcoin\n>community\n>and avoid a cryptocurrency split. Segwit2Mb does not aim to be best\n>possible technical solution to solve Bitcoin technical limitations.\n>However, this proposal does not imply a compromise to the future\n>scalability or decentralization of Bitcoin, as a small increase in\n>block\n>size has been proven by several core and non-core developers not to\n>affect\n>Bitcoin value propositions.\n>\n>In the worst case, a 2X block size increase has much lower economic\n>impact\n>than the last bitcoin halving (<10%), which succeeded without problem.\n>\n>On the other side, Segwit2Mb primary goal is to be minimalistic: in\n>this\n>patch some choices have been made to reduce the number of lines\n>modified in\n>the current Bitcoin Core state (master branch), instead of implementing\n>the\n>most elegant solution. This is because I want to reduce the time it\n>takes\n>for core programmers and reviewers to check the correctness of the\n>code,\n>and to report and correct bugs.\n>\n>The patch was built by forking the master branch of Bitcoin Core,\n>mixing a\n>few lines of code from Jeff Garzik's BIP102,  and defining a second\n>versionbits activation bit (bit 2) for the combined activation.\n>\n>The combined activation of segwit and 2Mb hard-fork nVersion bit is 2\n>(DEPLOYMENT_SEGWIT_AND_2MB_BLOCKS).\n>\n>This means that segwit can still be activated without the 2MB hard-fork\n>by\n>signaling bit 1 in nVersion  (DEPLOYMENT_SEGWIT).\n>\n>The tentative lock-in and hard-fork dates are the following:\n>\n>Bit 2 signaling StartTime = 1493424000; // April 29th, 2017\n>\n>Bit 2 signaling Timeout = 1503964800; // August 29th, 2017\n>\n>HardForkTime = 1513209600; // Thu, 14 Dec 2017 00:00:00 GMT\n>\n>\n>The hard-fork is conditional to 95% of the hashing power has approved\n>the\n>segwit2mb soft-fork and the segwit soft-fork has been activated (which\n>should occur 2016 blocks after its lock-in time)\n>\n>For more information on how soft-forks are signaled and activated, see\n>https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki\n>\n>This means that segwit would be activated before 2Mb: this is\n>inevitable,\n>as versionbits have been designed to have fixed activation periods and\n>thresholds for all bits. Making segwit and 2Mb fork activate together\n>at a\n>delayed date would have required a major re-write of this code, which\n>would\n>contradict the premise of creating a minimalistic patch. However, once\n>segwit is activated, the hard-fork is unavoidable.\n>\n>Although I have coded a first version of the segwit2mb patch (which\n>modifies 120 lines of code, and adds 220 lines of testing code), I\n>would\n>prefer to wait to publish the source code until more comments have been\n>received from the community.\n>\n>To prevent worsening block verification time because of the O(N^2)\n>hashing\n>problem, the simple restriction that transactions cannot be larger than\n>1Mb\n>has been kept. Therefore the worse-case of block verification time has\n>only\n>doubled.\n>\n>Regarding the hard-fork activation date, I want to give enough time to\n>all\n>active economic nodes to upgrade. As of Fri Mar 31 2017,\n>https://bitnodes.21.co/nodes/ reports that 6332 out of 6955 nodes (91%)\n>have upgraded to post 0.12 versions. Upgrade to post 0.12 versions can\n>be\n>used to identify economic active nodes, because in the 0.12 release\n>dynamic\n>fees were introduced, and currently no Bitcoin automatic payment system\n>can\n>operate without automatic discovery of the current fee rate. A pre-0.12\n>would require constant manual intervention.\n>Therefore I conclude that no more than 91% of the network nodes\n>reported by\n>bitnodes are active economic nodes.\n>\n>As Bitcoin Core 0.12 was released on February 2016, the time for this\n>91%\n>to upgrade has been around one year (under a moderate pressure of\n>operational problems with unconfirmed transactions).\n>Therefore we can expect a similar or lower time to upgrade for a\n>hard-fork,\n>after developers have discussed and approved the patch, and it has been\n>reviewed and merged and 95% of the hashing power has signaled for it\n>(the\n>pressure not to upgrade being a complete halt of the operations).\n>However I\n>suggest that we discuss the hard-fork date and delay it if there is a\n>real\n>need to.\n>\n>Currently time works against the Bitcoin community, and so is delaying\n>a\n>compromise solution. Most of the community agree that halting the\n>innovation for several years is a very bad option.\n>\n>After the comments collected by the community, a BIP will be written\n>describing the resulting proposal details.\n>\n>If segwit2mb locks-in, before hard-fork occurs all bitcoin nodes should\n>be\n>updated to a Segwit2Mb enabled node to prevent them to be forked-away\n>in a\n>chain with almost no hashing-power.\n>\n>The proof of concept patch was made for Bitcoin Core but should be\n>easily\n>ported to other Bitcoin protocol implementations that already support\n>versionbits. Lightweight (SPV) wallets should not be affected as they\n>generally do not check the block size.\n>\n>I personally want to see the Lightning Network in action this year, use\n>the\n>non-malleability features in segwit, see the community discussing other\n>exciting soft-forks in the scaling roadmap, Schnorr sigs, drivechains\n>and\n>MAST.\n>\n>I want to see miners, developers and industry side-by-side pushing\n>Bitcoin\n>forward, to increase the value of Bitcoin and prevent high transaction\n>fees\n>to put out of business use-cases that could have high positive social\n>impact.\n>\n>I believe in the strength of a unified Bitcoin community. If you're a\n>developer, please give your opinion, suggest changes, audit it, and\n>take a\n>stand with me to unlock the current Bitcoin deadlock.\n>\n>Contributions to the segwit2mb project are welcomed and awaited. The\n>only\n>limitation is to stick to the principle that the patch should be as\n>simple\n>to audit as possible. As an example, I wouldn't feel confident if the\n>patch\n>modified more than ~150 lines of code.\n>\n>Improvements unrelated to a 2 Mb increase or segwit, as beneficial as\n>it\n>may be to Bitcoin, should not be part of segwit2Mb.\n>\n>This proposal should not prevent other consensus proposals to be\n>simultaneously merged: segwit2mb is a last resort solution in case we\n>can\n>not reach consensus on anything better.\n>\n>Again, the proposal is only a starting point: community feedback is\n>expected and welcomed.\n>\n>Regards,\n>Sergio Demian Lerner"
            },
            {
                "author": "praxeology_guy",
                "date": "2017-03-31T21:22:02",
                "message_text_only": "Sergio Demian Lerner: Please confirm that you understand that:\n\nThe current SegWit being proposed comes bundled with an effective 2MB block size increase.\n\nAre you proposing the remove this bundled policy change, and then have a different BIP that increases the block size? Not quite clear if you understand what the current proposal is.\n\nCheers,\nPraxeology\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170331/3e54dfdb/attachment.html>"
            },
            {
                "author": "Sergio Demian Lerner",
                "date": "2017-03-31T21:50:05",
                "message_text_only": "Praxelogy_guy,\nYes I understand that segwit2mb represents a \"potential\" 4Mb block size\nincrease.\nBut Segwit does not immediately lead to 2 Mb blocks, but can only achieve\nclose to a 2Mb increase if all Bitcoin wallets switch to segwit, which will\ntake a couple of years.\nTherefore I don't expect transactions per block to quadruple from one day\nto another.\n\n\nOn Fri, Mar 31, 2017 at 6:22 PM, praxeology_guy <\npraxeology_guy at protonmail.com> wrote:\n\n> Sergio Demian Lerner: Please confirm that you understand that:\n>\n> The current SegWit being proposed comes bundled with an effective 2MB\n> block size increase.\n>\n> Are you proposing the remove this bundled policy change, and then have a\n> different BIP that increases the block size?  Not quite clear if you\n> understand what the current proposal is.\n>\n> Cheers,\n> Praxeology\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170331/f17d5dc2/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2017-03-31T21:22:10",
                "message_text_only": "Hey Sergio,\n\nYou appear to have ignored the last two years of Bitcoin hardfork\nresearch and understanding, recycling instead BIP 102 from 2015. There\nare many proposals which have pushed the state of hard fork research\nmuch further since then, and you may wish to read some of the posts on\nthis mailing list listed at https://bitcoinhardforkresearch.github.io/\nand make further edits based on what you learn. Your goal of \"avoid\ntechnical changes\" appears to not have any basis outside of perceived\ncompromise for compromise sake, only making such a hardfork riskier\ninstead.\n\nAt a minimum, in terms of pure technical changes, you should probably\nconsider (probably among others):\n\na) Utilizing the \"hard fork signaling bit\" in the nVersion of the block.\nb) Either limiting non-SegWit transactions in some way to fix the n**2\nsighash and FindAndDelete runtime and memory usage issues or fix them by\nutilizing the new sighash type which many wallets and projects have\nalready implemented for SegWit in the spending of non-SegWit outputs.\nc) Your really should have replay protection in any HF. The clever fix from\nSpoonnet for poor scaling of optionally allowing non-SegWit outputs to\nbe spent with SegWit's sighash provides this all in one go.\nd) You may wish to consider the possibility of tweaking the witness\ndiscount and possibly discounting other parts of the input - SegWit went\na long ways towards making removal of elements from the UTXO set cheaper\nthan adding them, but didn't quite get there, you should probably finish\nthat job. This also provides additional tuneable parameters to allow you\nto increase the block size while not having a blowup in the worst-case\nblock size.\ne) Additional commitments at the top of the merkle root - both for\nSegWit transactions and as additional space for merged mining and other\ncommitments which we may wish to add in the future, this should likely\nbe implemented an \"additional header\" ala Johnson Lau's Spoonnet proposal.\n\nAdditionally, I think your parameters here pose very significant risk to\nthe Bitcoin ecosystem broadly.\n\na) Activating a hard fork with less than 18/24 months (and even then...)\nfrom a fully-audited and supported release of full node software to\nactivation date poses significant risks to many large software projects\nand users. I've repeatedly received feedback from various folks that a\nyear or more is likely required in any hard fork to limit this risk, and\nlimited pushback on that given the large increase which SegWit provides\nitself buying a ton of time.\n\nb) Having a significant discontinuity in block size increase only serves\nto confuse and mislead users and businesses, forcing them to rapidly\nadapt to a Bitcoin which changed overnight both by hardforking, and by\nfees changing suddenly. Instead, having the hard fork activate technical\nchanges, and then slowly increasing the block size over the following\nseveral years keeps things nice and continuous and also keeps us from\nhaving to revisit ye old blocksize debate again six months after activation.\n\nc) You should likely consider the effect of the many technological\ninnovations coming down the pipe in the coming months. Technologies like\nLightning, TumbleBit, and even your own RootStock could significantly\nreduce fee pressure as transactions move to much faster and more\nfeatureful systems.\n\nCommitments to aggressive hard fork parameters now may leave miners\nwithout much revenue as far out as the next halving (which current\ntransaction growth trends are indicating we'd just only barely reach 2MB\nof transaction volume, let alone if you consider the effects of users\nmoving to systems which provide more features for Bitcoin transactions).\nThis could lead to a precipitous drop in hashrate as miners are no\nlonger sufficiently compensated.\n\nRemember that the \"hashpower required to secure bitcoin\" is determined\nas a percentage of total Bitcoins transacted on-chain in each block, so\nas subsidy goes down, miners need to be paid with fees, not just price\nincreases. Even if we were OK with hashpower going down compared to the\nvalue it is securing, betting the security of Bitcoin on its price\nrising exponentially to match decreasing subsidy does not strike me as a\nparticularly inspiring tradeoff.\n\nThere aren't many great technical solutions to some of these issues, as\nfar as I'm aware, but it's something that needs to be incredibly\ncarefully considered before betting the continued security of Bitcoin on\nexponential on-chain growth, something which we have historically never\nseen.\n\nMatt\n\n\nOn March 31, 2017 5:09:18 PM EDT, Sergio Demian Lerner via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>Hi everyone,\n>\n>Segwit2Mb is the project to merge into Bitcoin a minimal patch that\n>aims to\n>untangle the current conflict between different political positions\n>regarding segwit activation vs. an increase of the on-chain blockchain\n>space through a standard block size increase. It is not a new solution,\n>but\n>it should be seen more as a least common denominator.\n>\n>Segwit2Mb combines segwit as it is today in Bitcoin 0.14+ with a 2MB\n>block\n>size hard-fork activated ONLY if segwit activates (95% of miners\n>signaling), but at a fixed future date.\n>\n>The sole objective of this proposal is to re-unite the Bitcoin\n>community\n>and avoid a cryptocurrency split. Segwit2Mb does not aim to be best\n>possible technical solution to solve Bitcoin technical limitations.\n>However, this proposal does not imply a compromise to the future\n>scalability or decentralization of Bitcoin, as a small increase in\n>block\n>size has been proven by several core and non-core developers not to\n>affect\n>Bitcoin value propositions.\n>\n>In the worst case, a 2X block size increase has much lower economic\n>impact\n>than the last bitcoin halving (<10%), which succeeded without problem.\n>\n>On the other side, Segwit2Mb primary goal is to be minimalistic: in\n>this\n>patch some choices have been made to reduce the number of lines\n>modified in\n>the current Bitcoin Core state (master branch), instead of implementing\n>the\n>most elegant solution. This is because I want to reduce the time it\n>takes\n>for core programmers and reviewers to check the correctness of the\n>code,\n>and to report and correct bugs.\n>\n>The patch was built by forking the master branch of Bitcoin Core,\n>mixing a\n>few lines of code from Jeff Garzik's BIP102,  and defining a second\n>versionbits activation bit (bit 2) for the combined activation.\n>\n>The combined activation of segwit and 2Mb hard-fork nVersion bit is 2\n>(DEPLOYMENT_SEGWIT_AND_2MB_BLOCKS).\n>\n>This means that segwit can still be activated without the 2MB hard-fork\n>by\n>signaling bit 1 in nVersion  (DEPLOYMENT_SEGWIT).\n>\n>The tentative lock-in and hard-fork dates are the following:\n>\n>Bit 2 signaling StartTime = 1493424000; // April 29th, 2017\n>\n>Bit 2 signaling Timeout = 1503964800; // August 29th, 2017\n>\n>HardForkTime = 1513209600; // Thu, 14 Dec 2017 00:00:00 GMT\n>\n>\n>The hard-fork is conditional to 95% of the hashing power has approved\n>the\n>segwit2mb soft-fork and the segwit soft-fork has been activated (which\n>should occur 2016 blocks after its lock-in time)\n>\n>For more information on how soft-forks are signaled and activated, see\n>https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki\n>\n>This means that segwit would be activated before 2Mb: this is\n>inevitable,\n>as versionbits have been designed to have fixed activation periods and\n>thresholds for all bits. Making segwit and 2Mb fork activate together\n>at a\n>delayed date would have required a major re-write of this code, which\n>would\n>contradict the premise of creating a minimalistic patch. However, once\n>segwit is activated, the hard-fork is unavoidable.\n>\n>Although I have coded a first version of the segwit2mb patch (which\n>modifies 120 lines of code, and adds 220 lines of testing code), I\n>would\n>prefer to wait to publish the source code until more comments have been\n>received from the community.\n>\n>To prevent worsening block verification time because of the O(N^2)\n>hashing\n>problem, the simple restriction that transactions cannot be larger than\n>1Mb\n>has been kept. Therefore the worse-case of block verification time has\n>only\n>doubled.\n>\n>Regarding the hard-fork activation date, I want to give enough time to\n>all\n>active economic nodes to upgrade. As of Fri Mar 31 2017,\n>https://bitnodes.21.co/nodes/ reports that 6332 out of 6955 nodes (91%)\n>have upgraded to post 0.12 versions. Upgrade to post 0.12 versions can\n>be\n>used to identify economic active nodes, because in the 0.12 release\n>dynamic\n>fees were introduced, and currently no Bitcoin automatic payment system\n>can\n>operate without automatic discovery of the current fee rate. A pre-0.12\n>would require constant manual intervention.\n>Therefore I conclude that no more than 91% of the network nodes\n>reported by\n>bitnodes are active economic nodes.\n>\n>As Bitcoin Core 0.12 was released on February 2016, the time for this\n>91%\n>to upgrade has been around one year (under a moderate pressure of\n>operational problems with unconfirmed transactions).\n>Therefore we can expect a similar or lower time to upgrade for a\n>hard-fork,\n>after developers have discussed and approved the patch, and it has been\n>reviewed and merged and 95% of the hashing power has signaled for it\n>(the\n>pressure not to upgrade being a complete halt of the operations).\n>However I\n>suggest that we discuss the hard-fork date and delay it if there is a\n>real\n>need to.\n>\n>Currently time works against the Bitcoin community, and so is delaying\n>a\n>compromise solution. Most of the community agree that halting the\n>innovation for several years is a very bad option.\n>\n>After the comments collected by the community, a BIP will be written\n>describing the resulting proposal details.\n>\n>If segwit2mb locks-in, before hard-fork occurs all bitcoin nodes should\n>be\n>updated to a Segwit2Mb enabled node to prevent them to be forked-away\n>in a\n>chain with almost no hashing-power.\n>\n>The proof of concept patch was made for Bitcoin Core but should be\n>easily\n>ported to other Bitcoin protocol implementations that already support\n>versionbits. Lightweight (SPV) wallets should not be affected as they\n>generally do not check the block size.\n>\n>I personally want to see the Lightning Network in action this year, use\n>the\n>non-malleability features in segwit, see the community discussing other\n>exciting soft-forks in the scaling roadmap, Schnorr sigs, drivechains\n>and\n>MAST.\n>\n>I want to see miners, developers and industry side-by-side pushing\n>Bitcoin\n>forward, to increase the value of Bitcoin and prevent high transaction\n>fees\n>to put out of business use-cases that could have high positive social\n>impact.\n>\n>I believe in the strength of a unified Bitcoin community. If you're a\n>developer, please give your opinion, suggest changes, audit it, and\n>take a\n>stand with me to unlock the current Bitcoin deadlock.\n>\n>Contributions to the segwit2mb project are welcomed and awaited. The\n>only\n>limitation is to stick to the principle that the patch should be as\n>simple\n>to audit as possible. As an example, I wouldn't feel confident if the\n>patch\n>modified more than ~150 lines of code.\n>\n>Improvements unrelated to a 2 Mb increase or segwit, as beneficial as\n>it\n>may be to Bitcoin, should not be part of segwit2Mb.\n>\n>This proposal should not prevent other consensus proposals to be\n>simultaneously merged: segwit2mb is a last resort solution in case we\n>can\n>not reach consensus on anything better.\n>\n>Again, the proposal is only a starting point: community feedback is\n>expected and welcomed.\n>\n>Regards,\n>Sergio Demian Lerner"
            },
            {
                "author": "Sergio Demian Lerner",
                "date": "2017-03-31T22:13:35",
                "message_text_only": "On Fri, Mar 31, 2017 at 6:22 PM, Matt Corallo <lf-lists at mattcorallo.com>\nwrote:\n\n> Hey Sergio,\n>\n> You appear to have ignored the last two years of Bitcoin hardfork\n> research and understanding, recycling instead BIP 102 from 2015. There\n> are many proposals which have pushed the state of hard fork research\n> much further since then, and you may wish to read some of the posts on\n> this mailing list listed at https://bitcoinhardforkresearch.github.io/\n> and make further edits based on what you learn.\n\n\nI've read every proposal that was published in the last two years and the\nchoice for NOT implementing any of the super cool research you cite is\nintentional.\n\nWe're in a deadlock and it seems we can't go forward adding more\nfunctionality to segwit without the community approval (which include\nminers). This is obvious to me.Then we have to go back.\n\nIf this last resort solution is merged, we could go back to discuss\nimprovements with the\n\nYour goal of \"avoid\n> technical changes\" appears to not have any basis outside of perceived\n> compromise for compromise sake, only making such a hardfork riskier\n> instead.\n>\n> You're are totally correct. It's a compromise for the compromise sake. I\ncouldn't have expressed it more clearly. However the only \"riskier\" element\nis the hard forking date. We can move the date forward.\n\n\n> At a minimum, in terms of pure technical changes, you should probably\n> consider (probably among others):\n>\na) Utilizing the \"hard fork signaling bit\" in the nVersion of the block.\n>\n\nThis I could consider, as it requires probably a single line of code. Which\nBIP specifies this?\n\n\n> b) Either limiting non-SegWit transactions in some way to fix the n**2\n> sighash and FindAndDelete runtime and memory usage issues or fix them by\n> utilizing the new sighash type which many wallets and projects have\n> already implemented for SegWit in the spending of non-SegWit outputs.\n>\n\nThe Seghash problem has already been addressed by limiting the maximum size\nof a transaction to 1 Mb.\nThe FindAndDelete problem has already been solved by the Core Developers,\nso we don't have to worry about it anymore.\n\n\n> c) Your really should have replay protection in any HF.\n\n\nWe could add a simple protection, although if we reach community consensus\nand 95% of hashing power, does we really need to? Can the old chain still\nbe alive?\nIf more people ask for replay protection, I will merge Spoonet scheme or\ndevelop the minimum possible replay protection (a simple signaling bit in\ntransaction version)\n\n\n> d) You may wish to consider the possibility of tweaking the witness\n> discount and possibly discounting other parts of the input - SegWit went\n> a long ways towards making removal of elements from the UTXO set cheaper\n> than adding them, but didn't quite get there, you should probably finish\n> that job. This also provides additional tuneable parameters to allow you\n> to increase the block size while not having a blowup in the worst-case\n> block size.\n>\n\nThat is an interesting economic change and would be out of the scope of\nsegwit2mb.\n\n\n> e) Additional commitments at the top of the merkle root - both for\n> SegWit transactions and as additional space for merged mining and other\n> commitments which we may wish to add in the future, this should likely\n> be implemented an \"additional header\" ala Johnson Lau's Spoonnet proposal.\n>\n> That is an interesting technical improvement that is out of the scope of\nsegwit2mb.\nWe can keep discussing spoonet while we merge segwit2mb, as spoonnet\nincludes most of technical innovations.\n\n\n> Additionally, I think your parameters here pose very significant risk to\n> the Bitcoin ecosystem broadly.\n>\n> a) Activating a hard fork with less than 18/24 months (and even then...)\n> from a fully-audited and supported release of full node software to\n> activation date poses significant risks to many large software projects\n> and users. I've repeatedly received feedback from various folks that a\n> year or more is likely required in any hard fork to limit this risk, and\n> limited pushback on that given the large increase which SegWit provides\n> itself buying a ton of time.\n>\n> The feedback I received is slightly different from your feedback. Many\ncompany CTOs have expressed that one year for a Bitcoin hard-fork was\nperiod they could schedule a secure upgrade.\n\n\n\n> b) Having a significant discontinuity in block size increase only serves\n> to confuse and mislead users and businesses, forcing them to rapidly\n> adapt to a Bitcoin which changed overnight both by hardforking, and by\n> fees changing suddenly. Instead, having the hard fork activate technical\n> changes, and then slowly increasing the block size over the following\n> several years keeps things nice and continuous and also keeps us from\n> having to revisit ye old blocksize debate again six months after\n> activation.\n>\n> This is something worth considering. There is the old Pieter BIP103\nproposal has good parameters (17.7% per year).\n\nc) You should likely consider the effect of the many technological\n> innovations coming down the pipe in the coming months. Technologies like\n> Lightning, TumbleBit, and even your own RootStock could significantly\n> reduce fee pressure as transactions move to much faster and more\n> featureful systems.\n>\n> RSK sidechain team would have to take very tough decisions if Bitcoin\nsplits, as RSK platform cannot be pegged to two different cryptocurrencies.\nWe could launch two platforms, but RSK value proposition is \"supporting the\nadvance of Bitcoin, the cryptocurrecy with highest network effect\". You\nunderstand that if Bitcoin splits Bitcoin BTC/BTU separately may cease to\nbe the cryptocurrencies with higher volume/market cap/network effect.\n\nTherefore all RSK people that I talked too would prefer to avoid a split at\nall cost, reather that to be the winners of the scaling war.\n\n\n\n> On March 31, 2017 5:09:18 PM EDT, Sergio Demian Lerner via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >Hi everyone,\n> >\n> >Segwit2Mb is the project to merge into Bitcoin a minimal patch that\n> >aims to\n> >untangle the current conflict between different political positions\n> >regarding segwit activation vs. an increase of the on-chain blockchain\n> >space through a standard block size increase. It is not a new solution,\n> >but\n> >it should be seen more as a least common denominator.\n> >\n> >Segwit2Mb combines segwit as it is today in Bitcoin 0.14+ with a 2MB\n> >block\n> >size hard-fork activated ONLY if segwit activates (95% of miners\n> >signaling), but at a fixed future date.\n> >\n> >The sole objective of this proposal is to re-unite the Bitcoin\n> >community\n> >and avoid a cryptocurrency split. Segwit2Mb does not aim to be best\n> >possible technical solution to solve Bitcoin technical limitations.\n> >However, this proposal does not imply a compromise to the future\n> >scalability or decentralization of Bitcoin, as a small increase in\n> >block\n> >size has been proven by several core and non-core developers not to\n> >affect\n> >Bitcoin value propositions.\n> >\n> >In the worst case, a 2X block size increase has much lower economic\n> >impact\n> >than the last bitcoin halving (<10%), which succeeded without problem.\n> >\n> >On the other side, Segwit2Mb primary goal is to be minimalistic: in\n> >this\n> >patch some choices have been made to reduce the number of lines\n> >modified in\n> >the current Bitcoin Core state (master branch), instead of implementing\n> >the\n> >most elegant solution. This is because I want to reduce the time it\n> >takes\n> >for core programmers and reviewers to check the correctness of the\n> >code,\n> >and to report and correct bugs.\n> >\n> >The patch was built by forking the master branch of Bitcoin Core,\n> >mixing a\n> >few lines of code from Jeff Garzik's BIP102,  and defining a second\n> >versionbits activation bit (bit 2) for the combined activation.\n> >\n> >The combined activation of segwit and 2Mb hard-fork nVersion bit is 2\n> >(DEPLOYMENT_SEGWIT_AND_2MB_BLOCKS).\n> >\n> >This means that segwit can still be activated without the 2MB hard-fork\n> >by\n> >signaling bit 1 in nVersion  (DEPLOYMENT_SEGWIT).\n> >\n> >The tentative lock-in and hard-fork dates are the following:\n> >\n> >Bit 2 signaling StartTime = 1493424000; // April 29th, 2017\n> >\n> >Bit 2 signaling Timeout = 1503964800; // August 29th, 2017\n> >\n> >HardForkTime = 1513209600; // Thu, 14 Dec 2017 00:00:00 GMT\n> >\n> >\n> >The hard-fork is conditional to 95% of the hashing power has approved\n> >the\n> >segwit2mb soft-fork and the segwit soft-fork has been activated (which\n> >should occur 2016 blocks after its lock-in time)\n> >\n> >For more information on how soft-forks are signaled and activated, see\n> >https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki\n> >\n> >This means that segwit would be activated before 2Mb: this is\n> >inevitable,\n> >as versionbits have been designed to have fixed activation periods and\n> >thresholds for all bits. Making segwit and 2Mb fork activate together\n> >at a\n> >delayed date would have required a major re-write of this code, which\n> >would\n> >contradict the premise of creating a minimalistic patch. However, once\n> >segwit is activated, the hard-fork is unavoidable.\n> >\n> >Although I have coded a first version of the segwit2mb patch (which\n> >modifies 120 lines of code, and adds 220 lines of testing code), I\n> >would\n> >prefer to wait to publish the source code until more comments have been\n> >received from the community.\n> >\n> >To prevent worsening block verification time because of the O(N^2)\n> >hashing\n> >problem, the simple restriction that transactions cannot be larger than\n> >1Mb\n> >has been kept. Therefore the worse-case of block verification time has\n> >only\n> >doubled.\n> >\n> >Regarding the hard-fork activation date, I want to give enough time to\n> >all\n> >active economic nodes to upgrade. As of Fri Mar 31 2017,\n> >https://bitnodes.21.co/nodes/ reports that 6332 out of 6955 nodes (91%)\n> >have upgraded to post 0.12 versions. Upgrade to post 0.12 versions can\n> >be\n> >used to identify economic active nodes, because in the 0.12 release\n> >dynamic\n> >fees were introduced, and currently no Bitcoin automatic payment system\n> >can\n> >operate without automatic discovery of the current fee rate. A pre-0.12\n> >would require constant manual intervention.\n> >Therefore I conclude that no more than 91% of the network nodes\n> >reported by\n> >bitnodes are active economic nodes.\n> >\n> >As Bitcoin Core 0.12 was released on February 2016, the time for this\n> >91%\n> >to upgrade has been around one year (under a moderate pressure of\n> >operational problems with unconfirmed transactions).\n> >Therefore we can expect a similar or lower time to upgrade for a\n> >hard-fork,\n> >after developers have discussed and approved the patch, and it has been\n> >reviewed and merged and 95% of the hashing power has signaled for it\n> >(the\n> >pressure not to upgrade being a complete halt of the operations).\n> >However I\n> >suggest that we discuss the hard-fork date and delay it if there is a\n> >real\n> >need to.\n> >\n> >Currently time works against the Bitcoin community, and so is delaying\n> >a\n> >compromise solution. Most of the community agree that halting the\n> >innovation for several years is a very bad option.\n> >\n> >After the comments collected by the community, a BIP will be written\n> >describing the resulting proposal details.\n> >\n> >If segwit2mb locks-in, before hard-fork occurs all bitcoin nodes should\n> >be\n> >updated to a Segwit2Mb enabled node to prevent them to be forked-away\n> >in a\n> >chain with almost no hashing-power.\n> >\n> >The proof of concept patch was made for Bitcoin Core but should be\n> >easily\n> >ported to other Bitcoin protocol implementations that already support\n> >versionbits. Lightweight (SPV) wallets should not be affected as they\n> >generally do not check the block size.\n> >\n> >I personally want to see the Lightning Network in action this year, use\n> >the\n> >non-malleability features in segwit, see the community discussing other\n> >exciting soft-forks in the scaling roadmap, Schnorr sigs, drivechains\n> >and\n> >MAST.\n> >\n> >I want to see miners, developers and industry side-by-side pushing\n> >Bitcoin\n> >forward, to increase the value of Bitcoin and prevent high transaction\n> >fees\n> >to put out of business use-cases that could have high positive social\n> >impact.\n> >\n> >I believe in the strength of a unified Bitcoin community. If you're a\n> >developer, please give your opinion, suggest changes, audit it, and\n> >take a\n> >stand with me to unlock the current Bitcoin deadlock.\n> >\n> >Contributions to the segwit2mb project are welcomed and awaited. The\n> >only\n> >limitation is to stick to the principle that the patch should be as\n> >simple\n> >to audit as possible. As an example, I wouldn't feel confident if the\n> >patch\n> >modified more than ~150 lines of code.\n> >\n> >Improvements unrelated to a 2 Mb increase or segwit, as beneficial as\n> >it\n> >may be to Bitcoin, should not be part of segwit2Mb.\n> >\n> >This proposal should not prevent other consensus proposals to be\n> >simultaneously merged: segwit2mb is a last resort solution in case we\n> >can\n> >not reach consensus on anything better.\n> >\n> >Again, the proposal is only a starting point: community feedback is\n> >expected and welcomed.\n> >\n> >Regards,\n> >Sergio Demian Lerner\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170331/21fb6e3f/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Segwit2Mb - combined soft/hard fork - Request For Comments",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Sergio Demian Lerner",
                "Matt Corallo",
                "praxeology_guy"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 45354
        }
    },
    {
        "title": "[bitcoin-dev] The TXO bitfield",
        "thread_messages": [
            {
                "author": "Bram Cohen",
                "date": "2017-03-31T22:05:07",
                "message_text_only": "Looking forward in node scaling we can envision a future in which blocks\nare required to come with proofs of their validity and nodes can be run\nentirely in memory and never have to hit disk. Ideally we'd like for proofs\nto be able to be stored in client wallets which plan to spend their utxos\nlater, or at least be able to have a full node make a single not terribly\nexpensive disk access to form the proof which can then be passed along to\nother peers.\n\nSuch proofs will probably be significantly larger than the blocks they\nprove (this is merkle root stuff, not zero knowledge stuff), but if we\naccept that as a given then this should be doable, although the details of\nhow to do it aren't obvious.\n\nThis vision can be implemented simply and efficiently by playing some games\nwith the semantics of the term 'proof'. A proof is a thing which convinces\nsomeone of something. What we've discussed in the past for such proofs\nmostly has to do with maintaining a hash root of everything and having\nproofs lead to that. This is an extrema of complexity of the proof and\nsimplicity of the checker, at the expense of forcing the root to be\nmaintained at all times and the proof to be reasonably fresh. Some tricks\ncan be applied to keep that problem under control, but there's an\nalternative approach where the amount of data necessary to do validation is\nmuch larger but still entirely reasonable to keep in memory, and the sizes\nof proofs and their required freshness is much smaller.\n\nIn the previous discussion on Merkle sets I commented that insertion\nordering's main practical utility may be that it allows for compression. It\nturns out that a constant factor of 256 makes a big difference. Since\nthere's only really one bit stored for each txo (stored or not) once you\nhave an insertion ordering you can simply store a bitfield of all txos so\nfar, which is entirely reasonable to hold in memory, and can be made even\nmore reasonable by compactifying down the older, mostly spent portions of\nit (how best to compress a bitfield while maintaining random access is an\ninteresting problem but entirely doable).\n\nThis approach meets all the design goals, even allowing wallets to remember\ntheir own 'proofs', which are just proofs of insertion ordering. Those\ndon't even change once the risk of reorgs has passed, so they can be stored\nfor years without being maintained.\n\nProofs of insertion ordering can be made by having a canonical way of\ncalculating a root of position commitments for each block, and nodes\ncalculate those roots when evaluating the block history and store them all\nin memory. A proof of position is a path to one of those roots.\n\nI've intentionally skipped over most of the details here, because it's\nprobably best to have a high level discussion of this as a general approach\nbefore getting lost in the weeds.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170331/d7516c3d/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "The TXO bitfield",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Bram Cohen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3013
        }
    }
]