[
    {
        "title": "[Bitcoin-development] Draft BIP for Bloom filtering",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2013-02-06T16:33:10",
                "message_text_only": "Can somebody please unlock the BIP wiki page? I don't know why it was\nlocked but it's stale.\n\n\nOn Wed, Jan 30, 2013 at 12:13 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> Sorry, to clarify, these are test builds available here:\n>\n>\n> https://code.google.com/p/bitcoin-wallet/downloads/detail?name=bitcoin-wallet-2.39_bitcoinj0.7.apk&can=2&q=\n>\n> It's not on the Play store yet. It probably makes sense to release after\n> some more testing and after Bitcoin 0.8 comes out, as otherwise there's a\n> risk that 0.7 snapshot nodes will get overloaded.\n>\n>\n> On Wed, Jan 30, 2013 at 12:09 PM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> Andreas has uploaded Android builds that use the new bloom filtering and\n>> peer selection code (also, dependency analysis of transactions).\n>>\n>> The performance gain is very cool. The app feels dramatically faster to\n>> start up and sync. Because the app syncs on charge when I opened it around\n>> lunchtime it had only 7 hours of data to sync (42 blocks) and it brought up\n>> 6 peer connections, found a 0.7.99 node and synced all in <2 seconds. That\n>> was on wifi.\n>>\n>> The next lowest hanging perf fruit is almost certainly to optimize disk\n>> accesses. Flash on Android devices seems to be much slower than laptop\n>> flash storage, and current bitcoinj is very inefficient in how it writes\n>> (one write per block header!). This matters a lot when doing fast catchup\n>> for first time users.\n>>\n>> The BIP is now a little bit stale, but only slightly.\n>>\n>>\n>> On Wed, Jan 16, 2013 at 4:00 PM, Matt Corallo <bitcoin-list at bluematt.me>wrote:\n>>\n>>> Actually, there is one more minor algorithmic change I would like to\n>>> make to the way the hash function is computed really quick before it\n>>> gets merged, I'll have that finished up by the end of today.\n>>>\n>>> Matt\n>>>\n>>> On Wed, 2013-01-16 at 11:43 +0100, Mike Hearn wrote:\n>>> > Matts latest code has been tested by Andreas and seems to work\n>>> > correctly. He had to extend the client a bit to refresh the filter\n>>> > every 25k blocks because even with the extra flag, eventually the\n>>> > filter degrades into uselessness, but it did still improve the\n>>> > situation quite a bit.\n>>> >\n>>> > Because it's unit tested, been reviewed by me several times, has an\n>>> > interoperable implementation that has also been tested by Andreas in a\n>>> > build of his smartphone app,  I'm going to ACK the current code and\n>>> > request that it be merged in to 0.8. What do you say Gavin?\n>>> >\n>>> > The next step after that would be profiling. It's a big performance\n>>> > improvement for SPV clients already, but not as much as I anticipated.\n>>> > I suspect there's a simple bottleneck or missed optimization\n>>> > somewhere. But that can obviously come post-0.8\n>>>\n>>>\n>>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130206/3463754f/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-02-06T16:45:13",
                "message_text_only": "On Wed, Feb 6, 2013 at 8:33 AM, Mike Hearn <mike at plan99.net> wrote:\n> Can somebody please unlock the BIP wiki page? I don't know why it was locked\n> but it's stale.\n\nI asked for permissions to unlock it but haven't heard back\u2014 will prod."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-02-20T12:44:56",
                "message_text_only": "I paid the new anti-spam deposit and updated the BIP 37 page to the latest\nversion of the protocol, then marked it as accepted. High fives all round,\nbut especially to Matt for doing the heavy lifting on this feature.\n\n\nOn Wed, Feb 6, 2013 at 5:45 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Wed, Feb 6, 2013 at 8:33 AM, Mike Hearn <mike at plan99.net> wrote:\n> > Can somebody please unlock the BIP wiki page? I don't know why it was\n> locked\n> > but it's stale.\n>\n> I asked for permissions to unlock it but haven't heard back\u2014 will prod.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130220/cd1e8897/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Draft BIP for Bloom filtering",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Gregory Maxwell"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 3932
        }
    },
    {
        "title": "[Bitcoin-development] Implementing trading across chains",
        "thread_messages": [
            {
                "author": "Petr Praus",
                "date": "2013-02-08T02:44:44",
                "message_text_only": "Hi,\n\nI intend to implement trading across chains in a P2P manner (as described\nby Mike Hearn in\nhttps://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains).\nNote, this is indended more as an alternative chain development, I don't\nhave any plans for merging it back into main client (not because I don't\nwant to, but because I think it wouldn't be accepted). Before I dive into\nit, I thought it might be a good idea to ask here if the community has any\nuseful ideas or comments on this topic?\n\nThanks to Gary Rowe I know about Open\nTransactions<https://github.com/FellowTraveler/Open-Transactions>.\nThey can do \"multicurrency trading\" too, but it's objectives are quite\nambitious and I'm looking at making relatively small changes in the\nmainline Bitcoin client rather than diving into something entirely new.\n\nA little background on why am I doing this, can be found\nhere<https://groups.google.com/d/topic/bitcoinj/lmVSF8yaJHk/discussion>.\nIn short it's part of research towards my Master's thesis (more precisely,\nan excuse to hack on Bitcoin and sell it as research :)) which should be\nabout multicurrency (alternative chains) in Bitcoin.\n\nThanks,\nPetr\n\nPS: I hope I'm not too off topic here, but\nthis<https://bitcointalk.org/index.php?topic=15527.0> thread\nindicates it should be fine to post alternative development questions on\nthis.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130207/a3d922f8/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2013-02-11T11:03:01",
                "message_text_only": "Hi, you may be interested in a couple of related projects.\n\nColored coins uses satoshis to represent smart property, shares, IOUs\nof another currency...Colored coins can be atomically traded for\nbitcoin. If you implement the trade across chains contract they would\nalso be tradeable for another chain currencies like namecoin or\nfreicoin.\n\nhttp://www.bitcoinx.org/\n\nRipple is a concept by which people that trust each other on a network\nare able to pay with IOUs transitively. It has a new p2p\nimplementation  that is still on development. The new implementation\nis very similar to bitcoin in certain senses but it has no mining.\nBitcoin IOUs can be traded there.\n\nhttps://ripple.com/\n\nGood luck with the implementation, this is a good feature to have,\neven if it's not on the main client.\n\n\nOn 2/8/13, Petr Praus <petr at praus.net> wrote:\n> Hi,\n>\n> I intend to implement trading across chains in a P2P manner (as described\n> by Mike Hearn in\n> https://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains).\n> Note, this is indended more as an alternative chain development, I don't\n> have any plans for merging it back into main client (not because I don't\n> want to, but because I think it wouldn't be accepted). Before I dive into\n> it, I thought it might be a good idea to ask here if the community has any\n> useful ideas or comments on this topic?\n>\n> Thanks to Gary Rowe I know about Open\n> Transactions<https://github.com/FellowTraveler/Open-Transactions>.\n> They can do \"multicurrency trading\" too, but it's objectives are quite\n> ambitious and I'm looking at making relatively small changes in the\n> mainline Bitcoin client rather than diving into something entirely new.\n>\n> A little background on why am I doing this, can be found\n> here<https://groups.google.com/d/topic/bitcoinj/lmVSF8yaJHk/discussion>.\n> In short it's part of research towards my Master's thesis (more precisely,\n> an excuse to hack on Bitcoin and sell it as research :)) which should be\n> about multicurrency (alternative chains) in Bitcoin.\n>\n> Thanks,\n> Petr\n>\n> PS: I hope I'm not too off topic here, but\n> this<https://bitcointalk.org/index.php?topic=15527.0> thread\n> indicates it should be fine to post alternative development questions on\n> this.\n>\n\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/\nhttp://archive.ripple-project.org/"
            },
            {
                "author": "Petr Praus",
                "date": "2013-02-13T21:42:17",
                "message_text_only": "Jorge, thanks for bitcoinx tip, I didn't know about it and it's certainly\nrelated. I'll have a closer look\nRegarding Ripple, I tried it but as far as I can tell, it doesn't have any\ncontract enforcement (by technical means) built in.\n\n\nOn 11 February 2013 05:03, Jorge Tim\u00f3n <jtimonmv at gmail.com> wrote:\n\n> Hi, you may be interested in a couple of related projects.\n>\n> Colored coins uses satoshis to represent smart property, shares, IOUs\n> of another currency...Colored coins can be atomically traded for\n> bitcoin. If you implement the trade across chains contract they would\n> also be tradeable for another chain currencies like namecoin or\n> freicoin.\n>\n> http://www.bitcoinx.org/\n>\n> Ripple is a concept by which people that trust each other on a network\n> are able to pay with IOUs transitively. It has a new p2p\n> implementation  that is still on development. The new implementation\n> is very similar to bitcoin in certain senses but it has no mining.\n> Bitcoin IOUs can be traded there.\n>\n> https://ripple.com/\n>\n> Good luck with the implementation, this is a good feature to have,\n> even if it's not on the main client.\n>\n>\n> On 2/8/13, Petr Praus <petr at praus.net> wrote:\n> > Hi,\n> >\n> > I intend to implement trading across chains in a P2P manner (as described\n> > by Mike Hearn in\n> > https://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains).\n> > Note, this is indended more as an alternative chain development, I don't\n> > have any plans for merging it back into main client (not because I don't\n> > want to, but because I think it wouldn't be accepted). Before I dive into\n> > it, I thought it might be a good idea to ask here if the community has\n> any\n> > useful ideas or comments on this topic?\n> >\n> > Thanks to Gary Rowe I know about Open\n> > Transactions<https://github.com/FellowTraveler/Open-Transactions>.\n> > They can do \"multicurrency trading\" too, but it's objectives are quite\n> > ambitious and I'm looking at making relatively small changes in the\n> > mainline Bitcoin client rather than diving into something entirely new.\n> >\n> > A little background on why am I doing this, can be found\n> > here<https://groups.google.com/d/topic/bitcoinj/lmVSF8yaJHk/discussion>.\n> > In short it's part of research towards my Master's thesis (more\n> precisely,\n> > an excuse to hack on Bitcoin and sell it as research :)) which should be\n> > about multicurrency (alternative chains) in Bitcoin.\n> >\n> > Thanks,\n> > Petr\n> >\n> > PS: I hope I'm not too off topic here, but\n> > this<https://bitcointalk.org/index.php?topic=15527.0> thread\n> > indicates it should be fine to post alternative development questions on\n> > this.\n> >\n>\n>\n> --\n> Jorge Tim\u00f3n\n>\n> http://freico.in/\n> http://archive.ripple-project.org/\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130213/ff7b335a/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2013-02-13T21:49:50",
                "message_text_only": "Well, if it's even possible to trade across \"chains\" with Ripple (and\nI don't know of any reason shouldn't be), you will have to wait to the\nrelease of the full node (validator) code, for now only a javascript\nweb client is open sourced. But it seems they at least have plans for\ncontracts judging from the wiki:\n\nhttps://ripple.com/wiki/Contracts\n\n\nOn 2/13/13, Petr Praus <petr at praus.net> wrote:\n> Jorge, thanks for bitcoinx tip, I didn't know about it and it's certainly\n> related. I'll have a closer look\n> Regarding Ripple, I tried it but as far as I can tell, it doesn't have any\n> contract enforcement (by technical means) built in.\n>\n>\n> On 11 February 2013 05:03, Jorge Tim\u00f3n <jtimonmv at gmail.com> wrote:\n>\n>> Hi, you may be interested in a couple of related projects.\n>>\n>> Colored coins uses satoshis to represent smart property, shares, IOUs\n>> of another currency...Colored coins can be atomically traded for\n>> bitcoin. If you implement the trade across chains contract they would\n>> also be tradeable for another chain currencies like namecoin or\n>> freicoin.\n>>\n>> http://www.bitcoinx.org/\n>>\n>> Ripple is a concept by which people that trust each other on a network\n>> are able to pay with IOUs transitively. It has a new p2p\n>> implementation  that is still on development. The new implementation\n>> is very similar to bitcoin in certain senses but it has no mining.\n>> Bitcoin IOUs can be traded there.\n>>\n>> https://ripple.com/\n>>\n>> Good luck with the implementation, this is a good feature to have,\n>> even if it's not on the main client.\n>>\n>>\n>> On 2/8/13, Petr Praus <petr at praus.net> wrote:\n>> > Hi,\n>> >\n>> > I intend to implement trading across chains in a P2P manner (as\n>> > described\n>> > by Mike Hearn in\n>> > https://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains).\n>> > Note, this is indended more as an alternative chain development, I\n>> > don't\n>> > have any plans for merging it back into main client (not because I\n>> > don't\n>> > want to, but because I think it wouldn't be accepted). Before I dive\n>> > into\n>> > it, I thought it might be a good idea to ask here if the community has\n>> any\n>> > useful ideas or comments on this topic?\n>> >\n>> > Thanks to Gary Rowe I know about Open\n>> > Transactions<https://github.com/FellowTraveler/Open-Transactions>.\n>> > They can do \"multicurrency trading\" too, but it's objectives are quite\n>> > ambitious and I'm looking at making relatively small changes in the\n>> > mainline Bitcoin client rather than diving into something entirely new.\n>> >\n>> > A little background on why am I doing this, can be found\n>> > here<https://groups.google.com/d/topic/bitcoinj/lmVSF8yaJHk/discussion>.\n>> > In short it's part of research towards my Master's thesis (more\n>> precisely,\n>> > an excuse to hack on Bitcoin and sell it as research :)) which should\n>> > be\n>> > about multicurrency (alternative chains) in Bitcoin.\n>> >\n>> > Thanks,\n>> > Petr\n>> >\n>> > PS: I hope I'm not too off topic here, but\n>> > this<https://bitcointalk.org/index.php?topic=15527.0> thread\n>> > indicates it should be fine to post alternative development questions\n>> > on\n>> > this.\n>> >\n>>\n>>\n>> --\n>> Jorge Tim\u00f3n\n>>\n>> http://freico.in/\n>> http://archive.ripple-project.org/\n>>\n>\n\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/\nhttp://archive.ripple-project.org/"
            },
            {
                "author": "Petr Praus",
                "date": "2013-02-14T21:02:25",
                "message_text_only": "Ah, I missed this, thanks.\n\n\nOn 13 February 2013 15:49, Jorge Tim\u00f3n <jtimonmv at gmail.com> wrote:\n\n> Well, if it's even possible to trade across \"chains\" with Ripple (and\n> I don't know of any reason shouldn't be), you will have to wait to the\n> release of the full node (validator) code, for now only a javascript\n> web client is open sourced. But it seems they at least have plans for\n> contracts judging from the wiki:\n>\n> https://ripple.com/wiki/Contracts\n>\n>\n> On 2/13/13, Petr Praus <petr at praus.net> wrote:\n> > Jorge, thanks for bitcoinx tip, I didn't know about it and it's certainly\n> > related. I'll have a closer look\n> > Regarding Ripple, I tried it but as far as I can tell, it doesn't have\n> any\n> > contract enforcement (by technical means) built in.\n> >\n> >\n> > On 11 February 2013 05:03, Jorge Tim\u00f3n <jtimonmv at gmail.com> wrote:\n> >\n> >> Hi, you may be interested in a couple of related projects.\n> >>\n> >> Colored coins uses satoshis to represent smart property, shares, IOUs\n> >> of another currency...Colored coins can be atomically traded for\n> >> bitcoin. If you implement the trade across chains contract they would\n> >> also be tradeable for another chain currencies like namecoin or\n> >> freicoin.\n> >>\n> >> http://www.bitcoinx.org/\n> >>\n> >> Ripple is a concept by which people that trust each other on a network\n> >> are able to pay with IOUs transitively. It has a new p2p\n> >> implementation  that is still on development. The new implementation\n> >> is very similar to bitcoin in certain senses but it has no mining.\n> >> Bitcoin IOUs can be traded there.\n> >>\n> >> https://ripple.com/\n> >>\n> >> Good luck with the implementation, this is a good feature to have,\n> >> even if it's not on the main client.\n> >>\n> >>\n> >> On 2/8/13, Petr Praus <petr at praus.net> wrote:\n> >> > Hi,\n> >> >\n> >> > I intend to implement trading across chains in a P2P manner (as\n> >> > described\n> >> > by Mike Hearn in\n> >> > https://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains\n> ).\n> >> > Note, this is indended more as an alternative chain development, I\n> >> > don't\n> >> > have any plans for merging it back into main client (not because I\n> >> > don't\n> >> > want to, but because I think it wouldn't be accepted). Before I dive\n> >> > into\n> >> > it, I thought it might be a good idea to ask here if the community has\n> >> any\n> >> > useful ideas or comments on this topic?\n> >> >\n> >> > Thanks to Gary Rowe I know about Open\n> >> > Transactions<https://github.com/FellowTraveler/Open-Transactions>.\n> >> > They can do \"multicurrency trading\" too, but it's objectives are quite\n> >> > ambitious and I'm looking at making relatively small changes in the\n> >> > mainline Bitcoin client rather than diving into something entirely\n> new.\n> >> >\n> >> > A little background on why am I doing this, can be found\n> >> > here<\n> https://groups.google.com/d/topic/bitcoinj/lmVSF8yaJHk/discussion>.\n> >> > In short it's part of research towards my Master's thesis (more\n> >> precisely,\n> >> > an excuse to hack on Bitcoin and sell it as research :)) which should\n> >> > be\n> >> > about multicurrency (alternative chains) in Bitcoin.\n> >> >\n> >> > Thanks,\n> >> > Petr\n> >> >\n> >> > PS: I hope I'm not too off topic here, but\n> >> > this<https://bitcointalk.org/index.php?topic=15527.0> thread\n> >> > indicates it should be fine to post alternative development questions\n> >> > on\n> >> > this.\n> >> >\n> >>\n> >>\n> >> --\n> >> Jorge Tim\u00f3n\n> >>\n> >> http://freico.in/\n> >> http://archive.ripple-project.org/\n> >>\n> >\n>\n>\n> --\n> Jorge Tim\u00f3n\n>\n> http://freico.in/\n> http://archive.ripple-project.org/\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130214/fabe60ea/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Implementing trading across chains",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jorge Tim\u00f3n",
                "Petr Praus"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 13905
        }
    },
    {
        "title": "[Bitcoin-development] Blockchain as root CA for payment protocol",
        "thread_messages": [
            {
                "author": "Timo Hanke",
                "date": "2013-02-08T10:03:54",
                "message_text_only": "There have been proposals to use the blockchain to establish\n\"identities\". firstbits is a simple example. I would like to announce a\nproject that extends this idea to turn the blockchain into a \"root CA\"\nthat can sign arbitrary certificates. The purpose is to use these\ncertificates in the payment protocol, where some might consider\ntraditional centralized root CAs unsatisfactory. \n\nCode is here: https://github.com/bcpki\n\nTechnical specification and full-length examples are found in the wiki.\nI therefore spare myself from repeating the details here, even though,\nof course, discussion about those details is welcome on this list.\n\nExcerpt from README.md follows:\n\nFirst, we have drafted a quite general specification for bitcoin certificates (protobuf messages) that allow for a variety of payment protocols (e.g. static as well as customer-side-generated payment addresses).\nThis part has surely been done elsewhere as well and is orthogonal to the goal of this project.\nWhat is new here is the signatures _under_ the certificates.\n\nWe have patched the bitcoind to handle certificates, submit signatures to the blockchain, verify certificates against the blockchain, pay directly to certificates (with various payment methods), revoke certificates.\nSignatures in the blockchain are stored entirely in the UTXO set (i.e. the unspend, unprunable outputs). \nThis seems to make signature lookup and verification reasonably fast: \nit took us 10s in the mainnet test we performed (lookup is instant on the testnet, of course).\n\nPayment methods include: static bitcoin addresses, client-side derived\npayment addresses (pay-to-contract), pay-to-contract with multisig destinations (P2SH)\n\nFull-length real-world examples for all payment methods are provided in the tutorial pages.\nThese examples have actually been carried out on testnet3.\n\nFor further details and specifications see the wiki.\n\ntimo hanke"
            },
            {
                "author": "Peter Todd",
                "date": "2013-02-08T11:01:08",
                "message_text_only": "On Fri, Feb 08, 2013 at 11:03:54AM +0100, Timo Hanke wrote:\n> First, we have drafted a quite general specification for bitcoin certificates (protobuf messages) that allow for a variety of payment protocols (e.g. static as well as customer-side-generated payment addresses).\n> This part has surely been done elsewhere as well and is orthogonal to the goal of this project.\n> What is new here is the signatures _under_ the certificates.\n> \n> We have patched the bitcoind to handle certificates, submit signatures to the blockchain, verify certificates against the blockchain, pay directly to certificates (with various payment methods), revoke certificates.\n> Signatures in the blockchain are stored entirely in the UTXO set (i.e. the unspend, unprunable outputs). \n> This seems to make signature lookup and verification reasonably fast: \n> it took us 10s in the mainnet test we performed (lookup is instant on the testnet, of course).\n\nWhy don't you use namecoin or another alt-chain for this?\n\nThe UTXO set is the most expensive part of the blockchain because it\nmust be stored in memory with fast access times. It's good that you have\ndesigned the system so that the addresses can be revoked, removing them\nfrom the UTXO set, but it still will encourage the exact same type of\nugly squatting behavior we've already seen with first-bits, and again\nit'll have a significant cost to the network going forward for purposes\nthat do not need to be done on the block chain.\n\nIn https://github.com/bcpki/bitcoin/wiki/Technical you say that you have\na minimum amount required for an outpoint to be valid, set at 0.05BTC.\nThat's a nice touch, and sort of works because this is a consensus\nprotocol, but if the exchange rate climbs significantly there will be a\nlot of pressure to reduce that value. (setting minimum value by chain\nheight) What will happen then is there will be a mad rush to squat on\npreviously unaffordable domains, further disrupting Bitcoin's purpose as\na financial network.\n\nIn addition you'll also have a second problem: squatting of subsequent\ntransactions, particularly for valuable bcvalues. Basically if someone\nalready has \"microsoft\" insert bcvalues after their tx in case they\naccidentally spend it. Of course, this will be done by people buying\nbcvalues as well. Again, all this further clogs up the UTXO set.\n\nI also can't figure out why you say signature lookup and verification\ntakes 10s - this should be an O(1) operation if you maintain a mapping\nof candidate pubkeys to linked-lists of sorted applicable transactions.\n\nFinally, why is this implemented within the reference client? Use the\nraw transaction API and make up your own database. If you want, create a\nRPC command that allows you to query the UTXO set directly; this would\nbe a useful feature to have. This patch will never be accepted to the\nreference client, so you'll just wind up having to maintain a fork. Even\nfor a prototype this approach is ill-advised - prototypes have a bad way\nof turning into production code.\n\n\nIn short, please don't do this.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130208/8b7a97fa/attachment.sig>"
            },
            {
                "author": "Timo Hanke",
                "date": "2013-02-09T14:33:25",
                "message_text_only": "On Fri, Feb 08, 2013 at 06:01:08AM -0500, Peter Todd wrote:\n> On Fri, Feb 08, 2013 at 11:03:54AM +0100, Timo Hanke wrote:\n> > First, we have drafted a quite general specification for bitcoin certificates (protobuf messages) that allow for a variety of payment protocols (e.g. static as well as customer-side-generated payment addresses).\n> > This part has surely been done elsewhere as well and is orthogonal to the goal of this project.\n> > What is new here is the signatures _under_ the certificates.\n> > \n> > We have patched the bitcoind to handle certificates, submit signatures to the blockchain, verify certificates against the blockchain, pay directly to certificates (with various payment methods), revoke certificates.\n> > Signatures in the blockchain are stored entirely in the UTXO set (i.e. the unspend, unprunable outputs). \n> > This seems to make signature lookup and verification reasonably fast: \n> > it took us 10s in the mainnet test we performed (lookup is instant on the testnet, of course).\n> \n> Why don't you use namecoin or another alt-chain for this?\n\nBecause namcoin tries to solve a different problem, DNS, whereas I want\nto establish an identity for a payment protocol. Your incoming payments\nwill land on addresses that are derived (regardless which way) from this\nidenity. This makes your identity as important (securitywise) as\nanything else involved in the bitcoin protocol. Therefore I would not\nwant to have payment-ids rely on anything _less_ than bitcoin's own\nblockchain. In particular not on PKI with centralized root CAs. But also\nnot on namecoin or any other (weaker) alt-chains.\n\nYou can argue that alt-chains _can_ be as strong as bitcoin, but they\ndon't _have to_ be. There is no guarantee how many people will\ncross-mine. The alt-chain could even disappear at some point. If at some\npoint your alt-chain is no longer being worked on, then how do you prove\nthat some old bitcoin transaction went to an address for which there was\na valid id/certificate at the time of sending? If the certificate is\nbased inside bitcoin's blockchain then you will have a proof for the\ncorrect destinations of all your old transactions as long as bitcoin\nexists.\n\nBesides all this, as you mentioned namecoin specifically, that is\noverkill if you just want to link two hashes together. A single 2-of-2\nmultisig output would suffice for that. \n\n> The UTXO set is the most expensive part of the blockchain because it\n> must be stored in memory with fast access times. It's good that you have\n> designed the system so that the addresses can be revoked, removing them\n> from the UTXO set, but it still will encourage the exact same type of\n> ugly squatting behavior we've already seen with first-bits, and again\n> it'll have a significant cost to the network going forward for purposes\n> that do not need to be done on the block chain.\n\nYou are probably right that storing this in the _spent outputs_ would be\nbetter. There doesn't seem to be any type of client out there that would\nbenefit from having to search UTXO only. \n\nTimo"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-02-09T19:01:48",
                "message_text_only": "On Saturday, February 09, 2013 2:33:25 PM Timo Hanke wrote:\n> > Why don't you use namecoin or another alt-chain for this?\n> \n> Because namcoin tries to solve a different problem, DNS, whereas I want\n> to establish an identity for a payment protocol.\n\nWhat is the technical difference here? Namecoin ties names to data; DNS is a \nspecific namespace in it. There is no reason I know of that this identity \nstuff cannot be a new namespace.\n\n> You can argue that alt-chains _can_ be as strong as bitcoin, but they\n> don't _have to_ be. There is no guarantee how many people will\n> cross-mine.\n\nThis is true of namecoin, but it does not have to be true of new merged-mined \ndata. You could very well require the Bitcoin proof-of-work to be valid and \nthe master header to be in the Bitcoin blockchain.\n\n> The alt-chain could even disappear at some point. If at some point your alt-\n> chain is no longer being worked on, then how do you prove that some old\n> bitcoin transaction went to an address for which there was a valid\n> id/certificate at the time of sending? If the certificate is based inside\n> bitcoin's blockchain then you will have a proof for the correct destinations\n> of all your old transactions as long as bitcoin exists.\n\nYes, if people stop using your system, it won't work. Consider that a \"this \nidea failed\" scenario, where it doesn't matter.\n\nLuke"
            },
            {
                "author": "Timo Hanke",
                "date": "2013-02-11T19:12:59",
                "message_text_only": "On Sat, Feb 09, 2013 at 07:01:48PM +0000, Luke-Jr wrote:\n> On Saturday, February 09, 2013 2:33:25 PM Timo Hanke wrote:\n> > namcoin tries to solve a different problem, DNS, whereas I want\n> > to establish an identity for a payment protocol.\n> \n> What is the technical difference here? Namecoin ties names to data; DNS is a \n> specific namespace in it. There is no reason I know of that this identity \n> stuff cannot be a new namespace.\n\nIt's not about technical differences, but about the different use or\npurpose, which can result in different security demands. I argue that\nDNS has a lower demand in this respect than payment ids have. So DNS\ndata can be in a chain with a hashrate lower than bitcoin's hashrate but\npayment ids _for_ bitcoin have to be in a chain with equal hashrate.\n\n> > You can argue that alt-chains _can_ be as strong as bitcoin, but they\n> > don't _have to_ be. There is no guarantee how many people will\n> > cross-mine.\n> \n> This is true of namecoin, but it does not have to be true of new merged-mined \n> data. You could very well require the Bitcoin proof-of-work to be valid and \n> the master header to be in the Bitcoin blockchain.\n\nOk, true. This does the trick. If few miners merge-mine then the new\nchain just becomes slower. But is this still an alt-chain? It is not\nindependently verifiable anymore, like the alt-chains described in the\nwiki are. Instead, you need to refer to the bitcoin's chain to see if\nthe target is correct. Not sure if I got you right on this. But it seems\nto be essentially a more efficient version of what I proposed, rather\nthan a true alt-chain.\n\nI suppose you suggest to place the master header hash into the coinbase.\nA drawback may be that it puts miners at a great advantage over regular\nusers. This could (but doesn't have to) become relevant depending on\nyour counter-measures against excessive alias registration. I think\nPeter addressed this (below). \n\nOn Fri, Feb 08, 2013 at 06:01:08AM -0500, Peter Todd wrote:\n> Finally, why is this implemented within the reference client? Use the\n> raw transaction API and make up your own database. If you want, create a\n> RPC command that allows you to query the UTXO set directly; this would\n> be a useful feature to have. This patch will never be accepted to the\n> reference client, so you'll just wind up having to maintain a fork. Even\n> for a prototype this approach is ill-advised - prototypes have a bad way\n> of turning into production code.\n\nThis was not intended to be a prototype and will certainly not be\nmaintained. It is a demo to be run on the testnet to get a feel of how\nthe user interface (RPC) and the \"work flow\" could look like, starting\nfrom the creation of a certificate all the way to paying to a\ncustomer-derived payment addresses (pay-to-contract) when the merchant's\nbase address is defined in the certificate. There's an appeal to be able\nto issue\n./bitcoind sendtoalias foo deadbeef 10\nand being sure that 10 BTC go, e.g., to a unique P2SH multisig address\nthat is derived for order number 'deadbeef' from the two pubkeys that\nfoo defined in his certificate. And having the certificate verification\nhappen automatically in the background. The demo is in the reference\nclient a) to simulate this feel, b) because it was the fastest way to\ncode it. Apart from that, it could have just as well been separate, and\nan UTXO query-RPC would certainly be nice.  \n\nAnother reason for this demo was the fun of devising a certificate that\ncan handle all this. \n\nBTW, I'm sure that some form of certificate handling will find its way\ndirectly into the reference client. The user will want to trust only one\npiece of software running on one piece of dedicated hardware. \n\nOn Mon, Feb 11, 2013 at 06:21:03AM -0500, Peter Todd wrote:\n> In what way are you not solving the same problem as DNS? I don't mean\n> the Luke-Jr's (quite correct) technical point about key-value maps, I\n> mean the human problem that I have these unique numbers that I can't\n> memorize, and I have some non-unique names that I can.\n> \n> By creating Yet Another Totally Different System you are just creating\n> another way that users can be confused into thinking some name snatched\n> up by some scammers in some little-used PKI system is who they are\n> supposed to be communicating with. Fortunately your PKI system isn't\n> actually used and probably never will be, so it's not a big deal yet,\n> but ultimately you are adding to the problem.\n\nWhat exactly is the problem, the \"little-used\"? Otherwise it's the same\nas it is now, you pick up an interesting domain name on the street, type\nit in, and start communicating with who you think it is, and maybe even\npay them. The EV that centralized PKI offers prevents only some attacks,\nand may even create a false sense of security.\n\n> Go work on namecoin and make it more usable. Then add some PKI to it\n> using the *same* domain names so when I see a PKI certificate for \"foo\"\n> I know it must be the same \"foo\" website I just visited and the same\n> \"foo at foo\" I just emailed.\n\nNo. I outlined above why I think namecoin is unsuitable (but Luke's\nsuggestion for a new alt-chain may be). BTW, if you want to link aliases\nof some \"bitcoin PKI\" and \"domain names\", they should not correspond\nbijectively to each other. The \"bitcoin alias\" corresponds to a payment\nbase address, which I see as a more universal identifier than a domain\nname. First, bitcoin alias foo can have several domains foo.com,\nfoo.co.uk, etc. but still only one \"bitcoin certificate\". This can be\nachieved by either writing the domain names directly into the\ncertificate, or better, by having the \"bitcoin certificate\" sign an SSL\nsub-certificate and tell your browser to ask bitcoind to verify it.\nSecond, a bitcoin alias can be meaningful without any domain names, e.g.\nit can be a certificate for all vending machines of a certain seller,\nwith who you interact directly, say NFC. To summarize, I would either\nnot link bitcoin aliases with domain names, or put SSL certificates\n\"below\" bitcoin certificates in the verification chain.\n\nAlso BTW, it is the beauty of the pay-to-contract principle that\nauthenticated communication is not even required. This means that if you\nknow you have the correct \"bitcoin certificate\" stored with your\nbitcoind and you pay to it, then it doesn't matter if you ordered on a\nwrong or fake website. The worst-case scenario is that you have to call\nin via another channel and re-submit your order, but funds are never\nlost.\n\n> Alt-chains don't have to be based on mining you know. Your proof-of-work\n> can be replaced by proof-of-sacrifice, specifically Bitcoins. \n> [...]\n> 1) https://github.com/petertodd/trustbits/blob/master/fidelitybond.md\n\nYes, I already read your discussing of sacrifice-methods after your\nfirst reply and found it interesting.. The problem I see is to\ndynamically (and automatically) adjust the minimum sacrifice amount. A\nstrict limit on the number of registrations like namecoin has is not\ndesirable. A constant sacrifice, as you mentioned earlier, is also\nundesirable. A good measure could be the average transaction fee taken\nover several blocks. Maybe the minimum sacrifice should be a constant\ntimes that. \n\n> > You are probably right that storing this in the _spent outputs_\n> > would be better [than UTXO]. There doesn't seem to be any type of\n> > client out there that would benefit from having to search UTXO only. \n> \n> The blockchain grows at a maximum rate of 55GiB/year. Do you think your\n> users will all want to have that available just to validate some PKI\n> certificates?\n\nActually yes. They are also willing to do that to verify their payments,\nso why not for the certificate? But true, this was the reason why I\nthought of putting it in the UTXO. To enable some future dedicated\n\"hardware wallet\" to keep only the UTXO and to verify against it. Where\nwould you store you alt-chain block header hashes? UTXO? \n\nBTW, suppose you avoid any squatting (there would certainly be ways to\ndo that). Then with my original proposal of one transaction per\nregistration you would grow the UTXO by O(n), n is the number of users.\nEach user would create a small constant number of aliases. This number\nwill certainly be dwarfed by the number of unspend outputs that each\nuser keeps anyway as a result of their regular transactions. So it would\nnot present a problem for the UTXO. Actually, anything above the dust\nthreshold should not be a problem, or the system is misdesigned.  But of\ncourse the alt-chain header hashes would only take O(1), much better.\n\nTimo"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-02-11T19:21:25",
                "message_text_only": "On Mon, Feb 11, 2013 at 11:12 AM, Timo Hanke <timo.hanke at web.de> wrote:\n> It's not about technical differences, but about the different use or\n> purpose, which can result in different security demands. I argue that\n> DNS has a lower demand in this respect than payment ids have. So DNS\n> data can be in a chain with a hashrate lower than bitcoin's hashrate but\n> payment ids _for_ bitcoin have to be in a chain with equal hashrate.\n\nIt seems you're not very well informed about what namecoin does\u2014 it's\na multiple namespace key-value store. And, as Peter pointed out\u2014 a\nnon-parasitic system can have exactly the same POW hashpower. Namecoin\nchose a model which made it so that namecoin could survive even if\nBitcoin failed, but you don't have to.\n\nI strongly recommend you listen to Peter and Luke\u2014 externalizing the\ncosts of your services onto people who do not care about them is not\ngoing to produce good results for anyone. It's possible to accomplish\nwhat you want to accomplish without taking resources from the users of\nthe Bitcoin currency without their consent\u2014 and you have people here\nwho are willing to help you figure out how."
            },
            {
                "author": "Peter Todd",
                "date": "2013-02-11T11:21:03",
                "message_text_only": "On Sat, Feb 09, 2013 at 03:33:25PM +0100, Timo Hanke wrote:\n> > Why don't you use namecoin or another alt-chain for this?\n> \n> Because namcoin tries to solve a different problem, DNS, whereas I want\n> to establish an identity for a payment protocol. Your incoming payments\n> will land on addresses that are derived (regardless which way) from this\n> idenity. This makes your identity as important (securitywise) as\n> anything else involved in the bitcoin protocol. Therefore I would not\n> want to have payment-ids rely on anything _less_ than bitcoin's own\n> blockchain. In particular not on PKI with centralized root CAs. But also\n> not on namecoin or any other (weaker) alt-chains.\n\nIn what way are you not solving the same problem as DNS? I don't mean\nthe Luke-Jr's (quite correct) technical point about key-value maps, I\nmean the human problem that I have these unique numbers that I can't\nmemorize, and I have some non-unique names that I can.\n\nBy creating Yet Another Totally Different System you are just creating\nanother way that users can be confused into thinking some name snatched\nup by some scammers in some little-used PKI system is who they are\nsupposed to be communicating with. Fortunately your PKI system isn't\nactually used and probably never will be, so it's not a big deal yet,\nbut ultimately you are adding to the problem.\n\nGo work on namecoin and make it more usable. Then add some PKI to it\nusing the *same* domain names so when I see a PKI certificate for \"foo\"\nI know it must be the same \"foo\" website I just visited and the same\n\"foo at foo\" I just emailed.\n\n> You can argue that alt-chains _can_ be as strong as bitcoin, but they\n> don't _have to_ be. There is no guarantee how many people will\n> cross-mine. The alt-chain could even disappear at some point. If at some\n> point your alt-chain is no longer being worked on, then how do you prove\n> that some old bitcoin transaction went to an address for which there was\n> a valid id/certificate at the time of sending? If the certificate is\n> based inside bitcoin's blockchain then you will have a proof for the\n> correct destinations of all your old transactions as long as bitcoin\n> exists.\n\nAlt-chains don't have to be based on mining you know. Your proof-of-work\ncan be replaced by proof-of-sacrifice, specifically Bitcoins. A\nparticularly nice scheme is to use transaction fees and Bitcoin block\nheight. Specifically every block in your alt-chain will have a merkle\npath to a transaction in a Bitcoin block. Of course there can be more\nthan one such block, so you introduce a tie-breaker rule: the\ntransaction with the highest mining fee wins.\n\nThe reason why this is nice is because it becomes really easy to be sure\nthat a better chain won't turn up after the fact - make sure the\ntransaction linking the alt-chain to the Bitcoin block has the highest\nfee in the block. Thus if you want to, say, register a domain name, do\nso in the alt-chain, then \"mine\" the block by creating a suitable\ntransaction. Make sure it's the biggest fee, wait a few confirmations,\nand you're good to go with the same level of security as Bitcoin proper.\n\nBecause the rule is that a merkle *path* exists, multiple alt-chains can\nuse this mechanism at the same time, with the exact same security\nguarantee re: max fees. (note that you're chain needs to store copies of\nthe txin's for the tx sacrificing the fee, transactions by themselves do\nnot prove fees) Multiple parties can also colaborate to create the\ntransaction, each providing, and signing for, an input for their portion\nof the total fee.\n\n\nThere is the problem that miners get to keep the fee, thus they can\ncreate these special proof-of-sacrifice transactions at low cost, and\npotentially make it difficult to get a block mined, or to be sure a\nblock won't be undone later. This problem can be solved with my\n\"two-step sacrifice\" protocol.(1) Essentially you create a transaction\nthat is invalid until some time in the future and sacrifices Bitcoins to\nmining fees, then create a second transaction that includes the first\none as data. You publish the second in the block chain, proving the\nwhole world had an opportunity to mine it. Eventually the first is in\nfact mined, thus sacrificing Bitcoins to a miner you have no control\nover. For a alt-chain you would consider the sacrifice to be a \"balance\"\nand then spend that balance as required in later blocks in a way that is\nguaranteed to be public so you can still check the security guarantee of\nknowing your tx had the max fee. For instance with the contract protocol\nI describe in (1), shave off what ever percentage of the original\nsacrifice, linking the merkle-root of the merkel tree of alt-chains at\nthe same time. Anyone can still monitor the set of all two-step\nsacrifices and associated contract movements and check that their one in\na block was the largest possible. Finally if you want to be nice, modify\nthe contract value rules so only the successful max contract value tx\nhas it's balance decreased.\n\n1) https://github.com/petertodd/trustbits/blob/master/fidelitybond.md\n\nActually, you know gmaxwell, the above would be a great way to run the\nalt-chain I'm probably going to need for the fraud proofs in Trustbits.\nAlthough it does have the minor problem of being ludicrously complex...\n\n> > The UTXO set is the most expensive part of the blockchain because it\n> > must be stored in memory with fast access times. It's good that you have\n> > designed the system so that the addresses can be revoked, removing them\n> > from the UTXO set, but it still will encourage the exact same type of\n> > ugly squatting behavior we've already seen with first-bits, and again\n> > it'll have a significant cost to the network going forward for purposes\n> > that do not need to be done on the block chain.\n> \n> You are probably right that storing this in the _spent outputs_ would be\n> better. There doesn't seem to be any type of client out there that would\n> benefit from having to search UTXO only. \n\nThe blockchain grows at a maximum rate of 55GiB/year. Do you think your\nusers will all want to have that available just to validate some PKI\ncertificates?\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130211/5aef0b59/attachment.sig>"
            },
            {
                "author": "Rick Wesson",
                "date": "2013-02-11T19:39:03",
                "message_text_only": "I prefer to leverage the signing of the (.) root in the DNS tree. The\namount of effort in signing the root holds more weight than building a CA\noff the bitcoin blockchain.\n\nIf you want to associate identifiers for payment addresses I suggest\nputting those in DNSSEC signed records in the DNS.\n\nFor routing around x.509 CAs I suggest participating in the DANE working\ngroup in the IETF.\n\n-rick\n\n\nOn Fri, Feb 8, 2013 at 2:03 AM, Timo Hanke <timo.hanke at web.de> wrote:\n\n> There have been proposals to use the blockchain to establish\n> \"identities\". firstbits is a simple example. I would like to announce a\n> project that extends this idea to turn the blockchain into a \"root CA\"\n> that can sign arbitrary certificates. The purpose is to use these\n> certificates in the payment protocol, where some might consider\n> traditional centralized root CAs unsatisfactory.\n>\n> Code is here: https://github.com/bcpki\n>\n> Technical specification and full-length examples are found in the wiki.\n> I therefore spare myself from repeating the details here, even though,\n> of course, discussion about those details is welcome on this list.\n>\n> Excerpt from README.md follows:\n>\n> First, we have drafted a quite general specification for bitcoin\n> certificates (protobuf messages) that allow for a variety of payment\n> protocols (e.g. static as well as customer-side-generated payment\n> addresses).\n> This part has surely been done elsewhere as well and is orthogonal to the\n> goal of this project.\n> What is new here is the signatures _under_ the certificates.\n>\n> We have patched the bitcoind to handle certificates, submit signatures to\n> the blockchain, verify certificates against the blockchain, pay directly to\n> certificates (with various payment methods), revoke certificates.\n> Signatures in the blockchain are stored entirely in the UTXO set (i.e. the\n> unspend, unprunable outputs).\n> This seems to make signature lookup and verification reasonably fast:\n> it took us 10s in the mainnet test we performed (lookup is instant on the\n> testnet, of course).\n>\n> Payment methods include: static bitcoin addresses, client-side derived\n> payment addresses (pay-to-contract), pay-to-contract with multisig\n> destinations (P2SH)\n>\n> Full-length real-world examples for all payment methods are provided in\n> the tutorial pages.\n> These examples have actually been carried out on testnet3.\n>\n> For further details and specifications see the wiki.\n>\n> timo hanke\n>\n>\n> ------------------------------------------------------------------------------\n> Free Next-Gen Firewall Hardware Offer\n> Buy your Sophos next-gen firewall before the end March 2013\n> and get the hardware for free! Learn more.\n> http://p.sf.net/sfu/sophos-d2d-feb\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130211/079342ad/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Blockchain as root CA for payment protocol",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Rick Wesson",
                "Timo Hanke",
                "Peter Todd",
                "Gregory Maxwell"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 28894
        }
    },
    {
        "title": "[Bitcoin-development] 0.8.0rc1 status",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2013-02-08T23:49:09",
                "message_text_only": "Linux builds of 0.8.0rc1 are in good shape; easily gitian-reproduceable.\n\nWindows builds are varying with every compile, and I think I finally\nfigured out why: we are not passing the -frandom-seed flag down into\nthe leveldb build (I used objdump to dump two different binaries, and\nthey differed only in the names of some leveldb objects). That should\nbe an easy makefile fix.\n\nThe OSX build is in pretty good shape, but needs\nhttps://github.com/bitcoin/bitcoin/pull/2286 to compile.\n\nSo: I think the path forward is to announce 0.8.0rc1 with the binaries\nwe've got, to get more testing.\n\nThen before final release (or rc2, if that is needed) pull #2286 and\ncreate and pull a patch to fix the windows non-determinism problem.\n\nI'm done for today, but should have time to sign the windows setup.exe\nand send out a rc1 announcement tomorrow.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-02-09T01:29:16",
                "message_text_only": "On Friday, February 08, 2013 11:49:09 PM Gavin Andresen wrote:\n> Windows builds are varying with every compile, and I think I finally\n> figured out why: we are not passing the -frandom-seed flag down into\n> the leveldb build (I used objdump to dump two different binaries, and\n> they differed only in the names of some leveldb objects). That should\n> be an easy makefile fix.\n\nFWIW, this should be already mostly-fixed in pull #2243 I submitted 9 days \nago... only thing not in that pull is changing gitian to use the standard \nCXXFLAGS rather than our non-standard DEBUGFLAGS (whether DEBUGFLAGS should be \npropagated to LevelDB or not is another conversation I guess).\n\nLuke"
            },
            {
                "author": "grarpamp",
                "date": "2013-02-09T04:11:22",
                "message_text_only": "> Linux builds of 0.8.0rc1 are in good shape; easily gitian-reproduceable.\n> Windows builds are varying with every compile, and I think I finally\n> The OSX build is in pretty good shape, but needs\n> So: I think the path forward is to announce 0.8.0rc1 with the binaries\n> we've got, to get more testing.\n\nWith this new minor bump, I'd like to encourage the project to perform\na build check on FreeBSD 8.3 (gcc), and 9.1 (should be clang/llvm).\nI'll try to get to 8.x but may not be able to in time."
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-02-09T06:10:34",
                "message_text_only": "On 9 Feb 2013 00:50, \"Gavin Andresen\" <gavinandresen at gmail.com> wrote:\n> Then before final release (or rc2, if that is needed) pull #2286 and\n> create and pull a patch to fix the windows non-determinism problem.\n\n#2243 should fix that, I think.\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130209/8416e7ec/attachment.html>"
            },
            {
                "author": "Robert Backhaus",
                "date": "2013-02-09T07:58:33",
                "message_text_only": "I have done test builds on FreeBSD.\n\nClean builds using gcc and clang, building both the qt gui and the command\nline daemon, and the tests run clean as well. The qt gui runs, and cleanly\nreindexed and caught up. I have no problems to report.\n\nI am not doing any adjustments apart from applying the needed changes to\nthe include directory statements.\n\n\nOn 9 February 2013 16:10, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n\n>\n> On 9 Feb 2013 00:50, \"Gavin Andresen\" <gavinandresen at gmail.com> wrote:\n> > Then before final release (or rc2, if that is needed) pull #2286 and\n> > create and pull a patch to fix the windows non-determinism problem.\n>\n> #2243 should fix that, I think.\n>\n> --\n> Pieter\n>\n>\n> ------------------------------------------------------------------------------\n> Free Next-Gen Firewall Hardware Offer\n> Buy your Sophos next-gen firewall before the end March 2013\n> and get the hardware for free! Learn more.\n> http://p.sf.net/sfu/sophos-d2d-feb\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130209/bd8aa490/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "0.8.0rc1 status",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Robert Backhaus",
                "Gavin Andresen",
                "Pieter Wuille",
                "grarpamp"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 3836
        }
    },
    {
        "title": "[Bitcoin-development] Version 0.8.0rc1 ready for testing",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2013-02-09T15:50:34",
                "message_text_only": "Bitcoin version 0.8.0 release candidate 1 is now available from:\n  http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.0/test\n\nThis is a major release designed to improve performance and handle the\nincreasing volume of transactions on the network.\n\nPlease report bugs using the issue tracker at github:\n  https://github.com/bitcoin/bitcoin/issues\n\nRelease-candidate 1 notes:\n\nThe OSX binary reports its version as \"0.8.0rc1-1-gba1d080-beta\" due to\nissue https://github.com/bitcoin/bitcoin/issues/2285 . This will be fixed\nbefore the final 0.8.0 release.\n\nThe Windows binaries could not be reproducibly built, due to issue\nhttps://github.com/bitcoin/bitcoin/issues/2288 . This will also be fixed\nbefore the final 0.8.0 release.\n\n\n\nHow to Upgrade\n--------------\n\nIf you are running an older version, shut it down. Wait\nuntil it has completely shut down (which might take a few minutes for older\nversions), then run the installer (on Windows) or just copy over\n/Applications/Bitcoin-Qt (on Mac) or bitcoin-qt (on Linux).\n\nThe first time you run after the upgrade a re-indexing process will be\nstarted that will take anywhere from 30 minutes to several hours,\ndepending on the speed of your machine. If you have enough\nmemory, running with the -dbcache setting (e.g. -dbcache=1000 )\nmay make re-indexing faster.\n\nSpecial notes for release candidate 1:\n--------------------------------------\n\nIf you helped test pre-release versions, there are two changes that you\nshould be aware of:\n\n1. Subdirectories in the data directory changed names; to avoid re-indexing\nthe blockchain, rename:\n  mv $DATADIR/blktree $DATADIR/blocks/index\n  mv $DATADIR/coins $DATADIR/chainstate\n\n2. The \"undo file\" format changed; if you see errors at startup during block\nvalidation re-run with the -reindex flag to fix them.\n\nIncompatible Changes\n--------------------\n\nThis release no longer maintains a full index of historical transaction ids\nby default, so looking up an arbitrary transaction using the getrawtransaction\nRPC call will not work. If you need that functionality, you must run once\nwith -txindex=1 -reindex=1 to rebuild block-chain indices (see below for more\ndetails).\n\nImprovements\n------------\n\nMac and Windows binaries are signed with certificates owned by the Bitcoin\nFoundation, to be compatible with the new security features in OSX 10.8 and\nWindows 8.\n\nLevelDB, a fast, open-source, non-relational database from Google, is\nnow used to store transaction and block indices.  LevelDB works much better\non machines with slow I/O and is faster in general. Berkeley DB is now only\nused for the wallet.dat file (public and private wallet keys and transactions\nrelevant to you).\n\nPieter Wuille implemented many optimizations to the way transactions are\nverified, so a running, synchronized node uses much less memory and does\nmuch less I/O. He also implemented parallel signature checking, so if you\nhave a multi-CPU machine all CPUs will be used to verify transactions.\n\nNew Features\n------------\n\n\"Bloom filter\" support in the network protocol for sending only\nrelevant transactions to\nlightweight clients.\n\ncontrib/verifysfbinaries is a shell-script to verify that the binary downloads\nat sourceforge have not been tampered with. If you are able, you can help make\neverybody's downloads more secure by running this occasionally to check PGP\nsignatures against download file checksums.\n\ncontrib/spendfrom is a python-language command-line utility that demonstrates\nhow to use the \"raw transactions\" JSON-RPC api to send coins received\nfrom particular\naddresses (also known as \"coin control\").\n\nNew/changed settings (command-line or bitcoin.conf file)\n--------------------------------------------------------\n\ndbcache : now controls LevelDB memory usage. Running with (for\nexample) -dbcache=1000\nwill use a gigabyte of memory and might make the initial blockchain\ndownload faster.\n\npar : controls how many threads to use to validate transactions.\nDefaults to the number\nof CPUs on your machine, use -par=1 to limit to a single CPU.\n\ntxindex : maintains an extra index of old, spent transaction ids so\nthey will be found\nby the getrawtransaction JSON-RPC method.\n\nreindex : rebuild block and transaction indices from the downloaded block data.\n\nNew JSON-RPC API Features\n-------------------------\n\nlockunspent / listlockunspent allow locking transaction outputs for a\nperiod of time so\nthey will not be spent by other processes that might be accessing the\nsame wallet.\n\naddnode / getaddednodeinfo methods, to connect to specific peers\nwithout restarting.\n\nimportprivkey now takes an optional boolean parameter (default true)\nto control whether\nor not to rescan the blockchain for transactions after importing a new\nprivate key.\n\nImportant Bug Fixes\n-------------------\n\nPrivacy leak: the position of the \"change\" output in most transactions\nwas not being\nproperly randomized, making network analysis of the transaction graph\nto identify\nusers' wallets easier.\n\nZero-confirmation transaction vulnerability: accepting\nzero-confirmation transactions\n(transactions that have not yet been included in a block) from\nsomebody you do not\ntrust is still not recommended, because there will always be ways for\nattackers to\ndouble-spend zero-confirmation transactions. However, this release\nincludes a bug\nfix that makes it a little bit more difficult for attackers to double-spend a\ncertain type (\"lockTime in the future\") of zero-confirmation transaction.\n\nDependency Changes\n------------------\n\nQt 4.8.3 (compiling against older versions of Qt 4 should continue to work)\n\n\nThanks to everybody who contributed to this release:\n----------------------------------------------------\n\nAlexander Kjeldaas\nAndrey Alekseenko\nArnav Singh\nChristian von Roques\nEric Lombrozo\nForrest Voight\nGavin Andresen\nGregory Maxwell\nJeff Garzik\nLuke Dashjr\nMatt Corallo\nMike Cassano\nMike Hearn\nPeter Todd\nPhilip Kaufmann\nPieter Wuille\nRichard Schwab\nRobert Backhaus\nRune K. Svendsen\nSanjay Ghemawat\nSergio Demian Lerner\nWladimir J. van der Laan\nburger2\ndefault\nfanquake\ngrimd34th\njustmoon\nredshark1802\ntucenaber\nxanatos"
            }
        ],
        "thread_summary": {
            "title": "Version 0.8.0rc1 ready for testing",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 6090
        }
    },
    {
        "title": "[Bitcoin-development] Incorporating block validation rule modifications into the block chain",
        "thread_messages": [
            {
                "author": "Raph Frank",
                "date": "2013-02-12T13:49:56",
                "message_text_only": "Has this been considered?\n\nIf made sufficiently general, older clients could support any\nextension of the rules.\n\nVarious \"hard\" parameters within the protocol are defined in main.h of\nthe official client.\n\nIn BIP-34, there is a suggested way to make changes, based on consensus.\nhttps://en.bitcoin.it/wiki/BIP_0034\n\nThese could be made into a rule for changing the parameters directly.\n\nThe process for updating could be handled by adding a new field to the\ncoinbase transaction, in the same way the height was added in BIP-34.\n\nSomething like\n- miner proposed a change by by including proposal in a block (name of\nparameter and new value)\n- seconded by at least 6 of the next 10 blocks (proposal dies otherwise)\n- active if 750 of the last 1000 blocks voted yes, or 950 of any\nsuccessive 1000 previous blocks voted yes (with reduced thresholds on\ntestnet)\n- dies if more than 500 of the previous 1000 voted No\n- blocks which don't reference the proposal are considered to abstain\n\nThis could also be used to update NOPs.  Complex signing algorithms\ncould be incorporated.  However, that would require a more complex\nscripting language for defining opcode functions.  The proposal would\nhave opcode number + script description of algorithm.  This would also\nallow methods <method name> + <script code>.  Once of the NOPs could\nbe \"call method\".\n\nThe rule would require that the script is valid under the current\nrules (NOPs as nops) and under the latest rules.  This prevents\nneeding to try all possible permutations.  However, it reduces\nsecurity.\n\nAn compromise would be to have each new opcode change could as a\nversion and scripts must be valid under all versions in the chain, so\nfar.\n\nOnce an op-code is accepted, new clients implementations would\nprobably create dedicated functions for performing the calculation.\nOlder clients would have to perform the calculations using the\nscripting language."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-02-12T15:49:43",
                "message_text_only": "On Tue, Feb 12, 2013 at 5:49 AM, Raph Frank <raphfrk at gmail.com> wrote:\n> Has this been considered?\n>\n> If made sufficiently general, older clients could support any\n> extension of the rules.\n>\n> Various \"hard\" parameters within the protocol are defined in main.h of\n> the official client.\n>\n> In BIP-34, there is a suggested way to make changes, based on consensus.\n> https://en.bitcoin.it/wiki/BIP_0034\n\nYou misunderstand what BIP_0034 is doing\u2014 it's not gauging consensus,\nit's making sure that the change is safe to enforce. This is a subtle\nbut important difference.  The mechanism happens to be the same, but\nwe're not asking for anyone's approval there\u2014 the change is needed to\nmake Bitcoin as secure as people previously believed it to be, there\nhave been no serious alternatives tendered. As far as I can tell the\nproposal has always had universal agreement from anyone who's thought\nabout it.  The only open question was if it was safe to deploy, and\nthats what that process solves.\n\nBitcoin is not a democracy\u2014 it quite intentionally uses the consensus\nmechanism _only_ the one thing that nodes can not autonomously and\ninterdependently validate (the ordering of transactions). This\nprotects the users of Bitcoin by making most of the system largely\nnonvolatile \"constitutional\" rules instead of being controlled by\npopular whim where 'two wolves may vote to have the one sheep for\ndinner'. If it were possible to run the whole thing autonomously it\nwould be, but alas...\n\nEven if you accept the premise that voting is a just way of making\ndecisions (it isn't; it's just often the least unjust when something\nmust be done), mining is not a particularly just way of voting:\n'Hashpower isn't people', and currently the authority to control the\nmajority of the hashpower is vested in a only a half dozen people.\nMoreover, the incentives to abuse hashpower are sharply curtailed by\nits limited authority (all one can do with it is reorder\ntransactions... which is powerful but still finite) and allowing\narbitrary rule changes would vastly increase that power.\n\nThere are some more subtle issues\u2014 if the acceptance of chain B\ndepends on if you've seen orthogonal chains A or A' first then there\ncan be a carefully timed announcement of A and A' which forever\nprevents global convergence (thanks to a finite speed of light an\nattacker can make sure some nodes see A first, some A').  If a rule\nchange can be reorged out, then it's not really a rule\u2014 any actual\nrule prohibits otherwise valid blocks that violate it (and without\nthis distinction you might as well implement the 'rule' as miner\npreferences). Additionally there is the very hard software engineering\nQA problem for a sufficiently complex rule language\u2014 script isn't\nturing complete and look at all the issues it has had.\n\nIn summary\u2014 this sort of thing, which has come up before, is\ntechnically interesting and fun to think about but it would make for\nsubstantial engineering challenges and would not be obviously\ncompatible with the economic motivations which make Bitcoin secure nor\nwould it be morally compatible with the social contract embedded in\nthe system today."
            },
            {
                "author": "Raph Frank",
                "date": "2013-02-13T14:58:09",
                "message_text_only": "On Tue, Feb 12, 2013 at 3:49 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> You misunderstand what BIP_0034 is doing\u2014 it's not gauging consensus,\n> it's making sure that the change is safe to enforce. This is a subtle\n> but important difference.\n\nSounds reasonable.\n\nThe change in BIP-34 doesn't cause old client to reject the main chain.\n\nThe increase to the maximum block size would be rejected by old\nclients, so is different.\n\nAdding new opcodes (as long as they act like a NOP on success) also\ndoesn't cause a disagreement about what is the longest chain, in the\nend.  Miners might end up mining chains which are guaranteed to be\norphaned at worst.\n\n> Bitcoin is not a democracy\u2014 it quite intentionally uses the consensus\n> mechanism _only_ the one thing that nodes can not autonomously and\n> interdependently validate (the ordering of transactions).\n\nSo, how is max block size to be decided then?"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-02-13T15:42:07",
                "message_text_only": "On Wed, Feb 13, 2013 at 6:58 AM, Raph Frank <raphfrk at gmail.com> wrote:\n>> Bitcoin is not a democracy\u2014 it quite intentionally uses the consensus\n>> mechanism _only_ the one thing that nodes can not autonomously and\n>> interdependently validate (the ordering of transactions).\n> So, how is max block size to be decided then?\n\nIn one sense it already is decided\u2014 there is a protocol rule\nimplementing a hard maximum, and soft rules for lower targets.  If\nit's to be changed it would only be by it being obvious to almost\neveryone that it should _and_ must be.  Since, in the long run,\nBitcoin can't meet its security and decenteralization promises without\nblockspace scarcity to drive non-trivial fees and without scaling\nlimits to keep it decenteralized\u2014 it's not a change that could be made\nmore lightly than changing the supply of coin.\n\nI hope that should it become necessary to do so that correct path will\nbe obvious to everyone, otherwise there is a grave risk of undermining\nthe justification for the confidence in the immutability of any of the\nrules of the system."
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-02-13T21:02:16",
                "message_text_only": "On Wed, Feb 13, 2013 at 10:42 AM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n\n>  Since, in the long run,\n> Bitcoin can't meet its security and decenteralization promises without\n> blockspace scarcity to drive non-trivial fees and without scaling\n> limits to keep it decenteralized\u2014 it's not a change that could be made\n> more lightly than changing the supply of coin.\n>\n\nI disagree with Gregory on this.  I believe that Bitcoin CAN meet its\nsecurity and decentralization promises without any hard limit on block\nsize.\n\nI had a fruitful discussion about this with an economist friend this\nweekend, and I'll eventually getting around to writing up why I believe\nraising the block size limit will not be a problem.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130213/d0f63490/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-02-13T21:05:27",
                "message_text_only": "On Wed, Feb 13, 2013 at 1:02 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> On Wed, Feb 13, 2013 at 10:42 AM, Gregory Maxwell <gmaxwell at gmail.com>\n> wrote:\n>>  Since, in the long run,\n>> Bitcoin can't meet its security and decenteralization promises without\n>> blockspace scarcity to drive non-trivial fees and without scaling\n>> limits to keep it decenteralized\u2014 it's not a change that could be made\n>> more lightly than changing the supply of coin.\n> I disagree with Gregory on this.  I believe that Bitcoin CAN meet its\n> security and decentralization promises without any hard limit on block size.\n>\n> I had a fruitful discussion about this with an economist friend this\n> weekend, and I'll eventually getting around to writing up why I believe\n> raising the block size limit will not be a problem.\n\nThat would be fantastic."
            },
            {
                "author": "Stephen Pair",
                "date": "2013-02-13T23:10:21",
                "message_text_only": "On Wed, Feb 13, 2013 at 4:02 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> On Wed, Feb 13, 2013 at 10:42 AM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n>\n>>  Since, in the long run,\n>> Bitcoin can't meet its security and decenteralization promises without\n>> blockspace scarcity to drive non-trivial fees and without scaling\n>> limits to keep it decenteralized\u2014 it's not a change that could be made\n>> more lightly than changing the supply of coin.\n>>\n>\n> I disagree with Gregory on this.  I believe that Bitcoin CAN meet its\n> security and decentralization promises without any hard limit on block\n> size.\n>\n> I had a fruitful discussion about this with an economist friend this\n> weekend, and I'll eventually getting around to writing up why I believe\n> raising the block size limit will not be a problem.\n\n\nIf you've already validated the majority of transactions in a block, isn't\nvalidating the block not all that compute intensive?  Thus, it's really not\nblocks that should be used to impose any sort of scarcity, but rather it's\nthe costs associated with the validation and propagation of the\ntransactions themselves...which is the way it should be.\n\nWhen I think about issues like this, I like to remind myself that the mesh\nnetwork isn't really an essential part of Bitcoin.  It is a way to\ndisseminate transactions and blocks, but it's by no means the only possible\nway and could certainly be improved in various ways.  Nodes can at some\npoint start to charge fees to collect and distribute transactions and\nblocks.  Collectives of such nodes could pool together fees to ensure\nconnected nodes can propagate and hear about transactions and blocks.\n These nodes would charge based on the bandwidth and the work required to\nvalidate transactions.  They would also charge for the propagation of\nblocks based on the work required to validate them.  Miners would of course\nhave a lot of incentive to pay for such services since they will want to\nget access to as many fee bearing transactions as possible (and filter out\nthe transactions they don't want to include in blocks).  They will also\nwant the blocks to ensure they're always building on the latest valid\nblock.  That in turn would give these relay nodes a window into the fees\nneeded to ensure fast inclusion into the block chain (something that\nwallets could use to automatically set fees on transactions).\n\nNote, I think the bitcoin protocol might actually be ideally suited for\nthis type of thing...nodes would broadcast INV messages all day long, but\nas soon as one of your peers wants the actual transaction or block, well,\nthen you have to pay up.  Two relay nodes sending transactions between each\nother would pay each other when they have to download the transaction\nbody...if they trade roughly equal amounts of transactions, they wouldn't\nend up owing each other anything...for a given transaction they would pull\nthe data exactly, but would then turn around and provide that transaction\nto many connected peers, earning a fee for each delivery.\n\nP.S. such a fee structure would address the spam issue with economics\nrather than rules about spammy transactions\n\nP.P.S. micropayment channels could be used as the payment method for nodes\nthat validate and relay transactions...this would actually be a very good\nfirst use of that technology (people have talked about micropayment\nchannels for renting bandwidth...why not use them to pay for the bandwidth\nand CPU needed to validate and relay transactions)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130213/a4103e2a/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-02-14T01:02:39",
                "message_text_only": "On Wed, Feb 13, 2013 at 7:42 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> I hope that should it become necessary to do so that correct path will\n> be obvious to everyone, otherwise there is a grave risk of undermining\n> the justification for the confidence in the immutability of any of the\n> rules of the system.\n\nWith all I wrote on the gloom side\u2014 I thought I should elaborate how I\nthink that would work, assuming that my gloom isn't convincingly\ndisproven.\n\nIt's the year 2043\u2014 the Y2038 problem is behind us and everyone is\nbeginning to forget how terrible it turned out to be\u2014  By some amazing\nchance Bitcoin still exists and is widely used.  Off-chain system like\nfidelity bonded banks are vibrant and widely used providing scalable\ninstant and completely private transactions to millions of people.\n\nSomeone posts to the infrequently used IETF Bitcoin working group with\na new draft\u2014 It points out that the transaction load is high enough\nthat even with a 100x increase in block size completion for fees would\nhardly be impacted and that\u2014 because computers are 2^20 times faster\nper unit cost than they were in 2013\u2014 and networks had made similar\ngains, so even a common wristwatch (the personal computer embedded in\neveryone's wrist at birth) could easily keep up with 100 megabyte\nblocks.... so the size should be increased as of block 2,047,500.\n\nThe only objections are filed by some bearded hippy at the museum of\ninternet trolling (their authentic reconstruction of Diablo-D3's\ndesktop exhibit couldn't keep up), and by some dictatorship who again\ninsists that their communist PeoplesCoin should be used instead\u2014 the\nusual suspects.  And so, after a couple years of upgrades, it is so.\n\nOr perhaps more likely\u2014 it would get revised along side a hardforking\ncryptosystem upgrade (e.g. replacing sha256 in the hash trees with\nSHA-4-512), thus amortizing out all the migration costs...\n\nThe trickiness and risk of changing it\u2014 of economic problems, of the\nrisk of undermining trust in the immutability of the system's rules\u2014\nonly exists if there is genuine, considered, and honest controversy\nabout the parameters.  At the moment any increase would be sure to be\ncontroversial: common hardware and networks would not obviously keep\nup with our current maximum size, and our current transaction load\ndoesn't produce a usable fees market.  This cannot remain true\nforever."
            },
            {
                "author": "Peter Todd",
                "date": "2013-02-14T06:39:01",
                "message_text_only": "On Wed, Feb 13, 2013 at 05:02:39PM -0800, Gregory Maxwell wrote:\n> It's the year 2043\u2014 the Y2038 problem is behind us and everyone is\n> beginning to forget how terrible it turned out to be\u2014  By some amazing\n> chance Bitcoin still exists and is widely used.  Off-chain system like\n> fidelity bonded banks are vibrant and widely used providing scalable\n> instant and completely private transactions to millions of people.\n\nSpeaking of fidelity bonded banks I think it needs to be made clear that\nreally trustworthy bonded banks require the maximum block size to be\nkept limited. The problem is that even if you don't create any\ntransactions on the chain yourself, you still need to be able to keep\nwatch the chain to keep track of what the bank is doing. For instance if\nyou are trying to decide if you can trust the bank with a 1BTC deposit,\nand they've purchased a 1000BTC fidelity bond, you still need to be able\nto determine if all the unspent transaction outputs in the blockchain\nthat the bank could spend, in addition to all the unspen transactions in\nthe mempool, are less than the value of their fidelity bond. With 1MiB\nblocks that will be practical on smartphones with wireless internet\nconnectivity without having to trust anyone else. With 1GiB blocks that\njust won't be true and you'll be forced to trust the relatively few\nnodes out there with the hardware to deal with the blockchain. You'll\npay for it too.\n\nPotentially the various UTXO proposals will help, but they will need to\nbe quite sophisticated; we'll need sums of all txout values by\nscriptPubKey and a fraud notice system for instance. All of this stuff\nis at best many months away from even beginning to be deployed on the\nnetwork, and probably years away from getting to the point where it is\ntruely trustworthy. Maybe it'll never become trustworthy, either because\nminers just don't bother, the code doesn't get written, or a flaw in the\nwhole idea is found. We're just not going to know until these\ntechnologies are implemented and tested, and without them, large blocks\nforce us into trusting miners blindly and make many valuable\napplications impossible.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130214/7245af95/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-02-14T00:28:41",
                "message_text_only": "On Wed, Feb 13, 2013 at 3:10 PM, Stephen Pair <stephen at bitpay.com> wrote:\n> If you've already validated the majority of transactions in a block, isn't validating the block not all that compute intensive?  Thus, it's really not blocks that should be used to impose any sort of scarcity, but rather it's the costs associated with the validation and propagation of the transactions themselves...which is the way it should be.\n\nThe cost to whom?  This is important because the cost of validating\nblocks is borne by all the participants in Bitcoin\u2014 or at least all\nthe participants who haven't given up on the decenteralized trustless\nstuff and are simply trusting someone else.   Even a small cost\nbecomes large when hundreds of thousands.\n\nAnd perhaps you don't lament people delegating their trust to large\nentities\u2014 but keep in mind: Bitcoin was created for the express\npurpose of creating a money system which didn't require trust because\nit was based on cryptographic proof\u2014 mathematical law\u2014 instead of\npolitics and human law.  Take that away and you have a really poorly\nunderstood inefficient system operated by entities which are less\ntrustworthy and rightfully entitled to authority than the ones\noperating the established major currencies.\n\n> When I think about issues like this, I like to remind myself that the mesh network isn't really an essential part of Bitcoin.\n\nThats absolutely true\u2014 but I don't know that it's relevant in this case.\n\n> Nodes can at some point start to charge fees to collect and distribute transactions and blocks.\n\nThey can\u2014 but doing so would radically undermine Bitcoin.\n\nA refresher:\n\nIf you combine digital signatures with simple transaction rules you\ncan have a purely autonomous monetary system based entirely on math.\nIt would be perfect, anonymous, scalable ...  except for the problem\nof double spending.  To solve double spending the participants must\nagree on which of a set of duplicated payments is one the\nauthoritative one. Coming to this agreement is fundamentally hard just\nat the basics of physics\u2014 a result of relativity is that observers\nwill perceive events in different orders depending on the observer's\nand the events relative locations. If no observer is privileged (a\ndecenteralized system) you have to have a way of reaching a consensus.\n\nThis kind of efficient consensus we need\u2014 which which participants can\njoin or enter at any time, which doesn't require exponential\ncommunication, and which is robust against sock-puppet participants\u2014\nwas long believed to be practically impossible.  Bitcoin solved the\nproblem by using hashcash to vote\u2014 because real resources were forever\nexpended in the process the sock-puppet problem is solved.  But the\nvote only works if everyone can see the results of it: We assume that\nthe majority of hashpower isn't a dishonest party, and that honest\nnodes can't be prevented from hearing the honest history. Nodes choose\nthen rules-valid history that has the most work (votes) expended on\nit... but they can only choose among what they know of.  As Satoshi,\nwrote: \"[Bitcoin] takes advantage of the nature of information being\neasy to spread but hard to stifle\".\n\nThe requirement for everyone to hear the history doesn't get talked\nabout much\u2014 at least with reasonably sized blocks and today's\ntechnical and common political climates the assumption that\ninformation is easy to spread but hard to stifle is a very sound one.\nIt's a good thing, because this assumption is even more important than\nthe hash-power honesty assumption (a malicious party with a simple\nmajority of hashpower is much weaker than one who can partition the\nnetwork).  ... but that all goes out the window if communicating\nblocks is costly enough that the only way to sustain it is to\njealously guard and charge for access/forwarding.\n\nThe consequence of such a change is that the Bitcoin consensus\nalgorithm would be handicapped. How long must you wait before you know\nthat the history you have won't get replaced by a more authoritative\none?  Today an hour or two seems relatively solid.  In a world with\nnon-uniform block forwarding perhaps it takes days\u2014 if ever\u2014 before\nany participant is confident that there isn't a better history\nlurking.\n\nAll doubly so if the bookkeeping required for this payment ends up\nnecessitating additional transactions and adds to the load.\n\n[This is also the flaw in the 'Red Balloons' paper, making\ntransactions a dozen times longer just to attach credit for forwarding\ndoesn't seem wise compared to keep transactions so cheap to transmit\nthat even a small number of altruists make the equilibrium state be\nliberally-forwarding]\n\n> They would also charge for the propagation of blocks based on the work required to validate them.\n\nLarge miners would obviously locate and connect to each other. Even\nenormous blocks are no problems for big industrial players.\n\nDon't want to pay the cost to get their big blocks from them?  Your\nloss:  If you don't take their blocks and they constitute the longest\nhistory, you'll be believing the wrong history until such a time as\nyou wise up and pay the piper.  Your transactions will be reversed and\nyou'll lose money.\n\nYou can hypothesize some cartel behavior external to the rules of the\nsystem\u2014 where by some consensus mechanism (????) some super large mass\nof participants agree to reject blocks according 'extrajudicial\nrules', some rule existing outside of Bitcoin itself\u2014 but there must\nbe a consensus because rejecting blocks by yourself only gets you\nripped off.\n\nI don't see how this works\u2014 it basically embeds another hard consensus\nproblem (what is the criteria for blocks to be valid?) inside our\nsolution to a hard consensus problem (which are the best valid\nblocks?),  but doesn't benefit from the same incentive structure\u2014\nlocally-greedy miners obviously want to produce the largest blocks\npossible\u2014 and in hashpower consensus non-miners don't have a voice.\nThat might be acceptable for ordering, but now you're deciding on the\nrules of the system which all non-trusting participants must validate.\n\nYou could instead solve that consensus problem with politically\nstipulated regulation or industry cartels, or good old-fashion kneecap\nbusting or whathave you. But then Bitcoin loses the transparency and\ndeterminism that make it worthwhile.\n\nI sure hope to hear something better than that.\n\nThis is basically the gap:   Right now I could afford hardware that\ncould process multiple gigabyte blocks\u2014 maybe it only costs as much as\na small house which is not an insane cost for a large business. But\nthe cost would be decidedly non-negligible and it would be rational\nfor me to let someone else take it. Applied to everyone, you end up\nwith a small number of the most vested parties doing all the\nvalidation, and so they have full ability to manipulate like today's\ncentral banks.\n\nFor a great many to perform validation\u2014 keeping the system honest and\ndecentralized as it was envisioned\u2014 without worrying about the cost\nrequires that the cost be almost unnoticeable. A tiny fraction of what\nsome industrial player\u2014 who profit from consolidation and\nmanipulation\u2014 could easily handle.  I'm skeptical about the system\ninternally self-regulating the size because of what gets called\n\"evaporative cooling\" in social sciences\u2014 the cost goes up, some\npeople cross their \"hey, I'm better off if I externalize the cost of\nkeeping Bitcoin secure by not participating\" boundary and lose their\nvoice.\n\nThere is probably some equilibrium where Bitcoin is compromised\nfrequently enough that more validators spin up (and ignore past rule\nviolations which can't be undone without economic Armageddon), and eat\nthe costs even though there is an insane amount of freeloading going\non.  The trustworthiness of today's monetary systems suggests to me\nthat if there is an equilibrium point here it isn't a very trustworthy\none.  There is an even stronger equilibrium state available too: don't\nuse Bitcoin at at all.  If you want a system which is dominated by\npolitical whim and expedience and large industrial players and is, as\na result, only somewhat trustworthy you can just use government issued\ncurrencies\u2014 they're well established and have a lot less overhead than\nthis decentralized stuff.\n\n(And generally\u2014 Security makes for a terrible market, security is\nnaturally a lemon market. The need is only clear in hindsight. In our\ncase it would be one with an enormous freeloading problem)\n\n> P.S. such a fee structure would address the spam issue with economics rather than rules about spammy transactions\n\nOur current anti-spam one is primarily an economic one\u2014 transactions\nprioritized based on fee per KB in scarce blocks or priority (another\nscarce commodity), the only really non-very-economic part is the\nvery-small-output heuristic.  I would argue that our economic\nanti-spam mechanisms are currently failing at their job:  Various\nparties are engaging in transaction patterns with near pessimal\nefficiency\u2014 using a dozen (\u2014 sometimes thousands) of transactions\nwhere one or two would be adequate. This isn't limited to just one or\ntwo sites\u2014 many parties are using inefficient transaction patterns\u2014\ncreating externalized costs on all future Bitcoin users\u2014, simply\nbecause there is hardly any incentive not to.\n\nThough much discussion among technical people, no one has come up with\nany reparametrizations that seem likely to achieve the desired\nincentive alignment in the near term.  Of all the elements of the\nanti-spam policy, it seems to me that the least economic\u2014 the minimum\noutput size\u2014 is actually the most effective (most spam suppression\nrelative to efficient usage suppression), especially as we move to\nfocusing on the UTXO set size. (The minimum output value requirement\ndiscourages the creation of UTXOs which will never be economically\nrational to redeem)."
            },
            {
                "author": "Stephen Pair",
                "date": "2013-02-14T02:44:11",
                "message_text_only": "On Wed, Feb 13, 2013 at 7:28 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> <bunch of stuff>\n>\n\nI understand your arguments, but don't agree with many of your conclusions.\n\nThe requirement for everyone to hear the history doesn't get talked\n> about much\n\n\nOne of the beauties of bitcoin is that the miners have a very strong\nincentive to distribute as widely and as quickly as possible the blocks\nthey find...they also have a very strong incentive to hear about the blocks\nthat others find.  There will not be an issue with blocks being \"jealously\nguarded\"...what miners will want is a good feed of transactions that they\nwant to mine.  They will be willing to pay for those feeds (either by\nsharing the proceeds with highly connected \"relay\" nodes or by operating\nhighly connected nodes themselves).  Because miners will only want to pay\nto get a feed of profitable transactions, they will not pay to receive\ntransactions whose miner fee does not cover the \"relay\" fee (by which I\nmean the fee or cost associated with the bandwidth and validation that a\ntransaction requires) with some amount of profit.  This means that the\nrelay node will not fetch and propagate those transactions whose fee is too\nsmall (unless there was some other fee structure outside the miners fee).\n\nThese are relatively easy businesses to operate...which means there will be\na lot of them and they'll compete on fees (with wallets automatically\ndiscovering the cheapest of the services).  If the businesses of relaying\nand mining ever became too centralized, other businesses with a vested\ninterest in the success of bitcoin would take the necessary steps to ensure\nthere remained adequate decentralization.\n\nIt's important to remember that the centralization that currently exists in\nthe fiat currency world benefits one set of businesses to the detriment of\nmany others.  Having a functioning and trustworthy payment system benefits\nfar more people and businesses than a centralized system would.\n\nIt is good to be wary of these potential issues, but I don't see how the\neconomics are likely to yield the outcome you fear.  And, really, there's\nnot a lot that can be done to prevent economics from dictating the ultimate\noutcome.  In fact, what I write above is not so much about what I think\n*should* be built, it's more about what I *predict* will be built.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130213/d63cb57c/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-02-14T03:38:31",
                "message_text_only": "On Wed, Feb 13, 2013 at 6:44 PM, Stephen Pair <stephen at bitpay.com> wrote:\n> One of the beauties of bitcoin is that the miners have a very strong incentive to distribute as widely and as quickly as possible the blocks they find...they also have a very strong incentive to hear about the blocks that others find.  There will not be an issue with blocks being \"jealously guarded\"\n\nThen perhaps I totally misunderstood what you were suggesting.  I\nbelieved you were saying blocksize would be controlled by people\nhaving to pay to receive and pay to have blocks forwarded.\n\n>(by which I mean the fee or cost associated with the bandwidth and validation that a transaction requires) with some amount of profit.  This means that the relay node will not fetch and propagate those transactions whose fee is too small (unless there was some other fee structure outside the miners fee).\n\nThe only fee-or-cost they're worrying about is their own marginal\ncosts.  This says nothing about the externalized cost of the hundreds\nof thousands of other nodes which also must validate the block they\nproduce, many of which are not miners\u2014 if we are well distributed\u2014 and\nthus don't have any way to monetize fees.  And even if they are all\nminers for some reason,  if these fees are paying the ever growing\nvalidation/storage costs what expenditure is left for the proof of\nwork that makes Bitcoin resistant to reversal?\n\nIf the cost is soaked up by validation/forwarding then the capacity to\nrun a validating node ends up being the barrier to entry and\ndifficulty would be very low... which sounds fine until you realize\nthat an attacker doesn't have validation costs, and that selfish\n(\"optimally rational\") miners could just eschew validation (who cares\nif you lose some blocks to invalidity if you're producing them so much\ncheaper than the honest players?).\n\n> It is good to be wary of these potential issues, but I don't see how the economics are likely to yield the outcome you fear.  And, really, there's not a lot that can be done to prevent economics from dictating the ultimate outcome.  In fact, what I write above is not so much about what I think *should* be built, it's more about what I *predict* will be built.\n\nWhat I want is for economics to dictate a positive outcome. They can\ndo this how the system is currently constructed where the economics of\nusing the system are clearly aligned with securing it."
            },
            {
                "author": "Stephen Pair",
                "date": "2013-02-14T05:36:09",
                "message_text_only": "On Wed, Feb 13, 2013 at 10:38 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n\n> On Wed, Feb 13, 2013 at 6:44 PM, Stephen Pair <stephen at bitpay.com> wrote:\n>  >(by which I mean the fee or cost associated with the bandwidth and\n> validation that a transaction requires) with some amount of profit.  This\n> means that the relay node will not fetch and propagate those transactions\n> whose fee is too small (unless there was some other fee structure outside\n> the miners fee).\n>\n> The only fee-or-cost they're worrying about is their own marginal\n> costs.  This says nothing about the externalized cost of the hundreds\n> of thousands of other nodes which also must validate the block they\n> produce, many of which are not miners\u2014 if we are well distributed\u2014 and\n> thus don't have any way to monetize fees.\n\n\nBut this is exactly the point I'm making...the thousands of other nodes do\nhave a way to monetize the work they do in relaying and validating\ntransactions.  Miners will pay them for the prompt delivery of profitable\ntransactions.  So, in effect, the block reward and transactions fees will\nbe paying not only for the mining work, but also the validation and\nrelaying work.  Such nodes would get paid in micro transactions from the\nminers for that service.  This would be one way that full nodes could\noperate profitably (there may be many other indirect ways).  I think\ndecentralization is pretty much guaranteed because anyone with profitable\ntransactions would only deliver them to miners or other peers that are\nwilling to pay for them.  This is in effect a rebate of a portion of the\ntransaction fee to the network for delivering the transaction to the miner.\n Wallet software might cut out the middle men and submit directly to\nminers...other nodes with access to a large amounts of transactions and\ngood infrastructure might be able to reduce the infrastructure a miner has\nto maintain and deliver a larger volume of fee bearing transactions.  And\neveryone would have a very good sense of the market price for transaction\nfees for a given level of service (speed of block inclusion).\n\nThe other side of it is that wallets will need to receive valid, wallet\nrelevant transactions.  They may also need to connect with multiple nodes\nfor independent verification of the validity of their transactions.  But I\nthink that cost would be more than covered with fees they include in any\ntransactions they originate (but if they rarely originate fee bearing\ntransactions, they might need to pay something to keep receiving an\nincoming transaction feed...it could be as simple as an artificial\ntransaction they pay to themselves, but that includes a fee).\n\nA while back everyone was worried that a tragedy of the commons situation\nwould develop whereby all transactions that carried any fee at all would\nget included by miners, thus destroying the mining business as the block\nreward diminished...but I think the cost involved in relaying and\nvalidating transactions ensures that situation won't develop...mining nodes\nwill have to only connect to relaying and validating nodes such that they\ncan filter down the volume to something that's profitable for them...and\nrelaying and validating nodes will ignore transactions with fees that are\ntoo low to be profitable.\n\nIt will be a few years before we see the kinds of volumes that will force\nthis infrastructure to evolve...I don't think there is an issue with\nlifting or even eliminating the block size limit...there may be a point at\nwhich the volume is sufficient enough that full nodes start dropping\noffline...and the nodes that do remain will have to increasingly find ways\nto cover their costs...which will be a forcing function for solutions\nsimilar to these.  There is no doubt that Bitcoin will be a lot more\nvaluable if it can handle very large volumes of transactions.\n\nAlso, Mike Hearn has done some analysis that suggests that even at Visa\nscales, the hardware requirements to do full validation and relay may not\nall that substantial (enabling lots of small, but profitable, node\noperators and low transactions fees...the key to profitability would be\naccess to a sufficient number of original transactions bearing fees).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130214/185feabb/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-02-14T06:07:44",
                "message_text_only": "On Wed, Feb 13, 2013 at 09:44:11PM -0500, Stephen Pair wrote:\n> One of the beauties of bitcoin is that the miners have a very strong\n> incentive to distribute as widely and as quickly as possible the blocks\n> they find...they also have a very strong incentive to hear about the blocks\n> that others find.  There will not be an issue with blocks being \"jealously\n\nThe idea that miners have a strong incentive to distribute blocks as\nwidely and as quickly as possible is a serious misconception. The\noptimal situation for a miner is if they can guarantee their blocks\nwould reach just over 50% of the overall hashing power, but no more. The\nreason is orphans.\n\nHere's an example that makes this clear: suppose Alice, Bob, Charlie and\nDavid are the only Bitcoin miners, and each of them has exactly the same\namount of hashing power. We will also assume that every block they mine\nis exactly the same size, 1MiB. However, Alice and Bob both have pretty\nfast internet connections, 2MiB/s and 1MiB/s respectively. Charlie isn't\nso lucky, he's on an average internet connection for the US,\n0.25MiB/second. Finally David lives in country with a failing currency,\nand his local government is trying to ban Bitcoin, so he has to mine\nbehind Tor and can only reliably transfer 50KiB/second.\n\nNow the transactions themselves aren't a problem, 1MiB/10minutes is just\n1.8KiB/second average. However, what happens when someone finds a block?\n\nSo Alice finds one, and with her 1MiB/second connection she\nsimultaneously transfers her new found block to her three peers. She has\nenough bandwidth that she can do all three at once, so Bob has it in 1\nsecond, Charlie 4 seconds, and finally David in 20 seconds. The thing\nis, David has effectively spent that 20 seconds doing nothing. Even if\nhe found a new block in that time he wouldn't be able to upload it to\nhis other peers fast enough to beat Alices block. In addition, there was\nalso a probabalistic time window *before* Alice found her block, where\neven if David found a block, he couldn't get it to the majority of\nhashing power fast enough to matter. Basically we can say David spent\nabout 30 seconds doing nothing, and thus his effective hash power is now\ndown by 5%\n\n\nHowever, it gets worse. Lets say a rolling average mechanism to\ndetermine maximum block sizes has been implemented, and since demand is\nhigh enough that every block is at the maximum, the rolling average lets\nthe blocks get bigger. Lets say we're now at 10MiB blocks. Average\ntransaction volume is now 18KiB/second, so David just has 32KiB/second\nleft, and a 1MiB block takes 5.3 minutes to download. Including the time\nwindow when David finds a new block but can't upload it he's down to\ndoing useful mining a bit over 3 minutes/block on average.\n\nAlice on the other hand now has 15% less competition, so she's actually\nclearly benefited from the fact that her blocks can't propegate quickly\nto 100% of the installed hashing power.\n\n\nNow I know you are going to complain that this is BS because obviously\nwe don't need to actually transmit the full block; everyone already has\nthe transactions so you just need to transfer the tx hashes, roughly a\n10x reduction in bandwidth. But it doesn't change the fundemental\nprinciple: instead of David being pushed off-line at 10MiB blocks, he'll\nbe pushed off-line at 100MiB blocks. Either way, the incentives are to\ncreate blocks so large that they only reliably propegate to a bit over\n50% of the hashing power, *not* 100%\n\nOf course, who's to say Alice and Bob are mining blocks full of\ntransactions known to the network anyway? Right now the block reward is\nstill high, and tx fees low. If there isn't actually 10MiB/second of\ntransactions on the network it still makes sense for them to pad their\nblocks to that size anyway to force David out of the mining business.\nThey would gain from the reduced hashing power, and get the tx fees he\nwould have collected. Finally since there are now just three miners, for\nAlice and Bob whether or not their blocks ever get to Charlie is now\ntotally irrelevant; they have every reason to make their blocks even\nbigger.\n\nWould this happen in the real world? With pools chances are people would\nquit mining solo or via P2Pool and switch to central pools. Then as the\nblock sizes get large enough they would quit pools with higher stale\nrates in preference for pools with lower ones, and eventually the pools\nwith lower stale rates would probably wind up clustering geographically\nso that the cost of the high-bandwidth internet connections between them\nwould be cheaper. Already miners are very sensitive to orphan rates, and\nwill switch pools because of small differences in that rate.\n\nUltimately the reality is miners have very, very perverse incentives\nwhen it comes to block size. If you assume malice, these perverse\nincentives lead to nasty outcomes, and even if you don't assume malice,\nfor pool operators the natural effects of the cycle of slightly reduced\nprofitability leading to less ability invest in and maintain fast\nnetwork connections, leading to more orphans, less miners, and finally\nfurther reduced profitability due to higher overhead will inevitably\nlead to centralization of mining capacity.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130214/ca84c238/attachment.sig>"
            },
            {
                "author": "Stephen Pair",
                "date": "2013-02-14T12:59:04",
                "message_text_only": "On Thu, Feb 14, 2013 at 1:07 AM, Peter Todd <pete at petertodd.org> wrote:\n\n> On Wed, Feb 13, 2013 at 09:44:11PM -0500, Stephen Pair wrote:\n> > One of the beauties of bitcoin is that the miners have a very strong\n> > incentive to distribute as widely and as quickly as possible the blocks\n> > they find...they also have a very strong incentive to hear about the\n> blocks\n> > that others find.  There will not be an issue with blocks being\n> \"jealously\n>\n> The idea that miners have a strong incentive to distribute blocks as\n> widely and as quickly as possible is a serious misconception. The\n> optimal situation for a miner is if they can guarantee their blocks\n> would reach just over 50% of the overall hashing power, but no more. The\n> reason is orphans.\n>\n\nPerhaps, but a miner trying to target just over 50% of the network will run\nthe very real risk that they'll only reach 49%.\n\nWhat about the case for centralization if the block size remains capped?  I\nsee a far greater risk of centralization in that scenario than if the cap\nwere to be removed.  The reason is very simple, bitcoin would ultimately\nbecome useful only for very high value, settlement transactions.  Only the\nmega corporations and banks would be using it directly, everyone else would\nbe doing daily transacting in centrally issued currencies of one form or\nanother.  As the banks and mega corps learned about the utility of bitcoin\nand began to use it en masse, they would start to take the whole network\noff the public internet and put it on a higher speed and more reliable\nbackbone.  Those corporations would establish mining agreements among\nthemselves to ensure none of the participants could take over the system\nand compromise it, while at the same time keeping the operational costs to\na minimum.  Bitcoin is now a great alternative to the wire transfer system,\nbut has no value to the average person wanted to have cheap and private\ntransactions over the Internet.  Maybe Litecoin starts to fill that niche.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130214/8701efdd/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-02-18T16:22:35",
                "message_text_only": "On Thu, Feb 14, 2013 at 07:59:04AM -0500, Stephen Pair wrote:\n> > The idea that miners have a strong incentive to distribute blocks as\n> > widely and as quickly as possible is a serious misconception. The\n> > optimal situation for a miner is if they can guarantee their blocks\n> > would reach just over 50% of the overall hashing power, but no more. The\n> > reason is orphans.\n> >\n> \n> Perhaps, but a miner trying to target just over 50% of the network will run\n> the very real risk that they'll only reach 49%.\n\nThen don't be so agressive; target 90% as I suggested and the miner\nstill comes out ahead by having 10% less hashing power to compete with.\n50% is only a maximum because when more than 50% of the network does not\nsee your blocks the majority will inevitably create a longer chain than\nyou, but less than 50% and your part of the network will inevitably\ncreate a longer chain than them.\n\n> What about the case for centralization if the block size remains capped?  I\n> see a far greater risk of centralization in that scenario than if the cap\n> were to be removed.  The reason is very simple, bitcoin would ultimately\n> become useful only for very high value, settlement transactions.  Only the\n> mega corporations and banks would be using it directly, everyone else would\n> be doing daily transacting in centrally issued currencies of one form or\n> another.  As the banks and mega corps learned about the utility of bitcoin\n> and began to use it en masse, they would start to take the whole network\n> off the public internet and put it on a higher speed and more reliable\n> backbone.  Those corporations would establish mining agreements among\n> themselves to ensure none of the participants could take over the system\n> and compromise it, while at the same time keeping the operational costs to\n> a minimum.  Bitcoin is now a great alternative to the wire transfer system,\n> but has no value to the average person wanted to have cheap and private\n> transactions over the Internet.  Maybe Litecoin starts to fill that niche.\n\nWhat you are describing is either *voluntary* centralization, or won't\nhappen. Nothing in your scenario will stop people from transacting on\nthe Bitcoin network directly, it will just make it more expensive. For\ninstance suppose fees rose to the point where the value of the fees was\n10x the value of the block reward today; miners would be taking in\n$972,000/day, or $6750/block. At 1MiB/block that implies transaction\nfees of $6.75/KiB, or about $2 per transaction. Even if the fees were\n$20 per transaction that'd be pretty cheap for direct access to the\nworlds bank-to-bank financial network; I can still transfer an unlimited\namount of money across the planet, and no-one can stop me. Importantly\nthere will be plenty of demand to have transactions mined from people\nother than banks and large corporations.\n\nBecause there will continue to be demand, and because 1MiB blocks means\nrunning a relay node is trivial enough that people can do it just for\nfun, banks won't be able to force people to use their \"high-speed\nbackbone\". Not to say they won't create one, but it won't have any real\nadvantage over something that can be run in your basement.\n\nOn the mining side with 1MiB blocks the fixed costs for setting up a\nmining operation are just a moderately powered computer with a bunch of\nharddrive space and a slow internet connection. The marginal costs are\nstill there of course, but the cost of power and cooling are lower at\nsmall scale than at larger industrial scales; power is often available\nfor free in small amounts, and cooling isn't a problem in small setups.\nBecause small-scale miners will still exist, there will still be a\nmarket for \"consumer\" mining gear, and trying to regulate mining\nequipment will just turn it into a black-market good. Small blocks let\nyou setup a mining operation anywhere in the world - good luck\ncontrolling that. Mining also will remain a way to import Bitcoins into\nplaces.\n\nBanks can try setting up exclusive mining contracts, but unless they\ncontrol more than 50% of the network they'll still have to accept blocks\nfound by these highly decentralized, small-scale miners. They'd be\nbetter off broadcasting their transactions to those miners as well so\nthey don't get double-spent. Thus decentralized miners still can profit\nfrom transaction fees, and still have an incentive to mine. Doesn't\nsound like centralization to me at all.\n\nOn the other land, with large blocks, not only is mining solo\nunprofitable due to the huge fixed costs required to process the blocks,\nminers on pools can't effectively secure the network because they can't\nindependently verify that the blocks they are mining are valid. It would\nbe easy then to co-opt the relatively small number of pools, a number\nthat is not particularly large even now. Transaction relay nodes would\nalso be very expensive to run, and again the small number of them makes\nthem targets for control. Sure transactions will be cheap, but that\ndoesn't do you any good if the small number of miners out there are all\nregulated and ignore your transactions.\n\nSounds like centralization to me.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130218/bd6fab3b/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Incorporating block validation rule modifications into the block chain",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd",
                "Stephen Pair",
                "Gregory Maxwell",
                "Raph Frank",
                "Gavin Andresen"
            ],
            "messages_count": 16,
            "total_messages_chars_count": 49563
        }
    },
    {
        "title": "[Bitcoin-development] RFC: empty scriptPubKeys and OP_RETURN for marking unspendable txouts",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-02-12T15:11:08",
                "message_text_only": "In my fidelity bond protocol (1) I'm proposing the use of two possible\nnew features:\n\nThe first is the use of OP_RETURN at the end of a scriptPubKey to\ndesignate that the txout can be immediately pruned as it is obviously\nunspendable. My use-case is the publish part of the two-step\npublish-sacrifice protocol. I specifically want to use OP_RETURN rather\nthan a spendable scriptPubKey like <serialized tx> <pubkey> OP_CHECKSIG\nso that implementors can not get lazy and fail to actually write the\ncode to spend the non-standard outputs created, thus polluting the UTXO\nset. Simply using <serialized tx> by itself as the scriptPubKey -\nspendable with an empty scriptSig - is another possiblity, but I suspect\nno-one will want to spend the tx fees to clean up those txouts; note how\nlong it took for someone to bother doing that with p2pools share chain\nhash txout, and the effort(2) seems to have been a one-time experiment.\nOf course, P2Pool itself could use this mechanism too.\n\nOP_RETURN marks the script as invalid upon execution, and since a script\nis invalid if an OP_IF or OP_ELSE is not terminated with OP_ENDIF it is\nguaranteed to execute. (there is no op-code that marks a script as valid\nand returns immediately) OP_FALSE is another possibility too; I don't\nsee clear advantages for one or the other modulo OP_FALSE's more\nintuitive name.\n\nFinally OP_VERIF and OP_VERNOTIF say that \"Transaction is invalid even\nwhen occuring in an unexecuted OP_IF branch\" on the wiki, although a\nlook at EvalScript() leaves me less than convinced this is true.  More\nto the point, the mechanism should be something that is as unlikely as\npossible to have different behavior in alternate implementations.\n(remember that often only valid transactions are put in unittests by\nlazy implementors)\n\nOP_RETURN doesn't need any special support in the reference client yet\nnor am I suggesting to make it a standard transaction type, but I would\nlike some feedback on if the idea itself is reasonable.\n\n\nThe second idea is the use of an empty scriptPubKey to create trivially\nspendable outputs; provide the the scriptKey OP_TRUE or similar. For\nfidelity bonds the advantage is to create a mechanism where even\nnon-miners have a chance at taking the funds sacrificed, and thus\nincrease the incentive to scan the blockchain for sacrifices and makes\nit more likely for the sacrifice to be a true sacrifice of value. An\nadditional advantage is you avoid having to provide the txin to prove\nthe value of the mining fee. The advantage over just using a pubkey with\na known secret key is that the transaction size is shorter; remember\nthat the sacrifice transaction has to be published as serialized data in\na prior transaction.\n\nIn the future another use would be as a way of multiple parties to\ncollectively sign an assurance contract(3) donating to miners. This is\neffectively a mining fee because miners who chose to include the\ntransaction can always chose to include an additional transfer from the\ntxout to a scriptPubKey only they can spend.\n\nFor the purpose of fidelity bonds ideally an empty scriptPubKey spent by\nthe scriptSig OP_TRUE would be made a standard transaction type to make\ncollecting the funds as easy as possible until miners start doing so\nthemselves. Having it a standard transaction type would also make it\neasier for miners to implement the code to do this themselves; in\nparticular this discourages them from just allowing all non-standard\ntransactions. The main disadvantage I see is that it makes it easier for\npeople with buggy custom transaction code to accidentally lose their\nfunds.\n\nAgain, thoughts?\n\n\n1) https://github.com/petertodd/trustbits/blob/master/fidelitybond.md\n2) See the transactions associated with 1HfA1KHC7bT1hnPPCjpj9CB4koLM4Hz8Va\n3) https://en.bitcoin.it/wiki/Contracts#Example_3:_Assurance_contracts\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130212/c1200d14/attachment.sig>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-02-12T17:42:37",
                "message_text_only": "On Tue, Feb 12, 2013 at 10:11 AM, Peter Todd <pete at petertodd.org> wrote:\n\n> .... Again, thoughts?\n>\n\nFirst: I really like the fidelity bond concept, and want to see it happen.\n\nRE: OP_RETURN : I've got a knee-jerk opposition to the OP_RETURN opcode,\nbecause it was the cause of the nastiest bug ever Bitcoin history. So I'd\nbe more comfortable using either OP_FALSE or OP_INVALIDOPCODE for the\n\"provably unspendable\" transaction.\n\n\nRE: anyone-can-spend transactions:  Thinking aloud... I wonder if we might\ninadvertently cause \"spend storms\" on the network; if suddenly there are 11\nBTC sitting in an anybody-can-spend txout, I could imagine EVERYBODY on the\nnetwork trying to race each other to spend it (maybe assuming that there\nare a few miners on old versions of the software who are too dumb to claim\nit for themselves).\n\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130212/bce6eded/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-02-13T04:12:09",
                "message_text_only": "On Tue, Feb 12, 2013 at 12:42:37PM -0500, Gavin Andresen wrote:\n> On Tue, Feb 12, 2013 at 10:11 AM, Peter Todd <pete at petertodd.org> wrote:\n> \n> > .... Again, thoughts?\n> >\n> \n> First: I really like the fidelity bond concept, and want to see it happen.\n> \n> RE: OP_RETURN : I've got a knee-jerk opposition to the OP_RETURN opcode,\n> because it was the cause of the nastiest bug ever Bitcoin history. So I'd\n\nSo what exactly was the OP_RETURN bug anyway? I know it has something to\ndo with not executing the scriptSig and scriptPubKey separately\n(https://bitcointalk.org/index.php?topic=58579.msg691432#msg691432) but\ncommit 7f7f07 that you reference isn't in the tree, nor is 0.3.5 tagged.\n\n> be more comfortable using either OP_FALSE or OP_INVALIDOPCODE for the\n> \"provably unspendable\" transaction.\n\nYou know, come to think of it, OP_FALSE doesn't get used by standard\ntransactions either, and it's behavior is a little odd in how it does\npush to the stack. So lets make the standard OP_INVALIDOPCODE,\nspecifically 0xFF, and put it at the start of the scriptPubKey.\n\n> RE: anyone-can-spend transactions:  Thinking aloud... I wonder if we might\n> inadvertently cause \"spend storms\" on the network; if suddenly there are 11\n> BTC sitting in an anybody-can-spend txout, I could imagine EVERYBODY on the\n> network trying to race each other to spend it (maybe assuming that there\n> are a few miners on old versions of the software who are too dumb to claim\n> it for themselves).\n\nThat's a good point. It would encourage efforts to identify as many\nBitcoin nodes as possible, particularly miners, and I don't think we\nreally want to incentivise that. It's not a problem unique to this\nproposal - compromised private keys and SIGHASH_NONE (1) - but\nfidelity bonds will give people incentive to develop the infrastructure\nto exploit it.\n\n    1) Speaking of, maybe I'm missing something, but if I have a\n    transaction with one or more txin's and sign every signature with\n    SIGHASH_SINGLE, what stops an attacker from adding their own txout\n    at the end and diverting the mining fee to themselves?\n\nHaving said that, if we both make empty scriptPubKeys standard, and add\ncode so that miners will always try to spend the outputs for themselves\nat the same time, we can get rid of this problem by removing the\nincentive. It would also still make non-fidelity-bond uses viable as\nwell.\n\nOf course, if you want to go down that path, we might as well add code\nto detect and spend fidelity bonds too, and make the publish\ntransactions IsStandard(). Basically for every script in a confirmed\nblock check if any pushdata op happens to be a script that we would be\nwilling to add to the mempool at nBlockHeight + N. (assuming current\nutxo set) If so, add it to the mempool now. N should be at least 100\nblocks I think for the same reason that coinbase tx's take 100 blocks to\nspend. The limit also means the size of the mempool can't get larger\nthan MAX_BLOCK_SIZE * N. Meanwhile IsStandard() would allow the\nscriptPubKey OP_INVALIDOPCODE <valid serialized tx>\n\nP2SH already treats data as scripts, so treating data as entire tx's\nisn't that big of a leap. Also since the txout is unspendable, the\nSatoshi criteria that block-reorgs should not make child tx's vanish is\nstill met. (though tx mutability sort of breaks this anyway)\n\n\nWe would however open quite a few cans of worms:\n\n1) We just made non-final !IsStandard() for a reason.\n\n2) What if there are transactions already in the mempool that spend the\ntxin's of the sacrifice? If we ignore them, we've just created another\nway to double-spend unconfirmed transactions. On the other hand, if we\ndon't ignore them, we've just created a way to give us a chance to mine\nthe sacrifice for ourselves.\n\nPersonally I'm with you Gavin and think assuming miners are greedy is\nbest, but lets just say I probably shouldn't write an implementation\nwith a function named IsTxOutStealable()?\n\n2a) What if multiple sacrifice publications exist spending the same\ntxin's? We should have deterministic behavior and mine the most valuable\none. If you don't do that, the attackers effective hashpower is\nincreased. (and thus the true sacrifice value of the bond decreases)\n\n2b) ...but this is actually an annoying optmization problem. You could\ncreate a whole bunch of sacrifices, each spending two or more inputs,\none small, one large. Then create one large sacrifice, that spends all\nthe *small* inputs. If the value of the large sacrifice is less than the\ncombined totals of the smaller sacrifices, you should be mining the\nsmall ones rather than the large for maximum return.\n\n3) With the 10KB limit on scripts, a naive IsStandard() could wind up\nrecursing about 200 times; we probably should say recursive publish\ntransactions are non-standard.\n\n3b) ...on the other hand, if they are non-standard, implementations that\nuse fidelity bonds better make sure they don't accept such monsters.\n\nWe probably should just define one standard sacrifice tx form with one\ntxin, one txout, and a standard P2SH scriptPubKey, but miners can still\ndo their own thing and cause problems in determining the true value\nsacrificed if they don't get the optimization problem right.\n\nFidelity bonds needs a lot more thought, and a testnet implementation...\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130212/373103cc/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-02-13T10:00:35",
                "message_text_only": "> So what exactly was the OP_RETURN bug anyway? I know it has something to\n> do with not executing the scriptSig and scriptPubKey separately\n> (https://bitcointalk.org/index.php?topic=58579.msg691432#msg691432) but\n> commit 7f7f07 that you reference isn't in the tree, nor is 0.3.5 tagged.\n>\n\nIt was fixed by Satoshi long ago, back when we used CVS I think.\n\nThe problem was how scripts were executed. They were concatenated together\nand then run as a single unit. The now obsolete OP_CODESEPARATOR was put\nbetween them to control what was hashed and what wasn't.\n\nThe obvious problem with that arrangement being that scriptSig ran first\n(it has to, to push the signatures onto the stack), so nothing stopped you\nsetting a scriptSig to OP_RETURN and making the script evaluate to true,\nalways. A pretty amazing oversight given the thought and care that went\ninto Bitcoin generally, and its robustness since then.\n\nThe fix was to move to the current system whereby the two scripts are\nexecuted independently but sharing a stack, and it's only the return value\nof the scriptPubKey that matters.\n\nThe scripting system always struck me as a rather late addition to the\ndesign. Satoshi admitted as much when he said that he added it after\nencountering an explosion of special cases as he designed various types of\ncontracts. The fact that there's an obvious bug in CHECKMULTISIG is more\nevidence of this part being a general rush job, along with Satoshis\nwillingness to disable much of its functionality later with the IsStandard\nchecks. Also the design of CHECKSIG is an obvious retrofit, it would have\nmade far more sense to decompose it, and we never found a use case for 99%\nof the opcodes despite having successfully designed (redesigned?) all the\ncontract types he ever mentioned.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130213/de524999/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "RFC: empty scriptPubKeys and OP_RETURN for marking unspendable txouts",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen",
                "Mike Hearn",
                "Peter Todd"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 12715
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin-Qt / bitcoind version 0.8.0 released",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2013-02-19T19:27:50",
                "message_text_only": "Bitcoin-Qt version 0.8.0 are now available from:\n  http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.0/\n\nThis is a major release designed to improve performance and handle the\nincreasing volume of transactions on the network.\n\nPlease report bugs using the issue tracker at github:\n  https://github.com/bitcoin/bitcoin/issues\n\nHow to Upgrade\n--------------\n\nIf you are running an older version, shut it down. Wait\nuntil it has completely shut down (which might take a few minutes for older\nversions), then run the installer (on Windows) or just copy over\n/Applications/Bitcoin-Qt (on Mac) or bitcoind/bitcoin-qt (on Linux).\n\nThe first time you run after the upgrade a re-indexing process will be\nstarted that will take anywhere from 30 minutes to several hours,\ndepending on the speed of your machine.\n\nIncompatible Changes\n--------------------\n\nThis release no longer maintains a full index of historical transaction ids\nby default, so looking up an arbitrary transaction using the\ngetrawtransaction\nRPC call will not work. If you need that functionality, you must run once\nwith -txindex=1 -reindex=1 to rebuild block-chain indices (see below for\nmore\ndetails).\n\nImprovements\n------------\n\nMac and Windows binaries are signed with certificates owned by the Bitcoin\nFoundation, to be compatible with the new security features in OSX 10.8 and\nWindows 8.\n\nLevelDB, a fast, open-source, non-relational database from Google, is\nnow used to store transaction and block indices.  LevelDB works much better\non machines with slow I/O and is faster in general. Berkeley DB is now only\nused for the wallet.dat file (public and private wallet keys and\ntransactions\nrelevant to you).\n\nPieter Wuille implemented many optimizations to the way transactions are\nverified, so a running, synchronized node uses less working memory and does\nmuch less I/O. He also implemented parallel signature checking, so if you\nhave a multi-CPU machine all CPUs will be used to verify transactions.\n\nNew Features\n------------\n\n\"Bloom filter\" support in the network protocol for sending only relevant\ntransactions to\nlightweight clients.\n\ncontrib/verifysfbinaries is a shell-script to verify that the binary\ndownloads\nat sourceforge have not been tampered with. If you are able, you can help\nmake\neverybody's downloads more secure by running this occasionally to check PGP\nsignatures against download file checksums.\n\ncontrib/spendfrom is a python-language command-line utility that\ndemonstrates\nhow to use the \"raw transactions\" JSON-RPC api to send coins received from\nparticular\naddresses (also known as \"coin control\").\n\nNew/changed settings (command-line or bitcoin.conf file)\n--------------------------------------------------------\n\ndbcache : controls LevelDB memory usage.\n\npar : controls how many threads to use to validate transactions. Defaults\nto the number\nof CPUs on your machine, use -par=1 to limit to a single CPU.\n\ntxindex : maintains an extra index of old, spent transaction ids so they\nwill be found\nby the getrawtransaction JSON-RPC method.\n\nreindex : rebuild block and transaction indices from the downloaded block\ndata.\n\nNew JSON-RPC API Features\n-------------------------\n\nlockunspent / listlockunspent allow locking transaction outputs for a\nperiod of time so\nthey will not be spent by other processes that might be accessing the same\nwallet.\n\naddnode / getaddednodeinfo methods, to connect to specific peers without\nrestarting.\n\nimportprivkey now takes an optional boolean parameter (default true) to\ncontrol whether\nor not to rescan the blockchain for transactions after importing a new\nprivate key.\n\nImportant Bug Fixes\n-------------------\n\nPrivacy leak: the position of the \"change\" output in most transactions was\nnot being\nproperly randomized, making network analysis of the transaction graph to\nidentify\nusers' wallets easier.\n\nZero-confirmation transaction vulnerability: accepting zero-confirmation\ntransactions\n(transactions that have not yet been included in a block) from somebody you\ndo not\ntrust is still not recommended, because there will always be ways for\nattackers to\ndouble-spend zero-confirmation transactions. However, this release includes\na bug\nfix that makes it a little bit more difficult for attackers to double-spend\na\ncertain type (\"lockTime in the future\") of zero-confirmation transaction.\n\nDependency Changes\n------------------\n\nQt 4.8.3 (compiling against older versions of Qt 4 should continue to work)\n\n\nThanks to everybody who contributed to this release:\n----------------------------------------------------\n\nAlexander Kjeldaas\nAndrey Alekseenko\nArnav Singh\nChristian von Roques\nEric Lombrozo\nForrest Voight\nGavin Andresen\nGregory Maxwell\nJeff Garzik\nLuke Dashjr\nMatt Corallo\nMike Cassano\nMike Hearn\nPeter Todd\nPhilip Kaufmann\nPieter Wuille\nRichard Schwab\nRobert Backhaus\nRune K. Svendsen\nSergio Demian Lerner\nWladimir J. van der Laan\nburger2\ndefault\nfanquake\ngrimd34th\njustmoon\nredshark1802\ntucenaber\nxanatos\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130219/147dfa98/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin-Qt / bitcoind version 0.8.0 released",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 5136
        }
    },
    {
        "title": "[Bitcoin-development] bitcoinj 0.7 released",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2013-02-19T22:26:21",
                "message_text_only": "I'm pleased to announce the release of version 0.7 of the bitcoinj Java\nlibrary for working with Bitcoin. Bitcoinj forms the foundation of\nMultiBit, Bitcoin Wallet for Android, SatoshiDice and more.\n\nTo get bitcoinj 0.7, check out our source from git and then run *git reset\n--hard a9bd8631b904*. This will place you on the 0.7 release in a secure\nmanner. This paragraph was written on Tuesday 19th February 2013 and is\nsigned with the following key, which will be used in all release\nannouncements in future: 16vSNFP5Acsa6RBbjEA7QYCCRDRGXRFH4m.\n\nSignature for the last\nparagraph: IMvY1FsQobjU2t83ztQL3CTA+V+7WWKBFwMC+UWKCOMyTKA+73iSsFnCHdbFjAOEFMQH/NvJMTgGeVCSV/F9hfs=\n\nIf you want to, you can check that the original announcement mail sent to\nbitcoinj at googlegroups.com is correctly signed with the google.com DKIM key,\nto establish a full chain of trust.\n\n*Release notes*\n\n   - Thanks to Matt Corallo, we now support a* fully verifying mode* in\n   addition to simplified verification. This is a tremendous amount of work\n   that wouldn't have happened without Matt! Right now, we strongly discourage\n   anyone from using it for mining (which is not supported out of the box\n   anyway). Use it in a production environment only if you know what you're\n   doing and are willing to risk losing money. If you do use it, let us know\n   so we can contact you when problems are discovered. Read the documentation\n   carefully before you begin.\n   - Also thanks to Matt, *Bloom filtering* is now implemented and\n   activated by default. When bitcoinj connects to a peer that supports Bloom\n   filtering, only transactions relevant to the wallet will be downloaded\n   which makes bandwidth usage scale with the size of your wallet, not global\n   system activity. A configurable false positive ratio allows you to trade\n   off bandwidth vs privacy. App developers don't need to do anything to take\n   advantage of this, it is enabled automatically.\n   - PeerGroup now pings its peers and calculates moving averages of the\n   ping times. Ping time, versions and block heights are taken into account\n   when selecting the peer to download the chain from.\n   - You can now customize which outputs the wallet uses to create spends.\n   The new default coin selector object allows you to spend unconfirmed change\n   as long as it's been seen propagating across the network, addressing a\n   common end-user pain point in wallet apps.\n   - Optimized networking code for faster startup.\n   - A new PeerMonitor example app shows how to put properties of connected\n   peers into a GUI.\n   - The Wallet is now decoupled from the BlockChain using the new\n   BlockChainListener interface. This will simplify the development of some\n   apps that want to process transactions but not maintain an actual wallet.\n   - The dependencies of broadcast transactions are now downloaded and risk\n   analyzed. At the moment they are only being checked for having a timelock.\n   In future we may also analyze tree depth. The goal is to make certain kinds\n   of protocol abuse harder. Wallets will reject timelocked transactions by\n   default, this can be overridden via a property.\n   - You can now create timelocked transactions with\nWalletTool?<http://code.google.com/p/bitcoinj/w/edit/WalletTool> if\n   you want to.\n   - Compressed public keys are now used by default.\n   - Support testnet3\n   - Support bitcoin-qt compatible message signing and verification.\n   - ECDSA key recovery is now implemented and allows you to obtain the\n   public key from an extended signature. If the signature is not extended\n   then there are multiple key possibilities returned.\n   - Many bugfixes and minor improvements\n\nAPI changes:\n\n   - ECKey.sign() now takes a Sha256Hash as an argument and returns an\n   ECDSASignature object in response. To get DER encoded signatures, use\n   the encodeToDER() method of ECDSASignature.\n   - ECKey.publicKeyFromPrivate now takes an additional compressed\n   parameter.\n   - PeerGroup.start()/PeerGroup.shutDown() now run asynchronously and\n   return futures you can use to wait for them. You cannot restart a\n   PeerGroup once it has been shut down any more.\n\n*Credits*\n*\n*\nThanks to Matt Corallo (a.k.a. BlueMatt) for his huge contributions to this\nrelease.\n\nAs always, thanks to Andreas Schildbach for his thorough testing, ideas and\nhigh volume of quality bug reports. Also thanks to Jim Burton for the same\nreasons.\n\nFinally thanks to Ben (piuk) of blockchain.info for funding the ECDSA key\nrecovery feature.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130219/fcfa24c1/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "bitcoinj 0.7 released",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 4687
        }
    },
    {
        "title": "[Bitcoin-development] Key retirement and key compromise",
        "thread_messages": [
            {
                "author": "Roy Badami",
                "date": "2013-02-22T23:08:51",
                "message_text_only": "Has anyone been thinking about providing tools to allow users to cope\nwith key compromise - or more generally, to manage key retirement etc?\n\natm, if you suspect that your keys may be liable to compromise then\nwhat would you have to do?  You'd have to create a new wallet (on a\nnew computer?  or is it easy to have two coexisting installs on one\ncomputer?)  And then you'd have to make one or more payments from the\nold wallet to the new wallet, to transfer the coins.  It's a pain, and\nyou've lost your address book, your transaction history, etc.  And\nunless you keep the old wallet about, too, you're a bit stuck if\nsomeone makes a payment to one of the old addresses.  It's something\nthat most users would baulk at unless they're really sure they're at\nsignificant risk.\n\nOf course, there are a spectrum of scenarios, ranging from having an\nunencrypted wallet stolen by someone who knows what it is, through to\ndeciding that the passphrase you used to use when you only had a few\ndollars worth of BTC maybe isn't good enough now you've got tens of\nthousands of dollars worth of coins.  Or maybe you have no reason to\nsuspect there is a risk of compromise, but just have a corporate key\nmanagement policy that recommends retiring keys after a period of\ntime.\n\nWhat would be really nice is for bitcoin to have a big key compromise\nbutton, which would automatically transfer all coins to newly\ngenerated addresses (optionally with a pause between generation and\ntransaction - to allow for a new wallet backup).  Optionally, too, the\ncompromised/retired addresses could be marked with a flag such that if\nsomeone sends coins to that address bitcoind immediately generates a\ntransaction to transfer the coins to address(es) which are good.\n\nI know deterministic wallets have many proponents - but personally I\nlike having a bag of keys - with the idea that over a period of time,\nold keys will routinely be retired and their balances automatically\ntransfered to newly generated keys.  If someone really manages to\ncrack the passphrase on that 10-year-old wallet backup they got hold\nof, then if would be nice to minimise the damage they could do...\n\nAnd, of course, I want a big panic button that allows me to\nautomatically transfer all my coins to new addresses ASAP if I\nsuddenly do something stupid, like accidentally type my passphrase\ninto my IRC window :-)\n\nThoughts?  Is this functionality that there is any interest in\ndeveloping within the official client?  If there is any interest in\nthis then obviously the first step would be to specify exactly what\nfunctionality is wanted...\n\nroy"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2013-02-25T09:41:26",
                "message_text_only": "Just create a new wallet and send everything to a new address.\nI don't think additional tools for this are needed.\n\n\nOn 2/23/13, Roy Badami <roy at gnomon.org.uk> wrote:\n> Has anyone been thinking about providing tools to allow users to cope\n> with key compromise - or more generally, to manage key retirement etc?\n>\n> atm, if you suspect that your keys may be liable to compromise then\n> what would you have to do?  You'd have to create a new wallet (on a\n> new computer?  or is it easy to have two coexisting installs on one\n> computer?)  And then you'd have to make one or more payments from the\n> old wallet to the new wallet, to transfer the coins.  It's a pain, and\n> you've lost your address book, your transaction history, etc.  And\n> unless you keep the old wallet about, too, you're a bit stuck if\n> someone makes a payment to one of the old addresses.  It's something\n> that most users would baulk at unless they're really sure they're at\n> significant risk.\n>\n> Of course, there are a spectrum of scenarios, ranging from having an\n> unencrypted wallet stolen by someone who knows what it is, through to\n> deciding that the passphrase you used to use when you only had a few\n> dollars worth of BTC maybe isn't good enough now you've got tens of\n> thousands of dollars worth of coins.  Or maybe you have no reason to\n> suspect there is a risk of compromise, but just have a corporate key\n> management policy that recommends retiring keys after a period of\n> time.\n>\n> What would be really nice is for bitcoin to have a big key compromise\n> button, which would automatically transfer all coins to newly\n> generated addresses (optionally with a pause between generation and\n> transaction - to allow for a new wallet backup).  Optionally, too, the\n> compromised/retired addresses could be marked with a flag such that if\n> someone sends coins to that address bitcoind immediately generates a\n> transaction to transfer the coins to address(es) which are good.\n>\n> I know deterministic wallets have many proponents - but personally I\n> like having a bag of keys - with the idea that over a period of time,\n> old keys will routinely be retired and their balances automatically\n> transfered to newly generated keys.  If someone really manages to\n> crack the passphrase on that 10-year-old wallet backup they got hold\n> of, then if would be nice to minimise the damage they could do...\n>\n> And, of course, I want a big panic button that allows me to\n> automatically transfer all my coins to new addresses ASAP if I\n> suddenly do something stupid, like accidentally type my passphrase\n> into my IRC window :-)\n>\n> Thoughts?  Is this functionality that there is any interest in\n> developing within the official client?  If there is any interest in\n> this then obviously the first step would be to specify exactly what\n> functionality is wanted...\n>\n> roy\n>\n> ------------------------------------------------------------------------------\n> Everyone hates slow websites. So do we.\n> Make your web apps faster with AppDynamics\n> Download AppDynamics Lite for free today:\n> http://p.sf.net/sfu/appdyn_d2d_feb\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/\nhttp://archive.ripple-project.org/"
            },
            {
                "author": "Peter Vessenes",
                "date": "2013-02-25T19:44:02",
                "message_text_only": "We've been toying with the idea of a 'dead' button, one that issues a bunch\nof pre-generated txs sending stuff out to a previously secured 'backup' set\nof addresses (we don't think in terms of wallets, just keypairs).\n\nIn this scenario, you have a long-term storage address (or set of them),\nand if you need to hit the panic button, previously signed transactions\nsend value over to your emergency storage.\n\nIf you've mucked around sending / receiving with your long-term storage,\nyou'd only catch some BTC, not necessarily all, but what's nice is the\npanic transaction leaking has lower security requirements than your private\nkeys -- worst case it's out, and you've got to deal with stuff in emergency\nstorage, as opposed to losing all your coins.\n\nYou could pair this with a server that checks if 'safe' addresses have\n'unauthorized' transactions showing up on the blockchain, and you'd have a\nreasonable automated security layer. Maybe. :)\n\nI'm interested in thoughts on this approach as well.\n\nJorge -- I respectfully disagree with you, there are a number of enterprise\nscenarios where your method is not appropriate.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130225/c4c50ba1/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Key retirement and key compromise",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Vessenes",
                "Roy Badami",
                "Jorge Tim\u00f3n"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 7276
        }
    },
    {
        "title": "[Bitcoin-development] How small blocks make delibrate orphan mining costly",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-02-24T01:06:51",
                "message_text_only": "In the low-subsidy future fees will be the main source of income for\nminers. Thus in some circumstances large miners may even have a reason\nto delibrately try to mine a block that would orphan the current best\nblock. A simple example would be what would happen if a 1000BTC fee tx\nwas created, but more realistic examples would be just due to a large\nnumber of tx's with decent fees.\n\nHowever, with limited block-sizes such a strategy runs into a problem at\na point: you can't fit more tx's into your block so you can't increase\nthe fees collected by it even if you wanted too. Best strategy will soon\nbe to accept it and move on.\n\n\nThe second thing that could help defeat that strategy is if clients use\nnLockTime by default. Clients should always create their transactions\nwith nLockTime set such that only the next block can include the\ntransaction, or if the transaction isn't time sensitive, possibly even\nfarther in the future.\n\nRemember that to get ahead, you need to mine two blocks, and with\nnLockTime the first block could only gain the transactions in the block\nit orphans, so any further transactions could only go in the second.\nWith limited blocksizes that creates even more pressure in that the\nblock becomes full.\n\nI don't see any reason why nLockTime in this fashion would harm clients,\nso I think it's a perfectly reasonable thing to do and provides some\nnice benefits down the road.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130223/95941f0d/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-02-24T00:56:48",
                "message_text_only": "On Sat, Feb 23, 2013 at 5:06 PM, Peter Todd <pete at petertodd.org> wrote:\n> In the low-subsidy future fees will be the main source of income for\n> miners. Thus in some circumstances large miners may even have a reason\n> to delibrately try to mine a block that would orphan the current best\n> block. A simple example would be what would happen if a 1000BTC fee tx\n> was created, but more realistic examples would be just due to a large\n> number of tx's with decent fees.\n\nIt's come up a number of times in the past that when there is no\nsubsidy we might expect slow convergence as miners try to orphan each\nother instead in order to fee snipe.   What Peter pointed out here\nthat I had not previously considered and find interesting is was that\nif there is a sufficient backlog (or nlocktime immature) of\ntransactions with fees beyond the maximum block size the incentive to\norphan blocks to take their fees is greatly reduced or eliminated."
            }
        ],
        "thread_summary": {
            "title": "How small blocks make delibrate orphan mining costly",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gregory Maxwell",
                "Peter Todd"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2650
        }
    },
    {
        "title": "[Bitcoin-development] Fidelity-bonded ledgers",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-02-26T02:44:58",
                "message_text_only": "Lets suppose we take away everything but the transaction/scripting\nsystem from Bitcoin. What is left is basically a way for to prove that a\nset of pubkeys authorized the movement of coins from one place to\nanother. Of course, such a system is flawed as a currency because of the\ndouble spend problem - specifically the need to know that there exists\nglobal consensus on what particular set of transactions is the accepted\nstate.\n\nHowever, in the event that a party commits double-spend fraud, it is\ntrivial to prove to others that they did so. Thus if a way to punish\nthat party can be found, we can give them an incentive to behave\nhonestly.\n\nConsider the following new opcode and scriptPubKey:\n\n    <genesis hash> n <ledger pubkeys> m CHECK_DOUBLE_SPEND_PROOF\n\nspent with the following scriptSig:\n\n    {transaction 1} {transaction 2}\n\nwhere where both transactions are part of the block chain starting at\nthe given genesis hash, and whose blocks are signed by n of m ledger\npubkeys; the ledger is the entity entrusted to keep the ledger accurate\nand not allow double-spends to occur.\n\nAnyone with proof of a double-spend attempt made in the blockchain\nstarting at a given genesis hash can collect a reward. In essence, the\ntxout is the fidelity bond holding the ledger accountable.\n\nOf course, the devil's in the details...\n\n\nTransactions and blocks\n-----------------------\n\nTransactions themselves can follow the Bitcoin system of scripts,\nscriptPubKeys, and scriptSigs and re-use the existing validation\nmachinery.\n\nA so-called block however is reduced to the simpliest possible form:\n\n    <signatures> <block hash> <transaction>\n\nwhere the signatures are that of the ledger. The block hash is optional\nand provides a way to further link a block into some sort of system to\nmake double-spend fraud detectable. Importantly the Bitcoin validation\nmachinery itself only needs to know that the double-spend happened at\nall, not how it was detected.\n\nNote how had the string manipulation opcodes not been disabled, in\nparticular SUBSTR, and had CHECKSIG not been designed as a single\nopcode, it might have even been possible to create the double-spend\ndetector using the existing scripting system. Equally with just a set of\nECDSA opcodes one could probably construct a double-spend detector using\nnon-Bitcoin compatible transactions, but alas, things didn't work out\nthat way.\n\n\nMoving funds in and out of fidelity-bonded ledgers\n--------------------------------------------------\n\nFirst the depositor informs the ledger of the amount they wish to\ndeposit, and one txin that will be used for that deposit.\n\nNex the ledger first creates a ledger-only transaction with the the\nfollowing scriptPubKey:\n\n    <confirmations> <value> <txin hash> <scriptPubKey hash> CHECK_PAYMENT VERIFY <pubkey> CHECKSIG\n\nspendable with the following scriptSig:\n\n    <signature> <transaction> <merkle path to block header>\n\nThe CHECK_PAYMENT opcode returns true if provided with a proof that a\ntransaction with a txout of the correct value and scriptPubKey spending\nthe given txin exists in the Bitcoin blockchain. The ledger should\nensure that a different scriptSig is created for every deposit. The txin\nis provided to allow the ledger to use the same scriptPubKey for all\ndeposits and thus make external audits easier. (note that an UTXO merkle\nsum proof system is most likely to index by scriptPubKey)\n\nThe ledger gives the depositor the fully signed transaction, and the\ndepositor makes it valid by broadcasting that transaction and getting it\nconfirmed in the block chain.\n\nWithdrawls from the ledger to the blockchain proper can happen the same\nway, but this time it's the ledger that provides the transaction, and\nthe transaction owner that spends the transaction to an address of the\nledger's choosing.\n\n\nDetecting double-spends\n-----------------------\n\nFrom the point of view of the Bitcoin validation machinery, double-spend\ndetection is undefined. Thus multiple systems are possible without\nchanging the validation rules.\n\nOne simple method would be for the ledger to maintain a publicly\naccessible website, in particular publically accessible over Tor.\nTransactions would be incorporated into a single log, and clients would\nexpect to be able to get copies of that log at any time anonymously. If\ntheir transaction did not appear in the log, they could immediately\nprove the double spend. (going as far back as the genesis block) The\noptional block hash signed by every transaction would be incorporated\ninto the audit logs.\n\nEqually trusted computing technologies can also be used instead of, or\nin conjunction with, the ledger audit logs.\n\n\nEnsuring the bond can-not be collected by the ledger\n----------------------------------------------------\n\nThe simplistic scriptPubKey presented in the introduction allows for the\nledger to create their own fraud proof and run with the funds. What we\nactually need is a way to constrain the destination of those spend\nfunds. Consider the following scriptPubKey:\n\n    {bond ops omitted} <txouts hash> GET_TXOUTS HASH160 EQUAL\n\nGET_TXOUTS would put a serialized version of each scriptPubKey, value,\nand so on on the stack. (ideally using the existing CHECKSIG machinery;\nCHECKSIG decomposed) Thus the txouts of any transaction allowed to spend\nthe scriptPubKey are constrained.\n\nThe scriptPubKey of the allowed transaction output can include a\nmechanism such as the following:\n\n    n GET_BLOCKS_SINCE_TXIN LESSTHAN\n\nEssentially the number of blocks that have been confirmed since the transaction input was\nconfirmed in the chain are put on the stack, and the scriptPubKey is\nonly spendable if that number is sufficiently large. Essentially it's\nthe same underlying idea as publish-commit fidelity bond sacrifices, but\ndone with explicit scripting support.\n\nAs an aside, all these GET_FOO opcodes would use a lot of opcode space,\nthus they should all be combined into a single GET_INFO opcode, which\nwould take a single argument specifying what information should be\nplaced onto the stack.\n\n\nChaum Token Support\n-------------------\n\nAuditing chuam token creating and redemption is made difficult by the\nfact that the two acts are separated from each other. However, while it\nisn't possible to audit any particular token issue/redemption, it is\npossible to audit the sum of all tokens issued.\n\nSpecifically now every transaction involving tokens contains a number V,\nwhich represents the total value of all tokens of that denomination. A\ntoken creation transaction would look like the following:\n\n    <ledger signature> <prev hash> V+1 <inputs> <blinded token>\n\nwith the rule that if two transactions exist with the same prev hash,\nboth creating a token, fraud has occured. Equally if the total token\nvalue is not incremented, fraud has also occured. Similarly token\nredemption can look like the following:\n\n    <ledger signature> <token signature> <prev hash> V-1 <unblinded token> <outputs>\n\nNote that here tokens themselves are pubkeys, which authorize their own\nredemption.\n\nToken to token transactions do not change V, but they still require\nsignatures, and thus still can be used as fraud proofs.\n\nOf course the ledger can still run with all the funds deposited, but if\nclients never deposit more funds than the fidelity bond is worth, the\nledger is still unable to profit from fraud as any client can show that\neither their redemption request has not been honored, or that the value\nof outstanding tokens does not match up.\n\n\nForcing redemptions\n-------------------\n\nThere needs to be some way of forcing the ledger to redeem a withdrawl\nrequest, on pain of losing their fidelity bond. This can be done by\nallowing the creation of a special unspent txout, which can only be\nspent by the creation of the requested txout, thus transfering the funds\nto the rightful owner. Clients would scan the UTXO set to ensure that\nno outstanding UTXO's of that special form exist before depositing funds\nwith the ledger. This solution could also be combined with time-lock\nmechanisms that return funds to their owners, perhaps combined with some\nsort of replacement mechanism.\n\nFurther work needs to be done here.\n\n\nSummary\n-------\n\nBitcoin provides an excellent transferable proof of work that can be\nused to make certain actions expensive, including fraud. By the addition\nof a relatively small number of opcodes to the existing scripting\nlanguage, opcodes that can be used for other purposes, we can create a\nledger built on top of Bitcoin whose honesty and performance are\nincentivised by the prospect of losing something of value.\n\n\n\nExtending the scripting language\n--------------------------------\n\nI'm not sure the following has been proposed before; my apologies if it\nhas.\n\nInvalid opcodes do not make a transaction invalid if they are part of an\nunexecuted IF/ELSE/ENDIF block. Previously it has been proposed to\ncarefully use the ten NOP opcodes as a way to extend the scripting\nlanguage - remember that an extension is a soft fork only if existing\nclients consider the transaction valid - however we can instead redefine\njust one NOP opcode to get access to all of the invalid opcodes.\nSpecifically consider the following scriptPubKey:\n\n    <version> CHECK_SCRIPT_VERSION NOTIF <ops> ENDIF\n\nThe CHECK_SCRIPT_VERSION, NOP10, would essentially put the supported\nscript version on the stack, followed by the LESSTHANOREQUAL opcode.\nThus if the script version is supported, zero is placed on the stack,\nand the NOTIF/ENDIF block is executed. Otherwise non-zero is left on the\nstack, and the block is not executed, resulting in the script succeeding\nunconditionally. Equally for non-supporting miners, the NOP10 does\nnothing, non-zero is left on the stack, and the script succeeds.\n\nAlternatively the comparison could be done as an XOR, and the \"version\"\nactually being a set of capabilities. This has the advantage that\ndifferent versions could use the same invalid opcodes for different\npurposes. (the context would remain until the end of the ENDIF block)\nHowever I'm not sure that allowing a full-on \"flag\" system is worth the\ncomplexity, and in any case if versions are assigned sequentially\nessentially the same idea can be done later anyway.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130225/8d005f68/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-02-26T02:49:10",
                "message_text_only": "On Mon, Feb 25, 2013 at 09:44:58PM -0500, Peter Todd wrote:\n> Lets suppose we take away everything but the transaction/scripting\n\nOne last thing: credit goes to Gregory Maxwell for his ideas about\nadding unspent-chaum-token redemption op-codes to Bitcoin proper that\nlead me down the path to the more general Fidelity-Bonded Ledger idea.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130225/20b626a3/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Fidelity-bonded ledgers",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 11134
        }
    }
]