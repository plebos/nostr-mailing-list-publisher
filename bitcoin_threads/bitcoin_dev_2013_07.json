[
    {
        "title": "[Bitcoin-development] txtool: Advanced transaction building and fun",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2013-07-03T16:15:52",
                "message_text_only": "URL: https://github.com/jgarzik/txtool\n\ntxtool is a command line tool written in node.js that interfaces with\nBitcoin-Qt/bitcoind, to automate or assist in building interesting,\nunusual, complicated or just plain odd transactions.  The goal is to\ndemonstrate advanced bitcoin features, and make it easier for users to\nexperiment.  The intended audience has a basic awareness of how\nbitcoin transactions look and work.\n\nThe theory of operation and full list of commands may be reviewed at\nhttps://github.com/jgarzik/txtool/blob/master/README\n\nInitially, two working examples are presented:\n* Easy multi-signature transaction building:\nhttps://github.com/jgarzik/txtool/blob/master/examples/multisig.txt\n(similar to gmaxwell's P2SH multisig example)\n* Passing around transactions (possibly multi-signature) for signing:\nhttps://github.com/jgarzik/txtool/blob/master/examples/tx-signing.txt\n\nFurther examples such as decentralized crowdfunding and atomic coin\nswapping* will be demonstrated soon.\n\n\n* https://bitcointalk.org/index.php?topic=112007.msg1212356#msg1212356\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            }
        ],
        "thread_summary": {
            "title": "txtool: Advanced transaction building and fun",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1173
        }
    },
    {
        "title": "[Bitcoin-development] libzerocoin released, what about a zerocoin-only alt-coin with either-or mining",
        "thread_messages": [
            {
                "author": "Adam Back",
                "date": "2013-07-05T14:01:40",
                "message_text_only": "Hi\n\nI presume everyone saw the announce from Matthew Green & Ian Miers at JHU on\nthe release of libzerocoin: https://github.com/Zerocoin/libzerocoin\n\nSo now that raises the question of how can people experiment with real money\nwith zerocoin.  I think its fair to summarize there is resistance to merging\ninto bitcoin as it slows validation, bloats the blockchain, and also a\npolicy aspect it also imports cryptographic privacy into bitcoin.\n\nOn the forum thread on zerocoin math etc I suggested maybe people interested\nto explore bitcoin could create an all-zerocoin alt-coin that is either-or\nmined and p2p exchangeable for bitcoin.\n\nDo people think that should work?  It seems to me it should with minimal,\nbitcoin changes.  I think the rule for either-or mining should be as simple\nas skipping the value / double-spend validation of the blocks that are\nzerocoin mining blocks.  Obviously zerocoin blocks can themselves end up on\nforks, that get resolved, but that fork resolution can perhaps be shared? \n(Because the fork resolution is simply to accept the longest fork).\n\n> what about making an all zerocoin based alt-coin (no bitcoins, nothing but\n> zerocoins), that is either-or mined with bitcoin.  Then people can trade\n> in and out of zerocoins by buying or selling them for bitcoin with an\n> atomic transaction, probably p2p without some trusted exchange like mtgox.\n> \n> Either-or mined (as distinct from merge-mined) I mean that each mined coin\n> set is either a set of 25 bitcoins or a set of 25 zerocoins.  If its a\n> zerocoin set its not a valid bitcoin set, and if its a bitcoin its not a\n> valid zerocoin.  I'm not sure the zerocoins or bitcoins have to do much\n> with mining events for the other network other than check they have the\n> expected number of bits as they wont automatically know how to validate\n> the other network.  Some miners may choose to validate both networks, but\n> thats a choice for them.\n> \n> In that way people can experiment with zerocoin, without bloating the\n> block chain, complicating bitcoin, and without slowing validation on the\n> bitcoin network.  And the two coins should have approximately the same\n> cost (and maybe therefore value, though the price would be subject to\n> demand/supply and any taint discount for bitcoins; zerocoins are taint\n> free, or perfectly blended taint at least).\n\nAdam"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-12T13:18:15",
                "message_text_only": "On Fri, Jul 05, 2013 at 04:01:40PM +0200, Adam Back wrote:\n> Do people think that should work?  It seems to me it should with minimal,\n> bitcoin changes.  I think the rule for either-or mining should be as simple\n> as skipping the value / double-spend validation of the blocks that are\n> zerocoin mining blocks.  Obviously zerocoin blocks can themselves end up on\n> forks, that get resolved, but that fork resolution can perhaps be shared? \n> (Because the fork resolution is simply to accept the longest fork).\n\nYeah, there's been a lot of doom and gloom about zerocoin that is\nfrankly unwarrented. For instance people seem to think it's impossible\nto make a blockchain with zerocoin due to the long time it takes to\nverify transactions, about 1.5 seconds, and never realize that\nverification can be parallelized.\n\nAnyway the way to do it is to get out of the model of large blocks and\nthink about individual transactions. Make each transaction into its own\nblock, and have each transaction refer to the previous one in history.\n(zerocoin is inherently linear due to the anonymity)\n\nVerification does *not* need to be done by every node on every\ntransaction. Make the act of creating a transaction cost something and\ninclude the previous state of the accumulator as part of a transaction.\nParticipants verify some subset of all transactions, and should they\nfind fraud they broadcast a proof. Optionally, but highly recomended,\nmake it profitable to find fraud, being careful to ensure that it's\nnever profitable to create fraud then find it yourself.\n\nAnyway Bitcoin is limited to 7tx/s average so even without probabalistic\nverification it'd be perfectly acceptable to just limit transactions to\none every few seconds provided you keep your \"blocksize\" down to one\ntransaction so the rate isn't bursty. You're going to want to be\ncautious about bandwidth requirements anyway to make sure participants\ncan stay anonymous.\n\nAs you suggest creating zerocoins from provably sacrificing bitcoins is\nthe correct approach. The consensus algorithm should be that you\nsacrifice zerocoins (specifically fractions there-of - note how I'm\nassuming support for non-single-zerocoin amounts) and whatever chain has\nthe highest total sacrifice wins. One way to think about\nproof-of-sacrifice is it's really proof-of-work, transferred. It also\nhas the *big* advantage that to double-spend, or for that matter 51% the\nchain, you have to outspend everyone with a stake in the viability of\nthe blockchain: they can sacrifice their zerocoins to combat you. In the\ncase of a double-spend to rip off an online merchant the total amount\nyou could profit is the same as the total amount they would rationally\nspend to stop you, and soon there will be collateral damage too\nincreasing the amount third-parties are willing to sacrifice to stop\nyou. You can't win.\n\nOf course, this does mean that even unsuccesful sacrifices need to be\ncostly. You can make this acceptable to users by allowing a sacrifice to\nbe reused, but only for the exact same transaction it was originally\ncommitted to.\n\nSacrifices in this manner are *not* proof of stake. You really are\ngiving up something by publishing the information that proves you made\nthe sacrifice as that information can always be included in the\nconsensus thereby taking away a limited resource. (your zerocoins) It's\nmore heavily dependent on jam-free networks, and doesn't play nice with\nSPV, but zero-knowledge proofs will may help the latter. (you've got\nBitcoin itself to act as a random beacon remember)\n\nSpeaking of, another similar approach is to take advantage of how a\nBitcoin sacrifice can be made publicly visible. Create a txout of some\nvalue like the following:\n\n    OP_RETURN <prev-ztc-blockhash> <blockhash> <ztc-created>\n\nNow even if you fail to publish your blocks, at least the whole world\nknows how much they need to outspend to be sure you can't 51% attack the\nnetwork. This approach and not-btc sacrifices can go hand in hand too,\nespecially if nodes follow rules where they consider btc txout\nsacrifices as \"fixed\" and only subject to change by the bitcoin\nblockchain re-organizing. Advantages and disadvantages to both\napproaches. (remember that visible tx's can be censored by miners)\n\nSacrifice to mining fees may be acceptable in the future too, but only\nif OP_DEPTH is implemented so as to not give Bitcoin miners bad\nincentives. (the sacrificed coins should go to fees *months* or even\n*years* after they have been sacrificed)\n\nTurning zerocoins back into Bitcoins is just supply and demand: sell\nthem. You'll always lose a bit given by definition the maximum exchange\nrate is 1:1, but anonymity may be worth it. Others have written about\ncross-chain trading protocols, and I'll point out they are easier to\nimplement if one chain has full visibility into what's happening on the\nother; zerocoin is most likely to be implemented as an extension to the\nbitcoin client itself.\n\nFinally if the transaction rate is too slow there's nothing wrong with\nrunning multiple parallel zerocoin blockchains, although given the\nusecase of moving your funds through zerocoin for anonymity, and using\nthe clean coins that come out the other side, there's no reason to think\nthe zerocoin chain transaction rate needs to be especially high anyway.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000013b2f7ee77027f583b765ad9811dfe3d0adc801e295fd9acdf\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130712/5150507e/attachment.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2013-07-13T09:51:14",
                "message_text_only": "I'm not sure I understand the whole proposal, but it seems to me that\nhaving different characteristics, bitcoins and zerocoins would be\ndifferent currencies.\nI don't see the need to peg zerocoins to bitcoins.\nIt is great to have an anonymous p2p currency, maybe some bitcoin\nusers that use bitcoin because of the transparency they allow (public\nfunds expenditures could be more transparent than they have ever been)\ndon't like this hard-fork. Well, maybe this is not the main reason,\nbut I think this could be highly controversial.\nMaybe everybody likes it, but can you expand more on the\njustifications to peg the two currencies?\nIf you're requiring one chain look at the othe for validations (miners\nwill have to validate both to mine btc) you don't need the cross-chain\ncontract, you can do it better.\n\nInstead of doing this:\n\nhttps://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains\n\nYou could do something like this:\n\nhttps://bitcointalk.org/index.php?topic=31643.0\n\nThis very idea has been proposed recently by othe people, but I can't\nfind where.\n\nThe problem with this is of course scalabilty. Once you do it for what\nchain, why not the others?\nYou can't validate 100 chains to mine bitcoin even if they're all\nmerged mined: that's asking miners too much.\nIf zerocoin enjoys this privilege why not, for example?\n\nAs some of you may know, Mark Friedenbach and I are working on a\nprotocol modification to support issuance of arbitrary assets. Would\nbe something like colored coins but better, we're calling it\nFreiMarkets. Of course these assets are not p2p like bitcoin or\nfreicoin themselves: they have a centralized issuer.\nBut if you allowed to sacrifice real bitcoins (as opposed to IOUs\ndenominated in BTC like you have, for example, in ripple) so they\nappear in Freicoin's chain and turn them back, you could have p2p\nbitcoins inside Freicoin's chain.\nMaybe ripplers want that too. If FreiMarkets prove to work well on\nfreicoin and be scalable enough, maybe a lot of scamcoins apply the\nhardfork too and they want to have p2p btc in their chain as well.\n\nMaybe I could have explained this without even mentioning FreiMarkets,\nbut my point is that you're asking for a lot like it was nothing.\nZerocoin-bitcoin fungibility hardfork is opening a little pandora's\nbox. Are we ready?\n\nI was waiting for others to comment and I'm surprised that no one else\nhas made any objection yet. But if no one's going to point out the\ncontrovery that is so obvious to me, I feel almost like a\nresponsability to act like a Devil's advocate here.\nSo if you make bitcoin and zerocoin fungible, I want bitcoins to be\ntransferrable to freicoin's chain. And I warn you there will be many\nmore people asking for the same thing on other chains. What criteria\nwill we have to say yes or no?\nMore\n\n\n\nOn 7/12/13, Peter Todd <pete at petertodd.org> wrote:\n> On Fri, Jul 05, 2013 at 04:01:40PM +0200, Adam Back wrote:\n>> Do people think that should work?  It seems to me it should with minimal,\n>> bitcoin changes.  I think the rule for either-or mining should be as\n>> simple\n>> as skipping the value / double-spend validation of the blocks that are\n>> zerocoin mining blocks.  Obviously zerocoin blocks can themselves end up\n>> on\n>> forks, that get resolved, but that fork resolution can perhaps be shared?\n>>\n>> (Because the fork resolution is simply to accept the longest fork).\n>\n> Yeah, there's been a lot of doom and gloom about zerocoin that is\n> frankly unwarrented. For instance people seem to think it's impossible\n> to make a blockchain with zerocoin due to the long time it takes to\n> verify transactions, about 1.5 seconds, and never realize that\n> verification can be parallelized.\n>\n> Anyway the way to do it is to get out of the model of large blocks and\n> think about individual transactions. Make each transaction into its own\n> block, and have each transaction refer to the previous one in history.\n> (zerocoin is inherently linear due to the anonymity)\n>\n> Verification does *not* need to be done by every node on every\n> transaction. Make the act of creating a transaction cost something and\n> include the previous state of the accumulator as part of a transaction.\n> Participants verify some subset of all transactions, and should they\n> find fraud they broadcast a proof. Optionally, but highly recomended,\n> make it profitable to find fraud, being careful to ensure that it's\n> never profitable to create fraud then find it yourself.\n>\n> Anyway Bitcoin is limited to 7tx/s average so even without probabalistic\n> verification it'd be perfectly acceptable to just limit transactions to\n> one every few seconds provided you keep your \"blocksize\" down to one\n> transaction so the rate isn't bursty. You're going to want to be\n> cautious about bandwidth requirements anyway to make sure participants\n> can stay anonymous.\n>\n> As you suggest creating zerocoins from provably sacrificing bitcoins is\n> the correct approach. The consensus algorithm should be that you\n> sacrifice zerocoins (specifically fractions there-of - note how I'm\n> assuming support for non-single-zerocoin amounts) and whatever chain has\n> the highest total sacrifice wins. One way to think about\n> proof-of-sacrifice is it's really proof-of-work, transferred. It also\n> has the *big* advantage that to double-spend, or for that matter 51% the\n> chain, you have to outspend everyone with a stake in the viability of\n> the blockchain: they can sacrifice their zerocoins to combat you. In the\n> case of a double-spend to rip off an online merchant the total amount\n> you could profit is the same as the total amount they would rationally\n> spend to stop you, and soon there will be collateral damage too\n> increasing the amount third-parties are willing to sacrifice to stop\n> you. You can't win.\n>\n> Of course, this does mean that even unsuccesful sacrifices need to be\n> costly. You can make this acceptable to users by allowing a sacrifice to\n> be reused, but only for the exact same transaction it was originally\n> committed to.\n>\n> Sacrifices in this manner are *not* proof of stake. You really are\n> giving up something by publishing the information that proves you made\n> the sacrifice as that information can always be included in the\n> consensus thereby taking away a limited resource. (your zerocoins) It's\n> more heavily dependent on jam-free networks, and doesn't play nice with\n> SPV, but zero-knowledge proofs will may help the latter. (you've got\n> Bitcoin itself to act as a random beacon remember)\n>\n> Speaking of, another similar approach is to take advantage of how a\n> Bitcoin sacrifice can be made publicly visible. Create a txout of some\n> value like the following:\n>\n>     OP_RETURN <prev-ztc-blockhash> <blockhash> <ztc-created>\n>\n> Now even if you fail to publish your blocks, at least the whole world\n> knows how much they need to outspend to be sure you can't 51% attack the\n> network. This approach and not-btc sacrifices can go hand in hand too,\n> especially if nodes follow rules where they consider btc txout\n> sacrifices as \"fixed\" and only subject to change by the bitcoin\n> blockchain re-organizing. Advantages and disadvantages to both\n> approaches. (remember that visible tx's can be censored by miners)\n>\n> Sacrifice to mining fees may be acceptable in the future too, but only\n> if OP_DEPTH is implemented so as to not give Bitcoin miners bad\n> incentives. (the sacrificed coins should go to fees *months* or even\n> *years* after they have been sacrificed)\n>\n> Turning zerocoins back into Bitcoins is just supply and demand: sell\n> them. You'll always lose a bit given by definition the maximum exchange\n> rate is 1:1, but anonymity may be worth it. Others have written about\n> cross-chain trading protocols, and I'll point out they are easier to\n> implement if one chain has full visibility into what's happening on the\n> other; zerocoin is most likely to be implemented as an extension to the\n> bitcoin client itself.\n>\n> Finally if the transaction rate is too slow there's nothing wrong with\n> running multiple parallel zerocoin blockchains, although given the\n> usecase of moving your funds through zerocoin for anonymity, and using\n> the clean coins that come out the other side, there's no reason to think\n> the zerocoin chain transaction rate needs to be especially high anyway.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 0000000000000013b2f7ee77027f583b765ad9811dfe3d0adc801e295fd9acdf\n>\n\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2013-07-13T09:53:44",
                "message_text_only": "Sorry about that.\nMaybe more important, what's wrong with bitcoin and zerocoin being\ndifferent currencies with an exchange rate completely decided by the\nmarket instead of trying to force 1:1 ???\n\n\nOn 7/13/13, Jorge Tim\u00f3n <jtimon at monetize.io> wrote:\n> I'm not sure I understand the whole proposal, but it seems to me that\n> having different characteristics, bitcoins and zerocoins would be\n> different currencies.\n> I don't see the need to peg zerocoins to bitcoins.\n> It is great to have an anonymous p2p currency, maybe some bitcoin\n> users that use bitcoin because of the transparency they allow (public\n> funds expenditures could be more transparent than they have ever been)\n> don't like this hard-fork. Well, maybe this is not the main reason,\n> but I think this could be highly controversial.\n> Maybe everybody likes it, but can you expand more on the\n> justifications to peg the two currencies?\n> If you're requiring one chain look at the othe for validations (miners\n> will have to validate both to mine btc) you don't need the cross-chain\n> contract, you can do it better.\n>\n> Instead of doing this:\n>\n> https://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains\n>\n> You could do something like this:\n>\n> https://bitcointalk.org/index.php?topic=31643.0\n>\n> This very idea has been proposed recently by othe people, but I can't\n> find where.\n>\n> The problem with this is of course scalabilty. Once you do it for what\n> chain, why not the others?\n> You can't validate 100 chains to mine bitcoin even if they're all\n> merged mined: that's asking miners too much.\n> If zerocoin enjoys this privilege why not, for example?\n>\n> As some of you may know, Mark Friedenbach and I are working on a\n> protocol modification to support issuance of arbitrary assets. Would\n> be something like colored coins but better, we're calling it\n> FreiMarkets. Of course these assets are not p2p like bitcoin or\n> freicoin themselves: they have a centralized issuer.\n> But if you allowed to sacrifice real bitcoins (as opposed to IOUs\n> denominated in BTC like you have, for example, in ripple) so they\n> appear in Freicoin's chain and turn them back, you could have p2p\n> bitcoins inside Freicoin's chain.\n> Maybe ripplers want that too. If FreiMarkets prove to work well on\n> freicoin and be scalable enough, maybe a lot of scamcoins apply the\n> hardfork too and they want to have p2p btc in their chain as well.\n>\n> Maybe I could have explained this without even mentioning FreiMarkets,\n> but my point is that you're asking for a lot like it was nothing.\n> Zerocoin-bitcoin fungibility hardfork is opening a little pandora's\n> box. Are we ready?\n>\n> I was waiting for others to comment and I'm surprised that no one else\n> has made any objection yet. But if no one's going to point out the\n> controvery that is so obvious to me, I feel almost like a\n> responsability to act like a Devil's advocate here.\n> So if you make bitcoin and zerocoin fungible, I want bitcoins to be\n> transferrable to freicoin's chain. And I warn you there will be many\n> more people asking for the same thing on other chains. What criteria\n> will we have to say yes or no?\n> More\n>\n>\n>\n> On 7/12/13, Peter Todd <pete at petertodd.org> wrote:\n>> On Fri, Jul 05, 2013 at 04:01:40PM +0200, Adam Back wrote:\n>>> Do people think that should work?  It seems to me it should with\n>>> minimal,\n>>> bitcoin changes.  I think the rule for either-or mining should be as\n>>> simple\n>>> as skipping the value / double-spend validation of the blocks that are\n>>> zerocoin mining blocks.  Obviously zerocoin blocks can themselves end up\n>>> on\n>>> forks, that get resolved, but that fork resolution can perhaps be\n>>> shared?\n>>>\n>>> (Because the fork resolution is simply to accept the longest fork).\n>>\n>> Yeah, there's been a lot of doom and gloom about zerocoin that is\n>> frankly unwarrented. For instance people seem to think it's impossible\n>> to make a blockchain with zerocoin due to the long time it takes to\n>> verify transactions, about 1.5 seconds, and never realize that\n>> verification can be parallelized.\n>>\n>> Anyway the way to do it is to get out of the model of large blocks and\n>> think about individual transactions. Make each transaction into its own\n>> block, and have each transaction refer to the previous one in history.\n>> (zerocoin is inherently linear due to the anonymity)\n>>\n>> Verification does *not* need to be done by every node on every\n>> transaction. Make the act of creating a transaction cost something and\n>> include the previous state of the accumulator as part of a transaction.\n>> Participants verify some subset of all transactions, and should they\n>> find fraud they broadcast a proof. Optionally, but highly recomended,\n>> make it profitable to find fraud, being careful to ensure that it's\n>> never profitable to create fraud then find it yourself.\n>>\n>> Anyway Bitcoin is limited to 7tx/s average so even without probabalistic\n>> verification it'd be perfectly acceptable to just limit transactions to\n>> one every few seconds provided you keep your \"blocksize\" down to one\n>> transaction so the rate isn't bursty. You're going to want to be\n>> cautious about bandwidth requirements anyway to make sure participants\n>> can stay anonymous.\n>>\n>> As you suggest creating zerocoins from provably sacrificing bitcoins is\n>> the correct approach. The consensus algorithm should be that you\n>> sacrifice zerocoins (specifically fractions there-of - note how I'm\n>> assuming support for non-single-zerocoin amounts) and whatever chain has\n>> the highest total sacrifice wins. One way to think about\n>> proof-of-sacrifice is it's really proof-of-work, transferred. It also\n>> has the *big* advantage that to double-spend, or for that matter 51% the\n>> chain, you have to outspend everyone with a stake in the viability of\n>> the blockchain: they can sacrifice their zerocoins to combat you. In the\n>> case of a double-spend to rip off an online merchant the total amount\n>> you could profit is the same as the total amount they would rationally\n>> spend to stop you, and soon there will be collateral damage too\n>> increasing the amount third-parties are willing to sacrifice to stop\n>> you. You can't win.\n>>\n>> Of course, this does mean that even unsuccesful sacrifices need to be\n>> costly. You can make this acceptable to users by allowing a sacrifice to\n>> be reused, but only for the exact same transaction it was originally\n>> committed to.\n>>\n>> Sacrifices in this manner are *not* proof of stake. You really are\n>> giving up something by publishing the information that proves you made\n>> the sacrifice as that information can always be included in the\n>> consensus thereby taking away a limited resource. (your zerocoins) It's\n>> more heavily dependent on jam-free networks, and doesn't play nice with\n>> SPV, but zero-knowledge proofs will may help the latter. (you've got\n>> Bitcoin itself to act as a random beacon remember)\n>>\n>> Speaking of, another similar approach is to take advantage of how a\n>> Bitcoin sacrifice can be made publicly visible. Create a txout of some\n>> value like the following:\n>>\n>>     OP_RETURN <prev-ztc-blockhash> <blockhash> <ztc-created>\n>>\n>> Now even if you fail to publish your blocks, at least the whole world\n>> knows how much they need to outspend to be sure you can't 51% attack the\n>> network. This approach and not-btc sacrifices can go hand in hand too,\n>> especially if nodes follow rules where they consider btc txout\n>> sacrifices as \"fixed\" and only subject to change by the bitcoin\n>> blockchain re-organizing. Advantages and disadvantages to both\n>> approaches. (remember that visible tx's can be censored by miners)\n>>\n>> Sacrifice to mining fees may be acceptable in the future too, but only\n>> if OP_DEPTH is implemented so as to not give Bitcoin miners bad\n>> incentives. (the sacrificed coins should go to fees *months* or even\n>> *years* after they have been sacrificed)\n>>\n>> Turning zerocoins back into Bitcoins is just supply and demand: sell\n>> them. You'll always lose a bit given by definition the maximum exchange\n>> rate is 1:1, but anonymity may be worth it. Others have written about\n>> cross-chain trading protocols, and I'll point out they are easier to\n>> implement if one chain has full visibility into what's happening on the\n>> other; zerocoin is most likely to be implemented as an extension to the\n>> bitcoin client itself.\n>>\n>> Finally if the transaction rate is too slow there's nothing wrong with\n>> running multiple parallel zerocoin blockchains, although given the\n>> usecase of moving your funds through zerocoin for anonymity, and using\n>> the clean coins that come out the other side, there's no reason to think\n>> the zerocoin chain transaction rate needs to be especially high anyway.\n>>\n>> --\n>> 'peter'[:-1]@petertodd.org\n>> 0000000000000013b2f7ee77027f583b765ad9811dfe3d0adc801e295fd9acdf\n>>\n>\n>\n> --\n> Jorge Tim\u00f3n\n>\n> http://freico.in/\n>\n\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "Peter Vessenes",
                "date": "2013-07-13T18:32:39",
                "message_text_only": "One very real issue for alt-currencies that don't peg to Bitcoin is that\nmarket liquidity is a bitch. By almost all standards current global Bitcoin\nliquidity is already very, very low. Too low for many transactions that\ncome across my desk at least.\n\nThere are a lot of reasons for that low liquidity, but to try and float a\nnew pair for which the likely initial counter-asset is going to be Bitcoin\nmeans minuscule liquidity.\n\nPeter\n\n\n\nOn Sat, Jul 13, 2013 at 2:53 AM, Jorge Tim\u00f3n <jtimon at monetize.io> wrote:\n\n> Sorry about that.\n> Maybe more important, what's wrong with bitcoin and zerocoin being\n> different currencies with an exchange rate completely decided by the\n> market instead of trying to force 1:1 ???\n>\n>\n> On 7/13/13, Jorge Tim\u00f3n <jtimon at monetize.io> wrote:\n> > I'm not sure I understand the whole proposal, but it seems to me that\n> > having different characteristics, bitcoins and zerocoins would be\n> > different currencies.\n> > I don't see the need to peg zerocoins to bitcoins.\n> > It is great to have an anonymous p2p currency, maybe some bitcoin\n> > users that use bitcoin because of the transparency they allow (public\n> > funds expenditures could be more transparent than they have ever been)\n> > don't like this hard-fork. Well, maybe this is not the main reason,\n> > but I think this could be highly controversial.\n> > Maybe everybody likes it, but can you expand more on the\n> > justifications to peg the two currencies?\n> > If you're requiring one chain look at the othe for validations (miners\n> > will have to validate both to mine btc) you don't need the cross-chain\n> > contract, you can do it better.\n> >\n> > Instead of doing this:\n> >\n> > https://en.bitcoin.it/wiki/Contracts#Example_5:_Trading_across_chains\n> >\n> > You could do something like this:\n> >\n> > https://bitcointalk.org/index.php?topic=31643.0\n> >\n> > This very idea has been proposed recently by othe people, but I can't\n> > find where.\n> >\n> > The problem with this is of course scalabilty. Once you do it for what\n> > chain, why not the others?\n> > You can't validate 100 chains to mine bitcoin even if they're all\n> > merged mined: that's asking miners too much.\n> > If zerocoin enjoys this privilege why not, for example?\n> >\n> > As some of you may know, Mark Friedenbach and I are working on a\n> > protocol modification to support issuance of arbitrary assets. Would\n> > be something like colored coins but better, we're calling it\n> > FreiMarkets. Of course these assets are not p2p like bitcoin or\n> > freicoin themselves: they have a centralized issuer.\n> > But if you allowed to sacrifice real bitcoins (as opposed to IOUs\n> > denominated in BTC like you have, for example, in ripple) so they\n> > appear in Freicoin's chain and turn them back, you could have p2p\n> > bitcoins inside Freicoin's chain.\n> > Maybe ripplers want that too. If FreiMarkets prove to work well on\n> > freicoin and be scalable enough, maybe a lot of scamcoins apply the\n> > hardfork too and they want to have p2p btc in their chain as well.\n> >\n> > Maybe I could have explained this without even mentioning FreiMarkets,\n> > but my point is that you're asking for a lot like it was nothing.\n> > Zerocoin-bitcoin fungibility hardfork is opening a little pandora's\n> > box. Are we ready?\n> >\n> > I was waiting for others to comment and I'm surprised that no one else\n> > has made any objection yet. But if no one's going to point out the\n> > controvery that is so obvious to me, I feel almost like a\n> > responsability to act like a Devil's advocate here.\n> > So if you make bitcoin and zerocoin fungible, I want bitcoins to be\n> > transferrable to freicoin's chain. And I warn you there will be many\n> > more people asking for the same thing on other chains. What criteria\n> > will we have to say yes or no?\n> > More\n> >\n> >\n> >\n> > On 7/12/13, Peter Todd <pete at petertodd.org> wrote:\n> >> On Fri, Jul 05, 2013 at 04:01:40PM +0200, Adam Back wrote:\n> >>> Do people think that should work?  It seems to me it should with\n> >>> minimal,\n> >>> bitcoin changes.  I think the rule for either-or mining should be as\n> >>> simple\n> >>> as skipping the value / double-spend validation of the blocks that are\n> >>> zerocoin mining blocks.  Obviously zerocoin blocks can themselves end\n> up\n> >>> on\n> >>> forks, that get resolved, but that fork resolution can perhaps be\n> >>> shared?\n> >>>\n> >>> (Because the fork resolution is simply to accept the longest fork).\n> >>\n> >> Yeah, there's been a lot of doom and gloom about zerocoin that is\n> >> frankly unwarrented. For instance people seem to think it's impossible\n> >> to make a blockchain with zerocoin due to the long time it takes to\n> >> verify transactions, about 1.5 seconds, and never realize that\n> >> verification can be parallelized.\n> >>\n> >> Anyway the way to do it is to get out of the model of large blocks and\n> >> think about individual transactions. Make each transaction into its own\n> >> block, and have each transaction refer to the previous one in history.\n> >> (zerocoin is inherently linear due to the anonymity)\n> >>\n> >> Verification does *not* need to be done by every node on every\n> >> transaction. Make the act of creating a transaction cost something and\n> >> include the previous state of the accumulator as part of a transaction.\n> >> Participants verify some subset of all transactions, and should they\n> >> find fraud they broadcast a proof. Optionally, but highly recomended,\n> >> make it profitable to find fraud, being careful to ensure that it's\n> >> never profitable to create fraud then find it yourself.\n> >>\n> >> Anyway Bitcoin is limited to 7tx/s average so even without probabalistic\n> >> verification it'd be perfectly acceptable to just limit transactions to\n> >> one every few seconds provided you keep your \"blocksize\" down to one\n> >> transaction so the rate isn't bursty. You're going to want to be\n> >> cautious about bandwidth requirements anyway to make sure participants\n> >> can stay anonymous.\n> >>\n> >> As you suggest creating zerocoins from provably sacrificing bitcoins is\n> >> the correct approach. The consensus algorithm should be that you\n> >> sacrifice zerocoins (specifically fractions there-of - note how I'm\n> >> assuming support for non-single-zerocoin amounts) and whatever chain has\n> >> the highest total sacrifice wins. One way to think about\n> >> proof-of-sacrifice is it's really proof-of-work, transferred. It also\n> >> has the *big* advantage that to double-spend, or for that matter 51% the\n> >> chain, you have to outspend everyone with a stake in the viability of\n> >> the blockchain: they can sacrifice their zerocoins to combat you. In the\n> >> case of a double-spend to rip off an online merchant the total amount\n> >> you could profit is the same as the total amount they would rationally\n> >> spend to stop you, and soon there will be collateral damage too\n> >> increasing the amount third-parties are willing to sacrifice to stop\n> >> you. You can't win.\n> >>\n> >> Of course, this does mean that even unsuccesful sacrifices need to be\n> >> costly. You can make this acceptable to users by allowing a sacrifice to\n> >> be reused, but only for the exact same transaction it was originally\n> >> committed to.\n> >>\n> >> Sacrifices in this manner are *not* proof of stake. You really are\n> >> giving up something by publishing the information that proves you made\n> >> the sacrifice as that information can always be included in the\n> >> consensus thereby taking away a limited resource. (your zerocoins) It's\n> >> more heavily dependent on jam-free networks, and doesn't play nice with\n> >> SPV, but zero-knowledge proofs will may help the latter. (you've got\n> >> Bitcoin itself to act as a random beacon remember)\n> >>\n> >> Speaking of, another similar approach is to take advantage of how a\n> >> Bitcoin sacrifice can be made publicly visible. Create a txout of some\n> >> value like the following:\n> >>\n> >>     OP_RETURN <prev-ztc-blockhash> <blockhash> <ztc-created>\n> >>\n> >> Now even if you fail to publish your blocks, at least the whole world\n> >> knows how much they need to outspend to be sure you can't 51% attack the\n> >> network. This approach and not-btc sacrifices can go hand in hand too,\n> >> especially if nodes follow rules where they consider btc txout\n> >> sacrifices as \"fixed\" and only subject to change by the bitcoin\n> >> blockchain re-organizing. Advantages and disadvantages to both\n> >> approaches. (remember that visible tx's can be censored by miners)\n> >>\n> >> Sacrifice to mining fees may be acceptable in the future too, but only\n> >> if OP_DEPTH is implemented so as to not give Bitcoin miners bad\n> >> incentives. (the sacrificed coins should go to fees *months* or even\n> >> *years* after they have been sacrificed)\n> >>\n> >> Turning zerocoins back into Bitcoins is just supply and demand: sell\n> >> them. You'll always lose a bit given by definition the maximum exchange\n> >> rate is 1:1, but anonymity may be worth it. Others have written about\n> >> cross-chain trading protocols, and I'll point out they are easier to\n> >> implement if one chain has full visibility into what's happening on the\n> >> other; zerocoin is most likely to be implemented as an extension to the\n> >> bitcoin client itself.\n> >>\n> >> Finally if the transaction rate is too slow there's nothing wrong with\n> >> running multiple parallel zerocoin blockchains, although given the\n> >> usecase of moving your funds through zerocoin for anonymity, and using\n> >> the clean coins that come out the other side, there's no reason to think\n> >> the zerocoin chain transaction rate needs to be especially high anyway.\n> >>\n> >> --\n> >> 'peter'[:-1]@petertodd.org\n> >> 0000000000000013b2f7ee77027f583b765ad9811dfe3d0adc801e295fd9acdf\n> >>\n> >\n> >\n> > --\n> > Jorge Tim\u00f3n\n> >\n> > http://freico.in/\n> >\n>\n>\n> --\n> Jorge Tim\u00f3n\n>\n> http://freico.in/\n>\n>\n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \n\n------------------------------\n\n[image: CoinLab Logo]PETER VESSENES\nCEO\n\n*peter at coinlab.com * /  206.486.6856  / SKYPE: vessenes\n900 Winslow Way East / SUITE 100  /  Bainbridge Island, WA 98110\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130713/8d91701d/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-15T09:51:07",
                "message_text_only": "On Sat, Jul 13, 2013 at 11:32:39AM -0700, Peter Vessenes wrote:\n> One very real issue for alt-currencies that don't peg to Bitcoin is that\n> market liquidity is a bitch. By almost all standards current global Bitcoin\n> liquidity is already very, very low. Too low for many transactions that\n> come across my desk at least.\n> \n> There are a lot of reasons for that low liquidity, but to try and float a\n> new pair for which the likely initial counter-asset is going to be Bitcoin\n> means minuscule liquidity.\n\nBeing able to have automated Bitcoin<->Zerocoin P2P trading without an\nexchange is also significantly more desirable from a privacy standpoint.\nBasically it reduces the privacy risks of doing the exchange to spending\nthe Zerocoins in the first place.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000878c30a45104c48fd4e8037cb5b3ba1e14dc4d8bef72eff1be\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130715/7104a3f2/attachment.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2013-07-15T13:05:52",
                "message_text_only": "One way sacrifice (btc to zerocoin) is a non-issue since there's no\nmodification required for bitcoin and you can't do anything to prevent\nit anyway.\nThe controversial thing is sacrificing something outside bitcoin's\nchain and new btc appearing.\n\nOn merged mining. It is true that \"merged attacking\" the other chain\nis free, but it is still more profitable to just follow the rules and\nmine the other coin!!\nIf someone considers that something he can sell in a market for btc is\n\"negative value\"...well, he's just dammed stupid. Proof of work is\ndesigned for rational actors, if you stop assuming miners are more or\nless rational everything falls apart. It is possible that the \"extra\nvalue\" is too little for some miners to bother. But the extra costs of\nvalidating something else are so little compared to chance-hashing\nthat miners not merged mining namecoin right now are just stupid\n(irrational agents). You can merged mine and sell for btc right away.\n\nOn prime proof of work...for me it's interseting only because it's\nmoving towards SCIP-based mining but that should be the goal. Like\nMark said, \"let's cure cancer\" while mining. That would end all\n\"mining is wasteful\" arguments about this great security system. This\nwould make Ripple's consensus mechanism less attractive. People\ntalking about new scrypts harder to ASIC-mine when that's the elephant\nin the room...\nSorry, I'm going off-topic.\nSCIP-based merged mining for the win.\n\n\n\nOn 7/15/13, Peter Todd <pete at petertodd.org> wrote:\n> On Sat, Jul 13, 2013 at 11:32:39AM -0700, Peter Vessenes wrote:\n>> One very real issue for alt-currencies that don't peg to Bitcoin is that\n>> market liquidity is a bitch. By almost all standards current global\n>> Bitcoin\n>> liquidity is already very, very low. Too low for many transactions that\n>> come across my desk at least.\n>>\n>> There are a lot of reasons for that low liquidity, but to try and float a\n>> new pair for which the likely initial counter-asset is going to be\n>> Bitcoin\n>> means minuscule liquidity.\n>\n> Being able to have automated Bitcoin<->Zerocoin P2P trading without an\n> exchange is also significantly more desirable from a privacy standpoint.\n> Basically it reduces the privacy risks of doing the exchange to spending\n> the Zerocoins in the first place.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 00000000000000878c30a45104c48fd4e8037cb5b3ba1e14dc4d8bef72eff1be\n>\n\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-15T20:29:09",
                "message_text_only": "On Mon, Jul 15, 2013 at 03:05:52PM +0200, Jorge Tim\u00f3n wrote:\n> One way sacrifice (btc to zerocoin) is a non-issue since there's no\n> modification required for bitcoin and you can't do anything to prevent\n> it anyway.\n> The controversial thing is sacrificing something outside bitcoin's\n> chain and new btc appearing.\n\nWhich is why I'm not proposing that.\n\n> On merged mining. It is true that \"merged attacking\" the other chain\n> is free, but it is still more profitable to just follow the rules and\n> mine the other coin!!\n> If someone considers that something he can sell in a market for btc is\n> \"negative value\"...well, he's just dammed stupid. Proof of work is\n> designed for rational actors, if you stop assuming miners are more or\n> less rational everything falls apart. It is possible that the \"extra\n> value\" is too little for some miners to bother. But the extra costs of\n> validating something else are so little compared to chance-hashing\n> that miners not merged mining namecoin right now are just stupid\n> (irrational agents). You can merged mine and sell for btc right away.\n\nYou are assuming value is the same for everyone - it's not.\n\nIf I mine in a jurisdiction where zerocoin is banned, and the blocks I\nmine are public, the value of zerocoin blocks to me are at best zero.\nEqually it would be easy for the local authorities to ask that I merge\nmine zerocoin blocks to attack the chain - it doesn't cost me anything\nso what's the harm? I may even choose to do so to preserve the value of\nthe coins I can mine legally - alt-coins are competition.\n\nIncedentally keep in mind it is likely that in the future pools will not\nallow miners to modify the work units they receive in any way as a means\nof combating block-withholding fraud; there may not be very many people\nwilling or able to honestly merge-mine any given chain.\n\nProof-of-sacrifice can be done in a way that is opaque to the master\nblockchain by creating txouts that look no different from any other\ntxout. Hopefully not required, but it would be a good strategy against\ncensorship of sacrifice-based chains.\n\n> On prime proof of work...for me it's interseting only because it's\n> moving towards SCIP-based mining but that should be the goal. Like\n> Mark said, \"let's cure cancer\" while mining. That would end all\n> \"mining is wasteful\" arguments about this great security system. This\n> would make Ripple's consensus mechanism less attractive. People\n> talking about new scrypts harder to ASIC-mine when that's the elephant\n> in the room...\n> Sorry, I'm going off-topic.\n> SCIP-based merged mining for the win.\n\nSCIP is for now a dream. Give it a few more years and see how the\ntechnology shakes out.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000582cc323897a582e9368a5c3dfbcdcf73e78b261703e1bd1ba\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130715/53ad02b2/attachment.sig>"
            },
            {
                "author": "Peter Vessenes",
                "date": "2013-07-16T03:54:23",
                "message_text_only": "I'm at the Aspen Institute right now talking about Bitcoin and I mentioned\nthe perils of starting an alt-chain based on proof of work that pool\noperators might attack; funny synchronicity!\n\nPeter\n\n\nOn Mon, Jul 15, 2013 at 2:29 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> On Mon, Jul 15, 2013 at 03:05:52PM +0200, Jorge Tim\u00f3n wrote:\n> > One way sacrifice (btc to zerocoin) is a non-issue since there's no\n> > modification required for bitcoin and you can't do anything to prevent\n> > it anyway.\n> > The controversial thing is sacrificing something outside bitcoin's\n> > chain and new btc appearing.\n>\n> Which is why I'm not proposing that.\n>\n> > On merged mining. It is true that \"merged attacking\" the other chain\n> > is free, but it is still more profitable to just follow the rules and\n> > mine the other coin!!\n> > If someone considers that something he can sell in a market for btc is\n> > \"negative value\"...well, he's just dammed stupid. Proof of work is\n> > designed for rational actors, if you stop assuming miners are more or\n> > less rational everything falls apart. It is possible that the \"extra\n> > value\" is too little for some miners to bother. But the extra costs of\n> > validating something else are so little compared to chance-hashing\n> > that miners not merged mining namecoin right now are just stupid\n> > (irrational agents). You can merged mine and sell for btc right away.\n>\n> You are assuming value is the same for everyone - it's not.\n>\n> If I mine in a jurisdiction where zerocoin is banned, and the blocks I\n> mine are public, the value of zerocoin blocks to me are at best zero.\n> Equally it would be easy for the local authorities to ask that I merge\n> mine zerocoin blocks to attack the chain - it doesn't cost me anything\n> so what's the harm? I may even choose to do so to preserve the value of\n> the coins I can mine legally - alt-coins are competition.\n>\n> Incedentally keep in mind it is likely that in the future pools will not\n> allow miners to modify the work units they receive in any way as a means\n> of combating block-withholding fraud; there may not be very many people\n> willing or able to honestly merge-mine any given chain.\n>\n> Proof-of-sacrifice can be done in a way that is opaque to the master\n> blockchain by creating txouts that look no different from any other\n> txout. Hopefully not required, but it would be a good strategy against\n> censorship of sacrifice-based chains.\n>\n> > On prime proof of work...for me it's interseting only because it's\n> > moving towards SCIP-based mining but that should be the goal. Like\n> > Mark said, \"let's cure cancer\" while mining. That would end all\n> > \"mining is wasteful\" arguments about this great security system. This\n> > would make Ripple's consensus mechanism less attractive. People\n> > talking about new scrypts harder to ASIC-mine when that's the elephant\n> > in the room...\n> > Sorry, I'm going off-topic.\n> > SCIP-based merged mining for the win.\n>\n> SCIP is for now a dream. Give it a few more years and see how the\n> technology shakes out.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 00000000000000582cc323897a582e9368a5c3dfbcdcf73e78b261703e1bd1ba\n>\n\n\n\n-- \n\n------------------------------\n\n[image: CoinLab Logo]PETER VESSENES\nCEO\n\n*peter at coinlab.com * /  206.486.6856  / SKYPE: vessenes\n900 Winslow Way East / SUITE 100  /  Bainbridge Island, WA 98110\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130715/d32dcc9b/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2013-07-13T18:42:27",
                "message_text_only": "On Sat, Jul 13, 2013 at 11:51:14AM +0200, Jorge Tim\u00f3n wrote:\n>I don't see the need to peg zerocoins to bitcoins.\n\nWithout a bitcoin peg on the creation cost of zerocoins, it is hard for a\nnew alt-coin to have a stable value.  Bitcoin itself is volatile enough.\n\nGenerally the available compute for mining is what it is, adding more\nalt-coins just dillutes the compute available for a given coin.  (Modulo\ndifferent mining functions like scrypt vs hashcash there is some\nnon-overlapping available compute because different hardware is more\nefficient, or even cost-effective at all).\n\nMerge mining is less desirable for the alt-coin - its mining is essentially\nfree, on top of bitcoin mining.  Cost free is maybe a weaker starting point\nbootstrapping digital scarcity based market price.\n\nI think that serves to explain why bitcoin sacrifice as a mining method is a\nsimple and stable cost starting point for an alt-coin.  \n\n>I think this could be highly controversial [alt-coin pegging].  Maybe\n>everybody likes it, but can you expand more on the justifications to peg\n>the two currencies?\n\nBitcoin sacrifice related applications do not require code changes to\nbitcoin itself, which avoids the discussion about fairness of which alt-coin\nis supported, and about sacrifice-based pegging being added or not.\n\nI dont think it necessarily hurts investors in bitcoins as it just creates\nsome deflation in the supply of bitcoin.\n\n>If you're requiring one chain look at the othe for validations (miners\n>will have to validate both to mine btc) you don't need the cross-chain\n>contract, you can do it better.\n\nYou can sacrifice bitcoins as a way to mine zerocoins without having the\nbitcoin network validate zerocoin.  For all bitcoin clients care the\nsacrifice could be useless.\n\nBi-directional sacrifice is more tricky.  ie being allowed to re-create\npreviously destroyed bitcoins, based on the sacrifice of zerocoin.  That\nwould have other coin validation requirements.\n\nBut I am not sure 1:1 is necessarily far from the right price - the price is\narbitrary for a divisible token, so 1:1 is as good as any.  And the price\nequality depends on the extra functionality or value from the\ncharacteristics of the other coin.  The only thing I can see is zerocoin is\nmore cpu expensive to validate, the coins are bigger, but provide more\npayment privacy (and so less taint).  Removing taint may mean that zercoins\nshould be worth more.  However if any tainted bitcoins can be converted to\nzerocoin via sacrifice at 1:1, maybe the taint issue goes away - any coins\nthat are tainted to the point of value-loss will be converted to zerocoin,\nand consequently the price to convert back should also be 1:1?\n\n>You could do something like this:\n>\n>https://bitcointalk.org/index.php?topic=31643.0\n\np2p transfer is a good idea.\n\nAdam"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2013-07-14T11:18:37",
                "message_text_only": "I was talking about bi-directional sacrifice.\nIf zerocoin has it, I want the same on top of freicoin so that btc/frc\ncan be traded p2p.\nWhy zerocoin and not the 20 other altchains are going to ask for it?\nRipplers will want it too, why not?\n\nAll the arguments in favor of this pegging use zerocoin's point of\nview. Sure it would be much better for it, but are additional costs to\nthe bitcoin network and you cannot do it with every chain.\n\nMerged mining is not mining the coin for free. The total reward (ie\nbtc + frc + nmc + dvc) should tend to equal the mining costs. But the\nvalue comes from demand, not costs. So if people demand it more it\nprice will rise no matter how is mined. And if the price rises it will\nmake sense to spend more on mining.\n\"Bitcoins are worth because it costs to mine them\" is a Marxian labor\nthory of value argument.\nIt's the other way arround as Menger taught us.\n\n\nOn 7/13/13, Adam Back <adam at cypherspace.org> wrote:\n> On Sat, Jul 13, 2013 at 11:51:14AM +0200, Jorge Tim\u00f3n wrote:\n>>I don't see the need to peg zerocoins to bitcoins.\n>\n> Without a bitcoin peg on the creation cost of zerocoins, it is hard for a\n> new alt-coin to have a stable value.  Bitcoin itself is volatile enough.\n>\n> Generally the available compute for mining is what it is, adding more\n> alt-coins just dillutes the compute available for a given coin.  (Modulo\n> different mining functions like scrypt vs hashcash there is some\n> non-overlapping available compute because different hardware is more\n> efficient, or even cost-effective at all).\n>\n> Merge mining is less desirable for the alt-coin - its mining is essentially\n> free, on top of bitcoin mining.  Cost free is maybe a weaker starting point\n> bootstrapping digital scarcity based market price.\n>\n> I think that serves to explain why bitcoin sacrifice as a mining method is\n> a\n> simple and stable cost starting point for an alt-coin.\n>\n>>I think this could be highly controversial [alt-coin pegging].  Maybe\n>>everybody likes it, but can you expand more on the justifications to peg\n>>the two currencies?\n>\n> Bitcoin sacrifice related applications do not require code changes to\n> bitcoin itself, which avoids the discussion about fairness of which\n> alt-coin\n> is supported, and about sacrifice-based pegging being added or not.\n>\n> I dont think it necessarily hurts investors in bitcoins as it just creates\n> some deflation in the supply of bitcoin.\n>\n>>If you're requiring one chain look at the othe for validations (miners\n>>will have to validate both to mine btc) you don't need the cross-chain\n>>contract, you can do it better.\n>\n> You can sacrifice bitcoins as a way to mine zerocoins without having the\n> bitcoin network validate zerocoin.  For all bitcoin clients care the\n> sacrifice could be useless.\n>\n> Bi-directional sacrifice is more tricky.  ie being allowed to re-create\n> previously destroyed bitcoins, based on the sacrifice of zerocoin.  That\n> would have other coin validation requirements.\n>\n> But I am not sure 1:1 is necessarily far from the right price - the price\n> is\n> arbitrary for a divisible token, so 1:1 is as good as any.  And the price\n> equality depends on the extra functionality or value from the\n> characteristics of the other coin.  The only thing I can see is zerocoin is\n> more cpu expensive to validate, the coins are bigger, but provide more\n> payment privacy (and so less taint).  Removing taint may mean that zercoins\n> should be worth more.  However if any tainted bitcoins can be converted to\n> zerocoin via sacrifice at 1:1, maybe the taint issue goes away - any coins\n> that are tainted to the point of value-loss will be converted to zerocoin,\n> and consequently the price to convert back should also be 1:1?\n>\n>>You could do something like this:\n>>\n>>https://bitcointalk.org/index.php?topic=31643.0\n>\n> p2p transfer is a good idea.\n>\n> Adam\n>\n\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "John Dillon",
                "date": "2013-07-14T19:22:10",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn Sun, Jul 14, 2013 at 11:18 AM, Jorge Tim\u00f3n <jtimon at monetize.io> wrote:\n> All the arguments in favor of this pegging use zerocoin's point of\n> view. Sure it would be much better for it, but are additional costs to\n> the bitcoin network and you cannot do it with every chain.\n\nSeems that Peter is describing a system that requires no changes at all to the\nBitcoin codebase and thus there are no costs whatsoever.\n\nPeter: I'm a bit confused by this concept of \"bi-directional sacrifice\" though,\nI assume there exists only a sacrifice in one direction right? Wouldn't selling\na zerocoin be just a matter of giving zerocoin a rule so that the zerocoin tx\nmoving it to the new owner only happens if a specific form of bitcoin tx\nhappens too?\n\n> Merged mining is not mining the coin for free. The total reward (ie\n> btc + frc + nmc + dvc) should tend to equal the mining costs. But the\n> value comes from demand, not costs. So if people demand it more it\n> price will rise no matter how is mined. And if the price rises it will\n> make sense to spend more on mining.\n> \"Bitcoins are worth because it costs to mine them\" is a Marxian labor\n> thory of value argument.\n> It's the other way arround as Menger taught us.\n\nMerge mining is very much mining a coin for free. Ask not what the total reward\nis, ask that the marginal cost of merge mining an additional coin is. The issue\nis that unless there is a cost to mining a *invalid* block the merge mined coin\nhas little protection from miners who mine invalid blocks, either maliciously\nor through negligence. If the coin isn't worth much, either because it's market\nvalue is low or the worth is negative to the malicious miner, your theories of\nvalue have nothing to do with the issue.\n\nGregory Maxwell has written about this issue before on the #bitcoin-dev IRC\nchannel and on bitcointalk as well if memory serves. I advise you to look up\nhis description of the problem, almost everything he writes on the topic of\ncrypto-coin theory is spot-on correct.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQEcBAEBCAAGBQJR4vpGAAoJEEWCsU4mNhiPwu0IAMrzkVfI0CQuNJRCR+jwhNts\njuEerApSSpBes6CjLBJJYZWDdMReSl6izqNDancnJygYc+Q5/IkwBispyZyeIVqY\nHbV+jyAFQeVaJBZp8N+ZUDfN9/35SkPb4Y30dkq6V76hBfl+59bWq4qG0dhiO915\nSBWAUPLspb5GOyu494GJUr4SPzgs9mAKfNGeQR2anOLj8Qam8Khfa4Zm5T5dX8WQ\nvBunUCLykPvWBC3nuTDBU5gQu4TGW9ivGB4p6yLr7MyaPQYZEnYGqgU/yIfAhnBj\nMfIfs6njPwhGMwteNmwLoS0VLRBFjWZDflquJ0NK6mNLR3c9yjOFMFPTTZFVinQ=\n=b40P\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-07-14T19:33:06",
                "message_text_only": "On Sunday, July 14, 2013 7:22:10 PM John Dillon wrote:\n> > Merged mining is not mining the coin for free. The total reward (ie\n> > btc + frc + nmc + dvc) should tend to equal the mining costs. But the\n> > value comes from demand, not costs. So if people demand it more it\n> > price will rise no matter how is mined. And if the price rises it will\n> > make sense to spend more on mining.\n> \n> Merge mining is very much mining a coin for free. Ask not what the total\n> reward is, ask that the marginal cost of merge mining an additional coin\n> is.\n\nBut the total reward is what mining will tend toward equalizing in costs.\nIn any case, the cryptocurrencies are neutral to cost of mining, or perhaps \neven benefit from it being as cheap as possible: if it's cheaper to mine, you \ncan get an even higher difficulty/security out of it.\n\n> The issue is that unless there is a cost to mining a *invalid* block\n> the merge mined coin has little protection from miners who mine invalid\n> blocks, either maliciously or through negligence. If the coin isn't worth\n> much, either because it's market value is low or the worth is negative to\n> the malicious miner, your theories of value have nothing to do with the\n> issue.\n\nInvalid blocks are rejected by validating clients in all circumstances.\n\nI suspect you may mean a block that doesn't include transactions you want \nconfirmed. In that case, you must not be paying sufficient fees for the miner \nto consider it worth their time, or must be doing something the miner \nconsiders fundamentally objectionable (in which case they won't be satisfied \nby any fee). But these miners, unless they are able to acquire over 50% of the \nhashrate (in which case the cryptocoin is compromised), are not the only ones \nmining blocks, and if another miner accepts your transactions there is no \nissue.\n\nLuke\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 1530 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130714/1f7fbc69/attachment.sig>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-07-14T19:42:06",
                "message_text_only": "On Sun, Jul 14, 2013 at 07:33:06PM +0000, Luke-Jr wrote:\n> > The issue is that unless there is a cost to mining a *invalid* block\n> > the merge mined coin has little protection from miners who mine invalid\n> > blocks, either maliciously or through negligence. If the coin isn't worth\n> > much, either because it's market value is low or the worth is negative to\n> > the malicious miner, your theories of value have nothing to do with the\n> > issue.\n> \n> Invalid blocks are rejected by validating clients in all circumstances.\n\nI don't think that's what John means.\n\nIf you have hash power for the parent chain, mining invalid blocks for the\nmerge-mined chain costs you nothing. Yes, they will be invalid, but you've\nlost nothing.\n\nThe basic assumption underlying mining security is that it is more profitable\nto collaborate with mining a chain (and profit from the block payout) than to\nattack it. In the case of merged mining, this assumption is not valid.\n\n-- \nPieter"
            },
            {
                "author": "John Dillon",
                "date": "2013-07-14T19:52:56",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn Sun, Jul 14, 2013 at 7:42 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> On Sun, Jul 14, 2013 at 07:33:06PM +0000, Luke-Jr wrote:\n>> Invalid blocks are rejected by validating clients in all circumstances.\n>\n> I don't think that's what John means.\n>\n> If you have hash power for the parent chain, mining invalid blocks for the\n> merge-mined chain costs you nothing. Yes, they will be invalid, but you've\n> lost nothing.\n>\n> The basic assumption underlying mining security is that it is more profitable\n> to collaborate with mining a chain (and profit from the block payout) than to\n> attack it. In the case of merged mining, this assumption is not valid.\n\nYou said it better than I did.\n\nEssentially I am worried about the chain being strangled at birth, merge-mining\nmakes doing so cost nothing for the attacker. With zerocoin this is a\nparticularly dangerous possibility due to those in the Bitcoin community who\nwould like to see Bitcoin continue to have poor privacy properties.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQEcBAEBCAAGBQJR4wF9AAoJEEWCsU4mNhiPtCgH/3QLvFer3QHNU7AP+nehwcgK\nQS3xLv60lvm+pYLVAp9xFyJ5SCHVGTPvWRBmoldk8xxh9ORHlNEsnrcx9ZONTJ4F\nja4Alp9MLZK5S8dKk2juJNdKziyRkQci/nNwuqepX5JjCIRNZq1lcW4Be4W7InPt\nLtrvp7lA03uNuAXxtlYnko4mEY5l1NiBp4BvhGZ6+GRdCltPeIk2m0NwLDHWd31t\nqFLnnPSw0/9FGVs7lOaWuxbMGwPzGrIu6TXm17dqgBsl+8JuP6zHFE1ccqIxKyb6\nTdf4yNvhsvE+qlTnmcQNxM9nMHL4uqBZqJR174fAKQzcNGzVLloqbmRqKzuw5o4=\n=leUJ\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-07-14T20:16:41",
                "message_text_only": "On Sunday, July 14, 2013 7:42:06 PM Pieter Wuille wrote:\n> On Sun, Jul 14, 2013 at 07:33:06PM +0000, Luke-Jr wrote:\n> > > The issue is that unless there is a cost to mining a *invalid* block\n> > > the merge mined coin has little protection from miners who mine invalid\n> > > blocks, either maliciously or through negligence. If the coin isn't\n> > > worth much, either because it's market value is low or the worth is\n> > > negative to the malicious miner, your theories of value have nothing\n> > > to do with the issue.\n> > \n> > Invalid blocks are rejected by validating clients in all circumstances.\n> \n> I don't think that's what John means.\n> \n> If you have hash power for the parent chain, mining invalid blocks for the\n> merge-mined chain costs you nothing. Yes, they will be invalid, but you've\n> lost nothing.\n\nNor gained anything. So the \"lesser\" chain maybe can't trust SPV.\nBut trusting SPV was already a bad idea anyway.\n\nNote that the parent chain is not in any privileged position here either: a \nmerged-mined chain could provide the value to the miner he is interested in, \nwhile he sees nothing of the parent chain. In short, merged mining is pretty \nmuch unavoidable in any case.\n\n> The basic assumption underlying mining security is that it is more\n> profitable to collaborate with mining a chain (and profit from the block\n> payout) than to attack it. In the case of merged mining, this assumption\n> is not valid.\n\nThe basic assumption of SPV is that more people will be assisting rather than \nmaking invalid blocks. That motive doesn't necessarily need to be economic, \nnor do proper validating clients rely on it. The only real assumption behind \nmining is that the majority will not be aiming to reverse transactions with \nvalid blocks.\n\nP.S. How about a Zerocoin with no-reward/PoSacrifice merged mining as well as \n(rewarded) Prime POW; maybe with no subsidy halving, to try a new economic \nidea as well ;)\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 1530 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130714/6ad9f2c9/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-15T00:12:23",
                "message_text_only": "On Sun, Jul 14, 2013 at 08:16:41PM +0000, Luke-Jr wrote:\n> P.S. How about a Zerocoin with no-reward/PoSacrifice merged mining as well as \n> (rewarded) Prime POW; maybe with no subsidy halving, to try a new economic \n> idea as well ;)\n\nYour ideas about making an alt-coin have anything to do with hashing\npower might be a lot more convincing if you hadn't 51% attacks alt-coins\nin the past.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130714/855268c1/attachment.sig>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-07-15T01:51:21",
                "message_text_only": "On Monday, July 15, 2013 12:12:23 AM Peter Todd wrote:\n> On Sun, Jul 14, 2013 at 08:16:41PM +0000, Luke-Jr wrote:\n> > P.S. How about a Zerocoin with no-reward/PoSacrifice merged mining as\n> > well as (rewarded) Prime POW; maybe with no subsidy halving, to try a\n> > new economic idea as well ;)\n> \n> Your ideas about making an alt-coin have anything to do with hashing\n> power might be a lot more convincing if you hadn't 51% attacks alt-coins\n> in the past.\n\nSlander like this does not belong on the dev ML."
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-15T01:59:45",
                "message_text_only": "On Mon, Jul 15, 2013 at 01:51:21AM +0000, Luke-Jr wrote:\n> On Monday, July 15, 2013 12:12:23 AM Peter Todd wrote:\n> > On Sun, Jul 14, 2013 at 08:16:41PM +0000, Luke-Jr wrote:\n> > > P.S. How about a Zerocoin with no-reward/PoSacrifice merged mining as\n> > > well as (rewarded) Prime POW; maybe with no subsidy halving, to try a\n> > > new economic idea as well ;)\n> > \n> > Your ideas about making an alt-coin have anything to do with hashing\n> > power might be a lot more convincing if you hadn't 51% attacks alt-coins\n> > in the past.\n> \n> Slander like this does not belong on the dev ML.\n\nI wasn't aware you denied that accusation, so my apologies; I retract\nthat statement.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130714/b500b979/attachment.sig>"
            },
            {
                "author": "John Dillon",
                "date": "2013-07-14T19:48:45",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn Sun, Jul 14, 2013 at 7:33 PM, Luke-Jr <luke at dashjr.org> wrote:\n>> Merge mining is very much mining a coin for free. Ask not what the total\n>> reward is, ask that the marginal cost of merge mining an additional coin\n>> is.\n>\n> But the total reward is what mining will tend toward equalizing in costs.\n> In any case, the cryptocurrencies are neutral to cost of mining, or perhaps\n> even benefit from it being as cheap as possible: if it's cheaper to mine, you\n> can get an even higher difficulty/security out of it.\n\nAgain, you forget that there may exist miners for which the value of the coin\nis negative.\n\nNever mind that in practice you want there to exist a cost to encourage miners\nto actually pay attention to what they mind and to encourage them to update\nsoftware when required and participate.\n\n>> The issue is that unless there is a cost to mining a *invalid* block\n>> the merge mined coin has little protection from miners who mine invalid\n>> blocks, either maliciously or through negligence. If the coin isn't worth\n>> much, either because it's market value is low or the worth is negative to\n>> the malicious miner, your theories of value have nothing to do with the\n>> issue.\n>\n> Invalid blocks are rejected by validating clients in all circumstances.\n\nValidating clients, not SPV clients.\n\n> I suspect you may mean a block that doesn't include transactions you want\n> confirmed. In that case, you must not be paying sufficient fees for the miner\n> to consider it worth their time, or must be doing something the miner\n> considers fundamentally objectionable (in which case they won't be satisfied\n> by any fee). But these miners, unless they are able to acquire over 50% of the\n> hashrate (in which case the cryptocoin is compromised), are not the only ones\n> mining blocks, and if another miner accepts your transactions there is no\n> issue.\n\nAll those things simply change the amount of alt-coin the miner gets, which to\nthe miner may have no reward. You also have the issue that we may be talking\nabout a non-currency chain where reward is more nebulous.\n\nIn any case, regarding a zerocoin chain, Peter's observation that\nproof-of-sacrifice allows a strong 51% attck defense is very clever and IMO is\nsignificantly stronger than proof-of-work mining, merged or not, would provide.\nIt's essentially the ability to conjur up mining capacity on demand, but only\nby those who have a stake in the crypto-coin. It does depend on the existance\nof a proof-of-work chain, but we have a perfectly good one handy.\n\nPS: good to see you signing you email!\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQEcBAEBCAAGBQJR4wCFAAoJEEWCsU4mNhiPIcwH+gLYbUPDi/7ITK02wftqEV2E\nFSlzZ0W8aw7z7sF7hqPm7jpmtqbXdvQRSSy+XRDgWUxvF72o5oRTwOpY7xN8KOct\n9rMwF35nld8An9FOjOB6NR3sIQxmAg9q7xoilZrOHyRFcz/UT0BexSZ3x5DrKIAB\n6S7qalrGT0NWZx8CI0PRAzY8Nx+WouaoofBaypRaXBVJxigFqJlWNxgUM1FuoCL+\nC1wn0hlbWfO42Mh9jdnFZXhH2Omd5V3PzIS/t2cJGTjrwr7nT6VAJu+0hbNZHI/q\nyg0TGbO/01pp4OVe7WdLz9OktMqqDdDZJd6HWLQk07zqHS3iRJ2cpRIO6k9UCk0=\n=oicX\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Adam Back",
                "date": "2013-07-15T00:14:37",
                "message_text_only": "I think bi-directional sacrifice is probably not needed to assure a close to\n1:1 bi-directional peg.\n\n(Bi-directional sacrifice meaning also to convert a zerocoin to a bitcoin\nyou sacrifice a zerocoin and bitcoin would be modified to accept a zerocoin\nsacrifice as a way to replace a previously sacrificed bitcoin).\n\nI say that because if users who want zerocoins can obtain them at 1:1\nexchange via sacrifice (a mathematical peg), it is of no additional cost to\nthem to instead buy them from someone who previously obtained them via\nsacrifice for bitcoin (rather than sacrificing a new bitcoin).  So\npresumably for goodwill, or nominal fee (a small discount), people would buy\nrather than sacrifice where there is availability.\n\nAdam\n\nOn Sun, Jul 14, 2013 at 07:22:10PM +0000, John Dillon wrote:\n>-----BEGIN PGP SIGNED MESSAGE-----\n>Hash: SHA256\n>\n>On Sun, Jul 14, 2013 at 11:18 AM, Jorge Tim\u00f3n <jtimon at monetize.io> wrote:\n>> All the arguments in favor of this pegging use zerocoin's point of\n>> view. Sure it would be much better for it, but are additional costs to\n>> the bitcoin network and you cannot do it with every chain.\n>\n>Seems that Peter is describing a system that requires no changes at all to the\n>Bitcoin codebase and thus there are no costs whatsoever.\n>\n>Peter: I'm a bit confused by this concept of \"bi-directional sacrifice\" though,\n>I assume there exists only a sacrifice in one direction right? Wouldn't selling\n>a zerocoin be just a matter of giving zerocoin a rule so that the zerocoin tx\n>moving it to the new owner only happens if a specific form of bitcoin tx\n>happens too?\n>\n>> Merged mining is not mining the coin for free. The total reward (ie\n>> btc + frc + nmc + dvc) should tend to equal the mining costs. But the\n>> value comes from demand, not costs. So if people demand it more it\n>> price will rise no matter how is mined. And if the price rises it will\n>> make sense to spend more on mining.\n>> \"Bitcoins are worth because it costs to mine them\" is a Marxian labor\n>> thory of value argument.\n>> It's the other way arround as Menger taught us.\n>\n>Merge mining is very much mining a coin for free. Ask not what the total reward\n>is, ask that the marginal cost of merge mining an additional coin is. The issue\n>is that unless there is a cost to mining a *invalid* block the merge mined coin\n>has little protection from miners who mine invalid blocks, either maliciously\n>or through negligence. If the coin isn't worth much, either because it's market\n>value is low or the worth is negative to the malicious miner, your theories of\n>value have nothing to do with the issue.\n>\n>Gregory Maxwell has written about this issue before on the #bitcoin-dev IRC\n>channel and on bitcointalk as well if memory serves. I advise you to look up\n>his description of the problem, almost everything he writes on the topic of\n>crypto-coin theory is spot-on correct.\n>-----BEGIN PGP SIGNATURE-----\n>Version: GnuPG v1.4.11 (GNU/Linux)\n>\n>iQEcBAEBCAAGBQJR4vpGAAoJEEWCsU4mNhiPwu0IAMrzkVfI0CQuNJRCR+jwhNts\n>juEerApSSpBes6CjLBJJYZWDdMReSl6izqNDancnJygYc+Q5/IkwBispyZyeIVqY\n>HbV+jyAFQeVaJBZp8N+ZUDfN9/35SkPb4Y30dkq6V76hBfl+59bWq4qG0dhiO915\n>SBWAUPLspb5GOyu494GJUr4SPzgs9mAKfNGeQR2anOLj8Qam8Khfa4Zm5T5dX8WQ\n>vBunUCLykPvWBC3nuTDBU5gQu4TGW9ivGB4p6yLr7MyaPQYZEnYGqgU/yIfAhnBj\n>MfIfs6njPwhGMwteNmwLoS0VLRBFjWZDflquJ0NK6mNLR3c9yjOFMFPTTZFVinQ=\n>=b40P\n>-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-15T00:29:20",
                "message_text_only": "On Sun, Jul 14, 2013 at 07:22:10PM +0000, John Dillon wrote:\n> Peter: I'm a bit confused by this concept of \"bi-directional sacrifice\" though,\n> I assume there exists only a sacrifice in one direction right? Wouldn't selling\n> a zerocoin be just a matter of giving zerocoin a rule so that the zerocoin tx\n> moving it to the new owner only happens if a specific form of bitcoin tx\n> happens too?\n\nExactly.\n\nBasically you have one way of creating a Zerocoin: prove you sacrificed\na Bitcoin in a specific way. (spend to unspendable, or spend to mining\nfees far into the future)\n\nNow when you sell a Zerocoin what you do is create a Zerocoin\ntransaction with a txout that can only be spent if you can prove that a\nBitcoin transaction exists with specific conditions with sufficient\nconfirmations. The specific condition would most likely be it has a\ntxout of a specific value and scriptPubKey. Basically you'd have a\ntwo-part scriptPubKey:\n\nif <check bitcoin txout existance proof> <check zerocoin buyers signature\nis correct> else <check zerocoin sellers signature is correct> <check n\nblocks have passed>\n\nNote how if the buyer screws up there is a fallback so the seller can\nretrieve their funds after some reasonable amount of time.\n\nOf course if the Bitcoin chain is re-orged Bad Things Happen(TM), but\njust set the required number of confirms to something reasonable and\nyou're good to go. It does mean Zerocoin needs to have consensus on the\nBitcoin blockchain, but that's required to verify sacrifice proofs\nanyway.\n\nEconomically the idea works because Zerocoins are gradually consumed by\nthe proof-of-sacrifice required to make Zerocoin transactions. If the\nprocess by which Bitcoins are sacrificed is to fees, rather than\npermanently, the overall affect is just a minor decrease in the Bitcoin\nmoney supply. If they are sacrificed permanently, it'll result in\nlong-term Bitcoin deflation - potentially an issue as the blockreward\ndecreases.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130714/155dfca3/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "libzerocoin released, what about a zerocoin-only alt-coin with either-or mining",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Adam Back",
                "John Dillon",
                "Peter Todd",
                "Peter Vessenes",
                "Jorge Tim\u00f3n",
                "Pieter Wuille"
            ],
            "messages_count": 22,
            "total_messages_chars_count": 73499
        }
    },
    {
        "title": "[Bitcoin-development] Proposal: MultiBit as default desktop client on bitcoin.org",
        "thread_messages": [
            {
                "author": "Robert Backhaus",
                "date": "2013-07-09T00:22:38",
                "message_text_only": "But... Multibit is Java. Java's security problems has made it an instant\nuninstall item on windows PCs for about a year now. Java exploits are a\ndime a dozen.\n\nYes, you can reduce some of the problems by manually disabling the browser\nplugin, but how many users will do that?\n\nRecommending a fast SPV client as a first wallet - yes, of course.\nRecommending users open such a huge attack interface on their computers by\ninstalling Java - No go. Until Multibit is provided as a compiled binary\nwithout a Java dependency, it is DOA.\n\n\nOn 1 July 2013 02:39, Gary Rowe <g.rowe at froot.co.uk> wrote:\n\n> I've beefed up the supporting documentation for the website to make it\n> more accessible for developers who wish to contribute. It's a Java\n> application serving HTML.\n>\n> It can be found here: https://github.com/jim618/multibit-website\n>\n>\n> On 30 June 2013 16:19, Jim <jim618 at fastmail.co.uk> wrote:\n>\n>> Yeah \"email jim' was never going to work so I have\n>> bumped up MultiBit support (a bit) by:\n>>\n>> + having a dedicated Support page on the website\n>>    https://multibit.org/support.html\n>>    It has fixes and support notes for the most common gotchas.\n>> + the in-app help also now has a 'Support' section with\n>>    \"Troubleshooting' and the commonest gotchas.\n>>    I've also written more help to cover as much as possible.\n>> + Failing that people are directed first to bitcoin.stackchange.com\n>>    (I have a notification set up for the 'multibit' keyword.\n>> + Then finally users are directed to the github issues to search\n>>    existing or raise a new issue. Gary and Tim often chip in on there to\n>>    close\n>>    issues down as well as me.\n>>\n>>\n>>\n>> On Sun, Jun 30, 2013, at 12:42 PM, Mike Hearn wrote:\n>> > Sounds like we have consensus, Saivann, shall we do it?\n>> >\n>> > I'm also going to ask Theymos again to relax the newbie restrictions\n>> > for the alt client forums. It's probably too hard to get support at\n>> > the moment and \"email jim\" doesn't scale at all.\n>> >\n>> > On Fri, Jun 28, 2013 at 4:24 PM, Gavin Andresen <\n>> gavinandresen at gmail.com>\n>> > wrote:\n>> > > I vote \"yes\" to have MultiBit replace Bitcoin-Qt as the recommended\n>> > > desktop wallet app. I think most users will be happier with it.\n>> > >\n>> > > If I'm wrong, it is easy to change back.\n>> > >\n>> > >\n>> ------------------------------------------------------------------------------\n>> > > This SF.net email is sponsored by Windows:\n>> > >\n>> > > Build for Windows Store.\n>> > >\n>> > > http://p.sf.net/sfu/windows-dev2dev\n>> > > _______________________________________________\n>> > > Bitcoin-development mailing list\n>> > > Bitcoin-development at lists.sourceforge.net\n>> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >\n>> >\n>> ------------------------------------------------------------------------------\n>> > This SF.net email is sponsored by Windows:\n>> >\n>> > Build for Windows Store.\n>> >\n>> > http://p.sf.net/sfu/windows-dev2dev\n>> > _______________________________________________\n>> > Bitcoin-development mailing list\n>> > Bitcoin-development at lists.sourceforge.net\n>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>> --\n>> https://multibit.org    Money, reinvented\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> This SF.net email is sponsored by Windows:\n>>\n>> Build for Windows Store.\n>>\n>> http://p.sf.net/sfu/windows-dev2dev\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> This SF.net email is sponsored by Windows:\n>\n> Build for Windows Store.\n>\n> http://p.sf.net/sfu/windows-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/e45170a6/attachment.html>"
            },
            {
                "author": "Caleb James DeLisle",
                "date": "2013-07-09T01:20:08",
                "message_text_only": "Java (Applet) security is indeed abysmal but lets compare apples to apples.\nWith an applet some random guy with a website makes up some Java code and\nyour browser automatically executes it.\nWith Multibit you're only executing highly trusted code (so trusted that it\nhandles your money).\nThere has almost never been a Java exploit against secure trusted code.\n\nThe idea of discouraging use of java apps just because people would be\ntricked into activating the browser plugin when installing the JVM is\nprobably valid but Multibit is the only reasonably complete client outside\nof bitcoinqt and I think client diversity is more important than stamping\nout java.\n\nThanks,\nCaleb\n\n\nOn 07/08/2013 08:22 PM, Robert Backhaus wrote:\n> But... Multibit is Java. Java's security problems has made it an instant uninstall item on windows PCs for about a year now. Java exploits are a dime a dozen.\n> \n> Yes, you can reduce some of the problems by manually disabling the browser plugin, but how many users will do that?\n> \n> Recommending a fast SPV client as a first wallet - yes, of course. Recommending users open such a huge attack interface on their computers by installing Java - No go. Until Multibit is provided as a compiled binary without a Java dependency, it is DOA.\n> \n> \n> On 1 July 2013 02:39, Gary Rowe <g.rowe at froot.co.uk <mailto:g.rowe at froot.co.uk>> wrote:\n> \n>     I've beefed up the supporting documentation for the website to make it more accessible for developers who wish to contribute. It's a Java application serving HTML.\n> \n>     It can be found here: https://github.com/jim618/multibit-website\n> \n> \n>     On 30 June 2013 16:19, Jim <jim618 at fastmail.co.uk <mailto:jim618 at fastmail.co.uk>> wrote:\n> \n>         Yeah \"email jim' was never going to work so I have\n>         bumped up MultiBit support (a bit) by:\n> \n>         + having a dedicated Support page on the website\n>            https://multibit.org/support.html\n>            It has fixes and support notes for the most common gotchas.\n>         + the in-app help also now has a 'Support' section with\n>            \"Troubleshooting' and the commonest gotchas.\n>            I've also written more help to cover as much as possible.\n>         + Failing that people are directed first to bitcoin.stackchange.com <http://bitcoin.stackchange.com>\n>            (I have a notification set up for the 'multibit' keyword.\n>         + Then finally users are directed to the github issues to search\n>            existing or raise a new issue. Gary and Tim often chip in on there to\n>            close\n>            issues down as well as me.\n> \n> \n> \n>         On Sun, Jun 30, 2013, at 12:42 PM, Mike Hearn wrote:\n>         > Sounds like we have consensus, Saivann, shall we do it?\n>         >\n>         > I'm also going to ask Theymos again to relax the newbie restrictions\n>         > for the alt client forums. It's probably too hard to get support at\n>         > the moment and \"email jim\" doesn't scale at all.\n>         >\n>         > On Fri, Jun 28, 2013 at 4:24 PM, Gavin Andresen <gavinandresen at gmail.com <mailto:gavinandresen at gmail.com>>\n>         > wrote:\n>         > > I vote \"yes\" to have MultiBit replace Bitcoin-Qt as the recommended\n>         > > desktop wallet app. I think most users will be happier with it.\n>         > >\n>         > > If I'm wrong, it is easy to change back.\n>         > >\n>         > > ------------------------------------------------------------------------------\n>         > > This SF.net email is sponsored by Windows:\n>         > >\n>         > > Build for Windows Store.\n>         > >\n>         > > http://p.sf.net/sfu/windows-dev2dev\n>         > > _______________________________________________\n>         > > Bitcoin-development mailing list\n>         > > Bitcoin-development at lists.sourceforge.net <mailto:Bitcoin-development at lists.sourceforge.net>\n>         > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>         >\n>         > ------------------------------------------------------------------------------\n>         > This SF.net email is sponsored by Windows:\n>         >\n>         > Build for Windows Store.\n>         >\n>         > http://p.sf.net/sfu/windows-dev2dev\n>         > _______________________________________________\n>         > Bitcoin-development mailing list\n>         > Bitcoin-development at lists.sourceforge.net <mailto:Bitcoin-development at lists.sourceforge.net>\n>         > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n>         --\n>         https://multibit.org    Money, reinvented\n> \n>         ------------------------------------------------------------------------------\n>         This SF.net email is sponsored by Windows:\n> \n>         Build for Windows Store.\n> \n>         http://p.sf.net/sfu/windows-dev2dev\n>         _______________________________________________\n>         Bitcoin-development mailing list\n>         Bitcoin-development at lists.sourceforge.net <mailto:Bitcoin-development at lists.sourceforge.net>\n>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n>     ------------------------------------------------------------------------------\n>     This SF.net email is sponsored by Windows:\n> \n>     Build for Windows Store.\n> \n>     http://p.sf.net/sfu/windows-dev2dev\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-09T10:36:16",
                "message_text_only": "Modern Java versions let you bundle the app with a stripped down JVM. I\ndon't know if Jim does that, but I think it's an obvious step towards\nmaking MultiBit friendlier and easier to use.\n\nBTW I believe most secure browsers (Chrome, Firefox) have banned the applet\nplugin or severely restrained it anyway. So even if you install the JVM and\nplugin together there is not an issue.\n\n\nOn Tue, Jul 9, 2013 at 3:20 AM, Caleb James DeLisle <\ncalebdelisle at lavabit.com> wrote:\n\n> Java (Applet) security is indeed abysmal but lets compare apples to apples.\n> With an applet some random guy with a website makes up some Java code and\n> your browser automatically executes it.\n> With Multibit you're only executing highly trusted code (so trusted that it\n> handles your money).\n> There has almost never been a Java exploit against secure trusted code.\n>\n> The idea of discouraging use of java apps just because people would be\n> tricked into activating the browser plugin when installing the JVM is\n> probably valid but Multibit is the only reasonably complete client outside\n> of bitcoinqt and I think client diversity is more important than stamping\n> out java.\n>\n> Thanks,\n> Caleb\n>\n>\n> On 07/08/2013 08:22 PM, Robert Backhaus wrote:\n> > But... Multibit is Java. Java's security problems has made it an instant\n> uninstall item on windows PCs for about a year now. Java exploits are a\n> dime a dozen.\n> >\n> > Yes, you can reduce some of the problems by manually disabling the\n> browser plugin, but how many users will do that?\n> >\n> > Recommending a fast SPV client as a first wallet - yes, of course.\n> Recommending users open such a huge attack interface on their computers by\n> installing Java - No go. Until Multibit is provided as a compiled binary\n> without a Java dependency, it is DOA.\n> >\n> >\n> > On 1 July 2013 02:39, Gary Rowe <g.rowe at froot.co.uk <mailto:\n> g.rowe at froot.co.uk>> wrote:\n> >\n> >     I've beefed up the supporting documentation for the website to make\n> it more accessible for developers who wish to contribute. It's a Java\n> application serving HTML.\n> >\n> >     It can be found here: https://github.com/jim618/multibit-website\n> >\n> >\n> >     On 30 June 2013 16:19, Jim <jim618 at fastmail.co.uk <mailto:\n> jim618 at fastmail.co.uk>> wrote:\n> >\n> >         Yeah \"email jim' was never going to work so I have\n> >         bumped up MultiBit support (a bit) by:\n> >\n> >         + having a dedicated Support page on the website\n> >            https://multibit.org/support.html\n> >            It has fixes and support notes for the most common gotchas.\n> >         + the in-app help also now has a 'Support' section with\n> >            \"Troubleshooting' and the commonest gotchas.\n> >            I've also written more help to cover as much as possible.\n> >         + Failing that people are directed first to\n> bitcoin.stackchange.com <http://bitcoin.stackchange.com>\n> >            (I have a notification set up for the 'multibit' keyword.\n> >         + Then finally users are directed to the github issues to search\n> >            existing or raise a new issue. Gary and Tim often chip in on\n> there to\n> >            close\n> >            issues down as well as me.\n> >\n> >\n> >\n> >         On Sun, Jun 30, 2013, at 12:42 PM, Mike Hearn wrote:\n> >         > Sounds like we have consensus, Saivann, shall we do it?\n> >         >\n> >         > I'm also going to ask Theymos again to relax the newbie\n> restrictions\n> >         > for the alt client forums. It's probably too hard to get\n> support at\n> >         > the moment and \"email jim\" doesn't scale at all.\n> >         >\n> >         > On Fri, Jun 28, 2013 at 4:24 PM, Gavin Andresen <\n> gavinandresen at gmail.com <mailto:gavinandresen at gmail.com>>\n> >         > wrote:\n> >         > > I vote \"yes\" to have MultiBit replace Bitcoin-Qt as the\n> recommended\n> >         > > desktop wallet app. I think most users will be happier with\n> it.\n> >         > >\n> >         > > If I'm wrong, it is easy to change back.\n> >         > >\n> >         > >\n> ------------------------------------------------------------------------------\n> >         > > This SF.net email is sponsored by Windows:\n> >         > >\n> >         > > Build for Windows Store.\n> >         > >\n> >         > > http://p.sf.net/sfu/windows-dev2dev\n> >         > > _______________________________________________\n> >         > > Bitcoin-development mailing list\n> >         > > Bitcoin-development at lists.sourceforge.net <mailto:\n> Bitcoin-development at lists.sourceforge.net>\n> >         > >\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >         >\n> >         >\n> ------------------------------------------------------------------------------\n> >         > This SF.net email is sponsored by Windows:\n> >         >\n> >         > Build for Windows Store.\n> >         >\n> >         > http://p.sf.net/sfu/windows-dev2dev\n> >         > _______________________________________________\n> >         > Bitcoin-development mailing list\n> >         > Bitcoin-development at lists.sourceforge.net <mailto:\n> Bitcoin-development at lists.sourceforge.net>\n> >         >\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n> >         --\n> >         https://multibit.org    Money, reinvented\n> >\n> >\n> ------------------------------------------------------------------------------\n> >         This SF.net email is sponsored by Windows:\n> >\n> >         Build for Windows Store.\n> >\n> >         http://p.sf.net/sfu/windows-dev2dev\n> >         _______________________________________________\n> >         Bitcoin-development mailing list\n> >         Bitcoin-development at lists.sourceforge.net <mailto:\n> Bitcoin-development at lists.sourceforge.net>\n> >         https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> >     This SF.net email is sponsored by Windows:\n> >\n> >     Build for Windows Store.\n> >\n> >     http://p.sf.net/sfu/windows-dev2dev\n> >     _______________________________________________\n> >     Bitcoin-development mailing list\n> >     Bitcoin-development at lists.sourceforge.net <mailto:\n> Bitcoin-development at lists.sourceforge.net>\n> >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > See everything from the browser to the database with AppDynamics\n> > Get end-to-end visibility with application monitoring from AppDynamics\n> > Isolate bottlenecks and diagnose root cause in seconds.\n> > Start your free trial of AppDynamics Pro today!\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> >\n> >\n> >\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n>\n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/ce8cde0c/attachment.html>"
            },
            {
                "author": "Jim",
                "date": "2013-07-09T10:56:11",
                "message_text_only": "Yes I would like to bundle a JVM as it would simplify the user\nexperience.\n\nThere are a few downsides though:\n+ all the build packaging will need redoing and retesting.\n+ it will bump up the MultiBit download from about 11MB to 30-40MB \n(I think). This drops the maximum copies of MultiBit the multibit.org \nserver can deliver per day from around 90,000 to 30,000ish. \nThe multibit.org server maxes out at 1 TB of bandwidth per day.\n\nCurrently there is no provision to update anything automatically.\nI would like to start having Bitcoin signed files that MultiBit can\ncheck\nand update (initially the checkpoints file, I18N files - NOT code\nat first because of the security implications). I think this needs to be \nin place before bundling a JVM so that users don't have to\nkeep redownloading it.\n\nHaving lists of all the artifacts signed and them having SHA256 hashes \nthen makes it practical/ safe to start mirroring the code. I can see\neach mirror crosschecking the others that the SHA256s are correct\nfor instance. This would increase the maximum number of \ndownloads we could cope with.\n\n\nOn Tue, Jul 9, 2013, at 11:36 AM, Mike Hearn wrote:\n> Modern Java versions let you bundle the app with a stripped down JVM. I\n> don't know if Jim does that, but I think it's an obvious step towards\n> making MultiBit friendlier and easier to use.\n> \n> BTW I believe most secure browsers (Chrome, Firefox) have banned the\n> applet\n> plugin or severely restrained it anyway. So even if you install the JVM\n> and\n> plugin together there is not an issue.\n> \n> \n> On Tue, Jul 9, 2013 at 3:20 AM, Caleb James DeLisle <\n> calebdelisle at lavabit.com> wrote:\n> \n> > Java (Applet) security is indeed abysmal but lets compare apples to apples.\n> > With an applet some random guy with a website makes up some Java code and\n> > your browser automatically executes it.\n> > With Multibit you're only executing highly trusted code (so trusted that it\n> > handles your money).\n> > There has almost never been a Java exploit against secure trusted code.\n> >\n> > The idea of discouraging use of java apps just because people would be\n> > tricked into activating the browser plugin when installing the JVM is\n> > probably valid but Multibit is the only reasonably complete client outside\n> > of bitcoinqt and I think client diversity is more important than stamping\n> > out java.\n> >\n> > Thanks,\n> > Caleb\n> >\n> >\n> > On 07/08/2013 08:22 PM, Robert Backhaus wrote:\n> > > But... Multibit is Java. Java's security problems has made it an instant\n> > uninstall item on windows PCs for about a year now. Java exploits are a\n> > dime a dozen.\n> > >\n> > > Yes, you can reduce some of the problems by manually disabling the\n> > browser plugin, but how many users will do that?\n> > >\n> > > Recommending a fast SPV client as a first wallet - yes, of course.\n> > Recommending users open such a huge attack interface on their computers by\n> > installing Java - No go. Until Multibit is provided as a compiled binary\n> > without a Java dependency, it is DOA.\n> > >\n> > >\n> > > On 1 July 2013 02:39, Gary Rowe <g.rowe at froot.co.uk <mailto:\n> > g.rowe at froot.co.uk>> wrote:\n> > >\n> > >     I've beefed up the supporting documentation for the website to make\n> > it more accessible for developers who wish to contribute. It's a Java\n> > application serving HTML.\n> > >\n> > >     It can be found here: https://github.com/jim618/multibit-website\n> > >\n> > >\n> > >     On 30 June 2013 16:19, Jim <jim618 at fastmail.co.uk <mailto:\n> > jim618 at fastmail.co.uk>> wrote:\n> > >\n> > >         Yeah \"email jim' was never going to work so I have\n> > >         bumped up MultiBit support (a bit) by:\n> > >\n> > >         + having a dedicated Support page on the website\n> > >            https://multibit.org/support.html\n> > >            It has fixes and support notes for the most common gotchas.\n> > >         + the in-app help also now has a 'Support' section with\n> > >            \"Troubleshooting' and the commonest gotchas.\n> > >            I've also written more help to cover as much as possible.\n> > >         + Failing that people are directed first to\n> > bitcoin.stackchange.com <http://bitcoin.stackchange.com>\n> > >            (I have a notification set up for the 'multibit' keyword.\n> > >         + Then finally users are directed to the github issues to search\n> > >            existing or raise a new issue. Gary and Tim often chip in on\n> > there to\n> > >            close\n> > >            issues down as well as me.\n> > >\n> > >\n> > >\n> > >         On Sun, Jun 30, 2013, at 12:42 PM, Mike Hearn wrote:\n> > >         > Sounds like we have consensus, Saivann, shall we do it?\n> > >         >\n> > >         > I'm also going to ask Theymos again to relax the newbie\n> > restrictions\n> > >         > for the alt client forums. It's probably too hard to get\n> > support at\n> > >         > the moment and \"email jim\" doesn't scale at all.\n> > >         >\n> > >         > On Fri, Jun 28, 2013 at 4:24 PM, Gavin Andresen <\n> > gavinandresen at gmail.com <mailto:gavinandresen at gmail.com>>\n> > >         > wrote:\n> > >         > > I vote \"yes\" to have MultiBit replace Bitcoin-Qt as the\n> > recommended\n> > >         > > desktop wallet app. I think most users will be happier with\n> > it.\n> > >         > >\n> > >         > > If I'm wrong, it is easy to change back.\n> > >         > >\n> > >         > >\n> > ------------------------------------------------------------------------------\n> > >         > > This SF.net email is sponsored by Windows:\n> > >         > >\n> > >         > > Build for Windows Store.\n> > >         > >\n> > >         > > http://p.sf.net/sfu/windows-dev2dev\n> > >         > > _______________________________________________\n> > >         > > Bitcoin-development mailing list\n> > >         > > Bitcoin-development at lists.sourceforge.net <mailto:\n> > Bitcoin-development at lists.sourceforge.net>\n> > >         > >\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > >         >\n> > >         >\n> > ------------------------------------------------------------------------------\n> > >         > This SF.net email is sponsored by Windows:\n> > >         >\n> > >         > Build for Windows Store.\n> > >         >\n> > >         > http://p.sf.net/sfu/windows-dev2dev\n> > >         > _______________________________________________\n> > >         > Bitcoin-development mailing list\n> > >         > Bitcoin-development at lists.sourceforge.net <mailto:\n> > Bitcoin-development at lists.sourceforge.net>\n> > >         >\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > >\n> > >\n> > >         --\n> > >         https://multibit.org    Money, reinvented\n> > >\n> > >\n> > ------------------------------------------------------------------------------\n> > >         This SF.net email is sponsored by Windows:\n> > >\n> > >         Build for Windows Store.\n> > >\n> > >         http://p.sf.net/sfu/windows-dev2dev\n> > >         _______________________________________________\n> > >         Bitcoin-development mailing list\n> > >         Bitcoin-development at lists.sourceforge.net <mailto:\n> > Bitcoin-development at lists.sourceforge.net>\n> > >         https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > >\n> > >\n> > >\n> > >\n> > ------------------------------------------------------------------------------\n> > >     This SF.net email is sponsored by Windows:\n> > >\n> > >     Build for Windows Store.\n> > >\n> > >     http://p.sf.net/sfu/windows-dev2dev\n> > >     _______________________________________________\n> > >     Bitcoin-development mailing list\n> > >     Bitcoin-development at lists.sourceforge.net <mailto:\n> > Bitcoin-development at lists.sourceforge.net>\n> > >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > >\n> > >\n> > >\n> > >\n> > >\n> > ------------------------------------------------------------------------------\n> > > See everything from the browser to the database with AppDynamics\n> > > Get end-to-end visibility with application monitoring from AppDynamics\n> > > Isolate bottlenecks and diagnose root cause in seconds.\n> > > Start your free trial of AppDynamics Pro today!\n> > >\n> > http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> > >\n> > >\n> > >\n> > > _______________________________________________\n> > > Bitcoin-development mailing list\n> > > Bitcoin-development at lists.sourceforge.net\n> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > >\n> >\n> >\n> >\n> > ------------------------------------------------------------------------------\n> > See everything from the browser to the database with AppDynamics\n> > Get end-to-end visibility with application monitoring from AppDynamics\n> > Isolate bottlenecks and diagnose root cause in seconds.\n> > Start your free trial of AppDynamics Pro today!\n> > http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n-- \nhttps://multibit.org    Money, reinvented"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-09T11:04:19",
                "message_text_only": "How many downloads/day do we see currently? I think you said it's on the\norder of a few thousand, so nowhere near 30k I'd guess. Anyway I can mirror\nit if we need to.\n\nThe JavaFX packager is supposed to delete parts of the JVM that aren't\nused. Is the 30-40mb figure based on using that tool or something else?\nNote that you don't need to use the JFX widget toolkit to use the bundler\ntool.\n\nWe could also invest in a copy of JET, which does native compilation down\nto self contained Windows binaries. It might create smaller bundles. But,\nit's a proprietary tool and I don't know how reproducible its outputs are.\n\nFor the auto update, is there an existing auto update framework that we can\nmodify to support threshold signed updates? I'm sure such a thing must\nexist. The updates would download in the background and then the app can\njust ask the user to restart it once the update is locally available, as\nChrome does.\n\n\n\nOn Tue, Jul 9, 2013 at 12:56 PM, Jim <jim618 at fastmail.co.uk> wrote:\n\n> Yes I would like to bundle a JVM as it would simplify the user\n> experience.\n>\n> There are a few downsides though:\n> + all the build packaging will need redoing and retesting.\n> + it will bump up the MultiBit download from about 11MB to 30-40MB\n> (I think). This drops the maximum copies of MultiBit the multibit.org\n> server can deliver per day from around 90,000 to 30,000ish.\n> The multibit.org server maxes out at 1 TB of bandwidth per day.\n>\n> Currently there is no provision to update anything automatically.\n> I would like to start having Bitcoin signed files that MultiBit can\n> check\n> and update (initially the checkpoints file, I18N files - NOT code\n> at first because of the security implications). I think this needs to be\n> in place before bundling a JVM so that users don't have to\n> keep redownloading it.\n>\n> Having lists of all the artifacts signed and them having SHA256 hashes\n> then makes it practical/ safe to start mirroring the code. I can see\n> each mirror crosschecking the others that the SHA256s are correct\n> for instance. This would increase the maximum number of\n> downloads we could cope with.\n>\n>\n> On Tue, Jul 9, 2013, at 11:36 AM, Mike Hearn wrote:\n> > Modern Java versions let you bundle the app with a stripped down JVM. I\n> > don't know if Jim does that, but I think it's an obvious step towards\n> > making MultiBit friendlier and easier to use.\n> >\n> > BTW I believe most secure browsers (Chrome, Firefox) have banned the\n> > applet\n> > plugin or severely restrained it anyway. So even if you install the JVM\n> > and\n> > plugin together there is not an issue.\n> >\n> >\n> > On Tue, Jul 9, 2013 at 3:20 AM, Caleb James DeLisle <\n> > calebdelisle at lavabit.com> wrote:\n> >\n> > > Java (Applet) security is indeed abysmal but lets compare apples to\n> apples.\n> > > With an applet some random guy with a website makes up some Java code\n> and\n> > > your browser automatically executes it.\n> > > With Multibit you're only executing highly trusted code (so trusted\n> that it\n> > > handles your money).\n> > > There has almost never been a Java exploit against secure trusted code.\n> > >\n> > > The idea of discouraging use of java apps just because people would be\n> > > tricked into activating the browser plugin when installing the JVM is\n> > > probably valid but Multibit is the only reasonably complete client\n> outside\n> > > of bitcoinqt and I think client diversity is more important than\n> stamping\n> > > out java.\n> > >\n> > > Thanks,\n> > > Caleb\n> > >\n> > >\n> > > On 07/08/2013 08:22 PM, Robert Backhaus wrote:\n> > > > But... Multibit is Java. Java's security problems has made it an\n> instant\n> > > uninstall item on windows PCs for about a year now. Java exploits are a\n> > > dime a dozen.\n> > > >\n> > > > Yes, you can reduce some of the problems by manually disabling the\n> > > browser plugin, but how many users will do that?\n> > > >\n> > > > Recommending a fast SPV client as a first wallet - yes, of course.\n> > > Recommending users open such a huge attack interface on their\n> computers by\n> > > installing Java - No go. Until Multibit is provided as a compiled\n> binary\n> > > without a Java dependency, it is DOA.\n> > > >\n> > > >\n> > > > On 1 July 2013 02:39, Gary Rowe <g.rowe at froot.co.uk <mailto:\n> > > g.rowe at froot.co.uk>> wrote:\n> > > >\n> > > >     I've beefed up the supporting documentation for the website to\n> make\n> > > it more accessible for developers who wish to contribute. It's a Java\n> > > application serving HTML.\n> > > >\n> > > >     It can be found here: https://github.com/jim618/multibit-website\n> > > >\n> > > >\n> > > >     On 30 June 2013 16:19, Jim <jim618 at fastmail.co.uk <mailto:\n> > > jim618 at fastmail.co.uk>> wrote:\n> > > >\n> > > >         Yeah \"email jim' was never going to work so I have\n> > > >         bumped up MultiBit support (a bit) by:\n> > > >\n> > > >         + having a dedicated Support page on the website\n> > > >            https://multibit.org/support.html\n> > > >            It has fixes and support notes for the most common\n> gotchas.\n> > > >         + the in-app help also now has a 'Support' section with\n> > > >            \"Troubleshooting' and the commonest gotchas.\n> > > >            I've also written more help to cover as much as possible.\n> > > >         + Failing that people are directed first to\n> > > bitcoin.stackchange.com <http://bitcoin.stackchange.com>\n> > > >            (I have a notification set up for the 'multibit' keyword.\n> > > >         + Then finally users are directed to the github issues to\n> search\n> > > >            existing or raise a new issue. Gary and Tim often chip in\n> on\n> > > there to\n> > > >            close\n> > > >            issues down as well as me.\n> > > >\n> > > >\n> > > >\n> > > >         On Sun, Jun 30, 2013, at 12:42 PM, Mike Hearn wrote:\n> > > >         > Sounds like we have consensus, Saivann, shall we do it?\n> > > >         >\n> > > >         > I'm also going to ask Theymos again to relax the newbie\n> > > restrictions\n> > > >         > for the alt client forums. It's probably too hard to get\n> > > support at\n> > > >         > the moment and \"email jim\" doesn't scale at all.\n> > > >         >\n> > > >         > On Fri, Jun 28, 2013 at 4:24 PM, Gavin Andresen <\n> > > gavinandresen at gmail.com <mailto:gavinandresen at gmail.com>>\n> > > >         > wrote:\n> > > >         > > I vote \"yes\" to have MultiBit replace Bitcoin-Qt as the\n> > > recommended\n> > > >         > > desktop wallet app. I think most users will be happier\n> with\n> > > it.\n> > > >         > >\n> > > >         > > If I'm wrong, it is easy to change back.\n> > > >         > >\n> > > >         > >\n> > >\n> ------------------------------------------------------------------------------\n> > > >         > > This SF.net email is sponsored by Windows:\n> > > >         > >\n> > > >         > > Build for Windows Store.\n> > > >         > >\n> > > >         > > http://p.sf.net/sfu/windows-dev2dev\n> > > >         > > _______________________________________________\n> > > >         > > Bitcoin-development mailing list\n> > > >         > > Bitcoin-development at lists.sourceforge.net <mailto:\n> > > Bitcoin-development at lists.sourceforge.net>\n> > > >         > >\n> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > > >         >\n> > > >         >\n> > >\n> ------------------------------------------------------------------------------\n> > > >         > This SF.net email is sponsored by Windows:\n> > > >         >\n> > > >         > Build for Windows Store.\n> > > >         >\n> > > >         > http://p.sf.net/sfu/windows-dev2dev\n> > > >         > _______________________________________________\n> > > >         > Bitcoin-development mailing list\n> > > >         > Bitcoin-development at lists.sourceforge.net <mailto:\n> > > Bitcoin-development at lists.sourceforge.net>\n> > > >         >\n> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > > >\n> > > >\n> > > >         --\n> > > >         https://multibit.org    Money, reinvented\n> > > >\n> > > >\n> > >\n> ------------------------------------------------------------------------------\n> > > >         This SF.net email is sponsored by Windows:\n> > > >\n> > > >         Build for Windows Store.\n> > > >\n> > > >         http://p.sf.net/sfu/windows-dev2dev\n> > > >         _______________________________________________\n> > > >         Bitcoin-development mailing list\n> > > >         Bitcoin-development at lists.sourceforge.net <mailto:\n> > > Bitcoin-development at lists.sourceforge.net>\n> > > >\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > > >\n> > > >\n> > > >\n> > > >\n> > >\n> ------------------------------------------------------------------------------\n> > > >     This SF.net email is sponsored by Windows:\n> > > >\n> > > >     Build for Windows Store.\n> > > >\n> > > >     http://p.sf.net/sfu/windows-dev2dev\n> > > >     _______________________________________________\n> > > >     Bitcoin-development mailing list\n> > > >     Bitcoin-development at lists.sourceforge.net <mailto:\n> > > Bitcoin-development at lists.sourceforge.net>\n> > > >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > > >\n> > > >\n> > > >\n> > > >\n> > > >\n> > >\n> ------------------------------------------------------------------------------\n> > > > See everything from the browser to the database with AppDynamics\n> > > > Get end-to-end visibility with application monitoring from\n> AppDynamics\n> > > > Isolate bottlenecks and diagnose root cause in seconds.\n> > > > Start your free trial of AppDynamics Pro today!\n> > > >\n> > >\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> > > >\n> > > >\n> > > >\n> > > > _______________________________________________\n> > > > Bitcoin-development mailing list\n> > > > Bitcoin-development at lists.sourceforge.net\n> > > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > > >\n> > >\n> > >\n> > >\n> > >\n> ------------------------------------------------------------------------------\n> > > See everything from the browser to the database with AppDynamics\n> > > Get end-to-end visibility with application monitoring from AppDynamics\n> > > Isolate bottlenecks and diagnose root cause in seconds.\n> > > Start your free trial of AppDynamics Pro today!\n> > >\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> > > _______________________________________________\n> > > Bitcoin-development mailing list\n> > > Bitcoin-development at lists.sourceforge.net\n> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > >\n> >\n> ------------------------------------------------------------------------------\n> > See everything from the browser to the database with AppDynamics\n> > Get end-to-end visibility with application monitoring from AppDynamics\n> > Isolate bottlenecks and diagnose root cause in seconds.\n> > Start your free trial of AppDynamics Pro today!\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> --\n> https://multibit.org    Money, reinvented\n>\n>\n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/53d448c1/attachment.html>"
            },
            {
                "author": "Will",
                "date": "2013-07-09T11:13:16",
                "message_text_only": "Omaha - which is the automatic update framework that Google Chrome uses -\nis open sourced:\n\nhttps://code.google.com/p/omaha/\n\nIt might be a bit heavyweight for just one package though.\n\nWill\n\nOn 9 July 2013 13:04, Mike Hearn <mike at plan99.net> wrote:\n\n> For the auto update, is there an existing auto update framework that we\n> can modify to support threshold signed updates? I'm sure such a thing must\n> exist. The updates would download in the background and then the app can\n> just ask the user to restart it once the update is locally available, as\n> Chrome does.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/7d9ba533/attachment.html>"
            },
            {
                "author": "Jim",
                "date": "2013-07-09T11:15:44",
                "message_text_only": "Currently there are about 2,500 downloads a day for MultiBit.\nThere are download stats here:\nhttps://multibit.org/awstats/awstats.pl?config=multibit.org\n\nWith a mirror from Mike and perhaps another instance at\nmultibit.org that would get us to 100K per day so probably\nnothing to worry about.\n\nI think the highest daily download stats I have seen were in the\nApril 2013 'boom' where Bitcoin-QT downloads hit 30K per day as\nI recall.\n\nThe 30-40 MB including a JVM is based on the download sizes for\nCharlesProxy.com which does this for their Windows downloads.\nThe sizes are here:\nhttp://www.charlesproxy.com/download/\n\nThis is a Java codebase too.\n\n\nYes there must be an auto-update framework (but without \nECDSA signing most likely). I haven't spent much time on this\nyet.\n\n\nOn Tue, Jul 9, 2013, at 12:04 PM, Mike Hearn wrote:\n> How many downloads/day do we see currently? I think you said it's on the\n> order of a few thousand, so nowhere near 30k I'd guess. Anyway I can\n> mirror\n> it if we need to.\n> \n> The JavaFX packager is supposed to delete parts of the JVM that aren't\n> used. Is the 30-40mb figure based on using that tool or something else?\n> Note that you don't need to use the JFX widget toolkit to use the bundler\n> tool.\n> \n> We could also invest in a copy of JET, which does native compilation down\n> to self contained Windows binaries. It might create smaller bundles. But,\n> it's a proprietary tool and I don't know how reproducible its outputs\n> are.\n> \n> For the auto update, is there an existing auto update framework that we\n> can\n> modify to support threshold signed updates? I'm sure such a thing must\n> exist. The updates would download in the background and then the app can\n> just ask the user to restart it once the update is locally available, as\n> Chrome does.\n> \n> \n> \n> On Tue, Jul 9, 2013 at 12:56 PM, Jim <jim618 at fastmail.co.uk> wrote:\n> \n> > Yes I would like to bundle a JVM as it would simplify the user\n> > experience.\n> >\n> > There are a few downsides though:\n> > + all the build packaging will need redoing and retesting.\n> > + it will bump up the MultiBit download from about 11MB to 30-40MB\n> > (I think). This drops the maximum copies of MultiBit the multibit.org\n> > server can deliver per day from around 90,000 to 30,000ish.\n> > The multibit.org server maxes out at 1 TB of bandwidth per day.\n> >\n> > Currently there is no provision to update anything automatically.\n> > I would like to start having Bitcoin signed files that MultiBit can\n> > check\n> > and update (initially the checkpoints file, I18N files - NOT code\n> > at first because of the security implications). I think this needs to be\n> > in place before bundling a JVM so that users don't have to\n> > keep redownloading it.\n> >\n> > Having lists of all the artifacts signed and them having SHA256 hashes\n> > then makes it practical/ safe to start mirroring the code. I can see\n> > each mirror crosschecking the others that the SHA256s are correct\n> > for instance. This would increase the maximum number of\n> > downloads we could cope with.\n> >\n> >\n> > On Tue, Jul 9, 2013, at 11:36 AM, Mike Hearn wrote:\n> > > Modern Java versions let you bundle the app with a stripped down JVM. I\n> > > don't know if Jim does that, but I think it's an obvious step towards\n> > > making MultiBit friendlier and easier to use.\n> > >\n> > > BTW I believe most secure browsers (Chrome, Firefox) have banned the\n> > > applet\n> > > plugin or severely restrained it anyway. So even if you install the JVM\n> > > and\n> > > plugin together there is not an issue.\n> > >\n> > >\n> > > On Tue, Jul 9, 2013 at 3:20 AM, Caleb James DeLisle <\n> > > calebdelisle at lavabit.com> wrote:\n> > >\n> > > > Java (Applet) security is indeed abysmal but lets compare apples to\n> > apples.\n> > > > With an applet some random guy with a website makes up some Java code\n> > and\n> > > > your browser automatically executes it.\n> > > > With Multibit you're only executing highly trusted code (so trusted\n> > that it\n> > > > handles your money).\n> > > > There has almost never been a Java exploit against secure trusted code.\n> > > >\n> > > > The idea of discouraging use of java apps just because people would be\n> > > > tricked into activating the browser plugin when installing the JVM is\n> > > > probably valid but Multibit is the only reasonably complete client\n> > outside\n> > > > of bitcoinqt and I think client diversity is more important than\n> > stamping\n> > > > out java.\n> > > >\n> > > > Thanks,\n> > > > Caleb\n> > > >\n> > > >\n> > > > On 07/08/2013 08:22 PM, Robert Backhaus wrote:\n> > > > > But... Multibit is Java. Java's security problems has made it an\n> > instant\n> > > > uninstall item on windows PCs for about a year now. Java exploits are a\n> > > > dime a dozen.\n> > > > >\n> > > > > Yes, you can reduce some of the problems by manually disabling the\n> > > > browser plugin, but how many users will do that?\n> > > > >\n> > > > > Recommending a fast SPV client as a first wallet - yes, of course.\n> > > > Recommending users open such a huge attack interface on their\n> > computers by\n> > > > installing Java - No go. Until Multibit is provided as a compiled\n> > binary\n> > > > without a Java dependency, it is DOA.\n> > > > >\n> > > > >\n> > > > > On 1 July 2013 02:39, Gary Rowe <g.rowe at froot.co.uk <mailto:\n> > > > g.rowe at froot.co.uk>> wrote:\n> > > > >\n> > > > >     I've beefed up the supporting documentation for the website to\n> > make\n> > > > it more accessible for developers who wish to contribute. It's a Java\n> > > > application serving HTML.\n> > > > >\n> > > > >     It can be found here: https://github.com/jim618/multibit-website\n> > > > >\n> > > > >\n> > > > >     On 30 June 2013 16:19, Jim <jim618 at fastmail.co.uk <mailto:\n> > > > jim618 at fastmail.co.uk>> wrote:\n> > > > >\n> > > > >         Yeah \"email jim' was never going to work so I have\n> > > > >         bumped up MultiBit support (a bit) by:\n> > > > >\n> > > > >         + having a dedicated Support page on the website\n> > > > >            https://multibit.org/support.html\n> > > > >            It has fixes and support notes for the most common\n> > gotchas.\n> > > > >         + the in-app help also now has a 'Support' section with\n> > > > >            \"Troubleshooting' and the commonest gotchas.\n> > > > >            I've also written more help to cover as much as possible.\n> > > > >         + Failing that people are directed first to\n> > > > bitcoin.stackchange.com <http://bitcoin.stackchange.com>\n> > > > >            (I have a notification set up for the 'multibit' keyword.\n> > > > >         + Then finally users are directed to the github issues to\n> > search\n> > > > >            existing or raise a new issue. Gary and Tim often chip in\n> > on\n> > > > there to\n> > > > >            close\n> > > > >            issues down as well as me.\n> > > > >\n> > > > >\n> > > > >\n> > > > >         On Sun, Jun 30, 2013, at 12:42 PM, Mike Hearn wrote:\n> > > > >         > Sounds like we have consensus, Saivann, shall we do it?\n> > > > >         >\n> > > > >         > I'm also going to ask Theymos again to relax the newbie\n> > > > restrictions\n> > > > >         > for the alt client forums. It's probably too hard to get\n> > > > support at\n> > > > >         > the moment and \"email jim\" doesn't scale at all.\n> > > > >         >\n> > > > >         > On Fri, Jun 28, 2013 at 4:24 PM, Gavin Andresen <\n> > > > gavinandresen at gmail.com <mailto:gavinandresen at gmail.com>>\n> > > > >         > wrote:\n> > > > >         > > I vote \"yes\" to have MultiBit replace Bitcoin-Qt as the\n> > > > recommended\n> > > > >         > > desktop wallet app. I think most users will be happier\n> > with\n> > > > it.\n> > > > >         > >\n> > > > >         > > If I'm wrong, it is easy to change back.\n> > > > >         > >\n> > > > >         > >\n> > > >\n> > ------------------------------------------------------------------------------\n> > > > >         > > This SF.net email is sponsored by Windows:\n> > > > >         > >\n> > > > >         > > Build for Windows Store.\n> > > > >         > >\n> > > > >         > > http://p.sf.net/sfu/windows-dev2dev\n> > > > >         > > _______________________________________________\n> > > > >         > > Bitcoin-development mailing list\n> > > > >         > > Bitcoin-development at lists.sourceforge.net <mailto:\n> > > > Bitcoin-development at lists.sourceforge.net>\n> > > > >         > >\n> > > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > > > >         >\n> > > > >         >\n> > > >\n> > ------------------------------------------------------------------------------\n> > > > >         > This SF.net email is sponsored by Windows:\n> > > > >         >\n> > > > >         > Build for Windows Store.\n> > > > >         >\n> > > > >         > http://p.sf.net/sfu/windows-dev2dev\n> > > > >         > _______________________________________________\n> > > > >         > Bitcoin-development mailing list\n> > > > >         > Bitcoin-development at lists.sourceforge.net <mailto:\n> > > > Bitcoin-development at lists.sourceforge.net>\n> > > > >         >\n> > > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > > > >\n> > > > >\n> > > > >         --\n> > > > >         https://multibit.org    Money, reinvented\n> > > > >\n> > > > >\n> > > >\n> > ------------------------------------------------------------------------------\n> > > > >         This SF.net email is sponsored by Windows:\n> > > > >\n> > > > >         Build for Windows Store.\n> > > > >\n> > > > >         http://p.sf.net/sfu/windows-dev2dev\n> > > > >         _______________________________________________\n> > > > >         Bitcoin-development mailing list\n> > > > >         Bitcoin-development at lists.sourceforge.net <mailto:\n> > > > Bitcoin-development at lists.sourceforge.net>\n> > > > >\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > > > >\n> > > > >\n> > > > >\n> > > > >\n> > > >\n> > ------------------------------------------------------------------------------\n> > > > >     This SF.net email is sponsored by Windows:\n> > > > >\n> > > > >     Build for Windows Store.\n> > > > >\n> > > > >     http://p.sf.net/sfu/windows-dev2dev\n> > > > >     _______________________________________________\n> > > > >     Bitcoin-development mailing list\n> > > > >     Bitcoin-development at lists.sourceforge.net <mailto:\n> > > > Bitcoin-development at lists.sourceforge.net>\n> > > > >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > > > >\n> > > > >\n> > > > >\n> > > > >\n> > > > >\n> > > >\n> > ------------------------------------------------------------------------------\n> > > > > See everything from the browser to the database with AppDynamics\n> > > > > Get end-to-end visibility with application monitoring from\n> > AppDynamics\n> > > > > Isolate bottlenecks and diagnose root cause in seconds.\n> > > > > Start your free trial of AppDynamics Pro today!\n> > > > >\n> > > >\n> > http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> > > > >\n> > > > >\n> > > > >\n> > > > > _______________________________________________\n> > > > > Bitcoin-development mailing list\n> > > > > Bitcoin-development at lists.sourceforge.net\n> > > > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > > > >\n> > > >\n> > > >\n> > > >\n> > > >\n> > ------------------------------------------------------------------------------\n> > > > See everything from the browser to the database with AppDynamics\n> > > > Get end-to-end visibility with application monitoring from AppDynamics\n> > > > Isolate bottlenecks and diagnose root cause in seconds.\n> > > > Start your free trial of AppDynamics Pro today!\n> > > >\n> > http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> > > > _______________________________________________\n> > > > Bitcoin-development mailing list\n> > > > Bitcoin-development at lists.sourceforge.net\n> > > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > > >\n> > >\n> > ------------------------------------------------------------------------------\n> > > See everything from the browser to the database with AppDynamics\n> > > Get end-to-end visibility with application monitoring from AppDynamics\n> > > Isolate bottlenecks and diagnose root cause in seconds.\n> > > Start your free trial of AppDynamics Pro today!\n> > >\n> > http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> > > _______________________________________________\n> > > Bitcoin-development mailing list\n> > > Bitcoin-development at lists.sourceforge.net\n> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n> > --\n> > https://multibit.org    Money, reinvented\n> >\n> >\n> > ------------------------------------------------------------------------------\n> > See everything from the browser to the database with AppDynamics\n> > Get end-to-end visibility with application monitoring from AppDynamics\n> > Isolate bottlenecks and diagnose root cause in seconds.\n> > Start your free trial of AppDynamics Pro today!\n> > http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n\n\n-- \nhttps://multibit.org    Money, reinvented"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-09T11:18:07",
                "message_text_only": "By the way, the Java Web Start system has improved a lot in recent versions\nas well. I just tried running http://jfxtras.org/ and this was the\nexperience:\n\n   - It told me my Java was insecure and that I should download the latest\n   version (hah). It had three buttons, one saying \"Update\", one saying \"Block\n   content in browser\" and one saying \"Later\". So it seems Java learned how to\n   disable its plugin by itself anyway. I think on non-Linux platforms it\n   probably knows how to update itself as well these days.\n   - As it happens I don't care right now because jfxtras is a source I\n   trust, so I clicked later and it popped up a permission screen saying the\n   author was unknown, could damage my computer, etc. Actually, Jim has a code\n   signing cert so this would show his identity at that point.\n   - Clicked run. The app downloaded in a few seconds and was running.\n   - JavaWS keeps the app up to date for you at that point.\n\nIt's triggered by downloading and opening a .jnlp file, so - same security\nboundaries as a regular app download, except you download metadata for the\nruntime instead of the whole app at once.\n\nIt might be worth providing a JNLP option on the multibit webpage as well,\nas although I wouldn't let the applet plugin in my browser, once I made an\nexplicit decision to go to multibit.org and trust James Burton with my\nmoney, the JWS experience at that point is pretty good. Until we have our\nown auto update engine it's better than nothing.\n\n\n\nOn Tue, Jul 9, 2013 at 1:04 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> How many downloads/day do we see currently? I think you said it's on the\n> order of a few thousand, so nowhere near 30k I'd guess. Anyway I can mirror\n> it if we need to.\n>\n> The JavaFX packager is supposed to delete parts of the JVM that aren't\n> used. Is the 30-40mb figure based on using that tool or something else?\n> Note that you don't need to use the JFX widget toolkit to use the bundler\n> tool.\n>\n> We could also invest in a copy of JET, which does native compilation down\n> to self contained Windows binaries. It might create smaller bundles. But,\n> it's a proprietary tool and I don't know how reproducible its outputs are.\n>\n> For the auto update, is there an existing auto update framework that we\n> can modify to support threshold signed updates? I'm sure such a thing must\n> exist. The updates would download in the background and then the app can\n> just ask the user to restart it once the update is locally available, as\n> Chrome does.\n>\n>\n>\n> On Tue, Jul 9, 2013 at 12:56 PM, Jim <jim618 at fastmail.co.uk> wrote:\n>\n>> Yes I would like to bundle a JVM as it would simplify the user\n>> experience.\n>>\n>> There are a few downsides though:\n>> + all the build packaging will need redoing and retesting.\n>> + it will bump up the MultiBit download from about 11MB to 30-40MB\n>> (I think). This drops the maximum copies of MultiBit the multibit.org\n>> server can deliver per day from around 90,000 to 30,000ish.\n>> The multibit.org server maxes out at 1 TB of bandwidth per day.\n>>\n>> Currently there is no provision to update anything automatically.\n>> I would like to start having Bitcoin signed files that MultiBit can\n>> check\n>> and update (initially the checkpoints file, I18N files - NOT code\n>> at first because of the security implications). I think this needs to be\n>> in place before bundling a JVM so that users don't have to\n>> keep redownloading it.\n>>\n>> Having lists of all the artifacts signed and them having SHA256 hashes\n>> then makes it practical/ safe to start mirroring the code. I can see\n>> each mirror crosschecking the others that the SHA256s are correct\n>> for instance. This would increase the maximum number of\n>> downloads we could cope with.\n>>\n>>\n>> On Tue, Jul 9, 2013, at 11:36 AM, Mike Hearn wrote:\n>> > Modern Java versions let you bundle the app with a stripped down JVM. I\n>> > don't know if Jim does that, but I think it's an obvious step towards\n>> > making MultiBit friendlier and easier to use.\n>> >\n>> > BTW I believe most secure browsers (Chrome, Firefox) have banned the\n>> > applet\n>> > plugin or severely restrained it anyway. So even if you install the JVM\n>> > and\n>> > plugin together there is not an issue.\n>> >\n>> >\n>> > On Tue, Jul 9, 2013 at 3:20 AM, Caleb James DeLisle <\n>> > calebdelisle at lavabit.com> wrote:\n>> >\n>> > > Java (Applet) security is indeed abysmal but lets compare apples to\n>> apples.\n>> > > With an applet some random guy with a website makes up some Java code\n>> and\n>> > > your browser automatically executes it.\n>> > > With Multibit you're only executing highly trusted code (so trusted\n>> that it\n>> > > handles your money).\n>> > > There has almost never been a Java exploit against secure trusted\n>> code.\n>> > >\n>> > > The idea of discouraging use of java apps just because people would be\n>> > > tricked into activating the browser plugin when installing the JVM is\n>> > > probably valid but Multibit is the only reasonably complete client\n>> outside\n>> > > of bitcoinqt and I think client diversity is more important than\n>> stamping\n>> > > out java.\n>> > >\n>> > > Thanks,\n>> > > Caleb\n>> > >\n>> > >\n>> > > On 07/08/2013 08:22 PM, Robert Backhaus wrote:\n>> > > > But... Multibit is Java. Java's security problems has made it an\n>> instant\n>> > > uninstall item on windows PCs for about a year now. Java exploits are\n>> a\n>> > > dime a dozen.\n>> > > >\n>> > > > Yes, you can reduce some of the problems by manually disabling the\n>> > > browser plugin, but how many users will do that?\n>> > > >\n>> > > > Recommending a fast SPV client as a first wallet - yes, of course.\n>> > > Recommending users open such a huge attack interface on their\n>> computers by\n>> > > installing Java - No go. Until Multibit is provided as a compiled\n>> binary\n>> > > without a Java dependency, it is DOA.\n>> > > >\n>> > > >\n>> > > > On 1 July 2013 02:39, Gary Rowe <g.rowe at froot.co.uk <mailto:\n>> > > g.rowe at froot.co.uk>> wrote:\n>> > > >\n>> > > >     I've beefed up the supporting documentation for the website to\n>> make\n>> > > it more accessible for developers who wish to contribute. It's a Java\n>> > > application serving HTML.\n>> > > >\n>> > > >     It can be found here:\n>> https://github.com/jim618/multibit-website\n>> > > >\n>> > > >\n>> > > >     On 30 June 2013 16:19, Jim <jim618 at fastmail.co.uk <mailto:\n>> > > jim618 at fastmail.co.uk>> wrote:\n>> > > >\n>> > > >         Yeah \"email jim' was never going to work so I have\n>> > > >         bumped up MultiBit support (a bit) by:\n>> > > >\n>> > > >         + having a dedicated Support page on the website\n>> > > >            https://multibit.org/support.html\n>> > > >            It has fixes and support notes for the most common\n>> gotchas.\n>> > > >         + the in-app help also now has a 'Support' section with\n>> > > >            \"Troubleshooting' and the commonest gotchas.\n>> > > >            I've also written more help to cover as much as possible.\n>> > > >         + Failing that people are directed first to\n>> > > bitcoin.stackchange.com <http://bitcoin.stackchange.com>\n>> > > >            (I have a notification set up for the 'multibit' keyword.\n>> > > >         + Then finally users are directed to the github issues to\n>> search\n>> > > >            existing or raise a new issue. Gary and Tim often chip\n>> in on\n>> > > there to\n>> > > >            close\n>> > > >            issues down as well as me.\n>> > > >\n>> > > >\n>> > > >\n>> > > >         On Sun, Jun 30, 2013, at 12:42 PM, Mike Hearn wrote:\n>> > > >         > Sounds like we have consensus, Saivann, shall we do it?\n>> > > >         >\n>> > > >         > I'm also going to ask Theymos again to relax the newbie\n>> > > restrictions\n>> > > >         > for the alt client forums. It's probably too hard to get\n>> > > support at\n>> > > >         > the moment and \"email jim\" doesn't scale at all.\n>> > > >         >\n>> > > >         > On Fri, Jun 28, 2013 at 4:24 PM, Gavin Andresen <\n>> > > gavinandresen at gmail.com <mailto:gavinandresen at gmail.com>>\n>> > > >         > wrote:\n>> > > >         > > I vote \"yes\" to have MultiBit replace Bitcoin-Qt as the\n>> > > recommended\n>> > > >         > > desktop wallet app. I think most users will be happier\n>> with\n>> > > it.\n>> > > >         > >\n>> > > >         > > If I'm wrong, it is easy to change back.\n>> > > >         > >\n>> > > >         > >\n>> > >\n>> ------------------------------------------------------------------------------\n>> > > >         > > This SF.net email is sponsored by Windows:\n>> > > >         > >\n>> > > >         > > Build for Windows Store.\n>> > > >         > >\n>> > > >         > > http://p.sf.net/sfu/windows-dev2dev\n>> > > >         > > _______________________________________________\n>> > > >         > > Bitcoin-development mailing list\n>> > > >         > > Bitcoin-development at lists.sourceforge.net <mailto:\n>> > > Bitcoin-development at lists.sourceforge.net>\n>> > > >         > >\n>> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> > > >         >\n>> > > >         >\n>> > >\n>> ------------------------------------------------------------------------------\n>> > > >         > This SF.net email is sponsored by Windows:\n>> > > >         >\n>> > > >         > Build for Windows Store.\n>> > > >         >\n>> > > >         > http://p.sf.net/sfu/windows-dev2dev\n>> > > >         > _______________________________________________\n>> > > >         > Bitcoin-development mailing list\n>> > > >         > Bitcoin-development at lists.sourceforge.net <mailto:\n>> > > Bitcoin-development at lists.sourceforge.net>\n>> > > >         >\n>> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> > > >\n>> > > >\n>> > > >         --\n>> > > >         https://multibit.org    Money, reinvented\n>> > > >\n>> > > >\n>> > >\n>> ------------------------------------------------------------------------------\n>> > > >         This SF.net email is sponsored by Windows:\n>> > > >\n>> > > >         Build for Windows Store.\n>> > > >\n>> > > >         http://p.sf.net/sfu/windows-dev2dev\n>> > > >         _______________________________________________\n>> > > >         Bitcoin-development mailing list\n>> > > >         Bitcoin-development at lists.sourceforge.net <mailto:\n>> > > Bitcoin-development at lists.sourceforge.net>\n>> > > >\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> > > >\n>> > > >\n>> > > >\n>> > > >\n>> > >\n>> ------------------------------------------------------------------------------\n>> > > >     This SF.net email is sponsored by Windows:\n>> > > >\n>> > > >     Build for Windows Store.\n>> > > >\n>> > > >     http://p.sf.net/sfu/windows-dev2dev\n>> > > >     _______________________________________________\n>> > > >     Bitcoin-development mailing list\n>> > > >     Bitcoin-development at lists.sourceforge.net <mailto:\n>> > > Bitcoin-development at lists.sourceforge.net>\n>> > > >\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> > > >\n>> > > >\n>> > > >\n>> > > >\n>> > > >\n>> > >\n>> ------------------------------------------------------------------------------\n>> > > > See everything from the browser to the database with AppDynamics\n>> > > > Get end-to-end visibility with application monitoring from\n>> AppDynamics\n>> > > > Isolate bottlenecks and diagnose root cause in seconds.\n>> > > > Start your free trial of AppDynamics Pro today!\n>> > > >\n>> > >\n>> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n>> > > >\n>> > > >\n>> > > >\n>> > > > _______________________________________________\n>> > > > Bitcoin-development mailing list\n>> > > > Bitcoin-development at lists.sourceforge.net\n>> > > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> > > >\n>> > >\n>> > >\n>> > >\n>> > >\n>> ------------------------------------------------------------------------------\n>> > > See everything from the browser to the database with AppDynamics\n>> > > Get end-to-end visibility with application monitoring from AppDynamics\n>> > > Isolate bottlenecks and diagnose root cause in seconds.\n>> > > Start your free trial of AppDynamics Pro today!\n>> > >\n>> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n>> > > _______________________________________________\n>> > > Bitcoin-development mailing list\n>> > > Bitcoin-development at lists.sourceforge.net\n>> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> > >\n>> >\n>> ------------------------------------------------------------------------------\n>> > See everything from the browser to the database with AppDynamics\n>> > Get end-to-end visibility with application monitoring from AppDynamics\n>> > Isolate bottlenecks and diagnose root cause in seconds.\n>> > Start your free trial of AppDynamics Pro today!\n>> >\n>> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n>> > _______________________________________________\n>> > Bitcoin-development mailing list\n>> > Bitcoin-development at lists.sourceforge.net\n>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>> --\n>> https://multibit.org    Money, reinvented\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> See everything from the browser to the database with AppDynamics\n>> Get end-to-end visibility with application monitoring from AppDynamics\n>> Isolate bottlenecks and diagnose root cause in seconds.\n>> Start your free trial of AppDynamics Pro today!\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/20be478a/attachment.html>"
            },
            {
                "author": "Daniel F",
                "date": "2013-07-09T14:00:01",
                "message_text_only": "on 07/09/2013 06:56 AM Jim said the following:\n> + it will bump up the MultiBit download from about 11MB to 30-40MB \n> (I think). This drops the maximum copies of MultiBit the multibit.org \n> server can deliver per day from around 90,000 to 30,000ish. \n> The multibit.org server maxes out at 1 TB of bandwidth per day.\n\nYou could host your downloads on sourceforge and achieve virtually\nunlimited capacity."
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-07-09T14:06:47",
                "message_text_only": "On Tue, Jul 9, 2013 at 10:00 AM, Daniel F <nanotube at gmail.com> wrote:\n> on 07/09/2013 06:56 AM Jim said the following:\n>> + it will bump up the MultiBit download from about 11MB to 30-40MB\n>> (I think). This drops the maximum copies of MultiBit the multibit.org\n>> server can deliver per day from around 90,000 to 30,000ish.\n>> The multibit.org server maxes out at 1 TB of bandwidth per day.\n>\n> You could host your downloads on sourceforge and achieve virtually\n> unlimited capacity.\n\nIndeed.  There is no reason to worry about download bandwidth these\ndays, for open source software downloads.\n\nMove the downloads to a site where such worries do not exist.\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-09T14:28:36",
                "message_text_only": "SourceForge has a horrible UI and blocks some countries. It also exposes us\nto a large and potentially hackable mirror network. Whilst we're not\nbandwidth constrained on our own servers, let's try and keep using them.\n\n\nOn Tue, Jul 9, 2013 at 4:06 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> On Tue, Jul 9, 2013 at 10:00 AM, Daniel F <nanotube at gmail.com> wrote:\n> > on 07/09/2013 06:56 AM Jim said the following:\n> >> + it will bump up the MultiBit download from about 11MB to 30-40MB\n> >> (I think). This drops the maximum copies of MultiBit the multibit.org\n> >> server can deliver per day from around 90,000 to 30,000ish.\n> >> The multibit.org server maxes out at 1 TB of bandwidth per day.\n> >\n> > You could host your downloads on sourceforge and achieve virtually\n> > unlimited capacity.\n>\n> Indeed.  There is no reason to worry about download bandwidth these\n> days, for open source software downloads.\n>\n> Move the downloads to a site where such worries do not exist.\n>\n> --\n> Jeff Garzik\n> Senior Software Engineer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/90f7630b/attachment.html>"
            },
            {
                "author": "Jim",
                "date": "2013-07-09T14:46:28",
                "message_text_only": "For those interested in these things the multibit.org server\nis a dedicated server hosted by the German company\nhttp://www.server4you.net. \n\nIt is physically located in the delightful city of Strasbourg, \njust on the French side of the French German border.\n\n\n\nOn Tue, Jul 9, 2013, at 03:28 PM, Mike Hearn wrote:\n> SourceForge has a horrible UI and blocks some countries. It also exposes\n> us\n> to a large and potentially hackable mirror network. Whilst we're not\n> bandwidth constrained on our own servers, let's try and keep using them.\n> \n> \n> On Tue, Jul 9, 2013 at 4:06 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> \n> > On Tue, Jul 9, 2013 at 10:00 AM, Daniel F <nanotube at gmail.com> wrote:\n> > > on 07/09/2013 06:56 AM Jim said the following:\n> > >> + it will bump up the MultiBit download from about 11MB to 30-40MB\n> > >> (I think). This drops the maximum copies of MultiBit the multibit.org\n> > >> server can deliver per day from around 90,000 to 30,000ish.\n> > >> The multibit.org server maxes out at 1 TB of bandwidth per day.\n> > >\n> > > You could host your downloads on sourceforge and achieve virtually\n> > > unlimited capacity.\n> >\n> > Indeed.  There is no reason to worry about download bandwidth these\n> > days, for open source software downloads.\n> >\n> > Move the downloads to a site where such worries do not exist.\n> >\n> > --\n> > Jeff Garzik\n> > Senior Software Engineer and open source evangelist\n> > BitPay, Inc.      https://bitpay.com/\n> >\n> >\n> > ------------------------------------------------------------------------------\n> > See everything from the browser to the database with AppDynamics\n> > Get end-to-end visibility with application monitoring from AppDynamics\n> > Isolate bottlenecks and diagnose root cause in seconds.\n> > Start your free trial of AppDynamics Pro today!\n> > http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n-- \nhttps://multibit.org    Money, reinvented"
            },
            {
                "author": "Daniel F",
                "date": "2013-07-09T14:57:34",
                "message_text_only": "on 07/09/2013 10:28 AM Mike Hearn said the following:\n> SourceForge has a horrible UI and blocks some countries. It also exposes\n> us to a large and potentially hackable mirror network. Whilst we're not\n> bandwidth constrained on our own servers, let's try and keep using them.\n\nthe point was just that \"if need be\" free capacity is available without\nhaving to throw money at it. until there's no need, doesn't matter.\n\nalso hackability (and ui) should be irrelevant for the autoupdate\nprocess (which i presume will do all kinds of checksum and sig\nverification). and it's likely the autoupdates that will create very\nlumpy download demand."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-09T15:27:17",
                "message_text_only": "That's true - we could serve new users off our own servers and auto updates\noff SF.net mirrors, potentially.\n\n\nOn Tue, Jul 9, 2013 at 4:57 PM, Daniel F <nanotube at gmail.com> wrote:\n\n> on 07/09/2013 10:28 AM Mike Hearn said the following:\n> > SourceForge has a horrible UI and blocks some countries. It also exposes\n> > us to a large and potentially hackable mirror network. Whilst we're not\n> > bandwidth constrained on our own servers, let's try and keep using them.\n>\n> the point was just that \"if need be\" free capacity is available without\n> having to throw money at it. until there's no need, doesn't matter.\n>\n> also hackability (and ui) should be irrelevant for the autoupdate\n> process (which i presume will do all kinds of checksum and sig\n> verification). and it's likely the autoupdates that will create very\n> lumpy download demand.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/8c1bf5c7/attachment.html>"
            },
            {
                "author": "Nick Simpson",
                "date": "2013-07-09T15:32:21",
                "message_text_only": "What about something like Cloudflare? Transparent to most and it'd help with your bandwidth issues.\n\n\nMike Hearn <mike at plan99.net> wrote:\n>That's true - we could serve new users off our own servers and auto\n>updates\n>off SF.net mirrors, potentially.\n>\n>\n>On Tue, Jul 9, 2013 at 4:57 PM, Daniel F <nanotube at gmail.com> wrote:\n>\n>> on 07/09/2013 10:28 AM Mike Hearn said the following:\n>> > SourceForge has a horrible UI and blocks some countries. It also\n>exposes\n>> > us to a large and potentially hackable mirror network. Whilst we're\n>not\n>> > bandwidth constrained on our own servers, let's try and keep using\n>them.\n>>\n>> the point was just that \"if need be\" free capacity is available\n>without\n>> having to throw money at it. until there's no need, doesn't matter.\n>>\n>> also hackability (and ui) should be irrelevant for the autoupdate\n>> process (which i presume will do all kinds of checksum and sig\n>> verification). and it's likely the autoupdates that will create very\n>> lumpy download demand.\n>>\n>>\n>>\n>>\n>------------------------------------------------------------------------------\n>> See everything from the browser to the database with AppDynamics\n>> Get end-to-end visibility with application monitoring from\n>AppDynamics\n>> Isolate bottlenecks and diagnose root cause in seconds.\n>> Start your free trial of AppDynamics Pro today!\n>>\n>http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>------------------------------------------------------------------------\n>\n>------------------------------------------------------------------------------\n>See everything from the browser to the database with AppDynamics\n>Get end-to-end visibility with application monitoring from AppDynamics\n>Isolate bottlenecks and diagnose root cause in seconds.\n>Start your free trial of AppDynamics Pro today!\n>http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/c84812b7/attachment.html>"
            },
            {
                "author": "Johnathan Corgan",
                "date": "2013-07-09T15:51:11",
                "message_text_only": "On 07/09/2013 08:32 AM, Nick Simpson wrote:\n\n> What about something like Cloudflare? Transparent to most and it'd help\n> with your bandwidth issues.\n\nBy way of endorsement, at the GNU Radio Project we switched to\nCloudFlare's free service tier a few months ago.  We host on AWS EC2 our\nown web servers, downloads, and git repositories.  CloudFlare has\nreduced our bandwidth bill by about 50%, with very little pain.\n\n-- \nJohnathan Corgan\nCorgan Labs - SDR Training and Development Services\nhttp://corganlabs.com\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 230 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/0cc393d5/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-09T16:44:08",
                "message_text_only": "That's good to know. Still, at the moment we'd need to dramatically\nincrease the download size and increase Bitcoin usage by 10x to hit our\nlimits. It'd be a good problem to have.\n\n\nOn Tue, Jul 9, 2013 at 5:51 PM, Johnathan Corgan\n<johnathan at corganlabs.com>wrote:\n\n> On 07/09/2013 08:32 AM, Nick Simpson wrote:\n>\n> > What about something like Cloudflare? Transparent to most and it'd help\n> > with your bandwidth issues.\n>\n> By way of endorsement, at the GNU Radio Project we switched to\n> CloudFlare's free service tier a few months ago.  We host on AWS EC2 our\n> own web servers, downloads, and git repositories.  CloudFlare has\n> reduced our bandwidth bill by about 50%, with very little pain.\n>\n> --\n> Johnathan Corgan\n> Corgan Labs - SDR Training and Development Services\n> http://corganlabs.com\n>\n>\n>\n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/84068a61/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-07-09T15:59:13",
                "message_text_only": "On Tue, Jul 9, 2013 at 11:32 AM, Nick Simpson <nick at mynicknet.com> wrote:\n> What about something like Cloudflare? Transparent to most and it'd help with\n> your bandwidth issues.\n\nCloudflare is rapidly becoming a bitcoin community SPOF.\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Nick Simpson",
                "date": "2013-07-09T16:03:02",
                "message_text_only": "Not any more than sourceforge or github.. None of these solutions are replacements, but rather only supplements to self hosted files.\n\nJeff Garzik <jgarzik at bitpay.com> wrote:\n>On Tue, Jul 9, 2013 at 11:32 AM, Nick Simpson <nick at mynicknet.com>\n>wrote:\n>> What about something like Cloudflare? Transparent to most and it'd\n>help with\n>> your bandwidth issues.\n>\n>Cloudflare is rapidly becoming a bitcoin community SPOF.\n>-- \n>Jeff Garzik\n>Senior Software Engineer and open source evangelist\n>BitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130709/0d8c3822/attachment.html>"
            },
            {
                "author": "Andreas Petersson",
                "date": "2013-07-09T22:15:03",
                "message_text_only": "It particulary worries me that a lot of sites hand over their SSL\nprivate keys to Cloudflare, and they are located in prism land.\n\n> Cloudflare is rapidly becoming a bitcoin community SPOF."
            }
        ],
        "thread_summary": {
            "title": "Proposal: MultiBit as default desktop client on bitcoin.org",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Jim",
                "Robert Backhaus",
                "Nick Simpson",
                "Andreas Petersson",
                "Caleb James DeLisle",
                "Mike Hearn",
                "Johnathan Corgan",
                "Daniel F",
                "Will"
            ],
            "messages_count": 20,
            "total_messages_chars_count": 82373
        }
    },
    {
        "title": "[Bitcoin-development] Review for slides for \"defeating trojans\" talk",
        "thread_messages": [
            {
                "author": "Rob Meijer",
                "date": "2013-07-12T14:28:24",
                "message_text_only": "Completed the first draft of my slides+speaker-notes for my upcoming\n\"Defeating Trojans\" talk at the OHM2013. BitCoin is one of the main\nexamples I use in this talk to emphasize the need for programs like\nBitCoin to have\ntheir own private storage apart from $HOME.\n\nTo make sure I don't misrepresent BitCoin, could anyone here help me out\nby reviewing my slides,  please let me know and I'll e-mail my (open\noffice) slides to you for review.\n\nTnx,\n\nRob"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-07-12T14:31:43",
                "message_text_only": "On Fri, Jul 12, 2013 at 7:28 AM, Rob Meijer <rmeijer at xs4all.nl> wrote:\n> Completed the first draft of my slides+speaker-notes for my upcoming\n> \"Defeating Trojans\" talk at the OHM2013. BitCoin is one of the main\n> examples I use in this talk to emphasize the need for programs like\n> BitCoin to have\n> their own private storage apart from $HOME.\n>\n> To make sure I don't misrepresent BitCoin, could anyone here help me out\n> by reviewing my slides,  please let me know and I'll e-mail my (open\n> office) slides to you for review.\n\nI'm game."
            },
            {
                "author": "Mats Henricson",
                "date": "2013-07-12T16:46:00",
                "message_text_only": "This is way off the point, but please write Bitcoin, not BitCoin.\n\nMats\n\n\nRob Meijer <rmeijer at xs4all.nl> wrote:\n\n>Completed the first draft of my slides+speaker-notes for my upcoming\n>\"Defeating Trojans\" talk at the OHM2013. BitCoin is one of the main\n>examples I use in this talk to emphasize the need for programs like\n>BitCoin to have\n>their own private storage apart from $HOME.\n>\n>To make sure I don't misrepresent BitCoin, could anyone here help me out\n>by reviewing my slides,  please let me know and I'll e-mail my (open\n>office) slides to you for review.\n>\n>Tnx,\n>\n>Rob\n>\n>\n>------------------------------------------------------------------------------\n>See everything from the browser to the database with AppDynamics\n>Get end-to-end visibility with application monitoring from AppDynamics\n>Isolate bottlenecks and diagnose root cause in seconds.\n>Start your free trial of AppDynamics Pro today!\n>http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            }
        ],
        "thread_summary": {
            "title": "Review for slides for \"defeating trojans\" talk",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gregory Maxwell",
                "Rob Meijer",
                "Mats Henricson"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 2176
        }
    },
    {
        "title": "[Bitcoin-development] Reward for P2SH IsStandard() patch.",
        "thread_messages": [
            {
                "author": "John Dillon",
                "date": "2013-07-14T19:05:26",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nAs you all know keeping the size of the UTXO set small is critical, and more\nrecently we've also had problems with distasteful data being added to the UTXO\nset. (http://garzikrants.blogspot.se/2013_04_01_archive.html) Gregory Maxwell\nhas an excellent solution to the distasteful data problem in the form of P2SH^2\n(http://comments.gmane.org/gmane.comp.bitcoin.devel/1996) and Peter Todd\npointed out how we can implement it with the existing P2SH form. We're also\ngoing to be implementing some kind of OP_RETURN <data> soon which handles the\ntimestamping and similar use-cases, again without UTXO impact.\n\nRight now the only scriptPubKey form with any significant use is the\nchecksighash. Bare pubkey gets used by the odd miner, and by Deepbit due to\ntheir ancient codebase. The former isn't an issue as the miner mines the txout\nthemselves, and the latter shouldn't find updating to be a big deal.\nOP_CHECKMULTISIG is used by Peter Todd's timestamper, but that can be changed\nto OP_RETURN without difficulty. However all that will (hopefully!) soon change\nas hardware wallets and the payment protocol make hardware wallets worthwhile,\nand we should make sure these protocols take the extra step of using P2SH\nbefore we get locked into a bunch OP_CHECKMULTISIG implementations.\n\nWe also have the problem that the IsStandard() code accepts up to 120 bytes of\njunk data as a pubkey, allowing injection of 240 bytes of *spendable* data into\nthe UTXO set with bare OP_CHECKMULTISIG. This capability has to be stopped.\n\nThus I'm offering a reward of 1BTC for whomever creates a patch to change\nIsStandard() to accept only P2SH and pubkeyhash in a raw scriptSig, allowing\nother forms only when used with P2SH. I'm offering a further 1BTC to whomever\ngets such a patch accepted into mainline. It's a pretty easy patch, so I'm\nasking that all core-developers (that includes you Peter) hold off for one week\nto give less experienced developers a crack at it. If for some reason you want\nto remain anonymous that is ok by me as well provided you assign copyright to\nme. I do expect unittests. Should be about half a day to a days work.\n\nLong-term we should be using P2SH with an inner OP_CHECKSIG for most addresses\nas it's a 1 byte savings. Change addresses can have this done first, although\nbitcoinj support will help so that satoshidice and similar sites can pay to\nP2SH change. As for multisig's P2SH overhead for a 1-of-2 and 2-of-2 and\n3-of-3, is 10%, 8.6% and 6.2% respectively, all pretty minor, especially if you\nassume the blocksize limit will be raised.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQEcBAEBCAAGBQJR4vX+AAoJEEWCsU4mNhiPg/EIAKWFaMsugbY4zZ+dpgnaTcUr\nD1ZnY5PogETVqcwuXdVdHe2zCUcBhejsBe8ic9vp8OnttXTxo8uXJp9xBuq9VYBN\nvXMyGKtxacLL5WS5ShAWnWS47xLf9wnKCJSGX0nqaETIQEUgqCMjTGspZNOpC9W0\nfKBIDi4cZbpXn1EQx45v9vplZhFg+vBQV/Ia2/5rjZLPFvdqZoSBruOVTB/X2SDU\nHq36DQkRFblp/s3Ktv9c3yUQ8HocRIXD8jKRsE+uCNfEeI2b9oLpPp1cPsOvjveI\nMcJnHod8EDzxwbm6abK2cxHWBpGmBa5AABsRmQfpJK+u7GDQoPqzfJ68M1otZjk=\n=uP4n\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-07-14T19:28:39",
                "message_text_only": "On Sun, Jul 14, 2013 at 07:05:26PM +0000, John Dillon wrote:\n> Long-term we should be using P2SH with an inner OP_CHECKSIG for most addresses\n> as it's a 1 byte savings. Change addresses can have this done first, although\n> bitcoinj support will help so that satoshidice and similar sites can pay to\n> P2SH change. As for multisig's P2SH overhead for a 1-of-2 and 2-of-2 and\n> 3-of-3, is 10%, 8.6% and 6.2% respectively, all pretty minor, especially if you\n> assume the blocksize limit will be raised.\n\nSmall comment: the current implementation in the reference client uses a custom\nscript encoder for the UTXO database, which stores every (valid) send-to-pubkey\nas 33 bytes and every send-to-pubkeyhash or send-to-scripthash as 21 bytes.\nSo for \"standard\" address payment, there is no storage impact of using P2SH\ninstead.\n\n-- \nPieter"
            },
            {
                "author": "John Dillon",
                "date": "2013-07-14T19:40:21",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn Sun, Jul 14, 2013 at 7:28 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> On Sun, Jul 14, 2013 at 07:05:26PM +0000, John Dillon wrote:\n>> Long-term we should be using P2SH with an inner OP_CHECKSIG for most addresses\n>> as it's a 1 byte savings. Change addresses can have this done first, although\n>> bitcoinj support will help so that satoshidice and similar sites can pay to\n>> P2SH change. As for multisig's P2SH overhead for a 1-of-2 and 2-of-2 and\n>> 3-of-3, is 10%, 8.6% and 6.2% respectively, all pretty minor, especially if you\n>> assume the blocksize limit will be raised.\n>\n> Small comment: the current implementation in the reference client uses a custom\n> script encoder for the UTXO database, which stores every (valid) send-to-pubkey\n> as 33 bytes and every send-to-pubkeyhash or send-to-scripthash as 21 bytes.\n> So for \"standard\" address payment, there is no storage impact of using P2SH\n> instead.\n\nBy \"impact\" I am referring to the impact on transaction size and thus\nblockchain space and fees, not UTXO size as stored by nodes themselves.\nSpecifically take the size of the txout and txin and compare the version using\nP2SH to the equivalent version not using it to get my numbers.\n\nAnyway, given how much uncompressed keys are still used obviously fee pressure\nisn't even close to getting people to create efficient transactions.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQEcBAEBCAAGBQJR4v6QAAoJEEWCsU4mNhiP/ToH/1zwzkG0v8OphBaglzhF/dha\nQgRXy3CGQqs43w1hEsfPNaZUyKIZz2gmGtJV2PUh5FavhWY9IUuMCVLvPJ18KZkc\neCLtAWSlUkjemXz6S52RPXW3vmKTJzZK4ZBZP0JiRYfhBQWbUlArLh+mQw9RcWng\n9fdS/Xw4QYFfnN46NMlHdHyqGn4Mu8VgsozeUlxWXBGorf2+IFbMxR1BRi33CluH\n3r6AIRHXPSqgHf6qnHgWqKh/WXMxuG8lLyLa00Rj+ByNcNQCwLV/+9AzSJYNA5Ol\nnnGdkbVDtLjmDS4KjwuSXGP8jh/uRrHLubcgk6UEm27K2/yJxARBfECo78aBLsg=\n=Nx+9\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Reward for P2SH IsStandard() patch.",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "John Dillon",
                "Pieter Wuille"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 5826
        }
    },
    {
        "title": "[Bitcoin-development] Protecting Bitcoin against network-wide DoS attack",
        "thread_messages": [
            {
                "author": "John Dillon",
                "date": "2013-07-14T22:12:00",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nIt's been pointed out recently how a fairly cheap attack on the Bitcoin network\nwould be to take advantage of the fact that we limit the number of incoming\nconnections, but don't require anything of those connections. This means an\nattacker can simply repeatedly query the the DNS seeds for new addresses and\nmake enough incoming connections that those nodes can not accept further\nclients. nMaxConnections defaults to 125, and beyond that there is the limit on\nfile descriptors, as well as possible limits by stateful firewalls. (how much\nmemory/cpu does an incoming connection require?) The DNS seeds themselves crawl\nthe network on your behalf, and let you direct the attack starting at the nodes\nnew SPV clients are most likely to connect too.\n\nThe cost to the attacker is minimal, 1 INV message per transaction and block,\nand some gossiped peer addresses.  Currently that should be on the order of 30\nbytes a second. The attacker can do even better by pretending to be an SPV\nclient, thus reducing their incoming bandwidth consumption to nearly nothing,\nyet increasing resource usage on the node.\n\nPeter estimated you would need just 200 or so well distributed IP addresses to\nmake it impossible to use an SPV client. In fact as far as I can tell for\nincoming connections we don't force incoming connections to be well\ndistributed, so the attack could be done by simply one server with enough\namount of bandwidth. Estimates of the total number of nodes out there on\nmainnet are in the tens of thousands, let's say 25,000 for arguments sake. 125\nconnections to every one of those nodes would only cost the attacker 94MB/s of\nincoming bandwidth, easily attainable by a few cheap EC2 nodes, and on EC2\nincoming bandwidth is free. The SPV version of the attack would let the\nattacker spend as little as they wished.\n\nObviously if we want to make it possible for SPV nodes to reliably connect to\nthe network we need to give them a way to prove they have sacrificed some\nlimited resource to allow nodes to distinguish legit users from attackers.\nFailing that, we need to make attacks sufficiently expensive to discourage\nbored script-kiddies, much the same way flooding the network with transactions\nis sufficiently expensive due to fees that such attacks are impractical.\n\nNow something to keep in mind is whatever we ask SPV nodes to sacrifice must\nnot be reusable. For instance proof-of-stake *doesn't* work without consensus\nbecause an attacker can reuse the proof for multiple connections. Similarly IP\naddresses don't work, requring incoming connections to be \"well distributed\" in\nIP space isn't a bad idea, but it doesn't buy much DoS resistance. Fees paid by\nconfirmed transactions do work, but only if something links the transaction to\nthe specific connection.\n\nWe also want whatever the nodes to sacrifice to be something not much more\ncostly to the client than to the attacker. Bandwidth isn't reusable, but an\nattacker with EC2 or a botnet has vastly lower costs for bandwidth than a user\nwith an Android wallet on a phone.\n\n\nFor a non-SPV-mode client we can easily do anti-DoS by requiring the peer to do\n\"useful work\". As the incoming connections slots get used up, simply kick off\nthe incoming peers who have relayed the least fee-paying transactions and valid\nblocks, keeping the peers who have relayed the most. We can continue to use the\nusual, randomized, logic for outgoing peers to attempt to preserve the\nrandomized structure of the bitcoin network. Without an ongoing attack nodes\nmaking new connections are unaffected, and during an attack new connections are\nmade somewhat easier by the increased numbers of incoming slots made available\nas the attackers connections timeout.\n\nYes an attacker can simply relay some high-fee transactions to keep their nodes\nfrom being kicked off, but in that case are they really an attacker? I reject\nthe argument that we are letting them de-randomize the structure of the network\nbecause as I've shown they can already do that with little expenditure.\n\n\nFor SPV nodes again in the absense of an attack such anti-DoS code has no\neffect. When an attack is launched the SPV client can simply create some\nhigh-fee transactions with their own coins to get connection priority. SPV\nnodes already have serious privacy issues, so I don't see the creation of\ntransactions as a big deal. Re-use is an issue, but nodes can take into account\nhow long it takes for another nodes to advertise the transactions when dealing\nwith SPV peers. Better systems can be implemented later, such as micropayment\nchannels and coinbase probabalistic payments, that don't result in blockchain\ntransactions just for the sake of anti-DoS.\n\n\nA demo of the attack against would be useful. Pieter Wuille's bitcoin-seeder\ncode could probably be re-used as it already has the required functionality of\nmaking large numbers of connections. In fact, simply running multiple instances\nof it could do the trick.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQEcBAEBCAAGBQJR4yHgAAoJEEWCsU4mNhiPRvkH/3fl5brCe+1cBUoFtAnVHV+0\ndezNeXo+nAbDg8XCkF6cmFkDBSgTj8l2iy0N1pfCq1XDXmqfM5p+CtxIBuIwwURc\nKnpwNnRwoQ0JKYFonmaM0rQgOcXnRvyNq2DVL/b/fA6X3I5nignWNFDtzpvFhM+J\nIjhEVbu5S25c+O8LFlJV0ujjBgnR/8gJ0xV2fvdsaisAVHly1n9QWa1FEnMz7hp9\nwfXPBh8tnehKnsspyeAEq5Yc/Yyow97CdwOqPVknI0rhes0OWR8ORcJ2NkBZm/Pn\nrUFFMwAme/K1f3PqW1+EpM4gG/pJvg+xU5E5KdqgnjsQLoEGWtMcxEdAeCoBuNI=\n=jzfg\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-15T07:32:24",
                "message_text_only": "On Sun, Jul 14, 2013 at 10:12:00PM +0000, John Dillon wrote:\n> For a non-SPV-mode client we can easily do anti-DoS by requiring the peer to do\n> \"useful work\". As the incoming connections slots get used up, simply kick off\n> the incoming peers who have relayed the least fee-paying transactions and valid\n> blocks, keeping the peers who have relayed the most. We can continue to use the\n> usual, randomized, logic for outgoing peers to attempt to preserve the\n> randomized structure of the bitcoin network. Without an ongoing attack nodes\n> making new connections are unaffected, and during an attack new connections are\n> made somewhat easier by the increased numbers of incoming slots made available\n> as the attackers connections timeout.\n\nMy mempool rewrite defined a CMemPoolTx subclass for CTransaction - it\nshouldn't be too hard to add the required per-node accounting once nodes\nget unique identifiers. (can be assigned randomly in the beginning,\nlater can be used for permanent node identifiers w/ ssl and message\nsigning)\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000214cc4e58adcacd8923d4d37b18e4f6b73556443ae7c88f71a\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130715/6b71caf0/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Protecting Bitcoin against network-wide DoS attack",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "John Dillon",
                "Peter Todd"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 6877
        }
    },
    {
        "title": "[Bitcoin-development] Introducing BitcoinKit.framework",
        "thread_messages": [
            {
                "author": "Wendell",
                "date": "2013-07-15T10:07:57",
                "message_text_only": "Hi devs,\n\nJust wanted to cross-post this here since it seems very relevant.\n\nWe're launching BitcoinKit.framework, a Cocoa framework that allows developers to write Bitcoin wallet apps for Mac OS X. BitcoinKit uses bitcoind, and serves a small and tidy API for developer use. Support for other Bitcoin implementations (libcbitcoin, etc) is soon to follow.\n\nBitcoinKit's first application is as the backbone of a new Mac wallet app called Hive, which will be released soon at www.grabhive.com.\n\nGrab the source here:\nhttps://github.com/grabhive/BitcoinKit\n\nSupport is available via GitHub issues and this Bitcointalk thread:\nhttps://bitcointalk.org/index.php?topic=256583.msg2733523\n\nA sample GUI app is also included:\nhttp://imgur.com/FzqA00X\n\nCheers everyone!\n\n-Wendell\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 841 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130715/f4ae94ff/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-15T13:19:35",
                "message_text_only": "That's great! I'm all for more wallets, especially user friendly UIs.\n\nHowever being based on bitcoind means it will take a very long time to\nsynchronize for new users. We know a lot of users drop out. The best fix\nfor this is SPV mode. Do you have any plans in this direction?\n\nSo far, the only SPV mode implementation I know about is bitcoinj. I am\nexperimenting with trans-piling bitcoinj to C++ to make it usable from\nObjective-C++ exactly with your use case in mind.\n\n\n\nOn Mon, Jul 15, 2013 at 12:07 PM, Wendell <w at grabhive.com> wrote:\n\n> Hi devs,\n>\n> Just wanted to cross-post this here since it seems very relevant.\n>\n> We're launching BitcoinKit.framework, a Cocoa framework that allows\n> developers to write Bitcoin wallet apps for Mac OS X. BitcoinKit uses\n> bitcoind, and serves a small and tidy API for developer use. Support for\n> other Bitcoin implementations (libcbitcoin, etc) is soon to follow.\n>\n> BitcoinKit's first application is as the backbone of a new Mac wallet app\n> called Hive, which will be released soon at www.grabhive.com.\n>\n> Grab the source here:\n> https://github.com/grabhive/BitcoinKit\n>\n> Support is available via GitHub issues and this Bitcointalk thread:\n> https://bitcointalk.org/index.php?topic=256583.msg2733523\n>\n> A sample GUI app is also included:\n> http://imgur.com/FzqA00X\n>\n> Cheers everyone!\n>\n> -Wendell\n>\n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130715/69a3df55/attachment.html>"
            },
            {
                "author": "Wendell",
                "date": "2013-07-15T14:39:30",
                "message_text_only": "Hi Mike,\n\nYou are absolutely right about the synchronize time, it's one of our main frustration points right now and we clearly won't deliver the kind of user experience we want, without fixing this. Actually we were thinking of extending Jeff Garzik's picocoin as time permits, but the plan is far from concrete at the moment.\n\nWhat you say about trans-piling bitcoinj is _really_ appealing. We discounted Java simply because an OS X JVM is no longer guaranteed, but otherwise bitcoinj is ideal for our purposes. How can we assist or otherwise accelerate such an effort?\n\n-w\n\nOn Jul 15, 2013, at 3:19 PM, Mike Hearn wrote:\n\n> That's great! I'm all for more wallets, especially user friendly UIs.\n> \n> However being based on bitcoind means it will take a very long time to synchronize for new users. We know a lot of users drop out. The best fix for this is SPV mode. Do you have any plans in this direction?\n> \n> So far, the only SPV mode implementation I know about is bitcoinj. I am experimenting with trans-piling bitcoinj to C++ to make it usable from Objective-C++ exactly with your use case in mind."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-15T15:48:41",
                "message_text_only": "Oracle provide an OSX JVM and will do so for the forseeable future, it's\nalso open source, so the community could carry on if they stopped. The\nprimary problem with the Oracle JVM is lack of retina support for Swing,\nbut if you'd write a Cocoa UI yourself then it doesn't matter of course as\nJava won't handle any GUI stuff. Retina support for JavaFX2 (the\ncurrent-gen gui toolkit) is available in Java 8 so it's definitely being\nactively developed, it's not abandoned or anything.\n\nSo the question then becomes, which is better:\n\na) Take bitcoinj completely out of the Java world via native compilation or\ntranspilation to C++\nb) Embed the JVM and link the two worlds together?\n\n(b) is much less ambitious, especially if you're OK with writing a bit of\nJava code to keep the interface thin. Basically the Java side calls into\nyour app when interesting user-visible things happen, like new transactions\nappearing, then your GUI can call into the java side to send money. There\nare auto-translators that make the glue work easy, like\nhttps://code.google.com/p/javacpp/. You probably wouldn't want to expose\nthe entire bitcoinj API that way because it's very large, but the code\nneeded to bring up a wallet app is very small. I knocked one up this\nweekend in about one evenings worth of coding, completed with nice\nanimations. The interfaces you'd need are basically some Objective-C++\nmethods that receive information from the Bitcoin side, like the balance\nhaving changed, a list of transactions, etc, and then a callback into the\nJava side to send money. If you look at the javacpp site you can see\nexample code for making calls both ways.\n\nIf I were in your shoes, I'd go for (b) because it is the most well trodden\npath and will let you achieve the best user visible results quickly. The\nJVM can be bundled with your app and stripped down if you're worried about\ndownload size.\n\nIf it's unclear how the code would look, let me know and I'll try and knock\nup a really simple prototype.\n\nThere's also (a). I'm investigating transpilation for a few reasons, one of\nwhich is to do with a private project. I'm working with the author of j2c:\nhttps://code.google.com/a/eclipselabs.org/p/j2c/. It's a rather\nsophisticated transpiler that converts Java to clean, readable C++11 that\nlooks much like code a human would write. It's complete enough to transpile\nthe entire standard Java class library, including all the GUI toolkits and\nother things - so, pretty amazing piece of code. However it's incomplete\nbecause where the Java code calls native methods (that would be provided by\nthe JVM) it just spits out stubs you're expected to fill out yourself, for\nstarting threads and so on. As there's no JVM it's just like using a C++\nlibrary that is missing a \"portability layer\".\n\nI'm working on this myself and don't really need much help at the moment,\nI'm just making steady progress towards getting something up and running. I\ncan let you know once I reach some interesting milestones. The point of\nthis is that whilst you don't need access to most of the API to write a\nwallet app, I'd like to make every kind of app easy from C++, not just GUI\nwallets. Then the compile-to-C++ approach is much more appealing, even\nthough it's also more work.\n\n\n\n\n\nOn Mon, Jul 15, 2013 at 4:39 PM, Wendell <w at grabhive.com> wrote:\n\n> Hi Mike,\n>\n> You are absolutely right about the synchronize time, it's one of our main\n> frustration points right now and we clearly won't deliver the kind of user\n> experience we want, without fixing this. Actually we were thinking of\n> extending Jeff Garzik's picocoin as time permits, but the plan is far from\n> concrete at the moment.\n>\n> What you say about trans-piling bitcoinj is _really_ appealing. We\n> discounted Java simply because an OS X JVM is no longer guaranteed, but\n> otherwise bitcoinj is ideal for our purposes. How can we assist or\n> otherwise accelerate such an effort?\n>\n> -w\n>\n> On Jul 15, 2013, at 3:19 PM, Mike Hearn wrote:\n>\n> > That's great! I'm all for more wallets, especially user friendly UIs.\n> >\n> > However being based on bitcoind means it will take a very long time to\n> synchronize for new users. We know a lot of users drop out. The best fix\n> for this is SPV mode. Do you have any plans in this direction?\n> >\n> > So far, the only SPV mode implementation I know about is bitcoinj. I am\n> experimenting with trans-piling bitcoinj to C++ to make it usable from\n> Objective-C++ exactly with your use case in mind.\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130715/d66cfde1/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-15T20:08:12",
                "message_text_only": "You can cut down the JVM to be a few megabytes if you're aggressive about\nit. But for a desktop app I'm not sure it's really necessary these days. A\nfew megabytes used to make a noticeable difference to success rates but\nbandwidth improved a lot since then.\n\nPortability to android is a given, it's already Java based. IOS is a non\nstarter until apple is convinced to allow wallet apps into the App store,\nlanguage is not the issue there.\n\nThere is no point manually rewriting bitcoinj to c++ when j2c does such a\ngreat job already. You would want to at last start from what it generates\neven if you fork from there.\nOn 15 Jul 2013 20:19, \"Jonas Schnelli\" <jonas.schnelli at include7.ch> wrote:\n\n> The embedded JVM is a way. But the binary will be huge.\n> And how about the portability (like iOS and Android)?\n>\n> If i would have \"unlimited resources\" and like to make a \"perfect native\n> client\" i would see two solutions:\n> a) add SPV features to bitcoind and go on with BitcoinKit.framework (maybe\n> first SPV features are only available through \"API's\" and not for bitcoind\n> as runnable binary)\n> b) rewrite bitcoinj in c++ (*auto-port the unit-tests* and try to rewrite\n> line by line to c++)\n>\n> also a mix of a) and b) is possible. Like extending bitcoind with the\n> SPVBlockstore, bloom filter, etc. from bitcoinj (rewritten in c++). The\n> wallet birthday must also be added somehow.\n>\n> both a) and b) (or the mix) is a lot of work and might take much longer as\n> Mike's JVM idea.\n> But it then might end up in a stable, portable and extendable pice of code.\n>\n> </jonas>\n>\n>\n>\n> Oracle provide an OSX JVM and will do so for the forseeable future, it's\n> also open source, so the community could carry on if they stopped. The\n> primary problem with the Oracle JVM is lack of retina support for Swing,\n> but if you'd write a Cocoa UI yourself then it doesn't matter of course as\n> Java won't handle any GUI stuff. Retina support for JavaFX2 (the\n> current-gen gui toolkit) is available in Java 8 so it's definitely being\n> actively developed, it's not abandoned or anything.\n>\n> So the question then becomes, which is better:\n>\n> a) Take bitcoinj completely out of the Java world via native compilation\n> or transpilation to C++\n> b) Embed the JVM and link the two worlds together?\n>\n> (b) is much less ambitious, especially if you're OK with writing a bit of\n> Java code to keep the interface thin. Basically the Java side calls into\n> your app when interesting user-visible things happen, like new transactions\n> appearing, then your GUI can call into the java side to send money. There\n> are auto-translators that make the glue work easy, like\n> https://code.google.com/p/javacpp/. You probably wouldn't want to expose\n> the entire bitcoinj API that way because it's very large, but the code\n> needed to bring up a wallet app is very small. I knocked one up this\n> weekend in about one evenings worth of coding, completed with nice\n> animations. The interfaces you'd need are basically some Objective-C++\n> methods that receive information from the Bitcoin side, like the balance\n> having changed, a list of transactions, etc, and then a callback into the\n> Java side to send money. If you look at the javacpp site you can see\n> example code for making calls both ways.\n>\n> If I were in your shoes, I'd go for (b) because it is the most well\n> trodden path and will let you achieve the best user visible results\n> quickly. The JVM can be bundled with your app and stripped down if you're\n> worried about download size.\n>\n> If it's unclear how the code would look, let me know and I'll try and\n> knock up a really simple prototype.\n>\n> There's also (a). I'm investigating transpilation for a few reasons, one\n> of which is to do with a private project. I'm working with the author of\n> j2c: https://code.google.com/a/eclipselabs.org/p/j2c/. It's a rather\n> sophisticated transpiler that converts Java to clean, readable C++11 that\n> looks much like code a human would write. It's complete enough to transpile\n> the entire standard Java class library, including all the GUI toolkits and\n> other things - so, pretty amazing piece of code. However it's incomplete\n> because where the Java code calls native methods (that would be provided by\n> the JVM) it just spits out stubs you're expected to fill out yourself, for\n> starting threads and so on. As there's no JVM it's just like using a C++\n> library that is missing a \"portability layer\".\n>\n> I'm working on this myself and don't really need much help at the moment,\n> I'm just making steady progress towards getting something up and running. I\n> can let you know once I reach some interesting milestones. The point of\n> this is that whilst you don't need access to most of the API to write a\n> wallet app, I'd like to make every kind of app easy from C++, not just GUI\n> wallets. Then the compile-to-C++ approach is much more appealing, even\n> though it's also more work.\n>\n>\n>\n>\n>\n> On Mon, Jul 15, 2013 at 4:39 PM, Wendell <w at grabhive.com> wrote:\n>\n>> Hi Mike,\n>>\n>> You are absolutely right about the synchronize time, it's one of our main\n>> frustration points right now and we clearly won't deliver the kind of user\n>> experience we want, without fixing this. Actually we were thinking of\n>> extending Jeff Garzik's picocoin as time permits, but the plan is far from\n>> concrete at the moment.\n>>\n>> What you say about trans-piling bitcoinj is _really_ appealing. We\n>> discounted Java simply because an OS X JVM is no longer guaranteed, but\n>> otherwise bitcoinj is ideal for our purposes. How can we assist or\n>> otherwise accelerate such an effort?\n>>\n>> -w\n>>\n>> On Jul 15, 2013, at 3:19 PM, Mike Hearn wrote:\n>>\n>> > That's great! I'm all for more wallets, especially user friendly UIs.\n>> >\n>> > However being based on bitcoind means it will take a very long time to\n>> synchronize for new users. We know a lot of users drop out. The best fix\n>> for this is SPV mode. Do you have any plans in this direction?\n>> >\n>> > So far, the only SPV mode implementation I know about is bitcoinj. I am\n>> experimenting with trans-piling bitcoinj to C++ to make it usable from\n>> Objective-C++ exactly with your use case in mind.\n>>\n>>\n>\n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> \u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\n> include7 AG\n> Jonas Schnelli\n> Mattengasse 27\n> CH-8005 Z\u00fcrich\n> Switzerland\n> Office: +41 44 500 16 70\n>\n> Mail: jonas.schnelli at include7.ch\n> Web: www.include7.ch\n> V-Card: www.include7.ch/js.vcf\n> \u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\n>\n> ACHTUNG\n> Bitte senden sie uns keine sensitiven Daten in unverschl\u00fcsselten E-Mails.\n> Verwenden Sie hierzu folgenden Link:\n> https://include7.ch/contact/secureform\n>\n> \u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\u00b0\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130715/3c8e94e0/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-16T09:21:40",
                "message_text_only": "> Clear. Your right. C++ would give us more flexibility (other platforms)\n> and also android compatibility (through NDK).\n>\n\nI'm a bit confused I'm afraid. bitcoinj already runs SPV wallets on Android\non top of Dalvik. In fact that's what it's designed for. The NDK is not\nnecessary to work with Bitcoin at any point.\n\n\n> That's a great idea.\n> Let me look into the quality of j2c's output.\n>\n\nThere's an example of what it looks like here:\n\nhttps://code.google.com/a/eclipselabs.org/p/j2c/wiki/Examples\n\nIf you're serious about playing with j2c let me know. It's an amazing piece\nof work BUT it was written for fun, and as such isn't really documented at\nall. It took me a little while to figure out how to make it work properly.\nI'm now fixing bugs in it and making various improvements along with\nfilling out the native stubs (a.k.a. portability layer). If you want to\ncatch up to where I'm at, I can send you some notes because otherwise you\nmight waste a lot of time on blind alleys.\n\nThe main things be aware of so far are:\n\n   - Lots of explicit null pointer checks are generated. The reason is that\n   the output is meant to be entirely portable, so Jacek doesn't want to rely\n   on platform specific stuff like signals or SEH. Simplest solution is just\n   to disable npc() generation entirely because normal C++ libraries just\n   segfault if a null pointer gets in the wrong place, they don't throw\n   exceptions. Losing the Java behaviour would not be a downgrade for people\n   used to C++.\n\n   - Array accesses don't seem to be properly bounds-checked. That's a part\n   of the Java security model - bitcoinj is written on the assumption that\n   buffer and heap overflows aren't possible because they're caught by the\n   runtime. If those checks go missing then it'd likely become possible to\n   hack your program by exploiting buffer overflows. So that needs to be fixed.\n\n   - Generated code doesn't use the STL of course, it can't because the\n   Java library has more features than the STL. However as the way j2c works\n   is you transpile your code alongside a copy of the (open source) Java class\n   library, you can go in and modify the generated code for java::lang::String\n   or java::util::List and so on to add helper methods for converting to\n   various other forms. On Linux you'd have implicit c'tors to go back and\n   forth between std::string, on MacOS X you'd have conversions for NSString,\n   you could add code for QStrings or raw C strings too. Once the code has\n   been generated you can extend or patch it to make the API more convenient.\n\n   - Obviously, the resulting code requires the Boehm GC because there are\n   no explicit delete calls anywhere. This is a safety feature though, it\n   avoids use-after-free and double-free bugs that can create security holes.\n\n   - The code generator doesn't do dependency tracing, so you end up with\n   generated code that isn't used anywhere. It's up to the linker to do a dead\n   code elimination pass. Otherwise the resulting binaries can be huge.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130716/1a743665/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-22T13:08:58",
                "message_text_only": "As an FYI, I've sent Wendell and co some example code for how to use CPPJVM\nto use bitcoinj from native code. A rather rough Hello World app looks like\nthis:\n\nhttps://github.com/mikehearn/cppjvm/blob/master/mytest/bcj-hello-world.cpp\n\nSo, fairly C++ like.\n\nFurther discussion of this should take place on the bitcoinj mailing list.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130722/3734f5cb/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-16T09:51:57",
                "message_text_only": "Let's re-add the list as this is a topic of general interest.\n\nOn Tue, Jul 16, 2013 at 11:36 AM, Jonas Schnelli <jonas.schnelli at include7.ch\n> wrote:\n\n> What do you think about extending the BitcoinKit.framework (based on\n> bitcoind) so that the kit could handle the very basic SPV concept\n> (getHeaders aka fast catchup, wallet-birthday, bloom filters)?\n> Maybe it would be possible to only port some of the bitcoinj work to c++\n> (and use it for extending BitcoinKit or bitcoind)?\n> Maybe then it could also be a starting point for someone who likes to\n> create a SPV mode for bitcoind?\n>\n\nMaking bitcoind/Bitcoin-Qt support SPV mode was the original plan some\nyears ago, Satoshi even sent me some code he wrote that did the first\nparts, but it was incomplete.\n\nAt the time, I decided to do a separate implementation for a few different\nreasons. One is that my understanding of his code wasn't so good back then\nand I lacked confidence to change it. Especially as there were no unit\ntests back then (and still aren't any for most of it), making invasive\nchanges to the core validation code was and is highly risky. A separate\ncode base seemed to reduce the risk a lot.\n\nAnother reason is that Satoshi encouraged me to write a simple\nre-implementation that people could learn from. And I wanted a documented,\nobject oriented API that people could use to build a variety of apps.\n\nYet another reason was bitcoind is security critical code that scrapes\ncomplex data structures from untrusted sources on the internet, and it's\nwritten in an unmanaged language. Ordinarily this would be a recipe for\ndisaster as a single overflow or memory management error could lead to\nhacking and theft on a massive scale. It's like taking a chainsaw and using\nit to carve an ice sculpture. Satoshi, incredibly, pulled it off, mostly by\nusing advanced C++ features that made his code hard to read for many people\nand by being very, very careful. I was not convinced I could do such a good\njob and was worried about accidentally introducing vulnerabilities.\n\nA final reason is that it was clear that the bitcoind codebase would need\nserious changes for mobiles, beyond that required for ordinary SPV support.\nFor example, Satoshi's code assumes it has access to block headers via a\nstd::map and that assumption is made in a lot of places. On Android phones,\nyou can't fit all the block headers in RAM. bitcoinj uses a circular ring\nbuffer of the last N thousand headers for this reason. It's quite different\nto how bitcoind works.\n\nAll that said, it was a ton of work and it's still unclear that it was the\nright call.\n\nAnyway, your situation is a little different. Firstly you don't care about\nmobiles, your app is intended for desktops. So the changes required are\nless invasive. Also, there are more unit tests and more people with a good\nunderstanding of the code these days, so perhaps the risk of introducing\nbugs is lower. And these days we have some nice APIs for building apps so\nthat need is already met.\n\nIf you wanted to implement SPV mode in bitcoind, Gavin or I could send you\nSatoshi's old patch although of course it is no longer usable. It would\nindicate the basic cut lines though.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130716/1f7b2a9c/attachment.html>"
            },
            {
                "author": "Wendell",
                "date": "2013-07-16T10:17:46",
                "message_text_only": "I for one would be interested in taking a look at that.\n\nIn San Jose I was asking around about the possibility of hiring someone to complete such a patch. Pieter Wuille introduced me to Eric Lombrozo, who expressed interest, but has since gotten quite busy. So we haven't arrived at a detailed estimate of what it would involve.\n\nMaybe it would be better to start a completely new thread for this topic, but I would very much be interested in an open dissection of what adding SPV support to bitcoind would take. I am willing to fund or (ideally) co-fund this endeavor, if I can ever get my head around it. I'm super interested in all of these possibilities (including micro-stripped-VMs and transpilation), but would simply like to encourage the proliferation of _options_ whenever possible.\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive\n\nOn Jul 16, 2013, at 11:51 AM, Mike Hearn wrote:\n\n> If you wanted to implement SPV mode in bitcoind, Gavin or I could send you Satoshi's old patch although of course it is no longer usable. It would indicate the basic cut lines though."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-16T10:59:56",
                "message_text_only": "I think that's a great approach. Here is the patch Satoshi sent me back in\n2010. All the code has changed since but it can be a source of inspiration.\n\n>From Satoshi:\n\n*The simplified payment verification in the paper imagined you would\nreceive transactions directly, as with sending to IP address which nobody\nuses, or a node would index all transactions by public key and you could\ndownload them like downloading mail from a mail server.\n\nInstead, I think client-only nodes should receive full blocks so they can\nscan them for their own transactions.  They don't need to store them or\nindex them.  For the initial download, they only need to download headers,\nsince there couldn't be any payments before the first time the program was\nrun (a header download command was added in 0.3.18).  From then on, they\ndownload full blocks (but only store the headers).\n\nCode for client-only mode is mostly implemented.  There's a feature branch\non github with it, also I'm attaching the patch to this message.\n\nHere's some more about it:\n\n\"Here's my client-mode implementation so far.  Client-only mode only\nrecords block headers and doesn't use the tx index.  It can't generate, but\nit can still send and receive transactions.  It's not fully finished for\nuse by end-users, but it doesn't matter because it's a complete no-op if\nfClient is not enabled.  At this point it's mainly documentation showing\nthe cut-lines for client-only re-implementers.\n\nWith fClient=true, I've only tested the header-only initial download.\n\nA little background.  CBlockIndex contains all the information of the block\nheader, so to operate with headers only, I just maintain the CBlockIndex\nstructure as usual.  The nFile/nBlockPos are null, since the full block is\nnot recorded on disk.\n\nThe code to gracefully switch between client-mode on/off without deleting\nblk*.dat in between is not implemented yet.  It would mostly be a matter of\nhaving non-client LoadBlockIndex ignore block index entries with null block\npos.  That would make it re-download those as full blocks.  Switching back\nto client-mode is no problem, it doesn't mind if the full blocks are there.\n\nIf the initial block download becomes too long, we'll want client mode as\nan option so new users can get running quickly.  With graceful switch-off\nof client mode, they can later turn off client mode and have it download\nthe full blocks if they want to start generating.  They should rather just\nuse a getwork miner to join a pool instead.\n\nClient-only re-implementations would not need to implement EvalScript at\nall, or at most just implement the five ops used by the standard\ntransaction templates.\"\n*\n\n\n\n\ndiff -u old\\db.cpp new\\db.cpp\n--- old\\db.cpp  Sat Dec 18 18:35:59 2010\n+++ new\\db.cpp  Sun Dec 19 20:53:59 2010\n@@ -464,29 +464,32 @@\n     ReadBestInvalidWork(bnBestInvalidWork);\n\n     // Verify blocks in the best chain\n-    CBlockIndex* pindexFork = NULL;\n-    for (CBlockIndex* pindex = pindexBest; pindex && pindex->pprev; pindex\n= pindex->pprev)\n+    if (!fClient)\n     {\n-        if (pindex->nHeight < nBestHeight-2500 &&\n!mapArgs.count(\"-checkblocks\"))\n-            break;\n-        CBlock block;\n-        if (!block.ReadFromDisk(pindex))\n-            return error(\"LoadBlockIndex() : block.ReadFromDisk failed\");\n-        if (!block.CheckBlock())\n+        CBlockIndex* pindexFork = NULL;\n+        for (CBlockIndex* pindex = pindexBest; pindex && pindex->pprev;\npindex = pindex->pprev)\n         {\n-            printf(\"LoadBlockIndex() : *** found bad block at %d,\nhash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n-            pindexFork = pindex->pprev;\n+            if (pindex->nHeight < nBestHeight-2500 &&\n!mapArgs.count(\"-checkblocks\"))\n+                break;\n+            CBlock block;\n+            if (!block.ReadFromDisk(pindex))\n+                return error(\"LoadBlockIndex() : block.ReadFromDisk\nfailed\");\n+            if (!block.CheckBlock())\n+            {\n+                printf(\"LoadBlockIndex() : *** found bad block at %d,\nhash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n+                pindexFork = pindex->pprev;\n+            }\n+        }\n+        if (pindexFork)\n+        {\n+            // Reorg back to the fork\n+            printf(\"LoadBlockIndex() : *** moving best chain pointer back\nto block %d\\n\", pindexFork->nHeight);\n+            CBlock block;\n+            if (!block.ReadFromDisk(pindexFork))\n+                return error(\"LoadBlockIndex() : block.ReadFromDisk\nfailed\");\n+            CTxDB txdb;\n+            block.SetBestChain(txdb, pindexFork);\n         }\n-    }\n-    if (pindexFork)\n-    {\n-        // Reorg back to the fork\n-        printf(\"LoadBlockIndex() : *** moving best chain pointer back to\nblock %d\\n\", pindexFork->nHeight);\n-        CBlock block;\n-        if (!block.ReadFromDisk(pindexFork))\n-            return error(\"LoadBlockIndex() : block.ReadFromDisk failed\");\n-        CTxDB txdb;\n-        block.SetBestChain(txdb, pindexFork);\n     }\n\n     return true;\ndiff -u old\\main.cpp new\\main.cpp\n--- old\\main.cpp        Sat Dec 18 18:35:59 2010\n+++ new\\main.cpp        Sun Dec 19 20:53:59 2010\n@@ -637,6 +637,9 @@\n     if (!IsStandard())\n         return error(\"AcceptToMemoryPool() : nonstandard transaction\ntype\");\n\n+    if (fClient)\n+        return true;\n+\n     // Do we already have it?\n     uint256 hash = GetHash();\n     CRITICAL_BLOCK(cs_mapTransactions)\n@@ -1308,23 +1311,26 @@\n     if (!CheckBlock())\n         return false;\n\n-    //// issue here: it doesn't know the version\n-    unsigned int nTxPos = pindex->nBlockPos + ::GetSerializeSize(CBlock(),\nSER_DISK) - 1 + GetSizeOfCompactSize(vtx.size());\n-\n-    map<uint256, CTxIndex> mapUnused;\n-    int64 nFees = 0;\n-    foreach(CTransaction& tx, vtx)\n+    if (!fClient)\n     {\n-        CDiskTxPos posThisTx(pindex->nFile, pindex->nBlockPos, nTxPos);\n-        nTxPos += ::GetSerializeSize(tx, SER_DISK);\n+        //// issue here: it doesn't know the version\n+        unsigned int nTxPos = pindex->nBlockPos +\n::GetSerializeSize(CBlock(), SER_DISK) - 1 + GetSizeOfCompactSize(vtx.size(\n));\n+\n+        map<uint256, CTxIndex> mapUnused;\n+        int64 nFees = 0;\n+        foreach(CTransaction& tx, vtx)\n+        {\n+            CDiskTxPos posThisTx(pindex->nFile, pindex->nBlockPos, nTxPos);\n+            nTxPos += ::GetSerializeSize(tx, SER_DISK);\n\n-        if (!tx.ConnectInputs(txdb, mapUnused, posThisTx, pindex, nFees,\ntrue, false))\n+            if (!tx.ConnectInputs(txdb, mapUnused, posThisTx, pindex,\nnFees, true, false))\n+                return false;\n+        }\n+\n+        if (vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n             return false;\n     }\n\n-    if (vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n-        return false;\n-\n     // Update block index on disk without changing it in memory.\n     // The memory index structure will be changed after the db commits.\n     if (pindex->pprev)\n@@ -1378,7 +1384,7 @@\n     foreach(CBlockIndex* pindex, vDisconnect)\n     {\n         CBlock block;\n-        if (!block.ReadFromDisk(pindex))\n+        if (!block.ReadFromDisk(pindex, !fClient))\n             return error(\"Reorganize() : ReadFromDisk for disconnect\nfailed\");\n         if (!block.DisconnectBlock(txdb, pindex))\n             return error(\"Reorganize() : DisconnectBlock failed\");\n@@ -1395,7 +1401,7 @@\n     {\n         CBlockIndex* pindex = vConnect[i];\n         CBlock block;\n-        if (!block.ReadFromDisk(pindex))\n+        if (!block.ReadFromDisk(pindex, !fClient))\n             return error(\"Reorganize() : ReadFromDisk for connect failed\");\n         if (!block.ConnectBlock(txdb, pindex))\n         {\n@@ -1526,7 +1532,7 @@\n\n     txdb.Close();\n\n-    if (pindexNew == pindexBest)\n+    if (!fClient && pindexNew == pindexBest)\n     {\n         // Notify UI to display prev block's coinbase if it was ours\n         static uint256 hashPrevBestCoinBase;\n@@ -1547,10 +1553,6 @@\n     // These are checks that are independent of context\n     // that can be verified before saving an orphan block.\n\n-    // Size limits\n-    if (vtx.empty() || vtx.size() > MAX_BLOCK_SIZE ||\n::GetSerializeSize(*this, SER_NETWORK) > MAX_BLOCK_SIZE)\n-        return error(\"CheckBlock() : size limits failed\");\n-\n     // Check proof of work matches claimed amount\n     if (!CheckProofOfWork(GetHash(), nBits))\n         return error(\"CheckBlock() : proof of work failed\");\n@@ -1559,6 +1561,13 @@\n     if (GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n         return error(\"CheckBlock() : block timestamp too far in the\nfuture\");\n\n+    if (fClient && vtx.empty())\n+        return true;\n+\n+    // Size limits\n+    if (vtx.empty() || vtx.size() > MAX_BLOCK_SIZE ||\n::GetSerializeSize(*this, SER_NETWORK) > MAX_BLOCK_SIZE)\n+        return error(\"CheckBlock() : size limits failed\");\n+\n     // First transaction must be coinbase, the rest must not be\n     if (vtx.empty() || !vtx[0].IsCoinBase())\n         return error(\"CheckBlock() : first tx is not coinbase\");\n@@ -1623,13 +1632,14 @@\n         return error(\"AcceptBlock() : out of disk space\");\n     unsigned int nFile = -1;\n     unsigned int nBlockPos = 0;\n-    if (!WriteToDisk(nFile, nBlockPos))\n-        return error(\"AcceptBlock() : WriteToDisk failed\");\n+    if (!fClient)\n+        if (!WriteToDisk(nFile, nBlockPos))\n+            return error(\"AcceptBlock() : WriteToDisk failed\");\n     if (!AddToBlockIndex(nFile, nBlockPos))\n         return error(\"AcceptBlock() : AddToBlockIndex failed\");\n\n     // Relay inventory, but don't relay old inventory during initial block\ndownload\n-    if (hashBestChain == hash)\n+    if (!fClient && hashBestChain == hash)\n         CRITICAL_BLOCK(cs_vNodes)\n             foreach(CNode* pnode, vNodes)\n                 if (nBestHeight > (pnode->nStartingHeight != -1 ?\npnode->nStartingHeight - 2000 : 55000))\n@@ -2405,6 +2415,8 @@\n         {\n             if (fShutdown)\n                 return true;\n+            if (fClient && inv.type == MSG_TX)\n+                continue;\n             pfrom->AddInventoryKnown(inv);\n\n             bool fAlreadyHave = AlreadyHave(txdb, inv);\n@@ -2441,6 +2453,9 @@\n\n             if (inv.type == MSG_BLOCK)\n             {\n+                if (fClient)\n+                    return true;\n+\n                 // Send block from disk\n                 map<uint256, CBlockIndex*>::iterator mi =\nmapBlockIndex.find(inv.hash);\n                 if (mi != mapBlockIndex.end())\n@@ -2486,6 +2501,8 @@\n\n     else if (strCommand == \"getblocks\")\n     {\n+        if (fClient)\n+            return true;\n         CBlockLocator locator;\n         uint256 hashStop;\n         vRecv >> locator >> hashStop;\n@@ -2556,6 +2573,8 @@\n\n     else if (strCommand == \"tx\")\n     {\n+        if (fClient)\n+            return true;\n         vector<uint256> vWorkQueue;\n         CDataStream vMsg(vRecv);\n         CTransaction tx;\n@@ -2620,6 +2639,33 @@\n\n         if (ProcessBlock(pfrom, &block))\n             mapAlreadyAskedFor.erase(inv);\n+    }\n+\n+\n+    else if (strCommand == \"headers\")\n+    {\n+        if (!fClient)\n+            return true;\n+        vector<CBlock> vHeaders;\n+        vRecv >> vHeaders;\n+\n+        uint256 hashBestBefore = hashBestChain;\n+        foreach(CBlock& block, vHeaders)\n+        {\n+            block.vtx.clear();\n+\n+            printf(\"received header %s\\n\", block.GetHash().ToString().\nsubstr(0,20).c_str());\n+\n+            CInv inv(MSG_BLOCK, block.GetHash());\n+            pfrom->AddInventoryKnown(inv);\n+\n+            if (ProcessBlock(pfrom, &block))\n+                mapAlreadyAskedFor.erase(inv);\n+        }\n+\n+        // Request next batch\n+        if (hashBestChain != hashBestBefore)\n+            pfrom->PushGetBlocks(pindexBest, uint256(0));\n     }\n\n\nOn Tue, Jul 16, 2013 at 12:17 PM, Wendell <w at grabhive.com> wrote:\n\n> I for one would be interested in taking a look at that.\n>\n> In San Jose I was asking around about the possibility of hiring someone to\n> complete such a patch. Pieter Wuille introduced me to Eric Lombrozo, who\n> expressed interest, but has since gotten quite busy. So we haven't arrived\n> at a detailed estimate of what it would involve.\n>\n> Maybe it would be better to start a completely new thread for this topic,\n> but I would very much be interested in an open dissection of what adding\n> SPV support to bitcoind would take. I am willing to fund or (ideally)\n> co-fund this endeavor, if I can ever get my head around it. I'm super\n> interested in all of these possibilities (including micro-stripped-VMs and\n> transpilation), but would simply like to encourage the proliferation of\n> _options_ whenever possible.\n>\n> -wendell\n>\n> grabhive.com | twitter.com/grabhive\n>\n> On Jul 16, 2013, at 11:51 AM, Mike Hearn wrote:\n>\n> > If you wanted to implement SPV mode in bitcoind, Gavin or I could send\n> you Satoshi's old patch although of course it is no longer usable. It would\n> indicate the basic cut lines though.\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130716/cb9235b2/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-07-21T15:55:14",
                "message_text_only": "On Tue, Jul 16, 2013 at 12:59:56PM +0200, Mike Hearn wrote:\n> I think that's a great approach. Here is the patch Satoshi sent me back in\n> 2010. All the code has changed since but it can be a source of inspiration.\n> \n> >From Satoshi:\n> \n> *The simplified payment verification in the paper imagined you would\n> receive transactions directly, as with sending to IP address which nobody\n> uses, or a node would index all transactions by public key and you could\n> download them like downloading mail from a mail server.\n\nI'm currently working on headers-first sync, which I believe is generally\nvery useful (it fixes tons of edge-cases block synchronization currently\nexperiences), but it's also a first step towards SPV mode.\n\nSo headers-first sync means you first synchronize just the headers, and then,\nwhen you already know (or have strong evidence for a guess on) the best chain,\nstart requesting blocks along that best chain - potentially in parallel from\ndifferent peers.\n\nSPV mode is basically headers-first sync, but never do the full block sync\nstep, and replace it with a bloom/birthday/...-based fetching of blocks\ninteresting to the associated wallets. In SPV you'll also need to disable\nthe mempool though, and there will be more small changes, but I think\nthe separate headers-sync phase will be most of the work.\n\n-- \nPieter"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-21T17:20:18",
                "message_text_only": "Actually bitcoinj typically doesn't download all the headers (just from the\nlast checkpoint) and it throws away headers that are very old. By now\nthere's quite a lot of difference in how they manage things and I guess it\nwill diverge from bitcoind even more in future. For instance we're going to\nstart only storing relevant outputs in the wallet and doing other things to\ntry and save memory. Some people managed to get themselves wallets that\ndon't actually fit in ram :(\nOn 21 Jul 2013 17:55, \"Pieter Wuille\" <pieter.wuille at gmail.com> wrote:\n\n> On Tue, Jul 16, 2013 at 12:59:56PM +0200, Mike Hearn wrote:\n> > I think that's a great approach. Here is the patch Satoshi sent me back\n> in\n> > 2010. All the code has changed since but it can be a source of\n> inspiration.\n> >\n> > >From Satoshi:\n> >\n> > *The simplified payment verification in the paper imagined you would\n> > receive transactions directly, as with sending to IP address which nobody\n> > uses, or a node would index all transactions by public key and you could\n> > download them like downloading mail from a mail server.\n>\n> I'm currently working on headers-first sync, which I believe is generally\n> very useful (it fixes tons of edge-cases block synchronization currently\n> experiences), but it's also a first step towards SPV mode.\n>\n> So headers-first sync means you first synchronize just the headers, and\n> then,\n> when you already know (or have strong evidence for a guess on) the best\n> chain,\n> start requesting blocks along that best chain - potentially in parallel\n> from\n> different peers.\n>\n> SPV mode is basically headers-first sync, but never do the full block sync\n> step, and replace it with a bloom/birthday/...-based fetching of blocks\n> interesting to the associated wallets. In SPV you'll also need to disable\n> the mempool though, and there will be more small changes, but I think\n> the separate headers-sync phase will be most of the work.\n>\n> --\n> Pieter\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130721/8389635e/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Introducing BitcoinKit.framework",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Pieter Wuille",
                "Wendell"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 41220
        }
    },
    {
        "title": "[Bitcoin-development] SPV bitcoind? (was: Introducing BitcoinKit.framework)",
        "thread_messages": [
            {
                "author": "Wendell",
                "date": "2013-07-16T14:16:23",
                "message_text_only": "Hello everyone,\n\nIn the previous thread, I expressed interest in seeing an SPV bitcoind, further stating that I would fund such work. Mike Hearn followed up with some of Satoshi's old code for this, which is now quite broken. The offer and interest on my side still stand, as more diversity in SPV options seems like the right way to go.\n\nTime-permitting, I would really appreciate feedback from knowledgable parties about the possible approaches to an SPV bitcoind. We at Hive ideally want to see something that could one be merge into master, rather than a fork.\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-16T15:09:19",
                "message_text_only": "You'd want to create and get merged patches in the following order:\n\n1) Be able to store just block headers in the blkXXXX.dat files instead of\nfull block contents. At this point you are still *downloading* full blocks,\nbut they are not being stored. The contents are still sent to the wallet\nfor extracting relevant transactions though (see SyncWithWallets).  You\nalso need to disable listening and addr announcements to the P2P network at\nthis point. You need to be able to re-org and do all the usual things\nwithout storing block contents. You also need to short-circuit the leveldbs\nso they aren't created or used. All that needs to be unit tested. You need\nto also rewrite the mempool logic so it throws out irrelevant transactions.\nThe RPC interface needs to adjust itself so you can't try to start mining,\nquery the utxo set, etc.\n\nAt this point you have an SPV node, albeit one that still downloads the\nentire block chain. However total disk storage used will be much lower.\nGetting this written and reviewed is a big chunk of work but is the hardest\npart. Once it's done you can breath easy.\n\n2) Next step, use getheaders to catch up with the chain until the\nmin(wallet birthdays) is reached. You can see in Satoshi's patch where he\nadds support for receiving \"headers\" messages. Because key times are\nrecorded as dates and you don't know the dates of blocks in advance, you\nneed to download headers until you see one that goes past the key birthday\nminus some slack period, then throw out the headers you downloaded and\nswitch to downloading full blocks again from that point onwards.\n\n3) Next step, implement client side support for Bloom filtering. Switch\nfrom downloading full blocks to filteredblocks, verify the Merkle branches\nthen apply them to the wallet. Watch out for accidental re-orderings of\ntransactions here from block order (e.g. if you accidentally insert them\ninto a std::map or other unordered collection it can lead to bugs). Come up\nwith some way to decide on a FP rate. Probably you want a fairly high FP\nrate for desktop wallets.\n\n4) Next step (optional), implement monitoring of broadcast propagation for\ntransactions that are received. SPV clients cannot verify unconfirmed\ntransactions so you can either just give up entirely and accept any old\ngarbage, or assume a non-MITMd internet connection and use network\npropagation as a rough proxy for \"likely to be valid and mined upon\".\n\n4) Optimize!\n\nHow much you need to optimize really depends on a lot of things. I found\nthat to be competitive with Electrum/blockchain.info I had to do a ton of\noptimizations including very aggressive checkpointing so new users don't\nhave to download more than a month or twos worth of headers, as downloading\nall the headers was becoming a bottleneck. You'd need to download about\n16mb+ of data at the moment to grab all the headers and on a weakass mobile\nphone with a weak Dalvik VM and 3G internet this was way too much. I also\nhad to spend some time profiling to ensure we weren't accidentally\nthrashing the UI due to too-fast updates, we weren't bottlenecking on\nupdating last seen block data in the wallet, we weren't accidentally\nde/reserializing messages redundantly etc.\n\nAfter about 3-4 evenings of non-stop profiling and optimising I ended up\nwith a relatively flat profile whilst doing initial catchup and chain sync.\nOn a desktop I bet you can get away with much less optimisation because\nyour CPUs, network and disk tend to be much stronger.\n\n\n\nOn Tue, Jul 16, 2013 at 4:16 PM, Wendell <w at grabhive.com> wrote:\n\n> Hello everyone,\n>\n> In the previous thread, I expressed interest in seeing an SPV bitcoind,\n> further stating that I would fund such work. Mike Hearn followed up with\n> some of Satoshi's old code for this, which is now quite broken. The offer\n> and interest on my side still stand, as more diversity in SPV options seems\n> like the right way to go.\n>\n> Time-permitting, I would really appreciate feedback from knowledgable\n> parties about the possible approaches to an SPV bitcoind. We at Hive\n> ideally want to see something that could one be merge into master, rather\n> than a fork.\n>\n> -wendell\n>\n> grabhive.com | twitter.com/grabhive\n>\n>\n>\n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130716/0e2c8341/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-17T10:58:53",
                "message_text_only": "On Tue, Jul 16, 2013 at 04:16:23PM +0200, Wendell wrote:\n> Hello everyone,\n> \n> In the previous thread, I expressed interest in seeing an SPV bitcoind, further stating that I would fund such work. Mike Hearn followed up with some of Satoshi's old code for this, which is now quite broken. The offer and interest on my side still stand, as more diversity in SPV options seems like the right way to go.\n> \n> Time-permitting, I would really appreciate feedback from knowledgable parties about the possible approaches to an SPV bitcoind. We at Hive ideally want to see something that could one be merge into master, rather than a fork.\n\nKeep in mind that SPV mode is newer than many realize: bloom filters are\na 0.8 feature, itself released only last Febuary. As John Dillon posted\nearlier this week in \"Protecting Bitcoin against network-wide DoS\nattack\" the Bitcoin codebase will have to implement much better anti-DoS\nattack defences soon, and in a decentralized system there aren't any\noptions other than requiring peers to either do work (useful or not) or\nsacrifice something of value. SPV peers can't do useful work, leaving\nonly sacrifice - to what extent and how much is unknown. In addition SPV\nnodes have serious privacy issues because their peers know that any\ntransaction sent to them by the SPV node is guaranteed to be from the\nnode rather than relayed; bloom filters are only really helpful with\npayment protocols that don't exist yet and don't apply to merchants.\nThen you have MITM problems, vulnerability to fake blocks etc.\n\nIt'll be awhile before we know how serious these issues are in practice,\nand we're likely to find new issues we didn't think of too. In any case\nBitcoin is far better off if we make it easy to run a full node,\ndonating whatever resources you can. Fortunately there's a whole\ncontinuum between SPV and full nodes.\n\nThe way you do this is by maintaining partial UTXO sets. The trick is\nthat if you have verified every block in some range i to j, every time\nyou see a txout created by a transaction, and not subsequently spent,\nyou can be sure that at height j the txout existed. If height j is the\ncurrent block, you can be sure the txout exists provided that the chain\nitself is valid. Any transaction that only spends txouts in this partial\nset is a transaction you can fully verify and safely relay; for other\ntransactions you just don't know and have to wait until you see them in\na block.\n\nSo what's useful about that? Basically it means your node starts with\nthe same security level, and usefulness to the network, as a SPV node.\nBut over time you keep downloading blocks as they are created, and with\nwhatever bandwidth you have left (out of some user-configurable\nallocation) you download additional blocks going further and further\nback in time. Gradually your UTXO set becomes more complete, and over\ntime you can verify a higher and higher % of all valid transactions.\nEventually your node becomes a full node, but in the meantime it was\nstill useful for the user, and still contributed to the network by\nrelaying blocks and an increasingly large subset of all transactions.\n(optionally you can store a subset of the chain history too for other\nnodes to bootstrap from) You've also got better security because you\n*are* validating blocks, starting off incompletely, and increasingly\ncompletely until your finally validating fully. Privacy is improved, for\nboth you and others, by mixing your transactions with others and adding\nto the overall anonymity set.\n\nIn the future we'll have miners commit a hash of the UTXO set, and that\ngives us even more options to, for instance, have relayed transactions\ninclude proof that their inputs were valid, allowing all nodes to relay\nthem safely.\n\n\nAs for specifics, you need to maintain a UTXO set, and in addition a set\nof spent txouts (the STXO set) for which you haven't seen the\ntransaction that created the txout. As download newer blocks you update\nthe UTXO set; as you download older blocks you update the UTXO set and\nSTXO set.\n\nNodes now advertise this new variable to their peers:\n\nnOldestBlock - The oldest block that we've validated. (and all\nsubsequent blocks)\n\nWe'll also want the ability to advertise what sub-ranges of the\nblockchain data we have on hand:\n\nlistArchivedBlockRanges - lists of (begin, end pairs)\n\nNodes should drop all but the largest n pairs, say 5 or something. The\nindex -1 is reserved to indicate the last block to make it easy to\nadvertise that you have every block starting at some height to the most\nrecent. (reserving -n with n as the last block might be a better choice\nto show intent, but still allow for specific proofs when we get node\nidentities)\n\nWe probably want to define a NODE_PARTIAL service bit or something; I'll\nhave to re-read Pieter Wuille's proposal and think about it. Nodes\nshould NOT advertize NODE_NETWORK unless they have the full chain and\nhave verified it.\n\nNodes with partial peers should only relay transactions to those peers\nif the transactions spend inputs the peers know about - remember how\neven an SPV node has that information if it's not spending unconfirmed\ninputs it didn't create. Nodes will have to update their peers\nperiodically as nOldestBlock changes. That said it may also be\nworthwhile to simply relay all transactions in some cases too - a\nreasonable way to approach this might be to set a bloom filter for tx's\nthat you *definitely* want, and if you are interested in everything,\njust set the filter to all 1's. If someone comes up with a reasonable\nmicropayment or proof-of-work system even relaying txs that you haven't\nvalidated is fine - the proof-of-work and prioritization will prevent\nDoS attacks just fine.\n\nRemember that if you're running a partial node, it can get new blocks\nfrom any partial node, and it can retrieve historic blockchain data from\nany partial node that has archived the sequence of blocks you need next.\nOn a large scale this is similar to how in BitTorrent you can serve data\nto your peers the moment you get it - a significant scalability\nimprovement for the network as a whole. Even if a large % of the network\nwas partial nodes running for just a few hours a day the whole system\nwould work fine due to how partial nodes can serve each other the data\nthey need.\n\nOn startup you can act as a SPV node temporarily, grabbing asking for\nfiltered blocks matching your wallet, and then go back and get the full\nblocks, or just download the full blocks right away. That's a tradeoff\non how long the node has been off.\n\nAnyway, it's a bit more code compared to pure-SPV, but it results in a\nmuch more scalable Bitcoin, and if you can spare the modest bandwidth\nrequirements to keep up with the blockchain it'll result in much better\nrobustness against DoS attacks for you and Bitcoin in general.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/a73ba03e/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-17T12:29:26",
                "message_text_only": "Partial UTXO sets is a neat idea. Unfortunately my intuition is that many\nSPV wallets only remain open for <1 minute at a time because the user wants\nto see they received money, or to send it. It'd be neat to get some\ntelemetry from the Android wallet for this - I will ask Andreas to let\nusers opt in to usage statistics.\n\nSo for anti-DoS I think smart prioritisation heuristics are the way to go\nagain. Perhaps by letting clients have an \"identity\" that they provide to a\nnode when it's load shedding. Clients that have been seen before, have a\ntrack record of not being abusive etc get priority and new clients that\nwere never seen before get dropped. Coming up with a way to do that whilst\npreserving privacy sounds like an interesting cryptographic challenge.\n\n\nOn Wed, Jul 17, 2013 at 12:58 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> On Tue, Jul 16, 2013 at 04:16:23PM +0200, Wendell wrote:\n> > Hello everyone,\n> >\n> > In the previous thread, I expressed interest in seeing an SPV bitcoind,\n> further stating that I would fund such work. Mike Hearn followed up with\n> some of Satoshi's old code for this, which is now quite broken. The offer\n> and interest on my side still stand, as more diversity in SPV options seems\n> like the right way to go.\n> >\n> > Time-permitting, I would really appreciate feedback from knowledgable\n> parties about the possible approaches to an SPV bitcoind. We at Hive\n> ideally want to see something that could one be merge into master, rather\n> than a fork.\n>\n> Keep in mind that SPV mode is newer than many realize: bloom filters are\n> a 0.8 feature, itself released only last Febuary. As John Dillon posted\n> earlier this week in \"Protecting Bitcoin against network-wide DoS\n> attack\" the Bitcoin codebase will have to implement much better anti-DoS\n> attack defences soon, and in a decentralized system there aren't any\n> options other than requiring peers to either do work (useful or not) or\n> sacrifice something of value. SPV peers can't do useful work, leaving\n> only sacrifice - to what extent and how much is unknown. In addition SPV\n> nodes have serious privacy issues because their peers know that any\n> transaction sent to them by the SPV node is guaranteed to be from the\n> node rather than relayed; bloom filters are only really helpful with\n> payment protocols that don't exist yet and don't apply to merchants.\n> Then you have MITM problems, vulnerability to fake blocks etc.\n>\n> It'll be awhile before we know how serious these issues are in practice,\n> and we're likely to find new issues we didn't think of too. In any case\n> Bitcoin is far better off if we make it easy to run a full node,\n> donating whatever resources you can. Fortunately there's a whole\n> continuum between SPV and full nodes.\n>\n> The way you do this is by maintaining partial UTXO sets. The trick is\n> that if you have verified every block in some range i to j, every time\n> you see a txout created by a transaction, and not subsequently spent,\n> you can be sure that at height j the txout existed. If height j is the\n> current block, you can be sure the txout exists provided that the chain\n> itself is valid. Any transaction that only spends txouts in this partial\n> set is a transaction you can fully verify and safely relay; for other\n> transactions you just don't know and have to wait until you see them in\n> a block.\n>\n> So what's useful about that? Basically it means your node starts with\n> the same security level, and usefulness to the network, as a SPV node.\n> But over time you keep downloading blocks as they are created, and with\n> whatever bandwidth you have left (out of some user-configurable\n> allocation) you download additional blocks going further and further\n> back in time. Gradually your UTXO set becomes more complete, and over\n> time you can verify a higher and higher % of all valid transactions.\n> Eventually your node becomes a full node, but in the meantime it was\n> still useful for the user, and still contributed to the network by\n> relaying blocks and an increasingly large subset of all transactions.\n> (optionally you can store a subset of the chain history too for other\n> nodes to bootstrap from) You've also got better security because you\n> *are* validating blocks, starting off incompletely, and increasingly\n> completely until your finally validating fully. Privacy is improved, for\n> both you and others, by mixing your transactions with others and adding\n> to the overall anonymity set.\n>\n> In the future we'll have miners commit a hash of the UTXO set, and that\n> gives us even more options to, for instance, have relayed transactions\n> include proof that their inputs were valid, allowing all nodes to relay\n> them safely.\n>\n>\n> As for specifics, you need to maintain a UTXO set, and in addition a set\n> of spent txouts (the STXO set) for which you haven't seen the\n> transaction that created the txout. As download newer blocks you update\n> the UTXO set; as you download older blocks you update the UTXO set and\n> STXO set.\n>\n> Nodes now advertise this new variable to their peers:\n>\n> nOldestBlock - The oldest block that we've validated. (and all\n> subsequent blocks)\n>\n> We'll also want the ability to advertise what sub-ranges of the\n> blockchain data we have on hand:\n>\n> listArchivedBlockRanges - lists of (begin, end pairs)\n>\n> Nodes should drop all but the largest n pairs, say 5 or something. The\n> index -1 is reserved to indicate the last block to make it easy to\n> advertise that you have every block starting at some height to the most\n> recent. (reserving -n with n as the last block might be a better choice\n> to show intent, but still allow for specific proofs when we get node\n> identities)\n>\n> We probably want to define a NODE_PARTIAL service bit or something; I'll\n> have to re-read Pieter Wuille's proposal and think about it. Nodes\n> should NOT advertize NODE_NETWORK unless they have the full chain and\n> have verified it.\n>\n> Nodes with partial peers should only relay transactions to those peers\n> if the transactions spend inputs the peers know about - remember how\n> even an SPV node has that information if it's not spending unconfirmed\n> inputs it didn't create. Nodes will have to update their peers\n> periodically as nOldestBlock changes. That said it may also be\n> worthwhile to simply relay all transactions in some cases too - a\n> reasonable way to approach this might be to set a bloom filter for tx's\n> that you *definitely* want, and if you are interested in everything,\n> just set the filter to all 1's. If someone comes up with a reasonable\n> micropayment or proof-of-work system even relaying txs that you haven't\n> validated is fine - the proof-of-work and prioritization will prevent\n> DoS attacks just fine.\n>\n> Remember that if you're running a partial node, it can get new blocks\n> from any partial node, and it can retrieve historic blockchain data from\n> any partial node that has archived the sequence of blocks you need next.\n> On a large scale this is similar to how in BitTorrent you can serve data\n> to your peers the moment you get it - a significant scalability\n> improvement for the network as a whole. Even if a large % of the network\n> was partial nodes running for just a few hours a day the whole system\n> would work fine due to how partial nodes can serve each other the data\n> they need.\n>\n> On startup you can act as a SPV node temporarily, grabbing asking for\n> filtered blocks matching your wallet, and then go back and get the full\n> blocks, or just download the full blocks right away. That's a tradeoff\n> on how long the node has been off.\n>\n> Anyway, it's a bit more code compared to pure-SPV, but it results in a\n> much more scalable Bitcoin, and if you can spare the modest bandwidth\n> requirements to keep up with the blockchain it'll result in much better\n> robustness against DoS attacks for you and Bitcoin in general.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n>\n>\n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/98b856c4/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-18T12:13:08",
                "message_text_only": "On Wed, Jul 17, 2013 at 02:29:26PM +0200, Mike Hearn wrote:\n> Partial UTXO sets is a neat idea. Unfortunately my intuition is that many\n> SPV wallets only remain open for <1 minute at a time because the user wants\n> to see they received money, or to send it. It'd be neat to get some\n> telemetry from the Android wallet for this - I will ask Andreas to let\n> users opt in to usage statistics.\n\nGood idea.\n\n> So for anti-DoS I think smart prioritisation heuristics are the way to go\n> again. Perhaps by letting clients have an \"identity\" that they provide to a\n> node when it's load shedding. Clients that have been seen before, have a\n> track record of not being abusive etc get priority and new clients that\n> were never seen before get dropped. Coming up with a way to do that whilst\n> preserving privacy sounds like an interesting cryptographic challenge.\n\nSPV clients behaving normally are highly abusive: they use up maximum\nnode resources with minimum cost to themselves. (nodes doing an initial\nblock download are similar now, although with partial mode they can\ncontribute back to the network sooner)\n\nWe can't win if the attacker has more upstream bandwidth than we have\ndownstream, but fortunately botnets are generally comprised of computers\non asymetric residential connections. Thus our goal is to prevent the\nattacker from using lots of downstream bandwidth, and more importantly,\nfrom consuming more memory and similar resources than we posess.\nAnnoyingly the raw # of TCP connections is very much a limited resource\ndue to constraints on the # of ports a process can handle, and\nconstraints imposed by stateful firewalls, and memory used by kernel\nbuffers.\n\nAnything that allows for more incoming connections with less memory\nusage is a good thing - bloom filters are limited to 32KiB and the\nper-peer test if a INV item needs to be relayed to a peer is fairly\ncheap, but we also have other buffers like pending INV messages and so\non. EC2 micro instances, as an example, often need -maxconnections\nlimited or they run out of memory - we've probably got room for\nimprovement; removing mapRelay and just grabbing relayed txs from the\nmempool comes to mind.\n\n\nMore generally a good thing to do would be to force incoming peers to\nuse up RAM to make a connection. We can do that with a proof-of-data\nposession engineered such that unless you store the data in high-speed\nmemory you will have your connection dropped. Per peer a node can pick a\nnonce k and define j_i=H(k+i), sending the peer a set J=(j_0...j_n) to\nstore in RAM. With f(k, n, i) as a pseudo-random sequence generator we\ncreate nonce x and ask our peer to compute J'(x, m) = j_f(x, n, 0) ^ ...\n^ j_f(x, n, m)) and give us the result. (^ as the XOR operator) Because\nwe know the nonce k we can do that cheaply, calculating it on the fly,\nbut our peers have no choice but to store J and retrieve it on demand.\nIf they store J in RAM they can do so quickly; if they store J on disk\nthey can't. We then prioritize peers by how fast they respond to these\nrequests, both measuring ping times, and forcing attackers trying to\nconnect to large numbers of peers to posess large amounts of relatively\nexpensive RAM. This is particularly nice because we've can make it\nsignificantly more expensive for anyone to peer to every node in the\nBitcoin network simultaneously to do things like watch transaction\npropagation in real-time.\n\nA more sophisticated approach would be possible if there existed a\nversion of H() with a computational trap-door - that is if there existed\nH'(s, i)=H(i) where H' had significantly faster running time than H(),\nbut required knowledge of a secret. Our peers would then be able to\nanswer our challenges quickly only if they stored the intermediate\nresults in a lookup table, while we could check those challenges cheaply\nwithout that table.\n\nAdam: you're our local crypto-expert, what can we use for H'? Seems that\nmaybe some kind of asymmetric crypto system would work by requiring the\npeer to crack weak secret keys that we generate deterministicly.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/edcced21/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-18T13:18:36",
                "message_text_only": "On Thu, Jul 18, 2013 at 08:13:08AM -0400, Peter Todd wrote:\n> A more sophisticated approach would be possible if there existed a\n> version of H() with a computational trap-door - that is if there existed\n> H'(s, i)=H(i) where H' had significantly faster running time than H(),\n> but required knowledge of a secret. Our peers would then be able to\n> answer our challenges quickly only if they stored the intermediate\n> results in a lookup table, while we could check those challenges cheaply\n> without that table.\n> \n> Adam: you're our local crypto-expert, what can we use for H'? Seems that\n> maybe some kind of asymmetric crypto system would work by requiring the\n> peer to crack weak secret keys that we generate deterministicly.\n\nActually, come to think of it a really easy way to create H' is for the\nnode to create some expensive to compute set of data associated with\ntheir identity. The data set is then stored once by the node, cheap, but\nthe clients have to store one set for every unique node they connect\ntoo, expensive. A set of the function scrypt(k | i) for i in 0..n is an\nobvious way to do it.\n\nThis can equally be used as a proof-of-work to make creating lots of\nnodes expensive given a cheap way to verify the POW; easily done with a\nnon-interactive zero-knowledge proofs. It'd be nice if that POW could\nincorporate blockchain data, showing that the identity had access to\nthat data and thus could have computed the UTXO set honestly. (the POW\nshould be incrementally extendable as new data becomes available)\nHowever that is back to using a bunch of bandwidth at startup if our\npeer doesn't have access to blockchain data, so both mechanisms would\nprobably have to be done independently. Note how we also make MITM\nattacks on encrypted P2P connections expensive this way too even without\nany form of authentication. (works best when the proof-of-work is\ndependent on your IP addresses)\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000762784b647ede3678f172d73dd0c72c2180ab451b00d756959\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/4f4bcc2e/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-18T13:38:11",
                "message_text_only": "> SPV clients behaving normally are highly abusive: they use up maximum\n> node resources with minimum cost to themselves.\n>\n\nThis must be a new use of the word \"abuse\" I haven't come across before :)\n\nAt any rate, some of these assumptions are incorrect. Botnets of\ncompromised web servers are quite common, and asymmetry in node resources\nis obviously biased against the kinds of devices people increasingly have\n(phones, tablets) where extremely limited memory bandwidth is common and\napps routinely have just 16 or 32mb of memory to do everything including\nthe GUI.\n\nA good anti-DoS strategy looks much the same as a good load shedding\nstrategy. There's little reason to treat them separately. Perhaps instead\nof talking about DoS we should instead talk about what happens if Bitcoin\nsuddenly gets too popular. Now there are suddenly lots of good users all\nwanting to use the network, and not enough nodes to support them all. What\ndo we do?\n\nSome rules seem obvious - try to prioritise existing users over new users,\nold coins over new coins (dPriority already does this) etc. If you run out\nof TCP sockets prefer to disconnect recent connections (probably new users)\nto long lived connections (probably high powered backbone peers). If you\nrun out of disk seeks prefer processing new blocks to serving old parts of\nthe chain, etc.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/4c80ef0f/attachment.html>"
            },
            {
                "author": "Wendell",
                "date": "2013-07-17T13:37:41",
                "message_text_only": "Peter,\n\nThis sounds like a _very_ good idea for a desktop client, and probably acceptable to users so long as we take available disk space into consideration, and only ever use a fraction of it.\n\nWill you implement this?\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive\n\nOn Jul 17, 2013, at 12:58 PM, Peter Todd wrote:\n\n> So what's useful about that? Basically it means your node starts with\n> the same security level, and usefulness to the network, as a SPV node.\n> But over time you keep downloading blocks as they are created, and with\n> whatever bandwidth you have left (out of some user-configurable\n> allocation) you download additional blocks going further and further\n> back in time. Gradually your UTXO set becomes more complete, and over\n> time you can verify a higher and higher % of all valid transactions.\n> Eventually your node becomes a full node, but in the meantime it was\n> still useful for the user, and still contributed to the network by\n> relaying blocks and an increasingly large subset of all transactions.\n> (optionally you can store a subset of the chain history too for other\n> nodes to bootstrap from) You've also got better security because you\n> *are* validating blocks, starting off incompletely, and increasingly\n> completely until your finally validating fully. Privacy is improved, for\n> both you and others, by mixing your transactions with others and adding\n> to the overall anonymity set.\n> \n> In the future we'll have miners commit a hash of the UTXO set, and that\n> gives us even more options to, for instance, have relayed transactions\n> include proof that their inputs were valid, allowing all nodes to relay\n> them safely.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 841 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/e78aceae/attachment.sig>"
            },
            {
                "author": "Michael Gronager",
                "date": "2013-07-17T14:31:52",
                "message_text_only": "Hi Wendell,\n\nWhat Peter describes (a hash of the current set of UTXOs as part of the coinbase) is already implemented in libcoin, on which you can easily build both a bitcoind and any client. Libcoin is a library originally based on the satoshi client, and as such it is compatible/replacable with \"master\". \n\nHave a look at github.com/libcoin/libcoin and look in the BlockChain.h/cpp and the MerkleTrie classes then you can see how it works.\n\nWhat is missing from libcoin is a scheme to bootstrap the hash of UTXOs, there is some stub code for a p2pool like mining scheme ensuring several UTXO hashes every 10 minutes, but I will not have time to finalize it the first few months - anyone are of course welcome to help out ;)\n\nMichael\n\n\nOn 17/07/2013, at 09:37, Wendell <w at grabhive.com> wrote:\n\n> Peter,\n> \n> This sounds like a _very_ good idea for a desktop client, and probably acceptable to users so long as we take available disk space into consideration, and only ever use a fraction of it.\n> \n> Will you implement this?\n> \n> -wendell\n> \n> grabhive.com | twitter.com/grabhive\n> \n> On Jul 17, 2013, at 12:58 PM, Peter Todd wrote:\n> \n>> So what's useful about that? Basically it means your node starts with\n>> the same security level, and usefulness to the network, as a SPV node.\n>> But over time you keep downloading blocks as they are created, and with\n>> whatever bandwidth you have left (out of some user-configurable\n>> allocation) you download additional blocks going further and further\n>> back in time. Gradually your UTXO set becomes more complete, and over\n>> time you can verify a higher and higher % of all valid transactions.\n>> Eventually your node becomes a full node, but in the meantime it was\n>> still useful for the user, and still contributed to the network by\n>> relaying blocks and an increasingly large subset of all transactions.\n>> (optionally you can store a subset of the chain history too for other\n>> nodes to bootstrap from) You've also got better security because you\n>> *are* validating blocks, starting off incompletely, and increasingly\n>> completely until your finally validating fully. Privacy is improved, for\n>> both you and others, by mixing your transactions with others and adding\n>> to the overall anonymity set.\n>> \n>> In the future we'll have miners commit a hash of the UTXO set, and that\n>> gives us even more options to, for instance, have relayed transactions\n>> include proof that their inputs were valid, allowing all nodes to relay\n>> them safely.\n> \n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/d6c0fe64/attachment.sig>"
            },
            {
                "author": "Wendell",
                "date": "2013-07-17T14:58:57",
                "message_text_only": "\"The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!\"\n\nGood lord Michael, I wish we had known about libcoin a month ago!\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive\n\nOn Jul 17, 2013, at 4:31 PM, Michael Gronager wrote:\n\n> Hi Wendell,\n> \n> What Peter describes (a hash of the current set of UTXOs as part of the coinbase) is already implemented in libcoin, on which you can easily build both a bitcoind and any client. Libcoin is a library originally based on the satoshi client, and as such it is compatible/replacable with \"master\". \n> \n> Have a look at github.com/libcoin/libcoin and look in the BlockChain.h/cpp and the MerkleTrie classes then you can see how it works.\n> \n> What is missing from libcoin is a scheme to bootstrap the hash of UTXOs, there is some stub code for a p2pool like mining scheme ensuring several UTXO hashes every 10 minutes, but I will not have time to finalize it the first few months - anyone are of course welcome to help out ;)\n> \n> Michael\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 841 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/eb021d7c/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-17T19:33:32",
                "message_text_only": "Is that still accurate Michael?\n\n\nOn Wed, Jul 17, 2013 at 4:58 PM, Wendell <w at grabhive.com> wrote:\n\n> \"The libcoin/bitcoind client downloads the entire block chain 3.5 times\n> faster than the bitcoin/bitcoind client. This is less than 90 minutes on a\n> modern laptop!\"\n>\n> Good lord Michael, I wish we had known about libcoin a month ago!\n>\n> -wendell\n>\n> grabhive.com | twitter.com/grabhive\n>\n> On Jul 17, 2013, at 4:31 PM, Michael Gronager wrote:\n>\n> > Hi Wendell,\n> >\n> > What Peter describes (a hash of the current set of UTXOs as part of the\n> coinbase) is already implemented in libcoin, on which you can easily build\n> both a bitcoind and any client. Libcoin is a library originally based on\n> the satoshi client, and as such it is compatible/replacable with \"master\".\n> >\n> > Have a look at github.com/libcoin/libcoin and look in the\n> BlockChain.h/cpp and the MerkleTrie classes then you can see how it works.\n> >\n> > What is missing from libcoin is a scheme to bootstrap the hash of UTXOs,\n> there is some stub code for a p2pool like mining scheme ensuring several\n> UTXO hashes every 10 minutes, but I will not have time to finalize it the\n> first few months - anyone are of course welcome to help out ;)\n> >\n> > Michael\n>\n>\n>\n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/519fa2c2/attachment.html>"
            },
            {
                "author": "Michael Gronager",
                "date": "2013-07-17T22:26:39",
                "message_text_only": "> Is that still accurate Michael?\n> \n\nThe 90 minutes is not - the blockchain has grown quite a lot since last year, and as for the 3.5 speed, I havn't tested it since Pieter's ultraprune - libcoin also has something similar to ultraprune, done directly in the sqlite database backend, but I should run a head to head again - could be fun. I would assume, though, that the result would be similar timings.\n\nHowever, by having a merkle tree hash of all UTXOs they become downloadable in a trusted manner from any other client - something that enables bootstrap in minutes, so the old numbers becomes less relevant in this setting.\n\n> \n> On Wed, Jul 17, 2013 at 4:58 PM, Wendell <w at grabhive.com> wrote:\n> \"The libcoin/bitcoind client downloads the entire block chain 3.5 times faster than the bitcoin/bitcoind client. This is less than 90 minutes on a modern laptop!\"\n> \n>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-07-17T23:04:33",
                "message_text_only": "On Wed, Jul 17, 2013 at 3:26 PM, Michael Gronager <gronager at mac.com> wrote:\n> However, by having a merkle tree hash of all UTXOs they become downloadable in a trusted manner from any other client - something that enables bootstrap in minutes, so the old numbers becomes less relevant in this setting.\n\nThis, however, reduces the node to SPV security of the past history.\nParticularly for a wallet client\u2014 as opposed to a miner or what have\nyou\u2014 if you are willing to accept SPV security you could simply be an\nSPV client.\n\n(I like committed UTXO trees, and I believe I was the first person to\nsuggest them\u2014 but I think it's good to not over-hype what they do!)"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-18T08:19:20",
                "message_text_only": "> The 90 minutes is not - the blockchain has grown quite a lot since last\n> year, and as for the 3.5 speed, I havn't tested it since Pieter's\n> ultraprune - libcoin also has something similar to ultraprune, done\n> directly in the sqlite database backend, but I should run a head to head\n> again - could be fun. I would assume, though, that the result would be\n> similar timings.\n>\n\nultraprune made a huge difference. I think it's very likely that this claim\nis no longer true. Bitcoin got a lot more optimised since you first did\nlibcoin.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/b1a0212b/attachment.html>"
            },
            {
                "author": "Bazyli Zygan",
                "date": "2013-07-18T11:40:35",
                "message_text_only": "Hi!\n\nI should introduce myself. I am the BitcoinKit developer. If you can call that way a dude that wrapped up already existing code for Mac developers easier to understand and use :-)\n\nI'm replying mostly because libcoin is something that I would like to have a closer look at.\nProblems I've encountered with it so far are as follows:\n\n1. It uses QT.\nWell. It's a lib. Or at least I've thought it was. But it seems that I really need it to compile it. Dunno why yet.\n\n2. Steps to create xcodeproject doesn't work\nFor some reason when I've tried to follow steps to create an xcodeproject from the cmake, it failed.\n\n3. It doesn't compile at all\nEven after installing QT libs and using cmake to compile it from the terminal\u2026 it fails on bitcoind.cpp. My assumtion is that cmake or not - it uses llvm to compile the stuff.\nBecause of the templates that bitcoind is actually using that's not gonna work ever. That's why BitcoinKit is a separate dynamic library that's compiled with gcc (or at least llvm pretending to be gcc ;P)\n\nMichael, have you tried to use your sources on Mac OS X recently? It seems to be a bit\u2026 outdated.\n\n/b\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/ac527243/attachment.html>"
            },
            {
                "author": "Michael Gronager",
                "date": "2013-07-18T13:03:12",
                "message_text_only": "Hi Bazyli,\n\nI actually do my main development on Mac OSX, so it surprises me to hear - I build Xcode projects with libcoin daily on Mac OSX and linux, on Windows it is agreeable more of a fight to build. QT is really not needed, I kept it there for BitcoinQT, that was once part of the tree too, will remove it as the qt part got split out.\n\nBuilding clean on Mac requires OpenSSL, BDB and Boost - all can be installed using homebrew, also remember to use the latest cmake, and a normal cmake xcode call: cmake -GXcode should do the job. Otherwise pls send me the debug output. \n\nA few quick notes for building stuff there:\n - try with coinexplorer, it is the base code I am using - it splits out the wallet from the server, nice if you e.g. want to build a webcoin like server.\n - The wallet parts from bitcoind I don't use personally, so if you have problems with these I need to have a closer look.\n\nAlso note that as the first version of libcoin was a direct refactorization of bitcoin, the current one add a lot of different features and handles things quite differently - you can e.g. lookup any unspent output by script (bitcoin address) in milliseconds (nice for web wallets).\n\nFinally: \n\n> \tBecause of the templates that bitcoind is actually using that's not gonna work ever. That's why BitcoinKit is a separate dynamic library that's compiled with gcc (or at least llvm pretending to be gcc ;P)\n\nAs I mentioned it also compiles on Linux (gcc) - gcc is quite savvy when it comes to templates - I agree that the template stuff from Database.h is quite involved, but as I mentioned before try with coinexplorer.\n\n- I will try to do a from scratch recompilation to see if I experience similar issues...\n\nAlso - if you are good at creating frameworks on Mac OSX using cmake, help would be appreciated! I think that libcoin by defaults build using shared libs, this configurable from ccmake using the dynamic library option.\n\nThanks,\n\nMichael"
            },
            {
                "author": "Michael Gronager",
                "date": "2013-07-18T13:16:44",
                "message_text_only": "Hi Bazyli,\n\nJust did a fresh build based on git (Xcode) - had one issue: the paillier and account tests were missing - please comment them out in tests/CMakeLists.txt, then coinexplorer should build nicely.\n\nNote I did a git push as well, so you need to do a git pull first.\n\n/Michael"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-18T16:22:26",
                "message_text_only": "On Wed, Jul 17, 2013 at 03:37:41PM +0200, Wendell wrote:\n> Peter,\n> \n> This sounds like a _very_ good idea for a desktop client, and probably acceptable to users so long as we take available disk space into consideration, and only ever use a fraction of it.\n> \n> Will you implement this?\n\nI've got one or two orders of magnitude more good ideas than I have time\nto implement, but I will say this one would have a pretty big impact -\nI'm considering it.\n\nOf course, I would accept bribes. :) But in all seriousness I also\naccepted funds from John Dillon to implement replace-by-fee, although\nhe's been good in understanding that the scope of the project was quite\na bit bigger than originally thought. (it turned out replace-by-fee can\nenable very safe zero-conf transactions, but only with mempool and\nrelaying changes) I'd suggest looking at my git commit track record\nbefore you offer anything FWIW; I've been much more of an academic than\na programmer.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000013030f49fe3eed5e7f9388c4ecc237b7a847ca93255836bc3b\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/8dfbae5b/attachment.sig>"
            },
            {
                "author": "Wendell",
                "date": "2013-07-18T16:46:16",
                "message_text_only": "Heh, will do. If you have less confidence in your programming skills perhaps its best if you write documentation and we bring in someone else to do the heavy lifting? Maybe Eric Lombrozo would be interested in this, for example...\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive\n\nOn Jul 18, 2013, at 6:22 PM, Peter Todd wrote:\n\n> I've got one or two orders of magnitude more good ideas than I have time\n> to implement, but I will say this one would have a pretty big impact -\n> I'm considering it.\n> \n> Of course, I would accept bribes. :) But in all seriousness I also\n> accepted funds from John Dillon to implement replace-by-fee, although\n> he's been good in understanding that the scope of the project was quite\n> a bit bigger than originally thought. (it turned out replace-by-fee can\n> enable very safe zero-conf transactions, but only with mempool and\n> relaying changes) I'd suggest looking at my git commit track record\n> before you offer anything FWIW; I've been much more of an academic than\n> a programmer.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 841 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/737f1371/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-18T23:03:59",
                "message_text_only": "On Thu, Jul 18, 2013 at 06:46:16PM +0200, Wendell wrote:\n> Heh, will do. If you have less confidence in your programming skills perhaps its best if you write documentation and we bring in someone else to do the heavy lifting? Maybe Eric Lombrozo would be interested in this, for example...\n\nI have plenty of confidence in my programming skills, I just don't have\nvery much evidence in the Bitcoin git history to convince you my\nconfidence is well placed. :)\n\nI do have a day job I love, so it will certainly get done faster if you\ncan get someone else to do the actual coding; I'd be willing to write\nthe specifications and supervise/audit/advise for a few hours a week.\n\n> -wendell\n> \n> grabhive.com | twitter.com/grabhive\n> \n> On Jul 18, 2013, at 6:22 PM, Peter Todd wrote:\n> \n> > I've got one or two orders of magnitude more good ideas than I have time\n> > to implement, but I will say this one would have a pretty big impact -\n> > I'm considering it.\n> > \n> > Of course, I would accept bribes. :) But in all seriousness I also\n> > accepted funds from John Dillon to implement replace-by-fee, although\n> > he's been good in understanding that the scope of the project was quite\n> > a bit bigger than originally thought. (it turned out replace-by-fee can\n> > enable very safe zero-conf transactions, but only with mempool and\n> > relaying changes) I'd suggest looking at my git commit track record\n> > before you offer anything FWIW; I've been much more of an academic than\n> > a programmer.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/7422d4cc/attachment.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2013-07-17T12:37:11",
                "message_text_only": "Would not an SPV bitcoind transfer all control on validation rules to miner?\n\nA majority coalition of miner (pool operator) might even decide to change block reward\nrules if the rest of the network only verifies POW.\n\nRegards,\n\nTam\u00e1s Blummer\nFounder, CEO\n\nhttp://bitsofproof.com\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/54970590/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: email.png\nType: image/png\nSize: 7120 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/54970590/attachment.png>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-17T12:50:52",
                "message_text_only": "On Wed, Jul 17, 2013 at 02:37:11PM +0200, Tamas Blummer wrote:\n> Would not an SPV bitcoind transfer all control on validation rules to miner?\n\nYes\n\n> A majority coalition of miner (pool operator) might even decide to change block reward\n> rules if the rest of the network only verifies POW.\n\nWidespread dependence on SPV mode is very dangerous for Bitcoin in\ngeneral due to that reason. Fraud proofs may help, but they're also\nanother layer of never-before-tested crypto on top of an already poorly\nunderstood technology, bitcoin itself.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/ea762589/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-17T13:56:27",
                "message_text_only": "On Wed, Jul 17, 2013 at 2:37 PM, Tamas Blummer <tamas at bitsofproof.com>wrote:\n\n> A majority coalition of miner (pool operator) might even decide to change\n> block reward\n> rules if the rest of the network only verifies POW.\n>\n\nWhich is why it's still vital that any \"important\" node in the economy uses\nfull validation.\n\nA majority miner coalition could change the block reward and award\nthemselves money which SPV clients would accept, however, the moment\nsomebody tried to cash that money out via an exchange, or use it to\npurchase something from an online shop, or just see if it propagated across\nthe P2P network effectively, they'd notice something had gone wrong. Of\ncourse it'd be in the news long before this happened ....\n\nSPV is really meant for nodes that go away and come back a lot, i.e. end\nuser wallets. If you're a merchant it'd be dumb to run one unless you're on\nsuch a tight budget that your server resembles a powerful tablet.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/93fb1d0b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "SPV bitcoind? (was: Introducing BitcoinKit.framework)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Michael Gronager",
                "Tamas Blummer",
                "Bazyli Zygan",
                "Mike Hearn",
                "Peter Todd",
                "Gregory Maxwell",
                "Wendell"
            ],
            "messages_count": 23,
            "total_messages_chars_count": 51297
        }
    },
    {
        "title": "[Bitcoin-development] SPV bitcoind?",
        "thread_messages": [
            {
                "author": "Andreas Schildbach",
                "date": "2013-07-17T14:32:27",
                "message_text_only": "Android apps do whatever they are programmed to do. They become active\nwhen the user installs and inactive when they are uninstalled.\nInbetween, they are not limited in runtime.\n\nThat said, the current programming is that when receiving a block, it\nstays connected for at least ~2 more minutes. This generally allows the\nchain to catch up while at the same time avoiding endless battery drain\nbecause something gets stuck. Upon sending or receiving of a\ntransaction, it stays connected for at least ~8 more minutes, because it\nis likely the wallet will see more activity.\n\nAdditionally, on the send and request coins screens and the network\nmonitor it stays connected for as long as the screen is on and the app\nin the foreground (= resumed state).\n\n\nOn 07/17/2013 02:29 PM, Mike Hearn wrote:\n\n> Partial UTXO sets is a neat idea. Unfortunately my intuition is that\n> many SPV wallets only remain open for <1 minute at a time because the\n> user wants to see they received money, or to send it. It'd be neat to\n> get some telemetry from the Android wallet for this - I will ask Andreas\n> to let users opt in to usage statistics."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-17T19:32:12",
                "message_text_only": "Yeah, what I meant is, it'd be useful to know the average amount of time\nthat the app was holding connections open for.\n\n\nOn Wed, Jul 17, 2013 at 4:32 PM, Andreas Schildbach\n<andreas at schildbach.de>wrote:\n\n> Android apps do whatever they are programmed to do. They become active\n> when the user installs and inactive when they are uninstalled.\n> Inbetween, they are not limited in runtime.\n>\n> That said, the current programming is that when receiving a block, it\n> stays connected for at least ~2 more minutes. This generally allows the\n> chain to catch up while at the same time avoiding endless battery drain\n> because something gets stuck. Upon sending or receiving of a\n> transaction, it stays connected for at least ~8 more minutes, because it\n> is likely the wallet will see more activity.\n>\n> Additionally, on the send and request coins screens and the network\n> monitor it stays connected for as long as the screen is on and the app\n> in the foreground (= resumed state).\n>\n>\n> On 07/17/2013 02:29 PM, Mike Hearn wrote:\n>\n> > Partial UTXO sets is a neat idea. Unfortunately my intuition is that\n> > many SPV wallets only remain open for <1 minute at a time because the\n> > user wants to see they received money, or to send it. It'd be neat to\n> > get some telemetry from the Android wallet for this - I will ask Andreas\n> > to let users opt in to usage statistics.\n>\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130717/e4440b4b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "SPV bitcoind?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Andreas Schildbach"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3302
        }
    },
    {
        "title": "[Bitcoin-development] Anti DoS for tx replacement",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-07-18T11:13:53",
                "message_text_only": "On Fri, Apr 19, 2013 at 06:48:11PM -0700, Jeremy Spilman wrote:\n>  0. User and AP negotiate how much to escrow, who pays the fees, and how\n> far in the future nLockTime will be set (how long user\u2019s funds will be tied\n> if AP doesn\u2019t close the channel)\n> \n>  1. User creates an unsigned TX1 with 1 or more inputs from user\u2019s\n> \u2018listunspent\u2019, change going back to user (if any), and a single output of\n> \u2018FundAmount\u2019 with scriptPubKey of \u20182 PK1 OP_0 CHECKMULTISIG\u2019, and sends to\n> the AP\n\nNote that with OP_DEPTH we can remove the small chance of the payee\nvanishing and putting the funds in limbo:\n\n    <height + n> OP_DEPTH OP_LESSTHAN\n    IF 2 PK1 PK2 CHECKMULTISIG\n    ELSE PK1 CHECKSIG\n    ENDIF\n\nThough that shows how to implement OP_DEPTH as a true soft-fork we're\nprobably best off doing it as part of a script v2 using the soft-fork\nmechanism I outlined before when talking about fidelity-bonded ledgers.\n(best to do MAST (merklized abstract syntax tree) support at the same\ntime)\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/c05fd6b2/attachment.sig>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-07-18T12:53:55",
                "message_text_only": "On Thu, Jul 18, 2013 at 7:13 AM, Peter Todd <pete at petertodd.org> wrote:\n> Note that with OP_DEPTH we can remove the small chance of the payee\n> vanishing and putting the funds in limbo:\n\nWhat are the costs, benefits, and risks associated with scripts no\nlonger being stateless, as OP_DEPTH would seem to introduce?\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-18T13:43:47",
                "message_text_only": "On Thu, Jul 18, 2013 at 08:53:55AM -0400, Jeff Garzik wrote:\n> On Thu, Jul 18, 2013 at 7:13 AM, Peter Todd <pete at petertodd.org> wrote:\n> > Note that with OP_DEPTH we can remove the small chance of the payee\n> > vanishing and putting the funds in limbo:\n> \n> What are the costs, benefits, and risks associated with scripts no\n> longer being stateless, as OP_DEPTH would seem to introduce?\n\nSatoshi was worried that in the event of a re-org long chains of\ntransactions could become invalid and thus impossible to include in the\nblockchain again, however that's equally possibly through tx mutability\nor double-spends;(1) I don't think it's a valid concern in general. When\naccepting any payment you need to take the chance of a re-org into\naccount, and if the payment is large enough it'll call for more confirms\non that basis. It does increase that (small) risk however and a client\nmay want to trace the transaction chain back a few steps when accepting\na very large payment in leu of just waiting for more confirms.\n\n1) Also via non-standard transactions as SetBestChain() calls\nmempool.accept() which still applies IsStandard(). We also recently\nbroke re-acceptance of transactions with dependencies as they are\ncurrently added in reverse order, broken when Matt removed the\nfIgnoreMissingInputs flag.\n\n\nNot a problem limited to OP_DEPTH either: consider the following\nprobabalistic payment:\n\n    PREVBLOCKHASH HASH n LESSTHAN VERIFY <pubkey> CHECKSIG\n\nObviously in a re-org the chance of it being succesfully included is\nslim. (this example is simplistic and is vulnerable to double-spends in\na number of ways)\n\n\nMempool and relay code will have to take into account that a transaction\nthat can be included in the next block may not be possible to include in\nthe block after that for the purposes of protecting against tx-flood DoS\nattacks - not an important issue unless we loosen IsStandard()\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000090344430e3956a709039288ceeb473fff6c1b68e70ee7169c4\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/675e9103/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-18T16:09:54",
                "message_text_only": "On Thu, Jul 18, 2013 at 07:13:53AM -0400, Peter Todd wrote:\n> Note that with OP_DEPTH we can remove the small chance of the payee\n> vanishing and putting the funds in limbo:\n> \n>     <height + n> OP_DEPTH OP_LESSTHAN\n>     IF 2 PK1 PK2 CHECKMULTISIG\n>     ELSE PK1 CHECKSIG\n>     ENDIF\n> \n> Though that shows how to implement OP_DEPTH as a true soft-fork we're\n> probably best off doing it as part of a script v2 using the soft-fork\n> mechanism I outlined before when talking about fidelity-bonded ledgers.\n> (best to do MAST (merklized abstract syntax tree) support at the same\n> time)\n\njl2012 pointed out we already have an OP_DEPTH instruction that returns\nthe number of items on the stack. In the future we should use the terms\nOP_BLOCKHEIGHT, OP_TXOUTHEIGHT, OP_TXOUTDEPTH to talk about hypothetical\ninstructions that put the block height, confirmed txout height, and\nconfirmed txout depth on the stack. Thus the above example would now be:\n\n     <height + n> BLOCKDEPTH LESSTHAN\n     IF 2 <pk-payor> <pk-payee> CHECKMULTISIG\n     ELSE <pk-payor> CHECKSIG\n     ENDIF\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000013030f49fe3eed5e7f9388c4ecc237b7a847ca93255836bc3b\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130718/81681c3c/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Anti DoS for tx replacement",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Peter Todd"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 5439
        }
    },
    {
        "title": "[Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet master seed with optional encryption",
        "thread_messages": [
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-07-19T17:46:44",
                "message_text_only": "Hi everyone,\n\nI'm looking for feedback on the proposal below.\n\nKind regards,\n\nJean-Paul\n\n---\nBIP:\u00a0\nTitle: Base58 encoded HD Wallet master seed with optional encryption\nAuthor: Jean-Paul Kogelman\nStatus: Draft\nType: Informational\nCreated: 17-07-2013\n\nAbstract\n\nThis proposal describes a method for encoding and optionally encrypting a Bitcoin Hierarchical Deterministic (HD) Wallet master seed. Encoded master seeds are intended for use on paper wallets. Each string contains all the information needed to verify and reconstitute an HD wallet except for the optional passphrase. The encrypted version uses salting and scrypt to resist brute-force attacks.\n\nThe method provides two encoding methodologies in 3 lengths each (16, 32 and 64 byte seeds). One is a clear version of the master seed with verification information for integrity checking and the other is an encrypted representation.\n\nA 32-bit hash of the resulting master Bitcoin public address is encoded in plain text within each seed record, so in the case of an encrypted seed, it can be correlated to a Bitcoin public address with reasonable probability by someone not knowing the passphrase. The complete Bitcoin public address can be derived through successful decoding and optional decryption of the master seed record.\n\n\nMotivation\n\nThe extended private keys proposed in BIP 0032 are long, fixed length records and don't offer any form of security. The master seed used to generate the HD wallet is typically shorter than the extended master private key that results from it.\u00a0\n\nA compact representation of the master seed is easier to handle and a 2-factor version of the master seed record allows for safe storage and the creation of paper wallets by 3rd parties.\u00a0\n\n\nCopyright\n\nThis proposal is hereby placed in the public domain.\n\n\nRationale\n\nUser story: As a Bitcoin user who uses HD wallets, I would like the ability to store my wallet master seed in a compact form as a paper wallet.\n\nUser story: As a Bitcoin user who uses HD wallets, I would like the ability to have a 3rd party create a paper wallet with my master seed in it, without having access to the funds stored in the wallet.\n\nUser story: As a Bitcoin user who uses HD wallets, I would like the ability to choose the strength of the master seed depending on my security requirements and how I wish to store it.\u00a0\n\n\nSpecification\n\nThis proposal makes use of the following functions and definitions:\n\nAES256Encrypt, AES256Decrypt: the simple form of the well-known AES block cipher without consideration for initialization vectors or block chaining. Each of these functions takes a 256-bit key and a variable legth of input and deterministically yields output data of similar length to the input.\n\nSHA256: a well-known hashing algorithm that takes an arbitrary number of bytes as input and deterministically yields a 32-byte hash.\n\nRIPEMD160: a well known hashing algorithm that takes an arbitrary number of bytes as input and deterministically yields a 20-byte hash.\n\nscrypt: A well-known key derivation algorithm. It takes the following parameters: (string) password, (string) salt, (int) n, (int) r, (int) p, (int) length, and deterministically yields an array of bytes whose length is equal to the length parameter.\n\nHMAC-SHA512: Produces a 64 byte (512 bit) hash based message authentication code using the SHA512 hash function using a seed (in our case we will use a byte representation of \"Bitcoin seed\") and an aribtrary input message. The output will be 64 bytes.\n\nBase58Check: a method for encoding arrays of bytes using 58 alphanumeric characters commonly used in the Bitcoin ecosystem.\n\nG, N: Constants defined as part of the secp256k1 elliptic curve. G is an elliptic curve point, and N is a large positive integer.\n\nPrefix\n\nIt is proposed that the resulting Base58Check-encoded string start with either \"WS\" for clear master seed records or \"ws\" for 2-factor master seed records. The prefixes \"WS\" and \"ws\" were chosen as abreviations of the term \"Wallet Seed\" and upper case to indicate whether it's a clear representation and lower case when it's a 2-factor representation.\u00a0\n\nTo keep the size of the encrypted key equal to the clear version, no initialization vectors (IVs) are used in the AES encryption. Rather, suitable values for IV-like use are derived using scrypt from the passphrase and from using a 32-bit hash of the resulting Bitcoin public address as salt.\n\nProposed specification\n\nThere are 2 seed record representations with 3 lengths each, resulting in a total of 6 different object identifier prefixes.\u00a0\n\nPrefix 0x1093: Clear 16 byte master seed, total length: 22 bytes\nPrefix 0x1E68: Clear 32 byte master seed, total length: 38 bytes\nPrefix 0x665A: Clear 64 byte master seed, total length: 70 bytes\n\nPrefix 0x1EE4: 2-factor 16 byte master seed, total length: 22 bytes\nPrefix 0x38AE: 2-factor 32 byte master seed, total length: 38 bytes\nPrefix 0xBECB: 2-factor 64 byte master seed, total length: 70 bytes\n\nThese are constant bytes that appear at the beginning of the Base58Check-encoded record, and their presence causes the resulting string to have a predictable prefix.\n\nHow the user sees it: 35, 57 or 101 characters always starting with either \"WS\" or \"ws\".\n\nCount of payload bytes (beyond prefix): 20, 36 or 68\n\nPayload format:\n4 bytes: SHA256(SHA256(master_bitcoin_public_address))[0...3], used both for typo checking and as salt.\n16, 32 or 64 bytes: either a clear representation or an encrypted representation of the master seed.\n\nRange in Base58Check encoding for clear 16 byte master seed (prefix WS):\nMinimum value: WSJ5JnjiRZT8b15aZr6GGWzt2VMBPapmhBQ (based on 0x10 0x93 plus twenty 0x00's)\nMaximum value: WShQumr1iGdbTpWiesWbb189p7rSLBiq3EJ (based on 0x10 0x93 plus twenty 0xFF's)\n\nRange in Base58Check encoding for clear 32 byte master seed (prefix WS):\nMinimum value: WS7SqjMWhDGCagcZxCk317LLWyWUny7465ENGKEKuxBf5sFvRHmRRfCgr (based on 0x1E 0x68 plus thirty-six 0x00's)\nMaximum value: WSLAbo8WHEQr1Z1cv26Z5njh5URHMo9fPiDFYE2NpCwmAoPZwDxzm3PjB (based on 0x1E 0x68 plus thirty-six 0xFF's)\n\nRange in Base58Check encoding for clear 64 byte master seed (prefix WS):\nMinimum value: WS2cMzM9WrogWVLKYFzTaTXZnYCryY31uptmdevXuRFBXTWJhmt4No9Eejoj3apqyU5RkyXsGHFPbZd14oz7Fv1Mi85kadBD4TPsL (based on 0x66 0x5A plus sixty-eight 0x00's)\nMaximum value: WS6PXJ1HoJXn9hyLz8uXQEy2ZajAVaFDTViXhZDthwYbhyvfHRqjwU4FoGpepCbuuycAwMFbgoZB6E48baqD1c9PdMNUZCSSBmfE7 (based on 0x66 0x5A plus sixty-eight 0xFF's)\n\nRange in Base58Check encoding for 2-factor 16 byte master seed (prefix ws):\nMinimum value: ws1nyTi9KjdRkJda4Yh1KkXSLC8SZ6kKzEM (based on 0x1E 0xE4 plus twenty 0x00's)\nMaximum value: wsR8aSpScSotd84i9a7LeEei7pdhVkeciX8 (based on 0x1E 0xE4 plus twenty 0xFF's)\n\nRange in Base58Check encoding for 2-factor 32 byte master seed (prefix ws):\nMinimum value: wsC8sayZpTpeX3k6jcCMeTedDapXkXd7SZpRJbSjdeqKBJ2Vnrm1xyfD3 (based on 0x38 0xAE plus thirty-six 0x00's)\nMaximum value: wsQrdekZQUyHwv99hRYsj93yn5jLKMfikCoJaWEnXubRGEA9Jnxg5KaPW (based on 0x38 0xAE plus thirty-six 0xFF's)\n\nRange in Base58Check encoding for 2-factor 64 byte master seed (prefix ws):\nMinimum value: ws4XTrriTEyyy2TrGWv9R7o94CyBiN69S2VxiK5tVW9htEi48w54sQ43JChCmadoGtYpZSu7vqbbQTMemCSyyToyLPPMjughcXNxE (based on 0xBE 0xCB plus sixty-eight 0x00's)\nMaximum value: ws8JdAWrjgi5cF6siPqDEuEbqFVVEQJLyhKinDPFJ2T84m8Qib2kS4y4Sji8YCQsDQ5ZjpcrMMuNu7nnHyJ5j9x1Fcg5iUwvZ7krH (based on 0xBE 0xCB plus sixty-eight 0xFF's)\n\nGeneration of master seed:\n\n1. Take either an existing 16, 32 or 64 byte master seed S, or generate one from a (P)RNG.\n2. Calculate I = HMAC-SHA512(key = \"Bitcoin seed\", msg = S)\n3. Split I into two 32-byte sequences, IL and IR.\n4. Use IL as master secret key. IR, the master chain code is not relevant here.\n5. In case IL is 0 or >= N, the master key is invalid. Go back to step 1 if generating, or in case of a provided master seed, return an error.\n6. Compute the public key K = IL*G\n7. Calculate the master Bitcoin public address A = Base58Check(RIPEMD160(SHA256(K)))\n8. Calculate the salt = SHA256(SHA256(A))[0...3]\n\nEncryption:\n\n9. Derive a hash H from the passphrase using scrypt\n\u00a0 \u00a0 - Parameters: passphrase is the passphrase itself encoded in UTF-8, salt = salt, n = 16384, r = 8, p = 8, length = seed length + 32\n10. The first number of bytes in H, equal to length of seed S are used to xor seed S. Call the result X.\n11. Do AES256Encrypt(message = X, key = last 32 bytes of H), call this encrypted_seed.\n\n\nThe encrypted_master_seed is the Base58Check-encoded concatenation of the following, which totals 2 + 4 + seed length bytes (22, 38 or 70 bytes):\n\nencrypted_master_seed = prefix + salt + encrypted_seed\n\nThe clear version is:\n\nmaster_seed = prefix + salt + seed S\n\n\nDecryption:\n\n1. Collect encrypted_master_seed and passphrase from user.\n2. Perform step 9 of encryption with the passphrase and the salt from the encrypted_master_seed.\n3. With the encrypted_seed from encrypted_master_seed do AES256Decrypt(message = encrypted_seed, key = last 32 bytes of H), call this decrypted_seed.\n4. With the first number of bytes in H, equal to the length of the decrypted_seed, perform the xor operation on decrypted_seed and call the result S.\n5. Perform generation steps 2 until 8 and verify that the generated salt is equal to the salt from encrypted_master_seed.\n\n\nSuggestions for implementers of proposal with alt-chains\n\nThis proposal involves hashing of a text representation of a public address which for Bitcoin includes the leading '1'. Alt-chains can easily be denoted simply by using the alt-chain's preferred format for representing an address. Alt-chain implementers may also change the prefix such that encoded master seeds do not start with \"WS\" or \"ws\".\n\n\nBitcoin testnet representation\n\nThis proposal does not cover separate Bitcoin testnet representations of encoded master seeds, although since the 4 salt bytes are based on a double SHA256 of the Bitcoin public address, they will be different for Bitcoin testnet public addresses and validation will fail.\u00a0\n\n\nReference implementation\n\nTODO\n\n\nTest vectors\n\nTest 1:\n\nSeed \u00a0 \u00a0 \u00a0: 000102030405060708090a0b0c0d0e0f\nClear \u00a0 \u00a0 : WSZsLQ5c1uKrRQugbrZNYsvMhRixiaWaVmJ\nPassword \u00a0: Satoshi\nEncrypted : wsHb15443fYPmneEXskd6wUZeP15fCiA69n\nAddress \u00a0 : 15mKKb2eos1hWa6tisdPwwDC1a5J1y9nma\nxprv \u00a0 \u00a0 \u00a0: xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi\nxpub \u00a0 \u00a0 \u00a0: xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8\n\nTest 2:\n\nSeed \u00a0 \u00a0 \u00a0: 7f0ad7d595be13e6fe4cf1fa0fbb6ae9c26c5d9b09920709414982b6363d5844\nClear \u00a0 \u00a0 : WSB7z3izBZwDoaAUA4mDpEHzAZsA5zfTWu3cCxhkaLtZ4Ur6n6mXsgpMK\nPassword \u00a0: Nakamoto\nEncrypted : wsFp1uM2gFhd2PuRzmNFReRud71hgmVwPoc7cGpxuvgETRsv8J1wHNANJ\nAddress \u00a0 : 1A54ECavJaJAoLGqqNrPd9Y3cvSvkL2Roz\nxprv \u00a0 \u00a0 \u00a0: xprv9s21ZrQH143K3f9hMVvcbY4EX4CfxsEtc6C5BMkZtgGpTGpxAscoq7SLSAcL6k5dxaZ9s4SChrtfSFoKpijuwAnhuPn76eva6W8bDr118t3\nxpub \u00a0 \u00a0 \u00a0: xpub661MyMwAqRbcG9EATXTcxfzy563ANKxjyK7fykABT1ooL5A6iQw4NukpHShDxYgeso4NHscFmqcVEtdUt61c8RCf7FqXK9z6sgfkQvYBQPP\n\nTest 3:\n\nSeed \u00a0 \u00a0 \u00a0: fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542\nClear \u00a0 \u00a0 : WS6186bsAkSaGRjRZ1UGyCGigxsXPvnYGSqNHJYmauV9X4W8tLJke1DH8UP8YMsDLdsjwgodcghjjKqkWQmk3t7qDbNMJVBDKcD2s\nPassword \u00a0: Vires In Numeris\nEncrypted : ws7vDy7RjqMvcPX7GeakKvdK6vDKGhRSjQtaRfKUVQrJXwwetLSeTdNgGzn5BKZZqz1BBdaHBFYfLvNUSxDaoP1ojJMMJD9UnQuwt\nAddress \u00a0 : 1JEoxevbLLG8cVqeoGKQiAwoWbNYSUyYjg\nxprv \u00a0 \u00a0 \u00a0: xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U\nxpub \u00a0 \u00a0 \u00a0: xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB\n\nTest 4:\n\nSeed \u00a0 \u00a0 \u00a0: 6ca4a27ac660c683340f59353b1375a9\nClear \u00a0 \u00a0 : WSXnfK5CJbDoSwcqMfz7Xqy3avuPHSxDQQk\nPassword \u00a0: \u8061\u4e2d\u672c\nEncrypted : wsFWKz3c5eeHRwtJveSdFvwUrmoNVkJ5ns2\nAddress \u00a0 : 1JVncPbsdB2s4zHim3VdAWNkZ8JANBZ1U9\nxprv \u00a0 \u00a0 \u00a0: xprv9s21ZrQH143K3mJ4upPSDfXdA34yNjem6PSsXT63vm8dq8ikUJv4iiTD3PrSKtdGZXFVD689z5T7knXo55BjcHS2WL3Syp2DbGgnbgxw2QA\nxpub \u00a0 \u00a0 \u00a0: xpub661MyMwAqRbcGFNY1qvSaoUMi4uTnCNcTcNUKqVfV6fchw3u1rEKGWmgtfUMRKLgUHNZ7dfsh8Ys6SLwUojZqScFBQL3dFGF3QywNLJVZ2o\n\n\nAcknowledgements\n\nMike Caldwell for BIP 0038, which this proposal borrows heavily from.\n\n\nSee Also\n\nBIP 0032 Hierarchical Deterministic Wallets: https://en.bitcoin.it/wiki/BIP_0032\nBIP 0038 Passphrase-protected private key: https://en.bitcoin.it/wiki/BIP_0038\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130719/eb2ecd1f/attachment.html>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-07-19T18:11:05",
                "message_text_only": "I do, but it's currently not in shippable form. Would the encoding / decoding functions suffice?\n\njp\n\n\nOn Jul 19, 2013, at 10:54 AM, \"Andreas M. Antonopoulos\" <andreas at rooteleven.com> wrote:\n\nJean-Paul,\n\nVery interesting. I have a beta BIP0038 compliant paper wallet and I'm working on BIP0032 paper wallets at the moment. \n\nThis is definitely necessary and a great approach to combine BIP0038 and BIP0032. \n\nDo you have reference code?\n\n\nOn Fri, Jul 19, 2013 at 10:46 AM, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:\n\nHi everyone,\n\nI'm looking for feedback on the proposal below.\n\nKind regards,\n\nJean-Paul\n\n---\nBIP:\u00a0\nTitle: Base58 encoded HD Wallet master seed with optional encryption\nAuthor: Jean-Paul Kogelman\nStatus: Draft\nType: Informational\nCreated: 17-07-2013\n\n...\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130719/efb998ec/attachment.html>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-07-19T18:15:32",
                "message_text_only": "Hi Jeremy,\n\nThe main reason is to stick as close to BIP 0038 as possible, allowing implementers to reuse existing code paths. This proposal and BIP 0032 don't really put any restrictions on content of the seed itself (as can be seen in test vector 1).\n\njp\n\nOn Jul 19, 2013, at 11:09 AM, Jeremy Spilman <jeremy at taplink.co> wrote:\n\nVery clear write-up Jean!\n\nQuick question - what is the purpose of step 10 of the encryption process -- why XOR the master seed with some bytes of the hashed passphrase before encrypting the XOR'd master seed with the remaining bytes of the hashed passphrase? Versus simply encrypting the master seed with the hashed passphrase of equal length to the seed?\n\nDoes this basically serve the fucntion of an IV?\n\nDo you really need this since the master seed must be high entropy random bytes in the first place?\n\nThanks,\n--Jeremy\n\nOn Fri, 19 Jul 2013 10:46:44 -0700, Jean-Paul Kogelman <jeanpaulkogelman at me.com> wrote:\n\n\nHi everyone,\n\nI'm looking for feedback on the proposal below.\n\nKind regards,\n\nJean-Paul\n\n---\nBIP:\u00a0\nTitle: Base58 encoded HD Wallet master seed with optional encryption\nAuthor: Jean-Paul Kogelman\nStatus: Draft\nType: Informational\nCreated: 17-07-2013\n\nAbstract\n\nThis proposal describes a method for encoding and optionally encrypting a Bitcoin Hierarchical Deterministic (HD) Wallet master seed. Encoded master seeds are intended for use on paper wallets. Each string contains all the information needed to verify and reconstitute an HD wallet except for the optional passphrase. The encrypted version uses salting and scrypt to resist brute-force attacks.\n\nThe method provides two encoding methodologies in 3 lengths each (16, 32 and 64 byte seeds). One is a clear version of the master seed with verification information for integrity checking and the other is an encrypted representation.\n\nA 32-bit hash of the resulting master Bitcoin public address is encoded in plain text within each seed record, so in the case of an encrypted seed, it can be correlated to a Bitcoin public address with reasonable probability by someone not knowing the passphrase. The complete Bitcoin public address can be derived through successful decoding and optional decryption of the master seed record.\n\n\nMotivation\n\nThe extended private keys proposed in BIP 0032 are long, fixed length records and don't offer any form of security. The master seed used to generate the HD wallet is typically shorter than the extended master private key that results from it.\u00a0\n\nA compact representation of the master seed is easier to handle and a 2-factor version of the master seed record allows for safe storage and the creation of paper wallets by 3rd parties.\u00a0\n\n\nCopyright\n\nThis proposal is hereby placed in the public domain.\n\n\nRationale\n\nUser story: As a Bitcoin user who uses HD wallets, I would like the ability to store my wallet master seed in a compact form as a paper wallet.\n\nUser story: As a Bitcoin user who uses HD wallets, I would like the ability to have a 3rd party create a paper wallet with my master seed in it, without having access to the funds stored in the wallet.\n\nUser story: As a Bitcoin user who uses HD wallets, I would like the ability to choose the strength of the master seed depending on my security requirements and how I wish to store it.\u00a0\n\n\nSpecification\n\nThis proposal makes use of the following functions and definitions:\n\nAES256Encrypt, AES256Decrypt: the simple form of the well-known AES block cipher without consideration for initialization vectors or block chaining. Each of these functions takes a 256-bit key and a variable legth of input and deterministically yields output data of similar length to the input.\n\nSHA256: a well-known hashing algorithm that takes an arbitrary number of bytes as input and deterministically yields a 32-byte hash.\n\nRIPEMD160: a well known hashing algorithm that takes an arbitrary number of bytes as input and deterministically yields a 20-byte hash.\n\nscrypt: A well-known key derivation algorithm. It takes the following parameters: (string) password, (string) salt, (int) n, (int) r, (int) p, (int) length, and deterministically yields an array of bytes whose length is equal to the length parameter.\n\nHMAC-SHA512: Produces a 64 byte (512 bit) hash based message authentication code using the SHA512 hash function using a seed (in our case we will use a byte representation of \"Bitcoin seed\") and an aribtrary input message. The output will be 64 bytes.\n\nBase58Check: a method for encoding arrays of bytes using 58 alphanumeric characters commonly used in the Bitcoin ecosystem.\n\nG, N: Constants defined as part of the secp256k1 elliptic curve. G is an elliptic curve point, and N is a large positive integer.\n\nPrefix\n\nIt is proposed that the resulting Base58Check-encoded string start with either \"WS\" for clear master seed records or \"ws\" for 2-factor master seed records. The prefixes \"WS\" and \"ws\" were chosen as abreviations of the term \"Wallet Seed\" and upper case to indicate whether it's a clear representation and lower case when it's a 2-factor representation.\u00a0\n\nTo keep the size of the encrypted key equal to the clear version, no initialization vectors (IVs) are used in the AES encryption. Rather, suitable values for IV-like use are derived using scrypt from the passphrase and from using a 32-bit hash of the resulting Bitcoin public address as salt.\n\nProposed specification\n\nThere are 2 seed record representations with 3 lengths each, resulting in a total of 6 different object identifier prefixes.\u00a0\n\nPrefix 0x1093: Clear 16 byte master seed, total length: 22 bytes\nPrefix 0x1E68: Clear 32 byte master seed, total length: 38 bytes\nPrefix 0x665A: Clear 64 byte master seed, total length: 70 bytes\n\nPrefix 0x1EE4: 2-factor 16 byte master seed, total length: 22 bytes\nPrefix 0x38AE: 2-factor 32 byte master seed, total length: 38 bytes\nPrefix 0xBECB: 2-factor 64 byte master seed, total length: 70 bytes\n\nThese are constant bytes that appear at the beginning of the Base58Check-encoded record, and their presence causes the resulting string to have a predictable prefix.\n\nHow the user sees it: 35, 57 or 101 characters always starting with either \"WS\" or \"ws\".\n\nCount of payload bytes (beyond prefix): 20, 36 or 68\n\nPayload format:\n4 bytes: SHA256(SHA256(master_bitcoin_public_address))[0...3], used both for typo checking and as salt.\n16, 32 or 64 bytes: either a clear representation or an encrypted representation of the master seed.\n\nRange in Base58Check encoding for clear 16 byte master seed (prefix WS):\nMinimum value: WSJ5JnjiRZT8b15aZr6GGWzt2VMBPapmhBQ (based on 0x10 0x93 plus twenty 0x00's)\nMaximum value: WShQumr1iGdbTpWiesWbb189p7rSLBiq3EJ (based on 0x10 0x93 plus twenty 0xFF's)\n\nRange in Base58Check encoding for clear 32 byte master seed (prefix WS):\nMinimum value: WS7SqjMWhDGCagcZxCk317LLWyWUny7465ENGKEKuxBf5sFvRHmRRfCgr (based on 0x1E 0x68 plus thirty-six 0x00's)\nMaximum value: WSLAbo8WHEQr1Z1cv26Z5njh5URHMo9fPiDFYE2NpCwmAoPZwDxzm3PjB (based on 0x1E 0x68 plus thirty-six 0xFF's)\n\nRange in Base58Check encoding for clear 64 byte master seed (prefix WS):\nMinimum value: WS2cMzM9WrogWVLKYFzTaTXZnYCryY31uptmdevXuRFBXTWJhmt4No9Eejoj3apqyU5RkyXsGHFPbZd14oz7Fv1Mi85kadBD4TPsL (based on 0x66 0x5A plus sixty-eight 0x00's)\nMaximum value: WS6PXJ1HoJXn9hyLz8uXQEy2ZajAVaFDTViXhZDthwYbhyvfHRqjwU4FoGpepCbuuycAwMFbgoZB6E48baqD1c9PdMNUZCSSBmfE7 (based on 0x66 0x5A plus sixty-eight 0xFF's)\n\nRange in Base58Check encoding for 2-factor 16 byte master seed (prefix ws):\nMinimum value: ws1nyTi9KjdRkJda4Yh1KkXSLC8SZ6kKzEM (based on 0x1E 0xE4 plus twenty 0x00's)\nMaximum value: wsR8aSpScSotd84i9a7LeEei7pdhVkeciX8 (based on 0x1E 0xE4 plus twenty 0xFF's)\n\nRange in Base58Check encoding for 2-factor 32 byte master seed (prefix ws):\nMinimum value: wsC8sayZpTpeX3k6jcCMeTedDapXkXd7SZpRJbSjdeqKBJ2Vnrm1xyfD3 (based on 0x38 0xAE plus thirty-six 0x00's)\nMaximum value: wsQrdekZQUyHwv99hRYsj93yn5jLKMfikCoJaWEnXubRGEA9Jnxg5KaPW (based on 0x38 0xAE plus thirty-six 0xFF's)\n\nRange in Base58Check encoding for 2-factor 64 byte master seed (prefix ws):\nMinimum value: ws4XTrriTEyyy2TrGWv9R7o94CyBiN69S2VxiK5tVW9htEi48w54sQ43JChCmadoGtYpZSu7vqbbQTMemCSyyToyLPPMjughcXNxE (based on 0xBE 0xCB plus sixty-eight 0x00's)\nMaximum value: ws8JdAWrjgi5cF6siPqDEuEbqFVVEQJLyhKinDPFJ2T84m8Qib2kS4y4Sji8YCQsDQ5ZjpcrMMuNu7nnHyJ5j9x1Fcg5iUwvZ7krH (based on 0xBE 0xCB plus sixty-eight 0xFF's)\n\nGeneration of master seed:\n\n1. Take either an existing 16, 32 or 64 byte master seed S, or generate one from a (P)RNG.\n2. Calculate I = HMAC-SHA512(key = \"Bitcoin seed\", msg = S)\n3. Split I into two 32-byte sequences, IL and IR.\n4. Use IL as master secret key. IR, the master chain code is not relevant here.\n5. In case IL is 0 or >= N, the master key is invalid. Go back to step 1 if generating, or in case of a provided master seed, return an error.\n6. Compute the public key K = IL*G\n7. Calculate the master Bitcoin public address A = Base58Check(RIPEMD160(SHA256(K)))\n8. Calculate the salt = SHA256(SHA256(A))[0...3]\n\nEncryption:\n\n9. Derive a hash H from the passphrase using scrypt\n\u00a0 \u00a0 - Parameters: passphrase is the passphrase itself encoded in UTF-8, salt = salt, n = 16384, r = 8, p = 8, length = seed length + 32\n10. The first number of bytes in H, equal to length of seed S are used to xor seed S. Call the result X.\n11. Do AES256Encrypt(message = X, key = last 32 bytes of H), call this encrypted_seed.\n\n\nThe encrypted_master_seed is the Base58Check-encoded concatenation of the following, which totals 2 + 4 + seed length bytes (22, 38 or 70 bytes):\n\nencrypted_master_seed = prefix + salt + encrypted_seed\n\nThe clear version is:\n\nmaster_seed = prefix + salt + seed S\n\n\nDecryption:\n\n1. Collect encrypted_master_seed and passphrase from user.\n2. Perform step 9 of encryption with the passphrase and the salt from the encrypted_master_seed.\n3. With the encrypted_seed from encrypted_master_seed do AES256Decrypt(message = encrypted_seed, key = last 32 bytes of H), call this decrypted_seed.\n4. With the first number of bytes in H, equal to the length of the decrypted_seed, perform the xor operation on decrypted_seed and call the result S.\n5. Perform generation steps 2 until 8 and verify that the generated salt is equal to the salt from encrypted_master_seed.\n\n\nSuggestions for implementers of proposal with alt-chains\n\nThis proposal involves hashing of a text representation of a public address which for Bitcoin includes the leading '1'. Alt-chains can easily be denoted simply by using the alt-chain's preferred format for representing an address. Alt-chain implementers may also change the prefix such that encoded master seeds do not start with \"WS\" or \"ws\".\n\n\nBitcoin testnet representation\n\nThis proposal does not cover separate Bitcoin testnet representations of encoded master seeds, although since the 4 salt bytes are based on a double SHA256 of the Bitcoin public address, they will be different for Bitcoin testnet public addresses and validation will fail.\u00a0\n\n\nReference implementation\n\nTODO\n\n\nTest vectors\n\nTest 1:\n\nSeed \u00a0 \u00a0 \u00a0: 000102030405060708090a0b0c0d0e0f\nClear \u00a0 \u00a0 : WSZsLQ5c1uKrRQugbrZNYsvMhRixiaWaVmJ\nPassword \u00a0: Satoshi\nEncrypted : wsHb15443fYPmneEXskd6wUZeP15fCiA69n\nAddress \u00a0 : 15mKKb2eos1hWa6tisdPwwDC1a5J1y9nma\nxprv \u00a0 \u00a0 \u00a0: xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi\nxpub \u00a0 \u00a0 \u00a0: xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8\n\nTest 2:\n\nSeed \u00a0 \u00a0 \u00a0: 7f0ad7d595be13e6fe4cf1fa0fbb6ae9c26c5d9b09920709414982b6363d5844\nClear \u00a0 \u00a0 : WSB7z3izBZwDoaAUA4mDpEHzAZsA5zfTWu3cCxhkaLtZ4Ur6n6mXsgpMK\nPassword \u00a0: Nakamoto\nEncrypted : wsFp1uM2gFhd2PuRzmNFReRud71hgmVwPoc7cGpxuvgETRsv8J1wHNANJ\nAddress \u00a0 : 1A54ECavJaJAoLGqqNrPd9Y3cvSvkL2Roz\nxprv \u00a0 \u00a0 \u00a0: xprv9s21ZrQH143K3f9hMVvcbY4EX4CfxsEtc6C5BMkZtgGpTGpxAscoq7SLSAcL6k5dxaZ9s4SChrtfSFoKpijuwAnhuPn76eva6W8bDr118t3\nxpub \u00a0 \u00a0 \u00a0: xpub661MyMwAqRbcG9EATXTcxfzy563ANKxjyK7fykABT1ooL5A6iQw4NukpHShDxYgeso4NHscFmqcVEtdUt61c8RCf7FqXK9z6sgfkQvYBQPP\n\nTest 3:\n\nSeed \u00a0 \u00a0 \u00a0: fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542\nClear \u00a0 \u00a0 : WS6186bsAkSaGRjRZ1UGyCGigxsXPvnYGSqNHJYmauV9X4W8tLJke1DH8UP8YMsDLdsjwgodcghjjKqkWQmk3t7qDbNMJVBDKcD2s\nPassword \u00a0: Vires In Numeris\nEncrypted : ws7vDy7RjqMvcPX7GeakKvdK6vDKGhRSjQtaRfKUVQrJXwwetLSeTdNgGzn5BKZZqz1BBdaHBFYfLvNUSxDaoP1ojJMMJD9UnQuwt\nAddress \u00a0 : 1JEoxevbLLG8cVqeoGKQiAwoWbNYSUyYjg\nxprv \u00a0 \u00a0 \u00a0: xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U\nxpub \u00a0 \u00a0 \u00a0: xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB\n\nTest 4:\n\nSeed \u00a0 \u00a0 \u00a0: 6ca4a27ac660c683340f59353b1375a9\nClear \u00a0 \u00a0 : WSXnfK5CJbDoSwcqMfz7Xqy3avuPHSxDQQk\nPassword \u00a0: \u8061\u4e2d\u672c\nEncrypted : wsFWKz3c5eeHRwtJveSdFvwUrmoNVkJ5ns2\nAddress \u00a0 : 1JVncPbsdB2s4zHim3VdAWNkZ8JANBZ1U9\nxprv \u00a0 \u00a0 \u00a0: xprv9s21ZrQH143K3mJ4upPSDfXdA34yNjem6PSsXT63vm8dq8ikUJv4iiTD3PrSKtdGZXFVD689z5T7knXo55BjcHS2WL3Syp2DbGgnbgxw2QA\nxpub \u00a0 \u00a0 \u00a0: xpub661MyMwAqRbcGFNY1qvSaoUMi4uTnCNcTcNUKqVfV6fchw3u1rEKGWmgtfUMRKLgUHNZ7dfsh8Ys6SLwUojZqScFBQL3dFGF3QywNLJVZ2o\n\n\nAcknowledgements\n\nMike Caldwell for BIP 0038, which this proposal borrows heavily from.\n\n\nSee Also\n\nBIP 0032 Hierarchical Deterministic Wallets: https://en.bitcoin.it/wiki/BIP_0032\nBIP 0038 Passphrase-protected private key: https://en.bitcoin.it/wiki/BIP_0038\n\n\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130719/22cd4c64/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-22T13:14:42",
                "message_text_only": "This isn't usable for SPV wallets unless it has a birthday in it. Otherwise\nyou either need to scan the entire chain (slow) or find a fully indexed\ncopy of the block chain (expensive, more centralised). Just add a UNIX time\nas an extra 4 bytes, or if you want to save a few characters then use a\nuint16 that represents \"days since birth of this specification\".\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130722/68673889/attachment.html>"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-07-22T14:33:34",
                "message_text_only": "Hi Mike,\n\nI had a similar request on the forums. I suggested adding either a 2 byte 'weeks since genesis' or 'months since genesis', but starting from spec birth works too. Would either of those work for you?\n\n\njp\n\nOn Jul 22, 2013, at 6:14 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> This isn't usable for SPV wallets unless it has a birthday in it. Otherwise you either need to scan the entire chain (slow) or find a fully indexed copy of the block chain (expensive, more centralised). Just add a UNIX time as an extra 4 bytes, or if you want to save a few characters then use a uint16 that represents \"days since birth of this specification\"."
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-07-22T21:37:12",
                "message_text_only": "I added a 2 byte 'weeks since 2013-01-01' field and updated the prefixes, ranges and test vectors.\n\nThe updated proposal lives here:\nhttps://bitcointalk.org/index.php?topic=258678\n\nCheers,\n\njp\n\nOn Jul 22, 2013, at 06:14 AM, Mike Hearn <mike at plan99.net> wrote:\n\nThis isn't usable for SPV wallets unless it has a birthday in it. Otherwise you either need to scan the entire chain (slow) or find a fully indexed copy of the block chain (expensive, more centralised). Just add a UNIX time as an extra 4 bytes, or if you want to save a few characters then use a uint16 that represents \"days since birth of this specification\".\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130722/c200153c/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposal: Base58 encoded HD Wallet master seed with optional encryption",
            "categories": [
                "Bitcoin-development",
                "RFC"
            ],
            "authors": [
                "Jean-Paul Kogelman",
                "Mike Hearn"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 29290
        }
    },
    {
        "title": "[Bitcoin-development] [RFC] Standard for private keys with birth timestamp",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2013-07-22T14:44:59",
                "message_text_only": "Hello,\n\nI should have brought up this suggestion before, as there seems to be relevant other work.\n\nI'd like to propose encoding keys data (whatever type) with a birth timestamp as:\n * <serialized key>@<unix timestamp in decimal>\n\nThe reason for not incorporating this inside the key serialization (for example BIP32), is because\nbirth timestamps are more generally a property of an address, rather than the key it is derived from.\nFor one, it is useful for non-extended standard serialized private keys, but for P2SH addresses,\nthe \"private key\" is really the actual scriptPubKey, but birth data is equally useful for this.\n\nReason for choosing the '@' character: it's not present in the base58, hex, or base64 encodings that\nare typically used for key/script data.\n\nOne downside is that this means no checksum-protection for the timestamp, but the advantage is\nincreased genericity. It's also longer than using a binary encoding, but this is an optional\npart anyway, and I think \"human typing\" is already fairly hard anyway.\n\n-- \nPieter"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-07-22T15:12:50",
                "message_text_only": "On 22 July 2013 16:44, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n\n> Hello,\n>\n> I should have brought up this suggestion before, as there seems to be\n> relevant other work.\n>\n> I'd like to propose encoding keys data (whatever type) with a birth\n> timestamp as:\n>  * <serialized key>@<unix timestamp in decimal>\n>\n> The reason for not incorporating this inside the key serialization (for\n> example BIP32), is because\n> birth timestamps are more generally a property of an address, rather than\n> the key it is derived from.\n> For one, it is useful for non-extended standard serialized private keys,\n> but for P2SH addresses,\n> the \"private key\" is really the actual scriptPubKey, but birth data is\n> equally useful for this.\n>\n> Reason for choosing the '@' character: it's not present in the base58,\n> hex, or base64 encodings that\n> are typically used for key/script data.\n>\n> One downside is that this means no checksum-protection for the timestamp,\n> but the advantage is\n> increased genericity. It's also longer than using a binary encoding, but\n> this is an optional\n> part anyway, and I think \"human typing\" is already fairly hard anyway.\n>\n\nIs there a BIP for this?\n\n@ is normally used in conjunction with things other than a time stamp ...\n\nYou may want to look at RFC 4151\n\nhttp://www.ietf.org/rfc/rfc4151.txt\n\nThey had an idea on adding time stamps to identifiers.\n\nFirst impression is that the sacrifice in opacity does not seem to justify\nthe utility.\n\n\n>\n> --\n> Pieter\n>\n>\n>\n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130722/1a9c17e0/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Standard for private keys with birth timestamp",
            "categories": [
                "Bitcoin-development",
                "RFC"
            ],
            "authors": [
                "Melvin Carvalho",
                "Pieter Wuille"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3321
        }
    },
    {
        "title": "[Bitcoin-development] HTTP REST API for bitcoind",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2013-07-22T19:42:45",
                "message_text_only": "URL: https://github.com/bitcoin/bitcoin/pull/2844\n\nAdding an HTTP REST API for bitcoind has been occasionally tossed\nabout as a useful thing.  Such an API would essentially provide a\ndecentralized block explorer capability, enabling easy external access\nto transaction/address/block indices that we maintain.\n\nThe first two implemented API calls are simple, returning a block or\nTX given a simple query string based on block hash, e.g.\n\n     GET /rest/tx/TX-HASH\nor\n     GET /rest/block/BLOCK-HASH\n\nThis can be easily accessed via command line cURL/wget utilities.\nOutput formats -- binary, hex or json -- may be selected via a\n\"bitcoin-format\" header.\n\nThe general goal of the HTTP REST interface is to access\nunauthenticated, public blockchain information.  There is no plan to\nadd wallet interfacing/manipulation via this API.\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Michael Hendricks",
                "date": "2013-07-22T22:06:15",
                "message_text_only": "+1 and thank you. I've prototyped a couple different Bitcoin projects that\nwould benefit from this.\n\nI'm traveling with poor 'net so I haven't read the patches yet. I echo pull\nrequest comments about using Accept and Accept-Encoding headers. Same for\nan API version number in the URL.\n\nIt'd be helpful, eventually, to have APIs corresponding to Bitcoin addr and\nversion messages.  Metadata about the network and the peer, respectively,\nare valuable in my use cases.\n\nMichael\nOn Jul 22, 2013 1:43 PM, \"Jeff Garzik\" <jgarzik at bitpay.com> wrote:\n\n> URL: https://github.com/bitcoin/bitcoin/pull/2844\n>\n> Adding an HTTP REST API for bitcoind has been occasionally tossed\n> about as a useful thing.  Such an API would essentially provide a\n> decentralized block explorer capability, enabling easy external access\n> to transaction/address/block indices that we maintain.\n>\n> The first two implemented API calls are simple, returning a block or\n> TX given a simple query string based on block hash, e.g.\n>\n>      GET /rest/tx/TX-HASH\n> or\n>      GET /rest/block/BLOCK-HASH\n>\n> This can be easily accessed via command line cURL/wget utilities.\n> Output formats -- binary, hex or json -- may be selected via a\n> \"bitcoin-format\" header.\n>\n> The general goal of the HTTP REST interface is to access\n> unauthenticated, public blockchain information.  There is no plan to\n> add wallet interfacing/manipulation via this API.\n>\n> --\n> Jeff Garzik\n> Senior Software Engineer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130722/2c0063e6/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2013-07-23T08:27:19",
                "message_text_only": "On 07/22/2013 09:42 PM, Jeff Garzik wrote:\n\n> The general goal of the HTTP REST interface is to access\n> unauthenticated, public blockchain information.  There is no plan to\n> add wallet interfacing/manipulation via this API.\n\nIs it planned to expose the UXTO set of a given address? That would be\nuseful for SPV wallets to be able to swipe a previously unknown private\nkey (e.g. paper wallet)."
            },
            {
                "author": "Michael Gronager",
                "date": "2013-07-23T08:45:51",
                "message_text_only": "Hi Andreas / Jeff,\n\nAccess to the UTXO set can be done using libcoin (see the coinexplorer example), which also has a rest interface. Access to the UTXO set pr address/script requires indexing of all scripts, which was easy in libcoin as the blockchain is stored in a sqlite database. Integrating this in bitcoind would require setting up and maintaining such an index ad hoc.\n\nMichael\n\n\nOn Jul 23, 2013, at 10:27 , Andreas Schildbach <andreas at schildbach.de> wrote:\n\n> On 07/22/2013 09:42 PM, Jeff Garzik wrote:\n> \n>> The general goal of the HTTP REST interface is to access\n>> unauthenticated, public blockchain information.  There is no plan to\n>> add wallet interfacing/manipulation via this API.\n> \n> Is it planned to expose the UXTO set of a given address? That would be\n> useful for SPV wallets to be able to swipe a previously unknown private\n> key (e.g. paper wallet).\n> \n> \n> \n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-07-23T09:37:59",
                "message_text_only": "On Tue, Jul 23, 2013 at 10:27:19AM +0200, Andreas Schildbach wrote:\n> On 07/22/2013 09:42 PM, Jeff Garzik wrote:\n> \n> > The general goal of the HTTP REST interface is to access\n> > unauthenticated, public blockchain information.  There is no plan to\n> > add wallet interfacing/manipulation via this API.\n> \n> Is it planned to expose the UXTO set of a given address? That would be\n> useful for SPV wallets to be able to swipe a previously unknown private\n> key (e.g. paper wallet).\n\nDepends what you mean by expose.\n\nMaintaining an address/script-indexed UTXO is generally useful, in\nparticular for things like sweeping addresses. I certainly have\nless problems with 'exposing' this than exposing a fully-indexed\nblock chain history.\n\nHowever, and I expect that's what your question is about, this isn't\nreally useful for SPV (or less) nodes, as there is no way to\nauthenticate this data. If you can fake a UTXO entry, you can make\na peer believe anything about their balance, potentially resulting\nin creating a valid transaction that sends change it didn't know\nwas there as fee to miners. Other than for normal block chain data,\nthere is no way to detect this without at least partial validation.\n\nThe only way to do this safely at an SPV security assumption, is by\nhaving an address-indexed committed merkle UTXO-set tree, like the\none proposed by Alan Reiner, and being implemented by Mark\nFriedenback. I know Michael Gronager has something similar implemented,\nbut I don't know whether it is script-indexed. To be actually useful,\nit likely needs to be enforced by miners - putting a significant\nburden on validation nodes. Still, if it can be done efficiently,\nI think this would be worth it, but more research is needed first in\nany case.\n\nRegarding sweeping keys in the first place - I think using those,\nand relying on address-indexed UTXO sets or blockchains to import\nthem, is an idea that doesn't scale very well in the first place.\nIf it is for things like scratch card or physical coins, with a\npre-set value, the obvious solution IMHO is storing the crediting\ntransaction with its merkle path together with the key. If that's\nnot possible, just the txid:vout of the credit output can suffice.\nYes, that's more data than is necessary now, but it's so much more\ntrivial to use.\n\n-- \nPieter"
            },
            {
                "author": "Michael Gronager",
                "date": "2013-07-23T09:53:07",
                "message_text_only": "> \n> The only way to do this safely at an SPV security assumption, is by\n> having an address-indexed committed merkle UTXO-set tree, like the\n> one proposed by Alan Reiner, and being implemented by Mark\n> Friedenback. I know Michael Gronager has something similar implemented,\n> but I don't know whether it is script-indexed.\n\nThe MerkleTrie I have in libcoin is indexed on UTXOs only. However, adding\nan extra index for scripts would be pretty easy (half day of coding), or even having the two merged into one index.\n\nThe burden imposed on validating nodes for keeping such an index is really minimal. When using the UTXO MerkleTrie I switch off the sqlite index of these and vise versa, so there are hardly any measurable timing difference.\n\nHowever, the MerkleTrie index is currently re-build on startup (which takes ~30 sec on my laptop), keeping it synced with disk would be optimal and in the long run necessary as even the UTXO set will grow over time.\n\n> To be actually useful,\n> it likely needs to be enforced by miners - putting a significant\n> burden on validation nodes. Still, if it can be done efficiently,\n> I think this would be worth it, but more research is needed first in\n> any case.\n>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2013-07-23T10:17:33",
                "message_text_only": "On 07/23/2013 11:37 AM, Pieter Wuille wrote:\n\n>> Is it planned to expose the UXTO set of a given address? That would be\n>> useful for SPV wallets to be able to swipe a previously unknown private\n>> key (e.g. paper wallet).\n>\n> Depends what you mean by expose.\n>\n> Maintaining an address/script-indexed UTXO is generally useful, in\n> particular for things like sweeping addresses. I certainly have\n> less problems with 'exposing' this than exposing a fully-indexed\n> block chain history.\n>\n> However, and I expect that's what your question is about, this isn't\n> really useful for SPV (or less) nodes, as there is no way to\n> authenticate this data. If you can fake a UTXO entry, you can make\n> a peer believe anything about their balance, potentially resulting\n> in creating a valid transaction that sends change it didn't know\n> was there as fee to miners. Other than for normal block chain data,\n> there is no way to detect this without at least partial validation.\n>\n> The only way to do this safely at an SPV security assumption, is by\n> having an address-indexed committed merkle UTXO-set tree, like the\n> one proposed by Alan Reiner, and being implemented by Mark\n> Friedenback. I know Michael Gronager has something similar implemented,\n> but I don't know whether it is script-indexed. To be actually useful,\n> it likely needs to be enforced by miners - putting a significant\n> burden on validation nodes. Still, if it can be done efficiently,\n> I think this would be worth it, but more research is needed first in\n> any case.\n>\n> Regarding sweeping keys in the first place - I think using those,\n> and relying on address-indexed UTXO sets or blockchains to import\n> them, is an idea that doesn't scale very well in the first place.\n> If it is for things like scratch card or physical coins, with a\n> pre-set value, the obvious solution IMHO is storing the crediting\n> transaction with its merkle path together with the key. If that's\n> not possible, just the txid:vout of the credit output can suffice.\n> Yes, that's more data than is necessary now, but it's so much more\n> trivial to use.\n\nI certainly don't want to push ideas that won't work for whatever\nreason. So I fully respect whatever you decide regarding that feature.\nPersonally I have never felt any need for being able to sweep paper\nwallets, I am more or less just relaying the need of users.\n\nLet me just say this:\n\nSweeping paper wallets is a common feature request. People switch to\ncentralized services just for getting that.\n\nIt is my understanding that for the usecase, an address-indexed UXTO is\nenough. So you probably don't need to worry about script-indexed for now.\n\nSecurity issues could be mitigated by applying trust to the REST server,\ne.g. because its your own or the one of your apps vendor. Of course,\nlink-level security would be needed for this (e.g. SSL).\n\nPaper wallets that include the necessary additional information is\nsomething I have been thinking about. I see some issues:\n\n- Paper wallets are already quite widespread. You still won't be able to\nsweep those.\n- Some people like to \"top up\" a paper wallet or even just sweep a\nportion of it. That would not be possible, and in some cases even lead\nto loss of coins because of the \"involuntary fee\" you described.\n- Does the necessary info fit into a QR code?"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-07-23T10:27:35",
                "message_text_only": "On Tue, Jul 23, 2013 at 12:17 PM, Andreas Schildbach\n<andreas at schildbach.de> wrote:\n> Sweeping paper wallets is a common feature request. People switch to\n> centralized services just for getting that.\n\nThat means they value convenience more than the trust-freeness of a\ndecentralized solution. The only way to avoid that is by making sure\nthe decentralized one is convenient enough. But relying on\nunauthenticated data itself is equally bad - it means you lose\nwhatever benefit the decentralization had.\n\n> It is my understanding that for the usecase, an address-indexed UXTO is\n> enough. So you probably don't need to worry about script-indexed for now.\n\nThe difference between script-indexed and address-indexed is\nabsolutely trivial compared to the effort needed to implement and\nmaintain such authenticated trees by all full nodes. Restricting\nthings at the network level (which doesn't even know about a thing\nlike an address) to address-based indexes is ridiculous IMHO.\n\n> Security issues could be mitigated by applying trust to the REST server,\n> e.g. because its your own or the one of your apps vendor. Of course,\n> link-level security would be needed for this (e.g. SSL).\n\nSure, once you introduce trust, a lot can be done. But it's not really\nBitcoin anymore in that case - it's relying on a third party to do the\nheavy indexing for you. And if that is the best-scaling solution, sure\n- but I don't think we should encourage that. Or at least, we should\nfirst search for alternatives. And encourage infrastructure that\ndoesn't require it.\n\n> Paper wallets that include the necessary additional information is\n> something I have been thinking about. I see some issues:\n>\n> - Paper wallets are already quite widespread. You still won't be able to\n> sweep those.\n> - Some people like to \"top up\" a paper wallet or even just sweep a\n> portion of it. That would not be possible, and in some cases even lead\n> to loss of coins because of the \"involuntary fee\" you described.\n\nYeah, those are inherent problems with how there are used today. But\ntoday there is also little problem - the UTXO set is tiny.\n\n> - Does the necessary info fit into a QR code?\n\nAbsolutely, though a slightly bigger one.\n\n-- \nPieter"
            },
            {
                "author": "Andy Parkins",
                "date": "2013-07-23T09:30:13",
                "message_text_only": "On Monday 22 July 2013 20:42:45 Jeff Garzik wrote:\n> URL: https://github.com/bitcoin/bitcoin/pull/2844\n> \n> Adding an HTTP REST API for bitcoind has been occasionally tossed\n> about as a useful thing.  Such an API would essentially provide a\n> decentralized block explorer capability, enabling easy external access\n> to transaction/address/block indices that we maintain.\n\nThis is excellent.\n\n> The first two implemented API calls are simple, returning a block or\n> TX given a simple query string based on block hash, e.g.\n> \n>      GET /rest/tx/TX-HASH\n> or\n>      GET /rest/block/BLOCK-HASH\n\nOne additional URL makes this pretty much perfect:\n\n  GET /rest/block-with-tx/TX-HASH\n\nConstruction of the transaction-hash-to-block database is something the full \nclient's have to do anyway, so this query is no harder than the others for \nthem to supply; but suddenly makes it possible for an SPV client to trace the \nprovidence of any transaction without needing to maintain the entire chain.\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-07-23T09:42:05",
                "message_text_only": "On Tue, Jul 23, 2013 at 10:30:13AM +0100, Andy Parkins wrote:\n> One additional URL makes this pretty much perfect:\n> \n>   GET /rest/block-with-tx/TX-HASH\n> \n> Construction of the transaction-hash-to-block database is something the full \n> client's have to do anyway, so this query is no harder than the others for \n> them to supply; but suddenly makes it possible for an SPV client to trace the \n> providence of any transaction without needing to maintain the entire chain.\n\nThere is actually no such index being maintained by default, and doing so is an\nunnecessary burden IMHO (you need to enable -txindex since 0.8 to get this).\nOf course, if enabled, it can be exposed.\n\n-- \nPieter"
            },
            {
                "author": "Andy Parkins",
                "date": "2013-07-23T09:52:14",
                "message_text_only": "On Tuesday 23 July 2013 10:42:05 Pieter Wuille wrote:\n> On Tue, Jul 23, 2013 at 10:30:13AM +0100, Andy Parkins wrote:\n> > One additional URL makes this pretty much perfect:\n> >   GET /rest/block-with-tx/TX-HASH\n> > \n> > Construction of the transaction-hash-to-block database is something the\n> > full client's have to do anyway, so this query is no harder than the\n> > others for them to supply; but suddenly makes it possible for an SPV\n> > client to trace the providence of any transaction without needing to\n> > maintain the entire chain.\n> \n> There is actually no such index being maintained by default, and doing so\n> is an unnecessary burden IMHO (you need to enable -txindex since 0.8 to\n> get this). Of course, if enabled, it can be exposed.\n\nWow.  I'm surprised at that.  How does a newly received transaction have its \ninputs verified then?  Multiple linear brute force searches of the block chain \nfor every new transaction?  Or is it that transactions are only recorded if \nthey were in a block, and just their presence indicates they're valid?\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-07-23T09:56:02",
                "message_text_only": "On Tue, Jul 23, 2013 at 11:52 AM, Andy Parkins <andyparkins at gmail.com> wrote:\n>> There is actually no such index being maintained by default, and doing so\n>> is an unnecessary burden IMHO (you need to enable -txindex since 0.8 to\n>> get this). Of course, if enabled, it can be exposed.\n>\n> Wow.  I'm surprised at that.  How does a newly received transaction have its\n> inputs verified then?  Multiple linear brute force searches of the block chain\n> for every new transaction?  Or is it that transactions are only recorded if\n> they were in a block, and just their presence indicates they're valid?\n\nThe block chain is not involved at all to verify transactions, it's\njust a historical\nrecord to serve to other nodes, and to do wallet rescans with.\n\nFor validation, a separate database with just unspent transaction\noutputs is used (around 230 MB now).\n\n-- \nPieter"
            },
            {
                "author": "Andy Parkins",
                "date": "2013-07-23T10:02:06",
                "message_text_only": "On Tuesday 23 July 2013 10:56:02 Pieter Wuille wrote:\n\n> The block chain is not involved at all to verify transactions, it's\n> just a historical\n> record to serve to other nodes, and to do wallet rescans with.\n\nIt must be involved to some extent.  Certainly during a temporary fork, there \nare two branches growing, and you have to be able, when verifying a new \ntransaction, to say which branch it's one... which branch of the blockchain.\n\n\nAndy\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-07-23T10:06:24",
                "message_text_only": "On Tue, Jul 23, 2013 at 12:02 PM, Andy Parkins <andyparkins at gmail.com> wrote:\n> On Tuesday 23 July 2013 10:56:02 Pieter Wuille wrote:\n>\n>> The block chain is not involved at all to verify transactions, it's\n>> just a historical\n>> record to serve to other nodes, and to do wallet rescans with.\n>\n> It must be involved to some extent.  Certainly during a temporary fork, there\n> are two branches growing, and you have to be able, when verifying a new\n> transaction, to say which branch it's one... which branch of the blockchain.\n\nNo, not really.\n\nThe UTXO set is the state you need to validate blocks and\ntransactions. You can see blocks as authenticated patches to the UTXO\nset (consumes some outputs, produces others). During validation, we\nstore \"undo data\", basically (non-authenticated) reverse patches to\nthe UTXO set, so we can walk back in case of a reorganization.\n\n-- \nPieter"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-23T09:47:03",
                "message_text_only": "On Tue, Jul 23, 2013 at 10:30:13AM +0100, Andy Parkins wrote:\n> One additional URL makes this pretty much perfect:\n> \n>   GET /rest/block-with-tx/TX-HASH\n> \n> Construction of the transaction-hash-to-block database is something the full \n> client's have to do anyway, so this query is no harder than the others for \n> them to supply; but suddenly makes it possible for an SPV client to trace the \n> providence of any transaction without needing to maintain the entire chain.\n\nOn Tue, Jul 23, 2013 at 10:27:19AM +0200, Andreas Schildbach wrote:\n> On 07/22/2013 09:42 PM, Jeff Garzik wrote:\n> \n> > The general goal of the HTTP REST interface is to access\n> > unauthenticated, public blockchain information.  There is no plan to\n> > add wallet interfacing/manipulation via this API.\n> \n> Is it planned to expose the UXTO set of a given address? That would be\n> useful for SPV wallets to be able to swipe a previously unknown private\n> key (e.g. paper wallet).\n\nThe REST API has nothing to do with SPV clients; it's similar to the RPC\ninterface and won't be exposed to the network as a whole.\n\nIncreasing the resource usage by SPV clients on full nodes is undesirable; we\nhave a lot of work to do regarding DoS attacks. John Dillon's comments here on\nusing micro-transactions to compensate full-nodes for maintaining expensive\nblockchain indexes are worth reading:\nhttps://github.com/bitcoin/bitcoin/pull/2802#issuecomment-20232958\n\nIn any case UTXO data currently requires you to have full trust in\nwhomever is providing you with it, and that situation will continue\nuntil UTXO commitments are implemented - if they are implemented.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000007bea8b46717ec4acb05830bcb6222497366dd72b02ddc80569\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130723/95cd1e72/attachment.sig>"
            },
            {
                "author": "Andy Parkins",
                "date": "2013-07-23T10:00:24",
                "message_text_only": "On Tuesday 23 July 2013 10:47:03 Peter Todd wrote:\n> On Tue, Jul 23, 2013 at 10:30:13AM +0100, Andy Parkins wrote:\n> > One additional URL makes this pretty much perfect:\n> >   GET /rest/block-with-tx/TX-HASH\n> > \n> > Construction of the transaction-hash-to-block database is something the\n> > full client's have to do anyway, so this query is no harder than the\n> > others for them to supply; but suddenly makes it possible for an SPV\n> > client to trace the providence of any transaction without needing to\n> > maintain the entire chain.\n\n> The REST API has nothing to do with SPV clients; it's similar to the RPC\n> interface and won't be exposed to the network as a whole.\n\nYes; I know that.  I'm saying that it would make it easier for SPV (and other \nlightweight clients) for that matter.\n\n> Increasing the resource usage by SPV clients on full nodes is undesirable;\n\nI don't think that's thinking big enough.  What I imagine is that making it \neasier and easier to store a partial blockchain would result in lower demand \non full nodes.\n\nI might run a client that has only fetched blocks that contain transactions \nneeded to verify my balances, right back to the genesis block.  That will be \nsome small subset of the block chain and will take me very little resource to \nmaintain.  I join the network and am my client is willing to verify based on \ninformation I have, or supply (by REST or bitcoin protocol) blocks.  Imagine \nthen that everyone with a wallet were doing this.  The blockchain would be \ndistributed massively.  Obviously the miners would still be keeping the entire \nchain, but we'd have a lot more nodes in the network, each contributing a \nlittle bit and so reducing the load on the full nodes.\n\n> In any case UTXO data currently requires you to have full trust in\n> whomever is providing you with it, and that situation will continue\n> until UTXO commitments are implemented - if they are implemented.\n\nAlmost; because you can go and ask someone else the same question, it's pretty \neasy to check if you're being lied to.  Also, it's far easier to maintain a \nheaders-only block chain.  When you fetch your relevant block subset, you can \neasily see that they are real blocks in your headers-only blockchain; and so \nit's pretty much impossible to lie to \"give me the block containing \ntransaction X\".\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-23T10:17:28",
                "message_text_only": "On Tue, Jul 23, 2013 at 11:00:24AM +0100, Andy Parkins wrote:\n> > Increasing the resource usage by SPV clients on full nodes is undesirable;\n> \n> I don't think that's thinking big enough.  What I imagine is that making it \n> easier and easier to store a partial blockchain would result in lower demand \n> on full nodes.\n\nRead my proposal for \"Partial UTXO\" mode:\nhttp://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg02511.html\n\n> I might run a client that has only fetched blocks that contain transactions \n> needed to verify my balances, right back to the genesis block.  That will be \n> some small subset of the block chain and will take me very little resource to \n> maintain.  I join the network and am my client is willing to verify based on \n> information I have, or supply (by REST or bitcoin protocol) blocks.  Imagine \n> then that everyone with a wallet were doing this.  The blockchain would be \n> distributed massively.  Obviously the miners would still be keeping the entire \n> chain, but we'd have a lot more nodes in the network, each contributing a \n> little bit and so reducing the load on the full nodes.\n\nActually the really scary thing about partial UTXO mode is miners can\nget away without keeping the entire chain provided they don't (often)\ntry to mine transactions spending UTXO's that they haven't verified\nthemselves.\n\nThey can get away with accepting blocks without checking that the UTXO's\nexist, at least until enough miners do so that someone creates an\ninvalid block and the majority of hashing power never notices. Remember\nthat only with a complete UTXO set can you know that a UTXO *doesn't*\nexist.\n\nWe're going to have to force miners to prove they possess the full UTXO\nset in the future or the security of Bitcoin will be seriously\nthreatened.\n\n> > In any case UTXO data currently requires you to have full trust in\n> > whomever is providing you with it, and that situation will continue\n> > until UTXO commitments are implemented - if they are implemented.\n> \n> Almost; because you can go and ask someone else the same question, it's pretty \n\nHow do you know they actually are someone else?\n\n> easy to check if you're being lied to.  Also, it's far easier to maintain a \n> headers-only block chain.  When you fetch your relevant block subset, you can \n> easily see that they are real blocks in your headers-only blockchain; and so \n> it's pretty much impossible to lie to \"give me the block containing \n> transaction X\".\n\nDo you think you have SPV or full security in that situation?\n\nDo you know the difference?\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000070f3d118303a611e1f44ea6482a3b59a16056e69af088b1ffa\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130723/c441d9c8/attachment.sig>"
            },
            {
                "author": "Andy Parkins",
                "date": "2013-07-23T11:45:44",
                "message_text_only": "On Tuesday 23 July 2013 11:17:28 Peter Todd wrote:\n> On Tue, Jul 23, 2013 at 11:00:24AM +0100, Andy Parkins wrote:\n> > > Increasing the resource usage by SPV clients on full nodes is\n> > > undesirable;\n> > \n> > I don't think that's thinking big enough.  What I imagine is that making\n> > it easier and easier to store a partial blockchain would result in lower\n> > demand on full nodes.\n> \n> Read my proposal for \"Partial UTXO\" mode:\n> http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg02\n> 511.html\n\nVery interesting.  I love the idea of the UTXO set being tied to a block.\n\n> > I might run a client that has only fetched blocks that contain\n> > transactions needed to verify my balances, right back to the genesis\n> > block.  That will be some small subset of the block chain and will take\n> > me very little resource to maintain.  I join the network and am my\n> > client is willing to verify based on information I have, or supply (by\n> > REST or bitcoin protocol) blocks.  Imagine then that everyone with a\n> > wallet were doing this.  The blockchain would be distributed massively. \n> > Obviously the miners would still be keeping the entire chain, but we'd\n> > have a lot more nodes in the network, each contributing a little bit and\n> > so reducing the load on the full nodes.\n> \n> Actually the really scary thing about partial UTXO mode is miners can\n> get away without keeping the entire chain provided they don't (often)\n> try to mine transactions spending UTXO's that they haven't verified\n> themselves.\n\nYou're right.  That is scary.\n\n> > > In any case UTXO data currently requires you to have full trust in\n> > > whomever is providing you with it, and that situation will continue\n> > > until UTXO commitments are implemented - if they are implemented.\n> > \n> > Almost; because you can go and ask someone else the same question, it's\n> > pretty\n> \n> How do you know they actually are someone else?\n\nYou don't.  You can't invalidate the lie if all you have access to is lies.  \nBut if you have access to just one honest node; that will reveal the liars.  \nI'm not claiming that headers-only nodes can ever be made as secure as a full \nnode.  Just _more_ secure than they are now; and potentially able to act as \none of those honest nodes.\n\n> > easy to check if you're being lied to.  Also, it's far easier to maintain\n> > a headers-only block chain.  When you fetch your relevant block subset,\n> > you can easily see that they are real blocks in your headers-only\n> > blockchain; and so it's pretty much impossible to lie to \"give me the\n> > block containing transaction X\".\n> \n> Do you think you have SPV or full security in that situation?\n> Do you know the difference?\n\nThere is absolutely no need to get condescendingly shirty.  I thought this was \na friendly list; and we were having a discussion.  If you don't want to \nrespond to posts -- don't.  I also didn't realise I had to pass an exam before \nI was allowed to speak.\n\nYes: I know the difference between SPV and full security.  SPV is headers only \nand so has no way to verify that the transaction outputs references as inputs \nto any new as-yet-unverified transaction are valid.  Instead it relies on \nhaving some way of proving it's in the chain; and then looking for the number \nof blocks built on top of it as \"verification\".  \"Full security\" (which is \nitself a very poor name), is obviously just checking that every output \nreferenced in the inputs is unspent; that necessarily requires full blocks.\n\nThe difference in security being that in SPV there is no way to know if the \nreferenced Unspent TransaXtion Output really is unspent -- it might have been \nspent elsewhere then referenced again in this new transaction.\n\nMy suggestion was that we want to be able to fetch a block by transaction; and \nthat simple nodes can all, in aggregate offer contribution to the network \nrather than just being parasitical on the full nodes.   When I ask for a block \nthat contains a transaction, and I do that repeatedly, I have part of the \nblock chain.  If lots of simple nodes are doing that, then the whole chain \nshould be available if there are enough of them.  They would then gain the \nability to do transaction-forwarding in some cases.  This is only possible if \na few extra facilities are added to the protocol.  One of which is the new \nfeature I suggested: block-given-transaction.  It's not enough on its own, but \nif you also add in the ability for a node to tell another about the output \ntransactions (basically, what block spends it), _then_ the simple nodes are \nable to become much more secure -- not 100% of course, they're still not full \nnodes, because they have no way of knowing if they are being lied to when they \nare told (this transaction is unspent), but all it takes is one honest node to \npoint them at the truth, and the lie is then exposed.\n\nThat facility is just a drain on full nodes for the most part; except if you \nstart encouraging it whole-sale.  The simple node would keep cache both the \nincoming and outgoing transactions (or rather the blocks that contain them) \nfor addresses to which they are paying attention.  That gives them a cache \nthat contains more than just their minimal set; and then they are able to do \njust a little bit of verifying on their own.  With enough nodes of this sort, \nthe verification load is reduced.\n\nPerhaps all that effort is not worth it for the tiny reduction.  Perhaps it's \nnot true that that contribution of verification adds nothing.  I can live with \nthose objections.  But \"do I know the difference\" as a reposte?  Not so much.\n\nAnyway; going by your post on partial UTXO's; you're well ahead of the game, \nand I'm not suggesting anything that hasn't already been thought of, and \nthought of better.  I'm not sure why you took umbridge at my idea, when it \nseems like I'm just a few steps behind what you've already thought of.  Not \neverything is an attack you know?\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-07-23T10:19:58",
                "message_text_only": "On Tue, Jul 23, 2013 at 12:00 PM, Andy Parkins <andyparkins at gmail.com> wrote:\n>> The REST API has nothing to do with SPV clients; it's similar to the RPC\n>> interface and won't be exposed to the network as a whole.\n>\n> Yes; I know that.  I'm saying that it would make it easier for SPV (and other\n> lightweight clients) for that matter.\n\nIn what way?\n\n>> Increasing the resource usage by SPV clients on full nodes is undesirable;\n>\n> I don't think that's thinking big enough.  What I imagine is that making it\n> easier and easier to store a partial blockchain would result in lower demand\n> on full nodes.\n\nA partial blockchain is quite useless, as you can't build an UTXO set from it.\nIf you're talking simply about the storage requirements for maintaining history,\nperhaps, but why rely on SPV nodes for this? Right now, those don't store any\nblocks at all, and there is no reason why they should.\n\nThe only requirement is that old blocks remain available for new full\nnodes to be\nable to bootstrap. It's certainly not required that everyone keeps\nevery block ever\ncreated. That's how the software currently works, but as soon as we get to a few\nprotocol changes that would allow new full nodes to find specific\npeers with the data\nthey need, we can have fully-verifying yet (partially) pruning nodes.\nI think that's a\nmuch better idea than conflating \"maintaining a wallet\" with\n\"maintaining a subset\nof historical block data\".\n\n\n> Obviously the miners would still be keeping the entire\n> chain, but we'd have a lot more nodes in the network, each contributing a\n> little bit and so reducing the load on the full nodes.\n\nI disagree strongly here. The rules of the network are enforced by\nfull nodes, not by\nminers - they are just trying to satisfy the rules demaned by the network.\n\nAnd as far as I know, there is no way to do some \"partial validation\"\nusing just the blocks\nyou care about (and remember, SPV nodes currently have none at all).\nOne interesting\npossibility here is fraud proofs, where the network can relay proofs\nthat certain blocks or\ntransactions are violating certain network rules. In this case, even\nSPV nodes can just\ncommunicate with eachother and get some \"herd immunity\". But storing some blocks\ndoesn't matter here - it is all about whether you can maintain the\nUTXO set or not.\n\n>\n>> In any case UTXO data currently requires you to have full trust in\n>> whomever is providing you with it, and that situation will continue\n>> until UTXO commitments are implemented - if they are implemented.\n>\n> Almost; because you can go and ask someone else the same question, it's pretty\n> easy to check if you're being lied to.  Also, it's far easier to maintain a\n> headers-only block chain.  When you fetch your relevant block subset, you can\n> easily see that they are real blocks in your headers-only blockchain; and so\n> it's pretty much impossible to lie to \"give me the block containing\n> transaction X\".\n\nThat's assuming there is no powerful enough attacker that can benefit from doing\na sybil attack on you. For SPV nodes currently, that risk is limited\nto an attacker\nthat can spend enough on faking a chain with valid proof-of-work, to make you\naccept a transaction that will be reversed.\n\nIf you go let SPV nodes rely on unauthenticated UTXO set data, there is no such\nlimitation, and they can let you believe *anything*. There are some safeguards,\nlike combining it with merkle paths for all outputs that credit you (which again\nrequires a more expensive index on the other side), but you can't ever guarantee\nthat a particular outputs isn't spent yet.\n\n-- \nPieter"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2013-07-23T10:29:34",
                "message_text_only": "On 07/23/2013 11:47 AM, Peter Todd wrote:\n\n>> Is it planned to expose the UXTO set of a given address? That would be\n>> useful for SPV wallets to be able to swipe a previously unknown private\n>> key (e.g. paper wallet).\n> \n> The REST API has nothing to do with SPV clients; it's similar to the RPC\n> interface and won't be exposed to the network as a whole.\n> \n> Increasing the resource usage by SPV clients on full nodes is undesirable; we\n> have a lot of work to do regarding DoS attacks.\n\nYes, I understand that. For this reason, I would vote for adding the\nusual HTTP authentication/SSL stuff to the REST API. That way, SPV users\ncan decide to run their own instance of the API (providing the needed\nresources themselves).\n\nOr, a trusted party can set up a server. For example, I would be willing\nto set it up for users of Bitcoin Wallet. I don't expect shitloads of\npaper wallets sweeps for the forseeable future."
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-07-23T10:36:46",
                "message_text_only": "On Tue, Jul 23, 2013 at 12:29 PM, Andreas Schildbach\n<andreas at schildbach.de> wrote:\n> Yes, I understand that. For this reason, I would vote for adding the\n> usual HTTP authentication/SSL stuff to the REST API. That way, SPV users\n> can decide to run their own instance of the API (providing the needed\n> resources themselves).\n>\n> Or, a trusted party can set up a server. For example, I would be willing\n> to set it up for users of Bitcoin Wallet. I don't expect shitloads of\n> paper wallets sweeps for the forseeable future.\n\nI don't object to using a trusted server for this if people want that,\nbut I don't think the reference client should encourage this.\n\nApart from that, exposing this HTTP-based interface publicly has its\nown problems, like security risks and potential DoS risks. If\nanything, we should be reducing the attack surface rather than\nincrease it. IMHO, the only thing that should be exposed in the P2P\nprotocol, which is inevitable, and already has some DoS protections.\n\nI like this HTTP interface, but it should really only be used for\ntrusted local applications and debugging.\n\n-- \nPieter"
            },
            {
                "author": "Michael Hendricks",
                "date": "2013-07-23T15:48:22",
                "message_text_only": "On Tue, Jul 23, 2013 at 4:36 AM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> Apart from that, exposing this HTTP-based interface publicly has its\n> own problems, like security risks and potential DoS risks. If\n> anything, we should be reducing the attack surface rather than\n> increase it. IMHO, the only thing that should be exposed in the P2P\n> protocol, which is inevitable, and already has some DoS protections.\n>\n> I like this HTTP interface, but it should really only be used for\n> trusted local applications and debugging.\n>\n\nWe already have a good private HTTP interface.  Most benefits of this REST\ninterface come from exposing it publicly.  As always, the challenge is\nbalancing costs and benefits.  I'm not confident that either can be known\nwith certainty until a well-written prototype is running in the wild.  As\nsome nodes expose this interface, we'll gain concrete experience from which\nnode operators can make informed security trade offs.\n\n-- \nMichael\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130723/8d1b3f10/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-07-23T19:36:55",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n\nOn 7/23/13 3:29 AM, Andreas Schildbach wrote:\n>\n> Yes, I understand that. For this reason, I would vote for adding the\n> usual HTTP authentication/SSL stuff to the REST API. That way, SPV users\n> can decide to run their own instance of the API (providing the needed\n> resources themselves).\n>\n> Or, a trusted party can set up a server. For example, I would be willing\n> to set it up for users of Bitcoin Wallet. I don't expect shitloads of\n> paper wallets sweeps for the forseeable future.\n>\n>\nAnyone who wants HTTP authentication or TLS can wrap it with nginx, or\nsomething similar. In the process they could put appropriate\nrestrictions in place on incoming requests, and the onus would be on\nthem, not us to keep it secure.\n\nMark\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.19 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJR7ttWAAoJEAdzVfsmodw4UmIP/36lK2TDc7mLTT8rbflJhl3v\nTL4CFKhXj6OuzG7tyino3Djs4EQnyk+CbpfOmJ8kYr29GPaZttuDJhYXtJqQBQCi\nDPq79ktudHnVMLPirEs7dUrLo+TAqhYX+8Sj+eTlW+p6YZg3JbkOAIPJG7597OK4\nzzU8Oxr0XKJFfGscKfkPThxJboNqzJYGl3otHUMXM4HsbIRYmrx4QSr8y7dsVgTd\nYZnD4bJO+eY4ZPzCcFdkPD/8bXQyKC5nPOH8/79lARNLESwB4OW79uf9q86EuH2O\njZQ1qwpRNHblrNWS1/U2E4+7hEidvgZBwQhj+HbWgKiPWh4Df1lEXq6bLQQwdn6/\nb+jfiwg7xpb7eB2M4gPZ0uF/1TIcGJN3+LWEULFNTT/vsjyD/UU63ahZ1kVv7X0m\nW1NrbKjXxDbip+x3N7HLIu3zqAAaa0ele7OysyFCL6ZlwwafwJiEZZgHn2Iw7I1L\nS7lYBbFoLfXlOMVXNaKHPEV5gQEveMROJVBtnWkqShPQM0N/+Z+TXZes37up0GVo\nd7ptPfNbUNDTFc8Jj3+5rIyy3dUvSyMJlHZhsLmtCUnbQ867ZOgeUS52a8XQ+nJY\n8IsShLfLk6fRWmHrwo9lzZQ/TbbUNyoUje0Ns6iL7G3IZwDqJH3kAGb/bkj/piDu\ntPNcN8bkYeNobTFIH+o4\n=jV80\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "HTTP REST API for bitcoind",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Michael Gronager",
                "Andreas Schildbach",
                "Pieter Wuille",
                "Peter Todd",
                "Andy Parkins",
                "Mark Friedenbach",
                "Michael Hendricks"
            ],
            "messages_count": 23,
            "total_messages_chars_count": 41097
        }
    },
    {
        "title": "[Bitcoin-development] Distributing low POW headers",
        "thread_messages": [
            {
                "author": "Tier Nolan",
                "date": "2013-07-23T11:27:03",
                "message_text_only": "I was thinking about a change to the rules for distinguishing between forks\nand maybe a BIP..\n\n*Summary*\n\n- Low POW headers should be broadcast by the network\n\nIf a header has more than 1/64 of the POW of a block, it should be\nbroadcast.  This provides information on which fork is getting most of the\nhashing power.\n\n- Miners should use the header information to decide on longest chain\n\nThe fork selection rule for miners should be biased towards staying on the\nfork that has the most hashing power.\n\nThis means that they might keep hashing on a fork that is 1-2 blocks\nshorter.\n\nIf most miners follow the rule, then it is the best strategy for other\nminers to also follow this rule.\n\n- Advantages\n\nThis lowers the probability of natural and malicious reversals.\n\n*Distributing low POW headers*\n\nFirst block header messages that have more than 1/64 of the standard POW\nrequirements would be forwarded.\n\nThis means the client needs to maintain a short term view of the entire\nheader tree.\n\nif (header extends header tree) {\n  if (header meets full POW) {\n    add to header tree;\n    forward to peers;\n    check if any blocks in storage now extend the header tree\n  } else {\n    if (header meets POW / 64) {\n      forward to peers;\n    }\n} else {\n  if (header meets POW) {\n    add to orphan header storage\n  }\n}\n\nThe storage could be limited and headers could be discarded after a while.\n\nThis has the extra advantage that it informs clients of forks that are\nreceiving hashing power.\n\nThis could be linked to a protocol version to prevent disconnects due to\ninvalid header messages.\n\n*Determining the longest chain*\n\nEach link would get extra credit for headers received.\n\nAssume there are 2 forks starting at block A as the fork point.\n\nA(63) <- B(72) <- C(37) <- D(58)\n\nand\n\nA(63) <- B'(6) <- C'(9) <- D'(4) <- E(7) <- F(6)\n\nThe numbers in brackets are the number of low POW headers received that\nhave those blocks as parent.\n\nThe new rule is that the POW for a block is equal to\n\nPOW * (1 + (headers / 16))\n\nOnly headers within <some threshold> of the end of the (shorter) chain\ncount.  However, in most cases, that doesn't matter since the fork point\nwill act as the start point.  As long as miners keep headers for 30-40\nblocks, they will likely have all headers back to any reasonable fork point.\n\nThis means that the top fork is considered longer, since it has much more\nheaders, even though it has 2 less blocks.\n\nIf 75% of the miners follow this rule, then the top fork will eventually\ncatch up and win, so it is in the interests of the other 25% to follow the\nrule too.\n\nEven if there isn't complete agreement on headers received, the fork that\nis getting the most hashing will naturally gain most of the headers, so\nties will be broken quickly.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130723/8f153275/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-24T09:42:55",
                "message_text_only": "On Tue, Jul 23, 2013 at 12:27:03PM +0100, Tier Nolan wrote:\n> I was thinking about a change to the rules for distinguishing between forks\n> and maybe a BIP..\n\nPlease provide equations and data justifying the 'magic constants' in\nthis proposal.\n\nCurrently we do not relay blocks to peers if they conflict with blocks\nin the best known chain. What changes exactly are you proposing to that\nbehavior?\n\n> *Summary*\n> \n> - Low POW headers should be broadcast by the network\n> \n> If a header has more than 1/64 of the POW of a block, it should be\n> broadcast.  This provides information on which fork is getting most of the\n> hashing power.\n> \n> - Miners should use the header information to decide on longest chain\n> \n> The fork selection rule for miners should be biased towards staying on the\n> fork that has the most hashing power.\n> \n> This means that they might keep hashing on a fork that is 1-2 blocks\n> shorter.\n> \n> If most miners follow the rule, then it is the best strategy for other\n> miners to also follow this rule.\n> \n> - Advantages\n> \n> This lowers the probability of natural and malicious reversals.\n> \n> *Distributing low POW headers*\n> \n> First block header messages that have more than 1/64 of the standard POW\n> requirements would be forwarded.\n> \n> This means the client needs to maintain a short term view of the entire\n> header tree.\n> \n> if (header extends header tree) {\n>   if (header meets full POW) {\n>     add to header tree;\n>     forward to peers;\n>     check if any blocks in storage now extend the header tree\n>   } else {\n>     if (header meets POW / 64) {\n>       forward to peers;\n>     }\n> } else {\n>   if (header meets POW) {\n>     add to orphan header storage\n>   }\n> }\n> \n> The storage could be limited and headers could be discarded after a while.\n> \n> This has the extra advantage that it informs clients of forks that are\n> receiving hashing power.\n> \n> This could be linked to a protocol version to prevent disconnects due to\n> invalid header messages.\n> \n> *Determining the longest chain*\n> \n> Each link would get extra credit for headers received.\n> \n> Assume there are 2 forks starting at block A as the fork point.\n> \n> A(63) <- B(72) <- C(37) <- D(58)\n> \n> and\n> \n> A(63) <- B'(6) <- C'(9) <- D'(4) <- E(7) <- F(6)\n> \n> The numbers in brackets are the number of low POW headers received that\n> have those blocks as parent.\n> \n> The new rule is that the POW for a block is equal to\n> \n> POW * (1 + (headers / 16))\n> \n> Only headers within <some threshold> of the end of the (shorter) chain\n> count.  However, in most cases, that doesn't matter since the fork point\n> will act as the start point.  As long as miners keep headers for 30-40\n> blocks, they will likely have all headers back to any reasonable fork point.\n> \n> This means that the top fork is considered longer, since it has much more\n> headers, even though it has 2 less blocks.\n> \n> If 75% of the miners follow this rule, then the top fork will eventually\n> catch up and win, so it is in the interests of the other 25% to follow the\n> rule too.\n> \n> Even if there isn't complete agreement on headers received, the fork that\n> is getting the most hashing will naturally gain most of the headers, so\n> ties will be broken quickly.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000001e1c3393788031c4e427b67cfd1b5e90a3b0de4fff094b2894\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130724/ac3bedaa/attachment.sig>"
            },
            {
                "author": "Tier Nolan",
                "date": "2013-07-24T11:55:33",
                "message_text_only": "On Wed, Jul 24, 2013 at 10:42 AM, Peter Todd <pete at petertodd.org> wrote:\n\n> Please provide equations and data justifying the 'magic constants' in\n> this proposal.\n>\n\nThe are a range of workable values.  Ideally, there would first need to be\nagreement on the general principle.\n\nDistributing headers with 1/64 of the standard POW means that a header\nwould be broadcast approximately once every 9 seconds (assuming a 10 minute\nblock time).  This was picked because sending 80 byte headers every 9\nseconds shouldn't represent much load on the network.\n\nThe second magic number is how much credit to give for mini-headers.\nSetting it at 1/16 means that the headers will be worth around 4 times as\nmuch as a block (since there would be around 63 low POW headers for each\nfull POW one).\n\nThis creates an incentive for miners to take headers into account.  If all\nthe headers were worth less than a full block, then a fork which was losing\nwould suddenly be winning if a block is found.  A fork will only become the\nmain chain due to a new block, if it is within 16 mini-confirms.\n\nMiners don't have to mine against the absolute best fork, but they do need\nto make sure they stay within 16 of the best one (so if they find a block,\nthat block would be considered part of the main chain).  Some hysteresis\nmight be helpful.  The rule could be to only switch unless the current fork\nis losing by at least 4 mini-confirms.\n\nIn most cases, this won't be a problem, since orphans don't happen that\noften anyway.\n\nSince it isn't a chain, this doesn't give the full benefits of a 9 second\nblock, but it should bring things to consensus faster.  6 full confirms\nwould be much more secure against random and hostile reversals.\n\nIt doesn't have the risks of 9 second blocks in causing network collapse,\nsince it isn't a chain, the headers are short, and there is no\nconfirmations of the required (other than checking the hash).\n\nEach \"mini\" confirms adds to the strength of leaf blocks of the tree.  If\nthere is a tie, and 20% of the network is mining one block and 80% is\nmining the other, the mining power of the network will be split until the\nnext block arrives.\n\nWith mini confirms, the entire network is aware of the 2 blocks (since the\nheaders would be forwarded) and the mini-confirms would show which one has\nmajority hashing power.\n\nThe least risk option would be to make them purely advisory.  The proposal\ntakes it further than that.\n\nThe proposal means that if the network is split 80/20, then miners should\nstick with the 80% fork, even if the 20% fork wins the race for the next\nblock.\n\nWinning a few rounds is easier than wining many rounds worth of\nmini-confirms.\n\nThe key is that as long as the honest miners stay on the main chain, they\nwill eventually overwhelm any rewrite attack with less than 50% of the\nmining power.  This is a system to agree on what is the main chain in the\nface of a re-write attack.\n\n\n>\n> Currently we do not relay blocks to peers if they conflict with blocks\n> in the best known chain. What changes exactly are you proposing to that\n> behavior?\n>\n\nThe (sub) proposal is that headers would still be broadcast.  The blocks\nwould not be forwarded.\n\nIf a header extends the header tree, meets full POW and is \"near\" the end\nof the chain, then it is broadcast.  This means that all nodes will have\nthe entire header tree, including orphans.\n\nThe full blocks would only be sent if they extend the main chain.\n\nSecond, if a header builds on a header that is in the header tree, then it\nis broadcast, even if it doesn't meet full POW (only 1/64 required).  This\ngives information on which fork is getting the most power.\n\nIt gives information about potential \"consensus loss\" forks, where a\nsignificant number of miners are following an alternative chain.\n\nIn fact, this is probably worth doing as an initial step.\n\nA warning could be displayed on the client if a fork is getting more than\n15% of the hashing power.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130724/bbae3ccf/attachment.html>"
            },
            {
                "author": "John Dillon",
                "date": "2013-07-28T18:42:26",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn Wed, Jul 24, 2013 at 11:55 AM, Tier Nolan <tier.nolan at gmail.com> wrote:\n> Distributing headers with 1/64 of the standard POW means that a header would\n> be broadcast approximately once every 9 seconds (assuming a 10 minute block\n> time).  This was picked because sending 80 byte headers every 9 seconds\n> shouldn't represent much load on the network.\n\nAs Peter said, \"much\" should be quantified.\n\nRemember that there is a statistical distribution here, what is the probability\nof how many seconds per headers?\n\n> This creates an incentive for miners to take headers into account.  If all\n> the headers were worth less than a full block, then a fork which was losing\n> would suddenly be winning if a block is found.  A fork will only become the\n> main chain due to a new block, if it is within 16 mini-confirms.\n\nSounds like you are changing economics and requiring miners to have even better\nnetwork connections. This is not a thing to do lightly and it probably a bad\nidea.\n\n> Second, if a header builds on a header that is in the header tree, then it\n> is broadcast, even if it doesn't meet full POW (only 1/64 required).  This\n> gives information on which fork is getting the most power.\n>\n> It gives information about potential \"consensus loss\" forks, where a\n> significant number of miners are following an alternative chain.\n>\n> In fact, this is probably worth doing as an initial step.\n\nI understand Pieter Wuille is working on letting Bitcoin propagate and make use\nof pure block headers, a step towards SPV and partial UTXO mode.\n\nOrphan measurement would be very useful for a lot of reasons, how about you\nthink about that first? It wouldn't have the potential data rate issues either\nand should be a very simple change. Just set some threshold relative to the\nheight of the best block where you will not further propagate and orphan\nblock(header) and prior to that limit do so freely. I believe the change would\nbe 100% compatible with the P2P protocol as it is based on inventories.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQEcBAEBCAAGBQJR9WXdAAoJEEWCsU4mNhiPBUYIALgg3ylA5mkciT3W/kb+qXCp\nspYlPwAU/HVUrd/p6Ra6xAOOa224BE018FHRx7cJ31AQdVPsKhC1XiQCeYMv14Cj\n5LstO2VTzxLovfs1lTVnekt+xVo6EHP47Qhmhdfo1AQWHS2njIp2lT9gAlNgMYoI\nTwu0FLfJFwg14HlueLhTNvGo3TeVpGhTV3HYTbjWGBuPeroaaPCKKQOy/jmA9mnZ\n1x4MjQZ+AkGA3+vrinyRZ1FQsp1pOUZMZx5UFYDOOPS3TysxttiHF/Vkdmy9dNVf\n5zbXrEDImlariRnyxCf6sn4Fpu9H9bt6yttCez6NHqAoZCwciXyo+UrZjFawSVg=\n=8gci\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Tier Nolan",
                "date": "2013-07-28T20:07:34",
                "message_text_only": "On Sun, Jul 28, 2013 at 7:42 PM, John Dillon\n<john.dillon892 at googlemail.com>wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n> On Wed, Jul 24, 2013 at 11:55 AM, Tier Nolan <tier.nolan at gmail.com> wrote:\n> > Distributing headers with 1/64 of the standard POW means that a header\n> would\n> > be broadcast approximately once every 9 seconds (assuming a 10 minute\n> block\n> > time).  This was picked because sending 80 byte headers every 9 seconds\n> > shouldn't represent much load on the network.\n>\n> As Peter said, \"much\" should be quantified.\n>\n\nIt has the same statistic properties as normal blocks just 64 times faster.\n\nEven if there is a new block 30 seconds after the previous one, that\ndoesn't cause a burst of 64 low POW block headers in the 30 second window.\nThey are all statistically independent hashing attempts.\n\n\n> Sounds like you are changing economics and requiring miners to have even\n> better\n> network connections. This is not a thing to do lightly and it probably a\n> bad\n> idea.\n>\n\nNo, it just breaks ties.  In most cases there would be only 1 contender\nblock, so all miners are equal.\n\nIf 10% of blocks were ties/orphans, then only 1% of blocks would be a 3-way\ntie.  That probably overestimates the orphan rate.\n\nThis means the miner has to download 2 blocks 10% of the time and 3 blocks\n1% of the time.\n\nHowever, even then, half the network wouldn't have to download the 2nd\nblock of the tie, since they happened to get the winner first.  This means\n5% extra bandwidth on average.\n\n16 low POW headers at 9 seconds per header is more than 2 minutes for a\nminer to switch to the other contender.\n\nA miner would only lose out if he doesn't notice that block he is mining\nagainst is not getting built on by anyone else.\n\nHe needs to download both tied blocks so that he can switch, but he has 2\nminutes to actually switch.\n\nI understand Pieter Wuille is working on letting Bitcoin propagate and make\n> use\n> of pure block headers, a step towards SPV and partial UTXO mode.\n>\n\nThat would need to happen before low POW ones are broadcast.  There is a\nbasic set of rules in the first post.\n\nAt the moment, the client only provides headers when asked, but never\nbroadcasts them.\n\n\n> Orphan measurement would be very useful for a lot of reasons, how about you\n> think about that first?\n\n\nI think distributing the low POW headers on an advisory basis a reasonable\nfirst step.  However, just broadcasting the headers is a zeroth step.\n\nMiners would probably break ties towards the block that seems to be getting\nthe most hashing anyway.\n\nI think for orphan rate, the best is to have a system to link to orphans.\nThis would add the POW of the orphan to the main chain's total.\n\nUnfortunately adding fields to the header is hard.  It could be done as a\ncoinbase extra-nonce thing.  A better option would be if the merkle tree\ncould include non-transactions.\n\nThe merkle root could be replaced by hash(auxiliary header).  This has the\nadvantage of not impacting ASIC miners.\n\nBroadcasting all headers would at least allow clients to count orphans,\neven if they aren't integrated into the block chain.\n\nIt wouldn't have the potential data rate issues either\n> and should be a very simple change.\n\n\nI don't think the data rate is really that high.  It would be 80 bytes\nevery 9 seconds, or 9 bytes per second.\n\nBlocks are 500kB every 10 minutes, or 853 bytes per second.\n\n\n> Just set some threshold relative to the\n> height of the best block where you will not further propagate and orphan\n> block(header) and prior to that limit do so freely. I believe the change\n> would\n> be 100% compatible with the P2P protocol as it is based on inventories.\n>\n\nRight absolutely.  Headers of blocks that add to the block tree within\nrecent history should be forwarded.\n\nThe inv system would need to be tweaked, since it can only say block and\ntransaction.\n\nA block header field would allow the node to say that it only has the\nheader.  Alternatively, it would reply with a header message to the\ngetblocks message.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130728/ab4d2f59/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Distributing low POW headers",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "John Dillon",
                "Tier Nolan",
                "Peter Todd"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 17418
        }
    },
    {
        "title": "[Bitcoin-development] Linux packaging letter",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2013-07-23T20:01:55",
                "message_text_only": "Hi,\n\nSome of us have put together an open letter to the Linux packaging\ncommunity, outlining why Bitcoin is different to other programs and asking\nthem to not patch or modify the upstream sources.\n\nPlease consider signing it if you agree (I think the wording by now is\nfine, so don't edit the contents - use the comment feature if you want to\nthough).\n\nhttps://docs.google.com/document/d/1naenR6N6fMWSpHM0f4jpQhYBEkCEQDbLBs8AXC19Y-o/edit#heading=h.i7tz3gqh65mi\n\nThe trigger for this is the discovery that Debian bitcoind's got split out\nof the consensus some time in April, for reasons that nobody yet figured\nout but is presumably related to a patch (eg it uses system leveldb).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130723/9d4b2f2a/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-07-23T20:14:58",
                "message_text_only": "On Tue, Jul 23, 2013 at 1:01 PM, Mike Hearn <mike at plan99.net> wrote:\n> Hi,\n>\n> Some of us have put together an open letter to the Linux packaging\n> community, outlining why Bitcoin is different to other programs and asking\n> them to not patch or modify the upstream sources.\n>\n> Please consider signing it if you agree (I think the wording by now is fine,\n> so don't edit the contents - use the comment feature if you want to though).\n>\n> https://docs.google.com/document/d/1naenR6N6fMWSpHM0f4jpQhYBEkCEQDbLBs8AXC19Y-o/edit#heading=h.i7tz3gqh65mi\n\nAh, this is not entirely in sync with the last (mostly minor)\ncopyedits that had been signed off by Gavin, Pieter, Jgarzik, and I...\nbut that appears to be a smaller issue than the fact that the whole\nthing is now being rewritten by \"anonymous beaver\" and friends."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-23T20:32:06",
                "message_text_only": "Yes. Someone decided to actually delete the people who had signed so far\nand replace it with a request for PGP signing - no. Not everyone even uses\nPGP, which is overkill for this anyway.\n\nI'm going to roll the document back and lock it. Sorry, I had hoped people\nwould respect my request to not fiddle with the content, which they did not\ndo.\n\nIf you'd like to have your name on it, let me know or post here and I'll\nadd it.\n\n\nOn Tue, Jul 23, 2013 at 10:14 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n\n> On Tue, Jul 23, 2013 at 1:01 PM, Mike Hearn <mike at plan99.net> wrote:\n> > Hi,\n> >\n> > Some of us have put together an open letter to the Linux packaging\n> > community, outlining why Bitcoin is different to other programs and\n> asking\n> > them to not patch or modify the upstream sources.\n> >\n> > Please consider signing it if you agree (I think the wording by now is\n> fine,\n> > so don't edit the contents - use the comment feature if you want to\n> though).\n> >\n> >\n> https://docs.google.com/document/d/1naenR6N6fMWSpHM0f4jpQhYBEkCEQDbLBs8AXC19Y-o/edit#heading=h.i7tz3gqh65mi\n>\n> Ah, this is not entirely in sync with the last (mostly minor)\n> copyedits that had been signed off by Gavin, Pieter, Jgarzik, and I...\n> but that appears to be a smaller issue than the fact that the whole\n> thing is now being rewritten by \"anonymous beaver\" and friends.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130723/97c9d5c8/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-07-23T20:50:28",
                "message_text_only": "On Tue, Jul 23, 2013 at 1:32 PM, Mike Hearn <mike at plan99.net> wrote:\n> Yes. Someone decided to actually delete the people who had signed so far and\n\nSome people/person went and actually started making substantive edits\nto the text.\nThe text it's rolled back to is missing the last copyedits from last night too.\n\nThe text that had been ACKed last night was a3e52973,  available at\nhttp://luke.dashjr.org/tmp/code/20130723-linux-distribution-packaging-and-bitcoin.md\n\nAs far as the PGP goes\u2014\n\nI think using the PGP is good: it's making use of the right tools,\navoids issues like we just had where people go changing the content\nafter names had been affixed,  shows solidarity with people building\nsecurity infrastructure that our ecosystem depends on.  If you only\nuse it occasionally then its easy for someone to strip it when it _is_\nneeded and disguise that just as regular non-use.  It's my general\nview that for people working in our domain basic competence and use of\nthese tools, even when they kinda stink, is a kind of civic hygiene.\n\nAt the same time it's not urgent. It's poorly used by people and will\nbe ignored by most but packagers are the most frequent users of it\nthat I've encountered.  Fortunately, it's harmless in any case.\n\nIf people are interested in offering PGP signatures of it:\n\nwget http://luke.dashjr.org/tmp/code/20130723-linux-distribution-packaging-and-bitcoin.md\ngpg --clearsign 20130723-linux-distribution-packaging-and-bitcoin.md\n\nand post the little signature asc. The result composes nicely:\nhttp://luke.dashjr.org/tmp/code/20130723-linux-distribution-packaging-and-bitcoin.md.asc"
            },
            {
                "author": "John Dillon",
                "date": "2013-07-28T18:21:44",
                "message_text_only": "My signature:\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nLinux distribution packaging and Bitcoin\n========================================\n2013-07-23\n\nThis note summarises the dangers inherent in the Linux distribution\npackaging model for Bitcoin, and forms a request from upstream\nmaintainers to not distribute Bitcoin node software as part of\ndistribution package repositories without understanding the special\nrequirements of Bitcoin.\n\nDistributors typically unbundle internal libraries and apply other\npatches for a variety of generally good reasons, including ensuring\nthat security-critical fixes can be applied once, rather than multiple\ntimes for many different packages. In most cases, the common\ndistribution packaging policy has many advantages.\n\nHowever, Bitcoin nodes are an unusual category of software: they\nimplement a complex group consensus in which every client verifies the\nbehaviour of every other exactly. Even an exceptionally subtle change -\nincluding apparently harmless bugfixes - can cause a failure to reach\nconsensus. A consensus failure of one client is a security risk to the\nuser of that client. A significant number of nodes failing to reach\nconsensus - as happened in March 2013 due to a change in database\nlibraries[1] - is a critical problem that threatens the functionality\nand security of the system for all users.\n\nFor this reason, it is _vital_ that as much of the network as possible\nuses _unmodified_ implementations that have been carefully audited and\ntested, including dependencies. For instance, if the included copy\nof LevelDB in bitcoind is replaced by a system-wide shared library,\n_any_ change to that shared library requires auditing and testing,\na requirement generally not met by standard distributor packaging\npractices.\n\nBecause distributed global consensus is a new area of computer science\nresearch, the undersigned request that distributors refrain from\npackaging Bitcoin node software (including bitcoind and Bitcoin-Qt)\nand direct users to the upstream-provided binaries instead _until they\nunderstand the unique testing procedures and other requirements to\nachieve consensus_. Beyond being globally consistent, upstream binaries\nare produced using a reproducible build system[2], ensuring that they\ncan be audited for backdoors.\n\n1. https://en.bitcoin.it/wiki/BIP_0050\n2. http://gitian.org/\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQEcBAEBCAAGBQJR9WC5AAoJEEWCsU4mNhiPg6UH/2oHzBWBPaQMhH/GCTHQEi5U\n7GSRfqwihIs/M2ROHLNq0HhgWR7mPAh5TTI6+tG95FCGCGNZq0seqw9wW4ZyGCoc\nVueY51q4hcn23405oLD/QGK2lDxxywWY8XtFYVPqAzXTq6zRzgpNJkjoRtOAUOP7\n3PrRkimYYyj0KrqFg+cEvZDT27dkeX+5PXM6Ua0o7h/TlhR2RJPhej5DI8cNLXgA\nf0t+mES4Apb6zLgnEYYlPp22FR9vuFcJO3z1akhVL4DLUMqr58NYHLVnH1FH0Jhn\nhVuld159QtCjQ5Qyn19cn86akTQJVi+ikCXqaKriCc2jBFX7TCI8WTDc6aSZpsQ=\n=oX5d\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Scott Howard",
                "date": "2013-07-23T22:02:28",
                "message_text_only": "On Tue, Jul 23, 2013 at 4:01 PM, Mike Hearn <mike at plan99.net> wrote:\n> Hi,\n>\n> Some of us have put together an open letter to the Linux packaging\n> community, outlining why Bitcoin is different to other programs and asking\n> them to not patch or modify the upstream sources.\n>\n> Please consider signing it if you agree (I think the wording by now is fine,\n> so don't edit the contents - use the comment feature if you want to though).\n>\n> https://docs.google.com/document/d/1naenR6N6fMWSpHM0f4jpQhYBEkCEQDbLBs8AXC19Y-o/edit#heading=h.i7tz3gqh65mi\n>\n> The trigger for this is the discovery that Debian bitcoind's got split out\n> of the consensus some time in April, for reasons that nobody yet figured out\n> but is presumably related to a patch (eg it uses system leveldb).\n\nHi Mike,\nDebian's bitcoin is maintained on an open and archived mailing list\nand git repo:\nDebian Bitcoin Packaging Team <pkg-bitcoin-devel at lists.alioth.debian.org>\n\nIf there is a problem or question, getting an answer should be really\neasy. It would be good to include them in the discussion there (I\nCC:ed the list). If the upstream developers have a consensus that\ndistribution packaging is not in the best interest of the project,\nthen I personally would defer to their judgement and request removal.\nI'm leaving this open for other opinions from the Debian side.\n\nThat said, let me summarize the arguments and see if we can figure out\na permanent solution:\n\n1) It appears that the consensus of upstream developers is that any\ndistributed binary should only be linked against libraries that the\nbitcoin developers have tested and audited since any compatibility bug\nis a risk to both the user and the network.\n\nResponse: Is there a way to \"certify\" the Debian libraries? Debian\nbitcoind/bitcoin-qt runs the compile test during all architectures.\nMIPS has been failing recently, but no one has looked into it yet.\nPerhaps it's not worth developers efforts yet, but at some point the\ntechnology should reach a point it can be redistributed.\n\n\n2) Bitcoin is new technology, so any patches have the ability of\nharming both the network and user.\n\nResponse: I, and I'm sure everyone else working on it, totally agrees.\nAll patches are public [1], you can see that the patches are only to\nthe build system (except for one adding a debug message). Is there a\nspecific patch or bug that is problematic? This seems to be\nreiterating (1) above: don't patch the build system to use libraries\nthat were not audited by the developers.\n\n\n\nThe two solutions are: (1) no one besides the upstream developers\ncompiles and distributes binaries, ever, or (2) upstream comes up with\na system where someone besides them can compile working binaries for\ndistribution. Most likely the best solution is to do (1) until\nupstream sets up a system to allow (2).\n\nI'm curious as to other's opinions.\nThanks,\nScott\n\n\n[1] http://anonscm.debian.org/gitweb/?p=collab-maint/bitcoin.git;a=tree;f=debian/patches;h=ba576f9f3ddad47a2f85dcbfb7a0b3482834f19f;hb=HEAD"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-07-23T22:26:44",
                "message_text_only": "On Tuesday, July 23, 2013 10:02:28 PM Scott Howard wrote:\n> 1) It appears that the consensus of upstream developers is that any\n> distributed binary should only be linked against libraries that the\n> bitcoin developers have tested and audited since any compatibility bug\n> is a risk to both the user and the network.\n> \n> Response: Is there a way to \"certify\" the Debian libraries? Debian\n> bitcoind/bitcoin-qt runs the compile test during all architectures.\n\nIt doesn't need to be audited by any given person or team, just someone who \nunderstands the issues and can dedicate the time to doing a competent audit.\nTesting bitcoind/bitcoin-qt is not sufficient: you must guarantee that your \nlibraries (especially LevelDB) are bug-for-bug compatible with the ones used \nby everyone else. And not only the current versions, but every future version \nto ever hit the repository. This means a lot of additional work for the \nmaintainers of the library packages, and the security team; for example, the \nsecurity team must understand that they *cannot* deploy a critical security \nbugfix to LevelDB until someone competent has reviewed that it is \nbehaviourally (including bug behaviours!) compatible with the versions in use \neverywhere else/previously. I think it is likely all this additional \nwork/delays will be considered unacceptable to your library/security teams, \nthus using the bundled/embedded LevelDB is probably the best solution.\n\n> MIPS has been failing recently, but no one has looked into it yet.\n> Perhaps it's not worth developers efforts yet, but at some point the\n> technology should reach a point it can be redistributed.\n\nMIPS (and any other big endian architecture) has *always* failed on the \nSatoshi codebase, and will not be supported until someone has time to dedicate \nto fixing the numerous little-endian assumptions in the code. I have an \nincomplete port, but it isn't very high on my priority list to figure out what \nelse it's missing.\n\n> 2) Bitcoin is new technology, so any patches have the ability of\n> harming both the network and user.\n> \n> Response: I, and I'm sure everyone else working on it, totally agrees.\n> All patches are public [1], you can see that the patches are only to\n> the build system (except for one adding a debug message). Is there a\n> specific patch or bug that is problematic? This seems to be\n> reiterating (1) above: don't patch the build system to use libraries\n> that were not audited by the developers.\n> \n> The two solutions are: (1) no one besides the upstream developers\n> compiles and distributes binaries, ever, or (2) upstream comes up with\n> a system where someone besides them can compile working binaries for\n> distribution. Most likely the best solution is to do (1) until\n> upstream sets up a system to allow (2).\n\nDebian could probably get away with packaging Bitcoin-Qt and bitcoind as-is \nwith no modifications, and not have any problems. It's only when you begin \nmaking modifications that it becomes a problem. There are also some concerns \nthat it puts a much larger price on compromising Debian's build servers and/or \nrepositories (suddenly the attacker can steal a LOT of money).\n\nThe official binaries are not simply built by upstream developers: using \nGitian, *anyone* can produce bit-for-bit identical binaries. Official releases \nare only published after 3 or more people have done an independent compile and \nsigned the output. It would be excellent if the whole of Debian could work \ntoward achieving this level of security eventually, which would make \ndistributing Bitcoin node software much safer as well.\n\nLuke\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 1530 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130723/583a77e0/attachment.sig>"
            },
            {
                "author": "Scott Howard",
                "date": "2013-07-24T03:00:36",
                "message_text_only": "On Tue, Jul 23, 2013 at 6:26 PM, Luke-Jr <luke at dashjr.org> wrote:\n> This means a lot of additional work for the\n> maintainers of the library packages, and the security team; for example, the\n> security team must understand that they *cannot* deploy a critical security\n> bugfix to LevelDB until someone competent has reviewed that it is\n> behaviourally (including bug behaviours!) compatible with the versions in use\n> everywhere else/previously. I think it is likely all this additional\n> work/delays will be considered unacceptable to your library/security teams,\n> thus using the bundled/embedded LevelDB is probably the best solution.\n\nThe above is a key point, lukejr addressed it well \"I think it is\nlikely all this additional work/delays will be considered unacceptable\nto your library/security teams, thus using the bundled/embedded\nLevelDB is probably the best solution.\"\n\n>> MIPS has been failing recently, but no one has looked into it yet.\n>> Perhaps it's not worth developers efforts yet, but at some point the\n>> technology should reach a point it can be redistributed.\n>\n> MIPS (and any other big endian architecture) has *always* failed on the\n> Satoshi codebase, and will not be supported until someone has time to dedicate\n> to fixing the numerous little-endian assumptions in the code. I have an\n> incomplete port, but it isn't very high on my priority list to figure out what\n> else it's missing.\n\nTo be clear, bitcoind/bitcoin-qt is only built on little endian machines\nhttps://buildd.debian.org/status/package.php?p=bitcoin\n\n> Debian could probably get away with packaging Bitcoin-Qt and bitcoind as-is\n> with no modifications, and not have any problems. It's only when you begin\n> making modifications that it becomes a problem. There are also some concerns\n> that it puts a much larger price on compromising Debian's build servers and/or\n> repositories (suddenly the attacker can steal a LOT of money).\n\nThe only current modification is to use system leveldb instead of the\npackaged leveldb. (There is also a patch porting libmemenv.a to\nseveral other architectures, but that is only used in test suites - so\nit shouldn't pose a risk to users).\n\n>\n> The official binaries are not simply built by upstream developers: using\n> Gitian, *anyone* can produce bit-for-bit identical binaries. Official releases\n> are only published after 3 or more people have done an independent compile and\n> signed the output. It would be excellent if the whole of Debian could work\n> toward achieving this level of security eventually, which would make\n> distributing Bitcoin node software much safer as well.\n\nIronically, debian (in general) doesn't trust upstream security\nmaintenance of third part libraries - that's why they typically get\ndropped in favor of use system libraries.\n\nIn this case, upstream doesn't trust (rightfully) that some future\ndebian security team bug fix to a stable library won't be tested\nproperly against bitcoin, causing problems for users (since bitcoin\nmight expect buggy library behavior).\n\n\nI'm not the original packager or maintainer - I just came across the\npackage in really bad shape and helped bring it to something\nreasonable and have done the most recent uploads (since 0.8, I\nbelieve). Since updated libraries could pose a security risk because\nbitcoin may expect buggy behavior, I think that is a good argument for\ndebian to use the included library. However, I'm just a recent helper\n- I still want to hear what people who have been doing this for longer\nthink.\n\n~Scott"
            },
            {
                "author": "Douglas Huff",
                "date": "2013-07-24T01:45:11",
                "message_text_only": "Honestly, until I read the quoted part of your response, I actually wasn't in favor of this whole thing since in general the types of issues being mentioned are, in large part, the types of issues that maintainers deal with all the time.\n\nOn Jul 23, 2013, at 3:02 PM, Scott Howard <showard314 at gmail.com> wrote:\n\n> Response: Is there a way to \"certify\" the Debian libraries? Debian\n> bitcoind/bitcoin-qt runs the compile test during all architectures.\n> MIPS has been failing recently, but no one has looked into it yet.\n> Perhaps it's not worth developers efforts yet, but at some point the\n> technology should reach a point it can be redistributed.\n\n\nThe fact that you're even trying to package and/or at some point have packaged and shipped big endian binaries is straight up *NEGLIGENT.*\n\nStop that. Now. It won't work.\n\nThanks for showing that this *is* necessary, I guess."
            },
            {
                "author": "Scott Howard",
                "date": "2013-07-24T02:27:37",
                "message_text_only": "On Tue, Jul 23, 2013 at 9:45 PM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:\n> Honestly, until I read the quoted part of your response, I actually wasn't in favor of this whole thing since in general the types of issues being mentioned are, in large part, the types of issues that maintainers deal with all the time.\n>\n> On Jul 23, 2013, at 3:02 PM, Scott Howard <showard314 at gmail.com> wrote:\n>\n>> Response: Is there a way to \"certify\" the Debian libraries? Debian\n>> bitcoind/bitcoin-qt runs the compile test during all architectures.\n>> MIPS has been failing recently, but no one has looked into it yet.\n>> Perhaps it's not worth developers efforts yet, but at some point the\n>> technology should reach a point it can be redistributed.\n>\n>\n> The fact that you're even trying to package and/or at some point have packaged and shipped big endian binaries is straight up *NEGLIGENT.*\n>\n> Stop that. Now. It won't work.\n>\n> Thanks for showing that this *is* necessary, I guess.\n\nbefore people get too upset, I'm talking about little-endian MIPS\n(debian-mipsel)\nhttp://www.debian.org/ports/mips/"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-07-23T22:33:47",
                "message_text_only": "On Tue, Jul 23, 2013 at 10:01:55PM +0200, Mike Hearn wrote:\n> The trigger for this is the discovery that Debian bitcoind's got split out\n> of the consensus some time in April, for reasons that nobody yet figured\n> out but is presumably related to a patch (eg it uses system leveldb).\n\nJust to make sure there are no misunderstandings, as far as I know there is\nno reason to assume the reported problem (comment on #2726) is:\n1) a fork (it's an indeterministic and avoidable database corruption, it seems)\n2) related to leveldb\n3) reproducible by more than one person\n4) debian's fault.\n\nThat said, I think reaching out to packagers to educate them about the risks\nis a good idea - but let's not blame people before we understand our own\nproblems.\n\n-- \nPieter"
            },
            {
                "author": "Greg Troxel",
                "date": "2013-07-23T23:23:27",
                "message_text_only": "I find it interesting that this is a \"linux packaging letter\".  How much\nof this applies to pkgsrc, FreeBSD ports, OpenBSD ports, and other\nnon-Linux packaging systems (pkgsrc supports Linux as on of 20 operating\nsystems, but is not a \"Linux packaging system\")?\n\nIs the repeatable build infrastructure portable (to any reasonable\nmostly-POSIX-compliant system, with gcc or clang)?  I have the vague\nimpression it's Ubuntu only, but I am very unclear on this point.  How\ndoes this repeatableness interact with building for multiple operating\nsystems and cpu types (say 20 OS, with typically 3 versions of the OS\nfor each, with 1-20 cpu types per OS, for a cross-product of perhaps 200\ncombinations)?\n\nRequiring precise library depdendencies is quite awkward.  Certainly\nrequiring new enough to avoid known bugs is understandable, but that\nshould be caught at configure time and fail.  Synchronous updates of\nmultiple packages is difficult, and runs into A wants only n of C, while\nB wants only m.  So if you are talking about running regression tests\nwith the set of versions of a dependency that are considered reasonable,\nand there's therefore a solution to the multiple-package constraint\nproblem, that seems ok.\n\nIt seems like a bug that the package will build on BE systems and then\nfail tests.   If it's known not to be ok, it seems that absent some\nconfigure-time flag the build should fail.\n\nAsking people not to patch should mean willingnesss to make accomodation\nin the master sources for build issues for multiple packaging systems.\nI haven't gotten around to packaging this for pkgsrc - so far I only\nhave the energy to lurk (due to too many things on the todo list).  But\nI often find that some changes are needed.  If you're willing (in\ntheory) to add in configure flags to control build behavior (in a way\nthat you can audit and decide is safe), that's great, and of course we\ncan discuss an actual situation when one gets figured out.\n\nGreg"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-07-23T23:45:26",
                "message_text_only": "On Tuesday, July 23, 2013 11:23:27 PM Greg Troxel wrote:\n> I find it interesting that this is a \"linux packaging letter\".  How much\n> of this applies to pkgsrc, FreeBSD ports, OpenBSD ports, and other\n> non-Linux packaging systems (pkgsrc supports Linux as on of 20 operating\n> systems, but is not a \"Linux packaging system\")?\n\nIt was written with bitcoind/Bitcoin-Qt in mind, which don't work on BSD. :p\n\n> Is the repeatable build infrastructure portable (to any reasonable\n> mostly-POSIX-compliant system, with gcc or clang)?  I have the vague\n> impression it's Ubuntu only, but I am very unclear on this point.  How\n> does this repeatableness interact with building for multiple operating\n> systems and cpu types (say 20 OS, with typically 3 versions of the OS\n> for each, with 1-20 cpu types per OS, for a cross-product of perhaps 200\n> combinations)?\n\nIt should be portable to other systems, though hasn't been done yet.\nWould be nice if the concepts it uses could be integrated into the package-\nbuilding systems.\n\n> Requiring precise library depdendencies is quite awkward.  Certainly\n> requiring new enough to avoid known bugs is understandable, but that\n> should be caught at configure time and fail.\n\nThe problem is that we require bugs. That is, if your library has those bugs \nfixed, you have introduced a security vulnerability.\n\n> It seems like a bug that the package will build on BE systems and then\n> fail tests.   If it's known not to be ok, it seems that absent some\n> configure-time flag the build should fail.\n\nThere is no configure-time for this node software yet. The autoconf-based one \nin the works *does* make this check, however.\n\n> Asking people not to patch should mean willingnesss to make accomodation\n> in the master sources for build issues for multiple packaging systems.\n> I haven't gotten around to packaging this for pkgsrc - so far I only\n> have the energy to lurk (due to too many things on the todo list).  But\n> I often find that some changes are needed.  If you're willing (in\n> theory) to add in configure flags to control build behavior (in a way\n> that you can audit and decide is safe), that's great, and of course we\n> can discuss an actual situation when one gets figured out.\n\nThe review process is very slow and strict, but that is because of the same \nreasons it isn't safe to distribute patched versions in general. Merging your \npatches to mainline is not only a good idea, but it helps to ensure they get \nthe necessary testing needed to be safe.\n\nLuke\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 1530 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130723/9a0e804f/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-07-24T00:50:48",
                "message_text_only": "On Tue, Jul 23, 2013 at 4:23 PM, Greg Troxel <gdt at work.lexort.com> wrote:\n> Is the repeatable build infrastructure portable (to any reasonable\n> mostly-POSIX-compliant system, with gcc or clang)?  I have the vague\n\nIt's \"portable\" to anything that can run the relevant VMs.  Uh\nprovided you don't mind cross compiling everything from an unbuntu VM.\n It certainly would be nice if the trusted-computing-base for gitian\nwere a bit smaller, thats an area for long term improvement for sure.\n\nIt may need some massaging. The tor project is beginning to use the\nsame infrastructure, so this could be usefully conserved work.\n\nLikewise expanding the supported output targets would be great\u2014 though\nin the case of Bitcoin this is bounded by resources to adequately QA\nbuilds on alternative targets.\n\n> Requiring precise library depdendencies is quite awkward.  Certainly\n> requiring new enough to avoid known bugs is understandable, but that\n> should be caught at configure time and fail.\n\nIn some cases packages solving bugs is problematic for Bitcoin.\n\nThis is something that it seems to take a whiteboard to explain, so I\napologize for the opacity of simple email here.\n\n>From a technical perspective Bitcoin's whole purpose is getting a\nwhole bunch of computers world wide to reach a bit identical agreement\non the content of a database, subject to a whole pile of rules, in the\nface of potentially malicious input, without any trusted parties at\nall (even the guy you got the software from, assuming you have the\nresources to audit it).\n\nI'll walk through a simple example:\n\nSay Bitcoin used a backing database which had an unknown a bug where\nany item with a key that begins with 0xDEADBEEF returns not found when\nqueried, even if its in the DB. Once discovered, any database library\nwould want to fix that quickly and they'd fix it in a point release\nwithout reservation. They might not even release note that particular\nfix it if went along with some others, it could even be fixed\naccidentally.\n\nNow say that we have a state where half the Bitcoin network is running\nthe old buggy version, and half is running the fixed version.  Someone\ncreates a transaction with ID 0xDEADBEEF...  and then subsequently\nspends the output of that transaction. This could be by pure chance or\nit could be a malicious act.\n\nTo half the network that spending transaction looks like someone\nspending coin from nowhere, a violation of the rules.  The consensus\nwould then fork, effectively partitioning the network.  On each fork\nany coin could be spent twice, and the fork will only be resolvable by\none side or the other abandoning their state (generally the more\npermissive side would need to be abandoned because the permissive one\nis tolerant of the restrictive one's behavior) by manually downgrading\nor patching software.  As a result of this parties who believed some\nof their transactions were safely settled would find them reversed by\npeople who exploited the inconsistent consensus.\n\nTo deploy such a fix in Bitcoin without creating a risk for\nparticipants we need to make a staged revision of the network protocol\nrules:  There would be a protocol update that fixed the database bug\n_and_ explicitly rejected 0xDEADBEEF transactions until either some\nfar out future date or until triggered by quorum sensing (or both).\nThe users of Bitcoin would all be advised that they had to apply\nfixes/workaround by the switchover point or be left out of service or\nvulnerable. At designated time / quorum nodes would simultaneously\nswitch to the new behavior.  (Or in some cases, we'd just move the\n'bug' into the Bitcoin code so that it can be fixed in the database,\nand we'd then just keep it forever, depending on how harmful it was to\nBitcoin, a one if 4 billion chance of having to rewrite a transaction\nwouldn't be a big deal)\n\nWe've done these organized updates to solve problems (as various flaws\nin Bitcoin itself can present similar consensus risks) several times\nwith great success, typical time horizons spanning for months to\nyears.  But it cannot work if the behavior is changed out from under\nthe software.\n\nFortunately, if the number of users running with an uncontrolled\nconsensus relevant inconsistent behavior is small the danger is only\nto themselves (and, perhaps, their customers). I'm not happy to see\nanyone get harmed, but it's better if its few people than many. This\nis part of the reason that it's a \"linux packaging letter\", since for\nBitcoin the combination of uncoordinated patching and non-trivial\nuserbases appears to be currently unique to GNU/Linux systems.  Though\nindeed, the concerns do apply more broadly.\n\n> multiple packages is difficult, and runs into A wants only n of C, while\n> B wants only m.\n\nMy understanding is that gentoo is actually able to handle this (and\ndoes, for Bitcoin)\u2014 and really I presume just about everything else\ncould with enough effort. I certainly wouldn't ask anyone else to do\nthat.  If you're really getting into the rathole of building separate\nlibraries just for Bitcoin the value of packaging it goes away.\n\n> So if you are talking about running regression tests\n> with the set of versions of a dependency that are considered reasonable,\n> and there's therefore a solution to the multiple-package constraint\n> problem, that seems ok.\n\nRunning a complete set of tests is a start\u2014 though the unit tests are\nnot and cannot be adequate. There is a full systems testing harnesses\nwhich should be used on new platforms.  Even that though isn't really\nadequate, as it is currently infeasible to even achieve complete test\ncoverage in things like cryptographic libraries and database\nenvironments.\n\nThis is an area where both the Bitcoin software ecosystem and the\ngreater art of large scale software validation need to mature. You\nwon't hear anyone applauding the fact that harmless looking bugfixes\nin leveldb, boost, or openssl could be major doom event makers\n\nWe're not crazy folks who insist on using formally undefined behavior\nand argue that it should never be changed out from under us. When\nthere is a known risk we will boil the oceans to close it even if we\nthink that the world would be more 'proper' some other way,  but for\nknown-unknowns and unknown-unknowns we can only adopt a conservative\napproach and try to do our best.\n\nOne of the middle term things we did was internally integrated our\nvalidation database library (leveldb).  Since we _know_ that its a\nconsistency critical component, and a part of our system that is\nespecially difficult to validate, integrating it meant removing a lot\nof risk and allowed it to be upgraded with an eye on the\nBitcoin-specific consequences.  Unfortunately distributions have been\npatching Bitcoin to unbundle it.  Checking versions isn't adequate\nbecause, at least in other packages, some distributors frequently\nbackport fixes or apply novel fixes which may not even be shared with\nupstream.\n\nOther considerations may drive us out of external dependencies for\nmany of the consensus parts of Bitcoin. E.g. Pieter has writen an\nECDSA library for our specific ECC curve which does signature\nvalidation >6x faster than OpenSSL (but it isn't obviously\nupstreamable due to some differing requirements for constant time\noperations), at some point we may need to adopt a backing database\nthat is able to produce authentication proofs, etc.  Certainly\nadditional clever tests will make undiscovered surprising behavior\nless likely, though figuring out how to get the tests actually run if\nthey take two hours and use 20GB of disk space is a challenge.\n\n... but today we need to work with what we have, which is fragile in\nsome atypical ways.  Part of that is making an effort to make sure\nthat anyone who might create a big footgun event has some idea of the\nconcern space.\n\n> It seems like a bug that the package will build on BE systems and then\n> fail tests.   If it's known not to be ok, it seems that absent some\n> configure-time flag the build should fail.\n\nConfigure time?  At the moment Bitcoin is built with a straight\nforward makefile (though there is a switch to autotools in the\npipeline).\n\nBE isn't currently supported (and I believe this is well documented in\nthe package).  Fixing this would be nice, patches accepted.   There\nwas an amusing incident a while back where a distributor was refusing\nto take an update that added unit tests because they revealed failures\non BE, nevermind that the application itself instantly failed on BE\nand never worked there. I believe that has since been resolved.\n\n> Asking people not to patch should mean willingnesss to make accomodation\n> in the master sources for build issues for multiple packaging systems.\n> I haven't gotten around to packaging this for pkgsrc - so far I only\n> have the energy to lurk (due to too many things on the todo list).  But\n> I often find that some changes are needed.  If you're willing (in\n> theory) to add in configure flags to control build behavior (in a way\n> that you can audit and decide is safe), that's great, and of course we\n> can discuss an actual situation when one gets figured out.\n\nI _believe_  (and hope) we've been very accommodating system specific\nfixes, even for systems we don't formally support.\n\nI personally believe that portable software is better software.\nPortability forces you to dust out nasty cobwebs, reveals dependency\non dangerous undefined behavior, encourages intelligent abstractions\nand appropriate testing, and it invites contributions from more hands\nand eyes\u2014 I don't care if you use a weird OS: I just want you for your\ncode and your bug-reports.  So even if we don't consider a platform\nworth supporting in any rigorous way, we should still be open to fixes\nand build support.\n\n... although we're typical very much resource bound on testing. Our\nupstreaming pipeline is often somewhat slow. But it's slow because we\nare serious about review, even of trivial changes. Being slow is no\nreason to not submit, even if you make a decision to not block on it\n(though, if you're doing that you should make the decision in full\nknowledge of the potential implications). Like all things stepping up\nand being willing to do the work goes a long way to getting things\ndone."
            },
            {
                "author": "zooko",
                "date": "2013-07-24T02:35:28",
                "message_text_only": "Folks:\n\nWith all due respect, I think the letter as I see it at\nhttps://docs.google.com/document/d/1naenR6N6fMWSpHM0f4jpQhYBEkCEQDbLBs8AXC19Y-o/edit#heading=h.i7tz3gqh65mi\nshould be changed before being shown to package maintainers. I think some\npackage maintainers might perceive this version of the letter as high-handed --\ntelling someone else how to do their job -- and they might not notice the\nactual facts included in the letter explaining why Bitcoin really *is*\ndifferent than a lot of software.\n\nYou should understand that without a careful read, this letter sounds much like\na cry that packagers have heard from hundreds of other authors who say things\nto the effect that \"my software is different and more important and packager\nmaintainers have to do things my way\".\n\nWhy not solicit the cooperation of a few package maintainers and write a joint\nletter with them signing on? Instead of it being a one-sided lecture from\nBitcoin devs to packagers, it would be a shared statement *and* packagers, and\nit would be phrased in language that would make it instantly clear to other\npackagers that this isn't just another whine from ignorant devs.\n\nIf you're interested in that, there are lots of packagers who would be happy to\nhelp. Greg Troxel (pkgsrc) is one, who has already posted to this thread. I'd\nbe happy to invite the ones that I've worked with to package the software that\nI am a dev on -- Tahoe-LAFS.\n\nWhat I'm proposing is that we contact some packagers and say \"Here's this rough\ndraft, and we'd like you to suggest edits that would make it into the kind of\nletter that you'd sign your name to.\". At the very least, we'd learn something\nfrom the ensuing conversation.\n\nRegards,\n\nZooko"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-07-24T03:19:31",
                "message_text_only": "On Tue, Jul 23, 2013 at 7:35 PM, zooko <zooko at zooko.com> wrote:\n> I think some\n> package maintainers might perceive this version of the letter as high-handed --\n> telling someone else how to do their job -- and they might not notice the\n> actual facts included in the letter explaining why Bitcoin really *is*\n> different than a lot of software.\n\nBummer, because this was a explicit consideration while writing it and\na concern several people had with the initial draft Mike did.\n\nWe're very much aware that upstreams frequently cry (wolf) at the\nmutilation of their unique and precious snowflake.\n\nThe intention was that second paragraph acknowledging the many good\nmotivations for the existing norms and the third paragraph talking\nabout consensus systems would address these concerns\u2014 showing that we\naren't totally clueless, and pointing out that we have an actually\nunusual situation. In intermediate drafts they were longer and more\nelaborate, but we were struggling against length and trying to avoid\ndelving into a highly technical discussion which would lose anyone who\nwasn't already very interested.\n\nWe also compromised on an initial approach of \"please don't package\nthis at all\" to \"please understand first\", in part at the protest of\nour gentoo package (which also bundles leveldb but hard locks it to an\nexact version in the package system with exact build flags, which is a\nsophisticated compromise which might not generalize to other\ndistributors) maintainer (uh, Luke-Jr, not exactly the most\nrepresentative sample).\n\nAs a first step it's at least important to know that there is a\nconcern here shared by a bunch of people. Helping talk people through\nunderstanding it is part of the job here.  I certainly didn't expect\nthe discussion to stop with the letter but getting it out there is a\nway to start the discussion and make it more likely that we have it\nagain with the next packager who comes around.\n\nI guess the first priority though is avoiding gratuitously offending\npeople.  Can anyone point out any specific tweaks that would reduce\ninitial bristling?\n\nOn Tue, Jul 23, 2013 at 6:45 PM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:\n> Honestly, until I read the quoted part of your response,\n\nOh be nice. If any of this were easy it would all be _done_ already. :)\n\nThere is naturally some tension when people with different priorities\nand backgrounds interact, ... I've seen a lot of upstreams run into\ndisagreements with packagers the result is usually better for\neveryone."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-24T08:28:16",
                "message_text_only": "Yeah, if anyone wants to make the letter more digestable please do propose\nan alternative, although by this point it's probably not worth it as people\nhave already signed.\n\nFWIW, Gregory is right that my original draft was much more brusque. The\npain in the packaging relationship travels both ways. I have in the past\nwasted a lot of time due to bogus packaging applied by non-expert packagers\nthat broke things. In fact the project I was a part of adopted a policy of\nautomatically closing bug reports from people who were using distributor\npackages (any distro) because the quality was so inconsistent and so many\nsubtle bugs were introduced.\n\nIf packagers hear upstreams cry about packaging a lot, I think you should\nkeep an open mind that some of them probably know what they're talking\nabout. We really shouldn't have to beg and cajole here. Saying \"we have our\nreasons and we want you to stop\" should be enough.\n\n\n\n\nOn Wed, Jul 24, 2013 at 5:19 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Tue, Jul 23, 2013 at 7:35 PM, zooko <zooko at zooko.com> wrote:\n> > I think some\n> > package maintainers might perceive this version of the letter as\n> high-handed --\n> > telling someone else how to do their job -- and they might not notice the\n> > actual facts included in the letter explaining why Bitcoin really *is*\n> > different than a lot of software.\n>\n> Bummer, because this was a explicit consideration while writing it and\n> a concern several people had with the initial draft Mike did.\n>\n> We're very much aware that upstreams frequently cry (wolf) at the\n> mutilation of their unique and precious snowflake.\n>\n> The intention was that second paragraph acknowledging the many good\n> motivations for the existing norms and the third paragraph talking\n> about consensus systems would address these concerns\u2014 showing that we\n> aren't totally clueless, and pointing out that we have an actually\n> unusual situation. In intermediate drafts they were longer and more\n> elaborate, but we were struggling against length and trying to avoid\n> delving into a highly technical discussion which would lose anyone who\n> wasn't already very interested.\n>\n> We also compromised on an initial approach of \"please don't package\n> this at all\" to \"please understand first\", in part at the protest of\n> our gentoo package (which also bundles leveldb but hard locks it to an\n> exact version in the package system with exact build flags, which is a\n> sophisticated compromise which might not generalize to other\n> distributors) maintainer (uh, Luke-Jr, not exactly the most\n> representative sample).\n>\n> As a first step it's at least important to know that there is a\n> concern here shared by a bunch of people. Helping talk people through\n> understanding it is part of the job here.  I certainly didn't expect\n> the discussion to stop with the letter but getting it out there is a\n> way to start the discussion and make it more likely that we have it\n> again with the next packager who comes around.\n>\n> I guess the first priority though is avoiding gratuitously offending\n> people.  Can anyone point out any specific tweaks that would reduce\n> initial bristling?\n>\n> On Tue, Jul 23, 2013 at 6:45 PM, Douglas Huff <dhuff at jrbobdobbs.org>\n> wrote:\n> > Honestly, until I read the quoted part of your response,\n>\n> Oh be nice. If any of this were easy it would all be _done_ already. :)\n>\n> There is naturally some tension when people with different priorities\n> and backgrounds interact, ... I've seen a lot of upstreams run into\n> disagreements with packagers the result is usually better for\n> everyone.\n>\n>\n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130724/c24730dd/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-07-24T13:52:33",
                "message_text_only": "On Wed, Jul 24, 2013 at 4:28 AM, Mike Hearn <mike at plan99.net> wrote:\n> Yeah, if anyone wants to make the letter more digestable please do propose\n> an alternative, although by this point it's probably not worth it as people\n> have already signed.\n\nI'm working on a more digestable alternative:\nhttps://gist.github.com/jgarzik/6065679\n\nShould be ready in another ~24 hours, as its obviously incomplete\nright now.  Alas the publishing of the lame version (which yes, I did\nACK) didn't give me time to finish my version.\n\nI worked on Fedora packaging while at Red Hat, so hopefully, I have a\nbit of insight here.  Was also thinking about publishing this on\nopensource.com.\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "zooko",
                "date": "2013-07-24T15:32:52",
                "message_text_only": "On Wed, Jul 24, 2013 at 09:52:33AM -0400, Jeff Garzik wrote:\n> \n> I'm working on a more digestable alternative:\n> https://gist.github.com/jgarzik/6065679\n\nHi Jeff! Thanks for working on it. Even if that letter\n(https://gist.github.com/jgarzik/6065679) doesn't supplant\nhttps://docs.google.com/a/leastauthority.com/document/d/1naenR6N6fMWSpHM0f4jpQhYBEkCEQDbLBs8AXC19Y-o/edit#heading=h.i7tz3gqh65mi\nas a message-to-packagers, it looks like it will still turn out to be a useful\ntext.\n\nMy first question about it is this part:\n\n\"\"\"\n Make a mistake, lose $1 billion\n\nThe consequences of bitcoin consensus failure are very high, comparable to avionics or medical device software. As of this writing, over $1 billion of value depends on bitcoin software being able to reliably achieve consensus over the worldwide Internet. This is the digital equivalent of Fort Knox: consensus must be achieved, or bitcoin has no value.\n\"\"\"\n\nThis makes it sound like if, for example, Debian were to link bitcoind to the\nsystem leveldb, and then upgrade the system leveldb to fix a bug that affects\nbitcoind, that this would spell the end of Bitcoin.\n\nI hope that's not true!\n\nI'd like to try to be more specific about two things:\n\n1. What is the behavior that a dependency or a patch could cause that would be\nproblematic? I liked what Luke-Jr said earlier in this thread -- that in some\ncases a bitcoin node (i.e. a bitcoind process) needs certain bugs or\nlimitations in order to maintain consensus with other bitcoin nodes. Maybe you\ncould use a statement like that, without attempting to explain in *what* cases\nthat applies.\n\n2. What is the consequence if this goes wrong? This is something I don't\nunderstand as well. I think the answer is:\n\n   2.a. All bitcoin nodes which encounter one of these cases and are\n        differently-buggy than the upstream bitcoind form their own consensus,\n        causing a blockchain fork.\n\n   2.b. There is a risk of double-spending attacks.\n\n   2.c. The process for healing a blockchain fork is not very smooth or\n        well-understood.\n\nRegards,\n\nZooko"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-07-24T19:35:45",
                "message_text_only": "On Wed, Jul 24, 2013 at 8:32 AM, zooko <zooko at zooko.com> wrote:\n> This makes it sound like if, for example, Debian were to link bitcoind to the\n> system leveldb, and then upgrade the system leveldb to fix a bug that affects\n> bitcoind, that this would spell the end of Bitcoin.\n\nMaybe!  A widespread consensus failure causes people to lose money\neven absent malice. How much depends on a bunch of details, including\nthe luck of attackers.\n\nThe total ramifications are as much social as they are technical so\nit's hard to reason over the outcomes beyond \"at a minimum, it's not\ngood\".\n\nA really bad splitting event could results in large amounts of Bitcoin\nbeing stolen through reversals. Obviously the system itself would keep\non ticking once the issue was resolved... but if millions of dollars\nat recent prices in coins were stolen,  would people want to keep\nusing it?\n\nThe most dire outcomes are (very?) unlikely, but they're not necessary\nto recognize that risk mitigation is important.\n\nIt's good to be careful here just to avoid the bad outcomes we are\nsure will happen (because we've experienced them before):   Hundreds\nof dollars worth of coin income 'lost' per minute to miners on the\nlosing side of a 50/50 fork, hours long disruption of the lives of\ndozens of people in the Bitcoin technical ecosystem (many of whom are\nvolunteer OSS developers), hours of disruption (no payments processed)\nto Bitcoin users and businesses.  These are the best case outcomes in\na substantial non-transient hard forking event.\n\nI think one of the challenges in talking about this stuff is correctly\nframing these risks.  Bitcoin is a novel technology that lacks a lot\nof the recourse that other systems have\u2014 No Bitcoin central bank to\ncreate a bit of inflation to paper over a glitch,  eliminating those\nkinds of centralized \"fixes\" is much of the point, after all\u2014  so with\nthe idea of starry eyed people taking out second mortgages on their\nkids kidneys to buy up coin clearly in my mind I do think it's\nimportant to be clear about the full range of risk:  It's _possible_\nthat due to some amazing sequences of technical screwups that by next\nweek most everyone could consider Bitcoin worthless. I think it's\nimportant to be frank about those risks.  ... but it's also not good\nto be chicken little, calling doom on anyone who wants to change the\ncolor of the GUI. :P   Navigating it is hard, and generally I'd prefer\nthat if there is any misunderstanding people overestimate the risks a\nlittle\u2014 so long as things stay in the realm of the possible\u2014 rather\nthan underestimate them."
            },
            {
                "author": "zooko",
                "date": "2013-07-24T16:01:12",
                "message_text_only": "On Wed, Jul 24, 2013 at 10:28:16AM +0200, Mike Hearn wrote:\n> Yeah, if anyone wants to make the letter more digestable please do propose\n> an alternative, although by this point it's probably not worth it as people\n> have already signed.\n\nOkay, here's my attempt:\n\nhttps://docs.google.com/document/d/1m3wyBIjqwPQ3wxVT7P_wJtdWt9a9RXvt9NV7rggLAOs/edit#\n\nPlease feel free to use any or all of it as you see fit.\n\n> FWIW, Gregory is right that my original draft was much more brusque. The\n> pain in the packaging relationship travels both ways. I have in the past\n> wasted a lot of time due to bogus packaging applied by non-expert packagers\n> that broke things. In fact the project I was a part of adopted a policy of\n> automatically closing bug reports from people who were using distributor\n> packages (any distro) because the quality was so inconsistent and so many\n> subtle bugs were introduced.\n> \n> If packagers hear upstreams cry about packaging a lot, I think you should\n> keep an open mind that some of them probably know what they're talking\n> about. We really shouldn't have to beg and cajole here. Saying \"we have our\n> reasons and we want you to stop\" should be enough.\n\nYes, I know what you mean.\n\nRegards,\n\nZooko"
            },
            {
                "author": "Greg Troxel",
                "date": "2013-07-27T00:45:46",
                "message_text_only": "Mike Hearn <mike at plan99.net> writes:\n\n> If packagers hear upstreams cry about packaging a lot, I think you should\n> keep an open mind that some of them probably know what they're talking\n> about. We really shouldn't have to beg and cajole here. Saying \"we have our\n> reasons and we want you to stop\" should be enough.\n\nAsserting without explaining isn't going to work; lots of people think\ntheir code is more special than it is, and most of these claims are\nunwarranted.  But, there is a good explanation for the bitcoin case."
            },
            {
                "author": "Greg Troxel",
                "date": "2013-07-27T00:43:00",
                "message_text_only": "Gregory Maxwell <gmaxwell at gmail.com> writes:\n\n> It's \"portable\" to anything that can run the relevant VMs.  Uh\n> provided you don't mind cross compiling everything from an unbuntu VM.\n>  It certainly would be nice if the trusted-computing-base for gitian\n> were a bit smaller, thats an area for long term improvement for sure.\n\nThanks - I'll look forward to this being portable someday.  Right now it\nsounds similar to \"a windows binary but you can use wine\" with\nsubstitution of variables :-) People may want to look at the NetBSD\nbuild system, which I think achieves bit-identical builds from different\nhosts (but I haven't really checked), by having the toolchain be part of\nthe source and building cross-compilers from host to target and then\nusing those to build the system.\n\n> Say Bitcoin used a backing database which had an unknown a bug where\n> any item with a key that begins with 0xDEADBEEF returns not found when\n> queried, even if its in the DB. Once discovered, any database library\n> would want to fix that quickly and they'd fix it in a point release\n> without reservation. They might not even release note that particular\n> fix it if went along with some others, it could even be fixed\n> accidentally.\n>\n> Now say that we have a state where half the Bitcoin network is running\n> the old buggy version, and half is running the fixed version.  Someone\n> creates a transaction with ID 0xDEADBEEF...  and then subsequently\n> spends the output of that transaction. This could be by pure chance or\n> it could be a malicious act.\n>\n> To half the network that spending transaction looks like someone\n> spending coin from nowhere, a violation of the rules.  The consensus\n> would then fork, effectively partitioning the network.  On each fork\n> any coin could be spent twice, and the fork will only be resolvable by\n> one side or the other abandoning their state (generally the more\n> permissive side would need to be abandoned because the permissive one\n> is tolerant of the restrictive one's behavior) by manually downgrading\n> or patching software.  As a result of this parties who believed some\n> of their transactions were safely settled would find them reversed by\n> people who exploited the inconsistent consensus.\n\nThanks for the explanation - that indeed makes sense.\n\n>> multiple packages is difficult, and runs into A wants only n of C, while\n>> B wants only m.\n>\n> My understanding is that gentoo is actually able to handle this (and\n> does, for Bitcoin)\u2014 and really I presume just about everything else\n> could with enough effort. I certainly wouldn't ask anyone else to do\n> that.  If you're really getting into the rathole of building separate\n> libraries just for Bitcoin the value of packaging it goes away.\n\nWell, if you insist on not having updates and bugfixes, then either it's\nthe included version or there's a special package just for you.\nTypically packaging systems don't like included versions because often a\npackage will have a security bug fixed long before there are updates of\npackages that bundle that fixed version.    But given bitcoin's special\nneeds, that means you have to stay on top of these dependent included\npackages and re-release if there are security fixes (that don't break\nconsensus).\n\n> Running a complete set of tests is a start\u2014 though the unit tests are\n> not and cannot be adequate. There is a full systems testing harnesses\n> which should be used on new platforms.  Even that though isn't really\n> adequate, as it is currently infeasible to even achieve complete test\n> coverage in things like cryptographic libraries and database\n> environments.\n\nIt would be nice if the regression tests were installed and it were\nnormal culturallly for end-users to run them.\n\n\nThanks again for the explanation; I understand where you are coming from\nnow."
            }
        ],
        "thread_summary": {
            "title": "Linux packaging letter",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Luke-Jr",
                "Douglas Huff",
                "John Dillon",
                "Mike Hearn",
                "Gregory Maxwell",
                "Scott Howard",
                "Greg Troxel",
                "zooko",
                "Pieter Wuille"
            ],
            "messages_count": 23,
            "total_messages_chars_count": 55424
        }
    },
    {
        "title": "[Bitcoin-development] Endianness (was: Linux packaging letter)",
        "thread_messages": [
            {
                "author": "Wendell",
                "date": "2013-07-24T03:54:25",
                "message_text_only": "Forking for curiosity's sake:\n\nIs there a substantial barrier to endian independence in the Bitcoin codebase?\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive\n\nOn Jul 24, 2013, at 3:45 AM, Douglas Huff wrote:\n\n> The fact that you're even trying to package and/or at some point have packaged and shipped big endian binaries is straight up *NEGLIGENT.*"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-07-24T04:03:24",
                "message_text_only": "On Wednesday, July 24, 2013 3:54:25 AM Wendell wrote:\n> Is there a substantial barrier to endian independence in the Bitcoin\n> codebase?\n\nI got the obvious stuff ('endian' branch in my repo), but it still didn't work \nwhen I moved on. I haven't had time to try to figure out why not yet.\n\nLuke"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-07-24T04:07:37",
                "message_text_only": "On Tue, Jul 23, 2013 at 8:54 PM, Wendell <w at grabhive.com> wrote:\n> Forking for curiosity's sake:\n> Is there a substantial barrier to endian independence in the Bitcoin codebase?\n\nNot really. The software was originally written to write out memory\norder to and from the wire, which is part of why the protocol is LE\neverywhere, so fixing that much is pretty typical endianness fixes.\nThere is an extra kink in that almost everything Bitcoin sends and\nreceives is an authenticated data structure\u2014 the stuff gets hashed for\nauthentication.  So that simply swizzling the byte order on\nimmediately on input isn't enough because sometimes you'll go on to\nhash that data and it can't be in memory order for that.\n\nLuke gave an initial crack at it a long time ago:\nhttp://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin/commits/endian\nBut it wasn't enough yet.\n\nSeems like its just enough of an undertaking that absent a really good\nreason to care about it no real progress in fixing it is happening."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-07-24T04:09:01",
                "message_text_only": "On Tue, Jul 23, 2013 at 9:07 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> order to and from the wire, which is part of why the protocol is LE\n> everywhere,\n*before someone corrects me, it's not LE everywhere (I meant\n\"manywhere\" :P)\u2014 there is just enough BE to keep you on your toes. :P"
            }
        ],
        "thread_summary": {
            "title": "Endianness (was: Linux packaging letter)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Gregory Maxwell",
                "Wendell"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 1929
        }
    },
    {
        "title": "[Bitcoin-development] Two factor wallet with one-time-passwords",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-07-27T23:49:18",
                "message_text_only": "Gavin Andresen recently suggested a design for a wallet protected by\ntwo-factor authentication via one-time-passwords with the aid of a\nthird-party service to counter-sign 2-of-2 protected wallets.(1) The\ndesign is useful when the user can't sign transactions on a second\ndevice, such as a phone, but can provide one-time-passwords. (possibly\ngenerated on a smart phone or stored on paper) However involving a\nthird-party has privacy and availability risks. Here is an alternate\ndesign, also using one-time-passwords, that removes the requirement for\na third-party, along with other advantages and disadvantages.\n\n\nUser experience\n===============\n\nThe user has a wallet with a separate balances for savings and a smaller\nday-to-day spending amount. Transactions spending the day-to-day balance\ndo not need two-factor authorization, while spending the savings balance\ndoes. As the day-to-day balance becomes low the user is able to top it\nup by authorizing the movement of discrete multiples of some amount from\nsavings to spending. That authorization requires one one-time-password\nper multiple being moved.\n\n\nImplementation\n==============\n\nSavings use P2SH outputs matching the following scriptPubKey form:\n\nHASH160 <H(nonce_i)> EQUALVERIFY <pubkey> CHECKSIG\n\nspent with:\n\n<sig> <nonce_i>\n\nThe way the pubkey/seckey is generated is unimportant, although some\nkind of deterministic scheme is preferable. Nonces on the other hand are\ngenerated deterministically using a counter-based one-time-password\nscheme that takes some secret seed and an integer i.  A large number of\nH(nonce_n) are generated in advance and moved to the computer holding\nthe wallet. (generating them on that computer is also possible, but\nobviously risks the secret seed being compromised)\n\nA brute-force attack to spend a signed txout requires the attacker to\nfind a preimage, thus the security level is the number of bits for the\nnonce; 64 bits is sufficient. (remember the birthday attack doesn't\napply here) Unfortunately the most popular one-time-password scheme, the\nRFC6238 used in Google Authenticator, only outputs six digits numbers,\nwell below the security level required. (Google Auth is generally used\nin a time-mode, but also has a counter mode)\n\nThe older RFC2289 however turns the passwords into six words from a 2048\nentry wordlist, giving a 64-bit nonce with 2-bits of checksum. RFC2289\nimplementations are also well suited to paper print-outs and generally\nmake it easy to do so. RFC2289 as written uses SHA1, however the\nsuspected vulnerabilities in SHA1 are partial-preimage collisions, not\nrelevant in this application.\n\nIn a sense the user is now acting as an oracle answering the question of\nwhether or not funds should be allowed to move from savings to spending,\nwithout being responsible for where those funds are allowed to go. As\ndescribed in (2) it is easy to create a whole range of conditions by\nusing multiple nonces if the use-case demanded. For instance a corporate\nenvironment may want multiple parties to be required to authorize the\nfunds to move, possible with multiple nonces.\n\nIt's interesting to note how in some cases it may be preferable that the\nauthorization is simply authorization to spend without any other\ninvolvement. Here the party acting as an oracle not only doesn't need to\nknow where funds are going but can even authorize the spend in advance\nwithout two-way communication - possibly even prior to the funds being\nreceived in the first place. This authorization can be easily given\nmanually, for instance over the phone, and the accounting to keep track\nof the total amount authorized can be easily done with pen and paper -\nsomething not possible with CHECKMULTISIG wallets.\n\n\nFunding the wallet\n==================\n\nAs with any multi-party wallet receiving funds must also be handled\ncarefully to ensure an attacker can't fool the user into giving the\nsender the wrong address. This requires the involvement of all parties\nrequired to authorize an outgoing payment. In addition here the\nprotection only works if funds sent to the wallet are split up into the\ndiscrete authorization amounts the user wishes. (possibly with more than\none amount level)\n\nThere hasn't been as much thought put into these systems as there has\nbeen on payment protocols between a customer and a merchant, but the\nbasic idea is to have more than one device participate in the generation\nof payment request signed somehow. For fund splitting the request can be\nthat the funds are paid to multiple txouts in one go.  For recurring\npayments the request could have some mechanism for multiple addresses to\nbe specified for future use. Fall-back to a standard multi-signature\nwallet is possible as well.\n\nMore research is needed.\n\n\n1) https://gist.github.com/gavinandresen/5616606\n2) https://bitcointalk.org/index.php?topic=260898.msg2804469#msg2804469\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000006447c7d824b1952ba36ad1f34351be6904c30247591156460c\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130727/fbcf95af/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-28T01:20:08",
                "message_text_only": "On Sat, Jul 27, 2013 at 07:49:18PM -0400, Peter Todd wrote:\n> Implementation\n> ==============\n> \n> Savings use P2SH outputs matching the following scriptPubKey form:\n> \n> HASH160 <H(nonce_i)> EQUALVERIFY <pubkey> CHECKSIG\n> \n> spent with:\n> \n> <sig> <nonce_i>\n\nFWIW with some minor scripting language additions such as access to txin\nand txout contents, along with merklized abstract syntax tree (MAST)\nsupport, we can even implement a version where scriptPubKey's can be\nreused:\n\n    <pubkey> CHECKSIGVERIFY\n\n    // Verify we aren't spending more than the maximum spend amount\n    0 GET-TXIN-VALUE      // relative indexing\n    0 GET-TXOUT-VALUE\n    SUB\n    <max-spend-amount>\n    LESSTHAN\n    VERIFY\n\n    // If the txout is greater than the maximum spend amount force it to\n    // also follow these same rules.\n    0 GET-TXOUT-VALUE\n    <max-spend-amount>\n    LESSTHAN\n    IFNOT\n        GET-THIS-SCRIPT\n        MAST-HASH\n        <serialized script \"MAST-HASH MAST-EVAL\">\n        CAT\n        GET-TXOUT-SCRIPT\n        EQUALVERIFY\n    ENDIF\n\n    // Hash the provided oracle nonce, saving original for later.\n    DUP\n    HASH160\n\n    // Use the txid:vout nonce as an index to a table, embedded with MAST\n    // script compression.\n    0 GET-TXIN-TXID\n    0 GET-TXIN-VOUT\n    CAT\n    HASH160\n\n    // The table, n=64 levels deep, not all levels shown for brevity.\n    DUP\n    1\n    AND\n    IF\n        1\n        RSHIFT\n        DUP\n        1\n        AND\n        IF\n            1\n            RSHIFT\n            DUP\n            1\n            AND\n            IF\n                <MAST digest, not executed>\n            ELSE\n                1\n                RSHIFT\n                DUP\n                1\n                AND\n                IF\n                    // Lowest level contains the following pushdata,\n                    // with 0 <= i < 2^64\n                    <HASH160(HASH160(nonce-secret + i))>\n                ELSE\n                    <MAST digest, not executed>\n                ENDIF\n        ELSE\n            <MAST digest, not executed>\n        ENDIF\n    ELSE\n        <MAST digest, not executed>\n    ENDIF\n\n    // Drop the txid:vout nonce\n    SWAP\n    DROP\n\n    // Verify that the hash of the nonce and the pre-committed value in\n    // the H(nonce) table match.\n    EQUALVERIFY\n\n    // Stack now only contains the nonce preceeded by a merkle path linking\n    // that nonce to the tip of a merkle tree over all nonces.\n    //\n    // Verify that path.\n    SWAP // Move direction flag to the top\n    IF\n        SWAP\n    ENDIF\n    HASH160\n    (repeat above five lines 63 more times)\n\n    <nonce-merkle-tree-tip-digest>\n    EQUAL\n\nThe scriptPubKey is spent by the following scriptSig:\n\n    <nonce-merkle-path-0>...<nonce-merkle-path-63>\n    <nonce>\n    <signature>\n    <serialized-script>\n\n(note that I've left off a number of possible optimizations for clarity)\n\nNow when the user wishes to spend a txout greather than their spending\nlimit their wallet software will first give them a short 6 word string\ncalculated from the last 64-bits of H(txid:vout). They simply enter this\nstring into their phone, ideally via convenient qr-code or voice/thought\nrecognition, and their phone provides a second short 6 word string to\nenter into the wallet software on their computer, authorizing the\npayment. If they opt for a paper-based one-time-password table they\nsimply use the 6 word string as an index to their pre-printed OTP\nencyclopedia set.\n\nLike the previously described version the security level is still a\nhealthy 2^64 - again the attacker needs to find a 64-bit pre-image,\nconsidered to be a highly difficult task for any attacker unable to\ncount from 0 to 2^64 or store a table containing 2^64 values.\n\nThere is the disadvantage of the large storage requirements for both\nwallets, however because of the double hashed construction,\nH(H(nonce-secret+i)), neither table needs to be kept secret. Thus\nwithout loss of security both tables can be easily stored in a\ndistributed hash table in the cloud and queried as needed.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000012199fe3f1f54921e8e11c0b0d318ed6245dee22a4ad55bc65\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130727/3cfc9e58/attachment.sig>"
            },
            {
                "author": "John Dillon",
                "date": "2013-07-28T19:11:42",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn Sun, Jul 28, 2013 at 1:20 AM, Peter Todd <pete at petertodd.org> wrote:\n> FWIW with some minor scripting language additions such as access to txin\n> and txout contents, along with merklized abstract syntax tree (MAST)\n> support, we can even implement a version where scriptPubKey's can be\n> reused:\n\n<snip>\n\n>     // Stack now only contains the nonce preceeded by a merkle path linking\n>     // that nonce to the tip of a merkle tree over all nonces.\n>     //\n>     // Verify that path.\n>     SWAP // Move direction flag to the top\n>     IF\n>         SWAP\n>     ENDIF\n\nYou missed a 'CAT' opcode here.\n\n>     HASH160\n>     (repeat above five lines 63 more times)\n\n<snip>\n\n> payment. If they opt for a paper-based one-time-password table they\n> simply use the 6 word string as an index to their pre-printed OTP\n> encyclopedia set.\n\nI think you should disclose whether or not you have any ties to the pulp and\npaper business... By my calculations the production of a single OTP table would\nconsume roughly half of all the forest biomass on this planet.\n\n> Like the previously described version the security level is still a\n> healthy 2^64 - again the attacker needs to find a 64-bit pre-image,\n> considered to be a highly difficult task for any attacker unable to\n> count from 0 to 2^64 or store a table containing 2^64 values.\n>\n> There is the disadvantage of the large storage requirements for both\n> wallets, however because of the double hashed construction,\n> H(H(nonce-secret+i)), neither table needs to be kept secret. Thus\n> without loss of security both tables can be easily stored in a\n> distributed hash table in the cloud and queried as needed.\n\nROTFL!\n\nYour idea is better than you realize, you are just too paranoid for your own\ngood. The thing is the attacker isn't going to be someone paying you funds over\nyour minimum spending limit, which means the size of the table deriving which\nH(nonce) is selected for a given txid:vout can be significantly smaller. For\ninstance if you want to have 256 total payments before a 50:50 chance of any\npair using the same nonce, you only need a table with ~2^16 elements or with 20\nbyte hashes just a megabyte of data. It is the 16 level merkle proofs that are\nthe problem, 16*21=336 bytes of data in the scriptSig. Then again, that's only\n4.5x the size of a single signature, not unreasonable.\n\nAlso your nested IF statements, while a lovely and hilarious use of MAST, can\nbe replaced by simply creating the merkle tree over the tuples [i,H(nonce_i)]\nand proving that the nonce_i you provided matched the precommitted tree. Now\nyou only need to provide one merkle proof, not two.\n\nBut don't let me discourage you, rarely do I see elaborate jokes that also meet\nthe criteria to be a least publishable unit. :)\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQEcBAEBCAAGBQJR9WzMAAoJEEWCsU4mNhiP8wIIAJTESdZiIyrfmrJIQad19He0\nnPUB1UGdrcRyYBKfk2bxmIgeTppEneISerAzFpfsZk/R1vLSp2zuFvFLMvaTqF0a\nnof9dR4ztp753P6O9nLBIK1gcoOagg/FL61Cd1mQzoTjznGioEgk1mCo/Qjb8h9E\nI43De70j575bvUkq8RQgijctIt463bM7vfdBC6qtgSziL/xrLUDQEJ6Mhqz3rnmX\n+A2+MPHd/aGnRIcBuN6DFQTMXpjXG2y1CIM45e2gPL5x/vSIXqJoJs9tgGyzuFLG\nrR34GCsifUKxJyvswG5ue9rNuo5mDkri2jIFx8SlqhfT/b8iWU8JIieoZYGuMiA=\n=uhmy\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Two factor wallet with one-time-passwords",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "John Dillon",
                "Peter Todd"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 12929
        }
    },
    {
        "title": "[Bitcoin-development] Opcode whitelist for P2SH?",
        "thread_messages": [
            {
                "author": "John Dillon",
                "date": "2013-07-28T19:39:08",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nPeter Todd recently came up with two related, and IMO very good, uses for\nnon-standard transactions to implement both oracles and one-time-password\nprotection of wallet funds. While the wallet fund case could be implemented as\nonly a single standard type, at the cost of generality, the oracle case would\nbe most useful with more arbitrary rules. More generally it is also useful to\nbe able to have scriptPubKeys like the following:\n\n    n <pubkey>...<pubkey> m CHECKMULTISIG <master pubkey> CHECKSIG BOOLOR\n\nand many other similar constructions.\n\nWhat are your thoughts on creating a whitelist for specific opcodes that would\napply to scripts serialized using P2SH, retaining the existing standard\nwhitelist for scriptPubKeys? (I would still recommend dropping pay-to-pubkey\nand pay-to-multisig due to their potential for dumping data in the UTXO set)\n\nI'm thinking it should contain the following opcodes, picked for either being\nalready used, or having simple semantics:\n\n0 to 75 byte pushdata\nPUSHDATA1\n\n1NEGATE\nOP 1 to OP16 (numbers are allowed through pushdata anyway)\n\nIF\nNOTIF\nELSE\nENDIF\nVERIFY\nRETURN\n\nTOALTSTACK\nFROMALTSTACK (the alt-stack makes stack manipulation in complex ways possible)\nDROP\nDUP\nSWAP\n\nEQUAL\nEQUALVERIFY\n\n0NOTEQUAL\nBOOLAND\nBOOLOR\n\nRIPEMD160\nSHA1\nSHA256\nHASH160\nHASH256\n\nCHECKSIG\nCHECKSIGVERIFY\nCHECKMULTISIG\nCHECKMULTISIGVERIFY\n\nNote how this list allows for complex logic, but does not allow for arithmetic,\nthus not exposing us to a source of problems in the past.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQEcBAEBCAAGBQJR9XMQAAoJEEWCsU4mNhiPyXoIAMz2YZsq+/YUnq5G5AEVmJL/\nD7qrLpuI++auMEDoXzt8CqmXbDqci/d70IsBYeHdZkxBp2dah99iDzwIoBhtO/xh\nXR8m4P+FH+IF6xbuTUAQbBQxr9VuymUatUCmsFzP0YbtPwIzJvUAqJkVeYW1DUXj\n6pc9EW3iYdhAvpKNU7A19F6FA96y9m9DyBvY3TCHwzf591Ld1S8ghb9dEuKKYMGl\n8TuEMMU/bytZkdD590Ww+f6ukeSOMw9C9+IpAKotB2oq4F4Vkwyzw4rd8sNRAa6c\nlEDov6UtDSp4ALMfUxw/nxMO8UB43iJhu31KihcjOZpiYvRVeQlM8XLEvAafZvA=\n=Jph1\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-07-29T05:17:53",
                "message_text_only": "On Sunday, July 28, 2013 7:39:08 PM John Dillon wrote:\n> What are your thoughts on creating a whitelist for specific opcodes that\n> would apply to scripts serialized using P2SH, retaining the existing\n> standard whitelist for scriptPubKeys? (I would still recommend dropping\n> pay-to-pubkey and pay-to-multisig due to their potential for dumping data\n> in the UTXO set)\n\nThis would be reasonable for miners, but for interoperability between wallets, \nsome specific standard forms would still be necessary without a much smarter \nsolver (which would then expand the code required to implement a wallet, which \nis unfortunate if not entirely necessary)."
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-07-29T06:00:10",
                "message_text_only": "On Mon, Jul 29, 2013 at 1:17 AM, Luke-Jr <luke at dashjr.org> wrote:\n> On Sunday, July 28, 2013 7:39:08 PM John Dillon wrote:\n>> What are your thoughts on creating a whitelist for specific opcodes that\n>> would apply to scripts serialized using P2SH, retaining the existing\n>> standard whitelist for scriptPubKeys? (I would still recommend dropping\n>> pay-to-pubkey and pay-to-multisig due to their potential for dumping data\n>> in the UTXO set)\n>\n> This would be reasonable for miners, but for interoperability between wallets,\n> some specific standard forms would still be necessary without a much smarter\n> solver (which would then expand the code required to implement a wallet, which\n> is unfortunate if not entirely necessary).\n\nIndeed.  Current designs are all based around pattern matching a\nscript template.  Satoshi even described lightweight clients as\nneeding no script engine at all, only the ability to match patterns.\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-29T07:41:31",
                "message_text_only": "On Mon, Jul 29, 2013 at 02:00:10AM -0400, Jeff Garzik wrote:\n> On Mon, Jul 29, 2013 at 1:17 AM, Luke-Jr <luke at dashjr.org> wrote:\n> > On Sunday, July 28, 2013 7:39:08 PM John Dillon wrote:\n> >> What are your thoughts on creating a whitelist for specific opcodes that\n> >> would apply to scripts serialized using P2SH, retaining the existing\n> >> standard whitelist for scriptPubKeys? (I would still recommend dropping\n> >> pay-to-pubkey and pay-to-multisig due to their potential for dumping data\n> >> in the UTXO set)\n> >\n> > This would be reasonable for miners, but for interoperability between wallets,\n> > some specific standard forms would still be necessary without a much smarter\n> > solver (which would then expand the code required to implement a wallet, which\n> > is unfortunate if not entirely necessary).\n> \n> Indeed.  Current designs are all based around pattern matching a\n> script template.  Satoshi even described lightweight clients as\n> needing no script engine at all, only the ability to match patterns.\n\nWe're talking about two use-cases here: wallets protected by\nauthorization tokens for multi-factor security, and allowing funds to be\ncontrolled by oracles that attest that events have happened allowing the\nfunds to move.\n\nThe latter application especially demands a specialized wallet, yet can\nonly possibly work with non-standard script formats.\n\nIMO bringing the issue of wallet standardization into this discussion is\nkinda silly and premature; if you don't want to use those features, then\nyou're wallet can ignore them. As for the people that are, they can come\nup with appropriate standards for their needs.\n\nAfter all John's suggesting only allowing the loosened IsStandard()\nrules within P2SH, so until the txout is spent all *any* wallet sees is\na P2SH address with no information as to what scriptPubKey is needed to\nspend it.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000220b76f98fc9414043f765ec48dba3fb556e096caffbaae8ec\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130729/f6500b5f/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-29T08:13:55",
                "message_text_only": "On Sun, Jul 28, 2013 at 07:39:08PM +0000, John Dillon wrote:\n> Peter Todd recently came up with two related, and IMO very good, uses for\n> non-standard transactions to implement both oracles and one-time-password\n> protection of wallet funds. While the wallet fund case could be implemented as\n> only a single standard type, at the cost of generality, the oracle case would\n> be most useful with more arbitrary rules. More generally it is also useful to\n> be able to have scriptPubKeys like the following:\n> \n>     n <pubkey>...<pubkey> m CHECKMULTISIG <master pubkey> CHECKSIG BOOLOR\n> \n> and many other similar constructions.\n> \n> What are your thoughts on creating a whitelist for specific opcodes that would\n> apply to scripts serialized using P2SH, retaining the existing standard\n> whitelist for scriptPubKeys? (I would still recommend dropping pay-to-pubkey\n> and pay-to-multisig due to their potential for dumping data in the UTXO set)\n\nOne subtlety of what you are proposing is that we should still retain\nthe IsStandard() check, or to be exact the AreInputsStandard() check, if\na P2SH serialized script follows a standard form.\n\nThe reason is transaction mutability. Right now other than BIP11\nCHECKMULTISIG only miners can mutate transactions because any change to\nthe scriptSig will render the transaction non-standard. As you know this\nis a good thing because it means unconfirmed transaction chains don't\nget broken in flight.\n\nBIP11 is an interesting case because CHECKMULTISIG consumes one extra\nstack item, so when you spend a BIP11 n <pubkey>...<pubkey> m\nCHECKMULTISIG scriptPubKey you have to provide an additional item prior\nto the signatures; usually OP_0 is used.\n\nBut we don't actually check that! You can put anything there provided it\ndoesn't make the scriptSig go over the standard allowed scriptSig size\nof 500 bytes; for instance I (ab)used that feature just now to timestamp\nmy Litecoin v0.8.3.6 audit report SHA256 hash:\n\nd0dfe270e8e8e4c0196f780d42e34d8a1121f2f8a249586aa1a2c5ebcada10b1\n\nin transaction:\n\n15bb08318335f94a8de154dc39b03db2cdebcc7a96ab6cec0379978676d00301\n\nIt's been suggested that we consider transactions non-standard, or just\nnow allowed at all in a future soft-fork, if at the end of execution\nthere is more than one stack item left; a opcode whitelist should\nprobably do this. On the other hand I've come up with some soft-fork\nupgrade mechanisms that would leave extra items on the stack for\nnon-upgraded nodes, suggesting a soft-fork imposing this is a bad idea.\n(though note how it suggests considering such tx's non-standard is\nreasonable in a few ways)\n\nCHECKMULTISIG isn't helped here because the value really is ignored - a\nsoft-fork to force it to always be zero might not be a bad idea, though\nit's far from the only example of mutability.\n\nI'd be interested if you can come up with an example where imposing a\none stack item at the end of execution rule causes problems.\n\n\nMore generally, and getting a bit off topic, I think Bitcoin should have\nbeen designed so that CHECKSIG signed hashes of scriptPubKeys, rather\nthan txid:vout outputs, so that malleability wouldn't affect the\nvalidity of a signature. Of course, this would mean that signatures\ncould be reused if scriptPubKeys were reused, but address re-use is a\nbad thing anyway! Not that I'll fault Satoshi here, type 2 deterministic\nwallets were unknown back then. (though we should be careful that a\nfuture CHECKSIG design can go back to txid:vout references - ECC is\nunique in allowing for type 2 wallets)\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000053ef658095fb45c7a86955d70c76b44264c7abce79683a8a90\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130729/06f51fbd/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Opcode whitelist for P2SH?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "John Dillon",
                "Luke-Jr",
                "Peter Todd",
                "Jeff Garzik"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 9863
        }
    },
    {
        "title": "[Bitcoin-development] BitMail - p2p Email 0.1. beta",
        "thread_messages": [
            {
                "author": "Randolph D.",
                "date": "2013-07-30T05:01:02",
                "message_text_only": "http://bitmail.sourceforge.net/\n\n\n   - Secure P2P Email from Friend to Friend without relying on a central\n   server.\n   - Key- / Repleo-Exchange.\n   - Full decentral Email-Network using the Echo Protocol.\n   - Store Email for Offline-Friends in the P2P Network.\n   - Chat and Instant Messaging is build in. Define & Add your friends.\n   - Strong e2e Multi-Encryption (PGP-kind/AES over SSL: using\nlibgcrypt<http://www.gnu.org/software/libgcrypt/>).\n\n   - Libspoton Integration.\n   - Additional Security Layer with the GB-Feature for Emails.\n   - Preventing Data Retention (VDS). WoT-less.\n   - HTTP & HTTPS Connections.\n   - Open Source. BSD License.\n\nanyone with a Server? Key?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/a149c342/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-07-30T06:50:12",
                "message_text_only": "On Mon, Jul 29, 2013 at 10:01 PM, Randolph D. <rdohm321 at gmail.com> wrote:\n> Secure P2P Email from Friend to Friend without relying on a central server.\n> Key- / Repleo-Exchange.\n> Full decentral Email-Network using the Echo Protocol.\n> Store Email for Offline-Friends in the P2P Network.\n> Chat and Instant Messaging is build in. Define & Add your friends.\n> Strong e2e Multi-Encryption (PGP-kind/AES over SSL: using libgcrypt).\n> Libspoton Integration.\n> Additional Security Layer with the GB-Feature for Emails.\n> Preventing Data Retention (VDS). WoT-less.\n> HTTP & HTTPS Connections.\n> Open Source. BSD License.\n>\n> anyone with a Server? Key?\n\nKeep safe everyone:\n\nA number of apparent sock accounts has been posting about what appears\nto be the same software under the name \"goldbug\" for a couple days\nnow:\n\ne.g.\nhttps://lists.torproject.org/pipermail/tor-talk/2013-July/029107.html\nhttps://lists.torproject.org/pipermail/tor-talk/2013-July/029125.html\nhttp://lists.gnupg.org/pipermail/gnupg-users/2013-July/047137.html"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-30T08:40:45",
                "message_text_only": "For people who are interested in such technologies, I recommend looking at\nPond:\n\nhttps://pond.imperialviolet.org/\n\nIt is written by Adam Langley, so it comes with some serious credentials\nbehind it. It provides asynchronous email-like messaging that's forward\nsecure, resistant to traffic analysis and the whole thing runs over Tor.\nMessages are stored for a week and are strictly limited in size. There's no\nspam because nobody has an address - instead you have to grant someone the\nability to message you by giving them a small file. So, not really intended\nas an email competitor convenience wise, but it has many interesting ideas\nand a reasonable GUI.\n\nAs a testament to the seriousness with which Pond takes forward security,\nit can use the NVRAM in a TPM chip to reliably destroy keys for data that\nan SSD device might have otherwise made un-erasable.\n\nThe main downside - it's written in Go :)\n\n\nOn Tue, Jul 30, 2013 at 8:50 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Mon, Jul 29, 2013 at 10:01 PM, Randolph D. <rdohm321 at gmail.com> wrote:\n> > Secure P2P Email from Friend to Friend without relying on a central\n> server.\n> > Key- / Repleo-Exchange.\n> > Full decentral Email-Network using the Echo Protocol.\n> > Store Email for Offline-Friends in the P2P Network.\n> > Chat and Instant Messaging is build in. Define & Add your friends.\n> > Strong e2e Multi-Encryption (PGP-kind/AES over SSL: using libgcrypt).\n> > Libspoton Integration.\n> > Additional Security Layer with the GB-Feature for Emails.\n> > Preventing Data Retention (VDS). WoT-less.\n> > HTTP & HTTPS Connections.\n> > Open Source. BSD License.\n> >\n> > anyone with a Server? Key?\n>\n> Keep safe everyone:\n>\n> A number of apparent sock accounts has been posting about what appears\n> to be the same software under the name \"goldbug\" for a couple days\n> now:\n>\n> e.g.\n> https://lists.torproject.org/pipermail/tor-talk/2013-July/029107.html\n> https://lists.torproject.org/pipermail/tor-talk/2013-July/029125.html\n> http://lists.gnupg.org/pipermail/gnupg-users/2013-July/047137.html\n>\n>\n> ------------------------------------------------------------------------------\n> Get your SQL database under version control now!\n> Version control is standard for application code, but databases havent\n> caught up. So what steps can you take to put your SQL databases under\n> version control? Why should you start doing it? Read more to find out.\n> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/d5fbfe8d/attachment.html>"
            },
            {
                "author": "Wendell",
                "date": "2013-07-30T11:27:02",
                "message_text_only": "Can you explain this process for those of us not too familiar with TPM chips?\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n\nOn Jul 30, 2013, at 10:40 AM, Mike Hearn wrote:\n\n> As a testament to the seriousness with which Pond takes forward security, it can use the NVRAM in a TPM chip to reliably destroy keys for data that an SSD device might have otherwise made un-erasable."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-30T12:12:51",
                "message_text_only": "The TPM is a piece of secure* hardware that provides various cryptographic\nservices to the host system. It is important to understand that it is not a\ncrypto accelerator. It is a place to store keys and small pieces of data\n(like hashes, counters) where it's difficult for someone to extract them\neven if they have physical access.\n\nThe TPM is designed to support trusted computing, a rather splendid set of\nextensions to the x86 architecture that let you do remote attestation,\nsoftware sealing and other things. Or at least it would be splendid if it\nhad been really finished off and pushed to completion by the designers.\nUnfortunately due to various political issues it exists in a\nquasi-finished, semi-broken state which only experts can use. Without a\ndoubt you have never run any software in a TC environment.\n\nAs part of that role, the TPM provides some permanent storage in the form\nof NVRAM. Because the TPM is designed to be as cheap as possible, it has a\nlimited number of write cycles. Normally you're meant to store Intel TXT\nlaunch control policies and sealed keys there, but Pond uses it in a\ndifferent way by storing keys there that it encrypts local data with. By\nerasing the key in the TPM chips memory area, the data on disk is\neffectively destroyed too.\n\nThis is useful because modern \"disks\" are often SSD drives, or physical\nmetal disks that use log structured file systems. Because flash memory has\na limited number of write cycles per cell, internally SSDs have firmware\nthat remap writes from logical addresses to different physical addresses,\nthe goal is to avoid wearing down the drive and extend its useful life.\nNormally it doesn't matter, but if you want to delete data such that it's\nreally really gone, it obviously poses a problem. Using TPM NVRAM solves\nit, albiet, at a high usability cost.\n\n\n\n*note: actual tamper resistance of real-world TPM chips is not something\nthat seems to have been studied much\n\n\nOn Tue, Jul 30, 2013 at 1:27 PM, Wendell <w at grabhive.com> wrote:\n\n> Can you explain this process for those of us not too familiar with TPM\n> chips?\n>\n> -wendell\n>\n> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n>\n> On Jul 30, 2013, at 10:40 AM, Mike Hearn wrote:\n>\n> > As a testament to the seriousness with which Pond takes forward\n> security, it can use the NVRAM in a TPM chip to reliably destroy keys for\n> data that an SSD device might have otherwise made un-erasable.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/326a4eca/attachment.html>"
            },
            {
                "author": "Randolph D.",
                "date": "2013-07-31T16:11:32",
                "message_text_only": "right the original Topic was BitMail\nhere a Server running for the next few days to test BitMail.sf.net\n\n 178.83.35.133:4710\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/4dbf6bd0/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BitMail - p2p Email 0.1. beta",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Gregory Maxwell",
                "Randolph D.",
                "Wendell"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 8074
        }
    },
    {
        "title": "[Bitcoin-development] Tor and Bitcoin",
        "thread_messages": [
            {
                "author": "Bazyli Zygan",
                "date": "2013-07-30T12:01:39",
                "message_text_only": "Hi everyone,\n\nWe at Hive had plans to make our wallet proxy through Tor by default. When it became apparent that this was not presently possible because bitcoinj lacks SOCKS support, it opened a minor discussion suggesting that this is perhaps not advisable practice for SPV wallets in the first place. To quote Mike Hearn:\n\n> I think you have to be careful with Tor and Bitcoin. It isn't a no-brainer move. Virtually all people today don't have hacked internet connections. However when you connect outbound from Tor you have to pretty much assume your traffic is being packet logged and sometimes automatically MITMd by exit nodes, which in turn means you can be transparently connected to a sybil network. If you connect to a hidden service the issue is less problematic because you're authenticating the connection and can pick peers you have reason to believe are independent.\n> \n> Whilst it's unlikely an attacker would actually try to auto-sybil SPV connections made out of a Tor exit node, if they did, they could make the person connecting out believe in fake pending/unconfirmed transactions. For instance if you're meeting with someone to do a currency trade and you happen to run an exit node that has a lot of bandwidth and an exit policy that allows only Bitcoin, there's a chance the other persons Tor client will pick your exit. You can then swap the cash, give them a fake transaction and when it doesn't confirm, apologise and say you can't wait and have to go. Walk out with the cash and it'll take a while for the victim to realize that the transaction never did actually get broadcast at all, it was just an illusion.\n> \n> (this scenario worries me for mobile clients but instead of tor, the issue is an attacker controlled open wifi hotspot).\n> \n> I think to support Tor really well [in bitcoinj], we'd need not only to make SOCKS work, but also add a way to use hidden peers and then try and come up with an anti-sybil heuristic. Unfortunately it's unclear what such a heuristic would look like. Bitcoin-Qt uses different /16s as a rule of thumb when on the clearnet, but no such technique is usable on Tor because by definition you aren't supposed to know anything about the hidden peers.\n\nWhile the scenario outlined seems unlikely, it's best to be prepared... What do you all think? How can this be done properly?\n\nAs we said to Mike, if Thailand has actually made Bitcoin illegal, then packet filtering may not be far off for certain regions, and it would nice to be proactive and prepared. At the moment, Thailand already has cruder, URL-based filtering... But vendors like Cisco are no doubt constantly selling them on the virtues of more advanced censorship technologies.\n\nGregory Maxwell is the person who wrote the hidden service support for bitcoind, right? It might be interesting to get his comments here. \n\n/b\n\ngrabhive.com (http://grabhive.com) | twitter.com/grabhive (http://twitter.com/grabhive) | gpg: A1D5047E\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/81c23264/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-30T12:41:53",
                "message_text_only": "Various ideas are possible:\n\n* Use the Tor SOCKS proxy in such a way that it creates a guaranteed\nindependent circuit to a different exit node each time you connect. This\ngets you back to the slightly stronger clearnet heuristic of \"if I saw a\nbunch of peers announce my tx, then it's probably valid\". I don't know if\nthis is possible.\n\n* Have a set of hard-coded long term stable hidden peers, that are run by\nknown community members who are not going to collaborate to defraud people.\nOf course if they're run by people who are well known that rather defeats\nthe point of them being hidden, but you benefit from the fact that the\n.onion names double as authentication tokens.\n\n* Talk the Tor protocol directly and have the app explicitly pick its own\ndiverse set of exit nodes, one per p2p connection. This is likely to be\ncomplicated. Last time I looked Tor doesn't provide any kind of library or\nAPI.\n\nI agree that it's a kind of theoretical attack right now, but then again,\nI'm not aware of any countries that block Bitcoin either. The thing with\nThailand seems like it might be the result of some confusion over who\nexactly can make laws in that country. I'd be more concerned about\nArgentina, but we're a long way from ISPs searching for people to arrest by\nlooking for port 8333.\n\nSupporting SOCKS (really: blocking sockets) would be a good thing anyway.\nUsing blocking sockets also means we'd get SSL support, so if at some point\nBitcoin nodes start supporting SSL we'd be able to use it more easily.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/4dfc1147/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-07-30T14:01:56",
                "message_text_only": "On Tue, Jul 30, 2013 at 8:41 AM, Mike Hearn <mike at plan99.net> wrote:\n> * Talk the Tor protocol directly and have the app explicitly pick its own\n> diverse set of exit nodes, one per p2p connection. This is likely to be\n> complicated. Last time I looked Tor doesn't provide any kind of library or\n> API.\n\nThis has been discussed on IRC, and would be interesting to explore.\nFor several applications, linking directly with a Tor library is far\nsuperior to the fragility of requiring a properly configured external\nprocess.  Lacking such a Tor library right now, one must be written\n<hint hint>\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Wendell",
                "date": "2013-07-30T17:02:58",
                "message_text_only": "I suppose it isn't quite what you're talking about but we did push this out today:\n\nTor.framework, for Cocoa developers, similar to our BitcoinKit:\nhttps://github.com/grabhive/Tor.framework\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n\nOn Jul 30, 2013, at 4:01 PM, Jeff Garzik wrote:\n\n> This has been discussed on IRC, and would be interesting to explore.\n> For several applications, linking directly with a Tor library is far\n> superior to the fragility of requiring a properly configured external\n> process.  Lacking such a Tor library right now, one must be written\n> <hint hint>"
            },
            {
                "author": "Bazyli Zygan",
                "date": "2013-07-30T17:20:54",
                "message_text_only": "Apparently that won't help. That's just embeding the existing tor code and rerouting internal Cocoa internet communication via tors proxy.\nWhat guys need is bigger configurability in tor itself. I can understand that. It's doable tough.\n\nGosh, why a day has only 24h? :) \n\n/b\n\ngrabhive.com (http://grabhive.com) | twitter.com/grabhive (http://twitter.com/grabhive) | gpg: A1D5047E\n\n\nOn Tuesday, 30 July 2013 at 19:02, Wendell wrote:\n\n> I suppose it isn't quite what you're talking about but we did push this out today:\n> \n> Tor.framework, for Cocoa developers, similar to our BitcoinKit:\n> https://github.com/grabhive/Tor.framework\n> \n> -wendell\n> \n> grabhive.com (http://grabhive.com) | twitter.com/grabhive (http://twitter.com/grabhive) | gpg: 6C0C9411\n> \n> On Jul 30, 2013, at 4:01 PM, Jeff Garzik wrote:\n> \n> > This has been discussed on IRC, and would be interesting to explore.\n> > For several applications, linking directly with a Tor library is far\n> > superior to the fragility of requiring a properly configured external\n> > process. Lacking such a Tor library right now, one must be written\n> > <hint hint>\n> > \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Get your SQL database under version control now!\n> Version control is standard for application code, but databases havent \n> caught up. So what steps can you take to put your SQL databases under \n> version control? Why should you start doing it? Read more to find out.\n> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net (mailto:Bitcoin-development at lists.sourceforge.net)\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/5035eb6c/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-30T18:30:43",
                "message_text_only": "On Tue, Jul 30, 2013 at 02:01:39PM +0200, Bazyli Zygan wrote:\n> > I think to support Tor really well [in bitcoinj], we'd need not only to make SOCKS work, but also add a way to use hidden peers and then try and come up with an anti-sybil heuristic. Unfortunately it's unclear what such a heuristic would look like. Bitcoin-Qt uses different /16s as a rule of thumb when on the clearnet, but no such technique is usable on Tor because by definition you aren't supposed to know anything about the hidden peers.\n> \n> While the scenario outlined seems unlikely, it's best to be prepared... What do you all think? How can this be done properly?\n\nThere was a good reply to those concerns last time the issue came up:\n\n    Tor does not act as a particularly effective man in the middle for nodes\n    that support connections to hidden services because while your\n    connections to standard Bitcoin nodes go through your exit node, the\n    routing path for each hidden service peer is independent. Having said\n    that we should offer modes that send your self-generated transactions\n    out via Tor, while still maintaining non-Tor connections.\n\n    Anyway Sybil attacks aren't all that interesting if you are the one\n    sending the funds, and receivers are reasonably well protected simply\n    because generating false confirmations is extremely expensive and very\n    difficult to do quickly. After all, you always make the assumption that\n    nearly all hashing power in existence is honest when you talk about\n    replace-by-fee among other things, and that assumption naturally leads\n    to the conclusion that generating false confirmations with a sybil\n    attack would take more than long enough that the user would be\n    suspicious that something was wrong long before being defrauded.\n\n    I'd be surprised if anyone has ever bothered with a false confirmation\n    sybil attack. I wouldn't be the slightest bit surprised if the NSA is\n    recording all the Bitcoin traffic they can for future analysis to find\n    true transaction origins. Which reminds me, again, we need node-to-node\n    connections to be encrypted to at least protect against network-wide\n    passive sniffiing.\n\n    Regarding usage I would be interested to hear from those running Bitcoin\n    nodes advertising themselves as hidden services.\n    -http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg02438.html\n\ntl;dr: Users should be using Tor to preserve their privacy and the MITM\nrisks are minimal to anyone using Bitcoin correctly. (don't trust\nzero-conf transactions, they are not secure!)\n\n> Gregory Maxwell is the person who wrote the hidden service support for bitcoind, right? It might be interesting to get his comments here.\n\nYeah, he had the idea of adding .onion addresses of seed nodes\nalong-side the DNS seeds table; that would give an end-to-end MITM-proof\nchannel to a trusted seed who can in turn give an honest view of the\nnetwork.\n\nIdeally those .onion addresses would be of nodes run by the same people\nas running the existing seeds so that it was clear who was being trusted\n- I'll write a patch to do this soon with a .onion testnet seed first.\n(I run one of the testnet DNSSEED seeds and have a small grant from the\nfoundation to do so)\n\nBitcoin relays .onion addresses over the P2P network, so once you are\nconnected you can gain additional peers with addresses that are MITM\nresistant. Currently there isn't any equivalent to the (weak) anti-sybil\nproperties of IP address range diversity for .onion's, but in the future\nwe'll eventually add node identities and some way to make creating lots\nof fake identities for a sybil attack expensive.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000321cb1ef9de9c4a6c470c7f88c4b85bcee3a63121e31096fef\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/f5533f0c/attachment.sig>"
            },
            {
                "author": "Wendell",
                "date": "2013-07-30T19:36:50",
                "message_text_only": "Thank you Peter.\n\nDoes this advice apply equally to both full and SPV nodes? At this point I'm merely curious, since we don't have the option to run bitcoinj over Tor right now anyway.\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n\nOn Jul 30, 2013, at 8:30 PM, Peter Todd wrote:\n\n> tl;dr: Users should be using Tor to preserve their privacy and the MITM\n> risks are minimal to anyone using Bitcoin correctly. (don't trust\n> zero-conf transactions, they are not secure!)\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 841 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/529ad341/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-30T20:11:41",
                "message_text_only": "On Tue, Jul 30, 2013 at 09:36:50PM +0200, Wendell wrote:\n> Thank you Peter.\n> \n> Does this advice apply equally to both full and SPV nodes? At this point I'm merely curious, since we don't have the option to run bitcoinj over Tor right now anyway.\n\nYes, although remember that in general SPV nodes are significantly less\nsafe because they depend soley on confirmations for security; it's often\nnot appreciated that an attacker can target multiple SPV-using entities\nat once by creating a invalid block header with any number of completely\nfake payments linked to it; if you can attack n targets at once, the\ncost to perform the attack is n times less per target. \n\nUnrelated to Tor, but an interesting possibility to improve SPV security\nis to ask for the history of a given txout - that is the previous\ntransactions that funded it. You could even do this with a\nzero-knowledge proof, sampling some subset of the prior transactions to\ndetect fraud. Unfortunately none of the infrastructure is setup to do\nthis, and txid's aren't constructed in ways that make these kinds of\nproofs cheap. (you really want a merkle tree over the txin and txout\nsets)\n\nWork thinking about for the future in any case - the above can be\nimplemented as a soft-fork.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000077bb3b12c68ada1e2965411a973b07fc721834154df07aa5c9\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/8f8457a1/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-30T20:12:50",
                "message_text_only": "On Tue, Jul 30, 2013 at 04:11:41PM -0400, Peter Todd wrote:\n> Unrelated to Tor, but an interesting possibility to improve SPV security\n> is to ask for the history of a given txout - that is the previous\n> transactions that funded it. You could even do this with a\n> zero-knowledge proof, sampling some subset of the prior transactions to\n\ns/zero-knowledge/non-interactive/\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000007f87c6d7e6b8c2dbf36c72c3db4a05055b604faeec59bda024\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130730/3a61e8c1/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Tor and Bitcoin",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Bazyli Zygan",
                "Mike Hearn",
                "Peter Todd",
                "Wendell"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 15323
        }
    },
    {
        "title": "[Bitcoin-development] [bitcoin-list] BitMail - p2p Email 0.1. beta",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2013-07-30T22:17:44",
                "message_text_only": "TPMs have come as standard with nearly all computers (except Macs, doh) for\na long time. They certainly don't cost $100. More like a few dollars at\nmost. That's why they're so slow.\n\n\nOn Tue, Jul 30, 2013 at 10:43 PM, grarpamp <grarpamp at gmail.com> wrote:\n\n> On Tue, Jul 30, 2013 at 8:12 AM, Mike Hearn <mike at plan99.net> wrote:\n> > The TPM is a piece of secure* hardware\n>\n> I've seen some motherboards with a TPM module header but none\n> came with it installed. I think the modules themselves might be\n> $50-$100 range. They might come with some API docs.\n> Some of you might have links to ones you've used...\n>\n> > As part of that role, the TPM provides some permanent storage in the form\n> > of NVRAM. Because the TPM is designed to be as cheap as possible, it has\n> a\n> > limited number of write cycles. Normally you're meant to store Intel TXT\n> > launch control policies and sealed keys there\n>\n> > the goal is to avoid wearing down the drive and extend its useful life.\n> > Normally it doesn't matter, but if you want to delete data such that it's\n> > really really gone, it obviously poses a problem. Using TPM NVRAM solves\n> > it, albiet, at a high usability cost.\n>\n> If said TPM storage has a 'limited [but unfixed number of write cycles',\n> that\n> sounds unreliable. It would seem to me that both reliable and 'really gone'\n> are achievable on platters (or lesser, with ssd) provided the disk was also\n> encrypted. Nuke that key and it's reliably gone.\n>\n>\n> ------------------------------------------------------------------------------\n> Get your SQL database under version control now!\n> Version control is standard for application code, but databases havent\n> caught up. So what steps can you take to put your SQL databases under\n> version control? Why should you start doing it? Read more to find out.\n> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n> _______________________________________________\n> bitcoin-list mailing list\n> bitcoin-list at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-list\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/7c66d8a1/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-31T09:08:53",
                "message_text_only": "\"Support\" for a TPM is a rather tricky thing.\n\nBy itself the TPM is independent of any CPU. However, it's also not very\nuseful (though for Pond's use case, it works).\n\nThe TPM gets much more useful when it's integrated with features on the\nmotherboard, BIOS, CPU, northbridge, IOMMU etc. Then you have a full blown\nTCG-compliant TC environment, which is useful for many things. Actually it\nwas never very useful for DRM - that was only one theoretical possibility\nthat was never implemented and even if it had been, TC is to DRM much as\ncryptography is to DRM. So the FUD was just that: fear, uncertainty and\ndoubt which probably crippled a highly useful cryptographic security tool\nfor good. One of the more shameful periods of the tech industries history,\nif you ask me.\n\n\n\nOn Wed, Jul 31, 2013 at 5:39 AM, Blibbet <blibbet at gmail.com> wrote:\n\n> On 7/30/13 3:58 PM, grarpamp wrote:\n> > [...] And if AMD even has this stuff.  [...]\n>\n> Yes, AMD does have TPM.\n>\n> Sorry, not sure which models support it.\n>\n> http://www.amd.com/us/products/embedded/das/Pages/security.aspx\n>\n>\n> http://www.amd.com/us/products/desktop/platforms/Pages/desktop-platforms.aspx\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Get your SQL database under version control now!\n> Version control is standard for application code, but databases havent\n> caught up. So what steps can you take to put your SQL databases under\n> version control? Why should you start doing it? Read more to find out.\n> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n> _______________________________________________\n> bitcoin-list mailing list\n> bitcoin-list at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-list\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/434df919/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-31T15:54:20",
                "message_text_only": "Sorry, I just noticed that this thread was CCd to the announce list not the\ndevelopment list (why is it open access?)\n\nIt's offtopic anyway. Let's continue this discussion in private if anyone\nwants to.\n\n\nOn Wed, Jul 31, 2013 at 5:53 PM, Mike Hearn <mike at plan99.net> wrote:\n\n>\n> The reason why TPM functionality was so much hated upon is because\n>> it was pushed by a software/hardware monopoly, not just for DRM but\n>> for locking down the system in general.\n>>\n>\n> Regardless of what some people might have imagined or extrapolated at the\n> time, the actual published specifications and technologies were nothing\n> like that. There has never been a TC/TPM mode that would have generally\n> locked systems down or even been useful for DRM (that'd have required a\n> trusted hardware path which was never specced nor implemented).\n>\n> Locking a system down against tampering or for DRM does not require\n> flexible open specifications with multiple competing implementations. It\n> requires you to do an Xbox 360.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/8d1fff0b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BitMail - p2p Email 0.1. beta",
            "categories": [
                "Bitcoin-development",
                "bitcoin-list"
            ],
            "authors": [
                "Mike Hearn"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 5417
        }
    },
    {
        "title": "[Bitcoin-development] Payment Protocol: BIP 70, 71, 72",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2013-07-31T06:28:25",
                "message_text_only": "I've turned the preliminary payment protocol spec into three BIPs:\n\nhttps://en.bitcoin.it/wiki/BIP_0070 : Network protocol / messages\nhttps://en.bitcoin.it/wiki/BIP_0071 : MIME types for the messages\nhttps://en.bitcoin.it/wiki/BIP_0072 : bitcoin: URI extension\n\nI expect the wallet-side implementation to be pulled into Bitcoin-Qt Real\nSoon:\n  https://github.com/bitcoin/bitcoin/pull/2539\n\nThere is also a reference implementation of server-side code for generating\npayment requests in php and C++ :\n  https://github.com/gavinandresen/paymentrequest\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/e5088939/attachment.html>"
            },
            {
                "author": "Roy Badami",
                "date": "2013-07-31T08:45:39",
                "message_text_only": "On Wed, Jul 31, 2013 at 04:28:25PM +1000, Gavin Andresen wrote:\n> I've turned the preliminary payment protocol spec into three BIPs:\n> \n> https://en.bitcoin.it/wiki/BIP_0070 : Network protocol / messages\n> https://en.bitcoin.it/wiki/BIP_0071 : MIME types for the messages\n> https://en.bitcoin.it/wiki/BIP_0072 : bitcoin: URI extension\n\n\nIs it envisaged to be possible/sensible to have a URI that is *only* a\npayment request?  i.e. something like the following (although I'm not\nsure this is a valid URI):\n\nbitcoin:?request=https%3A%2F%2Fmerchant.com%2Fpay.php%3Fh%3D2a8628fc2fbe\n\nroy"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-07-31T08:59:37",
                "message_text_only": "Woo, huzzah :-)\n\nNow the BIP draft is available and we know it all hangs together, I'm\nhoping to (re)start implementation work in bitcoinj in the next month or\ntwo. I'm currently trying to figure out which is more important,\ndeterministic wallets or payment protocol, but I think right now the\npayment protocol would be easier to do and would benefit more from a second\nimplementation. HD wallets have already been shown interoperable.\n\nComments on BIP 70:\n\n   \"PaymentRequest messages larger than 50,000 bytes should be rejected by\nthe merchant's server, to mitigate denial-of-service attacks.\"\n\nDo you mean \"users wallet\" here?\n\nYou could note in the motivation section two more motivations:\n\n1) That the protocol can be a foundation on which other features are built\n2) That it is required to assist hardware wallets when there is a virus on\nthe system\n\nPerhaps note in the BIP that the merchant should not assume the\nmerchant_data field is trustworthy - malicious buyers could rewrite it as\nthey see fit. Point out that a good way to use this is to serialize server\nstate, signed by a merchant-only key, in the same way one might use an HTTP\ncookie.\n\n   \"PaymentDetails.payment_url must be secure against man-in-the-middle\nattacks that might alter Payment.refund_to (if using HTTP, it must be\nTLS-protected).\n\nThis says \"must\", but what should a client do here if the payment URL is\nnot HTTPS? I suggest weakening this to \"should\", as sometimes TLS is\nredundant (e.g. if you're sending to a Tor hidden service).\n\nThe PaymentACK message contains a copy of Payment, but the BIP doesn't say\nwhat to do with it. I assume this means a client is free to ignore it and\nrely on TCP state to figure out the payment/ack connection instead? It may\nbe worth noting that explicitly.\n\nIn the certificates section, you could observe that \"validation\" means\n\"verification that it correctly chains to a trusted root authority, where\ntrusted roots may be obtained from the operating system. If there is no\noperating system, the Mozilla root store is recommended\".\n\nAll the rest LGTM.\n[edit<https://en.bitcoin.it/w/index.php?title=BIP_0070&action=edit&section=7>\n]\n\n\nOn Wed, Jul 31, 2013 at 8:28 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> I've turned the preliminary payment protocol spec into three BIPs:\n>\n> https://en.bitcoin.it/wiki/BIP_0070 : Network protocol / messages\n> https://en.bitcoin.it/wiki/BIP_0071 : MIME types for the messages\n> https://en.bitcoin.it/wiki/BIP_0072 : bitcoin: URI extension\n>\n> I expect the wallet-side implementation to be pulled into Bitcoin-Qt Real\n> Soon:\n>   https://github.com/bitcoin/bitcoin/pull/2539\n>\n> There is also a reference implementation of server-side code for\n> generating payment requests in php and C++ :\n>   https://github.com/gavinandresen/paymentrequest\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Get your SQL database under version control now!\n> Version control is standard for application code, but databases havent\n> caught up. So what steps can you take to put your SQL databases under\n> version control? Why should you start doing it? Read more to find out.\n> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/dac8939e/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-07-31T11:19:05",
                "message_text_only": "Thanks, Mike!\n\n   \"PaymentRequest messages larger than 50,000 bytes should be rejected by\n> the merchant's server, to mitigate denial-of-service attacks.\"\n>\n> Do you mean \"users wallet\" here?\n>\n\nYes, fixed.\n\n\n\n> You could note in the motivation section two more motivations:\n> 1) That the protocol can be a foundation on which other features are built\n>\n\nI don't like putting \"this is what we think will happen in the future\"\ntypes of statements in specifications, so I'm inclined to leave that out.\n\n\n> 2) That it is required to assist hardware wallets when there is a virus on\n> the system\n>\n\nAdded:\n\n\"Resistance from man-in-the-middle attacks that replace a merchant's\nbitcoin address with an attacker's address before a transaction is\nauthorized with a hardware wallet.\"\n\nPerhaps note in the BIP that the merchant should not assume the\n> merchant_data field is trustworthy - malicious buyers could rewrite it as\n> they see fit. Point out that a good way to use this is to serialize server\n> state, signed by a merchant-only key, in the same way one might use an HTTP\n> cookie.\n>\n\nAdded:\n\n\"Note that malicious clients may modify the merchant_data, so should be\nauthenticated in some way (for example, signed with a merchant-only key).\"\n\n\n>    \"PaymentDetails.payment_url must be secure against man-in-the-middle\n> attacks that might alter Payment.refund_to (if using HTTP, it must be\n> TLS-protected).\n>\n> This says \"must\", but what should a client do here if the payment URL is\n> not HTTPS? I suggest weakening this to \"should\", as sometimes TLS is\n> redundant (e.g. if you're sending to a Tor hidden service).\n>\n\ndone.\n\n\n> The PaymentACK message contains a copy of Payment, but the BIP doesn't say\n> what to do with it. I assume this means a client is free to ignore it and\n> rely on TCP state to figure out the payment/ack connection instead? It may\n> be worth noting that explicitly.\n>\n\nAdded:\n\n\"payment | Copy of the Payment message that triggered this PaymentACK.\nClients may ignore this if they implement another way of associating\nPayments with PaymentACKs.\"\n\n\n>\n> In the certificates section, you could observe that \"validation\" means\n> \"verification that it correctly chains to a trusted root authority, where\n> trusted roots may be obtained from the operating system. If there is no\n> operating system, the Mozilla root store is recommended\".\n>\n\nModified that section to say:\n\n\"...followed by additional certificates, with each subsequent certificate\nbeing the one used to certify the previous one, up to a trusted root\nauthority. The recipient must verify the certificate chain according to\n[RFC5280] and reject the PaymentRequest if any validation failure occurs.\n\nTrusted root certificates may be obtained from the operating system; if\nvalidation is done on a device without an operating system, the Mozilla\nroot store<http://www.mozilla.org/projects/security/certs/included/index.html>\nis\nrecommended.\"\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/6d60201c/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-07-31T11:33:07",
                "message_text_only": "On Wed, Jul 31, 2013 at 6:45 PM, Roy Badami <roy at gnomon.org.uk> wrote:\n>\n> Is it envisaged to be possible/sensible to have a URI that is *only* a\n> payment request?  i.e. something like the following (although I'm not\n> sure this is a valid URI):\n>\n> bitcoin:?request=https%3A%2F%2Fmerchant.com%2Fpay.php%3Fh%3D2a8628fc2fbe\n\nI think we'll want a bitcoin address in there for a long time for\nbackwards compatibility.\n\nIf web browser support for arbitrary MIME types is strong enough (I\nhaven't tested), then a payment request can be initiated with just an\nanchor tag:\n  <a href=\"https://merchant.com/pay.php?3D2a8628fc2fbe\"\ntype=\"application/bitcoin-paymentrequest\">\n\nDoing it that way saves a http round-trip.\n\n--\n--\nGavin Andresen"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-07-31T11:45:26",
                "message_text_only": "On 31 July 2013 13:33, Gavin Andresen <gavinandresen at gmail.com> wrote:\n\n> On Wed, Jul 31, 2013 at 6:45 PM, Roy Badami <roy at gnomon.org.uk> wrote:\n> >\n> > Is it envisaged to be possible/sensible to have a URI that is *only* a\n> > payment request?  i.e. something like the following (although I'm not\n> > sure this is a valid URI):\n> >\n> > bitcoin:?request=https%3A%2F%2Fmerchant.com%2Fpay.php%3Fh%3D2a8628fc2fbe\n>\n> I think we'll want a bitcoin address in there for a long time for\n> backwards compatibility.\n>\n> If web browser support for arbitrary MIME types is strong enough (I\n> haven't tested), then a payment request can be initiated with just an\n> anchor tag:\n>   <a href=\"https://merchant.com/pay.php?3D2a8628fc2fbe\"\n> type=\"application/bitcoin-paymentrequest\">\n>\n\nUnless I'm mistaken you cant generally set the \"Accept\" header on a browser\nvia a standard href ... one of those annoying quirks\n\n\n>\n> Doing it that way saves a http round-trip.\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> Get your SQL database under version control now!\n> Version control is standard for application code, but databases havent\n> caught up. So what steps can you take to put your SQL databases under\n> version control? Why should you start doing it? Read more to find out.\n> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/5c2200c4/attachment.html>"
            },
            {
                "author": "E willbefull",
                "date": "2013-07-31T23:30:46",
                "message_text_only": "I think it's important to expect PaymentRequest-only bitcoin URIs in the\nfuture. Some types of payments (exotic transactions) may not make sense to\nhave a single fallback address. Or, a page with a bitcoin URI link may be\nrelying on a separate service provider to assemble the transaction.\n\n\nOn Wed, Jul 31, 2013 at 5:33 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> On Wed, Jul 31, 2013 at 6:45 PM, Roy Badami <roy at gnomon.org.uk> wrote:\n> >\n> > Is it envisaged to be possible/sensible to have a URI that is *only* a\n> > payment request?  i.e. something like the following (although I'm not\n> > sure this is a valid URI):\n> >\n> > bitcoin:?request=https%3A%2F%2Fmerchant.com%2Fpay.php%3Fh%3D2a8628fc2fbe\n>\n> I think we'll want a bitcoin address in there for a long time for\n> backwards compatibility.\n>\n> If web browser support for arbitrary MIME types is strong enough (I\n> haven't tested), then a payment request can be initiated with just an\n> anchor tag:\n>   <a href=\"https://merchant.com/pay.php?3D2a8628fc2fbe\"\n> type=\"application/bitcoin-paymentrequest\">\n>\n> Doing it that way saves a http round-trip.\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> Get your SQL database under version control now!\n> Version control is standard for application code, but databases havent\n> caught up. So what steps can you take to put your SQL databases under\n> version control? Why should you start doing it? Read more to find out.\n> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/a5fc54fa/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-07-31T23:38:11",
                "message_text_only": "On Thu, Aug 1, 2013 at 9:30 AM, E willbefull <ewillbefull at gmail.com> wrote:\n> I think it's important to expect PaymentRequest-only bitcoin URIs in the\n> future. Some types of payments (exotic transactions) may not make sense to\n> have a single fallback address.\n\nP2SH addresses already support all exotic transactions.\n\n> Or, a page with a bitcoin URI link may be\n> relying on a separate service provider to assemble the transaction.\n\nDo you mean assemble the PaymentRequest message?  Because the payment\ntransaction will always be created by the customer's wallet software.\n\nIF PaymentRequests take over the world and we get 100% wallet software\nsupport, then I'd be happy to write another BIP that says that a\nbitcoin: URI can be just bitcoin:?request=http...\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "E willbefull",
                "date": "2013-07-31T23:52:40",
                "message_text_only": "P2SH addresses support exotic transaction outputs, but not all exotic\ntransactions. This payment protocol can allow for combining multiple\noutputs. A PaymentRequest for sending money to multiple parties, for\nexample, could not fall back to a single address.\n\n\nOn Wed, Jul 31, 2013 at 5:38 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> On Thu, Aug 1, 2013 at 9:30 AM, E willbefull <ewillbefull at gmail.com>\n> wrote:\n> > I think it's important to expect PaymentRequest-only bitcoin URIs in the\n> > future. Some types of payments (exotic transactions) may not make sense\n> to\n> > have a single fallback address.\n>\n> P2SH addresses already support all exotic transactions.\n>\n> > Or, a page with a bitcoin URI link may be\n> > relying on a separate service provider to assemble the transaction.\n>\n> Do you mean assemble the PaymentRequest message?  Because the payment\n> transaction will always be created by the customer's wallet software.\n>\n> IF PaymentRequests take over the world and we get 100% wallet software\n> support, then I'd be happy to write another BIP that says that a\n> bitcoin: URI can be just bitcoin:?request=http...\n>\n> --\n> --\n> Gavin Andresen\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/bdc484b2/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Payment Protocol: BIP 70, 71, 72",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "E willbefull",
                "Mike Hearn",
                "Roy Badami",
                "Gavin Andresen",
                "Melvin Carvalho"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 14761
        }
    },
    {
        "title": "[Bitcoin-development] Payment Protocol: BIP 70, 71, 72 (Gavin Andresen)",
        "thread_messages": [
            {
                "author": "Tamas Blummer",
                "date": "2013-07-31T12:31:08",
                "message_text_only": "Since the payment request is available from a location defined in the URI,\nI think it would be appropriate to attach the PaymentACK once payment \naccepted by Merchant.\n\nThis would make the request and receipt available for later review.\n\nRegards,\n\nTam\u00e1s Blummer\nFounder, CEO\n\nhttp://bitsofproof.com\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/23d876a8/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: email.png\nType: image/png\nSize: 7120 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/23d876a8/attachment.png>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/23d876a8/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Payment Protocol: BIP 70, 71, 72 (Gavin Andresen)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Tamas Blummer"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1037
        }
    },
    {
        "title": "[Bitcoin-development] Litecoin v0.8.3.7 audit report",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-07-31T22:11:10",
                "message_text_only": "https://s3.amazonaws.com/peter.todd/litecoin-v0.8.3.7-audit-report.tar.bz2\n\nI thought this may be of interest to Bitcoin as well as an example.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/02aeda24/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-07-31T22:37:29",
                "message_text_only": "On Wed, Jul 31, 2013 at 06:11:10PM -0400, Peter Todd wrote:\n> https://s3.amazonaws.com/peter.todd/litecoin-v0.8.3.7-audit-report.tar.bz2\n> \n> I thought this may be of interest to Bitcoin as well as an example.\n\nBy request,\n\nZip archive:\nhttps://s3.amazonaws.com/peter.todd/litecoin-v0.8.3.7-audit-report.zip\n\nThe individual files:\nhttps://s3.amazonaws.com/peter.todd/litecoin-v0.8.3.7-audit-report/report.txt.asc\nhttps://s3.amazonaws.com/peter.todd/litecoin-v0.8.3.7-audit-report/40809aed-1b5cb086.diff\nhttps://s3.amazonaws.com/peter.todd/litecoin-v0.8.3.7-audit-report/litecoin-0.8.3.x-code-audit-agreement.txt.asc\n\nreport.txt.asc SHA256 hash:\n24832b4b8411f3fbcc98b96bdfaaf90f4aeac39a7fbfb491bff5a76d23859dbd\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130731/b2cbadc8/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Litecoin v0.8.3.7 audit report",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1470
        }
    }
]