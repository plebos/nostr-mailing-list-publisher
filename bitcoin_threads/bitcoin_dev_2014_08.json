[
    {
        "title": "[Bitcoin-development] deterministic transaction expiration",
        "thread_messages": [
            {
                "author": "Kaz Wesley",
                "date": "2014-08-01T00:58:23",
                "message_text_only": "There is currently little in place for managing transaction lifetime\nin the network's mempools (see discussion in github in #3722 \"mempool\ntransaction expiration\", and it seems to be a major factor blocking\nsome mempool exchange, see #1833/1918, #3721). Expiry per-node a\ncertain amount of wall time after receipt has been proposed, but\nthat's a fragile mechanism -- a single node could keep all relayable\ntransactions alive forever by remembering transactions until most\nnodes have dropped them and then releasing them back into the wild.\n\nI have a proposal for a way to add finite and predictable lifespans to\ntransactions in mempools: we d\u0336e\u0336s\u0336t\u0336r\u0336o\u0336y\u0336 \u0336t\u0336h\u0336e\u0336\n\u0336r\u0336e\u0336s\u0336u\u0336r\u0336r\u0336e\u0336c\u0336t\u0336i\u0336o\u0336n\u0336 \u0336h\u0336u\u0336b\u0336 use nLockTime and a new standardness\nrule. It could be done in stages, would not necessarily require even a\nsoft fork, and does not cause problems with reorgs like the proposal\nin #3509:\n1. start setting nLockTime to the current height by default in newly\ncreated transactions (or slightly below the current height, for\nreorg-friendliness)\n2. once users have had some time to upgrade to clients that set\nnLockTime, start discouraging transactions without nLockTime --\npossibly with a slightly higher fee required for relay\n3. start rate-limiting relay of transactions without an nLockTime\n(maybe this alone could be used to achieve [2])\n4. add a new IsStandard rule rejecting transactions with an nLockTime\nmore than N blocks behind the current tip (for some fixed value N, to\nbe determined)\n\nTransactions would stop being relayed and drop out of mempools a fixed\nnumber of blocks from their creation; once that window had passed, the\nsender's wallet could begin to expect the transaction would not be\nconfirmed. In case a reorg displaces a transaction until after its\nexpiry height, a miner can still put it back in the blockchain; the\nexpiry height is just a relay rule. Also, a user who needed to get\ntheir original \"expired\" transaction confirmed could still do so by\nsubmitting it directly to a miner with suitable policies."
            },
            {
                "author": "Peter Todd",
                "date": "2014-08-01T01:06:57",
                "message_text_only": "On Thu, Jul 31, 2014 at 05:58:23PM -0700, Kaz Wesley wrote:\n> I have a proposal for a way to add finite and predictable lifespans to\n> transactions in mempools: we d\u0336e\u0336s\u0336t\u0336r\u0336o\u0336y\u0336 \u0336t\u0336h\u0336e\u0336\n> \u0336r\u0336e\u0336s\u0336u\u0336r\u0336r\u0336e\u0336c\u0336t\u0336i\u0336o\u0336n\u0336 \u0336h\u0336u\u0336b\u0336 use nLockTime and a new standardness\n> rule. It could be done in stages, would not necessarily require even a\n> soft fork, and does not cause problems with reorgs like the proposal\n> in #3509:\n\nAnything that changes the semantics of nLockTime will do harm to\nexisting and future applications that make use of nLockTime for things\nlike refund transactions.\n\nIn any case, why do transactions need finite lifespans in mempools? If\nyou want to double-spend them with higher fees, then implement\nreplace-by-fee. In any case, lifetimes will never be deterministic as\nnot everyone runs the same software.\n\n> Transactions would stop being relayed and drop out of mempools a fixed\n> number of blocks from their creation; once that window had passed, the\n> sender's wallet could begin to expect the transaction would not be\n> confirmed. In case a reorg displaces a transaction until after its\n> expiry height, a miner can still put it back in the blockchain; the\n> expiry height is just a relay rule. Also, a user who needed to get\n> their original \"expired\" transaction confirmed could still do so by\n> submitting it directly to a miner with suitable policies.\n\n...in which case someone will circumvent this IsStandard() rule by\nsubmitting \"expired\" transactions directly to miners with suitable\npolicies.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140801/f36a4f07/attachment.sig>"
            },
            {
                "author": "Kaz Wesley",
                "date": "2014-08-01T01:37:45",
                "message_text_only": "On Thu, Jul 31, 2014 at 6:06 PM, Peter Todd <pete at petertodd.org> wrote:\n> Anything that changes the semantics of nLockTime will do harm to\n> existing and future applications that make use of nLockTime for things\n> like refund transactions.\n\nI think this would be compatible with most uses of nLockTime -- e.g.,\nat the time a refund transaction becomes broadcastable, its\nbeneficiary would usually have no reason to wait for a long time\nbefore broadcasting it; if they did so (probably because they weren't\nonline to redeem the refund), they'd need to use the\nsubmit-directly-to-miner option, but they wouldn't lose their refund.\n\n> In any case, why do transactions need finite lifespans in mempools? If\n> you want to double-spend them with higher fees, then implement\n> replace-by-fee.\n\nPerpetuating transactions that have been in mempools for a long time\nand are not being confirmed has been cited as a reason for nodes not\nto exchange mempools (#3721, #1833, #3722); it's been implied that it\nwould be desirable for wallets to wait until a transaction had had a\nchance to be accepted before double-spending with a higher fee\n(#3722); and an unconfirmed transaction-age-based policy for\npreventing mempool accumulation has been advocated (#3753, #3722) [I\nhope my summarization is not misrepresenting anyone's opinions here;\nplease see the arguments made in the actual comments on the bugs].\nThese discussions are mostly fairly old, but I don't know of any\nchanges that have been made that provide alternative answers to these\nconcerns mentioned by at least three different developers.\n\n> In any case, lifetimes will never be deterministic as not everyone runs\n> the same software.\n\nThat's true, but none of the benefits of these changes require the\npolicy to be unanimous; most of the effect could be provided by most\nof the network following these rules.\n\n>> Transactions would stop being relayed and drop out of mempools a fixed\n>> number of blocks from their creation; once that window had passed, the\n>> sender's wallet could begin to expect the transaction would not be\n>> confirmed. In case a reorg displaces a transaction until after its\n>> expiry height, a miner can still put it back in the blockchain; the\n>> expiry height is just a relay rule. Also, a user who needed to get\n>> their original \"expired\" transaction confirmed could still do so by\n>> submitting it directly to a miner with suitable policies.\n>\n> ...in which case someone will circumvent this IsStandard() rule by\n> submitting \"expired\" transactions directly to miners with suitable\n> policies.\n\nYes, that is a feature. None of the benefits of transaction expiration\nrely on expiration being final, and any possible downsides of\nexpiration are largely mitigated by the option still being available\nto get expired transactions mined."
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-08-01T01:38:56",
                "message_text_only": "It would make more sense to introduce a new script opcode that pushes the current block height onto the operand stack. Then you could implement arbitrary logic about which blocks the transaction can be valid in. This would require that the client revalidate all transactions in its mempool (really, only those making use of this opcode) whenever the chain tip changes.\n\n\nOn Thursday, 31 July 2014, at 5:58 pm, Kaz Wesley wrote:\n> There is currently little in place for managing transaction lifetime\n> in the network's mempools (see discussion in github in #3722 \"mempool\n> transaction expiration\", and it seems to be a major factor blocking\n> some mempool exchange, see #1833/1918, #3721). Expiry per-node a\n> certain amount of wall time after receipt has been proposed, but\n> that's a fragile mechanism -- a single node could keep all relayable\n> transactions alive forever by remembering transactions until most\n> nodes have dropped them and then releasing them back into the wild.\n> \n> I have a proposal for a way to add finite and predictable lifespans to\n> transactions in mempools: we d\u0336e\u0336s\u0336t\u0336r\u0336o\u0336y\u0336 \u0336t\u0336h\u0336e\u0336\n> \u0336r\u0336e\u0336s\u0336u\u0336r\u0336r\u0336e\u0336c\u0336t\u0336i\u0336o\u0336n\u0336 \u0336h\u0336u\u0336b\u0336 use nLockTime and a new standardness\n> rule. It could be done in stages, would not necessarily require even a\n> soft fork, and does not cause problems with reorgs like the proposal\n> in #3509:\n> 1. start setting nLockTime to the current height by default in newly\n> created transactions (or slightly below the current height, for\n> reorg-friendliness)\n> 2. once users have had some time to upgrade to clients that set\n> nLockTime, start discouraging transactions without nLockTime --\n> possibly with a slightly higher fee required for relay\n> 3. start rate-limiting relay of transactions without an nLockTime\n> (maybe this alone could be used to achieve [2])\n> 4. add a new IsStandard rule rejecting transactions with an nLockTime\n> more than N blocks behind the current tip (for some fixed value N, to\n> be determined)\n> \n> Transactions would stop being relayed and drop out of mempools a fixed\n> number of blocks from their creation; once that window had passed, the\n> sender's wallet could begin to expect the transaction would not be\n> confirmed. In case a reorg displaces a transaction until after its\n> expiry height, a miner can still put it back in the blockchain; the\n> expiry height is just a relay rule. Also, a user who needed to get\n> their original \"expired\" transaction confirmed could still do so by\n> submitting it directly to a miner with suitable policies."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-08-01T02:28:15",
                "message_text_only": "On Thu, Jul 31, 2014 at 6:38 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> It would make more sense to introduce a new script opcode that pushes the current block height onto the operand stack. Then you could implement arbitrary logic about which blocks the transaction can be valid in. This would require that the client revalidate all transactions in its mempool (really, only those making use of this opcode) whenever the chain tip changes.\n\nTransactions that become invalid later are have pretty severe\nconsequences because they might mean that completely in an absence of\nfraud transactions are forever precluded due to a otherwise harmless\nreorg.\n\nWhile there may be uses for that, the resulting outputs should be\nconsidered differently fungible\u2014 like coinbases which are immature\u2014\nand should probably be only used with great caution... not as a\nmechanism for ordinary transactions."
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-08-01T03:26:20",
                "message_text_only": "On Thursday, 31 July 2014, at 7:28 pm, Gregory Maxwell wrote:\n> On Thu, Jul 31, 2014 at 6:38 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> > It would make more sense to introduce a new script opcode that pushes the current block height onto the operand stack. Then you could implement arbitrary logic about which blocks the transaction can be valid in. This would require that the client revalidate all transactions in its mempool (really, only those making use of this opcode) whenever the chain tip changes.\n> \n> Transactions that become invalid later are have pretty severe\n> consequences because they might mean that completely in an absence of\n> fraud transactions are forever precluded due to a otherwise harmless\n> reorg.\n\nI understand what you're saying, but I don't understand why it's a problem. Transactions shouldn't be considered \"final\" until a reasonable number of confirmations anyway, so the possibility that an \"accepted\" transaction could become invalid due to a chain reorganization is not a new danger. Ordinary transactions can similarly become invalid due to chain reorganizations, due to inputs already having been spent in the new branch."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-08-01T03:31:19",
                "message_text_only": "On Thu, Jul 31, 2014 at 8:26 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> I understand what you're saying, but I don't understand why it's a problem. Transactions shouldn't be considered \"final\" until a reasonable number of confirmations anyway, so the possibility that an \"accepted\" transaction could become invalid due to a chain reorganization is not a new danger. Ordinary transactions can similarly become invalid due to chain reorganizations, due to inputs already having been spent in the new branch.\n\nA distinction there is that they can only become invalid via a\nconflict\u2014 replaced by another transaction authored by the prior\nsigners. If no other transaction could be created (e.g. you're a\nmultisigner and won't sign it again) then there is no such risk.  It\nnow introduces chance events (\"act of god\") into the mix where they\nthey didn't exist before.  Basically it takes was what is a very loose\none way coupling and makes it much tighter. I'm sure if you spend a\nbit thinking you can come up with some more corner cases that it would\nexpose\u2014 e.g. flooding the network with unrelated high fee transactions\nin order to push a transaction out to where it can never be mined at\nall."
            },
            {
                "author": "Alex Mizrahi",
                "date": "2014-08-05T18:01:29",
                "message_text_only": ">\n> A distinction there is that they can only become invalid via a\n> conflict\u2014 replaced by another transaction authored by the prior\n> signers. If no other transaction could be created (e.g. you're a\n> multisigner and won't sign it again) then there is no such risk.\n\n\nYou need to check transaction's dependencies up to a certain depth to know\nwhether it is safe:\n If one of inputs depends on transaction which is signed by parties with\nunknown trustworthiness, then it isn't safe.\n\n\n>  It now introduces chance events (\"act of god\") into the mix where they\n> they didn't exist before.\n\n\nYou need to check transaction's dependencies up to a certain depth to know\nwhether it is safe:\n  If one of inputs depends on transaction time-locked script (or other\nunrecognized script), then it isn't safe.\n\nSituation is identical, you might need several extra lines of code.\n\nI think it would matter only if we had deterministic, reliable mempool and\nreorganization behavior. But it's not something we can depend on.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/bd7de220/attachment.html>"
            },
            {
                "author": "Tom Harding",
                "date": "2014-08-02T00:36:46",
                "message_text_only": "On 7/31/2014 5:58 PM, Kaz Wesley wrote:\n> 1. start setting nLockTime to the current height by default in newly\n> created transactions (or slightly below the current height, for\n> reorg-friendliness)\n\nReorg-frendliness is the opposite of the rationale behind #2340, which \nproposes setting nLockTime at current-height + 1 to prevent \n\"fee-sniping\" reorgs...\n\n\n> 2. once users have had some time to upgrade to clients that set\n> nLockTime, start discouraging transactions without nLockTime --\n> possibly with a slightly higher fee required for relay\n> 3. start rate-limiting relay of transactions without an nLockTime\n> (maybe this alone could be used to achieve [2])\n> 4. add a new IsStandard rule rejecting transactions with an nLockTime\n> more than N blocks behind the current tip (for some fixed value N, to\n> be determined)\n>\n\nOne way to proceed is implement #3753 (mempool janitor) in such a way \nthat transactions with nLockTime are allowed to live a bit longer in the \nmempool (say 500 blocks) than those without (72 hours).  In other words, \nas a first step, just actually start expiring things from the mempool in \nbitcoin core, and leave any relay fee adjustments or rate limiting for \nlater.  The isStandard change would be a good complement to #3753, to \navoid relaying a tx that will soon expire by the nLockTime rule anyway."
            },
            {
                "author": "Flavien Charlon",
                "date": "2014-08-05T17:02:38",
                "message_text_only": "> It would make more sense to introduce a new script opcode that pushes the\ncurrent block height onto the operand stack. Then you could implement\narbitrary logic about which blocks the transaction can be valid in. This\nwould require that the client revalidate all transactions in its mempool\n(really, only those making use of this opcode) whenever the chain tip\nchanges.\n\nI have to say I like this idea, this would allow someone to prove they\ncan't spend funds before a given date, and vice versa, prove that the funds\ncan't ever be spent after a given date (and this is provably prunable,\nisn't it?). Of course, there are some risks associated with that, but\nnobody is forced to use it.\n\n> flooding the network with unrelated high fee transactions\n> in order to push a transaction out to where it can never be mined at\n> all.\n\nThis becomes increasingly expensive as the deadline is further away, so not\nvery hard to mitigate.\n\n\nOn Sat, Aug 2, 2014 at 1:36 AM, Tom Harding <tomh at thinlink.com> wrote:\n\n> On 7/31/2014 5:58 PM, Kaz Wesley wrote:\n> > 1. start setting nLockTime to the current height by default in newly\n> > created transactions (or slightly below the current height, for\n> > reorg-friendliness)\n>\n> Reorg-frendliness is the opposite of the rationale behind #2340, which\n> proposes setting nLockTime at current-height + 1 to prevent\n> \"fee-sniping\" reorgs...\n>\n>\n> > 2. once users have had some time to upgrade to clients that set\n> > nLockTime, start discouraging transactions without nLockTime --\n> > possibly with a slightly higher fee required for relay\n> > 3. start rate-limiting relay of transactions without an nLockTime\n> > (maybe this alone could be used to achieve [2])\n> > 4. add a new IsStandard rule rejecting transactions with an nLockTime\n> > more than N blocks behind the current tip (for some fixed value N, to\n> > be determined)\n> >\n>\n> One way to proceed is implement #3753 (mempool janitor) in such a way\n> that transactions with nLockTime are allowed to live a bit longer in the\n> mempool (say 500 blocks) than those without (72 hours).  In other words,\n> as a first step, just actually start expiring things from the mempool in\n> bitcoin core, and leave any relay fee adjustments or rate limiting for\n> later.  The isStandard change would be a good complement to #3753, to\n> avoid relaying a tx that will soon expire by the nLockTime rule anyway.\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/6b077ada/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-05T17:48:18",
                "message_text_only": "Glad this was brought up.\n\nTransaction expiration is something that I have wanted to see happen in\nbitcoin for a long, long time.  The user experience of unconfirming\ntransactions setting around in limbo is just horrible.  Bitcoin software by\nnecessity has gotten better about attaching fees so this sort of behavior\nis uncommon, but that does not eliminate the problem.\n\nOf course, we cannot presume that a transaction will truly disappear -- The\nInternet Never Forgets -- but given a bit of mempool adjusting, we can\nachieve the next best thing:  the majority of the network \"forgets\" the\ntransaction and becomes willing to relay a respend of some or all of the\ninputs.  This uses existing client logic where the client must rebroadcast\na transaction until it is confirmed.\n\nIn general, if a transaction has not made it into a block within 144*X\nblocks, there is _some_ reason it is getting rejected by the miners.\n\nThe mempool janitor is a garbage collector design.  This is inferior to the\n\"superblock\" model described at\nhttps://github.com/bitcoin/bitcoin/issues/3723   Other models can also\nachieve similar results.\n\nThere are a lot of issues tied together here:  transaction expiration, the\ndesire to cap the mempool ram usage, scalability, DoS prevention, ...\nmempool ties a lot together.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/a0141ec0/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-08-05T18:54:08",
                "message_text_only": ">\n> The user experience of unconfirming transactions setting around in limbo\n> is just horrible.  Bitcoin software by necessity has gotten better about\n> attaching fees so this sort of behavior is uncommon, but that does not\n> eliminate the problem.\n>\n\nYes, indeed. I suspect there's a quick hack that could make this problem a\nlot better though.\n\nI think I brought up this idea before, but can't quite remember. Anyway I'm\nwilling to bet that if we analysed the data some more, we'd discover that\nmost \"legitimate\" i.e. non-DoS unconfirmed transactions that sit around for\nages are linked back to the block chain within two hops and not more. That\nis people send a transaction that uses up their coin age, and then\nimmediately those coins are immediately respent again, but then those final\nnew coins are not spent.\n\nOn the other hand DoS attacks look like bouncing your coins around over and\nover forever, i.e. more than two or three hops back to the chain.\n\nSo I wonder if making priority look back two or three transactions but not\nmore would help real users a lot, whilst not opening up any significant new\npotential for DoS.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/3271d5a7/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-05T19:08:14",
                "message_text_only": "I feel like a lot of this will be driven by implementation, and costs of\nchanging the implementation.  Additional look-backs are of course doable,\nbut they incur some disk I/O costs.  The fields available in memory for\neach mempool TX are\n\n    uint256 tx_hash; // hash of next field\n    CTransaction tx;\n    int64_t nFee; // Cached to avoid expensive parent-transaction lookups\n    size_t nTxSize; // ... and avoid recomputing tx size\n    int64_t nTime; // Local time when entering the mempool\n    double dPriority; // Priority when entering the mempool\n    unsigned int nHeight; // Chain height when entering the mempool\n\nAs a first pass, we may prune the mempool without additional db lookups\nquite easily based on time criteria.  Or, additional in-memory indexes may\nbe constructed to maintain hashes ordered by priority/fees.\n\nThose techniques seem likely to be attempted before resorting to looking\nback two or three TXs deep at coin age -- which I admit is an interesting\nmetric.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/aeb32c14/attachment.html>"
            },
            {
                "author": "Kaz Wesley",
                "date": "2014-08-05T19:10:50",
                "message_text_only": "> In general, if a transaction has not made it into a block within 144*X blocks, there is _some_ reason it is getting rejected by the miners.\n\nThis is the crux of my concern: relay policy and miner priorities will\nnot necessarily always be in sync, and node resource management\nshouldn't rely on them being compatible. There are other solutions\nthan transaction expiration; I think Gavin's idea from the\nblock-squashing thread, in which miners explicitly provide information\nabout their policies, would go a long way to address this. But even\nwhen mechanisms for reconciling nodes' expectations about miners'\nbehavior with miners' actual behavior are available, it may be\ndesirable to keep an expiry mechanism in place in case of glitches\nbetween node understanding of policy and actual miner policy.\n\nAny approach based on beginning a transaction expiry countdown when a\ntransaction is received (as in mempool janitor) seems unviable to me:\nonce a node has forgotten a transaction, it must be susceptible to\nreaccepting it; all the functionality of such an expiry mechanism\ndepends on the network not containing any nodes with slightly\ndifferent relay behavior from bitcoind. I could accidentally\ndebilitate mempool janitors across the entire network if I set up two\nnodes to exchange mempools whenever they reconnected to each other,\nand restarted each frequently.\n\nThat's why I think including information in the transaction itself, as\nwith my nLockTime/IsStandard proposal, is necessary for transactions\nto reliably eventually die off from mempools.\nThere's a modification I've been thinking about: allow a transaction's\nlifetime to be refreshed (even after expiry) by a child transaction,\nalong the lines of child-pays-for-parent fee policy. This would\neliminate the need to reuse a key to make a replacement for an expired\ntransaction (when submitting the tx directly to a miner is not an\noption), as well as alleviating the potential inconvenience in cases\nlike Peter brought up, where nLockTime is used for exchanged locked\ntransactions as part of a multi-transaction contract. With\nchild-refreshes-parent, a transaction's receivers and senders would\nhave the ability to keep trying to get their payment confirmed, but\nanyone on the network can't just keep all transactions alive.\n\n\nOn Tue, Aug 5, 2014 at 10:48 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> Glad this was brought up.\n>\n> Transaction expiration is something that I have wanted to see happen in\n> bitcoin for a long, long time.  The user experience of unconfirming\n> transactions setting around in limbo is just horrible.  Bitcoin software by\n> necessity has gotten better about attaching fees so this sort of behavior is\n> uncommon, but that does not eliminate the problem.\n>\n> Of course, we cannot presume that a transaction will truly disappear -- The\n> Internet Never Forgets -- but given a bit of mempool adjusting, we can\n> achieve the next best thing:  the majority of the network \"forgets\" the\n> transaction and becomes willing to relay a respend of some or all of the\n> inputs.  This uses existing client logic where the client must rebroadcast a\n> transaction until it is confirmed.\n>\n> In general, if a transaction has not made it into a block within 144*X\n> blocks, there is _some_ reason it is getting rejected by the miners.\n>\n> The mempool janitor is a garbage collector design.  This is inferior to the\n> \"superblock\" model described at\n> https://github.com/bitcoin/bitcoin/issues/3723   Other models can also\n> achieve similar results.\n>\n> There are a lot of issues tied together here:  transaction expiration, the\n> desire to cap the mempool ram usage, scalability, DoS prevention, ...\n> mempool ties a lot together.\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-05T19:36:17",
                "message_text_only": "On Tue, Aug 5, 2014 at 3:10 PM, Kaz Wesley <keziahw at gmail.com> wrote:\n\n> Any approach based on beginning a transaction expiry countdown when a\n> transaction is received (as in mempool janitor) seems unviable to me:\n>\n...\n\n> That's why I think including information in the transaction itself, as\n> with my nLockTime/IsStandard proposal, is necessary for transactions\n> to reliably eventually die off from mempools.\n>\n\n\"reliably die off from mempools\" leads into the land of \"tightly\nsynchronizing memory pools across the network\" which is a problem of...\nlarge scope and much debate.  :)\n\nFor the moment, simply capping the mempool's size at each local node is a\nmuch more reachable goal.  Capping, then, implies some culling policy.  In\ngeneral, bitcoind Tx mempool size is rather open ended, and that needs\nsorting out.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/94875c8c/attachment.html>"
            },
            {
                "author": "Tom Harding",
                "date": "2014-08-06T04:01:51",
                "message_text_only": "On 8/5/2014 12:10 PM, Kaz Wesley wrote:\n> Any approach based on beginning a transaction expiry countdown when a \n> transaction is received (as in mempool janitor) seems unviable to me: \n> once a node has forgotten a transaction, it must be susceptible to \n> reaccepting it;\n\nIt's hard to argue with that logic.\n\nIf nLockTime is used for expiration, transaction creator can't lie to \nhelp tx live longer without pushing initial confirmation eligibility \ninto the future.  Very pretty.  It would also enable \"fill or kill\" \ntransactions with a backdated nLockTime, which must be confirmed in a \nfew blocks, or start vanishing from mempools."
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-06T12:55:51",
                "message_text_only": "...and existing users and uses of nLockTime suddenly become worthless,\nbreaking payment channel refunds and other active uses of nLockTime.\n\nYou cannot assume the user is around to rewrite their nLockTime, if it\nfails to be confirmed before some arbitrary deadline being set.\n\n\n\nOn Wed, Aug 6, 2014 at 12:01 AM, Tom Harding <tomh at thinlink.com> wrote:\n\n> On 8/5/2014 12:10 PM, Kaz Wesley wrote:\n> > Any approach based on beginning a transaction expiry countdown when a\n> > transaction is received (as in mempool janitor) seems unviable to me:\n> > once a node has forgotten a transaction, it must be susceptible to\n> > reaccepting it;\n>\n> It's hard to argue with that logic.\n>\n> If nLockTime is used for expiration, transaction creator can't lie to\n> help tx live longer without pushing initial confirmation eligibility\n> into the future.  Very pretty.  It would also enable \"fill or kill\"\n> transactions with a backdated nLockTime, which must be confirmed in a\n> few blocks, or start vanishing from mempools.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Infragistics Professional\n> Build stunning WinForms apps today!\n> Reboot your WinForms applications with our WinForms controls.\n> Build a bridge from your legacy apps to the future.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140806/9253d8ac/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-08-06T13:54:56",
                "message_text_only": "We could however introduce a new field in a new tx version. We know we need\nto rev the format at some point anyway.\n\n\nOn Wed, Aug 6, 2014 at 2:55 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n>  ...and existing users and uses of nLockTime suddenly become worthless,\n> breaking payment channel refunds and other active uses of nLockTime.\n>\n> You cannot assume the user is around to rewrite their nLockTime, if it\n> fails to be confirmed before some arbitrary deadline being set.\n>\n>\n>\n> On Wed, Aug 6, 2014 at 12:01 AM, Tom Harding <tomh at thinlink.com> wrote:\n>\n>> On 8/5/2014 12:10 PM, Kaz Wesley wrote:\n>> > Any approach based on beginning a transaction expiry countdown when a\n>> > transaction is received (as in mempool janitor) seems unviable to me:\n>> > once a node has forgotten a transaction, it must be susceptible to\n>> > reaccepting it;\n>>\n>> It's hard to argue with that logic.\n>>\n>> If nLockTime is used for expiration, transaction creator can't lie to\n>> help tx live longer without pushing initial confirmation eligibility\n>> into the future.  Very pretty.  It would also enable \"fill or kill\"\n>> transactions with a backdated nLockTime, which must be confirmed in a\n>> few blocks, or start vanishing from mempools.\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Infragistics Professional\n>> Build stunning WinForms apps today!\n>> Reboot your WinForms applications with our WinForms controls.\n>> Build a bridge from your legacy apps to the future.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Infragistics Professional\n> Build stunning WinForms apps today!\n> Reboot your WinForms applications with our WinForms controls.\n> Build a bridge from your legacy apps to the future.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140806/b994de65/attachment.html>"
            },
            {
                "author": "Tom Harding",
                "date": "2014-08-06T14:44:25",
                "message_text_only": "How is eventual expiration of a tx that started life with an nLockTime \nin the future \"breaking\", any more than any other tx expiring?\n\n\nOn 8/6/2014 6:54 AM, Mike Hearn wrote:\n> We could however introduce a new field in a new tx version. We know we \n> need to rev the format at some point anyway.\n>\n>\n> On Wed, Aug 6, 2014 at 2:55 PM, Jeff Garzik <jgarzik at bitpay.com \n> <mailto:jgarzik at bitpay.com>> wrote:\n>\n>      ...and existing users and uses of nLockTime suddenly become\n>     worthless, breaking payment channel refunds and other active uses\n>     of nLockTime.\n>\n>     You cannot assume the user is around to rewrite their nLockTime,\n>     if it fails to be confirmed before some arbitrary deadline being set.\n>\n>\n>\n>     On Wed, Aug 6, 2014 at 12:01 AM, Tom Harding <tomh at thinlink.com\n>     <mailto:tomh at thinlink.com>> wrote:\n>\n>         ...\n>\n\n>         If nLockTime is used for expiration, transaction creator can't\n>         lie to\n>         help tx live longer without pushing initial confirmation\n>         eligibility\n>         into the future.  Very pretty.  It would also enable \"fill or\n>         kill\"\n>         transactions with a backdated nLockTime, which must be\n>         confirmed in a\n>         few blocks, or start vanishing from mempools.\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140806/4326d7ce/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-06T15:08:36",
                "message_text_only": "...because nLockTime is the exact opposite of expiration.  A locked TX\nbegins life invalid, and becomes valid (not-expired) after nLockTime passes.\n\nA new field containing expiration time would work.\n\n\n\nOn Wed, Aug 6, 2014 at 10:44 AM, Tom Harding <tomh at thinlink.com> wrote:\n\n>\n> How is eventual expiration of a tx that started life with an nLockTime in\n> the future \"breaking\", any more than any other tx expiring?\n>\n>\n>\n> On 8/6/2014 6:54 AM, Mike Hearn wrote:\n>\n> We could however introduce a new field in a new tx version. We know we\n> need to rev the format at some point anyway.\n>\n>\n> On Wed, Aug 6, 2014 at 2:55 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>\n>>  ...and existing users and uses of nLockTime suddenly become worthless,\n>> breaking payment channel refunds and other active uses of nLockTime.\n>>\n>> You cannot assume the user is around to rewrite their nLockTime, if it\n>> fails to be confirmed before some arbitrary deadline being set.\n>>\n>>\n>>\n>> On Wed, Aug 6, 2014 at 12:01 AM, Tom Harding <tomh at thinlink.com> wrote:\n>>\n>>> ...\n>>>\n>>\n>      If nLockTime is used for expiration, transaction creator can't lie to\n>>> help tx live longer without pushing initial confirmation eligibility\n>>> into the future.  Very pretty.  It would also enable \"fill or kill\"\n>>> transactions with a backdated nLockTime, which must be confirmed in a\n>>> few blocks, or start vanishing from mempools.\n>>>\n>>\n>\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140806/251779ec/attachment.html>"
            },
            {
                "author": "Christian Decker",
                "date": "2014-08-06T15:17:02",
                "message_text_only": "+1 for the new field, overloading fields with new meaning is definitely not\na good idea.\n\nSomething like nExpireAt with a block height sounds reasonable to me, but\nwe need to document that the usual caveats with blockchain reorgs apply.\n\n\nOn Wed, Aug 6, 2014 at 4:08 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n>  ...because nLockTime is the exact opposite of expiration.  A locked TX\n> begins life invalid, and becomes valid (not-expired) after nLockTime passes.\n>\n> A new field containing expiration time would work.\n>\n>\n>\n> On Wed, Aug 6, 2014 at 10:44 AM, Tom Harding <tomh at thinlink.com> wrote:\n>\n>>\n>> How is eventual expiration of a tx that started life with an nLockTime in\n>> the future \"breaking\", any more than any other tx expiring?\n>>\n>>\n>>\n>> On 8/6/2014 6:54 AM, Mike Hearn wrote:\n>>\n>> We could however introduce a new field in a new tx version. We know we\n>> need to rev the format at some point anyway.\n>>\n>>\n>> On Wed, Aug 6, 2014 at 2:55 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>>\n>>>  ...and existing users and uses of nLockTime suddenly become worthless,\n>>> breaking payment channel refunds and other active uses of nLockTime.\n>>>\n>>> You cannot assume the user is around to rewrite their nLockTime, if it\n>>> fails to be confirmed before some arbitrary deadline being set.\n>>>\n>>>\n>>>\n>>> On Wed, Aug 6, 2014 at 12:01 AM, Tom Harding <tomh at thinlink.com> wrote:\n>>>\n>>>> ...\n>>>>\n>>>\n>>      If nLockTime is used for expiration, transaction creator can't lie\n>>>> to\n>>>> help tx live longer without pushing initial confirmation eligibility\n>>>> into the future.  Very pretty.  It would also enable \"fill or kill\"\n>>>> transactions with a backdated nLockTime, which must be confirmed in a\n>>>> few blocks, or start vanishing from mempools.\n>>>>\n>>>\n>>\n>\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Infragistics Professional\n> Build stunning WinForms apps today!\n> Reboot your WinForms applications with our WinForms controls.\n> Build a bridge from your legacy apps to the future.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140806/0ba9d005/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-08-06T15:42:08",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 6 August 2014 08:17:02 GMT-07:00, Christian Decker <decker.christian at gmail.com> wrote:\n>+1 for the new field, overloading fields with new meaning is definitely\n>not\n>a good idea.\n\nTo add a new field the best way to do it is create a new, parallel, tx format where fields are committed by merkle radix tree in an extensible and provable way. You'd then commit to that tree with a mandatory OP_RETURN output in the last txout, or with a new merkle root.\n\nChanging the tx format itself in a hard-fork is needlessly disruptive, and in this case, wastes opportunities for improvement.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJT4kzQMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhamzCAC+zRaXRodP63+ke3K+\nViapiepvk4uIOlqxqtMB2O0zWcyu2+xCJDiRPykK/6HLDBeFDEC9/dGK8++Lovl6\n//qZ340LOPFlgT2kYy9E5h/yX469fhtsWhBCv2K47fWwkMS0S/0r4SQnCkbt2R2c\n4dQjkoldhw6rNMBTUmwvhSlL30KsT/msWTZiX7DW/YjfOzezEJzy+mYyKp9Sk7ba\n1fOiBXORk7mNOs7sTYTvje3sqEGpGTOLP08cY/RCEvl6bG8mHkPqwiojq+3biHFP\nRsoBVu1f5cbnU7Wq0gPNdVnQssnEQDadyTX8gT0Wze7PuVyaZT2mXFZBKzSHuLy2\nsJKN\n=oPSo\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-06T16:15:20",
                "message_text_only": "A fork is not necessarily required, if you are talking about information\nthat deals primarily with pre-consensus mempool behavior.  You can make a\n\"network TX\" with some information that is digitally signed, yet discarded\nbefore it reaches miners.\n\n\nOn Wed, Aug 6, 2014 at 11:42 AM, Peter Todd <pete at petertodd.org> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n>\n>\n> On 6 August 2014 08:17:02 GMT-07:00, Christian Decker <\n> decker.christian at gmail.com> wrote:\n> >+1 for the new field, overloading fields with new meaning is definitely\n> >not\n> >a good idea.\n>\n> To add a new field the best way to do it is create a new, parallel, tx\n> format where fields are committed by merkle radix tree in an extensible and\n> provable way. You'd then commit to that tree with a mandatory OP_RETURN\n> output in the last txout, or with a new merkle root.\n>\n> Changing the tx format itself in a hard-fork is needlessly disruptive, and\n> in this case, wastes opportunities for improvement.\n> -----BEGIN PGP SIGNATURE-----\n> Version: APG v1.1.1\n>\n> iQFQBAEBCAA6BQJT4kzQMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\n> cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhamzCAC+zRaXRodP63+ke3K+\n> Viapiepvk4uIOlqxqtMB2O0zWcyu2+xCJDiRPykK/6HLDBeFDEC9/dGK8++Lovl6\n> //qZ340LOPFlgT2kYy9E5h/yX469fhtsWhBCv2K47fWwkMS0S/0r4SQnCkbt2R2c\n> 4dQjkoldhw6rNMBTUmwvhSlL30KsT/msWTZiX7DW/YjfOzezEJzy+mYyKp9Sk7ba\n> 1fOiBXORk7mNOs7sTYTvje3sqEGpGTOLP08cY/RCEvl6bG8mHkPqwiojq+3biHFP\n> RsoBVu1f5cbnU7Wq0gPNdVnQssnEQDadyTX8gT0Wze7PuVyaZT2mXFZBKzSHuLy2\n> sJKN\n> =oPSo\n> -----END PGP SIGNATURE-----\n>\n>\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140806/e13727a5/attachment.html>"
            },
            {
                "author": "Tom Harding",
                "date": "2014-08-06T17:02:02",
                "message_text_only": "Today we have first-eligible-height (nLockTime), and mempool expiration \nmeasured from this height would work for the goals being discussed, no \nfork or protocol rev.\n\nWith first-eligible-height and last-eligible-height, creator could \nchoose a lifetime shorter than the max,  and in addition, lock the whole \nthing until some point in the future.\n\n\nOn 8/6/2014 9:15 AM, Jeff Garzik wrote:\n> A fork is not necessarily required, if you are talking about \n> information that deals primarily with pre-consensus mempool behavior.  \n> You can make a \"network TX\" with some information that is digitally \n> signed, yet discarded before it reaches miners.\n>\n>\n> On Wed, Aug 6, 2014 at 11:42 AM, Peter Todd <pete at petertodd.org \n> <mailto:pete at petertodd.org>> wrote:\n>\n>     -----BEGIN PGP SIGNED MESSAGE-----\n>     Hash: SHA256\n>\n>\n>\n>     On 6 August 2014 08:17:02 GMT-07:00, Christian Decker\n>     <decker.christian at gmail.com <mailto:decker.christian at gmail.com>>\n>     wrote:\n>     >+1 for the new field, overloading fields with new meaning is\n>     definitely\n>     >not\n>     >a good idea.\n>\n>     To add a new field the best way to do it is create a new,\n>     parallel, tx format where fields are committed by merkle radix\n>     tree in an extensible and provable way. You'd then commit to that\n>     tree with a mandatory OP_RETURN output in the last txout, or with\n>     a new merkle root.\n>\n>     Changing the tx format itself in a hard-fork is needlessly\n>     disruptive, and in this case, wastes opportunities for improvement.\n>     -----BEGIN PGP SIGNATURE-----\n>     Version: APG v1.1.1\n>\n>     iQFQBAEBCAA6BQJT4kzQMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\n>     cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhamzCAC+zRaXRodP63+ke3K+\n>     Viapiepvk4uIOlqxqtMB2O0zWcyu2+xCJDiRPykK/6HLDBeFDEC9/dGK8++Lovl6\n>     //qZ340LOPFlgT2kYy9E5h/yX469fhtsWhBCv2K47fWwkMS0S/0r4SQnCkbt2R2c\n>     4dQjkoldhw6rNMBTUmwvhSlL30KsT/msWTZiX7DW/YjfOzezEJzy+mYyKp9Sk7ba\n>     1fOiBXORk7mNOs7sTYTvje3sqEGpGTOLP08cY/RCEvl6bG8mHkPqwiojq+3biHFP\n>     RsoBVu1f5cbnU7Wq0gPNdVnQssnEQDadyTX8gT0Wze7PuVyaZT2mXFZBKzSHuLy2\n>     sJKN\n>     =oPSo\n>     -----END PGP SIGNATURE-----\n>\n>\n>\n>\n> -- \n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc. https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Infragistics Professional\n> Build stunning WinForms apps today!\n> Reboot your WinForms applications with our WinForms controls.\n> Build a bridge from your legacy apps to the future.\n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140806/c31d3719/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-08-06T17:21:56",
                "message_text_only": "On 08/06/2014 01:02 PM, Tom Harding wrote:\n> With first-eligible-height and last-eligible-height, creator could\n> choose a lifetime shorter than the max,  and in addition, lock the whole\n> thing until some point in the future.\n\nNote that this would be a massive, *massive* change that would\ncompletely break bitcoin output frangibility. Merchants would have to\nstart demanding input history back to a certain depth in order to ensure\nthey are not exposing themselves to undue reorg-expiry risk.\n\nThere are useful applications of a consensus-enforced expiry,\nparticularly within a private (signed block) side chain, and for that\nreason it is useful to have a discussion about the merits of an nExpiry\nfield or BLOCK_HEIGHT / BLOCK_TIME opcode, and methods for achieving\neither. However I don't see this ever becoming part of the public\nbitcoin network."
            },
            {
                "author": "Peter Todd",
                "date": "2014-08-06T17:34:21",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 6 August 2014 10:21:56 GMT-07:00, Mark Friedenbach <mark at monetize.io> wrote:\n>On 08/06/2014 01:02 PM, Tom Harding wrote:\n>> With first-eligible-height and last-eligible-height, creator could\n>> choose a lifetime shorter than the max,  and in addition, lock the\n>whole\n>> thing until some point in the future.\n>\n>Note that this would be a massive, *massive* change that would\n>completely break bitcoin output frangibility. Merchants would have to\n>start demanding input history back to a certain depth in order to\n>ensure\n>they are not exposing themselves to undue reorg-expiry risk.\n\nBitcoin is already \"broken\" in that regard due to malleability, and more fundamentally, the existence of anyone-can-spend outputs, known private keys, SIGHASH_ANYONECANPAY, etc.\n\nIn any case, reorg-doublespend risk is no different than reorg-expiry risk.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJT4mcdMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhSdiB/9no/fXR50Zej4l6Hyt\ngDvM9GWosGxZydQfplrUYzS9nLWTJgkjNYkrJk1OXPlkiNoHhlpCK6TuEL3DXBo8\ntxDBhp/xls7aFHELpPhP5iKrEj0J6fyMp9wKRVtUu0J+RhHY22v+iEQf//dGUX4v\nhQPwATubmnyeVd71TAKyW6zCPjoEh0IG19tRVvw/v7/qNTXHdSZTkSVzQa4GP2gr\n2xVqXTeOycPKqIU+GaNI4aRAL2DUm1kW3jG/+h3BwnJNd5q+0ELpC6xDmkA6hkNz\nN6BFCtoghhKNH+FNsZKAzE9w8dYngZQbaA9vVdaR6SXzz9KuG526EymOF7e55IBJ\nFMu+\n=ii2+\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-06T17:24:28",
                "message_text_only": "That won't necessarily work through large reorgs.  You don't want to create\na situation where a miner cannot mine a previously mined transactions.\n\n\n\nOn Wed, Aug 6, 2014 at 1:02 PM, Tom Harding <tomh at thinlink.com> wrote:\n\n>\n> Today we have first-eligible-height (nLockTime), and mempool expiration\n> measured from this height would work for the goals being discussed, no fork\n> or protocol rev.\n>\n> With first-eligible-height and last-eligible-height, creator could choose\n> a lifetime shorter than the max,  and in addition, lock the whole thing\n> until some point in the future.\n>\n>\n>\n> On 8/6/2014 9:15 AM, Jeff Garzik wrote:\n>\n> A fork is not necessarily required, if you are talking about information\n> that deals primarily with pre-consensus mempool behavior.  You can make a\n> \"network TX\" with some information that is digitally signed, yet discarded\n> before it reaches miners.\n>\n>\n> On Wed, Aug 6, 2014 at 11:42 AM, Peter Todd <pete at petertodd.org> wrote:\n>\n>> -----BEGIN PGP SIGNED MESSAGE-----\n>> Hash: SHA256\n>>\n>>\n>>\n>> On 6 August 2014 08:17:02 GMT-07:00, Christian Decker <\n>> decker.christian at gmail.com> wrote:\n>> >+1 for the new field, overloading fields with new meaning is definitely\n>> >not\n>> >a good idea.\n>>\n>>  To add a new field the best way to do it is create a new, parallel, tx\n>> format where fields are committed by merkle radix tree in an extensible and\n>> provable way. You'd then commit to that tree with a mandatory OP_RETURN\n>> output in the last txout, or with a new merkle root.\n>>\n>> Changing the tx format itself in a hard-fork is needlessly disruptive,\n>> and in this case, wastes opportunities for improvement.\n>> -----BEGIN PGP SIGNATURE-----\n>> Version: APG v1.1.1\n>>\n>> iQFQBAEBCAA6BQJT4kzQMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\n>> cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhamzCAC+zRaXRodP63+ke3K+\n>> Viapiepvk4uIOlqxqtMB2O0zWcyu2+xCJDiRPykK/6HLDBeFDEC9/dGK8++Lovl6\n>> //qZ340LOPFlgT2kYy9E5h/yX469fhtsWhBCv2K47fWwkMS0S/0r4SQnCkbt2R2c\n>> 4dQjkoldhw6rNMBTUmwvhSlL30KsT/msWTZiX7DW/YjfOzezEJzy+mYyKp9Sk7ba\n>> 1fOiBXORk7mNOs7sTYTvje3sqEGpGTOLP08cY/RCEvl6bG8mHkPqwiojq+3biHFP\n>> RsoBVu1f5cbnU7Wq0gPNdVnQssnEQDadyTX8gT0Wze7PuVyaZT2mXFZBKzSHuLy2\n>> sJKN\n>> =oPSo\n>> -----END PGP SIGNATURE-----\n>>\n>>\n>\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Infragistics Professional\n> Build stunning WinForms apps today!\n> Reboot your WinForms applications with our WinForms controls.\n> Build a bridge from your legacy apps to the future.http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n>\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing listBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Infragistics Professional\n> Build stunning WinForms apps today!\n> Reboot your WinForms applications with our WinForms controls.\n> Build a bridge from your legacy apps to the future.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140806/f35ada01/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-08-06T16:31:24",
                "message_text_only": "On 08/06/2014 11:42 AM, Peter Todd wrote:\n> On 6 August 2014 08:17:02 GMT-07:00, Christian Decker\n> <decker.christian at gmail.com> wrote:\n>> +1 for the new field, overloading fields with new meaning is\n>> definitely not a good idea.\n> \n> To add a new field the best way to do it is create a new, parallel,\n> tx format where fields are committed by merkle radix tree in an\n> extensible and provable way. You'd then commit to that tree with a\n> mandatory OP_RETURN output in the last txout, or with a new merkle\n> root.\n> \n> Changing the tx format itself in a hard-fork is needlessly\n> disruptive, and in this case, wastes opportunities for improvement.\n\nI highly doubt that is the best approach.\n\nIf this nExpiry field is a consensus rule, then the Merkle tree or the\nappropriate paths through needs to be included with the transaction as\npart of the network and on-disk data structures, so that proper\nvalidation can be done. This would be both more disruptive and less\nefficient than simply adding an nExpiry field to the transaction format,\nas we do in Freimarkets.\n\nIf the field is pre-consensus (a mempool gentleman's agreement), then it\nhas no business in the transaction structure at all and should be\npackaged in some sort of envelope container."
            },
            {
                "author": "Peter Todd",
                "date": "2014-08-06T17:20:25",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 6 August 2014 09:31:24 GMT-07:00, Mark Friedenbach <mark at monetize.io> wrote:\n>I highly doubt that is the best approach.\n>\n>If this nExpiry field is a consensus rule, then the Merkle tree or the\n>appropriate paths through needs to be included with the transaction as\n>part of the network and on-disk data structures, so that proper\n>validation can be done. This would be both more disruptive and less\n>efficient than simply adding an nExpiry field to the transaction\n>format,\n>as we do in Freimarkets.\n\nThe general case doesn't require transmission of any merkle data; it is derived from the tx data. Equally changing a data format is certainly: note how Freimarkets has no third-party library support because you've made it incompatible with the standard Bitcoin data structures. Merkle radix tree formatting OTOH is just a cryptographically committed extension of the tag-value concept seen in protobuf, among others.\n\nre: efficiency, we need fundamental improvements in efficiency, not little micro-optimisations everywhere done at high cost to maintainability.\n\nre: validation, note how the merkle radix tree meets that need by allowing the absence of data to be proven.\n\n>If the field is pre-consensus (a mempool gentleman's agreement), then\n>it\n>has no business in the transaction structure at all and should be\n>packaged in some sort of envelope container.\n\nIt's also rather useless without consensus. Expiry is only useful if it is a guarantee, if not you might as well just implement tx replacement directly.\n\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJT4mPZMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhcbKCACz/Qh3wm7ud9iwbvm3\nHzib36/fixk2++z6xlxh8G8afUaAe7ADCoz/TLK7RNIhUnr2hlsPO+Id2XvVBSm1\ngXavj4iDxq8TpWsC8zPs5vyyY/dVwQ0RbidQFSpncmdW6EYVpIQp9nP3sSnBv1M8\nc7BVidg708tc44uYiM9jeTzh6amP5yD0+G9FYYmy36BAQj8+4iD1ZCkiye1y5WUL\n9MSN8LOxRFEwWQJmySXmJ1I9V81l1NSRQcQtfLVCzEIWLJXrZ0xwOq0SryEObg73\n72NZKc2u8la3CPDoCG773ENbGHl+mGJW9M5ypV0s2RdkdZMgaFNnl/SBrWAcPd43\nFkLr\n=OMOy\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-08-06T17:30:11",
                "message_text_only": "On 08/06/2014 01:20 PM, Peter Todd wrote:\n> The general case doesn't require transmission of any merkle data; it\n> is derived from the tx data.\n\nHow can that possibly be the case? The information is hidden behind the\nMerkle root in the transaction. The validator needs to know whether\nthere is an expiry and what it is. What's it supposed to do, guess?"
            },
            {
                "author": "Peter Todd",
                "date": "2014-08-06T17:38:23",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 6 August 2014 10:30:11 GMT-07:00, Mark Friedenbach <mark at monetize.io> wrote:\n>On 08/06/2014 01:20 PM, Peter Todd wrote:\n>> The general case doesn't require transmission of any merkle data; it\n>> is derived from the tx data.\n>\n>How can that possibly be the case? The information is hidden behind the\n>Merkle root in the transaction. The validator needs to know whether\n>there is an expiry and what it is. What's it supposed to do, guess?\n\nThe general case is all committed information is included in the transaction; the merkle tree is a compatibility path, as well as an optimisation for lite clients and applications.\n\nYou should read more about soft-forks; see the BIP. Remember that Bitcoin protocol development and deployment is not a centrally controlled activity.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJT4mgPMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhSYlCAC1ncAGQt53HKS+8/rq\nOG0RGrqE2l2/qCM/ybd9M8TkwxaI3NB5bqfIus8dB5MnyiTBFS3ooN54kNNOHtSX\n2rEzPJphtOj46tk3nqe1QO3cbFJPjBCtxZff51DWZckhCiO2Iy1Br3fK3v55iscp\n1jxyZnpfgUG/Ivfx+h6vkisucBXgXJ82d5vzvMIMxixh4v2+4/SAcSY6HCLIpxmV\nZ3l0NcGllnmWe5B6eftpWYUAREuoCNk/671jHmwu0cqk2u/Egrp776zxkEO1xivH\nd0EWjJmlDLmQ2hEhkpBq46ji/2m4EWPLqTW/EXf3RzwU8uCEldbxEe2tyZ0d6oBt\nNnTE\n=AhV7\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Tom Harding",
                "date": "2014-08-08T17:38:08",
                "message_text_only": "Having explored more drastic approaches, it looks like Kaz' basic idea \nstands well.  His #1...\n\n> 1. start setting nLockTime to the current height by default in newly\n> created transactions (or slightly below the current height, for\n> reorg-friendliness)\n\nis already implemented in bitcoin-qt #2340, and a \"final call\" on \nmerging it was already sent to this list.  After some thought I agree \nwith its policy of eventually setting nLockTime at current-height + 1 by \ndefault.  This is the \"best reasonably expected height\" of any tx \ncreated right now.  It discourages fee-sniping, and if a reorg happens \nanyway, it won't actually delay inclusion of tx beyond the reasonable \nexpectation sans reorg.\n\nHowever right now, #2340 takes a very cautious approach and sets to \ncurrent-height - 10 by default, with randomness to mitigate worries \nabout loss of privacy.\n\nKaz' #2, #3 and #4 are future actions.  #4 only goes most of the way ...\n\n> 4. add a new IsStandard rule rejecting transactions with an nLockTime\n> more than N blocks behind the current tip (for some fixed value N, to\n> be determined)\n\n... a janitor mechanism is desirable to purge mempool of txes more than \nN behind current-height.\n\nNodes dropping a tx N blocks after they became eligible to be mined (the \nmeaning of nLockTime) makes sense.  It is not an overloading or new use \nfor nLockTime, but a logical extension of it.  As Kaz pointed out, this \nsolves a big problem with expiring by locally measured age: \nunintentional resurrection."
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-08T18:13:20",
                "message_text_only": "On Fri, Aug 8, 2014 at 1:38 PM, Tom Harding <tomh at thinlink.com> wrote:\n>> 4. add a new IsStandard rule rejecting transactions with an nLockTime\n>> more than N blocks behind the current tip (for some fixed value N, to\n>> be determined)\n\nIt cannot be assumed that transaction creation time and transaction\npublish-to-outside-world time are the same, even though they often\nare.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Kaz Wesley",
                "date": "2014-08-08T18:42:35",
                "message_text_only": "A new network tx field would have the same problem, right?\n\nWith a child-refreshes-parent policy, someone wishing to redeem a\ntransaction that has passed its relay window without being confirmed could\nstill do so.\nOn Aug 8, 2014 11:16 AM, \"Jeff Garzik\" <jgarzik at bitpay.com> wrote:\n\n> On Fri, Aug 8, 2014 at 1:38 PM, Tom Harding <tomh at thinlink.com> wrote:\n> >> 4. add a new IsStandard rule rejecting transactions with an nLockTime\n> >> more than N blocks behind the current tip (for some fixed value N, to\n> >> be determined)\n>\n> It cannot be assumed that transaction creation time and transaction\n> publish-to-outside-world time are the same, even though they often\n> are.\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/7a3531d0/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "deterministic transaction expiration",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Mark Friedenbach",
                "Mike Hearn",
                "Peter Todd",
                "Matt Whitlock",
                "Kaz Wesley",
                "Gregory Maxwell",
                "Alex Mizrahi",
                "Flavien Charlon",
                "Tom Harding",
                "Christian Decker"
            ],
            "messages_count": 34,
            "total_messages_chars_count": 58901
        }
    },
    {
        "title": "[Bitcoin-development] Squashing redundant tx data in blocks on the wire",
        "thread_messages": [
            {
                "author": "Kaz Wesley",
                "date": "2014-08-01T01:00:06",
                "message_text_only": "On Thu, Jul 31, 2014 at 4:18 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Thu, Jul 31, 2014 at 3:27 PM, Kaz Wesley <keziahw at gmail.com> wrote:\n>>> the FEC still lets you fill in the missing transactions without knowing in advance all that will be missing.\n>>\n>> I don't see why we need to solve that problem, since the protocol\n>> already involves exchanging the information necessary to determine\n>> (with some false positives) what a peer is missing, and needs to\n>> continue doing so regardless of how blocks are transmitted.\n>\n> False positives, and if you have more than one peer\u2014 false negatives.\n> (or a rule for what you must keep which is conservative in order to\n> avoid creating huge storage requirements\u2014 but then also has false\n> negatives).\n\nI think a rule for what to keep (along with the false-positive rate\nassociated with the rule's conservativeness) is preferable to false\nnegatives, since round-trip cost is potentially very high. The\nprototype I'm working on will be able to provide data on what the\nfalse-positive-missing-tx rate would look like with something like\nremember-last-N.\n\nThere are various ways that rule could be upgraded to nearly eliminate\nthe false-positive-missing rate, including learning what txes a peer\nhas dropped via periodic mempool syncing, or specifying the rule\nexplicitly with priority scripts, both of which have other benefits of\ntheir own. All of these changes synergize, but as long as the\nsimplistic remembering rule yields worthwhile improvement over the\ncurrent approach they can all be done independently as incremental\nimprovements.\n\nI also really like the idea of the referring to transactions by ids\nthat can themselves provide part of the tx data; I think that could\nalso be added separately, on top of these other changes. (Gregory,\nyour various wiki pages are basically my to-do list of things I'd like\nto work on.)\n\nThe idea of mempool synchronization brings up the issue of transaction\nexpiration, since lack of mempool syncing is currently the mechanism\nfor tx expiry. I'm starting a discussion about how to address that in\na separate thread; see \"deterministic transaction expiration\".\n\n>> As far as I can tell, channel memory sparseblocks achieve most of the\n>> possible bandwidth savings, and when FEC-based mempool synchronization\n>> is implemented its benefits can be applied to the sparseblocks by\n>> resetting the channel memory to the mutual mempool state each time\n>> mempool differences are exchanged. Am I missing a benefit to doing FEC\n>> at block forwarding time that can't be realized by FEC-based mempool\n>> synchronization, implemented separately from channel-memory based\n>> index-coding?\n>\n> Yes, minimizing latency in the face of multiple peers.\n>\n> Otherwise no. And certantly no reason to to implement something simple first."
            }
        ],
        "thread_summary": {
            "title": "Squashing redundant tx data in blocks on the wire",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Kaz Wesley"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2826
        }
    },
    {
        "title": "[Bitcoin-development] [ANN] High-speed Bitcoin Relay Network",
        "thread_messages": [
            {
                "author": "Matt Corallo",
                "date": "2014-08-03T00:56:54",
                "message_text_only": "For those who have been using this to get faster relays to/from the\nnetwork, you may have noticed some instability recently. This is because\nthe nodes were all being upgraded to use some new relaying code which\nshould cut down on duplicate transaction relaying in blocks, improving\nrelay speed within the network and to nodes which run new clients which\nuse the same relaying technique. Essentially instead of relaying entire\nblocks, nodes keep a rolling window of recently-seen transactions and\nskip those when relaying blocks.\n\nYou can find a simple client which connects to a local bitcoind and a\nrelay node at http://bitcoin.ninja/RelayNodeClient.jar and the source\nfor the whole thing at https://github.com/TheBlueMatt/RelayNode.\n\nMatt\n\nOn 11/06/13 05:50, Matt Corallo wrote:\n> Recently, there has been a reasonable amount of discussion about the\n> continued fragility of the public Bitcoin network on IRC and elsewhere\n> (1). To this extent, I'm organizing a system of peering between nodes in\n> the network by creating a system of high-speed relay nodes for miners\n> and merchants/exchanges. This system will a) act as a fallback in the\n> case that the public Bitcoin network encounters issues and b) decrease\n> block propagation times between miners.\n> It is NOT designed to in any way replace or decrease the need for the\n> public Bitcoin P2P network. It is NOT any kind of attempt at\n> centralization, and I still encourage interested parties to establish\n> their own private peering agreements with large miners as needed.\n> \n> Currently the network consists of one specially-designed relay node, but\n> I hope to bring more online in the coming days.\n> \n> This network is open to everyone via a few public relay nodes, but also\n> will have nodes which are made available only to large miners and\n> merchants/exchanges to mitigate the ability of malicious parties to DoS\n> the network.\n> \n> To peer with the public relay nodes, simply select the closest region\n> out of us-west (West Coast US), us-east (East Coast US), eu (Western\n> Europe), au (Australia), or jpy (Japan) and add\n> public.REGION.relay.mattcorallo.com to your addnode list. Note that\n> since all of the relay nodes will relay between each other, you gain no\n> latency advantage by peering with more than the closest node to you (and\n> currently all the regions map to one node, so there they're redundant\n> anyway).\n> \n> For each relay node, you can connect to either port 8334 or 8335.\n> Connecting on port 8334 will relay only blocks, and port 8335 will relay\n> both blocks and transactions. The relay nodes will request any\n> transactions which appear in your invs no matter which port you connect to.\n> \n> Relay node details:\n>  * The relay nodes do some data verification to prevent DoS, but in\n> order to keep relay fast, they do not fully verify the data they are\n> relaying, thus YOU SHOULD NEVER mine a block building on top of a\n> relayed block without fully checking it with your own bitcoin validator\n> (as you would any other block relayed from the P2P network).\n>  * The relay nodes do not follow the standard inv-getdata-tx/block flow,\n> but instead relay transactions/blocks immediately after they have done\n> their cursory verification. They do keep some track of whether or not\n> your nodes claim to have seen the transactions/blocks before relaying,\n> but you may see transactions/blocks being sent which you already have\n> and have not requested, if this is a problem for you due to bandwith\n> issues, you should reconsider your bandwith constraints and/or are\n> peering with too many nodes.\n>  * The relay nodes will all relay among themselves very quickly, so\n> there is no advantage to peering with as many relay nodes as you can\n> find, in fact, the increased incoming bandwidth during block relay\n> spikes may result in higher latency for your nodes.\n>  * The relay nodes are NOT designed to ensure that you never miss data,\n> and may fail to relay some transactions. Additionally, because the relay\n> nodes do not respond to standard getdata requests, if you miss a relay\n> and then reconnect, that data will not be sent again by the relay nodes.\n> The relay nodes are NOT a replacement for having peers on the standard\n> P2P network, they are only there to augment the existing P2P network.\n> \n> If you are a merchant/exchange/large miner/other important node operator\n> and wish to gain access to additional domain names which map to relay\n> nodes with fewer peers, please fill out the form at\n> https://docs.google.com/forms/d/1UL82QdcXXEhZwSHJAK04Sk_cWg4zLOu8a216nO7Mt8c/viewform\n> \n> You can find the source for the relay nodes at\n> https://github.com/TheBlueMatt/RelayNode\n> \n> If you have any comments/concerns/suggestions, please do not hesitate to\n> email bitcoin-peering at mattcorallo.com\n> \n> Thanks,\n> Matt\n> \n> \n> (1) There has been extended discussion on #bitcoin-wizards as well as\n> #bitcoin-dev of the very small number of active, listening nodes.\n> Additionally, because many of those nodes are versions prior to 0.8.4,\n> it seems very likely that maliciously creating network splits or at\n> least drastically reducing the number of peers for most nodes would not\n> be particularly challenging in the current network. Also,\n> http://www.tik.ee.ethz.ch/file/49318d3f56c1d525aabf7fda78b23fc0/P2P2013_041.pdf\n> noted that they were able to single-handledly decrease the network-wide\n> orphan rate by around 50% by improving network peering. Finally, you've\n> all seen the recent discussion on malicious mining algorithms. Though\n> those are not entirely prevented by reducing block propagation times,\n> they can be significantly limited compared to the current, rather\n> disjoint, network.\n> \n> ------------------------------------------------------------------------------\n> November Webinars for C, C++, Fortran Developers\n> Accelerate application performance with scalable programming models. Explore\n> techniques for threading, error checking, porting, and tuning. Get the most \n> from the latest Intel processors and coprocessors. See abstracts and register\n> http://pubads.g.doubleclick.net/gampad/clk?id=60136231&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            }
        ],
        "thread_summary": {
            "title": "High-speed Bitcoin Relay Network",
            "categories": [
                "Bitcoin-development",
                "ANN"
            ],
            "authors": [
                "Matt Corallo"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 6361
        }
    },
    {
        "title": "[Bitcoin-development] Tree-chains preliminary summary",
        "thread_messages": [
            {
                "author": "Gregory Sanders",
                "date": "2014-08-03T17:23:07",
                "message_text_only": "Peter I was curious if you could detail what specific concerns Adam Back \nbrought up with the current iteration of the tree-chains idea? It's been \nalluded to a few times yet I have not read the specific problem.\n\nGreg"
            }
        ],
        "thread_summary": {
            "title": "Tree-chains preliminary summary",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gregory Sanders"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 218
        }
    },
    {
        "title": "[Bitcoin-development] How to create a pull tester JAR",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2014-08-05T15:00:10",
                "message_text_only": "I just checked in a change to bitcoinj git master that makes it much easier\nto create a pull tester jar. Here are instructions for how to do it.\n\nYou will need:\n\n   - A Java Development Kit (JDK), version 6 or up should work. As Java 6\n   was released eight years ago, this should not be a challenging requirement.\n   If you have a Mac just running \"java\" from the command line should give you\n   a GUI prompt to install it automatically. Otherwise apt-get or fetch the\n   latest from the interwebs.\n\n   - Apache Maven. This is a rough equivalent of autotools, except it does\n   dependency resolution for you. Grab it from\n   http://maven.apache.org/download.cgi then unzip it and make sure the bin\n   directory is in your PATH. You may need to set the JAVA_HOME environment\n   variable if you installed Java to an odd place.\n\n   - git\n\nMake sure you can run \"javac\" from the command line, then make sure you can\nrun \"mvn\", it should complain it can't find a POM (this is a build config\nfile) and not, say, that it can't find Java.\n\nNow grab bitcoinj from git master:\n\ngit clone https://github.com/bitcoinj/bitcoinj.git\n\n... and build ....\n\ncd bitcoinj\nmvn -DskipTests package\n\nIt will go off and download the libraries needed, compile, and create a\nbundled executable JAR called core/target/pull-tests.jar. This is sort of\nanalogous to static linking in the Java world. It should be fast - expect a\nfull build plus downloads to take less than a minute. You can use it either\nwith the QA scripts in the bitcoin core qa/pull-tester directory or just\nrun things directly:\n\n./bitcoind -regtest -connect=0.0.0.0 -listen -whitelist=127.0.0.1\n-datadir=/tmp/pulltester\njava -jar core/target/pull-tests.jar\n\nIt should go ahead and print lots of debug spew, then at the end say it's\nhappy.\n\nLet me know if you encounter any problems with this.\n\nJava JARs (which are just zip files renamed) are easily reproduced if you\nuse the same version of javac and the same bitcoinj version. The ZIP\ncontainer has timestamps, but unzipping them and simply diffing the files\nbetween two builds should reveal no differences. I am happy to provide a\npull-tests.jar from my local machine if anyone would like to do this.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/516cdf34/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-08-05T15:11:17",
                "message_text_only": "Oh, I forgot to mention something important. Ridiculously, the default\npackage repository Maven uses was not protected by SSL up until a few days\nago.  They made it available via SSL now, but you have to tell Maven about\nthe new URL. I guess they'll do a new release where SSL is the default\nsoon. But for now before you run mvn save the following magic incantation\nto the path ~/.m2/settings.xml:\n\n(side note: yes maven's love of XML is widely ridiculed and more modern\nbuild tools have much better config languages, but we didn't upgrade yet)\n\n<settings>\n  <activeProfiles>\n    <!--make the profile active all the time -->\n    <activeProfile>securecentral</activeProfile>\n  </activeProfiles>\n  <profiles>\n    <profile>\n      <id>securecentral</id>\n      <!--Override the repository (and pluginRepository) \"central\" from the\n         Maven Super POM -->\n      <repositories>\n        <repository>\n          <id>central</id>\n          <url>https://repo1.maven.org/maven2</url>\n          <releases>\n            <enabled>true</enabled>\n          </releases>\n        </repository>\n      </repositories>\n      <pluginRepositories>\n        <pluginRepository>\n          <id>central</id>\n          <url>https://repo1.maven.org/maven2</url>\n          <releases>\n            <enabled>true</enabled>\n          </releases>\n        </pluginRepository>\n      </pluginRepositories>\n    </profile>\n  </profiles>\n</settings>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/a6caf6d5/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-08-05T16:11:39",
                "message_text_only": "On 08/05/2014 05:11 PM, Mike Hearn wrote:\n\n> Oh, I forgot to mention something important. Ridiculously, the default\n> package repository Maven uses was not protected by SSL up until a few\n> days ago.  They made it available via SSL now, but you have to tell\n> Maven about the new URL. I guess they'll do a new release where SSL is\n> the default soon.\n\nFWIW, I filed a wishlist item here:\nhttps://jira.codehaus.org/browse/MNG-5672\n\nand here, for the old Ubuntu versions of Maven:\nhttps://bugs.launchpad.net/ubuntu/+source/maven/+bug/1352418"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-05T15:45:35",
                "message_text_only": "Thanks for posting that (and implicitly archiving the knowledge).  Anything\nthat makes test improvement easier is welcomed.\n\n\n\nOn Tue, Aug 5, 2014 at 11:00 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> I just checked in a change to bitcoinj git master that makes it much\n> easier to create a pull tester jar. Here are instructions for how to do it.\n>\n> You will need:\n>\n>    - A Java Development Kit (JDK), version 6 or up should work. As Java 6\n>    was released eight years ago, this should not be a challenging requirement.\n>    If you have a Mac just running \"java\" from the command line should give you\n>    a GUI prompt to install it automatically. Otherwise apt-get or fetch the\n>    latest from the interwebs.\n>\n>    - Apache Maven. This is a rough equivalent of autotools, except it\n>    does dependency resolution for you. Grab it from\n>    http://maven.apache.org/download.cgi then unzip it and make sure the\n>    bin directory is in your PATH. You may need to set the JAVA_HOME\n>    environment variable if you installed Java to an odd place.\n>\n>    - git\n>\n> Make sure you can run \"javac\" from the command line, then make sure you\n> can run \"mvn\", it should complain it can't find a POM (this is a build\n> config file) and not, say, that it can't find Java.\n>\n> Now grab bitcoinj from git master:\n>\n> git clone https://github.com/bitcoinj/bitcoinj.git\n>\n> ... and build ....\n>\n> cd bitcoinj\n> mvn -DskipTests package\n>\n> It will go off and download the libraries needed, compile, and create a\n> bundled executable JAR called core/target/pull-tests.jar. This is sort of\n> analogous to static linking in the Java world. It should be fast - expect a\n> full build plus downloads to take less than a minute. You can use it either\n> with the QA scripts in the bitcoin core qa/pull-tester directory or just\n> run things directly:\n>\n> ./bitcoind -regtest -connect=0.0.0.0 -listen -whitelist=127.0.0.1\n> -datadir=/tmp/pulltester\n> java -jar core/target/pull-tests.jar\n>\n> It should go ahead and print lots of debug spew, then at the end say it's\n> happy.\n>\n> Let me know if you encounter any problems with this.\n>\n> Java JARs (which are just zip files renamed) are easily reproduced if you\n> use the same version of javac and the same bitcoinj version. The ZIP\n> container has timestamps, but unzipping them and simply diffing the files\n> between two builds should reveal no differences. I am happy to provide a\n> pull-tests.jar from my local machine if anyone would like to do this.\n>\n>\n> ------------------------------------------------------------------------------\n> Infragistics Professional\n> Build stunning WinForms apps today!\n> Reboot your WinForms applications with our WinForms controls.\n> Build a bridge from your legacy apps to the future.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/b619bd82/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-08-05T16:58:31",
                "message_text_only": "No problem.\n\nThe pull tester entry point can be found here:\n\nhttps://github.com/bitcoinj/bitcoinj/blob/master/core/src/test/java/com/google/bitcoin/core/BitcoindComparisonTool.java\n\n(nb: in the near future I will be re-namespacing the library from\ncom.google.bitcoin to org.bitcoinj to reflect that it no longer has\nanything to do with Google and then this link will break).\n\nThe code itself is a rather bad example of copy/paste coding and I can say\nthat, because Matt knows it and already plans to refactor things ;) So if\nanyone is thinking of adding tests to the framework coordinate with him\nfirst to ensure you don't end up conflicting with a big refactor/rewrite.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140805/fdced951/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-08-06T10:01:39",
                "message_text_only": "Once you ave the jar, you can also build with\n\n./configure --disable-silent-rules --disable-ccache\n--with-comparison-tool=/path/to/your/BitcoindComparisonTool.jar\n\nInstead of the regular\n\n./configure\n\nAnd after that \"make check\" will run most of the tests the pull tester does.\n\n\nOn 8/5/14, Mike Hearn <mike at plan99.net> wrote:\n> No problem.\n>\n> The pull tester entry point can be found here:\n>\n> https://github.com/bitcoinj/bitcoinj/blob/master/core/src/test/java/com/google/bitcoin/core/BitcoindComparisonTool.java\n>\n> (nb: in the near future I will be re-namespacing the library from\n> com.google.bitcoin to org.bitcoinj to reflect that it no longer has\n> anything to do with Google and then this link will break).\n>\n> The code itself is a rather bad example of copy/paste coding and I can say\n> that, because Matt knows it and already plans to refactor things ;) So if\n> anyone is thinking of adding tests to the framework coordinate with him\n> first to ensure you don't end up conflicting with a big refactor/rewrite.\n>\n\n\n-- \nJorge Tim\u00f3n"
            }
        ],
        "thread_summary": {
            "title": "How to create a pull tester JAR",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Mike Hearn",
                "Jorge Tim\u00f3n",
                "Andreas Schildbach"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 9733
        }
    },
    {
        "title": "[Bitcoin-development] CoinShuffle: decentralized CoinJoin without trusted third parties",
        "thread_messages": [
            {
                "author": "Tim Ruffing",
                "date": "2014-08-06T22:22:31",
                "message_text_only": "Hey,\n\nWe (a group of researchers in Germany) propose a decentralized protocol for \nCoinJoin, a way to mix coins among users to improve anonymity. Our protocol is \ncalled CoinShuffle. We believe that CoinShuffle is a way to implement CoinJoin \nin the original spirit of Bitcoin, i.e., decentralized and without trusted \nthird parties. (If you are not familiar with CoinJoin, the idea is explained \nhere: https://bitcointalk.org/index.php?topic=279249.0 )\n\nThe protocol is essentially a clever way to create a CoinJoin transaction. \nRecall that the idea of CoinJoin is mixing with one SINGLE transaction that \nhas multiple input addresses and multiple fresh output addresses (i.e., one \npair of addresses per user). The advantage of CoinJoin over mixing with a \nserver or trusted party is that nobody can steal coins. Each user can check if \nthe single transaction sends enough coins to his fresh output address. If this \nis not the case, the user can just refuse to sign the transaction and nothing \n(bad) happens.\n\nThe difficulty in CoinJoin is to let the participants announce their fresh \noutput addresses without breaking anonymity: Of course, if a participant of \nthe protocol just announces \"I have 1 BTC at address X now\" and \"I would like \nto have it back at address Y\", then everybody can link X and Y and mixing is \nuseless. A naive approach is to send these two messages via a secure channel \nto a server that organizes the whole mixing. While the server cannot steal \ncoins, the server still has to be trusted for anonymity, because it knows \nwhich input addresses belong to which output addresses.\n\nWe present the list of CoinShuffle's features at the end of this e-mail. An \noverview over the technical details can be found on the project page:\nhttp://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/\n\nMoreover, for the full details, have a look at the research paper on \nCoinShuffle that can be found here:\nhttp://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/coinshuffle.pdf\n\nThe paper has been accepted at a major European academic conference on \nsecurity (ESORICS). We will present the idea there. \n\nOur Proof-of-concept Implementation\n-----------------------------------\nThere is a proof-of-concept implementation (written in Python) available on \nour project page. It is really only a proof-of-concept and it implements only \nthe announcement of the addresses, not the creation of the transaction. \nMoreover, the code is CERTAINLY INSECURE and not well-written; our only goal \nwas to demonstrate feasibility and estimate the performance of our approach.\n\n\nOur Future Plans\n----------------\nNow we are planning a full, open-source implementation of the protocol. Of \ncourse, we would like to build on top of an existing wide-spread client. Since \nwe do not have much experience in the design of existing Bitcoin clients, we \nwould appreciate any help in the process. In particular, we did not decide \nwhich of the existing clients we would like to extend. Any hints towards this \ndecisions would very helpful. Help in design and coding would be great but we \nalso would like to hear your comments, criticism, and improvements for the \nprotocol itself.\n\nCoinShuffle Features\n--------------------\nCoinShuffle has the following features:\n\n - Decentralization / no third party:\nThere is no (trusted or untrusted) third party in a run of the protocol. \n(Still, as in all mixing solutions, users need some way to gather together \nbefore they can run the protocol. This can be done via a P2P protocol if a \ndecentralized solution is desired also for this step.)\n\n   \n - Unlinkability of input and output addresses:\nNobody, in particular no server (there is none!), can link input and output \naddresses of a mixing transaction, as long as there are at least two honest \nparticipants in run of the protocol.\n   \n(This is not a weakness: If there is only one honest participant, meaningful \nmixing is just impossible, no matter how it is organized. If all the other \nparticipants collude, they know all their input and output addresses and can \nimmediately determine the output address of the honest participant.)\n\n - Security against thefts:\nAs explained above, nobody can steal coins during the mixing because of the \nCoinJoin principle.  \nEvery participant can verify that his money will not be stolen. Otherwise, he \nrefuses to sign the transaction and nothing will happen.\n\n - Robustness against denial-of-service:\nIn CoinJoin, a single malicious (or malfunctioning) client suffices to stop \nthe whole protocol (e.g., by just refusing to sing the transaction without a \nproper reason.) This can easily lead to DoS attacks but these can be countered \nin CoinShuffle.\n   \nWhile in case of disruption, the current run of the protocol has to stop, \nCoinShuffle addresses this problem as follows:  In case of active disruption, \ni.e., some participant sends wrong messages, the protocol provides a proof of \nthis misbehavior. Then the honest protocol parties can start a new run of the \nprotocol without the misbehaving participant. Also in case of passive \ndisruption, i.e., some participant does not respond (for whatever reason), the \nremaining participants can agree on starting a new run without this \nparticipant. This ensures that the protocol will finally succeed even in the \npresence of malicious participant (although this can take quite a while then).\n\n - Only public-key encryption and signatures:\nThe protocol requires only well-established cryptographic primitives. Besides \nsignatures and hash functions (that are already used by Bitcoin), only \nstandard public-key encryption is necessary.\n  \n - Efficiency:\nA run of the protocol with 30 participants takes less than 100 seconds (in a \nsetting with reasonable bandwidth and delay). This is not much, given that 10 \nmin (on average) are required to confirm the mixing transaction anyway.\n   \nThe costs are almost completely caused by communication. The computation \noverhead is minimal. (This is the main achievement actually. In theory, it is \nclear that a protocol with all the properties can be built. However, generic \nconstructions cannot be used in practice yet, because the computation and \ncommunication costs are huge.)\n\n- Compatibility:\nAs CoinShuffle works on top of Bitcoin, it is fully compatible with the \ncurrent Bitcoin system. No changes to the Bitcoin protocol are required.\n\n\nBy the way: The NXT cryptocurrency picked up our idea and an implementation of \nCoinShuffle for a part of NXT is under way. ( \nhttps://twitter.com/comefrombeyond/status/485429369268350977 )\n\n  \nTL,DR:\nMixing is the way to improve anonymity in Bitcoin now, as it does not require \nchanges to the Bitcoin protocol. We propose CoinShuffle, a decentralized \nprotocol to perform mixing in a secure way without trusted third parties, see \nhttp://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/ for a technical \noverview. Our next step is to implement the protocol. Help in design and \ncoding would be great but we also would like to hear your comments, criticism, \nand improvements for the protocol itself. \n\nBest,\nTim Ruffing, Pedro Moreno-Sanchez, Aniket Kate\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 648 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140807/f43f0fc1/attachment.sig>"
            },
            {
                "author": "xor",
                "date": "2014-08-07T13:00:11",
                "message_text_only": "On Thursday, August 07, 2014 12:22:31 AM Tim Ruffing wrote:\n>  - Decentralization / no third party:\n> There is no (trusted or untrusted) third party in a run of the protocol.\n> (Still, as in all mixing solutions, users need some way to gather together\n> before they can run the protocol. This can be done via a P2P protocol if a\n> decentralized solution is desired also for this step.)\n[...]\n> http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/ for a technical\n> overview. \n\nI think the description at your website leaves out the truly interesting part:\nHow do you decentralize this securely?\n- How do Alice, Bob, Charlie and Dave communicate, i.e. which network is used \nfor communication and how?\n- How does Alice know that Bob, Charlie and Dave are not the same person?\n(= how do you prevent a Sybil attack?)\n\nBecause thats the real problem with mixing it seems - ensuring that your \nmixing partners are actually 100 people and not just 1 attacker. There are \nprobably many mixing algorithms which work if you solve that problem, but I \ndon't see how you offer a solution for it :(\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140807/4a1c63a5/attachment.sig>"
            },
            {
                "author": "Tim Ruffing",
                "date": "2014-08-09T10:04:51",
                "message_text_only": "You are raising valid questions and one goal of our posting here is indeed to \ndiscuss exactly these system issues.\n\nOn Thursday 07 August 2014 15:00:11 you wrote:\n> I think the description at your website leaves out the truly interesting\n> part: How do you decentralize this securely?\n> - How do Alice, Bob, Charlie and Dave communicate, i.e. which network is\n> used for communication and how?\nThe simplest approach is obviously to use direct connections to a randomly \nelected leader, who is also responsible for the broadcasts.\nOne advantage of CoinShuffle is that the unlinkability between input and \noutput addresses is guaranteed, no matter which underlying network you use. \n(Still, it is a good idea in general to hide your IP address but we can let \nthe user decide here.)\n\nOf course, there would be other possibilities, such as overlay networks. \nCoinmux, a CoinJoin prototype by Michael Pearce (http://coinmux.com/) uses \nTomP2P, a distributed hash table, for communication. \n\nDo you have any hints regarding this point?\n\n> - How does Alice know that Bob, Charlie and Dave are not the same person?\n> (= how do you prevent a Sybil attack?)\n> \n> Because thats the real problem with mixing it seems - ensuring that your\n> mixing partners are actually 100 people and not just 1 attacker. There are\n> probably many mixing algorithms which work if you solve that problem, but I\n> don't see how you offer a solution for it :(\nIt's true that there are a few proposals for mixing protocols which all have \ntheir advantages and disadvantages. However, it's not true that the mixing \nitself becomes simple if you solve the problem of Sybil attacks. Still, mixing \nis difficult to get right: Even if there are no Sybil attacks, you have to \nensure that the participants (or a server) cannot break unlinkability or steal \nmoney. Actually that's why there are several proposals for mixing protocols, \nbecause there is no obvious perfect solution.\n\nRegarding your question:\nIt is indeed very important to get this right. Fundamentally, there is nothing \nthat prevents the attacker from creating a lot of identities participating in \na lot of CoinJoins. However, there are ways that make it hard for the attacker \nto put an honest user together only with malicious users.\n\nFor a moment, assume that you can reliably establish a pool of users that \nwould like to participate in the protocol. (I will discuss this later.) \nYou have to divide the users to individual groups, i.e., CoinJoins runs. If \nthe assignment cannot be influenced by the attacker, then the probability that \nthere are also honest users in a run is quite high. Of course, the attacker is \nable to reduce your anonymity set but they cannot just put you together only \nwith their malicious identities.\n\nNote that the attacker has to pay transaction fees for joining many \ntransaction. One could even increase the required fee depending on the number \nof users in the pool (enforced by honest CoinShuffle participants that would \nnot accept CoinJoins that pay a lower transaction fee).\n\nAnd making sure that the attacker cannot influence the assignment is simple: \nOne can use the hash of all users' public keys in the pool to determine the \nassignment for example.\n \nFor the initial setup step, i.e., creating the pool of participants, you need \nsome kind of \"bulletin board\". \n\nOne possibility is to use an underlying peer-to-peer network. Bitcoin itself \nis the first that comes to the mind but it does not allow arbitrary messages. \nSo if we do not want to change the Bitcoin protocol, chans in Bitmessage are a \nvery promising possibility. Bitmessage relies basically on the same broadcast \nmechanism as Bitcoin. If you as a peer use enough outgoing connections to \nother peers, it's very difficult for an attacker to ensure that your message \nwill not be spread among the network. (Btw, people have used this to do \nCoinJoin  manually already \nhttps://forum.namecoin.info/viewtopic.php?f=2&t=1694 .)\nSolutions like distributed hashtables (TomP2P again) are another possibility. \nWe are not sure which of those approaches provides the best robustness against \nmalicious nodes that try to stop single participants from reaching the \nnetwork. For the setup step, latency is not an issue, so Bitmessage is indeed \na promising candidate here.\n \nI think that in general, P2P is the way to go here, but there are other \napproaches as well:\n\n - A possibility is to have a lot of servers acting as bulletin \nboards. The user sends his announcement message to all of the servers and \nthe user waits until at some of the servers send back a guarantee to \ninclude the user. After some time, the servers agree on the pool of the users \njust by taking all the users that have registered with at least one of the \nservers. There are well-understood protocols to achieve this goal or similar \ngoals, because essentially the same problem arises in e-voting (see \nhttp://arxiv.org/pdf/1401.4151 for just one example. this paper provides also \na detailed discussion of related protocols in section 9).\nOf course, the disadvantage of this approach is that the protocol is not \nreally decentralized anymore.\n\n - If you really want to be on the safe side, you can include your \nannouncement messages in the Bitcoin blockchain, e.g., by adding your \nannouncement message to an unspendable output, at the cost of an additional \ntransaction. I know that putting data to the blockchain is discouraged but let \nme explain why it is useful here: If you want to do several CoinJoins in a \nrow, you can include your announcement message for the second CoinJoin in the \ntransaction of the first CoinJoin, so your announcement is very robust but you \ndo not need an additional transaction, because you can piggy-back on the frist \ntransaction.\n\nAdditionally, it is possible to combine these approaches by joining several \npools. \n\nAnother interesting point that my co-author Aniket Kate mentioned is that you \ncan look at that problem as a social issue: You could combine this with \ninformation from your friends. You can participate in a CoinJoin only if your \nfriends tell you that they also participate in the same run. They do not even \nhave to reveal their input address, they just have to reveal that their \naddress is in a particular run. Of course, this is not yet a technical \nsolution but a very interesting idea.\n\nDon't get me wrong. We don't think that there is a perfect solution the \ntwo issues that you mentioned but we are pretty sure there are several that \nwork well enough in practice if they are implemented correctly. \n\nTim\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 648 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140809/65784dc2/attachment.sig>"
            },
            {
                "author": "Sergio Lerner",
                "date": "2014-08-09T13:10:50",
                "message_text_only": "Hi Tim,\n It's clear from the paper that the second party in the protocol can\nde-anonymize the first party. So it's seems that dishonest shufflers\nwould prefer to be in that position in the queue.\nThere are two possible solutions to this:\n\n1. Derive the first order of parties in the shuffle from the hash of all\ninputs provided (as a seed for a pseudo-random number generator).\n2. Repeat the shuffle several times with an different party order (e.g.\nan order that is deterministically derived from the hash of all the outputs)\n\n\nBest regards,\n Sergio/\n\n\nOn 09/08/2014 07:04 a.m., Tim Ruffing wrote:\n> You are raising valid questions and one goal of our posting here is indeed to \n> discuss exactly these system issues.\n>\n> On Thursday 07 August 2014 15:00:11 you wrote:\n>> I think the description at your website leaves out the truly interesting\n>> part: How do you decentralize this securely?\n>> - How do Alice, Bob, Charlie and Dave communicate, i.e. which network is\n>> used for communication and how?\n> The simplest approach is obviously to use direct connections to a randomly \n> elected leader, who is also responsible for the broadcasts.\n> One advantage of CoinShuffle is that the unlinkability between input and \n> output addresses is guaranteed, no matter which underlying network you use. \n> (Still, it is a good idea in general to hide your IP address but we can let \n> the user decide here.)\n>\n> Of course, there would be other possibilities, such as overlay networks. \n> Coinmux, a CoinJoin prototype by Michael Pearce (http://coinmux.com/) uses \n> TomP2P, a distributed hash table, for communication. \n>\n> Do you have any hints regarding this point?\n>\n>> - How does Alice know that Bob, Charlie and Dave are not the same person?\n>> (= how do you prevent a Sybil attack?)\n>>\n>> Because thats the real problem with mixing it seems - ensuring that your\n>> mixing partners are actually 100 people and not just 1 attacker. There are\n>> probably many mixing algorithms which work if you solve that problem, but I\n>> don't see how you offer a solution for it :(\n> It's true that there are a few proposals for mixing protocols which all have \n> their advantages and disadvantages. However, it's not true that the mixing \n> itself becomes simple if you solve the problem of Sybil attacks. Still, mixing \n> is difficult to get right: Even if there are no Sybil attacks, you have to \n> ensure that the participants (or a server) cannot break unlinkability or steal \n> money. Actually that's why there are several proposals for mixing protocols, \n> because there is no obvious perfect solution.\n>\n> Regarding your question:\n> It is indeed very important to get this right. Fundamentally, there is nothing \n> that prevents the attacker from creating a lot of identities participating in \n> a lot of CoinJoins. However, there are ways that make it hard for the attacker \n> to put an honest user together only with malicious users.\n>\n> For a moment, assume that you can reliably establish a pool of users that \n> would like to participate in the protocol. (I will discuss this later.) \n> You have to divide the users to individual groups, i.e., CoinJoins runs. If \n> the assignment cannot be influenced by the attacker, then the probability that \n> there are also honest users in a run is quite high. Of course, the attacker is \n> able to reduce your anonymity set but they cannot just put you together only \n> with their malicious identities.\n>\n> Note that the attacker has to pay transaction fees for joining many \n> transaction. One could even increase the required fee depending on the number \n> of users in the pool (enforced by honest CoinShuffle participants that would \n> not accept CoinJoins that pay a lower transaction fee).\n>\n> And making sure that the attacker cannot influence the assignment is simple: \n> One can use the hash of all users' public keys in the pool to determine the \n> assignment for example.\n>  \n> For the initial setup step, i.e., creating the pool of participants, you need \n> some kind of \"bulletin board\". \n>\n> One possibility is to use an underlying peer-to-peer network. Bitcoin itself \n> is the first that comes to the mind but it does not allow arbitrary messages. \n> So if we do not want to change the Bitcoin protocol, chans in Bitmessage are a \n> very promising possibility. Bitmessage relies basically on the same broadcast \n> mechanism as Bitcoin. If you as a peer use enough outgoing connections to \n> other peers, it's very difficult for an attacker to ensure that your message \n> will not be spread among the network. (Btw, people have used this to do \n> CoinJoin  manually already \n> https://forum.namecoin.info/viewtopic.php?f=2&t=1694 .)\n> Solutions like distributed hashtables (TomP2P again) are another possibility. \n> We are not sure which of those approaches provides the best robustness against \n> malicious nodes that try to stop single participants from reaching the \n> network. For the setup step, latency is not an issue, so Bitmessage is indeed \n> a promising candidate here.\n>  \n> I think that in general, P2P is the way to go here, but there are other \n> approaches as well:\n>\n>  - A possibility is to have a lot of servers acting as bulletin \n> boards. The user sends his announcement message to all of the servers and \n> the user waits until at some of the servers send back a guarantee to \n> include the user. After some time, the servers agree on the pool of the users \n> just by taking all the users that have registered with at least one of the \n> servers. There are well-understood protocols to achieve this goal or similar \n> goals, because essentially the same problem arises in e-voting (see \n> http://arxiv.org/pdf/1401.4151 for just one example. this paper provides also \n> a detailed discussion of related protocols in section 9).\n> Of course, the disadvantage of this approach is that the protocol is not \n> really decentralized anymore.\n>\n>  - If you really want to be on the safe side, you can include your \n> announcement messages in the Bitcoin blockchain, e.g., by adding your \n> announcement message to an unspendable output, at the cost of an additional \n> transaction. I know that putting data to the blockchain is discouraged but let \n> me explain why it is useful here: If you want to do several CoinJoins in a \n> row, you can include your announcement message for the second CoinJoin in the \n> transaction of the first CoinJoin, so your announcement is very robust but you \n> do not need an additional transaction, because you can piggy-back on the frist \n> transaction.\n>\n> Additionally, it is possible to combine these approaches by joining several \n> pools. \n>\n> Another interesting point that my co-author Aniket Kate mentioned is that you \n> can look at that problem as a social issue: You could combine this with \n> information from your friends. You can participate in a CoinJoin only if your \n> friends tell you that they also participate in the same run. They do not even \n> have to reveal their input address, they just have to reveal that their \n> address is in a particular run. Of course, this is not yet a technical \n> solution but a very interesting idea.\n>\n> Don't get me wrong. We don't think that there is a perfect solution the \n> two issues that you mentioned but we are pretty sure there are several that \n> work well enough in practice if they are implemented correctly. \n>\n> Tim\n>\n>\n> ------------------------------------------------------------------------------\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140809/7d3fdf07/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-08-09T20:17:58",
                "message_text_only": "On Sat, Aug 9, 2014 at 6:10 AM, Sergio Lerner <sergiolerner at certimix.com>\nwrote:\n\n>  Hi Tim,\n>  It's clear from the paper that the second party in the protocol can\n> de-anonymize the first party. So it's seems that dishonest shufflers would\n> prefer to be in that position in the queue.\n>\n\nThat's not clear to me. The 2nd party doesn't know how the 3rd, 4th, 5th,\netc. parties shuffled the outputs, since it doesn't have their decryption\nkeys.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140809/c4a74ebd/attachment.html>"
            },
            {
                "author": "Chris Pacia",
                "date": "2014-08-11T06:25:27",
                "message_text_only": "One issue I do see is the protocol requires participants to check the\ninputs submitted by others are valid. Lite clients (at least of the p2p\nvariety) cannot perform this check.\n\nYou could skip the verification part and if the inputs turn out to be\ninvalid then you'll find out when it doesn't confirm. This would problem\nopen the protocol up to dos attacks and prevent part of the \"blame\" phase\nfrom working properly.\n\nAlternatively you can have the participants submit the merkle proof for the\ninput. This would require inputs to have at least one confirmation, however.\nOn Aug 6, 2014 6:42 PM, \"Tim Ruffing\" <tim.ruffing at mmci.uni-saarland.de>\nwrote:\n\n> Hey,\n>\n> We (a group of researchers in Germany) propose a decentralized protocol for\n> CoinJoin, a way to mix coins among users to improve anonymity. Our\n> protocol is\n> called CoinShuffle. We believe that CoinShuffle is a way to implement\n> CoinJoin\n> in the original spirit of Bitcoin, i.e., decentralized and without trusted\n> third parties. (If you are not familiar with CoinJoin, the idea is\n> explained\n> here: https://bitcointalk.org/index.php?topic=279249.0 )\n>\n> The protocol is essentially a clever way to create a CoinJoin transaction.\n> Recall that the idea of CoinJoin is mixing with one SINGLE transaction that\n> has multiple input addresses and multiple fresh output addresses (i.e., one\n> pair of addresses per user). The advantage of CoinJoin over mixing with a\n> server or trusted party is that nobody can steal coins. Each user can\n> check if\n> the single transaction sends enough coins to his fresh output address. If\n> this\n> is not the case, the user can just refuse to sign the transaction and\n> nothing\n> (bad) happens.\n>\n> The difficulty in CoinJoin is to let the participants announce their fresh\n> output addresses without breaking anonymity: Of course, if a participant of\n> the protocol just announces \"I have 1 BTC at address X now\" and \"I would\n> like\n> to have it back at address Y\", then everybody can link X and Y and mixing\n> is\n> useless. A naive approach is to send these two messages via a secure\n> channel\n> to a server that organizes the whole mixing. While the server cannot steal\n> coins, the server still has to be trusted for anonymity, because it knows\n> which input addresses belong to which output addresses.\n>\n> We present the list of CoinShuffle's features at the end of this e-mail. An\n> overview over the technical details can be found on the project page:\n> http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/\n>\n> Moreover, for the full details, have a look at the research paper on\n> CoinShuffle that can be found here:\n> http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/coinshuffle.pdf\n>\n> The paper has been accepted at a major European academic conference on\n> security (ESORICS). We will present the idea there.\n>\n> Our Proof-of-concept Implementation\n> -----------------------------------\n> There is a proof-of-concept implementation (written in Python) available on\n> our project page. It is really only a proof-of-concept and it implements\n> only\n> the announcement of the addresses, not the creation of the transaction.\n> Moreover, the code is CERTAINLY INSECURE and not well-written; our only\n> goal\n> was to demonstrate feasibility and estimate the performance of our\n> approach.\n>\n>\n> Our Future Plans\n> ----------------\n> Now we are planning a full, open-source implementation of the protocol. Of\n> course, we would like to build on top of an existing wide-spread client.\n> Since\n> we do not have much experience in the design of existing Bitcoin clients,\n> we\n> would appreciate any help in the process. In particular, we did not decide\n> which of the existing clients we would like to extend. Any hints towards\n> this\n> decisions would very helpful. Help in design and coding would be great but\n> we\n> also would like to hear your comments, criticism, and improvements for the\n> protocol itself.\n>\n> CoinShuffle Features\n> --------------------\n> CoinShuffle has the following features:\n>\n>  - Decentralization / no third party:\n> There is no (trusted or untrusted) third party in a run of the protocol.\n> (Still, as in all mixing solutions, users need some way to gather together\n> before they can run the protocol. This can be done via a P2P protocol if a\n> decentralized solution is desired also for this step.)\n>\n>\n>  - Unlinkability of input and output addresses:\n> Nobody, in particular no server (there is none!), can link input and output\n> addresses of a mixing transaction, as long as there are at least two honest\n> participants in run of the protocol.\n>\n> (This is not a weakness: If there is only one honest participant,\n> meaningful\n> mixing is just impossible, no matter how it is organized. If all the other\n> participants collude, they know all their input and output addresses and\n> can\n> immediately determine the output address of the honest participant.)\n>\n>  - Security against thefts:\n> As explained above, nobody can steal coins during the mixing because of the\n> CoinJoin principle.\n> Every participant can verify that his money will not be stolen. Otherwise,\n> he\n> refuses to sign the transaction and nothing will happen.\n>\n>  - Robustness against denial-of-service:\n> In CoinJoin, a single malicious (or malfunctioning) client suffices to stop\n> the whole protocol (e.g., by just refusing to sing the transaction without\n> a\n> proper reason.) This can easily lead to DoS attacks but these can be\n> countered\n> in CoinShuffle.\n>\n> While in case of disruption, the current run of the protocol has to stop,\n> CoinShuffle addresses this problem as follows:  In case of active\n> disruption,\n> i.e., some participant sends wrong messages, the protocol provides a proof\n> of\n> this misbehavior. Then the honest protocol parties can start a new run of\n> the\n> protocol without the misbehaving participant. Also in case of passive\n> disruption, i.e., some participant does not respond (for whatever reason),\n> the\n> remaining participants can agree on starting a new run without this\n> participant. This ensures that the protocol will finally succeed even in\n> the\n> presence of malicious participant (although this can take quite a while\n> then).\n>\n>  - Only public-key encryption and signatures:\n> The protocol requires only well-established cryptographic primitives.\n> Besides\n> signatures and hash functions (that are already used by Bitcoin), only\n> standard public-key encryption is necessary.\n>\n>  - Efficiency:\n> A run of the protocol with 30 participants takes less than 100 seconds (in\n> a\n> setting with reasonable bandwidth and delay). This is not much, given that\n> 10\n> min (on average) are required to confirm the mixing transaction anyway.\n>\n> The costs are almost completely caused by communication. The computation\n> overhead is minimal. (This is the main achievement actually. In theory, it\n> is\n> clear that a protocol with all the properties can be built. However,\n> generic\n> constructions cannot be used in practice yet, because the computation and\n> communication costs are huge.)\n>\n> - Compatibility:\n> As CoinShuffle works on top of Bitcoin, it is fully compatible with the\n> current Bitcoin system. No changes to the Bitcoin protocol are required.\n>\n>\n> By the way: The NXT cryptocurrency picked up our idea and an\n> implementation of\n> CoinShuffle for a part of NXT is under way. (\n> https://twitter.com/comefrombeyond/status/485429369268350977 )\n>\n>\n> TL,DR:\n> Mixing is the way to improve anonymity in Bitcoin now, as it does not\n> require\n> changes to the Bitcoin protocol. We propose CoinShuffle, a decentralized\n> protocol to perform mixing in a secure way without trusted third parties,\n> see\n> http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/ for a technical\n> overview. Our next step is to implement the protocol. Help in design and\n> coding would be great but we also would like to hear your comments,\n> criticism,\n> and improvements for the protocol itself.\n>\n> Best,\n> Tim Ruffing, Pedro Moreno-Sanchez, Aniket Kate\n>\n>\n> ------------------------------------------------------------------------------\n> Infragistics Professional\n> Build stunning WinForms apps today!\n> Reboot your WinForms applications with our WinForms controls.\n> Build a bridge from your legacy apps to the future.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140811/21009e71/attachment.html>"
            },
            {
                "author": "Chris Pacia",
                "date": "2014-08-11T06:30:16",
                "message_text_only": "Actually getUTXO would probably work here as well. It isn't authenticated\nbut it should be good enough for this purpose. The worst that would happen\nis the tx doesn't confirm.\nOn Aug 11, 2014 2:25 AM, \"Chris Pacia\" <ctpacia at gmail.com> wrote:\n\n> One issue I do see is the protocol requires participants to check the\n> inputs submitted by others are valid. Lite clients (at least of the p2p\n> variety) cannot perform this check.\n>\n> You could skip the verification part and if the inputs turn out to be\n> invalid then you'll find out when it doesn't confirm. This would problem\n> open the protocol up to dos attacks and prevent part of the \"blame\" phase\n> from working properly.\n>\n> Alternatively you can have the participants submit the merkle proof for\n> the input. This would require inputs to have at least one confirmation,\n> however.\n> On Aug 6, 2014 6:42 PM, \"Tim Ruffing\" <tim.ruffing at mmci.uni-saarland.de>\n> wrote:\n>\n>> Hey,\n>>\n>> We (a group of researchers in Germany) propose a decentralized protocol\n>> for\n>> CoinJoin, a way to mix coins among users to improve anonymity. Our\n>> protocol is\n>> called CoinShuffle. We believe that CoinShuffle is a way to implement\n>> CoinJoin\n>> in the original spirit of Bitcoin, i.e., decentralized and without trusted\n>> third parties. (If you are not familiar with CoinJoin, the idea is\n>> explained\n>> here: https://bitcointalk.org/index.php?topic=279249.0 )\n>>\n>> The protocol is essentially a clever way to create a CoinJoin transaction.\n>> Recall that the idea of CoinJoin is mixing with one SINGLE transaction\n>> that\n>> has multiple input addresses and multiple fresh output addresses (i.e.,\n>> one\n>> pair of addresses per user). The advantage of CoinJoin over mixing with a\n>> server or trusted party is that nobody can steal coins. Each user can\n>> check if\n>> the single transaction sends enough coins to his fresh output address. If\n>> this\n>> is not the case, the user can just refuse to sign the transaction and\n>> nothing\n>> (bad) happens.\n>>\n>> The difficulty in CoinJoin is to let the participants announce their fresh\n>> output addresses without breaking anonymity: Of course, if a participant\n>> of\n>> the protocol just announces \"I have 1 BTC at address X now\" and \"I would\n>> like\n>> to have it back at address Y\", then everybody can link X and Y and mixing\n>> is\n>> useless. A naive approach is to send these two messages via a secure\n>> channel\n>> to a server that organizes the whole mixing. While the server cannot steal\n>> coins, the server still has to be trusted for anonymity, because it knows\n>> which input addresses belong to which output addresses.\n>>\n>> We present the list of CoinShuffle's features at the end of this e-mail.\n>> An\n>> overview over the technical details can be found on the project page:\n>> http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/\n>>\n>> Moreover, for the full details, have a look at the research paper on\n>> CoinShuffle that can be found here:\n>> http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/coinshuffle.pdf\n>>\n>> The paper has been accepted at a major European academic conference on\n>> security (ESORICS). We will present the idea there.\n>>\n>> Our Proof-of-concept Implementation\n>> -----------------------------------\n>> There is a proof-of-concept implementation (written in Python) available\n>> on\n>> our project page. It is really only a proof-of-concept and it implements\n>> only\n>> the announcement of the addresses, not the creation of the transaction.\n>> Moreover, the code is CERTAINLY INSECURE and not well-written; our only\n>> goal\n>> was to demonstrate feasibility and estimate the performance of our\n>> approach.\n>>\n>>\n>> Our Future Plans\n>> ----------------\n>> Now we are planning a full, open-source implementation of the protocol. Of\n>> course, we would like to build on top of an existing wide-spread client.\n>> Since\n>> we do not have much experience in the design of existing Bitcoin clients,\n>> we\n>> would appreciate any help in the process. In particular, we did not decide\n>> which of the existing clients we would like to extend. Any hints towards\n>> this\n>> decisions would very helpful. Help in design and coding would be great\n>> but we\n>> also would like to hear your comments, criticism, and improvements for the\n>> protocol itself.\n>>\n>> CoinShuffle Features\n>> --------------------\n>> CoinShuffle has the following features:\n>>\n>>  - Decentralization / no third party:\n>> There is no (trusted or untrusted) third party in a run of the protocol.\n>> (Still, as in all mixing solutions, users need some way to gather together\n>> before they can run the protocol. This can be done via a P2P protocol if a\n>> decentralized solution is desired also for this step.)\n>>\n>>\n>>  - Unlinkability of input and output addresses:\n>> Nobody, in particular no server (there is none!), can link input and\n>> output\n>> addresses of a mixing transaction, as long as there are at least two\n>> honest\n>> participants in run of the protocol.\n>>\n>> (This is not a weakness: If there is only one honest participant,\n>> meaningful\n>> mixing is just impossible, no matter how it is organized. If all the other\n>> participants collude, they know all their input and output addresses and\n>> can\n>> immediately determine the output address of the honest participant.)\n>>\n>>  - Security against thefts:\n>> As explained above, nobody can steal coins during the mixing because of\n>> the\n>> CoinJoin principle.\n>> Every participant can verify that his money will not be stolen.\n>> Otherwise, he\n>> refuses to sign the transaction and nothing will happen.\n>>\n>>  - Robustness against denial-of-service:\n>> In CoinJoin, a single malicious (or malfunctioning) client suffices to\n>> stop\n>> the whole protocol (e.g., by just refusing to sing the transaction\n>> without a\n>> proper reason.) This can easily lead to DoS attacks but these can be\n>> countered\n>> in CoinShuffle.\n>>\n>> While in case of disruption, the current run of the protocol has to stop,\n>> CoinShuffle addresses this problem as follows:  In case of active\n>> disruption,\n>> i.e., some participant sends wrong messages, the protocol provides a\n>> proof of\n>> this misbehavior. Then the honest protocol parties can start a new run of\n>> the\n>> protocol without the misbehaving participant. Also in case of passive\n>> disruption, i.e., some participant does not respond (for whatever\n>> reason), the\n>> remaining participants can agree on starting a new run without this\n>> participant. This ensures that the protocol will finally succeed even in\n>> the\n>> presence of malicious participant (although this can take quite a while\n>> then).\n>>\n>>  - Only public-key encryption and signatures:\n>> The protocol requires only well-established cryptographic primitives.\n>> Besides\n>> signatures and hash functions (that are already used by Bitcoin), only\n>> standard public-key encryption is necessary.\n>>\n>>  - Efficiency:\n>> A run of the protocol with 30 participants takes less than 100 seconds\n>> (in a\n>> setting with reasonable bandwidth and delay). This is not much, given\n>> that 10\n>> min (on average) are required to confirm the mixing transaction anyway.\n>>\n>> The costs are almost completely caused by communication. The computation\n>> overhead is minimal. (This is the main achievement actually. In theory,\n>> it is\n>> clear that a protocol with all the properties can be built. However,\n>> generic\n>> constructions cannot be used in practice yet, because the computation and\n>> communication costs are huge.)\n>>\n>> - Compatibility:\n>> As CoinShuffle works on top of Bitcoin, it is fully compatible with the\n>> current Bitcoin system. No changes to the Bitcoin protocol are required.\n>>\n>>\n>> By the way: The NXT cryptocurrency picked up our idea and an\n>> implementation of\n>> CoinShuffle for a part of NXT is under way. (\n>> https://twitter.com/comefrombeyond/status/485429369268350977 )\n>>\n>>\n>> TL,DR:\n>> Mixing is the way to improve anonymity in Bitcoin now, as it does not\n>> require\n>> changes to the Bitcoin protocol. We propose CoinShuffle, a decentralized\n>> protocol to perform mixing in a secure way without trusted third parties,\n>> see\n>> http://crypsys.mmci.uni-saarland.de/projects/CoinShuffle/ for a technical\n>> overview. Our next step is to implement the protocol. Help in design and\n>> coding would be great but we also would like to hear your comments,\n>> criticism,\n>> and improvements for the protocol itself.\n>>\n>> Best,\n>> Tim Ruffing, Pedro Moreno-Sanchez, Aniket Kate\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Infragistics Professional\n>> Build stunning WinForms apps today!\n>> Reboot your WinForms applications with our WinForms controls.\n>> Build a bridge from your legacy apps to the future.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140811/a7c006fb/attachment.html>"
            },
            {
                "author": "Tim Ruffing",
                "date": "2014-08-11T11:38:39",
                "message_text_only": "Hmm, you are right. Lightweight clients are an interesting point, we have to \nthink about a policy for them.\n\nAs you said, the worst case is that the tx will not confirm. So the only \npossible attack is DoS. For clients that rely on servers it's reasonable to \ntrust their servers not to perform DoS. (Anyway, the servers could do worse \nattacks.)\n\nFor SPV-clients (without servers), I'm not sure at the moment. Something like \ngetUTXO seems to be a possibility. I think even SPV-clients can verify the \nvalidity of the tx that created the input that is designated for mixing. Then \nthe only remaining reason why it could be invalid is that the input could have \nbeen spent already otherwise. But in this case, only one honest client with \nfull information would suffice: a signed transaction that spends the money \nwould convince even SPV-clients that the participant with this inputs tries to \ncheat. This transaction could even be provided by lightweight client that got \nif from a server; the transaction is signed by the cheating participant \nanyway.\n\nTim\n\nOn Monday 11 August 2014 02:30:16 Chris Pacia wrote:\n> Actually getUTXO would probably work here as well. It isn't authenticated\n> but it should be good enough for this purpose. The worst that would happen\n> is the tx doesn't confirm.\n> \n> On Aug 11, 2014 2:25 AM, \"Chris Pacia\" <ctpacia at gmail.com> wrote:\n> > One issue I do see is the protocol requires participants to check the\n> > inputs submitted by others are valid. Lite clients (at least of the p2p\n> > variety) cannot perform this check.\n> > \n> > You could skip the verification part and if the inputs turn out to be\n> > invalid then you'll find out when it doesn't confirm. This would problem\n> > open the protocol up to dos attacks and prevent part of the \"blame\" phase\n> > from working properly.\n> > \n> > Alternatively you can have the participants submit the merkle proof for\n> > the input. This would require inputs to have at least one confirmation,\n> > however.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 648 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140811/a827a309/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-08-11T12:08:24",
                "message_text_only": "Putting the efficacy of coinjoin to one side:\n\nOn Mon, Aug 11, 2014 at 1:38 PM, Tim Ruffing <\ntim.ruffing at mmci.uni-saarland.de> wrote:\n\n> Then the only remaining reason why it could be invalid is that the input\n> could have\n> been spent already otherwise. But in this case, only one honest client with\n> full information would suffice: a signed transaction that spends the money\n> would convince even SPV-clients that the participant with this inputs\n> tries to\n> cheat.\n\n\nBear in mind that getutxo does not return the spending transaction - it\ncan't because the UTXO set doesn't record this information (a spent txo is\ndeleted).\n\nHowever, if you have sufficient peers and one is honest, the divergence can\nbe detected and the operation stopped/the user alerted. If all peers are\nlying i.e. your internet connection is controlled by an attacker, it\ndoesn't really make much difference because they could swallow the\ntransaction you're trying to broadcast anyway. Ultimately if your peers\nthink a TXO is spent and refuse to relay transactions that spend them, you\ncan't do much about it even in the non-SPV context: you *must* be able to\nreach at least one peer who believes in the same world as you do.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140811/e6f23b2d/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-08-11T17:06:48",
                "message_text_only": "There should not be a requirement at this level to ensure validity. That\nwould too constrain use cases of implementations of your protocol. It is\nnot difficult to imagine use cases where parties generate chained\ntransactions on top of unconfimed transactions. Although malleability\ncurrently makes this difficult to do safely in general, it is not\ninconceivable that there are circumstances where it would nevertheless be\nsafe or otherwise desireable.\n\nIt is a good security recommendation that clients validate the inputs to a\nshuffle they are participating in. What this means depends on the client --\nchecking the UTXO set for a full node, making some getutxos queries for a\nSPV client. But this should remain a recommendation, not a requirement.\n\n\nOn Mon, Aug 11, 2014 at 4:38 AM, Tim Ruffing <\ntim.ruffing at mmci.uni-saarland.de> wrote:\n\n> Hmm, you are right. Lightweight clients are an interesting point, we have\n> to\n> think about a policy for them.\n>\n> As you said, the worst case is that the tx will not confirm. So the only\n> possible attack is DoS. For clients that rely on servers it's reasonable to\n> trust their servers not to perform DoS. (Anyway, the servers could do worse\n> attacks.)\n>\n> For SPV-clients (without servers), I'm not sure at the moment. Something\n> like\n> getUTXO seems to be a possibility. I think even SPV-clients can verify the\n> validity of the tx that created the input that is designated for mixing.\n> Then\n> the only remaining reason why it could be invalid is that the input could\n> have\n> been spent already otherwise. But in this case, only one honest client with\n> full information would suffice: a signed transaction that spends the money\n> would convince even SPV-clients that the participant with this inputs\n> tries to\n> cheat. This transaction could even be provided by lightweight client that\n> got\n> if from a server; the transaction is signed by the cheating participant\n> anyway.\n>\n> Tim\n>\n> On Monday 11 August 2014 02:30:16 Chris Pacia wrote:\n> > Actually getUTXO would probably work here as well. It isn't authenticated\n> > but it should be good enough for this purpose. The worst that would\n> happen\n> > is the tx doesn't confirm.\n> >\n> > On Aug 11, 2014 2:25 AM, \"Chris Pacia\" <ctpacia at gmail.com> wrote:\n> > > One issue I do see is the protocol requires participants to check the\n> > > inputs submitted by others are valid. Lite clients (at least of the p2p\n> > > variety) cannot perform this check.\n> > >\n> > > You could skip the verification part and if the inputs turn out to be\n> > > invalid then you'll find out when it doesn't confirm. This would\n> problem\n> > > open the protocol up to dos attacks and prevent part of the \"blame\"\n> phase\n> > > from working properly.\n> > >\n> > > Alternatively you can have the participants submit the merkle proof for\n> > > the input. This would require inputs to have at least one confirmation,\n> > > however.\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140811/a7e55076/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "CoinShuffle: decentralized CoinJoin without trusted third parties",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Sergio Lerner",
                "xor",
                "Tim Ruffing",
                "Mark Friedenbach",
                "Chris Pacia"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 49260
        }
    },
    {
        "title": "[Bitcoin-development] Payment ID #'s for Stealth Addresses",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-08-06T23:33:09",
                "message_text_only": "Real-world experience with stealth address implementations used by\nCryptonote/Monero/etc. have shown that being able to attach a number of\nsome kind to each stealth-sent txout is valuable. For instance an\nexchange with many customers can use such #'s to disambiguate payments\nand credit the correct customer's account. Similarly an informal\nperson-to-person transaction can attach a number short enough to be\ncommunicated verbally or on paper. Finally multiple payments with the\nsame ID # can be merged together in wallet UI's, allowing\nmerge-avoidance to be conveniently used with stealth addresses.\n\nTo avoid accidental collision such payment #'s should be at least\n64-bits; to avoid privacy loss the encoded size should be the same for\nall users. Thus we pick 64-bits or 8-bytes. In addition for the purposes\nof CoinJoin and multiple outputs it would be desirable for all\nstealth-using outputs the option of sharing a single 33-byte ephemeral\npubkey. Thus our OP_RETURN output becomes:\n\n    OP_RETURN <ephemeral pubkey> <payment ID 1> {<ID 2> ... <ID n>}\n\nOf course, this can't be accomodated within the existing 40-byte, one\nOP_RETURN per tx, IsStandard() rules, something which is already causing\nissues w/ Dark Wallet when users try to send to multiple stealth\naddresses at once, and when multiple stealth sends are CoinJoin'd\ntogether.\n\n1) \"Merge avoidance\", Dec 11th 2013, Mike Hearn,\n    https://medium.com/@octskyward/merge-avoidance-7f95a386692f\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140806/ea595171/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Payment ID #'s for Stealth Addresses",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1734
        }
    },
    {
        "title": "[Bitcoin-development] SIGHASH_ANYONECANPAY extra inputs DoS attack",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-08-07T01:03:50",
                "message_text_only": "tl;dr: Transactions with SIGHASH_ANYONECANPAY-using inputs can be DoS\nattacked by attackers adding extra inputs to them that make the fee/byte\npaid unfavorable to miners, while still being high enough to be relayed.\nWhile just a nuisance DoS attack, this is a serious obstacle towards\nusing ANYONECANPAY.\n\n\nBackground: What uses ANYONECANPAY?\n-----------------------------------\n\n1) Crowdfunds/assurance contracts: e.g. Hearn's upcoming Lighthouse, as\nwell as Armory's implementation.\n\n2) Fee bumping: receiver or sender can add inputs w/ ANYONECANPAY to get\na tx confirmed without the (expensive) overhead of a second CPFP tx.\n\n3) Privacy: inputs are more deniable in some cases, e.g. dust used for\nfees, which anyone could have added.\n\n4) Replace-by-fee scorched earth: best implementations(1) depend on fee\nbumping.\n\n\nPartial defense: replace-by-fee\n-------------------------------\n\nThe attacker's modified transaction will usually, but not always, be\nreplaced by the intended one as the latter will have higher fees.\nHowever replace-by-fee implementations must charge adequately for\nnetwork bandwidth consumed, so there will be edge-cases where the\nreplacement does not happen.\n\n\nTransaction fee/byte optimization\n---------------------------------\n\nEach input that does not use SIGHASH_ALL can be evaluated in terms of\nwhether or not it increases the fees/byte paid by the transaction. Thus\nwe can optimize a transaction to pay the highest fees/byte by doing the\nfollowing:\n\n    def optimize_tx(tx):\n        tx2 = CTransaction(vin=[], vout=tx.vout, nLockTime=tx.nLockTime)\n\n        for txin in <tx.vin sorted by fees/byte>:\n            if <txin depends on other txins>:\n                continue\n\n            if <tx2 is valid>:\n                prev_fee_per_byte = tx2.fees / len(tx2.serialized())\n                tx2.vin.append(txin)\n                if tx2.fees / len(tx2.serialized()) < prev_fee_per_byte:\n                    # adding txin decreased fees/byte\n                    tx2.vin.pop()\n                    return tx2\n\n            else:\n                tx2.vin.append(txin)\n\n        return tx\n\nEssentially txin's that reduce the profitability of the transaction are\ndropped, including the attacker's added txins. Meanwhile txins that\nincrease the profitability can be added by anyone.\n\n\n1) \"[Bitcoin-development] Replace-by-fee scorched-earth without child-pays-for-parent\",\n   Apr 28th 2014, Peter Todd,\n   https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg05211.html\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140807/38ccaaf3/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "SIGHASH_ANYONECANPAY extra inputs DoS attack",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2781
        }
    },
    {
        "title": "[Bitcoin-development] Miners MiTM",
        "thread_messages": [
            {
                "author": "Pedro Worcel",
                "date": "2014-08-07T23:02:21",
                "message_text_only": "Hi there,\n\nI was wondering if you guys have come across this article:\n\nhttp://www.wired.com/2014/08/isp-bitcoin-theft/\n\nThe TL;DR is that somebody is abusing the BGP protocol to be in a position\nwhere they can intercept the miner traffic. The concerning point is that\nthey seem to be having some degree of success in their endeavour and\nearning profits from it.\n\nI do not understand the impact of this (I don't know much about BGP, the\nmining protocol nor anything else, really), but I thought it might be worth\nputting it up here.\n\nTa,\nPedro\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/21c667f5/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2014-08-07T23:45:44",
                "message_text_only": "On Thursday, August 07, 2014 11:02:21 PM Pedro Worcel wrote:\n> Hi there,\n> \n> I was wondering if you guys have come across this article:\n> \n> http://www.wired.com/2014/08/isp-bitcoin-theft/\n> \n> The TL;DR is that somebody is abusing the BGP protocol to be in a position\n> where they can intercept the miner traffic. The concerning point is that\n> they seem to be having some degree of success in their endeavour and\n> earning profits from it.\n> \n> I do not understand the impact of this (I don't know much about BGP, the\n> mining protocol nor anything else, really), but I thought it might be worth\n> putting it up here.\n\nThis is old news; both BFGMiner and Eloipool were hardened against it a long \ntime ago (although no Bitcoin pools have deployed it so far). I'm not aware of \nany actual case of it being used against Bitcoin, though - the target has \nalways been scamcoins."
            },
            {
                "author": "slush",
                "date": "2014-08-08T00:29:31",
                "message_text_only": "AFAIK the only protection is SSL + certificate validation on client side.\nHowever certificate revocation and updates in miners are pain in the ass,\nthat's why majority of pools (mine including) don't want to play with\nthat...\n\nslush\n\n\nOn Fri, Aug 8, 2014 at 1:45 AM, Luke Dashjr <luke at dashjr.org> wrote:\n\n> On Thursday, August 07, 2014 11:02:21 PM Pedro Worcel wrote:\n> > Hi there,\n> >\n> > I was wondering if you guys have come across this article:\n> >\n> > http://www.wired.com/2014/08/isp-bitcoin-theft/\n> >\n> > The TL;DR is that somebody is abusing the BGP protocol to be in a\n> position\n> > where they can intercept the miner traffic. The concerning point is that\n> > they seem to be having some degree of success in their endeavour and\n> > earning profits from it.\n> >\n> > I do not understand the impact of this (I don't know much about BGP, the\n> > mining protocol nor anything else, really), but I thought it might be\n> worth\n> > putting it up here.\n>\n> This is old news; both BFGMiner and Eloipool were hardened against it a\n> long\n> time ago (although no Bitcoin pools have deployed it so far). I'm not\n> aware of\n> any actual case of it being used against Bitcoin, though - the target has\n> always been scamcoins.\n>\n>\n> ------------------------------------------------------------------------------\n> Infragistics Professional\n> Build stunning WinForms apps today!\n> Reboot your WinForms applications with our WinForms controls.\n> Build a bridge from your legacy apps to the future.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/bf203262/attachment.html>"
            },
            {
                "author": "Christopher Franko",
                "date": "2014-08-08T00:37:27",
                "message_text_only": "What exactly makes bitcoin less of a target than a \"scamcoin\" which I\nsuspect means anything that != bitcoin?\n\n\nOn 7 August 2014 20:29, slush <slush at centrum.cz> wrote:\n\n> AFAIK the only protection is SSL + certificate validation on client side.\n> However certificate revocation and updates in miners are pain in the ass,\n> that's why majority of pools (mine including) don't want to play with\n> that...\n>\n> slush\n>\n>\n> On Fri, Aug 8, 2014 at 1:45 AM, Luke Dashjr <luke at dashjr.org> wrote:\n>\n>> On Thursday, August 07, 2014 11:02:21 PM Pedro Worcel wrote:\n>> > Hi there,\n>> >\n>> > I was wondering if you guys have come across this article:\n>> >\n>> > http://www.wired.com/2014/08/isp-bitcoin-theft/\n>> >\n>> > The TL;DR is that somebody is abusing the BGP protocol to be in a\n>> position\n>> > where they can intercept the miner traffic. The concerning point is that\n>> > they seem to be having some degree of success in their endeavour and\n>> > earning profits from it.\n>> >\n>> > I do not understand the impact of this (I don't know much about BGP, the\n>> > mining protocol nor anything else, really), but I thought it might be\n>> worth\n>> > putting it up here.\n>>\n>> This is old news; both BFGMiner and Eloipool were hardened against it a\n>> long\n>> time ago (although no Bitcoin pools have deployed it so far). I'm not\n>> aware of\n>> any actual case of it being used against Bitcoin, though - the target has\n>> always been scamcoins.\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Infragistics Professional\n>> Build stunning WinForms apps today!\n>> Reboot your WinForms applications with our WinForms controls.\n>> Build a bridge from your legacy apps to the future.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140807/dcad83ff/attachment.html>"
            },
            {
                "author": "Pedro Worcel",
                "date": "2014-08-08T01:07:04",
                "message_text_only": "> the only protection is SSL + certificate validation on client side.\nHowever certificate revocation and updates in miners are pain in the ass,\nthat's why majority of pools (mine including) don't want to play with\nthat...\n\nAnother solution which would have less overhead would be to implement\nsomething akin to what openssh does. The OpenSSH client stores a\ncertificate fingerprint, which is then verified automatically upon further\nconnections to the server.\n\nThe initial connection needs to be verified manually by the operator,\nthough.\n\n> Certificate validation isn't needed unless the attacker can do a direct\nMITM\nat connection time, which is a lot harder to maintain than injecting a\nclient.reconnect. This, combined with your concern about up to date\ncerts/revokes/etc, is why BFGMiner defaults to TLS without cert checking for\nstratum.\n\nSeems to me that it would correctly mitigate the attack mentioned in the\nwired article. I am surprised that miners are not worried about losing\ntheir profits, I would personally be quite annoyed.\n\n\n\n2014-08-08 12:37 GMT+12:00 Christopher Franko <chrisjfranko at gmail.com>:\n\n> What exactly makes bitcoin less of a target than a \"scamcoin\" which I\n> suspect means anything that != bitcoin?\n>\n>\n> On 7 August 2014 20:29, slush <slush at centrum.cz> wrote:\n>\n>> AFAIK the only protection is SSL + certificate validation on client side.\n>> However certificate revocation and updates in miners are pain in the ass,\n>> that's why majority of pools (mine including) don't want to play with\n>> that...\n>>\n>> slush\n>>\n>>\n>> On Fri, Aug 8, 2014 at 1:45 AM, Luke Dashjr <luke at dashjr.org> wrote:\n>>\n>>> On Thursday, August 07, 2014 11:02:21 PM Pedro Worcel wrote:\n>>> > Hi there,\n>>> >\n>>> > I was wondering if you guys have come across this article:\n>>> >\n>>> > http://www.wired.com/2014/08/isp-bitcoin-theft/\n>>> >\n>>> > The TL;DR is that somebody is abusing the BGP protocol to be in a\n>>> position\n>>> > where they can intercept the miner traffic. The concerning point is\n>>> that\n>>> > they seem to be having some degree of success in their endeavour and\n>>> > earning profits from it.\n>>> >\n>>> > I do not understand the impact of this (I don't know much about BGP,\n>>> the\n>>> > mining protocol nor anything else, really), but I thought it might be\n>>> worth\n>>> > putting it up here.\n>>>\n>>> This is old news; both BFGMiner and Eloipool were hardened against it a\n>>> long\n>>> time ago (although no Bitcoin pools have deployed it so far). I'm not\n>>> aware of\n>>> any actual case of it being used against Bitcoin, though - the target has\n>>> always been scamcoins.\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Infragistics Professional\n>>> Build stunning WinForms apps today!\n>>> Reboot your WinForms applications with our WinForms controls.\n>>> Build a bridge from your legacy apps to the future.\n>>>\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Want fast and easy access to all the code in your enterprise? Index and\n>> search up to 200,000 lines of code with a free copy of Black Duck\n>> Code Sight - the same software that powers the world's largest code\n>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>> http://p.sf.net/sfu/bds\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/b550abc2/attachment.html>"
            },
            {
                "author": "slush",
                "date": "2014-08-08T02:22:42",
                "message_text_only": "Although 140 BTC sounds scary, actually it was very minor issue and most of\nminers aren't even aware about it.\n\nTLS would probably make the attack harder, that's correct. However if\nsomebody controls ISP routers, then MITM with TLS is harder, yet possible.\n\nslush\n\n\nOn Fri, Aug 8, 2014 at 3:07 AM, Pedro Worcel <pedro at worcel.com> wrote:\n\n>\n> Seems to me that it would correctly mitigate the attack mentioned in the\n> wired article. I am surprised that miners are not worried about losing\n> their profits, I would personally be quite annoyed.\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/d73a8281/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2014-08-08T01:01:15",
                "message_text_only": "On Friday, August 08, 2014 12:29:31 AM slush wrote:\n> AFAIK the only protection is SSL + certificate validation on client side.\n> However certificate revocation and updates in miners are pain in the ass,\n> that's why majority of pools (mine including) don't want to play with\n> that...\n\nCertificate validation isn't needed unless the attacker can do a direct MITM \nat connection time, which is a lot harder to maintain than injecting a \nclient.reconnect. This, combined with your concern about up to date \ncerts/revokes/etc, is why BFGMiner defaults to TLS without cert checking for \nstratum.\n\nLuke"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-08-08T09:53:24",
                "message_text_only": ">\n> Certificate validation isn't needed unless the attacker can do a direct\n> MITM\n> at connection time, which is a lot harder to maintain than injecting a\n> client.reconnect.\n>\n\nSurely the TCP connection will be reset once the route reconfiguration is\ncompleted, either by the MITM server or by the client TCP stack when it\ndiscovers the server doesn't know about the connection anymore?\n\nTLS without cert validation defeats the point, you can still be connected\nto a MITM at any point by anyone who can simply interrupt or corrupt the\nstream, forcing a reconnect.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/e7ec4558/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-08T18:21:18",
                "message_text_only": "gmaxwell noted on IRC that enabling TLS could be functionally, if not\nliterally, a DoS on the pool servers.  Hence the thought towards a\nmore lightweight method that simply prevents client payout redirection\n+ server impersonation.\n\n\nOn Fri, Aug 8, 2014 at 5:53 AM, Mike Hearn <mike at plan99.net> wrote:\n>> Certificate validation isn't needed unless the attacker can do a direct\n>> MITM\n>> at connection time, which is a lot harder to maintain than injecting a\n>> client.reconnect.\n>\n>\n> Surely the TCP connection will be reset once the route reconfiguration is\n> completed, either by the MITM server or by the client TCP stack when it\n> discovers the server doesn't know about the connection anymore?\n>\n> TLS without cert validation defeats the point, you can still be connected to\n> a MITM at any point by anyone who can simply interrupt or corrupt the\n> stream, forcing a reconnect.\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Luke Dashjr",
                "date": "2014-08-08T18:27:29",
                "message_text_only": "On Friday, August 08, 2014 6:21:18 PM Jeff Garzik wrote:\n> gmaxwell noted on IRC that enabling TLS could be functionally, if not\n> literally, a DoS on the pool servers.  Hence the thought towards a\n> more lightweight method that simply prevents client payout redirection\n> + server impersonation.\n\nMy thought for GBT2 a while ago was to use simple ECDSA signatures for \nmessages. It'd be nice to use the same as Bitcoin, but then we'd hit problems \nwith RedHat/Fedora legal being stupid. :(\n\nLuke"
            },
            {
                "author": "Laszlo Hanyecz",
                "date": "2014-08-08T18:34:01",
                "message_text_only": "Mutual CHAP could work.  This is commonly done in PPP and iSCSI.  The idea is simply that both sides authenticate.  The server expects the client to provide a password, and the client expects the server to provide a (different) password.  If you masquerade as the server, you won't be able to authenticate because every client has a different password they expect from the server, so they won't do work for you. MITM on the server can capture the exchange but CHAP protects against replay.\n\nhttps://en.wikipedia.org/wiki/Challenge-Handshake_Authentication_Protocol\n\n-Laszlo\n\n\nOn Aug 8, 2014, at 6:21 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> gmaxwell noted on IRC that enabling TLS could be functionally, if not\n> literally, a DoS on the pool servers.  Hence the thought towards a\n> more lightweight method that simply prevents client payout redirection\n> + server impersonation.\n> \n> \n> On Fri, Aug 8, 2014 at 5:53 AM, Mike Hearn <mike at plan99.net> wrote:\n>>> Certificate validation isn't needed unless the attacker can do a direct\n>>> MITM\n>>> at connection time, which is a lot harder to maintain than injecting a\n>>> client.reconnect.\n>> \n>> \n>> Surely the TCP connection will be reset once the route reconfiguration is\n>> completed, either by the MITM server or by the client TCP stack when it\n>> discovers the server doesn't know about the connection anymore?\n>> \n>> TLS without cert validation defeats the point, you can still be connected to\n>> a MITM at any point by anyone who can simply interrupt or corrupt the\n>> stream, forcing a reconnect.\n>> \n>> ------------------------------------------------------------------------------\n>> Want fast and easy access to all the code in your enterprise? Index and\n>> search up to 200,000 lines of code with a free copy of Black Duck\n>> Code Sight - the same software that powers the world's largest code\n>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>> http://p.sf.net/sfu/bds\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n> \n> \n> \n> -- \n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n> \n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Sergio Lerner",
                "date": "2014-08-09T12:15:26",
                "message_text_only": "Since the information exchanged between the pool and the miner is\npublic, all that's needed is a mutual private MAC key that authenticates\nmessages.\nThis requires a registration step, that can be done only once using a\nsimple web interface over https to the miner website.\nBut the miner website is not the miner server, so the worst DoS would be\npreventing new miners to join the pool, which is not very often.\nThe MAC key can be provided directly by the miner. And the pool\nassociates the MAC key with a Bitcoin public address.\nThe overhead would be minimal.\n\n\n-Sergio."
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-08T03:18:47",
                "message_text_only": "You don't necessarily need the heavy weight of SSL.\n\nYou only need digitally signed envelopes between miner and pool[1].\n\n[1] Unless the pool is royally stupid and will somehow credit miner B, if\nminer B provides to the pool a copy of miner A's work.\n\n\n\nOn Thu, Aug 7, 2014 at 8:29 PM, slush <slush at centrum.cz> wrote:\n\n> AFAIK the only protection is SSL + certificate validation on client side.\n> However certificate revocation and updates in miners are pain in the ass,\n> that's why majority of pools (mine including) don't want to play with\n> that...\n>\n> slush\n>\n>\n> On Fri, Aug 8, 2014 at 1:45 AM, Luke Dashjr <luke at dashjr.org> wrote:\n>\n>> On Thursday, August 07, 2014 11:02:21 PM Pedro Worcel wrote:\n>> > Hi there,\n>> >\n>> > I was wondering if you guys have come across this article:\n>> >\n>> > http://www.wired.com/2014/08/isp-bitcoin-theft/\n>> >\n>> > The TL;DR is that somebody is abusing the BGP protocol to be in a\n>> position\n>> > where they can intercept the miner traffic. The concerning point is that\n>> > they seem to be having some degree of success in their endeavour and\n>> > earning profits from it.\n>> >\n>> > I do not understand the impact of this (I don't know much about BGP, the\n>> > mining protocol nor anything else, really), but I thought it might be\n>> worth\n>> > putting it up here.\n>>\n>> This is old news; both BFGMiner and Eloipool were hardened against it a\n>> long\n>> time ago (although no Bitcoin pools have deployed it so far). I'm not\n>> aware of\n>> any actual case of it being used against Bitcoin, though - the target has\n>> always been scamcoins.\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Infragistics Professional\n>> Build stunning WinForms apps today!\n>> Reboot your WinForms applications with our WinForms controls.\n>> Build a bridge from your legacy apps to the future.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=153845071&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140807/a8c6de00/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-08-08T09:42:52",
                "message_text_only": ">\n> AFAIK the only protection is SSL + certificate validation on client side.\n> However certificate revocation and updates in miners are pain in the ass,\n> that's why majority of pools (mine including) don't want to play with\n> that...\n>\n\nWhy would miners need updates? If they implement the standard SSL\ninfrastructure you can change certificates and keys without needing to\nupdate miners.\n\nBesides, when it comes to financial services SSL is essential, I'm kind of\nsurprised it wasn't already used everywhere. I wouldn't use an online bank\nthat didn't support SSL, I would see it as a a sign of serious problems.\nHeck I wouldn't even use webmail that didn't support SSL these days.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/2df06b86/attachment.html>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-08-09T19:39:54",
                "message_text_only": "On Fri, Aug 08, 2014 at 11:42:52AM +0200, Mike Hearn wrote:\n> >\n> > AFAIK the only protection is SSL + certificate validation on client side.\n> > However certificate revocation and updates in miners are pain in the ass,\n> > that's why majority of pools (mine including) don't want to play with\n> > that...\n> >\n> \n> Why would miners need updates? If they implement the standard SSL\n> infrastructure you can change certificates and keys without needing to\n> update miners.\n> \n> Besides, when it comes to financial services SSL is essential, I'm kind of\n> surprised it wasn't already used everywhere. I wouldn't use an online bank\n> that didn't support SSL, I would see it as a a sign of serious problems.\n> Heck I wouldn't even use webmail that didn't support SSL these days.\n\nBecause turning on SSL gives pool operators a way to hack your miners.\n\nhttp://www.symantec.com/connect/blogs/openssl-patches-critical-vulnerabilities-two-months-after-heartbleed\n\nJust because SSL is the answer for financial services regulated security\ntheatre, where fraud means you just roll-back the transaction, it does not\nmean it is actually a good cryptographic solution.\n\nThere are far better mechanisms that could be implemented using ECDSA \nkeys (aka bitcoin addresses) to authenticate both miners and pools, but\nthe problem is there zero economic incentive to do so. As long as the\nBGP/SSL/zero-day-of-the-week man-in-the middle fraud cost is lower than the\nengineering cost to do some real cryptography and code audits, we'll keep\nhaving new 'security patches' every couple of months."
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-08-09T19:31:39",
                "message_text_only": "On Thu, Aug 07, 2014 at 11:45:44PM +0000, Luke Dashjr wrote:\n> On Thursday, August 07, 2014 11:02:21 PM Pedro Worcel wrote:\n> > Hi there,\n> > \n> > I was wondering if you guys have come across this article:\n> > \n> > http://www.wired.com/2014/08/isp-bitcoin-theft/\n> > \n> > The TL;DR is that somebody is abusing the BGP protocol to be in a position\n> > where they can intercept the miner traffic. The concerning point is that\n> > they seem to be having some degree of success in their endeavour and\n> > earning profits from it.\n> > \n> > I do not understand the impact of this (I don't know much about BGP, the\n> > mining protocol nor anything else, really), but I thought it might be worth\n> > putting it up here.\n> \n> This is old news; both BFGMiner and Eloipool were hardened against it a long \n> time ago (although no Bitcoin pools have deployed it so far). I'm not aware of \n> any actual case of it being used against Bitcoin, though - the target has \n> always been scamcoins.\n\nThat statement right there is all the evidence I need to convince myself that\nBitcoin is under continuous and active BGP feed manipulation by organized\ncrime elements.\n\nJust the phrase of referring to !bitcoin as 'scamcoins' is a signal of an\norganized marketing/psychological operations effort to marginalize other \ncompetitors, and the documented altcoin BGP highjacks were most likely \ntesting of the system to confirm both\na) that it works\nb) how to hide it below the detection threshhold"
            }
        ],
        "thread_summary": {
            "title": "Miners MiTM",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Christopher Franko",
                "Jeff Garzik",
                "Laszlo Hanyecz",
                "Troy Benjegerdes",
                "slush",
                "Mike Hearn",
                "Sergio Lerner",
                "Pedro Worcel",
                "Luke Dashjr"
            ],
            "messages_count": 16,
            "total_messages_chars_count": 25386
        }
    },
    {
        "title": "[Bitcoin-development] NODE_EXT_SERVICES and advertising related services",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2014-08-08T03:38:44",
                "message_text_only": "Link: https://github.com/bitcoin/bitcoin/pull/4657\n\nIt is not necessary to build all functionality into bitcoind, to form\na decentralized network. BitPay's insight open source block explorer\nAPI project requires, and runs on top of, bitcoind. Therefore, at the\nsame IP address as bitcoind, other services are made available to the\npublic (scriptPubkey queries, other added-value queries). This results\nin a decentralized network of \"anyone running a full node and an\ninsight server\", as a subset of the whole P2P net.  One then does not\nneed to trust BitPay's insight server, but may query any number of\ninsight servers from multiple operators, and survey the results.\n\nObviously, we want to build this in a generic, vendor-neutral way.  As\nsuch, NODE_EXT_SERVICES is advertised via the \"addr\" P2P message.\nNodes that recognize the NODE_EXT_SERVICES bit may connect to that\nnode, query a services list via \"getextsrv\" P2P message, and then take\nfurther action based on the results.  The results are quite\nstraightforward:\n\nservice name, service port (or -1 if undefined), list of string\nkey/value attribs\n\nServices may only advertise added services if and only if the external\nservices are at the same IP address that is being advertised.\n\nThis is not a fully baked proposal by any means, but more of a trial\nballoon to get discussion moving.\n\nThere is no need to implement all services inside bitcoind...\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-08-08T09:45:19",
                "message_text_only": "Given that we're not running out of service bits and service bits mean you\ndon't have to try connecting to every node to find out what services it\nsupports, why not keep using the existing extension mechanism until we\nstart running out of bits?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/905c2eff/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-08-08T09:56:24",
                "message_text_only": "On Fri, Aug 8, 2014 at 11:45 AM, Mike Hearn <mike at plan99.net> wrote:\n> Given that we're not running out of service bits and service bits mean you\n> don't have to try connecting to every node to find out what services it\n> supports, why not keep using the existing extension mechanism until we start\n> running out of bits?\n\nHe wants to use it to advertise services that are not part of the P2P\nprotocol itself, but run on a different port. Reserving services bits\nfor those is not acceptable.\n\nAll the NODE_EXT_SERVICES bit does is advertise the P2P \"getextsrv\"\ncommand to get information, such as the port to connect on, for the\nauxilary service.\n\nWladimir"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-08-08T10:01:03",
                "message_text_only": ">\n> He wants to use it to advertise services that are not part of the P2P\n> protocol itself, but run on a different port. Reserving services bits\n> for those is not acceptable.\n>\n\nWhy not? Does the port matter much?\n\n\n> All the NODE_EXT_SERVICES bit does is advertise the P2P \"getextsrv\"\n> command to get information, such as the port to connect on, for the\n> auxilary service.\n\n\nYes, I understand what it does, but from a clients perspective what it\nmeans is if someone implements a useful service and exposes it this way you\nhave to seek out, connect to and interrogate every possible server even if\n(say) only a handful actually provide it. The most there's >1 \"ext service\"\nthe protocol becomes extremely slow, vs service bits where you can download\naddr packets and see which IPs are advertising which services.\n\nI don't see much reason to take a potentially large performance hit when\nthere's a service advertisement mechanism that already works. What's wrong\nwith the existing mechanism exactly?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/82a3c8bf/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-08-08T10:15:29",
                "message_text_only": "On Fri, Aug 8, 2014 at 12:01 PM, Mike Hearn <mike at plan99.net> wrote:\n>> He wants to use it to advertise services that are not part of the P2P\n>> protocol itself, but run on a different port. Reserving services bits\n>> for those is not acceptable.\n>\n>\n> Why not? Does the port matter much?\n\nYes. The services bits are for advertising services on the P2P\nnetwork. That's not open for discussion.\n\nWladimir"
            },
            {
                "author": "Wladimir",
                "date": "2014-08-08T10:26:25",
                "message_text_only": "On Fri, Aug 8, 2014 at 12:15 PM, Wladimir <laanwj at gmail.com> wrote:\n> On Fri, Aug 8, 2014 at 12:01 PM, Mike Hearn <mike at plan99.net> wrote:\n>>> He wants to use it to advertise services that are not part of the P2P\n>>> protocol itself, but run on a different port. Reserving services bits\n>>> for those is not acceptable.\n>>\n>>\n>> Why not? Does the port matter much?\n>\n> Yes. The services bits are for advertising services on the P2P\n> network. That's not open for discussion.\n\nIt also wouldn't work. A bit is not enough to find an external service\nexcept in the naive case where the advertised service would have a\nfixed port. Not even bitcoind has a fixed port. So there needs to be a\nmechanism to find how to connect to the 'external service'. This is\nprovided by the proposed extension.\n\nIt would in principle be possible to advertise an extra service bit\n*in addition to* this one, to make it easier to find through the addr\nmechanism. But it  would be confusing and IMO an abuse of P2P service\nbits.\n\nWladimir"
            },
            {
                "author": "Christian Decker",
                "date": "2014-08-08T10:41:38",
                "message_text_only": "I wonder whether we actually want to support this kind of advertisement in\nthe P2P protocol. We have a working mechanism for protocol extensions in\nthe P2P network (service flags) so this is obviously only for services that\nare not P2P extensions, so why have them in there at all?\n\nI'd argue that a parallel network, external to Bitcoin, could take over the\ntask of advertising external services.\n\nRegards,\nChris\n\n--\nChristian Decker\n\n\nOn Fri, Aug 8, 2014 at 11:26 AM, Wladimir <laanwj at gmail.com> wrote:\n\n> On Fri, Aug 8, 2014 at 12:15 PM, Wladimir <laanwj at gmail.com> wrote:\n> > On Fri, Aug 8, 2014 at 12:01 PM, Mike Hearn <mike at plan99.net> wrote:\n> >>> He wants to use it to advertise services that are not part of the P2P\n> >>> protocol itself, but run on a different port. Reserving services bits\n> >>> for those is not acceptable.\n> >>\n> >>\n> >> Why not? Does the port matter much?\n> >\n> > Yes. The services bits are for advertising services on the P2P\n> > network. That's not open for discussion.\n>\n> It also wouldn't work. A bit is not enough to find an external service\n> except in the naive case where the advertised service would have a\n> fixed port. Not even bitcoind has a fixed port. So there needs to be a\n> mechanism to find how to connect to the 'external service'. This is\n> provided by the proposed extension.\n>\n> It would in principle be possible to advertise an extra service bit\n> *in addition to* this one, to make it easier to find through the addr\n> mechanism. But it  would be confusing and IMO an abuse of P2P service\n> bits.\n>\n> Wladimir\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/b138f7ce/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-08T11:22:46",
                "message_text_only": "This is not a generic \"I run a website!\" advertisement feature.\nNODE_EXT_SERVICES is tightly focused on services that exist\nif-any-only-if a P2P bitcoin node (bitcoind) is reachable via the same\nadvertised address.\n\nYou may usefully create overlay networks of specialized services.\n\n\n\nOn Fri, Aug 8, 2014 at 6:41 AM, Christian Decker\n<decker.christian at gmail.com> wrote:\n> I wonder whether we actually want to support this kind of advertisement in\n> the P2P protocol. We have a working mechanism for protocol extensions in the\n> P2P network (service flags) so this is obviously only for services that are\n> not P2P extensions, so why have them in there at all?\n>\n> I'd argue that a parallel network, external to Bitcoin, could take over the\n> task of advertising external services.\n>\n> Regards,\n> Chris\n>\n> --\n> Christian Decker\n>\n>\n> On Fri, Aug 8, 2014 at 11:26 AM, Wladimir <laanwj at gmail.com> wrote:\n>>\n>> On Fri, Aug 8, 2014 at 12:15 PM, Wladimir <laanwj at gmail.com> wrote:\n>> > On Fri, Aug 8, 2014 at 12:01 PM, Mike Hearn <mike at plan99.net> wrote:\n>> >>> He wants to use it to advertise services that are not part of the P2P\n>> >>> protocol itself, but run on a different port. Reserving services bits\n>> >>> for those is not acceptable.\n>> >>\n>> >>\n>> >> Why not? Does the port matter much?\n>> >\n>> > Yes. The services bits are for advertising services on the P2P\n>> > network. That's not open for discussion.\n>>\n>> It also wouldn't work. A bit is not enough to find an external service\n>> except in the naive case where the advertised service would have a\n>> fixed port. Not even bitcoind has a fixed port. So there needs to be a\n>> mechanism to find how to connect to the 'external service'. This is\n>> provided by the proposed extension.\n>>\n>> It would in principle be possible to advertise an extra service bit\n>> *in addition to* this one, to make it easier to find through the addr\n>> mechanism. But it  would be confusing and IMO an abuse of P2P service\n>> bits.\n>>\n>> Wladimir\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Want fast and easy access to all the code in your enterprise? Index and\n>> search up to 200,000 lines of code with a free copy of Black Duck\n>> Code Sight - the same software that powers the world's largest code\n>> search on Ohloh, the Black Duck Open Hub! Try it now.\n>> http://p.sf.net/sfu/bds\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Want fast and easy access to all the code in your enterprise? Index and\n> search up to 200,000 lines of code with a free copy of Black Duck\n> Code Sight - the same software that powers the world's largest code\n> search on Ohloh, the Black Duck Open Hub! Try it now.\n> http://p.sf.net/sfu/bds\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-08T11:33:37",
                "message_text_only": "n Fri, Aug 8, 2014 at 6:01 AM, Mike Hearn <mike at plan99.net> wrote:\n> What's wrong\n> with the existing mechanism exactly?\n\nIt would be wrong to add NODE_INSIGHT, NODE_ELECTRUM_SERVER, etc. bits\neven though you do have useful bitcoin-related APIs that exist on the\nsame system as bitcoind.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-08-08T11:38:33",
                "message_text_only": "I'd like to see a mechanism whereby a Bitcoin node can delegate processing\nof unknown messages to an external process, so a P2P node can be composed\nout of separated programs, but such a service would be indistinguishable at\nthe network layer from one provided by Bitcoin Core itself, so a service\nbit would be appropriate for those.\n\nFor instance, Insight could then offer a command set that extends the p2p\nprotocol for doing block explorer type queries. There's no need for the\nprotocol to be Insight specific.  You'd just have NODE_INDEXED_CHAIN\ninstead.\n\nHaving the service run on some arbitrary other port isn't particularly\nuseful, IMO - the biggest win from having some separated protocol would be\nthe ability to use TLS, but if you're connecting to an IP address rather\nthan a domain name (like if you discovered via service bits/getextsrv) this\ndoesn't add much. It boils down to minor syntax differences in how numbers\nare laid out in a grid. And the performance issue remains.\n\nAdditionally, nothing in this spec requires that a local bitcoind be\nrunning. What stops someone from advertising just NODE_EXTENDED_SERVICES\nand nothing else? I don't think a generic service advertisement mechanism\nis a bad thing to have, by the way, just pointing out that nothing makes\nthis more focused than service bits already are.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/6e47949e/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-08-08T11:59:34",
                "message_text_only": "On Fri, Aug 8, 2014 at 1:38 PM, Mike Hearn <mike at plan99.net> wrote:\n> I'd like to see a mechanism whereby a Bitcoin node can delegate processing\n> of unknown messages to an external process, so a P2P node can be composed\n> out of separated programs, but such a service would be indistinguishable at\n> the network layer from one provided by Bitcoin Core itself, so a service bit\n> would be appropriate for those.\n\nThis diverges from the topic but seems like a good idea to me in\ngeneral, not so much as replacement for jgarzik's proposal.\n\nSomething like `getutxos` or this proposal could be implemented as an\nexternal application or script, instead of having to integrate\neverything into bitcoind.\n\nBitcoind would need a local interprocess message bus for that, and\nwould need to act as router for messages from/to the P2P network.\nZeroMQ seems like a good choice for that. That's not completely crazy\nas there are already plans to add zeromq as an optional dependency for\nnotifications [1].\n\n[1] https://github.com/bitcoin/bitcoin/pull/4594\n\nWladimir"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-08T12:06:16",
                "message_text_only": "On Fri, Aug 8, 2014 at 7:59 AM, Wladimir <laanwj at gmail.com> wrote:\n> On Fri, Aug 8, 2014 at 1:38 PM, Mike Hearn <mike at plan99.net> wrote:\n>> I'd like to see a mechanism whereby a Bitcoin node can delegate processing\n>> of unknown messages to an external process, so a P2P node can be composed\n>> out of separated programs, but such a service would be indistinguishable at\n>> the network layer from one provided by Bitcoin Core itself, so a service bit\n>> would be appropriate for those.\n>\n> This diverges from the topic but seems like a good idea to me in\n> general, not so much as replacement for jgarzik's proposal.\n>\n> Something like `getutxos` or this proposal could be implemented as an\n> external application or script, instead of having to integrate\n> everything into bitcoind.\n\nSeconded.  Command plug-ins and such seem like an idea worth exploring.\n\nWe don't need to shove everything into bitcoind.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-08T12:11:08",
                "message_text_only": "On Fri, Aug 8, 2014 at 7:59 AM, Wladimir <laanwj at gmail.com> wrote:\n> Bitcoind would need a local interprocess message bus for that, and\n> would need to act as router for messages from/to the P2P network.\n> ZeroMQ seems like a good choice for that. That's not completely crazy\n> as there are already plans to add zeromq as an optional dependency for\n> notifications [1].\n\nGenerally agreed, though for ZMQ it is a bit different than a P2P service.\n\nIMO, ZMQ really wants to be a plug-in that registers some internal\nsignals.  It wants to capture the precise points where a block was\naccepted internally.  PR #4599 tries to lead by example:\nhttps://github.com/bitcoin/bitcoin/pull/4599\n\nA P2P service would be a slightly different sort of plug-in.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Wladimir",
                "date": "2014-08-08T12:15:09",
                "message_text_only": "> Generally agreed, though for ZMQ it is a bit different than a P2P service.\n>\n> IMO, ZMQ really wants to be a plug-in that registers some internal\n> signals.  It wants to capture the precise points where a block was\n> accepted internally.  PR #4599 tries to lead by example:\n> https://github.com/bitcoin/bitcoin/pull/4599\n>\n> A P2P service would be a slightly different sort of plug-in.\n\nZeroMQ is just a lightweight message routing system. It could just as\nwell make P2P messages available to other applications (if they\nsubscribe to them). The other way around, routing messages from ZeroMQ\nto certain P2P clients, is easy.\n\nWladimir"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-08-08T12:11:25",
                "message_text_only": ">\n> Something like `getutxos` or this proposal could be implemented as an\n> external application or script, instead of having to integrate\n> everything into bitcoind.\n>\n\nRight, although getutxos needs access to the UTXO set which bitcoind\nalready has. An external plugin would have to recalculate it from scratch\nwhich seems redundant.\n\nHowever there are many other useful services that could be added in such a\nway, like -txindex or the nLockTime storage facility we talked about the\nother day.\n\n\n> Bitcoind would need a local interprocess message bus for that\n\n\nMaybe, that feels like it could be overkill though. Probably just something\nlike\n\n./bitcoind -servicecookie=<long random string> -allowextservices=127.0.0.1/8\n\nand then any program can connect to bitcoind as normal, send \"registersrv\"\nwith the cookie and a list of command ids it's interested in, maybe a\nservice bit to set, and start receiving those messages wrapped in a new\nstructure that gives some kind of client ID (like IP address). So any\nlibrary that can do the basic P2P protocol could then be extended with not\nmuch code to get a multiplexed stream of messages from different clients.\n\nAn additional standalone program can then bridge this mechanism to running\na shell command for particular messages, though given the history of shell\nbased exploits I'd feel safer with something that doesn't do that ....\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/bb208097/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-08T12:15:19",
                "message_text_only": "getutxos is a special case, since we already maintain that index as\npart of normal operation.\n\nWhile I dislike some aspects of getutxos (covered elsewhere), if\nmerged, it would be more appropriate as a special case to keep\ngetutxos fully internal to bitcoind for implementation reasons.\n\nOn Fri, Aug 8, 2014 at 8:11 AM, Mike Hearn <mike at plan99.net> wrote:\n>> Something like `getutxos` or this proposal could be implemented as an\n>> external application or script, instead of having to integrate\n>> everything into bitcoind.\n>\n>\n> Right, although getutxos needs access to the UTXO set which bitcoind already\n> has. An external plugin would have to recalculate it from scratch which\n> seems redundant.\n>\n> However there are many other useful services that could be added in such a\n> way, like -txindex or the nLockTime storage facility we talked about the\n> other day.\n>\n>>\n>> Bitcoind would need a local interprocess message bus for that\n>\n>\n> Maybe, that feels like it could be overkill though. Probably just something\n> like\n>\n> ./bitcoind -servicecookie=<long random string> -allowextservices=127.0.0.1/8\n>\n> and then any program can connect to bitcoind as normal, send \"registersrv\"\n> with the cookie and a list of command ids it's interested in, maybe a\n> service bit to set, and start receiving those messages wrapped in a new\n> structure that gives some kind of client ID (like IP address). So any\n> library that can do the basic P2P protocol could then be extended with not\n> much code to get a multiplexed stream of messages from different clients.\n>\n> An additional standalone program can then bridge this mechanism to running a\n> shell command for particular messages, though given the history of shell\n> based exploits I'd feel safer with something that doesn't do that ....\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Wladimir",
                "date": "2014-08-08T12:16:54",
                "message_text_only": "On Fri, Aug 8, 2014 at 2:11 PM, Mike Hearn <mike at plan99.net> wrote:\n>> Something like `getutxos` or this proposal could be implemented as an\n>> external application or script, instead of having to integrate\n>> everything into bitcoind.\n>\n>\n> Right, although getutxos needs access to the UTXO set which bitcoind already\n> has. An external plugin would have to recalculate it from scratch which\n> seems redundant.\n\nWell to play the devil's advocate, you could set it up to query the\ninformation back over RPC :-)\n\nBut yeah, I didn't mean getutxos specifically, it has a trivial\nimplementation anyway.\n\nWladimir"
            },
            {
                "author": "Wladimir",
                "date": "2014-08-08T12:34:32",
                "message_text_only": "On Fri, Aug 8, 2014 at 2:11 PM, Mike Hearn <mike at plan99.net> wrote:\n> Maybe, that feels like it could be overkill though. Probably just something\n> like\n>\n> ./bitcoind -servicecookie=<long random string> -allowextservices=127.0.0.1/8\n\nI don't like conflating the external and internal interface. The\ninterface to the outside and the interface to the inside should be\nwell-separated.\n\nI'd be OK with such an idea if bitcoind listens on a separate port for\nconnections from plugins, a port that cannot be used for normal P2P\ntraffic. This could also be a UNIX socket instead of a TCP port.\n\nWladimir"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-08-08T13:55:42",
                "message_text_only": ">\n> I'd be OK with such an idea if bitcoind listens on a separate port for\n> connections from plugins, a port that cannot be used for normal P2P\n> traffic. This could also be a UNIX socket instead of a TCP port.\n\n\nYes, can be done this way too. I was thinking about setups where you have\nservices distributed across multiple machines. However a separate port does\nindeed allow iptables or the like to be used.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/1147baf4/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-08T12:04:16",
                "message_text_only": "Yes, that is the one change I am still pondering:  adding categories\n(classes), rather than one single bit.\n\nThus the modified proposal would become:\n- eliminate NODE_EXT_SERVICES\n- for a class of services, such as insight w/ added blockchain indexes\n& queries, add NODE_EXT_INDEXED_CHAIN\n- for another class of services, add NODE_EXT_xxxx\n- Re-use the same P2P message and structure (CExtService,\n\"extservices\" P2P message) for all NODE_EXT_xxx classes.\n\nThis preserves vendor/API neutrality, while saving effort on the part\nof clients seeking these services.  The point about service discovery\nnecessitating some node walking is valid, which makes categories\nsomewhat attractive.\n\n\"Having the service run on some arbitrary other port isn't\nparticularly useful, IMO\" --  A statement disproved by reality.\nMulti-port is the method most commonly found in the field today.\nLogically so, because it is the easiest to deploy:\n\n* The most likely setup TODAY is multi-daemon: bitcoind + your own software\n* The most likely configuration for multi-daemon is self-evidently\nmulti-port (versus two services appearing on the same port)\n\nIt is quite useful, and indeed, the most likely setup to be found in operation.\n\n\n\n\n\n\n\nOn Fri, Aug 8, 2014 at 7:38 AM, Mike Hearn <mike at plan99.net> wrote:\n> I'd like to see a mechanism whereby a Bitcoin node can delegate processing\n> of unknown messages to an external process, so a P2P node can be composed\n> out of separated programs, but such a service would be indistinguishable at\n> the network layer from one provided by Bitcoin Core itself, so a service bit\n> would be appropriate for those.\n>\n> For instance, Insight could then offer a command set that extends the p2p\n> protocol for doing block explorer type queries. There's no need for the\n> protocol to be Insight specific.  You'd just have NODE_INDEXED_CHAIN\n> instead.\n>\n> Having the service run on some arbitrary other port isn't particularly\n> useful, IMO - the biggest win from having some separated protocol would be\n> the ability to use TLS, but if you're connecting to an IP address rather\n> than a domain name (like if you discovered via service bits/getextsrv) this\n> doesn't add much. It boils down to minor syntax differences in how numbers\n> are laid out in a grid. And the performance issue remains.\n>\n> Additionally, nothing in this spec requires that a local bitcoind be\n> running. What stops someone from advertising just NODE_EXTENDED_SERVICES and\n> nothing else? I don't think a generic service advertisement mechanism is a\n> bad thing to have, by the way, just pointing out that nothing makes this\n> more focused than service bits already are.\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-08-08T12:13:45",
                "message_text_only": ">\n> Yes, that is the one change I am still pondering:  adding categories\n> (classes), rather than one single bit.\n>\n\nSure, that makes more sense I think.\n\nAs a motivating use case, Bitcoin Wallet for Android currently has a\nhard-coded block explorer (biteasy.com) which it uses to find UTXOs for a\ngiven key. This is used for its \"Sweep paper wallet\" feature. It must work\nthis way because P2P nodes don't calculate such indexes.\n\nIf there was a way to do block index autodiscovery, that'd help us remove\nthis hard-coded block explorer and increase decentralisation. But because\nit's a GUI app we don't want users to look at a spinner for more than a few\nseconds, so a slow discovery process would make it unworkable. With\nAPI-based categories of service bits we could implement such a scheme.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140808/8a4a778c/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "NODE_EXT_SERVICES and advertising related services",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Mike Hearn",
                "Wladimir",
                "Christian Decker"
            ],
            "messages_count": 21,
            "total_messages_chars_count": 25284
        }
    },
    {
        "title": "[Bitcoin-development] BIP32 - invalidation",
        "thread_messages": [
            {
                "author": "Pavol Rusnak",
                "date": "2014-08-08T13:19:38",
                "message_text_only": "Hi all!\n\nI would like to discuss invalidation of nodes in BIP32. Currently the\ndocument says:\n\na) Public CKD\n\nIn case I_L >= n or ki = 0, the resulting key is invalid, and one should\nproceed with the next value for i.\n\nb) Private CKD\n\nIn case I_L >= n or Ki is the point at infinity, the resulting key is\ninvalid, and one should proceed with the next value for i.\n\nc) Master Key Generation\n\nIn case IL is 0 or I_L >= n, the master key is invalid.\n\n(All these cases have probability lower than 1 in 2^127.)\n\nWhat do you think about the following change for all 3 cases:\n\nIn case I_L >= n assign I_L := I_L mod n.\n\nRationale:\n\nIt's easy to say \"mark as invalid and proceed with next\", but actually\nmost of the implementations don't do the checking at all, because tjen\nit's rather hard at application level to implement skipping logic. OTOH\nit's quite straightforward to perform modulo if needed, so we probably\nsee more implementations doing the checking.\n\nWe would still need to deal with cases when I_L = 0 or ki = 0 or ki =\ninf, but these have probability around 1 in 2^255.\n\nDoes anyone see any concerns when it comes to security of the proposed\nchange?\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "second isogeny",
                "date": "2014-08-10T00:34:19",
                "message_text_only": "> Does anyone see any concerns when it comes to security of the proposed\n> change?\n\nYes.  This proposal is less secure.\n\nIt is incompatible in theory with existing implementations of the\nspecification.  The incompatibility is also a potentially a security\nproblem because it may cause users to believe a key is worthless when\nit is not or to lose funds when they are unable to spend them.\n\nIt is also an untimely proposal and would be inconsiderate other parties\nwho have done the work to produce correct and compatible implementations.\n\n> In case I_L >= n assign I_L := I_L mod n.\n\nThis will make the selection of private keys uneven.\n\nThe unevenness is small and it is unlikely to very matter much but it\nis objectively less secure.  Future advances in cryptography may make\nthe distinction more important.  The change would eliminate any hope of\nthe specification ever having provable security equal to random keys.\n\nThe bignum modulo operation also requires complex additional logic and is\njust as likely to remain untested in implementations, though unit-testing\ncan test these cases by replacing the hash function.\n\nBecause of layering no suitable modulo may be available and an incorrect\nimplementation could create a devastating weakness, like reflecting a\nlarge class of keys to a small number of values.  A similar error would\nbe unlikely for an incorrect implementation of skipping and someone who\nmanaged to still fail would likely have failed either way.\n\n> most of the implementations don't do the checking at all, because tjen\n> it's rather hard at application level to implement skipping logic. OTOH\n\nThere are many corner cases which must be handled in cryptographic\nsoftware.\n\nYou must handle the point at infinity cases, you must handle the signature\nhaving a value of zero (or you leak the private key), in the point\narithemetics you must handle the special case of adding colinear points.\n\nIf someone is unprepared to deal with these and many other complications\nthey may want to leave writing this kind of software for other people.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140809/8da85020/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2014-08-10T01:20:09",
                "message_text_only": "Does bitcoin properly handle the case of a hash collision? no - because it is considered too unlikely. The case of I_L >= n is also astronomically unlikely, so it's more a matter of improved performance and simpler data structures under expected circumstances and taking that less than 1 in 2^127 chance that it will fail, in which case we can recover by moving everything over to a new tree.\n\n-Eric Lombrozo\n\n\n\nOn Aug 9, 2014, at 5:34 PM, second isogeny <secondisogeny at gmail.com> wrote:\n\n> > Does anyone see any concerns when it comes to security of the proposed\n> > change?\n> \n> Yes.  This proposal is less secure.\n> \n> It is incompatible in theory with existing implementations of the\n> specification.  The incompatibility is also a potentially a security\n> problem because it may cause users to believe a key is worthless when\n> it is not or to lose funds when they are unable to spend them.\n> \n> It is also an untimely proposal and would be inconsiderate other parties\n> who have done the work to produce correct and compatible implementations.\n> \n> > In case I_L >= n assign I_L := I_L mod n.\n> \n> This will make the selection of private keys uneven.\n> \n> The unevenness is small and it is unlikely to very matter much but it\n> is objectively less secure.  Future advances in cryptography may make\n> the distinction more important.  The change would eliminate any hope of\n> the specification ever having provable security equal to random keys.\n> \n> The bignum modulo operation also requires complex additional logic and is\n> just as likely to remain untested in implementations, though unit-testing\n> can test these cases by replacing the hash function.\n> \n> Because of layering no suitable modulo may be available and an incorrect\n> implementation could create a devastating weakness, like reflecting a\n> large class of keys to a small number of values.  A similar error would\n> be unlikely for an incorrect implementation of skipping and someone who\n> managed to still fail would likely have failed either way.\n> \n> > most of the implementations don't do the checking at all, because tjen\n> > it's rather hard at application level to implement skipping logic. OTOH\n> \n> There are many corner cases which must be handled in cryptographic\n> software.\n> \n> You must handle the point at infinity cases, you must handle the signature\n> having a value of zero (or you leak the private key), in the point\n> arithemetics you must handle the special case of adding colinear points.\n> \n> If someone is unprepared to deal with these and many other complications\n> they may want to leave writing this kind of software for other people.\n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140809/1bb514b2/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "BIP32 - invalidation",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Eric Lombrozo",
                "Pavol Rusnak",
                "second isogeny"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 6677
        }
    },
    {
        "title": "[Bitcoin-development] Synchronization: 19.5 % orphaned blocks at height 197'324",
        "thread_messages": [
            {
                "author": "mbde at bitwatch.co",
                "date": "2014-08-10T13:42:41",
                "message_text_only": "Hello all,\n\nI'm currently synchronizing a new node and right now, at a progress of a\nheight of 197'324 blocks, I count in my debug.log an aweful amount of\n38'447 orphaned blocks which is about 19.5 %.\n\nIt has been I while since I watched the synchronization process closely,\nbut this number seems pretty high to me.\n\nI'm wondering about the following: would it be possible for a malicious\nparty to generate chains of blocks with low difficulity which are not\npart of the main chain to slow down the sync process?\n\n\nBuild and version information:\nhttps://github.com/jmcorgan/bitcoin/tree/026686c7de76dfde6fcacfc3d667fb3418a946a7\n(sipa/jmcorgan address index)\nRebased with:\nhttps://github.com/bitcoin/bitcoin/tree/94e1b9e05b96e4fe639e5b07b7a53ea216170962\n(almost up-to-date mainline)\n\nCompressed debug.log attached:\nhttps://www.dropbox.com/s/uvtd91xiwmdmun7/debug.7z?m=\n(filesize: 7.67 MB, uncompressed: 41.3 MB)"
            },
            {
                "author": "Bob McElrath",
                "date": "2014-08-10T14:07:19",
                "message_text_only": "I had the same problem (repeatedly) which came down a hardware problem.  Bitcoin\nmore than other applications is very sensitive to single bit flips in memory or\nduring computation.  (In the end I under-clocked my CPU and RAM to fix the\nproblem)\n\nAttached is a small python script which will run sha256 on random data\nrepeatedly and will print a message if a mismatch is found.  For me it took many\nhours of running before a sha256 mismatch, but one is enough to fork the\nblockchain.\n\nmbde at bitwatch.co [mbde at bitwatch.co] wrote:\n> Hello all,\n> \n> I'm currently synchronizing a new node and right now, at a progress of a\n> height of 197'324 blocks, I count in my debug.log an aweful amount of\n> 38'447 orphaned blocks which is about 19.5 %.\n> \n> It has been I while since I watched the synchronization process closely,\n> but this number seems pretty high to me.\n> \n> I'm wondering about the following: would it be possible for a malicious\n> party to generate chains of blocks with low difficulity which are not\n> part of the main chain to slow down the sync process?\n> \n> \n> Build and version information:\n> https://github.com/jmcorgan/bitcoin/tree/026686c7de76dfde6fcacfc3d667fb3418a946a7\n> (sipa/jmcorgan address index)\n> Rebased with:\n> https://github.com/bitcoin/bitcoin/tree/94e1b9e05b96e4fe639e5b07b7a53ea216170962\n> (almost up-to-date mainline)\n> \n> Compressed debug.log attached:\n> https://www.dropbox.com/s/uvtd91xiwmdmun7/debug.7z?m=\n> (filesize: 7.67 MB, uncompressed: 41.3 MB)\n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n--\nCheers, Bob McElrath\n\n\"The individual has always had to struggle to keep from being overwhelmed by\nthe tribe.  If you try it, you will be lonely often, and sometimes frightened.\nBut no price is too high to pay for the privilege of owning yourself.\" \n    -- Friedrich Nietzsche\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: sha256check.py\nType: text/x-python\nSize: 767 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140810/0bbd1777/attachment.py>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140810/0bbd1777/attachment.sig>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-08-10T18:07:54",
                "message_text_only": "On Sun, Aug 10, 2014 at 4:07 PM, Bob McElrath <bob_bitcoin at mcelrath.org> wrote:\n> I had the same problem (repeatedly) which came down a hardware problem.\n\nThis is actually an independent problem (though something to be aware\nof). Flaky hardware can make synchronization fail completely - as it\nrelies on being able to exactly assess the validity of everything in\nthe blockchain.\n\nStilll...\n\n> mbde at bitwatch.co [mbde at bitwatch.co] wrote:\n>> Hello all,\n>>\n>> I'm currently synchronizing a new node and right now, at a progress of a\n>> height of 197'324 blocks, I count in my debug.log an aweful amount of\n>> 38'447 orphaned blocks which is about 19.5 %.\n>>\n>> It has been I while since I watched the synchronization process closely,\n>> but this number seems pretty high to me.\n\nOrphan blocks during synchronization are unfortunately very common,\nand the result of a mostly broken download logic in the client. They\nare blocks that are further ahead in the chain than the point where\nyou're currently synchronized to, and thus can't be validated yet.\nNote that 'orphan' here means 'we do not know the parent'; it doesn't\njust mean 'not in the main chain'. They are blocks that are received\nout of order.\n\nAs Jeff mentions, headers-first synchronization fixes this problem\n(and many other download-logic related things), by first verifying the\nheaders in the chain (thus already having partially validated\neverything), and then downloading the blocks (in not necessarily the\nright order) anymore, from multiple peers in parallel. There is\ncurrently a pull request for it, but it's not production ready\n(#4468).\n\n>> I'm wondering about the following: would it be possible for a malicious\n>> party to generate chains of blocks with low difficulity which are not\n>> part of the main chain to slow down the sync process?\n\nYes and no. While you're still synchronization, and don't actually\nknow the best chain, a peer could send you stale branches (with valid\nproof of work), which you would accept, store and process. But it has\nto be done very early, as once you learn of a good-enough chain, a\nbranch with more proof of work would be requires due to some\nheuristics designed to exactly prevent such an attack.\n\n-- \nPieter"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-10T14:20:54",
                "message_text_only": "This issue is being worked on, under the category of \"headers first\nsynchronization.\"\n\nUntil that is finished, it is recommended that you download\nbootstrap.dat via torrent:\nhttps://bitcointalk.org/index.php?topic=145386.0\n\n\nOn Sun, Aug 10, 2014 at 9:42 AM, mbde at bitwatch.co <mbde at bitwatch.co> wrote:\n> Hello all,\n>\n> I'm currently synchronizing a new node and right now, at a progress of a\n> height of 197'324 blocks, I count in my debug.log an aweful amount of\n> 38'447 orphaned blocks which is about 19.5 %.\n>\n> It has been I while since I watched the synchronization process closely,\n> but this number seems pretty high to me.\n>\n> I'm wondering about the following: would it be possible for a malicious\n> party to generate chains of blocks with low difficulity which are not\n> part of the main chain to slow down the sync process?\n>\n>\n> Build and version information:\n> https://github.com/jmcorgan/bitcoin/tree/026686c7de76dfde6fcacfc3d667fb3418a946a7\n> (sipa/jmcorgan address index)\n> Rebased with:\n> https://github.com/bitcoin/bitcoin/tree/94e1b9e05b96e4fe639e5b07b7a53ea216170962\n> (almost up-to-date mainline)\n>\n> Compressed debug.log attached:\n> https://www.dropbox.com/s/uvtd91xiwmdmun7/debug.7z?m=\n> (filesize: 7.67 MB, uncompressed: 41.3 MB)\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            }
        ],
        "thread_summary": {
            "title": "Synchronization: 19.5 % orphaned blocks at height 197'324",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Bob McElrath",
                "Pieter Wuille",
                "mbde at bitwatch.co"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 7373
        }
    },
    {
        "title": "[Bitcoin-development] Improvement to the Test Framework in the processing of test blocks",
        "thread_messages": [
            {
                "author": "Sergio Lerner",
                "date": "2014-08-12T20:07:25",
                "message_text_only": "We've coded and tested changes to the Bitcoin testing framework to allow\nthe creation and processing of blocks in unit test cases in order to\ntest ProcessBlock(), CheckBlock(), ActivateBestChain(),\nActivateBestChainStep() and ConnectTip(), including block-chain\nreorganizations, majority rules, block version changes and more.\nSeveral new test cases were added to enrich the test suite.\n\nPlease review and comment the pull request:\n\nhttps://github.com/bitcoin/bitcoin/pull/4688\n\nBest regards,\n Sergio Demian Lerner & Timo Hanke"
            }
        ],
        "thread_summary": {
            "title": "Improvement to the Test Framework in the processing of test blocks",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Sergio Lerner"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 527
        }
    },
    {
        "title": "[Bitcoin-development] What is the danger if bitcoind startted with -flushwallet=false ?",
        "thread_messages": [
            {
                "author": "KingK.Pan",
                "date": "2014-08-13T16:27:16",
                "message_text_only": "Hi everybody,\n\n    I tried to reduce the IO of bitcoind, and I found '-flushwallet=false'.\nAfter trying it, my IO reduced greatly.\n    But why 'flushwallet' is true by default? Is there any danger if\nclosing the flush wallet thread?\n    I lost all my coins in testnet after one crash with\n'-flushwallet=false', was this because of no flush wallet thread?\n\n\n\n\n  --\n  Qing Qing Pan\n  okcoin.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140814/87d24c91/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-08-13T20:29:28",
                "message_text_only": "On Wed, Aug 13, 2014 at 6:22 PM, \u6f58\u5e86\u5e86 <qingqing.pan at okcoin.com> wrote:\n> Hi everybody,\n>\n>     I tried to reduce the IO of bitcoind, and I found '-flushwallet=false'. After trying it, my IO reduced greatly.\n>     But why 'flushwallet' is true by default? Is there any danger if closing the flush wallet thread?\n>     I lost all my coins in testnet after one crash with '-flushwallet=false', was this because of no flush wallet thread?\n\nWhen flushwallet is disabled, the wallet is not flushed (written to\ndisk in a self-contained state) periodically. This means that there's\na larger chance that the wallet database is in inconsistent state when\nthe process stops unexpectedly. This can happen either due to a crash,\nor an external cause such as the power turning off unexpectedly.\n\nWith the wallet in non-self-contained state, the next time that you\nstart bitcoind BerkeleyDB will have to process log files. There is a\nnon-zero chance that this will fail and manual recovery is needed.\n\nAs the wallet is usually critical, it is unwise to disable that option.\n\nWladimir"
            }
        ],
        "thread_summary": {
            "title": "What is the danger if bitcoind startted with -flushwallet=false ?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir",
                "KingK.Pan"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1645
        }
    },
    {
        "title": "[Bitcoin-development] Another weird transaction question...",
        "thread_messages": [
            {
                "author": "Richard Moore",
                "date": "2014-08-13T18:00:22",
                "message_text_only": "Hey all,\n\nSorry to keep bugging you all, as I slowly verify the blockchain one transaction after another with my own implementation, but I have found another transaction that is obviously correct (as it is verified by the legit client) that has me seeking clarification.\n\nThis multisig output script:\n\nhttps://blockchain.info/tx-index/12809044/0  (txid: 274f8be3b7b9b1a220285f5f71f61e2691dd04df9d69bb02a8b3b85f91fb1857)\n\ncontains a public key:\n\n00f2b7816db49d55d24df7bdffdbc1e203b424e8cd39f5651ab938e5e4a193569e\n\nAre invalid public keys permitted and silently ignored? Or does the 0x00 prefix have some interesting meaning?\n\nThanks again,\n\nRicMoo\n\n\n.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8><(((\u00ba>\n\nRichard Moore ~ Founder\nGenetic Mistakes Software inc.\nphone: (778) 882-6125\nemail: ricmoo at geneticmistakes.com\nwww: http://GeneticMistakes.com\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140813/817f6fb3/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-08-13T18:10:32",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 13 August 2014 11:00:22 GMT-07:00, Richard Moore <me at ricmoo.com> wrote:\n>Hey all,\n>\n>Sorry to keep bugging you all, as I slowly verify the blockchain one\n>transaction after another with my own implementation, but I have found\n>another transaction that is obviously correct (as it is verified by the\n>legit client) that has me seeking clarification.\n>\n>This multisig output script:\n>\n>https://blockchain.info/tx-index/12809044/0  (txid:\n>274f8be3b7b9b1a220285f5f71f61e2691dd04df9d69bb02a8b3b85f91fb1857)\n>\n>contains a public key:\n>\n>00f2b7816db49d55d24df7bdffdbc1e203b424e8cd39f5651ab938e5e4a193569e\n>\n>Are invalid public keys permitted and silently ignored? Or does the\n>0x00 prefix have some interesting meaning?\n\nHave you looked at the Bitcoin Core script test cases yet? You might be surprised at what is allowed. Equally, read the source code! In particular follow the block acceptance logic line by line from start to finish.\n\nIn any case, the Bitcoin protocol doesn't care whether or not a public key is valid.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJT66oXMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhcgKCACT18WjN11SCuX5qyeq\nD5zOtGBsAtPMWr8CJuds4gLIkRtxDxPy9cuIMzwLylaC0yvFSIrG6rAIcqqRpkEH\nhcJj2IXyTRVr/mxg3qDzphYuwWQAgUzBgbhPsHtl8SvnbzJgEdXCsErGs3eW6JTR\nI5OXeMVT8ZKQVJUKCNGdzlH4673Gh6fIzwW1cPLATt486ByCk5YRXC14IGasxnlg\n6IWm4r/I6gOAB7FiPCHm60Q2DJOsX+VEFe3U28Zxlx06i0Ij9JYoKbTDu8e12bSB\nYFUBwGCbwWr/Xcygg0nWyrEMVk5dcxk/30asF/dEczHRZo9DNUdKt4IAESd+GGC2\nP9g4\n=e0do\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Another weird transaction question...",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Richard Moore",
                "Peter Todd"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2649
        }
    },
    {
        "title": "[Bitcoin-development] Presenting a BIP for Shamir's Secret Sharing of Bitcoin private keys",
        "thread_messages": [
            {
                "author": "Nikita Schmidt",
                "date": "2014-08-14T19:23:16",
                "message_text_only": "On 12 May 2014 15:09, Jan M\u00f8ller <jan.moller at gmail.com> wrote:\n>\n> I think having 3 encoding formats (long/short/compact) is over engineered,\n> and basically only makes implementing the standard a pain in the rear. From\n> a user experience point of view only the long format makes sense, and it is\n> only a few bytes longer than the short version.\n>\n\nTrue.  Since nobody has objected, the draft has been reworked and is\nmuch leaner now:\nhttps://github.com/cetuscetus/btctool/blob/bip/bip-xxxx.mediawiki .\nThe reasons for not making M and checksum fields optional are added to\nthe Rationale section.\n\nThe main difference is that the shared secret can be in encoded form,\ne.g. SIPA or BIP38 instead of a plain private key.  This makes SSS a\ngeneral purpose container for any kind of secret data.  The benefits\nare:\n- no need to change the spec to carry another type of content;\n- testnet and altcoins do not need any treatment in this spec;\n- content-specific metadata, such as compressed/uncompressed,\nencrypted/non-encrypted, key inception time point etc., are encoded\ntogether with the secret, rather than provided for separately and\nindividually in this spec.\n\nAs we are now dealing with secrets of arbitrary length, GF(256) as the\nunderlying field becomes much more advantageous than GF(large prime).\n\nAn inconvenience of variable length is that we have no control of the\nBase58 prefix.  This was solved by moving the magic prefix outside of\nthe Base58 encoded content: SSS-abcdefgh.  'SSS-' acts as the\napplication identifier both to humans and machines, and abcdefgh is\nthe Base58 encoding of the share without any application/magic bytes.\n(This may seem mildly controversial, but is there a better way?)"
            }
        ],
        "thread_summary": {
            "title": "Presenting a BIP for Shamir's Secret Sharing of Bitcoin private keys",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Nikita Schmidt"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1712
        }
    },
    {
        "title": "[Bitcoin-development] Outbound connections rotation",
        "thread_messages": [
            {
                "author": "Ivan Pustogarov",
                "date": "2014-08-18T16:46:11",
                "message_text_only": "Hi there,\n\nI'd like to start a discussion on periodic rotation of outbound connections.\nE.g. every 2-10 minutes an outbound connections is dropped and replaced\nby a new one.\n\nMotivation:\nEach bitcoin non-UPnP client behind NAT has 8 outbound connections\nwhich change only rarely (due to occasional remote side disconnections).\nA subset of these 8 entry nodes uniquely identifies a user.\nAn attacker can listen for transactions in Bitcoin network and for each\ntransaction record the first 8 peers which forwarded the transaction.\nIf two distinct transactions (with unrelated bitcoin addresses)\ncome from the same set of 8 peers, the attacker can conclude that they\noriginated from the same user. This gives another method (in addition\nto transaction graph analysis) for an attacker to link different BC\naddresses of the same user.\nAlso note that by default bitcoin clients advertise their public IP\naddresses. The attacker can link the advertised IP's to corresponding\n8 entry nodes and use it to deanonymise Bitcoin clients.\n\nIf a bitcoin client periodically rotates his set of outbound\nconnections, his 8-peers fingerprint is blurred over time.\n\nCorresponding pull request is #4723.\n\nSome details are here: https://www.cryptolux.org/index.php/Bitcoin\n\n-- \nIvan"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-18T17:19:15",
                "message_text_only": "Simply by observing timing from sufficiently geo-graphically and\nnetwork-ly dispersed nodes, you may deduce the original broadcaster of\na transaction.  Rotating peers doesn't help.\n\nThat said, periodic rotation can be helpful.  Every 2-10 minutes is excessive.\n\n\nOn Mon, Aug 18, 2014 at 12:46 PM, Ivan Pustogarov\n<ivan.pustogarov at uni.lu> wrote:\n> Hi there,\n>\n> I'd like to start a discussion on periodic rotation of outbound connections.\n> E.g. every 2-10 minutes an outbound connections is dropped and replaced\n> by a new one.\n>\n> Motivation:\n> Each bitcoin non-UPnP client behind NAT has 8 outbound connections\n> which change only rarely (due to occasional remote side disconnections).\n> A subset of these 8 entry nodes uniquely identifies a user.\n> An attacker can listen for transactions in Bitcoin network and for each\n> transaction record the first 8 peers which forwarded the transaction.\n> If two distinct transactions (with unrelated bitcoin addresses)\n> come from the same set of 8 peers, the attacker can conclude that they\n> originated from the same user. This gives another method (in addition\n> to transaction graph analysis) for an attacker to link different BC\n> addresses of the same user.\n> Also note that by default bitcoin clients advertise their public IP\n> addresses. The attacker can link the advertised IP's to corresponding\n> 8 entry nodes and use it to deanonymise Bitcoin clients.\n>\n> If a bitcoin client periodically rotates his set of outbound\n> connections, his 8-peers fingerprint is blurred over time.\n>\n> Corresponding pull request is #4723.\n>\n> Some details are here: https://www.cryptolux.org/index.php/Bitcoin\n>\n> --\n> Ivan\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-08-18T17:21:07",
                "message_text_only": "On Mon, Aug 18, 2014 at 9:46 AM, Ivan Pustogarov <ivan.pustogarov at uni.lu> wrote:\n> Hi there,\n> I'd like to start a discussion on periodic rotation of outbound connections.\n> E.g. every 2-10 minutes an outbound connections is dropped and replaced\n> by a new one.\n\nConnection rotation would be fine for improving a node's knoweldge\nabout available peers and making the network stronger against\npartitioning.\n\nI haven't implemented this because I think your motivation is\n_precisely_ opposite the behavior. If you keep a constant set of\noutbound peers only those peers learn the origin of your transactions,\nand so it is unlikely that any particular attacker will gain strong\nevidence. If you rotate where you send out your transactions then with\nvery high probability a sybil pretending to be many nodes will observe\nyou transmitting directly.\n\nUltimately, since the traffic is clear text, if you expect to have any\nprivacy at all in your broadcasts you should be broadcasting over tor\nor i2p."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-08-18T17:27:18",
                "message_text_only": ">\n> Connection rotation would be fine for improving a node's knoweldge\n> about available peers and making the network stronger against\n> partitioning.\n>\n\nIt's also the first/next step towards decentralising the DNS seeds (for SPV\nclients), as it'd allow each node to explore the network and return better\nquality results in getaddr.\n\n\n> If you rotate where you send out your transactions then with\n> very high probability a sybil pretending to be many nodes will observe\n> you transmitting directly.\n>\n\nThis is sort of what Tor is going through with their guard nodes and how\noften to rotate them.\n\nI think the attack Ivan is talking about does not require sybil attacks to\nwork though, just listening to lots of peers. Raising the bar to require\nthe attacker to receive lots of connections seems like a win.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140818/6738e881/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-08-18T17:35:00",
                "message_text_only": "Yes, I believe peer rotation is useful, but not for privacy - just for\nimproving the network's internal knowledge.\n\nI haven't looked at the implementation yet, but how I imagined it would be\nevery X minutes you attempt a new outgoing connection, even if you're\nalready at the outbound limit. Then, if a connection attempt succeeds,\nanother connection (according to some scoring system) is replaced by it.\nGiven such a mechanism, plus reasonable assurances that better connections\nsurvive for a longer time, I have no problem with rotating every few\nminutes.\nOn Aug 18, 2014 7:23 PM, \"Gregory Maxwell\" <gmaxwell at gmail.com> wrote:\n\n> On Mon, Aug 18, 2014 at 9:46 AM, Ivan Pustogarov <ivan.pustogarov at uni.lu>\n> wrote:\n> > Hi there,\n> > I'd like to start a discussion on periodic rotation of outbound\n> connections.\n> > E.g. every 2-10 minutes an outbound connections is dropped and replaced\n> > by a new one.\n>\n> Connection rotation would be fine for improving a node's knoweldge\n> about available peers and making the network stronger against\n> partitioning.\n>\n> I haven't implemented this because I think your motivation is\n> _precisely_ opposite the behavior. If you keep a constant set of\n> outbound peers only those peers learn the origin of your transactions,\n> and so it is unlikely that any particular attacker will gain strong\n> evidence. If you rotate where you send out your transactions then with\n> very high probability a sybil pretending to be many nodes will observe\n> you transmitting directly.\n>\n> Ultimately, since the traffic is clear text, if you expect to have any\n> privacy at all in your broadcasts you should be broadcasting over tor\n> or i2p.\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140818/cdbcfb48/attachment.html>"
            },
            {
                "author": "Ivan Pustogarov",
                "date": "2014-08-18T18:37:21",
                "message_text_only": "Yes, I agree that if a client rotates its outbound connections then\nsooner or later he will connect to a malicious peer. This case considers\nan attacker which has some peers in the network. E.g. renting 500 IP addresses\nfor 0.01 USD per IP per hour will cost 3600 USD per month: doable but\nstill not for free.\nI think that revealing the origin (or rather public IP) of a distinct\ntransaction is tolerable. The learned public IP can be shared by several\nusers. So a big ISP can server as a anonymyzer which prevents from linking\ntx of the same user.\n\nRotation will help against low-resource attackers with no peers at all.\nThe reason for rotation is that if client's 8 outbound connections stay\nthe same for a long time, an attacker which does not have any peers at all\nbut just listens the Bitcoin network can link together differed BC addresses\nand learn the IP of the client. The 8 entry peers are unique per client so if two\nusers share the same IP, they can be distinguished.\nIn order to protect himself from this specific attack, a client can also\nset only 3-4 outbound connections, so the proposed modification is just\nanother potential defence. If it is useful for other things, it' great.\n\n\n> If you rotate where you send out your transactions then with\n> very high probability a sybil pretending to be many nodes will observe\n> you transmitting directly.\n\nOutbound connections are still rotated from time to time due to remote side\ndisconnections. Plus outbound connections do not survive BC client restarts\n(unlike Tor Guard nodes).\n\n\nOn Mon, Aug 18, 2014 at 10:21:07AM -0700, Gregory Maxwell wrote:\n> On Mon, Aug 18, 2014 at 9:46 AM, Ivan Pustogarov <ivan.pustogarov at uni.lu> wrote:\n> > Hi there,\n> > I'd like to start a discussion on periodic rotation of outbound connections.\n> > E.g. every 2-10 minutes an outbound connections is dropped and replaced\n> > by a new one.\n> \n> Connection rotation would be fine for improving a node's knoweldge\n> about available peers and making the network stronger against\n> partitioning.\n> \n> I haven't implemented this because I think your motivation is\n> _precisely_ opposite the behavior. If you keep a constant set of\n> outbound peers only those peers learn the origin of your transactions,\n> and so it is unlikely that any particular attacker will gain strong\n> evidence. If you rotate where you send out your transactions then with\n> very high probability a sybil pretending to be many nodes will observe\n> you transmitting directly.\n> \n> Ultimately, since the traffic is clear text, if you expect to have any\n> privacy at all in your broadcasts you should be broadcasting over tor\n> or i2p.\n\n-- \nIvan"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-08-18T19:37:49",
                "message_text_only": "On Mon, Aug 18, 2014 at 11:37 AM, Ivan Pustogarov\n<ivan.pustogarov at uni.lu> wrote:\n> the same for a long time, an attacker which does not have any peers at all\n> but just listens the Bitcoin network can link together differed BC addresses\n> and learn the IP of the client.\n\nI don't understand what you're talking about here; if you have no peer\nat all you will learn nothing about the Bitcoin network.\n\nCan you clarify?\n\n\n> The 8 entry peers are unique per client so if two\n> users share the same IP, they can be distinguished.\n\nWhat mechanism are you referring to specifically?\n\n> Outbound connections are still rotated from time to time due to remote side\n> disconnections. Plus outbound connections do not survive BC client restarts\n> (unlike Tor Guard nodes).\n\nOn our initial connections we do have a preference for nodes we knew\nwere up recently. This could be made further. That the current\nbehavior isn't great isn't an argument for making it worse on that\ndimension."
            },
            {
                "author": "Ivan Pustogarov",
                "date": "2014-08-18T20:33:43",
                "message_text_only": "The attack I'm trying to address is described here: https://www.cryptolux.org/index.php/Bitcoin\nIt was discussed here: https://bitcointalk.org/index.php?topic=632124.0\n\nIt uses the following observation. Each NATed client connects to the Bitcoin network\nthrough 8 entry peers; he also advertises his public IP address to these peers which\nallows an attacker to make the mapping <8-entry-peers, client-IP-address>.\nThe probability for two different clients to choose\nthe same entry peers is negligible. When a client generates a transaction,\nthe entry peers of the client are likely to be the first to retransmit it.\n\nThe attacker establishes many connections to each reachable Bitcoin peer and listens\nfor transactions. For each transaction she records 8-10 peers which were the first to forward this tx.\nAs a result, if two transactions are forwarded by the same set of entry peers,\nthey are likely to belong to the same client. \nAlso each 8-tuples has a mapping to the client's advertised IP address.\n\n\nOn Mon, Aug 18, 2014 at 12:37:49PM -0700, Gregory Maxwell wrote:\n> On Mon, Aug 18, 2014 at 11:37 AM, Ivan Pustogarov\n> <ivan.pustogarov at uni.lu> wrote:\n> > the same for a long time, an attacker which does not have any peers at all\n> > but just listens the Bitcoin network can link together differed BC addresses\n> > and learn the IP of the client.\n> \n> I don't understand what you're talking about here; if you have no peer\n> at all you will learn nothing about the Bitcoin network.\n> \n> Can you clarify?\n> \n> \n> > The 8 entry peers are unique per client so if two\n> > users share the same IP, they can be distinguished.\n> \n> What mechanism are you referring to specifically?\n> \n> > Outbound connections are still rotated from time to time due to remote side\n> > disconnections. Plus outbound connections do not survive BC client restarts\n> > (unlike Tor Guard nodes).\n> \n> On our initial connections we do have a preference for nodes we knew\n> were up recently. This could be made further. That the current\n> behavior isn't great isn't an argument for making it worse on that\n> dimension.\n\n-- \nIvan"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-08-18T20:43:44",
                "message_text_only": "On Mon, Aug 18, 2014 at 1:33 PM, Ivan Pustogarov <ivan.pustogarov at uni.lu> wrote:\n> The attack I'm trying to address is described here: https://www.cryptolux.org/index.php/Bitcoin\n> It was discussed here: https://bitcointalk.org/index.php?topic=632124.0\n>\n> It uses the following observation. Each NATed client connects to the Bitcoin network\n> through 8 entry peers; he also advertises his public IP address to these peers which\n> allows an attacker to make the mapping <8-entry-peers, client-IP-address>.\n\nI'm afraid I'm losing you here.  The node advertises himself to\neveryone he is connected to and in/or out, those nodes pass along\nthose advertisements.  When I receive an advertisement from a node I\ndo not know how far away the advertised peers is, presumably I can\naccurately exclude it from being 0-hops\u2014 itself\u2014) 1 or more should be\nindistinguishable. Is there a reason that they're distinguishable that\nI'm missing?\n\nCan you explain to me how you propose to produce this mapping?"
            },
            {
                "author": "Ivan Pustogarov",
                "date": "2014-08-18T21:02:57",
                "message_text_only": "For each neighbour, a Bitcoin peer keeps the history of addresses that\nit forwarded to the neighbour. If an address was already forwarded\nto a neighbour it is not retransmitted again.\n\nAn attacker can make a list of potential IP addresses of clients (say\nan IP range of an ISP, or listen for addresses in the Bitcoin network\nbefore the attack). Then she periodically \"spams\" the network with this list and\nupdates the address-forward history at each Bitcoin peer.\nAfter each \"spam\" round, the attacker reconnects her connections to Bitcoin peers\nand thus clears the retransmission history for her connections only.\n\nAs the result, when a NAT client connects to the network and advertises its\naddress, the addresses will propagate to the attacker's connections only.\n\n\nOn Mon, Aug 18, 2014 at 01:43:44PM -0700, Gregory Maxwell wrote:\n> On Mon, Aug 18, 2014 at 1:33 PM, Ivan Pustogarov <ivan.pustogarov at uni.lu> wrote:\n> > The attack I'm trying to address is described here: https://www.cryptolux.org/index.php/Bitcoin\n> > It was discussed here: https://bitcointalk.org/index.php?topic=632124.0\n> >\n> > It uses the following observation. Each NATed client connects to the Bitcoin network\n> > through 8 entry peers; he also advertises his public IP address to these peers which\n> > allows an attacker to make the mapping <8-entry-peers, client-IP-address>.\n> \n> I'm afraid I'm losing you here.  The node advertises himself to\n> everyone he is connected to and in/or out, those nodes pass along\n> those advertisements.  When I receive an advertisement from a node I\n> do not know how far away the advertised peers is, presumably I can\n> accurately exclude it from being 0-hops\u2014 itself\u2014) 1 or more should be\n> indistinguishable. Is there a reason that they're distinguishable that\n> I'm missing?\n> \n> Can you explain to me how you propose to produce this mapping?\n\n-- \nIvan"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-08-18T23:20:54",
                "message_text_only": "On Mon, Aug 18, 2014 at 2:02 PM, Ivan Pustogarov <ivan.pustogarov at uni.lu> wrote:\n> For each neighbour, a Bitcoin peer keeps the history of addresses that\n> it forwarded to the neighbour. If an address was already forwarded\n> to a neighbour it is not retransmitted again.\n\nOkay, sorry, I thought you were saying something else. I understand."
            }
        ],
        "thread_summary": {
            "title": "Outbound connections rotation",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Mike Hearn",
                "Ivan Pustogarov",
                "Gregory Maxwell",
                "Pieter Wuille"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 16380
        }
    },
    {
        "title": "[Bitcoin-development] Proposal: PoW-based throttling of addresses (was: Outbound connections rotation)",
        "thread_messages": [
            {
                "author": "Isidor Zeuner",
                "date": "2014-08-20T12:59:01",
                "message_text_only": "Hi there,\n\nquote:\n[...]\n> If two distinct transactions (with unrelated bitcoin addresses)\n> come from the same set of 8 peers, the attacker can conclude that they\n> originated from the same user. This gives another method (in addition\n> to transaction graph analysis) for an attacker to link different BC\n> addresses of the same user.\n\nUsing the same set of nodes for posting transactions using unrelated\ninputs kind of limits the privacy improvement that can be gained from\nusing unrelated inputs in the first place.\n\nSimilar to how Tor uses different circuits for different hosts to\nconnect to, it may make more sense to only use the same set of nodes\nfor posting a subsequent transaction when the input addresses are also\nthe same.\n\n[...]\n> Some details are here: https://www.cryptolux.org/index.php/Bitcoin\n>\n\nI also find the topic of banning Tor exit nodes interesting.\n\nI wonder if it makes more sense not to ban IP addresses completely,\nbut instead to throttle them using a PoW-based access control\nscheme. Misbehaving addresses can have their connecting difficulty\nscaled up, which should make it uneconomic to try to DoS the usage of\nTor exit nodes for connecting to Bitcoin.\n\nIt may also help nodes behind a NAT router if they share their global\nIP with misconfigured nodes.\n\nBest regards,\n\nIsidor"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-08-20T14:41:03",
                "message_text_only": ">\n> Misbehaving addresses can have their connecting difficulty\n> scaled up, which should make it uneconomic to try to DoS the usage of\n> Tor exit nodes for connecting to Bitcoin.\n>\n\nYou can't solve DoS by requiring all clients to do complicated work, all\nthat means is that weak clients (like users mobile phones and tablets) are\nsuccessfully DoSd whereas the attackers botnet of stolen computers sit\nthere solving PoWs.\n\nThe correct way to solve DoS is by having work prioritisation and queueing\nmechanisms, then finding ways to distinguish \"good\" clients from \"bad\"\nclients. Doing this whilst preserving privacy is hard. Long term the only\nway to solve it may be to require clients to present some kind of cookie\nduring resource exhaustion events that prove they've been around for a\nwhile, thus allowing them to jump the queue.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140820/20558085/attachment.html>"
            },
            {
                "author": "Isidor Zeuner",
                "date": "2014-08-23T11:53:21",
                "message_text_only": "Hi Mike,\n\nthanks for your assessment.\n\nPlease find my replies in-line:\n> >\n> > Misbehaving addresses can have their connecting difficulty\n> > scaled up, which should make it uneconomic to try to DoS the usage of\n> > Tor exit nodes for connecting to Bitcoin.\n> >\n>\n> You can't solve DoS by requiring all clients to do complicated work,\n\nSince when? This has been a recognized approach since people called it\n\"hashcash\" ([1] - before cryptocurrencies were even invented).\n\nI hear your concerns, but even then, I would see the PoW-based\napproach as an improvement to today's situations.\n\nTo be clear, I do not propose to have _all_ clients do complicated\nwork. Just those using an address which has been misbehaving. Right\nnow, they cannot connect at all, no matter how much resources they\ndedicate towards doing so.\n\n> all\n> that means is that weak clients (like users mobile phones and tablets) are\n> successfully DoSd whereas the attackers botnet of stolen computers sit\n> there solving PoWs.\n>\n\nThe way I had it in mind, well-behaved clients on an address used by\nattackers would have more effort to connect because of the PoW, but\nafter that, they can stay connected. The attacker also has to put more\neffort into connecting, and after sending malformed messages, gets\ndisconnected. So, the attacker would have to perform much more PoW\ncomputations in order to keep up his attack.\n\n> The correct way to solve DoS is by having work prioritisation and queueing\n> mechanisms, then finding ways to distinguish \"good\" clients from \"bad\"\n> clients. Doing this whilst preserving privacy is hard. Long term the only\n> way to solve it may be to require clients to present some kind of cookie\n> during resource exhaustion events that prove they've been around for a\n> while, thus allowing them to jump the queue.\n>\n\nExactly. Not every user may like to have a cookie by which an observer\nmight get the chance to even link his connection to his previous\nconnections, thereby allowing the discussed deanonymization technique\nto get even more effective.\n\nMaybe having both options would be even better: In case of an attack,\nthose able to solve the anti-DoS PoW can still connect (just maybe\nslower). Those who wish to run a weak client can choose to sacrifice\nprivacy for connectivity and keep a cookie for connecting.\n\nBest regards,\n\nIsidor\n\n[1] http://www.hashcash.org/papers/hashcash.pdf"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-08-23T13:03:05",
                "message_text_only": ">\n> Since when? This has been a recognized approach since people called it\n> \"hashcash\" ([1] - before cryptocurrencies were even invented).\n>\n\nI only know of one site that worked the way you propose: TicketMaster, a\nlong time ago. They used it as a less harsh form of blocking for IPs that\nthey strongly suspected were bots, which is what you suggest indeed. But\n99% of the hard work of that system was in scoring the connections. The\nactual PoW part didn't work that great because bots have much more patience\nthan humans do.\n\nOther sites also use proofs of work, but they're CAPTCHAs i.e. human PoWs.\nAnd unfortunately those don't work very well these days either :(\n\n\n> To be clear, I do not propose to have _all_ clients do complicated\n> work. Just those using an address which has been misbehaving.\n\n\nYes, I understand, but then you're back to scoring clients - the hard part\n- and the only question is do you slow down that client by sticking them at\nthe bottom of a work queue or by requiring them to solve a difficult PoW.\nThe best approach is the first one because that scales naturally .... you\ndon't have to define some notion of misbehaviour, you just prioritise\namongst clients.\n\nThe current notion of \"misbehaviour\" is only somewhat useful. It's easy to\nclassify reasonable behaviour as harmful and shoot yourself in the foot. We\nmanaged this at least once back in 2010 when we actually released a version\nof Bitcoin that interpreted a normal request to serve the block chain as a\nDoS attack! It couldn't serve the chain at all! Additionally many things\nthat can be interpreted as an attack like sending a message with a bad\nsignature can also be caused just by mistakes, or version skew during\nsoftware upgrades. So it's very tricky to get this right.\n\nThat's important because one quite common way big sites suffer DoS attacks\nis by accidentally having real users create a DoS \"attack\" by e.g. pushing\na bad software update, or by having sudden and unexpected press-driven\ngrowth, etc. You really don't want to force users to sit around waiting and\nwasting battery. It's better to serve as many requests as you can up to\nyour absolute limit and try to ensure as many of them as possible are good.\n\n\n> Exactly. Not every user may like to have a cookie by which an observer\n>>\n> might get the chance to even link his connection to his previous\n> connections, thereby allowing the discussed deanonymization technique\n> to get even more effective.\n>\n\nI doubt it matters. Any DoS attack that's powerful enough to use up most of\nthe networks resources is probably being driven by a botnet of some kind,\nand *all* legitimate users will lose in an even fight against a botnet.\n\nCookies can be somewhat anonymized. For example a cookie that is merely a\nsignature over a timestamp of some kind (doesn't have to be an secp256k1\nsignature) can be normalised to the day or week. So you can prove you've\nbeen using Bitcoin for say 3 years but it doesn't pin you down precisely.\n\nThis isn't perfect:  attackers can and do \"age\" accounts before preparing\nfor abuse. Proof of UTXO is another way to rank users. If you're richer\nyou're presumably more important for the network to process than poor\npeople. However you end up back at a CPU imbalance. PoW can possibly play a\nrole here to even it out: the cost of submitting a UTXO proof should be at\nleast equal to the cost of verifying the signature, but that is a PoW small\nenough that users would not notice.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/0b18da3d/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposal: PoW-based throttling of addresses (was: Outbound connections rotation)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Isidor Zeuner"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 8341
        }
    },
    {
        "title": "[Bitcoin-development] Fwd:  Outbound connections rotation",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2014-08-18T18:13:14",
                "message_text_only": "On Mon, Aug 18, 2014 at 10:30 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> Yes, I believe peer rotation is useful, but not for privacy - just for\n> improving the network's internal knowledge.\n>\n> I haven't looked at the implementation yet, but how I imagined it would be\n> every X minutes you attempt a new outgoing connection, even if you're\n> already at the outbound limit. Then, if a connection attempt succeeds,\n> another connection (according to some scoring system) is replaced by it.\n> Given such a mechanism, plus reasonable assurances that better connections\n> survive for a longer time, I have no problem with rotating every few\n> minutes.\n\nPreviously when you and I had discussed this I'd proposed that some\nnumber (say) four of the most long lived connections which had proven\nthemselves useful (e.g. by relaying blocks) be pinned up and not be\neligible for dropping. By protecting some subset of peers you\nguarantee that an attacker which simply introduces a lot of nodes\ncannot partition the network which existed prior to when the attack\nstarted.\n\nOn Mon, Aug 18, 2014 at 10:27 AM, Mike Hearn <mike at plan99.net> wrote:\n> I think the attack Ivan is talking about does not require sybil attacks to work though, just listening to lots of peers\n\nI may not be understanding you. Might be a definitions thing, I'm\nusing the definition: A sybil attack is when a party takes on many\nidentities (nodes) in the network.\n\nWhat ivan highlights is a bit of a tradeoff between concealing\nidentities and linkages.  Relaying transactions through only a single\npeer ever (until that one is no longer on the network) is the best\nstrategy for concealing your identity (ignoring tor and what not), as\nonly that peer learns anything about your identity.  But it may reveal\na lot about how different transactions are linked, since people\nobserving that peer will observe that your transactions are\ncorrelated.\n\nThe optimal strategy for avoiding linkages (ignoring tor, again), is\nto randomly pick a different peer for each transaction and relay the\ntransaction only to that peer.  This can (and probably should) be\ndistinct from your normal network connectivity.\n\nProbably for anti-linkage I'd suggest that a facility for that kind of\nannouncement should be done. If used over tor it would also protect\nyour identity.   Then the regular topology of the network can be\noptimized for learning and partition resistance."
            }
        ],
        "thread_summary": {
            "title": "Fwd:  Outbound connections rotation",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gregory Maxwell"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2422
        }
    },
    {
        "title": "[Bitcoin-development] Fwd: Outbound connections rotation",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2014-08-18T18:38:40",
                "message_text_only": "> The optimal strategy for avoiding linkages (ignoring tor, again), is\n> to randomly pick a different peer for each transaction and relay the\n> transaction only to that peer.  This can (and probably should) be\n> distinct from your normal network connectivity.\n\nIt already happens with 8 peers that if you have lousy peers, the\ntransaction doesn't reach the network on the first broadcasting. When\nsending to only one random peer it will likely be even worse.\n\nI guess the wallet could send out the transaction 'staggered' over\ntime. It could pick a random new node, broadcast the transaction, wait\na bit, pick a new node, broadcast the transaction until it is comes\nback through one of the other peers.\n\nSeparating the transaction broadcasting (of the wallet) from, for\nexample, the nodes used to request blocks from could make sense. Maybe\ndoubly so if bloom filters are involved.\n\nWladimir"
            }
        ],
        "thread_summary": {
            "title": "Fwd: Outbound connections rotation",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 891
        }
    },
    {
        "title": "[Bitcoin-development] Cloud mining should be using merkle sum trees to prove they aren't doing fractional reserve mining",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-08-19T02:30:25",
                "message_text_only": "A number of people - most recently Gavin Andresen - have speculated that\ncloud hashing operations may in fact be ponzi schemes that don't\nactually own the hashing power they claim to own. The claim is that the\ncustomers upfront purchase of hashing power is simply kept and used to\npay off existing customer profits rather than actually being used to\npurchase mining equipment.\n\nWe can use merkle sum trees to detect this fraud cryptographically:\n\n1) Put the MH/s paid for by each account into a merkle sum tree, each\nwith a customer supplied unique identifier. (like their email address)\nThis allows the customer to verify that the hashing power they paid for\nhas been included in the total hashing power claimed.\n\n2) Mark blocks found by the operation publicly so they can be associated\nwith the specific cloud mining operation; putting the merkle sum tree\nroot hash into the coinbase or an OP_RETURN output would be ideal. This\nallows anyone to verify that the hashing power claimed corresponds to\nthe # of blocks actually found.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000201d505432d708aa2edb656f6fe34d686b37d4747e5ff389\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140818/fb79913a/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Cloud mining should be using merkle sum trees to prove they aren't doing fractional reserve mining",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1405
        }
    },
    {
        "title": "[Bitcoin-development] [bitcoin] Add rotation of outbound connections (#4723)",
        "thread_messages": [
            {
                "author": "Ivan Pustogarov",
                "date": "2014-08-19T09:34:40",
                "message_text_only": "I agree with this.\nSome combinatorics shows that 3 persistent connections instead of 8 results in\na low success rate of the entry-peers fingerprinting attack.\n\n> it should not disconnect any nodes which were addnode, and it should not disconnect whitelisted peers\nI agree ('Addnodes' are already excluded in the example code from the pull request)\n\nOn Mon, Aug 18, 2014 at 04:51:34PM -0700, Gregory Maxwell wrote:\n> It was pointed out to me that my concern wrt partitioning is unclear. Imagine\n> an attacker starts up a moderate number of sybil nodes. He also connects to\n> every other available listening peer and fills up their inbound capacity.\n> \n> In the current network this kind of activity would only disrupt newly joining\n> peers. But nodes which were still online would remain connected to each other.\n> With excessive rotation the entire network could become connected exclusively\n> via the sybils.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.*\n> \n\n-- \nIvan"
            }
        ],
        "thread_summary": {
            "title": "Add rotation of outbound connections (#4723)",
            "categories": [
                "Bitcoin-development",
                "bitcoin"
            ],
            "authors": [
                "Ivan Pustogarov"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 983
        }
    },
    {
        "title": "[Bitcoin-development] Proposal: Encrypt bitcoin messages",
        "thread_messages": [
            {
                "author": "Ra\u00fal Mart\u00ednez",
                "date": "2014-08-19T09:49:41",
                "message_text_only": "Hi,\nI believe that all comunications should be encrypted by default, no matter\nthat is public information (tx info), the only exception I would make would\nbe block packets (to avoid increasing propagation time).\n\nI suggest that Bitcoin Core should generate a public/private key pair and\nshare the public one with peers.\n\nThis could provide privacy and integrity but not autentication.\n\nThis way you can impersonate a bitcoin node (active mitm) but you cant just\nbe passive and record all transactions send or recieved by an IP address.\n\nToday you can just watch for incoming/outgoing transactions to determine\nwhat tx are created in the Node, when you find one you can see the Bitcoin\naddress inputs and outputs and track that person's bitcoins.\n\nAs an example, SSH provides this kind of encryption, althogh Bitcoin Core\nshould ignore fingerprint changes (caused due to reinstalls).\n\nPlease feel free to disqus why this is not needed or why you like this idea.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/0538ac1f/attachment.html>"
            },
            {
                "author": "Ra\u00fal Mart\u00ednez",
                "date": "2014-08-19T15:11:57",
                "message_text_only": "Only messages between peers are encrypted, only during transit.\n\nBefore sending a transaction to Node B you use his public key, so Node B\nhas the key\nEl 19/08/2014 17:05, \"Richard Moore\" <me at ricmoo.com> escribi\u00f3:\n\n> If you encrypt all messages with an asymmetric cipher, how would each node\n> make use of the blockchain in an encrypted form? Each node would be able to\n> encrypt the data, but only the Bitcoin Core Dev could decrypt it?\n>\n>\n> On Aug 19, 2014, at 5:49 AM, Ra\u00fal Mart\u00ednez <rme at i-rme.es> wrote:\n>\n> Hi,\n> I believe that all comunications should be encrypted by default, no matter\n> that is public information (tx info), the only exception I would make would\n> be block packets (to avoid increasing propagation time).\n>\n> I suggest that Bitcoin Core should generate a public/private key pair and\n> share the public one with peers.\n>\n> This could provide privacy and integrity but not autentication.\n>\n> This way you can impersonate a bitcoin node (active mitm) but you cant\n> just be passive and record all transactions send or recieved by an IP\n> address.\n>\n> Today you can just watch for incoming/outgoing transactions to determine\n> what tx are created in the Node, when you find one you can see the Bitcoin\n> address inputs and outputs and track that person's bitcoins.\n>\n> As an example, SSH provides this kind of encryption, althogh Bitcoin Core\n> should ignore fingerprint changes (caused due to reinstalls).\n>\n> Please feel free to disqus why this is not needed or why you like this\n> idea.\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> .\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8><(((\u00ba>\n>\n> Richard Moore ~ Founder\n> Genetic Mistakes Software inc.\n> phone: (778) 882-6125\n> email: ricmoo at geneticmistakes.com\n> www: http://GeneticMistakes.com\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/65d3df95/attachment.html>"
            },
            {
                "author": "Richard Moore",
                "date": "2014-08-19T15:30:45",
                "message_text_only": "Oh, I see. I misread, thinking you wanted the dev team to have a private key and share the public key, similar to alerts. But each peer would have a public/private key pair and use something akin to ECDH for a symmetric key and transport using a block cipher?\n\nHow would you share the public key? If I were a man-in-the-middle, I could intercept the public key, generate my own and pass that along and then decouple the pipe when the other side shares their public key.\n\nAlso, you should not ignore your SSH fingerprint, as you exactly open yourself to mitm attacks.\n\n\n\nOn Aug 19, 2014, at 11:11 AM, Ra\u00fal Mart\u00ednez <rme at i-rme.es> wrote:\n\n> Only messages between peers are encrypted, only during transit.\n> \n> Before sending a transaction to Node B you use his public key, so Node B has the key\n> \n> El 19/08/2014 17:05, \"Richard Moore\" <me at ricmoo.com> escribi\u00f3:\n> If you encrypt all messages with an asymmetric cipher, how would each node make use of the blockchain in an encrypted form? Each node would be able to encrypt the data, but only the Bitcoin Core Dev could decrypt it?\n> \n> \n> On Aug 19, 2014, at 5:49 AM, Ra\u00fal Mart\u00ednez <rme at i-rme.es> wrote:\n> \n>> Hi,\n>> I believe that all comunications should be encrypted by default, no matter that is public information (tx info), the only exception I would make would be block packets (to avoid increasing propagation time).\n>> \n>> I suggest that Bitcoin Core should generate a public/private key pair and share the public one with peers.\n>> \n>> This could provide privacy and integrity but not autentication.\n>> \n>> This way you can impersonate a bitcoin node (active mitm) but you cant just be passive and record all transactions send or recieved by an IP address.\n>> \n>> Today you can just watch for incoming/outgoing transactions to determine what tx are created in the Node, when you find one you can see the Bitcoin address inputs and outputs and track that person's bitcoins.\n>> As an example, SSH provides this kind of encryption, althogh Bitcoin Core should ignore fingerprint changes (caused due to reinstalls).\n>> \n>> Please feel free to disqus why this is not needed or why you like this idea.\n>> \n>> ------------------------------------------------------------------------------\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> .\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8><(((\u00ba>\n> \n> Richard Moore ~ Founder\n> Genetic Mistakes Software inc.\n> phone: (778) 882-6125\n> email: ricmoo at geneticmistakes.com\n> www: http://GeneticMistakes.com\n> \n\n.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8><(((\u00ba>\n\nRichard Moore ~ Founder\nGenetic Mistakes Software inc.\nphone: (778) 882-6125\nemail: ricmoo at geneticmistakes.com\nwww: http://GeneticMistakes.com\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/6f49bfd8/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-08-19T16:07:17",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 08/19/2014 03:30 PM, Richard Moore wrote:\n> Oh, I see. I misread, thinking you wanted the dev team to have a\n> private key and share the public key, similar to alerts. But each\n> peer would have a public/private key pair and use something akin to\n> ECDH for a symmetric key and transport using a block cipher?\n> \n> How would you share the public key? If I were a man-in-the-middle,\n> I could intercept the public key, generate my own and pass that\n> along and then decouple the pipe when the other side shares their\n> public key.\n> \n> Also, you should not ignore your SSH fingerprint, as you exactly\n> open yourself to mitm attacks.\n\nhttp://curvecp.org\n\nIf that's not acceptable, even using TLS with self-signed certificates\nwould be an improvement.\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCAAGBQJT83Y1AAoJEMP3uyY4RQ21aqUH/3rGvgz3J6UYY2Qb2qzNoucB\nQqIj4fByZncX7Fhx5YK6fc6QoLr4Oqxd+zgbJ3ghrLtAJ7dm61iLmmib8MuDz2K1\nkQj8xmZhWuUFI26bjK54RlKoWg46XFKNKcaVub6JmVg9dH8mX86mF746KnR5ZqdX\nBuehWoEqcHlY3JkrTgOGpHjT/EGScZQxzJHzsBOfUJuX12lFtzcWzBTZyo5K8fD+\n6eub3i6Fc4qn/c788UVFsmHeWV+NCeB1/y94V1+peIPWYhrZO+FVm+xEflG4U81Q\nMRejqNjFT8ztT5vRHx1qJsmIgnzT0SXfh+FRt0hdqJizjlmyntMmCXjFmtnIeT8=\n=9qWl\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x38450DB5.asc\nType: application/pgp-keys\nSize: 14046 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/b2be03df/attachment.bin>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-08-19T16:38:21",
                "message_text_only": "On Tue, Aug 19, 2014 at 9:07 AM, Justus Ranvier\n<justusranvier at riseup.net> wrote:\n> If that's not acceptable, even using TLS with self-signed certificates\n> would be an improvement.\n\nTLS is a huge complex attack surface, any use of it requires an\nadditional dependency with a large amount of difficult to audit code.\nTLS is trivially DOS attacked and every major/widely used TLS\nimplementation has had multiple memory disclosure or remote execution\nvulnerabilities even in just the last several years.\n\nWe've dodged several emergency scale vulnerabilities by not having TLS."
            },
            {
                "author": "Angel Leon",
                "date": "2014-08-19T16:58:41",
                "message_text_only": "\"I suggest that Bitcoin Core should generate a public/private key pair and\nshare the public one with peers.\"\n\nI've not read the p2p protocol of Bitcoin core, but I suppose the initial\nhandshake between 2 peers would be the ideal place to exchange a public\nkeys.\n\nwould it make sense to generate a new random pair of keys per each peer you\nconnect to?\nthen each subsequent message to every peer gets encrypted differently,\nkeeping each conversation isolated from each other encryption-speaking.\n\nThese keys would have nothing to do with your wallet, they're just to\nencrypt any further communication between peers post-handshake. Would that\nbe of any use to \"This could provide privacy and integrity but not\nautentication.\"?\n\nhttp://twitter.com/gubatron\n\n\nOn Tue, Aug 19, 2014 at 12:38 PM, Gregory Maxwell <gmaxwell at gmail.com>\nwrote:\n\n> On Tue, Aug 19, 2014 at 9:07 AM, Justus Ranvier\n> <justusranvier at riseup.net> wrote:\n> > If that's not acceptable, even using TLS with self-signed certificates\n> > would be an improvement.\n>\n> TLS is a huge complex attack surface, any use of it requires an\n> additional dependency with a large amount of difficult to audit code.\n> TLS is trivially DOS attacked and every major/widely used TLS\n> implementation has had multiple memory disclosure or remote execution\n> vulnerabilities even in just the last several years.\n>\n> We've dodged several emergency scale vulnerabilities by not having TLS.\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/5903b960/attachment.html>"
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-08-19T17:19:44",
                "message_text_only": "If your threat model is passive listeners, it seems to me that simply\nestablishing a symmetric key for each connection at handshake time\nusing diffie-hellman is all you need. No public private crypto needed\nat all.\n\nThe whole thing seems like a bit of security theater unfortunately.\nThe kind of attacker that can pull off widespread passive listening is\nprobably able and willing to do active MITM. It's not a huge\nincremental cost.\n\nInstead, those users that do have a need for security should probably\nconnect to the network using Tor or I2P, which can give much better\nsecurity guarantees than anything being discussed here.\n\nOn Tue, Aug 19, 2014 at 12:58 PM, Angel Leon <gubatron at gmail.com> wrote:\n> \"\n> I suggest that Bitcoin Core should generate a public/private key pair and\n> share the public one with peers.\"\n>\n> I've not read the p2p protocol of Bitcoin core, but I suppose the initial\n> handshake between 2 peers would be the ideal place to exchange a public\n> keys.\n>\n> would it make sense to generate a new random pair of keys per each peer you\n> connect to?\n> then each subsequent message to every peer gets encrypted differently,\n> keeping each conversation isolated from each other encryption-speaking.\n>\n> These keys would have nothing to do with your wallet, they're just to\n> encrypt any further communication between peers post-handshake. Would that\n> be of any use to \"This could provide privacy and integrity but not\n> autentication.\"?\n>\n> http://twitter.com/gubatron\n>\n>\n> On Tue, Aug 19, 2014 at 12:38 PM, Gregory Maxwell <gmaxwell at gmail.com>\n> wrote:\n>>\n>> On Tue, Aug 19, 2014 at 9:07 AM, Justus Ranvier\n>> <justusranvier at riseup.net> wrote:\n>> > If that's not acceptable, even using TLS with self-signed certificates\n>> > would be an improvement.\n>>\n>> TLS is a huge complex attack surface, any use of it requires an\n>> additional dependency with a large amount of difficult to audit code.\n>> TLS is trivially DOS attacked and every major/widely used TLS\n>> implementation has had multiple memory disclosure or remote execution\n>> vulnerabilities even in just the last several years.\n>>\n>> We've dodged several emergency scale vulnerabilities by not having TLS.\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Johnathan Corgan",
                "date": "2014-08-19T17:35:05",
                "message_text_only": "On 08/19/2014 09:38 AM, Gregory Maxwell wrote:\n\n> We've dodged several emergency scale vulnerabilities by not having TLS.\n\nI'm still trying to understand the original premise that we want\nencrypted communications between nodes.\n\nI can certainly see the value of having *authenticated* traffic with\nspecific nodes, using an HMAC for the protocol messages in place of the\ncurrent checksum.\n\n-- \nJohnathan Corgan, Corgan Labs\nSDR/DSP Training and Development Services\nhttp://corganlabs.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: johnathan.vcf\nType: text/x-vcard\nSize: 262 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/6a4442a5/attachment.vcf>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 213 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/6a4442a5/attachment.sig>"
            },
            {
                "author": "J Ross Nicoll",
                "date": "2014-08-19T23:38:31",
                "message_text_only": "The concern is that if you can monitor traffic in and out of a single\nnode, you can determine which transactions originate from it vs those\nwhich it relays. That's not great, certainly, but how many nodes\nactually require that level of security, and surely they can use Tor or\nVPN services if so?\n\nFurther, unless the remote nodes are in some way trusted, you're\nchanging the attack from read-only to requiring the ability to perform \na man in the middle attack - that doesn't seem much harder to me.\n\nAs Gregory states, there's been at least two recent serious if not\ncatastrophic OpenSSL bugs, and the consequences of Heartbleed if the\nBitcoin network had been vulnerable are the stuff of nightmares.\n\nVery difficult to see the risk/reward payoff being worthwhile.\n\nRoss\n\n\nOn 19/08/2014 18:35, Johnathan Corgan wrote:\n> On 08/19/2014 09:38 AM, Gregory Maxwell wrote:\n>\n>> We've dodged several emergency scale vulnerabilities by not having TLS.\n> I'm still trying to understand the original premise that we want\n> encrypted communications between nodes.\n>\n> I can certainly see the value of having *authenticated* traffic with\n> specific nodes, using an HMAC for the protocol messages in place of the\n> current checksum.\n>\n>\n>\n> ------------------------------------------------------------------------------\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140820/19313167/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-08-19T23:39:09",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 08/19/2014 11:38 PM, J Ross Nicoll wrote:\n> That's not great, certainly, but how many nodes actually require\n> that level of security\n\nAll of them.\n\nWhile the rest of the 'net is busy deprecating HTTP and all other\nunencrypted transport methods, why is it(*) even a debate?\n\nSecurity should be on by default. Make users who don't want it jump\nthrough hoops to turn it off instead of the other way around.\n\n\n(*) where \"it\" is the desirability of blocking passive surveillance,\nnot the particular algorithm to use.\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCAAGBQJT8+AdAAoJEMP3uyY4RQ21kv8IANDkveCGJX5b5c+waXTHcEf0\nMgrGlkUZgZaP+fNNME32MEeQMywkyHohZly1KKYyqf+Qi2YkZ7rFiZj5e16EtGVK\nzBQCrvOyMZVv/tWPfRxrZV+jC5dUBPryaCV3XwyK3w8u5WpDhpC1be6uBjY6qtTB\n58MzdMBEEwceUwDezAIpGxsr5fKw+by4WyL23HQybSgUSHWh9S9hSp4dY1L8sDdr\natdFOvjiwY7zQe9V4mrtSv2pwmWIfOJE3RBhwSdPBtsMqO0PAnUEmxKYANQjh8qV\nW147aQT97DYkWb3TucY+gVbsfKSzvNoiXwvWMpmXT1Kz8wia0vX7MoPBtO6+uOk=\n=6tJk\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x38450DB5.asc\nType: application/pgp-keys\nSize: 14046 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/f42213ca/attachment.bin>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-08-19T23:54:35",
                "message_text_only": "On Tue, Aug 19, 2014 at 4:39 PM, Justus Ranvier\n<justusranvier at riseup.net> wrote:\n> While the rest of the 'net is busy deprecating HTTP and all other\n> unencrypted transport methods, why is it(*) even a debate?\n\nI think it's desirable (and you can go look in #bitcoin-dev logs for\nme talking about it in the past)\u2014 but all of engineering is\ntradeoffs... and the ones involved here don't make it a high priority\nin my book, esp when people should be using Bitcoin over tor in any\ncase, which provides better privacy and also covers encrypt + auth.\n\nIn general I think authentication is more important than encryption,\nsince authentication is table stakes required for a number of\nanti-partitioning-attack measures.  My past thinking on opportunistic\nencryption is that once you're authenticating also encrypting would be\nfairly little work, but it should be auth that drives that kind of\neffort."
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-19T23:40:39",
                "message_text_only": "Encryption is of little value if you may deduce the same information\nby observing packet sizes and timings.\n\n\nOn Tue, Aug 19, 2014 at 7:38 PM, J Ross Nicoll <jrn at jrn.me.uk> wrote:\n> The concern is that if you can monitor traffic in and out of a single node,\n> you can determine which transactions originate from it vs those which it\n> relays. That's not great, certainly, but how many nodes actually require\n> that level of security, and surely they can use Tor or VPN services if so?\n>\n> Further, unless the remote nodes are in some way trusted, you're changing\n> the attack from read-only to requiring the ability to perform  a man in the\n> middle attack - that doesn't seem much harder to me.\n>\n> As Gregory states, there's been at least two recent serious if not\n> catastrophic OpenSSL bugs, and the consequences of Heartbleed if the Bitcoin\n> network had been vulnerable are the stuff of nightmares.\n>\n> Very difficult to see the risk/reward payoff being worthwhile.\n>\n> Ross\n>\n>\n> On 19/08/2014 18:35, Johnathan Corgan wrote:\n>\n> On 08/19/2014 09:38 AM, Gregory Maxwell wrote:\n>\n> We've dodged several emergency scale vulnerabilities by not having TLS.\n>\n> I'm still trying to understand the original premise that we want\n> encrypted communications between nodes.\n>\n> I can certainly see the value of having *authenticated* traffic with\n> specific nodes, using an HMAC for the protocol messages in place of the\n> current checksum.\n>\n>\n>\n> ------------------------------------------------------------------------------\n>\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Slashdot TV.\n> Video for Nerds.  Stuff that matters.\n> http://tv.slashdot.org/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Peter Todd",
                "date": "2014-08-20T00:16:28",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 19 August 2014 19:40:39 GMT-04:00, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>Encryption is of little value if you may deduce the same information\n>by observing packet sizes and timings.\n\nThat is simply incorrect. The resources required to do that kind of monitoring are very high; even the NSA can't pull it off consistently for non-targetted operations due to limitations on upstream bandwidth and other resources. (remember that many of their taps are non-cooperative ones, obtained by breaking into routers at ISP's) This I've confirmed with direct conversation with Jacob Applebaum and other Tor devs. Every additional bit of encrypted information flowing over the internet increases the work they need to so to deanonymize you. This is not unlike how CoinJoin, while not providing guaranteed anonymity, makes the job of attackers significantly more difficult by creating large amounts of statistical noise. In addition the Bitcoin P2P protocol has natural anti-traffic analysis properties due to its asynchronous nature.\n\nRe: MITM attacks, again, the resources required to conduct them on a large scale instead of passive attacks just don't exist. For instance the NSA has to be relatively selective in using them for fear of being detected; being able to detect attacks is a huge improvement over the status quo anyway.\n\nHaving said that using Tor by default in Bitcoin Core is an even easier way of enabling encryption and authentication, and would help protect all Tor users from surveillance. The easiest way to do this would be to make the Debian/Ubuntu packages depend on Tor, and include a install-time script to setup the hidden service. I've verified with the Tor devs that they would welcome the additional load on the Tor network that Bitcoin would add.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJT8+jcMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhU2WB/9XE6BFxTkbjIfVn46U\nuH7HCV/FSgCeSConO7LbFR2m6hN5eZ4oKcLzIi65SqRUol2eCGWVoJDsl3vuTmwF\nc4gOqdieJQ6SOdHAzcolf+b3p+VwIXXUMMsO2vI6UGZvV6gFJXnZ17GASdSo9+f8\nx4VxgLSunZD0xRMiMntaqPMFu1MyplomimQadW5MDt3QTa2BrOsDMwNS10NSQIAL\n8ywHSKh8UddVL8ZeinE/Bhf3T1OnDVBIUCVHhhEYnKLqCnwmyY3NXH4lzXpPvo+e\nLhzF7HzB5tE22vIQNb/3RimoN5FV7p4FEvgsGwT/kjjUAxgg6/LpNY5WQG6FL8nJ\n/8F3\n=t4/7\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-08-20T00:21:35",
                "message_text_only": "On Tue, Aug 19, 2014 at 8:16 PM, Peter Todd <pete at petertodd.org> wrote:\n> On 19 August 2014 19:40:39 GMT-04:00, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>>Encryption is of little value if you may deduce the same information\n>>by observing packet sizes and timings.\n>\n> That is simply incorrect. The resources required to do that kind of monitoring are very high; even the NSA can't pull it off consistently for\n\nHardly.  For example, when a new block arrives on the network, a\nsingle observer at a single location may obtain a binary \"likely|not\nbitcoin protocol\" decision from a spike in usage correlated with\nsudden, global network activity after a period of inactivity.  I'll\nnot detail all such metrics.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Peter Todd",
                "date": "2014-08-20T00:41:27",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 19 August 2014 20:21:35 GMT-04:00, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>On Tue, Aug 19, 2014 at 8:16 PM, Peter Todd <pete at petertodd.org> wrote:\n>> That is simply incorrect. The resources required to do that kind of\n>monitoring are very high; even the NSA can't pull it off consistently\n>for\n>\n>Hardly.  For example, when a new block arrives on the network, a\n>single observer at a single location may obtain a binary \"likely|not\n>bitcoin protocol\" decision from a spike in usage correlated with\n>sudden, global network activity after a period of inactivity.  I'll\n>not detail all such metrics.\n\nEmphasis on \"likely\", at best. Forcing you adversary to rely on uncertain statistics is a huge improvement over the status quo. Secondly your example is of a new block; the more general concern is determining where a given transaction originated. In the best of circumstances determining the origin of a few hundred bytes of days interspersed in dozens of kB/s of buffered data streams is very difficult and expensive even without padding and/or random delay features.\n\nAgain, I've spoken to people like Jacob Applebaum about this who have a solid understanding of what the NSA is actually capable of, and they've confirmed the above. Don't let perfect be the enemy of good.\n\nOf course, that's not to say we shouldn't cost-benefit analysis the implementation; not using straight OpenSSL for this is a wise decision. Hence the suggestion of using the existing and tested Tor support to encrypt by default.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJT8+62MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhZe/CADI+XvuCzK6N0/UUieD\nWzrGexWQsqNxX2hYQpzAiYT3Y5k4CCJ3yvett0udYKS3Piqd/ihvj9RfjWe5nO+d\nsnPGNwFU7jSRJ+hwPdnlHfFW99LCkKOzBX0hgC+qg11SyLKcsBwE3qaiFM47G1hy\nr4f1qX3Te2Kt0bUxP65d1M0Js1M0x+qLxXs6e9Gy3scFSpDjeoamgliJ6jBeeX9U\n8H0mambip5CZ+diGbaMeCCRJd19XH7Nz0QgcznYScmz/3krQhtIdEJKts7bs87vh\nvZyH7M4wVCiIDmDNxAIO2slo3+eopEvbOPgqjT7L72jrQgp3zVUtbJDzpSAgcB+M\nvLhB\n=AuCe\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "William Yager",
                "date": "2014-08-20T00:59:14",
                "message_text_only": "What, exactly, do we hope to achieve from having end-to-end encryption?\n\nEven if it worked perfectly, it wouldn't be very useful.\n\nBut it won't work perfectly, because we don't have any method of\nauthentication. The bitcoin network is trivially MITMable. It's designed to\nwork even in the face of that, but any encryption we implement will just\nget blown away by anyone who cares enough to stand in the middle of two\nnodes.\n\nAs far as I can see, we get a microscopic obfuscatory advantage over a very\nweak passive attacker, at the cost of hugely increased software complexity\n(and possibly increased CPU time).\n\nSo again; what do we hope to achieve? Why bother? Not a lot of sensitive\ninformation is transmitted in the clear. The little information that might\nbe considered sensitive is better protected by anonymization (a la Tor),\nnot encryption.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/1be9d73c/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-08-20T01:14:02",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 19 August 2014 20:59:14 GMT-04:00, William Yager <will.yager at gmail.com> wrote:\n>What, exactly, do we hope to achieve from having end-to-end encryption?\n>\n>Even if it worked perfectly, it wouldn't be very useful.\n>\n>But it won't work perfectly, because we don't have any method of\n>authentication.\n\nDon't let perfect be the enemy of good.\n\n> The bitcoin network is trivially MITMable. It's\n>designed to\n>work even in the face of that, but any encryption we implement will\n>just\n>get blown away by anyone who cares enough to stand in the middle of two\n>nodes.\n>\n>As far as I can see, we get a microscopic obfuscatory advantage over a\n>very\n>weak passive attacker, at the cost of hugely increased software\n>complexity\n>(and possibly increased CPU time).\n\nYou realize that by your own definition even the NSA is mostly a \"weak passive attacker\" They do *not* have the ability to attack more than a small, targeted, subset of connection for both technical and political reasons. For starters, MITM attacks are easily detected - \"Bitcoin network attacked by unknown agents! Has your ISP been compromised?\" would make for great headlines and would soon see the problem fixed both technically and politically.\n\nIn any case, my suggestion of enabling hidden service support by default adds both encryption and reasonably good authentication.\n\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJT8/ZaMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhV5UCAC0wVMyKtCedZuUKXrw\nMg6qvbkDzGyzn7fgASTnMh8hF+p+p5MoOz3K0FGTdLph+ulptz9ITatGmmi+av+u\n0Fc8xXYgxiYcIwtMVumNrHR16bjG7NoShnqMujuUZ7a+xigeHxV2/tG0VRb9Km8W\nGFYNdY4mOFubFu7qfqymmxGsIgP42rPsN6c41B75wqqaGzSX7BRmlxNsYVSUO3Fi\nfwNU7y7hLC9BN+WQCmVK+Rk57XpXcoydfvsz9a/SLhiQKssEdcDbUq4gLtnDHs92\nJBsUqzG/wDgcQFiLuAm/A/ZvDAERwPr6jtunt3CCDt+UdLwlGAj5RTnuHgY72PNS\nMa2O\n=2qdX\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "William Yager",
                "date": "2014-08-20T01:19:43",
                "message_text_only": "On Tue, Aug 19, 2014 at 8:14 PM, Peter Todd <pete at petertodd.org> wrote:\n\n>\n> Don't let perfect be the enemy of good.\n>\n\nI'm not. I don't think this proposal is even good.\n\n\n> You realize that by your own definition even the NSA is mostly a \"weak\n> passive attacker\" They do *not* have the ability to attack more than a\n> small, targeted, subset of connection for both technical and political\n> reasons. For starters, MITM attacks are easily detected - \"Bitcoin network\n> attacked by unknown agents! Has your ISP been compromised?\" would make for\n> great headlines and would soon see the problem fixed both technically and\n> politically.\n>\n>\nAgain, the NSA might get an absolutely trivial amount of data from\nmonitoring connections on the Bitcoin network. A bit of publicity is *not*\nworth drastically increasing the software complexity of the client.\n\n\n> In any case, my suggestion of enabling hidden service support by default\n> adds both encryption and reasonably good authentication.\n\n\nEnabling hidden service support by default would introduce an insanely huge\nattack surface.\n\nAnd you're conflating two different things; using Tor is valuable to\nBitcoin because it would provide some anonymity. The encryption aspect is\npretty much useless for us.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/ce8073c6/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-08-20T01:27:46",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 19 August 2014 21:19:43 GMT-04:00, William Yager <will.yager at gmail.com> wrote:\n>On Tue, Aug 19, 2014 at 8:14 PM, Peter Todd <pete at petertodd.org> wrote:\n>> In any case, my suggestion of enabling hidden service support by\n>default\n>> adds both encryption and reasonably good authentication.\n>\n>\n>Enabling hidden service support by default would introduce an insanely\n>huge\n>attack surface.\n\nHence my suggestion of separating that surface by using the standalone Tor binary, which runs under a different user to the Bitcoin Core binary.\n\n>And you're conflating two different things; using Tor is valuable to\n>Bitcoin because it would provide some anonymity. The encryption aspect\n>is\n>pretty much useless for us.\n\nFirst of all, without encryption we're leaking significant amounts of information to any passive attacker trying to trace the origin of Bitcoin transactions, a significant privacy risk.\n\nSecondly the upcoming v0.10's fee estimation implementation is quite vulnerable to Sybil attacks. Authentication and encryption are needed to make it secure from ISP-level targeting to ensure that your view of the network is representative. Tor support used in parallel with native connection is ideal here, as neither the Tor network nor your ISP alone can Sybil attack you. It's notable that Bitcoinj has already implemented Tor support for these same reasons.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJT8/mSMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhRZjCAC4PSpQ68qgtFMR77xf\nzXZLr/iMKX6yyJwXRj+vGi+0Ng/sv9NlYjYnDeflom37WlpGo/sCOFcVWImhnS2d\nkUFoUH92iXwRuEt/SN/LrHghkLWOxtVu9wa49eS/piGZFF3JWllk82MgdBZ6vjNw\nB6WuInEIurK+h8rUbAi2HjFkxVN0K0SsrFt/P0tHj10ABcMealBRoJh2Jx7fLNdS\nuTKddqeLyThEpLGNti3k+lhwQ2dA5RUBq6q3GUS/hWvTHRnU+viGMJSYv62LXRN5\nt87BXRY/R9UBpnudf3TIlPtOuIWcv2LhlXVjvbDDQqwJkvB3Qf4ejE3RZ28S5IUr\nOBQH\n=Gy7X\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-08-20T00:49:01",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 08/20/2014 12:16 AM, Peter Todd wrote:\n> The easiest way to do this would be to make the Debian/Ubuntu\n> packages depend on Tor, and include a install-time script to setup\n> the hidden service. I've verified with the Tor devs that they would\n> welcome the additional load on the Tor network that Bitcoin would\n> add.\n\nThe easiest way for the people who operates nodes would be to compile\nTor into Bitcoin Core as a library so that it \"just works\" when turned on.\n\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCAAGBQJT8/B9AAoJEMP3uyY4RQ21YbcH/1golU27alo57cfCqjMei6uD\niJ69NMQ6wO4U9r8VX8Rwkd/8IVK+gP4eJNRj4FlUNU0eXFcXj3zaCpnHnO30OEPV\ntdx/dyd/sq/gn5WL3m29MsP5ZVX8pIIH8aQ6jjLWC0SsE6KUJeK6f48o/XST4kMn\na5w1YkUW1Mo/1lLmIlTnmapNrMYq1VppOi0F8AaRgMjTkoX/aGOgu6yIlGJXjAbA\nE8zlIvmLBcMq3aGNrlpE5WJBG1UQr84GYxjSQ1evL1PsllkxrSH3MODtESLYTMqB\n77ZpGNbm3Ndgxvr03pXhXPGbrug3qX92fbKI42XkSC7n/pWLe5YKUiAukDN4NjU=\n=ttua\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x38450DB5.asc\nType: application/pgp-keys\nSize: 14046 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140820/a3243a2a/attachment.bin>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-08-20T00:57:53",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 19 August 2014 20:49:01 GMT-04:00, Justus Ranvier <justusranvier at riseup.net> wrote:\n>On 08/20/2014 12:16 AM, Peter Todd wrote:\n>> The easiest way to do this would be to make the Debian/Ubuntu\n>> packages depend on Tor, and include a install-time script to setup\n>> the hidden service. I've verified with the Tor devs that they would\n>> welcome the additional load on the Tor network that Bitcoin would\n>> add.\n>\n>The easiest way for the people who operates nodes would be to compile\n>Tor into Bitcoin Core as a library so that it \"just works\" when turned\n>on.\n\nThat library doesn't exist yet to my knowledge, and more importantly, would increase the attack surface of Bitcoin Core. (much like using OpenSSL for straight SSL support would)\n\nAlso, my proposal of adding Tor support to the Debian packages can be implemented in a relatively short install time script; no code changes required.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJT8/KRMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhauiB/9iEvsRYQGt9lFmrtbW\nSBjDt91/v7r3NcI/19aKDNGMaKl61rpzDr1zM3kIBdY3xzFoaYt+LA6O/tZVvaVC\nB9zPlZsh+0ZmbU+Ejxd816DvJVDv8aO6Nt+sLuVkkN/TsBa/WCBhvwJ7ixS65/dY\nWpFV7awzW+E08RETsV826scP+30lsnY5qcADoHWfuaW7HZQArpCsA+b+Amng8Vf6\nmFb5GrxKlvG06w+esLSXMCISS3eMduvfzymfxBxGlgxRAqiYZRbWY3msdRRfWl3e\nlISrnqZoB3G529WVGOn4o5DrzDdSJFcb8k2A/Na2J+pIxAD4Cv9vwYM2KCffbeUB\nPH6x\n=Mw3I\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "xor",
                "date": "2014-08-23T16:17:54",
                "message_text_only": "On Tuesday, August 19, 2014 07:40:39 PM Jeff Garzik wrote:\n> Encryption is of little value if you may deduce the same information\n> by observing packet sizes and timings.\n\nInstead of spawning a discussion whether this aspect is a reason to NOT \nencrypt, you should do the obvious:\n\nFix that as well. X being broken is not a reason for not fixing Y.\nPad the then encrypted packets with random bytes. The fact that they are \nencrypted makes them look like random data already, so the padding will not be \ndistinguishable from the rest.\nAlso, add some random bias to their timing.\n\nAnd besides: It would be nice if everyone could acknowledge that making \nBitcoin as anonymous as possible is a natural desire. People demanding you to \ndo this is bound to happen over and over again until you do it :) So just get \non with it instead of postponing it due to doubts.\n\nThere is Tor, there is Freenet, and there are other anonymous P2P networks, \nand they can help you do get it done - the said problems have been well-known \nthere for quite some time and people have thought about how to solve them.\n\nGreetings,\n\txor, a developer of https://freenetproject.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/3abbef5d/attachment.sig>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-08-23T16:50:30",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 08/23/2014 04:17 PM, xor wrote:\n> On Tuesday, August 19, 2014 07:40:39 PM Jeff Garzik wrote:\n>> Encryption is of little value if you may deduce the same\n>> information by observing packet sizes and timings.\n> \n> Instead of spawning a discussion whether this aspect is a reason to\n> NOT encrypt, you should do the obvious:\n> \n> Fix that as well. X being broken is not a reason for not fixing Y. \n> Pad the then encrypted packets with random bytes. The fact that\n> they are encrypted makes them look like random data already, so the\n> padding will not be distinguishable from the rest. Also, add some\n> random bias to their timing.\n\nThe packet size and timing issue will become less of an issue as the\nnetwork grows anyway.\n\nOne transaction inserted into a 3 transaction-per-second encrypted\nstream is more obvious than the same transaction inserted into a 100\nor 1000 TPS stream.\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCAAGBQJT+MZWAAoJEMP3uyY4RQ21tDoH/0SPYQcUkYJcuDhTkJCFWdyx\nob3H7ITEcqD0UZ3n3QHdxHfCDlP2srL0EcfjbNceRX5inP47jdoGj7uIkY/NRHQ0\n4J2WCIrcu1Bj3ZxXG59PtfUzMjxhMGDMSk5eE+6BjVQILrkxxrqSpVjykfoq5s6Y\nEBdT2Pf4djQ5k2fQ2PX1dTt5iCvFh0ufq3McrYsciRzguRwlelw1W34tPBqGSv0n\nLScgvqYUTGC7otUdA5K/3WBq6SSo7E13hJxiLKQZMQ4CPpSlsiAhI5fuhl0OBljC\nhCtS+eugFmvMICQt0ELds++nnA5WN/Yjx1WIrnLA1EmNiAkS9RSEVMcyab0TtdI=\n=0sjO\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x38450DB5.asc\nType: application/pgp-keys\nSize: 14046 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/61589972/attachment.bin>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-08-23T17:50:38",
                "message_text_only": "On Sat, Aug 23, 2014 at 04:50:30PM +0000, Justus Ranvier wrote:\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n> \n> On 08/23/2014 04:17 PM, xor wrote:\n> > On Tuesday, August 19, 2014 07:40:39 PM Jeff Garzik wrote:\n> >> Encryption is of little value if you may deduce the same\n> >> information by observing packet sizes and timings.\n> > \n> > Instead of spawning a discussion whether this aspect is a reason to\n> > NOT encrypt, you should do the obvious:\n> > \n> > Fix that as well. X being broken is not a reason for not fixing Y. \n> > Pad the then encrypted packets with random bytes. The fact that\n> > they are encrypted makes them look like random data already, so the\n> > padding will not be distinguishable from the rest. Also, add some\n> > random bias to their timing.\n> \n> The packet size and timing issue will become less of an issue as the\n> network grows anyway.\n> \n> One transaction inserted into a 3 transaction-per-second encrypted\n> stream is more obvious than the same transaction inserted into a 100\n> or 1000 TPS stream.\n\nThe requirement for anonymity and privacy is lawyers and a Bitlicense.\n\nIf you want privacy and anonymity, then do high-frequency trading on\na centralized exchange, and if you want to go over-the-top, run some\narbitrage bots as well, and hide in the millions of transactions per\nsecond that go on.\n\nBut make sure you get a Bitlicense and have a good securities lawyer.\n\nTrying to solve a legal/legislative/social problem with more crypto is\nonly going to serve the people who created the legal/legislative/social\nproblem in the first place, because they can hire a hacker who will \nfind a misplaced (} in your crypto code, and all the work you did to\nencrypt wire protocols becomes silently worthless."
            },
            {
                "author": "William Yager",
                "date": "2014-08-23T18:22:27",
                "message_text_only": "On Sat, Aug 23, 2014 at 12:50 PM, Troy Benjegerdes <hozer at hozed.org> wrote:\n\n>  they can hire a hacker who will\n> find a misplaced (} in your crypto code, and all the work you did to\n> encrypt wire protocols becomes silently worthless.\n>\n\nNot to mention encrypting basically non-sensitive inter-node traffic is\nalmost completely worthless in providing anonymity anyway...\n\nSeriously, I have not heard a strong justification for this proposal yet. I\nhave heard some people talking about Tor-ifying communications, but that is\na completely different issue and should not be confused with just\n\"encrypting bitcoin messages\".\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/bb85aa06/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-08-23T18:44:15",
                "message_text_only": ">\n> Not to mention encrypting basically non-sensitive inter-node traffic is\n> almost completely worthless in providing anonymity anyway...\n>\n\nRecall that P2P connections carry Bloom filters too, which are not public\ninformation.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/3cfc9671/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2014-08-23T19:02:55",
                "message_text_only": "On Saturday, August 23, 2014 6:44:15 PM Mike Hearn wrote:\n> > Not to mention encrypting basically non-sensitive inter-node traffic is\n> > almost completely worthless in providing anonymity anyway...\n> \n> Recall that P2P connections carry Bloom filters too, which are not public\n> information.\n\nAs soon as you tell it to an unknown/public peer, it is public information."
            },
            {
                "author": "Peter Todd",
                "date": "2014-08-23T22:51:38",
                "message_text_only": "On Sat, Aug 23, 2014 at 07:02:55PM +0000, Luke Dashjr wrote:\n> On Saturday, August 23, 2014 6:44:15 PM Mike Hearn wrote:\n> > > Not to mention encrypting basically non-sensitive inter-node traffic is\n> > > almost completely worthless in providing anonymity anyway...\n> > \n> > Recall that P2P connections carry Bloom filters too, which are not public\n> > information.\n> \n> As soon as you tell it to an unknown/public peer, it is public information.\n\nMike is correct here: It *might* be public information, and probably\nwon't be. We already can give weak assurance that it probably won't be\nagainst many weaker attackers, simply because getting lots of IP\naddresses is moderately expensive, and in the future additional methods\nwill be developed and deployed.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000239344fc532bbad8a679e3fc30e8900772523a10c4720a0c\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/e395fd7f/attachment.sig>"
            },
            {
                "author": "Un Ix",
                "date": "2014-08-20T03:23:49",
                "message_text_only": "Excuse the ignorance, but there is something I\u2019m not getting in this discussion.\n\n\nGiven it\u2019s a published protocol, with available source code running on an open P2P network, why would any messages between nodes benefit from being encrypted? Surely all the data being processed by the network is known to any persistent client node(s)? \n\n\nSeems like that solution is orthogonal to the root problem, where attackers could monitor the network and deduce IP addresses by e.g. mapping senders of transactions.\n\n  \n\n\n\nFrom: Peter Todd\nSent: \u200eWednesday\u200e, \u200eAugust\u200e \u200e20\u200e, \u200e2014 \u200e9\u200e:\u200e28\u200e \u200eAM\nTo: William Yager, bitcoin-development at lists.sourceforge.net\n\n\n\n\n\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 19 August 2014 21:19:43 GMT-04:00, William Yager <will.yager at gmail.com> wrote:\n>On Tue, Aug 19, 2014 at 8:14 PM, Peter Todd <pete at petertodd.org> wrote:\n>> In any case, my suggestion of enabling hidden service support by\n>default\n>> adds both encryption and reasonably good authentication.\n>\n>\n>Enabling hidden service support by default would introduce an insanely\n>huge\n>attack surface.\n\nHence my suggestion of separating that surface by using the standalone Tor binary, which runs under a different user to the Bitcoin Core binary.\n\n>And you're conflating two different things; using Tor is valuable to\n>Bitcoin because it would provide some anonymity. The encryption aspect\n>is\n>pretty much useless for us.\n\nFirst of all, without encryption we're leaking significant amounts of information to any passive attacker trying to trace the origin of Bitcoin transactions, a significant privacy risk.\n\nSecondly the upcoming v0.10's fee estimation implementation is quite vulnerable to Sybil attacks. Authentication and encryption are needed to make it secure from ISP-level targeting to ensure that your view of the network is representative. Tor support used in parallel with native connection is ideal here, as neither the Tor network nor your ISP alone can Sybil attack you. It's notable that Bitcoinj has already implemented Tor support for these same reasons.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJT8/mSMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhRZjCAC4PSpQ68qgtFMR77xf\nzXZLr/iMKX6yyJwXRj+vGi+0Ng/sv9NlYjYnDeflom37WlpGo/sCOFcVWImhnS2d\nkUFoUH92iXwRuEt/SN/LrHghkLWOxtVu9wa49eS/piGZFF3JWllk82MgdBZ6vjNw\nB6WuInEIurK+h8rUbAi2HjFkxVN0K0SsrFt/P0tHj10ABcMealBRoJh2Jx7fLNdS\nuTKddqeLyThEpLGNti3k+lhwQ2dA5RUBq6q3GUS/hWvTHRnU+viGMJSYv62LXRN5\nt87BXRY/R9UBpnudf3TIlPtOuIWcv2LhlXVjvbDDQqwJkvB3Qf4ejE3RZ28S5IUr\nOBQH\n=Gy7X\n-----END PGP SIGNATURE-----\n\n\n------------------------------------------------------------------------------\nSlashdot TV.  \nVideo for Nerds.  Stuff that matters.\nhttp://tv.slashdot.org/\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140820/7c07c29c/attachment.html>"
            },
            {
                "author": "Cameron Garnham",
                "date": "2014-08-20T05:40:49",
                "message_text_only": "We should aim to use perfect forward secrecy between all nodes by default.\n\nThis forces the attacker to do a MITM attack that is far more expensive on\nthe large scale.\n\nI don't see why this is seen as so controversial.  It is relatively cheap\nto implement on our side,  and has a dramatic increase of cost for any\nattackers.\n\nCam.\nOn 20/08/2014 5:49 am, \"Un Ix\" <slashdevnull at hotmail.com> wrote:\n\n>  Excuse the ignorance, but there is something I\u2019m not getting in this\n> discussion.\n>\n> Given it\u2019s a published protocol, with available source code running on an\n> open P2P network, why would any messages between nodes benefit from being\n> encrypted? Surely all the data being processed by the network is known to\n> any persistent client node(s)?\n>\n> Seems like that solution is orthogonal to the root problem, where\n> attackers could monitor the network and deduce IP addresses by e.g. mapping\n> senders of transactions.\n>\n> *From:* Peter Todd <pete at petertodd.org>\n> *Sent:* \u200eWednesday\u200e, \u200eAugust\u200e \u200e20\u200e, \u200e2014 \u200e9\u200e:\u200e28\u200e \u200eAM\n> *To:* William Yager <will.yager at gmail.com>,\n> bitcoin-development at lists.sourceforge.net\n>\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n>\n>\n> On 19 August 2014 21:19:43 GMT-04:00, William Yager <will.yager at gmail.com>\n> wrote:\n> >On Tue, Aug 19, 2014 at 8:14 PM, Peter Todd <pete at petertodd.org> wrote:\n> >> In any case, my suggestion of enabling hidden service support by\n> >default\n> >> adds both encryption and reasonably good authentication.\n> >\n> >\n> >Enabling hidden service support by default would introduce an insanely\n> >huge\n> >attack surface.\n>\n> Hence my suggestion of separating that surface by using the standalone Tor\n> binary, which runs under a different user to the Bitcoin Core binary.\n>\n> >And you're conflating two different things; using Tor is valuable to\n> >Bitcoin because it would provide some anonymity. The encryption aspect\n> >is\n> >pretty much useless for us.\n>\n> First of all, without encryption we're leaking significant amounts of\n> information to any passive attacker trying to trace the origin of Bitcoin\n> transactions, a significant privacy risk.\n>\n> Secondly the upcoming v0.10's fee estimation implementation is quite\n> vulnerable to Sybil attacks. Authentication and encryption are needed to\n> make it secure from ISP-level targeting to ensure that your view of the\n> network is representative. Tor support used in parallel with native\n> connection is ideal here, as neither the Tor network nor your ISP alone can\n> Sybil attack you. It's notable that Bitcoinj has already implemented Tor\n> support for these same reasons.\n> -----BEGIN PGP SIGNATURE-----\n> Version: APG v1.1.1\n>\n> iQFQBAEBCAA6BQJT8/mSMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\n> cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhRZjCAC4PSpQ68qgtFMR77xf\n> zXZLr/iMKX6yyJwXRj+vGi+0Ng/sv9NlYjYnDeflom37WlpGo/sCOFcVWImhnS2d\n> kUFoUH92iXwRuEt/SN/LrHghkLWOxtVu9wa49eS/piGZFF3JWllk82MgdBZ6vjNw\n> B6WuInEIurK+h8rUbAi2HjFkxVN0K0SsrFt/P0tHj10ABcMealBRoJh2Jx7fLNdS\n> uTKddqeLyThEpLGNti3k+lhwQ2dA5RUBq6q3GUS/hWvTHRnU+viGMJSYv62LXRN5\n> t87BXRY/R9UBpnudf3TIlPtOuIWcv2LhlXVjvbDDQqwJkvB3Qf4ejE3RZ28S5IUr\n> OBQH\n> =Gy7X\n> -----END PGP SIGNATURE-----\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Slashdot TV.\n> Video for Nerds.  Stuff that matters.\n> http://tv.slashdot.org/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> ------------------------------------------------------------------------------\n> Slashdot TV.\n> Video for Nerds.  Stuff that matters.\n> http://tv.slashdot.org/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140820/633971c4/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-08-20T14:37:24",
                "message_text_only": "I would be very happy if we upgraded the P2P protocol with MAC keys and a\nsimple home grown encryption layer, because:\n\n   1. It's practically guaranteed that 5-eyes intelligence agencies are\n   either systematically deanonymising Bitcoin users already (linking\n   transactions to real world identities) or close to succeeding. Peter is\n   correct. Given the way their infrastructure works, encrypting link level\n   traffic would significantly raise the bar to such attacks. Quite possibly\n   to the level where it's deemed unprofitable to continue.\n\n   2. Tor is not a complete solution. The most interesting links to monitor\n   are those from SPV clients connecting to Core nodes. Whilst Java SPV\n   clients have the nice option of an easy bundled Tor client (er, once we fix\n   the last bugs) clients that are not based on bitcoinj would have to use the\n   full-blown Tor client, which is not only a PITA to bundle as Tor is not at\n   all library-fied, but is a giant pile of C which is almost certainly\n   exploitable. Even if it runs in a separate address space, for many\n   platforms this is insufficient as a compromised Tor client could then go\n   ahead and compromise your wallet app too.\n\nImplementing a full Tor client is not a reasonable thing to ask of a wallet\ndeveloper, but doing HMAC checks and a simple ECDH exchange + AES would be\nquite realistic.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140820/d2763572/attachment.html>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-08-23T06:39:06",
                "message_text_only": "I think it's a little disingenuous to talk about encrypting the P2P protocol\nas a security improvement, when all the organized crime agencies need to do is\nborrow a Fedex/UPS truck and deliver some laptops to Github employees and they\ncan insert whatever monitoring/0-day they want.\n\nEncryption is complicated stuff to actually **get right**, and the more stuff\nyou throw crypto around, the more likely it is you'll get a Heartbleed 0-day\n\nIf you want to increase security, make it simpler. I'm not even sure it can\nbe easily simplified... how could you separate the P2P network transport from\nthe core blockchain functionality?\n\nOn Wed, Aug 20, 2014 at 04:37:24PM +0200, Mike Hearn wrote:\n> I would be very happy if we upgraded the P2P protocol with MAC keys and a\n> simple home grown encryption layer, because:\n> \n>    1. It's practically guaranteed that 5-eyes intelligence agencies are\n>    either systematically deanonymising Bitcoin users already (linking\n>    transactions to real world identities) or close to succeeding. Peter is\n>    correct. Given the way their infrastructure works, encrypting link level\n>    traffic would significantly raise the bar to such attacks. Quite possibly\n>    to the level where it's deemed unprofitable to continue.\n> \n>    2. Tor is not a complete solution. The most interesting links to monitor\n>    are those from SPV clients connecting to Core nodes. Whilst Java SPV\n>    clients have the nice option of an easy bundled Tor client (er, once we fix\n>    the last bugs) clients that are not based on bitcoinj would have to use the\n>    full-blown Tor client, which is not only a PITA to bundle as Tor is not at\n>    all library-fied, but is a giant pile of C which is almost certainly\n>    exploitable. Even if it runs in a separate address space, for many\n>    platforms this is insufficient as a compromised Tor client could then go\n>    ahead and compromise your wallet app too.\n> \n> Implementing a full Tor client is not a reasonable thing to ask of a wallet\n> developer, but doing HMAC checks and a simple ECDH exchange + AES would be\n> quite realistic.\n\n> ------------------------------------------------------------------------------\n> Slashdot TV.  \n> Video for Nerds.  Stuff that matters.\n> http://tv.slashdot.org/\n\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            }
        ],
        "thread_summary": {
            "title": "Proposal: Encrypt bitcoin messages",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Troy Benjegerdes",
                "William Yager",
                "Mike Hearn",
                "xor",
                "Peter Todd",
                "Angel Leon",
                "Un Ix",
                "Ra\u00fal Mart\u00ednez",
                "Christophe Biocca",
                "Richard Moore",
                "Gregory Maxwell",
                "Johnathan Corgan",
                "J Ross Nicoll",
                "Luke Dashjr",
                "Cameron Garnham",
                "Justus Ranvier"
            ],
            "messages_count": 32,
            "total_messages_chars_count": 54173
        }
    },
    {
        "title": "[Bitcoin-development] Reconsidering github",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2014-08-19T12:02:37",
                "message_text_only": "It would be nice if the issues and git repo for Bitcoin Core were not\non such a centralized service as github, nice and convenient as it is.\n\nTo that end, I note that Linux does its own git repo, and now requires\n2FA: http://www.linux.com/news/featured-blogs/203-konstantin-ryabitsev/784544-linux-kernel-git-repositories-add-2-factor-authentication\n\nAs a first step, one possibility is putting the primary repo on\nbitcoin.org somewhere, and simply mirroring that to github for each\npush.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "D\u0101vis Mos\u0101ns",
                "date": "2014-08-19T12:28:01",
                "message_text_only": "There's actually a pretty good alternative - GitLab\n<https://about.gitlab.com/> it's open source, self-hosted and provides\nsimilar features to GitHub\n\n\n2014-08-19 15:02 GMT+03:00 Jeff Garzik <jgarzik at bitpay.com>:\n\n> It would be nice if the issues and git repo for Bitcoin Core were not\n> on such a centralized service as github, nice and convenient as it is.\n>\n> To that end, I note that Linux does its own git repo, and now requires\n> 2FA:\n> http://www.linux.com/news/featured-blogs/203-konstantin-ryabitsev/784544-linux-kernel-git-repositories-add-2-factor-authentication\n>\n> As a first step, one possibility is putting the primary repo on\n> bitcoin.org somewhere, and simply mirroring that to github for each\n> push.\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/c399f71c/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-08-19T14:58:48",
                "message_text_only": "On Tue, Aug 19, 2014 at 2:02 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> It would be nice if the issues and git repo for Bitcoin Core were not\n> on such a centralized service as github, nice and convenient as it is.\n\nDespite my complaining about github, I don't like the idea of moving\nsomewhere else. The current way of working - to use github for storing\nthe tree, and use a custom script for signing+merging - is fine with\nme.\n\nGithub has a low barrier to contribution. Almost every open source\ndeveloper already has a github account. Switching to something\nself-hosted makes it more difficult for people to contribute.\n\nPlus if we have to take the hosting upon ourselves, we have to handle\nsysadmin work ourselves as well. That's not a good use of the limited\nmanpower available.\n\nAlso it will be a lot of work to migrate over all the current issues\nand pulls. I don't look forward to that. I don't see the point of\nthis, sorry.\n\nWladimir"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-08-20T01:26:23",
                "message_text_only": "On Tue, Aug 19, 2014 at 04:58:48PM +0200, Wladimir wrote:\n> On Tue, Aug 19, 2014 at 2:02 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> > It would be nice if the issues and git repo for Bitcoin Core were not\n> > on such a centralized service as github, nice and convenient as it is.\n> \n> Despite my complaining about github, I don't like the idea of moving\n> somewhere else. The current way of working - to use github for storing\n> the tree, and use a custom script for signing+merging - is fine with\n> me.\n> \n> Github has a low barrier to contribution. Almost every open source\n> developer already has a github account. Switching to something\n> self-hosted makes it more difficult for people to contribute.\n> \n> Plus if we have to take the hosting upon ourselves, we have to handle\n> sysadmin work ourselves as well. That's not a good use of the limited\n> manpower available.\n> \n> Also it will be a lot of work to migrate over all the current issues\n> and pulls. I don't look forward to that. I don't see the point of\n> this, sorry.\n> \n> Wladimir\n\nIf a project cannot be organized enough to run its own hosting/web presense/\ncounterintelligence/security that starts with installing an OS and patching\nkernels, then it is really not wise for me to trust my financial future to\nsoftware written by such a group.\n\nThere is a great deal of 'work' that is really quite pointless, particularly\nin regards to claims I see about security that are irrelevant unless you \nhave the understanding that comes from operating and running your own \nservers. \n\nThis includes running DDOS protection, so no cloudflare.\n\nIf bitcoin wants to become irrelevant, then by all means, continue to \ndepend on github and all the unknown attack surface it exposes.\n\nThose of us that do run our own servers will migrate to higher quality \nalternatives.\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-08-20T01:34:39",
                "message_text_only": "On Tue, Aug 19, 2014 at 6:26 PM, Troy Benjegerdes <hozer at hozed.org> wrote:\n> If a project cannot be organized enough to run its own hosting/web presense/\n> counterintelligence/security that starts with installing an OS and patching\n> kernels, then it is really not wise for me to trust my financial future to\n> software written by such a group.\n\nPlease take the hyperbole elsewhere. Good dialog it's going to happen\nwith the insults and adhomenem.\n\nRegardless of where the repositories live their integrity is protected\nby digital signatures and cryptographic hashes. Running them elsewhere\ncan be virtuous for other reasons, but it doesn't play much into this\nsince the same tools must be used to guarantee their security."
            },
            {
                "author": "Wladimir",
                "date": "2014-08-20T06:24:33",
                "message_text_only": "On Wed, Aug 20, 2014 at 3:26 AM, Troy Benjegerdes <hozer at hozed.org> wrote:\n\n> If bitcoin wants to become irrelevant, then by all means, continue to\n> depend on github and all the unknown attack surface it exposes.\n>\n> Those of us that do run our own servers will migrate to higher quality\n> alternatives.\n\nSo that means you're volunteering to run a web-accessible mirror of\nthe bitcoin repositories?\n\nWladimir"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-08-20T14:16:11",
                "message_text_only": "If github were to be abandoned for anything, it'd make sense to move code\nreview and bug tracking elsewhere. GitHub does a reasonably good job of\nhosting git repositories. It kind of sucks at code review and the issue\ntracker is rudimentary at best. These days you can do \"log in with my\ngithub account\" so if done well, it'd not have to be very painful.\n\nJetBrains make great stuff and they have a code review and repository\nexploration tool called Upsource in development, which should come out\nsoon. I think it's proprietary but that would be no different to github,\nand it's designed for self hosting.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140820/1f71afc0/attachment.html>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-08-23T05:59:58",
                "message_text_only": "Gerrit is free if you can afford the admin(s) to maintain it.\n\nhttp://code.google.com/p/gerrit/wiki/ShowCases\n\nAnd yes, I'm volunteering to get paid to be the admin, especially if you\nwant a 'painless' log in with a github account feature, because it will\nbe very painful for me to unroll the damage if github is compromised.\n\nMy preference would be that we use the same ECDSA keys we secure our\nbitcoins with to secure our access to the code review and source \ncontrol systems.\n\nOn Wed, Aug 20, 2014 at 04:16:11PM +0200, Mike Hearn wrote:\n> If github were to be abandoned for anything, it'd make sense to move code\n> review and bug tracking elsewhere. GitHub does a reasonably good job of\n> hosting git repositories. It kind of sucks at code review and the issue\n> tracker is rudimentary at best. These days you can do \"log in with my\n> github account\" so if done well, it'd not have to be very painful.\n> \n> JetBrains make great stuff and they have a code review and repository\n> exploration tool called Upsource in development, which should come out\n> soon. I think it's proprietary but that would be no different to github,\n> and it's designed for self hosting.\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-08-23T05:53:12",
                "message_text_only": "On Wed, Aug 20, 2014 at 08:24:33AM +0200, Wladimir wrote:\n> On Wed, Aug 20, 2014 at 3:26 AM, Troy Benjegerdes <hozer at hozed.org> wrote:\n> \n> > If bitcoin wants to become irrelevant, then by all means, continue to\n> > depend on github and all the unknown attack surface it exposes.\n> >\n> > Those of us that do run our own servers will migrate to higher quality\n> > alternatives.\n> \n> So that means you're volunteering to run a web-accessible mirror of\n> the bitcoin repositories?\n> \n> Wladimir\n\nhttp://bitspjoule.org/hg/upstream/bitcoin\n\nI guess I should update it more than every 6 months and then the updates\nwon't take so long. It would also go a lot faster if I had a couple of \ndedicated servers, but that won't happen until I sell someone a support\ncontract for crypto-commodities trading. I figure a bitcoin a month should\nsupport the hardware, 24x7 monitoring, and maybe a couple of full nodes\nrunning on the servers as well.\n\nAnd to pick up from another comment on this thread if you don't understand\nsome of the differences between git and mercurial, or how to set up servers\nthat pull from git and mirror to mercurial, you will have a lot harder time\ntracking down and removing malicous code that could get injected if someone\ngets root on a Github server.\n\nIt is also a very usefull excercise in distributed systems design to \nunderstand how distributed revision control systems in theory converge to a\ncoherent global state, and what is similiar or different to Bitcoin's \nglobal consensus model of what the balance of every bitcoin address is."
            },
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2014-08-30T03:33:52",
                "message_text_only": "> On Tue, Aug 19, 2014 at 2:02 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>> It would be nice if the issues and git repo for Bitcoin Core were not\n>> on such a centralized service as github, nice and convenient as it is.\n>\n> Despite my complaining about github, I don't like the idea of moving\n> somewhere else. The current way of working - to use github for storing\n> the tree, and use a custom script for signing+merging - is fine with\n> me.\n>\n> Github has a low barrier to contribution. Almost every open source\n> developer already has a github account. Switching to something\n> self-hosted makes it more difficult for people to contribute.\n>\n> Plus if we have to take the hosting upon ourselves, we have to handle\n> sysadmin work ourselves as well. That's not a good use of the limited\n> manpower available.\n>\n> Also it will be a lot of work to migrate over all the current issues\n> and pulls. I don't look forward to that. I don't see the point of\n> this, sorry.\n>\n> Wladimir\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\nI agree with Wladimir, keep it simple.  There being many other more urgent\nquestions to address, imho."
            },
            {
                "author": "Bryan Bishop",
                "date": "2014-08-19T15:44:55",
                "message_text_only": "On Tue, Aug 19, 2014 at 7:02 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> As a first step, one possibility is putting the primary repo on\n> bitcoin.org somewhere, and simply mirroring that to github for each\n> push.\n\nSmaller first step would be to mirror the git repository on\nbitcoin.org, which is necessary anyway before switching primaries.\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507"
            },
            {
                "author": "Angel Leon",
                "date": "2014-08-19T17:04:05",
                "message_text_only": "-1\n\nhttp://twitter.com/gubatron\n\n\nOn Tue, Aug 19, 2014 at 11:44 AM, Bryan Bishop <kanzure at gmail.com> wrote:\n\n> On Tue, Aug 19, 2014 at 7:02 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> > As a first step, one possibility is putting the primary repo on\n> > bitcoin.org somewhere, and simply mirroring that to github for each\n> > push.\n>\n> Smaller first step would be to mirror the git repository on\n> bitcoin.org, which is necessary anyway before switching primaries.\n>\n> - Bryan\n> http://heybryan.org/\n> 1 512 203 0507\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/118a53b7/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-08-19T18:54:38",
                "message_text_only": "On Tue, Aug 19, 2014 at 5:02 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> It would be nice if the issues and git repo for Bitcoin Core were not\n> on such a centralized service as github, nice and convenient as it is.\n>\n> To that end, I note that Linux does its own git repo, and now requires\n> 2FA: http://www.linux.com/news/featured-blogs/203-konstantin-ryabitsev/784544-linux-kernel-git-repositories-add-2-factor-authentication\n>\n> As a first step, one possibility is putting the primary repo on\n> bitcoin.org somewhere, and simply mirroring that to github for each\n> push.\n\nThe obvious thing to do is setup the second repository and get it\ngoing. Git doesn't really care all that much whats \"primary\".  If we\nhave a working workflow elsewhere then making a change won't be a leap\nof faith."
            },
            {
                "author": "xor",
                "date": "2014-08-22T19:20:11",
                "message_text_only": "On Tuesday, August 19, 2014 08:02:37 AM Jeff Garzik wrote:\n> It would be nice if the issues and git repo for Bitcoin Core were not\n> on such a centralized service as github, nice and convenient as it is.\n\nAssuming there is a problem with that usually is caused by using Git the wrong \nway or not knowing its capabilities. Nobody can modify / insert a commit \nbefore a GnuPG signed commit / tag without breaking the signature.\nMore detail at the bottom at [1], I am sparing you this here because I suspect \nyou already know it and there is something more important I want to stress:\n\nBitcoin has currently 4132 forks on Github. This means that you can get \ncontributions by pull requests from 4132 developers. That is a HUGE amount, \nand you shouldn't ditch that due to not using all features of git :)\nTo get a grasp of how much that is: When you search projects with more than \n4100 forks, there are only 32 of them!\nYou are one of the top open source projects, and you should be grateful for \nthat and keep Github up so the other people can send you pull requests with \ntheir improvements :) Volunteer contributions need to be honored and made as \neasy as possible, for people are investing their personal time.\n\nGreetings and thanks for your work,\n\txor, one developer of https://freenetproject.org\n\n\n[1] If you GPG-sign a commit / tag, you sign its hash, including the hash of \nthe previous commit. So is a chain of hashes and thus of trust from all \ncommits up to what is signed. It's pretty similar to the blockchain actually \n:) \nSo Github cannot modify anything. If they did,  the head of the hash-chain \nwould change, and thus the signature would break. Git would notify people \nabout that when they pull. \nOf course people can still ignore that warning and let Github rewrite their \nGit history. But people who aren't educated about this shouldn't be release \nmanagers. They should not even have push access to your main repository, they \nshould only be sending pull requests. Thats is where the decentralization of \nGit is: In the pull-requests. The people who deal with them should verify tag \nand possibly even commit signatures carefully, and not accept anything which \nis not signed. Also, before deploying a binary, the very same commit which is \ngoing to become a binary has to be given a signed tag by the release manager, \nand by everyone who reviews the code. The person who deploys the actual binary \nneeds to verify that signature.\nThere is an article which elaborates on some of the ways you have to ensure \nGithub doesn't insert malicious code - but please read it with care, some of \nits recommendations are bad, especially the part where its about rebasing \nbecause that DOES rewrite history which is what you want to prevent:\nhttp://mikegerwitz.com/papers/git-horror-story\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140822/5f63b114/attachment.sig>"
            },
            {
                "author": "Angel Leon",
                "date": "2014-08-22T19:31:43",
                "message_text_only": "+1000. Don't fix it if it ain't broken. Don't kill community support. I for\ninstance wouldn't have contributed or forked if the project hadn't been on\ngithub.\n\n\"Bitcoin has currently 4132 forks on Github. This means that you can get\ncontributions by pull requests from 4132 developers. That is a HUGE amount,\nand you shouldn't ditch that due to not using all features of git :)\nTo get a grasp of how much that is: When you search projects with more than\n4100 forks, there are only 32 of them!\nYou are one of the top open source projects, and you should be grateful for\nthat and keep Github up so the other people can send you pull requests with\ntheir improvements :) Volunteer contributions need to be honored and made as\neasy as possible, for people are investing their personal time.\n\nGreetings and thanks for your work,\n        xor, one developer of https://freenetproject.org\"\n\nhttp://twitter.com/gubatron\n\n\nOn Fri, Aug 22, 2014 at 3:20 PM, xor <xor at freenetproject.org> wrote:\n\n> On Tuesday, August 19, 2014 08:02:37 AM Jeff Garzik wrote:\n> > It would be nice if the issues and git repo for Bitcoin Core were not\n> > on such a centralized service as github, nice and convenient as it is.\n>\n> Assuming there is a problem with that usually is caused by using Git the\n> wrong\n> way or not knowing its capabilities. Nobody can modify / insert a commit\n> before a GnuPG signed commit / tag without breaking the signature.\n> More detail at the bottom at [1], I am sparing you this here because I\n> suspect\n> you already know it and there is something more important I want to stress:\n>\n> Bitcoin has currently 4132 forks on Github. This means that you can get\n> contributions by pull requests from 4132 developers. That is a HUGE amount,\n> and you shouldn't ditch that due to not using all features of git :)\n> To get a grasp of how much that is: When you search projects with more than\n> 4100 forks, there are only 32 of them!\n> You are one of the top open source projects, and you should be grateful for\n> that and keep Github up so the other people can send you pull requests with\n> their improvements :) Volunteer contributions need to be honored and made\n> as\n> easy as possible, for people are investing their personal time.\n>\n> Greetings and thanks for your work,\n>         xor, one developer of https://freenetproject.org\n>\n>\n> [1] If you GPG-sign a commit / tag, you sign its hash, including the hash\n> of\n> the previous commit. So is a chain of hashes and thus of trust from all\n> commits up to what is signed. It's pretty similar to the blockchain\n> actually\n> :)\n> So Github cannot modify anything. If they did,  the head of the hash-chain\n> would change, and thus the signature would break. Git would notify people\n> about that when they pull.\n> Of course people can still ignore that warning and let Github rewrite their\n> Git history. But people who aren't educated about this shouldn't be release\n> managers. They should not even have push access to your main repository,\n> they\n> should only be sending pull requests. Thats is where the decentralization\n> of\n> Git is: In the pull-requests. The people who deal with them should verify\n> tag\n> and possibly even commit signatures carefully, and not accept anything\n> which\n> is not signed. Also, before deploying a binary, the very same commit which\n> is\n> going to become a binary has to be given a signed tag by the release\n> manager,\n> and by everyone who reviews the code. The person who deploys the actual\n> binary\n> needs to verify that signature.\n> There is an article which elaborates on some of the ways you have to ensure\n> Github doesn't insert malicious code - but please read it with care, some\n> of\n> its recommendations are bad, especially the part where its about rebasing\n> because that DOES rewrite history which is what you want to prevent:\n> http://mikegerwitz.com/papers/git-horror-story\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Slashdot TV.\n> Video for Nerds.  Stuff that matters.\n> http://tv.slashdot.org/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140822/b5746cb2/attachment.html>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-08-23T06:17:01",
                "message_text_only": "On Fri, Aug 22, 2014 at 09:20:11PM +0200, xor wrote:\n> On Tuesday, August 19, 2014 08:02:37 AM Jeff Garzik wrote:\n> > It would be nice if the issues and git repo for Bitcoin Core were not\n> > on such a centralized service as github, nice and convenient as it is.\n> \n> Assuming there is a problem with that usually is caused by using Git the wrong \n> way or not knowing its capabilities. Nobody can modify / insert a commit \n> before a GnuPG signed commit / tag without breaking the signature.\n> More detail at the bottom at [1], I am sparing you this here because I suspect \n> you already know it and there is something more important I want to stress:\n> \n> Bitcoin has currently 4132 forks on Github. This means that you can get \n> contributions by pull requests from 4132 developers. That is a HUGE amount, \n> and you shouldn't ditch that due to not using all features of git :)\n> To get a grasp of how much that is: When you search projects with more than \n> 4100 forks, there are only 32 of them!\n> You are one of the top open source projects, and you should be grateful for \n> that and keep Github up so the other people can send you pull requests with \n> their improvements :) Volunteer contributions need to be honored and made as \n> easy as possible, for people are investing their personal time.\n> \n> Greetings and thanks for your work,\n> \txor, one developer of https://freenetproject.org\n> \n> \n> [1] If you GPG-sign a commit / tag, you sign its hash, including the hash of \n> the previous commit. So is a chain of hashes and thus of trust from all \n> commits up to what is signed. It's pretty similar to the blockchain actually \n> :) \n> So Github cannot modify anything. If they did,  the head of the hash-chain \n> would change, and thus the signature would break. Git would notify people \n> about that when they pull. \n> Of course people can still ignore that warning and let Github rewrite their \n> Git history. But people who aren't educated about this shouldn't be release \n> managers. They should not even have push access to your main repository, they \n> should only be sending pull requests. Thats is where the decentralization of \n> Git is: In the pull-requests. The people who deal with them should verify tag \n> and possibly even commit signatures carefully, and not accept anything which \n> is not signed. Also, before deploying a binary, the very same commit which is \n> going to become a binary has to be given a signed tag by the release manager, \n> and by everyone who reviews the code. The person who deploys the actual binary \n> needs to verify that signature.\n> There is an article which elaborates on some of the ways you have to ensure \n> Github doesn't insert malicious code - but please read it with care, some of \n> its recommendations are bad, especially the part where its about rebasing \n> because that DOES rewrite history which is what you want to prevent:\n> http://mikegerwitz.com/papers/git-horror-story\n> \n> \n\n\nThis is why I clone git to mercurial, which is generally designed around the\nassumption that history is immutable. You can't rewrite blockchain history,\nand we should not be re-writing (rebasing) commit history either.\n\nThe problem with github is it's too tempting to look at the *web page*, which \nis NOT pgp-signed, and hit the 'approve' button when you might have someone\nin the middle approving an unsigned changeset because you're in a hurry to\nget the latest new critical OpenSSL 0day security patch build released.\n\nWe need multiple redundant 'master' repositories run by different people in\ndifferent jurisdictions that get updated on different schedules, and have all\nof these people pay attention to operational security, and not just outsource\nit all to github because it's convenient.\n\n\nThere's no reason to *stop* using github, cause it *is* easy... but you want\nto have multiple review of *the actual code*, not just signatures and see \nif the changes really do make sense.\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-08-23T11:38:09",
                "message_text_only": "On Sat, Aug 23, 2014 at 8:17 AM, Troy Benjegerdes <hozer at hozed.org> wrote:\n> On Fri, Aug 22, 2014 at 09:20:11PM +0200, xor wrote:\n>> On Tuesday, August 19, 2014 08:02:37 AM Jeff Garzik wrote:\n>> > It would be nice if the issues and git repo for Bitcoin Core were not\n>> > on such a centralized service as github, nice and convenient as it is.\n>>\n>> Assuming there is a problem with that usually is caused by using Git the wrong\n>> way or not knowing its capabilities. Nobody can modify / insert a commit\n>> before a GnuPG signed commit / tag without breaking the signature.\n>> More detail at the bottom at [1], I am sparing you this here because I suspect\n>> you already know it and there is something more important I want to stress:\n\nNote that we're generally aiming (though not yet enforcing) to have\nmerges done through the github-merge tool, which performs the merge\nlocally, shows the resulting diff, compares it with the merge done by\ngithub, and GnuPG signs it.\n\nThat allows using github as easy-access mechanism for people to\ncontribute and inspect, while having a higher security standard for\nthe actual changes done to master.\n\n-- \nPieter"
            },
            {
                "author": "Drak",
                "date": "2014-08-23T12:05:17",
                "message_text_only": "On 23 August 2014 12:38, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n\n> That allows using github as easy-access mechanism for people to\n> contribute and inspect, while having a higher security standard for\n> the actual changes done to master.\n\n\nI'd also like to point out the obvious: git uses the previous hash as part\nof the formula to generate the current commit hash thus tampering with\nhistory while possible would be instantly noticed because we all have\ncopies of the repository. Tampering would be completely evident (pushes\nwould fail for a start, and even simple merges would bork). It's just not\npossible to tamper with the repository without it being discovered, even\nwith collusion (or strong arming) of github.\n\nThe social benefits of github make it idea for open source projects that\nwant community participation. The barrier to entry is low. The only \"weak\"\nspot of github is the releases section, but since we don't actually\ndistribute Bitcoin from github the point is moot.\n\nI think github haters fail to see the vast benefits of a social hub like\ngithub. Their issue tracker may not be as sophisticated, it serves well and\nthe project is extremely productive.\n\nDon't shoot yourself in the foot - a move away from github would be a\ndisaster for the project.\n\nWhen you look at the attack surface of using github, it's pretty small and\nwould not go unnoticed, thus nullifying concern.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/de3856a5/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-08-23T15:56:26",
                "message_text_only": ">On Sat, Aug 23, 2014 at 1:38 PM, Pieter Wuille <pieter.wuille at gmail.com> >wrote:\n>\n> Note that we're generally aiming (though not yet enforcing) to have\n> merges done through the github-merge tool, which performs the merge\n> locally, shows the resulting diff, compares it with the merge done by\n> github, and GnuPG signs it.\n\nIndeed. I always use that look at and test and the merges locally\nbefore pushing them. I never use the github merge button.\n\nI'd recommend other people to do so as well - and as can be seen with\n`git log --show-signature` it's common practice.\n\nFor browsing git history locally I find \"gitk\" to be a useful tool.\n\nI'd absolutely encourage for more people to review code changes. Even\nbetter if a few people do this through local tooling instead of the\nweb page. But my gut feeling is that hosting the code on github\nresults in many more eyes on the code overall than would be when\nrequiring *everyone* to use local tools. It's easy to let paranoia get\nin the way of actual effectiveness.\n\nWladimir"
            },
            {
                "author": "Angel Leon",
                "date": "2014-08-23T11:59:04",
                "message_text_only": "I think this is the only project where people are concerened wether commit\nmessages are signed or not.\n\nCommit messages should be merged only upon their correctness, not their\nsignature.\n\nI could care less if I receive a buggy patch that's signed.\n\nhttp://twitter.com/gubatron\n\n\nOn Sat, Aug 23, 2014 at 2:17 AM, Troy Benjegerdes <hozer at hozed.org> wrote:\n\n> On Fri, Aug 22, 2014 at 09:20:11PM +0200, xor wrote:\n> > On Tuesday, August 19, 2014 08:02:37 AM Jeff Garzik wrote:\n> > > It would be nice if the issues and git repo for Bitcoin Core were not\n> > > on such a centralized service as github, nice and convenient as it is.\n> >\n> > Assuming there is a problem with that usually is caused by using Git the\n> wrong\n> > way or not knowing its capabilities. Nobody can modify / insert a commit\n> > before a GnuPG signed commit / tag without breaking the signature.\n> > More detail at the bottom at [1], I am sparing you this here because I\n> suspect\n> > you already know it and there is something more important I want to\n> stress:\n> >\n> > Bitcoin has currently 4132 forks on Github. This means that you can get\n> > contributions by pull requests from 4132 developers. That is a HUGE\n> amount,\n> > and you shouldn't ditch that due to not using all features of git :)\n> > To get a grasp of how much that is: When you search projects with more\n> than\n> > 4100 forks, there are only 32 of them!\n> > You are one of the top open source projects, and you should be grateful\n> for\n> > that and keep Github up so the other people can send you pull requests\n> with\n> > their improvements :) Volunteer contributions need to be honored and\n> made as\n> > easy as possible, for people are investing their personal time.\n> >\n> > Greetings and thanks for your work,\n> >       xor, one developer of https://freenetproject.org\n> >\n> >\n> > [1] If you GPG-sign a commit / tag, you sign its hash, including the\n> hash of\n> > the previous commit. So is a chain of hashes and thus of trust from all\n> > commits up to what is signed. It's pretty similar to the blockchain\n> actually\n> > :)\n> > So Github cannot modify anything. If they did,  the head of the\n> hash-chain\n> > would change, and thus the signature would break. Git would notify people\n> > about that when they pull.\n> > Of course people can still ignore that warning and let Github rewrite\n> their\n> > Git history. But people who aren't educated about this shouldn't be\n> release\n> > managers. They should not even have push access to your main repository,\n> they\n> > should only be sending pull requests. Thats is where the\n> decentralization of\n> > Git is: In the pull-requests. The people who deal with them should\n> verify tag\n> > and possibly even commit signatures carefully, and not accept anything\n> which\n> > is not signed. Also, before deploying a binary, the very same commit\n> which is\n> > going to become a binary has to be given a signed tag by the release\n> manager,\n> > and by everyone who reviews the code. The person who deploys the actual\n> binary\n> > needs to verify that signature.\n> > There is an article which elaborates on some of the ways you have to\n> ensure\n> > Github doesn't insert malicious code - but please read it with care,\n> some of\n> > its recommendations are bad, especially the part where its about rebasing\n> > because that DOES rewrite history which is what you want to prevent:\n> > http://mikegerwitz.com/papers/git-horror-story\n> >\n> >\n>\n>\n> This is why I clone git to mercurial, which is generally designed around\n> the\n> assumption that history is immutable. You can't rewrite blockchain history,\n> and we should not be re-writing (rebasing) commit history either.\n>\n> The problem with github is it's too tempting to look at the *web page*,\n> which\n> is NOT pgp-signed, and hit the 'approve' button when you might have someone\n> in the middle approving an unsigned changeset because you're in a hurry to\n> get the latest new critical OpenSSL 0day security patch build released.\n>\n> We need multiple redundant 'master' repositories run by different people in\n> different jurisdictions that get updated on different schedules, and have\n> all\n> of these people pay attention to operational security, and not just\n> outsource\n> it all to github because it's convenient.\n>\n>\n> There's no reason to *stop* using github, cause it *is* easy... but you\n> want\n> to have multiple review of *the actual code*, not just signatures and see\n> if the changes really do make sense.\n>\n> --\n>\n> ----------------------------------------------------------------------------\n> Troy Benjegerdes                 'da hozer'\n> hozer at hozed.org\n> 7 elements      earth::water::air::fire::mind::spirit::soul\n> grid.coop\n>\n>       Never pick a fight with someone who buys ink by the barrel,\n>          nor try buy a hacker who makes money by the megahash\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Slashdot TV.\n> Video for Nerds.  Stuff that matters.\n> http://tv.slashdot.org/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/03d92c0a/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-08-23T14:32:15",
                "message_text_only": "On Sat, Aug 23, 2014 at 01:17:01AM -0500, Troy Benjegerdes wrote:\n> This is why I clone git to mercurial, which is generally designed around the\n> assumption that history is immutable. You can't rewrite blockchain history,\n> and we should not be re-writing (rebasing) commit history either.\n\nGit commits serve two purposes: recording public history and\ncommunication.  While for the purpose of recording history immutable\ncommits make sense, for the purpose of communicating to other developers\nwhat changes should be added to that history you *do* want the mutable\ncommits that git's rebase functionality supports. Much like how\nuniversity math classes essentially never teach calculus in the order it\nwas developed, it is rare indeed for the way you happened to develop\nsome functionality to be the best sequence of changes for other\ndevelopers to understand why and what is being changed.\n\nAnyway, just because mercurial is designed around the assumption that\ncommit history is immutable doesn't mean it actually is; an attacker can\nfake a series of mercurial commits just as easily as they can git\ncommits. The only thing that protects against history rewriting is\nsigned commits and timestamps.\n\n\n> The problem with github is it's too tempting to look at the *web page*, which \n> is NOT pgp-signed, and hit the 'approve' button when you might have someone\n> in the middle approving an unsigned changeset because you're in a hurry to\n> get the latest new critical OpenSSL 0day security patch build released.\n> \n> We need multiple redundant 'master' repositories run by different people in\n> different jurisdictions that get updated on different schedules, and have all\n> of these people pay attention to operational security, and not just outsource\n> it all to github because it's convenient.\n\nThe easiest and most useful way to achieve that would be to have a\nformal program of code review, perhaps on a per-release basis, that\nreviewed the diffs between the previous release and the new one. Master\nrepos in this scenario are simply copies of the \"master master\" repo\nthat someone has manually verified and signed-off on, with of course a\nPGP signature.\n\nIf you feel like volunteering to maintain one of these repos, you may\nfind my Litecoin v0.8.3.7 audit report to be a useful template:\n\nhttps://bitcointalk.org/index.php?topic=265582.0\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000284b07a00c97e4770dda4dee8b45994440226435ee05ab66\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/a915509b/attachment.sig>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-08-23T17:44:14",
                "message_text_only": "On Sat, Aug 23, 2014 at 10:32:15AM -0400, Peter Todd wrote:\n> On Sat, Aug 23, 2014 at 01:17:01AM -0500, Troy Benjegerdes wrote:\n> > This is why I clone git to mercurial, which is generally designed around the\n> > assumption that history is immutable. You can't rewrite blockchain history,\n> > and we should not be re-writing (rebasing) commit history either.\n> \n> Git commits serve two purposes: recording public history and\n> communication.  While for the purpose of recording history immutable\n> commits make sense, for the purpose of communicating to other developers\n> what changes should be added to that history you *do* want the mutable\n> commits that git's rebase functionality supports. Much like how\n> university math classes essentially never teach calculus in the order it\n> was developed, it is rare indeed for the way you happened to develop\n> some functionality to be the best sequence of changes for other\n> developers to understand why and what is being changed.\n> \n> Anyway, just because mercurial is designed around the assumption that\n> commit history is immutable doesn't mean it actually is; an attacker can\n> fake a series of mercurial commits just as easily as they can git\n> commits. The only thing that protects against history rewriting is\n> signed commits and timestamps.\n\nWhat I would really like is a frontend and/or integration to Git/Mercurial that\nuses Bitcoin transactions *as* the signature, which has the nice side effect of\nproviding timestamps backed by the full faith and credit of a billion dollar\nblockchain. So what is the best way for me to stick both a git *and* a\nmercurial identity hash into a bitcoin transaction?  (which leads to point 2\nbelow)\n \n> \n> > The problem with github is it's too tempting to look at the *web page*, which \n> > is NOT pgp-signed, and hit the 'approve' button when you might have someone\n> > in the middle approving an unsigned changeset because you're in a hurry to\n> > get the latest new critical OpenSSL 0day security patch build released.\n> > \n> > We need multiple redundant 'master' repositories run by different people in\n> > different jurisdictions that get updated on different schedules, and have all\n> > of these people pay attention to operational security, and not just outsource\n> > it all to github because it's convenient.\n> \n> The easiest and most useful way to achieve that would be to have a\n> formal program of code review, perhaps on a per-release basis, that\n> reviewed the diffs between the previous release and the new one. Master\n> repos in this scenario are simply copies of the \"master master\" repo\n> that someone has manually verified and signed-off on, with of course a\n> PGP signature.\n> \n> If you feel like volunteering to maintain one of these repos, you may\n> find my Litecoin v0.8.3.7 audit report to be a useful template:\n> \n> https://bitcointalk.org/index.php?topic=265582.0\n\nI'm not interested in volunteer, I'm interested in getting paid, and the\nbest way I believe I can accomplish that is use *my* bitcoin address in a\nsignature-transaction of the code I've reviewed.\n\nWhat is the advantage of PGP? Far more people have ECDSA public-private \nkeys than PGP keys.\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "Paul Rabahy",
                "date": "2014-08-23T20:36:19",
                "message_text_only": "I want go give a bit of an outsiders perspective. I thoroughly understand\nthe concepts of bitcoin and am a professional programmer, but have never\ntaken the time to compile my own copy of bitcoin core.\n\nI have looked at the pull requests on Github many times. I have cloned the\nrepo to my own computer, but haven't really used that to do much. I find\nGithub very easy to use, and (to me) it has the lowest bar to get more eyes\npassively looking at the code. As a security guy, I appreciate the extra\ntime and effort that goes into signing commits and merges even if I have\nnot personally verified the signatures. I would like to see bitcoin core\ncontinue to use github, but have no objection to additional mirrors of the\nrepo being hosted on different sites.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/7340bc54/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-08-23T20:54:08",
                "message_text_only": "On Sat, Aug 23, 2014 at 1:36 PM, Paul Rabahy <prabahy at gmail.com> wrote:\n> I want go give a bit of an outsiders perspective. I thoroughly understand\n> the concepts of bitcoin and am a professional programmer, but have never\n> taken the time to compile my own copy of bitcoin core.\n>\n> I have looked at the pull requests on Github many times. I have cloned the\n> repo to my own computer, but haven't really used that to do much. I find\n> Github very easy to use, and (to me) it has the lowest bar to get more eyes\n> passively looking at the code. As a security guy, I appreciate the extra\n> time and effort that goes into signing commits and merges even if I have not\n> personally verified the signatures. I would like to see bitcoin core\n> continue to use github, but have no objection to additional mirrors of the\n> repo being hosted on different sites.\n\nNothing suggested here would ever remove the ability to go and explore\nand read the changes just as you're doing so.\n\nAlready the way it works is that our local repositories are\nauthoritative for each of us. (Git itself is a decentralized system\nregardless of github's efforts to make it look otherwise)."
            },
            {
                "author": "Peter Todd",
                "date": "2014-08-23T22:45:22",
                "message_text_only": "On Sat, Aug 23, 2014 at 12:44:14PM -0500, Troy Benjegerdes wrote:\n What I would really like is a frontend and/or integration to Git/Mercurial that\n> uses Bitcoin transactions *as* the signature, which has the nice side effect of\n> providing timestamps backed by the full faith and credit of a billion dollar\n> blockchain. So what is the best way for me to stick both a git *and* a\n> mercurial identity hash into a bitcoin transaction?  (which leads to point 2\n> below)\n\nA \"bitcoin transaction\" can't by itself serve as a signature, as there\nisn't any way to link the transaction to what you actually care about -\na human being - without additional infrastructure. You may find it\nhelpful to reflect back upon your 2nd and 3rd year courses on\npost-modernism and semiotics: Is a keypair in a public key cryptography\nsystem what is being signified, or is it merely a (posssibly false)\nsignifier?\n\nIf you just want to timestamp a git commit you can timestamp it in the\nBitcoin blockchain. I have the code to do so in my python-bitcoinlib:\n\n    examples/timestamp.py <git commit>\n\nTo check timestamps the following should work, although I haven't tried:\n\n    bitcoind searchrawtransactions <git commit>\n\nYou do need the searchrawtransactions patch. I've personally timestamped\nmost of the git tags for releases this way.\n\n> > If you feel like volunteering to maintain one of these repos, you may\n> > find my Litecoin v0.8.3.7 audit report to be a useful template:\n> > \n> > https://bitcointalk.org/index.php?topic=265582.0\n> \n> I'm not interested in volunteer, I'm interested in getting paid, and the\n> best way I believe I can accomplish that is use *my* bitcoin address in a\n> signature-transaction of the code I've reviewed.\n> \n> What is the advantage of PGP? Far more people have ECDSA public-private \n> keys than PGP keys.\n\nPGP of course has vast amounts of identity infrastructure already\ndeveloped for it, infrastructure that simply doesn't exist for \"Bitcoin\naddresses\"\n\nIn any case you'll be happy to know that secp256k1 has been added to the\nGPG development branch, which means you can sign your code with a ECDSA\nkey corresponding to a Bitcoin address if you wish too.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000006fb87cb8ec6e0981b134953f1916c513f7210b534a94b8b\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140823/aafd9a93/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Reconsidering github",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Bryan Bishop",
                "Troy Benjegerdes",
                "Wladimir",
                "D\u0101vis Mos\u0101ns",
                "Odinn Cyberguerrilla",
                "Mike Hearn",
                "xor",
                "Peter Todd",
                "Angel Leon",
                "Gregory Maxwell",
                "Pieter Wuille",
                "Drak",
                "Paul Rabahy"
            ],
            "messages_count": 25,
            "total_messages_chars_count": 45488
        }
    },
    {
        "title": "[Bitcoin-development] BIP43 Purpose code for voting pool HD wallets",
        "thread_messages": [
            {
                "author": "Justus Ranvier",
                "date": "2014-08-19T17:11:30",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nWe'd like to reserve two purpose codes for the HD multisig structure\nthat will be used for the Bitcoin wallets used for voting pools, so\nwe've documented the structure in the form of two BIPs. One is used\nfor the wallets suitable for storing bulk bitcoin deposits, the other\nis used for storing colored coin deposits.\n\nThe primary difference is that bulk deposit wallets use cold storage\nand are allowed to incur significant administrative overhead, where as\ncolored coin wallets do not use cold storage because they must be\ncapable of being generated on the fly.\n\nTwo draft information BIPs are attached.\n\n- -- \nJustus Ranvier                   | Monetas <http://monetas.net/>\n<mailto:justus at monetas.net>      | Public key ID : C3F7BB2638450DB5\n                                 | BM-2cTepVtZ6AyJAs2Y8LpcvZB8KbdaWLwKqc\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCAAGBQJT84VCAAoJEMP3uyY4RQ21LZcH/RYN5dUc5TjOI6Z72I4aNqDL\ncZMzIo1WTK6OHsO2GUo+3L4avf+dCb2om/hDJgoLz/Oh9BMY77vF3UTIPIzGmN9X\n2Oeyjg+wJG9z2L/B1f7oo4MX9c2ppUNfp2x5zDaURvME9CLkY7hLCBWp/OxU1HHb\nMhLn0ICtpw3FnHddVWFwhvBxcCzJm6t2pBlM8mmTr4t52/08gklY1LVdUW0zmf9W\neFe50Y2KQ+uhVZfAga1wmFwY1pJBUmf6fAVqeK6AGDPkLVHDvN8P+mco+Qks++VZ\nmTENKXWAmskGViTjd0pb8EdoSoMsDIa1eRHbpwAbbb2PEoc9pdccgwH6CscgN1I=\n=R/HX\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/3aeeae9a/attachment.html>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/3aeeae9a/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x38450DB5.asc\nType: application/pgp-keys\nSize: 14046 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140819/3aeeae9a/attachment.bin>"
            }
        ],
        "thread_summary": {
            "title": "BIP43 Purpose code for voting pool HD wallets",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Justus Ranvier"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1967
        }
    },
    {
        "title": "[Bitcoin-development] BIP: Custodial Identities",
        "thread_messages": [
            {
                "author": "21 e14",
                "date": "2014-08-20T02:23:34",
                "message_text_only": "As suggested before submitting a BIP, I am sending this to the mailing list.\n\n\nBitcoin is often described as \u201cthe currency of the Internet\u201d, \u201cthe TCP/IP\nof money\u201d, or simply \u201cthe Internet of Money\u201d. What is needed is an optional\nidentity layer \u2014 a Bitcoin Assigned Custodial Identities Authority, much\nlike the Internet Assigned Numbers Authority, to oversee global Custodial\nIdentity allocation. Such an authority delegates Custodial Identity Spaces\nto Regional Bitcoin Custodial Identity Registries, much like the RIRs\n(Regional Internet Registries) managing the allocation of Internet number\nresources.\n\nA Bitcoin Custodial Identity (BCI) account address would consist of a\nCustodial Identifier allocated by the BACIA/RBCIRs (much like a bank\u2019s\nrouting number), and an account address (much like an account number).\nBitcoin Custodial Identities allow dispute resolution in the legal system\nfor transactions in the BCI address space. Free market would drive and\ndetermine the demand for custodial accounts. P2PKH users not affected.\n\n\nFeedback is appreciated.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140820/a4b19f5b/attachment.html>"
            },
            {
                "author": "21E14",
                "date": "2014-08-21T02:32:29",
                "message_text_only": "Thank you for your feedback regarding Custodial Identities. I will address\nit to the mailing list for transparency.\n\nThink of it as a 1-of-2 multisig edge case where Custodian Identities are\nactively managed by the Bitcoin Assigned Custodial Identities\nAuthority/Regional Bitcoin Custodial Identity Registries. Once the optional\nidentity layer is integrated, there are so many applications beyond dispute\nresolution, if you could effortlessly inject Custodian Identities into the\nblockchain itself as easily as providing 1-of-2 public keys.\n\nBitcoin Custodial Identities can be applied to coinbase transactions as\nwell, in any or all jurisdictions, thus providing further incentive to keep\nnodes honest, or enabling a recovery mechanism in catastrophic failure\nevents, such as a break in SHA-256. Custodians provide account addresses\nout of unused address space further alleviating address collisions as a\npsychological barrier to adoption. Custodial to non-custodial transactions\ncould behave much like the UTXO of a coinbase transaction, which has the\nspecial condition that it cannot be spent (used as an input) for at least\n100 blocks. It's based on open market competition, and there will probably\nalways be users willing to live outside of the BCI address space.\n\n\n>>On Tue, Aug 19, 2014 at 10:23 PM, 21E14 <21xe14 at gmail.com> wrote:\n>>\n>>As suggested before submitting a BIP, I am sending this to the mailing\nlist.\n>>\n>>\n>>Bitcoin is often described as \u201cthe currency of the Internet\u201d, \u201cthe TCP/IP\nof money\u201d, or simply \u201cthe Internet of Money\u201d. What is needed is an optional\nidentity layer \u2014 a Bitcoin Assigned Custodial Identities >>Authority, much\nlike the Internet Assigned Numbers Authority, to oversee global Custodial\nIdentity allocation. Such an authority delegates Custodial Identity Spaces\nto Regional Bitcoin Custodial Identity >>Registries, much like the RIRs\n(Regional Internet Registries) managing the allocation of Internet number\nresources.\n>>\n>>A Bitcoin Custodial Identity (BCI) account address would consist of a\nCustodial Identifier allocated by the BACIA/RBCIRs (much like a bank\u2019s\nrouting number), and an account address (much like an account >>number).\nBitcoin Custodial Identities allow dispute resolution in the legal system\nfor transactions in the BCI address space. Free market would drive and\ndetermine the demand for custodial accounts. P2PKH >>users not affected.\n>>\n>>Feedback is appreciated.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140821/03ee65c5/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP: Custodial Identities",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "21E14",
                "21 e14"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3856
        }
    },
    {
        "title": "[Bitcoin-development] standardize on bitcoin signed ecies ?",
        "thread_messages": [
            {
                "author": "Mem Wallet",
                "date": "2014-08-27T00:57:51",
                "message_text_only": "Does anyone see a value in a standardized PGP-style message,\nwhich would allow someone performing a bitcoin transaction to\nsend signed encrypted messages using only public and private\nbitcoin keys ?\n\nI'd like to propose a signed encrypted message protocol, in case\nsomeone see's value in encoding such a thing into a BIP.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140826/e2f07472/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-08-27T01:08:02",
                "message_text_only": "On Tue, Aug 26, 2014 at 5:57 PM, Mem Wallet <memwallet.info at gmail.com> wrote:\n>\n> Does anyone see a value in a standardized PGP-style message,\n> which would allow someone performing a bitcoin transaction to\n> send signed encrypted messages using only public and private\n> bitcoin keys ?\n>\n> I'd like to propose a signed encrypted message protocol, in case\n> someone see's value in encoding such a thing into a BIP.\n\nUsing the same keys for signing and encryption is generally considered\na bad practice, for a number of reasons.\n\nIf the keys aren't the same, there is much less reason to use\nsomething specific to Bitcoin.\n\nGetting all the details right in an encryption implementation is very\ndifficulty, previously published efforts in Bitcoin software have been\n_severely_ flawed and insecure. I am not confident that an effort\nright now would receive adequate review."
            }
        ],
        "thread_summary": {
            "title": "standardize on bitcoin signed ecies ?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gregory Maxwell",
                "Mem Wallet"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1377
        }
    },
    {
        "title": "[Bitcoin-development] [ann] Bitcoin Core 0.9.3 rc1 is available for download",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2014-08-28T14:41:27",
                "message_text_only": "Bitcoin Core version 0.9.3rc1 is now available from:\n\n  https://bitcoin.org/bin/0.9.3/test/\n\nThis is a release candidate (test version) for a new minor version\nrelease, bringing\nonly bug fixes and updated translations.\n\nPlease report bugs using the issue tracker at github:\n\n  https://github.com/bitcoin/bitcoin/issues\n\nUpgrading and downgrading\n==========================\n\nHow to Upgrade\n--------------\n\nIf you are running an older version, shut it down. Wait until it has completely\nshut down (which might take a few minutes for older versions), then run the\ninstaller (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\nbitcoind/bitcoin-qt (on Linux).\n\nIf you are upgrading from version 0.7.2 or earlier, the first time you run\n0.9.3 your blockchain files will be re-indexed, which will take anywhere from\n30 minutes to several hours, depending on the speed of your machine.\n\nDowngrading warnings\n--------------------\n\nThe 'chainstate' for this release is not always compatible with previous\nreleases, so if you run 0.9.x and then decide to switch back to a\n0.8.x release you might get a blockchain validation error when starting the\nold release (due to 'pruned outputs' being omitted from the index of\nunspent transaction outputs).\n\nRunning the old release with the -reindex option will rebuild the chainstate\ndata structures and correct the problem.\n\nAlso, the first time you run a 0.8.x release on a 0.9 wallet it will rescan\nthe blockchain for missing spent coins, which will take a long time (tens\nof minutes on a typical machine).\n\n0.9.3 Release notes\n=======================\n\nRPC:\n- Avoid a segfault on getblock if it can't read a block from disk\n- Add paranoid return value checks in base58\n\nProtocol and network code:\n- Don't poll showmyip.com, it doesn't exist anymore\n- Add a way to limit deserialized string lengths and use it\n- Add a new checkpoint at block 295,000\n- Increase IsStandard() scriptSig length\n- Avoid querying DNS seeds, if we have open connections\n\nWallet:\n- Check redeemScript size does not exceed 520 byte limit\n- Ignore (and warn about) too-long redeemScripts while loading wallet\n\nGUI:\n- fix 'opens in testnet mode when presented with a BIP-72 link with no fallback'\n- AvailableCoins: acquire cs_main mutex\n- Fix unicode character display on MacOSX\n\nMiscellaneous:\n- key.cpp: fail with a friendlier message on missing ssl EC support\n- Remove bignum dependency for scripts\n- Upgrade OpenSSL to 1.0.1i (see\nhttps://www.openssl.org/news/secadv_20140806.txt - just to be sure, no\ncritical issues for Bitcoin Core)\n- Upgrade miniupnpc to 1.9.20140701\n- Fix boost detection in build system on some platforms\n\nCredits\n--------\n\nThanks to everyone who contributed to this release:\n\n- Andrew Poelstra\n- Cory Fields\n- Jeff Garzik\n- Johnathan Corgan\n- Julian Haight\n- Michael Ford\n- Pavel Vasin\n- Peter Todd\n- Pieter Wuille\n- Rose Toomey\n- Ruben Dario Ponticelli\n- Trevin Hofmann\n- Wladimir J. van der Laan\n- Zak Wilcox\n\nAs well as everyone that helped translating on\n[Transifex](https://www.transifex.com/projects/p/bitcoin/)."
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.9.3 rc1 is available for download",
            "categories": [
                "Bitcoin-development",
                "ann"
            ],
            "authors": [
                "Wladimir"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3067
        }
    },
    {
        "title": "[Bitcoin-development] RIP Hal Finney",
        "thread_messages": [
            {
                "author": "Matt Corallo",
                "date": "2014-08-28T20:21:30",
                "message_text_only": "I'm sure many of you have already seen this, but Hal Finney passed away\non Tuesday. While his body is being cryogenically preserved, we should\nall take a moment to thank Hal for everything he did for the cypherpunk\ncommunity, specifically helping hugely in the early days of Bitcoin as\nwell as PGP.\n\nMatt\n\nhttp://lists.extropy.org/pipermail/extropy-chat/2014-August/082585.html"
            },
            {
                "author": "Oliver Egginger",
                "date": "2014-08-29T09:29:56",
                "message_text_only": "Am 28.08.2014 um 22:21 schrieb Matt Corallo:\n> I'm sure many of you have already seen this, but Hal Finney passed away\n> on Tuesday.\n\nNo, I have not noticed yet. I did not know him personally, but it still\nmakes me sad now. Last year he wrote on Bitcoin Talk in a\nthought-provoking way about his disease:\n\nhttps://bitcointalk.org/index.php?topic=155054.0\n\nI think a very inspiring Character for all of us. Not only because of\nhis work.\n\n- oliver"
            }
        ],
        "thread_summary": {
            "title": "RIP Hal Finney",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Oliver Egginger",
                "Matt Corallo"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 822
        }
    }
]