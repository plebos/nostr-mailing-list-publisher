[{"title": "[Bitcoin-development] Lock protocol version numbers", "thread_messages": [{"author": "Amir Taaki", "date": "2011-11-02T21:23:01", "message_text_only": "Hey,\n\nCan we lock the version numbers to be the protocol version (which changes rarely) and instead use the sub_version_num field + revision number for individual builds?\n\nSatoshi 0.4\nBitcoinJava 120311\nbitcoin-js 6\n\nLike so. Otherwise we will have version bumping insanity :)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111102/bf315b92/attachment.html>", "summary": "Satoshi proposes locking version numbers to protocol version and using sub_version_num field + revision number for individual builds to avoid version bumping."}, {"author": "Christian Decker", "date": "2011-11-02T21:32:10", "message_text_only": "I don't really get what you want to achieve with this. The protocol will be\nslow down evolution (hopefully) soon, while the clients will continue\nreleasing at a similar rhythm. It took long enough to decouple the protocol\nversion from being bumped each client release, now doing the inverse\ncoupling makes no sense.\n\nRegards,\nChris\nOn Wed, Nov 2, 2011 at 10:23 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\n> Hey,\n>\n> Can we lock the version numbers to be the protocol version (which changes\n> rarely) and instead use the sub_version_num field + revision number for\n> individual builds?\n>\n> Satoshi 0.4\n> BitcoinJava 120311\n> bitcoin-js 6\n>\n> Like so. Otherwise we will have version bumping insanity :)\n>\n>\n> ------------------------------------------------------------------------------\n> RSA(R) Conference 2012\n> Save $700 by Nov 18\n> Register now\n> http://p.sf.net/sfu/rsa-sfdev2dev1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111102/82bfa1e1/attachment.html>", "summary": "Chris suggests locking version numbers to protocol version and using sub_version_num field for builds to avoid version bumping."}, {"author": "Mike Hearn", "date": "2011-11-05T14:32:07", "message_text_only": "BitCoinJ already sets the subver field to its name and version.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111105/74b02677/attachment.html>", "summary": "BitCoinJ sets the subver field to its name and version, according to a professional summarizer."}, {"author": "Christian Decker", "date": "2011-11-05T14:45:54", "message_text_only": "On BitDroid I stopped updating the protocol version at 31700 and set the\nstring to be both Version and Client, just like BitcoinJ :-)\n\nOn Sat, Nov 5, 2011 at 3:32 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> BitCoinJ already sets the subver field to its name and version.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> RSA(R) Conference 2012\n> Save $700 by Nov 18\n> Register now\n> http://p.sf.net/sfu/rsa-sfdev2dev1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111105/2a3d286f/attachment.html>", "summary": "BitDroid stopped updating protocol version at 31700 and set the string to be both Version and Client, similar to BitcoinJ."}, {"author": "Amir Taaki", "date": "2011-11-02T22:33:12", "message_text_only": "Point taken.\n\nAbout the sub_version_num though. I prefer to let the field by defined clients however they wish, with just a guideline suggestion that IDENTIFIER VERSION is a format they should follow.\n\nThe idea being that different projects would have different release scheduling schemes and it'd be restrictive to lock people into the popular major.minor system.\n\nSo for the current bitcoin to find out the version number of other clients (if it was needed), it would have to parse the number from the string:\n\n\"Satoshi 0.5\"\n\nAlthough there would be little reason for this with a sane protocol versioning scheme.\n\nIf we're agreed then I'll start on that BIP.\n\n\n\n________________________________\nFrom: Gavin Andresen <gavinandresen at gmail.com>\nTo: Amir Taaki <zgenjix at yahoo.com>\nSent: Wednesday, November 2, 2011 9:34 PM\nSubject: Re: [Bitcoin-development] Lock protocol version numbers\n\nGood idea.\n\nSounds perfect for a BIP....\n\nOn Wed, Nov 2, 2011 at 5:23 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n> Hey,\n> Can we lock the version numbers to be the protocol version (which changes\n> rarely) and instead use the sub_version_num field + revision number for\n> individual builds?\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111102/92391645/attachment.html>", "summary": "The proposal is to let clients define the sub_version_num field as they wish, with a guideline suggestion to follow the IDENTIFIER VERSION format."}, {"author": "Christian Decker", "date": "2011-11-02T22:42:31", "message_text_only": "Just for reference: https://github.com/bitcoin/bitcoin/pull/63\nThe issue resulted in my most useless pull request fixing two variables :-)\n\nI second the use of sub_version_num as a Client and Version identifier.\n\nRegards,\nChris\n\nOn Wed, Nov 2, 2011 at 11:33 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\n> Point taken.\n>\n> About the sub_version_num though. I prefer to let the field by defined\n> clients however they wish, with just a guideline suggestion that IDENTIFIER\n> VERSION is a format they should follow.\n>\n> The idea being that different projects would have different release\n> scheduling schemes and it'd be restrictive to lock people into the popular\n> major.minor system.\n>\n> So for the current bitcoin to find out the version number of other clients\n> (if it was needed), it would have to parse the number from the string:\n>\n> \"Satoshi 0.5\"\n>\n> Although there would be little reason for this with a sane protocol\n> versioning scheme.\n>\n> If we're agreed then I'll start on that BIP.\n>\n> ------------------------------\n> *From:* Gavin Andresen <gavinandresen at gmail.com>\n> *To:* Amir Taaki <zgenjix at yahoo.com>\n> *Sent:* Wednesday, November 2, 2011 9:34 PM\n> *Subject:* Re: [Bitcoin-development] Lock protocol version numbers\n>\n> Good idea.\n>\n> Sounds perfect for a BIP....\n>\n>\n> On Wed, Nov 2, 2011 at 5:23 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n> > Hey,\n> > Can we lock the version numbers to be the protocol version (which changes\n> > rarely) and instead use the sub_version_num field + revision number for\n> > individual builds?\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> RSA(R) Conference 2012\n> Save $700 by Nov 18\n> Register now\n> http://p.sf.net/sfu/rsa-sfdev2dev1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111102/6ae2fbe3/attachment.html>", "summary": "A proposal to lock version numbers to the protocol version and use the sub_version_num field for individual builds was discussed."}, {"author": "Amir Taaki", "date": "2011-11-02T22:58:43", "message_text_only": "Cool thread. I enjoyed reading that :) Thanks for sharing.\n\n\n________________________________\nFrom: Christian Decker <decker.christian at gmail.com>\nTo: Amir Taaki <zgenjix at yahoo.com>\nCc: \"bitcoin-development at lists.sourceforge.net\" <bitcoin-development at lists.sourceforge.net>\nSent: Wednesday, November 2, 2011 10:42 PM\nSubject: Re: [Bitcoin-development] Lock protocol version numbers\n\n\nJust for reference: https://github.com/bitcoin/bitcoin/pull/63\nThe issue resulted in my most useless pull request fixing two variables :-)\n\nI second the use of sub_version_num as a Client and Version identifier.\n\nRegards,\nChris\n\n\nOn Wed, Nov 2, 2011 at 11:33 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\nPoint taken.\n>\n>\n>About the sub_version_num though. I prefer to let the field by defined clients however they wish, with just a guideline suggestion that IDENTIFIER VERSION is a format they should follow.\n>\n>\n>The idea being that different projects would have different release scheduling schemes and it'd be restrictive to lock people into the popular major.minor system.\n>\n>\n>So for the current bitcoin to find out the version number of other clients (if it was needed), it would have to parse the number from the string:\n>\n>\n>\"Satoshi 0.5\"\n>\n>\n>Although there would be little reason for this with a sane protocol versioning scheme.\n>\n>\n>If we're agreed then I'll start on that BIP.\n>\n>\n>\n>________________________________\n>From: Gavin Andresen <gavinandresen at gmail.com>\n>To: Amir Taaki <zgenjix at yahoo.com>\n>Sent: Wednesday, November 2, 2011 9:34 PM\n>Subject: Re: [Bitcoin-development] Lock protocol version numbers\n>\n>Good idea.\n>\n>Sounds perfect for a BIP....\n>\n>\n>On Wed, Nov 2, 2011 at 5:23 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n>> Hey,\n>> Can we lock the version numbers to be the protocol version (which changes\n>> rarely) and instead use the sub_version_num field + revision number for\n>> individual builds?\n>\n>-- \n>--\n>Gavin Andresen\n>\n>\n>\n>------------------------------------------------------------------------------\n>RSA(R) Conference 2012\n>Save $700 by Nov 18\n>Register now\n>http://p.sf.net/sfu/rsa-sfdev2dev1\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111102/12e3637a/attachment.html>", "summary": "Discussion on locking protocol version numbers and using sub_version_num as a client and version identifier in Bitcoin development. BIP proposal suggested."}, {"author": "Luke-Jr", "date": "2011-11-02T22:46:22", "message_text_only": "On Wednesday, November 02, 2011 6:33:12 PM Amir Taaki wrote:\n> \"Satoshi 0.5\"\n\nWhat is \"Satoshi 0.5\" anyway? 0.5's server is bitcoind and GUI is Bitcoin-Qt; \nthe wx GUI client is gone, which is more or less what \"Satoshi\" referred to in \nthe past...", "summary": "\"Satoshi 0.5\" refers to the latest version of the Bitcoin software, which includes the bitcoind server and Bitcoin-Qt GUI client. The previous wx GUI client is no longer available."}, {"author": "Amir Taaki", "date": "2011-11-02T22:55:27", "message_text_only": "Bitcoin is the protocol. The client protocol identifier needs a unique name. It is not a public name that anybody ever sees except protocol developers.\n\nFor instance with libbitcoin, there might be several clients using it, but they'd all have the same protocol identifier.\n\nI think calling it Satoshi is apt homage to the person who made the original client reference protocol.\n\nSatoshi\nBitcoinCommunityOriginal\n...\n\nTake your pick.\n\n\n\n________________________________\nFrom: Luke-Jr <luke at dashjr.org>\nTo: \"bitcoin-development at lists.sourceforge.net\" <bitcoin-development at lists.sourceforge.net>\nCc: Amir Taaki <zgenjix at yahoo.com>\nSent: Wednesday, November 2, 2011 10:46 PM\nSubject: Re: [Bitcoin-development] Lock protocol version numbers\n\nOn Wednesday, November 02, 2011 6:33:12 PM Amir Taaki wrote:\n> \"Satoshi 0.5\"\n\nWhat is \"Satoshi 0.5\" anyway? 0.5's server is bitcoind and GUI is Bitcoin-Qt; \nthe wx GUI client is gone, which is more or less what \"Satoshi\" referred to in \nthe past...\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111102/bf8785d4/attachment.html>", "summary": "Bitcoin protocol identifier needs a unique name, and calling it Satoshi is a fitting tribute to the creator of the original client reference protocol."}, {"author": "Luke-Jr", "date": "2011-11-02T23:07:45", "message_text_only": "On Wednesday, November 02, 2011 6:55:27 PM Amir Taaki wrote:\n> I think calling it Satoshi is apt homage to the person who made the\n> original client reference protocol.\n\nMy point is that the \"Satoshi client\" was the wxWidgets client, which was \nretired by 0.5.", "summary": "Amir Taaki suggests calling the original client reference protocol \"Satoshi\" as homage, but notes that the wxWidgets client was retired by version 0.5."}, {"author": "Christian Decker", "date": "2011-11-02T23:22:38", "message_text_only": "The mainline client (independently from the GUI) has been referenced to as\n\"Satoshi\" client. I personally like the name as a homage, but I guess it\nall comes down to the decision of the maintainers.\n\nRegards,\nChris\n\nOn Thu, Nov 3, 2011 at 12:07 AM, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Wednesday, November 02, 2011 6:55:27 PM Amir Taaki wrote:\n> > I think calling it Satoshi is apt homage to the person who made the\n> > original client reference protocol.\n>\n> My point is that the \"Satoshi client\" was the wxWidgets client, which was\n> retired by 0.5.\n>\n>\n> ------------------------------------------------------------------------------\n> RSA(R) Conference 2012\n> Save $700 by Nov 18\n> Register now\n> http://p.sf.net/sfu/rsa-sfdev2dev1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111103/fe144b63/attachment.html>", "summary": "The retired wxWidgets client was the original \"Satoshi client,\" but the decision to use the name is up to the maintainers."}, {"author": "Jeff Garzik", "date": "2011-11-03T04:46:12", "message_text_only": "On Wed, Nov 2, 2011 at 7:22 PM, Christian Decker\n<decker.christian at gmail.com> wrote:\n> The mainline client (independently from the GUI) has been referenced to as\n> \"Satoshi\" client. I personally like the name as a homage, but I guess it all\n> comes down to the decision of the maintainers.\n\nThat's how I take it to mean:  \"satoshi client\" is the client\n-started- by satoshi, that is actively distributed through\ngithub.com/bitcoin/bitcoin and bitcoin.org-linked downloads.  Changing\nto QT doesn't change the lingo.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "The mainline client is referred to as the \"Satoshi\" client, regardless of the GUI, and changing to QT does not affect this."}, {"author": "Amir Taaki", "date": "2011-11-05T15:39:49", "message_text_only": ">From talking with Patrick Strateman (phantomcircuit), he suggested this idea (which I will elaborate more on in the BIP):\n\n\nUser-agent strings are a good starting point, however they aren't easy for parsing so we'll make a small modification to them.\n\nWe need a hierarchy from protocol, variant, gui, flavour, build\n\n/Satoshi:314700/bitcoin-qt:0.4/\n\nHow does that sound? In BitcoinJ's case:\n\n/BitcoinJ:0.2/AndroidBuild:0.8/\n\nThoughts:\n\n- Do we need a freely defined comments field?\n\n/BitcoinJ:0.2[iPad; U; CPU OS 3_2_1]/AndroidBuild:0.8/\n/Satoshi:314700/bitcoin-qt:0.4[Ubuntu Oneiric]/\n\n\n\n________________________________\nFrom: Christian Decker <decker.christian at gmail.com>\nTo: Mike Hearn <mike at plan99.net>\nCc: Amir Taaki <zgenjix at yahoo.com>; \"bitcoin-development at lists.sourceforge.net\" <bitcoin-development at lists.sourceforge.net>\nSent: Saturday, November 5, 2011 2:45 PM\nSubject: Re: [Bitcoin-development] Lock protocol version numbers\n\n\nOn BitDroid I stopped updating the protocol version at 31700 and set the string to be both Version and Client, just like BitcoinJ :-)\n\n\nOn Sat, Nov 5, 2011 at 3:32 PM, Mike Hearn <mike at plan99.net> wrote:\n\nBitCoinJ already sets the subver field to its name and version.\n>\n>\n>------------------------------------------------------------------------------\n>RSA(R) Conference 2012\n>Save $700 by Nov 18\n>Register now\n>http://p.sf.net/sfu/rsa-sfdev2dev1\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111105/c39c56c9/attachment.html>", "summary": "The proposal suggests modifying user-agent strings to create a hierarchy from protocol, variant, gui, flavour, and build for easier parsing."}, {"author": "Christian Decker", "date": "2011-11-05T16:17:58", "message_text_only": "Sorry for shooting this approach down, but I'm against it. User-agent\nstrings are an extremely bad idea as it would lead developers to start\nmaking communication choices depending on the client type. User-Agents in\nHTTP are only useful if the clients (browsers) do not adhere to a well\ndefined behavior. I see the version string more as a kind of vanity point\n(xyz peers are using my network code) and it would be bad to base choices\non it.\nFor protocol choices we already have a good mechanism in place (nServices)\nto negotiate capabilities.\n\nI for one vote for keeping it as simple as possible, just a simple string,\nwithout any further meaning.\n\nOn Sat, Nov 5, 2011 at 4:39 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\n> From talking with Patrick Strateman (phantomcircuit), he suggested this\n> idea (which I will elaborate more on in the BIP):\n>\n> User-agent strings are a good starting point, however they aren't easy for\n> parsing so we'll make a small modification to them.\n>\n> We need a hierarchy from protocol, variant, gui, flavour, build\n>\n> /Satoshi:314700/bitcoin-qt:0.4/\n>\n> How does that sound? In BitcoinJ's case:\n>\n> /BitcoinJ:0.2/AndroidBuild:0.8/\n>\n> Thoughts:\n>\n> - Do we need a freely defined comments field?\n>\n> /BitcoinJ:0.2[iPad; U; CPU OS 3_2_1]/AndroidBuild:0.8/\n> /Satoshi:314700/bitcoin-qt:0.4[Ubuntu Oneiric]/\n>\n> ------------------------------\n> *From:* Christian Decker <decker.christian at gmail.com>\n> *To:* Mike Hearn <mike at plan99.net>\n> *Cc:* Amir Taaki <zgenjix at yahoo.com>; \"\n> bitcoin-development at lists.sourceforge.net\" <\n> bitcoin-development at lists.sourceforge.net>\n> *Sent:* Saturday, November 5, 2011 2:45 PM\n> *Subject:* Re: [Bitcoin-development] Lock protocol version numbers\n>\n> On BitDroid I stopped updating the protocol version at 31700 and set the\n> string to be both Version and Client, just like BitcoinJ :-)\n>\n> On Sat, Nov 5, 2011 at 3:32 PM, Mike Hearn <mike at plan99.net> wrote:\n>\n> BitCoinJ already sets the subver field to its name and version.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> RSA(R) Conference 2012\n> Save $700 by Nov 18\n> Register now\n> http://p.sf.net/sfu/rsa-sfdev2dev1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> RSA(R) Conference 2012\n> Save $700 by Nov 18\n> Register now\n> http://p.sf.net/sfu/rsa-sfdev2dev1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111105/12fa49fd/attachment.html>", "summary": "A proposal to modify user-agent strings for Bitcoin protocol versioning is opposed, as it could lead to developers making communication choices based on client type."}, {"author": "Luke-Jr", "date": "2011-11-05T16:29:15", "message_text_only": "On Saturday, November 05, 2011 12:17:58 PM Christian Decker wrote:\n> Sorry for shooting this approach down, but I'm against it. User-agent\n> strings are an extremely bad idea as it would lead developers to start\n> making communication choices depending on the client type.\n\nThis can be necessary in some cases. What happens when some popular client is \nfound with a subtle bug, and cannot otherwise be differentiated from other \nsimilar-functionality clients? I have found User-Agent very valuable when \ndealing with the wide variety of miner bugs when I have enabled new \nfunctionality/behaviour on Eligius.", "summary": "Christian Decker opposes using user-agent strings as it may lead to developers making communication choices based on client type, but some find it valuable for bug detection."}, {"author": "Amir Taaki", "date": "2011-11-05T16:40:12", "message_text_only": "On Saturday, November 05, 2011 12:17:58 PM Christian Decker wrote:\n>> Sorry for shooting this approach down, but I'm against it. User-agent\n>> strings are an extremely bad idea as it would lead developers to start\n>> making communication choices depending on the client type.\n> This can be necessary in some cases. What happens when some popular client is \n> found with a subtle bug, and cannot otherwise be differentiated from other \n> similar-functionality clients? I have found User-Agent very valuable when \n> dealing with the wide variety of miner bugs when I have enabled new \n> functionality/behaviour on Eligius.\n\nI can agree with this point though. If clients break the network protocol/do not comply properly with it, they should be disconnected and shunned. Hard love. We don't want any ambiguity in the protocol.\n\nFail hard and fast.\n\nHowever my feeling about the user-agent string is that it is a vanity item, but here we'd be enforcing a format that everybody can understand and read. Lets say with libbitcoin- I'm sure that users of libbitcoin would like to have their client name in the string somehow. This was we can quickly understand which code-bases are being used and all the variants that exist build on those code-bases.\n\nTogether with system information (how many Linux users are there?) and various system settings (how many 32bit users are there), and so on.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111105/ba67e2f1/attachment.html>", "summary": "A debate on the use of user-agent strings in Bitcoin development, with some arguing it could lead to communication choices based on client type."}, {"author": "Jordan Mack", "date": "2011-11-05T17:30:02", "message_text_only": "> If clients break the network protocol/do not comply properly with it,\n > they should be disconnected and shunned. Hard love. We don't want any\n > ambiguity in the protocol.\n\n > However my feeling about the user-agent string is that it is a vanity\n > item, but here we'd be enforcing a format that everybody can\n > understand and read.\n\nI agree with Amir completely on both these points.\n\nWith something as critical as financial transactions, no exceptions can \nbe made. The reported client and version should be ignored completely. \nIf a client does not comply with the protocol, they must be rejected \noutright.\n\nIt is not in the best interest, or ability, to attempt to micromanage \nhow developers choose to use the information given. Recommendations and \nguidelines can be made, but how they choose to implement is ultimately \ntheir decision. In my opinion, clear and concise definition of the \nprotocol, and strict adherence in the mainline client, are the best \noptions available.\n\nThe protocol version should be indicated so that it can properly be \nhandled. Neither the name of the client, or it's version, need to be \nreported in this. Protocol validation should ignore this completely.\n\nI do not believe that leaving out the client name and version entirely \nis the best option though. As silly as it may seem to some, vanity and \nrecognition are very strong motivators. We want to encourage more \nsupporters to the scene, not scare them away. The additional data \nprovided by this could also be used for calculating various statistics. \nIt sounds like BitcoinJ and BitDroid have already found ways of adding \nit in anyway. I believe it is in the best interest of the developers to \nformalize how this information will be included, and use it to their \nadvantage.\n\nTL;DR: Adhere strictly to the protocol, and reject clients that do not. \nAdd a user agent string of some kind, but keep it separate from the \nprotocol version.", "summary": "Strict adherence to the protocol is necessary for financial transactions. Clients that do not comply should be rejected. A user agent string can be added, but kept separate from the protocol version."}], "thread_summary": {"title": "Lock protocol version numbers", "categories": ["Bitcoin-development"], "authors": ["Jeff Garzik", "Luke-Jr", "Mike Hearn", "Amir Taaki", "Jordan Mack", "Christian Decker"], "messages_count": 17, "total_messages_chars_count": 21151, "convo_summary": "The Bitcoin development community discussed proposals to lock version numbers to the protocol version and use the sub_version_num field for individual builds. There was also a suggestion to call the original client reference protocol \"Satoshi\" as a tribute to its creator. However, there was opposition to modifying user-agent strings for Bitcoin protocol versioning, as it could lead to communication choices based on client type. Strict adherence to the protocol is necessary for financial transactions, and clients that do not comply should be rejected."}}, {"title": "[Bitcoin-development] Please help sanity test: Linux/Windows 0.5.0rc2 binaries", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-11-04T18:08:00", "message_text_only": "I tagged v0.5.0rc2 this morning (then Luke hit me upside the head and\nI tagged it again because I messed up).\n\nGitian-built binaries are uploaded to:\n  https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.0/test/\n\nI sanity-tested the windows setup.exe in an XP virtual machine, it\ninstalls and runs nicely. I'm about to run out; if somebody can sanity\ntest the windows .zip and the 32/64 bit Linux .tar.gz I'd much\nappreciate it.\n\nshasums for the uploads are:\n  df994f18b6b715f6e0451b98b55ddd1946f2f353  bitcoin-0.5.0-win32-setup.exe\n  bfbad8acae987467976d535e48653ac7e28c6c76  bitcoin-0.5.0rc2-linux.tar.gz\n  fb2cfd2d8ad45269025a4604c679364a934796b4  bitcoin-0.5.0rc2-win32.zip\n\nMac builds will be delayed a bit; there are issues creating a standalone .app.\n\nshasums of my v0.5.0rc2 gitian.zips:\n  f1fa954d179c65d1043438b78fcde8237874b9e1  bitcoin-0.5.0rc2-linux-gitian.zip\n  cec50f4b5d7222e475466143eb9e37aae026a582  bitcoin-0.5.0rc2-win32-gitian.zip\n\n\n-- \n--\nGavin Andresen", "summary": "Bitcoin v0.5.0rc2 has been released with Gitian-built binaries uploaded for testing, including Windows and Linux versions, with Mac builds delayed."}, {"author": "Gavin Andresen", "date": "2011-11-04T21:29:09", "message_text_only": "If you wonder where the bitcoin-0.5.0rc2-linux.tar.gz went...\n\nI removed it because it is not sane (we need to teach the Qt build to\nstatically link dependencies).\n\nOnce the Mac and Linux deployment issues are fixed, expect a release\ncandidate 3...\n\n-- \n--\nGavin Andresen", "summary": "Bitcoin-0.5.0rc2-linux.tar.gz was removed due to deployment issues. Release candidate 3 will be available once Mac and Linux issues are resolved."}, {"author": "Douglas Huff", "date": "2011-11-04T21:35:05", "message_text_only": "What's wrong with the mac build? I just built on 10.7 without any issues.\n\n-- \nDouglas Huff\n\nOn Nov 4, 2011, at 4:29 PM, Gavin Andresen wrote:\n\n> If you wonder where the bitcoin-0.5.0rc2-linux.tar.gz went...\n> \n> I removed it because it is not sane (we need to teach the Qt build to\n> statically link dependencies).\n> \n> Once the Mac and Linux deployment issues are fixed, expect a release\n> candidate 3...\n> \n> -- \n> --\n> Gavin Andresen\n> \n> ------------------------------------------------------------------------------\n> RSA(R) Conference 2012\n> Save $700 by Nov 18\n> Register now\n> http://p.sf.net/sfu/rsa-sfdev2dev1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111104/61362829/attachment.sig>", "summary": "Bitcoin-0.5.0rc2-linux.tar.gz was removed due to deployment issues, but a release candidate 3 is expected once Mac and Linux issues are fixed."}], "thread_summary": {"title": "Please help sanity test: Linux/Windows 0.5.0rc2 binaries", "categories": ["Bitcoin-development"], "authors": ["Gavin Andresen", "Douglas Huff"], "messages_count": 3, "total_messages_chars_count": 2382, "convo_summary": "Bitcoin v0.5.0rc2 has been released with Gitian-built binaries for testing. However, Bitcoin-0.5.0rc2-linux.tar.gz was removed due to deployment issues. A release candidate 3 is expected once Mac and Linux issues are resolved."}}, {"title": "[Bitcoin-development] subvertx - bitcoin command line utilities", "thread_messages": [{"author": "Amir Taaki", "date": "2011-11-06T01:05:21", "message_text_only": "Hey,\n\nThought you might enjoy this/find it useful.\n\nhttps://bitcointalk.org/index.php?topic=50994.0\n\nSome tools for messing around with the network.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111105/0a7efae6/attachment.html>", "summary": "A link to tools for manipulating the Bitcoin network was shared for potential interest and use. No further details provided."}], "thread_summary": {"title": "subvertx - bitcoin command line utilities", "categories": ["Bitcoin-development"], "authors": ["Amir Taaki"], "messages_count": 1, "total_messages_chars_count": 331}}, {"title": "[Bitcoin-development] Difficulty adjustment / time issues", "thread_messages": [{"author": "Pieter Wuille", "date": "2011-11-07T15:02:43", "message_text_only": "On Tue, Sep 13, 2011 at 11:06:37AM -0400, Gavin Andresen wrote:\n> Background:\n> \n> Timejacking:\n>   http://culubas.blogspot.com/2011/05/timejacking-bitcoin_802.html\n> \n> And a recent related exploit launched against the low-difficulty\n> alternative chains:\n>   https://bitcointalk.org/index.php?topic=43692.msg521772#msg521772\n\nHere is an idea for an alternative (simple but hacky) solution:\n* Keep all network rules as they are now.\n* The timestamp value of mutliple-of-2016-blocks is set equal to\n  the highest timestamp that occurred in the previous 11 blocks,\n  instead of the current time. This will always obey the previous\n  rules (it's always at least the median of the past 11 blocks,\n  and never more in the future than them).\n\nInitially, roll out software that only uses this new rule for\nblock creation, but doesn't enforce it. When enough miners have\nupgraded, choose a point in the future where it becomes mandatory\n(causing a block chain split only for those creating blocks using\nold software).\n\nIf i understand the problem correctly, this will prevent an attacker\nfrom introducing a time lapse in between the 2015-block windows.\nOne problem i do see, is that it prevents X-Roll-Time for miners.\nMaybe a short interval (1 minute? 10 minutes?) instead of a fixed\nvalue could be allowed for the multiple-of-2016 blocks.\n\nComments?\n\n-- \nPieter", "summary": "A proposed solution to prevent timejacking attacks on Bitcoin involves setting the timestamp value of multiple-of-2016-blocks equal to the highest timestamp in the previous 11 blocks."}, {"author": "Luke-Jr", "date": "2011-11-07T15:27:57", "message_text_only": "On Monday, November 07, 2011 10:02:43 AM Pieter Wuille wrote:\n> Maybe a short interval (1 minute? 10 minutes?) instead of a fixed\n> value could be allowed for the multiple-of-2016 blocks.\n\nReminder that there is *already* a short interval only allowed for blocks in \ngeneral...", "summary": "Pieter Wuille suggested allowing a short interval for multiple-of-2016 blocks, but it was reminded that there is already a short interval allowed for all blocks."}, {"author": "Pieter Wuille", "date": "2011-11-07T15:43:21", "message_text_only": "On Mon, Nov 07, 2011 at 10:27:57AM -0500, Luke-Jr wrote:\n> On Monday, November 07, 2011 10:02:43 AM Pieter Wuille wrote:\n> > Maybe a short interval (1 minute? 10 minutes?) instead of a fixed\n> > value could be allowed for the multiple-of-2016 blocks.\n> \n> Reminder that there is *already* a short interval only allowed for blocks in \n> general...\n\nIn chains where no timejacking attack is going on, yes. In the common case\nthe timestamp is limited to a range of [5 blocks in the past ... 2 hours in\nthe future].\n\nHowever, during a timejacking attack, the timestamps of multiple-of-2016 blocks\nare essentially independent from the others. In such a case, most timestamps are\nvery low, and only those of multiple-of-2016-blocks correspond to the current time.\nEach 2016*N-1 to 2016*N transition incurs an arbitrary large forward shift to the\npresent time, each 2016*N to 2016*N+1 transition does a time shift backwards again\nthat is allowed because the median allows single outliers. By fixing the timestamp\noccasionally more tightly to the maximum, instead of the median, no such time\nlapses are possible.\n\nUpdated proposed rule: limit the timestamp of multiple-of-2016-blocks to\n[max(past 11 timestamps)+1 ... current_time+7200], essentially just using a maximum\ninstead of a median. I believe that is enough to prevent the attack.\n\n-- \nPieter", "summary": "A proposed rule to prevent timejacking attacks on blockchain involves limiting the timestamp of multiple-of-2016-blocks to a maximum value."}], "thread_summary": {"title": "Difficulty adjustment / time issues", "categories": ["Bitcoin-development"], "authors": ["Luke-Jr", "Pieter Wuille"], "messages_count": 3, "total_messages_chars_count": 2976, "convo_summary": "Pieter Wuille proposed a solution to prevent timejacking attacks on Bitcoin by setting the timestamp value of multiple-of-2016-blocks equal to the highest timestamp in the previous 11 blocks. However, Luke-Jr reminded that there is already a short interval allowed for all blocks. Pieter Wuille then suggested limiting the timestamp of multiple-of-2016-blocks to a maximum value."}}, {"title": "[Bitcoin-development] multisig, op_eval and lock_time/sequence...", "thread_messages": [{"author": "Michael Gr\u00f8nager", "date": "2011-11-09T10:22:06", "message_text_only": "Hi All,\n\nAlong with the multisig/op_eval BIPs (11/12) I am considering how the actual client functionality could be.\n\nSome of you might already have the solution for this - if not I would like to propose the following...\n\nLets consider the 2 of 3 multisig - and lets say I now have some coins hence only redeemable using 2 key signatures. So when I want to spend them I would do:\n\n1. from client1 I issue a transaction containing one of the signatures, with a locktime e.g. 10 minutes from now and a sequence of 0. This transaction is now posted to the p2p network.\n\n2. client2 discovers the transaction and that it will affect its wallet. It hence modifies the transaction to includes also the second signature, changes the sequence to 0xFFFFFFFF=final and the lock_time to 0 and retransmits the transaction.\n\n3. The transaction is now valid and final and will be approved by the miners.\n\nHowever, for this setup to be possible, we need to reenable the replacement of transaction in the client....\n\nAnyone working on this now ?\n\nAlternatively, the transactions would need to be sent between clients using another protocol...\n\nCheers,\n\nMichael", "summary": "Michael proposes a solution for the 2 of 3 multisig, where clients can modify transactions to include the second signature, but the client functionality needs to be re-enabled."}, {"author": "Alan Reiner", "date": "2011-11-09T14:43:37", "message_text_only": "That's what my proposal was for, in BIP 0010:\n\nhttps://github.com/genjix/bips/blob/master/bip-0010.md\n\nHowever, I just found a minor problem with it that should be addressed \nif we want to enable super-lightweight clients that only sign tx's \nwithout needing the blockchain.  Simply that the TxIns don't contain the \nvalue of the TxOuts they are spending, which means the dumb tx-signers \nwith no blockchain can't tell how much input there is.  They can only \nsee the output values and recipients, which means they can't figure out \nthe tx fee, or how much money is in each of the TxIns they are signing.\n\nAnd most users/clients will have access to the blockchain, so it's not a \ndealbreaker.  But it's something to consider.  Otherwise, I think this \nis a big step towards bringing this complicatedprotocol a little closer \nto Earth...\n\n\n\n\n\n\nOn 11/09/2011 05:22 AM, Michael Gr\u00f8nager wrote:\n> Hi All,\n>\n> Along with the multisig/op_eval BIPs (11/12) I am considering how the actual client functionality could be.\n>\n> Some of you might already have the solution for this - if not I would like to propose the following...\n>\n> Lets consider the 2 of 3 multisig - and lets say I now have some coins hence only redeemable using 2 key signatures. So when I want to spend them I would do:\n>\n> 1. from client1 I issue a transaction containing one of the signatures, with a locktime e.g. 10 minutes from now and a sequence of 0. This transaction is now posted to the p2p network.\n>\n> 2. client2 discovers the transaction and that it will affect its wallet. It hence modifies the transaction to includes also the second signature, changes the sequence to 0xFFFFFFFF=final and the lock_time to 0 and retransmits the transaction.\n>\n> 3. The transaction is now valid and final and will be approved by the miners.\n>\n> However, for this setup to be possible, we need to reenable the replacement of transaction in the client....\n>\n> Anyone working on this now ?\n>\n> Alternatively, the transactions would need to be sent between clients using another protocol...\n>\n> Cheers,\n>\n> Michael\n>\n>\n>\n> ------------------------------------------------------------------------------\n> RSA(R) Conference 2012\n> Save $700 by Nov 18\n> Register now\n> http://p.sf.net/sfu/rsa-sfdev2dev1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "A proposal was made in BIP 0010 to enable super-lightweight clients that only sign transactions without needing the blockchain, but a minor problem was found where the TxIns don't contain the value of the TxOuts they are spending, making it difficult for dumb tx-signers to determine the input amount. This is not a dealbreaker as most users/clients have access to the blockchain."}, {"author": "Alan Reiner", "date": "2011-11-09T15:22:57", "message_text_only": "Actually,  I'm not sure if your solution works,  because it relies on\nbroadcasting a tx to the network that isn't valid.   I believe that the\nfirst tx in your proposal will be rejected and thus you'll need to exchange\nthe tx's offline.\n\nHowever,  third-parties could pretty easily and conveniently host a service\nfor this kind of exchange.\n\n--Sent from my overpriced smartphone\nOn Nov 9, 2011 9:43 AM, \"Alan Reiner\" <etotheipi at gmail.com> wrote:\n\n> That's what my proposal was for, in BIP 0010:\n>\n> https://github.com/genjix/**bips/blob/master/bip-0010.md<https://github.com/genjix/bips/blob/master/bip-0010.md>\n>\n> However, I just found a minor problem with it that should be addressed if\n> we want to enable super-lightweight clients that only sign tx's without\n> needing the blockchain.  Simply that the TxIns don't contain the value of\n> the TxOuts they are spending, which means the dumb tx-signers with no\n> blockchain can't tell how much input there is.  They can only see the\n> output values and recipients, which means they can't figure out the tx fee,\n> or how much money is in each of the TxIns they are signing.\n>\n> And most users/clients will have access to the blockchain, so it's not a\n> dealbreaker.  But it's something to consider.  Otherwise, I think this is a\n> big step towards bringing this complicatedprotocol a little closer to\n> Earth...\n>\n>\n>\n>\n>\n>\n> On 11/09/2011 05:22 AM, Michael Gr\u00f8nager wrote:\n>\n>> Hi All,\n>>\n>> Along with the multisig/op_eval BIPs (11/12) I am considering how the\n>> actual client functionality could be.\n>>\n>> Some of you might already have the solution for this - if not I would\n>> like to propose the following...\n>>\n>> Lets consider the 2 of 3 multisig - and lets say I now have some coins\n>> hence only redeemable using 2 key signatures. So when I want to spend them\n>> I would do:\n>>\n>> 1. from client1 I issue a transaction containing one of the signatures,\n>> with a locktime e.g. 10 minutes from now and a sequence of 0. This\n>> transaction is now posted to the p2p network.\n>>\n>> 2. client2 discovers the transaction and that it will affect its wallet.\n>> It hence modifies the transaction to includes also the second signature,\n>> changes the sequence to 0xFFFFFFFF=final and the lock_time to 0 and\n>> retransmits the transaction.\n>>\n>> 3. The transaction is now valid and final and will be approved by the\n>> miners.\n>>\n>> However, for this setup to be possible, we need to reenable the\n>> replacement of transaction in the client....\n>>\n>> Anyone working on this now ?\n>>\n>> Alternatively, the transactions would need to be sent between clients\n>> using another protocol...\n>>\n>> Cheers,\n>>\n>> Michael\n>>\n>>\n>>\n>> ------------------------------**------------------------------**\n>> ------------------\n>> RSA(R) Conference 2012\n>> Save $700 by Nov 18\n>> Register now\n>> http://p.sf.net/sfu/rsa-**sfdev2dev1 <http://p.sf.net/sfu/rsa-sfdev2dev1>\n>> ______________________________**_________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.**sourceforge.net<Bitcoin-development at lists.sourceforge.net>\n>> https://lists.sourceforge.net/**lists/listinfo/bitcoin-**development<https://lists.sourceforge.net/lists/listinfo/bitcoin-development>\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111109/5d8a635d/attachment.html>", "summary": "Proposal for a super-lightweight client that only signs transactions without needing the blockchain, but with a minor problem that needs to be addressed. Third-parties could host a service for this kind of exchange."}, {"author": "Gavin Andresen", "date": "2011-11-09T19:13:54", "message_text_only": "> 1. from client1 I issue a transaction containing one of the signatures, with a locktime e.g. 10 minutes from now and a sequence of 0. This transaction is now posted to the p2p network.\n\nAs Alan said, that won't work-- it will not be relayed across the\nnetwork because it isn't a valid transaction until it has enough\nsignatures.\n\n> Alternatively, the transactions would need to be sent between clients using another protocol...\n\nFormats and protocols for gathering signatures are in the TODO\ncategory-- Alan's BIP 10 is the next piece of the puzzle, maybe a\nstandardized http/https RESTful API, or HTTP/JSON, or protocol buffers\nand raw sockets, or... something... solution (or solutions) built on\ntop of that makes sense.\n\nI don't think partially-signed transactions belong on the main Bitcoin\nP2P network, mostly because I don't see any way of preventing somebody\nfrom endlessly spamming bogus, will-never-be-completed partial\ntransactions just to be annoying.\n\n-- \n--\nGavin Andresen", "summary": "Transactions with incomplete signatures cannot be relayed across the network. A new protocol is needed to gather signatures."}, {"author": "Gavin Andresen", "date": "2011-11-09T20:02:23", "message_text_only": "> I don't think partially-signed transactions belong on the main Bitcoin\n> P2P network, mostly because I don't see any way of preventing somebody\n> from endlessly spamming bogus, will-never-be-completed partial\n> transactions just to be annoying.\n\n... of course I write that and then start thinking about ways you\nCOULD use the P2P network to distribute signatures, maybe by\nbroadcasting (and paying fees for) complete transactions that contain\nextra signatures for the transaction that you want to sign.\n\nHere's a half-baked idea that might be brilliant or stupid:\n\n+ Start with an escrow transaction, with 3 public keys.  I own one of the keys.\n+ I broadcast a 'fee-only' transaction that pays 0 bitcoins to the key\nI own. But I add extra data to the scriptSig; something like:\n\nscriptSig:  <escrow_signature> <serialized_escrow_transaction> <sig> <pubkey>\nscriptPubKey: ...standard DUP HASH160 <pubkeyhash> ...etc\nnValue: 0\n\nThe other parties to the escrow transaction could monitor the\nblock-chain for transactions to my <pubkeyhash>, and get the signature\nand proposed \"spend the funds in escrow\" transaction from the\nscriptSig.\n\n.......\n\n\"But won't that gunk up the block chain with more data?\"\n\nYup.  But the parties to the transaction will have to pay for the\nextra data they're including.\n\nAnd everything in the scriptSigs can, theoretically, be forgotten (or\nnever sent) to most nodes on the network once the transaction is spent\nand is buried deep enough in the block chain.  (a nValue=0 transaction\ncan be considered 'immediately spent').\n\n\"Can you really put arbitrary stuff in the scriptSig?\"\n\nYup.  The IsStandard() check today allows up to 200 bytes, which\nwouldn't be enough for an extra signature and <serialized\ntransaction>.\n\nThe standard <sig> <pubkey> is about 150 bytes; part of the\nmulti-signature proposal will be increasing that to 500 bytes to\naccomodate 3-signatures transactions.  A simple 1-input-1-output\n<serialized transaction> would be around 50 bytes or so.\n\n\"Wouldn't it be cheaper/better to NOT use the block chain to\ndistribute signatures?\"\n\nYup. The only advantage I see is it might be more anonymous to use the\nblockchain instead of directly connecting to, and finding out the IP\naddress of, the parties involved in the transaction.\n\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen suggests that partially-signed transactions should not be on the main Bitcoin P2P network due to the possibility of spamming. He proposes a half-baked idea of using an escrow transaction with extra data in the scriptSig to distribute signatures, which could potentially clog up the blockchain."}, {"author": "Michael Gr\u00f8nager", "date": "2011-11-09T20:31:44", "message_text_only": "Crossing posts ;)\n\nI like your idea! - It adds a pricetag to distributing a signature - and - as you mention it will be part of the standard. It is only up to the clients if they want to support it or not, but it does give you 0-conf world wide instantaneous anonymously distribution of half-baked transactions...\n\nHowever, the parties will anyway need to know at least about each others public keys up front and hence the 0-conf might not be that important... Left is, as you said, some anonymity (not much extra though)...\n\n/M\n\n\nOn 09/11/2011, at 21:02, Gavin Andresen wrote:\n\n>> I don't think partially-signed transactions belong on the main Bitcoin\n>> P2P network, mostly because I don't see any way of preventing somebody\n>> from endlessly spamming bogus, will-never-be-completed partial\n>> transactions just to be annoying.\n> \n> ... of course I write that and then start thinking about ways you\n> COULD use the P2P network to distribute signatures, maybe by\n> broadcasting (and paying fees for) complete transactions that contain\n> extra signatures for the transaction that you want to sign.\n> \n> Here's a half-baked idea that might be brilliant or stupid:\n> \n> + Start with an escrow transaction, with 3 public keys.  I own one of the keys.\n> + I broadcast a 'fee-only' transaction that pays 0 bitcoins to the key\n> I own. But I add extra data to the scriptSig; something like:\n> \n> scriptSig:  <escrow_signature> <serialized_escrow_transaction> <sig> <pubkey>\n> scriptPubKey: ...standard DUP HASH160 <pubkeyhash> ...etc\n> nValue: 0\n> \n> The other parties to the escrow transaction could monitor the\n> block-chain for transactions to my <pubkeyhash>, and get the signature\n> and proposed \"spend the funds in escrow\" transaction from the\n> scriptSig.\n> \n> .......\n> \n> \"But won't that gunk up the block chain with more data?\"\n> \n> Yup.  But the parties to the transaction will have to pay for the\n> extra data they're including.\n> \n> And everything in the scriptSigs can, theoretically, be forgotten (or\n> never sent) to most nodes on the network once the transaction is spent\n> and is buried deep enough in the block chain.  (a nValue=0 transaction\n> can be considered 'immediately spent').\n> \n> \"Can you really put arbitrary stuff in the scriptSig?\"\n> \n> Yup.  The IsStandard() check today allows up to 200 bytes, which\n> wouldn't be enough for an extra signature and <serialized\n> transaction>.\n> \n> The standard <sig> <pubkey> is about 150 bytes; part of the\n> multi-signature proposal will be increasing that to 500 bytes to\n> accomodate 3-signatures transactions.  A simple 1-input-1-output\n> <serialized transaction> would be around 50 bytes or so.\n> \n> \"Wouldn't it be cheaper/better to NOT use the block chain to\n> distribute signatures?\"\n> \n> Yup. The only advantage I see is it might be more anonymous to use the\n> blockchain instead of directly connecting to, and finding out the IP\n> address of, the parties involved in the transaction.\n> \n> \n> -- \n> --\n> Gavin Andresen\n\nMichael Gronager, PhD\nOwner Ceptacle / NDGF Director, NORDUnet A/S\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 62 14 01\nE-mail: gronager at ceptacle.com", "summary": "A proposal to use the Bitcoin P2P network to distribute signatures for partially-signed transactions, with potential anonymity benefits, but at a cost."}, {"author": "Gavin Andresen", "date": "2011-11-09T21:18:04", "message_text_only": "One more thought on putting arbitrary stuff in the scriptSig:\n\nMiners could decide to revolt and remove the extra scriptSig\ninformation before including the transaction in their blocks. They'd\nstill get the full transaction fee, and the transaction would still\nvalidate so the block would be accepted by everybody else.\n\nCome to think of it, if a node relaying transactions wanted to save\nbandwidth costs or be annoying, it could also strip off the extra\ninformation before forwarding it, so this isn't a reliable\ncommunication mechanism. It is probably a much better idea to use\nanother protocol to gather signatures.\n\n-- \n--\nGavin Andresen", "summary": "Adding arbitrary information in a Bitcoin transaction's scriptSig is unreliable as miners and nodes can remove it, suggesting using another protocol for gathering signatures."}, {"author": "Joel Joonatan Kaartinen", "date": "2011-11-09T21:32:00", "message_text_only": "It's propably best to create a separate p2p network for off-band\ninformation like this. No need to involve the blockchain with it.\n\n- Joel\n\nOn Wed, 2011-11-09 at 16:18 -0500, Gavin Andresen wrote:\n> One more thought on putting arbitrary stuff in the scriptSig:\n> \n> Miners could decide to revolt and remove the extra scriptSig\n> information before including the transaction in their blocks. They'd\n> still get the full transaction fee, and the transaction would still\n> validate so the block would be accepted by everybody else.\n> \n> Come to think of it, if a node relaying transactions wanted to save\n> bandwidth costs or be annoying, it could also strip off the extra\n> information before forwarding it, so this isn't a reliable\n> communication mechanism. It is probably a much better idea to use\n> another protocol to gather signatures.\n>", "summary": "Creating a separate P2P network for off-band information is better than involving the blockchain, as miners could remove extra scriptSig information."}, {"author": "theymos", "date": "2011-11-09T22:13:36", "message_text_only": "For now I think requiring direct-connection negotiation is best for these kinds of things. A direct connection is OK in most cases, and more complicated schemes will be more likely to fail. Maybe the IP transactions protocol can be used.\n\nIn the future, I imagine that users of ultra-lightweight clients will connect to a new P2P network built on top of the core Bitcoin network in order to receive block headers and info about sent/received transactions without leeching off of the few full nodes. This network could also be used for indirect transaction negotiation, which is similar to the goal of finding your own received transactions.\n\nOn Wednesday, November 09, 2011 3:02 PM, \"Gavin Andresen\" <gavinandresen at gmail.com> wrote:\n> a nValue=0 transaction can be considered 'immediately spent'\n\nI believe it's possible to spend a 0-value output, so they can't be considered automatically spent.", "summary": "Direct-connection negotiation is best for lightweight clients; a new P2P network could be built for block headers and transaction info. 0-value outputs can be spent."}, {"author": "Michael Gr\u00f8nager", "date": "2011-11-09T20:03:44", "message_text_only": "Hi Gavin / Alan,\n\nAgree that we would also need to consider these \"half\" transaction valid. At least for the time being up to the lock_time, and one could have an extra constrain - that the lock_time should be within e.g. 30minutes that would avoid the will-never-be-completed cases.\n\nMy main concern when it comes to introducing other protocols is that they might never be standard (I think a great number of clients will emerge - and this would be a thing to compete on). If it is part of the p2p network it will be a seamless standard and easy for everyone to use, even across different clients. But I share your concern on the \n\nI can, however, also understand your worries, and some other constraints should be introduced to ensure that not even short time spamming is possible... \n\n/M\n\nOn 09/11/2011, at 20:13, Gavin Andresen wrote:\n\n>> 1. from client1 I issue a transaction containing one of the signatures, with a locktime e.g. 10 minutes from now and a sequence of 0. This transaction is now posted to the p2p network.\n> \n> As Alan said, that won't work-- it will not be relayed across the\n> network because it isn't a valid transaction until it has enough\n> signatures.\n> \n>> Alternatively, the transactions would need to be sent between clients using another protocol...\n> \n> Formats and protocols for gathering signatures are in the TODO\n> category-- Alan's BIP 10 is the next piece of the puzzle, maybe a\n> standardized http/https RESTful API, or HTTP/JSON, or protocol buffers\n> and raw sockets, or... something... solution (or solutions) built on\n> top of that makes sense.\n> \n> I don't think partially-signed transactions belong on the main Bitcoin\n> P2P network, mostly because I don't see any way of preventing somebody\n> from endlessly spamming bogus, will-never-be-completed partial\n> transactions just to be annoying.\n> \n> -- \n> --\n> Gavin Andresen", "summary": "Discussion on the validity of \"half\" transactions and the need for constraints to prevent spamming, with concerns about introducing non-standard protocols."}, {"author": "Alan Reiner", "date": "2011-11-10T03:00:56", "message_text_only": "The purpose of creating BIP 0010 now, is to encourage a standard that \ndevelopers /want/ to adopt, from the outset.  Every developer who is \nplanning to touch multi-signature transactions, is going to have to \nsolve the problem of multi-sig tx exchanges, eventually.  By offering an \nexcellent solution before they've started asking the question, there's a \ngood chance people will use it.   Hear me out...\n\nProtocols get fragmented when there's multiple competing ways to do \nsomething, each having some advantages the others don't have.  This \nleads to developers with differing priorities picking different ones, or \ncreating their own.   However, I believe that the problem BIP 0010 seeks \nto solve is a fairly straightforward problem.  There's not a lot of \nvariety in the solutions that could compete against it.  People just \nneed a way to pass this data around, and they want it to be as \nconvenient to use, and as easy to implement as possible.  In that sense, \nI think BIP 0010 (or some future variant) is fairly optimal as a \nbuilding block for higher-level protocols.\n\nIf anyone has ideas for why someone would want to create a competing \nidea to BIP 0010 (besides not being aware of it when they start), I'd \nlike to discuss it.  I'm fairly confident that any such ideas could just \nbe added to BIP 0010 and thus reset the question of why anyone would \nneed a competing idea.\n\n\n\nOn 11/09/2011 03:03 PM, Michael Gr\u00f8nager wrote:\n> My main concern when it comes to introducing other protocols is that they might never be standard (I think a great number of clients will emerge - and this would be a thing to compete on). If it is part of the p2p network it will be a seamless standard and easy for everyone to use, even across different clients. But I share your concern on the\n>\n> /M\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111109/cad71620/attachment.html>", "summary": "BIP 0010 aims to create a standard solution for multi-signature transactions to prevent fragmentation of protocols and encourage adoption by developers."}, {"author": "Michael Gr\u00f8nager", "date": "2011-11-10T09:55:55", "message_text_only": "Hi Alan,\n\nI have now read BIP0010 - one first idea is: add a link to it on the wiki (or remove all bip links from the wiki... - we don't want two places for BIPs...)\n\nI am not sure where you prefer the discussion on the content of the BIP - but now you get it here, but feel free to redirect...\n\nLikes:\n* inclusion of prevout txout scripts - could prove handy\n* that it is a proposal to do this similarly on all clients\n\nDislikes:\n* the format - I guess I would prefer a normal JSON format - where the scripts gets populated step by step. As for the scriptPubKey (now an awful name...) it would be easy to just add it to the JSON, or have the prevouts simply be the actual txouts instead of {hash,n}.\n\nComments:\n* it is good to have this proposal, but I think that once we see ways to communicate it they could very well radically steer how a format should look. Take e.g. the discussion we had with Gavin yesterday, if we had chosen to move in that direction BIP0010 would had been useless. So perhaps a bit premature?\n\nCheers,\n\nMichael\n\n\n\nOn 10/11/2011, at 04:00, Alan Reiner wrote:\n\n> The purpose of creating BIP 0010 now, is to encourage a standard that developers want to adopt, from the outset.  Every developer who is planning to touch multi-signature transactions, is going to have to solve the problem of multi-sig tx exchanges, eventually.  By offering an excellent solution before they've started asking the question, there's a good chance people will use it.   Hear me out...\n> \n> Protocols get fragmented when there's multiple competing ways to do something, each having some advantages the others don't have.  This leads to developers with differing priorities picking different ones, or creating their own.   However, I believe that the problem BIP 0010 seeks to solve is a fairly straightforward problem.  There's not a lot of variety in the solutions that could compete against it.  People just need a way to pass this data around, and they want it to be as convenient to use, and as easy to implement as possible.  In that sense, I think BIP 0010 (or some future variant) is fairly optimal as a building block for higher-level protocols.  \n> \n> If anyone has ideas for why someone would want to create a competing idea to BIP 0010 (besides not being aware of it when they start), I'd like to discuss it.  I'm fairly confident that any such ideas could just be added to BIP 0010 and thus reset the question of why anyone would need a competing idea.\n> \n> \n> \n> On 11/09/2011 03:03 PM, Michael Gr\u00f8nager wrote:\n>> My main concern when it comes to introducing other protocols is that they might never be standard (I think a great number of clients will emerge - and this would be a thing to compete on). If it is part of the p2p network it will be a seamless standard and easy for everyone to use, even across different clients. But I share your concern on the \n>> \n>> /M\n>> \n> \n> ------------------------------------------------------------------------------\n> RSA(R) Conference 2012\n> Save $700 by Nov 18\n> Register now\n> http://p.sf.net/sfu/rsa-sfdev2dev1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\nMichael Gronager, PhD\nOwner Ceptacle / NDGF Director, NORDUnet A/S\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 62 14 01\nE-mail: gronager at ceptacle.com\n\n\nMichael Gronager, PhD\nOwner Ceptacle / NDGF Director, NORDUnet A/S\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 62 14 01\nE-mail: gronager at ceptacle.com", "summary": "Michael Gr\u00f8nager provides feedback on BIP0010, suggesting a link to it on the wiki and expressing likes and dislikes about the proposal."}, {"author": "Alan Reiner", "date": "2011-11-10T12:56:45", "message_text_only": "Michael, thanks for taking time to read the proposal.  Responses are \ninline, below.\n> I am not sure where you prefer the discussion on the content of the BIP - but now you get it here, but feel free to redirect...\n>\n> Likes:\n> * inclusion of prevout txout scripts - could prove handy\n> * that it is a proposal to do this similarly on all clients\nThe txout scripts are not just handy, they /need/ to be included in the \ntxin scripts for signing.  By putting them there already, the parser \nonly has to blank out the others txins, add the hashcode, and pass it to \nthe ECDSA code for signing (if you're not familar with OP_CHECKSIG, see \nmy diagram here <https://bitcointalk.org/index.php?topic=29416.0>).  I \nthink this feature is *critical* to adoption, as it works for the most \nlightweight clients that might not even contain blockheaders -- \neverything you need to understand and sign the the transaction is \nincluded (except for the txin values).\n\nFor that reason, this doubles as a convenient way to do offline \nwallets/signing:  you don't have to keep transporting 700 MB of \nblockchain to the offline computer just so it can sign your transactions.\n> Dislikes:\n> * the format - I guess I would prefer a normal JSON format - where the scripts gets populated step by step. As for the scriptPubKey (now an awful name...) it would be easy to just add it to the JSON, or have the prevouts simply be the actual txouts instead of {hash,n}.\nI see the benefit of JSON for dynamic information with lots of optional \nfields.  But this information is fairly static -- if there's extra \ninformation developers need for this process, it can be added.  I don't \nsee a lot of variation in the amount/types of data to be included here.\n\nThe core benefit follows PGP messages:  compact, easy-to-identify, \nblocks of text, that can be included inline in an email as easily as it \ncan be supplied as a file/attachment, and only requires code that's \nalready available in a BTC developer toolbox.  I can even remove the \nnumsigs counter, as it's easy enough to search for the END-TXDP line.  \nThink about a non-developer opening a file and trying to identify it:  \nJSON looks like code, this looks like... \"----BEGIN-TXDP---\"  (now that \nI think about it, \"BEGIN-TRANSACTION-9fj3fsQ\" might be better...)\n> Comments:\n> * it is good to have this proposal, but I think that once we see ways to communicate it they could very well radically steer how a format should look. Take e.g. the discussion we had with Gavin yesterday, if we had chosen to move in that direction BIP0010 would had been useless. So perhaps a bit premature?\n>\nIf we start talking about in-blockchain techniques, I agree with you.  \nBut If that idea is discarded, *all* out-of-band solutions are going to \nrequire encoding this exact information somehow.  I think offering this \nsolution before developers start asking the question of how to do it is \nexactly what's needed.\n\n-Alan\n> Cheers,\n>\n> Michael\n>\n>\n> On 10/11/2011, at 04:00, Alan Reiner wrote:\n>\n>> The purpose of creating BIP 0010 now, is to encourage a standard that developers want to adopt, from the outset.  Every developer who is planning to touch multi-signature transactions, is going to have to solve the problem of multi-sig tx exchanges, eventually.  By offering an excellent solution before they've started asking the question, there's a good chance people will use it.   Hear me out...\n>>\n>> Protocols get fragmented when there's multiple competing ways to do something, each having some advantages the others don't have.  This leads to developers with differing priorities picking different ones, or creating their own.   However, I believe that the problem BIP 0010 seeks to solve is a fairly straightforward problem.  There's not a lot of variety in the solutions that could compete against it.  People just need a way to pass this data around, and they want it to be as convenient to use, and as easy to implement as possible.  In that sense, I think BIP 0010 (or some future variant) is fairly optimal as a building block for higher-level protocols.\n>>\n>> If anyone has ideas for why someone would want to create a competing idea to BIP 0010 (besides not being aware of it when they start), I'd like to discuss it.  I'm fairly confident that any such ideas could just be added to BIP 0010 and thus reset the question of why anyone would need a competing idea.\n>>\n>>\n>>\n>> On 11/09/2011 03:03 PM, Michael Gr\u00f8nager wrote:\n>>> My main concern when it comes to introducing other protocols is that they might never be standard (I think a great number of clients will emerge - and this would be a thing to compete on). If it is part of the p2p network it will be a seamless standard and easy for everyone to use, even across different clients. But I share your concern on the\n>>>\n>>> /M\n>>>\n>> ------------------------------------------------------------------------------\n>> RSA(R) Conference 2012\n>> Save $700 by Nov 18\n>> Register now\n>> http://p.sf.net/sfu/rsa-sfdev2dev1\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> Michael Gronager, PhD\n> Owner Ceptacle / NDGF Director, NORDUnet A/S\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 62 14 01\n> E-mail: gronager at ceptacle.com\n>\n>\n> Michael Gronager, PhD\n> Owner Ceptacle / NDGF Director, NORDUnet A/S\n> Jens Juels Gade 33\n> 2100 Copenhagen E\n> Mobile: +45 31 62 14 01\n> E-mail: gronager at ceptacle.com\n>\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111110/e0dfb1b0/attachment.html>", "summary": "The proposal for BIP 0010 aims to encourage a standard that developers want to adopt for multi-signature transactions, offering a solution before they start asking the question. The proposal includes the inclusion of prevout txout scripts, which are critical to adoption, and a convenient way to do offline wallets/signing. The format of the proposal is compact, easy-to-identify, and only requires code that's already available in a BTC developer toolbox. The proposal is optimal as a building block for higher-level protocols, and any competing ideas could just be added to BIP 0010."}, {"author": "Mike Hearn", "date": "2011-11-12T16:58:56", "message_text_only": "Please don't create BIPs that don't have any actual implementation behind\nthem. Design discussion is fine but the mailing list works for that.\n\nIf I were going to implement escrow transactions in BitCoinJ it would not\nmatter what was written here. I'd just implement the design I thought made\nsense. If that design was later adopted by others it can be documented and\nagreed upon in a BIP, just like a regular RFC.\n\nFor what it's worth I would not attempt to send half-valid escrow\ntransactions through the p2p network, not even using the overlay networks\nthe protocol already supports. A correct escrow protocol requires the\nseller to challenge the dispute mediator with the public key to be sure\nthey actually own it, and the simplest way to do that is to leverage the\nexisting DNS/EV-SSL infrastructure with a \"sign this nonce\" HTTP request.\n\nBIPs should not be a place for people to come up with armchair designs,\nbecause a design with no corresponding implementation is likely to be full\nof problems. Let's revisit this once I can install some software on my\nlaptop, my server, and a friends server, and do a 3-way mediated\ntransaction between them.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111112/75bc0006/attachment.html>", "summary": "Don't propose BIPs without implementation. Escrow protocol requires seller to challenge dispute mediator with public key via DNS/EV-SSL infrastructure."}, {"author": "Alan Reiner", "date": "2011-11-12T17:10:24", "message_text_only": "Maybe I'm new to this, but this doesn't make any sense.  I thought the \npoint of the BIP was to collaborate to come up with a good solution.  \nThat's exactly what I want to do before I implement it in my software.  \nAfter all, they are \"Bitcoin Improvement *Proposals*.\"  It seems like \nEXACTLY what a BIP is for... just no one needs/should use it until it \nremoves the \"draft\" marking.\n\nAs for the protocol on top of it, my BIP was not intended to address \nthat.  It's only proposing how unsigned transactions can be serialized \nand users can collect addresses.  Whatever system you want to implement \non top of it to exchange the data is up to the developer.  My only \nmotivation is that if the user clicks \"Save this proposal to file\", that \nany client can use the resulting file, just the same way we serialize \nany other blockdata that has a consistent representation.\n\n-Alan\n\n\n\nOn 11/12/2011 11:58 AM, Mike Hearn wrote:\n> Please don't create BIPs that don't have any actual implementation \n> behind them. Design discussion is fine but the mailing list works for \n> that.\n>\n> If I were going to implement escrow transactions in BitCoinJ it would \n> not matter what was written here. I'd just implement the design I \n> thought made sense. If that design was later adopted by others it can \n> be documented and agreed upon in a BIP, just like a regular RFC.\n>\n> For what it's worth I would not attempt to send half-valid escrow \n> transactions through the p2p network, not even using the overlay \n> networks the protocol already supports. A correct escrow protocol \n> requires the seller to challenge the dispute mediator with the public \n> key to be sure they actually own it, and the simplest way to do that \n> is to leverage the existing DNS/EV-SSL infrastructure with a \"sign \n> this nonce\" HTTP request.\n>\n> BIPs should not be a place for people to come up with armchair \n> designs, because a design with no corresponding implementation is \n> likely to be full of problems. Let's revisit this once I can install \n> some software on my laptop, my server, and a friends server, and do a \n> 3-way mediated transaction between them.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111112/e36715ff/attachment.html>", "summary": "A user suggests that the point of Bitcoin Improvement Proposals (BIPs) is to collaborate and come up with a good solution before implementation. BIPs should not be a place for armchair designs without corresponding implementation."}, {"author": "Mike Hearn", "date": "2011-11-12T17:16:02", "message_text_only": "BIPs are either \"standards track\" (affects everyone, represents consensus),\n\"informational\" (ie basically just summarizing the authors viewpoints on\nthings) or \"process\".\n\nMy point is you can't have a credible standards track BIP until something\nhas been implemented end to end. I don't think it's a good plan to design\nthese things in isolation. You'll end up with bizarre user experiences\nbecause of technical decisions taken months earlier that are now hard to\nreverse. A working end to end implementation gives you the confidence to\nsay, yes, this is how it should work, because here's the demo and you can\nsee it works very well and the code is clean.\n\nIf your BIP is informational then no problems, but I don't think there's\nmuch point in informational BIPs to be honest - it's easier to just write\nan email or forum post summarizing your views on things. If you find it a\nuseful framework to write your thoughts in that's OK, but don't expect\nimplementors to follow what's written there just because it's a BIP. It\ncarries no more weight than any other document would.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111112/249a034a/attachment.html>", "summary": "BIPs are categorized as \"standards track,\" \"informational,\" or \"process.\" A credible standards track BIP requires end-to-end implementation to avoid bizarre user experiences."}, {"author": "Alan Reiner", "date": "2011-11-12T17:25:16", "message_text_only": "Fair enough.  I'm not expecting anyone to just suddenly adopt BIP 0010 \njust because I published it to the wiki.  I put it there to get feedback \non what it might be missing, and maybe we can converge on a good \npreliminary solution.  Then update it as we start playing with it and \nfind more features/fixes to add to it.\n\nRight now, I have actually implemented BIP 0010 in my own client \nsoftware (which is still a few weeks from even having an alpha version, \nbut nontheless I'm actually implementing it). I'm going to use TxDPs in \noffline-wallet transactions, which is a nearly identical process (it's \njust a 1-of-1 transaction).  As such, I will be interested to test with \nsome other client developers, whether they can easily use the TxDPs I \nproduce.\n\nI assume it doesn't bother you if I leave it the way it is, with the \nacknowledgment that I know no one is adopting it yet (except for \nmyself).  It's informational, until we get a couple different clients, \nor at least test setup to play with it.\n\n-Alan\n\n\n\n\nOn 11/12/2011 12:16 PM, Mike Hearn wrote:\n> BIPs are either \"standards track\" (affects everyone, represents \n> consensus), \"informational\" (ie basically just summarizing the authors \n> viewpoints on things) or \"process\".\n>\n> My point is you can't have a credible standards track BIP until \n> something has been implemented end to end. I don't think it's a good \n> plan to design these things in isolation. You'll end up with bizarre \n> user experiences because of technical decisions taken months earlier \n> that are now hard to reverse. A working end to end implementation \n> gives you the confidence to say, yes, this is how it should work, \n> because here's the demo and you can see it works very well and the \n> code is clean.\n>\n> If your BIP is informational then no problems, but I don't think \n> there's much point in informational BIPs to be honest - it's easier to \n> just write an email or forum post summarizing your views on things. If \n> you find it a useful framework to write your thoughts in that's OK, \n> but don't expect implementors to follow what's written there just \n> because it's a BIP. It carries no more weight than any other document \n> would.\n>\n>", "summary": "Author defends publishing BIP 0010 on the wiki to get feedback and converge on a preliminary solution before implementation."}, {"author": "Mike Hearn", "date": "2011-11-12T17:38:06", "message_text_only": "Sure, of course, as long as it's clearly labelled as just your thoughts, no\nissues.\n\nFor dispute mediation the way I'd start is playing around with some UI\ndesign stuff and a toy protocol underneath. Once the process is smooth from\nthe users POV (no seeing binary blobs disguised as text) then it should\nbecome clearer what steps the protocol needs and what order they need to\ncome in.\n\nSpecific feedback on this format - as far as I can tell the format\nrepresents a subset of the regular bitcoin transaction format? Couldn't you\njust serialize a Bitcoin CTransaction structure with the txins containing\nthe output scripts?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111112/847b4668/attachment.html>", "summary": "A professional summarizer is asked about dispute mediation and suggests starting with UI design and a toy protocol to determine necessary steps. Format feedback is given."}], "thread_summary": {"title": "multisig, op_eval and lock_time/sequence...", "categories": ["Bitcoin-development"], "authors": ["Mike Hearn", "theymos", "Alan Reiner", "Michael Gr\u00f8nager", "Gavin Andresen", "Joel Joonatan Kaartinen"], "messages_count": 18, "total_messages_chars_count": 36931, "convo_summary": "The group discusses proposals for lightweight clients that only sign transactions without needing the blockchain, but there are concerns about incomplete signatures and spamming. BIP 0010 aims to create a standard solution for multi-signature transactions, but some members suggest not proposing BIPs without implementation. The author defends publishing BIP 0010 on the wiki to get feedback before implementation. A professional summarizer is asked about dispute mediation and suggests starting with UI design and a toy protocol to determine necessary steps."}}, {"title": "[Bitcoin-development] Wallet encryption issue", "thread_messages": [{"author": "Alan Reiner", "date": "2011-11-10T16:11:19", "message_text_only": "Sorry guys, I just realized I should've posted this to the dev list \nfirst, before/instead of putting it on the forums.\n\n    https://bitcointalk.org/index.php?topic=51474\n\n*I still have some of my private keys in plaintext. *I would guess that \nBSDDB sometimes will \"overwrite\" data by just discarding a pointer to \nthe old data, and writing the replacement to a new location within the \nfile.  In that case, examining the file with a BSDDB library tool is not \ngoing to find this problem.  You'll have to examine the raw binary file \nas I did.  Instructions for verifying this problem are in the post.\n\nCan someone please verify that this is a real problem?  (and should we \nmaybe remove my post until there's a remediation plan?  This is problem \nthe best kind of problem to disclose after it's fixed)\n-Alan\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111110/5e93efa9/attachment.html>", "summary": "Alan posted private keys in plaintext and suspects that BSDDB may overwrite data without properly deleting it. He suggests examining the raw binary file."}], "thread_summary": {"title": "Wallet encryption issue", "categories": ["Bitcoin-development"], "authors": ["Alan Reiner"], "messages_count": 1, "total_messages_chars_count": 994}}, {"title": "[Bitcoin-development] BIP 0001 now active", "thread_messages": [{"author": "Amir Taaki", "date": "2011-11-10T19:35:00", "message_text_only": "I put the status for BIP 0001 to active now. Let me know if there's any disagreements with this. I'm on Freenode under the nickname genjix\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111110/89bae7f6/attachment.html>", "summary": "BIP 0001 status is now active. Contact genjix on Freenode if there are any disagreements. No further information provided."}], "thread_summary": {"title": "BIP 0001 now active", "categories": ["Bitcoin-development"], "authors": ["Amir Taaki"], "messages_count": 1, "total_messages_chars_count": 321}}, {"title": "[Bitcoin-development] [RFC] BIP 14 - Protocol Version and User Agent", "thread_messages": [{"author": "Amir Taaki", "date": "2011-11-10T21:16:01", "message_text_only": "Hi,\n\nhttps://en.bitcoin.it/wiki/BIP_0014\n\nThanks to Gavin Andresen for proof reading and suggesting clarifications. Thanks to Patrick Strateman for suggesting the hierarchical format and pointing out some flaws of browser user-agents to me.\n\nThe timeline is written in the past tense since BIPs are meant to be readable in the future for explaining why we took certain decisions with bitcoin. A nice cache for future historians when bitcoin is ubiquitous ;)\n\n\nThe next version 0.6 should be the protocol version which becomes peeled off from the current client. There are still some changes migrating into the protocol that need to be finished.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111110/e4da0fa6/attachment.html>", "summary": "BIP 0014 is a hierarchical deterministic wallet structure for Bitcoin. The next version 0.6 should include this protocol version."}, {"author": "Mike Hearn", "date": "2011-11-12T19:31:37", "message_text_only": "Looks pretty reasonable to me. If Gavin changes the mainline client to use\nthis format I'll change BitcoinJ as well. It'll need a bit of API work so\nclients are sure to set it up properly.\n\nOn Thu, Nov 10, 2011 at 10:16 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\n> Hi,\n>\n> https://en.bitcoin.it/wiki/BIP_0014\n>\n> Thanks to Gavin Andresen for proof reading and suggesting clarifications.\n> Thanks to Patrick Strateman for suggesting the hierarchical format and\n> pointing out some flaws of browser user-agents to me.\n>\n> The timeline is written in the past tense since BIPs are meant to be\n> readable in the future for explaining why we took certain decisions with\n> bitcoin. A nice cache for future historians when bitcoin is ubiquitous ;)\n>\n> The next version 0.6 should be the protocol version which becomes peeled\n> off from the current client. There are still some changes migrating into\n> the protocol that need to be finished.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> RSA(R) Conference 2012\n> Save $700 by Nov 18\n> Register now\n> http://p.sf.net/sfu/rsa-sfdev2dev1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111112/9d598ea3/attachment.html>", "summary": "A new Bitcoin Improvement Proposal (BIP 0014) has been introduced, which suggests a hierarchical format for multi-signature transactions. The proposal has been proofread by Gavin Andresen and is expected to be implemented in the next version of the protocol."}, {"author": "Amir Taaki", "date": "2011-11-13T20:52:53", "message_text_only": "Nice. I'll check with justmoon when I hopefully meet him at the conference. If all is OK, hopefully 0.6 will be the last protocol version bump for a while.\n\n\n\n________________________________\nFrom: Mike Hearn <mike at plan99.net>\nTo: Amir Taaki <zgenjix at yahoo.com>\nCc: \"bitcoin-development at lists.sourceforge.net\" <bitcoin-development at lists.sourceforge.net>\nSent: Saturday, November 12, 2011 7:31 PM\nSubject: Re: [Bitcoin-development] [RFC] BIP 14 - Protocol Version and User Agent\n\n\nLooks pretty reasonable to me. If Gavin changes the mainline client to use this format I'll change BitcoinJ as well. It'll need a bit of API work so clients are sure to set it up properly.\n\n\nOn Thu, Nov 10, 2011 at 10:16 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\nHi,\n>\n>\n>https://en.bitcoin.it/wiki/BIP_0014\n>\n>\n>Thanks to Gavin Andresen for proof reading and suggesting clarifications. Thanks to Patrick Strateman for suggesting the hierarchical format and pointing out some flaws of browser user-agents to me.\n>\n>\n>The timeline is written in the past tense since BIPs are meant to be readable in the future for explaining why we took certain decisions with bitcoin. A nice cache for future historians when bitcoin is ubiquitous ;)\n>\n>\n>\n>The next version 0.6 should be the protocol version which becomes peeled off from the current client. There are still some changes migrating into the protocol that need to be finished.\n>\n>\n>------------------------------------------------------------------------------\n>RSA(R) Conference 2012\n>Save $700 by Nov 18\n>Register now\n>http://p.sf.net/sfu/rsa-sfdev2dev1\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111113/a2a06f10/attachment.html>", "summary": "The proposed BIP 14 protocol version and user agent format is reasonable, pending changes to the mainline client and API work. Version 0.6 should be the last protocol version bump for a while."}, {"author": "Stefan Thomas", "date": "2011-11-14T08:48:56", "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111114/f5f219de/attachment.html>", "summary": "Unable to provide a summary as there is no text provided. The attachment is an HTML file."}, {"author": "Christian Decker", "date": "2011-11-14T12:09:23", "message_text_only": "Same here of course, but I'll keep the String short and fixed. I still\ndon't think there should be any reason for others to know my OS in order to\ncommunicate with me :-)\n\nOn Mon, Nov 14, 2011 at 9:48 AM, Stefan Thomas <moon at justmoon.de> wrote:\n\n>  Nice. I'll check with justmoon when I hopefully meet him at the\n> conference.\n>\n>\n> It's all fine with me. As soon as the original client switches to the new\n> format, we will, too.\n>\n>\n>\n>\n> On 11/13/2011 09:52 PM, Amir Taaki wrote:\n>\n>  Nice. I'll check with justmoon when I hopefully meet him at the\n> conference. If all is OK, hopefully 0.6 will be the last protocol version\n> bump for a while.\n>\n>   ------------------------------\n> *From:* Mike Hearn <mike at plan99.net> <mike at plan99.net>\n> *To:* Amir Taaki <zgenjix at yahoo.com> <zgenjix at yahoo.com>\n> *Cc:* \"bitcoin-development at lists.sourceforge.net\"<bitcoin-development at lists.sourceforge.net>\n> <bitcoin-development at lists.sourceforge.net><bitcoin-development at lists.sourceforge.net>\n> *Sent:* Saturday, November 12, 2011 7:31 PM\n> *Subject:* Re: [Bitcoin-development] [RFC] BIP 14 - Protocol Version and\n> User Agent\n>\n> Looks pretty reasonable to me. If Gavin changes the mainline client to use\n> this format I'll change BitcoinJ as well. It'll need a bit of API work so\n> clients are sure to set it up properly.\n>\n>  On Thu, Nov 10, 2011 at 10:16 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n>\n>  Hi,\n>\n>  https://en.bitcoin.it/wiki/BIP_0014\n>\n>  Thanks to Gavin Andresen for proof reading and suggesting\n> clarifications. Thanks to Patrick Strateman for suggesting the hierarchical\n> format and pointing out some flaws of browser user-agents to me.\n>\n>  The timeline is written in the past tense since BIPs are meant to be\n> readable in the future for explaining why we took certain decisions with\n> bitcoin. A nice cache for future historians when bitcoin is ubiquitous ;)\n>\n>  The next version 0.6 should be the protocol version which becomes peeled\n> off from the current client. There are still some changes migrating into\n> the protocol that need to be finished.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> RSA(R) Conference 2012\n> Save $700 by Nov 18\n> Register now\n> http://p.sf.net/sfu/rsa-sfdev2dev1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> RSA(R) Conference 2012\n> Save $700 by Nov 18\n> Register nowhttp://p.sf.net/sfu/rsa-sfdev2dev1\n>\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing listBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> RSA(R) Conference 2012\n> Save $700 by Nov 18\n> Register now\n> http://p.sf.net/sfu/rsa-sfdev2dev1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111114/bd9592dc/attachment.html>", "summary": "Discussion about Bitcoin protocol version and user agent format, with agreement to switch to a new format once the original client does."}], "thread_summary": {"title": "BIP 14 - Protocol Version and User Agent", "categories": ["Bitcoin-development", "RFC"], "authors": ["Stefan Thomas", "Mike Hearn", "Christian Decker", "Amir Taaki"], "messages_count": 5, "total_messages_chars_count": 7903, "convo_summary": "A new Bitcoin Improvement Proposal (BIP 0014) suggests a hierarchical format for multi-signature transactions. The proposal has been proofread and is expected to be implemented in the next version of the protocol. The group agrees to switch to a new format once the original client does."}}, {"title": "[Bitcoin-development] Icon licenses", "thread_messages": [{"author": "Luke-Jr", "date": "2011-11-16T00:54:57", "message_text_only": "As you noticed, we replaced most of the icons with license issues in\nBitcoin-Qt... but I intentionally did NOT replace the ones you created, \nassuming you would be willing to relicense them under the MIT (or similar) \nlicense. Could you commit a license change for these icons, ideally before \n0.5.0 final, please?\n\nLuke", "summary": "Bitcoin-Qt replaced icons with license issues, but the creator's icons were not replaced, and they are requested to relicense them under MIT."}], "thread_summary": {"title": "Icon licenses", "categories": ["Bitcoin-development"], "authors": ["Luke-Jr"], "messages_count": 1, "total_messages_chars_count": 320}}, {"title": "[Bitcoin-development] Announcement: Internet International Bank Account Number (IIBAN)", "thread_messages": [{"author": "Walter Stanish", "date": "2011-11-16T03:11:55", "message_text_only": "Payward Inc. has submitted the following draft to the IETF:\n https://datatracker.ietf.org/doc/draft-iiban\n\nAbstract:\n   An Internet IBAN (IIBAN) identifies an internet-based financial\n   endpoint in a manner that is superset-compatible with the existing\n   European Committee for Banking Standards (ECBS) International Bank\n   Acccount Number (IBAN) standard [ISO13616].\n\nRegards,\nWalter Stanish\nPayward, Inc.", "summary": "Payward Inc. has submitted a draft to IETF proposing an Internet IBAN (IIBAN) that identifies internet-based financial endpoints compatible with the existing IBAN standard."}], "thread_summary": {"title": "Announcement: Internet International Bank Account Number (IIBAN)", "categories": ["Bitcoin-development"], "authors": ["Walter Stanish"], "messages_count": 1, "total_messages_chars_count": 409}}, {"title": "[Bitcoin-development] Announcement: Internet Market Identification Code (IMIC)", "thread_messages": [{"author": "Walter Stanish", "date": "2011-11-16T03:13:05", "message_text_only": "Payward Inc. has submitted the following draft to the IETF:\n https://datatracker.ietf.org/doc/draft-imic\n\nAbstract:\n   An Internet MIC (IMIC) identifies an internet-based financial market\n   in a manner that is superset-compatible with the ISO's existing\n   Market Identification Code (MIC) standard [ISO10383].\n\nRegards,\nWalter Stanish\nPayward, Inc.", "summary": "Payward Inc. has submitted a draft to IETF proposing an Internet MIC that identifies internet-based financial markets compatible with ISO's MIC standard."}], "thread_summary": {"title": "Announcement: Internet Market Identification Code (IMIC)", "categories": ["Bitcoin-development"], "authors": ["Walter Stanish"], "messages_count": 1, "total_messages_chars_count": 350}}, {"title": "[Bitcoin-development] Release candidates: versions 0.4.1 and 0.5", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-11-16T16:34:28", "message_text_only": "I need help sanity testing these:\n  https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.4.1/test/\n  https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.0/test/\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen seeks assistance in sanity testing Bitcoin versions 0.4.1 and 0.5.0 available for download on SourceForge."}, {"author": "Tadas Varanavicius", "date": "2011-11-16T23:25:39", "message_text_only": "Hello,\n\nnewbie here, thanks for patience.\n\nI start 0.5.0 without wallet.dat. It creates 100 new keys. I then \nencrypt them. It should be now bug free and totally secure, so I back \nthe wallet up. I then click \"new address\", it doesn't use the old 2-100 \naddresses, instead generates a new batch, because it assumes the old \nones are leaked, but in fact they are not. I receive funds to my new 2nd \naddress (which is now not backed up). I lose the new wallet. Restore \nfrom backup. Bitcoins lost forever?\n\nSorry if false alarm, thanks.\n\nOn 11/16/2011 06:34 PM, Gavin Andresen wrote:\n> I need help sanity testing these:\n>    https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.4.1/test/\n>    https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.0/test/\n>\n-- \nTadas Varanavi\u010dius\n+37061529855", "summary": "User started Bitcoin 0.5.0 without wallet.dat, encrypted 100 new keys, backed up wallet, generated new addresses assuming old ones leaked, lost new wallet, bitcoins lost."}, {"author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba", "date": "2011-11-17T15:33:01", "message_text_only": "Gavin,\n\n Where is my \"Bitcoin Address\" within this new QT version?\n\n The windows appear but, I can't find my bitcoin address.\n\nCheers,\nThiago\n\nOn 16 November 2011 14:34, Gavin Andresen <gavinandresen at gmail.com> wrote:\n\n> I need help sanity testing these:\n>\n> https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.4.1/test/\n>\n> https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.0/test/\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> All the data continuously generated in your IT infrastructure\n> contains a definitive record of customers, application performance,\n> security threats, fraudulent activity, and more. Splunk takes this\n> data and makes sense of it. IT sense. And common sense.\n> http://p.sf.net/sfu/splunk-novd2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111117/20eafb59/attachment.html>", "summary": "A user is seeking help finding their Bitcoin address in a new version of QT, while Gavin Andresen requests help testing Bitcoin versions."}, {"author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba", "date": "2011-11-17T15:35:06", "message_text_only": "I am so sorry about this email, just find it.\n\n2011/11/17 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n\n> Gavin,\n>\n>  Where is my \"Bitcoin Address\" within this new QT version?\n>\n>  The windows appear but, I can't find my bitcoin address.\n>\n> Cheers,\n> Thiago\n>\n>\n> On 16 November 2011 14:34, Gavin Andresen <gavinandresen at gmail.com> wrote:\n>\n>> I need help sanity testing these:\n>>\n>> https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.4.1/test/\n>>\n>> https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.0/test/\n>>\n>> --\n>> --\n>> Gavin Andresen\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> All the data continuously generated in your IT infrastructure\n>> contains a definitive record of customers, application performance,\n>> security threats, fraudulent activity, and more. Splunk takes this\n>> data and makes sense of it. IT sense. And common sense.\n>> http://p.sf.net/sfu/splunk-novd2d\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111117/f9f2f212/attachment.html>", "summary": "Thiago asks Gavin where to find his Bitcoin address in the new QT version, while Gavin requests help testing Bitcoin versions."}, {"author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba", "date": "2011-11-17T16:26:52", "message_text_only": "Hi,\n\n Testing the 0.5.0 in Linux, I see a strange behaviour:\n\n 1- Open qt-client, blockchain stops the downloading at 10%... Wait 30\nminutes... not reach 11%...\n\n 2- Close and reopen the qt-client, blockchain start again at 0%... Normal!?\n\n 3- Now the download of the blockchain is working, reach 15% and growing...\n\n I have a open firewall for the Bitcoin protocol. My 0.4.0 client works\njust fine, with more than 30 connections at the same machine (but another\nLinux user).\n\n Also, where can I find the number of connections using new Bitcoin-QT?\n\nThanks!\nThiago\n\nOn 16 November 2011 14:34, Gavin Andresen <gavinandresen at gmail.com> wrote:\n\n> I need help sanity testing these:\n>\n> https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.4.1/test/\n>\n> https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.0/test/\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> All the data continuously generated in your IT infrastructure\n> contains a definitive record of customers, application performance,\n> security threats, fraudulent activity, and more. Splunk takes this\n> data and makes sense of it. IT sense. And common sense.\n> http://p.sf.net/sfu/splunk-novd2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111117/74425cd9/attachment.html>", "summary": "A user reports strange behavior with the Bitcoin client version 0.5.0 in Linux, including blockchain download stopping at 10% and restarting at 0%."}, {"author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba", "date": "2011-11-17T18:43:22", "message_text_only": "Guys,\n\n The bidcoin-qt for Linux does not have the Bitcoin icon at the Desktop\nPager (Ubuntu Oneiric 11.10).\n\n This is a cosmetic change.\n\nBest,\nThiago\n\n2011/11/17 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n\n> Hi,\n>\n>  Testing the 0.5.0 in Linux, I see a strange behaviour:\n>\n>  1- Open qt-client, blockchain stops the downloading at 10%... Wait 30\n> minutes... not reach 11%...\n>\n>  2- Close and reopen the qt-client, blockchain start again at 0%...\n> Normal!?\n>\n>  3- Now the download of the blockchain is working, reach 15% and growing...\n>\n>  I have a open firewall for the Bitcoin protocol. My 0.4.0 client works\n> just fine, with more than 30 connections at the same machine (but another\n> Linux user).\n>\n>  Also, where can I find the number of connections using new Bitcoin-QT?\n>\n> Thanks!\n> Thiago\n>\n> On 16 November 2011 14:34, Gavin Andresen <gavinandresen at gmail.com> wrote:\n>\n>> I need help sanity testing these:\n>>\n>> https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.4.1/test/\n>>\n>> https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.0/test/\n>>\n>> --\n>> --\n>> Gavin Andresen\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> All the data continuously generated in your IT infrastructure\n>> contains a definitive record of customers, application performance,\n>> security threats, fraudulent activity, and more. Splunk takes this\n>> data and makes sense of it. IT sense. And common sense.\n>> http://p.sf.net/sfu/splunk-novd2d\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111117/8aa6cc20/attachment.html>", "summary": "A user reports a cosmetic change in the Bitcoin-qt for Linux, as it does not have the Bitcoin icon at the Desktop Pager."}, {"author": "Michael Hendricks", "date": "2011-11-17T20:16:57", "message_text_only": "2011/11/17 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n\n> Testing the 0.5.0 in Linux, I see a strange behaviour:\n>\n>  1- Open qt-client, blockchain stops the downloading at 10%... Wait 30\n> minutes... not reach 11%...\n>\n>  2- Close and reopen the qt-client, blockchain start again at 0%...\n> Normal!?\n>\n>  3- Now the download of the blockchain is working, reach 15% and growing...\n>\n\nI've noticed this same behavior with 0.5 release candidates.  I remember\nseeing it with 0.4 also, so I think it's not a regression.  I haven't yet\npinned down the cause.  It would be nice to fix; especially for those\ndownloading the blockchain for the first time.\n\n Also, where can I find the number of connections using new Bitcoin-QT?\n>\n\nHover over the signal icon in the lower right corner.  The icon looks like\na cellphone signal indicator.  The number of connections is displayed in a\ntooltip.\n\n-- \nMichael\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111117/534407c9/attachment.html>", "summary": "A user reports a strange behavior with the 0.5.0 version of Bitcoin-QT in Linux, where the blockchain stops downloading at 10% and then restarts at 0% after closing and reopening the client. The issue has been noticed before and needs fixing. The number of connections can be found by hovering over the signal icon."}, {"author": "Jordan Mack", "date": "2011-11-17T20:24:16", "message_text_only": "I'm getting an intermittent crashes on bitcoin-qt.exe when doing RPC \ncommands. I seem to be able to get it to occur most frequently when I \nsend a bunch of RPC commands in rapid succession. I have never \nencountered it with \"getbalance\", but I have with some other commands. \nSending a single letter as the command seems to trigger the crash most \noften.\n\nI was unable to generate the crash using 0.4.1.\n\nI was unable to find an issue logged for this, although I wonder if it \nis related to https://github.com/bitcoin/bitcoin/issues/639\n\nCan anyone make suggestion on any other debug information I can gather \nbefore submitting an issue?\n\n\n\nWindows 7 x64\nBitcoin 0.5 rc5\n\nFaulting application name: bitcoin-qt.exe, version: 0.0.0.0, time stamp: \n0x4d44aa00\nFaulting module name: bitcoin-qt.exe, version: 0.0.0.0, time stamp: \n0x4d44aa00\nException code: 0x40000015\nFault offset: 0x00e4b7fa\nFaulting process id: 0xf80\nFaulting application start time: 0x01cca56065158dac\nFaulting application path: \nC:\\Users\\jmack\\Desktop\\bitcoin-0.5.0rc5-win32\\bitcoin-qt.exe\nFaulting module path: \nC:\\Users\\jmack\\Desktop\\bitcoin-0.5.0rc5-win32\\bitcoin-qt.exe\nReport Id: 050b54aa-1155-11e1-86c0-f46d0496aff0\n\n\n\nOn 11/16/2011 8:34 AM, Gavin Andresen wrote:\n > I need help sanity testing these:\n > \nhttps://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.4.1/test/\n > \nhttps://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.5.0/test/\n >", "summary": "Bitcoin-qt.exe crashes intermittently during rapid RPC command sending, with single letter commands triggering the crash most often. No issue has been logged."}], "thread_summary": {"title": "Release candidates: versions 0.4.1 and 0.5", "categories": ["Bitcoin-development"], "authors": ["Michael Hendricks", "Tadas Varanavicius", "Jordan Mack", "Gavin Andresen", "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba"], "messages_count": 8, "total_messages_chars_count": 9653, "convo_summary": "Gavin Andresen seeks help testing Bitcoin versions 0.4.1 and 0.5.0. Users report issues with the 0.5.0 version, including strange behavior, cosmetic changes, and crashes during rapid RPC command sending. One user lost bitcoins after generating new addresses and losing their wallet."}}, {"title": "[Bitcoin-development] There will be a release candidate 6...", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-11-17T14:28:27", "message_text_only": "I got email from a tester who gave this feedback:\n\n> I think that user behaviour: encrypt wallet -> backup -> do some activity ->\n> restore backup -> BOOM. Is perfectly natural user behaviour and it will\n> happen. For example when generating a wallet on a secure computer and then\n> moving it to an insecure one.\n\nI agree that is likely to happen and, when it does, will be disastrous.\nSo I'll be reworking the wallet encrypt/rewrite code today and\ncreating a release candidate 6.\n\nMy previous attempt (encrypt, invalidating keypool, then unlock and write\na new keypool) resulted in unencrypted private keys in the new wallet.\n\nI think this will work, I'll implement and test today.\n\nInvalidate all the old keypool keys in the old wallet.Write new\nkeypool keys to the old wallet.Encrypt all the keys in the old\nwallet.Rewrite the old wallet to create a new wallet.Shutdown/restart.\nIF ANYBODY IS WILLING TO HELP:\n\nThere is still a mysterious problem with bdb throwing an exception\nwhen dbenv.close(0) is called during shutdown. If you can compile\na -g version of bdb and then step through DbEnv::close in a debugger\nand tell me why it is throwing an exception that would be\nextremely helpful.\n-- \n--\nGavin Andresen", "summary": "A tester reported a potential issue with wallet encryption, backup, and restoration. The developer is reworking the code and creating a new release candidate."}, {"author": "Michael Offel", "date": "2011-11-17T15:35:36", "message_text_only": "If you are going to support this use case, you should also notify the user\non wallet changes that results in invalidated backup. For example whenever\nthe key pool gets extended.\n\n-----Original Message-----\nFrom: Gavin Andresen [mailto:gavinandresen at gmail.com] \nSent: 17 November 2011 14:28\nTo: Bitcoin Dev\nSubject: [Bitcoin-development] There will be a release candidate 6...\n\nI got email from a tester who gave this feedback:\n\n> I think that user behaviour: encrypt wallet -> backup -> do some \n> activity -> restore backup -> BOOM. Is perfectly natural user \n> behaviour and it will happen. For example when generating a wallet on \n> a secure computer and then moving it to an insecure one.\n\nI agree that is likely to happen and, when it does, will be disastrous.\nSo I'll be reworking the wallet encrypt/rewrite code today and creating a\nrelease candidate 6.\n\nMy previous attempt (encrypt, invalidating keypool, then unlock and write a\nnew keypool) resulted in unencrypted private keys in the new wallet.\n\nI think this will work, I'll implement and test today.\n\nInvalidate all the old keypool keys in the old wallet.Write new keypool keys\nto the old wallet.Encrypt all the keys in the old wallet.Rewrite the old\nwallet to create a new wallet.Shutdown/restart.\nIF ANYBODY IS WILLING TO HELP:\n\nThere is still a mysterious problem with bdb throwing an exception when\ndbenv.close(0) is called during shutdown. If you can compile a -g version of\nbdb and then step through DbEnv::close in a debugger and tell me why it is\nthrowing an exception that would be extremely helpful.\n--\n--\nGavin Andresen\n\n----------------------------------------------------------------------------\n--\nAll the data continuously generated in your IT infrastructure contains a\ndefinitive record of customers, application performance, security threats,\nfraudulent activity, and more. Splunk takes this data and makes sense of it.\nIT sense. And common sense.\nhttp://p.sf.net/sfu/splunk-novd2d\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "Bitcoin developer plans to rework wallet encrypt/rewrite code to prevent invalidated backups resulting from key pool extension. Users should be notified of wallet changes."}], "thread_summary": {"title": "There will be a release candidate 6...", "categories": ["Bitcoin-development"], "authors": ["Michael Offel", "Gavin Andresen"], "messages_count": 2, "total_messages_chars_count": 3369, "convo_summary": "Bitcoin developer Gavin Andresen reported a potential issue with wallet encryption, backup, and restoration. The code is being reworked and a new release candidate is being created to prevent invalidated backups resulting from key pool extension. Users should be notified of wallet changes."}}, {"title": "[Bitcoin-development] Need help testing/debugging: Linux64", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-11-19T16:20:48", "message_text_only": "There is one issue holding up a 0.5.0/0.4.1 final release:  I've seen\na couple of bug reports of crashes on startup when re-encrypting\npreviously encrypted wallets on Linux64 systems.\n\nI've tried to reproduce on Ubuntu 10.10 server and \"it worked for me\"\n-- so I need help figuring out what is going on (is it only bitcoin-qt\nthat is crashing? Is Ubuntu OK but other linux variations broken?\netc)\n\n-- \n--\nGavin Andresen", "summary": "A bug causing crashes on startup when re-encrypting previously encrypted wallets on Linux64 systems is holding up the 0.5.0/0.4.1 final release."}, {"author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba", "date": "2011-11-21T16:28:03", "message_text_only": "Gavin,\n\n I try to reproduce the error by doing this (Ubuntu 11.10 64bits):\n\n rm -rf ~/bitcoin # CAUTION\n ./bitcoin-0.4.0-linux/bin/64/bitcoin\n\n * Encrypt my wallet\n * Close Bitcoin 0.4.0\n\n Next open Bitcoin 0.5.0rc7:\n ./bitcoin-0.5.0rc7-linux/bin/64/bitcoin-qt\n\n * Automatic wallet upgrade (I guess) working... No crashs...\n\nBest,\nThiago\n\nOn 19 November 2011 14:20, Gavin Andresen <gavinandresen at gmail.com> wrote:\n\n> There is one issue holding up a 0.5.0/0.4.1 final release:  I've seen\n> a couple of bug reports of crashes on startup when re-encrypting\n> previously encrypted wallets on Linux64 systems.\n>\n> I've tried to reproduce on Ubuntu 10.10 server and \"it worked for me\"\n> -- so I need help figuring out what is going on (is it only bitcoin-qt\n> that is crashing? Is Ubuntu OK but other linux variations broken?\n> etc)\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> All the data continuously generated in your IT infrastructure\n> contains a definitive record of customers, application performance,\n> security threats, fraudulent activity, and more. Splunk takes this\n> data and makes sense of it. IT sense. And common sense.\n> http://p.sf.net/sfu/splunk-novd2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111121/66834c93/attachment.html>", "summary": "A bug report of crashes on startup when re-encrypting previously encrypted wallets on Linux64 systems is holding up a 0.5.0/0.4.1 final release."}], "thread_summary": {"title": "Need help testing/debugging: Linux64", "categories": ["Bitcoin-development"], "authors": ["Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba", "Gavin Andresen"], "messages_count": 2, "total_messages_chars_count": 2043, "convo_summary": "A bug causing crashes on Linux64 systems when re-encrypting previously encrypted wallets is delaying the final release of 0.5.0/0.4.1, according to Gavin Andresen and Martinx."}}, {"title": "[Bitcoin-development] Compressed public keys", "thread_messages": [{"author": "Pieter Wuille", "date": "2011-11-21T02:34:30", "message_text_only": "Hello all,\n\nI just submitted a pull request (#649) that enables the use of compressed\npublic keys in Bitcoin. As discovered by roconnor (IRC), this is possible\nin such a way that old clients verify and relay them without problems.\nThey are supported by default by OpenSSL, and all alternative\nimplementations that use OpenSSL should support these keys just fine as\nwell.\n\nCompressed public keys are 33 bytes long, and contain the same information\nas normal 65-byte keys. They only contain the X coordinate of the point,\nwhile the value of the Y-coordinate is reconstructed upon use. This\nrequires some CPU, but only a fraction of the cost of verifying a\nsignature.\n\nIn theory, one private key now corresponds to two public keys, and thus\ntwo different addresses. As this would probably cause confusion, this\nimplementation chooses only one of them (at key generation time). All\nkeys generated when -compressedpubkeys is active, are compressed, and\ntheir reported address is that corresponding to its compressed pubkey.\n\nThings that need attention:\n* Do all client implementations support it?\n* How to represent secrets for compressed pubkeys?\n* send-to-pubkey transactions are untested, for now\n\n-- \nPieter", "summary": "A pull request has been submitted to enable the use of compressed public keys in Bitcoin, which only contain the X coordinate of the point, reducing the cost of verifying a signature."}, {"author": "Pieter Wuille", "date": "2011-11-21T11:48:20", "message_text_only": "On Mon, Nov 21, 2011 at 03:34:28AM +0100, Pieter Wuille wrote:\n> Hello all,\n> \n> Things that need attention:\n> * Do all client implementations support it?\n\nTo help in testing this: this address corresponds to a compressed\npublic key:\nhttp://blockexplorer.com/testnet/address/mwUyUCWRp9WqyNgrGAbghs7KjTL8zjFNKN\n\n-- \nPieter", "summary": "Pieter Wuille raises a concern about client implementation support and shares a compressed public key for testing."}], "thread_summary": {"title": "Compressed public keys", "categories": ["Bitcoin-development"], "authors": ["Pieter Wuille"], "messages_count": 2, "total_messages_chars_count": 1527, "convo_summary": "A pull request has been submitted to enable compressed public keys in Bitcoin, reducing signature verification costs. Pieter Wuille raises concerns about client implementation support and shares a compressed public key for testing."}}, {"title": "[Bitcoin-development] State of Bitcoin Development: November Brain Dump", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-11-22T01:06:27", "message_text_only": "It has been a busy month; here's what I'm thinking about:\n\n\u2022 It's great to get 0.5 out; congratulations to Wladimir for doing a\ngreat job with the new GUI.\n\n\u2022 The wallet encryption bug was embarrassing and stressful, and chewed\nup a lot of my time over the past couple of weeks. Bugs happen, but\nI've been spending time thinking about what I can do differently to\nmake it less likely major bugs slip into releases.\n\nFinding the money to hire some professional QA people to help create\ntest plans and then execute them (the test plans, not the QA people)\nis one possible answer. If you have experience finding funding for\nopen source projects (or know somebody who does) I'd like to talk with\nyou--  I would much rather spend my time writing code and thinking\nabout technical issues instead of trying to figure out if advertising\nor sponsorship or a Donate menu entry in the client is a reasonable\nway to get more testing resources for the project.\n\nLast month I mentioned I was thinking about Organization; there is a\nnon-profit organization forming to handle Bitcoin PR and marketing,\nwhich takes care of one big area of work.\n\n\u2022 The BIP (Bitcoin Improvement Proposal) process seems to be working\nwell, with good proposals and good discussions (both here and on the\nForums):\n  https://en.bitcoin.it/wiki/Bitcoin_Improvement_Proposals\n\nThings I think are high priority but am not planning on working on:\n\n\u2022 Implement BIP 14 (separate the protocol and client versions)\n\n\u2022 Rework/rethink wallet handling:  I think we could do a much better\njob with both encryption and backups.\n\n\u2022 Work on higher-level multi-signature/multi-device transaction\napproval; I really want a version of bitcoin-qt that requires me to\npoke an \"OK\" button on my iPhone before it can send coins.\n\n\u2022 Code clean-up; I'd like to see more small code refactors that moves\nnon-performance-critical code from .h files to .cpp files, makes\nclasses  more self-contained, etc. \"Rename the world\" or \"change every\nsingle file\"  pull requests are hard to deal with because there is\nnever a good time  to pull them, but a steady stream of \"makes the\ncode a little bit easier  to work with\" would be a Good Thing.\nEspecially if you submit unit  tests for whatever you touch...\n\n\nThinks I think are high priority and AM planning on working on; if any\nof them inspire you, feel free to steal them from me, I still have too\nmany things on my TODO list:\n\n\u2022 Create a pull request for OP_EVAL/multisignature transactions\n\n\u2022 Back-port OP_EVAL/multisig to 0.3/0.4 and release patches to  make\nit easy for the big mining pools to support it, so the network  is\nready for multisig/multi-device transactions.\n\n\u2022 Work on the 'headers-only' branch, so users have a better first-time\nexperience.\n\n\u2022\u00a0I want to start doing some internal re-architecting, and I think\nporting my old monitor transactions/blocks patch to use Boost.Signals\nmight be a good place to start.  The internal pieces are pretty\nobvious (GUI, database, network, wallet, transaction validation, and\nblock-chain handling) and I think starting to rearchitect to use\nBoost.Signals for internal communications would be a big step towards\nmore re-usable code.\n\n\u2022 Get back to the cross-platform testing infrastructure tool, and lots\nof good and  bad blockchains that can be used for cross-platform\ntesting.\n\n\nI'm probably forgetting several things, but I think that's enough for\nnow. If you're going to the conference in Prague, have fun!  Please\nfigure out all the hard questions while you're there, and report\nback....\n\n-------------------\n\nPrevious Brain Dump:\nhttps://sourceforge.net/mailarchive/message.php?msg_id=28223657\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen, a professional summarizer, discusses recent developments in Bitcoin, including a new GUI release, a wallet encryption bug, and plans for future improvements."}, {"author": "Luke-Jr", "date": "2011-11-22T01:11:46", "message_text_only": "On Monday, November 21, 2011 8:06:27 PM Gavin Andresen wrote:\n> Finding the money to hire some professional QA people to help create\n> test plans and then execute them (the test plans, not the QA people)\n> is one possible answer.\n\nNot prioritizing some unannounced \"release schedule\" over getting bugs fixed \nbefore making the release is another part of the answer, at least.", "summary": "Hiring professional QA people to create and execute test plans and prioritizing bug fixes over release schedules are solutions to improve software quality."}], "thread_summary": {"title": "State of Bitcoin Development: November Brain Dump", "categories": ["Bitcoin-development"], "authors": ["Luke-Jr", "Gavin Andresen"], "messages_count": 2, "total_messages_chars_count": 4031, "convo_summary": "Gavin Andresen and Luke-Jr discuss Bitcoin updates, including a new GUI release and a wallet encryption bug. Luke-Jr suggests hiring professional QA people and prioritizing bug fixes to improve software quality."}}, {"title": "[Bitcoin-development] Addressing rapid changes in mining power", "thread_messages": [{"author": "Andy Parkins", "date": "2011-11-23T10:35:42", "message_text_only": "Hello,\n\nOne problem with Bitcoin is that if large numbers of miners suddenly switch \noff, the network takes a long time to adapt (since the adaption time is a \nfunction of blocks generated, and the block generation rate has changed).  The \nsame problem exists in the other direction, but an increased generation rate \nfor a little while doesn't really do any harm.\n\nI had this idea as a way of completely normalising the block generation rate, \nregardless of network power.  I hesitate to offer it, as I get shouted down a \nlot, but what the hell...\n\nLet's imagine that the whole network shares a clock (which it does already).  \nLet's abandon the idea of a target difficulty.  Instead, every node just \ngenerates the most difficulty block it can.  Simultaneously, every node is \nlistening for \"the most difficult block generated before time T\"; with T being \npicked to be the block generation rate (10 minutes).\n\nEvery node is therefore generating blocks and comparing not against some \nmoving average determined target, but rather against the most difficult \nrecently received block.  If the generated block is harder than the received \nblock, then it gets broadcast.\n\nClearly, early on in the block, the traffic would be high, but that could be \nlimited with a bit of intelligence -- there's no point broadcasting your best \nblocks in minute 0 of the current block... you know everyone will beat it, as \nit was so easy.  So the rule would be broadcasts only start at T/2 plus a \nlittle randomisation.  There wouldn't be that many because someone will have \ngenerated a pretty good block by chance in the first half, and that will \nquickly stop anybody else from bothering to broadcast their easier block.  \nThere is no advantage to broadcasting a lesser block, so there is no incentive \nto cheat.\n\nAs always: the most difficult chain wins; and blocks with out-of-bounds times \nare rejected regardless of difficulty.  Everyone therefore has an incentive to \nbase their next block on the block with highest difficulty from the previous \nperiod.\n\nThe block period is now guaranteed to be 10 minutes (or in fact, whatever \nperiod you like, there is no danger at all in changing it to 2 minutes); and \nthere is no change of block generation rate with network power.  Changes in \nnetwork power merely adjust the average difficulty of the best block per \nperiod.  The cost is higher network traffic, because there are block \nbroadcasts that don't necessarily make it to the end.  However, there's no \nneed to broadcast the full block, only the header.  If that block turns out to \nbe the winner, then the other nodes will request the full block at the end of \nthe period, and will check it's valid.  If it's not then the next highest on \nthe list will be requested.  So again, \n\nI recognise that this is a pretty large change to make; and so don't really \nexpect it to happen.  Perhaps one day though... when all the wishlist items go \ninto one huge protocol overhaul.\n\n\n\nAndy\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111123/3a6d159f/attachment.sig>", "summary": "A proposal to normalize the block generation rate in Bitcoin by having every node generate the most difficult block it can, without a target difficulty."}, {"author": "Jorge Tim\u00f3n", "date": "2011-11-23T11:25:43", "message_text_only": "2011/11/23, Andy Parkins <andyparkins at gmail.com>:\n> Let's abandon the idea of a target difficulty.  Instead, every node just\n > generates the most difficulty block it can.  Simultaneously, every node is\n > listening for \"the most difficult block generated before time T\"; with T\n > being\n > picked to be the block generation rate (10 minutes).\n\nA miner could try to obtain more difficulty out of time and cheat its\nreported datetime (T).\n\nJorge Tim\u00f3n", "summary": "Abandon target difficulty, nodes generate most difficult block possible. Listen for most difficult block generated before time T. Risk of cheating."}, {"author": "Andy Parkins", "date": "2011-11-23T11:30:58", "message_text_only": "On 2011 November 23 Wednesday, Jorge Tim\u00f3n wrote:\n> 2011/11/23, Andy Parkins <andyparkins at gmail.com>:\n> > Let's abandon the idea of a target difficulty.  Instead, every node just\n> > \n>  > generates the most difficulty block it can.  Simultaneously, every node\n>  > is listening for \"the most difficult block generated before time T\";\n>  > with T being\n>  > picked to be the block generation rate (10 minutes).\n> \n> A miner could try to obtain more difficulty out of time and cheat its\n> reported datetime (T).\n\nJust as with the current system.\n\nThe defence is that on receipt of a block, its timestamp is checked against \nthe node's own clock and averaged network clock.  Blocks out of that band are \nrejected.\n\n\nAndy\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111123/87748873/attachment.sig>", "summary": "Nodes generate the most difficult block they can, while listening for the most difficult block generated before time T, with T being the block generation rate."}, {"author": "Jorge Tim\u00f3n", "date": "2011-11-23T11:51:00", "message_text_only": "With the current system, the timestamp can also be cheated, but miners\nhave no direct incentive to do it. With your system, they increase\ntheir probability of mining a block by putting a false timestamp.\nAlso, where's the network clock you're talking about? Isn't it the\ntimestamps in the blockchain?\n\n\n\n2011/11/23, Andy Parkins <andyparkins at gmail.com>:\n> On 2011 November 23 Wednesday, Jorge Tim\u00f3n wrote:\n>> 2011/11/23, Andy Parkins <andyparkins at gmail.com>:\n>> > Let's abandon the idea of a target difficulty.  Instead, every node just\n>> >\n>>  > generates the most difficulty block it can.  Simultaneously, every node\n>>  > is listening for \"the most difficult block generated before time T\";\n>>  > with T being\n>>  > picked to be the block generation rate (10 minutes).\n>>\n>> A miner could try to obtain more difficulty out of time and cheat its\n>> reported datetime (T).\n>\n> Just as with the current system.\n>\n> The defence is that on receipt of a block, its timestamp is checked against\n> the node's own clock and averaged network clock.  Blocks out of that band\n> are\n> rejected.\n>\n>\n> Andy\n> --\n> Dr Andy Parkins\n> andyparkins at gmail.com\n>\n\n\n-- \nJorge Tim\u00f3n", "summary": "Proposed system for generating the most difficult block, but concerns raised about miners cheating the timestamp and lack of network clock."}, {"author": "Christian Decker", "date": "2011-11-23T12:10:55", "message_text_only": "First of all I do agree that a method for adjusting the difficulty in a\nhuge power drop is needed (I don't see it so much in power rises).\n\nThe current block generation with a fixed difficulty was chosen because it\nit clear when to adjust and to what target difficulty it has to be\nadjusted. If we were to use synchronized time windows and select the\nhardest block it gets incredibly complicated as synchronization is not\npossible in distributed systems. Even the smallest drift would allow for\nforks in the chain all over the place. Furthermore the delay in propagation\nwill also cause forks.\n\nIf 1/2 of the network see one block as the hardest, and for the rest of the\nnetwork it came too late then we'll have a fork that stays with us quite a\nwhile.\n\nThe block chain is described as a timestamp server in the paper, but it is\nmore of a proof-of-existence before, as the contained timestamp cannot be\ntrusted anyway.\n\nRegards,\nChris\n\n2011/11/23 Jorge Tim\u00f3n <timon.elviejo at gmail.com>\n\n> With the current system, the timestamp can also be cheated, but miners\n> have no direct incentive to do it. With your system, they increase\n> their probability of mining a block by putting a false timestamp.\n> Also, where's the network clock you're talking about? Isn't it the\n> timestamps in the blockchain?\n>\n>\n>\n> 2011/11/23, Andy Parkins <andyparkins at gmail.com>:\n> > On 2011 November 23 Wednesday, Jorge Tim\u00f3n wrote:\n> >> 2011/11/23, Andy Parkins <andyparkins at gmail.com>:\n> >> > Let's abandon the idea of a target difficulty.  Instead, every node\n> just\n> >> >\n> >>  > generates the most difficulty block it can.  Simultaneously, every\n> node\n> >>  > is listening for \"the most difficult block generated before time T\";\n> >>  > with T being\n> >>  > picked to be the block generation rate (10 minutes).\n> >>\n> >> A miner could try to obtain more difficulty out of time and cheat its\n> >> reported datetime (T).\n> >\n> > Just as with the current system.\n> >\n> > The defence is that on receipt of a block, its timestamp is checked\n> against\n> > the node's own clock and averaged network clock.  Blocks out of that band\n> > are\n> > rejected.\n> >\n> >\n> > Andy\n> > --\n> > Dr Andy Parkins\n> > andyparkins at gmail.com\n> >\n>\n>\n> --\n> Jorge Tim\u00f3n\n>\n>\n> ------------------------------------------------------------------------------\n> All the data continuously generated in your IT infrastructure\n> contains a definitive record of customers, application performance,\n> security threats, fraudulent activity, and more. Splunk takes this\n> data and makes sense of it. IT sense. And common sense.\n> http://p.sf.net/sfu/splunk-novd2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111123/1d2aa84d/attachment.html>", "summary": "A method for adjusting difficulty in a power drop is needed, but using synchronized time windows and selecting the hardest block is complicated. The delay in propagation will also cause forks."}, {"author": "Andy Parkins", "date": "2011-11-23T13:13:12", "message_text_only": "On 2011 November 23 Wednesday, Christian Decker wrote:\n\n> The current block generation with a fixed difficulty was chosen because it\n> it clear when to adjust and to what target difficulty it has to be\n> adjusted. If we were to use synchronized time windows and select the\n> hardest block it gets incredibly complicated as synchronization is not\n> possible in distributed systems. Even the smallest drift would allow for\n> forks in the chain all over the place. Furthermore the delay in propagation\n> will also cause forks.\n> \n> If 1/2 of the network see one block as the hardest, and for the rest of the\n> network it came too late then we'll have a fork that stays with us quite a\n> while.\n> \n> The block chain is described as a timestamp server in the paper, but it is\n> more of a proof-of-existence before, as the contained timestamp cannot be\n> trusted anyway.\n\nThese are reasonable objections.  My counter is this:\n\nLet's view block difficulty as a measure of time, not time itself.  The \ntimestamp is merely a convenience for the block.  You cannot fake the \ncomputing power needed for a particular difficulty; so the hardest chain \nalways wins (note: hardest chain).\n\nIf I am a miner, I have two choices:\n\n  (a) try to replace the top block on the current hardest chain\n  (b) try to append to the current hardest chain\n\nEither of these is acceptable; but in case (a) I have to generate a more \ndifficult block to replace it; in case (b), at the start of the window, any \ndifficulty is acceptable (however, I'm competing with other miners, so _any_ \ndifficulty won't beat them).\n\nThe rule then is that you're trying to win the one block reward that is \navailable every 10 minutes; and your peers will be rejecting blocks with \ntimestamps that are lies.\n\nPerhaps an example...\n\n - I (a node), download the blockchain\n - The blockchain has N potential heads.  Each of those heads has a time, t\n   and a sum_of_difficulty.\n - The next block reward is going to go to the highest difficulty with\n   t < timestamp < (t + T) _and_ verified timestamp (i.e. not received more\n   than, say 5 minutes, from its claimed timestamp).\n - I can choose any head to start generating from, but given that it's the\n   highest difficulty chain that's going to win the next reward (not the \n   highest difficulty block), I will surely pick the most difficult?\n - A rogue miner then issues a block with a fake timestamp; it actually\n   generated at (t + T + 5) but claims (t + 5).  Should I start using\n   that block as my new head?  Obviously not, because my peers might decide\n   that it is a lie and reject it because it was received too late, making my\n   work useless.  It is in my interest to pick a head that is honest.\n\nResolving forks is easy:\n\n - 50 coins every ten minutes only\n - most difficult chain wins\n\nI'm certainly not saying it's a simple change.  There are certainly areas I \nhaven't thought about, and could be game-overs; but I do like the idea of \nthere being no target difficulty, and instead the blocks are issued at a fixed \nten minute rate (or rather the rewards are).\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111123/7405827f/attachment.sig>", "summary": "The author proposes a change to Bitcoin's block generation process, suggesting that block difficulty be viewed as a measure of time, not time itself."}, {"author": "Christian Decker", "date": "2011-11-23T14:38:55", "message_text_only": "Just brainstorming here, no idea if this would work:\n\n   - Pick any old block\n   - Create a chain fork by creating simpler blocks on top of your chosen\n   one\n   - The chain will not be accepted by others\n   - At some point you might find an incredibly hard block that makes your\n   forked chain the hardest one in the network\n   - Suddenly all your blocks are valid and you force people to switch to\n   your forked chain\n\nIf this is possible it would allow you to revoke all transactions and claim\nall the mined coins since you forked. My point is that the notion of\nhardest chain is not so simple.\n\nThe difficulty of invalidating a chain is dramatically reduced with your\ntime window approach, by not requiring a given difficulty, and relying on\nsynchronized time windows.\n\nRegards,\nChris\n\nOn Wed, Nov 23, 2011 at 2:13 PM, Andy Parkins <andyparkins at gmail.com> wrote:\n\n> On 2011 November 23 Wednesday, Christian Decker wrote:\n>\n> > The current block generation with a fixed difficulty was chosen because\n> it\n> > it clear when to adjust and to what target difficulty it has to be\n> > adjusted. If we were to use synchronized time windows and select the\n> > hardest block it gets incredibly complicated as synchronization is not\n> > possible in distributed systems. Even the smallest drift would allow for\n> > forks in the chain all over the place. Furthermore the delay in\n> propagation\n> > will also cause forks.\n> >\n> > If 1/2 of the network see one block as the hardest, and for the rest of\n> the\n> > network it came too late then we'll have a fork that stays with us quite\n> a\n> > while.\n> >\n> > The block chain is described as a timestamp server in the paper, but it\n> is\n> > more of a proof-of-existence before, as the contained timestamp cannot be\n> > trusted anyway.\n>\n> These are reasonable objections.  My counter is this:\n>\n> Let's view block difficulty as a measure of time, not time itself.  The\n> timestamp is merely a convenience for the block.  You cannot fake the\n> computing power needed for a particular difficulty; so the hardest chain\n> always wins (note: hardest chain).\n>\n> If I am a miner, I have two choices:\n>\n>  (a) try to replace the top block on the current hardest chain\n>  (b) try to append to the current hardest chain\n>\n> Either of these is acceptable; but in case (a) I have to generate a more\n> difficult block to replace it; in case (b), at the start of the window, any\n> difficulty is acceptable (however, I'm competing with other miners, so\n> _any_\n> difficulty won't beat them).\n>\n> The rule then is that you're trying to win the one block reward that is\n> available every 10 minutes; and your peers will be rejecting blocks with\n> timestamps that are lies.\n>\n> Perhaps an example...\n>\n>  - I (a node), download the blockchain\n>  - The blockchain has N potential heads.  Each of those heads has a time, t\n>   and a sum_of_difficulty.\n>  - The next block reward is going to go to the highest difficulty with\n>   t < timestamp < (t + T) _and_ verified timestamp (i.e. not received more\n>   than, say 5 minutes, from its claimed timestamp).\n>  - I can choose any head to start generating from, but given that it's the\n>   highest difficulty chain that's going to win the next reward (not the\n>   highest difficulty block), I will surely pick the most difficult?\n>  - A rogue miner then issues a block with a fake timestamp; it actually\n>   generated at (t + T + 5) but claims (t + 5).  Should I start using\n>   that block as my new head?  Obviously not, because my peers might decide\n>   that it is a lie and reject it because it was received too late, making\n> my\n>   work useless.  It is in my interest to pick a head that is honest.\n>\n> Resolving forks is easy:\n>\n>  - 50 coins every ten minutes only\n>  - most difficult chain wins\n>\n> I'm certainly not saying it's a simple change.  There are certainly areas I\n> haven't thought about, and could be game-overs; but I do like the idea of\n> there being no target difficulty, and instead the blocks are issued at a\n> fixed\n> ten minute rate (or rather the rewards are).\n>\n>\n> Andy\n>\n> --\n> Dr Andy Parkins\n> andyparkins at gmail.com\n>\n>\n> ------------------------------------------------------------------------------\n> All the data continuously generated in your IT infrastructure\n> contains a definitive record of customers, application performance,\n> security threats, fraudulent activity, and more. Splunk takes this\n> data and makes sense of it. IT sense. And common sense.\n> http://p.sf.net/sfu/splunk-novd2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111123/9dfcdfc0/attachment.html>", "summary": "A proposal to change the Bitcoin blockchain to a fixed ten-minute rate for block rewards, with the most difficult chain winning."}, {"author": "Gavin Andresen", "date": "2011-11-23T15:09:10", "message_text_only": "On Wed, Nov 23, 2011 at 9:38 AM, Christian Decker\n<decker.christian at gmail.com> wrote:\n> At some point you might find an incredibly hard block that makes your forked\n> chain the hardest one in the network\n\nSeems to me that's the real problem with any \"hardest block found in X\nminutes\" scheme.\n\nIf I get lucky and find a really extremely hard block then I have an\nincentive to keep it secret and build a couple more blocks on top of\nit, then announce them all at the same time.\n\nIf the rest of the network rejects my longer chain because I didn't\nannounce the extremely hard block in a timely fashion... then how\ncould the network ever recover from a real network split?  A network\nsplit/rejoin will look exactly the same.\n\nBitcoin as-is doesn't have the \"I got lucky and found an extremely\nhard block\" problem because the difficulty TARGET is used to compute\nchain difficulty, not the actual hashes found.\n\n\n---\n\nPS: I proposed a different method for dealing with large hash power\ndrops for the testnet on the Forums yesterday, and am testing it\ntoday.\n\n-- \n--\nGavin Andresen", "summary": "A hard block found in a short time frame could incentivize miners to keep it secret and build more blocks on top of it, causing a potential network split."}, {"author": "Alan Reiner", "date": "2011-11-23T15:35:06", "message_text_only": "I can substantiate Gavin's point quite powerfully: a couple months ago I \ndid a search for the \"hardest\" block in the network and found a *very \n**impressive* one:\n\nhttps://bitcointalk.org/index.php?topic=29675.0\n\nThat block has a difficulty of **36 billion** when the network had a \ndifficulty of **1.5 million**, which is 24,000 times harder than the \ntarget.  If we were going by the /actual /hardest chain instead \ntarget-based-hardest chain, /then this block produced in July would \nmight still represent the longest chain!/\n\nYes, that means that whichever miner produced this block, could've held \nonto it for 2-4 months without doing anything else, and then broadcast \nit to fork the blockchain from a block produced months ago.  That's not \ntheoretical, that's real data in the blockchain and it would be a disaster.\n\n-Alan\n\n\n\nOn 11/23/2011 10:09 AM, Gavin Andresen wrote:\n> On Wed, Nov 23, 2011 at 9:38 AM, Christian Decker\n> <decker.christian at gmail.com>  wrote:\n>> At some point you might find an incredibly hard block that makes your forked\n>> chain the hardest one in the network\n> Seems to me that's the real problem with any \"hardest block found in X\n> minutes\" scheme.\n>\n> If I get lucky and find a really extremely hard block then I have an\n> incentive to keep it secret and build a couple more blocks on top of\n> it, then announce them all at the same time.\n>\n> If the rest of the network rejects my longer chain because I didn't\n> announce the extremely hard block in a timely fashion... then how\n> could the network ever recover from a real network split?  A network\n> split/rejoin will look exactly the same.\n>\n> Bitcoin as-is doesn't have the \"I got lucky and found an extremely\n> hard block\" problem because the difficulty TARGET is used to compute\n> chain difficulty, not the actual hashes found.\n>\n>\n> ---\n>\n> PS: I proposed a different method for dealing with large hash power\n> drops for the testnet on the Forums yesterday, and am testing it\n> today.\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111123/c80449ce/attachment.html>", "summary": "A block with a difficulty of 36 billion was found, 24,000 times harder than the target, which could have caused a disaster if held onto and broadcasted later."}, {"author": "Andy Parkins", "date": "2011-11-23T15:39:10", "message_text_only": "On 2011 November 23 Wednesday, Gavin Andresen wrote:\n\n> Bitcoin as-is doesn't have the \"I got lucky and found an extremely\n> hard block\" problem because the difficulty TARGET is used to compute\n> chain difficulty, not the actual hashes found.\n\nGood points.  I don't think I have a response to that one.\n\nI saw the \"I got lucky\" result as a benefit, as it made it harder to fork the \nchain.  We got an advantage from the luck.\n\nI'll have to abandon this suggestion.  It's not going to work.\n\nThanks for the feedback everyone.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111123/b3a137b0/attachment.sig>", "summary": "Bitcoin's \"I got lucky\" block-finding problem is not an issue because the difficulty target is used to compute chain difficulty, not actual hashes found."}, {"author": "Joel Joonatan Kaartinen", "date": "2011-11-23T16:26:30", "message_text_only": "On Wed, 2011-11-23 at 15:39 +0000, Andy Parkins wrote:\n> On 2011 November 23 Wednesday, Gavin Andresen wrote:\n> \n> > Bitcoin as-is doesn't have the \"I got lucky and found an extremely\n> > hard block\" problem because the difficulty TARGET is used to compute\n> > chain difficulty, not the actual hashes found.\n> \n> Good points.  I don't think I have a response to that one.\n\nIf there's an upper bound on the difficulty a block is accepted to have\n(even if it would've passed with significantly higher difficulty), that\ncould solve this issue. For example, take the median (or average) of the\npast 2016 blocks and don't value any new block for more than maybe 4\ntimes as difficult as that. \n\n> I saw the \"I got lucky\" result as a benefit, as it made it harder to fork the \n> chain.  We got an advantage from the luck.\n> \n> I'll have to abandon this suggestion.  It's not going to work.\n> \n> Thanks for the feedback everyone.\n\nDon't be so hasty with that :)\n\n- Joel", "summary": "Discussion on the \"I got lucky and found an extremely hard block\" problem in Bitcoin, and a potential solution using an upper bound on difficulty."}, {"author": "Andy Parkins", "date": "2011-11-23T15:11:07", "message_text_only": "On 2011 November 23 Wednesday, Christian Decker wrote:\n> Just brainstorming here, no idea if this would work:\n> \n>    - Pick any old block\n>    - Create a chain fork by creating simpler blocks on top of your chosen\n>    one\n>    - The chain will not be accepted by others\n>    - At some point you might find an incredibly hard block that makes your\n>    forked chain the hardest one in the network\n>    - Suddenly all your blocks are valid and you force people to switch to\n>    your forked chain\n> \n> If this is possible it would allow you to revoke all transactions and claim\n> all the mined coins since you forked. My point is that the notion of\n> hardest chain is not so simple.\n\nThe above is a problem in either system (mine or current).  If I can make a \n\"hardest chain\", then I have indeed reverted all the existing transactions. \n\nLook at CBlock::AddToBlockIndex(), \n\n    if (pindexNew->bnChainWork > bnBestChainWork)\n        if (!SetBestChain(txdb, pindexNew))\n            return false;\n\nIf the received block has higher total chain work than the current best chain \nwork; then the new block becomes the head of the best chain.  The chain work \nbeing calculated like this (I've abbreviated for the email):\n\n  pindexNew->bnChainWork = pprev->bnChainWork + pindexNew->GetBlockWork()\n\nI'm not entirely convinced that this method of totalling chain work is the \nbest (it's a sum of exponentials I think); but that's a different issue.\n\n> The difficulty of invalidating a chain is dramatically reduced with your\n> time window approach, by not requiring a given difficulty, and relying on\n> synchronized time windows.\n\nI don't see that it is reduced; it is the same.  Hashes are hashes.  A given \ndifficulty isn't required, but a higher difficulty beats a lower difficulty.  \nSo whatever the hashing power of the network at that moment, it's used.  That \nmakes the chain more secure, not less.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111123/270594a5/attachment.sig>", "summary": "A proposal to create a \"hardest chain\" by forking the blockchain and creating simpler blocks on top of an old block, which could allow the revocation of all transactions and claim all the mined coins since the forked block. The difficulty of invalidating a chain is not reduced with a time window approach, as hashes are hashes, and a higher difficulty beats a lower difficulty, making the chain more secure."}, {"author": "Andy Parkins", "date": "2011-11-23T12:54:41", "message_text_only": "On 2011 November 23 Wednesday, Jorge Tim\u00f3n wrote:\n> With the current system, the timestamp can also be cheated, but miners\n> have no direct incentive to do it. With your system, they increase\n> their probability of mining a block by putting a false timestamp.\n> Also, where's the network clock you're talking about? Isn't it the\n> timestamps in the blockchain?\n\n(1) The \"probability of mining a block\" is old-think.  The probability of \nmining a block is 100% in my system.  Instead, it becomes \"the probability of \nyour block being the hardest\" and that requires actual hashing power \nregardless of the timestamp you write on the block.  I could write that my \nblock was generated next year; but I can't fake the hashing power it needs to \ngenerate one year's worth of hashes.\n\nIf chain difficulty were summed correctly (sum(log(difficulty)), I guess), \nthen time makes not the slightest difference anyway.  You can issue blocks at \nany time with any difficulty, and the \"hardest\" chain always wins.  The block \nperiod can be anything, and it is only the block reward that makes it \nnecessary to pick a particular period for block issuing (even that could be \nworked around I guess with a variable reward, but why bother?).\n\n(2) For the network clock; see util.cpp:GetAdjustedTime().\n\n(3) Current clients do have an incentive: more time.  The more time they get, \nthe more hashes they can try.  The current client already checks the \ntimestamp:\n\n  main.cpp:CBlock::CheckBlock()\n\n    // Check timestamp\n    if (GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n        return error(\"CheckBlock() : block timestamp too far in the future\");\n\nMy suggestion only requires that the two hour window be reduced; and a lower \nlimit to be added.  Also: while the miners have an incentive to lie about the \ntime, the nodes they broadcast to have an incentive to reject mistimed blocks, \nso you won't gain much by lying to your peers since your block won't be \naccepted -- the incentive is therefore removed.\n\nNote: my system also prevents an attack that is possible with current bitcoin: \nrecalculating the entire chain.  Let's say Visa want to take over bitcoin.  \nThey buy enough computing power to significantly beat the current bitcoin \nnetwork; then they start recalculating the entire block chain; since early \nblocks were low difficulty, it's not that hard to do.  Once they overtake the \nreal chain, they have effectively undone all previous transactions.  (I'm not \nsuggesting this is likely; and it's actually mitigated by the hard-coded block \nhashes).  The point is that blocks are only generatable for the time when the \nrest of the network is willing to add them to the chain.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111123/c91e1106/attachment.sig>", "summary": "The probability of mining a block is 100% in the proposed system, and the probability of a block being the hardest requires actual hashing power. The network clock is in util.cpp:GetAdjustedTime(). Miners have an incentive to lie about the time, but nodes have an incentive to reject mistimed blocks. The proposed system also prevents an attack that is possible with current bitcoin: recalculating the entire chain."}, {"author": "Jorge Tim\u00f3n", "date": "2011-11-23T15:10:40", "message_text_only": "2011/11/23, Andy Parkins <andyparkins at gmail.com>:\n> On 2011 November 23 Wednesday, Jorge Tim\u00f3n wrote:\n>> With the current system, the timestamp can also be cheated, but miners\n>> have no direct incentive to do it. With your system, they increase\n>> their probability of mining a block by putting a false timestamp.\n>> Also, where's the network clock you're talking about? Isn't it the\n>> timestamps in the blockchain?\n>\n> (1) The \"probability of mining a block\" is old-think.  The probability of\n> mining a block is 100% in my system.  Instead, it becomes \"the probability\n> of\n> your block being the hardest\" and that requires actual hashing power\n> regardless of the timestamp you write on the block.  I could write that my\n> block was generated next year; but I can't fake the hashing power it needs\n> to\n> generate one year's worth of hashes.\n\nWell, I meant \"the probability of  your block being the hardest\".\nWhat a miner can do is hash the block (cheating the timestamp) for 2\nmore minutes than the rest of the people and then send it to the other\nnodes. Nodes cannot possibly know when did you hashed the block only\nby looking at their clock when they receive it, because there's also\nnetwork latency.\n\n> (2) For the network clock; see util.cpp:GetAdjustedTime().\n\n1) This is part of the satoshi client but not the protocol. A miner\ncan rewrite this part of the code and there won't be anything in the\nchain that contradicts the protocol.\n\n2) I haven't read the code but I'm pretty sure that's not a perfect\ndecentralized clock.\n\nI will be more specific. Where's the network clock in the chain (in\nthe protocol)?\n\n-- \nJorge Tim\u00f3n", "summary": "A proposed system for blockchain timestamp cheating is debunked by stating that the probability of mining a block is 100% and requires actual hashing power."}, {"author": "Andy Parkins", "date": "2011-11-23T15:29:45", "message_text_only": "On 2011 November 23 Wednesday, Jorge Tim\u00f3n wrote:\n\n> Well, I meant \"the probability of  your block being the hardest\".\n> What a miner can do is hash the block (cheating the timestamp) for 2\n> more minutes than the rest of the people and then send it to the other\n> nodes. Nodes cannot possibly know when did you hashed the block only\n> by looking at their clock when they receive it, because there's also\n> network latency.\n\nTrue enough; but then the same is true for everyone else.  If the window is 2 \nminutes after the stated time, then everyone _can_ wait until the end of that \nwindow.  However, they risk their block being rejected by their peers, and \ntheir efforts are wasted.  In fact, it can be guaranteed by making the accept \nwindow zero.  There is then no reason to carry on computing after the reward \nwindow closes, since you know your peers will reject it.\n\n> > (2) For the network clock; see util.cpp:GetAdjustedTime().\n> \n> 1) This is part of the satoshi client but not the protocol. A miner\n> can rewrite this part of the code and there won't be anything in the\n> chain that contradicts the protocol.\n\nWell yes.  What does that matter?  It's only a way of calculating an average \ntime.  The node can use any clock it wants, as long as the block time is \nverified by the peers.\n\n> 2) I haven't read the code but I'm pretty sure that's not a perfect\n> decentralized clock.\n\nIt definitely isn't.  NTP is mentioned in the source as an alternative.\n\n> I will be more specific. Where's the network clock in the chain (in\n> the protocol)?\n\nIt's nothing to do with the protocol; it's an individual miner choosing \nwhether to accept or reject a block based on the timestamp it claims, and the \ncurrent time as the miner sees it.  For the sake of compatibility, the clients \ncurrently choose to use a community clock as \"current\", as established from \nthe time they receive from peers in the \"version\" message (it actually holds \noffsets between them, which is pretty bad, as a long-connected client will \ndrift).  They don't have to, but if miners aren't using time that approximates \nwhat their peers are using, under my system, their blocks would be rejected: \nso an incentive to use that \"community clock\" exists.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111123/aa9881ec/attachment.sig>", "summary": "A miner can cheat the timestamp by hashing the block for two more minutes than others, but it risks rejection by peers. The network clock is not part of the protocol."}, {"author": "Jorge Tim\u00f3n", "date": "2011-11-23T15:38:30", "message_text_only": "But the protocol must have a deterministic way to determine if a block\nmust be accepted or rejected.\nI don't know what NTP is, but if you can have a perfect distributed\nclock your proposal may work.\n\n2011/11/23, Andy Parkins <andyparkins at gmail.com>:\n> On 2011 November 23 Wednesday, Jorge Tim\u00f3n wrote:\n>\n>> Well, I meant \"the probability of  your block being the hardest\".\n>> What a miner can do is hash the block (cheating the timestamp) for 2\n>> more minutes than the rest of the people and then send it to the other\n>> nodes. Nodes cannot possibly know when did you hashed the block only\n>> by looking at their clock when they receive it, because there's also\n>> network latency.\n>\n> True enough; but then the same is true for everyone else.  If the window is\n> 2\n> minutes after the stated time, then everyone _can_ wait until the end of\n> that\n> window.  However, they risk their block being rejected by their peers, and\n> their efforts are wasted.  In fact, it can be guaranteed by making the\n> accept\n> window zero.  There is then no reason to carry on computing after the reward\n> window closes, since you know your peers will reject it.\n>\n>> > (2) For the network clock; see util.cpp:GetAdjustedTime().\n>>\n>> 1) This is part of the satoshi client but not the protocol. A miner\n>> can rewrite this part of the code and there won't be anything in the\n>> chain that contradicts the protocol.\n>\n> Well yes.  What does that matter?  It's only a way of calculating an average\n> time.  The node can use any clock it wants, as long as the block time is\n> verified by the peers.\n>\n>> 2) I haven't read the code but I'm pretty sure that's not a perfect\n>> decentralized clock.\n>\n> It definitely isn't.  NTP is mentioned in the source as an alternative.\n>\n>> I will be more specific. Where's the network clock in the chain (in\n>> the protocol)?\n>\n> It's nothing to do with the protocol; it's an individual miner choosing\n> whether to accept or reject a block based on the timestamp it claims, and\n> the\n> current time as the miner sees it.  For the sake of compatibility, the\n> clients\n> currently choose to use a community clock as \"current\", as established from\n> the time they receive from peers in the \"version\" message (it actually holds\n> offsets between them, which is pretty bad, as a long-connected client will\n> drift).  They don't have to, but if miners aren't using time that\n> approximates\n> what their peers are using, under my system, their blocks would be rejected:\n> so an incentive to use that \"community clock\" exists.\n>\n>\n>\n> Andy\n>\n> --\n> Dr Andy Parkins\n> andyparkins at gmail.com\n>\n\n\n-- \nJorge Tim\u00f3n", "summary": "The protocol must have a deterministic way to determine if a block must be accepted or rejected, and a perfect distributed clock may make the proposal work."}], "thread_summary": {"title": "Addressing rapid changes in mining power", "categories": ["Bitcoin-development"], "authors": ["Alan Reiner", "Jorge Tim\u00f3n", "Andy Parkins", "Gavin Andresen", "Joel Joonatan Kaartinen", "Christian Decker"], "messages_count": 16, "total_messages_chars_count": 34542, "convo_summary": "The conversation revolves around proposals to normalize the block generation rate in Bitcoin. One proposal suggests that every node generates the most difficult block it can without a target difficulty, while another proposes a fixed ten-minute rate for block rewards. Concerns are raised about cheating and network splits, but the conversation also explores potential solutions such as creating a \"hardest chain\" and using an upper bound on difficulty. The importance of a deterministic way to determine block acceptance is emphasized."}}, {"title": "[Bitcoin-development] [ANNOUNCE] BitCoinJ 0.3", "thread_messages": [{"author": "Mike Hearn", "date": "2011-11-25T14:38:15", "message_text_only": "Perhaps a bit off-topic for this list, maybe there should be a\nsoftware/services announcements list? Anyway ...\n\nI'm happy to announce version 0.3 of the leading Java implementation of the\nBitcoin protocol. BitCoinJ is a widely used library that forms the\nfoundation of projects as diverse as the Android Bitcoin\nWallet<https://market.android.com/details?id=de.schildbach.wallet&hl=en>,\nthe p2p network status graphs <http://bitcoinstatus.rowit.co.uk/>,\nMultiBit<http://multibit.org/>\n, PoolServerJ <http://poolserverj.org/> and more.\n\nYou can get it either from our Maven\nrepository<http://code.google.com/p/bitcoinj/wiki/UsingMaven>or the\ndownloads\nsection <http://code.google.com/p/bitcoinj/downloads/list> of the website.\n\nNew in this release:\n\n   - Many bugfixes, robustness and test suite improvements.\n   - Major optimizations to reduce parsing overhead, most protocol messages\n   are now parsed on demand.\n   - A new PeerGroup API that handles the management of multiple peer\n   connections.\n   - Switched to using Maven for the build process, removed the bundled\n   Bouncy Castle as a result. You can now depend on BitCoinJ using Maven if\n   you don't need any special patches.\n   - A bunch of new APIs to make writing Bitcoin apps easier.\n\nThis release would not have been possible without the major contributions\nfrom:\n\n*Steve Coughlan*, who contributed many parsing improvements and\noptimizations\n*Miron Cuperman*, who did significant work on the PeerGroup API\n*Andreas Schildbach*, developer of the Android wallet, who as always\nreported many bugs and useful suggestions for improvement\n*Gary Rowe and Jonny Hegheim*, who set up the continuous build and Maven\ninfrastructure\n\nWhat's next? The next release will focus on \"more of the same\", that is,\nfixing bugs and filling out missing features so projects using the library\ndon't feel any need to patch their local copy of the library. By popular\nrequest we'll be switching from Subversion to git. We'll also introduce a\nstable wallet format that isn't dependent on Java serialization, and\ntimestamp key creation to resolve some issues with clients that ship block\nchain copies. And finally of course, whatever is contributed by the\ncommunity.\n\nthanks\n/mike\n\n-- \nGoogle Switzerland GmbH\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111125/1d2a4036/attachment.html>", "summary": "BitcoinJ, the leading Java implementation of the Bitcoin protocol, has released version 0.3, featuring bug fixes, optimisations, and new APIs."}], "thread_summary": {"title": "BitCoinJ 0.3", "categories": ["Bitcoin-development", "ANNOUNCE"], "authors": ["Mike Hearn"], "messages_count": 1, "total_messages_chars_count": 2432}}]