[
    {
        "title": "[bitcoin-dev] Announcing a new standard for soft fork activation",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2021-04-01T14:58:04",
                "message_text_only": "There have been a vast number of proposals for soft fork activation in\nrecent months and it is important that all these important ideas don\u2019t go\nto waste. Hence I propose a new standard for soft fork activation\nincorporating all the ideas into one standard. I appreciate this standard\nhas come too late for Taproot activation but it should be ready for any\nfuture soft forks. It is a multi phase, multi year standard. No soft fork\ncan activate unless and until it has successfully passed through all of the\ndifferent 14 phases. This will demonstrate Bitcoin\u2019s ultimate conservatism.\n\nPhase 1) Let\u2019s See What Happens - BIP 8 (false, 0.25 years). The shortest\nphase just to whet appetites.\n\nPhase 2) Start now, improve later - BIP 8(false, 1 year) A confusing name,\nit starts but it doesn't improve later\n\nPhase 3) BIP 9 equivalent - BIP 8(false, 1 year)\n\nPhase 4) Gently discourage apathy - BIP 8(true, 1 year) Forced signaling at\nthe end of this phase but obviously there are still many phases before the\nsoft fork can actually activate.\n\nPhase 5) BIP 91 (1 year). As a nod to our SegWit history we have a BIP 91\nactivation phase.\n\nPhase 6) BIP 148 (1 year). Some people disagree that BIP 91 activated\nSegWit so we do a BIP 148 activation phase to keep those people happy.\nAgain forced signaling doesn\u2019t actually mean activation. There are still\nmany more phases to pass through.\n\nPhase 7) Speedy Trial (using block height, 0.5 years) on mainnet\n\nPhase 8) Speedy Trial (using MTP, 0.5 years) on mainnet\n\nPhase 9) Speedy Trial on the default signet (0.5 years)\n\nPhase 10) Speedy Trial on a combination of three different custom signets\nin parallel (0.5 years)\n\nPhase 11) Speedy Trial on testnet and a custom signet in parallel (0.5\nyears)\n\nPhase 12) Modern Soft Fork Activation (3.5 years) This is the longest phase\nof the soft fork activation standard. It is itself multi phase and multi\nyear so this can be considered a nested activation phase within this\nstandard.\n\nPhase 13) UASF BIP 8 (LOT=true, 1 year). Forced miner signaling at the end\nof this phase but ultimately the soft fork doesn\u2019t yet activate as there is\none final additional phase the activation must pass through. This gives\nSamson the opportunity to sell some hats. We are close now. The natives are\ngetting restless.\n\nPhase 14) Second flag day (1 year) We don\u2019t want those pesky users actually\nactivating a soft fork on their own so an additional flag day is added just\nso we can tell users that we prevented a chain split.\n\nAssuming a soft fork activation has successfully passed through all these\n14 phases it should activate. It will take a minimum of 13 years. However,\nif it fails during any one of these phases it has to start from Phase 1\nagain. We should take Bitcoin\u2019s conservatism very seriously. If a soft fork\nactivation can\u2019t pass successfully through all these phases it shouldn\u2019t\nactivate. Ultimately we don\u2019t really mind what is in the soft fork (any\nidiot can design consensus changes and write secure bug free C++ code) that\nis very much secondary in importance to *how* the soft fork is activated.\nThe activation design absolutely must be conservative.\n\nI expect this rigorous standard for soft fork activation will get a BIP\nnumber. If you are going to propose a future soft fork I recommend you plan\nfor activation in approximately 13 years from the point the soft fork code\nis merged into Core.\n\nI am happy to settle the soft fork activation question once and for all for\nthe community. I expect in time my contribution will be recognized in the\nannals of history with Satoshi Nakamoto and Hal Finney.\n\nAddendum: Although all future soft forks will ultimately use this standard,\nthis standard is copyrighted. Every time it is used royalties must be paid\ninto this quantum secure Bitcoin vanity address 1quantumsecureaddress\n\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210401/292151d1/attachment.html>"
            },
            {
                "author": "Ben Woosley",
                "date": "2021-04-01T18:05:28",
                "message_text_only": "Hear hear, a true work of genius. Who's looking for Satoshi? I think we've\nfound him!\n\nOn Thu, Apr 1, 2021 at 8:15 AM Michael Folkson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> There have been a vast number of proposals for soft fork activation in\n> recent months and it is important that all these important ideas don\u2019t go\n> to waste. Hence I propose a new standard for soft fork activation\n> incorporating all the ideas into one standard. I appreciate this standard\n> has come too late for Taproot activation but it should be ready for any\n> future soft forks. It is a multi phase, multi year standard. No soft fork\n> can activate unless and until it has successfully passed through all of the\n> different 14 phases. This will demonstrate Bitcoin\u2019s ultimate conservatism.\n>\n> Phase 1) Let\u2019s See What Happens - BIP 8 (false, 0.25 years). The shortest\n> phase just to whet appetites.\n>\n> Phase 2) Start now, improve later - BIP 8(false, 1 year) A confusing name,\n> it starts but it doesn't improve later\n>\n> Phase 3) BIP 9 equivalent - BIP 8(false, 1 year)\n>\n> Phase 4) Gently discourage apathy - BIP 8(true, 1 year) Forced signaling\n> at the end of this phase but obviously there are still many phases before\n> the soft fork can actually activate.\n>\n> Phase 5) BIP 91 (1 year). As a nod to our SegWit history we have a BIP 91\n> activation phase.\n>\n> Phase 6) BIP 148 (1 year). Some people disagree that BIP 91 activated\n> SegWit so we do a BIP 148 activation phase to keep those people happy.\n> Again forced signaling doesn\u2019t actually mean activation. There are still\n> many more phases to pass through.\n>\n> Phase 7) Speedy Trial (using block height, 0.5 years) on mainnet\n>\n> Phase 8) Speedy Trial (using MTP, 0.5 years) on mainnet\n>\n> Phase 9) Speedy Trial on the default signet (0.5 years)\n>\n> Phase 10) Speedy Trial on a combination of three different custom signets\n> in parallel (0.5 years)\n>\n> Phase 11) Speedy Trial on testnet and a custom signet in parallel (0.5\n> years)\n>\n> Phase 12) Modern Soft Fork Activation (3.5 years) This is the longest\n> phase of the soft fork activation standard. It is itself multi phase and\n> multi year so this can be considered a nested activation phase within this\n> standard.\n>\n> Phase 13) UASF BIP 8 (LOT=true, 1 year). Forced miner signaling at the end\n> of this phase but ultimately the soft fork doesn\u2019t yet activate as there is\n> one final additional phase the activation must pass through. This gives\n> Samson the opportunity to sell some hats. We are close now. The natives are\n> getting restless.\n>\n> Phase 14) Second flag day (1 year) We don\u2019t want those pesky users\n> actually activating a soft fork on their own so an additional flag day is\n> added just so we can tell users that we prevented a chain split.\n>\n> Assuming a soft fork activation has successfully passed through all these\n> 14 phases it should activate. It will take a minimum of 13 years. However,\n> if it fails during any one of these phases it has to start from Phase 1\n> again. We should take Bitcoin\u2019s conservatism very seriously. If a soft fork\n> activation can\u2019t pass successfully through all these phases it shouldn\u2019t\n> activate. Ultimately we don\u2019t really mind what is in the soft fork (any\n> idiot can design consensus changes and write secure bug free C++ code) that\n> is very much secondary in importance to *how* the soft fork is activated.\n> The activation design absolutely must be conservative.\n>\n> I expect this rigorous standard for soft fork activation will get a BIP\n> number. If you are going to propose a future soft fork I recommend you plan\n> for activation in approximately 13 years from the point the soft fork code\n> is merged into Core.\n>\n> I am happy to settle the soft fork activation question once and for all\n> for the community. I expect in time my contribution will be recognized in\n> the annals of history with Satoshi Nakamoto and Hal Finney.\n>\n> Addendum: Although all future soft forks will ultimately use this\n> standard, this standard is copyrighted. Every time it is used royalties\n> must be paid into this quantum secure Bitcoin vanity address\n> 1quantumsecureaddress\n>\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at gmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210401/9d4cf5a6/attachment-0001.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2021-04-05T22:36:48",
                "message_text_only": "this satire points out the \"bikeshedding\" problem, or the \"law of triviality\".\na problem is discussed in proportion to the number of people who feel\nqualified to talk about them.\nfew users are experts at the cryptography, and even fewer are experts\nat c++, cryptography and possibly game theory\ntherefore the number of people who feel qualified to analyze or\ndiscuss the proposed changes are few  (schorr sigs are hopefully the\nleast controversial)\nwhereas the mechanism for activation is relatively easy to understand\n\nschnorr:  improved signature scheme, can reduce tx size (ACK)\nmast: reduces tx size and improve privacy of of complex contracts (ACK)\ntaproot: mast... but it looks like p2pkh (ACK)\nactivation:   bikeshedding not necessary now.\n\nOn Thu, Apr 1, 2021 at 11:15 AM Michael Folkson via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> There have been a vast number of proposals for soft fork activation in recent months and it is important that all these important ideas don\u2019t go to waste. Hence I propose a new standard for soft fork activation incorporating all the ideas into one standard. I appreciate this standard has come too late for Taproot activation but it should be ready for any future soft forks. It is a multi phase, multi year standard. No soft fork can activate unless and until it has successfully passed through all of the different 14 phases. This will demonstrate Bitcoin\u2019s ultimate conservatism.\n>\n> Phase 1) Let\u2019s See What Happens - BIP 8 (false, 0.25 years). The shortest phase just to whet appetites.\n>\n> Phase 2) Start now, improve later - BIP 8(false, 1 year) A confusing name, it starts but it doesn't improve later\n>\n> Phase 3) BIP 9 equivalent - BIP 8(false, 1 year)\n>\n> Phase 4) Gently discourage apathy - BIP 8(true, 1 year) Forced signaling at the end of this phase but obviously there are still many phases before the soft fork can actually activate.\n>\n> Phase 5) BIP 91 (1 year). As a nod to our SegWit history we have a BIP 91 activation phase.\n>\n> Phase 6) BIP 148 (1 year). Some people disagree that BIP 91 activated SegWit so we do a BIP 148 activation phase to keep those people happy. Again forced signaling doesn\u2019t actually mean activation. There are still many more phases to pass through.\n>\n> Phase 7) Speedy Trial (using block height, 0.5 years) on mainnet\n>\n> Phase 8) Speedy Trial (using MTP, 0.5 years) on mainnet\n>\n> Phase 9) Speedy Trial on the default signet (0.5 years)\n>\n> Phase 10) Speedy Trial on a combination of three different custom signets in parallel (0.5 years)\n>\n> Phase 11) Speedy Trial on testnet and a custom signet in parallel (0.5 years)\n>\n> Phase 12) Modern Soft Fork Activation (3.5 years) This is the longest phase of the soft fork activation standard. It is itself multi phase and multi year so this can be considered a nested activation phase within this standard.\n>\n> Phase 13) UASF BIP 8 (LOT=true, 1 year). Forced miner signaling at the end of this phase but ultimately the soft fork doesn\u2019t yet activate as there is one final additional phase the activation must pass through. This gives Samson the opportunity to sell some hats. We are close now. The natives are getting restless.\n>\n> Phase 14) Second flag day (1 year) We don\u2019t want those pesky users actually activating a soft fork on their own so an additional flag day is added just so we can tell users that we prevented a chain split.\n>\n> Assuming a soft fork activation has successfully passed through all these 14 phases it should activate. It will take a minimum of 13 years. However, if it fails during any one of these phases it has to start from Phase 1 again. We should take Bitcoin\u2019s conservatism very seriously. If a soft fork activation can\u2019t pass successfully through all these phases it shouldn\u2019t activate. Ultimately we don\u2019t really mind what is in the soft fork (any idiot can design consensus changes and write secure bug free C++ code) that is very much secondary in importance to *how* the soft fork is activated. The activation design absolutely must be conservative.\n>\n> I expect this rigorous standard for soft fork activation will get a BIP number. If you are going to propose a future soft fork I recommend you plan for activation in approximately 13 years from the point the soft fork code is merged into Core.\n>\n> I am happy to settle the soft fork activation question once and for all for the community. I expect in time my contribution will be recognized in the annals of history with Satoshi Nakamoto and Hal Finney.\n>\n> Addendum: Although all future soft forks will ultimately use this standard, this standard is copyrighted. Every time it is used royalties must be paid into this quantum secure Bitcoin vanity address 1quantumsecureaddress\n>\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at gmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "Announcing a new standard for soft fork activation",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Ben Woosley",
                "Erik Aronesty",
                "Michael Folkson"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 13874
        }
    },
    {
        "title": "[bitcoin-dev] Taproot Activation Meeting Reminder: April 6th 19:00 UTC bitcoin/bitcoin-dev",
        "thread_messages": [
            {
                "author": "Jeremy",
                "date": "2021-04-04T04:39:11",
                "message_text_only": "We'll be having another meeting this Tuesday, as per\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-March/018699.html.\nIf you can't make it feel free to leave a comment on any agenda item below,\nor if you think there are other things to be discussed.\n\nAgenda:\n\n1. AJ's update to MTP time.\n\nPlease review https://github.com/bitcoin/bitcoin/pull/21377 as AJ updated\nit substantially.\n\nThe PR is now purely MTP based, and the state machine has been simplified.\nThis approach is intended to be compatible with a mandatory signaling\nperiod (via a LAST_CHANCE change) and makes it easier to deploy ST on\nsignets (irrelevant for Taproot, because it is already active on all\nsignets).\n\n2. Selecting between MTP and Height\n\nIn the previous meeting, there was no substantial publicly discussed\nbenefit to using MTPs over height. Since agenda item 1, there is now a\ntangible benefit to using MTP.\n\nThe changes AJ promulgated for MTP neutralizes the argument, mostly, that\nMTP was easier to review. As such, the main conversation in this agenda\nitem is around the pros/cons of height or MTP and determining if we can\nreach consensus on either approach.\n\n3. Timeline Discussion\nIn all hope, we will reach consensus around item 2. Should that occur, we\ncan use this time to discuss a final selection on parameters, mindful of\nCore's process.\n\nIf the meeting doesn't reach rough consensus around item 2, it seems that\nwe may fall short on the proposed schedule from last time. In this section,\nwe can discuss realities around scheduling.\n\n\nBest,\n\nJeremy\n\n\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210403/89834233/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2021-04-04T09:31:45",
                "message_text_only": "So the only thing that seemed clear, using height as per bip8, it's not\nclear anymore.\nAnd, as usual, we're not talking about activation in general but about\ntaproot activation, segwit activation...\n\nI won't make it to the meeting because I don't think I have much more to\ncontribute that I haven't said already beyond perhaps: sigh.\nMy arguments will probably ignored again, so it doesn't matter.\n\n\nOn Sun, Apr 4, 2021, 06:39 Jeremy via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> We'll be having another meeting this Tuesday, as per\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-March/018699.html.\n> If you can't make it feel free to leave a comment on any agenda item below,\n> or if you think there are other things to be discussed.\n>\n> Agenda:\n>\n> 1. AJ's update to MTP time.\n>\n> Please review https://github.com/bitcoin/bitcoin/pull/21377 as AJ updated\n> it substantially.\n>\n> The PR is now purely MTP based, and the state machine has been simplified.\n> This approach is intended to be compatible with a mandatory signaling\n> period (via a LAST_CHANCE change) and makes it easier to deploy ST on\n> signets (irrelevant for Taproot, because it is already active on all\n> signets).\n>\n> 2. Selecting between MTP and Height\n>\n> In the previous meeting, there was no substantial publicly discussed\n> benefit to using MTPs over height. Since agenda item 1, there is now a\n> tangible benefit to using MTP.\n>\n> The changes AJ promulgated for MTP neutralizes the argument, mostly, that\n> MTP was easier to review. As such, the main conversation in this agenda\n> item is around the pros/cons of height or MTP and determining if we can\n> reach consensus on either approach.\n>\n> 3. Timeline Discussion\n> In all hope, we will reach consensus around item 2. Should that occur, we\n> can use this time to discuss a final selection on parameters, mindful of\n> Core's process.\n>\n> If the meeting doesn't reach rough consensus around item 2, it seems that\n> we may fall short on the proposed schedule from last time. In this section,\n> we can discuss realities around scheduling.\n>\n>\n> Best,\n>\n> Jeremy\n>\n>\n>\n> --\n> @JeremyRubin <https://twitter.com/JeremyRubin>\n> <https://twitter.com/JeremyRubin>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210404/c59b83e4/attachment.html>"
            },
            {
                "author": "Robert Spigler",
                "date": "2021-04-04T22:00:02",
                "message_text_only": "I'd like to pre-register a comment that I don't think signet should be a consideration for MTP vs height, since taproot is already activated on signet, and there's no indication that ST will be used in the future (we should continue our search for the ideal activation method)\n\nRobert Spigler\n\nPersonal Fingerprint: BF0D 3C08 A439 5AC6 11C1 5395 B70B 4A77 F850 548F\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Sunday, April 4, 2021 5:31 AM, Jorge Tim\u00f3n via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> So the only thing that seemed clear, using height as per bip8, it's not clear anymore.\n> And, as usual, we're not talking about activation in general but about taproot activation, segwit activation...\n>\n> I won't make it to the meeting because I don't think I have much more to contribute that I haven't said already beyond perhaps: sigh.\n> My arguments will probably ignored again, so it doesn't matter.\n>\n> On Sun, Apr 4, 2021, 06:39 Jeremy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> We'll be having another meeting this Tuesday, as per https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-March/018699.html. If you can't make it feel free to leave a comment on any agenda item below, or if you think there are other things to be discussed.\n>>\n>> Agenda:\n>>\n>> 1. AJ's update to MTP time.\n>>\n>> Please review https://github.com/bitcoin/bitcoin/pull/21377 as AJ updated it substantially.\n>>\n>> The PR is now purely MTP based, and the state machine has been simplified. This approach is intended to be compatible with a mandatory signaling period (via a LAST_CHANCE change) and makes it easier to deploy ST on signets (irrelevant for Taproot, because it is already active on all signets).\n>>\n>> 2. Selecting between MTP and Height\n>>\n>> In the previous meeting, there was no substantial publicly discussed benefit to using MTPs over height. Since agenda item 1, there is now a tangible benefit to using MTP.\n>>\n>> The changes AJ promulgated for MTP neutralizes the argument, mostly, that MTP was easier to review. As such, the main conversation in this agenda item is around the pros/cons of height or MTP and determining if we can reach consensus on either approach.\n>>\n>> 3. Timeline Discussion\n>> In all hope, we will reach consensus around item 2. Should that occur, we can use this time to discuss a final selection on parameters, mindful of Core's process.\n>>\n>> If the meeting doesn't reach rough consensus around item 2, it seems that we may fall short on the proposed schedule from last time. In this section, we can discuss realities around scheduling.\n>>\n>> Best,\n>>\n>> Jeremy\n>>\n>> --\n>> [@JeremyRubin](https://twitter.com/JeremyRubin)https://twitter.com/JeremyRubin\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210404/ae136571/attachment.html>"
            },
            {
                "author": "Anthony Towns",
                "date": "2021-04-05T10:34:52",
                "message_text_only": "On Sat, Apr 03, 2021 at 09:39:11PM -0700, Jeremy via bitcoin-dev wrote:\n> As such, the main conversation in this agenda item is\n> around the pros/cons of height or MTP and determining if we can reach consensus\n> on either approach.\n\nHere's some numbers.\n\nGiven a desired signalling period of xxx days, where signaling begins\non the first retarget boundary after the starttime and ends on the last\nretarget boundary before the endtime, this is how many retarget periods\nyou get (based on blocks since 2015-01-01):\n\n 90 days: mainnet  5-7 full 2016-block retarget periods\n180 days: mainnet 11-14\n365 days: mainnet 25-27\n730 days: mainnet 51-55\n\n(This applies to non-signalling periods like the activation/lock in delay\ntoo of course. If you change it so that it ends at the first retarget\nperiod after endtime, all the values just get incremented -- ie, 6-8,\n12-15 etc)\n\nIf I've got the maths right, then requiring 1814 of 2016 blocks to signal,\nmeans that having 7 periods instead of 5 lets you get a 50% chance of\nsuccessful activation by maintaining 89.04% of hashpower over the entire\nperiod instead of 89.17%, while 55 periods instead of 51 gives you a 50%\nchance of success with 88.38% hashpower instead of 88.40% hashpower.\nSo the \"repeated trials\" part doesn't look like it has any significant\neffect on mainnet.\n\nIf you target yy periods instead of xxx days, starting and ending on a\nretarget boundary, you get the following stats from the last few years\nof mainnet (again starting at 2015-01-01):\n\n 1 period:  mainnet 11-17 days (range 5.2 days)\n 7 periods: mainnet 87-103 days (range 15.4 days)\n13 periods: mainnet 166-185 days (range 17.9 days)\n27 periods: mainnet 352-377 days (range 24.4 days)\n54 periods: mainnet 711-747 days (range 35.0 days)\n\nAs far as I can see the questions that matter are:\n\n * is signalling still possible by the time enough miners have upgraded\n   and are ready to start signalling?\n\n * have nodes upgraded to enforce the new rules by the time activation\n   occurs, if it occurs?\n\nBut both those benefit from less real time variance, rather than less\nvariance in the numbers of signalling periods, at least in every way\nthat I can think of.\n\nCorresponding numbers for testnet:\n\n 90 days: testnet   5-85\n180 days: testnet  23-131\n365 days: testnet  70-224\n730 days: testnet 176-390\n\n(A 50% chance of activating within 5 periods requires sustaining 89.18%\nhashpower; within 85 periods, 88.26% hashpower; far smaller differences\nwith all the other ranges -- of course, presumably the only way the\nhigher block rates ever actually happen is by someone pointing an ASIC at\ntestnet, and thus controlling 100% of blocks for multiple periods anyway)\n\n  1 period:  testnet 5.6minutes-26 days (range 26.5 days)\n 13 periods: testnet 1-135 days (range 133.5 days)\n 27 periods: testnet 13-192 days (range 178.3 days)\n 54 periods: testnet 39-283 days (range 243.1 days)\n100 periods: testnet 114-476 days (range 360.9 days)\n             (this is the value used in [0] in order to ensure 3 months'\n              worth of signalling is available)\n132 periods: testnet 184-583 days (range 398.1 days)\n225 periods: testnet 365-877 days (range 510.7 days)\n390 periods: testnet 725-1403 days (range 677.1 days)\n\n[0] https://github.com/bitcoin/bips/pull/1081#pullrequestreview-621934640\n\nCheers,\naj"
            },
            {
                "author": "Jeremy",
                "date": "2021-04-06T04:18:52",
                "message_text_only": "I found the \"50% chance of activating\" a bit confusing of a watermark, so I\nasked AJ if he didn't mind producing and tabulating the 10% chance, 50%\nchance, and 90% chance to show the sharpness of the bounds better. Each\ncategory below shows the single-shot and repeated trial odds for the range\nof trials (5 to 7). Additionally, I ran the 99% & 1% band to show that\nwe're likely to not have a false positive if < 87% is signalling nor a\nfalse negative if > 90% is signalling\n\n1%:\n    87.61% hashpower gives 0.20188% chance of success for 0.01005% chance\nover 5 trials\n    87.47% hashpower gives 0.14044% chance of success for 0.00979% chance\nover 7 trials\n    86.74% hashpower gives 0.01929% chance of success for 0.00979% chance\nover 51 trials\n    86.74% hashpower gives 0.02080% chance of success for 0.01138% chance\nover 55 trials\n\n\n99%:\n    89.34% hashpower gives 60.19226% chance of success for 0.99000% chance\nover 5 trials\n    89.08% hashpower gives 48.20380% chance of success for 0.99000% chance\nover 7 trials\n\n    87.94% hashpower gives 8.63591% chance of success for 0.99001% chance\nover 51 trials\n    87.90% hashpower gives 8.03152% chance of success for 0.99000% chance\nover 55 trials\n\n\nI was also curious to see what hashrate we'd need to have the classic 5 9's\nof reliability if we were to only have *two* periods to signal. This serves\na decent check for the situation where the earlier periods in a ST should\nbe discounted (i.e., P(signals> 90% | first 3 periods) = 0) because miners\nstill need time to upgrade.\n\n91.03% hashpower gives 99.68578% chance of success for 0.99999% chance over\n2 trials\n\nI believe this demonstrates more strongly that MTP can be used to ensure a\nsmooth upgrade.\n\n------------------------\n\n\nShould've been 1815, and seems like I had some older code that deals\nwith precision better, so:\n\n10%:\n   88.15% gives 2.08538% chance of success for 0.10001% chance over 5 trials\n   87.98% gives 1.49100% chance of success for 0.09982% chance over 7 trials\n\n   87.16% gives 0.20610% chance of success for 0.09987% chance over 51\ntrials\n   87.13% gives 0.18834% chance of success for 0.09849% chance over 55\ntrials\n\n50%:\n   88.67% gives 12.94200% chance of success for 0.49992% chance over 5\ntrials\n   88.47% gives 9.42506% chance of success for 0.49990% chance over 7 trials\n\n   87.53% gives 1.35127% chance of success for 0.50035% chance over 51\ntrials\n   87.50% gives 1.25229% chance of success for 0.49998% chance over 55\ntrials\n\n90%:\n   89.07% gives 36.90722% chance of success for 0.90002% chance over 5\ntrials\n   88.83% gives 28.02839% chance of success for 0.89997% chance over 7\ntrials\n\n   87.78% gives 4.41568% chance of success for 0.90006% chance over 51\ntrials\n   87.75% gives 4.09983% chance of success for 0.89999% chance over 55\ntrials\n\nSo 0.24% is the biggest difference for 5-7 trials at 90%, but the entire\nrange is under 2% anyway (87.13% for 55 trials to get 10% vs 89.07%\nfor 5 trials to get 90%).\n\nNote, each \"trial\" is a retarget period here...\n\nCode:\nhttps://gist.github.com/ajtowns/fbcf30ed9d0e1708fdc98a876a04ff69#file-repeated_trials-py\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n\n\nOn Mon, Apr 5, 2021 at 3:35 AM Anthony Towns <aj at erisian.com.au> wrote:\n\n> On Sat, Apr 03, 2021 at 09:39:11PM -0700, Jeremy via bitcoin-dev wrote:\n> > As such, the main conversation in this agenda item is\n> > around the pros/cons of height or MTP and determining if we can reach\n> consensus\n> > on either approach.\n>\n> Here's some numbers.\n>\n> Given a desired signalling period of xxx days, where signaling begins\n> on the first retarget boundary after the starttime and ends on the last\n> retarget boundary before the endtime, this is how many retarget periods\n> you get (based on blocks since 2015-01-01):\n>\n>  90 days: mainnet  5-7 full 2016-block retarget periods\n> 180 days: mainnet 11-14\n> 365 days: mainnet 25-27\n> 730 days: mainnet 51-55\n>\n> (This applies to non-signalling periods like the activation/lock in delay\n> too of course. If you change it so that it ends at the first retarget\n> period after endtime, all the values just get incremented -- ie, 6-8,\n> 12-15 etc)\n>\n> If I've got the maths right, then requiring 1814 of 2016 blocks to signal,\n> means that having 7 periods instead of 5 lets you get a 50% chance of\n> successful activation by maintaining 89.04% of hashpower over the entire\n> period instead of 89.17%, while 55 periods instead of 51 gives you a 50%\n> chance of success with 88.38% hashpower instead of 88.40% hashpower.\n> So the \"repeated trials\" part doesn't look like it has any significant\n> effect on mainnet.\n>\n> If you target yy periods instead of xxx days, starting and ending on a\n> retarget boundary, you get the following stats from the last few years\n> of mainnet (again starting at 2015-01-01):\n>\n>  1 period:  mainnet 11-17 days (range 5.2 days)\n>  7 periods: mainnet 87-103 days (range 15.4 days)\n> 13 periods: mainnet 166-185 days (range 17.9 days)\n> 27 periods: mainnet 352-377 days (range 24.4 days)\n> 54 periods: mainnet 711-747 days (range 35.0 days)\n>\n> As far as I can see the questions that matter are:\n>\n>  * is signalling still possible by the time enough miners have upgraded\n>    and are ready to start signalling?\n>\n>  * have nodes upgraded to enforce the new rules by the time activation\n>    occurs, if it occurs?\n>\n> But both those benefit from less real time variance, rather than less\n> variance in the numbers of signalling periods, at least in every way\n> that I can think of.\n>\n> Corresponding numbers for testnet:\n>\n>  90 days: testnet   5-85\n> 180 days: testnet  23-131\n> 365 days: testnet  70-224\n> 730 days: testnet 176-390\n>\n> (A 50% chance of activating within 5 periods requires sustaining 89.18%\n> hashpower; within 85 periods, 88.26% hashpower; far smaller differences\n> with all the other ranges -- of course, presumably the only way the\n> higher block rates ever actually happen is by someone pointing an ASIC at\n> testnet, and thus controlling 100% of blocks for multiple periods anyway)\n>\n>   1 period:  testnet 5.6minutes-26 days (range 26.5 days)\n>  13 periods: testnet 1-135 days (range 133.5 days)\n>  27 periods: testnet 13-192 days (range 178.3 days)\n>  54 periods: testnet 39-283 days (range 243.1 days)\n> 100 periods: testnet 114-476 days (range 360.9 days)\n>              (this is the value used in [0] in order to ensure 3 months'\n>               worth of signalling is available)\n> 132 periods: testnet 184-583 days (range 398.1 days)\n> 225 periods: testnet 365-877 days (range 510.7 days)\n> 390 periods: testnet 725-1403 days (range 677.1 days)\n>\n> [0] https://github.com/bitcoin/bips/pull/1081#pullrequestreview-621934640\n>\n> Cheers,\n> aj\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210405/6228cbf2/attachment-0001.html>"
            },
            {
                "author": "Russell O'Connor",
                "date": "2021-04-06T14:34:57",
                "message_text_only": "I'm pretty sure that the question of \"is signalling still possible by the\ntime enough miners have upgraded and are ready to start signalling?\"\nStrongly benefits from a guaranteed number of signaling periods that height\nbased activation offers.  Especially for the short activation period of\nSpeedy Trial.\n\nThe other relevant value of giving enough time for users to upgrade is not\nvery sensitive.  It's not like 180 days is magic number that going over is\nsafe and going below is unsafe.\n\nThat said, as Jeremy has pointed out before (maybe it was on IRC), we can\nalmost ensure a minimum of 7 retargeting periods by carefully selecting\nsignaling start and end dates to line up in the middle of expected\nretargeting periods that we would otherwise chose with height based\nactivation. Why we would rather use MTP to fake a height based activation,\nI will never understand. But if this is what it takes to activate taproot,\nthat is fine by me.\n\nThe differences between height and MTP activation are too small to matter\nthat much for what is ultimately transient code.  As long as MTP activation\ncan pass code review it is okay with me.\n\n\nOn Mon., Apr. 5, 2021, 06:35 Anthony Towns via bitcoin-dev, <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Sat, Apr 03, 2021 at 09:39:11PM -0700, Jeremy via bitcoin-dev wrote:\n> > As such, the main conversation in this agenda item is\n> > around the pros/cons of height or MTP and determining if we can reach\n> consensus\n> > on either approach.\n>\n> Here's some numbers.\n>\n> Given a desired signalling period of xxx days, where signaling begins\n> on the first retarget boundary after the starttime and ends on the last\n> retarget boundary before the endtime, this is how many retarget periods\n> you get (based on blocks since 2015-01-01):\n>\n>  90 days: mainnet  5-7 full 2016-block retarget periods\n> 180 days: mainnet 11-14\n> 365 days: mainnet 25-27\n> 730 days: mainnet 51-55\n>\n> (This applies to non-signalling periods like the activation/lock in delay\n> too of course. If you change it so that it ends at the first retarget\n> period after endtime, all the values just get incremented -- ie, 6-8,\n> 12-15 etc)\n>\n> If I've got the maths right, then requiring 1814 of 2016 blocks to signal,\n> means that having 7 periods instead of 5 lets you get a 50% chance of\n> successful activation by maintaining 89.04% of hashpower over the entire\n> period instead of 89.17%, while 55 periods instead of 51 gives you a 50%\n> chance of success with 88.38% hashpower instead of 88.40% hashpower.\n> So the \"repeated trials\" part doesn't look like it has any significant\n> effect on mainnet.\n>\n> If you target yy periods instead of xxx days, starting and ending on a\n> retarget boundary, you get the following stats from the last few years\n> of mainnet (again starting at 2015-01-01):\n>\n>  1 period:  mainnet 11-17 days (range 5.2 days)\n>  7 periods: mainnet 87-103 days (range 15.4 days)\n> 13 periods: mainnet 166-185 days (range 17.9 days)\n> 27 periods: mainnet 352-377 days (range 24.4 days)\n> 54 periods: mainnet 711-747 days (range 35.0 days)\n>\n> As far as I can see the questions that matter are:\n>\n>  * is signalling still possible by the time enough miners have upgraded\n>    and are ready to start signalling?\n>\n>  * have nodes upgraded to enforce the new rules by the time activation\n>    occurs, if it occurs?\n>\n> But both those benefit from less real time variance, rather than less\n> variance in the numbers of signalling periods, at least in every way\n> that I can think of.\n>\n> Corresponding numbers for testnet:\n>\n>  90 days: testnet   5-85\n> 180 days: testnet  23-131\n> 365 days: testnet  70-224\n> 730 days: testnet 176-390\n>\n> (A 50% chance of activating within 5 periods requires sustaining 89.18%\n> hashpower; within 85 periods, 88.26% hashpower; far smaller differences\n> with all the other ranges -- of course, presumably the only way the\n> higher block rates ever actually happen is by someone pointing an ASIC at\n> testnet, and thus controlling 100% of blocks for multiple periods anyway)\n>\n>   1 period:  testnet 5.6minutes-26 days (range 26.5 days)\n>  13 periods: testnet 1-135 days (range 133.5 days)\n>  27 periods: testnet 13-192 days (range 178.3 days)\n>  54 periods: testnet 39-283 days (range 243.1 days)\n> 100 periods: testnet 114-476 days (range 360.9 days)\n>              (this is the value used in [0] in order to ensure 3 months'\n>               worth of signalling is available)\n> 132 periods: testnet 184-583 days (range 398.1 days)\n> 225 periods: testnet 365-877 days (range 510.7 days)\n> 390 periods: testnet 725-1403 days (range 677.1 days)\n>\n> [0] https://github.com/bitcoin/bips/pull/1081#pullrequestreview-621934640\n>\n> Cheers,\n> aj\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210406/1049635d/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2021-04-06T14:51:21",
                "message_text_only": "As I understand Andrew Chow has a patchset for height based activation\nof Speedy Trial, so that it would be great if people could review that\nto help increase the review-cycles.\n\nPersonally I also somewhat prefer block-height based activation, and\nfor myself it seems like a mild step backwards to go back to MTP, when\nas far as I understand most consider height-based to be a better\ndefined and cleaner, more predictable solution.\n\nAdam\n\nOn Tue, 6 Apr 2021 at 15:35, Russell O'Connor via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> I'm pretty sure that the question of \"is signalling still possible by the time enough miners have upgraded and are ready to start signalling?\" Strongly benefits from a guaranteed number of signaling periods that height based activation offers.  Especially for the short activation period of Speedy Trial.\n>\n> The other relevant value of giving enough time for users to upgrade is not very sensitive.  It's not like 180 days is magic number that going over is safe and going below is unsafe.\n>\n> That said, as Jeremy has pointed out before (maybe it was on IRC), we can almost ensure a minimum of 7 retargeting periods by carefully selecting signaling start and end dates to line up in the middle of expected retargeting periods that we would otherwise chose with height based activation. Why we would rather use MTP to fake a height based activation, I will never understand. But if this is what it takes to activate taproot, that is fine by me.\n>\n> The differences between height and MTP activation are too small to matter that much for what is ultimately transient code.  As long as MTP activation can pass code review it is okay with me.\n>\n>\n> On Mon., Apr. 5, 2021, 06:35 Anthony Towns via bitcoin-dev, <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> On Sat, Apr 03, 2021 at 09:39:11PM -0700, Jeremy via bitcoin-dev wrote:\n>> > As such, the main conversation in this agenda item is\n>> > around the pros/cons of height or MTP and determining if we can reach consensus\n>> > on either approach.\n>>\n>> Here's some numbers.\n>>\n>> Given a desired signalling period of xxx days, where signaling begins\n>> on the first retarget boundary after the starttime and ends on the last\n>> retarget boundary before the endtime, this is how many retarget periods\n>> you get (based on blocks since 2015-01-01):\n>>\n>>  90 days: mainnet  5-7 full 2016-block retarget periods\n>> 180 days: mainnet 11-14\n>> 365 days: mainnet 25-27\n>> 730 days: mainnet 51-55\n>>\n>> (This applies to non-signalling periods like the activation/lock in delay\n>> too of course. If you change it so that it ends at the first retarget\n>> period after endtime, all the values just get incremented -- ie, 6-8,\n>> 12-15 etc)\n>>\n>> If I've got the maths right, then requiring 1814 of 2016 blocks to signal,\n>> means that having 7 periods instead of 5 lets you get a 50% chance of\n>> successful activation by maintaining 89.04% of hashpower over the entire\n>> period instead of 89.17%, while 55 periods instead of 51 gives you a 50%\n>> chance of success with 88.38% hashpower instead of 88.40% hashpower.\n>> So the \"repeated trials\" part doesn't look like it has any significant\n>> effect on mainnet.\n>>\n>> If you target yy periods instead of xxx days, starting and ending on a\n>> retarget boundary, you get the following stats from the last few years\n>> of mainnet (again starting at 2015-01-01):\n>>\n>>  1 period:  mainnet 11-17 days (range 5.2 days)\n>>  7 periods: mainnet 87-103 days (range 15.4 days)\n>> 13 periods: mainnet 166-185 days (range 17.9 days)\n>> 27 periods: mainnet 352-377 days (range 24.4 days)\n>> 54 periods: mainnet 711-747 days (range 35.0 days)\n>>\n>> As far as I can see the questions that matter are:\n>>\n>>  * is signalling still possible by the time enough miners have upgraded\n>>    and are ready to start signalling?\n>>\n>>  * have nodes upgraded to enforce the new rules by the time activation\n>>    occurs, if it occurs?\n>>\n>> But both those benefit from less real time variance, rather than less\n>> variance in the numbers of signalling periods, at least in every way\n>> that I can think of.\n>>\n>> Corresponding numbers for testnet:\n>>\n>>  90 days: testnet   5-85\n>> 180 days: testnet  23-131\n>> 365 days: testnet  70-224\n>> 730 days: testnet 176-390\n>>\n>> (A 50% chance of activating within 5 periods requires sustaining 89.18%\n>> hashpower; within 85 periods, 88.26% hashpower; far smaller differences\n>> with all the other ranges -- of course, presumably the only way the\n>> higher block rates ever actually happen is by someone pointing an ASIC at\n>> testnet, and thus controlling 100% of blocks for multiple periods anyway)\n>>\n>>   1 period:  testnet 5.6minutes-26 days (range 26.5 days)\n>>  13 periods: testnet 1-135 days (range 133.5 days)\n>>  27 periods: testnet 13-192 days (range 178.3 days)\n>>  54 periods: testnet 39-283 days (range 243.1 days)\n>> 100 periods: testnet 114-476 days (range 360.9 days)\n>>              (this is the value used in [0] in order to ensure 3 months'\n>>               worth of signalling is available)\n>> 132 periods: testnet 184-583 days (range 398.1 days)\n>> 225 periods: testnet 365-877 days (range 510.7 days)\n>> 390 periods: testnet 725-1403 days (range 677.1 days)\n>>\n>> [0] https://github.com/bitcoin/bips/pull/1081#pullrequestreview-621934640\n>>\n>> Cheers,\n>> aj\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "David A. Harding",
                "date": "2021-04-06T16:22:16",
                "message_text_only": "On Tue, Apr 06, 2021 at 10:34:57AM -0400, Russell O'Connor via bitcoin-dev wrote:\n> The other relevant value of giving enough time for users to upgrade is not\n> very sensitive.  It's not like 180 days is magic number that going over is\n> safe and going below is unsafe.\n\nI don't think it's the 180 days value that's important but the deadline\nto upgrade before taproot activates.  With heights, some people will be\nconservative and say:\n\n  You need to upgrade by $( date -d \"66 days\" )\n\nSome people will just assume 10 minutes and say:\n\n  You need to upgrade by $( date -d \"$((10 * 2016 * 13)) minutes\" )\n\nSome people might assume 9 minutes, which I think is roughly our\nhistoric average:\n\n  You need to upgrade by $( date -d \"$((9 * 2016 * 13)) minutes\" )\n\nAs a few weeks pass and the number of blocks left until activation\ndecreases, it's likely everyone will be saying slightly different dates.\nBasically, it'll be like a few months before the recent halving where\nyou could go to different sites that would give you wildly different\nestimates---several of them claiming to be better than the others\nbecause they factored in ____.\n\nWe're stuck with that for halvings, but I think coordinating human\nactions around heights creates unnecessary confusion.\n\nUsing Towns's updated MTP doesn't eliminate this problem, but it reduces\nit significantly, especially early in the process.  Now conservative\nestimators can say:\n\n  You need to upgrade by $( date -d \"$MIN_LOCKIN_TIME + 11 days\" )\n\nTen minute estimators can say:\n\n  You need to upgrade by $( date -d \"$MIN_LOCKIN_TIME + $((10 * 2016)) minutes\" )\n\nAnd nine minute estimators can say:\n\n  You need to upgrade by $( date -d \"$MIN_LOCKIN_TIME + $((9 * 2016)) minutes\" )\n\nThose predictions are unlikely to change until shortly before the\nlockin period.\n\nI think those dates being much closer together (within 3 days) and\nstatic for several months makes it much easier to communicate to users\n(including organizations) the date by which they should upgrade if they\nwant to help enforce the soft fork's new rules.\n\nAs a side advantage, it also makes it easier to plan activation parties,\nwhich is something I think we'll especially want after we finally start\ndoing something useful with the bikeshed we repainted so many times.  :-)\n\n-Dave\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210406/e48fbe57/attachment.sig>"
            },
            {
                "author": "Russell O'Connor",
                "date": "2021-04-06T16:27:34",
                "message_text_only": "On Tue, Apr 6, 2021 at 12:23 PM David A. Harding <dave at dtrt.org> wrote:\n\n>\n>   You need to upgrade by $( date -d \"$MIN_LOCKIN_TIME + 11 days\" )\n>\n> Ten minute estimators can say:\n>\n>   You need to upgrade by $( date -d \"$MIN_LOCKIN_TIME + $((10 * 2016))\n> minutes\" )\n>\n> And nine minute estimators can say:\n>\n>   You need to upgrade by $( date -d \"$MIN_LOCKIN_TIME + $((9 * 2016))\n> minutes\" )\n>\n\nIt isn't  \"$MIN_LOCKIN_TIME + $((10 * 2016)) minutes\". It's\n\"$MIN_LOCKIN_TIME + time until next retargeting period + $((10 * 2016))\nminutes\".\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210406/bdadc623/attachment.html>"
            },
            {
                "author": "Russell O'Connor",
                "date": "2021-04-06T17:17:58",
                "message_text_only": "On Tue, Apr 6, 2021 at 12:27 PM Russell O'Connor <roconnor at blockstream.com>\nwrote:\n\n> On Tue, Apr 6, 2021 at 12:23 PM David A. Harding <dave at dtrt.org> wrote:\n>\n>>\n>>   You need to upgrade by $( date -d \"$MIN_LOCKIN_TIME + 11 days\" )\n>>\n>> Ten minute estimators can say:\n>>\n>>   You need to upgrade by $( date -d \"$MIN_LOCKIN_TIME + $((10 * 2016))\n>> minutes\" )\n>>\n>> And nine minute estimators can say:\n>>\n>>   You need to upgrade by $( date -d \"$MIN_LOCKIN_TIME + $((9 * 2016))\n>> minutes\" )\n>>\n>\n> It isn't  \"$MIN_LOCKIN_TIME + $((10 * 2016)) minutes\". It's\n> \"$MIN_LOCKIN_TIME + time until next retargeting period + $((10 * 2016))\n> minutes\".\n>\n\nNot only that, but the \"time_until_next_retargeting_period\" is a variable\nwhose distribution could straddle between 0 days and 14 days should the\nMIN_LOCKIN_TIME end up close to a retargeting boundary.  MTP risks having a\npersistent two week error in estimating the activation time (which is the\ntime that nodes need to strive to be upgraded) which may not be resolved\nuntil only two weeks prior to activation!  If MIN_LOCKIN_TIME ends up close\nto a retargeting boundary, then the MTP estimate becomes bimodal and\nprovides much worse estimates than provided by height based activation,\njust as we are approaching the important 4 weeks (or is it 2 weeks?) prior\nto activation!\n\nCompare this with height based activation which simply becomes more and\nmore accurate in its estimation consistently (until, at less than two weeks\nprior to activation, the height based estimate and the corresponding MTP\nestimate have identical distributions because they both become height based\nat that point in time.) This works out nicely because of the overall\nsimpler and easier to reason about design of height based activation.\n\nThe short of it is that MTP LOCKIN only really guarantees a minimum 2 week\nnotice prior to activation, which is largely the purpose of that LOCKIN\nperiod.  Whereas height based activation gives an estimate whose\ndistribution smoothly and continuously becomes more and more accurate as\nactivation approaches, with no abrupt changes in estimates.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210406/f713f795/attachment.html>"
            },
            {
                "author": "Anthony Towns",
                "date": "2021-04-06T19:48:19",
                "message_text_only": "On Tue, Apr 06, 2021 at 01:17:58PM -0400, Russell O'Connor via bitcoin-dev wrote:\n> Not only that, but the \"time_until_next_retargeting_period\" is a variable whose\n> distribution could straddle between 0 days and 14 days should the\n> MIN_LOCKIN_TIME end up close to a retargeting boundary.\n\nAs noted in [0] the observed time frame of a single retarget period\nover the last few years on mainnet is 11-17 days, so if LOCKED_IN is\ndetermined by a min lock in time, then activation should be expected to\noccur between 11 days (if the min lock in time is reached just prior to\na retarget boundary and the next period is short) and 34 days (if the\nmin lock in the is reached just after the retarget boundary and both\nthat period and the following one are long).\n\n[0] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018728.html \n\n> MTP risks having a\n> persistent two week error in estimating the activation time (which is the time\n> that nodes need to strive to be upgraded)\n\nThat's a range of 16 days, consistenly after the time that's specified\nand which cannot be brought forward even if miners were to attempt to\na timewarp attack. \n\nThat compares to the height based approach, which gives a similar error\nfor the 7 period / 3 month target, and larger errors for anything longer,\nand which can be both earlier or later in attack scenarios. The errors\nare worse if you consider times prior to the 2015 cut-off I used, but\nhopefully that's because of the switch to ASICs and won't be repeated?\n\n> which may not be resolved until only\n> two weeks prior to activation!\u00a0 If MIN_LOCKIN_TIME ends up close to a\n> retargeting boundary, then the MTP estimate becomes bimodal and provides much\n> worse estimates than provided by height based activation, just as we are\n> approaching the important 4 weeks (or is it 2 weeks?) prior to activation!\n\nThat doesn't seem like a particularly important design goal to me? Having\na last minute two week delay seems easy to deal with, while having to\nmake estimates of how many blocks we might have in an X month period\nX+K months in advance is not. If it were important, I expect we could\nchange the state machine to reflect that goal and make the limit tighter\n(in non-attack scenarios).\n\n> The short of it is that MTP LOCKIN only really guarantees a minimum 2 week\n> notice prior to activation,\n\nIf the timeout is at X and MTP min lockin is at X+Y then you guarantee\na notice period of at least Y + (1 retarget period).\n\nCheers,\naj"
            },
            {
                "author": "David A. Harding",
                "date": "2021-04-06T21:31:23",
                "message_text_only": "(Replies to multiple emails)\n\nOn Tue, Apr 06, 2021 at 12:27:34PM -0400, Russell O'Connor wrote:\n> It isn't  \"$MIN_LOCKIN_TIME + $((10 * 2016)) minutes\". It's\n> \"$MIN_LOCKIN_TIME + time until next retargeting period + $((10 * 2016))\n> minutes\".\n\nAh, drat, I forgot about that.  Thank you for correcting my oversight!\n\n> That doesn't seem like a particularly important design goal to me? Having\n> a last minute two week delay seems easy to deal with\n\nFrom my perspective, that of a person focused on communicating\ninformation that affects Bitcoin users and recommending infrastructure\nadjustments that should be made to accomodate those changes, I'd find\nhaving a predictable activation date to be of significant benefit.\nGiven that, an activation scheme that could provide a tight timeline\n(only delayable, not accellerable, by miner shenanegeans) would be\nsomething I'd consider an advantage of that method.\n\nThat said, it's probably not worth making the activation state machine\nmore complicated for when the simplicity of the machine for height-based\nactivations is it's chief touted benefit.\n\nThanks,\n\n-Dave\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210406/6f9d5311/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Taproot Activation Meeting Reminder: April 6th 19:00 UTC bitcoin/bitcoin-dev",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeremy",
                "David A. Harding",
                "Adam Back",
                "Anthony Towns",
                "Russell O'Connor",
                "Jorge Tim\u00f3n",
                "Robert Spigler"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 37990
        }
    },
    {
        "title": "[bitcoin-dev] PSA: Taproot loss of quantum protections",
        "thread_messages": [
            {
                "author": "Lloyd Fournier",
                "date": "2021-04-05T00:27:50",
                "message_text_only": "On Tue, 16 Mar 2021 at 11:25, David A. Harding via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> I curious about whether anyone informed about ECC and QC\n> knows how to create output scripts with lower difficulty that could be\n> used to measure the progress of QC-based EC key cracking.  E.g.,\n> NUMS-based ECDSA- or taproot-compatible scripts with a security strength\n> equivalent to 80, 96, and 112 bit security.\n\n\nHi Dave,\n\nThis is actually relatively easy if you are willing to use a trusted setup.\nThe trusted party takes a secp256k1 secret key and verifiably encrypt it\nunder a NUMS public key from the weaker group. Therefore if you can crack\nthe weaker group's public key you get the secp256k1 secret key.\nCamenisch-Damgard[1] cut-and-choose verifiable encryption works here.\nPeople then pay the secp256k1 public key funds to create the bounty. As\nlong as the trusted party deletes the secret key afterwards the scheme is\nsecure.\n\nSplitting the trusted setup among several parties where only one of them\nneeds to be honest looks doable but would take some engineering and\nanalysis work.\n\n[1] https://link.springer.com/content/pdf/10.1007/3-540-44448-3_25.pdf\n\nCheers,\n\nLL\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210405/599aee9f/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2021-04-16T03:47:45",
                "message_text_only": "Good morning LL,\n\n> On Tue, 16 Mar 2021 at 11:25, David A. Harding via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> > I curious about whether anyone informed about ECC and QC\n> > knows how to create output scripts with lower difficulty that could be\n> > used to measure the progress of QC-based EC key cracking.\u00a0 E.g.,\n> > NUMS-based ECDSA- or taproot-compatible scripts with a security strength\n> > equivalent to 80, 96, and 112 bit security.\n>\n> Hi Dave,\n>\n> This is actually relatively easy if you are willing to use a trusted setup. The trusted party takes a secp256k1 secret key and verifiably encrypt it under a NUMS public key from the weaker group. Therefore if you can crack the weaker group's public key you get the secp256k1 secret key. Camenisch-Damgard[1] cut-and-choose verifiable encryption works here.\n> People then pay the secp256k1 public key funds to create the bounty. As long as the trusted party deletes the secret key afterwards the scheme is secure.\n>\n> Splitting the trusted setup among several parties where only one of them needs to be honest looks doable but would take some engineering and analysis work.\n\nTo simplify this, perhaps `OP_CHECKMULTISIG` is sufficient?\nSimply have the N parties generate individual private keys, encrypt each of them with the NUMS pubkey from the weaker group, then pay out to an N-of-N `OP_CHECKMULTISIG` address of all the participants.\nThen a single honest participant is enough to ensure security of the bounty.\n\nKnowing the privkey from the weaker groups would then be enough to extract all of the SECP256K1 privkeys that would unlock the funds in Bitcoin.\n\nThis should reduce the need for analysis and engineering.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Lloyd Fournier",
                "date": "2021-04-16T05:00:07",
                "message_text_only": "On Fri, 16 Apr 2021 at 13:47, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n\n> Good morning LL,\n>\n> > On Tue, 16 Mar 2021 at 11:25, David A. Harding via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> > > I curious about whether anyone informed about ECC and QC\n> > > knows how to create output scripts with lower difficulty that could be\n> > > used to measure the progress of QC-based EC key cracking.  E.g.,\n> > > NUMS-based ECDSA- or taproot-compatible scripts with a security\n> strength\n> > > equivalent to 80, 96, and 112 bit security.\n> >\n> > Hi Dave,\n> >\n> > This is actually relatively easy if you are willing to use a trusted\n> setup. The trusted party takes a secp256k1 secret key and verifiably\n> encrypt it under a NUMS public key from the weaker group. Therefore if you\n> can crack the weaker group's public key you get the secp256k1 secret key.\n> Camenisch-Damgard[1] cut-and-choose verifiable encryption works here.\n> > People then pay the secp256k1 public key funds to create the bounty. As\n> long as the trusted party deletes the secret key afterwards the scheme is\n> secure.\n> >\n> > Splitting the trusted setup among several parties where only one of them\n> needs to be honest looks doable but would take some engineering and\n> analysis work.\n>\n> To simplify this, perhaps `OP_CHECKMULTISIG` is sufficient?\n> Simply have the N parties generate individual private keys, encrypt each\n> of them with the NUMS pubkey from the weaker group, then pay out to an\n> N-of-N `OP_CHECKMULTISIG` address of all the participants.\n> Then a single honest participant is enough to ensure security of the\n> bounty.\n>\n> Knowing the privkey from the weaker groups would then be enough to extract\n> all of the SECP256K1 privkeys that would unlock the funds in Bitcoin.\n\n\nYes! Nice idea.\n\nAnother idea that came to mind is that you could also just prove equality\nbetween the weak group's key and the secp256k1 key. e.g. generate a 160-bit\nkey and use it both as a secp256k1 and a 160-bit curve key and prove\nequality between them and give funds to the secp256k1 key. I implemented a\nproof between ed25519 and secp256k1 a little while ago for example:\nhttps://docs.rs/sigma_fun/0.3.0/sigma_fun/ext/dl_secp256k1_ed25519_eq/index.html\n\nThis would come with the extra assumption that it's easier to break the\n160-bit key on the 160-bit curve as opposed to just breaking the 160-bit\nkey on the 256-bit curve. Intuitively I think this is the case but I would\nwant to study that further before taking this approach.\n\nLL\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210416/dc5ad2f2/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "PSA: Taproot loss of quantum protections",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "ZmnSCPxj",
                "Lloyd Fournier"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 5821
        }
    },
    {
        "title": "[bitcoin-dev] New PSBT version proposal",
        "thread_messages": [
            {
                "author": "Lloyd Fournier",
                "date": "2021-04-05T00:35:14",
                "message_text_only": "On Wed, 10 Mar 2021 at 11:20, Lloyd Fournier <lloyd.fourn at gmail.com> wrote:\n\n> Hi Andrew & all,\n>\n> I've been working with PSBTs for a little while now. FWIW I agree with the\n> change of removing the global tx and having the input/output data stored\n> together in the new unified structures.\n>\n> One thing I've been wondering about is how output descriptors could fit\n> into PSBTs. They are useful since they allow you to determine the maximum\n> satisfaction weight for inputs so you can properly align fees as things get\n> added. I haven't seen any discussion about including them in this revision.\n> Is it simply a matter of time before they make it into a subsequent PSBT\n> spec or is there something I'm missing conceptually?\n>\n\n\nSipa replied to me off list some time ago and explained what I was missing.\nPSBTs have all the information you could want from a descriptor already.\nFor example the maximum satisfaction weight can be determined from the\nwitness/redeem script (I had forgot these fields existed). Therefore\ndescriptors are more useful in higher level applications while PSBTs are\nuseful for communicating with signing devices. Therefore there is no reason\nfor PSBTs to support descriptors.\n\nLL\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210405/911a07fe/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "New PSBT version proposal",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Lloyd Fournier"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1400
        }
    },
    {
        "title": "[bitcoin-dev] Proposal: Bitcoin Secure Multisig Setup",
        "thread_messages": [
            {
                "author": "Hugo Nguyen",
                "date": "2021-04-05T07:02:45",
                "message_text_only": "Hi all,\n\nPlease find below the complete draft of the Bitcoin Secure Multisig Setup\n(BSMS) BIP. The spec has gone through a number of important updates in the\nlast month or so. Thanks everyone who has participated in the review\nprocess.\n\nAs a PR: https://github.com/bitcoin/bips/pull/1097\n\nA few notes:\n* PBKDF2-SHA512 was chosen instead of PBKDF2-SHA256 for the key derivation\nfunction, due to widespread existing hardware support for PBKDF2-SHA512\n* Only one descriptor is stored in the multisig configuration - this\nsimplifies wallet setup and recovery\n(For the full review and relevant discussions, please check out\nhttps://github.com/nunchuk-io/bips/pull/1).\n\nBest,\nHugo\n\n<pre>\n  BIP: To be determined\n  Layer: Applications\n  Title: Bitcoin Secure Multisig Setup (BSMS)\n  Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at\ncoinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen\n<aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n  Comments-Summary: No comments yet.\n  Comments-URI:\n  Status: Proposed\n  Type: Standards Track\n  Created: 2020-11-10\n  License: BSD-2-Clause\n</pre>\n\n==Introduction==\n\n===Abstract===\n\nThis document proposes a mechanism to set up multisig wallets securely.\n\n===Copyright===\n\nThis BIP is licensed under the 2-clause BSD license.\n\n===Motivation===\n\nThe Bitcoin multisig experience has been greatly streamlined under\n[https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki\nBIP-0174\n(Partially Signed Bitcoin Transaction)]. However, what is still\nmissing is a standardized process for setting up multisig wallets\nsecurely across different vendors.\n\nThere are a number of concerns when it comes to setting up a multisig wallet:\n\n# Whether the multisig configuration, such as Signer membership,\nscript type, derivation paths and number of signatures required, is\ncorrect and not tampered with.\n# Whether the keys or the multisig configuration are leaked during the setup.\n# Whether the Signer persists the multisig configuration in their\nrespective storage, and under what format.\n# Whether the Signer's storage is tamper-proof.\n# Whether the Signer subsequently uses the multisig configuration to\ngenerate and verify receive and change addresses.\n\nAn attacker who can modify the multisig configuration can steal or\nhold funds for ransom by duping the user into sending funds to the\nwrong address. An attacker who cannot modify the configuration but can\nlearn about the keys and/or the configuration can monitor transactions\nin the wallet, resulting in loss of privacy.\n\nThis proposal seeks to address concerns #1, #2 and #3: to mitigate the\nrisk of tampering during the initial setup phase, and to define an\ninteroperable multisig configuration format.\n\nConcerns #4 and #5 should be handled by Signers and are out of scope\nof this proposal.\n\n==Specification==\n\n===Prerequisites===\nThis proposal assumes the parties in the multisig support\n[https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\nBIP-0032], [https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki\nBIP-0322], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md\nthe descriptor language] and [https://tools.ietf.org/html/rfc3686 AES\nencryption].\n\n===File Extension===\nAll descriptor and key records should have a <tt>.bsms</tt> file\nextension. Encrypted data should have a <tt>.dat</tt> extension.\n\n===Roles===\n====Coordinator====\n\nThe Coordinator initiates the multisig setup. The Coordinator\ndetermines what type of multisig is used and the exact policy script.\nIf encryption is enabled, the Coordinator also distributes a shared\nsecret or shared secrets to the parties involved for secure\ncommunication. The Coordinator gathers information from the Signers to\ngenerate a descriptor record. The Coordinator distributes the\ndescriptor record back to the Signers.\n\n====Signer====\n\nThe Signer is a participating member in the multisig. Its\nresponsibilities include providing its key record -- which contains an\nExtended Public Key (XPUB) -- to the Coordinator, verifying that its\nXPUB is included in the descriptor record and persisting the\ndescriptor record in its storage.\n\n===Setup Process===\n\n====Round 1====\n\n=====Coordinator=====\n\n* The Coordinator creates a new multisig wallet creation session. The\nCoordinator constructs the multisig script and its policy parameters,\nsuch as the required number of signatures and the total number of\nSigners (<tt>M</tt> and <tt>N</tt>).\n* The session should expire after some time period determined by the\nCoordinator, e.g., 24 hours. The timeout allows the encryption key to\nhave lower entropy.\n* If encryption is enabled, the Coordinator distributes a secret\n<tt>TOKEN</tt> to each Signer over a secure channel. The Signer can\nuse the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to\nthe Encryption section below for details on the <tt>TOKEN</tt>, the\nkey derivation function and the encryption scheme. Depending on the\nuse case, the Coordinator can decide whether to share one common\n<tt>TOKEN</tt> for all Signers, or to have one per Signer.\n* If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0</tt>,\nand all the encryption/decryption steps below can be skipped.\n\n=====Signer=====\n\n* The Signer initiates the multisig wallet creation session by setting\nthe <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from\nthe <tt>TOKEN</tt>. The Signer can keep the session open until a\ndifferent value for the <tt>TOKEN</tt> is set.\n* The Signer generates a key record by prompting the user for a\nmultisig derivation path and retrieves the XPUB at that derivation\npath. Alternatively, the Signer can choose a path on behalf of the\nuser. If the Signer chooses the path, it should try to avoid reusing\nXPUBs for different wallets.\n* The first line in the record must be the specification version\n(<tt>BSMS 1.0</tt> as of this writing). The second line must be the\nhex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>.\nThe <tt>KEY</tt> is an XPUB plus its key origin information, written\nin the descriptor-defined format, i.e.: <tt>[{master key\nfingerprint}/{derivation path}]{XPUB}</tt>. The fourth line is a text\ndescription of the key, 80 characters maximum. The fifth line must be\na <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by\nusing the private key associated with the XPUB to sign the first four\nlines. The signature should follow\n[https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki\nBIP-0322], legacy format accepted.\n* The Signer calculates the Message Authentication Code (<tt>MAC</tt>)\nfor the record. The first 16 bytes of the <tt>MAC</tt> serves as the\nInitialization Vector (<tt>IV</tt>) for the encryption.\n* The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt>\nand <tt>IV</tt>.\n* The Signer encodes the <tt>MAC</tt> and the ciphertext into\nhexadecimal format, then concatenates the results: <tt>(MAC ||\nciphertext)</tt>.\n\n====Round 2====\n\n=====Coordinator=====\n\n* The Coordinator gathers key records from all participating Signers.\nThe Coordinator verifies that there are exactly <tt>N</tt> unique key\nrecords before the wallet setup session expires.\n* For each key record, the Coordinator extracts the <tt>MAC</tt> from\nthe data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>,\nthen decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and\n<tt>IV</tt>.\n* The Coordinator verifies that the included <tt>MAC</tt> is valid\ngiven the plaintext.\n* The Coordinator verifies that the key records have compatible\nspecification versions.\n* The Coordinator verifies that the included <tt>SIG</tt> is valid\ngiven the <tt>KEY</tt>.\n* If all key records look good, the Coordinator fills in all necessary\ninformation to generate a descriptor record.\n* The first line in the descriptor record must be the specification\nversion (<tt>BSMS 1.0</tt> as of this writing). The second line must\nbe a comma-separated list of accepted derivation paths that the\nSigners can use to generate addresses from the included XPUBs. The\npaths must start with <tt>/</tt> and use non-hardened derivation. For\nexample, <tt>/0/*</tt> and <tt>/1/*</tt> are some common paths. If\nthere are no restrictions, it must say <tt>No path restrictions</tt>.\nThe third line must be the descriptor string plus a <tt>CHECKSUM</tt>,\nall in one line. The <tt>CHECKSUM</tt> has\n[https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums\nBECH32 encoding].\n* The Coordinator calculates the <tt>MAC</tt> for the record. The\nfirst 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the\nencryption..\n* The Coordinator encrypts the descriptor record with the\n<tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n* The Coordinator encodes the <tt>MAC</tt> and the ciphertext into\nhexadecimal format, then concatenates the results: <tt>(MAC ||\nciphertext)</tt>.\n* The Coordinator sends the encrypted descriptor record to all\nparticipating Signers.\n\n=====Signer=====\n\n* The Signer imports the descriptor record.\n* The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt>\nto the first 16 bytes of the <tt>MAC</tt>, then decrypts the\nciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open\nsession) and <tt>IV</tt>.\n* The Signer verifies that the included <tt>MAC</tt> is valid given\nthe plaintext.\n* The Signer verifies that it can support the included specification version.\n* The Signer verifies that it is compatible with the derivation path\nrestrictions.\n* The Signer verifies the descriptor\u2019s <tt>CHECKSUM</tt>.\n* The Signer verifies that it can support the descriptor.\n* The Signer checks that its <tt>KEY</tt> is included in the\ndescriptor, using path and fingerprint information provided. The check\nmust perform an exact match on the <tt>KEY</tt>s and not using\nshortcuts such as matching fingerprints, which is trivial to spoof.\n* For confirmation, the Signer must display to the user the\n<tt>CHECKSUM</tt>, the derivation path restrictions and the policy\nparameters, such as <tt>M</tt>, <tt>N</tt> and the position(s) of its\nown XPUB in the policy script. The total number of Signers,\n<tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack.\nThe position is important for scripts where key order matters. When\napplicable, all positions of the XPUB must be displayed. The full\ndescriptor must also be available for review upon user request.\n* When possible, the Signer should also show a preview of the first\naddress(es) of the wallet.\n* Parties must check with each other that all Signers have verified\nthe descriptor and has the same confirmation (except for the key\npositions).\n* If all checks pass, the Signer must persist the descriptor record in\nits storage.\n\nThis completes the setup.\n\n===Encryption===\n\n====The Token====\nWe define three modes of encryption.\n\n# <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0</tt>.\nEncryption is disabled.\n# <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n# <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 96-bit nonce.\n\nThe <tt>TOKEN</tt> can be converted to one of these formats:\n* A decimal number (recommended). The number must not exceed the\nmaximum value of the nonce.\n* A mnemonic phrase using\n[https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\nBIP-0039] word list (6 words in <tt>STANDARD</tt> mode; 9 words in\n<tt>EXTENDED</tt> mode).\n* A QR code.\n* Other formats.\n\nThe flexibility in the data format allows each Signer to customize the\nUser Experience based on its respective capabilities.\n\n====Key Derivation====\nThe key derivation function is [https://tools.ietf.org/html/rfc2898\nPBKDF2], with PRF = SHA512. Specifically:\n\n<tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n\nWhereas:\n\n* PRF = SHA512\n* Password = \"No SPOF\"\n* Salt = <tt>TOKEN</tt>\n* c = 2048\n* dkLen = 256\n* DKey = Derived <tt>ENCRYPTION_KEY</tt>\n\n====Encryption Scheme====\nThe encryption scheme is [https://tools.ietf.org/html/rfc3686 AES-256-CTR].\n\n<tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n\n<tt>IV = First 16 bytes of MAC</tt>\n\n<tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n\n<tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n\nWhereas:\n* DKey = <tt>ENCRYPTION_KEY</tt>\n* HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n* Data = the plaintext, e.g. the entire key record in round 1 and the\nentire descriptor record in round 2\n\nThe <tt>MAC</tt> is to be sent along with the key and descriptor\nrecord, as specified above. Because it is a <tt>MAC</tt> over the\nentire plaintext, this is essentially an\n[https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M)\nEncrypt-and-MAC] form of authenticated encryption.\n\n==QR Codes==\nFor signers that use QR codes to transmit data, key and descriptor\nrecords can be converted to QR codes, following\n[https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md\nthe BCR standard].\n\nAlso refer to [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md\nUR Type Definition for BIP44 Accounts] and\n[https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md\nUR Type Definition for Bitcoin Output Descriptors] for more details.\n\n==Security==\n\nThis proposal introduces two layers of protection. The first one is a\ntemporary, secret <tt>TOKEN</tt>. The second one is the descriptor\n<tt>CHECKSUM</tt>.\n\nThe <tt>TOKEN</tt> is used to encrypt the two rounds of communication\nbetween the Signer and the Coordinator. A <tt>MAC</tt> is also\ngenerated from the <tt>TOKEN</tt> and plaintext to authenticate the\ndata being exchanged. The <tt>TOKEN</tt> is only needed during the\nsetup phase, and can be safely discarded afterwards.\n\nThe descriptor <tt>CHECKSUM</tt>, on the other hand, can be used to\nverify the integrity of the multisig configuration. An attacker who\ntampers with the multisig configuration must also change the\ndescriptor <tt>CHECKSUM</tt>. Parties must check with each other that\nall Signers have the same <tt>CHECKSUM</tt>, along with the policy\nparameters, to reduce the chance of tampering. The <tt>CHECKSUM</tt>\nmust be persisted along with the descriptor in each Signer\u2019s storage.\n\nThe <tt>TOKEN</tt> and the <tt>CHECKSUM</tt> can\u2019t guarantee complete\nprotection, since that depends on the overall security of all parties\nin the setup, but they can make it significantly harder for an\nattacker to tamper with the multisig configuration.\n\n==Privacy==\nEncryption helps improve the privacy of the wallet by avoiding sharing\nXPUBs and descriptors in plaintext.\n\nIf the parties wish to have stronger privacy, it is recommended to use\na higher number of bits for the <tt>TOKEN</tt>, and to completely\nerase knowledge of the <tt>TOKEN</tt> after the multisig wallet has\nbeen set up.\n\n==Test Vectors==\n\n===Mode: <tt>NO_ENCRYPTION</tt>===\n====ROUND 1====\n* Coordinator\n** M-of-N: 2/2\n** ADDRESS_TYPE: NATIVE_SEGWIT\n** TOKEN: 0\n\n* Signer 1\n** MASTER_KEY_FINGERPRINT: 539f3d89\n** PRIVATE_KEY (m/48'/0'/0'/2'):\nKyoXqiwiz6qm21BSYebiZFfNF7obkhiJW6TdPMZTQQMF4kZtfD78\n** XPUB (m/48'/0'/0'/2'):\nxpub6ETerig7tq89mtaD8Gau2xRWxouRMBy6XHqciA8GZzC2dJv3w6FxfgoegH4b2qYF4oG6VBrhpLrauPs5E1q58GLCnhKp6g9QsV9ZA7J5JNa\n** Legacy signature\n** <tt>signer_1_key.bsms</tt>:\n<pre>BSMS 1.0\n00\n[539f3d89/48'/0'/0'/2']xpub6ETerig7tq89mtaD8Gau2xRWxouRMBy6XHqciA8GZzC2dJv3w6FxfgoegH4b2qYF4oG6VBrhpLrauPs5E1q58GLCnhKp6g9QsV9ZA7J5JNa\nSigner 1 key\nIPXsnNSZb8M6H4fAWtpjAc75hyHHd89fskpM5o7qFg+mPDzEPc1k2mjuIpVIIzaCe45FwPfAAa91RaStfC5Sak0=</pre>\n\n* Signer 2\n** MASTER_KEY_FINGERPRINT: f8b12aa6\n** PRIVATE_KEY (m/48'/0'/0'/2'):\nL1zht7muKnUYFMdzC3jwXd78u8tGoKr46AXGh4waF9nphUYWq7ow\n** XPUB (m/48'/0'/0'/2'):\nxpub6EWPNhGSX86SN4J2DrBUaQ826o6V4egHqAJZUDJqnsthv9CcjBZV79u68M3YZkuTJnJBXfCrHuJy97fkVurntwgt3V7Ms5hXpJV2vS8fQZM\n** Legacy signature\n** <tt>signer_2_key.bsms</tt>:\n<pre>BSMS 1.0\n00\n[f8b12aa6/48'/0'/0'/2']xpub6EWPNhGSX86SN4J2DrBUaQ826o6V4egHqAJZUDJqnsthv9CcjBZV79u68M3YZkuTJnJBXfCrHuJy97fkVurntwgt3V7Ms5hXpJV2vS8fQZM\nSigner 2 key\nH38+lp9iaesBeCN05BDTH/SnmarlH6+X+Kmw1pgCk+c1Pc1evYIdBag9Nc0nsKhvPtfEbRt9r/qsUVZ5onCtBTc=</pre>\n\n====ROUND 2====\n* Coordinator\n** <tt>my_multisig_wallet.bsms</tt>:\n<pre>BSMS 1.0\n/0/*,/1/*\nwsh(sortedmulti(2,[539f3d89/48'/0'/0'/2']xpub6ETerig7tq89mtaD8Gau2xRWxouRMBy6XHqciA8GZzC2dJv3w6FxfgoegH4b2qYF4oG6VBrhpLrauPs5E1q58GLCnhKp6g9QsV9ZA7J5JNa/*,[f8b12aa6/48'/0'/0'/2']xpub6EWPNhGSX86SN4J2DrBUaQ826o6V4egHqAJZUDJqnsthv9CcjBZV79u68M3YZkuTJnJBXfCrHuJy97fkVurntwgt3V7Ms5hXpJV2vS8fQZM/*))#fntxdj7p</pre>\n\n===Mode: <tt>STANDARD</tt> Encryption===\n====ROUND 1====\n* Coordinator\n** M-of-N: 2/2\n** ADDRESS_TYPE: NATIVE_SEGWIT\n** TOKEN (hex): 1ed4ba49e96336b8\n*** TOKEN (decimal): 2221605342811469496\n*** TOKEN (mnemonic): burst place mystery spot cricket foster\n** ENCRYPTION_KEY (hex):\n72185a0e25b4efc5d6ac0f8ed32b0165199100e32385040e3a48eb30164bf492\n\n* Signer 1\n** MASTER_KEY_FINGERPRINT: 98d79e95\n** PRIVATE_KEY (m/48'/0'/0'/2'):\nKydC7hZFtWe56oQUAw14HvQ3gKeKVd3m8frFgVMxUqpuhKHvcmm3\n** XPUB (m/48'/0'/0'/2'):\nxpub6DvvwHS5pd1D36xt4YBGJvtdThWXfn8L9qRj9DbFMExMeP6eBE6Aw9WyBC7XUQwiPPDFurirewsKZpYv68yTV5RBy7SZmw45QEkaLka5BCt\n** Legacy signature\n** <tt>signer_1_key.bsms</tt>:\n<pre>BSMS 1.0\n1ed4ba49e96336b8\n[98d79e95/48'/0'/0'/2']xpub6DvvwHS5pd1D36xt4YBGJvtdThWXfn8L9qRj9DbFMExMeP6eBE6Aw9WyBC7XUQwiPPDFurirewsKZpYv68yTV5RBy7SZmw45QEkaLka5BCt\nSigner 1 key\nHxtPoP0DrQSac/7ypcwC07R2s6jjpXR6Li2Q92zXj/FSIMQcV5yOU0/ONsDgHXamq0gD5DfPbvuVCp9ZJubclV4=</pre>\n\n* Signer 1 encryption\n** HMAC_KEY (hex):\n4dab3988cbc683ad7a8c93d43f9b11a78b63a93d5e33ea19c603f4b7b87ac284\n** MAC (hex): afe99e92f0eadc3308eb990045e90a4f54e9f59d22aae5034ac3d866d29c508d\n** IV (hex) : afe99e92f0eadc3308eb990045e90a4f\n** CIPHERTEXT (hex):\n214ec9a861a238ba7f0412305a97a6e0faa332be15af09127e131d669e5d55d73891580a5808cea5d2bf39f43496d3c0f8236eff3854fcc7446daf9d2b58fd40d97ce3b1745de2959e29767039b99969821400eca0c3517fae56d2d24d5235a3430af1ed894b68681d706cce7c75adf35d8580603aa302bc01fef06d0336a37f19dd46100baa9e4eabd8796a810e13941ad0980c126ad55d6a4bbef11a7bf893b7d2ed8fb0d8324c4c9b512d4d1e75096c63511e15018fc832816b5639d58fc28c60c049487d04bd5a6cb32aa1381d0809660d54376b9f63325c18cfd1ac5024088e74cb703fe165972cc4485abb1feefe92a0b4ea297fe2f4f7416eeee1efc9b942540931ef\n** <tt>signer_1_key.dat</tt>:\n<pre>afe99e92f0eadc3308eb990045e90a4f54e9f59d22aae5034ac3d866d29c508d214ec9a861a238ba7f0412305a97a6e0faa332be15af09127e131d669e5d55d73891580a5808cea5d2bf39f43496d3c0f8236eff3854fcc7446daf9d2b58fd40d97ce3b1745de2959e29767039b99969821400eca0c3517fae56d2d24d5235a3430af1ed894b68681d706cce7c75adf35d8580603aa302bc01fef06d0336a37f19dd46100baa9e4eabd8796a810e13941ad0980c126ad55d6a4bbef11a7bf893b7d2ed8fb0d8324c4c9b512d4d1e75096c63511e15018fc832816b5639d58fc28c60c049487d04bd5a6cb32aa1381d0809660d54376b9f63325c18cfd1ac5024088e74cb703fe165972cc4485abb1feefe92a0b4ea297fe2f4f7416eeee1efc9b942540931ef</pre>\n\n* Signer 2\n** MASTER_KEY_FINGERPRINT: 3e94b5a1\n** PRIVATE_KEY (m/48'/0'/0'/2'):\nKyPh5XYjExjNHPiBjYhp8iAntAehrDziiwRv7y9Ln6eK9QU2xP55\n** XPUB (m/48'/0'/0'/2'):\nxpub6E1W1DUYY29V2b8czCcpi36GG2uD33B11vwNopgTZwsVyfgAkA4kPCqLP5R4YzaRvzW17CQrDkgmDQbA848AdkR7W18nNvMKXzzCBSnZP9c\n** Legacy signature\n** <tt>signer_2_key.bsms</tt>:\n<pre>BSMS 1.0\n1ed4ba49e96336b8\n[3e94b5a1/48'/0'/0'/2']xpub6E1W1DUYY29V2b8czCcpi36GG2uD33B11vwNopgTZwsVyfgAkA4kPCqLP5R4YzaRvzW17CQrDkgmDQbA848AdkR7W18nNvMKXzzCBSnZP9c\nSigner 2 key\nILR49QLy9+xkMS11TIXJRSMgOQOzGbAaooq4/ZRcd8VgM6j5upJMI0mjJHseQOMYSGk8FqjXZbMvBGyiX9wdutM=</pre>\n\n* Signer 2 encryption\n** HMAC_KEY (hex):\n4dab3988cbc683ad7a8c93d43f9b11a78b63a93d5e33ea19c603f4b7b87ac284\n** MAC (hex): 5c7cb2ac407cd60b1f2b86ef46077d3a312b6ce921df2a141347e8bf1e5c6573\n** IV (hex) : 5c7cb2ac407cd60b1f2b86ef46077d3a\n** CIPHERTEXT (hex):\nf23e6c76ff45d308dea6014030a274127ad437228f1d5ec2431d2ea9e3cedd5b0a207a9efa6f926d5420205003f3cb9c4b82b2d595180e62a173a2e5aa0322de48a70a873f641bdae1764e6b1667c241e0fe03a4ccdc3fe0cfa5f75b239d6497c3b69dca17bb685ba70b307d1243836d8fb198ce727cfae4057ee0b4fdcb09f4ba5ae127f49c5de780edb4e40aec96303c8a7b98b1b8e53dd5e07e01d4f3ffd836763209a1f0cbc61adcfdc2951e77528ee7b6e68114c3a4bec38875d285021e68ae8aa913bb1e2e65dd52c649a0e98bfb4e8bab6dd10295c1167a0854ba44f094feb75d2fb00c944f07d4b47114f483df9838459316f3ddbc4a82e6507881931f8e20f5b805\n** <tt>signer_2_key.dat</tt>:\n<pre>5c7cb2ac407cd60b1f2b86ef46077d3a312b6ce921df2a141347e8bf1e5c6573f23e6c76ff45d308dea6014030a274127ad437228f1d5ec2431d2ea9e3cedd5b0a207a9efa6f926d5420205003f3cb9c4b82b2d595180e62a173a2e5aa0322de48a70a873f641bdae1764e6b1667c241e0fe03a4ccdc3fe0cfa5f75b239d6497c3b69dca17bb685ba70b307d1243836d8fb198ce727cfae4057ee0b4fdcb09f4ba5ae127f49c5de780edb4e40aec96303c8a7b98b1b8e53dd5e07e01d4f3ffd836763209a1f0cbc61adcfdc2951e77528ee7b6e68114c3a4bec38875d285021e68ae8aa913bb1e2e65dd52c649a0e98bfb4e8bab6dd10295c1167a0854ba44f094feb75d2fb00c944f07d4b47114f483df9838459316f3ddbc4a82e6507881931f8e20f5b805</pre>\n\n====ROUND 2====\n*Coordinator\n** <tt>my_multisig_wallet.bsms</tt>:\n<pre>BSMS 1.0\n/0/*,/1/*\nwsh(sortedmulti(2,[98d79e95/48'/0'/0'/2']xpub6DvvwHS5pd1D36xt4YBGJvtdThWXfn8L9qRj9DbFMExMeP6eBE6Aw9WyBC7XUQwiPPDFurirewsKZpYv68yTV5RBy7SZmw45QEkaLka5BCt/*,[3e94b5a1/48'/0'/0'/2']xpub6E1W1DUYY29V2b8czCcpi36GG2uD33B11vwNopgTZwsVyfgAkA4kPCqLP5R4YzaRvzW17CQrDkgmDQbA848AdkR7W18nNvMKXzzCBSnZP9c/*))#x0lx92qk</pre>\n\n*Coordinator encryption\n** HMAC_KEY (hex):\n4dab3988cbc683ad7a8c93d43f9b11a78b63a93d5e33ea19c603f4b7b87ac284\n** MAC (hex): df3d06db6c8b8a5f25de202e10ea225df6415d1ed0e36c64cc2be1b7e86c2a38\n** IV (hex) : df3d06db6c8b8a5f25de202e10ea225d\n** CIPHERTEXT (hex):\n2761e6bfe839586b4c90954200bc4ce6d39ef164c5d14997755575d1691ee249ffd20beda526f57a7424907f839c6c2e3ecd46889ede290a2c81de22d3f33a7fa5e55ec95c0e26005c596d0f6346f819823f361f9f9f54d1eae48b325240d66c5888bd5ebab843061dcdd73b675346da982646c83026694d757661d31c2d654fb263c9ab3e874a258bc234c48532f15e9450c982fcf161404746e9f23d25e17b74139cd799983fd0c7a7a0386a823d3789b4578879a764172cc8ef96ab003eee24f6288007d31e2b999aff5a6d30cc524a0111a99730a29cf28ae41dbff6ce21ca6bc1df37074228178048e835584e6e70dba941154d024cd03cb6c56d0bde441ce464aa749de5e814dd30e21b75f62e831ac1f28eda1a7ba7e122076789e284402c8ba85b5a0e864bce220e3c78fa2f465e2bcf6b1d378816319de99f99ce7068\n** <tt>my_multisig_wallet.dat</tt>:\n<pre>df3d06db6c8b8a5f25de202e10ea225df6415d1ed0e36c64cc2be1b7e86c2a382761e6bfe839586b4c90954200bc4ce6d39ef164c5d14997755575d1691ee249ffd20beda526f57a7424907f839c6c2e3ecd46889ede290a2c81de22d3f33a7fa5e55ec95c0e26005c596d0f6346f819823f361f9f9f54d1eae48b325240d66c5888bd5ebab843061dcdd73b675346da982646c83026694d757661d31c2d654fb263c9ab3e874a258bc234c48532f15e9450c982fcf161404746e9f23d25e17b74139cd799983fd0c7a7a0386a823d3789b4578879a764172cc8ef96ab003eee24f6288007d31e2b999aff5a6d30cc524a0111a99730a29cf28ae41dbff6ce21ca6bc1df37074228178048e835584e6e70dba941154d024cd03cb6c56d0bde441ce464aa749de5e814dd30e21b75f62e831ac1f28eda1a7ba7e122076789e284402c8ba85b5a0e864bce220e3c78fa2f465e2bcf6b1d378816319de99f99ce7068</pre>\n\n===Mode: <tt>EXTENDED</tt> Encryption===\n====ROUND 1====\n*Coordinator\n** M-of-N: 2/3\n** ADDRESS_TYPE: NESTED_SEGWIT\n** TOKEN for Signer 1 (hex): 654d63309464afcda558c6aa\n*** TOKEN (decimal): 31351541690484562733651510954\n*** TOKEN (mnemonic): grab help slow churn enough traffic nice boat price\n*** ENCRYPTION_KEY (hex):\n4073adac2351e164b8d68039abd9d4b8e4d07adccfdf73ece6e236d60b107802\n** TOKEN for Signer 2 (hex): b0344f51d5cb04083d598fa3\n*** TOKEN (decimal): 54532600447720520868878192547\n*** TOKEN (mnemonic): rabbit pen stamp process raccoon advice voice\ncradle person\n*** ENCRYPTION_KEY (hex):\n6bae6b670e257d7468c3e90194029dd468a2f39d8b9a3ff187b08209b1d409b6\n** TOKEN for Signer 3 (hex): 163fd307195982c4c39d50bb\n*** TOKEN (decimal): 6885829092987042066541138107\n*** TOKEN (mnemonic): bike write scrub crawl oblige give attack present rookie\n*** ENCRYPTION_KEY (hex):\nc78b94589214b6dc98b337ba4ce54380553ed00a1e5b1955fc540ce3b30d6566\n\n* Signer 1\n** MASTER_KEY_FINGERPRINT: 110dc257\n** PRIVATE_KEY (m/48'/0'/0'/1'):\nKzshDDEBhzyiwXHoyE7ZiLegzztEy54AG6Wq8N844LqHSQMHt4Ji\n** XPUB (m/48'/0'/0'/1'):\nxpub6EPQbDFezXYvVFHqnc8R7QUSE8hTepbyCXU7jJBT4dVm2rQHe1i6isqoj59qhyBiCdKquo6QsgMZNHvEz3BM4cNSszF25siTqLUCznBm8vk\n** Legacy signature\n** <tt>signer_1_key.bsms</tt>:\n<pre>BSMS 1.0\n654d63309464afcda558c6aa\n[110dc257/48'/0'/0'/1']xpub6EPQbDFezXYvVFHqnc8R7QUSE8hTepbyCXU7jJBT4dVm2rQHe1i6isqoj59qhyBiCdKquo6QsgMZNHvEz3BM4cNSszF25siTqLUCznBm8vk\nSigner 1 key\nIDX6xLdM4XjetYPvVfpVBXAfT7oE3tHAOB4blZpbIst8bjJ+LbDeP4tZl4O8utAuys9igXE0G3kaHz1mg/+OU8w=</pre>\n\n* Signer 1 encryption\n** HMAC_KEY (hex):\nf43c359a4b3d7b2e01be73c54519b12545ca9a23a86f824aadf577b314a7caa7\n** MAC (hex): 40b6b43e2f1bc01b748eb242235d7e09fa8a2fd6cebe35784cf3adf81910ec98\n** IV (hex) : 40b6b43e2f1bc01b748eb242235d7e09\n** CIPHERTEXT (hex):\n0877987764401c27e6c60ed2f1bb89dff1dbc5e8204149f682d53049bffe39553f24af3928aa2f78ac2d04ac5baa0c3ec39aaccf0d258e7bb6659a7b92e92f2c2784a94f4df8e8af2270d9d411bfff2cfb9f71b4e1ac87561c7d2ac57ca86a1f9716d5da7571719d24830fc8d015a0daf04b3742439484488798335357f2eeaa8e2db2ba630f9dffd88236e327ab5bfcfb6e29ee3ef6cc18e0b71c1731465c2351e76b92f7b1bd28ef6eff5414c22aa6c80090fa59b973c22e3044e92dbf3688990a49a42828e52c1e686f1193dcdf7b7118930e01419fe938c6811c58c84c36d692fd52846f998bc328471f1e73c22261791a08cda096ee3ac8b37f31afd0b1d9c335ff9ac67ff230eb0d69f2d7\n** <tt>signer_1_key.dat</tt>:\n<pre>40b6b43e2f1bc01b748eb242235d7e09fa8a2fd6cebe35784cf3adf81910ec980877987764401c27e6c60ed2f1bb89dff1dbc5e8204149f682d53049bffe39553f24af3928aa2f78ac2d04ac5baa0c3ec39aaccf0d258e7bb6659a7b92e92f2c2784a94f4df8e8af2270d9d411bfff2cfb9f71b4e1ac87561c7d2ac57ca86a1f9716d5da7571719d24830fc8d015a0daf04b3742439484488798335357f2eeaa8e2db2ba630f9dffd88236e327ab5bfcfb6e29ee3ef6cc18e0b71c1731465c2351e76b92f7b1bd28ef6eff5414c22aa6c80090fa59b973c22e3044e92dbf3688990a49a42828e52c1e686f1193dcdf7b7118930e01419fe938c6811c58c84c36d692fd52846f998bc328471f1e73c22261791a08cda096ee3ac8b37f31afd0b1d9c335ff9ac67ff230eb0d69f2d7</pre>\n\n* Signer 2\n** MASTER_KEY_FINGERPRINT: 5c890401\n** PRIVATE_KEY (m/48'/0'/0'/1'):\nL41Jnc9CdBtBJd18429MDGcTgP2DNoXaKyyGr271ndTprvrHXDQf\n** XPUB (m/48'/0'/0'/1'):\nxpub6EW1SmjSXq9YwVwcan5qWEncgx89SozMvGNpYF6hfZHYNTikNZ4gsXuVhHTi6xYJCkmY4X4wpPPS5Gr7aY39dVJMS2TGfihr25oaspKtU8q\n** Legacy signature\n** <tt>signer_2_key.bsms</tt>:\n<pre>BSMS 1.0\nb0344f51d5cb04083d598fa3\n[5c890401/48'/0'/0'/1']xpub6EW1SmjSXq9YwVwcan5qWEncgx89SozMvGNpYF6hfZHYNTikNZ4gsXuVhHTi6xYJCkmY4X4wpPPS5Gr7aY39dVJMS2TGfihr25oaspKtU8q\nSigner 2 key\nH5kN6UHaK2xACB6iYdTxxQPD8qyFEYv9iMsQs5B0MRfCM7NA5GB+7EFgmBpSctwt6B122zWBr6mRjpYjKmj+7hs=</pre>\n\n* Signer 2 encryption\n** HMAC_KEY (hex):\ne0a20b5f5285fbaa35aad08fb70f5626c9abbe1b384a4950735b28aca6325ff2\n** MAC (hex): 3a6deec8dbdbd6606a52c7d7e64eca4f972a293cbabac6f62736629fbe77928a\n** IV (hex) : 3a6deec8dbdbd6606a52c7d7e64eca4f\n** CIPHERTEXT (hex):\nbb0fb72f61b0c4858bd9c65235390b67651b94c4b0329238b0116dd6d3365ade33cb1c1b1619638968791a5d2d1d263d90280bdad8d9ca24c34a78e320076e0dccf59e7f729b541b44bbe40ba803dedd3b17c49765377cb2d913a856b86c3dd383dab475790e89226ed8ef2301574212d2809ed9c099aa67be434024ee2a4e82a146300acf755863da64807cb7bb2636f6616489636d254a870778d3540832aea44abac4328b5d90f3e6045ef36a526ce5d575f2305e3e4699dccbc713e9e68f50364036c1054c2a506aab77ea7c43a89536947c24330b09a62a90c3b4ae2d452f96ef34ec871af2c52d68ddede2503c87e2ba68d5cf9be589457879e06021ea6a6176f7dded820ba4c0e709e2a2\n** <tt>signer_2_key.dat</tt>:\n<pre>3a6deec8dbdbd6606a52c7d7e64eca4f972a293cbabac6f62736629fbe77928abb0fb72f61b0c4858bd9c65235390b67651b94c4b0329238b0116dd6d3365ade33cb1c1b1619638968791a5d2d1d263d90280bdad8d9ca24c34a78e320076e0dccf59e7f729b541b44bbe40ba803dedd3b17c49765377cb2d913a856b86c3dd383dab475790e89226ed8ef2301574212d2809ed9c099aa67be434024ee2a4e82a146300acf755863da64807cb7bb2636f6616489636d254a870778d3540832aea44abac4328b5d90f3e6045ef36a526ce5d575f2305e3e4699dccbc713e9e68f50364036c1054c2a506aab77ea7c43a89536947c24330b09a62a90c3b4ae2d452f96ef34ec871af2c52d68ddede2503c87e2ba68d5cf9be589457879e06021ea6a6176f7dded820ba4c0e709e2a2</pre>\n\n* Signer 3\n** MASTER_KEY_FINGERPRINT: 614cbf5f\n** PRIVATE_KEY (m/48'/0'/0'/1'):\nL2ccRLzH7GfVxWpU8YSY9y5UGyRoqW3UdeNT1vGfVbxAGhwU5qhD\n** XPUB (m/48'/0'/0'/1'):\nxpub6F9TfWTFcMYy5Ycd2ka2az1brJj78J2isLAWptZnCpFsesss5sZv5B8xsgt71ZXfhDWhUtf4vng4zY6HUVrQbDMPDYRLYvFFoLnAYfzgYPH\n** Legacy signature\n** <tt>signer_3_key.bsms</tt>:\n<pre>BSMS 1.0\n163fd307195982c4c39d50bb\n[614cbf5f/48'/0'/0'/1']xpub6F9TfWTFcMYy5Ycd2ka2az1brJj78J2isLAWptZnCpFsesss5sZv5B8xsgt71ZXfhDWhUtf4vng4zY6HUVrQbDMPDYRLYvFFoLnAYfzgYPH\nSigner 3 key\nH0jf2JMtke5zDDIWys6fihOCA6QBmC5+hbgVB/c2mMPNPLB6tDXt0TFZU1f9wvaCR9762anKSc8CCqXLogw8V00=</pre>\n\n* Signer 3 encryption\n** HMAC_KEY (hex):\n1f51ea067c121e2f86af5e1d484905046bc63e861573157d8b1ae9e7e47e224b\n** MAC (hex): 1a5624fcb39cebabb6174456173eec19b756bc916cf2c9d815e9bcce070898c4\n** IV (hex) : 1a5624fcb39cebabb6174456173eec19\n** CIPHERTEXT (hex):\n48d6e139bdc8c19e93cbbf5b4478340c8cf08aa91c28803084d5f58618773f7e615e0134492b496c4e7c130351c0350701f686918033f621378552d7040efedd5539d38c258bf936475de775f23da3953fe3ba5bbbd24816b8902b87a9a09700c446b085119dedee2395dd69665e742f72f2fb6da4ebe3f4704eaf45486fbfb84d764b718cc0b756e72f72ab6069d47765bdd3ebd4074af4fa99a95691a659675ce5f72235c28ddf3c3d53179e598cddc967fc896adc6e97edeeffc85b9e44611df748d923ff3dd921ad4d6e98e0de12359a37558e326faf585ba57e73ab45bc4a49f6e8a756f365f5d204e70f7c7bed269e81e9524a41e5d4cbaad0b6b442d6eea1e5da1ca345cc665a0cffe2c3\n** <tt>signer_3_key.dat</tt>:\n<pre>1a5624fcb39cebabb6174456173eec19b756bc916cf2c9d815e9bcce070898c448d6e139bdc8c19e93cbbf5b4478340c8cf08aa91c28803084d5f58618773f7e615e0134492b496c4e7c130351c0350701f686918033f621378552d7040efedd5539d38c258bf936475de775f23da3953fe3ba5bbbd24816b8902b87a9a09700c446b085119dedee2395dd69665e742f72f2fb6da4ebe3f4704eaf45486fbfb84d764b718cc0b756e72f72ab6069d47765bdd3ebd4074af4fa99a95691a659675ce5f72235c28ddf3c3d53179e598cddc967fc896adc6e97edeeffc85b9e44611df748d923ff3dd921ad4d6e98e0de12359a37558e326faf585ba57e73ab45bc4a49f6e8a756f365f5d204e70f7c7bed269e81e9524a41e5d4cbaad0b6b442d6eea1e5da1ca345cc665a0cffe2c3</pre>\n\n====ROUND 2====\n* Coordinator\n** <tt>my_multisig_wallet.bsms</tt>:\n<pre>BSMS 1.0\n/0/*,/1/*\nsh(wsh(multi(2,[110dc257/48'/0'/0'/1']xpub6EPQbDFezXYvVFHqnc8R7QUSE8hTepbyCXU7jJBT4dVm2rQHe1i6isqoj59qhyBiCdKquo6QsgMZNHvEz3BM4cNSszF25siTqLUCznBm8vk/*,[5c890401/48'/0'/0'/1']xpub6EW1SmjSXq9YwVwcan5qWEncgx89SozMvGNpYF6hfZHYNTikNZ4gsXuVhHTi6xYJCkmY4X4wpPPS5Gr7aY39dVJMS2TGfihr25oaspKtU8q/*,[614cbf5f/48'/0'/0'/1']xpub6F9TfWTFcMYy5Ycd2ka2az1brJj78J2isLAWptZnCpFsesss5sZv5B8xsgt71ZXfhDWhUtf4vng4zY6HUVrQbDMPDYRLYvFFoLnAYfzgYPH/*)))#j3ykhz7f</pre>\n\n* Send to Signer 1:\n** HMAC_KEY (hex):\nf43c359a4b3d7b2e01be73c54519b12545ca9a23a86f824aadf577b314a7caa7\n** MAC (hex): ee74a0f50943d7d1b65270028bb05133e87c832cdc1ef0a07c79db2093ca3432\n** IV (hex) : ee74a0f50943d7d1b65270028bb05133\n** CIPHERTEXT (hex):\n8e3ba3dac0f979fad0d160bd00c8294ff1726d51b95ff3e1534e5a1900f3d7cd4f6d929985a94b9da2c11e4e0f7770cc53c6739fd099477323bd26a3eca9c8016e79848d15e274463424b8355cd73cced61f1816ac8bac87f8c650ee9052f50e347c52ad24b00794a9d5523714be2fdcf731f14b7a8d7c93eab44c258e1c417d2837b9676832e8ce7239dc28b4e1166803209947b8a875a99b9478ee94f7bc17399e886179ab2a0285dc11a3883f6fa439d0f2277dadbec8c355c379fc50e945897e1a738f6a55b09f6b8b6bdf6d4bc248219cbad3662a78a2f539c989e055e00b8efd42fbff978e1a5cc10f83df56117ece4d17f94a0a6d3803778ed53531419250c5a0fff6cad4ab401468dd054915b068cc8826ae1308a71b38060d68c9248d59eea11c2c52a66d5f6bc0d7ae6cb44305c36e56068456d293b70037902e7b05a3ee0af710201128dffc0c16c3306b66bd19b9ae5b91aded35ef33f07743e5b185a9f88a5c67d40270e3bbcf592167ceaf82ead693728d5129b50075edd5ce24863f3484b4b063599ed1327e1c87d0a2051fed3b1234a702722b686e4c9392a403b79726800dd6b691e516e44d9e836c190b10cf2bb262bba98293c97f2c323e59acd0a1f988c5\n** <tt>my_multisig_wallet_for_signer_1.dat</tt>:\n<pre>ee74a0f50943d7d1b65270028bb05133e87c832cdc1ef0a07c79db2093ca34328e3ba3dac0f979fad0d160bd00c8294ff1726d51b95ff3e1534e5a1900f3d7cd4f6d929985a94b9da2c11e4e0f7770cc53c6739fd099477323bd26a3eca9c8016e79848d15e274463424b8355cd73cced61f1816ac8bac87f8c650ee9052f50e347c52ad24b00794a9d5523714be2fdcf731f14b7a8d7c93eab44c258e1c417d2837b9676832e8ce7239dc28b4e1166803209947b8a875a99b9478ee94f7bc17399e886179ab2a0285dc11a3883f6fa439d0f2277dadbec8c355c379fc50e945897e1a738f6a55b09f6b8b6bdf6d4bc248219cbad3662a78a2f539c989e055e00b8efd42fbff978e1a5cc10f83df56117ece4d17f94a0a6d3803778ed53531419250c5a0fff6cad4ab401468dd054915b068cc8826ae1308a71b38060d68c9248d59eea11c2c52a66d5f6bc0d7ae6cb44305c36e56068456d293b70037902e7b05a3ee0af710201128dffc0c16c3306b66bd19b9ae5b91aded35ef33f07743e5b185a9f88a5c67d40270e3bbcf592167ceaf82ead693728d5129b50075edd5ce24863f3484b4b063599ed1327e1c87d0a2051fed3b1234a702722b686e4c9392a403b79726800dd6b691e516e44d9e836c190b10cf2bb262bba98293c97f2c323e59acd0a1f988c5</pre>\n\n* Send to Signer 2:\n** HMAC_KEY (hex):\ne0a20b5f5285fbaa35aad08fb70f5626c9abbe1b384a4950735b28aca6325ff2\n** MAC (hex): 81df9e064f1de1d5f754c4e20f9286f9d81b856d3965677a9f2430cb9297ad1f\n** IV (hex) : 81df9e064f1de1d5f754c4e20f9286f9\n** CIPHERTEXT (hex):\ndcd82038ef627d6cb2deb62d04c4ccbaa3a354633d960e46312c22791f039f23fd9782a1e3a63504c1e5b3a0770bb8d32fdf168738b6c03278f1391dd5d01e9aafee7be2c8136ee018feff6fc8cdb926df13a36e115ddca8254934f56b7f700768c94cb8388a8297834de9affcd959417ae3d6ec3251387904f50f51f06306cc4d36eefc51418dd3b2c5454910a23ec67a40a3b918d2a740e812929aae949d8dde2c41cbbb3a2b7c2103788421c147f4794d6a26947c15ef4a99ceb825d0c5aaa78b8737d0ef712ba8e269a9941b1af5d217dcdd9cd06727fbdc70fabe3f5a8c09acff4e76992be7f27c6b12ca84739f62a6da86e5b79103d632c0dc8ab3f91fddb3cfbe67084dc4b861c4ac7c86fb171a058c98c67cffdc40ff17ae1533361cc6fb7b63657af0408cf30bf9d6d97aaacf9d3ff443eee61f207228cd91769ce83a0709c1be1847884c6a8fdc86ede66aef8e34fc509c49edf30f743bdc8f9052961ee340924ec2d1caadc6fd286bb3e233c153cd08c1934127752dc28e0d12efa92a050c4061653edb1cbf2fd4b2ba4e038f0b44f5735f198e92571c029156f65f534bfc149f38d611829901372cfc0176b9d2f9ac6512b7f37941a02dff701df0bceadaacfc6935\n** <tt>my_multisig_wallet_for_signer_2.dat</tt>:\n<pre>81df9e064f1de1d5f754c4e20f9286f9d81b856d3965677a9f2430cb9297ad1fdcd82038ef627d6cb2deb62d04c4ccbaa3a354633d960e46312c22791f039f23fd9782a1e3a63504c1e5b3a0770bb8d32fdf168738b6c03278f1391dd5d01e9aafee7be2c8136ee018feff6fc8cdb926df13a36e115ddca8254934f56b7f700768c94cb8388a8297834de9affcd959417ae3d6ec3251387904f50f51f06306cc4d36eefc51418dd3b2c5454910a23ec67a40a3b918d2a740e812929aae949d8dde2c41cbbb3a2b7c2103788421c147f4794d6a26947c15ef4a99ceb825d0c5aaa78b8737d0ef712ba8e269a9941b1af5d217dcdd9cd06727fbdc70fabe3f5a8c09acff4e76992be7f27c6b12ca84739f62a6da86e5b79103d632c0dc8ab3f91fddb3cfbe67084dc4b861c4ac7c86fb171a058c98c67cffdc40ff17ae1533361cc6fb7b63657af0408cf30bf9d6d97aaacf9d3ff443eee61f207228cd91769ce83a0709c1be1847884c6a8fdc86ede66aef8e34fc509c49edf30f743bdc8f9052961ee340924ec2d1caadc6fd286bb3e233c153cd08c1934127752dc28e0d12efa92a050c4061653edb1cbf2fd4b2ba4e038f0b44f5735f198e92571c029156f65f534bfc149f38d611829901372cfc0176b9d2f9ac6512b7f37941a02dff701df0bceadaacfc6935</pre>\n\n* Send to Signer 3:\n** HMAC_KEY (hex):\n1f51ea067c121e2f86af5e1d484905046bc63e861573157d8b1ae9e7e47e224b\n** MAC (hex): 159a91100cacd123480b7d085c8bb32ec8eb06f0391b6dc8fac07ae67eb37b81\n** IV (hex) : 159a91100cacd123480b7d085c8bb32e\n** CIPHERTEXT (hex):\nc7269d8be21d1cfe172e35aa106760f1fdc929fce19da8fb7f74f759efec1ee02796fb1e8b008cf177f60a2021570f17aeeb41f8636858654082734b90959b98fd08419f901683c4ca3e76b3e482fea4c67162775e0d80bcb45df729f646c1364a3d8a7d1ff961717b00897e877c1c0554d3502942149726806269c546ad2dd34ba286ddf5cd336b83aabf7091fa25e607faf7e54017d84113e1e3ec440b3704addea188b89293469306fc0a98570afdcf269026b2d2e760f466c1f75bcf75fdf030c0a692e5681fd4487e59d6e96451ff5b6b9f2521b8e95e796ef4ab0a917794d91a30fdac7ee9ddbd89d174831bd133ab12a74f52f6283ee2c5fe3d5a957a7c1a15530b2c5224f76d90057dc94f2ee34e28b037ae7f518cc6dfe725cd3e657648de82b200ea77830eb93219f883998d3207a4ef5902d1119b0cde6b364bc1effb86109d9c2babc8ab26dce90329779d8cd0d737e9825a25586aa3c8fa5317e3e433ff235b82f629de0504e3c992f8e8de299f62751bc1fcb2e75e0262c7a27be7068cea69b14f303e97c24b99ed29cae142564e285657704b4c411d0d4f8c58819e2c0e0ffc3667eb5a408aad8a3023a5f00875e7deab95dc365d8757f7b79815a4fd9e6de2b3\n** <tt>my_multisig_wallet_for_signer_3.dat</tt>:\n<pre>159a91100cacd123480b7d085c8bb32ec8eb06f0391b6dc8fac07ae67eb37b81c7269d8be21d1cfe172e35aa106760f1fdc929fce19da8fb7f74f759efec1ee02796fb1e8b008cf177f60a2021570f17aeeb41f8636858654082734b90959b98fd08419f901683c4ca3e76b3e482fea4c67162775e0d80bcb45df729f646c1364a3d8a7d1ff961717b00897e877c1c0554d3502942149726806269c546ad2dd34ba286ddf5cd336b83aabf7091fa25e607faf7e54017d84113e1e3ec440b3704addea188b89293469306fc0a98570afdcf269026b2d2e760f466c1f75bcf75fdf030c0a692e5681fd4487e59d6e96451ff5b6b9f2521b8e95e796ef4ab0a917794d91a30fdac7ee9ddbd89d174831bd133ab12a74f52f6283ee2c5fe3d5a957a7c1a15530b2c5224f76d90057dc94f2ee34e28b037ae7f518cc6dfe725cd3e657648de82b200ea77830eb93219f883998d3207a4ef5902d1119b0cde6b364bc1effb86109d9c2babc8ab26dce90329779d8cd0d737e9825a25586aa3c8fa5317e3e433ff235b82f629de0504e3c992f8e8de299f62751bc1fcb2e75e0262c7a27be7068cea69b14f303e97c24b99ed29cae142564e285657704b4c411d0d4f8c58819e2c0e0ffc3667eb5a408aad8a3023a5f00875e7deab95dc365d8757f7b79815a4fd9e6de2b3</pre>\n\n==Acknowledgement==\n\nSpecial thanks to Pavol Rusnak, Dmitry Petukhov, Christopher Allen,\nCraig Raw, Robert Spigler, Gregory Sanders, Ta Tat Tai, Michael\nFlaxman, Pieter Wuille and others for their feedback on the\nspecification.\n\n==References==\n\nOriginal mailing list thread:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018385.html\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210405/4f9dbebb/attachment-0001.html>"
            },
            {
                "author": "Sjors Provoost",
                "date": "2021-04-09T12:07:05",
                "message_text_only": "Hi all,\n\nFirst of all thanks for your continued work on standardising multisig setup.\n\nThe use case I personally find most interesting is not a multi-party setup, but rather just combining a bunch of my own devices. Those might even be in the same room during the setup, only to be moved to my moon base later.\n\nThis means I've paid less attention to the encryption scheme, so I might set TOKEN=0, but nevertheless I am skeptical about it. The first step is for the Coordinator to generate a TOKEN, presumably using its own entropy. But IIUC anyone who intercepts that token can decrypt any future step in the setup process. This suggests a chicken-egg problem where you need some pre-existing secure communications channel.\n\nTo the list of concerns at the top of the BIP, I would add one: losing multisig setup context. E.g. in the event of a fire where you only recover your steel engraved mnemonic(s), but no longer have the wallet descriptors.\n\nIf you still have all devices and know (or guess) the threshold then BIP48 and sorted_multi descriptors will save you. But if you have a 2-of-3 setup and lost 1 device then without the metadata your coins are lost. In a future with musig(?) and miniscript increasingly the setup data is just as critical as the seeds.\n\nA future standard (or extension of this one) should recommend an encryption convention for the descriptor data, ideally such that with *any* of the seeds you can decrypt a file that contains the full setup. That file could then just float redundantly around the internet and pieces of paper in various locations, without compromising privacy.\n\nThe proposed encryption system doesn't help with that though, because it's based on entropy from the Coordinator, rather than from the signers.\n\n\nSmaller suggestions:\n* link to this new mail thread in the BIP\n* use magic bytes so .bsms so operating systems like Android / iOs can open the right app for them\n* don't use separate file extensions for encrypted vs unencrypted content, just indicate somehow that a given field is encrypted\n* although plain text files are handy for debugging, I think a binary format like PSBT is much powerful. Any device that can parse and write binary PSBT should be able to implement a similar parser / writer for a binary .bsms format.\n* BIP48 and sorted_multi descriptors are useful in a loss-of-metadata scenario. The BIP uses both in the examples, but doesn't explictly endorse these derivations. It also contradicts them: \"If the Signer chooses the path, it should try to avoid reusing XPUBs for different wallets.\". Maybe this is out of scope.\n   * one way to resolve xpub reuse would be to make the \"BIP48\" path a function of the co-signer fingerprints and wallet threshold, but this requires an extra communication round\n* there should be a way for signers to communicate their capabilities, perhaps with a different xpub for each potential scheme. E.g. there's m/48' native SegWit now, MuSig and/or or Tapleaf based multisig in the future, or even generic Miniscript support.\n* the idea of only storing the receive descriptor, not the change descriptor, is fine by me, though I'd prefer an extension to the descriptor format to deal with this\n\nSjors\n\n> Op 5 apr. 2021, om 09:02 heeft Hugo Nguyen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> het volgende geschreven:\n> \n> Hi all,\n> \n> Please find below the complete draft of the Bitcoin Secure Multisig Setup (BSMS) BIP. The spec has gone through a number of important updates in the last month or so. Thanks everyone who has participated in the review process.\n> \n> As a PR: https://github.com/bitcoin/bips/pull/1097\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210409/d254f217/attachment.sig>"
            },
            {
                "author": "Hugo Nguyen",
                "date": "2021-04-09T14:09:51",
                "message_text_only": "Hi Sjors\nThanks for the feedback!\n\nThe first step is for the Coordinator to generate a TOKEN, presumably using\n> its own entropy. But IIUC anyone who intercepts that token can decrypt any\n> future step in the setup process. This suggests a chicken-egg problem where\n> you need some pre-existing secure communications channel.\n>\n\nThe exchange of the TOKEN is frequently mistaken as the chicken-and-egg\nproblem, but it is not so.\n\nTo understand why this isn't chicken-and-egg, and why the TOKEN actually\nadds value, consider *the scale of the communication operation needed to\nexchange the TOKEN*, and *the scale of the communication operation needed\nto gather data for the creation of the multisig wallet *(with or without\nthe TOKEN):\n\n1) The TOKEN itself is a single piece of data that is 64- or 96-bit. It is\nsmall enough to be easily exchanged (even memorized) and entered into\nvarious devices. It requires only a single round of communication, but can\nprotect as many rounds of communication as needed.\n\n2) The data needed to create the multisig wallet, on the other hand, are\nquite involving:\n(a) Each Signer needs to share its XPUB, which cannot be memorized\n(b) The XPUBs also come with their own metadata\n(c) The creation of the wallet requires at least two rounds of\ncommunications since the Signers need to voluntarily share their XPUBs\nfirst, only then can a Coordinator combine the XPUBs into a single multisig\nscript and pass back the configuration to the Signers. (Note that without a\nCoordinator, you'll need O(N^2) rounds of communication).\n(d) Because Signers are typically off-line cold storage, the paths between\nthe Signers / the Signers <> Coordinator likely involve multiple hops\nthrough various media, such as unsecure USB connection. This is the way\nmost multisig solutions are currently being implemented. It means the XPUBs\nand the multisig configuration are vulnerable to leaking and/or\nmodifications.\n\nNote that (d) is especially problematic for remote multisig setups. The\nmore remote, the more potential hops along the way, the more problematic.\n\nSo you can see that *the TOKEN ultimately reduces the problem of sharing a\nlarge amount of sensitive data back and forth, to the sharing of a single,\nsmall piece of data upfront.* An added advantage of this approach is that\nif the parties fail to establish a shared TOKEN, the scheme fails with no\nharm done.\n\nThe Coordinator, on the other hand, adds value by solving the O(n^2)\ncommunication problem. Some minimal amount of trust is needed for the\nCoordinator, but this can be greatly mitigated by a number of ways that we\nhave defined in the spec, such as:\n* Signers must check that their XPUBs are included in the final descriptor\n* Signers must display to the user the multisig configuration: M/N,\nrelative position(s) of XPUBs, etc.\n* Signers must display the full descriptor upon user request for manual\ninspection - this one is important because it means that the new scheme\ncannot be worse than the status quo.\n* Signers are recommended to display a preview of the first receive\naddress(es).\n\nAll in all, the Coordinator's role helps ease the setup process, while its\nability to pull off any shenanigans is greatly limited.\n\nBest,\nHugo\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210409/fadc12cb/attachment-0001.html>"
            },
            {
                "author": "Hugo Nguyen",
                "date": "2021-04-09T14:54:11",
                "message_text_only": "(Continue off last email: also keep in mind, that just like BIP174,\nCoordinator and Signer are abstract roles. This means in theory a Signer\ncan be the Coordinator too. The same criteria for trust applies equally to\na Signer and a Coordinator.)\n\nThe use case I personally find most interesting is not a multi-party setup,\n> but rather just combining a bunch of my own devices. Those might even be in\n> the same room during the setup, only to be moved to my moon base later.\n>\n\nAnd that's fair. Both use cases (local and remote multisig) are valid and\ncurrently being used. But IMO a standard should accommodate both.\n\n\n> To the list of concerns at the top of the BIP, I would add one: losing\n> multisig setup context. E.g. in the event of a fire where you only recover\n> your steel engraved mnemonic(s), but no longer have the wallet descriptors.\n>\n\nGood point.\n\n\n>\n> If you still have all devices and know (or guess) the threshold then BIP48\n> and sorted_multi descriptors will save you. But if you have a 2-of-3 setup\n> and lost 1 device then without the metadata your coins are lost. In a\n> future with musig(?) and miniscript increasingly the setup data is just as\n> critical as the seeds.\n>\n\nHow so? Each signer device should ideally have a copy of the multisig\nconfiguration. If you lose 1 device in a 2-of-3, you can still spend from\nthe wallet? Unless I'm missing something here.\n\n\n> A future standard (or extension of this one) should recommend an\n> encryption convention for the descriptor data, ideally such that with *any*\n> of the seeds you can decrypt a file that contains the full setup. That file\n> could then just float redundantly around the internet and pieces of paper\n> in various locations, without compromising privacy.\n>\n\nPost-wallet-creation, each Signer can apply extra encryption on top of BSMS\nfor the persistence of the configuration file any way it wants :) It\ndoesn't contradict with the current spec.\n\n\n> The proposed encryption system doesn't help with that though, because it's\n> based on entropy from the Coordinator, rather than from the signers.\n>\n\nThey are for different purposes. The TOKEN-based encryption is only needed\ntemporarily for the setup.\n\n\n> Smaller suggestions:\n> * link to this new mail thread in the BIP\n>\n\nWill do.\n\n\n> * use magic bytes so .bsms so operating systems like Android / iOs can\n> open the right app for them\n> * don't use separate file extensions for encrypted vs unencrypted content,\n> just indicate somehow that a given field is encrypted\n> * although plain text files are handy for debugging, I think a binary\n> format like PSBT is much powerful. Any device that can parse and write\n> binary PSBT should be able to implement a similar parser / writer for a\n> binary .bsms format.\n>\n\nWill consider these points, but I prefer plaintext for wallet\nconfiguration. Human readability for the wallet configuration is a pro not\na con IMO. Also helps when backing up.\n\n\n> * BIP48 and sorted_multi descriptors are useful in a loss-of-metadata\n> scenario. The BIP uses both in the examples, but doesn't explictly endorse\n> these derivations. It also contradicts them: \"If the Signer chooses the\n> path, it should try to avoid reusing XPUBs for different wallets.\". Maybe\n> this is out of scope.\n>    * one way to resolve xpub reuse would be to make the \"BIP48\" path a\n> function of the co-signer fingerprints and wallet threshold, but this\n> requires an extra communication round\n>\n\nWe discussed this in the linked PR (\nhttps://github.com/nunchuk-io/bips/pull/1), and decided that enforcing\nagainst path reuse is out-of-scope. We give examples of sorted_multi and\nmulti because different vendors support different things.\n\n\n> * there should be a way for signers to communicate their capabilities,\n> perhaps with a different xpub for each potential scheme. E.g. there's m/48'\n> native SegWit now, MuSig and/or or Tapleaf based multisig in the future, or\n> even generic Miniscript support.\n>\n\nI considered Signers signaling capabilities (for a different reason), but\nopted against it because it further complicates the scheme. Also BIP48-like\nproposals are made redundant with the use of output descriptors.\n\n\n> * the idea of only storing the receive descriptor, not the change\n> descriptor, is fine by me, though I'd prefer an extension to the descriptor\n> format to deal with this\n>\n\nThat's not quite accurate. The spec stores the top-level descriptor\n(XPUB/*) along with the path restrictions (/0/*,/1/*), not the receive\ndescriptor.\n\n The path restrictions would allow you to extend on the spec. There's also\na VERSION field.\n\nBest,\nHugo\n\n\n>\n> Sjors\n>\n> > Op 5 apr. 2021, om 09:02 heeft Hugo Nguyen via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> het volgende geschreven:\n> >\n> > Hi all,\n> >\n> > Please find below the complete draft of the Bitcoin Secure Multisig\n> Setup (BSMS) BIP. The spec has gone through a number of important updates\n> in the last month or so. Thanks everyone who has participated in the review\n> process.\n> >\n> > As a PR: https://github.com/bitcoin/bips/pull/1097\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210409/754162ae/attachment-0001.html>"
            },
            {
                "author": "Sjors Provoost",
                "date": "2021-04-09T15:33:31",
                "message_text_only": "Thanks for the detailed response. Just 1 thing I needed to clarify:\n\n> To the list of concerns at the top of the BIP, I would add one: losing multisig setup context. E.g. in the event of a fire where you only recover your steel engraved mnemonic(s), but no longer have the wallet descriptors.\n> \n> Good point.\n> \n> \n> If you still have all devices and know (or guess) the threshold then BIP48 and sorted_multi descriptors will save you. But if you have a 2-of-3 setup and lost 1 device then without the metadata your coins are lost. In a future with musig(?) and miniscript increasingly the setup data is just as critical as the seeds.\n> \n> How so? Each signer device should ideally have a copy of the multisig configuration. If you lose 1 device in a 2-of-3, you can still spend from the wallet? Unless I'm missing something here.\n\nI was thinking about a scenario where all devices are destroyed. All you have left are the mnemonics. But indeed if at least one of your devices is still intact AND it has the configuration, you're also good.\n\nBut there are plenty of devices out there that can't do this. Those devices can still be useful, even if they can't fully check everything.\n\nSjors\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210409/7ec8f067/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210409/7ec8f067/attachment.sig>"
            },
            {
                "author": "Robert Spigler",
                "date": "2021-04-10T19:32:25",
                "message_text_only": "Hi Sjors,\n\nThanks for your comments.\n\n>Chicken-egg problem\n\nI agree with Hugo's detailed response here.\n\n>Losing multisig setup context (in the event of a fire where you only recover your steel engraved mnemonic(s), but no longer have the wallet descriptors.)\n\nDevices need to persist the descriptor, if they currently can't, they don't comply with this standard and they can't be used securely for multisig. There's no reasons the master seed and descriptor both can't be backed up outside of each device. I can't see a scenario where it would be possible to recover only the seed. (I don't know yet how Core will decide how to best backup this info, seeing as BIP39 was rejected).\n\n>BIP48\n\nI agree with Hugo that BIP48 is redundant with descriptors, please see https://github.com/bitcoin/bips/pull/1089 for a proposed updated hierarchy for multisignature wallets.\n\n>An encryption convention for the descriptor data\n\nI understand this concern. Like you mentioned previously, I too often set up multisignature wallets for clients where they are actually owned by the single party. A concern is that while the backup location owners cannot spend (due to the M-of-N restriction), they can view the wallet balance/history. As Hugo mentioned, you can apply any encryption you want after the setup, so a solution may be to use Shamir Secret Sharing (Blockchain Commons has done a lot of work on that here: https://github.com/BlockchainCommons/Airgapped-Wallet-Community/discussions/37#discussioncomment-287993)\n\n>Plain text vs binary\n\nI too favor plain text\n\nRobert Spigler\nPersonal Fingerprint: BF0D 3C08 A439 5AC6 11C1 5395 B70B 4A77 F850 548F\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Friday, April 9, 2021 11:33 AM, Sjors Provoost via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Thanks for the detailed response. Just 1 thing I needed to clarify:\n>\n>>> To the list of concerns at the top of the BIP, I would add one: losing multisig setup context. E.g. in the event of a fire where you only recover your steel engraved mnemonic(s), but no longer have the wallet descriptors.\n>>\n>> Good point.\n>>\n>>> If you still have all devices and know (or guess) the threshold then BIP48 and sorted_multi descriptors will save you. But if you have a 2-of-3 setup and lost 1 device then without the metadata your coins are lost. In a future with musig(?) and miniscript increasingly the setup data is just as critical as the seeds.\n>>\n>> How so? Each signer device should ideally have a copy of the multisig configuration. If you lose 1 device in a 2-of-3, you can still spend from the wallet? Unless I'm missing something here.\n>\n> I was thinking about a scenario where all devices are destroyed. All you have left are the mnemonics. But indeed if at least one of your devices is still intact AND it has the configuration, you're also good.\n>\n> But there are plenty of devices out there that can't do this. Those devices can still be useful, even if they can't fully check everything.\n>\n> Sjors\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210410/83ab6a0b/attachment.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2021-04-10T13:53:20",
                "message_text_only": "here's what we do for multisig:\n\n- each member generates their own public/private key pair first and\npublishes the pair to all other members\n- members are then verified using a secondary channel, like a phone\ncall ... where the H128(pubk) is turned into BIP-words for\nmanual/visual verification\n- multi-round DKG is used with appropriate commitments and\nverification of components  (nice article:\nhttps://link.springer.com/content/pdf/10.1007/s00145-006-0347-3.pdf)\n\nwithout that, there's simply no guarantee that you're not\ncommunicating with an attacker during setup.\n\nOn Tue, Feb 9, 2021 at 2:53 AM Hugo Nguyen via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Hi all,\n> I would like to propose a new BIP for Secure Multisig Setup.\n> This proposal has taken inputs from folks at Coldcard, Shift Crypto and Cobo -- listed below as co-authors.\n>\n> This was inspired by my own experience working with hardware wallets on the market, as well as existing research into the challenges of multisig.\n>\n> Cheers,\n> Hugo\n>\n> <pre>\n>   BIP: To be determined\n>   Layer: Applications\n>   Title: Bitcoin Secure Multisig Setup (BSMS)\n>   Author: Hugo Nguyen <hugo at nunchuk.io>, Peter Gray <peter at coinkite.com>, Marko Bencun <marko at shiftcrypto.ch>, Aaron Chen <aarondongchen at gmail.com>, Rodolfo Novak <rodolfo at coinkite.com>\n>   Comments-Summary: No comments yet.\n>   Comments-URI:\n>   Status: Proposed\n>   Type: Standards Track\n>   Created: 2020-11-10\n>   License: BSD-2-Clause\n> </pre>\n>\n> ==Introduction==\n>\n> ===Abstract===\n>\n> This document proposes a mechanism to set up multisig wallets securely.\n>\n> ===Copyright===\n>\n> This BIP is licensed under the 2-clause BSD license.\n>\n> ===Motivation===\n>\n> The Bitcoin multisig experience has been greatly streamlined under [https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki BIP-0174 (Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n>\n> There are a number of concerns when it comes to setting up a multisig wallet:\n>\n> # Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n> # Whether Signer persists the multisig configuration in their respective storage, and under what format.\n> # Whether Signer's storage is tamper-proof.\n> # Whether Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n>\n> An attacker who can modify the multisig configuration can steal or hold funds to ransom by duping the user into sending funds to the wrong address.\n>\n> This proposal seeks to address concerns #1 and #2: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n>\n> Concerns #3 and #4 should be handled by Signers and is out of scope of this proposal.\n>\n> ==Specification==\n>\n> ===Prerequisites===\n> This proposal assumes the parties in the multisig support [https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki BIP32], [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md the descriptor language] and encryption.\n>\n> ==Roles==\n> ===Coordinator===\n>\n> The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and how many members and signatures are needed. If encryption is enabled, the Coordinator generates a secret token, to be shared among the parties for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n>\n> ===Signer===\n>\n> The Signer is a participating member in the multisig. Its responsibilities include providing its XPUB to the Coordinator, verifying that its XPUB is included in the descriptor record and persisting the descriptor record in its storage.\n>\n> ==Setup Process==\n>\n> ===Round 1===\n>\n> ====Coordinator====\n>\n> * The Coordinator creates a multisig wallet creation session. The Coordinator determines the type of multisig script used and the signing configuration (<tt>M</tt> and <tt>N</tt>).\n> * If encryption is enabled, the Coordinator also generates a secret token, hereby denoted <tt>TOKEN</tt>.\n> * TOKEN is in ASCII format and must have a minimum of 8 characters. TOKEN should expire after some time period determined by the Coordinator, e.g., 24 hours.\n> * TOKEN acts as an encryption key among the parties. The method of encryption is AES, CTR mode. The encryption key can be calculated by performing a double hash operation on the TOKEN: <tt>ENCRYPTION_KEY = SHA256(SHA256(TOKEN))</tt>.\n> * A TOKEN value of <tt>-1</tt> means that encryption is disabled and all the encryption/decryption steps below can be skipped.\n> * The Coordinator shares the TOKEN with all participating Signers over a secure channel.\n>\n> ====Signer====\n>\n> * The Signer generates a key record by prompting the user for the TOKEN and a derivation path.\n> * The first line in the record must be the <tt>TOKEN</tt>. If encryption is disabled, set the TOKEN to -1. The second line must be the <tt>KEY</tt>, whereas KEY is an XPUB. KEY must include key origin information and written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{XPUB}</tt>. The third line must be a <tt>SIG</tt>, whereas SIG is the signature generated by using the corresponding private key to sign the first two lines. Finally, the Signer encrypts the entire record with ENCRYPTION_KEY.\n>\n> ===Round 2===\n>\n> ====Coordinator====\n>\n> * The Coordinator gathers key records from all participating Signers. Abort the setup if TOKEN has expired.\n> * For each key record, the Coordinator decrypts it using ENCRYPTION_KEY. The Coordinator verifies that the included SIG is valid given the KEY.\n> * If all key records look good, the Coordinator generates a descriptor record, which is simply the descriptor string plus a <tt>CHECKSUM</tt>, all in one line. The CHECKSUM has BECH32 encoding and is described at [https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums]. The Coordinator encrypts this descriptor record with ENCRYPTION_KEY.\n> * The Coordinator sends the encrypted descriptor record to all participating Signers.\n>\n> ====Signer====\n>\n> * The Signer imports the descriptor record, decrypts it by prompting the user for TOKEN.\n> * The Signer calculates and verifies the descriptor\u2019s CHECKSUM. Abort the setup if the CHECKSUM is incorrect.\n> * The Signer checks whether one of the KEYs in the descriptor belongs to it, using path and fingerprint information included in the descriptor. The check must perform an exact match on the KEYs, and not using shortcuts such as matching fingerprints (which is trivial to spoof). Abort the setup if it doesn\u2019t detect its own KEY.\n> * For confirmation, the Signer must display to the user the descriptor's CHECKSUM, plus other configurations, such as M and N. The total number of Signers, N, is important to prevent a KEY insertion attack. All participating Signers should be able to display the same confirmation.\n> * If all checks pass, the Signer persists the descriptor record in its storage. The Signer should subsequently use the descriptor to generate and verify receive and change addresses.\n>\n> This completes the setup.\n>\n> ==QR Codes==\n> For signers that use QR codes to transmit data, key and descriptor records can be converted to QR codes, following [https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md the BCR standard].\n>\n> ==Security==\n>\n> This proposal introduce two layers of protection. The first one is a temporary, secret token, used to encrypt the two rounds of communication between the Signers and the Coordinator. The second one is through the descriptor checksum and visual inspection of the descriptor itself.\n>\n> The token is only needed during the setup phase, and can be safely thrown away afterwards. The token does not guarantee that the Signer membership set is not modified, since that depends on the overall security of all parties in the setup, but it can make it significantly harder for an attacker to do so.\n>\n> There are three ways an attacker can modify the membership set: by changing an existing member, by removing an existing member, or by adding a new member.\n>\n> For the first two methods, one of the Signers will be able to detect that its membership has been changed or removed, and reject the final descriptor. Thus, it is vital that all participating Signers check that their membership is intact in the descriptor. Even one Signer failing to check for its membership means that the setup could be compromised.\n>\n> For the third type of attack, the descriptor checksum and visual inspection of the descriptor itself are the only way to guard against malicious members from being inserted into the set.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Michael.flaxman",
                "date": "2021-04-11T02:34:21",
                "message_text_only": "Hi Hugo,\n\nI appreciate the effort you and everyone else is making to improve multisig in bitcoin!\n\nI like that this BIP gets rid of SLIP132 version bytes, as those have been de-facto deprecated in favor of output descriptors for some time. Having a standard for how to communicate descriptor records (BSMS 1.0) also seems like a nice positive.\n\nThe most commonly raised issues from [the 10x security guide](https://btcguide.github.io/) are about how to properly verify that all hardware wallets are participants in the user's multisig quorum (and with the correct m-of-n). This shows up in two big ways:\n\n- The O(n^2) xpub validation problem creates a bad UX and is hard for non-advanced users.\n- The risk for stateless hardware wallets (like Trezor) to have their xpubs swapped out by a compromised Coordinator.\n\nUnfortunately, this BIP does not improve either of these issues, while adding considerable complexity.\n\n1. O(n^2) Xpub Validation\n\nThe proposed use of an output descriptor checksum has an obvious 40-bit MITM collision attack. A compromised Coordinator could trick a Signer into displaying an attacker's receive address, despite a correctly functioning Signers and the user properly validating the checksum ([github link](https://github.com/nunchuk-io/bips/pull/1/#issuecomment-801629857)).\n\nUsing a checksum with much higher entropy would reduce xpub validation to O(n) and create a very nice UX for signers. This would be a huge win for multisig! Instead, the recommended solution from the BIP is to validate all the key records manually, which is how multisig is currently done and what we desperately want to move away from. With a proper checksum, there\u2019s no reason for a user to ever see an xpub.\n\nUsers should not be shown a checksum and asked to validate it in meatspace (across Signers) if an attacker\u2019s address could still be substituted! Validating a single address across devices does solve this problem, but if you\u2019re going to validate an address there\u2019s no reason to display the checksum at all. However, validating an address is confusing to non-experts:\n\n- Is it a wallet ID or a bitcoin address?\n\n- Am I supposed to send funds to this address?\n\nIf creating a new checksum standard for the descriptor record is undesirable, we could use a child address (from an unhardened BIP32 path) and encode that in some way for end-users to verify it matches across all Signers. It would be strongly preferable for the encoding to be an unambiguously different format from a bitcoin address / BIP39 seed phrase, so that it\u2019s clear it\u2019s just a wallet ID. One non-ideal but simple solution is to use a hash function (i.e. dsha256) to calculate the digest of the child address, and display this in hexadecimal format. While hexadecimal is non-ideal for manual verification, it is already trivial for any bitcoin library to perform these steps.\n\n2. Allow Support for Stateless Wallets\n\nThe current BIP states:\n\n\"If all checks pass, the Signer must persist the descriptor record in its storage.\"\n\nWhile persistence has a lot of benefits, it is not a feature of the most sold multisig hardware wallet: Trezor. A simple solution here is to have each Signer sign the entire descriptor record at the end of round 2, not just its own key record in round 1. Then the data can be stored anywhere (including on the Signer itself) and played back to each Signer for validation when needed. The end-user would have no idea this was happening, but the device could refuse to display information it hasn\u2019t fully validated (or at least add a warning message). Even a device with persistent storage would be better served using a signature, so that an evil maid couldn't tamper with the device (say in the no-encryption case for simplicity).\n\nThis existing vulnerability in stateless wallets is particularly bad for hosted multisig services like Casa/Unchained, where the service might control m-1 keys. It\u2019s far easier for a hosted service to potentially trick non-expert users into displaying an attacker's receive address on their stateless Signer.\n\nFor example, assume the user is doing 2-of-3 multisig, where the Coordinator (service) controls 1 key. Here is how the Coordinator could trick their end-users:\n\n- Coordinator swaps out 1 of the end-user\u2019s xpubs, going from a 2-of-3 where the end-user has 2 seeds to a 2-of-3 where the Coordinator has 2 seeds.\n\n- The end-user logs into the service to get a new receive address, and the service (Coordinator) displays malicious receive address X (as part of a 2-of-3).\n\n- The end user connects stateless Signer 1 to the service (Coordinator), which under-the-hood gives stateless Signer 1 proof that it is included in this 2-of-3. Stateless singer 1 displays malicious receive address X!\n\n- The end-user doesn't verify the address on Signer 2, as many users unfortunately don't -- perhaps it is in a far away location and the end-user (incorrectly) thinks that it\u2019s already been validated in 2 places -- and makes a large deposit to receive address X. These funds now belong to the attacker and can be swept at any time!\n\nIf stateless Signer 1 required a signature to be replayed at step 3, stateless Signer 1 would refuse to display malicious receive address X (or at a minimum warn the end-user that it did not have enough info to properly validate the address).\n\nThis is also a concern for self-hosted multisig, I just used the hosted services as the best example.\n\nIt's also not just Trezor that is stateless. For example, I wrote [a simple CLI software multisig wallet as part of the buidl library](https://twitter.com/mflaxman/status/1321503036724989952) to be used mostly for emergency recovery. At 800 lines of code, it's too simple/minimal to touch the file system.\n\nBIP39\n\nWhile unrelated, the use of BIP39 words for session tokens seems like a big mistake, as end-users have learned over years that BIP39 words are for private key material. A small percent of users may backup their token BIP39 mnemonic and not their seed phrase BIP39 mnemonic! My suggestion is to just stick with the other two Token options: decimal and hex.\n\nConclusion\n\nThe main purpose/benefit of the BIP seems to be the encryption protocol. I wouldn't have strong objections if the BIP were simply renamed Bitcoin Multisig Encryption, as that more accurately reflects what it does. That said, I think this BIP is missing out on a real opportunity to improve security in setting up a multisig scheme, and if adopted in the current form will negatively impact multisig adoption.\n\nI can't support this BIP in the current form, but I'd be happy to submit a PR if it's helpful.\n\nBest,\n\nMichael\n\nhttps://btcguide.github.io/\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Monday, April 5, 2021 2:02 AM, Hugo Nguyen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi all,\n>\n> Please find below the complete draft of the Bitcoin Secure Multisig Setup (BSMS) BIP. The spec has gone through a number of important updates in the last month or so. Thanks everyone who has participated in the review process.\n>\n> As a PR: https://github.com/bitcoin/bips/pull/1097\n>\n> A few notes:\n> * PBKDF2-SHA512 was chosen instead of PBKDF2-SHA256 for the key derivation function, due to widespread existing hardware support for PBKDF2-SHA512\n> * Only one descriptor is stored in the multisig configuration - this simplifies wallet setup and recovery\n> (For the full review and relevant discussions, please check out https://github.com/nunchuk-io/bips/pull/1).\n>\n> Best,\n> Hugo\n>\n> <pre>\n>   BIP: To be determined\n>   Layer: Applications\n>   Title: Bitcoin Secure Multisig Setup (BSMS)\n>   Author: Hugo Nguyen <hugo at\n> nunchuk.io\n>>, Peter Gray <peter at\n> coinkite.com\n>>, Marko Bencun <marko at\n> shiftcrypto.ch\n>>, Aaron Chen <aarondongchen at\n> gmail.com\n>>, Rodolfo Novak <rodolfo at\n> coinkite.com\n>>\n>   Comments-Summary: No comments yet.\n>   Comments-URI:\n>   Status: Proposed\n>   Type: Standards Track\n>   Created: 2020-11-10\n>   License: BSD-2-Clause\n> </pre>\n>\n> ==Introduction==\n>\n> ===Abstract===\n>\n> This document proposes a mechanism to set up multisig wallets securely.\n>\n> ===Copyright===\n>\n> This BIP is licensed under the 2-clause BSD license.\n>\n> ===Motivation===\n>\n> The Bitcoin multisig experience has been greatly streamlined under [\n> https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki\n> BIP-0174\n> (Partially Signed Bitcoin Transaction)]. However, what is still missing is a standardized process for setting up multisig wallets securely across different vendors.\n>\n> There are a number of concerns when it comes to setting up a multisig wallet:\n>\n> # Whether the multisig configuration, such as Signer membership, script type, derivation paths and number of signatures required, is correct and not tampered with.\n> # Whether the keys or the multisig configuration are leaked during the setup.\n> # Whether the Signer persists the multisig configuration in their respective storage, and under what format.\n> # Whether the Signer's storage is tamper-proof.\n> # Whether the Signer subsequently uses the multisig configuration to generate and verify receive and change addresses.\n>\n> An attacker who can modify the multisig configuration can steal or hold funds for ransom by duping the user into sending funds to the wrong address. An attacker who cannot modify the configuration but can learn about the keys and/or the configuration can monitor transactions in the wallet, resulting in loss of privacy.\n>\n> This proposal seeks to address concerns #1, #2 and #3: to mitigate the risk of tampering during the initial setup phase, and to define an interoperable multisig configuration format.\n>\n> Concerns #4 and #5 should be handled by Signers and are out of scope of this proposal.\n>\n> ==Specification==\n>\n> ===Prerequisites===\n> This proposal assumes the parties in the multisig support [\n> https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n> BIP-0032], [\n> https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki\n> BIP-0322], [\n> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md\n> the descriptor language] and [\n> https://tools.ietf.org/html/rfc3686\n> AES encryption].\n>\n> ===File Extension===\n> All descriptor and key records should have a <tt>.bsms</tt> file extension. Encrypted data should have a <tt>.dat</tt> extension.\n>\n> ===Roles===\n> ====Coordinator====\n>\n> The Coordinator initiates the multisig setup. The Coordinator determines what type of multisig is used and the exact policy script. If encryption is enabled, the Coordinator also distributes a shared secret or shared secrets to the parties involved for secure communication. The Coordinator gathers information from the Signers to generate a descriptor record. The Coordinator distributes the descriptor record back to the Signers.\n>\n> ====Signer====\n>\n> The Signer is a participating member in the multisig. Its responsibilities include providing its key record -- which contains an Extended Public Key (XPUB) -- to the Coordinator, verifying that its XPUB is included in the descriptor record and persisting the descriptor record in its storage.\n>\n> ===Setup Process===\n>\n> ====Round 1====\n>\n> =====Coordinator=====\n>\n> * The Coordinator creates a new multisig wallet creation session. The Coordinator constructs the multisig script and its policy parameters, such as the required number of signatures and the total number of Signers (<tt>M</tt> and <tt>N</tt>).\n> * The session should expire after some time period determined by the Coordinator, e.g., 24 hours. The timeout allows the encryption key to have lower entropy.\n> * If encryption is enabled, the Coordinator distributes a secret <tt>TOKEN</tt> to each Signer over a secure channel. The Signer can use the <tt>TOKEN</tt> to derive an <tt>ENCRYPTION_KEY</tt>. Refer to the Encryption section below for details on the <tt>TOKEN</tt>, the key derivation function and the encryption scheme. Depending on the use case, the Coordinator can decide whether to share one common <tt>TOKEN</tt> for all Signers, or to have one per Signer.\n> * If encryption is disabled, the <tt>TOKEN</tt> is set to <tt>0</tt>, and all the encryption/decryption steps below can be skipped.\n>\n> =====Signer=====\n>\n> * The Signer initiates the multisig wallet creation session by setting the <tt>TOKEN</tt>. The Signer derives an <tt>ENCRYPTION_KEY</tt> from the <tt>TOKEN</tt>. The Signer can keep the session open until a different value for the <tt>TOKEN</tt> is set.\n> * The Signer generates a key record by prompting the user for a multisig derivation path and retrieves the XPUB at that derivation path. Alternatively, the Signer can choose a path on behalf of the user. If the Signer chooses the path, it should try to avoid reusing XPUBs for different wallets.\n> * The first line in the record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be the hex-encoded <tt>TOKEN</tt>. The third line must be the <tt>KEY</tt>. The <tt>KEY</tt> is an XPUB plus its key origin information, written in the descriptor-defined format, i.e.: <tt>[{master key fingerprint}/{derivation path}]{XPUB}</tt>. The fourth line is a text description of the key, 80 characters maximum. The fifth line must be a <tt>SIG</tt>, whereas <tt>SIG</tt> is the signature generated by using the private key associated with the XPUB to sign the first four lines. The signature should follow [\n> https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki\n> BIP-0322], legacy format accepted.\n> * The Signer calculates the Message Authentication Code (<tt>MAC</tt>) for the record. The first 16 bytes of the <tt>MAC</tt> serves as the Initialization Vector (<tt>IV</tt>) for the encryption.\n> * The Signer encrypts the key record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n> * The Signer encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n>\n> ====Round 2====\n>\n> =====Coordinator=====\n>\n> * The Coordinator gathers key records from all participating Signers. The Coordinator verifies that there are exactly <tt>N</tt> unique key records before the wallet setup session expires.\n> * For each key record, the Coordinator extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n> * The Coordinator verifies that the included <tt>MAC</tt> is valid given the plaintext.\n> * The Coordinator verifies that the key records have compatible specification versions.\n> * The Coordinator verifies that the included <tt>SIG</tt> is valid given the <tt>KEY</tt>.\n> * If all key records look good, the Coordinator fills in all necessary information to generate a descriptor record.\n> * The first line in the descriptor record must be the specification version (<tt>BSMS 1.0</tt> as of this writing). The second line must be a comma-separated list of accepted derivation paths that the Signers can use to generate addresses from the included XPUBs. The paths must start with <tt>/</tt> and use non-hardened derivation. For example, <tt>/0/*</tt> and <tt>/1/*</tt> are some common paths. If there are no restrictions, it must say <tt>No path restrictions</tt>. The third line must be the descriptor string plus a <tt>CHECKSUM</tt>, all in one line. The <tt>CHECKSUM</tt> has [\n> https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md#checksums\n> BECH32 encoding].\n> * The Coordinator calculates the <tt>MAC</tt> for the record. The first 16 bytes of the <tt>MAC</tt> serves as the <tt>IV</tt> for the encryption..\n> * The Coordinator encrypts the descriptor record with the <tt>ENCRYPTION_KEY</tt> and <tt>IV</tt>.\n> * The Coordinator encodes the <tt>MAC</tt> and the ciphertext into hexadecimal format, then concatenates the results: <tt>(MAC || ciphertext)</tt>.\n> * The Coordinator sends the encrypted descriptor record to all participating Signers.\n>\n> =====Signer=====\n>\n> * The Signer imports the descriptor record.\n> * The Signer extracts the <tt>MAC</tt> from the data, sets <tt>IV</tt> to the first 16 bytes of the <tt>MAC</tt>, then decrypts the ciphertext using the <tt>ENCRYPTION_KEY</tt> (derived from the open session) and <tt>IV</tt>.\n> * The Signer verifies that the included <tt>MAC</tt> is valid given the plaintext.\n> * The Signer verifies that it can support the included specification version.\n> * The Signer verifies that it is compatible with the derivation path restrictions.\n> * The Signer verifies the descriptor\u2019s <tt>CHECKSUM</tt>.\n> * The Signer verifies that it can support the descriptor.\n> * The Signer checks that its <tt>KEY</tt> is included in the descriptor, using path and fingerprint information provided. The check must perform an exact match on the <tt>KEY</tt>s and not using shortcuts such as matching fingerprints, which is trivial to spoof.\n> * For confirmation, the Signer must display to the user the <tt>CHECKSUM</tt>, the derivation path restrictions and the policy parameters, such as <tt>M</tt>, <tt>N</tt> and the position(s) of its own XPUB in the policy script. The total number of Signers, <tt>N</tt>, is important to prevent a <tt>KEY</tt> insertion attack. The position is important for scripts where key order matters. When applicable, all positions of the XPUB must be displayed. The full descriptor must also be available for review upon user request.\n> * When possible, the Signer should also show a preview of the first address(es) of the wallet.\n> * Parties must check with each other that all Signers have verified the descriptor and has the same confirmation (except for the key positions).\n> * If all checks pass, the Signer must persist the descriptor record in its storage.\n>\n> This completes the setup.\n>\n> ===Encryption===\n>\n> ====The Token====\n> We define three modes of encryption.\n>\n> # <tt>NO_ENCRYPTION</tt> : the <tt>TOKEN</tt> is set to <tt>0</tt>. Encryption is disabled.\n> # <tt>STANDARD</tt> : the <tt>TOKEN</tt> is a 64-bit nonce.\n> # <tt>EXTENDED</tt> : the <tt>TOKEN</tt> is a 96-bit nonce.\n>\n> The <tt>TOKEN</tt> can be converted to one of these formats:\n> * A decimal number (recommended). The number must not exceed the maximum value of the nonce.\n> * A mnemonic phrase using [\n> https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\n> BIP-0039] word list (6 words in <tt>STANDARD</tt> mode; 9 words in <tt>EXTENDED</tt> mode).\n> * A QR code.\n> * Other formats.\n>\n> The flexibility in the data format allows each Signer to customize the User Experience based on its respective capabilities.\n>\n> ====Key Derivation====\n> The key derivation function is [\n> https://tools.ietf.org/html/rfc2898\n> PBKDF2], with PRF = SHA512. Specifically:\n>\n> <tt>DKey = PBKDF2(PRF, Password, Salt, c, dkLen)</tt>\n>\n> Whereas:\n>\n> * PRF = SHA512\n> * Password = \"No SPOF\"\n> * Salt = <tt>TOKEN</tt>\n> * c = 2048\n> * dkLen = 256\n> * DKey = Derived <tt>ENCRYPTION_KEY</tt>\n>\n> ====Encryption Scheme====\n> The encryption scheme is [\n> https://tools.ietf.org/html/rfc3686\n> AES-256-CTR].\n>\n> <tt>MAC = HMAC-SHA256(HMAC_Key, hex-encoded TOKEN || Data)</tt>\n>\n> <tt>IV = First 16 bytes of MAC</tt>\n>\n> <tt>Ciphertext = AES-256-CTR-Encrypt(Plaintext, DKey, IV)</tt>\n>\n> <tt>Plaintext = AES-256-CTR-Decrypt(Ciphertext, DKey, IV)</tt>\n>\n> Whereas:\n> * DKey = <tt>ENCRYPTION_KEY</tt>\n> * HMAC_Key = SHA256(<tt>ENCRYPTION_KEY</tt>)\n> * Data = the plaintext, e.g. the entire key record in round 1 and the entire descriptor record in round 2\n>\n> The <tt>MAC</tt> is to be sent along with the key and descriptor record, as specified above. Because it is a <tt>MAC</tt> over the entire plaintext, this is essentially an [\n> https://en.wikipedia.org/wiki/Authenticated_encryption#Encrypt-and-MAC_(E&M)\n> Encrypt-and-MAC] form of authenticated encryption.\n>\n> ==QR Codes==\n> For signers that use QR codes to transmit data, key and descriptor records can be converted to QR codes, following [\n> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md\n> the BCR standard].\n>\n> Also refer to [\n> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-015-account.md\n> UR Type Definition for BIP44 Accounts] and [\n> https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-010-output-desc.md\n> UR Type Definition for Bitcoin Output Descriptors] for more details.\n>\n> ==Security==\n>\n> This proposal introduces two layers of protection. The first one is a temporary, secret <tt>TOKEN</tt>. The second one is the descriptor <tt>CHECKSUM</tt>.\n>\n> The <tt>TOKEN</tt> is used to encrypt the two rounds of communication between the Signer and the Coordinator. A <tt>MAC</tt> is also generated from the <tt>TOKEN</tt> and plaintext to authenticate the data being exchanged. The <tt>TOKEN</tt> is only needed during the setup phase, and can be safely discarded afterwards.\n>\n> The descriptor <tt>CHECKSUM</tt>, on the other hand, can be used to verify the integrity of the multisig configuration. An attacker who tampers with the multisig configuration must also change the descriptor <tt>CHECKSUM</tt>. Parties must check with each other that all Signers have the same <tt>CHECKSUM</tt>, along with the policy parameters, to reduce the chance of tampering. The <tt>CHECKSUM</tt> must be persisted along with the descriptor in each Signer\u2019s storage.\n>\n> The <tt>TOKEN</tt> and the <tt>CHECKSUM</tt> can\u2019t guarantee complete protection, since that depends on the overall security of all parties in the setup, but they can make it significantly harder for an attacker to tamper with the multisig configuration.\n>\n> ==Privacy==\n> Encryption helps improve the privacy of the wallet by avoiding sharing XPUBs and descriptors in plaintext.\n>\n> If the parties wish to have stronger privacy, it is recommended to use a higher number of bits for the <tt>TOKEN</tt>, and to completely erase knowledge of the <tt>TOKEN</tt> after the multisig wallet has been set up.\n>\n> ==Test Vectors==\n>\n> ===Mode: <tt>NO_ENCRYPTION</tt>===\n> ====ROUND 1====\n> * Coordinator\n> ** M-of-N: 2/2\n> ** ADDRESS_TYPE: NATIVE_SEGWIT\n> ** TOKEN: 0\n>\n> * Signer 1\n> ** MASTER_KEY_FINGERPRINT: 539f3d89\n> ** PRIVATE_KEY (m/48'/0'/0'/2'): KyoXqiwiz6qm21BSYebiZFfNF7obkhiJW6TdPMZTQQMF4kZtfD78\n> ** XPUB (m/48'/0'/0'/2'): xpub6ETerig7tq89mtaD8Gau2xRWxouRMBy6XHqciA8GZzC2dJv3w6FxfgoegH4b2qYF4oG6VBrhpLrauPs5E1q58GLCnhKp6g9QsV9ZA7J5JNa\n> ** Legacy signature\n> ** <tt>signer_1_key.bsms</tt>:\n> <pre>BSMS 1.0\n> 00\n> [539f3d89/48'/0'/0'/2']xpub6ETerig7tq89mtaD8Gau2xRWxouRMBy6XHqciA8GZzC2dJv3w6FxfgoegH4b2qYF4oG6VBrhpLrauPs5E1q58GLCnhKp6g9QsV9ZA7J5JNa\n> Signer 1 key\n> IPXsnNSZb8M6H4fAWtpjAc75hyHHd89fskpM5o7qFg+mPDzEPc1k2mjuIpVIIzaCe45FwPfAAa91RaStfC5Sak0=</pre>\n>\n> * Signer 2\n> ** MASTER_KEY_FINGERPRINT: f8b12aa6\n> ** PRIVATE_KEY (m/48'/0'/0'/2'): L1zht7muKnUYFMdzC3jwXd78u8tGoKr46AXGh4waF9nphUYWq7ow\n> ** XPUB (m/48'/0'/0'/2'): xpub6EWPNhGSX86SN4J2DrBUaQ826o6V4egHqAJZUDJqnsthv9CcjBZV79u68M3YZkuTJnJBXfCrHuJy97fkVurntwgt3V7Ms5hXpJV2vS8fQZM\n> ** Legacy signature\n> ** <tt>signer_2_key.bsms</tt>:\n> <pre>BSMS 1.0\n> 00\n> [f8b12aa6/48'/0'/0'/2']xpub6EWPNhGSX86SN4J2DrBUaQ826o6V4egHqAJZUDJqnsthv9CcjBZV79u68M3YZkuTJnJBXfCrHuJy97fkVurntwgt3V7Ms5hXpJV2vS8fQZM\n> Signer 2 key\n> H38+lp9iaesBeCN05BDTH/SnmarlH6+X+Kmw1pgCk+c1Pc1evYIdBag9Nc0nsKhvPtfEbRt9r/qsUVZ5onCtBTc=</pre>\n>\n> ====ROUND 2====\n> * Coordinator\n> ** <tt>my_multisig_wallet.bsms</tt>:\n> <pre>BSMS 1.0\n> /0/*,/1/*\n> wsh(sortedmulti(2,[539f3d89/48'/0'/0'/2']xpub6ETerig7tq89mtaD8Gau2xRWxouRMBy6XHqciA8GZzC2dJv3w6FxfgoegH4b2qYF4oG6VBrhpLrauPs5E1q58GLCnhKp6g9QsV9ZA7J5JNa/*,[f8b12aa6/48'/0'/0'/2']xpub6EWPNhGSX86SN4J2DrBUaQ826o6V4egHqAJZUDJqnsthv9CcjBZV79u68M3YZkuTJnJBXfCrHuJy97fkVurntwgt3V7Ms5hXpJV2vS8fQZM/*))#fntxdj7p</pre>\n>\n> ===Mode: <tt>STANDARD</tt> Encryption===\n> ====ROUND 1====\n> * Coordinator\n> ** M-of-N: 2/2\n> ** ADDRESS_TYPE: NATIVE_SEGWIT\n> ** TOKEN (hex): 1ed4ba49e96336b8\n> *** TOKEN (decimal): 2221605342811469496\n> *** TOKEN (mnemonic): burst place mystery spot cricket foster\n> ** ENCRYPTION_KEY (hex): 72185a0e25b4efc5d6ac0f8ed32b0165199100e32385040e3a48eb30164bf492\n>\n> * Signer 1\n> ** MASTER_KEY_FINGERPRINT: 98d79e95\n> ** PRIVATE_KEY (m/48'/0'/0'/2'): KydC7hZFtWe56oQUAw14HvQ3gKeKVd3m8frFgVMxUqpuhKHvcmm3\n> ** XPUB (m/48'/0'/0'/2'): xpub6DvvwHS5pd1D36xt4YBGJvtdThWXfn8L9qRj9DbFMExMeP6eBE6Aw9WyBC7XUQwiPPDFurirewsKZpYv68yTV5RBy7SZmw45QEkaLka5BCt\n> ** Legacy signature\n> ** <tt>signer_1_key.bsms</tt>:\n> <pre>BSMS 1.0\n> 1ed4ba49e96336b8\n> [98d79e95/48'/0'/0'/2']xpub6DvvwHS5pd1D36xt4YBGJvtdThWXfn8L9qRj9DbFMExMeP6eBE6Aw9WyBC7XUQwiPPDFurirewsKZpYv68yTV5RBy7SZmw45QEkaLka5BCt\n> Signer 1 key\n> HxtPoP0DrQSac/7ypcwC07R2s6jjpXR6Li2Q92zXj/FSIMQcV5yOU0/ONsDgHXamq0gD5DfPbvuVCp9ZJubclV4=</pre>\n>\n> * Signer 1 encryption\n> ** HMAC_KEY (hex): 4dab3988cbc683ad7a8c93d43f9b11a78b63a93d5e33ea19c603f4b7b87ac284\n> ** MAC (hex): afe99e92f0eadc3308eb990045e90a4f54e9f59d22aae5034ac3d866d29c508d\n> ** IV (hex) : afe99e92f0eadc3308eb990045e90a4f\n> ** CIPHERTEXT (hex): 214ec9a861a238ba7f0412305a97a6e0faa332be15af09127e131d669e5d55d73891580a5808cea5d2bf39f43496d3c0f8236eff3854fcc7446daf9d2b58fd40d97ce3b1745de2959e29767039b99969821400eca0c3517fae56d2d24d5235a3430af1ed894b68681d706cce7c75adf35d8580603aa302bc01fef06d0336a37f19dd46100baa9e4eabd8796a810e13941ad0980c126ad55d6a4bbef11a7bf893b7d2ed8fb0d8324c4c9b512d4d1e75096c63511e15018fc832816b5639d58fc28c60c049487d04bd5a6cb32aa1381d0809660d54376b9f63325c18cfd1ac5024088e74cb703fe165972cc4485abb1feefe92a0b4ea297fe2f4f7416eeee1efc9b942540931ef\n> ** <tt>signer_1_key.dat</tt>: <pre>afe99e92f0eadc3308eb990045e90a4f54e9f59d22aae5034ac3d866d29c508d214ec9a861a238ba7f0412305a97a6e0faa332be15af09127e131d669e5d55d73891580a5808cea5d2bf39f43496d3c0f8236eff3854fcc7446daf9d2b58fd40d97ce3b1745de2959e29767039b99969821400eca0c3517fae56d2d24d5235a3430af1ed894b68681d706cce7c75adf35d8580603aa302bc01fef06d0336a37f19dd46100baa9e4eabd8796a810e13941ad0980c126ad55d6a4bbef11a7bf893b7d2ed8fb0d8324c4c9b512d4d1e75096c63511e15018fc832816b5639d58fc28c60c049487d04bd5a6cb32aa1381d0809660d54376b9f63325c18cfd1ac5024088e74cb703fe165972cc4485abb1feefe92a0b4ea297fe2f4f7416eeee1efc9b942540931ef</pre>\n>\n> * Signer 2\n> ** MASTER_KEY_FINGERPRINT: 3e94b5a1\n> ** PRIVATE_KEY (m/48'/0'/0'/2'): KyPh5XYjExjNHPiBjYhp8iAntAehrDziiwRv7y9Ln6eK9QU2xP55\n> ** XPUB (m/48'/0'/0'/2'): xpub6E1W1DUYY29V2b8czCcpi36GG2uD33B11vwNopgTZwsVyfgAkA4kPCqLP5R4YzaRvzW17CQrDkgmDQbA848AdkR7W18nNvMKXzzCBSnZP9c\n> ** Legacy signature\n> ** <tt>signer_2_key.bsms</tt>:\n> <pre>BSMS 1.0\n> 1ed4ba49e96336b8\n> [3e94b5a1/48'/0'/0'/2']xpub6E1W1DUYY29V2b8czCcpi36GG2uD33B11vwNopgTZwsVyfgAkA4kPCqLP5R4YzaRvzW17CQrDkgmDQbA848AdkR7W18nNvMKXzzCBSnZP9c\n> Signer 2 key\n> ILR49QLy9+xkMS11TIXJRSMgOQOzGbAaooq4/ZRcd8VgM6j5upJMI0mjJHseQOMYSGk8FqjXZbMvBGyiX9wdutM=</pre>\n>\n> * Signer 2 encryption\n> ** HMAC_KEY (hex): 4dab3988cbc683ad7a8c93d43f9b11a78b63a93d5e33ea19c603f4b7b87ac284\n> ** MAC (hex): 5c7cb2ac407cd60b1f2b86ef46077d3a312b6ce921df2a141347e8bf1e5c6573\n> ** IV (hex) : 5c7cb2ac407cd60b1f2b86ef46077d3a\n> ** CIPHERTEXT (hex): f23e6c76ff45d308dea6014030a274127ad437228f1d5ec2431d2ea9e3cedd5b0a207a9efa6f926d5420205003f3cb9c4b82b2d595180e62a173a2e5aa0322de48a70a873f641bdae1764e6b1667c241e0fe03a4ccdc3fe0cfa5f75b239d6497c3b69dca17bb685ba70b307d1243836d8fb198ce727cfae4057ee0b4fdcb09f4ba5ae127f49c5de780edb4e40aec96303c8a7b98b1b8e53dd5e07e01d4f3ffd836763209a1f0cbc61adcfdc2951e77528ee7b6e68114c3a4bec38875d285021e68ae8aa913bb1e2e65dd52c649a0e98bfb4e8bab6dd10295c1167a0854ba44f094feb75d2fb00c944f07d4b47114f483df9838459316f3ddbc4a82e6507881931f8e20f5b805\n> ** <tt>signer_2_key.dat</tt>: <pre>5c7cb2ac407cd60b1f2b86ef46077d3a312b6ce921df2a141347e8bf1e5c6573f23e6c76ff45d308dea6014030a274127ad437228f1d5ec2431d2ea9e3cedd5b0a207a9efa6f926d5420205003f3cb9c4b82b2d595180e62a173a2e5aa0322de48a70a873f641bdae1764e6b1667c241e0fe03a4ccdc3fe0cfa5f75b239d6497c3b69dca17bb685ba70b307d1243836d8fb198ce727cfae4057ee0b4fdcb09f4ba5ae127f49c5de780edb4e40aec96303c8a7b98b1b8e53dd5e07e01d4f3ffd836763209a1f0cbc61adcfdc2951e77528ee7b6e68114c3a4bec38875d285021e68ae8aa913bb1e2e65dd52c649a0e98bfb4e8bab6dd10295c1167a0854ba44f094feb75d2fb00c944f07d4b47114f483df9838459316f3ddbc4a82e6507881931f8e20f5b805</pre>\n>\n> ====ROUND 2====\n> *Coordinator\n> ** <tt>my_multisig_wallet.bsms</tt>:\n> <pre>BSMS 1.0\n> /0/*,/1/*\n> wsh(sortedmulti(2,[98d79e95/48'/0'/0'/2']xpub6DvvwHS5pd1D36xt4YBGJvtdThWXfn8L9qRj9DbFMExMeP6eBE6Aw9WyBC7XUQwiPPDFurirewsKZpYv68yTV5RBy7SZmw45QEkaLka5BCt/*,[3e94b5a1/48'/0'/0'/2']xpub6E1W1DUYY29V2b8czCcpi36GG2uD33B11vwNopgTZwsVyfgAkA4kPCqLP5R4YzaRvzW17CQrDkgmDQbA848AdkR7W18nNvMKXzzCBSnZP9c/*))#x0lx92qk</pre>\n>\n> *Coordinator encryption\n> ** HMAC_KEY (hex): 4dab3988cbc683ad7a8c93d43f9b11a78b63a93d5e33ea19c603f4b7b87ac284\n> ** MAC (hex): df3d06db6c8b8a5f25de202e10ea225df6415d1ed0e36c64cc2be1b7e86c2a38\n> ** IV (hex) : df3d06db6c8b8a5f25de202e10ea225d\n> ** CIPHERTEXT (hex): 2761e6bfe839586b4c90954200bc4ce6d39ef164c5d14997755575d1691ee249ffd20beda526f57a7424907f839c6c2e3ecd46889ede290a2c81de22d3f33a7fa5e55ec95c0e26005c596d0f6346f819823f361f9f9f54d1eae48b325240d66c5888bd5ebab843061dcdd73b675346da982646c83026694d757661d31c2d654fb263c9ab3e874a258bc234c48532f15e9450c982fcf161404746e9f23d25e17b74139cd799983fd0c7a7a0386a823d3789b4578879a764172cc8ef96ab003eee24f6288007d31e2b999aff5a6d30cc524a0111a99730a29cf28ae41dbff6ce21ca6bc1df37074228178048e835584e6e70dba941154d024cd03cb6c56d0bde441ce464aa749de5e814dd30e21b75f62e831ac1f28eda1a7ba7e122076789e284402c8ba85b5a0e864bce220e3c78fa2f465e2bcf6b1d378816319de99f99ce7068\n> ** <tt>my_multisig_wallet.dat</tt>: <pre>df3d06db6c8b8a5f25de202e10ea225df6415d1ed0e36c64cc2be1b7e86c2a382761e6bfe839586b4c90954200bc4ce6d39ef164c5d14997755575d1691ee249ffd20beda526f57a7424907f839c6c2e3ecd46889ede290a2c81de22d3f33a7fa5e55ec95c0e26005c596d0f6346f819823f361f9f9f54d1eae48b325240d66c5888bd5ebab843061dcdd73b675346da982646c83026694d757661d31c2d654fb263c9ab3e874a258bc234c48532f15e9450c982fcf161404746e9f23d25e17b74139cd799983fd0c7a7a0386a823d3789b4578879a764172cc8ef96ab003eee24f6288007d31e2b999aff5a6d30cc524a0111a99730a29cf28ae41dbff6ce21ca6bc1df37074228178048e835584e6e70dba941154d024cd03cb6c56d0bde441ce464aa749de5e814dd30e21b75f62e831ac1f28eda1a7ba7e122076789e284402c8ba85b5a0e864bce220e3c78fa2f465e2bcf6b1d378816319de99f99ce7068</pre>\n>\n> ===Mode: <tt>EXTENDED</tt> Encryption===\n> ====ROUND 1====\n> *Coordinator\n> ** M-of-N: 2/3\n> ** ADDRESS_TYPE: NESTED_SEGWIT\n> ** TOKEN for Signer 1 (hex): 654d63309464afcda558c6aa\n> *** TOKEN (decimal): 31351541690484562733651510954\n> *** TOKEN (mnemonic): grab help slow churn enough traffic nice boat price\n> *** ENCRYPTION_KEY (hex): 4073adac2351e164b8d68039abd9d4b8e4d07adccfdf73ece6e236d60b107802\n> ** TOKEN for Signer 2 (hex): b0344f51d5cb04083d598fa3\n> *** TOKEN (decimal): 54532600447720520868878192547\n> *** TOKEN (mnemonic): rabbit pen stamp process raccoon advice voice cradle person\n> *** ENCRYPTION_KEY (hex): 6bae6b670e257d7468c3e90194029dd468a2f39d8b9a3ff187b08209b1d409b6\n> ** TOKEN for Signer 3 (hex): 163fd307195982c4c39d50bb\n> *** TOKEN (decimal): 6885829092987042066541138107\n> *** TOKEN (mnemonic): bike write scrub crawl oblige give attack present rookie\n> *** ENCRYPTION_KEY (hex): c78b94589214b6dc98b337ba4ce54380553ed00a1e5b1955fc540ce3b30d6566\n>\n> * Signer 1\n> ** MASTER_KEY_FINGERPRINT: 110dc257\n> ** PRIVATE_KEY (m/48'/0'/0'/1'): KzshDDEBhzyiwXHoyE7ZiLegzztEy54AG6Wq8N844LqHSQMHt4Ji\n> ** XPUB (m/48'/0'/0'/1'): xpub6EPQbDFezXYvVFHqnc8R7QUSE8hTepbyCXU7jJBT4dVm2rQHe1i6isqoj59qhyBiCdKquo6QsgMZNHvEz3BM4cNSszF25siTqLUCznBm8vk\n> ** Legacy signature\n> ** <tt>signer_1_key.bsms</tt>:\n> <pre>BSMS 1.0\n> 654d63309464afcda558c6aa\n> [110dc257/48'/0'/0'/1']xpub6EPQbDFezXYvVFHqnc8R7QUSE8hTepbyCXU7jJBT4dVm2rQHe1i6isqoj59qhyBiCdKquo6QsgMZNHvEz3BM4cNSszF25siTqLUCznBm8vk\n> Signer 1 key\n> IDX6xLdM4XjetYPvVfpVBXAfT7oE3tHAOB4blZpbIst8bjJ+LbDeP4tZl4O8utAuys9igXE0G3kaHz1mg/+OU8w=</pre>\n>\n> * Signer 1 encryption\n> ** HMAC_KEY (hex): f43c359a4b3d7b2e01be73c54519b12545ca9a23a86f824aadf577b314a7caa7\n> ** MAC (hex): 40b6b43e2f1bc01b748eb242235d7e09fa8a2fd6cebe35784cf3adf81910ec98\n> ** IV (hex) : 40b6b43e2f1bc01b748eb242235d7e09\n> ** CIPHERTEXT (hex): 0877987764401c27e6c60ed2f1bb89dff1dbc5e8204149f682d53049bffe39553f24af3928aa2f78ac2d04ac5baa0c3ec39aaccf0d258e7bb6659a7b92e92f2c2784a94f4df8e8af2270d9d411bfff2cfb9f71b4e1ac87561c7d2ac57ca86a1f9716d5da7571719d24830fc8d015a0daf04b3742439484488798335357f2eeaa8e2db2ba630f9dffd88236e327ab5bfcfb6e29ee3ef6cc18e0b71c1731465c2351e76b92f7b1bd28ef6eff5414c22aa6c80090fa59b973c22e3044e92dbf3688990a49a42828e52c1e686f1193dcdf7b7118930e01419fe938c6811c58c84c36d692fd52846f998bc328471f1e73c22261791a08cda096ee3ac8b37f31afd0b1d9c335ff9ac67ff230eb0d69f2d7\n> ** <tt>signer_1_key.dat</tt>: <pre>40b6b43e2f1bc01b748eb242235d7e09fa8a2fd6cebe35784cf3adf81910ec980877987764401c27e6c60ed2f1bb89dff1dbc5e8204149f682d53049bffe39553f24af3928aa2f78ac2d04ac5baa0c3ec39aaccf0d258e7bb6659a7b92e92f2c2784a94f4df8e8af2270d9d411bfff2cfb9f71b4e1ac87561c7d2ac57ca86a1f9716d5da7571719d24830fc8d015a0daf04b3742439484488798335357f2eeaa8e2db2ba630f9dffd88236e327ab5bfcfb6e29ee3ef6cc18e0b71c1731465c2351e76b92f7b1bd28ef6eff5414c22aa6c80090fa59b973c22e3044e92dbf3688990a49a42828e52c1e686f1193dcdf7b7118930e01419fe938c6811c58c84c36d692fd52846f998bc328471f1e73c22261791a08cda096ee3ac8b37f31afd0b1d9c335ff9ac67ff230eb0d69f2d7</pre>\n>\n> * Signer 2\n> ** MASTER_KEY_FINGERPRINT: 5c890401\n> ** PRIVATE_KEY (m/48'/0'/0'/1'): L41Jnc9CdBtBJd18429MDGcTgP2DNoXaKyyGr271ndTprvrHXDQf\n> ** XPUB (m/48'/0'/0'/1'): xpub6EW1SmjSXq9YwVwcan5qWEncgx89SozMvGNpYF6hfZHYNTikNZ4gsXuVhHTi6xYJCkmY4X4wpPPS5Gr7aY39dVJMS2TGfihr25oaspKtU8q\n> ** Legacy signature\n> ** <tt>signer_2_key.bsms</tt>:\n> <pre>BSMS 1.0\n> b0344f51d5cb04083d598fa3\n> [5c890401/48'/0'/0'/1']xpub6EW1SmjSXq9YwVwcan5qWEncgx89SozMvGNpYF6hfZHYNTikNZ4gsXuVhHTi6xYJCkmY4X4wpPPS5Gr7aY39dVJMS2TGfihr25oaspKtU8q\n> Signer 2 key\n> H5kN6UHaK2xACB6iYdTxxQPD8qyFEYv9iMsQs5B0MRfCM7NA5GB+7EFgmBpSctwt6B122zWBr6mRjpYjKmj+7hs=</pre>\n>\n> * Signer 2 encryption\n> ** HMAC_KEY (hex): e0a20b5f5285fbaa35aad08fb70f5626c9abbe1b384a4950735b28aca6325ff2\n> ** MAC (hex): 3a6deec8dbdbd6606a52c7d7e64eca4f972a293cbabac6f62736629fbe77928a\n> ** IV (hex) : 3a6deec8dbdbd6606a52c7d7e64eca4f\n> ** CIPHERTEXT (hex): bb0fb72f61b0c4858bd9c65235390b67651b94c4b0329238b0116dd6d3365ade33cb1c1b1619638968791a5d2d1d263d90280bdad8d9ca24c34a78e320076e0dccf59e7f729b541b44bbe40ba803dedd3b17c49765377cb2d913a856b86c3dd383dab475790e89226ed8ef2301574212d2809ed9c099aa67be434024ee2a4e82a146300acf755863da64807cb7bb2636f6616489636d254a870778d3540832aea44abac4328b5d90f3e6045ef36a526ce5d575f2305e3e4699dccbc713e9e68f50364036c1054c2a506aab77ea7c43a89536947c24330b09a62a90c3b4ae2d452f96ef34ec871af2c52d68ddede2503c87e2ba68d5cf9be589457879e06021ea6a6176f7dded820ba4c0e709e2a2\n> ** <tt>signer_2_key.dat</tt>: <pre>3a6deec8dbdbd6606a52c7d7e64eca4f972a293cbabac6f62736629fbe77928abb0fb72f61b0c4858bd9c65235390b67651b94c4b0329238b0116dd6d3365ade33cb1c1b1619638968791a5d2d1d263d90280bdad8d9ca24c34a78e320076e0dccf59e7f729b541b44bbe40ba803dedd3b17c49765377cb2d913a856b86c3dd383dab475790e89226ed8ef2301574212d2809ed9c099aa67be434024ee2a4e82a146300acf755863da64807cb7bb2636f6616489636d254a870778d3540832aea44abac4328b5d90f3e6045ef36a526ce5d575f2305e3e4699dccbc713e9e68f50364036c1054c2a506aab77ea7c43a89536947c24330b09a62a90c3b4ae2d452f96ef34ec871af2c52d68ddede2503c87e2ba68d5cf9be589457879e06021ea6a6176f7dded820ba4c0e709e2a2</pre>\n>\n> * Signer 3\n> ** MASTER_KEY_FINGERPRINT: 614cbf5f\n> ** PRIVATE_KEY (m/48'/0'/0'/1'): L2ccRLzH7GfVxWpU8YSY9y5UGyRoqW3UdeNT1vGfVbxAGhwU5qhD\n> ** XPUB (m/48'/0'/0'/1'): xpub6F9TfWTFcMYy5Ycd2ka2az1brJj78J2isLAWptZnCpFsesss5sZv5B8xsgt71ZXfhDWhUtf4vng4zY6HUVrQbDMPDYRLYvFFoLnAYfzgYPH\n> ** Legacy signature\n> ** <tt>signer_3_key.bsms</tt>:\n> <pre>BSMS 1.0\n> 163fd307195982c4c39d50bb\n> [614cbf5f/48'/0'/0'/1']xpub6F9TfWTFcMYy5Ycd2ka2az1brJj78J2isLAWptZnCpFsesss5sZv5B8xsgt71ZXfhDWhUtf4vng4zY6HUVrQbDMPDYRLYvFFoLnAYfzgYPH\n> Signer 3 key\n> H0jf2JMtke5zDDIWys6fihOCA6QBmC5+hbgVB/c2mMPNPLB6tDXt0TFZU1f9wvaCR9762anKSc8CCqXLogw8V00=</pre>\n>\n> * Signer 3 encryption\n> ** HMAC_KEY (hex): 1f51ea067c121e2f86af5e1d484905046bc63e861573157d8b1ae9e7e47e224b\n> ** MAC (hex): 1a5624fcb39cebabb6174456173eec19b756bc916cf2c9d815e9bcce070898c4\n> ** IV (hex) : 1a5624fcb39cebabb6174456173eec19\n> ** CIPHERTEXT (hex): 48d6e139bdc8c19e93cbbf5b4478340c8cf08aa91c28803084d5f58618773f7e615e0134492b496c4e7c130351c0350701f686918033f621378552d7040efedd5539d38c258bf936475de775f23da3953fe3ba5bbbd24816b8902b87a9a09700c446b085119dedee2395dd69665e742f72f2fb6da4ebe3f4704eaf45486fbfb84d764b718cc0b756e72f72ab6069d47765bdd3ebd4074af4fa99a95691a659675ce5f72235c28ddf3c3d53179e598cddc967fc896adc6e97edeeffc85b9e44611df748d923ff3dd921ad4d6e98e0de12359a37558e326faf585ba57e73ab45bc4a49f6e8a756f365f5d204e70f7c7bed269e81e9524a41e5d4cbaad0b6b442d6eea1e5da1ca345cc665a0cffe2c3\n> ** <tt>signer_3_key.dat</tt>: <pre>1a5624fcb39cebabb6174456173eec19b756bc916cf2c9d815e9bcce070898c448d6e139bdc8c19e93cbbf5b4478340c8cf08aa91c28803084d5f58618773f7e615e0134492b496c4e7c130351c0350701f686918033f621378552d7040efedd5539d38c258bf936475de775f23da3953fe3ba5bbbd24816b8902b87a9a09700c446b085119dedee2395dd69665e742f72f2fb6da4ebe3f4704eaf45486fbfb84d764b718cc0b756e72f72ab6069d47765bdd3ebd4074af4fa99a95691a659675ce5f72235c28ddf3c3d53179e598cddc967fc896adc6e97edeeffc85b9e44611df748d923ff3dd921ad4d6e98e0de12359a37558e326faf585ba57e73ab45bc4a49f6e8a756f365f5d204e70f7c7bed269e81e9524a41e5d4cbaad0b6b442d6eea1e5da1ca345cc665a0cffe2c3</pre>\n>\n> ====ROUND 2====\n> * Coordinator\n> ** <tt>my_multisig_wallet.bsms</tt>:\n> <pre>BSMS 1.0\n> /0/*,/1/*\n> sh(wsh(multi(2,[110dc257/48'/0'/0'/1']xpub6EPQbDFezXYvVFHqnc8R7QUSE8hTepbyCXU7jJBT4dVm2rQHe1i6isqoj59qhyBiCdKquo6QsgMZNHvEz3BM4cNSszF25siTqLUCznBm8vk/*,[5c890401/48'/0'/0'/1']xpub6EW1SmjSXq9YwVwcan5qWEncgx89SozMvGNpYF6hfZHYNTikNZ4gsXuVhHTi6xYJCkmY4X4wpPPS5Gr7aY39dVJMS2TGfihr25oaspKtU8q/*,[614cbf5f/48'/0'/0'/1']xpub6F9TfWTFcMYy5Ycd2ka2az1brJj78J2isLAWptZnCpFsesss5sZv5B8xsgt71ZXfhDWhUtf4vng4zY6HUVrQbDMPDYRLYvFFoLnAYfzgYPH/*)))#j3ykhz7f</pre>\n>\n> * Send to Signer 1:\n> ** HMAC_KEY (hex): f43c359a4b3d7b2e01be73c54519b12545ca9a23a86f824aadf577b314a7caa7\n> ** MAC (hex): ee74a0f50943d7d1b65270028bb05133e87c832cdc1ef0a07c79db2093ca3432\n> ** IV (hex) : ee74a0f50943d7d1b65270028bb05133\n> ** CIPHERTEXT (hex): 8e3ba3dac0f979fad0d160bd00c8294ff1726d51b95ff3e1534e5a1900f3d7cd4f6d929985a94b9da2c11e4e0f7770cc53c6739fd099477323bd26a3eca9c8016e79848d15e274463424b8355cd73cced61f1816ac8bac87f8c650ee9052f50e347c52ad24b00794a9d5523714be2fdcf731f14b7a8d7c93eab44c258e1c417d2837b9676832e8ce7239dc28b4e1166803209947b8a875a99b9478ee94f7bc17399e886179ab2a0285dc11a3883f6fa439d0f2277dadbec8c355c379fc50e945897e1a738f6a55b09f6b8b6bdf6d4bc248219cbad3662a78a2f539c989e055e00b8efd42fbff978e1a5cc10f83df56117ece4d17f94a0a6d3803778ed53531419250c5a0fff6cad4ab401468dd054915b068cc8826ae1308a71b38060d68c9248d59eea11c2c52a66d5f6bc0d7ae6cb44305c36e56068456d293b70037902e7b05a3ee0af710201128dffc0c16c3306b66bd19b9ae5b91aded35ef33f07743e5b185a9f88a5c67d40270e3bbcf592167ceaf82ead693728d5129b50075edd5ce24863f3484b4b063599ed1327e1c87d0a2051fed3b1234a702722b686e4c9392a403b79726800dd6b691e516e44d9e836c190b10cf2bb262bba98293c97f2c323e59acd0a1f988c5\n> ** <tt>my_multisig_wallet_for_signer_1.dat</tt>: <pre>ee74a0f50943d7d1b65270028bb05133e87c832cdc1ef0a07c79db2093ca34328e3ba3dac0f979fad0d160bd00c8294ff1726d51b95ff3e1534e5a1900f3d7cd4f6d929985a94b9da2c11e4e0f7770cc53c6739fd099477323bd26a3eca9c8016e79848d15e274463424b8355cd73cced61f1816ac8bac87f8c650ee9052f50e347c52ad24b00794a9d5523714be2fdcf731f14b7a8d7c93eab44c258e1c417d2837b9676832e8ce7239dc28b4e1166803209947b8a875a99b9478ee94f7bc17399e886179ab2a0285dc11a3883f6fa439d0f2277dadbec8c355c379fc50e945897e1a738f6a55b09f6b8b6bdf6d4bc248219cbad3662a78a2f539c989e055e00b8efd42fbff978e1a5cc10f83df56117ece4d17f94a0a6d3803778ed53531419250c5a0fff6cad4ab401468dd054915b068cc8826ae1308a71b38060d68c9248d59eea11c2c52a66d5f6bc0d7ae6cb44305c36e56068456d293b70037902e7b05a3ee0af710201128dffc0c16c3306b66bd19b9ae5b91aded35ef33f07743e5b185a9f88a5c67d40270e3bbcf592167ceaf82ead693728d5129b50075edd5ce24863f3484b4b063599ed1327e1c87d0a2051fed3b1234a702722b686e4c9392a403b79726800dd6b691e516e44d9e836c190b10cf2bb262bba98293c97f2c323e59acd0a1f988c5</pre>\n>\n> * Send to Signer 2:\n> ** HMAC_KEY (hex): e0a20b5f5285fbaa35aad08fb70f5626c9abbe1b384a4950735b28aca6325ff2\n> ** MAC (hex): 81df9e064f1de1d5f754c4e20f9286f9d81b856d3965677a9f2430cb9297ad1f\n> ** IV (hex) : 81df9e064f1de1d5f754c4e20f9286f9\n> ** CIPHERTEXT (hex): dcd82038ef627d6cb2deb62d04c4ccbaa3a354633d960e46312c22791f039f23fd9782a1e3a63504c1e5b3a0770bb8d32fdf168738b6c03278f1391dd5d01e9aafee7be2c8136ee018feff6fc8cdb926df13a36e115ddca8254934f56b7f700768c94cb8388a8297834de9affcd959417ae3d6ec3251387904f50f51f06306cc4d36eefc51418dd3b2c5454910a23ec67a40a3b918d2a740e812929aae949d8dde2c41cbbb3a2b7c2103788421c147f4794d6a26947c15ef4a99ceb825d0c5aaa78b8737d0ef712ba8e269a9941b1af5d217dcdd9cd06727fbdc70fabe3f5a8c09acff4e76992be7f27c6b12ca84739f62a6da86e5b79103d632c0dc8ab3f91fddb3cfbe67084dc4b861c4ac7c86fb171a058c98c67cffdc40ff17ae1533361cc6fb7b63657af0408cf30bf9d6d97aaacf9d3ff443eee61f207228cd91769ce83a0709c1be1847884c6a8fdc86ede66aef8e34fc509c49edf30f743bdc8f9052961ee340924ec2d1caadc6fd286bb3e233c153cd08c1934127752dc28e0d12efa92a050c4061653edb1cbf2fd4b2ba4e038f0b44f5735f198e92571c029156f65f534bfc149f38d611829901372cfc0176b9d2f9ac6512b7f37941a02dff701df0bceadaacfc6935\n> ** <tt>my_multisig_wallet_for_signer_2.dat</tt>: <pre>81df9e064f1de1d5f754c4e20f9286f9d81b856d3965677a9f2430cb9297ad1fdcd82038ef627d6cb2deb62d04c4ccbaa3a354633d960e46312c22791f039f23fd9782a1e3a63504c1e5b3a0770bb8d32fdf168738b6c03278f1391dd5d01e9aafee7be2c8136ee018feff6fc8cdb926df13a36e115ddca8254934f56b7f700768c94cb8388a8297834de9affcd959417ae3d6ec3251387904f50f51f06306cc4d36eefc51418dd3b2c5454910a23ec67a40a3b918d2a740e812929aae949d8dde2c41cbbb3a2b7c2103788421c147f4794d6a26947c15ef4a99ceb825d0c5aaa78b8737d0ef712ba8e269a9941b1af5d217dcdd9cd06727fbdc70fabe3f5a8c09acff4e76992be7f27c6b12ca84739f62a6da86e5b79103d632c0dc8ab3f91fddb3cfbe67084dc4b861c4ac7c86fb171a058c98c67cffdc40ff17ae1533361cc6fb7b63657af0408cf30bf9d6d97aaacf9d3ff443eee61f207228cd91769ce83a0709c1be1847884c6a8fdc86ede66aef8e34fc509c49edf30f743bdc8f9052961ee340924ec2d1caadc6fd286bb3e233c153cd08c1934127752dc28e0d12efa92a050c4061653edb1cbf2fd4b2ba4e038f0b44f5735f198e92571c029156f65f534bfc149f38d611829901372cfc0176b9d2f9ac6512b7f37941a02dff701df0bceadaacfc6935</pre>\n>\n> * Send to Signer 3:\n> ** HMAC_KEY (hex): 1f51ea067c121e2f86af5e1d484905046bc63e861573157d8b1ae9e7e47e224b\n> ** MAC (hex): 159a91100cacd123480b7d085c8bb32ec8eb06f0391b6dc8fac07ae67eb37b81\n> ** IV (hex) : 159a91100cacd123480b7d085c8bb32e\n> ** CIPHERTEXT (hex): c7269d8be21d1cfe172e35aa106760f1fdc929fce19da8fb7f74f759efec1ee02796fb1e8b008cf177f60a2021570f17aeeb41f8636858654082734b90959b98fd08419f901683c4ca3e76b3e482fea4c67162775e0d80bcb45df729f646c1364a3d8a7d1ff961717b00897e877c1c0554d3502942149726806269c546ad2dd34ba286ddf5cd336b83aabf7091fa25e607faf7e54017d84113e1e3ec440b3704addea188b89293469306fc0a98570afdcf269026b2d2e760f466c1f75bcf75fdf030c0a692e5681fd4487e59d6e96451ff5b6b9f2521b8e95e796ef4ab0a917794d91a30fdac7ee9ddbd89d174831bd133ab12a74f52f6283ee2c5fe3d5a957a7c1a15530b2c5224f76d90057dc94f2ee34e28b037ae7f518cc6dfe725cd3e657648de82b200ea77830eb93219f883998d3207a4ef5902d1119b0cde6b364bc1effb86109d9c2babc8ab26dce90329779d8cd0d737e9825a25586aa3c8fa5317e3e433ff235b82f629de0504e3c992f8e8de299f62751bc1fcb2e75e0262c7a27be7068cea69b14f303e97c24b99ed29cae142564e285657704b4c411d0d4f8c58819e2c0e0ffc3667eb5a408aad8a3023a5f00875e7deab95dc365d8757f7b79815a4fd9e6de2b3\n> ** <tt>my_multisig_wallet_for_signer_3.dat</tt>: <pre>159a91100cacd123480b7d085c8bb32ec8eb06f0391b6dc8fac07ae67eb37b81c7269d8be21d1cfe172e35aa106760f1fdc929fce19da8fb7f74f759efec1ee02796fb1e8b008cf177f60a2021570f17aeeb41f8636858654082734b90959b98fd08419f901683c4ca3e76b3e482fea4c67162775e0d80bcb45df729f646c1364a3d8a7d1ff961717b00897e877c1c0554d3502942149726806269c546ad2dd34ba286ddf5cd336b83aabf7091fa25e607faf7e54017d84113e1e3ec440b3704addea188b89293469306fc0a98570afdcf269026b2d2e760f466c1f75bcf75fdf030c0a692e5681fd4487e59d6e96451ff5b6b9f2521b8e95e796ef4ab0a917794d91a30fdac7ee9ddbd89d174831bd133ab12a74f52f6283ee2c5fe3d5a957a7c1a15530b2c5224f76d90057dc94f2ee34e28b037ae7f518cc6dfe725cd3e657648de82b200ea77830eb93219f883998d3207a4ef5902d1119b0cde6b364bc1effb86109d9c2babc8ab26dce90329779d8cd0d737e9825a25586aa3c8fa5317e3e433ff235b82f629de0504e3c992f8e8de299f62751bc1fcb2e75e0262c7a27be7068cea69b14f303e97c24b99ed29cae142564e285657704b4c411d0d4f8c58819e2c0e0ffc3667eb5a408aad8a3023a5f00875e7deab95dc365d8757f7b79815a4fd9e6de2b3</pre>\n>\n> ==Acknowledgement==\n>\n> Special thanks to Pavol Rusnak, Dmitry Petukhov, Christopher Allen, Craig Raw, Robert Spigler, Gregory Sanders, Ta Tat Tai, Michael Flaxman, Pieter Wuille and others for their feedback on the specification.\n>\n> ==References==\n>\n> Original mailing list thread:\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018385.html\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210411/89cff413/attachment-0001.html>"
            },
            {
                "author": "Hugo Nguyen",
                "date": "2021-04-11T16:45:00",
                "message_text_only": "Hi Michael,\nComments inline.\n\nOn Sat, Apr 10, 2021 at 7:34 PM Michael.flaxman <\nmichael.flaxman at protonmail.com> wrote:\n\n> Hi Hugo,\n>\n> I appreciate the effort you and everyone else is making to improve\n> multisig in bitcoin!\n>\n\nThanks.\n\n\n> I like that this BIP gets rid of SLIP132 version bytes, as those have been\n> de-facto deprecated in favor of output descriptors for some time. Having a\n> standard for how to communicate descriptor records (BSMS 1.0) also seems\n> like a nice positive.\n>\n> The most commonly raised issues from the 10x security guide\n> <https://btcguide.github.io/> are about how to properly verify that all\n> hardware wallets are participants in the user's multisig quorum (and with\n> the correct m-of-n). This shows up in two big ways:\n>\n>    1. The O(n^2) xpub validation problem creates a bad UX and is hard for\n>    non-advanced users.\n>    2. The risk for stateless hardware wallets (like Trezor) to have their\n>    xpubs swapped out by a compromised Coordinator.\n>\n> Unfortunately, this BIP does not improve either of these issues, while\n> adding considerable complexity.\n>\n> *1. O(n^2) Xpub Validation*\n>\n> The proposed use of an output descriptor checksum has an obvious 40-bit\n> MITM collision attack. A compromised Coordinator could trick a Signer into\n> displaying an attacker's receive address, despite a correctly functioning\n> Signers and the user properly validating the checksum (github link\n> <https://github.com/nunchuk-io/bips/pull/1/#issuecomment-801629857>).\n>\n> Using a checksum with much higher entropy would reduce xpub validation to\n> O(n) and create a very nice UX for signers. This would be a huge win for\n> multisig! Instead, the recommended solution from the BIP is to validate all\n> the key records manually, which is how multisig is currently done and what\n> we desperately want to move away from. With a proper checksum, there\u2019s no\n> reason for a user to ever see an xpub.\n>\n> Users should not be shown a checksum and asked to validate it in meatspace\n> (across Signers) if an attacker\u2019s address could still be substituted!\n> Validating a single address across devices does solve this problem, but if\n> you\u2019re going to validate an address there\u2019s no reason to display the\n> checksum at all. However, validating an address is confusing to non-experts:\n>\n>    - Is it a wallet ID or a bitcoin address?\n>    - Am I supposed to send funds to this address?\n>\n> If creating a new checksum standard for the descriptor record is\n> undesirable, we could use a child address (from an unhardened BIP32 path)\n> and encode that in some way for end-users to verify it matches across all\n> Signers. It would be strongly preferable for the encoding to be an\n> unambiguously different format from a bitcoin address / BIP39 seed phrase,\n> so that it\u2019s clear it\u2019s just a wallet ID. One non-ideal but simple solution\n> is to use a hash function (i.e. dsha256) to calculate the digest of the\n> child address, and display this in hexadecimal format. While hexadecimal is\n> non-ideal for manual verification, it is already trivial for any bitcoin\n> library to perform these steps.\n>\n\nAs I have responded to your previous comment about the same on Github (\nhttps://github.com/nunchuk-io/bips/pull/1), I do see the value of a\nlonger checksum.\n\nThere are trade-offs when it comes to designing checksum. Mainly complexity\nand size. At one end of the spectrum you can have a single-byte XOR\nchecksum. At the other end you can have something like HMAC-SHA256 (which\nwe are using in the proposal to calculate the MACs for the key and\ndescriptor records). And then there's everything in between. But we should\nknow that nothing comes for free.\n\nIt's a good topic that warrants further discussion.\n\nConfirming a single address is a promising direction, since it's something\nthe user should do anyway prior to using the wallet. Currently the proposal\nrecommends that the Signers show a preview of the first address(es) upon\nwallet creation. But we can elevate this and make it a mandatory part of\nthe spec: have all Signers confirm that they have the same 1st receive\naddress. If we go with this approach, the checksum can stay as-is, and only\nthere for error detection. (We get the checksum for free with the\ndescriptor language anyway, so there's no reason to remove it).\n\nAlso nice to see that you have come around and agree that moving away from\nmanual inspection is desirable.\n\n\n> *2. Allow Support for Stateless Wallets*\n>\n> The current BIP states:\n>\n> * \"If all checks pass, the Signer must persist the descriptor record in\n> its storage.\"*\n>\n> While persistence has a lot of benefits, it is not a feature of the most\n> sold multisig hardware wallet: Trezor. A simple solution here is to have\n> each Signer sign the entire descriptor record at the end of round 2, not\n> just its own key record in round 1. Then the data can be stored anywhere\n> (including on the Signer itself) and played back to each Signer for\n> validation when needed. The end-user would have no idea this was happening,\n> but the device could refuse to display information it hasn\u2019t fully\n> validated (or at least add a warning message). Even a device with\n> persistent storage would be better served using a signature, so that an\n> evil maid couldn't tamper with the device (say in the no-encryption case\n> for simplicity).\n>\n\nI reiterate that I strongly disagree that going stateless is the direction\nwe want to pursue when it comes to multisig.\n\nIn a multisig or any type of MPC smart contract, any Signer in the contract\nmust know who the other co-Signers are at all times. You can choose to do\nthis verification once at setup and persist this info on the Signer, or\nyou'd have to re-do the verification for every single transaction. There is\nno other choice.\n\nSigning the descriptor record is insufficient, while also introducing a\ngreat deal of complexity. Here are the problems:\n1) The signature needs to be stored somewhere. Who stores it if it's not\nthe Signer itself? What if it gets lost? (If the Signer stores its own\nsignature, then the scheme is no longer stateless. You might as well store\nthe full descriptor).\n2) When the signature is \"played back\" to the Signer, a copy of the\noriginal descriptor must be included. Who stores the descriptor? What if it\ngets lost? This is an under-appreciated aspect of the stateful approach:\nevery participant in the multisig has a full copy of the original contract,\nwhich adds resilience to the wallet backup / recovery process.\n3) Because the full descriptor must be \"played back\" for every single\ntransaction, this means every detail of the contract must be shared again\nand again, indefinitely. Not only does this add overhead (engineering and\ncognitive) to the spending process, it has massive privacy implications,\nsince the descriptor contains everything you need to know about the wallets\nand its participants.\n\nHere's an analogy in the physical world. Would you:\na) Enter any type of written contract and\nb) Not keep a copy of the contract, forget about it, and\nc) Later on rely on your counter-parties or a third-party to provide you\nwith the original contract and your signature, when the terms get carried\nout?\n\nOne would be insane to enter such a contract in the real world.\n\nI realize that some vendors are currently not stateful, but I take this as\nan unfortunate fact, because multisig wasn't a priority when these hardware\nwere originally designed. But that is no reason to keep going with a broken\narchitecture. The industry is green enough that we still can learn and\nrecover from these sorts of flaws.\n\nSince you mentioned Trezor, I want to thank Pavol in particular here,\nbecause as Trezor CTO Pavol knows best that Trezor is currently stateless,\nbut he's still on-board with the general idea here, AFAIU.\n\nBottom line: IMO, signers in a multisig MUST be stateful.\n\nThis existing vulnerability in stateless wallets is particularly bad for\n> hosted multisig services like Casa/Unchained, where the service might\n> control m-1 keys. It\u2019s far easier for a hosted service to potentially trick\n> non-expert users into displaying an attacker's receive address on their\n> stateless Signer.\n>\n> For example, assume the user is doing 2-of-3 multisig, where the\n> Coordinator (service) controls 1 key. Here is how the Coordinator could\n> trick their end-users:\n>\n>    1. Coordinator swaps out 1 of the end-user\u2019s xpubs, going from a\n>    2-of-3 where the end-user has 2 seeds to a 2-of-3 where the Coordinator has\n>    2 seeds.\n>    2. The end-user logs into the service to get a new receive address,\n>    and the service (Coordinator) displays malicious receive address X (as part\n>    of a 2-of-3).\n>    3. The end user connects stateless Signer 1 to the service\n>    (Coordinator), which under-the-hood gives stateless Signer 1 proof that it\n>    is included in this 2-of-3. Stateless singer 1 displays malicious receive\n>    address X!\n>    4. The end-user doesn't verify the address on Signer 2, as many users\n>    unfortunately don't -- perhaps it is in a far away location and the\n>    end-user (incorrectly) thinks that it\u2019s already been validated in 2 places\n>    -- and makes a large deposit to receive address X. These funds now belong\n>    to the attacker and can be swept at any time!\n>\n> If stateless Signer 1 required a signature to be replayed at step 3,\n> stateless Signer 1 would refuse to display malicious receive address X (or\n> at a minimum warn the end-user that it did not have enough info to properly\n> validate the address).\n>\n> This is also a concern for self-hosted multisig, I just used the hosted\n> services as the best example.\n>\n> It's also not just Trezor that is stateless. For example, I wrote a\n> simple CLI software multisig wallet as part of the buidl library\n> <https://twitter.com/mflaxman/status/1321503036724989952> to be used\n> mostly for emergency recovery. At 800 lines of code, it's too\n> simple/minimal to touch the file system.\n>\n> *BIP39*\n>\n> While unrelated, the use of BIP39 words for session tokens seems like a\n> big mistake, as end-users have learned over years that BIP39 words are for\n> private key material. A small percent of users may backup their token BIP39\n> mnemonic and not their seed phrase BIP39 mnemonic! My suggestion is to just\n> stick with the other two Token options: decimal and hex.\n>\n\nRepost of my previous response. We discussed this at length on the\nlinked Github PR:\n\"We decided to keep the TOKEN at 6-9 words, not 12 or anything above\nprecisely for this reason. Please note that the user has to back up their\nSigners first, before proceeding to setting up the multisig wallet. So\nthere's no writing both things down at once or mixing of the two flows here.\n\nI also find it hard to believe that someone who wants to invest in a safe\nmultisig solution (and therefore must know at minimum what keys and\nmultisig represent) will not know the difference between (permanent) 12\nwords and (one-time use) 6 words. Also note that the TOKEN can be used\nwithout using BIP39 mnemonic at all.\"\n\nWe also made the decimal format, not BIP39 mnemonic, the recommended\nencoding in the spec.\n\nBest,\nHugo\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210411/92f6fc7e/attachment-0001.html>"
            },
            {
                "author": "Salvatore Ingala",
                "date": "2021-04-12T15:03:12",
                "message_text_only": "Hi Hugo,\n\nFirst of all, thank you for the impressive work on leading the\nstandardization efforts!\n\nI believe one ought to more clearly distinguish the \"Signer\" (as in: one of\nthe parties in the multisig setup), from the \"*Signing device*\" (which is\nlikely a hardware wallet). BSMS defines a \"Signer\" as \"a participating\nmember in the multisig\",  therefore a person/entity who is likely using\nboth a hardware wallet and some BSMS-friendly software wallet (e.g. the\nnext version of Specter Desktop). It is therefore relevant to discuss which\nparts of the BSMS mechanism are implemented in the Signer's software\nwallet, and which should be in the Signer's hardware wallet.\n>From the discussion, it appears to me that different people might have\ndifferent expectations on what the signing device/HWW should do, so I would\nlike to comment on this point specifically (while I reckon that it mostly\nfalls within the realm of concerns #4 and #5 of the motivation paragraph,\nwhich are explicitly left out of scope).\n\nI fully agree that a *Signer* must persist the full wallet's description,\nand should also create physical backups which include the full descriptor\nand the cosigner's information. I would disagree, however, if any standards\nwere to force *hardware wallets* to persist any substantial amount of state\nother than the seed, as I believe that it gives no substantial advantage\nover externally stored signed data for many use cases.\n\nThe following is the *wallet registration flow* I am currently working on\n(in the context of adding support to multisig wallets at Ledger). The goal\nis to allow a *Signer* (the person) to persist a multisig setup in its\nstorage, while achieving a similar level of security you would have if you\nwere storing it on the hardware wallet itself (note that the following flow\nwould happen as part of Round 2):\n\n1) The desktop wallet of the requests the HWW to register a new multisig\nwallet. The request includes the full multisig wallet description, and some\nextra metadata (e.g.: a name to be associated to this multisig wallet).\n2) The HWW validates the wallet and verifies it with the user with the\ntrusted screen (as per BSMS Round 2); on confirmation, it returns a wallet\nid (which is a vendor-specific hash of all the wallet description +\nmetadata) and signature\n3) The desktop wallet stores the full wallet description/id/signature.\n(Optionally, a backup could be stored elsewhere).\n\nWhenever an operation related to the multisig wallet is required (verifying\na receiving address, or signing a spending transaction), the HWW first\nreceives and verifies all the data stored at step 3 above (without any user\ninteraction). Then it proceeds exactly the same way as if it had always\nstored the multisig wallet in their own storage. I think this is basically\nthe same flow Michael Flaxman is suggesting here:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018775.html\n\n(Note that none of this is flow specific to Multisig wallet, as the same\nflow would be unchanged for any arbitrary supported script that needs to be\n\"registered\" on a stateless device, and can be generalized for MPC\nprotocols)\n\nThe only caveat I can think of is that the script registration is never\nrevocable if a signing key derived from the seed is used in step (2), which\nmight or might not be desirable. One could instead prefer to use a\ndifferent signing key that is destroyed if the device is wiped, which would\ntherefore need to be stored on the device. Note that the only thing that is\nlost is the on-device multisig wallet registration, which could easily be\nrepeated from a backup.\n\n\nOn Sun, 11 Apr 2021 at 19:11, Hugo Nguyen via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I reiterate that I strongly disagree that going stateless is the direction\n> we want to pursue when it comes to multisig.\n>\n> In a multisig or any type of MPC smart contract, any Signer in the\n> contract must know who the other co-Signers are at all times. You can\n> choose to do this verification once at setup and persist this info on the\n> Signer, or you'd have to re-do the verification for every single\n> transaction. There is no other choice.\n>\n\n>\nSigning the descriptor record is insufficient, while also introducing a\n> great deal of complexity. Here are the problems:\n> 1) The signature needs to be stored somewhere. Who stores it if it's not\n> the Signer itself? What if it gets lost? (If the Signer stores its own\n> signature, then the scheme is no longer stateless. You might as well store\n> the full descriptor).\n>\n\nIn the flow I describe above, the desktop wallet would indeed store the\nsigned descriptor record and wallet metadata. So yes, the *Signer* as in *the\nparty in the protocol* stores it, but not the signing device*. *The same\nmethod could be used to store state temporarily between round 1 and 2,\nwhere the only *state* on the hardware wallet would be the TOKEN, while\neverything else is stored (encrypted and signed) on the Signer's desktop.\n\n\n> 2) When the signature is \"played back\" to the Signer, a copy of the\n> original descriptor must be included. Who stores the descriptor? What if it\n> gets lost? This is an under-appreciated aspect of the stateful approach:\n> every participant in the multisig has a full copy of the original contract,\n> which adds resilience to the wallet backup / recovery process.\n>\n\n\"Playing back\" the signature and wallet's setup data to the hardware wallet\nwould indeed happen transparently from the Signer's wallet software. If the\nSigner lost this data due to malware, faulty hardware, etc., the user would\nindeed have to recover from backup, which seems ok to me.\n\n\n> 3) Because the full descriptor must be \"played back\" for every single\n> transaction, this means every detail of the contract must be shared again\n> and again, indefinitely. Not only does this add overhead (engineering and\n> cognitive) to the spending process, it has massive privacy implications,\n> since the descriptor contains everything you need to know about the wallets\n> and its participants.\n>\n\nI agree with some of these concerns, but I observe:\n- The engineering overhead in handling externally-stored-signed-data is\npaid once, and would mostly fall on the hardware wallet vendor. External\nsoftware only cares about storing certain data and sending it back later.\n- Storing xpubs/descriptors in the desktop software that interacts with\nthe HWW is already common practice, and necessary for using any watch-only\nwallet.\n\nSummarizing, I argue that the stateful/stateless characteristic of a\nhardware wallet does not really affect (modulo some extra work) the ability\nto participate in the BSMS ceremony, whose *Signers* should indeed be\nstateful.\nSome more clarifications on the trust assumptions might help at clarifying\nthe best possible software/hardware implementation tradeoffs, either in\nthis or a follow-up BIP.\n\nBest,\nSalvatore Ingala\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210412/0e23254c/attachment.html>"
            },
            {
                "author": "Hugo Nguyen",
                "date": "2021-04-12T17:55:36",
                "message_text_only": "Hello Salvatore,\n\nOn Mon, Apr 12, 2021 at 8:03 AM Salvatore Ingala <salvatore.ingala at gmail.com>\nwrote:\n\n> Hi Hugo,\n>\n> First of all, thank you for the impressive work on leading the\n> standardization efforts!\n>\n> I believe one ought to more clearly distinguish the \"Signer\" (as in: one\n> of the parties in the multisig setup), from the \"*Signing device*\" (which\n> is likely a hardware wallet).\n>\n\nActually, in the current spec, a \"Signer\" is *any software/hardware that\npossesses the private keys and can sign using those keys* -- it doesn't\nhave to be hardware. \"Signer\" does not mean the human user. I will clarify\nthe definition and clear up any ambiguous language in the spec. Thanks for\nbringing this to my attention!\n\n\n> BSMS defines a \"Signer\" as \"a participating member in the multisig\",\n> therefore a person/entity who is likely using both a hardware wallet and\n> some BSMS-friendly software wallet (e.g. the next version of Specter\n> Desktop).\n>\n\nAs mentioned above, \"Signer\" does not refer to the user or any entity that\ndoes not have the private keys / signing capability.\n\n\n> It is therefore relevant to discuss which parts of the BSMS mechanism are\n> implemented in the Signer's software wallet, and which should be in the\n> Signer's hardware wallet.\n> From the discussion, it appears to me that different people might have\n> different expectations on what the signing device/HWW should do, so I would\n> like to comment on this point specifically (while I reckon that it mostly\n> falls within the realm of concerns #4 and #5 of the motivation paragraph,\n> which are explicitly left out of scope).\n>\n> I fully agree that a *Signer* must persist the full wallet's description,\n> and should also create physical backups which include the full descriptor\n> and the cosigner's information. I would disagree, however, if any standards\n> were to force *hardware wallets* to persist any substantial amount of\n> state other than the seed, as I believe that it gives no substantial\n> advantage over externally stored signed data for many use cases.\n>\n> The following is the *wallet registration flow* I am currently working on\n> (in the context of adding support to multisig wallets at Ledger). The goal\n> is to allow a *Signer* (the person) to persist a multisig setup in its\n> storage, while achieving a similar level of security you would have if you\n> were storing it on the hardware wallet itself (note that the following flow\n> would happen as part of Round 2):\n>\n> 1) The desktop wallet of the requests the HWW to register a new multisig\n> wallet. The request includes the full multisig wallet description, and some\n> extra metadata (e.g.: a name to be associated to this multisig wallet).\n> 2) The HWW validates the wallet and verifies it with the user with the\n> trusted screen (as per BSMS Round 2); on confirmation, it returns a wallet\n> id (which is a vendor-specific hash of all the wallet description +\n> metadata) and signature\n> 3) The desktop wallet stores the full wallet description/id/signature.\n> (Optionally, a backup could be stored elsewhere).\n>\n\n> Whenever an operation related to the multisig wallet is required\n> (verifying a receiving address, or signing a spending transaction), the HWW\n> first receives and verifies all the data stored at step 3 above (without\n> any user interaction). Then it proceeds exactly the same way as if it had\n> always stored the multisig wallet in their own storage.\n>\n\nNow that we're clear on definitions, then it should become obvious that\nredefining the \"Coordinator-Signer\" pair as \"a Signer\" does not address the\nunderlying problem. (What you call \"the desktop wallet\" here is a\nCoordinator, not a Signer).\n\nAs long as the Signer does not own up the task of storing the wallet\nconfiguration, it must rely indefinitely on others for critical data when\nworking in a multisig wallet, as I have explained in my last email.\n\nBest,\nHugo\n\n\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210412/d2c96113/attachment-0001.html>"
            },
            {
                "author": "Christopher Allen",
                "date": "2021-04-12T18:45:27",
                "message_text_only": "Though I am ACK on that we need to solve the problem of xpub privacy and\nreuse, I'm NACK on this solution. It is currently too complex and doesn't\nreally solve the problem.\n\nI believe that the ultimate solution will be some form of multi-round\ncryptographic commitment scheme, and as musig threshold signatures with\nTaproot/Schnoor also require multi-round scheme, we should start thinking\nnow about how maybe we can leverage that work to address this problem as\nwell. However, I'm not a cryptographer and don't have a specific solution\nin this area to offer.\n\nIn the meantime, there are some possible measures we can take as new best\npractices. This is not a formal list, and I'm open to other suggestions,\nbut each are currently relatively easy and are functional with some\nexisting wallets that CAN support state. Let us get it right with stateful\nwallets, then we can return back to better best practices for stateless\nwallets like Trezor, Ledger, etc.\n\nA) We should accept that users must to backup their multisig account maps\n(descriptor with only xpubs) along with their cosigner key material to be\nable to recover funds. In the Airgap Community we make this very easy with\na simple UR code that works efficiently as a QR. I personally keep multiple\ncopies of this account map in multiple locations, as it is less of a risk\n(mostly privacy) if one of the locations is compromised.\n\nB) Cosigner wallets and transaction coordinator services should not share\nthe master xpub, only the derived co-signer xpubs required for that\nspecific account. Currently too many libraries, wallets and coordinators\nonly function if they get the master xpub \u2014 these should be updated to not\nrequire them.\n\nC) In many current wallets, the master xpub fingerprint is required \u2014 that\nmaster fingerprint is also a privacy risk and should not be used. For\ninstance, the current practice of offering what the Airgap Community calls\na `crypto-hdkey` [604b93f2/48'/1'/0'/2'] with the master fingerprint root,\ncould instead be to only offer a single parent fingerprint [f93749a7/2']\nfrom that grandparent master key. Thus different fingerprints can be\noffered for each account, and only the signer knows the actual master\nfingerprint and its children.\n\nD) Given C, when creating a new multisig account, a transaction coordinator\nmay request a specific master fingerprint and/or a fixed 48' derivation\nxpub from a cosigner wallet, but these are only hints. If it gets back a\ndifferent fingerprint or derivation, it should accept it. In the case of\nthe Airgap Community's specifications, in our \"crypto-request\" we actually\nspecifically allow for wildcard requests which makes this easy and\nexplicit. Yes, only stateful signers can know to return an xpub something\nother than the fingerprint  and m/48'/1'/0'/2' default, but a transaction\ncoordinator should accept it if it receives it.\n\nE) Transaction coordinators should send the cosigner \"policy\" (basically\nthe multisign descriptor without any keys in it) along with any request to\nderive a new xpub for that new account. Stateful wallets can use this\npolicy to know later if they are asked to sign a PSBT that does not match\nthis policy.\n\nF) Transaction coordinators should also send the final \"account map\" to all\nthe cosigner wallets as a best practice as well. This would replace the\ntemporary \"policy\" in D. If a PSBT request to sign using a key doesn't\nmatch the original account map, the cosigner wallet can reject it.\n\nThese best practices don't solve the problem with stateless wallets like\nTrezor, but they are possible now with the new generation of multisig\nhardware and software wallets, such as Foundation Devices, CoboVault,\nSparrow, Bluwallet and my Gordian reference wallet tools. We have available\nNOW working interoperable specifications, reference code, and example apps\nthat support these best practices, and some are already supported by\nmultiple wallets in the Airgapped Wallet Community hosted by Blockchain\nCommons at https://github.com/blockchainCommons/airgapped-Wallet-Community.\n\nI've put a copy of this rough proposal in our Airgapped Wallet Community\ndiscussion area if you have suggestions or alternative best practices.\n\n[Initial proposal for best practice to avoid XPUB reuse in multisig account\ncreation](\nhttps://github.com/BlockchainCommons/Airgapped-Wallet-Community/discussions/53\n)\n\n-- Christopher Allen, Blockchain Commons\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210412/16421f4e/attachment.html>"
            },
            {
                "author": "Robert Spigler",
                "date": "2021-04-12T20:43:39",
                "message_text_only": "I don't quite understand your NACK.\n\nThe following are measures you say we should take as best practices, which I believe are all implemented:\n\n>A) We should accept that users must to backup their multisig account maps (descriptor with only xpubs) along with their cosigner key material to be able to recover funds.\n\nBSMS requires that the descriptor persist in storage and be able to be displayed when requested by the user. It is already industry standard that the same apply to cosigner key material. Backing up both is good practice. (My BIP for a new key hierarchy enforces this as well (https://github.com/bitcoin/bips/pull/1089))\n\n>B) Cosigner wallets and transaction coordinator services should not share the master xpub\nAgain, check out my updated hierarchy for multisignature wallets, which enforces this and works very well with BSMS.\n\n>C) In many current wallets, the master xpub fingerprint is required\nI am confused by this - the descriptor language standardizes the master xpub fingerprint in the key origin information?\n\n>E) Transaction coordinators should send the cosigner \"policy\"\nThere is no cosigner \"policy\" in this standard, but the same checks are implemented (N unique key records, key is included in descriptor, plus valid MAC, valid signatures, valid checksum, etc).\n\n>F) Transaction coordinators should also send the final \"account map\" to all the cosigner wallets\nThis is done\n\nRobert Spigler\n\nPersonal Fingerprint: BF0D 3C08 A439 5AC6 11C1 5395 B70B 4A77 F850 548F\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Monday, April 12, 2021 2:45 PM, Christopher Allen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Though I am ACK on that we need to solve the problem of xpub privacy and reuse, I'm NACK on this solution. It is currently too complex and doesn't really solve the problem.\n>\n> I believe that the ultimate solution will be some form of multi-round cryptographic commitment scheme, and as musig threshold signatures with Taproot/Schnoor also require multi-round scheme, we should start thinking now about how maybe we can leverage that work to address this problem as well. However, I'm not a cryptographer and don't have a specific solution in this area to offer.\n>\n> In the meantime, there are some possible measures we can take as new best practices. This is not a formal list, and I'm open to other suggestions, but each are currently relatively easy and are functional with some existing wallets that CAN support state. Let us get it right with stateful wallets, then we can return back to better best practices for stateless wallets like Trezor, Ledger, etc.\n>\n> A) We should accept that users must to backup their multisig account maps (descriptor with only xpubs) along with their cosigner key material to be able to recover funds. In the Airgap Community we make this very easy with a simple UR code that works efficiently as a QR. I personally keep multiple copies of this account map in multiple locations, as it is less of a risk (mostly privacy) if one of the locations is compromised.\n>\n> B) Cosigner wallets and transaction coordinator services should not share the master xpub, only the derived co-signer xpubs required for that specific account. Currently too many libraries, wallets and coordinators only function if they get the master xpub \u2014 these should be updated to not require them.\n>\n> C) In many current wallets, the master xpub fingerprint is required \u2014 that master fingerprint is also a privacy risk and should not be used. For instance, the current practice of offering what the Airgap Community calls a `crypto-hdkey` [604b93f2/48'/1'/0'/2'] with the master fingerprint root, could instead be to only offer a single parent fingerprint [f93749a7/2'] from that grandparent master key. Thus different fingerprints can be offered for each account, and only the signer knows the actual master fingerprint and its children.\n>\n> D) Given C, when creating a new multisig account, a transaction coordinator may request a specific master fingerprint and/or a fixed 48' derivation xpub from a cosigner wallet, but these are only hints. If it gets back a different fingerprint or derivation, it should accept it. In the case of the Airgap Community's specifications, in our \"crypto-request\" we actually specifically allow for wildcard requests which makes this easy and explicit. Yes, only stateful signers can know to return an xpub something other than the fingerprint and m/48'/1'/0'/2' default, but a transaction coordinator should accept it if it receives it.\n>\n> E) Transaction coordinators should send the cosigner \"policy\" (basically the multisign descriptor without any keys in it) along with any request to derive a new xpub for that new account. Stateful wallets can use this policy to know later if they are asked to sign a PSBT that does not match this policy.\n>\n> F) Transaction coordinators should also send the final \"account map\" to all the cosigner wallets as a best practice as well. This would replace the temporary \"policy\" in D. If a PSBT request to sign using a key doesn't match the original account map, the cosigner wallet can reject it.\n>\n> These best practices don't solve the problem with stateless wallets like Trezor, but they are possible now with the new generation of multisig hardware and software wallets, such as Foundation Devices, CoboVault, Sparrow, Bluwallet and my Gordian reference wallet tools. We have available NOW working interoperable specifications, reference code, and example apps that support these best practices, and some are already supported by multiple wallets in the Airgapped Wallet Community hosted by Blockchain Commons at https://github.com/blockchainCommons/airgapped-Wallet-Community.\n>\n> I've put a copy of this rough proposal in our Airgapped Wallet Community discussion area if you have suggestions or alternative best practices.\n>\n> [Initial proposal for best practice to avoid XPUB reuse in multisig account creation](https://github.com/BlockchainCommons/Airgapped-Wallet-Community/discussions/53)\n>\n> -- Christopher Allen, Blockchain Commons\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210412/bf6756eb/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposal: Bitcoin Secure Multisig Setup",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Hugo Nguyen",
                "Salvatore Ingala",
                "Christopher Allen",
                "Robert Spigler",
                "Sjors Provoost",
                "Erik Aronesty",
                "Michael.flaxman"
            ],
            "messages_count": 13,
            "total_messages_chars_count": 142844
        }
    },
    {
        "title": "[bitcoin-dev] March 23rd 2021 Taproot Activation Meeting Notes",
        "thread_messages": [
            {
                "author": "Rusty Russell",
                "date": "2021-04-06T04:25:21",
                "message_text_only": "Jeremy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> writes:\n> We had a very productive meeting today. Here is a summary of the meeting --\n> I've done my best to\n> summarize in an unbiased way. Thank you to everyone who attended.\n>\n> 1. On the use of a speedy trial variant:\n>\n> - There are no new objections to speedy trial generally.\n> - There is desire to know if Rusty retracts or reaffirms his NACK in light\n> of the responses.\n\nI do not withdraw my NACK (and kudos: there have been few attempts to\npressure me to do so!).\n\nThe core question always was: what do we do if miners fail to activate?\n\nLuke-Jr takes the approach that \"we (i.e developers) ensure it activates\nanyway\".  I take the approach that \"the users must make a direct\nintervention\".  Speedy Trial takes the approach that \"let's pretend we\ndidn't *actually* ask them\".\n\nIt's totally a political approach, to avoid facing the awkward question.\nSince I believe that such prevaricating makes a future crisis less\npredictable, I am forced to conclude that it makes bitcoin less robust.\n\nPersonally, I think the compromise position is using LOT=false and\nhaving those such as Luke and myself continue working on a LOT=true\nbranch for future consideration.  It's less than optimal, but I\nappreciate that people want Taproot activated more than they want\nthe groundwork future upgrades.\n\nI hope that helps,\nRusty."
            },
            {
                "author": "Ryan Grant",
                "date": "2021-04-07T01:20:15",
                "message_text_only": "On Tue, Apr 6, 2021 at 11:58 PM Rusty Russell via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> The core question always was: what do we do if miners fail to activate?\n>\n> [...]  Speedy Trial takes the approach that \"let's pretend we didn't\n> *actually* ask [miners]\".\n\nWhat ST is saying is that a strategy of avoiding unnecessary risk is\nstronger than a strategy of brinkmanship when brinkmanship wasn't\nour only option.  Having deescalation in the strategy toolkit makes\nBitcoin stronger.\n\n> It's totally a political approach, to avoid facing the awkward question.\n> Since I believe that such prevaricating makes a future crisis less\n> predictable, I am forced to conclude that it makes bitcoin less robust.\n\nLOT=true does face the awkward question, but there are downsides:\n\n  - in the requirement to drop blocks from apathetic miners (although\n    as Luke-Jr pointed out in a previous reply on this list they have\n    no contract under which to raise a complaint); and\n\n  - in the risk of a chain split, should gauging economic majority\n    support - which there is zero intrinsic tooling for - go poorly.\n\n> Personally, I think the compromise position is using LOT=false and\n> having those such as Luke and myself continue working on a LOT=true\n> branch for future consideration.  It's less than optimal, but I\n> appreciate that people want Taproot activated more than they want\n> the groundwork future upgrades.\n\nAnother way of viewing the current situation is that should\nbrinkmanship be necessary, then better tooling to resolve a situation\nthat requires brinkmanship will be invaluable.  But:\n\n  - we do not need to normalize brinkmanship;\n\n  - designing brinkmanship tooling well before the next crisis does\n    not require selecting conveniently completed host features to\n    strap the tooling onto for testing; and\n\n  - it's already the case that a UASF branch can be prepared along\n    with ST (ie. without requiring LOT=false), although the code is a\n    bit more complex and the appropriate stopheight a few blocks later.\n\nAlthough your NACK is well explained, for the reasons above I am\nprepared to run code that overrides it."
            },
            {
                "author": "Rusty Russell",
                "date": "2021-04-07T05:01:13",
                "message_text_only": "Ryan Grant <bitcoin-dev at rgrant.org> writes:\n> On Tue, Apr 6, 2021 at 11:58 PM Rusty Russell via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> The core question always was: what do we do if miners fail to activate?\n>>\n>> [...]  Speedy Trial takes the approach that \"let's pretend we didn't\n>> *actually* ask [miners]\".\n>\n> What ST is saying is that a strategy of avoiding unnecessary risk is\n> stronger than a strategy of brinkmanship when brinkmanship wasn't\n> our only option.  Having deescalation in the strategy toolkit makes\n> Bitcoin stronger.\n\nI don't believe that having a plan is brinkmanship or an escalation.\n\nDuring the segwit debate, Pieter Wuille said that users should decide.\nI've been thinking about that a lot, especially about what that means in\na practical sense where the normal developer / miner dynamic has failed.\n\n>> It's totally a political approach, to avoid facing the awkward question.\n>> Since I believe that such prevaricating makes a future crisis less\n>> predictable, I am forced to conclude that it makes bitcoin less robust.\n>\n> LOT=true does face the awkward question, but there are downsides:\n>\n>   - in the requirement to drop blocks from apathetic miners (although\n>     as Luke-Jr pointed out in a previous reply on this list they have\n>     no contract under which to raise a complaint); and\n\nSurely, yes.  If the users of bitcoin decide blocks are invalid, they're\ninvalid.  With a year's warning, and developer and user consensus\nagainst them, I think we've reached the limits of acceptable miner\napathy.\n\n>   - in the risk of a chain split, should gauging economic majority\n>     support - which there is zero intrinsic tooling for - go poorly.\n\nAgreed that we should definitely do better here: in practice people\nwould rely on third party explorers for information on the other side of\nthe split.  Tracking the cumulative work on invalid chains would be a\ngood idea for bitcoind in general (AJ suggested this, IIRC).\n\n>> Personally, I think the compromise position is using LOT=false and\n>> having those such as Luke and myself continue working on a LOT=true\n>> branch for future consideration.  It's less than optimal, but I\n>> appreciate that people want Taproot activated more than they want\n>> the groundwork future upgrades.\n>\n> Another way of viewing the current situation is that should\n> brinkmanship be necessary, then better tooling to resolve a situation\n> that requires brinkmanship will be invaluable.  But:\n>\n>   - we do not need to normalize brinkmanship;\n>\n>   - designing brinkmanship tooling well before the next crisis does\n>     not require selecting conveniently completed host features to\n>     strap the tooling onto for testing; and\n\nAgain, openly creating a contingency plan is not brinkmanship, it's\nnormal.  I know that considering these scenarios is uncomfortable; I\navoid conflict myself!  But I feel obliged to face this as a real\npossibility.\n\nI think we should be normalizing the understanding that bitcoin users\nare the ultimate decider.  By offering *all* of them the tools to do so\nwe show this isn't lip-service, but something that businesses and\neveryone else in the ecosystem should consider.\n\n>   - it's already the case that a UASF branch can be prepared along\n>     with ST (ie. without requiring LOT=false), although the code is a\n>     bit more complex and the appropriate stopheight a few blocks later.\n\nI don't believe this is true, unless you UASF before ST expires?  ST is\nexplicitly designed *not* to give time to conclude that miners are\nstalling (unless something has changed from the initial 3 month\nproposal?).\n\n> Although your NACK is well explained, for the reasons above I am\n> prepared to run code that overrides it.\n\nGood.  In the end, we're all at the whim of the economic majority.\n\nCheers!\nRusty."
            },
            {
                "author": "Claus Ehrenberg",
                "date": "2021-04-07T13:42:01",
                "message_text_only": "As a user, I think it's very important for me to know if Taproot is\neventually coming or not. So why not make it so that if _either_ miners\n_or_ users decide for Taproot, it will activate no matter what. Accepting a\nchain split is imo the fairest way to 'resolve the conflict' (it can't be\nresolved anyway).\n\nThat would probably mean running ST and and UASF concurrently.\n\nThe upside would be that we've got a safe date for Taproot, except neither\nusers nor miners want it.\n\nCheers,\nClaus\n\nOn Wed, Apr 7, 2021 at 7:02 AM Rusty Russell via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Ryan Grant <bitcoin-dev at rgrant.org> writes:\n> > On Tue, Apr 6, 2021 at 11:58 PM Rusty Russell via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> The core question always was: what do we do if miners fail to activate?\n> >>\n> >> [...]  Speedy Trial takes the approach that \"let's pretend we didn't\n> >> *actually* ask [miners]\".\n> >\n> > What ST is saying is that a strategy of avoiding unnecessary risk is\n> > stronger than a strategy of brinkmanship when brinkmanship wasn't\n> > our only option.  Having deescalation in the strategy toolkit makes\n> > Bitcoin stronger.\n>\n> I don't believe that having a plan is brinkmanship or an escalation.\n>\n> During the segwit debate, Pieter Wuille said that users should decide.\n> I've been thinking about that a lot, especially about what that means in\n> a practical sense where the normal developer / miner dynamic has failed.\n>\n> >> It's totally a political approach, to avoid facing the awkward question.\n> >> Since I believe that such prevaricating makes a future crisis less\n> >> predictable, I am forced to conclude that it makes bitcoin less robust.\n> >\n> > LOT=true does face the awkward question, but there are downsides:\n> >\n> >   - in the requirement to drop blocks from apathetic miners (although\n> >     as Luke-Jr pointed out in a previous reply on this list they have\n> >     no contract under which to raise a complaint); and\n>\n> Surely, yes.  If the users of bitcoin decide blocks are invalid, they're\n> invalid.  With a year's warning, and developer and user consensus\n> against them, I think we've reached the limits of acceptable miner\n> apathy.\n>\n> >   - in the risk of a chain split, should gauging economic majority\n> >     support - which there is zero intrinsic tooling for - go poorly.\n>\n> Agreed that we should definitely do better here: in practice people\n> would rely on third party explorers for information on the other side of\n> the split.  Tracking the cumulative work on invalid chains would be a\n> good idea for bitcoind in general (AJ suggested this, IIRC).\n>\n> >> Personally, I think the compromise position is using LOT=false and\n> >> having those such as Luke and myself continue working on a LOT=true\n> >> branch for future consideration.  It's less than optimal, but I\n> >> appreciate that people want Taproot activated more than they want\n> >> the groundwork future upgrades.\n> >\n> > Another way of viewing the current situation is that should\n> > brinkmanship be necessary, then better tooling to resolve a situation\n> > that requires brinkmanship will be invaluable.  But:\n> >\n> >   - we do not need to normalize brinkmanship;\n> >\n> >   - designing brinkmanship tooling well before the next crisis does\n> >     not require selecting conveniently completed host features to\n> >     strap the tooling onto for testing; and\n>\n> Again, openly creating a contingency plan is not brinkmanship, it's\n> normal.  I know that considering these scenarios is uncomfortable; I\n> avoid conflict myself!  But I feel obliged to face this as a real\n> possibility.\n>\n> I think we should be normalizing the understanding that bitcoin users\n> are the ultimate decider.  By offering *all* of them the tools to do so\n> we show this isn't lip-service, but something that businesses and\n> everyone else in the ecosystem should consider.\n>\n> >   - it's already the case that a UASF branch can be prepared along\n> >     with ST (ie. without requiring LOT=false), although the code is a\n> >     bit more complex and the appropriate stopheight a few blocks later.\n>\n> I don't believe this is true, unless you UASF before ST expires?  ST is\n> explicitly designed *not* to give time to conclude that miners are\n> stalling (unless something has changed from the initial 3 month\n> proposal?).\n>\n> > Although your NACK is well explained, for the reasons above I am\n> > prepared to run code that overrides it.\n>\n> Good.  In the end, we're all at the whim of the economic majority.\n>\n> Cheers!\n> Rusty.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210407/e1e7b86a/attachment.html>"
            },
            {
                "author": "eric at voskuil.org",
                "date": "2021-04-07T15:25:22",
                "message_text_only": "You may activate any time you want.\n\n \n\ne\n\n \n\nFrom: bitcoin-dev <bitcoin-dev-bounces at lists.linuxfoundation.org> On Behalf Of Claus Ehrenberg via bitcoin-dev\nSent: Wednesday, April 7, 2021 6:42 AM\nTo: Rusty Russell <rusty at rustcorp.com.au>; Bitcoin Protocol Discussion <bitcoin-dev at lists.linuxfoundation.org>\nSubject: Re: [bitcoin-dev] March 23rd 2021 Taproot Activation Meeting Notes\n\n \n\nAs a user, I think it's very important for me to know if Taproot is eventually coming or not. So why not make it so that if _either_ miners _or_ users decide for Taproot, it will activate no matter what. Accepting a chain split is imo the fairest way to 'resolve the conflict' (it can't be resolved anyway).\n\n \n\nThat would probably mean running ST and and UASF concurrently.\n\n \n\nThe upside would be that we've got a safe date for Taproot, except neither users nor miners want it.\n\n \n\nCheers,\n\nClaus\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210407/dafd545f/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-04-07T17:13:11",
                "message_text_only": "On 4/7/21 01:01, Rusty Russell via bitcoin-dev wrote:\n> Ryan Grant <bitcoin-dev at rgrant.org> writes:\n>> On Tue, Apr 6, 2021 at 11:58 PM Rusty Russell via bitcoin-dev\n>> What ST is saying is that a strategy of avoiding unnecessary risk is\n>> stronger than a strategy of brinkmanship when brinkmanship wasn't\n>> our only option.  Having deescalation in the strategy toolkit makes\n>> Bitcoin stronger.\n> \n> I don't believe that having a plan is brinkmanship or an escalation.\n\nI strongly disagree with this characterization of ST, primarily because there just isn't the kind of agreement you seem \nto be assuming. ST isn't a \"lets not decide because we don't want to formulate a specific grand plan\" its more of a \n\"lets not decide, because there are very strong, and very divergent viewpoints on what a specific grand plan can or \nshould look like, and something most people are ok with is better than nothing at all\". Ultimately, there are a number \nof possible directions a grand plan could go, and there appear to be at least several prominent (and likely many \nnon-prominent) individuals who would strongly disagree with any such plan, you and I likely among them :).\n>>\n>> LOT=true does face the awkward question, but there are downsides:\n>>\n>>    - in the requirement to drop blocks from apathetic miners (although\n>>      as Luke-Jr pointed out in a previous reply on this list they have\n>>      no contract under which to raise a complaint); and\n> \n> Surely, yes.  If the users of bitcoin decide blocks are invalid, they're\n> invalid.  With a year's warning, and developer and user consensus\n> against them, I think we've reached the limits of acceptable miner\n> apathy.\n\nYou say \"developer and user consensus against them\" here, but then go on to argue that its perfectly acceptable for only \na small subset of users to be required to do something below.\n\n>>    - in the risk of a chain split, should gauging economic majority\n>>      support - which there is zero intrinsic tooling for - go poorly.\n> \n> Agreed that we should definitely do better here: in practice people\n> would rely on third party explorers for information on the other side of\n> the split.  Tracking the cumulative work on invalid chains would be a\n> good idea for bitcoind in general (AJ suggested this, IIRC).\n\nWe already have a really, really great precedent for tracking economic majority, I'd argue we have great tooling here! \nDuring Segwit2x, we had multiple futures and chain-split-tokens available, including the BitMex futures with billions of \ndollars in daily volume! For the BCH split, ViaBTC issued similar chain split tokens.\n\nAt the end of the day, economic value is going to determine the amount of hashrate on any chain, and there is a very, \nvery strong incentive (trading fees!) for an exchange to list...more stuff, chainsplit tokens included.\n\nWhy do we need to build in really janky ways to measure economic majority when there's already a great one that \nexperience has shown us will prop up and provide reasonable signal, given any material demand.\n\n>>> Personally, I think the compromise position is using LOT=false and\n>>> having those such as Luke and myself continue working on a LOT=true\n>>> branch for future consideration.  It's less than optimal, but I\n>>> appreciate that people want Taproot activated more than they want\n>>> the groundwork future upgrades.\n>>\n>> Another way of viewing the current situation is that should\n>> brinkmanship be necessary, then better tooling to resolve a situation\n>> that requires brinkmanship will be invaluable.  But:\n>>\n>>    - we do not need to normalize brinkmanship;\n>>\n>>    - designing brinkmanship tooling well before the next crisis does\n>>      not require selecting conveniently completed host features to\n>>      strap the tooling onto for testing; and\n> \n> Again, openly creating a contingency plan is not brinkmanship, it's\n> normal.  I know that considering these scenarios is uncomfortable; I\n> avoid conflict myself!  But I feel obliged to face this as a real\n> possibility.\n> \n> I think we should be normalizing the understanding that bitcoin users\n> are the ultimate decider.  By offering *all* of them the tools to do so\n> we show this isn't lip-service, but something that businesses and\n> everyone else in the ecosystem should consider.\n\nWhile I strongly agree with your principle, I strongly disagree with the practice of how you propose going about it. \nUltimately, no matter what we decide here, elsewhere, or what the process for consensus changes is, the decider will be \neconomic activity and users voting with their Bitcoin. We should start by acknowledging that, and acknowledging that the \nmarkets will (and have!) let us know what they think when there is any kind of material disagreement.\n\nThen, we should optimize for ensuring that the market never needs to \"correct the situation\", because if we end up there \n(or in any of these kinds of scenarios), we've basically screwed the pooch. Sure, some 10% minority group (and usually \nless as time goes on) forking themselves off has turned out to basically be irrelevant, but if we end up with multiple \nactive chains as a normal course of business (which I'd strongly argue we'd be optimizing for with some kind of UASF/LOT \noption design out the gate), all we do is encourage strife, at the cost of users who just want to use a robust and \nreliable Bitcoin.\n\n>>    - it's already the case that a UASF branch can be prepared along\n>>      with ST (ie. without requiring LOT=false), although the code is a\n>>      bit more complex and the appropriate stopheight a few blocks later.\n> \n> I don't believe this is true, unless you UASF before ST expires?  ST is\n> explicitly designed *not* to give time to conclude that miners are\n> stalling (unless something has changed from the initial 3 month\n> proposal?).\n\nST is not intended to be an end-all, be-all of the taproot activation story. I don't think anyone who is pushing for it \nthinks that ST is the only option if miners are not able to upgrade before its signaling window expires. Just because it \nisn't designed to ensure we can play brinksman ship fork games with a UASF doesn't mean there isn't a followup that \ncould include such a thing.\n\nMatt"
            },
            {
                "author": "Anthony Towns",
                "date": "2021-04-08T11:11:06",
                "message_text_only": "On Wed, Apr 07, 2021 at 02:31:13PM +0930, Rusty Russell via bitcoin-dev wrote:\n> >> It's totally a political approach, to avoid facing the awkward question.\n> >> Since I believe that such prevaricating makes a future crisis less\n> >> predictable, I am forced to conclude that it makes bitcoin less robust.\n> > LOT=true does face the awkward question, but there are downsides:\n> >   - in the requirement to drop blocks from apathetic miners (although\n> >     as Luke-Jr pointed out in a previous reply on this list they have\n> >     no contract under which to raise a complaint); and\n> Surely, yes.  If the users of bitcoin decide blocks are invalid, they're\n> invalid.\n\nThat's begging the question though -- yes, if _everyone_ decides bitcoin\nworks such-n-such a way, then there's no debate. But that's trivial:\nwho's left to debate, when everyone agrees?\n\nOn the otherhand, if people disagree with you, who's to say they're in\nthe minority and \"the users\" are on your side?\n\n> With a year's warning, and developer and user consensus\n> against them, I think we've reached the limits of acceptable miner\n> apathy.\n\nThe question is \"how do you establish developer and user consensus?\"\n\nIn particular, if you're running a business accepting payments via\n\"bitcoin\", how do you know what software to run to stay in consensus\nwith everyone else running bitcoin, so you know the payments you receive\nare good?\n\nIdeally, we try to make the answer to that trivial: just download any\nversion of bitcoind and run it with the default configuration. More\nrecent (supported) versions are better due to potential security fixes\nand performance improvements, of course.\n\n> >   - in the risk of a chain split, should gauging economic majority\n> >     support - which there is zero intrinsic tooling for - go poorly.\n> Agreed that we should definitely do better here: in practice people\n> would rely on third party explorers for information on the other side of\n> the split.  Tracking the cumulative work on invalid chains would be a\n> good idea for bitcoind in general (AJ suggested this, IIRC).\n\nThose measures are only useful *after* there's been a chain split. I'm\ncertainly in favour of better protections like that -- adversarial\nthinking, prepper-ism, whatever -- but we should be trying really hard to\navoid ending up in that situation; and even better to avoid even ending\nup *risking* that situation.\n\n> Again, openly creating a contingency plan is not brinkmanship,\n\nI think the word \"brinkmanship\" is being a bit overused in this thread...\n\nlockinontimeout is designed for a chain split -- its only action is\nto ignore one side of a split should it occur. That's not useless --\nsplitting the chain is a plausible scenario in the event of someone\ndedicating something like $200M+ per week to attacking bitcoin, and we\nshould have contingencies in place for that sort of thing.\n\nBut it's like carrying a gun around -- yeah, there are times when that\nmight be helpful for self-protection or to put a tyrant into the ground;\nbut putting it down on the table everytime you sit down for a coffee*\nand tapping it and saying \"look, I'm sure you'll do the right thing and\nserve me properly and I'll leave happy and give you a big tip; this is\njust a contingency plan\" isn't super great.\n\nAnd even then, lockinontimeout isn't really a very *good* contingency\nplan in the event of a chain split: if your side of the split isn't\nin the majority, you're relying on the other side -- the one with all\nthe money -- being stupid and not having a dontlockinever=yes option to\nprotect them from wipeout, and without a hardfork to change proof-of-work\nor the difficulty adjustment, you'll have enormous difficulties getting\nblocks at all.\n\n* The only thing worth spending bitcoin on.\n\n> I think we should be normalizing the understanding that bitcoin users\n> are the ultimate decider.\n\nYes. \n\nWhat we shouldn't be normalising is that the way users decide is by\nrisking their business by having their node reject blocks and hoping\nthat everyone else will also reject the same set of blocks.\n\n(After all, businesses handling lots of bitcoin being willing to force\nthe issue via running node software that rejects \"invalid\" blocks,\nwas the whole plan for making s2x a fait accompli...)\n\nI've written up what I believe is a better approach to dealing with\nthe possibility of miners not upgrading to enforce a soft-fork quickly\nhere:\n\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-March/018723.html\n\nI belive it would be straightforward to implement that after a failed\nspeedy trial; technically anyway.\n\nCheers,\naj"
            }
        ],
        "thread_summary": {
            "title": "March 23rd 2021 Taproot Activation Meeting Notes",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Ryan Grant",
                "Claus Ehrenberg",
                "Anthony Towns",
                "eric at voskuil.org",
                "Matt Corallo"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 24236
        }
    },
    {
        "title": "[bitcoin-dev] Response to Rusty Russell from Github",
        "thread_messages": [
            {
                "author": "Rusty Russell",
                "date": "2021-04-06T04:40:55",
                "message_text_only": "Jeremy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> writes:\n> Where I disagree is that I do not believe that BIP8 with LOT configuration\n> is the improved long term option we should ossify around either. I\n> understand the triumvirate model you desire to achieve, but BIP8 with an\n> individually set LOT configuration does not formalize how economic nodes\n> send a network legible signal ahead of a chain split. A regular flag day,\n> with no signalling, but communally released and communicated openly most\n> likely better achieves the goal of providing users choice.\n\nYou're ignoring the role of infrastructure.  It's similar to saying that\nthere is no need for elections: if things are bad enough, citizens can\nrise up and overthrow their government.\n\n> 1. Developers release, but do not activate\n> 2. Miners signal\n> 3. Users may override by compiling and releasing a patched Bitcoin with\n> moderate changes that activates Taproot at a later date. While this might\n> *seem* more complicated a procedure than configurable LOT, here are four\n> reasons why it may be simpler (and safer) to just do a fresh release:\n\nUsers may indeed, fire the devs and replace them, as this implies.  This\nis not empowering users, but in effect risks reducing their role to \"beg\nthe devs or beg the miners\".\n\n> A. No time-based consensus sensitivity on when LOT must be set (e.g., what\n> happens if mid final signal period users decide to set LOT? Do all users\n> set it at the same time? Or different times and end up causing nodes to ban\n> each other for various reasons?)\n\nYes, this Schelling point is important.  If you read BIP-8, you will see\nthat LOT=true activates at the last moment for this very reason.\n\n> B. No \"missed window\" if users don't coordinate on setting LOT before the\n> final period -- release whenever ready.\n\nOf course there is: they need to upgrade in time.\n\n> C. ST fails fast, permitting users ample time to prepare an alternative\n> release\n\nYou'd think so, but given the confusion surrounding Segwit, it seems a\nyear was barely time to debate, decide and coordinate.  You want this\nready to go at the *beginning* of the 1 year process, not being decided,\ndebated, build and deployed once the crisis is upon us.  That existing\ndeployment is a vital stake in the calculus of those who might try to\ndisrupt the process for any reason.\n\n> D. If miners continue to mine without signalling, and users abandon a\n> LOT=true setting, their node will have already marked those blocks invalid\n> and they will need to figure out how to re-validate the block.\n\nThis is true, in fact, of any soft fork: a Luke points out, our lack of\nrevalidation of blocks after upgrade is a bug.  Which should be fixed:\nIMHO a decent PR to make LOT runtime configurable would reevaluate any\nblocks >= timeoutheight-2016 when it is altered.\n\n> RE: point 3, is it as easy as it *could* be? No, but I don't have any\n> genius ideas on how to make it easier either. (Note that I've previously\n> argued for adding configurable LOT=true on the basis that a user-run script\n> could emulate LOT without any software change as a harm reduction, but I\n> did not advocate that particular technique be formalized as a part of the\n> activation process)\n\nBIP-8 (with the recent modifications to allow maximal number of\nnon-signalling blocks) is technically as fork-preventative as we can\nseek to make it.\n\nI am hopeful that our ecosystem will remain harmonious and we won't have\nto use it.  But I am significantly more hopeful that we won't have to\nuse it if we have it deployed and ready.\n\nCheers,\nRusty."
            },
            {
                "author": "Matt Corallo",
                "date": "2021-04-07T00:46:16",
                "message_text_only": "I'm somewhat gobsmacked that this entire conversation hasn't included the word \"market\" in it at all. If there's one \nthing we can all agree we learned from Segwit2x, BCH, BSV, BU, etc, its that, ultimately, the market decides. Not only \ndoes the market decide, but there's lots of money to be made by being the market maker or operator letting the market \nmake its voice heard. There is nothing we can, or should, do to ensure the market can make its voice heard - it always will.\n\nWe don't need to bend over backwards to make sure individual users are forced to try to form consensus among themselves \nvia options or chain splits, we can just let the market decide. Within reason, the market will probably decide \"yep, \nwhat the brains are doing looks good, Bitcoin needs to stay in consensus, no point in trying to nitpick something or \nwe'll never come to consensus about anything\". If what's being proposed is ever disagreed with by some small-ish but \nnontrivial group, futures markets are going to decide the fate of the system no matter what the consensus rules or \nactivation method is, why do we need to do very much else?\n\nMatt\n\nOn 4/6/21 00:40, Rusty Russell via bitcoin-dev wrote:\n> Jeremy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> writes:\n>> Where I disagree is that I do not believe that BIP8 with LOT configuration\n>> is the improved long term option we should ossify around either. I\n>> understand the triumvirate model you desire to achieve, but BIP8 with an\n>> individually set LOT configuration does not formalize how economic nodes\n>> send a network legible signal ahead of a chain split. A regular flag day,\n>> with no signalling, but communally released and communicated openly most\n>> likely better achieves the goal of providing users choice.\n> \n> You're ignoring the role of infrastructure.  It's similar to saying that\n> there is no need for elections: if things are bad enough, citizens can\n> rise up and overthrow their government.\n> \n>> 1. Developers release, but do not activate\n>> 2. Miners signal\n>> 3. Users may override by compiling and releasing a patched Bitcoin with\n>> moderate changes that activates Taproot at a later date. While this might\n>> *seem* more complicated a procedure than configurable LOT, here are four\n>> reasons why it may be simpler (and safer) to just do a fresh release:\n> \n> Users may indeed, fire the devs and replace them, as this implies.  This\n> is not empowering users, but in effect risks reducing their role to \"beg\n> the devs or beg the miners\".\n> \n>> A. No time-based consensus sensitivity on when LOT must be set (e.g., what\n>> happens if mid final signal period users decide to set LOT? Do all users\n>> set it at the same time? Or different times and end up causing nodes to ban\n>> each other for various reasons?)\n> \n> Yes, this Schelling point is important.  If you read BIP-8, you will see\n> that LOT=true activates at the last moment for this very reason.\n> \n>> B. No \"missed window\" if users don't coordinate on setting LOT before the\n>> final period -- release whenever ready.\n> \n> Of course there is: they need to upgrade in time.\n> \n>> C. ST fails fast, permitting users ample time to prepare an alternative\n>> release\n> \n> You'd think so, but given the confusion surrounding Segwit, it seems a\n> year was barely time to debate, decide and coordinate.  You want this\n> ready to go at the *beginning* of the 1 year process, not being decided,\n> debated, build and deployed once the crisis is upon us.  That existing\n> deployment is a vital stake in the calculus of those who might try to\n> disrupt the process for any reason.\n> \n>> D. If miners continue to mine without signalling, and users abandon a\n>> LOT=true setting, their node will have already marked those blocks invalid\n>> and they will need to figure out how to re-validate the block.\n> \n> This is true, in fact, of any soft fork: a Luke points out, our lack of\n> revalidation of blocks after upgrade is a bug.  Which should be fixed:\n> IMHO a decent PR to make LOT runtime configurable would reevaluate any\n> blocks >= timeoutheight-2016 when it is altered.\n> \n>> RE: point 3, is it as easy as it *could* be? No, but I don't have any\n>> genius ideas on how to make it easier either. (Note that I've previously\n>> argued for adding configurable LOT=true on the basis that a user-run script\n>> could emulate LOT without any software change as a harm reduction, but I\n>> did not advocate that particular technique be formalized as a part of the\n>> activation process)\n> \n> BIP-8 (with the recent modifications to allow maximal number of\n> non-signalling blocks) is technically as fork-preventative as we can\n> seek to make it.\n> \n> I am hopeful that our ecosystem will remain harmonious and we won't have\n> to use it.  But I am significantly more hopeful that we won't have to\n> use it if we have it deployed and ready.\n> \n> Cheers,\n> Rusty.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            }
        ],
        "thread_summary": {
            "title": "Response to Rusty Russell from Github",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Matt Corallo"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 8669
        }
    },
    {
        "title": "[bitcoin-dev] Update on \"Speedy\" Trial",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2021-04-06T13:36:05",
                "message_text_only": "(The email last week was an April Fools. I did my best to make light of the\nsituation...)\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018724.html\n\nI'd like to give the list an update on where we are with Speedy Trial\nbecause it is just as absurd as it looks to an outside observer. As a\nreminder of the timeline:\n\nFebruary 2nd: Community meeting (100+ attendees including Core\ncontributors) where there was broad consensus that BIP 9 was \"dead\" in\nfavor of BIP 8. BIP 8 (which uses block heights) was revised to be a BIP 9\nreplacement.\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018379.html\n\nMarch 6th: With no clear community consensus on whether the LOT parameter\nshould be set to true or false in BIP 8, Russell O'Connor proposed \"Speedy\nTrial\". Taking an excerpt from David Harding's mailing list post \"Speedy\nTrial is a way to generate fast progress\" and can \"fail fast\".\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-March/018583.html\n\nApril 6th: There are two open PRs in Bitcoin Core. PR #21377 from AJ Towns\nwhich attempts to bring BIP 9 back to life and use MTP over block height\nbecause MTP is better for test networks. (Apparently mainnet is a test\nnetwork for testnet and signet these days) And PR #21392 from Andrew Chow\nwhich uses BIP 8 and block height as discussed in those first community\nmeetings. BIP 8 has been revised to incorporate Speedy Trial while BIP 9\nhasn't.\n\nI think we are fast approaching a time where we are in exactly the same\nsituation as we were with the LOT parameter. Bitcoin Core is unable to\nmerge anything because of limited opposition to using block height of all\nthings.\n\nI do encourage everyone to look at this and understand which individuals\nare making this situation absurd. They will most likely be the same\nindividuals that decry the dangers of a future UASF having made \"Speedy\"\nTrial a total oxymoron.\n\nI won't be attending the meeting later, I'd rather pull teeth. If people\nare in agreement with me on no further progress being possible in Core I\nthink we will need to restart the UASF discussions. Luke warned that these\nkinds of shenanigans could happen but I really lacked imagination on the\ntricks some people could pull.\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210406/6352f8e2/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Update on \"Speedy\" Trial",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Michael Folkson"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2561
        }
    },
    {
        "title": "[bitcoin-dev] Taproot Activation Meeting Notes, April 6th: The CoinFlip",
        "thread_messages": [
            {
                "author": "Jeremy",
                "date": "2021-04-06T21:31:31",
                "message_text_only": "Bitcoin Developers,\n\nThe second fortnightly taproot activation meeting has just concluded. Below\nare my notes:\n\n1) On AJ's mods to MTP\n   - luke-jr is still NACK any MTP related thing\n   - It is generally uncontested that the Mods are fine; that it should be\nLOT (via LAST_CHANCE) compatible\n   - it does make MTP a bit harder to review, but not unacceptably so\n2) On selecting between MTP and Height\n   - There are some benefits to MTPs\n   - There are some benefits to Heights\n   - Both are technically probably OK to use for Taproot\n   - Both about as hard/easy to review (some think height has fewer edge\nconditions)\n   - AJ and Andrew Chow are going to see if they can unify approaches\n3) Timeline + CoinFlip\n   - Many present at the meeting preferred to work together to compromise\nand reach consensus to stick to the timeline from the last meeting over\neither height or MTP.\n   - as such a coinflip is being run via `bitcoin-cli getblockhash\n$((678059+20)) | cut -b64 | grep -q '[02468ace]' && echo MTP || echo\nheight` (that's about 13 blocks from writing).\n   - If it comes up MTP, contributors mentioned below will work towards\nmoving MTP forwards.\n   - If it comes up height, contributors mentioned below will work towards\nmoving height forwards.\n   - You can pre-commit to following this path by responding in the next\nhour or so, or also choose to abide by it async\n   - If in the next day or so, AJ and Andrew Chow reach a compromise\nbetween approaches that is compatible with the timeline of getting to a RC1\nwith deployment, then that can be considered on its merits in preference of\neither of the existing approaches.\n    - If this approach fails at helping move towards consensus on an\napproach, then we will have to push back the timeline most likely for a\ncore release (or an emergent group will have to offer a community release)\n\nThe following folks in the meeting agreed to abide by the flip:\n\n- roasbeef\n- benthecarman\n- harding\n- jonatack\n- rgrant\n- copumpkin (in DM)\n- Emcy\n- jeremyrubin\n\nThere were also several folks, anonymously, who said essentially that they\ndon't want to commit to a flip but if it works it works and they'd roll\nwith it.\n\nAs noted, if you want to +1 on to coinflip before it settles, feel free to\ndo in response here or IRC. It's also fine to just abide by it after the\nfact as well.\n\n------------------\n\nPersonal comment on coin flip: A coinflip seems like an odd choice for a\ntechnical decision. But let me excerpt some quotes from the meeting.\n\n[4/6/21 12:26] <jeremyrubin> We are super lucky that both achow101 and aj\nare such competent developers that we have not one but two fantastic PRs to\nlook at\n[4/6/21 12:26] <jeremyrubin> At the same time, we have two PRs to look at\n[4/6/21 12:28] <jeremyrubin> In this section I'd like to remind people to\ncheck dug-in opinions at the door, what matters here is if we can agree on\na plan of action and get the bulk of everyone on the same page. That said,\nthere are nuanced technical points to examine that favour either approach\n[4/6/21 12:28] <jeremyrubin> I think the differences between MTP and height\nare less important than working towards a single PR to review\n\n[4/6/21 13:09] <harding> I think both MTP and heights are fine for mainnet,\nso one of them having an advantage for test networks seems worth\nconsidering.\n\n[4/6/21 13:09] <rgrant> This topic seems to be winding down.  I'm hearing:\nthat signet configuration isn't a dealbreaker but there is technical debt\nincurred if we ignore it; MTP-based activation (read: celebration parties)\ncan be known weeks in advance if parameters are chosen well; and that code\nreviews matter.  Coinflip seems to be winning.\n\n[4/6/21 13:45] <jeremyrubin> people selecting coinflip because they think\nthe interest in timeline outweighs any individual perceived technical\nbenefit\n[4/6/21 13:45] <jeremyrubin> it's not a don't care, it's a recognition\nthere are two decent proposals with different tradeoffs\n[4/6/21 13:45] <jeremyrubin> and a desire to break stalemate on it mutually\nand voluntarily\n\n[4/6/21 13:49] <copumpkin> IMO coinflip is more of an acknowledgment that\nthe two CRs differ largely in shed color and that we all want the shed, and\ndon't care as much about its color\n[4/6/21 13:49] <BlueMatt> what copumpkin said\n[4/6/21 13:50] <copumpkin> (not to minimize the differences between them,\nbut gotta keep the big picture in mind and not die on hills that don't need\ndead people on them)\n\nWe have two good options, and coinflip is people agreeing to put aside\nminute preferences on two acceptable options for the big picture. As such,\nI think that a coinflip is appropriately used in this circumstance,\nalthough I recognize the sentiment that some may feel it's treating\ndevelopment a little too *flippantly*.\n\nRough consensus and running code.\n\nBest,\n\nJeremy\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210406/2fc04b53/attachment-0001.html>"
            },
            {
                "author": "Jeremy",
                "date": "2021-04-07T00:02:35",
                "message_text_only": "Update: the coin has flipped in favor of MTP\n\nhttps://blockstream.info/block/00000000000000000000a6bcbf09849fe895b5d18ed884e8d558a57fc4f5e95c\n\n\nFurther, there seems to be some agreement between Andrew and AJ w.r.t.\nreverting one of the changes AJ made recently (\nhttps://github.com/bitcoin/bitcoin/pull/21377#issuecomment-814494847),\nresolving some of the contention between them for a MTP-based ST.\n\nAs such, I'm personally confident that if you want to spend your time\nreviewing #21377, it has a very decent chance of accumulating sufficient\nreview and support from the community to be considered for a release in\naccordance to the schedule from the last meeting. The changes in line with\nAndrew and AJ's compromise are yet to be implemented, but they do not seem\nto be complicated so you can probably expect AJ will implement and offer\nthem for review shortly (AJ if you're going on spring break let us know and\nwe can pick it up...).\n\nThanks to everyone and especially thanks to AJ and Andrew for all the hard\nwork they have put in preparing and evaluating these ideas. To outside\nlooking in, it might seem like there is contention between the two, but\nthey've been working together closely the whole time reviewing each other's\nPRs and making tools and tests that make the whole thing safer anyways.\nLet's all take a note from their book!\n\nBest,\n\nJeremy\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n\n\nOn Tue, Apr 6, 2021 at 2:31 PM Jeremy <jlrubin at mit.edu> wrote:\n\n> Bitcoin Developers,\n>\n> The second fortnightly taproot activation meeting has just concluded.\n> Below are my notes:\n>\n> 1) On AJ's mods to MTP\n>    - luke-jr is still NACK any MTP related thing\n>    - It is generally uncontested that the Mods are fine; that it should be\n> LOT (via LAST_CHANCE) compatible\n>    - it does make MTP a bit harder to review, but not unacceptably so\n> 2) On selecting between MTP and Height\n>    - There are some benefits to MTPs\n>    - There are some benefits to Heights\n>    - Both are technically probably OK to use for Taproot\n>    - Both about as hard/easy to review (some think height has fewer edge\n> conditions)\n>    - AJ and Andrew Chow are going to see if they can unify approaches\n> 3) Timeline + CoinFlip\n>    - Many present at the meeting preferred to work together to compromise\n> and reach consensus to stick to the timeline from the last meeting over\n> either height or MTP.\n>    - as such a coinflip is being run via `bitcoin-cli getblockhash\n> $((678059+20)) | cut -b64 | grep -q '[02468ace]' && echo MTP || echo\n> height` (that's about 13 blocks from writing).\n>    - If it comes up MTP, contributors mentioned below will work towards\n> moving MTP forwards.\n>    - If it comes up height, contributors mentioned below will work towards\n> moving height forwards.\n>    - You can pre-commit to following this path by responding in the next\n> hour or so, or also choose to abide by it async\n>    - If in the next day or so, AJ and Andrew Chow reach a compromise\n> between approaches that is compatible with the timeline of getting to a RC1\n> with deployment, then that can be considered on its merits in preference of\n> either of the existing approaches.\n>     - If this approach fails at helping move towards consensus on an\n> approach, then we will have to push back the timeline most likely for a\n> core release (or an emergent group will have to offer a community release)\n>\n> The following folks in the meeting agreed to abide by the flip:\n>\n> - roasbeef\n> - benthecarman\n> - harding\n> - jonatack\n> - rgrant\n> - copumpkin (in DM)\n> - Emcy\n> - jeremyrubin\n>\n> There were also several folks, anonymously, who said essentially that they\n> don't want to commit to a flip but if it works it works and they'd roll\n> with it.\n>\n> As noted, if you want to +1 on to coinflip before it settles, feel free to\n> do in response here or IRC. It's also fine to just abide by it after the\n> fact as well.\n>\n> ------------------\n>\n> Personal comment on coin flip: A coinflip seems like an odd choice for a\n> technical decision. But let me excerpt some quotes from the meeting.\n>\n> [4/6/21 12:26] <jeremyrubin> We are super lucky that both achow101 and aj\n> are such competent developers that we have not one but two fantastic PRs to\n> look at\n> [4/6/21 12:26] <jeremyrubin> At the same time, we have two PRs to look at\n> [4/6/21 12:28] <jeremyrubin> In this section I'd like to remind people to\n> check dug-in opinions at the door, what matters here is if we can agree on\n> a plan of action and get the bulk of everyone on the same page. That said,\n> there are nuanced technical points to examine that favour either approach\n> [4/6/21 12:28] <jeremyrubin> I think the differences between MTP and\n> height are less important than working towards a single PR to review\n>\n> [4/6/21 13:09] <harding> I think both MTP and heights are fine for\n> mainnet, so one of them having an advantage for test networks seems worth\n> considering.\n>\n> [4/6/21 13:09] <rgrant> This topic seems to be winding down.  I'm hearing:\n> that signet configuration isn't a dealbreaker but there is technical debt\n> incurred if we ignore it; MTP-based activation (read: celebration parties)\n> can be known weeks in advance if parameters are chosen well; and that code\n> reviews matter.  Coinflip seems to be winning.\n>\n> [4/6/21 13:45] <jeremyrubin> people selecting coinflip because they think\n> the interest in timeline outweighs any individual perceived technical\n> benefit\n> [4/6/21 13:45] <jeremyrubin> it's not a don't care, it's a recognition\n> there are two decent proposals with different tradeoffs\n> [4/6/21 13:45] <jeremyrubin> and a desire to break stalemate on it\n> mutually and voluntarily\n>\n> [4/6/21 13:49] <copumpkin> IMO coinflip is more of an acknowledgment that\n> the two CRs differ largely in shed color and that we all want the shed, and\n> don't care as much about its color\n> [4/6/21 13:49] <BlueMatt> what copumpkin said\n> [4/6/21 13:50] <copumpkin> (not to minimize the differences between them,\n> but gotta keep the big picture in mind and not die on hills that don't need\n> dead people on them)\n>\n> We have two good options, and coinflip is people agreeing to put aside\n> minute preferences on two acceptable options for the big picture. As such,\n> I think that a coinflip is appropriately used in this circumstance,\n> although I recognize the sentiment that some may feel it's treating\n> development a little too *flippantly*.\n>\n> Rough consensus and running code.\n>\n> Best,\n>\n> Jeremy\n>\n> --\n> @JeremyRubin <https://twitter.com/JeremyRubin>\n> <https://twitter.com/JeremyRubin>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210406/b0126d20/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Taproot Activation Meeting Notes, April 6th: The CoinFlip",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeremy"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 11895
        }
    },
    {
        "title": "[bitcoin-dev] Prediction Markets and Bitcoin",
        "thread_messages": [
            {
                "author": "Prayank",
                "date": "2021-04-07T19:07:45",
                "message_text_only": "Positives:\n\nYou need money to participate even though your position size may not matter if really small based on liquidity and volume.\nUseful information if looking at overall sentiments especially traders\nNoise filter because its not same as trolling on social media\nOpportunity for some people to make money\nEntertainment and something new to discuss or confirm bias\n\nNegatives:\n\nYou need money to participate. \"Full nodes enforce consensus rules\" becomes a meme. Full nodes will still enforce consensus rules but some full nodes are being influenced by people with money which can be anything not necessarily bitcoin.\nInformation that may not be useful for everyone.\nThe exchanges who have created such markets in past and the traders involved know how to manipulate illiquid markets at least for a short time period. And sometimes \"markets can remain irrational longer than you can remain solvent\".\u00a0\nIf such markets affect Bitcoin development in any way, it will be great opportunity for governments to attack Bitcoin. Example: Consider we have a soft fork or hard fork for confidential transaction on-chain in future, if someone is able to find a secure way to implement it. All the governments that love to spy will have some issues with it and won't be the first time if they participate in such markets indirectly to manipulate or start some investigation against exchanges involved or something else.\nFocus which should have been on improving Bitcoin will now shift to futures markets and their involvement in Bitcoin.\n\nI think prediction markets or such tokens might help in adding to the information we already have however they don't decide or replace anything. Bitcoin development should impact such markets and not the other way around.\u00a0 Nobody can stop markets from betting on something related to Bitcoin and it can even be done using P2P exchanges like HodlHodl: https://predictions.hodlhodl.com\u00a0or create something new with oracles which can be implemented using DLC:\u00a0https://github.com/discreetlogcontracts/dlcspecs\u00a0\n\nNot everyone is a trader or interested to take risk in such markets even if a Bitcoin user from years, lot of transactions, contributions and some opinion on Taproot based on things that are publicly available to everyone but scattered. In past we had things that made some sense for prediction markets like 2x and Bcash but right now nobody has issues with Taproot and even the best traders won't be aware of all the technical details about Bitcoin development to predict something related to activation mechanism.\u00a0\n\nIf the point of using prediction markets is to filter noise or spam then maybe we can have one chatroom that requires some sats to enter and pay some sats for each post. We will have better information here and sats can be used to donate to devs who review PRs related to Taproot.\u00a0\n-- \n Prayank\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210407/92259e3c/attachment.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2021-04-16T03:39:27",
                "message_text_only": "Good morning Prayank,\n\n\n> I think prediction markets or such tokens might help in adding to the information we already have however they don't decide or replace anything. Bitcoin development should impact such markets and not the other way around.\u00a0\n\n\"Human behavior is economic behavior. The particulars may vary, but competition for limited resources remains a constant. Need as well as greed have followed us to the stars, and the rewards of wealth still await those wise enough to recognize this deep thrumming of our common pulse. \" -- CEO Nwabudike Morgan, \"The Centauri Monopoly\", *Sid Meier's Alpha Centauri*\n\nThis is the tension between the necessary freedom of discovering strange new techniques, and the exigencies of life, where every joule of negentropy is a carefully measured resource.\n\nOf course development must be free to do what is best technically, and to experiment and see what other techniques are possible or workable.\nThus the market must follow development.\n\nOf course the people ultimately funding the development must impose what direction that development goes to, after all, it is their money that is being modified.\nThus development must follow the market.\n\nIt is the negotiation of the two that is difficult.\n\nOverall, I think a lot of the developer arguments are reasonably clear --- what is unclear is what the market wants, thus I think prediction markets are something that are needed in order for the negotiation between these two aspects to advance.\n\nRegards,\nZmnSCPxj"
            }
        ],
        "thread_summary": {
            "title": "Prediction Markets and Bitcoin",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "ZmnSCPxj",
                "Prayank"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 4537
        }
    },
    {
        "title": "[bitcoin-dev] Update on \"Speedy\" Trial: The circus rolls on",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2021-04-08T11:40:42",
                "message_text_only": "I will continue to update the list on the latest developments as I see\nthem. That's all I can do.\n\nSo the latest circus act is apparently a technical decision made by a\ncoin toss. The rationale being that this discussion on using block\nheight vs a mix of block height and MTP was bikeshedding all along.\n\nHere's a short abridged timeline on the views on block height vs MTP\nof the organizer (Jeremy Rubin) of that coin toss:\n\nMarch 8th: \"I have a preference for fully height based design,\ncorrect.\" https://github.com/bitcoin/bitcoin/pull/21377#issuecomment-802396191\n\nMarch 24th: \"There are two NACKs, one (luke-jr) against MTP, one\n(jeremyrubin) against height.\u201d\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-March/018715.html\n\nApril 6th: \"The following folks in the meeting agreed to abide by the\nflip.... jeremyrubin\"\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018742.html\n\nApril 7th: \"So @achow101 is correct that it is not the coin flip which\nmade the decision.\"\nhttps://github.com/bitcoin/bitcoin/pull/21393#issuecomment-815388126\n\nPlease note on March 24th the only person NACKing block height in that\nmeeting was Jeremy Rubin. He has gone from preferring block height, to\nNACKing block height, to thinking this discussion all along was\nbikeshedding and worthy of a coin flip to admitting the coin flip was\ntheater.\n\nAll of this makes me extremely uncomfortable and I dread to think what\nindividuals and businesses all over the world who have plans to\nutilize and build on Taproot are making of all of this. As an\nindividual I would like to distance myself from this circus. I will\ntry to keep the mailing list informed though of further developments\nre Speedy Trial in Core or progress on an alternative client.\n\nThere are two StackExchange answers here on block height vs MTP, one\nby David Harding and one by myself for those that are interested in\nthe technical considerations.\nhttps://bitcoin.stackexchange.com/questions/103854/should-block-height-or-mtp-or-a-mixture-of-both-be-used-in-a-soft-fork-activatio\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3"
            },
            {
                "author": "Andrew Poelstra",
                "date": "2021-04-08T14:30:05",
                "message_text_only": "On Thu, Apr 08, 2021 at 12:40:42PM +0100, Michael Folkson via bitcoin-dev wrote:\n> \n> All of this makes me extremely uncomfortable and I dread to think what\n> individuals and businesses all over the world who have plans to\n> utilize and build on Taproot are making of all of this. As an\n> individual I would like to distance myself from this circus. I will\n> try to keep the mailing list informed though of further developments\n> re Speedy Trial in Core or progress on an alternative client.\n>\n\nThank you for your updates.\n\n\nFor what it's worth, as somebody who wants to use Taproot I don't care *at\nall* about activation parameters, and I especially don't care about block\nheight vs MTP.\n\nIf a coin toss is what it takes for people to move past this that's fine\nby me.\n\n\n \n-- \nAndrew Poelstra\nDirector of Research, Blockstream\nEmail: apoelstra at wpsoftware.net\nWeb:   https://www.wpsoftware.net/andrew\n\nThe sun is always shining in space\n    -Justin Lewis-Webster"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-04-08T15:18:33",
                "message_text_only": "Probably worth noting, but while the coin toss was acceptable to many people as \"who cares, just move on\", the two \nauthors of actual code for the two proposals here also came to an agreement on a way forward, so its not like it was a \n\"coin toss to overrule everyone on 'the other side'\".\n\nOn 4/8/21 10:30, Andrew Poelstra via bitcoin-dev wrote:\n> On Thu, Apr 08, 2021 at 12:40:42PM +0100, Michael Folkson via bitcoin-dev wrote:\n>>\n>> All of this makes me extremely uncomfortable and I dread to think what\n>> individuals and businesses all over the world who have plans to\n>> utilize and build on Taproot are making of all of this. As an\n>> individual I would like to distance myself from this circus. I will\n>> try to keep the mailing list informed though of further developments\n>> re Speedy Trial in Core or progress on an alternative client.\n>>\n> \n> Thank you for your updates.\n> \n> \n> For what it's worth, as somebody who wants to use Taproot I don't care *at\n> all* about activation parameters, and I especially don't care about block\n> height vs MTP.\n> \n> If a coin toss is what it takes for people to move past this that's fine\n> by me.\n> \n> \n>   \n>"
            },
            {
                "author": "David A. Harding",
                "date": "2021-04-08T21:56:05",
                "message_text_only": "On Thu, Apr 08, 2021 at 12:40:42PM +0100, Michael Folkson via bitcoin-dev wrote:\n> So the latest circus act is apparently a technical decision made by a\n> coin toss [organized by] Jeremy Rubin\n\nActually, the coin toss was my idea[1], used a bash oneliner I wrote[2],\nand is the same method I've been using in Bitcoin-related discussions\nfor over seven years[3] to help people transition from ancillary arguments\nback to working on the things they really think are important.\n\nI proposed the coin toss because I understood that both the MTP and the\nheight approaches required tradeoffs that were, to a certain degree,\nunresolvable to the best of our current knowledge.  MTP is harder to\nanalyze for unexpected edge cases; heights would create extra work for\nseasoned developers working on post-taproot soft forks.  MTP would\nrequire developers of currently-planned UASF software either do extra\nwork or wait to release their software; heights don't guarantee a\nminimum amount of time for a large number of economic full nodes to\nupgrade.\n\nDifferent people gave different weights to the different tradeoffs.  In\ncases like this where there's no known way to eliminate the tradeoffs\nand no way to objectively rank them, I think it's better to begin\nworking on something concrete than it is to try to persuade everyone to\nadopt the same subjective ranking of the tradeoffs---or, as the IETF\npublished in RFC7282:\n\n    \"There are times where the result of [an informal open-ended\n    conversation] is a pretty even split.  In practical terms, that\n    means it doesn't matter where the chair starts the discussion.  And\n    in fact, we've had working groups where a coin flip decided which\n    proposal to start with.  That doesn't mean that the coin flip\n    determined the outcome; if a fatal technical flaw was found in the\n    solution that won the coin flip, it is still incumbent upon the\n    group to address the issue raised or abandon that solution and find\n    another.  Rough consensus on the technical points, in the end, is\n    always required.  Any way to find a place to start, be it the hum or\n    the coin flip, is only getting to the beginning of the discussion,\n    not the end.\"\n\nAs Jeremy wrote, in this occassion, we didn't actually need the coin\ntoss.  The authors of the two PRs we were considering found a compromise\nsolution that seems to be good enough for both of them and which so far\nseems to be good enough for the handful of people who agreed to the coin\ntoss (plus, it seems, several others who didn't agree to the toss).\n\nIn short, I think the coin toss was a good attempt.  Although we didn't\nuse its results this time, I think it's something we should keep in our\ntoolkit for the future when a group of people want to coordinate their\nwork on getting *a* solution released, even in cases where they don't\nnecessarily start out in agreement about which solution is best.\n\n> I dread to think what individuals and businesses all over the world\n> who have plans to utilize and build on Taproot are making of all of\n> this. \n\nGeeks arguing over minutia is a well established stereotype.  That we've\nconformed to that stereotype in this case is not great---but I don't\nthink it does us any significant reputational harm.  I hope those\nindividuals and businesses awaiting taproot are discerning enough to\nrealize that the method we use to activate taproot has nothing to do\nwith taproot itself.  I hope they realize that it remains the case that\nthere is nearly universal support for taproot from every entity that has\nso far commented on it.\n\nHopefully we've made progress on Speedy Trial this week, that progress\nwill continue and we'll be able to release activation-ready software\nsoon, miners will be willing to signal for taproot, and we'll soon be\nable to end this chapter in Bitcoin's storied history of soft fork\nactivations.[4]  (But I look forward to continued discussion about\nbetter activation mechanisms for the future---if taproot locks in\nquickly, I'd love to see human consensus form around a follow-up\ndeployment even before taproot reaches activation.)\n\nRespectfully,\n\n-Dave\n\n[1] http://gnusha.org/taproot-activation/2021-04-04.log \"<harding> [...]\nIf that's not our goal and we just want to give miners a chance to\nactivate taproot as soon as possible (which was certainly my original\nobjective in supporting ST), I'm personally happy with either MTP or\nheights, and I'd be willing to join others in putting my effort behind\njust one of them based on fair random chance.\"\n\n[2] http://gnusha.org/taproot-activation/2021-04-04.log \"18:09 <\nharding> e.g.:   bitcoin-cli getblockhash 123456 | cut -b64 | grep -q\n'[02468ace]' && echo MTP || echo height\"\n\n[3] E.g.,\nhttps://github.com/bitcoin-dot-org/Bitcoin.org/pull/589#discussion_r18314009\nand https://github.com/bitcoin-dot-org/Bitcoin.org/pull/566#issuecomment-56281595\n\n[4] https://bitcoinops.org/en/topics/soft-fork-activation/\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210408/4ab23028/attachment.sig>"
            },
            {
                "author": "Michael Folkson",
                "date": "2021-04-09T11:19:02",
                "message_text_only": "I have no problem with coin tosses to decide for example shed colors\n(an illustrative example discussed by copumpkin, roasbeef on IRC). In\nthis kind of example everyone should recognize it doesn't matter and\nApproach ACK two competing PRs. No one should be NACKing or Approach\nNACKing a PR based on shed color. If the maintainers don't care about\nthe shed color either then they are free to use a coin toss to decide\nwhich PR to merge. In this example there shouldn't be any NACKs,\nApproach NACKs or technical opposition from regular Core reviewers.\nNACKs are not meant to be used for shed colors.\n\nHowever, in this example the organizer of the coin toss had previously\nNACKed one of the options (block height, though his position seems to\nchange by the day) and others have NACKed MTP. I think you have\nconsistently said it doesn't matter too much although you did\npreviously express a preference for block height.\n\nI don't want to belabor the point but can we avoid even suggesting\nusing coin tosses on consensus code decisions in future please? It\nmakes a mockery of those who spent time understanding the technical\nconsiderations and have spent months or years working on soft fork\nactivations. Even in the shed color example, leave it to the\nmaintainers to decide whether a coin toss is appropriate rather than\ncreating a circus around a coin toss in a public meeting where the PR\nauthors weren't present and no Core maintainers were present.\n\nI understand the frustration and I understand the desire to break\ndeadlocks. But if the coin toss organizer hadn't previously NACKed one\nof the options (block height) we may have avoided getting into this\ndeadlock in the first place.\n\nYour recent review notes of PR #21377 look great and are proving very\nhelpful to me as I look at the PR.\nhttps://gist.github.com/harding/e622323eaf80d620826a7cb74ab3fb40\n\nThanks\nMichael\n\nOn Thu, Apr 8, 2021 at 10:57 PM David A. Harding <dave at dtrt.org> wrote:\n>\n> On Thu, Apr 08, 2021 at 12:40:42PM +0100, Michael Folkson via bitcoin-dev wrote:\n> > So the latest circus act is apparently a technical decision made by a\n> > coin toss [organized by] Jeremy Rubin\n>\n> Actually, the coin toss was my idea[1], used a bash oneliner I wrote[2],\n> and is the same method I've been using in Bitcoin-related discussions\n> for over seven years[3] to help people transition from ancillary arguments\n> back to working on the things they really think are important.\n>\n> I proposed the coin toss because I understood that both the MTP and the\n> height approaches required tradeoffs that were, to a certain degree,\n> unresolvable to the best of our current knowledge.  MTP is harder to\n> analyze for unexpected edge cases; heights would create extra work for\n> seasoned developers working on post-taproot soft forks.  MTP would\n> require developers of currently-planned UASF software either do extra\n> work or wait to release their software; heights don't guarantee a\n> minimum amount of time for a large number of economic full nodes to\n> upgrade.\n>\n> Different people gave different weights to the different tradeoffs.  In\n> cases like this where there's no known way to eliminate the tradeoffs\n> and no way to objectively rank them, I think it's better to begin\n> working on something concrete than it is to try to persuade everyone to\n> adopt the same subjective ranking of the tradeoffs---or, as the IETF\n> published in RFC7282:\n>\n>     \"There are times where the result of [an informal open-ended\n>     conversation] is a pretty even split.  In practical terms, that\n>     means it doesn't matter where the chair starts the discussion.  And\n>     in fact, we've had working groups where a coin flip decided which\n>     proposal to start with.  That doesn't mean that the coin flip\n>     determined the outcome; if a fatal technical flaw was found in the\n>     solution that won the coin flip, it is still incumbent upon the\n>     group to address the issue raised or abandon that solution and find\n>     another.  Rough consensus on the technical points, in the end, is\n>     always required.  Any way to find a place to start, be it the hum or\n>     the coin flip, is only getting to the beginning of the discussion,\n>     not the end.\"\n>\n> As Jeremy wrote, in this occassion, we didn't actually need the coin\n> toss.  The authors of the two PRs we were considering found a compromise\n> solution that seems to be good enough for both of them and which so far\n> seems to be good enough for the handful of people who agreed to the coin\n> toss (plus, it seems, several others who didn't agree to the toss).\n>\n> In short, I think the coin toss was a good attempt.  Although we didn't\n> use its results this time, I think it's something we should keep in our\n> toolkit for the future when a group of people want to coordinate their\n> work on getting *a* solution released, even in cases where they don't\n> necessarily start out in agreement about which solution is best.\n>\n> > I dread to think what individuals and businesses all over the world\n> > who have plans to utilize and build on Taproot are making of all of\n> > this.\n>\n> Geeks arguing over minutia is a well established stereotype.  That we've\n> conformed to that stereotype in this case is not great---but I don't\n> think it does us any significant reputational harm.  I hope those\n> individuals and businesses awaiting taproot are discerning enough to\n> realize that the method we use to activate taproot has nothing to do\n> with taproot itself.  I hope they realize that it remains the case that\n> there is nearly universal support for taproot from every entity that has\n> so far commented on it.\n>\n> Hopefully we've made progress on Speedy Trial this week, that progress\n> will continue and we'll be able to release activation-ready software\n> soon, miners will be willing to signal for taproot, and we'll soon be\n> able to end this chapter in Bitcoin's storied history of soft fork\n> activations.[4]  (But I look forward to continued discussion about\n> better activation mechanisms for the future---if taproot locks in\n> quickly, I'd love to see human consensus form around a follow-up\n> deployment even before taproot reaches activation.)\n>\n> Respectfully,\n>\n> -Dave\n>\n> [1] http://gnusha.org/taproot-activation/2021-04-04.log \"<harding> [...]\n> If that's not our goal and we just want to give miners a chance to\n> activate taproot as soon as possible (which was certainly my original\n> objective in supporting ST), I'm personally happy with either MTP or\n> heights, and I'd be willing to join others in putting my effort behind\n> just one of them based on fair random chance.\"\n>\n> [2] http://gnusha.org/taproot-activation/2021-04-04.log \"18:09 <\n> harding> e.g.:   bitcoin-cli getblockhash 123456 | cut -b64 | grep -q\n> '[02468ace]' && echo MTP || echo height\"\n>\n> [3] E.g.,\n> https://github.com/bitcoin-dot-org/Bitcoin.org/pull/589#discussion_r18314009\n> and https://github.com/bitcoin-dot-org/Bitcoin.org/pull/566#issuecomment-56281595\n>\n> [4] https://bitcoinops.org/en/topics/soft-fork-activation/\n\n\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3"
            },
            {
                "author": "Michael Folkson",
                "date": "2021-04-10T12:07:40",
                "message_text_only": "In my previous email in response to David Harding I said:\n\"I think you have consistently said it doesn't matter too much\nalthough you did previously express a preference for block height.\"\n\nThis was based on:\n\"My preference would be for whatever solution is most preferred by\nreviewers.\" March 7th\nhttps://github.com/bitcoin/bitcoin/pull/21377#issuecomment-792220340\n\nWith a greater number of PR comments preferring block height at this\npoint I concluded that this equated to a preference for block height.\nI'm happy to correct my previous statement having spoken to David.\nThis did not equate to a preference and David was entirely neutral.\n\nFor the sake of the mailing list (even though David didn't do so)\nexpressing preferences on a PR is absolutely fine. It is fine to say\n\"This is my preference\" without NACKing a PR or NACKing a technical\ndecision. I (and many others) have done this. Maintainers can look\nthrough the PR, read the rationales for the preferences and still\nconsider merging the PR. However, well reasoned NACKs (e.g. Concept,\nApproach NACKs) make it difficult for maintainers to merge a PR\nespecially if they are from long term contributors. If you oscillate\nfrom a preference one way to a full on NACK the other way to \"Let's\ncoin flip it\" with minimal rationale you are making maintainers' jobs\neven more difficult. You are also wasting the time of reviewers who\ndon't know which PR to review and which PR stands a better chance of\nbeing merged. You are also (unintentionally) increasing the risk of\nbugs not being caught because the PR that eventually gets merged\nhasn't received the review it could have.\n\nI have been criticized on IRC for the tone of my emails. To be clear I\ntake Taproot activation seriously, I take the Core review process\nseriously and I take keeping the community informed of the likely\ntimetable seriously. I'm not impressed by people wasting my time and\nI'm doubly not impressed by people wasting other Core reviewers' time\nand maintainers' time. If that informs my tone so be it. This is not\ndirected towards David who has worked hard to make progress with\nTaproot activation, hasn't wasted anyone's time and I have a huge\namount of respect for.\n\nIn terms of the latest state of play with Core, there is an open Core\nPR for Speedy Trial (#21377) that appears to be our best chance of\ngetting activation code merged into Core. The more testing and code\nreview this Core PR receives the better. If it continues to make\nprogress the discussion will then need to move onto a timetable.\n\nOn Fri, Apr 9, 2021 at 12:19 PM Michael Folkson\n<michaelfolkson at gmail.com> wrote:\n>\n> I have no problem with coin tosses to decide for example shed colors\n> (an illustrative example discussed by copumpkin, roasbeef on IRC). In\n> this kind of example everyone should recognize it doesn't matter and\n> Approach ACK two competing PRs. No one should be NACKing or Approach\n> NACKing a PR based on shed color. If the maintainers don't care about\n> the shed color either then they are free to use a coin toss to decide\n> which PR to merge. In this example there shouldn't be any NACKs,\n> Approach NACKs or technical opposition from regular Core reviewers.\n> NACKs are not meant to be used for shed colors.\n>\n> However, in this example the organizer of the coin toss had previously\n> NACKed one of the options (block height, though his position seems to\n> change by the day) and others have NACKed MTP. I think you have\n> consistently said it doesn't matter too much although you did\n> previously express a preference for block height.\n>\n> I don't want to belabor the point but can we avoid even suggesting\n> using coin tosses on consensus code decisions in future please? It\n> makes a mockery of those who spent time understanding the technical\n> considerations and have spent months or years working on soft fork\n> activations. Even in the shed color example, leave it to the\n> maintainers to decide whether a coin toss is appropriate rather than\n> creating a circus around a coin toss in a public meeting where the PR\n> authors weren't present and no Core maintainers were present.\n>\n> I understand the frustration and I understand the desire to break\n> deadlocks. But if the coin toss organizer hadn't previously NACKed one\n> of the options (block height) we may have avoided getting into this\n> deadlock in the first place.\n>\n> Your recent review notes of PR #21377 look great and are proving very\n> helpful to me as I look at the PR.\n> https://gist.github.com/harding/e622323eaf80d620826a7cb74ab3fb40\n>\n> Thanks\n> Michael\n>\n> On Thu, Apr 8, 2021 at 10:57 PM David A. Harding <dave at dtrt.org> wrote:\n> >\n> > On Thu, Apr 08, 2021 at 12:40:42PM +0100, Michael Folkson via bitcoin-dev wrote:\n> > > So the latest circus act is apparently a technical decision made by a\n> > > coin toss [organized by] Jeremy Rubin\n> >\n> > Actually, the coin toss was my idea[1], used a bash oneliner I wrote[2],\n> > and is the same method I've been using in Bitcoin-related discussions\n> > for over seven years[3] to help people transition from ancillary arguments\n> > back to working on the things they really think are important.\n> >\n> > I proposed the coin toss because I understood that both the MTP and the\n> > height approaches required tradeoffs that were, to a certain degree,\n> > unresolvable to the best of our current knowledge.  MTP is harder to\n> > analyze for unexpected edge cases; heights would create extra work for\n> > seasoned developers working on post-taproot soft forks.  MTP would\n> > require developers of currently-planned UASF software either do extra\n> > work or wait to release their software; heights don't guarantee a\n> > minimum amount of time for a large number of economic full nodes to\n> > upgrade.\n> >\n> > Different people gave different weights to the different tradeoffs.  In\n> > cases like this where there's no known way to eliminate the tradeoffs\n> > and no way to objectively rank them, I think it's better to begin\n> > working on something concrete than it is to try to persuade everyone to\n> > adopt the same subjective ranking of the tradeoffs---or, as the IETF\n> > published in RFC7282:\n> >\n> >     \"There are times where the result of [an informal open-ended\n> >     conversation] is a pretty even split.  In practical terms, that\n> >     means it doesn't matter where the chair starts the discussion.  And\n> >     in fact, we've had working groups where a coin flip decided which\n> >     proposal to start with.  That doesn't mean that the coin flip\n> >     determined the outcome; if a fatal technical flaw was found in the\n> >     solution that won the coin flip, it is still incumbent upon the\n> >     group to address the issue raised or abandon that solution and find\n> >     another.  Rough consensus on the technical points, in the end, is\n> >     always required.  Any way to find a place to start, be it the hum or\n> >     the coin flip, is only getting to the beginning of the discussion,\n> >     not the end.\"\n> >\n> > As Jeremy wrote, in this occassion, we didn't actually need the coin\n> > toss.  The authors of the two PRs we were considering found a compromise\n> > solution that seems to be good enough for both of them and which so far\n> > seems to be good enough for the handful of people who agreed to the coin\n> > toss (plus, it seems, several others who didn't agree to the toss).\n> >\n> > In short, I think the coin toss was a good attempt.  Although we didn't\n> > use its results this time, I think it's something we should keep in our\n> > toolkit for the future when a group of people want to coordinate their\n> > work on getting *a* solution released, even in cases where they don't\n> > necessarily start out in agreement about which solution is best.\n> >\n> > > I dread to think what individuals and businesses all over the world\n> > > who have plans to utilize and build on Taproot are making of all of\n> > > this.\n> >\n> > Geeks arguing over minutia is a well established stereotype.  That we've\n> > conformed to that stereotype in this case is not great---but I don't\n> > think it does us any significant reputational harm.  I hope those\n> > individuals and businesses awaiting taproot are discerning enough to\n> > realize that the method we use to activate taproot has nothing to do\n> > with taproot itself.  I hope they realize that it remains the case that\n> > there is nearly universal support for taproot from every entity that has\n> > so far commented on it.\n> >\n> > Hopefully we've made progress on Speedy Trial this week, that progress\n> > will continue and we'll be able to release activation-ready software\n> > soon, miners will be willing to signal for taproot, and we'll soon be\n> > able to end this chapter in Bitcoin's storied history of soft fork\n> > activations.[4]  (But I look forward to continued discussion about\n> > better activation mechanisms for the future---if taproot locks in\n> > quickly, I'd love to see human consensus form around a follow-up\n> > deployment even before taproot reaches activation.)\n> >\n> > Respectfully,\n> >\n> > -Dave\n> >\n> > [1] http://gnusha.org/taproot-activation/2021-04-04.log \"<harding> [...]\n> > If that's not our goal and we just want to give miners a chance to\n> > activate taproot as soon as possible (which was certainly my original\n> > objective in supporting ST), I'm personally happy with either MTP or\n> > heights, and I'd be willing to join others in putting my effort behind\n> > just one of them based on fair random chance.\"\n> >\n> > [2] http://gnusha.org/taproot-activation/2021-04-04.log \"18:09 <\n> > harding> e.g.:   bitcoin-cli getblockhash 123456 | cut -b64 | grep -q\n> > '[02468ace]' && echo MTP || echo height\"\n> >\n> > [3] E.g.,\n> > https://github.com/bitcoin-dot-org/Bitcoin.org/pull/589#discussion_r18314009\n> > and https://github.com/bitcoin-dot-org/Bitcoin.org/pull/566#issuecomment-56281595\n> >\n> > [4] https://bitcoinops.org/en/topics/soft-fork-activation/\n>\n>\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at gmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n\n\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3"
            }
        ],
        "thread_summary": {
            "title": "Update on \"Speedy\" Trial: The circus rolls on",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Andrew Poelstra",
                "David A. Harding",
                "Michael Folkson",
                "Matt Corallo"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 26891
        }
    },
    {
        "title": "[bitcoin-dev] Designing Bitcoin Smart Contracts with Sapio (available on Mainnet today)",
        "thread_messages": [
            {
                "author": "Jeremy",
                "date": "2021-04-09T03:57:39",
                "message_text_only": "Bitcoin Developers,\n\nI'm very excited to introduce Sapio[0] <https://github.com/sapio-lang/sapio>\nformally to you all.\n\nSapio empowers Bitcoin Developers to craft smart contracts in an intuitive,\nsafe, and composable way. Sapio challenges the notion that you can't make\ncomplex smart contracts for Bitcoin, and opens the floodgates for a myriad\nof new ideas to be defined easily. Sapio works today on mainnet without any\nprotocol changes (via user-configurable multisig oracles, it will work\nwith BIP-119\nOP_CHECKTEMPLATEVERIFY[1] <https://utxos.org> and Taproot when they are\navailable).\n\nYou can learn more about what's possible by reading *Designing Bitcoin\nSmart Contracts with Sapio[2] <https://learn.sapio-lang.org>*. My Reckless\nVR Talk[3] <https://judica.org/blog/sapio/> also does a great job of\nbreaking down the core programming model for Sapio contracts, although the\nlanguage has evolved substantially since I gave the talk.\n\nAs a concrete instance of Sapio working in the wild, I am currently\nexecuting on mainnet a Congestion Control Tree[4]\n<https://utxos.org/analysis/bip_simulation/> contract with 25 recipients\n(the first Sapio contract to run on mainnet ever, as far as I'm aware). You\ncan review the source code, arguments, compiler outputs, and transactions\nhere[5]\n<https://gist.github.com/JeremyRubin/1374f0916bfdef0bd36bc10d73852886>.\n\nTo see more examples of what you can do with Sapio, the repo includes\nexamples[6]\n<https://github.com/sapio-lang/sapio/tree/master/sapio-contrib/src/contracts>\nfor derivatives, vaults, coin pools, games, side chains, and more. These\naren't intended to be production grade contracts -- yet -- but are\ndemonstrative of what can be built and how. I'm excited to see what people\nbuild -- please open up PRs with your ideas or any issues you encounter\ntrying to implement them.\n\nYou can also try out Tux[7] <https://github.com/sapio-lang/tux>, an\nexperimental GUI, to inspect, simulate, and interact with smart contracts.\nYou can see the Congestion Control Tree mentioned earlier loaded in Tux\nbelow[8] <https://i.imgur.com/pg5SqfH.png>:\n\n\n\n\nThis is still early work-in-progress software, so tread lightly and use\nregtest. Enough of the components work today that it was appropriate to\nshare now and invite more developers to contribute or otherwise support the\nproject.\n\nSapio is developed free and open source for all bitcoiners by Judica.org\n(my organization).\n\nThank you to all who have helped reach this milestone of the first mainnet\nSapio contract, including Ryan Grant, BitMEX, ACINQ, Delphi Digital,\nBackend Capital, my github sponsors https://github.com/sponsors/jeremyrubin,\nand numerous other supporters both fiscal and technical. I also want to\nhighlight the excellent work done on Miniscript and the rust-bitcoin\necosystem, the foundation upon which Sapio rests.\n\n[0] https://github.com/sapio-lang/sapio\n[1] https://utxos.org\n[2] https://learn.sapio-lang.org\n[3] https://judica.org/blog/sapio/\n[4] https://utxos.org/analysis/bip_simulation/\n[5] https://gist.github.com/JeremyRubin/1374f0916bfdef0bd36bc10d73852886\n[6]\nhttps://github.com/sapio-lang/sapio/tree/master/sapio-contrib/src/contracts\n[7] https://github.com/sapio-lang/tux\n[8] https://imgur.com/pg5SqfH\n\n\nEager for you feedback,\n\nJeremy\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210408/0bc8fa33/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2021-04-16T14:35:31",
                "message_text_only": "Good morning Jeremy, et al.,\n\n\n> Bitcoin Developers,\n>\n> I'm very excited to introduce Sapio[0] formally to you all.\n\nThis seems quite interesting to me as well!\n\nI broadly agree with the rant on monetary units.\nIn C-Lightning we always (except for some legacy fields that will eventually be removed) output values as strings with an explicit `msat` unit, even for onchain values (the smallest of which are satoshi, but for consistency we always print as millisatoshi), and accept explicit `btc`, `sat`, and `msat` units.\n\n--\n\nPersonally I would have used a non-embedded DSL.\n\nIn practice an embedded DSL requires a user to learn two languages --- the hosting language and the embedded language.\nWhereas if you designed a non-embedded DSL, a new user would have to learn only one language.\nFor instance, if an error is emitted, then the user has to know whether the error comes from the hosting language compiler, or the embedded language implementation.\n\nIn a past career embedded DSLs for hardware description languages were being pushed, and we found that one of the drawbacks was the need to learn as well the hosting language --- at some point Haskell-embedded DSLs became so unpopular that anything that was even Haskell-related had a negative reaction in some hardware design shops.\nFor example BlueSpec originally was a Haskell-embedded DSL, and eventually implemented a Verilog-like syntax that was not embedded in Haskell, becoming BlueSpecSystemVerilog.\n\nFurther, as per coding theory, the hosting language is often quite generic and can talk about anything, including other embedded languages, thus we expect (all other things being equal) that in general, an utterance in an embedded DSL will be longer than an utterance in a non-embedded DSL (as there is more things to talk about, more symbols are necessary, and thus we expect things to be longer in the generic hosting language).\nWhereas a non-embedded DSL can cut away most of the extra verbage needed to introduce to the hosting language implementation, in order to indicate the \"entry\" into the domain-specific language.\n\n--\n\nIf my understanding is correct, I seem, that the hosting language is a full, general, Turing-complete language, that \"builds up\" a total (non-Turing-complete) contract description.\n\nI have had (private) speculations before that it would be possible to design a language with two layers:\n\n* A non-Turing-complete total \"base language\".\n* A syntax meta-language similar to Scheme `syntax-rules`, which constructs ASTs for the \"base language\".\n\nNote that Scheme `syntax-rules` is indeed Turing-complete, as a macro can expand to a form with two lists that form two \"ends\" of a tape, and act as a Turing machine on that tape, thus Turing-equivalent.\nIt is not a general language as it lacks many basic practicalities, but as pure computation, indeed it is possible to compute anything in that language.\n\nThe advantage of this scheme is that the meta-language is executed at language compile time, and the developer can see (by observing the compilation process) whether the meta-program halts or not.\nHowever, the end-user executing the program is assured that the program, delivered as a compiled binary, will indeed terminate, as the base language is total and non-Turing-complete (i.e. the halting problem is trivial for the base language --- all programs halt).\n\nI even have started designing a syntax scheme that adds in infix notation and indent-sensitivity to a Lisp-like syntax, at the cost of disallowing typical Lisp-like names like `pair?`, e.g.\n\n    foo x = value (bar x)\n      where\n        bar x = x\n\nis equivalent to:\n\n    (`=` (foo x)\n         (value (bar x)\n                (where\n                  (`=` (bar x) x))))\n\nI can provide more details if interested.\n\nNote that the base language is not embedded in the meta-language, as the meta-language is effectively only capable of talking about how the utterance in the base language is constructed --- the meta-language is not quite general enough (i.e. the meta-language cannot implement \"Hello World\").\nThus coding theory should imply that this should lead to more succinct utterances (in general).\n>From this point of view, language design is about striking a balance between the low input bandwidth of neurotypical human brains (thus compression is needed, i.e. the language encourages succinct programs) and the limited processing power of neurotypical human brains (thus decompression speed is needed, i.e. it should be obvious what something expands to).\n\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Jeremy",
                "date": "2021-04-16T18:12:10",
                "message_text_only": "Hi ZmnSCPxj,\n\nFunny you mention BlueSpec -- I actually took 6.175[1] in my undergraduate\nstudies with Arvind, BlueSpec's creator, and have often cited it as an\ninspiration for Sapio given that the target of program compilation is\nessentially a transaction circuit and I have a decent amount of experience\nworking in BlueSpec.\n\nIt's entirely the point that Sapio program expansion is Turing complete\nwhereas the resultant program is \"fixed\". Via updatable finish clauses\n(which require some signature) it's also possible to track the logic for\nwhat states should be generated upon cooperation of parties, making Sapio\nturing complete description language for federated operators. I've\npreviously described it as follows:\n\n*But how is Sapio different from Miniscript? From Solidity? A metaphor that\nI like is that tools like Miniscript operate at the physical-key level\n(house keys, car keys, train pass, office key). Sapio operates at the\ncommute level. Miniscript answers, \"how do I unlock my car? How do I pay\nfor the train? How do I get in my office?\"*. *Sapio lets you specify that,\n\"my morning commute is to leave my house, go to my car, start it and drive\nto the office, and park in the lot; OR go to the train station, use the\ntrain pass to pay fare, take the train for an hour, then* *walk 3 blocks\nnorth to my  office; and in either case unlock the office door, and enter\".\nSapio has plans to integrate Miniscript as it stabilizes *[currently\nintegrated]* as the backend key description language. Solidity and Sapio\nare more similar. Sapio's metaprogramming language is Turing Complete and\nallows you to specify a rich set of constraints for the contract you're\nbuilding, but can only ever produce a finite deterministic \"binary\" of\ntransactions. Solidity on the other hand compiles deterministically, but\nthe executed binary is Turing Complete. Further, Sapio contracts are\n\"stateless\", whereas Solidity has mutable state. Lastly, Solidity contracts\nare non-isolated from one another in the EVM. In Sapio, contracts execute\nonly with the components you specify in scope. In sum, Sapio has a rich\ndescriptive power for smart contract programming flows but a limited and\nsafe execution semantics.*\n\n\nThe DSL v.s. e-DSL is a great question, and while there are surely benefits\nto being a full-fledged standalone DSL, here's why the e-DSL approach is\nsuperior for everything Sapio cares about.\n\nSapio is built as a shallow e-DSL in Rust. Everything in Sapio can be\nexpressed (macro free -- they're relatively light conveniences) as pure\nrust. There's also a more \"API Like\" interface where Sapio objects can be\nbuilt out dynamically by other rust code easily. This means that if you\nwanted to come up with a custom DSL for a subset of Sapio programs, you\ncould still very easily target Sapio (at runtime) as the AST processor.\nSaid \"SapioScript\" can be an entirely separate crate targeting this base.\n\nThis is also nice because it keeps the Sapio core codebase relatively tight\ncompared to what would be required were Sapio to be a \"full language\", and\nhave tens of thousands of lines of custom lexing, parsing, type systems,\netc etc.\n\nYes, you have to learn Rust, but Rust is one of the most popular languages\nfor systems programming. It means that there's a library for almost any\nfunctionality you could want. There's tooling for building for any platform\n-- Sapio targets WASM happily, which helps with compile-once run sandboxed\nanywhere (this really helps for using Sapio as a replicated state machine\nfor channels).\n\nI agree with you that Haskell was previously a limiting factor for\nBlueSpec, but Rust is not Haskell. Rust is incredibly popular, and easier\nto learn (author's opinion) than Haskell, C++, or even Python (perhaps\nbiased, but I always struggled with python for more than simple scripts\nknowing when objects were copied or referenced -- an initial version of\nSapio was in python, but that codebase collapsed under its own\ncomplexity... and I had *great* MyPy coverage). It's certainly easier to\nlearn Rust than to learn Sapio as a DSL -- Sapio requires learning an\nentirely novel way of thinking about structuring programs already, a DSL\nwould require learning both the \"Sapio Programming Model\" and \"The Sapio\nDSL\". With embedded Rust, you can transfer all existing knowledge on Rust\nprogramming and add a veneer of Sapio.\n\nFurther Sapio is designed to not just compile to smart contracts as Bitcoin\naddresses, but be able to be deeply integrated inside of an application.\nFor example, suppose you wanted to fetch keys for a contract from a\ndatabase, query a network oracle for a state resolution, or something else.\nA DSL would scope creep infinitely or require numerous hacks, and at that\npoint we're largely better off benefitting from the larger Rust community's\nefforts at providing excellent APIs for any task.\n\nTherefore to make Sapio functional for building and deploying real bitcoin\nsmart contract applications, a rust eDSL was not just the natural, it was\nthe only choice.\n\nW.r.t. to succinctness and \"extra concepts\" I'll admit that there is some\ndisadvantage to Rust. There's a borrow checker -- which can be mostly\ndefeated if you don't care about performance with Arc / Clone. You have to\nmanually impl some traits -- but the trait system ends up not being bloat,\nbut central to making contract state machines\nhttps://learn.sapio-lang.org/ch08-01-state-machines.html. And if you do\nactually look at the Sapio programs themselves, they are still quite\nsuccinct comparatively. I can imagine them being a bit shorter, but I think\noptimizing for the shortest possible utterance is an anti-goal for safety\n-- I aim for clarity. And that's where I don't exactly hate the borrow\nchecker, since it makes it easier to tell when sub-contracts are using the\nsame or modified data.\n\nBest,\n\nJeremy\n\n[1] http://csg.csail.mit.edu/6.175/archive/2014/index.html\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n\n\nOn Fri, Apr 16, 2021 at 7:36 AM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n\n> Good morning Jeremy, et al.,\n>\n>\n> > Bitcoin Developers,\n> >\n> > I'm very excited to introduce Sapio[0] formally to you all.\n>\n> This seems quite interesting to me as well!\n>\n> I broadly agree with the rant on monetary units.\n> In C-Lightning we always (except for some legacy fields that will\n> eventually be removed) output values as strings with an explicit `msat`\n> unit, even for onchain values (the smallest of which are satoshi, but for\n> consistency we always print as millisatoshi), and accept explicit `btc`,\n> `sat`, and `msat` units.\n>\n> --\n>\n> Personally I would have used a non-embedded DSL.\n>\n> In practice an embedded DSL requires a user to learn two languages --- the\n> hosting language and the embedded language.\n> Whereas if you designed a non-embedded DSL, a new user would have to learn\n> only one language.\n> For instance, if an error is emitted, then the user has to know whether\n> the error comes from the hosting language compiler, or the embedded\n> language implementation.\n>\n> In a past career embedded DSLs for hardware description languages were\n> being pushed, and we found that one of the drawbacks was the need to learn\n> as well the hosting language --- at some point Haskell-embedded DSLs became\n> so unpopular that anything that was even Haskell-related had a negative\n> reaction in some hardware design shops.\n> For example BlueSpec originally was a Haskell-embedded DSL, and eventually\n> implemented a Verilog-like syntax that was not embedded in Haskell,\n> becoming BlueSpecSystemVerilog.\n>\n> Further, as per coding theory, the hosting language is often quite generic\n> and can talk about anything, including other embedded languages, thus we\n> expect (all other things being equal) that in general, an utterance in an\n> embedded DSL will be longer than an utterance in a non-embedded DSL (as\n> there is more things to talk about, more symbols are necessary, and thus we\n> expect things to be longer in the generic hosting language).\n> Whereas a non-embedded DSL can cut away most of the extra verbage needed\n> to introduce to the hosting language implementation, in order to indicate\n> the \"entry\" into the domain-specific language.\n>\n> --\n>\n> If my understanding is correct, I seem, that the hosting language is a\n> full, general, Turing-complete language, that \"builds up\" a total\n> (non-Turing-complete) contract description.\n>\n> I have had (private) speculations before that it would be possible to\n> design a language with two layers:\n>\n> * A non-Turing-complete total \"base language\".\n> * A syntax meta-language similar to Scheme `syntax-rules`, which\n> constructs ASTs for the \"base language\".\n>\n> Note that Scheme `syntax-rules` is indeed Turing-complete, as a macro can\n> expand to a form with two lists that form two \"ends\" of a tape, and act as\n> a Turing machine on that tape, thus Turing-equivalent.\n> It is not a general language as it lacks many basic practicalities, but as\n> pure computation, indeed it is possible to compute anything in that\n> language.\n>\n> The advantage of this scheme is that the meta-language is executed at\n> language compile time, and the developer can see (by observing the\n> compilation process) whether the meta-program halts or not.\n> However, the end-user executing the program is assured that the program,\n> delivered as a compiled binary, will indeed terminate, as the base language\n> is total and non-Turing-complete (i.e. the halting problem is trivial for\n> the base language --- all programs halt).\n>\n> I even have started designing a syntax scheme that adds in infix notation\n> and indent-sensitivity to a Lisp-like syntax, at the cost of disallowing\n> typical Lisp-like names like `pair?`, e.g.\n>\n>     foo x = value (bar x)\n>       where\n>         bar x = x\n>\n> is equivalent to:\n>\n>     (`=` (foo x)\n>          (value (bar x)\n>                 (where\n>                   (`=` (bar x) x))))\n>\n> I can provide more details if interested.\n>\n> Note that the base language is not embedded in the meta-language, as the\n> meta-language is effectively only capable of talking about how the\n> utterance in the base language is constructed --- the meta-language is not\n> quite general enough (i.e. the meta-language cannot implement \"Hello\n> World\").\n> Thus coding theory should imply that this should lead to more succinct\n> utterances (in general).\n> From this point of view, language design is about striking a balance\n> between the low input bandwidth of neurotypical human brains (thus\n> compression is needed, i.e. the language encourages succinct programs) and\n> the limited processing power of neurotypical human brains (thus\n> decompression speed is needed, i.e. it should be obvious what something\n> expands to).\n>\n>\n> Regards,\n> ZmnSCPxj\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210416/50e42fbb/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Designing Bitcoin Smart Contracts with Sapio (available on Mainnet today)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "ZmnSCPxj",
                "Jeremy"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 19053
        }
    },
    {
        "title": "[bitcoin-dev] maximum block height on transaction",
        "thread_messages": [
            {
                "author": "Erik Aronesty",
                "date": "2021-04-09T08:15:01",
                "message_text_only": "is there any way to specify a maximum block height on a transaction?\n\nie: this tx is only valid if included in a block with a certain height or less\n\ni feel like this would be useful"
            },
            {
                "author": "Russell O'Connor",
                "date": "2021-04-09T11:39:45",
                "message_text_only": ">From https://bitcointalk.org/index.php?topic=1786.msg22119#msg22119:\n\nWe can't safely do OP_BLOCKNUMBER.  In the event of a block chain reorg\n> after a segmentation, transactions need to be able to get into the chain in\n> a later block.  The OP_BLOCKNUMBER transaction and all its dependants would\n> become invalid.  This wouldn't be fair to later owners of the coins who\n> weren't involved in the time limited transaction.\n>\n> nTimeLock does the reverse.  It's an open transaction that can be replaced\n> with new versions until the deadline.  It can't be recorded until it\n> locks.  The highest version when the deadline hits gets recorded.  It could\n> be used, for example, to write an escrow transaction that will\n> automatically permanently lock and go through unless it is revoked before\n> the deadline.  The feature isn't enabled or used yet, but the support is\n> there so it could be implemented later.\n>\n\nUnfortunately, limiting the maximum block height for a specific transaction\nwould have exactly the same problem as cited above for OP_BLOCKNUMBER.\n\nOn Fri, Apr 9, 2021 at 7:21 AM Erik Aronesty via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> is there any way to specify a maximum block height on a transaction?\n>\n> ie: this tx is only valid if included in a block with a certain height or\n> less\n>\n> i feel like this would be useful\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210409/fed819a8/attachment.html>"
            },
            {
                "author": "Jeremy",
                "date": "2021-04-09T15:54:39",
                "message_text_only": "You could accomplish your rough goal by having:\n\n\n\ntx A: desired expiry at H\ntx B: nlocktime H, use same inputs as A, create outputs equivalent to\ninputs (have to be sure no relative timelocks)\n\nThus after a timeout the participants in A can cancel the action using TX B.\n\nThe difference is the coins have to move, without knowing your use case\nthis may or may not help you.\n\nOn Fri, Apr 9, 2021, 4:40 AM Russell O'Connor via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> From https://bitcointalk.org/index.php?topic=1786.msg22119#msg22119:\n>\n> We can't safely do OP_BLOCKNUMBER.  In the event of a block chain reorg\n>> after a segmentation, transactions need to be able to get into the chain in\n>> a later block.  The OP_BLOCKNUMBER transaction and all its dependants would\n>> become invalid.  This wouldn't be fair to later owners of the coins who\n>> weren't involved in the time limited transaction.\n>>\n>> nTimeLock does the reverse.  It's an open transaction that can be\n>> replaced with new versions until the deadline.  It can't be recorded until\n>> it locks.  The highest version when the deadline hits gets recorded.  It\n>> could be used, for example, to write an escrow transaction that will\n>> automatically permanently lock and go through unless it is revoked before\n>> the deadline.  The feature isn't enabled or used yet, but the support is\n>> there so it could be implemented later.\n>>\n>\n> Unfortunately, limiting the maximum block height for a specific\n> transaction would have exactly the same problem as cited above for\n> OP_BLOCKNUMBER.\n>\n> On Fri, Apr 9, 2021 at 7:21 AM Erik Aronesty via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> is there any way to specify a maximum block height on a transaction?\n>>\n>> ie: this tx is only valid if included in a block with a certain height or\n>> less\n>>\n>> i feel like this would be useful\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210409/a49670f6/attachment.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-04-12T20:04:51",
                "message_text_only": "@Russell I think there were sound arguments against Satoshi's statement\nmade in that very thread. Especially that software can be written to warn\nthe user about edge cases.\n\nIf a person waited for the standard 6 blocks before accepting a transaction\nas confirmed, there should be no significantly likely scenario where any\nfinalized transaction needs to be reverted. If 6 blocks is indeed a safe\nthreshold for finalization, then any transaction that has 5 or fewer\nconfirmations should be considered fair game for reversal. I don't agree\nthat this is \"unfair\". In fact, I think that's pretty standard, is it not?\nAny chain of transactions that happen in the span of 5 blocks shouldn't be\ndoing anything that expects those transactions to become finalized until\nthe relevant transactions get 6 confirmations.\n\nI don't think the possibility of buggy software is a good reason to block\nan opcode. Not that I'm hankering for OP_BLOCKNUMBER specifically. However,\nI think there are good use cases for spend paths that expire (eg for more\neffective wallet vaults).\n\nI've come across this argument before, and it seems kind of like Satoshi's\nword here is held as gospel. I haven't heard any deep discussion of this\ntopic, and I even asked a question on the bitcoin SE\n<https://bitcoin.stackexchange.com/questions/96366/what-are-the-reasons-to-avoid-spend-paths-that-become-invalid-over-time-without>\nabout it. Sorry to hijack this conversation, but I'm very curious if\nthere's something more to this or if the thinking was simply decided that\nOP_BLOCKNUMBER wasn't useful enough to warrant the (dubious) potential\nfootgun of people accepting sub-6-block transactions from a transaction\nthat uses an expired spend-path?\n\nOn Fri, Apr 9, 2021 at 5:55 AM Jeremy via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> You could accomplish your rough goal by having:\n>\n>\n>\n> tx A: desired expiry at H\n> tx B: nlocktime H, use same inputs as A, create outputs equivalent to\n> inputs (have to be sure no relative timelocks)\n>\n> Thus after a timeout the participants in A can cancel the action using TX\n> B.\n>\n> The difference is the coins have to move, without knowing your use case\n> this may or may not help you.\n>\n> On Fri, Apr 9, 2021, 4:40 AM Russell O'Connor via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> From https://bitcointalk.org/index.php?topic=1786.msg22119#msg22119:\n>>\n>> We can't safely do OP_BLOCKNUMBER.  In the event of a block chain reorg\n>>> after a segmentation, transactions need to be able to get into the chain in\n>>> a later block.  The OP_BLOCKNUMBER transaction and all its dependants would\n>>> become invalid.  This wouldn't be fair to later owners of the coins who\n>>> weren't involved in the time limited transaction.\n>>>\n>>> nTimeLock does the reverse.  It's an open transaction that can be\n>>> replaced with new versions until the deadline.  It can't be recorded until\n>>> it locks.  The highest version when the deadline hits gets recorded.  It\n>>> could be used, for example, to write an escrow transaction that will\n>>> automatically permanently lock and go through unless it is revoked before\n>>> the deadline.  The feature isn't enabled or used yet, but the support is\n>>> there so it could be implemented later.\n>>>\n>>\n>> Unfortunately, limiting the maximum block height for a specific\n>> transaction would have exactly the same problem as cited above for\n>> OP_BLOCKNUMBER.\n>>\n>> On Fri, Apr 9, 2021 at 7:21 AM Erik Aronesty via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> is there any way to specify a maximum block height on a transaction?\n>>>\n>>> ie: this tx is only valid if included in a block with a certain height\n>>> or less\n>>>\n>>> i feel like this would be useful\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210412/2d4313bc/attachment.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2021-04-16T04:24:28",
                "message_text_only": "Good morning Billy,\n\n\n> I've come across this argument before, and it seems kind of like Satoshi's word here is held as gospel. I haven't heard any deep discussion of this topic, and I even asked a question on the bitcoin SE about it. Sorry to hijack this conversation, but I'm very curious if there's something more to this or if the thinking was simply decided that OP_BLOCKNUMBER wasn't useful enough to warrant the (dubious) potential footgun of people accepting sub-6-block transactions from a transaction that uses an expired spend-path?\n\nAnother argument I have encountered has to do with the implementation of Bitcoin Core.\n\nAs an optimization, SCRIPT is evaluated only when a transaction enters the mempool.\nIt is not evaluated at any other time.\nIndeed, when accepting a new block, if a transaction in that block is in the mempool, its SCRIPT is not re-evaluated.\n\nIf the max-blockheight-constraint is implemented as a SCRIPT opcode, then at each block, every SCRIPT in every transaction in the mempool must be re-evaluated, as the SCRIPT might not reject.\nDuring times of high chain bloat, there will be large numbers of transactions in the mempool, only a tiny fraction will be removed at each block before the mempool finally clears, leading to effective O(n^2) CPU time spent (n blocks are needed in order to empty a mempool with n transactions, each block triggers re-evaluation of SCRIPT of n transactions in the mempool).\nThat O(n^2) assumes a single SCRIPT is O(1), which is untrue as well (but is generally approached in practice as most transactions are simple singlesig or `OP_CHECKMULTISIG` affairs).\n\nThat is, the mempool assumes that once a SCRIPT accepts, it will always accept in the future.\nThus, any SCRIPT opcode cannot change from \"accept\" (because at the current blockheight the max-block is not yet reached) to \"reject\" (because the max-block constraint is now violated).\n\nThus, we cannot use an opcode to impose the max-block cosntraint.\n\nThe alternative is to add a new field `maxtime` to the transaction.\nThen possibly, we can have an `OP_CHECKMAXTIMEVERIFY` opcode that checks that the field has a particular value.\nThen the mempool can have a separate index according to `maxtime` fields, where it can remove the indexed transactions at each block.\nThe index will be likely O(log n), and the filtering at each block would be O(n log n), which is an improvement.\nNote in particular that the index itself would require O(n) storage.\n\nHowever, adding a new field to the transaction format would require techniques similar to what was used in SegWit, i.e. post-maxtime nodes have to \"baby talk\" to pre-maxtime nodes and pretend transactions do not have this field, in much the same way post-SegWit nodes \"baby talk\" to pre-SegWit nodes and pretend transactions do not have a `witness` field.\nWe would then need a third Merkle Tree to hold the \"really real\" transaction ID that contains the `maxtime` field as well.\n\nThus, it seems to me that the tradeoffs are simply not good enough, when you can get 99% of what you need using just another transaction with `nLockTime`:\n\n* Using an opcode would greatly increase CPU usage because the script cache would need to be reworked (and probably cannot be made to work).\n* Adding a field would greatly increase the code complexity to the level of SegWit, without all the important bugfixes+features (tx malleability, quadratic sighash, well-defined extensible outputs) that SegWit provides.\n* You can do what you want with a second `nLockTime`d transaction that spends the output anyway.\n\nIndeed, it is helpful to realize *why* `OP_CHECKLOCKTIMEVERIFY` and `OP_CHECKSEQUENCEVERIFY` work the way they are implemented.\nThey are typically discussed and described as if they were imposing time-based constraints, but the *real* implementation only imposes constraints on `nLockTime` and `nSequence` fields --- the SCRIPT interpreter itself does not look at the block that the transaction is in (because that is not available, as the SCRIPT interpreter is invoked at mempool entry, when the transaction *has* no block it is contained in).\nThere is instead a separate layer (the entry into the mempool) that implements the *actual* time-based cosntraints, based on the fields and not the SCRIPT opcodes.\n\nRegards,\nZmnSCPxj\n\n>\n> On Fri, Apr 9, 2021 at 5:55 AM Jeremy via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> > You could accomplish your rough goal by having:\n> >\n> > tx A: desired expiry at H\n> > tx B: nlocktime H, use same inputs as A, create outputs equivalent to inputs (have to be sure no relative timelocks)\n> >\n> > Thus after a timeout the participants in A can cancel the action using TX B.\n> >\n> > The difference is the coins have to move, without knowing your use case this may or may not help you.\u00a0\n> >\n> > On Fri, Apr 9, 2021, 4:40 AM Russell O'Connor via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> > > From https://bitcointalk.org/index.php?topic=1786.msg22119#msg22119:\n> > >\n> > > > We can't safely do OP_BLOCKNUMBER.\u00a0 In the event of a block chain reorg after a segmentation, transactions need to be able to get into the chain in a later block.\u00a0 The OP_BLOCKNUMBER transaction and all its dependants would become invalid.\u00a0 This wouldn't be fair to later owners of the coins who weren't involved in the time limited transaction.\n> > > >\n> > > > nTimeLock does the reverse.\u00a0 It's an open transaction that can be replaced with new versions until the deadline.\u00a0 It can't be recorded until it locks.\u00a0 The highest version when the deadline hits gets recorded.\u00a0 It could be used, for example, to write an escrow transaction that will automatically permanently lock and go through unless it is revoked before the deadline.\u00a0 The feature isn't enabled or used yet, but the support is there so it could be implemented later.\n> > >\n> > > Unfortunately, limiting the maximum block height for a specific transaction would have exactly the same problem as cited above for OP_BLOCKNUMBER.\n> > >\n> > > On Fri, Apr 9, 2021 at 7:21 AM Erik Aronesty via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > >\n> > > > is there any way to specify a maximum block height on a transaction?\n> > > >\n> > > > ie: this tx is only valid if included in a block with a certain height or less\n> > > >\n> > > > i feel like this would be useful\n> > > > _______________________________________________\n> > > > bitcoin-dev mailing list\n> > > > bitcoin-dev at lists.linuxfoundation.org\n> > > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> > >\n> > > _______________________________________________\n> > > bitcoin-dev mailing list\n> > > bitcoin-dev at lists.linuxfoundation.org\n> > > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "maximum block height on transaction",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeremy",
                "Russell O'Connor",
                "ZmnSCPxj",
                "Erik Aronesty",
                "Billy Tetrud"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 15874
        }
    },
    {
        "title": "[bitcoin-dev] An Electrum server using libbitcoin",
        "thread_messages": [
            {
                "author": "Ivan J.",
                "date": "2021-04-09T10:23:27",
                "message_text_only": "Hi.\n\nI've been working on an Electrum server implementation that uses zmq\nand libbitcoin as its backend. I wanted to use the Electrum wallet with\nmy libbitcoin server and this makes it possible now with (unfinished)\nlibbitcoin v4.\n\nThe code is here: https://github.com/parazyd/obelisk\n(Yes, it's named Obelisk because of historical reasons :p)\n\nAs the Electrum/ElectrumX protocol is getting some new stuff in\nprotocol version 1.5, I will keep tracking the protocol and implement\nit in Obelisk as it comes.\n\nEventually, the end-goal is to merge Obelisk into Electrum and simply\nuse libbitcoin public (or self-hosted) servers directly, without\nthe need of a boilerplate protocol/server between a client and a\ndaemon. In current Electrum git, this seems relatively simple to do\n(and I personally already have done about 70% of it on my local\ncode repository), but the problem is that it's a breaking change\nand replaces the old protocol, which invalidates all old servers\nif/when this change happens. However, I don't doubt that removing\nthe boilerplate and querying a libbitcoin server directly is a bad\nidea at all. I'll see if I can make upstream progress on this once\nI get feedback.\n\nIn general, regarding Obelisk I'd appreciate some feedback, review,\nand a bit of help with certain TODOs in the code. The entire codebase\nis around 1000 lines of Python 3 with no external dependecies besides\npyzmq.\n\nThanks,\nIvan"
            }
        ],
        "thread_summary": {
            "title": "An Electrum server using libbitcoin",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Ivan J."
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1414
        }
    },
    {
        "title": "[bitcoin-dev] Taproot activation meeting on IRC - Tuesday 13th April 19:00 UTC",
        "thread_messages": [
            {
                "author": "BitcoinMechanic",
                "date": "2021-04-10T02:40:29",
                "message_text_only": "Taproot activation meeting on IRC - Tuesday 13th April 19:00 UTC\n\nThe focus of the meeting will be ratifying the Taproot activation plan previously discussed at the March 16th meeting (aka 2021-03 Plan Y as summarized here):\n\nhttps://docs.google.com/spreadsheets/d/1K3pmH09yXLTHGV3wqFZGR3ei7QVwtdEwo0PjI2NHD3w/edit#gid=0\n\nWhile there was never any consensus reached on the LOT parameter, there appears to be consensus on BIP8 and the remaining parameters, and more than sufficient support for LOT=True to proceed safely.\n\nMiners will have 18 months in which to signal and accelerate activation. If not, taproot will activate regardless.\n\nWith a majority of the economy running this it will guarantee eventual lock-in of taproot with the smallest chance of a chain split.\n\nAs a reminder, the channel is also open for ongoing discussion 24/7, and there is a web chat client here:\n\nhttps://webchat.freenode.net/?channel=##taproot-activation\n\nBest,\n\nBitcoin Mechanic\n\nSent with [ProtonMail](https://protonmail.com/) Secure Email.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210410/397aaf20/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: image1618022427865\nType: image/png\nSize: 6217 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210410/397aaf20/attachment-0001.png>"
            },
            {
                "author": "Michael Folkson",
                "date": "2021-04-10T16:06:43",
                "message_text_only": "Hi Bitcoin Mechanic\n\nI will attend but I will be looking at Core PR #21377 over the next\ncouple of days and I would encourage other reviewers to review that PR\ntoo. If that PR is merged into Core I would strongly recommend any\nalternative release be fully compatible with the activation parameters\nin Core.\n\nWe can discuss in the meeting what we think the cut off date should be\nfor when Core should no longer be a consideration. Personally I think\n(and hope) we will see progress on #21377 in the coming days.\n\nFor the sake of the mailing list Bitcoin Mechanic has set up a meeting\nto discuss an alternative release to Core with Taproot activation\ncode.\n\nThanks\nMichael\n\n> Taproot activation meeting on IRC - Tuesday 13th April 19:00 UTC\n\n> The focus of the meeting will be ratifying the Taproot activation plan previously discussed at the March 16th meeting (aka 2021-03 Plan Y as summarized here):\n\nhttps://docs.google.com/spreadsheets/d/1K3pmH09yXLTHGV3wqFZGR3ei7QVwtdEwo0PjI2NHD3w/edit#gid=0\n\n> While there was never any consensus reached on the LOT parameter, there appears to be consensus on BIP8 and the remaining parameters, and more than sufficient support for LOT=True to proceed safely.\n\n> Miners will have 18 months in which to signal and accelerate activation. If not, taproot will activate regardless.\n\n> With a majority of the economy running this it will guarantee eventual lock-in of taproot with the smallest chance of a chain split.\n\n> As a reminder, the channel is also open for ongoing discussion 24/7, and there is a web chat client here:\n\n> https://webchat.freenode.net/?channel=##taproot-activation\n\n> Best,\n\n> Bitcoin Mechanic\n\n> Sent with [ProtonMail](https://protonmail.com/) Secure Email.\n\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3"
            },
            {
                "author": "Jeremy",
                "date": "2021-04-10T16:59:46",
                "message_text_only": "I concur that reviewing #21377 is the best path at this time.\n\nHowever, I want to draw attention to the middle road here:\n\nIf Core chooses to not release activation params (which has been discussed\nas a general concept previously), #21377 can also be used to safely issue a\ncommunity release.\n\nIt's a false dichotomy between ST released by Core and a BIP8 UASF.\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n\n\nOn Sat, Apr 10, 2021 at 9:48 AM Michael Folkson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi Bitcoin Mechanic\n>\n> I will attend but I will be looking at Core PR #21377 over the next\n> couple of days and I would encourage other reviewers to review that PR\n> too. If that PR is merged into Core I would strongly recommend any\n> alternative release be fully compatible with the activation parameters\n> in Core.\n>\n> We can discuss in the meeting what we think the cut off date should be\n> for when Core should no longer be a consideration. Personally I think\n> (and hope) we will see progress on #21377 in the coming days.\n>\n> For the sake of the mailing list Bitcoin Mechanic has set up a meeting\n> to discuss an alternative release to Core with Taproot activation\n> code.\n>\n> Thanks\n> Michael\n>\n> > Taproot activation meeting on IRC - Tuesday 13th April 19:00 UTC\n>\n> > The focus of the meeting will be ratifying the Taproot activation plan\n> previously discussed at the March 16th meeting (aka 2021-03 Plan Y as\n> summarized here):\n>\n>\n> https://docs.google.com/spreadsheets/d/1K3pmH09yXLTHGV3wqFZGR3ei7QVwtdEwo0PjI2NHD3w/edit#gid=0\n>\n> > While there was never any consensus reached on the LOT parameter, there\n> appears to be consensus on BIP8 and the remaining parameters, and more than\n> sufficient support for LOT=True to proceed safely.\n>\n> > Miners will have 18 months in which to signal and accelerate activation.\n> If not, taproot will activate regardless.\n>\n> > With a majority of the economy running this it will guarantee eventual\n> lock-in of taproot with the smallest chance of a chain split.\n>\n> > As a reminder, the channel is also open for ongoing discussion 24/7, and\n> there is a web chat client here:\n>\n> > https://webchat.freenode.net/?channel=##taproot-activation\n>\n> > Best,\n>\n> > Bitcoin Mechanic\n>\n> > Sent with [ProtonMail](https://protonmail.com/) Secure Email.\n>\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at gmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210410/94434db8/attachment-0001.html>"
            },
            {
                "author": "Billy Tetrud",
                "date": "2021-04-12T19:39:13",
                "message_text_only": "> more than sufficient support for LOT=True to proceed safely\n\nThis seems to contradict what you said about \"there was never any consensus\nreached on the LOT parameter\". Can you clarify?\n\nOn Sat, Apr 10, 2021 at 4:13 AM BitcoinMechanic via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Taproot activation meeting on IRC - Tuesday 13th April 19:00 UTC\n>\n> The focus of the meeting will be ratifying the Taproot activation plan\n> previously discussed at the March 16th meeting (aka 2021-03 Plan Y as\n> summarized here):\n>\n>\n> https://docs.google.com/spreadsheets/d/1K3pmH09yXLTHGV3wqFZGR3ei7QVwtdEwo0PjI2NHD3w/edit#gid=0\n>\n> While there was never any consensus reached on the LOT parameter, there\n> appears to be consensus on BIP8 and the remaining parameters, and more than\n> sufficient support for LOT=True to proceed safely.\n>\n> Miners will have 18 months in which to signal and accelerate activation.\n> If not, taproot will activate regardless.\n>\n> With a majority of the economy running this it will guarantee eventual\n> lock-in of taproot with the smallest chance of a chain split.\n>\n> As a reminder, the channel is also open for ongoing discussion 24/7, and\n> there is a web chat client here:\n>\n> https://webchat.freenode.net/?channel=##taproot-activation\n>\n> Best,\n>\n> Bitcoin Mechanic\n>\n>\n> Sent with ProtonMail <https://protonmail.com/> Secure Email.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210412/e83dc9c8/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: image1618022427865\nType: image/png\nSize: 6217 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210412/e83dc9c8/attachment-0001.png>"
            }
        ],
        "thread_summary": {
            "title": "Taproot activation meeting on IRC - Tuesday 13th April 19:00 UTC",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeremy",
                "Billy Tetrud",
                "Michael Folkson",
                "BitcoinMechanic"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 8241
        }
    },
    {
        "title": "[bitcoin-dev] Yesterday's Taproot activation meeting on IRC",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2021-04-14T11:58:58",
                "message_text_only": "Yesterday there was a Taproot activation meeting on the\n##taproot-activation Freenode channel.\n\nThe agenda was posted in advance to the mailing list by BitcoinMechanic.\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018769.html\n\nThe conversation log is here:\nhttp://gnusha.org/taproot-activation/2021-04-13.log\n\nDiscussion focused on an alternative release to Bitcoin Core with the\nnaming of the release not yet finalized. Some participants expressed\nconcern of having \"Bitcoin Core\" in the name e.g. \"Bitcoin Core +\nTaproot\" as it would be confusing to users and give them the mistaken\nimpression that it had been signed off by Bitcoin Core maintainers.\n\nThe activation mechanism(s) for this alternative release is Speedy\nTrial (BIP 8, consistent use of block height) followed by BIP 8 (1\nyear, LOT=true). The BIP 8 (1 year, LOT=true) is only started assuming\nTaproot hasn't activated during the Speedy Trial deployment.\n\nDraft release notes for this alternative release are here:\nhttps://docs.google.com/document/d/1Uhn1SEDMAqQkzkPZ4B5lPTSjUFEXKPndt_oBI4eUm7A/edit?usp=sharing\n\nThe GitHub repo for this alternative release is here:\nhttps://github.com/BitcoinActivation/bitcoin\n\nTo compare this to the most likely activation mechanism(s) in Bitcoin\nCore at this point. If the Core PR #21377 is merged in its current\nform then the activation mechanism in Bitcoin Core will be Speedy\nTrial (BIP to be decided, mix of block height and MTP). The starttime\nand timeout will use MTP and the activation point will use block\nheight.\n\nThe Core PR #21377 is here: https://github.com/bitcoin/bitcoin/pull/21377\n\nIn addition a BIP PR for the Core release has been opened here with\nsuggested finalized parameters:\nhttps://github.com/bitcoin/bips/pull/1104\n\nIf these plans continue as is Bitcoin Core and this alternative\nrelease won't be entirely compatible due to startheight and timeout\nbeing defined according to MTP and block height respectively. In the\nmajority of cases they should both activate at the same block height\n(or not activate) but there are unlikely edge cases where one\nactivates and one doesn't (in addition to a possible timewarp attack\non MTP).\n\nThe use of MTP in Speedy Trial for Bitcoin Core has been discussed\nextensively and reviewers' opinions are summarized here:\nhttps://github.com/bitcoin/bitcoin/pull/21377#issuecomment-818758277\n\n>From this point on I will try to stay as neutral as I can and just\nsummarize the facts to keep this list informed but anyone can review\nmy past mailing list posts to get my personal views if you are\ninterested.\n\nAs a reminder anyone can host a meeting on the ##taproot-activation\nchannel. All they need to do is contact me to book a time slot and\nideally post an agenda to this mailing list in advance of the meeting.\nThat meeting host will have the ability to issue warnings and if\nnecessary kick participants if the meeting host feels they are\ndisrupting the meeting or diverting conversation from the agenda.\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3"
            }
        ],
        "thread_summary": {
            "title": "Yesterday's Taproot activation meeting on IRC",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Michael Folkson"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3117
        }
    },
    {
        "title": "[bitcoin-dev] Proposed Improvements To addr Relay",
        "thread_messages": [
            {
                "author": "Amiti Uttarwar",
                "date": "2021-04-14T20:59:35",
                "message_text_only": "Hi all,\n\nI\u2019m proposing a change to addr relay in Bitcoin Core with the intention of reducing \u201caddr blackholes\u201d. At the current stage, I am most interested in understanding whether this change would have negative consequences for other software on the network. \n\nExposure to a diverse set of addresses is important for nodes to be protected against network partitions or eclipse attacks. Ensuring addr messages propagate well is fundamental to the success of the network. In the Bitcoin p2p protocol, there are two main ways for nodes to communicate about addresses: addr gossip and getaddr requests. \n\nBitcoin Core will respond to a maximum of one getaddr message for each inbound peer. Thus, the main ongoing method for updating which addresses a node knows about is through addr gossip. Self-advertisements initiate a new addr message to each peer approximately once a day. When a Bitcoin Core node receives an addr message that contains 10 or fewer addresses, it will forward them to 1-2 peers. Forwarding addresses to peers who will not relay them further effectively \u201cblackholes\u201d the message, reducing the ability for the addr message to successfully propagate through the network.\n\nAlthough we cannot prevent addr blackholes in malicious cases, we can improve it for the more common honest cases, and reduce the overall likelihood of occurrence. Two known instances in which an honest peer would not participate in addr relay are 1. If they have opened a block-relay-only connection or 2. If they are a light client. The current blackhole behavior with block-relay-only connections is acceptable since Bitcoin Core nodes have a maximum of 2 outbound block-relay-only connections. However, improving this behavior is a prerequisite to increasing that number.\n\nMy proposal for Bitcoin Core is to identify whether or not an inbound connection is a candidate for forwarding addrs based on whether it has sent an addr related message (addr, addrv2, getaddr, sendaddrv2) over the connection. The code for this proposal can be found here: https://github.com/bitcoin/bitcoin/pull/21528. This would allow nodes to avoid sending addresses to honest connections which never intended to participate in address relay on the link. \n\nThis proposed change in behavior could be problematic if there is software on the network that is relying on receiving addr messages, but never initiates an addr related message. (This could be easily remedied by updating the software to send a getaddr to its outbound connections.) If anyone is aware of software with this behavior, could you please point me towards it? This would be very helpful to identify if #21528 is a viable approach. \n\nThank you,\nAmiti"
            }
        ],
        "thread_summary": {
            "title": "Proposed Improvements To addr Relay",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Amiti Uttarwar"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2686
        }
    },
    {
        "title": "[bitcoin-dev] BIP - limiting OP_RETURN / HF",
        "thread_messages": [
            {
                "author": "Christopher Gilliard",
                "date": "2021-04-16T07:45:15",
                "message_text_only": "I have created a BIP which can be found here:\nhttps://github.com/cgilliard/bips/blob/notarization/bip-XXXX.mediawiki\n\nI'm sending this email to start the discussion regarding this proposal. If\nthere are any comments/suggestions, please let me know.\n\nRegards,\nChris\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210416/deb99d49/attachment.html>"
            },
            {
                "author": "Russell O'Connor",
                "date": "2021-04-16T13:56:11",
                "message_text_only": "Firstly, a minor point is that your proposal is a soft-fork, not a\nhard-fork.\n\nBut more importantly, adding limitations on OP_RETURN transactions is not\nhelpful.  Users who want to embed arbitrary data in their transactions can\nalways do so by encoding their data inside the values of legacy\nmulti-signature scriptpubkeys (pubkeys can be generated without knowing the\nprivate key in order to encode non-key related data).  Not only can users\ndo this, users have done this in the past.  However, this behaviour is\nproblematic because such multi-signature \"data\" scriptpubkeys are\nindistinguishable from \"real\" multisignature scriptpubkeys, and thus must\nbe kept in the UTXO set.  This differs from outputs using OP_RETURN which\nare provably unspendable, and therefore can be safely omitted from the UTXO\nset.\n\nThus, given that it is otherwise impossible to stop people from putting\narbitrary data values into their transactions, then we rather encourage\npeople who are going to encode their arbitrary data in transaction to use\nthe OP_RETURN outputs in order to avoid UTXO bloat.\n\nAlso, as it stands, fees already nudge various participants to consolidate\ntheir data in the way that you suggest they do.\n\nOn Fri, Apr 16, 2021 at 9:32 AM Christopher Gilliard via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I have created a BIP which can be found here:\n> https://github.com/cgilliard/bips/blob/notarization/bip-XXXX.mediawiki\n>\n> I'm sending this email to start the discussion regarding this proposal. If\n> there are any comments/suggestions, please let me know.\n>\n> Regards,\n> Chris\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210416/d620ca08/attachment-0001.html>"
            },
            {
                "author": "Christopher Gilliard",
                "date": "2021-04-16T15:34:33",
                "message_text_only": ">> But more importantly, adding limitations on OP_RETURN transactions is\nnot helpful.  Users who want to embed arbitrary data in their transactions\ncan always do so by encoding their data inside the values of legacy\nmulti-signature scriptpubkeys (pubkeys can be generated without knowing the\nprivate key in order to encode non-key related data).  Not only can users\ndo this, users have done this in the past.  However, this behaviour is\nproblematic because such multi-signature \"data\" scriptpubkeys are\nindistinguishable from \"real\" multisignature scriptpubkeys, and thus must\nbe kept in the UTXO set.  This differs from outputs using OP_RETURN which\nare provably unspendable, and therefore can be safely omitted from the UTXO\nset.\n\nThis sounds like a good justification to remove the legacy multi-signature\ncapabilities as well.\n\n>> Thus, given that it is otherwise impossible to stop people from putting\narbitrary data values into their transactions, then we rather encourage\npeople who are going to encode their arbitrary data in transaction to use\nthe OP_RETURN outputs in order to avoid UTXO bloat.\n\nYou can't make it completely impossible to do that, but you can make it\nharder and at the same time you can provide a solution for doing what they\nwant to do.\n\nOn Fri, Apr 16, 2021 at 1:56 PM Russell O'Connor <roconnor at blockstream.com>\nwrote:\n\n> Firstly, a minor point is that your proposal is a soft-fork, not a\n> hard-fork.\n>\n> But more importantly, adding limitations on OP_RETURN transactions is not\n> helpful.  Users who want to embed arbitrary data in their transactions can\n> always do so by encoding their data inside the values of legacy\n> multi-signature scriptpubkeys (pubkeys can be generated without knowing the\n> private key in order to encode non-key related data).  Not only can users\n> do this, users have done this in the past.  However, this behaviour is\n> problematic because such multi-signature \"data\" scriptpubkeys are\n> indistinguishable from \"real\" multisignature scriptpubkeys, and thus must\n> be kept in the UTXO set.  This differs from outputs using OP_RETURN which\n> are provably unspendable, and therefore can be safely omitted from the UTXO\n> set.\n>\n> Thus, given that it is otherwise impossible to stop people from putting\n> arbitrary data values into their transactions, then we rather encourage\n> people who are going to encode their arbitrary data in transaction to use\n> the OP_RETURN outputs in order to avoid UTXO bloat.\n>\n> Also, as it stands, fees already nudge various participants to consolidate\n> their data in the way that you suggest they do.\n>\n> On Fri, Apr 16, 2021 at 9:32 AM Christopher Gilliard via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> I have created a BIP which can be found here:\n>> https://github.com/cgilliard/bips/blob/notarization/bip-XXXX.mediawiki\n>>\n>> I'm sending this email to start the discussion regarding this proposal.\n>> If there are any comments/suggestions, please let me know.\n>>\n>> Regards,\n>> Chris\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210416/ac1b035a/attachment.html>"
            },
            {
                "author": "Andrew Poelstra",
                "date": "2021-04-16T15:55:47",
                "message_text_only": "On Fri, Apr 16, 2021 at 03:34:33PM +0000, Christopher Gilliard via bitcoin-dev wrote:\n> This sounds like a good justification to remove the legacy multi-signature\n> capabilities as well.\n>\n\nDoing so would confiscate coins, and also it is impossible to remove\nlegacy multisignatures in general without gutting almost all of Script.\n \n> >> Thus, given that it is otherwise impossible to stop people from putting\n> arbitrary data values into their transactions, then we rather encourage\n> people who are going to encode their arbitrary data in transaction to use\n> the OP_RETURN outputs in order to avoid UTXO bloat.\n> \n> You can't make it completely impossible to do that, but you can make it\n> harder and at the same time you can provide a solution for doing what they\n> want to do.\n>\n\nI don't think you can even make it harder in a meaningful sense. There is\ntoo much flexibility in transaction data.\n \n-- \nAndrew Poelstra\nDirector of Research, Blockstream\nEmail: apoelstra at wpsoftware.net\nWeb:   https://www.wpsoftware.net/andrew\n\nThe sun is always shining in space\n    -Justin Lewis-Webster"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2021-04-16T23:52:48",
                "message_text_only": "Good morning Christopher,\n\n> >> But more importantly, adding limitations on OP_RETURN transactions is not helpful.\u00a0 Users who want to embed arbitrary data in their transactions can always do so by encoding their data inside the values of legacy multi-signature scriptpubkeys (pubkeys can be generated without knowing the private key in order to encode non-key related data).\u00a0 Not only can users do this, users have done this in the past.\u00a0 However, this behaviour is problematic because such multi-signature \"data\" scriptpubkeys are indistinguishable from \"real\" multisignature scriptpubkeys, and thus must be kept in the UTXO set.\u00a0 This differs from outputs using OP_RETURN which are provably unspendable, and therefore can be safely omitted from the UTXO set.\n>\n> This sounds like a good justification to remove the legacy multi-signature capabilities as well.\n\nThe same technique can be used on P2PKH as well --- the \"pubkey hash\" need not be a hash of a public key, it can be a 20-byte commitment, or even an ASCII message like \"ZmnSCPxj is the best\" (20 characters, I counted).\nThere is nothing that *can* check if the hash of a public key is indeed the hash of a public key unless you actually reveal the public key.\n\nIf you need a 32-byte commitment, a P2WSH would work --- again the \"script hash\" need not be a hash of a script, it can be any 32-byte commitment.\n\nIn all these cases you have to waste 547 satoshi, but that tends to be small compared to tx fees currently.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Christopher Gilliard",
                "date": "2021-04-17T03:57:55",
                "message_text_only": "Thanks ZmnSCPxj. Yes, I agree there are many ways to embed arbitrary data\nin the blockchain and it's not feasible to block all of them. That is why\nit's important to, at the same time as limiting the OP_RETURN to one per\nblock, also propose and implement a layer 2 solution for timestamping\nso people have a clear and simple upgrade path. That is what I will be\ndiscussing in one of the BIPs I intend to release early next week.\n\nOn Fri, Apr 16, 2021 at 11:52 PM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n\n> Good morning Christopher,\n>\n> > >> But more importantly, adding limitations on OP_RETURN transactions is\n> not helpful.  Users who want to embed arbitrary data in their transactions\n> can always do so by encoding their data inside the values of legacy\n> multi-signature scriptpubkeys (pubkeys can be generated without knowing the\n> private key in order to encode non-key related data).  Not only can users\n> do this, users have done this in the past.  However, this behaviour is\n> problematic because such multi-signature \"data\" scriptpubkeys are\n> indistinguishable from \"real\" multisignature scriptpubkeys, and thus must\n> be kept in the UTXO set.  This differs from outputs using OP_RETURN which\n> are provably unspendable, and therefore can be safely omitted from the UTXO\n> set.\n> >\n> > This sounds like a good justification to remove the legacy\n> multi-signature capabilities as well.\n>\n> The same technique can be used on P2PKH as well --- the \"pubkey hash\" need\n> not be a hash of a public key, it can be a 20-byte commitment, or even an\n> ASCII message like \"ZmnSCPxj is the best\" (20 characters, I counted).\n> There is nothing that *can* check if the hash of a public key is indeed\n> the hash of a public key unless you actually reveal the public key.\n>\n> If you need a 32-byte commitment, a P2WSH would work --- again the \"script\n> hash\" need not be a hash of a script, it can be any 32-byte commitment.\n>\n> In all these cases you have to waste 547 satoshi, but that tends to be\n> small compared to tx fees currently.\n>\n> Regards,\n> ZmnSCPxj\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210417/3299b183/attachment-0001.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2021-04-17T15:50:08",
                "message_text_only": "On Sat, Apr 17, 2021 at 03:57:55AM +0000, Christopher Gilliard via bitcoin-dev wrote:\n> Thanks ZmnSCPxj. Yes, I agree there are many ways to embed arbitrary data\n> in the blockchain and it's not feasible to block all of them. That is why\n> it's important to, at the same time as limiting the OP_RETURN to one per\n> block, also propose and implement a layer 2 solution for timestamping\n> so people have a clear and simple upgrade path. That is what I will be\n> discussing in one of the BIPs I intend to release early next week.\n\nNote that an aggregated timestamping service already exists:\n\nhttps://petertodd.org/2016/opentimestamps-announcement\n\nBut timestamping is useless for most things people want to do, as it can't\ncommit to a unique history. It merely proves something existed in the past. For\nuniqueness, you need something like:\n\nhttps://petertodd.org/2017/scalable-single-use-seal-asset-transfer\n\n\nAnyway, at current fees being what they are there's no compelling reason to try\nto prevent people from embedding data in the Bitcoin block chain with consensus\nchanges. Economics is preventing that just fine.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210417/8f8b5a12/attachment.sig>"
            },
            {
                "author": "Christopher Gilliard",
                "date": "2021-04-17T16:57:34",
                "message_text_only": "Peter, thanks for the links. I'm aware that there are other timestamping\naggregation services that already exist, but I had some different ideas\nthat integrate into some other services. Also thanks for sending the link\nto the single use seal asset transfer. I will take a look at that.\n\nOn Sat, Apr 17, 2021 at 3:50 PM Peter Todd <pete at petertodd.org> wrote:\n\n> On Sat, Apr 17, 2021 at 03:57:55AM +0000, Christopher Gilliard via\n> bitcoin-dev wrote:\n> > Thanks ZmnSCPxj. Yes, I agree there are many ways to embed arbitrary data\n> > in the blockchain and it's not feasible to block all of them. That is why\n> > it's important to, at the same time as limiting the OP_RETURN to one per\n> > block, also propose and implement a layer 2 solution for timestamping\n> > so people have a clear and simple upgrade path. That is what I will be\n> > discussing in one of the BIPs I intend to release early next week.\n>\n> Note that an aggregated timestamping service already exists:\n>\n> https://petertodd.org/2016/opentimestamps-announcement\n>\n> But timestamping is useless for most things people want to do, as it can't\n> commit to a unique history. It merely proves something existed in the\n> past. For\n> uniqueness, you need something like:\n>\n> https://petertodd.org/2017/scalable-single-use-seal-asset-transfer\n>\n>\n> Anyway, at current fees being what they are there's no compelling reason\n> to try\n> to prevent people from embedding data in the Bitcoin block chain with\n> consensus\n> changes. Economics is preventing that just fine.\n>\n> --\n> https://petertodd.org 'peter'[:-1]@petertodd.org\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210417/618da7c6/attachment.html>"
            },
            {
                "author": "Clark Moody",
                "date": "2021-04-16T13:59:01",
                "message_text_only": "Maybe I missed something, but why does this change require a hard fork?\n\nYou don't seem to provide any data as part of your rationale, so I'll\nprovide some context. As it stands, the chain size sits around 386 GB, with\nOP_RETURN data accounting for 2.5 GB of that.\n\nI'm also concerned about the coordination required to get into The One\nOP_RETURN Per Block, as this certainly requires some measure of\ncentralization of that Merkle Tree construction.\n\nSome of those OP_RETURN outputs have non-zero value. As such, those outputs\nare provably unspendable, and they are essentially paying the rest of the\ncoin holders via supply deflation.\n\nFinally, Bitcoin nodes may safely discard OP_RETURN outputs at any time,\nsince they are unspendable. Thus, nodes can clear a few GB of disk space\nwhenever they need it, but that data is less than 1% of the total chain\nsize at the time of writing.\n\n\n-Clark\n\n\nOn Fri, Apr 16, 2021 at 8:32 AM Christopher Gilliard via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I have created a BIP which can be found here:\n> https://github.com/cgilliard/bips/blob/notarization/bip-XXXX.mediawiki\n>\n> I'm sending this email to start the discussion regarding this proposal. If\n> there are any comments/suggestions, please let me know.\n>\n> Regards,\n> Chris\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210416/7954d8e1/attachment.html>"
            },
            {
                "author": "Christopher Gilliard",
                "date": "2021-04-16T15:33:40",
                "message_text_only": ">>Maybe I missed something, but why does this change require a hard fork?\n\nI guess you are right that it doesn't technically require a hard fork, but\nI see this proposal as more likely being merged with other hard fork or\nsoft fork features. It depends on which upgrades are happening at the time.\nIf there's a specific soft fork being proposed to merge this proposal with,\nI can update it.\n\n>> I'm also concerned about the coordination required to get into The One\nOP_RETURN Per Block, as this certainly requires some measure of\ncentralization of that Merkle Tree construction.\n\nThis will be discussed further in a future BIP, but the basic idea is that\neach miner can run an additional piece of software that builds the tree\nstructure. It's much like submitting a transaction to the network today, if\none of the miners does not accept it, another likely will.\n\n>> Some of those OP_RETURN outputs have non-zero value. As such, those\noutputs are provably unspendable, and they are essentially paying the rest\nof the coin holders via supply deflation.\n\nGood point, there are other ways to do proof of burn.\n\n>> Finally, Bitcoin nodes may safely discard OP_RETURN outputs at any time,\nsince they are unspendable. Thus, nodes can clear a few GB of disk space\nwhenever they need it, but that data is less than 1% of the total chain\nsize at the time of writing.\n\nYes, but that doesn't affect IBD.\n\nOn Fri, Apr 16, 2021 at 1:59 PM Clark Moody <clark at clarkmoody.com> wrote:\n\n> Maybe I missed something, but why does this change require a hard fork?\n>\n> You don't seem to provide any data as part of your rationale, so I'll\n> provide some context. As it stands, the chain size sits around 386 GB, with\n> OP_RETURN data accounting for 2.5 GB of that.\n>\n> I'm also concerned about the coordination required to get into The One\n> OP_RETURN Per Block, as this certainly requires some measure of\n> centralization of that Merkle Tree construction.\n>\n> Some of those OP_RETURN outputs have non-zero value. As such, those\n> outputs are provably unspendable, and they are essentially paying the rest\n> of the coin holders via supply deflation.\n>\n> Finally, Bitcoin nodes may safely discard OP_RETURN outputs at any time,\n> since they are unspendable. Thus, nodes can clear a few GB of disk space\n> whenever they need it, but that data is less than 1% of the total chain\n> size at the time of writing.\n>\n>\n> -Clark\n>\n>\n> On Fri, Apr 16, 2021 at 8:32 AM Christopher Gilliard via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> I have created a BIP which can be found here:\n>> https://github.com/cgilliard/bips/blob/notarization/bip-XXXX.mediawiki\n>>\n>> I'm sending this email to start the discussion regarding this proposal.\n>> If there are any comments/suggestions, please let me know.\n>>\n>> Regards,\n>> Chris\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210416/0bb514ec/attachment-0001.html>"
            },
            {
                "author": "Jeremy",
                "date": "2021-04-16T16:32:13",
                "message_text_only": "NACK -- I happen to have a vault where I made emergency backup pre-signed\ntransactions containing two OP_RETURN outputs and have subsequently lost\nthe private key in an unfortunate boating incident.\n\nThis proposed rule change would serve to confiscate my funds.\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n\n\nOn Fri, Apr 16, 2021 at 6:32 AM Christopher Gilliard via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I have created a BIP which can be found here:\n> https://github.com/cgilliard/bips/blob/notarization/bip-XXXX.mediawiki\n>\n> I'm sending this email to start the discussion regarding this proposal. If\n> there are any comments/suggestions, please let me know.\n>\n> Regards,\n> Chris\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210416/c25d7fb1/attachment.html>"
            },
            {
                "author": "Christopher Gilliard",
                "date": "2021-04-16T17:05:12",
                "message_text_only": "Hah! Very funny! \ud83d\ude01 I am certain that this proposal can be implemented in a\nway that doesn't confiscate your \"long lost\" stash and I may even be\nwilling to fund a bounty for a deep sea diving expedition to find those\nkeys for a unit test.\n\nOn Fri, Apr 16, 2021 at 4:32 PM Jeremy <jlrubin at mit.edu> wrote:\n\n> NACK -- I happen to have a vault where I made emergency backup pre-signed\n> transactions containing two OP_RETURN outputs and have subsequently lost\n> the private key in an unfortunate boating incident.\n>\n> This proposed rule change would serve to confiscate my funds.\n> --\n> @JeremyRubin <https://twitter.com/JeremyRubin>\n> <https://twitter.com/JeremyRubin>\n>\n>\n> On Fri, Apr 16, 2021 at 6:32 AM Christopher Gilliard via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> I have created a BIP which can be found here:\n>> https://github.com/cgilliard/bips/blob/notarization/bip-XXXX.mediawiki\n>>\n>> I'm sending this email to start the discussion regarding this proposal.\n>> If there are any comments/suggestions, please let me know.\n>>\n>> Regards,\n>> Chris\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210416/2a3f793d/attachment-0001.html>"
            },
            {
                "author": "Jeremy",
                "date": "2021-04-16T18:00:29",
                "message_text_only": "For every workaround, someone may have a long lost stash that you'd be\nconfiscating :)\n\nhttps://bitcoin.stackexchange.com/questions/90127/why-does-this-coinbase-transaction-have-two-op-return-outputs\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210416/cb1a5535/attachment.html>"
            },
            {
                "author": "Kostas Karasavvas",
                "date": "2021-04-16T19:15:28",
                "message_text_only": "Hi Christopher,\n\nSome feedback:\n\n\"OP_RETURN is limited to 40 bytes of data.\"\nIt is 80 bytes.\n\n\"A future BIP proposing such a layer two protocol will be forthcoming.\"\nSo what is this BIP about? Just saying that it would be a nice idea? This\nBIP should be the one that would go through this L2 suggestion. If one root\nOP_RETURN substitutes all the rest it should say how that would be done...\nwhere would the merkle proofs be stored, what are the trust\nassumptions that we need to make, etc.\n\n\"Objections to this proposal\" section\nI agree with others re hard-fork, which would be a good thing of course.\nMy main objection with this proposal is that I don't see a proposal. It\nseems like wishful thinking... if only we could substitute all the\nOP_RETURNs with one :-)\n\nWe have to make sure that a proposal like this (L2, etc.) would make sure\nthat there are incentives that justify the added complexity for the users.\nMultisig is not the only way data could be stored the wrong way; P2PK,\nP2PKH, P2SH, P2WPKH, P2WSH can also be used. If the incentives are not good\nenough people would start using these UTXO-bloat-heavy alternatives.\n\nThere are a multitude of L2's (kind-of) that do this 'aggregation' of data\nhashes using merkle trees. Factom is adding a single merkle root per\nbitcoin block for the millions upon millions of records (of thousand of\nusers) that they keep in their network. Opentimestamps, tierion,\nblockstacks and others do a similar thing. I have investigated several of\nthose in the past, for one of my projects, but I ended up using plain old\nOP_RETURN because the overhead of their (L2-like) solution and trust\nassumptions where not to my liking; at least for my use case. They were\npretty solid/useful for other use cases.\n\nUnless the proposed L2 is flexible/generic enough it would really prohibit\nthis L2 innovation that OP_RETURN allowed (see above).\n\n\n\nOn Fri, Apr 16, 2021 at 4:32 PM Christopher Gilliard via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I have created a BIP which can be found here:\n> https://github.com/cgilliard/bips/blob/notarization/bip-XXXX.mediawiki\n>\n> I'm sending this email to start the discussion regarding this proposal. If\n> there are any comments/suggestions, please let me know.\n>\n> Regards,\n> Chris\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n-- \nKonstantinos A. Karasavvas\nSoftware Architect, Blockchain Engineer, Researcher, Educator\nhttps://twitter.com/kkarasavvas\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210416/7a11fc7d/attachment.html>"
            },
            {
                "author": "Christopher Gilliard",
                "date": "2021-04-16T20:12:07",
                "message_text_only": "Thanks for the feedback. Will update the 40 bytes to 80 bytes (40 bytes was\nthe previous value, but it has since been updated to 80 so that's correct).\nRegarding the L2 proposal. I think the BIPs I am working on will address\nyour questions and I'm hoping to have two more out early next week so\nplease stay tuned. I'm open to merging those BIPs into this BIP or\nvice-versa, but for the sake of making things more readable I broke them\ndown into several BIPs for the time being.\n\nOn Fri, Apr 16, 2021 at 7:15 PM Kostas Karasavvas <kkarasavvas at gmail.com>\nwrote:\n\n> Hi Christopher,\n>\n> Some feedback:\n>\n> \"OP_RETURN is limited to 40 bytes of data.\"\n> It is 80 bytes.\n>\n> \"A future BIP proposing such a layer two protocol will be forthcoming.\"\n> So what is this BIP about? Just saying that it would be a nice idea? This\n> BIP should be the one that would go through this L2 suggestion. If one root\n> OP_RETURN substitutes all the rest it should say how that would be done...\n> where would the merkle proofs be stored, what are the trust\n> assumptions that we need to make, etc.\n>\n> \"Objections to this proposal\" section\n> I agree with others re hard-fork, which would be a good thing of course.\n> My main objection with this proposal is that I don't see a proposal. It\n> seems like wishful thinking... if only we could substitute all the\n> OP_RETURNs with one :-)\n>\n> We have to make sure that a proposal like this (L2, etc.) would make sure\n> that there are incentives that justify the added complexity for the users.\n> Multisig is not the only way data could be stored the wrong way; P2PK,\n> P2PKH, P2SH, P2WPKH, P2WSH can also be used. If the incentives are not good\n> enough people would start using these UTXO-bloat-heavy alternatives.\n>\n> There are a multitude of L2's (kind-of) that do this 'aggregation' of data\n> hashes using merkle trees. Factom is adding a single merkle root per\n> bitcoin block for the millions upon millions of records (of thousand of\n> users) that they keep in their network. Opentimestamps, tierion,\n> blockstacks and others do a similar thing. I have investigated several of\n> those in the past, for one of my projects, but I ended up using plain old\n> OP_RETURN because the overhead of their (L2-like) solution and trust\n> assumptions where not to my liking; at least for my use case. They were\n> pretty solid/useful for other use cases.\n>\n> Unless the proposed L2 is flexible/generic enough it would really prohibit\n> this L2 innovation that OP_RETURN allowed (see above).\n>\n>\n>\n> On Fri, Apr 16, 2021 at 4:32 PM Christopher Gilliard via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> I have created a BIP which can be found here:\n>> https://github.com/cgilliard/bips/blob/notarization/bip-XXXX.mediawiki\n>>\n>> I'm sending this email to start the discussion regarding this proposal.\n>> If there are any comments/suggestions, please let me know.\n>>\n>> Regards,\n>> Chris\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> --\n> Konstantinos A. Karasavvas\n> Software Architect, Blockchain Engineer, Researcher, Educator\n> https://twitter.com/kkarasavvas\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210416/33566e5b/attachment-0001.html>"
            },
            {
                "author": "Kostas Karasavvas",
                "date": "2021-04-17T07:41:39",
                "message_text_only": "Indeed, it was 40 then 80 then 40 again and then 80 at the end (or\nsomething like this.. not sure about the exact history!).\n\nLooking forward to the proposal(s).\n\nOn Fri, Apr 16, 2021 at 11:12 PM Christopher Gilliard <\nchristopher.gilliard at gmail.com> wrote:\n\n> Thanks for the feedback. Will update the 40 bytes to 80 bytes (40 bytes\n> was the previous value, but it has since been updated to 80 so that's\n> correct). Regarding the L2 proposal. I think the BIPs I am working on will\n> address your questions and I'm hoping to have two more out early next week\n> so please stay tuned. I'm open to merging those BIPs into this BIP or\n> vice-versa, but for the sake of making things more readable I broke them\n> down into several BIPs for the time being.\n>\n> On Fri, Apr 16, 2021 at 7:15 PM Kostas Karasavvas <kkarasavvas at gmail.com>\n> wrote:\n>\n>> Hi Christopher,\n>>\n>> Some feedback:\n>>\n>> \"OP_RETURN is limited to 40 bytes of data.\"\n>> It is 80 bytes.\n>>\n>> \"A future BIP proposing such a layer two protocol will be forthcoming.\"\n>> So what is this BIP about? Just saying that it would be a nice idea? This\n>> BIP should be the one that would go through this L2 suggestion. If one root\n>> OP_RETURN substitutes all the rest it should say how that would be done...\n>> where would the merkle proofs be stored, what are the trust\n>> assumptions that we need to make, etc.\n>>\n>> \"Objections to this proposal\" section\n>> I agree with others re hard-fork, which would be a good thing of course.\n>> My main objection with this proposal is that I don't see a proposal. It\n>> seems like wishful thinking... if only we could substitute all the\n>> OP_RETURNs with one :-)\n>>\n>> We have to make sure that a proposal like this (L2, etc.) would make sure\n>> that there are incentives that justify the added complexity for the users.\n>> Multisig is not the only way data could be stored the wrong way; P2PK,\n>> P2PKH, P2SH, P2WPKH, P2WSH can also be used. If the incentives are not good\n>> enough people would start using these UTXO-bloat-heavy alternatives.\n>>\n>> There are a multitude of L2's (kind-of) that do this 'aggregation' of\n>> data hashes using merkle trees. Factom is adding a single merkle root per\n>> bitcoin block for the millions upon millions of records (of thousand of\n>> users) that they keep in their network. Opentimestamps, tierion,\n>> blockstacks and others do a similar thing. I have investigated several of\n>> those in the past, for one of my projects, but I ended up using plain old\n>> OP_RETURN because the overhead of their (L2-like) solution and trust\n>> assumptions where not to my liking; at least for my use case. They were\n>> pretty solid/useful for other use cases.\n>>\n>> Unless the proposed L2 is flexible/generic enough it would really\n>> prohibit this L2 innovation that OP_RETURN allowed (see above).\n>>\n>>\n>>\n>> On Fri, Apr 16, 2021 at 4:32 PM Christopher Gilliard via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> I have created a BIP which can be found here:\n>>> https://github.com/cgilliard/bips/blob/notarization/bip-XXXX.mediawiki\n>>>\n>>> I'm sending this email to start the discussion regarding this proposal.\n>>> If there are any comments/suggestions, please let me know.\n>>>\n>>> Regards,\n>>> Chris\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n>>\n>> --\n>> Konstantinos A. Karasavvas\n>> Software Architect, Blockchain Engineer, Researcher, Educator\n>> https://twitter.com/kkarasavvas\n>>\n>\n\n-- \nKonstantinos A. Karasavvas\nSoftware Architect, Blockchain Engineer, Researcher, Educator\nhttps://twitter.com/kkarasavvas\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210417/6f3da8fa/attachment-0001.html>"
            },
            {
                "author": "Ruben Somsen",
                "date": "2021-04-16T20:30:06",
                "message_text_only": "Hi Chris,\n\nI agree with all the points that were made by others. You should also be\naware that layer two ideas like yours have already been explored, both by\nmyself and others. Allowing one hash per block allows for what I call\n\"fee-bidding Blind Merged-Mining\" (BMM), which as far as I know was first\nproposed by Paul Storc for Drivechains.[0]\n\nIf only one hash is allowed per block, then those who wish to utilize the\nhash will have to out-bid each other (\"fee-bidding\"). This hash can then be\nused to create another chain (\"merged-mining\"), while the Bitcoin miners do\nnot have to be aware of this other chain (\"blind\"). There are also non\nfee-bidding variants that function e.g. by burning or locking up bitcoins\nin order to create consensus.\n\nAs it turns out, fee-bidding BMM can be achieved using only a covenant\nstructure for transactions.[1] You'd have to create a sequence of\ntransactions (one per block), to which a hash can be attached. These can\nsimply be pre-signed transactions (requires forgetting a key, but the worst\nthat can happen is that the chain halts), or an actual covenant using\neither sighash_anyprevout or op_ctv (we don't have these yet) \u2013 no\nspecialized soft fork (or hard fork) is required.\n\nYou might think any decentralized alternative chain requires an altcoin,\nbut this can also be avoided with a perpetual one-way peg.[2] For more\ndetails, I recommend watching this video of the full concept, which I call\n\"spacechains\": https://youtu.be/N2ow4Q34Jeg\n\n-- Ruben Somsen\n\n\n\n[0] Blind Merged-Mining for Drivechains:\nhttps://github.com/bitcoin/bips/blob/master/bip-0301.mediawiki\n\n[1] Fee-bidding Blind Merged-Mining with covenants:\nhttps://gist.github.com/RubenSomsen/5e4be6d18e5fa526b17d8b34906b16a5\n\n[2] Perpetual one-way peg:\nhttps://medium.com/@RubenSomsen/21-million-bitcoins-to-rule-all-sidechains-the-perpetual-one-way-peg-96cb2f8ac302\n\nOn Fri, Apr 16, 2021 at 9:33 PM Kostas Karasavvas via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi Christopher,\n>\n> Some feedback:\n>\n> \"OP_RETURN is limited to 40 bytes of data.\"\n> It is 80 bytes.\n>\n> \"A future BIP proposing such a layer two protocol will be forthcoming.\"\n> So what is this BIP about? Just saying that it would be a nice idea? This\n> BIP should be the one that would go through this L2 suggestion. If one root\n> OP_RETURN substitutes all the rest it should say how that would be done...\n> where would the merkle proofs be stored, what are the trust\n> assumptions that we need to make, etc.\n>\n> \"Objections to this proposal\" section\n> I agree with others re hard-fork, which would be a good thing of course.\n> My main objection with this proposal is that I don't see a proposal. It\n> seems like wishful thinking... if only we could substitute all the\n> OP_RETURNs with one :-)\n>\n> We have to make sure that a proposal like this (L2, etc.) would make sure\n> that there are incentives that justify the added complexity for the users.\n> Multisig is not the only way data could be stored the wrong way; P2PK,\n> P2PKH, P2SH, P2WPKH, P2WSH can also be used. If the incentives are not good\n> enough people would start using these UTXO-bloat-heavy alternatives.\n>\n> There are a multitude of L2's (kind-of) that do this 'aggregation' of data\n> hashes using merkle trees. Factom is adding a single merkle root per\n> bitcoin block for the millions upon millions of records (of thousand of\n> users) that they keep in their network. Opentimestamps, tierion,\n> blockstacks and others do a similar thing. I have investigated several of\n> those in the past, for one of my projects, but I ended up using plain old\n> OP_RETURN because the overhead of their (L2-like) solution and trust\n> assumptions where not to my liking; at least for my use case. They were\n> pretty solid/useful for other use cases.\n>\n> Unless the proposed L2 is flexible/generic enough it would really prohibit\n> this L2 innovation that OP_RETURN allowed (see above).\n>\n>\n>\n> On Fri, Apr 16, 2021 at 4:32 PM Christopher Gilliard via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> I have created a BIP which can be found here:\n>> https://github.com/cgilliard/bips/blob/notarization/bip-XXXX.mediawiki\n>>\n>> I'm sending this email to start the discussion regarding this proposal.\n>> If there are any comments/suggestions, please let me know.\n>>\n>> Regards,\n>> Chris\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> --\n> Konstantinos A. Karasavvas\n> Software Architect, Blockchain Engineer, Researcher, Educator\n> https://twitter.com/kkarasavvas\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210416/1f3a90a5/attachment-0001.html>"
            },
            {
                "author": "Christopher Gilliard",
                "date": "2021-04-16T21:09:25",
                "message_text_only": "Thanks for the feedback. I will take at the links and the video and see if\nthere's anything that I can incorporate to the BIPs.\n\nOn Fri, Apr 16, 2021 at 8:30 PM Ruben Somsen <rsomsen at gmail.com> wrote:\n\n> Hi Chris,\n>\n> I agree with all the points that were made by others. You should also be\n> aware that layer two ideas like yours have already been explored, both by\n> myself and others. Allowing one hash per block allows for what I call\n> \"fee-bidding Blind Merged-Mining\" (BMM), which as far as I know was first\n> proposed by Paul Storc for Drivechains.[0]\n>\n> If only one hash is allowed per block, then those who wish to utilize the\n> hash will have to out-bid each other (\"fee-bidding\"). This hash can then be\n> used to create another chain (\"merged-mining\"), while the Bitcoin miners do\n> not have to be aware of this other chain (\"blind\"). There are also non\n> fee-bidding variants that function e.g. by burning or locking up bitcoins\n> in order to create consensus.\n>\n> As it turns out, fee-bidding BMM can be achieved using only a covenant\n> structure for transactions.[1] You'd have to create a sequence of\n> transactions (one per block), to which a hash can be attached. These can\n> simply be pre-signed transactions (requires forgetting a key, but the worst\n> that can happen is that the chain halts), or an actual covenant using\n> either sighash_anyprevout or op_ctv (we don't have these yet) \u2013 no\n> specialized soft fork (or hard fork) is required.\n>\n> You might think any decentralized alternative chain requires an altcoin,\n> but this can also be avoided with a perpetual one-way peg.[2] For more\n> details, I recommend watching this video of the full concept, which I call\n> \"spacechains\": https://youtu.be/N2ow4Q34Jeg\n>\n> -- Ruben Somsen\n>\n>\n>\n> [0] Blind Merged-Mining for Drivechains:\n> https://github.com/bitcoin/bips/blob/master/bip-0301.mediawiki\n>\n> [1] Fee-bidding Blind Merged-Mining with covenants:\n> https://gist.github.com/RubenSomsen/5e4be6d18e5fa526b17d8b34906b16a5\n>\n> [2] Perpetual one-way peg:\n> https://medium.com/@RubenSomsen/21-million-bitcoins-to-rule-all-sidechains-the-perpetual-one-way-peg-96cb2f8ac302\n>\n> On Fri, Apr 16, 2021 at 9:33 PM Kostas Karasavvas via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi Christopher,\n>>\n>> Some feedback:\n>>\n>> \"OP_RETURN is limited to 40 bytes of data.\"\n>> It is 80 bytes.\n>>\n>> \"A future BIP proposing such a layer two protocol will be forthcoming.\"\n>> So what is this BIP about? Just saying that it would be a nice idea? This\n>> BIP should be the one that would go through this L2 suggestion. If one root\n>> OP_RETURN substitutes all the rest it should say how that would be done...\n>> where would the merkle proofs be stored, what are the trust\n>> assumptions that we need to make, etc.\n>>\n>> \"Objections to this proposal\" section\n>> I agree with others re hard-fork, which would be a good thing of course.\n>> My main objection with this proposal is that I don't see a proposal. It\n>> seems like wishful thinking... if only we could substitute all the\n>> OP_RETURNs with one :-)\n>>\n>> We have to make sure that a proposal like this (L2, etc.) would make sure\n>> that there are incentives that justify the added complexity for the users.\n>> Multisig is not the only way data could be stored the wrong way; P2PK,\n>> P2PKH, P2SH, P2WPKH, P2WSH can also be used. If the incentives are not good\n>> enough people would start using these UTXO-bloat-heavy alternatives.\n>>\n>> There are a multitude of L2's (kind-of) that do this 'aggregation' of\n>> data hashes using merkle trees. Factom is adding a single merkle root per\n>> bitcoin block for the millions upon millions of records (of thousand of\n>> users) that they keep in their network. Opentimestamps, tierion,\n>> blockstacks and others do a similar thing. I have investigated several of\n>> those in the past, for one of my projects, but I ended up using plain old\n>> OP_RETURN because the overhead of their (L2-like) solution and trust\n>> assumptions where not to my liking; at least for my use case. They were\n>> pretty solid/useful for other use cases.\n>>\n>> Unless the proposed L2 is flexible/generic enough it would really\n>> prohibit this L2 innovation that OP_RETURN allowed (see above).\n>>\n>>\n>>\n>> On Fri, Apr 16, 2021 at 4:32 PM Christopher Gilliard via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> I have created a BIP which can be found here:\n>>> https://github.com/cgilliard/bips/blob/notarization/bip-XXXX.mediawiki\n>>>\n>>> I'm sending this email to start the discussion regarding this proposal.\n>>> If there are any comments/suggestions, please let me know.\n>>>\n>>> Regards,\n>>> Chris\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n>>\n>> --\n>> Konstantinos A. Karasavvas\n>> Software Architect, Blockchain Engineer, Researcher, Educator\n>> https://twitter.com/kkarasavvas\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210416/ea140bb4/attachment-0001.html>"
            },
            {
                "author": "yanmaani at cock.li",
                "date": "2021-04-20T01:23:12",
                "message_text_only": "> If only one hash is allowed per block, then those who wish to utilize \n> the hash will have to out-bid each other (\"fee-bidding\"). This hash can \n> then be used to create another chain (\"merged-mining\")\n\nMerged mining at present only needs one hash for a merkle root, and \nthat's stored in the coinbase. It would be even simpler to add the \nfollowing rules:\n\n1) No OP_RETURN transactions allowed at all\n2) If you want to commit data, do so in that one transaction in the \ncoinbase\n\nAlso curious about how you'd handle the payment - do I need to put in a \ntransaction that burns bitcoins for the tx fee? That isn't free in terms \nof storage either."
            },
            {
                "author": "Zach Greenwood",
                "date": "2021-04-20T08:45:31",
                "message_text_only": "[Note: this is my first post to the list]\n\nBusinesses storing data on-chain is undesirable but sadly unavoidable.\nTherefore one might as well *facilitate* data storage beyond just OP_RETURN\nby offering a more efficient way to store data on-chain, while still being\nalmost as expensive in use per byte of payload (i.e., data) compared to\nusing OP_RETURN.\n\nStoring data using OP_RETURN is still inefficient per byte of payload so a\nmore efficient dedicated data storing facility might be created that stores\nmore payload data per on-chain byte. Such a facility should be (marginally)\ncheaper to use per payload byte compared to using a hack such as OP_RETURN.\nThis would encourage the use of this facility in favor of OP_RETURN or\nother hacks, while at the same time dramatically reducing the footprint of\nstoring data on-chain.\n\nZac\n\nOn Tue, Apr 20, 2021 at 4:29 AM yanmaani--- via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> > If only one hash is allowed per block, then those who wish to utilize\n> > the hash will have to out-bid each other (\"fee-bidding\"). This hash can\n> > then be used to create another chain (\"merged-mining\")\n>\n> Merged mining at present only needs one hash for a merkle root, and\n> that's stored in the coinbase. It would be even simpler to add the\n> following rules:\n>\n> 1) No OP_RETURN transactions allowed at all\n> 2) If you want to commit data, do so in that one transaction in the\n> coinbase\n>\n> Also curious about how you'd handle the payment - do I need to put in a\n> transaction that burns bitcoins for the tx fee? That isn't free in terms\n> of storage either.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210420/3f57baae/attachment.html>"
            },
            {
                "author": "Christopher Gilliard",
                "date": "2021-04-20T17:12:35",
                "message_text_only": "Zach,\n\nThanks for the comments. I just sent out another email to the dev alias\nwith the other two BIPs that I mentioned last week. It is pending approval\nnow. I think it will talk about some of the things you mentioned. To avoid\nhaving a lot of comments about those BIPs on this thread, let's use the new\nthread for discussing those BIPs.\n\n--Chris\n\nOn Tue, Apr 20, 2021 at 1:45 AM Zach Greenwood <zachgrw at gmail.com> wrote:\n\n> [Note: this is my first post to the list]\n>\n> Businesses storing data on-chain is undesirable but sadly unavoidable.\n> Therefore one might as well *facilitate* data storage beyond just OP_RETURN\n> by offering a more efficient way to store data on-chain, while still being\n> almost as expensive in use per byte of payload (i.e., data) compared to\n> using OP_RETURN.\n>\n> Storing data using OP_RETURN is still inefficient per byte of payload so a\n> more efficient dedicated data storing facility might be created that stores\n> more payload data per on-chain byte. Such a facility should be (marginally)\n> cheaper to use per payload byte compared to using a hack such as OP_RETURN.\n> This would encourage the use of this facility in favor of OP_RETURN or\n> other hacks, while at the same time dramatically reducing the footprint of\n> storing data on-chain.\n>\n> Zac\n>\n> On Tue, Apr 20, 2021 at 4:29 AM yanmaani--- via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> > If only one hash is allowed per block, then those who wish to utilize\n>> > the hash will have to out-bid each other (\"fee-bidding\"). This hash can\n>> > then be used to create another chain (\"merged-mining\")\n>>\n>> Merged mining at present only needs one hash for a merkle root, and\n>> that's stored in the coinbase. It would be even simpler to add the\n>> following rules:\n>>\n>> 1) No OP_RETURN transactions allowed at all\n>> 2) If you want to commit data, do so in that one transaction in the\n>> coinbase\n>>\n>> Also curious about how you'd handle the payment - do I need to put in a\n>> transaction that burns bitcoins for the tx fee? That isn't free in terms\n>> of storage either.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210420/4995536f/attachment-0001.html>"
            },
            {
                "author": "Ruben Somsen",
                "date": "2021-04-20T19:07:00",
                "message_text_only": "Hi Yanmaani,\n\n>Merged mining at present only needs one hash for a merkle root, and that's\nstored in the coinbase.\n\nYes, but that method is not \"blind\", meaning BTC miners have to\nvalidate the merged-mined chain, which is a significant downside.\n\n>It would be even simpler to add the following rules\n\nThat would require a specific soft fork, whereas the method described in my\npost avoids doing that.\n\n>do I need to put in a transaction that burns bitcoins for the tx fee\n\nThe blind merged-mined chain (which I call a \"spacechain\") needs its own\nnative token in order to pay for fees. The mechanism I proposed for that is\nthe perpetual one-way peg, which allows fair \"spacecoin\" creation by\nburning BTC, and circumvents creating bad speculative altcoin incentives.\nAnyone can create a spacechain block and take the fees, and then try to get\nBTC miners to include it by paying a higher fee than others (via RBF).\n\n>That isn't free in terms of storage\n\nIt's not necessary for everyone to burn individually. My preferred design\nis to only let BMM block creators burn BTC, then others will have to buy\nspacecoins from them. This limits the potential burn outputs to one per\nblock (likely much less, because BTC will logically only get burned when\nspacecoin demand increases). It's also possible to create more spacechains\ninside the initial spacechain, at no additional storage cost to Bitcoin.\n\nI highly recommend checking out the links in my prior post\n<https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018803.html>\nif you wish to learn more, particularly the video\n<https://youtu.be/N2ow4Q34Jeg>.\n\nCheers,\nRuben\n\nOn Tue, Apr 20, 2021 at 3:23 AM <yanmaani at cock.li> wrote:\n\n> > If only one hash is allowed per block, then those who wish to utilize\n> > the hash will have to out-bid each other (\"fee-bidding\"). This hash can\n> > then be used to create another chain (\"merged-mining\")\n>\n> Merged mining at present only needs one hash for a merkle root, and\n> that's stored in the coinbase. It would be even simpler to add the\n> following rules:\n>\n> 1) No OP_RETURN transactions allowed at all\n> 2) If you want to commit data, do so in that one transaction in the\n> coinbase\n>\n> Also curious about how you'd handle the payment - do I need to put in a\n> transaction that burns bitcoins for the tx fee? That isn't free in terms\n> of storage either.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210420/1b718ee7/attachment.html>"
            },
            {
                "author": "yanmaani at cock.li",
                "date": "2021-04-20T01:22:51",
                "message_text_only": "This has already been discussed and proposed in various papers and \narticles, typically to replace SHA-256d with something else. It \nbasically works, but there's a some tiny issues:\n\n1) Who goes first?\n\nIf you first calculate the expensive PoW and then do a cheap SHA-256d \naround it, anyone can malleate it by changing the outer PoW.\n\nIf you first calculate the cheap SHA-256d and then do an expensive PoW \naround it, it would work, but then you would have to retool the P2P \nprotocol.\n\n2) What's the incentive for miners?\n\nIn a \"normal\" soft-fork, miners have the incentive to upgrade because \ntheir blocks will be orphaned if they don't, and even the old clients \nwon't accept them.\n\nHere, miners will be able to produce an alternate chain that will appear \nvalid to old clients, and that the new miners won't be able to orphan \n(since their hash power is much weaker)."
            }
        ],
        "thread_summary": {
            "title": "BIP - limiting OP_RETURN / HF",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeremy",
                "Zach Greenwood",
                "Peter Todd",
                "Russell O'Connor",
                "ZmnSCPxj",
                "Christopher Gilliard",
                "Andrew Poelstra",
                "Clark Moody",
                "yanmaani at cock.li",
                "Kostas Karasavvas",
                "Ruben Somsen"
            ],
            "messages_count": 23,
            "total_messages_chars_count": 50814
        }
    },
    {
        "title": "[bitcoin-dev] Update on Taproot activation releases",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2021-04-16T12:16:58",
                "message_text_only": "I discussed in the last Taproot activation meeting notes the plans for\nan alternative release to Bitcoin Core with the Speedy Trial\nactivation mechanism (BIP 8, consistent use of block height) followed\nby a BIP 8(1 year, LOT=true). This has now been released (version 0.1)\nunder the name \"Bitcoin Core 0.21.0-based Taproot Client\".\n\nThe build is available from https://bitcointaproot.cc/ and the GitHub\nrepo is here: https://github.com/BitcoinActivation/bitcoin\n\nLuke Dashjr (Bitcoin Core contributor, Bitcoin Knots, UASF) is\ncontributing to this release but there are a number of other\npseudonymous individuals contributing to it too. In my attempted\nneutral stance I would say that it is not as thoroughly reviewed as an\nupcoming Bitcoin Core release will be but if you support a consistent\nuse of block height (BIP 8 Speedy Trial) followed by a BIP 8 (1 year,\nLOT=true) I would encourage you to review and test it. Of course there\nmay well be future version releases of \"Bitcoin Core 0.21.0-based\nTaproot Client\". If you are unable to review the code yourself but you\nsupport this effort it may be worth waiting for a future version\nbefore running it or ensuring you update to the latest version when it\nis released.\n\nMoving onto Bitcoin Core and other alternative Bitcoin\nimplementations. As expected Bitcoin Core is proceeding with Speedy\nTrial (mix of MTP and block height, BIP to be decided). If Speedy\nTrial fails to activate on this Core release there is no follow up\nactivation mechanism. That is not to say there will never be one in a\nCore release later in the year but as it stands there is no follow up.\nBitcoin Core PR 21377 has been merged and the activation parameters\n(Bitcoin Core PR 21686) have also been merged. As discussed in my\nprevious email you would expect Speedy Trial to activate (or not\nactivate) on both Bitcoin Core and Bitcoin Core 0.21.0-based Taproot\nClient. However, there is a small possibility it activates on one but\nnot the other. This is due to Bitcoin Core going with a mix of MTP and\nblock height and Bitcoin Core 0.21.0-based Taproot Client going with\nconsistent block height. Assuming they both activate due to Speedy\nTrial they share the same activation block height of 709632\n(approximately November 12th 2021). If Speedy Trial fails to activate\nBitcoin Core 0.21.0-based Taproot Client will attempt to enforce miner\nsignaling in November 2022 (approximately, it is defined by block\nheight). To be clear that is November **2022**.\n\nThere are of course alternative Bitcoin implementations to Bitcoin\nCore. Jeremy Rubin has attempted to inform the maintainers of some\nalternative Bitcoin implementations of the finalized activation\nparameters in Core:\nhttps://github.com/bitcoin/bips/pull/1104#issuecomment-820011540\n\nAt the time of writing Laolu Osuntokun (roasbeef, maintainer of btcd)\nhas ACKed the parameters and stated \"I think we'll be able to get\neverything reviewed+tested (likely adding signet support along the\nway) by November.\" Piotr Narewski (maintainer of Gocoin) has also\nnotified that he's seen the parameters.\n\nIn terms of future meetings on the ##taproot-activation Freenode\nchannel there is only one meeting currently booked. That is on Tuesday\nApril 20th at 19:00 UTC and the meeting host will be Jeremy Rubin. The\nmailing list has yet to receive an agenda but I suspect it will be\nsent at some point in advance of the meeting.\n\nAs always if there are any errors or perceived bias in my attempts to\ninform please respond. Ideally I would like all users to be informed\nof the facts so they can make up their mind on what to run and what\nthey spend time reviewing and testing. Of course tensions are running\nhigher than normal but that is not an excuse to spread factual\ninaccuracies.\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3"
            }
        ],
        "thread_summary": {
            "title": "Update on Taproot activation releases",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Michael Folkson"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3882
        }
    },
    {
        "title": "[bitcoin-dev] Gradual transition to an alternate proof without a hard fork.",
        "thread_messages": [
            {
                "author": "Erik Aronesty",
                "date": "2021-04-16T20:48:35",
                "message_text_only": "Not sure of the best place to workshop ideas, so please take this with\na grain of salt.\n\nStarting with 3 assumptions:\n\n- assume that there exists a proof-of-burn that, for Bitcoin's\npurposes, accurately-enough models the investment in and development\nof ASICs to maintain miner incentive.\n- assume the resulting timing problem \"how much burn is enough to keep\nblocks 10 minutes apart and what does that even mean\"  is also...\nperfectly solvable\n- assume \"everyone unanimously loves this idea\"\n\nThe transition *could* look like this:\n\n - validating nodes begin to require proof-of-burn, in addition to\nproof-of-work (soft fork)\n - the extra expense makes it more expensive for miners, so POW slowly drops\n - on a predefined schedule, POB required is increased to 100% of the\n\"required work\" to mine\n\nGiven all of that, am I correct in thinking that a hard fork would not\nbe necessary?\n\nIE: We could transition to another \"required proof\" - such as a\nquantum POW or a POB (above) or something else ....  in a back-compat\nway (existing nodes not aware of the rules would continue to\nvalidate)."
            },
            {
                "author": "Jeremy",
                "date": "2021-04-16T21:24:30",
                "message_text_only": "I think you need to hard deprecate the PoW for this to work, otherwise all\nold miners are like \"toxic waste\".\n\nImagine one miner turns on a S9 and then ramps up difficulty for everyone\nelse.\n\nOn Fri, Apr 16, 2021, 2:08 PM Erik Aronesty via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Not sure of the best place to workshop ideas, so please take this with\n> a grain of salt.\n>\n> Starting with 3 assumptions:\n>\n> - assume that there exists a proof-of-burn that, for Bitcoin's\n> purposes, accurately-enough models the investment in and development\n> of ASICs to maintain miner incentive.\n> - assume the resulting timing problem \"how much burn is enough to keep\n> blocks 10 minutes apart and what does that even mean\"  is also...\n> perfectly solvable\n> - assume \"everyone unanimously loves this idea\"\n>\n> The transition *could* look like this:\n>\n>  - validating nodes begin to require proof-of-burn, in addition to\n> proof-of-work (soft fork)\n>  - the extra expense makes it more expensive for miners, so POW slowly\n> drops\n>  - on a predefined schedule, POB required is increased to 100% of the\n> \"required work\" to mine\n>\n> Given all of that, am I correct in thinking that a hard fork would not\n> be necessary?\n>\n> IE: We could transition to another \"required proof\" - such as a\n> quantum POW or a POB (above) or something else ....  in a back-compat\n> way (existing nodes not aware of the rules would continue to\n> validate).\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210416/1d9aee05/attachment.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2021-04-16T21:47:44",
                "message_text_only": "> I think you need to hard deprecate the PoW for this to work, otherwise all old miners are like \"toxic waste\".\n\nwhat would be the incentive?   a POB would be required on every block\n(and would be lost if not used).   so any miner doing this would just\nbe doing \"extra work\" and strictly losing money over a miner that\ndoesn't.   a 99% reduction would be more than enough tho.\n\nOn Fri, Apr 16, 2021 at 5:24 PM Jeremy <jlrubin at mit.edu> wrote:\n>\n> I think you need to hard deprecate the PoW for this to work, otherwise all old miners are like \"toxic waste\".\n>\n> Imagine one miner turns on a S9 and then ramps up difficulty for everyone else.\n>\n> On Fri, Apr 16, 2021, 2:08 PM Erik Aronesty via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> Not sure of the best place to workshop ideas, so please take this with\n>> a grain of salt.\n>>\n>> Starting with 3 assumptions:\n>>\n>> - assume that there exists a proof-of-burn that, for Bitcoin's\n>> purposes, accurately-enough models the investment in and development\n>> of ASICs to maintain miner incentive.\n>> - assume the resulting timing problem \"how much burn is enough to keep\n>> blocks 10 minutes apart and what does that even mean\"  is also...\n>> perfectly solvable\n>> - assume \"everyone unanimously loves this idea\"\n>>\n>> The transition *could* look like this:\n>>\n>>  - validating nodes begin to require proof-of-burn, in addition to\n>> proof-of-work (soft fork)\n>>  - the extra expense makes it more expensive for miners, so POW slowly drops\n>>  - on a predefined schedule, POB required is increased to 100% of the\n>> \"required work\" to mine\n>>\n>> Given all of that, am I correct in thinking that a hard fork would not\n>> be necessary?\n>>\n>> IE: We could transition to another \"required proof\" - such as a\n>> quantum POW or a POB (above) or something else ....  in a back-compat\n>> way (existing nodes not aware of the rules would continue to\n>> validate).\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "vjudeu",
                "date": "2021-04-17T09:41:44",
                "message_text_only": "Yes, transition from Proof of Work to Proof of Something Else is possible in a soft-fork way. All that is needed is getting miners and users support. Then, Proof of Work difficulty should drop to one, and the rest would be solved by Proof of Something Else. Old miners still could use ASIC miners to produce blocks with higher Proof of Work, but then their blocks would be rejected. Currently, you can also make a block with enormously low hash, but if this block would contain two transactions sending the same coins to two different places, it would be rejected, no matter how low that hash would be. As long as miners would produce enough Proof of Something Else and as long as most nodes would use upgraded software, it should be resistant to such attacks.\n\nSo, technically speaking, it is possible. The most difficult part is getting miners and users supporting it.\n\nOn 2021-04-16 23:47:44 user Erik Aronesty via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > I think you need to hard deprecate the PoW for this to work, otherwise all old miners are like \"toxic waste\".\n> \n> what would be the incentive?   a POB would be required on every block\n> (and would be lost if not used).   so any miner doing this would just\n> be doing \"extra work\" and strictly losing money over a miner that\n> doesn't.   a 99% reduction would be more than enough tho.\n> \n> On Fri, Apr 16, 2021 at 5:24 PM Jeremy <jlrubin at mit.edu> wrote:\n> >\n> > I think you need to hard deprecate the PoW for this to work, otherwise all old miners are like \"toxic waste\".\n> >\n> > Imagine one miner turns on a S9 and then ramps up difficulty for everyone else.\n> >\n> > On Fri, Apr 16, 2021, 2:08 PM Erik Aronesty via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >> Not sure of the best place to workshop ideas, so please take this with\n> >> a grain of salt.\n> >>\n> >> Starting with 3 assumptions:\n> >>\n> >> - assume that there exists a proof-of-burn that, for Bitcoin's\n> >> purposes, accurately-enough models the investment in and development\n> >> of ASICs to maintain miner incentive.\n> >> - assume the resulting timing problem \"how much burn is enough to keep\n> >> blocks 10 minutes apart and what does that even mean\"  is also...\n> >> perfectly solvable\n> >> - assume \"everyone unanimously loves this idea\"\n> >>\n> >> The transition *could* look like this:\n> >>\n> >>  - validating nodes begin to require proof-of-burn, in addition to\n> >> proof-of-work (soft fork)\n> >>  - the extra expense makes it more expensive for miners, so POW slowly drops\n> >>  - on a predefined schedule, POB required is increased to 100% of the\n> >> \"required work\" to mine\n> >>\n> >> Given all of that, am I correct in thinking that a hard fork would not\n> >> be necessary?\n> >>\n> >> IE: We could transition to another \"required proof\" - such as a\n> >> quantum POW or a POB (above) or something else ....  in a back-compat\n> >> way (existing nodes not aware of the rules would continue to\n> >> validate).\n> >> _______________________________________________\n> >> bitcoin-dev mailing list\n> >> bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Devrandom",
                "date": "2021-04-17T11:19:46",
                "message_text_only": "Hi Erik,\n\nHere's a scheme I posted here a few years ago, which smoothly transitions\nusing geometric mean chain weight / difficulty:\n\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-November/015236.html\n\nOn Fri, Apr 16, 2021 at 11:08 PM Erik Aronesty via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Not sure of the best place to workshop ideas, so please take this with\n> a grain of salt.\n>\n> Starting with 3 assumptions:\n>\n> - assume that there exists a proof-of-burn that, for Bitcoin's\n> purposes, accurately-enough models the investment in and development\n> of ASICs to maintain miner incentive.\n> - assume the resulting timing problem \"how much burn is enough to keep\n> blocks 10 minutes apart and what does that even mean\"  is also...\n> perfectly solvable\n> - assume \"everyone unanimously loves this idea\"\n>\n> The transition *could* look like this:\n>\n>  - validating nodes begin to require proof-of-burn, in addition to\n> proof-of-work (soft fork)\n>  - the extra expense makes it more expensive for miners, so POW slowly\n> drops\n>  - on a predefined schedule, POB required is increased to 100% of the\n> \"required work\" to mine\n>\n> Given all of that, am I correct in thinking that a hard fork would not\n> be necessary?\n>\n> IE: We could transition to another \"required proof\" - such as a\n> quantum POW or a POB (above) or something else ....  in a back-compat\n> way (existing nodes not aware of the rules would continue to\n> validate).\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210417/1d1d8922/attachment.html>"
            },
            {
                "author": "Anthony Towns",
                "date": "2021-04-17T11:47:17",
                "message_text_only": "On Fri, Apr 16, 2021 at 04:48:35PM -0400, Erik Aronesty via bitcoin-dev wrote:\n> The transition *could* look like this:\n>  - validating nodes begin to require proof-of-burn, in addition to\n> proof-of-work (soft fork)\n>  - the extra expense makes it more expensive for miners, so POW slowly drops\n>  - on a predefined schedule, POB required is increased to 100% of the\n> \"required work\" to mine\n> Given all of that, am I correct in thinking that a hard fork would not\n> be necessary?\n\nIt depends what you mean by a \"hard fork\". By the definition that\n\"the old software will consider the chain followed by new versions of\nthe software as valid\" it's a soft fork. But it doesn't maintain the\nproperty \"old software continues to follow the same chain as new software,\nprovided the economic majority has adopted the new software\" -- because\nafter the PoW part has dropped its difficulty substantitally, people can\neasily/cheaply make a new chain that doesn't include proof-of-burn, and\nhas weak proof-of-work that's nevertheless higher than the proof-of-burn\nchain, so old nodes will switch to it, while new nodes will continue to\nfollow the proof-of-burn chain.\n\nSo I think that means it needs to be treated as a hard fork: everyone\nneeds to be running the new software by some date to ensure they follow\nthe same chain.\n\n(The same argument applies to trying to switch to a different PoW\nalgorithm via a soft fork; I forget who explained this to me)\n\nJeremy wrote:\n> I think you need to hard deprecate the PoW for this to work, otherwise\n> all old miners are like \"toxic waste\".\n>\n> Imagine one miner turns on a S9 and then ramps up difficulty for\n> everyone else.\n\nIf it's a soft-fork, you could only ramp up the PoW difficulty by mining\nmore than one block every ten minutes, but presumably the proof-of-burn\nscheme would have its own way of preventing burners from mining blocks\ntoo fast (it was assumption 2).\n\nCheers,\naj"
            }
        ],
        "thread_summary": {
            "title": "Gradual transition to an alternate proof without a hard fork.",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeremy",
                "Anthony Towns",
                "Devrandom",
                "Erik Aronesty",
                "vjudeu"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 12165
        }
    },
    {
        "title": "[bitcoin-dev] Taproot Activation Meeting 4/20 Cancelled",
        "thread_messages": [
            {
                "author": "Jeremy",
                "date": "2021-04-17T18:45:31",
                "message_text_only": "Dear Bitcoin Developers,\n\nThere are no current agenda items or technical issues to weed out,\neverything has been through the grinder, and Bitcoin Core seems to be on a\nroll with getting Release Candidate 1 with Speedy Trial MTP in the pipe.\n\nIf anyone is hazy on the details -- it has been a little bit of a blaze --\nI'd refer you to https://github.com/bitcoin/bips/pull/1104 (changes to BIP\n341) which details what was hashed out by joint agreement of many community\nmembers.\n\nNot to be blunt, but given the high tensions, I recommend that everyone\ntake the opportunity to thoroughly enjoy the holiday :)\n\nBest,\n\nJeremy\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210417/f03e4dc8/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Taproot Activation Meeting 4/20 Cancelled",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeremy"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 888
        }
    },
    {
        "title": "[bitcoin-dev]  Taproot Activation Meeting 4/20 Cancelled",
        "thread_messages": [
            {
                "author": "yancy",
                "date": "2021-04-17T20:10:39",
                "message_text_only": "I appreciate the bluntness, Jeremy, and agree it's high time folks enjoy the holiday.\n\nCheers,\n-Yancy\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210417/4af5440b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Taproot Activation Meeting 4/20 Cancelled",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "yancy"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 284
        }
    },
    {
        "title": "[bitcoin-dev] Block weight penalty for UTXO set growth",
        "thread_messages": [
            {
                "author": "yanmaani at cock.li",
                "date": "2021-04-20T01:22:34",
                "message_text_only": "Bitcoin presently suffers from unconstrained UTXO set growth. It would \nbe possible to disincentivize this and incentivize consolidating UTXOs \nby adding a block weight penalty for UTXO creation, and bonus for UTXO \ndestruction:\n\n* For each block, calculate the net change in UTXOs. If all the \ntransactions in a block consume 6,256 inputs and create 6,512 outputs, \nthe net change is +256.\n* For each block, change the weight limit by -penalty * delta\n* For example, if the penalty is 10 vB/UTXO, that block would be 10*256 \n= 2560 vB smaller. At a fee of 150 sat/vB, this would reduce the \npotential transaction fees by 0.00384000 BTC ($230 at current prices)\n\n(Alternatively, it would also be possible to make the penalty in coin, \nwhich would require miners to fail to claim/burn an equivalent amount of \nsubsidy.)\n\nA problem is that it is not possible to increase the weight limit (or \nthe block reward). I can see three possible solutions to this:\n\n1) Let any excess be wasted. Miners can only use consolidated UTXOs to \noffset new ones.\n2) Decrease the weight limit slightly (i.e. by 1%), so that miners have \nan incentive to consolidate UTXOs at least up to that limit.\n3) Increase the weight limit, but only if miners consolidate enough \nUTXOs.\n\nAside from the obvious issues with the third option (it would be a \nhardfork), another problem is that this would make it harder for low-fee \ntransactions to get confirmed; on blocks with bad fees, miners might \ninstead opt to create a load of dust UTXOs, so they can destroy them on \nblocks with very high fees to free up capacity. On the other hand, this \nmight be seen as a feature rather than a bug, since it would allow block \nsizes to vary by demand, a bit like VBR vs. CBR in audio compression.\n\nThoughts? Has this been discussed before?"
            },
            {
                "author": "Prayank",
                "date": "2021-04-21T04:59:56",
                "message_text_only": "Hello Yanmaani,\n\nIncentives for UTXO consolidation already exists IMO.\n\n1.If UTXO consolidation is done when fee rates are low (less congestion in mempool), it helps in saving money in lot of cases. Example:\u00a0https://bitcoin.stackexchange.com/a/100811/\n2.If running full node for Bitcoin, it will help in a smaller UTXO set.\n\nIn few cases it affects privacy though like post coinjoin.\n\nTBH I couldn't understand everything you mentioned including the part in which fees decrease is mentioned because of smaller block. Fees should increase if such blocks are regularly mined and are predictable IMO. Not sure if everyone will agree to the other things mentioned in the proposal.\n-- \nPrayank\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210421/1fb43144/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Block weight penalty for UTXO set growth",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "yanmaani at cock.li",
                "Prayank"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2670
        }
    },
    {
        "title": "[bitcoin-dev] [Pre-BIP] Motivating Address type for OP_RETURN",
        "thread_messages": [
            {
                "author": "Jeremy",
                "date": "2021-04-20T15:46:07",
                "message_text_only": "Hi All,\n\nIntroducing the notion that we might want to have an address type defined\nfor OP_RETURN.\n\nI came across this when writing some code that wanted to handle common\nclasses of user transactions generically, it's kind of annoying that you\nhave to write code that's effectively:\n\n```\ntry {\n   print(script.address());\n} catch {\n   try {\n       print(script.op_return());\n   } catch {\n      print(\"unknown thing\");\n   }\n}\n```\n\nI think that OP_RETURN, being relatively well defined, could have an\naddress type.\n\nThis would aid in simplifying types for programs. E.g., in Rust I want to\nhave:\n\n```\nstruct Coin(Address, Amount)\nimpl Coin {\n  fn get_coin(o: Outpoint) -> Result<Coin, Error>{/**/}\n}\nenum Error {\n  UnknownType,\n  CoinDoesNotExist,\n}\n```\n\nand without Address defining OP_RETURN I can't read a Coin containing an\nOP_RETURN. It would be possible to define Coin to store script, but then\neverywhere I want an address I would have to perform a conversion and\nScript is technically \"too wide\" a type as what I really want is to only\nreturn coins with known output types.\n\nMore concretely this is a challenge for me as I'm building the Sapio\ncompiler and I want to make it so that all contract compilations result in\nan Address, but I need to support OP_RETURN for various reasons, so I\ncannot make Sapio only output addresses.\n\nAs far as I understand the counterargument against this, it is (thanks to\nLuke Jr):\n\n1) We should only have addresses or descriptors for things we know exactly\nwhat they are, and also for things that represent something that is not\nonly payable but also potentially spendable.\n2) OP_RETURN, being unspendable and usually proprietary in purpose, should\nnot have an address.\n3) Further, most uses of OP_RETURN are proprietary (e.g., we don't know\nwhat it represents) so therefore it would be lying to the user to pretend\nwe know how to interpret it.\n\n\nMy counterargument is that:\n\n1) Addresses should represent things that people commonly create outputs\nfor -- perhaps regrettably, OP_RETURN is such a thing so software (e.g.,\nhttps://citp.github.io/BlockSci/reference/addresses/address.html) already\ndoes treat OP_RETURN as an address type, just without a standard\nrepresentation.\n2) Many things are unspendable. E.g., a 0 value payment to an address, a\npayment to P2SH(OP_RETURN <data>), etc. We can't know spendability based on\naddress type.\n3) All scripts can have proprietary interpretations, the job of the address\nis to do our best job of interpreting standard types to the best of our\nability. An example where this has been (ab)used previously is P2SH wrapped\nSegWit, where one cannot distinguish if the underlying is to be evaluated\nas P2SH or SegWit. Further, future OP_RETURN address types could take\nprecedence if they are well specified.\n\n\nDo folks agree with the motivations for defining an address type? Are there\nany design constraints?\n\nSome starter thoughts\n1) Should it be human readable & checksummed or encoded?\n2) Should it have a fixed length of max 40-80 bytes or should we support\narbitrary length strings?\n3) Should it be possible (i.e., from core) to pay into such an OP_RETURN or\nshould we categorize OP_RETURNS as a non-payable address type (and just use\nit for parsing blockdata)\n\n(my answers are 1. human readable + checksum, 2. arbitrary to support\nnonstandard ones which miners create 3. non payable in standard software)\n\nCheers,\n\nJeremy\n\n\n\nBest,\n\nJeremy\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210420/1e9b21d5/attachment.html>"
            },
            {
                "author": "David A. Harding",
                "date": "2021-04-23T18:15:50",
                "message_text_only": "On Tue, Apr 20, 2021 at 08:46:07AM -0700, Jeremy via bitcoin-dev wrote:\n> Script is technically \"too wide\" a type as what I really want is to\n> only return coins with known output types.\n\nI don't understand this concern.  If script is too wide a type, then\nOP_RETURN being a scriptPubKey of arbitrary length up to almost a\nmillion bytes is also going to be too wide, right?\n\n> 1) Should it be human readable & checksummed or encoded?\n\nIt should absolutely not be human readable in the sense of being\nmeaningful to humans.  We've seen in the past that tools and sites that\ndisplay OP_RETURN data as ASCII encourage people to put text in the\nblock chain that is offensive and illegal.  This puts people running\nnodes at risk of social and legal intervention.  Bitcoin's\npremissionless nature means we can't stop people from creating such\nproblems, but we can lower the risk by having our tools default to\nmeaningless representations of OP_RETURN data.\n\nThe best advice I've seen is to display OP_RETURN data in hex.  It's\nstill possible to say things like \"dead beef\" with that, but significant\nabuse is hard.  This will, of course, make even 80 byte OP_RETURN\n\"addresses\" very long.\n\n> 2) Should it have a fixed length of max 40-80 bytes or should we support\n> arbitrary length strings?\n\nIf it doesn't support the fell range, somebody's just going to complain\nlater and there will have to be a v2 address.\n\n> 3) Should it be possible (i.e., from core) to pay into such an OP_RETURN or\n> should we categorize OP_RETURNS as a non-payable address type (and just use\n> it for parsing blockdata)\n\nI don't think including arbitrary data in the block chain is something\nthat's currently useful for typical end users, and applications that\nwant to use OP_RETURN with Bitcoin Core can already call\ncreate(psbt|rawtransaction) with the `data` field, so I'd be mildly\nopposed in including such a feature in Bitcoin Core's wallet.  If at\nleast a few other wallets add the feature to pay OP_RETURN \"addresses\"\nand it seems popular, then I'm wrong and so I would probably then change\nmy position.\n\nRegarding \"parsing block data\", I don't think there's any need to change\nBitcoin Core's current representation of OP_RETURN outputs (which is\njust showing the hex-encoded script in RPC output).  For any program\nneeding OP_RETURN output, hex format is going to be a the next best\nthing to getting it in raw binary.  Any other address format is going to\nbe equal or more work.\n\nAdditionally, as mentioned in the other thread about OP_RETURN this\nweek, increasing transaction fees should increasingly push uses of\nOP_RETURN off the network or into more efficient constructions, so it\ndoesn't seem warranted to me to spend a lot of time trying to optimize\nhow we use it when we'll be using it less and less over time.\n\n-Dave\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210423/9b78956c/attachment.sig>"
            },
            {
                "author": "Jeremy",
                "date": "2021-04-24T20:05:25",
                "message_text_only": "Inline responses\n\nOn Fri, Apr 23, 2021, 11:18 AM David A. Harding <dave at dtrt.org> wrote:\n\n> On Tue, Apr 20, 2021 at 08:46:07AM -0700, Jeremy via bitcoin-dev wrote:\n>\n>\n>\n>\n>\n> * > Script is technically \"too wide\" a type as what I really want is to >\n> only return coins with known output types. I don't understand this\n> concern.  If script is too wide a type, then OP_RETURN being a scriptPubKey\n> of arbitrary length up to almost a million bytes is also going to be too\n> wide, right?*\n>\n\n\nI meant the type itself is too wide, not the length of the value. As in\nScript can represent things we know nothing about. There's a bit of leaky\nabstraction since the values self describe the type they are. For addresses\nit's just representations IMO for the standard output types one might\nexpect from standard software.\n\nBtw: According to... Oh wait... You?\nhttps://bitcoin.stackexchange.com/questions/35878/is-there-a-maximum-size-of-a-scriptsig-scriptpubkey\nthe max size is 10k bytes. Still probably too big for an address, but I'd\nbe ok with making op_return addresses only defined for a small size (e.g.\n128 bytes?)\n\n\n\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n> * > 1) Should it be human readable & checksummed or encoded? It should\n> absolutely not be human readable in the sense of being meaningful to\n> humans.  We've seen in the past that tools and sites that display OP_RETURN\n> data as ASCII encourage people to put text in the block chain that is\n> offensive and illegal.  This puts people running nodes at risk of social\n> and legal intervention.  Bitcoin's premissionless nature means we can't\n> stop people from creating such problems, but we can lower the risk by\n> having our tools default to meaningless representations of OP_RETURN data.\n> The best advice I've seen is to display OP_RETURN data in hex.  It's still\n> possible to say things like \"dead beef\" with that, but significant abuse is\n> hard.  This will, of course, make even 80 byte OP_RETURN \"addresses\" very\n> long.*\n>\n\nIs it possible/easy to, say, using bech32m make an inappropriate message in\nthe address? You'd have to write the message, then see what it decodes to\nwithout checking, and then re encode? I guess this is worse than hex?\n\nBut it seems this is a general thing... If you wanted an inappropriate\nmessage you could therefore just use bech32m addressed outputs.\n\n\n> >\n>\n>\n>\n> * 2) Should it have a fixed length of max 40-80 bytes or should we support\n> > arbitrary length strings? If it doesn't support the fell range,\n> somebody's just going to complain later and there will have to be a v2\n> address.*\n>\n\nSo 10,000 bytes? Or do we care to represent outputs that would be consensus\ninvalid?\n\n\n\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n> * > 3) Should it be possible (i.e., from core) to pay into such an\n> OP_RETURN or > should we categorize OP_RETURNS as a non-payable address\n> type (and just use > it for parsing blockdata) I don't think including\n> arbitrary data in the block chain is something that's currently useful for\n> typical end users, and applications that want to use OP_RETURN with Bitcoin\n> Core can already call create(psbt|rawtransaction) with the `data` field, so\n> I'd be mildly opposed in including such a feature in Bitcoin Core's\n> wallet.  If at least a few other wallets add the feature to pay OP_RETURN\n> \"addresses\" and it seems popular, then I'm wrong and so I would probably\n> then change my position.*\n>\n\nOne of the nice things is that the current psbt interface uses a blind\nunion type whereby the entires in an array are either [address, amount] or\n[\"data\", hex]. Having an address type would allow more uniform handling,\nwhich is convenient for strongly typed RPC bindings (e.g. rust bitcoin uses\na hashmap of address to amount so without a patch you can't create op\nreturns).\n\n\n>\n>\n>\n>\n>\n> * Regarding \"parsing block data\", I don't think there's any need to change\n> Bitcoin Core's current representation of OP_RETURN outputs (which is just\n> showing the hex-encoded script in RPC output).  For any program needing\n> OP_RETURN output, hex format is going to be a the next best thing to\n> getting it in raw binary.  Any other address format is going to be equal or\n> more work*.\n>\n\nThats a fair point. I'm mostly thinking about this in the context of\nstrongly typed languages/frameworks where you'll get an address object or\nenum out, rather than something *stringly* typed. But yes in terms of\nstringy languages I don't think any changes are needed.\n\n*Additionally, as mentioned in the other thread about OP_RETURN this*\n*week, increasing transaction fees should increasingly push uses of*\n*OP_RETURN off the network or into more efficient constructions, so it*\n*doesn't seem warranted to me to spend a lot of time trying to optimize*\n*how we use it when we'll be using it less and less over time.*\n\n\nHmm. I agree it should get priced out over time. However there are some\nuses for this kind of stuff. E.g. stealth addresses, or a single instance\nof open time stamps.\n\nThe main reason I think they merit some sort of std address type is that\nI'm writing software that can handle things that we might reasonably see on\nthe network. And it's relatively annoying (without a custom type) to\nrepresent OP_RETURN as a not-exceptional type of thing.\n\nIn my code what I have done is added the following type:\n\npub enum ExtendedAddress {\n/// A regular standard address type\nAddress(bitcoin::Address),\n/// An OP_RETURN\nOpReturn(OpReturn),\n/// Unknown\nUnknown(bitcoin::Script),\n}\nWhich works more or less fine, but I would much prefer to not have to do\nthis in a custom way, as opposed to a way which is defined in a standard\nmanner across all software (after all, that's the point of standards).\n\nBest,\n\nJeremy\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210424/a12ae065/attachment-0001.html>"
            },
            {
                "author": "David A. Harding",
                "date": "2021-04-24T21:59:00",
                "message_text_only": "On Sat, Apr 24, 2021 at 01:05:25PM -0700, Jeremy wrote:\n> I meant the type itself is too wide, not the length of the value. As in\n> Script can represent things we know nothing about. \n\nI guess I still don't understand your concern, then.  If script can\nrepresent things we know nothing about, then script commitments such as\nP2SH, P2WSH, and P2TR also represent things we know nothing about.  All\nyou know is what container format they used.  For P2PK, bare multisig,\nOP_RETURN, and other direct uses of scriptPubKey, that container format\nis \"bare\" (or whatever you want to call it).\n\n> Btw: According to... Oh wait... You?\n> https://bitcoin.stackexchange.com/questions/35878/is-there-a-maximum-size-of-a-scriptsig-scriptpubkey\n> the max size is 10k bytes.\n\nI'm not sure what I knew at the time I wrote that answer, but the 10,000\nbyte limit is only applied when EvalScript is run, which only happens\nwhen the output is being spent.  I've appended to this email a\ndemonstration of creating a 11,000 byte OP_RETURN on regtest (I tried\n999,000 bytes but ran into problems with bash's maximum command line\nlength limit).  I've updated the answer to hopefully make it more\ncorrect.\n\n> Is it possible/easy to, say, using bech32m make an inappropriate message in\n> the address? You'd have to write the message, then see what it decodes to\n> without checking, and then re encode? I guess this is worse than hex?\n\nIf someone wants to abuse bech32m, I suspect they'll do it the same way\npeople have abused base58check[1], by using the address format's\nalphabet directly.  E.g., you compose your message using only\nthe characters qpzry9x8gf2tvdw0s3jn54khce6mua7l and then append\nthe appropriate checksum.\n\n[1] https://en.bitcoin.it/wiki/P2SH%C2%B2#The_problem:_storing_data_in_hashes\n\n> But it seems this is a general thing... If you wanted an inappropriate\n> message you could therefore just use bech32m addressed outputs.\n\nYes, and people have done that with base58check.  IsStandard OP_RETURN\nattempts to minimize that abuse by being cheaper in two ways:\n\n1. More data allowed in scriptSig, e.g. 80 byte payload (81 actually, I\n   think) for OP_RETURN versus 40 bytes for a BIP141 payload.\n   Maximizing payload size better amortizes the overhead cost of the\n   containing transaction and the output's nValue field.\n\n2. Exemption from the dust limit.  If you use a currently defined\n   address type, the nValue needs to pay at least a few thousand nBTC\n   (few hundred satoshis), about $0.15 USD minimum at $50k USD/BTC.  For\n   OP_RETURN, the nValue can be 0, so there's no additional cost beyond\n   normal transaction relay fees.\n\nAlthough someone creating an OP_RETURN up to ~1 MB with miner support\ncan bypass the dust limit, the efficiency advantage remains no matter\nwhat.\n\n> One of the nice things is that the current psbt interface uses a blind\n> union type whereby the entires in an array are either [address, amount] or\n> [\"data\", hex]. Having an address type would allow more uniform handling,\n> which is convenient for strongly typed RPC bindings (e.g. rust bitcoin uses\n> a hashmap of address to amount so without a patch you can't create op\n> returns).\n\nI don't particularly care how the data in PSBTs are structured.  My mild\nopposition was to adding code to the wallet that exposes everyday users\nto OP_RETURN addresses.\n\n> I would much prefer to not have to do this in a custom way, as opposed\n> to a way which is defined in a standard manner across all software\n> (after all, that's the point of standards).\n\nI'm currently +0.1 on the idea of an address format of OP_RETURN, but I\nwant to make sure this isn't underwhelmingly motivated or will lead to a\nresurgence of block chain graffiti.\n\n-Dave\n\n## Creating an 11,000 byte OP_RETURN\n\n$ bitcoind -daemon -regtest -acceptnonstdtxn\nBitcoin Core starting\n\n$ bitcoin-cli -regtest -generate 101\n{\n  \"address\": \"bcrt1qh9uka5z040vx2rc3ltz3tpwmq4y2mt0eufux9r\",\n  \"blocks\": [\n[...]\n}\n\n$ bitcoin-cli -regtest send '[{\"data\": \"'$( dd if=/dev/zero bs=1000 count=11 | xxd -g0 -p | tr -d '\\n' )'\"}]'\n11+0 records in\n11+0 records out\n11000 bytes (11 kB, 11 KiB) copied, 0.000161428 s, 68.1 MB/s\n{\n  \"txid\": \"ef3d396c7d21914a2c308031c9ba1857694fc33df71f5a349b409ab3406dab51\",\n  \"complete\": true\n}\n\n$ bitcoin-cli -regtest getrawmempool\n[\n  \"ef3d396c7d21914a2c308031c9ba1857694fc33df71f5a349b409ab3406dab51\"\n]\n\n$ bitcoin-cli -regtest -generate 1\n{\n  \"address\": \"bcrt1qlzjd90tkfkr09m867zxhte9rqd3t03wc5py5zh\",\n  \"blocks\": [\n    \"2986e9588c5bd26a629020b1ce8014d1f4ac9ac19106d216d3abb3a314c5604b\"\n  ]\n}\n\n$bitcoin-cli -regtest getblock 2986e9588c5bd26a629020b1ce8014d1f4ac9ac19106d216d3abb3a314c5604b 2 | jq .tx[1].txid\n\"ef3d396c7d21914a2c308031c9ba1857694fc33df71f5a349b409ab3406dab51\"\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210424/a3d85f0a/attachment.sig>"
            },
            {
                "author": "Jeremy",
                "date": "2021-04-24T22:29:39",
                "message_text_only": "I guess in the interest of being clear; I don't particularly want a\nOP_RETURN address either, they're just annoying to program around, and they\nexist historically, as well as perhaps in the future.\n\nMaybe people will start using the annex space to add any metadata required?\nE.g. stealth addresses. I kinda hope not, but probably will be proposed as\na SF since it's much cheaper (witness + no amount) and per-input vs. per-tx.\n\nIt's interesting that they can be created with any length... i guess any\nscript can be an op return if you make it long enough...\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n\n\nOn Sat, Apr 24, 2021 at 3:00 PM David A. Harding <dave at dtrt.org> wrote:\n\n> On Sat, Apr 24, 2021 at 01:05:25PM -0700, Jeremy wrote:\n> > I meant the type itself is too wide, not the length of the value. As in\n> > Script can represent things we know nothing about.\n>\n> I guess I still don't understand your concern, then.  If script can\n> represent things we know nothing about, then script commitments such as\n> P2SH, P2WSH, and P2TR also represent things we know nothing about.  All\n> you know is what container format they used.  For P2PK, bare multisig,\n> OP_RETURN, and other direct uses of scriptPubKey, that container format\n> is \"bare\" (or whatever you want to call it).\n>\n> > Btw: According to... Oh wait... You?\n> >\n> https://bitcoin.stackexchange.com/questions/35878/is-there-a-maximum-size-of-a-scriptsig-scriptpubkey\n> > the max size is 10k bytes.\n>\n> I'm not sure what I knew at the time I wrote that answer, but the 10,000\n> byte limit is only applied when EvalScript is run, which only happens\n> when the output is being spent.  I've appended to this email a\n> demonstration of creating a 11,000 byte OP_RETURN on regtest (I tried\n> 999,000 bytes but ran into problems with bash's maximum command line\n> length limit).  I've updated the answer to hopefully make it more\n> correct.\n>\n> > Is it possible/easy to, say, using bech32m make an inappropriate message\n> in\n> > the address? You'd have to write the message, then see what it decodes to\n> > without checking, and then re encode? I guess this is worse than hex?\n>\n> If someone wants to abuse bech32m, I suspect they'll do it the same way\n> people have abused base58check[1], by using the address format's\n> alphabet directly.  E.g., you compose your message using only\n> the characters qpzry9x8gf2tvdw0s3jn54khce6mua7l and then append\n> the appropriate checksum.\n>\n> [1]\n> https://en.bitcoin.it/wiki/P2SH%C2%B2#The_problem:_storing_data_in_hashes\n>\n> > But it seems this is a general thing... If you wanted an inappropriate\n> > message you could therefore just use bech32m addressed outputs.\n>\n> Yes, and people have done that with base58check.  IsStandard OP_RETURN\n> attempts to minimize that abuse by being cheaper in two ways:\n>\n> 1. More data allowed in scriptSig, e.g. 80 byte payload (81 actually, I\n>    think) for OP_RETURN versus 40 bytes for a BIP141 payload.\n>    Maximizing payload size better amortizes the overhead cost of the\n>    containing transaction and the output's nValue field.\n>\n> 2. Exemption from the dust limit.  If you use a currently defined\n>    address type, the nValue needs to pay at least a few thousand nBTC\n>    (few hundred satoshis), about $0.15 USD minimum at $50k USD/BTC.  For\n>    OP_RETURN, the nValue can be 0, so there's no additional cost beyond\n>    normal transaction relay fees.\n>\n> Although someone creating an OP_RETURN up to ~1 MB with miner support\n> can bypass the dust limit, the efficiency advantage remains no matter\n> what.\n>\n> > One of the nice things is that the current psbt interface uses a blind\n> > union type whereby the entires in an array are either [address, amount]\n> or\n> > [\"data\", hex]. Having an address type would allow more uniform handling,\n> > which is convenient for strongly typed RPC bindings (e.g. rust bitcoin\n> uses\n> > a hashmap of address to amount so without a patch you can't create op\n> > returns).\n>\n> I don't particularly care how the data in PSBTs are structured.  My mild\n> opposition was to adding code to the wallet that exposes everyday users\n> to OP_RETURN addresses.\n>\n> > I would much prefer to not have to do this in a custom way, as opposed\n> > to a way which is defined in a standard manner across all software\n> > (after all, that's the point of standards).\n>\n> I'm currently +0.1 on the idea of an address format of OP_RETURN, but I\n> want to make sure this isn't underwhelmingly motivated or will lead to a\n> resurgence of block chain graffiti.\n>\n> -Dave\n>\n> ## Creating an 11,000 byte OP_RETURN\n>\n> $ bitcoind -daemon -regtest -acceptnonstdtxn\n> Bitcoin Core starting\n>\n> $ bitcoin-cli -regtest -generate 101\n> {\n>   \"address\": \"bcrt1qh9uka5z040vx2rc3ltz3tpwmq4y2mt0eufux9r\",\n>   \"blocks\": [\n> [...]\n> }\n>\n> $ bitcoin-cli -regtest send '[{\"data\": \"'$( dd if=/dev/zero bs=1000\n> count=11 | xxd -g0 -p | tr -d '\\n' )'\"}]'\n> 11+0 records in\n> 11+0 records out\n> 11000 bytes (11 kB, 11 KiB) copied, 0.000161428 s, 68.1 MB/s\n> {\n>   \"txid\":\n> \"ef3d396c7d21914a2c308031c9ba1857694fc33df71f5a349b409ab3406dab51\",\n>   \"complete\": true\n> }\n>\n> $ bitcoin-cli -regtest getrawmempool\n> [\n>   \"ef3d396c7d21914a2c308031c9ba1857694fc33df71f5a349b409ab3406dab51\"\n> ]\n>\n> $ bitcoin-cli -regtest -generate 1\n> {\n>   \"address\": \"bcrt1qlzjd90tkfkr09m867zxhte9rqd3t03wc5py5zh\",\n>   \"blocks\": [\n>     \"2986e9588c5bd26a629020b1ce8014d1f4ac9ac19106d216d3abb3a314c5604b\"\n>   ]\n> }\n>\n> $bitcoin-cli -regtest getblock\n> 2986e9588c5bd26a629020b1ce8014d1f4ac9ac19106d216d3abb3a314c5604b 2 | jq\n> .tx[1].txid\n> \"ef3d396c7d21914a2c308031c9ba1857694fc33df71f5a349b409ab3406dab51\"\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210424/b01e361e/attachment.html>"
            },
            {
                "author": "Zac Greenwood",
                "date": "2021-04-24T23:37:56",
                "message_text_only": "> 1. More data allowed in scriptSig, e.g. 80 byte payload (81 actually, I\n>   think) for OP_RETURN versus 40 bytes for a BIP141 payload.\n>   Maximizing payload size better amortizes the overhead cost of the\n>   containing transaction and the output's nValue field.\n\nIn order to reduce the footprint of data stored on-chain, could it perhaps\nbe beneficial to introduce some non-transaction data structure in order to\nfacilitate storing data on-chain such that it maximizes payload size\nvs. on-chain size, while at the same time ensuring that using such data\nstructure is (almost) as expensive in use per payload-byte as the\nnext-cheapest alternative (which now is using OP_RETURN) with\nhelp of weight units?\n\nZac\n\n\nOn Sun, Apr 25, 2021 at 12:01 AM David A. Harding via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Sat, Apr 24, 2021 at 01:05:25PM -0700, Jeremy wrote:\n> > I meant the type itself is too wide, not the length of the value. As in\n> > Script can represent things we know nothing about.\n>\n> I guess I still don't understand your concern, then.  If script can\n> represent things we know nothing about, then script commitments such as\n> P2SH, P2WSH, and P2TR also represent things we know nothing about.  All\n> you know is what container format they used.  For P2PK, bare multisig,\n> OP_RETURN, and other direct uses of scriptPubKey, that container format\n> is \"bare\" (or whatever you want to call it).\n>\n> > Btw: According to... Oh wait... You?\n> >\n> https://bitcoin.stackexchange.com/questions/35878/is-there-a-maximum-size-of-a-scriptsig-scriptpubkey\n> > the max size is 10k bytes.\n>\n> I'm not sure what I knew at the time I wrote that answer, but the 10,000\n> byte limit is only applied when EvalScript is run, which only happens\n> when the output is being spent.  I've appended to this email a\n> demonstration of creating a 11,000 byte OP_RETURN on regtest (I tried\n> 999,000 bytes but ran into problems with bash's maximum command line\n> length limit).  I've updated the answer to hopefully make it more\n> correct.\n>\n> > Is it possible/easy to, say, using bech32m make an inappropriate message\n> in\n> > the address? You'd have to write the message, then see what it decodes to\n> > without checking, and then re encode? I guess this is worse than hex?\n>\n> If someone wants to abuse bech32m, I suspect they'll do it the same way\n> people have abused base58check[1], by using the address format's\n> alphabet directly.  E.g., you compose your message using only\n> the characters qpzry9x8gf2tvdw0s3jn54khce6mua7l and then append\n> the appropriate checksum.\n>\n> [1]\n> https://en.bitcoin.it/wiki/P2SH%C2%B2#The_problem:_storing_data_in_hashes\n>\n> > But it seems this is a general thing... If you wanted an inappropriate\n> > message you could therefore just use bech32m addressed outputs.\n>\n> Yes, and people have done that with base58check.  IsStandard OP_RETURN\n> attempts to minimize that abuse by being cheaper in two ways:\n>\n> 1. More data allowed in scriptSig, e.g. 80 byte payload (81 actually, I\n>    think) for OP_RETURN versus 40 bytes for a BIP141 payload.\n>    Maximizing payload size better amortizes the overhead cost of the\n>    containing transaction and the output's nValue field.\n>\n> 2. Exemption from the dust limit.  If you use a currently defined\n>    address type, the nValue needs to pay at least a few thousand nBTC\n>    (few hundred satoshis), about $0.15 USD minimum at $50k USD/BTC.  For\n>    OP_RETURN, the nValue can be 0, so there's no additional cost beyond\n>    normal transaction relay fees.\n>\n> Although someone creating an OP_RETURN up to ~1 MB with miner support\n> can bypass the dust limit, the efficiency advantage remains no matter\n> what.\n>\n> > One of the nice things is that the current psbt interface uses a blind\n> > union type whereby the entires in an array are either [address, amount]\n> or\n> > [\"data\", hex]. Having an address type would allow more uniform handling,\n> > which is convenient for strongly typed RPC bindings (e.g. rust bitcoin\n> uses\n> > a hashmap of address to amount so without a patch you can't create op\n> > returns).\n>\n> I don't particularly care how the data in PSBTs are structured.  My mild\n> opposition was to adding code to the wallet that exposes everyday users\n> to OP_RETURN addresses.\n>\n> > I would much prefer to not have to do this in a custom way, as opposed\n> > to a way which is defined in a standard manner across all software\n> > (after all, that's the point of standards).\n>\n> I'm currently +0.1 on the idea of an address format of OP_RETURN, but I\n> want to make sure this isn't underwhelmingly motivated or will lead to a\n> resurgence of block chain graffiti.\n>\n> -Dave\n>\n> ## Creating an 11,000 byte OP_RETURN\n>\n> $ bitcoind -daemon -regtest -acceptnonstdtxn\n> Bitcoin Core starting\n>\n> $ bitcoin-cli -regtest -generate 101\n> {\n>   \"address\": \"bcrt1qh9uka5z040vx2rc3ltz3tpwmq4y2mt0eufux9r\",\n>   \"blocks\": [\n> [...]\n> }\n>\n> $ bitcoin-cli -regtest send '[{\"data\": \"'$( dd if=/dev/zero bs=1000\n> count=11 | xxd -g0 -p | tr -d '\\n' )'\"}]'\n> 11+0 records in\n> 11+0 records out\n> 11000 bytes (11 kB, 11 KiB) copied, 0.000161428 s, 68.1 MB/s\n> {\n>   \"txid\":\n> \"ef3d396c7d21914a2c308031c9ba1857694fc33df71f5a349b409ab3406dab51\",\n>   \"complete\": true\n> }\n>\n> $ bitcoin-cli -regtest getrawmempool\n> [\n>   \"ef3d396c7d21914a2c308031c9ba1857694fc33df71f5a349b409ab3406dab51\"\n> ]\n>\n> $ bitcoin-cli -regtest -generate 1\n> {\n>   \"address\": \"bcrt1qlzjd90tkfkr09m867zxhte9rqd3t03wc5py5zh\",\n>   \"blocks\": [\n>     \"2986e9588c5bd26a629020b1ce8014d1f4ac9ac19106d216d3abb3a314c5604b\"\n>   ]\n> }\n>\n> $bitcoin-cli -regtest getblock\n> 2986e9588c5bd26a629020b1ce8014d1f4ac9ac19106d216d3abb3a314c5604b 2 | jq\n> .tx[1].txid\n> \"ef3d396c7d21914a2c308031c9ba1857694fc33df71f5a349b409ab3406dab51\"\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210425/93b322ab/attachment-0001.html>"
            },
            {
                "author": "Jeremy",
                "date": "2021-04-25T00:25:30",
                "message_text_only": "Zac -- this is kind of offtopic for this thread, which is primarily to do\nwith making software/standards that supports existing practices in the\nbitcoin community rather than new standards/formats for a similar task.\n\nI think there have been some other related posts recently where it might be\nmore topical?\n\nSorry for any confusion,\n\nJeremy\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210424/77d250f1/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Motivating Address type for OP_RETURN",
            "categories": [
                "bitcoin-dev",
                "Pre-BIP"
            ],
            "authors": [
                "Zac Greenwood",
                "Jeremy",
                "David A. Harding"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 30180
        }
    },
    {
        "title": "[bitcoin-dev] BIPs - notarization protocol and decentralized storage protocol",
        "thread_messages": [
            {
                "author": "Christopher Gilliard",
                "date": "2021-04-20T17:07:35",
                "message_text_only": "I have created two additional BIPs that are associated with the BIP that I\nsent to the mailing list last week. They can be found here:\n\n1.) storage:\nhttps://github.com/cgilliard/bips/blob/storage/bip-XXXX.mediawiki\n\n2.) notarization:\nhttps://github.com/cgilliard/bips/blob/notarization-l2/bip-XXXX.mediawiki\n\nLet me know if there is any feedback or comments.\n\nRegards,\nChris\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210420/345369fd/attachment-0001.html>"
            },
            {
                "author": "Robert Spigler",
                "date": "2021-04-20T22:44:45",
                "message_text_only": "Hi Chris,\n\nVery interested in this!\n\nNever understood why a Storj/Sia couldn't just use Bitcoin/LN instead of an alt.\n\nRobert Spigler\n\nPersonal Fingerprint: BF0D 3C08 A439 5AC6 11C1 5395 B70B 4A77 F850 548F\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Tuesday, April 20, 2021 1:07 PM, Christopher Gilliard via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I have created two additional BIPs that are associated with the BIP that I sent to the mailing list last week. They can be found here:\n>\n> 1.) storage: https://github.com/cgilliard/bips/blob/storage/bip-XXXX.mediawiki\n>\n> 2.) notarization: https://github.com/cgilliard/bips/blob/notarization-l2/bip-XXXX.mediawiki\n>\n> Let me know if there is any feedback or comments.\n>\n> Regards,\n> Chris\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210420/1f9cf2f0/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIPs - notarization protocol and decentralized storage protocol",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Christopher Gilliard",
                "Robert Spigler"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1500
        }
    },
    {
        "title": "[bitcoin-dev] BIPs - notarization protocol and decentralized storage",
        "thread_messages": [
            {
                "author": "Prayank",
                "date": "2021-04-21T04:26:26",
                "message_text_only": "Hello Christopher,\n\nDecentralized storage as an idea looks interesting. I am researching about similar things for one of my Bitcoin project. Although an implementation or proof of concept code in the BIP would have been better. Also since this involves LN, maybe it can just be a LN project instead of BIP? Not the best person to comment on what can be a BIP.\n\nFew links that you may find interesting:\n\nhttps://github.com/bkiac/tarnhelm\n\nhttps://github.com/ElementsProject/filebazaar\n\nThe kind of decentralized storage that I think can be helpful for Bitcoin projects:\n\n1.Uses torrents for files and communication required (with Tor)\n\n2.Easy to use API to save, read, edit etc. something in a Bitcoin project using torrents. Only involve lightning network and payments when spamming can be an issue. For example: If a developer wants users to pay for every P2P offer they create using a DEX protocol.\n\nProjects that are exploring such options:\u00a0https://github.com/JoinMarket-Org/joinmarket-clientserver/issues/415\n\n-- \nPrayank\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210421/986bd0ae/attachment.html>"
            },
            {
                "author": "Christopher Gilliard",
                "date": "2021-04-21T10:14:20",
                "message_text_only": "Thanks Prayank. I think the next step for both of these proposals is to\ndefine an API. I thought about including that in the BIPs and decided it\nwasn't necessary yet to get the ideas across initially. Maybe when the APIs\nare defined they could go into the BIP, but it's probably better to have in\na different document. I also agree with you on Tor.\n\nAs far as whether this should be a BIP or not, I wondered that same\nquestion. I think the BIP format is well defined and understood so I used\nit for this and the other BIPs that I'm currently working on like the\nincentivized moderation protocol which is mentioned in this BIP. There are\na number of \"Application\" BIPs, which is why I decided it made sense.\nHowever, if it's decided there's a better format for these BIPs I'm open to\nit.\n\nRegards,\nChris\n\n\n\nOn Tue, Apr 20, 2021 at 9:26 PM Prayank <prayank at tutanota.de> wrote:\n\n> Hello Christopher,\n>\n> Decentralized storage as an idea looks interesting. I am researching about\n> similar things for one of my Bitcoin project. Although an implementation or\n> proof of concept code in the BIP would have been better. Also since this\n> involves LN, maybe it can just be a LN project instead of BIP? Not the best\n> person to comment on what can be a BIP.\n>\n> Few links that you may find interesting:\n>\n> https://github.com/bkiac/tarnhelm\n>\n> https://github.com/ElementsProject/filebazaar\n>\n> The kind of decentralized storage that I think can be helpful for Bitcoin\n> projects:\n>\n> 1.Uses torrents for files and communication required (with Tor)\n>\n> 2.Easy to use API to save, read, edit etc. something in a Bitcoin project\n> using torrents. Only involve lightning network and payments when spamming\n> can be an issue. For example: If a developer wants users to pay for every\n> P2P offer they create using a DEX protocol.\n>\n> Projects that are exploring such options:\n> https://github.com/JoinMarket-Org/joinmarket-clientserver/issues/415\n>\n> --\n> Prayank\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210421/3bf15d90/attachment-0001.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2021-04-25T18:29:21",
                "message_text_only": "On Wednesday 21 April 2021 04:26:26 Prayank via bitcoin-dev wrote:\n> Also since this involves LN, maybe it can just be a LN project instead of\n> BIP? Not the best person to comment on what can be a BIP.\n\nAnything that Bitcoin software would benefit in collaboration with other \nprojects on qualifies.\n\nLightning itself really should be a series of BIPs.\n\nLuke"
            }
        ],
        "thread_summary": {
            "title": "BIPs - notarization protocol and decentralized storage",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Christopher Gilliard",
                "Luke Dashjr",
                "Prayank"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 3709
        }
    },
    {
        "title": "[bitcoin-dev] Decentralized Naming Protocol BIP",
        "thread_messages": [
            {
                "author": "Christopher Gilliard",
                "date": "2021-04-21T20:28:15",
                "message_text_only": "I have created an additional BIP that is associated with the recent BIPs\nthat I have sent to the mailing list. This one defines a decentralized\nnaming protocol. The BIP can be found here:\nhttps://github.com/cgilliard/bips/blob/naming/bip-XXXX.mediawiki\n\nPlease reply with any feedback, questions, or comments.\n\nRegards,\nChris\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210421/e6f00665/attachment.html>"
            },
            {
                "author": "yanmaani at cock.li",
                "date": "2021-04-22T20:55:22",
                "message_text_only": "You appear to have reinvented Namecoin ;)\n\nOn 2021-04-21 20:28, Christopher Gilliard via bitcoin-dev wrote:\n> I have created an additional BIP that is associated with the recent\n> BIPs that I have sent to the mailing list. This one defines a\n> decentralized naming protocol. The BIP can be found\n> here:https://github.com/cgilliard/bips/blob/naming/bip-XXXX.mediawiki\n> \n> Please reply with any feedback, questions, or comments.\n> \n> Regards,\n> Chris\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Christopher Gilliard",
                "date": "2021-04-22T21:32:19",
                "message_text_only": "Yeah, kinda, but without the alt and integrated into the other systems that\nI've proposed and it maps names to onion addresses instead of ips. It's\nneeded for some of the applications I've been thinking about.\n\nOn Thu, Apr 22, 2021 at 1:55 PM <yanmaani at cock.li> wrote:\n\n> You appear to have reinvented Namecoin ;)\n>\n> On 2021-04-21 20:28, Christopher Gilliard via bitcoin-dev wrote:\n> > I have created an additional BIP that is associated with the recent\n> > BIPs that I have sent to the mailing list. This one defines a\n> > decentralized naming protocol. The BIP can be found\n> > here:https://github.com/cgilliard/bips/blob/naming/bip-XXXX.mediawiki\n> >\n> > Please reply with any feedback, questions, or comments.\n> >\n> > Regards,\n> > Chris\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210422/e13ae27a/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Decentralized Naming Protocol BIP",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "yanmaani at cock.li",
                "Christopher Gilliard"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 2270
        }
    },
    {
        "title": "[bitcoin-dev] And Then What? Defining a Complete Process for Upgrades",
        "thread_messages": [
            {
                "author": "Jeremy",
                "date": "2021-04-22T22:41:56",
                "message_text_only": "This letter is particularly aimed at addressing Rusty Russell's quest for a\ndevelopment process that respects all groups in a balance of powers.\nHowever, in the spirit of open discussion, I'm sending it directly to the\nlist.\n\nThis proposal is aimed to be compatible with Taproot's ST, and I hope will\nhelp us form some rough consensus around what we try next. Some of the\nconcepts here are synthesized from what I've seen discussed, but I haven't\nincluded citations of anyone's specific ideas as I'm not sure of the exact\nprovenance -- I won't claim to have invented this per se, I'm trying to\ncapture the zeitgeist of what anyone might think to be the process if\npressed to draw it out. Lemme know how I did.\n\nThe specific parameters are up for debate, but I'm trying to make sure I've\ncaptured the relevant state transitions.\n\nIn this diagram time flows left-to-right, and transitions happen at the\nbeginning, end, or middle of a block of time. It should be relatively clear\nwhen things happen, but if not, please ask to clarify.\n\n[image: Activation.png]\n\nClarifications:\n- ST: Speedy trial, whereby > T% signals on a block activate the rule\n- neg-ST: Speedy Trial, whereby >X% signals on a block Reject the rule\n- neg-ST and ST at the same time on different bits: 11 or 00 are \"abstain\"\nvotes and are discarded. only 10 or 01 are counted. The purpose of\nsimultaneous bits is to allow both earlier lock in and to permit early\nfailure, rather than just one or the other.\n- PoW Fork: If a new rule is active, but there is insufficient hashrate,\nthe rule must be abandoned or PoW must be changed to minimize disruption.\nIn order to minimize disruption, a node will consider an alternative PoW\nchain if < 1/4 of the typical hash rate is seen for a day. Alternative PoW\nis defined as SHA-256 10,000 layers, and starts at low difficulty. This is\nselected to be maximally similar to Bitcoin's existing PoW, but\nsufficiently different to obviate extant ASICS. A node will consider the\nnew PoW to be equal in value to the old PoW, and will select between the\ntwo based on most-work. Work can be either within a single chain. The new\nPoW should have a difficulty adjustment every day for the first month, at\nwhich point, it will relax to every 2 weeks. The details of this should be\ndescribed in a separate BIP.\n- PoW Fork Lockin: PoW fork is only *required* once the new rule is active.\nThus it's not required in the case of mandatory signalling to force the\nsignalling contemporaneously, but it can be used to commit to forking the\nPoW at some time in the future. It may make sense to not activate the new\nrule till the new PoW is active. The game theory of this should be studied\ncarefully, it is my opinion that the safest option is to PoW fork during\nsignalling as otherwise miners may protest progress at all.\n- Changes: Any time the underlying activation proposal is changed, the\nprocess is restarted. E.g., suppose taproot is rejected because Quantum\nScaries, and we hash the key. The process restarts from the beginning.\nRestarts can only occur during quieting periods.\n- Quieting Period 1: In the first quieting period, if reached, the \"Bitcoin\nCore Community\" can release the next step, or change the BIP. I left out\nfailing in this period as a change or a redeployment should always be\nattempted.\n- Quieting Period 2: In the second quieting period, the outcome is either\nto reject the change entirely or to agree to force it. The \"Bitcoin Core\nCommunity\" may also prepare the release at this stage, and sign, but should\nre-label the client as \"Bitcoin Community's <Feature> Forcing Client\".  A\nrelease labeled \"Bitcoin Core\" may also be made without mandatory\nsignalling and without forced activation can also be made, such a client\nshould have (depending on if the flag day is to use signalling) either\nability to activate in response to signalling or a hidden\n<feature>activeathash parameter to allow clients to enable the feature\npost-hoc of the activating block.\n- Forced Signalling: It's unclear to me the merit of forced signalling\nbeing 90% of 2016 blocks v.s. 90% of 100 blocks. A shorter forced signaling\nassuages certain concerns around lost hashrate -- 1 day of disruption is a\nlot better than 2 weeks.\n- Timeline: As spec'd above, this whole process takes about 2 years worst\ncase. ST1 0 months; Quieting 1 at 3 months; ST2 at 6 months; Quieting 2 at\n9 months, final attempt at 1 year. The Forcing client period should\nprobably be 1 yr till active. This is *a bit* slower than the \"BIP8\nLOT=True UASF Client\", but I think not so much slower that it's unworkable.\n\nThe most contentious part of this I intuit to be the PoW Fork -- please,\nlet's avoid discussing the mechanic of how to most safely accomplish this.\nThe main point of including it in this diagram is to emphasize that if you\ncommit to being on a minority chain with because of a rule activation with,\nsay, 5% hashrate, you would experience very tangible disruption. In theory,\nevery fork upgrade (even signalled) entails such a risk, but we assume some\nlevel of miner honesty (unfortunately!) that they never signal falsely.\nThis may be a bad assumption with mandatory signalling. The alternative is\nto permit hard forks in our diagram, and allow users to downgrade their\nclient and deactivate this rule. Since this can lead to loss of funds, we\ndo not consider this a safe option, and it is a hardfork as well so is\ntechnically compatible with the \"PoW fork\" branch.\n\n\nQuestions I have:\n\n1) What state transitions are missing from this diagram? Are there other\npaths that should be included?\n2) Is it ever feasible to make a change to the upgrade and not restart the\nwhole process?\n3) How long should all of the periods be? Can the 1st 2 ST's be 3 month?\nShould we make the second one 6 month? Does it depend on previous signalled\nhashrate?\n4) Do we ever adjust signalling thresholds?\n5) Does forced signalling need to be 2016 blocks?\n6) In the second ST should the min active height be allowed to be within\nsignalling time if > 3 mo?\n7) Under what circumstances would we *want* to skip the second ST period\nand directly signal? What would we lose by committing to not skipping it,\never (6 months?).\n8) I purposefully left the purple edge from ST2 bit 2 to Quieting 2: in\ntheory, this edge is not there because it is overruled by the neg-ST\nfailing to fail. Under what circumstances might we give this precedence\nover neg-ST? E.g., signalling activate < 50%?\n9) How much parameter flexibility do we have during Quieting periods?\nShould we be fixed beforehand?\n10) who wants to write the software for any of this... *noses*\n11) do we need to hard-code the PoW fork ahead of time? Or can it just be\n\"prepared\" as an alt binary in case of emergency?\n\n\n\nBest,\n\nJeremy\n\n\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210422/f50fe48c/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: Activation.png\nType: image/png\nSize: 81125 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210422/f50fe48c/attachment-0001.png>"
            },
            {
                "author": "Keagan McClelland",
                "date": "2021-04-23T00:06:02",
                "message_text_only": "Hi Jeremy,\n\nFirst off, thank you for putting this together and trying to organize\ndiscussion around a repeatable process for soft-fork upgrades. As I read\nthis I am struggling to identify the complete set of problems that this\nprocess is attempting to solve for. My best understanding of the gridlock\nthat happened around the LOT parameter of BIP 8 is the fact that a flag day\nfinale of the deployment had the *optics* of being developer controlled,\ndespite the fact that upgrades are voluntary and opt in since there is no\nautomatic upgrade mechanism within Bitcoin Core. So I am generally\nunconvinced by that argument. The alternative (the advancement of various\nLOT=false proposals including ST) is that we are letting the miners\n*actually* exert a level of control over the protocol by imbuing them with\nthe power to veto these proposals. At a 10% signalling threshold needed to\nblock the upgrade, in addition to the fact that mining is an enterprise\nengaged in by a comparatively small portion of the user base, the\nconstituency required to block proposals under this model is remarkably\nsmall. I don't think anyone is satisfied with the idea of indefinitely\nletting miners have veto power over proposals. So the question is, \"what\nthen?\".\n\nThe particular gripe I have with the situation is that I generally believe\nthat *any* LOT=false deployment that is ultimately upheld (not reattempted)\nis a ceding of control of the protocol to the miners, at the very least in\nthat instance if not more generally due to the possible emboldening of more\nnon-cooperative actors for personal gain at the expense of other network\nparticipants. On the other hand, any LOT=false deployment that is\nimmediately followed up with something approximating a LOT=true/flag\nday/UASF deployment is ultimately a charade and can be handily replaced\nwith LOT=true with an extended timeline. The common rebuttal I hear from\nthis is that a LOT=false deployment \"helps us learn something\" and is\nusually an appeal to the difference between stated and revealed preference.\nHowever, I have not been able to get past the idea of exactly what we plan\nto learn from this? If we do not trust stated preferences for protocol\nchanges, and we *only* trust revealed preference, then it seems like the\nonly thing we can learn is that \"miners will not voluntarily make this\nupgrade\" and any arguments about why are ultimately as speculative as the\nstated preferences prior to any Soft Fork deployment at all. As such, I\ndon't think we learn basically anything useful.\n\nAgainst the above backdrop, it is hard for me to think that a LOT=false\npolicy is *ever* sensible. In this case, I have advocated for ST because I\nthink it will either activate quickly, or prove out in general that a\nLOT=false policy just doesn't work (quickly). In all of the discussions I\nhave been party to, I have not once witnessed someone who would accept the\nfinal upholding of a miner veto on Taproot in particular, yet in the same\nsession, many of those participants are advocating for LOT=false anyway.\nThis seems incoherent to me.\n\nSo what are we actually solving for?\n\nThe idea as I understand it is to distribute power among Bitcoin's\ndifferent constituencies in such a way that we A. block \"bad upgrades\"\nalways, and B. do our best to activate \"good upgrades\". However, I feel it\nnecessary to caution against the fetishization of triumvirate governance\nfor its own sake. In my mind, anything that doesn't generally respect the\nnotion that the users are in control of the protocol is not too dissimilar\nfrom the decentralization theater that some Bitcoiners criticize various\naltcoins for.\n\nSo why not just UASF from the getgo?\n\nThis I have started to understand more clearly but still get hung up on\ncertain details. I think the only universal claim about this is \"avoid deep\nchain splits at all costs\" where \"deep\" is anything that is going to ruin\nupper layers of Bitcoin including institutional operations practices. For\nas long as I've been developing applications on top of Bitcoin the\n\"generally accepted default\" seems to be that 6 block reorgs are the\n\"untouchable limit\". However, this is where the details become really\nimportant. By definition, blocks conforming to soft-fork rules are accepted\nby the pre-fork implementations. In the other direction, there exists a\nsubset of blocks that can be produced by pre-fork miners that will not be\naccepted by the soft-fork rules. So, in this case, the risk incurred by the\nSF clients is that the chain halts. The risk incurred by the pre-fork\nimplementations is that there are reorgs that result in economic losses.\nHowever, in order for the reorgs to actually occur, miners have to\npersistently mine invalid blocks. The reason I make the distinction about\n\"persistently\" is that pre-fork implementations *will accept* soft-fork\ncompliant blocks. This means that the same incentive structures that cause\nminers to switch to mining atop new blocks instead of continuing to mine\natop older ones, apply just as much in this case. Chain convergence is\n*guaranteed* with as little as 51% (though this is eventual, and may not be\nan acceptable threshold if you're trying to keep the probability of deep\nreorgs to some astronomically low threshold). Furthermore, chain\nconvergence is probable with far less than that threshold, though I'm less\nsure of this claim and am open to a rebuttal on this.\n\nThe only wrench in the above line of reasoning is the issue of forced\nsignaling. I've never been a fan of forced signaling. The only thing it\nguards against is apathy, which I think is solved with even the threat of\nhaving your mined blocks being reorged out by including invalid\ntransactions in them.\n\nSo to summarize my understanding of what's going on here: we don't want\nMASF due to concentration of power, we don't want UASF because of the risk\nof chain split. The only way to reconcile this is to show miners that users\nmore strongly value work done on a chain enforcing the soft fork rules than\none that doesn't, ideally with costly signaling. This is the only way users\ncan effectively exercise an override on miner preference in a backwards\ncompatible way and substantially reduces or eliminates chain split risk. I\ndon't think the proposal above does anything to alleviate this issue. In\nfact, if I read it correctly, it rules out the possibility of any UASF\naltogether by making it such that a failed MASF forces the users to\nhard-fork the protocol. I think that this would be rather tragic since\navoidance of hard forks is one of the biggest victories that came out of\n2017. I apologize for not addressing the proposal in a more direct way and\nengaging with the details, however, I don't think that discussing the\nprocess makes any sense until we can agree what is being solved, and what\nrisks are flat out unacceptable. Perhaps laying those out in a\nfollowup response can make it easier for me to engage with the actual\nprocess.\n\nIn my mind any proposal that doesn't include a mechanism for gathering\nreliable information about user-preference in a way that is sybil resistant\ndoesn't make any meaningful progress on a consensus change process. I have\nonly two ideas in this area and both of them don't seem fantastic. The\nfirst one, fork futures, has been discussed at length by people more\nexperienced than I. The second, is a mechanism that makes mining\ntransactions that express fork preference (in an as-yet undefined way)\ncontingent upon the block signaling for it. The details of how to pull that\noff may make it such that it is DOA, but it would at least give users a way\nto broadcast a costly signal of their preference.\n\nKeagan\n\nOn Thu, Apr 22, 2021 at 4:57 PM Jeremy via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> This letter is particularly aimed at addressing Rusty Russell's quest for\n> a development process that respects all groups in a balance of powers.\n> However, in the spirit of open discussion, I'm sending it directly to the\n> list.\n>\n> This proposal is aimed to be compatible with Taproot's ST, and I hope will\n> help us form some rough consensus around what we try next. Some of the\n> concepts here are synthesized from what I've seen discussed, but I haven't\n> included citations of anyone's specific ideas as I'm not sure of the exact\n> provenance -- I won't claim to have invented this per se, I'm trying to\n> capture the zeitgeist of what anyone might think to be the process if\n> pressed to draw it out. Lemme know how I did.\n>\n> The specific parameters are up for debate, but I'm trying to make sure\n> I've captured the relevant state transitions.\n>\n> In this diagram time flows left-to-right, and transitions happen at the\n> beginning, end, or middle of a block of time. It should be relatively clear\n> when things happen, but if not, please ask to clarify.\n>\n> [image: Activation.png]\n>\n> Clarifications:\n> - ST: Speedy trial, whereby > T% signals on a block activate the rule\n> - neg-ST: Speedy Trial, whereby >X% signals on a block Reject the rule\n> - neg-ST and ST at the same time on different bits: 11 or 00 are \"abstain\"\n> votes and are discarded. only 10 or 01 are counted. The purpose of\n> simultaneous bits is to allow both earlier lock in and to permit early\n> failure, rather than just one or the other.\n> - PoW Fork: If a new rule is active, but there is insufficient hashrate,\n> the rule must be abandoned or PoW must be changed to minimize disruption.\n> In order to minimize disruption, a node will consider an alternative PoW\n> chain if < 1/4 of the typical hash rate is seen for a day. Alternative PoW\n> is defined as SHA-256 10,000 layers, and starts at low difficulty. This is\n> selected to be maximally similar to Bitcoin's existing PoW, but\n> sufficiently different to obviate extant ASICS. A node will consider the\n> new PoW to be equal in value to the old PoW, and will select between the\n> two based on most-work. Work can be either within a single chain. The new\n> PoW should have a difficulty adjustment every day for the first month, at\n> which point, it will relax to every 2 weeks. The details of this should be\n> described in a separate BIP.\n> - PoW Fork Lockin: PoW fork is only *required* once the new rule is\n> active. Thus it's not required in the case of mandatory signalling to force\n> the signalling contemporaneously, but it can be used to commit to forking\n> the PoW at some time in the future. It may make sense to not activate the\n> new rule till the new PoW is active. The game theory of this should be\n> studied carefully, it is my opinion that the safest option is to PoW fork\n> during signalling as otherwise miners may protest progress at all.\n> - Changes: Any time the underlying activation proposal is changed, the\n> process is restarted. E.g., suppose taproot is rejected because Quantum\n> Scaries, and we hash the key. The process restarts from the beginning.\n> Restarts can only occur during quieting periods.\n> - Quieting Period 1: In the first quieting period, if reached, the\n> \"Bitcoin Core Community\" can release the next step, or change the BIP. I\n> left out failing in this period as a change or a redeployment should always\n> be attempted.\n> - Quieting Period 2: In the second quieting period, the outcome is either\n> to reject the change entirely or to agree to force it. The \"Bitcoin Core\n> Community\" may also prepare the release at this stage, and sign, but should\n> re-label the client as \"Bitcoin Community's <Feature> Forcing Client\".  A\n> release labeled \"Bitcoin Core\" may also be made without mandatory\n> signalling and without forced activation can also be made, such a client\n> should have (depending on if the flag day is to use signalling) either\n> ability to activate in response to signalling or a hidden\n> <feature>activeathash parameter to allow clients to enable the feature\n> post-hoc of the activating block.\n> - Forced Signalling: It's unclear to me the merit of forced signalling\n> being 90% of 2016 blocks v.s. 90% of 100 blocks. A shorter forced signaling\n> assuages certain concerns around lost hashrate -- 1 day of disruption is a\n> lot better than 2 weeks.\n> - Timeline: As spec'd above, this whole process takes about 2 years worst\n> case. ST1 0 months; Quieting 1 at 3 months; ST2 at 6 months; Quieting 2 at\n> 9 months, final attempt at 1 year. The Forcing client period should\n> probably be 1 yr till active. This is *a bit* slower than the \"BIP8\n> LOT=True UASF Client\", but I think not so much slower that it's unworkable.\n>\n> The most contentious part of this I intuit to be the PoW Fork -- please,\n> let's avoid discussing the mechanic of how to most safely accomplish this.\n> The main point of including it in this diagram is to emphasize that if you\n> commit to being on a minority chain with because of a rule activation with,\n> say, 5% hashrate, you would experience very tangible disruption. In theory,\n> every fork upgrade (even signalled) entails such a risk, but we assume some\n> level of miner honesty (unfortunately!) that they never signal falsely.\n> This may be a bad assumption with mandatory signalling. The alternative is\n> to permit hard forks in our diagram, and allow users to downgrade their\n> client and deactivate this rule. Since this can lead to loss of funds, we\n> do not consider this a safe option, and it is a hardfork as well so is\n> technically compatible with the \"PoW fork\" branch.\n>\n>\n> Questions I have:\n>\n> 1) What state transitions are missing from this diagram? Are there other\n> paths that should be included?\n> 2) Is it ever feasible to make a change to the upgrade and not restart the\n> whole process?\n> 3) How long should all of the periods be? Can the 1st 2 ST's be 3 month?\n> Should we make the second one 6 month? Does it depend on previous signalled\n> hashrate?\n> 4) Do we ever adjust signalling thresholds?\n> 5) Does forced signalling need to be 2016 blocks?\n> 6) In the second ST should the min active height be allowed to be within\n> signalling time if > 3 mo?\n> 7) Under what circumstances would we *want* to skip the second ST period\n> and directly signal? What would we lose by committing to not skipping it,\n> ever (6 months?).\n> 8) I purposefully left the purple edge from ST2 bit 2 to Quieting 2: in\n> theory, this edge is not there because it is overruled by the neg-ST\n> failing to fail. Under what circumstances might we give this precedence\n> over neg-ST? E.g., signalling activate < 50%?\n> 9) How much parameter flexibility do we have during Quieting periods?\n> Should we be fixed beforehand?\n> 10) who wants to write the software for any of this... *noses*\n> 11) do we need to hard-code the PoW fork ahead of time? Or can it just be\n> \"prepared\" as an alt binary in case of emergency?\n>\n>\n>\n> Best,\n>\n> Jeremy\n>\n>\n>\n> --\n> @JeremyRubin <https://twitter.com/JeremyRubin>\n> <https://twitter.com/JeremyRubin>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210422/36f791a8/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: Activation.png\nType: image/png\nSize: 81125 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210422/36f791a8/attachment-0001.png>"
            }
        ],
        "thread_summary": {
            "title": "And Then What? Defining a Complete Process for Upgrades",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Keagan McClelland",
                "Jeremy"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 22741
        }
    },
    {
        "title": "[bitcoin-dev] Proposed BIP editor: Kalle Alm",
        "thread_messages": [
            {
                "author": "Luke Dashjr",
                "date": "2021-04-23T02:09:05",
                "message_text_only": "Unless there are objections, I intend to add Kalle Alm as a BIP editor to \nassist in merging PRs into the bips git repo.\n\nSince there is no explicit process to adding BIP editors, IMO it should be \nfine to use BIP 2's Process BIP progression:\n\n> A process BIP may change status from Draft to Active when it achieves\n> rough consensus on the mailing list. Such a proposal is said to have\n> rough consensus if it has been open to discussion on the development\n> mailing list for at least one month, and no person maintains any\n> unaddressed substantiated objections to it.\n\nA Process BIP could be opened for each new editor, but IMO that is \nunnecessary. If anyone feels there is a need for a new Process BIP, we can go \nthat route, but there is prior precedent for BIP editors appointing new BIP \neditors, so I think this should be fine.\n\nPlease speak up soon if you disagree.\n\nLuke"
            },
            {
                "author": "Jeremy",
                "date": "2021-04-23T03:36:16",
                "message_text_only": "ACK adding Kalle.\n\nKalle is a qualified reviewer / editor and well suited for this role.\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n\n\nOn Thu, Apr 22, 2021 at 7:09 PM Luke Dashjr via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Unless there are objections, I intend to add Kalle Alm as a BIP editor to\n> assist in merging PRs into the bips git repo.\n>\n> Since there is no explicit process to adding BIP editors, IMO it should be\n> fine to use BIP 2's Process BIP progression:\n>\n> > A process BIP may change status from Draft to Active when it achieves\n> > rough consensus on the mailing list. Such a proposal is said to have\n> > rough consensus if it has been open to discussion on the development\n> > mailing list for at least one month, and no person maintains any\n> > unaddressed substantiated objections to it.\n>\n> A Process BIP could be opened for each new editor, but IMO that is\n> unnecessary. If anyone feels there is a need for a new Process BIP, we can\n> go\n> that route, but there is prior precedent for BIP editors appointing new\n> BIP\n> editors, so I think this should be fine.\n>\n> Please speak up soon if you disagree.\n>\n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210422/322af051/attachment.html>"
            },
            {
                "author": "John Newbery",
                "date": "2021-04-23T07:49:39",
                "message_text_only": "ACK adding Kalle.\n\nOn Fri, Apr 23, 2021 at 4:36 AM Jeremy via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> ACK adding Kalle.\n>\n> Kalle is a qualified reviewer / editor and well suited for this role.\n> --\n> @JeremyRubin <https://twitter.com/JeremyRubin>\n> <https://twitter.com/JeremyRubin>\n>\n>\n> On Thu, Apr 22, 2021 at 7:09 PM Luke Dashjr via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Unless there are objections, I intend to add Kalle Alm as a BIP editor to\n>> assist in merging PRs into the bips git repo.\n>>\n>> Since there is no explicit process to adding BIP editors, IMO it should\n>> be\n>> fine to use BIP 2's Process BIP progression:\n>>\n>> > A process BIP may change status from Draft to Active when it achieves\n>> > rough consensus on the mailing list. Such a proposal is said to have\n>> > rough consensus if it has been open to discussion on the development\n>> > mailing list for at least one month, and no person maintains any\n>> > unaddressed substantiated objections to it.\n>>\n>> A Process BIP could be opened for each new editor, but IMO that is\n>> unnecessary. If anyone feels there is a need for a new Process BIP, we\n>> can go\n>> that route, but there is prior precedent for BIP editors appointing new\n>> BIP\n>> editors, so I think this should be fine.\n>>\n>> Please speak up soon if you disagree.\n>>\n>> Luke\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210423/8b232111/attachment.html>"
            },
            {
                "author": "Pindar Wong",
                "date": "2021-04-23T07:50:53",
                "message_text_only": "ACK.\n\np.\n\n\nOn Fri, Apr 23, 2021 at 10:09 AM Luke Dashjr via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Unless there are objections, I intend to add Kalle Alm as a BIP editor to\n> assist in merging PRs into the bips git repo.\n>\n> Since there is no explicit process to adding BIP editors, IMO it should be\n> fine to use BIP 2's Process BIP progression:\n>\n> > A process BIP may change status from Draft to Active when it achieves\n> > rough consensus on the mailing list. Such a proposal is said to have\n> > rough consensus if it has been open to discussion on the development\n> > mailing list for at least one month, and no person maintains any\n> > unaddressed substantiated objections to it.\n>\n> A Process BIP could be opened for each new editor, but IMO that is\n> unnecessary. If anyone feels there is a need for a new Process BIP, we can\n> go\n> that route, but there is prior precedent for BIP editors appointing new\n> BIP\n> editors, so I think this should be fine.\n>\n> Please speak up soon if you disagree.\n>\n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210423/0849a63a/attachment.html>"
            },
            {
                "author": "Eric Martindale",
                "date": "2021-04-23T09:11:41",
                "message_text_only": "ACK.  Kalle has been exceptional throughout his contributions \u2014 especially\nthankful for btcdeb \ud83d\ude4f\n\nOn Fri, Apr 23, 2021, 3:51 AM Pindar Wong via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> ACK.\n>\n> p.\n>\n>\n> On Fri, Apr 23, 2021 at 10:09 AM Luke Dashjr via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Unless there are objections, I intend to add Kalle Alm as a BIP editor to\n>> assist in merging PRs into the bips git repo.\n>>\n>> Since there is no explicit process to adding BIP editors, IMO it should\n>> be\n>> fine to use BIP 2's Process BIP progression:\n>>\n>> > A process BIP may change status from Draft to Active when it achieves\n>> > rough consensus on the mailing list. Such a proposal is said to have\n>> > rough consensus if it has been open to discussion on the development\n>> > mailing list for at least one month, and no person maintains any\n>> > unaddressed substantiated objections to it.\n>>\n>> A Process BIP could be opened for each new editor, but IMO that is\n>> unnecessary. If anyone feels there is a need for a new Process BIP, we\n>> can go\n>> that route, but there is prior precedent for BIP editors appointing new\n>> BIP\n>> editors, so I think this should be fine.\n>>\n>> Please speak up soon if you disagree.\n>>\n>> Luke\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210423/40b1cafb/attachment-0001.html>"
            },
            {
                "author": "Antoine Riard",
                "date": "2021-04-23T15:34:53",
                "message_text_only": "Hi Luke,\n\nFor the records and the subscribers of this list not following\n#bitcoin-core-dev, this mail follows a discussion which did happen during\nyesterday irc meetings.\nLogs here : http://gnusha.org/bitcoin-core-dev/2021-04-22.log\n\nI'll reiterate my opinion expressed during the meeting. If this proposal to\nextend the bip editorship membership doesn't satisfy parties involved or\nanyone in the community, I'm strongly opposed to have the matter sliced by\nadmins of the Bitcoin github org. I believe that defect or uncertainty in\nthe BIP Process shouldn't be solved by GH janitorial roles and I think\ntheir roles don't bestow to intervene in case of loopholes. Further, you\nhave far more contributors involved in the BIP Process rather than only\nBitcoin Core ones. FWIW, such precedent merits would be quite similar to\nlobby directly GH staff...\n\nUnless we harm Bitcoin users by not acting, I think we should always be\nrespectful of procedural forms. And in the lack of such forms, stay patient\nuntil a solution satisfy everyone.\n\nI would recommend the BIP editorship, once extended or not, to move in its\nown repository in the future.\n\nCheers,\nAntoine\n\n\n\n\nLe jeu. 22 avr. 2021 \u00e0 22:09, Luke Dashjr via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> a \u00e9crit :\n\n> Unless there are objections, I intend to add Kalle Alm as a BIP editor to\n> assist in merging PRs into the bips git repo.\n>\n> Since there is no explicit process to adding BIP editors, IMO it should be\n> fine to use BIP 2's Process BIP progression:\n>\n> > A process BIP may change status from Draft to Active when it achieves\n> > rough consensus on the mailing list. Such a proposal is said to have\n> > rough consensus if it has been open to discussion on the development\n> > mailing list for at least one month, and no person maintains any\n> > unaddressed substantiated objections to it.\n>\n> A Process BIP could be opened for each new editor, but IMO that is\n> unnecessary. If anyone feels there is a need for a new Process BIP, we can\n> go\n> that route, but there is prior precedent for BIP editors appointing new\n> BIP\n> editors, so I think this should be fine.\n>\n> Please speak up soon if you disagree.\n>\n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210423/fb5bccd8/attachment-0001.html>"
            },
            {
                "author": "nopara73",
                "date": "2021-04-24T10:16:15",
                "message_text_only": "ACK adding Kalle\n\nOn Fri, Apr 23, 2021 at 5:51 PM Antoine Riard via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi Luke,\n>\n> For the records and the subscribers of this list not following\n> #bitcoin-core-dev, this mail follows a discussion which did happen during\n> yesterday irc meetings.\n> Logs here : http://gnusha.org/bitcoin-core-dev/2021-04-22.log\n>\n> I'll reiterate my opinion expressed during the meeting. If this proposal\n> to extend the bip editorship membership doesn't satisfy parties involved or\n> anyone in the community, I'm strongly opposed to have the matter sliced by\n> admins of the Bitcoin github org. I believe that defect or uncertainty in\n> the BIP Process shouldn't be solved by GH janitorial roles and I think\n> their roles don't bestow to intervene in case of loopholes. Further, you\n> have far more contributors involved in the BIP Process rather than only\n> Bitcoin Core ones. FWIW, such precedent merits would be quite similar to\n> lobby directly GH staff...\n>\n> Unless we harm Bitcoin users by not acting, I think we should always be\n> respectful of procedural forms. And in the lack of such forms, stay patient\n> until a solution satisfy everyone.\n>\n> I would recommend the BIP editorship, once extended or not, to move in its\n> own repository in the future.\n>\n> Cheers,\n> Antoine\n>\n>\n>\n>\n> Le jeu. 22 avr. 2021 \u00e0 22:09, Luke Dashjr via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> a \u00e9crit :\n>\n>> Unless there are objections, I intend to add Kalle Alm as a BIP editor to\n>> assist in merging PRs into the bips git repo.\n>>\n>> Since there is no explicit process to adding BIP editors, IMO it should\n>> be\n>> fine to use BIP 2's Process BIP progression:\n>>\n>> > A process BIP may change status from Draft to Active when it achieves\n>> > rough consensus on the mailing list. Such a proposal is said to have\n>> > rough consensus if it has been open to discussion on the development\n>> > mailing list for at least one month, and no person maintains any\n>> > unaddressed substantiated objections to it.\n>>\n>> A Process BIP could be opened for each new editor, but IMO that is\n>> unnecessary. If anyone feels there is a need for a new Process BIP, we\n>> can go\n>> that route, but there is prior precedent for BIP editors appointing new\n>> BIP\n>> editors, so I think this should be fine.\n>>\n>> Please speak up soon if you disagree.\n>>\n>> Luke\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n-- \nBest,\n\u00c1d\u00e1m\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210424/81998e30/attachment.html>"
            },
            {
                "author": "Greg Maxwell",
                "date": "2021-04-24T04:42:12",
                "message_text_only": "I am opposed to the addition of Kalle Alm at this time.\n\nThose who believe that adding him will resolve the situation with\nLuke-jr's inappropriate behavior re: PR1104 are mistaken.\n\n\n\n27e59ffd51ee5a95d0e0faff70e045faca10b00015e90abc1c8de48b1dfff40c"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-04-24T14:45:46",
                "message_text_only": "What is preventing the BIP maintainership role from moving to a bot? It does seem like a bot should be able to do a fine \njob given the explicit criteria (though ignoring obvious spam is often nice, its by no means a requirement).\n\nGiven recent events where humans have....acted like humans, it seems a move to a bot may be warranted.\n\nMatt\n\nOn 4/24/21 00:42, Greg Maxwell via bitcoin-dev wrote:\n> I am opposed to the addition of Kalle Alm at this time.\n> \n> Those who believe that adding him will resolve the situation with\n> Luke-jr's inappropriate behavior re: PR1104 are mistaken.\n> \n> \n> \n> 27e59ffd51ee5a95d0e0faff70e045faca10b00015e90abc1c8de48b1dfff40c\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "David A. Harding",
                "date": "2021-04-26T00:36:40",
                "message_text_only": "On Sat, Apr 24, 2021 at 04:42:12AM +0000, Greg Maxwell via bitcoin-dev wrote:\n> I am opposed to the addition of Kalle Alm at this time.  Those who\n> believe [this] will resolve the situation [...] re: PR1104 are\n> mistaken.\n\nPR1104 has been merged.  Do you continue to oppose the addition?\n\nThanks,\n\n-Dave\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210425/80fd21d6/attachment.sig>"
            },
            {
                "author": "Jaime Caring",
                "date": "2021-04-27T22:30:56",
                "message_text_only": "Kalle should not be made an editor by an ad-hoc process. I reiterate Greg's\nNACK.\n\nI propose that we form a stewardship committee of frequent contributors,\nincluding you, Greg, and 21 others. The stewards appoint a small set of\neditors with permanent oversight by the stewards. A defined process\nprevents this controversy from arising in the future and makes proceedings\nclear.\n\nMy proposal has been moderated off of this list, but may be viewed here:\nhttps://github.com/bitcoin/bips/pull/1113\n\nI care not for the role of initial transitory editor. I would be pleased\nshould any responsible community member shoulder this onus in my stead.\n\nPeace be upon you,\n\nJC\n\nOn Mon, 26 Apr 2021 at 00:37, David A. Harding via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Sat, Apr 24, 2021 at 04:42:12AM +0000, Greg Maxwell via bitcoin-dev\n> wrote:\n> > I am opposed to the addition of Kalle Alm at this time.  Those who\n> > believe [this] will resolve the situation [...] re: PR1104 are\n> > mistaken.\n>\n> PR1104 has been merged.  Do you continue to oppose the addition?\n>\n> Thanks,\n>\n> -Dave\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210427/ad3b1a8b/attachment.html>"
            },
            {
                "author": "Amir Taaki",
                "date": "2021-04-28T09:52:33",
                "message_text_only": "A committee to guide the committee? You guys truly have lost the plot.\n\nAll the good minds and cryptographers have left Bitcoin. What remains is\nan empty echo chamber.\n\nTruth is these problems start with lack of vision and long-term roadmap,\nnot with the processes themselves.\n\nAnd the Bitcoin Core monopoly created this situation; one coin, one\nclient, one vision. And the inevitable infighting for ultimate power.\n\nReally if we want to go down this route, there should be a long period\nof self reflection about where the problems began rather than patching\nsome process and moving on.\n\nI propose Bitcoin Core is dissolved as the official Bitcoin project. The\ncommunity is free to elect their preferred version of Bitcoin. And most\nimportantly, Bitcoin developers commit to a fully specced standard that\nall implementations move towards using.\n\nOn 4/28/21 12:30 AM, Jaime Caring via bitcoin-dev wrote:\n> Kalle should not be made an editor by an ad-hoc process. I reiterate\n> Greg's NACK.\n> \n> I propose that we form a stewardship committee of frequent contributors,\n> including you, Greg, and 21 others. The stewards appoint a small set of\n> editors with permanent oversight by the stewards. A defined process\n> prevents this controversy from arising in the future and makes\n> proceedings clear.\n> \n> My proposal has been moderated off of this list, but may be viewed here:\n> https://github.com/bitcoin/bips/pull/1113\n> <https://github.com/bitcoin/bips/pull/1113>\n> \n> I care not for the role of initial transitory editor. I would be pleased\n> should any responsible community member shoulder this onus in my stead.\n> \n> Peace be upon you,\n> \n> JC\n> \n> On Mon, 26 Apr 2021 at 00:37, David A. Harding via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n>     On Sat, Apr 24, 2021 at 04:42:12AM +0000, Greg Maxwell via\n>     bitcoin-dev wrote:\n>     > I am opposed to the addition of Kalle Alm at this time.\u00a0 Those who\n>     > believe [this] will resolve the situation [...] re: PR1104 are\n>     > mistaken.\n> \n>     PR1104 has been merged.\u00a0 Do you continue to oppose the addition?\n> \n>     Thanks,\n> \n>     -Dave\n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Karl",
                "date": "2021-04-30T15:39:23",
                "message_text_only": "A good solution here is to make it clear to visitors that facilitation,\nmediation, and organisation help is badly needed in the core development\nteam.\n\nPeople with such expertise can even be hired directly.\n\nA good facilitator opens communication paths between all parties, leaving\neveryone satisfied with decisions.  Don't accept a compromise if you can\nlook for something better.\n\nOn Fri, Apr 30, 2021, 8:00 AM Amir Taaki via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> A committee to guide the committee? You guys truly have lost the plot.\n>\n> All the good minds and cryptographers have left Bitcoin. What remains is\n> an empty echo chamber.\n>\n> Truth is these problems start with lack of vision and long-term roadmap,\n> not with the processes themselves.\n>\n> And the Bitcoin Core monopoly created this situation; one coin, one\n> client, one vision. And the inevitable infighting for ultimate power.\n>\n> Really if we want to go down this route, there should be a long period\n> of self reflection about where the problems began rather than patching\n> some process and moving on.\n>\n> I propose Bitcoin Core is dissolved as the official Bitcoin project. The\n> community is free to elect their preferred version of Bitcoin. And most\n> importantly, Bitcoin developers commit to a fully specced standard that\n> all implementations move towards using.\n>\n> On 4/28/21 12:30 AM, Jaime Caring via bitcoin-dev wrote:\n> > Kalle should not be made an editor by an ad-hoc process. I reiterate\n> > Greg's NACK.\n> >\n> > I propose that we form a stewardship committee of frequent contributors,\n> > including you, Greg, and 21 others. The stewards appoint a small set of\n> > editors with permanent oversight by the stewards. A defined process\n> > prevents this controversy from arising in the future and makes\n> > proceedings clear.\n> >\n> > My proposal has been moderated off of this list, but may be viewed here:\n> > https://github.com/bitcoin/bips/pull/1113\n> > <https://github.com/bitcoin/bips/pull/1113>\n> >\n> > I care not for the role of initial transitory editor. I would be pleased\n> > should any responsible community member shoulder this onus in my stead.\n> >\n> > Peace be upon you,\n> >\n> > JC\n> >\n> > On Mon, 26 Apr 2021 at 00:37, David A. Harding via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org\n> > <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> >\n> >     On Sat, Apr 24, 2021 at 04:42:12AM +0000, Greg Maxwell via\n> >     bitcoin-dev wrote:\n> >     > I am opposed to the addition of Kalle Alm at this time.  Those who\n> >     > believe [this] will resolve the situation [...] re: PR1104 are\n> >     > mistaken.\n> >\n> >     PR1104 has been merged.  Do you continue to oppose the addition?\n> >\n> >     Thanks,\n> >\n> >     -Dave\n> >     _______________________________________________\n> >     bitcoin-dev mailing list\n> >     bitcoin-dev at lists.linuxfoundation.org\n> >     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> >     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210430/1ee7c171/attachment.html>"
            },
            {
                "author": "Jameson Lopp",
                "date": "2021-04-30T16:58:04",
                "message_text_only": "On Fri, Apr 30, 2021 at 7:59 AM Amir Taaki via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> A committee to guide the committee? You guys truly have lost the plot.\n>\n> All the good minds and cryptographers have left Bitcoin. What remains is\n> an empty echo chamber.\n>\n> Truth is these problems start with lack of vision and long-term roadmap,\n> not with the processes themselves.\n>\n> And the Bitcoin Core monopoly created this situation; one coin, one\n> client, one vision. And the inevitable infighting for ultimate power.\n>\n> Really if we want to go down this route, there should be a long period\n> of self reflection about where the problems began rather than patching\n> some process and moving on.\n>\n> I propose Bitcoin Core is dissolved as the official Bitcoin project.\n\n\nNonsense, as it is not the official Bitcoin project. There is no such thing.\n\nThe community is free to elect their preferred version of Bitcoin.\n\n\nIndividuals have voted with their feet and are free to continue to do so.\nIt's anarchy, I tell you!\n\n\n> And most importantly, Bitcoin developers commit to a fully specced\n> standard that\n> all implementations move towards using.\n>\n\nWho decides the spec? Perhaps... a committee of some sort?\n\n\n>\n> On 4/28/21 12:30 AM, Jaime Caring via bitcoin-dev wrote:\n> > Kalle should not be made an editor by an ad-hoc process. I reiterate\n> > Greg's NACK.\n> >\n> > I propose that we form a stewardship committee of frequent contributors,\n> > including you, Greg, and 21 others. The stewards appoint a small set of\n> > editors with permanent oversight by the stewards. A defined process\n> > prevents this controversy from arising in the future and makes\n> > proceedings clear.\n> >\n> > My proposal has been moderated off of this list, but may be viewed here:\n> > https://github.com/bitcoin/bips/pull/1113\n> > <https://github.com/bitcoin/bips/pull/1113>\n> >\n> > I care not for the role of initial transitory editor. I would be pleased\n> > should any responsible community member shoulder this onus in my stead.\n> >\n> > Peace be upon you,\n> >\n> > JC\n> >\n> > On Mon, 26 Apr 2021 at 00:37, David A. Harding via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org\n> > <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> >\n> >     On Sat, Apr 24, 2021 at 04:42:12AM +0000, Greg Maxwell via\n> >     bitcoin-dev wrote:\n> >     > I am opposed to the addition of Kalle Alm at this time.  Those who\n> >     > believe [this] will resolve the situation [...] re: PR1104 are\n> >     > mistaken.\n> >\n> >     PR1104 has been merged.  Do you continue to oppose the addition?\n> >\n> >     Thanks,\n> >\n> >     -Dave\n> >     _______________________________________________\n> >     bitcoin-dev mailing list\n> >     bitcoin-dev at lists.linuxfoundation.org\n> >     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> >     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210430/93283b82/attachment.html>"
            },
            {
                "author": "Sjors Provoost",
                "date": "2021-04-26T15:02:06",
                "message_text_only": "ACK for adding Kalle.\n\nRecent drama aside, having a single editor is not ideal. There's currently 110 open pull requests to the BIPs repo.\n\n- Sjors\n\n> Op 23 apr. 2021, om 04:09 heeft Luke Dashjr via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> het volgende geschreven:\n> \n> Unless there are objections, I intend to add Kalle Alm as a BIP editor to\n> assist in merging PRs into the bips git repo.\n> \n> Since there is no explicit process to adding BIP editors, IMO it should be\n> fine to use BIP 2's Process BIP progression:\n> \n>> A process BIP may change status from Draft to Active when it achieves\n>> rough consensus on the mailing list. Such a proposal is said to have\n>> rough consensus if it has been open to discussion on the development\n>> mailing list for at least one month, and no person maintains any\n>> unaddressed substantiated objections to it.\n> \n> A Process BIP could be opened for each new editor, but IMO that is\n> unnecessary. If anyone feels there is a need for a new Process BIP, we can go\n> that route, but there is prior precedent for BIP editors appointing new BIP\n> editors, so I think this should be fine.\n> \n> Please speak up soon if you disagree.\n> \n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210426/a63b4dcb/attachment.sig>"
            },
            {
                "author": "James O'Beirne",
                "date": "2021-04-26T16:56:19",
                "message_text_only": "ACK for Kalle.\n\nOn Mon, Apr 26, 2021, 09:55 Sjors Provoost via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> ACK for adding Kalle.\n>\n> Recent drama aside, having a single editor is not ideal. There's currently\n> 110 open pull requests to the BIPs repo.\n>\n> - Sjors\n>\n> > Op 23 apr. 2021, om 04:09 heeft Luke Dashjr via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> het volgende geschreven:\n> >\n> > Unless there are objections, I intend to add Kalle Alm as a BIP editor to\n> > assist in merging PRs into the bips git repo.\n> >\n> > Since there is no explicit process to adding BIP editors, IMO it should\n> be\n> > fine to use BIP 2's Process BIP progression:\n> >\n> >> A process BIP may change status from Draft to Active when it achieves\n> >> rough consensus on the mailing list. Such a proposal is said to have\n> >> rough consensus if it has been open to discussion on the development\n> >> mailing list for at least one month, and no person maintains any\n> >> unaddressed substantiated objections to it.\n> >\n> > A Process BIP could be opened for each new editor, but IMO that is\n> > unnecessary. If anyone feels there is a need for a new Process BIP, we\n> can go\n> > that route, but there is prior precedent for BIP editors appointing new\n> BIP\n> > editors, so I think this should be fine.\n> >\n> > Please speak up soon if you disagree.\n> >\n> > Luke\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210426/34c723c3/attachment.html>"
            },
            {
                "author": "W. J. van der Laan",
                "date": "2021-04-26T18:13:43",
                "message_text_only": "On Friday, April 23rd, 2021 at 4:09 AM, Luke Dashjr via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Unless there are objections, I intend to add Kalle Alm as a BIP editor to\n> assist in merging PRs into the bips git repo.\n\nACK on adding Kalle.\n\nI'm happy to finally see someone else interested in BIP maintainer role, for years no one really seemed to care about doing this mostly procedural/bureaucratic function, which is (part of) the reason Luke-Jr ended up as the only BIP maintainer for such a long time.\n\nAnd I disagree that a bot could do this just as well. Auto-merging would open it up to all kinds of DoS attacks, vandalism, and low-effort scams that a person can easily ward against.\n\n-W"
            }
        ],
        "thread_summary": {
            "title": "Proposed BIP editor: Kalle Alm",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeremy",
                "John Newbery",
                "Antoine Riard",
                "David A. Harding",
                "Greg Maxwell",
                "W. J. van der Laan",
                "Karl",
                "Eric Martindale",
                "Amir Taaki",
                "Luke Dashjr",
                "Sjors Provoost",
                "Matt Corallo",
                "Jameson Lopp",
                "Pindar Wong",
                "Jaime Caring",
                "James O'Beirne",
                "nopara73"
            ],
            "messages_count": 17,
            "total_messages_chars_count": 30606
        }
    },
    {
        "title": "[bitcoin-dev] Reminder on the Purpose of BIPs",
        "thread_messages": [
            {
                "author": "Matt Corallo",
                "date": "2021-04-25T20:29:44",
                "message_text_only": "There appears to be some severe lack of understanding of the point of the BIP process here.\n\nThe BIP process exists to be a place for those in the Bitcoin development community (which includes anyone who wishes to \nparticipate in it!) to place specifications which may be important for others in the Bitcoin development community to \nsee, to ensure interoperability.\n\nIt does not, should not, and has never existed to take any positions on...anything. It has always existed to allow those \nwho wish to participate in the Bitcoin development community to publish proposed standards or deployed protocols, in \nwhatever form the authors of the BIPs seem fit.\n\nIf anyone suggests changes with a BIP's proposed form in a way the original author does not agree with, they have always \nbeen free to, and should simply create a new BIP with their proposed form.\n\nThe BIP editor's role has always been, and should continue to be, to encourage BIP authors to respond to (either by \ndismissing or accepting) feedback on their BIPs, and encourage formatting in a standard form. The BIP editor's role has \nnever included, and should not include, taking a stance on substantive changes to a BIP's contents - those are up to the \nauthor(s) of a BIP, and always have been.\n\nIf the BIP editor is deliberately refusing to accept changes which the author's approval (which appears to be occurring \nhere), the broader development community (us) should either remove the BIP editor and replace them, or simply ignore the \nBIP repository entirely (which seems like the most likely outcome here). There really should be no debate over this \npoint, and I'm not entirely sure why anyone would think there should be.\n\nLuckily BIPs aren't really all that critical in this instance - they exist to communicate protocols for \ninteroperability, and in this case the protocol changes as proposed have been broadly communicated already.\n\nStill, given the apparent lack of desire to remove the BIP editor in this case, I'd suggest we all move on and simply \nignore the BIP repository entirely. Simply sending notices of protocol systems to this mailing list is likely sufficient.\n\nMatt\n\nOn 4/23/21 11:34, Antoine Riard via bitcoin-dev wrote:\n> Hi Luke,\n> \n> For the records and the subscribers of this list not following #bitcoin-core-dev, this mail follows a discussion which \n> did happen during yesterday irc meetings.\n> Logs here : http://gnusha.org/bitcoin-core-dev/2021-04-22.log <http://gnusha.org/bitcoin-core-dev/2021-04-22.log>\n> \n> I'll reiterate my opinion expressed during the meeting. If this proposal to extend the bip editorship membership doesn't \n> satisfy parties involved or anyone in the community, I'm strongly opposed to have the matter sliced by admins of the \n> Bitcoin github org. I believe that defect or uncertainty in the BIP Process shouldn't be solved by GH janitorial roles \n> and I think their roles don't bestow to intervene in case of loopholes. Further, you have far more contributors involved \n> in the BIP Process rather than only Bitcoin Core ones. FWIW, such precedent merits would be quite similar to lobby \n> directly GH staff...\n> \n> Unless we harm Bitcoin users by not acting, I think we should always be respectful of procedural forms. And in the lack \n> of such forms, stay patient until a solution satisfy everyone.\n> \n> I would recommend the BIP editorship, once extended or not, to move in its own repository in the future.\n> \n> Cheers,\n> Antoine\n> \n> \n> \n> \n> Le\u00a0jeu. 22 avr. 2021 \u00e0\u00a022:09, Luke Dashjr via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org \n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> a \u00e9crit\u00a0:\n> \n>     Unless there are objections, I intend to add Kalle Alm as a BIP editor to\n>     assist in merging PRs into the bips git repo.\n> \n>     Since there is no explicit process to adding BIP editors, IMO it should be\n>     fine to use BIP 2's Process BIP progression:\n> \n>      > A process BIP may change status from Draft to Active when it achieves\n>      > rough consensus on the mailing list. Such a proposal is said to have\n>      > rough consensus if it has been open to discussion on the development\n>      > mailing list for at least one month, and no person maintains any\n>      > unaddressed substantiated objections to it.\n> \n>     A Process BIP could be opened for each new editor, but IMO that is\n>     unnecessary. If anyone feels there is a need for a new Process BIP, we can go\n>     that route, but there is prior precedent for BIP editors appointing new BIP\n>     editors, so I think this should be fine.\n> \n>     Please speak up soon if you disagree.\n> \n>     Luke\n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2021-04-25T21:00:06",
                "message_text_only": "On Sunday 25 April 2021 20:29:44 Matt Corallo wrote:\n> If the BIP editor is deliberately refusing to accept changes which the\n> author's approval (which appears to be occurring here),\n\nIt isn't. I am triaging BIPs PRs the same as I have for years, and will get to \nthem all in due time, likely before the end of the month.\n\nRather, what we have going on is a few bad actors trying to misportray the \nBIPs as an approval process so they can pretend ST is somehow official, or \nthat the preexisting Core+Taproot client is \"breaking\" the spec. And to \nfurther their agenda, they have been harassing me demanding special \ntreatment.\n\nI will not become an accomplice to this deception by giving special treatment, \nand will process the BIP PR neutrally according to the currently-defined BIP \nprocess.\n\nDespite the continual harassment, I have even made two efforts to try to \n(fairly) make things faster, and have been obstructed both times by ST \nadvocates. It appears they intend to paint me as \"deliberately refusing\" (to \nuse your words) in order to try to put Bitcoin and the BIP process under \ntheir control, and abuse it in the same manner in which they abused Bitcoin \nCore's usual standards (by releasing ST without community consensus).\n\nLuke"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-04-25T21:14:08",
                "message_text_only": "On 4/25/21 17:00, Luke Dashjr wrote:\n> On Sunday 25 April 2021 20:29:44 Matt Corallo wrote:\n>> If the BIP editor is deliberately refusing to accept changes which the\n>> author's approval (which appears to be occurring here),\n> \n> It isn't. I am triaging BIPs PRs the same as I have for years, and will get to\n> them all in due time, likely before the end of the month.\n\nPlease don't play dumb, it isn't a good look.\n\n> Rather, what we have going on is a few bad actors trying to misportray the\n> BIPs as an approval process so they can pretend ST is somehow official, or\n> that the preexisting Core+Taproot client is \"breaking\" the spec. And to\n> further their agenda, they have been harassing me demanding special\n> treatment.\n\nI'd be curious who is doing that, because obviously I'd agree that merging something in a BIP doesn't really have any \nspecial meaning. This, however, is a completely different topic from following the BIP process that you had a key hand \nin crafting.\n\n> I will not become an accomplice to this deception by giving special treatment,\n> and will process the BIP PR neutrally according to the currently-defined BIP\n> process.\n\nAgain, please don't play dumb, no one watching believes this - you've been active on the BIP repo on numerous PRs and \nthis has never in the past been the case.\n\n> Despite the continual harassment, I have even made two efforts to try to\n> (fairly) make things faster, and have been obstructed both times by ST\n> advocates. It appears they intend to paint me as \"deliberately refusing\" (to\n> use your words) in order to try to put Bitcoin and the BIP process under\n> their control, and abuse it in the same manner in which they abused Bitcoin\n> Core's usual standards (by releasing ST without community consensus).\n> \n> Luke\n>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2021-04-25T21:22:40",
                "message_text_only": "On Sunday 25 April 2021 21:14:08 Matt Corallo wrote:\n> On 4/25/21 17:00, Luke Dashjr wrote:\n> > I will not become an accomplice to this deception by giving special\n> > treatment, and will process the BIP PR neutrally according to the\n> > currently-defined BIP process.\n>\n> Again, please don't play dumb, no one watching believes this - you've been\n> active on the BIP repo on numerous PRs and this has never in the past been\n> the case.\n\nI started going through PRs a few days ago, in order of \"Recently updated\" on \nGitHub, starting with the least-recent following the last one I triaged a \nmonth ago that hasn't seen activity.. the same as I have been doing month \nafter month prior to this.\n\nIf you don't believe me, feel free to look through the repo history.\n\nLuke"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-04-25T21:31:50",
                "message_text_only": "Alright, let's see...\n\nSorting by most recently updated...\nhttps://github.com/bitcoin/bips/pulls?page=1&q=is%3Apr+is%3Aopen+sort%3Aupdated-asc+updated%3A%3E2021-01-01\n\n#1104 has been updated nearly daily for the past many weeks. You commented 12 days ago saying \"Concept NACK\" (which \nisn't a thing on BIPs - huh? they're author documents, as you're well aware), and nothing further.\n\n#1105 which is less recently updated by one on the above list has a comment from you 19 hours ago.\n\nI'm really not sure what playing dumb gets you, here. Its really transparent and isn't helpful in any way to anything.\n\nIn general, I think its time we all agree the BIP process has simply failed and move on. Luckily its not really all that \ncritical and proposed protocol documents can be placed nearly anywhere with the same effect.\n\nMatt\n\nOn 4/25/21 17:22, Luke Dashjr wrote:\n> On Sunday 25 April 2021 21:14:08 Matt Corallo wrote:\n>> On 4/25/21 17:00, Luke Dashjr wrote:\n>>> I will not become an accomplice to this deception by giving special\n>>> treatment, and will process the BIP PR neutrally according to the\n>>> currently-defined BIP process.\n>>\n>> Again, please don't play dumb, no one watching believes this - you've been\n>> active on the BIP repo on numerous PRs and this has never in the past been\n>> the case.\n> \n> I started going through PRs a few days ago, in order of \"Recently updated\" on\n> GitHub, starting with the least-recent following the last one I triaged a\n> month ago that hasn't seen activity.. the same as I have been doing month\n> after month prior to this.\n> \n> If you don't believe me, feel free to look through the repo history.\n> \n> Luke\n>"
            },
            {
                "author": "David A. Harding",
                "date": "2021-04-26T19:43:09",
                "message_text_only": "On Sun, Apr 25, 2021 at 05:31:50PM -0400, Matt Corallo via bitcoin-dev wrote:\n> In general, I think its time we all agree the BIP process has simply failed\n> and move on. Luckily its not really all that critical and proposed protocol\n> documents can be placed nearly anywhere with the same effect.\n\nI recommend:\n\n1. We add additional BIP editors, starting with Kalle Alm (if there are\n   no continuing significant objections).\n\n2. We seek Luke Dashjr's resignation as BIPs editor.\n\n3. We begin treating protocol documents outside the BIPs repository as\n   first-class BIP documentation.\n\nThe first recommendation permits continued maintenance of existing BIPs\nplus gives the additional maintainers an opportunity to rebuild the\ncredibility of the repository.\n\nThe second recommendation addresses the dissatisfaction of many BIP\nauthors and potential authors with the current editor, which I think\nwill discourage many of them from making additional significant\ncontributions to the repository.  It also seems to me to be a better use\nof Luke's talents and interests for him to focus on protocol research\nand review rather than procedurally checking whether a bunch of\ndocuments are well formed.\n\nThe third recommendation provides an escape hatch for anyone, such as\nMatt, who currently thinks the process has failed, or for anyone who\ncomes to that same conclusion in the future under a different editing\nteam.  My specific recommendations there are:\n\na. Anyone writing protocol documentation in the spirit of the BIP\n   process can post their idea to this mailing list like we've always\n   done and, when they've finished collecting initial feedback, they can\n   assign themselves a unique decentralized identifier starting with\n   \"bip-\".  They may also define a shorter alias that they encourage\n   people to use in cases where the correct document can be inferred\n   from context.  E.g.,\n\n      bip-wuille-taproot (bip-taproot)\n      bip-towns-versionbits-min-activation-height (bip-vbmah)\n      bip-todd-harding-opt-in-replace-by-fee (bip-opt-in-rbf)\n\nb. The author then publishes the document to any place they'd like, although\n   they are strongly encouraged to make any document source available\n   under an open license to ensure others can create their own\n   modifications.\n\nc. Implementations of BIPs, whether original repository BIPs or\n   decentralized BIPs, link to the BIPs they implement to ensure\n   researchers and developers can find the relevant protocol\n   documentation.  E.g.,\n   https://github.com/bitcoin/bitcoin/blob/fe5e495c31de47b0ec732b943db11fe345d874af/doc/bips.md\n\n     (It may also be advisable for implementations to mirror copies of\n     the BIPs they implement so later modifications to the document\n     don't confuse anyone.  For this reason, extremely liberal\n     licensing of BIP documents is encouraged.)\n\nd. To help maintain quality and consistency between documentation, the\n   BIP editors provide a BIP document template, guidelines similar to\n   the existing BIP2, and an easy-to-run format linter.\n\nI think this decentralized BIPs alternative also helps address some\nlongstanding problems with the BIPs system: that many casual Bitcoin\nusers and developers think of documents in the BIPs repo as\nauthoritative and that there are some development teams (such as for LN)\nthat have already abandoned the BIPs process because, in part, they want\ncomplete control over their own documentation.  \n\nThe recommendations above were developed based on conversations I had\nwith a few stakeholders in the BIPs process, but I did not attempt a\ncomprehensive survey and I certainly don't claim to speak for anyone\nelse.  I hope the recommendations are satisfactory and I look forward to\nyour feedback.\n\nThanks,\n\n-Dave\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210426/2c57cc4a/attachment-0001.sig>"
            },
            {
                "author": "Greg Maxwell",
                "date": "2021-04-26T20:04:39",
                "message_text_only": "I endorse Harding's recommendations.  On the point about mirroring,\none thing to keep in mind is that the other repositories may go\noffline.\n\nModification confusion could be avoided by recording what revision\n(commit hash) was current at the time of inclusion, but the document\ngoing offline can only be protected against by maintaining a copy\nsomewhere.\n\n\nOn Mon, Apr 26, 2021 at 7:44 PM David A. Harding via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> On Sun, Apr 25, 2021 at 05:31:50PM -0400, Matt Corallo via bitcoin-dev wrote:\n> > In general, I think its time we all agree the BIP process has simply failed\n> > and move on. Luckily its not really all that critical and proposed protocol\n> > documents can be placed nearly anywhere with the same effect.\n>\n> I recommend:\n>\n> 1. We add additional BIP editors, starting with Kalle Alm (if there are\n>    no continuing significant objections).\n>\n> 2. We seek Luke Dashjr's resignation as BIPs editor.\n>\n> 3. We begin treating protocol documents outside the BIPs repository as\n>    first-class BIP documentation.\n>\n> The first recommendation permits continued maintenance of existing BIPs\n> plus gives the additional maintainers an opportunity to rebuild the\n> credibility of the repository.\n>\n> The second recommendation addresses the dissatisfaction of many BIP\n> authors and potential authors with the current editor, which I think\n> will discourage many of them from making additional significant\n> contributions to the repository.  It also seems to me to be a better use\n> of Luke's talents and interests for him to focus on protocol research\n> and review rather than procedurally checking whether a bunch of\n> documents are well formed.\n>\n> The third recommendation provides an escape hatch for anyone, such as\n> Matt, who currently thinks the process has failed, or for anyone who\n> comes to that same conclusion in the future under a different editing\n> team.  My specific recommendations there are:\n>\n> a. Anyone writing protocol documentation in the spirit of the BIP\n>    process can post their idea to this mailing list like we've always\n>    done and, when they've finished collecting initial feedback, they can\n>    assign themselves a unique decentralized identifier starting with\n>    \"bip-\".  They may also define a shorter alias that they encourage\n>    people to use in cases where the correct document can be inferred\n>    from context.  E.g.,\n>\n>       bip-wuille-taproot (bip-taproot)\n>       bip-towns-versionbits-min-activation-height (bip-vbmah)\n>       bip-todd-harding-opt-in-replace-by-fee (bip-opt-in-rbf)\n>\n> b. The author then publishes the document to any place they'd like, although\n>    they are strongly encouraged to make any document source available\n>    under an open license to ensure others can create their own\n>    modifications.\n>\n> c. Implementations of BIPs, whether original repository BIPs or\n>    decentralized BIPs, link to the BIPs they implement to ensure\n>    researchers and developers can find the relevant protocol\n>    documentation.  E.g.,\n>    https://github.com/bitcoin/bitcoin/blob/fe5e495c31de47b0ec732b943db11fe345d874af/doc/bips.md\n>\n>      (It may also be advisable for implementations to mirror copies of\n>      the BIPs they implement so later modifications to the document\n>      don't confuse anyone.  For this reason, extremely liberal\n>      licensing of BIP documents is encouraged.)\n>\n> d. To help maintain quality and consistency between documentation, the\n>    BIP editors provide a BIP document template, guidelines similar to\n>    the existing BIP2, and an easy-to-run format linter.\n>\n> I think this decentralized BIPs alternative also helps address some\n> longstanding problems with the BIPs system: that many casual Bitcoin\n> users and developers think of documents in the BIPs repo as\n> authoritative and that there are some development teams (such as for LN)\n> that have already abandoned the BIPs process because, in part, they want\n> complete control over their own documentation.\n>\n> The recommendations above were developed based on conversations I had\n> with a few stakeholders in the BIPs process, but I did not attempt a\n> comprehensive survey and I certainly don't claim to speak for anyone\n> else.  I hope the recommendations are satisfactory and I look forward to\n> your feedback.\n>\n> Thanks,\n>\n> -Dave\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2021-04-27T19:43:40",
                "message_text_only": "On Mon, 26 Apr 2021 at 22:08, Greg Maxwell via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I endorse Harding's recommendations.  On the point about mirroring,\n> one thing to keep in mind is that the other repositories may go\n> offline.\n>\n> Modification confusion could be avoided by recording what revision\n> (commit hash) was current at the time of inclusion, but the document\n> going offline can only be protected against by maintaining a copy\n> somewhere.\n>\n\nOne could partially solve the mirroring issue by giving each decentralized\nBIP (optionally) a genesis transaction ID, that moved in time on the block\nchain\n\nThis can be made to mirror / witness the evolution in git of the BIP using\ngit commit hashes (in time), and then matching those commit hashes in the\nblock chain by tweaking the public key address by the same amount (with no\nchange address)\n\nWhat would occur then would be a genesis and current definitive HEAD of a\nBIP, and the history it's gone through.  The whole history can be\nreconstructed from any one transaction.  This is quite similar to Peter\nTodd's single use seals, and the work done on RGB\n\nRegarding commit trees going offline, they can be mirrored, hosted on\npopular sites (github/gitlab) and it's natural that popular repos in git\nare cloned\n\nThis also provides a little skin in the game and prevents some sybil\nattacks, because you need to spend money on a TX\n\nIn this way whole BIPs can have a life cycle outside of any official body,\nbut also be assigned BIP numbers in the bitcoin repo\n\nThis mainly an informational idea, however, I have been working on some\ncode and early prototypes to do this, so feel free to message me off-list\nif there's additional interest\n\n\n>\n>\n> On Mon, Apr 26, 2021 at 7:44 PM David A. Harding via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> > On Sun, Apr 25, 2021 at 05:31:50PM -0400, Matt Corallo via bitcoin-dev\n> wrote:\n> > > In general, I think its time we all agree the BIP process has simply\n> failed\n> > > and move on. Luckily its not really all that critical and proposed\n> protocol\n> > > documents can be placed nearly anywhere with the same effect.\n> >\n> > I recommend:\n> >\n> > 1. We add additional BIP editors, starting with Kalle Alm (if there are\n> >    no continuing significant objections).\n> >\n> > 2. We seek Luke Dashjr's resignation as BIPs editor.\n> >\n> > 3. We begin treating protocol documents outside the BIPs repository as\n> >    first-class BIP documentation.\n> >\n> > The first recommendation permits continued maintenance of existing BIPs\n> > plus gives the additional maintainers an opportunity to rebuild the\n> > credibility of the repository.\n> >\n> > The second recommendation addresses the dissatisfaction of many BIP\n> > authors and potential authors with the current editor, which I think\n> > will discourage many of them from making additional significant\n> > contributions to the repository.  It also seems to me to be a better use\n> > of Luke's talents and interests for him to focus on protocol research\n> > and review rather than procedurally checking whether a bunch of\n> > documents are well formed.\n> >\n> > The third recommendation provides an escape hatch for anyone, such as\n> > Matt, who currently thinks the process has failed, or for anyone who\n> > comes to that same conclusion in the future under a different editing\n> > team.  My specific recommendations there are:\n> >\n> > a. Anyone writing protocol documentation in the spirit of the BIP\n> >    process can post their idea to this mailing list like we've always\n> >    done and, when they've finished collecting initial feedback, they can\n> >    assign themselves a unique decentralized identifier starting with\n> >    \"bip-\".  They may also define a shorter alias that they encourage\n> >    people to use in cases where the correct document can be inferred\n> >    from context.  E.g.,\n> >\n> >       bip-wuille-taproot (bip-taproot)\n> >       bip-towns-versionbits-min-activation-height (bip-vbmah)\n> >       bip-todd-harding-opt-in-replace-by-fee (bip-opt-in-rbf)\n> >\n> > b. The author then publishes the document to any place they'd like,\n> although\n> >    they are strongly encouraged to make any document source available\n> >    under an open license to ensure others can create their own\n> >    modifications.\n> >\n> > c. Implementations of BIPs, whether original repository BIPs or\n> >    decentralized BIPs, link to the BIPs they implement to ensure\n> >    researchers and developers can find the relevant protocol\n> >    documentation.  E.g.,\n> >\n> https://github.com/bitcoin/bitcoin/blob/fe5e495c31de47b0ec732b943db11fe345d874af/doc/bips.md\n> >\n> >      (It may also be advisable for implementations to mirror copies of\n> >      the BIPs they implement so later modifications to the document\n> >      don't confuse anyone.  For this reason, extremely liberal\n> >      licensing of BIP documents is encouraged.)\n> >\n> > d. To help maintain quality and consistency between documentation, the\n> >    BIP editors provide a BIP document template, guidelines similar to\n> >    the existing BIP2, and an easy-to-run format linter.\n> >\n> > I think this decentralized BIPs alternative also helps address some\n> > longstanding problems with the BIPs system: that many casual Bitcoin\n> > users and developers think of documents in the BIPs repo as\n> > authoritative and that there are some development teams (such as for LN)\n> > that have already abandoned the BIPs process because, in part, they want\n> > complete control over their own documentation.\n> >\n> > The recommendations above were developed based on conversations I had\n> > with a few stakeholders in the BIPs process, but I did not attempt a\n> > comprehensive survey and I certainly don't claim to speak for anyone\n> > else.  I hope the recommendations are satisfactory and I look forward to\n> > your feedback.\n> >\n> > Thanks,\n> >\n> > -Dave\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210427/3e9db685/attachment-0001.html>"
            },
            {
                "author": "W. J. van der Laan",
                "date": "2021-04-27T09:04:18",
                "message_text_only": "On Monday, April 26th, 2021 at 9:43 PM, David A. Harding via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Sun, Apr 25, 2021 at 05:31:50PM -0400, Matt Corallo via bitcoin-dev wrote:\n>\n> > In general, I think its time we all agree the BIP process has simply failed\n> >\n> > and move on. Luckily its not really all that critical and proposed protocol\n> >\n> > documents can be placed nearly anywhere with the same effect.\n>\n\nI like the idea of decentralizing the BIPs process. It is a historical artifact that the bips repository is part of the same organization that bitcoin core is part of. But there shouldn't be the perception that standardization is driven by that, or that there is any kind of (non-trivial) gatekeeping.\n\nI understand where this perception is coming from, though. There being 111 PRs open at https://github.com/bitcoin/bips/pulls indicates that there is some kind of bottleneck. I hope adding more BIP editors can mitigate this somewhat.\n\nThough it also happens that the BIP author simply don't care about changes anymore and doesn't respond, in which case the PR lingers without any fault from the BIPs maintainer. So something is to be said of having the BIP repository mirror/aggregate author's own work trees, and changes needing to be proposed there instead of \"upstream\".\n\n-W"
            },
            {
                "author": "Erik Aronesty",
                "date": "2021-04-27T11:49:10",
                "message_text_only": "seems like this is solved by a workflow where a maintainer who\nrequests changes clearly tags every entry as \"changes needed\" or\n\"review requested\",, and then the author can resolve/remove the tag\nafter the changes are made.\n\nnot sure PR's are the right tech here.\n\nOn Tue, Apr 27, 2021 at 6:28 AM W. J. van der Laan via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> On Monday, April 26th, 2021 at 9:43 PM, David A. Harding via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> > On Sun, Apr 25, 2021 at 05:31:50PM -0400, Matt Corallo via bitcoin-dev wrote:\n> >\n> > > In general, I think its time we all agree the BIP process has simply failed\n> > >\n> > > and move on. Luckily its not really all that critical and proposed protocol\n> > >\n> > > documents can be placed nearly anywhere with the same effect.\n> >\n>\n> I like the idea of decentralizing the BIPs process. It is a historical artifact that the bips repository is part of the same organization that bitcoin core is part of. But there shouldn't be the perception that standardization is driven by that, or that there is any kind of (non-trivial) gatekeeping.\n>\n> I understand where this perception is coming from, though. There being 111 PRs open at https://github.com/bitcoin/bips/pulls indicates that there is some kind of bottleneck. I hope adding more BIP editors can mitigate this somewhat.\n>\n> Though it also happens that the BIP author simply don't care about changes anymore and doesn't respond, in which case the PR lingers without any fault from the BIPs maintainer. So something is to be said of having the BIP repository mirror/aggregate author's own work trees, and changes needing to be proposed there instead of \"upstream\".\n>\n> -W\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "John Newbery",
                "date": "2021-04-27T11:33:48",
                "message_text_only": "ACK. These seem like very reasonable next steps.\n\nOn Mon, Apr 26, 2021 at 8:43 PM David A. Harding via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Sun, Apr 25, 2021 at 05:31:50PM -0400, Matt Corallo via bitcoin-dev\n> wrote:\n> > In general, I think its time we all agree the BIP process has simply\n> failed\n> > and move on. Luckily its not really all that critical and proposed\n> protocol\n> > documents can be placed nearly anywhere with the same effect.\n>\n> I recommend:\n>\n> 1. We add additional BIP editors, starting with Kalle Alm (if there are\n>    no continuing significant objections).\n>\n> 2. We seek Luke Dashjr's resignation as BIPs editor.\n>\n> 3. We begin treating protocol documents outside the BIPs repository as\n>    first-class BIP documentation.\n>\n> The first recommendation permits continued maintenance of existing BIPs\n> plus gives the additional maintainers an opportunity to rebuild the\n> credibility of the repository.\n>\n> The second recommendation addresses the dissatisfaction of many BIP\n> authors and potential authors with the current editor, which I think\n> will discourage many of them from making additional significant\n> contributions to the repository.  It also seems to me to be a better use\n> of Luke's talents and interests for him to focus on protocol research\n> and review rather than procedurally checking whether a bunch of\n> documents are well formed.\n>\n> The third recommendation provides an escape hatch for anyone, such as\n> Matt, who currently thinks the process has failed, or for anyone who\n> comes to that same conclusion in the future under a different editing\n> team.  My specific recommendations there are:\n>\n> a. Anyone writing protocol documentation in the spirit of the BIP\n>    process can post their idea to this mailing list like we've always\n>    done and, when they've finished collecting initial feedback, they can\n>    assign themselves a unique decentralized identifier starting with\n>    \"bip-\".  They may also define a shorter alias that they encourage\n>    people to use in cases where the correct document can be inferred\n>    from context.  E.g.,\n>\n>       bip-wuille-taproot (bip-taproot)\n>       bip-towns-versionbits-min-activation-height (bip-vbmah)\n>       bip-todd-harding-opt-in-replace-by-fee (bip-opt-in-rbf)\n>\n> b. The author then publishes the document to any place they'd like,\n> although\n>    they are strongly encouraged to make any document source available\n>    under an open license to ensure others can create their own\n>    modifications.\n>\n> c. Implementations of BIPs, whether original repository BIPs or\n>    decentralized BIPs, link to the BIPs they implement to ensure\n>    researchers and developers can find the relevant protocol\n>    documentation.  E.g.,\n>\n> https://github.com/bitcoin/bitcoin/blob/fe5e495c31de47b0ec732b943db11fe345d874af/doc/bips.md\n>\n>      (It may also be advisable for implementations to mirror copies of\n>      the BIPs they implement so later modifications to the document\n>      don't confuse anyone.  For this reason, extremely liberal\n>      licensing of BIP documents is encouraged.)\n>\n> d. To help maintain quality and consistency between documentation, the\n>    BIP editors provide a BIP document template, guidelines similar to\n>    the existing BIP2, and an easy-to-run format linter.\n>\n> I think this decentralized BIPs alternative also helps address some\n> longstanding problems with the BIPs system: that many casual Bitcoin\n> users and developers think of documents in the BIPs repo as\n> authoritative and that there are some development teams (such as for LN)\n> that have already abandoned the BIPs process because, in part, they want\n> complete control over their own documentation.\n>\n> The recommendations above were developed based on conversations I had\n> with a few stakeholders in the BIPs process, but I did not attempt a\n> comprehensive survey and I certainly don't claim to speak for anyone\n> else.  I hope the recommendations are satisfactory and I look forward to\n> your feedback.\n>\n> Thanks,\n>\n> -Dave\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210427/274ceb28/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2021-04-27T12:16:52",
                "message_text_only": "> Despite the continual harassment, I have even made two efforts to try to\n> (fairly) make things faster, and have been obstructed both times by ST\n> advocates. It appears they intend to paint me as \"deliberately refusing\"\n> (to\n> use your words) in order to try to put Bitcoin and the BIP process under\n> their control, and abuse it in the same manner in which they abused\n> Bitcoin\n> Core's usual standards (by releasing ST without community consensus).\n>\n\nI haven'tpaying attention to the BIPs.\nBut I just want to say I agree it is the case that speed trial didn't have\nconsensus and had many good and logical arguments against it.\nSadly discussions around taproot activation I've been lacking logic and\nhaving too many irrational arguments appealing to emotions.\n\nI'm really disapointed at the community right now.\nI'm sorry for luke and others defending lot=true (the whole point of bip8\nanyway), but I feel ignored and frustrated when I try to participate in\nthese irrational debates.\nI miss the rational debates here.\n\nBut if we're gping to turn this list into an irrational place, with ad\nhominem fallacies and insults, I guess I can say my subjective personal\nopinion about other people too.\nI think it is you, Matt, who is playing dumb, not Luke.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210427/26157a24/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Reminder on the Purpose of BIPs",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "John Newbery",
                "David A. Harding",
                "Greg Maxwell",
                "Jorge Tim\u00f3n",
                "Luke Dashjr",
                "Erik Aronesty",
                "Matt Corallo",
                "Melvin Carvalho",
                "W. J. van der Laan"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 34778
        }
    },
    {
        "title": "[bitcoin-dev] L2s Onchain Support IRC Workshop",
        "thread_messages": [
            {
                "author": "Antoine Riard",
                "date": "2021-04-23T15:11:56",
                "message_text_only": "Hi,\n\nDuring the lastest years, tx-relay and mempool acceptances rules of the\nbase layer have been sources of major security and operational concerns for\nLightning and other Bitcoin second-layers [0]. I think those areas require\nsignificant improvements to ease design and deployment of higher Bitcoin\nlayers and I believe this opinion is shared among the L2 dev community. In\norder to make advancements, it has been discussed a few times in the last\nmonths to organize in-person workshops to discuss those issues with the\npresence of both L1/L2 devs to make exchange fruitful.\n\nUnfortunately, I don't think we'll be able to organize such in-person\nworkshops this year (because you know travel is hard those days...) As a\nsubstitution, I'm proposing a series of one or more irc meetings. That\nsaid, this substitution has the happy benefit to gather far more folks\ninterested by those issues that you can fit in a room.\n\n# Scope\n\nI would like to propose the following 4 items as topics of discussion.\n\n1) Package relay design or another generic L2 fee-bumping primitive like\nsponsorship [0]. IMHO, this primitive should at least solve mempools spikes\nmaking obsolete propagation of transactions with pre-signed feerate, solve\npinning attacks compromising Lightning/multi-party contract protocol\nsafety, offer an usable and stable API to L2 software stack, stay\ncompatible with miner and full-node operators incentives and obviously\nminimize CPU/memory DoS vectors.\n\n2) Deprecation of opt-in RBF toward full-rbf. Opt-in RBF makes it trivial\nfor an attacker to partition network mempools in divergent subsets and from\nthen launch advanced security or privacy attacks against a Lightning node.\nNote, it might also be a concern for bandwidth bleeding attacks against L1\nnodes.\n\n3) Guidelines about coordinated cross-layers security disclosures.\nMitigating a security issue around tx-relay or the mempool in Core might\nhave harmful implications for downstream projects. Ideally, L2 projects\nmaintainers should be ready to upgrade their protocols in emergency in\ncoordination with base layers developers.\n\n4) Guidelines about L2 protocols onchain security design. Currently\ndeployed like Lightning are making a bunch of assumptions on tx-relay and\nmempool acceptances rules. Those rules are non-normative, non-reliable and\nlack documentation. Further, they're devoid of tooling to enforce them at\nruntime [2]. IMHO, it could be preferable to identify a subset of them on\nwhich second-layers protocols can do assumptions without encroaching too\nmuch on nodes's policy realm or making the base layer development in those\nareas too cumbersome.\n\nI'm aware that some folks are interested in other topics such as extension\nof Core's mempools package limits or better pricing of RBF replacement. So\nl propose a 2-week concertation period to submit other topics related to\ntx-relay or mempools improvements towards L2s before to propose a finalized\nscope and agenda.\n\n# Goals\n\n1) Reaching technical consensus.\n2) Reaching technical consensus, before seeking community consensus as it\nlikely has ecosystem-wide implications.\n3) Establishing a security incident response policy which can be applied by\ndev teams in the future.\n4) Establishing a philosophy design and associated documentations (BIPs,\nbest practices, ...)\n\n# Timeline\n\n2021-04-23: Start of concertation period\n2021-05-07: End of concertation period\n2021-05-10: Proposition of workshop agenda and schedule\nlate 2021-05/2021-06: IRC meetings\n\nAs the problem space is savagely wide, I've started a collection of\ndocuments to assist this workshop : https://github.com/ariard/L2-zoology\nStill wip, but I'll have them in a good shape at agenda publication, with\nreading suggestions and open questions to structure discussions.\nAlso working on transaction pinning and mempool partitions attacks\nsimulations.\n\nIf L2s security/p2p/mempool is your jam, feel free to get involved :)\n\nCheers,\nAntoine\n\n[0] For e.g see optech section on transaction pinning attacks :\nhttps://bitcoinops.org/en/topics/transaction-pinning/\n[1]\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-September/018168.html\n[2] Lack of reference tooling make it easier to have bug slip in like\nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2020-October/002858.html\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210423/98e1f2cc/attachment-0001.html>"
            },
            {
                "author": "Gloria Zhao",
                "date": "2021-04-26T23:06:34",
                "message_text_only": "Hi Antoine,\n\nThanks for initiating this! I'm interested in joining. Since I mostly live\nin L1, my primary goal is to understand what simplest version of package\nrelay would be sufficient to support transaction relay assumptions made by\nL2 applications. For example, if a parent + child package covers the vast\nmajority of cases and a package limit of 2 is considered acceptable, that\ncould simplify things quite a bit.\n\nA small note - I believe package relay and sponsorship (or other\nfee-bumping primitive) should be separate discussions.\n\nRe: L2-zoology... In general, for the purpose of creating a stable API /\nset of assumptions between layers, I'd like to be as concrete as possible.\nSpeaking for myself, if I'm TDDing for a specific L2 attack, I need test\nvectors. A simple description of mempool contents + p2p messages sent is\nfine, but pubkeys + transaction hex would be appreciated because we don't\n(and probably shouldn't, for the purpose of maintainability) have a lot of\ntooling to build L2 transactions in Bitcoin Core. In the other direction,\nit's hard to make any guarantees given the complexity of mempool policy,\nbut perhaps it could be helpful to expose a configurable RPC (e.g. #21413\n<https://github.com/bitcoin/bitcoin/pull/21413>) to test a range of\nscenarios?\n\nAnyway, looking forward to discussions :)\n\nBest,\nGloria\n\nOn Fri, Apr 23, 2021 at 8:51 AM Antoine Riard via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi,\n>\n> During the lastest years, tx-relay and mempool acceptances rules of the\n> base layer have been sources of major security and operational concerns for\n> Lightning and other Bitcoin second-layers [0]. I think those areas require\n> significant improvements to ease design and deployment of higher Bitcoin\n> layers and I believe this opinion is shared among the L2 dev community. In\n> order to make advancements, it has been discussed a few times in the last\n> months to organize in-person workshops to discuss those issues with the\n> presence of both L1/L2 devs to make exchange fruitful.\n>\n> Unfortunately, I don't think we'll be able to organize such in-person\n> workshops this year (because you know travel is hard those days...) As a\n> substitution, I'm proposing a series of one or more irc meetings. That\n> said, this substitution has the happy benefit to gather far more folks\n> interested by those issues that you can fit in a room.\n>\n> # Scope\n>\n> I would like to propose the following 4 items as topics of discussion.\n>\n> 1) Package relay design or another generic L2 fee-bumping primitive like\n> sponsorship [0]. IMHO, this primitive should at least solve mempools spikes\n> making obsolete propagation of transactions with pre-signed feerate, solve\n> pinning attacks compromising Lightning/multi-party contract protocol\n> safety, offer an usable and stable API to L2 software stack, stay\n> compatible with miner and full-node operators incentives and obviously\n> minimize CPU/memory DoS vectors.\n>\n> 2) Deprecation of opt-in RBF toward full-rbf. Opt-in RBF makes it trivial\n> for an attacker to partition network mempools in divergent subsets and from\n> then launch advanced security or privacy attacks against a Lightning node.\n> Note, it might also be a concern for bandwidth bleeding attacks against L1\n> nodes.\n>\n> 3) Guidelines about coordinated cross-layers security disclosures.\n> Mitigating a security issue around tx-relay or the mempool in Core might\n> have harmful implications for downstream projects. Ideally, L2 projects\n> maintainers should be ready to upgrade their protocols in emergency in\n> coordination with base layers developers.\n>\n> 4) Guidelines about L2 protocols onchain security design. Currently\n> deployed like Lightning are making a bunch of assumptions on tx-relay and\n> mempool acceptances rules. Those rules are non-normative, non-reliable and\n> lack documentation. Further, they're devoid of tooling to enforce them at\n> runtime [2]. IMHO, it could be preferable to identify a subset of them on\n> which second-layers protocols can do assumptions without encroaching too\n> much on nodes's policy realm or making the base layer development in those\n> areas too cumbersome.\n>\n> I'm aware that some folks are interested in other topics such as extension\n> of Core's mempools package limits or better pricing of RBF replacement. So\n> l propose a 2-week concertation period to submit other topics related to\n> tx-relay or mempools improvements towards L2s before to propose a finalized\n> scope and agenda.\n>\n> # Goals\n>\n> 1) Reaching technical consensus.\n> 2) Reaching technical consensus, before seeking community consensus as it\n> likely has ecosystem-wide implications.\n> 3) Establishing a security incident response policy which can be applied\n> by dev teams in the future.\n> 4) Establishing a philosophy design and associated documentations (BIPs,\n> best practices, ...)\n>\n> # Timeline\n>\n> 2021-04-23: Start of concertation period\n> 2021-05-07: End of concertation period\n> 2021-05-10: Proposition of workshop agenda and schedule\n> late 2021-05/2021-06: IRC meetings\n>\n> As the problem space is savagely wide, I've started a collection of\n> documents to assist this workshop : https://github.com/ariard/L2-zoology\n> Still wip, but I'll have them in a good shape at agenda publication, with\n> reading suggestions and open questions to structure discussions.\n> Also working on transaction pinning and mempool partitions attacks\n> simulations.\n>\n> If L2s security/p2p/mempool is your jam, feel free to get involved :)\n>\n> Cheers,\n> Antoine\n>\n> [0] For e.g see optech section on transaction pinning attacks :\n> https://bitcoinops.org/en/topics/transaction-pinning/\n> [1]\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-September/018168.html\n> [2] Lack of reference tooling make it easier to have bug slip in like\n> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-October/002858.html\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210426/9f3369ef/attachment.html>"
            },
            {
                "author": "Antoine Riard",
                "date": "2021-04-27T14:54:12",
                "message_text_only": "Hi Gloria,\n\nThanks for your interest in joining.\n\n> A small note - I believe package relay and sponsorship (or other\n> fee-bumping primitive) should be separate discussions.\n\nHere my thinking on the question, ideally we would have one generic\nfee-bumping primitive suiting any contracting protocol or Bitcoin\napplications onchain requirements. In the future, that\nwould avoid the mempool and transaction relay rules being lobbied by any L2\ncommunity to add support for their specific onchain desiratas. Of course,\nL2 communities are always able to deploy their own overlay infrastructure\nbut at the price of losing the censorship-resistance guarantees of the\ncurrent base layer p2p network.\n\nFurther, we already have concerns of competing onchain requirements between\nBitcoin merchants and Lightning protocol dev about RBF. IMO, full-rbf will\nharden LN against some state-of-art attacks but at same time make it easier\nto double-spend merchants.\n\nHow do we arbiter between categories of users requirements ? I don't know,\nbest is to have an open discussion about it ?\n\nBack to package relay, I also think that's the easiest candidate to deploy\nbecause it doesn't rely on any consensus change. What I'm concerned about\nis one package relay design working fine for the vast majority of cases but\nirrelevant or broken to address adversarial settings. Even more, it might\nwork fine for LN but not at all for more fancy protocols still on the\nwhiteboard like op_ctv-style\ncongestion tree.\n\nThough in many cases it is better to adopt an almost complete solution now,\nrather than to wait until a perfect solution can be found. Likely, the best\nwe can do is keep design modular, version everything and be ready to deploy\nmultiple versions of package relay in the coming years as our knowledge in\nthose areas improves.\n\n> Re: L2-zoology... In general, for the purpose of creating a stable API /\n> set of assumptions between layers, I'd like to be as concrete as possible.\n> Speaking for myself, if I'm TDDing for a specific L2 attack, I need test\n> vectors. A simple description of mempool contents + p2p messages sent is\n> fine, but pubkeys + transaction hex would be appreciated because we don't\n> (and probably shouldn't, for the purpose of maintainability) have a lot of\n> tooling to build L2 transactions in Bitcoin Core. In the other direction,\n> it's hard to make any guarantees given the complexity of mempool policy,\n> but perhaps it could be helpful to expose a configurable RPC (e.g. #21413\n> <https://github.com/bitcoin/bitcoin/pull/21413>) to test a range of\n> scenarios?\n\nWe're aligned here, I'd like to be as concrete as possible too. As a L1/L2\ndev, I've just a bunch of questions and don't pretend to have clear answers\nfor each of them yet nor I think those answers will be the best ones. So\nmaybe the first step is just tracking and explaining problems better,\nhopefully avoiding to waste too much engineering hours on could-be-enhanced\nsolutions ?\n\nActively working on better demonstrations and will share them soon. That\nsaid, anyone interested in improving their own understanding in those areas\nare free to make their own investigations :)\n\nCheers,\nAntoine\n\nLe lun. 26 avr. 2021 \u00e0 19:06, Gloria Zhao <gloriajzhao at gmail.com> a \u00e9crit :\n\n> Hi Antoine,\n>\n> Thanks for initiating this! I'm interested in joining. Since I mostly live\n> in L1, my primary goal is to understand what simplest version of package\n> relay would be sufficient to support transaction relay assumptions made by\n> L2 applications. For example, if a parent + child package covers the vast\n> majority of cases and a package limit of 2 is considered acceptable, that\n> could simplify things quite a bit.\n>\n> A small note - I believe package relay and sponsorship (or other\n> fee-bumping primitive) should be separate discussions.\n>\n> Re: L2-zoology... In general, for the purpose of creating a stable API /\n> set of assumptions between layers, I'd like to be as concrete as possible.\n> Speaking for myself, if I'm TDDing for a specific L2 attack, I need test\n> vectors. A simple description of mempool contents + p2p messages sent is\n> fine, but pubkeys + transaction hex would be appreciated because we don't\n> (and probably shouldn't, for the purpose of maintainability) have a lot of\n> tooling to build L2 transactions in Bitcoin Core. In the other direction,\n> it's hard to make any guarantees given the complexity of mempool policy,\n> but perhaps it could be helpful to expose a configurable RPC (e.g. #21413\n> <https://github.com/bitcoin/bitcoin/pull/21413>) to test a range of\n> scenarios?\n>\n> Anyway, looking forward to discussions :)\n>\n> Best,\n> Gloria\n>\n> On Fri, Apr 23, 2021 at 8:51 AM Antoine Riard via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi,\n>>\n>> During the lastest years, tx-relay and mempool acceptances rules of the\n>> base layer have been sources of major security and operational concerns for\n>> Lightning and other Bitcoin second-layers [0]. I think those areas require\n>> significant improvements to ease design and deployment of higher Bitcoin\n>> layers and I believe this opinion is shared among the L2 dev community. In\n>> order to make advancements, it has been discussed a few times in the last\n>> months to organize in-person workshops to discuss those issues with the\n>> presence of both L1/L2 devs to make exchange fruitful.\n>>\n>> Unfortunately, I don't think we'll be able to organize such in-person\n>> workshops this year (because you know travel is hard those days...) As a\n>> substitution, I'm proposing a series of one or more irc meetings. That\n>> said, this substitution has the happy benefit to gather far more folks\n>> interested by those issues that you can fit in a room.\n>>\n>> # Scope\n>>\n>> I would like to propose the following 4 items as topics of discussion.\n>>\n>> 1) Package relay design or another generic L2 fee-bumping primitive like\n>> sponsorship [0]. IMHO, this primitive should at least solve mempools spikes\n>> making obsolete propagation of transactions with pre-signed feerate, solve\n>> pinning attacks compromising Lightning/multi-party contract protocol\n>> safety, offer an usable and stable API to L2 software stack, stay\n>> compatible with miner and full-node operators incentives and obviously\n>> minimize CPU/memory DoS vectors.\n>>\n>> 2) Deprecation of opt-in RBF toward full-rbf. Opt-in RBF makes it trivial\n>> for an attacker to partition network mempools in divergent subsets and from\n>> then launch advanced security or privacy attacks against a Lightning node.\n>> Note, it might also be a concern for bandwidth bleeding attacks against L1\n>> nodes.\n>>\n>> 3) Guidelines about coordinated cross-layers security disclosures.\n>> Mitigating a security issue around tx-relay or the mempool in Core might\n>> have harmful implications for downstream projects. Ideally, L2 projects\n>> maintainers should be ready to upgrade their protocols in emergency in\n>> coordination with base layers developers.\n>>\n>> 4) Guidelines about L2 protocols onchain security design. Currently\n>> deployed like Lightning are making a bunch of assumptions on tx-relay and\n>> mempool acceptances rules. Those rules are non-normative, non-reliable and\n>> lack documentation. Further, they're devoid of tooling to enforce them at\n>> runtime [2]. IMHO, it could be preferable to identify a subset of them on\n>> which second-layers protocols can do assumptions without encroaching too\n>> much on nodes's policy realm or making the base layer development in those\n>> areas too cumbersome.\n>>\n>> I'm aware that some folks are interested in other topics such as\n>> extension of Core's mempools package limits or better pricing of RBF\n>> replacement. So l propose a 2-week concertation period to submit other\n>> topics related to tx-relay or mempools improvements towards L2s before to\n>> propose a finalized scope and agenda.\n>>\n>> # Goals\n>>\n>> 1) Reaching technical consensus.\n>> 2) Reaching technical consensus, before seeking community consensus as it\n>> likely has ecosystem-wide implications.\n>> 3) Establishing a security incident response policy which can be applied\n>> by dev teams in the future.\n>> 4) Establishing a philosophy design and associated documentations (BIPs,\n>> best practices, ...)\n>>\n>> # Timeline\n>>\n>> 2021-04-23: Start of concertation period\n>> 2021-05-07: End of concertation period\n>> 2021-05-10: Proposition of workshop agenda and schedule\n>> late 2021-05/2021-06: IRC meetings\n>>\n>> As the problem space is savagely wide, I've started a collection of\n>> documents to assist this workshop : https://github.com/ariard/L2-zoology\n>> Still wip, but I'll have them in a good shape at agenda publication, with\n>> reading suggestions and open questions to structure discussions.\n>> Also working on transaction pinning and mempool partitions attacks\n>> simulations.\n>>\n>> If L2s security/p2p/mempool is your jam, feel free to get involved :)\n>>\n>> Cheers,\n>> Antoine\n>>\n>> [0] For e.g see optech section on transaction pinning attacks :\n>> https://bitcoinops.org/en/topics/transaction-pinning/\n>> [1]\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-September/018168.html\n>> [2] Lack of reference tooling make it easier to have bug slip in like\n>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-October/002858.html\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210427/e7daac9b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "L2s Onchain Support IRC Workshop",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Gloria Zhao",
                "Antoine Riard"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 20459
        }
    },
    {
        "title": "[bitcoin-dev] [Lightning-dev] L2s Onchain Support IRC Workshop",
        "thread_messages": [
            {
                "author": "Jeremy",
                "date": "2021-04-23T15:25:19",
                "message_text_only": "I'd be excited to join. Recommend bumping the date  to mid June, if that's\nok, as many Americans will be at Bitcoin 2021.\n\nI was thinking about reviving the sponsors proposal with a 100 block lock\non spending a sponsoring tx which would hopefully make less controversial,\nthis would be a great place to discuss those tradeoffs.\n\nOn Fri, Apr 23, 2021, 8:17 AM Antoine Riard <antoine.riard at gmail.com> wrote:\n\n> Hi,\n>\n> During the lastest years, tx-relay and mempool acceptances rules of the\n> base layer have been sources of major security and operational concerns for\n> Lightning and other Bitcoin second-layers [0]. I think those areas require\n> significant improvements to ease design and deployment of higher Bitcoin\n> layers and I believe this opinion is shared among the L2 dev community. In\n> order to make advancements, it has been discussed a few times in the last\n> months to organize in-person workshops to discuss those issues with the\n> presence of both L1/L2 devs to make exchange fruitful.\n>\n> Unfortunately, I don't think we'll be able to organize such in-person\n> workshops this year (because you know travel is hard those days...) As a\n> substitution, I'm proposing a series of one or more irc meetings. That\n> said, this substitution has the happy benefit to gather far more folks\n> interested by those issues that you can fit in a room.\n>\n> # Scope\n>\n> I would like to propose the following 4 items as topics of discussion.\n>\n> 1) Package relay design or another generic L2 fee-bumping primitive like\n> sponsorship [0]. IMHO, this primitive should at least solve mempools spikes\n> making obsolete propagation of transactions with pre-signed feerate, solve\n> pinning attacks compromising Lightning/multi-party contract protocol\n> safety, offer an usable and stable API to L2 software stack, stay\n> compatible with miner and full-node operators incentives and obviously\n> minimize CPU/memory DoS vectors.\n>\n> 2) Deprecation of opt-in RBF toward full-rbf. Opt-in RBF makes it trivial\n> for an attacker to partition network mempools in divergent subsets and from\n> then launch advanced security or privacy attacks against a Lightning node.\n> Note, it might also be a concern for bandwidth bleeding attacks against L1\n> nodes.\n>\n> 3) Guidelines about coordinated cross-layers security disclosures.\n> Mitigating a security issue around tx-relay or the mempool in Core might\n> have harmful implications for downstream projects. Ideally, L2 projects\n> maintainers should be ready to upgrade their protocols in emergency in\n> coordination with base layers developers.\n>\n> 4) Guidelines about L2 protocols onchain security design. Currently\n> deployed like Lightning are making a bunch of assumptions on tx-relay and\n> mempool acceptances rules. Those rules are non-normative, non-reliable and\n> lack documentation. Further, they're devoid of tooling to enforce them at\n> runtime [2]. IMHO, it could be preferable to identify a subset of them on\n> which second-layers protocols can do assumptions without encroaching too\n> much on nodes's policy realm or making the base layer development in those\n> areas too cumbersome.\n>\n> I'm aware that some folks are interested in other topics such as extension\n> of Core's mempools package limits or better pricing of RBF replacement. So\n> l propose a 2-week concertation period to submit other topics related to\n> tx-relay or mempools improvements towards L2s before to propose a finalized\n> scope and agenda.\n>\n> # Goals\n>\n> 1) Reaching technical consensus.\n> 2) Reaching technical consensus, before seeking community consensus as it\n> likely has ecosystem-wide implications.\n> 3) Establishing a security incident response policy which can be applied\n> by dev teams in the future.\n> 4) Establishing a philosophy design and associated documentations (BIPs,\n> best practices, ...)\n>\n> # Timeline\n>\n> 2021-04-23: Start of concertation period\n> 2021-05-07: End of concertation period\n> 2021-05-10: Proposition of workshop agenda and schedule\n> late 2021-05/2021-06: IRC meetings\n>\n> As the problem space is savagely wide, I've started a collection of\n> documents to assist this workshop : https://github.com/ariard/L2-zoology\n> Still wip, but I'll have them in a good shape at agenda publication, with\n> reading suggestions and open questions to structure discussions.\n> Also working on transaction pinning and mempool partitions attacks\n> simulations.\n>\n> If L2s security/p2p/mempool is your jam, feel free to get involved :)\n>\n> Cheers,\n> Antoine\n>\n> [0] For e.g see optech section on transaction pinning attacks :\n> https://bitcoinops.org/en/topics/transaction-pinning/\n> [1]\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-September/018168.html\n> [2] Lack of reference tooling make it easier to have bug slip in like\n> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-October/002858.html\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210423/4e8df87e/attachment.html>"
            },
            {
                "author": "Antoine Riard",
                "date": "2021-04-23T15:39:15",
                "message_text_only": "Hi Jeremy,\n\nYes dates are floating for now. After Bitcoin 2021, sounds a good idea.\n\nAwesome, I'll be really interested to review again an improved version of\nsponsorship. And I'll try to sketch out the sighash_no-input fee-bumping\nidea which was floating around last year during pinnings discussions. Yet\nanother set of trade-offs :)\n\nLe ven. 23 avr. 2021 \u00e0 11:25, Jeremy <jlrubin at mit.edu> a \u00e9crit :\n\n> I'd be excited to join. Recommend bumping the date  to mid June, if that's\n> ok, as many Americans will be at Bitcoin 2021.\n>\n> I was thinking about reviving the sponsors proposal with a 100 block lock\n> on spending a sponsoring tx which would hopefully make less controversial,\n> this would be a great place to discuss those tradeoffs.\n>\n> On Fri, Apr 23, 2021, 8:17 AM Antoine Riard <antoine.riard at gmail.com>\n> wrote:\n>\n>> Hi,\n>>\n>> During the lastest years, tx-relay and mempool acceptances rules of the\n>> base layer have been sources of major security and operational concerns for\n>> Lightning and other Bitcoin second-layers [0]. I think those areas require\n>> significant improvements to ease design and deployment of higher Bitcoin\n>> layers and I believe this opinion is shared among the L2 dev community. In\n>> order to make advancements, it has been discussed a few times in the last\n>> months to organize in-person workshops to discuss those issues with the\n>> presence of both L1/L2 devs to make exchange fruitful.\n>>\n>> Unfortunately, I don't think we'll be able to organize such in-person\n>> workshops this year (because you know travel is hard those days...) As a\n>> substitution, I'm proposing a series of one or more irc meetings. That\n>> said, this substitution has the happy benefit to gather far more folks\n>> interested by those issues that you can fit in a room.\n>>\n>> # Scope\n>>\n>> I would like to propose the following 4 items as topics of discussion.\n>>\n>> 1) Package relay design or another generic L2 fee-bumping primitive like\n>> sponsorship [0]. IMHO, this primitive should at least solve mempools spikes\n>> making obsolete propagation of transactions with pre-signed feerate, solve\n>> pinning attacks compromising Lightning/multi-party contract protocol\n>> safety, offer an usable and stable API to L2 software stack, stay\n>> compatible with miner and full-node operators incentives and obviously\n>> minimize CPU/memory DoS vectors.\n>>\n>> 2) Deprecation of opt-in RBF toward full-rbf. Opt-in RBF makes it trivial\n>> for an attacker to partition network mempools in divergent subsets and from\n>> then launch advanced security or privacy attacks against a Lightning node.\n>> Note, it might also be a concern for bandwidth bleeding attacks against L1\n>> nodes.\n>>\n>> 3) Guidelines about coordinated cross-layers security disclosures.\n>> Mitigating a security issue around tx-relay or the mempool in Core might\n>> have harmful implications for downstream projects. Ideally, L2 projects\n>> maintainers should be ready to upgrade their protocols in emergency in\n>> coordination with base layers developers.\n>>\n>> 4) Guidelines about L2 protocols onchain security design. Currently\n>> deployed like Lightning are making a bunch of assumptions on tx-relay and\n>> mempool acceptances rules. Those rules are non-normative, non-reliable and\n>> lack documentation. Further, they're devoid of tooling to enforce them at\n>> runtime [2]. IMHO, it could be preferable to identify a subset of them on\n>> which second-layers protocols can do assumptions without encroaching too\n>> much on nodes's policy realm or making the base layer development in those\n>> areas too cumbersome.\n>>\n>> I'm aware that some folks are interested in other topics such as\n>> extension of Core's mempools package limits or better pricing of RBF\n>> replacement. So l propose a 2-week concertation period to submit other\n>> topics related to tx-relay or mempools improvements towards L2s before to\n>> propose a finalized scope and agenda.\n>>\n>> # Goals\n>>\n>> 1) Reaching technical consensus.\n>> 2) Reaching technical consensus, before seeking community consensus as it\n>> likely has ecosystem-wide implications.\n>> 3) Establishing a security incident response policy which can be applied\n>> by dev teams in the future.\n>> 4) Establishing a philosophy design and associated documentations (BIPs,\n>> best practices, ...)\n>>\n>> # Timeline\n>>\n>> 2021-04-23: Start of concertation period\n>> 2021-05-07: End of concertation period\n>> 2021-05-10: Proposition of workshop agenda and schedule\n>> late 2021-05/2021-06: IRC meetings\n>>\n>> As the problem space is savagely wide, I've started a collection of\n>> documents to assist this workshop : https://github.com/ariard/L2-zoology\n>> Still wip, but I'll have them in a good shape at agenda publication, with\n>> reading suggestions and open questions to structure discussions.\n>> Also working on transaction pinning and mempool partitions attacks\n>> simulations.\n>>\n>> If L2s security/p2p/mempool is your jam, feel free to get involved :)\n>>\n>> Cheers,\n>> Antoine\n>>\n>> [0] For e.g see optech section on transaction pinning attacks :\n>> https://bitcoinops.org/en/topics/transaction-pinning/\n>> [1]\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-September/018168.html\n>> [2] Lack of reference tooling make it easier to have bug slip in like\n>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-October/002858.html\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210423/b87b1ec8/attachment.html>"
            },
            {
                "author": "Bastien TEINTURIER",
                "date": "2021-04-23T16:17:36",
                "message_text_only": "Great idea, I'll join as well.\nThanks for setting this in motion.\n\nLe ven. 23 avr. 2021 \u00e0 17:39, Antoine Riard <antoine.riard at gmail.com> a\n\u00e9crit :\n\n> Hi Jeremy,\n>\n> Yes dates are floating for now. After Bitcoin 2021, sounds a good idea.\n>\n> Awesome, I'll be really interested to review again an improved version of\n> sponsorship. And I'll try to sketch out the sighash_no-input fee-bumping\n> idea which was floating around last year during pinnings discussions. Yet\n> another set of trade-offs :)\n>\n> Le ven. 23 avr. 2021 \u00e0 11:25, Jeremy <jlrubin at mit.edu> a \u00e9crit :\n>\n>> I'd be excited to join. Recommend bumping the date  to mid June, if\n>> that's ok, as many Americans will be at Bitcoin 2021.\n>>\n>> I was thinking about reviving the sponsors proposal with a 100 block lock\n>> on spending a sponsoring tx which would hopefully make less controversial,\n>> this would be a great place to discuss those tradeoffs.\n>>\n>> On Fri, Apr 23, 2021, 8:17 AM Antoine Riard <antoine.riard at gmail.com>\n>> wrote:\n>>\n>>> Hi,\n>>>\n>>> During the lastest years, tx-relay and mempool acceptances rules of the\n>>> base layer have been sources of major security and operational concerns for\n>>> Lightning and other Bitcoin second-layers [0]. I think those areas require\n>>> significant improvements to ease design and deployment of higher Bitcoin\n>>> layers and I believe this opinion is shared among the L2 dev community. In\n>>> order to make advancements, it has been discussed a few times in the last\n>>> months to organize in-person workshops to discuss those issues with the\n>>> presence of both L1/L2 devs to make exchange fruitful.\n>>>\n>>> Unfortunately, I don't think we'll be able to organize such in-person\n>>> workshops this year (because you know travel is hard those days...) As a\n>>> substitution, I'm proposing a series of one or more irc meetings. That\n>>> said, this substitution has the happy benefit to gather far more folks\n>>> interested by those issues that you can fit in a room.\n>>>\n>>> # Scope\n>>>\n>>> I would like to propose the following 4 items as topics of discussion.\n>>>\n>>> 1) Package relay design or another generic L2 fee-bumping primitive like\n>>> sponsorship [0]. IMHO, this primitive should at least solve mempools spikes\n>>> making obsolete propagation of transactions with pre-signed feerate, solve\n>>> pinning attacks compromising Lightning/multi-party contract protocol\n>>> safety, offer an usable and stable API to L2 software stack, stay\n>>> compatible with miner and full-node operators incentives and obviously\n>>> minimize CPU/memory DoS vectors.\n>>>\n>>> 2) Deprecation of opt-in RBF toward full-rbf. Opt-in RBF makes it\n>>> trivial for an attacker to partition network mempools in divergent subsets\n>>> and from then launch advanced security or privacy attacks against a\n>>> Lightning node. Note, it might also be a concern for bandwidth bleeding\n>>> attacks against L1 nodes.\n>>>\n>>> 3) Guidelines about coordinated cross-layers security disclosures.\n>>> Mitigating a security issue around tx-relay or the mempool in Core might\n>>> have harmful implications for downstream projects. Ideally, L2 projects\n>>> maintainers should be ready to upgrade their protocols in emergency in\n>>> coordination with base layers developers.\n>>>\n>>> 4) Guidelines about L2 protocols onchain security design. Currently\n>>> deployed like Lightning are making a bunch of assumptions on tx-relay and\n>>> mempool acceptances rules. Those rules are non-normative, non-reliable and\n>>> lack documentation. Further, they're devoid of tooling to enforce them at\n>>> runtime [2]. IMHO, it could be preferable to identify a subset of them on\n>>> which second-layers protocols can do assumptions without encroaching too\n>>> much on nodes's policy realm or making the base layer development in those\n>>> areas too cumbersome.\n>>>\n>>> I'm aware that some folks are interested in other topics such as\n>>> extension of Core's mempools package limits or better pricing of RBF\n>>> replacement. So l propose a 2-week concertation period to submit other\n>>> topics related to tx-relay or mempools improvements towards L2s before to\n>>> propose a finalized scope and agenda.\n>>>\n>>> # Goals\n>>>\n>>> 1) Reaching technical consensus.\n>>> 2) Reaching technical consensus, before seeking community consensus as\n>>> it likely has ecosystem-wide implications.\n>>> 3) Establishing a security incident response policy which can be applied\n>>> by dev teams in the future.\n>>> 4) Establishing a philosophy design and associated documentations (BIPs,\n>>> best practices, ...)\n>>>\n>>> # Timeline\n>>>\n>>> 2021-04-23: Start of concertation period\n>>> 2021-05-07: End of concertation period\n>>> 2021-05-10: Proposition of workshop agenda and schedule\n>>> late 2021-05/2021-06: IRC meetings\n>>>\n>>> As the problem space is savagely wide, I've started a collection of\n>>> documents to assist this workshop : https://github.com/ariard/L2-zoology\n>>> Still wip, but I'll have them in a good shape at agenda publication,\n>>> with reading suggestions and open questions to structure discussions.\n>>> Also working on transaction pinning and mempool partitions attacks\n>>> simulations.\n>>>\n>>> If L2s security/p2p/mempool is your jam, feel free to get involved :)\n>>>\n>>> Cheers,\n>>> Antoine\n>>>\n>>> [0] For e.g see optech section on transaction pinning attacks :\n>>> https://bitcoinops.org/en/topics/transaction-pinning/\n>>> [1]\n>>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-September/018168.html\n>>> [2] Lack of reference tooling make it easier to have bug slip in like\n>>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-October/002858.html\n>>> _______________________________________________\n>>> Lightning-dev mailing list\n>>> Lightning-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>>\n>> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210423/09108adc/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "L2s Onchain Support IRC Workshop",
            "categories": [
                "bitcoin-dev",
                "Lightning-dev"
            ],
            "authors": [
                "Bastien TEINTURIER",
                "Jeremy",
                "Antoine Riard"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 17247
        }
    },
    {
        "title": "[bitcoin-dev] Additional BIPs related to other proposals",
        "thread_messages": [
            {
                "author": "Christopher Gilliard",
                "date": "2021-04-24T02:05:53",
                "message_text_only": "I have created three additional BIPs that are associated with my recent\nproposals. They can be found here:\n\nhttps://github.com/cgilliard/bips/blob/notification/bip-XXXX.mediawiki\n\nand here:\n\nhttps://github.com/cgilliard/bips/blob/moderation/bip-XXXX.mediawiki\n\nand here:\n\nhttps://github.com/cgilliard/bips/blob/wot/bip-XXXX.mediawiki\n\nPlease reply with any feedback, questions, or comments.\n\nRegards,\nChris\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210423/c0ef92eb/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Additional BIPs related to other proposals",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Christopher Gilliard"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 589
        }
    },
    {
        "title": "[bitcoin-dev] 7z block compression, 18%",
        "thread_messages": [
            {
                "author": "NITSOPOULOS KONSTANTINOS",
                "date": "2021-04-24T11:02:31",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210424/c6756228/attachment.html>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2021-04-24T18:20:47",
                "message_text_only": "If block compression is going to be considered, zstd provides better\nproperties than the competition.\nEspecially for the decompression. [1]\n\n[1] https://github.com/facebook/zstd\n\n-- \nBest Regards / S pozdravom,\n\nPavol \"stick\" Rusnak\nCo-founder and CTO, SatoshiLabs\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210424/ce2320a0/attachment.html>"
            },
            {
                "author": "Greg Maxwell",
                "date": "2021-04-24T19:17:41",
                "message_text_only": "https://bitcointalk.org/index.php?topic=5303978.msg55946632#msg55946632\n\nBlockstream satellite codebase includes an alternative serialization\nthat works a single transaction at a time and saves ~20%.  This avoids\nviolating layering, preserves single txn access, is compatible with\ntransaction relay.   (and if you wanted could also be fed to a\nmultiple txn at a time compressor for additional savings).  This\nformat makes intelligent use of the entirety of the transaction\nformat, not just amount encodings but even optimizing predictable\nhashes (e.g. for p2sh embedded segwit) -- achieving savings that *no*\ngeneric compressor could ever achieve.\n\nMost of the savings from generic compressors comes from repeated\npubkeys and addresses, so it's highly variable, depends on address\nreuse, and will likely be diminished by taproot (due to shrinking\nmultisig) and very much reduced by signature aggregation in the\nfuture.\n\nIf you're thinking about use across networks generic compression\ninterfaces like zlib have had a pretty disappointing security track\nrecord.\n\n\nIf you search the list archive and bitcoin-core github you'll find\nmany prior discussions of using generic compressors.\n\n\n\nOn Sat, Apr 24, 2021 at 6:12 PM NITSOPOULOS KONSTANTINOS via\nbitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Hi, I can compress new blocks by up to 18% using the 7z file type. I use wxHexEditor to dump a block's raw hex onto my disk, and then compress that with 7-Zip. I'd like to see 7z built into Bitcoin Core, for block compression (storage & propagation). The entire blockchain could be under 290GB if it's converted into a 7z archive-chain (\"7z-chain\"). I can compress some recent example blocks (hex -> less hex) if anyone wants. A future BIP could try increase the block Weight Units limit by up to 21% if 7z blocks are smaller & quick.\n>\n> Programming compression seems too difficult for me, so I'm hoping somebody else does it!\n>\n> Eventually I think transactions can be compressed by replacing addresses (& public keys) and coins, wherever possible, with just their own unique sequential index. TX amounts can also be compressed if they contain only a decimal digit or two, e.g. 00000000.10000000 XBT. A TX of 0.1 XBT between two existing addresses could be somehow compressed to half or maybe a quarter of its current size!\n>\n> -Tinos\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "7z block compression, 18%",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Pavol Rusnak",
                "NITSOPOULOS KONSTANTINOS",
                "Greg Maxwell"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 3123
        }
    },
    {
        "title": "[bitcoin-dev] Fee estimates and RBF",
        "thread_messages": [
            {
                "author": "Prayank",
                "date": "2021-04-30T20:28:42",
                "message_text_only": "Hello World, \n\nI hope everyone is doing okay. Things are not good in India and even I was tested covid positive few days back. Recovered and feeling better now. Hoping everything gets back to normal soon.\n\nThere are different estimations used in wallets, explorers and other Bitcoin projects. For example: `estimatesmartfee` in Bitcoin Core (One of the implementation for Bitcoin which is used more but not official as there is nothing official in Bitcoin).\u00a0 Are different estimations misleading and affect the way fees are used in Bitcoin transactions? Will it be better if we just share mempool stats and user can decide the fee rate accordingly?\n\nIf I compare this with BTCUSD orderbook on any exchange, are we trying to estimate at what price buy order will get filled in certain time? Does that make sense?\n\nMempool Stats: https://i.imgur.com/r4XKk2p.png\nBTCUSD Orderbook: https://i.imgur.com/ylGVHJB.png\n\nI consider it misleading because lot of users think a transaction with fee rate 1-5 sat/vByte will be included in 1 week or maybe a transaction with X sat/VByte will be included in Y time which is not true. Users can decide the fee rate and can do bidding, transaction will be included based on demand, supply and miners.\n\nWill it be better if the wallets used this approach?\n1.Show mempool stats\n2.Leave the fee rate for user to decide\n3.RBF every transaction and follow different algorithms for automated bidding\n\nA basic algorithm for automated bidding can be: https://i.stack.imgur.com/1SlPv.png\n\nSuch RBF algos can be helpful for users when Bitcoin wallets are open in background. Maybe it will work better for mobile wallets in which you can see a notification every time transaction is replaced with a new fee rate automatically.\n\nI wanted to know what others think about this approach of creating and using different RBF algos instead of predicting something that is difficult or doesn't make sense. Also if there was a way we could achieve this even if the user goes offline. For example: Alice broadcasts Tx1 with 1 sat/vByte, its replaced with Tx2 (2 sat/vByte) after 2 blocks because Tx1 was not confirmed. Alice decides to shut down her system or switch off mobile or mobile data. Tx2 is still not confirmed after another 2 blocks but it has some information as one OP_RETURN output which is used by Bitcoin nodes that see this transaction in the mempool. Bob's node use this information to replace the transaction with Tx3 and use fee rate 3 sat/vByte.\n\n--\nPrayank\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210430/e9fe628a/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Fee estimates and RBF",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Prayank"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2678
        }
    }
]