[
    {
        "title": "[Bitcoin-development] More appropriate XDG menu category for bitcoin-qt",
        "thread_messages": [
            {
                "author": "Kip Warner",
                "date": "2013-08-02T19:08:52",
                "message_text_only": "Hey list,\n\nCurrently the bitcoin-qt application's XDG desktop integration on some\ndesktop environments requests that it be placed under the \"Office\" menu\ncategory.[1] This is a rather broad category and I would like to suggest\nthat this be refined further into \"Finance\", given that XDG's menu\nspecification allows for this.[2]\n\nI believe the line in question in bitcoin-qt.desktop should be as\nfollows:\n\n        Categories=Office;Finance;\n\nI would have provided this trivial patch myself, but my knowledge of Git\nis rather weak and I apologize.\n\nRespectfully,\n\n[1] <https://github.com/bitcoin/bitcoin/blob/master/contrib/debian/bitcoin-qt.desktop>\n[2] <http://standards.freedesktop.org/menu-spec/latest/apas02.html>\n\n-- \nKip Warner -- Software Engineer\nOpenPGP encrypted/signed mail preferred\nhttp://www.thevertigo.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130802/481f9527/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "More appropriate XDG menu category for bitcoin-qt",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Kip Warner"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1118
        }
    },
    {
        "title": "[Bitcoin-development] btc name server",
        "thread_messages": [
            {
                "author": "Chris Evans",
                "date": "2013-08-02T20:40:27",
                "message_text_only": "wonder if it would be good idea to have a alias to wallet id nameserver in\nthe client software where a person can use a english name to describe a\nwallet public key address?  and the software can use it to look up the\nwallet id.\n\nwallet ids are hard to remember/recall.\n\n-chris\nhttp://tawhakisoft.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130802/ec899bd8/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-08-02T20:55:26",
                "message_text_only": "Chris,\n\nFirst, an important point: addresses are not wallet ids. They are single-use \ndestinations for a single transaction. It isn't intended that anyone should \nremember them, just that they should send them electronically (or with eg, QR-\nCodes). Bitcoin does not (yet?) have a person/wallet identity system, but \nthere are other mechanisms for this already (eg, PGP).\n\nWith regard to your idea, I believe it is satisfied by the new Payment \nProtocol that Gavin has been working on. You will be able to publish a URI for \na website which people can reuse to pay you more than once.\n\nLuke\n\n\nOn Friday, August 02, 2013 8:40:27 PM Chris Evans wrote:\n> wonder if it would be good idea to have a alias to wallet id nameserver in\n> the client software where a person can use a english name to describe a\n> wallet public key address?  and the software can use it to look up the\n> wallet id.\n> \n> wallet ids are hard to remember/recall.\n> \n> -chris\n> http://tawhakisoft.com/"
            },
            {
                "author": "Rick Wesson",
                "date": "2013-08-02T21:16:09",
                "message_text_only": "I'd raised this topic before suggesting to leverage DNS as its kinda useful\nfor mapping names to numbers.\n\nExpect no support.\n\n-rick\n\nOn Fri, Aug 2, 2013 at 1:40 PM, Chris Evans <aaxiomfinity at gmail.com> wrote:\n\n> wonder if it would be good idea to have a alias to wallet id nameserver in\n> the client software where a person can use a english name to describe a\n> wallet public key address?  and the software can use it to look up the\n> wallet id.\n>\n> wallet ids are hard to remember/recall.\n>\n> -chris\n> http://tawhakisoft.com/\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Get your SQL database under version control now!\n> Version control is standard for application code, but databases havent\n> caught up. So what steps can you take to put your SQL databases under\n> version control? Why should you start doing it? Read more to find out.\n> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130802/9bdd2349/attachment.html>"
            },
            {
                "author": "Jay F",
                "date": "2013-08-03T03:18:31",
                "message_text_only": "Namecoin already has an id/ and a/ (alias) namespace for such use:\n\n{ \"name\" : \"id/pichler\", \"value\" : \n\"\\\"BM-GtK6TiTtVo9toGVdk2zy3t4jGXZyZeMH\\\"\", \"expires_in\" : 29397 },\n{ \"name\" : \"id/pigeons\", \"value\" : \"{ bitcoin: \n1BekNv7ezkx8eAjdkrUta2BTp9bbxU9LGG, bitmessage: \nBM-opfhTsUKdTezPiWFHxRQtM1ZMDvjKMkHf, ripple: rnziParaNb8nsU4aruQ\ndwYE3j5jUcqjzFm}\", \"expires_in\" : 10089 },\n{ \"name\" : \"id/pisces\", \"value\" : \n\"\\\"BM-GtK6TiTtVo9toGVdk2zy3t4jGXZyZeMH\\\"\", \"expires_in\" : 32034 },\n{ \"name\" : \"id/plattler\", \"value\" : \n\"\\\"BM-GtK6TiTtVo9toGVdk2zy3t4jGXZyZeMH\\\"\", \"expires_in\" : 30999 },\n{ \"name\" : \"id/pope\", \"value\" : \"{\\n   \\\"bitmessage\\\"    : \n\\\"BM-2D7L1Suh1choaKt321Le3bS6PT6nxfWqpR\\\"\\n}\", \"expires_in\" : 29765 },\n\nIt's popular enough that it's been squat spammed by a few actors \nrecently, and several bitmessage IDs are there along with Bitcoin \naddresses, etc.\n\nOn 8/2/2013 2:16 PM, Rick Wesson wrote:\n> I'd raised this topic before suggesting to leverage DNS as its kinda\n> useful for mapping names to numbers.\n>\n> Expect no support.\n>\n> -rick\n>\n> On Fri, Aug 2, 2013 at 1:40 PM, Chris Evans <aaxiomfinity at gmail.com\n> <mailto:aaxiomfinity at gmail.com>> wrote:\n>\n>     wonder if it would be good idea to have a alias to wallet id\n>     nameserver in the client software where a person can use a english\n>     name to describe a wallet public key address?  and the software can\n>     use it to look up the wallet id.\n>\n>     wallet ids are hard to remember/recall.\n>\n>     -chris\n>     http://tawhakisoft.com/\n>\n>\n>     ------------------------------------------------------------------------------\n>     Get your SQL database under version control now!\n>     Version control is standard for application code, but databases havent\n>     caught up. So what steps can you take to put your SQL databases under\n>     version control? Why should you start doing it? Read more to find out.\n>     http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Get your SQL database under version control now!\n> Version control is standard for application code, but databases havent\n> caught up. So what steps can you take to put your SQL databases under\n> version control? Why should you start doing it? Read more to find out.\n> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n>\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            }
        ],
        "thread_summary": {
            "title": "btc name server",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Jay F",
                "Chris Evans",
                "Rick Wesson"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 5693
        }
    },
    {
        "title": "[Bitcoin-development] Preparing for the Cryptopocalypse",
        "thread_messages": [
            {
                "author": "Melvin Carvalho",
                "date": "2013-08-04T17:13:46",
                "message_text_only": "A great presentation on advances in crypto\n\nhttp://www.slideshare.net/astamos/bh-slides\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130804/6ab0d8c5/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2013-08-04T18:06:44",
                "message_text_only": "That is a great presentation, thanks for sharing that!\n\nThough I question the validity of the claim that ECC is so much more\nsecure than RSA (with appropriate keysizes).  My experience from\nstudying quantum computing is that Factoring and DLP are intimately\nrelated, such that a break of one is likely to break the other.  In\nfact, I seem to remember that QCs use an efficient DLP-solving circuit\nto \"shortcut\" the factoring problem.  But it's been a long time since I\nlooked at it, so I don't remember for sure.   Also, it's not clear\nwhether that relationship exists outside the scope of QCs.\n\nIt's still a good presentation, but they're pushing ECC pretty hard as\nthe answer to the cryptopocalypse, and I'm not convinced that's a real\nanswer.\n\n-Alan\n\n\n\nOn 08/04/2013 01:13 PM, Melvin Carvalho wrote:\n> A great presentation on advances in crypto\n>\n> http://www.slideshare.net/astamos/bh-slides\n>\n>\n> ------------------------------------------------------------------------------\n> Get your SQL database under version control now!\n> Version control is standard for application code, but databases havent \n> caught up. So what steps can you take to put your SQL databases under \n> version control? Why should you start doing it? Read more to find out.\n> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130804/269d2aa8/attachment.html>"
            },
            {
                "author": "Peter Vessenes",
                "date": "2013-08-05T03:30:25",
                "message_text_only": "I studied with Jeffrey Hoffstein at Brown, one of the creators of NTRU. He\ntold me recently NTRU, which is lattice based, is one of the few (only?)\nNIST-recommended QC-resistant algorithms.\n\nWe talked over layering on NTRU to Bitcoin last year when I was out that\nway; I think such a thing could be done relatively easily from a crypto\nstandpoint. Of course, there are many, many more questions beyond just the\ncrypto.\n\nPeter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130804/fd39b084/attachment.html>"
            },
            {
                "author": "John Dillon",
                "date": "2013-08-05T05:29:00",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn Mon, Aug 5, 2013 at 3:30 AM, Peter Vessenes <peter at coinlab.com> wrote:\n> I studied with Jeffrey Hoffstein at Brown, one of the creators of NTRU. He\n> told me recently NTRU, which is lattice based, is one of the few (only?)\n> NIST-recommended QC-resistant algorithms.\n>\n> We talked over layering on NTRU to Bitcoin last year when I was out that\n> way; I think such a thing could be done relatively easily from a crypto\n> standpoint. Of course, there are many, many more questions beyond just the\n> crypto.\n\nIs NTRU still an option? My understanding is that NTRUsign, the algorithm to\nproduce signatures as opposed to encryption, was broken last year:\nhttp://www.di.ens.fr/~ducas/NTRUSign_Cryptanalysis/DucasNguyen_Learning.pdf\n\nHaving said that my understanding is also that the break requires a few\nthousand signatures, so perhaps for Bitcoin it would still be acceptable given\nthat we can, and should, never create more than one signature for any given key\nanyway. You would be betting that improving the attack from a few thousand\nsignatures to one is not possible however.\n\nIn any case, worst comes to worst there are always lamport signatures. If they\nare broken hash functions are broken and Bitcoin is fundementally broken\nanyway, though it would be nice to have alternatives that are similar is pubkey\nand signature size to ECC.\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQEcBAEBCAAGBQJR/zffAAoJEEWCsU4mNhiPypEH/1AoIR5eWewNbGO9/AZNykwf\nRs3P1iOJYt4oR0oTOHwlsXKX1qU9QAvWQUjDH60XyChCqb+E+xMz4LZgV6H71A03\nXcEUZ6r4TRtEdH5kWwtoaxz2oxIIfwfRHIisUCCX2VvXzlBDjcuZvPQXSB0KE8Sx\nz8pBZuRKbLeU19COK4BZs1/83/DTsYrV0Ln3LYT3UT5oiJBzA9pmX0cVxQePx2rc\nhoNaxR4wR/oCUCvv73xhbzvB91RrAEgrJsd1ve4qR14LxWeOnTHqWQ2/E5JechZz\nis/ryBW1Yit5GmsQlfNtKhS3zAaiCjha5e03CaSSlT0LjuVabe2A43LfEb0n4Mw=\n=c5f5\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Alan Reiner",
                "date": "2013-08-05T05:37:53",
                "message_text_only": "Whoops, I didn't mean to run us down the Quantum Computing debate path. \nI was simply using my experience with QCs as a basis for questioning the\nconclusion that ECDLP is so much more robust than RSA/factoring\nproblems.  It's possible we would simply be jumping from one burning\nbridge to another burning bridge by rushing to convert everything to ECC\nin the event of a factoring breakthrough.\n\n>From the perspective of quantum computers, it seems those two problems\nare essentially the same.  As I said, I remember that one of the\nproblems is solved by using the solution/circuit for the other.  But I\ndon't know if this relationship holds outside the realm of QCs.   The\nguy who did this presentation said he's not a mathematician and/or\ncryptographer, yet he still strongly asserts the superiority of ECDLP. \nI'm not convinced.\n\n\nOn 08/05/2013 01:29 AM, John Dillon wrote:\n> On Mon, Aug 5, 2013 at 3:30 AM, Peter Vessenes <peter at coinlab.com> wrote:\n> > I studied with Jeffrey Hoffstein at Brown, one of the creators of\nNTRU. He\n> > told me recently NTRU, which is lattice based, is one of the few (only?)\n> > NIST-recommended QC-resistant algorithms.\n>\n> > We talked over layering on NTRU to Bitcoin last year when I was out that\n> > way; I think such a thing could be done relatively easily from a crypto\n> > standpoint. Of course, there are many, many more questions beyond\njust the\n> > crypto.\n>\n> Is NTRU still an option? My understanding is that NTRUsign, the\nalgorithm to\n> produce signatures as opposed to encryption, was broken last year:\n>\nhttp://www.di.ens.fr/~ducas/NTRUSign_Cryptanalysis/DucasNguyen_Learning.pdf\n>\n> Having said that my understanding is also that the break requires a few\n> thousand signatures, so perhaps for Bitcoin it would still be\nacceptable given\n> that we can, and should, never create more than one signature for any\ngiven key\n> anyway. You would be betting that improving the attack from a few thousand\n> signatures to one is not possible however.\n>\n> In any case, worst comes to worst there are always lamport signatures.\nIf they\n> are broken hash functions are broken and Bitcoin is fundementally broken\n> anyway, though it would be nice to have alternatives that are similar\nis pubkey\n> and signature size to ECC.\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130805/37d7063b/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-08-05T06:41:57",
                "message_text_only": "On Sun, Aug 4, 2013 at 8:30 PM, Peter Vessenes <peter at coinlab.com> wrote:\n> I studied with Jeffrey Hoffstein at Brown, one of the creators of NTRU. He\n> told me recently NTRU, which is lattice based, is one of the few (only?)\n> NIST-recommended QC-resistant algorithms.\n\nLamport signatures (and merkle tree variants that allow reuse) are\nsimpler, faster, trivially implemented, and intuitively secure under\nboth classical and quantum computation (plus unlikely some proposed QC\nstrong techniques they're patent clear).  They happen to be the only\ndigital signature scheme that you really can successfully explain to\ngrandma (even for values of grandma which are not cryptographers).\n\nThey have poor space/bandwidth usage properties, which is one reason\nwhy Bitcoin doesn't use them today, but as far as I know the same is\nso for all post-QC schemes.\n\n> Though I question the validity of the claim that ECC is so much more secure than RSA (with appropriate keysizes).\n\nThe problems are intimately related, but under the best understanding\nECC (with suitable parameters) ends up being the maximally hard case\nof that problem class.   I do sometimes worry about breakthroughs that\ngive index-calculus level performance for general elliptic curves,\nthis still wouldn't leave it any weaker than RSA but ECC is typically\nused with smaller keys."
            },
            {
                "author": "Peter Vessenes",
                "date": "2013-08-05T15:37:44",
                "message_text_only": "Interesting! I will refrain from digging into QC right now, per Alan's\nsuggestion. :)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130805/278b1525/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-06T11:09:38",
                "message_text_only": "> They have poor space/bandwidth usage properties, which is one reason\n> why Bitcoin doesn't use them today, but as far as I know the same is\n> so for all post-QC schemes.\n>\n\nI believe post-QC schemes based on Regev's LWE assumption are getting\ncompetitive with more traditional schemes. A paper from 2010 says they were\nable to get to around the same as large RSA key sizes (2048 bits), which is\nmuch worse than ECC but not entirely infeasible. Especially given that\nbarring some breakthrough, by the time QC is a real problem we'll have\ngigabit wifi and 32 core devices with a terabyte of storage embedded in our\nhands :)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130806/697536b7/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Preparing for the Cryptopocalypse",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "John Dillon",
                "Mike Hearn",
                "Peter Vessenes",
                "Alan Reiner",
                "Gregory Maxwell",
                "Melvin Carvalho"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 9336
        }
    },
    {
        "title": "[Bitcoin-development] Safe auto-updating",
        "thread_messages": [
            {
                "author": "Wendell",
                "date": "2013-08-05T14:39:49",
                "message_text_only": "For usability purposes, we at Hive would like to have an auto-updater in our wallet app.\n\nWhat is a safe way to do this? I understand that Bitcoin-QT lacks such an updater for security reasons... Has been thought out in more detail since that decision was made?\n\nWe have been toying around with the idea of placing one server behind a Tor hidden service, whose only function is to output a checksum of the update package. The theory is that if it is well-secured, it will at least be immune to tampering at the physical hosting level.\n\nAny thoughts or advice about any of this?\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 841 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130805/bc30fd43/attachment.sig>"
            },
            {
                "author": "Daniel F",
                "date": "2013-08-05T15:54:02",
                "message_text_only": "If you want package authentication, you should at least throw in some\ndigital signing, not just a checksum. With a compromised host, both the\nchecksum and binaries can be changed undetectably, but if there's a\nsignature made by a key that is not kept on the host, there's no way to\nfake a valid binary.\n\nThere may be other issues people would want to bring up, but surely just\na checksum is not sufficient.\n\non 08/05/2013 10:39 AM Wendell said the following:\n> For usability purposes, we at Hive would like to have an\n> auto-updater\nin our wallet app.\n> \n> What is a safe way to do this? I understand that Bitcoin-QT lacks\n> such\nan updater for security reasons... Has been thought out in more detail\nsince that decision was made?\n> \n> We have been toying around with the idea of placing one server\n> behind\na Tor hidden service, whose only function is to output a checksum of the\nupdate package. The theory is that if it is well-secured, it will at\nleast be immune to tampering at the physical hosting level.\n> \n> Any thoughts or advice about any of this?\n> -wendell\n> \n> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Get your SQL database under version control now!\n> Version control is standard for application code, but databases havent \n> caught up. So what steps can you take to put your SQL databases under \n> version control? Why should you start doing it? Read more to find out.\n> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Alan Reiner",
                "date": "2013-08-05T16:47:30",
                "message_text_only": "Indeed.  You can hardcode a \"distributor\" public key in the software,\nand client software will only trust signed data from that key.  Of\ncourse, the private key for that data is not kept on the server\ndistributing the signed checksums.  Ideally it would be kept offline,\nand the couple-times-per-year that you actually execute an upgrade, you\nsign the new checksums offline and upload the signed checksum to the\ndistribution server.  Then even if the server is compromised, the\nclient-side software will not accept a bogus checksum because it won't\nbear the right signature.\n\nIf you do this, it would be good to also have some kind of revocation\nprocess that can be used in the event of the offline key being\ncompromised.  You won't be able to \"switch\" keys, as that would defeat\nthe purpose (the attacker who compromises the offline key could just\nissue a replacement with his own).  Instead, it would be an irreversible\nbroadcast that would force clients to start rejecting updates from that\nkey.  If the key is compromised (and find out), you broadcast the\nrevocation and the users will stop auto-updating, and be given a warning\nthat they should manually upgrade the software through trusted\nchannels.  It's not failproof, but it's a decent way to minimize damage\nif you discover compromise early enough.\n\n-Alan\n\n\n\n\n\n\nOn 08/05/2013 11:54 AM, Daniel F wrote:\n> If you want package authentication, you should at least throw in some\n> digital signing, not just a checksum. With a compromised host, both the\n> checksum and binaries can be changed undetectably, but if there's a\n> signature made by a key that is not kept on the host, there's no way to\n> fake a valid binary.\n>\n> There may be other issues people would want to bring up, but surely just\n> a checksum is not sufficient.\n>\n> on 08/05/2013 10:39 AM Wendell said the following:\n>> For usability purposes, we at Hive would like to have an\n>> auto-updater\n> in our wallet app.\n>> What is a safe way to do this? I understand that Bitcoin-QT lacks\n>> such\n> an updater for security reasons... Has been thought out in more detail\n> since that decision was made?\n>> We have been toying around with the idea of placing one server\n>> behind\n> a Tor hidden service, whose only function is to output a checksum of the\n> update package. The theory is that if it is well-secured, it will at\n> least be immune to tampering at the physical hosting level.\n>> Any thoughts or advice about any of this?\n>> -wendell\n>>\n>> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Get your SQL database under version control now!\n>> Version control is standard for application code, but databases havent \n>> caught up. So what steps can you take to put your SQL databases under \n>> version control? Why should you start doing it? Read more to find out.\n>> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n>>\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n> ------------------------------------------------------------------------------\n> Get your SQL database under version control now!\n> Version control is standard for application code, but databases havent \n> caught up. So what steps can you take to put your SQL databases under \n> version control? Why should you start doing it? Read more to find out.\n> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Jim",
                "date": "2013-08-05T17:14:00",
                "message_text_only": "One approach you could use would be to use bitcoin signing on \na list of the build artifacts together with their SHA256 hashes.\n\nIf you have a look at the MultiBit release notes you get the \noverall idea:\nhttps://multibit.org/releases/multibit-0.5.13/release.txt\n\nCurrently these aren't machine readable but you can imagine\nhaving a machine readable statement with:\n+ a list of the files in the build\n+ their SHA256 hashes\n+ the above bitcoin signed by multiple signatures e.g. 2 of 3\n\nThe client can then download the file, check the signature,\ncheck the hashes and knows which files to download.\nThe acceptable Bitcoin addresses for signatures would\nbe a whitelist in the client code.\n\n\n\n\n\nOn Mon, Aug 5, 2013, at 05:47 PM, Alan Reiner wrote:\n> Indeed.  You can hardcode a \"distributor\" public key in the software,\n> and client software will only trust signed data from that key.  Of\n> course, the private key for that data is not kept on the server\n> distributing the signed checksums.  Ideally it would be kept offline,\n> and the couple-times-per-year that you actually execute an upgrade, you\n> sign the new checksums offline and upload the signed checksum to the\n> distribution server.  Then even if the server is compromised, the\n> client-side software will not accept a bogus checksum because it won't\n> bear the right signature.\n> \n> If you do this, it would be good to also have some kind of revocation\n> process that can be used in the event of the offline key being\n> compromised.  You won't be able to \"switch\" keys, as that would defeat\n> the purpose (the attacker who compromises the offline key could just\n> issue a replacement with his own).  Instead, it would be an irreversible\n> broadcast that would force clients to start rejecting updates from that\n> key.  If the key is compromised (and find out), you broadcast the\n> revocation and the users will stop auto-updating, and be given a warning\n> that they should manually upgrade the software through trusted\n> channels.  It's not failproof, but it's a decent way to minimize damage\n> if you discover compromise early enough.\n> \n> -Alan\n> \n> \n> \n> \n> \n> \n> On 08/05/2013 11:54 AM, Daniel F wrote:\n> > If you want package authentication, you should at least throw in some\n> > digital signing, not just a checksum. With a compromised host, both the\n> > checksum and binaries can be changed undetectably, but if there's a\n> > signature made by a key that is not kept on the host, there's no way to\n> > fake a valid binary.\n> >\n> > There may be other issues people would want to bring up, but surely just\n> > a checksum is not sufficient.\n> >\n> > on 08/05/2013 10:39 AM Wendell said the following:\n> >> For usability purposes, we at Hive would like to have an\n> >> auto-updater\n> > in our wallet app.\n> >> What is a safe way to do this? I understand that Bitcoin-QT lacks\n> >> such\n> > an updater for security reasons... Has been thought out in more detail\n> > since that decision was made?\n> >> We have been toying around with the idea of placing one server\n> >> behind\n> > a Tor hidden service, whose only function is to output a checksum of the\n> > update package. The theory is that if it is well-secured, it will at\n> > least be immune to tampering at the physical hosting level.\n> >> Any thoughts or advice about any of this?\n> >> -wendell\n> >>\n> >> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n> >>\n> >>\n> >>\n> >> ------------------------------------------------------------------------------\n> >> Get your SQL database under version control now!\n> >> Version control is standard for application code, but databases havent \n> >> caught up. So what steps can you take to put your SQL databases under \n> >> version control? Why should you start doing it? Read more to find out.\n> >> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n> >>\n> >>\n> >>\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >\n> > ------------------------------------------------------------------------------\n> > Get your SQL database under version control now!\n> > Version control is standard for application code, but databases havent \n> > caught up. So what steps can you take to put your SQL databases under \n> > version control? Why should you start doing it? Read more to find out.\n> > http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> ------------------------------------------------------------------------------\n> Get your SQL database under version control now!\n> Version control is standard for application code, but databases havent \n> caught up. So what steps can you take to put your SQL databases under \n> version control? Why should you start doing it? Read more to find out.\n> http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n-- \nhttps://multibit.org    Money, reinvented"
            },
            {
                "author": "Peter Todd",
                "date": "2013-08-05T17:49:36",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nGregory Maxwell had some good ideas along these lines at the san jose conference. Extending gitian with these kinds of features would be a good approach.\n\nBut I think its worth thinking about attack models. A huge danger with auto-updating is that it is easy to target individuals; if I leave auto-updates on I am essentially trusting the developers capable of signing an update not to specifically try to attack me in the future, a much more risky thing to do than simply  trusting them not to release a malicious release.\n\nSure you can try to implement anonymous downloads and similar mechanisms, but they all tend to be fragile with regard to deanonymization attacks.\n\nA better way is to ensure that the act of making a release available for download must be public, even if you can control what binaries are made available to a particular target. You can do this by putting a commitment in the blockchain itself. Each person on the signing list creates a transaction with a special form from a specific pubkey that commits to the digest of the binaries, and the auto-update code refuses to update unless it sees that special transaction with a sufficient number of confirmations. The developers now can't make a special release for a specific target without letting the world know they did so, even under coercion.\n\nThey developers could of course still make a release with code inside targeting a specific individual, but in theory at least the public can check if their builds are reproducible, and start asking questions why not?\n\nAlan Reiner <etotheipi at gmail.com> wrote:\n>Indeed.  You can hardcode a \"distributor\" public key in the software,\n>and client software will only trust signed data from that key.  Of\n>course, the private key for that data is not kept on the server\n>distributing the signed checksums.  Ideally it would be kept offline,\n>and the couple-times-per-year that you actually execute an upgrade, you\n>sign the new checksums offline and upload the signed checksum to the\n>distribution server.  Then even if the server is compromised, the\n>client-side software will not accept a bogus checksum because it won't\n>bear the right signature.\n>\n>If you do this, it would be good to also have some kind of revocation\n>process that can be used in the event of the offline key being\n>compromised.  You won't be able to \"switch\" keys, as that would defeat\n>the purpose (the attacker who compromises the offline key could just\n>issue a replacement with his own).  Instead, it would be an\n>irreversible\n>broadcast that would force clients to start rejecting updates from that\n>key.  If the key is compromised (and find out), you broadcast the\n>revocation and the users will stop auto-updating, and be given a\n>warning\n>that they should manually upgrade the software through trusted\n>channels.  It's not failproof, but it's a decent way to minimize damage\n>if you discover compromise early enough.\n>\n>-Alan\n>\n>\n>\n>\n>\n>\n>On 08/05/2013 11:54 AM, Daniel F wrote:\n>> If you want package authentication, you should at least throw in some\n>> digital signing, not just a checksum. With a compromised host, both\n>the\n>> checksum and binaries can be changed undetectably, but if there's a\n>> signature made by a key that is not kept on the host, there's no way\n>to\n>> fake a valid binary.\n>>\n>> There may be other issues people would want to bring up, but surely\n>just\n>> a checksum is not sufficient.\n>>\n>> on 08/05/2013 10:39 AM Wendell said the following:\n>>> For usability purposes, we at Hive would like to have an\n>>> auto-updater\n>> in our wallet app.\n>>> What is a safe way to do this? I understand that Bitcoin-QT lacks\n>>> such\n>> an updater for security reasons... Has been thought out in more\n>detail\n>> since that decision was made?\n>>> We have been toying around with the idea of placing one server\n>>> behind\n>> a Tor hidden service, whose only function is to output a checksum of\n>the\n>> update package. The theory is that if it is well-secured, it will at\n>> least be immune to tampering at the physical hosting level.\n>>> Any thoughts or advice about any of this?\n>>> -wendell\n>>>\n>>> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n>>>\n>>>\n>>>\n>>>\n>------------------------------------------------------------------------------\n>>> Get your SQL database under version control now!\n>>> Version control is standard for application code, but databases\n>havent\n>>> caught up. So what steps can you take to put your SQL databases\n>under\n>>> version control? Why should you start doing it? Read more to find\n>out.\n>>>\n>http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n>>>\n>>>\n>>>\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>\n>>\n>------------------------------------------------------------------------------\n>> Get your SQL database under version control now!\n>> Version control is standard for application code, but databases\n>havent\n>> caught up. So what steps can you take to put your SQL databases under\n>\n>> version control? Why should you start doing it? Read more to find\n>out.\n>>\n>http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>------------------------------------------------------------------------------\n>Get your SQL database under version control now!\n>Version control is standard for application code, but databases havent\n>caught up. So what steps can you take to put your SQL databases under\n>version control? Why should you start doing it? Read more to find out.\n>http://pubads.g.doubleclick.net/gampad/clk?id=49501711&iu=/4140/ostg.clktrk\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.0.8\n\niHkEAREIADkFAlH/5a8yHFBldGVyIFRvZGQgKGxvdyBzZWN1cml0eSBrZXkpIDxw\nZXRlQHBldGVydG9kZC5jYT4ACgkQpEFN739thozkAACeIu7GINlJqPObyZ+87vA+\n2hMphHYAoI3CyuGuSr7xYm0pus0DVgnQc/vD\n=nVJA\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Wendell",
                "date": "2013-08-07T04:32:08",
                "message_text_only": "That multisignature/blockchain commitment idea seems really solid, Peter.\n\nThanks very much indeed everyone, this is all very helpful. Much to research and think about.\n\nInterestingly, a thread is presently raging on liberationtech about Tor Browser Bundle, and the subject of automatic updates has come up. Gregory Maxwell responded thusly (cross-posting for completeness):\n\n> _please_ don't deploy automatic updates in a sensitive environment\n> like this without at least quorum signatures (like gitian downloader)\n> and timed quarantine with negative signatures (harder to make strong\n> absent a jamming proof network).\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n\nOn Aug 5, 2013, at 7:49 PM, Peter Todd wrote:\n\n> Gregory Maxwell had some good ideas along these lines at the san jose conference. Extending gitian with these kinds of features would be a good approach.\n> \n> But I think its worth thinking about attack models. A huge danger with auto-updating is that it is easy to target individuals; if I leave auto-updates on I am essentially trusting the developers capable of signing an update not to specifically try to attack me in the future, a much more risky thing to do than simply  trusting them not to release a malicious release.\n> \n> Sure you can try to implement anonymous downloads and similar mechanisms, but they all tend to be fragile with regard to deanonymization attacks.\n> \n> A better way is to ensure that the act of making a release available for download must be public, even if you can control what binaries are made available to a particular target. You can do this by putting a commitment in the blockchain itself. Each person on the signing list creates a transaction with a special form from a specific pubkey that commits to the digest of the binaries, and the auto-update code refuses to update unless it sees that special transaction with a sufficient number of confirmations. The developers now can't make a special release for a specific target without letting the world know they did so, even under coercion.\n> \n> They developers could of course still make a release with code inside targeting a specific individual, but in theory at least the public can check if their builds are reproducible, and start asking questions why not?\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 841 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130807/8f8c15c5/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-07T08:41:54",
                "message_text_only": "As you're Mac specific you could just use a modified Sparkle or something\nlike that. Even if you want to use a stock Sparkle, I have some code that\ndoes threshold RSA. My intention was to use it for the Android wallet but I\nnever found the time. I can send you a copy if you want. But it's easier\nand more robust to modify the update framework. Threshold RSA would only be\ninteresting if you wanted to use the Mac app store, for example.\n\n\n\nOn Wed, Aug 7, 2013 at 6:32 AM, Wendell <w at grabhive.com> wrote:\n\n> That multisignature/blockchain commitment idea seems really solid, Peter.\n>\n> Thanks very much indeed everyone, this is all very helpful. Much to\n> research and think about.\n>\n> Interestingly, a thread is presently raging on liberationtech about Tor\n> Browser Bundle, and the subject of automatic updates has come up. Gregory\n> Maxwell responded thusly (cross-posting for completeness):\n>\n> > _please_ don't deploy automatic updates in a sensitive environment\n> > like this without at least quorum signatures (like gitian downloader)\n> > and timed quarantine with negative signatures (harder to make strong\n> > absent a jamming proof network).\n>\n> -wendell\n>\n> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n>\n> On Aug 5, 2013, at 7:49 PM, Peter Todd wrote:\n>\n> > Gregory Maxwell had some good ideas along these lines at the san jose\n> conference. Extending gitian with these kinds of features would be a good\n> approach.\n> >\n> > But I think its worth thinking about attack models. A huge danger with\n> auto-updating is that it is easy to target individuals; if I leave\n> auto-updates on I am essentially trusting the developers capable of signing\n> an update not to specifically try to attack me in the future, a much more\n> risky thing to do than simply  trusting them not to release a malicious\n> release.\n> >\n> > Sure you can try to implement anonymous downloads and similar\n> mechanisms, but they all tend to be fragile with regard to deanonymization\n> attacks.\n> >\n> > A better way is to ensure that the act of making a release available for\n> download must be public, even if you can control what binaries are made\n> available to a particular target. You can do this by putting a commitment\n> in the blockchain itself. Each person on the signing list creates a\n> transaction with a special form from a specific pubkey that commits to the\n> digest of the binaries, and the auto-update code refuses to update unless\n> it sees that special transaction with a sufficient number of confirmations.\n> The developers now can't make a special release for a specific target\n> without letting the world know they did so, even under coercion.\n> >\n> > They developers could of course still make a release with code inside\n> targeting a specific individual, but in theory at least the public can\n> check if their builds are reproducible, and start asking questions why not?\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n> It's a free troubleshooting tool designed for production.\n> Get down to code-level detail for bottlenecks, with <2% overhead.\n> Download for free and get started troubleshooting in minutes.\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130807/5a276531/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Safe auto-updating",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jim",
                "Mike Hearn",
                "Peter Todd",
                "Alan Reiner",
                "Wendell",
                "Daniel F"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 24614
        }
    },
    {
        "title": "[Bitcoin-development] Payment Protocol: BIP 70, 71, 72",
        "thread_messages": [
            {
                "author": "Roy Badami",
                "date": "2013-08-07T20:12:32",
                "message_text_only": "On Wed, Jul 31, 2013 at 05:30:46PM -0600, E willbefull wrote:\n> I think it's important to expect PaymentRequest-only bitcoin URIs in the\n> future. Some types of payments (exotic transactions) may not make sense to\n> have a single fallback address. Or, a page with a bitcoin URI link may be\n> relying on a separate service provider to assemble the transaction.\n\nAlso:\n\n* There may be a desire to minimize the URL length when used in a QR code\n\n* Some applications might specifically require some of the features of\nthe payment protocol - e.g. it may be a requirement that a print-media\nQR code cannot be used after a cut-off date, or a vendor may have a\nspecific requirement not to accept payments without a refund address\n\nThere are pros and cons, but it's not clear to me that the benefits of\nenforced backward compatibility outweigh the benefits of allowing\napplication designers to innovate as they see fit.\n\nroy"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-08-07T20:31:45",
                "message_text_only": "On Wed, Jul 31, 2013 at 8:28 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> I've turned the preliminary payment protocol spec into three BIPs:\n>\n> https://en.bitcoin.it/wiki/BIP_0070 : Network protocol / messages\n\nI don't like the wording for payment_uri \"where the payment _may_ be\nsent to obtain a paymentACK\", or the fact that in the diagram it is\nthe client wallet broadcasting the transaction to the network.\n\nIn my opinion, it should ultimately become the responsibility of the\nreceiver to get the transaction confirmed. Of course, the sender may\nhelp, and if the transaction does not confirm, no payment took place.\nBut one of the advantages direct negotiation offers, is that the\nsender wallet does not need to remain online anymore to get the\ntransaction broadcast. I don't think it should be even required that\nthe sender wallet is connected to the P2P network at all. All they\nneed to do is construct a satisfactory transaction, and send it to the\nmerchant who cares about it.\n\nI would suggest the wording, \"if a payment_uri is specified, the\nwallet application should try - and if necessary, retry - to submit\nthe transaction there, resulting in a paymentACK from the merchant.\nBroadcasting the transaction on the P2P network is optional.\". Perhaps\nwe should even discourage broadcasting before the paymentACK is\nobtained, to make sure the merchant received it, together with the\nmetadata, to decrease the chances of money arriving at a merchant\nwithout metadata (to minimize the cases where manual intervention is\nneeded).\n\n-- \nPieter"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-08-07T21:10:05",
                "message_text_only": "RE: making the bitcoin address in the bitcoin: URI optional:\n\nOk, I'm convinced, sometimes merchants won't want or need backwards\ncompatibility and sometimes it won't make sense for them to put an\narbitrary bitcoin: address there.\n\nRE: should the customer's machine not broadcast the transaction:\n\nI'd like to hear from other wallet implementors. Do you have a notion\nof 'locked inputs' ?  The tricky bit in constructing a transaction but\nnot broadcasting it right away is the inputs must be locked, so\nthey're not accidentally double-spent.\n\nI'd also like to hear from merchants: any issue with your payment\nprocessing server having \"broadcast transaction\" functionality?\n\nMy biggest worry is that the payment protocol will not get wide\nsupport if it is too hard to implement.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-07T21:17:41",
                "message_text_only": "> I'd like to hear from other wallet implementors. Do you have a notion\n> of 'locked inputs' ?  The tricky bit in constructing a transaction but\n> not broadcasting it right away is the inputs must be locked, so\n> they're not accidentally double-spent.\n>\n\nbitcoinj separates the concept of committing a tx to the wallet from\nbroadcasting it. However by default transactions that weren't seen in the\nchain yet will be announced when a new peer is connected to. It'd take\nextra code to suppress that, and it's unclear to me why that's useful. I\nagree with Pieter that it should be the merchants responsibility to get the\ntx out there, but having the client do the broadcast as well can't really\nhurt (except perhaps some privacy impact).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130807/1951a1d0/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-08-07T21:36:48",
                "message_text_only": "On Wed, Aug 7, 2013 at 11:17 PM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> I'd like to hear from other wallet implementors. Do you have a notion\n>> of 'locked inputs' ?  The tricky bit in constructing a transaction but\n>> not broadcasting it right away is the inputs must be locked, so\n>> they're not accidentally double-spent.\n>\n>> bitcoinj separates the concept of committing a tx to the wallet from\n> broadcasting it. However by default transactions that weren't seen in the\n> chain yet will be announced when a new peer is connected to. It'd take extra\n> code to suppress that, and it's unclear to me why that's useful. I agree\n> with Pieter that it should be the merchants responsibility to get the tx out\n> there, but having the client do the broadcast as well can't really hurt\n> (except perhaps some privacy impact).\n\nMy concerns here are:\n* Making sure wallet applications can function without supporting the\nP2P protocol (which drops a huge implementation overhead for simple -\nperhaps hardware-based - wallets).\n* Making sure the responsibility of confirming transactions is with\nthe receiver (while the responsibility of creating a confirmable\ntransaction is with the sender), which again simplifies wallet\nimplementation.\n* Making receiving of metadata reliable, by minimizing cases where a\ntransaction is accidentally broadcast without the receiver being told\nabout it. This is perhaps not possible entirely, but it should be\npossible to reduce it to a point where the remaining cases can be\ndealt with manually. This also means indeed being able to give a\nbitcoin URI (or why not just a URL to a payment descriptor?) that does\nnot contain a static Bitcoin address. I understand the compatibility\nconcern here, but IMHO we should do all effort to get rid of static\naddresses were possible - the public key should be negotiated be\nsender and receiver.\n\nI worry about the scenario where some evil hotspot owner observes a\npayment request, and later sees a bitcoin P2P transaction crediting\nthat key, but without payment being sent to the payment_uri (because\nhe blocked it), thus allowing him to construct a payment message\nhimself with the request + transaction, and adding his own refund\naddress or delivery location, or ... To fix problems related to this\ncompletely, we'd need transactions that commit to the payment message,\ninstead of the other way around. I believe the pay-to-contract scheme\npresented by Timo Hanke at the San Jose conference solved this.\n\n-- \nPieter"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-07T21:44:29",
                "message_text_only": "> My concerns here are:\n> * Making sure wallet applications can function without supporting the\n> P2P protocol (which drops a huge implementation overhead for simple -\n> perhaps hardware-based - wallets)\n\n\nHow would such wallets get transactions into their wallet in the first\nplace?\n\nThe P2P protocol is really the simplest part of implementing a wallet, IMO.\n\nI don't really have a strong opinion either way, but doing more work to\nprevent transactions being announced to the network feels weird.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130807/1b39e196/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-08-07T21:49:00",
                "message_text_only": "On Wed, Aug 7, 2013 at 11:44 PM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> My concerns here are:\n>> * Making sure wallet applications can function without supporting the\n>> P2P protocol (which drops a huge implementation overhead for simple -\n>> perhaps hardware-based - wallets)\n>\n>\n> How would such wallets get transactions into their wallet in the first\n> place?\n\nBy connecting to some other client, presumably. Have a small hardware\nclient that is able to do payments via NFC/QR/... directly with a\nmerchant, and can get 'recharged' by connecting with your desktop\nclient, for example. Maybe too futuristic to be a concern, but it\nnicely illustrates how doing direct sender-to-receiver negotiation can\nhelp decoupling tasks.\n\n> I don't really have a strong opinion either way, but doing more work to\n> prevent transactions being announced to the network feels weird.\n\nOk.\n\n-- \nPieter"
            },
            {
                "author": "Roy Badami",
                "date": "2013-08-07T21:28:58",
                "message_text_only": "On Thu, Aug 08, 2013 at 07:10:05AM +1000, Gavin Andresen wrote:\n> RE: should the customer's machine not broadcast the transaction:\n\nIf we're going to allow payments to fail without being broadcast (but\nwhere the wallet can't in general prove that the receiver hasn't seen\nthe transaction) then I would argue that it becomes highly desirable\nthat the wallet invalidates the transaction at the earliest\nopportunity by spending the outputs in a pay-to-self transaction.\n\nOtherwise malicious receivers, or temporary failures, could result in\nthe user being told that the transfer didn't happen, but then the\ncoins actually leaving the wallet anyway a short time later.\n\nroy"
            },
            {
                "author": "Alan Reiner",
                "date": "2013-08-07T21:47:07",
                "message_text_only": "On 08/07/2013 05:10 PM, Gavin Andresen wrote:\n> I'd like to hear from other wallet implementors. Do you have a notion\n> of 'locked inputs' ?  The tricky bit in constructing a transaction but\n> not broadcasting it right away is the inputs must be locked, so\n> they're not accidentally double-spent.\n>\nI have avoided any notion of locking inputs in Armory for offline\nwallets.  The underlying concept of why a seemingly-random amount of\nfunds are inaccessible at a given time is so non-intuitive and difficult\nto explain to a non-expert, that I haven't even tried to deal with it.\n   Luckily, most users do one operation at a time, so it's not a real a\nproblem.  But as more businesses have started to use Armory, it /will/\nbecome a problem that will need to be addressed /somehow/.\n\nI have considered at least \"marking\" inputs to indicate to the user that\nthe transaction they are creating may not be valid unless all previous\ntransactions have been broadcast.  The user will not necessarily\nunderstand why, but they might easily comprehend the solution (and\nperhaps a button that says \"Forget all previously created transactions\nthat haven't been broadcast.  Press this button if there are no\ntransactions waiting to be broadcast\"). \n\nEven if the user somewhat understands the concepts behind locking, you\neasily end up with a mess of some coins being locked and rejecting\ntransaction creation somewhat randomly, especially when they create\ntransactions that they later decide not to execute.  And you have to\ngive the user a way to manually unlock the outputs which they wouldn't\nknow to use because it's so non-intuitive.  I'd much rather say \"either\ndo one transaction at a time, or bundle payments into a single\nmulti-output transaction.  Or risk invalid transactions that have to be\nre-created and signed.\"\n\n-Alan\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130807/56158e53/attachment.html>"
            },
            {
                "author": "Jouke Hofman",
                "date": "2013-08-14T10:56:56",
                "message_text_only": "On 08/07/2013 11:10 PM, Gavin Andresen wrote:\n> I'd also like to hear from merchants: any issue with your payment\n> processing server having \"broadcast transaction\" functionality?\n> \n\nOn the contrary, we would prefer to broadcast the transaction ourselves."
            },
            {
                "author": "Roy Badami",
                "date": "2013-08-07T21:47:57",
                "message_text_only": "Very brief comment on BIP 72:\n\nI wonder if there should be some discussion included in the\nspecification as to how the BIP 21 amount, message and label\nparameters should be processed when the payment protocol is used.\n\nPresumably amount should be completely ignored?  But is the total\namount requestd by the PaymentRequest required to match the amount\nparameter (when present)?  Is the client permitted to complain if they\ndon't?\n\nAnd what about message?  Presumably the memo from PaymentDetails\nshould take precedence, but if it's not present, and message is?\n\nI think this is an area perhaps more suited to SHOULDs and MAYs rather\nthan MUSTs, but it is probably worthy of mention...\n\nroy"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-08-07T21:54:44",
                "message_text_only": "I see payment URIs rather as a replacement for bitcoin: URI rather\nthan an extension. It solves everything they did in a much cleaner\nway, Given that bitcoin: have gotten some traction, we probably want\nto reuse the moniker, but replace the rest entirely. In other words,\nif a request is specified, nothing else should be.\n\nThere is just no useful way to combine them either - payments\ngeneralize destinations to arbitrary scripts, messages are handled\ninline, amounts are defined inline. And if you want to rely on the\npayment infrastructure to work, you cannot risk people using the\nold-style static address in the URI.\n\n\n\nOn Wed, Aug 7, 2013 at 11:47 PM, Roy Badami <roy at gnomon.org.uk> wrote:\n> Very brief comment on BIP 72:\n>\n> I wonder if there should be some discussion included in the\n> specification as to how the BIP 21 amount, message and label\n> parameters should be processed when the payment protocol is used.\n>\n> Presumably amount should be completely ignored?  But is the total\n> amount requestd by the PaymentRequest required to match the amount\n> parameter (when present)?  Is the client permitted to complain if they\n> don't?\n>\n> And what about message?  Presumably the memo from PaymentDetails\n> should take precedence, but if it's not present, and message is?\n>\n> I think this is an area perhaps more suited to SHOULDs and MAYs rather\n> than MUSTs, but it is probably worthy of mention...\n>\n> roy\n>\n> ------------------------------------------------------------------------------\n> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n> It's a free troubleshooting tool designed for production.\n> Get down to code-level detail for bottlenecks, with <2% overhead.\n> Download for free and get started troubleshooting in minutes.\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Roy Badami",
                "date": "2013-08-07T22:03:58",
                "message_text_only": "But the reality is that in many applications you need to provide a\nsingle URL.\n\nConsider existing point-of-sale systems that display QR codes for the\nuser to scan.  They live within the limitations of existing bitcoin\nURLs, but would no doubt benefit from the payments protocol.\n\nIt's not realistic for the terminal operator in a retail establishment\nto have to select which protocol will be used before generating the QR\ncode - so the effect of your proposal is to require lowest common\ndenominator and effectively prevent such systems from using the\npayments protocol (at least until it is sufficiently ubiquitous that\nthey feel happy to simply require its use).\n\nroy\n\nOn Wed, Aug 07, 2013 at 11:54:44PM +0200, Pieter Wuille wrote:\n> I see payment URIs rather as a replacement for bitcoin: URI rather\n> than an extension. It solves everything they did in a much cleaner\n> way, Given that bitcoin: have gotten some traction, we probably want\n> to reuse the moniker, but replace the rest entirely. In other words,\n> if a request is specified, nothing else should be.\n> \n> There is just no useful way to combine them either - payments\n> generalize destinations to arbitrary scripts, messages are handled\n> inline, amounts are defined inline. And if you want to rely on the\n> payment infrastructure to work, you cannot risk people using the\n> old-style static address in the URI.\n> \n> \n> \n> On Wed, Aug 7, 2013 at 11:47 PM, Roy Badami <roy at gnomon.org.uk> wrote:\n> > Very brief comment on BIP 72:\n> >\n> > I wonder if there should be some discussion included in the\n> > specification as to how the BIP 21 amount, message and label\n> > parameters should be processed when the payment protocol is used.\n> >\n> > Presumably amount should be completely ignored?  But is the total\n> > amount requestd by the PaymentRequest required to match the amount\n> > parameter (when present)?  Is the client permitted to complain if they\n> > don't?\n> >\n> > And what about message?  Presumably the memo from PaymentDetails\n> > should take precedence, but if it's not present, and message is?\n> >\n> > I think this is an area perhaps more suited to SHOULDs and MAYs rather\n> > than MUSTs, but it is probably worthy of mention...\n> >\n> > roy\n> >\n> > ------------------------------------------------------------------------------\n> > Get 100% visibility into Java/.NET code with AppDynamics Lite!\n> > It's a free troubleshooting tool designed for production.\n> > Get down to code-level detail for bottlenecks, with <2% overhead.\n> > Download for free and get started troubleshooting in minutes.\n> > http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-08-08T00:48:07",
                "message_text_only": "I've updated the BIP 72 spec at https://en.bitcoin.it/wiki/BIP_0072 so\nthe bitcoin address is optional:\n\n\"If the \"request\" parameter is provided and backwards compatibility is\nnot required, then the bitcoin address portion of the URI may be\nomitted (the URI will be of the form: bitcoin:?request=... ).\"\n\nThe spec already said what should happen if both request and\naddress/amount/etc were given:\n\n\"it should ignore the bitcoin address/amount/label/message in the URI\nand instead fetch a PaymentRequest message and then follow the payment\nprotocol\"\n\nI think this gives us a smooth, clear upgrade path.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-08T09:13:11",
                "message_text_only": "Agreed, this looks good to me.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130808/ba8e44ed/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-08-08T14:13:17",
                "message_text_only": "On Thu, Aug 8, 2013 at 2:48 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> I've updated the BIP 72 spec at https://en.bitcoin.it/wiki/BIP_0072 so\n> the bitcoin address is optional:\n>\n> \"If the \"request\" parameter is provided and backwards compatibility is\n> not required, then the bitcoin address portion of the URI may be\n> omitted (the URI will be of the form: bitcoin:?request=... ).\"\n\nSounds good.\n\nI'd still like to see some effort to avoid losing metadata and\nreducing the responsibilities of the sender.\n\nI see there's an implementation difficulty in avoiding to broadcast a\ntransaction, but for example, if a payment_uri is specified, and it\ncannot be contacted (at all), the transaction should fail. As soon as\nyou manage to connect, and have at least attempted to submit the\ntransaction, the merchant may have received it, and you want to mark\nthe coins spent, so store it after that point. But without such\nprotection we'll likely see a unnecessary payments happening without\nmetadata, when the payment server cannot be contacted for some reason.\n\nAlso, the receiver most certainly needs a P2P implementation (and\nprobably a strongly validating one) to verify incoming transactions,\nso having him broadcast it shouldn't be hard. I don't think the client\nshould be required to stay online to broadcast at all, after a\npaymentACK is received. The transaction arrived safely at that point.\n\n-- \nPieter"
            },
            {
                "author": "Andreas Petersson",
                "date": "2013-08-19T22:15:12",
                "message_text_only": "I was just reviewing the integration work to integrate the Payment\nProtocol into our products. Is there any notion of a standardized\ninvoice serialisation? If i pay for two Burgers and one Club Mate, how\nwould my Bitcoin Wallet be able to know that? Right now, i would simply\nput that into \"memo\" and come up with my own serialisation mechanism.\n\nSecond, is there a way to communicate acceptance levels of TX\n(unconfirmed, 1 conf, 6 conf) maybe using several PaymentACK?\n\n-Andreas"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-08-19T23:19:38",
                "message_text_only": "On Tue, Aug 20, 2013 at 8:15 AM, Andreas Petersson <andreas at petersson.at>wrote:\n\n> I was just reviewing the integration work to integrate the Payment\n> Protocol into our products. Is there any notion of a standardized\n> invoice serialisation? If i pay for two Burgers and one Club Mate, how\n> would my Bitcoin Wallet be able to know that?\n\n\nNo. There are XML-based (shudder) standards for electronic invoicing that\ninclude all sorts of bells and whistles; the PaymentDetails message could\neasily encapsulate one of them in an 'invoice' field extension. Or we could\nreinvent the wheel and come up with our own, but I'd rather use an existing\nstandard (or maybe a subset of an existing standard).\n\nI didn't want to wade into that swamp for the 1.0 version of the payment\nprotocol.\n\n\n> Right now, i would simply\n> put that into \"memo\" and come up with my own serialisation mechanism.\n>\n\n\"Two Burgers, one Club Mate\" seems pretty user-friendly.\n\nSecond, is there a way to communicate acceptance levels of TX\n> (unconfirmed, 1 conf, 6 conf) maybe using several PaymentACK?\n>\n\nNo, because the Payment->PaymentACK communication round-trip is done in\none, non-persistent http request-response round-trip.\n\nI don't think we want to allow merchants to push messages to the wallet\n(wouldn't take long for merchants to use the opportunity to push annoying\nadvertising at me, I think), and I don't think we want wallets to poll the\nmerchant. Although maybe a payment protocol version 2.0 feature could be a\nPaymentACK extension that says \"ask me how the transaction is going at THIS\nURL in THIS many minutes.\"\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130820/6b675872/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-20T10:05:54",
                "message_text_only": "I think the confidence of the tx is not really the users concern anyway.\nThey wrote it so they know it's valid. If the merchant disagrees for some\nreason then the user can find out, out of band when the goods/services are\nnot delivered.\n\n\nOn Tue, Aug 20, 2013 at 1:19 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> On Tue, Aug 20, 2013 at 8:15 AM, Andreas Petersson <andreas at petersson.at>wrote:\n>\n>> I was just reviewing the integration work to integrate the Payment\n>> Protocol into our products. Is there any notion of a standardized\n>> invoice serialisation? If i pay for two Burgers and one Club Mate, how\n>> would my Bitcoin Wallet be able to know that?\n>\n>\n> No. There are XML-based (shudder) standards for electronic invoicing that\n> include all sorts of bells and whistles; the PaymentDetails message could\n> easily encapsulate one of them in an 'invoice' field extension. Or we could\n> reinvent the wheel and come up with our own, but I'd rather use an existing\n> standard (or maybe a subset of an existing standard).\n>\n> I didn't want to wade into that swamp for the 1.0 version of the payment\n> protocol.\n>\n>\n>> Right now, i would simply\n>> put that into \"memo\" and come up with my own serialisation mechanism.\n>>\n>\n> \"Two Burgers, one Club Mate\" seems pretty user-friendly.\n>\n> Second, is there a way to communicate acceptance levels of TX\n>> (unconfirmed, 1 conf, 6 conf) maybe using several PaymentACK?\n>>\n>\n> No, because the Payment->PaymentACK communication round-trip is done in\n> one, non-persistent http request-response round-trip.\n>\n> I don't think we want to allow merchants to push messages to the wallet\n> (wouldn't take long for merchants to use the opportunity to push annoying\n> advertising at me, I think), and I don't think we want wallets to poll the\n> merchant. Although maybe a payment protocol version 2.0 feature could be a\n> PaymentACK extension that says \"ask me how the transaction is going at THIS\n> URL in THIS many minutes.\"\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> Introducing Performance Central, a new site from SourceForge and\n> AppDynamics. Performance Central is your source for news, insights,\n> analysis and resources for efficient Application Performance Management.\n> Visit us today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897511&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130820/00daef31/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Payment Protocol: BIP 70, 71, 72",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Andreas Petersson",
                "Mike Hearn",
                "Roy Badami",
                "Alan Reiner",
                "Gavin Andresen",
                "Jouke Hofman",
                "Pieter Wuille"
            ],
            "messages_count": 19,
            "total_messages_chars_count": 24087
        }
    },
    {
        "title": "[Bitcoin-development] Two factor wallet with one-time-passwords",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-08-08T18:20:14",
                "message_text_only": "On Sat, Jul 27, 2013 at 07:49:18PM -0400, Peter Todd wrote:\n> Funding the wallet\n> ==================\n> \n> As with any multi-party wallet receiving funds must also be handled\n> carefully to ensure an attacker can't fool the user into giving the\n> sender the wrong address. This requires the involvement of all parties\n> required to authorize an outgoing payment. In addition here the\n> protection only works if funds sent to the wallet are split up into the\n> discrete authorization amounts the user wishes. (possibly with more than\n> one amount level)\n\nQuick note for patent prior-art/my own memory - did a talk yesterday\nabout multifactor wallets, one time passwords and hash digest based\noracles. Someone getting involved in the business of selling bitcoins\npointed out that legally it can actually be desirable to give the\nbitcoins to the customer by giving them a physical private key, perhaps\non a sheet of paper in a mailed envelope. Obviously the customer would\nbe wise to sweep the funds. Of course, the advantage of doing it with\npaper is the legal system has a long history of dealing with the concept\nof a secret on a piece of paper. (your customers won't have handy PKI to\nuse after all)\n\nWith multi-factor wallets you can have the customer provide one or more\nkeys, and you give them one final key on a sheet of paper, with\ninstructions to scan it on their phone via QR-code or something. Now the\ntransfer is absolute on your end - you can't get the funds back. If it's\na large amount you may want to split it up among multiple addresses, and\ndeliver the keys to the customer in a way that makes it obvious when\nthey are revealed. (scratch off for instance)\n\nFinally, one-time-passwords do much the same thing, but they don't\nrequire the second device, and the sheet of paper the customer is\ndealing with can be much shorter. Similarly the final approval could\njust be done over the phone by telling the customer the ~6-8 magic words\nthat unlock their funds - legally it could be useful to record that\nphone call. Similarly for a large transfer, make it clear how much each\nscratched off text field is unlocking to defend yourself in court.\n\nOf course, in both there is still the risk of the funds ending up locked\ndue to a mistake, but at least there isn't financial incentive to make\nthat event happen. (usually)\n\nI'll admit I hadn't thought of any of this stuff until I talked to an\nactual business with real problems, worth doing.\n\n\nFinally it's too bad we didn't get OP_EVAL; the customer could have\nprovided a P2SH script with, well, anything in it, and the unlock could\ncould have easily been a \"bolt-on\":\n\nHASH160 <digest> EQUALVERIFY\nDUP HASH160 <p2sh-code-digest> EQUALVERIFY EVAL\n\nOh well, MAST support can do the same thing one day.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000002f3613b5394e39a254ba4afa9f76af72cd6b4273736d7987fb\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130808/86c362fb/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Two factor wallet with one-time-passwords",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3132
        }
    },
    {
        "title": "[Bitcoin-development] SPV client in pure JavaScript?",
        "thread_messages": [
            {
                "author": "Wendell",
                "date": "2013-08-09T11:32:31",
                "message_text_only": "To those of you in the know about modern browser tech:\n\nDoes it seem at all conceivable that an SPV wallet could be built entirely in JavaScript? And if indeed it is within the realm of the possible, how would such a thing be safely distributed for use? Would a signed Chrome Plugin be an ideal vehicle?\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 841 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/14986f4d/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-09T11:48:20",
                "message_text_only": "JavaScript is turing complete so of course it can be done. The real\nquestion you're asking is, can it be done in a web app? I think the answer\nis I think \"no\" because web apps aren't allowed to make raw TCP socket\nconnections.\n\nNow there may be a way around that by using browser-specific things like\nextensions or \"installable apps\" which give your code greater access\npermissions. This approach means you essentially use Chrome as your app\nplatform instead of a JVM, the assumption presumably being that more users\nhave Chrome than a JVM. The flip side is that users who don't would\nprobably balk at the idea of installing an entire browser in order to run a\nwallet app, whereas a JVM can be bundled and the resulting app acts like\nany other. I don't know of a convenient way to \"statically link\" Chrome\ninto a regular-looking application.\n\nI personally wouldn't find such a design compelling. Whilst Java isn't\nexactly a great language, JavaScript is significantly worse in virtually\nall aspects. I don't understand why anyone would want to use JavaScript\noutside the browser - you get less safety, less performance, fewer\nfeatures, less mature tools and so on. If the end result is an installable\napp like any other, all you did is cripple yourself vs the competition\nthat's using languages/platforms designed for it.\n\n\n\nOn Fri, Aug 9, 2013 at 1:32 PM, Wendell <w at grabhive.com> wrote:\n\n> To those of you in the know about modern browser tech:\n>\n> Does it seem at all conceivable that an SPV wallet could be built entirely\n> in JavaScript? And if indeed it is within the realm of the possible, how\n> would such a thing be safely distributed for use? Would a signed Chrome\n> Plugin be an ideal vehicle?\n>\n> -wendell\n>\n> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n> It's a free troubleshooting tool designed for production.\n> Get down to code-level detail for bottlenecks, with <2% overhead.\n> Download for free and get started troubleshooting in minutes.\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/77a6f87b/attachment.html>"
            },
            {
                "author": "Wendell",
                "date": "2013-08-09T12:05:46",
                "message_text_only": "Right, I'm not suggesting that we have this wallet in a web app, but rather precisely what you are talking about: using special browser features, and bundling it. I am fundamentally monoculture-opposed, but given Chrome's present installed base, that initial target makes sense to me, provided that we could have a one-click installation (as per normal, via the Chrome Store).\n\nChrome also has this \"Native Client\" plug-in: I know next to nothing about it, and this goes off the rails of the Subject, but perhaps an SPV implementation there could be a solution to the concerns you expressed?\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n\nOn Aug 9, 2013, at 1:48 PM, Mike Hearn wrote:\n\n> JavaScript is turing complete so of course it can be done. The real question you're asking is, can it be done in a web app? I think the answer is I think \"no\" because web apps aren't allowed to make raw TCP socket connections.\n> \n> Now there may be a way around that by using browser-specific things like extensions or \"installable apps\" which give your code greater access permissions. This approach means you essentially use Chrome as your app platform instead of a JVM, the assumption presumably being that more users have Chrome than a JVM. The flip side is that users who don't would probably balk at the idea of installing an entire browser in order to run a wallet app, whereas a JVM can be bundled and the resulting app acts like any other. I don't know of a convenient way to \"statically link\" Chrome into a regular-looking application.\n> \n> I personally wouldn't find such a design compelling. Whilst Java isn't exactly a great language, JavaScript is significantly worse in virtually all aspects. I don't understand why anyone would want to use JavaScript outside the browser - you get less safety, less performance, fewer features, less mature tools and so on. If the end result is an installable app like any other, all you did is cripple yourself vs the competition that's using languages/platforms designed for it."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-09T12:10:52",
                "message_text_only": "Code that runs inside NativeClient has the same access level as JavaScript\ndoes. It's just a way to do things faster.\n\nDistribution as a Chrome app via the Chrome store is a fine approach, as\nlong as people understand it's just an app platform like any other. It has\npros and cons that must be weighed up. For instance, Chrome for mobile\ndoesn't really do apps, at least not at the moment. Also, you're still\nlimited by what APIs Chrome exposes, which are a strict subset of what a\nreal OS provides.\n\n\nOn Fri, Aug 9, 2013 at 2:05 PM, Wendell <w at grabhive.com> wrote:\n\n> Right, I'm not suggesting that we have this wallet in a web app, but\n> rather precisely what you are talking about: using special browser\n> features, and bundling it. I am fundamentally monoculture-opposed, but\n> given Chrome's present installed base, that initial target makes sense to\n> me, provided that we could have a one-click installation (as per normal,\n> via the Chrome Store).\n>\n> Chrome also has this \"Native Client\" plug-in: I know next to nothing about\n> it, and this goes off the rails of the Subject, but perhaps an SPV\n> implementation there could be a solution to the concerns you expressed?\n>\n> -wendell\n>\n> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n>\n> On Aug 9, 2013, at 1:48 PM, Mike Hearn wrote:\n>\n> > JavaScript is turing complete so of course it can be done. The real\n> question you're asking is, can it be done in a web app? I think the answer\n> is I think \"no\" because web apps aren't allowed to make raw TCP socket\n> connections.\n> >\n> > Now there may be a way around that by using browser-specific things like\n> extensions or \"installable apps\" which give your code greater access\n> permissions. This approach means you essentially use Chrome as your app\n> platform instead of a JVM, the assumption presumably being that more users\n> have Chrome than a JVM. The flip side is that users who don't would\n> probably balk at the idea of installing an entire browser in order to run a\n> wallet app, whereas a JVM can be bundled and the resulting app acts like\n> any other. I don't know of a convenient way to \"statically link\" Chrome\n> into a regular-looking application.\n> >\n> > I personally wouldn't find such a design compelling. Whilst Java isn't\n> exactly a great language, JavaScript is significantly worse in virtually\n> all aspects. I don't understand why anyone would want to use JavaScript\n> outside the browser - you get less safety, less performance, fewer\n> features, less mature tools and so on. If the end result is an installable\n> app like any other, all you did is cripple yourself vs the competition\n> that's using languages/platforms designed for it.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/9dbafdf3/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-09T12:14:36",
                "message_text_only": "Oh, I forgot to make it clear - Chrome apps/extensions can make raw TCP\nsocket connections:\n\n   http://blog.chromium.org/2012/11/introducing-tcp-listen-new-api-for.html\n\nYou would do it as a packaged app:\nhttp://developer.chrome.com/apps/about_apps.html  because then they're a\nlot more similar to native apps (they get their own windows, run offline,\netc).\n\nBut these aren't standard APIs. They're all Chrome extensions. I doubt\nHTML5 will support USB access anytime soon, for instance, but packaged apps\ndo.\n\n\n\nOn Fri, Aug 9, 2013 at 2:10 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> Code that runs inside NativeClient has the same access level as JavaScript\n> does. It's just a way to do things faster.\n>\n> Distribution as a Chrome app via the Chrome store is a fine approach, as\n> long as people understand it's just an app platform like any other. It has\n> pros and cons that must be weighed up. For instance, Chrome for mobile\n> doesn't really do apps, at least not at the moment. Also, you're still\n> limited by what APIs Chrome exposes, which are a strict subset of what a\n> real OS provides.\n>\n>\n> On Fri, Aug 9, 2013 at 2:05 PM, Wendell <w at grabhive.com> wrote:\n>\n>> Right, I'm not suggesting that we have this wallet in a web app, but\n>> rather precisely what you are talking about: using special browser\n>> features, and bundling it. I am fundamentally monoculture-opposed, but\n>> given Chrome's present installed base, that initial target makes sense to\n>> me, provided that we could have a one-click installation (as per normal,\n>> via the Chrome Store).\n>>\n>> Chrome also has this \"Native Client\" plug-in: I know next to nothing\n>> about it, and this goes off the rails of the Subject, but perhaps an SPV\n>> implementation there could be a solution to the concerns you expressed?\n>>\n>> -wendell\n>>\n>> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n>>\n>> On Aug 9, 2013, at 1:48 PM, Mike Hearn wrote:\n>>\n>> > JavaScript is turing complete so of course it can be done. The real\n>> question you're asking is, can it be done in a web app? I think the answer\n>> is I think \"no\" because web apps aren't allowed to make raw TCP socket\n>> connections.\n>> >\n>> > Now there may be a way around that by using browser-specific things\n>> like extensions or \"installable apps\" which give your code greater access\n>> permissions. This approach means you essentially use Chrome as your app\n>> platform instead of a JVM, the assumption presumably being that more users\n>> have Chrome than a JVM. The flip side is that users who don't would\n>> probably balk at the idea of installing an entire browser in order to run a\n>> wallet app, whereas a JVM can be bundled and the resulting app acts like\n>> any other. I don't know of a convenient way to \"statically link\" Chrome\n>> into a regular-looking application.\n>> >\n>> > I personally wouldn't find such a design compelling. Whilst Java isn't\n>> exactly a great language, JavaScript is significantly worse in virtually\n>> all aspects. I don't understand why anyone would want to use JavaScript\n>> outside the browser - you get less safety, less performance, fewer\n>> features, less mature tools and so on. If the end result is an installable\n>> app like any other, all you did is cripple yourself vs the competition\n>> that's using languages/platforms designed for it.\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/84ddd571/attachment.html>"
            },
            {
                "author": "Wendell",
                "date": "2013-08-09T13:05:04",
                "message_text_only": "\"Packaged app pages always load locally. This allows apps to be less dependent on the network. Once a user installs an app, they have full control over the app's lifecycle. Apps open and close quickly, and the system can shut apps down at any time to improve performance. Users can fully uninstall apps.\"\n\nDoes this mean that upon install, a nice, icon-emblazoned package will drop into my /Applications folder on a Mac, or in my Windows Start menu, etc... Or are packaged apps always launched and maintained from within Chrome itself?\n\nProvided that the technical stuff could be made to work within the context of the more limited API, this certainly seems like an interesting, user-friendly way to distribute a Bitcoin wallet!\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n\nOn Aug 9, 2013, at 2:14 PM, Mike Hearn wrote:\n\n> Oh, I forgot to make it clear - Chrome apps/extensions can make raw TCP socket connections:\n> \n>   http://blog.chromium.org/2012/11/introducing-tcp-listen-new-api-for.html\n> \n> You would do it as a packaged app: http://developer.chrome.com/apps/about_apps.html  because then they're a lot more similar to native apps (they get their own windows, run offline, etc). \n> \n> But these aren't standard APIs. They're all Chrome extensions. I doubt HTML5 will support USB access anytime soon, for instance, but packaged apps do."
            },
            {
                "author": "Chris Double",
                "date": "2013-08-13T05:26:50",
                "message_text_only": "On Sat, Aug 10, 2013 at 12:14 AM, Mike Hearn <mike at plan99.net> wrote:\n> Oh, I forgot to make it clear - Chrome apps/extensions can make raw TCP\n> socket connections:\n>\n>    http://blog.chromium.org/2012/11/introducing-tcp-listen-new-api-for.html\n\nThere's a Raw Sockets proposal at the W3C that provides TCP sockets:\n\n<http://www.w3.org/2012/sysapps/raw-sockets/>\n\nFirefox OS has an API that is being discussed as part of that:\n\n<https://developer.mozilla.org/en-US/docs/WebAPI/TCP_Socket>\n\nSo there's a possibility of a standardized approach in the future.\n\nChris.\n-- \nhttp://www.bluishcoder.co.nz"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-08-09T13:08:39",
                "message_text_only": "On Fri, Aug 9, 2013 at 7:32 AM, Wendell <w at grabhive.com> wrote:\n> To those of you in the know about modern browser tech:\n>\n> Does it seem at all conceivable that an SPV wallet could be built entirely in JavaScript? And if indeed it is within the realm of the possible, how would such a thing be safely distributed for use? Would a signed Chrome Plugin be an ideal vehicle?\n\nCertainly.  BitPay is working on such a wallet:\nhttps://github.com/jgarzik/wally\n\nwally uses node.js JavaScript, and not browser JavaScript, so not\nexactly what you're talking about...\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Wendell",
                "date": "2013-08-09T17:58:23",
                "message_text_only": "No, it's not -- but that's certainly very cool to see Jeff.\n\nHow is BitPay going to put this to use?\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n\nOn Aug 9, 2013, at 3:08 PM, Jeff Garzik wrote:\n\n> Certainly.  BitPay is working on such a wallet:\n> https://github.com/jgarzik/wally\n> \n> wally uses node.js JavaScript, and not browser JavaScript, so not\n> exactly what you're talking about..."
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-08-09T18:09:23",
                "message_text_only": "On Fri, Aug 9, 2013 at 1:58 PM, Wendell <w at grabhive.com> wrote:\n> No, it's not -- but that's certainly very cool to see Jeff.\n>\n> How is BitPay going to put this to use?\n\nWell, \"wally\" is just a demo application, a command line client to\nprove a technology.\n\nThe main development is in places like \"node-libcoin\", where a wallet\nplatform is being developed.  While maintaining a strong commitment to\nthe blockchain engine side of bitcoind, BitPay has enterprise wallet\nneeds that do not necessarily mesh well with the standard bitcoind\nwallet.  Multi-sig, P2SH and other advanced features are key to the\nfuture use of bitcoin in large enterprises.  Managers, CEOs and other\nfunctionaries at a corporation may each have their own wallets /\nkeyrings, and cooperate to sign large value, high security bitcoin\nmulti-sig transactions, for example.\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            }
        ],
        "thread_summary": {
            "title": "SPV client in pure JavaScript?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Mike Hearn",
                "Chris Double",
                "Wendell"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 15647
        }
    },
    {
        "title": "[Bitcoin-development] Idea for new payment protocol PKI",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2013-08-09T11:43:33",
                "message_text_only": "This is just me making notes for myself, I'm not seriously suggesting this\nbe implemented any time soon.\n\nMozilla Persona is an infrastructure for web based single sign on. It works\nby having email providers sign temporary certificates for their users,\nwhose browsers then sign server-provided challenges to prove their email\naddress.\n\nBecause an SSO system is a classic chicken/egg setup, they run various\nfallback services that allow anyone with an email address to take part.\nThey also integrate with the Google/Yahoo SSO systems as well. The\nintention being that they do this until Persona becomes big enough to\nmatter, and then they can remove the centralised struts and the system\nbecomes transparently decentralised.\n\nIn other words, they seem to do a lot of things right.\n\nOf course you can already sign payments using an X.509 cert issued to an\nemail address with v1 of the payment protocol, so technically no new PKI is\nneeded. But the benefit of leveraging Persona would be convenience - you\ncan get yourself a Persona cert and use it to sign in to websites with a\nsingle click, and the user experience is smart and professional. CAs in\ncontrast are designed for web site admins really so the experience of\ngetting a cert for an email address is rather variable and more heavyweight.\n\nUnfortunately Persona does not use X.509. It uses a custom thing based on\nJSON. However, under the hood it's just assertions signed by RSA keys, so\nan implementation is likely to be quite easy. From the users perspective,\ntheir wallet app would embed a browser and drive it as if it were signing\ninto a website, but stop after the user is signed into Persona and a user\ncert has been provisioned. It can then sign payment requests automatically.\nFor many users, it'd be just one click, which is pretty neat.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/93d2a4b9/attachment.html>"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-08-09T11:57:49",
                "message_text_only": "On 9 August 2013 13:43, Mike Hearn <mike at plan99.net> wrote:\n\n> This is just me making notes for myself, I'm not seriously suggesting this\n> be implemented any time soon.\n>\n> Mozilla Persona is an infrastructure for web based single sign on. It\n> works by having email providers sign temporary certificates for their\n> users, whose browsers then sign server-provided challenges to prove their\n> email address.\n>\n> Because an SSO system is a classic chicken/egg setup, they run various\n> fallback services that allow anyone with an email address to take part.\n> They also integrate with the Google/Yahoo SSO systems as well. The\n> intention being that they do this until Persona becomes big enough to\n> matter, and then they can remove the centralised struts and the system\n> becomes transparently decentralised.\n>\n> In other words, they seem to do a lot of things right.\n>\n> Of course you can already sign payments using an X.509 cert issued to an\n> email address with v1 of the payment protocol, so technically no new PKI is\n> needed. But the benefit of leveraging Persona would be convenience - you\n> can get yourself a Persona cert and use it to sign in to websites with a\n> single click, and the user experience is smart and professional. CAs in\n> contrast are designed for web site admins really so the experience of\n> getting a cert for an email address is rather variable and more heavyweight.\n>\n> Unfortunately Persona does not use X.509. It uses a custom thing based on\n> JSON. However, under the hood it's just assertions signed by RSA keys, so\n> an implementation is likely to be quite easy. From the users perspective,\n> their wallet app would embed a browser and drive it as if it were signing\n> into a website, but stop after the user is signed into Persona and a user\n> cert has been provisioned. It can then sign payment requests automatically.\n> For many users, it'd be just one click, which is pretty neat.\n>\n\nPersona, in it's current state, is the exact opposite of the principle\nbehind of bitcoin.\n\nBitcoin sought to reduce dependence on trusted third parties, where as,\npersona is increasing the reach of trusted third parties.  The keys and\npasswords are stored on mozilla's servers, sometimes on your email\nproviders.  Persona, is however, a progression and will hopefully improve\nits security and decentralization as it goes along.\n\nA (client or server side) X.509 cert can be issued to any address, be it\nemail, telephone, webpage, *or* to a bitcoin address, it allows any URI in\nhe subjectAlternativeName field.  This is much more of bitcoin like model\nwhere the private key sits on your client and the public key is in\ndiscoverable by the other end.\n\nMost enterprises (including Mozilla) take the stance that key management on\nthe client is beyond the average user.  The notable exception is twitter\nwho are rolling out 2 factor auth based on PKI.\n\nIf you're interested in signing stuff with RSA (or other) keys, the web\npayments and payswarm guys have done a ton of work on this, including\nimplementations, which you may be able to reuse ...\n\n\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n> It's a free troubleshooting tool designed for production.\n> Get down to code-level detail for bottlenecks, with <2% overhead.\n> Download for free and get started troubleshooting in minutes.\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/7a706842/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-09T12:08:52",
                "message_text_only": ">\n> Bitcoin sought to reduce dependence on trusted third parties, where as,\n> persona is increasing the reach of trusted third parties.  The keys and\n> passwords are stored on mozilla's servers, sometimes on your email\n> providers.  Persona, is however, a progression and will hopefully improve\n> its security and decentralization as it goes along.\n>\n\nWhen Persona is supported by all the key players in a transaction Mozilla\ndoesn't get anything, do they? You can easily run your own IDP on a\npersonal server if you're the kind of person who likes to do that, then run\nFirefox so you have a native implementation and the Mozilla servers aren't\ninvolved. The keys never leave your computers.\n\nWhilst X.509 certs can indeed be issued for any arbitrary string, you still\nneed a CA that will do it for you, and that's typically not so trivial. CAs\naren't meant for widespread end user adoption, really, whereas Persona is.\n\nI don't think Persona is any more or less centralised than other PKIs,\nreally, just easier to use. Ultimately the string you're verifying is a\nuser at host pair, so the host is centralised via DNS and to verify the\nassertions it vends, you must use SSL to connect to it, so under the hood\nthe regular SSL PKI is still there.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/f9d1ac67/attachment.html>"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-08-09T12:17:10",
                "message_text_only": "On 9 August 2013 14:08, Mike Hearn <mike at plan99.net> wrote:\n\n> Bitcoin sought to reduce dependence on trusted third parties, where as,\n>> persona is increasing the reach of trusted third parties.  The keys and\n>> passwords are stored on mozilla's servers, sometimes on your email\n>> providers.  Persona, is however, a progression and will hopefully improve\n>> its security and decentralization as it goes along.\n>>\n>\n> When Persona is supported by all the key players in a transaction Mozilla\n> doesn't get anything, do they? You can easily run your own IDP on a\n> personal server if you're the kind of person who likes to do that, then run\n> Firefox so you have a native implementation and the Mozilla servers aren't\n> involved. The keys never leave your computers.\n>\n\nYou'd need to run your own email server and/or change email address, which\nis not in the reach of the average user, and maybe not even of some\nbusinesses.\n\n\n>\n> Whilst X.509 certs can indeed be issued for any arbitrary string, you\n> still need a CA that will do it for you, and that's typically not so\n> trivial. CAs aren't meant for widespread end user adoption, really, whereas\n> Persona is.\n>\n\nYou can self sign X.509 certificates quite easily (e.g. one click via\n<KEYGEN>), then rely on a decentralized web of trust to remove browser\nwarnings.  A few people are working on this.\n\n\n>\n> I don't think Persona is any more or less centralised than other PKIs,\n> really, just easier to use. Ultimately the string you're verifying is a\n> user at host pair, so the host is centralised via DNS and to verify the\n> assertions it vends, you must use SSL to connect to it, so under the hood\n> the regular SSL PKI is still there.\n>\n>\n>\nIt is easier to use, that's a great plus.  But convenience is often a trade\noff with security.\n\nI dont user user at host, I use my home page because it's easy to dereference\nand get a public key.  Email is hard to dereference.\n\nYes, there is a reliance on DNS, which Tim calls the 'Achilles heel' of the\nweb, but it's held up quite well so far (fortunately for us).\n\nMozilla also have a master key to most email accounts, so if anyone got\naccess to that they could impersonate the vast majority of users that have\nnot opted in.  I would not use persona for financial stuff, but if I made a\ncasual app with non sensitive information it would be one of the top\nchoices, imho\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/45364f00/attachment.html>"
            },
            {
                "author": "Wendell",
                "date": "2013-08-09T11:59:09",
                "message_text_only": "We have been discussing something like this over here too, as well as exploring more esoteric blockchain+signature-based \"SSO\" implementations as discussed by John Light and others.\n\nOne of our long-term ambitions with Hive is to provide a (mostly) user-transparent, decentralized authentication service. It sounds like our infrastructure could already handle a Persona implementation, and we very much want to get behind some forward-thinking standard. So as long as the plan _IS_ to remove said 'centralized struts' at the appropriate time, I'd say we're interested in exploring this further.\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n\nOn Aug 9, 2013, at 1:43 PM, Mike Hearn wrote:\n\n> This is just me making notes for myself, I'm not seriously suggesting this be implemented any time soon.\n> \n> Mozilla Persona is an infrastructure for web based single sign on. It works by having email providers sign temporary certificates for their users, whose browsers then sign server-provided challenges to prove their email address.\n> \n> Because an SSO system is a classic chicken/egg setup, they run various fallback services that allow anyone with an email address to take part. They also integrate with the Google/Yahoo SSO systems as well. The intention being that they do this until Persona becomes big enough to matter, and then they can remove the centralised struts and the system becomes transparently decentralised.\n> \n> In other words, they seem to do a lot of things right.\n> \n> Of course you can already sign payments using an X.509 cert issued to an email address with v1 of the payment protocol, so technically no new PKI is needed. But the benefit of leveraging Persona would be convenience - you can get yourself a Persona cert and use it to sign in to websites with a single click, and the user experience is smart and professional. CAs in contrast are designed for web site admins really so the experience of getting a cert for an email address is rather variable and more heavyweight.\n> \n> Unfortunately Persona does not use X.509. It uses a custom thing based on JSON. However, under the hood it's just assertions signed by RSA keys, so an implementation is likely to be quite easy. From the users perspective, their wallet app would embed a browser and drive it as if it were signing into a website, but stop after the user is signed into Persona and a user cert has been provisioned. It can then sign payment requests automatically. For many users, it'd be just one click, which is pretty neat."
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-08-09T12:18:37",
                "message_text_only": "On 9 August 2013 13:59, Wendell <w at grabhive.com> wrote:\n\n> We have been discussing something like this over here too, as well as\n> exploring more esoteric blockchain+signature-based \"SSO\" implementations as\n> discussed by John Light and others.\n>\n\nI've been using SSO for years using an X.509 private key in my browser, and\nmy public key referenced in my home page.\n\nThe unfortunate thing is that X.509 tends to use RSA, and bitcoin tends to\nuse ECC for space reasons.  Since, in its simplest form, bitcoin is a\ndistributed ledger of public key / balance values you could imagine an\nenormous eco system where every key pair become a wallet with 10s of\nmillions of users.\n\nI was thinking about an alt coin along these lines.  The problem is that\nthere's no OP_CODE for RSA and the block chain would become massive.\n\n\n>\n> One of our long-term ambitions with Hive is to provide a (mostly)\n> user-transparent, decentralized authentication service. It sounds like our\n> infrastructure could already handle a Persona implementation, and we very\n> much want to get behind some forward-thinking standard. So as long as the\n> plan _IS_ to remove said 'centralized struts' at the appropriate time, I'd\n> say we're interested in exploring this further.\n>\n\nSounds great, would love to hear more about what you come up with!\n\n\n>\n> -wendell\n>\n> grabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n>\n> On Aug 9, 2013, at 1:43 PM, Mike Hearn wrote:\n>\n> > This is just me making notes for myself, I'm not seriously suggesting\n> this be implemented any time soon.\n> >\n> > Mozilla Persona is an infrastructure for web based single sign on. It\n> works by having email providers sign temporary certificates for their\n> users, whose browsers then sign server-provided challenges to prove their\n> email address.\n> >\n> > Because an SSO system is a classic chicken/egg setup, they run various\n> fallback services that allow anyone with an email address to take part.\n> They also integrate with the Google/Yahoo SSO systems as well. The\n> intention being that they do this until Persona becomes big enough to\n> matter, and then they can remove the centralised struts and the system\n> becomes transparently decentralised.\n> >\n> > In other words, they seem to do a lot of things right.\n> >\n> > Of course you can already sign payments using an X.509 cert issued to an\n> email address with v1 of the payment protocol, so technically no new PKI is\n> needed. But the benefit of leveraging Persona would be convenience - you\n> can get yourself a Persona cert and use it to sign in to websites with a\n> single click, and the user experience is smart and professional. CAs in\n> contrast are designed for web site admins really so the experience of\n> getting a cert for an email address is rather variable and more heavyweight.\n> >\n> > Unfortunately Persona does not use X.509. It uses a custom thing based\n> on JSON. However, under the hood it's just assertions signed by RSA keys,\n> so an implementation is likely to be quite easy. From the users\n> perspective, their wallet app would embed a browser and drive it as if it\n> were signing into a website, but stop after the user is signed into Persona\n> and a user cert has been provisioned. It can then sign payment requests\n> automatically. For many users, it'd be just one click, which is pretty neat.\n>\n>\n> ------------------------------------------------------------------------------\n> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n> It's a free troubleshooting tool designed for production.\n> Get down to code-level detail for bottlenecks, with <2% overhead.\n> Download for free and get started troubleshooting in minutes.\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/f309fcc6/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Idea for new payment protocol PKI",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Melvin Carvalho",
                "Mike Hearn",
                "Wendell"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 16510
        }
    },
    {
        "title": "[Bitcoin-development] Optional \"wallet-linkable\" address format (Re-request)",
        "thread_messages": [
            {
                "author": "Alan Reiner",
                "date": "2013-08-09T17:57:35",
                "message_text_only": "Guys,\n\nI'd like to reiterate my previous request to support this alternate\naddress serialization in the payment protocol.  We got caught up in the\nspecifics of one use case, but didn't acknowledge that it's still a\nvalid address representation that will provide value to those who wish\nto use it and can be safely ignored by others.\n\nCurrent address format:   binary_to_base58( idbyte + hash160(pubkey) +\nchecksum)\nAlternate format:         binary_to_base58( idbyte + parentpubkey +\nmultiplier + checksum)\n\nThe receiving party will multiply the pubkey by the multiplier, and then\nhash it to get the 20-byte address to send to.  The idea is that you use\nyour BIP 32 parent public key, and then you generate whatever child you\nwant, and only send them the multiplier used (not the chaincode).  This\npreserves privacy, but if the recipient has your parent public key\nalready, they can identify that address being linked to you, but cannot\ndetermine any other addresses in your wallet.\n\nThis form has no drawbacks to the existing address format except for\nbeing longer and requiring an extra EC multiplication by the person\nsending to that address.  But the advantage is that it optionally allows\nthe sender to provide more information than currently contained in the\n25-byte hash160 form.  The discussion about this got side-tracked with\nthe use case I presented, but I believe there are plenty of other uses\nfor this.\n\nThe particular use case I had in mind was that certain services could be\nsetup (pre-arranged), say between wallet software and a\nbusiness/exchange.  The exchange would like to be able to reliably send\naddresses to the user for deposit, without risk of MITM, or even if\ntheir own public server is compromised.  The author of wallet software\npre-verifies the public key portion of the service, and either hardcodes\nit into the software, or hardcodes their own public key into the\nsoftware and makes the service's signed public key available through\nquery server (allowing the software author to offline-sign replacement\nkeys, or add keys for new service providers, as needed). \n\nWhen the user's software receives a payment address, the software can\nverify it belongs to that service.  You can't use dedicated chain\ntechnique, because it would either have to be exchanged with the user on\nfirst transaction which half defeats the purpose, or they give them the\nfull public key and chaincode which allows the user to see /all\n/addresses ever used by the service.  Neither one is a reasonable solution.\n\nThis use case doesn't necessarily scale, but it doesn't have to.  It\nsimply allows service providers to skip the SSL and go right to public\nkey exchange/verification for a few of the important services they\nprovide access to, and will provide better security than relying on\nSSL/PKI.  This would simply be one, coexisting option for providing\npayment details in the absence (or in addition to) SSL/PKI infrastructure.\n\nI'm sure there's other use cases, but it seems simple enough and\nnon-disruptive enough that it could be supported easily for no other\nreason than to support that use case (which I intend to implement in\nArmory to help verify high-volume services).\n\n-Alan\n\n\n\n\n\nOn 06/26/2013 11:29 AM, Alan Reiner wrote:\n> Although I'd still prefer my original request, I get much of what I\n> want from your guys' recommendation.  It complicates the wallet\n> design, because it requires tracking and associating a matrix of\n> addresses for each wallet, instead of a single linear list.  But if\n> this is what it's going to take then I will go along. \n>\n> Right now BIP 32 defines, m/i'/j/k, where j=0 is the \"external\" chain\n> used for distributing addresses, and j=1 is the \"internal\" chain for\n> sending change.  The CONOPs (concept of operations) for the extended\n> wallet would be like Jeremy described:\n>\n> - Chains with j>=2 would be independent address chains carved out for\n> individuals relationships\n> - Add wallet code to individually associate each j-value with a\n> particular identity\n> - Update the wallet code to pool all the addresses in all j-chains\n> when calculating the balance of the wallet and/or creating transactions\n> - When choosing to generically \"Receive Bitcoins\", will pick the next\n> address from the j=0 chain\n> - Will have to add extra function to \"Receive Bitcoins\" button to\n> allow creation of new contacts/identities.\n> - Change will always go to the next address in j=1, no matter which\n> chains are used to provide inputs.\n> - Add code to figure out lookaheads for each alternate chain.  Not\n> just each chain, but looking ahead a couple chains, too.  Luckily, the\n> lookahead doesn't have to be very big for chains j>=1 \n> - Add an interface to display and choose the different chains in your\n> wallet, and export the pubkey&chaincode in some\n> soon-to-be-standardized format. \n> - Add code and interface to receive and track alternate j-chains from\n> other clients/users, and maintain those.  Should we try associating\n> incoming and outgoing chains?  What happens if they do it wrong?  Meh...\n>\n> Just as one final swipe at this idea, you can see that I gotta do\n> quite a bit of work to support the multi-chain idea, and adds a little\n> extra burden on the user to maintain the organization of the wallet. \n> This would all be totally unnecessary with a simple alternate\n> encoding.  Granted, I think the multi-chain idea is good, and one that\n> I will probably implement anyway, but it seems like overkill in terms\n> of developer complexity, and interface complexity to achieve something\n> much simpler.  Developers of much simpler/lightweight clients would\n> probably find this prohibitive.\n>\n> On another note:  I thought we weren't encouraging automatic payments\n> without requesting from the other party...?  It makes me uneasy, but\n> it sounds like group thought has converged on that being acceptable. \n> I bring it up, because there are situations where it makes sense, but\n> it sounds unsafe for general users.   Alice will give Bob his own\n> chain for sending Alice money, then a year later Bob will send money\n> automatically to Alice not realizing that the wallet was lost, retired\n> or compromised.  It's not that Bob can't ask for a new address, it's\n> that if the interface says \"Send Money to Alice\", that looks legit\n> enough that Bob may not feel it necessary to check with Alice first.  \n> That's more of an interface issue though.  We can add a warning to\n> \"check with the recipient that they still have access to wallet\n> 3cQ398x\", etc.   But I just know someone is going to lose money anyway...\n>\n> -Alan\n>\n>\n>\n>\n>\n> On 06/20/2013 03:32 AM, Mike Hearn wrote:\n>> Agree with Jeremy and once the payment protocol work is further along\n>> I'd like to see us define an extension that lets you send payment\n>> requests containing public keys+chain codes, so further payments can\n>> be made push-style with no recipient interaction (e.g. for repeated\n>> billing). How apps choose to arrange their chains internally seems\n>> like an area for experimentation. I definitely want to implement HD\n>> wallets in bitcoinj to allow this and if that means not using the\n>> same tree structure as in the BIP then so be it.\n>>\n>>\n>> On Thu, Jun 20, 2013 at 5:54 AM, Jeremy Spilman <jeremy at taplink.co\n>> <mailto:jeremy at taplink.co>> wrote:\n>>\n>>     > BIP 32 already specifies how to use the first three tree\n>>     levels:  M/i/j/k,\n>>     > i~wallet, j~Internal/External, k~address.  The first level is\n>>     actually\n>>     > type-1 derived, and thus we cannot create an arbitrary number\n>>     of them\n>>     > without pre-computing them from the offline wallet.  So it's\n>>     not \"free\" to\n>>     > create new wallets unless we redefine how the levels work.\n>>\n>>     Initially I was thinking that you would share the public key and\n>>     chain code\n>>     from [m/i'/0] so that you can receive payments at [m/i'/0/k], for\n>>     a unique\n>>     value of 'i' for each receive chain.\n>>\n>>     For the case of generating new receive chains from a *watch-only*\n>>     wallet, as\n>>     you say, the options are to either keep a cache of\n>>     PubKey/ChainCode for\n>>     unused [m/i'] or simply increment 'j' past 1 for an existing\n>>     [m/i'/j] -- the\n>>     concept of 'internal/'external' and change addresses at Depth=2\n>>     don't make\n>>     sense for handing out receive chains to lots of people anyway,\n>>     and certainly\n>>     BIP32 doesn't *require* 0 <= j <= 1.  So I think incrementing 'j'\n>>     is the way\n>>     to go here...\n>>\n>>     The \"default\" layout of BIP32 does NOT mean that implementations\n>>     should not\n>>     check for transactions with j > 1. That would be a useless\n>>     constraint and\n>>     obviously self-limiting. It might be helpful to add to the\n>>     'Compatibility'\n>>     section some minimum expectations about how a wallet should be\n>>     'probed' when\n>>     imported. If you don't feel completely free to monotonically\n>>     increment 'j'\n>>     to your hearts content to achieve major usability benefits, then\n>>     I say BIP32\n>>     could use some clarifying.\n>>\n>>     BTW - the spec calls for addition not multiplication now, so we\n>>     should call\n>>     it the 'Addend' not the 'Multiplier' :-)\n>>\n>>     > Do these extra wallet chains behave as different wallets, or\n>>     sub-wallets?\n>>\n>>     They could, but they certainly don't need to!  A single-wallet\n>>     implementation treats this merely as an address-generation\n>>     algorithm, and\n>>     does not expose any hierarchy to the user interface.  The user just\n>>     \"magically\" gets the ability to send multiple payments to their\n>>     contacts\n>>     without immediately sacrificing their privacy\n>>     (http://www.wired.com/wiredenterprise/2013/06/bitcoin_retai/).\n>>     Everything\n>>     goes into the same ledger, balance, coin pool, etc. Most of the\n>>     code base is\n>>     unaware BIP32 is even in use.\n>>\n>>     While it is *possible* to support separate ledgers, balances,\n>>     etc. it is\n>>     certainly not required, and you get all the benefits either way.\n>>\n>>     I think, since your proposal generates and receives payments into\n>>     BIP32-style addresses, we both need similar underlying wallet\n>>     code. The only\n>>     difference is that you are passing the Kpar for [m/i'/0/k] and\n>>     the *result*\n>>     of CKD'((Kpar, cpar), k), and instead I proposed passing Kpar and\n>>     cpar, and\n>>     leaving 'k' out of it, letting the receive choose 'k'.\n>>\n>>     > For instance, maybe there's a benefit to using the same parent\n>>     pubkey\n>>     > across multiple services, as a form of identity.   If I don't\n>>     want that, I\n>>     > use your method.  If I do want that, I use my method.\n>>\n>>     I think it's a interesting idea using static public keys as a\n>>     means for\n>>     persistent identity and hence security from MitM. If you want a\n>>     shared\n>>     public key across multiple services we could just combine both\n>>     ideas and get\n>>     all the benefits, by making the data structure { ParentPubKey,\n>>     Addend,\n>>     ChainCode }:\n>>\n>>        ParentPubKey: Public key of m/i' -- 33 bytes\n>>        Addend: I[L]*G from CDK'(m/i', j) -- 33 bytes\n>>        ChainCode: I[R] from CDK'(m/i', j) -- 32 bytes\n>>\n>>     All that remains secret is the ChainCode from [m/i'] -- and of\n>>     course the\n>>     private keys.  The ParentPubKey is a common value across multiple\n>>     services,\n>>     corresponding to user's identity rooted in [m/i'].  Each service\n>>     gets their\n>>     own 'j'.  ParentPubKey + Addend gives you the PubKey of [m/i'/j].\n>>      With the\n>>     ChainCode, the receiver then can generate [m/i'/j/k] for\n>>     monotonically\n>>     increasing 'k'. Again, from the user perspective all transactions\n>>     under\n>>     [m/i'] can be presented in a single ledger, or not.\n>>\n>>     Anyway, fundamentally my feedback is if you are designing for\n>>     persistent\n>>     long-term relationships, you could build in a mechanism for\n>>     generating\n>>     address chains so you don't need any further communication after\n>>     the initial\n>>     exchange, and it need not complicate the wallet.\n>>\n>>     Thanks,\n>>     --Jeremy\n>>\n>>\n>>\n>>     ------------------------------------------------------------------------------\n>>     This SF.net email is sponsored by Windows:\n>>\n>>     Build for Windows Store.\n>>\n>>     http://p.sf.net/sfu/windows-dev2dev\n>>     _______________________________________________\n>>     Bitcoin-development mailing list\n>>     Bitcoin-development at lists.sourceforge.net\n>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> This SF.net email is sponsored by Windows:\n>>\n>> Build for Windows Store.\n>>\n>> http://p.sf.net/sfu/windows-dev2dev\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/6a4536d2/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-09T19:58:39",
                "message_text_only": "Payment protocol is locked down for v1 already. But did you read it? It\ndoesn't use addresses anywhere. Payments are specified in terms of a list\nof outputs which can contain any script. Of course it could be a\npay-to-address script, but pay-to-address uses more bytes in the chain and\nthere isn't any typeability benefit.\n\nThe multiplication trick for deterministic keys is a nice one and worth\ndoing, but it has to be a v2 feature by this point. It's more important to\nget v1 widely implemented and deployed first.\n\n\nOn Fri, Aug 9, 2013 at 7:57 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n\n>  Guys,\n>\n> I'd like to reiterate my previous request to support this alternate\n> address serialization in the payment protocol.  We got caught up in the\n> specifics of one use case, but didn't acknowledge that it's still a valid\n> address representation that will provide value to those who wish to use it\n> and can be safely ignored by others.\n>\n> Current address format:   binary_to_base58( idbyte + hash160(pubkey) +\n> checksum)\n> Alternate format:         binary_to_base58( idbyte + parentpubkey +\n> multiplier + checksum)\n>\n> The receiving party will multiply the pubkey by the multiplier, and then\n> hash it to get the 20-byte address to send to.  The idea is that you use\n> your BIP 32 parent public key, and then you generate whatever child you\n> want, and only send them the multiplier used (not the chaincode).  This\n> preserves privacy, but if the recipient has your parent public key already,\n> they can identify that address being linked to you, but cannot determine\n> any other addresses in your wallet.\n>\n> This form has no drawbacks to the existing address format except for being\n> longer and requiring an extra EC multiplication by the person sending to\n> that address.  But the advantage is that it optionally allows the sender to\n> provide more information than currently contained in the 25-byte hash160\n> form.  The discussion about this got side-tracked with the use case I\n> presented, but I believe there are plenty of other uses for this.\n>\n> The particular use case I had in mind was that certain services could be\n> setup (pre-arranged), say between wallet software and a business/exchange.\n> The exchange would like to be able to reliably send addresses to the user\n> for deposit, without risk of MITM, or even if their own public server is\n> compromised.  The author of wallet software pre-verifies the public key\n> portion of the service, and either hardcodes it into the software, or\n> hardcodes their own public key into the software and makes the service's\n> signed public key available through query server (allowing the software\n> author to offline-sign replacement keys, or add keys for new service\n> providers, as needed).\n>\n> When the user's software receives a payment address, the software can\n> verify it belongs to that service.  You can't use dedicated chain\n> technique, because it would either have to be exchanged with the user on\n> first transaction which half defeats the purpose, or they give them the\n> full public key and chaincode which allows the user to see *all *addresses\n> ever used by the service.  Neither one is a reasonable solution.\n>\n> This use case doesn't necessarily scale, but it doesn't have to.  It\n> simply allows service providers to skip the SSL and go right to public key\n> exchange/verification for a few of the important services they provide\n> access to, and will provide better security than relying on SSL/PKI.  This\n> would simply be one, coexisting option for providing payment details in the\n> absence (or in addition to) SSL/PKI infrastructure.\n>\n> I'm sure there's other use cases, but it seems simple enough and\n> non-disruptive enough that it could be supported easily for no other reason\n> than to support that use case (which I intend to implement in Armory to\n> help verify high-volume services).\n>\n> -Alan\n>\n>\n>\n>\n>\n> On 06/26/2013 11:29 AM, Alan Reiner wrote:\n>\n> Although I'd still prefer my original request, I get much of what I want\n> from your guys' recommendation.  It complicates the wallet design, because\n> it requires tracking and associating a matrix of addresses for each wallet,\n> instead of a single linear list.  But if this is what it's going to take\n> then I will go along.\n>\n> Right now BIP 32 defines, m/i'/j/k, where j=0 is the \"external\" chain used\n> for distributing addresses, and j=1 is the \"internal\" chain for sending\n> change.  The CONOPs (concept of operations) for the extended wallet would\n> be like Jeremy described:\n>\n> - Chains with j>=2 would be independent address chains carved out for\n> individuals relationships\n> - Add wallet code to individually associate each j-value with a particular\n> identity\n> - Update the wallet code to pool all the addresses in all j-chains when\n> calculating the balance of the wallet and/or creating transactions\n> - When choosing to generically \"Receive Bitcoins\", will pick the next\n> address from the j=0 chain\n> - Will have to add extra function to \"Receive Bitcoins\" button to allow\n> creation of new contacts/identities.\n> - Change will always go to the next address in j=1, no matter which chains\n> are used to provide inputs.\n> - Add code to figure out lookaheads for each alternate chain.  Not just\n> each chain, but looking ahead a couple chains, too.  Luckily, the lookahead\n> doesn't have to be very big for chains j>=1\n> - Add an interface to display and choose the different chains in your\n> wallet, and export the pubkey&chaincode in some soon-to-be-standardized\n> format.\n> - Add code and interface to receive and track alternate j-chains from\n> other clients/users, and maintain those.  Should we try associating\n> incoming and outgoing chains?  What happens if they do it wrong?  Meh...\n>\n> Just as one final swipe at this idea, you can see that I gotta do quite a\n> bit of work to support the multi-chain idea, and adds a little extra burden\n> on the user to maintain the organization of the wallet.  This would all be\n> totally unnecessary with a simple alternate encoding.  Granted, I think the\n> multi-chain idea is good, and one that I will probably implement anyway,\n> but it seems like overkill in terms of developer complexity, and interface\n> complexity to achieve something much simpler.  Developers of much\n> simpler/lightweight clients would probably find this prohibitive.\n>\n> On another note:  I thought we weren't encouraging automatic payments\n> without requesting from the other party...?  It makes me uneasy, but it\n> sounds like group thought has converged on that being acceptable.  I bring\n> it up, because there are situations where it makes sense, but it sounds\n> unsafe for general users.   Alice will give Bob his own chain for sending\n> Alice money, then a year later Bob will send money automatically to Alice\n> not realizing that the wallet was lost, retired or compromised.  It's not\n> that Bob can't ask for a new address, it's that if the interface says \"Send\n> Money to Alice\", that looks legit enough that Bob may not feel it necessary\n> to check with Alice first.   That's more of an interface issue though.  We\n> can add a warning to \"check with the recipient that they still have access\n> to wallet 3cQ398x\", etc.   But I just know someone is going to lose money\n> anyway...\n>\n> -Alan\n>\n>\n>\n>\n>\n> On 06/20/2013 03:32 AM, Mike Hearn wrote:\n>\n> Agree with Jeremy and once the payment protocol work is further along I'd\n> like to see us define an extension that lets you send payment requests\n> containing public keys+chain codes, so further payments can be made\n> push-style with no recipient interaction (e.g. for repeated billing). How\n> apps choose to arrange their chains internally seems like an area for\n> experimentation. I definitely want to implement HD wallets in bitcoinj to\n> allow this and if that means not using the same tree structure as in the\n> BIP then so be it.\n>\n>\n> On Thu, Jun 20, 2013 at 5:54 AM, Jeremy Spilman <jeremy at taplink.co> wrote:\n>\n>> > BIP 32 already specifies how to use the first three tree levels:\n>>  M/i/j/k,\n>> > i~wallet, j~Internal/External, k~address.  The first level is actually\n>> > type-1 derived, and thus we cannot create an arbitrary number of them\n>> > without pre-computing them from the offline wallet.  So it's not \"free\"\n>> to\n>> > create new wallets unless we redefine how the levels work.\n>>\n>>  Initially I was thinking that you would share the public key and chain\n>> code\n>> from [m/i'/0] so that you can receive payments at [m/i'/0/k], for a unique\n>> value of 'i' for each receive chain.\n>>\n>> For the case of generating new receive chains from a *watch-only* wallet,\n>> as\n>> you say, the options are to either keep a cache of PubKey/ChainCode for\n>> unused [m/i'] or simply increment 'j' past 1 for an existing [m/i'/j] --\n>> the\n>> concept of 'internal/'external' and change addresses at Depth=2 don't make\n>> sense for handing out receive chains to lots of people anyway, and\n>> certainly\n>> BIP32 doesn't *require* 0 <= j <= 1.  So I think incrementing 'j' is the\n>> way\n>> to go here...\n>>\n>> The \"default\" layout of BIP32 does NOT mean that implementations should\n>> not\n>> check for transactions with j > 1. That would be a useless constraint and\n>> obviously self-limiting. It might be helpful to add to the 'Compatibility'\n>> section some minimum expectations about how a wallet should be 'probed'\n>> when\n>> imported. If you don't feel completely free to monotonically increment 'j'\n>> to your hearts content to achieve major usability benefits, then I say\n>> BIP32\n>> could use some clarifying.\n>>\n>> BTW - the spec calls for addition not multiplication now, so we should\n>> call\n>> it the 'Addend' not the 'Multiplier' :-)\n>>\n>> > Do these extra wallet chains behave as different wallets, or\n>> sub-wallets?\n>>\n>>  They could, but they certainly don't need to!  A single-wallet\n>> implementation treats this merely as an address-generation algorithm, and\n>> does not expose any hierarchy to the user interface.  The user just\n>> \u201cmagically\u201d gets the ability to send multiple payments to their contacts\n>> without immediately sacrificing their privacy\n>> (http://www.wired.com/wiredenterprise/2013/06/bitcoin_retai/). Everything\n>> goes into the same ledger, balance, coin pool, etc. Most of the code base\n>> is\n>> unaware BIP32 is even in use.\n>>\n>> While it is *possible* to support separate ledgers, balances, etc. it is\n>> certainly not required, and you get all the benefits either way.\n>>\n>> I think, since your proposal generates and receives payments into\n>> BIP32-style addresses, we both need similar underlying wallet code. The\n>> only\n>> difference is that you are passing the Kpar for [m/i'/0/k] and the\n>> *result*\n>> of CKD'((Kpar, cpar), k), and instead I proposed passing Kpar and cpar,\n>> and\n>> leaving 'k' out of it, letting the receive choose 'k'.\n>>\n>> > For instance, maybe there's a benefit to using the same parent pubkey\n>>  > across multiple services, as a form of identity.   If I don't want\n>> that, I\n>> > use your method.  If I do want that, I use my method.\n>>\n>>  I think it's a interesting idea using static public keys as a means for\n>> persistent identity and hence security from MitM. If you want a shared\n>> public key across multiple services we could just combine both ideas and\n>> get\n>> all the benefits, by making the data structure { ParentPubKey, Addend,\n>> ChainCode }:\n>>\n>>    ParentPubKey: Public key of m/i' -- 33 bytes\n>>    Addend: I[L]*G from CDK'(m/i', j) -- 33 bytes\n>>    ChainCode: I[R] from CDK'(m/i', j) -- 32 bytes\n>>\n>> All that remains secret is the ChainCode from [m/i'] -- and of course the\n>> private keys.  The ParentPubKey is a common value across multiple\n>> services,\n>> corresponding to user's identity rooted in [m/i'].  Each service gets\n>> their\n>> own 'j'.  ParentPubKey + Addend gives you the PubKey of [m/i'/j].  With\n>> the\n>> ChainCode, the receiver then can generate [m/i'/j/k] for monotonically\n>> increasing 'k'. Again, from the user perspective all transactions under\n>> [m/i'] can be presented in a single ledger, or not.\n>>\n>> Anyway, fundamentally my feedback is if you are designing for persistent\n>> long-term relationships, you could build in a mechanism for generating\n>> address chains so you don't need any further communication after the\n>> initial\n>> exchange, and it need not complicate the wallet.\n>>\n>> Thanks,\n>> --Jeremy\n>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> This SF.net email is sponsored by Windows:\n>>\n>> Build for Windows Store.\n>>\n>> http://p.sf.net/sfu/windows-dev2dev\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> This SF.net email is sponsored by Windows:\n>\n> Build for Windows Store.\n> http://p.sf.net/sfu/windows-dev2dev\n>\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing listBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n> It's a free troubleshooting tool designed for production.\n> Get down to code-level detail for bottlenecks, with <2% overhead.\n> Download for free and get started troubleshooting in minutes.\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/072e001a/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2013-08-09T20:12:52",
                "message_text_only": "That's fine.  I just want to make sure it's considered for inclusion at\nsome point, because I really hope to leverage the \"identity\" mechanism I\njust described, and it's much easier if it's part of a standard instead\nof convincing others to go around the standard with us.\n\nI have not spent much time looking at the payment protocol itself.  I\ndidn't feel like I'd have much to contribute (besides requesting a\nfeature I know isn't there).  I was planning to wait until it was\ncomplete before fully grokking and implementing it in Armory.\n\n\nOn 08/09/2013 03:58 PM, Mike Hearn wrote:\n> Payment protocol is locked down for v1 already. But did you read it?\n> It doesn't use addresses anywhere. Payments are specified in terms of\n> a list of outputs which can contain any script. Of course it could be\n> a pay-to-address script, but pay-to-address uses more bytes in the\n> chain and there isn't any typeability benefit.\n>\n> The multiplication trick for deterministic keys is a nice one and\n> worth doing, but it has to be a v2 feature by this point. It's more\n> important to get v1 widely implemented and deployed first.\n>\n>\n> On Fri, Aug 9, 2013 at 7:57 PM, Alan Reiner <etotheipi at gmail.com\n> <mailto:etotheipi at gmail.com>> wrote:\n>\n>     Guys,\n>\n>     I'd like to reiterate my previous request to support this\n>     alternate address serialization in the payment protocol.  We got\n>     caught up in the specifics of one use case, but didn't acknowledge\n>     that it's still a valid address representation that will provide\n>     value to those who wish to use it and can be safely ignored by others.\n>\n>     Current address format:   binary_to_base58( idbyte +\n>     hash160(pubkey) + checksum)\n>     Alternate format:         binary_to_base58( idbyte + parentpubkey\n>     + multiplier + checksum)\n>\n>     The receiving party will multiply the pubkey by the multiplier,\n>     and then hash it to get the 20-byte address to send to.  The idea\n>     is that you use your BIP 32 parent public key, and then you\n>     generate whatever child you want, and only send them the\n>     multiplier used (not the chaincode).  This preserves privacy, but\n>     if the recipient has your parent public key already, they can\n>     identify that address being linked to you, but cannot determine\n>     any other addresses in your wallet.\n>\n>     This form has no drawbacks to the existing address format except\n>     for being longer and requiring an extra EC multiplication by the\n>     person sending to that address.  But the advantage is that it\n>     optionally allows the sender to provide more information than\n>     currently contained in the 25-byte hash160 form.  The discussion\n>     about this got side-tracked with the use case I presented, but I\n>     believe there are plenty of other uses for this.\n>\n>     The particular use case I had in mind was that certain services\n>     could be setup (pre-arranged), say between wallet software and a\n>     business/exchange.  The exchange would like to be able to reliably\n>     send addresses to the user for deposit, without risk of MITM, or\n>     even if their own public server is compromised.  The author of\n>     wallet software pre-verifies the public key portion of the\n>     service, and either hardcodes it into the software, or hardcodes\n>     their own public key into the software and makes the service's\n>     signed public key available through query server (allowing the\n>     software author to offline-sign replacement keys, or add keys for\n>     new service providers, as needed). \n>\n>     When the user's software receives a payment address, the software\n>     can verify it belongs to that service.  You can't use dedicated\n>     chain technique, because it would either have to be exchanged with\n>     the user on first transaction which half defeats the purpose, or\n>     they give them the full public key and chaincode which allows the\n>     user to see /all /addresses ever used by the service.  Neither one\n>     is a reasonable solution.\n>\n>     This use case doesn't necessarily scale, but it doesn't have to. \n>     It simply allows service providers to skip the SSL and go right to\n>     public key exchange/verification for a few of the important\n>     services they provide access to, and will provide better security\n>     than relying on SSL/PKI.  This would simply be one, coexisting\n>     option for providing payment details in the absence (or in\n>     addition to) SSL/PKI infrastructure.\n>\n>     I'm sure there's other use cases, but it seems simple enough and\n>     non-disruptive enough that it could be supported easily for no\n>     other reason than to support that use case (which I intend to\n>     implement in Armory to help verify high-volume services).\n>\n>     -Alan\n>\n>\n>\n>\n>\n>     On 06/26/2013 11:29 AM, Alan Reiner wrote:\n>>     Although I'd still prefer my original request, I get much of what\n>>     I want from your guys' recommendation.  It complicates the wallet\n>>     design, because it requires tracking and associating a matrix of\n>>     addresses for each wallet, instead of a single linear list.  But\n>>     if this is what it's going to take then I will go along. \n>>\n>>     Right now BIP 32 defines, m/i'/j/k, where j=0 is the \"external\"\n>>     chain used for distributing addresses, and j=1 is the \"internal\"\n>>     chain for sending change.  The CONOPs (concept of operations) for\n>>     the extended wallet would be like Jeremy described:\n>>\n>>     - Chains with j>=2 would be independent address chains carved out\n>>     for individuals relationships\n>>     - Add wallet code to individually associate each j-value with a\n>>     particular identity\n>>     - Update the wallet code to pool all the addresses in all\n>>     j-chains when calculating the balance of the wallet and/or\n>>     creating transactions\n>>     - When choosing to generically \"Receive Bitcoins\", will pick the\n>>     next address from the j=0 chain\n>>     - Will have to add extra function to \"Receive Bitcoins\" button to\n>>     allow creation of new contacts/identities.\n>>     - Change will always go to the next address in j=1, no matter\n>>     which chains are used to provide inputs.\n>>     - Add code to figure out lookaheads for each alternate chain. \n>>     Not just each chain, but looking ahead a couple chains, too. \n>>     Luckily, the lookahead doesn't have to be very big for chains j>=1 \n>>     - Add an interface to display and choose the different chains in\n>>     your wallet, and export the pubkey&chaincode in some\n>>     soon-to-be-standardized format. \n>>     - Add code and interface to receive and track alternate j-chains\n>>     from other clients/users, and maintain those.  Should we try\n>>     associating incoming and outgoing chains?  What happens if they\n>>     do it wrong?  Meh...\n>>\n>>     Just as one final swipe at this idea, you can see that I gotta do\n>>     quite a bit of work to support the multi-chain idea, and adds a\n>>     little extra burden on the user to maintain the organization of\n>>     the wallet.  This would all be totally unnecessary with a simple\n>>     alternate encoding.  Granted, I think the multi-chain idea is\n>>     good, and one that I will probably implement anyway, but it seems\n>>     like overkill in terms of developer complexity, and interface\n>>     complexity to achieve something much simpler.  Developers of much\n>>     simpler/lightweight clients would probably find this prohibitive.\n>>\n>>     On another note:  I thought we weren't encouraging automatic\n>>     payments without requesting from the other party...?  It makes me\n>>     uneasy, but it sounds like group thought has converged on that\n>>     being acceptable.  I bring it up, because there are situations\n>>     where it makes sense, but it sounds unsafe for general users.  \n>>     Alice will give Bob his own chain for sending Alice money, then a\n>>     year later Bob will send money automatically to Alice not\n>>     realizing that the wallet was lost, retired or compromised.  It's\n>>     not that Bob can't ask for a new address, it's that if the\n>>     interface says \"Send Money to Alice\", that looks legit enough\n>>     that Bob may not feel it necessary to check with Alice first.  \n>>     That's more of an interface issue though.  We can add a warning\n>>     to \"check with the recipient that they still have access to\n>>     wallet 3cQ398x\", etc.   But I just know someone is going to lose\n>>     money anyway...\n>>\n>>     -Alan\n>>\n>>\n>>\n>>\n>>\n>>     On 06/20/2013 03:32 AM, Mike Hearn wrote:\n>>>     Agree with Jeremy and once the payment protocol work is further\n>>>     along I'd like to see us define an extension that lets you send\n>>>     payment requests containing public keys+chain codes, so further\n>>>     payments can be made push-style with no recipient interaction\n>>>     (e.g. for repeated billing). How apps choose to arrange their\n>>>     chains internally seems like an area for experimentation. I\n>>>     definitely want to implement HD wallets in bitcoinj to allow\n>>>     this and if that means not using the same tree structure as in\n>>>     the BIP then so be it.\n>>>\n>>>\n>>>     On Thu, Jun 20, 2013 at 5:54 AM, Jeremy Spilman\n>>>     <jeremy at taplink.co <mailto:jeremy at taplink.co>> wrote:\n>>>\n>>>         > BIP 32 already specifies how to use the first three tree\n>>>         levels:  M/i/j/k,\n>>>         > i~wallet, j~Internal/External, k~address.  The first level\n>>>         is actually\n>>>         > type-1 derived, and thus we cannot create an arbitrary\n>>>         number of them\n>>>         > without pre-computing them from the offline wallet.  So\n>>>         it's not \"free\" to\n>>>         > create new wallets unless we redefine how the levels work.\n>>>\n>>>         Initially I was thinking that you would share the public key\n>>>         and chain code\n>>>         from [m/i'/0] so that you can receive payments at\n>>>         [m/i'/0/k], for a unique\n>>>         value of 'i' for each receive chain.\n>>>\n>>>         For the case of generating new receive chains from a\n>>>         *watch-only* wallet, as\n>>>         you say, the options are to either keep a cache of\n>>>         PubKey/ChainCode for\n>>>         unused [m/i'] or simply increment 'j' past 1 for an existing\n>>>         [m/i'/j] -- the\n>>>         concept of 'internal/'external' and change addresses at\n>>>         Depth=2 don't make\n>>>         sense for handing out receive chains to lots of people\n>>>         anyway, and certainly\n>>>         BIP32 doesn't *require* 0 <= j <= 1.  So I think\n>>>         incrementing 'j' is the way\n>>>         to go here...\n>>>\n>>>         The \"default\" layout of BIP32 does NOT mean that\n>>>         implementations should not\n>>>         check for transactions with j > 1. That would be a useless\n>>>         constraint and\n>>>         obviously self-limiting. It might be helpful to add to the\n>>>         'Compatibility'\n>>>         section some minimum expectations about how a wallet should\n>>>         be 'probed' when\n>>>         imported. If you don't feel completely free to monotonically\n>>>         increment 'j'\n>>>         to your hearts content to achieve major usability benefits,\n>>>         then I say BIP32\n>>>         could use some clarifying.\n>>>\n>>>         BTW - the spec calls for addition not multiplication now, so\n>>>         we should call\n>>>         it the 'Addend' not the 'Multiplier' :-)\n>>>\n>>>         > Do these extra wallet chains behave as different wallets,\n>>>         or sub-wallets?\n>>>\n>>>         They could, but they certainly don't need to!  A single-wallet\n>>>         implementation treats this merely as an address-generation\n>>>         algorithm, and\n>>>         does not expose any hierarchy to the user interface.  The\n>>>         user just\n>>>         \u201cmagically\u201d gets the ability to send multiple payments to\n>>>         their contacts\n>>>         without immediately sacrificing their privacy\n>>>         (http://www.wired.com/wiredenterprise/2013/06/bitcoin_retai/).\n>>>         Everything\n>>>         goes into the same ledger, balance, coin pool, etc. Most of\n>>>         the code base is\n>>>         unaware BIP32 is even in use.\n>>>\n>>>         While it is *possible* to support separate ledgers,\n>>>         balances, etc. it is\n>>>         certainly not required, and you get all the benefits either way.\n>>>\n>>>         I think, since your proposal generates and receives payments\n>>>         into\n>>>         BIP32-style addresses, we both need similar underlying\n>>>         wallet code. The only\n>>>         difference is that you are passing the Kpar for [m/i'/0/k]\n>>>         and the *result*\n>>>         of CKD'((Kpar, cpar), k), and instead I proposed passing\n>>>         Kpar and cpar, and\n>>>         leaving 'k' out of it, letting the receive choose 'k'.\n>>>\n>>>         > For instance, maybe there's a benefit to using the same\n>>>         parent pubkey\n>>>         > across multiple services, as a form of identity.   If I\n>>>         don't want that, I\n>>>         > use your method.  If I do want that, I use my method.\n>>>\n>>>         I think it's a interesting idea using static public keys as\n>>>         a means for\n>>>         persistent identity and hence security from MitM. If you\n>>>         want a shared\n>>>         public key across multiple services we could just combine\n>>>         both ideas and get\n>>>         all the benefits, by making the data structure {\n>>>         ParentPubKey, Addend,\n>>>         ChainCode }:\n>>>\n>>>            ParentPubKey: Public key of m/i' -- 33 bytes\n>>>            Addend: I[L]*G from CDK'(m/i', j) -- 33 bytes\n>>>            ChainCode: I[R] from CDK'(m/i', j) -- 32 bytes\n>>>\n>>>         All that remains secret is the ChainCode from [m/i'] -- and\n>>>         of course the\n>>>         private keys.  The ParentPubKey is a common value across\n>>>         multiple services,\n>>>         corresponding to user's identity rooted in [m/i'].  Each\n>>>         service gets their\n>>>         own 'j'.  ParentPubKey + Addend gives you the PubKey of\n>>>         [m/i'/j].  With the\n>>>         ChainCode, the receiver then can generate [m/i'/j/k] for\n>>>         monotonically\n>>>         increasing 'k'. Again, from the user perspective all\n>>>         transactions under\n>>>         [m/i'] can be presented in a single ledger, or not.\n>>>\n>>>         Anyway, fundamentally my feedback is if you are designing\n>>>         for persistent\n>>>         long-term relationships, you could build in a mechanism for\n>>>         generating\n>>>         address chains so you don't need any further communication\n>>>         after the initial\n>>>         exchange, and it need not complicate the wallet.\n>>>\n>>>         Thanks,\n>>>         --Jeremy\n>>>\n>>>\n>>>\n>>>         ------------------------------------------------------------------------------\n>>>         This SF.net email is sponsored by Windows:\n>>>\n>>>         Build for Windows Store.\n>>>\n>>>         http://p.sf.net/sfu/windows-dev2dev\n>>>         _______________________________________________\n>>>         Bitcoin-development mailing list\n>>>         Bitcoin-development at lists.sourceforge.net\n>>>         <mailto:Bitcoin-development at lists.sourceforge.net>\n>>>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>>\n>>>\n>>>     ------------------------------------------------------------------------------\n>>>     This SF.net email is sponsored by Windows:\n>>>\n>>>     Build for Windows Store.\n>>>\n>>>     http://p.sf.net/sfu/windows-dev2dev\n>>>\n>>>\n>>>     _______________________________________________\n>>>     Bitcoin-development mailing list\n>>>     Bitcoin-development at lists.sourceforge.net <mailto:Bitcoin-development at lists.sourceforge.net>\n>>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>     ------------------------------------------------------------------------------\n>     Get 100% visibility into Java/.NET code with AppDynamics Lite!\n>     It's a free troubleshooting tool designed for production.\n>     Get down to code-level detail for bottlenecks, with <2% overhead.\n>     Download for free and get started troubleshooting in minutes.\n>     http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/4f37a4b7/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-08-09T21:51:00",
                "message_text_only": "As Mike said: the payment protocol doesn't use bitcoin addresses under\nthe covers.\n\nIt is also designed to be easily extensible, so if you want the server\nto send the wallet software a public key and multiplier, then add\n\"publickey\" and \"multiplier\" optional fields to the PaymentDetails (or\nmaybe Output) message.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-09T20:35:07",
                "message_text_only": "It's BIP specified and implemented in Bitcoin-Qt so now is the time to\nstart :) I'm hoping that most wallets can announce support near\nsimultaneously ....\n\n\nOn Fri, Aug 9, 2013 at 10:12 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n\n>  That's fine.  I just want to make sure it's considered for inclusion at\n> some point, because I really hope to leverage the \"identity\" mechanism I\n> just described, and it's much easier if it's part of a standard instead of\n> convincing others to go around the standard with us.\n>\n> I have not spent much time looking at the payment protocol itself.  I\n> didn't feel like I'd have much to contribute (besides requesting a feature\n> I know isn't there).  I was planning to wait until it was complete before\n> fully grokking and implementing it in Armory.\n>\n>\n>\n> On 08/09/2013 03:58 PM, Mike Hearn wrote:\n>\n> Payment protocol is locked down for v1 already. But did you read it? It\n> doesn't use addresses anywhere. Payments are specified in terms of a list\n> of outputs which can contain any script. Of course it could be a\n> pay-to-address script, but pay-to-address uses more bytes in the chain and\n> there isn't any typeability benefit.\n>\n>  The multiplication trick for deterministic keys is a nice one and worth\n> doing, but it has to be a v2 feature by this point. It's more important to\n> get v1 widely implemented and deployed first.\n>\n>\n> On Fri, Aug 9, 2013 at 7:57 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n>\n>>  Guys,\n>>\n>> I'd like to reiterate my previous request to support this alternate\n>> address serialization in the payment protocol.  We got caught up in the\n>> specifics of one use case, but didn't acknowledge that it's still a valid\n>> address representation that will provide value to those who wish to use it\n>> and can be safely ignored by others.\n>>\n>> Current address format:   binary_to_base58( idbyte + hash160(pubkey) +\n>> checksum)\n>> Alternate format:         binary_to_base58( idbyte + parentpubkey +\n>> multiplier + checksum)\n>>\n>> The receiving party will multiply the pubkey by the multiplier, and then\n>> hash it to get the 20-byte address to send to.  The idea is that you use\n>> your BIP 32 parent public key, and then you generate whatever child you\n>> want, and only send them the multiplier used (not the chaincode).  This\n>> preserves privacy, but if the recipient has your parent public key already,\n>> they can identify that address being linked to you, but cannot determine\n>> any other addresses in your wallet.\n>>\n>> This form has no drawbacks to the existing address format except for\n>> being longer and requiring an extra EC multiplication by the person sending\n>> to that address.  But the advantage is that it optionally allows the sender\n>> to provide more information than currently contained in the 25-byte hash160\n>> form.  The discussion about this got side-tracked with the use case I\n>> presented, but I believe there are plenty of other uses for this.\n>>\n>> The particular use case I had in mind was that certain services could be\n>> setup (pre-arranged), say between wallet software and a business/exchange.\n>> The exchange would like to be able to reliably send addresses to the user\n>> for deposit, without risk of MITM, or even if their own public server is\n>> compromised.  The author of wallet software pre-verifies the public key\n>> portion of the service, and either hardcodes it into the software, or\n>> hardcodes their own public key into the software and makes the service's\n>> signed public key available through query server (allowing the software\n>> author to offline-sign replacement keys, or add keys for new service\n>> providers, as needed).\n>>\n>> When the user's software receives a payment address, the software can\n>> verify it belongs to that service.  You can't use dedicated chain\n>> technique, because it would either have to be exchanged with the user on\n>> first transaction which half defeats the purpose, or they give them the\n>> full public key and chaincode which allows the user to see *all *addresses\n>> ever used by the service.  Neither one is a reasonable solution.\n>>\n>> This use case doesn't necessarily scale, but it doesn't have to.  It\n>> simply allows service providers to skip the SSL and go right to public key\n>> exchange/verification for a few of the important services they provide\n>> access to, and will provide better security than relying on SSL/PKI.  This\n>> would simply be one, coexisting option for providing payment details in the\n>> absence (or in addition to) SSL/PKI infrastructure.\n>>\n>> I'm sure there's other use cases, but it seems simple enough and\n>> non-disruptive enough that it could be supported easily for no other reason\n>> than to support that use case (which I intend to implement in Armory to\n>> help verify high-volume services).\n>>\n>> -Alan\n>>\n>>\n>>\n>>\n>>\n>> On 06/26/2013 11:29 AM, Alan Reiner wrote:\n>>\n>> Although I'd still prefer my original request, I get much of what I want\n>> from your guys' recommendation.  It complicates the wallet design, because\n>> it requires tracking and associating a matrix of addresses for each wallet,\n>> instead of a single linear list.  But if this is what it's going to take\n>> then I will go along.\n>>\n>> Right now BIP 32 defines, m/i'/j/k, where j=0 is the \"external\" chain\n>> used for distributing addresses, and j=1 is the \"internal\" chain for\n>> sending change.  The CONOPs (concept of operations) for the extended wallet\n>> would be like Jeremy described:\n>>\n>> - Chains with j>=2 would be independent address chains carved out for\n>> individuals relationships\n>> - Add wallet code to individually associate each j-value with a\n>> particular identity\n>> - Update the wallet code to pool all the addresses in all j-chains when\n>> calculating the balance of the wallet and/or creating transactions\n>> - When choosing to generically \"Receive Bitcoins\", will pick the next\n>> address from the j=0 chain\n>> - Will have to add extra function to \"Receive Bitcoins\" button to allow\n>> creation of new contacts/identities.\n>> - Change will always go to the next address in j=1, no matter which\n>> chains are used to provide inputs.\n>> - Add code to figure out lookaheads for each alternate chain.  Not just\n>> each chain, but looking ahead a couple chains, too.  Luckily, the lookahead\n>> doesn't have to be very big for chains j>=1\n>> - Add an interface to display and choose the different chains in your\n>> wallet, and export the pubkey&chaincode in some soon-to-be-standardized\n>> format.\n>> - Add code and interface to receive and track alternate j-chains from\n>> other clients/users, and maintain those.  Should we try associating\n>> incoming and outgoing chains?  What happens if they do it wrong?  Meh...\n>>\n>> Just as one final swipe at this idea, you can see that I gotta do quite a\n>> bit of work to support the multi-chain idea, and adds a little extra burden\n>> on the user to maintain the organization of the wallet.  This would all be\n>> totally unnecessary with a simple alternate encoding.  Granted, I think the\n>> multi-chain idea is good, and one that I will probably implement anyway,\n>> but it seems like overkill in terms of developer complexity, and interface\n>> complexity to achieve something much simpler.  Developers of much\n>> simpler/lightweight clients would probably find this prohibitive.\n>>\n>> On another note:  I thought we weren't encouraging automatic payments\n>> without requesting from the other party...?  It makes me uneasy, but it\n>> sounds like group thought has converged on that being acceptable.  I bring\n>> it up, because there are situations where it makes sense, but it sounds\n>> unsafe for general users.   Alice will give Bob his own chain for sending\n>> Alice money, then a year later Bob will send money automatically to Alice\n>> not realizing that the wallet was lost, retired or compromised.  It's not\n>> that Bob can't ask for a new address, it's that if the interface says \"Send\n>> Money to Alice\", that looks legit enough that Bob may not feel it necessary\n>> to check with Alice first.   That's more of an interface issue though.  We\n>> can add a warning to \"check with the recipient that they still have access\n>> to wallet 3cQ398x\", etc.   But I just know someone is going to lose money\n>> anyway...\n>>\n>> -Alan\n>>\n>>\n>>\n>>\n>>\n>> On 06/20/2013 03:32 AM, Mike Hearn wrote:\n>>\n>> Agree with Jeremy and once the payment protocol work is further along I'd\n>> like to see us define an extension that lets you send payment requests\n>> containing public keys+chain codes, so further payments can be made\n>> push-style with no recipient interaction (e.g. for repeated billing). How\n>> apps choose to arrange their chains internally seems like an area for\n>> experimentation. I definitely want to implement HD wallets in bitcoinj to\n>> allow this and if that means not using the same tree structure as in the\n>> BIP then so be it.\n>>\n>>\n>> On Thu, Jun 20, 2013 at 5:54 AM, Jeremy Spilman <jeremy at taplink.co>wrote:\n>>\n>>> > BIP 32 already specifies how to use the first three tree levels:\n>>>  M/i/j/k,\n>>> > i~wallet, j~Internal/External, k~address.  The first level is actually\n>>> > type-1 derived, and thus we cannot create an arbitrary number of them\n>>> > without pre-computing them from the offline wallet.  So it's not\n>>> \"free\" to\n>>> > create new wallets unless we redefine how the levels work.\n>>>\n>>>  Initially I was thinking that you would share the public key and chain\n>>> code\n>>> from [m/i'/0] so that you can receive payments at [m/i'/0/k], for a\n>>> unique\n>>> value of 'i' for each receive chain.\n>>>\n>>> For the case of generating new receive chains from a *watch-only*\n>>> wallet, as\n>>> you say, the options are to either keep a cache of PubKey/ChainCode for\n>>> unused [m/i'] or simply increment 'j' past 1 for an existing [m/i'/j] --\n>>> the\n>>> concept of 'internal/'external' and change addresses at Depth=2 don't\n>>> make\n>>> sense for handing out receive chains to lots of people anyway, and\n>>> certainly\n>>> BIP32 doesn't *require* 0 <= j <= 1.  So I think incrementing 'j' is the\n>>> way\n>>> to go here...\n>>>\n>>> The \"default\" layout of BIP32 does NOT mean that implementations should\n>>> not\n>>> check for transactions with j > 1. That would be a useless constraint and\n>>> obviously self-limiting. It might be helpful to add to the\n>>> 'Compatibility'\n>>> section some minimum expectations about how a wallet should be 'probed'\n>>> when\n>>> imported. If you don't feel completely free to monotonically increment\n>>> 'j'\n>>> to your hearts content to achieve major usability benefits, then I say\n>>> BIP32\n>>> could use some clarifying.\n>>>\n>>> BTW - the spec calls for addition not multiplication now, so we should\n>>> call\n>>> it the 'Addend' not the 'Multiplier' :-)\n>>>\n>>> > Do these extra wallet chains behave as different wallets, or\n>>> sub-wallets?\n>>>\n>>>  They could, but they certainly don't need to!  A single-wallet\n>>> implementation treats this merely as an address-generation algorithm, and\n>>> does not expose any hierarchy to the user interface.  The user just\n>>> \u201cmagically\u201d gets the ability to send multiple payments to their contacts\n>>> without immediately sacrificing their privacy\n>>> (http://www.wired.com/wiredenterprise/2013/06/bitcoin_retai/).\n>>> Everything\n>>> goes into the same ledger, balance, coin pool, etc. Most of the code\n>>> base is\n>>> unaware BIP32 is even in use.\n>>>\n>>> While it is *possible* to support separate ledgers, balances, etc. it is\n>>> certainly not required, and you get all the benefits either way.\n>>>\n>>> I think, since your proposal generates and receives payments into\n>>> BIP32-style addresses, we both need similar underlying wallet code. The\n>>> only\n>>> difference is that you are passing the Kpar for [m/i'/0/k] and the\n>>> *result*\n>>> of CKD'((Kpar, cpar), k), and instead I proposed passing Kpar and cpar,\n>>> and\n>>> leaving 'k' out of it, letting the receive choose 'k'.\n>>>\n>>> > For instance, maybe there's a benefit to using the same parent pubkey\n>>>  > across multiple services, as a form of identity.   If I don't want\n>>> that, I\n>>> > use your method.  If I do want that, I use my method.\n>>>\n>>>  I think it's a interesting idea using static public keys as a means for\n>>> persistent identity and hence security from MitM. If you want a shared\n>>> public key across multiple services we could just combine both ideas and\n>>> get\n>>> all the benefits, by making the data structure { ParentPubKey, Addend,\n>>> ChainCode }:\n>>>\n>>>    ParentPubKey: Public key of m/i' -- 33 bytes\n>>>    Addend: I[L]*G from CDK'(m/i', j) -- 33 bytes\n>>>    ChainCode: I[R] from CDK'(m/i', j) -- 32 bytes\n>>>\n>>> All that remains secret is the ChainCode from [m/i'] -- and of course the\n>>> private keys.  The ParentPubKey is a common value across multiple\n>>> services,\n>>> corresponding to user's identity rooted in [m/i'].  Each service gets\n>>> their\n>>> own 'j'.  ParentPubKey + Addend gives you the PubKey of [m/i'/j].  With\n>>> the\n>>> ChainCode, the receiver then can generate [m/i'/j/k] for monotonically\n>>> increasing 'k'. Again, from the user perspective all transactions under\n>>> [m/i'] can be presented in a single ledger, or not.\n>>>\n>>> Anyway, fundamentally my feedback is if you are designing for persistent\n>>> long-term relationships, you could build in a mechanism for generating\n>>> address chains so you don't need any further communication after the\n>>> initial\n>>> exchange, and it need not complicate the wallet.\n>>>\n>>> Thanks,\n>>> --Jeremy\n>>>\n>>>\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> This SF.net email is sponsored by Windows:\n>>>\n>>> Build for Windows Store.\n>>>\n>>> http://p.sf.net/sfu/windows-dev2dev\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> This SF.net email is sponsored by Windows:\n>>\n>> Build for Windows Store.\n>> http://p.sf.net/sfu/windows-dev2dev\n>>\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing listBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n>> It's a free troubleshooting tool designed for production.\n>> Get down to code-level detail for bottlenecks, with <2% overhead.\n>> Download for free and get started troubleshooting in minutes.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/7674fec9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Optional \"wallet-linkable\" address format (Re-request)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Alan Reiner",
                "Gavin Andresen"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 59666
        }
    },
    {
        "title": "[Bitcoin-development] BitMail.sf.net - encrypted p2p email",
        "thread_messages": [
            {
                "author": "Randolph D.",
                "date": "2013-08-09T19:01:42",
                "message_text_only": "anyone tested the secure encrypted p2p email: http://bitmail.sf.net\n\nSVN here:\n\nsvn checkout svn://svn.code.sf.net/p/spot-on/code/ spot-on-code\n\nhttp://sourceforge.net/p/spot-on/code/commit_browser\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130809/91a1cdbb/attachment.html>"
            },
            {
                "author": "Wendell",
                "date": "2013-08-09T21:23:40",
                "message_text_only": "Jesus, please stop this. :(\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n\nOn Aug 9, 2013, at 9:01 PM, Randolph D. wrote:\n\n> anyone tested the secure encrypted p2p email: http://bitmail.sf.net\n>  \n> SVN here:\n> \n> svn checkout svn://svn.code.sf.net/p/spot-on/code/ spot-on-code\n> \n> http://sourceforge.net/p/spot-on/code/commit_browser"
            },
            {
                "author": "The Doctor",
                "date": "2013-08-13T20:15:26",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 08/09/2013 03:01 PM, Randolph D. wrote:\n> anyone tested the secure encrypted p2p email:\n> http://bitmail.sf.net\n\nNot lately.  It's pretty CPU and network intensive, which may or may\nnot be detrimental to your use case.\n\nI keep meaning to read through these security analyses of Bitmessage\nbut I'm a little short on compute cycles at the moment:\n\nhttps://bitmessage.org/forum/index.php?topic=1666.0\n\nhttp://www.reddit.com/r/bitmessage/comments/1fwyx7/a_security_analysis_of_bitmessage/\n\n- -- \nThe Doctor [412/724/301/703] [ZS]\nDeveloper, Project Byzantium: http://project-byzantium.org/\n\nPGP: 0x807B17C1 / 7960 1CDC 85C9 0B63 8D9F  DD89 3BD8 FF2B 807B 17C1\nWWW: https://drwho.virtadpt.net/\n\nIf at first you don't succeed, call for an airstrike.\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.20 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niEYEARECAAYFAlIKk94ACgkQO9j/K4B7F8FMsgCgkuM56fI4hVT9H1ueZSFwl9Kk\nqRoAoJkKZf4afKgVQKtDO6zRd/Auc/RV\n=zwmX\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Randolph D.",
                "date": "2013-08-13T20:46:38",
                "message_text_only": "you mixed up BitMail with BitMessage, this is different:\nhttp://bitmail.sf.net\n\n2013/8/13 The Doctor <drwho at virtadpt.net>\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> On 08/09/2013 03:01 PM, Randolph D. wrote:\n> > anyone tested the secure encrypted p2p email:\n> > http://bitmail.sf.net\n>\n> Not lately.  It's pretty CPU and network intensive, which may or may\n> not be detrimental to your use case.\n>\n> I keep meaning to read through these security analyses of Bitmessage\n> but I'm a little short on compute cycles at the moment:\n>\n> https://bitmessage.org/forum/index.php?topic=1666.0\n>\n>\n> http://www.reddit.com/r/bitmessage/comments/1fwyx7/a_security_analysis_of_bitmessage/\n>\n> - --\n> The Doctor [412/724/301/703] [ZS]\n> Developer, Project Byzantium: http://project-byzantium.org/\n>\n> PGP: 0x807B17C1 / 7960 1CDC 85C9 0B63 8D9F  DD89 3BD8 FF2B 807B 17C1\n> WWW: https://drwho.virtadpt.net/\n>\n> If at first you don't succeed, call for an airstrike.\n>\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v2.0.20 (GNU/Linux)\n> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n>\n> iEYEARECAAYFAlIKk94ACgkQO9j/K4B7F8FMsgCgkuM56fI4hVT9H1ueZSFwl9Kk\n> qRoAoJkKZf4afKgVQKtDO6zRd/Auc/RV\n> =zwmX\n> -----END PGP SIGNATURE-----\n>\n>\n> ------------------------------------------------------------------------------\n> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n> It's a free troubleshooting tool designed for production.\n> Get down to code-level detail for bottlenecks, with <2% overhead.\n> Download for free and get started troubleshooting in minutes.\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130813/f0ef3f38/attachment.html>"
            },
            {
                "author": "The Doctor",
                "date": "2013-08-14T17:02:47",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 08/13/2013 04:46 PM, Randolph D. wrote:\n> you mixed up BitMail with BitMessage, this is different: \n> http://bitmail.sf.net\n\nOops!  My bad.\n\n- -- \nThe Doctor [412/724/301/703] [ZS]\nDeveloper, Project Byzantium: http://project-byzantium.org/\n\nPGP: 0x807B17C1 / 7960 1CDC 85C9 0B63 8D9F  DD89 3BD8 FF2B 807B 17C1\nWWW: https://drwho.virtadpt.net/\n\n\"This time we're using four times the Kevlar.\"\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.20 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niEYEARECAAYFAlILuDcACgkQO9j/K4B7F8HDBQCfR0F9SmCBCuFN1cAg/FExzicj\nwfMAn0Fob9raimlp0/JQLi9y9hOyIwpG\n=0vIZ\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "BitMail.sf.net - encrypted p2p email",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "The Doctor",
                "Randolph D.",
                "Wendell"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 4540
        }
    },
    {
        "title": "[Bitcoin-development] HTTP REST API for bitcoind",
        "thread_messages": [
            {
                "author": "Rune Kj\u00e6r Svendsen",
                "date": "2013-08-10T20:30:46",
                "message_text_only": "I think this is a useful feature, but I din't see why it should be a part\nof bitcoind. I've created a simple HTTP REST wrapper around bitcoind's RPC\ninterface in Python:\nhttps://github.com/runeksvendsen/btchttp/blob/master/btchttp.py\n\nIt simply runs a HTTP server that translates HTTP GET requests into the\nrelevant RPC request, and responds to the GET request with the relevant\ndata.\n\n/Rune\n\nOn Tue, Jul 23, 2013 at 9:36 PM, Mark Friedenbach <mark at monetize.io> wrote:\n\n>\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n>\n> On 7/23/13 3:29 AM, Andreas Schildbach wrote:\n> >\n> > Yes, I understand that. For this reason, I would vote for adding the\n> > usual HTTP authentication/SSL stuff to the REST API. That way, SPV users\n> > can decide to run their own instance of the API (providing the needed\n> > resources themselves).\n> >\n> > Or, a trusted party can set up a server. For example, I would be willing\n> > to set it up for users of Bitcoin Wallet. I don't expect shitloads of\n> > paper wallets sweeps for the forseeable future.\n> >\n> >\n> Anyone who wants HTTP authentication or TLS can wrap it with nginx, or\n> something similar. In the process they could put appropriate\n> restrictions in place on incoming requests, and the onus would be on\n> them, not us to keep it secure.\n>\n> Mark\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG/MacGPG2 v2.0.19 (Darwin)\n> Comment: GPGTools - http://gpgtools.org\n> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n>\n> iQIcBAEBAgAGBQJR7ttWAAoJEAdzVfsmodw4UmIP/36lK2TDc7mLTT8rbflJhl3v\n> TL4CFKhXj6OuzG7tyino3Djs4EQnyk+CbpfOmJ8kYr29GPaZttuDJhYXtJqQBQCi\n> DPq79ktudHnVMLPirEs7dUrLo+TAqhYX+8Sj+eTlW+p6YZg3JbkOAIPJG7597OK4\n> zzU8Oxr0XKJFfGscKfkPThxJboNqzJYGl3otHUMXM4HsbIRYmrx4QSr8y7dsVgTd\n> YZnD4bJO+eY4ZPzCcFdkPD/8bXQyKC5nPOH8/79lARNLESwB4OW79uf9q86EuH2O\n> jZQ1qwpRNHblrNWS1/U2E4+7hEidvgZBwQhj+HbWgKiPWh4Df1lEXq6bLQQwdn6/\n> b+jfiwg7xpb7eB2M4gPZ0uF/1TIcGJN3+LWEULFNTT/vsjyD/UU63ahZ1kVv7X0m\n> W1NrbKjXxDbip+x3N7HLIu3zqAAaa0ele7OysyFCL6ZlwwafwJiEZZgHn2Iw7I1L\n> S7lYBbFoLfXlOMVXNaKHPEV5gQEveMROJVBtnWkqShPQM0N/+Z+TXZes37up0GVo\n> d7ptPfNbUNDTFc8Jj3+5rIyy3dUvSyMJlHZhsLmtCUnbQ867ZOgeUS52a8XQ+nJY\n> 8IsShLfLk6fRWmHrwo9lzZQ/TbbUNyoUje0Ns6iL7G3IZwDqJH3kAGb/bkj/piDu\n> tPNcN8bkYeNobTFIH+o4\n> =jV80\n> -----END PGP SIGNATURE-----\n>\n>\n>\n> ------------------------------------------------------------------------------\n> See everything from the browser to the database with AppDynamics\n> Get end-to-end visibility with application monitoring from AppDynamics\n> Isolate bottlenecks and diagnose root cause in seconds.\n> Start your free trial of AppDynamics Pro today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48808831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130810/38b4ec87/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "HTTP REST API for bitcoind",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Rune Kj\u00e6r Svendsen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3076
        }
    },
    {
        "title": "[Bitcoin-development] Android key rotation",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2013-08-11T16:28:13",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nHello,\n\nI hope you are having a pleasant weekend. A few days ago we learned\nthat the Android implementation of the Java SecureRandom class\ncontains multiple severe vulnerabilities. As a result all private keys\ngenerated on Android phones/tablets are weak and some signatures have\nbeen observed to have colliding R values, allowing the private key to\nbe solved and money to be stolen.\n\nThe public security alert is here:\n\nhttp://bitcoin.org/en/alert/2013-08-11-android\n\nI will shortly post in the bitcointalk forums as well.\n\nAn update for the Bitcoin Wallet app has been prepared that bypasses\nthe system SecureRandom implementation and reads directly from\n/dev/urandom instead, which is believed to be functioning correctly.\nAll unspent outputs in the wallet are then respent to this new key.\n\nThe process is automatic and does not involve user intervention.\nAndreas can control the process via a percentage throttle, which we\nwill use to slow things down if the memory pool load gets too high.\n\nA fixed APK is available here:\n\nhttps://code.google.com/p/bitcoin-wallet/downloads/detail?name=bitcoin-wallet-3.15-beta.apk&can=2&q=\n\nAndreas plans to release this to beta either today or tomorrow. Once\nsome reasonable population of users has completed testing the\nautomated re-keying process, it will be released via the Play Store.\nAll users will get a notification informing them of the new version\nand some will be upgraded automatically.\n\nOther wallet maintainers have also been notified and are working on\nsimilar updates.\n\nthanks\n- -mike\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.20 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBCgAGBQJSB7udAAoJEPLkhhyZiIFvv7QIAJQf5AqpNdo0hWSubvcXu6H9\nQoYJllZRb3KhjDEaFU5xinvrN3co6mqRqctbhP2JplrwebEczd8GN4jJZyn90oES\n7oydQsnYGyO1+W64dnMjOXSCsvIerAv1TuYDIeRmVFlWzXEAbEK3QTB7G/qciF5x\nYNh5M94HYFTCTzDwc3oCHJQUzbl/X/BwPS8TITmEZ3gfYDi+hoyUmHlZukjtFZf+\n/ukDqzWPswscUseuXlUqfu7EMbV0cFO2niCwuTsmkvxkjsz35bPD1LxMYmm1qEjw\nFeKINcws74okK7pnAqsHYIiP0d64zOwfQFJqfFyek18f0LSqYf32h3h1F8GbmJU=\n=bZtl\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Andreas M. Antonopoulos",
                "date": "2013-08-11T18:21:28",
                "message_text_only": "Who would be the best person to interview who could explain this issue and\nworkaround/resolution?\n\nI'd like to get an audio segment for the Let's Talk Bitcoin show ASAP, as\nthis will be a big concern for many users who will not know what to do or\nbe able to understand the problem.\n\nAny volunteers for a 15 min audio interview in the next 2 days?\n\n\nOn Sun, Aug 11, 2013 at 9:28 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA512\n>\n> Hello,\n>\n> I hope you are having a pleasant weekend. A few days ago we learned\n> that the Android implementation of the Java SecureRandom class\n> contains multiple severe vulnerabilities. As a result all private keys\n> generated on Android phones/tablets are weak and some signatures have\n> been observed to have colliding R values, allowing the private key to\n> be solved and money to be stolen.\n>\n> The public security alert is here:\n>\n> http://bitcoin.org/en/alert/2013-08-11-android\n>\n> I will shortly post in the bitcointalk forums as well.\n>\n> An update for the Bitcoin Wallet app has been prepared that bypasses\n> the system SecureRandom implementation and reads directly from\n> /dev/urandom instead, which is believed to be functioning correctly.\n> All unspent outputs in the wallet are then respent to this new key.\n>\n> The process is automatic and does not involve user intervention.\n> Andreas can control the process via a percentage throttle, which we\n> will use to slow things down if the memory pool load gets too high.\n>\n> A fixed APK is available here:\n>\n>\n> https://code.google.com/p/bitcoin-wallet/downloads/detail?name=bitcoin-wallet-3.15-beta.apk&can=2&q=\n>\n> Andreas plans to release this to beta either today or tomorrow. Once\n> some reasonable population of users has completed testing the\n> automated re-keying process, it will be released via the Play Store.\n> All users will get a notification informing them of the new version\n> and some will be upgraded automatically.\n>\n> Other wallet maintainers have also been notified and are working on\n> similar updates.\n>\n> thanks\n> - -mike\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG/MacGPG2 v2.0.20 (Darwin)\n> Comment: GPGTools - http://gpgtools.org\n> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n>\n> iQEcBAEBCgAGBQJSB7udAAoJEPLkhhyZiIFvv7QIAJQf5AqpNdo0hWSubvcXu6H9\n> QoYJllZRb3KhjDEaFU5xinvrN3co6mqRqctbhP2JplrwebEczd8GN4jJZyn90oES\n> 7oydQsnYGyO1+W64dnMjOXSCsvIerAv1TuYDIeRmVFlWzXEAbEK3QTB7G/qciF5x\n> YNh5M94HYFTCTzDwc3oCHJQUzbl/X/BwPS8TITmEZ3gfYDi+hoyUmHlZukjtFZf+\n> /ukDqzWPswscUseuXlUqfu7EMbV0cFO2niCwuTsmkvxkjsz35bPD1LxMYmm1qEjw\n> FeKINcws74okK7pnAqsHYIiP0d64zOwfQFJqfFyek18f0LSqYf32h3h1F8GbmJU=\n> =bZtl\n> -----END PGP SIGNATURE-----\n>\n>\n> ------------------------------------------------------------------------------\n> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n> It's a free troubleshooting tool designed for production.\n> Get down to code-level detail for bottlenecks, with <2% overhead.\n> Download for free and get started troubleshooting in minutes.\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130811/8166d4c1/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Android key rotation",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Andreas M. Antonopoulos"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 5705
        }
    },
    {
        "title": "[Bitcoin-development] bitcoinj 0.10",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2013-08-14T12:26:27",
                "message_text_only": "Hello,\n\nI'm pleased to announce version 0.10 of bitcoinj, a Java library for\nwriting Bitcoin applications. BitcoinJ has been used to create everything\nfrom end-user wallet apps to network crawlers to SatoshiDice.\n\nTo learn how to obtain bitcoinj 0.10, please see the following page:\n\n   https://code.google.com/p/bitcoinj/wiki/UsingMaven\n\nThe v0.10 release is signed by Andreas Schildbach's GPG key. The git hash\nof the release is 777e6781d789. This paragraph is signed by the same\nBitcoin key as with previous releases (check their release announcements to\nestablish continuity).\n\nSignature: H9Nl7FPnmrUOmjhUZ0+xB4YW3q5F5gIkGdvllsDWmWYvOkNQHAE9jZE0I/qE1VfLPeMV+Rzo7geTB43uDSFSMek=\n\n*New in this release*\n\n   - An implementation of *micropayment channels* was added. There have\n   been many bugfixes and improvements since the first announcement. This\n   feature allows you to set up a 1:1 payment relationship with a remote\n   server and after a short setup process send very tiny payments, very\n   rapidly. It's suitable for metered billing applications. An article,\n   \"Working with micropayments\" explains how to use it. This work was a joint\n   effort between Matt and myself.\n   - A simple sublibrary has been added that provides async IO based\n   client/server classes that transmit length prefixed protocol buffers.\n   - Thanks to Matija Mazi, some classes have been added that implement *the\n   BIP 32 deterministic wallet algorithm*. Note that these classes are not\n   yet used elsewhere in the system and full deterministic wallet support is\n   therefore not available, however, a low level API is available for\n   experimentation. That API is very likely to change in future releases so\n   don't get too attached to it.\n   - Thanks to Gary Rowe, we have integrated *a new Maven plugin* that\n   checks the SHA1 hashes of downloaded dependencies against a hard-coded\n   list. This means that even if an upstream Maven repository or developer\n   were to be compromised, library dependencies could not be switched out for\n   corrupted versions without someone noticing. For 0.10 the dependency hashes\n   were just initialised based on what was already downloaded. In future,\n   reproducible builds of upstream dependencies and auditing of changes would\n   provide better security. You can and should use Gary's\nplugin<https://github.com/gary-rowe/BitcoinjEnforcerRules> in\n   your own projects to defend against a possible compromise of the bitcoinj\n   repository.\n   - *Callback handling* has been much improved. Each event listener can\n   have an Executor specified which takes responsibility for running the\n   callback. If you don't specify one they run by default on a single\n   background thread, the \"user thread\", instead of the origin framework\n   threads. This means your callbacks no longer need to be thread safe as\n   they're always run serially. You can also change the default executor if\n   you would like to control the thread on which callbacks run, for example to\n   marshal them into your GUI toolkit thread automatically. This fixes some of\n   the most painful parts of the pre-0.10 API, for instance that transaction\n   confidence listeners were not allowed to re-enter the library.\n   - *Exception handling* has also improved. You can assign a global\n   Thread.UncaughtExceptionHandler which receives any exceptions thrown on\n   the user thread (i.e. by your own event listeners), as well as any internal\n   exceptions thrown by network threads (like inability to parse a message\n   sent by a remote peer). Because your listeners now run on a separate thread\n   by default, you can no longer accidentally cause internal data corruption\n   or prevent other callbacks from running by leaking exceptions out of your\n   callbacks; a subtle knife-edge in the previous API.\n   - Support for *automatic wallet key rotation* has been added.\n   - We now require Bloom-capable (0.8+) peers by default and will\n   disconnect from older nodes. This avoids accidental bandwidth saturation on\n   mobile devices.\n   - The wallet now accepts timelocked transactions if it created them\n   itself.\n   - The wallet can be told to empty itself out, in which case the fee will\n   be subtracted from the total amount instead of added. This simplifies the\n   common case of wanting to send your entire balance whilst still including a\n   fee.\n   - Some JNI peers for event listeners were added. Auto-generated JNI\n   bindings are experimental and not yet merged in to the mainline codebase:\n   for now they are available as part of a separate project on github. This\n   work allows you to access the bitcoinj API using relatively natural looking\n   C++ code and an embedded JVM.\n   - You can now register custom PeerFilterProvider implementors to add\n   things to Bloom filters that aren't necessarily in wallets.\n   - We have begun adding nullity annotations to the API. Combined with a\n   strong static analysis engine like FindBugs or the IntelliJ Inspector, you\n   can find cases where you aren't handling possible null pointers. Note that\n   you should configure your static analysis system to understand the Guava\n   Preconditions assertions, as otherwise you will get false positives.\n   - You can now control how much information Wallet toString() dumps\n   contain more precisely. Extensions can contribute to a wallets debug dump\n   as well, and transaction data is now optional.\n   - Documentation: The getting started tutorial and PingService example\n   were rewritten. New articles were added that cover optimising chain sync\n   and using the library from non-Java languages. Existing articles were also\n   extended and refreshed.\n   - Many bug fixes and new methods. You should upgrade as soon as possible\n   to get the bug fixes, in particular, one that could cause transactions\n   inside the same block to be incorrectly re-ordered when using Bloom\n   filtering (which can affect the wallet). The library code now has more\n   internal annotations to help static analysis engines, and several bugs were\n   fixed as a result of that.\n\n*API Changes*\n\n   - The ScriptBuilder class now takes TransactionSignature objects, these\n   wrap a raw ECDSA signature and the SIGHASH flags together, with utility\n   methods to work with them.\n   - The Locks class has been renamed to Threading. The thread on which\n   callbacks run has been changed, see above.\n   - The WalletEventListener.onKeyAdded method became onKeysAdded and now\n   takes a list, to make processing of bulk adds more efficient.\n   - BitcoinURIParseException is now checked so you can't forget to handle\n   bogus URIs.\n   - The Wallet.toString(..) method has additional parameters now so you\n   can control what is included in the dump.\n\n*Known issues*\n*\n*\nPlease see the limitations and missing\nfeatures<https://code.google.com/p/bitcoinj/wiki/Limitations> page.\nThis page has been fleshed out since the last release with common issues\nand missing features. A few issues were also fixed and removed.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130814/a60a2551/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "bitcoinj 0.10",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 7162
        }
    },
    {
        "title": "[Bitcoin-development] Version 0.9 goals",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2013-08-15T00:29:40",
                "message_text_only": "It feels to me like we're close to a 0.9 \"feature freeze\" / start of\nrelease cycle; I'd like to talk a little bit about what we'd like to see in\nthe final 0.9 release.\n\nMy list:\n\nBug:  I'd really like to see the leveldb corruption issue (mostly on OSX,\nit seems) fixed. This is hard because it can't be reliably reproduced, and,\nat least on my machine, takes weeks to occur. Help needed to reproduce/fix,\nsee https://github.com/bitcoin/bitcoin/issues/2770 for what we know about\nthe problem.\n\nPayment Protocol support is ready to be pulled (\nhttps://github.com/bitcoin/bitcoin/pull/2539) . Unless there are major\nobjections, I will pull it tomorrow (it has already gone through two rounds\nof bounty-driven QA testing, so I'm convinced it is ready).\n\nI'd love for 0.9 to contain sipa's \"headers first\" initial block download\noptimization; I think it is a big enough improvement to justify making the\n0.9 test/release cycle longer.\n\nCoin control (https://github.com/bitcoin/bitcoin/pull/2343).\n\nThe autotools work (https://github.com/bitcoin/bitcoin/pull/2805).\n\nGitian-build with the latest openssl and Qt5. Perhaps update the version of\nDebian VMs that we gitian-build with.\n\nI plan on spending about half my time on code review and helping get pull\nrequests tested, and the other half of my time working on code that\nprobably won't make it into the 0.9 release.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130815/52144447/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-15T08:09:48",
                "message_text_only": "Sounds awesome!\n\nPieter told me at lunch that headers first cut sync time to 45 minutes for\nhim, which is another amazing improvement from the master of optimisations.\n\nPieter, Matt and I also agreed that for maximum impact we should really try\nto ship payment protocol support in at least two clients simultaneously and\nideally with a big merchant signed up too - to send a powerful message that\nwe really mean it. Someone volunteered last week to do it for bitcoinj and\nif he doesn't pull through, I have some old code from EOY 2012 that I could\nupdate to the latest spec and ship at least some basic support. I'd hope\nthat we can get Bitcoin Wallet or MultiBit updates out once bcj has support\npretty fast.\n\nAlso, Jeff said that BitPay want to be a leader in support for the\nprotocol. So let's try and co-ordinate release dates so we can make a bit\nof a splash and grab the ecosystems attention.\n\nOn Thu, Aug 15, 2013 at 2:29 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> I plan on spending about half my time on code review and helping get pull\n> requests tested, and the other half of my time working on code that\n> probably won't make it into the 0.9 release.\n>\n\nSounds brilliant. It'll be nice to see the pull request queue drain. Any\nideas what the non-0.9 code will be? Fee rework? DoS work?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130815/d11d8931/attachment.html>"
            },
            {
                "author": "slush",
                "date": "2013-08-15T08:22:19",
                "message_text_only": "> Pieter, Matt and I also agreed that for maximum impact we should really\n> try to ship payment protocol support in at least two clients simultaneously\n> and ideally with a big merchant signed up too - to send a powerful message\n> that we really mean it. Someone volunteered last week to do it for bitcoinj\n> and if he doesn't pull through, I have some old code from EOY 2012 that I\n> could update to the latest spec and ship at least some basic support. I'd\n> hope that we can get Bitcoin Wallet or MultiBit updates out once bcj has\n> support pretty fast.\n>\n\nWe're planning to support payment protocol in Trezor as well, if it counts.\nI think it's a missing piece in absolute security of hardware wallets.\n\nslush\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130815/d6d18f98/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-08-15T08:37:42",
                "message_text_only": "On Thu, Aug 15, 2013 at 10:09:48AM +0200, Mike Hearn wrote:\n> Sounds awesome!\n> \n> Pieter told me at lunch that headers first cut sync time to 45 minutes for\n> him, which is another amazing improvement from the master of optimisations.\n\nJust to make sure nobody expects a magic bullet: this was on a hexacore Xeon\nCPU, with several GB of -dbcache, libsecp256k1 for verification, and a very good\nnetwork connection. It is repeatable and from random network peers, though. The\ncode is here:\n\n  https://github.com/sipa/bitcoin/commits/headersfirst\n\nIt's usable and seems to be stable (including reindexing, which needs support for\nblock files with out-of-order blocks now), but I still want to clean some\nthings up before pullreq'in. There are probably some heuristic tweaks\npossible as well - Gregory found that performance is reduced for the first\npart of the chain on high-latency networks.\n\n> Pieter, Matt and I also agreed that for maximum impact we should really try\n> to ship payment protocol support in at least two clients simultaneously and\n> ideally with a big merchant signed up too - to send a powerful message that\n> we really mean it. Someone volunteered last week to do it for bitcoinj and\n> if he doesn't pull through, I have some old code from EOY 2012 that I could\n> update to the latest spec and ship at least some basic support. I'd hope\n> that we can get Bitcoin Wallet or MultiBit updates out once bcj has support\n> pretty fast.\n> \n> Also, Jeff said that BitPay want to be a leader in support for the\n> protocol. So let's try and co-ordinate release dates so we can make a bit\n> of a splash and grab the ecosystems attention.\n\nI believe we do need some wider support than just Bitcoin-Qt, indeed, as\nthe number of people actually using the reference client as a wallet is\nquite low now. Ideally, several clients and merchants start support for it\nin a short timeframe...\n\n-- \nPieter"
            },
            {
                "author": "Wendell",
                "date": "2013-08-15T21:12:59",
                "message_text_only": "Mike,\n\nIf bitcoinj will be ready and you will help us, we are willing to implement it right away in Hive as well. We will also keep BitcoinKit.framework updated with the new bitcoind and bitcoinj implementations.\n\nBitPay taking the lead here would be tremendous. Hopefully cool sites like Bitcoin Store will also be game to hit the ground running. I'll ask them.\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n\nOn Aug 15, 2013, at 10:09 AM, Mike Hearn wrote:\n\n> Pieter, Matt and I also agreed that for maximum impact we should really try to ship payment protocol support in at least two clients simultaneously and ideally with a big merchant signed up too - to send a powerful message that we really mean it. Someone volunteered last week to do it for bitcoinj and if he doesn't pull through, I have some old code from EOY 2012 that I could update to the latest spec and ship at least some basic support. I'd hope that we can get Bitcoin Wallet or MultiBit updates out once bcj has support pretty fast.\n> \n> Also, Jeff said that BitPay want to be a leader in support for the protocol. So let's try and co-ordinate release dates so we can make a bit of a splash and grab the ecosystems attention."
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-08-15T10:12:17",
                "message_text_only": "On 15 August 2013 02:29, Gavin Andresen <gavinandresen at gmail.com> wrote:\n\n> It feels to me like we're close to a 0.9 \"feature freeze\" / start of\n> release cycle; I'd like to talk a little bit about what we'd like to see in\n> the final 0.9 release.\n>\n> My list:\n>\n> Bug:  I'd really like to see the leveldb corruption issue (mostly on OSX,\n> it seems) fixed. This is hard because it can't be reliably reproduced, and,\n> at least on my machine, takes weeks to occur. Help needed to reproduce/fix,\n> see https://github.com/bitcoin/bitcoin/issues/2770 for what we know about\n> the problem.\n>\n> Payment Protocol support is ready to be pulled (\n> https://github.com/bitcoin/bitcoin/pull/2539) . Unless there are major\n> objections, I will pull it tomorrow (it has already gone through two rounds\n> of bounty-driven QA testing, so I'm convinced it is ready).\n>\n> I'd love for 0.9 to contain sipa's \"headers first\" initial block download\n> optimization; I think it is a big enough improvement to justify making the\n> 0.9 test/release cycle longer.\n>\n> Coin control (https://github.com/bitcoin/bitcoin/pull/2343).\n>\n> The autotools work (https://github.com/bitcoin/bitcoin/pull/2805).\n>\n> Gitian-build with the latest openssl and Qt5. Perhaps update the version\n> of Debian VMs that we gitian-build with.\n>\n> I plan on spending about half my time on code review and helping get pull\n> requests tested, and the other half of my time working on code that\n> probably won't make it into the 0.9 release.\n>\n\n+1\n\nSounds great!\n\n\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n> It's a free troubleshooting tool designed for production.\n> Get down to code-level detail for bottlenecks, with <2% overhead.\n> Download for free and get started troubleshooting in minutes.\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130815/930f652a/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2013-08-15T10:49:13",
                "message_text_only": "On Thu, Aug 15, 2013 at 2:29 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> It feels to me like we're close to a 0.9 \"feature freeze\" / start of\n> release cycle; I'd like to talk a little bit about what we'd like to see in\n> the final 0.9 release.\n>\n> Payment Protocol support is ready to be pulled (\n> https://github.com/bitcoin/bitcoin/pull/2539) . Unless there are major\n> objections, I will pull it tomorrow (it has already gone through two rounds\n> of bounty-driven QA testing, so I'm convinced it is ready).\n>\n\nNo objections from me, I've already looked at the code a few times and did\nsome testing here and there, looks good for merging.\n\n\n> I'd love for 0.9 to contain sipa's \"headers first\" initial block download\n> optimization; I think it is a big enough improvement to justify making the\n> 0.9 test/release cycle longer.\n>\n\nYep, that'd be great.\n\n\n> Coin control (https://github.com/bitcoin/bitcoin/pull/2343).\n>\n> The autotools work (https://github.com/bitcoin/bitcoin/pull/2805).\n>\n> Gitian-build with the latest openssl and Qt5. Perhaps update the version\n> of Debian VMs that we gitian-build with.\n>\n\nFully agreed about payment protocol, autotools and Qt5 build.\n\nI'm still not very excited about coin control (and last time I looked at\nthe code, it has an issue that it introduced statefulness into the wallet\nmodel - a bane for concurrency. But that may be resolved?) . Anyway, many\npeople seem to want that so it's fine with me, given that the issues are\nfixed.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130815/d6265043/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-08-15T10:56:25",
                "message_text_only": "On Thu, Aug 15, 2013 at 12:49 PM, Wladimir <laanwj at gmail.com> wrote:\n> Fully agreed about payment protocol, autotools and Qt5 build.\n>\n> I'm still not very excited about coin control (and last time I looked at the\n> code, it has an issue that it introduced statefulness into the wallet model\n> - a bane for concurrency. But that may be resolved?) . Anyway, many people\n> seem to want that so it's fine with me, given that the issues are fixed.\n\nAs far as I can see, that state is gone, and is now passed in a\nseparate object to the transaction-creation methods.\n\nI'd like to see it go in, as I believe it can be helpful in\nunderstanding the difference between the high-level abstraction\n(wallet) and the underlying implementation (individual coins) -\nsomething that many people are confused about. I think that's even a\nmore important advantage than the ability for micro-management it\noffers. Multiwallet would be more appropriate for avoiding linkage\nbetween identities, but it seems there's little progress on that front\nnow.\n\n-- \nPieter"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-15T09:02:02",
                "message_text_only": "On Thu, Aug 15, 2013 at 10:22 AM, slush <slush at centrum.cz> wrote:\n\n> We're planning to support payment protocol in Trezor as well, if it\n> counts. I think it's a missing piece in absolute security of hardware\n> wallets.\n>\n\nYup, that's always been the plan :-)\n\nAny idea how much work it is, and would it be a v1 feature of the Trezor or\nadded later via firmware update?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130815/ae7ab1b7/attachment.html>"
            },
            {
                "author": "slush",
                "date": "2013-08-15T14:32:22",
                "message_text_only": "On Thu, Aug 15, 2013 at 11:02 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> On Thu, Aug 15, 2013 at 10:22 AM, slush <slush at centrum.cz> wrote:\n>\n>> We're planning to support payment protocol in Trezor as well, if it\n>> counts. I think it's a missing piece in absolute security of hardware\n>> wallets.\n>>\n>\n> Yup, that's always been the plan :-)\n>\n> Any idea how much work it is, and would it be a v1 feature of the Trezor\n> or added later via firmware update?\n>\n\nOur plan is to add support for that into v1 firmware, but it also depends\non readiness of surrounding infrastructure; mainly if there'll be support\nfor payment protocol in multibit in the time of v1 release (I suppose that\nthe Multibit will be the first wallet  compatible with Trezor AND\nsupporting payment protocol).\n\nslush\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130815/3faadd9b/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-15T15:22:23",
                "message_text_only": "> Our plan is to add support for that into v1 firmware, but it also depends\n> on readiness of surrounding infrastructure; mainly if there'll be support\n> for payment protocol in multibit in the time of v1 release (I suppose that\n> the Multibit will be the first wallet  compatible with Trezor AND\n> supporting payment protocol).\n>\n\nYeah, OK. Let's see how much progress Gary makes. Supporting HD wallets is\nthe trickiest part and I don't know how much time I will have - the Android\nRNG issue and getting bcj 0.10 released have sucked up a lot of my time\nlately and I need to refocus on other things for a bit. But between the guy\nwho volunteered to do payment protocol, and Gary doing TrezorJ, and Matija\nalready having done the core algorithms, I'm hoping the only parts I'll\nhave to do are integrating the HD code with the core wallet code. Possibly\nif we're running out of time I can do a real basic HD wallet implementation\nthat only iterates a key once and doesn't generate new keys for each\ntransaction, as that's really the trickiest part (because of the need for\nlookahead/behind and memory bloat on phones).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130815/bb37e853/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Version 0.9 goals",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "slush",
                "Wladimir",
                "Mike Hearn",
                "Gavin Andresen",
                "Wendell",
                "Melvin Carvalho",
                "Pieter Wuille"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 14976
        }
    },
    {
        "title": "[Bitcoin-development] Gavin's post-0.9 TODO list...",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2013-08-16T01:00:38",
                "message_text_only": "Mike asked what non-0.9 code I'm working on; the three things on the top of\nmy list are:\n\n1) Smarter fee handling on the client side, instead of hard-coded fees. I\nwas busy today generating scatter-plots and histograms of transaction fees\nversus priorities to get some insight into what miner policies look like\nright now.\n\n2) \"First double-spend\" relaying and alerting, to better support low-value\nin-person transactions.  Related:\n*Have *a *Snack*, Pay with\n*Bitcoins*<http://www.tik.ee.ethz.ch/file/848064fa2e80f88a57aef43d7d5956c6/P2P2013_093.pdf>\n\n\n3) Work on 2-3 whitepapers on why we need to increase or remove the 1MB\nblock size limit, how we can do it safely, and go through all of the\narguments that have been made against it and explain why they're wrong.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/0e0d57a9/attachment.html>"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-08-16T04:06:27",
                "message_text_only": "On 16 August 2013 03:00, Gavin Andresen <gavinandresen at gmail.com> wrote:\n\n> Mike asked what non-0.9 code I'm working on; the three things on the top\n> of my list are:\n>\n> 1) Smarter fee handling on the client side, instead of hard-coded fees. I\n> was busy today generating scatter-plots and histograms of transaction fees\n> versus priorities to get some insight into what miner policies look like\n> right now.\n>\n\n+1\n\n\n>\n> 2) \"First double-spend\" relaying and alerting, to better support low-value\n> in-person transactions.  Related:\n> *Have *a *Snack*, Pay with *Bitcoins*<http://www.tik.ee.ethz.ch/file/848064fa2e80f88a57aef43d7d5956c6/P2P2013_093.pdf>\n>\n>\n\n+1\n\n\n>\n> 3) Work on 2-3 whitepapers on why we need to increase or remove the 1MB\n> block size limit, how we can do it safely, and go through all of the\n> arguments that have been made against it and explain why they're wrong.\n>\n\nWhat block size do you think is ideal?\n\n\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n> It's a free troubleshooting tool designed for production.\n> Get down to code-level detail for bottlenecks, with <2% overhead.\n> Download for free and get started troubleshooting in minutes.\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/2b19dc93/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-16T12:11:31",
                "message_text_only": "Cool. Maybe it's time for another development update on the foundation blog?\n\n\nOn Fri, Aug 16, 2013 at 3:00 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> Mike asked what non-0.9 code I'm working on; the three things on the top\n> of my list are:\n>\n> 1) Smarter fee handling on the client side, instead of hard-coded fees. I\n> was busy today generating scatter-plots and histograms of transaction fees\n> versus priorities to get some insight into what miner policies look like\n> right now.\n>\n> 2) \"First double-spend\" relaying and alerting, to better support low-value\n> in-person transactions.  Related:\n> *Have *a *Snack*, Pay with *Bitcoins*<http://www.tik.ee.ethz.ch/file/848064fa2e80f88a57aef43d7d5956c6/P2P2013_093.pdf>\n>\n>\n> 3) Work on 2-3 whitepapers on why we need to increase or remove the 1MB\n> block size limit, how we can do it safely, and go through all of the\n> arguments that have been made against it and explain why they're wrong.\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/54c13a4f/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-16T12:24:04",
                "message_text_only": "The only other thing I'd like to see there is the start of a new anti-DoS\nframework. I think once the outline is in place other people will be able\nto fill it in appropriately. But the current framework has to be left\nbehind.\n\nIf I had to choose one thing to evict to make time for that, it'd be the\nwhitepapers. At the moment we still have plenty of headroom in block sizes,\neven post April. It can probably be safely delayed for a while.\n\n\nOn Fri, Aug 16, 2013 at 2:11 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> Cool. Maybe it's time for another development update on the foundation\n> blog?\n>\n>\n> On Fri, Aug 16, 2013 at 3:00 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n>\n>> Mike asked what non-0.9 code I'm working on; the three things on the top\n>> of my list are:\n>>\n>> 1) Smarter fee handling on the client side, instead of hard-coded fees. I\n>> was busy today generating scatter-plots and histograms of transaction fees\n>> versus priorities to get some insight into what miner policies look like\n>> right now.\n>>\n>> 2) \"First double-spend\" relaying and alerting, to better support\n>> low-value in-person transactions.  Related:\n>> *Have *a *Snack*, Pay with *Bitcoins*<http://www.tik.ee.ethz.ch/file/848064fa2e80f88a57aef43d7d5956c6/P2P2013_093.pdf>\n>>\n>>\n>> 3) Work on 2-3 whitepapers on why we need to increase or remove the 1MB\n>> block size limit, how we can do it safely, and go through all of the\n>> arguments that have been made against it and explain why they're wrong.\n>>\n>> --\n>> --\n>> Gavin Andresen\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/7799bb62/attachment.html>"
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2013-08-16T13:41:54",
                "message_text_only": "https://togami.com/~warren/archive/2013/example-bitcoind-dos-mitigation-via-iptables.txt\n*Anti-DoS Low Hanging Fruit: source IP or subnet connection limits*\nIf you disallow the same IP and/or subnet from establishing too many TCP\nconnections with your node, it becomes more expensive for attackers to use\na single host exhaust a target node's resources.  This iptables firewall\nbased example has almost zero drawbacks, but it is too complicated for most\npeople to deploy.  Yes, there is a small chance that you will block\nlegitimate connections, but there are plenty of other nodes for random\nconnections to choose from.  Configurable per source IP and source subnet\nlimits with sane defaults enforced by bitcoind itself would be a big\nimprovement over the current situation where one host address can consume\nlimited resources of many target nodes.\n\nThis doesn't remove the risk of a network-wide connection exhaustion attack\nby a determined attacker, but it at least makes multiple types of attacks a\nlot more expensive.  This also doesn't do much against the io\nvulnerability, which would require major redesigns to prevent in Bitcoin.\n\nhttps://github.com/litecoin-project/litecoin/commit/db4d8e21d99551bef4c807aa1534a074e4b7964d\n*Want to safely delay the block size limit increase for another year or two?\n*  This patch alone enables that.\n\n\n\nOn Fri, Aug 16, 2013 at 2:24 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> The only other thing I'd like to see there is the start of a new anti-DoS\n> framework. I think once the outline is in place other people will be able\n> to fill it in appropriately. But the current framework has to be left\n> behind.\n>\n> If I had to choose one thing to evict to make time for that, it'd be the\n> whitepapers. At the moment we still have plenty of headroom in block sizes,\n> even post April. It can probably be safely delayed for a while.\n>\n>\n> On Fri, Aug 16, 2013 at 2:11 PM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> Cool. Maybe it's time for another development update on the foundation\n>> blog?\n>>\n>>\n>> On Fri, Aug 16, 2013 at 3:00 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n>>\n>>> Mike asked what non-0.9 code I'm working on; the three things on the top\n>>> of my list are:\n>>>\n>>> 1) Smarter fee handling on the client side, instead of hard-coded fees.\n>>> I was busy today generating scatter-plots and histograms of transaction\n>>> fees versus priorities to get some insight into what miner policies look\n>>> like right now.\n>>>\n>>> 2) \"First double-spend\" relaying and alerting, to better support\n>>> low-value in-person transactions.  Related:\n>>> *Have *a *Snack*, Pay with *Bitcoins*<http://www.tik.ee.ethz.ch/file/848064fa2e80f88a57aef43d7d5956c6/P2P2013_093.pdf>\n>>>\n>>>\n>>> 3) Work on 2-3 whitepapers on why we need to increase or remove the 1MB\n>>> block size limit, how we can do it safely, and go through all of the\n>>> arguments that have been made against it and explain why they're wrong.\n>>>\n>>> --\n>>> --\n>>> Gavin Andresen\n>>>\n>>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n> It's a free troubleshooting tool designed for production.\n> Get down to code-level detail for bottlenecks, with <2% overhead.\n> Download for free and get started troubleshooting in minutes.\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/c9fbdf46/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-16T13:46:12",
                "message_text_only": "A ban-subnet RPC would be a reasonable addition, but obviously DoS\nattackers that are IP or bandwidth constrained are really just script\nkiddies. Also anything that involves every node operator doing manual\nintervention rather works against decentralisation and having a big\nnetwork. That's why I keep pushing for automated heuristic driven\nprioritisation.\n\n\nOn Fri, Aug 16, 2013 at 3:41 PM, Warren Togami Jr. <wtogami at gmail.com>wrote:\n\n>\n> https://togami.com/~warren/archive/2013/example-bitcoind-dos-mitigation-via-iptables.txt\n> *Anti-DoS Low Hanging Fruit: source IP or subnet connection limits*\n> If you disallow the same IP and/or subnet from establishing too many TCP\n> connections with your node, it becomes more expensive for attackers to use\n> a single host exhaust a target node's resources.  This iptables firewall\n> based example has almost zero drawbacks, but it is too complicated for most\n> people to deploy.  Yes, there is a small chance that you will block\n> legitimate connections, but there are plenty of other nodes for random\n> connections to choose from.  Configurable per source IP and source subnet\n> limits with sane defaults enforced by bitcoind itself would be a big\n> improvement over the current situation where one host address can consume\n> limited resources of many target nodes.\n>\n> This doesn't remove the risk of a network-wide connection exhaustion\n> attack by a determined attacker, but it at least makes multiple types of\n> attacks a lot more expensive.  This also doesn't do much against the io\n> vulnerability, which would require major redesigns to prevent in Bitcoin.\n>\n>\n> https://github.com/litecoin-project/litecoin/commit/db4d8e21d99551bef4c807aa1534a074e4b7964d\n> *Want to safely delay the block size limit increase for another year or\n> two?*  This patch alone enables that.\n>\n>\n>\n> On Fri, Aug 16, 2013 at 2:24 AM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> The only other thing I'd like to see there is the start of a new anti-DoS\n>> framework. I think once the outline is in place other people will be able\n>> to fill it in appropriately. But the current framework has to be left\n>> behind.\n>>\n>> If I had to choose one thing to evict to make time for that, it'd be the\n>> whitepapers. At the moment we still have plenty of headroom in block sizes,\n>> even post April. It can probably be safely delayed for a while.\n>>\n>>\n>> On Fri, Aug 16, 2013 at 2:11 PM, Mike Hearn <mike at plan99.net> wrote:\n>>\n>>> Cool. Maybe it's time for another development update on the foundation\n>>> blog?\n>>>\n>>>\n>>> On Fri, Aug 16, 2013 at 3:00 AM, Gavin Andresen <gavinandresen at gmail.com\n>>> > wrote:\n>>>\n>>>> Mike asked what non-0.9 code I'm working on; the three things on the\n>>>> top of my list are:\n>>>>\n>>>> 1) Smarter fee handling on the client side, instead of hard-coded fees.\n>>>> I was busy today generating scatter-plots and histograms of transaction\n>>>> fees versus priorities to get some insight into what miner policies look\n>>>> like right now.\n>>>>\n>>>> 2) \"First double-spend\" relaying and alerting, to better support\n>>>> low-value in-person transactions.  Related:\n>>>> *Have *a *Snack*, Pay with *Bitcoins*<http://www.tik.ee.ethz.ch/file/848064fa2e80f88a57aef43d7d5956c6/P2P2013_093.pdf>\n>>>>\n>>>>\n>>>> 3) Work on 2-3 whitepapers on why we need to increase or remove the 1MB\n>>>> block size limit, how we can do it safely, and go through all of the\n>>>> arguments that have been made against it and explain why they're wrong.\n>>>>\n>>>> --\n>>>> --\n>>>> Gavin Andresen\n>>>>\n>>>>\n>>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n>> It's a free troubleshooting tool designed for production.\n>> Get down to code-level detail for bottlenecks, with <2% overhead.\n>> Download for free and get started troubleshooting in minutes.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n> It's a free troubleshooting tool designed for production.\n> Get down to code-level detail for bottlenecks, with <2% overhead.\n> Download for free and get started troubleshooting in minutes.\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/b74e58c2/attachment.html>"
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2013-08-16T13:53:28",
                "message_text_only": "Automatic heuristic driven prioritization, with sane defaults and some\nconfigurable knobs, is exactly what I suggest.\n\nIn the short-term though, any connection limits added to the client by\ndefault would be the simplest and easiest protection measure to audit.  It\nwould improve things a lot over the current situation where there are no\nlimits, and it requires no manual intervention from node operators.\n\nWarren\n\n\n\n\n\n\n\nOn Fri, Aug 16, 2013 at 3:46 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> A ban-subnet RPC would be a reasonable addition, but obviously DoS\n> attackers that are IP or bandwidth constrained are really just script\n> kiddies. Also anything that involves every node operator doing manual\n> intervention rather works against decentralisation and having a big\n> network. That's why I keep pushing for automated heuristic driven\n> prioritisation.\n>\n>\n> On Fri, Aug 16, 2013 at 3:41 PM, Warren Togami Jr. <wtogami at gmail.com>wrote:\n>\n>>\n>> https://togami.com/~warren/archive/2013/example-bitcoind-dos-mitigation-via-iptables.txt\n>> *Anti-DoS Low Hanging Fruit: source IP or subnet connection limits*\n>> If you disallow the same IP and/or subnet from establishing too many TCP\n>> connections with your node, it becomes more expensive for attackers to use\n>> a single host exhaust a target node's resources.  This iptables firewall\n>> based example has almost zero drawbacks, but it is too complicated for most\n>> people to deploy.  Yes, there is a small chance that you will block\n>> legitimate connections, but there are plenty of other nodes for random\n>> connections to choose from.  Configurable per source IP and source subnet\n>> limits with sane defaults enforced by bitcoind itself would be a big\n>> improvement over the current situation where one host address can consume\n>> limited resources of many target nodes.\n>>\n>> This doesn't remove the risk of a network-wide connection exhaustion\n>> attack by a determined attacker, but it at least makes multiple types of\n>> attacks a lot more expensive.  This also doesn't do much against the io\n>> vulnerability, which would require major redesigns to prevent in Bitcoin.\n>>\n>>\n>> https://github.com/litecoin-project/litecoin/commit/db4d8e21d99551bef4c807aa1534a074e4b7964d\n>> *Want to safely delay the block size limit increase for another year or\n>> two?*  This patch alone enables that.\n>>\n>>\n>>\n>> On Fri, Aug 16, 2013 at 2:24 AM, Mike Hearn <mike at plan99.net> wrote:\n>>\n>>> The only other thing I'd like to see there is the start of a new\n>>> anti-DoS framework. I think once the outline is in place other people will\n>>> be able to fill it in appropriately. But the current framework has to be\n>>> left behind.\n>>>\n>>> If I had to choose one thing to evict to make time for that, it'd be the\n>>> whitepapers. At the moment we still have plenty of headroom in block sizes,\n>>> even post April. It can probably be safely delayed for a while.\n>>>\n>>>\n>>> On Fri, Aug 16, 2013 at 2:11 PM, Mike Hearn <mike at plan99.net> wrote:\n>>>\n>>>> Cool. Maybe it's time for another development update on the foundation\n>>>> blog?\n>>>>\n>>>>\n>>>> On Fri, Aug 16, 2013 at 3:00 AM, Gavin Andresen <\n>>>> gavinandresen at gmail.com> wrote:\n>>>>\n>>>>> Mike asked what non-0.9 code I'm working on; the three things on the\n>>>>> top of my list are:\n>>>>>\n>>>>> 1) Smarter fee handling on the client side, instead of hard-coded\n>>>>> fees. I was busy today generating scatter-plots and histograms of\n>>>>> transaction fees versus priorities to get some insight into what miner\n>>>>> policies look like right now.\n>>>>>\n>>>>> 2) \"First double-spend\" relaying and alerting, to better support\n>>>>> low-value in-person transactions.  Related:\n>>>>> *Have *a *Snack*, Pay with *Bitcoins*<http://www.tik.ee.ethz.ch/file/848064fa2e80f88a57aef43d7d5956c6/P2P2013_093.pdf>\n>>>>>\n>>>>>\n>>>>> 3) Work on 2-3 whitepapers on why we need to increase or remove the\n>>>>> 1MB block size limit, how we can do it safely, and go through all of the\n>>>>> arguments that have been made against it and explain why they're wrong.\n>>>>>\n>>>>> --\n>>>>> --\n>>>>> Gavin Andresen\n>>>>>\n>>>>>\n>>>>\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n>>> It's a free troubleshooting tool designed for production.\n>>> Get down to code-level detail for bottlenecks, with <2% overhead.\n>>> Download for free and get started troubleshooting in minutes.\n>>>\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n>> It's a free troubleshooting tool designed for production.\n>> Get down to code-level detail for bottlenecks, with <2% overhead.\n>> Download for free and get started troubleshooting in minutes.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/7abd0e31/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-08-16T14:06:35",
                "message_text_only": "On Fri, Aug 16, 2013 at 03:41:54AM -1000, Warren Togami Jr. wrote:\n> https://togami.com/~warren/archive/2013/example-bitcoind-dos-mitigation-via-iptables.txt\n> *Anti-DoS Low Hanging Fruit: source IP or subnet connection limits*\n> If you disallow the same IP and/or subnet from establishing too many TCP\n> connections with your node, it becomes more expensive for attackers to use\n> a single host exhaust a target node's resources.  This iptables firewall\n> based example has almost zero drawbacks, but it is too complicated for most\n> people to deploy.  Yes, there is a small chance that you will block\n> legitimate connections, but there are plenty of other nodes for random\n> connections to choose from.  Configurable per source IP and source subnet\n> limits with sane defaults enforced by bitcoind itself would be a big\n> improvement over the current situation where one host address can consume\n> limited resources of many target nodes.\n\nHave you looked into what it would take to just apply the IP diversity\ntests for outgoing connections to incoming connections? The code's\nalready there...\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000018dcf5bcc3f018a05517ba1c479b432ba422015d4506496e55\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/677730d8/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-08-16T14:56:12",
                "message_text_only": "On Fri, Aug 16, 2013 at 6:41 AM, Warren Togami Jr. <wtogami at gmail.com> wrote:\n> If you disallow the same IP and/or subnet from establishing too many TCP\n> connections with your node,\n[...]\n> has almost zero drawbacks,\n\nThere are whole countries who access the internet from single IP\naddresses. There are major institution with hundreds or even thousands\nof hosts that could be running Bitcoin who are visible to the public\ninternet as a single IP address (/single subnet).  Most tor traffic\nexits to the internet from a dozen of the largest exits, common\nlocal-network configurations have people addnode-ing local hosts from\nmany systems on a subnet, etc.\n\nPrioritizing the availability of inbound slots based on source IP is\nreasonable and prudent, but it does not have almost zero drawbacks.\nOutright limiting is even worse.\n\nAs a protective measure its also neigh useless for IPv6 connected\nhosts and hidden service hosts.  It's also ineffective at attacks\nwhich exhaust your memory, cpu, IO, or bandwidth without trying to\nexhaust your sockets.\n\nSo I am not opposed to prioritizing based on it (e.g. when full pick\nan inbound connection to drop based on criteria which includes network\nmask commonality), but I would not want to block completely based on\nthis."
            },
            {
                "author": "Peter Todd",
                "date": "2013-08-16T14:01:16",
                "message_text_only": "On Fri, Aug 16, 2013 at 02:24:04PM +0200, Mike Hearn wrote:\n> The only other thing I'd like to see there is the start of a new anti-DoS\n> framework. I think once the outline is in place other people will be able\n> to fill it in appropriately. But the current framework has to be left\n> behind.\n\nPart of anti-DoS should include making it easier for people to\ncontribute back to the network. Lowest hanging fruit:\n\n1) SPV nodes with spare bandwidth should relay whole blocks to reduce\nthe load on full-nodes. The SPV security model is based on hashing power\nanyway, so there is no major harm in doing so - if you have the\nresources to fake blocks, you probably have the resources to sybil the\nnetwork anyway.\n\n2) It's probably reasonable for SPV peers with bandwidth to be willing\nto do bloom filtering on the behalf of peers that don't have spare\nbandwidth. Hence they would set NODE_BLOOM, but not NODE_NETWORK. (or\nmore likely some more nuanced flags) Again this has to apply to full\nblocks only unless we come up with some PoW scheme or similar to\ndiscourage DoS attacks via invalid transactions. (maintaining partial\nUTXO sets is another possibility, although a complex one)\n\nBoth examples work best with payment protocols where the recipient is\nresponsible for getting the transaction broadcast. Similarly you can by\ndefault not connect to full-node peers, and then connect to them on\ndemand when you have a transaction to send.\n\nDoing this also makes it more difficult to sybil the network - for\ninstance right now you can create \"SPV honeypots\" that allow incoming\nconnections only from SPV nodes, thus attracting a disproportionate % of\nthe total SPV population given a relatively small number of nodes. You\ncan then use that to harm SPV nodes by, for instance, making a % of\ntransactions be dropped deterministicly, either by the bloom matching\ncode, or when sent. Users unlucky enough to be surrounded by sybil nodes\nwill have their transactions mysteriously fail to arrive in their\nwallets, or have their transactions mysteriously never confirm. Given\nhow few full nodes there are, it probably won't take very many honeypots\nto pull off this attack, especially if you combine it with a\nsimultaneous max connections or bloom io attack to degrade the capacity\nof honest nodes.\n\nDeanonymization is another attack that can be done at the same time of\ncourse.\n\nIn any case, the more peers on the network that can relay data the\nbetter.\n\n3) Make it easier to run a full node. IMO partial mode is the way to go\nhere. Note that from a legal perspective we really want to make sure\nthat running full nodes (and mining p2pool or solo) continue to be\nsomething ordinary users do. We do not want to give the impression to\nregulators that running a full node is in any way unusual or rare, and\nthus something that might be practical or desirable to regulate. Users\nshould be given clear options about how much disk space and bandwidth to\ndonate to the health of the network, and within those limits nodes\nshould always try to make progress towards being full nodes, and in the\nmeantime being increasingly productive partial nodes.\n\nEven with pure SPV nodes if they are relaying block data and ideally\ntransactions they make it much more difficult for regulations to be made\nthat, say, require full node operators to apply blacklists to\ntransactions in the mempool or in blocks.\n\n\n4) This is really a side effect, and not directly DoS-related, but\nunfortunately we're going to have to create some kind of\nproof-of-UTXO-possession that miners include in the blocks they mine.\nWith partial mode it's just too easy and tempting for people to mine\nblocks with fee paying transactions in them without actually having the\nfull UTXO set; such nodes can't tell if a block is invalid due to a fake\ntxin, and thus will happily extend a invalid chain. This possession\nproof can probably be make part of a UTXO commitment.\n\n> If I had to choose one thing to evict to make time for that, it'd be the\n> whitepapers. At the moment we still have plenty of headroom in block sizes,\n> even post April. It can probably be safely delayed for a while.\n\nLots of off-chain tx solutions are popping up which will help push back\nthe issue's relevance as well. Also your micropayment channels possibly.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000b9656276a0fdab028ca759c3fd7f951fb20196c264b5cd1ce\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/5afa0810/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-08-16T14:15:36",
                "message_text_only": "On Fri, Aug 16, 2013 at 10:01:16AM -0400, Peter Todd wrote:\n> Doing this also makes it more difficult to sybil the network - for\n> instance right now you can create \"SPV honeypots\" that allow incoming\n> connections only from SPV nodes, thus attracting a disproportionate % of\n> the total SPV population given a relatively small number of nodes. You\n> can then use that to harm SPV nodes by, for instance, making a % of\n> transactions be dropped deterministicly, either by the bloom matching\n> code, or when sent. Users unlucky enough to be surrounded by sybil nodes\n> will have their transactions mysteriously fail to arrive in their\n> wallets, or have their transactions mysteriously never confirm. Given\n> how few full nodes there are, it probably won't take very many honeypots\n> to pull off this attack, especially if you combine it with a\n> simultaneous max connections or bloom io attack to degrade the capacity\n> of honest nodes.\n\nOh, here's an even better way to do the \"tx drop\" attack: when you drop\na transaction, make a fake one that pays the same scriptPubKeys with the\nsame amount, and send it to the SPV peer instead. They'll see the\ntransaction go through and show up in their wallet, but it'll look like\nit got stuck and never confirmed. They'll soon wind up with a wallet\nfull of useless transactions, effectively locking them out of their\nmoney.\n\nHere's another question for you Mike: So does bitcoinj have any\nprotections against peers flooding you with useless garbage? It'd be\neasy to rack up a user's data bill for instance by just creating junk\nunconfirmed transactions matching the bloom filter.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000018dcf5bcc3f018a05517ba1c479b432ba422015d4506496e55\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/42690034/attachment.sig>"
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2013-08-16T14:27:35",
                "message_text_only": "bitcoinj-0.10 release notes:\n\n   - We now require Bloom-capable (0.8+) peers by default and will\n   disconnect from older nodes. This avoids accidental bandwidth saturation on\n   mobile devices.\n\nGiven the user-security concern that Peter brings up, reconsideration of\nthis new default behavior in SPV clients may be warranted.\n\n\n\nOn Fri, Aug 16, 2013 at 4:15 AM, Peter Todd <pete at petertodd.org> wrote:\n\n> On Fri, Aug 16, 2013 at 10:01:16AM -0400, Peter Todd wrote:\n> > Doing this also makes it more difficult to sybil the network - for\n> > instance right now you can create \"SPV honeypots\" that allow incoming\n> > connections only from SPV nodes, thus attracting a disproportionate % of\n> > the total SPV population given a relatively small number of nodes. You\n> > can then use that to harm SPV nodes by, for instance, making a % of\n> > transactions be dropped deterministicly, either by the bloom matching\n> > code, or when sent. Users unlucky enough to be surrounded by sybil nodes\n> > will have their transactions mysteriously fail to arrive in their\n> > wallets, or have their transactions mysteriously never confirm. Given\n> > how few full nodes there are, it probably won't take very many honeypots\n> > to pull off this attack, especially if you combine it with a\n> > simultaneous max connections or bloom io attack to degrade the capacity\n> > of honest nodes.\n>\n> Oh, here's an even better way to do the \"tx drop\" attack: when you drop\n> a transaction, make a fake one that pays the same scriptPubKeys with the\n> same amount, and send it to the SPV peer instead. They'll see the\n> transaction go through and show up in their wallet, but it'll look like\n> it got stuck and never confirmed. They'll soon wind up with a wallet\n> full of useless transactions, effectively locking them out of their\n> money.\n>\n> Here's another question for you Mike: So does bitcoinj have any\n> protections against peers flooding you with useless garbage? It'd be\n> easy to rack up a user's data bill for instance by just creating junk\n> unconfirmed transactions matching the bloom filter.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 0000000000000018dcf5bcc3f018a05517ba1c479b432ba422015d4506496e55\n>\n>\n> ------------------------------------------------------------------------------\n> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n> It's a free troubleshooting tool designed for production.\n> Get down to code-level detail for bottlenecks, with <2% overhead.\n> Download for free and get started troubleshooting in minutes.\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/6948a457/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-16T14:36:20",
                "message_text_only": "That change was made in response to user complaints. Heck we get complaints\nabout battery life and bandwidth impact even with Bloom filtering. We can't\njust randomly start using peoples bandwidth for relaying blocks, especially\nas I guess most SPV nodes are behind NAT.\n\nIf Gavin is right and the future is dominated by mobiles and tablets, then\nit will require a change of thinking in how P2P networks work. I think\nthere are plenty of people with private servers who would be willing to run\nnodes though. I'm not too worried about this.\n\n\nOn Fri, Aug 16, 2013 at 4:27 PM, Warren Togami Jr. <wtogami at gmail.com>wrote:\n\n> bitcoinj-0.10 release notes:\n>\n>    - We now require Bloom-capable (0.8+) peers by default and will\n>    disconnect from older nodes. This avoids accidental bandwidth saturation on\n>    mobile devices.\n>\n> Given the user-security concern that Peter brings up, reconsideration of\n> this new default behavior in SPV clients may be warranted.\n>\n>\n>\n> On Fri, Aug 16, 2013 at 4:15 AM, Peter Todd <pete at petertodd.org> wrote:\n>\n>> On Fri, Aug 16, 2013 at 10:01:16AM -0400, Peter Todd wrote:\n>> > Doing this also makes it more difficult to sybil the network - for\n>> > instance right now you can create \"SPV honeypots\" that allow incoming\n>> > connections only from SPV nodes, thus attracting a disproportionate % of\n>> > the total SPV population given a relatively small number of nodes. You\n>> > can then use that to harm SPV nodes by, for instance, making a % of\n>> > transactions be dropped deterministicly, either by the bloom matching\n>> > code, or when sent. Users unlucky enough to be surrounded by sybil nodes\n>> > will have their transactions mysteriously fail to arrive in their\n>> > wallets, or have their transactions mysteriously never confirm. Given\n>> > how few full nodes there are, it probably won't take very many honeypots\n>> > to pull off this attack, especially if you combine it with a\n>> > simultaneous max connections or bloom io attack to degrade the capacity\n>> > of honest nodes.\n>>\n>> Oh, here's an even better way to do the \"tx drop\" attack: when you drop\n>> a transaction, make a fake one that pays the same scriptPubKeys with the\n>> same amount, and send it to the SPV peer instead. They'll see the\n>> transaction go through and show up in their wallet, but it'll look like\n>> it got stuck and never confirmed. They'll soon wind up with a wallet\n>> full of useless transactions, effectively locking them out of their\n>> money.\n>>\n>> Here's another question for you Mike: So does bitcoinj have any\n>> protections against peers flooding you with useless garbage? It'd be\n>> easy to rack up a user's data bill for instance by just creating junk\n>> unconfirmed transactions matching the bloom filter.\n>>\n>> --\n>> 'peter'[:-1]@petertodd.org\n>> 0000000000000018dcf5bcc3f018a05517ba1c479b432ba422015d4506496e55\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n>> It's a free troubleshooting tool designed for production.\n>> Get down to code-level detail for bottlenecks, with <2% overhead.\n>> Download for free and get started troubleshooting in minutes.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n> It's a free troubleshooting tool designed for production.\n> Get down to code-level detail for bottlenecks, with <2% overhead.\n> Download for free and get started troubleshooting in minutes.\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/5faf9356/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-08-16T14:59:12",
                "message_text_only": "On Fri, Aug 16, 2013 at 04:36:20PM +0200, Mike Hearn wrote:\n> That change was made in response to user complaints. Heck we get complaints\n> about battery life and bandwidth impact even with Bloom filtering. We can't\n> just randomly start using peoples bandwidth for relaying blocks, especially\n> as I guess most SPV nodes are behind NAT.\n\nUPNP seems to work well for the reference client. What's the situation\nthere on Android?\n\nI leave my phone plugged in and connected via wifi for most of the day;\nlots of people do that.\n\nThe user interface for this stuff is very simple: \"How much bandwidth\nwill you contribute back? If you contribute more bandwidth back, other\npeers will prioritize you and your wallet will be more reliable.\"\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000003cfc051263917373a1cab2655994b97c54a625021f52c84658\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/2c2584ac/attachment.sig>"
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2013-08-16T15:06:22",
                "message_text_only": "I might agree this would be helpful for the many phones plugged into power\nand on wifi for large portions of the day.  However that doesn't really\nhelp much when phone IP addresses change often as you move onto different\nnetworks, and currently IP address is the only thing that peers can keep\ntrack of for the goodness of a peer as there is no roaming pseudo-identity\ncookie due to separate goal of anonymity?  I haven't studied the issue if\nwould be even possible to have both privacy protection and unique node\nidentifiers for anti-DoS authentication at the same time.\n\nOn Fri, Aug 16, 2013 at 4:59 AM, Peter Todd <pete at petertodd.org> wrote:\n\n> The user interface for this stuff is very simple: \"How much bandwidth\n> will you contribute back? If you contribute more bandwidth back, other\n> peers will prioritize you and your wallet will be more reliable.\"\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 000000000000003cfc051263917373a1cab2655994b97c54a625021f52c84658\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/1ad7034c/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-16T15:11:35",
                "message_text_only": "On Fri, Aug 16, 2013 at 4:59 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> UPNP seems to work well for the reference client. What's the situation\n> there on Android?\n>\n\nNot sure - it could be investigated. I think UPNP is an entirely\nuserspace-implementable protocol, so in theory it could be done by a\nuserspace library (even libminiupnp - java is not a requirement on android)\n\n\n> I leave my phone plugged in and connected via wifi for most of the day;\n> lots of people do that.\n>\n\nI suspect you mean \"I think lots of people do that\". I'm not so sure. We\ncould potentially run an experiment in the Android app to measure how many\nusers are in a position to contribute back, but just because you have wifi\ndoesn't mean you can reconfigure it using UPnP. That helps a lot in home\nnetworks, but at the office it doesn't help.\n\nI'm wary of a ton of work being put in to achieve not very much here.\nSatoshi's original vision was always that millions of users were supported\nby 100,000 or so nodes. I don't think that's unreasonable over the long\nterm.\n\nBesides, prioritisation isn't very hard. Nodes can just hand clients a\nsigned timestamp which they remember. When re-connecting, the signed\ntimestamp is handed back to the node and it gives priority to those with\nold timestamps. No state is required on the node side. Signing and checking\ncan be passed onto the general ECDSA thread pool that works its way through\npending signature operations, they'd be prioritised lower than checking\nblocks/broadcasts.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/6ab447c9/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-16T15:13:28",
                "message_text_only": "Oops, hit send too early.\n\nBesides, prioritisation isn't very hard. Nodes can just hand clients a\n> signed timestamp which they remember. When re-connecting, the signed\n> timestamp is handed back to the node and it gives priority to those with\n> old timestamps. No state is required on the node side. Signing and checking\n> can be passed onto the general ECDSA thread pool that works its way through\n> pending signature operations, they'd be prioritised lower than checking\n> blocks/broadcasts.\n>\n\nThe other nice thing about this approach, besides being stateless on the\nserver side, is that it's up to the client whether or not they present the\ncookie. So the node can say \"if you don't present your cookie I'm going to\ndisconnect you\" but when the node has sufficient resources, it'd just not\nrequest this and the client remains anonymous. If the client thinks the\nserver is calling its bluff, it can just wait and see if it really does get\ndisconnected and if so, present the cookie up front next time.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/4fa6ae3d/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-08-16T15:59:51",
                "message_text_only": "On Fri, Aug 16, 2013 at 05:11:35PM +0200, Mike Hearn wrote:\n> On Fri, Aug 16, 2013 at 4:59 PM, Peter Todd <pete at petertodd.org> wrote:\n> \n> > UPNP seems to work well for the reference client. What's the situation\n> > there on Android?\n> >\n> \n> Not sure - it could be investigated. I think UPNP is an entirely\n> userspace-implementable protocol, so in theory it could be done by a\n> userspace library (even libminiupnp - java is not a requirement on android)\n\nDo find out.\n\n> > I leave my phone plugged in and connected via wifi for most of the day;\n> > lots of people do that.\n> >\n> \n> I suspect you mean \"I think lots of people do that\". I'm not so sure. We\n> could potentially run an experiment in the Android app to measure how many\n> users are in a position to contribute back, but just because you have wifi\n> doesn't mean you can reconfigure it using UPnP. That helps a lot in home\n> networks, but at the office it doesn't help.\n\nAlso worth finding out.\n\n> I'm wary of a ton of work being put in to achieve not very much here.\n> Satoshi's original vision was always that millions of users were supported\n> by 100,000 or so nodes. I don't think that's unreasonable over the long\n> term.\n\nAppeal to authority.\n\nStop bringing up Satoshi's \"vision\" - our understanding of\ncrypto-currencies has improved in the 4.5 years since Bitcoin was\nreleased. Satoshi didn't even forsee pool mining, which says a lot about\nhis economic judgement.\n\n> Besides, prioritisation isn't very hard. Nodes can just hand clients a\n> signed timestamp which they remember. When re-connecting, the signed\n> timestamp is handed back to the node and it gives priority to those with\n> old timestamps. No state is required on the node side. Signing and checking\n> can be passed onto the general ECDSA thread pool that works its way through\n> pending signature operations, they'd be prioritised lower than checking\n> blocks/broadcasts.\n\nRight, so you're giving priority to peers that have been around for\nawhile. You've succeeded in forcing attackers to wait a bit.\n\nA) What's the definition of a peer? What stops me from pretending to be\n100 peers?\n\nB) Given an attacker willing to wait, what's your plan?\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000004a52a297d9ae8ecde2ba62b681cc5a4cfbf7636032fc78e7d0\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/e4b89d0d/attachment.sig>"
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2013-08-17T00:08:22",
                "message_text_only": "A sane default that better protects users could be...\n\nIf (plugged into power) && (wifi) then non-bloom peers are OK.  It would\nprotect those users more than reliance upon on the smaller subset of bloom\nnodes.  Scale back to the less secure behavior when battery and bandwidth\nmatters.\n\nWarren\n\n\nOn Fri, Aug 16, 2013 at 4:36 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> That change was made in response to user complaints. Heck we get\n> complaints about battery life and bandwidth impact even with Bloom\n> filtering. We can't just randomly start using peoples bandwidth for\n> relaying blocks, especially as I guess most SPV nodes are behind NAT.\n>\n> If Gavin is right and the future is dominated by mobiles and tablets, then\n> it will require a change of thinking in how P2P networks work. I think\n> there are plenty of people with private servers who would be willing to run\n> nodes though. I'm not too worried about this.\n>\n>\n> On Fri, Aug 16, 2013 at 4:27 PM, Warren Togami Jr. <wtogami at gmail.com>wrote:\n>\n>> bitcoinj-0.10 release notes:\n>>\n>>    - We now require Bloom-capable (0.8+) peers by default and will\n>>    disconnect from older nodes. This avoids accidental bandwidth saturation on\n>>    mobile devices.\n>>\n>> Given the user-security concern that Peter brings up, reconsideration of\n>> this new default behavior in SPV clients may be warranted.\n>>\n>>\n>>\n>> On Fri, Aug 16, 2013 at 4:15 AM, Peter Todd <pete at petertodd.org> wrote:\n>>\n>>> On Fri, Aug 16, 2013 at 10:01:16AM -0400, Peter Todd wrote:\n>>> > Doing this also makes it more difficult to sybil the network - for\n>>> > instance right now you can create \"SPV honeypots\" that allow incoming\n>>> > connections only from SPV nodes, thus attracting a disproportionate %\n>>> of\n>>> > the total SPV population given a relatively small number of nodes. You\n>>> > can then use that to harm SPV nodes by, for instance, making a % of\n>>> > transactions be dropped deterministicly, either by the bloom matching\n>>> > code, or when sent. Users unlucky enough to be surrounded by sybil\n>>> nodes\n>>> > will have their transactions mysteriously fail to arrive in their\n>>> > wallets, or have their transactions mysteriously never confirm. Given\n>>> > how few full nodes there are, it probably won't take very many\n>>> honeypots\n>>> > to pull off this attack, especially if you combine it with a\n>>> > simultaneous max connections or bloom io attack to degrade the capacity\n>>> > of honest nodes.\n>>>\n>>> Oh, here's an even better way to do the \"tx drop\" attack: when you drop\n>>> a transaction, make a fake one that pays the same scriptPubKeys with the\n>>> same amount, and send it to the SPV peer instead. They'll see the\n>>> transaction go through and show up in their wallet, but it'll look like\n>>> it got stuck and never confirmed. They'll soon wind up with a wallet\n>>> full of useless transactions, effectively locking them out of their\n>>> money.\n>>>\n>>> Here's another question for you Mike: So does bitcoinj have any\n>>> protections against peers flooding you with useless garbage? It'd be\n>>> easy to rack up a user's data bill for instance by just creating junk\n>>> unconfirmed transactions matching the bloom filter.\n>>>\n>>> --\n>>> 'peter'[:-1]@petertodd.org\n>>> 0000000000000018dcf5bcc3f018a05517ba1c479b432ba422015d4506496e55\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n>>> It's a free troubleshooting tool designed for production.\n>>> Get down to code-level detail for bottlenecks, with <2% overhead.\n>>> Download for free and get started troubleshooting in minutes.\n>>>\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n>> It's a free troubleshooting tool designed for production.\n>> Get down to code-level detail for bottlenecks, with <2% overhead.\n>> Download for free and get started troubleshooting in minutes.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/11c9bb99/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-17T12:35:41",
                "message_text_only": "There shouldn't be a \"smaller subset of Bloom filtering nodes\" because the\nidea of making it optional is a stupid one.\n\nIf you're worried about DoS, come up with real fixes instead of trying to\nbreak features that work.\n\n\nOn Sat, Aug 17, 2013 at 2:08 AM, Warren Togami Jr. <wtogami at gmail.com>wrote:\n\n> A sane default that better protects users could be...\n>\n> If (plugged into power) && (wifi) then non-bloom peers are OK.  It would\n> protect those users more than reliance upon on the smaller subset of bloom\n> nodes.  Scale back to the less secure behavior when battery and bandwidth\n> matters.\n>\n> Warren\n>\n>\n> On Fri, Aug 16, 2013 at 4:36 AM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> That change was made in response to user complaints. Heck we get\n>> complaints about battery life and bandwidth impact even with Bloom\n>> filtering. We can't just randomly start using peoples bandwidth for\n>> relaying blocks, especially as I guess most SPV nodes are behind NAT.\n>>\n>> If Gavin is right and the future is dominated by mobiles and tablets,\n>> then it will require a change of thinking in how P2P networks work. I think\n>> there are plenty of people with private servers who would be willing to run\n>> nodes though. I'm not too worried about this.\n>>\n>>\n>> On Fri, Aug 16, 2013 at 4:27 PM, Warren Togami Jr. <wtogami at gmail.com>wrote:\n>>\n>>> bitcoinj-0.10 release notes:\n>>>\n>>>    - We now require Bloom-capable (0.8+) peers by default and will\n>>>    disconnect from older nodes. This avoids accidental bandwidth saturation on\n>>>    mobile devices.\n>>>\n>>> Given the user-security concern that Peter brings up, reconsideration of\n>>> this new default behavior in SPV clients may be warranted.\n>>>\n>>>\n>>>\n>>> On Fri, Aug 16, 2013 at 4:15 AM, Peter Todd <pete at petertodd.org> wrote:\n>>>\n>>>> On Fri, Aug 16, 2013 at 10:01:16AM -0400, Peter Todd wrote:\n>>>> > Doing this also makes it more difficult to sybil the network - for\n>>>> > instance right now you can create \"SPV honeypots\" that allow incoming\n>>>> > connections only from SPV nodes, thus attracting a disproportionate %\n>>>> of\n>>>> > the total SPV population given a relatively small number of nodes. You\n>>>> > can then use that to harm SPV nodes by, for instance, making a % of\n>>>> > transactions be dropped deterministicly, either by the bloom matching\n>>>> > code, or when sent. Users unlucky enough to be surrounded by sybil\n>>>> nodes\n>>>> > will have their transactions mysteriously fail to arrive in their\n>>>> > wallets, or have their transactions mysteriously never confirm. Given\n>>>> > how few full nodes there are, it probably won't take very many\n>>>> honeypots\n>>>> > to pull off this attack, especially if you combine it with a\n>>>> > simultaneous max connections or bloom io attack to degrade the\n>>>> capacity\n>>>> > of honest nodes.\n>>>>\n>>>> Oh, here's an even better way to do the \"tx drop\" attack: when you drop\n>>>> a transaction, make a fake one that pays the same scriptPubKeys with the\n>>>> same amount, and send it to the SPV peer instead. They'll see the\n>>>> transaction go through and show up in their wallet, but it'll look like\n>>>> it got stuck and never confirmed. They'll soon wind up with a wallet\n>>>> full of useless transactions, effectively locking them out of their\n>>>> money.\n>>>>\n>>>> Here's another question for you Mike: So does bitcoinj have any\n>>>> protections against peers flooding you with useless garbage? It'd be\n>>>> easy to rack up a user's data bill for instance by just creating junk\n>>>> unconfirmed transactions matching the bloom filter.\n>>>>\n>>>> --\n>>>> 'peter'[:-1]@petertodd.org\n>>>> 0000000000000018dcf5bcc3f018a05517ba1c479b432ba422015d4506496e55\n>>>>\n>>>>\n>>>> ------------------------------------------------------------------------------\n>>>> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n>>>> It's a free troubleshooting tool designed for production.\n>>>> Get down to code-level detail for bottlenecks, with <2% overhead.\n>>>> Download for free and get started troubleshooting in minutes.\n>>>>\n>>>> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>>\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n>>> It's a free troubleshooting tool designed for production.\n>>> Get down to code-level detail for bottlenecks, with <2% overhead.\n>>> Download for free and get started troubleshooting in minutes.\n>>>\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n> It's a free troubleshooting tool designed for production.\n> Get down to code-level detail for bottlenecks, with <2% overhead.\n> Download for free and get started troubleshooting in minutes.\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130817/a011825b/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-08-17T13:41:43",
                "message_text_only": "On Sat, Aug 17, 2013 at 8:35 AM, Mike Hearn <mike at plan99.net> wrote:\n> There shouldn't be a \"smaller subset of Bloom filtering nodes\" because the\n> idea of making it optional is a stupid one.\n>\n> If you're worried about DoS, come up with real fixes instead of trying to\n> break features that work.\n\nIt is not just abstract worry.\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "John Dillon",
                "date": "2013-08-19T03:09:07",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn Fri, Aug 16, 2013 at 2:15 PM, Peter Todd <pete at petertodd.org> wrote:\n> On Fri, Aug 16, 2013 at 10:01:16AM -0400, Peter Todd wrote:\n>> Doing this also makes it more difficult to sybil the network - for\n>> instance right now you can create \"SPV honeypots\" that allow incoming\n>> connections only from SPV nodes, thus attracting a disproportionate % of\n>> the total SPV population given a relatively small number of nodes. You\n>> can then use that to harm SPV nodes by, for instance, making a % of\n>> transactions be dropped deterministicly, either by the bloom matching\n>> code, or when sent. Users unlucky enough to be surrounded by sybil nodes\n>> will have their transactions mysteriously fail to arrive in their\n>> wallets, or have their transactions mysteriously never confirm. Given\n>> how few full nodes there are, it probably won't take very many honeypots\n>> to pull off this attack, especially if you combine it with a\n>> simultaneous max connections or bloom io attack to degrade the capacity\n>> of honest nodes.\n>\n> Oh, here's an even better way to do the \"tx drop\" attack: when you drop\n> a transaction, make a fake one that pays the same scriptPubKeys with the\n> same amount, and send it to the SPV peer instead. They'll see the\n> transaction go through and show up in their wallet, but it'll look like\n> it got stuck and never confirmed. They'll soon wind up with a wallet\n> full of useless transactions, effectively locking them out of their\n> money.\n\nExcellent, and makes a mockery of zero-confirmation transactions to boot.\n\nCan be prevented by passing along txin proofs, but they require the full\ntransaction, so the effective UTXO set size would go up greatly post-pruning. I\nam sure Mike would love to demand that full nodes do this for their peers\nthough, at least until UTXO commitments are greated, at great cost to full\nnodes.\n\nOn the other hand, a tx with some txin proofs can be safely relayed by SPV\nnodes, an interesting concept. Do the UTXO commitment people have keeping proof\nsize small in mind?\n\n> Here's another question for you Mike: So does bitcoinj have any\n> protections against peers flooding you with useless garbage? It'd be\n> easy to rack up a user's data bill for instance by just creating junk\n> unconfirmed transactions matching the bloom filter.\n\nThat is good too.\n\nI'll bounty 2.5BTC to implement the first attack, and 0.5BTC for the second.\nShould be easy to do as a patch to satoshi bitcoin I think. The implementation\nmust include a RFC3514 compliant service bit to let peers know of the operators\nintentions. Along those lines I'll donate 3BTC to adding service bit selection\nto DNS seeds.\n\nWe should clearly show people the limitations of SPV before they depend too\nmuch on it. Nothing wakes users up like a 21 million BTC transaction in their\nwallet.\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQEcBAEBCAAGBQJSEYvxAAoJEEWCsU4mNhiPxI8IAJaWJ9s0YG3Ex5h8Dr6oPJ9M\nuXTXa/Rt0DqS6mmyD9O80sXfgPbPbQa2rDL6imlqONaWfpXFZl2W9vxRGaZJ9wrr\n3KBHzK8lasDOKqlEX92h8ZmQBjw4w5bK/heRLo1PnSZ8ojKn8+My1JvZWOPzF0Ct\ntDXXuCE94csKuGRdmdDdVoXqy4XZaMQhHrGbrWVotQs1HzX3iK146GoGaZC0YyBx\ncdWg/xDPtAxgb5zf2RSeNHfXeY0wZawe8vBxaS56gCRl54PG7fJvqL+YPcarNb1p\nzEmahJjoyQHskjFeDpgEiXnWu3K3JGTSA5GvekWvBbJCcV4o1E6EI6LG0f1SfIs=\n=12DC\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2013-08-19T03:17:12",
                "message_text_only": "On Mon, Aug 19, 2013 at 03:09:07AM +0000, John Dillon wrote:\n> That is good too.\n> \n> I'll bounty 2.5BTC to implement the first attack, and 0.5BTC for the second.\n> Should be easy to do as a patch to satoshi bitcoin I think. The implementation\n> must include a RFC3514 compliant service bit to let peers know of the operators\n> intentions. Along those lines I'll donate 3BTC to adding service bit selection\n> to DNS seeds.\n\nWould you please delay these bounties for a few weeks while things\nsettle down. The service bit selection is fine, but for the other two a\nmonth would be appreciated.\n\nThanks\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130818/eed71233/attachment.sig>"
            },
            {
                "author": "John Dillon",
                "date": "2013-08-19T05:00:18",
                "message_text_only": "-----BEGIN PGP MESSAGE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\nhQEMA8xUMVQPvvGFAQf9HL/SN/TZNQuVAjz5ggDzVzpYEzLRkFlgTR2lPURaR28F\nG0SgcvJmt1cvucxZRxzSUDCx58Ub16dzx9IBKQ+GDDUXbHGqExfbeIFx96okNsSm\nGmRRyORm+L7rdpQ3G8HcfKr1R9YufgaAjsa05eXlXl+fgpYrSBgitY6T3IZ9c0Z7\neF6yjogj5iaDUP2m7xLmRyaQvT/0GdRYk+c2JOH0HGGQ2WWylPMiczJmKmV4jrDd\n6asoesEk5kH0IWM2xiY2re+/WkRVeNUlVT7R4+uIzQm/iMzKpIWNiF5a87x3+E9+\n+KgJg1a4elKZ6UO4Bvov+Gw65u7q3eunVUYHUKfaLIUBDAO4Pc5vOCVNqAEIAJyT\nqFTqTbV9XE+REN/1KVmRLgidcRcxnSFFnkUVUozdMev8oGqoW3iAs8rVr5DuSO/a\nFW0UOdI9vBLC51+pdbBNoR9c1saheRbnTks67kLziQmuBFkly6cbLYUyh859pA3K\nyjRaRLa1Q6IX76NZTdEc3F7XnfmMBwEFS2t9vSAqhFptAXlhnmKov+g7iJ8oaAWQ\n361OcXvxPk6wmWKFroZIo1is0a3izoAcLFB9NWv7BU9I06XB3Gw5gVnzXQexTlV+\nKHd8zeJYfc1IaPLdxefhp8tfrJIjAOXq9FmKjgB5Qki8cgCWM1pJIJK0t4XTVxI6\n8LU1aldq5Qlond0aIBfS6QFErTFtVYmFLjl8YETcphBZAOSb6Rgudrz9mAL1brOu\nfjg9aVTSTjWjFHflRFSpNKVjj+5zS93NMEEaNQmWjeexScw175DVKJoU6lnVFgfk\nI7d+Lf5axVwlawZ+euN9YURE1azWUR4OECfDvd6Na8MGs+OwedbWP5/OfDGg2rzN\nOG/SK5AxlrshrOmrY7emlMOhYIhd8A+KQ0ghLocTv8JVDvaIEnWkWEq4idhzOv4m\n9xFmde45SOxy/PuReDEgGAS3S1IOMMzdkEH8yuzYf2cFzQ0d4PmHNn6NGDo9bEIV\nBjw9pqg5rg+8un14T3+c9ZbfkEvLB+sEQ9uVidg9jE1ZSH/l9XG0stbSnnDmAkYy\nDbbA7WDsJ0fxQD1zvnDUlq84I2Fr5RwecOWuCUUUHGXdfe0AnxGL1k96Jd0t3BXj\nJbY5fBUbN1QTuwqUSUBhE8uE7gGVZyWHel+DtKxwpIkpQ/CPLxFWJQL8oswN4Re+\nCgS1Fs/P2MJdb0ht8cTTdFUEIKYW41eG84Vgpyn7gwd/IE1gPdpsDtoAV8uwIXsJ\nWBHtYgO/cH3ofyITOcsm7gfkI3V4T87I3Sjrnk0ipa6fWh8dwhZnG1s5b7lKVgAp\nQOqgWdjoP+4/FWCCpo9EVWqRfRU7js/TfuKOBiLDpKEkdmmuCOiMlxe5vt5FUHbq\nwT0V5Iian5GcqZvJ/CZWzAxMY+qXu/OziI9Emvz5AA/yWymcHJl2M8RY+L+fVB67\n/JSsHl0xQLHehKIFZKuTacy87pRHCoq7vA72lm+XCqC7+RojzPwODia7ShCfrZe2\nYctdU/VWVMMgkpLcGxRMRFc2Rxbbge3kEQCt+b7lL7HVq0vsBoF4g3X4kzLxxyeD\nJiR8PHknlWOjy5KgseKzTCt3sygvyJZrEPQ5SiBtoAkLgmEzkOxiy1DHrj59soM9\nQY7L3XTLLOya4daL5+iZjZXm28JNXAYycAu3fyXx7rnbL6m/gcGjJZiuwwajMvmF\nWvjbJBm9f5qOxK87ShnPj2ZwQ1w1nnz7i5oOdtELwUb96uMFegNDRSfMNpN4pmTh\n2Qpffp9QZMEOxE+a7SnNjq5xG4S3qTnhdhTzQL5sIC+yJZ7L2gdbbrjdud2gcKRc\nyQIkst51OIV6/xJ65AD6qzIcifpLm+u5/t6eVGLvw0G8u3gFHgelM1kPfX8iYDOR\nCTDnJxx30/GXEvqD4/nCm5JytgolzH/PilBME1w2dPf845HebA0XCAhSoqdoLCvF\n7jrllVCh/PDlK40XbO/cDYgXF7deDbgXVF2OBGc6qqAho3VE83ebR1wQWlUOyPIo\nScQyePNu500Yy/GUnwBK7029N4r6R1RBDn/rTsD/2w==\n=6OvE\n-----END PGP MESSAGE-----"
            },
            {
                "author": "John Dillon",
                "date": "2013-08-19T05:34:07",
                "message_text_only": "My apologies, that was for Peter\n\nOn Mon, Aug 19, 2013 at 5:00 AM, John Dillon\n<john.dillon892 at googlemail.com> wrote:\n> -----BEGIN PGP MESSAGE-----\n> Version: GnuPG v1.4.11 (GNU/Linux)\n>\n> hQEMA8xUMVQPvvGFAQf9HL/SN/TZNQuVAjz5ggDzVzpYEzLRkFlgTR2lPURaR28F\n> G0SgcvJmt1cvucxZRxzSUDCx58Ub16dzx9IBKQ+GDDUXbHGqExfbeIFx96okNsSm\n> GmRRyORm+L7rdpQ3G8HcfKr1R9YufgaAjsa05eXlXl+fgpYrSBgitY6T3IZ9c0Z7\n> eF6yjogj5iaDUP2m7xLmRyaQvT/0GdRYk+c2JOH0HGGQ2WWylPMiczJmKmV4jrDd\n> 6asoesEk5kH0IWM2xiY2re+/WkRVeNUlVT7R4+uIzQm/iMzKpIWNiF5a87x3+E9+\n> +KgJg1a4elKZ6UO4Bvov+Gw65u7q3eunVUYHUKfaLIUBDAO4Pc5vOCVNqAEIAJyT\n> qFTqTbV9XE+REN/1KVmRLgidcRcxnSFFnkUVUozdMev8oGqoW3iAs8rVr5DuSO/a\n> FW0UOdI9vBLC51+pdbBNoR9c1saheRbnTks67kLziQmuBFkly6cbLYUyh859pA3K\n> yjRaRLa1Q6IX76NZTdEc3F7XnfmMBwEFS2t9vSAqhFptAXlhnmKov+g7iJ8oaAWQ\n> 361OcXvxPk6wmWKFroZIo1is0a3izoAcLFB9NWv7BU9I06XB3Gw5gVnzXQexTlV+\n> KHd8zeJYfc1IaPLdxefhp8tfrJIjAOXq9FmKjgB5Qki8cgCWM1pJIJK0t4XTVxI6\n> 8LU1aldq5Qlond0aIBfS6QFErTFtVYmFLjl8YETcphBZAOSb6Rgudrz9mAL1brOu\n> fjg9aVTSTjWjFHflRFSpNKVjj+5zS93NMEEaNQmWjeexScw175DVKJoU6lnVFgfk\n> I7d+Lf5axVwlawZ+euN9YURE1azWUR4OECfDvd6Na8MGs+OwedbWP5/OfDGg2rzN\n> OG/SK5AxlrshrOmrY7emlMOhYIhd8A+KQ0ghLocTv8JVDvaIEnWkWEq4idhzOv4m\n> 9xFmde45SOxy/PuReDEgGAS3S1IOMMzdkEH8yuzYf2cFzQ0d4PmHNn6NGDo9bEIV\n> Bjw9pqg5rg+8un14T3+c9ZbfkEvLB+sEQ9uVidg9jE1ZSH/l9XG0stbSnnDmAkYy\n> DbbA7WDsJ0fxQD1zvnDUlq84I2Fr5RwecOWuCUUUHGXdfe0AnxGL1k96Jd0t3BXj\n> JbY5fBUbN1QTuwqUSUBhE8uE7gGVZyWHel+DtKxwpIkpQ/CPLxFWJQL8oswN4Re+\n> CgS1Fs/P2MJdb0ht8cTTdFUEIKYW41eG84Vgpyn7gwd/IE1gPdpsDtoAV8uwIXsJ\n> WBHtYgO/cH3ofyITOcsm7gfkI3V4T87I3Sjrnk0ipa6fWh8dwhZnG1s5b7lKVgAp\n> QOqgWdjoP+4/FWCCpo9EVWqRfRU7js/TfuKOBiLDpKEkdmmuCOiMlxe5vt5FUHbq\n> wT0V5Iian5GcqZvJ/CZWzAxMY+qXu/OziI9Emvz5AA/yWymcHJl2M8RY+L+fVB67\n> /JSsHl0xQLHehKIFZKuTacy87pRHCoq7vA72lm+XCqC7+RojzPwODia7ShCfrZe2\n> YctdU/VWVMMgkpLcGxRMRFc2Rxbbge3kEQCt+b7lL7HVq0vsBoF4g3X4kzLxxyeD\n> JiR8PHknlWOjy5KgseKzTCt3sygvyJZrEPQ5SiBtoAkLgmEzkOxiy1DHrj59soM9\n> QY7L3XTLLOya4daL5+iZjZXm28JNXAYycAu3fyXx7rnbL6m/gcGjJZiuwwajMvmF\n> WvjbJBm9f5qOxK87ShnPj2ZwQ1w1nnz7i5oOdtELwUb96uMFegNDRSfMNpN4pmTh\n> 2Qpffp9QZMEOxE+a7SnNjq5xG4S3qTnhdhTzQL5sIC+yJZ7L2gdbbrjdud2gcKRc\n> yQIkst51OIV6/xJ65AD6qzIcifpLm+u5/t6eVGLvw0G8u3gFHgelM1kPfX8iYDOR\n> CTDnJxx30/GXEvqD4/nCm5JytgolzH/PilBME1w2dPf845HebA0XCAhSoqdoLCvF\n> 7jrllVCh/PDlK40XbO/cDYgXF7deDbgXVF2OBGc6qqAho3VE83ebR1wQWlUOyPIo\n> ScQyePNu500Yy/GUnwBK7029N4r6R1RBDn/rTsD/2w==\n> =6OvE\n> -----END PGP MESSAGE-----"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-08-19T05:11:40",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n\nOn 8/18/13 8:09 PM, John Dillon wrote:\n> On the other hand, a tx with some txin proofs can be safely relayed by SPV\n> nodes, an interesting concept. Do the UTXO commitment people have\nkeeping proof\n> size small in mind?\nMore than a kilobyte, probably less than a few tens of kilobytes. It\ndepends on parameters (branching factor, script vs hash(script)) that\nare tweakable with time/space and long-term/short-term tradeoffs.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.19 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJSEakMAAoJEAdzVfsmodw4B9wQAIu82nxMAyMiTpFcWW6v0fQ9\n26bzOznyIhzAlFUeCXvgwtqoxjRcheLOnsFsAr0TLdLYrx00o4+MS0GepV40gEpd\nDs/itvAnW8aWdCls0qy1hljWrsp8R3IfXWchXy13kjOhTIx8JaALeHEzOCsJVxCf\nnWrV7UNLRO1eXhLUnFLnZ3/HdljMZnLqLexSGXorn4I2zwg5HGNMJxIenU3vDj8s\n68k4rSk/eUptG97ZmJxCysn7nt5F1cxRutsVOPxsC/4+FptMYf9YJRJDNpvttYyl\nztI2xV+ARfEvSZs0lqGAcpvKwVV4IvZDGXhUCiS6LQ99tvMid4kjIGYPwlyK6SJW\nLoYVbvjbauEIPn4URW8XilMB5EEJisr5/7ZV/aDLEFcBA/is5ePuQioo/81yOWUw\nk5PghJ/TBMBQhxOGCz86onCI1YwrWfhu2sz6xNIHm9lbyZQcw3N/ai77FQqxxkxp\niBbIAvhk4sQ7lPt4QHmiL4isPzaiScKVTjvzfc5hAHSmu6xQysf8VA/SwUSgAJZB\niUPYRz5URaw8a/WDlo7YA6BRV/l7RloEcWGs6br3jVYxtJSaxqDwwrUV3SdDtzBR\nuiE1OVPp8ihY3OJbnZkbvy3lXXlLjwrLVwMUgprhUo793QtktZH+O0V+StcGKLGD\n4rdK6Z3C8Wx9FY2fvkBy\n=HZdx\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-19T09:16:12",
                "message_text_only": "On Mon, Aug 19, 2013 at 5:09 AM, John Dillon\n<john.dillon892 at googlemail.com>wrote:\n\n> > Here's another question for you Mike: So does bitcoinj have any\n> > protections against peers flooding you with useless garbage? It'd be\n> > easy to rack up a user's data bill for instance by just creating junk\n> > unconfirmed transactions matching the bloom filter.\n>\n\nUnconfirmed transactions that are received show up as unspendable and in\nmost wallets they have a little graphic that changes as more peers announce\nthe tx. So if a peer sent non-existent transactions then they'd allow show\nup as seen by only one peer, which would look different to how normal\nbroadcast transactions show up.\n\nWhether users really notice this graphic or understand what it means is\ndebatable, of course, but all Bitcoin wallets have that problem. I've yet\nto see any that would successfully communicate the notion of confidence to\nnew, untrained users. That's why the default is to not let you spend\nunconfirmed transactions, unless they were created by yourself (you're\nallowed to spend change).\n\nbitcoinj does not attempt to handle DoS attacks by malicious remote peers\ntoday, because such an attack has never been observed, has no obvious\nprofit motive and as you don't get to choose which nodes the wallets\nconnect to it'd be difficult to pull off. Unless you control the users\ninternet connection of course, but that's a well known caveat which is\ndocumented on the website.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/8da38df9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Gavin's post-0.9 TODO list...",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Warren Togami Jr.",
                "John Dillon",
                "Mike Hearn",
                "Peter Todd",
                "Gregory Maxwell",
                "Gavin Andresen",
                "Mark Friedenbach",
                "Melvin Carvalho"
            ],
            "messages_count": 27,
            "total_messages_chars_count": 67386
        }
    },
    {
        "title": "[Bitcoin-development] BIP 32.5",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2013-08-16T02:26:29",
                "message_text_only": "I am wondering if we shouldn't have a BIP32 addendum which makes the\nfollowing signing related recommendations:\n\n(1) Recommend a specific deterministic DSA derandomization procedure\n(a deterministic way to generate the DSA nonce), presumably one based\non HMAC-SHA512 (since BIP32 uses that construct) or SHA256 in the\nstyle of RFC 6979.\n\nDSA systems being compromised due to poor randomness at runtime is not\nnew. It effected other systems before it effected Bitcoin systems,\nit's not a new problem and it's not going away.  It's difficult to\ntell if an implementation is correct or not.\n\nUse of a fully deterministic signature  would allow for complete test\nvectors in signing and complete confidence that there is no random\nnumber related weakness in a signing implementation.\n\nIn particular, with relevance to our ecosystem a maliciously modified\ndifficult to audit hardware wallet could be leaking its keys material\nvia its signatures. Even without producing insecure K values it could\nuse the choice of K to leak a couple bits of an encrypted root key\nwith every signature, and allow the malicious party to recover the\nkeys by simply observing the network. Making the signatures\ndeterministic would make this kind of misbehavior practically\ndiscoverable.\n\nWe wouldn't be alone in making this change, in general industry is\nmoving in this direction because it has become clear that DSA is a\nhazard otherwise.\n\nThe primary arguments in most spaces against derandomizing DSA are\nFIPS conformance (irrelevant for us) and reasonable concerns about the\nrisks of using a (less) reviewed cryptographic construct. With\nwidespread motion towards derandomized DSA this latter concern is less\nof an issue.\n\nLibcrypt has also implemented derandomized DSA in git. The ed25519\nsignature system of DJB, et. al. also uses a similar derandomization.\n\nAn alternative is implementing a still random construct where K is\nsome H(message||key||random) which should remain secure even where the\nrandomness is poor, but this loses the advantage of being able to\nexternally verify that an implementation is not leaking information.\nOpenSSL development has implemented a form of this recently.\n\nSee also: http://tools.ietf.org/rfc/rfc6979.txt\n\n(2) Recommends a procedure for using only even S values in signatures,\neliminating this source of mutability in transactions.\n\nThis can be accomplished via post-processing of existing signatures,\nbut since it requires bignum math it is usually preferable to\nimplement it along with signing.  I believe someday this will become a\nnetwork requirement for Bitcoin, but regardless it makes sense to\nimplement it as a best practice sooner rather than later.\n\nThoughts?"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-16T11:32:39",
                "message_text_only": "I filed a bug in the bitcoinj tracker for this a few days ago referencing\nrfc 6967, but that RFC is very complicated and I'm not sure it's really\nnecessary to go that far. H(sighash||key) is easy to implement and I feel I\nunderstand it better.\n\nIn our case it wouldn't have helped anyway - if anything it would just\ndelayed discovery of the underlying weakness. The same RNG is typically\nused to generate both keys and signatures today. However in future it may\nbe the case that people put more effort into generating a really random key\nbecause they only have to do it once, and then the signing RNG would be\ndifferent.\n\nYour concern about hardware devices leaking private key bits via a side\nchannel is also well made, although I think you have to find some way to\nestablish trust in these devices anyway as sniffing all their IO traffic\nand analysing it is really hard (plus it inverts the threat model - if you\ntrust your computer and not your hardware wallet, why do you have a\nhardware wallet?)\n\nThe other advantage is that deterministic keys and signatures together mean\ntwo instances of the same wallet generate identical transactions given an\nidentical sequence of commands. This could help keep wallets in sync. For\nexample we had a few users who got confused because they had cloned their\nAndroid wallets across devices (NOT SUPPORTED!) and then one device updated\nfirst, did key rotation, and then the other device showed a transaction\nthat sent all their money to a new address it knew nothing about. If they\ndidn't realise the other device had updated this looked identical to theft!\n\nI don't think fractional BIP numbers are the way to go :) but a new BIP\nthat standardised a way to select K would, if reviewed, be something I'd\nimplement.\n\n\nOn Fri, Aug 16, 2013 at 4:26 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> I am wondering if we shouldn't have a BIP32 addendum which makes the\n> following signing related recommendations:\n>\n> (1) Recommend a specific deterministic DSA derandomization procedure\n> (a deterministic way to generate the DSA nonce), presumably one based\n> on HMAC-SHA512 (since BIP32 uses that construct) or SHA256 in the\n> style of RFC 6979.\n>\n> DSA systems being compromised due to poor randomness at runtime is not\n> new. It effected other systems before it effected Bitcoin systems,\n> it's not a new problem and it's not going away.  It's difficult to\n> tell if an implementation is correct or not.\n>\n> Use of a fully deterministic signature  would allow for complete test\n> vectors in signing and complete confidence that there is no random\n> number related weakness in a signing implementation.\n>\n> In particular, with relevance to our ecosystem a maliciously modified\n> difficult to audit hardware wallet could be leaking its keys material\n> via its signatures. Even without producing insecure K values it could\n> use the choice of K to leak a couple bits of an encrypted root key\n> with every signature, and allow the malicious party to recover the\n> keys by simply observing the network. Making the signatures\n> deterministic would make this kind of misbehavior practically\n> discoverable.\n>\n> We wouldn't be alone in making this change, in general industry is\n> moving in this direction because it has become clear that DSA is a\n> hazard otherwise.\n>\n> The primary arguments in most spaces against derandomizing DSA are\n> FIPS conformance (irrelevant for us) and reasonable concerns about the\n> risks of using a (less) reviewed cryptographic construct. With\n> widespread motion towards derandomized DSA this latter concern is less\n> of an issue.\n>\n> Libcrypt has also implemented derandomized DSA in git. The ed25519\n> signature system of DJB, et. al. also uses a similar derandomization.\n>\n> An alternative is implementing a still random construct where K is\n> some H(message||key||random) which should remain secure even where the\n> randomness is poor, but this loses the advantage of being able to\n> externally verify that an implementation is not leaking information.\n> OpenSSL development has implemented a form of this recently.\n>\n> See also: http://tools.ietf.org/rfc/rfc6979.txt\n>\n> (2) Recommends a procedure for using only even S values in signatures,\n> eliminating this source of mutability in transactions.\n>\n> This can be accomplished via post-processing of existing signatures,\n> but since it requires bignum math it is usually preferable to\n> implement it along with signing.  I believe someday this will become a\n> network requirement for Bitcoin, but regardless it makes sense to\n> implement it as a best practice sooner rather than later.\n>\n> Thoughts?\n>\n>\n> ------------------------------------------------------------------------------\n> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n> It's a free troubleshooting tool designed for production.\n> Get down to code-level detail for bottlenecks, with <2% overhead.\n> Download for free and get started troubleshooting in minutes.\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/2fc1bc5d/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-08-16T13:29:11",
                "message_text_only": "On Fri, Aug 16, 2013 at 01:32:39PM +0200, Mike Hearn wrote:\n> and analysing it is really hard (plus it inverts the threat model - if you\n> trust your computer and not your hardware wallet, why do you have a\n> hardware wallet?)\n\nMyself I would trust neither the hardware wallet nor my computer...\n\nSo looks like the first version of the TREZOR won't support multisig -\nhow far away are we from support? What about other manufacturers?\n\nP2SH support is probably going to be a major sticking point. The payment\nprotocol is all well and good, but it doesn't (yet) help getting money\nto the individual. bitcoinj P2SH support for sending would be a major\nhelp here - lots of person-to-person trades happen via Android wallets.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000b9656276a0fdab028ca759c3fd7f951fb20196c264b5cd1ce\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/4545a0a4/attachment.sig>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2013-08-16T19:37:50",
                "message_text_only": "I personally like the full-measure of eliminating the \"CS-PRNG\" entirely  \n from signing. If the \"random\" component is assumed to be untrusted,  \nkeeping it in there adds no value, while eschewing the main benefit of  \ndeterministic signing (ease of testing, auditing)\n\nThis just leaves the CS-PRNG at the heart of the security system -- when  \ngenerating the root master key of an HD wallet. Adding to what Mike said,  \na single invocation of a CS-PRNG driving all subsequent keys increases the  \nattack value if that one invocation turns out to be weak. By comparison,  \nat least compromised DSA signatures were one-off events which didn't allow  \ntheft of funds beyond the one compromised address.\n\nCumulative / rolling entropy collection over time through multiple CS-PRNG  \ninvocations, or multiple entropy sources, could serve to recover from an  \n\"occasionally weak\" CS-PRNG. I've read claims that this is bad practice  \nbecause a single low entropy source can take entropy out of the result,  \nbut this seems like FUD. If you're using SHA512-HMAC to hash chain a few  \nentropy sources, even \"return 4; // chosen by random dice roll\" is not  \ngoing to help, but it's not going to hurt.\n\nThe DSA 'repeated-k' basically advertises itself on the block-chain and  \npeople were actively scanning for this weakness, whereas a weak key in the  \nBIP32 root might not be as apparent, so exploitation may be more  \ndifficult, but also more insidious. Of course this depends on the exact  \nfailure mode of the CS-PRNG being used -- I wonder if anyone is searching  \nfor BIP32 keys based off of one of the 32k Debian random numbers being  \nused as a master key?\n\nSmartphones in particular have lots of sensors which could provide  \nentropy. For example, if you pulled 64 bytes from \"secure random\", you  \ncould at least HMAC that with the SHA512 of a picture or a short video  \nsample taken by the user. I'm guessing some people would cringe at this,  \nbut it seems to me like it provides some measure of protection to justify  \nthe increased code complexity.\n\nTL;DR - Really like the idea of minimizing CS-PRNG use whenever possible  \n(deterministic signing) and also would love to learn more best practices  \nfor placing less trust in the so called \"CS-PRNG\" when we do have to use  \nthem.\n\nThanks,\nJeremy"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-08-20T08:35:29",
                "message_text_only": "On Thu, Aug 15, 2013 at 7:26 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> I am wondering if we shouldn't have a BIP32 addendum which makes the\n> following signing related recommendations:\n\nLooks like we're in the midst of another DSA duplicated K disaster.\n(Now, blockchain.info mywallet)\n\nI talked to Pieter about this some earlier today and he sounded pretty\npositive. I'll go ahead and start on an actual BIP document for it."
            }
        ],
        "thread_summary": {
            "title": "BIP 32.5",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Jeremy Spilman",
                "Gregory Maxwell",
                "Peter Todd"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 11946
        }
    },
    {
        "title": "[Bitcoin-development] LevelDB in master",
        "thread_messages": [
            {
                "author": "Luke-Jr",
                "date": "2013-08-16T09:39:16",
                "message_text_only": "Now-merged pull request #2702 appears to have put the master branch on an \nunofficial Ripple fork of LevelDB, rather than merely updating us to LevelDB \n1.12.0. While Vinnie did somewhat disclose this, I don't see any evidence the \nnature of this was fully understood by others. As I understood the pull \nrequest, the \"Ripple and Bitcoin fork\" was just LevelDB with the changes we \nhad already made. Mike's comments on the pull request (his audit) suggest that \nthis may have been the case in an earlier revision of it. But in fact, there \nappear to be a number of other changes included in what was finally merged a \nfew weeks ago. Furthermore, Ripple's fork did not do a proper git merge of \nupstream, thus there is a break in git history, and, more importantly, a \nnumber of upstream fixes (including some we have had reported to the Bitcoin \nissue tracker) were not included in this merge.\n\nI've pushed three branches to https://github.com/luke-jr/leveldb :\n  bitcoin-1.5   Our old/unreleased LevelDB 1.5 fork, for reference\n  bitcoin       Our LevelDB 1.7 fork, included in 0.8.x\n  bitcoin-up    Our LevelDB 1.7 fork, merged with upstream LevelDB 1.12\n\nA diff from current master (Ripple LevelDB 1.12 fork) to bitcoin-up:\n  https://gist.github.com/luke-jr/6248543\n\nThoughts?\n\nLuke\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 1530 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/e18f1703/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-08-16T09:52:43",
                "message_text_only": "On Fri, Aug 16, 2013 at 09:39:16AM +0000, Luke-Jr wrote:\n> Now-merged pull request #2702 appears to have put the master branch on an \n> unofficial Ripple fork of LevelDB, rather than merely updating us to LevelDB \n> 1.12.0. While Vinnie did somewhat disclose this, I don't see any evidence the \n> nature of this was fully understood by others. As I understood the pull \n> request, the \"Ripple and Bitcoin fork\" was just LevelDB with the changes we \n> had already made. Mike's comments on the pull request (his audit) suggest that \n> this may have been the case in an earlier revision of it. But in fact, there \n> appear to be a number of other changes included in what was finally merged a \n> few weeks ago. Furthermore, Ripple's fork did not do a proper git merge of \n> upstream, thus there is a break in git history, and, more importantly, a \n> number of upstream fixes (including some we have had reported to the Bitcoin \n> issue tracker) were not included in this merge.\n> \n> I've pushed three branches to https://github.com/luke-jr/leveldb :\n>   bitcoin-1.5   Our old/unreleased LevelDB 1.5 fork, for reference\n>   bitcoin       Our LevelDB 1.7 fork, included in 0.8.x\n>   bitcoin-up    Our LevelDB 1.7 fork, merged with upstream LevelDB 1.12\n> \n> A diff from current master (Ripple LevelDB 1.12 fork) to bitcoin-up:\n>   https://gist.github.com/luke-jr/6248543\n> \n> Thoughts?\n\nI ran into this problem while auditing Litecoin actually: the tools to\naudit that a set of git patches/merges actually match upstream (or\ndownstream for litecoin) don't really exist yet. In this case manually\nchecking that individual files matched would have probably worked, but\nit'd be good to automate the process.\n\nI can't say I've looked into any of this in detail, but you're right to\nbring up the issue.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130816/346cbd2d/attachment.sig>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-08-17T20:53:36",
                "message_text_only": "On Fri, Aug 16, 2013 at 11:52 AM, Peter Todd <pete at petertodd.org> wrote:\n> On Fri, Aug 16, 2013 at 09:39:16AM +0000, Luke-Jr wrote:\n>> Now-merged pull request #2702 appears to have put the master branch on an\n>> unofficial Ripple fork of LevelDB, rather than merely updating us to LevelDB\n>> 1.12.0. While Vinnie did somewhat disclose this, I don't see any evidence the\n>> nature of this was fully understood by others. As I understood the pull\n>> request, the \"Ripple and Bitcoin fork\" was just LevelDB with the changes we\n>> had already made. Mike's comments on the pull request (his audit) suggest that\n>> this may have been the case in an earlier revision of it. But in fact, there\n>> appear to be a number of other changes included in what was finally merged a\n>> few weeks ago. Furthermore, Ripple's fork did not do a proper git merge of\n>> upstream, thus there is a break in git history, and, more importantly, a\n>> number of upstream fixes (including some we have had reported to the Bitcoin\n>> issue tracker) were not included in this merge.\n>>\n>> I've pushed three branches to https://github.com/luke-jr/leveldb :\n>>   bitcoin-1.5   Our old/unreleased LevelDB 1.5 fork, for reference\n>>   bitcoin       Our LevelDB 1.7 fork, included in 0.8.x\n>>   bitcoin-up    Our LevelDB 1.7 fork, merged with upstream LevelDB 1.12\n>>\n>> A diff from current master (Ripple LevelDB 1.12 fork) to bitcoin-up:\n>>   https://gist.github.com/luke-jr/6248543\n\nThanks for investigating this. I guess it's my fault for not checking\nthe diff before the final merge. I guess the simultaneous switch to a\ngit-subtree'd leveldb made it harder to review.\n\nIn any case, the changes seem harmless, but I think we should revert\nto a codebase as close as possible to upstream LevelDB 1.12. The diff\nyou have between bitcoin head and bitcoin-up shows a few reverted\npatches that we included during 0.9's merge window, a patch by ripple\nto add a compaction delay (which they seem to have reverted now too)\nand one weird ripple-specific commit (which just seems to remove\nissue178_test.cc).\n\nI've put a cleaned-up history of the LevelDB subtree in the\nhttp://github.com/bitcoin/leveldb repository (branch bitcoin-fork),\nand then used git-subtree to create a pull request (#2907) which\nswitches our src/leveldb directory to this tree. It correctly lists\nthe reverted (and sometimes re-applied) changes in the squashed commit\n(please review!). The actual diff corresponds to the diff you\nproduced, with the reverted changes in our repository re-applied.\n\n-- \nPieter"
            }
        ],
        "thread_summary": {
            "title": "LevelDB in master",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Pieter Wuille",
                "Peter Todd"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 6228
        }
    },
    {
        "title": "[Bitcoin-development] Combining bloom filters?",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2013-08-17T14:00:32",
                "message_text_only": "Consider wallet A builds bloom filter A' and wallet B builds bloom\nfilter B'.  Can A' and B' be or'd together to form a single bloom\nfilter C' ?\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "bitcoin-list at bluematt.me",
                "date": "2013-08-17T14:03:41",
                "message_text_only": "Under some conditions, yes. The filters must have the same parameters (tweak, size, hash count). Bitcoinj implements this in its BloomFilter class.\n\nMatt\n\nJeff Garzik <jgarzik at bitpay.com> wrote:\n>Consider wallet A builds bloom filter A' and wallet B builds bloom\n>filter B'.  Can A' and B' be or'd together to form a single bloom\n>filter C' ?\n>\n>-- \n>Jeff Garzik\n>Senior Software Engineer and open source evangelist\n>BitPay, Inc.      https://bitpay.com/\n>\n>------------------------------------------------------------------------------\n>Get 100% visibility into Java/.NET code with AppDynamics Lite!\n>It's a free troubleshooting tool designed for production.\n>Get down to code-level detail for bottlenecks, with <2% overhead. \n>Download for free and get started troubleshooting in minutes. \n>http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130817/0bed300e/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-08-17T14:15:31",
                "message_text_only": "If both constructed bloom filters use the same seed and the same number of\nhash functions, yes. Assuming the input filters were optimal for a given FP\nrate, the resulting filter will be worse.\n\n-- \nPieter\n On 17 Aug 2013 16:01, \"Jeff Garzik\" <jgarzik at bitpay.com> wrote:\n\n> Consider wallet A builds bloom filter A' and wallet B builds bloom\n> filter B'.  Can A' and B' be or'd together to form a single bloom\n> filter C' ?\n>\n> --\n> Jeff Garzik\n> Senior Software Engineer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n> It's a free troubleshooting tool designed for production.\n> Get down to code-level detail for bottlenecks, with <2% overhead.\n> Download for free and get started troubleshooting in minutes.\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130817/410af489/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Combining bloom filters?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "bitcoin-list at bluematt.me",
                "Pieter Wuille"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 2843
        }
    },
    {
        "title": "[Bitcoin-development] NODE_BLOOM BIP",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-08-18T02:59:32",
                "message_text_only": "My draft is as follows.\n\nGregory Maxwell: Can you assign a BIP # for this? The next number, 38,\nis on the wiki as \"Passphrase-protected private key\" by Mike Caldwell,\nalthough it isn't in the list so I don't know if that is official or\nnot.\n\n\n\nBIP: ?\nTitle: NODE_BLOOM service bit\nAuthor: Peter Todd <pete at petertodd.org>\nType: Standards Track (draft)\nCreated: 17-08-2013\n\nAbstract\n========\n\nThis BIP extends BIP 37, Connection Bloom filtering, by defining a service bit\nto allow peers to advertise that they support bloom filters explicitly.\n\n\nMotivation\n==========\n\nBIP 37 did not specify a service bit for the bloom filter service, thus\nimplicitly assuming that all nodes that serve peers data support it. There are\nhowever cases where a node may want to provide data, such as mempool\ntransactions and blocks, but do not want to or have not implemented bloom\nfiltering. Additionally it is good practice for nodes to be given options as to\nthe granularity of the services they are providing the public - a full-node\noperator may be able to donate only a small amount of bandwidth and may want\nthose efforts to be used by other full-node operators.\n\n\nSpecification\n=============\n\nThe following protocol bit is added:\n\n    NODE_BLOOM = (1 << 1)\n\nIn addition the protocol version is increased from 70001 to 70002 in the\nreference implementation. Nodes that support bloom filters should set that\nprotocol bit. Otherwise it should remain unset.\n\nNODE_BLOOM is distinct from NODE_NETWORK, and it is legal to advertise\nNODE_BLOOM but not NODE_NETWORK.\n\nIf a node does not support bloom filters but receives a \"filterload\",\n\"filteradd\", or \"filterclear\" message from a peer the node should disconnect\nthat peer immediately.\n\nWhile outside the scope of this BIP it is suggested that DNS seeds and other\npeer discovery mechanisms support the ability to specify the services required;\ncurrent implementations simply check only that NODE_NETWORK is set.\n\n\nDesign rational\n===============\n\nA service bit was chosen as applying a bloom filter is a service.\n\nThe increase in protocol version is for backwards compatibility. Nodes that\nrequire the bloom filter service can set NODE_BLOOM for peers advertising a\nprotocol version < 70002, allowing the rest of the implementation to be\nunchanged. Nodes with implementations that do not know of the NODE_BLOOM bit\nwill be disconnected immediately as though the connection failed for some\nreason, and thus will not have incoming bandwidth wasted by that peer and can\neasily connect to another peer.\n\nSupporting NODE_BLOOM but not NODE_NETWORK allows for situations where a node\nmay have data that its peers may be interested in, but is not a full node and\nthus does not have block data in general. For instance an SPV node that\nreceives a full, unfiltered, block from a peer may want to let its SPV peers\nknow about the existence of that block and provide them that data if requested.\nThose peers in turn may only be interested in knowing about the block if it\nmatches a specific bloom filter. Note how in this example DoS attacks are made\nprohibitively expensive by the work required to create a valid block header.\n\n\nReference Implementation\n========================\n\nhttps://github.com/bitcoin/bitcoin/pull/2900\n\n\nCopyright\n=========\n\nThis document is placed in the public domain.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130817/86359a7c/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-18T22:00:23",
                "message_text_only": "The original Bloom filtering spec did not make this feature optional for\nthe same reason gzip isn't an optional part of the PNG specification. I see\nno reason to revisit that. It's definitely not the case that making every\npossible feature optional is smart design, often it's the opposite.\n\nIf in future there are nodes that for some reason can't technically support\nthis feature, then there'd be a stronger rationale for something like this.\nHowever no such nodes exist, nor are they likely to in future given that\nit's a simple feature to implement.\n\nFor these reason I oppose this BIP.\n\n\nOn Sun, Aug 18, 2013 at 4:59 AM, Peter Todd <pete at petertodd.org> wrote:\n\n> My draft is as follows.\n>\n> Gregory Maxwell: Can you assign a BIP # for this? The next number, 38,\n> is on the wiki as \"Passphrase-protected private key\" by Mike Caldwell,\n> although it isn't in the list so I don't know if that is official or\n> not.\n>\n>\n>\n> BIP: ?\n> Title: NODE_BLOOM service bit\n> Author: Peter Todd <pete at petertodd.org>\n> Type: Standards Track (draft)\n> Created: 17-08-2013\n>\n> Abstract\n> ========\n>\n> This BIP extends BIP 37, Connection Bloom filtering, by defining a service\n> bit\n> to allow peers to advertise that they support bloom filters explicitly.\n>\n>\n> Motivation\n> ==========\n>\n> BIP 37 did not specify a service bit for the bloom filter service, thus\n> implicitly assuming that all nodes that serve peers data support it. There\n> are\n> however cases where a node may want to provide data, such as mempool\n> transactions and blocks, but do not want to or have not implemented bloom\n> filtering. Additionally it is good practice for nodes to be given options\n> as to\n> the granularity of the services they are providing the public - a full-node\n> operator may be able to donate only a small amount of bandwidth and may\n> want\n> those efforts to be used by other full-node operators.\n>\n>\n> Specification\n> =============\n>\n> The following protocol bit is added:\n>\n>     NODE_BLOOM = (1 << 1)\n>\n> In addition the protocol version is increased from 70001 to 70002 in the\n> reference implementation. Nodes that support bloom filters should set that\n> protocol bit. Otherwise it should remain unset.\n>\n> NODE_BLOOM is distinct from NODE_NETWORK, and it is legal to advertise\n> NODE_BLOOM but not NODE_NETWORK.\n>\n> If a node does not support bloom filters but receives a \"filterload\",\n> \"filteradd\", or \"filterclear\" message from a peer the node should\n> disconnect\n> that peer immediately.\n>\n> While outside the scope of this BIP it is suggested that DNS seeds and\n> other\n> peer discovery mechanisms support the ability to specify the services\n> required;\n> current implementations simply check only that NODE_NETWORK is set.\n>\n>\n> Design rational\n> ===============\n>\n> A service bit was chosen as applying a bloom filter is a service.\n>\n> The increase in protocol version is for backwards compatibility. Nodes that\n> require the bloom filter service can set NODE_BLOOM for peers advertising a\n> protocol version < 70002, allowing the rest of the implementation to be\n> unchanged. Nodes with implementations that do not know of the NODE_BLOOM\n> bit\n> will be disconnected immediately as though the connection failed for some\n> reason, and thus will not have incoming bandwidth wasted by that peer and\n> can\n> easily connect to another peer.\n>\n> Supporting NODE_BLOOM but not NODE_NETWORK allows for situations where a\n> node\n> may have data that its peers may be interested in, but is not a full node\n> and\n> thus does not have block data in general. For instance an SPV node that\n> receives a full, unfiltered, block from a peer may want to let its SPV\n> peers\n> know about the existence of that block and provide them that data if\n> requested.\n> Those peers in turn may only be interested in knowing about the block if it\n> matches a specific bloom filter. Note how in this example DoS attacks are\n> made\n> prohibitively expensive by the work required to create a valid block\n> header.\n>\n>\n> Reference Implementation\n> ========================\n>\n> https://github.com/bitcoin/bitcoin/pull/2900\n>\n>\n> Copyright\n> =========\n>\n> This document is placed in the public domain.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n>\n>\n> ------------------------------------------------------------------------------\n> Get 100% visibility into Java/.NET code with AppDynamics Lite!\n> It's a free troubleshooting tool designed for production.\n> Get down to code-level detail for bottlenecks, with <2% overhead.\n> Download for free and get started troubleshooting in minutes.\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897031&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/15e4c80b/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-08-18T22:22:10",
                "message_text_only": "Mike pointed out exactly the reason I oppose a NODE_BLOOM service bit: I\nalso think it is a bad idea to start making various bits and pieces of the\nprotocol optional.\n\nIt is bad for privacy (easier to fingerprint nodes) and bad for\ndecentralization (fewer nodes support your required feature set). And every\nbit you add can give you an exponential number of combinations your QA team\nshould test.\n\nI'd say the same thing about NODE_TRANSACTION (\"I don't know about blocks,\nhave and NODE_BLOCK bits.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/73aa73f7/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-08-18T23:11:09",
                "message_text_only": "On Mon, Aug 19, 2013 at 08:22:10AM +1000, Gavin Andresen wrote:\n> Mike pointed out exactly the reason I oppose a NODE_BLOOM service bit: I\n> also think it is a bad idea to start making various bits and pieces of the\n> protocol optional.\n\n> It is bad for privacy (easier to fingerprint nodes) and bad for\n> decentralization (fewer nodes support your required feature set). And every\n> bit you add can give you an exponential number of combinations your QA team\n> should test.\n\nMike's and others have been talking about persistent node-specific\nidentifiers, and after all at this level there are IP addresses;\nfingerprinting nodes is trivial.\n\n> I'd say the same thing about NODE_TRANSACTION (\"I don't know about blocks,\n> have and NODE_BLOCK bits.\n\nWe need options so peopl can contribute to relaying and the health of\nthe network - these edge cases are going to be tested anyway by people\nlike me deciding to disable bloom filtering.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130818/2b2e526f/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-08-18T22:59:30",
                "message_text_only": "On Mon, Aug 19, 2013 at 12:00:23AM +0200, Mike Hearn wrote:\n> The original Bloom filtering spec did not make this feature optional for\n> the same reason gzip isn't an optional part of the PNG specification. I see\n> no reason to revisit that. It's definitely not the case that making every\n> possible feature optional is smart design, often it's the opposite.\n\nBloom filtering isn't lossless so to speak.\n\nA better analogy would be making re-sharing an optinal part of the\nBitTorrent specification, and then expecting that the majority of users\nwould never upload data to peers that needed it.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130818/353f5e36/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "NODE_BLOOM BIP",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen",
                "Mike Hearn",
                "Peter Todd"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 11484
        }
    },
    {
        "title": "[Bitcoin-development] Bloom io attack effectiveness",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-08-19T00:13:57",
                "message_text_only": "Did some tests with a varient of attack... In short it's fairly easy to\nsaturate a node's disk IO bandwidth and when that happens the node\nquickly falls behind in consensus, not to mention becomes useless to\nit's peers. Note that the particular varient I tried is different, and\nless efficient in bandwidth, than others discussed privately.\n\nBandwidth required to, for example, take out a Amazon EC2 m1.small is\nabout 1KiB/second, and results in it getting multiple blocks behind in\nconsensus, or a delay on the order of minutes to tens of minutes. I had\nsimilar results attacking a p2pool node I own that has a harddrive and\n4GiB of ram - of course my orphan rate went to 100%\n\nIt'd be interesting to repeat the attack by distributing it from\nmultiple peers rather than from a single source. At that point the\nattack could be made indistinguishable from a bunch of SPV wallets\nrescanning the chain for old transactions.\n\nIn any case given that SPV peers don't contribute back to the network\nthey should obviously be heavily deprioritized and served only with\nwhatever resources a node has spare. The more interesting question is\nhow do you make it possible for SPV nodes to gain priority over an\nattacker? It has to be some kind of limited resource - schemes that rely\non things like prioritizing long-lived identities fail against patient\nattackers - time doesn't make an identity expensive if the identity is\nfree in the first place. Similarly summing up the fees paid by\ntransactions relayed from that peer also fail, because an attacker can\neasily broadcast the same transaction to multiple peers at once - it's\nnot a limited resource. Bandwidth is limited, but orders of magnitude\ncheaper for the attacker than a Android wallet on a dataplan.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130818/82c987fe/attachment.sig>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-08-19T00:59:18",
                "message_text_only": "Peter said:\n\"In any case given that SPV peers don't contribute back to the network\nthey should obviously be heavily deprioritized and served only with\nwhatever resources a node has spare.\"\n\nThis seems very much like a \"cut off your nose to spite your face\" solution.\n\nSPV peers are INCREDIBLY IMPORTANT to the growth of Bitcoin; much more\nimportant than nodes that have the bandwidth and disk I/O capability of\nbeing a full node.  Bitcoin will be just fine if there are never more than\n10,000 big, beefy, full nodes forming the backbone of the network, but will\nbe NOTHING if we don't support tens of millions of lightweight SPV devices.\n\nOk, that's an exaggeration, Bitcoin would be just fine in an Electrum model\nwhere tens of millions of lightweight devices rely 100% on a full node to\noperate. But I would prefer the more decentralized, less-trust-required SPV\nmodel.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/eb22a43d/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-08-19T01:34:37",
                "message_text_only": "On Mon, Aug 19, 2013 at 10:59:18AM +1000, Gavin Andresen wrote:\n> Peter said:\n> \"In any case given that SPV peers don't contribute back to the network\n> they should obviously be heavily deprioritized and served only with\n> whatever resources a node has spare.\"\n> \n> This seems very much like a \"cut off your nose to spite your face\" solution.\n> \n> SPV peers are INCREDIBLY IMPORTANT to the growth of Bitcoin; much more\n> important than nodes that have the bandwidth and disk I/O capability of\n> being a full node.  Bitcoin will be just fine if there are never more than\n> 10,000 big, beefy, full nodes forming the backbone of the network, but will\n> be NOTHING if we don't support tens of millions of lightweight SPV devices.\n> \n> Ok, that's an exaggeration, Bitcoin would be just fine in an Electrum model\n> where tens of millions of lightweight devices rely 100% on a full node to\n> operate. But I would prefer the more decentralized, less-trust-required SPV\n> model.\n\nDon't read too much into what I said; under normal circumstances when a\nBitcoin node isn't being attacked, there will be plenty of spare\ncapacity for SPV nodes. All I'm suggesting is that we make sure serving\nthose nodes doesn't come at the expense of maintaining consensus -\nmainly distributing new blocks around the network so the blockchain\nkeeps moving forward. (something many SPV peers can help with anyway)\n\nI'd much rather my Android wallet take a long time to sync up, than\nblocks get re-organized because miners found themselves separated from\none another, let along someone clever using that to do double-spend\nattacks during those re-orgs. After all, I can always find a private\nnode to connect to that won't be overloaded because it doesn't accept\nconnections from anonymous users. It's also easy to just use really\nbasic measures to limit abuse, like \"sign up with your bitcointalk\"\naccount, or \"pay 10 cents for an account to discourage spammers\"\n\nAnyway all things less likely to be needed if attackers know all they\nare going to manage to do is inconvenience people temporarily because\nthe network itself will keep running.\n\n-- \n'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130818/c6a81275/attachment.sig>"
            },
            {
                "author": "John Dillon",
                "date": "2013-08-19T02:53:32",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn Mon, Aug 19, 2013 at 12:59 AM, Gavin Andresen\n<gavinandresen at gmail.com> wrote:\n> Peter said:\n> \"In any case given that SPV peers don't contribute back to the network\n> they should obviously be heavily deprioritized and served only with\n> whatever resources a node has spare.\"\n>\n> This seems very much like a \"cut off your nose to spite your face\" solution.\n>\n> SPV peers are INCREDIBLY IMPORTANT to the growth of Bitcoin; much more\n> important than nodes that have the bandwidth and disk I/O capability of\n> being a full node.  Bitcoin will be just fine if there are never more than\n> 10,000 big, beefy, full nodes forming the backbone of the network, but will\n> be NOTHING if we don't support tens of millions of lightweight SPV devices.\n>\n> Ok, that's an exaggeration, Bitcoin would be just fine in an Electrum model\n> where tens of millions of lightweight devices rely 100% on a full node to\n> operate. But I would prefer the more decentralized, less-trust-required SPV\n> model.\n\nSo tell us how is your \"vision\" of 10,000 big beefy full nodes with SPV peers\nany different from the Electrum model? These days Electrum clients have block\nheaders and verify that transactions have merkle paths to the block headers.\nThe only difference I see is that SPV uses bloom filtering and Electrum can\nquery by transaction. But Mike wants to add querying by transaction to full\nnodes anyway, and one of the purported advantages of this UTXO proof stuff is\nthat you can query servers for UTXO's by address, so I see no difference at\nall. A patch to do bloom filtering on Electrum would be amusing to me.\n\nHere you have Peter talking about clever ways to actually get decentralization\nby having SPV peers donate back to the network with spare bandwidth, like\nrelaying blocks, not to mention his partial UTXO set ideas, and you completely\nignore that. But I guess that would raise ugly questions when people realize\nthey can't now contribute back to Bitcoin, because the blocksize is a gigabyte\nof microtransactions... It may also raise ugly questions with regulators that\nmay find the idea of \"full node == data chokepoint == regulatory chokepoint\" an\nattractive notion. Why are there not any competent people other than Peter who\nreally have the guts to bring up these proposals? I've little luck getting\nproof-of-concepts built for money anyway. Maybe we just have a darth of smart\ncompetent people in this space.\n\nYou do a good job of signaling your priorities Gavin. The payment protocol\nincludes no notion that you may want to pay anyone but a SSL certified\nmerchant. Yes I know the crypto can be upgraded, but it says volumes that you\npushed for that first, without even the slightest token effort to allow\nindividuals to participate in any way. Sad given you have made things *less*\nsecure because there is no safe way to get money *into* my wallet with the\npayment protocol, but could have been.\n\nTell me, when my decentralization pull-req is voted on, which way are you\nplanning on voting?\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\niQEcBAEBCAAGBQJSEYg/AAoJEEWCsU4mNhiPQBIH/A2cef0NDzu72CY0+N1HdPO+\nfdixwncAg1ok6YdJj5WALjHbkhJ+QRVEZoRr6rHPxxxTywI+HiPN1oaopIrq3StP\nbNpvouaWXLyw6xHMrMYefVOluHNZg3lu1akLdGuYA7rDHLwP/RhlF1FFzXSxKFsp\nANcw4WW7U5r5nfBHYc/a9xo8S6THI7Nv2NDW6WaRQO4X9sbSKSdwanoe75CLsRzE\nE2cPNvwG4WA/MUgkl3Ao6dMsEPPa8dJK98LaS4BE/m9iFWQiV8t35/FQ0GAFQoJo\nPQUs8aAWiI0caAxI0vddxKQ+YlwPw2m1QH6h19wUO7+KLKOtxMFmWoDu/OLdTRM=\n=IfkA\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Wendell",
                "date": "2013-08-19T21:57:06",
                "message_text_only": "John,\n\nI for one support your rallying cry of decentralization.\n\nIf you are implying that even 10,000 full nodes seems far, far too few for a distributed system that may ultimately face a very well-connected and well-funded threat model, I agree with you completely. However, I took Gavin's statement to mean something like a factual statement about the load-bearing nature of that many nodes, rather than an actual target number for some future iteration of the network.\n\nPartial UTXO sets sound like a great idea -- are they really being ignored? I am pretty new to the development process here, but I assumed (as with many open source projects) that ideation, debate and implementation take a while to churn. Has a prototype of that been developed already, are you implying that you funded something like that and it never got built? If there are some GitHub links that I missed, please send them over.\n\nMaybe you should open that topic back up in its own thread, so we can bring it back into view?\n\n-wendell\n\ngrabhive.com | twitter.com/grabhive | gpg: 6C0C9411\n\nOn Aug 19, 2013, at 4:53 AM, John Dillon wrote:\n\n> So tell us how is your \"vision\" of 10,000 big beefy full nodes with SPV peers\n> any different from the Electrum model? These days Electrum clients have block\n> headers and verify that transactions have merkle paths to the block headers.\n> The only difference I see is that SPV uses bloom filtering and Electrum can\n> query by transaction. But Mike wants to add querying by transaction to full\n> nodes anyway, and one of the purported advantages of this UTXO proof stuff is\n> that you can query servers for UTXO's by address, so I see no difference at\n> all. A patch to do bloom filtering on Electrum would be amusing to me.\n> \n> Here you have Peter talking about clever ways to actually get decentralization\n> by having SPV peers donate back to the network with spare bandwidth, like\n> relaying blocks, not to mention his partial UTXO set ideas, and you completely\n> ignore that. But I guess that would raise ugly questions when people realize\n> they can't now contribute back to Bitcoin, because the blocksize is a gigabyte\n> of microtransactions... It may also raise ugly questions with regulators that\n> may find the idea of \"full node == data chokepoint == regulatory chokepoint\" an\n> attractive notion. Why are there not any competent people other than Peter who\n> really have the guts to bring up these proposals? I've little luck getting\n> proof-of-concepts built for money anyway. Maybe we just have a darth of smart\n> competent people in this space.\n> \n> You do a good job of signaling your priorities Gavin. The payment protocol\n> includes no notion that you may want to pay anyone but a SSL certified\n> merchant. Yes I know the crypto can be upgraded, but it says volumes that you\n> pushed for that first, without even the slightest token effort to allow\n> individuals to participate in any way. Sad given you have made things *less*\n> secure because there is no safe way to get money *into* my wallet with the\n> payment protocol, but could have been.\n> \n> Tell me, when my decentralization pull-req is voted on, which way are you\n> planning on voting?\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 841 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/36d261e4/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-19T09:29:55",
                "message_text_only": "On Mon, Aug 19, 2013 at 2:13 AM, Peter Todd <pete at petertodd.org> wrote:\n\n> In any case given that SPV peers don't contribute back to the network\n> they should obviously be heavily deprioritized and served only with\n> whatever resources a node has spare.\n\n\nWell, I'm glad we're making progress towards this kind of model :)\n\nIf I had to write a scoring function for node importance, I'd start by\nmaking nodes I connected to more important than nodes that connected to me.\nThat should prevent the kind of attacks you're talking about. You can then\nscore within those subsets with greater subtlety, like using how long the\nconnection has been active (or extending that with signed timestamps).\n\nThis doesn't have any in-built bias against SPV nodes, which is probably\nvery hard to technically implement anyway. But it encodes the intuitive\nnotion that nodes I selected myself are less likely to be DoS attackers\nthan nodes which connected to me.\n\nBut the trick is to implement the prioritisation code. The usual way to do\nthis is to have a thread pool that pops requests off a queue. You can\neither have multiple queues for different priority bands, or code that\nlocks the queue and re-orders it when something new is added. I tend to\nfind the multiple queues approach simpler, especially, it's simpler to\nexport statistics about that via RPC that make it easy to understand what's\ngoing on underneath the hood.\n\nSo IMHO a patch to address I/O exhaustion should look something like this:\n\n   1. Add a thread pool of 2-3 threads (to give the kernel room to overlap\n   IO) which take in CBlock load requests and then do the load/parse/filter in\n   the background.\n\n   2. Each thread starts by blocking on a counting semaphore which\n   represents the total number of requests.\n\n   3. The network thread message loop is adjusted so it can receive some\n   kind of futures/callbacks/closure object (I guess Boost provides this,\n   alternatively we could switch to using C++11). The closures should also\n   have the score of the node they were created for (note: score not a CNode*\n   as that complicates memory management).\n\n   4. At the start of the network loop a thread-local (or global) variable\n   is set that contains the nodes current score, which is just an n-of-m score\n   where M is the total number of connected nodes and N is the ranked\n   importance. At that point any code that needs to prioritise nodes off\n   against each other can just check that variable whilst doing work. The\n   network loop looks at which file descriptors are select()able and their\n   scores, which closures are pending execution and their scores, then decides\n   whether to handle new network data or run a closure. If there is a draw\n   between the scores, closures take priority to reduce memory pressure and\n   lower latency.\n\n   5. Handling of \"getdata\" then ends up calling a function that requests a\n   load of a block from disk, and runs a closure when it's finished. The\n   closure inherits the nodes current score, of course, so when the block load\n   is completed execution of the rest of the getdata handling takes priority\n   over handling new traffic from network nodes. When the closure executes, it\n   writes the loaded/filtered data out over the network socket and deletes\n\nThe function that takes a CBlockIndex and yields a future<CBlock> or\nclosure or whatever would internally lock the job queue(s), add the new\ntask and then do a stable sort of the queue using the scoring function,\nwhich in this case would simply use the node score as the job score.\n\nIt's a fair amount of work, but should ensure that \"good\" nodes outcompete\n\"bad\" nodes for disk IO. Any other disk IO operations can be done in the\nsame way. Note that the bulk of LevelDB write work is already handled on a\nbackground thread. The foreground thread only writes a log entry to disk\nand updates some in-memory data structures.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/c38baf67/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bloom io attack effectiveness",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "John Dillon",
                "Mike Hearn",
                "Peter Todd",
                "Gavin Andresen",
                "Wendell"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 16647
        }
    },
    {
        "title": "[Bitcoin-development] CoinWitness: Really Really ultimate blockchain compression",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2013-08-19T06:38:46",
                "message_text_only": "I've posted a somewhat blue-skies idea on troll^wBitcointalk that some\nhere might find interesting:\n\nhttps://bitcointalk.org/index.php?topic=277389.0"
            }
        ],
        "thread_summary": {
            "title": "CoinWitness: Really Really ultimate blockchain compression",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gregory Maxwell"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 149
        }
    },
    {
        "title": "[Bitcoin-development] Proposal: remove \"getwork\" RPC from bitcoind",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2013-08-19T16:27:01",
                "message_text_only": "Pull request https://github.com/bitcoin/bitcoin/pull/2905 proposes to\nremove \"getwork\" RPC from bitcoind: https://en.bitcoin.it/wiki/Getwork\n\nOn mainnet, almost everybody uses a pool (and therefore, not \"getwork\"\ndirectly to bitcoind).  Those few who solo mine use a pool server to\ntalk to bitcoind via \"getblocktemplate\" or other means.  Tests show\nthat attempts to solo mine on mainnet via \"getwork\" lead to delays and\nproblems.\n\nOn testnet, getwork has a better chance of continuing to work.\nNevertheless, the same tools (open source pool servers or p2pool) are\navailable for testnet, obviating the continued need to support\ngetwork.\n\nHowever, at one time, getwork to bitcoind was widely used.  I wanted\nto poke the audience, to gauge response to removing \"getwork.\"  If a\ndriving use case remains of which we're unaware, speak up, please.  We\ndon't want to break anybody needlessly.\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Frank F",
                "date": "2013-08-19T20:09:41",
                "message_text_only": "I strongly object to removing the only mechanism that allows anyone to say\nthat bitcoin is p2p, in the truest sense of the word. Moves like this that\nfavor only the pool operators and private mining interests are signs that\nbitcoin is headed towards a monopoly/cartel model, and that would be a\ntragic outcome for something that holds a great promise. Nobody knows what\nmining will look like in the future, and denying the individual novice the\nability to mine at a small scale, even if we may think it is inefficient\nnow, is not a good path to start down.\n\nIf there are technical problems with getwork, maybe they should be\naddressed and fixed instead of outright abandoned.\n\n\nOn Mon, Aug 19, 2013 at 11:27 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> Pull request https://github.com/bitcoin/bitcoin/pull/2905 proposes to\n> remove \"getwork\" RPC from bitcoind: https://en.bitcoin.it/wiki/Getwork\n>\n> On mainnet, almost everybody uses a pool (and therefore, not \"getwork\"\n> directly to bitcoind).  Those few who solo mine use a pool server to\n> talk to bitcoind via \"getblocktemplate\" or other means.  Tests show\n> that attempts to solo mine on mainnet via \"getwork\" lead to delays and\n> problems.\n>\n> On testnet, getwork has a better chance of continuing to work.\n> Nevertheless, the same tools (open source pool servers or p2pool) are\n> available for testnet, obviating the continued need to support\n> getwork.\n>\n> However, at one time, getwork to bitcoind was widely used.  I wanted\n> to poke the audience, to gauge response to removing \"getwork.\"  If a\n> driving use case remains of which we're unaware, speak up, please.  We\n> don't want to break anybody needlessly.\n>\n> --\n> Jeff Garzik\n> Senior Software Engineer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Introducing Performance Central, a new site from SourceForge and\n> AppDynamics. Performance Central is your source for news, insights,\n> analysis and resources for efficient Application Performance Management.\n> Visit us today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897511&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \n*MONEY IS OVER!*\n                                IF YOU WANT IT<http://www.zeitgeistmovie.com/>\n=====================================================\nThe causes of my servitude can be traced to the tyranny of money.\n-Serj Tankian\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/8e457133/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-08-19T20:13:00",
                "message_text_only": "On Monday, August 19, 2013 8:09:41 PM Frank F wrote:\n> I strongly object to removing the only mechanism that allows anyone to say\n> that bitcoin is p2p, in the truest sense of the word. Moves like this that\n> favor only the pool operators and private mining interests are signs that\n> bitcoin is headed towards a monopoly/cartel model, and that would be a\n> tragic outcome for something that holds a great promise. Nobody knows what\n> mining will look like in the future, and denying the individual novice the\n> ability to mine at a small scale, even if we may think it is inefficient\n> now, is not a good path to start down.\n> \n> If there are technical problems with getwork, maybe they should be\n> addressed and fixed instead of outright abandoned.\n\nYou missed getblocktemplate. It does everything getwork did and more.\n\nIndividual solo miners aren't being locked out at all. This is just removal of \na protocol that has been obsolete for well over a year now.\n\nLuke"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-08-19T20:14:36",
                "message_text_only": "On Mon, Aug 19, 2013 at 10:09 PM, Frank F <frankf44 at gmail.com> wrote:\n> I strongly object to removing the only mechanism that allows anyone to say\n> that bitcoin is p2p, in the truest sense of the word. Moves like this that\n> favor only the pool operators and private mining interests are signs that\n> bitcoin is headed towards a monopoly/cartel model, and that would be a\n> tragic outcome for something that holds a great promise. Nobody knows what\n> mining will look like in the future, and denying the individual novice the\n> ability to mine at a small scale, even if we may think it is inefficient\n> now, is not a good path to start down.\n>\n> If there are technical problems with getwork, maybe they should be addressed\n> and fixed instead of outright abandoned.\n\nThey were addressed and fixed in a successor API, getblocktemplate.\nIt's even more decentralization-friendly, as it allows the caller to\nsee what transactions the daemon is trying to put into a block, and\neven modify it.\n\nThe suggestion here is not to remove functionality - only to remove an\nobsolete API for doing so.\n\n-- \nPieter"
            },
            {
                "author": "Frank F",
                "date": "2013-08-19T20:16:17",
                "message_text_only": "Thank you for setting me straight. Please forgive my ignorance.\n\n\nOn Mon, Aug 19, 2013 at 3:14 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> On Mon, Aug 19, 2013 at 10:09 PM, Frank F <frankf44 at gmail.com> wrote:\n> > I strongly object to removing the only mechanism that allows anyone to\n> say\n> > that bitcoin is p2p, in the truest sense of the word. Moves like this\n> that\n> > favor only the pool operators and private mining interests are signs that\n> > bitcoin is headed towards a monopoly/cartel model, and that would be a\n> > tragic outcome for something that holds a great promise. Nobody knows\n> what\n> > mining will look like in the future, and denying the individual novice\n> the\n> > ability to mine at a small scale, even if we may think it is inefficient\n> > now, is not a good path to start down.\n> >\n> > If there are technical problems with getwork, maybe they should be\n> addressed\n> > and fixed instead of outright abandoned.\n>\n> They were addressed and fixed in a successor API, getblocktemplate.\n> It's even more decentralization-friendly, as it allows the caller to\n> see what transactions the daemon is trying to put into a block, and\n> even modify it.\n>\n> The suggestion here is not to remove functionality - only to remove an\n> obsolete API for doing so.\n>\n> --\n> Pieter\n>\n\n\n\n-- \n*MONEY IS OVER!*\n                                IF YOU WANT IT<http://www.zeitgeistmovie.com/>\n=====================================================\nThe causes of my servitude can be traced to the tyranny of money.\n-Serj Tankian\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/0bf724a7/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-08-19T20:16:23",
                "message_text_only": "On Mon, Aug 19, 2013 at 1:09 PM, Frank F <frankf44 at gmail.com> wrote:\n> If there are technical problems with getwork, maybe they should be addressed\n> and fixed instead of outright abandoned.\n\nThey have been, resulting in a replacement called \"getblocktemplate\"\nwhich (presumably) almost everyone talking to bitcoin(d|-qt) has been\nusing for a long time.\n\nI think removing the ability to mine in the stock package would be\nregrettable, but to be honest we already don't have it for the\nmainnet. I think we should do as Jeff suggests and remove getwork. But\nI think we should also package along a proper getblocktemplate miner\nto remove any doubt that we're providing a full network node here.  (I\nnote that the choice of miner is also easy:  Regardless of people's\npreferences which way or another, AFAIK only luke's bfgminer stuff can\nmine directly against bitcoin getblocktemplate with no pool in the\nmiddle.  It also supports a huge variety of hardware, and a superset\nof our target platforms)"
            },
            {
                "author": "Frank F",
                "date": "2013-08-19T20:18:06",
                "message_text_only": "This sounds like an ideal compromise.\n\n\nOn Mon, Aug 19, 2013 at 3:16 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Mon, Aug 19, 2013 at 1:09 PM, Frank F <frankf44 at gmail.com> wrote:\n> > If there are technical problems with getwork, maybe they should be\n> addressed\n> > and fixed instead of outright abandoned.\n>\n> They have been, resulting in a replacement called \"getblocktemplate\"\n> which (presumably) almost everyone talking to bitcoin(d|-qt) has been\n> using for a long time.\n>\n> I think removing the ability to mine in the stock package would be\n> regrettable, but to be honest we already don't have it for the\n> mainnet. I think we should do as Jeff suggests and remove getwork. But\n> I think we should also package along a proper getblocktemplate miner\n> to remove any doubt that we're providing a full network node here.  (I\n> note that the choice of miner is also easy:  Regardless of people's\n> preferences which way or another, AFAIK only luke's bfgminer stuff can\n> mine directly against bitcoin getblocktemplate with no pool in the\n> middle.  It also supports a huge variety of hardware, and a superset\n> of our target platforms)\n>\n\n\n\n-- \n*MONEY IS OVER!*\n                                IF YOU WANT IT<http://www.zeitgeistmovie.com/>\n=====================================================\nThe causes of my servitude can be traced to the tyranny of money.\n-Serj Tankian\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/dbbada07/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-08-19T20:23:16",
                "message_text_only": "On Mon, Aug 19, 2013 at 1:16 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> I think removing the ability to mine in the stock package would be\n> regrettable,\n\nI am naughty and should clarify.  I had ass.u.me.d that Jeff's patch\nalso removed the internal CPU miner, because doing so is necessary for\nactually getting rid of most of the getwork code. It doesn't actually.\n\nThough this doesn't change the fact that the internal miner is mostly\na pretext for integrated mining.  Since it only really works on\ntestnet it also means our testnet testing using it is not a good test\nof the actual production software.  I'd rather remove the internal\nminer too, getting rid of the extra code and complexity, and package\nup a GBT miner which would actually be usable on the mainnet."
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2013-08-19T20:33:20",
                "message_text_only": "FWIW, Litecoin 0.8.x entirely removed the internal miner and we warned\npeople that getwork will be removed in the next major version.  Pooler's\nCPU minerd which supports both sha256d and scrypt recently grew stratum\nsupport.  Perhaps he could be convinced to add GBT support too, which would\nhelp this goal of completely removing the internal miner and getwork.\n\nWarren\n\n\nOn Mon, Aug 19, 2013 at 10:23 AM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n\n> On Mon, Aug 19, 2013 at 1:16 PM, Gregory Maxwell <gmaxwell at gmail.com>\n> wrote:\n> > I think removing the ability to mine in the stock package would be\n> > regrettable,\n>\n> I am naughty and should clarify.  I had ass.u.me.d that Jeff's patch\n> also removed the internal CPU miner, because doing so is necessary for\n> actually getting rid of most of the getwork code. It doesn't actually.\n>\n> Though this doesn't change the fact that the internal miner is mostly\n> a pretext for integrated mining.  Since it only really works on\n> testnet it also means our testnet testing using it is not a good test\n> of the actual production software.  I'd rather remove the internal\n> miner too, getting rid of the extra code and complexity, and package\n> up a GBT miner which would actually be usable on the mainnet.\n>\n>\n> ------------------------------------------------------------------------------\n> Introducing Performance Central, a new site from SourceForge and\n> AppDynamics. Performance Central is your source for news, insights,\n> analysis and resources for efficient Application Performance Management.\n> Visit us today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897511&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/950706c2/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-08-19T20:34:36",
                "message_text_only": "On Mon, Aug 19, 2013 at 4:33 PM, Warren Togami Jr. <wtogami at gmail.com> wrote:\n> FWIW, Litecoin 0.8.x entirely removed the internal miner and we warned\n> people that getwork will be removed in the next major version.  Pooler's CPU\n> minerd which supports both sha256d and scrypt recently grew stratum support.\n> Perhaps he could be convinced to add GBT support too, which would help this\n> goal of completely removing the internal miner and getwork.\n\nThe internal miner is still actively used for testnet, here.\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2013-08-19T23:02:41",
                "message_text_only": "On 08/19/2013 10:34 PM, Jeff Garzik wrote:\n\n>> FWIW, Litecoin 0.8.x entirely removed the internal miner and we warned\n>> people that getwork will be removed in the next major version.  Pooler's CPU\n>> minerd which supports both sha256d and scrypt recently grew stratum support.\n>> Perhaps he could be convinced to add GBT support too, which would help this\n>> goal of completely removing the internal miner and getwork.\n> \n> The internal miner is still actively used for testnet, here.\n\nHere, too. If I'm too impatient to wait for the next block that is.\n\nI think it'd be a pity if the easy way to mine blocks would be removed."
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2013-08-19T23:30:21",
                "message_text_only": "Hence ship a miner that automatically reads the bitcoin.conf to find the\nRPC authentication info.  It would be faster and more efficient than the\nunoptimized miner while simplifying the bitcoind code.  Win for everyone.\n\nWarren\n\n\nOn Mon, Aug 19, 2013 at 1:02 PM, Andreas Schildbach\n<andreas at schildbach.de>wrote:\n\n> On 08/19/2013 10:34 PM, Jeff Garzik wrote:\n>\n> >> FWIW, Litecoin 0.8.x entirely removed the internal miner and we warned\n> >> people that getwork will be removed in the next major version.\n>  Pooler's CPU\n> >> minerd which supports both sha256d and scrypt recently grew stratum\n> support.\n> >> Perhaps he could be convinced to add GBT support too, which would help\n> this\n> >> goal of completely removing the internal miner and getwork.\n> >\n> > The internal miner is still actively used for testnet, here.\n>\n> Here, too. If I'm too impatient to wait for the next block that is.\n>\n> I think it'd be a pity if the easy way to mine blocks would be removed.\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Introducing Performance Central, a new site from SourceForge and\n> AppDynamics. Performance Central is your source for news, insights,\n> analysis and resources for efficient Application Performance Management.\n> Visit us today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897511&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130819/01b58448/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2013-08-19T20:15:08",
                "message_text_only": "ACK, I see no reason to leave broken things in that a) arent necessary\nand b) no one has the developer resources to fix.\n\nMatt\n\nOn Mon, 2013-08-19 at 12:27 -0400, Jeff Garzik wrote:\n> Pull request https://github.com/bitcoin/bitcoin/pull/2905 proposes to\n> remove \"getwork\" RPC from bitcoind: https://en.bitcoin.it/wiki/Getwork\n> \n> On mainnet, almost everybody uses a pool (and therefore, not \"getwork\"\n> directly to bitcoind).  Those few who solo mine use a pool server to\n> talk to bitcoind via \"getblocktemplate\" or other means.  Tests show\n> that attempts to solo mine on mainnet via \"getwork\" lead to delays and\n> problems.\n> \n> On testnet, getwork has a better chance of continuing to work.\n> Nevertheless, the same tools (open source pool servers or p2pool) are\n> available for testnet, obviating the continued need to support\n> getwork.\n> \n> However, at one time, getwork to bitcoind was widely used.  I wanted\n> to poke the audience, to gauge response to removing \"getwork.\"  If a\n> driving use case remains of which we're unaware, speak up, please.  We\n> don't want to break anybody needlessly.\n>"
            },
            {
                "author": "Goss, Brian C., M.D.",
                "date": "2013-08-19T20:22:27",
                "message_text_only": "What if we have a massive (like many orders of magnitude) drop in network harsh rate?  Might such a function be useful to salvage the (non-functioning) network? Same for IRC bootstrapping.  How do we pick ourselves up off the ground in case of the equivalent of a great depression in network hash rate (or some jerk spending $100M just to drive the difficulty up and then turning his hardware off?).\n\n-----Original Message-----\nFrom: bitcoin-development-bounces at lists.sourceforge.net [mailto:bitcoin-development-bounces at lists.sourceforge.net] On Behalf Of bitcoin-development-request at lists.sourceforge.net\nSent: Monday, August 19, 2013 3:16 PM\nTo: bitcoin-development at lists.sourceforge.net\nSubject: Bitcoin-development Digest, Vol 27, Issue 28\n\nSend Bitcoin-development mailing list submissions to\n\tbitcoin-development at lists.sourceforge.net\n\nTo subscribe or unsubscribe via the World Wide Web, visit\n\thttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\nor, via email, send a message with subject or body 'help' to\n\tbitcoin-development-request at lists.sourceforge.net\n\nYou can reach the person managing the list at\n\tbitcoin-development-owner at lists.sourceforge.net\n\nWhen replying, please edit your Subject line so it is more specific than \"Re: Contents of Bitcoin-development digest...\"\n\n\nToday's Topics:\n\n   1. Proposal: remove \"getwork\" RPC from bitcoind (Jeff Garzik)\n   2. Re: Proposal: remove \"getwork\" RPC from\tbitcoind (Frank F)\n   3. Re: Proposal: remove \"getwork\" RPC from\tbitcoind (Luke-Jr)\n   4. Re: Proposal: remove \"getwork\" RPC from\tbitcoind (Pieter Wuille)\n   5. Re: Proposal: remove \"getwork\" RPC from bitcoind (Matt Corallo)\n   6. Re: Proposal: remove \"getwork\" RPC from\tbitcoind (Frank F)\n\n\n----------------------------------------------------------------------\n\nMessage: 1\nDate: Mon, 19 Aug 2013 12:27:01 -0400\nFrom: Jeff Garzik <jgarzik at bitpay.com>\nSubject: [Bitcoin-development] Proposal: remove \"getwork\" RPC from\n\tbitcoind\nTo: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>\nMessage-ID:\n\t<CAJHLa0MnnWw=qiYC0nJcY=BdTDcAjGtraJ+kazoG7_bHW-HBtw at mail.gmail.com>\nContent-Type: text/plain; charset=ISO-8859-1\n\nPull request https://github.com/bitcoin/bitcoin/pull/2905 proposes to remove \"getwork\" RPC from bitcoind: https://en.bitcoin.it/wiki/Getwork\n\nOn mainnet, almost everybody uses a pool (and therefore, not \"getwork\"\ndirectly to bitcoind).  Those few who solo mine use a pool server to talk to bitcoind via \"getblocktemplate\" or other means.  Tests show that attempts to solo mine on mainnet via \"getwork\" lead to delays and problems.\n\nOn testnet, getwork has a better chance of continuing to work.\nNevertheless, the same tools (open source pool servers or p2pool) are available for testnet, obviating the continued need to support getwork.\n\nHowever, at one time, getwork to bitcoind was widely used.  I wanted to poke the audience, to gauge response to removing \"getwork.\"  If a driving use case remains of which we're unaware, speak up, please.  We don't want to break anybody needlessly.\n\n--\nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n\n\n\n------------------------------\n\nMessage: 2\nDate: Mon, 19 Aug 2013 15:09:41 -0500\nFrom: Frank F <frankf44 at gmail.com>\nSubject: Re: [Bitcoin-development] Proposal: remove \"getwork\" RPC from\n\tbitcoind\nCc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>\nMessage-ID:\n\t<CALxyHsXoCqL8dNXeayibfbR7-JU6Ke19gJJ1fToboULdUa155Q at mail.gmail.com>\nContent-Type: text/plain; charset=\"iso-8859-1\"\n\nI strongly object to removing the only mechanism that allows anyone to say\nthat bitcoin is p2p, in the truest sense of the word. Moves like this that\nfavor only the pool operators and private mining interests are signs that\nbitcoin is headed towards a monopoly/cartel model, and that would be a\ntragic outcome for something that holds a great promise. Nobody knows what\nmining will look like in the future, and denying the individual novice the\nability to mine at a small scale, even if we may think it is inefficient\nnow, is not a good path to start down.\n\nIf there are technical problems with getwork, maybe they should be\naddressed and fixed instead of outright abandoned.\n\n\nOn Mon, Aug 19, 2013 at 11:27 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> Pull request https://github.com/bitcoin/bitcoin/pull/2905 proposes to\n> remove \"getwork\" RPC from bitcoind: https://en.bitcoin.it/wiki/Getwork\n>\n> On mainnet, almost everybody uses a pool (and therefore, not \"getwork\"\n> directly to bitcoind).  Those few who solo mine use a pool server to\n> talk to bitcoind via \"getblocktemplate\" or other means.  Tests show\n> that attempts to solo mine on mainnet via \"getwork\" lead to delays and\n> problems.\n>\n> On testnet, getwork has a better chance of continuing to work.\n> Nevertheless, the same tools (open source pool servers or p2pool) are\n> available for testnet, obviating the continued need to support\n> getwork.\n>\n> However, at one time, getwork to bitcoind was widely used.  I wanted\n> to poke the audience, to gauge response to removing \"getwork.\"  If a\n> driving use case remains of which we're unaware, speak up, please.  We\n> don't want to break anybody needlessly.\n>\n> --\n> Jeff Garzik\n> Senior Software Engineer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Introducing Performance Central, a new site from SourceForge and\n> AppDynamics. Performance Central is your source for news, insights,\n> analysis and resources for efficient Application Performance Management.\n> Visit us today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897511&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \n*MONEY IS OVER!*\n                                IF YOU WANT IT<http://www.zeitgeistmovie.com/>\n=====================================================\nThe causes of my servitude can be traced to the tyranny of money.\n-Serj Tankian\n-------------- next part --------------\nAn HTML attachment was scrubbed...\n\n------------------------------\n\nMessage: 3\nDate: Mon, 19 Aug 2013 20:13:00 +0000\nFrom: \"Luke-Jr\" <luke at dashjr.org>\nSubject: Re: [Bitcoin-development] Proposal: remove \"getwork\" RPC from\n\tbitcoind\nTo: bitcoin-development at lists.sourceforge.net\nMessage-ID: <201308192013.02806.luke at dashjr.org>\nContent-Type: Text/Plain;  charset=\"iso-8859-15\"\n\nOn Monday, August 19, 2013 8:09:41 PM Frank F wrote:\n> I strongly object to removing the only mechanism that allows anyone to say\n> that bitcoin is p2p, in the truest sense of the word. Moves like this that\n> favor only the pool operators and private mining interests are signs that\n> bitcoin is headed towards a monopoly/cartel model, and that would be a\n> tragic outcome for something that holds a great promise. Nobody knows what\n> mining will look like in the future, and denying the individual novice the\n> ability to mine at a small scale, even if we may think it is inefficient\n> now, is not a good path to start down.\n> \n> If there are technical problems with getwork, maybe they should be\n> addressed and fixed instead of outright abandoned.\n\nYou missed getblocktemplate. It does everything getwork did and more.\n\nIndividual solo miners aren't being locked out at all. This is just removal of \na protocol that has been obsolete for well over a year now.\n\nLuke\n\n\n\n------------------------------\n\nMessage: 4\nDate: Mon, 19 Aug 2013 22:14:36 +0200\nFrom: Pieter Wuille <pieter.wuille at gmail.com>\nSubject: Re: [Bitcoin-development] Proposal: remove \"getwork\" RPC from\n\tbitcoind\nTo: Frank F <frankf44 at gmail.com>\nCc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>\nMessage-ID:\n\t<CAPg+sBjMdZfHpZrvHwMx6oQsS0yJaXVjTnyRwf6VCdnWTHQZaw at mail.gmail.com>\nContent-Type: text/plain; charset=ISO-8859-1\n\nOn Mon, Aug 19, 2013 at 10:09 PM, Frank F <frankf44 at gmail.com> wrote:\n> I strongly object to removing the only mechanism that allows anyone to say\n> that bitcoin is p2p, in the truest sense of the word. Moves like this that\n> favor only the pool operators and private mining interests are signs that\n> bitcoin is headed towards a monopoly/cartel model, and that would be a\n> tragic outcome for something that holds a great promise. Nobody knows what\n> mining will look like in the future, and denying the individual novice the\n> ability to mine at a small scale, even if we may think it is inefficient\n> now, is not a good path to start down.\n>\n> If there are technical problems with getwork, maybe they should be addressed\n> and fixed instead of outright abandoned.\n\nThey were addressed and fixed in a successor API, getblocktemplate.\nIt's even more decentralization-friendly, as it allows the caller to\nsee what transactions the daemon is trying to put into a block, and\neven modify it.\n\nThe suggestion here is not to remove functionality - only to remove an\nobsolete API for doing so.\n\n-- \nPieter\n\n\n\n------------------------------\n\nMessage: 5\nDate: Mon, 19 Aug 2013 16:15:08 -0400\nFrom: Matt Corallo <bitcoin-list at bluematt.me>\nSubject: Re: [Bitcoin-development] Proposal: remove \"getwork\" RPC from\n\tbitcoind\nTo: Jeff Garzik <jgarzik at bitpay.com>\nCc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>\nMessage-ID: <1376943308.27037.7.camel at localhost.localdomain>\nContent-Type: text/plain; charset=\"UTF-8\"\n\nACK, I see no reason to leave broken things in that a) arent necessary\nand b) no one has the developer resources to fix.\n\nMatt\n\nOn Mon, 2013-08-19 at 12:27 -0400, Jeff Garzik wrote:\n> Pull request https://github.com/bitcoin/bitcoin/pull/2905 proposes to\n> remove \"getwork\" RPC from bitcoind: https://en.bitcoin.it/wiki/Getwork\n> \n> On mainnet, almost everybody uses a pool (and therefore, not \"getwork\"\n> directly to bitcoind).  Those few who solo mine use a pool server to\n> talk to bitcoind via \"getblocktemplate\" or other means.  Tests show\n> that attempts to solo mine on mainnet via \"getwork\" lead to delays and\n> problems.\n> \n> On testnet, getwork has a better chance of continuing to work.\n> Nevertheless, the same tools (open source pool servers or p2pool) are\n> available for testnet, obviating the continued need to support\n> getwork.\n> \n> However, at one time, getwork to bitcoind was widely used.  I wanted\n> to poke the audience, to gauge response to removing \"getwork.\"  If a\n> driving use case remains of which we're unaware, speak up, please.  We\n> don't want to break anybody needlessly.\n> \n\n\n\n\n\n------------------------------\n\nMessage: 6\nDate: Mon, 19 Aug 2013 15:16:17 -0500\nFrom: Frank F <frankf44 at gmail.com>\nSubject: Re: [Bitcoin-development] Proposal: remove \"getwork\" RPC from\n\tbitcoind\nCc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>\nMessage-ID:\n\t<CALxyHsV=LWY+TzZG-XBQ6HNhxFEezjFhW++aJ7oVbVGEJWW0nw at mail.gmail.com>\nContent-Type: text/plain; charset=\"iso-8859-1\"\n\nThank you for setting me straight. Please forgive my ignorance.\n\n\nOn Mon, Aug 19, 2013 at 3:14 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> On Mon, Aug 19, 2013 at 10:09 PM, Frank F <frankf44 at gmail.com> wrote:\n> > I strongly object to removing the only mechanism that allows anyone to\n> say\n> > that bitcoin is p2p, in the truest sense of the word. Moves like this\n> that\n> > favor only the pool operators and private mining interests are signs that\n> > bitcoin is headed towards a monopoly/cartel model, and that would be a\n> > tragic outcome for something that holds a great promise. Nobody knows\n> what\n> > mining will look like in the future, and denying the individual novice\n> the\n> > ability to mine at a small scale, even if we may think it is inefficient\n> > now, is not a good path to start down.\n> >\n> > If there are technical problems with getwork, maybe they should be\n> addressed\n> > and fixed instead of outright abandoned.\n>\n> They were addressed and fixed in a successor API, getblocktemplate.\n> It's even more decentralization-friendly, as it allows the caller to\n> see what transactions the daemon is trying to put into a block, and\n> even modify it.\n>\n> The suggestion here is not to remove functionality - only to remove an\n> obsolete API for doing so.\n>\n> --\n> Pieter\n>\n\n\n\n-- \n*MONEY IS OVER!*\n                                IF YOU WANT IT<http://www.zeitgeistmovie.com/>\n=====================================================\nThe causes of my servitude can be traced to the tyranny of money.\n-Serj Tankian\n-------------- next part --------------\nAn HTML attachment was scrubbed...\n\n------------------------------\n\n------------------------------------------------------------------------------\nIntroducing Performance Central, a new site from SourceForge and \nAppDynamics. Performance Central is your source for news, insights, \nanalysis and resources for efficient Application Performance Management. \nVisit us today!\nhttp://pubads.g.doubleclick.net/gampad/clk?id=48897511&iu=/4140/ostg.clktrk\n\n------------------------------\n\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\nEnd of Bitcoin-development Digest, Vol 27, Issue 28\n***************************************************"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-08-19T21:07:46",
                "message_text_only": "On Mon, Aug 19, 2013 at 1:22 PM, Goss, Brian C., M.D.\n<Goss.Brian at mayo.edu> wrote:\n> What if we have a massive (like many orders of magnitude) drop in network harsh rate?  Might such a function be useful to salvage the (non-functioning) network? Same for IRC bootstrapping.  How do we pick ourselves up off the ground in case of the equivalent of a great depression in network hash rate (or some jerk spending $100M just to drive the difficulty up and then turning his hardware off?).\n\n[Aside: When replying to the digest, please try to trim it]\n\nIt appears that we will soon be at a hashrate where all the desktop\nCPUs in the world couldn't really make a dent in it... certainly not\ndesktop cpus using the slow integrated cpu miner, which is much slower\nthan external optimized cpu miners.\n\nBut this is why I suggest packaging up a modern mining tool that\nsupports CPU/GPU/FPGA/ASIC mining against a current bitcoind. Doing so\nwould reduce the difference between testnet and mainnet, and provide\nan actually useful tool for contributing directly.\n\nThough again, I note, that Jeff's patch doesn't actually remove the\nintegrated miner (I think it should\u2026).  Just the getwork support for\nexternal miners which don't use getblocktemplate... and if you're\ngoing to download one of those you could go download bfgminer instead."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2013-08-19T22:49:46",
                "message_text_only": "Removing getwork and the old miner and packaging a better miner seems\nthe best solution for the reasons already mentioned.\n\nNot directly related, but this remembered me that we planned to\nremove the accounting features on freicoin. We don't want to adapt\nthem for demurrage and we think business shouldn't use it and should\ncode their own accounting system instead. One that keeps a full log\nof the accounting, etc.\nUnfortunately the first exchange to support freicoin (cryptonit) used\nthis feature for accounting user balances on the exchange.\n\nSo the question is, is there any good reason to maintain this?\nIs any serious business really using this or anyone at all?\n\nI'm talking about removing the following rpc calls:\n\ngetaccount\ngetaddressesbyaccount\ngetbalance\ngetreceivedbyaccount\nlistaccounts\nlistreceivedbyaccount\nmove\nsendfrom\nsetaccount\n\n...and modifying these:\n\ngetnewaddress\nlistreceivedbyaddress\nlisttransactions\nsendmany\n\nI think this would also leave a cleaner API, but I'm just interested\non what the objections would be to this removal.\n\nHow crazy does this sound?\nShould we reconsider their removal for freicoin, proceed or create a\npull request for bitcoin?\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "Ron",
                "date": "2013-08-21T21:24:38",
                "message_text_only": "Message: 1\n\nDate: Mon, 19 Aug 2013 14:07:46 -0700\nFrom: Gregory Maxwell <gmaxwell at gmail.com>\nSubject: Re: [Bitcoin-development] Proposal: remove \"getwork\" RPC from\n\u00a0\u00a0\u00a0 bitcoind\nTo: \"Goss, Brian C., M.D.\" <Goss.Brian at mayo.edu>\nCc: \"bitcoin-development at lists.sourceforge.net\"\n\u00a0\u00a0\u00a0 <bitcoin-development at lists.sourceforge.net>\nMessage-ID:\n\u00a0\u00a0\u00a0 <CAAS2fgQtGg+SxRc7Byw0_L3NpEudPTtBpmnKYt-+7VEVSnKZaQ at mail.gmail.com>\nContent-Type: text/plain; charset=UTF-8\n\nOn Mon, Aug 19, 2013 at 1:22 PM, Goss, Brian C., M.D.\n<Goss.Brian at mayo.edu> wrote:\n> What if we have a massive (like many orders of magnitude) drop in network harsh rate?\u00a0 Might such a function be useful to salvage the (non-functioning) network? Same for IRC bootstrapping.\u00a0 How do we pick ourselves up off the ground in case of the equivalent of a great depression in network hash rate (or some jerk spending $100M just to drive the difficulty up and then turning his hardware off?).\n\n[Aside: When replying to the digest, please try to trim it]\n\nIt appears that we will soon be at a hashrate where all the desktop\nCPUs in the world couldn't really make a dent in it... certainly not\ndesktop cpus using the slow integrated cpu miner, which is much slower\nthan external optimized cpu miners.\n\nBut this is why I suggest packaging up a modern mining tool that\nsupports CPU/GPU/FPGA/ASIC mining against a current bitcoind. Doing so\nwould reduce the difference between testnet and mainnet, and provide\nan actually useful tool for contributing directly.\n\nThough again, I note, that Jeff's patch doesn't actually remove the\nintegrated miner (I think it should?).\u00a0 Just the getwork support for\nexternal miners which don't use getblocktemplate... and if you're\ngoing to download one of those you could go download bfgminer instead.\n\nMessage: 5\nDate: Tue, 20 Aug 2013 01:02:41 +0200\nFrom: Andreas Schildbach <andreas at schildbach.de>\nSubject: Re: [Bitcoin-development] Proposal: remove \"getwork\" RPC from\n\u00a0\u00a0\u00a0 bitcoind\nTo: bitcoin-development at lists.sourceforge.net\nMessage-ID: <kuu86a$ii5$1 at ger.gmane.org>\nContent-Type: text/plain; charset=ISO-8859-1\n\nOn 08/19/2013 10:34 PM, Jeff Garzik wrote:\n\n>> FWIW, Litecoin 0.8.x entirely removed the internal miner and we warned\n>> people that getwork will be removed in the next major version.\u00a0 Pooler's CPU\n>> minerd which supports both sha256d and scrypt recently grew stratum support.\n>> Perhaps he could be convinced to add GBT support too, which would help this\n>> goal of completely removing the internal miner and getwork.\n> \n> The internal miner is still actively used for testnet, here.\n\nHere, too. If I'm too impatient to wait for the next block that is.\n\nI think it'd be a pity if the easy way to mine blocks would be removed.\n__________________________________________________________________\nMy comments start here.\n\nI agree with Andreas. The mining code in bitcoind & qt is not so hard to improve \nand even use, such as it is. I am sorry to say that using bfgminer is one big, complicated install, \non Windows at least, AFAICT from looking at the github code bfgminer-2.10.11.zip. \nSeems much more work than I had bringing up bitcoind/qt from the \"ground up\" on my \nWindows machine. And the mining code is only a small part of the end of main.cpp .\nI don't see it harming the rest of the code when I run it in the daemon or Qt.\n\nCan't one mine \"from a distance\" using the RPC interface now anyway, even with the \ncode still there?\n\nI assume that you all would like to have a \"seething horde\" of new Windows users \nrunning and using bitcoin? I know that I sure am trying to make that happen. I think \nan integrated, wallet, miner, full node on the net (which I presume bitcoind/bitcoin-qt \nare) is the first step, and maybe should always exist? Though other variations could \nexist too. Could even be a compile Define, like USE_PNP for example, to strip off \nthis or that?\n\nSo for me, if I want to mine, just because my solar powered laptop has some free cpu \ncycles, I don't mind having a \"snow ball's chance in hell\" of solving the \"next\" block. At \n~0.5 MHPS on my CPU it takes me ~2.5 hours to go through all (2^32)-1 nonces for a \ntentative new block, with a particular set of transactions. I only can get \"deep\" into \nthe nonces when one of those +30 minute blocks comes by! And they do from time to time.\n\nI think forcing users to have two computers to mine, or run two programs,\u00a0 is \"pushing it\" \nso to speak? And do I also see some wallet removal code being conjured up on git hub?\n\nI think the beauty that is Satoshi's original bitcoin idea should be kept, together in one \npackage. If the code was properly commented, formatted, organized , etc.etc., which I \nunderstand is \"postponed\" when one is \"in the zone\" writing code, then I think \nseparating the wallet code or mining code, ought to be much easier. \n\nI feel that the dirty task of at least \"calling things by their right names\" (as said in the \nChinese proverb) should be done first. As an example calling the main Berkeley \ndatabase environment class instance of the wallet an abbreviated 5 lower case \nletter cryptic \"bitdb\" reminds me of the time when ram and disc storage were \n\"dear\" and compilers couldn't handle \"long\" names! I would call it something \nmuch grander! Only 46 places to change ! Also the member DbEnv dbenv \nis equally underplayed as it is the main actor in the play! Let's not even mention pdb \nbeing used both for a BerkeleyDB\u00a0 CDB.Db* and as an albeit private leveldb DB*.!\n\nPointers that aren't called pSomething, un-commented/un-documented magic numbers \nwhere commented constants should be, and on and on it goes.\n\nSo I just sit back doing the clean up on 0.8.1, then .0.8.2, now 0.8.3 while you \narchitects march ahead oblivious to the cryptic minefield of code that exists underneath :) \nMy aim is to first clean up the code enough so that I can understand it. Then eventually, \ntake it over to a real Windows project/solution where it can be made into an executable \nthat is palatable for the masses.\n\nGetting off soapbox now and retreating to the back...(bitcointalk.org that is)\n\nRon\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130821/78e10999/attachment.html>"
            },
            {
                "author": "rob.golding at astutium.com",
                "date": "2013-08-21T21:39:13",
                "message_text_only": "> It appears that we will soon be at a hashrate where all the desktop\n> CPUs in the world couldn't really make a dent in it... certainly not\n> desktop cpus using the slow integrated cpu miner,\n\nI thought the integrated miner was retired a version or so ago - I \ndontrecall seeing it for some time in bitcoin-qt\n\nNow you can buy a USB stick for $20 which can be pushed to around \n500MH/s, and  there's no reason the manufacturers couldn't ship those \nwith a miner-program onboard !\n\nRob"
            },
            {
                "author": "Maciej Trebacz",
                "date": "2013-08-22T09:36:51",
                "message_text_only": "Will removing \"getwork\" from the client impact the \"setgenerate\" RPC call?\nI.e. would you still be able to generate coins on testnet-in-a-box this\nway, or would you need a dedicated miner for that? testnet-in-a-box is very\nuseful for testing and easy to setup, it would be great if it stays that\nway :).\n\n\nOn Wed, Aug 21, 2013 at 11:39 PM, <rob.golding at astutium.com> wrote:\n\n> > It appears that we will soon be at a hashrate where all the desktop\n> > CPUs in the world couldn't really make a dent in it... certainly not\n> > desktop cpus using the slow integrated cpu miner,\n>\n> I thought the integrated miner was retired a version or so ago - I\n> dontrecall seeing it for some time in bitcoin-qt\n>\n> Now you can buy a USB stick for $20 which can be pushed to around\n> 500MH/s, and  there's no reason the manufacturers couldn't ship those\n> with a miner-program onboard !\n>\n> Rob\n>\n>\n> ------------------------------------------------------------------------------\n> Introducing Performance Central, a new site from SourceForge and\n> AppDynamics. Performance Central is your source for news, insights,\n> analysis and resources for efficient Application Performance Management.\n> Visit us today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897511&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130822/988a3ab0/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-08-22T13:18:19",
                "message_text_only": "On Thu, Aug 22, 2013 at 5:36 AM, Maciej Trebacz <maciej at bitalo.com> wrote:\n> Will removing \"getwork\" from the client impact the \"setgenerate\" RPC call?\n> I.e. would you still be able to generate coins on testnet-in-a-box this way,\n> or would you need a dedicated miner for that? testnet-in-a-box is very\n> useful for testing and easy to setup, it would be great if it stays that way\n\nYes, that is currently being discussed in a separate pull request.  My\npull request does not impact setgenerate, but an added proposal does\nremove the internal miner completely.\n\n-- \nJeff Garzik\nSenior Software Engineer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-08-22T13:33:16",
                "message_text_only": "That would be annoying for testing. Regtest mode allows you to create a new\nblock by just running \"setgenerate true\" (it switches itself off after\ncreating a block). If you had to set up a complicated set of separate\nprograms just to do regtest mode that'd be a step backwards, IMO.\n\n\nOn Thu, Aug 22, 2013 at 3:18 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> On Thu, Aug 22, 2013 at 5:36 AM, Maciej Trebacz <maciej at bitalo.com> wrote:\n> > Will removing \"getwork\" from the client impact the \"setgenerate\" RPC\n> call?\n> > I.e. would you still be able to generate coins on testnet-in-a-box this\n> way,\n> > or would you need a dedicated miner for that? testnet-in-a-box is very\n> > useful for testing and easy to setup, it would be great if it stays that\n> way\n>\n> Yes, that is currently being discussed in a separate pull request.  My\n> pull request does not impact setgenerate, but an added proposal does\n> remove the internal miner completely.\n>\n> --\n> Jeff Garzik\n> Senior Software Engineer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Introducing Performance Central, a new site from SourceForge and\n> AppDynamics. Performance Central is your source for news, insights,\n> analysis and resources for efficient Application Performance Management.\n> Visit us today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897511&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130822/c1169168/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2013-08-22T15:30:13",
                "message_text_only": "On Thu, Aug 22, 2013 at 3:33 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> That would be annoying for testing. Regtest mode allows you to create a\n> new block by just running \"setgenerate true\" (it switches itself off after\n> creating a block). If you had to set up a complicated set of separate\n> programs just to do regtest mode that'd be a step backwards, IMO.\n>\n\nThere is some consensus that when the internal miner is to be removed, a\nsimple miner should be packaged with the main repository as separate\nprogram (the \"reference miner\"?). The only change is that it does no longer\nneed to burden the core code\n(see also the discussion here: https://github.com/bitcoin/bitcoin/pull/2917).\n\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130822/f37e9189/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposal: remove \"getwork\" RPC from bitcoind",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Luke-Jr",
                "Goss, Brian C., M.D.",
                "Wladimir",
                "Frank F",
                "Warren Togami Jr.",
                "Andreas Schildbach",
                "Mike Hearn",
                "rob.golding at astutium.com",
                "Maciej Trebacz",
                "Jorge Tim\u00f3n",
                "Gregory Maxwell",
                "Matt Corallo",
                "Pieter Wuille",
                "Ron"
            ],
            "messages_count": 22,
            "total_messages_chars_count": 44872
        }
    },
    {
        "title": "[Bitcoin-development] There will be a 0.8.4 release",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2013-08-20T21:28:06",
                "message_text_only": "There have been a few not-quite-serious-enough-to-justify-a-release\nsecurity fixes that, along with a couple of serious bugs, we think together\nDO justify a new 0.8.* release.\n\nSo I just created a 0.8.4 branch, based on the 0.8.3 branch, and will be\ncherry-picking from the master branch.\n\nPlanned changes from the 0.8.3 release:\n\nSecurity-related:\n42656ea  Make RPC password resistant to timing attacks\n159bc48  Simplify storage of orphan transactions, fix CVE-2013-4627\n37c6389  Performance optimization for bloom filters (help mitigate\npotential DoS attack discussed last week)\n\nBug fixes:\n9bf2a4ab  Fix multi-block reorg transaction resurrection\nbf81a3ef  Fix Gnome bitcoin: URI handler\nf0784ac4  Fix non-standard disconnected transactions causing mempool orphans\n2461aba1  Mempool consistency check\npull 2916  Import OSX fsync change from LevelDB subtree  (will hopefully\nfix the random-OSX leveldb corruption issues)\n\nThere are lots of little fixes that could be included, but those will wait\nfor the 0.9 release.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130821/68ea6609/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "There will be a 0.8.4 release",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1225
        }
    },
    {
        "title": "[Bitcoin-development] Making bitcoin traceability harder",
        "thread_messages": [
            {
                "author": "Far\u00e9",
                "date": "2013-08-21T03:39:12",
                "message_text_only": "Dear bitcoin developers,\n\ntrading arbitrary amounts of bitcoins makes it easier to trace who\ndoes what just by observing the amounts being traded, and where the\nresidual money ends up: e.g. you can identify that obviously, the\nrecurrent user of address A sent 2.5 bitcoins to the recurrent user of\naddress B, keeping the rest of his money in A. If instead bitcoin\nusers practice the discipline, enforced by the client software by\ndefault, of only keeping a power-of-two amount of satoshis in use-once\nwallets except where public donation addresses are meant, then tracing\nsuddenly becomes much harder.\n\nWhether this particular discipline is the best to implement or not,\nshouldn't bitcoin clients enforce SOME discipline that makes tracing\nharder? After all we know that uniformed goons are eager to watch\nwho's trading with whom and to crack down on users. We shouldn't be\nmaking it easy for them, though this will mean slightly higher\ntransaction cost. Merchants would then generate not one but a series\nof new addresses at each transaction, and the customer would send\nappropriately sized buckets of satoshis to each of the addresses.\nThere should just be a standard way to specify an amount and a list of\naddresses as a target for payment, that merchants can communicate to\ncustomers (though that might require e.g. higher resolution QR codes).\n\nHas this idea already been considered before? Accepted or rejected?\n\n\u2014\u266f\u0192 \u2022 Fran\u00e7ois-Ren\u00e9 \u00d0VB Rideau \u2022Reflection&Cybernethics\u2022 http://fare.tunes.org\nOf course, Third World leaders love you. By ascribing third world ills to\nFirst World sins, you absolve them of blame for their countries' failure to\nadvance. \u2014 John McCarthy"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-08-21T12:00:48",
                "message_text_only": "Far\u00e9,\n\nLet me start out by noting that there are plenty of good ideas which could be \nimplemented, but haven't been yet, and might take a long time to get to. There \nare only a couple handfuls of Bitcoin developers, and even fewer of us who are \nable to work full-time on Bitcoin development. Perhaps surprisingly, even this \noften isn't the bottleneck to new functionality: we have a terrible shortage \nof testers, needed to make sure improvements don't break things in subtle \nways. So, while your ideas are appreciated, please keep in mind that it may \ntake time to add them, and you can help Bitcoin development much more by \naiding in testing currently-written-but-untested features.\n\nWith regard to your points made specifically, please note that addresses are \nintended to be single-use only. Thus, the \"recurrent user of address A/B\" are \nnot using Bitcoin correctly already, which is why they are so easy to trace. \nAs far as keeping change amounts as powers of two, while I would personally \nlove to find a justification for power-of-two amounts, I don't see how this \nwould help privacy. I think it would actually hurt privacy, as change would \nnow be clearly identifiable. Furthermore, it would necessarily have to throw \naway excess as a transaction fee - some users would be very upset with this.\n\nAs you suggest, it is of course already best practice for merchants (and \nindividuals!) to use a unique payment address for every transaction. Gavin's \npayment protocol work has been making some great progress toward improving \nusability for this. There is also a general consensus that Bitcoin-Qt's \n\"Receive coins\" tab could be significantly improved to discourage address \nreuse further. I don't believe it has been discussed to have merchants use \nmultiple addresses/coins for a single payment; that might be worth some \nfurther discussion here as a privacy extension, but I don't think many would \nconsider it an urgent issue (it may help, but probably not enough to make it \nworthwhile).\n\nLuke\n\n\nOn Wednesday, August 21, 2013 3:39:12 AM Far\u00e9 wrote:\n> Dear bitcoin developers,\n> \n> trading arbitrary amounts of bitcoins makes it easier to trace who\n> does what just by observing the amounts being traded, and where the\n> residual money ends up: e.g. you can identify that obviously, the\n> recurrent user of address A sent 2.5 bitcoins to the recurrent user of\n> address B, keeping the rest of his money in A. If instead bitcoin\n> users practice the discipline, enforced by the client software by\n> default, of only keeping a power-of-two amount of satoshis in use-once\n> wallets except where public donation addresses are meant, then tracing\n> suddenly becomes much harder.\n> \n> Whether this particular discipline is the best to implement or not,\n> shouldn't bitcoin clients enforce SOME discipline that makes tracing\n> harder? After all we know that uniformed goons are eager to watch\n> who's trading with whom and to crack down on users. We shouldn't be\n> making it easy for them, though this will mean slightly higher\n> transaction cost. Merchants would then generate not one but a series\n> of new addresses at each transaction, and the customer would send\n> appropriately sized buckets of satoshis to each of the addresses.\n> There should just be a standard way to specify an amount and a list of\n> addresses as a target for payment, that merchants can communicate to\n> customers (though that might require e.g. higher resolution QR codes).\n> \n> Has this idea already been considered before? Accepted or rejected?\n> \n> \u2014\u266f\u0192 \u2022 Fran\u00e7ois-Ren\u00e9 \u00d0VB Rideau \u2022Reflection&Cybernethics\u2022\n> http://fare.tunes.org Of course, Third World leaders love you. By\n> ascribing third world ills to First World sins, you absolve them of blame\n> for their countries' failure to advance. \u2014 John McCarthy\n> \n> ---------------------------------------------------------------------------\n> --- Introducing Performance Central, a new site from SourceForge and\n> AppDynamics. Performance Central is your source for news, insights,\n> analysis and resources for efficient Application Performance Management.\n> Visit us today!\n> http://pubads.g.doubleclick.net/gampad/clk?id=48897511&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Far\u00e9",
                "date": "2013-08-21T15:10:55",
                "message_text_only": "Dear Luke,\n\nthanks for your prompt response.\n\nOn Wed, Aug 21, 2013 at 8:00 AM, Luke-Jr <luke at dashjr.org> wrote:\n> Let me start out by noting that there are plenty of good ideas which could be\n> implemented, but haven't been yet, and might take a long time to get to. There\n> are only a couple handfuls of Bitcoin developers, and even fewer of us who are\n> able to work full-time on Bitcoin development. Perhaps surprisingly, even this\n> often isn't the bottleneck to new functionality: we have a terrible shortage\n> of testers, needed to make sure improvements don't break things in subtle\n> ways. So, while your ideas are appreciated, please keep in mind that it may\n> take time to add them, and you can help Bitcoin development much more by\n> aiding in testing currently-written-but-untested features.\n>\nThat's a useful reminder.\n\n> With regard to your points made specifically, please note that addresses are\n> intended to be single-use only. Thus, the \"recurrent user of address A/B\" are\n> not using Bitcoin correctly already, which is why they are so easy to trace.\n> As far as keeping change amounts as powers of two, while I would personally\n> love to find a justification for power-of-two amounts, I don't see how this\n> would help privacy. I think it would actually hurt privacy, as change would\n> now be clearly identifiable. Furthermore, it would necessarily have to throw\n> away excess as a transaction fee - some users would be very upset with this.\n>\nEven when you don't reuse your address, by considering the amounts in\na transaction, it is often easy to identify what is the main amount\nand what is the residual. e.g. \"oh, he spent $1.99 worth of bitcoin\nout of his big bitcoin address, so the $1.99 is being paid, and the\nrest is still the same person\", and so trace identities. By using\npower-of-two buckets (based on the binary expansion of the amount), it\nbecomes harder to do amount analysis. Sometimes, buckets are joined or\nsplit, but that still doesn't help much identify how several buckets\ncombine into one transaction. As for transaction fees \u2014 indeed, they\nshould probably be paid in separate small-bucket transactions. I don't\nsee any particular difficulty about it.\n\n> As you suggest, it is of course already best practice for merchants (and\n> individuals!) to use a unique payment address for every transaction. Gavin's\n> payment protocol work has been making some great progress toward improving\n> usability for this. There is also a general consensus that Bitcoin-Qt's\n> \"Receive coins\" tab could be significantly improved to discourage address\n> reuse further. I don't believe it has been discussed to have merchants use\n> multiple addresses/coins for a single payment; that might be worth some\n> further discussion here as a privacy extension, but I don't think many would\n> consider it an urgent issue (it may help, but probably not enough to make it\n> worthwhile).\n>\nThere is nothing urgent indeed. Nevertheless, I fear that the current\nusage pattern is too easily traceable, and that tweaks such as the one\nI'm proposing could make amount-based tracing much harder.\n\nThanks for your hard work!\n\n\u2014\u266f\u0192 \u2022 Fran\u00e7ois-Ren\u00e9 \u00d0VB Rideau \u2022Reflection&Cybernethics\u2022 http://fare.tunes.org\nHe wa'n't no common dog, he wa'n't no mongrel; he was a composite.\nA composite dog is a dog that is made up of all the valuable qualities\nthat's in the dog breed \u2014 kind of a syndicate; and a mongrel is made up\nof all riffraff that's left over.  \u2014 Mark Twain"
            }
        ],
        "thread_summary": {
            "title": "Making bitcoin traceability harder",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Far\u00e9"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 9535
        }
    },
    {
        "title": "[Bitcoin-development] 0.8.4 release candidate 2 : please help test",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2013-08-21T22:19:39",
                "message_text_only": "0.8.4 release candidate 2 is available at:\n  https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.4/test/\n\nThis is a maintenance release to fix a critical bug and fix three minor\nsecurity issues; it contains very few changes from the 0.8.3 release.\n\nThe two changes that need testing:\n\n1) OSX FD_FULLSYNC leveldb corruption fix. If you have had trouble with\ndatabase corruption on OSX, please try this release and let us know if it\nseems to help. Also let us know if you experience any performance problems\nwith this release.\n\n2) Bloom filter optimization. If you have code that uses the bloom-filtered\nblock (merkleblock) protocol, please try it against this release and let us\nknow if you run into any issues.\n\n\nPS: a critical last-minute bug was found in release candidate 1; it was\nnever released.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130822/9ea249a0/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "0.8.4 release candidate 2 : please help test",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1021
        }
    },
    {
        "title": "[Bitcoin-development] Way to tell that transaction was issued by a specific person/company",
        "thread_messages": [
            {
                "author": "Maciej Trebacz",
                "date": "2013-08-23T06:26:51",
                "message_text_only": "As far as I know current Bitcoin protocol doesn't let you to include any\narbitrary data with the transactions (as it would become non-standard and\nclients would not relay it). So if you have multiple addresses you can't\nsign them with a single private key and include that signature in the\ntransaction so other party can verify it against your public key. This\ncould become very handy though - a reputable wallet service could issue\ntransactions that require zero confirmations from the other party,\nbecause with the added signature they know that the transaction is from\nthis reputable service and they trust that this service won't try to double\nspend. I'm thinking of something like Mt.Gox's \"green address\", but baked\ninto protocol (Mt.Gox does this by sending your funds to some known by the\nothers Bitcoin address and then relaying them to the final destination).\n\nDo you think it's possible/feasible to add a feature like this to the\ncurrent protocol without forking the chain? This could be as simple as\nadding support for following scripts:\n\n<data block> OP_DROP OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECK\n<data block> OP_DROP OP_HASH160 <pubKeyHash> OP_EQUAL\n\nThe <data block> should not be longer than 34 bytes (or more, depending if\nwe want to have some room for future use cases). This is all that needs to\nbe changed in the Bitcoin client. Now for actually using the feature a\nfurther definition of <data block> is required:\n\n22 AC 20 <32 byte signature>\n\n22 is data block length and \"AC 20\" is just a sub-opcode that can be either\ndefined by the protocol (in this case I'm reusing OP_CHECKSIG's opcode but\nthat's not required since this is all part of data block) or just agreed\nupon between people that want to use this feature.\n\nIt's possible that the above could be achieved in some simpler way using\nother opcodes or mechanisms present in Bitcoin protocol that I'm not aware\nof. Either way, I'd like to hear your opinions whether a feature like this\nshould be considered and added.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130823/28949a48/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-08-23T06:55:32",
                "message_text_only": "On Thu, Aug 22, 2013 at 11:26 PM, Maciej Trebacz <maciej at bitalo.com> wrote:\n> So if you have multiple addresses you can't\n> sign them with a single private key and include that signature in the\n> transaction so other party can verify it against your public key. This could\n> become very handy though - a reputable wallet service could issue\n> transactions that require zero confirmations from the other party, because\n> with the added signature they know that the transaction is from this\n> reputable service and they trust that this service won't try to double\n> spend. I'm thinking of something like Mt.Gox's \"green address\", but baked\n> into protocol (Mt.Gox does this by sending your funds to some known by the\n> others Bitcoin address and then relaying them to the final destination).\n>\n> Do you think it's possible/feasible to add a feature like this to the\n\nIt's feasible to do such things but I believe highly undesirable.\nYou're taking data which is inherently only of short term interest to\na single party in the whole world (the receiver) and enlarging the\ntransaction and increasing the effective transaction fees while\nforcing (say) a hundred thousand other parties to spend effort\ntransmitting it, processing it, and storing it for all time.\n\nWhile doing so you also leak to the whole world\u2014 who would have\npreviously had no way or reason to know\u2014 who the identity of one of\nthe parties in the transaction is in a strong cryptographically\nnon-reputable way... which then lowers the privacy of everyone in the\ntransaction graph region of that transaction since some coercive force\ncould send some ninjas out to bust some kneecaps of the identified\nparty until they tell them where those coins came from and where they\nwent. If you observe section 10 of Bitcoin.pdf you can see that\nprivacy in Bitcoin is based _exclusively_ on using pseudonymous\nidentities on every transaction. If you break that, you remove privacy\nfrom Bitcoin, leaving it at a competitive disadvantage to centeralized\npayment systems, which all provide pretty good basic privacy (against\nmost criminals and nosy neighbors) as a core feature.\n\nInstead: You can simply perform this transaction using the payment\nprotocol, which could provide along all sorts of additional metadata\nincluding signatures from the relevant parties.  By doing this, only\nthe parties that need to learn something learn something: privacy is\npreserved and bloat is avoided.\n\nIf the payment protocol is too heavy handed for you, simply giving the\nuser a signmessaged txid can show a promise to pay for a transaction\nwithout highly public communication."
            }
        ],
        "thread_summary": {
            "title": "Way to tell that transaction was issued by a specific person/company",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gregory Maxwell",
                "Maciej Trebacz"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 4807
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin-development Digest, Vol 27, Issue 33",
        "thread_messages": [
            {
                "author": "Ron",
                "date": "2013-08-23T13:28:58",
                "message_text_only": "________________________________\nMessage: 6\nDate: Thu, 22 Aug 2013 17:30:13 +0200\nFrom: Wladimir <laanwj at gmail.com>\nSubject: Re: [Bitcoin-development] Proposal: remove \"getwork\" RPC from\n\u00a0\u00a0\u00a0 bitcoind\n\nMessage-ID:\n\u00a0\u00a0\u00a0 <CA+s+GJC4o5V5p+FY+bgWVUt5umebn4_37bTihfX2q1GF05S=VA at mail.gmail.com>\nContent-Type: text/plain; charset=\"utf-8\"\n\nOn Thu, Aug 22, 2013 at 3:33 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> That would be annoying for testing. Regtest mode allows you to create a\n> new block by just running \"setgenerate true\" (it switches itself off after\n> creating a block). If you had to set up a complicated set of separate\n> programs just to do regtest mode that'd be a step backwards, IMO.\n>\n\nThere is some consensus that when the internal miner is to be removed, a\nsimple miner should be packaged with the main repository as separate\nprogram (the \"reference miner\"?). The only change is that it does no longer\nneed to burden the core code\n(see also the discussion here: https://github.com/bitcoin/bitcoin/pull/2917).\n\n\nWladimir\n__________________________________________________________\nI see no burden to the code when it is not mining, if that is what you mean by\nburden. The miner code's hashes/sec are a function of how much CPU time it \ngets. When I am gcc compiling, I see the hashes/sec drop, but bitcoind keeps \nup easily side by side with http://blockchain.info/ latest transactions and \nnew blocks. And I only have a single core AMD Athlon 1.8GHz cpu.\n\nI would hate to admit how many browser windows and tabs I have open too,\nand an IDE (LOL)!I will admit that I have modified the miner code a little, \n\u00a0to use (potentially) every allowable nonce and to check for a new block \nin a timed fashion and be less aggressive, 8 bytes of 0 instead of 4, in checking \nfor a potential solution. \n\nRon\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130823/9f649a6f/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin-development Digest, Vol 27, Issue 33",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Ron"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1994
        }
    },
    {
        "title": "[Bitcoin-development] Freimarkets: a proposal for user assets, distributed exchange, and off-chain txns",
        "thread_messages": [
            {
                "author": "Mark Friedenbach",
                "date": "2013-08-24T00:14:02",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOff-and-on for the past couple years, Jorge Tim\u00f3n and I have been\ndeveloping an extension of the Bitcoin and (pre-OpenCoin) Ripple\ndistributed protocols which enable user-specified bearer instruments,\ndistributed peer-to-peer exchange, off-chain accounting, auctions,\nderivatives and transitive transactions, and the multitude of financial\ncontracts having such primitives would make possible. The specification\nis now reasonably complete enough that we would like to receive input\nfrom the community. The PDF is available for viewing here:\n\nhttp://freico.in/docs/freimarkets-v0.0.1.pdf\n\nWe're looking for public comments about this or related approaches. In\nparticular we've spent a fair chunk of time working out how to handle\ncoordination of private accounting servers with the public chain and\nderivatives contracts, both of which are basically cryptographic\nprotocols expressed as bitcoin scripts. Input from any of the resident\ncryptographers would be very appreciated.\n\nHappy hacking,\nMark Friedenbach\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.19 (Darwin)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJSF/rKAAoJEAdzVfsmodw4xVYP/jLoB6eDlgREawfbcW6kXe4s\n25YnP19Hvk0NBk0Fv9G6zhAaOdHlR4dkcq2TueAqGHA+Drtp06eVkWDfqQOioGjx\nLrQF6ct9AbBZNN8glo7+JY70hecbEgWeW77cSrDTFxQAWwNnq0hVwVFb6++9rY9+\n6Q4jwJtqawWlMYRlFOiK1VW/MvI2WV4bypAjuOYsTnXZ8eFjyO+obZYUuMs6JUWd\nXojkDeL60NB6JHVoeyx270bvbP1Of5ErLZRuhC26MA9K4S6jlgfvLCqYBHnjRMHI\nKI/K7wqcpbbyldCSIcIsVtSrwBZRUgYfUFEFXvFjwzC0EwgGFwQC3pCqTWzskpo4\nKS8ZMpgr7BjI+M0GSpRyh5x0aqZkptaaogCssHzoykmEwm6dyK8cdtdhtFAsGAMs\ndYpftZ/NJ17tOkUd22TXpIxWPckFBOmuV/hlr0wFpj50glttMH/8NwqKtGcjO21e\necuiJzXbjCGlFpKIG+JI5BOXvEeD5VoegsfLTwA9Egkuhh8FXyiqIPUEEV0W1DAC\n0CIsX8XmWnKeRBWWa/2AHVuSQlBlut9gX1zRElaU5YSW58zsE3UeVPvSOJOh6ZKZ\neLkRjzuyDrpuJiRKXFdTS857grUhYs+E5xeVkkZWy+q3XqQ7LofcZjp3Xt8tmx4j\nLSaZTewUL15MjQR0Ow8a\n=xyHR\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Freimarkets: a proposal for user assets, distributed exchange, and off-chain txns",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mark Friedenbach"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2001
        }
    },
    {
        "title": "[Bitcoin-development] BIP 72 updated: require Accept HTTP header",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2013-08-28T01:40:28",
                "message_text_only": "I just added a requirement to the BIP 72 (bitcoin: URI payment protocol)\nspec:\n\nWallets must include an Accept HTTP header in HTTP requests:\n\nAccept: application/bitcoin-paymentrequest\n\n... and submitted a pull request so the reference implementation follows\nthe spec.\n\nThanks to Stephen/Jeff at BitPay for the suggestion. I'll make a similar\nchange to BIP 70 and require wallets set Accept:\napplication/bitcoin-paymentrequestack when sending the Payment and\nexpecting a PaymentACK message in return.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20130828/5d43f582/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP 72 updated: require Accept HTTP header",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 706
        }
    }
]