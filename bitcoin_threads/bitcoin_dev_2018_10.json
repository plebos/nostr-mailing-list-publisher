[
    {
        "title": "[bitcoin-dev] Bitcoin Core 0.17.0 released",
        "thread_messages": [
            {
                "author": "Wladimir J. van der Laan",
                "date": "2018-10-03T10:29:26",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nBitcoin Core version 0.17.0 is now available from:\n\n  <https://bitcoincore.org/bin/bitcoin-core-0.17.0/>\n\nor through BitTorrent:\n\n  magnet:?xt=urn:btih:1c72f17bc1667a2ce81860b75135e491f6637d05&dn=bitcoin-core-0.17.0&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969&tr=udp%3A%2F%2Fzer0day.ch%3A1337&tr=udp%3A%2F%2Fexplodie.org%3A6969\n\nThis is a new major version release, including new features, various bugfixes\nand performance improvements, as well as updated translations.\n\nPlease report bugs using the issue tracker at GitHub:\n\n  <https://github.com/bitcoin/bitcoin/issues>\n\nTo receive security and update notifications, please subscribe to:\n\n  <https://bitcoincore.org/en/list/announcements/join/>\n\nHow to Upgrade\n==============\n\nIf you are running an older version, shut it down. Wait until it has completely\nshut down (which might take a few minutes for older versions), then run the\ninstaller (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\nor `bitcoind`/`bitcoin-qt` (on Linux).\n\nIf your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\n\nThe first time you run version 0.15.0 or newer, your chainstate database will be converted to a\nnew format, which will take anywhere from a few minutes to half an hour,\ndepending on the speed of your machine.\n\nNote that the block database format also changed in version 0.8.0 and there is no\nautomatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\ndirectly from 0.7.x and earlier without redownloading the blockchain is not supported.\nHowever, as usual, old wallet versions are still supported.\n\nDowngrading warning\n- -------------------\n\nThe chainstate database for this release is not compatible with previous\nreleases, so if you run 0.15 and then decide to switch back to any\nolder version, you will need to run the old release with the `-reindex-chainstate`\noption to rebuild the chainstate data structures in the old format.\n\nIf your node has pruning enabled, this will entail re-downloading and\nprocessing the entire blockchain.\n\nCompatibility\n==============\n\nBitcoin Core is extensively tested on multiple operating systems using\nthe Linux kernel, macOS 10.10+, and Windows 7 and newer (Windows XP is not supported).\n\nBitcoin Core should also work on most other Unix-like systems but is not\nfrequently tested on them.\n\n- From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn't\nsupport versions of macOS older than 10.10.\n\nKnown issues\n============\n\n- - Upgrading from 0.13.0 or older currently results in memory blow-up during the roll-back of blocks to the SegWit activation point. In these cases, a full `-reindex` is necessary.\n\n- - The GUI suffers from visual glitches in the new MacOS dark mode. This has to do with our Qt theme handling and is not a new problem in 0.17.0, but is expected to be resolved in 0.17.1.\n\nNotable changes\n===============\n\nChanged configuration options\n- -----------------------------\n\n- - `-includeconf=<file>` can be used to include additional configuration files.\n  Only works inside the `bitcoin.conf` file, not inside included files or from\n  command-line. Multiple files may be included. Can be disabled from command-\n  line via `-noincludeconf`. Note that multi-argument commands like\n  `-includeconf` will override preceding `-noincludeconf`, i.e.\n  ```\n  noincludeconf=1\n  includeconf=relative.conf\n  ```\n\n  as bitcoin.conf will still include `relative.conf`.\n\nGUI changes\n- -----------\n\n- - Block storage can be limited under Preferences, in the Main tab. Undoing this setting requires downloading the full blockchain again. This mode is incompatible with -txindex and -rescan.\n\nExternal wallet files\n- ---------------------\n\nThe `-wallet=<path>` option now accepts full paths instead of requiring wallets\nto be located in the -walletdir directory.\n\nNewly created wallet format\n- ---------------------------\n\nIf `-wallet=<path>` is specified with a path that does not exist, it will now\ncreate a wallet directory at the specified location (containing a wallet.dat\ndata file, a db.log file, and database/log.?????????? files) instead of just\ncreating a data file at the path and storing log files in the parent\ndirectory. This should make backing up wallets more straightforward than\nbefore because the specified wallet path can just be directly archived without\nhaving to look in the parent directory for transaction log files.\n\nFor backwards compatibility, wallet paths that are names of existing data files\nin the `-walletdir` directory will continue to be accepted and interpreted the\nsame as before.\n\nDynamic loading and creation of wallets\n- ---------------------------------------\n\nPreviously, wallets could only be loaded or created at startup, by specifying `-wallet` parameters on the command line or in the bitcoin.conf file. It is now possible to load, create and unload wallets dynamically at runtime:\n\n- - Existing wallets can be loaded by calling the `loadwallet` RPC. The wallet can be specified as file/directory basename (which must be located in the `walletdir` directory), or as an absolute path to a file/directory.\n- - New wallets can be created (and loaded) by calling the `createwallet` RPC. The provided name must not match a wallet file in the `walletdir` directory or the name of a wallet that is currently loaded.\n- - Loaded wallets can be unloaded by calling the `unloadwallet` RPC.\n\nThis feature is currently only available through the RPC interface.\n\nCoin selection\n- --------------\n\n### Partial spend avoidance\n\nWhen an address is paid multiple times the coins from those separate payments can be spent separately which hurts privacy due to linking otherwise separate addresses. A new `-avoidpartialspends` flag has been added (default=false). If enabled, the wallet will always spend existing UTXO to the same address together even if it results in higher fees. If someone were to send coins to an address after it was used, those coins will still be included in future coin selections.\n\nConfiguration sections for testnet and regtest\n- ----------------------------------------------\n\nIt is now possible for a single configuration file to set different\noptions for different networks. This is done by using sections or by\nprefixing the option with the network, such as:\n\n    main.uacomment=bitcoin\n    test.uacomment=bitcoin-testnet\n    regtest.uacomment=regtest\n    [main]\n    mempoolsize=300\n    [test]\n    mempoolsize=100\n    [regtest]\n    mempoolsize=20\n\nIf the following options are not in a section, they will only apply to mainnet:\n`addnode=`, `connect=`, `port=`, `bind=`, `rpcport=`, `rpcbind=` and `wallet=`.\nThe options to choose a network (`regtest=` and `testnet=`) must be specified\noutside of sections.\n\n'label' and 'account' APIs for wallet\n- -------------------------------------\n\nA new 'label' API has been introduced for the wallet. This is intended as a\nreplacement for the deprecated 'account' API. The 'account' can continue to\nbe used in V0.17 by starting bitcoind with the '-deprecatedrpc=accounts'\nargument, and will be fully removed in V0.18.\n\nThe label RPC methods mirror the account functionality, with the following functional differences:\n\n- - Labels can be set on any address, not just receiving addresses. This functionality was previously only available through the GUI.\n- - Labels can be deleted by reassigning all addresses using the `setlabel` RPC method.\n- - There isn't support for sending transactions _from_ a label, or for determining which label a transaction was sent from.\n- - Labels do not have a balance.\n\nHere are the changes to RPC methods:\n\n| Deprecated Method       | New Method            | Notes       |\n| :---------------------- | :-------------------- | :-----------|\n| `getaccount`            | `getaddressinfo`      | `getaddressinfo` returns a json object with address information instead of just the name of the account as a string. |\n| `getaccountaddress`     | n/a                   | There is no replacement for `getaccountaddress` since labels do not have an associated receive address. |\n| `getaddressesbyaccount` | `getaddressesbylabel` | `getaddressesbylabel` returns a json object with the addresses as keys, instead of a list of strings. |\n| `getreceivedbyaccount`  | `getreceivedbylabel`  | _no change in behavior_ |\n| `listaccounts`          | `listlabels`          | `listlabels` does not return a balance or accept `minconf` and `watchonly` arguments. |\n| `listreceivedbyaccount` | `listreceivedbylabel` | Both methods return new `label` fields, along with `account` fields for backward compatibility. |\n| `move`                  | n/a                   | _no replacement_ |\n| `sendfrom`              | n/a                   | _no replacement_ |\n| `setaccount`            | `setlabel`            | Both methods now: <ul><li>allow assigning labels to any address, instead of raising an error if the address is not receiving address.<li>delete the previous label associated with an address when the final address using that label is reassigned to a different label, instead of making an implicit `getaccountaddress` call to ensure the previous label still has a receiving address. |\n\n| Changed Method         | Notes   |\n| :--------------------- | :------ |\n| `addmultisigaddress`   | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility if running with '-deprecatedrpc=accounts'. |\n| `getnewaddress`        | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility. if running with '-deprecatedrpc=accounts' |\n| `listunspent`          | Returns new `label` fields. `account` field will be returned for backward compatibility if running with '-deprecatedrpc=accounts' |\n| `sendmany`             | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the empty string, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |\n| `listtransactions`     | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the string `*`, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |\n| `getbalance`           | `account`, `minconf` and `include_watchonly` parameters are deprecated, and can only be used if running with '-deprecatedrpc=accounts' |\n\nBIP 174 Partially Signed Bitcoin Transactions support\n- -----------------------------------------------------\n\n[BIP 174 PSBT](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki) is an interchange format for Bitcoin transactions that are not fully signed\nyet, together with relevant metadata to help entities work towards signing it.\nIt is intended to simplify workflows where multiple parties need to cooperate to\nproduce a transaction. Examples include hardware wallets, multisig setups, and\n[CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n\n### Overall workflow\n\nOverall, the construction of a fully signed Bitcoin transaction goes through the\nfollowing steps:\n\n- - A **Creator** proposes a particular transaction to be created. He constructs\n  a PSBT that contains certain inputs and outputs, but no additional metadata.\n- - For each input, an **Updater** adds information about the UTXOs being spent by\n  the transaction to the PSBT.\n- - A potentially other Updater adds information about the scripts and public keys\n  involved in each of the inputs (and possibly outputs) of the PSBT.\n- - **Signers** inspect the transaction and its metadata to decide whether they\n  agree with the transaction. They can use amount information from the UTXOs\n  to assess the values and fees involved. If they agree, they produce a\n  partial signature for the inputs for which they have relevant key(s).\n- - A **Finalizer** is run for each input to convert the partial signatures and\n  possibly script information into a final `scriptSig` and/or `scriptWitness`.\n- - An **Extractor** produces a valid Bitcoin transaction (in network format)\n  from a PSBT for which all inputs are finalized.\n\nGenerally, each of the above (excluding Creator and Extractor) will simply\nadd more and more data to a particular PSBT. In a naive workflow, they all have\nto operate sequentially, passing the PSBT from one to the next, until the\nExtractor can convert it to a real transaction. In order to permit parallel\noperation, **Combiners** can be employed which merge metadata from different\nPSBTs for the same unsigned transaction.\n\nThe names above in bold are the names of the roles defined in BIP174. They're\nuseful in understanding the underlying steps, but in practice, software and\nhardware implementations will typically implement multiple roles simultaneously.\n\n### RPCs\n\n- - **`converttopsbt` (Creator)** is a utility RPC that converts an\n  unsigned raw transaction to PSBT format. It ignores existing signatures.\n- - **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n  outputs and converts them to a PSBT with no additional information. It is\n  equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n- - **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n  PSBT with the specified inputs and outputs, adds additional inputs and change\n  to it to balance it out, and adds relevant metadata. In particular, for inputs\n  that the wallet knows about (counting towards its normal or watch-only\n  balance), UTXO information will be added. For outputs and inputs with UTXO\n  information present, key and script information will be added which the wallet\n  knows about. It is equivalent to running `createrawtransaction`, followed by\n  `fundrawtransaction`, and `converttopsbt`.\n- - **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n  input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n  it, and optionally signs inputs. Where possible it also finalizes the partial\n  signatures.\n- - **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n  partial signatures, and if all inputs are finalized, converts the result to a\n  fully signed transaction which can be broadcast with `sendrawtransaction`.\n- - **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n  can be used at any point in the workflow to merge information added to\n  different versions of the same PSBT. In particular it is useful to combine the\n  output of multiple Updaters or Signers.\n- - **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n  a PSBT in human-readable form, as well as compute its eventual fee if known.\n\nUpgrading non-HD wallets to HD wallets\n- --------------------------------------\n\nSince Bitcoin Core 0.13.0, creating new BIP 32 Hierarchical Deterministic wallets has been supported by Bitcoin Core but old non-HD wallets could not be upgraded to HD. Now non-HD wallets can be upgraded to HD using the `-upgradewallet` command line option. This upgrade will result in the all keys in the keypool being marked as used and a new keypool generated. **A new backup must be made when this upgrade is performed.**\n\nAdditionally, `-upgradewallet` can be used to upgraded from a non-split HD chain (all keys generated with `m/0'/0'/i'`) to a split HD chain (receiving keys generated with `'m/0'/0'/i'` and change keys generated with `m'/0'/1'/i'`). When this upgrade occurs, all keys already in the keypool will remain in the keypool to be used until all keys from before the upgrade are exhausted. This is to avoid issues with backups and downgrades when some keys may come from the change key keypool. Users can begin using the new split HD chain keypools by using the `newkeypool` RPC to mark all keys in the keypool as used and begin using a new keypool generated from the split HD chain.\n\nHD Master key rotation\n- ----------------------\n\nA new RPC, `sethdseed`, has been introduced which allows users to set a new HD seed or set their own HD seed. This allows for a new HD seed to be used. **A new backup must be made when a new HD seed is set.**\n\nLow-level RPC changes\n- ---------------------\n\n- - The new RPC `scantxoutset` can be used to scan the UTXO set for entries\n  that match certain output descriptors. Refer to the [output descriptors\n  reference documentation](doc/descriptors.md) for more details. This call\n  is similar to `listunspent` but does not use a wallet, meaning that the\n  wallet can be disabled at compile or run time. This call is experimental,\n  as such, is subject to changes or removal in future releases.\n\n- - The `createrawtransaction` RPC will now accept an array or dictionary (kept for compatibility) for the `outputs` parameter. This means the order of transaction outputs can be specified by the client.\n- - The `fundrawtransaction` RPC will reject the previously deprecated `reserveChangeKey` option.\n- - `sendmany` now shuffles outputs to improve privacy, so any previously expected behavior with regards to output ordering can no longer be relied upon.\n- - The new RPC `testmempoolaccept` can be used to test acceptance of a transaction to the mempool without adding it.\n- - JSON transaction decomposition now includes a `weight` field which provides\n  the transaction's exact weight. This is included in REST /rest/tx/ and\n  /rest/block/ endpoints when in json mode. This is also included in `getblock`\n  (with verbosity=2), `listsinceblock`, `listtransactions`, and\n  `getrawtransaction` RPC commands.\n- - New `fees` field introduced in `getrawmempool`, `getmempoolancestors`, `getmempooldescendants` and\n   `getmempoolentry` when verbosity is set to `true` with sub-fields `ancestor`, `base`, `modified`\n   and `descendant` denominated in BTC. This new field deprecates previous fee fields, such as\n   `fee`, `modifiedfee`, `ancestorfee` and `descendantfee`.\n- - The new RPC `getzmqnotifications` returns information about active ZMQ\n  notifications.\n- - When bitcoin is not started with any `-wallet=<path>` options, the name of\n  the default wallet returned by `getwalletinfo` and `listwallets` RPCs is\n  now the empty string `\"\"` instead of `\"wallet.dat\"`. If bitcoin is started\n  with any `-wallet=<path>` options, there is no change in behavior, and the\n  name of any wallet is just its `<path>` string.\n- - Passing an empty string (`\"\"`) as the `address_type` parameter to\n  `getnewaddress`, `getrawchangeaddress`, `addmultisigaddress`,\n  `fundrawtransaction` RPCs is now an error. Previously, this would fall back\n  to using the default address type. It is still possible to pass null or leave\n  the parameter unset to use the default address type.\n\n- - Bare multisig outputs to our keys are no longer automatically treated as\n  incoming payments. As this feature was only available for multisig outputs for\n  which you had all private keys in your wallet, there was generally no use for\n  them compared to single-key schemes. Furthermore, no address format for such\n  outputs is defined, and wallet software can't easily send to it. These outputs\n  will no longer show up in `listtransactions`, `listunspent`, or contribute to\n  your balance, unless they are explicitly watched (using `importaddress` or\n  `importmulti` with hex script argument). `signrawtransaction*` also still\n  works for them.\n\n- - The `getwalletinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n- - The `getaddressinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n\n- - Parts of the `validateaddress` RPC method have been deprecated and moved to\n  `getaddressinfo`. Clients must transition to using `getaddressinfo` to access\n  this information before upgrading to v0.18. The following deprecated fields\n  have moved to `getaddressinfo` and will only be shown with\n  `-deprecatedrpc=validateaddress`: `ismine`, `iswatchonly`, `script`, `hex`,\n  `pubkeys`, `sigsrequired`, `pubkey`, `addresses`, `embedded`, `iscompressed`,\n  `account`, `timestamp`, `hdkeypath`, `hdmasterkeyid`.\n- - `signrawtransaction` is deprecated and will be fully removed in v0.18. To use\n  `signrawtransaction` in v0.17, restart bitcoind with\n  `-deprecatedrpc=signrawtransaction`. Projects should transition to using\n  `signrawtransactionwithkey` and `signrawtransactionwithwallet` before\n  upgrading to v0.18.\n\nOther API changes\n- -----------------\n\n- - The `inactivehdmaster` property in the `dumpwallet` output has been corrected to `inactivehdseed`\n\n### Logging\n\n- - The log timestamp format is now ISO 8601 (e.g. \"2018-02-28T12:34:56Z\").\n\n- - When running bitcoind with `-debug` but without `-daemon`, logging to stdout\n  is now the default behavior. Setting `-printtoconsole=1` no longer implicitly\n  disables logging to debug.log. Instead, logging to file can be explicitly disabled\n  by setting `-debuglogfile=0`.\n\nTransaction index changes\n- -------------------------\n\nThe transaction index is now built separately from the main node procedure,\nmeaning the `-txindex` flag can be toggled without a full reindex. If bitcoind\nis run with `-txindex` on a node that is already partially or fully synced\nwithout one, the transaction index will be built in the background and become\navailable once caught up. When switching from running `-txindex` to running\nwithout the flag, the transaction index database will *not* be deleted\nautomatically, meaning it could be turned back on at a later time without a full\nresync.\n\nMiner block size removed\n- ------------------------\n\nThe `-blockmaxsize` option for miners to limit their blocks' sizes was\ndeprecated in V0.15.1, and has now been removed. Miners should use the\n`-blockmaxweight` option if they want to limit the weight of their blocks.\n\nPython Support\n- --------------\n\nSupport for Python 2 has been discontinued for all test files and tools.\n\n0.17.0 change log\n=================\n\n### Consensus\n- - #12204 `3fa24bb` Fix overly eager BIP30 bypass (morcos)\n\n### Policy\n- - #12568 `ed6ae80` Allow dustrelayfee to be set to zero (luke-jr)\n- - #13120 `ca2a233` Treat segwit as always active (MarcoFalke)\n- - #13096 `062738c` Fix `MAX_STANDARD_TX_WEIGHT` check (jl2012)\n\n### Mining\n- - #12693 `df529dc` Remove unused variable in SortForBlock (drewx2)\n- - #12448 `84efa9a` Interrupt block generation on shutdown request (promag)\n\n### Block and transaction handling\n- - #12225 `67447ba` Mempool cleanups (sdaftuar)\n- - #12356 `fd65937` Fix 'mempool min fee not met' debug output (Empact)\n- - #12287 `bf3353d` Optimise lock behaviour for GuessVerificationProgress() (jonasschnelli)\n- - #11889 `47a7666` Drop extra script variable in ProduceSignature (ryanofsky)\n- - #11880 `d59b8d6` Stop special-casing phashBlock handling in validation for TBV (TheBlueMatt)\n- - #12431 `947c25e` Only call NotifyBlockTip when chainActive changes (jamesob)\n- - #12653 `534b8fa` Allow to optional specify the directory for the blocks storage (jonasschnelli)\n- - #12172 `3b62a91` Bugfix: RPC: savemempool: Don't save until LoadMempool() is finished (jtimon)\n- - #12167 `88430cb` Make segwit failure due to `CLEANSTACK` violation return a `SCRIPT_ERR_CLEANSTACK` error code (maaku)\n- - #12561 `24133b1` Check for block corruption in ConnectBlock() (sdaftuar)\n- - #11617 `1b5723e` Avoid lock: Call FlushStateToDisk(\u2026) regardless of fCheckForPruning (practicalswift)\n- - #11739 `0a8b7b4` Enforce `SCRIPT_VERIFY_P2SH` and `SCRIPT_VERIFY_WITNESS` from genesis (sdaftuar)\n- - #12885 `a49381d` Reduce implementation code inside CScript (sipa)\n- - #13032 `34dd1a6` Output values for \"min relay fee not met\" error (kristapsk)\n- - #13033 `a07e8ca` Build txindex in parallel with validation (jimpo)\n- - #13080 `66cc47b` Add compile time checking for ::mempool.cs runtime locking assertions (practicalswift)\n- - #13185 `08c1caf` Bugfix: the end of a reorged chain is invalid when connect fails (sipa)\n- - #11689 `0264836` Fix missing locking in CTxMemPool::check(\u2026) and CTxMemPool::setSanityCheck(\u2026) (practicalswift)\n- - #13011 `3c2a41a` Cache witness hash in CTransaction (MarcoFalke)\n- - #13191 `0de7cc8` Specialized double-SHA256 with 64 byte inputs with SSE4.1 and AVX2 (sipa)\n- - #13243 `ea263e1` Make reusable base class for auxiliary indices (jimpo)\n- - #13393 `a607d23` Enable double-SHA256-for-64-byte code on 32-bit x86 (sipa)\n- - #13428 `caabdea` validation: check the specified number of blocks (off-by-one) (kallewoof)\n- - #13438 `450055b` Improve coverage of SHA256 SelfTest code (sipa)\n- - #13431 `954f4a9` validation: count blocks correctly for check level < 3 (kallewoof)\n- - #13386 `3a3eabe` SHA256 implementations based on Intel SHA Extensions (sipa)\n- - #11658 `9a1ad2c` During IBD, when doing pruning, prune 10% extra to avoid pruning again soon after (luke-jr)\n- - #13794 `8ce55df` chainparams: Update with data from assumed valid chain (MarcoFalke)\n- - #13527 `e7ea858` Remove promiscuousmempoolflags (MarcoFalke)\n\n### P2P protocol and network code\n- - #12342 `eaeaa2d` Extend #11583 (\"Do not make it trivial for inbound peers to generate log entries\") to include \"version handshake timeout\" message (clemtaylor)\n- - #12218 `9a32114` Move misbehaving logging to net logging category (laanwj)\n- - #10387 `5c2aff8` Eventually connect to `NODE_NETWORK_LIMITED` peers (jonasschnelli)\n- - #9037 `a36834f` Add test-before-evict discipline to addrman (EthanHeilman)\n- - #12622 `e1d6e2a` Correct addrman logging (laanwj)\n- - #11962 `0a01843` add seed.bitcoin.sprovoost.nl to DNS seeds (Sjors)\n- - #12569 `23e7fe8` Increase signal-to-noise ratio in debug.log by adjusting log level when logging failed non-manual connect():s (practicalswift)\n- - #12855 `c199869` Minor accumulated cleanups (tjps)\n- - #13153 `ef46c99` Add missing newlines to debug logging (laanwj)\n- - #13162 `a174702` Don't incorrectly log that REJECT messages are unknown (jnewbery)\n- - #13151 `7f4db9a` Serve blocks directly from disk when possible (laanwj)\n- - #13134 `70d3541` Add option `-enablebip61` to configure sending of BIP61 notifications (laanwj)\n- - #13532 `7209fec` Log warning when deprecated network name 'tor' is used (wodry)\n- - #13615 `172f984` Remove unused interrupt from SendMessages (fanquake)\n- - #13417 `1e90862` Tighten scope in `net_processing` (skeees)\n- - #13298 `f8d470e` Bucketing INV delays (1 bucket) for incoming connections to hide tx time (naumenkogs)\n- - #13672 `0d8d6be` Modified `in_addr6` cast in CConman class to work with msvc (sipsorcery)\n- - #11637 `c575260` Remove dead service bits code (MarcoFalke)\n- - #13212 `a6f00ce` Fixed a race condition when disabling the network (lmanners)\n- - #13656 `1211b15` Remove the boost/algorithm/string/predicate.hpp dependency (251Labs)\n- - #13423 `f58674a` Thread safety annotations in `net_processing` (skeees)\n- - #13776 `7d36237` Add missing verification of IPv6 address in CNetAddr::GetIn6Addr(\u2026) (practicalswift)\n- - #13907 `48bf8ff` Introduce a maximum size for locators (gmaxwell)\n- - #13951 `8a9ffec` Hardcoded seeds update pre-0.17 branch (laanwj)\n\n### Wallet\n- - #12330 `2a30e67` Reduce scope of `cs_main` and `cs_wallet` locks in listtransactions (promag)\n- - #12298 `a1ffddb` Refactor HaveKeys to early return on false result (promag)\n- - #12282 `663911e` Disallow abandon of conflicted txes (MarcoFalke)\n- - #12333 `d405bee` Make CWallet::ListCoins atomic (promag)\n- - #12296 `8e6f9f4` Only fee-bump non-conflicted/non-confirmed txes (MarcoFalke)\n- - #11866 `6bb9c13` Do not un-mark fInMempool on wallet txn if ATMP fails (TheBlueMatt)\n- - #11882 `987a809` Disable default fallbackfee on mainnet (jonasschnelli)\n- - #9991 `4ca7c1e` listreceivedbyaddress Filter Address (NicolasDorier)\n- - #11687 `98bc27f` External wallet files (ryanofsky)\n- - #12658 `af88094` Sanitize some wallet serialization (sipa)\n- - #9680 `6acd870` Unify CWalletTx construction (ryanofsky)\n- - #10637 `e057589` Coin Selection with Murch's algorithm (achow101, Xekyo)\n- - #12408 `c39dd2e` Change output type globals to members (MarcoFalke)\n- - #12694 `9552dfb` Actually disable BnB when there are preset inputs (achow101)\n- - #11536 `cead84b` Rename account to label where appropriate (ryanofsky)\n- - #12709 `02b7e83` shuffle sendmany recipients ordering (instagibbs)\n- - #12699 `c948dc8` Shuffle transaction inputs before signing (instagibbs)\n- - #10762 `6d53663` Remove Wallet dependencies from init.cpp (jnewbery)\n- - #12857 `821980c` Avoid travis lint-include-guards error (ken2812221)\n- - #12702 `dab0d68` importprivkey: hint about importmulti (kallewoof)\n- - #12836 `9abdb7c` Make WalletInitInterface and DummyWalletInit private, fix nullptr deref (promag)\n- - #12785 `215158a` Initialize `m_last_block_processed` to nullptr (practicalswift)\n- - #12932 `8d651ae` Remove redundant lambda function arg in handleTransactionChanged (laanwj)\n- - #12749 `a84b056` feebumper: discard change outputs below discard rate (instagibbs)\n- - #12892 `9b3370d` introduce 'label' API for wallet (jnewbery)\n- - #12925 `6d3de17` Logprint the start of a rescan (jonasschnelli)\n- - #12888 `39439e5` debug log number of unknown wallet records on load (instagibbs)\n- - #12977 `434150a` Refactor `g_wallet_init_interface` to const reference (promag)\n- - #13017 `65d7083` Add wallets management functions (promag)\n- - #12953 `d1d54ae` Deprecate accounts (jnewbery)\n- - #12909 `476cb35` Make fee settings to be non-static members (MarcoFalke)\n- - #13002 `487dcbe` Do not treat bare multisig outputs as IsMine unless watched (sipa)\n- - #13028 `783bb64` Make vpwallets usage thread safe (promag)\n- - #12507 `2afdc29` Interrupt rescan on shutdown request (promag)\n- - #12729 `979150b` Get rid of ambiguous OutputType::NONE value (ryanofsky)\n- - #13079 `5778d44` Fix rescanblockchain rpc to properly report progress (Empact)\n- - #12560 `e03c0db` Upgrade path for non-HD wallets to HD (achow101)\n- - #13161 `7cc1bd3` Reset BerkeleyDB handle after connection fails (real-or-random)\n- - #13081 `0dec5b5` Add compile time checking for `cs_wallet` runtime locking assertions (practicalswift)\n- - #13127 `19a3a9e` Add Clang thread safety annotations for variables guarded by `cs_db` (practicalswift)\n- - #10740 `4cfe17c` `loadwallet` RPC - load wallet at runtime (jnewbery)\n- - #12924 `6738813` Fix hdmaster-key / seed-key confusion (scripted diff) (jnewbery)\n- - #13297 `d82c5d1` Fix incorrect comment for DeriveNewSeed (jnewbery)\n- - #13063 `6378eef` Use shared pointer to retain wallet instance (promag)\n- - #13142 `56fe3dc` Separate IsMine from solvability (sipa)\n- - #13194 `fd96d54` Remove template matching and pseudo opcodes (sipa)\n- - #13252 `c4cc8d9` Refactor ReserveKeyFromKeyPool for safety (Empact)\n- - #13058 `343d4e4` `createwallet` RPC - create new wallet at runtime (jnewbery)\n- - #13351 `2140f6c` Prevent segfault when sending to unspendable witness (MarcoFalke)\n- - #13060 `3f0f394` Remove getlabeladdress RPC (jnewbery)\n- - #13111 `000abbb` Add unloadwallet RPC (promag)\n- - #13160 `868cf43` Unlock spent outputs (promag)\n- - #13498 `f54f373` Fixups from account API deprecation (jnewbery)\n- - #13491 `61a044a` Improve handling of INVALID in IsMine (sipa)\n- - #13425 `028b0d9` Moving final scriptSig construction from CombineSignatures to ProduceSignature (PSBT signer logic) (achow101)\n- - #13564 `88a15eb` loadwallet shouldn't create new wallets (jnewbery)\n- - #12944 `619cd29` ScanforWalletTransactions should mark input txns as dirty (instagibbs)\n- - #13630 `d6b2235` Drop unused pindexRet arg to CMerkleTx::GetDepthInMainChain (Empact)\n- - #13566 `ad552a5` Fix get balance (jnewbery)\n- - #13500 `4a3e8c5` Decouple wallet version from client version (achow101)\n- - #13712 `aba2e66` Fix non-determinism in ParseHDKeypath(\u2026). Avoid using an uninitialized variable in path calculation (practicalswift)\n- - #9662 `6b6e854` Add createwallet \"disableprivatekeys\" option: a sane mode for watchonly-wallets (jonasschnelli)\n- - #13683 `e8c7434` Introduce assertion to document the assumption that cache and cache_used are always set in tandem (practicalswift)\n- - #12257 `5f7575e` Use destination groups instead of coins in coin select (kallewoof)\n- - #13773 `89a116d` Fix accidental use of the comma operator (practicalswift)\n- - #13805 `c88529a` Correctly limit output group size (sdaftuar)\n- - #12992 `26f59f5` Add wallet name to log messages (PierreRochard)\n- - #13667 `b81a8a5` Fix backupwallet for multiwallets (domob1812)\n- - #13657 `51c693d` assert to ensure accuracy of CMerkleTx::GetBlocksToMaturity (Empact)\n- - #13812 `9d86aad` sum ancestors rather than taking max in output groups (kallewoof)\n- - #13876 `8eb9870` Catch `filesystem_error` and raise `InitError` (MarcoFalke)\n- - #13808 `13d51a2` shuffle coins before grouping, where warranted (kallewoof)\n- - #13666 `2115cba` Always create signatures with Low R values (achow101)\n- - #13917 `0333914` Additional safety checks in PSBT signer (sipa)\n- - #13968 `65e7a8b` couple of walletcreatefundedpsbt fixes (instagibbs)\n- - #14055 `2307a6e` fix walletcreatefundedpsbt deriv paths, add test (instagibbs)\n\n### RPC and other APIs\n- - #12336 `3843780` Remove deprecated rpc options (jnewbery)\n- - #12193 `5dc00f6` Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d) (MarcoFalke)\n- - #12409 `0cc45ed` Reject deprecated reserveChangeKey in fundrawtransaction (MarcoFalke)\n- - #10583 `8a98dfe` Split part of validateaddress into getaddressinfo (achow101)\n- - #10579 `ffc6e48` Split signrawtransaction into wallet and non-wallet RPC command (achow101)\n- - #12494 `e4ffcac` Declare CMutableTransaction a struct in rawtransaction.h (Empact)\n- - #12503 `0e26591` createmultisig no longer takes addresses (instagibbs)\n- - #12083 `228b086` Improve getchaintxstats test coverage (promag)\n- - #12479 `cd5e438` Add child transactions to getrawmempool verbose output (conscott)\n- - #11872 `702e8b7` createrawtransaction: Accept sorted outputs (MarcoFalke)\n- - #12700 `ebdf84c` Document RPC method aliasing (ryanofsky)\n- - #12727 `8ee5c7b` Remove unreachable help conditions in rpcwallet.cpp (lutangar)\n- - #12778 `b648974` Add username and ip logging for RPC method requests (GabrielDav)\n- - #12717 `ac898b6` rest: Handle utxo retrieval when ignoring the mempool (romanz)\n- - #12787 `cd99e5b` Adjust ifdef to avoid unreachable code (practicalswift)\n- - #11742 `18815b4` Add testmempoolaccept (MarcoFalke)\n- - #12942 `fefb817` Drop redundant testing of signrawtransaction prevtxs args (Empact)\n- - #11200 `5f2a399` Allow for aborting rescans in the GUI (achow101)\n- - #12791 `3a8a4dc` Expose a transaction's weight via RPC (TheBlueMatt)\n- - #12436 `6e67754` Adds a functional test to validate the transaction version number in the RPC output (251Labs)\n- - #12240 `6f8b345` Introduced a new `fees` structure that aggregates all sub-field fee types denominated in BTC (mryandao)\n- - #12321 `eac067a` p2wsh and p2sh-p2wsh address in decodescript (fivepiece)\n- - #13090 `17266a1` Remove Safe mode (achow101, laanwj)\n- - #12639 `7eb7076` Reduce `cs_main` lock in listunspent (promag)\n- - #10267 `7b966d9` New -includeconf argument for including external configuration files (kallewoof)\n- - #10757 `b9551d3` Introduce getblockstats to plot things (jtimon)\n- - #13288 `a589f53` Remove the need to include rpc/blockchain.cpp in order to put `GetDifficulty` under test (Empact)\n- - #13394 `e1f8dce` cli: Ignore libevent warnings (theuni)\n- - #13439 `3f398d7` Avoid \"duplicate\" return value for invalid submitblock (TheBlueMatt)\n- - #13570 `a247594` Add new \"getzmqnotifications\" method (domob1812)\n- - #13072 `b25a4c2` Update createmultisig RPC to support segwit (ajtowns)\n- - #12196 `8fceae0` Add scantxoutset RPC method (jonasschnelli)\n- - #13557 `b654723` BIP 174 PSBT Serializations and RPCs (achow101)\n- - #13697 `f030410` Support output descriptors in scantxoutset (sipa)\n- - #13927 `bced8ea` Use pushKV in some new PSBT RPCs (domob1812)\n- - #13918 `a9c56b6` Replace median fee rate with feerate percentiles in getblockstats (marcinja)\n- - #13721 `9f23c16` Bugfixes for BIP 174 combining and deserialization (achow101)\n- - #13960 `517010e` Fix PSBT deserialization of 0-input transactions (achow101)\n\n### GUI\n- - #12416 `c997f88` Fix Windows build errors introduced in #10498 (practicalswift)\n- - #11733 `e782099` Remove redundant locks (practicalswift)\n- - #12426 `bfa3911` Initialize members in WalletModel (MarcoFalke)\n- - #12489 `e117cfe` Bugfix: respect user defined configuration file (-conf) in QT settings (jonasschnelli)\n- - #12421 `be263fa` navigate to  transaction history page after send (Sjors)\n- - #12580 `ce56fdd` Show a transaction's virtual size in its details dialog (dooglus)\n- - #12501 `c8ea91a` Improved \"custom fee\" explanation in tooltip (randolf)\n- - #12616 `cff95a6` Set modal overlay hide button as default (promag)\n- - #12620 `8a43bdc` Remove TransactionTableModel::TxIDRole (promag)\n- - #12080 `56cc022` Add support to search the address book (promag)\n- - #12621 `2bac3e4` Avoid querying unnecessary model data when filtering transactions (promag)\n- - #12721 `e476826` remove \"new\" button during receive-mode in addressbook (jonasschnelli)\n- - #12723 `310dc61` Qt5: Warning users about invalid-BIP21 URI bitcoin:// (krab)\n- - #12610 `25cf18f` Multiwallet for the GUI (jonasschnelli)\n- - #12779 `f4353da` Remove unused method setupAmountWidget(\u2026) (practicalswift)\n- - #12795 `68484d6` do not truncate .dat extension for wallets in gui (instagibbs)\n- - #12870 `1d54004` make clean removes `src/qt/moc_` files (Sjors)\n- - #13055 `bdda14d` Don't log to console by default (laanwj)\n- - #13141 `57c57df` fixes broken link on readme (marcoagner)\n- - #12928 `ef006d9` Initialize non-static class members that were previously neither initialized where defined nor in constructor (practicalswift)\n- - #13158 `81c533c` Improve sendcoinsdialog readability (marcoagner)\n- - #11491 `40c34a0` Add proxy icon in statusbar (mess110)\n- - #13264 `2a7c53b` Satoshi unit (GreatSock)\n- - #13097 `e545503` Support wallets loaded dynamically (promag)\n- - #13284 `f8be434` fix visual \"overflow\" of amount input (brandonrninefive)\n- - #13275 `a315b79` use `[default wallet]` as name for wallet with no name (jonasschnelli)\n- - #13273 `3fd0c23` Qt/Bugfix: fix handling default wallet with no name (jonasschnelli)\n- - #13341 `25d2df2` Stop translating command line options (laanwj)\n- - #13043 `6e249e4` OptionsDialog: add prune setting (Sjors)\n- - #13506 `6579d80` load wallet in UI after possible init aborts (jonasschnelli)\n- - #13458 `dc53f7f` Drop qt4 support (laanwj)\n- - #13528 `b877c39` Move BitcoinGUI initializers to class, fix initializer order warning (laanwj)\n- - #13536 `baf3a3a` coincontrol: Remove unused qt4 workaround (MarcoFalke)\n- - #13537 `10ffca7` Peer table: Visualize inbound/outbound state for every row (wodry)\n- - #13791 `2c14c1f` Reject dialogs if key escape is pressed (promag)\n\n### Build system\n- - #12371 `c9ca4f6` Add gitian PGP key: akx20000 (ghost)\n- - #11966 `f4f4f51` clientversion: Use full commit hash for commit-based version descriptions (luke-jr)\n- - #12417 `ae0fbf0` Upgrade `mac_alias` to 2.0.7 (droark)\n- - #12444 `1f055ef` gitian: Bump descriptors for (0.)17 (theuni)\n- - #12402 `59e032b` expat 2.2.5, ccache 3.4.1, miniupnpc 2.0.20180203 (fanquake)\n- - #12029 `daa84b3` Add a makefile target for Doxygen documentation (Ov3rlo4d)\n- - #12466 `6645eaf` Only use `D_DARWIN_C_SOURCE` when building miniupnpc on darwin (fanquake)\n- - #11986 `765a3eb` zeromq 4.2.3 (fanquake)\n- - #12373 `f13d756` Add build support for profiling (murrayn)\n- - #12631 `a312e20` gitian: Alphabetize signing keys & add kallewoof key (kallewoof)\n- - #12607 `29fad97` Remove ccache (fanquake)\n- - #12625 `c4219ff` biplist 1.0.3 (fanquake)\n- - #12666 `05042d3` configure: UniValue 1.0.4 is required for pushKV(, bool) (luke-jr)\n- - #12678 `6324c68` Fix a few compilation issues with Clang 7 and -Werror (vasild)\n- - #12692 `de6bdfd` Add configure options for various -fsanitize flags (eklitzke)\n- - #12901 `7e23972` Show enabled sanitizers in configure output (practicalswift)\n- - #12899 `3076993` macOS: Prevent Xcode 9.3 build warnings (AkioNak)\n- - #12715 `8fd6243` Add 'make clean' rule (hkjn)\n- - #13133 `a024a18` Remove python2 from configure.ac (ken2812221)\n- - #13005 `cb088b1` Make --enable-debug to pick better options (practicalswift)\n- - #13254 `092b366` Remove improper `qt/moc_*` cleaning glob from the general Makefile (Empact)\n- - #13306 `f5a7733` split warnings out of CXXFLAGS (theuni)\n- - #13385 `7c7508c` Guard against accidental introduction of new Boost dependencies (practicalswift)\n- - #13041 `5779dc4` Add linter checking for accidental introduction of locale dependence (practicalswift)\n- - #13408 `70a03c6` crypto: cleanup sha256 build (theuni)\n- - #13435 `cf7ca60` When build fails due to lib missing, indicate which one (Empact)\n- - #13445 `8eb76f3` Reset default -g -O2 flags when enable debug (ken2812221)\n- - #13465 `81069a7` Avoid concurrency issue when make multiple target (ken2812221)\n- - #13454 `45c00f8` Make sure `LC_ALL=C` is set in all shell scripts (practicalswift)\n- - #13480 `31145a3` Avoid copies in range-for loops and add a warning to detect them (theuni)\n- - #13486 `66e1a08` Move rpc/util.cpp from libbitcoin-util to libbitcoin-server (ken2812221)\n- - #13580 `40334c7` Detect if char equals `int8_t` (ken2812221)\n- - #12788 `287e4ed` Tune wildcards for LIBSECP256K1 target (kallewoof)\n- - #13611 `b55f0c3` bugfix: Use `__cpuid_count` for gnu C to avoid gitian build fail (ken2812221)\n- - #12971 `a6d14b1` Upgrade Qt to 5.9.6 (TheCharlatan)\n- - #13543 `6c6a300` Add RISC-V support (laanwj)\n- - #13177 `dcb154e` GCC-7 and glibc-2.27 back compat code (ken2812221)\n- - #13659 `90b1c7e` add missing leveldb defines (theuni)\n- - #13368 `c0f1569` Update gitian-build.sh for docker (achow101)\n- - #13171 `19d8ca5` Change gitian-descriptors to use bionic instead (ken2812221)\n- - #13604 `75bea05` Add depends 32-bit arm support for bitcoin-qt (TheCharlatan)\n- - #13623 `9cdb19f` Migrate gitian-build.sh to python (ken2812221)\n- - #13689 `8c36432` disable Werror when building zmq (greenaddress)\n- - #13617 `cf7f9ae` release: Require macos 10.10+ (fanquake)\n- - #13750 `c883653` use MacOS friendly sed syntax in qt.mk (Sjors)\n- - #13095 `415f2bf` update `ax_boost_chrono`/`unit_test_framework` (fanquake)\n- - #13732 `e8ffec6` Fix Qt's rcc determinism (Fuzzbawls)\n- - #13782 `8284f1d` Fix osslsigncode compile issue in gitian-build (ken2812221)\n- - #13696 `2ab7208` Add aarch64 qt depends support for cross compiling bitcoin-qt (TheCharlatan)\n- - #13705 `b413ba0` Add format string linter (practicalswift)\n- - #14000 `48c8459` fix qt determinism (theuni)\n- - #14018 `3e4829a` Bugfix: NSIS: Exclude `Makefile*` from docs (luke-jr)\n- - #12906 `048ac83` Avoid `interface` keyword to fix windows gitian build (ryanofsky)\n- - #13314 `a9b6957` Fix FreeBSD build by including utilstrencodings.h (laanwj)\n\n### Tests and QA\n- - #12252 `8d57319` Require all tests to follow naming convention (ajtowns)\n- - #12295 `935eb8d` Enable flake8 warnings for all currently non-violated rules (practicalswift)\n- - #11858 `b4d8549` Prepare tests for Windows (MarcoFalke)\n- - #11771 `2dbc4a4` Change invalidtxrequest to use BitcoinTestFramework (jnewbery)\n- - #12200 `d09968f` Bind functional test nodes to 127.0.0.1 (Sjors)\n- - #12425 `26dc2da` Add some script tests (richardkiss)\n- - #12455 `23481fa` Fix bip68 sequence test to reflect updated rpc error message (Empact)\n- - #12477 `acd1e61` Plug memory leaks and stack-use-after-scope (MarcoFalke)\n- - #12443 `07090c5` Move common args to bitcoin.conf (MarcoFalke)\n- - #12570 `39dcac2` Add test cases for HexStr (`std::reverse_iterator` and corner cases) (kostaz)\n- - #12582 `6012f1c` Fix ListCoins test failure due to unset `g_wallet_allow_fallback_fee` (ryanofsky)\n- - #12516 `7f99964` Avoid unintentional unsigned integer wraparounds in tests (practicalswift)\n- - #12512 `955fd23` Don't test against the mempool min fee information in mempool_limit.py (Empact)\n- - #12600 `29088b1` Add a test for large tx output scripts with segwit input (richardkiss)\n- - #12627 `791c3ea` Fix some tests to work on native windows (MarcoFalke)\n- - #12405 `0f58d7f` travis: Full clone for git subtree check (MarcoFalke)\n- - #11772 `0630974` Change invalidblockrequest to use BitcoinTestFramework (jnewbery)\n- - #12681 `1846296` Fix ComputeTimeSmart test failure with `-DDEBUG_LOCKORDER` (ryanofsky)\n- - #12682 `9f04c8e` travis: Clone depth 1 unless `$check_doc` (MarcoFalke)\n- - #12710 `00d1680` Append scripts to new `test_list` array to fix bad assignment (jeffrade)\n- - #12720 `872c921` Avoiding 'file' function name from python2 (jeffrade)\n- - #12728 `4ba3d4f` rename TestNode to TestP2PConn in tests (jnewbery)\n- - #12746 `2405ce1` Remove unused argument `max_invalid` from `check_estimates(\u2026)` (practicalswift)\n- - #12718 `185d484` Require exact match in `assert_start_raises_init_eror` (jnewbery, MarcoFalke)\n- - #12076 `6d36f59` Use node.datadir instead of tmpdir in test framework (MarcoFalke)\n- - #12772 `b43aba8` ci: Bump travis timeout for make check to 50m (jnewbery)\n- - #12806 `18606eb` Fix function names in `feature_blocksdir` (MarcoFalke)\n- - #12811 `0d8fc8d` Make summary row bold-red if any test failed and show failed tests at end of table (laanwj)\n- - #12790 `490644d` Use blockmaxweight where tests previously had blockmaxsize (conscott)\n- - #11773 `f0f9732` Change `feature_block.py` to use BitcoinTestFramework (jnewbery)\n- - #12839 `40f4baf` Remove travis checkout depth (laanwj)\n- - #11817 `2a09a78` Change `feature_csv_activation.py` to use BitcoinTestFramework (jnewbery)\n- - #12284 `fa5825d` Remove assigned but never used local variables. Enable Travis checking for unused local variables (practicalswift)\n- - #12719 `9beded5` Add note about test suite naming convention in developer-notes.md (practicalswift)\n- - #12861 `c564424` Stop `feature_block.py` from blowing up memory (jnewbery)\n- - #12851 `648252e` travis: Run verify-commits only on cron jobs (MarcoFalke)\n- - #12853 `2106c4c` Match full plain text by default (MarcoFalke)\n- - #11818 `9a2db3b` I accidentally (deliberately) killed it (the ComparisonTestFramework) (jnewbery)\n- - #12766 `69310a3` Tidy up REST interface functional tests (romanz)\n- - #12849 `83c7533` Add logging in loops in `p2p_sendhears.py` (ccdle12)\n- - #12895 `d6f10b2` Add note about test suite name uniqueness requirement to developer notes (practicalswift)\n- - #12856 `27278df` Add Metaclass for BitcoinTestFramework (WillAyd)\n- - #12918 `6fc5a05` Assert on correct variable (kallewoof)\n- - #11878 `a04440f` Add Travis check for duplicate includes (practicalswift)\n- - #12917 `cf8073f` Windows fixups for functional tests (MarcoFalke)\n- - #12926 `dd1ca9e` Run unit tests in parallel (sipa)\n- - #12920 `b1fdfc1` Fix sign for expected values (kallewoof)\n- - #12947 `979f598` Wallet hd functional test speedup and clarification (instagibbs)\n- - #12993 `0d69921` Remove compatibility code not needed now when we're on Python 3 (practicalswift)\n- - #12996 `6a278e0` Remove redundant bytes(\u2026) calls (practicalswift)\n- - #12949 `6b46288` Avoid copies of CTransaction (MarcoFalke)\n- - #13007 `0d12570` Fix dangling wallet pointer in vpwallets (promag)\n- - #13048 `cac6d11` Fix `feature_block` flakiness (jnewbery)\n- - #12510 `d5b2e98` Add `rpc_bind` test to default-run tests (laanwj)\n- - #13022 `896a9d0` Attach node index to `test_node` AssertionError and print messages (jamesob)\n- - #13024 `018c7e5` Add rpcauth pair that generated by rpcauth.py (ken2812221)\n- - #13013 `a0079d4` bench: Amend `mempool_eviction` test for witness txs (MarcoFalke)\n- - #13051 `e074097` Normalize executable location (MarcoFalke)\n- - #13056 `106d929` Make rpcauth.py testable and add unit tests (nixbox)\n- - #13073 `a785bc3` add rpcauth-test to `AC_CONFIG_LINKS` to fix out-of-tree make check (laanwj)\n- - #12830 `25ad2f7` Clarify address book error messages, add tests (jamesob)\n- - #13082 `24106a8` don't test against min relay fee information in `mining_prioritisetransaction.py` (kristapsk)\n- - #13003 `8d045a0` Add test for orphan handling (MarcoFalke)\n- - #13105 `9e9b48d` Add --failfast option to functional test runner (jamesob)\n- - #13130 `3186ad4` Fix race in `rpc_deprecated.py` (jnewbery)\n- - #13136 `baf6b4e` Fix flake8 warnings in several wallet functional tests (jnewbery)\n- - #13094 `bf9b03d` Add test for 64-bit Windows PE, modify 32-bit test results (ken2812221)\n- - #13183 `9458b05` travis: New travis job for `check_docs` steps (glaksmono)\n- - #12265 `1834d4d` fundrawtransaction: lock watch-only shared address (kallewoof)\n- - #13188 `4a50ec0` Remove unused option --srcdir (MarcoFalke)\n- - #12755 `612ba35` Better stderr testing (jnewbery)\n- - #13198 `196c5a9` Avoid printing to console during cache creation (sdaftuar)\n- - #13075 `cb9bbf7` Remove 'account' API from wallet functional tests (jnewbery)\n- - #13221 `ffa86af` travis: Rename the build stage `check_doc` to `lint` (practicalswift)\n- - #13205 `3cbd25f` Remove spurious error log in `p2p_segwit.py` (jnewbery)\n- - #13291 `536120e` Don't include torcontrol.cpp into the test file (Empact)\n- - #13281 `2ac6315` Move linters to test/lint, add readme (MarcoFalke)\n- - #13215 `f8a29ca` travis: Build tests on ubuntu 18.04 with docker (ken2812221)\n- - #13349 `24f7011` bench: Don't return a bool from main (laanwj)\n- - #13347 `87a9d03` travis: Skip cache for lint stage (MarcoFalke)\n- - #13355 `0b1c0c4` Fix \"gmake check\" under OpenBSD 6.3 (probably `*BSD`): Avoid using GNU grep specific regexp handling (practicalswift)\n- - #13353 `d4f6dac` Fixup setting of PATH env var (MarcoFalke)\n- - #13352 `e24bf1c` Avoid checking reject code for now (MarcoFalke)\n- - #13383 `2722a1f` bench: Use non-throwing parsedouble(\u2026) instead of throwing boost::lexical_cast<double>(\u2026) (practicalswift)\n- - #13367 `264efdc` Increase includeconf test coverage (MarcoFalke)\n- - #13404 `3d3d8ae` speed up of `tx_validationcache_tests` by reusing of CTransaction (lucash-dev)\n- - #13421 `531a033` Remove `portseed_offset` from test runner (MarcoFalke)\n- - #13440 `5315660` Log as utf-8 (MarcoFalke)\n- - #13066 `fa4b906` Migrate verify-commits script to python, run in travis (ken2812221)\n- - #13447 `4b1edd3` travis: Increase `travis_wait` time while verifying commits (ken2812221)\n- - #13350 `f532d52` Add logging to provide anchor points when debugging p2p_sendheaders (lmanners)\n- - #13406 `4382f19` travis: Change mac goal to all deploy (ken2812221)\n- - #13457 `b222138` Drop variadic macro (MarcoFalke)\n- - #13512 `3a45493` mininode: Expose connection state through `is_connected` (MarcoFalke)\n- - #13496 `9ab4c2a` Harden lint-filenames.sh (wodry)\n- - #13219 `08516e0` bench: Add block assemble benchmark (MarcoFalke)\n- - #13530 `b1dc39d` bench: Add missing pow.h header (laanwj)\n- - #12686 `2643fa5` Add -ftrapv to CFLAGS and CXXFLAGS when --enable-debug is used. Enable -ftrapv in Travis (practicalswift)\n- - #12882 `d96bdd7` Make `test_bitcoin` pass under ThreadSanitzer (clang). Fix lock-order-inversion (potential deadlock) (practicalswift)\n- - #13535 `2328039` `wallet_basic`: Specify minimum required amount for listunspent (MarcoFalke)\n- - #13551 `c93c360` Fix incorrect documentation for test case `cuckoocache_hit_rate_ok` (practicalswift)\n- - #13563 `b330f3f` bench: Simplify coinselection (promag)\n- - #13517 `a6ed99a` Remove need to handle the network thread in tests (MarcoFalke)\n- - #13522 `686e97a` Fix `p2p_sendheaders` race (jnewbery)\n- - #13467 `3dc2dcf` Make `p2p_segwit` easier to debug (jnewbery)\n- - #13598 `0212187` bench: Fix incorrect behaviour in prevector.cpp (AkioNak)\n- - #13565 `b05ded1` Fix AreInputsStandard test to reference the proper scriptPubKey (Empact)\n- - #13145 `d3dae3d` Use common getPath method to create temp directory in tests (winder)\n- - #13645 `2ea7eb6` skip `rpc_zmq` functional test as necessary (jamesob)\n- - #13626 `8f1106d` Fix some TODOs in `p2p_segwit` (MarcoFalke)\n- - #13138 `8803c91` Remove accounts from `wallet_importprunedfunds.py` (jnewbery)\n- - #13663 `cbc9b50` Avoid read/write to default datadir (MarcoFalke)\n- - #13682 `f8a32a3` bench: Remove unused variable (practicalswift)\n- - #13638 `6fcdb5e` Use `MAX_SCRIPT_ELEMENT_SIZE` from script.py (domob1812)\n- - #13687 `9d26b69` travis: Check that ~/.bitcoin is never created (MarcoFalke)\n- - #13715 `e1260a7` fixes mininode's P2PConnection sending messages on closing transport (marcoagner)\n- - #13729 `aa9429a` travis: Avoid unnecessarily setting env variables on the lint build (Empact)\n- - #13747 `ab28b5b` Skip P2PConnection's `is_closing()` check when not available (domob1812)\n- - #13650 `7a9bca6` travis: Don't store debug info if --enable-debug is set (ken2812221)\n- - #13711 `f98d1e0` bench: Add benchmark for unserialize prevector (AkioNak)\n- - #13771 `365384f` travis: Retry to fetch docker image (MarcoFalke)\n- - #13806 `4d550ff` Fix `bench/block_assemble` assert failure (jamesob)\n- - #13779 `d25079a` travis: Improve readability of travis.yml and log outputs (scravy)\n- - #13822 `0fb9c87` bench: Make coinselection output groups pass eligibility filter (achow101)\n- - #13247 `e83d82a` Add tests to SingleThreadedSchedulerClient() and document the memory model (skeees)\n- - #13811 `660abc1` travis: Run `bench_bitcoin` once (MarcoFalke)\n- - #13837 `990e182` Extract `rpc_timewait` as test param (MarcoFalke)\n- - #13851 `9c4324d` fix locale for lint-shell (scravy)\n- - #13823 `489b51b` quote path in authproxy for external multiwallets (MarcoFalke)\n- - #13849 `2b67354` travis: Use only travis jobs: instead of mix of jobs+matrix (scravy)\n- - #13859 `2384323` Add emojis to `test_runner` path and wallet filename (MarcoFalke)\n- - #13916 `8ac7125` `wait_for_verack` by default (MarcoFalke)\n- - #13669 `f66e1c7` Cleanup `create_transaction` implementations (conscott)\n- - #13924 `09ada21` Simplify comparison in `rpc_blockchain.py` (domob1812)\n- - #13913 `a08533c` Remove redundant checkmempool/checkblockindex `extra_args` (MarcoFalke)\n- - #13915 `a04888a` Add test for max number of entries in locator (MarcoFalke)\n- - #13867 `1b04b55` Make extended tests pass on native Windows (MarcoFalke)\n- - #13944 `0df7a6c` Port usage of deprecated optparse module to argparse module (Kvaciral)\n- - #13928 `b8eb0df` blocktools enforce named args for amount (MarcoFalke)\n- - #13054 `bffb35f` Enable automatic detection of undefined names in Python tests scripts. Remove wildcard imports (practicalswift)\n- - #14069 `cf3d7f9` Use assert not `BOOST_CHECK_*` from multithreaded tests (skeees)\n- - #14071 `fab0fbe` Stop txindex thread before calling destructor (MarcoFalke)\n\n### Miscellaneous\n- - #11909 `8897135` contrib: Replace developer keys with list of pgp fingerprints (MarcoFalke)\n- - #12394 `fe53d5f` gitian-builder.sh: fix --setup doc, since lxc is default (Sjors)\n- - #12468 `294a766` Add missing newline in init.cpp log message (Aesti)\n- - #12308 `dcfe218` contrib: Add support for out-of-tree builds in gen-manpages.sh (laanwj)\n- - #12451 `aae64a2` Bump leveldb subtree (MarcoFalke)\n- - #12527 `d77b4a7` gitian-build.sh: fix signProg being recognized as two parameters (ken2812221)\n- - #12588 `d74b01d` utils: Remove deprecated pyzmq call from python zmq example (kosciej)\n- - #10271 `bc67982` Use `std::thread::hardware_concurrency`, instead of Boost, to determine available cores (fanquake)\n- - #12097 `14475e2` scripts: Lint-whitespace: use perl instead of grep -p (Sjors)\n- - #12098 `17c44b2` scripts: Lint-whitespace: add param to check last n commits (Sjors)\n- - #11900 `842f61a` script: Simplify checkminimalpush checks, add safety assert (instagibbs)\n- - #12567 `bb98aec` util: Print timestamp strings in logs using iso 8601 formatting (practicalswift)\n- - #12572 `d8d9162` script: Lint-whitespace: find errors more easily (AkioNak)\n- - #10694 `ae5bcc7` Remove redundant code in MutateTxSign(CMutableTransaction&, const std::string&) (practicalswift)\n- - #12659 `3d16f58` Improve Fatal LevelDB Log Messages (eklitzke)\n- - #12643 `0f0229d` util: Remove unused `sync_chain` (MarcoFalke)\n- - #12102 `7fb8fb4` Apply hardening measures in bitcoind systemd service file (Flowdalic)\n- - #12652 `55f490a` bitcoin-cli: Provide a better error message when bitcoind is not running (practicalswift)\n- - #12630 `c290508` Provide useful error message if datadir is not writable (murrayn)\n- - #11881 `624bee9` Remove Python2 support (jnewbery)\n- - #12821 `082e26c` contrib: Remove unused import string (MarcoFalke)\n- - #12829 `252c1b0` Python3 fixup (jnewbery)\n- - #12822 `ff48f62` Revert 7deba93bdc76616011a9f493cbc203d60084416f and fix expired-key-sigs properly (TheBlueMatt)\n- - #12820 `5e53b80` contrib: Fix check-doc script regexes (MarcoFalke)\n- - #12713 `4490871` Track negated options in the option parser (eklitzke)\n- - #12708 `b2e5fe8` Make verify-commits.sh test that merges are clean (sipa)\n- - #12891 `3190785` logging: Add lint-logs.sh to check for newline termination (jnewbery)\n- - #12923 `a7cbe38` util: Pass `pthread_self()` to `pthread_setschedparam` instead of 0 (laanwj)\n- - #12871 `fb17fae` Add shell script linting: Check for shellcheck warnings in shell scripts (practicalswift)\n- - #12970 `5df84de` logging: Bypass timestamp formatting when not logging (theuni)\n- - #12987 `fe8fa22` tests/tools: Enable additional Python flake8 rules for automatic linting via Travis (practicalswift)\n- - #12972 `0782508` Add python3 script shebang lint (ken2812221)\n- - #13004 `58bbc55` Print to console by default when not run with -daemon (practicalswift)\n- - #13039 `8b4081a` Add logging and error handling for file syncing (laanwj)\n- - #13020 `4741ca5` Consistently log CValidationState on call failure (Empact)\n- - #13031 `826acc9` Fix for utiltime to compile with msvc (sipsorcery)\n- - #13119 `81743b5` Remove script to clean up datadirs (MarcoFalke)\n- - #12954 `5a66642` util: Refactor logging code into a global object (jimpo)\n- - #12769 `35eb9d6` Add systemd service to bitcoind in debian package (ghost)\n- - #13146 `0bc980b` rpcauth: Make it possible to provide a custom password (laanwj)\n- - #13148 `b62b437` logging: Fix potential use-after-free in logprintstr(\u2026) (practicalswift)\n- - #13214 `0612d96` Enable Travis checking for two Python linting rules we are currently not violating (practicalswift)\n- - #13197 `6826989` util: Warn about ignored recursive -includeconf calls (kallewoof)\n- - #13176 `d9ebb63` Improve CRollingBloomFilter performance: replace modulus with FastMod (martinus)\n- - #13228 `d792e47` Add script to detect circular dependencies between source modules (sipa)\n- - #13320 `e08c130` Ensure gitian-build.sh uses bash (jhfrontz)\n- - #13301 `e4082d5` lint: Add linter to error on `#include <*.cpp>` (Empact)\n- - #13374 `56f6936` utils and libraries: checking for bitcoin address in translations (kaplanmaxe)\n- - #13230 `7c32b41` Simplify include analysis by enforcing the developer guide's include syntax (practicalswift)\n- - #13450 `32bf4c6` Add linter: Enforce the source code file naming convention described in the developer notes (practicalswift)\n- - #13479 `fa2ea37` contrib: Fix cve-2018-12356 by hardening the regex (loganaden)\n- - #13448 `a90ca40` Add linter: Make sure we explicitly open all text files using UTF-8 encoding in Python (practicalswift)\n- - #13494 `d67eff8` Follow-up to #13454: Fix broken build by exporting `LC_ALL=C` (practicalswift)\n- - #13510 `03f3925` Scripts and tools: Obsolete #!/bin/bash shebang (DesWurstes)\n- - #13577 `c9eb8d1` logging: Avoid nstart may be used uninitialized in appinitmain warning (mruddy)\n- - #13603 `453ae5e` bitcoin-tx: Stricter check for valid integers (domob1812)\n- - #13118 `c05c93c` RPCAuth Detection in Logs (Linrono)\n- - #13647 `4027ec1` Scripts and tools: Fix `BIND_NOW` check in security-check.py (conradoplg)\n- - #13692 `f5d166a` contrib: Clone core repo in gitian-build (MarcoFalke)\n- - #13699 `4c6d1b9` contrib: Correct version check (kallewoof)\n- - #13695 `dcc0cff` lint: Add linter for circular dependencies (Empact)\n- - #13733 `0d1ebf4` utils: Refactor argsmanager a little (AtsukiTak)\n- - #13714 `29b4ee6` contrib: Add lxc network setup for bionic host (ken2812221)\n- - #13764 `f8685f4` contrib: Fix test-security-check fail in ubuntu 18.04 (ken2812221)\n- - #13809 `77168f7` contrib: Remove debian and rpm subfolder (MarcoFalke)\n- - #13799 `230652c` Ignore unknown config file options; warn instead of error (sipa)\n- - #13894 `df9f712` shutdown: Stop threads before resetting ptrs (MarcoFalke)\n- - #13925 `71dec5c` Merge leveldb subtree (MarcoFalke)\n- - #13939 `ef86f26` lint: Make format string linter understand basic template parameter syntax (practicalswift)\n- - #14105 `eb202ea` util: Report parse errors in configuration file (laanwj)\n- - #12604 `9903537` Add DynamicMemoryUsage() to CDBWrapper to estimate LevelDB memory use (eklitzke)\n- - #12495 `047865e` Increase LevelDB `max_open_files` (eklitzke)\n- - #12784 `e80716d` Fix bug in memory usage calculation (unintended integer division) (practicalswift)\n- - #12618 `becd8dd` Set `SCHED_BATCH` priority on the loadblk thread (eklitzke)\n- - #12854 `5ca1509` Add P2P, Network, and Qt categories to the desktop icon (luke-jr)\n- - #11862 `4366f61` Network specific conf sections (ajtowns)\n- - #13441 `4a7e64f` Prevent shared conf files from failing with different available options in different binaries (achow101)\n- - #13471 `5eca4e8` For AVX2 code, also check for AVX, XSAVE, and OS support (sipa)\n- - #13503 `c655b2c` Document FreeBSD quirk. Fix FreeBSD build: Use std::min<int>(\u2026) to allow for compilation under certain FreeBSD versions (practicalswift)\n- - #13725 `07ce278` Fix bitcoin-cli --version (Empact)\n\n### Documentation\n- - #12306 `216f9a4` Improvements to UNIX documentation (axvr)\n- - #12309 `895fbd7` Explain how to update chainTxData in release process (laanwj)\n- - #12317 `85123be` Document method for reviewers to verify chainTxData (jnewbery)\n- - #12331 `d32528e` Properly alphabetize output of CLI --help option (murrayn)\n- - #12322 `c345148` Remove step making cloned repository world-writable for Windows build (murrayn)\n- - #12354 `b264528` add gpg key for fivepiece (fivepiece)\n- - #11761 `89005dd` initial QT documentation (Sjors)\n- - #12232 `fdc2188` Improve \"Turn Windows Features On or Off\" step (MCFX2)\n- - #12487 `4528f74` init: Remove translation for `-blockmaxsize` option help (laanwj)\n- - #12546 `a4a5fc7` Minor improvements to Compatibility Notes (randolf)\n- - #12434 `21e2670` dev-notes: Members should be initialized (MarcoFalke)\n- - #12452 `71f56da` clarified systemd installation instructions in init.md for Ubuntu users (DaveFromBinary)\n- - #12615 `1f93491` allow for SIGNER containing spaces (ken2812221)\n- - #12603 `85424d7` PeerLogicValidation interface (jamesob)\n- - #12581 `12ac2f0` Mention configure without wallet in FreeBSD instructions (dbolser)\n- - #12619 `8a709fb` Give hint about gitian not able to download (kallewoof)\n- - #12668 `de2fcaa` do update before fetching packages in WSL build guide (nvercamm)\n- - #12586 `e7721e6` Update osx brew install instruction (fanquake)\n- - #12760 `7466a26` Improve documentation on standard communication channels (jimpo)\n- - #12797 `0415b1e` init: Fix help message for checkblockindex (MarcoFalke)\n- - #12800 `2d97611` Add note about our preference for scoped enumerations (\"enum class\") (practicalswift)\n- - #12798 `174d016` Refer to witness reserved value as spec. in the BIP (MarcoFalke)\n- - #12759 `d3908e2` Improve formatting of developer notes (eklitzke)\n- - #12877 `2b54155` Use bitcoind in Tor documentation (knoxcard)\n- - #12896 `b15485e` Fix conflicting statements about initialization in developer notes (practicalswift)\n- - #12850 `319991d` add qrencode to brew install instructions (buddilla)\n- - #12007 `cd8e45b` Clarify the meaning of fee delta not being a fee rate in prioritisetransaction RPC (honzik666)\n- - #12927 `06ead15` fixed link, replaced QT with Qt (trulex)\n- - #12852 `ebd786b` devtools: Setup ots git integration (MarcoFalke)\n- - #12933 `3cf76c2` Refine header include policy (MarcoFalke)\n- - #12951 `6df0c6c` Fix comment in FindForkInGlobalIndex (jamesob)\n- - #12982 `a63b4e3` Fix inconsistent namespace formatting guidelines (ryanofsky)\n- - #13026 `9b3a67e` Fix include comment in src/interfaces/wallet.h (promag)\n- - #13012 `d1e3c5e` Add comments for chainparams.h, validation.cpp (jamesob)\n- - #13064 `569e381` List support for BIP173 in bips.md (sipa)\n- - #12997 `646b7f6` build-windows: Switch to Artful, since Zesty is EOL (MarcoFalke)\n- - #12384 `c5f7efe` Add version footnote to tor.md (Willtech)\n- - #13165 `627c376` Mention good first issue list in CONTRIBUTING.md (fanquake)\n- - #13295 `fb77310` Update OpenBSD build instructions for OpenBSD 6.3 (practicalswift)\n- - #13340 `3a8e3f4` remove leftover check-doc documentation (fanquake)\n- - #13346 `60f0358` update bitcoin-dot-org links in release-process.md (fanquake)\n- - #13372 `f014933` split FreeBSD build instructions out of build-unix.md (steverusso)\n- - #13366 `861de3b` Rename \u201cOS X\u201d to the newer \u201cmacOS\u201d convention (giulio92)\n- - #13369 `f8bcef3` update transifex doc link (mess110)\n- - #13312 `b22115d` Add a note about the source code filename naming convention (practicalswift)\n- - #13460 `1939536` Remove note to install all boost dev packages (MarcoFalke)\n- - #13476 `9501938` Fix incorrect shell quoting in FreeBSD build instructions (murrayn)\n- - #13402 `43fa355` Document validationinterace callback blocking deadlock potential (TheBlueMatt)\n- - #13488 `d6cf4bd` Improve readability of \"Squashing commits\" (wodry)\n- - #13531 `ee02deb` Clarify that mempool txiter is `const_iterator` (MarcoFalke)\n- - #13418 `01f9098` More precise explanation of parameter onlynet (wodry)\n- - #13592 `1756cb4` Modify policy to not translate command-line help (ken2812221)\n- - #13588 `b77c38e` Improve doc of options addnode, connect, seednode (wodry)\n- - #13614 `17e9106` Update command line help for -printtoconsole and -debuglogfile (satwo, fanquake)\n- - #13605 `8cc048e` corrected text to reflect new(er) process of specifying fingerprints (jhfrontz)\n- - #13481 `b641f60` Rewrite some validation docs as lock annotations (MarcoFalke)\n- - #13680 `30640f8` Remove outdated comment about miner ignoring CPFP (jamesob)\n- - #13625 `7146672` Add release notes for -printtoconsole and -debuglogfile changes (satwo)\n- - #13718 `f7f574d` Specify preferred Python string formatting technique (masonicboom)\n- - #12764 `10b9a81` Remove field in getblocktemplate help that has never been used (conscott)\n- - #13742 `d2186b3` Adjust bitcoincore.org links (MarcoFalke)\n- - #13706 `94dd89e` Minor improvements to release-process.md (MitchellCash)\n- - #13775 `ef4fac0` Remove newlines from error message (practicalswift)\n- - #13803 `feb7dd9` add note to contributor docs about warranted PR's (kallewoof)\n- - #13814 `67af7ef` Add BIP174 to list of implemented BIPs (sipa)\n- - #13835 `c1cba35` Fix memory consistency model in comment (skeees)\n- - #13824 `aa30e4b` Remove outdated net comment (MarcoFalke)\n- - #13853 `317477a` correct versions in dependencies.md (fanquake)\n- - #13872 `37ab117` Reformat -help output for help2man (real-or-random)\n- - #13717 `8c3c402` Link to python style guidelines from developer notes (masonicboom)\n- - #13895 `1cd5f2c` fix GetWarnings docs to reflect behavior (Empact)\n- - #13911 `3e3a50a` Revert translated string change, clarify wallet log messages (PierreRochard)\n- - #13908 `d6faea4` upgrade rescan time warning from minutes to >1 hour (masonicboom)\n- - #13905 `73a09b4` fixed bitcoin-cli -help output for help2man (hebasto)\n- - #14100 `2936dbc` Change documentation for =0 for non-boolean options (laanwj)\n- - #14096 `465a583` Add reference documentation for descriptors language (sipa)\n- - #12757 `0c5f67b` Clarify include guard naming convention (practicalswift)\n- - #13844 `d3325b0` Correct the help output for `-prune` (hebasto)\n\nCredits\n=======\n\nThanks to everyone who directly contributed to this release:\n\n- - 251\n- - 532479301\n- - Aaron Clauson\n- - Akio Nakamura\n- - Akira Takizawa\n- - Alex Morcos\n- - Alex Vear\n- - Alexey Ivanov\n- - Alin Rus\n- - Andrea Comand\n- - Andrew Chow\n- - Anthony Towns\n- - AtsukiTak\n- - Ben Woosley\n- - Bernhard M. Wiedemann\n- - Brandon Ruggles\n- - buddilla\n- - ccdle12\n- - Chris Moore\n- - Chun Kuan Lee\n- - Clem Taylor\n- - Conor Scott\n- - Conrado Gouvea\n- - Cory Fields\n- - Cristian Mircea Messel\n- - ctp-tsteenholdt\n- - Damian Williamson\n- - Dan Bolser\n- - Daniel Kraft\n- - Darko Jankovi\u0107\n- - DaveFromBinary\n- - David A. Harding\n- - DesWurstes\n- - Dimitris Apostolou\n- - donaloconnor\n- - Douglas Roark\n- - DrahtBot\n- - Drew Rasmussen\n- - e0\n- - Ernest Hemingway\n- - Ethan Heilman\n- - Evan Klitzke\n- - fanquake\n- - Felix Wolfsteller\n- - fivepiece\n- - Florian Schmaus\n- - Fuzzbawls\n- - Gabriel Davidian\n- - Giulio Lombardo\n- - Gleb\n- - Grady Laksmono\n- - GreatSock\n- - Gregory Maxwell\n- - Gregory Sanders\n- - Hennadii Stepanov\n- - Henrik Jonsson\n- - Indospace.io\n- - James O'Beirne\n- - Jan \u010capek\n- - Jeff Frontz\n- - Jeff Rade\n- - Jeremy Rubin\n- - JeremyRand\n- - Jesse Cohen\n- - Jim Posen\n- - joemphilips\n- - John Bampton\n- - John Newbery\n- - johnlow95\n- - Johnson Lau\n- - Jonas Nick\n- - Jonas Schnelli\n- - Jo\u00e3o Barbosa\n- - Jorge Tim\u00f3n\n- - Josh Hartshorn\n- - Julian Fleischer\n- - kallewoof\n- - Karel Bilek\n- - Karl-Johan Alm\n- - Ken Lee\n- - Kevin Pan\n- - Kosta Zertsekel\n- - Kristaps Kaupe\n- - Kvaciral\n- - Lawrence Nahum\n- - Linrono\n- - lmanners\n- - Loganaden Velvindron\n- - Lowell Manners\n- - lucash.dev at gmail.com\n- - Luke Dashjr\n- - lutangar\n- - Marcin Jachymiak\n- - marcoagner\n- - MarcoFalke\n- - Mark Erhardt\n- - Mark Friedenbach\n- - Martin Ankerl\n- - Mason Simon\n- - Matt Corallo\n- - Matteo Sumberaz\n- - Max Kaplan\n- - MeshCollider\n- - Micha\u0142 Zabielski\n- - Mitchell Cash\n- - mruddy\n- - mryandao\n- - murrayn\n- - Nick Vercammen\n- - Nicolas Dorier\n- - Nikolay Mitev\n- - okayplanet\n- - Pierre Rochard\n- - Pieter Wuille\n- - practicalswift\n- - Qasim Javed\n- - Randolf Richardson\n- - Richard Kiss\n- - Roman Zeyde\n- - Russell Yanofsky\n- - Samuel B. Atwood\n- - Sebastian Kung\n- - Sjors Provoost\n- - Steve Lee\n- - steverusso\n- - Suhas Daftuar\n- - Tamas Blummer\n- - TheCharlatan\n- - Thomas Kerin\n- - Thomas Snider\n- - Tim Ruffing\n- - Varunram\n- - Vasil Dimov\n- - Will Ayd\n- - William Robinson\n- - winder\n- - Wladimir J. van der Laan\n- - wodry\n\nAnd to those that reported security issues:\n\n- - awemany (for CVE-2018-17144, previously credited as \"anonymous reporter\")\n\nAs well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n-----BEGIN PGP SIGNATURE-----\n\niQEzBAEBCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlu0mOwACgkQHkrtYphs\n0l16Hwf/ZdGp2MlqTTSNLrFqXJY+8oV2wcSSqw2A6+9TSPFwnycTsQjr1yCZ3BLq\nANyfVex2nivHgGrNsX4m28yemG8QEeoS/u8sUcRMgGz+oaN/0h7kVy2xU/lG6s9o\nqjO5NBT0ug0iOpkVnVhouNK5W50+qfTH8tSYyzr3ywtCLmQ8TZtfa/7jti0pKXIY\nDVtpmSbfjTsn0vBMHlQMPgf1Qw7Tr25klzP34Hp3YLEjQ+HlUZqm602t2GqgNgC4\nrwfHkE3erAJg+i5IsYgq8F4kJIcAMt3T+EZs21+VmcK5v6v4+G4w4K99VyyJlm/u\nhvjEe4Tzp0p5YIcXvnEJkkRc3X4xDg==\n=OmK+\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2018-10-03T23:53:07",
                "message_text_only": "It seems we forgot\nhttps://github.com/bitcoin/bitcoin/issues/12391#issuecomment-413653714\nsince getblockstats is only mentioned in the commits.\n\nOn Wed, Oct 3, 2018 at 12:32 PM Wladimir J. van der Laan via\nbitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA512\n>\n> Bitcoin Core version 0.17.0 is now available from:\n>\n>   <https://bitcoincore.org/bin/bitcoin-core-0.17.0/>\n>\n> or through BitTorrent:\n>\n>   magnet:?xt=urn:btih:1c72f17bc1667a2ce81860b75135e491f6637d05&dn=bitcoin-core-0.17.0&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969&tr=udp%3A%2F%2Fzer0day.ch%3A1337&tr=udp%3A%2F%2Fexplodie.org%3A6969\n>\n> This is a new major version release, including new features, various bugfixes\n> and performance improvements, as well as updated translations.\n>\n> Please report bugs using the issue tracker at GitHub:\n>\n>   <https://github.com/bitcoin/bitcoin/issues>\n>\n> To receive security and update notifications, please subscribe to:\n>\n>   <https://bitcoincore.org/en/list/announcements/join/>\n>\n> How to Upgrade\n> ==============\n>\n> If you are running an older version, shut it down. Wait until it has completely\n> shut down (which might take a few minutes for older versions), then run the\n> installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n> or `bitcoind`/`bitcoin-qt` (on Linux).\n>\n> If your node has a txindex, the txindex db will be migrated the first time you run 0.17.0 or newer, which may take up to a few hours. Your node will not be functional until this migration completes.\n>\n> The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n> new format, which will take anywhere from a few minutes to half an hour,\n> depending on the speed of your machine.\n>\n> Note that the block database format also changed in version 0.8.0 and there is no\n> automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n> directly from 0.7.x and earlier without redownloading the blockchain is not supported.\n> However, as usual, old wallet versions are still supported.\n>\n> Downgrading warning\n> - -------------------\n>\n> The chainstate database for this release is not compatible with previous\n> releases, so if you run 0.15 and then decide to switch back to any\n> older version, you will need to run the old release with the `-reindex-chainstate`\n> option to rebuild the chainstate data structures in the old format.\n>\n> If your node has pruning enabled, this will entail re-downloading and\n> processing the entire blockchain.\n>\n> Compatibility\n> ==============\n>\n> Bitcoin Core is extensively tested on multiple operating systems using\n> the Linux kernel, macOS 10.10+, and Windows 7 and newer (Windows XP is not supported).\n>\n> Bitcoin Core should also work on most other Unix-like systems but is not\n> frequently tested on them.\n>\n> - From 0.17.0 onwards macOS <10.10 is no longer supported. 0.17.0 is built using Qt 5.9.x, which doesn't\n> support versions of macOS older than 10.10.\n>\n> Known issues\n> ============\n>\n> - - Upgrading from 0.13.0 or older currently results in memory blow-up during the roll-back of blocks to the SegWit activation point. In these cases, a full `-reindex` is necessary.\n>\n> - - The GUI suffers from visual glitches in the new MacOS dark mode. This has to do with our Qt theme handling and is not a new problem in 0.17.0, but is expected to be resolved in 0.17.1.\n>\n> Notable changes\n> ===============\n>\n> Changed configuration options\n> - -----------------------------\n>\n> - - `-includeconf=<file>` can be used to include additional configuration files.\n>   Only works inside the `bitcoin.conf` file, not inside included files or from\n>   command-line. Multiple files may be included. Can be disabled from command-\n>   line via `-noincludeconf`. Note that multi-argument commands like\n>   `-includeconf` will override preceding `-noincludeconf`, i.e.\n>   ```\n>   noincludeconf=1\n>   includeconf=relative.conf\n>   ```\n>\n>   as bitcoin.conf will still include `relative.conf`.\n>\n> GUI changes\n> - -----------\n>\n> - - Block storage can be limited under Preferences, in the Main tab. Undoing this setting requires downloading the full blockchain again. This mode is incompatible with -txindex and -rescan.\n>\n> External wallet files\n> - ---------------------\n>\n> The `-wallet=<path>` option now accepts full paths instead of requiring wallets\n> to be located in the -walletdir directory.\n>\n> Newly created wallet format\n> - ---------------------------\n>\n> If `-wallet=<path>` is specified with a path that does not exist, it will now\n> create a wallet directory at the specified location (containing a wallet.dat\n> data file, a db.log file, and database/log.?????????? files) instead of just\n> creating a data file at the path and storing log files in the parent\n> directory. This should make backing up wallets more straightforward than\n> before because the specified wallet path can just be directly archived without\n> having to look in the parent directory for transaction log files.\n>\n> For backwards compatibility, wallet paths that are names of existing data files\n> in the `-walletdir` directory will continue to be accepted and interpreted the\n> same as before.\n>\n> Dynamic loading and creation of wallets\n> - ---------------------------------------\n>\n> Previously, wallets could only be loaded or created at startup, by specifying `-wallet` parameters on the command line or in the bitcoin.conf file. It is now possible to load, create and unload wallets dynamically at runtime:\n>\n> - - Existing wallets can be loaded by calling the `loadwallet` RPC. The wallet can be specified as file/directory basename (which must be located in the `walletdir` directory), or as an absolute path to a file/directory.\n> - - New wallets can be created (and loaded) by calling the `createwallet` RPC. The provided name must not match a wallet file in the `walletdir` directory or the name of a wallet that is currently loaded.\n> - - Loaded wallets can be unloaded by calling the `unloadwallet` RPC.\n>\n> This feature is currently only available through the RPC interface.\n>\n> Coin selection\n> - --------------\n>\n> ### Partial spend avoidance\n>\n> When an address is paid multiple times the coins from those separate payments can be spent separately which hurts privacy due to linking otherwise separate addresses. A new `-avoidpartialspends` flag has been added (default=false). If enabled, the wallet will always spend existing UTXO to the same address together even if it results in higher fees. If someone were to send coins to an address after it was used, those coins will still be included in future coin selections.\n>\n> Configuration sections for testnet and regtest\n> - ----------------------------------------------\n>\n> It is now possible for a single configuration file to set different\n> options for different networks. This is done by using sections or by\n> prefixing the option with the network, such as:\n>\n>     main.uacomment=bitcoin\n>     test.uacomment=bitcoin-testnet\n>     regtest.uacomment=regtest\n>     [main]\n>     mempoolsize=300\n>     [test]\n>     mempoolsize=100\n>     [regtest]\n>     mempoolsize=20\n>\n> If the following options are not in a section, they will only apply to mainnet:\n> `addnode=`, `connect=`, `port=`, `bind=`, `rpcport=`, `rpcbind=` and `wallet=`.\n> The options to choose a network (`regtest=` and `testnet=`) must be specified\n> outside of sections.\n>\n> 'label' and 'account' APIs for wallet\n> - -------------------------------------\n>\n> A new 'label' API has been introduced for the wallet. This is intended as a\n> replacement for the deprecated 'account' API. The 'account' can continue to\n> be used in V0.17 by starting bitcoind with the '-deprecatedrpc=accounts'\n> argument, and will be fully removed in V0.18.\n>\n> The label RPC methods mirror the account functionality, with the following functional differences:\n>\n> - - Labels can be set on any address, not just receiving addresses. This functionality was previously only available through the GUI.\n> - - Labels can be deleted by reassigning all addresses using the `setlabel` RPC method.\n> - - There isn't support for sending transactions _from_ a label, or for determining which label a transaction was sent from.\n> - - Labels do not have a balance.\n>\n> Here are the changes to RPC methods:\n>\n> | Deprecated Method       | New Method            | Notes       |\n> | :---------------------- | :-------------------- | :-----------|\n> | `getaccount`            | `getaddressinfo`      | `getaddressinfo` returns a json object with address information instead of just the name of the account as a string. |\n> | `getaccountaddress`     | n/a                   | There is no replacement for `getaccountaddress` since labels do not have an associated receive address. |\n> | `getaddressesbyaccount` | `getaddressesbylabel` | `getaddressesbylabel` returns a json object with the addresses as keys, instead of a list of strings. |\n> | `getreceivedbyaccount`  | `getreceivedbylabel`  | _no change in behavior_ |\n> | `listaccounts`          | `listlabels`          | `listlabels` does not return a balance or accept `minconf` and `watchonly` arguments. |\n> | `listreceivedbyaccount` | `listreceivedbylabel` | Both methods return new `label` fields, along with `account` fields for backward compatibility. |\n> | `move`                  | n/a                   | _no replacement_ |\n> | `sendfrom`              | n/a                   | _no replacement_ |\n> | `setaccount`            | `setlabel`            | Both methods now: <ul><li>allow assigning labels to any address, instead of raising an error if the address is not receiving address.<li>delete the previous label associated with an address when the final address using that label is reassigned to a different label, instead of making an implicit `getaccountaddress` call to ensure the previous label still has a receiving address. |\n>\n> | Changed Method         | Notes   |\n> | :--------------------- | :------ |\n> | `addmultisigaddress`   | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility if running with '-deprecatedrpc=accounts'. |\n> | `getnewaddress`        | Renamed `account` named parameter to `label`. Still accepts `account` for backward compatibility. if running with '-deprecatedrpc=accounts' |\n> | `listunspent`          | Returns new `label` fields. `account` field will be returned for backward compatibility if running with '-deprecatedrpc=accounts' |\n> | `sendmany`             | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the empty string, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |\n> | `listtransactions`     | The `account` named parameter has been renamed to `dummy`. If provided, the `dummy` parameter must be set to the string `*`, unless running with the `-deprecatedrpc=accounts` argument (in which case functionality is unchanged). |\n> | `getbalance`           | `account`, `minconf` and `include_watchonly` parameters are deprecated, and can only be used if running with '-deprecatedrpc=accounts' |\n>\n> BIP 174 Partially Signed Bitcoin Transactions support\n> - -----------------------------------------------------\n>\n> [BIP 174 PSBT](https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki) is an interchange format for Bitcoin transactions that are not fully signed\n> yet, together with relevant metadata to help entities work towards signing it.\n> It is intended to simplify workflows where multiple parties need to cooperate to\n> produce a transaction. Examples include hardware wallets, multisig setups, and\n> [CoinJoin](https://bitcointalk.org/?topic=279249) transactions.\n>\n> ### Overall workflow\n>\n> Overall, the construction of a fully signed Bitcoin transaction goes through the\n> following steps:\n>\n> - - A **Creator** proposes a particular transaction to be created. He constructs\n>   a PSBT that contains certain inputs and outputs, but no additional metadata.\n> - - For each input, an **Updater** adds information about the UTXOs being spent by\n>   the transaction to the PSBT.\n> - - A potentially other Updater adds information about the scripts and public keys\n>   involved in each of the inputs (and possibly outputs) of the PSBT.\n> - - **Signers** inspect the transaction and its metadata to decide whether they\n>   agree with the transaction. They can use amount information from the UTXOs\n>   to assess the values and fees involved. If they agree, they produce a\n>   partial signature for the inputs for which they have relevant key(s).\n> - - A **Finalizer** is run for each input to convert the partial signatures and\n>   possibly script information into a final `scriptSig` and/or `scriptWitness`.\n> - - An **Extractor** produces a valid Bitcoin transaction (in network format)\n>   from a PSBT for which all inputs are finalized.\n>\n> Generally, each of the above (excluding Creator and Extractor) will simply\n> add more and more data to a particular PSBT. In a naive workflow, they all have\n> to operate sequentially, passing the PSBT from one to the next, until the\n> Extractor can convert it to a real transaction. In order to permit parallel\n> operation, **Combiners** can be employed which merge metadata from different\n> PSBTs for the same unsigned transaction.\n>\n> The names above in bold are the names of the roles defined in BIP174. They're\n> useful in understanding the underlying steps, but in practice, software and\n> hardware implementations will typically implement multiple roles simultaneously.\n>\n> ### RPCs\n>\n> - - **`converttopsbt` (Creator)** is a utility RPC that converts an\n>   unsigned raw transaction to PSBT format. It ignores existing signatures.\n> - - **`createpsbt` (Creator)** is a utility RPC that takes a list of inputs and\n>   outputs and converts them to a PSBT with no additional information. It is\n>   equivalent to calling `createrawtransaction` followed by `converttopsbt`.\n> - - **`walletcreatefundedpsbt` (Creator, Updater)** is a wallet RPC that creates a\n>   PSBT with the specified inputs and outputs, adds additional inputs and change\n>   to it to balance it out, and adds relevant metadata. In particular, for inputs\n>   that the wallet knows about (counting towards its normal or watch-only\n>   balance), UTXO information will be added. For outputs and inputs with UTXO\n>   information present, key and script information will be added which the wallet\n>   knows about. It is equivalent to running `createrawtransaction`, followed by\n>   `fundrawtransaction`, and `converttopsbt`.\n> - - **`walletprocesspsbt` (Updater, Signer, Finalizer)** is a wallet RPC that takes as\n>   input a PSBT, adds UTXO, key, and script data to inputs and outputs that miss\n>   it, and optionally signs inputs. Where possible it also finalizes the partial\n>   signatures.\n> - - **`finalizepsbt` (Finalizer, Extractor)** is a utility RPC that finalizes any\n>   partial signatures, and if all inputs are finalized, converts the result to a\n>   fully signed transaction which can be broadcast with `sendrawtransaction`.\n> - - **`combinepsbt` (Combiner)** is a utility RPC that implements a Combiner. It\n>   can be used at any point in the workflow to merge information added to\n>   different versions of the same PSBT. In particular it is useful to combine the\n>   output of multiple Updaters or Signers.\n> - - **`decodepsbt`** is a diagnostic utility RPC which will show all information in\n>   a PSBT in human-readable form, as well as compute its eventual fee if known.\n>\n> Upgrading non-HD wallets to HD wallets\n> - --------------------------------------\n>\n> Since Bitcoin Core 0.13.0, creating new BIP 32 Hierarchical Deterministic wallets has been supported by Bitcoin Core but old non-HD wallets could not be upgraded to HD. Now non-HD wallets can be upgraded to HD using the `-upgradewallet` command line option. This upgrade will result in the all keys in the keypool being marked as used and a new keypool generated. **A new backup must be made when this upgrade is performed.**\n>\n> Additionally, `-upgradewallet` can be used to upgraded from a non-split HD chain (all keys generated with `m/0'/0'/i'`) to a split HD chain (receiving keys generated with `'m/0'/0'/i'` and change keys generated with `m'/0'/1'/i'`). When this upgrade occurs, all keys already in the keypool will remain in the keypool to be used until all keys from before the upgrade are exhausted. This is to avoid issues with backups and downgrades when some keys may come from the change key keypool. Users can begin using the new split HD chain keypools by using the `newkeypool` RPC to mark all keys in the keypool as used and begin using a new keypool generated from the split HD chain.\n>\n> HD Master key rotation\n> - ----------------------\n>\n> A new RPC, `sethdseed`, has been introduced which allows users to set a new HD seed or set their own HD seed. This allows for a new HD seed to be used. **A new backup must be made when a new HD seed is set.**\n>\n> Low-level RPC changes\n> - ---------------------\n>\n> - - The new RPC `scantxoutset` can be used to scan the UTXO set for entries\n>   that match certain output descriptors. Refer to the [output descriptors\n>   reference documentation](doc/descriptors.md) for more details. This call\n>   is similar to `listunspent` but does not use a wallet, meaning that the\n>   wallet can be disabled at compile or run time. This call is experimental,\n>   as such, is subject to changes or removal in future releases.\n>\n> - - The `createrawtransaction` RPC will now accept an array or dictionary (kept for compatibility) for the `outputs` parameter. This means the order of transaction outputs can be specified by the client.\n> - - The `fundrawtransaction` RPC will reject the previously deprecated `reserveChangeKey` option.\n> - - `sendmany` now shuffles outputs to improve privacy, so any previously expected behavior with regards to output ordering can no longer be relied upon.\n> - - The new RPC `testmempoolaccept` can be used to test acceptance of a transaction to the mempool without adding it.\n> - - JSON transaction decomposition now includes a `weight` field which provides\n>   the transaction's exact weight. This is included in REST /rest/tx/ and\n>   /rest/block/ endpoints when in json mode. This is also included in `getblock`\n>   (with verbosity=2), `listsinceblock`, `listtransactions`, and\n>   `getrawtransaction` RPC commands.\n> - - New `fees` field introduced in `getrawmempool`, `getmempoolancestors`, `getmempooldescendants` and\n>    `getmempoolentry` when verbosity is set to `true` with sub-fields `ancestor`, `base`, `modified`\n>    and `descendant` denominated in BTC. This new field deprecates previous fee fields, such as\n>    `fee`, `modifiedfee`, `ancestorfee` and `descendantfee`.\n> - - The new RPC `getzmqnotifications` returns information about active ZMQ\n>   notifications.\n> - - When bitcoin is not started with any `-wallet=<path>` options, the name of\n>   the default wallet returned by `getwalletinfo` and `listwallets` RPCs is\n>   now the empty string `\"\"` instead of `\"wallet.dat\"`. If bitcoin is started\n>   with any `-wallet=<path>` options, there is no change in behavior, and the\n>   name of any wallet is just its `<path>` string.\n> - - Passing an empty string (`\"\"`) as the `address_type` parameter to\n>   `getnewaddress`, `getrawchangeaddress`, `addmultisigaddress`,\n>   `fundrawtransaction` RPCs is now an error. Previously, this would fall back\n>   to using the default address type. It is still possible to pass null or leave\n>   the parameter unset to use the default address type.\n>\n> - - Bare multisig outputs to our keys are no longer automatically treated as\n>   incoming payments. As this feature was only available for multisig outputs for\n>   which you had all private keys in your wallet, there was generally no use for\n>   them compared to single-key schemes. Furthermore, no address format for such\n>   outputs is defined, and wallet software can't easily send to it. These outputs\n>   will no longer show up in `listtransactions`, `listunspent`, or contribute to\n>   your balance, unless they are explicitly watched (using `importaddress` or\n>   `importmulti` with hex script argument). `signrawtransaction*` also still\n>   works for them.\n>\n> - - The `getwalletinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n> - - The `getaddressinfo` RPC method now returns an `hdseedid` value, which is always the same as the incorrectly-named `hdmasterkeyid` value. `hdmasterkeyid` will be removed in V0.18.\n>\n> - - Parts of the `validateaddress` RPC method have been deprecated and moved to\n>   `getaddressinfo`. Clients must transition to using `getaddressinfo` to access\n>   this information before upgrading to v0.18. The following deprecated fields\n>   have moved to `getaddressinfo` and will only be shown with\n>   `-deprecatedrpc=validateaddress`: `ismine`, `iswatchonly`, `script`, `hex`,\n>   `pubkeys`, `sigsrequired`, `pubkey`, `addresses`, `embedded`, `iscompressed`,\n>   `account`, `timestamp`, `hdkeypath`, `hdmasterkeyid`.\n> - - `signrawtransaction` is deprecated and will be fully removed in v0.18. To use\n>   `signrawtransaction` in v0.17, restart bitcoind with\n>   `-deprecatedrpc=signrawtransaction`. Projects should transition to using\n>   `signrawtransactionwithkey` and `signrawtransactionwithwallet` before\n>   upgrading to v0.18.\n>\n> Other API changes\n> - -----------------\n>\n> - - The `inactivehdmaster` property in the `dumpwallet` output has been corrected to `inactivehdseed`\n>\n> ### Logging\n>\n> - - The log timestamp format is now ISO 8601 (e.g. \"2018-02-28T12:34:56Z\").\n>\n> - - When running bitcoind with `-debug` but without `-daemon`, logging to stdout\n>   is now the default behavior. Setting `-printtoconsole=1` no longer implicitly\n>   disables logging to debug.log. Instead, logging to file can be explicitly disabled\n>   by setting `-debuglogfile=0`.\n>\n> Transaction index changes\n> - -------------------------\n>\n> The transaction index is now built separately from the main node procedure,\n> meaning the `-txindex` flag can be toggled without a full reindex. If bitcoind\n> is run with `-txindex` on a node that is already partially or fully synced\n> without one, the transaction index will be built in the background and become\n> available once caught up. When switching from running `-txindex` to running\n> without the flag, the transaction index database will *not* be deleted\n> automatically, meaning it could be turned back on at a later time without a full\n> resync.\n>\n> Miner block size removed\n> - ------------------------\n>\n> The `-blockmaxsize` option for miners to limit their blocks' sizes was\n> deprecated in V0.15.1, and has now been removed. Miners should use the\n> `-blockmaxweight` option if they want to limit the weight of their blocks.\n>\n> Python Support\n> - --------------\n>\n> Support for Python 2 has been discontinued for all test files and tools.\n>\n> 0.17.0 change log\n> =================\n>\n> ### Consensus\n> - - #12204 `3fa24bb` Fix overly eager BIP30 bypass (morcos)\n>\n> ### Policy\n> - - #12568 `ed6ae80` Allow dustrelayfee to be set to zero (luke-jr)\n> - - #13120 `ca2a233` Treat segwit as always active (MarcoFalke)\n> - - #13096 `062738c` Fix `MAX_STANDARD_TX_WEIGHT` check (jl2012)\n>\n> ### Mining\n> - - #12693 `df529dc` Remove unused variable in SortForBlock (drewx2)\n> - - #12448 `84efa9a` Interrupt block generation on shutdown request (promag)\n>\n> ### Block and transaction handling\n> - - #12225 `67447ba` Mempool cleanups (sdaftuar)\n> - - #12356 `fd65937` Fix 'mempool min fee not met' debug output (Empact)\n> - - #12287 `bf3353d` Optimise lock behaviour for GuessVerificationProgress() (jonasschnelli)\n> - - #11889 `47a7666` Drop extra script variable in ProduceSignature (ryanofsky)\n> - - #11880 `d59b8d6` Stop special-casing phashBlock handling in validation for TBV (TheBlueMatt)\n> - - #12431 `947c25e` Only call NotifyBlockTip when chainActive changes (jamesob)\n> - - #12653 `534b8fa` Allow to optional specify the directory for the blocks storage (jonasschnelli)\n> - - #12172 `3b62a91` Bugfix: RPC: savemempool: Don't save until LoadMempool() is finished (jtimon)\n> - - #12167 `88430cb` Make segwit failure due to `CLEANSTACK` violation return a `SCRIPT_ERR_CLEANSTACK` error code (maaku)\n> - - #12561 `24133b1` Check for block corruption in ConnectBlock() (sdaftuar)\n> - - #11617 `1b5723e` Avoid lock: Call FlushStateToDisk(\u2026) regardless of fCheckForPruning (practicalswift)\n> - - #11739 `0a8b7b4` Enforce `SCRIPT_VERIFY_P2SH` and `SCRIPT_VERIFY_WITNESS` from genesis (sdaftuar)\n> - - #12885 `a49381d` Reduce implementation code inside CScript (sipa)\n> - - #13032 `34dd1a6` Output values for \"min relay fee not met\" error (kristapsk)\n> - - #13033 `a07e8ca` Build txindex in parallel with validation (jimpo)\n> - - #13080 `66cc47b` Add compile time checking for ::mempool.cs runtime locking assertions (practicalswift)\n> - - #13185 `08c1caf` Bugfix: the end of a reorged chain is invalid when connect fails (sipa)\n> - - #11689 `0264836` Fix missing locking in CTxMemPool::check(\u2026) and CTxMemPool::setSanityCheck(\u2026) (practicalswift)\n> - - #13011 `3c2a41a` Cache witness hash in CTransaction (MarcoFalke)\n> - - #13191 `0de7cc8` Specialized double-SHA256 with 64 byte inputs with SSE4.1 and AVX2 (sipa)\n> - - #13243 `ea263e1` Make reusable base class for auxiliary indices (jimpo)\n> - - #13393 `a607d23` Enable double-SHA256-for-64-byte code on 32-bit x86 (sipa)\n> - - #13428 `caabdea` validation: check the specified number of blocks (off-by-one) (kallewoof)\n> - - #13438 `450055b` Improve coverage of SHA256 SelfTest code (sipa)\n> - - #13431 `954f4a9` validation: count blocks correctly for check level < 3 (kallewoof)\n> - - #13386 `3a3eabe` SHA256 implementations based on Intel SHA Extensions (sipa)\n> - - #11658 `9a1ad2c` During IBD, when doing pruning, prune 10% extra to avoid pruning again soon after (luke-jr)\n> - - #13794 `8ce55df` chainparams: Update with data from assumed valid chain (MarcoFalke)\n> - - #13527 `e7ea858` Remove promiscuousmempoolflags (MarcoFalke)\n>\n> ### P2P protocol and network code\n> - - #12342 `eaeaa2d` Extend #11583 (\"Do not make it trivial for inbound peers to generate log entries\") to include \"version handshake timeout\" message (clemtaylor)\n> - - #12218 `9a32114` Move misbehaving logging to net logging category (laanwj)\n> - - #10387 `5c2aff8` Eventually connect to `NODE_NETWORK_LIMITED` peers (jonasschnelli)\n> - - #9037 `a36834f` Add test-before-evict discipline to addrman (EthanHeilman)\n> - - #12622 `e1d6e2a` Correct addrman logging (laanwj)\n> - - #11962 `0a01843` add seed.bitcoin.sprovoost.nl to DNS seeds (Sjors)\n> - - #12569 `23e7fe8` Increase signal-to-noise ratio in debug.log by adjusting log level when logging failed non-manual connect():s (practicalswift)\n> - - #12855 `c199869` Minor accumulated cleanups (tjps)\n> - - #13153 `ef46c99` Add missing newlines to debug logging (laanwj)\n> - - #13162 `a174702` Don't incorrectly log that REJECT messages are unknown (jnewbery)\n> - - #13151 `7f4db9a` Serve blocks directly from disk when possible (laanwj)\n> - - #13134 `70d3541` Add option `-enablebip61` to configure sending of BIP61 notifications (laanwj)\n> - - #13532 `7209fec` Log warning when deprecated network name 'tor' is used (wodry)\n> - - #13615 `172f984` Remove unused interrupt from SendMessages (fanquake)\n> - - #13417 `1e90862` Tighten scope in `net_processing` (skeees)\n> - - #13298 `f8d470e` Bucketing INV delays (1 bucket) for incoming connections to hide tx time (naumenkogs)\n> - - #13672 `0d8d6be` Modified `in_addr6` cast in CConman class to work with msvc (sipsorcery)\n> - - #11637 `c575260` Remove dead service bits code (MarcoFalke)\n> - - #13212 `a6f00ce` Fixed a race condition when disabling the network (lmanners)\n> - - #13656 `1211b15` Remove the boost/algorithm/string/predicate.hpp dependency (251Labs)\n> - - #13423 `f58674a` Thread safety annotations in `net_processing` (skeees)\n> - - #13776 `7d36237` Add missing verification of IPv6 address in CNetAddr::GetIn6Addr(\u2026) (practicalswift)\n> - - #13907 `48bf8ff` Introduce a maximum size for locators (gmaxwell)\n> - - #13951 `8a9ffec` Hardcoded seeds update pre-0.17 branch (laanwj)\n>\n> ### Wallet\n> - - #12330 `2a30e67` Reduce scope of `cs_main` and `cs_wallet` locks in listtransactions (promag)\n> - - #12298 `a1ffddb` Refactor HaveKeys to early return on false result (promag)\n> - - #12282 `663911e` Disallow abandon of conflicted txes (MarcoFalke)\n> - - #12333 `d405bee` Make CWallet::ListCoins atomic (promag)\n> - - #12296 `8e6f9f4` Only fee-bump non-conflicted/non-confirmed txes (MarcoFalke)\n> - - #11866 `6bb9c13` Do not un-mark fInMempool on wallet txn if ATMP fails (TheBlueMatt)\n> - - #11882 `987a809` Disable default fallbackfee on mainnet (jonasschnelli)\n> - - #9991 `4ca7c1e` listreceivedbyaddress Filter Address (NicolasDorier)\n> - - #11687 `98bc27f` External wallet files (ryanofsky)\n> - - #12658 `af88094` Sanitize some wallet serialization (sipa)\n> - - #9680 `6acd870` Unify CWalletTx construction (ryanofsky)\n> - - #10637 `e057589` Coin Selection with Murch's algorithm (achow101, Xekyo)\n> - - #12408 `c39dd2e` Change output type globals to members (MarcoFalke)\n> - - #12694 `9552dfb` Actually disable BnB when there are preset inputs (achow101)\n> - - #11536 `cead84b` Rename account to label where appropriate (ryanofsky)\n> - - #12709 `02b7e83` shuffle sendmany recipients ordering (instagibbs)\n> - - #12699 `c948dc8` Shuffle transaction inputs before signing (instagibbs)\n> - - #10762 `6d53663` Remove Wallet dependencies from init.cpp (jnewbery)\n> - - #12857 `821980c` Avoid travis lint-include-guards error (ken2812221)\n> - - #12702 `dab0d68` importprivkey: hint about importmulti (kallewoof)\n> - - #12836 `9abdb7c` Make WalletInitInterface and DummyWalletInit private, fix nullptr deref (promag)\n> - - #12785 `215158a` Initialize `m_last_block_processed` to nullptr (practicalswift)\n> - - #12932 `8d651ae` Remove redundant lambda function arg in handleTransactionChanged (laanwj)\n> - - #12749 `a84b056` feebumper: discard change outputs below discard rate (instagibbs)\n> - - #12892 `9b3370d` introduce 'label' API for wallet (jnewbery)\n> - - #12925 `6d3de17` Logprint the start of a rescan (jonasschnelli)\n> - - #12888 `39439e5` debug log number of unknown wallet records on load (instagibbs)\n> - - #12977 `434150a` Refactor `g_wallet_init_interface` to const reference (promag)\n> - - #13017 `65d7083` Add wallets management functions (promag)\n> - - #12953 `d1d54ae` Deprecate accounts (jnewbery)\n> - - #12909 `476cb35` Make fee settings to be non-static members (MarcoFalke)\n> - - #13002 `487dcbe` Do not treat bare multisig outputs as IsMine unless watched (sipa)\n> - - #13028 `783bb64` Make vpwallets usage thread safe (promag)\n> - - #12507 `2afdc29` Interrupt rescan on shutdown request (promag)\n> - - #12729 `979150b` Get rid of ambiguous OutputType::NONE value (ryanofsky)\n> - - #13079 `5778d44` Fix rescanblockchain rpc to properly report progress (Empact)\n> - - #12560 `e03c0db` Upgrade path for non-HD wallets to HD (achow101)\n> - - #13161 `7cc1bd3` Reset BerkeleyDB handle after connection fails (real-or-random)\n> - - #13081 `0dec5b5` Add compile time checking for `cs_wallet` runtime locking assertions (practicalswift)\n> - - #13127 `19a3a9e` Add Clang thread safety annotations for variables guarded by `cs_db` (practicalswift)\n> - - #10740 `4cfe17c` `loadwallet` RPC - load wallet at runtime (jnewbery)\n> - - #12924 `6738813` Fix hdmaster-key / seed-key confusion (scripted diff) (jnewbery)\n> - - #13297 `d82c5d1` Fix incorrect comment for DeriveNewSeed (jnewbery)\n> - - #13063 `6378eef` Use shared pointer to retain wallet instance (promag)\n> - - #13142 `56fe3dc` Separate IsMine from solvability (sipa)\n> - - #13194 `fd96d54` Remove template matching and pseudo opcodes (sipa)\n> - - #13252 `c4cc8d9` Refactor ReserveKeyFromKeyPool for safety (Empact)\n> - - #13058 `343d4e4` `createwallet` RPC - create new wallet at runtime (jnewbery)\n> - - #13351 `2140f6c` Prevent segfault when sending to unspendable witness (MarcoFalke)\n> - - #13060 `3f0f394` Remove getlabeladdress RPC (jnewbery)\n> - - #13111 `000abbb` Add unloadwallet RPC (promag)\n> - - #13160 `868cf43` Unlock spent outputs (promag)\n> - - #13498 `f54f373` Fixups from account API deprecation (jnewbery)\n> - - #13491 `61a044a` Improve handling of INVALID in IsMine (sipa)\n> - - #13425 `028b0d9` Moving final scriptSig construction from CombineSignatures to ProduceSignature (PSBT signer logic) (achow101)\n> - - #13564 `88a15eb` loadwallet shouldn't create new wallets (jnewbery)\n> - - #12944 `619cd29` ScanforWalletTransactions should mark input txns as dirty (instagibbs)\n> - - #13630 `d6b2235` Drop unused pindexRet arg to CMerkleTx::GetDepthInMainChain (Empact)\n> - - #13566 `ad552a5` Fix get balance (jnewbery)\n> - - #13500 `4a3e8c5` Decouple wallet version from client version (achow101)\n> - - #13712 `aba2e66` Fix non-determinism in ParseHDKeypath(\u2026). Avoid using an uninitialized variable in path calculation (practicalswift)\n> - - #9662 `6b6e854` Add createwallet \"disableprivatekeys\" option: a sane mode for watchonly-wallets (jonasschnelli)\n> - - #13683 `e8c7434` Introduce assertion to document the assumption that cache and cache_used are always set in tandem (practicalswift)\n> - - #12257 `5f7575e` Use destination groups instead of coins in coin select (kallewoof)\n> - - #13773 `89a116d` Fix accidental use of the comma operator (practicalswift)\n> - - #13805 `c88529a` Correctly limit output group size (sdaftuar)\n> - - #12992 `26f59f5` Add wallet name to log messages (PierreRochard)\n> - - #13667 `b81a8a5` Fix backupwallet for multiwallets (domob1812)\n> - - #13657 `51c693d` assert to ensure accuracy of CMerkleTx::GetBlocksToMaturity (Empact)\n> - - #13812 `9d86aad` sum ancestors rather than taking max in output groups (kallewoof)\n> - - #13876 `8eb9870` Catch `filesystem_error` and raise `InitError` (MarcoFalke)\n> - - #13808 `13d51a2` shuffle coins before grouping, where warranted (kallewoof)\n> - - #13666 `2115cba` Always create signatures with Low R values (achow101)\n> - - #13917 `0333914` Additional safety checks in PSBT signer (sipa)\n> - - #13968 `65e7a8b` couple of walletcreatefundedpsbt fixes (instagibbs)\n> - - #14055 `2307a6e` fix walletcreatefundedpsbt deriv paths, add test (instagibbs)\n>\n> ### RPC and other APIs\n> - - #12336 `3843780` Remove deprecated rpc options (jnewbery)\n> - - #12193 `5dc00f6` Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d) (MarcoFalke)\n> - - #12409 `0cc45ed` Reject deprecated reserveChangeKey in fundrawtransaction (MarcoFalke)\n> - - #10583 `8a98dfe` Split part of validateaddress into getaddressinfo (achow101)\n> - - #10579 `ffc6e48` Split signrawtransaction into wallet and non-wallet RPC command (achow101)\n> - - #12494 `e4ffcac` Declare CMutableTransaction a struct in rawtransaction.h (Empact)\n> - - #12503 `0e26591` createmultisig no longer takes addresses (instagibbs)\n> - - #12083 `228b086` Improve getchaintxstats test coverage (promag)\n> - - #12479 `cd5e438` Add child transactions to getrawmempool verbose output (conscott)\n> - - #11872 `702e8b7` createrawtransaction: Accept sorted outputs (MarcoFalke)\n> - - #12700 `ebdf84c` Document RPC method aliasing (ryanofsky)\n> - - #12727 `8ee5c7b` Remove unreachable help conditions in rpcwallet.cpp (lutangar)\n> - - #12778 `b648974` Add username and ip logging for RPC method requests (GabrielDav)\n> - - #12717 `ac898b6` rest: Handle utxo retrieval when ignoring the mempool (romanz)\n> - - #12787 `cd99e5b` Adjust ifdef to avoid unreachable code (practicalswift)\n> - - #11742 `18815b4` Add testmempoolaccept (MarcoFalke)\n> - - #12942 `fefb817` Drop redundant testing of signrawtransaction prevtxs args (Empact)\n> - - #11200 `5f2a399` Allow for aborting rescans in the GUI (achow101)\n> - - #12791 `3a8a4dc` Expose a transaction's weight via RPC (TheBlueMatt)\n> - - #12436 `6e67754` Adds a functional test to validate the transaction version number in the RPC output (251Labs)\n> - - #12240 `6f8b345` Introduced a new `fees` structure that aggregates all sub-field fee types denominated in BTC (mryandao)\n> - - #12321 `eac067a` p2wsh and p2sh-p2wsh address in decodescript (fivepiece)\n> - - #13090 `17266a1` Remove Safe mode (achow101, laanwj)\n> - - #12639 `7eb7076` Reduce `cs_main` lock in listunspent (promag)\n> - - #10267 `7b966d9` New -includeconf argument for including external configuration files (kallewoof)\n> - - #10757 `b9551d3` Introduce getblockstats to plot things (jtimon)\n> - - #13288 `a589f53` Remove the need to include rpc/blockchain.cpp in order to put `GetDifficulty` under test (Empact)\n> - - #13394 `e1f8dce` cli: Ignore libevent warnings (theuni)\n> - - #13439 `3f398d7` Avoid \"duplicate\" return value for invalid submitblock (TheBlueMatt)\n> - - #13570 `a247594` Add new \"getzmqnotifications\" method (domob1812)\n> - - #13072 `b25a4c2` Update createmultisig RPC to support segwit (ajtowns)\n> - - #12196 `8fceae0` Add scantxoutset RPC method (jonasschnelli)\n> - - #13557 `b654723` BIP 174 PSBT Serializations and RPCs (achow101)\n> - - #13697 `f030410` Support output descriptors in scantxoutset (sipa)\n> - - #13927 `bced8ea` Use pushKV in some new PSBT RPCs (domob1812)\n> - - #13918 `a9c56b6` Replace median fee rate with feerate percentiles in getblockstats (marcinja)\n> - - #13721 `9f23c16` Bugfixes for BIP 174 combining and deserialization (achow101)\n> - - #13960 `517010e` Fix PSBT deserialization of 0-input transactions (achow101)\n>\n> ### GUI\n> - - #12416 `c997f88` Fix Windows build errors introduced in #10498 (practicalswift)\n> - - #11733 `e782099` Remove redundant locks (practicalswift)\n> - - #12426 `bfa3911` Initialize members in WalletModel (MarcoFalke)\n> - - #12489 `e117cfe` Bugfix: respect user defined configuration file (-conf) in QT settings (jonasschnelli)\n> - - #12421 `be263fa` navigate to  transaction history page after send (Sjors)\n> - - #12580 `ce56fdd` Show a transaction's virtual size in its details dialog (dooglus)\n> - - #12501 `c8ea91a` Improved \"custom fee\" explanation in tooltip (randolf)\n> - - #12616 `cff95a6` Set modal overlay hide button as default (promag)\n> - - #12620 `8a43bdc` Remove TransactionTableModel::TxIDRole (promag)\n> - - #12080 `56cc022` Add support to search the address book (promag)\n> - - #12621 `2bac3e4` Avoid querying unnecessary model data when filtering transactions (promag)\n> - - #12721 `e476826` remove \"new\" button during receive-mode in addressbook (jonasschnelli)\n> - - #12723 `310dc61` Qt5: Warning users about invalid-BIP21 URI bitcoin:// (krab)\n> - - #12610 `25cf18f` Multiwallet for the GUI (jonasschnelli)\n> - - #12779 `f4353da` Remove unused method setupAmountWidget(\u2026) (practicalswift)\n> - - #12795 `68484d6` do not truncate .dat extension for wallets in gui (instagibbs)\n> - - #12870 `1d54004` make clean removes `src/qt/moc_` files (Sjors)\n> - - #13055 `bdda14d` Don't log to console by default (laanwj)\n> - - #13141 `57c57df` fixes broken link on readme (marcoagner)\n> - - #12928 `ef006d9` Initialize non-static class members that were previously neither initialized where defined nor in constructor (practicalswift)\n> - - #13158 `81c533c` Improve sendcoinsdialog readability (marcoagner)\n> - - #11491 `40c34a0` Add proxy icon in statusbar (mess110)\n> - - #13264 `2a7c53b` Satoshi unit (GreatSock)\n> - - #13097 `e545503` Support wallets loaded dynamically (promag)\n> - - #13284 `f8be434` fix visual \"overflow\" of amount input (brandonrninefive)\n> - - #13275 `a315b79` use `[default wallet]` as name for wallet with no name (jonasschnelli)\n> - - #13273 `3fd0c23` Qt/Bugfix: fix handling default wallet with no name (jonasschnelli)\n> - - #13341 `25d2df2` Stop translating command line options (laanwj)\n> - - #13043 `6e249e4` OptionsDialog: add prune setting (Sjors)\n> - - #13506 `6579d80` load wallet in UI after possible init aborts (jonasschnelli)\n> - - #13458 `dc53f7f` Drop qt4 support (laanwj)\n> - - #13528 `b877c39` Move BitcoinGUI initializers to class, fix initializer order warning (laanwj)\n> - - #13536 `baf3a3a` coincontrol: Remove unused qt4 workaround (MarcoFalke)\n> - - #13537 `10ffca7` Peer table: Visualize inbound/outbound state for every row (wodry)\n> - - #13791 `2c14c1f` Reject dialogs if key escape is pressed (promag)\n>\n> ### Build system\n> - - #12371 `c9ca4f6` Add gitian PGP key: akx20000 (ghost)\n> - - #11966 `f4f4f51` clientversion: Use full commit hash for commit-based version descriptions (luke-jr)\n> - - #12417 `ae0fbf0` Upgrade `mac_alias` to 2.0.7 (droark)\n> - - #12444 `1f055ef` gitian: Bump descriptors for (0.)17 (theuni)\n> - - #12402 `59e032b` expat 2.2.5, ccache 3.4.1, miniupnpc 2.0.20180203 (fanquake)\n> - - #12029 `daa84b3` Add a makefile target for Doxygen documentation (Ov3rlo4d)\n> - - #12466 `6645eaf` Only use `D_DARWIN_C_SOURCE` when building miniupnpc on darwin (fanquake)\n> - - #11986 `765a3eb` zeromq 4.2.3 (fanquake)\n> - - #12373 `f13d756` Add build support for profiling (murrayn)\n> - - #12631 `a312e20` gitian: Alphabetize signing keys & add kallewoof key (kallewoof)\n> - - #12607 `29fad97` Remove ccache (fanquake)\n> - - #12625 `c4219ff` biplist 1.0.3 (fanquake)\n> - - #12666 `05042d3` configure: UniValue 1.0.4 is required for pushKV(, bool) (luke-jr)\n> - - #12678 `6324c68` Fix a few compilation issues with Clang 7 and -Werror (vasild)\n> - - #12692 `de6bdfd` Add configure options for various -fsanitize flags (eklitzke)\n> - - #12901 `7e23972` Show enabled sanitizers in configure output (practicalswift)\n> - - #12899 `3076993` macOS: Prevent Xcode 9.3 build warnings (AkioNak)\n> - - #12715 `8fd6243` Add 'make clean' rule (hkjn)\n> - - #13133 `a024a18` Remove python2 from configure.ac (ken2812221)\n> - - #13005 `cb088b1` Make --enable-debug to pick better options (practicalswift)\n> - - #13254 `092b366` Remove improper `qt/moc_*` cleaning glob from the general Makefile (Empact)\n> - - #13306 `f5a7733` split warnings out of CXXFLAGS (theuni)\n> - - #13385 `7c7508c` Guard against accidental introduction of new Boost dependencies (practicalswift)\n> - - #13041 `5779dc4` Add linter checking for accidental introduction of locale dependence (practicalswift)\n> - - #13408 `70a03c6` crypto: cleanup sha256 build (theuni)\n> - - #13435 `cf7ca60` When build fails due to lib missing, indicate which one (Empact)\n> - - #13445 `8eb76f3` Reset default -g -O2 flags when enable debug (ken2812221)\n> - - #13465 `81069a7` Avoid concurrency issue when make multiple target (ken2812221)\n> - - #13454 `45c00f8` Make sure `LC_ALL=C` is set in all shell scripts (practicalswift)\n> - - #13480 `31145a3` Avoid copies in range-for loops and add a warning to detect them (theuni)\n> - - #13486 `66e1a08` Move rpc/util.cpp from libbitcoin-util to libbitcoin-server (ken2812221)\n> - - #13580 `40334c7` Detect if char equals `int8_t` (ken2812221)\n> - - #12788 `287e4ed` Tune wildcards for LIBSECP256K1 target (kallewoof)\n> - - #13611 `b55f0c3` bugfix: Use `__cpuid_count` for gnu C to avoid gitian build fail (ken2812221)\n> - - #12971 `a6d14b1` Upgrade Qt to 5.9.6 (TheCharlatan)\n> - - #13543 `6c6a300` Add RISC-V support (laanwj)\n> - - #13177 `dcb154e` GCC-7 and glibc-2.27 back compat code (ken2812221)\n> - - #13659 `90b1c7e` add missing leveldb defines (theuni)\n> - - #13368 `c0f1569` Update gitian-build.sh for docker (achow101)\n> - - #13171 `19d8ca5` Change gitian-descriptors to use bionic instead (ken2812221)\n> - - #13604 `75bea05` Add depends 32-bit arm support for bitcoin-qt (TheCharlatan)\n> - - #13623 `9cdb19f` Migrate gitian-build.sh to python (ken2812221)\n> - - #13689 `8c36432` disable Werror when building zmq (greenaddress)\n> - - #13617 `cf7f9ae` release: Require macos 10.10+ (fanquake)\n> - - #13750 `c883653` use MacOS friendly sed syntax in qt.mk (Sjors)\n> - - #13095 `415f2bf` update `ax_boost_chrono`/`unit_test_framework` (fanquake)\n> - - #13732 `e8ffec6` Fix Qt's rcc determinism (Fuzzbawls)\n> - - #13782 `8284f1d` Fix osslsigncode compile issue in gitian-build (ken2812221)\n> - - #13696 `2ab7208` Add aarch64 qt depends support for cross compiling bitcoin-qt (TheCharlatan)\n> - - #13705 `b413ba0` Add format string linter (practicalswift)\n> - - #14000 `48c8459` fix qt determinism (theuni)\n> - - #14018 `3e4829a` Bugfix: NSIS: Exclude `Makefile*` from docs (luke-jr)\n> - - #12906 `048ac83` Avoid `interface` keyword to fix windows gitian build (ryanofsky)\n> - - #13314 `a9b6957` Fix FreeBSD build by including utilstrencodings.h (laanwj)\n>\n> ### Tests and QA\n> - - #12252 `8d57319` Require all tests to follow naming convention (ajtowns)\n> - - #12295 `935eb8d` Enable flake8 warnings for all currently non-violated rules (practicalswift)\n> - - #11858 `b4d8549` Prepare tests for Windows (MarcoFalke)\n> - - #11771 `2dbc4a4` Change invalidtxrequest to use BitcoinTestFramework (jnewbery)\n> - - #12200 `d09968f` Bind functional test nodes to 127.0.0.1 (Sjors)\n> - - #12425 `26dc2da` Add some script tests (richardkiss)\n> - - #12455 `23481fa` Fix bip68 sequence test to reflect updated rpc error message (Empact)\n> - - #12477 `acd1e61` Plug memory leaks and stack-use-after-scope (MarcoFalke)\n> - - #12443 `07090c5` Move common args to bitcoin.conf (MarcoFalke)\n> - - #12570 `39dcac2` Add test cases for HexStr (`std::reverse_iterator` and corner cases) (kostaz)\n> - - #12582 `6012f1c` Fix ListCoins test failure due to unset `g_wallet_allow_fallback_fee` (ryanofsky)\n> - - #12516 `7f99964` Avoid unintentional unsigned integer wraparounds in tests (practicalswift)\n> - - #12512 `955fd23` Don't test against the mempool min fee information in mempool_limit.py (Empact)\n> - - #12600 `29088b1` Add a test for large tx output scripts with segwit input (richardkiss)\n> - - #12627 `791c3ea` Fix some tests to work on native windows (MarcoFalke)\n> - - #12405 `0f58d7f` travis: Full clone for git subtree check (MarcoFalke)\n> - - #11772 `0630974` Change invalidblockrequest to use BitcoinTestFramework (jnewbery)\n> - - #12681 `1846296` Fix ComputeTimeSmart test failure with `-DDEBUG_LOCKORDER` (ryanofsky)\n> - - #12682 `9f04c8e` travis: Clone depth 1 unless `$check_doc` (MarcoFalke)\n> - - #12710 `00d1680` Append scripts to new `test_list` array to fix bad assignment (jeffrade)\n> - - #12720 `872c921` Avoiding 'file' function name from python2 (jeffrade)\n> - - #12728 `4ba3d4f` rename TestNode to TestP2PConn in tests (jnewbery)\n> - - #12746 `2405ce1` Remove unused argument `max_invalid` from `check_estimates(\u2026)` (practicalswift)\n> - - #12718 `185d484` Require exact match in `assert_start_raises_init_eror` (jnewbery, MarcoFalke)\n> - - #12076 `6d36f59` Use node.datadir instead of tmpdir in test framework (MarcoFalke)\n> - - #12772 `b43aba8` ci: Bump travis timeout for make check to 50m (jnewbery)\n> - - #12806 `18606eb` Fix function names in `feature_blocksdir` (MarcoFalke)\n> - - #12811 `0d8fc8d` Make summary row bold-red if any test failed and show failed tests at end of table (laanwj)\n> - - #12790 `490644d` Use blockmaxweight where tests previously had blockmaxsize (conscott)\n> - - #11773 `f0f9732` Change `feature_block.py` to use BitcoinTestFramework (jnewbery)\n> - - #12839 `40f4baf` Remove travis checkout depth (laanwj)\n> - - #11817 `2a09a78` Change `feature_csv_activation.py` to use BitcoinTestFramework (jnewbery)\n> - - #12284 `fa5825d` Remove assigned but never used local variables. Enable Travis checking for unused local variables (practicalswift)\n> - - #12719 `9beded5` Add note about test suite naming convention in developer-notes.md (practicalswift)\n> - - #12861 `c564424` Stop `feature_block.py` from blowing up memory (jnewbery)\n> - - #12851 `648252e` travis: Run verify-commits only on cron jobs (MarcoFalke)\n> - - #12853 `2106c4c` Match full plain text by default (MarcoFalke)\n> - - #11818 `9a2db3b` I accidentally (deliberately) killed it (the ComparisonTestFramework) (jnewbery)\n> - - #12766 `69310a3` Tidy up REST interface functional tests (romanz)\n> - - #12849 `83c7533` Add logging in loops in `p2p_sendhears.py` (ccdle12)\n> - - #12895 `d6f10b2` Add note about test suite name uniqueness requirement to developer notes (practicalswift)\n> - - #12856 `27278df` Add Metaclass for BitcoinTestFramework (WillAyd)\n> - - #12918 `6fc5a05` Assert on correct variable (kallewoof)\n> - - #11878 `a04440f` Add Travis check for duplicate includes (practicalswift)\n> - - #12917 `cf8073f` Windows fixups for functional tests (MarcoFalke)\n> - - #12926 `dd1ca9e` Run unit tests in parallel (sipa)\n> - - #12920 `b1fdfc1` Fix sign for expected values (kallewoof)\n> - - #12947 `979f598` Wallet hd functional test speedup and clarification (instagibbs)\n> - - #12993 `0d69921` Remove compatibility code not needed now when we're on Python 3 (practicalswift)\n> - - #12996 `6a278e0` Remove redundant bytes(\u2026) calls (practicalswift)\n> - - #12949 `6b46288` Avoid copies of CTransaction (MarcoFalke)\n> - - #13007 `0d12570` Fix dangling wallet pointer in vpwallets (promag)\n> - - #13048 `cac6d11` Fix `feature_block` flakiness (jnewbery)\n> - - #12510 `d5b2e98` Add `rpc_bind` test to default-run tests (laanwj)\n> - - #13022 `896a9d0` Attach node index to `test_node` AssertionError and print messages (jamesob)\n> - - #13024 `018c7e5` Add rpcauth pair that generated by rpcauth.py (ken2812221)\n> - - #13013 `a0079d4` bench: Amend `mempool_eviction` test for witness txs (MarcoFalke)\n> - - #13051 `e074097` Normalize executable location (MarcoFalke)\n> - - #13056 `106d929` Make rpcauth.py testable and add unit tests (nixbox)\n> - - #13073 `a785bc3` add rpcauth-test to `AC_CONFIG_LINKS` to fix out-of-tree make check (laanwj)\n> - - #12830 `25ad2f7` Clarify address book error messages, add tests (jamesob)\n> - - #13082 `24106a8` don't test against min relay fee information in `mining_prioritisetransaction.py` (kristapsk)\n> - - #13003 `8d045a0` Add test for orphan handling (MarcoFalke)\n> - - #13105 `9e9b48d` Add --failfast option to functional test runner (jamesob)\n> - - #13130 `3186ad4` Fix race in `rpc_deprecated.py` (jnewbery)\n> - - #13136 `baf6b4e` Fix flake8 warnings in several wallet functional tests (jnewbery)\n> - - #13094 `bf9b03d` Add test for 64-bit Windows PE, modify 32-bit test results (ken2812221)\n> - - #13183 `9458b05` travis: New travis job for `check_docs` steps (glaksmono)\n> - - #12265 `1834d4d` fundrawtransaction: lock watch-only shared address (kallewoof)\n> - - #13188 `4a50ec0` Remove unused option --srcdir (MarcoFalke)\n> - - #12755 `612ba35` Better stderr testing (jnewbery)\n> - - #13198 `196c5a9` Avoid printing to console during cache creation (sdaftuar)\n> - - #13075 `cb9bbf7` Remove 'account' API from wallet functional tests (jnewbery)\n> - - #13221 `ffa86af` travis: Rename the build stage `check_doc` to `lint` (practicalswift)\n> - - #13205 `3cbd25f` Remove spurious error log in `p2p_segwit.py` (jnewbery)\n> - - #13291 `536120e` Don't include torcontrol.cpp into the test file (Empact)\n> - - #13281 `2ac6315` Move linters to test/lint, add readme (MarcoFalke)\n> - - #13215 `f8a29ca` travis: Build tests on ubuntu 18.04 with docker (ken2812221)\n> - - #13349 `24f7011` bench: Don't return a bool from main (laanwj)\n> - - #13347 `87a9d03` travis: Skip cache for lint stage (MarcoFalke)\n> - - #13355 `0b1c0c4` Fix \"gmake check\" under OpenBSD 6.3 (probably `*BSD`): Avoid using GNU grep specific regexp handling (practicalswift)\n> - - #13353 `d4f6dac` Fixup setting of PATH env var (MarcoFalke)\n> - - #13352 `e24bf1c` Avoid checking reject code for now (MarcoFalke)\n> - - #13383 `2722a1f` bench: Use non-throwing parsedouble(\u2026) instead of throwing boost::lexical_cast<double>(\u2026) (practicalswift)\n> - - #13367 `264efdc` Increase includeconf test coverage (MarcoFalke)\n> - - #13404 `3d3d8ae` speed up of `tx_validationcache_tests` by reusing of CTransaction (lucash-dev)\n> - - #13421 `531a033` Remove `portseed_offset` from test runner (MarcoFalke)\n> - - #13440 `5315660` Log as utf-8 (MarcoFalke)\n> - - #13066 `fa4b906` Migrate verify-commits script to python, run in travis (ken2812221)\n> - - #13447 `4b1edd3` travis: Increase `travis_wait` time while verifying commits (ken2812221)\n> - - #13350 `f532d52` Add logging to provide anchor points when debugging p2p_sendheaders (lmanners)\n> - - #13406 `4382f19` travis: Change mac goal to all deploy (ken2812221)\n> - - #13457 `b222138` Drop variadic macro (MarcoFalke)\n> - - #13512 `3a45493` mininode: Expose connection state through `is_connected` (MarcoFalke)\n> - - #13496 `9ab4c2a` Harden lint-filenames.sh (wodry)\n> - - #13219 `08516e0` bench: Add block assemble benchmark (MarcoFalke)\n> - - #13530 `b1dc39d` bench: Add missing pow.h header (laanwj)\n> - - #12686 `2643fa5` Add -ftrapv to CFLAGS and CXXFLAGS when --enable-debug is used. Enable -ftrapv in Travis (practicalswift)\n> - - #12882 `d96bdd7` Make `test_bitcoin` pass under ThreadSanitzer (clang). Fix lock-order-inversion (potential deadlock) (practicalswift)\n> - - #13535 `2328039` `wallet_basic`: Specify minimum required amount for listunspent (MarcoFalke)\n> - - #13551 `c93c360` Fix incorrect documentation for test case `cuckoocache_hit_rate_ok` (practicalswift)\n> - - #13563 `b330f3f` bench: Simplify coinselection (promag)\n> - - #13517 `a6ed99a` Remove need to handle the network thread in tests (MarcoFalke)\n> - - #13522 `686e97a` Fix `p2p_sendheaders` race (jnewbery)\n> - - #13467 `3dc2dcf` Make `p2p_segwit` easier to debug (jnewbery)\n> - - #13598 `0212187` bench: Fix incorrect behaviour in prevector.cpp (AkioNak)\n> - - #13565 `b05ded1` Fix AreInputsStandard test to reference the proper scriptPubKey (Empact)\n> - - #13145 `d3dae3d` Use common getPath method to create temp directory in tests (winder)\n> - - #13645 `2ea7eb6` skip `rpc_zmq` functional test as necessary (jamesob)\n> - - #13626 `8f1106d` Fix some TODOs in `p2p_segwit` (MarcoFalke)\n> - - #13138 `8803c91` Remove accounts from `wallet_importprunedfunds.py` (jnewbery)\n> - - #13663 `cbc9b50` Avoid read/write to default datadir (MarcoFalke)\n> - - #13682 `f8a32a3` bench: Remove unused variable (practicalswift)\n> - - #13638 `6fcdb5e` Use `MAX_SCRIPT_ELEMENT_SIZE` from script.py (domob1812)\n> - - #13687 `9d26b69` travis: Check that ~/.bitcoin is never created (MarcoFalke)\n> - - #13715 `e1260a7` fixes mininode's P2PConnection sending messages on closing transport (marcoagner)\n> - - #13729 `aa9429a` travis: Avoid unnecessarily setting env variables on the lint build (Empact)\n> - - #13747 `ab28b5b` Skip P2PConnection's `is_closing()` check when not available (domob1812)\n> - - #13650 `7a9bca6` travis: Don't store debug info if --enable-debug is set (ken2812221)\n> - - #13711 `f98d1e0` bench: Add benchmark for unserialize prevector (AkioNak)\n> - - #13771 `365384f` travis: Retry to fetch docker image (MarcoFalke)\n> - - #13806 `4d550ff` Fix `bench/block_assemble` assert failure (jamesob)\n> - - #13779 `d25079a` travis: Improve readability of travis.yml and log outputs (scravy)\n> - - #13822 `0fb9c87` bench: Make coinselection output groups pass eligibility filter (achow101)\n> - - #13247 `e83d82a` Add tests to SingleThreadedSchedulerClient() and document the memory model (skeees)\n> - - #13811 `660abc1` travis: Run `bench_bitcoin` once (MarcoFalke)\n> - - #13837 `990e182` Extract `rpc_timewait` as test param (MarcoFalke)\n> - - #13851 `9c4324d` fix locale for lint-shell (scravy)\n> - - #13823 `489b51b` quote path in authproxy for external multiwallets (MarcoFalke)\n> - - #13849 `2b67354` travis: Use only travis jobs: instead of mix of jobs+matrix (scravy)\n> - - #13859 `2384323` Add emojis to `test_runner` path and wallet filename (MarcoFalke)\n> - - #13916 `8ac7125` `wait_for_verack` by default (MarcoFalke)\n> - - #13669 `f66e1c7` Cleanup `create_transaction` implementations (conscott)\n> - - #13924 `09ada21` Simplify comparison in `rpc_blockchain.py` (domob1812)\n> - - #13913 `a08533c` Remove redundant checkmempool/checkblockindex `extra_args` (MarcoFalke)\n> - - #13915 `a04888a` Add test for max number of entries in locator (MarcoFalke)\n> - - #13867 `1b04b55` Make extended tests pass on native Windows (MarcoFalke)\n> - - #13944 `0df7a6c` Port usage of deprecated optparse module to argparse module (Kvaciral)\n> - - #13928 `b8eb0df` blocktools enforce named args for amount (MarcoFalke)\n> - - #13054 `bffb35f` Enable automatic detection of undefined names in Python tests scripts. Remove wildcard imports (practicalswift)\n> - - #14069 `cf3d7f9` Use assert not `BOOST_CHECK_*` from multithreaded tests (skeees)\n> - - #14071 `fab0fbe` Stop txindex thread before calling destructor (MarcoFalke)\n>\n> ### Miscellaneous\n> - - #11909 `8897135` contrib: Replace developer keys with list of pgp fingerprints (MarcoFalke)\n> - - #12394 `fe53d5f` gitian-builder.sh: fix --setup doc, since lxc is default (Sjors)\n> - - #12468 `294a766` Add missing newline in init.cpp log message (Aesti)\n> - - #12308 `dcfe218` contrib: Add support for out-of-tree builds in gen-manpages.sh (laanwj)\n> - - #12451 `aae64a2` Bump leveldb subtree (MarcoFalke)\n> - - #12527 `d77b4a7` gitian-build.sh: fix signProg being recognized as two parameters (ken2812221)\n> - - #12588 `d74b01d` utils: Remove deprecated pyzmq call from python zmq example (kosciej)\n> - - #10271 `bc67982` Use `std::thread::hardware_concurrency`, instead of Boost, to determine available cores (fanquake)\n> - - #12097 `14475e2` scripts: Lint-whitespace: use perl instead of grep -p (Sjors)\n> - - #12098 `17c44b2` scripts: Lint-whitespace: add param to check last n commits (Sjors)\n> - - #11900 `842f61a` script: Simplify checkminimalpush checks, add safety assert (instagibbs)\n> - - #12567 `bb98aec` util: Print timestamp strings in logs using iso 8601 formatting (practicalswift)\n> - - #12572 `d8d9162` script: Lint-whitespace: find errors more easily (AkioNak)\n> - - #10694 `ae5bcc7` Remove redundant code in MutateTxSign(CMutableTransaction&, const std::string&) (practicalswift)\n> - - #12659 `3d16f58` Improve Fatal LevelDB Log Messages (eklitzke)\n> - - #12643 `0f0229d` util: Remove unused `sync_chain` (MarcoFalke)\n> - - #12102 `7fb8fb4` Apply hardening measures in bitcoind systemd service file (Flowdalic)\n> - - #12652 `55f490a` bitcoin-cli: Provide a better error message when bitcoind is not running (practicalswift)\n> - - #12630 `c290508` Provide useful error message if datadir is not writable (murrayn)\n> - - #11881 `624bee9` Remove Python2 support (jnewbery)\n> - - #12821 `082e26c` contrib: Remove unused import string (MarcoFalke)\n> - - #12829 `252c1b0` Python3 fixup (jnewbery)\n> - - #12822 `ff48f62` Revert 7deba93bdc76616011a9f493cbc203d60084416f and fix expired-key-sigs properly (TheBlueMatt)\n> - - #12820 `5e53b80` contrib: Fix check-doc script regexes (MarcoFalke)\n> - - #12713 `4490871` Track negated options in the option parser (eklitzke)\n> - - #12708 `b2e5fe8` Make verify-commits.sh test that merges are clean (sipa)\n> - - #12891 `3190785` logging: Add lint-logs.sh to check for newline termination (jnewbery)\n> - - #12923 `a7cbe38` util: Pass `pthread_self()` to `pthread_setschedparam` instead of 0 (laanwj)\n> - - #12871 `fb17fae` Add shell script linting: Check for shellcheck warnings in shell scripts (practicalswift)\n> - - #12970 `5df84de` logging: Bypass timestamp formatting when not logging (theuni)\n> - - #12987 `fe8fa22` tests/tools: Enable additional Python flake8 rules for automatic linting via Travis (practicalswift)\n> - - #12972 `0782508` Add python3 script shebang lint (ken2812221)\n> - - #13004 `58bbc55` Print to console by default when not run with -daemon (practicalswift)\n> - - #13039 `8b4081a` Add logging and error handling for file syncing (laanwj)\n> - - #13020 `4741ca5` Consistently log CValidationState on call failure (Empact)\n> - - #13031 `826acc9` Fix for utiltime to compile with msvc (sipsorcery)\n> - - #13119 `81743b5` Remove script to clean up datadirs (MarcoFalke)\n> - - #12954 `5a66642` util: Refactor logging code into a global object (jimpo)\n> - - #12769 `35eb9d6` Add systemd service to bitcoind in debian package (ghost)\n> - - #13146 `0bc980b` rpcauth: Make it possible to provide a custom password (laanwj)\n> - - #13148 `b62b437` logging: Fix potential use-after-free in logprintstr(\u2026) (practicalswift)\n> - - #13214 `0612d96` Enable Travis checking for two Python linting rules we are currently not violating (practicalswift)\n> - - #13197 `6826989` util: Warn about ignored recursive -includeconf calls (kallewoof)\n> - - #13176 `d9ebb63` Improve CRollingBloomFilter performance: replace modulus with FastMod (martinus)\n> - - #13228 `d792e47` Add script to detect circular dependencies between source modules (sipa)\n> - - #13320 `e08c130` Ensure gitian-build.sh uses bash (jhfrontz)\n> - - #13301 `e4082d5` lint: Add linter to error on `#include <*.cpp>` (Empact)\n> - - #13374 `56f6936` utils and libraries: checking for bitcoin address in translations (kaplanmaxe)\n> - - #13230 `7c32b41` Simplify include analysis by enforcing the developer guide's include syntax (practicalswift)\n> - - #13450 `32bf4c6` Add linter: Enforce the source code file naming convention described in the developer notes (practicalswift)\n> - - #13479 `fa2ea37` contrib: Fix cve-2018-12356 by hardening the regex (loganaden)\n> - - #13448 `a90ca40` Add linter: Make sure we explicitly open all text files using UTF-8 encoding in Python (practicalswift)\n> - - #13494 `d67eff8` Follow-up to #13454: Fix broken build by exporting `LC_ALL=C` (practicalswift)\n> - - #13510 `03f3925` Scripts and tools: Obsolete #!/bin/bash shebang (DesWurstes)\n> - - #13577 `c9eb8d1` logging: Avoid nstart may be used uninitialized in appinitmain warning (mruddy)\n> - - #13603 `453ae5e` bitcoin-tx: Stricter check for valid integers (domob1812)\n> - - #13118 `c05c93c` RPCAuth Detection in Logs (Linrono)\n> - - #13647 `4027ec1` Scripts and tools: Fix `BIND_NOW` check in security-check.py (conradoplg)\n> - - #13692 `f5d166a` contrib: Clone core repo in gitian-build (MarcoFalke)\n> - - #13699 `4c6d1b9` contrib: Correct version check (kallewoof)\n> - - #13695 `dcc0cff` lint: Add linter for circular dependencies (Empact)\n> - - #13733 `0d1ebf4` utils: Refactor argsmanager a little (AtsukiTak)\n> - - #13714 `29b4ee6` contrib: Add lxc network setup for bionic host (ken2812221)\n> - - #13764 `f8685f4` contrib: Fix test-security-check fail in ubuntu 18.04 (ken2812221)\n> - - #13809 `77168f7` contrib: Remove debian and rpm subfolder (MarcoFalke)\n> - - #13799 `230652c` Ignore unknown config file options; warn instead of error (sipa)\n> - - #13894 `df9f712` shutdown: Stop threads before resetting ptrs (MarcoFalke)\n> - - #13925 `71dec5c` Merge leveldb subtree (MarcoFalke)\n> - - #13939 `ef86f26` lint: Make format string linter understand basic template parameter syntax (practicalswift)\n> - - #14105 `eb202ea` util: Report parse errors in configuration file (laanwj)\n> - - #12604 `9903537` Add DynamicMemoryUsage() to CDBWrapper to estimate LevelDB memory use (eklitzke)\n> - - #12495 `047865e` Increase LevelDB `max_open_files` (eklitzke)\n> - - #12784 `e80716d` Fix bug in memory usage calculation (unintended integer division) (practicalswift)\n> - - #12618 `becd8dd` Set `SCHED_BATCH` priority on the loadblk thread (eklitzke)\n> - - #12854 `5ca1509` Add P2P, Network, and Qt categories to the desktop icon (luke-jr)\n> - - #11862 `4366f61` Network specific conf sections (ajtowns)\n> - - #13441 `4a7e64f` Prevent shared conf files from failing with different available options in different binaries (achow101)\n> - - #13471 `5eca4e8` For AVX2 code, also check for AVX, XSAVE, and OS support (sipa)\n> - - #13503 `c655b2c` Document FreeBSD quirk. Fix FreeBSD build: Use std::min<int>(\u2026) to allow for compilation under certain FreeBSD versions (practicalswift)\n> - - #13725 `07ce278` Fix bitcoin-cli --version (Empact)\n>\n> ### Documentation\n> - - #12306 `216f9a4` Improvements to UNIX documentation (axvr)\n> - - #12309 `895fbd7` Explain how to update chainTxData in release process (laanwj)\n> - - #12317 `85123be` Document method for reviewers to verify chainTxData (jnewbery)\n> - - #12331 `d32528e` Properly alphabetize output of CLI --help option (murrayn)\n> - - #12322 `c345148` Remove step making cloned repository world-writable for Windows build (murrayn)\n> - - #12354 `b264528` add gpg key for fivepiece (fivepiece)\n> - - #11761 `89005dd` initial QT documentation (Sjors)\n> - - #12232 `fdc2188` Improve \"Turn Windows Features On or Off\" step (MCFX2)\n> - - #12487 `4528f74` init: Remove translation for `-blockmaxsize` option help (laanwj)\n> - - #12546 `a4a5fc7` Minor improvements to Compatibility Notes (randolf)\n> - - #12434 `21e2670` dev-notes: Members should be initialized (MarcoFalke)\n> - - #12452 `71f56da` clarified systemd installation instructions in init.md for Ubuntu users (DaveFromBinary)\n> - - #12615 `1f93491` allow for SIGNER containing spaces (ken2812221)\n> - - #12603 `85424d7` PeerLogicValidation interface (jamesob)\n> - - #12581 `12ac2f0` Mention configure without wallet in FreeBSD instructions (dbolser)\n> - - #12619 `8a709fb` Give hint about gitian not able to download (kallewoof)\n> - - #12668 `de2fcaa` do update before fetching packages in WSL build guide (nvercamm)\n> - - #12586 `e7721e6` Update osx brew install instruction (fanquake)\n> - - #12760 `7466a26` Improve documentation on standard communication channels (jimpo)\n> - - #12797 `0415b1e` init: Fix help message for checkblockindex (MarcoFalke)\n> - - #12800 `2d97611` Add note about our preference for scoped enumerations (\"enum class\") (practicalswift)\n> - - #12798 `174d016` Refer to witness reserved value as spec. in the BIP (MarcoFalke)\n> - - #12759 `d3908e2` Improve formatting of developer notes (eklitzke)\n> - - #12877 `2b54155` Use bitcoind in Tor documentation (knoxcard)\n> - - #12896 `b15485e` Fix conflicting statements about initialization in developer notes (practicalswift)\n> - - #12850 `319991d` add qrencode to brew install instructions (buddilla)\n> - - #12007 `cd8e45b` Clarify the meaning of fee delta not being a fee rate in prioritisetransaction RPC (honzik666)\n> - - #12927 `06ead15` fixed link, replaced QT with Qt (trulex)\n> - - #12852 `ebd786b` devtools: Setup ots git integration (MarcoFalke)\n> - - #12933 `3cf76c2` Refine header include policy (MarcoFalke)\n> - - #12951 `6df0c6c` Fix comment in FindForkInGlobalIndex (jamesob)\n> - - #12982 `a63b4e3` Fix inconsistent namespace formatting guidelines (ryanofsky)\n> - - #13026 `9b3a67e` Fix include comment in src/interfaces/wallet.h (promag)\n> - - #13012 `d1e3c5e` Add comments for chainparams.h, validation.cpp (jamesob)\n> - - #13064 `569e381` List support for BIP173 in bips.md (sipa)\n> - - #12997 `646b7f6` build-windows: Switch to Artful, since Zesty is EOL (MarcoFalke)\n> - - #12384 `c5f7efe` Add version footnote to tor.md (Willtech)\n> - - #13165 `627c376` Mention good first issue list in CONTRIBUTING.md (fanquake)\n> - - #13295 `fb77310` Update OpenBSD build instructions for OpenBSD 6.3 (practicalswift)\n> - - #13340 `3a8e3f4` remove leftover check-doc documentation (fanquake)\n> - - #13346 `60f0358` update bitcoin-dot-org links in release-process.md (fanquake)\n> - - #13372 `f014933` split FreeBSD build instructions out of build-unix.md (steverusso)\n> - - #13366 `861de3b` Rename \u201cOS X\u201d to the newer \u201cmacOS\u201d convention (giulio92)\n> - - #13369 `f8bcef3` update transifex doc link (mess110)\n> - - #13312 `b22115d` Add a note about the source code filename naming convention (practicalswift)\n> - - #13460 `1939536` Remove note to install all boost dev packages (MarcoFalke)\n> - - #13476 `9501938` Fix incorrect shell quoting in FreeBSD build instructions (murrayn)\n> - - #13402 `43fa355` Document validationinterace callback blocking deadlock potential (TheBlueMatt)\n> - - #13488 `d6cf4bd` Improve readability of \"Squashing commits\" (wodry)\n> - - #13531 `ee02deb` Clarify that mempool txiter is `const_iterator` (MarcoFalke)\n> - - #13418 `01f9098` More precise explanation of parameter onlynet (wodry)\n> - - #13592 `1756cb4` Modify policy to not translate command-line help (ken2812221)\n> - - #13588 `b77c38e` Improve doc of options addnode, connect, seednode (wodry)\n> - - #13614 `17e9106` Update command line help for -printtoconsole and -debuglogfile (satwo, fanquake)\n> - - #13605 `8cc048e` corrected text to reflect new(er) process of specifying fingerprints (jhfrontz)\n> - - #13481 `b641f60` Rewrite some validation docs as lock annotations (MarcoFalke)\n> - - #13680 `30640f8` Remove outdated comment about miner ignoring CPFP (jamesob)\n> - - #13625 `7146672` Add release notes for -printtoconsole and -debuglogfile changes (satwo)\n> - - #13718 `f7f574d` Specify preferred Python string formatting technique (masonicboom)\n> - - #12764 `10b9a81` Remove field in getblocktemplate help that has never been used (conscott)\n> - - #13742 `d2186b3` Adjust bitcoincore.org links (MarcoFalke)\n> - - #13706 `94dd89e` Minor improvements to release-process.md (MitchellCash)\n> - - #13775 `ef4fac0` Remove newlines from error message (practicalswift)\n> - - #13803 `feb7dd9` add note to contributor docs about warranted PR's (kallewoof)\n> - - #13814 `67af7ef` Add BIP174 to list of implemented BIPs (sipa)\n> - - #13835 `c1cba35` Fix memory consistency model in comment (skeees)\n> - - #13824 `aa30e4b` Remove outdated net comment (MarcoFalke)\n> - - #13853 `317477a` correct versions in dependencies.md (fanquake)\n> - - #13872 `37ab117` Reformat -help output for help2man (real-or-random)\n> - - #13717 `8c3c402` Link to python style guidelines from developer notes (masonicboom)\n> - - #13895 `1cd5f2c` fix GetWarnings docs to reflect behavior (Empact)\n> - - #13911 `3e3a50a` Revert translated string change, clarify wallet log messages (PierreRochard)\n> - - #13908 `d6faea4` upgrade rescan time warning from minutes to >1 hour (masonicboom)\n> - - #13905 `73a09b4` fixed bitcoin-cli -help output for help2man (hebasto)\n> - - #14100 `2936dbc` Change documentation for =0 for non-boolean options (laanwj)\n> - - #14096 `465a583` Add reference documentation for descriptors language (sipa)\n> - - #12757 `0c5f67b` Clarify include guard naming convention (practicalswift)\n> - - #13844 `d3325b0` Correct the help output for `-prune` (hebasto)\n>\n> Credits\n> =======\n>\n> Thanks to everyone who directly contributed to this release:\n>\n> - - 251\n> - - 532479301\n> - - Aaron Clauson\n> - - Akio Nakamura\n> - - Akira Takizawa\n> - - Alex Morcos\n> - - Alex Vear\n> - - Alexey Ivanov\n> - - Alin Rus\n> - - Andrea Comand\n> - - Andrew Chow\n> - - Anthony Towns\n> - - AtsukiTak\n> - - Ben Woosley\n> - - Bernhard M. Wiedemann\n> - - Brandon Ruggles\n> - - buddilla\n> - - ccdle12\n> - - Chris Moore\n> - - Chun Kuan Lee\n> - - Clem Taylor\n> - - Conor Scott\n> - - Conrado Gouvea\n> - - Cory Fields\n> - - Cristian Mircea Messel\n> - - ctp-tsteenholdt\n> - - Damian Williamson\n> - - Dan Bolser\n> - - Daniel Kraft\n> - - Darko Jankovi\u0107\n> - - DaveFromBinary\n> - - David A. Harding\n> - - DesWurstes\n> - - Dimitris Apostolou\n> - - donaloconnor\n> - - Douglas Roark\n> - - DrahtBot\n> - - Drew Rasmussen\n> - - e0\n> - - Ernest Hemingway\n> - - Ethan Heilman\n> - - Evan Klitzke\n> - - fanquake\n> - - Felix Wolfsteller\n> - - fivepiece\n> - - Florian Schmaus\n> - - Fuzzbawls\n> - - Gabriel Davidian\n> - - Giulio Lombardo\n> - - Gleb\n> - - Grady Laksmono\n> - - GreatSock\n> - - Gregory Maxwell\n> - - Gregory Sanders\n> - - Hennadii Stepanov\n> - - Henrik Jonsson\n> - - Indospace.io\n> - - James O'Beirne\n> - - Jan \u010capek\n> - - Jeff Frontz\n> - - Jeff Rade\n> - - Jeremy Rubin\n> - - JeremyRand\n> - - Jesse Cohen\n> - - Jim Posen\n> - - joemphilips\n> - - John Bampton\n> - - John Newbery\n> - - johnlow95\n> - - Johnson Lau\n> - - Jonas Nick\n> - - Jonas Schnelli\n> - - Jo\u00e3o Barbosa\n> - - Jorge Tim\u00f3n\n> - - Josh Hartshorn\n> - - Julian Fleischer\n> - - kallewoof\n> - - Karel Bilek\n> - - Karl-Johan Alm\n> - - Ken Lee\n> - - Kevin Pan\n> - - Kosta Zertsekel\n> - - Kristaps Kaupe\n> - - Kvaciral\n> - - Lawrence Nahum\n> - - Linrono\n> - - lmanners\n> - - Loganaden Velvindron\n> - - Lowell Manners\n> - - lucash.dev at gmail.com\n> - - Luke Dashjr\n> - - lutangar\n> - - Marcin Jachymiak\n> - - marcoagner\n> - - MarcoFalke\n> - - Mark Erhardt\n> - - Mark Friedenbach\n> - - Martin Ankerl\n> - - Mason Simon\n> - - Matt Corallo\n> - - Matteo Sumberaz\n> - - Max Kaplan\n> - - MeshCollider\n> - - Micha\u0142 Zabielski\n> - - Mitchell Cash\n> - - mruddy\n> - - mryandao\n> - - murrayn\n> - - Nick Vercammen\n> - - Nicolas Dorier\n> - - Nikolay Mitev\n> - - okayplanet\n> - - Pierre Rochard\n> - - Pieter Wuille\n> - - practicalswift\n> - - Qasim Javed\n> - - Randolf Richardson\n> - - Richard Kiss\n> - - Roman Zeyde\n> - - Russell Yanofsky\n> - - Samuel B. Atwood\n> - - Sebastian Kung\n> - - Sjors Provoost\n> - - Steve Lee\n> - - steverusso\n> - - Suhas Daftuar\n> - - Tamas Blummer\n> - - TheCharlatan\n> - - Thomas Kerin\n> - - Thomas Snider\n> - - Tim Ruffing\n> - - Varunram\n> - - Vasil Dimov\n> - - Will Ayd\n> - - William Robinson\n> - - winder\n> - - Wladimir J. van der Laan\n> - - wodry\n>\n> And to those that reported security issues:\n>\n> - - awemany (for CVE-2018-17144, previously credited as \"anonymous reporter\")\n>\n> As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n> -----BEGIN PGP SIGNATURE-----\n>\n> iQEzBAEBCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlu0mOwACgkQHkrtYphs\n> 0l16Hwf/ZdGp2MlqTTSNLrFqXJY+8oV2wcSSqw2A6+9TSPFwnycTsQjr1yCZ3BLq\n> ANyfVex2nivHgGrNsX4m28yemG8QEeoS/u8sUcRMgGz+oaN/0h7kVy2xU/lG6s9o\n> qjO5NBT0ug0iOpkVnVhouNK5W50+qfTH8tSYyzr3ywtCLmQ8TZtfa/7jti0pKXIY\n> DVtpmSbfjTsn0vBMHlQMPgf1Qw7Tr25klzP34Hp3YLEjQ+HlUZqm602t2GqgNgC4\n> rwfHkE3erAJg+i5IsYgq8F4kJIcAMt3T+EZs21+VmcK5v6v4+G4w4K99VyyJlm/u\n> hvjEe4Tzp0p5YIcXvnEJkkRc3X4xDg==\n> =OmK+\n> -----END PGP SIGNATURE-----\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.17.0 released",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jorge Tim\u00f3n",
                "Wladimir J. van der Laan"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 145451
        }
    },
    {
        "title": "[bitcoin-dev] MultiSig request URI proposal",
        "thread_messages": [
            {
                "author": "\u304a\u306e\u304b\u3061\u304a",
                "date": "2018-10-04T14:03:37",
                "message_text_only": "Hi.\n\nI have an idea that subject.\n\nThere are already BIP 21.\nBut Multisig request URI is non exist.\n\nMy idea is below:\n\nbitcoin-sigreq://{{rawtx}}?{{param}}\n\nrawtx: raw transaction (encoded by base64)\nparam:\n- pubkey={{public key for sign key pair}}\n- hd_wallet_position={{path for HD wallet position}}\n\nThis URI scheme is used for multisig request from website to user's local\nwallet.\n\nHow do you think ?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181004/dd1ab8d6/attachment.html>"
            },
            {
                "author": "James MacWhyte",
                "date": "2018-10-08T23:42:57",
                "message_text_only": "Hello!\n\nA URI is useful as a standard for one-way communication, but on-chain\nmultisig requires many steps. multiple parties need to provide signatures,\nand one party needs to aggregate all the signatures and publish the\ntransaction. This URI scheme would allow one to pass along a raw\ntransaction in one direction, but once the signer has signed the\ntransaction, what are they supposed to do with it? You might be thinking\nyou could include a callback URL, like BIP72 does, so the signer can pass\nthe signed transaction back to the organizer. However, BIP72 was created as\na backwards-compatible extension to BIP70, which was designed for one-way\ncommunication. Since there is no way to be backwards compatible here, there\nis no need to limit yourself to the URI system. Instead of creating a new\nURI and using it for something it is not suited for, it would be better (in\nmy opinion) to find a different method that is better suited for two-way\ncommunication.\n\nOn Thu, Oct 4, 2018 at 3:52 PM \u304a\u306e\u304b\u3061\u304a via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi.\n>\n> I have an idea that subject.\n>\n> There are already BIP 21.\n> But Multisig request URI is non exist.\n>\n> My idea is below:\n>\n> bitcoin-sigreq://{{rawtx}}?{{param}}\n>\n> rawtx: raw transaction (encoded by base64)\n> param:\n> - pubkey={{public key for sign key pair}}\n> - hd_wallet_position={{path for HD wallet position}}\n>\n> This URI scheme is used for multisig request from website to user's local\n> wallet.\n>\n> How do you think ?\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181008/2520c954/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "MultiSig request URI proposal",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "\u304a\u306e\u304b\u3061\u304a",
                "James MacWhyte"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2464
        }
    },
    {
        "title": "[bitcoin-dev] [BIP Proposal] Nym Enrolment Transaction Template",
        "thread_messages": [
            {
                "author": "\u0412\u0435\u043b\u0435\u0441\u043b\u0430\u0432",
                "date": "2018-10-07T03:30:59",
                "message_text_only": "Hello list,\n\nI would like to propose a draft BIP that takes the next available transaction version number and defines a new transaction template. This proposal does not have any consensus changes, and is purely for the application layer of Bitcoin. The new transaction template defines a special transaction structure that can be used as a cryptographic pseudonym.\n\nI hope the community will find this proposal useful and will find time to give it careful review.\n\nHere is the first BIP within our project\nhttps://github.com/veleslavs/bips/blob/bip_nym_tx/bip-nym_tx.mediawiki\n\nI would like to thank the entire team that has supported me in creating this proposal.\n\n\u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438,\n\u0412\u0435\u043b\u0435\u0441\u043b\u0430\u0432\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181007/5ccf84ca/attachment.html>"
            },
            {
                "author": "Kalle Rosenbaum",
                "date": "2018-10-08T18:59:00",
                "message_text_only": "Hi \u0412\u0435\u043b\u0435\u0441\u043b\u0430\u0432,\n\nI won't comment on the usability of/need for this system, but I have a few\nrandom comments and questions:\n\nWhy demand exactly one input? This will probably cause problems for wallets\nwith many small value UTXOs and no big.\n\nWhy demand exactly type p2wpkh on input? Why limit at all?\n\n32-byte-nym_public_key is actually 33 bytes, no? Compressed pubkeys are 33\nbytes.\n\nWhy verify \"SIZE 32 EQUALVERIFY\" on output 2? It puts a ceiling on the\nentropy, but no floor, so it seems useless.\n\nWhy require segwit version 0 change output? This seems like an unnecessary\nlimitation.\n\nIt's not clear to me what's IsStandard rules and what's nym protocol rules\nin the specification section. I interpret the specification to specify\nIsStandard rules, but the section also mentions stuff not relevant to that,\nfor example how the nym signature is constructed and what the opreturn data\nconsists of. You should make the distinction more clear.\n\nI couldn't find info on what 1-byte-nym_version and 1-byte-nym_use are and\nhow they are used. But it might not belong in the BIP if it only should\ndescribe IsStandard policies?\n\nRegards,\nKalle\n\nSent from my Sinclair ZX81\n\nDen s\u00f6n 7 okt. 2018 05:57\u0412\u0435\u043b\u0435\u0441\u043b\u0430\u0432 via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> skrev:\n\n> Hello list,\n>\n> I would like to propose a draft BIP that takes the next available\n> transaction version number and defines a new transaction template. This\n> proposal does not have any consensus changes, and is purely for the\n> application layer of Bitcoin. The new transaction template defines a\n> special transaction structure that can be used as a cryptographic pseudonym.\n>\n> I hope the community will find this proposal useful and will find time to\n> give it careful review.\n>\n> Here is the first BIP within our project\n> https://github.com/veleslavs/bips/blob/bip_nym_tx/bip-nym_tx.mediawiki\n>\n> I would like to thank the entire team that has supported me in creating\n> this proposal.\n>\n> \u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438,\n> \u0412\u0435\u043b\u0435\u0441\u043b\u0430\u0432\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181008/0d51220c/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Nym Enrolment Transaction Template",
            "categories": [
                "bitcoin-dev",
                "BIP Proposal"
            ],
            "authors": [
                "Kalle Rosenbaum",
                "\u0412\u0435\u043b\u0435\u0441\u043b\u0430\u0432"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3255
        }
    },
    {
        "title": "[bitcoin-dev] BIP for segwit compatibility URIs",
        "thread_messages": [
            {
                "author": "Srintuar",
                "date": "2018-10-14T19:52:25",
                "message_text_only": "An extremely simple BIP write-up for a backward compatible URI scheme to\nhelp with segwit adoption by online stores and merchants.\n\n\n\n====\n\nThis BIP is a modification of an earlier [[bip-0021.mediawiki|BIP 0021]] by\nNils Schneider and Matt Corallo\n\n==Abstract==\nThis BIP proposes a URI scheme which allows for backward compatibility with\nnative segwit (bech32) wallets and legcy wallets (base58)\n\n==Motivation==\nThe purpose of this URI scheme is to enable all users to easily make\npayments from any wallet, without allowing backward compatibility to be a\nbarrier to segwit adoption. This BIP allows a merchant to preferentially\nreceive payments to a bech32 address, while gracefully allowing older\nclients to make base58 encoded payments.\n\n==Specification==\n\n=== Query Keys ===\n\n*addr: an alternative bitcoin destination which is preferred over the\n\"bitcoinaddress\" field of the url\n\n== Appendix ==\n\n=== Simpler syntax ===\n\n <nowiki>bitcoin:<address>[?amount=<amount>][?label=<label>][?message=<message>][?addr=<bech32address>]</nowiki>\n\n=== Examples ===\n\nJust the address:\n bitcoin:3BnsWZiTdYVrqiPh2RP3q9Y3ZqvhbCN2it?addr=bc1q5u92yq20hss4rc99mfu23h4dxkxn4uuyqd5dzy&amount=50&label=Luke-Jr&message=Donation%20for%20project%20xyz\n\n\n== Reference Implementations ==\n=== Bitcoin clients ===\n\n* none yet\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181014/3f3fe97c/attachment.html>"
            },
            {
                "author": "Clark Moody",
                "date": "2018-10-18T14:20:45",
                "message_text_only": "Since we don't know what sort of address changes will happen later on, you\ncould make this future-proof by passing a list of addresses to `addr`.\n\nThe syntax is\n\nbitcoin:<address>[?addr=<address>[,<address>[,<address>]]]\n\nThe addresses passed as a comma-separated list to the `addr` parameter are\nin descending order of preference, with highest first. A consumer of this\nURI should attempt to understand each address in the list before falling\nback to the next address and finally to the base address after `bitcoin:`.\n\nExample:\n\nbitcoin:3xBase58compatibleAddress?addr=fancyFutureEncoding0x01,bech32address1qx01\n\nThe spending wallet would attempt to spend to \"fancyFutureEncoding0x01\"\nthen to \"bech32address1qx01\" and finally to \"3xBase58compatibleAddress\".\n\nThanks,\n\n-Clark\n\n\nOn Sun, Oct 14, 2018 at 3:14 PM Srintuar via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> An extremely simple BIP write-up for a backward compatible URI scheme to\n> help with segwit adoption by online stores and merchants.\n>\n>\n>\n> ====\n>\n> This BIP is a modification of an earlier [[bip-0021.mediawiki|BIP 0021]]\n> by Nils Schneider and Matt Corallo\n>\n> ==Abstract==\n> This BIP proposes a URI scheme which allows for backward compatibility\n> with native segwit (bech32) wallets and legcy wallets (base58)\n>\n> ==Motivation==\n> The purpose of this URI scheme is to enable all users to easily make\n> payments from any wallet, without allowing backward compatibility to be a\n> barrier to segwit adoption. This BIP allows a merchant to preferentially\n> receive payments to a bech32 address, while gracefully allowing older\n> clients to make base58 encoded payments.\n>\n> ==Specification==\n>\n> === Query Keys ===\n>\n> *addr: an alternative bitcoin destination which is preferred over the\n> \"bitcoinaddress\" field of the url\n>\n> == Appendix ==\n>\n> === Simpler syntax ===\n>\n>\n>  <nowiki>bitcoin:<address>[?amount=<amount>][?label=<label>][?message=<message>][?addr=<bech32address>]</nowiki>\n>\n> === Examples ===\n>\n> Just the address:\n>\n>  bitcoin:3BnsWZiTdYVrqiPh2RP3q9Y3ZqvhbCN2it?addr=bc1q5u92yq20hss4rc99mfu23h4dxkxn4uuyqd5dzy&amount=50&label=Luke-Jr&message=Donation%20for%20project%20xyz\n>\n>\n> == Reference Implementations ==\n> === Bitcoin clients ===\n>\n> * none yet\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181018/94b3ba54/attachment.html>"
            },
            {
                "author": "vv01f",
                "date": "2018-10-18T16:52:49",
                "message_text_only": "I already pointed out a while ago that the separator could be the & and\nthe returning value is either an address or an array of addresses.\nSo no comma or other delimiter needed.\nalso I would suggest to call the parameter `address` and not a shortcut\nfor it as we are used to `message` and `amount` spelled out as well.\n\nOn 18.10.2018 16:20, Clark Moody via bitcoin-dev wrote:\n> Since we don't know what sort of address changes will happen later on, you\n> could make this future-proof by passing a list of addresses to `addr`.\n> \n> The syntax is\n> \n> bitcoin:<address>[?addr=<address>[,<address>[,<address>]]]\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 899 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181018/088c2fc5/attachment.sig>"
            },
            {
                "author": "Clark Moody",
                "date": "2018-10-18T22:27:41",
                "message_text_only": "I agree with spelling out the `address` field.\n\nAs for \"value is either an address or an array of addresses\", there is no\nstandard for specifying an array in a URI, and processing different\nquerystring schemes is application-specific. (see\nhttps://stackoverflow.com/a/9547490)\n\nSince those app-specific methods don't necessarily preserve order, which is\nimportant here, the most compatible fallback is a delimiter-separated list\nunder one parameter. Most languages have library functions for splitting\nstrings on commas.\n\n\n-Clark\n\n\nOn Thu, Oct 18, 2018 at 5:13 PM vv01f via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I already pointed out a while ago that the separator could be the & and\n> the returning value is either an address or an array of addresses.\n> So no comma or other delimiter needed.\n> also I would suggest to call the parameter `address` and not a shortcut\n> for it as we are used to `message` and `amount` spelled out as well.\n>\n> On 18.10.2018 16:20, Clark Moody via bitcoin-dev wrote:\n> > Since we don't know what sort of address changes will happen later on,\n> you\n> > could make this future-proof by passing a list of addresses to `addr`.\n> >\n> > The syntax is\n> >\n> > bitcoin:<address>[?addr=<address>[,<address>[,<address>]]]\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181018/829726f5/attachment.html>"
            },
            {
                "author": "Srintuar",
                "date": "2018-10-18T23:58:54",
                "message_text_only": "I was inclined towards the shortest possible encoding, even just a single\nletter \"a\", mainly to reduce the amount of bytes required to form a QR\ncode.That said, \"address\" is more self-explanatory. Perhaps I will include\nsome sample QR code sizes for typical use cases, and see if it stays\nreasonable.\n\nAs multiple keys of the same name would not be supported easily in many\nwallets, a delimited is probably preferable.\n\nI will update the BIP proposal and send it again.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181018/36b03c23/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP for segwit compatibility URIs",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Srintuar",
                "Clark Moody",
                "vv01f"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 7308
        }
    },
    {
        "title": "[bitcoin-dev] Request: OP_CHECKTXOUTSCRIPTHASHVERIFY",
        "thread_messages": [
            {
                "author": "kim juan",
                "date": "2018-10-17T04:26:34",
                "message_text_only": "Discussing the possibility of a new opcode (OP_CHECKTXOUTSCRIPTHASHVERIFY)\nfor the Bitcoin scripting system that allows a transaction output to be\nonly spendable in a predefined manner.\n\n*Brief Description*\n\nBitcoin transactions have a txoutScript (scriptPubKey) field for each\noutput.\ntxoutScriptHash=Hash160(txoutScript)\n\n*Word*: OP_CHECKTXOUTSCRIPTHASHVERIFY\n*Opcode*: 184 (OP_NOP9)\n*Input*: x\n*Output*: x / fail*\n*Description*:\nMarks transaction as invalid if txoutScriptHash is not equal to top stack\nitem and value of txoutScript is not equal to OP_HASH160\nThisRedeemScriptHash OP_EQUAL*.\n\n\n** Not entirely certain here, always have this impression new opcode has to\n\"NOP or fail\" to ensure it can be implemented. As a result, the item may\nalso has to be dropped explicitly.*** So that change can be sent back to\nthe this redeem script. There are challenges to generalize this as a script\nhash cause of some cyclic reference. Not sure if cyclic is the correct\nterm, ie: A = hash (B's hash) and B = hash (A's hash) is impossible.*\n\n*Sample use case*\n\nAcme has an ordinary key pair and a secure key pair. The ordinary key pair\nis assumed to be in a less secure environment.  The private key of the\nsecure key pair will never ever expose itself until the moment it needs to\nrevoke transaction of the ordinary key pair.\n\nredeemScript:\n  IF\n    2 <Acme's pubkey> <securePubkey> 2 CHECKMULTISIG\n  ELSE\n    <txoutScriptHash> CHECKTXOUTSCRIPTHASHVERIFY DROP <Acme's pubkey>\nCHECKSIG\n  ENDIF\n\nThe only ways to spend its outputs from this ThisRedeemScript is to forward\nit to NextRedeemScript. Even if the original key pair is compromised, the\nattacker can only spend it this way and has to publish the transaction.\n\ntx1:\n  scriptSig: <sig> <pubKey> 0\n  scriptPubKey: HASH160 <Hash160(NextRedeemScript)> EQUAL\n\ntx2: //if there is change\n  scriptSig: <sig> <Acme's pubKey>\n  scriptPubKey: HASH160 ThisRedeemScriptHash EQUAL\n\nNextRedeemScript is time locked. Acme is able to monitor for unauthorized\ntransactions and react within the sequence-defined duration. The\ncombination of 2 key pair as one multisig can spend the output immediately\nregardless of the timelock.\n\nNextRedeemScript:\n  IF\n    2 <Acme's pubkey> <securePubkey> 2 CHECKMULTISIG\n  ELSE\n    \"12h\" CHECKSEQUENCEVERIFY DROP <Acme's pubkey> CHECKSIG\n  ENDIF\n\nAfter 12 hours, Acme is can spend the output as normal.\n\ntx:\n  scriptSig: <sig> <pubkey> 0\n  scriptPubKey: DUP HASH160 <recipient's pubkeyHash> EQUALVERIFY CHECKSIG\n\n*Description*\n\nCSV and CTLV already laid the groundwork for retroactive invalidation,\nshowcased in innovative protocols such as HTLC of lightning network.\n\nAs illustrated from the sample use case, there are other classes of\nproblems that may requires retroactive invalidation in different and\nless-interactive way from channels. Most of those problems require a\nprimitive opcode to influence how the output can be spent.\n\nIf the use case works as expected, attacks will be *less* rewarding. There\nare still other attack vectors if Acme's original key pair is compromised,\ni.e;\n\n> The attacker can drain the output as transaction fees.\nThere could be ways to reduce that risk, but do not intent to add\ncomplexity to a request. This additional depth of defense is an improvement\nto deter attacks especially if an attack is costly to pull.\n\n> After 12 hours, it may be still possible for attacker to submit\ntransactions in concurrent or ahead of Acme.\nAcme should submit the transaction before the 12 hours and leave it in\nmempool, waiting for nSequence to elapse. Attacker's transaction submitted\nafter it *should be(?)* rejected by the network. Attacker's transaction\nsubmitted before it will be caught by the monitoring function. Even if the\nabove assumption is misguided, the use-case is still useful if transactions\nhave value smaller quantity than total, that limits loss to only the\ntransaction's value. At the same time, that reveals the fact that the key\npair is compromised and the further preventive actions can be carried out\nusing the secure key pair.\n\nPossible privacy concern: The use case demonstrated change to be sent back\nto self (there may be related concern such as wrongly configured digital\nsignature). The use case assumed P2SH is exceptional case, kind of like\nmultisignature wallets, for custodians like e-commerce merchants, exchanges.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181017/30865417/attachment.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2018-10-17T05:17:15",
                "message_text_only": "Good morning kim,\n\nThis seems to be a specific instance of \"covenants\".  I believe, that there are vague plans to possibly include OP_CHECKSIGFROMSTACK, which would allow covenants much more generally, but with more complex (clever) SCRIPT.\n\nThe specification of the behavior of the opcode is P2SH-focused and is unuseable for SegWit, but possibly it can instead be made a SegWit-only opcode instead (especially, since, by my knowledge, future plans for SCRIPT updates will generally involve only future SegWit versions).\n\nThe specification could be improved as below:\n\nThe OP_CHECKTXOUTSCRIPTHASHVERIFY will succeed if either of the below are true for all outputs of the transaction that is spending this SCRIPT:\n\n1.  It is a P2WSH whose SegWit version and hash, when concatenated together, are equal to the stack top.\n2.  It is a P2WSH or P2SH-P2WSH that is the same as the transaction output being spent.\n\nOtherwise, if any output does not match either of the above, this operation will fail.\n\nRegards,\nZmnSCPxj\n\nSent with [ProtonMail](https://protonmail.com) Secure Email.\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Wednesday, October 17, 2018 12:26 PM, kim juan via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Discussing the possibility of a new opcode (OP_CHECKTXOUTSCRIPTHASHVERIFY) for the Bitcoin scripting system that allows a transaction output to be only spendable in a predefined manner.\n> Brief Description\n>\n> Bitcoin transactions have a txoutScript (scriptPubKey) field for each output.txoutScriptHash=Hash160(txoutScript)\n>\n> Word: OP_CHECKTXOUTSCRIPTHASHVERIFY\n> Opcode: 184 (OP_NOP9)\n> Input: x\n> Output: x / fail*\n> Description:\n> Marks transaction as invalid if txoutScriptHash is not equal to top stack item and value of txoutScript is not equal to OP_HASH160 ThisRedeemScriptHash OP_EQUAL*.\n>\n> * Not entirely certain here, always have this impression new opcode has to \"NOP or fail\" to ensure it can be implemented. As a result, the item may also has to be dropped explicitly.* So that change can be sent back to the this redeem script. There are challenges to generalize this as a script hash cause of some cyclic reference. Not sure if cyclic is the correct term, ie: A = hash (B's hash) and B = hash (A's hash) is impossible.\n>\n> Sample use case\n>\n> Acme has an ordinary key pair and a secure key pair. The ordinary key pair is assumed to be in a less secure environment.  The private key of the secure key pair will never ever expose itself until the moment it needs to revoke transaction of the ordinary key pair.\n>\n> redeemScript:\n>   IF    2 <Acme's pubkey> <securePubkey> 2 CHECKMULTISIG  ELSE\n>     <txoutScriptHash> CHECKTXOUTSCRIPTHASHVERIFY DROP <Acme's pubkey> CHECKSIG\n>   ENDIF\n>\n> The only ways to spend its outputs from this ThisRedeemScript is to forward it to NextRedeemScript. Even if the original key pair is compromised, the attacker can only spend it this way and has to publish the transaction.\n>\n> tx1:\n>   scriptSig: <sig> <pubKey> 0  scriptPubKey: HASH160 <Hash160(NextRedeemScript)> EQUAL\n>\n> tx2: //if there is change\n>   scriptSig: <sig> <Acme's pubKey>  scriptPubKey: HASH160 ThisRedeemScriptHash EQUAL\n> NextRedeemScript is time locked. Acme is able to monitor for unauthorized transactions and react within the sequence-defined duration. The combination of 2 key pair as one multisig can spend the output immediately regardless of the timelock.\n>\n> NextRedeemScript:  IF    2 <Acme's pubkey> <securePubkey> 2 CHECKMULTISIG  ELSE    \"12h\" CHECKSEQUENCEVERIFY DROP <Acme's pubkey> CHECKSIG  ENDIF\n>\n> After 12 hours, Acme is can spend the output as normal.\n>\n> tx:\n>   scriptSig: <sig> <pubkey> 0  scriptPubKey: DUP HASH160 <recipient's pubkeyHash> EQUALVERIFY CHECKSIG\n>\n> Description\n>\n> CSV and CTLV already laid the groundwork for retroactive invalidation, showcased in innovative protocols such as HTLC of lightning network.\n>\n> As illustrated from the sample use case, there are other classes of problems that may requires retroactive invalidation in different and less-interactive way from channels. Most of those problems require a primitive opcode to influence how the output can be spent.\n>\n> If the use case works as expected, attacks will be less rewarding. There are still other attack vectors if Acme's original key pair is compromised, i.e;\n>\n>> The attacker can drain the output as transaction fees.\n> There could be ways to reduce that risk, but do not intent to add complexity to a request. This additional depth of defense is an improvement to deter attacks especially if an attack is costly to pull.\n>\n>> After 12 hours, it may be still possible for attacker to submit transactions in concurrent or ahead of Acme.\n> Acme should submit the transaction before the 12 hours and leave it in mempool, waiting for nSequence to elapse. Attacker's transaction submitted after it should be(?) rejected by the network. Attacker's transaction submitted before it will be caught by the monitoring function. Even if the above assumption is misguided, the use-case is still useful if transactions have value smaller quantity than total, that limits loss to only the transaction's value. At the same time, that reveals the fact that the key pair is compromised and the further preventive actions can be carried out using the secure key pair.\n>\n> Possible privacy concern: The use case demonstrated change to be sent back to self (there may be related concern such as wrongly configured digital signature). The use case assumed P2SH is exceptional case, kind of like multisignature wallets, for custodians like e-commerce merchants, exchanges.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181017/466b038e/attachment-0001.html>"
            },
            {
                "author": "kim juan",
                "date": "2018-10-17T06:58:10",
                "message_text_only": "Hi ZmnSCPxj,\n\nThanks for the heads up and suggestions.\n\nFound my way to the bitcoin-covenant article. That is indeed generalized\nand flexible, hence more powerful than this dumbed-down plain comparison of\noutput bytes-to-bytes.\n\nInterestingly, the vault described in bitcoin covenant, which can mitigate\nrisk of even losing the secured (or both) key, can also be achieved using\nthis naive CheckTxoutscriptVerify.\n\nI wish bitcoin-covenant can be materialized, private key management is\nsomething to lose sleep for.\n\n\nOn Wed, Oct 17, 2018 at 1:17 PM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n\n> Good morning kim,\n>\n> This seems to be a specific instance of \"covenants\".  I believe, that\n> there are vague plans to possibly include OP_CHECKSIGFROMSTACK, which would\n> allow covenants much more generally, but with more complex (clever) SCRIPT.\n>\n> The specification of the behavior of the opcode is P2SH-focused and is\n> unuseable for SegWit, but possibly it can instead be made a SegWit-only\n> opcode instead (especially, since, by my knowledge, future plans for SCRIPT\n> updates will generally involve only future SegWit versions).\n>\n> The specification could be improved as below:\n>\n> The OP_CHECKTXOUTSCRIPTHASHVERIFY will succeed if either of the below are\n> true for all outputs of the transaction that is spending this SCRIPT:\n>\n> 1.  It is a P2WSH whose SegWit version and hash, when concatenated\n> together, are equal to the stack top.\n> 2.  It is a P2WSH or P2SH-P2WSH that is the same as the transaction output\n> being spent.\n>\n> Otherwise, if any output does not match either of the above, this\n> operation will fail.\n>\n> Regards,\n> ZmnSCPxj\n>\n>\n> Sent with ProtonMail <https://protonmail.com> Secure Email.\n>\n> \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> On Wednesday, October 17, 2018 12:26 PM, kim juan via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Discussing the possibility of a new opcode (OP_CHECKTXOUTSCRIPTHASHVERIFY)\n> for the Bitcoin scripting system that allows a transaction output to be\n> only spendable in a predefined manner.\n> *Brief Description*\n>\n> Bitcoin transactions have a txoutScript (scriptPubKey) field for each\n> output.\n> txoutScriptHash=Hash160(txoutScript)\n>\n> *Word*: OP_CHECKTXOUTSCRIPTHASHVERIFY\n> *Opcode*: 184 (OP_NOP9)\n> *Input*: x\n> *Output*: x / fail*\n> *Description*:\n> Marks transaction as invalid if txoutScriptHash is not equal to top stack\n> item and value of txoutScript is not equal to OP_HASH160\n> ThisRedeemScriptHash OP_EQUAL*.\n>\n>\n> ** Not entirely certain here, always have this impression new opcode has\n> to \"NOP or fail\" to ensure it can be implemented. As a result, the item may\n> also has to be dropped explicitly.*** So that change can be sent back to\n> the this redeem script. There are challenges to generalize this as a script\n> hash cause of some cyclic reference. Not sure if cyclic is the correct\n> term, ie: A = hash (B's hash) and B = hash (A's hash) is impossible.*\n>\n> *Sample use case*\n>\n> Acme has an ordinary key pair and a secure key pair. The ordinary key\n> pair is assumed to be in a less secure environment.  The private key of\n> the secure key pair will never ever expose itself until the moment it needs\n> to revoke transaction of the ordinary key pair.\n>\n> redeemScript:\n>   IF\n>     2 <Acme's pubkey> <securePubkey> 2 CHECKMULTISIG\n>   ELSE\n>     <txoutScriptHash> CHECKTXOUTSCRIPTHASHVERIFY DROP <Acme's pubkey>\n> CHECKSIG\n>   ENDIF\n>\n> The only ways to spend its outputs from this ThisRedeemScript is to\n> forward it to NextRedeemScript. Even if the original key pair is compromised,\n> the attacker can only spend it this way and has to publish the transaction.\n>\n> tx1:\n>   scriptSig: <sig> <pubKey> 0\n>   scriptPubKey: HASH160 <Hash160(NextRedeemScript)> EQUAL\n>\n> tx2: //if there is change\n>   scriptSig: <sig> <Acme's pubKey>\n>   scriptPubKey: HASH160 ThisRedeemScriptHash EQUAL\n>\n> NextRedeemScript is time locked. Acme is able to monitor for unauthorized\n> transactions and react within the sequence-defined duration. The\n> combination of 2 key pair as one multisig can spend the output immediately\n> regardless of the timelock.\n>\n> NextRedeemScript:\n>   IF\n>     2 <Acme's pubkey> <securePubkey> 2 CHECKMULTISIG\n>   ELSE\n>     \"12h\" CHECKSEQUENCEVERIFY DROP <Acme's pubkey> CHECKSIG\n>   ENDIF\n>\n> After 12 hours, Acme is can spend the output as normal.\n>\n> tx:\n>   scriptSig: <sig> <pubkey> 0\n>   scriptPubKey: DUP HASH160 <recipient's pubkeyHash> EQUALVERIFY CHECKSIG\n>\n> *Description*\n>\n> CSV and CTLV already laid the groundwork for retroactive invalidation,\n> showcased in innovative protocols such as HTLC of lightning network.\n>\n> As illustrated from the sample use case, there are other classes of\n> problems that may requires retroactive invalidation in different and\n> less-interactive way from channels. Most of those problems require a\n> primitive opcode to influence how the output can be spent.\n>\n> If the use case works as expected, attacks will be *less* rewarding.\n> There are still other attack vectors if Acme's original key pair is\n> compromised, i.e;\n>\n> > The attacker can drain the output as transaction fees.\n> There could be ways to reduce that risk, but do not intent to add\n> complexity to a request. This additional depth of defense is an improvement\n> to deter attacks especially if an attack is costly to pull.\n>\n> > After 12 hours, it may be still possible for attacker to submit\n> transactions in concurrent or ahead of Acme.\n> Acme should submit the transaction before the 12 hours and leave it in\n> mempool, waiting for nSequence to elapse. Attacker's transaction\n> submitted after it *should be(?)* rejected by the network. Attacker's\n> transaction submitted before it will be caught by the monitoring function.\n> Even if the above assumption is misguided, the use-case is still useful if\n> transactions have value smaller quantity than total, that limits loss to\n> only the transaction's value. At the same time, that reveals the fact that\n> the key pair is compromised and the further preventive actions can be\n> carried out using the secure key pair.\n>\n> Possible privacy concern: The use case demonstrated change to be sent back\n> to self (there may be related concern such as wrongly configured digital\n> signature). The use case assumed P2SH is exceptional case, kind of like\n> multisignature wallets, for custodians like e-commerce merchants, exchanges.\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181017/46d894bf/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2018-10-17T10:22:59",
                "message_text_only": "Good morning kim,\n\nAn issue with covenants is that the only \"good\" use case so far is vaults.  Indeed, what you originally gave as a usecase in your first email is in fact a vault.\n\nHere is gmax original bitcointalk post: https://bitcointalk.org/index.php?topic=278122.0\n\nSince covenants typically require a complex script template, they are a bit heavy (in terms of blockspace) for a \"simple\" vault application.\n\nI am uncertain if it would be more acceptable to instead target an opcode only for vaults, instead of recursive covenants.\n\nAnother issue with vaults/covenants is that they are easily visible onchain.  Recent efforts have been towards making even contract execution be done offchain, guarded only by the contract participants agreeing that the contract has been executed correctly (taproot, also contracts over Lightning).\n\nRegards,\nZmnSCPxj\n\nSent with [ProtonMail](https://protonmail.com) Secure Email.\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Wednesday, October 17, 2018 2:58 PM, kim juan <kimjuan.chan at gmail.com> wrote:\n\n> Hi ZmnSCPxj,\n>\n> Thanks for the heads up and suggestions.\n>\n> Found my way to the bitcoin-covenant article. That is indeed generalized and flexible, hence more powerful than this dumbed-down plain comparison of output bytes-to-bytes.\n>\n> Interestingly, the vault described in bitcoin covenant, which can mitigate risk of even losing the secured (or both) key, can also be achieved using this naive CheckTxoutscriptVerify.\n>\n> I wish bitcoin-covenant can be materialized, private key management is something to lose sleep for.\n>\n> On Wed, Oct 17, 2018 at 1:17 PM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n>\n>> Good morning kim,\n>>\n>> This seems to be a specific instance of \"covenants\".  I believe, that there are vague plans to possibly include OP_CHECKSIGFROMSTACK, which would allow covenants much more generally, but with more complex (clever) SCRIPT.\n>>\n>> The specification of the behavior of the opcode is P2SH-focused and is unuseable for SegWit, but possibly it can instead be made a SegWit-only opcode instead (especially, since, by my knowledge, future plans for SCRIPT updates will generally involve only future SegWit versions).\n>>\n>> The specification could be improved as below:\n>>\n>> The OP_CHECKTXOUTSCRIPTHASHVERIFY will succeed if either of the below are true for all outputs of the transaction that is spending this SCRIPT:\n>>\n>> 1.  It is a P2WSH whose SegWit version and hash, when concatenated together, are equal to the stack top.\n>> 2.  It is a P2WSH or P2SH-P2WSH that is the same as the transaction output being spent.\n>>\n>> Otherwise, if any output does not match either of the above, this operation will fail.\n>>\n>> Regards,\n>> ZmnSCPxj\n>>\n>> Sent with [ProtonMail](https://protonmail.com) Secure Email.\n>>\n>> \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n>> On Wednesday, October 17, 2018 12:26 PM, kim juan via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> Discussing the possibility of a new opcode (OP_CHECKTXOUTSCRIPTHASHVERIFY) for the Bitcoin scripting system that allows a transaction output to be only spendable in a predefined manner.\n>>> Brief Description\n>>>\n>>> Bitcoin transactions have a txoutScript (scriptPubKey) field for each output.txoutScriptHash=Hash160(txoutScript)\n>>>\n>>> Word: OP_CHECKTXOUTSCRIPTHASHVERIFY\n>>> Opcode: 184 (OP_NOP9)\n>>> Input: x\n>>> Output: x / fail*\n>>> Description:\n>>> Marks transaction as invalid if txoutScriptHash is not equal to top stack item and value of txoutScript is not equal to OP_HASH160 ThisRedeemScriptHash OP_EQUAL*.\n>>>\n>>> * Not entirely certain here, always have this impression new opcode has to \"NOP or fail\" to ensure it can be implemented. As a result, the item may also has to be dropped explicitly.* So that change can be sent back to the this redeem script. There are challenges to generalize this as a script hash cause of some cyclic reference. Not sure if cyclic is the correct term, ie: A = hash (B's hash) and B = hash (A's hash) is impossible.\n>>>\n>>> Sample use case\n>>>\n>>> Acme has an ordinary key pair and a secure key pair. The ordinary key pair is assumed to be in a less secure environment.  The private key of the secure key pair will never ever expose itself until the moment it needs to revoke transaction of the ordinary key pair.\n>>>\n>>> redeemScript:\n>>>   IF    2 <Acme's pubkey> <securePubkey> 2 CHECKMULTISIG  ELSE\n>>>     <txoutScriptHash> CHECKTXOUTSCRIPTHASHVERIFY DROP <Acme's pubkey> CHECKSIG\n>>>   ENDIF\n>>>\n>>> The only ways to spend its outputs from this ThisRedeemScript is to forward it to NextRedeemScript. Even if the original key pair is compromised, the attacker can only spend it this way and has to publish the transaction.\n>>>\n>>> tx1:\n>>>   scriptSig: <sig> <pubKey> 0  scriptPubKey: HASH160 <Hash160(NextRedeemScript)> EQUAL\n>>>\n>>> tx2: //if there is change\n>>>   scriptSig: <sig> <Acme's pubKey>  scriptPubKey: HASH160 ThisRedeemScriptHash EQUAL\n>>> NextRedeemScript is time locked. Acme is able to monitor for unauthorized transactions and react within the sequence-defined duration. The combination of 2 key pair as one multisig can spend the output immediately regardless of the timelock.\n>>>\n>>> NextRedeemScript:  IF    2 <Acme's pubkey> <securePubkey> 2 CHECKMULTISIG  ELSE    \"12h\" CHECKSEQUENCEVERIFY DROP <Acme's pubkey> CHECKSIG  ENDIF\n>>>\n>>> After 12 hours, Acme is can spend the output as normal.\n>>>\n>>> tx:\n>>>   scriptSig: <sig> <pubkey> 0  scriptPubKey: DUP HASH160 <recipient's pubkeyHash> EQUALVERIFY CHECKSIG\n>>>\n>>> Description\n>>>\n>>> CSV and CTLV already laid the groundwork for retroactive invalidation, showcased in innovative protocols such as HTLC of lightning network.\n>>>\n>>> As illustrated from the sample use case, there are other classes of problems that may requires retroactive invalidation in different and less-interactive way from channels. Most of those problems require a primitive opcode to influence how the output can be spent.\n>>>\n>>> If the use case works as expected, attacks will be less rewarding. There are still other attack vectors if Acme's original key pair is compromised, i.e;\n>>>\n>>>> The attacker can drain the output as transaction fees.\n>>> There could be ways to reduce that risk, but do not intent to add complexity to a request. This additional depth of defense is an improvement to deter attacks especially if an attack is costly to pull.\n>>>\n>>>> After 12 hours, it may be still possible for attacker to submit transactions in concurrent or ahead of Acme.\n>>> Acme should submit the transaction before the 12 hours and leave it in mempool, waiting for nSequence to elapse. Attacker's transaction submitted after it should be(?) rejected by the network. Attacker's transaction submitted before it will be caught by the monitoring function. Even if the above assumption is misguided, the use-case is still useful if transactions have value smaller quantity than total, that limits loss to only the transaction's value. At the same time, that reveals the fact that the key pair is compromised and the further preventive actions can be carried out using the secure key pair.\n>>>\n>>> Possible privacy concern: The use case demonstrated change to be sent back to self (there may be related concern such as wrongly configured digital signature). The use case assumed P2SH is exceptional case, kind of like multisignature wallets, for custodians like e-commerce merchants, exchanges.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181017/ba867454/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Request: OP_CHECKTXOUTSCRIPTHASHVERIFY",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "ZmnSCPxj",
                "kim juan"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 24552
        }
    },
    {
        "title": "[bitcoin-dev] Reformatted BIP proposal for address backward compatibility",
        "thread_messages": [
            {
                "author": "Srintuar",
                "date": "2018-10-19T00:29:42",
                "message_text_only": "I have included the comma delimited list in the proposal this time.\nIt occurs to me that it is simpler to just include the desired destination\nscript, so I included that as well as an alternative.\n\nPerhaps that should be included as an option in the spec, at the risk of\nadditional complexity. Alternatively, it could replace the entire\nproposal....\n\n\n\n\n---------------------------------------------------\n\nA simple BIP writeup for a backward compatible URI scheme to help with\nsegwit adoption by online stores and metchants.\n\n\n====\n\n\nThis BIP is a modification of an earlier [[bip-0021.mediawiki|BIP 0021]] by\nNils Schneider and Matt Corallo\n\n==Abstract==\nThis BIP proposes a URI scheme which allows for backward compatibility with\nnative segwit (bech32) wallets and legacy wallets (base58)\n\n==Motivation==\nThe purpose of this URI scheme is to enable all users to easily make\npayments from any wallet, without allowing backward compatibility to be a\nbarrier to segwit adoption. This BIP allows a merchant to preferentially\nreceive payments to a bech32 address, while gracefully allowing older\nclients to make base58 encoded payments.\n\nA comma separated, ordered list of preferred addresses is supplied as\nalternatives to the address field from BIP21. The list is ordered from most\npreferred to least, with the BIP21 address implicitly last. Senders should\nsend to the first address which they know how to send to.\n\n==Specification==\n\n=== Query Keys ===\n\n*address: an ordered list bitcoin destination which is preferred over the\n\"address\" of the url, in order from most preferred to less, with the url\naddress value as least preferred\n\n=== ABNF Grammar ===\n\n    bitcoinaddress = base58 / bech32 / <future address format>\n    bitcoinaddresslist = bitcoinaddress [ \",\" bitcoinaddresslist ]\n\n== Appendix ==\n\n=== Simpler syntax ===\n\n <nowiki>bitcoin:<address>[?amount=<amount>][?label=<label>][?message=<message>][?address=<bitcoinaddresslist>]</nowiki>\n\n=== Examples ===\n\nJust the address:\n bitcoin:3BnsWZiTdYVrqiPh2RP3q9Y3ZqvhbCN2it?address=bc1q5u92yq20hss4rc99mfu23h4dxkxn4uuyqd5dzy\n QR size: ~370 bytes\n\nThe address and other fields:\n bitcoin:3BnsWZiTdYVrqiPh2RP3q9Y3ZqvhbCN2it?addr=bc1q5u92yq20hss4rc99mfu23h4dxkxn4uuyqd5dzy&amount=50&label=Luke-Jr&message=Donation%20for%20project%20xyz\n QR size: ~470 bytes\n\n\nMultiple addresses:\n bitcoin:3BnsWZiTdYVrqiPh2RP3q9Y3ZqvhbCN2it?address=bc1qq82ajthl5mlm50h6x70esvxs7atp3vfnjwp8z5kjdepsjqqw3zcs9u4nnp,bc1q5u92yq20hss4rc99mfu23h4dxkxn4uuyqd5dzy\n\n QR size: ~540 bytes\n\n\n== Reference Implementations ==\n\n=== Bitcoin clients ===\n\n* none yet\n\n== Alternative Proposal ==\n\nJust include the desired script itself, encoded as hex:\n\n bitcoin:3BnsWZiTdYVrqiPh2RP3q9Y3ZqvhbCN2it?script=0014a70aa2014fbc2151e0a5da78a8dead358d3af384\n\n=== Pros ===\n\n* Infinite forward compatibility with any future script design\n* Raw hex encoded scripts are short, and thus would make easy to scan images\n* no need for list processing, or multiple alternatives\n\n=== Cons ==\n\n* address encoding features including checksum and network identification\nwould be absent\n* errors in script formation not detectable by the sender; risk of funds\nloss if the script is spendable but incorrect\n* all error detection depends on the QR code or other transmission medium\n* A separate top level uri scheme, such as bitcoinscript:<hex> might be\nmore appropriate, but would cost backwards compatibility\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181018/f660b4d0/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Reformatted BIP proposal for address backward compatibility",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Srintuar"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3584
        }
    },
    {
        "title": "[bitcoin-dev] Transaction Input/Output Sorting",
        "thread_messages": [
            {
                "author": "rhavar at protonmail.com",
                "date": "2018-10-21T19:00:59",
                "message_text_only": "Right now it's just *way* too easy to spot the boundaries between different wallets. There's a lot of things that contribute to that, but the one that concerns me the most is the way wallets sort transaction inputs and outputs.\n\nSome wallets and protocols (especially HW wallets) have  a strong preference for deterministic sorting (i.e. using bip69), while other wallets have a lot of objections to this.\n\nI'm not sure I fully understand the objections, but I think they can be summarized as \"during the transition period there will be a lot of privacy loss\" and \"if in the future someone wants to use bitcoin in a way that's not compatible with bip69 their transactions will stick out heavily\".\n\nI wonder if this impasse could be solved with deterministic sorting, but based on a semi-secret.  Like  `sortingSecret = hmac(walletSeed, \"sortingSecret\")` and then there's a standardized sort order based on the sortingSecret. e.g. sort inputs/output by the  `hash(data || sortingSecret)`.   Wallets could come up with their own way of computing (or storing) the \"sortingSecret\" but from there it's standardized.\n\nI has the advantages of deterministic sorting (as long as you know the sortingSecret) you can verify it's done correctly and externally looks totally randomized.\n\nAm I missing something, or could this be the way forward?\n\n-Ryan\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181021/0c512d27/attachment.html>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2018-10-21T21:54:26",
                "message_text_only": "Your solution in the second part of the email does not solve the problem\nyou indicated in the first part of your email.\n\nOn Sun, Oct 21, 2018, 23:41 Ryan Havar via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Right now it's just *way* too easy to spot the boundaries between\n> different wallets. There's a lot of things that contribute to that, but the\n> one that concerns me the most is the way wallets sort transaction inputs\n> and outputs.\n>\n> Some wallets and protocols (especially HW wallets) have a strong\n> preference for deterministic sorting (i.e. using bip69), while other\n> wallets have a lot of objections to this.\n>\n> I'm not sure I fully understand the objections, but I think they can be\n> summarized as \"during the transition period there will be a lot of privacy\n> loss\" and \"if in the future someone wants to use bitcoin in a way that's\n> not compatible with bip69 their transactions will stick out heavily\".\n>\n> I wonder if this impasse could be solved with deterministic sorting, but\n> based on a semi-secret.  Like  `sortingSecret = hmac(walletSeed,\n> \"sortingSecret\")` and then there's a standardized sort order based on the\n> sortingSecret. e.g. sort inputs/output by the  `hash(data ||\n> sortingSecret)`.   Wallets could come up with their own way of computing\n> (or storing) the \"sortingSecret\" but from there it's standardized.\n>\n> I has the advantages of deterministic sorting (as long as you know the\n> sortingSecret) you can verify it's done correctly and externally looks\n> totally randomized.\n>\n> Am I missing something, or could this be the way forward?\n>\n> -Ryan\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181021/2cf792a9/attachment.html>"
            },
            {
                "author": "rhavar at protonmail.com",
                "date": "2018-10-22T01:54:55",
                "message_text_only": "On Sunday, October 21, 2018 2:54 PM, Pavol Rusnak <stick at satoshilabs.com> wrote:\n\n> Your solution in the second part of the email does not solve the problem you indicated in the first part of your email.\n\nSorry, I'm not quite sure what parts you are referring to. I assume you might mean my first paragraph, so I'll try explain myself a bit clearer how this makes it harder to find wallet boundaries.\n\nRight now you can generally tell if a transaction is using bip69 or not (as long as you account for the probability that it's randomly sorted to accidentally be bip69). And generally wallets are consistent if they use bip69 or not.\n\nThis can often make it massively easier to detect what is change and not. Let's say I'm clustering a wallet and know they're using a wallet that always uses bip69, and I'm looking at a transaction in that cluster and trying to guess which is the change and which is not. There's a lot of things you can use to assign a probability. The most obvious thing is looking at the amount of significant-digits of the output amounts  (if they vary a lot, change tends to be the one with more), but a much more powerful one is looking at how the outputs are spent (and if they end up spend-linking back into the original cluster).\n\nSo let's say that the transaction output is spent by a non-bip69 transaction -- I right away know that it's going to (almost certainly) be a different wallet (e.g. the destination).\n\nMy  (shower-thoughty) \"solution\" fixes this problem, because an outside observer has no way of knowing if a transaction is using deterministic sorting or not, so can not use this information to establish wallet boundaries.\n\n--\nOn somewhat of a tangent I was actually fortunate enough to have someone with access to the biggest(?) bitcoin analysis service help me with a few experiments. While I was genuinely taken aback by how accurate some of their analysis can be, I also found it pretty easy to trick -- implying it relies heavily on some fragile heuristics.\n\nI don't like to be alarmist, but I worry a lot about the fungibility of bitcoin when we have such effective blockchain analysis and a *LOT* of the ecosystem using a centralized analytics service. And in fact, we're already starting to see some minor effects of this (e.g. people already know that if they gamble their funds, they'll probably have trouble using an exchange later). And I don't think we're too far from the point where any \"unidentified\" bitcoin is instantly flagged as \"suspicious\" (and for instance, requires more explaining for by exchanges) potentially seriously harming bitcoin fungibility and it's value determined also by it's history.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181022/6473e67a/attachment.html>"
            },
            {
                "author": "Chris Belcher",
                "date": "2018-10-23T14:29:30",
                "message_text_only": "Thanks for bringing our attention to this important topic.\n\nAccording to (https://p2sh.info/dashboard/db/bip-69-stats) around 60% of\ntransaction follow bip69 (possibly just by chance).\n\nIf its useful, a bitcoin wiki page that tracks wallets which use bip69\ncan be created. A similar page exists for bech32\n(https://en.bitcoin.it/wiki/Bech32_adoption). If we had this at least\nwe'd know which open source wallets we can write code for or which\nclosed source wallets we can bug about bip69.\n\n\nOn 22/10/2018 02:54, Ryan Havar via bitcoin-dev wrote:\n> On Sunday, October 21, 2018 2:54 PM, Pavol Rusnak <stick at satoshilabs.com> wrote:\n> \n>> Your solution in the second part of the email does not solve the problem you indicated in the first part of your email.\n> \n> Sorry, I'm not quite sure what parts you are referring to. I assume you might mean my first paragraph, so I'll try explain myself a bit clearer how this makes it harder to find wallet boundaries.\n> \n> Right now you can generally tell if a transaction is using bip69 or not (as long as you account for the probability that it's randomly sorted to accidentally be bip69). And generally wallets are consistent if they use bip69 or not.\n> \n> This can often make it massively easier to detect what is change and not. Let's say I'm clustering a wallet and know they're using a wallet that always uses bip69, and I'm looking at a transaction in that cluster and trying to guess which is the change and which is not. There's a lot of things you can use to assign a probability. The most obvious thing is looking at the amount of significant-digits of the output amounts  (if they vary a lot, change tends to be the one with more), but a much more powerful one is looking at how the outputs are spent (and if they end up spend-linking back into the original cluster).\n> \n> So let's say that the transaction output is spent by a non-bip69 transaction -- I right away know that it's going to (almost certainly) be a different wallet (e.g. the destination).\n> \n> My  (shower-thoughty) \"solution\" fixes this problem, because an outside observer has no way of knowing if a transaction is using deterministic sorting or not, so can not use this information to establish wallet boundaries.\n> \n> --\n> On somewhat of a tangent I was actually fortunate enough to have someone with access to the biggest(?) bitcoin analysis service help me with a few experiments. While I was genuinely taken aback by how accurate some of their analysis can be, I also found it pretty easy to trick -- implying it relies heavily on some fragile heuristics.\n> \n> I don't like to be alarmist, but I worry a lot about the fungibility of bitcoin when we have such effective blockchain analysis and a *LOT* of the ecosystem using a centralized analytics service. And in fact, we're already starting to see some minor effects of this (e.g. people already know that if they gamble their funds, they'll probably have trouble using an exchange later). And I don't think we're too far from the point where any \"unidentified\" bitcoin is instantly flagged as \"suspicious\" (and for instance, requires more explaining for by exchanges) potentially seriously harming bitcoin fungibility and it's value determined also by it's history.\n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2018-10-24T16:12:39",
                "message_text_only": "On Wed, Oct 24, 2018 at 3:52 PM Chris Belcher via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Thanks for bringing our attention to this important topic.\n>\n> According to (https://p2sh.info/dashboard/db/bip-69-stats) around 60% of\n> transaction follow bip69 (possibly just by chance).\n\nA two input randomly ordered transaction has a 50% chance of\n'following' bip-69.  So 60% sound like a small minority."
            },
            {
                "author": "rhavar at protonmail.com",
                "date": "2018-10-24T17:52:38",
                "message_text_only": "That's pretty easy to quantify. I wrote a quick script to grab the last few blocks, and then shuffle the inputs/outputs before testing if each transaction is bip69 or not.\n\nThe result was 42% of all transactions would accidentally be bip69 when randomized.\n\nSo clearly randomization is a lot more popular than bip69 at the moment, but I'm not sure that it matters much. As soon as you have more than a few inputs/outputs, you can tell with a high confidence if the transaction is bip69 or not.\n\nAnd of course if you're clustering a wallet, you can figure out extremely easily how that wallet behaves wrt bip6.\n\n\n-Ryan\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Wednesday, October 24, 2018 9:12 AM, Gregory Maxwell via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Wed, Oct 24, 2018 at 3:52 PM Chris Belcher via bitcoin-dev\n> bitcoin-dev at lists.linuxfoundation.org wrote:\n>\n> > Thanks for bringing our attention to this important topic.\n> > According to (https://p2sh.info/dashboard/db/bip-69-stats) around 60% of\n> > transaction follow bip69 (possibly just by chance).\n>\n> A two input randomly ordered transaction has a 50% chance of\n> 'following' bip-69. So 60% sound like a small minority."
            },
            {
                "author": "rhavar at protonmail.com",
                "date": "2018-10-24T18:21:00",
                "message_text_only": "Actually, I think it can be calculated a bit smarter using maths (which unfortunately I'm not very good at...). But I assume it's something like:\n\n```\nfalsePositiveChances := 0.0\n\nforeach( transaction of transactions) {\n\tfalsePositiveChances += (1 / factorial(transaction.Inputs)) * (1 / factorial(transaction.Ouputs))\n}\n\ntotalFalsePositives := falsePositiveChances / transactions.length\n```\n\nIf so, I get 42.4% false positive rate. So clearly bip69 is getting used a fair bit, but not nearly as much as randomization.\n\n\n-Ryan\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Wednesday, October 24, 2018 10:52 AM, <rhavar at protonmail.com> wrote:\n\n> That's pretty easy to quantify. I wrote a quick script to grab the last few blocks, and then shuffle the inputs/outputs before testing if each transaction is bip69 or not.\n>\n> The result was 42% of all transactions would accidentally be bip69 when randomized.\n>\n> So clearly randomization is a lot more popular than bip69 at the moment, but I'm not sure that it matters much. As soon as you have more than a few inputs/outputs, you can tell with a high confidence if the transaction is bip69 or not.\n>\n> And of course if you're clustering a wallet, you can figure out extremely easily how that wallet behaves wrt bip6.\n>\n> -Ryan\n>\n> \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> On Wednesday, October 24, 2018 9:12 AM, Gregory Maxwell via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n>\n> > On Wed, Oct 24, 2018 at 3:52 PM Chris Belcher via bitcoin-dev\n> > bitcoin-dev at lists.linuxfoundation.org wrote:\n> >\n> > > Thanks for bringing our attention to this important topic.\n> > > According to (https://p2sh.info/dashboard/db/bip-69-stats) around 60% of\n> > > transaction follow bip69 (possibly just by chance).\n> >\n> > A two input randomly ordered transaction has a 50% chance of\n> > 'following' bip-69. So 60% sound like a small minority."
            }
        ],
        "thread_summary": {
            "title": "Transaction Input/Output Sorting",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Chris Belcher",
                "Pavol Rusnak",
                "rhavar at protonmail.com",
                "Gregory Maxwell"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 13311
        }
    },
    {
        "title": "[bitcoin-dev] Generalised taproot",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2018-10-24T02:22:24",
                "message_text_only": "On Thu, Jul 12, 2018 at 6:52 PM Anthony Towns via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Fri, Jan 26, 2018 at 09:34:39PM +0000, Gregory Maxwell via bitcoin-dev wrote:\n> > [pubkey]\n> >       \\-[pubkey]&&CSV\n> >              \\-[fancy script]\n>\n> I think it's possible to do recursive taproot in this manner in a\n> neat way, using Pedersen Commitments.\n>\n> (Background: A Pedersen commitment uses a second generator in the curve,\n> and rather than constructing a point from a single secret, like A=a*G,\n> it constructs a point from two secrets, like C=a*G+b*G2, and finding a\n> different c,d such that C=c*G+d*G2 gives you the discrete log of G2)\n>\n> So combining this with the taproot structure gives an equation like:\n>\n>   P = a*G + s*G2 + H(a*G+s*G2, Q)*G\n>\n> If you take \"a\" to be a private key (so A=a*G is the corresponding\n> pubkey), \"s\" to be (the hash of) a set of additional conditions for\n> spending with the pubkey, and \"Q\" to be an alternative method of spending,\n> you get a recursive taproot construction.\n\nI think this is a very neat construction, and has advantages beyond\nsolving the recursive-taproot-without-revealing-intermediary-scripts problem\n(which is useful, but I would consider a stretch goal at best).\n\nTo summarize, this is my understanding of g'root:\n* A spending condition is a policy of the form \"sign with public key A\n  and additionally satsify script S\". Such a condition is associated with\n  the point P = A + s*G2 (where G2 is a second independent generator for the\n  curve, and s=H(S)). To satisfy such a condition, you reveal S, provide\n  inputs that satisfy S, together with a signature for public key (P - s*G2).\n  We'll call A the companion key of spending condition P (as opposed to other\n  public keys which may appear in the script S).\n* A scriptPubKey (or redeemScript in case of P2SH) can either be a spending\n  condition P directly, or a P2C derivation (using P + H(P,Q)G) of a spending\n  condition and an alternative. That alternative can either be another P2C\n  derivation (\"recursive Taproot\"), or a Merkle tree of disjunct spending\n  conditions.\n\nThis is elegant in that it removes the distinction between pay-to-pubkey and\npay-to-script constructions; every point becomes the representation of both.\nAs long as every script(branch) requires at least one pubkey check, it\ncomes at no cost (neither witness size or computational).\n\nHowever, I think it also offers an easy way to construct a softfork-safe\ncross-input aggregation system (discussed here before:\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-March/015838.html).\n\nEssentially what's done here is extracting one key out of every spending\ncondition, given it a special place (the companion key) in the execution\nstructure - rather than being part of freeform script opcodes - and made it\ncheaper to satisfy (as no pubkey needs to be revealed for it). This makes sense,\nas we can assume that every (secure) script contains at least one CHECKSIG or\nsemantically equivalent operation, and with Schnorr multisignatures, can often\nexpect that to be just one key representing the set of all those who have to\nsign.\n\nHowever, it also means we could simply restrict a future cross-input signature\naggregation system to only apply to the set of these companion keys (one per\ninput). They are not subject to potential changes to the scripting language, as\nthey're outside of that. Under the assumption that most spending policies can be\nencoded s a tractably-sized set of disjunct conditions, each with just a single\nfixed set of public keys, the companion keys actually embody all public keys\ninvolved in a transaction.\n\n> (As far as deployment goes, I think it makes sense to get an initial\n> schnorr/taproot/mast deployment out first, and add graftroot/aggregation\n> later. My feeling is there's no great urgency for generalised taproot, so\n> it would make sense to keep doing schnorr/taproot/mast for now, take time\n> analysing generalised taproot, and if it seems sane and useful, aim to\n> enable it in a later phase, eg at the same time as graftroot/aggregation)\n\nAgree.\n\n> [0] My inital name for these was \"MAST-ended sc'roots\", since it\n>     combines \"taproot\" and \"scripts\" and something MAST-like but only\n>     at the very end, but I was warned that the Mimblewimble folks have\n>     vast teams monitoring for Harry Potter references and will DMCA me,\n>     which I assume stands for \"Dementors, Ministry, Cruciatus and Avada\n>     kedavra\"... So I'm abbreviating generalised taproot as \"g'root\"\n>     instead. After all, what's the worst the Marvel guys could do?\n\nSebastian Geisler, Glenn Willen, and I had an hour long discussion to come up\nwith a name for the privileged key in g'root, but unfortunately had to resort\nto the Valve universe instead to find \"companion key\"...\n\nCheers,\n\n-- \nPieter"
            }
        ],
        "thread_summary": {
            "title": "Generalised taproot",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Pieter Wuille"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 4855
        }
    },
    {
        "title": "[bitcoin-dev] Proposal to modify POW protocol to improve network decentralization.",
        "thread_messages": [
            {
                "author": "Max Hastings",
                "date": "2018-10-30T04:40:54",
                "message_text_only": "I wrote up a proposal that modifies the proof of work protocol to improve\ndecentralization, by encouraging miners to move from larger pools to\nsmaller pools or even mining solo, while still receiving a regular stream\nof income.\n\nYou can read my proposal here:\nhttps://drive.google.com/open?id=1vkk7yI7F2QGDIBhHf_aYVHzpWrcaPVZA\n\nI am looking for feedback on the idea.\n\nThanks,\nMax\n\n----------------------------------------------------------------------------------\n\nMining Share Transactions\n\nMax Hastings\n\n\n\n*Abstract*\u2014One of the challenges Bitcoin continues to face is the tendency\nof the network becoming more centralized over time as miners join pools\nrather than mining solo. As of this writing the four biggest pools control\nover 51% of the total networking hash power, with the largest of the four\ncontrolling almost 20%. This paper will discuss a possible modification to\nthe current Proof of Work protocol that Bitcoin and other cryptocurrencies\nuse that will help incentivize miners to mine solo or join a smaller pool,\nrather than joining the largest pools.\n\n\n\n*1.      **What is Pool Mining?*\n\nUnder the proof of work protocol miners compete with one another to mine\nthe next block by hashing a block header, then making small changes to the\nnonce or timestamp to get a different hash value each time the data is\nhashed. Miners will do this until the resulting hash value is below the\ncurrent difficulty target. At that point the miner has successfully solved\na block, which then is propagated across the network and validated by each\nnode. This proof of work system works as a lottery that a miner can win for\nevery block. In Bitcoin\u2019s case a new block is found on average every 10\nminutes. Currently there\u2019s an estimated number of 100,000 miners on the\nBitcoin network with a combined hash power of 50 million TH/s. With that\nmany participants with that much hash power, the average time it takes for\na miner to solve a block by themselves can take a long time. Most miners\ndemand a more consistent stream of income rather than waiting to win the\nlottery. They currently achieve this in one of two ways, centralized pool\nmining and p2pool mining. Centralized pool mining works by a pool operator\nhosting a full node, generating a block header for the next block and\ndistributing the block header to their pool miners to start hashing. The\nminers on the pool will occasionally submit what is known as \u201cshares\u201d which\nis a hash that solves a lower difficulty than what the block needs to be\nsolved, back to the pool operator. The purpose of this is to prove to the\npool operator that you are completing work. Every so often a miner on the\npool will solve a share that also solves the block which the pool operator\nwill then propagate across the network. The pool operator will then\ndistribute the block reward to all miners based on the number of shares\nthey have contributed.\n\n*2.       **How Pool Mining centralizes the Blockchain*\n\nWhen a miner joins a pool they mine the block header that is given to them\nby the pool operator. The pool operator has full control over which\ntransactions will go inside the block. This gives the pool operator the\nability to maliciously use the entire hashing power of the pool to attempt\na double spend attack on the network, if desired. The largest Bitcoin\nmining pool has 20% of the total network hashing power. This is not enough\npower to even attempt a double spend attack, however if multiple large\npools conspire they could easily conduct a double spend attack on the\nnetwork. It doesn\u2019t take more than a few bad pool operators to collude with\none another to conduct a harmful double spend attack on the network.\n\n*3.      **Mining Share Transactions*\n\nMining share transactions help incentivize miners to mine solo instead of\njoining a pool while still retaining the same benefits of receiving a\ncontinuous stream of small rewards rather than having to mine an entire\nblock. Mining shares also significantly change how consensus happens on the\nblockchain. To mine the next block, miners first create mining share\ntransactions which represent the work of having mined a fraction of the\nnext block. Each block is required to contain X number of mining share\ntransactions for it to be considered valid. This is the reason why all\nnodes on the network start mining the next block by first mining share\ntransactions. Each mining share transaction contains two crucial pieces of\ndata. The hash of the previous block, and a transaction output. After a\nnode receives or creates X amount of mining share transactions for the next\nblock, the nodes will begin to hash a block header which will contain X\namount of mining share transactions in addition to the normal transactions.\nKeep in mind, the target difficulty for generating a valid block header and\na mining share are equal.\n\n*4.      **Maintaining a Blockchain Consensus*\n\nA block header contains the Merkle root which contains the transactions\nthat are in a block. Traditionally the block header is backed by 100% of\nthe mining work by the network, but with mining shares the block header is\nonly backed by a fraction of the total work, precisely 1 / (X + 1). Where X\nis the total number of mining share transactions required in each block. It\nwill be common to have multiple competing block headers broadcasted shortly\nafter X amount of mining share transactions have been mined. However, after\na node receives a valid block, it will begin mining new share transactions\non to that chain. If multiple valid blocks are received by the node, they\nwill have to pick which fork to mine off of. As mining share transactions\nare broadcasted throughout the network, nodes will mine off the fork that\nhas the best chance at reaching X amount of mining share transactions first\nso that the next block can be mined. For example, block A, and block B are\nboth valid blocks which creates a fork on the chain. As nodes start\ngenerating mining shares for either fork they will be continuously\nmonitoring the competing forks for how many mining shares they currently\nhave. Nodes will switch to the fork with the most work behind it based on\nthe number of mining share transactions already mined. This will allow the\nblockchain network to reach a consensus fairly quickly as nodes monitor the\nnumber of mining share transactions coming in for multiple competing blocks.\n\n*5.      **How to measure Transaction Confirmations.*\n\nTraditionally the confirmation number for transactions are calculated based\non the depth that the transaction is in the chain. For example, if the\ntransaction is in the block at height 10, and the current block height is\n15, then the number of confirmations for that transaction is 6. With mining\nshare transactions, confirmations are measured differently since the block\nonly represents a fraction of the total work. For example, if X is 99,\nmeaning each block needs 99 mining share transactions to be considered\nvalid, then each block and mining share transaction is equal to 0.01\nconfirmations. If Transaction A is in block 1, and there are currently 49\nmining share transactions mined for block 2 then transaction A has a\nconfirmation number of 0.5. If block 2 is already mined and there are 49\nmining shares for block 3, then transaction A would have a confirmation\nnumber of 1.5.\n\n*6.      **Conclusion*\n\nOne of the unique attributes of Bitcoin is that it is a decentralized\ndigital currency. It is important to keep Bitcoin and other cryptocurrency\nnetworks as decentralized as possible to prevent bad actors from performing\na double spend attack on the network. With mining share transactions, users\nare encouraged to mine solo rather than mining on a pool while still\nretaining a predictable stream of income. With a more decentralized\nnetwork, it makes it more difficult for bad actors to attack the network.\nMining share transactions modifies the proof of work protocol in a way that\nchanges how blockchain consensus happens. Nodes monitor the number of share\ntransactions for competing blocks and contribute to the fork that has the\nmost. This allows for consensus to happen fairly quickly after competing\nblocks are broadcasted. Confirmations also have to be measured differently\nso that users receiving transactions can accurately figure out how\nconfident they should be that their transaction is final. Mining share\ntransactions will increase the security and the integrity of the blockchain\nnetwork by making it more decentralized.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181029/61114e00/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposal to modify POW protocol to improve network decentralization.",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Max Hastings"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 8642
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Core 0.17.0.1 released",
        "thread_messages": [
            {
                "author": "Wladimir J. van der Laan",
                "date": "2018-10-30T13:28:19",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nBitcoin Core version 0.17.0.1 is now available from:\n\n  <https://bitcoincore.org/bin/bitcoin-core-0.17.0.1/>\n\nor through BitTorrent:\n\n  magnet:?xt=urn:btih:70749cf2cf2922a21208b4ae760c9f2f9d1e7f11&dn=bitcoin-core-0.17.0.1&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969&tr=udp%3A%2F%2Fzer0day.ch%3A1337&tr=udp%3A%2F%2Fexplodie.org%3A6969\n\nThis is a new major version release, including new features, various bugfixes\nand performance improvements, as well as updated translations.\n\nPlease report bugs using the issue tracker at GitHub:\n\n  <https://github.com/bitcoin/bitcoin/issues>\n\nTo receive security and update notifications, please subscribe to:\n\n  <https://bitcoincore.org/en/list/announcements/join/>\n\nNotable changes\n===============\n\nAn issue was solved with OSX dmg generation, affecting macOS 10.12 to 10.14,\nwhich could cause Finder to crash on install.\n\nThere are no significant changes for other operating systems.\n\n0.17.0.1 change log\n===================\n\n### Build system\n- - #14416 `eb2cc84` Fix OSX dmg issue (10.12 to 10.14) (jonasschnelli)\n\n### Documentation\n- - #14509 `1b5af2c` [0.17] doc: use SegWit in getblocktemplate example (Sjors)\n\nCredits\n=======\n\nThanks to everyone who directly contributed to this release:\n\n- - Jonas Schnelli\n- - Pieter Wuille\n- - Sjors Provoost\n- - Wladimir J. van der Laan\n\n-----BEGIN PGP SIGNATURE-----\n\niQEzBAEBCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAlvYRjgACgkQHkrtYphs\n0l1Gigf/dRF0wlT/Ht3hkRs4vo4FqBy6fNeTbn0G20uiK/L0XYdj9fDoVrbzuDHX\n1cszwwUyj3E/wLredII3sEIaMN3ttcsl80ngqeE4VATMFUkjXscihh3kxGzSLZ1b\nlrxsnLJuQao/L6TEwtRhe2AkKBJao7Q5Eamz9z1ZdFvOGZmRbzSiJqCaXt9NPPl+\nJGcug0xBcEP12pele6itXzxxXjESjcRc/o7ETEuiThVJdTlRQA+mqQFAgvOgtqhr\nIrRB2m7gkw7eCabCVbV3ueX/4MEEvSnq/N00W1T82r2zNYM1caUmsLn6TDdO55sp\npSs3DKcTxNj//S/Axwo79TVrrSdb5A==\n=d2U1\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.17.0.1 released",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Wladimir J. van der Laan"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2001
        }
    },
    {
        "title": "[bitcoin-dev] New BIP for Scaling Proposal",
        "thread_messages": [
            {
                "author": "Karl Kreder",
                "date": "2018-10-31T23:08:17",
                "message_text_only": "All,\n\nI would like to propose a new BIP to bitcoin called BlockReduce.\nBlockReduce presents a new blockchain topology that offers 3+ orders of\nmagnitude improvement in transaction throughput while avoiding the\nintroduction of hierarchical power structures and centralization. This is\naccomplished through a modification to the block reward incentive to not\nonly reward work, but to also reward optimization of network constraints\nand efficient propagation of transactions. This is accomplished by creating\na Proof-of-Work (PoW) managed hierarchy of tightly-coupled, merge-mined\nblockchains.\n\nBlockReduce is actually highly compatible with the Bitcoin codebase in that\nin only requires a sharding of state and the introduction of a 268 byte\nheader that allows for 3 levels of merge-mining.  Please checkout a paper\noutlining BlockReduce here:\n\nhttps://s3-us-west-2.amazonaws.com/gridplus/BlockReduce+(9).pdf\n\nPlease let me know if you have any comments or questions.  Also, if you\ncould tell me the process for getting a BIP listed on Github I would\nappreciate it.\n\nThanks,\n\nKarl Kreder\nCSO, VP of Hardware Engineering\nGridPlus Inc.\n\n\u1427\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181101/5fa402ea/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: BlockReduce (9).pdf\nType: application/pdf\nSize: 342473 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20181101/5fa402ea/attachment-0001.pdf>"
            }
        ],
        "thread_summary": {
            "title": "New BIP for Scaling Proposal",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Karl Kreder"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1599
        }
    }
]